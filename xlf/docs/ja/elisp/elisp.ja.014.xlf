<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="elisp">
    <body>
      <group id="elisp">
        <trans-unit id="cd969dae78e04fd8c37f6b3cfb39c7d32c4a3daa" translate="yes" xml:space="preserve">
          <source>Syntax Tables</source>
          <target state="translated">構文テーブル</target>
        </trans-unit>
        <trans-unit id="7a8491486c1dd1e36fecef6fb025b6d953ee6bce" translate="yes" xml:space="preserve">
          <source>Syntax character</source>
          <target state="translated">構文文字</target>
        </trans-unit>
        <trans-unit id="3a75a3c003ea56dc72367919450cb68e784c15a4" translate="yes" xml:space="preserve">
          <source>Syntax flags are encoded in higher order bits, starting 16 bits from the least significant bit. This table gives the power of two which corresponds to each syntax flag.</source>
          <target state="translated">構文フラグは、最下位ビットから16ビットで始まる高次ビットでエンコードされます。この表は、各構文フラグに対応する 2 の累乗を示しています。</target>
        </trans-unit>
        <trans-unit id="69c9b8582ee05373bdfc0abb499365f98dd04862" translate="yes" xml:space="preserve">
          <source>Syntax for Strings</source>
          <target state="translated">文字列の構文</target>
        </trans-unit>
        <trans-unit id="8cb3a281e588cc742b01e3740c59ad1d56db3c93" translate="yes" xml:space="preserve">
          <source>Syntax for control characters.</source>
          <target state="translated">制御文字の構文。</target>
        </trans-unit>
        <trans-unit id="183c7ba87286e0fe725dee087dc513f1f2559a37" translate="yes" xml:space="preserve">
          <source>Syntax for hyper-, super-, and alt-characters.</source>
          <target state="translated">ハイパー文字、スーパー文字、およびアルト文字のための構文。</target>
        </trans-unit>
        <trans-unit id="81b87087386ebffcaa2df63aa5ab7fab58d228b0" translate="yes" xml:space="preserve">
          <source>Syntax for meta-characters.</source>
          <target state="translated">メタキャラクタのための構文。</target>
        </trans-unit>
        <trans-unit id="f7eaf1748919ec8b360cee2686b8fa7780d6554c" translate="yes" xml:space="preserve">
          <source>Syntax for regular characters.</source>
          <target state="translated">正規文字の構文。</target>
        </trans-unit>
        <trans-unit id="e284594ea5fa7caa24811e20fa73e2b5dff45cd4" translate="yes" xml:space="preserve">
          <source>Syntax name</source>
          <target state="translated">構文名</target>
        </trans-unit>
        <trans-unit id="8d26d1dba3b7aae7767b0e849b6989ede03494bf" translate="yes" xml:space="preserve">
          <source>Syntax of Regular Expressions</source>
          <target state="translated">正規表現の構文</target>
        </trans-unit>
        <trans-unit id="d8464bf58345d9a6b7e29aa70e89a5dbda979411" translate="yes" xml:space="preserve">
          <source>Syntax tables (see &lt;a href=&quot;syntax-tables#Syntax-Tables&quot;&gt;Syntax Tables&lt;/a&gt;).</source>
          <target state="translated">構文テーブル（参照&lt;a href=&quot;syntax-tables#Syntax-Tables&quot;&gt;構文テーブル&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="131aa9c3aaea2e49816523d4aa4b0c24a9b447db" translate="yes" xml:space="preserve">
          <source>Syntax tables are implemented as char-tables (see &lt;a href=&quot;char_002dtables#Char_002dTables&quot;&gt;Char-Tables&lt;/a&gt;), but most Lisp programs don&amp;rsquo;t work directly with their elements. Syntax tables do not store syntax data as syntax descriptors (see &lt;a href=&quot;syntax-descriptors#Syntax-Descriptors&quot;&gt;Syntax Descriptors&lt;/a&gt;); they use an internal format, which is documented in this section. This internal format can also be assigned as syntax properties (see &lt;a href=&quot;syntax-properties#Syntax-Properties&quot;&gt;Syntax Properties&lt;/a&gt;).</source>
          <target state="translated">構文テーブルはchar-tablesとして実装されます（&lt;a href=&quot;char_002dtables#Char_002dTables&quot;&gt;Char-Tablesを&lt;/a&gt;参照）が、ほとんどのLispプログラムはそれらの要素を直接操作しません。構文テーブルは、構文記述子として構文データを格納しない（参照&lt;a href=&quot;syntax-descriptors#Syntax-Descriptors&quot;&gt;構文記述子を&lt;/a&gt;）。これらは、このセクションで説明されている内部形式を使用します。この内部形式は、構文プロパティとして割り当てることもできます（&lt;a href=&quot;syntax-properties#Syntax-Properties&quot;&gt;構文プロパティを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="9d59285289ccc6dfb4ed5e5485160fccc3f7588b" translate="yes" xml:space="preserve">
          <source>Syntax tables are not used by the Emacs Lisp reader, which has its own built-in syntactic rules which cannot be changed. (Some Lisp systems provide ways to redefine the read syntax, but we decided to leave this feature out of Emacs Lisp for simplicity.)</source>
          <target state="translated">構文テーブルは Emacs Lisp リーダーでは使用されません。(Lisp システムの中には、読み取り構文を再定義する方法を提供しているものもありますが、簡単にするために、この機能は Emacs Lisp からは除外することにしました)。</target>
        </trans-unit>
        <trans-unit id="3335c043a5759be5adb0f7a04ab0ccf5c5aa2d46" translate="yes" xml:space="preserve">
          <source>System Interface</source>
          <target state="translated">システムインタフェース</target>
        </trans-unit>
        <trans-unit id="b5076ad981f290c37270bb2a148ea3bb144fbfe8" translate="yes" xml:space="preserve">
          <source>Systems that don&amp;rsquo;t use the X window system, such as MS-Windows, don&amp;rsquo;t support the notion of X displays, and have only one display on each host. The display name on these systems doesn&amp;rsquo;t follow the above 3-part format; for example, the display name on MS-Windows systems is a constant string &amp;lsquo;</source>
          <target state="translated">MS-WindowsなどのXウィンドウシステムを使用しないシステムは、Xディスプレイの概念をサポートしておらず、各ホストに1つのディスプレイしかありません。これらのシステムの表示名は、上記の3部構成の形式に従いません。たとえば、MS-Windowsシステムの表示名は定数文字列です '</target>
        </trans-unit>
        <trans-unit id="c2c53d66948214258a26ca9ca845d7ac0c17f8e7" translate="yes" xml:space="preserve">
          <source>T</source>
          <target state="translated">T</target>
        </trans-unit>
        <trans-unit id="38d4aa698a701e2288a153e115d12aab45de5940" translate="yes" xml:space="preserve">
          <source>TAB</source>
          <target state="translated">TAB</target>
        </trans-unit>
        <trans-unit id="a775b64f2cd6a88a198986d46d44e0a021785125" translate="yes" xml:space="preserve">
          <source>TIFF</source>
          <target state="translated">TIFF</target>
        </trans-unit>
        <trans-unit id="d91e1888f2dc09f11a876e25966a6fbd32b9cd87" translate="yes" xml:space="preserve">
          <source>TLS</source>
          <target state="translated">TLS</target>
        </trans-unit>
        <trans-unit id="20c82d216d6c9ffeb3659bcf801fce1cd3ffc885" translate="yes" xml:space="preserve">
          <source>TOOL-BAR</source>
          <target state="translated">TOOL-BAR</target>
        </trans-unit>
        <trans-unit id="ba122ed060e172cdd2f88709faf4e9bdd7194f9a" translate="yes" xml:space="preserve">
          <source>Table of Syntax Classes</source>
          <target state="translated">構文クラスの表</target>
        </trans-unit>
        <trans-unit id="2d8d1919ef262467c56883c41a879af2fee55b4e" translate="yes" xml:space="preserve">
          <source>Table of syntax classes.</source>
          <target state="translated">構文クラスの表。</target>
        </trans-unit>
        <trans-unit id="a8a2a45aa44b8d88ed7a93657b0370ab7c1b47d3" translate="yes" xml:space="preserve">
          <source>Tabulated List mode</source>
          <target state="translated">集計されたリストモード</target>
        </trans-unit>
        <trans-unit id="52c8bfd56e2fda412e0ed96bacdbda1556965513" translate="yes" xml:space="preserve">
          <source>Tabulated List mode is a major mode for displaying tabulated data, i.e., data consisting of &lt;em&gt;entries&lt;/em&gt;, each entry occupying one row of text with its contents divided into columns. Tabulated List mode provides facilities for pretty-printing rows and columns, and sorting the rows according to the values in each column. It is derived from Special mode (see &lt;a href=&quot;basic-major-modes#Basic-Major-Modes&quot;&gt;Basic Major Modes&lt;/a&gt;).</source>
          <target state="translated">表形式リストモードは、表形式のデータ、つまり&lt;em&gt;エントリ&lt;/em&gt;で構成されるデータを表示するための主要なモードです。各エントリは、テキストの1行を占め、その内容は列に分割されています。表形式リストモードは、行と列をきれいに印刷し、各列の値に従って行を並べ替えるための機能を提供します。これは、特殊モードから派生しています（&lt;a href=&quot;basic-major-modes#Basic-Major-Modes&quot;&gt;基本メジャーモードを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="498560170e6db33d7983c6d161bdd46436b34341" translate="yes" xml:space="preserve">
          <source>Tabulated List mode is intended to be used as a parent mode by a more specialized major mode. Examples include Process Menu mode (see &lt;a href=&quot;process-information#Process-Information&quot;&gt;Process Information&lt;/a&gt;) and Package Menu mode (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Menu.html#Package-Menu&quot;&gt;Package Menu&lt;/a&gt; in</source>
          <target state="translated">表形式リストモードは、より特殊なメジャーモードによって親モードとして使用されることを目的としています。例には、プロセスメニューモード（&lt;a href=&quot;process-information#Process-Information&quot;&gt;プロセス情報を&lt;/a&gt;参照）およびパッケージメニューモード（の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Menu.html#Package-Menu&quot;&gt;パッケージメニュー&lt;/a&gt;を参照）が含まれます。</target>
        </trans-unit>
        <trans-unit id="c8f684048b11741d27f33f2d7764ece4796a5527" translate="yes" xml:space="preserve">
          <source>Take care to ensure that the specifications are known to Edebug when you instrument code. If you are instrumenting a function which uses a macro defined in another file, you may first need to either evaluate the &lt;code&gt;require&lt;/code&gt; forms in the file containing your function, or explicitly load the file containing the macro. If the definition of a macro is wrapped by &lt;code&gt;eval-when-compile&lt;/code&gt;, you may need to evaluate it.</source>
          <target state="translated">コードをインストルメントするときは、仕様がEdebugに認識されていることを確認するように注意してください。別のファイルで定義されたマクロを使用する関数をインストルメント化する場合は、最初に、関数を含むファイルの &lt;code&gt;require&lt;/code&gt; フォームを評価するか、マクロを含むファイルを明示的にロードする必要があります。マクロの定義が &lt;code&gt;eval-when-compile&lt;/code&gt; でラップされている場合は、それを評価する必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="0f97cd8471dd801f12b6230920fd1f2d023c055a" translate="yes" xml:space="preserve">
          <source>Technically, a right divider belongs to the window on its left, which means that its width contributes to the total width of that window. A bottom divider belongs to the window above it, which means that its width contributes to the total height of that window. See &lt;a href=&quot;window-sizes#Window-Sizes&quot;&gt;Window Sizes&lt;/a&gt;. When a window has both, a right and a bottom divider, the bottom divider prevails. This means that a bottom divider is drawn over the full total width of its window while the right divider ends above the bottom divider.</source>
          <target state="translated">技術的には、右側の仕切りは左側のウィンドウに属します。つまり、その幅がそのウィンドウの全幅に寄与します。下部の仕切りはその上のウィンドウに属します。つまり、その幅がそのウィンドウの全高に寄与します。&lt;a href=&quot;window-sizes#Window-Sizes&quot;&gt;ウィンドウサイズを&lt;/a&gt;参照してください。ウィンドウに右側と下部の両方の仕切りがある場合、下部の仕切りが優先されます。これは、下部の仕切りがウィンドウの全幅にわたって描画され、右側の仕切りが下部の仕切りの上で終了することを意味します。</target>
        </trans-unit>
        <trans-unit id="703bed112f2bdff3a214f69e179b0387e0f27ed9" translate="yes" xml:space="preserve">
          <source>Technically, this function may be thought of as an atomic action performed in two steps: The first step removes &lt;var&gt;frame1&lt;/var&gt;&amp;rsquo;s window-system window from the display. The second step reinserts &lt;var&gt;frame1&lt;/var&gt;&amp;rsquo;s window into the display below (above if &lt;var&gt;above&lt;/var&gt; is true) that of &lt;var&gt;frame2&lt;/var&gt;. Hence the position of &lt;var&gt;frame2&lt;/var&gt; in its display&amp;rsquo;s Z (stacking) order relative to all other frames excluding &lt;var&gt;frame1&lt;/var&gt; remains unaltered.</source>
          <target state="translated">技術的には、この関数は2つのステップで実行されるアトミックアクションと考えることができます。最初のステップでは、 &lt;var&gt;frame1&lt;/var&gt; のウィンドウシステムウィンドウを表示から削除します。 2番目のステップでは、 &lt;var&gt;frame1&lt;/var&gt; のウィンドウを &lt;var&gt;frame2&lt;/var&gt; のウィンドウの下の表示（ &lt;var&gt;above&lt;/var&gt; が当てはまる場合は上）に再挿入します。したがって、 &lt;var&gt;frame1&lt;/var&gt; を除く他のすべてのフレームに対するディスプレイのZ（スタッキング）順序での &lt;var&gt;frame2&lt;/var&gt; の位置は変更されません。</target>
        </trans-unit>
        <trans-unit id="5834d97093438086bf86a5d34542961bd2778fb2" translate="yes" xml:space="preserve">
          <source>Tell &lt;var&gt;process&lt;/var&gt; that its logical window size has dimensions &lt;var&gt;width&lt;/var&gt; by &lt;var&gt;height&lt;/var&gt;, in character units. If this function succeeds in communicating this information to the process, it returns &lt;code&gt;t&lt;/code&gt;; otherwise it returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">論理ウィンドウサイズの寸法が &lt;var&gt;width&lt;/var&gt; &amp;times; &lt;var&gt;height&lt;/var&gt; （文字単位）であることを &lt;var&gt;process&lt;/var&gt; 通知します。この関数がこの情報をプロセスに伝達することに成功すると、 &lt;code&gt;t&lt;/code&gt; を返します。それ以外の場合は &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c12bc156c5db862b3ba4e07551778ad339e33f61" translate="yes" xml:space="preserve">
          <source>Tell the byte compiler to assume that &lt;var&gt;function&lt;/var&gt; is defined in the file &lt;var&gt;file&lt;/var&gt;. The optional third argument &lt;var&gt;arglist&lt;/var&gt; is either &lt;code&gt;t&lt;/code&gt;, meaning the argument list is unspecified, or a list of formal parameters in the same style as &lt;code&gt;defun&lt;/code&gt;. An omitted &lt;var&gt;arglist&lt;/var&gt; defaults to &lt;code&gt;t&lt;/code&gt;, not &lt;code&gt;nil&lt;/code&gt;; this is atypical behavior for omitted arguments, and it means that to supply a fourth but not third argument one must specify &lt;code&gt;t&lt;/code&gt; for the third-argument placeholder instead of the usual &lt;code&gt;nil&lt;/code&gt;. The optional fourth argument &lt;var&gt;fileonly&lt;/var&gt; non-&lt;code&gt;nil&lt;/code&gt; means check only that &lt;var&gt;file&lt;/var&gt; exists, not that it actually defines &lt;var&gt;function&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;function&lt;/var&gt; がファイル &lt;var&gt;file&lt;/var&gt; 定義されていると想定するようにバイトコンパイラに指示します。オプションの3番目の引数 &lt;var&gt;arglist&lt;/var&gt; は、引数リストが指定されていないことを意味する &lt;code&gt;t&lt;/code&gt; 、または &lt;code&gt;defun&lt;/code&gt; と同じスタイルの仮パラメーターのリストのいずれかです。省略された &lt;var&gt;arglist&lt;/var&gt; は、デフォルトで &lt;code&gt;nil&lt;/code&gt; ではなく &lt;code&gt;t&lt;/code&gt; になります。これは省略された引数の非定型の動作であり、3番目ではなく4番目の引数を指定するには、通常の &lt;code&gt;nil&lt;/code&gt; の代わりに3番目の引数のプレースホルダーに &lt;code&gt;t&lt;/code&gt; を指定する必要があることを意味します。オプションの4番目の引数 &lt;var&gt;fileonly&lt;/var&gt; non- &lt;code&gt;nil&lt;/code&gt; は、それだけをチェックすることを意味します &lt;var&gt;file&lt;/var&gt; が存在しますが、実際に &lt;var&gt;function&lt;/var&gt; 定義しているわけではありません。</target>
        </trans-unit>
        <trans-unit id="5df56b1b343eb8daedec867960cd9bb06bd6b999" translate="yes" xml:space="preserve">
          <source>Telling the Compiler that a Function is Defined</source>
          <target state="translated">関数が定義されていることをコンパイラに伝える</target>
        </trans-unit>
        <trans-unit id="de1d117584d30c59a72af26003e0d0a855151dc5" translate="yes" xml:space="preserve">
          <source>Telling the compiler that a function is defined.</source>
          <target state="translated">関数が定義されていることをコンパイラに伝える。</target>
        </trans-unit>
        <trans-unit id="3c79631699bb3023f4d474dc6291a1b94cff5905" translate="yes" xml:space="preserve">
          <source>Temporarily dedicating windows to their buffers (see &lt;a href=&quot;dedicated-windows#Dedicated-Windows&quot;&gt;Dedicated Windows&lt;/a&gt;) avoids using a window for displaying a different buffer. A non-dedicated window will be used instead.</source>
          <target state="translated">ウィンドウを一時的にバッファ&lt;a href=&quot;dedicated-windows#Dedicated-Windows&quot;&gt;専用にする&lt;/a&gt;（専用ウィンドウを参照）と、別のバッファを表示するためにウィンドウを使用することを回避できます。代わりに、専用ではないウィンドウが使用されます。</target>
        </trans-unit>
        <trans-unit id="112d19493096b154fc9ad3a3ab3ba206e50684df" translate="yes" xml:space="preserve">
          <source>Temporarily display the outside current buffer with point at its outside position (&lt;code&gt;edebug-bounce-point&lt;/code&gt;), pausing for one second before returning to Edebug. With a prefix argument &lt;var&gt;n&lt;/var&gt;, pause for &lt;var&gt;n&lt;/var&gt; seconds instead.</source>
          <target state="translated">ポイントが外側の位置（ &lt;code&gt;edebug-bounce-point&lt;/code&gt; ）にある外側の電流バッファを一時的に表示し、1秒間一時停止してからEdebugに戻ります。プレフィックス引数 &lt;var&gt;n&lt;/var&gt; を使用して、代わりに &lt;var&gt;n&lt;/var&gt; 秒間一時停止します。</target>
        </trans-unit>
        <trans-unit id="204bf73fadce843ac40f4d284ffae49d63cf6cdb" translate="yes" xml:space="preserve">
          <source>Temporary Displays</source>
          <target state="translated">臨時ディスプレイ</target>
        </trans-unit>
        <trans-unit id="885e345267ec6790ab06207f2febf07060307ad4" translate="yes" xml:space="preserve">
          <source>Temporary conses and strings on C stack.</source>
          <target state="translated">Cスタック上の一時的なコンセと文字列。</target>
        </trans-unit>
        <trans-unit id="638a660125130110a8ff9f3b688f9ab733656cf5" translate="yes" xml:space="preserve">
          <source>Temporary displays are used by Lisp programs to put output into a buffer and then present it to the user for perusal rather than for editing. Many help commands use this feature.</source>
          <target state="translated">一時的な表示は、Lisp プログラムで出力をバッファに入れて、編集用ではなく閲覧用にユーザに表示するために使用されます。多くのヘルプコマンドがこの機能を使用しています。</target>
        </trans-unit>
        <trans-unit id="a8fbdc5c349b4448bfd30149ad8c0322c6319430" translate="yes" xml:space="preserve">
          <source>Temporary motion and buffer changes.</source>
          <target state="translated">一時的なモーションとバッファの変更。</target>
        </trans-unit>
        <trans-unit id="8c4b4dd44090443b75c719146f69039a4de8291e" translate="yes" xml:space="preserve">
          <source>Terminal I/O Encoding</source>
          <target state="translated">ターミナルI/Oエンコーディング</target>
        </trans-unit>
        <trans-unit id="e518d15cadbf25f6701100c9e664ae69e7991eac" translate="yes" xml:space="preserve">
          <source>Terminal Input</source>
          <target state="translated">端子入力</target>
        </trans-unit>
        <trans-unit id="11bcad1f9e713086d9e16b8089d00a33ed64d247" translate="yes" xml:space="preserve">
          <source>Terminal Output</source>
          <target state="translated">端子出力</target>
        </trans-unit>
        <trans-unit id="59f006175b8fe7e3164de6d9ad0fd6f00418fe75" translate="yes" xml:space="preserve">
          <source>Terminal Parameters</source>
          <target state="translated">端末パラメータ</target>
        </trans-unit>
        <trans-unit id="b779b73affbf24fad613fe28b563d45c5ff37645" translate="yes" xml:space="preserve">
          <source>Terminal Type</source>
          <target state="translated">ターミナルタイプ</target>
        </trans-unit>
        <trans-unit id="3b6ffae10c84baf737fa6441cfeed7605132aebb" translate="yes" xml:space="preserve">
          <source>Terminal-Specific Initialization</source>
          <target state="translated">端末固有の初期化</target>
        </trans-unit>
        <trans-unit id="7896da4078fb49476e0b8958441644e36b86ac99" translate="yes" xml:space="preserve">
          <source>Terminals have no read syntax. They print in hash notation giving the terminal&amp;rsquo;s ordinal number and its TTY device file name.</source>
          <target state="translated">端末には読み取り構文がありません。これらは、端末の序数とそのTTYデバイスファイル名を示すハッシュ表記で印刷されます。</target>
        </trans-unit>
        <trans-unit id="88ffd1abfd18a3b86bf88447a1b5a3e97e14d62d" translate="yes" xml:space="preserve">
          <source>Terminate the program being debugged; return to top-level Emacs command execution.</source>
          <target state="translated">デバッグ中のプログラムを終了し、トップレベルのEmacsコマンドの実行に戻ります。</target>
        </trans-unit>
        <trans-unit id="a89b0dbcd302d4f9ba9ec7aca5a0f8a1ccc06a1a" translate="yes" xml:space="preserve">
          <source>Test Coverage</source>
          <target state="translated">テスト範囲</target>
        </trans-unit>
        <trans-unit id="03751596a5fb1a6a9c8670a0a29a5b074902945a" translate="yes" xml:space="preserve">
          <source>Testing Accessibility</source>
          <target state="translated">アクセシビリティのテスト</target>
        </trans-unit>
        <trans-unit id="da8948ee42cc0425d8ae2fab4e1fb0099dc30642" translate="yes" xml:space="preserve">
          <source>Testing Availability of Network Features</source>
          <target state="translated">ネットワーク機能の可用性のテスト</target>
        </trans-unit>
        <trans-unit id="d8d4dbd1a23f08fe554bc1a36408ea01da82c375" translate="yes" xml:space="preserve">
          <source>Testing existence, accessibility, size of files.</source>
          <target state="translated">ファイルの存在、アクセシビリティ、サイズのテスト。</target>
        </trans-unit>
        <trans-unit id="5eef48dce3886f67bf29572279a1d8c01513dd7e" translate="yes" xml:space="preserve">
          <source>Testing for numbers.</source>
          <target state="translated">数字のテスト。</target>
        </trans-unit>
        <trans-unit id="69e02e42d50ebc840818a24261a4c38b29c09cd4" translate="yes" xml:space="preserve">
          <source>Testing whether an object is a marker.</source>
          <target state="translated">オブジェクトがマーカーであるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="1af17a7f62df0b849a55bd3092c5d244b3f00a14" translate="yes" xml:space="preserve">
          <source>Testing whether an object is a string or char.</source>
          <target state="translated">オブジェクトが文字列か文字列かをテストします。</target>
        </trans-unit>
        <trans-unit id="a2ed0523781be8c76de933cdc16fb68427dc7f9f" translate="yes" xml:space="preserve">
          <source>Tests of equality between any two objects.</source>
          <target state="translated">任意の2つのオブジェクト間の平等性の検定。</target>
        </trans-unit>
        <trans-unit id="6e3d8ffc0e534d8e43ad86a7d530e868b23593b6" translate="yes" xml:space="preserve">
          <source>Tests related to types.</source>
          <target state="translated">タイプに関連したテスト。</target>
        </trans-unit>
        <trans-unit id="f45b4f0fb4f2822335c780c335891ff82850deb9" translate="yes" xml:space="preserve">
          <source>Texinfo</source>
          <target state="translated">Texinfo</target>
        </trans-unit>
        <trans-unit id="c3328c39b0e29f78e9ff45db674248b1d245887d" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="translated">Text</target>
        </trans-unit>
        <trans-unit id="87a0562fa90309b524364e483951efe8af5cf185" translate="yes" xml:space="preserve">
          <source>Text Area</source>
          <target state="translated">テキストエリア</target>
        </trans-unit>
        <trans-unit id="cab6f246e70a36aae141ac1b47f69051720f2342" translate="yes" xml:space="preserve">
          <source>Text Properties</source>
          <target state="translated">テキストのプロパティ</target>
        </trans-unit>
        <trans-unit id="b2b6482ac0db1130facf9df3d33260d44db222c6" translate="yes" xml:space="preserve">
          <source>Text Properties in Strings</source>
          <target state="translated">文字列のテキスト プロパティ</target>
        </trans-unit>
        <trans-unit id="0203d97471cea7f0f9e87edf9c61812f9ed352fe" translate="yes" xml:space="preserve">
          <source>Text Property Search Functions</source>
          <target state="translated">テキストプロパティ検索機能</target>
        </trans-unit>
        <trans-unit id="e2a1fdf371ef3e66e34eae2fac3b0b1a33d7c25e" translate="yes" xml:space="preserve">
          <source>Text Quoting Style</source>
          <target state="translated">テキスト引用スタイル</target>
        </trans-unit>
        <trans-unit id="8ad1a0374eb3bf2b5f56dc4ed7649f748c78347b" translate="yes" xml:space="preserve">
          <source>Text Representations</source>
          <target state="translated">テキスト表現</target>
        </trans-unit>
        <trans-unit id="382c95e23dc844e5ef1273fcbaec3dfb1687c262" translate="yes" xml:space="preserve">
          <source>Text Terminal Colors</source>
          <target state="translated">テキスト端末の色</target>
        </trans-unit>
        <trans-unit id="015b197bbe54de5242507dc93ed1884dafc41845" translate="yes" xml:space="preserve">
          <source>Text covered by &lt;code&gt;display&lt;/code&gt; text properties, by overlays with &lt;code&gt;display&lt;/code&gt; properties whose value is a string, and by any other properties that replace buffer text, is treated as a single unit when it is reordered for display. That is, the entire chunk of text covered by these properties is reordered together. Moreover, the bidirectional properties of the characters in such a chunk of text are ignored, and Emacs reorders them as if they were replaced with a single character &lt;code&gt;U+FFFC&lt;/code&gt;, known as the &lt;em&gt;Object Replacement Character&lt;/em&gt;. This means that placing a display property over a portion of text may change the way that the surrounding text is reordered for display. To prevent this unexpected effect, always place such properties on text whose directionality is identical with text that surrounds it.</source>
          <target state="translated">&lt;code&gt;display&lt;/code&gt; テキストプロパティ、値が文字列である &lt;code&gt;display&lt;/code&gt; プロパティのオーバーレイ、およびバッファテキストを置き換えるその他のプロパティでカバーされるテキストは、表示用に並べ替えられたときに単一のユニットとして扱われます。つまり、これらのプロパティでカバーされるテキストのチャンク全体が一緒に並べ替えられます。さらに、そのようなテキストのチャンク内の文字の双方向プロパティは無視され、Emacsは、&lt;em&gt;オブジェクト置換文字&lt;/em&gt;と呼ばれる単一の文字 &lt;code&gt;U+FFFC&lt;/code&gt; に置き換えられたかのようにそれらを並べ替えます。&lt;em&gt;&lt;/em&gt;。これは、テキストの一部に表示プロパティを配置すると、周囲のテキストが表示用に並べ替えられる方法が変わる可能性があることを意味します。この予期しない影響を防ぐために、そのようなプロパティは、方向性が周囲のテキストと同じであるテキストに常に配置してください。</target>
        </trans-unit>
        <trans-unit id="1ad9759337a6a9038a2e7770ed58fa8870c7e97c" translate="yes" xml:space="preserve">
          <source>Text is read-only</source>
          <target state="translated">テキストは読み取り専用</target>
        </trans-unit>
        <trans-unit id="9a6eb4a9bf5716c42c83626704dad83699495ba5" translate="yes" xml:space="preserve">
          <source>Text is stored in Emacs buffers and strings in &lt;em&gt;logical&lt;/em&gt; (or &lt;em&gt;reading&lt;/em&gt;) order, i.e., the order in which a human would read each character. In right-to-left and bidirectional text, the order in which characters are displayed on the screen (called &lt;em&gt;visual order&lt;/em&gt;) is not the same as logical order; the characters&amp;rsquo; screen positions do not increase monotonically with string or buffer position. In performing this &lt;em&gt;bidirectional reordering&lt;/em&gt;, Emacs follows the Unicode Bidirectional Algorithm (a.k.a.</source>
          <target state="translated">テキストは、&lt;em&gt;論理&lt;/em&gt;（または&lt;em&gt;読み取り&lt;/em&gt;）の順序、つまり人間が各文字を読み取る順序でEmacsのバッファーと文字列に格納されます。右から左への双方向テキストでは、文字が画面に表示される&lt;em&gt;順序&lt;/em&gt;（&lt;em&gt;視覚的な順序&lt;/em&gt;と呼ばれます）は論理的な順序と同じではありません。文字の画面位置は、文字列またはバッファ位置とともに単調に増加しません。この&lt;em&gt;双方向の並べ替えを&lt;/em&gt;実行する際、EmacsはUnicode双方向アルゴリズム（別名</target>
        </trans-unit>
        <trans-unit id="cc87b41df7acde763452d7cdb5ae6ca0354ef8ae" translate="yes" xml:space="preserve">
          <source>Text lines are portions of the buffer delimited by newline characters, which are regarded as part of the previous line. The first text line begins at the beginning of the buffer, and the last text line ends at the end of the buffer whether or not the last character is a newline. The division of the buffer into text lines is not affected by the width of the window, by line continuation in display, or by how tabs and control characters are displayed.</source>
          <target state="translated">テキスト行は、改行文字で区切られたバッファの一部であり、前の行の一部とみなされます。最初のテキスト行はバッファの先頭から始まり、最後の文字が改行であるかどうかに関わらず、最後のテキスト行はバッファの最後で終わります。バッファのテキスト行への分割は、ウィンドウの幅、表示中の行の連続性、タブやコントロール文字の表示方法に影響されません。</target>
        </trans-unit>
        <trans-unit id="c6f3ab88d6206b25d3f1bd4b23a42dfc4e2125ac" translate="yes" xml:space="preserve">
          <source>Text mode and Lisp modes.</source>
          <target state="translated">テキストモードとLispモード。</target>
        </trans-unit>
        <trans-unit id="d4dee9134d8f17e940ea640096421469faf682b3" translate="yes" xml:space="preserve">
          <source>Text mode is a major mode for editing human languages. It defines the &amp;lsquo;</source>
          <target state="translated">テキストモードは、人間の言語を編集するための主要なモードです。'を定義します</target>
        </trans-unit>
        <trans-unit id="dfd75aa64722dfbe6f81a4a1dd09e0e0bd805010" translate="yes" xml:space="preserve">
          <source>Text mode is perhaps the simplest mode besides Fundamental mode. Here are excerpts from</source>
          <target state="translated">テキストモードは、おそらくファンダメンタルモード以外では最もシンプルなモードです。以下は、以下からの抜粋です。</target>
        </trans-unit>
        <trans-unit id="e542f92e46dea1aaed3020c3fc9ad84772b03042" translate="yes" xml:space="preserve">
          <source>Text properties also support the &lt;code&gt;modification-hooks&lt;/code&gt; property, but the details are somewhat different (see &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Special Properties&lt;/a&gt;).</source>
          <target state="translated">テキストプロパティも &lt;code&gt;modification-hooks&lt;/code&gt; プロパティをサポートしていますが、詳細は多少異なり&lt;a href=&quot;special-properties#Special-Properties&quot;&gt;ます&lt;/a&gt;（特殊プロパティを参照）。</target>
        </trans-unit>
        <trans-unit id="6d0a9b467cc2388cf3c12708c4d04ff0102f37d9" translate="yes" xml:space="preserve">
          <source>Text properties are also potential loopholes, since their values could include functions to call. So Emacs discards all text properties from string values specified for file-local variables.</source>
          <target state="translated">テキストプロパティの値には呼び出す関数が含まれている可能性があるため、テキストプロパティにも抜け穴がある可能性があります。そこでEmacsは、ファイルローカル変数に指定された文字列の値からすべてのテキストプロパティを破棄します。</target>
        </trans-unit>
        <trans-unit id="9d6234ac8ad7e0e9762eab32a2e86e6b1e823934" translate="yes" xml:space="preserve">
          <source>Text properties are considered a part of the text; overlays and their properties are specifically considered not to be part of the text. Thus, copying text between various buffers and strings preserves text properties, but does not try to preserve overlays. Changing a buffer&amp;rsquo;s text properties marks the buffer as modified, while moving an overlay or changing its properties does not. Unlike text property changes, overlay property changes are not recorded in the buffer&amp;rsquo;s undo list.</source>
          <target state="translated">テキストプロパティはテキストの一部と見なされます。オーバーレイとそのプロパティは、テキストの一部ではないと具体的に見なされます。したがって、さまざまなバッファと文字列の間でテキストをコピーすると、テキストプロパティは保持されますが、オーバーレイは保持されません。バッファのテキストプロパティを変更すると、バッファが変更済みとしてマークされますが、オーバーレイを移動したり、そのプロパティを変更したりしても、マークは付けられません。テキストプロパティの変更とは異なり、オーバーレイプロパティの変更はバッファの元に戻すリストに記録されません。</target>
        </trans-unit>
        <trans-unit id="6f74c7cc06988da062ed2b24126fb9eddd682788" translate="yes" xml:space="preserve">
          <source>Text terminals usually support only a small number of colors, and the computer uses small integers to select colors on the terminal. This means that the computer cannot reliably tell what the selected color looks like; instead, you have to inform your application which small integers correspond to which colors. However, Emacs does know the standard set of colors and will try to use them automatically.</source>
          <target state="translated">テキスト端末は通常、少数の色しかサポートしておらず、コンピュータは端末上で色を選択するために小整数を使用します。これは、コンピュータが選択した色がどのように見えるかを確実に知ることができないことを意味します。しかし、Emacs は標準的な色のセットを知っているので、自動的にそれを使おうとします。</target>
        </trans-unit>
        <trans-unit id="ff12dc73eb86a83b96f6fd94cd3a8c784b8cfb98" translate="yes" xml:space="preserve">
          <source>Textual Scrolling</source>
          <target state="translated">テキストスクロール</target>
        </trans-unit>
        <trans-unit id="8a741234fa57cb0334cb69e5c77a86c370043e5c" translate="yes" xml:space="preserve">
          <source>Textual scrolling functions (aside from &lt;code&gt;scroll-other-window&lt;/code&gt;) have unpredictable results if the current buffer is not the one displayed in the selected window. See &lt;a href=&quot;current-buffer#Current-Buffer&quot;&gt;Current Buffer&lt;/a&gt;.</source>
          <target state="translated">現在のバッファが選択したウィンドウに表示されているものでない場合、テキストスクロール関数（ &lt;code&gt;scroll-other-window&lt;/code&gt; を除く）の結果は予測できません。&lt;a href=&quot;current-buffer#Current-Buffer&quot;&gt;現在のバッファを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a8b0e7fb130776cf6ea8a938fc9ede74c81c65d4" translate="yes" xml:space="preserve">
          <source>That is, the &amp;ldquo;bold&amp;rdquo; words are the &lt;code&gt;bold&lt;/code&gt; face, and the &amp;ldquo;italic&amp;rdquo; word is in the &lt;code&gt;italic&lt;/code&gt; face.</source>
          <target state="translated">つまり、「太字」の単語は &lt;code&gt;bold&lt;/code&gt; で、「斜体」の単語は &lt;code&gt;italic&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7430a06da8c38762d75fab964293afaabef9af91" translate="yes" xml:space="preserve">
          <source>That last form can be used as &lt;var&gt;action&lt;/var&gt; argument of &lt;code&gt;display-buffer&lt;/code&gt; in the following way:</source>
          <target state="translated">その最後の形式は、次の方法で &lt;code&gt;display-buffer&lt;/code&gt; の &lt;var&gt;action&lt;/var&gt; 引数として使用できます。</target>
        </trans-unit>
        <trans-unit id="4c876d6e3a4a2df4b2e97076c563bcbda17e6f74" translate="yes" xml:space="preserve">
          <source>That lets the user specify a height value optionally and a width value optionally.</source>
          <target state="translated">これにより、ユーザは任意で高さの値と幅の値を指定することができます。</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="0ed4c9f9933dd9e4b8da3ca824145866c18f6a63" translate="yes" xml:space="preserve">
          <source>The &amp;lsquo;</source>
          <target state="translated">「</target>
        </trans-unit>
        <trans-unit id="5ff30588f2ea9f6154e9ab9ac554867c70e9717f" translate="yes" xml:space="preserve">
          <source>The 2**22 bit in the character event code indicates a character typed with the alt key held down. (The key labeled</source>
          <target state="translated">文字イベントコードの 2**22 ビットは、alt キーを押しながら入力された文字を示します。(</target>
        </trans-unit>
        <trans-unit id="38975ff8c63f29a11434d9ffa76a663862efe213" translate="yes" xml:space="preserve">
          <source>The 2**23 bit in the character event code indicates a character typed with the super key held down.</source>
          <target state="translated">文字イベントコードの2**23ビットは、スーパーキーを押したまま入力された文字を示します。</target>
        </trans-unit>
        <trans-unit id="a46377d522c8c3976b822282db080ff137867c82" translate="yes" xml:space="preserve">
          <source>The 2**24 bit in the character event code indicates a character typed with the hyper key held down.</source>
          <target state="translated">文字イベントコードの 2**24 ビットは、ハイパーキーを押したまま入力された文字を示します。</target>
        </trans-unit>
        <trans-unit id="cb443747876c5a79973dac02d3a7cd79f8cba32c" translate="yes" xml:space="preserve">
          <source>The 2**25 bit (the 26th bit) in the character event code indicates an</source>
          <target state="translated">文字イベントコードの2**25ビット(26番目のビット)は、次のことを示します。</target>
        </trans-unit>
        <trans-unit id="d84cc0fb922803f23690da8e9b0d5a8328dc7acb" translate="yes" xml:space="preserve">
          <source>The 2**26 bit in the character code indicates a non-</source>
          <target state="translated">文字コードの2**26ビットは、非</target>
        </trans-unit>
        <trans-unit id="a0f9cc26fb8eabe38b036b9be91a04cbf27fc5a6" translate="yes" xml:space="preserve">
          <source>The 2**27 bit in the character code indicates a character typed with the meta key held down.</source>
          <target state="translated">文字コードの2**27ビットは、メタキーを押したまま入力された文字を示します。</target>
        </trans-unit>
        <trans-unit id="24ee70c53e17015b7f27a3b207abd795d4f0cc63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(&quot;(&quot; exps &quot;)&quot;)&lt;/code&gt; rule was not needed to pair up parens, since SMIE will pair up any characters that are marked as having paren syntax in the syntax table. What this rule does instead (together with the definition of &lt;code&gt;exps&lt;/code&gt;) is to make it clear that &lt;code&gt;&quot;,&quot;&lt;/code&gt; should not appear outside of parentheses.</source>
          <target state="translated">&lt;code&gt;(&quot;(&quot; exps &quot;)&quot;)&lt;/code&gt; SMIEは、構文テーブルに括弧構文を持つものとしてマークされている任意の文字をペアリングするので、ルールは、括弧をペアリングする必要はなかったです。このルールが代わりに（ &lt;code&gt;exps&lt;/code&gt; の定義とともに）行うことは、 &lt;code&gt;&quot;,&quot;&lt;/code&gt; が括弧の外に表示されるべきではないことを明確にすることです。</target>
        </trans-unit>
        <trans-unit id="7d3eb0602e766d794ddd5a23c3f8b6d078da78b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-&lt;/code&gt; function serves two purposes: negation and subtraction. When &lt;code&gt;-&lt;/code&gt; has a single argument, the value is the negative of the argument. When there are multiple arguments, &lt;code&gt;-&lt;/code&gt; subtracts each of the &lt;var&gt;more-numbers-or-markers&lt;/var&gt; from &lt;var&gt;number-or-marker&lt;/var&gt;, cumulatively. If there are no arguments, the result is 0.</source>
          <target state="translated">&lt;code&gt;-&lt;/code&gt; 否定と減算：関数は2つの目的を果たします。とき &lt;code&gt;-&lt;/code&gt; 単一の引数を持ち、値は引数の否定です。複数の引数がある場合、 &lt;code&gt;-&lt;/code&gt; は、 &lt;var&gt;number-or-marker&lt;/var&gt; から &lt;var&gt;more-numbers-or-markers&lt;/var&gt; のそれぞれを累積的に減算します。引数がない場合、結果は0になります。</target>
        </trans-unit>
        <trans-unit id="dee3a47909b932498958ccca8e33a6ead189f5e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:advertised-binding&lt;/code&gt; property also affects the binding shown in menu items (see &lt;a href=&quot;menu-bar#Menu-Bar&quot;&gt;Menu Bar&lt;/a&gt;). The property is ignored if it specifies a key binding that the command does not actually have.</source>
          <target state="translated">&lt;code&gt;:advertised-binding&lt;/code&gt; 特性はまた、結合（参照のメニュー項目に示されている影響&lt;a href=&quot;menu-bar#Menu-Bar&quot;&gt;メニューバー&lt;/a&gt;）。コマンドに実際にはないキーバインディングが指定されている場合、プロパティは無視されます。</target>
        </trans-unit>
        <trans-unit id="1882ca53c4043e647ef4b5684792d2bf1128e1a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:deferred&lt;/code&gt; keyword argument to &lt;code&gt;jsonrpc-request&lt;/code&gt; and &lt;code&gt;jsonrpc-async-request&lt;/code&gt; is designed to let the caller indicate that the specific request needs synchronization and its actual issuance may be delayed to the future, until some condition is satisfied. Specifying &lt;code&gt;:deferred&lt;/code&gt; for a request doesn&amp;rsquo;t mean it &lt;em&gt;will&lt;/em&gt; be delayed, only that it &lt;em&gt;can&lt;/em&gt; be. If the request isn&amp;rsquo;t sent immediately, &lt;code&gt;jsonrpc&lt;/code&gt; will make renewed efforts to send it at certain key times during communication, such as when receiving or sending other messages to the endpoint.</source>
          <target state="translated">&lt;code&gt;jsonrpc-request&lt;/code&gt; および &lt;code&gt;jsonrpc-async-request&lt;/code&gt; への &lt;code&gt;:deferred&lt;/code&gt; キーワード引数は、特定のリクエストが同期を必要とし、その実際の発行が何らかの条件が満たされるまで将来に遅れる可能性があることを呼び出し元に示すように設計されています。リクエストに &lt;code&gt;:deferred&lt;/code&gt; を指定しても、遅延すること&lt;em&gt;を&lt;/em&gt;意味するのではなく、遅延する&lt;em&gt;可能性&lt;/em&gt;があるだけです。リクエストがすぐに送信されない場合、 &lt;code&gt;jsonrpc&lt;/code&gt; は、エンドポイントへの他のメッセージを受信または送信するときなど、通信中の特定の重要な時間にリクエストを送信するために新たな努力をします。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9d39209831baabc8b831f50e0409fe8adb0807e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:help&lt;/code&gt; property specifies a help-echo string to display while the mouse is on that item. This is displayed in the same way as &lt;code&gt;help-echo&lt;/code&gt; text properties (see &lt;a href=&quot;special-properties#Help-display&quot;&gt;Help display&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;:help&lt;/code&gt; マウスがその項目上にある間にプロパティが表示するのに役立ちエコー文字列を指定します。これは、 &lt;code&gt;help-echo&lt;/code&gt; テキストプロパティと同じ方法で表示されます（&lt;a href=&quot;special-properties#Help-display&quot;&gt;ヘルプ表示を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="d3dade1abb3b9c8790fadfc96040530f91f00991" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:inline&lt;/code&gt; feature lets you splice a variable number of elements into the middle of a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;vector&lt;/code&gt; customization type. You use it by adding &lt;code&gt;:inline t&lt;/code&gt; to a type specification which is contained in a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;vector&lt;/code&gt; specification.</source>
          <target state="translated">&lt;code&gt;:inline&lt;/code&gt; 機能を使用するとの中間に要素の可変数をスプライスすることができます &lt;code&gt;list&lt;/code&gt; や &lt;code&gt;vector&lt;/code&gt; カスタマイズタイプ。 &lt;code&gt;list&lt;/code&gt; または &lt;code&gt;vector&lt;/code&gt; 仕様に含まれる型仕様に &lt;code&gt;:inline t&lt;/code&gt; 追加することで使用します。</target>
        </trans-unit>
        <trans-unit id="bfc189fd6a2dcae80441078e4b002d4e31ccd61f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:max-width&lt;/code&gt; and &lt;code&gt;:max-height&lt;/code&gt; keywords are used for scaling if the size of the image exceeds these values. If &lt;code&gt;:width&lt;/code&gt; is set, it will have precedence over &lt;code&gt;max-width&lt;/code&gt;, and if &lt;code&gt;:height&lt;/code&gt; is set, it will have precedence over &lt;code&gt;max-height&lt;/code&gt;, but you can otherwise mix these keywords as you wish.</source>
          <target state="translated">&lt;code&gt;:max-width&lt;/code&gt; と &lt;code&gt;:max-height&lt;/code&gt; キーワードは画像のサイズは、これらの値を超えた場合にスケーリングするために使用されています。 &lt;code&gt;:width&lt;/code&gt; が設定されている場合は &lt;code&gt;max-width&lt;/code&gt; よりも優先され、 &lt;code&gt;:height&lt;/code&gt; が設定されている場合は &lt;code&gt;max-height&lt;/code&gt; よりも優先されますが、それ以外の場合は必要に応じてこれらのキーワードを混在させることができます。</target>
        </trans-unit>
        <trans-unit id="f9b06cb01b0dc998d981d7869a904792bbe31f03" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:rtl&lt;/code&gt; property specifies an alternative image to use for right-to-left languages. Only the GTK+ version of Emacs supports this at present.</source>
          <target state="translated">&lt;code&gt;:rtl&lt;/code&gt; プロパティは、右から左に記述する言語で使用する代替画像を指定します。現在、EmacsのGTK +バージョンのみがこれをサポートしています。</target>
        </trans-unit>
        <trans-unit id="c169ab5cd21a44a39207c218cf98e3315f8f1bc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:width&lt;/code&gt; and &lt;code&gt;:align-to&lt;/code&gt; properties are supported on non-graphic terminals, but the other space properties in this section are not.</source>
          <target state="translated">&lt;code&gt;:width&lt;/code&gt; と &lt;code&gt;:align-to&lt;/code&gt; プロパティ非グラフィック端末でサポートされていますが、このセクションの他のスペースのプロパティはありません。</target>
        </trans-unit>
        <trans-unit id="1b3a5aeae5cf6e988d703b1a5e7837aeb615f5a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:width&lt;/code&gt; and &lt;code&gt;:height&lt;/code&gt; keywords are used for scaling the image. If only one of them is specified, the other one will be calculated so as to preserve the aspect ratio. If both are specified, aspect ratio may not be preserved.</source>
          <target state="translated">&lt;code&gt;:width&lt;/code&gt; と &lt;code&gt;:height&lt;/code&gt; のキーワードは、画像をスケーリングするために使用されています。片方だけを指定した場合は、アスペクト比を維持するようにもう片方を計算します。両方を指定すると、アスペクト比が保持されない場合があります。</target>
        </trans-unit>
        <trans-unit id="98439a61b5465911aa8bc125062739f9432a86eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;add-face-text-property&lt;/code&gt; function provides a convenient way to set this text property. See &lt;a href=&quot;changing-properties#Changing-Properties&quot;&gt;Changing Properties&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;add-face-text-property&lt;/code&gt; 関数は、このテキストプロパティを設定するための便利な方法を提供します。&lt;a href=&quot;changing-properties#Changing-Properties&quot;&gt;プロパティの変更を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cd4e2e754506706afd7c9e246beb160bb480f467" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;alpha&lt;/code&gt; frame parameter can also be a cons cell &lt;code&gt;(&lt;var&gt;active&lt;/var&gt; . &lt;var&gt;inactive&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;active&lt;/var&gt; is the opacity of the frame when it is selected, and &lt;var&gt;inactive&lt;/var&gt; is the opacity when it is not selected.</source>
          <target state="translated">&lt;code&gt;alpha&lt;/code&gt; フレームのパラメータもコンス・セルとすることができる &lt;code&gt;(&lt;var&gt;active&lt;/var&gt; . &lt;var&gt;inactive&lt;/var&gt;)&lt;/code&gt; 、 &lt;var&gt;active&lt;/var&gt; それが選択されたときのフレームの不透明度であり、そして &lt;var&gt;inactive&lt;/var&gt; 、それが選択されていない場合に不透明です。</target>
        </trans-unit>
        <trans-unit id="3cb3daaa7062a39e07e8493532e6ecf57d731436" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;and&lt;/code&gt; special form tests whether all the &lt;var&gt;conditions&lt;/var&gt; are true. It works by evaluating the &lt;var&gt;conditions&lt;/var&gt; one by one in the order written.</source>
          <target state="translated">&lt;code&gt;and&lt;/code&gt; 特別な形式は、すべてのかどうかをテストする &lt;var&gt;conditions&lt;/var&gt; 真です。記述された順序で &lt;var&gt;conditions&lt;/var&gt; 1つずつ評価することによって機能します。</target>
        </trans-unit>
        <trans-unit id="19ff15c393043a9219761a4b88424de8e7fcd4d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;append&lt;/code&gt; function also provides a way to convert a vector into a list with the same elements:</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; 機能も同じ要素を持つリストにベクトルを変換する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="ec4feeecd8f21172cf3ce375cb9b4b75af9ca6c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer-name&lt;/code&gt; of a buffer is &lt;code&gt;nil&lt;/code&gt; if, and only if, the buffer is killed. A buffer that has not been killed is called a &lt;em&gt;live&lt;/em&gt; buffer. To test whether a buffer is live or killed, use the function &lt;code&gt;buffer-live-p&lt;/code&gt; (see below).</source>
          <target state="translated">&lt;code&gt;buffer-name&lt;/code&gt; バッファのです &lt;code&gt;nil&lt;/code&gt; のバッファが殺され、そして場合のみ、場合。強制終了されていないバッファは、&lt;em&gt;ライブ&lt;/em&gt;バッファと呼ばれます。バッファがライブであるか強制終了されているかをテストするには、関数 &lt;code&gt;buffer-live-p&lt;/code&gt; を使用します（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="1bf11efbba3f5b738c403068ce4165ac4eda8d18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cl-case&lt;/code&gt; macro chooses among alternatives by evaluating the equality of its first argument against a set of specific values.</source>
          <target state="translated">&lt;code&gt;cl-case&lt;/code&gt; 特定の値のセットに対する最初の引数の等式を評価することによって、選択肢の中のマクロを選択しました。</target>
        </trans-unit>
        <trans-unit id="26f0cd6f24bb7ebd0d3d8ca59b36aac1c1707035" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;completing-read&lt;/code&gt; function binds variables to pass information to the commands that actually do completion. They are described in the following section.</source>
          <target state="translated">&lt;code&gt;completing-read&lt;/code&gt; 機能が結合変数は、実際に完了したことを行うコマンドに情報を渡すことができます。これらについては、次のセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="c44c9a88addda9d5f8cbe1e09d1ef3e5332b9502" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cond&lt;/code&gt; form chooses among alternatives by evaluating the predicate &lt;var&gt;condition&lt;/var&gt; of each of its clauses (see &lt;a href=&quot;conditionals#Conditionals&quot;&gt;Conditionals&lt;/a&gt;). The primary limitation is that variables let-bound in &lt;var&gt;condition&lt;/var&gt; are not available to the clause&amp;rsquo;s &lt;var&gt;body-forms&lt;/var&gt;.</source>
          <target state="translated">&lt;code&gt;cond&lt;/code&gt; 述語評価することにより選択肢の中フォーム選択 &lt;var&gt;condition&lt;/var&gt; の条項のそれぞれのを（参照&lt;a href=&quot;conditionals#Conditionals&quot;&gt;条件文&lt;/a&gt;）。主な制限は、 &lt;var&gt;condition&lt;/var&gt; let-boundされた変数が、句の &lt;var&gt;body-forms&lt;/var&gt; で使用できないことです。</target>
        </trans-unit>
        <trans-unit id="b6393d60a04e97f2116a36bf3d96d9009bda8c39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;condition-case&lt;/code&gt; construct is often used to trap errors that are predictable, such as failure to open a file in a call to &lt;code&gt;insert-file-contents&lt;/code&gt;. It is also used to trap errors that are totally unpredictable, such as when the program evaluates an expression read from the user.</source>
          <target state="translated">&lt;code&gt;condition-case&lt;/code&gt; 構文は、多くの場合、このような呼び出しでファイルを開くには失敗として予測可能なエラーをトラップに使用され &lt;code&gt;insert-file-contents&lt;/code&gt; 。また、プログラムがユーザーから読み取った式を評価する場合など、まったく予測できないエラーをトラップするためにも使用されます。</target>
        </trans-unit>
        <trans-unit id="4e29405e0f1f6c37ab826a1f70ab932f0440abc5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;current-input-mode&lt;/code&gt; function returns the input mode settings Emacs is currently using.</source>
          <target state="translated">&lt;code&gt;current-input-mode&lt;/code&gt; 機能は、Emacsが現在使用している入力モードの設定を返します。</target>
        </trans-unit>
        <trans-unit id="c234a92b19642441da1c2050b96be5c7305c6b87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cursor-type&lt;/code&gt; frame parameter may be overridden by the variables &lt;code&gt;cursor-type&lt;/code&gt; and &lt;code&gt;cursor-in-non-selected-windows&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;cursor-type&lt;/code&gt; フレームパラメータは、変数によってオーバーライドされる場合があり &lt;code&gt;cursor-type&lt;/code&gt; および &lt;code&gt;cursor-in-non-selected-windows&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="abe114d18cfa0ebfe62ff688cbe3eb7244ed6f72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;defconst&lt;/code&gt; form, like &lt;code&gt;defvar&lt;/code&gt;, marks the variable as &lt;em&gt;special&lt;/em&gt;, meaning that it should always be dynamically bound (see &lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;Variable Scoping&lt;/a&gt;). In addition, it marks the variable as risky (see &lt;a href=&quot;file-local-variables#File-Local-Variables&quot;&gt;File Local Variables&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;defconst&lt;/code&gt; はのような形、 &lt;code&gt;defvar&lt;/code&gt; のように、マーク変数&lt;em&gt;特別な&lt;/em&gt;ことは常に動的にバインドされなければならないことを意味し、（参照&lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;変数のスコープを&lt;/a&gt;）。さらに、変数を危険としてマークします（&lt;a href=&quot;file-local-variables#File-Local-Variables&quot;&gt;ファイルローカル変数を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="64e40c8d2d701d73f72f1726b04f6361773a945c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;defcustom&lt;/code&gt; shows how the new widget can be used as an ordinary customization type.</source>
          <target state="translated">&lt;code&gt;defcustom&lt;/code&gt; を新しいウィジェットは、通常のカスタマイズ型として使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="c71b39c3926065d439068fcf1de8b785d9704dac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;define-derived-mode&lt;/code&gt; macro automatically marks the derived mode as special if the parent mode is special. Special mode is a convenient parent for such modes to inherit from; See &lt;a href=&quot;basic-major-modes#Basic-Major-Modes&quot;&gt;Basic Major Modes&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;define-derived-mode&lt;/code&gt; マクロを自動的にマーク特殊として導出モードを親モードが特殊である場合。特別モードは、そのようなモードを継承するための便利な親です。&lt;a href=&quot;basic-major-modes#Basic-Major-Modes&quot;&gt;基本的なメジャーモードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e11839d47e0b0ae68558951b5e41000c1afea76c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;defvar&lt;/code&gt; form returns &lt;var&gt;symbol&lt;/var&gt;, but it is normally used at top level in a file where its value does not matter.</source>
          <target state="translated">&lt;code&gt;defvar&lt;/code&gt; のフォームを返し &lt;var&gt;symbol&lt;/var&gt; 、それは通常、その値は問題ではないファイルのトップレベルで使用されます。</target>
        </trans-unit>
        <trans-unit id="f2a831eac710a97efa9bd72520d60c444307b0c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delq&lt;/code&gt; function deletes elements from the front of the list by simply advancing down the list, and returning a sublist that starts after those elements. For example:</source>
          <target state="translated">&lt;code&gt;delq&lt;/code&gt; 機能は、単に、リストをダウン前進、及びこれらの要素の後に開始されるサブリストを返すことによって、リストの先頭から要素を削除します。例えば：</target>
        </trans-unit>
        <trans-unit id="3ddb538774d53998062db4dcb38e5ca6d446b2f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;describe-mode&lt;/code&gt; function provides information about major modes. It is normally bound to</source>
          <target state="translated">&lt;code&gt;describe-mode&lt;/code&gt; 機能は、メジャーモードについての情報を提供します。通常はにバインドされています</target>
        </trans-unit>
        <trans-unit id="420dbb7acb7058c3164d9b155e31d95bf6b40fdf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;describe-symbols&lt;/code&gt; function works like &lt;code&gt;apropos&lt;/code&gt;, but provides more information.</source>
          <target state="translated">&lt;code&gt;describe-symbols&lt;/code&gt; 関数のように動作します &lt;code&gt;apropos&lt;/code&gt; を、より多くの情報を提供します。</target>
        </trans-unit>
        <trans-unit id="d698b4556987ba6e891cbfa0189cb35f00181f47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;display&lt;/code&gt; text property (or overlay property) is used to insert images into text, and to control other aspects of how text displays. The value of the &lt;code&gt;display&lt;/code&gt; property should be a display specification, or a list or vector containing several display specifications. Display specifications in the same &lt;code&gt;display&lt;/code&gt; property value generally apply in parallel to the text they cover.</source>
          <target state="translated">&lt;code&gt;display&lt;/code&gt; テキストのプロパティ（またはオーバーレイプロパティ）は、テキストに画像を挿入する方法、およびテキスト表示の他の側面を制御するために使用されます。 &lt;code&gt;display&lt;/code&gt; プロパティの値は、表示仕様、または複数の表示仕様を含むリストまたはベクトルである必要があります。同じ &lt;code&gt;display&lt;/code&gt; プロパティ値の表示仕様は、通常、それらがカバーするテキストと並行して適用されます。</target>
        </trans-unit>
        <trans-unit id="2146c9591b8794278316c3a07921a6d986eec90e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;documentation&lt;/code&gt; function signals a &lt;code&gt;void-function&lt;/code&gt; error if &lt;var&gt;function&lt;/var&gt; has no function definition. However, it is OK if the function definition has no documentation string. In that case, &lt;code&gt;documentation&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;documentation&lt;/code&gt; 機能は、信号 &lt;code&gt;void-function&lt;/code&gt; 場合は、エラーを &lt;var&gt;function&lt;/var&gt; 何の関数定義を持っていません。ただし、関数定義にドキュメント文字列がない場合は問題ありません。その場合、 &lt;code&gt;documentation&lt;/code&gt; は &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a5946c5a7fe3388e239c56c7c95a52e422b36084" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dolist&lt;/code&gt; and &lt;code&gt;dotimes&lt;/code&gt; macros provide convenient ways to write two common kinds of loops.</source>
          <target state="translated">&lt;code&gt;dolist&lt;/code&gt; と &lt;code&gt;dotimes&lt;/code&gt; マクロは、ループの2つの一般的な種類を書くための便利な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="5cd619e63bb900a8b2dd3e53b8d42ac7bccfddfe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;emacs_env&lt;/code&gt; pointer will usually come from the first argument to the module function, or from the call to &lt;code&gt;get_environment&lt;/code&gt; if you need the environment in the module initialization function.</source>
          <target state="translated">&lt;code&gt;emacs_env&lt;/code&gt; のポインタは、通常、モジュールの機能に、またはコールからの最初の引数から来る &lt;code&gt;get_environment&lt;/code&gt; あなたはモジュールの初期化機能で環境を必要とする場合。</target>
        </trans-unit>
        <trans-unit id="7ad2f8242022f8fdd9f0ca14ddd9059e3039f1a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encode-time&lt;/code&gt; function acts as a rough inverse to &lt;code&gt;decode-time&lt;/code&gt;. For example, you can pass the output of the latter to the former as follows:</source>
          <target state="translated">&lt;code&gt;encode-time&lt;/code&gt; 関数は、に粗い逆として作用 &lt;code&gt;decode-time&lt;/code&gt; 。たとえば、次のように後者の出力を前者に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="f5e051708617b016d8c30904d9f5633ae38b3813" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;face&lt;/code&gt; property controls the appearance of the character (see &lt;a href=&quot;faces#Faces&quot;&gt;Faces&lt;/a&gt;). The value of the property can be the following:</source>
          <target state="translated">&lt;code&gt;face&lt;/code&gt; プロパティは、文字（参照の外観を制御する&lt;a href=&quot;faces#Faces&quot;&gt;顔を&lt;/a&gt;）。プロパティの値は次のようになります。</target>
        </trans-unit>
        <trans-unit id="601594d3c15ba0ab5790f6701cbf7bd2686bf7a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;field&lt;/code&gt; property defines fields within the buffer.</source>
          <target state="translated">&lt;code&gt;field&lt;/code&gt; プロパティは、バッファ内のフィールドを定義します。</target>
        </trans-unit>
        <trans-unit id="91d87e0abd3197dd0c588023b97f64cbfcd2c19d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;find-file-noselect&lt;/code&gt; function normally calls &lt;code&gt;after-find-file&lt;/code&gt; after reading the file (see &lt;a href=&quot;subroutines-of-visiting#Subroutines-of-Visiting&quot;&gt;Subroutines of Visiting&lt;/a&gt;). That function sets the buffer major mode, parses local variables, warns the user if there exists an auto-save file more recent than the file just visited, and finishes by running the functions in &lt;code&gt;find-file-hook&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;find-file-noselect&lt;/code&gt; は機能が正常に呼び出した &lt;code&gt;after-find-file&lt;/code&gt; （参照ファイルを読んだ後、&lt;a href=&quot;subroutines-of-visiting#Subroutines-of-Visiting&quot;&gt;訪問のサブルーチンを&lt;/a&gt;）。この関数は、バッファメジャーモードを設定し、ローカル変数を解析し、アクセスしたばかりのファイルよりも新しい自動保存ファイルが存在する場合はユーザーに警告し、 &lt;code&gt;find-file-hook&lt;/code&gt; で関数を実行して終了します。</target>
        </trans-unit>
        <trans-unit id="5b8dc94f0401068ad923a287f4722f89053e9822" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;find-file-noselect&lt;/code&gt; function uses two important subroutines which are sometimes useful in user Lisp code: &lt;code&gt;create-file-buffer&lt;/code&gt; and &lt;code&gt;after-find-file&lt;/code&gt;. This section explains how to use them.</source>
          <target state="translated">&lt;code&gt;find-file-noselect&lt;/code&gt; は関数は、ユーザーのLispコードでも有用な場合がある二つの重要なサブルーチンを使用しています： &lt;code&gt;create-file-buffer&lt;/code&gt; と &lt;code&gt;after-find-file&lt;/code&gt; 。このセクションでは、それらの使用方法について説明します。</target>
        </trans-unit>
        <trans-unit id="433399969927d5b1796b197fef7a6e76457e8540" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;find-file-noselect&lt;/code&gt; function usually returns the buffer that is visiting the file &lt;var&gt;filename&lt;/var&gt;. But, if wildcards are actually used and expanded, it returns a list of buffers that are visiting the various files.</source>
          <target state="translated">&lt;code&gt;find-file-noselect&lt;/code&gt; はの機能は、通常のファイル訪問しているバッファを返す &lt;var&gt;filename&lt;/var&gt; 。ただし、ワイルドカードが実際に使用および展開されている場合は、さまざまなファイルにアクセスしているバッファーのリストが返されます。</target>
        </trans-unit>
        <trans-unit id="a464addeb7232688689a59ac447a545f6c93c736" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;follow-link&lt;/code&gt; property, defining how a</source>
          <target state="translated">&lt;code&gt;follow-link&lt;/code&gt; 定義するプロパティ、どのように</target>
        </trans-unit>
        <trans-unit id="444a5499ee66a56312fc2965164aa8d072d4a9f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;font-lock-multiline&lt;/code&gt; property is meant to ensure proper refontification; it does not automatically identify new multiline constructs. Identifying them requires that Font Lock mode operate on large enough chunks at a time. This will happen by accident on many cases, which may give the impression that multiline constructs magically work. If you set the &lt;code&gt;font-lock-multiline&lt;/code&gt; variable non-&lt;code&gt;nil&lt;/code&gt;, this impression will be even stronger, since the highlighting of those constructs which are found will be properly updated from then on. But that does not work reliably.</source>
          <target state="translated">&lt;code&gt;font-lock-multiline&lt;/code&gt; プロパティが適切refontificationを確保するためのものです。新しい複数行の構成を自動的に識別しません。それらを識別するには、フォントロックモードが一度に十分な大きさのチャンクで動作する必要があります。これは多くの場合偶然に発生し、複数行の構成が魔法のように機能しているという印象を与える可能性があります。 &lt;code&gt;font-lock-multiline&lt;/code&gt; 変数を &lt;code&gt;nil&lt;/code&gt; 以外に設定すると、見つかった構成の強調表示がそれ以降適切に更新されるため、この印象はさらに強くなります。しかし、それは確実には機能しません。</target>
        </trans-unit>
        <trans-unit id="47be97b3e1f5347c54244ef417be3e1f2a83bb62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;group&lt;/code&gt; widget is used here instead of &lt;code&gt;list&lt;/code&gt; only because the formatting is better suited for the purpose.</source>
          <target state="translated">&lt;code&gt;group&lt;/code&gt; の代わりに、ここで使用されているウィジェット &lt;code&gt;list&lt;/code&gt; フォーマットがより良い目的に適しているという理由だけで。</target>
        </trans-unit>
        <trans-unit id="8fa064dc83f7cd8e73706942b3d3bf88b2f393fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;imenu-generic-expression&lt;/code&gt; regular expressions can then use &amp;lsquo;</source>
          <target state="translated">&lt;code&gt;imenu-generic-expression&lt;/code&gt; の正規表現は、 'を使用することができます</target>
        </trans-unit>
        <trans-unit id="95cfa710dcb0d358ddec70e647ab0d09459da980" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;mm&lt;/code&gt;, and &lt;code&gt;cm&lt;/code&gt; units specify the number of pixels per inch, millimeter, and centimeter, respectively. The &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; units correspond to the default width and height of the current face. An image specification of the form &lt;code&gt;(image&amp;nbsp;.&amp;nbsp;&lt;var&gt;props&lt;/var&gt;)&lt;/code&gt; (see &lt;a href=&quot;image-descriptors#Image-Descriptors&quot;&gt;Image Descriptors&lt;/a&gt;) corresponds to the width or height of the specified image. Similarly, an xwidget specification of the form &lt;code&gt;(xwidget&amp;nbsp;.&amp;nbsp;&lt;var&gt;props&lt;/var&gt;)&lt;/code&gt; stands for the width or height of the specified xwidget. See &lt;a href=&quot;xwidgets#Xwidgets&quot;&gt;Xwidgets&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 、 &lt;code&gt;mm&lt;/code&gt; および &lt;code&gt;cm&lt;/code&gt; ユニットは、それぞれ、インチ、ミリメートル、センチメートル当たりのピクセル数を指定します。 &lt;code&gt;width&lt;/code&gt; と &lt;code&gt;height&lt;/code&gt; の単位は、現在の顔のデフォルトの幅と高さに対応します。フォーム &lt;code&gt;(image&amp;nbsp;.&amp;nbsp;&lt;var&gt;props&lt;/var&gt;)&lt;/code&gt; の画像仕様（画像&amp;nbsp;&lt;a href=&quot;image-descriptors#Image-Descriptors&quot;&gt;記述子を&lt;/a&gt;参照）は、指定された画像の幅または高さに対応します。同様に、フォームのxwidget仕様 &lt;code&gt;(xwidget&amp;nbsp;.&amp;nbsp;&lt;var&gt;props&lt;/var&gt;)&lt;/code&gt; 指定xwidgetの幅または高さを表します。&lt;a href=&quot;xwidgets#Xwidgets&quot;&gt;Xwidgetsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c1fa85ed58bc9efcbe16dc5d44ca81dd39c29afc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;intangible&lt;/code&gt; property on an overlay works just like the &lt;code&gt;intangible&lt;/code&gt; text property. It is obsolete. See &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Special Properties&lt;/a&gt;, for details.</source>
          <target state="translated">オーバーレイの &lt;code&gt;intangible&lt;/code&gt; プロパティは、 &lt;code&gt;intangible&lt;/code&gt; テキストプロパティと同じように機能します。廃止されました。詳細については、&lt;a href=&quot;special-properties#Special-Properties&quot;&gt;特殊プロパティ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c74f8c0156232d28e603141c4cc1ee2352b2c427" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;interactive&lt;/code&gt; form must be located at top-level in the function body, or in the function symbol&amp;rsquo;s &lt;code&gt;interactive-form&lt;/code&gt; property (see &lt;a href=&quot;symbol-properties#Symbol-Properties&quot;&gt;Symbol Properties&lt;/a&gt;). It has its effect because the command loop looks for it before calling the function (see &lt;a href=&quot;interactive-call#Interactive-Call&quot;&gt;Interactive Call&lt;/a&gt;). Once the function is called, all its body forms are executed; at this time, if the &lt;code&gt;interactive&lt;/code&gt; form occurs within the body, the form simply returns &lt;code&gt;nil&lt;/code&gt; without even evaluating its argument.</source>
          <target state="translated">&lt;code&gt;interactive&lt;/code&gt; フォームは、関数本体のトップレベルにある、または関数シンボルの中になければなりません &lt;code&gt;interactive-form&lt;/code&gt; プロパティ（参照&lt;a href=&quot;symbol-properties#Symbol-Properties&quot;&gt;シンボルプロパティを&lt;/a&gt;）。コマンドループが関数を呼び出す前にそれを探すので、それは効果があります（&lt;a href=&quot;interactive-call#Interactive-Call&quot;&gt;インタラクティブコールを&lt;/a&gt;参照）。関数が呼び出されると、そのすべての本体フォームが実行されます。このとき、 &lt;code&gt;interactive&lt;/code&gt; フォームが本文内で発生した場合、フォームは引数を評価せずに単に &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f846208cf69e148316b2a5e801ec368e4897cade" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;invisible&lt;/code&gt; property can make the text in the overlay invisible, which means that it does not appear on the screen. See &lt;a href=&quot;invisible-text#Invisible-Text&quot;&gt;Invisible Text&lt;/a&gt;, for details.</source>
          <target state="translated">&lt;code&gt;invisible&lt;/code&gt; 財産は、それが画面に表示されていないことを意味し、オーバーレイ内のテキストを不可視にすることができます。詳細については、非表示の&lt;a href=&quot;invisible-text#Invisible-Text&quot;&gt;テキスト&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="bae7cf08edd92266cd91450bcbdcde42f958861e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jsonrpc&lt;/code&gt; library implements the</source>
          <target state="translated">&lt;code&gt;jsonrpc&lt;/code&gt; ライブラリを実装</target>
        </trans-unit>
        <trans-unit id="cea28c2d7fc3fcf0178f1c3323d9e331934d7db9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keymap&lt;/code&gt; and &lt;code&gt;local-map&lt;/code&gt; properties do not affect a string displayed by the &lt;code&gt;before-string&lt;/code&gt;, &lt;code&gt;after-string&lt;/code&gt;, or &lt;code&gt;display&lt;/code&gt; properties. This is only relevant for mouse clicks and other mouse events that fall on the string, since point is never on the string. To bind special mouse events for the string, assign it a &lt;code&gt;keymap&lt;/code&gt; or &lt;code&gt;local-map&lt;/code&gt; text property. See &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Special Properties&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;keymap&lt;/code&gt; と &lt;code&gt;local-map&lt;/code&gt; プロパティは、文字列には影響しませんが表示する &lt;code&gt;before-string&lt;/code&gt; 、 &lt;code&gt;after-string&lt;/code&gt; 、または &lt;code&gt;display&lt;/code&gt; の特性。ポイントが文字列上にあることはないため、これは文字列に該当するマウスクリックやその他のマウスイベントにのみ関係します。文字列の特別なマウスイベントをバインドするには、 &lt;code&gt;keymap&lt;/code&gt; または &lt;code&gt;local-map&lt;/code&gt; テキストプロパティを割り当てます。&lt;a href=&quot;special-properties#Special-Properties&quot;&gt;特別なプロパティを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9c80a5ff57952dcdf069923f6c4148ca2b519f38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keymap&lt;/code&gt; property specifies an additional keymap for commands. When this keymap applies, it is used for key lookup before the minor mode keymaps and before the buffer&amp;rsquo;s local map. See &lt;a href=&quot;active-keymaps#Active-Keymaps&quot;&gt;Active Keymaps&lt;/a&gt;. If the property value is a symbol, the symbol&amp;rsquo;s function definition is used as the keymap.</source>
          <target state="translated">&lt;code&gt;keymap&lt;/code&gt; プロパティは、コマンドの追加のキーマップを指定します。このキーマップが適用されると、マイナーモードキーマップの前およびバッファのローカルマップの前のキールックアップに使用されます。&lt;a href=&quot;active-keymaps#Active-Keymaps&quot;&gt;アクティブキーマップを&lt;/a&gt;参照してください。プロパティ値がシンボルの場合、シンボルの関数定義がキーマップとして使用されます。</target>
        </trans-unit>
        <trans-unit id="d3dd9b04eaf9d8f1503fdd7493d3e02d22d27e88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kill-emacs&lt;/code&gt; function is normally called via the higher-level command</source>
          <target state="translated">&lt;code&gt;kill-emacs&lt;/code&gt; 機能は通常より高いレベルのコマンドを経由して呼ばれています</target>
        </trans-unit>
        <trans-unit id="c92e19a6bbfd6a262fe1a00d8884e70099e8c2b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kill-ring-yank-pointer&lt;/code&gt; variable points to a link in the kill ring list, whose &lt;small&gt;CAR&lt;/small&gt; is the text to yank next. We say it identifies the front of the ring. Moving &lt;code&gt;kill-ring-yank-pointer&lt;/code&gt; to a different link is called &lt;em&gt;rotating the kill ring&lt;/em&gt;. We call the kill ring a &amp;ldquo;ring&amp;rdquo; because the functions that move the yank pointer wrap around from the end of the list to the beginning, or vice-versa. Rotation of the kill ring is virtual; it does not change the value of &lt;code&gt;kill-ring&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;kill-ring-yank-pointer&lt;/code&gt; がキルリングリスト、内のリンクに変数ポイント&lt;small&gt;CARは、&lt;/small&gt;次のヤンクするテキストです。リングの前面を識別すると言います。移動 &lt;code&gt;kill-ring-yank-pointer&lt;/code&gt; はを別のリンクには呼ばれて&lt;em&gt;キルリングを回転させます&lt;/em&gt;。ヤンクポインタをリストの最後から最初に、またはその逆に移動する関数がラップアラウンドするため、キルリングを「リング」と呼びます。キルリングの回転は仮想です。 &lt;code&gt;kill-ring&lt;/code&gt; の値は変更されません。</target>
        </trans-unit>
        <trans-unit id="300fdeb58fe0177e7e1b352ab7be30fbfbfd4c57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lambda&lt;/code&gt; form has one other effect: it tells the Emacs evaluator and byte-compiler that its argument is a function, by using &lt;code&gt;function&lt;/code&gt; as a subroutine (see below).</source>
          <target state="translated">&lt;code&gt;lambda&lt;/code&gt; 形式は、一つの他の効果を有する：それはその引数が使用して、関数であることをEmacsの評価とバイトコンパイラに指示 &lt;code&gt;function&lt;/code&gt; （下記参照）をサブルーチンとして。</target>
        </trans-unit>
        <trans-unit id="a2aafafa00230d541923e3ade40d481ca37d93c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;center&lt;/code&gt;, and &lt;code&gt;right&lt;/code&gt; positions can be used with &lt;code&gt;:align-to&lt;/code&gt; to specify a position relative to the left edge, center, or right edge of the text area. When the window displays line numbers, the &lt;code&gt;left&lt;/code&gt; and the &lt;code&gt;center&lt;/code&gt; positions are offset to account for the screen space taken by the line-number display.</source>
          <target state="translated">&lt;code&gt;left&lt;/code&gt; 、 &lt;code&gt;center&lt;/code&gt; 、および &lt;code&gt;right&lt;/code&gt; 位置で使用することができる &lt;code&gt;:align-to&lt;/code&gt; 左端、中央、またはテキスト領域の右端に位置を指定します。ウィンドウに行番号が表示されると、行番号表示で使用される画面スペースを考慮して、 &lt;code&gt;left&lt;/code&gt; と &lt;code&gt;center&lt;/code&gt; 位置がオフセットされます。</target>
        </trans-unit>
        <trans-unit id="0400cb4c69cbe2da905584673b0c879713b9c76e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;let&lt;/code&gt; binding defines a lexical environment in which the variable &lt;code&gt;x&lt;/code&gt; is locally bound to 0. Within this binding construct, we define a lambda expression which increments &lt;code&gt;x&lt;/code&gt; by one and returns the incremented value. This lambda expression is automatically turned into a closure, in which the lexical environment lives on even after the &lt;code&gt;let&lt;/code&gt; binding construct has exited. Each time we evaluate the closure, it increments &lt;code&gt;x&lt;/code&gt;, using the binding of &lt;code&gt;x&lt;/code&gt; in that lexical environment.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; 定義を可変する字句環境結合 &lt;code&gt;x&lt;/code&gt; 局所的に、この結合性構築物内では0にバインドされているが、我々は、増分がラムダ式を定義 &lt;code&gt;x&lt;/code&gt; はいずれかによってインクリメント値を返しています。このラムダ式は自動的にクロージャに変換され、 &lt;code&gt;let&lt;/code&gt; バインディングコンストラクトが終了した後でも字句環境が存続します。クロージャを評価するたびに、その字句環境で &lt;code&gt;x&lt;/code&gt; のバインディングを使用して &lt;code&gt;x&lt;/code&gt; をインクリメントします。</target>
        </trans-unit>
        <trans-unit id="13495fafa6f5ab5c87807a5b63a3af0706d7817e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;list-threads&lt;/code&gt; command lists all the currently alive threads. In the resulting buffer, each thread is identified either by the name passed to &lt;code&gt;make-thread&lt;/code&gt; (see &lt;a href=&quot;basic-thread-functions#Basic-Thread-Functions&quot;&gt;Basic Thread Functions&lt;/a&gt;), or by its unique internal identifier if it was not created with a name. The status of each thread at the time of the creation or last update of the buffer is shown, in addition to the object the thread was blocked on at the time, if it was blocked.</source>
          <target state="translated">&lt;code&gt;list-threads&lt;/code&gt; リストにすべての現在生きているスレッドを命じます。結果のバッファでは、各スレッドは &lt;code&gt;make-thread&lt;/code&gt; に渡された名前（&lt;a href=&quot;basic-thread-functions#Basic-Thread-Functions&quot;&gt;基本的なスレッド関数を&lt;/a&gt;参照）、または名前で作成されていない場合は一意の内部識別子によって識別されます。バッファの作成時または最終更新時の各スレッドのステータスが表示されます。また、スレッドがブロックされていた場合は、その時点でブロックされていたオブジェクトも表示されます。</target>
        </trans-unit>
        <trans-unit id="0913489aeb9c330c64bb079b1c5f7c7b0fe21837" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;list-timers&lt;/code&gt; command lists all the currently active timers. There&amp;rsquo;s only one command available in the buffer displayed:</source>
          <target state="translated">&lt;code&gt;list-timers&lt;/code&gt; リストに現在アクティブなすべてのタイマーを命じます。表示されたバッファで使用できるコマンドは1つだけです。</target>
        </trans-unit>
        <trans-unit id="2001adc7401e23d02f00869110aad55b1044900c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;load&lt;/code&gt; function and others.</source>
          <target state="translated">&lt;code&gt;load&lt;/code&gt; 機能など。</target>
        </trans-unit>
        <trans-unit id="60b597e3a1575b6fda9337a82325c5e944998909" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;local-map&lt;/code&gt; property is similar to &lt;code&gt;keymap&lt;/code&gt; but replaces the buffer&amp;rsquo;s local map rather than augmenting existing keymaps. This also means it has lower precedence than minor mode keymaps.</source>
          <target state="translated">&lt;code&gt;local-map&lt;/code&gt; プロパティがに似ている &lt;code&gt;keymap&lt;/code&gt; が、既存のキーマップを増大させるのではなく、バッファのローカルマップを置き換えます。これは、マイナーモードのキーマップよりも優先順位が低いことも意味します。</target>
        </trans-unit>
        <trans-unit id="5c9fa7882799c21b778d554910cdcdfb2d432b8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;make-symbol&lt;/code&gt; function returns an uninterned symbol, distinct from the symbol that is used if you write the name in a Lisp expression. Distinct symbols with the same name are not &lt;code&gt;eq&lt;/code&gt;. See &lt;a href=&quot;creating-symbols#Creating-Symbols&quot;&gt;Creating Symbols&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;make-symbol&lt;/code&gt; 機能を使用すると、Lispの式で名前を書く場合に使用されるシンボルは異なるインターンのシンボルを返します。同じ名前の異なる記号は &lt;code&gt;eq&lt;/code&gt; ではありません。&lt;a href=&quot;creating-symbols#Creating-Symbols&quot;&gt;シンボルの作成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="39c002469150bf19e61aa64b21029ed51696a1ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;modiff&lt;/code&gt; field of the window&amp;rsquo;s buffer, as of the last time a redisplay completed in this window.</source>
          <target state="translated">このウィンドウで最後に再表示が完了した時点での、ウィンドウのバッファーの &lt;code&gt;modiff&lt;/code&gt; フィールド。</target>
        </trans-unit>
        <trans-unit id="8792ad0df49661320c71bdaa90f1c322ed577276" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;or&lt;/code&gt; special form tests whether at least one of the &lt;var&gt;conditions&lt;/var&gt; is true. It works by evaluating all the &lt;var&gt;conditions&lt;/var&gt; one by one in the order written.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; 特殊な形式のテストでは、少なくとも1か &lt;var&gt;conditions&lt;/var&gt; 真です。これは、すべての &lt;var&gt;conditions&lt;/var&gt; 記述された順序で1つずつ評価することによって機能します。</target>
        </trans-unit>
        <trans-unit id="54cf985900734756973b5e6c1038f7a5bb008475" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;overlay_modiff&lt;/code&gt; field of the window&amp;rsquo;s buffer, as of the last time a redisplay completed in this window.</source>
          <target state="translated">このウィンドウで最後に再表示が完了した時点での、ウィンドウのバッファーの &lt;code&gt;overlay_modiff&lt;/code&gt; フィールド。</target>
        </trans-unit>
        <trans-unit id="37eaec0c1b4099d02a0ae66595ebff4846d95b4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent-frame&lt;/code&gt; parameter can be changed at any time. Setting it to another frame &lt;em&gt;reparents&lt;/em&gt; the child frame. Setting it to another child frame makes the frame a &lt;em&gt;nested&lt;/em&gt; child frame. Setting it to &lt;code&gt;nil&lt;/code&gt; restores the frame&amp;rsquo;s status as a top-level frame&amp;mdash;a frame whose window-system window is a child of its display&amp;rsquo;s root window.</source>
          <target state="translated">&lt;code&gt;parent-frame&lt;/code&gt; パラメータはいつでも変更することができます。別のフレームに設定すると、子フレームの&lt;em&gt;親&lt;/em&gt;が変更されます。別の子フレームに設定すると、フレームは&lt;em&gt;ネストされた&lt;/em&gt;子フレームになります。 &lt;code&gt;nil&lt;/code&gt; に設定すると、フレームのステータスがトップレベルフレーム（ウィンドウシステムウィンドウがディスプレイのルートウィンドウの子であるフレーム）として復元されます。</target>
        </trans-unit>
        <trans-unit id="2cbabe60c124238bf2333a137807d3133e30e0c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pcase&lt;/code&gt; macro can use &lt;code&gt;rx&lt;/code&gt; expressions as patterns directly; see &lt;a href=&quot;pcase-macro#rx-in-pcase&quot;&gt;rx in pcase&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;pcase&lt;/code&gt; のマクロを使用することができ &lt;code&gt;rx&lt;/code&gt; 直接パターンとして表現。&lt;a href=&quot;pcase-macro#rx-in-pcase&quot;&gt;pcaseのrxを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ad2b03edf0503d884029350321e8227580f971a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pcase&lt;/code&gt; macro supports several kinds of patterns (see &lt;a href=&quot;pattern_002dmatching-conditional#Pattern_002dMatching-Conditional&quot;&gt;Pattern-Matching Conditional&lt;/a&gt;). You can add support for other kinds of patterns using the &lt;code&gt;pcase-defmacro&lt;/code&gt; macro.</source>
          <target state="translated">&lt;code&gt;pcase&lt;/code&gt; マクロサポートパターンのいくつかの種類が（参照&lt;a href=&quot;pattern_002dmatching-conditional#Pattern_002dMatching-Conditional&quot;&gt;条件をパターンマッチング&lt;/a&gt;）。 &lt;code&gt;pcase-defmacro&lt;/code&gt; マクロを使用して、他の種類のパターンのサポートを追加できます。</target>
        </trans-unit>
        <trans-unit id="5b3d5823b8631faa4d412a2d00c614d255559941" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pcase&lt;/code&gt; patterns provide an alternative facility for destructuring binding, see &lt;a href=&quot;destructuring-with-pcase-patterns#Destructuring-with-pcase-Patterns&quot;&gt;Destructuring with pcase Patterns&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;pcase&lt;/code&gt; のパターンは、結合構造化代入するための代替機能を提供参照&lt;a href=&quot;destructuring-with-pcase-patterns#Destructuring-with-pcase-Patterns&quot;&gt;pcaseパターンと非構造&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f4f5f41a3aef3458c44d5db29ce9dfc422046f88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;print&lt;/code&gt; function is a convenient way of printing. It outputs the printed representation of &lt;var&gt;object&lt;/var&gt; to &lt;var&gt;stream&lt;/var&gt;, printing in addition one newline before &lt;var&gt;object&lt;/var&gt; and another after it. Quoting characters are used. &lt;code&gt;print&lt;/code&gt; returns &lt;var&gt;object&lt;/var&gt;. For example:</source>
          <target state="translated">&lt;code&gt;print&lt;/code&gt; 機能は、印刷の便利な方法です。 &lt;var&gt;object&lt;/var&gt; の印刷された表現を &lt;var&gt;stream&lt;/var&gt; に出力し、さらに &lt;var&gt;object&lt;/var&gt; 前に1行、後に別の改行を印刷します。引用文字が使用されます。 &lt;code&gt;print&lt;/code&gt; は &lt;var&gt;object&lt;/var&gt; 返します。例えば：</target>
        </trans-unit>
        <trans-unit id="ccc61565cace17508e3d5f3f87acbb4cc610269f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process-status&lt;/code&gt; function returns &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;closed&lt;/code&gt;, &lt;code&gt;connect&lt;/code&gt;, &lt;code&gt;stop&lt;/code&gt;, or &lt;code&gt;failed&lt;/code&gt; for network connections. For a network server, the status is always &lt;code&gt;listen&lt;/code&gt;. Except for &lt;code&gt;stop&lt;/code&gt;, none of those values is possible for a real subprocess. See &lt;a href=&quot;process-information#Process-Information&quot;&gt;Process Information&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;process-status&lt;/code&gt; 関数戻り &lt;code&gt;open&lt;/code&gt; 、 &lt;code&gt;closed&lt;/code&gt; 、 &lt;code&gt;connect&lt;/code&gt; 、 &lt;code&gt;stop&lt;/code&gt; 、または &lt;code&gt;failed&lt;/code&gt; ネットワーク接続のために。ネットワークサーバーの場合、ステータスは常に &lt;code&gt;listen&lt;/code&gt; です。 &lt;code&gt;stop&lt;/code&gt; を除いて、これらの値は実際のサブプロセスでは使用できません。&lt;a href=&quot;process-information#Process-Information&quot;&gt;プロセス情報を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="de088b6f64f19c2025fcc7d39d6e8d69dd77d6e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prop-match&lt;/code&gt; structure has the following accessors: &lt;code&gt;prop-match-beginning&lt;/code&gt; (the start of the match), &lt;code&gt;prop-match-end&lt;/code&gt; (the end of the match), and &lt;code&gt;prop-match-value&lt;/code&gt; (the value of &lt;var&gt;property&lt;/var&gt; at the start of the match).</source>
          <target state="translated">&lt;code&gt;prop-match&lt;/code&gt; ：構造は、以下のアクセサ有する &lt;code&gt;prop-match-beginning&lt;/code&gt; （試合の開始）、 &lt;code&gt;prop-match-end&lt;/code&gt; （試合終了）、および &lt;code&gt;prop-match-value&lt;/code&gt; （の値 &lt;var&gt;property&lt;/var&gt; 開始時を試合の）。</target>
        </trans-unit>
        <trans-unit id="598373f29709110698650f08e484fa46a6f764f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read-command&lt;/code&gt; function is a simplified interface to &lt;code&gt;completing-read&lt;/code&gt;. It uses the variable &lt;code&gt;obarray&lt;/code&gt; so as to complete in the set of extant Lisp symbols, and it uses the &lt;code&gt;commandp&lt;/code&gt; predicate so as to accept only command names:</source>
          <target state="translated">&lt;code&gt;read-command&lt;/code&gt; 機能はして単純化したインタフェースです &lt;code&gt;completing-read&lt;/code&gt; 。変数 &lt;code&gt;obarray&lt;/code&gt; を使用して、現存するLispシンボルのセットを完成させ、 &lt;code&gt;commandp&lt;/code&gt; 述語を使用して、コマンド名のみを受け入れます。</target>
        </trans-unit>
        <trans-unit id="2a8b0f78b4fb6dd443231846e3503cfc2ae4faa4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read-multiple-choice-face&lt;/code&gt; face is used to highlight the matching characters in the name string on graphical terminals.</source>
          <target state="translated">&lt;code&gt;read-multiple-choice-face&lt;/code&gt; 面は、グラフィカル端末上の名前の文字列に一致する文字を強調するために使用されます。</target>
        </trans-unit>
        <trans-unit id="200780fa627bf54ef45ca3b42f1020c5fa31731b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rear-nonsticky&lt;/code&gt; property works the opposite way. Most properties are rear-sticky by default, so the &lt;code&gt;rear-nonsticky&lt;/code&gt; property says which properties are &lt;em&gt;not&lt;/em&gt; rear-sticky. If a character&amp;rsquo;s &lt;code&gt;rear-nonsticky&lt;/code&gt; property is &lt;code&gt;t&lt;/code&gt;, then none of its properties are rear-sticky. If the &lt;code&gt;rear-nonsticky&lt;/code&gt; property is a list, properties are rear-sticky &lt;em&gt;unless&lt;/em&gt; their names are in the list.</source>
          <target state="translated">&lt;code&gt;rear-nonsticky&lt;/code&gt; 特性は、反対のように動作します。ほとんどのプロパティはデフォルトでリアスティッキーであるため、 &lt;code&gt;rear-nonsticky&lt;/code&gt; プロパティは、どのプロパティがリアスティッキーでは&lt;em&gt;ないか&lt;/em&gt;を示します。キャラクターの &lt;code&gt;rear-nonsticky&lt;/code&gt; スティッキープロパティが &lt;code&gt;t&lt;/code&gt; の場合、そのプロパティはどれもリアスティッキーではありません。場合は &lt;code&gt;rear-nonsticky&lt;/code&gt; プロパティがリストされ、プロパティはリア粘着性が&lt;em&gt;ない限り、&lt;/em&gt;その名前がリストにあります。</target>
        </trans-unit>
        <trans-unit id="21b5243fd9928f00ce2770b484cc6cb21e26829f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rx&lt;/code&gt; notation can be extended by defining new symbols and parameterized forms in terms of other &lt;code&gt;rx&lt;/code&gt; expressions. This is handy for sharing parts between several regexps, and for making complex ones easier to build and understand by putting them together from smaller pieces.</source>
          <target state="translated">&lt;code&gt;rx&lt;/code&gt; 表記は、他の点で新たなシンボルとパラメータ化形式を定義することによって拡張することができる &lt;code&gt;rx&lt;/code&gt; 式。これは、複数の正規表現間でパーツを共有したり、複雑な正規表現を小さなピースからまとめて構築および理解しやすくしたりするのに便利です。</target>
        </trans-unit>
        <trans-unit id="d35c64be484f1d1e41d1cf10785e16404529be6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rx&lt;/code&gt; notation is mainly useful in Lisp code; it cannot be used in most interactive situations where a regexp is requested, such as when running &lt;code&gt;query-replace-regexp&lt;/code&gt; or in variable customization.</source>
          <target state="translated">&lt;code&gt;rx&lt;/code&gt; 表記は、Lispコードで主に有用です。 &lt;code&gt;query-replace-regexp&lt;/code&gt; の実行時や変数のカスタマイズ時など、正規表現が要求されるほとんどのインタラクティブな状況では使用できません。</target>
        </trans-unit>
        <trans-unit id="53551c07d10f3f216837e0f26f28d397fcb2ed21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;save-current-buffer&lt;/code&gt; special form saves the identity of the current buffer, evaluates the &lt;var&gt;body&lt;/var&gt; forms, and finally restores that buffer as current. The return value is the value of the last form in &lt;var&gt;body&lt;/var&gt;. The current buffer is restored even in case of an abnormal exit via &lt;code&gt;throw&lt;/code&gt; or error (see &lt;a href=&quot;nonlocal-exits#Nonlocal-Exits&quot;&gt;Nonlocal Exits&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;save-current-buffer&lt;/code&gt; 特殊な形式は、現在のバッファのIDを保存し評価する &lt;var&gt;body&lt;/var&gt; の形をし、最終的に現在のように、そのバッファを復元します。戻り値は、 &lt;var&gt;body&lt;/var&gt; の最後のフォームの値です。 &lt;code&gt;throw&lt;/code&gt; またはエラーによる異常な終了の場合でも、現在のバッファーが復元されます（&lt;a href=&quot;nonlocal-exits#Nonlocal-Exits&quot;&gt;非ローカル&lt;/a&gt;終了を参照）。</target>
        </trans-unit>
        <trans-unit id="02fe48ac684709f11ba9e8bf659b5046cd711774" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setf&lt;/code&gt; macro is the most basic way to operate on generalized variables. The &lt;code&gt;setf&lt;/code&gt; form is like &lt;code&gt;setq&lt;/code&gt;, except that it accepts arbitrary place forms on the left side rather than just symbols. For example, &lt;code&gt;(setf (car a) b)&lt;/code&gt; sets the car of &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;, doing the same operation as &lt;code&gt;(setcar a b)&lt;/code&gt;, but without you having to use two separate functions for setting and accessing this type of place.</source>
          <target state="translated">&lt;code&gt;setf&lt;/code&gt; のマクロは、一般の変数を操作するための最も基本的な方法です。 &lt;code&gt;setf&lt;/code&gt; の形は似ている &lt;code&gt;setq&lt;/code&gt; それは左側上の任意の場所のフォームではなく、ただの記号を受け入れることを除いて、。例えば、 &lt;code&gt;(setf (car a) b)&lt;/code&gt; の車設定に &lt;code&gt;b&lt;/code&gt; と同様の動作を行うこと、 &lt;code&gt;(setcar a b)&lt;/code&gt; していますが、場所のこのタイプを設定し、アクセスするための2つの別々の機能を使用する必要はありません。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="519db98ccdce7a0ac9a46f7b701fd15fc85de13f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setf&lt;/code&gt; macro.</source>
          <target state="translated">&lt;code&gt;setf&lt;/code&gt; のマクロ。</target>
        </trans-unit>
        <trans-unit id="aa53c63a9abb045c39925931519d6a1ad749f396" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;silly-loop&lt;/code&gt; function is somewhat more complex:</source>
          <target state="translated">&lt;code&gt;silly-loop&lt;/code&gt; 機能は多少複雑です。</target>
        </trans-unit>
        <trans-unit id="c7a98fc9f98f8ed0409fa02d84cfaa200eb97ed0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sort-paragraphs&lt;/code&gt; function is very much the same, except that its &lt;code&gt;sort-subr&lt;/code&gt; call looks like this:</source>
          <target state="translated">&lt;code&gt;sort-paragraphs&lt;/code&gt; 機能は、そのことを除いて、ほとんど同じである &lt;code&gt;sort-subr&lt;/code&gt; このようなコールルックス：</target>
        </trans-unit>
        <trans-unit id="695d17039e6c523d0970c6a178f2b0f1e4914ac6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;split-window&lt;/code&gt; call has created a new live window, denoted by &lt;var&gt;W5&lt;/var&gt;. It has also created a new internal window, denoted by &lt;var&gt;W3&lt;/var&gt;, which becomes the root window and the parent of both &lt;var&gt;W4&lt;/var&gt; and &lt;var&gt;W5&lt;/var&gt;.</source>
          <target state="translated">&lt;code&gt;split-window&lt;/code&gt; コールはで示される新しいライブウィンドウで、作成した &lt;var&gt;W5&lt;/var&gt; を。また、 &lt;var&gt;W3&lt;/var&gt; で示される新しい内部ウィンドウを作成しました。これは、ルートウィンドウとなり、 &lt;var&gt;W4&lt;/var&gt; と &lt;var&gt;W5&lt;/var&gt; の両方の親になります。</target>
        </trans-unit>
        <trans-unit id="b2e5b8192b36bed82b233ac7ff740de7b4a505e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stopped&lt;/code&gt; event reports, that watching the file has been stopped. This could be because &lt;code&gt;file-notify-rm-watch&lt;/code&gt; was called (see below), or because the file being watched was deleted, or due to another error reported from the underlying library.</source>
          <target state="translated">&lt;code&gt;stopped&lt;/code&gt; イベントレポートは、ファイルを見ることが停止されていること。これは、 &lt;code&gt;file-notify-rm-watch&lt;/code&gt; が呼び出された（以下を参照）か、監視されているファイルが削除されたか、または基になるライブラリから報告された別のエラーが原因である可能性があります。</target>
        </trans-unit>
        <trans-unit id="08a33b6bbd7b79c1bd61398e4080d80acb78db3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;suppress-keymap&lt;/code&gt; function does not make it impossible to modify a buffer, as it does not suppress commands such as &lt;code&gt;yank&lt;/code&gt; and &lt;code&gt;quoted-insert&lt;/code&gt;. To prevent any modification of a buffer, make it read-only (see &lt;a href=&quot;read-only-buffers#Read-Only-Buffers&quot;&gt;Read Only Buffers&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;suppress-keymap&lt;/code&gt; 機能は、それがのような抑制のコマンドでない場合と同様に、それは不可能、バッファを変更することはできない &lt;code&gt;yank&lt;/code&gt; と &lt;code&gt;quoted-insert&lt;/code&gt; 。バッファの変更を防ぐには、バッファを&lt;a href=&quot;read-only-buffers#Read-Only-Buffers&quot;&gt;読み取り専用にし&lt;/a&gt;ます（読み取り専用バッファを参照）。</target>
        </trans-unit>
        <trans-unit id="347f633203d82e1fb528295569b12e1c05eae812" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;syntax-table&lt;/code&gt; property overrides what the syntax table says about this particular character. See &lt;a href=&quot;syntax-properties#Syntax-Properties&quot;&gt;Syntax Properties&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;syntax-table&lt;/code&gt; プロパティの上書き構文テーブルは、この特定の文字について言っています。&lt;a href=&quot;syntax-properties#Syntax-Properties&quot;&gt;構文プロパティを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="92bcd0f9acc582211cd5c8c795c82abd36469aa1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;thin-space&lt;/code&gt;, &lt;code&gt;empty-box&lt;/code&gt;, &lt;code&gt;hex-code&lt;/code&gt;, and</source>
          <target state="translated">&lt;code&gt;thin-space&lt;/code&gt; 、 &lt;code&gt;empty-box&lt;/code&gt; 、 &lt;code&gt;hex-code&lt;/code&gt; 、および</target>
        </trans-unit>
        <trans-unit id="59f05476c96f428731172a18b457adc61f7b26e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;throw&lt;/code&gt; form, if executed, transfers control straight back to the corresponding &lt;code&gt;catch&lt;/code&gt;, which returns immediately. The code following the &lt;code&gt;throw&lt;/code&gt; is not executed. The second argument of &lt;code&gt;throw&lt;/code&gt; is used as the return value of the &lt;code&gt;catch&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;throw&lt;/code&gt; 形態は、実行された場合、転送は対応する直線バックコントロール &lt;code&gt;catch&lt;/code&gt; 直ちに返します。 &lt;code&gt;throw&lt;/code&gt; 続くコードは実行されません。 &lt;code&gt;throw&lt;/code&gt; の2番目の引数は、 &lt;code&gt;catch&lt;/code&gt; の戻り値として使用されます。</target>
        </trans-unit>
        <trans-unit id="0202856c38d3263072f8da9b700d02ede351a72a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;throw&lt;/code&gt; need not appear lexically within the &lt;code&gt;catch&lt;/code&gt; that it jumps to. It can equally well be called from another function called within the &lt;code&gt;catch&lt;/code&gt;. As long as the &lt;code&gt;throw&lt;/code&gt; takes place chronologically after entry to the &lt;code&gt;catch&lt;/code&gt;, and chronologically before exit from it, it has access to that &lt;code&gt;catch&lt;/code&gt;. This is why &lt;code&gt;throw&lt;/code&gt; can be used in commands such as &lt;code&gt;exit-recursive-edit&lt;/code&gt; that throw back to the editor command loop (see &lt;a href=&quot;recursive-editing#Recursive-Editing&quot;&gt;Recursive Editing&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;throw&lt;/code&gt; 内辞書的に表示されていないニーズ &lt;code&gt;catch&lt;/code&gt; それがジャンプしていること。これは、 &lt;code&gt;catch&lt;/code&gt; 内で呼び出される別の関数からも同様に呼び出すことができます。 &lt;code&gt;throw&lt;/code&gt; が &lt;code&gt;catch&lt;/code&gt; に入る前に時系列で行われ、キャッチから出る前に時系列で行われる限り、その &lt;code&gt;catch&lt;/code&gt; アクセスできます。これが、編集者のコマンドループにスローバックする &lt;code&gt;exit-recursive-edit&lt;/code&gt; などのコマンドで &lt;code&gt;throw&lt;/code&gt; を使用できる理由です（&lt;a href=&quot;recursive-editing#Recursive-Editing&quot;&gt;再帰的編集を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a74decb60f69c5be5ea94172409090ba9d08975e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tooltip&lt;/code&gt; face determines the appearance of text shown in tooltips. It should generally use a variable-pitch font of size that is preferably smaller than the default frame font.</source>
          <target state="translated">&lt;code&gt;tooltip&lt;/code&gt; 面は、ツールチップに表示されるテキストの外観を決定します。通常、デフォルトのフレームフォントよりも小さいサイズの可変ピッチフォントを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="60eb5861f5cbed8659df08572852903a05d250cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;top-visible&lt;/code&gt; parameter specifies the number of pixels at the top of the frame that always remain visible within the parent&amp;rsquo;s native frame during dragging and should be set when specifying a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;drag-with-header-line&lt;/code&gt; parameter. The &lt;code&gt;bottom-visible&lt;/code&gt; parameter specifies the number of pixels at the bottom of the frame that always remain visible within the parent&amp;rsquo;s native frame during dragging and should be preferred when specifying a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;drag-with-mode-line&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;code&gt;top-visible&lt;/code&gt; パラメータは常にドラッグ中に親のネイティブフレーム内に表示されたままと非指定するときに設定されるべきであることをフレームの上部のピクセル数を指定する &lt;code&gt;nil&lt;/code&gt; &lt;code&gt;drag-with-header-line&lt;/code&gt; パラメータ。 &lt;code&gt;bottom-visible&lt;/code&gt; パラメータは常にドラッグ中に親のネイティブフレーム内の表示されたままと非指定する際に好まれるべきであることをフレームの底部に画素の数を指定する &lt;code&gt;nil&lt;/code&gt; &lt;code&gt;drag-with-mode-line&lt;/code&gt; パラメータ。</target>
        </trans-unit>
        <trans-unit id="e012f9c53fc17471a7a19403b675f18036df7992" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;track-mouse&lt;/code&gt; form causes Emacs to generate mouse motion events by binding the variable &lt;code&gt;track-mouse&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; value. If that variable has the special value &lt;code&gt;dragging&lt;/code&gt;, it additionally instructs the display engine to refrain from changing the shape of the mouse pointer. This is desirable in Lisp programs that require mouse dragging across large portions of Emacs display, which might otherwise cause the mouse pointer to change its shape according to the display portion it hovers on (see &lt;a href=&quot;pointer-shape#Pointer-Shape&quot;&gt;Pointer Shape&lt;/a&gt;). Therefore, Lisp programs that need the mouse pointer to retain its original shape during dragging should bind &lt;code&gt;track-mouse&lt;/code&gt; to the value &lt;code&gt;dragging&lt;/code&gt; at the beginning of their &lt;var&gt;body&lt;/var&gt;.</source>
          <target state="translated">&lt;code&gt;track-mouse&lt;/code&gt; 形は、Emacsは、変数バインディングによってマウスモーションイベントを発生させる &lt;code&gt;track-mouse&lt;/code&gt; 非に対して &lt;code&gt;nil&lt;/code&gt; 値。その変数に特別な値の &lt;code&gt;dragging&lt;/code&gt; がある場合は、さらに、マウスポインタの形状を変更しないようにディスプレイエンジンに指示します。これは、Emacsディスプレイの大部分をマウスでドラッグする必要があるLispプログラムでは望ましいことです。そうしないと、マウスポインターが、ホバーしたディスプレイ部分に応じて形状が変わる可能性があります（&lt;a href=&quot;pointer-shape#Pointer-Shape&quot;&gt;ポインターの形状を&lt;/a&gt;参照）。したがって、ドラッグ中に元の形状を保持するためにマウスポインタを必要とするLispプログラムは、 &lt;code&gt;track-mouse&lt;/code&gt; を値の &lt;code&gt;dragging&lt;/code&gt; バインドする必要があります。彼らの &lt;var&gt;body&lt;/var&gt; の初めに。</target>
        </trans-unit>
        <trans-unit id="b19edd674347d83642c768bcde88b949ac9815cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try-completion&lt;/code&gt; function is the basic primitive for completion: it returns the longest determined completion of a given initial string, with a given set of strings to match against.</source>
          <target state="translated">&lt;code&gt;try-completion&lt;/code&gt; 機能が完了するための基本的なプリミティブである：それは照合する文字列の与えられたセットで、与えられた初期文字列の最長決定完了を返します。</target>
        </trans-unit>
        <trans-unit id="2f4b6ab7ad75f50c3944d9f90023bc41fff2a2c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unload-feature&lt;/code&gt; function is written in Lisp; its actions are based on the variable &lt;code&gt;load-history&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;unload-feature&lt;/code&gt; 機能は、Lispで書かれています。そのアクションは、変数 &lt;code&gt;load-history&lt;/code&gt; に基づいています。</target>
        </trans-unit>
        <trans-unit id="c7b26bfe3a503536b3db21d80937ae70a63a3b4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unwind-protect&lt;/code&gt; construct is essential whenever you temporarily put a data structure in an inconsistent state; it permits you to make the data consistent again in the event of an error or throw. (Another more specific cleanup construct that is used only for changes in buffer contents is the atomic change group; &lt;a href=&quot;atomic-changes#Atomic-Changes&quot;&gt;Atomic Changes&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;unwind-protect&lt;/code&gt; はあなたが一時的に矛盾した状態にデータ構造を入れるたびコンストラクトは不可欠です。エラーやスローが発生した場合に、データの一貫性を取り戻すことができます。（バッファーの内容の変更にのみ使用されるもう1つのより具体的なクリーンアップ構造は、アトミック変更グループ、&lt;a href=&quot;atomic-changes#Atomic-Changes&quot;&gt;アトミック変更&lt;/a&gt;です。）</target>
        </trans-unit>
        <trans-unit id="2f49acd9789b7b2eeac22d067a11cc480fc012ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vconcat&lt;/code&gt; function also allows byte-code function objects as arguments. This is a special feature to make it easy to access the entire contents of a byte-code function object. See &lt;a href=&quot;byte_002dcode-objects#Byte_002dCode-Objects&quot;&gt;Byte-Code Objects&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;vconcat&lt;/code&gt; の関数も引数としてバイトコード関数オブジェクトを可能にします。これは、バイトコード関数オブジェクトのコンテンツ全体に簡単にアクセスできるようにするための特別な機能です。&lt;a href=&quot;byte_002dcode-objects#Byte_002dCode-Objects&quot;&gt;バイトコードオブジェクトを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="74475dab8b3d8a3c528caed3c11e831ed50eb48d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;window-start&lt;/code&gt; position in the buffer as of the last time the buffer was displayed in a window.</source>
          <target state="translated">バッファが最後にウィンドウに表示されたときの、バッファ内の &lt;code&gt;window-start&lt;/code&gt; 位置。</target>
        </trans-unit>
        <trans-unit id="1c8c8bc7c8ca1829e5170cf2b088a497d991bd1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;with-case-table&lt;/code&gt; macro saves the current case table, makes &lt;var&gt;table&lt;/var&gt; the current case table, evaluates the &lt;var&gt;body&lt;/var&gt; forms, and finally restores the case table. The return value is the value of the last form in &lt;var&gt;body&lt;/var&gt;. The case table is restored even in case of an abnormal exit via &lt;code&gt;throw&lt;/code&gt; or error (see &lt;a href=&quot;nonlocal-exits#Nonlocal-Exits&quot;&gt;Nonlocal Exits&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;with-case-table&lt;/code&gt; マクロは、現在のケーステーブルを保存させる &lt;var&gt;table&lt;/var&gt; 現在のケーステーブル、評価 &lt;var&gt;body&lt;/var&gt; フォームを、最後にケーステーブルを復元します。戻り値は、 &lt;var&gt;body&lt;/var&gt; の最後のフォームの値です。 &lt;code&gt;throw&lt;/code&gt; またはエラーによる異常な終了の場合でも、ケーステーブルが復元されます（&lt;a href=&quot;nonlocal-exits#Nonlocal-Exits&quot;&gt;非ローカル&lt;/a&gt;終了を参照）。</target>
        </trans-unit>
        <trans-unit id="5e3555312fd01da7949ec5e51b8d950b8aeb3bf5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;with-current-buffer&lt;/code&gt; macro saves the identity of the current buffer, makes &lt;var&gt;buffer-or-name&lt;/var&gt; current, evaluates the &lt;var&gt;body&lt;/var&gt; forms, and finally restores the current buffer. &lt;var&gt;buffer-or-name&lt;/var&gt; must specify an existing buffer or the name of an existing buffer.</source>
          <target state="translated">&lt;code&gt;with-current-buffer&lt;/code&gt; マクロが作る、現在のバッファのIDを保存し &lt;var&gt;buffer-or-name&lt;/var&gt; 電流を、評価する &lt;var&gt;body&lt;/var&gt; のフォームを、そして最終的に現在のバッファを復元します。 &lt;var&gt;buffer-or-name&lt;/var&gt; は、既存のバッファーまたは既存のバッファーの名前を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="6be74ef0912f083c42a192cd4080659f8c01b40c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;with-temp-buffer&lt;/code&gt; macro evaluates the &lt;var&gt;body&lt;/var&gt; forms with a temporary buffer as the current buffer. It saves the identity of the current buffer, creates a temporary buffer and makes it current, evaluates the &lt;var&gt;body&lt;/var&gt; forms, and finally restores the previous current buffer while killing the temporary buffer. By default, undo information (see &lt;a href=&quot;undo#Undo&quot;&gt;Undo&lt;/a&gt;) is not recorded in the buffer created by this macro (but &lt;var&gt;body&lt;/var&gt; can enable that, if needed).</source>
          <target state="translated">&lt;code&gt;with-temp-buffer&lt;/code&gt; マクロは評価 &lt;var&gt;body&lt;/var&gt; 電流バッファとして一時バッファでフォームを。現在のバッファのIDを保存し、一時バッファを作成して最新にし、 &lt;var&gt;body&lt;/var&gt; フォームを評価し、最後に一時バッファを強制終了しながら前の現在のバッファを復元します。デフォルトでは、元に戻す情報（&lt;a href=&quot;undo#Undo&quot;&gt;元に戻すを&lt;/a&gt;参照）は、このマクロによって作成されたバッファーに記録されません（ただし、必要に応じて、 &lt;var&gt;body&lt;/var&gt; 有効にできます）。</target>
        </trans-unit>
        <trans-unit id="85d2333f7e1dc8910f83232e2a64715d76356c35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;with-temp-file&lt;/code&gt; macro evaluates the &lt;var&gt;body&lt;/var&gt; forms with a temporary buffer as the current buffer; then, at the end, it writes the buffer contents into file &lt;var&gt;file&lt;/var&gt;. It kills the temporary buffer when finished, restoring the buffer that was current before the &lt;code&gt;with-temp-file&lt;/code&gt; form. Then it returns the value of the last form in &lt;var&gt;body&lt;/var&gt;.</source>
          <target state="translated">&lt;code&gt;with-temp-file&lt;/code&gt; マクロは、評価 &lt;var&gt;body&lt;/var&gt; 電流バッファとして一時バッファでフォームを、次に、最後に、バッファの内容をファイル &lt;var&gt;file&lt;/var&gt; に書き込みます。終了すると一時バッファを強制終了し、 &lt;code&gt;with-temp-file&lt;/code&gt; 形式の前に最新だったバッファを復元します。次に、 &lt;var&gt;body&lt;/var&gt; の最後のフォームの値を返します。</target>
        </trans-unit>
        <trans-unit id="75f491c1d7a86fd552f0176600f4381bb8cc0388" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;absolute position&lt;/em&gt; of a frame is given as a pair (X, Y) of horizontal and vertical pixel offsets relative to an origin (0, 0) of the frame&amp;rsquo;s display. Correspondingly, the &lt;em&gt;absolute edges&lt;/em&gt; of a frame are given as pixel offsets from that origin.</source>
          <target state="translated">フレームの&lt;em&gt;絶対位置&lt;/em&gt;は、フレームの表示の原点（0、0）を基準にした水平および垂直のピクセルオフセットのペア（X、Y）として与えられます。これに対応して、フレームの&lt;em&gt;絶対エッジ&lt;/em&gt;は、その原点からのピクセルオフセットとして与えられます。</target>
        </trans-unit>
        <trans-unit id="9076db1171c8c8a5ca5175d7dfede3c98233cff3" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;advice&lt;/em&gt; feature lets you add to the existing definition of a function, by &lt;em&gt;advising the function&lt;/em&gt;. This is a cleaner method than redefining the whole function.</source>
          <target state="translated">&lt;em&gt;アドバイス&lt;/em&gt;機能を使用することで、機能の既存の定義に追加することができます&lt;em&gt;機能をアドバイスします&lt;/em&gt;。これは、関数全体を再定義するよりもクリーンな方法です。</target>
        </trans-unit>
        <trans-unit id="904d222802ad2663ace2ad3097bbf68979ad4806" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;autoload&lt;/em&gt; facility lets you register the existence of a function or macro, but put off loading the file that defines it. The first call to the function automatically loads the proper library, in order to install the real definition and other associated code, then runs the real definition as if it had been loaded all along. Autoloading can also be triggered by looking up the documentation of the function or macro (see &lt;a href=&quot;documentation-basics#Documentation-Basics&quot;&gt;Documentation Basics&lt;/a&gt;), and completion of variable and function names (see &lt;a href=&quot;autoload-by-prefix#Autoload-by-Prefix&quot;&gt;Autoload by Prefix&lt;/a&gt; below).</source>
          <target state="translated">&lt;em&gt;オートロード&lt;/em&gt;機能を使用すると、関数やマクロの存在を登録しますが、定義していること、それをファイルをロード先送りにすることができます。関数の最初の呼び出しは、実際の定義と他の関連コードをインストールするために適切なライブラリを自動的にロードし、次に実際の定義をずっとロードされたかのように実行します。自動ロードは、関数またはマクロの&lt;a href=&quot;documentation-basics#Documentation-Basics&quot;&gt;ドキュメントを検索し&lt;/a&gt;（ドキュメントの基本を参照）、変数名と関数名を完成させることによってトリガーすることもできます（下記の&lt;a href=&quot;autoload-by-prefix#Autoload-by-Prefix&quot;&gt;プレフィックスによる自動ロードを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="92e5c483eda768ffc040b45483dc57544c8342d5" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;autoload&lt;/em&gt; feature allows you to call a function or macro whose function definition has not yet been loaded into Emacs. It specifies which file contains the definition. When an autoload object appears as a symbol&amp;rsquo;s function definition, calling that symbol as a function automatically loads the specified file; then it calls the real definition loaded from that file. The way to arrange for an autoload object to appear as a symbol&amp;rsquo;s function definition is described in &lt;a href=&quot;autoload#Autoload&quot;&gt;Autoload&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;オートロード&lt;/em&gt;機能を使用すると、その機能の定義はまだのEmacsにロードされていない関数やマクロを呼び出すことができます。どのファイルに定義が含まれるかを指定します。自動ロードオブジェクトがシンボルの関数定義として表示される場合、そのシンボルを関数として呼び出すと、指定されたファイルが自動的にロードされます。次に、そのファイルからロードされた実際の定義を呼び出します。シンボルの関数定義がに記載されているように自動ロードオブジェクトを表示するための方法は、アレンジする&lt;a href=&quot;autoload#Autoload&quot;&gt;自動ロード&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="db7e415ee146c05de6c08823c26d0684fe6dbf60" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;body height&lt;/em&gt; of a window is the height of its text area, which does not include a mode or header line, a horizontal scroll bar, or a bottom divider.</source>
          <target state="translated">&lt;em&gt;身長&lt;/em&gt;ウィンドウのモードまたはヘッダ行、水平スクロールバー、または下部仕切りを含んでいない、そのテキスト領域の高さです。</target>
        </trans-unit>
        <trans-unit id="217d247606dfc265df3143a5a2e96b2fb55c37ec" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;body width&lt;/em&gt; of a window is the width of its text area, which does not include the scroll bar, fringes, margins or a right divider. Note that when one or both fringes are removed (by setting their width to zero), the display engine reserves two character cells, one on each side of the window, for displaying the continuation and truncation glyphs, which leaves 2 columns less for text display. (The function &lt;code&gt;window-max-chars-per-line&lt;/code&gt;, described below, takes this peculiarity into account.)</source>
          <target state="translated">&lt;em&gt;ボディ幅&lt;/em&gt;ウィンドウのスクロールバー、フリンジ、余白または右除算器が含まれていないそのテキスト領域の幅です。一方または両方のフリンジが削除されると（幅をゼロに設定することにより）、表示エンジンは、継続グリフと切り捨てグリフを表示するために、ウィンドウの両側に1つずつ、2つの文字セルを予約します。これにより、テキスト表示用に2列少なくなります。 。 （以下で説明する関数 &lt;code&gt;window-max-chars-per-line&lt;/code&gt; は、この特殊性を考慮に入れています。）</target>
        </trans-unit>
        <trans-unit id="5097ffd7cf46ae9c24a40f48668d84137f1efbad" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;buffer file name&lt;/em&gt; is the name of the file that is visited in that buffer. When a buffer is not visiting a file, its buffer file name is &lt;code&gt;nil&lt;/code&gt;. Most of the time, the buffer name is the same as the nondirectory part of the buffer file name, but the buffer file name and the buffer name are distinct and can be set independently. See &lt;a href=&quot;visiting-files#Visiting-Files&quot;&gt;Visiting Files&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;バッファファイル名&lt;/em&gt;は、その&lt;em&gt;バッファでアクセスされるファイルの名前&lt;/em&gt;です。バッファがファイルにアクセスしていない場合、そのバッファファイル名は &lt;code&gt;nil&lt;/code&gt; です。ほとんどの場合、バッファ名はバッファファイル名のディレクトリ以外の部分と同じですが、バッファファイル名とバッファ名は異なり、個別に設定できます。&lt;a href=&quot;visiting-files#Visiting-Files&quot;&gt;ファイルへのアクセスを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9edbfee6ba6e0df8bcbbec78b92592c29e802ba7" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;buffer list&lt;/em&gt; is a list of all live buffers. The order of the buffers in this list is based primarily on how recently each buffer has been displayed in a window. Several functions, notably &lt;code&gt;other-buffer&lt;/code&gt;, use this ordering. A buffer list displayed for the user also follows this order.</source>
          <target state="translated">&lt;em&gt;バッファリストは、&lt;/em&gt;すべてのライブバッファのリストです。このリスト内のバッファーの順序は、主に各バッファーがウィンドウに表示された最近の頻度に基づいています。いくつかの関数、特に &lt;code&gt;other-buffer&lt;/code&gt; は、この順序を使用します。ユーザーに表示されるバッファリストもこの順序に従います。</target>
        </trans-unit>
        <trans-unit id="28c38d051cd80da945d60773cba7daf700f65577" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;corresponding element&lt;/em&gt; is the portion of &lt;var&gt;expval&lt;/var&gt; that is in the same structural position as the structural position of &lt;var&gt;qpat&lt;/var&gt; in the backquote-style pattern. (In the example above, the corresponding element of &lt;code&gt;second-elem&lt;/code&gt; is the second element of &lt;var&gt;expval&lt;/var&gt;.)</source>
          <target state="translated">&lt;em&gt;対応する要素は、&lt;/em&gt;の一部である &lt;var&gt;expval&lt;/var&gt; の構造的位置と同じ構造の位置にある &lt;var&gt;qpat&lt;/var&gt; バッククォート形式のパターンです。（上記の例では、second &lt;code&gt;second-elem&lt;/code&gt; 対応する要素は &lt;var&gt;expval&lt;/var&gt; の2番目の要素です。）</target>
        </trans-unit>
        <trans-unit id="e246a752a97b0685bf65ee14255ff2c4d2e678d5" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;echo area&lt;/em&gt; is used for displaying error messages (see &lt;a href=&quot;errors#Errors&quot;&gt;Errors&lt;/a&gt;), for messages made with the &lt;code&gt;message&lt;/code&gt; primitive, and for echoing keystrokes. It is not the same as the minibuffer, despite the fact that the minibuffer appears (when active) in the same place on the screen as the echo area. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Minibuffer.html#Minibuffer&quot;&gt;The Minibuffer&lt;/a&gt; in</source>
          <target state="translated">&lt;em&gt;エコー領域&lt;/em&gt;は、エラーメッセージの表示（&lt;a href=&quot;errors#Errors&quot;&gt;エラーを&lt;/a&gt;参照）、 &lt;code&gt;message&lt;/code&gt; プリミティブで作成されたメッセージ、およびキーストロークの&lt;em&gt;エコーに&lt;/em&gt;使用されます。ミニバッファが（アクティブな場合）画面上のエコー領域と同じ場所に表示されるにもかかわらず、ミニバッファと同じではありません。&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Minibuffer.html#Minibuffer&quot;&gt;のミニバッファ&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="f3ea9e34e06d750f6249582c09adfb2b14c104be" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;evaluation&lt;/em&gt; of expressions in Emacs Lisp is performed by the &lt;em&gt;Lisp interpreter&lt;/em&gt;&amp;mdash;a program that receives a Lisp object as input and computes its &lt;em&gt;value as an expression&lt;/em&gt;. How it does this depends on the data type of the object, according to rules described in this chapter. The interpreter runs automatically to evaluate portions of your program, but can also be called explicitly via the Lisp primitive function &lt;code&gt;eval&lt;/code&gt;.</source>
          <target state="translated">Emacs Lispでの式の&lt;em&gt;評価&lt;/em&gt;は、&lt;em&gt;Lispインタープリター（&lt;/em&gt; Lispオブジェクトを入力として受け取り、その&lt;em&gt;値を式として&lt;/em&gt;計算するプログラム）によって実行されます。これがどのように行われるかは、この章で説明されているルールに従って、オブジェクトのデータ型によって異なります。インタプリタはプログラムの一部を評価するために自動的に実行されますが、Lispプリミティブ関数 &lt;code&gt;eval&lt;/code&gt; を介して明示的に呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="a4c54835a8ed7b0637b2955ac97e3f976fc948b0" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;external border&lt;/em&gt; is part of the decorations supplied by the window manager. It is typically used for resizing the frame with the mouse and is therefore not shown on &amp;ldquo;fullboth&amp;rdquo; and maximized frames (see &lt;a href=&quot;size-parameters#Size-Parameters&quot;&gt;Size Parameters&lt;/a&gt;). Its width is determined by the window manager and cannot be changed by Emacs&amp;rsquo; functions.</source>
          <target state="translated">&lt;em&gt;外部の境界線が&lt;/em&gt;ウィンドウマネージャによって提供される装飾の一部です。これは通常、マウスでフレームのサイズを変更するために使用されるため、「フル」フレームと最大化フレームの両方には表示されません（&lt;a href=&quot;size-parameters#Size-Parameters&quot;&gt;サイズパラメータを&lt;/a&gt;参照）。その幅はウィンドウマネージャーによって決定され、Emacsの関数によって変更することはできません。</target>
        </trans-unit>
        <trans-unit id="f2d8bed44c2c20c17f4bf773118cf6698d61845b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;fringe bitmaps&lt;/em&gt; are the actual bitmaps which represent the logical fringe indicators for truncated or continued lines, buffer boundaries, overlay arrows, etc. Each bitmap is represented by a symbol. These symbols are referred to by the variable &lt;code&gt;fringe-indicator-alist&lt;/code&gt;, which maps fringe indicators to bitmaps (see &lt;a href=&quot;fringe-indicators#Fringe-Indicators&quot;&gt;Fringe Indicators&lt;/a&gt;), and the variable &lt;code&gt;fringe-cursor-alist&lt;/code&gt;, which maps fringe cursors to bitmaps (see &lt;a href=&quot;fringe-cursors#Fringe-Cursors&quot;&gt;Fringe Cursors&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;フリンジビットマップは、&lt;/em&gt;各ビットマップは、シンボルによって表されるなど、境界バッファ、オーバーレイ矢印切り捨てまたは継続行の論理フリンジ指標を表す実際のビットマップです。これらのシンボルは、フリンジインジケーターをビットマップにマップする変数 &lt;code&gt;fringe-indicator-alist&lt;/code&gt; （&lt;a href=&quot;fringe-indicators#Fringe-Indicators&quot;&gt;フリンジインジケーターを&lt;/a&gt;参照）、およびフリンジカーソルをビットマップにマップする変数 &lt;code&gt;fringe-cursor-alist&lt;/code&gt; （&lt;a href=&quot;fringe-cursors#Fringe-Cursors&quot;&gt;フリンジカーソルを&lt;/a&gt;参照）によって参照されます。</target>
        </trans-unit>
        <trans-unit id="c3217775f22c68286c9e9e2ce3e64e15e557ece9" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;function definition&lt;/em&gt; of a symbol is the object stored in the function cell of the symbol. The functions described here access, test, and set the function cell of symbols.</source>
          <target state="translated">シンボルの&lt;em&gt;関数定義&lt;/em&gt;は、シンボルの関数セルに格納されているオブジェクトです。ここで説明する関数は、シンボルの関数セルにアクセス、テスト、および設定します。</target>
        </trans-unit>
        <trans-unit id="e263e404107701ba2e2127c05d30319797f11c39" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;inner frame&lt;/em&gt; is the rectangle reserved for the frame&amp;rsquo;s windows. It&amp;rsquo;s enclosed by the internal border which, however, is not part of the inner frame. Its edges are called the &lt;em&gt;inner edges&lt;/em&gt; of the frame. The &lt;em&gt;inner width&lt;/em&gt; and &lt;em&gt;inner height&lt;/em&gt; specify the &lt;em&gt;inner size&lt;/em&gt; of the rectangle. The inner frame is sometimes also referred to as the &lt;em&gt;display area&lt;/em&gt; of the frame.</source>
          <target state="translated">&lt;em&gt;内部フレームは&lt;/em&gt;、フレームのウィンドウのために予約さの長方形です。これは内部境界線で囲まれていますが、内部フレームの一部ではありません。そのエッジは、フレームの&lt;em&gt;内側のエッジ&lt;/em&gt;と呼ばれます。&lt;em&gt;内幅&lt;/em&gt;及び&lt;em&gt;内部高さは、&lt;/em&gt;指定&lt;em&gt;内寸&lt;/em&gt;矩形のを。内側のフレームは、フレームの&lt;em&gt;表示領域&lt;/em&gt;と呼ばれることもあり&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="5a74065a844b2999c1d678863c486ee2bfa66178" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;native frame&lt;/em&gt; is a rectangle located entirely within the outer frame. It excludes the areas occupied by an external or outer border, the title bar and any external menu or tool bar. The edges of the native frame are called the &lt;em&gt;native edges&lt;/em&gt; of the frame. Together, the &lt;em&gt;native width&lt;/em&gt; and &lt;em&gt;native height&lt;/em&gt; of a frame specify the &lt;em&gt;native size&lt;/em&gt; of the frame.</source>
          <target state="translated">&lt;em&gt;ネイティブフレームは、&lt;/em&gt;外枠内に完全に位置する矩形です。外部または外部の境界線、タイトルバー、および外部メニューまたはツールバーが占める領域は除外されます。ネイティブフレームの&lt;em&gt;エッジ&lt;/em&gt;は、フレームの&lt;em&gt;ネイティブエッジ&lt;/em&gt;と呼ばれます。一緒に、フレームの&lt;em&gt;ネイティブの幅&lt;/em&gt;と&lt;em&gt;ネイティブの高さ&lt;/em&gt;は、フレームの&lt;em&gt;ネイティブのサイズ&lt;/em&gt;を指定します。</target>
        </trans-unit>
        <trans-unit id="ae4cf0b922d8647c81dfc51bc033d154bb0b9c1e" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;nice value&lt;/em&gt; of the process, a number. (Processes with smaller nice values get scheduled more favorably.)</source>
          <target state="translated">プロセスの&lt;em&gt;素晴らしい価値&lt;/em&gt;、数。（nice値が小さいプロセスは、より有利にスケジュールされます。）</target>
        </trans-unit>
        <trans-unit id="2c09e0fcd64a13f02c8fe447c36039473c0ce853" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;outer border&lt;/em&gt; is a separate border whose width can be specified with the &lt;code&gt;border-width&lt;/code&gt; frame parameter (see &lt;a href=&quot;layout-parameters#Layout-Parameters&quot;&gt;Layout Parameters&lt;/a&gt;). In practice, either the external or the outer border of a frame are displayed but never both at the same time. Usually, the outer border is shown only for special frames that are not (fully) controlled by the window manager like tooltip frames (see &lt;a href=&quot;tooltips#Tooltips&quot;&gt;Tooltips&lt;/a&gt;), child frames (see &lt;a href=&quot;child-frames#Child-Frames&quot;&gt;Child Frames&lt;/a&gt;) and &lt;code&gt;undecorated&lt;/code&gt; or &lt;code&gt;override-redirect&lt;/code&gt; frames (see &lt;a href=&quot;management-parameters#Management-Parameters&quot;&gt;Management Parameters&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;外側の境界線は&lt;/em&gt;、その幅で指定することができる別個の境界である &lt;code&gt;border-width&lt;/code&gt; （参照フレームパラメータ&lt;a href=&quot;layout-parameters#Layout-Parameters&quot;&gt;レイアウトパラメータ&lt;/a&gt;）。実際には、フレームの外側または外側の境界線のいずれかが表示されますが、両方が同時に表示されることはありません。通常、外側の境界線とは、特殊なツールチップフレームのようなウィンドウマネージャ（参照によって制御されない（完全に）されたフレームのために示されている&lt;a href=&quot;tooltips#Tooltips&quot;&gt;ツールチップを&lt;/a&gt;）、子フレーム（参照&lt;a href=&quot;child-frames#Child-Frames&quot;&gt;子フレームを&lt;/a&gt;）や &lt;code&gt;undecorated&lt;/code&gt; または &lt;code&gt;override-redirect&lt;/code&gt; フレーム（参照&lt;a href=&quot;management-parameters#Management-Parameters&quot;&gt;管理パラメータを&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="2a16135456343ff9bfb76f420c809a82672446af" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;outer frame&lt;/em&gt; is a rectangle comprising all areas shown in the drawing. The edges of that rectangle are called the &lt;em&gt;outer edges&lt;/em&gt; of the frame. Together, the &lt;em&gt;outer width&lt;/em&gt; and &lt;em&gt;outer height&lt;/em&gt; of the frame specify the &lt;em&gt;outer size&lt;/em&gt; of that rectangle.</source>
          <target state="translated">&lt;em&gt;外枠は、&lt;/em&gt;図示の全ての領域を含む矩形です。その長方形の&lt;em&gt;エッジ&lt;/em&gt;は、フレームの&lt;em&gt;外縁&lt;/em&gt;と呼ばれます。一緒に、フレームの&lt;em&gt;外側の幅&lt;/em&gt;と&lt;em&gt;外側の高さ&lt;/em&gt;は、その長方形の&lt;em&gt;外側のサイズ&lt;/em&gt;を指定します。</target>
        </trans-unit>
        <trans-unit id="63a8b7096512c8aa2271f3f9850a19c72d70184b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;overlay arrow&lt;/em&gt; is useful for directing the user&amp;rsquo;s attention to a particular line in a buffer. For example, in the modes used for interface to debuggers, the overlay arrow indicates the line of code about to be executed. This feature has nothing to do with &lt;em&gt;overlays&lt;/em&gt; (see &lt;a href=&quot;overlays#Overlays&quot;&gt;Overlays&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;オーバーレイの矢印は&lt;/em&gt;、バッファ内の特定の行にユーザの注意を向けるために有用です。たとえば、デバッガーへのインターフェイスに使用されるモードでは、オーバーレイ矢印は実行されようとしているコード行を示します。この機能は&lt;em&gt;オーバーレイ&lt;/em&gt;とは何の関係もありません（&lt;a href=&quot;overlays#Overlays&quot;&gt;オーバーレイを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="9d788001216c640953c68e8a1fd972cb556924b6" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;printable &lt;acronym&gt;ASCII&lt;/acronym&gt; characters&lt;/em&gt;, character codes 32 through 126 (consisting of numerals, English letters, and symbols like &amp;lsquo;</source>
          <target state="translated">&lt;em&gt;印刷可能な&lt;acronym&gt;ASCIIの&lt;/acronym&gt;文字&lt;/em&gt;、文字コード126を介して、32（「数字、英文字、記号等からなります</target>
        </trans-unit>
        <trans-unit id="ee5f0d9d7366f64e692b08bd6bdd53cffd9ff956" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;printed representation&lt;/em&gt; of an object is the format of the output generated by the Lisp printer (the function &lt;code&gt;prin1&lt;/code&gt;) for that object. Every data type has a unique printed representation. The &lt;em&gt;read syntax&lt;/em&gt; of an object is the format of the input accepted by the Lisp reader (the function &lt;code&gt;read&lt;/code&gt;) for that object. This is not necessarily unique; many kinds of object have more than one syntax. See &lt;a href=&quot;read-and-print#Read-and-Print&quot;&gt;Read and Print&lt;/a&gt;.</source>
          <target state="translated">オブジェクトの&lt;em&gt;印刷表現&lt;/em&gt;は、そのオブジェクトに対してLispプリンター（関数 &lt;code&gt;prin1&lt;/code&gt; ）によって生成された出力の形式です。すべてのデータ型には、固有の印刷表現があります。オブジェクトの&lt;em&gt;読み取り構文&lt;/em&gt;は、そのオブジェクトのLispリーダー（関数 &lt;code&gt;read&lt;/code&gt; ）によって受け入れられる入力の形式です。これは必ずしも一意ではありません。多くの種類のオブジェクトには複数の構文があります。&lt;a href=&quot;read-and-print#Read-and-Print&quot;&gt;読み取りと印刷を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="16283fc66bc938541ae5f94a57f5db7f82024d76" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;sequence&lt;/em&gt; type is the union of two other Lisp types: lists and arrays. In other words, any list is a sequence, and any array is a sequence. The common property that all sequences have is that each is an ordered collection of elements.</source>
          <target state="translated">&lt;em&gt;シーケンスの&lt;/em&gt;リストと配列：タイプは、他の二つのLispの種類の労働組合です。つまり、リストはシーケンスであり、配列はシーケンスです。すべてのシーケンスに共通する特性は、それぞれが要素の順序付けられたコレクションであるということです。</target>
        </trans-unit>
        <trans-unit id="26bbe6f8407610c43aa3bfb4d0e5236a34a2cd8d" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;syntax class&lt;/em&gt; of a character describes its syntactic role. Each syntax table specifies the syntax class of each character. There is no necessary relationship between the class of a character in one syntax table and its class in any other table.</source>
          <target state="translated">文字の&lt;em&gt;構文クラス&lt;/em&gt;は、その構文上の役割を記述します。各構文テーブルは、各文字の構文クラスを指定します。ある構文テーブルの文字のクラスと他のテーブルのそのクラスの間に必要な関係はありません。</target>
        </trans-unit>
        <trans-unit id="926a41bf96866251570aab9ee4f7d77e1444ba77" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;text area&lt;/em&gt; of a frame is a somewhat fictitious area that can be embedded in the native frame. Its position is unspecified. Its width can be obtained by removing from that of the native width the widths of the internal border, one vertical scroll bar, and one left and one right fringe if they are specified for this frame, see &lt;a href=&quot;layout-parameters#Layout-Parameters&quot;&gt;Layout Parameters&lt;/a&gt;. Its height can be obtained by removing from that of the native height the widths of the internal border and the heights of the frame&amp;rsquo;s internal menu and tool bars and one horizontal scroll bar if specified for this frame.</source>
          <target state="translated">フレームの&lt;em&gt;テキスト領域&lt;/em&gt;は、ネイティブフレームに埋め込むことができる、やや架空の領域です。その位置は特定されていません。その幅は、ネイティブ幅の幅から、内部境界線の幅、1つの垂直スクロールバー、およびこのフレームに指定されている場合は1つの左右のフリンジを削除することで取得できます。&lt;a href=&quot;layout-parameters#Layout-Parameters&quot;&gt;レイアウトパラメータを&lt;/a&gt;参照してください。その高さは、ネイティブの高さから内部境界線の幅とフレームの内部メニューとツールバーの高さ、およびこのフレームに指定されている場合は1つの水平スクロールバーを削除することで取得できます。</target>
        </trans-unit>
        <trans-unit id="cc567aa0f13044eee99b9583effa6fce58743091" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;title bar&lt;/em&gt;, a.k.a. &lt;em&gt;caption bar&lt;/em&gt;, is also part of the window manager&amp;rsquo;s decorations and typically displays the title of the frame (see &lt;a href=&quot;frame-titles#Frame-Titles&quot;&gt;Frame Titles&lt;/a&gt;) as well as buttons for minimizing, maximizing and deleting the frame. It can be also used for dragging the frame with the mouse. The title bar is usually not displayed for fullboth (see &lt;a href=&quot;size-parameters#Size-Parameters&quot;&gt;Size Parameters&lt;/a&gt;), tooltip (see &lt;a href=&quot;tooltips#Tooltips&quot;&gt;Tooltips&lt;/a&gt;) and child frames (see &lt;a href=&quot;child-frames#Child-Frames&quot;&gt;Child Frames&lt;/a&gt;) and doesn&amp;rsquo;t exist for terminal frames. Display of the title bar can be suppressed by setting the &lt;code&gt;override-redirect&lt;/code&gt; or the &lt;code&gt;undecorated&lt;/code&gt; frame parameters (see &lt;a href=&quot;management-parameters#Management-Parameters&quot;&gt;Management Parameters&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;タイトルバーは&lt;/em&gt;、別名&lt;em&gt;キャプションバー&lt;/em&gt;、（も参照ウィンドウマネージャの装飾の一部であり、一般的にフレームのタイトルを表示する&lt;a href=&quot;frame-titles#Frame-Titles&quot;&gt;フレームタイトルを&lt;/a&gt;）だけでなく、最小化最大化し、フレームを削除するためのボタン。また、マウスでフレームをドラッグするためにも使用できます。タイトルバーは通常fullboth（参照用に表示されていない&lt;a href=&quot;size-parameters#Size-Parameters&quot;&gt;サイズ・パラメータを&lt;/a&gt;）、ツールチップ（参照&lt;a href=&quot;tooltips#Tooltips&quot;&gt;ツールチップを&lt;/a&gt;）と子フレーム（参照&lt;a href=&quot;child-frames#Child-Frames&quot;&gt;子フレームを&lt;/a&gt;）し、端末のフレームには存在しません。タイトルバーの表示は、 &lt;code&gt;override-redirect&lt;/code&gt; または &lt;code&gt;undecorated&lt;/code&gt; されていないフレームパラメータを設定することで抑制できます（&lt;a href=&quot;management-parameters#Management-Parameters&quot;&gt;管理パラメータを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="cf5061df863bf4d7e25945860733704a7f478bc7" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;total height&lt;/em&gt; of a window is the number of lines comprising the window&amp;rsquo;s body, the header line, the horizontal scroll bar, the mode line and the bottom divider (if any).</source>
          <target state="translated">ウィンドウの&lt;em&gt;全高&lt;/em&gt;は、ウィンドウの本体、ヘッダー行、水平スクロールバー、モード行、および下部の仕切り（存在する場合）を構成する行数です。</target>
        </trans-unit>
        <trans-unit id="df7776a34012721e685782936a52e8dfef11825e" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;total width&lt;/em&gt; of a window is the number of lines comprising the window&amp;rsquo;s body, its margins, fringes, scroll bars and a right divider (if any).</source>
          <target state="translated">&lt;em&gt;全幅&lt;/em&gt;ウィンドウのウィンドウの身体、そのマージン、縞、スクロールバー及び右の分周器（もしあれば）を含む行の数です。</target>
        </trans-unit>
        <trans-unit id="0a4f1e482e03cd1786491328f05f6a3a541b8f00" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;truename&lt;/em&gt; of a file is the name that you get by following symbolic links at all levels until none remain, then simplifying away &amp;lsquo;</source>
          <target state="translated">ファイルの&lt;em&gt;本当&lt;/em&gt;の名前は、すべてのレベルでシンボリックリンクをたどって、何も残らなくなるまで&lt;em&gt;たどり&lt;/em&gt;、単純化して取得する名前です。</target>
        </trans-unit>
        <trans-unit id="5a368df5a1b8c9ef35e252db40eaf9e6300e7992" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;use time&lt;/em&gt; of a window is not really a time value, but an integer that does increase monotonically with each call of &lt;code&gt;select-window&lt;/code&gt; with a &lt;code&gt;nil&lt;/code&gt;&lt;var&gt;norecord&lt;/var&gt; argument. The window with the lowest use time is usually called the least recently used window while the window with the highest use time is called the most recently used one (see &lt;a href=&quot;cyclic-window-ordering#Cyclic-Window-Ordering&quot;&gt;Cyclic Window Ordering&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;使用時間&lt;/em&gt;窓のは本当に時間値ではなく、それぞれの呼び出しで単調に増加し、整数 &lt;code&gt;select-window&lt;/code&gt; で &lt;code&gt;nil&lt;/code&gt; &lt;var&gt;norecord&lt;/var&gt; 引数。通常、使用時間が最も短いウィンドウは最も使用頻度の低いウィンドウと呼ばれ、使用時間が最も長いウィンドウは最も最近使用されたウィンドウと呼ばれます（&lt;a href=&quot;cyclic-window-ordering#Cyclic-Window-Ordering&quot;&gt;循環ウィンドウの順序付けを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="5970313ec78081de0b5e6fa3c17cbcb799a07f06" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;window state change flag&lt;/em&gt; of a frame, if set, will cause the default values of &lt;code&gt;window-state-change-functions&lt;/code&gt; (for that frame) and &lt;code&gt;window-state-change-hook&lt;/code&gt; to be run during next redisplay regardless of whether a window state change actually occurred for that frame or not. After running any functions on these hooks, the flag is reset for each frame. Applications can set that flag and inspect its value using the following functions.</source>
          <target state="translated">フレームの&lt;em&gt;ウィンドウ状態変更フラグ&lt;/em&gt;が設定されている場合、ウィンドウ状態に関係なく、次の再表示時に &lt;code&gt;window-state-change-functions&lt;/code&gt; （そのフレームの）および &lt;code&gt;window-state-change-hook&lt;/code&gt; のデフォルト値が実行されます。そのフレームで実際に変更が発生したかどうか。これらのフックで関数を実行した後、フラグはフレームごとにリセットされます。アプリケーションは、次の関数を使用して、そのフラグを設定し、その値を検査できます。</target>
        </trans-unit>
        <trans-unit id="4d16338fb95ab07992fcf2621cd0fa8dac537741" translate="yes" xml:space="preserve">
          <source>The &lt;small&gt;CAR&lt;/small&gt; of each entry of this alist is a symbol specifying the parameter. The &lt;small&gt;CDR&lt;/small&gt; should be one of the following:</source>
          <target state="translated">この&lt;small&gt;リスト&lt;/small&gt;の各エントリの&lt;small&gt;CAR&lt;/small&gt;は、パラメータを指定するシンボルです。&lt;small&gt;CDRは、&lt;/small&gt;次のいずれかでなければなりません。</target>
        </trans-unit>
        <trans-unit id="e49ce88f5cd8792ee1a6675c8d5cc998d7f16094" translate="yes" xml:space="preserve">
          <source>The &lt;small&gt;CAR&lt;/small&gt;, &lt;var&gt;characters&lt;/var&gt;, can be either a character or a string. The element says to give that character or characters the syntax specified by &lt;var&gt;syntax-description&lt;/var&gt;, which is passed to &lt;code&gt;modify-syntax-entry&lt;/code&gt; (see &lt;a href=&quot;syntax-table-functions#Syntax-Table-Functions&quot;&gt;Syntax Table Functions&lt;/a&gt;).</source>
          <target state="translated">&lt;small&gt;CARは&lt;/small&gt;、 &lt;var&gt;characters&lt;/var&gt; 、文字または文字列のいずれかになります。この要素は、その1つまたは複数の文字にsyntax &lt;var&gt;syntax-description&lt;/var&gt; で指定された構文を与えるように指示します。これは、 &lt;code&gt;modify-syntax-entry&lt;/code&gt; に渡されます（&lt;a href=&quot;syntax-table-functions#Syntax-Table-Functions&quot;&gt;構文テーブル関数を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="080c3e614f7fb18227cc5998f98d3b818d3afa14" translate="yes" xml:space="preserve">
          <source>The &lt;small&gt;CAR&lt;/small&gt;, &lt;var&gt;item-string&lt;/var&gt;, is the string to be displayed in the menu. It should be short&amp;mdash;preferably one to three words. It should describe the action of the command it corresponds to. Note that not all graphical toolkits can display non-</source>
          <target state="translated">&lt;small&gt;CARは&lt;/small&gt;、 &lt;var&gt;item-string&lt;/var&gt; 、メニューに表示される文字列です。短くする必要があります。できれば1〜3語です。対応するコマンドのアクションを説明する必要があります。すべてのグラフィカルツールキットが非表示できるわけではないことに注意してください</target>
        </trans-unit>
        <trans-unit id="e0a23dd8d612c78e404d710bcf5dfd6ed67ae9dd" translate="yes" xml:space="preserve">
          <source>The &lt;small&gt;CAR&lt;/small&gt;, &lt;var&gt;option&lt;/var&gt;, is a string, the name of a command-line option (including the initial hyphen). The &lt;var&gt;handler-function&lt;/var&gt; is called to handle &lt;var&gt;option&lt;/var&gt;, and receives the option name as its sole argument.</source>
          <target state="translated">&lt;small&gt;CAR&lt;/small&gt;、 &lt;var&gt;option&lt;/var&gt; 、文字列、（最初のハイフンを含む）コマンドラインオプションの名前です。 &lt;var&gt;handler-function&lt;/var&gt; 処理するために呼び出される &lt;var&gt;option&lt;/var&gt; 、そしてその唯一の引数としてオプション名を受け取ります。</target>
        </trans-unit>
        <trans-unit id="a7747b7d0b978aa494fc040c28ed49005a49fbd7" translate="yes" xml:space="preserve">
          <source>The &lt;small&gt;CAR&lt;/small&gt;, &lt;var&gt;subexp&lt;/var&gt;, is an integer specifying which subexpression of the match to fontify (0 means the entire matching text). The second subelement, &lt;var&gt;facespec&lt;/var&gt;, is an expression whose value specifies the face, as described above.</source>
          <target state="translated">&lt;small&gt;CAR&lt;/small&gt;、 &lt;var&gt;subexp&lt;/var&gt; は、（0手段全体マッチングテキスト）フォント表示化するマッチのどの部分式を指定する整数です。2番目のサブ要素 &lt;var&gt;facespec&lt;/var&gt; は、前述のように、値が面を指定する式です。</target>
        </trans-unit>
        <trans-unit id="fbe99fb685d5b20fe0da1df63eb118ad684010c5" translate="yes" xml:space="preserve">
          <source>The &lt;small&gt;CDR&lt;/small&gt; of the element, &lt;var&gt;coding&lt;/var&gt;, should be either a coding system, a cons cell containing two coding systems, or a function name (a symbol with a function definition). If &lt;var&gt;coding&lt;/var&gt; is a coding system, that coding system is used for both reading the file and writing it. If &lt;var&gt;coding&lt;/var&gt; is a cons cell containing two coding systems, its &lt;small&gt;CAR&lt;/small&gt; specifies the coding system for decoding, and its &lt;small&gt;CDR&lt;/small&gt; specifies the coding system for encoding.</source>
          <target state="translated">要素の&lt;small&gt;CDR&lt;/small&gt;である &lt;var&gt;coding&lt;/var&gt; は、コーディングシステム、2つのコーディングシステムを含むconsセル、または関数名（関数定義のあるシンボル）のいずれかである必要があります。 &lt;var&gt;coding&lt;/var&gt; がコーディングシステムである場合、そのコーディングシステムは、ファイルの読み取りと書き込みの両方に使用されます。 &lt;var&gt;coding&lt;/var&gt; が2つのコーディングシステムを含む短所セルである場合、その&lt;small&gt;CAR&lt;/small&gt;はデコード用のコーディングシステムを指定し、その&lt;small&gt;CDR&lt;/small&gt;はエンコード用のコーディングシステムを指定します。</target>
        </trans-unit>
        <trans-unit id="eadcb8d9ac867b4bc1c3959f1bb9e74b5fc964c3" translate="yes" xml:space="preserve">
          <source>The &lt;small&gt;GNU&lt;/small&gt;&lt;code&gt;Coreutils&lt;/code&gt; Manual</source>
          <target state="translated">&lt;small&gt;GNU&lt;/small&gt; &lt;code&gt;Coreutils&lt;/code&gt; マニュアル</target>
        </trans-unit>
        <trans-unit id="8b3d5cecab4d963718b0a6b6d47d896d90a339da" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;action&lt;/var&gt; argument.</source>
          <target state="translated">&lt;var&gt;action&lt;/var&gt; の引数。</target>
        </trans-unit>
        <trans-unit id="4bcf2fda42e12989ef3ca0c11552c2b31eccd611" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;align&lt;/var&gt; argument may also be a list &lt;code&gt;(&lt;var&gt;align&lt;/var&gt;
&lt;var&gt;periodic&lt;/var&gt;)&lt;/code&gt; where &lt;var&gt;align&lt;/var&gt; is interpreted as described above. If &lt;var&gt;periodic&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, it specifies that the rows in &lt;code&gt;bits&lt;/code&gt; should be repeated enough times to reach the specified height.</source>
          <target state="translated">&lt;var&gt;align&lt;/var&gt; 引数は、リストであってもよい &lt;code&gt;(&lt;var&gt;align&lt;/var&gt; &lt;var&gt;periodic&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;align&lt;/var&gt; 上記のように解釈されます。場合は &lt;var&gt;periodic&lt;/var&gt; 非である &lt;code&gt;nil&lt;/code&gt; で、それは内の行することを指定し &lt;code&gt;bits&lt;/code&gt; 指定された高さに到達するために十分な回数を繰り返すべきです。</target>
        </trans-unit>
        <trans-unit id="b05c56c38c737d0175513c9a788605ea9cfba32d" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;array&lt;/var&gt; should be mutable. See &lt;a href=&quot;mutability#Mutability&quot;&gt;Mutability&lt;/a&gt;.</source>
          <target state="translated">&lt;var&gt;array&lt;/var&gt; 変更可能でなければなりません。&lt;a href=&quot;mutability#Mutability&quot;&gt;可変性を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2eff832af67f0f23474068445f337e5f973d50b5" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;body&lt;/var&gt; forms should not use the minibuffer more than once. If the minibuffer is re-entered recursively, &lt;var&gt;function&lt;/var&gt; will only be called once, for the outermost use of the minibuffer.</source>
          <target state="translated">&lt;var&gt;body&lt;/var&gt; の形は複数回ミニバッファを使用しないでください。ミニバッファーが再帰的に再入力された場合、 &lt;var&gt;function&lt;/var&gt; は、ミニバッファーの最も外側で使用するために1回だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="25d40a90977bab6a7277cfccfa36bab3a91341d9" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;body&lt;/var&gt; is inspected at compilation time, and only the symbols that appear in &lt;var&gt;body&lt;/var&gt; with a &amp;lsquo;</source>
          <target state="translated">&lt;var&gt;body&lt;/var&gt; 中に現れる記号だけコンパイル時に検査され、 &lt;var&gt;body&lt;/var&gt; 'での</target>
        </trans-unit>
        <trans-unit id="cd761e030f558aabcde6ca15db330bae7e53acff" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;buffer-or-name&lt;/var&gt; and &lt;var&gt;norecord&lt;/var&gt; arguments have the same meanings as in &lt;code&gt;switch-to-buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;buffer-or-name&lt;/var&gt; と &lt;var&gt;norecord&lt;/var&gt; 引数は同じ意味を持つ &lt;code&gt;switch-to-buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="88e2285bcf064744d6763e2dc89f7fc8ba369a0d" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;buffer&lt;/var&gt; argument is the buffer to associate with the connection. Output from the connection is inserted in the buffer, unless you specify your own filter function to handle the output. If &lt;var&gt;buffer&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, it means that the connection is not associated with any buffer.</source>
          <target state="translated">&lt;var&gt;buffer&lt;/var&gt; 引数は、接続に関連付けるためのバッファです。出力を処理する独自のフィルター関数を指定しない限り、接続からの出力はバッファーに挿入されます。 &lt;var&gt;buffer&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; の場合、接続がどのバッファにも関連付けられていないことを意味します。</target>
        </trans-unit>
        <trans-unit id="19573e4fe6e8797ca8d2698b89b9d56ef0deda57" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;cipher&lt;/var&gt; can be the whole plist from &lt;code&gt;gnutls-ciphers&lt;/code&gt;, or just the symbol key, or a string with the name of that symbol.</source>
          <target state="translated">&lt;var&gt;cipher&lt;/var&gt; からの全体のplistことができる &lt;code&gt;gnutls-ciphers&lt;/code&gt; 、または単に記号キー、またはそのシンボルの名前を持つ文字列。</target>
        </trans-unit>
        <trans-unit id="9358734f2ec35fb2f2572d67721cdbdbe0a84b23" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;contents&lt;/var&gt; of a register can have several possible types:</source>
          <target state="translated">レジスターの &lt;var&gt;contents&lt;/var&gt; は、いくつかの可能なタイプがあります。</target>
        </trans-unit>
        <trans-unit id="6901063123b348019b3ef01026e7a9347a9f0aad" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;count&lt;/var&gt; argument can be a cons cell, &lt;code&gt;(&lt;var&gt;cols&lt;/var&gt;
. &lt;var&gt;lines&lt;/var&gt;)&lt;/code&gt;, instead of an integer. Then the function moves by &lt;var&gt;lines&lt;/var&gt; screen lines, and puts point &lt;var&gt;cols&lt;/var&gt; columns from the visual start of that screen line. Note that &lt;var&gt;cols&lt;/var&gt; are counted from the &lt;em&gt;visual&lt;/em&gt; start of the line; if the window is scrolled horizontally (see &lt;a href=&quot;horizontal-scrolling#Horizontal-Scrolling&quot;&gt;Horizontal Scrolling&lt;/a&gt;), the column on which point will end is in addition to the number of columns by which the text is scrolled.</source>
          <target state="translated">&lt;var&gt;count&lt;/var&gt; 引数はコンス・セルとすることができる &lt;code&gt;(&lt;var&gt;cols&lt;/var&gt; . &lt;var&gt;lines&lt;/var&gt;)&lt;/code&gt; 、代わりに整数。次に、関数によって移動 &lt;var&gt;lines&lt;/var&gt; スクリーン線、及びプット点 &lt;var&gt;cols&lt;/var&gt; そのスクリーン線の視覚開始から列を。 &lt;var&gt;cols&lt;/var&gt; は行の&lt;em&gt;視覚的な&lt;/em&gt;開始からカウントされることに注意してください。ウィンドウが水平方向にスクロールされる場合（&lt;a href=&quot;horizontal-scrolling#Horizontal-Scrolling&quot;&gt;水平スクロールを&lt;/a&gt;参照）、ポイントが終了する列は、テキストがスクロールされる列の数に追加されます。</target>
        </trans-unit>
        <trans-unit id="f2ad21d8232e7c9573096d6fec09010bbae18135" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;data-type&lt;/var&gt; argument specifies the form of data conversion to use, to convert the raw data obtained from another program into Lisp data. Meaningful values include &lt;code&gt;TEXT&lt;/code&gt;, &lt;code&gt;STRING&lt;/code&gt;, &lt;code&gt;UTF8_STRING&lt;/code&gt;, &lt;code&gt;TARGETS&lt;/code&gt;, &lt;code&gt;LENGTH&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;FILE_NAME&lt;/code&gt;, &lt;code&gt;CHARACTER_POSITION&lt;/code&gt;, &lt;code&gt;NAME&lt;/code&gt;, &lt;code&gt;LINE_NUMBER&lt;/code&gt;, &lt;code&gt;COLUMN_NUMBER&lt;/code&gt;, &lt;code&gt;OWNER_OS&lt;/code&gt;, &lt;code&gt;HOST_NAME&lt;/code&gt;, &lt;code&gt;USER&lt;/code&gt;, &lt;code&gt;CLASS&lt;/code&gt;, &lt;code&gt;ATOM&lt;/code&gt;, and &lt;code&gt;INTEGER&lt;/code&gt;. (These are symbols with upper-case names in accord with X conventions.) The default for &lt;var&gt;data-type&lt;/var&gt; is &lt;code&gt;STRING&lt;/code&gt;. Window systems other than X usually support only a small subset of these types, in addition to &lt;code&gt;STRING&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;data-type&lt;/var&gt; 引数は、Lispデータに別のプログラムから得られた生データを変換するために、使用するデータ変換の形式を指定します。意味のある値は、 &lt;code&gt;TEXT&lt;/code&gt; 、 &lt;code&gt;STRING&lt;/code&gt; 、 &lt;code&gt;UTF8_STRING&lt;/code&gt; 、 &lt;code&gt;TARGETS&lt;/code&gt; 、 &lt;code&gt;LENGTH&lt;/code&gt; 、 &lt;code&gt;DELETE&lt;/code&gt; 、 &lt;code&gt;FILE_NAME&lt;/code&gt; 、 &lt;code&gt;CHARACTER_POSITION&lt;/code&gt; 、 &lt;code&gt;NAME&lt;/code&gt; 、 &lt;code&gt;LINE_NUMBER&lt;/code&gt; 、 &lt;code&gt;COLUMN_NUMBER&lt;/code&gt; 、 &lt;code&gt;OWNER_OS&lt;/code&gt; 、 &lt;code&gt;HOST_NAME&lt;/code&gt; 、 &lt;code&gt;USER&lt;/code&gt; 、 &lt;code&gt;CLASS&lt;/code&gt; 、 &lt;code&gt;ATOM&lt;/code&gt; 、および &lt;code&gt;INTEGER&lt;/code&gt; 。（これらは、X規則に従って大文字の名前を持つ記号です。） &lt;var&gt;data-type&lt;/var&gt; のデフォルトは &lt;code&gt;STRING&lt;/code&gt; です。X以外のウィンドウシステムは通常、 &lt;code&gt;STRING&lt;/code&gt; に加えて、これらのタイプの小さなサブセットのみをサポートします。</target>
        </trans-unit>
        <trans-unit id="97a7e1832ebe58d63879484df2925b4e83ba7f55" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;digest-method&lt;/var&gt; can be the whole plist from &lt;code&gt;gnutls-digests&lt;/code&gt;, or just the symbol key, or a string with the name of that symbol.</source>
          <target state="translated">&lt;var&gt;digest-method&lt;/var&gt; からの全体のplistことができる &lt;code&gt;gnutls-digests&lt;/code&gt; 、または単に記号キー、またはそのシンボルの名前を持つ文字列。</target>
        </trans-unit>
        <trans-unit id="935a0eaf2fbd230fea04adaaa1082e4cc3a672c1" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;directory&lt;/var&gt; argument, described below, does not specify a remote file. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Remote-Files.html#Remote-Files&quot;&gt;Remote Files&lt;/a&gt; in</source>
          <target state="translated">&lt;var&gt;directory&lt;/var&gt; 以下の引数は、リモートファイルを指定していません。の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Remote-Files.html#Remote-Files&quot;&gt;リモートファイル&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="5542f9599795f05b8099573e3d57536d54dac1a9" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;display&lt;/var&gt; part of an element of &lt;var&gt;spec&lt;/var&gt; determines which terminals the element matches. If more than one element of &lt;var&gt;spec&lt;/var&gt; matches a given terminal, the first element that matches is the one used for that terminal. There are three possibilities for &lt;var&gt;display&lt;/var&gt;:</source>
          <target state="translated">&lt;var&gt;spec&lt;/var&gt; 要素の &lt;var&gt;display&lt;/var&gt; 部分は、要素が一致する端子を決定します。 &lt;var&gt;spec&lt;/var&gt; 複数の要素が特定の端末に一致する場合、一致する最初の要素はその端末に使用される要素です。 &lt;var&gt;display&lt;/var&gt; は3つの可能性があります。</target>
        </trans-unit>
        <trans-unit id="c9bda405d6d41a6743c07817af4eb4d0e700fb41" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;env&lt;/var&gt; argument provides a pointer to the</source>
          <target state="translated">&lt;var&gt;env&lt;/var&gt; 引数はへのポインタを提供します</target>
        </trans-unit>
        <trans-unit id="08e2ed661c4652900c4d2a493699f6dfd70d222b" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;factor&lt;/var&gt; must be a number, which is interpreted as a multiple of the height of the affected text. If it is positive, that means to display the characters raised. If it is negative, that means to display them lower down.</source>
          <target state="translated">&lt;var&gt;factor&lt;/var&gt; 影響を受けたテキストの高さの倍数として解釈される数でなければなりません。正の場合は、上げられた文字を表示することを意味します。負の場合は、下に表示することを意味します。</target>
        </trans-unit>
        <trans-unit id="9fcc21f91bf906917402c028c06a30dae7160f1b" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;form&lt;/var&gt; argument controls the form of the returned &lt;var&gt;seconds&lt;/var&gt; element, as described below. The return value is a list of nine elements, as follows:</source>
          <target state="translated">&lt;var&gt;form&lt;/var&gt; 引数のコントロール返さのフォーム &lt;var&gt;seconds&lt;/var&gt; 要素は、以下のように説明しました。戻り値は、次の9つの要素のリストです。</target>
        </trans-unit>
        <trans-unit id="fbc01069be7d09c7d3a3a41b0f35d9961db204d7" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;handler&lt;/var&gt; then needs to figure out whether to handle &lt;var&gt;filename&lt;/var&gt; or &lt;var&gt;dirname&lt;/var&gt;.</source>
          <target state="translated">次に、 &lt;var&gt;handler&lt;/var&gt; 、 &lt;var&gt;filename&lt;/var&gt; と &lt;var&gt;dirname&lt;/var&gt; のどちらを処理するかを判断する必要があります。</target>
        </trans-unit>
        <trans-unit id="6cf3ab9b3b26be9707eddf18a92b9c71e8357257" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;hash-method&lt;/var&gt; can be the whole plist from &lt;code&gt;gnutls-macs&lt;/code&gt;, or just the symbol key, or a string with the name of that symbol.</source>
          <target state="translated">&lt;var&gt;hash-method&lt;/var&gt; より全体のplistことができる &lt;code&gt;gnutls-macs&lt;/code&gt; 、または単に記号キー、またはそのシンボルの名前を持つ文字列。</target>
        </trans-unit>
        <trans-unit id="99af7f395067de5484dbd0bd18d306d12c0c9b03" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;input&lt;/var&gt; can be specified as a buffer or string or in other ways (see &lt;a href=&quot;format-of-gnutls-cryptography-inputs#Format-of-GnuTLS-Cryptography-Inputs&quot;&gt;Format of GnuTLS Cryptography Inputs&lt;/a&gt;).</source>
          <target state="translated">&lt;var&gt;input&lt;/var&gt; （参照バッファまたは文字列として、または他の方法で指定することができる&lt;a href=&quot;format-of-gnutls-cryptography-inputs#Format-of-GnuTLS-Cryptography-Inputs&quot;&gt;GNUTLS暗号入力の形式&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="56e73e2ce780242f8e4988661d4b9746a25edb2f" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;iv&lt;/var&gt; and &lt;var&gt;input&lt;/var&gt; and the optional &lt;var&gt;aead_auth&lt;/var&gt; can be specified as a buffer or string or in other ways (see &lt;a href=&quot;format-of-gnutls-cryptography-inputs#Format-of-GnuTLS-Cryptography-Inputs&quot;&gt;Format of GnuTLS Cryptography Inputs&lt;/a&gt;).</source>
          <target state="translated">&lt;var&gt;iv&lt;/var&gt; と &lt;var&gt;input&lt;/var&gt; とオプション &lt;var&gt;aead_auth&lt;/var&gt; は（参照バッファまたは文字列として、または他の方法で指定することができる&lt;a href=&quot;format-of-gnutls-cryptography-inputs#Format-of-GnuTLS-Cryptography-Inputs&quot;&gt;GNUTLS暗号入力の形式&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="0e01e83278249866df827f81cce4dae86e59aa92" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;keep-pred&lt;/var&gt; argument can also be a function. In that case, the function is called with no arguments, prior to running each command, while &lt;var&gt;keymap&lt;/var&gt; is active; it should return non-&lt;code&gt;nil&lt;/code&gt; if &lt;var&gt;keymap&lt;/var&gt; should stay active.</source>
          <target state="translated">&lt;var&gt;keep-pred&lt;/var&gt; 引数も機能することができます。その場合、 &lt;var&gt;keymap&lt;/var&gt; がアクティブなときに、各コマンドを実行する前に、関数は引数なしで呼び出されます。 &lt;var&gt;keymap&lt;/var&gt; をアクティブのままにする必要がある場合は、 &lt;code&gt;nil&lt;/code&gt; 以外を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="cbdbfab6e83937e27f501cc05397b6ce3086f4a1" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;key-regexp&lt;/var&gt; argument can refer to the text matched by a subexpression of &lt;var&gt;record-regexp&lt;/var&gt;, or it can be a regular expression on its own.</source>
          <target state="translated">&lt;var&gt;key-regexp&lt;/var&gt; の引数は、の部分式にマッチしたテキストを参照することができ &lt;var&gt;record-regexp&lt;/var&gt; 、またはそれには独自の正規表現を指定できます。</target>
        </trans-unit>
        <trans-unit id="1492573ae0239681a6f0caf30565cd718bdad9de" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;key&lt;/var&gt; can be specified as a buffer or string or in other ways (see &lt;a href=&quot;format-of-gnutls-cryptography-inputs#Format-of-GnuTLS-Cryptography-Inputs&quot;&gt;Format of GnuTLS Cryptography Inputs&lt;/a&gt;). The &lt;var&gt;key&lt;/var&gt; will be wiped after use if it&amp;rsquo;s a string.</source>
          <target state="translated">&lt;var&gt;key&lt;/var&gt; （参照バッファまたは文字列として、または他の方法で指定することができる&lt;a href=&quot;format-of-gnutls-cryptography-inputs#Format-of-GnuTLS-Cryptography-Inputs&quot;&gt;GNUTLS暗号入力の形式&lt;/a&gt;）。 &lt;var&gt;key&lt;/var&gt; それが文字列だ場合は使用後に消去されます。</target>
        </trans-unit>
        <trans-unit id="62a36f43d3ae1d147429ed8ea40e22e275d19322" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;keymap&lt;/var&gt; argument can also be a list of keymaps.</source>
          <target state="translated">&lt;var&gt;keymap&lt;/var&gt; 引数は、キーマップのリストにすることもできます。</target>
        </trans-unit>
        <trans-unit id="183078d8ef81556e2619f842ffd518df0177a7d6" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;keyword-args&lt;/var&gt; are pairs of keywords and values. The values, except for &lt;code&gt;:after-hook&lt;/code&gt;&amp;rsquo;s, are evaluated. The following keywords are currently supported:</source>
          <target state="translated">&lt;var&gt;keyword-args&lt;/var&gt; キーワードと値のペアです。 &lt;code&gt;:after-hook&lt;/code&gt; を除く値が評価されます。現在、次のキーワードがサポートされています。</target>
        </trans-unit>
        <trans-unit id="d9a9d314d3829c1d47b53b6d2cc5c9f93e1f95cd" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;macro&lt;/var&gt; argument can actually be any symbol, not just a macro name.</source>
          <target state="translated">&lt;var&gt;macro&lt;/var&gt; 引数は、実際には任意のシンボルだけでなく、マクロ名にすることができます。</target>
        </trans-unit>
        <trans-unit id="478187ccf5afebe445a949310656331eb0c33123" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;method&lt;/var&gt; symbol should be one of &lt;code&gt;zero-width&lt;/code&gt;, &lt;code&gt;thin-space&lt;/code&gt;, &lt;code&gt;empty-box&lt;/code&gt;, or &lt;code&gt;hex-code&lt;/code&gt;. These have the same meanings as in &lt;code&gt;glyphless-char-display&lt;/code&gt;, above.</source>
          <target state="translated">&lt;var&gt;method&lt;/var&gt; シンボルは、のいずれかでなければならない &lt;code&gt;zero-width&lt;/code&gt; 、 &lt;code&gt;thin-space&lt;/code&gt; 、 &lt;code&gt;empty-box&lt;/code&gt; 、または &lt;code&gt;hex-code&lt;/code&gt; 。これらは、上記の &lt;code&gt;glyphless-char-display&lt;/code&gt; と同じ意味です。</target>
        </trans-unit>
        <trans-unit id="9aa33ebf3a782ebb64d24c0ca92f2745ce316273" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;name&lt;/var&gt; argument specifies the name for the process object. It is modified as necessary to make it unique.</source>
          <target state="translated">&lt;var&gt;name&lt;/var&gt; 引数は、プロセスオブジェクトの名前を指定します。必要に応じて変更し、一意にします。</target>
        </trans-unit>
        <trans-unit id="231e9e8ad59606a784462ddf1fc5a1c3ee071528" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;now&lt;/var&gt; and &lt;var&gt;comment&lt;/var&gt; entries are for internal use only, and may be omitted. &lt;var&gt;now&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, means to install the face specification now, even if the &lt;code&gt;defface&lt;/code&gt; form has not been evaluated. &lt;var&gt;comment&lt;/var&gt; is a string describing the customization.</source>
          <target state="translated">&lt;var&gt;now&lt;/var&gt; と &lt;var&gt;comment&lt;/var&gt; のエントリは、内部使用のみのためであり、省略することができます。 &lt;var&gt;now&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; でない場合、 &lt;code&gt;defface&lt;/code&gt; フォームが評価されていなくても、face仕様を今すぐインストールすることを意味します。 &lt;var&gt;comment&lt;/var&gt; は、カスタマイズを説明する文字列です。</target>
        </trans-unit>
        <trans-unit id="0988033c8bfd11489dbc605759fe15110dbf7750" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;now&lt;/var&gt;, &lt;var&gt;request&lt;/var&gt;, and &lt;var&gt;comment&lt;/var&gt; entries are for internal use only, and may be omitted. &lt;var&gt;now&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, means to set the variable&amp;rsquo;s value now, even if the variable&amp;rsquo;s &lt;code&gt;defcustom&lt;/code&gt; form has not been evaluated. &lt;var&gt;request&lt;/var&gt; is a list of features to be loaded immediately (see &lt;a href=&quot;named-features#Named-Features&quot;&gt;Named Features&lt;/a&gt;). &lt;var&gt;comment&lt;/var&gt; is a string describing the customization.</source>
          <target state="translated">&lt;var&gt;now&lt;/var&gt; 、 &lt;var&gt;request&lt;/var&gt; 、および &lt;var&gt;comment&lt;/var&gt; のエントリは、内部使用のみのためであり、省略することができます。 &lt;var&gt;now&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、変数の &lt;code&gt;defcustom&lt;/code&gt; 形式が評価されていなくても、変数の値を今すぐ​​設定することを意味します。 &lt;var&gt;request&lt;/var&gt; は、すぐにロードされる機能のリストです（&lt;a href=&quot;named-features#Named-Features&quot;&gt;名前付き機能を&lt;/a&gt;参照）。 &lt;var&gt;comment&lt;/var&gt; は、カスタマイズを説明する文字列です。</target>
        </trans-unit>
        <trans-unit id="bfd48d1c6ff687e2f1df6dd6dad4acb172c7b66e" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;order&lt;/var&gt; is typically a number (integer or float), and the elements of the list are sorted in non-decreasing numerical order.</source>
          <target state="translated">&lt;var&gt;order&lt;/var&gt; 典型的には、数（整数または浮動小数点）であり、リストの要素が非減少番号順にソートされます。</target>
        </trans-unit>
        <trans-unit id="730dc6e5be96fa3e4dc3d63a62d43cd867c25f03" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;parameters&lt;/var&gt; argument is an alist that specifies frame parameters for the new frame. See &lt;a href=&quot;frame-parameters#Frame-Parameters&quot;&gt;Frame Parameters&lt;/a&gt;. If you specify the &lt;code&gt;terminal&lt;/code&gt; parameter in &lt;var&gt;parameters&lt;/var&gt;, the new frame is created on that terminal. Otherwise, if you specify the &lt;code&gt;window-system&lt;/code&gt; frame parameter in &lt;var&gt;parameters&lt;/var&gt;, that determines whether the frame should be displayed on a text terminal or a graphical terminal. See &lt;a href=&quot;window-systems#Window-Systems&quot;&gt;Window Systems&lt;/a&gt;. If neither is specified, the new frame is created in the same terminal as the selected frame.</source>
          <target state="translated">&lt;var&gt;parameters&lt;/var&gt; 引数には、新しいフレームのフレームパラメータを指定する連想リストです。&lt;a href=&quot;frame-parameters#Frame-Parameters&quot;&gt;フレームパラメータを&lt;/a&gt;参照してください。あなたが指定した場合 &lt;code&gt;terminal&lt;/code&gt; にパラメータを &lt;var&gt;parameters&lt;/var&gt; 、新しいフレームがその端末で作成されています。それ以外の場合、パラメータで &lt;code&gt;window-system&lt;/code&gt; フレームパラメータを &lt;var&gt;parameters&lt;/var&gt; すると、フレームをテキスト端末に表示するか、グラフィカル端末に表示するかが決まります。&lt;a href=&quot;window-systems#Window-Systems&quot;&gt;ウィンドウシステムを&lt;/a&gt;参照してください。どちらも指定されていない場合、選択したフレームと同じ端末に新しいフレームが作成されます。</target>
        </trans-unit>
        <trans-unit id="afc7d9a60aa3b751ef05acfcffc9377a3cf63789" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;process&lt;/var&gt; argument can be a system process</source>
          <target state="translated">&lt;var&gt;process&lt;/var&gt; 引数は、システムのプロセスになる可能性が</target>
        </trans-unit>
        <trans-unit id="b8e361047f1404d82466da0618267cd2f934e8f3" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;seconds&lt;/var&gt; element is a Lisp timestamp that is nonnegative and less than 61; it is less than 60 except during positive leap seconds (assuming the operating system supports leap seconds). If the optional &lt;var&gt;form&lt;/var&gt; argument is &lt;code&gt;t&lt;/code&gt;, &lt;var&gt;seconds&lt;/var&gt; uses the same precision as &lt;var&gt;time&lt;/var&gt;; if &lt;var&gt;form&lt;/var&gt; is &lt;code&gt;integer&lt;/code&gt;, &lt;var&gt;seconds&lt;/var&gt; is truncated to an integer. For example, if &lt;var&gt;time&lt;/var&gt; is the timestamp &lt;code&gt;(1566009571321 . 1000)&lt;/code&gt;, which represents 2019-08-17 02:39:31.321 UTC on typical systems that lack leap seconds, then &lt;code&gt;(decode-time &lt;var&gt;time&lt;/var&gt; t t)&lt;/code&gt; returns &lt;code&gt;((31321 . 1000)
39 2 17 8 2019 6 nil 0)&lt;/code&gt;, whereas &lt;code&gt;(decode-time &lt;var&gt;time&lt;/var&gt; t
'integer)&lt;/code&gt; returns &lt;code&gt;(31 39 2 17 8 2019 6 nil 0)&lt;/code&gt;. If &lt;var&gt;form&lt;/var&gt; is omitted or &lt;code&gt;nil&lt;/code&gt;, it currently defaults to &lt;code&gt;integer&lt;/code&gt; but this default may change in future Emacs releases, so callers requiring a particular form should specify &lt;var&gt;form&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;seconds&lt;/var&gt; 要素が非負と61未満であるLispのタイムスタンプです。正のうるう秒の間を除いて、60未満です（オペレーティングシステムがうるう秒をサポートしていると仮定します）。オプションの &lt;var&gt;form&lt;/var&gt; 引数が &lt;code&gt;t&lt;/code&gt; の場合、 &lt;var&gt;seconds&lt;/var&gt; は &lt;var&gt;time&lt;/var&gt; と同じ精度を使用します。場合は &lt;var&gt;form&lt;/var&gt; ある &lt;code&gt;integer&lt;/code&gt; 、 &lt;var&gt;seconds&lt;/var&gt; 整数に切り捨てられます。たとえば、 &lt;var&gt;time&lt;/var&gt; がタイムスタンプ &lt;code&gt;(1566009571321 . 1000)&lt;/code&gt; 場合、うるう秒がない一般的なシステムでは2019-08-17 02：39：31.321 UTCを表し、 &lt;code&gt;(decode-time &lt;var&gt;time&lt;/var&gt; t t)&lt;/code&gt; は次のようになります。 &lt;code&gt;((31321 . 1000) 39 2 17 8 2019 6 nil 0)&lt;/code&gt; 、一方、 &lt;code&gt;(decode-time &lt;var&gt;time&lt;/var&gt; t 'integer)&lt;/code&gt; t'integer ）は &lt;code&gt;(31 39 2 17 8 2019 6 nil 0)&lt;/code&gt; を返します。場合は &lt;var&gt;form&lt;/var&gt; 省略されるかされて &lt;code&gt;nil&lt;/code&gt; に、それは現在のデフォルト値 &lt;code&gt;integer&lt;/code&gt; が、特定のフォームを必要とする発信者が指定する必要がありますので、このデフォルトは、将来のEmacsのリリースで変更される可能性 &lt;var&gt;form&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="b3501ce0f22c5a460c2284b5b67304c4ec40866f" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;spec&lt;/var&gt; argument is a &lt;em&gt;face spec&lt;/em&gt;, which states how the face should appear on different kinds of terminals. It should be an alist whose elements each have the form</source>
          <target state="translated">&lt;var&gt;spec&lt;/var&gt; 引数がある&lt;em&gt;顔のスペック&lt;/em&gt;顔は端末の種類に表示されますどのように述べて、。要素がそれぞれ次の形式を持つリストである必要があります</target>
        </trans-unit>
        <trans-unit id="c06e3e6329485a46088e33ab0a58763a6add9987" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;try-completion&lt;/var&gt; and &lt;var&gt;all-completions&lt;/var&gt; functions should each accept four arguments: &lt;var&gt;string&lt;/var&gt;, &lt;var&gt;collection&lt;/var&gt;, &lt;var&gt;predicate&lt;/var&gt;, and &lt;var&gt;point&lt;/var&gt;. The &lt;var&gt;string&lt;/var&gt;, &lt;var&gt;collection&lt;/var&gt;, and &lt;var&gt;predicate&lt;/var&gt; arguments have the same meanings as in &lt;code&gt;try-completion&lt;/code&gt; (see &lt;a href=&quot;basic-completion#Basic-Completion&quot;&gt;Basic Completion&lt;/a&gt;), and the &lt;var&gt;point&lt;/var&gt; argument is the position of point within &lt;var&gt;string&lt;/var&gt;. Each function should return a non-&lt;code&gt;nil&lt;/code&gt; value if it performed its job, and &lt;code&gt;nil&lt;/code&gt; if it did not (e.g., if there is no way to complete &lt;var&gt;string&lt;/var&gt; according to the completion style).</source>
          <target state="translated">&lt;var&gt;try-completion&lt;/var&gt; し、 &lt;var&gt;all-completions&lt;/var&gt; ：機能はそれぞれ4つの引数は受け入れなければならない &lt;var&gt;string&lt;/var&gt; 、 &lt;var&gt;collection&lt;/var&gt; 、 &lt;var&gt;predicate&lt;/var&gt; 、および &lt;var&gt;point&lt;/var&gt; 。 &lt;var&gt;string&lt;/var&gt; 、 &lt;var&gt;collection&lt;/var&gt; 、および &lt;var&gt;predicate&lt;/var&gt; の引数は同じ意味を持つ &lt;code&gt;try-completion&lt;/code&gt; （参照&lt;a href=&quot;basic-completion#Basic-Completion&quot;&gt;基本完了し&lt;/a&gt;）、および &lt;var&gt;point&lt;/var&gt; 引数は内部の点の位置である &lt;var&gt;string&lt;/var&gt; 。各関数は、ジョブを実行した場合は &lt;code&gt;nil&lt;/code&gt; 以外の値を返し、実行しなかった場合は &lt;code&gt;nil&lt;/code&gt; を返す必要があります（たとえば、 &lt;var&gt;string&lt;/var&gt; を完成させる方法がない場合）。 完成スタイルに応じて）。</target>
        </trans-unit>
        <trans-unit id="0335ff665c252c34bc8af3595631a385d6bec903" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;var-sequence&lt;/var&gt; sequence can also include the &lt;code&gt;&amp;amp;rest&lt;/code&gt; marker followed by a variable name to be bound to the rest of &lt;var&gt;val-sequence&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;var-sequence&lt;/var&gt; 配列も含むことができ &lt;code&gt;&amp;amp;rest&lt;/code&gt; の残りの部分に拘束されることに変数名が続くマーカー &lt;var&gt;val-sequence&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="48c44bcaee3aecba4fd3386d2632d16003a6a097" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;width&lt;/var&gt; and &lt;var&gt;height&lt;/var&gt; arguments specify the widget size in pixels, and &lt;var&gt;title&lt;/var&gt;, a string, specifies its title.</source>
          <target state="translated">&lt;var&gt;width&lt;/var&gt; と &lt;var&gt;height&lt;/var&gt; の引数はウィジェットをピクセル単位でサイズ、および指定した &lt;var&gt;title&lt;/var&gt; 、文字列を、そのタイトルを指定します。</target>
        </trans-unit>
        <trans-unit id="042fa4319f83303549e9163cc74bb7a75739f113" translate="yes" xml:space="preserve">
          <source>The Buffer Gap</source>
          <target state="translated">バッファギャップ</target>
        </trans-unit>
        <trans-unit id="88db08fc40ec31b574f716946b51aacded45fd94" translate="yes" xml:space="preserve">
          <source>The Buffer List</source>
          <target state="translated">バッファリスト</target>
        </trans-unit>
        <trans-unit id="c1b161f427b1f734326373d819a11018ebc6afec" translate="yes" xml:space="preserve">
          <source>The Button package defines functions for inserting and manipulating &lt;em&gt;buttons&lt;/em&gt; that can be activated with the mouse or via keyboard commands. These buttons are typically used for various kinds of hyperlinks.</source>
          <target state="translated">Buttonパッケージは、マウスまたはキーボードコマンドを介してアクティブ化できる&lt;em&gt;ボタン&lt;/em&gt;を挿入および操作するための関数を定義します。これらのボタンは通常、さまざまな種類のハイパーリンクに使用されます。</target>
        </trans-unit>
        <trans-unit id="ed389ad7628fa8d3021e70d30f1da8af14a2e91e" translate="yes" xml:space="preserve">
          <source>The C functions &lt;code&gt;call0&lt;/code&gt;, &lt;code&gt;call1&lt;/code&gt;, &lt;code&gt;call2&lt;/code&gt;, and so on, provide handy ways to call a Lisp function conveniently with a fixed number of arguments. They work by calling &lt;code&gt;Ffuncall&lt;/code&gt;.</source>
          <target state="translated">C関数 &lt;code&gt;call0&lt;/code&gt; 、 &lt;code&gt;call1&lt;/code&gt; 、 &lt;code&gt;call2&lt;/code&gt; などは、固定数の引数を使用してLisp関数を便利に呼び出すための便利な方法を提供します。それらは &lt;code&gt;Ffuncall&lt;/code&gt; を呼び出すことによって機能します。</target>
        </trans-unit>
        <trans-unit id="c8b73b7861af4aafe3f06ecc14faf1d3eea057a5" translate="yes" xml:space="preserve">
          <source>The C part of Emacs is portable to C99 or later: C11-specific features such as &amp;lsquo;</source>
          <target state="translated">EmacsのC部分はC99以降に移植可能です： 'などのC11固有の機能</target>
        </trans-unit>
        <trans-unit id="de35110382ab3d228e2b097a0fd8120a8e5e7818" translate="yes" xml:space="preserve">
          <source>The Case Table</source>
          <target state="translated">ケーステーブル</target>
        </trans-unit>
        <trans-unit id="1f400cc4a2f5b022649bc110a1d58fe7aba52a53" translate="yes" xml:space="preserve">
          <source>The Common Lisp loop facility also contains features for working with iterators. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/cl/Loop-Facility.html#Loop-Facility&quot;&gt;Loop Facility&lt;/a&gt; in</source>
          <target state="translated">Common Lispループ機能には、イテレーターを操作するための機能も含まれています。の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/cl/Loop-Facility.html#Loop-Facility&quot;&gt;ループ機能&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="b959eb0c15ee6787dc31ccfba3386e533a6ed0de" translate="yes" xml:space="preserve">
          <source>The Current Buffer</source>
          <target state="translated">現在のバッファ</target>
        </trans-unit>
        <trans-unit id="3eeba2f256fb33046d7a21ae5a30d974e72989bf" translate="yes" xml:space="preserve">
          <source>The D-Bus bus. This argument is needed only if a bus other than &lt;code&gt;:session&lt;/code&gt; shall be used.</source>
          <target state="translated">D-Busバス。この引数は、 &lt;code&gt;:session&lt;/code&gt; 以外のバスを使用する場合にのみ必要です。</target>
        </trans-unit>
        <trans-unit id="d943856e8a1ab46910a0a060d4b4a8bc05b6d2d7" translate="yes" xml:space="preserve">
          <source>The Data Structure of the Mode Line</source>
          <target state="translated">モードラインのデータ構造</target>
        </trans-unit>
        <trans-unit id="6845dcf7b293a7f410b480283184f4343e62c6bc" translate="yes" xml:space="preserve">
          <source>The Debugger mode</source>
          <target state="translated">デバッガモード</target>
        </trans-unit>
        <trans-unit id="d50f479d67b7ffd944ff37303a4fcf2b32a43c84" translate="yes" xml:space="preserve">
          <source>The Default Value of a Buffer-Local Variable</source>
          <target state="translated">バッファローカル変数のデフォルト値</target>
        </trans-unit>
        <trans-unit id="1af63431f4b48d26e4f383b32edfc24d505f479c" translate="yes" xml:space="preserve">
          <source>The Echo Area</source>
          <target state="translated">エコーエリア</target>
        </trans-unit>
        <trans-unit id="d3ecd4c390bc66755238340e318147394eb63696" translate="yes" xml:space="preserve">
          <source>The Edebug specification says which parts of a call to the macro are forms to be evaluated. For simple macros, the specification often looks very similar to the formal argument list of the macro definition, but specifications are much more general than macro arguments. See &lt;a href=&quot;defining-macros#Defining-Macros&quot;&gt;Defining Macros&lt;/a&gt;, for more explanation of the &lt;code&gt;declare&lt;/code&gt; form.</source>
          <target state="translated">Edebug仕様は、マクロの呼び出しのどの部分が評価されるフォームであるかを示しています。単純なマクロの場合、仕様はマクロ定義の正式な引数リストと非常によく似ていますが、仕様はマクロ引数よりもはるかに一般的です。 &lt;code&gt;declare&lt;/code&gt; フォームの詳細については、&lt;a href=&quot;defining-macros#Defining-Macros&quot;&gt;マクロの定義を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9e84da412291b7634158164e0c4c2be118e4000c" translate="yes" xml:space="preserve">
          <source>The Emacs Lisp byte compiler may collapse identical literal objects, such as literal strings, into references to the same object, with the effect that the byte-compiled code will compare such objects as &lt;code&gt;eq&lt;/code&gt;, while the interpreted version of the same code will not. Therefore, your code should never rely on objects with the same literal contents being either &lt;code&gt;eq&lt;/code&gt; or not &lt;code&gt;eq&lt;/code&gt;, it should instead use functions that compare object contents such as &lt;code&gt;equal&lt;/code&gt;, described below. Similarly, your code should not modify literal objects (e.g., put text properties on literal strings), since doing that might affect other literal objects of the same contents, if the byte compiler collapses them.</source>
          <target state="translated">Emacs Lispバイトコンパイラは、リテラル文字列などの同一のリテラルオブジェクトを同じオブジェクトへの参照に折りたたむことがあります。その結果、バイトコンパイルされたコードは &lt;code&gt;eq&lt;/code&gt; などのオブジェクトを比較しますが、同じコードの解釈されたバージョンは比較しません。したがって、コードは、 &lt;code&gt;eq&lt;/code&gt; または &lt;code&gt;eq&lt;/code&gt; ではない同じリテラルコンテンツを持つオブジェクトに依存してはなりません。代わりに、以下で説明する &lt;code&gt;equal&lt;/code&gt; などのオブジェクトコンテンツを比較する関数を使用する必要があります。同様に、バイトコンパイラがそれらを折りたたむと、同じ内容の他のリテラルオブジェクトに影響を与える可能性があるため、コードでリテラルオブジェクトを変更しないでください（たとえば、リテラル文字列にテキストプロパティを配置する）。</target>
        </trans-unit>
        <trans-unit id="310426987bb1554a93b5fd738cbd277c007e71d9" translate="yes" xml:space="preserve">
          <source>The Emacs Lisp interpreter itself does not perform type checking on the actual arguments passed to functions when they are called. It could not do so, since function arguments in Lisp do not have declared data types, as they do in other programming languages. It is therefore up to the individual function to test whether each actual argument belongs to a type that the function can use.</source>
          <target state="translated">Emacs Lisp インタプリタ自体は、関数が呼び出されたときに関数に渡される実際の引数の型チェックを行いません。なぜなら、Lisp の関数引数には、他のプログラミング言語のように宣言されたデータ型がないからです。したがって、各実際の引数がその関数が使用できる型に属しているかどうかをテストするのは、個々の関数に任されています。</target>
        </trans-unit>
        <trans-unit id="9b5ed2bacaf122b157d132153caf1a6c76e1e216" translate="yes" xml:space="preserve">
          <source>The Emacs Manual</source>
          <target state="translated">Emacs マニュアル</target>
        </trans-unit>
        <trans-unit id="ed9c188a636545890d0306bb79a70700989914ce" translate="yes" xml:space="preserve">
          <source>The Emacs Web Wowser Manual</source>
          <target state="translated">Emacs Web Wowser マニュアル</target>
        </trans-unit>
        <trans-unit id="c5f97d9b01c47621a8f1576c10266887562eaba8" translate="yes" xml:space="preserve">
          <source>The Emacs Widget Library</source>
          <target state="translated">Emacs ウィジェットライブラリ</target>
        </trans-unit>
        <trans-unit id="cf1a28f1f55db75a34f2ee21a67962dda3683be4" translate="yes" xml:space="preserve">
          <source>The Emacs command loop is entered automatically when Emacs starts up. This top-level invocation of the command loop never exits; it keeps running as long as Emacs does. Lisp programs can also invoke the command loop. Since this makes more than one activation of the command loop, we call it &lt;em&gt;recursive editing&lt;/em&gt;. A recursive editing level has the effect of suspending whatever command invoked it and permitting the user to do arbitrary editing before resuming that command.</source>
          <target state="translated">Emacsの起動時に、Emacsコマンドループが自動的に開始されます。コマンドループのこのトップレベルの呼び出しは決して終了しません。Emacsが実行している限り実行を続けます。Lispプログラムはコマンドループを呼び出すこともできます。これにより、コマンドループが複数回アクティブ化されるため、&lt;em&gt;再帰編集&lt;/em&gt;と呼びます。再帰的編集レベルには、それを呼び出したコマンドを一時停止し、ユーザーがそのコマンドを再開する前に任意の編集を行えるようにする効果があります。</target>
        </trans-unit>
        <trans-unit id="8d2757b8581c35fe6423fa5de538de963ebfee3a" translate="yes" xml:space="preserve">
          <source>The Emacs command loop reads a sequence of &lt;em&gt;input events&lt;/em&gt; that represent keyboard or mouse activity, or system events sent to Emacs. The events for keyboard activity are characters or symbols; other events are always lists. This section describes the representation and meaning of input events in detail.</source>
          <target state="translated">Emacsコマンドループは、キーボードまたはマウスのアクティビティを表す一連の&lt;em&gt;入力イベント&lt;/em&gt;、またはEmacsに送信されたシステムイベントを読み取ります。キーボードアクティビティのイベントは文字または記号です。他のイベントは常にリストです。このセクションでは、入力イベントの表現と意味について詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="824a7c8d972dbc9f0918b1d2dd36bd16830fd203" translate="yes" xml:space="preserve">
          <source>The Emacs-GnuTLS manual</source>
          <target state="translated">Emacs-GNuTLS マニュアル</target>
        </trans-unit>
        <trans-unit id="48abe72f85ec259728635bab36a8349e8fee558c" translate="yes" xml:space="preserve">
          <source>The Ewoc package constructs buffer text that represents a structure of Lisp objects, and updates the text to follow changes in that structure. This is like the &amp;ldquo;view&amp;rdquo; component in the &amp;ldquo;model&amp;ndash;view&amp;ndash;controller&amp;rdquo; design paradigm. Ewoc means &amp;ldquo;Emacs&amp;rsquo;s Widget for Object Collections&amp;rdquo;.</source>
          <target state="translated">Ewocパッケージは、Lispオブジェクトの構造を表すバッファテキストを作成し、その構造の変更に合わせてテキストを更新します。これは、「model-view-controller」設計パラダイムの「view」コンポーネントに似ています。 Ewocは「オブジェクトコレクション用のEmacsのウィジェット」を意味します。</target>
        </trans-unit>
        <trans-unit id="b090490c607ee3ae40053556e3bd1bc26e7b84ef" translate="yes" xml:space="preserve">
          <source>The Font Lock functionality is based on several basic functions. Each of these calls the function specified by the corresponding variable. This indirection allows major and minor modes to modify the way fontification works in the buffers of that mode, and even use the Font Lock mechanisms for features that have nothing to do with fontification. (This is why the description below says &amp;ldquo;should&amp;rdquo; when it describes what the functions do: the mode can customize the values of the corresponding variables to do something entirely different.) The variables mentioned below are described in &lt;a href=&quot;other-font-lock-variables#Other-Font-Lock-Variables&quot;&gt;Other Font Lock Variables&lt;/a&gt;.</source>
          <target state="translated">フォントロック機能は、いくつかの基本的な機能に基づいています。これらはそれぞれ、対応する変数で指定された関数を呼び出します。この間接参照により、メジャーモードとマイナーモードで、そのモードのバッファーでのフォント化の動作方法を変更したり、フォント化とは関係のない機能にフォントロックメカニズムを使用したりすることができます。（これが、関数が何をするかを説明するときに、以下の説明が「すべき」と言う理由です。モードは、対応する変数の値をカスタマイズして、まったく異なることを行うことができます。）以下に説明する変数は、&lt;a href=&quot;other-font-lock-variables#Other-Font-Lock-Variables&quot;&gt;その他のフォントロック変数で&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="ffe1e1010931294e4ff432189f143dba8ad3d52c" translate="yes" xml:space="preserve">
          <source>The GNU C Library Reference Manual</source>
          <target state="translated">GNU Cライブラリ・リファレンス・マニュアル</target>
        </trans-unit>
        <trans-unit id="f510bd36e1c0e21b92eb72e77742b390298c8296" translate="yes" xml:space="preserve">
          <source>The GNU Emacs Manual</source>
          <target state="translated">GNU Emacsマニュアル</target>
        </trans-unit>
        <trans-unit id="be8e8d5a20ebc8f402b76cd53e568b1f3714e9b8" translate="yes" xml:space="preserve">
          <source>The GNU Libc Manual</source>
          <target state="translated">GNU Libcマニュアル</target>
        </trans-unit>
        <trans-unit id="97d4e4584e3d965d515d24f39f1ba0fb87608737" translate="yes" xml:space="preserve">
          <source>The GNU Privacy Guard Manual</source>
          <target state="translated">GNUプライバシー・ガード・マニュアル</target>
        </trans-unit>
        <trans-unit id="46ff57e09cd2f765d85462c770ad0d94e1fb2d96" translate="yes" xml:space="preserve">
          <source>The GNU system (using the GNU kernel, which consists of the HURD and Mach).</source>
          <target state="translated">GNUシステム(HURDとMachからなるGNUカーネルを使う)。</target>
        </trans-unit>
        <trans-unit id="d45b5a5dd9f2e4c7ca56bba45693e77c91e54851" translate="yes" xml:space="preserve">
          <source>The GTK+ and NS versions of Emacs ignores items 1 to 3, because disabled and/or deselected images are autocomputed from item 0.</source>
          <target state="translated">GTK+やNS版のEmacsでは、無効化された画像や選択解除された画像が項目0から自動計算されるため、項目1から3までは無視されます。</target>
        </trans-unit>
        <trans-unit id="fff10c181322ecc664c42dfda8fefedaf1847850" translate="yes" xml:space="preserve">
          <source>The ID number of the outermost window-system window in which the frame exists. As with &lt;code&gt;window-id&lt;/code&gt;, changing this parameter has no actual effect.</source>
          <target state="translated">フレームが存在する最も外側のウィンドウシステムウィンドウのID番号。 &lt;code&gt;window-id&lt;/code&gt; と同様に、このパラメーターを変更しても実際の効果はありません。</target>
        </trans-unit>
        <trans-unit id="4d63d6de0303f72672f86fee4a5f29964456f058" translate="yes" xml:space="preserve">
          <source>The ID number which the graphical display uses for this frame. Emacs assigns this parameter when the frame is created; changing the parameter has no effect on the actual ID number.</source>
          <target state="translated">グラフィカルディスプレイがこのフレームに使用するID番号。Emacsはフレームの作成時にこのパラメータを割り当てます。パラメータを変更しても実際のID番号には影響しません。</target>
        </trans-unit>
        <trans-unit id="b7c31f5b358bfa18cfdf049d5e081a95b7c9c0ea" translate="yes" xml:space="preserve">
          <source>The Init File</source>
          <target state="translated">イニット・ファイル</target>
        </trans-unit>
        <trans-unit id="cbab447af0083f2d9278c7461d6eaff464619006" translate="yes" xml:space="preserve">
          <source>The Internet protocol address.</source>
          <target state="translated">インターネットプロトコルのアドレスです。</target>
        </trans-unit>
        <trans-unit id="aba4cfd77de5ccd0c7c2dc2fb4bf06e5c623205b" translate="yes" xml:space="preserve">
          <source>The Kill Ring</source>
          <target state="translated">キルリング</target>
        </trans-unit>
        <trans-unit id="82814d081d76842dd03cfad63480273e62e1f98e" translate="yes" xml:space="preserve">
          <source>The Lisp Debugger</source>
          <target state="translated">Lisp デバッガ</target>
        </trans-unit>
        <trans-unit id="c8d28bedb49ac3761246585ddcb49c12087f68df" translate="yes" xml:space="preserve">
          <source>The Lisp interpreter, or evaluator, is the part of Emacs that computes the value of an expression that is given to it. When a function written in Lisp is called, the evaluator computes the value of the function by evaluating the expressions in the function body. Thus, running any Lisp program really means running the Lisp interpreter.</source>
          <target state="translated">Lisp インタプリタ(評価器)は、Emacs の中で、与えられた式の値を計算する部分です。Lispで書かれた関数が呼び出されると、関数本体の式を評価することでその関数の値を計算します。このように、Lispプログラムを実行するということは、Lispインタプリタを実行することを意味します。</target>
        </trans-unit>
        <trans-unit id="67096f218be8637118f0e140ce449a73a3aa3d19" translate="yes" xml:space="preserve">
          <source>The Lisp macros below provide different ways of binding names to definitions. Common to all of them are the following rules:</source>
          <target state="translated">以下のLispマクロでは、名前を定義に結合するさまざまな方法を提供しています。これらのマクロに共通しているのは以下のルールです。</target>
        </trans-unit>
        <trans-unit id="b92835e656ef8b33221e27f7efc472160affd9c6" translate="yes" xml:space="preserve">
          <source>The Lisp modes have two string quote characters: double-quote (&amp;lsquo;</source>
          <target state="translated">Lispモードには、2つの文字列引用符があります。二重引用符（ '</target>
        </trans-unit>
        <trans-unit id="00a189f320831f6a7cbe46d5d1c34bc9f301c86a" translate="yes" xml:space="preserve">
          <source>The Lisp package which goes with your module could then load the module using the &lt;code&gt;load&lt;/code&gt; primitive (see &lt;a href=&quot;dynamic-modules#Dynamic-Modules&quot;&gt;Dynamic Modules&lt;/a&gt;) when the package is loaded into Emacs.</source>
          <target state="translated">モジュールに付属するLispパッケージは、パッケージがEmacsにロードされるときに、 &lt;code&gt;load&lt;/code&gt; プリミティブ（&lt;a href=&quot;dynamic-modules#Dynamic-Modules&quot;&gt;動的モジュールを&lt;/a&gt;参照）を使用してモジュールをロードできます。</target>
        </trans-unit>
        <trans-unit id="a10dde5e9f797bafad7f9b20fb8272a90e00c8e1" translate="yes" xml:space="preserve">
          <source>The Lisp printer can produce this syntax to record circular and shared structure in a Lisp object, if you bind the variable &lt;code&gt;print-circle&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; value. See &lt;a href=&quot;output-variables#Output-Variables&quot;&gt;Output Variables&lt;/a&gt;.</source>
          <target state="translated">変数 &lt;code&gt;print-circle&lt;/code&gt; を &lt;code&gt;nil&lt;/code&gt; 以外の値にバインドすると、Lispプリンターはこの構文を生成して、Lispオブジェクトに循環構造と共有構造を記録できます。&lt;a href=&quot;output-variables#Output-Variables&quot;&gt;出力変数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="eae52bdc2047fd6ec677f1f8ee8f1932da4d37e9" translate="yes" xml:space="preserve">
          <source>The Lisp reader reads an integer as a nonempty sequence of decimal digits with optional initial sign and optional final period.</source>
          <target state="translated">Lisp リーダは整数を、オプションで初期記号と最終ピリオドを指定した空ではない10進数のシーケンスとして読み込みます。</target>
        </trans-unit>
        <trans-unit id="2a586c1cf0727731b69b8375a90b4485bdf10c07" translate="yes" xml:space="preserve">
          <source>The Lisp reader reports invalid syntax, but cannot say where the real problem is. For example, the error &amp;lsquo;</source>
          <target state="translated">Lispリーダーは無効な構文を報告しますが、本当の問題がどこにあるかを言うことはできません。たとえば、エラー '</target>
        </trans-unit>
        <trans-unit id="fcecede5703df29c00b9f51550de12dc7dfbae92" translate="yes" xml:space="preserve">
          <source>The Mark</source>
          <target state="translated">マーク</target>
        </trans-unit>
        <trans-unit id="f37b90308c8ea9bb361394a84649d9067c3b3b87" translate="yes" xml:space="preserve">
          <source>The Match Data</source>
          <target state="translated">マッチデータ</target>
        </trans-unit>
        <trans-unit id="e12f3f3cbde4367f4806f21a6ef69e7d82fb3756" translate="yes" xml:space="preserve">
          <source>The Menu Bar</source>
          <target state="translated">メニューバー</target>
        </trans-unit>
        <trans-unit id="f476ae6da532e421223f60de7495c64fa2d57aaa" translate="yes" xml:space="preserve">
          <source>The Outside Context</source>
          <target state="translated">外部コンテクスト</target>
        </trans-unit>
        <trans-unit id="452e09252ab77548d7926d100d076b5a89f76615" translate="yes" xml:space="preserve">
          <source>The Overlay Arrow</source>
          <target state="translated">オーバーレイ矢印</target>
        </trans-unit>
        <trans-unit id="2749af725670d68e7c9f29455577d15f1aa89399" translate="yes" xml:space="preserve">
          <source>The POSIX search and match functions do not properly support the non-greedy repetition operators (see &lt;a href=&quot;regexp-special#Regexp-Special&quot;&gt;non-greedy&lt;/a&gt;). This is because POSIX backtracking conflicts with the semantics of non-greedy repetition.</source>
          <target state="translated">POSIX検索および一致関数は、非欲張り反復演算子を適切にサポートしていません（&lt;a href=&quot;regexp-special#Regexp-Special&quot;&gt;非欲張りを&lt;/a&gt;参照）。これは、POSIXバックトラッキングが貪欲でない繰り返しのセマンティクスと競合するためです。</target>
        </trans-unit>
        <trans-unit id="975c0dbec8418cefac1c26cea47400958485a24f" translate="yes" xml:space="preserve">
          <source>The Region</source>
          <target state="translated">地域</target>
        </trans-unit>
        <trans-unit id="7f0920ea8dce344ced982af555e68f1fcc8fb02c" translate="yes" xml:space="preserve">
          <source>The Thread List</source>
          <target state="translated">スレッド一覧</target>
        </trans-unit>
        <trans-unit id="0b3b10e0747a616770fcc68ce9c42692021f69c3" translate="yes" xml:space="preserve">
          <source>The Top Level of Mode Line Control</source>
          <target state="translated">モードライン制御のトップレベル</target>
        </trans-unit>
        <trans-unit id="0f9f110896a8003386b884af9710262024fcd3bd" translate="yes" xml:space="preserve">
          <source>The Tramp Manual</source>
          <target state="translated">トランプマニュアル</target>
        </trans-unit>
        <trans-unit id="3d449198e0052c8b8dae47f7157c82ee61e7dd1a" translate="yes" xml:space="preserve">
          <source>The WebKit component.</source>
          <target state="translated">WebKitコンポーネントです。</target>
        </trans-unit>
        <trans-unit id="c97106172cf0fee2d4e25fbcc7b9b6c23c939797" translate="yes" xml:space="preserve">
          <source>The Window Start and End Positions</source>
          <target state="translated">ウィンドウの開始位置と終了位置</target>
        </trans-unit>
        <trans-unit id="00312f9c47a904c7e40141a60dd85f937febefae" translate="yes" xml:space="preserve">
          <source>The X Window System defines three other modifier bits that can be set in a character: &lt;em&gt;hyper&lt;/em&gt;, &lt;em&gt;super&lt;/em&gt; and &lt;em&gt;alt&lt;/em&gt;. The syntaxes for these bits are &amp;lsquo;</source>
          <target state="translated">X Window Systemは、文字に設定できる他の3つの修飾子ビット（&lt;em&gt;hyper&lt;/em&gt;、&lt;em&gt;super&lt;/em&gt;、&lt;em&gt;alt）を&lt;/em&gt;定義します。これらのビットの構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="239e6f6db120d4b7497121d69c34a71f64242413" translate="yes" xml:space="preserve">
          <source>The Zen of Buffer Display</source>
          <target state="translated">バッファ表示の禅</target>
        </trans-unit>
        <trans-unit id="d1c7be134e2b1ac53a747c65f17468ae85a6e82a" translate="yes" xml:space="preserve">
          <source>The abnormal hook &lt;code&gt;window-size-change-functions&lt;/code&gt; (see &lt;a href=&quot;window-hooks#Window-Hooks&quot;&gt;Window Hooks&lt;/a&gt;) tracks all changes of the inner size of a frame including those induced by request of the window-system or window manager. To rule out false positives that might occur when changing only the sizes of a frame&amp;rsquo;s windows without actually changing the size of the inner frame, use the following function.</source>
          <target state="translated">異常なフック &lt;code&gt;window-size-change-functions&lt;/code&gt; （&lt;a href=&quot;window-hooks#Window-Hooks&quot;&gt;Window Hooksを&lt;/a&gt;参照）は、ウィンドウシステムまたはウィンドウマネージャーの要求によって引き起こされたものを含む、フレームの内部サイズのすべての変更を追跡します。内部フレームのサイズを実際に変更せずに、フレームのウィンドウのサイズのみを変更した場合に発生する可能性のある誤検知を除外するには、次の関数を使用します。</target>
        </trans-unit>
        <trans-unit id="acb5f2e3b961983ad080c933704bf1921460d37a" translate="yes" xml:space="preserve">
          <source>The above commands use the function &lt;code&gt;pop-to-buffer&lt;/code&gt;, which flexibly displays a buffer in some window and selects that window for editing. In turn, &lt;code&gt;pop-to-buffer&lt;/code&gt; uses &lt;code&gt;display-buffer&lt;/code&gt; for displaying the buffer. Hence, all the variables affecting &lt;code&gt;display-buffer&lt;/code&gt; will affect it as well. See &lt;a href=&quot;choosing-window#Choosing-Window&quot;&gt;Choosing Window&lt;/a&gt;, for the documentation of &lt;code&gt;display-buffer&lt;/code&gt;.</source>
          <target state="translated">上記のコマンドは、関数 &lt;code&gt;pop-to-buffer&lt;/code&gt; を使用します。この関数は、一部のウィンドウにバッファーを柔軟に表示し、編集するウィンドウを選択します。次に、 &lt;code&gt;pop-to-buffer&lt;/code&gt; は &lt;code&gt;display-buffer&lt;/code&gt; を使用してバッファーを表示します。したがって、 &lt;code&gt;display-buffer&lt;/code&gt; に影響を与えるすべての変数もそれに影響を与えます。 &lt;code&gt;display-buffer&lt;/code&gt; のドキュメントについては、「&lt;a href=&quot;choosing-window#Choosing-Window&quot;&gt;ウィンドウの選択」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cd813c20f1c6269cd7421cd80bccde0cf42a41bb" translate="yes" xml:space="preserve">
          <source>The above display conventions apply even when there is a display table, for any character whose entry in the active display table is &lt;code&gt;nil&lt;/code&gt;. Thus, when you set up a display table, you need only specify the characters for which you want special behavior.</source>
          <target state="translated">上記の表示規則は、表示テーブルがある場合でも、アクティブな表示テーブルのエントリが &lt;code&gt;nil&lt;/code&gt; であるすべての文字に適用されます。したがって、表示テーブルを設定するときは、特別な動作が必要な文字を指定するだけで済みます。</target>
        </trans-unit>
        <trans-unit id="1790de9a4c228ec0f7e88481efc2c65fd587eb7a" translate="yes" xml:space="preserve">
          <source>The above example would allow the conclusion that users customize &lt;code&gt;display-buffer-alist&lt;/code&gt; for the sole purpose to overrule the &lt;var&gt;action&lt;/var&gt; argument chosen by applications. Such a conclusion would be incorrect. &lt;code&gt;display-buffer-alist&lt;/code&gt; is the standard option for users to direct the course of display of specific buffers in a preferred way regardless of whether the display is also guided by an &lt;var&gt;action&lt;/var&gt; argument.</source>
          <target state="translated">上記の例では、ユーザーが &lt;code&gt;display-buffer-alist&lt;/code&gt; をカスタマイズして、アプリケーションによって選択された &lt;var&gt;action&lt;/var&gt; 引数を無効にするという結論を下すことができます。そのような結論は正しくないでしょう。 &lt;code&gt;display-buffer-alist&lt;/code&gt; は、表示が &lt;var&gt;action&lt;/var&gt; 引数によってガイドされているかどうかに関係なく、ユーザーが特定のバッファーの表示コースを優先的に指示するための標準オプションです。</target>
        </trans-unit>
        <trans-unit id="aeb0dafcf8103ae88a77afae29bde5756ca7c094" translate="yes" xml:space="preserve">
          <source>The above feature works by calling an external executable (e.g., &lt;code&gt;gzip&lt;/code&gt;). Emacs can also be compiled with support for built-in decompression using the zlib library, which is faster than calling an external program.</source>
          <target state="translated">上記の機能は、外部実行可能ファイル（ &lt;code&gt;gzip&lt;/code&gt; など）を呼び出すことで機能します。Emacsは、外部プログラムを呼び出すよりも高速なzlibライブラリーを使用した組み込みの解凍をサポートしてコンパイルすることもできます。</target>
        </trans-unit>
        <trans-unit id="387f04e2a1f6936573fe28b42d630e5f93dc27a4" translate="yes" xml:space="preserve">
          <source>The above grammar does not explicitly mention the syntax of function calls: SMIE will automatically allow any sequence of sexps, such as identifiers, balanced parentheses, or &lt;code&gt;begin ... end&lt;/code&gt; blocks to appear anywhere anyway.</source>
          <target state="translated">上記の文法では、関数呼び出しの構文について明示的に言及していません。SMIEは、識別子、バランスの取れた括弧、または &lt;code&gt;begin ... end&lt;/code&gt; ブロックなどのsexpの任意のシーケンスをとにかくどこにでも自動的に表示できるようにします。</target>
        </trans-unit>
        <trans-unit id="deec33282919bd446ca8d3ce98c567ff797c98f6" translate="yes" xml:space="preserve">
          <source>The above method with the additional argument is usually best, because it allows callers to say &amp;ldquo;treat this call as interactive&amp;rdquo;. But you can also do the job by testing &lt;code&gt;called-interactively-p&lt;/code&gt;.</source>
          <target state="translated">呼び出し元が「この呼び出しを対話型として扱う」と言うことができるため、引数を追加した上記の方法が通常は最適です。ただし、 &lt;code&gt;called-interactively-p&lt;/code&gt; をテストして作業を行うこともできます。</target>
        </trans-unit>
        <trans-unit id="54cfffd5c06cc33525dd38f3e201f1461707ae99" translate="yes" xml:space="preserve">
          <source>The above three arguments &lt;var&gt;init-value&lt;/var&gt;, &lt;var&gt;lighter&lt;/var&gt;, and &lt;var&gt;keymap&lt;/var&gt; can be (partially) omitted when &lt;var&gt;keyword-args&lt;/var&gt; are used. The &lt;var&gt;keyword-args&lt;/var&gt; consist of keywords followed by corresponding values. A few keywords have special meanings:</source>
          <target state="translated">上記の3つの引数 &lt;var&gt;init-value&lt;/var&gt; 、 &lt;var&gt;lighter&lt;/var&gt; 、および &lt;var&gt;keymap&lt;/var&gt; は、 &lt;var&gt;keyword-args&lt;/var&gt; を使用する場合、（部分的に）省略できます。 &lt;var&gt;keyword-args&lt;/var&gt; 対応する値が続くキーワードで構成されています。いくつかのキーワードには特別な意味があります。</target>
        </trans-unit>
        <trans-unit id="912c11980ecb67df3dcc61f5360f26f85c672e6b" translate="yes" xml:space="preserve">
          <source>The above variables actually take effect via the function &lt;code&gt;set-window-buffer&lt;/code&gt; (see &lt;a href=&quot;buffers-and-windows#Buffers-and-Windows&quot;&gt;Buffers and Windows&lt;/a&gt;), which calls &lt;code&gt;set-window-fringes&lt;/code&gt; as a subroutine. If you change one of these variables, the fringe display is not updated in existing windows showing the buffer, unless you call &lt;code&gt;set-window-buffer&lt;/code&gt; again in each affected window. You can also use &lt;code&gt;set-window-fringes&lt;/code&gt; to control the fringe display in individual windows.</source>
          <target state="translated">上記の変数は、実際には関数 &lt;code&gt;set-window-buffer&lt;/code&gt; （&lt;a href=&quot;buffers-and-windows#Buffers-and-Windows&quot;&gt;Buffers and Windowsを&lt;/a&gt;参照）を介して有効になります。この関数は、サブルーチンとして &lt;code&gt;set-window-fringes&lt;/code&gt; を呼び出します。これらの変数の1つを変更した場合、影響を受ける各 &lt;code&gt;set-window-buffer&lt;/code&gt; 再度呼び出さない限り、バッファを表示している既存のウィンドウでフリンジ表示は更新されません。 &lt;code&gt;set-window-fringes&lt;/code&gt; を使用して、個々のウィンドウのフリンジ表示を制御することもできます。</target>
        </trans-unit>
        <trans-unit id="ca188b29b3bb57f7bcf3fb693861f1370085a8bf" translate="yes" xml:space="preserve">
          <source>The accepted &lt;var&gt;keyword&lt;/var&gt; values are &lt;code&gt;:bindtodevice&lt;/code&gt;, etc. For the complete list, see &lt;a href=&quot;network-options#Network-Options&quot;&gt;Network Options&lt;/a&gt;. This form returns non-&lt;code&gt;nil&lt;/code&gt; if that particular network option is supported by &lt;code&gt;make-network-process&lt;/code&gt; (or &lt;code&gt;set-network-process-option&lt;/code&gt;).</source>
          <target state="translated">受け入れられる &lt;var&gt;keyword&lt;/var&gt; 値は &lt;code&gt;:bindtodevice&lt;/code&gt; などです。完全なリストについては、&lt;a href=&quot;network-options#Network-Options&quot;&gt;ネットワークオプションを&lt;/a&gt;参照してください。その特定のネットワークオプションが &lt;code&gt;make-network-process&lt;/code&gt; （または &lt;code&gt;set-network-process-option&lt;/code&gt; ）でサポートされている場合、このフォームは非 &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="cc9760775537207d1cf5d5aa94d98184e1eb1a24" translate="yes" xml:space="preserve">
          <source>The action alist passed in each function call is:</source>
          <target state="translated">各関数呼び出しで渡されるアクションのリストは</target>
        </trans-unit>
        <trans-unit id="4c1e9cf149ace88e3f3737c4a06b35438f05f558" translate="yes" xml:space="preserve">
          <source>The action code tells</source>
          <target state="translated">アクションコードは</target>
        </trans-unit>
        <trans-unit id="20f7f463b94870cfb1b047961088cae0d326ca22" translate="yes" xml:space="preserve">
          <source>The actual completion is done by passing the completion table &lt;var&gt;collection&lt;/var&gt; and the completion predicate &lt;var&gt;predicate&lt;/var&gt; to the function &lt;code&gt;try-completion&lt;/code&gt; (see &lt;a href=&quot;basic-completion#Basic-Completion&quot;&gt;Basic Completion&lt;/a&gt;). This happens in certain commands bound in the local keymaps used for completion. Some of these commands also call &lt;code&gt;test-completion&lt;/code&gt;. Thus, if &lt;var&gt;predicate&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, it should be compatible with &lt;var&gt;collection&lt;/var&gt; and &lt;code&gt;completion-ignore-case&lt;/code&gt;. See &lt;a href=&quot;basic-completion#Definition-of-test_002dcompletion&quot;&gt;Definition of test-completion&lt;/a&gt;.</source>
          <target state="translated">実際の完了は、完了テーブル &lt;var&gt;collection&lt;/var&gt; と完了述語 &lt;var&gt;predicate&lt;/var&gt; を関数 &lt;code&gt;try-completion&lt;/code&gt; に渡すことによって行われます（&lt;a href=&quot;basic-completion#Basic-Completion&quot;&gt;基本的な完了を&lt;/a&gt;参照）。これは、完了に使用されるローカルキーマップにバインドされた特定のコマンドで発生します。これらのコマンドの一部は、 &lt;code&gt;test-completion&lt;/code&gt; も呼び出します。したがって、 &lt;var&gt;predicate&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の場合は、 &lt;var&gt;collection&lt;/var&gt; および &lt;code&gt;completion-ignore-case&lt;/code&gt; と互換性がある必要があります。&lt;a href=&quot;basic-completion#Definition-of-test_002dcompletion&quot;&gt;テスト完了の定義を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d1af2bc35ffe0c2bc3b64bd633b7094bc586529d" translate="yes" xml:space="preserve">
          <source>The actual vertical scroll position must always correspond to an integral number of pixels, so the value you specify is rounded accordingly.</source>
          <target state="translated">実際の垂直スクロールの位置は常にピクセルの整数に対応していなければならないので、指定した値はそれに応じて丸められます。</target>
        </trans-unit>
        <trans-unit id="ff765a1d0b1ea170510397b3d6bdae6f65de5184" translate="yes" xml:space="preserve">
          <source>The address of the buffer contents. The buffer contents is a linear C array of &lt;code&gt;char&lt;/code&gt;, with the gap somewhere in its midst.</source>
          <target state="translated">バッファの内容のアドレス。バッファの内容は &lt;code&gt;char&lt;/code&gt; の線形C配列であり、その中間にギャップがあります。</target>
        </trans-unit>
        <trans-unit id="b3c2ee5327a92dfc5bf111a48a9aefa1920eaf43" translate="yes" xml:space="preserve">
          <source>The advantage of dynamic function loading is that loading the file should become faster. This is a good thing for a file which contains many separate user-callable functions, if using one of them does not imply you will probably also use the rest. A specialized mode which provides many keyboard commands often has that usage pattern: a user may invoke the mode, but use only a few of the commands it provides.</source>
          <target state="translated">動的関数の読み込みの利点は、ファイルの読み込みが速くなることです。これは、多くの個別のユーザ呼び出し可能な関数を含むファイルにとっては良いことですが、そのうちの一つを使っても残りの関数も使うことになるでしょう。多くのキーボードコマンドを提供する特殊なモードは、しばしばそのような使用パターンを持っています:ユーザはそのモードを呼び出すことができますが、それが提供するコマンドのうちのいくつかだけを使用します。</target>
        </trans-unit>
        <trans-unit id="d5619eed72157c4d0bdb07860d63c48de2da3d98" translate="yes" xml:space="preserve">
          <source>The advantage of this formulation is that it reuses the indentation of the previous &lt;code&gt;&quot;else&quot;&lt;/code&gt;, rather than going all the way back to the first &lt;code&gt;&quot;if&quot;&lt;/code&gt; of the sequence.</source>
          <target state="translated">この定式化の利点は、シーケンスの最初の &lt;code&gt;&quot;if&quot;&lt;/code&gt; に戻るのではなく、前の &lt;code&gt;&quot;else&quot;&lt;/code&gt; インデントを再利用することです。</target>
        </trans-unit>
        <trans-unit id="3a50be9f4a1773d19c2822e2848993b6a2da815f" translate="yes" xml:space="preserve">
          <source>The advantage of using this variable rather than an ordinary global variable is that the data will never carry over to a subsequent command invocation.</source>
          <target state="translated">通常のグローバル変数ではなく、この変数を使用する利点は、データが後続のコマンド呼び出しに持ち越されることがないことです。</target>
        </trans-unit>
        <trans-unit id="1596d1cec331c0a1119dda271b5137a09454b0dd" translate="yes" xml:space="preserve">
          <source>The alist containing the structured data that have been unpacked so far, or the entire structure being packed. You can use &lt;code&gt;bindat-get-field&lt;/code&gt; to access specific fields of this structure.</source>
          <target state="translated">これまでに解凍された構造化データ、またはパックされている構造体全体を含むリスト。あなたは使用することができます &lt;code&gt;bindat-get-field&lt;/code&gt; 、この構造のアクセス、特定の分野に。</target>
        </trans-unit>
        <trans-unit id="16a4156fb321a63923ec85058a36944c0a91c6f3" translate="yes" xml:space="preserve">
          <source>The alist describes which parameters were specified in &lt;var&gt;geom&lt;/var&gt;, and gives the values specified for them. Each element looks like &lt;code&gt;(&lt;var&gt;parameter&lt;/var&gt; . &lt;var&gt;value&lt;/var&gt;)&lt;/code&gt;. The possible &lt;var&gt;parameter&lt;/var&gt; values are &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, and &lt;code&gt;height&lt;/code&gt;.</source>
          <target state="translated">alistは、 &lt;var&gt;geom&lt;/var&gt; で指定されたパラメーターを記述し、それらに指定された値を示します。各要素は次のようになります &lt;code&gt;(&lt;var&gt;parameter&lt;/var&gt; . &lt;var&gt;value&lt;/var&gt;)&lt;/code&gt; 。可能な &lt;var&gt;parameter&lt;/var&gt; 値は、 &lt;code&gt;left&lt;/code&gt; 、 &lt;code&gt;top&lt;/code&gt; 、 &lt;code&gt;width&lt;/code&gt; 、 &lt;code&gt;height&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c733f98486863c87c8afe728430d26b6647157fa" translate="yes" xml:space="preserve">
          <source>The alist of this window&amp;rsquo;s parameters.</source>
          <target state="translated">このウィンドウのパラメータのリスト。</target>
        </trans-unit>
        <trans-unit id="4de99a71510486f7e37d746816616f03fc75f487" translate="yes" xml:space="preserve">
          <source>The alt modifier.</source>
          <target state="translated">alt修飾子です。</target>
        </trans-unit>
        <trans-unit id="c9957faf6d8ce383f9b22bb3d1e72f7bd208cd8d" translate="yes" xml:space="preserve">
          <source>The angle in degrees by which the x-axis of the ellipse is rotated relative to the x-axis of the current coordinate system.</source>
          <target state="translated">楕円の x 軸が現在の座標系の x 軸に対して回転する角度。</target>
        </trans-unit>
        <trans-unit id="6140640f4032f19682107247228755508d75322e" translate="yes" xml:space="preserve">
          <source>The answers and their meanings, even &amp;lsquo;</source>
          <target state="translated">答えとその意味、さらには '</target>
        </trans-unit>
        <trans-unit id="eb1ac55dfe1608150149494f5a53ac6108d010b5" translate="yes" xml:space="preserve">
          <source>The appearance of child frames is largely dependent on the parameters provided via &lt;var&gt;alist&lt;/var&gt;. It is advisable to use at least ratios to specify the size (see &lt;a href=&quot;size-parameters#Size-Parameters&quot;&gt;Size Parameters&lt;/a&gt;) and the position (see &lt;a href=&quot;position-parameters#Position-Parameters&quot;&gt;Position Parameters&lt;/a&gt;) of the child frame, and to add a &lt;code&gt;keep-ratio&lt;/code&gt; parameter (see &lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;Frame Interaction Parameters&lt;/a&gt;), in order to make sure that the child frame remains visible. For other parameters that should be considered see &lt;a href=&quot;child-frames#Child-Frames&quot;&gt;Child Frames&lt;/a&gt;.</source>
          <target state="translated">子フレームの外観は、 &lt;var&gt;alist&lt;/var&gt; を介して提供されるパラメーターに大きく依存します。子フレームのサイズ（&lt;a href=&quot;size-parameters#Size-Parameters&quot;&gt;サイズパラメータを&lt;/a&gt;参照）と位置（&lt;a href=&quot;position-parameters#Position-Parameters&quot;&gt;位置パラメータを&lt;/a&gt;参照）を指定するために少なくとも比率を使用し、確実にするために &lt;code&gt;keep-ratio&lt;/code&gt; パラメータ（&lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;フレーム相互作用パラメータを&lt;/a&gt;参照）を追加することをお勧めします。子フレームは表示されたままです。考慮すべきその他のパラメータについては、&lt;a href=&quot;child-frames#Child-Frames&quot;&gt;子フレームを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="298a0fa20ea50d72583add29a3d5ae410ddedeac" translate="yes" xml:space="preserve">
          <source>The appearance of the keyword &lt;code&gt;&amp;amp;optional&lt;/code&gt; in the argument list indicates that the subsequent arguments may be omitted (omitted arguments default to &lt;code&gt;nil&lt;/code&gt;). Do not write &lt;code&gt;&amp;amp;optional&lt;/code&gt; when you call the function.</source>
          <target state="translated">引数リストにキーワード &lt;code&gt;&amp;amp;optional&lt;/code&gt; が表示されている場合は、後続の引数を省略できることを示しています（省略された引数のデフォルトは &lt;code&gt;nil&lt;/code&gt; です）。関数を呼び出すときに &lt;code&gt;&amp;amp;optional&lt;/code&gt; を記述しないでください。</target>
        </trans-unit>
        <trans-unit id="3f5c7ba81da02c1e205b368aaea8e197ad50a24b" translate="yes" xml:space="preserve">
          <source>The applicable methods are sorted into the order in which they will be combined. The method whose left-most argument specializer is the most specific one will come first in the order. (Specifying &lt;code&gt;:argument-precedence-order&lt;/code&gt; as part of &lt;code&gt;cl-defmethod&lt;/code&gt; overrides that, as described above.) If the method body calls &lt;code&gt;cl-call-next-method&lt;/code&gt;, the next most-specific method will run. If there are applicable &lt;code&gt;:around&lt;/code&gt; methods, the most-specific of them will run first; it should call &lt;code&gt;cl-call-next-method&lt;/code&gt; to run any of the less specific &lt;code&gt;:around&lt;/code&gt; methods. Next, the &lt;code&gt;:before&lt;/code&gt; methods run in the order of their specificity, followed by the primary method, and lastly the &lt;code&gt;:after&lt;/code&gt; methods in the reverse order of their specificity.</source>
          <target state="translated">該当する方法は、組み合わせる順序で並べ替えられます。左端の引数スペシャライザーが最も具体的なメソッドが最初になります。 （ &lt;code&gt;cl-defmethod&lt;/code&gt; の一部として &lt;code&gt;:argument-precedence-order&lt;/code&gt; を指定すると、上記のようにそれがオーバーライドされます。）メソッド本体が &lt;code&gt;cl-call-next-method&lt;/code&gt; を呼び出すと、次に最も具体的なメソッドが実行されます。該当する &lt;code&gt;:around&lt;/code&gt; メソッドがある場合は、最も具体的なメソッドが最初に実行されます。それが呼び出す必要があり &lt;code&gt;cl-call-next-method&lt;/code&gt; 以下の特定のいずれかを実行するために &lt;code&gt;:around&lt;/code&gt; メソッドを。次に、 &lt;code&gt;:before&lt;/code&gt; メソッドが特定の順序で実行され、次にプライマリメソッドが実行され、最後に &lt;code&gt;:after&lt;/code&gt; メソッドの特異性の逆順。</target>
        </trans-unit>
        <trans-unit id="c76f854944de42c1326dc55d5c64da71693c76d4" translate="yes" xml:space="preserve">
          <source>The appropriate comment syntax settings for C++ can be as follows:</source>
          <target state="translated">C++の適切なコメント構文の設定は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7af380f8e979eb018fdd3697719035381131cdb4" translate="yes" xml:space="preserve">
          <source>The argument &lt;code&gt;name&lt;/code&gt; can also be a predicate function. The predicate is called for every directory examined by the function, starting from &lt;var&gt;file&lt;/var&gt; (even if &lt;var&gt;file&lt;/var&gt; is not a directory). It is called with one argument (the file or directory) and should return non-&lt;code&gt;nil&lt;/code&gt; if that directory is the one it is looking for.</source>
          <target state="translated">引数 &lt;code&gt;name&lt;/code&gt; は、述語関数にすることもできます。述語は、 &lt;var&gt;file&lt;/var&gt; から開始して、関数によって検査されるすべてのディレクトリに対して呼び出されます（ &lt;var&gt;file&lt;/var&gt; がディレクトリでない場合でも）。1つの引数（ファイルまたはディレクトリ）で呼び出され、そのディレクトリが探しているディレクトリである場合は非 &lt;code&gt;nil&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="3ca220a7d203286861c22592355a8976c8e1dc15" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;accept-defaults&lt;/var&gt; controls checking for default bindings, as in &lt;code&gt;lookup-key&lt;/code&gt; (above).</source>
          <target state="translated">引数 &lt;var&gt;accept-defaults&lt;/var&gt; は、 &lt;code&gt;lookup-key&lt;/code&gt; （上記）のように、デフォルトのバインディングのチェックを制御します。</target>
        </trans-unit>
        <trans-unit id="7bd635c6abdd8e152863881cdc6fa5ff15a5ff9d" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;accept-defaults&lt;/var&gt; controls checking for default bindings, as in &lt;code&gt;lookup-key&lt;/code&gt; (see &lt;a href=&quot;functions-for-key-lookup#Functions-for-Key-Lookup&quot;&gt;Functions for Key Lookup&lt;/a&gt;).</source>
          <target state="translated">引数 &lt;var&gt;accept-defaults&lt;/var&gt; は、 &lt;code&gt;lookup-key&lt;/code&gt; の場合と同様に、デフォルトのバインディングのチェックを制御します（&lt;a href=&quot;functions-for-key-lookup#Functions-for-Key-Lookup&quot;&gt;キールックアップの関数を参照&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="d29509ca5aacfab823a57d08757922aaad71cdd0" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;action&lt;/var&gt; can also have a non-&lt;code&gt;nil&lt;/code&gt;, non-list value. This has the special meaning that the buffer should be displayed in a window other than the selected one, even if the selected window is already displaying it. If called interactively with a prefix argument, &lt;var&gt;action&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;. Lisp programs should always supply a list value.</source>
          <target state="translated">引数 &lt;var&gt;action&lt;/var&gt; は、非 &lt;code&gt;nil&lt;/code&gt; 、非リスト値を持つこともできます。これは、選択したウィンドウにすでにバッファが表示されている場合でも、選択したウィンドウ以外のウィンドウにバッファを表示する必要があるという特別な意味があります。プレフィックス引数を使用してインタラクティブに呼び出された場合、 &lt;var&gt;action&lt;/var&gt; は &lt;code&gt;t&lt;/code&gt; です。Lispプログラムは常にリスト値を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="1beb69cfa7b071babf9978632af37dd09371bacd" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;actor&lt;/var&gt; says how to act on the answers that the user gives. It should be a function of one argument, and it is called with each object that the user says yes for. Its argument is always an object obtained from &lt;var&gt;list&lt;/var&gt;.</source>
          <target state="translated">引数 &lt;var&gt;actor&lt;/var&gt; は、ユーザーが与える答えに基づいて行動する方法を言います。これは1つの引数の関数である必要があり、ユーザーが「はい」と言ったオブジェクトごとに呼び出されます。その引数は常に &lt;var&gt;list&lt;/var&gt; から取得したオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="ee17f20b9e88dfb3aa41595d461a73079a3e5d43" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;align&lt;/var&gt; specifies the positioning of the bitmap relative to the range of rows where it is used; the default is to center the bitmap. The allowed values are &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;center&lt;/code&gt;, or &lt;code&gt;bottom&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;var&gt;align&lt;/var&gt; は、ビットマップが使用される行の範囲に対するビットマップの位置を指定します。デフォルトでは、ビットマップを中央に配置します。許可される値は、 &lt;code&gt;top&lt;/code&gt; 、 &lt;code&gt;center&lt;/code&gt; 、または &lt;code&gt;bottom&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7753c98dbb86ce3ef5fdc83ef2b7a29620966442" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;area&lt;/var&gt; specifies whether to put the image in a margin. If it is &lt;code&gt;left-margin&lt;/code&gt;, the image appears in the left margin; &lt;code&gt;right-margin&lt;/code&gt; specifies the right margin. If &lt;var&gt;area&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt; or omitted, the image is displayed at point within the buffer&amp;rsquo;s text.</source>
          <target state="translated">引数 &lt;var&gt;area&lt;/var&gt; は、画像を余白に配置するかどうかを指定します。それがある場合は &lt;code&gt;left-margin&lt;/code&gt; 、画像は左マージンに表示されます。 &lt;code&gt;right-margin&lt;/code&gt; は右マージンを指定します。場合は &lt;var&gt;area&lt;/var&gt; ある &lt;code&gt;nil&lt;/code&gt; または省略し、画像をバッファのテキスト内のポイントで表示されます。</target>
        </trans-unit>
        <trans-unit id="d364497680dc1a96c19f79375cbd6751df8d0fba" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;args&lt;/var&gt; is a list of keyword/argument pairs. The following keywords are accepted:</source>
          <target state="translated">引数 &lt;var&gt;args&lt;/var&gt; は、キーワードと引数のペアのリストです。次のキーワードが受け入れられます。</target>
        </trans-unit>
        <trans-unit id="edb4e5ef6ed5ceb13b27dd15b0d01fa920d79d9f" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;auto-mode-list&lt;/var&gt; is a list of regular expressions to add to the variable &lt;code&gt;auto-mode-alist&lt;/code&gt;. They are added by the execution of the &lt;code&gt;define-generic-mode&lt;/code&gt; form, not by expanding the macro call.</source>
          <target state="translated">引数 &lt;var&gt;auto-mode-list&lt;/var&gt; は、変数 &lt;code&gt;auto-mode-alist&lt;/code&gt; に追加する正規表現のリストです。これらは、マクロ呼び出しを拡張することによってではなく、 &lt;code&gt;define-generic-mode&lt;/code&gt; フォームの実行によって追加されます。</target>
        </trans-unit>
        <trans-unit id="9ee6a087463d0ff4f764f5b9d27cda3abf523b0f" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;bits&lt;/var&gt; specifies the image to use. It should be either a string or a vector of integers, where each element (an integer) corresponds to one row of the bitmap. Each bit of an integer corresponds to one pixel of the bitmap, where the low bit corresponds to the rightmost pixel of the bitmap. (Note that this order of bits is opposite of the order in XBM images; see &lt;a href=&quot;xbm-images#XBM-Images&quot;&gt;XBM Images&lt;/a&gt;.)</source>
          <target state="translated">引数 &lt;var&gt;bits&lt;/var&gt; は、使用する画像を指定します。文字列または整数のベクトルのいずれかである必要があります。各要素（整数）はビットマップの1行に対応します。整数の各ビットはビットマップの1ピクセルに対応し、下位ビットはビットマップの右端のピクセルに対応します。（このビットの順序は、XBMイメージの順序とは逆であることに注意してください&lt;a href=&quot;xbm-images#XBM-Images&quot;&gt;。XBMイメージを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="9b233061a24b93e6081107b51828a209e52ef880" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;buf&lt;/var&gt; can be a &lt;code&gt;NULL&lt;/code&gt; pointer, in which case the function stores in &lt;code&gt;*&lt;var&gt;len&lt;/var&gt;&lt;/code&gt; the number of bytes required for storing the contents of &lt;var&gt;arg&lt;/var&gt;, and returns &lt;code&gt;true&lt;/code&gt;. This is how you can determine the size of &lt;var&gt;buf&lt;/var&gt; needed to store a particular string: first call &lt;code&gt;copy_string_contents&lt;/code&gt; with &lt;code&gt;NULL&lt;/code&gt; as &lt;var&gt;buf&lt;/var&gt;, then allocate enough memory to hold the number of bytes stored by the function in &lt;code&gt;*&lt;var&gt;len&lt;/var&gt;&lt;/code&gt;, and call the function again with non-&lt;code&gt;NULL&lt;/code&gt;&lt;var&gt;buf&lt;/var&gt; to actually perform the text copying.</source>
          <target state="translated">引数 &lt;var&gt;buf&lt;/var&gt; は &lt;code&gt;NULL&lt;/code&gt; ポインターにすることができます。その場合、関数は &lt;var&gt;arg&lt;/var&gt; の内容を格納するために必要なバイト数を &lt;code&gt;*&lt;var&gt;len&lt;/var&gt;&lt;/code&gt; に格納し、 &lt;code&gt;true&lt;/code&gt; を返します。これは、特定の文字列を格納するために必要な &lt;var&gt;buf&lt;/var&gt; のサイズを決定する方法です。最初に &lt;var&gt;buf&lt;/var&gt; として &lt;code&gt;NULL&lt;/code&gt; を指定して &lt;code&gt;copy_string_contents&lt;/code&gt; を呼び出し、次に &lt;code&gt;*&lt;var&gt;len&lt;/var&gt;&lt;/code&gt; &lt;var&gt;len&lt;/var&gt; の関数によって格納されたバイト数を保持するのに十分なメモリを割り当て、nonを使用して関数を再度呼び出します。 - &lt;code&gt;NULL&lt;/code&gt; の &lt;var&gt;buf&lt;/var&gt; 実際にテキストコピーを実行します。</target>
        </trans-unit>
        <trans-unit id="c62f796ca367437edd9bbfec13b2cb245b68f3a0" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;buffer-or-name&lt;/var&gt; specifies the temporary buffer. It can be either a buffer, which must already exist, or a string, in which case a buffer of that name is created, if necessary. The buffer is marked as unmodified and read-only when &lt;code&gt;with-temp-buffer-window&lt;/code&gt; exits.</source>
          <target state="translated">引数 &lt;var&gt;buffer-or-name&lt;/var&gt; は、一時バッファーを指定します。すでに存在している必要があるバッファ、または文字列のいずれかである可能性があります。その場合、必要に応じて、その名前のバッファが作成されます。 &lt;code&gt;with-temp-buffer-window&lt;/code&gt; が終了すると、バッファは変更されておらず、読み取り専用としてマークされます。</target>
        </trans-unit>
        <trans-unit id="a1c5d94728b5d5501baf9d04c247ab6731f26635" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;character-set&lt;/var&gt; is a string, like the inside of a &amp;lsquo;</source>
          <target state="translated">引数の &lt;var&gt;character-set&lt;/var&gt; は、 'の内部のような文字列です。</target>
        </trans-unit>
        <trans-unit id="454b60cd7a8b9522c076db2ecfb6a4f1bed5da38" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;color&lt;/var&gt; must be a valid color name.</source>
          <target state="translated">引数 &lt;var&gt;color&lt;/var&gt; は、有効な色名である必要があります。</target>
        </trans-unit>
        <trans-unit id="18f7ad6dac6cb9de707886ec8955eea2d280c1e3" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;command-loop&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, means that this key sequence is being read by something that will read commands one after another. It should be &lt;code&gt;nil&lt;/code&gt; if the caller will read just one key sequence.</source>
          <target state="translated">引数 &lt;var&gt;command-loop&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、このキーシーケンスがコマンドを次々に読み取る何かによって読み取られていることを意味します。呼び出し元がキーシーケンスを1つだけ読み取る場合は、 &lt;code&gt;nil&lt;/code&gt; にする必要があります。</target>
        </trans-unit>
        <trans-unit id="73cd856bd4485d69fb41a49bb978b8e54f955de7" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;command&lt;/var&gt; can be any object; it is compared with all keymap entries using &lt;code&gt;eq&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;var&gt;command&lt;/var&gt; は任意のオブジェクトにすることができます。 &lt;code&gt;eq&lt;/code&gt; を使用してすべてのキーマップエントリと比較されます。</target>
        </trans-unit>
        <trans-unit id="c292ebda07b62fafda1bd9dcde58aac39ae09123" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;comment-list&lt;/var&gt; is a list in which each element is either a character, a string of one or two characters, or a cons cell. A character or a string is set up in the mode&amp;rsquo;s syntax table as a comment starter. If the entry is a cons cell, the &lt;small&gt;CAR&lt;/small&gt; is set up as a comment starter and the &lt;small&gt;CDR&lt;/small&gt; as a comment ender. (Use &lt;code&gt;nil&lt;/code&gt; for the latter if you want comments to end at the end of the line.) Note that the syntax table mechanism has limitations about what comment starters and enders are actually possible. See &lt;a href=&quot;syntax-tables#Syntax-Tables&quot;&gt;Syntax Tables&lt;/a&gt;.</source>
          <target state="translated">引数 &lt;var&gt;comment-list&lt;/var&gt; は、各要素が1文字、1文字または2文字の文字列、またはconsセルのいずれかであるリストです。文字または文字列は、コメントスターターとしてモードの構文テーブルに設定されます。エントリがconsセルの場合、&lt;small&gt;CAR&lt;/small&gt;はコメントスターターとして設定され、&lt;small&gt;CDR&lt;/small&gt;はコメントエンダーとして設定されます。（コメントを行の終わりで終了する場合は、後者に &lt;code&gt;nil&lt;/code&gt; を使用します。）構文テーブルメカニズムには、実際に可能なコメントのスターターとエンダーに関する制限があることに注意してください。&lt;a href=&quot;syntax-tables#Syntax-Tables&quot;&gt;構文表を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="00acfc829089029b9f202f10adf5992c457658f8" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;count&lt;/var&gt; is a repeat count; &lt;var&gt;kbdmacro&lt;/var&gt; is executed that many times. If &lt;var&gt;count&lt;/var&gt; is omitted or &lt;code&gt;nil&lt;/code&gt;, &lt;var&gt;kbdmacro&lt;/var&gt; is executed once. If it is 0, &lt;var&gt;kbdmacro&lt;/var&gt; is executed over and over until it encounters an error or a failing search.</source>
          <target state="translated">引数 &lt;var&gt;count&lt;/var&gt; は繰り返しカウントです。 &lt;var&gt;kbdmacro&lt;/var&gt; は何度も実行されます。 &lt;var&gt;count&lt;/var&gt; を省略した場合、または &lt;code&gt;nil&lt;/code&gt; の場合、 &lt;var&gt;kbdmacro&lt;/var&gt; が1回実行されます。 0の場合、エラーまたは検索の失敗が発生するまで、 &lt;var&gt;kbdmacro&lt;/var&gt; が繰り返し実行されます。</target>
        </trans-unit>
        <trans-unit id="8c7ff309333d395240c83333e112d50cc4709c16" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;current-group&lt;/var&gt; is a flag that makes a difference when you are running a job-control shell as an Emacs subprocess. If it is non-&lt;code&gt;nil&lt;/code&gt;, then the signal is sent to the current process-group of the terminal that Emacs uses to communicate with the subprocess. If the process is a job-control shell, this means the shell&amp;rsquo;s current subjob. If &lt;var&gt;current-group&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, the signal is sent to the process group of the immediate subprocess of Emacs. If the subprocess is a job-control shell, this is the shell itself. If &lt;var&gt;current-group&lt;/var&gt; is &lt;code&gt;lambda&lt;/code&gt;, the signal is sent to the process-group that owns the terminal, but only if it is not the shell itself.</source>
          <target state="translated">引数 &lt;var&gt;current-group&lt;/var&gt; は、ジョブ制御シェルをEmacsサブプロセスとして実行しているときに違いを生むフラグです。それは非ある場合に &lt;code&gt;nil&lt;/code&gt; 、その後信号はEmacsがサブプロセスとの通信に使用する端末の現在のプロセス・グループに送信されます。プロセスがジョブ制御シェルの場合、これはシェルの現在のサブジョブを意味します。場合 &lt;var&gt;current-group&lt;/var&gt; ある &lt;code&gt;nil&lt;/code&gt; 、信号のEmacsの即時のサブプロセスのプロセス・グループに送信されます。サブプロセスがジョブ制御シェルの場合、これはシェル自体です。場合は &lt;var&gt;current-group&lt;/var&gt; ある &lt;code&gt;lambda&lt;/code&gt; 、信号は、端末を所有しているが、それは、シェルそのものではない場合にのみ、プロセス・グループに送信されます。</target>
        </trans-unit>
        <trans-unit id="d3941ef4572aafabe4d82a914cd588f566cf28f8" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;data&lt;/var&gt; is a way to arrange for arbitrary additional data to be passed to &lt;var&gt;func&lt;/var&gt; when it is called. Whatever pointer is passed to &lt;code&gt;make_function&lt;/code&gt; will be passed unaltered to &lt;var&gt;func&lt;/var&gt;.</source>
          <target state="translated">引数 &lt;var&gt;data&lt;/var&gt; は、呼び出されたときに任意の追加データが &lt;var&gt;func&lt;/var&gt; に渡されるように調整する方法です。 &lt;code&gt;make_function&lt;/code&gt; に渡されるポインタはすべて、変更されずに &lt;var&gt;func&lt;/var&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="b7de2b6cb91524eff278a8127fa1412f99cec41e" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;default&lt;/var&gt; specifies default values to make available through the history commands. It should be a string, a list of strings, or &lt;code&gt;nil&lt;/code&gt;. The string or strings become the minibuffer&amp;rsquo;s &amp;ldquo;future history&amp;rdquo;, available to the user with</source>
          <target state="translated">引数 &lt;var&gt;default&lt;/var&gt; は、historyコマンドで使用できるようにするデフォルト値を指定します。文字列、文字列のリスト、または &lt;code&gt;nil&lt;/code&gt; である必要があります。1つまたは複数の文字列がミニバッファの「将来の履歴」になり、ユーザーは次のユーザーが利用できます。</target>
        </trans-unit>
        <trans-unit id="0fd8a73b42de8615825093fdcc1004c92eed7544" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;default&lt;/var&gt; specifies what to return if the user enters null input. It can be a symbol, a string or a list of strings. If it is a string, &lt;code&gt;read-command&lt;/code&gt; interns it before returning it. If it is a list, &lt;code&gt;read-command&lt;/code&gt; interns the first element of this list. If &lt;var&gt;default&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, that means no default has been specified; then if the user enters null input, the return value is &lt;code&gt;(intern &quot;&quot;)&lt;/code&gt;, that is, a symbol whose name is an empty string, and whose printed representation is &lt;code&gt;##&lt;/code&gt; (see &lt;a href=&quot;symbol-type#Symbol-Type&quot;&gt;Symbol Type&lt;/a&gt;).</source>
          <target state="translated">引数 &lt;var&gt;default&lt;/var&gt; は、ユーザーがnull入力を入力した場合に何を返すかを指定します。記号、文字列、または文字列のリストにすることができます。文字列の場合、 &lt;code&gt;read-command&lt;/code&gt; それを返す前にインターンします。リストの場合、 &lt;code&gt;read-command&lt;/code&gt; はこのリストの最初の要素をインターンします。 &lt;var&gt;default&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; の場合、デフォルトが指定されていないことを意味します。次に、ユーザーがnull入力を入力すると、戻り値は &lt;code&gt;(intern &quot;&quot;)&lt;/code&gt; です。つまり、名前が空の文字列で、出力表現が &lt;code&gt;##&lt;/code&gt; の&lt;a href=&quot;symbol-type#Symbol-Type&quot;&gt;シンボル&lt;/a&gt;です（シンボルタイプを参照）。</target>
        </trans-unit>
        <trans-unit id="4c97f0e8be6d0008a7faafdfd445d05e4a3215d0" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;directory&lt;/var&gt; specifies the directory to use for completing relative file names. It should be an absolute directory name. If the variable &lt;code&gt;insert-default-directory&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, &lt;var&gt;directory&lt;/var&gt; is also inserted in the minibuffer as initial input. It defaults to the current buffer&amp;rsquo;s value of &lt;code&gt;default-directory&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;var&gt;directory&lt;/var&gt; は、相対ファイル名を完成させるために使用するディレクトリを指定します。絶対ディレクトリ名である必要があります。変数 &lt;code&gt;insert-default-directory&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の場合、 &lt;var&gt;directory&lt;/var&gt; も初期入力としてミニバッファに挿入されます。デフォルトでは、現在のバッファの &lt;code&gt;default-directory&lt;/code&gt; の値になります。</target>
        </trans-unit>
        <trans-unit id="eac6e77f50cc69887c03e5e7a9a7a83098c352ec" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;doc&lt;/var&gt; specifies the documentation string for the variable.</source>
          <target state="translated">引数 &lt;var&gt;doc&lt;/var&gt; は、変数のドキュメント文字列を指定します。</target>
        </trans-unit>
        <trans-unit id="7781b509373191b675fad7c943463743a5b15403" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;docstring&lt;/var&gt; is the documentation string for the function. Specifying the documentation string in the call to &lt;code&gt;autoload&lt;/code&gt; makes it possible to look at the documentation without loading the function&amp;rsquo;s real definition. Normally, this should be identical to the documentation string in the function definition itself. If it isn&amp;rsquo;t, the function definition&amp;rsquo;s documentation string takes effect when it is loaded.</source>
          <target state="translated">引数 &lt;var&gt;docstring&lt;/var&gt; は、関数のドキュメント文字列です。 &lt;code&gt;autoload&lt;/code&gt; の呼び出しでドキュメント文字列を指定すると、関数の実際の定義をロードせずにドキュメントを確認できます。通常、これは関数定義自体のドキュメント文字列と同じである必要があります。そうでない場合は、関数定義のドキュメント文字列がロードされたときに有効になります。</target>
        </trans-unit>
        <trans-unit id="04e091f63b7fbae98fa99c0bac21a5a178106ee2" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;docstring&lt;/var&gt; specifies the documentation string for the function. It should be either an</source>
          <target state="translated">引数 &lt;var&gt;docstring&lt;/var&gt; は、関数のドキュメント文字列を指定します。それはどちらかでなければなりません</target>
        </trans-unit>
        <trans-unit id="bd17ab1ce2a49502882ba295a450f07a837d7a99" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;docstring&lt;/var&gt; specifies the documentation string for the new mode. &lt;code&gt;define-derived-mode&lt;/code&gt; adds some general information about the mode&amp;rsquo;s hook, followed by the mode&amp;rsquo;s keymap, at the end of this documentation string. If you omit &lt;var&gt;docstring&lt;/var&gt;, &lt;code&gt;define-derived-mode&lt;/code&gt; generates a documentation string.</source>
          <target state="translated">引数 &lt;var&gt;docstring&lt;/var&gt; は、新しいモードのドキュメント文字列を指定します。 &lt;code&gt;define-derived-mode&lt;/code&gt; は、このドキュメント文字列の最後に、モードのフックに関する一般的な情報を追加し、その後にモードのキーマップを追加します。あなたは省略する &lt;var&gt;docstring&lt;/var&gt; 、 &lt;code&gt;define-derived-mode&lt;/code&gt; 説明文字列を生成します。</target>
        </trans-unit>
        <trans-unit id="8b2f3e02d30ef15fdb865417c6bf4e751f67ad61" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;error-symbol&lt;/var&gt; must be an &lt;em&gt;error symbol&lt;/em&gt;&amp;mdash;a symbol defined with &lt;code&gt;define-error&lt;/code&gt;. This is how Emacs Lisp classifies different sorts of errors. See &lt;a href=&quot;error-symbols#Error-Symbols&quot;&gt;Error Symbols&lt;/a&gt;, for a description of error symbols, error conditions and condition names.</source>
          <target state="translated">引数 &lt;var&gt;error-symbol&lt;/var&gt; は、&lt;em&gt;エラーシンボル&lt;/em&gt;（ &lt;code&gt;define-error&lt;/code&gt; で定義されたシンボル）である必要があります。これは、EmacsLispがさまざまな種類のエラーを分類する方法です。エラーシンボル、エラー条件、および条件名の説明については、&lt;a href=&quot;error-symbols#Error-Symbols&quot;&gt;エラーシンボルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bc63a3477a188838da943b9200d27c84d6d19f56" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;event&lt;/var&gt; may be an entire event object, or just an event type. If &lt;var&gt;event&lt;/var&gt; is a symbol that has never been used in an event that has been read as input in the current Emacs session, then &lt;code&gt;event-modifiers&lt;/code&gt; can return &lt;code&gt;nil&lt;/code&gt;, even when &lt;var&gt;event&lt;/var&gt; actually has modifiers.</source>
          <target state="translated">引数 &lt;var&gt;event&lt;/var&gt; は、イベントオブジェクト全体、またはイベントタイプのみの場合があります。場合は &lt;var&gt;event&lt;/var&gt; 現在のEmacsセッションに入力として読み込まれたイベントで使用されていないシンボルであり、その後、 &lt;code&gt;event-modifiers&lt;/code&gt; 返すことができ &lt;code&gt;nil&lt;/code&gt; をしても、 &lt;var&gt;event&lt;/var&gt; 実際に修飾子を持っています。</target>
        </trans-unit>
        <trans-unit id="7904c0efac8eb6a309359bc0c8d1556bb612c4b3" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;file&lt;/var&gt; may be either a directory or a file specification including wildcard characters. If &lt;var&gt;wildcard&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, that means treat &lt;var&gt;file&lt;/var&gt; as a file specification with wildcards.</source>
          <target state="translated">引数 &lt;var&gt;file&lt;/var&gt; は、ディレクトリまたはワイルドカード文字を含むファイル指定のいずれかです。 &lt;var&gt;wildcard&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の場合、それはファイルをワイルドカードを含むファイル仕様として扱うことを意味し &lt;var&gt;file&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="9371be3ca14b7d72d73c5ede9be6979d9d6d0623" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;force&lt;/var&gt; also has an effect if the line isn&amp;rsquo;t long enough to reach column &lt;var&gt;column&lt;/var&gt;; if it is &lt;code&gt;t&lt;/code&gt;, that means to add whitespace at the end of the line to reach that column.</source>
          <target state="translated">引数 &lt;var&gt;force&lt;/var&gt; は、行が列 &lt;var&gt;column&lt;/var&gt; に到達するのに十分な長さでない場合にも効果があります。 &lt;code&gt;t&lt;/code&gt; の場合、その列に到達するために行の終わりに空白を追加することを意味します。</target>
        </trans-unit>
        <trans-unit id="12147a609851b483f1ee7c1184f437efbf04c5a7" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;format&lt;/var&gt; is a list of format names. If &lt;var&gt;format&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, no conversion takes place. Interactively, typing just</source>
          <target state="translated">引数 &lt;var&gt;format&lt;/var&gt; は、フォーマット名のリストです。 &lt;var&gt;format&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; の場合、変換は行われません。インタラクティブに、</target>
        </trans-unit>
        <trans-unit id="4e552f392e638ae5e1cc465f462059be7ffc7762" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;function&lt;/var&gt; must be a function that can take one argument and returns a sequence of characters: a string, a vector, or a list. The argument &lt;var&gt;sequence&lt;/var&gt; can be any kind of sequence except a char-table; that is, a list, a vector, a bool-vector, or a string.</source>
          <target state="translated">引数 &lt;var&gt;function&lt;/var&gt; は、1つの引数を取り、文字列、ベクトル、またはリストの一連の文字を返すことができる関数である必要があります。引数 &lt;var&gt;sequence&lt;/var&gt; は、char-tableを除く任意の種類のシーケンスにすることができます。つまり、リスト、ベクトル、ブールベクトル、または文字列です。</target>
        </trans-unit>
        <trans-unit id="ddc30685dfa4ed9158a6234aef7cfe1c4019a601" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;function&lt;/var&gt; must be either a Lisp function or a primitive function. Special forms and macros are not allowed, because they make sense only when given the unevaluated argument expressions. &lt;code&gt;funcall&lt;/code&gt; cannot provide these because, as we saw above, it never knows them in the first place.</source>
          <target state="translated">引数 &lt;var&gt;function&lt;/var&gt; は、Lisp関数またはプリミティブ関数のいずれかである必要があります。特別な形式とマクロは、評価されていない引数式が与えられた場合にのみ意味があるため、許可されていません。上で見たように、 &lt;code&gt;funcall&lt;/code&gt; はそもそもそれらを決して知らないので、これらを提供することはできません。</target>
        </trans-unit>
        <trans-unit id="2e30324ca741e84e486f486ca93672bb66bab46e" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;help-line&lt;/var&gt; should be a single-line summary of the alternatives in &lt;var&gt;help-map&lt;/var&gt;. In the current version of Emacs, this argument is used only if you set the option &lt;code&gt;three-step-help&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;var&gt;help-line&lt;/var&gt; は、 &lt;var&gt;help-map&lt;/var&gt; の代替案の1行の要約である必要があります。Emacsの現在のバージョンでは、この引数は、オプション &lt;code&gt;three-step-help&lt;/code&gt; を &lt;code&gt;t&lt;/code&gt; に設定した場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="127d393be33d3a8d95a8598319f7563453a6009e" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;history&lt;/var&gt; specifies a history list variable to use for saving the input and for history commands used in the minibuffer. It defaults to &lt;code&gt;minibuffer-history&lt;/code&gt;. You can optionally specify a starting position in the history list as well. See &lt;a href=&quot;minibuffer-history#Minibuffer-History&quot;&gt;Minibuffer History&lt;/a&gt;.</source>
          <target state="translated">引数 &lt;var&gt;history&lt;/var&gt; は、入力の保存およびミニバッファーで使用される履歴コマンドに使用する履歴リスト変数を指定します。デフォルトは &lt;code&gt;minibuffer-history&lt;/code&gt; です。オプションで、履歴リストの開始位置を指定することもできます。&lt;a href=&quot;minibuffer-history#Minibuffer-History&quot;&gt;ミニバッファ履歴を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3573ac7d09f3cbe3a9ed7cb1b453c6e5b9ae6a98" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;history&lt;/var&gt; specifies which history list variable to use for saving the input and for minibuffer history commands. It defaults to &lt;code&gt;minibuffer-history&lt;/code&gt;. See &lt;a href=&quot;minibuffer-history#Minibuffer-History&quot;&gt;Minibuffer History&lt;/a&gt;.</source>
          <target state="translated">引数 &lt;var&gt;history&lt;/var&gt; は、入力の保存およびミニバッファー履歴コマンドに使用する履歴リスト変数を指定します。デフォルトは &lt;code&gt;minibuffer-history&lt;/code&gt; です。&lt;a href=&quot;minibuffer-history#Minibuffer-History&quot;&gt;ミニバッファ履歴を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="337728b68989d9c2d290c7b3166cd39cbd7d6a6f" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;hook&lt;/var&gt; is a function or &lt;code&gt;nil&lt;/code&gt;. If &lt;var&gt;hook&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, then it is called with no arguments after the abbrev is replaced with &lt;var&gt;expansion&lt;/var&gt;; point is located at the end of &lt;var&gt;expansion&lt;/var&gt; when &lt;var&gt;hook&lt;/var&gt; is called.</source>
          <target state="translated">引数 &lt;var&gt;hook&lt;/var&gt; は関数または &lt;code&gt;nil&lt;/code&gt; です。 &lt;var&gt;hook&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の場合、略語が &lt;var&gt;expansion&lt;/var&gt; 置き換えられた後、引数なしで呼び出されます。ポイントは、 &lt;var&gt;hook&lt;/var&gt; が呼び出されたときの &lt;var&gt;expansion&lt;/var&gt; の最後にあります。</target>
        </trans-unit>
        <trans-unit id="bd5778b8ef92c13549c1f7ef7e69e42a33280d37" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;how&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt; specifies explicitly the style of justification. It can be &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;full&lt;/code&gt;, &lt;code&gt;center&lt;/code&gt;, or &lt;code&gt;none&lt;/code&gt;. If it is &lt;code&gt;t&lt;/code&gt;, that means to follow specified justification style (see &lt;code&gt;current-justification&lt;/code&gt;, below). &lt;code&gt;nil&lt;/code&gt; means to do full justification.</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; 場合、引数 &lt;var&gt;how&lt;/var&gt; は、正当化のスタイルを明示的に指定します。 &lt;code&gt;left&lt;/code&gt; 、 &lt;code&gt;right&lt;/code&gt; 、 &lt;code&gt;full&lt;/code&gt; 、 &lt;code&gt;center&lt;/code&gt; 、また &lt;code&gt;none&lt;/code&gt; にすることができます。 &lt;code&gt;t&lt;/code&gt; の場合、それは指定された正当化スタイルに従うことを意味します（以下の &lt;code&gt;current-justification&lt;/code&gt; を参照）。 &lt;code&gt;nil&lt;/code&gt; は、完全な正当化を行うことを意味します。</target>
        </trans-unit>
        <trans-unit id="1842f1cad7ab3b7c140d1cfe864326f7e3619df2" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;image&lt;/var&gt; must be an image descriptor, perhaps returned by &lt;code&gt;create-image&lt;/code&gt; or stored by &lt;code&gt;defimage&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;var&gt;image&lt;/var&gt; は、おそらく &lt;code&gt;create-image&lt;/code&gt; によって返されるか、 &lt;code&gt;defimage&lt;/code&gt; によって格納される画像記述子である必要があります。</target>
        </trans-unit>
        <trans-unit id="96f968277564af4a88d9fe134d19c7c4704c5a69" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;initial&lt;/var&gt; is mostly deprecated; we recommend using a non-&lt;code&gt;nil&lt;/code&gt; value only in conjunction with specifying a cons cell for &lt;var&gt;history&lt;/var&gt;. See &lt;a href=&quot;initial-input#Initial-Input&quot;&gt;Initial Input&lt;/a&gt;. For default input, use &lt;var&gt;default&lt;/var&gt; instead.</source>
          <target state="translated">引数の &lt;var&gt;initial&lt;/var&gt; はほとんど非推奨です。 &lt;var&gt;history&lt;/var&gt; consセルを指定する場合にのみ、 &lt;code&gt;nil&lt;/code&gt; 以外の値を使用することをお勧めします。&lt;a href=&quot;initial-input#Initial-Input&quot;&gt;初期入力を&lt;/a&gt;参照してください。デフォルトの入力には、代わりに &lt;var&gt;default&lt;/var&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="974d3227bd589119d939e9661c5cc12b79770e53" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;keys&lt;/var&gt;, if given, should be a vector which specifies the sequence of events to supply if the command inquires which events were used to invoke it. If &lt;var&gt;keys&lt;/var&gt; is omitted or &lt;code&gt;nil&lt;/code&gt;, the default is the return value of &lt;code&gt;this-command-keys-vector&lt;/code&gt;. See &lt;a href=&quot;command-loop-info#Definition-of-this_002dcommand_002dkeys_002dvector&quot;&gt;Definition of this-command-keys-vector&lt;/a&gt;.</source>
          <target state="translated">引数 &lt;var&gt;keys&lt;/var&gt; が指定されている場合は、コマンドがそれを呼び出すために使用されたイベントを照会する場合に提供するイベントのシーケンスを指定するベクトルである必要があります。場合は &lt;var&gt;keys&lt;/var&gt; 省略されるかされて &lt;code&gt;nil&lt;/code&gt; の場合、デフォルトでは、戻り値であり &lt;code&gt;this-command-keys-vector&lt;/code&gt; 。&lt;a href=&quot;command-loop-info#Definition-of-this_002dcommand_002dkeys_002dvector&quot;&gt;this-command-keys-vectorの定義を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c4c4bb39cda803046ad86dff926b35116869dcc4" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;keyword-list&lt;/var&gt; is a list of keywords to highlight with &lt;code&gt;font-lock-keyword-face&lt;/code&gt;. Each keyword should be a string. Meanwhile, &lt;var&gt;font-lock-list&lt;/var&gt; is a list of additional expressions to highlight. Each element of this list should have the same form as an element of &lt;code&gt;font-lock-keywords&lt;/code&gt;. See &lt;a href=&quot;search_002dbased-fontification#Search_002dbased-Fontification&quot;&gt;Search-based Fontification&lt;/a&gt;.</source>
          <target state="translated">引数 &lt;var&gt;keyword-list&lt;/var&gt; は、 &lt;code&gt;font-lock-keyword-face&lt;/code&gt; で強調表示するキーワードのリストです。各キーワードは文字列である必要があります。一方、 &lt;var&gt;font-lock-list&lt;/var&gt; は、強調表示する追加の式のリストです。このリストの各要素は、 &lt;code&gt;font-lock-keywords&lt;/code&gt; の要素と同じ形式である必要があります。&lt;a href=&quot;search_002dbased-fontification#Search_002dbased-Fontification&quot;&gt;検索ベースのフォント化を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="25d82b58f4ee522411cbc631410a35fdf23c3431" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;kind&lt;/var&gt; should be either the symbol &lt;code&gt;interactive&lt;/code&gt; or the symbol &lt;code&gt;any&lt;/code&gt;. If it is &lt;code&gt;interactive&lt;/code&gt;, then &lt;code&gt;called-interactively-p&lt;/code&gt; returns &lt;code&gt;t&lt;/code&gt; only if the call was made directly by the user&amp;mdash;e.g., if the user typed a key sequence bound to the calling function, but &lt;em&gt;not&lt;/em&gt; if the user ran a keyboard macro that called the function (see &lt;a href=&quot;keyboard-macros#Keyboard-Macros&quot;&gt;Keyboard Macros&lt;/a&gt;). If &lt;var&gt;kind&lt;/var&gt; is &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;called-interactively-p&lt;/code&gt; returns &lt;code&gt;t&lt;/code&gt; for any kind of interactive call, including keyboard macros.</source>
          <target state="translated">引数の &lt;var&gt;kind&lt;/var&gt; は、 &lt;code&gt;interactive&lt;/code&gt; 記号または &lt;code&gt;any&lt;/code&gt; の記号のいずれかである必要があります。もしそうであれば &lt;code&gt;interactive&lt;/code&gt; 、そして &lt;code&gt;called-interactively-p&lt;/code&gt; リターンを &lt;code&gt;t&lt;/code&gt; コールがで直接行われた場合、ユーザは関数呼び出しにバインドされたキーシーケンスを入力した場合、ユーザー例えば、だけ&lt;em&gt;ではない&lt;/em&gt;ユーザーが呼ばれることにキーボードマクロを実行した場合関数（&lt;a href=&quot;keyboard-macros#Keyboard-Macros&quot;&gt;キーボードマクロを&lt;/a&gt;参照）。場合 &lt;var&gt;kind&lt;/var&gt; ある &lt;code&gt;any&lt;/code&gt; 、 &lt;code&gt;called-interactively-p&lt;/code&gt; リターン &lt;code&gt;t&lt;/code&gt; キーボードマクロを含むインタラクティブ呼び出し、任意の種類の。</target>
        </trans-unit>
        <trans-unit id="196be81f6b9a392e133455b5fb487c8f96ab960c" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;left&lt;/var&gt; specifies the width in pixels of the left fringe, and likewise &lt;var&gt;right&lt;/var&gt; for the right fringe. A value of &lt;code&gt;nil&lt;/code&gt; for either one stands for the default width. If &lt;var&gt;outside-margins&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, that specifies that fringes should appear outside of the display margins.</source>
          <target state="translated">引数には、 &lt;var&gt;left&lt;/var&gt; 指定に左のフリンジの幅をピクセル単位で、同様に &lt;var&gt;right&lt;/var&gt; 右フリンジのために。いずれかの値 &lt;code&gt;nil&lt;/code&gt; は、デフォルトの幅を表します。 &lt;var&gt;outside-margins&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の場合、フリンジが表示余白の外側に表示されることを指定します。</target>
        </trans-unit>
        <trans-unit id="9d27ba0b5af1380567016503ffb0e2b8f7cc8071" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;lexical&lt;/var&gt; specifies the scoping rule for local variables (see &lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;Variable Scoping&lt;/a&gt;). If it is omitted or &lt;code&gt;nil&lt;/code&gt;, that means to evaluate &lt;var&gt;form&lt;/var&gt; using the default dynamic scoping rule. If it is &lt;code&gt;t&lt;/code&gt;, that means to use the lexical scoping rule. The value of &lt;var&gt;lexical&lt;/var&gt; can also be a non-empty alist specifying a particular &lt;em&gt;lexical environment&lt;/em&gt; for lexical bindings; however, this feature is only useful for specialized purposes, such as in Emacs Lisp debuggers. See &lt;a href=&quot;lexical-binding#Lexical-Binding&quot;&gt;Lexical Binding&lt;/a&gt;.</source>
          <target state="translated">引数 &lt;var&gt;lexical&lt;/var&gt; は、ローカル変数のスコープ規則を指定します（&lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;変数のスコープを&lt;/a&gt;参照）。省略または &lt;code&gt;nil&lt;/code&gt; の場合、デフォルトの動的スコープ規則を使用して &lt;var&gt;form&lt;/var&gt; を評価することを意味します。 &lt;code&gt;t&lt;/code&gt; の場合、それは字句スコープ規則を使用することを意味します。 &lt;var&gt;lexical&lt;/var&gt; の値は、レキシカルバインディングの特定の&lt;em&gt;レキシカル環境&lt;/em&gt;を指定する空でないリストにすることもできます。ただし、この機能は、EmacsLispデバッガーなどの特殊な目的にのみ役立ちます。&lt;a href=&quot;lexical-binding#Lexical-Binding&quot;&gt;字句バインディングを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c17f6e31c66c06841db5748f38c43cbe2e85ecb7" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;limit&lt;/var&gt; specifies the bound to the search, and should be a position in the current buffer. No match extending after that position is accepted. If &lt;var&gt;limit&lt;/var&gt; is omitted or &lt;code&gt;nil&lt;/code&gt;, it defaults to the end of the accessible portion of the buffer.</source>
          <target state="translated">引数 &lt;var&gt;limit&lt;/var&gt; は検索の範囲を指定し、現在のバッファー内の位置である必要があります。その位置の後に延長する一致は受け入れられません。あれば &lt;var&gt;limit&lt;/var&gt; 省略またはれる &lt;code&gt;nil&lt;/code&gt; バッファのアクセス可能な部分の端部には、デフォルト。</target>
        </trans-unit>
        <trans-unit id="dd040b041a862b040024285cd7f4c2ae445161d8" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;members&lt;/var&gt; is a list specifying an initial set of customization items to be members of the group. However, most often &lt;var&gt;members&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, and you specify the group&amp;rsquo;s members by using the &lt;code&gt;:group&lt;/code&gt; keyword when defining those members.</source>
          <target state="translated">引数 &lt;var&gt;members&lt;/var&gt; は、グループのメンバーとなるカスタマイズ項目の初期セットを指定するリストです。ただし、ほとんどの場合、 &lt;var&gt;members&lt;/var&gt; は &lt;code&gt;nil&lt;/code&gt; であり、それらのメンバーを定義するときに &lt;code&gt;:group&lt;/code&gt; キーワードを使用してグループのメンバーを指定します。</target>
        </trans-unit>
        <trans-unit id="0408e94f530ce550a379720f8c833ca4bc4fc95a" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;menu&lt;/var&gt; says what to display in the menu. It can be a keymap or a list of keymaps (see &lt;a href=&quot;menu-keymaps#Menu-Keymaps&quot;&gt;Menu Keymaps&lt;/a&gt;). In this case, the return value is the list of events corresponding to the user&amp;rsquo;s choice. This list has more than one element if the choice occurred in a submenu. (Note that &lt;code&gt;x-popup-menu&lt;/code&gt; does not actually execute the command bound to that sequence of events.) On text terminals and toolkits that support menu titles, the title is taken from the prompt string of &lt;var&gt;menu&lt;/var&gt; if &lt;var&gt;menu&lt;/var&gt; is a keymap, or from the prompt string of the first keymap in &lt;var&gt;menu&lt;/var&gt; if it is a list of keymaps (see &lt;a href=&quot;defining-menus#Defining-Menus&quot;&gt;Defining Menus&lt;/a&gt;).</source>
          <target state="translated">引数 &lt;var&gt;menu&lt;/var&gt; は、メニューに何を表示するかを示します。キーマップまたはキーマップのリストにすることができます（&lt;a href=&quot;menu-keymaps#Menu-Keymaps&quot;&gt;メニュー&lt;/a&gt;キーマップを参照）。この場合、戻り値はユーザーの選択に対応するイベントのリストです。サブメニューで選択が行われた場合、このリストには複数の要素が含まれます。 （ &lt;code&gt;x-popup-menu&lt;/code&gt; は、実際にはその一連のイベントにバインドされたコマンドを実行しないことに注意してください。）メニュータイトルをサポートするテキスト端末およびツールキットでは、 &lt;var&gt;menu&lt;/var&gt; がキーマップの場合、タイトルは &lt;var&gt;menu&lt;/var&gt; のプロンプト文字列から取得されます。キーマップのリストである場合は、 &lt;var&gt;menu&lt;/var&gt; の最初のキーマップのプロンプト文字列（&lt;a href=&quot;defining-menus#Defining-Menus&quot;&gt;メニューの定義を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="88747b097449b29e56bc00712a63362c30691cd1" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;meta&lt;/var&gt; controls support for input character codes above 127. If &lt;var&gt;meta&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;, Emacs converts characters with the 8th bit set into Meta characters. If &lt;var&gt;meta&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, Emacs disregards the 8th bit; this is necessary when the terminal uses it as a parity bit. If &lt;var&gt;meta&lt;/var&gt; is neither &lt;code&gt;t&lt;/code&gt; nor &lt;code&gt;nil&lt;/code&gt;, Emacs uses all 8 bits of input unchanged. This is good for terminals that use 8-bit character sets.</source>
          <target state="translated">引数 &lt;var&gt;meta&lt;/var&gt; 場合はコントロールが127以上の入力文字コードのサポート &lt;var&gt;meta&lt;/var&gt; ある &lt;code&gt;t&lt;/code&gt; 、Emacsはメタ文字に8番目のビットが設定された文字を変換します。 &lt;var&gt;meta&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; の場合、Emacsは8番目のビットを無視します。これは、端末がパリティビットとして使用する場合に必要です。 &lt;var&gt;meta&lt;/var&gt; が &lt;code&gt;t&lt;/code&gt; でも &lt;code&gt;nil&lt;/code&gt; でもない場合、Emacsは8ビットの入力すべてを変更せずに使用します。これは、8ビットの文字セットを使用する端末に適しています。</target>
        </trans-unit>
        <trans-unit id="7b69f27c31d0a41c9c347845fd11bdd63da029d5" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;millisec&lt;/var&gt; is obsolete (and should not be used), because &lt;var&gt;seconds&lt;/var&gt; can be floating point to specify waiting a fractional number of seconds. If &lt;var&gt;seconds&lt;/var&gt; is 0, the function accepts whatever output is pending but does not wait.</source>
          <target state="translated">引数 &lt;var&gt;millisec&lt;/var&gt; あるため、廃止された（および使用すべきではない）である &lt;var&gt;seconds&lt;/var&gt; の秒の小数を待っている指定する浮動小数点することができます。場合 &lt;var&gt;seconds&lt;/var&gt; 0で、この関数は出力が保留されているものは何でも受け入れますが、待機しません。</target>
        </trans-unit>
        <trans-unit id="0cf53f56ad140e70514995e9d0814aa3d76c0e8e" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;mode&lt;/var&gt; should be an integer which specifies the permissions, similar to &lt;code&gt;set-file-modes&lt;/code&gt; above. Only the lowest 9 bits are meaningful.</source>
          <target state="translated">引数 &lt;var&gt;mode&lt;/var&gt; は、上記の &lt;code&gt;set-file-modes&lt;/code&gt; と同様に、権限を指定する整数である必要があります。最下位の9ビットだけが意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="a16d7cf6dfa227347abb2403a6e7c2be2b2591f2" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;name&lt;/var&gt; may also be a symbol; in that case, the function returns &lt;var&gt;name&lt;/var&gt; if &lt;var&gt;name&lt;/var&gt; is interned in the specified obarray, and otherwise &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;var&gt;name&lt;/var&gt; はシンボルでもかまいません。その場合に、関数が戻るの &lt;var&gt;name&lt;/var&gt; 場合 &lt;var&gt;name&lt;/var&gt; オブジェクト配列指定され、そうでない場合に抑留されている &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="69fc1cc6b623ffbdee12e31cc3480d92239d6a8b" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;noerror&lt;/var&gt; only affects valid searches which fail to find a match. Invalid arguments cause errors regardless of &lt;var&gt;noerror&lt;/var&gt;.</source>
          <target state="translated">引数 &lt;var&gt;noerror&lt;/var&gt; は、一致するものが見つからない有効な検索にのみ影響します。無効な引数は、 &lt;var&gt;noerror&lt;/var&gt; に関係なくエラーを引き起こします。</target>
        </trans-unit>
        <trans-unit id="8d81e59db92b382d9e224aeb68da9946a0652004" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;object&lt;/var&gt; can be a function name, a lambda expression (see &lt;a href=&quot;lambda-expressions#Lambda-Expressions&quot;&gt;Lambda Expressions&lt;/a&gt;), or a byte-code object (see &lt;a href=&quot;byte_002dcode-objects#Byte_002dCode-Objects&quot;&gt;Byte-Code Objects&lt;/a&gt;). If it is a lambda expression, &lt;code&gt;disassemble&lt;/code&gt; compiles it and disassembles the resulting compiled code.</source>
          <target state="translated">引数 &lt;var&gt;object&lt;/var&gt; 関数名、ラムダ式（参照することができ&lt;a href=&quot;lambda-expressions#Lambda-Expressions&quot;&gt;ラムダ式&lt;/a&gt;）、またはバイトコードオブジェクト（参照&lt;a href=&quot;byte_002dcode-objects#Byte_002dCode-Objects&quot;&gt;バイトコードオブジェクト&lt;/a&gt;）。ラムダ式の場合、 &lt;code&gt;disassemble&lt;/code&gt; アセンブルはそれをコンパイルし、結果のコンパイル済みコードを逆アセンブルします。</target>
        </trans-unit>
        <trans-unit id="dad6e03a1386425d5769205e122d50e6a21178f7" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;object&lt;/var&gt; may be a string, a buffer, or a window. If it is a window, then the buffer displayed in that window is used for text properties and overlays, but only the overlays active for that window are considered. If &lt;var&gt;object&lt;/var&gt; is a buffer, then overlays in that buffer are considered first, in order of decreasing priority, followed by the text properties. If &lt;var&gt;object&lt;/var&gt; is a string, only text properties are considered, since strings never have overlays.</source>
          <target state="translated">引数 &lt;var&gt;object&lt;/var&gt; は、文字列、バッファ、またはウィンドウの場合があります。ウィンドウの場合、そのウィンドウに表示されているバッファはテキストのプロパティとオーバーレイに使用されますが、そのウィンドウでアクティブなオーバーレイのみが考慮されます。 &lt;var&gt;object&lt;/var&gt; がバッファの場合、優先度の高い順に、そのバッファ内のオーバーレイが最初に考慮され、次にテキストプロパティが考慮されます。 &lt;var&gt;object&lt;/var&gt; が文字列の場合、文字列にはオーバーレイがないため、テキストプロパティのみが考慮されます。</target>
        </trans-unit>
        <trans-unit id="001fe7686d2c31dc753172d3f9a15f72fd251e2a" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;offsets&lt;/var&gt; is either &lt;code&gt;nil&lt;/code&gt; or a cons cell of the form &lt;code&gt;(&lt;var&gt;hscroll&lt;/var&gt; . &lt;var&gt;tab-offset&lt;/var&gt;)&lt;/code&gt;. Here &lt;var&gt;hscroll&lt;/var&gt; is the number of columns not being displayed at the left margin; most callers get this by calling &lt;code&gt;window-hscroll&lt;/code&gt;. Meanwhile, &lt;var&gt;tab-offset&lt;/var&gt; is the offset between column numbers on the screen and column numbers in the buffer. This can be nonzero in a continuation line, when the previous screen lines&amp;rsquo; widths do not add up to a multiple of &lt;code&gt;tab-width&lt;/code&gt;. It is always zero in a non-continuation line.</source>
          <target state="translated">引数の &lt;var&gt;offsets&lt;/var&gt; どちらかで &lt;code&gt;nil&lt;/code&gt; またはフォームのコンス・セル &lt;code&gt;(&lt;var&gt;hscroll&lt;/var&gt; . &lt;var&gt;tab-offset&lt;/var&gt;)&lt;/code&gt; 。ここで、 &lt;var&gt;hscroll&lt;/var&gt; は、左マージンに表示されていない列の数です。ほとんどの呼び出し元は、 &lt;code&gt;window-hscroll&lt;/code&gt; を呼び出すことでこれを取得します。一方、 &lt;var&gt;tab-offset&lt;/var&gt; は、画面上の列番号とバッファー内の列番号の間のオフセットです。前の画面行の幅が合計して &lt;code&gt;tab-width&lt;/code&gt; 倍数にならない場合、これは継続行でゼロ以外になる可能性があります。非継続行では常にゼロです。</target>
        </trans-unit>
        <trans-unit id="bd432b621bc1d2381c02fe76deeee1b9cd6e2aa5" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;operation&lt;/var&gt; is a symbol; it should be one of &lt;code&gt;write-region&lt;/code&gt;, &lt;code&gt;start-process&lt;/code&gt;, &lt;code&gt;call-process&lt;/code&gt;, &lt;code&gt;call-process-region&lt;/code&gt;, &lt;code&gt;insert-file-contents&lt;/code&gt;, or &lt;code&gt;open-network-stream&lt;/code&gt;. These are the names of the Emacs I/O primitives that can do character code and eol conversion.</source>
          <target state="translated">引数 &lt;var&gt;operation&lt;/var&gt; はシンボルです。これは、 &lt;code&gt;write-region&lt;/code&gt; 、 &lt;code&gt;start-process&lt;/code&gt; 、 &lt;code&gt;call-process&lt;/code&gt; 、 &lt;code&gt;call-process-region&lt;/code&gt; 、 &lt;code&gt;insert-file-contents&lt;/code&gt; 、または &lt;code&gt;open-network-stream&lt;/code&gt; のいずれかである必要があります。これらは、文字コードとeol変換を実行できるEmacs I / Oプリミティブの名前です。</target>
        </trans-unit>
        <trans-unit id="b5c495570323a121506457028c43ca0430313d78" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;partial-filename&lt;/var&gt; must be a file name containing no directory part and no slash (or backslash on some systems). The current buffer&amp;rsquo;s default directory is prepended to &lt;var&gt;directory&lt;/var&gt;, if &lt;var&gt;directory&lt;/var&gt; is not absolute.</source>
          <target state="translated">引数 &lt;var&gt;partial-filename&lt;/var&gt; は、ディレクトリ部分とスラッシュ（または一部のシステムではバックスラッシュ）を含まないファイル名である必要があります。カレントバッファのデフォルトディレクトリを前に付加された &lt;var&gt;directory&lt;/var&gt; 場合、 &lt;var&gt;directory&lt;/var&gt; 絶対的ではありません。</target>
        </trans-unit>
        <trans-unit id="b48f922752b498de38261334e1913b2bb02b6d0d" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;position&lt;/var&gt; specifies where on the screen to put the top left corner of the menu. It can be either a mouse button event (which says to put the menu where the user actuated the button) or a list of this form:</source>
          <target state="translated">引数の &lt;var&gt;position&lt;/var&gt; は、メニューの左上隅を画面上のどこに配置するかを指定します。これは、マウスボタンイベント（ユーザーがボタンを操作した場所にメニューを配置することを意味します）または次のフォームのリストのいずれかです。</target>
        </trans-unit>
        <trans-unit id="d8afa9b503d1608b12cdededd886534cc2bc5427" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;predicate&lt;/var&gt; is the function to use to compare keys. It is called with two arguments, the keys to compare, and should return non-&lt;code&gt;nil&lt;/code&gt; if the first key should come before the second in the sorting order. What exactly are the key arguments depends on what &lt;var&gt;startkeyfun&lt;/var&gt; and &lt;var&gt;endkeyfun&lt;/var&gt; return. If &lt;var&gt;predicate&lt;/var&gt; is omitted or &lt;code&gt;nil&lt;/code&gt;, it defaults to &lt;code&gt;&amp;lt;&lt;/code&gt; if the keys are numbers, to &lt;code&gt;compare-buffer-substrings&lt;/code&gt; if the keys are cons cells (whose &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt; are start and end buffer positions of the key), and to &lt;code&gt;string&amp;lt;&lt;/code&gt; otherwise (with keys assumed to be strings).</source>
          <target state="translated">引数 &lt;var&gt;predicate&lt;/var&gt; は、キーを比較するために使用する関数です。これは、比較するキーという2つの引数を使用して呼び出され、最初のキーがソート順で2番目のキーの前にある場合は非 &lt;code&gt;nil&lt;/code&gt; を返す必要があります。重要な引数は、 &lt;var&gt;startkeyfun&lt;/var&gt; と &lt;var&gt;endkeyfun&lt;/var&gt; が返すものによって異なります。場合 &lt;var&gt;predicate&lt;/var&gt; 省略またはされ &lt;code&gt;nil&lt;/code&gt; に、デフォルト &lt;code&gt;&amp;lt;&lt;/code&gt; キーが数字である場合ために、 &lt;code&gt;compare-buffer-substrings&lt;/code&gt; キーは（そのコンスセルであれば &lt;code&gt;car&lt;/code&gt; と &lt;code&gt;cdr&lt;/code&gt; キーの位置バッファ開始および終了される）、およびに &lt;code&gt;string&amp;lt;&lt;/code&gt; さもなければ（キーは文字列と見なされます）。</target>
        </trans-unit>
        <trans-unit id="a855a735accf62e1134dc780be542253eb20ba2e" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;predicate&lt;/var&gt; must be a function that accepts two arguments. It is called with two elements of &lt;var&gt;sequence&lt;/var&gt;. To get an increasing order sort, the &lt;var&gt;predicate&lt;/var&gt; should return non-&lt;code&gt;nil&lt;/code&gt; if the first element is &amp;ldquo;less&amp;rdquo; than the second, or &lt;code&gt;nil&lt;/code&gt; if not.</source>
          <target state="translated">引数 &lt;var&gt;predicate&lt;/var&gt; は、2つの引数を受け入れる関数である必要があります。これは、 &lt;var&gt;sequence&lt;/var&gt; 2つの要素で呼び出されます。昇順の並べ替えを取得するには、 &lt;var&gt;predicate&lt;/var&gt; 非返す必要があります &lt;code&gt;nil&lt;/code&gt; を最初の要素は「少ない」第二、または超える場合 &lt;code&gt;nil&lt;/code&gt; でない場合。</target>
        </trans-unit>
        <trans-unit id="d1251fac003853896e745f0298e2aa9d94692f65" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;process&lt;/var&gt; must be either a process, a process name, a buffer, a buffer name, or &lt;code&gt;nil&lt;/code&gt;. A buffer or buffer name stands for a process through &lt;code&gt;get-buffer-process&lt;/code&gt;. &lt;code&gt;nil&lt;/code&gt; stands for the process associated with the current buffer. Except with &lt;code&gt;stop-process&lt;/code&gt; and &lt;code&gt;continue-process&lt;/code&gt;, an error is signaled if &lt;var&gt;process&lt;/var&gt; does not identify an active process, or if it represents a network, serial, or pipe connection.</source>
          <target state="translated">引数 &lt;var&gt;process&lt;/var&gt; は、process、process name、buffer、buffer name、または &lt;code&gt;nil&lt;/code&gt; のいずれかでなければなりません。バッファまたはバッファ名は、 &lt;code&gt;get-buffer-process&lt;/code&gt; を介したプロセスを表します。 &lt;code&gt;nil&lt;/code&gt; は、現在のバッファに関連付けられているプロセスを表します。 &lt;code&gt;stop-process&lt;/code&gt; と &lt;code&gt;continue-process&lt;/code&gt; を除いて、 &lt;var&gt;process&lt;/var&gt; がアクティブなプロセスを識別しない場合、またはネットワーク、シリアル、またはパイプ接続を表す場合は、エラーが通知されます。</target>
        </trans-unit>
        <trans-unit id="af5bf7e34455acf7be31e9bc5d6f866fc302930e" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;prompt&lt;/var&gt; is either a string to be displayed in the echo area as a prompt, or &lt;code&gt;nil&lt;/code&gt;, meaning not to display a prompt.</source>
          <target state="translated">引数 &lt;var&gt;prompt&lt;/var&gt; は、エコー領域にプロンプ​​トとして表示される文字列、またはプロンプトを表示しないことを意味する &lt;code&gt;nil&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="70512a26fcee3aeb8a3425f6dc51d96e107b4faf" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;prompt&lt;/var&gt; is either a string to be displayed in the echo area as a prompt, or &lt;code&gt;nil&lt;/code&gt;, meaning not to display a prompt. The argument &lt;var&gt;continue-echo&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, means to echo this key as a continuation of the previous key.</source>
          <target state="translated">引数 &lt;var&gt;prompt&lt;/var&gt; は、エコー領域にプロンプ​​トとして表示される文字列、またはプロンプトを表示しないことを意味する &lt;code&gt;nil&lt;/code&gt; のいずれかです。引数 &lt;var&gt;continue-echo&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; でない場合、前のキーの続きとしてこのキーをエコーすることを意味します。</target>
        </trans-unit>
        <trans-unit id="872e597e29d6ed7b7a8c180508178c91f1565bab" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;prompt&lt;/var&gt; should be a string ending with a colon and a space. If &lt;var&gt;default&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, the function inserts it in &lt;var&gt;prompt&lt;/var&gt; before the colon to follow the convention for reading from the minibuffer with a default value (see &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Programming-Tips.html#Programming-Tips&quot;&gt;Programming Tips&lt;/a&gt;).</source>
          <target state="translated">引数 &lt;var&gt;prompt&lt;/var&gt; は、コロンとスペースで終わる文字列である必要があります。もし &lt;var&gt;default&lt;/var&gt; 非で &lt;code&gt;nil&lt;/code&gt; のそれはで、関数の挿入 &lt;var&gt;prompt&lt;/var&gt; （参照デフォルト値でミニバッファから読み取るための規則に従うようにコロンの前&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Programming-Tips.html#Programming-Tips&quot;&gt;のヒントプログラミング&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="5608256bb905bdbb1eff90b08fadc105facf372d" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;prompter&lt;/var&gt; specifies how to ask each question. If &lt;var&gt;prompter&lt;/var&gt; is a string, the question text is computed like this:</source>
          <target state="translated">引数 &lt;var&gt;prompter&lt;/var&gt; は、各質問をする方法を指定します。場合 &lt;var&gt;prompter&lt;/var&gt; 文字列で、問題文は次のように計算されます。</target>
        </trans-unit>
        <trans-unit id="eed1350308760f73cd3d24fa91bd9205b37cd744" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;props&lt;/var&gt; is the new property list. It should be a list whose elements are property names alternating with corresponding values.</source>
          <target state="translated">引数 &lt;var&gt;props&lt;/var&gt; は新しいプロパティリストです。これは、要素が対応する値と交互になっているプロパティ名であるリストである必要があります。</target>
        </trans-unit>
        <trans-unit id="5bbc2fd92fa2dd281ae56f30f0b8f43f4acc8a92" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;props&lt;/var&gt; specifies which properties to add. It should have the form of a property list (see &lt;a href=&quot;property-lists#Property-Lists&quot;&gt;Property Lists&lt;/a&gt;): a list whose elements include the property names followed alternately by the corresponding values.</source>
          <target state="translated">引数 &lt;var&gt;props&lt;/var&gt; は、追加するプロパティを指定します。これは、プロパティリストの形態を有していなければならない（参照&lt;a href=&quot;property-lists#Property-Lists&quot;&gt;属性リスト&lt;/a&gt;）：その要素プロパティ名を含む、対応する値によって交互に続くリスト。</target>
        </trans-unit>
        <trans-unit id="9cc67a41c7e64481d999b8a504d6065516bede3a" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;props&lt;/var&gt; specifies which properties to delete. It should have the form of a property list (see &lt;a href=&quot;property-lists#Property-Lists&quot;&gt;Property Lists&lt;/a&gt;): a list whose elements are property names alternating with corresponding values. But only the names matter&amp;mdash;the values that accompany them are ignored. For example, here&amp;rsquo;s how to remove the &lt;code&gt;face&lt;/code&gt; property.</source>
          <target state="translated">引数 &lt;var&gt;props&lt;/var&gt; は、削除するプロパティを指定します。プロパティリストの形式である必要があります（&lt;a href=&quot;property-lists#Property-Lists&quot;&gt;プロパティリストを&lt;/a&gt;参照）。要素がプロパティ名と対応する値が交互になっているリストです。ただし、重要なのは名前だけです。名前に付随する値は無視されます。たとえば、 &lt;code&gt;face&lt;/code&gt; プロパティを削除する方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="69f2c50ecf74da021b0e7c46691093ec14c66784" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;question&lt;/var&gt; is the outgoing message that starts the transaction. The argument &lt;var&gt;fn&lt;/var&gt; is the function to call when the corresponding answer comes back; it is called with two arguments: &lt;var&gt;closure&lt;/var&gt;, and the answer received.</source>
          <target state="translated">引数の &lt;var&gt;question&lt;/var&gt; は、トランザクションを開始する発信メッセージです。引数 &lt;var&gt;fn&lt;/var&gt; は、対応する回答が戻ってきたときに呼び出す関数です。これは、 &lt;var&gt;closure&lt;/var&gt; と受信した回答の2つの引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d815e5eb2953e57ddfdc5993729a096fec8bc0cb" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;regexp&lt;/var&gt; is a regular expression that should match text at the end of the entire answer, but nothing before; that&amp;rsquo;s how &lt;code&gt;tq-enqueue&lt;/code&gt; determines where the answer ends.</source>
          <target state="translated">引数 &lt;var&gt;regexp&lt;/var&gt; は正規表現であり、回答全体の最後のテキストと一致する必要がありますが、それ以前は一致しません。これが、 &lt;code&gt;tq-enqueue&lt;/code&gt; が回答の終了場所を決定する方法です。</target>
        </trans-unit>
        <trans-unit id="5b5f44f3d22c5a5049bd7ccd1b39ed76340c19cb" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;replacements&lt;/var&gt; specifies what to replace occurrences with. If it is a string, that string is used. It can also be a list of strings, to be used in cyclic order.</source>
          <target state="translated">引数 &lt;var&gt;replacements&lt;/var&gt; は、オカレンスを何に置き換えるかを指定します。文字列の場合は、その文字列が使用されます。循環順に使用する文字列のリストにすることもできます。</target>
        </trans-unit>
        <trans-unit id="211392b7efa5b598b944102aa71b19e31292e6a4" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;runtime&lt;/var&gt; is a pointer to a C &lt;code&gt;struct&lt;/code&gt; that includes 2 public fields: &lt;code&gt;size&lt;/code&gt;, which provides the size of the structure in bytes; and &lt;code&gt;get_environment&lt;/code&gt;, which provides a pointer to a function that allows the module initialization function access to the Emacs environment object and its interfaces.</source>
          <target state="translated">引数 &lt;var&gt;runtime&lt;/var&gt; Cとへのポインタである &lt;code&gt;struct&lt;/code&gt; 2つのパブリックフィールド含ま： &lt;code&gt;size&lt;/code&gt; 、バイト単位構造の大きさを提供します。そして &lt;code&gt;get_environment&lt;/code&gt; Emacsの環境のオブジェクトとそのインターフェースへのモジュールの初期化機能へのアクセスを可能にする関数へのポインタを提供します。</target>
        </trans-unit>
        <trans-unit id="b0e7e0b91ad298260b1816cbd65796b68a0bd82d" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;seconds&lt;/var&gt; need not be an integer. If it is floating point, &lt;code&gt;sit-for&lt;/code&gt; waits for a fractional number of seconds. Some systems support only a whole number of seconds; on these systems, &lt;var&gt;seconds&lt;/var&gt; is rounded down.</source>
          <target state="translated">引数 &lt;var&gt;seconds&lt;/var&gt; は整数である必要はありません。浮動小数点の場合、 &lt;code&gt;sit-for&lt;/code&gt; は数秒待機します。一部のシステムは整数秒しかサポートしていません。これらのシステムでは、 &lt;var&gt;seconds&lt;/var&gt; は切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="1a269d46174e2be95bd3636d0d8a3ec1968953df" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;seconds&lt;/var&gt; need not be an integer. If it is floating point, &lt;code&gt;sleep-for&lt;/code&gt; waits for a fractional number of seconds. Some systems support only a whole number of seconds; on these systems, &lt;var&gt;seconds&lt;/var&gt; is rounded down.</source>
          <target state="translated">引数 &lt;var&gt;seconds&lt;/var&gt; は整数である必要はありません。浮動小数点の場合、 &lt;code&gt;sleep-for&lt;/code&gt; は数秒待機します。一部のシステムは整数秒しかサポートしていません。これらのシステムでは、 &lt;var&gt;seconds&lt;/var&gt; は切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="c189f7ca8290602de13d50f2372250cb9f720a2d" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;sequence&lt;/var&gt; can be any kind of sequence except a char-table; that is, a list, a vector, a bool-vector, or a string. The result is always a list. The length of the result is the same as the length of &lt;var&gt;sequence&lt;/var&gt;. For example:</source>
          <target state="translated">引数 &lt;var&gt;sequence&lt;/var&gt; は、char-tableを除く任意の種類のシーケンスにすることができます。つまり、リスト、ベクトル、ブールベクトル、または文字列です。結果は常にリストです。結果の長さは、 &lt;var&gt;sequence&lt;/var&gt; の長さと同じです。例えば：</target>
        </trans-unit>
        <trans-unit id="b45bd09aa0d91bbfc69fc9a445440572bd4cf5d2" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;slice&lt;/var&gt; specifies a slice of the image to insert. If &lt;var&gt;slice&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt; or omitted the whole image is inserted. Otherwise, &lt;var&gt;slice&lt;/var&gt; is a list &lt;code&gt;(&lt;var&gt;x&lt;/var&gt; &lt;var&gt;y&lt;/var&gt; &lt;var&gt;width&lt;/var&gt;
&lt;var&gt;height&lt;/var&gt;)&lt;/code&gt; which specifies the &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; positions and &lt;var&gt;width&lt;/var&gt; and &lt;var&gt;height&lt;/var&gt; of the image area to insert. Integer values are in units of pixels. A floating-point number in the range 0.0&amp;ndash;1.0 stands for that fraction of the width or height of the entire image.</source>
          <target state="translated">引数 &lt;var&gt;slice&lt;/var&gt; は、挿入する画像のスライスを指定します。場合 &lt;var&gt;slice&lt;/var&gt; ある &lt;code&gt;nil&lt;/code&gt; または省略全体画像が挿入されています。そうでなければ、 &lt;var&gt;slice&lt;/var&gt; リストである &lt;code&gt;(&lt;var&gt;x&lt;/var&gt; &lt;var&gt;y&lt;/var&gt; &lt;var&gt;width&lt;/var&gt; &lt;var&gt;height&lt;/var&gt;)&lt;/code&gt; を指定 &lt;var&gt;x&lt;/var&gt; および &lt;var&gt;y&lt;/var&gt; の位置と &lt;var&gt;width&lt;/var&gt; と &lt;var&gt;height&lt;/var&gt; 挿入する画像領域のは。整数値はピクセル単位です。 0.0〜1.0の範囲の浮動小数点数は、画像全体の幅または高さのその部分を表します。</target>
        </trans-unit>
        <trans-unit id="e99474cc32a24e7c4f609644dcecc5ca6a4477e1" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;special&lt;/var&gt;, if given, means to ignore the prefix argument and not clear it. This is used for executing special events (see &lt;a href=&quot;special-events#Special-Events&quot;&gt;Special Events&lt;/a&gt;).</source>
          <target state="translated">引数 &lt;var&gt;special&lt;/var&gt; は、指定されている場合、プレフィックス引数を無視し、クリアしないことを意味します。これは、特別なイベントを実行するために使用されている（参照&lt;a href=&quot;special-events#Special-Events&quot;&gt;特別イベント&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="e130557ecc7dad6914c0d468f71414349355f143" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;standard&lt;/var&gt; is an expression that specifies the standard value for &lt;var&gt;option&lt;/var&gt;. Evaluating the &lt;code&gt;defcustom&lt;/code&gt; form evaluates &lt;var&gt;standard&lt;/var&gt;, but does not necessarily bind the option to that value. If &lt;var&gt;option&lt;/var&gt; already has a default value, it is left unchanged. If the user has already saved a customization for &lt;var&gt;option&lt;/var&gt;, the user&amp;rsquo;s customized value is installed as the default value. Otherwise, the result of evaluating &lt;var&gt;standard&lt;/var&gt; is installed as the default value.</source>
          <target state="translated">引数 &lt;var&gt;standard&lt;/var&gt; は、 &lt;var&gt;option&lt;/var&gt; 標準値を指定する式です。評価 &lt;code&gt;defcustom&lt;/code&gt; をフォームして評価し &lt;var&gt;standard&lt;/var&gt; 、必ずしもその値にオプションを結合しません。場合は &lt;var&gt;option&lt;/var&gt; すでにデフォルト値を持っている、それは変更されません。ユーザーが &lt;var&gt;option&lt;/var&gt; カスタマイズをすでに保存している場合は、ユーザーのカスタマイズされた値がデフォルト値としてインストールされます。それ以外の場合は、 &lt;var&gt;standard&lt;/var&gt; の評価結果がデフォルト値としてインストールされます。</target>
        </trans-unit>
        <trans-unit id="a41b9cd7c5304ae1483b63947c8ae36bea193179" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;switch-frame-ok&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, means that this function should process a &lt;code&gt;switch-frame&lt;/code&gt; event if the user switches frames before typing anything. If the user switches frames in the middle of a key sequence, or at the start of the sequence but &lt;var&gt;switch-frame-ok&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, then the event will be put off until after the current key sequence.</source>
          <target state="translated">引数 &lt;var&gt;switch-frame-ok&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、ユーザーが何かを入力する前にフレームを切り替えた場合に、この関数が &lt;code&gt;switch-frame&lt;/code&gt; イベントを処理する必要があることを意味します。ユーザーがキーシーケンスの途中またはシーケンスの開始時に &lt;var&gt;switch-frame-ok&lt;/var&gt; が、switch-frame-okが &lt;code&gt;nil&lt;/code&gt; の場合、イベントは現在のキーシーケンスが終了するまで延期されます。</target>
        </trans-unit>
        <trans-unit id="e18bbe26e7a2b0de4caab7675f413155a70f8050" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;symbol&lt;/var&gt; is not implicitly quoted; &lt;code&gt;add-to-list&lt;/code&gt; is an ordinary function, like &lt;code&gt;set&lt;/code&gt; and unlike &lt;code&gt;setq&lt;/code&gt;. Quote the argument yourself if that is what you want.</source>
          <target state="translated">引数 &lt;var&gt;symbol&lt;/var&gt; は暗黙的に引用されていません。 &lt;code&gt;add-to-list&lt;/code&gt; のように、通常の関数で &lt;code&gt;set&lt;/code&gt; とは異なり &lt;code&gt;setq&lt;/code&gt; の。それがあなたが望むものであるならば、あなた自身で議論を引用してください。</target>
        </trans-unit>
        <trans-unit id="ca7c32d401bf914b6464aff472c84af0a66020cf" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;symbol&lt;/var&gt; is not implicitly quoted; &lt;code&gt;add-to-ordered-list&lt;/code&gt; is an ordinary function, like &lt;code&gt;set&lt;/code&gt; and unlike &lt;code&gt;setq&lt;/code&gt;. Quote the argument yourself if necessary.</source>
          <target state="translated">引数 &lt;var&gt;symbol&lt;/var&gt; は暗黙的に引用されていません。 &lt;code&gt;add-to-ordered-list&lt;/code&gt; のように、通常の関数で &lt;code&gt;set&lt;/code&gt; とは異なり &lt;code&gt;setq&lt;/code&gt; の。必要に応じて、自分で議論を引用してください。</target>
        </trans-unit>
        <trans-unit id="e08b6b7aae0045521f8c5b5cfa5fa2ed408551ff" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;syntax-descriptor&lt;/var&gt; is a syntax descriptor, i.e., a string whose first character is a syntax class designator and whose second and subsequent characters optionally specify a matching character and syntax flags. See &lt;a href=&quot;syntax-descriptors#Syntax-Descriptors&quot;&gt;Syntax Descriptors&lt;/a&gt;. An error is signaled if &lt;var&gt;syntax-descriptor&lt;/var&gt; is not a valid syntax descriptor.</source>
          <target state="translated">引数 &lt;var&gt;syntax-descriptor&lt;/var&gt; は構文記述子です。つまり、最初の文字が構文クラス指定子であり、2番目以降の文字がオプションで一致する文字と構文フラグを指定する文字列です。&lt;a href=&quot;syntax-descriptors#Syntax-Descriptors&quot;&gt;構文記述子を&lt;/a&gt;参照してください。 &lt;var&gt;syntax-descriptor&lt;/var&gt; が有効な構文記述子でない場合、エラーが通知されます。</target>
        </trans-unit>
        <trans-unit id="98c04eb36732c1f9acd376bb1b7e8f2093b46e58" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;thing&lt;/var&gt; is a symbol which specifies a kind of syntactic entity. Possibilities include &lt;code&gt;symbol&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;sexp&lt;/code&gt;, &lt;code&gt;defun&lt;/code&gt;, &lt;code&gt;filename&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;word&lt;/code&gt;, &lt;code&gt;sentence&lt;/code&gt;, &lt;code&gt;whitespace&lt;/code&gt;, &lt;code&gt;line&lt;/code&gt;, &lt;code&gt;page&lt;/code&gt;, and others.</source>
          <target state="translated">引数の &lt;var&gt;thing&lt;/var&gt; は、構文エンティティの種類を指定する記号です。可能性には、 &lt;code&gt;symbol&lt;/code&gt; 、 &lt;code&gt;list&lt;/code&gt; 、 &lt;code&gt;sexp&lt;/code&gt; 、 &lt;code&gt;defun&lt;/code&gt; 、 &lt;code&gt;filename&lt;/code&gt; 、 &lt;code&gt;url&lt;/code&gt; 、 &lt;code&gt;word&lt;/code&gt; 、 &lt;code&gt;sentence&lt;/code&gt; 、 &lt;code&gt;whitespace&lt;/code&gt; 、 &lt;code&gt;line&lt;/code&gt; 、 &lt;code&gt;page&lt;/code&gt; などが含まれます。</target>
        </trans-unit>
        <trans-unit id="70061b1cc9d0665934fc07564012818e3ed00551" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;time&lt;/var&gt;, if given, specifies a time to format, instead of the current time. The optional argument &lt;var&gt;zone&lt;/var&gt; defaults to the current time zone rule. See &lt;a href=&quot;time-zone-rules#Time-Zone-Rules&quot;&gt;Time Zone Rules&lt;/a&gt;. The operating system limits the range of time and zone values.</source>
          <target state="translated">引数 &lt;var&gt;time&lt;/var&gt; は、指定されている場合、現在の時刻ではなく、フォーマットする時刻を指定します。オプションの引数 &lt;var&gt;zone&lt;/var&gt; は、デフォルトで現在のタイムゾーンルールになります。&lt;a href=&quot;time-zone-rules#Time-Zone-Rules&quot;&gt;タイムゾーンルールを&lt;/a&gt;参照してください。オペレーティングシステムは、時間とゾーンの値の範囲を制限します。</target>
        </trans-unit>
        <trans-unit id="67093ca62609112dce25a039485acdd340da0cbb" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;time&lt;/var&gt;, if given, specifies a time value to analyze instead of the current time. The optional argument &lt;var&gt;zone&lt;/var&gt; defaults to the current time zone rule. The operating system limits the range of time and zone values.</source>
          <target state="translated">引数 &lt;var&gt;time&lt;/var&gt; は、指定されている場合、現在の時刻の代わりに分析する時刻値を指定します。オプションの引数 &lt;var&gt;zone&lt;/var&gt; は、デフォルトで現在のタイムゾーンルールになります。オペレーティングシステムは、時間とゾーンの値の範囲を制限します。</target>
        </trans-unit>
        <trans-unit id="a166fde7744586ad3de5035db801908eb626de30" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;value&lt;/var&gt; is used as the value to return from that &lt;code&gt;catch&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;var&gt;value&lt;/var&gt; は、その &lt;code&gt;catch&lt;/code&gt; から返す値として使用されます。</target>
        </trans-unit>
        <trans-unit id="476196cad18d685889ec67ed735c3184bfb0b98c" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;var&lt;/var&gt; is a variable. &lt;code&gt;condition-case&lt;/code&gt; does not bind this variable when executing the &lt;var&gt;protected-form&lt;/var&gt;, only when it handles an error. At that time, it binds &lt;var&gt;var&lt;/var&gt; locally to an &lt;em&gt;error description&lt;/em&gt;, which is a list giving the particulars of the error. The error description has the form &lt;code&gt;(&lt;var&gt;error-symbol&lt;/var&gt;
. &lt;var&gt;data&lt;/var&gt;)&lt;/code&gt;. The handler can refer to this list to decide what to do. For example, if the error is for failure opening a file, the file name is the second element of &lt;var&gt;data&lt;/var&gt;&amp;mdash;the third element of the error description.</source>
          <target state="translated">引数 &lt;var&gt;var&lt;/var&gt; は変数です。 &lt;code&gt;condition-case&lt;/code&gt; は、 &lt;var&gt;protected-form&lt;/var&gt; の実行時にこの変数をバインドせず、エラーを処理する場合にのみバインドします。その際、 &lt;var&gt;var&lt;/var&gt; を&lt;em&gt;エラーの説明に&lt;/em&gt;ローカルにバインドし&lt;em&gt;ます。エラーの説明&lt;/em&gt;は、&lt;em&gt;エラーの詳細&lt;/em&gt;を示すリストです。エラーの説明は、フォーム有する &lt;code&gt;(&lt;var&gt;error-symbol&lt;/var&gt; . &lt;var&gt;data&lt;/var&gt;)&lt;/code&gt; 。ハンドラーはこのリストを参照して、何をするかを決定できます。たとえば、エラーがファイルのオープンの失敗によるものである場合、ファイル名は &lt;var&gt;data&lt;/var&gt; の2番目の要素（エラーの説明の3番目の要素）です。</target>
        </trans-unit>
        <trans-unit id="e0fe210e6f1d01348600177fc40d83de22fa4e2e" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;visible-ok&lt;/var&gt; is handled as with &lt;code&gt;other-buffer&lt;/code&gt;, see above. If no suitable buffer can be found, the buffer</source>
          <target state="translated">引数 &lt;var&gt;visible-ok&lt;/var&gt; は、 &lt;code&gt;other-buffer&lt;/code&gt; と同様に処理されます。上記を参照してください。適切なバッファが見つからない場合、バッファ</target>
        </trans-unit>
        <trans-unit id="72848c5e5c01bccb49e9d85b256bded1595df4a4" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;when&lt;/var&gt; should be a string indicating when the function was first made obsolete&amp;mdash;for example, a date or a release number.</source>
          <target state="translated">&lt;var&gt;when&lt;/var&gt; の引数は、関数が最初に廃止された日時を示す文字列である必要があります。たとえば、日付やリリース番号などです。</target>
        </trans-unit>
        <trans-unit id="981c67516263983386e948611e806a1396a3f68a" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;width&lt;/var&gt; is the number of columns available to display text; this affects handling of continuation lines. &lt;code&gt;nil&lt;/code&gt; means the actual number of usable text columns in the window, which is equivalent to the value returned by &lt;code&gt;(window-width window)&lt;/code&gt;.</source>
          <target state="translated">引数の &lt;var&gt;width&lt;/var&gt; は、テキストを表示するために使用できる列の数です。これは継続行の処理に影響します。 &lt;code&gt;nil&lt;/code&gt; は、ウィンドウで使用可能なテキスト列の実際の数を意味します。これは、 &lt;code&gt;(window-width window)&lt;/code&gt; によって返される値に相当します。</target>
        </trans-unit>
        <trans-unit id="a911ba7619afc0fecdef0edde89f01cbdc7950a1" translate="yes" xml:space="preserve">
          <source>The argument is a single, highest-level form in a definition. This is like &lt;code&gt;def-body&lt;/code&gt;, except it is used to match a single form rather than a list of forms. As a special case, &lt;code&gt;def-form&lt;/code&gt; also means that tracing information is not output when the form is executed. See the &lt;code&gt;interactive&lt;/code&gt; example.</source>
          <target state="translated">引数は、定義内の単一の最高レベルの形式です。これは &lt;code&gt;def-body&lt;/code&gt; に似ていますが、フォームのリストではなく単一のフォームに一致するために使用される点が異なります。特別な場合として、 &lt;code&gt;def-form&lt;/code&gt; は、フォームの実行時にトレース情報が出力されないことも意味します。 &lt;code&gt;interactive&lt;/code&gt; 例を参照してください。</target>
        </trans-unit>
        <trans-unit id="7dda82e624c89291ddeeb7176faeb74ec8ff9fc4" translate="yes" xml:space="preserve">
          <source>The argument is the body of code in a definition. This is like &lt;code&gt;body&lt;/code&gt;, described above, but a definition body must be instrumented with a different Edebug call that looks up information associated with the definition. Use &lt;code&gt;def-body&lt;/code&gt; for the highest level list of forms within the definition.</source>
          <target state="translated">引数は、定義内のコードの本体です。これは上記の &lt;code&gt;body&lt;/code&gt; に似ていますが、定義bodyには、定義に関連付けられた情報を検索する別のEdebug呼び出しを組み込む必要があります。定義内のフォームの最上位リストには &lt;code&gt;def-body&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="7fc1b12a3b1d895f282732e4c2ebfaebd02311cb" translate="yes" xml:space="preserve">
          <source>The argument must be a cons cell whose &lt;code&gt;car&lt;/code&gt; is &lt;code&gt;eql&lt;/code&gt; to &lt;var&gt;object&lt;/var&gt;.</source>
          <target state="translated">引数は、そのコンスセルでなければならない &lt;code&gt;car&lt;/code&gt; です &lt;code&gt;eql&lt;/code&gt; する &lt;var&gt;object&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="7dd03bfcc4c0687119a09e247b34a10daf413382" translate="yes" xml:space="preserve">
          <source>The argument must be an instance of a class named &lt;var&gt;struct-type&lt;/var&gt; defined with &lt;code&gt;cl-defstruct&lt;/code&gt; (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/cl/Structures.html#Structures&quot;&gt;Structures&lt;/a&gt; in</source>
          <target state="translated">引数は、 &lt;code&gt;cl-defstruct&lt;/code&gt; で定義された &lt;var&gt;struct-type&lt;/var&gt; という名前のクラスのインスタンスである必要があります（の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/cl/Structures.html#Structures&quot;&gt;構造体&lt;/a&gt;を参照）。</target>
        </trans-unit>
        <trans-unit id="6a016fb8d81e2ab32819f60e0f432fb6a3d9fce9" translate="yes" xml:space="preserve">
          <source>The argument should be a symbol named &lt;var&gt;string&lt;/var&gt;. This specification is equivalent to the quoted symbol, &lt;code&gt;'&lt;var&gt;symbol&lt;/var&gt;&lt;/code&gt;, where the name of &lt;var&gt;symbol&lt;/var&gt; is the &lt;var&gt;string&lt;/var&gt;, but the string form is preferred.</source>
          <target state="translated">引数は &lt;var&gt;string&lt;/var&gt; という名前のシンボルである必要があります。この仕様は、引用符で囲まれたシンボルに相当し &lt;code&gt;'&lt;var&gt;symbol&lt;/var&gt;&lt;/code&gt; の名前、 &lt;var&gt;symbol&lt;/var&gt; ある &lt;var&gt;string&lt;/var&gt; が、文字列の形式が好ましいです。</target>
        </trans-unit>
        <trans-unit id="6d235a75502a298491d0f8f47584c491581700a2" translate="yes" xml:space="preserve">
          <source>The argument should be a vector whose elements must match the &lt;var&gt;elements&lt;/var&gt; in the specification. See the backquote example.</source>
          <target state="translated">引数は、 &lt;var&gt;elements&lt;/var&gt; が仕様の要素と一致する必要があるベクトルである必要があります。バッククォートの例を参照してください。</target>
        </trans-unit>
        <trans-unit id="bac3fcdc65f408fcb049e05f8e1cc77394dd852a" translate="yes" xml:space="preserve">
          <source>The argument to &lt;code&gt;byte-compile&lt;/code&gt; can also be a &lt;code&gt;lambda&lt;/code&gt; expression. In that case, the function returns the corresponding compiled code but does not store it anywhere.</source>
          <target state="translated">&lt;code&gt;byte-compile&lt;/code&gt; の引数は、 &lt;code&gt;lambda&lt;/code&gt; 式にすることもできます。その場合、関数は対応するコンパイル済みコードを返しますが、どこにも保存しません。</target>
        </trans-unit>
        <trans-unit id="65872c371b9193c99790a2d59431ec0002cb765f" translate="yes" xml:space="preserve">
          <source>The argument to the &lt;code&gt;:options&lt;/code&gt; keywords should be a list of specifications for reasonable keys in the alist. Ordinarily, they are simply atoms, which stand for themselves. For example:</source>
          <target state="translated">&lt;code&gt;:options&lt;/code&gt; キーワードの引数は、リスト内の適切なキーの仕様のリストである必要があります。通常、それらは単に原子であり、それ自体を表します。例えば：</target>
        </trans-unit>
        <trans-unit id="39a320a7e7ff203aa87f177be24c8afee00608cf" translate="yes" xml:space="preserve">
          <source>The argument, a symbol, is the name of an argument of the defining form. However, lambda-list keywords (symbols starting with &amp;lsquo;</source>
          <target state="translated">引数であるシンボルは、定義形式の引数の名前です。ただし、ラムダリストキーワード（ 'で始まる記号</target>
        </trans-unit>
        <trans-unit id="04bfbbc1720d1306603968788629498a7b7b6c73" translate="yes" xml:space="preserve">
          <source>The argument, a symbol, is the name of the defining form.</source>
          <target state="translated">引数であるシンボルは、定義形式の名前です。</target>
        </trans-unit>
        <trans-unit id="a1265c068f2d370b4c89f1bdd6a871f3831d14cc" translate="yes" xml:space="preserve">
          <source>The arguments &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:around&lt;/code&gt; used in the above examples specify how the two functions are composed, since there are many different ways to do it. The added function is also called a piece of &lt;em&gt;advice&lt;/em&gt;.</source>
          <target state="translated">上記の例で使用されている引数 &lt;code&gt;:before&lt;/code&gt; および &lt;code&gt;:around&lt;/code&gt; は、さまざまな方法があるため、2つの関数の構成方法を指定します。追加された機能は、&lt;em&gt;アドバイス&lt;/em&gt;とも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="e775df69264dec0b29fe83b2750522c9ef3d6768" translate="yes" xml:space="preserve">
          <source>The arguments &lt;code&gt;from&lt;/code&gt;, &lt;code&gt;to&lt;/code&gt;, and &lt;code&gt;do&lt;/code&gt; in this macro are syntactic sugar; they are entirely ignored. The idea is that you will write noise words (such as &lt;code&gt;from&lt;/code&gt;, &lt;code&gt;to&lt;/code&gt;, and &lt;code&gt;do&lt;/code&gt;) in those positions in the macro call.</source>
          <target state="translated">このマクロの、 &lt;code&gt;to&lt;/code&gt; 、および &lt;code&gt;do&lt;/code&gt; までの引数 &lt;code&gt;from&lt;/code&gt; 、シンタックスシュガーです。それらは完全に無視されます。アイデアは、マクロ呼び出しのそれらの位置にノイズワード（ &lt;code&gt;from&lt;/code&gt; 、 &lt;code&gt;to&lt;/code&gt; 、 &lt;code&gt;do&lt;/code&gt; など）を書き込むことです。</target>
        </trans-unit>
        <trans-unit id="ab831da1503b01e34a6cae5b52e070de7ee3e57d" translate="yes" xml:space="preserve">
          <source>The arguments &lt;var&gt;args&lt;/var&gt; are a list of keyword/argument pairs. Omitting a keyword is always equivalent to specifying it with value &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;var&gt;args&lt;/var&gt; は、キーワードと引数のペアのリストです。キーワードを省略することは、常に値 &lt;code&gt;nil&lt;/code&gt; で指定することと同じです。</target>
        </trans-unit>
        <trans-unit id="af5eede62c1d9440db74aefa6774703b63dee39b" translate="yes" xml:space="preserve">
          <source>The arguments &lt;var&gt;args&lt;/var&gt; are a list of keyword/argument pairs. Omitting a keyword is always equivalent to specifying it with value &lt;code&gt;nil&lt;/code&gt;. Here are the meaningful keywords:</source>
          <target state="translated">引数 &lt;var&gt;args&lt;/var&gt; は、キーワードと引数のペアのリストです。キーワードを省略することは、常に値 &lt;code&gt;nil&lt;/code&gt; で指定することと同じです。意味のあるキーワードは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7d2a621488d57b7f6ddca20e096977bc70d24abb" translate="yes" xml:space="preserve">
          <source>The arguments &lt;var&gt;destination&lt;/var&gt; and &lt;var&gt;display&lt;/var&gt; control what to do with the output from the subprocess, and whether to update the display as it comes in. For details, see the description of &lt;code&gt;call-process&lt;/code&gt;, above. If &lt;var&gt;destination&lt;/var&gt; is the integer 0, &lt;code&gt;call-process-region&lt;/code&gt; discards the output and returns &lt;code&gt;nil&lt;/code&gt; immediately, without waiting for the subprocess to finish (this only works if asynchronous subprocesses are supported; i.e., not on MS-DOS).</source>
          <target state="translated">引数 &lt;var&gt;destination&lt;/var&gt; と &lt;var&gt;display&lt;/var&gt; は、サブプロセスからの出力をどう処理するか、および表示が入ってくるときに更新するかどうかを制御します。詳細については、上記の &lt;code&gt;call-process&lt;/code&gt; の説明を参照してください。 &lt;var&gt;destination&lt;/var&gt; が整数0の場合、 &lt;code&gt;call-process-region&lt;/code&gt; は出力を破棄し、サブプロセスが終了するのを待たずにすぐに &lt;code&gt;nil&lt;/code&gt; を返します（これは非同期サブプロセスがサポートされている場合にのみ機能します。つまり、MS-DOSでは機能しません）。</target>
        </trans-unit>
        <trans-unit id="64da8840c3ed49a60f1595d4cb5d5e86fba3d26e" translate="yes" xml:space="preserve">
          <source>The arguments &lt;var&gt;front-advance&lt;/var&gt; and &lt;var&gt;rear-advance&lt;/var&gt; specify the marker insertion type for the start of the overlay and for the end of the overlay, respectively. See &lt;a href=&quot;marker-insertion-types#Marker-Insertion-Types&quot;&gt;Marker Insertion Types&lt;/a&gt;. If they are both &lt;code&gt;nil&lt;/code&gt;, the default, then the overlay extends to include any text inserted at the beginning, but not text inserted at the end. If &lt;var&gt;front-advance&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, text inserted at the beginning of the overlay is excluded from the overlay. If &lt;var&gt;rear-advance&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, text inserted at the end of the overlay is included in the overlay.</source>
          <target state="translated">引数 &lt;var&gt;front-advance&lt;/var&gt; と &lt;var&gt;rear-advance&lt;/var&gt; は、それぞれオーバーレイの開始と終了のマーカー挿入タイプを指定します。&lt;a href=&quot;marker-insertion-types#Marker-Insertion-Types&quot;&gt;マーカー挿入タイプを&lt;/a&gt;参照してください。両方ともデフォルトの &lt;code&gt;nil&lt;/code&gt; の場合、オーバーレイは最初に挿入されたテキストを含むように拡張されますが、最後に挿入されたテキストは含まれません。 &lt;var&gt;front-advance&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の場合、オーバーレイの先頭に挿入されたテキストはオーバーレイから除外されます。 &lt;var&gt;rear-advance&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の場合、オーバーレイの最後に挿入されたテキストがオーバーレイに含まれます。</target>
        </trans-unit>
        <trans-unit id="97c844f62d367d7173221f3f8a509a2c63cee23c" translate="yes" xml:space="preserve">
          <source>The arguments &lt;var&gt;host&lt;/var&gt; and &lt;var&gt;service&lt;/var&gt; specify where to connect to; &lt;var&gt;host&lt;/var&gt; is the host name (a string), and &lt;var&gt;service&lt;/var&gt; is the name of a defined network service (a string) or a port number (an integer like &lt;code&gt;80&lt;/code&gt; or an integer string like &lt;code&gt;&quot;80&quot;&lt;/code&gt;).</source>
          <target state="translated">&lt;var&gt;host&lt;/var&gt; と &lt;var&gt;service&lt;/var&gt; の引数は、接続先を指定します。 &lt;var&gt;host&lt;/var&gt; はホスト名（文字列）であり、 &lt;var&gt;service&lt;/var&gt; は定義されたネットワークサービスの名前（文字列）またはポート番号（ &lt;code&gt;80&lt;/code&gt; のような整数または &lt;code&gt;&quot;80&quot;&lt;/code&gt; ような整数文字列）です。</target>
        </trans-unit>
        <trans-unit id="34cdb521004558de19416e08fc21cef4475e568a" translate="yes" xml:space="preserve">
          <source>The arguments &lt;var&gt;min-value&lt;/var&gt; and &lt;var&gt;max-value&lt;/var&gt; should be numbers standing for the starting and final states of the operation. For instance, an operation that scans a buffer should set these to the results of &lt;code&gt;point-min&lt;/code&gt; and &lt;code&gt;point-max&lt;/code&gt; correspondingly. &lt;var&gt;max-value&lt;/var&gt; should be greater than &lt;var&gt;min-value&lt;/var&gt;.</source>
          <target state="translated">引数 &lt;var&gt;min-value&lt;/var&gt; および &lt;var&gt;max-value&lt;/var&gt; は、操作の開始状態と最終状態を表す数値である必要があります。たとえば、バッファをスキャンする操作では、これらをそれぞれ &lt;code&gt;point-min&lt;/code&gt; と &lt;code&gt;point-max&lt;/code&gt; の結果に設定する必要があります。 &lt;var&gt;max-value&lt;/var&gt; は &lt;var&gt;min-value&lt;/var&gt; より大きくする必要があります。</target>
        </trans-unit>
        <trans-unit id="cff38d80b42f070246735699a0bac4bf679938b6" translate="yes" xml:space="preserve">
          <source>The arguments &lt;var&gt;minibuf&lt;/var&gt; and &lt;var&gt;all-frames&lt;/var&gt; have the same meanings as in the function &lt;code&gt;next-window&lt;/code&gt; (see &lt;a href=&quot;cyclic-window-ordering#Cyclic-Window-Ordering&quot;&gt;Cyclic Window Ordering&lt;/a&gt;). Note that the &lt;var&gt;all-frames&lt;/var&gt; argument does &lt;em&gt;not&lt;/em&gt; behave exactly like in &lt;code&gt;get-buffer-window&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;var&gt;minibuf&lt;/var&gt; および &lt;var&gt;all-frames&lt;/var&gt; は、関数 &lt;code&gt;next-window&lt;/code&gt; の場合と同じ意味を持ちます（&lt;a href=&quot;cyclic-window-ordering#Cyclic-Window-Ordering&quot;&gt;Cyclic Window Orderingを&lt;/a&gt;参照）。 &lt;var&gt;all-frames&lt;/var&gt; 引数は、 &lt;code&gt;get-buffer-window&lt;/code&gt; の場合とまったく同じように&lt;em&gt;は&lt;/em&gt;動作し&lt;em&gt;ない&lt;/em&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="01d6b84175f7364145c82b076d43d4cd73606a88" translate="yes" xml:space="preserve">
          <source>The arguments &lt;var&gt;params&lt;/var&gt; are specified as keyword/value pairs. All the parameters are optional, but if no parameters are specified, the function will do nothing and return &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;var&gt;params&lt;/var&gt; は、キーワードと値のペアとして指定されます。すべてのパラメーターはオプションですが、パラメーターが指定されていない場合、関数は何もせず、 &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="dc7481fa7deb6b4399c57ef9a83c397322635635" translate="yes" xml:space="preserve">
          <source>The arguments &lt;var&gt;seconds&lt;/var&gt; and &lt;var&gt;millisec&lt;/var&gt; let you specify timeout periods. The former specifies a period measured in seconds and the latter specifies one measured in milliseconds. The two time periods thus specified are added together, and &lt;code&gt;accept-process-output&lt;/code&gt; returns after that much time, even if there is no subprocess output.</source>
          <target state="translated">引数 &lt;var&gt;seconds&lt;/var&gt; および &lt;var&gt;millisec&lt;/var&gt; を使用すると、タイムアウト期間を指定できます。前者は秒単位で測定される期間を指定し、後者はミリ秒単位で測定される期間を指定します。このように指定された2つの期間が加算され、サブプロセス出力がない場合でも、 &lt;code&gt;accept-process-output&lt;/code&gt; はその時間の後に戻ります。</target>
        </trans-unit>
        <trans-unit id="40b8cf91d8ad0d522899259a939f943a2be85226" translate="yes" xml:space="preserve">
          <source>The arguments after the protected form are handlers. Each handler lists one or more &lt;em&gt;condition names&lt;/em&gt; (which are symbols) to specify which errors it will handle. The error symbol specified when an error is signaled also defines a list of condition names. A handler applies to an error if they have any condition names in common. In the example above, there is one handler, and it specifies one condition name, &lt;code&gt;error&lt;/code&gt;, which covers all errors.</source>
          <target state="translated">保護されたフォームの後の引数はハンドラーです。各ハンドラーは、1つ以上の&lt;em&gt;条件名&lt;/em&gt;（シンボル）をリストして、処理するエラーを指定します。エラーが通知されたときに指定されるエラー記号は、条件名のリストも定義します。共通の条件名がある場合、ハンドラーはエラーに適用されます。上記の例では、ハンドラーが1つあり、すべてのエラーをカバーする1つの条件名 &lt;code&gt;error&lt;/code&gt; を指定しています。</target>
        </trans-unit>
        <trans-unit id="9212152c0a1d54415d1a64052fa71d9a41f7a676" translate="yes" xml:space="preserve">
          <source>The arguments and the forms in each argument are processed in order, and if a previous form already translates &lt;var&gt;to&lt;/var&gt; to some other character, say &lt;var&gt;to-alt&lt;/var&gt;, &lt;var&gt;from&lt;/var&gt; is also translated to &lt;var&gt;to-alt&lt;/var&gt;.</source>
          <target state="translated">引数と各引数のフォームは順番に処理され、前のフォームがすでに他の文字に変換さ &lt;var&gt;to&lt;/var&gt; ている場合、たとえば &lt;var&gt;to-alt&lt;/var&gt; 、 &lt;var&gt;from&lt;/var&gt; も &lt;var&gt;to-alt&lt;/var&gt; に変換されます。</target>
        </trans-unit>
        <trans-unit id="814b87943ef37ce98ee6242e77f736c9eb2fb447" translate="yes" xml:space="preserve">
          <source>The arguments are handled in almost the same way as for &lt;code&gt;call-process&lt;/code&gt;, with the following differences:</source>
          <target state="translated">引数は、 &lt;code&gt;call-process&lt;/code&gt; の場合とほぼ同じ方法で処理されますが、次の違いがあります。</target>
        </trans-unit>
        <trans-unit id="fcce85c9773f3a972b86865cc6636258080a75e9" translate="yes" xml:space="preserve">
          <source>The array (either a string or a vector) is a keyboard macro. The events used so far in the lookup form a complete key, and the array is its binding. See &lt;a href=&quot;keyboard-macros#Keyboard-Macros&quot;&gt;Keyboard Macros&lt;/a&gt;, for more information.</source>
          <target state="translated">配列（文字列またはベクトル）はキーボードマクロです。これまでルックアップで使用されたイベントは完全なキーを形成し、配列がそのバインディングです。詳細については、&lt;a href=&quot;keyboard-macros#Keyboard-Macros&quot;&gt;キーボードマクロを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="963886fcccc037b6f38c2a2596d1c5be6615d83d" translate="yes" xml:space="preserve">
          <source>The array type is a subset of the sequence type, and contains the string type, the vector type, the bool-vector type, and the char-table type.</source>
          <target state="translated">配列型は,シーケンス型のサブセットであり,文字列型,ベクトル型,bool-vector型,char-table型を含みます.</target>
        </trans-unit>
        <trans-unit id="0f5f28eb8e784010e8d3a08cf4b1d401f6ae42af" translate="yes" xml:space="preserve">
          <source>The ascent and descent of this font. The sum of these two numbers gives the font height.</source>
          <target state="translated">このフォントの上昇と下降。これら2つの数値の合計がフォントの高さを表します。</target>
        </trans-unit>
        <trans-unit id="7e216dedda9faf32fa78cf8ce88437f4d994fd23" translate="yes" xml:space="preserve">
          <source>The ascent and descent of this font. The sum of these two numbers should be equal to the value of &lt;var&gt;height&lt;/var&gt; above.</source>
          <target state="translated">The ascent and descent of this font. The sum of these two numbers should be equal to the value of &lt;var&gt;height&lt;/var&gt; above.</target>
        </trans-unit>
        <trans-unit id="d2192054ba53475e5b125700aa3f3380335e17a2" translate="yes" xml:space="preserve">
          <source>The associated buffer of the process.</source>
          <target state="translated">プロセスの関連するバッファ。</target>
        </trans-unit>
        <trans-unit id="4e9bf1b1a4172ecf859689db8cd8cd68a80b729f" translate="yes" xml:space="preserve">
          <source>The associated value is the process buffer.</source>
          <target state="translated">関連する値はプロセスバッファです。</target>
        </trans-unit>
        <trans-unit id="a2b38e01be3ffa82581d5a54dfe09f0aeda1f048" translate="yes" xml:space="preserve">
          <source>The associated value is the process filter function. See &lt;a href=&quot;filter-functions#Filter-Functions&quot;&gt;Filter Functions&lt;/a&gt;.</source>
          <target state="translated">The associated value is the process filter function. See &lt;a href=&quot;filter-functions#Filter-Functions&quot;&gt;Filter Functions&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="48d7a92d54184811d7707356f98484aee137939d" translate="yes" xml:space="preserve">
          <source>The associated value is the process sentinel function. See &lt;a href=&quot;sentinels#Sentinels&quot;&gt;Sentinels&lt;/a&gt;.</source>
          <target state="translated">The associated value is the process sentinel function. See &lt;a href=&quot;sentinels#Sentinels&quot;&gt;Sentinels&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="95db3e2086e53bdd69e52a5a8427bb4c66aa1f51" translate="yes" xml:space="preserve">
          <source>The association list describing the buffer-local variable bindings of this buffer, not including the built-in buffer-local bindings that have special slots in the buffer object. (Those slots are omitted from this table.) See &lt;a href=&quot;buffer_002dlocal-variables#Buffer_002dLocal-Variables&quot;&gt;Buffer-Local Variables&lt;/a&gt;.</source>
          <target state="translated">The association list describing the buffer-local variable bindings of this buffer, not including the built-in buffer-local bindings that have special slots in the buffer object. (Those slots are omitted from this table.) See &lt;a href=&quot;buffer_002dlocal-variables#Buffer_002dLocal-Variables&quot;&gt;Buffer-Local Variables&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="cf7184822d397bb6098b38e6c59e1389ef5652a4" translate="yes" xml:space="preserve">
          <source>The attributes &lt;code&gt;:weight&lt;/code&gt; and &lt;code&gt;:width&lt;/code&gt; have symbolic values in a range centered around &lt;code&gt;normal&lt;/code&gt;. Matches that are more extreme (farther from &lt;code&gt;normal&lt;/code&gt;) are somewhat preferred to matches that are less extreme (closer to &lt;code&gt;normal&lt;/code&gt;); this is designed to ensure that non-normal faces contrast with normal ones, whenever possible.</source>
          <target state="translated">The attributes &lt;code&gt;:weight&lt;/code&gt; and &lt;code&gt;:width&lt;/code&gt; have symbolic values in a range centered around &lt;code&gt;normal&lt;/code&gt; . Matches that are more extreme (farther from &lt;code&gt;normal&lt;/code&gt; ) are somewhat preferred to matches that are less extreme (closer to &lt;code&gt;normal&lt;/code&gt; ); this is designed to ensure that non-normal faces contrast with normal ones, whenever possible.</target>
        </trans-unit>
        <trans-unit id="0abb4a0617aec66a698231d1cbca2e1c3a48e616" translate="yes" xml:space="preserve">
          <source>The attributes of remote files can be cached for better performance. If they are changed outside of Emacs&amp;rsquo;s control, the cached values become invalid, and must be reread.</source>
          <target state="translated">The attributes of remote files can be cached for better performance. If they are changed outside of Emacs&amp;rsquo;s control, the cached values become invalid, and must be reread.</target>
        </trans-unit>
        <trans-unit id="23608b582d3ca9bf4c877cee9d51711a0c0a0644" translate="yes" xml:space="preserve">
          <source>The autoloaded file usually contains other definitions and may require or provide one or more features. If the file is not completely loaded (due to an error in the evaluation of its contents), any function definitions or &lt;code&gt;provide&lt;/code&gt; calls that occurred during the load are undone. This is to ensure that the next attempt to call any function autoloading from this file will try again to load the file. If not for this, then some of the functions in the file might be defined by the aborted load, but fail to work properly for the lack of certain subroutines not loaded successfully because they come later in the file.</source>
          <target state="translated">The autoloaded file usually contains other definitions and may require or provide one or more features. If the file is not completely loaded (due to an error in the evaluation of its contents), any function definitions or &lt;code&gt;provide&lt;/code&gt; calls that occurred during the load are undone. This is to ensure that the next attempt to call any function autoloading from this file will try again to load the file. If not for this, then some of the functions in the file might be defined by the aborted load, but fail to work properly for the lack of certain subroutines not loaded successfully because they come later in the file.</target>
        </trans-unit>
        <trans-unit id="3c1146df3835709f3489eed6acaaa81381b10221" translate="yes" xml:space="preserve">
          <source>The average width of the font characters. If this is zero, Emacs uses the value of &lt;var&gt;space-width&lt;/var&gt; instead, when it calculates text layout on display.</source>
          <target state="translated">The average width of the font characters. If this is zero, Emacs uses the value of &lt;var&gt;space-width&lt;/var&gt; instead, when it calculates text layout on display.</target>
        </trans-unit>
        <trans-unit id="704160cb67753b1d63800eb641605e7fceeb4095" translate="yes" xml:space="preserve">
          <source>The background stipple, a bitmap.</source>
          <target state="translated">背景のスティップル、ビットマップです。</target>
        </trans-unit>
        <trans-unit id="4dfd0f8fb905e11c58077fc23caa09ad33e261d1" translate="yes" xml:space="preserve">
          <source>The backquote-style pattern is more concise, resembles the structure of &lt;var&gt;expval&lt;/var&gt;, and avoids binding &lt;code&gt;ls&lt;/code&gt;.</source>
          <target state="translated">The backquote-style pattern is more concise, resembles the structure of &lt;var&gt;expval&lt;/var&gt; , and avoids binding &lt;code&gt;ls&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="79f62846ef32f37cfacd61a3173063b8365ba096" translate="yes" xml:space="preserve">
          <source>The backslash and newline immediately following the double-quote are a convention used only in the preloaded uncompiled Lisp files such as</source>
          <target state="translated">ダブルクォートの直後のバックスラッシュと改行は、プリロードされた</target>
        </trans-unit>
        <trans-unit id="de1dd4b617fb02852473458167ad4aff4326193a" translate="yes" xml:space="preserve">
          <source>The backtrace buffer is killed automatically when you continue execution.</source>
          <target state="translated">バックトレースバッファは、実行を続けると自動的に終了します。</target>
        </trans-unit>
        <trans-unit id="ddf6b6a15b9c301145e71531518322c635178411" translate="yes" xml:space="preserve">
          <source>The backtrace buffer is read-only and uses a special major mode, Debugger mode, in which letters are defined as debugger commands. The usual Emacs editing commands are available; thus, you can switch windows to examine the buffer that was being edited at the time of the error, switch buffers, visit files, or do any other sort of editing. However, the debugger is a recursive editing level (see &lt;a href=&quot;recursive-editing#Recursive-Editing&quot;&gt;Recursive Editing&lt;/a&gt;) and it is wise to go back to the backtrace buffer and exit the debugger (with the</source>
          <target state="translated">The backtrace buffer is read-only and uses a special major mode, Debugger mode, in which letters are defined as debugger commands. The usual Emacs editing commands are available; thus, you can switch windows to examine the buffer that was being edited at the time of the error, switch buffers, visit files, or do any other sort of editing. However, the debugger is a recursive editing level (see &lt;a href=&quot;recursive-editing#Recursive-Editing&quot;&gt;Recursive Editing&lt;/a&gt;) and it is wise to go back to the backtrace buffer and exit the debugger (with the</target>
        </trans-unit>
        <trans-unit id="23b99814c4ea22e4979913b8fb0652d765957bab" translate="yes" xml:space="preserve">
          <source>The backtrace buffer shows you the functions that are executing and their argument values. When a backtrace buffer is created, it shows each stack frame on one, possibly very long, line. (A stack frame is the place where the Lisp interpreter records information about a particular invocation of a function.) The most recently called function will be at the top.</source>
          <target state="translated">バックトレースバッファは、実行中の関数とその引数の値を表示します。バックトレースバッファが作成されると、各スタックフレームが一行に表示されます。(スタックフレームとは、Lispインタプリタが関数の特定の呼び出しに関する情報を記録する場所です)。最近呼び出された関数が一番上に表示されます。</target>
        </trans-unit>
        <trans-unit id="8595c07de42c7db906c6a77faaf01296ee5350c3" translate="yes" xml:space="preserve">
          <source>The basic Emacs command for clicking on links is</source>
          <target state="translated">リンクをクリックするための基本的なEmacsコマンドは</target>
        </trans-unit>
        <trans-unit id="23904938ca5f99404695e7880a93c552b6870965" translate="yes" xml:space="preserve">
          <source>The basic concepts of Emacs Lisp packages.</source>
          <target state="translated">Emacs Lispパッケージの基本的な考え方。</target>
        </trans-unit>
        <trans-unit id="dd326d0a3d35091e15c16c7f337b0ac66431cc24" translate="yes" xml:space="preserve">
          <source>The basic function for creating network connections and network servers is &lt;code&gt;make-network-process&lt;/code&gt;. It can do either of those jobs, depending on the arguments you give it.</source>
          <target state="translated">The basic function for creating network connections and network servers is &lt;code&gt;make-network-process&lt;/code&gt; . It can do either of those jobs, depending on the arguments you give it.</target>
        </trans-unit>
        <trans-unit id="d950bb62899f50881bf10776ee448a653788f392" translate="yes" xml:space="preserve">
          <source>The basic object of editing.</source>
          <target state="translated">編集の基本的な対象。</target>
        </trans-unit>
        <trans-unit id="f5a66fbf4e523bf88c788fc3850d6087dd15ab3a" translate="yes" xml:space="preserve">
          <source>The basic problem.</source>
          <target state="translated">根本的な問題。</target>
        </trans-unit>
        <trans-unit id="181c1d01d991db4a55dd6d74f5a790be57e3b4e0" translate="yes" xml:space="preserve">
          <source>The basic textual scrolling functions are &lt;code&gt;scroll-up&lt;/code&gt; (which scrolls forward) and &lt;code&gt;scroll-down&lt;/code&gt; (which scrolls backward). In these function names, &amp;ldquo;up&amp;rdquo; and &amp;ldquo;down&amp;rdquo; refer to the direction of motion of the buffer text relative to the window. Imagine that the text is written on a long roll of paper and that the scrolling commands move the paper up and down. Thus, if you are looking at the middle of a buffer and repeatedly call &lt;code&gt;scroll-down&lt;/code&gt;, you will eventually see the beginning of the buffer.</source>
          <target state="translated">The basic textual scrolling functions are &lt;code&gt;scroll-up&lt;/code&gt; (which scrolls forward) and &lt;code&gt;scroll-down&lt;/code&gt; (which scrolls backward). In these function names, &amp;ldquo;up&amp;rdquo; and &amp;ldquo;down&amp;rdquo; refer to the direction of motion of the buffer text relative to the window. Imagine that the text is written on a long roll of paper and that the scrolling commands move the paper up and down. Thus, if you are looking at the middle of a buffer and repeatedly call &lt;code&gt;scroll-down&lt;/code&gt; , you will eventually see the beginning of the buffer.</target>
        </trans-unit>
        <trans-unit id="d4701282aa39cd5d0eb4d386c2b17738d17c6095" translate="yes" xml:space="preserve">
          <source>The basis for &lt;code&gt;symbol-file&lt;/code&gt; is the data in the variable &lt;code&gt;load-history&lt;/code&gt;.</source>
          <target state="translated">The basis for &lt;code&gt;symbol-file&lt;/code&gt; is the data in the variable &lt;code&gt;load-history&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2a5348bdb54f46d592e5625886bbc8814fd8b74f" translate="yes" xml:space="preserve">
          <source>The behavior can be fixed by making a new parent window when splitting &lt;var&gt;W2&lt;/var&gt;. The variable described next allows that to be done.</source>
          <target state="translated">The behavior can be fixed by making a new parent window when splitting &lt;var&gt;W2&lt;/var&gt; . The variable described next allows that to be done.</target>
        </trans-unit>
        <trans-unit id="64b48110852054851530f6c1baded1e70feabdf3" translate="yes" xml:space="preserve">
          <source>The behavior is also controlled by &lt;var&gt;alist&lt;/var&gt; entries for &lt;code&gt;inhibit-same-window&lt;/code&gt;, &lt;code&gt;reusable-frames&lt;/code&gt; and &lt;code&gt;inhibit-switch-frame&lt;/code&gt;, like &lt;code&gt;display-buffer-reuse-window&lt;/code&gt; does.</source>
          <target state="translated">The behavior is also controlled by &lt;var&gt;alist&lt;/var&gt; entries for &lt;code&gt;inhibit-same-window&lt;/code&gt; , &lt;code&gt;reusable-frames&lt;/code&gt; and &lt;code&gt;inhibit-switch-frame&lt;/code&gt; , like &lt;code&gt;display-buffer-reuse-window&lt;/code&gt; does.</target>
        </trans-unit>
        <trans-unit id="25ff2d06be08150ca72615f6107e00c6cbe0b1b1" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;display-buffer&lt;/code&gt; is highly customizable. To understand how customizations are used in practice, you may wish to study examples illustrating the order of precedence which &lt;code&gt;display-buffer&lt;/code&gt; uses to call action functions (see &lt;a href=&quot;precedence-of-action-functions#Precedence-of-Action-Functions&quot;&gt;Precedence of Action Functions&lt;/a&gt;). To avoid conflicts between Lisp programs calling &lt;code&gt;display-buffer&lt;/code&gt; and user customizations of its behavior, it may make sense to follow a number of guidelines which are sketched in the final part of this section (see &lt;a href=&quot;the-zen-of-buffer-display#The-Zen-of-Buffer-Display&quot;&gt;The Zen of Buffer Display&lt;/a&gt;).</source>
          <target state="translated">The behavior of &lt;code&gt;display-buffer&lt;/code&gt; is highly customizable. To understand how customizations are used in practice, you may wish to study examples illustrating the order of precedence which &lt;code&gt;display-buffer&lt;/code&gt; uses to call action functions (see &lt;a href=&quot;precedence-of-action-functions#Precedence-of-Action-Functions&quot;&gt;Precedence of Action Functions&lt;/a&gt;). To avoid conflicts between Lisp programs calling &lt;code&gt;display-buffer&lt;/code&gt; and user customizations of its behavior, it may make sense to follow a number of guidelines which are sketched in the final part of this section (see &lt;a href=&quot;the-zen-of-buffer-display#The-Zen-of-Buffer-Display&quot;&gt;The Zen of Buffer Display&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="48fe4299049d7c93ed4a533dc27f43e4ebb09779" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;fit-frame-to-buffer&lt;/code&gt; can be controlled with the help of the two options listed next.</source>
          <target state="translated">The behavior of &lt;code&gt;fit-frame-to-buffer&lt;/code&gt; can be controlled with the help of the two options listed next.</target>
        </trans-unit>
        <trans-unit id="14d6ad7c7b1496920e84cec590095837471103e0" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;parse-partial-sexp&lt;/code&gt; is also affected by &lt;code&gt;parse-sexp-lookup-properties&lt;/code&gt; (see &lt;a href=&quot;syntax-properties#Syntax-Properties&quot;&gt;Syntax Properties&lt;/a&gt;).</source>
          <target state="translated">The behavior of &lt;code&gt;parse-partial-sexp&lt;/code&gt; is also affected by &lt;code&gt;parse-sexp-lookup-properties&lt;/code&gt; (see &lt;a href=&quot;syntax-properties#Syntax-Properties&quot;&gt;Syntax Properties&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="f4c9653c1321ba597070b3a8bcef63917fd4713f" translate="yes" xml:space="preserve">
          <source>The behavior of buffer display actions (see &lt;a href=&quot;choosing-window#Choosing-Window&quot;&gt;Choosing Window&lt;/a&gt;) can be further modified by the following user options.</source>
          <target state="translated">The behavior of buffer display actions (see &lt;a href=&quot;choosing-window#Choosing-Window&quot;&gt;Choosing Window&lt;/a&gt;) can be further modified by the following user options.</target>
        </trans-unit>
        <trans-unit id="af430c0aab9b6a6a7fdfe43e9d585a9057ba6897" translate="yes" xml:space="preserve">
          <source>The behavior of child frames deviates from that of top-level frames in a number of other ways as well. Here we sketch a few of them:</source>
          <target state="translated">子フレームの動作は、トップレベルフレームの動作とは異なる点がいくつかあります。ここでは、そのうちのいくつかをスケッチします。</target>
        </trans-unit>
        <trans-unit id="b740a83bb87c1094d716f669539562dedcf7a073" translate="yes" xml:space="preserve">
          <source>The behavior of this function may be altered by the window parameters of &lt;var&gt;window&lt;/var&gt;, so long as the variable &lt;code&gt;ignore-window-parameters&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;. If the value of the &lt;code&gt;delete-other-windows&lt;/code&gt; window parameter is &lt;code&gt;t&lt;/code&gt;, this function ignores all other window parameters. Otherwise, if the value of the &lt;code&gt;delete-other-windows&lt;/code&gt; window parameter is a function, that function is called with the argument &lt;var&gt;window&lt;/var&gt;, in lieu of the usual action of &lt;code&gt;delete-other-windows&lt;/code&gt;. See &lt;a href=&quot;window-parameters#Window-Parameters&quot;&gt;Window Parameters&lt;/a&gt;.</source>
          <target state="translated">The behavior of this function may be altered by the window parameters of &lt;var&gt;window&lt;/var&gt; , so long as the variable &lt;code&gt;ignore-window-parameters&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; . If the value of the &lt;code&gt;delete-other-windows&lt;/code&gt; window parameter is &lt;code&gt;t&lt;/code&gt; , this function ignores all other window parameters. Otherwise, if the value of the &lt;code&gt;delete-other-windows&lt;/code&gt; window parameter is a function, that function is called with the argument &lt;var&gt;window&lt;/var&gt; , in lieu of the usual action of &lt;code&gt;delete-other-windows&lt;/code&gt; . See &lt;a href=&quot;window-parameters#Window-Parameters&quot;&gt;Window Parameters&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4f60ec1dc913f2d4aba64531e32d867d8e2f6ecb" translate="yes" xml:space="preserve">
          <source>The behavior of this function may be altered by the window parameters of &lt;var&gt;window&lt;/var&gt;, so long as the variable &lt;code&gt;ignore-window-parameters&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;. If the value of the &lt;code&gt;delete-window&lt;/code&gt; window parameter is &lt;code&gt;t&lt;/code&gt;, this function ignores all other window parameters. Otherwise, if the value of the &lt;code&gt;delete-window&lt;/code&gt; window parameter is a function, that function is called with the argument &lt;var&gt;window&lt;/var&gt;, in lieu of the usual action of &lt;code&gt;delete-window&lt;/code&gt;. See &lt;a href=&quot;window-parameters#Window-Parameters&quot;&gt;Window Parameters&lt;/a&gt;.</source>
          <target state="translated">The behavior of this function may be altered by the window parameters of &lt;var&gt;window&lt;/var&gt; , so long as the variable &lt;code&gt;ignore-window-parameters&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; . If the value of the &lt;code&gt;delete-window&lt;/code&gt; window parameter is &lt;code&gt;t&lt;/code&gt; , this function ignores all other window parameters. Otherwise, if the value of the &lt;code&gt;delete-window&lt;/code&gt; window parameter is a function, that function is called with the argument &lt;var&gt;window&lt;/var&gt; , in lieu of the usual action of &lt;code&gt;delete-window&lt;/code&gt; . See &lt;a href=&quot;window-parameters#Window-Parameters&quot;&gt;Window Parameters&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8909897602cd17a4273ebb64ab850510d93123be" translate="yes" xml:space="preserve">
          <source>The behavior of this function may be altered by the window parameters of &lt;var&gt;window&lt;/var&gt;, so long as the variable &lt;code&gt;ignore-window-parameters&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;. If the value of the &lt;code&gt;split-window&lt;/code&gt; window parameter is &lt;code&gt;t&lt;/code&gt;, this function ignores all other window parameters. Otherwise, if the value of the &lt;code&gt;split-window&lt;/code&gt; window parameter is a function, that function is called with the arguments &lt;var&gt;window&lt;/var&gt;, &lt;var&gt;size&lt;/var&gt;, and &lt;var&gt;side&lt;/var&gt;, in lieu of the usual action of &lt;code&gt;split-window&lt;/code&gt;. Otherwise, this function obeys the &lt;code&gt;window-atom&lt;/code&gt; or &lt;code&gt;window-side&lt;/code&gt; window parameter, if any. See &lt;a href=&quot;window-parameters#Window-Parameters&quot;&gt;Window Parameters&lt;/a&gt;.</source>
          <target state="translated">The behavior of this function may be altered by the window parameters of &lt;var&gt;window&lt;/var&gt; , so long as the variable &lt;code&gt;ignore-window-parameters&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; . If the value of the &lt;code&gt;split-window&lt;/code&gt; window parameter is &lt;code&gt;t&lt;/code&gt; , this function ignores all other window parameters. Otherwise, if the value of the &lt;code&gt;split-window&lt;/code&gt; window parameter is a function, that function is called with the arguments &lt;var&gt;window&lt;/var&gt; , &lt;var&gt;size&lt;/var&gt; , and &lt;var&gt;side&lt;/var&gt; , in lieu of the usual action of &lt;code&gt;split-window&lt;/code&gt; . Otherwise, this function obeys the &lt;code&gt;window-atom&lt;/code&gt; or &lt;code&gt;window-side&lt;/code&gt; window parameter, if any. See &lt;a href=&quot;window-parameters#Window-Parameters&quot;&gt;Window Parameters&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9cc45d4c978076585a6ff258d4628feaba65d091" translate="yes" xml:space="preserve">
          <source>The bidirectional properties of characters can be overridden by inserting into the text special directional control characters, LEFT-TO-RIGHT OVERRIDE (</source>
          <target state="translated">キ ャ ラ ク タ の双方向特性は、 テ キ ス ト 内に特殊な方向制御キ ャ ラ ク タ LEFT-TO-RIGHT OVERRIDE ()を挿入す る こ と で上書きで き ます。</target>
        </trans-unit>
        <trans-unit id="7ddc9759fd2b7786cbd37b4781873ad47f324e2a" translate="yes" xml:space="preserve">
          <source>The binding whose definition is &lt;code&gt;(&quot;--&quot;)&lt;/code&gt; is a separator line. Like a real menu item, the separator has a key symbol, in this case &lt;code&gt;separator-replace-tags&lt;/code&gt;. If one menu has two separators, they must have two different key symbols.</source>
          <target state="translated">The binding whose definition is &lt;code&gt;(&quot;--&quot;)&lt;/code&gt; is a separator line. Like a real menu item, the separator has a key symbol, in this case &lt;code&gt;separator-replace-tags&lt;/code&gt; . If one menu has two separators, they must have two different key symbols.</target>
        </trans-unit>
        <trans-unit id="8bc0cde3ac12a6a4acea584ef36bd73f7c9731fc" translate="yes" xml:space="preserve">
          <source>The bitwise operations in Emacs Lisp apply only to integers.</source>
          <target state="translated">Emacs Lisp のビット演算は整数にのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="457ac28d787de6ecd95feb0905b63526b367e16f" translate="yes" xml:space="preserve">
          <source>The body of the notification. If &lt;var&gt;body&lt;/var&gt; is a string, it specifies the text of the notification message. Use embedded newlines to control how the text is broken into lines. The body text can be up to 255 characters long, and will be truncated if it&amp;rsquo;s longer. Unlike with D-Bus, the body text should be plain text, with no markup.</source>
          <target state="translated">The body of the notification. If &lt;var&gt;body&lt;/var&gt; is a string, it specifies the text of the notification message. Use embedded newlines to control how the text is broken into lines. The body text can be up to 255 characters long, and will be truncated if it&amp;rsquo;s longer. Unlike with D-Bus, the body text should be plain text, with no markup.</target>
        </trans-unit>
        <trans-unit id="c5d378c0de07cb367247e7065675fce352e2e8da" translate="yes" xml:space="preserve">
          <source>The brief description is also taken from the first line. Here, it is &amp;lsquo;</source>
          <target state="translated">The brief description is also taken from the first line. Here, it is &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="fbd2e470098b8a59979b42d91f57778cec2ac8a5" translate="yes" xml:space="preserve">
          <source>The broadcast address.</source>
          <target state="translated">放送用のアドレスです。</target>
        </trans-unit>
        <trans-unit id="9444e738ec3ad2f036ba7f9ef0d9c118bd783945" translate="yes" xml:space="preserve">
          <source>The buffer file name indicates which file is visited.</source>
          <target state="translated">バッファファイル名は、どのファイルを訪問しているかを示します。</target>
        </trans-unit>
        <trans-unit id="46b639fbc76f834ed60b16f7c2c36f68d4fa8701" translate="yes" xml:space="preserve">
          <source>The buffer object for the buffer that has been killed remains in existence as long as anything refers to it, but it is specially marked so that you cannot make it current or display it. Killed buffers retain their identity, however; if you kill two distinct buffers, they remain distinct according to &lt;code&gt;eq&lt;/code&gt; although both are dead.</source>
          <target state="translated">The buffer object for the buffer that has been killed remains in existence as long as anything refers to it, but it is specially marked so that you cannot make it current or display it. Killed buffers retain their identity, however; if you kill two distinct buffers, they remain distinct according to &lt;code&gt;eq&lt;/code&gt; although both are dead.</target>
        </trans-unit>
        <trans-unit id="2bb148bf41b83dd7c67c5ca983b4f737e34081a2" translate="yes" xml:space="preserve">
          <source>The buffer position of the character clicked on in the text area; or, if the click was outside the text area, the window area where it occurred. It is one of the symbols &lt;code&gt;mode-line&lt;/code&gt;, &lt;code&gt;header-line&lt;/code&gt;, &lt;code&gt;tab-line&lt;/code&gt;, &lt;code&gt;vertical-line&lt;/code&gt;, &lt;code&gt;left-margin&lt;/code&gt;, &lt;code&gt;right-margin&lt;/code&gt;, &lt;code&gt;left-fringe&lt;/code&gt;, or &lt;code&gt;right-fringe&lt;/code&gt;.</source>
          <target state="translated">The buffer position of the character clicked on in the text area; or, if the click was outside the text area, the window area where it occurred. It is one of the symbols &lt;code&gt;mode-line&lt;/code&gt; , &lt;code&gt;header-line&lt;/code&gt; , &lt;code&gt;tab-line&lt;/code&gt; , &lt;code&gt;vertical-line&lt;/code&gt; , &lt;code&gt;left-margin&lt;/code&gt; , &lt;code&gt;right-margin&lt;/code&gt; , &lt;code&gt;left-fringe&lt;/code&gt; , or &lt;code&gt;right-fringe&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1e0c6a9c7f2f23737ee9bec0aa37f53da73d239e" translate="yes" xml:space="preserve">
          <source>The buffer to associate with the process. The value can be either a buffer or a string that names a buffer. Process output goes at the end of that buffer, unless you specify an output stream or filter function to handle the output. If &lt;var&gt;buffer&lt;/var&gt; is not given, the process buffer&amp;rsquo;s name is taken from the value of the &lt;code&gt;:name&lt;/code&gt; keyword.</source>
          <target state="translated">The buffer to associate with the process. The value can be either a buffer or a string that names a buffer. Process output goes at the end of that buffer, unless you specify an output stream or filter function to handle the output. If &lt;var&gt;buffer&lt;/var&gt; is not given, the process buffer&amp;rsquo;s name is taken from the value of the &lt;code&gt;:name&lt;/code&gt; keyword.</target>
        </trans-unit>
        <trans-unit id="42a7a981c12f34f51806e6af8e44330ecc1873b4" translate="yes" xml:space="preserve">
          <source>The buffer which its text is generated in.</source>
          <target state="translated">そのテキストが生成されるバッファ。</target>
        </trans-unit>
        <trans-unit id="72b7af992a3abc5d40c1f25fff8d07a12b73f582" translate="yes" xml:space="preserve">
          <source>The buffer will only auto-revert if it is marked unmodified. Hence, you will have to make sure that various functions mark the buffer modified if and only if either the buffer contains information that might be lost by reverting, or there is reason to believe that the user might be inconvenienced by auto-reverting, because he is actively working on the buffer. The user can always override this by manually adjusting the modified status of the buffer. To support this, calling the &lt;code&gt;revert-buffer-function&lt;/code&gt; on a buffer that is marked unmodified should always keep the buffer marked unmodified.</source>
          <target state="translated">The buffer will only auto-revert if it is marked unmodified. Hence, you will have to make sure that various functions mark the buffer modified if and only if either the buffer contains information that might be lost by reverting, or there is reason to believe that the user might be inconvenienced by auto-reverting, because he is actively working on the buffer. The user can always override this by manually adjusting the modified status of the buffer. To support this, calling the &lt;code&gt;revert-buffer-function&lt;/code&gt; on a buffer that is marked unmodified should always keep the buffer marked unmodified.</target>
        </trans-unit>
        <trans-unit id="873949287545ef0ee1c24f3a275146b7c289aea3" translate="yes" xml:space="preserve">
          <source>The buffer&amp;rsquo;s value of point, as of the last time a redisplay completed in this window.</source>
          <target state="translated">The buffer&amp;rsquo;s value of point, as of the last time a redisplay completed in this window.</target>
        </trans-unit>
        <trans-unit id="4ee204383471ebb747819beeda4333dfcb08b7c3" translate="yes" xml:space="preserve">
          <source>The buffer-local value of &lt;var&gt;variable&lt;/var&gt; starts out as the same value &lt;var&gt;variable&lt;/var&gt; previously had. If &lt;var&gt;variable&lt;/var&gt; was void, it remains void.</source>
          <target state="translated">The buffer-local value of &lt;var&gt;variable&lt;/var&gt; starts out as the same value &lt;var&gt;variable&lt;/var&gt; previously had. If &lt;var&gt;variable&lt;/var&gt; was void, it remains void.</target>
        </trans-unit>
        <trans-unit id="36ca484b5abddc8c8e81e5e6b9502ec9f88a67b6" translate="yes" xml:space="preserve">
          <source>The buffer-local value of this variable holds the symbol for the current major mode. Its default value holds the default major mode for new buffers. The standard default value is &lt;code&gt;fundamental-mode&lt;/code&gt;.</source>
          <target state="translated">The buffer-local value of this variable holds the symbol for the current major mode. Its default value holds the default major mode for new buffers. The standard default value is &lt;code&gt;fundamental-mode&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1e4cd19bcf9c24b5b8a282bde2c2fd833888ed62" translate="yes" xml:space="preserve">
          <source>The buffer-local variable &lt;code&gt;enable-multibyte-characters&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt; in multibyte buffers, and &lt;code&gt;nil&lt;/code&gt; in unibyte ones. The mode line also indicates whether a buffer is multibyte or not. With a graphical display, in a multibyte buffer, the portion of the mode line that indicates the character set has a tooltip that (amongst other things) says that the buffer is multibyte. In a unibyte buffer, the character set indicator is absent. Thus, in a unibyte buffer (when using a graphical display) there is normally nothing before the indication of the visited file&amp;rsquo;s end-of-line convention (colon, backslash, etc.), unless you are using an input method.</source>
          <target state="translated">The buffer-local variable &lt;code&gt;enable-multibyte-characters&lt;/code&gt; is non- &lt;code&gt;nil&lt;/code&gt; in multibyte buffers, and &lt;code&gt;nil&lt;/code&gt; in unibyte ones. The mode line also indicates whether a buffer is multibyte or not. With a graphical display, in a multibyte buffer, the portion of the mode line that indicates the character set has a tooltip that (amongst other things) says that the buffer is multibyte. In a unibyte buffer, the character set indicator is absent. Thus, in a unibyte buffer (when using a graphical display) there is normally nothing before the indication of the visited file&amp;rsquo;s end-of-line convention (colon, backslash, etc.), unless you are using an input method.</target>
        </trans-unit>
        <trans-unit id="acfac422dea48051a2c7c007628247062d5bf74c" translate="yes" xml:space="preserve">
          <source>The buffer-predicate function for this frame. The function &lt;code&gt;other-buffer&lt;/code&gt; uses this predicate (from the selected frame) to decide which buffers it should consider, if the predicate is not &lt;code&gt;nil&lt;/code&gt;. It calls the predicate with one argument, a buffer, once for each buffer; if the predicate returns a non-&lt;code&gt;nil&lt;/code&gt; value, it considers that buffer.</source>
          <target state="translated">The buffer-predicate function for this frame. The function &lt;code&gt;other-buffer&lt;/code&gt; uses this predicate (from the selected frame) to decide which buffers it should consider, if the predicate is not &lt;code&gt;nil&lt;/code&gt; . It calls the predicate with one argument, a buffer, once for each buffer; if the predicate returns a non- &lt;code&gt;nil&lt;/code&gt; value, it considers that buffer.</target>
        </trans-unit>
        <trans-unit id="b4516ab94968d260129418edf75f3cd31faf9215" translate="yes" xml:space="preserve">
          <source>The built-in function &lt;code&gt;indirect-function&lt;/code&gt; provides an easy way to perform symbol function indirection explicitly.</source>
          <target state="translated">The built-in function &lt;code&gt;indirect-function&lt;/code&gt; provides an easy way to perform symbol function indirection explicitly.</target>
        </trans-unit>
        <trans-unit id="f3cdf2d46910f6a19f564d8ab1c23afa5ceb31d7" translate="yes" xml:space="preserve">
          <source>The bulk of &lt;code&gt;grok/pcase&lt;/code&gt; is a single clause of a &lt;code&gt;pcase&lt;/code&gt; form, the pattern on lines 1-8, the (single) body form on line 9. The pattern is &lt;code&gt;or&lt;/code&gt;, which tries to match in turn its argument sub-patterns, first &lt;code&gt;and&lt;/code&gt; (lines 2-7), then &lt;code&gt;let&lt;/code&gt; (line 8), until one of them succeeds.</source>
          <target state="translated">The bulk of &lt;code&gt;grok/pcase&lt;/code&gt; is a single clause of a &lt;code&gt;pcase&lt;/code&gt; form, the pattern on lines 1-8, the (single) body form on line 9. The pattern is &lt;code&gt;or&lt;/code&gt; , which tries to match in turn its argument sub-patterns, first &lt;code&gt;and&lt;/code&gt; (lines 2-7), then &lt;code&gt;let&lt;/code&gt; (line 8), until one of them succeeds.</target>
        </trans-unit>
        <trans-unit id="fb70f0ac918e95323b7c7d8c894fa19635af573c" translate="yes" xml:space="preserve">
          <source>The button type. See &lt;a href=&quot;button-types#Button-Types&quot;&gt;Button Types&lt;/a&gt;.</source>
          <target state="translated">The button type. See &lt;a href=&quot;button-types#Button-Types&quot;&gt;Button Types&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="bc5bc8ec439519ab1bd1ce7c170e4e3b8e964c13" translate="yes" xml:space="preserve">
          <source>The button&amp;rsquo;s keymap, defining bindings active within the button region. By default this is the usual button region keymap, stored in the variable &lt;code&gt;button-map&lt;/code&gt;, which defines</source>
          <target state="translated">The button&amp;rsquo;s keymap, defining bindings active within the button region. By default this is the usual button region keymap, stored in the variable &lt;code&gt;button-map&lt;/code&gt; , which defines</target>
        </trans-unit>
        <trans-unit id="a43c685ec98dba6c7317b7c086d65e4dcee7b6a8" translate="yes" xml:space="preserve">
          <source>The button-creation functions all take the &lt;code&gt;&amp;amp;rest&lt;/code&gt; argument &lt;var&gt;properties&lt;/var&gt;, which should be a sequence of &lt;var&gt;property value&lt;/var&gt; pairs, specifying properties to add to the button; see &lt;a href=&quot;button-properties#Button-Properties&quot;&gt;Button Properties&lt;/a&gt;. In addition, the keyword argument &lt;code&gt;:type&lt;/code&gt; may be used to specify a button-type from which to inherit other properties; see &lt;a href=&quot;button-types#Button-Types&quot;&gt;Button Types&lt;/a&gt;. Any properties not explicitly specified during creation will be inherited from the button&amp;rsquo;s type (if the type defines such a property).</source>
          <target state="translated">The button-creation functions all take the &lt;code&gt;&amp;amp;rest&lt;/code&gt; argument &lt;var&gt;properties&lt;/var&gt; , which should be a sequence of &lt;var&gt;property value&lt;/var&gt; pairs, specifying properties to add to the button; see &lt;a href=&quot;button-properties#Button-Properties&quot;&gt;Button Properties&lt;/a&gt;. In addition, the keyword argument &lt;code&gt;:type&lt;/code&gt; may be used to specify a button-type from which to inherit other properties; see &lt;a href=&quot;button-types#Button-Types&quot;&gt;Button Types&lt;/a&gt;. Any properties not explicitly specified during creation will be inherited from the button&amp;rsquo;s type (if the type defines such a property).</target>
        </trans-unit>
        <trans-unit id="07b9418ec8ac4ecbb4a365a5bd8c7af6fd875ba2" translate="yes" xml:space="preserve">
          <source>The byte compiler uses the dynamic function loading feature if the variable &lt;code&gt;byte-compile-dynamic&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt; at compilation time. Do not set this variable globally, since dynamic loading is desirable only for certain files. Instead, enable the feature for specific source files with file-local variable bindings. For example, you could do it by writing this text in the source file&amp;rsquo;s first line:</source>
          <target state="translated">The byte compiler uses the dynamic function loading feature if the variable &lt;code&gt;byte-compile-dynamic&lt;/code&gt; is non- &lt;code&gt;nil&lt;/code&gt; at compilation time. Do not set this variable globally, since dynamic loading is desirable only for certain files. Instead, enable the feature for specific source files with file-local variable bindings. For example, you could do it by writing this text in the source file&amp;rsquo;s first line:</target>
        </trans-unit>
        <trans-unit id="b0f586f7c11295ae6041637f812fe199d118bbd2" translate="yes" xml:space="preserve">
          <source>The byte position corresponding to &lt;code&gt;window_end_pos&lt;/code&gt;.</source>
          <target state="translated">The byte position corresponding to &lt;code&gt;window_end_pos&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bf3fbe15bb3d806e89a2d23a877d978fe26d5b4c" translate="yes" xml:space="preserve">
          <source>The byte-code interpreter is implemented as a simple stack machine. It pushes values onto a stack of its own, then pops them off to use them in calculations whose results are themselves pushed back on the stack. When a byte-code function returns, it pops a value off the stack and returns it as the value of the function.</source>
          <target state="translated">バイトコードインタプリタは単純なスタックマシンとして実装されています。バイトコードインタプリタは値をそれ自身のスタックにプッシュし、その結果がスタックにプッシュバックされる計算に使用するためにそれらをポップオフします。バイトコード関数が返すときには、スタックから値を取り出して関数の値として返します。</target>
        </trans-unit>
        <trans-unit id="8f21eeb3ce4b172d88f4a4054b14733959d546ae" translate="yes" xml:space="preserve">
          <source>The call to &lt;var&gt;func&lt;/var&gt; must be in the &lt;var&gt;then-form&lt;/var&gt; of the &lt;code&gt;if&lt;/code&gt;, and &lt;var&gt;func&lt;/var&gt; must appear quoted in the call to &lt;code&gt;fboundp&lt;/code&gt;. (This feature operates for &lt;code&gt;cond&lt;/code&gt; as well.)</source>
          <target state="translated">The call to &lt;var&gt;func&lt;/var&gt; must be in the &lt;var&gt;then-form&lt;/var&gt; of the &lt;code&gt;if&lt;/code&gt; , and &lt;var&gt;func&lt;/var&gt; must appear quoted in the call to &lt;code&gt;fboundp&lt;/code&gt; . (This feature operates for &lt;code&gt;cond&lt;/code&gt; as well.)</target>
        </trans-unit>
        <trans-unit id="cd816549d0833bdd182cffeef083166bd9eccadb" translate="yes" xml:space="preserve">
          <source>The canonical way to specify the &lt;em&gt;size of a frame&lt;/em&gt; from within Emacs is by specifying its &lt;em&gt;text size&lt;/em&gt;&amp;mdash;a tuple of the width and height of the frame&amp;rsquo;s text area (see &lt;a href=&quot;frame-layout#Frame-Layout&quot;&gt;Frame Layout&lt;/a&gt;). It can be measured either in pixels or in terms of the frame&amp;rsquo;s canonical character size (see &lt;a href=&quot;frame-font#Frame-Font&quot;&gt;Frame Font&lt;/a&gt;).</source>
          <target state="translated">The canonical way to specify the &lt;em&gt;size of a frame&lt;/em&gt; from within Emacs is by specifying its &lt;em&gt;text size&lt;/em&gt;&amp;mdash;a tuple of the width and height of the frame&amp;rsquo;s text area (see &lt;a href=&quot;frame-layout#Frame-Layout&quot;&gt;Frame Layout&lt;/a&gt;). It can be measured either in pixels or in terms of the frame&amp;rsquo;s canonical character size (see &lt;a href=&quot;frame-font#Frame-Font&quot;&gt;Frame Font&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="35d63b67cea7481378d16b550f8c7d9339ebd861" translate="yes" xml:space="preserve">
          <source>The canonicalize table maps all of a set of case-related characters into a particular member of that set.</source>
          <target state="translated">canonicalize テーブルは、ケースに関連する文字のセットのすべてを、そのセットの特定のメンバーにマップします。</target>
        </trans-unit>
        <trans-unit id="d98adabbf87cc8a08f14746c5fbb4310e30779ab" translate="yes" xml:space="preserve">
          <source>The case change commands described here work on text in the current buffer. See &lt;a href=&quot;case-conversion#Case-Conversion&quot;&gt;Case Conversion&lt;/a&gt;, for case conversion functions that work on strings and characters. See &lt;a href=&quot;case-tables#Case-Tables&quot;&gt;Case Tables&lt;/a&gt;, for how to customize which characters are upper or lower case and how to convert them.</source>
          <target state="translated">The case change commands described here work on text in the current buffer. See &lt;a href=&quot;case-conversion#Case-Conversion&quot;&gt;Case Conversion&lt;/a&gt;, for case conversion functions that work on strings and characters. See &lt;a href=&quot;case-tables#Case-Tables&quot;&gt;Case Tables&lt;/a&gt;, for how to customize which characters are upper or lower case and how to convert them.</target>
        </trans-unit>
        <trans-unit id="77ee252710982b3fcb0142f8b906f77a763d14f3" translate="yes" xml:space="preserve">
          <source>The case of a graphic character is indicated by its character code; for example,</source>
          <target state="translated">図形文字の場合は、その文字コードで示されます。</target>
        </trans-unit>
        <trans-unit id="4e2b2272e435daf5cb6f60baee461dfc446d4222" translate="yes" xml:space="preserve">
          <source>The case table for the</source>
          <target state="translated">のケース表を作成しました。</target>
        </trans-unit>
        <trans-unit id="280090829e281a538077bc06a68c1ff20cd3fb94" translate="yes" xml:space="preserve">
          <source>The category table is actually a char-table (see &lt;a href=&quot;char_002dtables#Char_002dTables&quot;&gt;Char-Tables&lt;/a&gt;). The element of the category table at index &lt;var&gt;c&lt;/var&gt; is a &lt;em&gt;category set&lt;/em&gt;&amp;mdash;a bool-vector&amp;mdash;that indicates which categories character &lt;var&gt;c&lt;/var&gt; belongs to. In this category set, if the element at index &lt;var&gt;cat&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;, that means category &lt;var&gt;cat&lt;/var&gt; is a member of the set, and that character &lt;var&gt;c&lt;/var&gt; belongs to category &lt;var&gt;cat&lt;/var&gt;.</source>
          <target state="translated">The category table is actually a char-table (see &lt;a href=&quot;char_002dtables#Char_002dTables&quot;&gt;Char-Tables&lt;/a&gt;). The element of the category table at index &lt;var&gt;c&lt;/var&gt; is a &lt;em&gt;category set&lt;/em&gt;&amp;mdash;a bool-vector&amp;mdash;that indicates which categories character &lt;var&gt;c&lt;/var&gt; belongs to. In this category set, if the element at index &lt;var&gt;cat&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt; , that means category &lt;var&gt;cat&lt;/var&gt; is a member of the set, and that character &lt;var&gt;c&lt;/var&gt; belongs to category &lt;var&gt;cat&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="d0485386ae15548477e7a1c3ddbf99aabc72746a" translate="yes" xml:space="preserve">
          <source>The char-table has one extra slot, which determines how to display any character that cannot be displayed with any available font, or cannot be encoded by the terminal&amp;rsquo;s coding system. Its value should be one of the above display methods, except &lt;code&gt;zero-width&lt;/code&gt; or a cons cell.</source>
          <target state="translated">The char-table has one extra slot, which determines how to display any character that cannot be displayed with any available font, or cannot be encoded by the terminal&amp;rsquo;s coding system. Its value should be one of the above display methods, except &lt;code&gt;zero-width&lt;/code&gt; or a cons cell.</target>
        </trans-unit>
        <trans-unit id="9023ce61724bbabe84554211f1682a5b7d26a59b" translate="yes" xml:space="preserve">
          <source>The character &amp;lsquo;</source>
          <target state="translated">キャラクター '</target>
        </trans-unit>
        <trans-unit id="e68ebec1ac879e97e03c36bf47008aa20c6bd7bd" translate="yes" xml:space="preserve">
          <source>The character and byte positions of point in a buffer.</source>
          <target state="translated">バッファ内のポイントの文字位置とバイト位置。</target>
        </trans-unit>
        <trans-unit id="f22f38b266e9823831c9d0ef2c9a1fe74ed5e490" translate="yes" xml:space="preserve">
          <source>The character and byte positions of the beginning of the accessible range of text in the buffer.</source>
          <target state="translated">バッファ内のテキストのアクセス可能な範囲の先頭の文字とバイト位置。</target>
        </trans-unit>
        <trans-unit id="6c5385edb6d96d02471dae4f088297c2fa6a7318" translate="yes" xml:space="preserve">
          <source>The character and byte positions of the buffer gap. See &lt;a href=&quot;buffer-gap#Buffer-Gap&quot;&gt;Buffer Gap&lt;/a&gt;.</source>
          <target state="translated">The character and byte positions of the buffer gap. See &lt;a href=&quot;buffer-gap#Buffer-Gap&quot;&gt;Buffer Gap&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8c6314b6b815e7c063f41b61f7f1fd27b17e3df8" translate="yes" xml:space="preserve">
          <source>The character and byte positions of the end of the accessible range of text in the buffer.</source>
          <target state="translated">バッファ内のテキストのアクセス可能な範囲の終端の文字位置とバイト位置。</target>
        </trans-unit>
        <trans-unit id="e3ea8b9851630ca5901561ab1adc692dcbe57e4a" translate="yes" xml:space="preserve">
          <source>The character and byte positions of the end of the buffer text.</source>
          <target state="translated">バッファテキストの終端の文字位置とバイト位置を指定します。</target>
        </trans-unit>
        <trans-unit id="159599eecd7ed600dfc647ecdceabd08ac6e6b7e" translate="yes" xml:space="preserve">
          <source>The character case functions change the case of single characters or of the contents of strings. The functions normally convert only alphabetic characters (the letters &amp;lsquo;</source>
          <target state="translated">The character case functions change the case of single characters or of the contents of strings. The functions normally convert only alphabetic characters (the letters &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="58661f35491edec56426ef5502747311e8425649" translate="yes" xml:space="preserve">
          <source>The character position of the start of the innermost parenthetical grouping containing the stopping point; &lt;code&gt;nil&lt;/code&gt; if none.</source>
          <target state="translated">The character position of the start of the innermost parenthetical grouping containing the stopping point; &lt;code&gt;nil&lt;/code&gt; if none.</target>
        </trans-unit>
        <trans-unit id="ed5394eb7206607235f4bd5c8e10df5c68b18fa4" translate="yes" xml:space="preserve">
          <source>The character position of the start of the last complete subexpression terminated; &lt;code&gt;nil&lt;/code&gt; if none.</source>
          <target state="translated">The character position of the start of the last complete subexpression terminated; &lt;code&gt;nil&lt;/code&gt; if none.</target>
        </trans-unit>
        <trans-unit id="1247f75f37cf02e36f0fa69040f3ac6b097ecbdf" translate="yes" xml:space="preserve">
          <source>The characters &amp;lsquo;</source>
          <target state="translated">The characters &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="54c2a07fdd0ef1fdb5ddcd9fa98003e13884d86d" translate="yes" xml:space="preserve">
          <source>The characters in &lt;var&gt;string&lt;/var&gt;, other than the format specifications, are copied directly into the output, including their text properties, if any. Any text properties of the format specifications are copied to the produced string representations of the argument &lt;var&gt;objects&lt;/var&gt;.</source>
          <target state="translated">The characters in &lt;var&gt;string&lt;/var&gt; , other than the format specifications, are copied directly into the output, including their text properties, if any. Any text properties of the format specifications are copied to the produced string representations of the argument &lt;var&gt;objects&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="d3187515a75e9f5846604d36640635fa33365798" translate="yes" xml:space="preserve">
          <source>The characters in &lt;var&gt;template&lt;/var&gt;, other than the format specifications, are copied directly into the output, including their text properties, if any. Any text properties of the format specifications are copied to their replacements.</source>
          <target state="translated">The characters in &lt;var&gt;template&lt;/var&gt; , other than the format specifications, are copied directly into the output, including their text properties, if any. Any text properties of the format specifications are copied to their replacements.</target>
        </trans-unit>
        <trans-unit id="846a19eaa57baaea4ef97563adf70350f2950595" translate="yes" xml:space="preserve">
          <source>The charset registry and encoding of the font, such as &amp;lsquo;</source>
          <target state="translated">The charset registry and encoding of the font, such as &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="b3fa5e7367f49d16057c52ffe48350e2d39e997d" translate="yes" xml:space="preserve">
          <source>The choice of which window edges this function alters depends on the values of the option &lt;code&gt;window-combination-resize&lt;/code&gt; and the combination limits of the involved windows; in some cases, it may alter both edges. See &lt;a href=&quot;recombining-windows#Recombining-Windows&quot;&gt;Recombining Windows&lt;/a&gt;. To resize by moving only the bottom or right edge of a window, use the function &lt;code&gt;adjust-window-trailing-edge&lt;/code&gt;.</source>
          <target state="translated">The choice of which window edges this function alters depends on the values of the option &lt;code&gt;window-combination-resize&lt;/code&gt; and the combination limits of the involved windows; in some cases, it may alter both edges. See &lt;a href=&quot;recombining-windows#Recombining-Windows&quot;&gt;Recombining Windows&lt;/a&gt;. To resize by moving only the bottom or right edge of a window, use the function &lt;code&gt;adjust-window-trailing-edge&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aa502a49dcc709424f597b62f00f62cbd92bf872" translate="yes" xml:space="preserve">
          <source>The classification of the terminal&amp;rsquo;s background color, either &lt;code&gt;light&lt;/code&gt; or &lt;code&gt;dark&lt;/code&gt;.</source>
          <target state="translated">The classification of the terminal&amp;rsquo;s background color, either &lt;code&gt;light&lt;/code&gt; or &lt;code&gt;dark&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f93c6d22f7b132786ba6625daad510b5c573fb14" translate="yes" xml:space="preserve">
          <source>The client process&amp;rsquo;s plist is initialized from the server&amp;rsquo;s plist.</source>
          <target state="translated">The client process&amp;rsquo;s plist is initialized from the server&amp;rsquo;s plist.</target>
        </trans-unit>
        <trans-unit id="fbb47d099826f587fe36a3370bfe320b242c3ce1" translate="yes" xml:space="preserve">
          <source>The code character descriptions below contain a number of key words, defined here as follows:</source>
          <target state="translated">以下のコード文字の説明には、いくつかのキーワードが含まれており、ここでは以下のように定義されています。</target>
        </trans-unit>
        <trans-unit id="75ce7901949b09d49a8e972aae9dfafa61a540ec" translate="yes" xml:space="preserve">
          <source>The code for every major mode should follow various coding conventions, including conventions for local keymap and syntax table initialization, function and variable names, and hooks.</source>
          <target state="translated">各メジャーモードのコードは、ローカルキーマップやシンタックステーブルの初期化、関数名や変数名、フックなど、様々なコーディング規約に従うべきです。</target>
        </trans-unit>
        <trans-unit id="dfef9020b23692b251e830295a72905bdd207aaf" translate="yes" xml:space="preserve">
          <source>The code letter &amp;lsquo;</source>
          <target state="translated">The code letter &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="2482022c4c984ca682c681b8a8dff28fc069228d" translate="yes" xml:space="preserve">
          <source>The coding system &lt;code&gt;raw-text&lt;/code&gt; is special in that it prevents character code conversion, and causes the buffer visited with this coding system to be a unibyte buffer. For historical reasons, you can save both unibyte and multibyte text with this coding system. When you use &lt;code&gt;raw-text&lt;/code&gt; to encode multibyte text, it does perform one character code conversion: it converts eight-bit characters to their single-byte external representation. &lt;code&gt;raw-text&lt;/code&gt; does not specify the end-of-line conversion, allowing that to be determined as usual by the data, and has the usual three variants which specify the end-of-line conversion.</source>
          <target state="translated">The coding system &lt;code&gt;raw-text&lt;/code&gt; is special in that it prevents character code conversion, and causes the buffer visited with this coding system to be a unibyte buffer. For historical reasons, you can save both unibyte and multibyte text with this coding system. When you use &lt;code&gt;raw-text&lt;/code&gt; to encode multibyte text, it does perform one character code conversion: it converts eight-bit characters to their single-byte external representation. &lt;code&gt;raw-text&lt;/code&gt; does not specify the end-of-line conversion, allowing that to be determined as usual by the data, and has the usual three variants which specify the end-of-line conversion.</target>
        </trans-unit>
        <trans-unit id="a9d6afb051f08a549ab7418ae16669da3deb347c" translate="yes" xml:space="preserve">
          <source>The coding system &lt;code&gt;utf-8-emacs&lt;/code&gt; specifies that the data is represented in the internal Emacs encoding (see &lt;a href=&quot;text-representations#Text-Representations&quot;&gt;Text Representations&lt;/a&gt;). This is like &lt;code&gt;raw-text&lt;/code&gt; in that no code conversion happens, but different in that the result is multibyte data. The name &lt;code&gt;emacs-internal&lt;/code&gt; is an alias for &lt;code&gt;utf-8-emacs-unix&lt;/code&gt; (so it forces no conversion of end-of-line, unlike &lt;code&gt;utf-8-emacs&lt;/code&gt;, which can decode all 3 kinds of end-of-line conventions).</source>
          <target state="translated">The coding system &lt;code&gt;utf-8-emacs&lt;/code&gt; specifies that the data is represented in the internal Emacs encoding (see &lt;a href=&quot;text-representations#Text-Representations&quot;&gt;Text Representations&lt;/a&gt;). This is like &lt;code&gt;raw-text&lt;/code&gt; in that no code conversion happens, but different in that the result is multibyte data. The name &lt;code&gt;emacs-internal&lt;/code&gt; is an alias for &lt;code&gt;utf-8-emacs-unix&lt;/code&gt; (so it forces no conversion of end-of-line, unlike &lt;code&gt;utf-8-emacs&lt;/code&gt; , which can decode all 3 kinds of end-of-line conventions).</target>
        </trans-unit>
        <trans-unit id="b7a3e069788fc7a93ce66f5716c9ee69180ec9a7" translate="yes" xml:space="preserve">
          <source>The color for the border of the frame. It is equivalent to the &lt;code&gt;:background&lt;/code&gt; attribute of the &lt;code&gt;border&lt;/code&gt; face.</source>
          <target state="translated">The color for the border of the frame. It is equivalent to the &lt;code&gt;:background&lt;/code&gt; attribute of the &lt;code&gt;border&lt;/code&gt; face.</target>
        </trans-unit>
        <trans-unit id="557d8af098a8640c6edfc6b2f65704a4cfb3bb1c" translate="yes" xml:space="preserve">
          <source>The color for the cursor that shows point. It is equivalent to the &lt;code&gt;:background&lt;/code&gt; attribute of the &lt;code&gt;cursor&lt;/code&gt; face.</source>
          <target state="translated">The color for the cursor that shows point. It is equivalent to the &lt;code&gt;:background&lt;/code&gt; attribute of the &lt;code&gt;cursor&lt;/code&gt; face.</target>
        </trans-unit>
        <trans-unit id="848f3a5cc67c97c12f59ed548791f5c7b9603605" translate="yes" xml:space="preserve">
          <source>The color for the mouse pointer. It is equivalent to the &lt;code&gt;:background&lt;/code&gt; attribute of the &lt;code&gt;mouse&lt;/code&gt; face.</source>
          <target state="translated">The color for the mouse pointer. It is equivalent to the &lt;code&gt;:background&lt;/code&gt; attribute of the &lt;code&gt;mouse&lt;/code&gt; face.</target>
        </trans-unit>
        <trans-unit id="cd4a78191273afbed89fbc376fb0e490d94f3411" translate="yes" xml:space="preserve">
          <source>The color of lines drawn, and outlines around solid shapes.</source>
          <target state="translated">描かれた線の色や、実物の形の周りのアウトライン。</target>
        </trans-unit>
        <trans-unit id="6dae735cc9d80db3034a398a30474af4088c1839" translate="yes" xml:space="preserve">
          <source>The color to use for the background of characters. It is equivalent to the &lt;code&gt;:background&lt;/code&gt; attribute of the &lt;code&gt;default&lt;/code&gt; face.</source>
          <target state="translated">The color to use for the background of characters. It is equivalent to the &lt;code&gt;:background&lt;/code&gt; attribute of the &lt;code&gt;default&lt;/code&gt; face.</target>
        </trans-unit>
        <trans-unit id="01cf8df4bfb8df2b7d863a7131e6cc6356c0739b" translate="yes" xml:space="preserve">
          <source>The color to use for the image of a character. It is equivalent to the &lt;code&gt;:foreground&lt;/code&gt; attribute of the &lt;code&gt;default&lt;/code&gt; face.</source>
          <target state="translated">The color to use for the image of a character. It is equivalent to the &lt;code&gt;:foreground&lt;/code&gt; attribute of the &lt;code&gt;default&lt;/code&gt; face.</target>
        </trans-unit>
        <trans-unit id="3093a0d9fd7e9a7555a91efc7023426af982bf7e" translate="yes" xml:space="preserve">
          <source>The color used for solid shapes.</source>
          <target state="translated">ソリッドシェイプに使用される色です。</target>
        </trans-unit>
        <trans-unit id="f926aaaf6e9ed7105210907467a7575bcbfb622b" translate="yes" xml:space="preserve">
          <source>The color values are returned for &lt;var&gt;frame&lt;/var&gt;&amp;rsquo;s display. If &lt;var&gt;frame&lt;/var&gt; is omitted or &lt;code&gt;nil&lt;/code&gt;, the information is returned for the selected frame&amp;rsquo;s display. If the frame cannot display colors, the value is &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">The color values are returned for &lt;var&gt;frame&lt;/var&gt; &amp;rsquo;s display. If &lt;var&gt;frame&lt;/var&gt; is omitted or &lt;code&gt;nil&lt;/code&gt; , the information is returned for the selected frame&amp;rsquo;s display. If the frame cannot display colors, the value is &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0108b0958456a06b2b6bdb6b65f07e2c22074864" translate="yes" xml:space="preserve">
          <source>The column at which to fill warnings.</source>
          <target state="translated">警告を記入する列。</target>
        </trans-unit>
        <trans-unit id="c886ad6405a0592fa55644a3f4e64f01c567410f" translate="yes" xml:space="preserve">
          <source>The column functions convert between a character position (counting characters from the beginning of the buffer) and a column position (counting screen characters from the beginning of a line).</source>
          <target state="translated">カラム機能は、文字位置(バッファの先頭から文字をカウントする)とカラム位置(行の先頭から画面の文字をカウントする)を変換します。</target>
        </trans-unit>
        <trans-unit id="56f303b08f0089973ebdd5308c9f98921ddba9d4" translate="yes" xml:space="preserve">
          <source>The column number currently displayed in this window&amp;rsquo;s mode line, or -1 if column numbers are not being displayed.</source>
          <target state="translated">The column number currently displayed in this window&amp;rsquo;s mode line, or -1 if column numbers are not being displayed.</target>
        </trans-unit>
        <trans-unit id="82c351222697abcc62b85c531b3382118709b682" translate="yes" xml:space="preserve">
          <source>The column to be used for top-level constructs. This replaces the default value of the top-level column used by the sub-mode, usually zero.</source>
          <target state="translated">トップレベルの構造体に使用されるカラム。これは、サブモードで使用されるトップレベルのカラムのデフォルト値(通常はゼロ)を置き換えます。</target>
        </trans-unit>
        <trans-unit id="ad930e366f047e47ba168bb838f08a3c092549df" translate="yes" xml:space="preserve">
          <source>The combination limit is meaningful only for an internal window. If it is &lt;code&gt;nil&lt;/code&gt;, then Emacs is allowed to automatically delete &lt;var&gt;window&lt;/var&gt;, in response to a window deletion, in order to group the child windows of &lt;var&gt;window&lt;/var&gt; with its sibling windows to form a new window combination. If the combination limit is &lt;code&gt;t&lt;/code&gt;, the child windows of &lt;var&gt;window&lt;/var&gt; are never automatically recombined with its siblings.</source>
          <target state="translated">The combination limit is meaningful only for an internal window. If it is &lt;code&gt;nil&lt;/code&gt; , then Emacs is allowed to automatically delete &lt;var&gt;window&lt;/var&gt; , in response to a window deletion, in order to group the child windows of &lt;var&gt;window&lt;/var&gt; with its sibling windows to form a new window combination. If the combination limit is &lt;code&gt;t&lt;/code&gt; , the child windows of &lt;var&gt;window&lt;/var&gt; are never automatically recombined with its siblings.</target>
        </trans-unit>
        <trans-unit id="062e4ea98a9662fe6dca5fb34a40a037aa606eb5" translate="yes" xml:space="preserve">
          <source>The command</source>
          <target state="translated">コマンド</target>
        </trans-unit>
        <trans-unit id="c1ffc1e3bfdf70f5721200a30a9b90345bdd4e1b" translate="yes" xml:space="preserve">
          <source>The command &lt;code&gt;display-buffer&lt;/code&gt; flexibly chooses a window for display, and displays a specified buffer in that window. It can be called interactively, via the key binding</source>
          <target state="translated">The command &lt;code&gt;display-buffer&lt;/code&gt; flexibly chooses a window for display, and displays a specified buffer in that window. It can be called interactively, via the key binding</target>
        </trans-unit>
        <trans-unit id="9d859d82af47e88b2e948fdd51d7bfa313a3eb5d" translate="yes" xml:space="preserve">
          <source>The command &lt;code&gt;eval-region&lt;/code&gt; updates &lt;code&gt;load-history&lt;/code&gt;, but does so by adding the symbols defined to the element for the file being visited, rather than replacing that element. See &lt;a href=&quot;eval#Eval&quot;&gt;Eval&lt;/a&gt;.</source>
          <target state="translated">コマンド &lt;code&gt;eval-region&lt;/code&gt; は &lt;code&gt;load-history&lt;/code&gt; を更新しますが、その要素を置き換えるのではなく、訪問先のファイルの要素に定義されたシンボルを追加することによって更新します。&lt;a href=&quot;eval#Eval&quot;&gt;Evalを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6a4fcc51ef457cdf0b2de9d77b741a0669273953" translate="yes" xml:space="preserve">
          <source>The command &lt;code&gt;switch-to-next-buffer&lt;/code&gt; obeys this option in a similar way. If this option specifies a function, &lt;code&gt;switch-to-next-buffer&lt;/code&gt; will call that function with the third argument always &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">コマンド &lt;code&gt;switch-to-next-buffer&lt;/code&gt; は、同様の方法でこのオプションに従います。このオプションで関数を指定した場合、 &lt;code&gt;switch-to-next-buffer&lt;/code&gt; は、3番目の引数を常に &lt;code&gt;nil&lt;/code&gt; にしてその関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="f1bcbea4d3e3a2d7b364ec9e0f15ad7ae8da1bbb" translate="yes" xml:space="preserve">
          <source>The command &lt;code&gt;temacs&amp;nbsp;-l&amp;nbsp;loadup&lt;/code&gt; would run</source>
          <target state="translated">コマンド &lt;code&gt;temacs&amp;nbsp;-l&amp;nbsp;loadup&lt;/code&gt; が実行されます</target>
        </trans-unit>
        <trans-unit id="ae164833eafad23104809bf29a295b984c817efa" translate="yes" xml:space="preserve">
          <source>The command &lt;var&gt;fname&lt;/var&gt; is defined to handle a few events itself, by scrolling the display of &lt;var&gt;help-text&lt;/var&gt;. When &lt;var&gt;fname&lt;/var&gt; reads one of those special events, it does the scrolling and then reads another event. When it reads an event that is not one of those few, and which has a binding in &lt;var&gt;help-map&lt;/var&gt;, it executes that key&amp;rsquo;s binding and then returns.</source>
          <target state="translated">コマンド &lt;var&gt;fname&lt;/var&gt; は、 &lt;var&gt;help-text&lt;/var&gt; の表示をスクロールすることにより、いくつかのイベント自体を処理するように定義されています。とき &lt;var&gt;fname&lt;/var&gt; には、これらの特別なイベントの一つを読み込み、それをスクロールして、別のイベントを読み込むん。それらの数少ないイベントの1つではなく、 &lt;var&gt;help-map&lt;/var&gt; にバインディングがあるイベントを読み取ると、そのキーのバインディングを実行してから戻ります。</target>
        </trans-unit>
        <trans-unit id="bc4bc33db4d6985e9ffe7472f3118727adcea411" translate="yes" xml:space="preserve">
          <source>The command bindings of input events are recorded in data structures called &lt;em&gt;keymaps&lt;/em&gt;. Each entry in a keymap associates (or &lt;em&gt;binds&lt;/em&gt;) an individual event type, either to another keymap or to a command. When an event type is bound to a keymap, that keymap is used to look up the next input event; this continues until a command is found. The whole process is called &lt;em&gt;key lookup&lt;/em&gt;.</source>
          <target state="translated">入力イベントのコマンドバインディングは、&lt;em&gt;キーマップ&lt;/em&gt;と呼ばれるデータ構造に記録されます。キーマップの各エントリは、個々のイベントタイプを別のキーマップまたはコマンドに関連付けます（または&lt;em&gt;バインドします&lt;/em&gt;）。イベントタイプがキーマップにバインドされると、そのキーマップは次の入力イベントを検索するために使用されます。これは、コマンドが見つかるまで続きます。プロセス全体は&lt;em&gt;キールックアップ&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e3a0644779d0a1f335811ac6b8e7f487869da769" translate="yes" xml:space="preserve">
          <source>The command does not set &lt;code&gt;this-command&lt;/code&gt; to &lt;code&gt;kill-region&lt;/code&gt;, so a subsequent kill command does not append to the same kill ring entry.</source>
          <target state="translated">このコマンドは &lt;code&gt;this-command&lt;/code&gt; を &lt;code&gt;kill-region&lt;/code&gt; に設定しないため、後続のkillコマンドは同じkillringエントリに追加されません。</target>
        </trans-unit>
        <trans-unit id="54ccd859ab08a7578c2accb2c8a5c8536ee5433a" translate="yes" xml:space="preserve">
          <source>The command loop keeps a history of the complex commands that have been executed, to make it convenient to repeat these commands. A &lt;em&gt;complex command&lt;/em&gt; is one for which the interactive argument reading uses the minibuffer. This includes any</source>
          <target state="translated">コマンドループは、実行された複雑なコマンドの履歴を保持し、これらのコマンドを繰り返すのに便利です。&lt;em&gt;複雑なコマンドは、&lt;/em&gt;対話型の引数の読み取りがミニバッファを使用するためのものです。これには</target>
        </trans-unit>
        <trans-unit id="7d8344b6378db1df6e46b16defc05a1c3460ae23" translate="yes" xml:space="preserve">
          <source>The command loop reads input a key sequence at a time, by calling &lt;code&gt;read-key-sequence&lt;/code&gt;. Lisp programs can also call this function; for example, &lt;code&gt;describe-key&lt;/code&gt; uses it to read the key to describe.</source>
          <target state="translated">コマンドループは、 &lt;code&gt;read-key-sequence&lt;/code&gt; を呼び出すことにより、一度に入力キーシーケンスを読み取ります。Lispプログラムもこの関数を呼び出すことができます。たとえば、 &lt;code&gt;describe-key&lt;/code&gt; はそれを使用して、説明するキーを読み取ります。</target>
        </trans-unit>
        <trans-unit id="2ee88eb3cbfec06fb2f79be62a80a793ed81d1f4" translate="yes" xml:space="preserve">
          <source>The command loop runs this soon after &lt;code&gt;post-command-hook&lt;/code&gt; (q.v.).</source>
          <target state="translated">コマンドループは、 &lt;code&gt;post-command-hook&lt;/code&gt; （qv）の直後にこれを実行します。</target>
        </trans-unit>
        <trans-unit id="b3556e9617ebdac53a98e97a52551b0c1b562ba7" translate="yes" xml:space="preserve">
          <source>The command loop sets this variable just before running a command, and copies its value into &lt;code&gt;last-command&lt;/code&gt; when the command finishes (unless the command specified a prefix argument for the following command).</source>
          <target state="translated">コマンドループは、コマンドを実行する直前にこの変数を設定し、コマンドが終了するとその値を &lt;code&gt;last-command&lt;/code&gt; にコピーします（コマンドが次のコマンドのプレフィックス引数を指定した場合を除く）。</target>
        </trans-unit>
        <trans-unit id="2055d37028ddd0c472cbfc94f6b67d5fdd69b086" translate="yes" xml:space="preserve">
          <source>The command loop sets this variable to &lt;code&gt;nil&lt;/code&gt; before each command, so if a command sets it, the effect applies only to that command.</source>
          <target state="translated">コマンドループは、各コマンドの前にこの変数を &lt;code&gt;nil&lt;/code&gt; に設定するため、コマンドが設定した場合、効果はそのコマンドにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="543a4b162ec103c275db3895fe55421dc42ccd27" translate="yes" xml:space="preserve">
          <source>The command named &lt;var&gt;mode&lt;/var&gt; first performs the standard actions such as setting the variable named &lt;var&gt;mode&lt;/var&gt; and then executes the &lt;var&gt;body&lt;/var&gt; forms, if any. It then runs the mode hook variable &lt;code&gt;&lt;var&gt;mode&lt;/var&gt;-hook&lt;/code&gt; and finishes by evaluating any form in &lt;code&gt;:after-hook&lt;/code&gt;.</source>
          <target state="translated">コマンドは、指定 &lt;var&gt;mode&lt;/var&gt; 最初行うような変数命名設定などの標準的なアクション &lt;var&gt;mode&lt;/var&gt; 、次に実行 &lt;var&gt;body&lt;/var&gt; あれば、フォームを。次に、モードフック変数 &lt;code&gt;&lt;var&gt;mode&lt;/var&gt;-hook&lt;/code&gt; を実行し、 &lt;code&gt;:after-hook&lt;/code&gt; 内の任意のフォームを評価して終了します。</target>
        </trans-unit>
        <trans-unit id="4c1e16025c68e4172d32866b90a4de49e795379d" translate="yes" xml:space="preserve">
          <source>The command which is finally found might also be remapped. See &lt;a href=&quot;remapping-commands#Remapping-Commands&quot;&gt;Remapping Commands&lt;/a&gt;.</source>
          <target state="translated">最終的に見つかったコマンドも再マップされる可能性があります。再&lt;a href=&quot;remapping-commands#Remapping-Commands&quot;&gt;マッピングコマンドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="46d5686bfeb21ae9e75f3e0cd9110b273ca126ba" translate="yes" xml:space="preserve">
          <source>The command-line arguments are parsed by the &lt;code&gt;command-line-1&lt;/code&gt; function in the</source>
          <target state="translated">コマンドライン引数は、 &lt;code&gt;command-line-1&lt;/code&gt; 関数によって解析されます。</target>
        </trans-unit>
        <trans-unit id="3e89f0f5629d43551a732205c85f87087a894dfc" translate="yes" xml:space="preserve">
          <source>The command-line option &amp;lsquo;</source>
          <target state="translated">コマンドラインオプション '</target>
        </trans-unit>
        <trans-unit id="33be2dffe066118290e67b49b508bdbeb6703d32" translate="yes" xml:space="preserve">
          <source>The command-line switches &amp;lsquo;</source>
          <target state="translated">コマンドラインスイッチ '</target>
        </trans-unit>
        <trans-unit id="d45c8a3739b868f95df9b38858cd8d04f287a037" translate="yes" xml:space="preserve">
          <source>The command-line with which the process was invoked. This is a string in which individual command-line arguments are separated by blanks; whitespace characters that are embedded in the arguments are quoted as appropriate for the system&amp;rsquo;s shell: escaped by backslash characters on GNU and Unix, and enclosed in double quote characters on Windows. Thus, this command-line string can be directly used in primitives such as &lt;code&gt;shell-command&lt;/code&gt;.</source>
          <target state="translated">プロセスが呼び出されたコマンドライン。これは、個々のコマンドライン引数が空白で区切られている文字列です。引数に埋め込まれている空白文字は、システムのシェルに応じて引用符で囲まれます。GNUおよびUnixではバックスラッシュ文字でエスケープされ、Windowsでは二重引用符で囲まれます。したがって、このコマンドライン文字列は、 &lt;code&gt;shell-command&lt;/code&gt; などのプリミティブで直接使用できます。</target>
        </trans-unit>
        <trans-unit id="37c706527add4d02a59532cb46df5b7b130d04de" translate="yes" xml:space="preserve">
          <source>The commands available during recursive editing are the same ones available in the top-level editing loop and defined in the keymaps. Only a few special commands exit the recursive editing level; the others return to the recursive editing level when they finish. (The special commands for exiting are always available, but they do nothing when recursive editing is not in progress.)</source>
          <target state="translated">再帰編集中に利用できるコマンドは、トップレベルの編集ループで利用可能なものと同じもので、キーマップで定義されています。再帰的編集レベルを終了する特別なコマンドはわずかで、他のコマンドは終了すると再帰的編集レベルに戻ります。(終了するための特別なコマンドは常に利用可能ですが、再帰編集が進行中でない場合は何もしません)。</target>
        </trans-unit>
        <trans-unit id="a23d2cd639852ecd94cb9df3ddff9d5bd174b632" translate="yes" xml:space="preserve">
          <source>The commands described below can filter the killed text before they save it in the kill ring. They call &lt;code&gt;filter-buffer-substring&lt;/code&gt; (see &lt;a href=&quot;buffer-contents#Buffer-Contents&quot;&gt;Buffer Contents&lt;/a&gt;) to perform the filtering. By default, there&amp;rsquo;s no filtering, but major and minor modes and hook functions can set up filtering, so that text saved in the kill ring is different from what was in the buffer.</source>
          <target state="translated">以下で説明するコマンドは、強制終了リングに保存する前に、強制終了されたテキストをフィルタリングできます。 &lt;code&gt;filter-buffer-substring&lt;/code&gt; （「&lt;a href=&quot;buffer-contents#Buffer-Contents&quot;&gt;バッファの内容&lt;/a&gt;」を参照）を呼び出して、フィルタリングを実行します。デフォルトではフィルタリングはありませんが、メジャーモードとマイナーモードおよびフック関数でフィルタリングを設定できるため、キルリングに保存されたテキストはバッファに保存されていたテキストとは異なります。</target>
        </trans-unit>
        <trans-unit id="c7a1c8fbb62ae35db0fb700fa5a7a715258f8d84" translate="yes" xml:space="preserve">
          <source>The commands described in this section execute until they reach a specified location. All except</source>
          <target state="translated">ここで説明するコマンドは、指定された場所に到達するまで実行されます。以下のコマンドを除いて、すべてのコマンドが実行されます。</target>
        </trans-unit>
        <trans-unit id="f7cca3dbc4a5e525b42888654a2250e48c3c88c9" translate="yes" xml:space="preserve">
          <source>The comment lines show that &lt;code&gt;fac&lt;/code&gt; was called 6 times. The first &lt;code&gt;if&lt;/code&gt; statement returned 5 times with the same result each time; the same is true of the condition on the second &lt;code&gt;if&lt;/code&gt;. The recursive call of &lt;code&gt;fac&lt;/code&gt; did not return at all.</source>
          <target state="translated">コメント行は、 &lt;code&gt;fac&lt;/code&gt; が6回呼び出されたことを示しています。最初の &lt;code&gt;if&lt;/code&gt; ステートメントは5回返され、毎回同じ結果になりました。の &lt;code&gt;if&lt;/code&gt; 、2番目の条件についても同じことが言えます。 &lt;code&gt;fac&lt;/code&gt; の再帰呼び出しはまったく返されませんでした。</target>
        </trans-unit>
        <trans-unit id="0e2b64e2042c9eae11df7bbc9d8da126ed6518b7" translate="yes" xml:space="preserve">
          <source>The communication type and the process filter and sentinel are inherited from those of the server. The server never directly uses its filter and sentinel; their sole purpose is to initialize connections made to the server.</source>
          <target state="translated">通信タイプとプロセスフィルタとセンチネルはサーバのものを継承しています。サーバが直接フィルタとセンチネルを使うことはありません。</target>
        </trans-unit>
        <trans-unit id="afd81d64f2d80486e0d6f037979b681c7c67b5c5" translate="yes" xml:space="preserve">
          <source>The comparison function &lt;var&gt;predicate&lt;/var&gt; must give reliable results for any given pair of arguments, at least within a single call to &lt;code&gt;sort&lt;/code&gt;. It must be &lt;em&gt;antisymmetric&lt;/em&gt;; that is, if &lt;var&gt;a&lt;/var&gt; is less than &lt;var&gt;b&lt;/var&gt;, &lt;var&gt;b&lt;/var&gt; must not be less than &lt;var&gt;a&lt;/var&gt;. It must be &lt;em&gt;transitive&lt;/em&gt;&amp;mdash;that is, if &lt;var&gt;a&lt;/var&gt; is less than &lt;var&gt;b&lt;/var&gt;, and &lt;var&gt;b&lt;/var&gt; is less than &lt;var&gt;c&lt;/var&gt;, then &lt;var&gt;a&lt;/var&gt; must be less than &lt;var&gt;c&lt;/var&gt;. If you use a comparison function which does not meet these requirements, the result of &lt;code&gt;sort&lt;/code&gt; is unpredictable.</source>
          <target state="translated">比較関数の &lt;var&gt;predicate&lt;/var&gt; は、少なくとも &lt;code&gt;sort&lt;/code&gt; の1回の呼び出し内で、引数の任意のペアに対して信頼できる結果を提供する必要があります。&lt;em&gt;反対称&lt;/em&gt;でなければなりません;それがあれば、ある未満である &lt;var&gt;b&lt;/var&gt; 、 &lt;var&gt;b&lt;/var&gt; が未満であってはなりません。それはでなければならない&lt;em&gt;推移&lt;/em&gt;-つまりあれば、ある未満である &lt;var&gt;b&lt;/var&gt; 、及び &lt;var&gt;b&lt;/var&gt; が未満である &lt;var&gt;c&lt;/var&gt; 、そして、より小さくなければならない &lt;var&gt;c&lt;/var&gt; 。これらの要件を満たさない比較関数を使用すると、 &lt;code&gt;sort&lt;/code&gt; の結果は予測できません。 &lt;var&gt;a&lt;/var&gt; &lt;var&gt;a&lt;/var&gt; &lt;em&gt;&lt;/em&gt; &lt;var&gt;a&lt;/var&gt; &lt;var&gt;a&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="b8af95aafe57d945cb1c3d7b18f42da5e30f98c5" translate="yes" xml:space="preserve">
          <source>The compiler ignores the &lt;code&gt;provide&lt;/code&gt;, then processes the &lt;code&gt;require&lt;/code&gt; by loading the file in question. Loading the file does execute the &lt;code&gt;provide&lt;/code&gt; call, so the subsequent &lt;code&gt;require&lt;/code&gt; call does nothing when the file is loaded.</source>
          <target state="translated">コンパイラは &lt;code&gt;provide&lt;/code&gt; を無視し、問題のファイルをロードして &lt;code&gt;require&lt;/code&gt; を処理します。ファイルをロードすると &lt;code&gt;provide&lt;/code&gt; 呼び出しが実行されるため、ファイルがロードされても、後続の &lt;code&gt;require&lt;/code&gt; 呼び出しは何も実行しません。</target>
        </trans-unit>
        <trans-unit id="83b388904b97e9f960dfa5b394422e2b5894fab3" translate="yes" xml:space="preserve">
          <source>The completion function should accept three arguments:</source>
          <target state="translated">補完関数は3つの引数を受け付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="0b6b092d0c4ac01b5f509dc38513b84d822a2a94" translate="yes" xml:space="preserve">
          <source>The complexities stem from the modifier bits that keyboard input characters can include. Aside from the Meta modifier, none of these modifier bits can be included in a string, and the Meta modifier is allowed only in special cases.</source>
          <target state="translated">この複雑さは、キーボード入力文字が含むことができる修飾ビットに起因しています。メタ修飾子は別として、これらの修飾ビットは文字列に含めることができず、メタ修飾子は特別な場合にのみ許可されます。</target>
        </trans-unit>
        <trans-unit id="84f18eeeb5829282eb800b86f2877e8b64e03deb" translate="yes" xml:space="preserve">
          <source>The components of a marker, and how it relocates.</source>
          <target state="translated">マーカーの構成要素と、それがどのように再配置されるか。</target>
        </trans-unit>
        <trans-unit id="27404eab7e82a326e1454e0c0e389aaa34dca41e" translate="yes" xml:space="preserve">
          <source>The concept of raising and lowering frames also applies to text terminal frames. On each text terminal, only the top frame is displayed at any one time.</source>
          <target state="translated">フレームの昇降の概念は、テキスト端末のフレームにも適用されます。各テキスト端末では、常に上のフレームのみが表示されています。</target>
        </trans-unit>
        <trans-unit id="cce4579f65c0c37d6850842d7ce1d0a6353f8c71" translate="yes" xml:space="preserve">
          <source>The concept of visibility is strongly related to that of (un-)mapped frames. A frame (or, more precisely, its window-system window) is and becomes &lt;em&gt;mapped&lt;/em&gt; when it is displayed for the first time and whenever it changes its state of visibility from &lt;code&gt;iconified&lt;/code&gt; or &lt;code&gt;invisible&lt;/code&gt; to &lt;code&gt;visible&lt;/code&gt;. Conversely, a frame is and becomes &lt;em&gt;unmapped&lt;/em&gt; whenever it changes its status from &lt;code&gt;visible&lt;/code&gt; to &lt;code&gt;iconified&lt;/code&gt; or &lt;code&gt;invisible&lt;/code&gt;.</source>
          <target state="translated">可視性の概念は、（マップされていない）フレームの概念と強く関連しています。フレーム（または、より正確には、そのウィンドウ・システムのウィンドウ）であるとなり&lt;em&gt;マッピングされ&lt;/em&gt;、それが最初に表示されるとき、それは可視性の状態を変更するたびに &lt;code&gt;iconified&lt;/code&gt; または &lt;code&gt;invisible&lt;/code&gt; に &lt;code&gt;visible&lt;/code&gt; 。逆に、フレームであるとなり&lt;em&gt;マッピングされていない&lt;/em&gt;ことから、そのステータスを変更するたびに &lt;code&gt;visible&lt;/code&gt; ことが &lt;code&gt;iconified&lt;/code&gt; または &lt;code&gt;invisible&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5676e3bf9106b8a801a2ba7aa8fe6827e6fdc6cf" translate="yes" xml:space="preserve">
          <source>The concise expression of a predicate is known as a &lt;em&gt;pattern&lt;/em&gt;. When the predicate, called on the value of the first arg, returns non-&lt;code&gt;nil&lt;/code&gt;, we say that &amp;ldquo;the pattern matches the value&amp;rdquo; (or sometimes &amp;ldquo;the value matches the pattern&amp;rdquo;).</source>
          <target state="translated">述語の簡潔な表現は&lt;em&gt;パターン&lt;/em&gt;として知られてい&lt;em&gt;ます&lt;/em&gt;。最初の引数の値で呼び出された述語が &lt;code&gt;nil&lt;/code&gt; 以外を返す場合、「パターンが値と一致する」（または「値がパターンと一致する」）と言います。</target>
        </trans-unit>
        <trans-unit id="ab15735458ac1022eae759f78cdd057138f6e20d" translate="yes" xml:space="preserve">
          <source>The condition expression is stored in &lt;code&gt;edebug-global-break-condition&lt;/code&gt;. You can specify a new expression using the</source>
          <target state="translated">条件式は &lt;code&gt;edebug-global-break-condition&lt;/code&gt; に格納されます。を使用して新しい式を指定できます</target>
        </trans-unit>
        <trans-unit id="c16f550e5c642194989cb1eb487f94d46efc1764" translate="yes" xml:space="preserve">
          <source>The connection type: &amp;lsquo;</source>
          <target state="translated">接続タイプ： '</target>
        </trans-unit>
        <trans-unit id="467d0ce5daa923b058a0c23d80df3209d2288708" translate="yes" xml:space="preserve">
          <source>The connection&amp;rsquo;s local address is set up according to the port number used for the connection.</source>
          <target state="translated">接続のローカルアドレスは、接続に使用されるポート番号に従って設定されます。</target>
        </trans-unit>
        <trans-unit id="507cc7aafdf97b09a145788437398e04599af151" translate="yes" xml:space="preserve">
          <source>The connection&amp;rsquo;s process contact information is set according to the client&amp;rsquo;s addressing information (typically an IP address and a port number). This information is associated with the &lt;code&gt;process-contact&lt;/code&gt; keywords &lt;code&gt;:host&lt;/code&gt;, &lt;code&gt;:service&lt;/code&gt;, &lt;code&gt;:remote&lt;/code&gt;.</source>
          <target state="translated">接続のプロセス連絡先情報は、クライアントのアドレス情報（通常はIPアドレスとポート番号）に従って設定されます。この情報は、 &lt;code&gt;process-contact&lt;/code&gt; キーワード &lt;code&gt;:host&lt;/code&gt; 、 &lt;code&gt;:service&lt;/code&gt; 、 &lt;code&gt;:remote&lt;/code&gt; に関連付けられています。</target>
        </trans-unit>
        <trans-unit id="4f972d8622119c5748437af2ecceeff29ecea407" translate="yes" xml:space="preserve">
          <source>The connection&amp;rsquo;s process name is constructed by concatenating the server process&amp;rsquo;s &lt;var&gt;name&lt;/var&gt; with a client identification string. The client identification string for an IPv4 connection looks like &amp;lsquo;</source>
          <target state="translated">接続のプロセス名は、サーバープロセスの &lt;var&gt;name&lt;/var&gt; をクライアント識別文字列と連結することによって構築されます。IPv4接続のクライアント識別文字列は次のようになります '</target>
        </trans-unit>
        <trans-unit id="1e87cd925416db3162f784b538be172c5b7921a1" translate="yes" xml:space="preserve">
          <source>The constant &lt;code&gt;display-buffer-fallback-action&lt;/code&gt;.</source>
          <target state="translated">定数 &lt;code&gt;display-buffer-fallback-action&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c760326f932b523d397cb33aa52ed43c6fb58a0c" translate="yes" xml:space="preserve">
          <source>The construct &amp;lsquo;</source>
          <target state="translated">コンストラクト '</target>
        </trans-unit>
        <trans-unit id="d66f5e853b6924e849795ab495fa453e6e93fd12" translate="yes" xml:space="preserve">
          <source>The contents of a buffer are much like a string, but buffers are not used like strings in Emacs Lisp, and the available operations are different. For example, you can insert text efficiently into an existing buffer, altering the buffer&amp;rsquo;s contents, whereas inserting text into a string requires concatenating substrings, and the result is an entirely new string object.</source>
          <target state="translated">バッファの内容は文字列によく似ていますが、バッファはEmacs Lispの文字列のように使用されず、使用可能な操作が異なります。たとえば、テキストを既存のバッファに効率的に挿入してバッファの内容を変更できますが、テキストを文字列に挿入するには部分文字列を連結する必要があり、その結果、まったく新しい文字列オブジェクトになります。</target>
        </trans-unit>
        <trans-unit id="724d66b7323be904f10391c54dc669a39d58cee1" translate="yes" xml:space="preserve">
          <source>The contents of a documentation string should follow certain conventions. In particular, its first line should be a complete sentence (or two complete sentences) that briefly describes what the function or variable does. See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Documentation-Tips.html#Documentation-Tips&quot;&gt;Documentation Tips&lt;/a&gt;, for how to write good documentation strings.</source>
          <target state="translated">ドキュメント文字列の内容は、特定の規則に従う必要があります。特に、その最初の行は、関数または変数の機能を簡単に説明する完全な文（または2つの完全な文）である必要があります。適切なドキュメント文字列を作成する方法については、&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Documentation-Tips.html#Documentation-Tips&quot;&gt;ドキュメントのヒントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="11a8b449d638b416a746d961844b34d3d803a937" translate="yes" xml:space="preserve">
          <source>The contents of each mode line are specified by the buffer-local variable &lt;code&gt;mode-line-format&lt;/code&gt; (see &lt;a href=&quot;mode-line-top#Mode-Line-Top&quot;&gt;Mode Line Top&lt;/a&gt;). This variable holds a &lt;em&gt;mode line construct&lt;/em&gt;: a template that controls what is displayed on the buffer&amp;rsquo;s mode line. The value of &lt;code&gt;header-line-format&lt;/code&gt; specifies the buffer&amp;rsquo;s header line in the same way. All windows for the same buffer use the same &lt;code&gt;mode-line-format&lt;/code&gt; and &lt;code&gt;header-line-format&lt;/code&gt; unless a &lt;code&gt;mode-line-format&lt;/code&gt; or &lt;code&gt;header-line-format&lt;/code&gt; parameter has been specified for that window (see &lt;a href=&quot;window-parameters#Window-Parameters&quot;&gt;Window Parameters&lt;/a&gt;).</source>
          <target state="translated">各モードラインの内容は、バッファローカル変数 &lt;code&gt;mode-line-format&lt;/code&gt; によって指定されます（&lt;a href=&quot;mode-line-top#Mode-Line-Top&quot;&gt;モードライントップを&lt;/a&gt;参照）。この変数は、&lt;em&gt;モードライン構成を&lt;/em&gt;保持し&lt;em&gt;ます。&lt;/em&gt;これは、バッファーのモードラインに表示される内容を制御するテンプレートです。 &lt;code&gt;header-line-format&lt;/code&gt; の値は、同じ方法でバッファーのヘッダー行を指定します。同じバッファのすべてのウィンドウは、そのウィンドウに &lt;code&gt;mode-line-format&lt;/code&gt; または &lt;code&gt;header-line-format&lt;/code&gt; パラメータが指定されていない限り、同じ &lt;code&gt;mode-line-format&lt;/code&gt; および &lt;code&gt;header-line-format&lt;/code&gt; を使用します（&lt;a href=&quot;window-parameters#Window-Parameters&quot;&gt;ウィンドウパラメータを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="6cce8467dc72be542e217587e79031715ed7a080" translate="yes" xml:space="preserve">
          <source>The contents of the function cell are also called the symbol&amp;rsquo;s &lt;em&gt;function definition&lt;/em&gt;. The procedure of using a symbol&amp;rsquo;s function definition in place of the symbol is called &lt;em&gt;symbol function indirection&lt;/em&gt;; see &lt;a href=&quot;function-indirection#Function-Indirection&quot;&gt;Function Indirection&lt;/a&gt;. If you have not given a symbol a function definition, its function cell is said to be &lt;em&gt;void&lt;/em&gt;, and it cannot be used as a function.</source>
          <target state="translated">関数セルの内容は、シンボルの&lt;em&gt;関数定義&lt;/em&gt;とも呼ばれ&lt;em&gt;ます&lt;/em&gt;。シンボルの代わりにシンボルの関数定義を使用する手順は、&lt;em&gt;シンボル関数間接参照&lt;/em&gt;と呼ばれます。&lt;a href=&quot;function-indirection#Function-Indirection&quot;&gt;関数の間接&lt;/a&gt;参照を参照してください。シンボルに関数定義を指定していない場合、その関数セルは&lt;em&gt;無効&lt;/em&gt;であると言われ、関数として使用することはできません。</target>
        </trans-unit>
        <trans-unit id="9370f04a5544f51098edcb0f278d5570b1dac651" translate="yes" xml:space="preserve">
          <source>The control modifier.</source>
          <target state="translated">制御修飾子です。</target>
        </trans-unit>
        <trans-unit id="aceb7a603d154f5ad7c647717d25306dce220852" translate="yes" xml:space="preserve">
          <source>The convenient way to track the mouse is to ask for events to represent mouse motion. Then you can wait for motion by waiting for an event. In addition, you can easily handle any other sorts of events that may occur. That is useful, because normally you don&amp;rsquo;t want to track the mouse forever&amp;mdash;only until some other event, such as the release of a button.</source>
          <target state="translated">マウスを追跡する便利な方法は、マウスの動きを表すイベントを要求することです。次に、イベントを待つことでモーションを待つことができます。さらに、発生する可能性のある他の種類のイベントを簡単に処理できます。通常、マウスを永久に追跡する必要はなく、ボタンを離すなどの他のイベントが発生するまで追跡する必要があるため、これは便利です。</target>
        </trans-unit>
        <trans-unit id="793961ad223ddf2c3c519ec760da74fb582fe7a6" translate="yes" xml:space="preserve">
          <source>The coordinate arguments &lt;var&gt;frompos&lt;/var&gt; and &lt;var&gt;topos&lt;/var&gt; are cons cells of the form &lt;code&gt;(&lt;var&gt;hpos&lt;/var&gt; . &lt;var&gt;vpos&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">座標引数 &lt;var&gt;frompos&lt;/var&gt; と &lt;var&gt;topos&lt;/var&gt; フォームの短所細胞である &lt;code&gt;(&lt;var&gt;hpos&lt;/var&gt; . &lt;var&gt;vpos&lt;/var&gt;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9db5eb46de2221425799aa8da6390edce63ae470" translate="yes" xml:space="preserve">
          <source>The coordinates are in the divider separating &lt;var&gt;window&lt;/var&gt; from a window beneath.</source>
          <target state="translated">座標は、下の &lt;var&gt;window&lt;/var&gt; からウィンドウを分離する仕切りにあります。</target>
        </trans-unit>
        <trans-unit id="6affe00f007f6996f29826150462b2973fdef994" translate="yes" xml:space="preserve">
          <source>The coordinates are in the divider separating &lt;var&gt;window&lt;/var&gt; from a window on the right.</source>
          <target state="translated">座標は、右側の &lt;var&gt;window&lt;/var&gt; からウィンドウを分離する仕切りにあります。</target>
        </trans-unit>
        <trans-unit id="32afd0d0bc1d682d09fba69eb4617c10c78505bb" translate="yes" xml:space="preserve">
          <source>The coordinates are in the header line of &lt;var&gt;window&lt;/var&gt;.</source>
          <target state="translated">座標は &lt;var&gt;window&lt;/var&gt; のヘッダー行にあります。</target>
        </trans-unit>
        <trans-unit id="bd8e5163c2e5b18cd3fb5701dd235e3c1ebcec62" translate="yes" xml:space="preserve">
          <source>The coordinates are in the left or right fringe of the window.</source>
          <target state="translated">座標は、ウィンドウの左右のフリンジにあります。</target>
        </trans-unit>
        <trans-unit id="c738efd1b8fc20e939382319a3f95f8982d7b37a" translate="yes" xml:space="preserve">
          <source>The coordinates are in the left or right margin of the window.</source>
          <target state="translated">座標はウィンドウの左右の余白になります。</target>
        </trans-unit>
        <trans-unit id="0cd27cf4656eb11e9fa2ca9618c8c00a5670e522" translate="yes" xml:space="preserve">
          <source>The coordinates are in the mode line of &lt;var&gt;window&lt;/var&gt;.</source>
          <target state="translated">座標は &lt;var&gt;window&lt;/var&gt; のモードラインにあります。</target>
        </trans-unit>
        <trans-unit id="40b852e52258e1ed5fab2ee2299205f8ece29d1f" translate="yes" xml:space="preserve">
          <source>The coordinates are in the tab line of &lt;var&gt;window&lt;/var&gt;.</source>
          <target state="translated">座標は &lt;var&gt;window&lt;/var&gt; のタブラインにあります。</target>
        </trans-unit>
        <trans-unit id="c1a54627ce98dd91ddd99bb3fd351fc372636186" translate="yes" xml:space="preserve">
          <source>The coordinates are in the vertical line between &lt;var&gt;window&lt;/var&gt; and its neighbor to the right. This value occurs only if the window doesn&amp;rsquo;t have a scroll bar; positions in a scroll bar are considered outside the window for these purposes.</source>
          <target state="translated">座標は、 &lt;var&gt;window&lt;/var&gt; とその右側の隣のウィンドウの間の垂直線上にあります。この値は、ウィンドウにスクロールバーがない場合にのみ発生します。これらの目的では、スクロールバー内の位置はウィンドウの外側と見なされます。</target>
        </trans-unit>
        <trans-unit id="b07ce1b12e208ef1aeb507e1116a4d5c9d8ef12e" translate="yes" xml:space="preserve">
          <source>The coordinates are inside &lt;var&gt;window&lt;/var&gt;. The numbers &lt;var&gt;relx&lt;/var&gt; and &lt;var&gt;rely&lt;/var&gt; are the equivalent window-relative coordinates for the specified position, counting from 0 at the top left corner of the window.</source>
          <target state="translated">座標は &lt;var&gt;window&lt;/var&gt; 内にあります。数字は &lt;var&gt;relx&lt;/var&gt; と &lt;var&gt;rely&lt;/var&gt; 指定された位置の等価ウィンドウ相対座標、ウィンドウの左上隅に0からカウントです。</target>
        </trans-unit>
        <trans-unit id="3dab1b30075b2eaf66dc2d863b82b8873a9110f1" translate="yes" xml:space="preserve">
          <source>The coordinates are not in any part of &lt;var&gt;window&lt;/var&gt;.</source>
          <target state="translated">座標は &lt;var&gt;window&lt;/var&gt; どの部分にもありません。</target>
        </trans-unit>
        <trans-unit id="6fbb6d2c4c5aa83c923375a4275035683805d5d9" translate="yes" xml:space="preserve">
          <source>The correspondences in a hash table are in no particular order.</source>
          <target state="translated">ハッシュテーブルの対応関係は順不同です。</target>
        </trans-unit>
        <trans-unit id="aa3cbc5742428a7ca49d61d3c1ddaa3f048dcbae" translate="yes" xml:space="preserve">
          <source>The current buffer is restored even in case of an abnormal exit via &lt;code&gt;throw&lt;/code&gt; or error (see &lt;a href=&quot;nonlocal-exits#Nonlocal-Exits&quot;&gt;Nonlocal Exits&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;throw&lt;/code&gt; またはエラーによる異常な終了の場合でも、現在のバッファーが復元されます（&lt;a href=&quot;nonlocal-exits#Nonlocal-Exits&quot;&gt;非ローカル&lt;/a&gt;終了を参照）。</target>
        </trans-unit>
        <trans-unit id="49ecbd424345bde3e4a4691932210becf3443056" translate="yes" xml:space="preserve">
          <source>The current buffer name, obtained with the &lt;code&gt;buffer-name&lt;/code&gt; function. See &lt;a href=&quot;buffer-names#Buffer-Names&quot;&gt;Buffer Names&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;buffer-name&lt;/code&gt; 関数で取得された現在のバッファー名。&lt;a href=&quot;buffer-names#Buffer-Names&quot;&gt;バッファ名を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="93560fb8fbc083bf5b1817cfce168271a106cae0" translate="yes" xml:space="preserve">
          <source>The current column number of point, counting from one starting at the left margin of the window.</source>
          <target state="translated">現在のポイントの列番号を、ウィンドウの左マージンから1から数えて表示します。</target>
        </trans-unit>
        <trans-unit id="37bb7b86b993d6605fefad8b3d7df6dd2fc08c56" translate="yes" xml:space="preserve">
          <source>The current column number of point, counting from zero starting at the left margin of the window.</source>
          <target state="translated">ウィンドウの左マージンから0から数えて、現在のポイントの列番号。</target>
        </trans-unit>
        <trans-unit id="21e20a260365897194b21ccb677ca7dc72919de4" translate="yes" xml:space="preserve">
          <source>The current file name in byte-compiled files (see &lt;a href=&quot;docs-and-compilation#Docs-and-Compilation&quot;&gt;Docs and Compilation&lt;/a&gt;). This is not meant to be used in Emacs Lisp source files.</source>
          <target state="translated">バイトコンパイルされたファイルの現在のファイル名（&lt;a href=&quot;docs-and-compilation#Docs-and-Compilation&quot;&gt;ドキュメントとコンパイルを&lt;/a&gt;参照）。これは、EmacsLispソースファイルで使用するためのものではありません。</target>
        </trans-unit>
        <trans-unit id="b0e9ac8163716bfa85a52705be2822c48e82cbd6" translate="yes" xml:space="preserve">
          <source>The current flags of the interface.</source>
          <target state="translated">インターフェイスの現在のフラグ。</target>
        </trans-unit>
        <trans-unit id="4bc02bf671d789b23dfc61d21042a23f7be5f41a" translate="yes" xml:space="preserve">
          <source>The current line number of point, counting within the accessible portion of the buffer.</source>
          <target state="translated">バッファのアクセス可能な部分内でカウントされるポイントの現在の行番号。</target>
        </trans-unit>
        <trans-unit id="01cbdcc5115b6bb7222af2f5b8c203bd59b36d12" translate="yes" xml:space="preserve">
          <source>The current match data. See &lt;a href=&quot;match-data#Match-Data&quot;&gt;Match Data&lt;/a&gt;.</source>
          <target state="translated">現在の一致データ。&lt;a href=&quot;match-data#Match-Data&quot;&gt;一致データを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="74f9a1d87530d50c4d0bc7b5d1da7fe2f989980b" translate="yes" xml:space="preserve">
          <source>The current setting of an option is available via the &lt;code&gt;process-contact&lt;/code&gt; function.</source>
          <target state="translated">オプションの現在の設定は、 &lt;code&gt;process-contact&lt;/code&gt; 機能を介して利用できます。</target>
        </trans-unit>
        <trans-unit id="c8841e254b566bf5e794e8e991eb038996ac6058" translate="yes" xml:space="preserve">
          <source>The current value of this variable is used to rebind &lt;code&gt;help-form&lt;/code&gt; locally inside the minibuffer (see &lt;a href=&quot;help-functions#Help-Functions&quot;&gt;Help Functions&lt;/a&gt;).</source>
          <target state="translated">この変数の現在の値は、ミニバッファー内でローカルに &lt;code&gt;help-form&lt;/code&gt; を再バインドするために使用されます（&lt;a href=&quot;help-functions#Help-Functions&quot;&gt;ヘルプ関数を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="14a941d0e07e1294606a1ecd42518431ac54129d" translate="yes" xml:space="preserve">
          <source>The current working directory of the subprocess is set to the current buffer&amp;rsquo;s value of &lt;code&gt;default-directory&lt;/code&gt; if that is local (as determined by &lt;code&gt;unhandled-file-name-directory&lt;/code&gt;), or</source>
          <target state="translated">サブプロセスの現在の作業ディレクトリは、ローカルの場合は &lt;code&gt;default-directory&lt;/code&gt; の現在のバッファの値に設定されます（ &lt;code&gt;unhandled-file-name-directory&lt;/code&gt; によって決定されます）。</target>
        </trans-unit>
        <trans-unit id="15dffde8e426c6fb2351035a35c4354ca1d72300" translate="yes" xml:space="preserve">
          <source>The current working directory of the subprocess is set to the current buffer&amp;rsquo;s value of &lt;code&gt;default-directory&lt;/code&gt; if that is local (as determined by &lt;code&gt;unhandled-file-name-directory&lt;/code&gt;), or &quot;~&quot; otherwise. If you want to run a process in a remote directory use &lt;code&gt;process-file&lt;/code&gt;.</source>
          <target state="translated">サブプロセスの現在の作業ディレクトリは、ローカルの場合は &lt;code&gt;default-directory&lt;/code&gt; の現在のバッファの値（ &lt;code&gt;unhandled-file-name-directory&lt;/code&gt; によって決定される）に設定され、それ以外の場合は「〜」に設定されます。リモートディレクトリでプロセスを実行する場合は、 &lt;code&gt;process-file&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="5788a491a8ca633fe83f7cc719bce2a1bd26a058" translate="yes" xml:space="preserve">
          <source>The customization buffer shows all legitimate values using their read syntax, and the user edits them textually.</source>
          <target state="translated">カスタマイズバッファには、読み取り構文を使用してすべての正当な値が表示され、ユーザーはそれらの値をテキスト的に編集します。</target>
        </trans-unit>
        <trans-unit id="679b679b420f2aea1b845938fef72fa046ada093" translate="yes" xml:space="preserve">
          <source>The customization declarations that we will describe in the next few sections&amp;mdash;&lt;code&gt;defcustom&lt;/code&gt;, &lt;code&gt;defgroup&lt;/code&gt;, etc.&amp;mdash;all accept keyword arguments (see &lt;a href=&quot;constant-variables#Constant-Variables&quot;&gt;Constant Variables&lt;/a&gt;) for specifying various information. This section describes keywords that apply to all types of customization declarations.</source>
          <target state="translated">次のいくつかのセクション（ &lt;code&gt;defcustom&lt;/code&gt; 、 &lt;code&gt;defgroup&lt;/code&gt; など）で説明するカスタマイズ宣言はすべて、さまざまな情報を指定するためのキーワード引数（&lt;a href=&quot;constant-variables#Constant-Variables&quot;&gt;定数変数を&lt;/a&gt;参照）を受け入れます。このセクションでは、すべてのタイプのカスタマイズ宣言に適用されるキーワードについて説明します。</target>
        </trans-unit>
        <trans-unit id="3245d03a470996818ac4300b0d782a4d8da2f5f0" translate="yes" xml:space="preserve">
          <source>The data as a byte array.</source>
          <target state="translated">バイト配列としてのデータです。</target>
        </trans-unit>
        <trans-unit id="ca572036806441020e8effb7e24f638ba88825ed" translate="yes" xml:space="preserve">
          <source>The data structure that controls the mode line.</source>
          <target state="translated">モードラインを制御するデータ構造体。</target>
        </trans-unit>
        <trans-unit id="573b608c65720dd5e9f86107ce3794e2b66f24ad" translate="yes" xml:space="preserve">
          <source>The data type used for byte-compiled functions.</source>
          <target state="translated">バイトコンパイルされた関数に使用されるデータ型です。</target>
        </trans-unit>
        <trans-unit id="5a82b15b1b8d7d24f2d08410ac1cfd7e6d06997f" translate="yes" xml:space="preserve">
          <source>The datagram connection doesn&amp;rsquo;t have to talk with the same remote peer all the time. It has a &lt;em&gt;remote peer address&lt;/em&gt; which specifies where to send datagrams to. Each time an incoming datagram is passed to the filter function, the peer address is set to the address that datagram came from; that way, if the filter function sends a datagram, it will go back to that place. You can specify the remote peer address when you create the datagram connection using the &lt;code&gt;:remote&lt;/code&gt; keyword. You can change it later on by calling &lt;code&gt;set-process-datagram-address&lt;/code&gt;.</source>
          <target state="translated">データグラム接続は、常に同じリモートピアと通信する必要はありません。データグラムの送信&lt;em&gt;先&lt;/em&gt;を指定する&lt;em&gt;リモートピアアドレスが&lt;/em&gt;あります。着信データグラムがフィルター関数に渡されるたびに、ピアアドレスはデータグラムの送信元のアドレスに設定されます。そうすれば、フィルター関数がデータグラムを送信すると、その場所に戻ります。 &lt;code&gt;:remote&lt;/code&gt; キーワードを使用してデータグラム接続を作成するときに、リモートピアアドレスを指定できます。後で &lt;code&gt;set-process-datagram-address&lt;/code&gt; を呼び出すことで変更できます。</target>
        </trans-unit>
        <trans-unit id="c8a99693205cb27465e9a23712b2b01b8e7190e8" translate="yes" xml:space="preserve">
          <source>The day of the month, as an integer between 1 and 31.</source>
          <target state="translated">1から31までの整数で月の日を指定します。</target>
        </trans-unit>
        <trans-unit id="9368d4933dcb32e8f32e58e12038542028e5bf2e" translate="yes" xml:space="preserve">
          <source>The day of week, as an integer between 0 and 6, where 0 stands for Sunday.</source>
          <target state="translated">曜日は、0から6までの整数で、0は日曜日を表します。</target>
        </trans-unit>
        <trans-unit id="9391c6fb508041b1a4555e55af0146bfecc28aaf" translate="yes" xml:space="preserve">
          <source>The debugger buffer (in Debugger mode) provides special commands in addition to the usual Emacs commands and to the Backtrace mode commands described in the previous section. The most important use of debugger commands is for stepping through code, so that you can see how control flows. The debugger can step through the control structures of an interpreted function, but cannot do so in a byte-compiled function. If you would like to step through a byte-compiled function, replace it with an interpreted definition of the same function. (To do this, visit the source for the function and type</source>
          <target state="translated">デバッガバッファ (デバッガモード時)には、通常の Emacs コマンドや前のセクションで説明したバックトレースモードのコマンドに加えて、特別なコマンドが用意されています。デバッガ・コマンドの最も重要な使い方は、コードをステップスルーすることで、制御の流れを確認することです。デバッガは解釈された関数の制御構造をステップスルーすることができますが、バイトコンパイルされた関数ではステップスルーすることはできません。バイトコンパイルされた関数をステップスルーしたい場合は、同じ関数の解釈済み定義に置き換えてください。(これを行うには、その関数のソースにアクセスして</target>
        </trans-unit>
        <trans-unit id="204c2340eea809f0b5f4579c67b2c9092c7084dc" translate="yes" xml:space="preserve">
          <source>The debugger itself must be run byte-compiled, since it makes assumptions about the state of the Lisp interpreter. These assumptions are false if the debugger is running interpreted.</source>
          <target state="translated">デバッガは Lisp インタプリタの状態について仮定を行うため、デバッガ自体はバイトコンパイルされて実行されなければなりません。デバッガがインタプリタを実行している場合、これらの仮定は false です。</target>
        </trans-unit>
        <trans-unit id="ae895d64b56913e2616b56efee1afabf87405459" translate="yes" xml:space="preserve">
          <source>The declare Form</source>
          <target state="translated">宣言フォーム</target>
        </trans-unit>
        <trans-unit id="35659d17616bc9465a15f44ceedfcbfe411e25ad" translate="yes" xml:space="preserve">
          <source>The decoding functions ignore newline characters in the encoded text.</source>
          <target state="translated">デコード関数は、エンコードされたテキスト中の改行文字を無視します。</target>
        </trans-unit>
        <trans-unit id="e485b5724b35707f570323bcd0914ed0bd5f1c4d" translate="yes" xml:space="preserve">
          <source>The default behavior is abandoned as soon as the user customizes one of these thresholds or manually changes the frame&amp;rsquo;s layout. The default behavior is also abandoned when calling &lt;code&gt;display-buffer&lt;/code&gt; with a non-&lt;code&gt;nil&lt;/code&gt;&lt;var&gt;action&lt;/var&gt; argument or the user customizes one of the options mentioned in the previous subsections. Mastering &lt;code&gt;display-buffer&lt;/code&gt; soon may become a frustrating experience due to the plethora of applicable display actions and the resulting frame layouts.</source>
          <target state="translated">ユーザーがこれらのしきい値の1つをカスタマイズするか、フレームのレイアウトを手動で変更するとすぐに、デフォルトの動作は破棄されます。 &lt;code&gt;nil&lt;/code&gt; 以外の &lt;var&gt;action&lt;/var&gt; 引数を使用して &lt;code&gt;display-buffer&lt;/code&gt; を呼び出す場合、またはユーザーが前のサブセクションで説明したオプションの1つをカスタマイズする場合も、デフォルトの動作は破棄されます。 &lt;code&gt;display-buffer&lt;/code&gt; マスターすると、適用可能なディスプレイアクションが多すぎて、結果としてフレームレイアウトが作成されるため、すぐにイライラすることがあります。</target>
        </trans-unit>
        <trans-unit id="f9e9c9c82609653ae146c30ac1d8a91cbeb480f4" translate="yes" xml:space="preserve">
          <source>The default directory for temporary files is controlled by the variable &lt;code&gt;temporary-file-directory&lt;/code&gt;. This variable gives the user a uniform way to specify the directory for all temporary files. Some programs use &lt;code&gt;small-temporary-file-directory&lt;/code&gt; instead, if that is non-&lt;code&gt;nil&lt;/code&gt;. To use it, you should expand the prefix against the proper directory before calling &lt;code&gt;make-temp-file&lt;/code&gt;.</source>
          <target state="translated">一時ファイルのデフォルトディレクトリは、変数 &lt;code&gt;temporary-file-directory&lt;/code&gt; によって制御されます。この変数は、すべての一時ファイルのディレクトリを指定するための統一された方法をユーザーに提供します。一部のプログラムは、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、代わりに &lt;code&gt;small-temporary-file-directory&lt;/code&gt; を使用します。これを使用するには、 &lt;code&gt;make-temp-file&lt;/code&gt; を呼び出す前に、適切なディレクトリに対してプレフィックスを展開する必要があります。</target>
        </trans-unit>
        <trans-unit id="b24d19f92acdbe56a7d260c78f0a136a2db97aa7" translate="yes" xml:space="preserve">
          <source>The default expansion function returns the abbrev symbol if it did expansion, and &lt;code&gt;nil&lt;/code&gt; otherwise. If the abbrev symbol has a hook function that is a symbol whose &lt;code&gt;no-self-insert&lt;/code&gt; property is non-&lt;code&gt;nil&lt;/code&gt;, and if the hook function returns &lt;code&gt;nil&lt;/code&gt; as its value, then the default expansion function returns &lt;code&gt;nil&lt;/code&gt;, even though expansion did occur.</source>
          <target state="translated">デフォルトの展開関数は、展開した場合は略語記号を返し、それ以外の場合は &lt;code&gt;nil&lt;/code&gt; を返します。略語シンボルに、 &lt;code&gt;no-self-insert&lt;/code&gt; プロパティがnon - &lt;code&gt;nil&lt;/code&gt; であるシンボルであるフック関数があり、フック関数が値として &lt;code&gt;nil&lt;/code&gt; を返す場合、デフォルトの展開関数は、展開が発生した場合でも &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="24d2b1a3f58aabec28de7b41808ec803c54d89f7" translate="yes" xml:space="preserve">
          <source>The default face spec determines &lt;var&gt;face&lt;/var&gt;&amp;rsquo;s appearance when no customizations are in effect (see &lt;a href=&quot;customization#Customization&quot;&gt;Customization&lt;/a&gt;). If &lt;var&gt;face&lt;/var&gt; has already been customized (via Custom themes or via customizations read from the init file), its appearance is determined by the custom face spec(s), which override the default face spec &lt;var&gt;spec&lt;/var&gt;. However, if the customizations are subsequently removed, the appearance of &lt;var&gt;face&lt;/var&gt; will again be determined by its default face spec.</source>
          <target state="translated">デフォルトの顔の仕様は、カスタマイズが有効になっていないときの &lt;var&gt;face&lt;/var&gt; の外観を決定します（&lt;a href=&quot;customization#Customization&quot;&gt;カスタマイズを&lt;/a&gt;参照）。 &lt;var&gt;face&lt;/var&gt; がすでにカスタマイズされている場合（カスタムテーマまたはinitファイルから読み取られたカスタマイズを介して）、その外観は、デフォルトの面仕様 &lt;var&gt;spec&lt;/var&gt; をオーバーライドするカスタム面仕様によって決定されます。ただし、後でカスタマイズが削除された場合、 &lt;var&gt;face&lt;/var&gt; の外観はデフォルトの顔の仕様によって再び決定されます。</target>
        </trans-unit>
        <trans-unit id="e352d771642177d9315aafbe09aa957e033f415e" translate="yes" xml:space="preserve">
          <source>The default face, whose attributes are all specified. All other faces implicitly inherit from it: any unspecified attribute defaults to the attribute on this face (see &lt;a href=&quot;face-attributes#Face-Attributes&quot;&gt;Face Attributes&lt;/a&gt;).</source>
          <target state="translated">属性がすべて指定されているデフォルトの面。他のすべての面は暗黙的にそれを継承します。指定されていない属性はデフォルトでこの面の属性になります（&lt;a href=&quot;face-attributes#Face-Attributes&quot;&gt;面の属性を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="97f6bab98a77e2dceae2315c3bef9cc3c9e5c926" translate="yes" xml:space="preserve">
          <source>The default file permissions have no effect when you save a modified version of an existing file; saving a file preserves its existing permissions.</source>
          <target state="translated">デフォルトのファイルパーミッションは、既存のファイルの変更されたバージョンを保存しても何の影響もありません。</target>
        </trans-unit>
        <trans-unit id="c78819cd8a5f7400b7e12474830ebf1ad3d9a5da" translate="yes" xml:space="preserve">
          <source>The default filter function consults the obsolete wrapper hook &lt;code&gt;filter-buffer-substring-functions&lt;/code&gt; (see the documentation string of the macro &lt;code&gt;with-wrapper-hook&lt;/code&gt; for the details about this obsolete facility), and the obsolete variable &lt;code&gt;buffer-substring-filters&lt;/code&gt;. If both of these are &lt;code&gt;nil&lt;/code&gt;, it returns the unaltered text from the buffer, i.e., what &lt;code&gt;buffer-substring&lt;/code&gt; would return.</source>
          <target state="translated">デフォルトのフィルター関数は、廃止されたラッパーフック &lt;code&gt;filter-buffer-substring-functions&lt;/code&gt; （この廃止された機能の詳細については、マクロ &lt;code&gt;with-wrapper-hook&lt;/code&gt; のドキュメント文字列を参照）および廃止された変数 &lt;code&gt;buffer-substring-filters&lt;/code&gt; を参照します。これらの両方が &lt;code&gt;nil&lt;/code&gt; の場合、変更されていないテキストをバッファから返します。つまり、 &lt;code&gt;buffer-substring&lt;/code&gt; が返すものを返します。</target>
        </trans-unit>
        <trans-unit id="e3750f6dcb047a245eefc466255be6b4a6a8a1ea" translate="yes" xml:space="preserve">
          <source>The default filter function uses this marker to decide where to insert process output, and updates it to point after the inserted text. That is why successive batches of output are inserted consecutively.</source>
          <target state="translated">デフォルトのフィルタ関数は、このマーカを使って処理出力をどこに挿入するかを決め、挿入されたテキストの後を指すように更新します。これが、連続した出力バッチが連続して挿入される理由です。</target>
        </trans-unit>
        <trans-unit id="ef4cb4822663d880a22c02717254d159db66694e" translate="yes" xml:space="preserve">
          <source>The default font can be also set directly with the following function:</source>
          <target state="translated">デフォルトのフォントは、以下の関数で直接設定することもできます。</target>
        </trans-unit>
        <trans-unit id="4569ee97ca7c48221170af5b1c61cb13f6d5f098" translate="yes" xml:space="preserve">
          <source>The default font of a frame and how to set it.</source>
          <target state="translated">フレームのデフォルトフォントとその設定方法。</target>
        </trans-unit>
        <trans-unit id="7a26ffd4823527bd36b0fa5afabe4c3d579d0f2b" translate="yes" xml:space="preserve">
          <source>The default for &lt;var&gt;weak&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, so that all keys and values referenced in the hash table are preserved from garbage collection.</source>
          <target state="translated">&lt;var&gt;weak&lt;/var&gt; のデフォルトは &lt;code&gt;nil&lt;/code&gt; であるため、ハッシュテーブルで参照されるすべてのキーと値はガベージコレクションから保持されます。</target>
        </trans-unit>
        <trans-unit id="7b9181999274ee620d9b62b9de5f15a97a955b39" translate="yes" xml:space="preserve">
          <source>The default for binding local variables in Emacs.</source>
          <target state="translated">Emacsでローカル変数をバインドするためのデフォルト。</target>
        </trans-unit>
        <trans-unit id="87eae0a90d65d47dac4065dcb8cd03a98d7ed3e0" translate="yes" xml:space="preserve">
          <source>The default history list for minibuffer history input.</source>
          <target state="translated">ミニバッファ履歴入力のデフォルトの履歴リスト。</target>
        </trans-unit>
        <trans-unit id="cbb0c0244aefe32651fdecae8e37c9c1d1884caa" translate="yes" xml:space="preserve">
          <source>The default is 200.</source>
          <target state="translated">デフォルトは200です。</target>
        </trans-unit>
        <trans-unit id="582cef5881ae56697d27c6a4543a9c80f1165b5a" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;nil&lt;/code&gt;. Other values are reserved for future use. A specific split operation may ignore the value of this variable if it is affected by a non-&lt;code&gt;nil&lt;/code&gt; value of &lt;code&gt;window-combination-limit&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;nil&lt;/code&gt; です。その他の値は、将来の使用のために予約されています。特定の分割操作は、 &lt;code&gt;window-combination-limit&lt;/code&gt; の &lt;code&gt;nil&lt;/code&gt; 以外の値の影響を受ける場合、この変数の値を無視する場合があります。</target>
        </trans-unit>
        <trans-unit id="85c215bf6d37dced9d2e10ebdf1f4c247bbf284b" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;window-size&lt;/code&gt;. Other values are reserved for future use.</source>
          <target state="translated">デフォルトは &lt;code&gt;window-size&lt;/code&gt; です。その他の値は、将来の使用のために予約されています。</target>
        </trans-unit>
        <trans-unit id="6c4bf2ab4e22795d3bd5f44da1e6a3c75cc6bce8" translate="yes" xml:space="preserve">
          <source>The default is to call &lt;code&gt;iconify-frame&lt;/code&gt; (see &lt;a href=&quot;visibility-of-frames#Visibility-of-Frames&quot;&gt;Visibility of Frames&lt;/a&gt;). Alternatively, you may specify either &lt;code&gt;delete-frame&lt;/code&gt; (see &lt;a href=&quot;deleting-frames#Deleting-Frames&quot;&gt;Deleting Frames&lt;/a&gt;) to remove the frame from its display, &lt;code&gt;make-frame-invisible&lt;/code&gt; to make the frame invisible, &lt;code&gt;ignore&lt;/code&gt; to leave the frame unchanged, or any other function that can take a frame as its sole argument.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;iconify-frame&lt;/code&gt; を呼び出します（&lt;a href=&quot;visibility-of-frames#Visibility-of-Frames&quot;&gt;フレームの可視性を&lt;/a&gt;参照）。または、 &lt;code&gt;delete-frame&lt;/code&gt; （&lt;a href=&quot;deleting-frames#Deleting-Frames&quot;&gt;フレームの削除を&lt;/a&gt;参照）を指定してフレームを表示から削除するか、 &lt;code&gt;make-frame-invisible&lt;/code&gt; を指定してフレームを非表示にするか、 &lt;code&gt;ignore&lt;/code&gt; を指定してフレームを変更しないか、またはフレームを次のように取得できるその他の関数を指定できます。その唯一の議論。</target>
        </trans-unit>
        <trans-unit id="355b0cc7c09a335da133d2cb3faf5fa1f1f66adc" translate="yes" xml:space="preserve">
          <source>The default is to search in the</source>
          <target state="translated">デフォルトでは</target>
        </trans-unit>
        <trans-unit id="c192f5222c92d4a59ea28dd931508202451f03f1" translate="yes" xml:space="preserve">
          <source>The default name for this file specifies your home directory and starts with &amp;lsquo;</source>
          <target state="translated">このファイルのデフォルト名はホームディレクトリを指定し、 'で始まります</target>
        </trans-unit>
        <trans-unit id="81f50e022429a7e9b2ea12cb7d90ec2be233c641" translate="yes" xml:space="preserve">
          <source>The default size is 65.</source>
          <target state="translated">デフォルトのサイズは65です。</target>
        </trans-unit>
        <trans-unit id="f81af72138fca1db6fa3768259f2dad66c43e06c" translate="yes" xml:space="preserve">
          <source>The default stroke color on any lines created.</source>
          <target state="translated">作成された線のデフォルトのストローク色。</target>
        </trans-unit>
        <trans-unit id="a42b364fb936e63b8fb9287c2bd08ed248154ba7" translate="yes" xml:space="preserve">
          <source>The default time zone is determined by the &lt;code&gt;TZ&lt;/code&gt; environment variable. See &lt;a href=&quot;system-environment#System-Environment&quot;&gt;System Environment&lt;/a&gt;. For example, you can tell Emacs to default to Universal Time with &lt;code&gt;(setenv &quot;TZ&quot; &quot;UTC0&quot;)&lt;/code&gt;. If &lt;code&gt;TZ&lt;/code&gt; is not in the environment, Emacs uses system wall clock time, which is a platform-dependent default time zone.</source>
          <target state="translated">デフォルトのタイムゾーンは、 &lt;code&gt;TZ&lt;/code&gt; 環境変数によって決定されます。&lt;a href=&quot;system-environment#System-Environment&quot;&gt;システム環境を&lt;/a&gt;参照してください。たとえば、 &lt;code&gt;(setenv &quot;TZ&quot; &quot;UTC0&quot;)&lt;/code&gt; を使用して、デフォルトで世界時に設定するようにEmacsに指示できます。 &lt;code&gt;TZ&lt;/code&gt; が環境にない場合、Emacsはシステムの実時間を使用します。これはプラットフォームに依存するデフォルトのタイムゾーンです。</target>
        </trans-unit>
        <trans-unit id="32d3076afb57dc0f673022de3f52015867d308b4" translate="yes" xml:space="preserve">
          <source>The default tool bar is defined so that items specific to editing do not appear for major modes whose command symbol has a &lt;code&gt;mode-class&lt;/code&gt; property of &lt;code&gt;special&lt;/code&gt; (see &lt;a href=&quot;major-mode-conventions#Major-Mode-Conventions&quot;&gt;Major Mode Conventions&lt;/a&gt;). Major modes may add items to the global bar by binding &lt;code&gt;[tool-bar
&lt;var&gt;foo&lt;/var&gt;]&lt;/code&gt; in their local map. It makes sense for some major modes to replace the default tool bar items completely, since not many can be accommodated conveniently, and the default bindings make this easy by using an indirection through &lt;code&gt;tool-bar-map&lt;/code&gt;.</source>
          <target state="translated">デフォルトのツールバーは、コマンドシンボルが &lt;code&gt;special&lt;/code&gt; &lt;code&gt;mode-class&lt;/code&gt; プロパティを持つメジャーモードで編集に固有の項目が表示されないように定義されています（&lt;a href=&quot;major-mode-conventions#Major-Mode-Conventions&quot;&gt;メジャーモードの規則を&lt;/a&gt;参照）。メジャーモードでは、ローカルマップで &lt;code&gt;[tool-bar &lt;var&gt;foo&lt;/var&gt;]&lt;/code&gt; &lt;var&gt;foo&lt;/var&gt; ]をバインドすることにより、グローバルバーにアイテムを追加できます。便利に対応できるものは多くないため、一部の主要なモードでデフォルトのツールバー項目を完全に置き換えることは理にかなっています。デフォルトのバインディングでは、 &lt;code&gt;tool-bar-map&lt;/code&gt; による間接参照を使用してこれを簡単に行うことができます。</target>
        </trans-unit>
        <trans-unit id="7f8f458800640ea056a6ac8dce525674b542eb25" translate="yes" xml:space="preserve">
          <source>The default value &lt;code&gt;nil&lt;/code&gt; should be used when your window manager follows a &amp;ldquo;click-to-focus&amp;rdquo; policy where you have to click the mouse inside of a frame in order for that frame to gain focus.</source>
          <target state="translated">ウィンドウマネージャーが「クリックしてフォーカス」ポリシーに従う場合は、デフォルト値の &lt;code&gt;nil&lt;/code&gt; を使用する必要があります。このポリシーでは、フレームがフォーカスを取得するために、フレーム内でマウスをクリックする必要があります。</target>
        </trans-unit>
        <trans-unit id="65c90e417643a9493a18a85edd85f577a906b419" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;fill-column&lt;/code&gt; is 70.</source>
          <target state="translated">&lt;code&gt;fill-column&lt;/code&gt; のデフォルト値は70です。</target>
        </trans-unit>
        <trans-unit id="1c5ee1145d2310fefd80e39a76e590d4030f537f" translate="yes" xml:space="preserve">
          <source>The default value is 1.5.</source>
          <target state="translated">デフォルト値は1.5です。</target>
        </trans-unit>
        <trans-unit id="023d79ed160a6c9a929201a5f88a10d241a22378" translate="yes" xml:space="preserve">
          <source>The default value is 1600. Entry to the Lisp debugger increases the value, if there is little room left, to make sure the debugger itself has room to execute.</source>
          <target state="translated">デフォルト値は1600です。Lisp デバッガへのエントリは、デバッガ自身が実行する余地があることを確認するために、残りの余地が少ない場合は値を増やします。</target>
        </trans-unit>
        <trans-unit id="e9c764d13e36573c05043f232522dfc255e445b0" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;'(tab-bar-lines tool-bar-lines)&lt;/code&gt; for Lucid, Motif and MS-Windows (which means that adding/removing a tool or tab bar there does not change the outer frame height), &lt;code&gt;'(tab-bar-lines)&lt;/code&gt; on all other window systems including GTK+ (which means that changing any of the parameters listed above with the exception of &lt;code&gt;tab-bar-lines&lt;/code&gt; may change the size of the outer frame), and &lt;code&gt;t&lt;/code&gt; otherwise (which means the outer frame size never changes implicitly when there&amp;rsquo;s no window system support).</source>
          <target state="translated">Lucid、Motif、およびMS-Windowsのデフォルト値は &lt;code&gt;'(tab-bar-lines tool-bar-lines)&lt;/code&gt; です（つまり、ツールまたはタブバーを追加/削除しても、外枠の高さは変更されません）、 &lt;code&gt;'(tab-bar-lines)&lt;/code&gt; を除いて、上記のパラメータのいずれかを変更することを意味するGTK +（を含む他のすべてのウィンドウシステム上の &lt;code&gt;tab-bar-lines&lt;/code&gt; 外枠のサイズを変更してもよいが）、そして &lt;code&gt;t&lt;/code&gt; は、そうでない場合には（外を意味しますウィンドウシステムがサポートされていない場合、フレームサイズが暗黙的に変更されることはありません）。</target>
        </trans-unit>
        <trans-unit id="41b5142be2a25ab47e2b91994f5b738ecc8aff3e" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;nil&lt;/code&gt;, i.e., the prefix-discarding feature is disabled. This is because discarding prefixes often leads to confusing names for options and faces.</source>
          <target state="translated">デフォルト値は &lt;code&gt;nil&lt;/code&gt; です。つまり、プレフィックス破棄機能は無効になっています。これは、プレフィックスを破棄すると、オプションと面の名前が混乱することが多いためです。</target>
        </trans-unit>
        <trans-unit id="60739858c427147eccf0a2c0969cc628b2fa3758" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;normal-backup-enable-predicate&lt;/code&gt;, which checks for files in &lt;code&gt;temporary-file-directory&lt;/code&gt; and &lt;code&gt;small-temporary-file-directory&lt;/code&gt;.</source>
          <target state="translated">デフォルト値は &lt;code&gt;normal-backup-enable-predicate&lt;/code&gt; で、 &lt;code&gt;temporary-file-directory&lt;/code&gt; および &lt;code&gt;small-temporary-file-directory&lt;/code&gt; 内のファイルをチェックします。</target>
        </trans-unit>
        <trans-unit id="19763762633973d0ed6336bf3782312f60260a0c" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;step&lt;/code&gt;. This variable can be set interactively with</source>
          <target state="translated">デフォルト値は &lt;code&gt;step&lt;/code&gt; です。この変数は、とインタラクティブに設定できます</target>
        </trans-unit>
        <trans-unit id="e11dbb62c77f8d4f68d95a72cdb3ccd5d2250955" translate="yes" xml:space="preserve">
          <source>The default value is determined in a reasonable way for your operating system; it is based on the &lt;code&gt;TMPDIR&lt;/code&gt;, &lt;code&gt;TMP&lt;/code&gt; and &lt;code&gt;TEMP&lt;/code&gt; environment variables, with a fall-back to a system-dependent name if none of these variables is defined.</source>
          <target state="translated">デフォルト値は、オペレーティングシステムに適した方法で決定されます。これは、 &lt;code&gt;TMPDIR&lt;/code&gt; 、 &lt;code&gt;TMP&lt;/code&gt; 、および &lt;code&gt;TEMP&lt;/code&gt; 環境変数に基づいており、これらの変数のいずれも定義されていない場合は、システム依存の名前にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="3bcf9e986e7383ce581df716448fe56d672113c0" translate="yes" xml:space="preserve">
          <source>The default value is seen in buffers that don&amp;rsquo;t have their own buffer-local values.</source>
          <target state="translated">デフォルト値は、独自のバッファローカル値を持たないバッファに表示されます。</target>
        </trans-unit>
        <trans-unit id="1193bd78586d719562726255cbef739c27920d29" translate="yes" xml:space="preserve">
          <source>The default value is the function that clears the message displayed in an active minibuffer.</source>
          <target state="translated">デフォルト値は、アクティブなミニバッファに表示されているメッセージをクリアする機能です。</target>
        </trans-unit>
        <trans-unit id="d5282ebe83f8d6dacbe0acbf2204264b3f3383ec" translate="yes" xml:space="preserve">
          <source>The default value is the function that displays the message at the end of the minibuffer when the minibuffer is active. However, if the text shown in the active minibuffer has the &lt;code&gt;minibuffer-message&lt;/code&gt; text property (see &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Special Properties&lt;/a&gt;) on some character, the message will be displayed before the first character having that property.</source>
          <target state="translated">デフォルト値は、ミニバッファーがアクティブなときにミニバッファーの最後にメッセージを表示する関数です。ただし、アクティブなミニ &lt;code&gt;minibuffer-message&lt;/code&gt; テキストの一部の文字にminibuffer-message textプロパティ（&lt;a href=&quot;special-properties#Special-Properties&quot;&gt;特殊プロパティを&lt;/a&gt;参照）がある場合、メッセージはそのプロパティを持つ最初の文字の前に表示されます。</target>
        </trans-unit>
        <trans-unit id="c24a56207aec1ab7e76efac7a53cf162bbbcd2f9" translate="yes" xml:space="preserve">
          <source>The default value is zero, which means that conservative scrolling never happens.</source>
          <target state="translated">デフォルト値はゼロで、保守的なスクロールが発生しないことを意味します。</target>
        </trans-unit>
        <trans-unit id="474d2dbca7fd1c4cd24098b32e8425d766731b4d" translate="yes" xml:space="preserve">
          <source>The default value matches whitespace with certain punctuation characters intermingled.</source>
          <target state="translated">既定値は、特定の句読点文字が混在する空白にマッチします。</target>
        </trans-unit>
        <trans-unit id="708d542b5cb83d6b27cbfcf294ba98e1c6eb4b90" translate="yes" xml:space="preserve">
          <source>The default value of &lt;code&gt;auto-hscroll-mode&lt;/code&gt; is &lt;code&gt;t&lt;/code&gt;; setting it to &lt;code&gt;current-line&lt;/code&gt; activates a variant of automatic horizontal scrolling whereby only the line showing the cursor is horizontally scrolled to make point visible, the rest of the window is left either unscrolled, or at the minimum scroll amount set by &lt;code&gt;scroll-left&lt;/code&gt; and &lt;code&gt;scroll-right&lt;/code&gt;, see below.</source>
          <target state="translated">&lt;code&gt;auto-hscroll-mode&lt;/code&gt; のデフォルト値は &lt;code&gt;t&lt;/code&gt; です。 &lt;code&gt;current-line&lt;/code&gt; 設定すると、自動水平スクロールのバリエーションがアクティブになります。これにより、カーソルを示す行のみが水平方向にスクロールされてポイントが表示され、ウィンドウの残りの部分はスクロールされないままになるか、 &lt;code&gt;scroll-left&lt;/code&gt; で設定された最小スクロール量になります。 &lt;code&gt;scroll-right&lt;/code&gt; にスクロールします。以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="b51a5e882958d495ad310784959e1d391806578c" translate="yes" xml:space="preserve">
          <source>The default value of &lt;code&gt;bidi-display-reordering&lt;/code&gt; controls the reordering of strings which are not directly supplied by a buffer, including the text displayed in mode lines (see &lt;a href=&quot;mode-line-format#Mode-Line-Format&quot;&gt;Mode Line Format&lt;/a&gt;) and header lines (see &lt;a href=&quot;header-lines#Header-Lines&quot;&gt;Header Lines&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;bidi-display-reordering&lt;/code&gt; のデフォルト値は、モード行（&lt;a href=&quot;mode-line-format#Mode-Line-Format&quot;&gt;モード行フォーマットを&lt;/a&gt;参照）およびヘッダー行（&lt;a href=&quot;header-lines#Header-Lines&quot;&gt;ヘッダー行を&lt;/a&gt;参照）に表示されるテキストを含む、バッファーによって直接提供されない文字列の並べ替えを制御します。</target>
        </trans-unit>
        <trans-unit id="e746e493f187bcdc9f3fc0f756c6ba6a17eaffe8" translate="yes" xml:space="preserve">
          <source>The default value of &lt;code&gt;imenu-create-index-function&lt;/code&gt; is &lt;code&gt;imenu-default-create-index-function&lt;/code&gt;. This function calls the value of &lt;code&gt;imenu-prev-index-position-function&lt;/code&gt; and the value of &lt;code&gt;imenu-extract-index-name-function&lt;/code&gt; to produce the index alist. However, if either of these two variables is &lt;code&gt;nil&lt;/code&gt;, the default function uses &lt;code&gt;imenu-generic-expression&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;imenu-create-index-function&lt;/code&gt; のデフォルト値は &lt;code&gt;imenu-default-create-index-function&lt;/code&gt; です。この関数は、 &lt;code&gt;imenu-prev-index-position-function&lt;/code&gt; の値と &lt;code&gt;imenu-extract-index-name-function&lt;/code&gt; の値を呼び出して、インデックスリストを生成します。ただし、これら2つの変数のいずれかが &lt;code&gt;nil&lt;/code&gt; の場合、デフォルトの関数は代わりに &lt;code&gt;imenu-generic-expression&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="25e5a409a50e09859f3f4732e6977f44e72151aa" translate="yes" xml:space="preserve">
          <source>The default value of &lt;code&gt;mode-line-format&lt;/code&gt; is designed to use the values of other variables such as &lt;code&gt;mode-line-position&lt;/code&gt; and &lt;code&gt;mode-line-modes&lt;/code&gt; (which in turn incorporates the values of the variables &lt;code&gt;mode-name&lt;/code&gt; and &lt;code&gt;minor-mode-alist&lt;/code&gt;). Very few modes need to alter &lt;code&gt;mode-line-format&lt;/code&gt; itself. For most purposes, it is sufficient to alter some of the variables that &lt;code&gt;mode-line-format&lt;/code&gt; either directly or indirectly refers to.</source>
          <target state="translated">&lt;code&gt;mode-line-format&lt;/code&gt; のデフォルト値は、 &lt;code&gt;mode-line-position&lt;/code&gt; や &lt;code&gt;mode-line-modes&lt;/code&gt; などの他の変数の値を使用するように設計されています（これらの変数には、 &lt;code&gt;mode-name&lt;/code&gt; 変数と &lt;code&gt;minor-mode-alist&lt;/code&gt; 変数の値が組み込まれています。）。 &lt;code&gt;mode-line-format&lt;/code&gt; 自体を変更する必要のあるモードはほとんどありません。ほとんどの場合、 &lt;code&gt;mode-line-format&lt;/code&gt; が直接または間接的に参照する変数の一部を変更するだけで十分です。</target>
        </trans-unit>
        <trans-unit id="8603f9889e97902f88b37a045802893e502f1a0b" translate="yes" xml:space="preserve">
          <source>The default value of &lt;var&gt;separators&lt;/var&gt; for &lt;code&gt;split-string&lt;/code&gt;. Its usual value is &lt;code&gt;&quot;[&amp;nbsp;\f\t\n\r\v]+&quot;&lt;/code&gt;.</source>
          <target state="translated">デフォルト値の &lt;var&gt;separators&lt;/var&gt; のための &lt;code&gt;split-string&lt;/code&gt; 。通常の値は &lt;code&gt;&quot;[&amp;nbsp;\f\t\n\r\v]+&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2f626f251ec5e141bbe937ae58b8aaf07f20d470" translate="yes" xml:space="preserve">
          <source>The default value of this variable is 800. If you set it to a value less than 100, Lisp will reset it to 100 if the given value is reached. Entry to the Lisp debugger increases the value, if there is little room left, to make sure the debugger itself has room to execute.</source>
          <target state="translated">この変数のデフォルト値は800です。100未満の値に設定すると、与えられた値に達するとLispは100にリセットします。Lispデバッガへのエントリは、デバッガ自体が実行する余地があることを確認するために、残りが少ない場合は値を増加させます。</target>
        </trans-unit>
        <trans-unit id="63779c1cdb9430e4b77e711a1e1ae7eb8735f2c6" translate="yes" xml:space="preserve">
          <source>The default value of this variable is &lt;code&gt;&quot;\\`[&amp;nbsp;\t]*\\'&quot;&lt;/code&gt;, which matches only a string of whitespace. The effect of this default is to force the fill prefixes found in one-line paragraphs always to be pure whitespace.</source>
          <target state="translated">この変数のデフォルト値は &lt;code&gt;&quot;\\`[&amp;nbsp;\t]*\\'&quot;&lt;/code&gt; であり、空白の文字列のみに一致します。このデフォルトの効果は、1行の段落にある塗りつぶしプレフィックスを常に純粋な空白にすることです。</target>
        </trans-unit>
        <trans-unit id="217b324a19b504412ef043553ade93bbd8a61750" translate="yes" xml:space="preserve">
          <source>The default value of this variable specifies functions called during redisplay when a window state change has been detected or the window state change flag has been set on at least one frame. The value should be a list of functions that take no argument.</source>
          <target state="translated">この変数のデフォルト値は、ウィンドウ状態の変更が検出された場合や、少なくとも1フレームにウィンドウ状態変更フラグが設定されている場合に、再表示中に呼び出される関数を指定する。この値は、引数を取らない関数のリストでなければなりません。</target>
        </trans-unit>
        <trans-unit id="ac7d9e5d9130c0ce3ad4a6ef24ef8b11019be5bf" translate="yes" xml:space="preserve">
          <source>The default width (in pixels) of any lines created.</source>
          <target state="translated">作成された行のデフォルトの幅(ピクセル単位)。</target>
        </trans-unit>
        <trans-unit id="cae16c8270beb52faa207be4ea3ec044cff903b8" translate="yes" xml:space="preserve">
          <source>The default width of the left and right fringes of windows in this frame (see &lt;a href=&quot;fringes#Fringes&quot;&gt;Fringes&lt;/a&gt;). If either of these is zero, that effectively removes the corresponding fringe.</source>
          <target state="translated">このフレームのウィンドウの左右のフリンジのデフォルトの幅（&lt;a href=&quot;fringes#Fringes&quot;&gt;フリンジを&lt;/a&gt;参照）。これらのいずれかがゼロの場合、対応するフリンジが効果的に削除されます。</target>
        </trans-unit>
        <trans-unit id="f3d7400445b75719c99eccd1b0976fe9d039c6d2" translate="yes" xml:space="preserve">
          <source>The defining form itself is not instrumented (that is, Edebug does not stop before and after the defining form), but forms inside it typically will be instrumented. The &lt;code&gt;&amp;amp;define&lt;/code&gt; keyword should be the first element in a list specification.</source>
          <target state="translated">定義フォーム自体はインストルメントされません（つまり、Edebugは定義フォームの前後で停止しません）が、通常、その中のフォームはインストルメントされます。 &lt;code&gt;&amp;amp;define&lt;/code&gt; キーワードリスト仕様の最初の要素でなければなりません。</target>
        </trans-unit>
        <trans-unit id="9c5fa5dc8ac20b29bbb924420889ce1b839d9ba5" translate="yes" xml:space="preserve">
          <source>The definition of &amp;ldquo;supported&amp;rdquo; is somewhat heuristic, but basically means that a face containing all the attributes in &lt;var&gt;attributes&lt;/var&gt;, when merged with the default face for display, can be represented in a way that&amp;rsquo;s</source>
          <target state="translated">「サポート」の定義は、ややヒューリスティックであるが、基本的手段は全ての属性含む顔という &lt;var&gt;attributes&lt;/var&gt; 表示のために、デフォルトの顔と合併する場合、のような方法で表現することができます</target>
        </trans-unit>
        <trans-unit id="aedb03aaf6dff1ad0c121d98d3217492fba910a6" translate="yes" xml:space="preserve">
          <source>The definition of a word is any sequence of consecutive characters that are assigned to the word constituent syntax class in the current syntax table (see &lt;a href=&quot;syntax-class-table#Syntax-Class-Table&quot;&gt;Syntax Class Table&lt;/a&gt;).</source>
          <target state="translated">単語の定義は、現在の構文テーブルの単語構成構文クラスに割り当てられている連続する文字のシーケンスです（&lt;a href=&quot;syntax-class-table#Syntax-Class-Table&quot;&gt;構文クラステーブルを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="2ae3fd0458aa9fbdb36602fe411a8d0a3f565b34" translate="yes" xml:space="preserve">
          <source>The definitions are only available during the macro-expansion of &lt;var&gt;body&lt;/var&gt;, and are thus not present during execution of compiled code.</source>
          <target state="translated">定義は &lt;var&gt;body&lt;/var&gt; のマクロ拡張中にのみ使用可能であるため、コンパイルされたコードの実行中には存在しません。</target>
        </trans-unit>
        <trans-unit id="877a7963eb71e684d92a94b1803dcb705fa62e6e" translate="yes" xml:space="preserve">
          <source>The definitions live in a name space of their own, separate from that of Lisp variables. There is thus no need to attach a suffix like &lt;code&gt;-regexp&lt;/code&gt; to names; they cannot collide with anything else.</source>
          <target state="translated">定義は、Lisp変数の名前空間とは別に、独自の名前空間に存在します。したがって、名前に &lt;code&gt;-regexp&lt;/code&gt; のような接尾辞を付ける必要はありません。他のものと衝突することはできません。</target>
        </trans-unit>
        <trans-unit id="c95395c58aba34be09b3406ccfc84562286cab93" translate="yes" xml:space="preserve">
          <source>The degree of &lt;em&gt;travel&lt;/em&gt; of the window through (the visible portion of) the buffer, i.e. the size of the text above the top of the window expressed as a percentage of all the text outside the window, or &amp;lsquo;</source>
          <target state="translated">バッファ（の表示部分）を通過するウィンドウの&lt;em&gt;移動&lt;/em&gt;の程度、つまり、ウィンドウの外側にあるすべてのテキストのパーセンテージとして表される、ウィンドウの上部より上のテキストのサイズ、または '</target>
        </trans-unit>
        <trans-unit id="d4c578bc284c890724d1b4502b0a9e91e91cf747" translate="yes" xml:space="preserve">
          <source>The depth in parentheses, counting from 0. &lt;strong&gt;Warning:&lt;/strong&gt; this can be negative if there are more close parens than open parens between the parser&amp;rsquo;s starting point and end point.</source>
          <target state="translated">括弧内の深さ。0から数えます。&lt;strong&gt;警告：&lt;/strong&gt;パーサーの開始点と終了点の間に、開いているパレンよりも近いパレンが多い場合、これは負になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f9ee4a27b6f69857fe6970eaa91ad4c556960063" translate="yes" xml:space="preserve">
          <source>The depth limit counts internal uses of &lt;code&gt;eval&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, and &lt;code&gt;funcall&lt;/code&gt;, such as for calling the functions mentioned in Lisp expressions, and recursive evaluation of function call arguments and function body forms, as well as explicit calls in Lisp code.</source>
          <target state="translated">深さ制限は、Lisp式で言及された関数の呼び出し、関数呼び出し引数と関数本体フォームの再帰的評価、Lispコードでの明示的な呼び出しなど、 &lt;code&gt;eval&lt;/code&gt; 、 &lt;code&gt;apply&lt;/code&gt; 、 &lt;code&gt;funcall&lt;/code&gt; の内部使用をカウントします。</target>
        </trans-unit>
        <trans-unit id="a04b7a2c41711ae199f98dbc28e807a536f9db15" translate="yes" xml:space="preserve">
          <source>The derived mode should also define a &lt;em&gt;listing command&lt;/em&gt;. This, not the mode command, is what the user calls (e.g.,</source>
          <target state="translated">派生モードでは、&lt;em&gt;リストコマンド&lt;/em&gt;も定義する必要があります。これは、modeコマンドではなく、ユーザーが呼び出すものです（たとえば、</target>
        </trans-unit>
        <trans-unit id="edf217a40e12d6916d0fa58287c1046472b44fae" translate="yes" xml:space="preserve">
          <source>The descriptions of macros and special forms use a more complex notation to specify optional and repeated arguments, because they can break the argument list down into separate arguments in more complicated ways. &amp;lsquo;</source>
          <target state="translated">マクロと特殊形式の説明では、より複雑な表記を使用して、オプションの繰り返し引数を指定します。これは、引数リストをより複雑な方法で個別の引数に分割できるためです。'</target>
        </trans-unit>
        <trans-unit id="2a9e034a9e7e27057da723954a997fb3896ab0b9" translate="yes" xml:space="preserve">
          <source>The descriptor of the arguments. This can either be a list of arguments, as described in &lt;a href=&quot;argument-list#Argument-List&quot;&gt;Argument List&lt;/a&gt;, or an integer encoding the required number of arguments. In the latter case, the value of the descriptor specifies the minimum number of arguments in the bits zero to 6, and the maximum number of arguments in bits 8 to 14. If the argument list uses &lt;code&gt;&amp;amp;rest&lt;/code&gt;, then bit 7 is set; otherwise it&amp;rsquo;s cleared.</source>
          <target state="translated">引数の記述子。これは、&lt;a href=&quot;argument-list#Argument-List&quot;&gt;引数リスト&lt;/a&gt;で説明されている引数のリスト、または必要な数の引数をエンコードする整数のいずれかです。後者の場合、記述子の値は、ビット0〜6の引数の最小数、およびビット8〜14の引数の最大数を指定します。引数リストで &lt;code&gt;&amp;amp;rest&lt;/code&gt; を使用すると、ビット7が設定されます。それ以外の場合はクリアされます。</target>
        </trans-unit>
        <trans-unit id="28d0d52832e8c8eae5fe1ac0bf15f2addec6fe86" translate="yes" xml:space="preserve">
          <source>The destructive aspect of &lt;code&gt;sort&lt;/code&gt; for lists is that it rearranges the cons cells forming &lt;var&gt;sequence&lt;/var&gt; by changing &lt;small&gt;CDR&lt;/small&gt;s. A nondestructive sort function would create new cons cells to store the elements in their sorted order. If you wish to make a sorted copy without destroying the original, copy it first with &lt;code&gt;copy-sequence&lt;/code&gt; and then sort.</source>
          <target state="translated">リストの &lt;code&gt;sort&lt;/code&gt; の破壊的な側面は、&lt;small&gt;CDR&lt;/small&gt;を変更する &lt;var&gt;sequence&lt;/var&gt; により、consセルの形成シーケンスを再配置することです。非破壊的な並べ替え関数は、新しいconsセルを作成して、要素を並べ替えられた順序で格納します。オリジナルを破壊せずにソートされたコピーを作成したい場合は、最初に &lt;code&gt;copy-sequence&lt;/code&gt; を使用してコピーしてから、ソートします。&lt;small&gt;&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d572ffee8a2d69eec0c8cc8132950bf3a5e93701" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;defconst&lt;/code&gt; and &lt;code&gt;defvar&lt;/code&gt; is mainly a matter of intent, serving to inform human readers of whether the value should ever change. Emacs Lisp does not actually prevent you from changing the value of a variable defined with &lt;code&gt;defconst&lt;/code&gt;. One notable difference between the two forms is that &lt;code&gt;defconst&lt;/code&gt; unconditionally initializes the variable, whereas &lt;code&gt;defvar&lt;/code&gt; initializes it only if it is originally void.</source>
          <target state="translated">違い &lt;code&gt;defconst&lt;/code&gt; はと &lt;code&gt;defvar&lt;/code&gt; のは、値がこれまでに変更する必要があるかどうかの人間の読者に知らせるために役立つ、主に意図の問題です。Emacs Lispは、実際には &lt;code&gt;defconst&lt;/code&gt; で定義された変数の値を変更することを妨げません。2つの形式の顕著な違いの1つは、 &lt;code&gt;defconst&lt;/code&gt; が変数を無条件に初期化するのに対し、 &lt;code&gt;defvar&lt;/code&gt; は元々voidである場合にのみ変数を初期化することです。</target>
        </trans-unit>
        <trans-unit id="00f363a6aefc0d2de4ef2a1c12ef0e6acbfbacc8" translate="yes" xml:space="preserve">
          <source>The difference between a directory name and a directory file name is subtle but crucial. When an Emacs variable or function argument is described as being a directory name, a directory file name is not acceptable. When &lt;code&gt;file-name-directory&lt;/code&gt; returns a string, that is always a directory name.</source>
          <target state="translated">ディレクトリ名とディレクトリファイル名の違いは微妙ですが重要です。Emacsの変数または関数の引数がディレクトリ名であると記述されている場合、ディレクトリファイル名は受け入れられません。 &lt;code&gt;file-name-directory&lt;/code&gt; が文字列を返す場合、それは常にディレクトリ名です。</target>
        </trans-unit>
        <trans-unit id="0c61186b221c080d1307543136c715a6291ad149" translate="yes" xml:space="preserve">
          <source>The difference from &lt;code&gt;start-process&lt;/code&gt; is that this function may invoke a file name handler based on the value of &lt;code&gt;default-directory&lt;/code&gt;. This handler ought to run &lt;var&gt;program&lt;/var&gt;, perhaps on the local host, perhaps on a remote host that corresponds to &lt;code&gt;default-directory&lt;/code&gt;. In the latter case, the local part of &lt;code&gt;default-directory&lt;/code&gt; becomes the working directory of the process.</source>
          <target state="translated">&lt;code&gt;start-process&lt;/code&gt; との違いは、この関数が &lt;code&gt;default-directory&lt;/code&gt; の値に基づいてファイル名ハンドラーを呼び出す可能性があることです。このハンドラーは、おそらくローカルホスト上で、おそらく &lt;code&gt;default-directory&lt;/code&gt; に対応するリモートホスト上で &lt;var&gt;program&lt;/var&gt; を実行する必要があります。後者の場合、 &lt;code&gt;default-directory&lt;/code&gt; のローカル部分がプロセスの作業ディレクトリになります。</target>
        </trans-unit>
        <trans-unit id="405409528439a35fcd3fdd61f588ad09de4201e8" translate="yes" xml:space="preserve">
          <source>The difference is in &lt;var&gt;boolean-expression&lt;/var&gt; in &lt;code&gt;guard&lt;/code&gt;: &lt;code&gt;CLEAN&lt;/code&gt; references &lt;code&gt;n&lt;/code&gt; simply and directly, while &lt;code&gt;MAYBE&lt;/code&gt; references &lt;code&gt;n&lt;/code&gt; with a side-effect, in the expression &lt;code&gt;(incf n)&lt;/code&gt;. When &lt;code&gt;integer&lt;/code&gt; is 3, here&amp;rsquo;s what happens:</source>
          <target state="translated">違いはである &lt;var&gt;boolean-expression&lt;/var&gt; で &lt;code&gt;guard&lt;/code&gt; ： &lt;code&gt;CLEAN&lt;/code&gt; 参照 &lt;code&gt;n&lt;/code&gt; 、一方単に直接 &lt;code&gt;MAYBE&lt;/code&gt; 参照 &lt;code&gt;n&lt;/code&gt; 発現の副作用を有する &lt;code&gt;(incf n)&lt;/code&gt; 。 &lt;code&gt;integer&lt;/code&gt; が3の場合、次のようになります。</target>
        </trans-unit>
        <trans-unit id="fbc5a4ab37f1524874d8f0ded5207cb907043590" translate="yes" xml:space="preserve">
          <source>The direct effect of calling &lt;code&gt;provide&lt;/code&gt; is to add &lt;var&gt;feature&lt;/var&gt; to the front of &lt;code&gt;features&lt;/code&gt; if it is not already in that list and call any &lt;code&gt;eval-after-load&lt;/code&gt; code waiting for it (see &lt;a href=&quot;hooks-for-loading#Hooks-for-Loading&quot;&gt;Hooks for Loading&lt;/a&gt;). The argument &lt;var&gt;feature&lt;/var&gt; must be a symbol. &lt;code&gt;provide&lt;/code&gt; returns &lt;var&gt;feature&lt;/var&gt;.</source>
          <target state="translated">呼び出しの直接の効果 &lt;code&gt;provide&lt;/code&gt; 追加することで &lt;var&gt;feature&lt;/var&gt; 前面に &lt;code&gt;features&lt;/code&gt; それはそのリストにない場合や任意の呼び出し &lt;code&gt;eval-after-load&lt;/code&gt; （参照で待っていたコードを&lt;a href=&quot;hooks-for-loading#Hooks-for-Loading&quot;&gt;読み込ん用フック&lt;/a&gt;）。引数 &lt;var&gt;feature&lt;/var&gt; はシンボルである必要があります。返品 &lt;var&gt;feature&lt;/var&gt; &lt;code&gt;provide&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="c5e376c6c42e5e68d88b0c49222ae1c46a5afcef" translate="yes" xml:space="preserve">
          <source>The directory for expanding relative file names. This is the value of the buffer-local variable &lt;code&gt;default-directory&lt;/code&gt; (see &lt;a href=&quot;file-name-expansion#File-Name-Expansion&quot;&gt;File Name Expansion&lt;/a&gt;).</source>
          <target state="translated">相対ファイル名を展開するためのディレクトリ。これは、バッファローカル変数 &lt;code&gt;default-directory&lt;/code&gt; の値です（&lt;a href=&quot;file-name-expansion#File-Name-Expansion&quot;&gt;ファイル名の拡張を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="95896d2cb5e4e00827d6c52c6324b90256c8c47b" translate="yes" xml:space="preserve">
          <source>The directory for writing temporary files via &lt;code&gt;make-nearby-temp-file&lt;/code&gt;. In case of a remote &lt;code&gt;default-directory&lt;/code&gt;, this is a directory for temporary files on that remote host. If such a directory does not exist, or &lt;code&gt;default-directory&lt;/code&gt; ought to be located on a mounted file system (see &lt;code&gt;mounted-file-systems&lt;/code&gt;), the function returns &lt;code&gt;default-directory&lt;/code&gt;. For a non-remote and non-mounted &lt;code&gt;default-directory&lt;/code&gt;, the value of the variable &lt;code&gt;temporary-file-directory&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;make-nearby-temp-file&lt;/code&gt; を介して一時ファイルを書き込むためのディレクトリ。リモートの &lt;code&gt;default-directory&lt;/code&gt; の場合、これはそのリモートホスト上の一時ファイル用のディレクトリです。そのようなディレクトリが存在しない場合、または &lt;code&gt;default-directory&lt;/code&gt; をマウントされたファイルシステムに配置する必要がある場合（ &lt;code&gt;mounted-file-systems&lt;/code&gt; を参照）、関数は &lt;code&gt;default-directory&lt;/code&gt; を返します。リモートおよびマウントされていない &lt;code&gt;default-directory&lt;/code&gt; の場合、変数 &lt;code&gt;temporary-file-directory&lt;/code&gt; の値が返されます。</target>
        </trans-unit>
        <trans-unit id="3f0c90883c01ceb7e1d412c839e69e9b41c49f91" translate="yes" xml:space="preserve">
          <source>The directory part of a file name, and the rest.</source>
          <target state="translated">ファイル名のディレクトリ部分とそれ以外の部分。</target>
        </trans-unit>
        <trans-unit id="bb1425231fa4728dea70710d27bed5b876df285a" translate="yes" xml:space="preserve">
          <source>The display Property</source>
          <target state="translated">表示プロパティ</target>
        </trans-unit>
        <trans-unit id="574c0a83bdb82c9364892cb8a35e8ae877142b4d" translate="yes" xml:space="preserve">
          <source>The display on which to open this frame. It should be a string of the form &amp;lsquo;</source>
          <target state="translated">このフレームを開くディスプレイ。'の形式の文字列である必要があります</target>
        </trans-unit>
        <trans-unit id="d4d99dccff6bb38fa72897f95b5acb0e7a7f0c6b" translate="yes" xml:space="preserve">
          <source>The display routines insist that the position of point be visible when a buffer is displayed. Normally, they select the display-start position according to their internal logic (and scroll the window if necessary) to make point visible. However, if you specify the start position with this function using &lt;code&gt;nil&lt;/code&gt; for &lt;var&gt;noforce&lt;/var&gt;, it means you want display to start at &lt;var&gt;position&lt;/var&gt; even if that would put the location of point off the screen. If this does place point off screen, the display routines attempt to move point to the left margin on the middle line in the window.</source>
          <target state="translated">表示ルーチンは、バッファが表示されるときにポイントの位置が表示されることを要求します。通常、内部ロジックに従って表示開始位置を選択し（必要に応じてウィンドウをスクロールして）、ポイントを表示します。ただし、この関数で &lt;var&gt;noforce&lt;/var&gt; に &lt;code&gt;nil&lt;/code&gt; を使用して開始位置を指定すると、ポイントの位置が画面から外れる場合でも、表示をその &lt;var&gt;position&lt;/var&gt; から開始する必要があります。これによりポイントが画面外に配置される場合、表示ルーチンはポイントをウィンドウの中央の線の左マージンに移動しようとします。</target>
        </trans-unit>
        <trans-unit id="cfbe7f152c0b39bedc406ebf65bdbb56682447f9" translate="yes" xml:space="preserve">
          <source>The display table also has six &lt;em&gt;extra slots&lt;/em&gt; which serve special purposes. Here is a table of their meanings; &lt;code&gt;nil&lt;/code&gt; in any slot means to use the default for that slot, as stated below.</source>
          <target state="translated">ディスプレイテーブルには、特別な目的に役立つ6つの&lt;em&gt;追加スロット&lt;/em&gt;もあります。これがその意味の表です。以下に説明するように、任意のスロットの &lt;code&gt;nil&lt;/code&gt; は、そのスロットのデフォルトを使用することを意味します。</target>
        </trans-unit>
        <trans-unit id="d74cb6c53f98889ae644a4ae44d69a5aaec11ebc" translate="yes" xml:space="preserve">
          <source>The distinction between the values &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;auto-raise&lt;/code&gt; is not needed for &amp;ldquo;normal&amp;rdquo; frames because the window manager usually takes care of raising them. It is useful to automatically raise child frames via &lt;code&gt;mouse-autoselect-window&lt;/code&gt; (see &lt;a href=&quot;mouse-window-auto_002dselection#Mouse-Window-Auto_002dselection&quot;&gt;Mouse Window Auto-selection&lt;/a&gt;).</source>
          <target state="translated">通常、ウィンドウマネージャが値の &lt;code&gt;auto-raise&lt;/code&gt; を処理するため、「通常の」フレームでは、値 &lt;code&gt;t&lt;/code&gt; と自動引き上げを区別する必要はありません。 &lt;code&gt;mouse-autoselect-window&lt;/code&gt; を介して子フレームを自動的に上げると便利です（&lt;a href=&quot;mouse-window-auto_002dselection#Mouse-Window-Auto_002dselection&quot;&gt;Mouse Window Auto-selectionを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="ac49afe1f8b1d00c40d5b387f20271f4e9795b2b" translate="yes" xml:space="preserve">
          <source>The documentation for the variable, as a C comment. See &lt;a href=&quot;documentation-basics#Documentation-Basics&quot;&gt;Documentation Basics&lt;/a&gt;, for more details.</source>
          <target state="translated">Cコメントとしての変数のドキュメント。詳細については、&lt;a href=&quot;documentation-basics#Documentation-Basics&quot;&gt;ドキュメントの基本を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9096506924630d76469ff43fb14e930091df8acb" translate="yes" xml:space="preserve">
          <source>The documentation string (if any); otherwise, &lt;code&gt;nil&lt;/code&gt;. The value may be a number or a list, in case the documentation string is stored in a file. Use the function &lt;code&gt;documentation&lt;/code&gt; to get the real documentation string (see &lt;a href=&quot;accessing-documentation#Accessing-Documentation&quot;&gt;Accessing Documentation&lt;/a&gt;).</source>
          <target state="translated">ドキュメント文字列（存在する場合）。それ以外の場合は &lt;code&gt;nil&lt;/code&gt; 。ドキュメント文字列がファイルに保存されている場合、値は数値またはリストになります。関数の &lt;code&gt;documentation&lt;/code&gt; を使用して、実際のドキュメント文字列を取得します（&lt;a href=&quot;accessing-documentation#Accessing-Documentation&quot;&gt;ドキュメントへのアクセスを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="7cda64b5ea11cd6957b261df860267c56e609865" translate="yes" xml:space="preserve">
          <source>The documentation string can be followed by a list of C function attributes for the C function that implements the primitive, like this:</source>
          <target state="translated">ドキュメントの文字列の後には、次のように、プリミティブを実装したC関数の属性のリストを付けることができます。</target>
        </trans-unit>
        <trans-unit id="c2c2488aff2b6b2c8931c7861476fd8beada96a4" translate="yes" xml:space="preserve">
          <source>The documentation string is a Lisp string object placed within the function definition to describe the function for the Emacs help facilities. See &lt;a href=&quot;function-documentation#Function-Documentation&quot;&gt;Function Documentation&lt;/a&gt;.</source>
          <target state="translated">ドキュメンテーション文字列は、Emacsヘルプ機能の関数を説明するために関数定義内に配置されるLisp文字列オブジェクトです。&lt;a href=&quot;function-documentation#Function-Documentation&quot;&gt;関数のドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8798fcbcbfa841bfd2050e9aff8cc8aa58c79b62" translate="yes" xml:space="preserve">
          <source>The documentation string may include the special documentation substrings, &amp;lsquo;</source>
          <target state="translated">ドキュメント文字列には、特別なドキュメントの部分文字列が含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="ea2c69ace2daf00b95cdbfd31c14d5463703de87" translate="yes" xml:space="preserve">
          <source>The dumped</source>
          <target state="translated">捨てられた</target>
        </trans-unit>
        <trans-unit id="eb89833eef2d50da5011e2727744d05d6002e503" translate="yes" xml:space="preserve">
          <source>The dynamic loading feature has certain disadvantages:</source>
          <target state="translated">ダイナミックローディング機能には、特定の欠点があります。</target>
        </trans-unit>
        <trans-unit id="07a8b495dabf40d957fd26c3bb5cf9abd29e9d67" translate="yes" xml:space="preserve">
          <source>The earliest GNU Emacs versions represented meta characters as codes in the range of 128 to 255. At that time, the basic character codes ranged from 0 to 127, so all keyboard character codes did fit in a string. Many Lisp programs used &amp;lsquo;</source>
          <target state="translated">初期のGNUEmacsバージョンは、メタ文字を128〜255の範囲のコードとして表していました。当時、基本的な文字コードは0〜127の範囲であったため、すべてのキーボード文字コードは文字列に収まりました。使用される多くのLispプログラム '</target>
        </trans-unit>
        <trans-unit id="f317bf5e201146dfa917711748b39145e9d9a2e3" translate="yes" xml:space="preserve">
          <source>The easiest way to construct a keymap with a prompt string is to specify the string as an argument when you call &lt;code&gt;make-keymap&lt;/code&gt;, &lt;code&gt;make-sparse-keymap&lt;/code&gt; (see &lt;a href=&quot;creating-keymaps#Creating-Keymaps&quot;&gt;Creating Keymaps&lt;/a&gt;), or &lt;code&gt;define-prefix-command&lt;/code&gt; (see &lt;a href=&quot;prefix-keys#Definition-of-define_002dprefix_002dcommand&quot;&gt;Definition of define-prefix-command&lt;/a&gt;). If you do not want the keymap to operate as a menu, don&amp;rsquo;t specify a prompt string for it.</source>
          <target state="translated">プロンプト文字列を使用してキーマップを作成する最も簡単な方法は、 &lt;code&gt;make-keymap&lt;/code&gt; 、 &lt;code&gt;make-sparse-keymap&lt;/code&gt; （キーマップの&lt;a href=&quot;creating-keymaps#Creating-Keymaps&quot;&gt;作成を参照&lt;/a&gt;）、または &lt;code&gt;define-prefix-command&lt;/code&gt; （&lt;a href=&quot;prefix-keys#Definition-of-define_002dprefix_002dcommand&quot;&gt;define-prefixの定義を&lt;/a&gt;参照）を呼び出すときに、引数として文字列を指定することです。-コマンド）。キーマップをメニューとして機能させたくない場合は、プロンプト文字列を指定しないでください。</target>
        </trans-unit>
        <trans-unit id="14b25b9720e3a5abd52e30eefdd4ec23c3d93327" translate="yes" xml:space="preserve">
          <source>The easiest way to insert and manipulate links is to use the &lt;code&gt;button&lt;/code&gt; package. See &lt;a href=&quot;buttons#Buttons&quot;&gt;Buttons&lt;/a&gt;. In this section, we will explain how to manually set up clickable text in a buffer, using text properties. For simplicity, we will refer to the clickable text as a &lt;em&gt;link&lt;/em&gt;.</source>
          <target state="translated">リンクを挿入して操作する最も簡単な方法は、 &lt;code&gt;button&lt;/code&gt; パッケージを使用することです。&lt;a href=&quot;buttons#Buttons&quot;&gt;ボタンを&lt;/a&gt;参照してください。このセクションでは、テキストプロパティを使用して、バッファ内にクリック可能なテキストを手動で設定する方法について説明します。簡単にするために、クリック可能なテキストを&lt;em&gt;リンク&lt;/em&gt;と呼びます。</target>
        </trans-unit>
        <trans-unit id="adefbbe3ec3b1c020185f3ff9029cdd73908a5c0" translate="yes" xml:space="preserve">
          <source>The easiest way to make a string with text properties is with &lt;code&gt;propertize&lt;/code&gt;:</source>
          <target state="translated">テキストプロパティを使用して文字列を作成する最も簡単な方法は、 &lt;code&gt;propertize&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="21ee8bf0f869856280213273b1b77146340d0758" translate="yes" xml:space="preserve">
          <source>The easiest way to mark a function as obsolete is to put a &lt;code&gt;(declare (obsolete &amp;hellip;))&lt;/code&gt; form in the function&amp;rsquo;s &lt;code&gt;defun&lt;/code&gt; definition. See &lt;a href=&quot;declare-form#Declare-Form&quot;&gt;Declare Form&lt;/a&gt;. Alternatively, you can use the &lt;code&gt;make-obsolete&lt;/code&gt; function, described below.</source>
          <target state="translated">関数を廃止としてマークする最も簡単な方法は、関数の &lt;code&gt;defun&lt;/code&gt; 定義に &lt;code&gt;(declare (obsolete &amp;hellip;))&lt;/code&gt; フォームを配置することです。&lt;a href=&quot;declare-form#Declare-Form&quot;&gt;フォームの宣言を&lt;/a&gt;参照してください。または、以下で説明する &lt;code&gt;make-obsolete&lt;/code&gt; 関数を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="e578edece4b9081d5686e88591733ede2ce224d7" translate="yes" xml:space="preserve">
          <source>The easiest way to write a major mode is to use the macro &lt;code&gt;define-derived-mode&lt;/code&gt;, which sets up the new mode as a variant of an existing major mode. See &lt;a href=&quot;derived-modes#Derived-Modes&quot;&gt;Derived Modes&lt;/a&gt;. We recommend using &lt;code&gt;define-derived-mode&lt;/code&gt; even if the new mode is not an obvious derivative of another mode, as it automatically enforces many coding conventions for you. See &lt;a href=&quot;basic-major-modes#Basic-Major-Modes&quot;&gt;Basic Major Modes&lt;/a&gt;, for common modes to derive from.</source>
          <target state="translated">メジャーモードを作成する最も簡単な方法は、マクロ &lt;code&gt;define-derived-mode&lt;/code&gt; モードを使用することです。これは、既存のメジャーモードのバリアントとして新しいモードを設定します。&lt;a href=&quot;derived-modes#Derived-Modes&quot;&gt;派生モードを&lt;/a&gt;参照してください。新しいモードが別のモードの明らかな派生物ではない場合でも、define-派生 &lt;code&gt;define-derived-mode&lt;/code&gt; を使用することをお勧めします。これにより、多くのコーディング規則が自動的に適用されます。派生する一般的&lt;a href=&quot;basic-major-modes#Basic-Major-Modes&quot;&gt;なモード&lt;/a&gt;については、基本的なメジャーモードを参照してください。</target>
        </trans-unit>
        <trans-unit id="d3ecb997307ce78019c7f2cc8553cc19a83270a2" translate="yes" xml:space="preserve">
          <source>The editor command loop automatically calls &lt;code&gt;undo-boundary&lt;/code&gt; just before executing each key sequence, so that each undo normally undoes the effects of one command. A few exceptional commands are &lt;em&gt;amalgamating&lt;/em&gt;: these commands generally cause small changes to buffers, so with these a boundary is inserted only every 20th command, allowing the changes to be undone as a group. By default, the commands &lt;code&gt;self-insert-command&lt;/code&gt;, which produces self-inserting input characters (see &lt;a href=&quot;commands-for-insertion#Commands-for-Insertion&quot;&gt;Commands for Insertion&lt;/a&gt;), and &lt;code&gt;delete-char&lt;/code&gt;, which deletes characters (see &lt;a href=&quot;deletion#Deletion&quot;&gt;Deletion&lt;/a&gt;), are amalgamating. Where a command affects the contents of several buffers, as may happen, for example, when a function on the &lt;code&gt;post-command-hook&lt;/code&gt; affects a buffer other than the &lt;code&gt;current-buffer&lt;/code&gt;, then &lt;code&gt;undo-boundary&lt;/code&gt; will be called in each of the affected buffers.</source>
          <target state="translated">エディタコマンドループは、各キーシーケンスを実行する直前に自動的に &lt;code&gt;undo-boundary&lt;/code&gt; 呼び出すため、通常、各元に戻すと1つのコマンドの効果が元に戻されます。いくつかの例外的なコマンドが&lt;em&gt;統合され&lt;/em&gt;ています。これらのコマンドは通常、バッファに小さな変更を加えるため、これらのコマンドでは20番目のコマンドごとにのみ境界が挿入され、変更をグループとして元に戻すことができます。デフォルトでは、 &lt;code&gt;self-insert-command&lt;/code&gt; 挿入入力文字を生成するコマンドself-insert-command（&lt;a href=&quot;commands-for-insertion#Commands-for-Insertion&quot;&gt;挿入のコマンドを&lt;/a&gt;参照）と &lt;code&gt;delete-char&lt;/code&gt; を削除するdelete-char（&lt;a href=&quot;deletion#Deletion&quot;&gt;削除を&lt;/a&gt;参照）が統合されています。コマンドが複数のバッファの内容に影響を与える場合、たとえば、 &lt;code&gt;post-command-hook&lt;/code&gt; は &lt;code&gt;current-buffer&lt;/code&gt; 以外のバッファーに影響を与え、その後、影響を受けた各バッファーで &lt;code&gt;undo-boundary&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6175dd788a5ec79d9f8f9e1ade63289de866ae73" translate="yes" xml:space="preserve">
          <source>The editor command loop reads key sequences using the function &lt;code&gt;read-key-sequence&lt;/code&gt;, which uses &lt;code&gt;read-event&lt;/code&gt;. These and other functions for event input are also available for use in Lisp programs. See also &lt;code&gt;momentary-string-display&lt;/code&gt; in &lt;a href=&quot;temporary-displays#Temporary-Displays&quot;&gt;Temporary Displays&lt;/a&gt;, and &lt;code&gt;sit-for&lt;/code&gt; in &lt;a href=&quot;waiting#Waiting&quot;&gt;Waiting&lt;/a&gt;. See &lt;a href=&quot;terminal-input#Terminal-Input&quot;&gt;Terminal Input&lt;/a&gt;, for functions and variables for controlling terminal input modes and debugging terminal input.</source>
          <target state="translated">エディタのコマンドループは、 &lt;code&gt;read-event&lt;/code&gt; を使用する関数 &lt;code&gt;read-key-sequence&lt;/code&gt; を使用してキーシーケンスを読み取ります。イベント入力用のこれらおよびその他の関数は、Lispプログラムでも使用できます。参照して &lt;code&gt;momentary-string-display&lt;/code&gt; して&lt;a href=&quot;temporary-displays#Temporary-Displays&quot;&gt;一時的な表示&lt;/a&gt;、および &lt;code&gt;sit-for&lt;/code&gt; に&lt;a href=&quot;waiting#Waiting&quot;&gt;待っています&lt;/a&gt;。端末入力モードを制御し、端末入力をデバッグするための関数と変数については、&lt;a href=&quot;terminal-input#Terminal-Input&quot;&gt;端末入力を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b769abdeba8adfc9ee85136ec1467551431d0212" translate="yes" xml:space="preserve">
          <source>The editor command loop sets several Lisp variables to keep status records for itself and for commands that are run. With the exception of &lt;code&gt;this-command&lt;/code&gt; and &lt;code&gt;last-command&lt;/code&gt; it&amp;rsquo;s generally a bad idea to change any of these variables in a Lisp program.</source>
          <target state="translated">エディタのコマンドループは、いくつかのLisp変数を設定して、それ自体と実行されるコマンドのステータスレコードを保持します。 &lt;code&gt;this-command&lt;/code&gt; と &lt;code&gt;last-command&lt;/code&gt; を除いて、Lispプログラムでこれらの変数のいずれかを変更することは一般的に悪い考えです。</target>
        </trans-unit>
        <trans-unit id="67b5a363399c8d1cc2c7c2647d77f745ef5552bd" translate="yes" xml:space="preserve">
          <source>The effect is that this keymap inherits all the bindings of &lt;var&gt;parent-keymap&lt;/var&gt;, whatever they may be at the time a key is looked up, but can add to them or override them with &lt;var&gt;elements&lt;/var&gt;.</source>
          <target state="translated">その結果、このキーマップは、キーが検索された時点での &lt;var&gt;parent-keymap&lt;/var&gt; キーマップのすべてのバインディングを継承しますが、それらに追加したり、 &lt;var&gt;elements&lt;/var&gt; オーバーライドしたりできます。</target>
        </trans-unit>
        <trans-unit id="591769f891f8125425d2075adee208efc1bbcaaa" translate="yes" xml:space="preserve">
          <source>The effect of &lt;code&gt;debug&lt;/code&gt; here is only to prevent &lt;code&gt;condition-case&lt;/code&gt; from suppressing the call to the debugger. Any given error will invoke the debugger only if &lt;code&gt;debug-on-error&lt;/code&gt; and the other usual filtering mechanisms say it should. See &lt;a href=&quot;error-debugging#Error-Debugging&quot;&gt;Error Debugging&lt;/a&gt;.</source>
          <target state="translated">ここでの &lt;code&gt;debug&lt;/code&gt; の効果は、 &lt;code&gt;condition-case&lt;/code&gt; がデバッガーの呼び出しを抑制しないようにすることだけです。与えられたエラーは、 &lt;code&gt;debug-on-error&lt;/code&gt; および他の通常のフィルタリングメカニズムが必要と言った場合にのみデバッガーを呼び出します。&lt;a href=&quot;error-debugging#Error-Debugging&quot;&gt;エラーデバッグを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2140fa127d13bbd573539409dfa58bf7787589bd" translate="yes" xml:space="preserve">
          <source>The effective user ID of the user who invoked the process. The corresponding &lt;var&gt;value&lt;/var&gt; is a number. If the process was invoked by the same user who runs the current Emacs session, the value is identical to what &lt;code&gt;user-uid&lt;/code&gt; returns (see &lt;a href=&quot;user-identification#User-Identification&quot;&gt;User Identification&lt;/a&gt;).</source>
          <target state="translated">プロセスを呼び出したユーザーの実効ユーザーID。対応する &lt;var&gt;value&lt;/var&gt; は数値です。プロセスが現在のEmacsセッションを実行しているのと同じユーザーによって呼び出された場合、値は &lt;code&gt;user-uid&lt;/code&gt; が返すものと同じです（&lt;a href=&quot;user-identification#User-Identification&quot;&gt;ユーザーIDを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="054dbf07fdb389c2141619772a29e0e605f543c4" translate="yes" xml:space="preserve">
          <source>The element &lt;var&gt;position&lt;/var&gt; is a list describing the position of the event, in the same format as used in a mouse-click event (see &lt;a href=&quot;click-events#Click-Events&quot;&gt;Click Events&lt;/a&gt;), and &lt;var&gt;files&lt;/var&gt; is the list of file names that were dragged and dropped. The usual way to handle this event is by visiting these files.</source>
          <target state="translated">要素の &lt;var&gt;position&lt;/var&gt; は、マウスクリックイベントで使用されるのと同じ形式でイベントの位置を説明するリストであり（&lt;a href=&quot;click-events#Click-Events&quot;&gt;クリックイベントを&lt;/a&gt;参照）、 &lt;var&gt;files&lt;/var&gt; はドラッグアンドドロップされたファイル名のリストです。このイベントを処理する通常の方法は、これらのファイルにアクセスすることです。</target>
        </trans-unit>
        <trans-unit id="39de66e9c3f4b1f00f3f70922dee79dd2890c1eb" translate="yes" xml:space="preserve">
          <source>The elements &lt;code&gt;left-fringe&lt;/code&gt;, &lt;code&gt;right-fringe&lt;/code&gt;, &lt;code&gt;left-margin&lt;/code&gt;, &lt;code&gt;right-margin&lt;/code&gt;, &lt;code&gt;scroll-bar&lt;/code&gt;, and &lt;code&gt;text&lt;/code&gt; specify the width of the corresponding area of the window. When the window displays line numbers (see &lt;a href=&quot;size-of-displayed-text#Size-of-Displayed-Text&quot;&gt;Size of Displayed Text&lt;/a&gt;), the width of the &lt;code&gt;text&lt;/code&gt; area is decreased by the screen space taken by the line-number display.</source>
          <target state="translated">要素 &lt;code&gt;left-fringe&lt;/code&gt; 、 &lt;code&gt;right-fringe&lt;/code&gt; 、 &lt;code&gt;left-margin&lt;/code&gt; 、 &lt;code&gt;right-margin&lt;/code&gt; 、 &lt;code&gt;scroll-bar&lt;/code&gt; 、および &lt;code&gt;text&lt;/code&gt; は、ウィンドウの対応する領域の幅を指定します。ウィンドウに行番号が表示されている場合（&lt;a href=&quot;size-of-displayed-text#Size-of-Displayed-Text&quot;&gt;表示されるテキストのサイズを&lt;/a&gt;参照）、 &lt;code&gt;text&lt;/code&gt; 領域の幅は、行番号の表示に使用される画面スペースによって減少します。</target>
        </trans-unit>
        <trans-unit id="c19e4ee125f09b12484bc3bf030c6cee2240307a" translate="yes" xml:space="preserve">
          <source>The elements &lt;var&gt;beg&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt; are integers, and together specify a range of indices in the string; &lt;var&gt;plist&lt;/var&gt; is the property list for that range. For example,</source>
          <target state="translated">要素 &lt;var&gt;beg&lt;/var&gt; と &lt;var&gt;end&lt;/var&gt; は整数であり、一緒に文字列内のインデックスの範囲を指定します。 &lt;var&gt;plist&lt;/var&gt; は、その範囲のプロパティリストです。例えば、</target>
        </trans-unit>
        <trans-unit id="819edd219dab7009427b8b49d18302d9e0dce52d" translate="yes" xml:space="preserve">
          <source>The elements of an array may be referenced or changed with the functions &lt;code&gt;aref&lt;/code&gt; and &lt;code&gt;aset&lt;/code&gt;, respectively (see &lt;a href=&quot;array-functions#Array-Functions&quot;&gt;Array Functions&lt;/a&gt;).</source>
          <target state="translated">配列の要素は、それぞれ関数 &lt;code&gt;aref&lt;/code&gt; および &lt;code&gt;aset&lt;/code&gt; を使用して参照または変更できます（&lt;a href=&quot;array-functions#Array-Functions&quot;&gt;配列関数を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="6f5842ceb731b62f33d895e3247a64f0979807eb" translate="yes" xml:space="preserve">
          <source>The elements of the &lt;code&gt;command-switch-alist&lt;/code&gt; look like this:</source>
          <target state="translated">&lt;code&gt;command-switch-alist&lt;/code&gt; の要素は次のようになります。</target>
        </trans-unit>
        <trans-unit id="1f8aa67132fef0998682c755d2d95f66a05ef6fd" translate="yes" xml:space="preserve">
          <source>The elements of the alist are ordered so that the &lt;var&gt;key&lt;/var&gt; increases in length. The first element is always &lt;code&gt;([] . &lt;var&gt;keymap&lt;/var&gt;)&lt;/code&gt;, because the specified keymap is accessible from itself with a prefix of no events.</source>
          <target state="translated">リストの要素は、 &lt;var&gt;key&lt;/var&gt; 長さが長くなるように並べられています。最初の要素は常に &lt;code&gt;([] . &lt;var&gt;keymap&lt;/var&gt;)&lt;/code&gt; これは、指定されたキーマップが、イベントのプレフィックスなしでそれ自体からアクセスできるためです。</target>
        </trans-unit>
        <trans-unit id="bb682157302be72c8e42a6b49f1e7cf04e43ecde" translate="yes" xml:space="preserve">
          <source>The elements of the list describe the types of the arguments of a calling form. The possible elements of a specification list are described in the following sections.</source>
          <target state="translated">リストの要素は,呼び出しフォームの引数の型を記述する。仕様リストの可能な要素については、以下のセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="0572510e8d9760b2ddeeb43410bcfcd96d01ed05" translate="yes" xml:space="preserve">
          <source>The elements of the list, in order, are:</source>
          <target state="translated">リストの要素を順に並べると</target>
        </trans-unit>
        <trans-unit id="fdd58fe0f1c0198924c53540b3cf5d2e3265fcff" translate="yes" xml:space="preserve">
          <source>The end of a key sequence is detected when that key sequence either is bound to a command, or when Emacs determines that no additional event can lead to a sequence that is bound to a command.</source>
          <target state="translated">キーシーケンスの終了は、キーシーケンスがコマンドにバインドされているか、またはコマンドにバインドされたシーケンスにつながる追加のイベントがないと Emacs が判断したときに検出されます。</target>
        </trans-unit>
        <trans-unit id="3c6ae9a7bf2d6a50e19bef0d7e64a8b9acd8c0d0" translate="yes" xml:space="preserve">
          <source>The environment variable name is the series of alphanumeric characters (including underscores) that follow the &amp;lsquo;</source>
          <target state="translated">環境変数名は、 'に続く一連の英数字（下線を含む）です。</target>
        </trans-unit>
        <trans-unit id="3b59d11b9a544f51d2f70a6e20d15c14a62127ce" translate="yes" xml:space="preserve">
          <source>The equality tests use &lt;code&gt;eql&lt;/code&gt;.</source>
          <target state="translated">等式テストは &lt;code&gt;eql&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="32741737ac9bfd8a3c48ea4752a47b7630b57432" translate="yes" xml:space="preserve">
          <source>The equivalences table maps each one of a set of case-related characters into the next character in that set.</source>
          <target state="translated">同値表は、ケースに関連する文字の集合のそれぞれを、その集合の次の文字にマッピングします。</target>
        </trans-unit>
        <trans-unit id="52b719d4135d0c266c0f2bf15ce2d2663180f53c" translate="yes" xml:space="preserve">
          <source>The error message for this error looks like this:</source>
          <target state="translated">このエラーのエラーメッセージは以下のようになっています。</target>
        </trans-unit>
        <trans-unit id="8003c4b046bb80fba143c9330ff6bd66ac7fbc19" translate="yes" xml:space="preserve">
          <source>The error string should start with a capital letter but it should not end with a period. This is for consistency with the rest of Emacs.</source>
          <target state="translated">エラー文字列は大文字で始まりますが、ピリオドで終わってはいけません。これはEmacsの他の部分との整合性のためです。</target>
        </trans-unit>
        <trans-unit id="7b8cbe15ec1efdbd3cf5c2578bd1e52ef550cbd8" translate="yes" xml:space="preserve">
          <source>The event type of a double-click event contains the prefix &amp;lsquo;</source>
          <target state="translated">ダブルクリックイベントのイベントタイプには、プレフィックス 'が含まれます</target>
        </trans-unit>
        <trans-unit id="e2a9fed30f47fc30631b38b43fbe44a5b00c8585" translate="yes" xml:space="preserve">
          <source>The event type of a function key event is the event symbol itself. See &lt;a href=&quot;classifying-events#Classifying-Events&quot;&gt;Classifying Events&lt;/a&gt;.</source>
          <target state="translated">ファンクションキーイベントのイベントタイプは、イベントシンボル自体です。&lt;a href=&quot;classifying-events#Classifying-Events&quot;&gt;イベントの分類を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="46f0d795e1cfdd0fd1c184633351122a8cb62235" translate="yes" xml:space="preserve">
          <source>The event-reading functions invoke the current input method, if any (see &lt;a href=&quot;input-methods#Input-Methods&quot;&gt;Input Methods&lt;/a&gt;). If the value of &lt;code&gt;input-method-function&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, it should be a function; when &lt;code&gt;read-event&lt;/code&gt; reads a printing character (including</source>
          <target state="translated">イベント読み取り関数は、現在の入力メソッドがある場合はそれを呼び出します（&lt;a href=&quot;input-methods#Input-Methods&quot;&gt;入力メソッドを&lt;/a&gt;参照）。値場合 &lt;code&gt;input-method-function&lt;/code&gt; 非ある &lt;code&gt;nil&lt;/code&gt; 、それは関数であるべきです。 &lt;code&gt;read-event&lt;/code&gt; が印刷文字を読み取るとき（含む</target>
        </trans-unit>
        <trans-unit id="c10bb80d00486007c951e5ce70467305dbc1efa0" translate="yes" xml:space="preserve">
          <source>The events types &lt;code&gt;iconify-frame&lt;/code&gt;, &lt;code&gt;make-frame-visible&lt;/code&gt;, &lt;code&gt;delete-frame&lt;/code&gt;, &lt;code&gt;drag-n-drop&lt;/code&gt;, &lt;code&gt;language-change&lt;/code&gt;, and user signals like &lt;code&gt;sigusr1&lt;/code&gt; are normally handled in this way. The keymap which defines how to handle special events&amp;mdash;and which events are special&amp;mdash;is in the variable &lt;code&gt;special-event-map&lt;/code&gt; (see &lt;a href=&quot;controlling-active-maps#Controlling-Active-Maps&quot;&gt;Controlling Active Maps&lt;/a&gt;).</source>
          <target state="translated">イベントタイプ &lt;code&gt;iconify-frame&lt;/code&gt; 、 &lt;code&gt;make-frame-visible&lt;/code&gt; 、 &lt;code&gt;delete-frame&lt;/code&gt; 、 &lt;code&gt;drag-n-drop&lt;/code&gt; 、 &lt;code&gt;language-change&lt;/code&gt; 、および &lt;code&gt;sigusr1&lt;/code&gt; などのユーザーシグナルは通常、この方法で処理されます。特別なイベントの処理方法（および特別なイベント）を定義するキーマップは、変数 &lt;code&gt;special-event-map&lt;/code&gt; にあります（&lt;a href=&quot;controlling-active-maps#Controlling-Active-Maps&quot;&gt;アクティブマップの制御を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="2164e9087e02837e91965cf6aa67235eeccbe4f2" translate="yes" xml:space="preserve">
          <source>The events used so far in the lookup form a complete key, and &lt;var&gt;command&lt;/var&gt; is its binding. See &lt;a href=&quot;what-is-a-function#What-Is-a-Function&quot;&gt;What Is a Function&lt;/a&gt;.</source>
          <target state="translated">ルックアップでこれまでに使用されたイベントは完全なキーを形成し、 &lt;var&gt;command&lt;/var&gt; がそのバインディングです。&lt;a href=&quot;what-is-a-function#What-Is-a-Function&quot;&gt;関数とはを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4b95399d88e6119154daacebbe8a8379841fe6c4" translate="yes" xml:space="preserve">
          <source>The events used so far in the lookup form a prefix key. The next event of the key sequence is looked up in &lt;var&gt;keymap&lt;/var&gt;.</source>
          <target state="translated">ルックアップでこれまでに使用されたイベントは、プレフィックスキーを形成します。キーシーケンスの次のイベントは、キー &lt;var&gt;keymap&lt;/var&gt; 検索されます。</target>
        </trans-unit>
        <trans-unit id="70cf466181ddda55879b8d247515909cac59befd" translate="yes" xml:space="preserve">
          <source>The exact behavior when using a graphical file dialog is platform-dependent. Here, we simply document the behavior when using the minibuffer.</source>
          <target state="translated">グラフィカルファイルダイアログを使用した場合の正確な動作はプラットフォームに依存します。ここでは、ミニバッファを使用したときの動作を簡単に説明します。</target>
        </trans-unit>
        <trans-unit id="e1783ae90f7011d91125735b7e7f0336f43088d0" translate="yes" xml:space="preserve">
          <source>The exact rules are that at the beginning of a regexp, &amp;lsquo;</source>
          <target state="translated">正確なルールは、正規表現の開始時のルールです。</target>
        </trans-unit>
        <trans-unit id="9d0825e8976bc9a5de722249e68385f249965ce0" translate="yes" xml:space="preserve">
          <source>The examples below use the characters &amp;lsquo;</source>
          <target state="translated">以下の例では、文字 'を使用しています</target>
        </trans-unit>
        <trans-unit id="103a1f6fa6f3ce096ff2216407f0ee23d1e12e82" translate="yes" xml:space="preserve">
          <source>The expansion should evaluate each macro arg once.</source>
          <target state="translated">展開は各マクロのargを1回評価する必要があります。</target>
        </trans-unit>
        <trans-unit id="143e736dc0ea57164827c20116a0aca1e23342fe" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;(require 'comint)&lt;/code&gt; loads the file</source>
          <target state="translated">式 &lt;code&gt;(require 'comint)&lt;/code&gt; はファイルをロードします</target>
        </trans-unit>
        <trans-unit id="860aceea4a994059f4b9c519435309d2edcc7bcc" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;(sit-for 0)&lt;/code&gt; is equivalent to &lt;code&gt;(redisplay)&lt;/code&gt;, i.e., it requests a redisplay, without any delay, if there is no pending input. See &lt;a href=&quot;forcing-redisplay#Forcing-Redisplay&quot;&gt;Forcing Redisplay&lt;/a&gt;.</source>
          <target state="translated">式 &lt;code&gt;(sit-for 0)&lt;/code&gt; は &lt;code&gt;(redisplay)&lt;/code&gt; ）と同等です。つまり、保留中の入力がない場合、遅延なしで再表示を要求します。再&lt;a href=&quot;forcing-redisplay#Forcing-Redisplay&quot;&gt;表示の強制を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="918f1833b3bdbe7be1276b1a8696214692e3b6ef" translate="yes" xml:space="preserve">
          <source>The expression &lt;var&gt;standard&lt;/var&gt; can be evaluated at various other times, too&amp;mdash;whenever the customization facility needs to know &lt;var&gt;option&lt;/var&gt;&amp;rsquo;s standard value. So be sure to use an expression which is harmless to evaluate at any time.</source>
          <target state="translated">式の &lt;var&gt;standard&lt;/var&gt; は、カスタマイズ機能が &lt;var&gt;option&lt;/var&gt; の標準値を知る必要があるときはいつでも、他のさまざまなときに評価することもできます。したがって、いつでも評価するのに無害な式を使用するようにしてください。</target>
        </trans-unit>
        <trans-unit id="e99a19bec0a84ecbd6e03a29490ce71aa3b4a055" translate="yes" xml:space="preserve">
          <source>The expressions you enter interactively (and their results) are lost when you continue execution; but you can set up an &lt;em&gt;evaluation list&lt;/em&gt; consisting of expressions to be evaluated each time execution stops.</source>
          <target state="translated">インタラクティブに入力した式（およびその結果）は、実行を続行すると失われます。ただし、実行が停止するたびに評価される式で構成される&lt;em&gt;評価リストを&lt;/em&gt;設定できます。</target>
        </trans-unit>
        <trans-unit id="acb0941a66e54ab62147b1a507de3916f48108a1" translate="yes" xml:space="preserve">
          <source>The extra arguments &lt;var&gt;arguments&lt;/var&gt; specify the attributes to set, and the values for them. They should consist of alternating attribute names (such as &lt;code&gt;:family&lt;/code&gt; or &lt;code&gt;:underline&lt;/code&gt;) and values. Thus,</source>
          <target state="translated">追加の引数 &lt;var&gt;arguments&lt;/var&gt; は、設定する属性とその値を指定します。それらは、交互の属性名（ &lt;code&gt;:family&lt;/code&gt; や &lt;code&gt;:underline&lt;/code&gt; など）と値で構成されている必要があります。したがって、</target>
        </trans-unit>
        <trans-unit id="a7526765bc7635e644a9c02766e092ebdc6743ea" translate="yes" xml:space="preserve">
          <source>The extra table &lt;var&gt;canonicalize&lt;/var&gt; maps each character to a canonical equivalent; any two characters that are related by case-conversion have the same canonical equivalent character. For example, since &amp;lsquo;</source>
          <target state="translated">追加のテーブル &lt;var&gt;canonicalize&lt;/var&gt; は、各文字を正規の同等物にマップします。大文字と小文字の変換によって関連付けられている2つの文字は、同じ正規の同等の文字を持っています。たとえば、 '</target>
        </trans-unit>
        <trans-unit id="4019803adf73bb1e408bce642878a6814f7ac48a" translate="yes" xml:space="preserve">
          <source>The extra table &lt;var&gt;equivalences&lt;/var&gt; is a map that cyclically permutes each equivalence class (of characters with the same canonical equivalent). (For ordinary</source>
          <target state="translated">追加のテーブル &lt;var&gt;equivalences&lt;/var&gt; は、（同じ正規等価物を持つ文字の）各等価性クラスを循環的に並べ替えるマップです。（普通の場合</target>
        </trans-unit>
        <trans-unit id="d052c0df805ee1e73aad2615fef93dab0ce7e859" translate="yes" xml:space="preserve">
          <source>The face &lt;var&gt;face&lt;/var&gt; was defined.</source>
          <target state="translated">顔の &lt;var&gt;face&lt;/var&gt; が定義されました。</target>
        </trans-unit>
        <trans-unit id="07cf6c9593efbd571e9c6bc6592f49d62f4691d2" translate="yes" xml:space="preserve">
          <source>The faces are listed with descriptions of their typical usage, and in order of greater to lesser prominence. If a mode&amp;rsquo;s syntactic categories do not fit well with the usage descriptions, the faces can be assigned using the ordering as a guide.</source>
          <target state="translated">顔は、その典型的な使用法の説明とともに、目立つものから小さいものの順にリストされています。モードの構文カテゴリが使用法の説明にうまく適合しない場合は、順序をガイドとして使用して面を割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="3adedd7760a2da26b8105efc074b6a1a33143e97" translate="yes" xml:space="preserve">
          <source>The feature &lt;var&gt;feature&lt;/var&gt; was provided.</source>
          <target state="translated">機能 &lt;var&gt;feature&lt;/var&gt; が提供されました。</target>
        </trans-unit>
        <trans-unit id="5684eb8ff3a533e9acfb4f148b31be6cf5c33b8f" translate="yes" xml:space="preserve">
          <source>The feature &lt;var&gt;feature&lt;/var&gt; was required.</source>
          <target state="translated">機能 &lt;var&gt;feature&lt;/var&gt; が必要でした。</target>
        </trans-unit>
        <trans-unit id="70390d43913607356ec3483eaaea0f10e086c2b4" translate="yes" xml:space="preserve">
          <source>The fields of a process (for a complete list, see the definition of &lt;code&gt;struct Lisp_Process&lt;/code&gt; in</source>
          <target state="translated">プロセスのフィールドは（完全なリストについては、の定義を参照 &lt;code&gt;struct Lisp_Process&lt;/code&gt; 中を</target>
        </trans-unit>
        <trans-unit id="f16afc33ed846d12b97600fcfe0ed162892cfbb4" translate="yes" xml:space="preserve">
          <source>The fields of a window (for a complete list, see the definition of &lt;code&gt;struct window&lt;/code&gt; in</source>
          <target state="translated">ウィンドウのフィールドは、（完全なリストについては、の定義を参照 &lt;code&gt;struct window&lt;/code&gt; で</target>
        </trans-unit>
        <trans-unit id="14ce59edc1be8242ff84e768676f78ed344512ee" translate="yes" xml:space="preserve">
          <source>The fifth argument &lt;var&gt;copy-contents&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, means to copy the contents of &lt;var&gt;dirname&lt;/var&gt; directly into &lt;var&gt;newname&lt;/var&gt; if the latter is a directory name, instead of copying &lt;var&gt;dirname&lt;/var&gt; into it as a subdirectory.</source>
          <target state="translated">5番目の引数 &lt;var&gt;copy-contents&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、 &lt;var&gt;dirname&lt;/var&gt; をサブディレクトリとしてコピーするのではなく、ディレクトリ名の場合は &lt;var&gt;dirname&lt;/var&gt; の内容を直接 &lt;var&gt;newname&lt;/var&gt; にコピーすることを意味します。</target>
        </trans-unit>
        <trans-unit id="dcfbbcf90dfb29480dabe34cba14a8aa961dc30c" translate="yes" xml:space="preserve">
          <source>The fifth argument, &lt;var&gt;no-remap&lt;/var&gt;, determines how this function treats command remappings (see &lt;a href=&quot;remapping-commands#Remapping-Commands&quot;&gt;Remapping Commands&lt;/a&gt;). There are two cases of interest:</source>
          <target state="translated">5番目の引数、 &lt;var&gt;no-remap&lt;/var&gt; 、この機能の扱いが再マッピングを（参照コマンド方法を決定する&lt;a href=&quot;remapping-commands#Remapping-Commands&quot;&gt;再マップコマンド&lt;/a&gt;）。関心のある2つのケースがあります：</target>
        </trans-unit>
        <trans-unit id="56bd5499d60d7cc9296335a519b5d67af9c7d7ca" translate="yes" xml:space="preserve">
          <source>The fifth of these hooks is run when a &lt;em&gt;window configuration change&lt;/em&gt; has been detected which means that either the buffer or the size of a window changed. It differs from the four preceding hooks in the way it is run.</source>
          <target state="translated">これらのフックの5番目は、&lt;em&gt;ウィンドウ構成の変更&lt;/em&gt;が検出されたときに実行されます。これは、バッファーまたはウィンドウのサイズのいずれかが&lt;em&gt;変更&lt;/em&gt;されたことを意味します。これは、実行方法が前述の4つのフックとは異なります。</target>
        </trans-unit>
        <trans-unit id="97f57dbba7d52a111e94fa33d8036bc6b350fb92" translate="yes" xml:space="preserve">
          <source>The file descriptor for input from the process.</source>
          <target state="translated">プロセスからの入力用のファイルディスクリプタ。</target>
        </trans-unit>
        <trans-unit id="36604991f22732ab7544e1de9b5cbc643ee537e4" translate="yes" xml:space="preserve">
          <source>The file descriptor for output to the process.</source>
          <target state="translated">プロセスに出力するためのファイルディスクリプタ。</target>
        </trans-unit>
        <trans-unit id="9f84eaecd4c1e8e57755faa13303bc7e7b03876f" translate="yes" xml:space="preserve">
          <source>The file name of the font as a string. This can be &lt;code&gt;nil&lt;/code&gt; if the font back-end does not provide a way to find out the font&amp;rsquo;s file name.</source>
          <target state="translated">文字列としてのフォントのファイル名。フォントバックエンドがフォントのファイル名を見つける方法を提供しない場合、これは &lt;code&gt;nil&lt;/code&gt; なる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f32ef79257eb8ddf49002ec15d79f408c3bb5192" translate="yes" xml:space="preserve">
          <source>The file name of the notification icon. If set to &lt;code&gt;nil&lt;/code&gt;, no icon is displayed. The default is &lt;code&gt;notifications-application-icon&lt;/code&gt;.</source>
          <target state="translated">通知アイコンのファイル名。 &lt;code&gt;nil&lt;/code&gt; に設定すると、アイコンは表示されません。デフォルトは &lt;code&gt;notifications-application-icon&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4c16e8ffefdfcb982bf11b0e3b2389776157f73d" translate="yes" xml:space="preserve">
          <source>The file ought to also contain one or more autoload magic comments, as explained in &lt;a href=&quot;packaging-basics#Packaging-Basics&quot;&gt;Packaging Basics&lt;/a&gt;. In the above example, a magic comment autoloads &lt;code&gt;superfrobnicator-mode&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;packaging-basics#Packaging-Basics&quot;&gt;パッケージングの基本で&lt;/a&gt;説明されているように、ファイルには1つ以上の自動ロードマジックコメントも含まれている必要があります。上記の例では、魔法のコメントが &lt;code&gt;superfrobnicator-mode&lt;/code&gt; を自動ロードします。</target>
        </trans-unit>
        <trans-unit id="cdc9cfc759343b8d06deb729dbcb7ad07ecd770e" translate="yes" xml:space="preserve">
          <source>The file&amp;rsquo;s</source>
          <target state="translated">ファイル</target>
        </trans-unit>
        <trans-unit id="0fae8d03319845dad144dc1c7674908715fd1d6a" translate="yes" xml:space="preserve">
          <source>The file&amp;rsquo;s inode number (&lt;code&gt;file-attribute-inode-number&lt;/code&gt;), a nonnegative integer.</source>
          <target state="translated">ファイルのiノード番号（ &lt;code&gt;file-attribute-inode-number&lt;/code&gt; ）、非負の整数。</target>
        </trans-unit>
        <trans-unit id="5cd0cae54bf749d964c2e3a85496f50dbb2f4390" translate="yes" xml:space="preserve">
          <source>The file&amp;rsquo;s modes, as a string of ten letters or dashes, as in &amp;lsquo;</source>
          <target state="translated">'のように、10文字またはダッシュの文字列としてのファイルのモード</target>
        </trans-unit>
        <trans-unit id="b8b5bfed28aef3a1155a21532be86f3c1a999048" translate="yes" xml:space="preserve">
          <source>The filesystem number of the device that the file is on &lt;code&gt;file-attribute-device-number&lt;/code&gt;), an integer. This element and the file&amp;rsquo;s inode number together give enough information to distinguish any two files on the system&amp;mdash;no two files can have the same values for both of these numbers.</source>
          <target state="translated">ファイルが存在するデバイスのファイルシステム番号（ &lt;code&gt;file-attribute-device-number&lt;/code&gt; ）、整数。この要素とファイルのiノード番号は、システム上の任意の2つのファイルを区別するのに十分な情報を提供します。2つのファイルがこれらの番号の両方に同じ値を持つことはできません。</target>
        </trans-unit>
        <trans-unit id="9d1fb04dc7a2116b55da5d8efea1baf1fed3eb1e" translate="yes" xml:space="preserve">
          <source>The fill prefix follows the left margin whitespace, if any.</source>
          <target state="translated">塗りつぶし接頭辞は、 左マージンの空白があればそれに続きます。</target>
        </trans-unit>
        <trans-unit id="cea1ef8b331e237b03da44fbd464cdb2d950b871" translate="yes" xml:space="preserve">
          <source>The final thing this command does is to run the hook &lt;code&gt;post-self-insert-hook&lt;/code&gt;. You could use this to automatically reindent text as it is typed, for example. If any function on this hook needs to act on the region (see &lt;a href=&quot;the-region#The-Region&quot;&gt;The Region&lt;/a&gt;), it should make sure Delete Selection mode (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Using-Region.html#Using-Region&quot;&gt;Delete Selection&lt;/a&gt; in</source>
          <target state="translated">このコマンドが最後に行うことは、フック &lt;code&gt;post-self-insert-hook&lt;/code&gt; を実行することです。たとえば、これを使用して、入力時にテキストを自動的に再インデントできます。このフックの任意の関数が（参照領域の上に行動する必要がある場合は&lt;a href=&quot;the-region#The-Region&quot;&gt;地域を&lt;/a&gt;）、それは見る（必ず削除選択モードを行う必要があります&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Using-Region.html#Using-Region&quot;&gt;削除選択&lt;/a&gt;中の</target>
        </trans-unit>
        <trans-unit id="c1d3c86385f345c5bc7cf463d494da758eaabee6" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;n&lt;/code&gt; binds it to &lt;var&gt;expval&lt;/var&gt;, i.e., the result of evaluating &lt;code&gt;(* 3 3)&lt;/code&gt;, or 9.</source>
          <target state="translated">最初の &lt;code&gt;n&lt;/code&gt; は、それを &lt;var&gt;expval&lt;/var&gt; 、つまり &lt;code&gt;(* 3 3)&lt;/code&gt; 、または9の評価結果にバインドします。</target>
        </trans-unit>
        <trans-unit id="41a0ddbc0dd4de61e99ae8c86c48d424b9ae51cb" translate="yes" xml:space="preserve">
          <source>The first &lt;var&gt;number&lt;/var&gt; arguments of the function are &lt;em&gt;distinguished&lt;/em&gt; arguments; the rest are considered the body of the expression. A line in the expression is indented according to whether the first argument on it is distinguished or not. If the argument is part of the body, the line is indented &lt;code&gt;lisp-body-indent&lt;/code&gt; more columns than the open-parenthesis starting the containing expression. If the argument is distinguished and is either the first or second argument, it is indented &lt;em&gt;twice&lt;/em&gt; that many extra columns. If the argument is distinguished and not the first or second argument, the line uses the standard pattern.</source>
          <target state="translated">関数の最初の &lt;var&gt;number&lt;/var&gt; 引数は&lt;em&gt;区別された&lt;/em&gt;引数です。残りは式の本体と見なされます。式の行は、その最初の引数が区別されるかどうかに応じてインデントされます。引数が本文の一部である場合、行はインデントされます &lt;code&gt;lisp-body-indent&lt;/code&gt; 含まれている式を開始する開き括弧よりも多くの列をインデントします。引数が区別され、最初または2番目の引数である場合、その数の&lt;em&gt;2倍&lt;/em&gt;の余分な列がインデントされます。引数が区別され、最初または2番目の引数ではない場合、行は標準パターンを使用します。</target>
        </trans-unit>
        <trans-unit id="b6792de20ff613a589b600323a8f2769f8d4328f" translate="yes" xml:space="preserve">
          <source>The first argument given to &lt;var&gt;handler&lt;/var&gt; is the name of the primitive, as a symbol; the remaining arguments are the arguments that were passed to that primitive. (The first of these arguments is most often the file name itself.) For example, if you do this:</source>
          <target state="translated">&lt;var&gt;handler&lt;/var&gt; 与えられる最初の引数は、シンボルとしてのプリミティブの名前です。残りの引数は、そのプリミティブに渡された引数です。（これらの引数の最初は、ほとんどの場合、ファイル名自体です。）たとえば、これを行う場合：</target>
        </trans-unit>
        <trans-unit id="722b8b8e4de0471d30abd9c4cc7537deb8572c61" translate="yes" xml:space="preserve">
          <source>The first argument that Lisp hands to the function indicates why it was called. The convention for arguments is detailed in the description of &lt;code&gt;debug&lt;/code&gt; (see &lt;a href=&quot;invoking-the-debugger#Invoking-the-Debugger&quot;&gt;Invoking the Debugger&lt;/a&gt;).</source>
          <target state="translated">Lispが関数に渡す最初の引数は、それが呼び出された理由を示しています。引数の規則については、 &lt;code&gt;debug&lt;/code&gt; の説明で詳しく説明されています（&lt;a href=&quot;invoking-the-debugger#Invoking-the-Debugger&quot;&gt;デバッガーの呼び出しを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="2066145dc073e9f1dd57632ef58fcd8ec240493d" translate="yes" xml:space="preserve">
          <source>The first case indicates the basic indentation increment to use. If &lt;code&gt;sample-indent-basic&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, then SMIE uses the global setting &lt;code&gt;smie-indent-basic&lt;/code&gt;. The major mode could have set &lt;code&gt;smie-indent-basic&lt;/code&gt; buffer-locally instead, but that is discouraged.</source>
          <target state="translated">最初のケースは、使用する基本的なインデント増分を示しています。場合は &lt;code&gt;sample-indent-basic&lt;/code&gt; である &lt;code&gt;nil&lt;/code&gt; の場合、SMIEは、グローバル設定が使用されます &lt;code&gt;smie-indent-basic&lt;/code&gt; 。メジャーモードでは、代わりに &lt;code&gt;smie-indent-basic&lt;/code&gt; buffer-locallyを設定できますが、それはお勧めできません。</target>
        </trans-unit>
        <trans-unit id="9276082e8b3010c24531b975ec50bcbea5a7818a" translate="yes" xml:space="preserve">
          <source>The first character in a syntax descriptor must be a syntax class designator character. The second character, if present, specifies a matching character (e.g., in Lisp, the matching character for &amp;lsquo;</source>
          <target state="translated">構文記述子の最初の文字は、構文クラス指定文字でなければなりません。2番目の文字は、存在する場合、一致する文字を指定します（たとえば、Lispでは、 'の一致する文字</target>
        </trans-unit>
        <trans-unit id="39c4836db6032a9af6b8895c19c4d302b908bde8" translate="yes" xml:space="preserve">
          <source>The first element of &lt;var&gt;menu&lt;/var&gt; must be a string, which serves as the menu label. It may be followed by any number of the following keyword-argument pairs:</source>
          <target state="translated">&lt;var&gt;menu&lt;/var&gt; の最初の要素は、メニューラベルとして機能する文字列である必要があります。その後に、次のキーワードと引数のペアをいくつでも続けることができます。</target>
        </trans-unit>
        <trans-unit id="15d23f64cb15de341109c55ba69a978fb148aee5" translate="yes" xml:space="preserve">
          <source>The first element of a lambda expression is always the symbol &lt;code&gt;lambda&lt;/code&gt;. This indicates that the list represents a function. The reason functions are defined to start with &lt;code&gt;lambda&lt;/code&gt; is so that other lists, intended for other uses, will not accidentally be valid as functions.</source>
          <target state="translated">ラムダ式の最初の要素は常にシンボル &lt;code&gt;lambda&lt;/code&gt; です。これは、リストが関数を表していることを示しています。関数が &lt;code&gt;lambda&lt;/code&gt; で始まるように定義されている理由は、他の用途を目的とした他のリストが誤って関数として有効にならないようにするためです。</target>
        </trans-unit>
        <trans-unit id="68cf8f4ab59e90caee8f7fcdd176030805c02094" translate="yes" xml:space="preserve">
          <source>The first element of an array has index zero, the second element has index 1, and so on. This is called &lt;em&gt;zero-origin&lt;/em&gt; indexing. For example, an array of four elements has indices 0, 1, 2, and 3.</source>
          <target state="translated">配列の最初の要素のインデックスはゼロ、2番目の要素のインデックスは1というように続きます。これは、&lt;em&gt;ゼロオリジン&lt;/em&gt;インデックスと呼ばれ&lt;em&gt;ます&lt;/em&gt;。たとえば、4つの要素の配列には、インデックス0、1、2、および3があります。</target>
        </trans-unit>
        <trans-unit id="51f338b4e98aac416f168cd0115601f42b7a93f5" translate="yes" xml:space="preserve">
          <source>The first element of an array has index zero, the second element has index 1, and so on. This is called &lt;em&gt;zero-origin&lt;/em&gt; indexing. For example, an array of four elements has indices 0, 1, 2, and 3. The largest possible index value is one less than the length of the array. Once an array is created, its length is fixed.</source>
          <target state="translated">配列の最初の要素のインデックスはゼロ、2番目の要素のインデックスは1というように続きます。これは、&lt;em&gt;ゼロオリジン&lt;/em&gt;インデックスと呼ばれ&lt;em&gt;ます&lt;/em&gt;。たとえば、4つの要素の配列には、インデックス0、1、2、および3があります。可能な最大のインデックス値は、配列の長さより1つ短い値です。配列が作成されると、その長さは固定されます。</target>
        </trans-unit>
        <trans-unit id="2524e323ad39aadf65e6819494415de49cf36cc1" translate="yes" xml:space="preserve">
          <source>The first element of the &lt;code&gt;quit-restore&lt;/code&gt; parameter is one of the symbols &lt;code&gt;window&lt;/code&gt;, meaning that the window has been specially created by &lt;code&gt;display-buffer&lt;/code&gt;; &lt;code&gt;frame&lt;/code&gt;, a separate frame has been created; &lt;code&gt;same&lt;/code&gt;, the window has only ever displayed this buffer; or &lt;code&gt;other&lt;/code&gt;, the window showed another buffer before. &lt;code&gt;frame&lt;/code&gt; and &lt;code&gt;window&lt;/code&gt; affect how the window is quit, while &lt;code&gt;same&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt; affect the redisplay of buffers previously shown in &lt;var&gt;window&lt;/var&gt;.</source>
          <target state="translated">&lt;code&gt;quit-restore&lt;/code&gt; パラメーターの最初の要素はシンボル &lt;code&gt;window&lt;/code&gt; 1つです。これは、ウィンドウが &lt;code&gt;display-buffer&lt;/code&gt; によって特別に作成されたことを意味します。 &lt;code&gt;frame&lt;/code&gt; 、別のフレームが作成されました。 &lt;code&gt;same&lt;/code&gt; に、ウィンドウにはこのバッファのみが表示されています。または &lt;code&gt;other&lt;/code&gt; 場合、ウィンドウは以前に別のバッファを表示していました。 &lt;code&gt;frame&lt;/code&gt; と &lt;code&gt;window&lt;/code&gt; はウィンドウの終了方法に影響しますが、 &lt;code&gt;same&lt;/code&gt; と &lt;code&gt;other&lt;/code&gt; は以前に &lt;var&gt;window&lt;/var&gt; に表示されたバッファの再表示に影響します。</target>
        </trans-unit>
        <trans-unit id="c3f41cf4ec0e02e4a679662ba14fa7fdfffa94fd" translate="yes" xml:space="preserve">
          <source>The first element, &lt;var&gt;decoding-system&lt;/var&gt;, is the coding system to use for decoding (in case &lt;var&gt;operation&lt;/var&gt; does decoding), and &lt;var&gt;encoding-system&lt;/var&gt; is the coding system for encoding (in case &lt;var&gt;operation&lt;/var&gt; does encoding).</source>
          <target state="translated">最初の要素である &lt;var&gt;decoding-system&lt;/var&gt; は、デコードに使用するコーディングシステム（ &lt;var&gt;operation&lt;/var&gt; がデコードを行う場合）であり、 &lt;var&gt;encoding-system&lt;/var&gt; はエンコード（ &lt;var&gt;operation&lt;/var&gt; がエンコードを行う場合）のコーディングシステムです。</target>
        </trans-unit>
        <trans-unit id="2cd75fb3bb07dce6a2ca619dd218795e581be875" translate="yes" xml:space="preserve">
          <source>The first element, &lt;var&gt;keywords&lt;/var&gt;, indirectly specifies the value of &lt;code&gt;font-lock-keywords&lt;/code&gt; which directs search-based fontification. It can be a symbol, a variable or a function whose value is the list to use for &lt;code&gt;font-lock-keywords&lt;/code&gt;. It can also be a list of several such symbols, one for each possible level of fontification. The first symbol specifies the &amp;lsquo;</source>
          <target state="translated">最初の要素である &lt;var&gt;keywords&lt;/var&gt; は、検索ベースの &lt;code&gt;font-lock-keywords&lt;/code&gt; を指示するfont-lock-keywordsの値を間接的に指定します。これは、 &lt;code&gt;font-lock-keywords&lt;/code&gt; に使用するリストを値とするシンボル、変数、または関数にすることができます。また、フォント化の可能なレベルごとに1つずつ、そのようないくつかの記号のリストにすることもできます。最初の記号は 'を指定します</target>
        </trans-unit>
        <trans-unit id="075cb4d42e18fef81945510253ddc7517a2a9450" translate="yes" xml:space="preserve">
          <source>The first five elements correspond to face attributes; if you specify these attributes for a face, it will use this font.</source>
          <target state="translated">最初の5つの要素は顔の属性に対応しており、顔にこれらの属性を指定すると、このフォントが使われます。</target>
        </trans-unit>
        <trans-unit id="518177047b013c7ced390688d084d6c94e497b17" translate="yes" xml:space="preserve">
          <source>The first function in &lt;code&gt;completion-at-point-functions&lt;/code&gt; to return a non-&lt;code&gt;nil&lt;/code&gt; value is used by &lt;code&gt;completion-at-point&lt;/code&gt;. The remaining functions are not called. The exception to this is when there is an &lt;code&gt;:exclusive&lt;/code&gt; specification, as described above.</source>
          <target state="translated">最初の機能 &lt;code&gt;completion-at-point-functions&lt;/code&gt; 非返す &lt;code&gt;nil&lt;/code&gt; 値によって使用される &lt;code&gt;completion-at-point&lt;/code&gt; 。残りの関数は呼び出されません。これの例外は、上記のように &lt;code&gt;:exclusive&lt;/code&gt; 仕様がある場合です。</target>
        </trans-unit>
        <trans-unit id="61a427cbbd5fa9f87fd4ca66049624d276b3097d" translate="yes" xml:space="preserve">
          <source>The first hook function is passed a &lt;var&gt;fun&lt;/var&gt; that is equivalent to the default operation of &lt;code&gt;filter-buffer-substring&lt;/code&gt;, i.e., it returns the buffer-substring between &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt; (processed by any &lt;code&gt;buffer-substring-filters&lt;/code&gt;) and optionally deletes the original text from the buffer. In most cases, the hook function will call &lt;var&gt;fun&lt;/var&gt; once, and then do its own processing of the result. The next hook function receives a &lt;var&gt;fun&lt;/var&gt; equivalent to this, and so on. The actual return value is the result of all the hook functions acting in sequence.</source>
          <target state="translated">最初のフック関数には、 &lt;code&gt;filter-buffer-substring&lt;/code&gt; のデフォルト操作と同等の &lt;var&gt;fun&lt;/var&gt; が渡されます。つまり、 &lt;var&gt;start&lt;/var&gt; と &lt;var&gt;end&lt;/var&gt; 間のbuffer-substringを返し（任意の &lt;code&gt;buffer-substring-filters&lt;/code&gt; によって処理されます）、オプションで元のテキストを削除します。バッファから。ほとんどの場合、フック関数は &lt;var&gt;fun&lt;/var&gt; を1回呼び出してから、結果を独自に処理します。次のフック関数は、これと同等の &lt;var&gt;fun&lt;/var&gt; を受け取ります。実際の戻り値は、すべてのフック関数が順番に動作した結果です。</target>
        </trans-unit>
        <trans-unit id="b857f369cef6dd27f6c9832f3de8944a6080d980" translate="yes" xml:space="preserve">
          <source>The first line of the documentation string should stand on its own, because &lt;code&gt;apropos&lt;/code&gt; displays just this first line. It should consist of one or two complete sentences that summarize the function&amp;rsquo;s purpose.</source>
          <target state="translated">&lt;code&gt;apropos&lt;/code&gt; はこの最初の行だけを表示するため、ドキュメント文字列の最初の行は独立している必要があります。関数の目的を要約した1つまたは2つの完全な文で構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="95c5ac45f74b85b86e155db5e7a41993f23c1a44" translate="yes" xml:space="preserve">
          <source>The first method, renaming, is the default.</source>
          <target state="translated">最初のメソッド、リネームがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="d5a94c95ffdfdde685e909b15241ffe89d36a213" translate="yes" xml:space="preserve">
          <source>The first of these hooks is run after a &lt;em&gt;window buffer change&lt;/em&gt; is detected, which means that a window was created, deleted or assigned another buffer.</source>
          <target state="translated">これらのフックの最初のものは、&lt;em&gt;ウィンドウバッファーの変更&lt;/em&gt;が検出された後に実行されます。これは、ウィンドウが作成、削除、または別のバッファーに割り当てられたことを意味します。</target>
        </trans-unit>
        <trans-unit id="5a2945984c3f8a17a8400ccf64f981fcb2eabf09" translate="yes" xml:space="preserve">
          <source>The first one is for locally installed files for a specific Emacs version; the second is for locally installed files meant for use with all installed Emacs versions. (If Emacs is running uninstalled, it also adds</source>
          <target state="translated">最初のものは特定のEmacsバージョン用にローカルにインストールされたファイル用で、2番目のものはインストールされたすべてのEmacsバージョンで使用するためにローカルにインストールされたファイル用です。(Emacs がアンインストールされている場合、アンインストールされているすべての Emacs のバージョンで使用するための</target>
        </trans-unit>
        <trans-unit id="6d1221fe22767b7dddd5d1d969f3a50a7d8c7c01" translate="yes" xml:space="preserve">
          <source>The first or next non-keyboard event in the key sequence that invoked the command. More precisely, &amp;lsquo;</source>
          <target state="translated">コマンドを呼び出したキーシーケンスの最初または次の非キーボードイベント。より正確に、 '</target>
        </trans-unit>
        <trans-unit id="d02389cbd7c0e8fe951f0c6a0fa8a070ab93cecb" translate="yes" xml:space="preserve">
          <source>The first part of the pattern is a character alternative that matches any one of three characters: period, question mark, and exclamation mark. The match must begin with one of these three characters. (This is one point where the new default regexp used by Emacs differs from the old. The new value also allows some non-</source>
          <target state="translated">パターンの最初の部分は、ピリオド、クエスチョンマーク、感嘆符の3つの文字のいずれかにマッチする文字の代替品です。一致する文字は、これら3つの文字のうちの1つで始まる必要があります。(ここが Emacs で使用されている新しいデフォルトの正規表現が古いものと異なる点です。新しい値では、いくつかの非正規表現を使用することができます。</target>
        </trans-unit>
        <trans-unit id="2f07493bfdc49d4184b04abbeaf59e9651306278" translate="yes" xml:space="preserve">
          <source>The first part of the string, &lt;var&gt;fontpattern&lt;/var&gt;, should have the form of a standard X font name, except that the last two fields should be &amp;lsquo;</source>
          <target state="translated">文字列の最初の部分である &lt;var&gt;fontpattern&lt;/var&gt; は、最後の2つのフィールドが 'である必要があることを除いて、標準のXフォント名の形式である必要があります。</target>
        </trans-unit>
        <trans-unit id="921dc58080d888df09bdaec42ab40231a692a25c" translate="yes" xml:space="preserve">
          <source>The first step in evaluating a function call is to evaluate the remaining elements of the list from left to right. The results are the actual argument values, one value for each list element. The next step is to call the function with this list of arguments, effectively using the function &lt;code&gt;apply&lt;/code&gt; (see &lt;a href=&quot;calling-functions#Calling-Functions&quot;&gt;Calling Functions&lt;/a&gt;). If the function is written in Lisp, the arguments are used to bind the argument variables of the function (see &lt;a href=&quot;lambda-expressions#Lambda-Expressions&quot;&gt;Lambda Expressions&lt;/a&gt;); then the forms in the function body are evaluated in order, and the value of the last body form becomes the value of the function call.</source>
          <target state="translated">関数呼び出しを評価する最初のステップは、リストの残りの要素を左から右に評価することです。結果は実際の引数値であり、リスト要素ごとに1つの値です。次のステップは、関数 &lt;code&gt;apply&lt;/code&gt; を効果的に使用して、この引数のリストを使用して関数を&lt;a href=&quot;calling-functions#Calling-Functions&quot;&gt;呼び出す&lt;/a&gt;ことです（関数の呼び出しを参照）。関数がLispで記述されている場合、引数は関数の引数変数をバインドするために使用されます（&lt;a href=&quot;lambda-expressions#Lambda-Expressions&quot;&gt;ラムダ式を&lt;/a&gt;参照）。次に、関数本体のフォームが順番に評価され、最後の本体フォームの値が関数呼び出しの値になります。</target>
        </trans-unit>
        <trans-unit id="3df285467f12c1e287f61e00067a2ae879440ffa" translate="yes" xml:space="preserve">
          <source>The first step in evaluating a nonempty list is to examine its first element. This element alone determines what kind of form the list is and how the rest of the list is to be processed. The first element is &lt;em&gt;not&lt;/em&gt; evaluated, as it would be in some Lisp dialects such as Scheme.</source>
          <target state="translated">空でないリストを評価する最初のステップは、その最初の要素を調べることです。この要素だけで、リストの形式とリストの残りの部分の処理方法が決まります。最初の要素は、Schemeなどの一部のLisp方言の場合と&lt;em&gt;は&lt;/em&gt;異なり、評価され&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="0b91477185c354f0cf6d4f79757bec67efe4ed2f" translate="yes" xml:space="preserve">
          <source>The first step is to find the defun that is unbalanced. If there is an excess open parenthesis, the way to do this is to go to the end of the file and type</source>
          <target state="translated">まず、バランスを崩しているデフンを探します。開いている括弧が余っている場合、その方法はファイルの最後に行って、次のようにタイプします。</target>
        </trans-unit>
        <trans-unit id="3e8495b282fa0cf8be0d80ff66ce938f120af166" translate="yes" xml:space="preserve">
          <source>The first thing the command loop must do is read a key sequence, which is a sequence of input events that translates into a command. It does this by calling the function &lt;code&gt;read-key-sequence&lt;/code&gt;. Lisp programs can also call this function (see &lt;a href=&quot;key-sequence-input#Key-Sequence-Input&quot;&gt;Key Sequence Input&lt;/a&gt;). They can also read input at a lower level with &lt;code&gt;read-key&lt;/code&gt; or &lt;code&gt;read-event&lt;/code&gt; (see &lt;a href=&quot;reading-one-event#Reading-One-Event&quot;&gt;Reading One Event&lt;/a&gt;), or discard pending input with &lt;code&gt;discard-input&lt;/code&gt; (see &lt;a href=&quot;event-input-misc#Event-Input-Misc&quot;&gt;Event Input Misc&lt;/a&gt;).</source>
          <target state="translated">コマンドループが最初に実行する必要があるのは、キーシーケンスを読み取ることです。これは、コマンドに変換される一連の入力イベントです。これは、関数 &lt;code&gt;read-key-sequence&lt;/code&gt; を呼び出すことによって行われます。Lispプログラムもこの関数を呼び出すことができます（&lt;a href=&quot;key-sequence-input#Key-Sequence-Input&quot;&gt;キーシーケンス入力を&lt;/a&gt;参照）。また、 &lt;code&gt;read-key&lt;/code&gt; または &lt;code&gt;read-event&lt;/code&gt; を使用して下位レベルで入力を読み取ることも（&lt;a href=&quot;reading-one-event#Reading-One-Event&quot;&gt;Reading One Eventを&lt;/a&gt;参照）、 &lt;code&gt;discard-input&lt;/code&gt; を使用して保留中の入力を破棄することもできます（&lt;a href=&quot;event-input-misc#Event-Input-Misc&quot;&gt;Event Input Miscを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="9819ecc730c443ef66825eba6fa46be5ddfd672f" translate="yes" xml:space="preserve">
          <source>The first thing this function does is to activate a minibuffer and display it with &lt;var&gt;prompt&lt;/var&gt; (which must be a string) as the prompt. Then the user can edit text in the minibuffer.</source>
          <target state="translated">この関数が最初に行うことは、ミニバッファーをアクティブにして、 &lt;var&gt;prompt&lt;/var&gt; （文字列である必要があります）をプロンプトとして表示することです。次に、ユーザーはミニバッファー内のテキストを編集できます。</target>
        </trans-unit>
        <trans-unit id="ffe911fc31e45fe7a69d03c024357531769f0422" translate="yes" xml:space="preserve">
          <source>The first three clauses use backquote-style patterns. &lt;code&gt;`(add ,x ,y)&lt;/code&gt; is a pattern that checks that &lt;code&gt;form&lt;/code&gt; is a three-element list starting with the literal symbol &lt;code&gt;add&lt;/code&gt;, then extracts the second and third elements and binds them to symbols &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, respectively. The clause body evaluates &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; and adds the results. Similarly, the &lt;code&gt;call&lt;/code&gt; clause implements a function call, and the &lt;code&gt;fn&lt;/code&gt; clause implements an anonymous function definition.</source>
          <target state="translated">最初の3つの句は、バッククォートスタイルのパターンを使用します。 &lt;code&gt;`(add ,x ,y)&lt;/code&gt; は、 &lt;code&gt;form&lt;/code&gt; がリテラルシンボル &lt;code&gt;add&lt;/code&gt; で始まる3要素リストであることを確認し、2番目と3番目の要素を抽出して、それぞれシンボル &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; にバインドするパターンです。句の本体は &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; を評価し、結果を追加します。同様に、 &lt;code&gt;call&lt;/code&gt; 句は関数呼び出しを実装し、 &lt;code&gt;fn&lt;/code&gt; 句は無名関数定義を実装します。</target>
        </trans-unit>
        <trans-unit id="73abbe89ddba4324d8c8e47f4552f5d79ddd1773" translate="yes" xml:space="preserve">
          <source>The first three sections below should tell you enough about Edebug to start using it.</source>
          <target state="translated">以下の最初の3つのセクションで、Edebugを使い始めるのに十分な情報が得られるはずです。</target>
        </trans-unit>
        <trans-unit id="f8cf2175ce1df58161db09af76ff0593cb8a1848" translate="yes" xml:space="preserve">
          <source>The first two arguments, &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt;, are the beginning and end of the region to be filled. The third and fourth arguments, &lt;var&gt;justify&lt;/var&gt; and &lt;var&gt;citation-regexp&lt;/var&gt;, are optional. If &lt;var&gt;justify&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, the paragraphs are justified as well as filled. If &lt;var&gt;citation-regexp&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, it means the function is operating on a mail message and therefore should not fill the header lines. If &lt;var&gt;citation-regexp&lt;/var&gt; is a string, it is used as a regular expression; if it matches the beginning of a line, that line is treated as a citation marker.</source>
          <target state="translated">最初の2つの引数、 &lt;var&gt;start&lt;/var&gt; と &lt;var&gt;end&lt;/var&gt; は、塗りつぶされる領域の開始と終了です。 3番目と4番目の引数である &lt;var&gt;justify&lt;/var&gt; と &lt;var&gt;citation-regexp&lt;/var&gt; はオプションです。場合は &lt;var&gt;justify&lt;/var&gt; 非で &lt;code&gt;nil&lt;/code&gt; に満たされたとして、段落も同様に正当化されています。場合 &lt;var&gt;citation-regexp&lt;/var&gt; 非ある &lt;code&gt;nil&lt;/code&gt; 、それが機能メールメッセージ上で動作され、したがって、ヘッダ行を埋めてはならないことを意味します。 &lt;var&gt;citation-regexp&lt;/var&gt; が文字列の場合、正規表現として使用されます。行の先頭と一致する場合、その行は引用マーカーとして扱われます。</target>
        </trans-unit>
        <trans-unit id="ba54bb325792850fbc12f938d5d5d0fe16184dae" translate="yes" xml:space="preserve">
          <source>The first variant, explicit selective display, was designed for use in a Lisp program: it controls which lines are hidden by altering the text. This kind of hiding is now obsolete and deprecated; instead you should use the &lt;code&gt;invisible&lt;/code&gt; property (see &lt;a href=&quot;invisible-text#Invisible-Text&quot;&gt;Invisible Text&lt;/a&gt;) to get the same effect.</source>
          <target state="translated">最初の変形である明示的な選択表示は、Lispプログラムで使用するために設計されました。これは、テキストを変更することによって非表示にする行を制御します。この種の非表示は現在廃止され、非推奨になっています。代わりに、 &lt;code&gt;invisible&lt;/code&gt; プロパティ（&lt;a href=&quot;invisible-text#Invisible-Text&quot;&gt;Invisible Textを&lt;/a&gt;参照）を使用して同じ効果を得る必要があります。</target>
        </trans-unit>
        <trans-unit id="ae5b4e16891d5734b38e80c0203fdd0afd0ce6e9" translate="yes" xml:space="preserve">
          <source>The flag &amp;lsquo;</source>
          <target state="translated">旗 '</target>
        </trans-unit>
        <trans-unit id="1e9d7078efa70faad8e62d7dac2b994d083d12ef" translate="yes" xml:space="preserve">
          <source>The flag &lt;var&gt;current-group&lt;/var&gt; has no effect when a pipe is used to communicate with the subprocess, because the operating system does not support the distinction in the case of pipes. For the same reason, job-control shells won&amp;rsquo;t work when a pipe is used. See &lt;code&gt;process-connection-type&lt;/code&gt; in &lt;a href=&quot;asynchronous-processes#Asynchronous-Processes&quot;&gt;Asynchronous Processes&lt;/a&gt;.</source>
          <target state="translated">オペレーティングシステムはパイプの場合の区別をサポートしていないため、サブプロセスとの通信にパイプが使用されている場合、フラグ &lt;var&gt;current-group&lt;/var&gt; は効果がありません。同じ理由で、パイプが使用されている場合、ジョブ制御シェルは機能しません。参照 &lt;code&gt;process-connection-type&lt;/code&gt; での&lt;a href=&quot;asynchronous-processes#Asynchronous-Processes&quot;&gt;非同期プロセスを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ec2c9b05e5630a06e86a36a4fbe950b6561191c6" translate="yes" xml:space="preserve">
          <source>The following</source>
          <target state="translated">以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c8513321fed0f5129f9fbc478e3010a771a4d3ef" translate="yes" xml:space="preserve">
          <source>The following C data structures are defined in</source>
          <target state="translated">以下のC言語のデータ構造が定義されています。</target>
        </trans-unit>
        <trans-unit id="5389465bbc2f69e77a3b2484a1984ff2230a7971" translate="yes" xml:space="preserve">
          <source>The following Lisp forms are the forms in Emacs that will work as generalized variables, and so may appear in the &lt;var&gt;place&lt;/var&gt; argument of &lt;code&gt;setf&lt;/code&gt;:</source>
          <target state="translated">次のLispフォームは、一般化された変数として機能するEmacsのフォームであるため、 &lt;code&gt;setf&lt;/code&gt; の &lt;var&gt;place&lt;/var&gt; 引数に表示される場合があります。</target>
        </trans-unit>
        <trans-unit id="30e3d2decfa7f509aa3c0da9bce3711eec8451b2" translate="yes" xml:space="preserve">
          <source>The following action function for &lt;code&gt;display-buffer&lt;/code&gt; (see &lt;a href=&quot;buffer-display-action-functions#Buffer-Display-Action-Functions&quot;&gt;Buffer Display Action Functions&lt;/a&gt;) creates or reuses a side window for displaying the specified buffer.</source>
          <target state="translated">次の &lt;code&gt;display-buffer&lt;/code&gt; の&lt;a href=&quot;buffer-display-action-functions#Buffer-Display-Action-Functions&quot;&gt;アクション関数&lt;/a&gt;（「BufferDisplay Action Functions」を参照）は、指定されたバッファーを表示するためのサイドウィンドウを作成または再利用します。</target>
        </trans-unit>
        <trans-unit id="dfbcb2a836ed9e2ea7b4444cdff4b5302dc8b282" translate="yes" xml:space="preserve">
          <source>The following are functions for altering the</source>
          <target state="translated">を変更するための機能を以下に示します。</target>
        </trans-unit>
        <trans-unit id="4d77a5b5f720da9def084ee3c59bb116b800938f" translate="yes" xml:space="preserve">
          <source>The following are functions for searching for elements in the</source>
          <target state="translated">の要素を検索するための関数を以下に示します。</target>
        </trans-unit>
        <trans-unit id="1dfb54b3aba09435f9c449c921d9fd5796ec1366" translate="yes" xml:space="preserve">
          <source>The following aspects of ranges are specific to Emacs, in that POSIX allows but does not require this behavior and programs other than Emacs may behave differently:</source>
          <target state="translated">範囲の以下の点はEmacsに特有のもので、POSIXはこの動作を許可していますが必須ではなく、Emacs以外のプログラムは異なる動作をする可能性があります。</target>
        </trans-unit>
        <trans-unit id="05135351c4db9bc9b01c91cca9c14d0e6246c79f" translate="yes" xml:space="preserve">
          <source>The following basic action functions are defined in Emacs.</source>
          <target state="translated">Emacsでは、以下の基本的なアクション関数が定義されています。</target>
        </trans-unit>
        <trans-unit id="dd8640559e0a3145f35e39076da3835c9d10c816" translate="yes" xml:space="preserve">
          <source>The following buffer-local variables control the position and width of fringes in windows showing that buffer.</source>
          <target state="translated">以下のバッファローカル変数は、そのバッファを表示するウィンドウのフリンジの位置と幅を制御します。</target>
        </trans-unit>
        <trans-unit id="00cbfbb2bbd87d9035fce6f335cba5b08cdc1cad" translate="yes" xml:space="preserve">
          <source>The following caveats should be considered when adding a function to window change functions:</source>
          <target state="translated">ウィンドウ変更関数に関数を追加する際には、以下のような注意点を考慮する必要があります。</target>
        </trans-unit>
        <trans-unit id="fce85ab64d52f9ad9fc3dd20003408e7fd70e516" translate="yes" xml:space="preserve">
          <source>The following code snippet, when applied to a single-window frame, first splits the selected window and makes the selected and the new window constituents of an atomic window with their parent as root. It then displays the buffer</source>
          <target state="translated">次のコードスニペットは、シングルウィンドウフレームに適用すると、まず選択されたウィンドウを分割し、選択されたウィンドウと新しいウィンドウを親をルートとするアトミックウィンドウの構成要素にします。そして、バッファ</target>
        </trans-unit>
        <trans-unit id="e841b3081cb8d309a73a3b7e4ec19b8e893a44c5" translate="yes" xml:space="preserve">
          <source>The following command is handy to toggle the appearance of all side windows on a specified frame.</source>
          <target state="translated">以下のコマンドは、指定したフレーム上のすべてのサイドウィンドウの表示を切り替えるのに便利です。</target>
        </trans-unit>
        <trans-unit id="57fb79cd5a56bc93119b550457684621fd2045d9" translate="yes" xml:space="preserve">
          <source>The following command uses information on how the window for displaying the buffer was obtained in the first place, thus attempting to automate the above decisions for you.</source>
          <target state="translated">以下のコマンドは、そもそもバッファ表示用のウィンドウがどのようにして取得されたかの情報を利用して、上記の判断を自動化しようとするものである。</target>
        </trans-unit>
        <trans-unit id="f73e0bc0f4740059294b61a0f93df3282d2be9cb" translate="yes" xml:space="preserve">
          <source>The following command-line options affect some aspects of the startup sequence. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Initial-Options.html#Initial-Options&quot;&gt;Initial Options&lt;/a&gt; in</source>
          <target state="translated">次のコマンドラインオプションは、起動シーケンスのいくつかの側面に影響を与えます。の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Initial-Options.html#Initial-Options&quot;&gt;初期オプション&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="52e933df89f8a6d2d6eb75a953cd492fb460f70a" translate="yes" xml:space="preserve">
          <source>The following commands and functions mostly provide compatibility with old versions of Emacs. They work by calling &lt;code&gt;set-face-attribute&lt;/code&gt;. Values of &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt; (or omitted) for their &lt;var&gt;frame&lt;/var&gt; argument are handled just like &lt;code&gt;set-face-attribute&lt;/code&gt; and &lt;code&gt;face-attribute&lt;/code&gt;. The commands read their arguments using the minibuffer, if called interactively.</source>
          <target state="translated">以下のコマンドと関数は、主に古いバージョンのEmacsとの互換性を提供します。これらは、 &lt;code&gt;set-face-attribute&lt;/code&gt; を呼び出すことによって機能します。 &lt;var&gt;frame&lt;/var&gt; 引数の &lt;code&gt;t&lt;/code&gt; と &lt;code&gt;nil&lt;/code&gt; （または省略）の値は、 &lt;code&gt;set-face-attribute&lt;/code&gt; および &lt;code&gt;face-attribute&lt;/code&gt; と同じように処理されます。コマンドは、対話的に呼び出された場合、ミニバッファーを使用して引数を読み取ります。</target>
        </trans-unit>
        <trans-unit id="37349965f15dc9da05dfef5324363eb60ce661c7" translate="yes" xml:space="preserve">
          <source>The following commands can be used to cycle through the global buffer list, much like &lt;code&gt;bury-buffer&lt;/code&gt; and &lt;code&gt;unbury-buffer&lt;/code&gt;. However, they cycle according to the specified window&amp;rsquo;s history list, rather than the global buffer list. In addition, they restore window-specific window start and point positions, and may show a buffer even if it is already shown in another window. The &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; command, in particular, is used by &lt;code&gt;replace-buffer-in-windows&lt;/code&gt;, &lt;code&gt;bury-buffer&lt;/code&gt; and &lt;code&gt;quit-window&lt;/code&gt; to find a replacement buffer for a window.</source>
          <target state="translated">次のコマンドは、 &lt;code&gt;bury-buffer&lt;/code&gt; や &lt;code&gt;unbury-buffer&lt;/code&gt; と同様に、グローバルバッファリストを循環するために使用できます。ただし、グローバルバッファリストではなく、指定されたウィンドウの履歴リストに従って循環します。さらに、ウィンドウ固有のウィンドウの開始位置とポイント位置を復元し、別のウィンドウに既に表示されている場合でもバッファを表示する場合があります。 &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; コマンド、特に、で使用される &lt;code&gt;replace-buffer-in-windows&lt;/code&gt; 、 &lt;code&gt;bury-buffer&lt;/code&gt; と &lt;code&gt;quit-window&lt;/code&gt; のウィンドウの代替バッファを見つけること。</target>
        </trans-unit>
        <trans-unit id="4cfae661f65e37ca3c8203dfeb12091ccfd13ecb" translate="yes" xml:space="preserve">
          <source>The following commands exist to set up prefix arguments for the following command. Do not call them for any other reason.</source>
          <target state="translated">以下のコマンドのプレフィックス引数を設定するために、以下のコマンドが存在します。これらを他の理由で呼び出してはいけません。</target>
        </trans-unit>
        <trans-unit id="aa7ca6b67a7690e608cf5f0b3d4b7e967062b1ce" translate="yes" xml:space="preserve">
          <source>The following commands resize windows in more specific ways. When called interactively, they act on the selected window.</source>
          <target state="translated">以下のコマンドは、より具体的な方法でウィンドウのサイズを変更します。対話的に呼び出された場合、これらのコマンドは選択されたウィンドウに作用します。</target>
        </trans-unit>
        <trans-unit id="570dc96146735c82ffd1bfbddf49607518fc0e37" translate="yes" xml:space="preserve">
          <source>The following completion functions have nothing in themselves to do with minibuffers. We describe them here to keep them near the higher-level completion features that do use the minibuffer.</source>
          <target state="translated">以下の補完関数は、それ自体はミニバッファとは何の関係もありません。ここでは、ミニバッファを使用する高レベルの補完機能の近くに置いておくために、それらを記述します。</target>
        </trans-unit>
        <trans-unit id="0211a8b24b8be85ca2c0dab5dd381bc0a3351017" translate="yes" xml:space="preserve">
          <source>The following convenience function should be used by major mode&amp;rsquo;s indentation engine in support of invocations as sub-modes of another major mode.</source>
          <target state="translated">次の便利な関数は、別のメジャーモードのサブモードとしての呼び出しをサポートするために、メジャーモードのインデントエンジンで使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="dcdef829dc684ff37c33f2db214834e347de051b" translate="yes" xml:space="preserve">
          <source>The following diagram shows the relationship between these types:</source>
          <target state="translated">次の図は、これらの種類の関係を示しています。</target>
        </trans-unit>
        <trans-unit id="263c6cdc21149473ee03d3c1db3fc6ad830a42fa" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this. Given this (malformed) HTML document:</source>
          <target state="translated">次の例はこれを示しています。この(不正な)HTML文書があるとします。</target>
        </trans-unit>
        <trans-unit id="6e4d4fe31f9b5d0412811ce2d12a130a112c7a7c" translate="yes" xml:space="preserve">
          <source>The following example features a &lt;code&gt;pcase&lt;/code&gt; form with two clauses and two &lt;var&gt;seqpat&lt;/var&gt;, A and B. Both A and B first check that &lt;var&gt;expval&lt;/var&gt; is a pair (using &lt;code&gt;pred&lt;/code&gt;), and then bind symbols to the &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt; of &lt;var&gt;expval&lt;/var&gt; (using one &lt;code&gt;app&lt;/code&gt; each).</source>
          <target state="translated">次の例では、特徴 &lt;code&gt;pcase&lt;/code&gt; の2つの節と2つとフォームを &lt;var&gt;seqpat&lt;/var&gt; ことが最初のチェック、AとB、AとBの両方 &lt;var&gt;expval&lt;/var&gt; は（使用してペアで &lt;code&gt;pred&lt;/code&gt; をするために）、そして次に結合シンボルを &lt;code&gt;car&lt;/code&gt; および &lt;code&gt;cdr&lt;/code&gt; の &lt;var&gt;expval&lt;/var&gt; いずれかを使用して（ &lt;code&gt;app&lt;/code&gt; それぞれ）。</target>
        </trans-unit>
        <trans-unit id="cd027753313db3e2bda6d7bd77fd22b1e4340a82" translate="yes" xml:space="preserve">
          <source>The following example has four clauses, which test for the cases where the value of &lt;code&gt;x&lt;/code&gt; is a number, string, buffer and symbol, respectively:</source>
          <target state="translated">次の例には4つの句があり、 &lt;code&gt;x&lt;/code&gt; の値がそれぞれ数値、文字列、バッファ、および記号である場合をテストします。</target>
        </trans-unit>
        <trans-unit id="327e6914ac3c21e45d4f2593af1fe07d9cc74645" translate="yes" xml:space="preserve">
          <source>The following example illustrates how window parameters (see &lt;a href=&quot;window-parameters#Window-Parameters&quot;&gt;Window Parameters&lt;/a&gt;) can be used with &lt;code&gt;display-buffer-in-side-window&lt;/code&gt; (see &lt;a href=&quot;displaying-buffers-in-side-windows#Displaying-Buffers-in-Side-Windows&quot;&gt;Displaying Buffers in Side Windows&lt;/a&gt;) to set up code for producing the frame layout sketched above.</source>
          <target state="translated">次の例は、ウィンドウパラメータ（&lt;a href=&quot;window-parameters#Window-Parameters&quot;&gt;ウィンドウパラメータを&lt;/a&gt;参照）を &lt;code&gt;display-buffer-in-side-window&lt;/code&gt; （サイドウィンドウでの&lt;a href=&quot;displaying-buffers-in-side-windows#Displaying-Buffers-in-Side-Windows&quot;&gt;バッファの表示を&lt;/a&gt;参照）とともに使用して、上記のフレームレイアウトを生成するためのコードを設定する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="dc386ed858292344d4ceae67e2b47d225cbdc5c4" translate="yes" xml:space="preserve">
          <source>The following example illustrates the symbol indirection process. We use &lt;code&gt;fset&lt;/code&gt; to set the function cell of a symbol and &lt;code&gt;symbol-function&lt;/code&gt; to get the function cell contents (see &lt;a href=&quot;function-cells#Function-Cells&quot;&gt;Function Cells&lt;/a&gt;). Specifically, we store the symbol &lt;code&gt;car&lt;/code&gt; into the function cell of &lt;code&gt;first&lt;/code&gt;, and the symbol &lt;code&gt;first&lt;/code&gt; into the function cell of &lt;code&gt;erste&lt;/code&gt;.</source>
          <target state="translated">次の例は、シンボルの間接化プロセスを示しています。私たちは、使用 &lt;code&gt;fset&lt;/code&gt; シンボルの関数セルに設定する &lt;code&gt;symbol-function&lt;/code&gt; （参照関数セルの内容を取得する&lt;a href=&quot;function-cells#Function-Cells&quot;&gt;機能セルを&lt;/a&gt;）。具体的には、シンボル &lt;code&gt;car&lt;/code&gt; を &lt;code&gt;first&lt;/code&gt; の関数セルに格納し、シンボル &lt;code&gt;first&lt;/code&gt; を &lt;code&gt;erste&lt;/code&gt; の関数セルに格納します。</target>
        </trans-unit>
        <trans-unit id="50417c92f73fbb1570f2868b9a274b2b3768d629" translate="yes" xml:space="preserve">
          <source>The following example reads from the minibuffer. The prompt is: &amp;lsquo;</source>
          <target state="translated">次の例では、ミニバッファから読み取ります。プロンプトは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="332aeac42ef2f3fa049798dfb6a5f1315671df58" translate="yes" xml:space="preserve">
          <source>The following example shows how &lt;code&gt;doctor&lt;/code&gt; is prepared for autoloading with a magic comment:</source>
          <target state="translated">次の例は、 &lt;code&gt;doctor&lt;/code&gt; が魔法のコメントを使用して自動読み込みの準備をする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="e5c2aa47b7a24022abda108bb46b665cf282e882" translate="yes" xml:space="preserve">
          <source>The following example shows how to change the &lt;code&gt;make-backup-files&lt;/code&gt; variable only in the Rmail buffers and not elsewhere. Setting it &lt;code&gt;nil&lt;/code&gt; stops Emacs from making backups of these files, which may save disk space. (You would put this code in your init file.)</source>
          <target state="translated">次の例は、 &lt;code&gt;make-backup-files&lt;/code&gt; 変数をRmailバッファーでのみ変更し、他の場所では変更しない方法を示しています。 &lt;code&gt;nil&lt;/code&gt; に設定すると、Emacsがこれらのファイルのバックアップを作成できなくなり、ディスク容量を節約できる可能性があります。（このコードをinitファイルに入れます。）</target>
        </trans-unit>
        <trans-unit id="a65479aec9ccbd5d9fca631c244266e471eff184" translate="yes" xml:space="preserve">
          <source>The following example shows how to implement this behavior (it is similar to the code generated by the &lt;code&gt;define-minor-mode&lt;/code&gt; macro):</source>
          <target state="translated">次の例は、この動作を実装する方法を示しています（ &lt;code&gt;define-minor-mode&lt;/code&gt; マクロによって生成されるコードに似ています）。</target>
        </trans-unit>
        <trans-unit id="41826d1f446a51f4203f921570333293d6e9a365" translate="yes" xml:space="preserve">
          <source>The following example shows output to the echo area:</source>
          <target state="translated">以下の例では、エコー領域への出力を示しています。</target>
        </trans-unit>
        <trans-unit id="ed8de281701b10f23d7cf126c2510f9e62a9fd5e" translate="yes" xml:space="preserve">
          <source>The following example uses the GNU Multiprecision Library (GMP) to calculate the next probable prime after a given integer. See &lt;a href=&quot;http://www.gmplib.org/manual/index.html#Top&quot;&gt;(gmp)Top&lt;/a&gt;, for a general overview of GMP, and see &lt;a href=&quot;http://www.gmplib.org/manual/Integer-Import-and-Export.html#Integer-Import-and-Export&quot;&gt;(gmp)Integer Import and Export&lt;/a&gt; for how to convert the &lt;code&gt;magnitude&lt;/code&gt; array to and from GMP &lt;code&gt;mpz_t&lt;/code&gt; values.</source>
          <target state="translated">次の例では、GNU Multiprecision Library（GMP）を使用して、指定された整数の次の確率的素数を計算します。参照&lt;a href=&quot;http://www.gmplib.org/manual/index.html#Top&quot;&gt;（GMP）トップ&lt;/a&gt;GMPの一般的な概要については、および参照&lt;a href=&quot;http://www.gmplib.org/manual/Integer-Import-and-Export.html#Integer-Import-and-Export&quot;&gt;（GMP）整数インポートとエクスポートを&lt;/a&gt;変換する方法のための &lt;code&gt;magnitude&lt;/code&gt; にし、GMPのから配列を &lt;code&gt;mpz_t&lt;/code&gt; の値。</target>
        </trans-unit>
        <trans-unit id="8ccc6f71275edccfcefe025151e857765f2bef74" translate="yes" xml:space="preserve">
          <source>The following examples apply to C mode. (We use &lt;code&gt;string&lt;/code&gt; to make it easier to see the character returned by &lt;code&gt;char-syntax&lt;/code&gt;.)</source>
          <target state="translated">次の例は、Cモードに適用されます。（ &lt;code&gt;char-syntax&lt;/code&gt; によって返される文字を見やすくするために &lt;code&gt;string&lt;/code&gt; を使用します。）</target>
        </trans-unit>
        <trans-unit id="26d92c15072c5c240ab885269951f66b6b35d5e1" translate="yes" xml:space="preserve">
          <source>The following expressions are supported:</source>
          <target state="translated">以下の表現に対応しています。</target>
        </trans-unit>
        <trans-unit id="ea979b34ff1306c51163d99f45af8eeacfd3a2ed" translate="yes" xml:space="preserve">
          <source>The following four functions return size information about fonts used by various faces, allowing various layout considerations in Lisp programs. These functions take face remapping into consideration, returning information about the remapped face, if the face in question was remapped. See &lt;a href=&quot;face-remapping#Face-Remapping&quot;&gt;Face Remapping&lt;/a&gt;.</source>
          <target state="translated">次の4つの関数は、さまざまな面で使用されるフォントに関するサイズ情報を返し、Lispプログラムでさまざまなレイアウトを考慮することができます。これらの関数は、顔の再マッピングを考慮に入れ、問題の顔が再マップされた場合、再マップされた顔に関する情報を返します。&lt;a href=&quot;face-remapping#Face-Remapping&quot;&gt;顔の再マッピングを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="be78e6b29260e74d50737c0ccdf28a858bff746b" translate="yes" xml:space="preserve">
          <source>The following four functions take as argument a live window which defaults to the selected one.</source>
          <target state="translated">以下の4つの関数はライブウィンドウを引数にとり、選択されたウィンドウをデフォルトとします。</target>
        </trans-unit>
        <trans-unit id="b28622c4a0c44a36e614e4b99f2b96928420c806" translate="yes" xml:space="preserve">
          <source>The following frame parameters are semi-obsolete in that they are automatically equivalent to particular face attributes of particular faces (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Standard-Faces.html#Standard-Faces&quot;&gt;Standard Faces&lt;/a&gt; in</source>
          <target state="translated">次のフレームパラメータは、特定の面の特定の面属性と自動的に同等になるという点で半ば廃止されています（の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Standard-Faces.html#Standard-Faces&quot;&gt;標準面&lt;/a&gt;を参照）。</target>
        </trans-unit>
        <trans-unit id="cb0d5dbd228f2db46d29d8fd495eae184f9211a5" translate="yes" xml:space="preserve">
          <source>The following frame parameters control various aspects of the frame&amp;rsquo;s interaction with the window manager or window system. They have no effect on text terminals.</source>
          <target state="translated">次のフレームパラメータは、ウィンドウマネージャまたはウィンドウシステムとのフレームの相互作用のさまざまな側面を制御します。テキスト端末には影響しません。</target>
        </trans-unit>
        <trans-unit id="bf7261ff6189a415c2673c506f413d2b2705feb4" translate="yes" xml:space="preserve">
          <source>The following function allows the entire window tree of a frame to be retrieved:</source>
          <target state="translated">以下の関数では、フレームのウィンドウツリー全体を取得することができます。</target>
        </trans-unit>
        <trans-unit id="3c4762fdb24ff2e4d3cb60e8188c313f3b2fbda2" translate="yes" xml:space="preserve">
          <source>The following function can be used to check whether the height of a particular window is preserved:</source>
          <target state="translated">特定のウィンドウの高さが保存されているかどうかを確認するには、以下の関数を使用することができます。</target>
        </trans-unit>
        <trans-unit id="117c5514e9c0c86e45b8ed5efd7004d773fd526d" translate="yes" xml:space="preserve">
          <source>The following function can be used to retrieve the edges of the outer, native and inner frame.</source>
          <target state="translated">外枠、ネイティブ枠、内枠のエッジを取得するには、以下の関数を使用することができます。</target>
        </trans-unit>
        <trans-unit id="ea2cbed368d68e203932ff80be174434c94a4f4d" translate="yes" xml:space="preserve">
          <source>The following function can tell whether the mouse cursor is currently visible on a frame:</source>
          <target state="translated">以下の関数では、マウスカーソルが現在フレーム上に表示されているかどうかを知ることができます。</target>
        </trans-unit>
        <trans-unit id="e2ca3d1c501ec1cc5dd734a37cfc409f12e0b6fa" translate="yes" xml:space="preserve">
          <source>The following function comes in handy for applying a certain function to all or part of the characters in a charset:</source>
          <target state="translated">以下の関数は、文字セット内の文字の全部または一部に特定の関数を適用するのに便利です。</target>
        </trans-unit>
        <trans-unit id="f77a31c265b7eeea36fdbae05e58d9985d0570a4" translate="yes" xml:space="preserve">
          <source>The following function may be used to explicitly load the library specified by an autoload object:</source>
          <target state="translated">autoloadオブジェクトで指定されたライブラリを明示的にロードするには、以下の関数を使用することができます。</target>
        </trans-unit>
        <trans-unit id="ceeeb0b1e3b74324880960da48962febae85922a" translate="yes" xml:space="preserve">
          <source>The following function provides a convenient way to perform completion on an arbitrary stretch of text in an Emacs buffer:</source>
          <target state="translated">以下の関数は、Emacsバッファ内の任意のテキストのストレッチに対して補完を行う便利な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="73acc10fc0f8415d20b19b3c2e44bcf404ab2072" translate="yes" xml:space="preserve">
          <source>The following function returns the largest rectangle that can be inscribed in a window without covering text displayed in that window.</source>
          <target state="translated">以下の関数は、ウィンドウに表示されているテキストを覆うことなく、ウィンドウ内に内接できる最大の矩形を返します。</target>
        </trans-unit>
        <trans-unit id="fc810414382be279064aacb6e28913b8de3c3ff6" translate="yes" xml:space="preserve">
          <source>The following function returns the root of the atomic window a specified window is part of:</source>
          <target state="translated">以下の関数は、指定されたウィンドウが属するアトミックウィンドウのルートを返します。</target>
        </trans-unit>
        <trans-unit id="31bd0e6b32efb7b36c0cf9948bd05648d25d411b" translate="yes" xml:space="preserve">
          <source>The following function returns the screen coordinates of a buffer position visible in a window:</source>
          <target state="translated">以下の関数は、ウィンドウに表示されているバッファ位置の画面座標を返します。</target>
        </trans-unit>
        <trans-unit id="26a2f135aeb3b3b38b6b9f7e18e5eead9f063326" translate="yes" xml:space="preserve">
          <source>The following function returns the size in pixels of text as if it were displayed in a given window. This function is used by &lt;code&gt;fit-window-to-buffer&lt;/code&gt; and &lt;code&gt;fit-frame-to-buffer&lt;/code&gt; (see &lt;a href=&quot;resizing-windows#Resizing-Windows&quot;&gt;Resizing Windows&lt;/a&gt;) to make a window exactly as large as the text it contains.</source>
          <target state="translated">The following function returns the size in pixels of text as if it were displayed in a given window. This function is used by &lt;code&gt;fit-window-to-buffer&lt;/code&gt; and &lt;code&gt;fit-frame-to-buffer&lt;/code&gt; (see &lt;a href=&quot;resizing-windows#Resizing-Windows&quot;&gt;Resizing Windows&lt;/a&gt;) to make a window exactly as large as the text it contains.</target>
        </trans-unit>
        <trans-unit id="baaad99ca2ee271ccecab2b6a3ef8d793aeb7ed5" translate="yes" xml:space="preserve">
          <source>The following function returns the window showing the currently active minibuffer.</source>
          <target state="translated">以下の関数は、現在アクティブなミニバッファを表示するウィンドウを返します。</target>
        </trans-unit>
        <trans-unit id="8b75ec29519dc9fe45770dfcb9354804e2c7afa9" translate="yes" xml:space="preserve">
          <source>The following function tells how small a specific window can get taking into account the sizes of its areas and the values of &lt;code&gt;window-min-height&lt;/code&gt;, &lt;code&gt;window-min-width&lt;/code&gt; and &lt;code&gt;window-size-fixed&lt;/code&gt; (see &lt;a href=&quot;preserving-window-sizes#Preserving-Window-Sizes&quot;&gt;Preserving Window Sizes&lt;/a&gt;).</source>
          <target state="translated">The following function tells how small a specific window can get taking into account the sizes of its areas and the values of &lt;code&gt;window-min-height&lt;/code&gt; , &lt;code&gt;window-min-width&lt;/code&gt; and &lt;code&gt;window-size-fixed&lt;/code&gt; (see &lt;a href=&quot;preserving-window-sizes#Preserving-Window-Sizes&quot;&gt;Preserving Window Sizes&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="17e4594a68f250e3e8b85fe3ee7531e8c73e1aaf" translate="yes" xml:space="preserve">
          <source>The following function uses the current buffer for temporary display:</source>
          <target state="translated">以下の関数は、現在のバッファを一時的に表示するために使用します。</target>
        </trans-unit>
        <trans-unit id="3f030bbc8b308337c1d8037400878c12fc6b75a0" translate="yes" xml:space="preserve">
          <source>The following functions add a button using an overlay (see &lt;a href=&quot;overlays#Overlays&quot;&gt;Overlays&lt;/a&gt;) to hold the button properties:</source>
          <target state="translated">The following functions add a button using an overlay (see &lt;a href=&quot;overlays#Overlays&quot;&gt;Overlays&lt;/a&gt;) to hold the button properties:</target>
        </trans-unit>
        <trans-unit id="9af23f6b20961af61b76c648d84296f5b4b0e9ad" translate="yes" xml:space="preserve">
          <source>The following functions are responsible for installing the user&amp;rsquo;s customization settings for variables and faces, respectively. When the user invokes &amp;lsquo;</source>
          <target state="translated">The following functions are responsible for installing the user&amp;rsquo;s customization settings for variables and faces, respectively. When the user invokes &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="d7b4e728a53c2e4b67182aeaebf7454821ce8777" translate="yes" xml:space="preserve">
          <source>The following functions are similar, but using text properties (see &lt;a href=&quot;text-properties#Text-Properties&quot;&gt;Text Properties&lt;/a&gt;) to hold the button properties. Such buttons do not add markers to the buffer, so editing in the buffer does not slow down if there is an extremely large numbers of buttons. However, if there is an existing face text property on the text (e.g., a face assigned by Font Lock mode), the button face may not be visible. Both of these functions return the starting position of the new button.</source>
          <target state="translated">The following functions are similar, but using text properties (see &lt;a href=&quot;text-properties#Text-Properties&quot;&gt;Text Properties&lt;/a&gt;) to hold the button properties. Such buttons do not add markers to the buffer, so editing in the buffer does not slow down if there is an extremely large numbers of buttons. However, if there is an existing face text property on the text (e.g., a face assigned by Font Lock mode), the button face may not be visible. Both of these functions return the starting position of the new button.</target>
        </trans-unit>
        <trans-unit id="84f3c437913b719438332ee8562848724259dd06" translate="yes" xml:space="preserve">
          <source>The following functions are specialized for handling floating-point numbers:</source>
          <target state="translated">以下の関数は、浮動小数点数の取り扱いに特化しています。</target>
        </trans-unit>
        <trans-unit id="b893e578fff503e7493ed1c552081eb143f20c3f" translate="yes" xml:space="preserve">
          <source>The following functions are useful for programmatically enabling and disabling themes:</source>
          <target state="translated">プログラムでテーマの有効化・無効化を行うには、以下の機能が便利です。</target>
        </trans-unit>
        <trans-unit id="531016c102f8f2a24b0893c6bb0481e625b81509" translate="yes" xml:space="preserve">
          <source>The following functions can be used to access symbol properties.</source>
          <target state="translated">シンボルプロパティにアクセスするには、以下の関数を使用することができます。</target>
        </trans-unit>
        <trans-unit id="a9b7c957393c6e1fb8ce8837669b7366c5d35273" translate="yes" xml:space="preserve">
          <source>The following functions can be used to determine whether a given window has any adjacent windows.</source>
          <target state="translated">以下の関数を使用して、指定されたウィンドウに隣接するウィンドウがあるかどうかを判断することができます。</target>
        </trans-unit>
        <trans-unit id="aad4cbdda12c20812720683836916585e55b1f16" translate="yes" xml:space="preserve">
          <source>The following functions can be used to manipulate property lists. They all compare property names using &lt;code&gt;eq&lt;/code&gt;.</source>
          <target state="translated">The following functions can be used to manipulate property lists. They all compare property names using &lt;code&gt;eq&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5b8bab067bedd523b26cfb38d2407d422ebc6485" translate="yes" xml:space="preserve">
          <source>The following functions can be used to obtain information about a font. For these functions, the &lt;var&gt;font&lt;/var&gt; argument can be a font object, a font entity, or a font spec.</source>
          <target state="translated">The following functions can be used to obtain information about a font. For these functions, the &lt;var&gt;font&lt;/var&gt; argument can be a font object, a font entity, or a font spec.</target>
        </trans-unit>
        <trans-unit id="890cbaf248b1c3bd0429284d2b0998f1856c73a5" translate="yes" xml:space="preserve">
          <source>The following functions can be used to relate a set of frame-relative coordinates to a window:</source>
          <target state="translated">以下の関数を使用して、フレーム関連座標の集合をウィンドウに関連付けることができます。</target>
        </trans-unit>
        <trans-unit id="907f5fb790174097faee980eaa3e6e493703e37f" translate="yes" xml:space="preserve">
          <source>The following functions can be used to retrieve a child window of an internal window, and the siblings of a child window.</source>
          <target state="translated">内部ウィンドウの子ウィンドウ、子ウィンドウの兄弟ウィンドウを取得するには、以下の関数を使用することができます。</target>
        </trans-unit>
        <trans-unit id="5abac45b57d6cb02f4a44218dad6bcf05e357901" translate="yes" xml:space="preserve">
          <source>The following functions can be used to work with this structure. Each function takes a</source>
          <target state="translated">以下の関数を使用して、この構造体を操作することができます。各関数は</target>
        </trans-unit>
        <trans-unit id="5e7b9f761ac410965453c46cb12a7b79355721cc" translate="yes" xml:space="preserve">
          <source>The following functions can be useful to locate a window within its frame.</source>
          <target state="translated">フレーム内のウィンドウを探すには、以下の関数が便利です。</target>
        </trans-unit>
        <trans-unit id="d4d8b453efb193de073f07eacd52282b298d2182" translate="yes" xml:space="preserve">
          <source>The following functions create strings, either from scratch, or by putting strings together, or by taking them apart.</source>
          <target state="translated">以下の関数は、ゼロから文字列を作成したり、文字列をまとめたり、分解したりして文字列を作成します。</target>
        </trans-unit>
        <trans-unit id="2830de83f3df2374878d8790525a0ec899df66a3" translate="yes" xml:space="preserve">
          <source>The following functions examine the attributes of a face. They mostly provide compatibility with old versions of Emacs. If you don&amp;rsquo;t specify &lt;var&gt;frame&lt;/var&gt;, they refer to the selected frame; &lt;code&gt;t&lt;/code&gt; refers to the default data for new frames. They return &lt;code&gt;unspecified&lt;/code&gt; if the face doesn&amp;rsquo;t define any value for that attribute. If &lt;var&gt;inherit&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, only an attribute directly defined by the face is returned. If &lt;var&gt;inherit&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, any faces specified by its &lt;code&gt;:inherit&lt;/code&gt; attribute are considered as well, and if &lt;var&gt;inherit&lt;/var&gt; is a face or a list of faces, then they are also considered, until a specified attribute is found. To ensure that the return value is always specified, use a value of &lt;code&gt;default&lt;/code&gt; for &lt;var&gt;inherit&lt;/var&gt;.</source>
          <target state="translated">The following functions examine the attributes of a face. They mostly provide compatibility with old versions of Emacs. If you don&amp;rsquo;t specify &lt;var&gt;frame&lt;/var&gt; , they refer to the selected frame; &lt;code&gt;t&lt;/code&gt; refers to the default data for new frames. They return &lt;code&gt;unspecified&lt;/code&gt; if the face doesn&amp;rsquo;t define any value for that attribute. If &lt;var&gt;inherit&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt; , only an attribute directly defined by the face is returned. If &lt;var&gt;inherit&lt;/var&gt; is non- &lt;code&gt;nil&lt;/code&gt; , any faces specified by its &lt;code&gt;:inherit&lt;/code&gt; attribute are considered as well, and if &lt;var&gt;inherit&lt;/var&gt; is a face or a list of faces, then they are also considered, until a specified attribute is found. To ensure that the return value is always specified, use a value of &lt;code&gt;default&lt;/code&gt; for &lt;var&gt;inherit&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="34336bc291047ecc82ef9e39f037db9645e68fee" translate="yes" xml:space="preserve">
          <source>The following functions implement a higher-level interface to &lt;code&gt;face-remapping-alist&lt;/code&gt;. Most Lisp code should use these functions instead of setting &lt;code&gt;face-remapping-alist&lt;/code&gt; directly, to avoid trampling on remappings applied elsewhere. These functions are intended for buffer-local remappings, so they all make &lt;code&gt;face-remapping-alist&lt;/code&gt; buffer-local as a side-effect. They manage &lt;code&gt;face-remapping-alist&lt;/code&gt; entries of the form</source>
          <target state="translated">The following functions implement a higher-level interface to &lt;code&gt;face-remapping-alist&lt;/code&gt; . Most Lisp code should use these functions instead of setting &lt;code&gt;face-remapping-alist&lt;/code&gt; directly, to avoid trampling on remappings applied elsewhere. These functions are intended for buffer-local remappings, so they all make &lt;code&gt;face-remapping-alist&lt;/code&gt; buffer-local as a side-effect. They manage &lt;code&gt;face-remapping-alist&lt;/code&gt; entries of the form</target>
        </trans-unit>
        <trans-unit id="f45de0afa1e82c2bee6e9b103afe4d0400313b5d" translate="yes" xml:space="preserve">
          <source>The following functions may be used to manipulate and query the watch functions for a variable.</source>
          <target state="translated">以下の関数を使用して、変数のウォッチ関数を操作したり、問い合わせたりすることができます。</target>
        </trans-unit>
        <trans-unit id="297514168ef2ea3e190861ad8aed9621b2bf0fde" translate="yes" xml:space="preserve">
          <source>The following functions replace characters within a specified region based on their character codes.</source>
          <target state="translated">以下の関数は、指定された領域内の文字を文字コードに基づいて置換します。</target>
        </trans-unit>
        <trans-unit id="8ef4900912dcb434358d1e1cc34146dd4ae71b7f" translate="yes" xml:space="preserve">
          <source>The following functions return a window which satisfies some criterion, without selecting it:</source>
          <target state="translated">以下の関数は、ウィンドウを選択せずに、何らかの基準を満たすウィンドウを返します。</target>
        </trans-unit>
        <trans-unit id="6c1b3a2ec1e9d599ce858d9c865cc30d35b9cfbd" translate="yes" xml:space="preserve">
          <source>The following functions return window positions in pixels, rather than character units. Though mostly useful on graphical displays, they can also be called on text terminals, where the screen area of each text character is taken to be one pixel.</source>
          <target state="translated">以下の関数は,ウィンドウの位置を文字単位ではなくピクセル単位で返します.これらの関数は,主にグラフィカルなディスプレイで有用ですが,テキスト端末でも呼び出すことができます.</target>
        </trans-unit>
        <trans-unit id="f2f37ec3b726c43a4c87205d55e42808f4009de8" translate="yes" xml:space="preserve">
          <source>The following functions return window positions in pixels, relative to the origin of the display screen rather than that of the frame:</source>
          <target state="translated">以下の関数は、フレームの位置ではなく、表示画面の原点を基準としたウィンドウの位置をピクセル単位で返します。</target>
        </trans-unit>
        <trans-unit id="155cd68525e1e78f8dc1877edd4a3b4cc3b3b32f" translate="yes" xml:space="preserve">
          <source>The following is a list of metadata entries that a completion function may return in response to a &lt;code&gt;metadata&lt;/code&gt; flag argument:</source>
          <target state="translated">The following is a list of metadata entries that a completion function may return in response to a &lt;code&gt;metadata&lt;/code&gt; flag argument:</target>
        </trans-unit>
        <trans-unit id="4a1e6d11578135dd2c40c588ed3ccefbb4f97f26" translate="yes" xml:space="preserve">
          <source>The following is a list of properties that are meaningful for all image types (there are also properties which are meaningful only for certain image types, as documented in the following subsections):</source>
          <target state="translated">以下に、すべての画像タイプに対して意味を持つプロパティのリストを示します(以下のサブセクションで説明するように、特定の画像タイプに対してのみ意味を持つプロパティもあります)。</target>
        </trans-unit>
        <trans-unit id="4093aee444ad060f90230a5ef648f614d3a0ca58" translate="yes" xml:space="preserve">
          <source>The following is a list of some hook variables that let you provide functions to be called from within Emacs on suitable occasions.</source>
          <target state="translated">以下は、適切な機会に Emacs 内から呼び出される関数を提供するためのフック変数のリストです。</target>
        </trans-unit>
        <trans-unit id="ccb2830cf31ad8ceb9e30c7ff4ee6d68c4873ecb" translate="yes" xml:space="preserve">
          <source>The following list of conventions is only partial. Each major mode should aim for consistency in general with other Emacs major modes, as this makes Emacs as a whole more coherent. It is impossible to list here all the possible points where this issue might come up; if the Emacs developers point out an area where your major mode deviates from the usual conventions, please make it compatible.</source>
          <target state="translated">以下の規約のリストは部分的なものにすぎません。各メジャーモードは、他の Emacs メジャーモードとの一貫性を目指すべきです。Emacs 開発者が、あなたのメジャーモードが通常の規約から逸脱している部分を指摘してくれたら、それを互換性のあるものにしてください。</target>
        </trans-unit>
        <trans-unit id="2f4c46986c8a870fb9516c70d5b6f51ae0a91573" translate="yes" xml:space="preserve">
          <source>The following macro provides a convenient way to define pop-up menus and/or menu bar menus.</source>
          <target state="translated">以下のマクロは、ポップアップメニューやメニューバーメニューを定義するのに便利な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="5ad57c1f83c65077036b934b7fd3727e3ea0f239" translate="yes" xml:space="preserve">
          <source>The following macros should be used in the body of a function defined by &lt;code&gt;define-inline&lt;/code&gt;.</source>
          <target state="translated">The following macros should be used in the body of a function defined by &lt;code&gt;define-inline&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61cd8af7f02eeb28f4ce378e89ac8b778f999f77" translate="yes" xml:space="preserve">
          <source>The following network options can be specified when you create a network process. Except for &lt;code&gt;:reuseaddr&lt;/code&gt;, you can also set or modify these options later, using &lt;code&gt;set-network-process-option&lt;/code&gt;.</source>
          <target state="translated">The following network options can be specified when you create a network process. Except for &lt;code&gt;:reuseaddr&lt;/code&gt; , you can also set or modify these options later, using &lt;code&gt;set-network-process-option&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cd2fc598c57ec7c3805d2638d2b8b8ee1d26d24c" translate="yes" xml:space="preserve">
          <source>The following option allows to automatically select the window under the mouse pointer. This accomplishes a policy similar to that of window managers that give focus to a frame (and thus trigger its subsequent selection) whenever the mouse pointer enters its window-system window (see &lt;a href=&quot;input-focus#Input-Focus&quot;&gt;Input Focus&lt;/a&gt;).</source>
          <target state="translated">The following option allows to automatically select the window under the mouse pointer. This accomplishes a policy similar to that of window managers that give focus to a frame (and thus trigger its subsequent selection) whenever the mouse pointer enters its window-system window (see &lt;a href=&quot;input-focus#Input-Focus&quot;&gt;Input Focus&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="d7851e2664e5c756dae87ae16e5d4cb14feb40f7" translate="yes" xml:space="preserve">
          <source>The following option specifies how to deal with a frame containing just one window that should be either quit, or whose buffer should be buried.</source>
          <target state="translated">以下のオプションは、1つのウィンドウだけを含むフレームをどのように扱うかを指定します。</target>
        </trans-unit>
        <trans-unit id="ada5ff929af79df9bfadbae1b79b7910e6c1c8cf" translate="yes" xml:space="preserve">
          <source>The following options affect some aspects of the startup sequence.</source>
          <target state="translated">以下のオプションは、起動シーケンスのいくつかの側面に影響を与えます。</target>
        </trans-unit>
        <trans-unit id="e1aec0ad769964195d8b0b82e98cb13200879f29" translate="yes" xml:space="preserve">
          <source>The following options provide additional control over the placement of side windows.</source>
          <target state="translated">以下のオプションにより、サイドウィンドウの配置をさらに制御することができます。</target>
        </trans-unit>
        <trans-unit id="0d184dd753268c287e714dc96de749f048d0308b" translate="yes" xml:space="preserve">
          <source>The following parameters are currently used by the window management code:</source>
          <target state="translated">現在、ウィンドウ管理コードでは以下のパラメータが使用されています。</target>
        </trans-unit>
        <trans-unit id="bbb0060fafb1b1a12e73884154b4dd11377c3b26" translate="yes" xml:space="preserve">
          <source>The following parameters are supported:</source>
          <target state="translated">以下のパラメータがサポートされています。</target>
        </trans-unit>
        <trans-unit id="4f59f6941bde6c4db5d1e3e41b34d7afbaba9370" translate="yes" xml:space="preserve">
          <source>The following piece of code demonstrates some important principles of working with iterators.</source>
          <target state="translated">次のコードは、イテレータを扱う際の重要な原則を示しています。</target>
        </trans-unit>
        <trans-unit id="a4f0eab4462560047e86c6b11d762d5644d33c5b" translate="yes" xml:space="preserve">
          <source>The following predicates test whether a Lisp object is an atom, whether it is a cons cell or is a list, or whether it is the distinguished object &lt;code&gt;nil&lt;/code&gt;. (Many of these predicates can be defined in terms of the others, but they are used so often that it is worth having them.)</source>
          <target state="translated">The following predicates test whether a Lisp object is an atom, whether it is a cons cell or is a list, or whether it is the distinguished object &lt;code&gt;nil&lt;/code&gt; . (Many of these predicates can be defined in terms of the others, but they are used so often that it is worth having them.)</target>
        </trans-unit>
        <trans-unit id="826b4fe071d5c29efd8caca96b29fad3a0a2f2d1" translate="yes" xml:space="preserve">
          <source>The following properties have special meaning:</source>
          <target state="translated">以下のプロパティには特別な意味があります。</target>
        </trans-unit>
        <trans-unit id="ebef11ee154eef7f4eb1fc917c2aac083fcb211f" translate="yes" xml:space="preserve">
          <source>The following properties have special meanings:</source>
          <target state="translated">以下のプロパティには特別な意味があります。</target>
        </trans-unit>
        <trans-unit id="57c6bef4e378aea04508546ae08d21653ab1f737" translate="yes" xml:space="preserve">
          <source>The following regular expression constructs match the empty string&amp;mdash;that is, they don&amp;rsquo;t use up any characters&amp;mdash;but whether they match depends on the context. For all, the beginning and end of the accessible portion of the buffer are treated as if they were the actual beginning and end of the buffer.</source>
          <target state="translated">The following regular expression constructs match the empty string&amp;mdash;that is, they don&amp;rsquo;t use up any characters&amp;mdash;but whether they match depends on the context. For all, the beginning and end of the accessible portion of the buffer are treated as if they were the actual beginning and end of the buffer.</target>
        </trans-unit>
        <trans-unit id="ab93757b1beab2aa1b514e6ad4b5403f0cf390d7" translate="yes" xml:space="preserve">
          <source>The following sample code shows a simple use of &lt;code&gt;abbrev-expand-function&lt;/code&gt;. It assumes that &lt;code&gt;foo-mode&lt;/code&gt; is a mode for editing certain files in which lines that start with &amp;lsquo;</source>
          <target state="translated">The following sample code shows a simple use of &lt;code&gt;abbrev-expand-function&lt;/code&gt; . It assumes that &lt;code&gt;foo-mode&lt;/code&gt; is a mode for editing certain files in which lines that start with &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="cd3bff5b4b8d36513361c4cb174579259d0a14c3" translate="yes" xml:space="preserve">
          <source>The following schematic shows the structure of a live window:</source>
          <target state="translated">以下の図は、ライブウィンドウの構造を示しています。</target>
        </trans-unit>
        <trans-unit id="3812318991beb737b8ecfc0d3eb9bffa47526a30" translate="yes" xml:space="preserve">
          <source>The following sections describe how to create a package, and how to put it in a &lt;em&gt;package archive&lt;/em&gt; for others to download. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html#Packages&quot;&gt;Packages&lt;/a&gt; in</source>
          <target state="translated">The following sections describe how to create a package, and how to put it in a &lt;em&gt;package archive&lt;/em&gt; for others to download. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html#Packages&quot;&gt;Packages&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="a7f5eb5126f13e48e5d8a4cfa1f8a337e3e76816" translate="yes" xml:space="preserve">
          <source>The following subsections describe dynamic binding and lexical binding in greater detail, and how to enable lexical binding in Emacs Lisp programs.</source>
          <target state="translated">以下のサブセクションでは、動的バインディングと語彙的バインディングについて詳しく説明し、Emacs Lisp プログラムで語彙的バインディングを有効にする方法を説明します。</target>
        </trans-unit>
        <trans-unit id="f427796ad98b404b1017d94a966c0d6e0b800693" translate="yes" xml:space="preserve">
          <source>The following subsections describe these tasks and the</source>
          <target state="translated">以下のサブセクションでは、これらのタスクと</target>
        </trans-unit>
        <trans-unit id="557e3858b495db8eb07b06d74c4bda7f399bc1fd" translate="yes" xml:space="preserve">
          <source>The following three functions are convenient subroutines for packages that define non-</source>
          <target state="translated">以下の3つの関数は、非</target>
        </trans-unit>
        <trans-unit id="536c73ef47f549795a27c13372e2ba64eb41c149" translate="yes" xml:space="preserve">
          <source>The following three functions are like &lt;code&gt;memq&lt;/code&gt;, &lt;code&gt;delq&lt;/code&gt; and &lt;code&gt;remq&lt;/code&gt;, but use &lt;code&gt;equal&lt;/code&gt; rather than &lt;code&gt;eq&lt;/code&gt; to compare elements. See &lt;a href=&quot;equality-predicates#Equality-Predicates&quot;&gt;Equality Predicates&lt;/a&gt;.</source>
          <target state="translated">The following three functions are like &lt;code&gt;memq&lt;/code&gt; , &lt;code&gt;delq&lt;/code&gt; and &lt;code&gt;remq&lt;/code&gt; , but use &lt;code&gt;equal&lt;/code&gt; rather than &lt;code&gt;eq&lt;/code&gt; to compare elements. See &lt;a href=&quot;equality-predicates#Equality-Predicates&quot;&gt;Equality Predicates&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="355f4e1293b1c2362148cc63e3a7bedf8f34b49f" translate="yes" xml:space="preserve">
          <source>The following three functions take as argument a live frame which defaults to the selected one.</source>
          <target state="translated">以下の3つの関数は、引数にライブフレームをとり、選択されたフレームをデフォルトとします。</target>
        </trans-unit>
        <trans-unit id="1f17162ac41b5c364770f2de0d633eda6a4b0b6a" translate="yes" xml:space="preserve">
          <source>The following three variables are used in &lt;code&gt;mode-line-modes&lt;/code&gt;:</source>
          <target state="translated">The following three variables are used in &lt;code&gt;mode-line-modes&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="29c7181d047de2cd97f0970a6987cb63e7fbbb89" translate="yes" xml:space="preserve">
          <source>The following three variables, when non-&lt;code&gt;nil&lt;/code&gt;, cause the second method to be used in certain special cases. They have no effect on the treatment of files that don&amp;rsquo;t fall into the special cases.</source>
          <target state="translated">The following three variables, when non- &lt;code&gt;nil&lt;/code&gt; , cause the second method to be used in certain special cases. They have no effect on the treatment of files that don&amp;rsquo;t fall into the special cases.</target>
        </trans-unit>
        <trans-unit id="115768852bac8cdf35b7fa82a90cdf33ddc11555" translate="yes" xml:space="preserve">
          <source>The following two &lt;code&gt;%&lt;/code&gt;-constructs are still supported, but they are obsolete, since you can get the same results with the variables &lt;code&gt;mode-name&lt;/code&gt; and &lt;code&gt;global-mode-string&lt;/code&gt;.</source>
          <target state="translated">The following two &lt;code&gt;%&lt;/code&gt; -constructs are still supported, but they are obsolete, since you can get the same results with the variables &lt;code&gt;mode-name&lt;/code&gt; and &lt;code&gt;global-mode-string&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c8bf40b8538d6f6330c64f3c882e6c1bcb9062c8" translate="yes" xml:space="preserve">
          <source>The following two functions are meant for modes that want to provide help without relinquishing control, such as the electric modes. Their names begin with &amp;lsquo;</source>
          <target state="translated">The following two functions are meant for modes that want to provide help without relinquishing control, such as the electric modes. Their names begin with &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="1abd9368a3d734825a10efb49b4dabc426bea1a2" translate="yes" xml:space="preserve">
          <source>The following two functions are useful for combining a list of individual command-line argument strings into a single string, and taking a string apart into a list of individual command-line arguments. These functions are mainly intended for converting user input in the minibuffer, a Lisp string, into a list of string arguments to be passed to &lt;code&gt;make-process&lt;/code&gt;, &lt;code&gt;call-process&lt;/code&gt; or &lt;code&gt;start-process&lt;/code&gt;, or for converting such lists of arguments into a single Lisp string to be presented in the minibuffer or echo area. Note that if a shell is involved (e.g., if using &lt;code&gt;call-process-shell-command&lt;/code&gt;), arguments should still be protected by &lt;code&gt;shell-quote-argument&lt;/code&gt;; &lt;code&gt;combine-and-quote-strings&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; intended to protect special characters from shell evaluation.</source>
          <target state="translated">The following two functions are useful for combining a list of individual command-line argument strings into a single string, and taking a string apart into a list of individual command-line arguments. These functions are mainly intended for converting user input in the minibuffer, a Lisp string, into a list of string arguments to be passed to &lt;code&gt;make-process&lt;/code&gt; , &lt;code&gt;call-process&lt;/code&gt; or &lt;code&gt;start-process&lt;/code&gt; , or for converting such lists of arguments into a single Lisp string to be presented in the minibuffer or echo area. Note that if a shell is involved (e.g., if using &lt;code&gt;call-process-shell-command&lt;/code&gt; ), arguments should still be protected by &lt;code&gt;shell-quote-argument&lt;/code&gt; ; &lt;code&gt;combine-and-quote-strings&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; intended to protect special characters from shell evaluation.</target>
        </trans-unit>
        <trans-unit id="345ce9209913e7b713026911f4f5e94a02bd44b6" translate="yes" xml:space="preserve">
          <source>The following two functions are useful when a Lisp program needs to map buffer positions to byte offsets in a file visited by the buffer.</source>
          <target state="translated">以下の2つの関数は、Lispプログラムがバッファの位置をバッファが訪問するファイルのバイトオフセットにマッピングする必要がある場合に便利です。</target>
        </trans-unit>
        <trans-unit id="f6e12a6446862c2522d3f1a9ffd8ddf8904cc177" translate="yes" xml:space="preserve">
          <source>The following two functions can be used to return the total size of a window in units of pixels.</source>
          <target state="translated">以下の2つの関数を使用して、ウィンドウの合計サイズをピクセル単位で返すことができます。</target>
        </trans-unit>
        <trans-unit id="a48c7947820ecbb53fcfdd25e5c96ba5864b3d86" translate="yes" xml:space="preserve">
          <source>The following two functions can be useful when working with child and parent frames:</source>
          <target state="translated">子フレームや親フレームを扱う際には、以下の2つの機能が便利です。</target>
        </trans-unit>
        <trans-unit id="2a83b06e67c6529bbdbddb0d5afbb5cf809d5bcc" translate="yes" xml:space="preserve">
          <source>The following two functions convert between directory names and directory file names. They do nothing special with environment variable substitutions such as &amp;lsquo;</source>
          <target state="translated">The following two functions convert between directory names and directory file names. They do nothing special with environment variable substitutions such as &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="4fac544aa9936ae6c2b6929f4306babf281bddd4" translate="yes" xml:space="preserve">
          <source>The following two functions move point over a specified set of characters. For example, they are often used to skip whitespace. For related functions, see &lt;a href=&quot;motion-and-syntax#Motion-and-Syntax&quot;&gt;Motion and Syntax&lt;/a&gt;.</source>
          <target state="translated">The following two functions move point over a specified set of characters. For example, they are often used to skip whitespace. For related functions, see &lt;a href=&quot;motion-and-syntax#Motion-and-Syntax&quot;&gt;Motion and Syntax&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8c338e0f1681bbeb0ada6c9b11a1251284be5bda" translate="yes" xml:space="preserve">
          <source>The following two functions return a mouse position list (see &lt;a href=&quot;click-events#Click-Events&quot;&gt;Click Events&lt;/a&gt;), specifying the position of a mouse event.</source>
          <target state="translated">The following two functions return a mouse position list (see &lt;a href=&quot;click-events#Click-Events&quot;&gt;Click Events&lt;/a&gt;), specifying the position of a mouse event.</target>
        </trans-unit>
        <trans-unit id="cc0b4c0c74f55c58b403e95e6a1acfb6ff12b20c" translate="yes" xml:space="preserve">
          <source>The following two functions return important information about a font.</source>
          <target state="translated">以下の2つの関数は、フォントに関する重要な情報を返します。</target>
        </trans-unit>
        <trans-unit id="1e7e472e6478094296cd45e3d521f50016cac3a3" translate="yes" xml:space="preserve">
          <source>The following two options control whether minibuffer windows are resized automatically and how large they can get in the process.</source>
          <target state="translated">以下の2つのオプションは、minibufferウィンドウのサイズを自動的に変更するかどうかと、そのプロセスでどれだけ大きくなるかを制御します。</target>
        </trans-unit>
        <trans-unit id="24fa8abe9618c4cb6b7db987de4f0d9cacb7fa8f" translate="yes" xml:space="preserve">
          <source>The following two regular expressions should &lt;em&gt;not&lt;/em&gt; assume the match always starts at the beginning of a line; they should not use &amp;lsquo;</source>
          <target state="translated">The following two regular expressions should &lt;em&gt;not&lt;/em&gt; assume the match always starts at the beginning of a line; they should not use &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="cc6bf9832061e83897200953f3dd12c79d5af846" translate="yes" xml:space="preserve">
          <source>The following two variables are obsoleted by &lt;code&gt;filter-buffer-substring-function&lt;/code&gt;, but are still supported for backward compatibility.</source>
          <target state="translated">The following two variables are obsoleted by &lt;code&gt;filter-buffer-substring-function&lt;/code&gt; , but are still supported for backward compatibility.</target>
        </trans-unit>
        <trans-unit id="4d489eae93ac203d9b2ffd3584656c2dde948029" translate="yes" xml:space="preserve">
          <source>The following values are respected:</source>
          <target state="translated">以下の価値観を尊重しています。</target>
        </trans-unit>
        <trans-unit id="09aa9057414e7950dd19147648c16cf90861056f" translate="yes" xml:space="preserve">
          <source>The following variables affect how certain characters are displayed on the screen. Since they change the number of columns the characters occupy, they also affect the indentation functions. They also affect how the mode line is displayed; if you want to force redisplay of the mode line using the new values, call the function &lt;code&gt;force-mode-line-update&lt;/code&gt; (see &lt;a href=&quot;mode-line-format#Mode-Line-Format&quot;&gt;Mode Line Format&lt;/a&gt;).</source>
          <target state="translated">The following variables affect how certain characters are displayed on the screen. Since they change the number of columns the characters occupy, they also affect the indentation functions. They also affect how the mode line is displayed; if you want to force redisplay of the mode line using the new values, call the function &lt;code&gt;force-mode-line-update&lt;/code&gt; (see &lt;a href=&quot;mode-line-format#Mode-Line-Format&quot;&gt;Mode Line Format&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="14dec20b7fbc6fcced5e5d29086ee55e867ebdd4" translate="yes" xml:space="preserve">
          <source>The following will create a linear gradient that goes from red at the start, to green 25% of the way, to blue at the end:</source>
          <target state="translated">以下のように、開始時に赤、途中25%の緑、終了時に青になるような直線的なグラデーションを作成します。</target>
        </trans-unit>
        <trans-unit id="e95288a0f9a444d98e8a41cba18b24ae66da9ad1" translate="yes" xml:space="preserve">
          <source>The font must be an OpenType font that supports these OpenType features, provided Emacs is compiled with a library, such as &amp;lsquo;</source>
          <target state="translated">The font must be an OpenType font that supports these OpenType features, provided Emacs is compiled with a library, such as &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="6556801bce4e544f06ab7ea9eb5f7746cb4afd5e" translate="yes" xml:space="preserve">
          <source>The font name (a string), in either XLFD, Fontconfig, or GTK+ format. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Fonts.html#Fonts&quot;&gt;Fonts&lt;/a&gt; in</source>
          <target state="translated">The font name (a string), in either XLFD, Fontconfig, or GTK+ format. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Fonts.html#Fonts&quot;&gt;Fonts&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="af0bd798857380a819581a44d67b89d6f115632d" translate="yes" xml:space="preserve">
          <source>The font name, a string.</source>
          <target state="translated">フォント名、文字列。</target>
        </trans-unit>
        <trans-unit id="a7248edb376ccd7b3b10bb9e3cb840736177f911" translate="yes" xml:space="preserve">
          <source>The font size&amp;mdash;either a non-negative integer that specifies the pixel size, or a floating-point number that specifies the point size.</source>
          <target state="translated">The font size&amp;mdash;either a non-negative integer that specifies the pixel size, or a floating-point number that specifies the point size.</target>
        </trans-unit>
        <trans-unit id="23f58ef9a79c9daa9a087fb25286120885af393b" translate="yes" xml:space="preserve">
          <source>The font used to display the face. Its value should be a font object or a fontset. See &lt;a href=&quot;low_002dlevel-font#Low_002dLevel-Font&quot;&gt;Low-Level Font&lt;/a&gt;, for information about font objects, font specs, and font entities. See &lt;a href=&quot;fontsets#Fontsets&quot;&gt;Fontsets&lt;/a&gt;, for information about fontsets.</source>
          <target state="translated">The font used to display the face. Its value should be a font object or a fontset. See &lt;a href=&quot;low_002dlevel-font#Low_002dLevel-Font&quot;&gt;Low-Level Font&lt;/a&gt;, for information about font objects, font specs, and font entities. See &lt;a href=&quot;fontsets#Fontsets&quot;&gt;Fontsets&lt;/a&gt;, for information about fontsets.</target>
        </trans-unit>
        <trans-unit id="3e2495d3f6b500a7c3764a7896dc703df930eb34" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;(+ &lt;var&gt;expr&lt;/var&gt; ...)&lt;/code&gt; adds up the value of the expressions. The form &lt;code&gt;(- &lt;var&gt;expr&lt;/var&gt; ...)&lt;/code&gt; negates or subtracts the value of the expressions.</source>
          <target state="translated">The form &lt;code&gt;(+ &lt;var&gt;expr&lt;/var&gt; ...)&lt;/code&gt; adds up the value of the expressions. The form &lt;code&gt;(- &lt;var&gt;expr&lt;/var&gt; ...)&lt;/code&gt; negates or subtracts the value of the expressions.</target>
        </trans-unit>
        <trans-unit id="f9074ede26f7f654c16278889f1f4de2d0cebbf4" translate="yes" xml:space="preserve">
          <source>The form &lt;var&gt;num&lt;/var&gt; specifies a fraction of the default frame font height or width. The form &lt;code&gt;(&lt;var&gt;num&lt;/var&gt;)&lt;/code&gt; specifies an absolute number of pixels. If &lt;var&gt;num&lt;/var&gt; is a symbol, &lt;var&gt;symbol&lt;/var&gt;, its buffer-local variable binding is used; that binding can be either a number or a cons cell of the forms shown above (including yet another cons cell whose &lt;code&gt;car&lt;/code&gt; is a symbol that has a buffer-local binding).</source>
          <target state="translated">The form &lt;var&gt;num&lt;/var&gt; specifies a fraction of the default frame font height or width. The form &lt;code&gt;(&lt;var&gt;num&lt;/var&gt;)&lt;/code&gt; specifies an absolute number of pixels. If &lt;var&gt;num&lt;/var&gt; is a symbol, &lt;var&gt;symbol&lt;/var&gt; , its buffer-local variable binding is used; that binding can be either a number or a cons cell of the forms shown above (including yet another cons cell whose &lt;code&gt;car&lt;/code&gt; is a symbol that has a buffer-local binding).</target>
        </trans-unit>
        <trans-unit id="eefdf767b9da94cedb2272c4d442fd16a210f77a" translate="yes" xml:space="preserve">
          <source>The format of &lt;var&gt;local-address&lt;/var&gt; or &lt;var&gt;remote-address&lt;/var&gt; depends on the address family:</source>
          <target state="translated">The format of &lt;var&gt;local-address&lt;/var&gt; or &lt;var&gt;remote-address&lt;/var&gt; depends on the address family:</target>
        </trans-unit>
        <trans-unit id="f1523839ef4d5afd7ac94bcc51e58e0b20efc3f4" translate="yes" xml:space="preserve">
          <source>The format of this list is the same as what &lt;code&gt;decode-time&lt;/code&gt; accepts (see &lt;a href=&quot;time-conversion#Time-Conversion&quot;&gt;Time Conversion&lt;/a&gt;), and is described in more detail there. Any element that cannot be determined from the input will be set to &lt;code&gt;nil&lt;/code&gt;. The argument &lt;var&gt;string&lt;/var&gt; should resemble an RFC 822 (or later) or ISO 8601 string, like &amp;ldquo;Fri, 25 Mar 2016 16:24:56 +0100&amp;rdquo; or &amp;ldquo;1998-09-12T12:21:54-0200&amp;rdquo;, but this function will attempt to parse less well-formed time strings as well.</source>
          <target state="translated">The format of this list is the same as what &lt;code&gt;decode-time&lt;/code&gt; accepts (see &lt;a href=&quot;time-conversion#Time-Conversion&quot;&gt;Time Conversion&lt;/a&gt;), and is described in more detail there. Any element that cannot be determined from the input will be set to &lt;code&gt;nil&lt;/code&gt; . The argument &lt;var&gt;string&lt;/var&gt; should resemble an RFC 822 (or later) or ISO 8601 string, like &amp;ldquo;Fri, 25 Mar 2016 16:24:56 +0100&amp;rdquo; or &amp;ldquo;1998-09-12T12:21:54-0200&amp;rdquo;, but this function will attempt to parse less well-formed time strings as well.</target>
        </trans-unit>
        <trans-unit id="a420ccf20ba6d5b4c425fdd899162dfbbd53605d" translate="yes" xml:space="preserve">
          <source>The format we use for buffer contents in examples.</source>
          <target state="translated">例ではバッファの内容に使用するフォーマットです。</target>
        </trans-unit>
        <trans-unit id="4a56368511816baafb987e4550f7fd019ef9406d" translate="yes" xml:space="preserve">
          <source>The format we use for examples of errors.</source>
          <target state="translated">誤りの例で使用しているフォーマットです。</target>
        </trans-unit>
        <trans-unit id="39ba77d521c50dab220364437e7b5dabde639177" translate="yes" xml:space="preserve">
          <source>The format we use for examples of evaluation.</source>
          <target state="translated">評価の例で使用するフォーマット。</target>
        </trans-unit>
        <trans-unit id="37518e914cc1faa1cdf2b3e15db2c5a92c8aeff9" translate="yes" xml:space="preserve">
          <source>The format we use when examples print text.</source>
          <target state="translated">例題がテキストを印刷するときに使用するフォーマットです。</target>
        </trans-unit>
        <trans-unit id="17e1d52af71f6c32ba5e92306abc4c53f00bf057" translate="yes" xml:space="preserve">
          <source>The former is used by overlay arrows. The latter is unused.</source>
          <target state="translated">前者はオーバーレイ矢印で使用します。後者は未使用です。</target>
        </trans-unit>
        <trans-unit id="203096a174bb892e518022e452e96010dd9a8b89" translate="yes" xml:space="preserve">
          <source>The forms &lt;var&gt;pre-form&lt;/var&gt; and &lt;var&gt;post-form&lt;/var&gt; can be used to initialize before, and cleanup after, &lt;var&gt;anchored-matcher&lt;/var&gt; is used. Typically, &lt;var&gt;pre-form&lt;/var&gt; is used to move point to some position relative to the match of &lt;var&gt;matcher&lt;/var&gt;, before starting with &lt;var&gt;anchored-matcher&lt;/var&gt;. &lt;var&gt;post-form&lt;/var&gt; might be used to move back, before resuming with &lt;var&gt;matcher&lt;/var&gt;.</source>
          <target state="translated">The forms &lt;var&gt;pre-form&lt;/var&gt; and &lt;var&gt;post-form&lt;/var&gt; can be used to initialize before, and cleanup after, &lt;var&gt;anchored-matcher&lt;/var&gt; is used. Typically, &lt;var&gt;pre-form&lt;/var&gt; is used to move point to some position relative to the match of &lt;var&gt;matcher&lt;/var&gt; , before starting with &lt;var&gt;anchored-matcher&lt;/var&gt; . &lt;var&gt;post-form&lt;/var&gt; might be used to move back, before resuming with &lt;var&gt;matcher&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="ceadb637a596eb2ee47bea0bcd88b1125c133ad0" translate="yes" xml:space="preserve">
          <source>The fourth argument &lt;var&gt;parents&lt;/var&gt; says whether to create parent directories if they don&amp;rsquo;t exist. Interactively, this happens by default.</source>
          <target state="translated">The fourth argument &lt;var&gt;parents&lt;/var&gt; says whether to create parent directories if they don&amp;rsquo;t exist. Interactively, this happens by default.</target>
        </trans-unit>
        <trans-unit id="49ca71782e46f41b945559e28fbf6e1d7928a06f" translate="yes" xml:space="preserve">
          <source>The fourth element is the buffer whose display caused the creation of this parameter. This function may delete &lt;var&gt;window&lt;/var&gt; if and only if it still shows that buffer.</source>
          <target state="translated">The fourth element is the buffer whose display caused the creation of this parameter. This function may delete &lt;var&gt;window&lt;/var&gt; if and only if it still shows that buffer.</target>
        </trans-unit>
        <trans-unit id="d53d197ac8b2d3804741dce6c2249997a484aa11" translate="yes" xml:space="preserve">
          <source>The fourth of these hooks is run when a &lt;em&gt;window state change&lt;/em&gt; has been detected, which means that at least one of the three preceding window changes has occurred.</source>
          <target state="translated">The fourth of these hooks is run when a &lt;em&gt;window state change&lt;/em&gt; has been detected, which means that at least one of the three preceding window changes has occurred.</target>
        </trans-unit>
        <trans-unit id="d2076a0c8c9f8876e127e6de37bf8d5c9fd0314f" translate="yes" xml:space="preserve">
          <source>The frame is displayed on a GNUstep or Macintosh Cocoa graphical terminal.</source>
          <target state="translated">フレームは、GNUstep または Macintosh Cocoa グラフィカルターミナルに表示されます。</target>
        </trans-unit>
        <trans-unit id="367eb419b499e34c2cd9b561d4ff309824830d6d" translate="yes" xml:space="preserve">
          <source>The frame is displayed on a MS-Windows graphical terminal.</source>
          <target state="translated">MS-Windowsのグラフィカルターミナルにフレームが表示されます。</target>
        </trans-unit>
        <trans-unit id="bd7f603302ec782d1f108752979a4bc3b06f4239" translate="yes" xml:space="preserve">
          <source>The frame is displayed on a text terminal.</source>
          <target state="translated">テキスト端末にフレームが表示されます。</target>
        </trans-unit>
        <trans-unit id="fcb9d54a78150d03f883ce9267fb2578c072d2bd" translate="yes" xml:space="preserve">
          <source>The frame is displayed on an MS-DOS terminal.</source>
          <target state="translated">MS-DOS端末でフレームを表示します。</target>
        </trans-unit>
        <trans-unit id="0cd07edbb9f4b3175639e8806bf60c5f910fe981" translate="yes" xml:space="preserve">
          <source>The frame is displayed on an X graphical terminal.</source>
          <target state="translated">X グラフィカル端末にフレームが表示されます。</target>
        </trans-unit>
        <trans-unit id="fede82ee27758855ee100077f5a256f38ab0e02a" translate="yes" xml:space="preserve">
          <source>The frame parameter &lt;code&gt;horizontal-scroll-bars&lt;/code&gt; controls whether the windows in the frame have horizontal scroll bars. The frame parameter &lt;code&gt;scroll-bar-height&lt;/code&gt; specifies how high they are (&lt;code&gt;nil&lt;/code&gt; meaning the default). See &lt;a href=&quot;layout-parameters#Layout-Parameters&quot;&gt;Layout Parameters&lt;/a&gt;.</source>
          <target state="translated">The frame parameter &lt;code&gt;horizontal-scroll-bars&lt;/code&gt; controls whether the windows in the frame have horizontal scroll bars. The frame parameter &lt;code&gt;scroll-bar-height&lt;/code&gt; specifies how high they are ( &lt;code&gt;nil&lt;/code&gt; meaning the default). See &lt;a href=&quot;layout-parameters#Layout-Parameters&quot;&gt;Layout Parameters&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="438a2d89a52bbe188d6d849c93e8088d3f1e967a" translate="yes" xml:space="preserve">
          <source>The frame that this window is on, as a Lisp object.</source>
          <target state="translated">このウィンドウが置かれているフレームをLispオブジェクトとして指定します。</target>
        </trans-unit>
        <trans-unit id="f2ddf76bbb94fa6e3bd71370e008e9006e3aab9c" translate="yes" xml:space="preserve">
          <source>The frame with input focus might not take up the entire screen, and the user might move the mouse outside the scope of the frame. Inside the &lt;code&gt;track-mouse&lt;/code&gt; special form, that produces an event like this:</source>
          <target state="translated">The frame with input focus might not take up the entire screen, and the user might move the mouse outside the scope of the frame. Inside the &lt;code&gt;track-mouse&lt;/code&gt; special form, that produces an event like this:</target>
        </trans-unit>
        <trans-unit id="875b4545e11911510ae3368c34f49d2bafeade1c" translate="yes" xml:space="preserve">
          <source>The frames can be used either to represent multiple pages (this is usually the case with multi-frame TIFF files, for example), or to create animation (usually the case with multi-frame GIF files).</source>
          <target state="translated">フレームは、複数のページを表現するために使用することができます(これは通常、マルチフレームTIFFファイルなどの場合です)、アニメーションを作成するために使用することができます(通常、マルチフレームGIFファイルの場合です)。</target>
        </trans-unit>
        <trans-unit id="07c1bfad504d407e4dd4bddeff5e7e54de2cc8eb" translate="yes" xml:space="preserve">
          <source>The fringes normally appear between the display margins and the window text. If the value is non-&lt;code&gt;nil&lt;/code&gt;, they appear outside the display margins. See &lt;a href=&quot;display-margins#Display-Margins&quot;&gt;Display Margins&lt;/a&gt;.</source>
          <target state="translated">The fringes normally appear between the display margins and the window text. If the value is non- &lt;code&gt;nil&lt;/code&gt; , they appear outside the display margins. See &lt;a href=&quot;display-margins#Display-Margins&quot;&gt;Display Margins&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="10a232c8c99be2bcdac3d854a4c57a0b7926f249" translate="yes" xml:space="preserve">
          <source>The full keymap containing default global key bindings. Modes should not modify the Global map.</source>
          <target state="translated">デフォルトのグローバルキーバインドを含む完全なキーマップ。モードはグローバルマップを変更してはいけません。</target>
        </trans-unit>
        <trans-unit id="ab21d625fa99d9e8689a87a9df340768d973d686" translate="yes" xml:space="preserve">
          <source>The full name of the font, a string.</source>
          <target state="translated">フォントのフルネーム、文字列。</target>
        </trans-unit>
        <trans-unit id="55c491134e3f247e07eb606aa328fc5be9cb20cc" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;accept-process-output&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt; if it got output from &lt;var&gt;process&lt;/var&gt;, or from any process if &lt;var&gt;process&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;; this can occur even after a process has exited if the corresponding connection contains buffered data. The function returns &lt;code&gt;nil&lt;/code&gt; if the timeout expired or the connection was closed before output arrived.</source>
          <target state="translated">関数 &lt;code&gt;accept-process-output&lt;/code&gt; は、 &lt;var&gt;process&lt;/var&gt; から出力を取得した場合は非 &lt;code&gt;nil&lt;/code&gt; を返し、 &lt;var&gt;process&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; の場合は任意のプロセスから出力を返します。これは、対応する接続​​にバッファリングされたデータが含まれている場合、プロセスが終了した後でも発生する可能性があります。タイムアウトが期限切れになった場合、または出力が到着する前に接続が閉じられた場合、関数は &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ec51fe801ce783ab41bbcfb2b068eb8495fcb6f6" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;assoc-string&lt;/code&gt; is much like &lt;code&gt;assoc&lt;/code&gt; except that it ignores certain differences between strings. See &lt;a href=&quot;text-comparison#Text-Comparison&quot;&gt;Text Comparison&lt;/a&gt;.</source>
          <target state="translated">関数 &lt;code&gt;assoc-string&lt;/code&gt; は、文字列間の特定の違いを無視することを除いて、 &lt;code&gt;assoc&lt;/code&gt; によく似ています。&lt;a href=&quot;text-comparison#Text-Comparison&quot;&gt;テキスト比較を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8f2e7d56e51665dc0e2c86ee380cef89f5612161" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;backtrace-frame&lt;/code&gt; is intended for use in Lisp debuggers. It returns information about what computation is happening in the stack frame &lt;var&gt;frame-number&lt;/var&gt; levels down.</source>
          <target state="translated">関数 &lt;code&gt;backtrace-frame&lt;/code&gt; は、Lispデバッガーでの使用を目的としています。スタックフレームの &lt;var&gt;frame-number&lt;/var&gt; レベルで発生している計算に関する情報を返します。</target>
        </trans-unit>
        <trans-unit id="2a41471492f0d30da94cc86b34cd0a1d952ae5da" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;backward-prefix-chars&lt;/code&gt; moves back over these characters, as well as over characters whose primary syntax class is prefix (&amp;lsquo;</source>
          <target state="translated">関数 &lt;code&gt;backward-prefix-chars&lt;/code&gt; は、これらの文字、および主要な構文クラスがプレフィックス（ '</target>
        </trans-unit>
        <trans-unit id="ff9303e475f1b984abb99f23fe5e1bde3414024c" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;buffer-substring-no-properties&lt;/code&gt; does not call these functions, since it ignores text properties anyway.</source>
          <target state="translated">関数 &lt;code&gt;buffer-substring-no-properties&lt;/code&gt; は、とにかくテキストプロパティを無視するため、これらの関数を呼び出しません。</target>
        </trans-unit>
        <trans-unit id="ab0ed3a952ff9a1871cc2361e3809682f2c953e2" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;collapse-delayed-warnings&lt;/code&gt; removes repeated entries from &lt;code&gt;delayed-warnings-list&lt;/code&gt;. The function &lt;code&gt;display-delayed-warnings&lt;/code&gt; calls &lt;code&gt;display-warning&lt;/code&gt; on each of the entries in &lt;code&gt;delayed-warnings-list&lt;/code&gt;, in turn, and then sets &lt;code&gt;delayed-warnings-list&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;collapse-delayed-warnings&lt;/code&gt; は、 &lt;code&gt;delayed-warnings-list&lt;/code&gt; から繰り返されるエントリを削除します。関数 &lt;code&gt;display-delayed-warnings&lt;/code&gt; は、 &lt;code&gt;delayed-warnings-list&lt;/code&gt; の各エントリ &lt;code&gt;display-warning&lt;/code&gt; を呼び出し、 &lt;code&gt;delayed-warnings-list&lt;/code&gt; を &lt;code&gt;nil&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="aca3a04eca1514a9f44c05fb78a24a6564571ff6" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;completing-read&lt;/code&gt; provides a higher-level interface for completion. A call to &lt;code&gt;completing-read&lt;/code&gt; specifies how to determine the list of valid names. The function then activates the minibuffer with a local keymap that binds a few keys to commands useful for completion. Other functions provide convenient simple interfaces for reading certain kinds of names with completion.</source>
          <target state="translated">関数 &lt;code&gt;completing-read&lt;/code&gt; は、完了のための高レベルのインターフェースを提供します。 &lt;code&gt;completing-read&lt;/code&gt; 呼び出しは、有効な名前のリストを判別する方法を指定します。次に、この関数は、完了に役立つコマンドにいくつかのキーをバインドするローカルキーマップを使用してミニバッファーをアクティブにします。他の関数は、特定の種類の名前を補完して読み取るための便利でシンプルなインターフェイスを提供します。</target>
        </trans-unit>
        <trans-unit id="743a6545ecb435ebd9f3de6185649c8ee66cb997" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;completing-read&lt;/code&gt; uses &lt;code&gt;minibuffer-local-completion-map&lt;/code&gt; as the keymap if &lt;var&gt;require-match&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, and uses &lt;code&gt;minibuffer-local-must-match-map&lt;/code&gt; if &lt;var&gt;require-match&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;. See &lt;a href=&quot;completion-commands#Completion-Commands&quot;&gt;Completion Commands&lt;/a&gt;.</source>
          <target state="translated">機能 &lt;code&gt;completing-read&lt;/code&gt; 用途は &lt;code&gt;minibuffer-local-completion-map&lt;/code&gt; 場合、キーマップとして &lt;var&gt;require-match&lt;/var&gt; ある &lt;code&gt;nil&lt;/code&gt; 、および使用 &lt;code&gt;minibuffer-local-must-match-map&lt;/code&gt; 場合に &lt;var&gt;require-match&lt;/var&gt; 非ある &lt;code&gt;nil&lt;/code&gt; 。&lt;a href=&quot;completion-commands#Completion-Commands&quot;&gt;完了コマンドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="eb114701d962dcc2e639c63a654e62af9ffd7c5a" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;coordinates-in-window-p&lt;/code&gt; does not require a frame as argument because it always uses the frame that &lt;var&gt;window&lt;/var&gt; is on.</source>
          <target state="translated">関数 &lt;code&gt;coordinates-in-window-p&lt;/code&gt; は、 &lt;var&gt;window&lt;/var&gt; がオンになっているフレームを常に使用するため、引数としてフレームを必要としません。</target>
        </trans-unit>
        <trans-unit id="d5b3ded67b9cd070ced5aa2445c9069b81dfc417" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;current-kill&lt;/code&gt; rotates the yanking pointer, which designates the front of the kill ring, by &lt;var&gt;n&lt;/var&gt; places (from newer kills to older ones), and returns the text at that place in the ring.</source>
          <target state="translated">関数 &lt;code&gt;current-kill&lt;/code&gt; は、キルリングの前面を指定するヤンクポインタを &lt;var&gt;n&lt;/var&gt; 桁（新しいキルから古いキルへ）回転させ、リング内のその場所にテキストを返します。</target>
        </trans-unit>
        <trans-unit id="c09d1b87df08862239116751f48f0df4995d72f7" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;default-boundp&lt;/code&gt; tells you whether &lt;var&gt;symbol&lt;/var&gt;&amp;rsquo;s default value is nonvoid. If &lt;code&gt;(default-boundp 'foo)&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;, then &lt;code&gt;(default-value 'foo)&lt;/code&gt; would get an error.</source>
          <target state="translated">関数 &lt;code&gt;default-boundp&lt;/code&gt; は、 &lt;var&gt;symbol&lt;/var&gt; のデフォルト値がvoidでないかどうかを示します。もし &lt;code&gt;(default-boundp 'foo)&lt;/code&gt; リターン &lt;code&gt;nil&lt;/code&gt; の場合、 &lt;code&gt;(default-value 'foo)&lt;/code&gt; エラーになるだろう。</target>
        </trans-unit>
        <trans-unit id="3d944e42054c18a15837fce5fb4f736d90edcbfc" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;delete-other-windows&lt;/code&gt; (see &lt;a href=&quot;deleting-windows#Deleting-Windows&quot;&gt;Deleting Windows&lt;/a&gt;), when applied to a constituent of an atomic window, will try to make the atomic window fill its frame or main window (see &lt;a href=&quot;side-windows#Side-Windows&quot;&gt;Side Windows&lt;/a&gt;).</source>
          <target state="translated">関数 &lt;code&gt;delete-other-windows&lt;/code&gt; （ウィンドウの&lt;a href=&quot;deleting-windows#Deleting-Windows&quot;&gt;削除を&lt;/a&gt;参照）をアトミックウィンドウの構成要素に適用すると、アトミックウィンドウがフレームまたはメインウィンドウを埋めるようになります（&lt;a href=&quot;side-windows#Side-Windows&quot;&gt;サイド&lt;/a&gt;ウィンドウを参照）。</target>
        </trans-unit>
        <trans-unit id="9dffa9767ac8103870c396df1d01712edad9731f" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;delete-window&lt;/code&gt; (see &lt;a href=&quot;deleting-windows#Deleting-Windows&quot;&gt;Deleting Windows&lt;/a&gt;), when applied to a constituent of an atomic window, will try to delete the entire atomic window instead.</source>
          <target state="translated">関数 &lt;code&gt;delete-window&lt;/code&gt; （「ウィンドウの&lt;a href=&quot;deleting-windows#Deleting-Windows&quot;&gt;削除」を&lt;/a&gt;参照）をアトミックウィンドウの構成要素に適用すると、代わりにアトミックウィンドウ全体を削除しようとします。</target>
        </trans-unit>
        <trans-unit id="6dbf1bcd36e45950ad0668297034db25fc20918d" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;elt&lt;/code&gt; is similar, but applies to any kind of sequence. For historical reasons, it takes its arguments in the opposite order. See &lt;a href=&quot;sequence-functions#Sequence-Functions&quot;&gt;Sequence Functions&lt;/a&gt;.</source>
          <target state="translated">関数 &lt;code&gt;elt&lt;/code&gt; も同様ですが、あらゆる種類のシーケンスに適用されます。歴史的な理由から、それは反対の順序でその議論を取ります。&lt;a href=&quot;sequence-functions#Sequence-Functions&quot;&gt;シーケンス関数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="53ea0623909a1543789ee0d4705170a49f5a1097" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;equal&lt;/code&gt; can also compare two window configurations; it regards configurations as unequal if they differ in any respect, even a saved point.</source>
          <target state="translated">関数 &lt;code&gt;equal&lt;/code&gt; は、2つのウィンドウ構成を比較することもできます。保存されたポイントであっても、構成が何らかの点で異なる場合は、構成が等しくないと見なされます。</target>
        </trans-unit>
        <trans-unit id="15f22c5a8ef685b2d1157d55627f2e569a64550a" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;foo&lt;/code&gt; subtracts &lt;var&gt;integer1&lt;/var&gt; from &lt;var&gt;integer2&lt;/var&gt;, then adds all the rest of the arguments to the result. If &lt;var&gt;integer2&lt;/var&gt; is not supplied, then the number 19 is used by default.</source>
          <target state="translated">関数 &lt;code&gt;foo&lt;/code&gt; は、 &lt;var&gt;integer1&lt;/var&gt; から &lt;var&gt;integer2&lt;/var&gt; 減算し、残りのすべての引数を結果に追加します。 &lt;var&gt;integer2&lt;/var&gt; が指定されていない場合、デフォルトで数値19が使用されます。</target>
        </trans-unit>
        <trans-unit id="142092b37bd14d5b1415337e59a8ef7820027ffe" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;format-spec&lt;/code&gt; described in this section performs a similar function to &lt;code&gt;format&lt;/code&gt;, except it operates on format control strings that use arbitrary specification characters.</source>
          <target state="translated">このセクションで説明する関数 &lt;code&gt;format-spec&lt;/code&gt; は、任意の指定文字を使用するフォーマット制御文字列を操作することを除いて、 &lt;code&gt;format&lt;/code&gt; と同様の機能を実行します。</target>
        </trans-unit>
        <trans-unit id="580c556614ef2beffd862c0457ca3264d0d95fa2" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;frame-parameters&lt;/code&gt; returns an alist listing all the parameters of &lt;var&gt;frame&lt;/var&gt; and their values. If &lt;var&gt;frame&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt; or omitted, this returns the selected frame&amp;rsquo;s parameters</source>
          <target state="translated">関数 &lt;code&gt;frame-parameters&lt;/code&gt; 戻り、連想リストの全てのパラメータリスト &lt;var&gt;frame&lt;/var&gt; とその値。場合は &lt;var&gt;frame&lt;/var&gt; ある &lt;code&gt;nil&lt;/code&gt; または省略し、この戻り、選択したフレームのパラメータ</target>
        </trans-unit>
        <trans-unit id="fc4daa549e176d014e533dbad29a89e4b64d4d76" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;getx&lt;/code&gt; refers to &lt;code&gt;x&lt;/code&gt;. This is a &lt;em&gt;free&lt;/em&gt; reference, in the sense that there is no binding for &lt;code&gt;x&lt;/code&gt; within that &lt;code&gt;defun&lt;/code&gt; construct itself. When we call &lt;code&gt;getx&lt;/code&gt; from within a &lt;code&gt;let&lt;/code&gt; form in which &lt;code&gt;x&lt;/code&gt; is (dynamically) bound, it retrieves the local value (i.e., 1). But when we call &lt;code&gt;getx&lt;/code&gt; outside the &lt;code&gt;let&lt;/code&gt; form, it retrieves the global value (i.e., -99).</source>
          <target state="translated">関数 &lt;code&gt;getx&lt;/code&gt; は &lt;code&gt;x&lt;/code&gt; を参照します。これは、その &lt;code&gt;defun&lt;/code&gt; コンストラクト自体の中に &lt;code&gt;x&lt;/code&gt; のバインディングがないという意味で、&lt;em&gt;無料の&lt;/em&gt;参照です。 &lt;code&gt;x&lt;/code&gt; が（動的に）バインド &lt;code&gt;let&lt;/code&gt; れているletフォーム内から &lt;code&gt;getx&lt;/code&gt; を呼び出すと、ローカル値（つまり、1）が取得されます。ただし、 &lt;code&gt;let&lt;/code&gt; フォームの外部で &lt;code&gt;getx&lt;/code&gt; を呼び出すと、グローバル値（つまり、-99）が取得されます。</target>
        </trans-unit>
        <trans-unit id="e222099e0dbd9ca9d8f1867678a5de58c410df4b" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;insert-file-contents&lt;/code&gt; automatically recognizes file formats when it reads the specified file. It checks the text of the beginning of the file against the regular expressions of the format definitions, and if it finds a match, it calls the decoding function for that format. Then it checks all the known formats over again. It keeps checking them until none of them is applicable.</source>
          <target state="translated">関数 &lt;code&gt;insert-file-contents&lt;/code&gt; は、指定されたファイルを読み取るときにファイル形式を自動的に認識します。ファイルの先頭のテキストをフォーマット定義の正規表現と照合し、一致するものが見つかった場合は、そのフォーマットのデコード関数を呼び出します。次に、すべての既知の形式をもう一度チェックします。それらのいずれも適用されなくなるまで、それらをチェックし続けます。</target>
        </trans-unit>
        <trans-unit id="1b53622592c53b4408af724ef50deb90f84d0660" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;insert-file-contents&lt;/code&gt;:</source>
          <target state="translated">関数 &lt;code&gt;insert-file-contents&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0ced44529508f6a3572121eaa375fc4ced75820b" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;insert-for-yank&lt;/code&gt; automatically sets this variable according to the &lt;var&gt;undo&lt;/var&gt; element of the &lt;code&gt;yank-handler&lt;/code&gt; text property, if there is one.</source>
          <target state="translated">関数 &lt;code&gt;insert-for-yank&lt;/code&gt; は、 &lt;code&gt;yank-handler&lt;/code&gt; textプロパティの &lt;var&gt;undo&lt;/var&gt; 要素（存在する場合）に従って、この変数を自動的に設定します。</target>
        </trans-unit>
        <trans-unit id="63c67cfe6f9d58e7894dfaf98f9e257cab3b6ab1" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;kill-all-local-variables&lt;/code&gt; runs this normal hook before it does anything else. This gives major modes a way to arrange for something special to be done if the user switches to a different major mode. It is also useful for buffer-specific minor modes that should be forgotten if the user changes the major mode.</source>
          <target state="translated">関数 &lt;code&gt;kill-all-local-variables&lt;/code&gt; は、他の処理を行う前に、この通常のフックを実行します。これにより、ユーザーが別のメジャーモードに切り替えた場合に、メジャーモードで特別な処理を実行できるようになります。また、ユーザーがメジャーモードを変更した場合に忘れてしまうバッファ固有のマイナーモードにも役立ちます。</target>
        </trans-unit>
        <trans-unit id="db6ce2dd6e8f67ccadb8ee5dc896d171a780cbcc" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;macroexpand&lt;/code&gt; does not expand calls to inline functions. Normally there is no need for that, since a call to an inline function is no harder to understand than a call to an ordinary function.</source>
          <target state="translated">関数 &lt;code&gt;macroexpand&lt;/code&gt; は、インライン関数への呼び出しを展開しません。インライン関数の呼び出しは通常の関数の呼び出しよりも理解するのが難しいことではないため、通常はその必要はありません。</target>
        </trans-unit>
        <trans-unit id="8ca63acdedc01018b5b5ff8ef5fd299f693dc141" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;map-keymap&lt;/code&gt; calls &lt;var&gt;function&lt;/var&gt; once for each binding in &lt;var&gt;keymap&lt;/var&gt;. It passes two arguments, the event type and the value of the binding. If &lt;var&gt;keymap&lt;/var&gt; has a parent, the parent&amp;rsquo;s bindings are included as well. This works recursively: if the parent has itself a parent, then the grandparent&amp;rsquo;s bindings are also included and so on.</source>
          <target state="translated">関数 &lt;code&gt;map-keymap&lt;/code&gt; は、 &lt;var&gt;keymap&lt;/var&gt; のバインディングごとに1回 &lt;var&gt;function&lt;/var&gt; 呼び出します。イベントタイプとバインディングの値の2つの引数を渡します。 &lt;var&gt;keymap&lt;/var&gt; に親がある場合は、親のバインディングも含まれます。これは再帰的に機能します。親がそれ自体に親を持っている場合、祖父母のバインディングも含まれます。</target>
        </trans-unit>
        <trans-unit id="4993f97cab68094466e932cb10bb5175cf66f558" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;mapbacktrace&lt;/code&gt; calls &lt;var&gt;function&lt;/var&gt; once for each frame in the backtrace, starting at the first frame whose function is &lt;var&gt;base&lt;/var&gt; (or from the top if &lt;var&gt;base&lt;/var&gt; is omitted or &lt;code&gt;nil&lt;/code&gt;).</source>
          <target state="translated">関数 &lt;code&gt;mapbacktrace&lt;/code&gt; は、関数が &lt;var&gt;base&lt;/var&gt; である最初のフレームから開始して（または &lt;var&gt;base&lt;/var&gt; が省略されているか &lt;code&gt;nil&lt;/code&gt; の場合は上から）、バックトレースのフレームごとに1回関数を呼び出し &lt;var&gt;function&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="ccd658c08c200f4281112668bf7e651adc648cfe" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;member&lt;/code&gt; tests to see whether &lt;var&gt;object&lt;/var&gt; is a member of &lt;var&gt;list&lt;/var&gt;, comparing members with &lt;var&gt;object&lt;/var&gt; using &lt;code&gt;equal&lt;/code&gt;. If &lt;var&gt;object&lt;/var&gt; is a member, &lt;code&gt;member&lt;/code&gt; returns a list starting with its first occurrence in &lt;var&gt;list&lt;/var&gt;. Otherwise, it returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;member&lt;/code&gt; は、 &lt;var&gt;object&lt;/var&gt; が &lt;var&gt;list&lt;/var&gt; メンバーであるかどうかをテストし、 &lt;code&gt;equal&lt;/code&gt; を使用してメンバーを &lt;var&gt;object&lt;/var&gt; と比較します。場合 &lt;var&gt;object&lt;/var&gt; メンバーである、 &lt;code&gt;member&lt;/code&gt; その最初の発生から始まるリストを返し &lt;var&gt;list&lt;/var&gt; 。それ以外の場合は、 &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="836706fff80e951f88d58f54e4d11838289bf1e2" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;memql&lt;/code&gt; tests to see whether &lt;var&gt;object&lt;/var&gt; is a member of &lt;var&gt;list&lt;/var&gt;, comparing members with &lt;var&gt;object&lt;/var&gt; using &lt;code&gt;eql&lt;/code&gt;, so floating-point elements are compared by value. If &lt;var&gt;object&lt;/var&gt; is a member, &lt;code&gt;memql&lt;/code&gt; returns a list starting with its first occurrence in &lt;var&gt;list&lt;/var&gt;. Otherwise, it returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;memql&lt;/code&gt; は、 &lt;var&gt;object&lt;/var&gt; が &lt;var&gt;list&lt;/var&gt; メンバーであるかどうかをテストし、 &lt;code&gt;eql&lt;/code&gt; を使用してメンバーを &lt;var&gt;object&lt;/var&gt; と比較します。したがって、浮動小数点要素は値によって比較されます。場合 &lt;var&gt;object&lt;/var&gt; メンバである、 &lt;code&gt;memql&lt;/code&gt; は、その最初の発生から始まるリストを返し &lt;var&gt;list&lt;/var&gt; 。それ以外の場合は、 &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2086c23f1633b32f5d281ae45401849ef50ca00d" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;process-type&lt;/code&gt; returns the symbol &lt;code&gt;serial&lt;/code&gt; for a process object representing a serial port connection.</source>
          <target state="translated">関数 &lt;code&gt;process-type&lt;/code&gt; は、シリアルポート接続を表すプロセスオブジェクトのシンボル &lt;code&gt;serial&lt;/code&gt; を返します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
