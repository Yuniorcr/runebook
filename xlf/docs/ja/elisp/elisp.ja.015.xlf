<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="elisp">
    <body>
      <group id="elisp">
        <trans-unit id="7d5d7ee8f609d032732725e8d3c8c089bc52554d" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;push-mark&lt;/code&gt; normally &lt;em&gt;does not&lt;/em&gt; activate the mark. To do that, specify &lt;code&gt;t&lt;/code&gt; for the argument &lt;var&gt;activate&lt;/var&gt;.</source>
          <target state="translated">機能 &lt;code&gt;push-mark&lt;/code&gt; は通常、マークをアクティブに&lt;em&gt;しません&lt;/em&gt;。これを行うには、引数 &lt;var&gt;activate&lt;/var&gt; に &lt;code&gt;t&lt;/code&gt; を指定します。</target>
        </trans-unit>
        <trans-unit id="e9fa560f2451740cc751b4488378f30d7e73bffc" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;read-key-sequence&lt;/code&gt; also transforms some mouse events. It converts unbound drag events into click events, and discards unbound button-down events entirely. It also reshuffles focus events and miscellaneous window events so that they never appear in a key sequence with any other events.</source>
          <target state="translated">関数 &lt;code&gt;read-key-sequence&lt;/code&gt; は、いくつかのマウスイベントも変換します。バインドされていないドラッグイベントをクリックイベントに変換し、バインドされていないボタンダウンイベントを完全に破棄します。また、フォーカスイベントとその他のウィンドウイベントを再シャッフルして、他のイベントと一緒にキーシーケンスに表示されないようにします。</target>
        </trans-unit>
        <trans-unit id="411c4d145671b4036ab4f7cb6fa9e30b7580ebe1" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;read-key-sequence&lt;/code&gt; ignores any button-down events that don&amp;rsquo;t have command bindings; therefore, the Emacs command loop ignores them too. This means that you need not worry about defining button-down events unless you want them to do something. The usual reason to define a button-down event is so that you can track mouse motion (by reading motion events) until the button is released. See &lt;a href=&quot;motion-events#Motion-Events&quot;&gt;Motion Events&lt;/a&gt;.</source>
          <target state="translated">関数 &lt;code&gt;read-key-sequence&lt;/code&gt; は、コマンドバインディングを持たないボタンダウンイベントを無視します。したがって、Emacsコマンドループもそれらを無視します。つまり、ボタンダウンイベントに何かをさせたくない場合を除いて、ボタンダウンイベントの定義について心配する必要はありません。ボタンダウンイベントを定義する通常の理由は、ボタンが離されるまでマウスの動きを（モーションイベントを読み取ることによって）追跡できるようにするためです。&lt;a href=&quot;motion-events#Motion-Events&quot;&gt;モーションイベントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="eba65b635c04edcaac2d00aa8b06564194485459" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;read-key-sequence&lt;/code&gt; suppresses quitting:</source>
          <target state="translated">関数 &lt;code&gt;read-key-sequence&lt;/code&gt; は、終了を抑制します。</target>
        </trans-unit>
        <trans-unit id="56cd8086393902fb3f2fd966bb33828c275959f0" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;read-regexp&lt;/code&gt; may use the value of this variable to determine its list of default regular expressions. If non-&lt;code&gt;nil&lt;/code&gt;, the value of this variable should be either:</source>
          <target state="translated">関数 &lt;code&gt;read-regexp&lt;/code&gt; は、この変数の値を使用して、デフォルトの正規表現のリストを決定できます。非場合は &lt;code&gt;nil&lt;/code&gt; に、この変数の値は、いずれかでなければなりません。</target>
        </trans-unit>
        <trans-unit id="bfc9d89212eee790f8bef26e1a7f3b5f75f045d1" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;redraw-frame&lt;/code&gt; clears and redisplays the entire contents of a given frame (see &lt;a href=&quot;frames#Frames&quot;&gt;Frames&lt;/a&gt;). This is useful if the screen is corrupted.</source>
          <target state="translated">関数 &lt;code&gt;redraw-frame&lt;/code&gt; は、指定されたフレームの内容全体をクリアして再表示します（&lt;a href=&quot;frames#Frames&quot;&gt;フレームを&lt;/a&gt;参照）。これは、画面が破損している場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="bbfc0c7e3b7ab2136aac8aac4311c80559dc8786" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;run-at-time&lt;/code&gt; returns a timer value that identifies the particular scheduled future action. You can use this value to call &lt;code&gt;cancel-timer&lt;/code&gt; (see below).</source>
          <target state="translated">関数 &lt;code&gt;run-at-time&lt;/code&gt; は、特定のスケジュールされた将来のアクションを識別するタイマー値を返します。この値を使用して、 &lt;code&gt;cancel-timer&lt;/code&gt; を呼び出すことができます（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="ebf16908ab8cdf77cbe0ed4cf8fac00f9d1be78c" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;run-with-idle-timer&lt;/code&gt; returns a timer value which you can use in calling &lt;code&gt;cancel-timer&lt;/code&gt; (see &lt;a href=&quot;timers#Timers&quot;&gt;Timers&lt;/a&gt;).</source>
          <target state="translated">関数 &lt;code&gt;run-with-idle-timer&lt;/code&gt; あなたが呼び出しに使用できるタイマー値を返し &lt;code&gt;cancel-timer&lt;/code&gt; （参照&lt;a href=&quot;timers#Timers&quot;&gt;タイマーを&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="c8d58a42db5f4f64609112ba848f62aa4f6033e5" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;signal&lt;/code&gt; never returns.</source>
          <target state="translated">機能 &lt;code&gt;signal&lt;/code&gt; は戻りません。</target>
        </trans-unit>
        <trans-unit id="e957fc96b50a902c38bbd9080cce211dda054fa5" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;split-window&lt;/code&gt; (see &lt;a href=&quot;splitting-windows#Splitting-Windows&quot;&gt;Splitting Windows&lt;/a&gt;), when applied to a constituent of an atomic window, will try to create the new window outside of the atomic window.</source>
          <target state="translated">関数 &lt;code&gt;split-window&lt;/code&gt; （「ウィンドウの&lt;a href=&quot;splitting-windows#Splitting-Windows&quot;&gt;分割&lt;/a&gt;」を参照）をアトミックウィンドウの構成要素に適用すると、アトミックウィンドウの外側に新しいウィンドウを作成しようとします。</target>
        </trans-unit>
        <trans-unit id="6df956fe28921ed43fa43bd2788b8f0492e99c5e" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;substitute-key-definition&lt;/code&gt; scans a keymap for keys that have a certain binding and rebinds them with a different binding. Another feature which is cleaner and can often produce the same results is to remap one command into another (see &lt;a href=&quot;remapping-commands#Remapping-Commands&quot;&gt;Remapping Commands&lt;/a&gt;).</source>
          <target state="translated">関数 &lt;code&gt;substitute-key-definition&lt;/code&gt; は、キーマップをスキャンして特定のバインディングを持つキーを探し、それらを別のバインディングで再バインドします。クリーナーであり、しばしば同じ結果を生成することができますもう一つの特徴は、（参照別に一つのコマンドを再マッピングすることで&lt;a href=&quot;remapping-commands#Remapping-Commands&quot;&gt;再マップコマンド&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="bc471743e21a847c0361cb115c2214f8054e6289" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;syms_of_&lt;var&gt;filename&lt;/var&gt;&lt;/code&gt; is also the place to define any C variables that are to be visible as Lisp variables. &lt;code&gt;DEFVAR_LISP&lt;/code&gt; makes a C variable of type &lt;code&gt;Lisp_Object&lt;/code&gt; visible in Lisp. &lt;code&gt;DEFVAR_INT&lt;/code&gt; makes a C variable of type &lt;code&gt;int&lt;/code&gt; visible in Lisp with a value that is always an integer. &lt;code&gt;DEFVAR_BOOL&lt;/code&gt; makes a C variable of type &lt;code&gt;int&lt;/code&gt; visible in Lisp with a value that is either &lt;code&gt;t&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;. Note that variables defined with &lt;code&gt;DEFVAR_BOOL&lt;/code&gt; are automatically added to the list &lt;code&gt;byte-boolean-vars&lt;/code&gt; used by the byte compiler.</source>
          <target state="translated">機能 &lt;code&gt;syms_of_&lt;var&gt;filename&lt;/var&gt;&lt;/code&gt; はまた、Lispの変数として表示される任意のC変数を定義する場所です。 &lt;code&gt;DEFVAR_LISP&lt;/code&gt; は型のC変数が行う &lt;code&gt;Lisp_Object&lt;/code&gt; Lispで目に見えます。 &lt;code&gt;DEFVAR_INT&lt;/code&gt; は、常に整数である値を持つ &lt;code&gt;int&lt;/code&gt; 型のC変数をLispで表示します。 &lt;code&gt;DEFVAR_BOOL&lt;/code&gt; は、タイプ &lt;code&gt;int&lt;/code&gt; のC変数を、 &lt;code&gt;t&lt;/code&gt; または &lt;code&gt;nil&lt;/code&gt; のいずれかの値でLispに表示します。 &lt;code&gt;DEFVAR_BOOL&lt;/code&gt; で定義された変数は、バイトコンパイラによって使用される &lt;code&gt;byte-boolean-vars&lt;/code&gt; のリストに自動的に追加されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3a8cd13dfa2e44b4ddf44780a2531422e59cdecc" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;throw&lt;/code&gt; finds the matching &lt;code&gt;catch&lt;/code&gt; based on the first argument: it searches for a &lt;code&gt;catch&lt;/code&gt; whose first argument is &lt;code&gt;eq&lt;/code&gt; to the one specified in the &lt;code&gt;throw&lt;/code&gt;. If there is more than one applicable &lt;code&gt;catch&lt;/code&gt;, the innermost one takes precedence. Thus, in the above example, the &lt;code&gt;throw&lt;/code&gt; specifies &lt;code&gt;foo&lt;/code&gt;, and the &lt;code&gt;catch&lt;/code&gt; in &lt;code&gt;foo-outer&lt;/code&gt; specifies the same symbol, so that &lt;code&gt;catch&lt;/code&gt; is the applicable one (assuming there is no other matching &lt;code&gt;catch&lt;/code&gt; in between).</source>
          <target state="translated">機能の &lt;code&gt;throw&lt;/code&gt; 一致見つかっ &lt;code&gt;catch&lt;/code&gt; 最初の引数に基づいた：それはを探し &lt;code&gt;catch&lt;/code&gt; その最初の引数である &lt;code&gt;eq&lt;/code&gt; で指定したものに &lt;code&gt;throw&lt;/code&gt; 。適用可能な &lt;code&gt;catch&lt;/code&gt; が複数ある場合は、最も内側のキャッチが優先されます。したがって、上記の例では、 &lt;code&gt;throw&lt;/code&gt; 指定 &lt;code&gt;foo&lt;/code&gt; 、および &lt;code&gt;catch&lt;/code&gt; で &lt;code&gt;foo-outer&lt;/code&gt; 指定同じシンボル、その結果、 &lt;code&gt;catch&lt;/code&gt; 適用できるものである（他のマッチングが存在しないと仮定すると &lt;code&gt;catch&lt;/code&gt; との間では）。</target>
        </trans-unit>
        <trans-unit id="5661573f71139d597425c8fd348b8554cabd492f" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;tool-bar-make-keymap&lt;/code&gt;, in turn, derives the actual tool bar map dynamically from the value of the variable &lt;code&gt;tool-bar-map&lt;/code&gt;. Hence, you should normally adjust the default (global) tool bar by changing that map. Some major modes, such as Info mode, completely replace the global tool bar by making &lt;code&gt;tool-bar-map&lt;/code&gt; buffer-local and setting it to a different keymap.</source>
          <target state="translated">次に、関数 &lt;code&gt;tool-bar-make-keymap&lt;/code&gt; は、変数 &lt;code&gt;tool-bar-map&lt;/code&gt; の値から実際のツールバーマップを動的に導出します。したがって、通常は、そのマップを変更して、デフォルトの（グローバル）ツールバーを調整する必要があります。情報モードなどの一部の主要なモードでは、 &lt;code&gt;tool-bar-map&lt;/code&gt; をbuffer-localにして別のキーマップに設定することにより、グローバルツールバーを完全に置き換えます。</target>
        </trans-unit>
        <trans-unit id="05e5fdd0ff72a822c0cc55151d5a6c9edaf5d75c" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;view-buffer&lt;/code&gt; does not enable View mode in buffers whose mode-class is special, because such modes usually provide their own View-like bindings.</source>
          <target state="translated">関数 &lt;code&gt;view-buffer&lt;/code&gt; は、mode-classが特別なバッファーでは、Viewモードを有効にしません。これは、このようなモードは通常、独自のViewのようなバインディングを提供するためです。</target>
        </trans-unit>
        <trans-unit id="a049ee6872282215d8c5e6687a889741cbf6e11f" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;write-region&lt;/code&gt; converts the data which it writes to the appropriate file formats specified by &lt;code&gt;buffer-file-format&lt;/code&gt; and also calls the functions in the list &lt;code&gt;write-region-annotate-functions&lt;/code&gt;. See &lt;a href=&quot;format-conversion#Format-Conversion&quot;&gt;Format Conversion&lt;/a&gt;.</source>
          <target state="translated">関数 &lt;code&gt;write-region&lt;/code&gt; は、書き込むデータを &lt;code&gt;buffer-file-format&lt;/code&gt; で指定された適切なファイル形式に変換し、リスト &lt;code&gt;write-region-annotate-functions&lt;/code&gt; 内の関数も呼び出します。&lt;a href=&quot;format-conversion#Format-Conversion&quot;&gt;フォーマット変換を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2746b27a56c8ff0cc634f6dc15fff67621f22f61" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;write-region&lt;/code&gt;:</source>
          <target state="translated">関数 &lt;code&gt;write-region&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="37f0357f6437343569a44c1bbed9f09179966f30" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;x-get-resource&lt;/code&gt; retrieves a resource value from the X Window defaults database.</source>
          <target state="translated">関数 &lt;code&gt;x-get-resource&lt;/code&gt; は、XWindowデフォルトデータベースからリソース値を取得します。</target>
        </trans-unit>
        <trans-unit id="fb6053497d7338bd26e25c53f5d17dd9d465fac4" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;x-parse-geometry&lt;/code&gt; converts a standard X window geometry string to an alist that you can use as part of the argument to &lt;code&gt;make-frame&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;x-parse-geometry&lt;/code&gt; は、標準のXウィンドウジオメトリ文字列を、 &lt;code&gt;make-frame&lt;/code&gt; の引数の一部として使用できるリストに変換します。</target>
        </trans-unit>
        <trans-unit id="765f4cca514fe5d2dfb2aca5ee2926f744c31bf9" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;y-or-n-p-with-timeout&lt;/code&gt; provides a simple way to use a timer to avoid waiting too long for an answer. See &lt;a href=&quot;yes_002dor_002dno-queries#Yes_002dor_002dNo-Queries&quot;&gt;Yes-or-No Queries&lt;/a&gt;.</source>
          <target state="translated">関数 &lt;code&gt;y-or-n-p-with-timeout&lt;/code&gt; は、タイマーを使用して応答を長時間待つことを回避する簡単な方法を提供します。&lt;a href=&quot;yes_002dor_002dno-queries#Yes_002dor_002dNo-Queries&quot;&gt;はいまたはいいえのクエリを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="df0ab2f26bcca2763cb6e43bfe8851ca6f1b858d" translate="yes" xml:space="preserve">
          <source>The function &lt;var&gt;fun&lt;/var&gt; was defined as an autoload.</source>
          <target state="translated">関数 &lt;var&gt;fun&lt;/var&gt; は自動ロードとして定義されました。</target>
        </trans-unit>
        <trans-unit id="54c8609b51778bf7d45e6af7c3a0089e651dafd8" translate="yes" xml:space="preserve">
          <source>The function &lt;var&gt;fun&lt;/var&gt; was defined.</source>
          <target state="translated">関数 &lt;var&gt;fun&lt;/var&gt; が定義されました。</target>
        </trans-unit>
        <trans-unit id="1197aefcb8e997f46503d415a6f7bd440fa422e7" translate="yes" xml:space="preserve">
          <source>The function &lt;var&gt;fun&lt;/var&gt; was previously an autoload before this library redefined it as a function. The following element is always &lt;code&gt;(defun . &lt;var&gt;fun&lt;/var&gt;)&lt;/code&gt;, which represents defining &lt;var&gt;fun&lt;/var&gt; as a function.</source>
          <target state="translated">関数 &lt;var&gt;fun&lt;/var&gt; は、このライブラリが関数として再定義する前は、以前は自動ロードでした。次の要素が常にある &lt;code&gt;(defun . &lt;var&gt;fun&lt;/var&gt;)&lt;/code&gt; 定義を表し、 &lt;var&gt;fun&lt;/var&gt; 関数として。</target>
        </trans-unit>
        <trans-unit id="4a8ed9e0e2bf16ef5d1d934174aa221a2fe5895d" translate="yes" xml:space="preserve">
          <source>The function &lt;var&gt;hash-fn&lt;/var&gt; should accept one argument, a key, and return an integer that is the hash code of that key. For good results, the function should use the whole range of fixnums for hash codes, including negative fixnums.</source>
          <target state="translated">関数 &lt;var&gt;hash-fn&lt;/var&gt; は、1つの引数、キーを受け入れ、そのキーのハッシュコードである整数を返す必要があります。良好な結果を得るには、関数は、負のfixnumを含む、ハッシュコードのfixnumの全範囲を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="bceb96a81c6ae7fe6ca85c909a8b34d1e250dcc7" translate="yes" xml:space="preserve">
          <source>The function &lt;var&gt;restore-buffer-function&lt;/var&gt; will be called with argument list</source>
          <target state="translated">関数 &lt;var&gt;restore-buffer-function&lt;/var&gt; は引数リストを使用して呼び出されます</target>
        </trans-unit>
        <trans-unit id="542f7b37d57061c8a923579b6d757e44f707ccd9" translate="yes" xml:space="preserve">
          <source>The function &lt;var&gt;test-fn&lt;/var&gt; should accept two arguments, two keys, and return non-&lt;code&gt;nil&lt;/code&gt; if they are considered the same.</source>
          <target state="translated">関数 &lt;var&gt;test-fn&lt;/var&gt; は、2つの引数と2つのキーを受け入れ、それらが同じであると見なされる場合は非 &lt;code&gt;nil&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="0267fd50dfdf570f50991445f5d60831fec0bbb2" translate="yes" xml:space="preserve">
          <source>The function calls &lt;code&gt;set-auto-mode&lt;/code&gt; to choose and set a major mode. If this does not specify a mode, the buffer stays in the major mode determined by the default value of &lt;code&gt;major-mode&lt;/code&gt; (see below).</source>
          <target state="translated">この関数は &lt;code&gt;set-auto-mode&lt;/code&gt; を呼び出して、メジャーモードを選択および設定します。これでモードが指定されていない場合、バッファはメジャーモードのデフォルト値によって決定されるメジャーモードのままになり &lt;code&gt;major-mode&lt;/code&gt; （以下を参照）。</target>
        </trans-unit>
        <trans-unit id="b1b2ebec7b7f741cc24d28e6e32513259cab8c5e" translate="yes" xml:space="preserve">
          <source>The function cell holds a symbol&amp;rsquo;s function definition. Often, we refer to &amp;ldquo;the function &lt;code&gt;foo&lt;/code&gt;&amp;rdquo; when we really mean the function stored in the function cell of &lt;code&gt;foo&lt;/code&gt;; we make the distinction explicit only when necessary. Typically, the function cell is used to hold a function (see &lt;a href=&quot;functions#Functions&quot;&gt;Functions&lt;/a&gt;) or a macro (see &lt;a href=&quot;macros#Macros&quot;&gt;Macros&lt;/a&gt;). However, it can also be used to hold a symbol (see &lt;a href=&quot;function-indirection#Function-Indirection&quot;&gt;Function Indirection&lt;/a&gt;), keyboard macro (see &lt;a href=&quot;keyboard-macros#Keyboard-Macros&quot;&gt;Keyboard Macros&lt;/a&gt;), keymap (see &lt;a href=&quot;keymaps#Keymaps&quot;&gt;Keymaps&lt;/a&gt;), or autoload object (see &lt;a href=&quot;autoloading#Autoloading&quot;&gt;Autoloading&lt;/a&gt;). To get the contents of a symbol&amp;rsquo;s function cell, use the function &lt;code&gt;symbol-function&lt;/code&gt; (see &lt;a href=&quot;function-cells#Function-Cells&quot;&gt;Function Cells&lt;/a&gt;).</source>
          <target state="translated">関数セルは、シンボルの関数定義を保持します。多くの場合、我々は「関数を参照してください &lt;code&gt;foo&lt;/code&gt; 私たちは本当にの関数セルに保存されている機能を意味する」 &lt;code&gt;foo&lt;/code&gt; 。必要な場合にのみ、区別を明示します。典型的には、機能セルは、関数（参照を保持するために使用される&lt;a href=&quot;functions#Functions&quot;&gt;関数&lt;/a&gt;（参照）、またはマクロを&lt;a href=&quot;macros#Macros&quot;&gt;マクロ&lt;/a&gt;）。しかし、また、シンボルを保持するために使用される（参照することができる&lt;a href=&quot;function-indirection#Function-Indirection&quot;&gt;機能間接に&lt;/a&gt;）、キーボードマクロ（参照&lt;a href=&quot;keyboard-macros#Keyboard-Macros&quot;&gt;キーボードマクロ&lt;/a&gt;）、キーマップ（参照&lt;a href=&quot;keymaps#Keymaps&quot;&gt;キーマップを&lt;/a&gt;（参照）、又は自動ロードオブジェクト&lt;a href=&quot;autoloading#Autoloading&quot;&gt;オートローディングを&lt;/a&gt;）。シンボルの関数セルの内容を取得するには、関数 &lt;code&gt;symbol-function&lt;/code&gt; を使用します（&lt;a href=&quot;function-cells#Function-Cells&quot;&gt;関数セルを&lt;/a&gt;参照）。）。</target>
        </trans-unit>
        <trans-unit id="16328c91ba726096f5314f142ff38c105df7239d" translate="yes" xml:space="preserve">
          <source>The function cell or the value cell may be &lt;em&gt;void&lt;/em&gt;, which means that the cell does not reference any object. (This is not the same thing as holding the symbol &lt;code&gt;void&lt;/code&gt;, nor the same as holding the symbol &lt;code&gt;nil&lt;/code&gt;.) Examining a function or value cell that is void results in an error, such as &amp;lsquo;</source>
          <target state="translated">関数セルまたは値セルは&lt;em&gt;無効&lt;/em&gt;である可能性があり&lt;em&gt;ます&lt;/em&gt;。これは、セルがオブジェクトを参照していないことを意味します。（これは、記号 &lt;code&gt;void&lt;/code&gt; を保持することと同じではなく、記号 &lt;code&gt;nil&lt;/code&gt; を保持することとも同じではありません。）voidである関数または値セルを調べると、次のようなエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="77d0d2f3edeb3f16b9066342192972eab714c545" translate="yes" xml:space="preserve">
          <source>The function definition of &lt;var&gt;symbol&lt;/var&gt; is used in place of &lt;var&gt;symbol&lt;/var&gt;. If that too is a symbol, then this process is repeated, any number of times. Ultimately this should lead to an object that is a keymap, a command, or a keyboard macro.</source>
          <target state="translated">&lt;var&gt;symbol&lt;/var&gt; の代わりに &lt;var&gt;symbol&lt;/var&gt; の関数定義が使用されます。それもシンボルである場合、このプロセスは何度でも繰り返されます。最終的に、これはキーマップ、コマンド、またはキーボードマクロであるオブジェクトにつながるはずです。</target>
        </trans-unit>
        <trans-unit id="70e234ce635436f65ccf5ff5428cbb855d712c68" translate="yes" xml:space="preserve">
          <source>The function is called by &lt;code&gt;syntax-ppss&lt;/code&gt; (see &lt;a href=&quot;position-parse#Position-Parse&quot;&gt;Position Parse&lt;/a&gt;), and by Font Lock mode during syntactic fontification (see &lt;a href=&quot;syntactic-font-lock#Syntactic-Font-Lock&quot;&gt;Syntactic Font Lock&lt;/a&gt;). It is called with two arguments, &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt;, which are the starting and ending positions of the text on which it should act. It is allowed to call &lt;code&gt;syntax-ppss&lt;/code&gt; on any position before &lt;var&gt;end&lt;/var&gt;. However, it should not call &lt;code&gt;syntax-ppss-flush-cache&lt;/code&gt;; so, it is not allowed to call &lt;code&gt;syntax-ppss&lt;/code&gt; on some position and later modify the buffer at an earlier position.</source>
          <target state="translated">この関数は、 &lt;code&gt;syntax-ppss&lt;/code&gt; （&lt;a href=&quot;position-parse#Position-Parse&quot;&gt;Position Parseを&lt;/a&gt;参照）、および&lt;a href=&quot;syntactic-font-lock#Syntactic-Font-Lock&quot;&gt;構文フォント化&lt;/a&gt;中のFont Lockモード（Syntactic Font Lockを参照）によって呼び出されます。これは、 &lt;var&gt;start&lt;/var&gt; と &lt;var&gt;end&lt;/var&gt; 2つの引数で呼び出されます。これらは、動作するテキストの開始位置と終了位置です。 &lt;var&gt;end&lt;/var&gt; の前の任意の位置で &lt;code&gt;syntax-ppss&lt;/code&gt; を呼び出すことができます。ただし、 &lt;code&gt;syntax-ppss-flush-cache&lt;/code&gt; を呼び出さないでください。そのため、ある位置で &lt;code&gt;syntax-ppss&lt;/code&gt; を呼び出して、後で前の位置でバッファを変更することは許可されていません。</target>
        </trans-unit>
        <trans-unit id="7b365c1ea990ed74fa23e69f3e59bb3fef165d33" translate="yes" xml:space="preserve">
          <source>The function is called with one argument, the parse state at point returned by &lt;code&gt;parse-partial-sexp&lt;/code&gt;, and should return a face. The default value returns &lt;code&gt;font-lock-comment-face&lt;/code&gt; for comments and &lt;code&gt;font-lock-string-face&lt;/code&gt; for strings (see &lt;a href=&quot;faces-for-font-lock#Faces-for-Font-Lock&quot;&gt;Faces for Font Lock&lt;/a&gt;).</source>
          <target state="translated">関数は1つの引数、 &lt;code&gt;parse-partial-sexp&lt;/code&gt; によって返されるポイントでの解析状態で呼び出され、面を返す必要があります。デフォルト値は &lt;code&gt;font-lock-comment-face&lt;/code&gt; 場合はfont-lock-comment-faceを、 &lt;code&gt;font-lock-string-face&lt;/code&gt; を返します（「&lt;a href=&quot;faces-for-font-lock#Faces-for-Font-Lock&quot;&gt;フォントロックの面」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="9328a25f093f15182803d9023b33252b886864e6" translate="yes" xml:space="preserve">
          <source>The function is called with three arguments, &lt;var&gt;window&lt;/var&gt;, &lt;var&gt;object&lt;/var&gt;, and &lt;var&gt;pos&lt;/var&gt;. The second argument, &lt;var&gt;object&lt;/var&gt;, is either the overlay that had the property (for overlay buttons), or the buffer containing the button (for text property buttons). The other arguments have the same meaning as for the special text property &lt;code&gt;help-echo&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;var&gt;window&lt;/var&gt; 、 &lt;var&gt;object&lt;/var&gt; 、 &lt;var&gt;pos&lt;/var&gt; の3つの引数で呼び出されます。2番目の引数 &lt;var&gt;object&lt;/var&gt; は、プロパティを持つオーバーレイ（オーバーレイボタンの場合）、またはボタンを含むバッファー（テキストプロパティボタンの場合）のいずれかです。他の引数は、特別なテキストプロパティ &lt;code&gt;help-echo&lt;/code&gt; の場合と同じ意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="9bcf0f786e7063f34c780ba9d084a745154f7f7f" translate="yes" xml:space="preserve">
          <source>The function is called with two arguments, the severity level and its entry in &lt;code&gt;warning-levels&lt;/code&gt;. It should return a list to use as the entry (this value need not be an actual member of &lt;code&gt;warning-levels&lt;/code&gt;). By constructing this value, the function can change the severity of the warning, or specify different handling for a given severity level.</source>
          <target state="translated">この関数は、重大度レベルと &lt;code&gt;warning-levels&lt;/code&gt; へのエントリの2つの引数を使用して呼び出されます。エントリとして使用するリストを返す必要があります（この値は、 &lt;code&gt;warning-levels&lt;/code&gt; の実際のメンバーである必要はありません）。この値を作成することにより、関数は警告の重大​​度を変更したり、特定の重大度レベルに対して異なる処理を指定したりできます。</target>
        </trans-unit>
        <trans-unit id="a2a2dd9cb6611c3a2fb4ae6ecd12f7c5ac258cb7" translate="yes" xml:space="preserve">
          <source>The function is given three parameters, the standard &lt;var&gt;beg&lt;/var&gt;, &lt;var&gt;end&lt;/var&gt;, and &lt;var&gt;old-len&lt;/var&gt; from &lt;code&gt;after-change-functions&lt;/code&gt; (see &lt;a href=&quot;change-hooks#Change-Hooks&quot;&gt;Change Hooks&lt;/a&gt;). It should return either a cons of the beginning and end buffer positions (in that order) of the region to fontify, or &lt;code&gt;nil&lt;/code&gt; (which means choose the region in the standard way). This function needs to preserve point, the match-data, and the current restriction. The region it returns may start or end in the middle of a line.</source>
          <target state="translated">この関数には、標準の &lt;var&gt;beg&lt;/var&gt; 、 &lt;var&gt;end&lt;/var&gt; 、および &lt;code&gt;after-change-functions&lt;/code&gt; からの &lt;var&gt;old-len&lt;/var&gt; の3つのパラメーターが与えられます（&lt;a href=&quot;change-hooks#Change-Hooks&quot;&gt;変更フックを&lt;/a&gt;参照）。フォント化する領域の開始バッファ位置と終了バッファ位置の短所（この順序で）、または &lt;code&gt;nil&lt;/code&gt; （標準的な方法で領域を選択することを意味します）のいずれかを返す必要があります。この関数は、ポイント、一致データ、および現在の制限を保持する必要があります。返される領域は、行の途中で開始または終了する場合があります。</target>
        </trans-unit>
        <trans-unit id="d5d86a312c704be80fff26fc16b50d833ac4546d" translate="yes" xml:space="preserve">
          <source>The function now compares the two candidate prefixes heuristically: if the non-whitespace characters in the line 2 candidate occur in the same order in the line 1 candidate, the function returns the line 2 candidate. Otherwise, it returns the largest initial substring which is common to both candidates (which might be the empty string).</source>
          <target state="translated">この関数は2つの接頭辞候補をヒューリスティックに比較します:2行目の候補に含まれる空白以外の文字が1行目の候補と同じ順番で現れた場合、この関数は2行目の候補を返します。そうでなければ、両方の候補に共通する最大の初期部分文字列を返します(これは空文字列かもしれません)。</target>
        </trans-unit>
        <trans-unit id="3010538a15326f7f4a43ca9704f87dc561e6ae88" translate="yes" xml:space="preserve">
          <source>The function now has a list of regular expressions that it passes to &lt;code&gt;read-from-minibuffer&lt;/code&gt; to obtain the user&amp;rsquo;s input. The first element of the list is the default result in case of empty input. All elements of the list are available to the user as the &amp;ldquo;future minibuffer history&amp;rdquo; list (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Minibuffer-History.html#Minibuffer-History&quot;&gt;future list&lt;/a&gt; in</source>
          <target state="translated">この関数には、ユーザーの入力を取得するために &lt;code&gt;read-from-minibuffer&lt;/code&gt; に渡す正規表現のリストが含まれるようになりました。リストの最初の要素は、入力が空の場合のデフォルトの結果です。リストのすべての要素は、「将来のミニバッファ履歴」リストとしてユーザーが利用できます（の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Minibuffer-History.html#Minibuffer-History&quot;&gt;将来のリスト&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="d3712f3990384c32b001189f990196c3e25d4f1c" translate="yes" xml:space="preserve">
          <source>The function passed as &lt;code&gt;:request-dispatcher&lt;/code&gt; is responsible for handling the remote endpoint&amp;rsquo;s requests, which expect a reply from the local endpoint (in this case, the program you&amp;rsquo;re building). Inside that function, you may either return locally (a normal return) or non-locally (an error return). A local return value must be a Lisp object that can be serialized as JSON (see &lt;a href=&quot;parsing-json#Parsing-JSON&quot;&gt;Parsing JSON&lt;/a&gt;). This determines a success response, and the object is forwarded to the server as the JSONRPC &lt;code&gt;result&lt;/code&gt; object. A non-local return, achieved by calling the function &lt;code&gt;jsonrpc-error&lt;/code&gt;, causes an error response to be sent to the server. The details of the accompanying JSONRPC &lt;code&gt;error&lt;/code&gt; are filled out with whatever was passed to &lt;code&gt;jsonrpc-error&lt;/code&gt;. A non-local return triggered by an unexpected error of any other type also causes an error response to be sent (unless you have set &lt;code&gt;debug-on-error&lt;/code&gt;, in which case this calls the Lisp debugger, see &lt;a href=&quot;error-debugging#Error-Debugging&quot;&gt;Error Debugging&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;:request-dispatcher&lt;/code&gt; として渡された関数は、ローカルエンドポイント（この場合は、構築しているプログラム）からの応答を期待するリモートエンドポイントの要求を処理する役割を果たします。その関数内では、ローカルに戻る（通常のリターン）か、非ローカルに戻る（エラーリターン）ことができます。ローカルの戻り値は、JSONとしてシリアル化できるLispオブジェクトである必要があります（&lt;a href=&quot;parsing-json#Parsing-JSON&quot;&gt;JSONの解析を&lt;/a&gt;参照）。これにより成功応答が決定され、オブジェクトはJSONRPC &lt;code&gt;result&lt;/code&gt; オブジェクトとしてサーバーに転送されます。関数 &lt;code&gt;jsonrpc-error&lt;/code&gt; を呼び出すことによって達成される非ローカルリターンにより、エラー応答がサーバーに送信されます。付随するJSONRPC &lt;code&gt;error&lt;/code&gt; の詳細には、渡されたものがすべて入力されます &lt;code&gt;jsonrpc-error&lt;/code&gt; 。他のタイプの予期しないエラーによってトリガーされた非ローカルリターンもエラー応答を送信します（ &lt;code&gt;debug-on-error&lt;/code&gt; を設定した場合を除きます。この場合、これはLispデバッガーを呼び出します。&lt;a href=&quot;error-debugging#Error-Debugging&quot;&gt;エラーデバッグを&lt;/a&gt;参照してください）。</target>
        </trans-unit>
        <trans-unit id="7f4f854a3fe920f9dd18f4fb474ba93f955016a3" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;nil&lt;/code&gt; if images of this type are not supported. Otherwise it returns an image descriptor.</source>
          <target state="translated">このタイプの画像がサポートされていない場合、関数は &lt;code&gt;nil&lt;/code&gt; を返します。それ以外の場合は、画像記述子を返します。</target>
        </trans-unit>
        <trans-unit id="271e1437bfe3ecbde27422c4523f32b9c7ffd067" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;t&lt;/code&gt; if it actually tried to redisplay, and &lt;code&gt;nil&lt;/code&gt; otherwise. A value of &lt;code&gt;t&lt;/code&gt; does not mean that redisplay proceeded to completion; it could have been preempted by newly arriving input.</source>
          <target state="translated">この関数は、実際に再表示しようとした場合は &lt;code&gt;t&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;nil&lt;/code&gt; を返します。 &lt;code&gt;t&lt;/code&gt; の値は、再表示が完了まで進んだことを意味するものではありません。新しく到着した入力によって横取りされた可能性があります。</target>
        </trans-unit>
        <trans-unit id="a2c86b439365c249c948c8efa2d07fe8ef2ae3a2" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;t&lt;/code&gt; if it succeeds in setting the SELinux context of &lt;var&gt;filename&lt;/var&gt;. It returns &lt;code&gt;nil&lt;/code&gt; if the context was not set (e.g., if SELinux is disabled, or if Emacs was compiled without SELinux support).</source>
          <target state="translated">この関数は、 &lt;var&gt;filename&lt;/var&gt; のSELinuxコンテキストの設定に成功した場合に &lt;code&gt;t&lt;/code&gt; を返します。コンテキストが設定されていない場合（たとえば、SELinuxが無効になっている場合、またはEmacsがSELinuxサポートなしでコンパイルされている場合）は &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8aa3622a93da6a8f83161ce66b0a13088cd542a2" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;t&lt;/code&gt; if it successfully sets the ACL of &lt;var&gt;filename&lt;/var&gt;, &lt;code&gt;nil&lt;/code&gt; otherwise.</source>
          <target state="translated">この関数は、 &lt;var&gt;filename&lt;/var&gt; のACLを正常に設定した場合は &lt;code&gt;t&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4adc69487e5f1fde8f02ec91f8b4f6899e76a34b" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;t&lt;/code&gt; if the last actual modification time and Emacs&amp;rsquo;s recorded modification time are the same, &lt;code&gt;nil&lt;/code&gt; otherwise. It also returns &lt;code&gt;t&lt;/code&gt; if the buffer has no recorded last modification time, that is if &lt;code&gt;visited-file-modtime&lt;/code&gt; would return zero.</source>
          <target state="translated">この関数は、最後の実際の変更時刻とEmacsの記録された変更時刻が同じ場合は &lt;code&gt;t&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;nil&lt;/code&gt; を返します。また、返さない &lt;code&gt;t&lt;/code&gt; バッファが何の最終更新時刻を記録している場合、その場合で &lt;code&gt;visited-file-modtime&lt;/code&gt; ゼロを返します。</target>
        </trans-unit>
        <trans-unit id="eb47fbb29639c623b56d142e3e79686425e3d118" translate="yes" xml:space="preserve">
          <source>The function returns a list of elements that look like this:</source>
          <target state="translated">この関数は、以下のような要素のリストを返します。</target>
        </trans-unit>
        <trans-unit id="b576d5d04a96dba46391f5334628078f6e91dee5" translate="yes" xml:space="preserve">
          <source>The function returns an existing buffer if there is one; otherwise it creates a new buffer and reads the file into it. When &lt;code&gt;find-file-noselect&lt;/code&gt; uses an existing buffer, it first verifies that the file has not changed since it was last visited or saved in that buffer. If the file has changed, this function asks the user whether to reread the changed file. If the user says &amp;lsquo;</source>
          <target state="translated">この関数は、既存のバッファーがある場合はそれを返します。それ以外の場合は、新しいバッファを作成し、ファイルをそのバッファに読み込みます。 &lt;code&gt;find-file-noselect&lt;/code&gt; ははそれがそのバッファ内の最後の訪問または保存されたため、ファイルが変更されていないこと、既存のバッファを使用し、その最初の検証。ファイルが変更された場合、この関数は変更されたファイルを再読み込みするかどうかをユーザーに尋ねます。ユーザーが「</target>
        </trans-unit>
        <trans-unit id="1501aaa047bf3d422b1edc8df28a63aa3d3d72eb" translate="yes" xml:space="preserve">
          <source>The function returns the new buffer position as its value.</source>
          <target state="translated">この関数は、新しいバッファ位置を値として返します。</target>
        </trans-unit>
        <trans-unit id="58c3348b08983e8a23db0b1d6c78b02a290ca8f9" translate="yes" xml:space="preserve">
          <source>The function returns the text of the &lt;var&gt;long-answer&lt;/var&gt; selected by the user, regardless of whether long or short answers were shown in the prompt and typed by the user.</source>
          <target state="translated">この関数は、プロンプトに長い回答が表示され、ユーザーが入力したかどうかに関係なく、ユーザーが選択した &lt;var&gt;long-answer&lt;/var&gt; テキストを返します。</target>
        </trans-unit>
        <trans-unit id="715f03109b9380bc908d0550c413f8b1448908f0" translate="yes" xml:space="preserve">
          <source>The function returns the value that &lt;var&gt;func&lt;/var&gt; returned.</source>
          <target state="translated">この関数は、 &lt;var&gt;func&lt;/var&gt; が返した値を返します。</target>
        </trans-unit>
        <trans-unit id="0e79ba4a0ec06385532067bc2dfd92eef04abf37" translate="yes" xml:space="preserve">
          <source>The function scans text for a change in the &lt;var&gt;prop&lt;/var&gt; property, then returns the position of the change. The scan goes forward from position &lt;var&gt;pos&lt;/var&gt; in the string or buffer &lt;var&gt;object&lt;/var&gt;. In other words, this function returns the position of the first character beyond &lt;var&gt;pos&lt;/var&gt; whose &lt;var&gt;prop&lt;/var&gt; property differs from that of the character just after &lt;var&gt;pos&lt;/var&gt;.</source>
          <target state="translated">この関数は、 &lt;var&gt;prop&lt;/var&gt; プロパティの変更についてテキストをスキャンし、変更の位置を返します。スキャンは、文字列またはバッファ &lt;var&gt;object&lt;/var&gt; 位置 &lt;var&gt;pos&lt;/var&gt; から進みます。つまり、この関数は、 &lt;var&gt;pos&lt;/var&gt; を超えた最初の文字の位置を返します。この文字の &lt;var&gt;prop&lt;/var&gt; プロパティは、 &lt;var&gt;pos&lt;/var&gt; の直後の文字の位置とは異なります。</target>
        </trans-unit>
        <trans-unit id="bcc76f6509469249f57ba4ca3b63e8ba3ae15e54" translate="yes" xml:space="preserve">
          <source>The function scans the text forward from position &lt;var&gt;pos&lt;/var&gt; in the string or buffer &lt;var&gt;object&lt;/var&gt; until it finds a change in some text property, then returns the position of the change. In other words, it returns the position of the first character beyond &lt;var&gt;pos&lt;/var&gt; whose properties are not identical to those of the character just after &lt;var&gt;pos&lt;/var&gt;.</source>
          <target state="translated">この関数は、文字列またはバッファ &lt;var&gt;object&lt;/var&gt; 位置 &lt;var&gt;pos&lt;/var&gt; から、テキストプロパティに変更が見つかるまでテキストを前方にスキャンし、変更の位置を返します。つまり、 &lt;var&gt;pos&lt;/var&gt; を超えた最初の文字の位置を返します。この文字のプロパティは、 &lt;var&gt;pos&lt;/var&gt; の直後の文字のプロパティと同じではありません。</target>
        </trans-unit>
        <trans-unit id="b2569b6d3f2a4920cd818025751b427d49a3a937" translate="yes" xml:space="preserve">
          <source>The function searches for &lt;var&gt;image&lt;/var&gt; first using &lt;code&gt;image-load-path&lt;/code&gt;, excluding</source>
          <target state="translated">機能探索 &lt;var&gt;image&lt;/var&gt; 最初用いて &lt;code&gt;image-load-path&lt;/code&gt; 除きます、</target>
        </trans-unit>
        <trans-unit id="f61dc72b5ae5c926752f9b2ea93c7b17926bb658" translate="yes" xml:space="preserve">
          <source>The function should report its choice by placing the region around it. A good choice is a range of text large enough to give proper results, but not too large so that refontification becomes slow. Typical values are &lt;code&gt;mark-defun&lt;/code&gt; for programming modes or &lt;code&gt;mark-paragraph&lt;/code&gt; for textual modes.</source>
          <target state="translated">関数は、その周囲の領域を配置することにより、その選択を報告する必要があります。適切な結果を得るのに十分な大きさのテキストの範囲ですが、再フォント化が遅くなるほど大きすぎないことをお勧めします。一般的な値は、プログラミングモードの場合は &lt;code&gt;mark-defun&lt;/code&gt; 、テキストモードの場合は &lt;code&gt;mark-paragraph&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e569deba575fd9eecea0636fcb5581d08c592fbf" translate="yes" xml:space="preserve">
          <source>The function specified by this option is called to automatically hide frames. This function is called with one argument&amp;mdash;a frame.</source>
          <target state="translated">このオプションで指定された関数は、フレームを自動的に非表示にするために呼び出されます。この関数は、1つの引数（フレーム）で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9e523dba464ace87982922281becd877253b4c57" translate="yes" xml:space="preserve">
          <source>The function specified here is called by &lt;code&gt;bury-buffer&lt;/code&gt; (see &lt;a href=&quot;buffer-list#Buffer-List&quot;&gt;Buffer List&lt;/a&gt;) when the selected window is dedicated and shows the buffer to bury. It is also called by &lt;code&gt;quit-restore-window&lt;/code&gt; (see above) when the frame of the window to quit has been specially created for displaying that window&amp;rsquo;s buffer and the buffer is not killed.</source>
          <target state="translated">ここで指定された関数は、選択されたウィンドウが専用であり、埋めるバッファーを表示するときに、&lt;a href=&quot;buffer-list#Buffer-List&quot;&gt;ベリー&lt;/a&gt; &lt;code&gt;bury-buffer&lt;/code&gt; （バッファーリストを参照）によって呼び出されます。また、 &lt;code&gt;quit-restore-window&lt;/code&gt; のフレームがそのウィンドウのバッファを表示するために特別に作成されており、バッファが強制終了されていない場合、quit-restore-window（上記を参照）によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4c5fe7b1d57c09eb96638f6d29a8d55ea70693dc" translate="yes" xml:space="preserve">
          <source>The function to call when the user invokes the button, which is passed the single argument &lt;var&gt;button&lt;/var&gt;. By default this is &lt;code&gt;ignore&lt;/code&gt;, which does nothing.</source>
          <target state="translated">ユーザーがボタンを呼び出したときに呼び出す関数。 &lt;var&gt;button&lt;/var&gt; は単一の引数ボタンが渡されます。デフォルトでは、これは &lt;code&gt;ignore&lt;/code&gt; 、何もしません。</target>
        </trans-unit>
        <trans-unit id="0d346489c44defc5f50064e457e61d13f6a78be1" translate="yes" xml:space="preserve">
          <source>The function to define a new widget is called &lt;code&gt;define-widget&lt;/code&gt;. The first argument is the symbol we want to make a new widget type. The second argument is a symbol representing an existing widget, the new widget is going to be defined in terms of difference from the existing widget. For the purpose of defining new customization types, the &lt;code&gt;lazy&lt;/code&gt; widget is perfect, because it accepts a &lt;code&gt;:type&lt;/code&gt; keyword argument with the same syntax as the keyword argument to &lt;code&gt;defcustom&lt;/code&gt; with the same name. The third argument is a documentation string for the new widget. You will be able to see that string with the</source>
          <target state="translated">新しいウィジェットを定義する関数は、 &lt;code&gt;define-widget&lt;/code&gt; と呼ばれます。最初の引数は、新しいウィジェットタイプを作成するシンボルです。 2番目の引数は、既存のウィジェットを表すシンボルです。新しいウィジェットは、既存のウィジェットとの違いの観点から定義されます。新しいカスタマイズタイプを定義するために、 &lt;code&gt;lazy&lt;/code&gt; ウィジェットは完璧です。同じ名前の &lt;code&gt;defcustom&lt;/code&gt; へのキーワード引数と同じ構文の &lt;code&gt;:type&lt;/code&gt; キーワード引数を受け入れるからです。 3番目の引数は、新しいウィジェットのドキュメント文字列です。あなたはその文字列をで見ることができるでしょう</target>
        </trans-unit>
        <trans-unit id="a3be86b3d84b881b3e6d6fe8ec9995afa24e5702" translate="yes" xml:space="preserve">
          <source>The function&amp;rsquo;s return value is the string typed by the user in the minibuffer. However, when called interactively or if the optional argument &lt;var&gt;convert&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, it converts any input color name into the corresponding RGB value string and instead returns that. This function requires a valid color specification to be input. Empty color names are allowed when &lt;var&gt;allow-empty&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt; and the user enters null input.</source>
          <target state="translated">関数の戻り値は、ユーザーがミニバッファーに入力した文字列です。ただし、インタラクティブに呼び出された場合、またはオプションの引数 &lt;var&gt;convert&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の場合は、入力された色の名前を対応するRGB値の文字列に変換し、代わりにそれを返します。この機能では、有効な色指定を入力する必要があります。 &lt;var&gt;allow-empty&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; 以外で、ユーザーがnull入力を入力した場合、空の色名が許可されます。</target>
        </trans-unit>
        <trans-unit id="24f9a1a492a75ddcf165b535a392f152caa63130" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;create-image&lt;/code&gt;, &lt;code&gt;defimage&lt;/code&gt; and &lt;code&gt;find-image&lt;/code&gt; provide convenient ways to create image descriptors.</source>
          <target state="translated">関数 &lt;code&gt;create-image&lt;/code&gt; 、 &lt;code&gt;defimage&lt;/code&gt; 、および &lt;code&gt;find-image&lt;/code&gt; は、画像記述子を作成するための便利な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="930041ed415a386650d1c27097780e324d3d97ff" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;default-value&lt;/code&gt; and &lt;code&gt;setq-default&lt;/code&gt; access and change a variable&amp;rsquo;s default value regardless of whether the current buffer has a buffer-local binding. For example, you could use &lt;code&gt;setq-default&lt;/code&gt; to change the default setting of &lt;code&gt;paragraph-start&lt;/code&gt; for most buffers; and this would work even when you are in a C or Lisp mode buffer that has a buffer-local value for this variable.</source>
          <target state="translated">関数 &lt;code&gt;default-value&lt;/code&gt; および &lt;code&gt;setq-default&lt;/code&gt; は、現在のバッファーにバッファーローカルバインディングがあるかどうかに関係なく、変数のデフォルト値にアクセスして変更します。たとえば、 &lt;code&gt;setq-default&lt;/code&gt; を使用して、ほとんどのバッファの &lt;code&gt;paragraph-start&lt;/code&gt; デフォルト設定を変更できます。これは、この変数のバッファローカル値を持つCまたはLispモードのバッファを使用している場合でも機能します。</target>
        </trans-unit>
        <trans-unit id="54fbaadcac6b546aa87b794bc4678dae8bd49959" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;event-modifiers&lt;/code&gt; and &lt;code&gt;event-basic-type&lt;/code&gt; are provided to get such information conveniently.</source>
          <target state="translated">このような情報を便利に取得するために、関数 &lt;code&gt;event-modifiers&lt;/code&gt; および &lt;code&gt;event-basic-type&lt;/code&gt; が提供されています。</target>
        </trans-unit>
        <trans-unit id="f14e4ed51e1588f4afeb3f2808a8e88fb021c9e4" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;ffloor&lt;/code&gt;, &lt;code&gt;fceiling&lt;/code&gt;, &lt;code&gt;fround&lt;/code&gt;, and &lt;code&gt;ftruncate&lt;/code&gt; take a floating-point argument and return a floating-point result whose value is a nearby integer. &lt;code&gt;ffloor&lt;/code&gt; returns the nearest integer below; &lt;code&gt;fceiling&lt;/code&gt;, the nearest integer above; &lt;code&gt;ftruncate&lt;/code&gt;, the nearest integer in the direction towards zero; &lt;code&gt;fround&lt;/code&gt;, the nearest integer.</source>
          <target state="translated">関数 &lt;code&gt;ffloor&lt;/code&gt; 、 &lt;code&gt;fceiling&lt;/code&gt; 、 &lt;code&gt;fround&lt;/code&gt; 、および &lt;code&gt;ftruncate&lt;/code&gt; は、浮動小数点引数を取り、値が近くの整数である浮動小数点の結果を返します。 &lt;code&gt;ffloor&lt;/code&gt; は、以下の最も近い整数を返します。 &lt;code&gt;fceiling&lt;/code&gt; 、上記の最も近い整数。 &lt;code&gt;ftruncate&lt;/code&gt; 、ゼロに向かう方向に最も近い整数。 &lt;code&gt;fround&lt;/code&gt; 、最も近い整数。</target>
        </trans-unit>
        <trans-unit id="2c140441fed92d7b6f61e961aac8a0aa69c39764" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;make-progress-reporter&lt;/code&gt; and &lt;code&gt;y-or-n-p&lt;/code&gt; don&amp;rsquo;t have to do anything special to activate the message log combination feature. It operates whenever two consecutive messages are logged that share a common prefix ending in &amp;lsquo;</source>
          <target state="translated">関数 &lt;code&gt;make-progress-reporter&lt;/code&gt; および &lt;code&gt;y-or-n-p&lt;/code&gt; は、メッセージログの組み合わせ機能をアクティブにするために特別なことをする必要はありません。'で終わる共通のプレフィックスを共有する2つの連続したメッセージがログに記録されるたびに動作します</target>
        </trans-unit>
        <trans-unit id="1da791873fb7d70506573ba68b6bb43c2ea88baa" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;match-data&lt;/code&gt; and &lt;code&gt;set-match-data&lt;/code&gt; read or write the entire match data, all at once.</source>
          <target state="translated">関数 &lt;code&gt;match-data&lt;/code&gt; および &lt;code&gt;set-match-data&lt;/code&gt; は、一致データ全体を一度に読み取りまたは書き込みます。</target>
        </trans-unit>
        <trans-unit id="9f3763eba26d0fcd98983ff84241c85f7df4ee68" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;mouse-position&lt;/code&gt; and &lt;code&gt;set-mouse-position&lt;/code&gt; give access to the current position of the mouse.</source>
          <target state="translated">関数 &lt;code&gt;mouse-position&lt;/code&gt; および &lt;code&gt;set-mouse-position&lt;/code&gt; を使用すると、マウスの現在の位置にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="f6d9b7af5bfb64034127dfa877a8ed48be4859ab" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;window-next-sibling&lt;/code&gt; and &lt;code&gt;window-prev-sibling&lt;/code&gt; should not be confused with the functions &lt;code&gt;next-window&lt;/code&gt; and &lt;code&gt;previous-window&lt;/code&gt;, which return the next and previous window, respectively, in the cyclic ordering of windows (see &lt;a href=&quot;cyclic-window-ordering#Cyclic-Window-Ordering&quot;&gt;Cyclic Window Ordering&lt;/a&gt;).</source>
          <target state="translated">関数 &lt;code&gt;window-next-sibling&lt;/code&gt; および &lt;code&gt;window-prev-sibling&lt;/code&gt; を、 &lt;code&gt;next-window&lt;/code&gt; の循環順序でそれぞれ次および前のウィンドウを返す関数next-windowおよび &lt;code&gt;previous-window&lt;/code&gt; と混同しないでください（&lt;a href=&quot;cyclic-window-ordering#Cyclic-Window-Ordering&quot;&gt;循環ウィンドウの順序を&lt;/a&gt;参照）。 。</target>
        </trans-unit>
        <trans-unit id="a4599c26cca67f961f777727cb6555459567d4a8" translate="yes" xml:space="preserve">
          <source>The functions &lt;code&gt;window-state-get&lt;/code&gt; and &lt;code&gt;window-state-put&lt;/code&gt; also allow to exchange the contents of two live windows. The following function does precisely that:</source>
          <target state="translated">関数 &lt;code&gt;window-state-get&lt;/code&gt; および &lt;code&gt;window-state-put&lt;/code&gt; を使用すると、2つのライブウィンドウのコンテンツを交換することもできます。次の関数は正確にそれを行います：</target>
        </trans-unit>
        <trans-unit id="9fce438f0ed03253c60350ad3e2d979328b783c3" translate="yes" xml:space="preserve">
          <source>The functions and variables described in this section evaluate forms, specify limits to the evaluation process, or record recently returned values. Loading a file also does evaluation (see &lt;a href=&quot;loading#Loading&quot;&gt;Loading&lt;/a&gt;).</source>
          <target state="translated">このセクションで説明する関数と変数は、フォームを評価したり、評価プロセスの制限を指定したり、最近返された値を記録したりします。ファイルをロードすると、評価も行われます（&lt;a href=&quot;loading#Loading&quot;&gt;ロードを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="8e4bd3a8ad416b6b274e61c0311ccc7aceb93329" translate="yes" xml:space="preserve">
          <source>The functions are called in the order listed, with one argument, a buffer position &lt;var&gt;pos&lt;/var&gt;. Collectively they should attempt to assign faces to the text in the current buffer starting at &lt;var&gt;pos&lt;/var&gt;.</source>
          <target state="translated">関数は、リストされている順序で呼び出されます。引数は1つ、バッファー位置 &lt;var&gt;pos&lt;/var&gt; です。集合的に、 &lt;var&gt;pos&lt;/var&gt; から始まる現在のバッファ内のテキストに顔を割り当てようとする必要があります。</target>
        </trans-unit>
        <trans-unit id="6521a8bc086f1a3f8aefcf593df4fa2328b88776" translate="yes" xml:space="preserve">
          <source>The functions below signal an error if &lt;var&gt;keymap&lt;/var&gt; is not a keymap, or if &lt;var&gt;key&lt;/var&gt; is not a string or vector representing a key sequence. You can use event types (symbols) as shorthand for events that are lists. The &lt;code&gt;kbd&lt;/code&gt; function (see &lt;a href=&quot;key-sequences#Key-Sequences&quot;&gt;Key Sequences&lt;/a&gt;) is a convenient way to specify the key sequence.</source>
          <target state="translated">以下の関数は、キー &lt;var&gt;keymap&lt;/var&gt; がキーマップでない場合、または &lt;var&gt;key&lt;/var&gt; がキーシーケンスを表す文字列またはベクトルでない場合にエラーを通知します。リストであるイベントの省略形として、イベントタイプ（シンボル）を使用できます。 &lt;code&gt;kbd&lt;/code&gt; 関数は、（参照&lt;a href=&quot;key-sequences#Key-Sequences&quot;&gt;キーシーケンスを&lt;/a&gt;）キーシーケンスを指定するための便利な方法です。</target>
        </trans-unit>
        <trans-unit id="78ab65059bf6060d13b0ce32e999f9aebe8f6925" translate="yes" xml:space="preserve">
          <source>The functions described in this section accept a fixed set of specification characters. The next section describes a function &lt;code&gt;format-spec&lt;/code&gt; which can accept custom specification characters, such as &amp;lsquo;</source>
          <target state="translated">このセクションで説明する関数は、指定文字の固定セットを受け入れます。次のセクションでは、'などのカスタム仕様文字を受け入れることができる関数 &lt;code&gt;format-spec&lt;/code&gt; について説明します。</target>
        </trans-unit>
        <trans-unit id="e86fa617815c4b094651f86026f3ee350a021eb8" translate="yes" xml:space="preserve">
          <source>The functions described in this section control how terminal colors are used by Emacs.</source>
          <target state="translated">このセクションで説明する関数は、Emacs でのターミナルカラーの使用方法を制御します。</target>
        </trans-unit>
        <trans-unit id="f169c28c5651085613c243ee2d7b8b6a97f3524f" translate="yes" xml:space="preserve">
          <source>The functions following next return the pixel widths and heights of the native, outer and inner frame and the text area (see &lt;a href=&quot;frame-layout#Frame-Layout&quot;&gt;Frame Layout&lt;/a&gt;) of a given frame. For a text terminal, the results are in characters rather than pixels.</source>
          <target state="translated">次に続く関数は、ネイティブ、外側、内側のフレームのピクセル幅と高さ、および特定のフレームのテキスト領域（&lt;a href=&quot;frame-layout#Frame-Layout&quot;&gt;フレームレイアウトを&lt;/a&gt;参照）を返します。テキスト端末の場合、結果はピクセルではなく文字になります。</target>
        </trans-unit>
        <trans-unit id="9720c55f16c083bb07299d34092580b6ec7aab89" translate="yes" xml:space="preserve">
          <source>The functions for parsing words described below use the syntax table and &lt;code&gt;char-script-table&lt;/code&gt; to decide whether a given character is part of a word. See &lt;a href=&quot;syntax-tables#Syntax-Tables&quot;&gt;Syntax Tables&lt;/a&gt;, and see &lt;a href=&quot;character-properties#Character-Properties&quot;&gt;Character Properties&lt;/a&gt;.</source>
          <target state="translated">以下で説明する単語を解析する関数は、構文テーブルと &lt;code&gt;char-script-table&lt;/code&gt; を使用して、特定の文字が単語の一部であるかどうかを判別します。参照&lt;a href=&quot;syntax-tables#Syntax-Tables&quot;&gt;構文テーブル&lt;/a&gt;、および参照&lt;a href=&quot;character-properties#Character-Properties&quot;&gt;文字のプロパティを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="84e553855a8b2ca8a57ae076b9aaef6d677d36c1" translate="yes" xml:space="preserve">
          <source>The functions in &lt;code&gt;quit-window-hook&lt;/code&gt; are run before doing anything else.</source>
          <target state="translated">&lt;code&gt;quit-window-hook&lt;/code&gt; の関数は、他のことをする前に実行されます。</target>
        </trans-unit>
        <trans-unit id="0e800d933c2fece3683cecc14ad7da075688816e" translate="yes" xml:space="preserve">
          <source>The functions in this list could be called either when the file is visited and Emacs wants to decode its contents, and/or when the file&amp;rsquo;s buffer is about to be saved and Emacs wants to determine how to encode its contents.</source>
          <target state="translated">このリストの関数は、ファイルにアクセスしてEmacsがその内容をデコードしたいとき、またはファイルのバッファーが保存されようとしていてEmacsがその内容をエンコードする方法を決定したいときに呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="669d58b77eada51f85ff6d10a60632f82115668b" translate="yes" xml:space="preserve">
          <source>The functions in this section are documented mainly because you can customize the naming conventions for backup files by redefining them. If you change one, you probably need to change the rest.</source>
          <target state="translated">このセクションの機能は、主にバックアップファイルの命名規則を再定義することでカスタマイズできるため、ドキュメント化されています。1つを変更した場合、おそらく残りの部分も変更する必要があるでしょう。</target>
        </trans-unit>
        <trans-unit id="ddf6614534160f658305998c350626e957a6f335" translate="yes" xml:space="preserve">
          <source>The functions in this section describe the basic capabilities of a particular display. Lisp programs can use them to adapt their behavior to what the display can do. For example, a program that ordinarily uses a popup menu could use the minibuffer if popup menus are not supported.</source>
          <target state="translated">この節の関数は、特定のディスプレイの基本的な機能を説明します。Lisp プログラムはこれらの関数を使用して、ディスプレイができることに合わせて動作を適応させることができます。例えば、通常はポップアップメニューを使用するプログラムは、ポップアップメニューがサポートされていない場合、ミニバッファを使用することができます。</target>
        </trans-unit>
        <trans-unit id="f00c70d2142808c1b8036e8e15d164e6ace38175" translate="yes" xml:space="preserve">
          <source>The functions in this section do not actually access files, so they can operate on file names that do not refer to an existing file or directory.</source>
          <target state="translated">このセクションの関数は実際にはファイルにアクセスしないので、既存のファイルやディレクトリを参照しないファイル名で操作できます。</target>
        </trans-unit>
        <trans-unit id="016907d83a21967cc3e08258bf37e7e359803f3f" translate="yes" xml:space="preserve">
          <source>The functions in this section rename, copy, delete, link, and set the modes (permissions) of files. Typically, they signal a &lt;code&gt;file-error&lt;/code&gt; error if they fail to perform their function, reporting the system-dependent error message that describes the reason for the failure. If they fail because a file is missing, they signal a &lt;code&gt;file-missing&lt;/code&gt; error instead.</source>
          <target state="translated">このセクションの機能は、ファイルの名前の変更、コピー、削除、リンク、およびモード（権限）の設定を行います。通常、機能の実行に失敗した場合は &lt;code&gt;file-error&lt;/code&gt; エラーを通知し、失敗の理由を説明するシステム依存のエラーメッセージを報告します。ファイルが欠落しているために失敗した場合は、代わりに &lt;code&gt;file-missing&lt;/code&gt; エラーを通知します。</target>
        </trans-unit>
        <trans-unit id="890b0146bfdda395f86d14be742c512118143bed" translate="yes" xml:space="preserve">
          <source>The functions in this section return unpredictable values unless otherwise stated.</source>
          <target state="translated">このセクションの関数は、特に指定がない限り、予測不可能な値を返します。</target>
        </trans-unit>
        <trans-unit id="f48a87c01a2f7dffcffdc543703f3903c8ef0749" translate="yes" xml:space="preserve">
          <source>The functions in this section test for numbers, or for a specific type of number. The functions &lt;code&gt;integerp&lt;/code&gt; and &lt;code&gt;floatp&lt;/code&gt; can take any type of Lisp object as argument (they would not be of much use otherwise), but the &lt;code&gt;zerop&lt;/code&gt; predicate requires a number as its argument. See also &lt;code&gt;integer-or-marker-p&lt;/code&gt; and &lt;code&gt;number-or-marker-p&lt;/code&gt;, in &lt;a href=&quot;predicates-on-markers#Predicates-on-Markers&quot;&gt;Predicates on Markers&lt;/a&gt;.</source>
          <target state="translated">このセクションの関数は、数値または特定のタイプの数値をテストします。関数 &lt;code&gt;integerp&lt;/code&gt; と &lt;code&gt;floatp&lt;/code&gt; は、引数として任意のタイプのLispオブジェクトを取ることができます（他の方法ではあまり役に立ちません）が、 &lt;code&gt;zerop&lt;/code&gt; 述語は引数として数値を必要とします。参照してください &lt;code&gt;integer-or-marker-p&lt;/code&gt; および &lt;code&gt;number-or-marker-p&lt;/code&gt; で、&lt;a href=&quot;predicates-on-markers#Predicates-on-Markers&quot;&gt;マーカー上の述語を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="64495a754cd6c704e9f9d907a29b2bd6ed3d60e3" translate="yes" xml:space="preserve">
          <source>The functions on this hook should generally return quickly, since they may be called very often (e.g., from &lt;code&gt;post-command-hook&lt;/code&gt;). Supplying a function for &lt;var&gt;collection&lt;/var&gt; is strongly recommended if generating the list of completions is an expensive operation. Emacs may internally call functions in &lt;code&gt;completion-at-point-functions&lt;/code&gt; many times, but care about the value of &lt;var&gt;collection&lt;/var&gt; for only some of these calls. By supplying a function for &lt;var&gt;collection&lt;/var&gt;, Emacs can defer generating completions until necessary. You can use &lt;code&gt;completion-table-dynamic&lt;/code&gt; to create a wrapper function:</source>
          <target state="translated">このフックの関数は、非常に頻繁に呼び出される可能性があるため（たとえば、 &lt;code&gt;post-command-hook&lt;/code&gt; から）、通常はすぐに戻るはずです。完了リストの生成がコストのかかる操作である場合は、 &lt;var&gt;collection&lt;/var&gt; 用の関数を提供することを強くお勧めします。 Emacsは、 &lt;code&gt;completion-at-point-functions&lt;/code&gt; で関数を内部的に何度も呼び出すことがありますが、これらの呼び出しの一部についてのみ &lt;var&gt;collection&lt;/var&gt; の値を気にします。 &lt;var&gt;collection&lt;/var&gt; ための関数を提供することにより、Emacsは必要になるまで完了の生成を延期することができます。あなたは使用することができます &lt;code&gt;completion-table-dynamic&lt;/code&gt; ラッパー関数を作成するには：</target>
        </trans-unit>
        <trans-unit id="2b93b057b358caf809f0e8e2015f2926ba7f4928" translate="yes" xml:space="preserve">
          <source>The functions should record the faces they assign by setting the &lt;code&gt;face&lt;/code&gt; property. They should also add a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;fontified&lt;/code&gt; property to all the text they have assigned faces to. That property tells redisplay that faces have been assigned to that text already.</source>
          <target state="translated">関数は、 &lt;code&gt;face&lt;/code&gt; プロパティを設定することにより、割り当てた面を記録する必要があります。また、顔を割り当てたすべてのテキストに、 &lt;code&gt;nil&lt;/code&gt; &lt;code&gt;fontified&lt;/code&gt; プロパティを追加する必要があります。そのプロパティは、顔がすでにそのテキストに割り当てられていることを再表示に伝えます。</target>
        </trans-unit>
        <trans-unit id="41a0cd34297ecae8f4a088b103fb22bcddfee322" translate="yes" xml:space="preserve">
          <source>The functions that modify the contents of buffers are described in &lt;a href=&quot;text#Text&quot;&gt;Text&lt;/a&gt;.</source>
          <target state="translated">バッファの内容を変更する関数については、&lt;a href=&quot;text#Text&quot;&gt;テキストで&lt;/a&gt;説明しています。</target>
        </trans-unit>
        <trans-unit id="f40f1de7f1f1333998ea5f91c2f809716617bf8b" translate="yes" xml:space="preserve">
          <source>The functions you use in these hooks should save and restore the match data if they do anything that uses regular expressions; otherwise, they will interfere in bizarre ways with the editing operations that call them.</source>
          <target state="translated">これらのフックで使用する関数は、正規表現を使用して何かを行う場合には、マッチデータを保存したり復元したりしなければなりません。</target>
        </trans-unit>
        <trans-unit id="9072c6223cc7e87e04b922ff1eeb8eb85826e5dd" translate="yes" xml:space="preserve">
          <source>The fundamental interface to input methods is through the variable &lt;code&gt;input-method-function&lt;/code&gt;. See &lt;a href=&quot;reading-one-event#Reading-One-Event&quot;&gt;Reading One Event&lt;/a&gt;, and &lt;a href=&quot;invoking-the-input-method#Invoking-the-Input-Method&quot;&gt;Invoking the Input Method&lt;/a&gt;.</source>
          <target state="translated">入力メソッドへの基本的なインターフェースは、変数 &lt;code&gt;input-method-function&lt;/code&gt; を介したものです。&lt;a href=&quot;reading-one-event#Reading-One-Event&quot;&gt;1つのイベントの読み取り&lt;/a&gt;、および&lt;a href=&quot;invoking-the-input-method#Invoking-the-Input-Method&quot;&gt;入力メソッドの呼び出しを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="864ab21bc83654287c4cd15a4aee02d9312d9750" translate="yes" xml:space="preserve">
          <source>The gap in the buffer.</source>
          <target state="translated">バッファの隙間。</target>
        </trans-unit>
        <trans-unit id="2874b04cef330c832d718bb6b17cf07f619d5cf4" translate="yes" xml:space="preserve">
          <source>The garbage collector described above is used to manage data visible from Lisp programs, as well as most of the data internally used by the Lisp interpreter. Sometimes it may be useful to allocate temporary internal objects using the C stack of the interpreter. This can help performance, as stack allocation is typically faster than using heap memory to allocate and the garbage collector to free. The downside is that using such objects after they are freed results in undefined behavior, so uses should be well thought out and carefully debugged by using the &lt;code&gt;GC_CHECK_MARKED_OBJECTS&lt;/code&gt; feature (see</source>
          <target state="translated">上記のガベージコレクタは、Lispプログラムから見えるデータ、およびLispインタプリタによって内部的に使用されるほとんどのデータを管理するために使用されます。インタープリターのCスタックを使用して一時的な内部オブジェクトを割り当てると便利な場合があります。スタックの割り当ては通常、ヒープメモリを使用して割り当て、ガベージコレクタを解放するよりも高速であるため、これはパフォーマンスに役立ちます。欠点は、解放された後にそのようなオブジェクトを使用すると未定義の動作が発生することです。そのため、 &lt;code&gt;GC_CHECK_MARKED_OBJECTS&lt;/code&gt; 機能を使用して、使用法を十分に検討し、慎重にデバッグする必要があります（を参照）。</target>
        </trans-unit>
        <trans-unit id="da7a69d66cc2d899f159c6785baa3eb8aa0ce902" translate="yes" xml:space="preserve">
          <source>The general sequence functions &lt;code&gt;copy-sequence&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; are often useful for objects known to be arrays. See &lt;a href=&quot;sequence-functions#Sequence-Functions&quot;&gt;Sequence Functions&lt;/a&gt;.</source>
          <target state="translated">一般的なシーケンス関数の &lt;code&gt;copy-sequence&lt;/code&gt; と &lt;code&gt;length&lt;/code&gt; は、配列として知られているオブジェクトに役立つことがよくあります。&lt;a href=&quot;sequence-functions#Sequence-Functions&quot;&gt;シーケンス関数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="74ab5893b0c67e70995b4afd47d2628e73c2db5f" translate="yes" xml:space="preserve">
          <source>The geometry of a frame depends on the toolkit that was used to build this instance of Emacs and the terminal that displays the frame. This chapter describes these dependencies and some of the functions to deal with them. Note that the &lt;var&gt;frame&lt;/var&gt; argument of all of these functions has to specify a live frame (see &lt;a href=&quot;deleting-frames#Deleting-Frames&quot;&gt;Deleting Frames&lt;/a&gt;). If omitted or &lt;code&gt;nil&lt;/code&gt;, it specifies the selected frame (see &lt;a href=&quot;input-focus#Input-Focus&quot;&gt;Input Focus&lt;/a&gt;).</source>
          <target state="translated">フレームの形状は、Emacsのこのインスタンスを構築するために使用されたツールキットとフレームを表示するターミナルによって異なります。この章では、これらの依存関係とそれらを処理するためのいくつかの関数について説明します。これらすべての関数の &lt;var&gt;frame&lt;/var&gt; 引数は、ライブフレームを指定する必要があることに注意してください（&lt;a href=&quot;deleting-frames#Deleting-Frames&quot;&gt;フレームの削除を&lt;/a&gt;参照）。省略または &lt;code&gt;nil&lt;/code&gt; の場合、選択したフレームを指定します（&lt;a href=&quot;input-focus#Input-Focus&quot;&gt;入力フォーカスを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="b1b29a18ef7eb3bc56262e0c7ebd91ab2315293b" translate="yes" xml:space="preserve">
          <source>The global break condition is the simplest way to find where in your code some event occurs, but it makes code run much more slowly. So you should reset the condition to &lt;code&gt;nil&lt;/code&gt; when not using it.</source>
          <target state="translated">グローバルブレーク条件は、コード内のどこでイベントが発生するかを見つける最も簡単な方法ですが、コードの実行速度が大幅に低下します。したがって、使用しないときは条件を &lt;code&gt;nil&lt;/code&gt; にリセットする必要があります。</target>
        </trans-unit>
        <trans-unit id="677591024d62617ead5c6d0b2e26233fd0d1c3c3" translate="yes" xml:space="preserve">
          <source>The global keymap used for the</source>
          <target state="translated">に使用されるグローバルキーマップは</target>
        </trans-unit>
        <trans-unit id="f34b8f5f97a899dc0235f5429a6468bfeef23c7c" translate="yes" xml:space="preserve">
          <source>The global value of a variable with buffer-local bindings is also called the &lt;em&gt;default&lt;/em&gt; value, because it is the value that is in effect whenever neither the current buffer nor the selected frame has its own binding for the variable.</source>
          <target state="translated">バッファローカルバインディングを持つ変数のグローバル値は、&lt;em&gt;デフォルト&lt;/em&gt;値とも呼ばれ&lt;em&gt;ます。&lt;/em&gt;これは、現在のバッファも選択されたフレームも変数に対する独自のバインディングを持たない&lt;em&gt;場合に有効な&lt;/em&gt;値であるためです。</target>
        </trans-unit>
        <trans-unit id="48d60332f6bc67502145a457cd0abab79aebcbd7" translate="yes" xml:space="preserve">
          <source>The glyph for indicating a character displayed as an octal character code (the default is &amp;lsquo;</source>
          <target state="translated">8進文字コードとして表示される文字を示すためのグリフ（デフォルトは '）</target>
        </trans-unit>
        <trans-unit id="4c3656eced1ce2d785af3b405b7e21744ff87d83" translate="yes" xml:space="preserve">
          <source>The glyph for indicating a control character (the default is &amp;lsquo;</source>
          <target state="translated">制御文字を示すためのグリフ（デフォルトは '</target>
        </trans-unit>
        <trans-unit id="69c90a66f7f1266d48dbdea6d60aeb7561e7e5b2" translate="yes" xml:space="preserve">
          <source>The glyph for the end of a continued line (the default is &amp;lsquo;</source>
          <target state="translated">継続行の終わりのグリフ（デフォルトは '</target>
        </trans-unit>
        <trans-unit id="306df86e6b80484f756d552795447d03999ab82a" translate="yes" xml:space="preserve">
          <source>The glyph for the end of a truncated screen line (the default for this is &amp;lsquo;</source>
          <target state="translated">切り捨てられた画面行の終わりのグリフ（これのデフォルトは 'です</target>
        </trans-unit>
        <trans-unit id="e37bea5e929c17d760a16f5f703fed0ee026e680" translate="yes" xml:space="preserve">
          <source>The glyph used to draw the border between side-by-side windows (the default is &amp;lsquo;</source>
          <target state="translated">横に並べたウィンドウ間の境界線を描画するために使用されるグリフ（デフォルトは '</target>
        </trans-unit>
        <trans-unit id="97cde47c6c4afb345587e69edf666417f9a205ca" translate="yes" xml:space="preserve">
          <source>The gradient created (and inserted into the SVG object) can later be used by all functions that create shapes.</source>
          <target state="translated">作成された(そしてSVGオブジェクトに挿入された)グラデーションは、後で図形を作成するすべての関数で使用することができます。</target>
        </trans-unit>
        <trans-unit id="0f64a77472c5aab1a530dafab8dc80afd47098d3" translate="yes" xml:space="preserve">
          <source>The grammar category &lt;code&gt;id&lt;/code&gt; has no right hand side: this does not mean that it can match only the empty string, since as mentioned any sequence of sexps can appear anywhere anyway.</source>
          <target state="translated">文法カテゴリ &lt;code&gt;id&lt;/code&gt; は右側がありません。前述のように、sexpのシーケンスはどこにでも表示される可能性があるため、これは空の文字列のみに一致することを意味するものではありません。</target>
        </trans-unit>
        <trans-unit id="731ba1b7288e05cf815c9c7aa4fd003aeedac70a" translate="yes" xml:space="preserve">
          <source>The greediness of some repetition forms can be controlled using the following constructs. However, it is usually better to use the explicit non-greedy forms above when such matching is required.</source>
          <target state="translated">いくつかの反復形の貪欲さは、以下の構文を使用して制御することができます。しかし、そのようなマッチングが必要な場合は、通常は上記の明示的な非貪欲形を使用した方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="25880d28e40fdac189e642330863b2e6c8e69129" translate="yes" xml:space="preserve">
          <source>The group ID of the effective user ID, a number.</source>
          <target state="translated">有効なユーザIDのグループID、数字。</target>
        </trans-unit>
        <trans-unit id="b554cee81a954e5281b1fceb788df4a63ce37792" translate="yes" xml:space="preserve">
          <source>The handler function must handle all of the above operations, and possibly others to be added in the future. It need not implement all these operations itself&amp;mdash;when it has nothing special to do for a certain operation, it can reinvoke the primitive, to handle the operation in the usual way. It should always reinvoke the primitive for an operation it does not recognize. Here&amp;rsquo;s one way to do this:</source>
          <target state="translated">ハンドラー関数は、上記のすべての操作、および将来追加される可能性のある他の操作を処理する必要があります。これらすべての操作自体を実装する必要はありません。特定の操作に対して特別なことを行う必要がない場合は、プリミティブを再度呼び出して、通常の方法で操作を処理できます。認識しない操作のプリミティブを常に再起動する必要があります。これを行う1つの方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8c0ade08243887c3328d4d5be685acc33d281985" translate="yes" xml:space="preserve">
          <source>The handler specifies condition name &lt;code&gt;arith-error&lt;/code&gt; so that it will handle only division-by-zero errors. Other kinds of errors will not be handled (by this &lt;code&gt;condition-case&lt;/code&gt;). Thus:</source>
          <target state="translated">ハンドラーは、ゼロ除算エラーのみを処理するように条件名 &lt;code&gt;arith-error&lt;/code&gt; を指定します。他の種類のエラーは処理されません（この &lt;code&gt;condition-case&lt;/code&gt; ）。したがって：</target>
        </trans-unit>
        <trans-unit id="5e2f99bb60355a4bbc279516a684257561edba5f" translate="yes" xml:space="preserve">
          <source>The header and footer strings.</source>
          <target state="translated">ヘッダーとフッターの文字列。</target>
        </trans-unit>
        <trans-unit id="e6adc3e0fab908b197122795c03e598c9a217b17" translate="yes" xml:space="preserve">
          <source>The height in pixels of the mode line and the header line, or -1 if not known.</source>
          <target state="translated">モード行とヘッダ行の高さをピクセル単位で指定します。</target>
        </trans-unit>
        <trans-unit id="9e8ea212a3dcb1bbe9f9c723144aa8ee19f65b61" translate="yes" xml:space="preserve">
          <source>The height is normally the length of &lt;var&gt;bits&lt;/var&gt;. However, you can specify a different height with non-&lt;code&gt;nil&lt;/code&gt;&lt;var&gt;height&lt;/var&gt;. The width is normally 8, but you can specify a different width with non-&lt;code&gt;nil&lt;/code&gt;&lt;var&gt;width&lt;/var&gt;. The width must be an integer between 1 and 16.</source>
          <target state="translated">高さは通常、 &lt;var&gt;bits&lt;/var&gt; の長さです。ただし、 &lt;code&gt;nil&lt;/code&gt; 以外の &lt;var&gt;height&lt;/var&gt; さで別の高さを指定できます。幅は通常8ですが、 &lt;code&gt;nil&lt;/code&gt; 以外の &lt;var&gt;width&lt;/var&gt; 別の幅を指定できます。幅は1から16までの整数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="52397327e47c6d0da26d3462e7bc63626661f579" translate="yes" xml:space="preserve">
          <source>The height of horizontal scroll bars, in pixels, or &lt;code&gt;nil&lt;/code&gt; meaning to use the default height.</source>
          <target state="translated">水平スクロールバーの高さ（ピクセル単位）、またはデフォルトの高さを使用することを意味する &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="085e0e5d1f8cb968ce655bf2b24ca248fa12970b" translate="yes" xml:space="preserve">
          <source>The height of the default face must be specified using an integer; floating point and function values are not allowed.</source>
          <target state="translated">デフォルト面の高さは整数で指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d18f875e6e2637cf49c5905a5f35264c51a521b7" translate="yes" xml:space="preserve">
          <source>The height of the font in pixels.</source>
          <target state="translated">フォントの高さをピクセル単位で指定します。</target>
        </trans-unit>
        <trans-unit id="bcc4b1c7f0f04cad27e2f37687ce77b17aac9cc1" translate="yes" xml:space="preserve">
          <source>The height of the font. In the simplest case, this is an integer in units of 1/10 point.</source>
          <target state="translated">フォントの高さです。最も単純な場合、これは1/10ポイント単位の整数です。</target>
        </trans-unit>
        <trans-unit id="3ed16f18e3452e0d7fb567a3976b1f69a672c4c7" translate="yes" xml:space="preserve">
          <source>The height of the line contents is the maximum height of any character or image on that display line, including the final newline if there is one. (A display line that is continued doesn&amp;rsquo;t include a final newline.) That is the default line height, if you do nothing to specify a greater height. (In the most common case, this equals the height of the corresponding frame&amp;rsquo;s default font, see &lt;a href=&quot;frame-font#Frame-Font&quot;&gt;Frame Font&lt;/a&gt;.)</source>
          <target state="translated">行の内容の高さは、その表示行の文字または画像の最大の高さです。最後の改行がある場合はそれも含まれます。（継続される表示行には、最後の改行は含まれません。）これは、より高い高さを指定するために何もしなかった場合のデフォルトの行の高さです。（最も一般的なケースでは、これは対応するフレームのデフォルトフォントの高さと同じです。&lt;a href=&quot;frame-font#Frame-Font&quot;&gt;フレームフォントを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="fa5537f62fa0722eb0e8bcb5ec344261bd62fa37" translate="yes" xml:space="preserve">
          <source>The help character is special after prefix keys, too. If it has no binding as a subcommand of the prefix key, it runs &lt;code&gt;describe-prefix-bindings&lt;/code&gt;, which displays a list of all the subcommands of the prefix key.</source>
          <target state="translated">ヘルプ文字は、プレフィックスキーの後にも特別です。プレフィックスキーのサブコマンドとしてバインディングがない場合は、 &lt;code&gt;describe-prefix-bindings&lt;/code&gt; を実行します。これにより、プレフィックスキーのすべてのサブコマンドのリストが表示されます。</target>
        </trans-unit>
        <trans-unit id="cf1897bec9624ad141a9f5fdb49dabce4abf14b2" translate="yes" xml:space="preserve">
          <source>The high-level completion functions &lt;code&gt;read-file-name&lt;/code&gt;, &lt;code&gt;read-directory-name&lt;/code&gt;, and &lt;code&gt;read-shell-command&lt;/code&gt; are designed to read file names, directory names, and shell commands, respectively. They provide special features, including automatic insertion of the default directory.</source>
          <target state="translated">高レベルの補完関数 &lt;code&gt;read-file-name&lt;/code&gt; 、 &lt;code&gt;read-directory-name&lt;/code&gt; 、および &lt;code&gt;read-shell-command&lt;/code&gt; は、それぞれファイル名、ディレクトリ名、およびシェルコマンドを読み取るように設計されています。デフォルトディレクトリの自動挿入など、特別な機能を提供します。</target>
        </trans-unit>
        <trans-unit id="fc37323f324eaba3ae4eff83c852720c416eda92" translate="yes" xml:space="preserve">
          <source>The homepage for GNU Emacs is at &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;https://www.gnu.org/software/emacs/&lt;/a&gt;. For information on using Emacs, refer to the &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/emacs.html&quot;&gt;Emacs Manual&lt;/a&gt;. To view this manual in other formats, click &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/elisp.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">GNUEmacsのホームページは&lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;https://www.gnu.org/software/emacs/にあります&lt;/a&gt;。Emacsの使用については、&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/emacs.html&quot;&gt;Emacsのマニュアルを&lt;/a&gt;参照してください。このマニュアルを他の形式で表示するには、ここをクリックして&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/elisp.html&quot;&gt;ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b911bf982537bd609db0a1e22baeb6c2bb97081a" translate="yes" xml:space="preserve">
          <source>The hook functions are called both before and after each change. If the functions save the information they receive, and compare notes between calls, they can determine exactly what change has been made in the buffer text.</source>
          <target state="translated">フック関数は、各変更の前と後の両方で呼び出されます。関数が受け取った情報を保存し、呼び出しの間にメモを比較すれば、バッファテキストにどのような変更が加えられたかを正確に判断することができます。</target>
        </trans-unit>
        <trans-unit id="22eea4ac020189ebcc5a0b2b55d9b0917f8943a9" translate="yes" xml:space="preserve">
          <source>The hook functions in &lt;code&gt;write-file-functions&lt;/code&gt; are also responsible for encoding the data (if desired): they must choose a suitable coding system and end-of-line conversion (see &lt;a href=&quot;lisp-and-coding-systems#Lisp-and-Coding-Systems&quot;&gt;Lisp and Coding Systems&lt;/a&gt;), perform the encoding (see &lt;a href=&quot;explicit-encoding#Explicit-Encoding&quot;&gt;Explicit Encoding&lt;/a&gt;), and set &lt;code&gt;last-coding-system-used&lt;/code&gt; to the coding system that was used (see &lt;a href=&quot;encoding-and-i_002fo#Encoding-and-I_002fO&quot;&gt;Encoding and I/O&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;write-file-functions&lt;/code&gt; のフック関数は、データのエンコードも担当します（必要な場合）。適切なコーディングシステムと行末変換を選択し（&lt;a href=&quot;lisp-and-coding-systems#Lisp-and-Coding-Systems&quot;&gt;Lispおよびコーディングシステムを&lt;/a&gt;参照）、エンコードを実行する必要があります（&lt;a href=&quot;explicit-encoding#Explicit-Encoding&quot;&gt;明示的なエンコードを&lt;/a&gt;参照）。）、 &lt;code&gt;last-coding-system-used&lt;/code&gt; を使用されたコーディングシステムに設定します（&lt;a href=&quot;encoding-and-i_002fo#Encoding-and-I_002fO&quot;&gt;エンコーディングとI / Oを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a83d039cd150de7d3779ef3fed719d6f59169d0d" translate="yes" xml:space="preserve">
          <source>The hook variable&amp;rsquo;s value can also be a single function&amp;mdash;either a lambda expression or a symbol with a function definition&amp;mdash;which &lt;code&gt;run-hooks&lt;/code&gt; calls. But this usage is obsolete.</source>
          <target state="translated">フック変数の値は、 &lt;code&gt;run-hooks&lt;/code&gt; 呼び出しを実行する単一の関数（ラムダ式、または関数定義を持つシンボル）にすることもできます。しかし、この使用法は廃止されました。</target>
        </trans-unit>
        <trans-unit id="917207ef55ed03cab5a1b55d69aa1063946c90b6" translate="yes" xml:space="preserve">
          <source>The horizontal scroll position is measured in units of the normal character width, which is the width of space in the default font. Thus, if the value is 5, that means the window contents are scrolled left by 5 times the normal character width. How many characters actually disappear off to the left depends on their width, and could vary from line to line.</source>
          <target state="translated">水平スクロール位置は、デフォルトフォントのスペースの幅である通常の文字幅の単位で測定されます。したがって、値が 5 の場合は、ウィンドウの内容が通常の文字幅の 5 倍左にスクロールされることを意味します。実際に何文字が左に消えてしまうかは、その幅に依存しており、行ごとに異なる可能性があります。</target>
        </trans-unit>
        <trans-unit id="2c1208df201cdc168e0e1bc7a6b67590a4982002" translate="yes" xml:space="preserve">
          <source>The hour of the day, as an integer between 0 and 23.</source>
          <target state="translated">1日の時間を0から23までの整数で表します。</target>
        </trans-unit>
        <trans-unit id="ff593a5384b2422b04132851d0695820fe2b360f" translate="yes" xml:space="preserve">
          <source>The hyper modifier.</source>
          <target state="translated">ハイパー修飾子です。</target>
        </trans-unit>
        <trans-unit id="49029170f2d47fd9fece1b8af2f1320f67032a13" translate="yes" xml:space="preserve">
          <source>The idea of these variables is that you set them once and for all to the defaults you want, and then do not change them again. To specify a particular coding system for a particular operation in a Lisp program, don&amp;rsquo;t change these variables; instead, override them using &lt;code&gt;coding-system-for-read&lt;/code&gt; and &lt;code&gt;coding-system-for-write&lt;/code&gt; (see &lt;a href=&quot;specifying-coding-systems#Specifying-Coding-Systems&quot;&gt;Specifying Coding Systems&lt;/a&gt;).</source>
          <target state="translated">これらの変数の考え方は、必要なデフォルトに一度だけ設定し、その後は変更しないというものです。Lispプログラムの特定の操作に対して特定のコーディングシステムを指定するには、これらの変数を変更しないでください。代わりに、 &lt;code&gt;coding-system-for-read&lt;/code&gt; および &lt;code&gt;coding-system-for-write&lt;/code&gt; を使用してそれらをオーバーライドします（&lt;a href=&quot;specifying-coding-systems#Specifying-Coding-Systems&quot;&gt;コーディングシステムの指定を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="9bcbe3e1bcf694fbe61bf24fe3189fb33ab88208" translate="yes" xml:space="preserve">
          <source>The identified of the shape.</source>
          <target state="translated">形状の識別。</target>
        </trans-unit>
        <trans-unit id="fcfecb9412ebffc1d18084e74054383228e6b207" translate="yes" xml:space="preserve">
          <source>The image is looked for in &lt;code&gt;image-load-path&lt;/code&gt;.</source>
          <target state="translated">画像は &lt;code&gt;image-load-path&lt;/code&gt; で検索されます。</target>
        </trans-unit>
        <trans-unit id="8ea3cffbf70cec22855c36d36842437f817a7f5e" translate="yes" xml:space="preserve">
          <source>The image type. See &lt;a href=&quot;image-formats#Image-Formats&quot;&gt;Image Formats&lt;/a&gt;. Every image descriptor must include this property.</source>
          <target state="translated">画像の種類。&lt;a href=&quot;image-formats#Image-Formats&quot;&gt;画像形式を&lt;/a&gt;参照してください。すべての画像記述子には、このプロパティを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="caab580d160dc64b9167916da831f3bf977e17a4" translate="yes" xml:space="preserve">
          <source>The indentation functions are used to examine, move to, and change whitespace that is at the beginning of a line. Some of the functions can also change whitespace elsewhere on a line. Columns and indentation count from zero at the left margin.</source>
          <target state="translated">インデント関数は、行頭の空白を調べたり、移動したり、変更したりするために使用されます。関数の中には、行の他の場所にある空白を変更できるものもあります。列とインデントは、左マージンのゼロから数えます。</target>
        </trans-unit>
        <trans-unit id="6cabff1a9cf356561844c4900ceadda4f5c31acc" translate="yes" xml:space="preserve">
          <source>The index alist can have three types of elements. Simple elements look like this:</source>
          <target state="translated">インデックスアリストは3種類の要素を持つことができます。単純な要素は次のようになります。</target>
        </trans-unit>
        <trans-unit id="7a2782dc40deb6629a41f6379bf7a7210bdb0f97" translate="yes" xml:space="preserve">
          <source>The index of the first character of the string is 0, the index of the second character is 1, and so on.</source>
          <target state="translated">文字列の1文字目のインデックスは0、2文字目のインデックスは1、というように、文字列の1文字目のインデックスは0、2文字目のインデックスは1、というようになっています。</target>
        </trans-unit>
        <trans-unit id="60e96bc26c021609e7a6560eb3d5be49e8d331cc" translate="yes" xml:space="preserve">
          <source>The initial threshold value is &lt;code&gt;GC_DEFAULT_THRESHOLD&lt;/code&gt;, defined in</source>
          <target state="translated">初期しきい値は &lt;code&gt;GC_DEFAULT_THRESHOLD&lt;/code&gt; であり、で定義されています。</target>
        </trans-unit>
        <trans-unit id="9fd1b2d43c07a66938f2a442d8dcfd842c600cd8" translate="yes" xml:space="preserve">
          <source>The initial value must be &lt;code&gt;nil&lt;/code&gt; except in cases where (1) the mode is preloaded in Emacs, or (2) it is painless for loading to enable the mode even though the user did not request it. For instance, if the mode has no effect unless something else is enabled, and will always be loaded by that time, enabling it by default is harmless. But these are unusual circumstances. Normally, the initial value must be &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">初期値は、（1）モードがEmacsにプリロードされている場合、または（2）ユーザーが要求しなくてもモードを有効にするためにロードするのが簡単な場合を除いて、 &lt;code&gt;nil&lt;/code&gt; でなければなりません。たとえば、他の何かが有効にされない限りモードが効果がなく、その時間までに常にロードされる場合、デフォルトで有効にしても無害です。しかし、これらは異常な状況です。通常、初期値は &lt;code&gt;nil&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="b5ea75158d88e76423df4c71cfe451830055f3b4" translate="yes" xml:space="preserve">
          <source>The initialization function should perform whatever initialization is required for the module. In addition, it can perform the following tasks:</source>
          <target state="translated">初期化関数は、モジュールに必要なすべての初期化を実行しなければなりません。さらに、以下のタスクを実行することができます。</target>
        </trans-unit>
        <trans-unit id="2048f16a290b5e24dd2783eb5cab68b8c1d9c150" translate="yes" xml:space="preserve">
          <source>The input characters are generated by &lt;var&gt;function&lt;/var&gt;, which must support two kinds of calls:</source>
          <target state="translated">入力文字は &lt;var&gt;function&lt;/var&gt; によって生成されます。関数は次の2種類の呼び出しをサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="d16b3143ae14de892229a66c0119a9b13c4bbc54" translate="yes" xml:space="preserve">
          <source>The input characters are read from &lt;var&gt;buffer&lt;/var&gt;, starting with the character directly after point. Point advances as characters are read.</source>
          <target state="translated">入力文字は、ポイントの直後の文字から始めて、 &lt;var&gt;buffer&lt;/var&gt; から読み取られます。文字を読むとポイントが進みます。</target>
        </trans-unit>
        <trans-unit id="b99b6f486be0660a0034322da91996c0f39b3329" translate="yes" xml:space="preserve">
          <source>The input characters are read from the buffer that &lt;var&gt;marker&lt;/var&gt; is in, starting with the character directly after the marker. The marker position advances as characters are read. The value of point in the buffer has no effect when the stream is a marker.</source>
          <target state="translated">入力文字は、 &lt;var&gt;marker&lt;/var&gt; が入っているバッファーから、マーカーの直後の文字から読み取られます。文字が読み取られると、マーカーの位置が進みます。ストリームがマーカーの場合、バッファ内のポイントの値は効果がありません。</target>
        </trans-unit>
        <trans-unit id="d8b5e8488b3fb00ae952a888effb061b3b3f5bf0" translate="yes" xml:space="preserve">
          <source>The input characters are taken from &lt;var&gt;string&lt;/var&gt;, starting at the first character in the string and using as many characters as required.</source>
          <target state="translated">入力文字は &lt;var&gt;string&lt;/var&gt; から取得され、文字列の最初の文字から始まり、必要な数の文字を使用します。</target>
        </trans-unit>
        <trans-unit id="30d1dd399ecaac7e239b3eddf29871a33b0d6701" translate="yes" xml:space="preserve">
          <source>The input method function is not called when reading the second and subsequent events of a key sequence. Thus, these characters are not subject to input method processing. The input method function should test the values of &lt;code&gt;overriding-local-map&lt;/code&gt; and &lt;code&gt;overriding-terminal-local-map&lt;/code&gt;; if either of these variables is non-&lt;code&gt;nil&lt;/code&gt;, the input method should put its argument into a list and return that list with no further processing.</source>
          <target state="translated">キーシーケンスの2番目以降のイベントを読み取る場合、入力メソッド関数は呼び出されません。したがって、これらの文字は入力方式の処理の対象にはなりません。 inputメソッド関数は、 &lt;code&gt;overriding-local-map&lt;/code&gt; と &lt;code&gt;overriding-terminal-local-map&lt;/code&gt; の値をテストする必要があります。これらの変数のいずれかが &lt;code&gt;nil&lt;/code&gt; 以外の場合、入力メソッドはその引数をリストに入れ、それ以上処理せずにそのリストを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="f8c4abba5f74f931bc34d6747a6123acafdf7779" translate="yes" xml:space="preserve">
          <source>The input method function should return a list of events which should be used as input. (If the list is &lt;code&gt;nil&lt;/code&gt;, that means there is no input, so &lt;code&gt;read-event&lt;/code&gt; waits for another event.) These events are processed before the events in &lt;code&gt;unread-command-events&lt;/code&gt; (see &lt;a href=&quot;event-input-misc#Event-Input-Misc&quot;&gt;Event Input Misc&lt;/a&gt;). Events returned by the input method function are not passed to the input method function again, even if they are printing characters with no modifier bits.</source>
          <target state="translated">inputメソッド関数は、入力として使用する必要があるイベントのリストを返す必要があります。（リストが &lt;code&gt;nil&lt;/code&gt; の場合、入力がないことを意味するため、 &lt;code&gt;read-event&lt;/code&gt; は別のイベントを待機します。）これらのイベントは、 &lt;code&gt;unread-command-events&lt;/code&gt; のイベントの前に処理されます（&lt;a href=&quot;event-input-misc#Event-Input-Misc&quot;&gt;イベント入力その他を&lt;/a&gt;参照）。入力メソッド関数によって返されたイベントは、修飾子ビットのない文字を出力している場合でも、入力メソッド関数に再度渡されることはありません。</target>
        </trans-unit>
        <trans-unit id="539f747cb977830607d3cb710459ac2c2e5fa6fa" translate="yes" xml:space="preserve">
          <source>The inputs to GnuTLS cryptographic functions can be specified in several ways, both as primitive Emacs Lisp types or as lists.</source>
          <target state="translated">GnuTLS 暗号関数の入力は、プリミティブな Emacs Lisp 型として、またはリストとして、いくつかの方法で指定できます。</target>
        </trans-unit>
        <trans-unit id="a7b8358b8f766540c234e4f8211a9601148d23fb" translate="yes" xml:space="preserve">
          <source>The inserted whitespace characters inherit text properties from the surrounding text (usually, from the preceding text only). See &lt;a href=&quot;sticky-properties#Sticky-Properties&quot;&gt;Sticky Properties&lt;/a&gt;.</source>
          <target state="translated">挿入された空白文字は、周囲のテキストから（通常は前のテキストからのみ）テキストプロパティを継承します。&lt;a href=&quot;sticky-properties#Sticky-Properties&quot;&gt;スティッキープロパティを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="19fcbfab08e4368504efbf1b8e28b4430ed27384" translate="yes" xml:space="preserve">
          <source>The insertion functions convert text from unibyte to multibyte in order to insert in a multibyte buffer, and vice versa&amp;mdash;if the text comes from a string or from a buffer. However, they do not convert unibyte character codes 128 through 255 to multibyte characters, not even if the current buffer is a multibyte buffer. See &lt;a href=&quot;converting-representations#Converting-Representations&quot;&gt;Converting Representations&lt;/a&gt;.</source>
          <target state="translated">挿入関数は、テキストが文字列またはバッファからのものである場合、マルチバイトバッファに挿入するために、テキストをユニバイトからマルチバイトに、またはその逆に変換します。ただし、現在のバッファがマルチバイトバッファであっても、ユニバイト文字コード128〜255をマルチバイト文字に変換しません。&lt;a href=&quot;converting-representations#Converting-Representations&quot;&gt;表現の変換を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9edd2288269cf326b182d9af537f1760ef9f7146" translate="yes" xml:space="preserve">
          <source>The integer -1 looks like this:</source>
          <target state="translated">整数-1はこのようになります。</target>
        </trans-unit>
        <trans-unit id="2f33429d3899a8b5708f577a6767b2323bf9589e" translate="yes" xml:space="preserve">
          <source>The integer number of 365-day years.</source>
          <target state="translated">365日の年の整数値。</target>
        </trans-unit>
        <trans-unit id="e0d849236066efb1e790a734829181ed8c3e9ff5" translate="yes" xml:space="preserve">
          <source>The integer number of days.</source>
          <target state="translated">日数の整数値です。</target>
        </trans-unit>
        <trans-unit id="5cf7a7da13ec55fcd8e83c9522a19ff613f26c8a" translate="yes" xml:space="preserve">
          <source>The integer number of hours.</source>
          <target state="translated">整数の時間数です。</target>
        </trans-unit>
        <trans-unit id="bb774face5c62942103b0f3a113c848cd3042edd" translate="yes" xml:space="preserve">
          <source>The integer number of minutes.</source>
          <target state="translated">分の整数値です。</target>
        </trans-unit>
        <trans-unit id="9cbc76323d9ab5bd63ae8f77ccce189f3b0df5e3" translate="yes" xml:space="preserve">
          <source>The integer number of seconds.</source>
          <target state="translated">秒数の整数値です。</target>
        </trans-unit>
        <trans-unit id="d26badfedc58bbcef7881a113b18e385a9856fff" translate="yes" xml:space="preserve">
          <source>The intent of &lt;code&gt;key-translation-map&lt;/code&gt; is for users to map one character set to another, including ordinary characters normally bound to &lt;code&gt;self-insert-command&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key-translation-map&lt;/code&gt; の目的は、通常 &lt;code&gt;self-insert-command&lt;/code&gt; にバインドされている通常の文字を含め、ユーザーが1つの文字セットを別の文字セットにマップすることです。</target>
        </trans-unit>
        <trans-unit id="20d665cdf72ab80e27c444ceb9eb5618fb5457fb" translate="yes" xml:space="preserve">
          <source>The interactive declaration is a list of the form &lt;code&gt;(interactive
&lt;var&gt;code-string&lt;/var&gt;)&lt;/code&gt;. This declares how to provide arguments if the function is used interactively. Functions with this declaration are called &lt;em&gt;commands&lt;/em&gt;; they can be called using</source>
          <target state="translated">対話型宣言は、形式 &lt;code&gt;(interactive &lt;var&gt;code-string&lt;/var&gt;)&lt;/code&gt; リストです。これは、関数がインタラクティブに使用される場合に引数を提供する方法を宣言します。この宣言を持つ関数は&lt;em&gt;コマンド&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。それらはを使用して呼び出すことができます</target>
        </trans-unit>
        <trans-unit id="ae08d2dbfcabdf279e14b8cbd62c32467dc9f2d0" translate="yes" xml:space="preserve">
          <source>The interactive spec (if any). This can be a string or a Lisp expression. It is &lt;code&gt;nil&lt;/code&gt; for a function that isn&amp;rsquo;t interactive.</source>
          <target state="translated">インタラクティブ仕様（ある場合）。これは、文字列またはLisp式にすることができます。インタラクティブでない関数の場合は &lt;code&gt;nil&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2978362f714e301a7d1292d0bf49abf86d8926e4" translate="yes" xml:space="preserve">
          <source>The internal border is a border drawn by Emacs around the inner frame (see below). Its width is specified by the &lt;code&gt;internal-border-width&lt;/code&gt; frame parameter (see &lt;a href=&quot;layout-parameters#Layout-Parameters&quot;&gt;Layout Parameters&lt;/a&gt;). Its color is specified by the background of the &lt;code&gt;internal-border&lt;/code&gt; face.</source>
          <target state="translated">内部境界線は、Emacsによって内部フレームの周りに描かれた境界線です（以下を参照）。その幅は、 &lt;code&gt;internal-border-width&lt;/code&gt; フレームパラメーターによって指定されます（&lt;a href=&quot;layout-parameters#Layout-Parameters&quot;&gt;レイアウトパラメーターを&lt;/a&gt;参照）。その色は、 &lt;code&gt;internal-border&lt;/code&gt; 面の背景によって指定されます。</target>
        </trans-unit>
        <trans-unit id="a6cb4b170f13ea9783523a2b390523918e77d98d" translate="yes" xml:space="preserve">
          <source>The interval tree which records the text properties of this buffer.</source>
          <target state="translated">このバッファのテキストプロパティを記録するインターバルツリー。</target>
        </trans-unit>
        <trans-unit id="2b193cdd686eaf4559317677f35332fe025a0bac" translate="yes" xml:space="preserve">
          <source>The job of &lt;code&gt;make-temp-file&lt;/code&gt; is to prevent two different users or two different jobs from trying to use the exact same file name.</source>
          <target state="translated">仕事 &lt;code&gt;make-temp-file&lt;/code&gt; まったく同じファイル名を使用しようとしているから、2人の異なるユーザーまたは2つの異なるジョブを防ぐためです。</target>
        </trans-unit>
        <trans-unit id="7d566fc76f2e6f4607003117618cbc1ab1b17dde" translate="yes" xml:space="preserve">
          <source>The key bindings are not commands, just symbols that are meaningful to the functions that use this map.</source>
          <target state="translated">キーバインドはコマンドではなく、このマップを使用する関数にとって意味のある記号にすぎません。</target>
        </trans-unit>
        <trans-unit id="9bf1df2bbd01f543a3f0da8d68e7df8f3b5f2761" translate="yes" xml:space="preserve">
          <source>The key definition and lookup functions accept an alternate syntax for event types in a key sequence that is a vector: you can use a list containing modifier names plus one base event (a character or function key name). For example, &lt;code&gt;(control ?a)&lt;/code&gt; is equivalent to &lt;code&gt;?\C-a&lt;/code&gt; and &lt;code&gt;(hyper control left)&lt;/code&gt; is equivalent to &lt;code&gt;C-H-left&lt;/code&gt;. One advantage of such lists is that the precise numeric codes for the modifier bits don&amp;rsquo;t appear in compiled files.</source>
          <target state="translated">キー定義およびルックアップ関数は、ベクトルであるキーシーケンス内のイベントタイプの代替構文を受け入れます。修飾子名と1つの基本イベント（文字または関数のキー名）を含むリストを使用できます。たとえば、 &lt;code&gt;(control ?a)&lt;/code&gt; は &lt;code&gt;?\C-a&lt;/code&gt; と同等であり、 &lt;code&gt;(hyper control left)&lt;/code&gt; は &lt;code&gt;C-H-left&lt;/code&gt; と同等です。このようなリストの利点の1つは、修飾子ビットの正確な数値コードがコンパイル済みファイルに表示されないことです。</target>
        </trans-unit>
        <trans-unit id="628ce08bf218a05f5cf92a428c7d664ca579e0cc" translate="yes" xml:space="preserve">
          <source>The key sequence is translated into a command through the currently active keymaps. See &lt;a href=&quot;key-lookup#Key-Lookup&quot;&gt;Key Lookup&lt;/a&gt;, for information on how this is done. The result should be a keyboard macro or an interactively callable function. If the key is</source>
          <target state="translated">キーシーケンスは、現在アクティブなキーマップを介してコマンドに変換されます。これがどのように行われるかについては、&lt;a href=&quot;key-lookup#Key-Lookup&quot;&gt;キールックアップを&lt;/a&gt;参照してください。結果は、キーボードマクロまたはインタラクティブに呼び出し可能な関数になります。キーが</target>
        </trans-unit>
        <trans-unit id="569f93f6d66684562d4fe017a80dce902677f074" translate="yes" xml:space="preserve">
          <source>The key sequences bound in a major mode keymap should usually start with</source>
          <target state="translated">メジャーモードのキーマップにバインドされているキーシーケンスは、通常は</target>
        </trans-unit>
        <trans-unit id="7950f6c49354bf68f27de0ba9e4826c034b3d35d" translate="yes" xml:space="preserve">
          <source>The key translation function receives one argument, which is the prompt that was specified in &lt;code&gt;read-key-sequence&lt;/code&gt;&amp;mdash;or &lt;code&gt;nil&lt;/code&gt; if the key sequence is being read by the editor command loop. In most cases you can ignore the prompt value.</source>
          <target state="translated">キー変換関数は、 &lt;code&gt;read-key-sequence&lt;/code&gt; で指定されたプロンプトである1つの引数を受け取ります。または、キーシーケンスがエディターコマンドループによって読み取られている場合は &lt;code&gt;nil&lt;/code&gt; を受け取ります。ほとんどの場合、プロンプト値は無視できます。</target>
        </trans-unit>
        <trans-unit id="9c724c94075d725787e5d581c532371826e09281" translate="yes" xml:space="preserve">
          <source>The keymap &lt;var&gt;keymap&lt;/var&gt; is active whenever &lt;var&gt;variable&lt;/var&gt; has a non-&lt;code&gt;nil&lt;/code&gt; value. Typically &lt;var&gt;variable&lt;/var&gt; is the variable that enables or disables a minor mode. See &lt;a href=&quot;keymaps-and-minor-modes#Keymaps-and-Minor-Modes&quot;&gt;Keymaps and Minor Modes&lt;/a&gt;.</source>
          <target state="translated">キー &lt;var&gt;keymap&lt;/var&gt; キーマップは、 &lt;var&gt;variable&lt;/var&gt; 値が &lt;code&gt;nil&lt;/code&gt; 以外の場合は常にアクティブになります。通常、 &lt;var&gt;variable&lt;/var&gt; はマイナーモードを有効または無効にする変数です。&lt;a href=&quot;keymaps-and-minor-modes#Keymaps-and-Minor-Modes&quot;&gt;キーマップとマイナーモードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="778deedcebfd753f594652405f80825572066516" translate="yes" xml:space="preserve">
          <source>The keymap binding of a prefix key is used for looking up the event that follows the prefix key. (It may instead be a symbol whose function definition is a keymap. The effect is the same, but the symbol serves as a name for the prefix key.) Thus, the binding of</source>
          <target state="translated">プレフィックスキーのキーマップバインディングは、プレフィックスキーに続くイベントを検索するために使用されます(代わりに、関数定義がキーマップであるシンボルであっても構いません)。(代わりに、関数定義がキーマップであるシンボルであっても構いません。効果は同じですが、シンボルは接頭辞キーの名前として機能します)。このように</target>
        </trans-unit>
        <trans-unit id="fd6135585180a24face202b71c46d7d4e0321d54" translate="yes" xml:space="preserve">
          <source>The keymap defining the contents of the tab bar. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Tab-Bars.html#Tab-Bars&quot;&gt;Tab Bars&lt;/a&gt; in</source>
          <target state="translated">タブバーの内容を定義するキーマップ。の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Tab-Bars.html#Tab-Bars&quot;&gt;タブバー&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="dbdf9f5934eb2533828d5b82e95608cabd6b6788" translate="yes" xml:space="preserve">
          <source>The keymap defining the contents of the tool bar. See &lt;a href=&quot;tool-bar#Tool-Bar&quot;&gt;Tool Bar&lt;/a&gt;.</source>
          <target state="translated">ツールバーの内容を定義するキーマップ。&lt;a href=&quot;tool-bar#Tool-Bar&quot;&gt;ツールバーを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4e0069d3ae618f793f1fa2e4550594c9b75d2f72" translate="yes" xml:space="preserve">
          <source>The keymap for characters following</source>
          <target state="translated">に続く文字のキーマップ</target>
        </trans-unit>
        <trans-unit id="c3be0c367d559d4bcc94776ddab26cb11131700e" translate="yes" xml:space="preserve">
          <source>The keymap for translating key sequences to preferred alternatives. If there are none, then it contains an empty sparse keymap. See &lt;a href=&quot;translation-keymaps#Translation-Keymaps&quot;&gt;Translation Keymaps&lt;/a&gt;.</source>
          <target state="translated">キーシーケンスを優先代替に変換するためのキーマップ。存在しない場合は、空のスパースキーマップが含まれています。&lt;a href=&quot;translation-keymaps#Translation-Keymaps&quot;&gt;翻訳キーマップを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="13b5ef05286cb723bbea46afe3ee9fb02d42a48b" translate="yes" xml:space="preserve">
          <source>The keymap for translating keypad and function keys. If there are none, then it contains an empty sparse keymap. See &lt;a href=&quot;translation-keymaps#Translation-Keymaps&quot;&gt;Translation Keymaps&lt;/a&gt;.</source>
          <target state="translated">キーパッドとファンクションキーを翻訳するためのキーマップ。存在しない場合は、空のスパースキーマップが含まれています。&lt;a href=&quot;translation-keymaps#Translation-Keymaps&quot;&gt;翻訳キーマップを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9e7dbb9716bd01a43838b53fe70be9a55bda1567" translate="yes" xml:space="preserve">
          <source>The keymap used by Prog mode. See &lt;a href=&quot;basic-major-modes#Basic-Major-Modes&quot;&gt;Basic Major Modes&lt;/a&gt;.</source>
          <target state="translated">Progモードで使用されるキーマップ。&lt;a href=&quot;basic-major-modes#Basic-Major-Modes&quot;&gt;基本的なメジャーモードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2ab245ddfa519516f3703f74bf4d4e8acfbe8994" translate="yes" xml:space="preserve">
          <source>The keymap used by Special mode. See &lt;a href=&quot;basic-major-modes#Basic-Major-Modes&quot;&gt;Basic Major Modes&lt;/a&gt;.</source>
          <target state="translated">特別モードで使用されるキーマップ。&lt;a href=&quot;basic-major-modes#Basic-Major-Modes&quot;&gt;基本的なメジャーモードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9e1ee3684d67359a88650e4fd1514d3bc1388140" translate="yes" xml:space="preserve">
          <source>The keyword &lt;code&gt;&amp;amp;rest&lt;/code&gt; (which must be followed by a single argument name) indicates that any number of arguments can follow. The single argument name following &lt;code&gt;&amp;amp;rest&lt;/code&gt; receives, as its value, a list of all the remaining arguments passed to the function. Do not write &lt;code&gt;&amp;amp;rest&lt;/code&gt; when you call the function.</source>
          <target state="translated">キーワード &lt;code&gt;&amp;amp;rest&lt;/code&gt; （その後に単一の引数名を付ける必要があります）は、任意の数の引数を続けることができることを示します。 &lt;code&gt;&amp;amp;rest&lt;/code&gt; に続く単一の引数名は、その値として、関数に渡された残りのすべての引数のリストを受け取ります。関数を呼び出すときに &lt;code&gt;&amp;amp;rest&lt;/code&gt; を記述しないでください。</target>
        </trans-unit>
        <trans-unit id="b3a2577e25ef4336cea54dd5ba9525c1ac899432" translate="yes" xml:space="preserve">
          <source>The kill ring records killed text as strings in a list, most recent first. A short kill ring, for example, might look like this:</source>
          <target state="translated">kill リングは、殺されたテキストをリストの文字列として記録します。例えば、短いキルリングは次のようになります。</target>
        </trans-unit>
        <trans-unit id="5310f9fc7ac635f8fb0f1f88e49865f96859f4ff" translate="yes" xml:space="preserve">
          <source>The kind of background&amp;mdash;either &lt;code&gt;light&lt;/code&gt; or &lt;code&gt;dark&lt;/code&gt;.</source>
          <target state="translated">背景の種類- &lt;code&gt;light&lt;/code&gt; または &lt;code&gt;dark&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bde2896c92556891a9a522e437678bf44d775c73" translate="yes" xml:space="preserve">
          <source>The kind of display associated with the terminal. This is the symbol returned by the function &lt;code&gt;terminal-live-p&lt;/code&gt; (i.e., &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;w32&lt;/code&gt;, &lt;code&gt;ns&lt;/code&gt;, or &lt;code&gt;pc&lt;/code&gt;). See &lt;a href=&quot;frames#Frames&quot;&gt;Frames&lt;/a&gt;.</source>
          <target state="translated">端末に関連付けられているディスプレイの種類。これは、関数 &lt;code&gt;terminal-live-p&lt;/code&gt; （つまり、 &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;t&lt;/code&gt; 、 &lt;code&gt;w32&lt;/code&gt; 、 &lt;code&gt;ns&lt;/code&gt; 、または &lt;code&gt;pc&lt;/code&gt; ）によって返されるシンボルです。&lt;a href=&quot;frames#Frames&quot;&gt;フレームを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c5c7577d4b10f36a18bbab67549b2c58143927c6" translate="yes" xml:space="preserve">
          <source>The kind of window system the terminal uses&amp;mdash;either &lt;code&gt;graphic&lt;/code&gt; (any graphics-capable display), &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;pc&lt;/code&gt; (for the MS-DOS console), &lt;code&gt;w32&lt;/code&gt; (for MS Windows 9X/NT/2K/XP), or &lt;code&gt;tty&lt;/code&gt; (a non-graphics-capable display). See &lt;a href=&quot;window-systems#Window-Systems&quot;&gt;window-system&lt;/a&gt;.</source>
          <target state="translated">端末が使用するウィンドウシステムの種類- &lt;code&gt;graphic&lt;/code&gt; （グラフィック対応ディスプレイの場合）、 &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;pc&lt;/code&gt; （MS-DOSコンソールの場合）、 &lt;code&gt;w32&lt;/code&gt; （MS Windows 9X / NT / 2K / XPの場合）、または &lt;code&gt;tty&lt;/code&gt; （非-グラフィックス対応の表示）。&lt;a href=&quot;window-systems#Window-Systems&quot;&gt;window-systemを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="01ef18971dfd086d0f3bdf7cf4fbd00a90436fd8" translate="yes" xml:space="preserve">
          <source>The language that the font should support. The value should be a symbol whose name is a two-letter ISO-639 language name. On X, the value is matched against the &amp;ldquo;Additional Style&amp;rdquo; field of the XLFD name of a font, if it is non-empty. On MS-Windows, fonts matching the spec are required to support codepages needed for the language. Currently, only a small set of CJK languages is supported with this property: &amp;lsquo;</source>
          <target state="translated">フォントがサポートする必要のある言語。値は、名前が2文字のISO-639言語名である記号である必要があります。Xでは、値が空でない場合、フォントのXLFD名の「AdditionalStyle」フィールドと照合されます。MS-Windowsでは、言語に必要なコードページをサポートするには、仕様に一致するフォントが必要です。現在、このプロパティでサポートされているCJK言語のセットはごくわずかです。</target>
        </trans-unit>
        <trans-unit id="88a7e776b65a937667815eb3a6eaf67a01ff78ce" translate="yes" xml:space="preserve">
          <source>The last</source>
          <target state="translated">最後の</target>
        </trans-unit>
        <trans-unit id="dccd686ce06e60750b4337124ef02d3ac122a8dc" translate="yes" xml:space="preserve">
          <source>The last form also makes sure that none of the created side windows are accessible via</source>
          <target state="translated">最後のフォームでは、作成されたサイドウィンドウのどれにも</target>
        </trans-unit>
        <trans-unit id="37be7c944a107a298305238e57bd913b69f97266" translate="yes" xml:space="preserve">
          <source>The last line of the documentation string can specify calling conventions different from the actual function arguments. Write text like this:</source>
          <target state="translated">ドキュメント文字列の最後の行には、実際の関数の引数とは異なる呼び出し規約を指定することができます。このようなテキストを書きます。</target>
        </trans-unit>
        <trans-unit id="ddcb40b64096f3eaa561946b2a19e292247e85b0" translate="yes" xml:space="preserve">
          <source>The last optional item, &lt;var&gt;noerror&lt;/var&gt;, overrides the normal error when the text can&amp;rsquo;t be encoded using the specified or chosen coding system. When &lt;var&gt;noerror&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, this function silently uses &lt;code&gt;raw-text&lt;/code&gt; coding instead.</source>
          <target state="translated">最後のオプション項目 &lt;var&gt;noerror&lt;/var&gt; は、指定または選択されたコーディングシステムを使用してテキストをエンコードできない場合に、通常のエラーをオーバーライドします。 &lt;var&gt;noerror&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の場合、この関数は代わりに &lt;code&gt;raw-text&lt;/code&gt; コーディングをサイレントに使用します。</target>
        </trans-unit>
        <trans-unit id="ab880934452e3eacbf10a61506631f3e7e86eb71" translate="yes" xml:space="preserve">
          <source>The last thing &lt;code&gt;after-find-file&lt;/code&gt; does is call all the functions in the list &lt;code&gt;find-file-hook&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;after-find-file&lt;/code&gt; が最後に行うことは、リスト &lt;code&gt;find-file-hook&lt;/code&gt; 内のすべての関数を呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="0003f3c71cb33be508071e1a28e112d5cd1a93de" translate="yes" xml:space="preserve">
          <source>The last three elements give additional information about the font. &lt;var&gt;fixed-p&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt; if the font is fixed-pitch. &lt;var&gt;full&lt;/var&gt; is the full name of the font, and &lt;var&gt;registry-and-encoding&lt;/var&gt; is a string giving the registry and encoding of the font.</source>
          <target state="translated">最後の3つの要素は、フォントに関する追加情報を提供します。フォントが固定ピッチの場合、 &lt;var&gt;fixed-p&lt;/var&gt; は &lt;code&gt;nil&lt;/code&gt; 以外です。 &lt;var&gt;full&lt;/var&gt; はフォントのフルネームであり、 &lt;var&gt;registry-and-encoding&lt;/var&gt; はフォントのレジストリとエンコーディングを示す文字列です。</target>
        </trans-unit>
        <trans-unit id="6c23485a20be9be1024893537c3477b18df28155" translate="yes" xml:space="preserve">
          <source>The last two values in &lt;var&gt;subexp-highlighter&lt;/var&gt;, &lt;var&gt;override&lt;/var&gt; and &lt;var&gt;laxmatch&lt;/var&gt;, are optional flags. If &lt;var&gt;override&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;, this element can override existing fontification made by previous elements of &lt;code&gt;font-lock-keywords&lt;/code&gt;. If it is &lt;code&gt;keep&lt;/code&gt;, then each character is fontified if it has not been fontified already by some other element. If it is &lt;code&gt;prepend&lt;/code&gt;, the face specified by &lt;var&gt;facespec&lt;/var&gt; is added to the beginning of the &lt;code&gt;font-lock-face&lt;/code&gt; property. If it is &lt;code&gt;append&lt;/code&gt;, the face is added to the end of the &lt;code&gt;font-lock-face&lt;/code&gt; property.</source>
          <target state="translated">&lt;var&gt;subexp-highlighter&lt;/var&gt; の最後の2つの値、 &lt;var&gt;override&lt;/var&gt; と &lt;var&gt;laxmatch&lt;/var&gt; は、オプションのフラグです。 &lt;var&gt;override&lt;/var&gt; が &lt;code&gt;t&lt;/code&gt; の場合、この要素は、 &lt;code&gt;font-lock-keywords&lt;/code&gt; の前の要素によって作成された既存のフォント化をオーバーライドできます。 &lt;code&gt;keep&lt;/code&gt; の場合、他の要素によってまだフォント化されていなければ、各文字はフォント化されます。 &lt;code&gt;prepend&lt;/code&gt; の場合、 &lt;var&gt;facespec&lt;/var&gt; で指定された面が &lt;code&gt;font-lock-face&lt;/code&gt; プロパティの先頭に追加されます。それがされている場合は &lt;code&gt;append&lt;/code&gt; 、顔がの最後に追加され &lt;code&gt;font-lock-face&lt;/code&gt; プロパティ。</target>
        </trans-unit>
        <trans-unit id="992a1c51c72e3b37e35b641195dd8337943b2596" translate="yes" xml:space="preserve">
          <source>The last way to customize Imenu for a major mode is to set the variable &lt;code&gt;imenu-create-index-function&lt;/code&gt;:</source>
          <target state="translated">メジャーモード用にImenuをカスタマイズする最後の方法は、変数 &lt;code&gt;imenu-create-index-function&lt;/code&gt; を設定することです。</target>
        </trans-unit>
        <trans-unit id="3ce25b448ce366df7fb622e8f8aa9485fb8699a5" translate="yes" xml:space="preserve">
          <source>The layer 2 address (Ethernet MAC address, for instance).</source>
          <target state="translated">レイヤ2のアドレス(例えば、イーサネットのMACアドレス)。</target>
        </trans-unit>
        <trans-unit id="a47ca85c8b203a3f800aea8cd96b6a61549d375d" translate="yes" xml:space="preserve">
          <source>The layout of side windows on the left or right of a frame is not affected by the value of this variable.</source>
          <target state="translated">フレームの左右のサイドウィンドウのレイアウトは、この変数の値の影響を受けません。</target>
        </trans-unit>
        <trans-unit id="6009ec89412305c052749a52bf8f3c7e8431cbcf" translate="yes" xml:space="preserve">
          <source>The layout of such a frame might appear as follows:</source>
          <target state="translated">このようなフレームのレイアウトは、次のように表示されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="3b025a85b17d93fe80056a9fbbc6aa0c12299f7e" translate="yes" xml:space="preserve">
          <source>The least specialized major mode is called &lt;em&gt;Fundamental mode&lt;/em&gt;, which has no mode-specific definitions or variable settings.</source>
          <target state="translated">最も専門性の低いメジャーモードは&lt;em&gt;基本&lt;/em&gt;モードと呼ばれ、モード固有の定義や変数設定はありません。</target>
        </trans-unit>
        <trans-unit id="cf0a2de49bf1a621f861fc10249ddf1c3e8e8639" translate="yes" xml:space="preserve">
          <source>The left-hand and top edges of this window, measured in pixels, relative to the top-left corner (0, 0) of the window&amp;rsquo;s native frame.</source>
          <target state="translated">ウィンドウのネイティブフレームの左上隅（0、0）を基準にして、ピクセル単位で測定された、このウィンドウの左端と上端。</target>
        </trans-unit>
        <trans-unit id="0e159da910fc18db25e6c0af5e99bdff417543a4" translate="yes" xml:space="preserve">
          <source>The left-hand edge of the window, measured in columns, relative to the leftmost column (column 0) of the window&amp;rsquo;s native frame.</source>
          <target state="translated">ウィンドウのネイティブフレームの左端の列（列0）を基準にして、列で測定されたウィンドウの左端。</target>
        </trans-unit>
        <trans-unit id="85b6183109a9a7b6efad378049191669aefc0fd8" translate="yes" xml:space="preserve">
          <source>The length of the array is fixed once you create it; you cannot change the length of an existing array.</source>
          <target state="translated">配列の長さは一度作成すると固定され、既存の配列の長さを変更することはできません。</target>
        </trans-unit>
        <trans-unit id="bb9a27d08446955ce106744ef3b710dbc15d43b6" translate="yes" xml:space="preserve">
          <source>The length of the file this buffer is visiting, when last read or saved. It can have 2 special values: -1 means auto-saving was turned off in this buffer, and -2 means don&amp;rsquo;t turn off auto-saving if buffer text shrinks a lot. This and other fields concerned with saving are not kept in the &lt;code&gt;buffer_text&lt;/code&gt; structure because indirect buffers are never saved.</source>
          <target state="translated">最後に読み取られたとき、または保存されたときに、このバッファがアクセスしているファイルの長さ。2つの特別な値を持つことができます。-1はこのバッファで自動保存がオフになっていることを意味し、-2はバッファテキストが大幅に縮小した場合に自動保存をオフにしないことを意味します。間接バッファは決して保存されないため、保存に関連するこのフィールドおよびその他のフィールドは、 &lt;code&gt;buffer_text&lt;/code&gt; 構造体に保持されません。</target>
        </trans-unit>
        <trans-unit id="2735538fcce561a7758f21b1ebbd03c667ab66da" translate="yes" xml:space="preserve">
          <source>The length of the old text is the difference between the buffer positions before and after that text as it was before the change. As for the changed text, its length is simply the difference between the first two arguments.</source>
          <target state="translated">古いテキストの長さは、変更前のテキストと変更後のテキストのバッファ位置の差です。変更されたテキストについては、その長さは単純に最初の2つの引数の差です。</target>
        </trans-unit>
        <trans-unit id="959fbf29c3f8bb0bab090fdff0de9a589ee90bcb" translate="yes" xml:space="preserve">
          <source>The license for this documentation.</source>
          <target state="translated">このドキュメントのライセンス。</target>
        </trans-unit>
        <trans-unit id="620613354f3eaf838b72f4f12e00f9803d440b0f" translate="yes" xml:space="preserve">
          <source>The line functions in the previous section count text lines, delimited only by newline characters. By contrast, these functions count screen lines, which are defined by the way the text appears on the screen. A text line is a single screen line if it is short enough to fit the width of the selected window, but otherwise it may occupy several screen lines.</source>
          <target state="translated">前節の行関数は、改行文字のみで区切られたテキスト行をカウントします。対照的に、これらの関数はスクリーン行をカウントするもので、スクリーン上でのテキストの表示方法によって定義されます。テキスト行は、選択されているウィンドウの幅に合わせて十分に短い場合には1つの画面行となりますが、そうでない場合には複数の画面行を占めることがあります。</target>
        </trans-unit>
        <trans-unit id="716452ebec7e673d1d9d81cc51b8547f340814e1" translate="yes" xml:space="preserve">
          <source>The line number of a certain position in the buffer, or zero. This is used for displaying the line number of point in the mode line.</source>
          <target state="translated">バッファ内のある位置のライン番号、またはゼロ。モードラインのポイントの行番号を表示するときに使用します。</target>
        </trans-unit>
        <trans-unit id="839f8d216431863a7a00ea59f4be71c60c8c2e5b" translate="yes" xml:space="preserve">
          <source>The list &lt;code&gt;(rose violet)&lt;/code&gt; is equivalent to &lt;code&gt;(rose . (violet))&lt;/code&gt;, and looks like this:</source>
          <target state="translated">リスト &lt;code&gt;(rose violet)&lt;/code&gt; は &lt;code&gt;(rose . (violet))&lt;/code&gt; と同等で、次のようになります。</target>
        </trans-unit>
        <trans-unit id="962c62424fbca05b4167123b8512730f70e28cc4" translate="yes" xml:space="preserve">
          <source>The list describes the display that &lt;var&gt;frame&lt;/var&gt; is on; if &lt;var&gt;frame&lt;/var&gt; is omitted or &lt;code&gt;nil&lt;/code&gt;, it applies to the selected frame&amp;rsquo;s display (see &lt;a href=&quot;input-focus#Input-Focus&quot;&gt;Input Focus&lt;/a&gt;).</source>
          <target state="translated">このリストは、 &lt;var&gt;frame&lt;/var&gt; が表示されているディスプレイについて説明しています。 &lt;var&gt;frame&lt;/var&gt; が省略されているか &lt;code&gt;nil&lt;/code&gt; の場合、選択されたフレームの表示に適用されます（&lt;a href=&quot;input-focus#Input-Focus&quot;&gt;入力フォーカスを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a5e7dd03ee241b78dea866b6e88f99a7a8764678" translate="yes" xml:space="preserve">
          <source>The list form is currently similar to how &lt;code&gt;md5&lt;/code&gt; and &lt;code&gt;secure-hash&lt;/code&gt; operate.</source>
          <target state="translated">リスト形式は現在、 &lt;code&gt;md5&lt;/code&gt; と &lt;code&gt;secure-hash&lt;/code&gt; の動作方法に似ています。</target>
        </trans-unit>
        <trans-unit id="f1ee49ad7464cab64ae226a805d7b31a9c327b50" translate="yes" xml:space="preserve">
          <source>The list is ordered so that earlier elements correspond to more recently-shown buffers, and the first element usually corresponds to the buffer most recently removed from the window.</source>
          <target state="translated">このリストは、以前の要素が最近表示されたバッファに対応するように順番に並べられており、最初の要素は通常、ウィンドウから削除されたバッファに対応しています。</target>
        </trans-unit>
        <trans-unit id="bf28d6cd5c13b4c859c3624b6a63099b610df792" translate="yes" xml:space="preserve">
          <source>The list of the positions of the currently open parentheses, starting with the outermost.</source>
          <target state="translated">現在開いている括弧の位置を、一番外側から順に一覧表示します。</target>
        </trans-unit>
        <trans-unit id="42d7eea344ddd2896a97642d094a7e8335564359" translate="yes" xml:space="preserve">
          <source>The list returned by &lt;code&gt;buffer-list&lt;/code&gt; is constructed specifically; it is not an internal Emacs data structure, and modifying it has no effect on the order of buffers. If you want to change the order of buffers in the fundamental buffer list, here is an easy way:</source>
          <target state="translated">&lt;code&gt;buffer-list&lt;/code&gt; によって返されるリストは、具体的に作成されます。これは内部のEmacsデータ構造ではなく、変更してもバッファーの順序には影響しません。基本バッファリスト内のバッファの順序を変更する場合は、次の簡単な方法があります。</target>
        </trans-unit>
        <trans-unit id="a8c850e06ee228bef706e71be70435aebad07c66" translate="yes" xml:space="preserve">
          <source>The load functions evaluate all the expressions in a file just as the &lt;code&gt;eval-buffer&lt;/code&gt; function evaluates all the expressions in a buffer. The difference is that the load functions read and evaluate the text in the file as found on disk, not the text in an Emacs buffer.</source>
          <target state="translated">load関数は、 &lt;code&gt;eval-buffer&lt;/code&gt; 関数がバッファー内のすべての式を評価するのと同じように、ファイル内のすべての式を評価します。違いは、ロード関数がEmacsバッファー内のテキストではなく、ディスク上にあるファイル内のテキストを読み取って評価することです。</target>
        </trans-unit>
        <trans-unit id="bcf097db69a4c3e2b9f156a93318f5b55b88be14" translate="yes" xml:space="preserve">
          <source>The loaded file must contain Lisp expressions, either as source code or as byte-compiled code. Each form in the file is called a &lt;em&gt;top-level form&lt;/em&gt;. There is no special format for the forms in a loadable file; any form in a file may equally well be typed directly into a buffer and evaluated there. (Indeed, most code is tested this way.) Most often, the forms are function definitions and variable definitions.</source>
          <target state="translated">ロードされたファイルには、ソースコードまたはバイトコンパイルされたコードとしてLisp式が含まれている必要があります。ファイル内の各フォームは、&lt;em&gt;トップレベルフォーム&lt;/em&gt;と呼ばれます。ロード可能なファイルのフォームには特別な形式はありません。ファイル内のどのフォームも、バッファに直接入力してそこで評価することができます。（実際、ほとんどのコードはこの方法でテストされます。）ほとんどの場合、フォームは関数定義と変数定義です。</target>
        </trans-unit>
        <trans-unit id="95d55d2fde6c278fb97386c98daf3e630c566eab" translate="yes" xml:space="preserve">
          <source>The local address, in internal format.</source>
          <target state="translated">内部フォーマットのローカルアドレス。</target>
        </trans-unit>
        <trans-unit id="56aaea215b4bc49234f9ee74677196b8ffb7af78" translate="yes" xml:space="preserve">
          <source>The local keymap and variable list contain entries that individually override global bindings or values. These are used to customize the behavior of programs in different buffers, without actually changing the programs.</source>
          <target state="translated">ローカルキーマップと変数リストには、グローバルバインディングや値を個別に上書きするエントリが含まれています。これらは、実際にプログラムを変更することなく、異なるバッファ内のプログラムの動作をカスタマイズするために使用されます。</target>
        </trans-unit>
        <trans-unit id="8497e1e143889552fd6d29f50ee9c1a86ceb2d17" translate="yes" xml:space="preserve">
          <source>The local keymap is normally set by the buffer&amp;rsquo;s major mode, and every buffer with the same major mode shares the same local keymap. Hence, if you call &lt;code&gt;local-set-key&lt;/code&gt; (see &lt;a href=&quot;key-binding-commands#Key-Binding-Commands&quot;&gt;Key Binding Commands&lt;/a&gt;) to change the local keymap in one buffer, that also affects the local keymaps in other buffers with the same major mode.</source>
          <target state="translated">ローカルキーマップは通常、バッファのメジャーモードによって設定され、同じメジャーモードを持つすべてのバッファは同じローカルキーマップを共有します。したがって、 &lt;code&gt;local-set-key&lt;/code&gt; （&lt;a href=&quot;key-binding-commands#Key-Binding-Commands&quot;&gt;キーバインドコマンドを&lt;/a&gt;参照）を呼び出して1つのバッファのローカルキーマップを変更すると、同じメジャーモードの他のバッファのローカルキーマップにも影響します。</target>
        </trans-unit>
        <trans-unit id="c20827cfc5ffe09c075650e5199361a56b68cec0" translate="yes" xml:space="preserve">
          <source>The low-level mechanism for disabling a command is to put a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;disabled&lt;/code&gt; property on the Lisp symbol for the command. These properties are normally set up by the user&amp;rsquo;s init file (see &lt;a href=&quot;init-file#Init-File&quot;&gt;Init File&lt;/a&gt;) with Lisp expressions such as this:</source>
          <target state="translated">コマンドを無効にするための低レベルのメカニズムは、コマンドのLispシンボルに &lt;code&gt;nil&lt;/code&gt; 以外の &lt;code&gt;disabled&lt;/code&gt; プロパティを配置することです。これらのプロパティは通常、次のようなLisp式を使用してユーザーのinitファイル（&lt;a href=&quot;init-file#Init-File&quot;&gt;Initファイルを&lt;/a&gt;参照）によって設定されます。</target>
        </trans-unit>
        <trans-unit id="23fe2196399552d25b3c061985ee305fa84c2b18" translate="yes" xml:space="preserve">
          <source>The low-level primitives for creating buffers do not use this function, but medium-level commands such as &lt;code&gt;switch-to-buffer&lt;/code&gt; and &lt;code&gt;find-file-noselect&lt;/code&gt; use it whenever they create buffers.</source>
          <target state="translated">バッファを作成するための低レベルのプリミティブはこの関数を使用しませんが、 &lt;code&gt;switch-to-buffer&lt;/code&gt; や &lt;code&gt;find-file-noselect&lt;/code&gt; などの中レベルのコマンドは、バッファを作成するたびにこの関数を使用します。</target>
        </trans-unit>
        <trans-unit id="8010635f2bb24a96123a821123a02c24a306bdce" translate="yes" xml:space="preserve">
          <source>The lowest level functions for command input are &lt;code&gt;read-event&lt;/code&gt;, &lt;code&gt;read-char&lt;/code&gt;, and &lt;code&gt;read-char-exclusive&lt;/code&gt;.</source>
          <target state="translated">コマンド入力の最下位レベルの関数は、 &lt;code&gt;read-event&lt;/code&gt; 、 &lt;code&gt;read-char&lt;/code&gt; 、および &lt;code&gt;read-char-exclusive&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="14145dceb516643fe37d9fc1ff0f68417500b0ec" translate="yes" xml:space="preserve">
          <source>The lowest-level primitive for modifying a &lt;small&gt;CDR&lt;/small&gt; is &lt;code&gt;setcdr&lt;/code&gt;:</source>
          <target state="translated">&lt;small&gt;CDR&lt;/small&gt;を変更するための最低レベルのプリミティブは &lt;code&gt;setcdr&lt;/code&gt; です：</target>
        </trans-unit>
        <trans-unit id="3f8ff2bd3febbb80e6a03979190f1d4a93f85b99" translate="yes" xml:space="preserve">
          <source>The macro &lt;code&gt;condition-case-unless-debug&lt;/code&gt; provides another way to handle debugging of such forms. It behaves exactly like &lt;code&gt;condition-case&lt;/code&gt;, unless the variable &lt;code&gt;debug-on-error&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, in which case it does not handle any errors at all.</source>
          <target state="translated">マクロ &lt;code&gt;condition-case-unless-debug&lt;/code&gt; は、このようなフォームのデバッグを処理する別の方法を提供します。変数 &lt;code&gt;debug-on-error&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の &lt;code&gt;condition-case&lt;/code&gt; を除いて、condition-caseとまったく同じように動作します。この場合、エラーはまったく処理されません。</target>
        </trans-unit>
        <trans-unit id="69ddcd0a4bf2d4a7d5ed7f86f791b6ffe043c1a1" translate="yes" xml:space="preserve">
          <source>The macro &lt;code&gt;define-alternatives&lt;/code&gt; can be used to define &lt;em&gt;generic commands&lt;/em&gt;. These are interactive functions whose implementation can be selected from several alternatives, as a matter of user preference.</source>
          <target state="translated">マクロ &lt;code&gt;define-alternatives&lt;/code&gt; を使用して、&lt;em&gt;汎用コマンド&lt;/em&gt;を定義でき&lt;em&gt;ます&lt;/em&gt;。これらはインタラクティブな機能であり、ユーザーの好みに応じて、いくつかの選択肢から実装を選択できます。</target>
        </trans-unit>
        <trans-unit id="5119a1b3dc9bf2349246f3d4b6d6761f1510e515" translate="yes" xml:space="preserve">
          <source>The macro &lt;code&gt;define-minor-mode&lt;/code&gt; offers a convenient way of implementing a mode in one self-contained definition.</source>
          <target state="translated">マクロ &lt;code&gt;define-minor-mode&lt;/code&gt; は、1つの自己完結型定義にモードを実装する便利な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="a18ca22eed3764c8d5592c00e25721489dd6a12d" translate="yes" xml:space="preserve">
          <source>The macro &lt;code&gt;gv-letplace&lt;/code&gt; can be useful in defining macros that perform similarly to &lt;code&gt;setf&lt;/code&gt;; for example, the &lt;code&gt;incf&lt;/code&gt; macro of Common Lisp could be implemented this way:</source>
          <target state="translated">マクロ &lt;code&gt;gv-letplace&lt;/code&gt; は、 &lt;code&gt;setf&lt;/code&gt; と同様に機能するマクロを定義するのに役立ちます。たとえば、 &lt;code&gt;incf&lt;/code&gt; マクロは次のように実装できます。</target>
        </trans-unit>
        <trans-unit id="1e1e3b145e098e8f5ecb2f49f1bfd35918691f45" translate="yes" xml:space="preserve">
          <source>The macro cannot be used to suppress file name handlers from magic file names (see &lt;a href=&quot;magic-file-names#Magic-File-Names&quot;&gt;Magic File Names&lt;/a&gt;).</source>
          <target state="translated">このマクロを使用して、マジックファイル名からファイル名ハンドラーを抑制することはできません（&lt;a href=&quot;magic-file-names#Magic-File-Names&quot;&gt;マジックファイル名を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="8cf63348f1b08167a736e3e7aac8f62de5938951" translate="yes" xml:space="preserve">
          <source>The macro executes &lt;var&gt;body&lt;/var&gt; normally, but arranges to call the after-change functions just once for a series of several changes&amp;mdash;if that seems safe.</source>
          <target state="translated">マクロは &lt;var&gt;body&lt;/var&gt; 正常に実行しますが、変更後の関数を1回だけ呼び出して、一連のいくつかの変更を行うように調整します（安全と思われる場合）。</target>
        </trans-unit>
        <trans-unit id="eae48ac7e81744b77b10a9b79e04ee1eb49c6a47" translate="yes" xml:space="preserve">
          <source>The macros &lt;code&gt;push&lt;/code&gt; (see &lt;a href=&quot;list-variables#List-Variables&quot;&gt;List Variables&lt;/a&gt;) and &lt;code&gt;pop&lt;/code&gt; (see &lt;a href=&quot;list-elements#List-Elements&quot;&gt;List Elements&lt;/a&gt;) can manipulate generalized variables, not just lists. &lt;code&gt;(pop &lt;var&gt;place&lt;/var&gt;)&lt;/code&gt; removes and returns the first element of the list stored in &lt;var&gt;place&lt;/var&gt;. It is analogous to &lt;code&gt;(prog1 (car &lt;var&gt;place&lt;/var&gt;) (setf &lt;var&gt;place&lt;/var&gt; (cdr &lt;var&gt;place&lt;/var&gt;)))&lt;/code&gt;, except that it takes care to evaluate all subforms only once. &lt;code&gt;(push &lt;var&gt;x&lt;/var&gt; &lt;var&gt;place&lt;/var&gt;)&lt;/code&gt; inserts &lt;var&gt;x&lt;/var&gt; at the front of the list stored in &lt;var&gt;place&lt;/var&gt;. It is analogous to &lt;code&gt;(setf
&lt;var&gt;place&lt;/var&gt; (cons &lt;var&gt;x&lt;/var&gt; &lt;var&gt;place&lt;/var&gt;))&lt;/code&gt;, except for evaluation of the subforms. Note that &lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; on an &lt;code&gt;nthcdr&lt;/code&gt; place can be used to insert or delete at any position in a list.</source>
          <target state="translated">マクロ &lt;code&gt;push&lt;/code&gt; （&lt;a href=&quot;list-variables#List-Variables&quot;&gt;リスト変数を&lt;/a&gt;参照）および &lt;code&gt;pop&lt;/code&gt; （&lt;a href=&quot;list-elements#List-Elements&quot;&gt;リスト要素を&lt;/a&gt;参照）は、リストだけでなく、一般化された変数を操作できます。 &lt;code&gt;(pop &lt;var&gt;place&lt;/var&gt;)&lt;/code&gt; は、 &lt;var&gt;place&lt;/var&gt; に格納されているリストの最初の要素を削除して返します。これは &lt;code&gt;(prog1 (car &lt;var&gt;place&lt;/var&gt;) (setf &lt;var&gt;place&lt;/var&gt; (cdr &lt;var&gt;place&lt;/var&gt;)))&lt;/code&gt; に似ていますが、すべてのサブフォームを1回だけ評価するように注意する点が異なります。 &lt;code&gt;(push &lt;var&gt;x&lt;/var&gt; &lt;var&gt;place&lt;/var&gt;)&lt;/code&gt; は、その &lt;var&gt;place&lt;/var&gt; 格納されているリストの先頭に &lt;var&gt;x&lt;/var&gt; を挿入します。これは &lt;code&gt;(setf &lt;var&gt;place&lt;/var&gt; (cons &lt;var&gt;x&lt;/var&gt; &lt;var&gt;place&lt;/var&gt;))&lt;/code&gt; &lt;var&gt;place&lt;/var&gt; （cons &lt;var&gt;x&lt;/var&gt; &lt;var&gt;place&lt;/var&gt; ））、サブフォームの評価を除く。 &lt;code&gt;nthcdr&lt;/code&gt; の場所での &lt;code&gt;push&lt;/code&gt; アンド &lt;code&gt;pop&lt;/code&gt; を使用して、リスト内の任意の位置に挿入または削除できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="09c0ddd15714530f62c1af5eecb2c98c7086baee" translate="yes" xml:space="preserve">
          <source>The macros described in this section use &lt;code&gt;pcase&lt;/code&gt; patterns to perform destructuring binding. The condition of the object to be of compatible structure means that the object must match the pattern, because only then the object&amp;rsquo;s subfields can be extracted. For example:</source>
          <target state="translated">このセクションで説明するマクロは、 &lt;code&gt;pcase&lt;/code&gt; パターンを使用して非構造化バインディングを実行します。互換性のある構造であるというオブジェクトの条件は、オブジェクトのサブフィールドを抽出できるのはその場合にのみ、オブジェクトがパターンと一致する必要があることを意味します。例えば：</target>
        </trans-unit>
        <trans-unit id="f9f8d8ecb58d3451cb2b5457cb2f37a869983a68" translate="yes" xml:space="preserve">
          <source>The main reason for writing an Emacs module is to make additional functions available to Lisp programs that load the module. This subsection describes how to write such &lt;em&gt;module functions&lt;/em&gt;.</source>
          <target state="translated">Emacsモジュールを作成する主な理由は、モジュールをロードするLispプログラムで追加の関数を利用できるようにするためです。このサブセクションでは、このような&lt;em&gt;モジュール関数の&lt;/em&gt;記述方法について説明し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="877426dcb86887eef639d5e653cc17f51b41fa0e" translate="yes" xml:space="preserve">
          <source>The main use of &lt;code&gt;const&lt;/code&gt; is inside of &lt;code&gt;choice&lt;/code&gt;. For example, &lt;code&gt;(choice integer (const nil))&lt;/code&gt; allows either an integer or &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; の主な用途は、 &lt;code&gt;choice&lt;/code&gt; 内です。たとえば、 &lt;code&gt;(choice integer (const nil))&lt;/code&gt; は、整数または &lt;code&gt;nil&lt;/code&gt; のいずれかを許可します。</target>
        </trans-unit>
        <trans-unit id="26e9b14420c609493efab668d934c559a0c3429e" translate="yes" xml:space="preserve">
          <source>The main use of &lt;code&gt;current-idle-time&lt;/code&gt; is when an idle timer function wants to &amp;ldquo;take a break&amp;rdquo; for a while. It can set up another idle timer to call the same function again, after a few seconds more idleness. Here&amp;rsquo;s an example:</source>
          <target state="translated">&lt;code&gt;current-idle-time&lt;/code&gt; の主な用途は、アイドルタイマー機能がしばらくの間「休憩」したい場合です。数秒以上アイドル状態になった後、同じ関数を再度呼び出すように別のアイドルタイマーを設定できます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="530ebc1f037074c726faee61b32cae1039f33cbf" translate="yes" xml:space="preserve">
          <source>The main use of &lt;code&gt;other&lt;/code&gt; is as the last element of &lt;code&gt;choice&lt;/code&gt;. For example,</source>
          <target state="translated">&lt;code&gt;other&lt;/code&gt; の主な用途は、最後に &lt;code&gt;choice&lt;/code&gt; 要素です。例えば、</target>
        </trans-unit>
        <trans-unit id="f26c01b277b5d5c1d3d508a4f0fb33a502c2a50b" translate="yes" xml:space="preserve">
          <source>The major mode command may start by calling some other major mode command (called the &lt;em&gt;parent mode&lt;/em&gt;) and then alter some of its settings. A mode that does this is called a &lt;em&gt;derived mode&lt;/em&gt;. The recommended way to define one is to use the &lt;code&gt;define-derived-mode&lt;/code&gt; macro, but this is not required. Such a mode should call the parent mode command inside a &lt;code&gt;delay-mode-hooks&lt;/code&gt; form. (Using &lt;code&gt;define-derived-mode&lt;/code&gt; does this automatically.) See &lt;a href=&quot;derived-modes#Derived-Modes&quot;&gt;Derived Modes&lt;/a&gt;, and &lt;a href=&quot;mode-hooks#Mode-Hooks&quot;&gt;Mode Hooks&lt;/a&gt;.</source>
          <target state="translated">メジャーモードコマンドは、他のメジャーモードコマンド（&lt;em&gt;親モード&lt;/em&gt;と呼ばれる）を呼び出して開始し、その設定の一部を変更する場合があります。これを行うモードは、&lt;em&gt;派生モード&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。1つを定義するための推奨される方法は、 &lt;code&gt;define-derived-mode&lt;/code&gt; マクロを使用することですが、これは必須ではありません。このようなモードでは、 &lt;code&gt;delay-mode-hooks&lt;/code&gt; フォーム内で親モードコマンドを呼び出す必要があります。（&lt;a href=&quot;derived-modes#Derived-Modes&quot;&gt;define-派生モード&lt;/a&gt;を使用 &lt;code&gt;define-derived-mode&lt;/code&gt; これが自動的に行われます。）派生モードおよび&lt;a href=&quot;mode-hooks#Mode-Hooks&quot;&gt;モードフックを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5d17a35b712255a2afb0c14c8a0d624c5811e326" translate="yes" xml:space="preserve">
          <source>The major mode command should set the variable &lt;code&gt;major-mode&lt;/code&gt; to the major mode command symbol. This is how &lt;code&gt;describe-mode&lt;/code&gt; discovers which documentation to print.</source>
          <target state="translated">メジャーモードコマンドは、変数 &lt;code&gt;major-mode&lt;/code&gt; をメジャーモードコマンドシンボルに設定する必要があります。これは、 &lt;code&gt;describe-mode&lt;/code&gt; が印刷するドキュメントを検出する方法です。</target>
        </trans-unit>
        <trans-unit id="cc2e4f72d7acbc5634e4c8fb360f612e207aadac" translate="yes" xml:space="preserve">
          <source>The major mode command should set the variable &lt;code&gt;mode-name&lt;/code&gt; to the &amp;ldquo;pretty&amp;rdquo; name of the mode, usually a string (but see &lt;a href=&quot;mode-line-data#Mode-Line-Data&quot;&gt;Mode Line Data&lt;/a&gt;, for other possible forms). The name of the mode appears in the mode line.</source>
          <target state="translated">メジャーモードコマンドは、変数 &lt;code&gt;mode-name&lt;/code&gt; をモードの「きれいな」名前（通常は文字列）に設定する必要があります（ただし、他の可能な形式については、&lt;a href=&quot;mode-line-data#Mode-Line-Data&quot;&gt;モードラインデータを&lt;/a&gt;参照してください）。モードの名前がモード行に表示されます。</target>
        </trans-unit>
        <trans-unit id="e9542e90f40b187eea4684e0c6016160f19daa55" translate="yes" xml:space="preserve">
          <source>The major mode command should start by calling &lt;code&gt;kill-all-local-variables&lt;/code&gt;. This runs the normal hook &lt;code&gt;change-major-mode-hook&lt;/code&gt;, then gets rid of the buffer-local variables of the major mode previously in effect. See &lt;a href=&quot;creating-buffer_002dlocal#Creating-Buffer_002dLocal&quot;&gt;Creating Buffer-Local&lt;/a&gt;.</source>
          <target state="translated">メジャーモードコマンドは、 &lt;code&gt;kill-all-local-variables&lt;/code&gt; を呼び出すことから開始する必要があります。これにより、通常のフック &lt;code&gt;change-major-mode-hook&lt;/code&gt; が実行され、以前に有効だったメジャーモードのバッファローカル変数が削除されます。&lt;a href=&quot;creating-buffer_002dlocal#Creating-Buffer_002dLocal&quot;&gt;Buffer-Localの作成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d4edcb1b916452f2aa05fab479bef5803ee546f7" translate="yes" xml:space="preserve">
          <source>The major mode for a newly created buffer is set to Fundamental mode. (The default value of the variable &lt;code&gt;major-mode&lt;/code&gt; is handled at a higher level; see &lt;a href=&quot;auto-major-mode#Auto-Major-Mode&quot;&gt;Auto Major Mode&lt;/a&gt;.) If the name begins with a space, the buffer initially disables undo information recording (see &lt;a href=&quot;undo#Undo&quot;&gt;Undo&lt;/a&gt;).</source>
          <target state="translated">新しく作成されたバッファのメジャーモードは、基本モードに設定されます。（変数のデフォルト値 &lt;code&gt;major-mode&lt;/code&gt; 、より高いレベルで処理され、参照&lt;a href=&quot;auto-major-mode#Auto-Major-Mode&quot;&gt;オートメジャーモード&lt;/a&gt;。）名前は、スペースで最初にバッファ無効アンドゥ情報の記録を開始した場合（参照&lt;a href=&quot;undo#Undo&quot;&gt;元に戻します&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="ba726196ac6572a0dc3557cdc5106eff7f9d6ee0" translate="yes" xml:space="preserve">
          <source>The major mode for the new buffer is set to Fundamental mode. The default value of the variable &lt;code&gt;major-mode&lt;/code&gt; is handled at a higher level. See &lt;a href=&quot;auto-major-mode#Auto-Major-Mode&quot;&gt;Auto Major Mode&lt;/a&gt;.</source>
          <target state="translated">新しいバッファのメジャーモードは基本モードに設定されます。変数 &lt;code&gt;major-mode&lt;/code&gt; のデフォルト値は、より高いレベルで処理されます。&lt;a href=&quot;auto-major-mode#Auto-Major-Mode&quot;&gt;自動メジャーモードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="87268c52362ac57b90f14c23d4e6a6de48b2d02a" translate="yes" xml:space="preserve">
          <source>The major mode should usually have its own keymap, which is used as the local keymap in all buffers in that mode. The major mode command should call &lt;code&gt;use-local-map&lt;/code&gt; to install this local map. See &lt;a href=&quot;active-keymaps#Active-Keymaps&quot;&gt;Active Keymaps&lt;/a&gt;, for more information.</source>
          <target state="translated">メジャーモードには通常、独自のキーマップが必要です。これは、そのモードのすべてのバッファーでローカルキーマップとして使用されます。major modeコマンドは、 &lt;code&gt;use-local-map&lt;/code&gt; を呼び出して、このローカルマップをインストールする必要があります。詳細については、&lt;a href=&quot;active-keymaps#Active-Keymaps&quot;&gt;アクティブキーマップを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="172cb58908f30e86253a48b7781eed8cfd4c158b" translate="yes" xml:space="preserve">
          <source>The major version number of Emacs, as an integer. For Emacs version 23.1, the value is 23.</source>
          <target state="translated">Emacsのメジャーバージョン番号を整数で指定します。Emacsのバージョン23.1の場合は23になります。</target>
        </trans-unit>
        <trans-unit id="0d1af093b0fd27af29ab4b28e1513e6dc00a63aa" translate="yes" xml:space="preserve">
          <source>The manual should be fully correct in what it does cover, and it is therefore open to criticism on anything it says&amp;mdash;from specific examples and descriptive text, to the ordering of chapters and sections. If something is confusing, or you find that you have to look at the sources or experiment to learn something not covered in the manual, then perhaps the manual should be fixed. Please let us know.</source>
          <target state="translated">マニュアルは、それがカバーする内容が完全に正しい必要があります。したがって、特定の例や説明文から章やセクションの順序まで、マニュアルの内容に対する批判にさらされています。何かが紛らわしい場合、またはマニュアルに記載されていないことを学ぶためにソースを調べたり実験したりする必要がある場合は、おそらくマニュアルを修正する必要があります。お知らせください。</target>
        </trans-unit>
        <trans-unit id="a5e22ef195f16823ddf7673778585082a4f46066" translate="yes" xml:space="preserve">
          <source>The mark for the buffer. The mark is a marker, hence it is also included on the list &lt;code&gt;markers&lt;/code&gt;. See &lt;a href=&quot;the-mark#The-Mark&quot;&gt;The Mark&lt;/a&gt;.</source>
          <target state="translated">バッファのマーク。マークはマーカーであるため、リスト &lt;code&gt;markers&lt;/code&gt; も含まれています。&lt;a href=&quot;the-mark#The-Mark&quot;&gt;マークを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b258116b18e88b2e80482d5981d360a38a61fc94" translate="yes" xml:space="preserve">
          <source>The mark is active when this variable is non-&lt;code&gt;nil&lt;/code&gt;. This variable is always buffer-local in each buffer. Do &lt;em&gt;not&lt;/em&gt; use the value of this variable to decide whether a command that normally operates on text near point should operate on the region instead. Use the function &lt;code&gt;use-region-p&lt;/code&gt; for that (see &lt;a href=&quot;the-region#The-Region&quot;&gt;The Region&lt;/a&gt;).</source>
          <target state="translated">この変数が &lt;code&gt;nil&lt;/code&gt; 以外の場合、マークはアクティブです。この変数は、各バッファーで常にバッファーローカルです。この変数の値を使用して、通常はテキストの近点で動作するコマンドを代わりに領域で動作させるかどうかを決定し&lt;em&gt;ないで&lt;/em&gt;ください。そのために関数 &lt;code&gt;use-region-p&lt;/code&gt; を使用します（&lt;a href=&quot;the-region#The-Region&quot;&gt;The Regionを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="cf467a06fad52dab305b0df8d802a3dd9b6b7599" translate="yes" xml:space="preserve">
          <source>The mark is not active now</source>
          <target state="translated">現在、マークはアクティブではありません。</target>
        </trans-unit>
        <trans-unit id="2294805a57144c8f475dd286330832439e218b3b" translate="yes" xml:space="preserve">
          <source>The mark specifies a position to bound a range of text for many commands, such as &lt;code&gt;kill-region&lt;/code&gt; and &lt;code&gt;indent-rigidly&lt;/code&gt;. These commands typically act on the text between point and the mark, which is called the &lt;em&gt;region&lt;/em&gt;. If you are writing a command that operates on the region, don&amp;rsquo;t examine the mark directly; instead, use &lt;code&gt;interactive&lt;/code&gt; with the &amp;lsquo;</source>
          <target state="translated">マークは、 &lt;code&gt;kill-region&lt;/code&gt; や &lt;code&gt;indent-rigidly&lt;/code&gt; などの多くのコマンドのテキストの範囲をバインドする位置を指定します。これらのコマンドは通常、ポイントとマークの間のテキスト（&lt;em&gt;領域&lt;/em&gt;と呼ばれます）に作用します。リージョンを操作するコマンドを作成している場合は、マークを直接調べないでください。代わりに、使用 &lt;code&gt;interactive&lt;/code&gt; 'で</target>
        </trans-unit>
        <trans-unit id="1b1540074aa53b63216cd2456d72381dd8d0fc52" translate="yes" xml:space="preserve">
          <source>The markers that refer to this buffer. This is actually a single marker, and successive elements in its marker &lt;em&gt;chain&lt;/em&gt; (a linked list) are the other markers referring to this buffer text.</source>
          <target state="translated">このバッファーを参照するマーカー。これは実際には単一のマーカーであり、そのマーカー&lt;em&gt;チェーン&lt;/em&gt;（リンクリスト）内の連続する要素は、このバッファーテキストを参照する他のマーカーです。</target>
        </trans-unit>
        <trans-unit id="bb06b83e3da02615a4f7e9ab6d8336bdd25a1731" translate="yes" xml:space="preserve">
          <source>The matcher processes a &amp;lsquo;</source>
          <target state="translated">マッチャーは 'を処理します</target>
        </trans-unit>
        <trans-unit id="92f6e3600296536bb76b7fcd8d76a0af6e42a364" translate="yes" xml:space="preserve">
          <source>The mathematical constant &lt;em&gt;e&lt;/em&gt; (2.71828&amp;hellip;).</source>
          <target state="translated">数学定数&lt;em&gt;e&lt;/em&gt;（2.71828&amp;hellip;）。</target>
        </trans-unit>
        <trans-unit id="1a3e48f3d1745f4908462da41660cc121d6d0f68" translate="yes" xml:space="preserve">
          <source>The mathematical constant &lt;em&gt;pi&lt;/em&gt; (3.14159&amp;hellip;).</source>
          <target state="translated">数学定数&lt;em&gt;pi&lt;/em&gt;（3.14159&amp;hellip;）。</target>
        </trans-unit>
        <trans-unit id="8e605715e3d2691c70b3f21b0b8462b89a7614e5" translate="yes" xml:space="preserve">
          <source>The maximum advance width of the font.</source>
          <target state="translated">フォントの最大繰り上げ幅。</target>
        </trans-unit>
        <trans-unit id="978782c408873797cfb6aaf7d660218a112071f9" translate="yes" xml:space="preserve">
          <source>The maximum number of changes that can be amalgamated is controlled by the &lt;code&gt;amalgamating-undo-limit&lt;/code&gt; variable. If this variable is 1, no changes are amalgamated.</source>
          <target state="translated">マージできる変更の最大数は、 &lt;code&gt;amalgamating-undo-limit&lt;/code&gt; 変数によって制御されます。この変数が1の場合、変更は統合されません。</target>
        </trans-unit>
        <trans-unit id="82b0cf778d9e1f9d0ac00a5da272e14e2306ca7f" translate="yes" xml:space="preserve">
          <source>The maximum stack size this function needs.</source>
          <target state="translated">この関数が必要とする最大スタックサイズ。</target>
        </trans-unit>
        <trans-unit id="459b7d57f50aecb28cc2870ce7b74f07723e326b" translate="yes" xml:space="preserve">
          <source>The meaning of a list depends on what it contains:</source>
          <target state="translated">リストの意味は、それが何を含んでいるかに依存します。</target>
        </trans-unit>
        <trans-unit id="d3fe651ac40ed9579fa5231d4fcd52354eb5372a" translate="yes" xml:space="preserve">
          <source>The meanings of these list elements are as follows:</source>
          <target state="translated">これらのリスト要素の意味は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="12d4b0de515899d94eda4148e6b314c9f86a96b8" translate="yes" xml:space="preserve">
          <source>The menu bar (see &lt;a href=&quot;menu-bar#Menu-Bar&quot;&gt;Menu Bar&lt;/a&gt;) can be either internal (drawn by Emacs itself) or external (drawn by the toolkit). Most builds (GTK+, Lucid, Motif and MS-Windows) rely on an external menu bar. NS also uses an external menu bar which, however, is not part of the outer frame. Non-toolkit builds can provide an internal menu bar. On text terminal frames, the menu bar is part of the frame&amp;rsquo;s root window (see &lt;a href=&quot;windows-and-frames#Windows-and-Frames&quot;&gt;Windows and Frames&lt;/a&gt;). As a rule, menu bars are never shown on child frames (see &lt;a href=&quot;child-frames#Child-Frames&quot;&gt;Child Frames&lt;/a&gt;). Display of the menu bar can be suppressed by setting the &lt;code&gt;menu-bar-lines&lt;/code&gt; parameter (see &lt;a href=&quot;layout-parameters#Layout-Parameters&quot;&gt;Layout Parameters&lt;/a&gt;) to zero.</source>
          <target state="translated">メニューバーは、（参照&lt;a href=&quot;menu-bar#Menu-Bar&quot;&gt;メニューバー&lt;/a&gt;）（Emacs自身によって描かれた）内部または（ツールキットによって描かれた）外部のいずれかになります。ほとんどのビルド（GTK +、Lucid、Motif、MS-Windows）は、外部メニューバーに依存しています。 NSは外部メニューバーも使用しますが、これは外枠の一部ではありません。ツールキット以外のビルドは、内部メニューバーを提供できます。テキストターミナルフレームでは、メニューバーはフレームのルートウィンドウの一部です（「&lt;a href=&quot;windows-and-frames#Windows-and-Frames&quot;&gt;ウィンドウとフレーム&lt;/a&gt;」を参照）。原則として、メニューバーが子フレームに表示されることはありません（参照&lt;a href=&quot;child-frames#Child-Frames&quot;&gt;子フレームを&lt;/a&gt;）。メニューバーの表示は、menu &lt;code&gt;menu-bar-lines&lt;/code&gt; パラメーター（「&lt;a href=&quot;layout-parameters#Layout-Parameters&quot;&gt;レイアウトパラメーター&lt;/a&gt;」を参照）をゼロに設定することで抑制できます。</target>
        </trans-unit>
        <trans-unit id="9c36ca261c29f5622700c6f2f7d03d8bacd64def" translate="yes" xml:space="preserve">
          <source>The menu bar does not recalculate which items are enabled every time you look at a menu. This is because the X toolkit requires the whole tree of menus in advance. To force recalculation of the menu bar, call &lt;code&gt;force-mode-line-update&lt;/code&gt; (see &lt;a href=&quot;mode-line-format#Mode-Line-Format&quot;&gt;Mode Line Format&lt;/a&gt;).</source>
          <target state="translated">メニューバーは、メニューを表示するたびに有効になっている項目を再計算しません。これは、Xツールキットが事前にメニューのツリー全体を必要とするためです。メニューバーの再計算を強制するには、 &lt;code&gt;force-mode-line-update&lt;/code&gt; を呼び出します（&lt;a href=&quot;mode-line-format#Mode-Line-Format&quot;&gt;Mode Line Formatを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="0671d125fcb3f27fb5c40fddd77a7227205c4dea" translate="yes" xml:space="preserve">
          <source>The menu bar mechanism, which lets you switch between submenus by moving the mouse, cannot look within the definition of a command to see that it calls &lt;code&gt;x-popup-menu&lt;/code&gt;. Therefore, if you try to implement a submenu using &lt;code&gt;x-popup-menu&lt;/code&gt;, it cannot work with the menu bar in an integrated fashion. This is why all menu bar submenus are implemented with menu keymaps within the parent menu, and never with &lt;code&gt;x-popup-menu&lt;/code&gt;. See &lt;a href=&quot;menu-bar#Menu-Bar&quot;&gt;Menu Bar&lt;/a&gt;.</source>
          <target state="translated">マウスを動かしてサブメニューを切り替えることができるメニューバーメカニズムでは、コマンドの定義内を調べて、 &lt;code&gt;x-popup-menu&lt;/code&gt; が呼び出されていることを確認できません。したがって、 &lt;code&gt;x-popup-menu&lt;/code&gt; を使用してサブメニューを実装しようとすると、メニューバーと統合された方法で機能することはできません。これが、すべてのメニューバーサブメニューが親メニュー内のメニューキーマップで実装され、 &lt;code&gt;x-popup-menu&lt;/code&gt; では実装されない理由です。&lt;a href=&quot;menu-bar#Menu-Bar&quot;&gt;メニューバーを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9fccd406d5e813b76ef7a41fe974c95db256bdc6" translate="yes" xml:space="preserve">
          <source>The menu in this example is intended for use with the mouse. If a menu is intended for use with the keyboard, that is, if it is bound to a key sequence ending with a keyboard event, then the menu items should be bound to characters or real function keys, that can be typed with the keyboard.</source>
          <target state="translated">この例のメニューはマウスでの使用を想定しています。メニューがキーボードでの使用を意図している場合、つまり、キーボードイベントで終わるキーシーケンスにバインドされている場合、メニュー項目はキーボードで入力可能な文字または実際のファンクションキーにバインドされている必要があります。</target>
        </trans-unit>
        <trans-unit id="884ca4e3a78e0c7d0eb618828c719ec2bc18c4b5" translate="yes" xml:space="preserve">
          <source>The menu&amp;rsquo;s items are the bindings in the keymap. Each binding associates an event type to a definition, but the event types have no significance for the menu appearance. (Usually we use pseudo-events, symbols that the keyboard cannot generate, as the event types for menu item bindings.) The menu is generated entirely from the bindings that correspond in the keymap to these events.</source>
          <target state="translated">メニューの項目は、キーマップのバインディングです。各バインディングはイベントタイプを定義に関連付けますが、イベントタイプはメニューの外観にとって重要ではありません。（通常、メニュー項目バインディングのイベントタイプとして、キーボードが生成できないシンボルである疑似イベントを使用します。）メニューは、キーマップでこれらのイベントに対応するバインディングから完全に生成されます。</target>
        </trans-unit>
        <trans-unit id="4ffe1db1ee3430043bd7d7cfed2fce90a58b2f33" translate="yes" xml:space="preserve">
          <source>The message is &amp;lsquo;</source>
          <target state="translated">メッセージは '</target>
        </trans-unit>
        <trans-unit id="1b4522d132316958b60412509a75ad9dd71138ff" translate="yes" xml:space="preserve">
          <source>The message is &lt;code&gt;Arithmetic range error&lt;/code&gt;.</source>
          <target state="translated">メッセージは &lt;code&gt;Arithmetic range error&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="14845ac05edc00f5ef9aed326e6a4acbb2d66dc1" translate="yes" xml:space="preserve">
          <source>The message is the empty string. See &lt;a href=&quot;signaling-errors#Signaling-Errors&quot;&gt;Signaling Errors&lt;/a&gt;.</source>
          <target state="translated">メッセージは空の文字列です。&lt;a href=&quot;signaling-errors#Signaling-Errors&quot;&gt;シグナリングエラーを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a343531eec6204803775063bd43c8b0c3b1e1d7d" translate="yes" xml:space="preserve">
          <source>The message is usually &amp;lsquo;</source>
          <target state="translated">メッセージは通常 'です</target>
        </trans-unit>
        <trans-unit id="a72cf44ed0b2379b5bd18fbbfcf576f977b2239c" translate="yes" xml:space="preserve">
          <source>The meta modifier.</source>
          <target state="translated">メタ修飾子。</target>
        </trans-unit>
        <trans-unit id="b1a58020916aba3f6cdf104343f3433939d15e37" translate="yes" xml:space="preserve">
          <source>The meta variants of those characters, with codes in the range of 2**27 to 2**27+127, can also go in the string, but you must change their numeric values. You must set the 2**7 bit instead of the 2**27 bit, resulting in a value between 128 and 255. Only a unibyte string can include these codes.</source>
          <target state="translated">これらの文字のメタバリアント (コードが 2**27 から 2**27+127 の範囲)も文字列に含めることができますが、数値を変更する必要があります。2**27 ビットの代わりに 2**7 ビットを設定する必要があり、結果として 128 から 255 の間の値になります。これらのコードを含むことができるのは、ユニバイト文字列のみです。</target>
        </trans-unit>
        <trans-unit id="9260d6b48ff908594f1c64bdc5084fd35f5bbde1" translate="yes" xml:space="preserve">
          <source>The minibuffer&amp;rsquo;s window is normally a single line; it grows automatically if the contents require more space. Whilst the minibuffer is active, you can explicitly resize its window temporarily with the window sizing commands; the window reverts to its normal size when the minibuffer is exited. When the minibuffer is not active, you can resize its window permanently by using the window sizing commands in the frame&amp;rsquo;s other window, or dragging the mode line with the mouse. (Due to details of the current implementation, for this to work &lt;code&gt;resize-mini-windows&lt;/code&gt; must be &lt;code&gt;nil&lt;/code&gt;.) If the frame contains just a minibuffer window, you can change its size by changing the frame&amp;rsquo;s size.</source>
          <target state="translated">ミニバッファのウィンドウは通常1行です。コンテンツがより多くのスペースを必要とする場合、それは自動的に大きくなります。ミニバッファがアクティブな間は、ウィンドウサイズ設定コマンドを使用してウィンドウのサイズを一時的に明示的に変更できます。ミニバッファを終了すると、ウィンドウは通常のサイズに戻ります。ミニバッファがアクティブでない場合は、フレームの他のウィンドウでウィンドウサイズ設定コマンドを使用するか、マウスでモードラインをドラッグすることにより、ウィンドウのサイズを永続的に変更できます。 （現在の実装の詳細により、これを機能させるには、 &lt;code&gt;resize-mini-windows&lt;/code&gt; を &lt;code&gt;nil&lt;/code&gt; にする必要があります。）フレームにミニバッファーウィンドウのみが含まれている場合は、フレームのサイズを変更することでサイズを変更できます。</target>
        </trans-unit>
        <trans-unit id="fc66b2b22fab10f272a2733f5220517063d244a8" translate="yes" xml:space="preserve">
          <source>The minimum parenthesis depth encountered during this scan.</source>
          <target state="translated">このスキャンで検出された最小の括弧の深さ。</target>
        </trans-unit>
        <trans-unit id="f63caeb9d63ae3ea523b1bd607e47fabe4f9c44a" translate="yes" xml:space="preserve">
          <source>The minor mode should, if possible, support enabling and disabling via Custom (see &lt;a href=&quot;customization#Customization&quot;&gt;Customization&lt;/a&gt;). To do this, the mode variable should be defined with &lt;code&gt;defcustom&lt;/code&gt;, usually with &lt;code&gt;:type 'boolean&lt;/code&gt;. If just setting the variable is not sufficient to enable the mode, you should also specify a &lt;code&gt;:set&lt;/code&gt; method which enables the mode by invoking the mode command. Note in the variable&amp;rsquo;s documentation string that setting the variable other than via Custom may not take effect. Also, mark the definition with an autoload cookie (see &lt;a href=&quot;autoload#autoload-cookie&quot;&gt;autoload cookie&lt;/a&gt;), and specify a &lt;code&gt;:require&lt;/code&gt; so that customizing the variable will load the library that defines the mode. For example:</source>
          <target state="translated">マイナーモードは、可能であれば、カスタムによる有効化と無効化をサポートする必要があります（&lt;a href=&quot;customization#Customization&quot;&gt;カスタマイズを&lt;/a&gt;参照）。これを行うには、mode変数を &lt;code&gt;defcustom&lt;/code&gt; で定義する必要があります。通常は &lt;code&gt;:type 'boolean&lt;/code&gt; type'booleanを使用します。変数を設定するだけではモードを有効にできない場合は、modeコマンドを呼び出してモードを有効にする &lt;code&gt;:set&lt;/code&gt; メソッドも指定する必要があります。変数のドキュメント文字列で、カスタム以外の方法で変数を設定しても効果がない場合があることに注意してください。また、（参照オートロードクッキーと定義をマーク&lt;a href=&quot;autoload#autoload-cookie&quot;&gt;オートロードクッキーを&lt;/a&gt;）、および指定 &lt;code&gt;:require&lt;/code&gt; 変数をカスタマイズするモードを定義するライブラリをロードするようにします。例えば：</target>
        </trans-unit>
        <trans-unit id="a754ecbf865ded2f8f972fadc0f979ee00b4c003" translate="yes" xml:space="preserve">
          <source>The minor version number of Emacs, as an integer. For Emacs version 23.1, the value is 1.</source>
          <target state="translated">Emacsのマイナーバージョン番号を整数で指定します。Emacsのバージョン23.1の場合は1になります。</target>
        </trans-unit>
        <trans-unit id="1778e11c806e3d03eed718920a2bdcbe70425f0c" translate="yes" xml:space="preserve">
          <source>The mnemonics of keyboard, terminal, and buffer coding systems.</source>
          <target state="translated">キーボード、端末、バッファの符号化システムのニーモニック。</target>
        </trans-unit>
        <trans-unit id="d4aa0cdb7029a5f2355863fdbbab99919ce6ce82" translate="yes" xml:space="preserve">
          <source>The mode can specify a local value for &lt;code&gt;eldoc-documentation-function&lt;/code&gt; to tell ElDoc mode how to handle this mode.</source>
          <target state="translated">モードは、 &lt;code&gt;eldoc-documentation-function&lt;/code&gt; のローカル値を指定して、ElDocモードにこのモードの処理方法を指示できます。</target>
        </trans-unit>
        <trans-unit id="354ca13496161c1669222f09fc05f88ea22e29e9" translate="yes" xml:space="preserve">
          <source>The mode can specify how to complete various keywords by adding one or more buffer-local entries to the special hook &lt;code&gt;completion-at-point-functions&lt;/code&gt;. See &lt;a href=&quot;completion-in-buffers#Completion-in-Buffers&quot;&gt;Completion in Buffers&lt;/a&gt;.</source>
          <target state="translated">このモードでは、1つ以上のバッファローカルエントリを特別なフック &lt;code&gt;completion-at-point-functions&lt;/code&gt; に追加することにより、さまざまなキーワードを完了する方法を指定できます。&lt;a href=&quot;completion-in-buffers#Completion-in-Buffers&quot;&gt;バッファでの完了を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9ced895ea9c1431eb7e76df2f2cbdc9e5d0836c8" translate="yes" xml:space="preserve">
          <source>The mode command should accept one optional argument. If called interactively with no prefix argument, it should toggle the mode (i.e., enable if it is disabled, and disable if it is enabled). If called interactively with a prefix argument, it should enable the mode if the argument is positive and disable it otherwise.</source>
          <target state="translated">modeコマンドは、オプションの引数を1つ受け付ける必要があります。prefix 引数を指定せずに対話的に呼ばれた場合、モードを切り替えなければならない (すなわち、無効になっている場合は有効にし、有効になっている場合は無効にする)。接頭語の引数を指定して対話的に呼び出された場合は、引数が正の場合はモードを有効にし、そうでない場合は無効にします。</target>
        </trans-unit>
        <trans-unit id="44819a97a0e2f91469bd3f92a2d58321df9329f0" translate="yes" xml:space="preserve">
          <source>The mode line contents are controlled by a data structure called a &lt;em&gt;mode line construct&lt;/em&gt;, made up of lists, strings, symbols, and numbers kept in buffer-local variables. Each data type has a specific meaning for the mode line appearance, as described below. The same data structure is used for constructing frame titles (see &lt;a href=&quot;frame-titles#Frame-Titles&quot;&gt;Frame Titles&lt;/a&gt;) and header lines (see &lt;a href=&quot;header-lines#Header-Lines&quot;&gt;Header Lines&lt;/a&gt;).</source>
          <target state="translated">モードラインの内容は、バッファローカル変数に保持されているリスト、文字列、シンボル、および数値で&lt;em&gt;構成されるモードラインコンストラクト&lt;/em&gt;と呼ばれるデータ構造によって制御されます。以下に説明するように、各データ型には、モードラインの外観に対して特定の意味があります。同じデータ構造が、フレームタイトル（&lt;a href=&quot;frame-titles#Frame-Titles&quot;&gt;フレームタイトルを&lt;/a&gt;参照）とヘッダー行（&lt;a href=&quot;header-lines#Header-Lines&quot;&gt;ヘッダー行を&lt;/a&gt;参照）の作成に使用されます。</target>
        </trans-unit>
        <trans-unit id="e208e76c5548c1d095dbde47ed20de1a7d12aa6a" translate="yes" xml:space="preserve">
          <source>The mode may have its own abbrev table or may share one with other related modes. If it has its own abbrev table, it should store this in a variable named &lt;code&gt;&lt;var&gt;modename&lt;/var&gt;-mode-abbrev-table&lt;/code&gt;. If the major mode command defines any abbrevs itself, it should pass &lt;code&gt;t&lt;/code&gt; for the &lt;var&gt;system-flag&lt;/var&gt; argument to &lt;code&gt;define-abbrev&lt;/code&gt;. See &lt;a href=&quot;defining-abbrevs#Defining-Abbrevs&quot;&gt;Defining Abbrevs&lt;/a&gt;.</source>
          <target state="translated">モードには独自の略語テーブルがある場合と、他の関連モードと共有する場合があります。独自の略語テーブルがある場合は、 &lt;code&gt;&lt;var&gt;modename&lt;/var&gt;-mode-abbrev-table&lt;/code&gt; という名前の変数に格納する必要があります。メジャーモードコマンドは、任意の略語自体を定義する場合、それが通過する必要があり &lt;code&gt;t&lt;/code&gt; ための &lt;var&gt;system-flag&lt;/var&gt; の引数 &lt;code&gt;define-abbrev&lt;/code&gt; 。&lt;a href=&quot;defining-abbrevs#Defining-Abbrevs&quot;&gt;略語の定義を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="566eebc546ff4022d5692ebd193f3372e5deedf9" translate="yes" xml:space="preserve">
          <source>The mode may have its own syntax table or may share one with other related modes. If it has its own syntax table, it should store this in a variable named &lt;code&gt;&lt;var&gt;modename&lt;/var&gt;-mode-syntax-table&lt;/code&gt;. See &lt;a href=&quot;syntax-tables#Syntax-Tables&quot;&gt;Syntax Tables&lt;/a&gt;.</source>
          <target state="translated">モードには独自の構文テーブルがある場合と、他の関連モードと共有する場合があります。独自の構文テーブルがある場合は、 &lt;code&gt;&lt;var&gt;modename&lt;/var&gt;-mode-syntax-table&lt;/code&gt; という名前の変数に格納する必要があります。&lt;a href=&quot;syntax-tables#Syntax-Tables&quot;&gt;構文表を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7febfb2248d6f317197277153f5791a4f2a7185b" translate="yes" xml:space="preserve">
          <source>The mode should specify how Imenu should find the definitions or sections of a buffer, by setting up a buffer-local value for the variable &lt;code&gt;imenu-generic-expression&lt;/code&gt;, for the two variables &lt;code&gt;imenu-prev-index-position-function&lt;/code&gt; and &lt;code&gt;imenu-extract-index-name-function&lt;/code&gt;, or for the variable &lt;code&gt;imenu-create-index-function&lt;/code&gt; (see &lt;a href=&quot;imenu#Imenu&quot;&gt;Imenu&lt;/a&gt;).</source>
          <target state="translated">モードは、2つの変数 &lt;code&gt;imenu-prev-index-position-function&lt;/code&gt; および &lt;code&gt;imenu-extract-index-name-function&lt;/code&gt; に対して、変数 &lt;code&gt;imenu-generic-expression&lt;/code&gt; のbuffer-local値を設定することにより、Imenuがバッファーの定義またはセクションを見つける方法を指定する必要があります。-index-name-function、または変数 &lt;code&gt;imenu-create-index-function&lt;/code&gt; の場合（&lt;a href=&quot;imenu#Imenu&quot;&gt;Imenuを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e819d19cb71035bc2b05451e5471df8840dc6d69" translate="yes" xml:space="preserve">
          <source>The mode should specify how to do highlighting for Font Lock mode, by setting up a buffer-local value for the variable &lt;code&gt;font-lock-defaults&lt;/code&gt; (see &lt;a href=&quot;font-lock-mode#Font-Lock-Mode&quot;&gt;Font Lock Mode&lt;/a&gt;).</source>
          <target state="translated">モードは、変数 &lt;code&gt;font-lock-defaults&lt;/code&gt; のバッファローカル値を設定することにより、フォントロックモードの強調表示を行う方法を指定する必要があります（&lt;a href=&quot;font-lock-mode#Font-Lock-Mode&quot;&gt;フォントロックモードを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="41a1cfe199d882964dc064f09142206bb96f8e6c" translate="yes" xml:space="preserve">
          <source>The modification time of the visited file. It is set when the file is written or read. Before writing the buffer into a file, this field is compared to the modification time of the file to see if the file has changed on disk. See &lt;a href=&quot;buffer-modification#Buffer-Modification&quot;&gt;Buffer Modification&lt;/a&gt;.</source>
          <target state="translated">訪問したファイルの変更時刻。ファイルの書き込みまたは読み取り時に設定されます。バッファをファイルに書き込む前に、このフィールドがファイルの変更時刻と比較され、ファイルがディスク上で変更されたかどうかが確認されます。&lt;a href=&quot;buffer-modification#Buffer-Modification&quot;&gt;バッファの変更を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4e9e26b12f5c002c1627a4d332042e4cecc33362" translate="yes" xml:space="preserve">
          <source>The modifiers list for a click event explicitly contains &lt;code&gt;click&lt;/code&gt;, but the event symbol name itself does not contain &amp;lsquo;</source>
          <target state="translated">クリックイベントの修飾子リストには明示的に &lt;code&gt;click&lt;/code&gt; が含まれていますが、イベントシンボル名自体には 'が含まれていません</target>
        </trans-unit>
        <trans-unit id="b3b787746e135e4f51648da476a31670954846cd" translate="yes" xml:space="preserve">
          <source>The momentary display remains until the next input event. If the next input event is &lt;var&gt;char&lt;/var&gt;, &lt;code&gt;momentary-string-display&lt;/code&gt; ignores it and returns. Otherwise, that event remains buffered for subsequent use as input. Thus, typing &lt;var&gt;char&lt;/var&gt; will simply remove the string from the display, while typing (say)</source>
          <target state="translated">瞬間的な表示は、次の入力イベントまで残ります。次の入力イベントが &lt;var&gt;char&lt;/var&gt; の場合、 &lt;code&gt;momentary-string-display&lt;/code&gt; はそれを無視して戻ります。それ以外の場合、そのイベントは、後で入力として使用するためにバッファリングされたままになります。したがって、 &lt;var&gt;char&lt;/var&gt; と入力すると、入力中に文字列が表示から削除されます（たとえば）</target>
        </trans-unit>
        <trans-unit id="6ccfa1f10310929beb049fb30bcfc7d9086811f9" translate="yes" xml:space="preserve">
          <source>The month of the year, as an integer between 1 and 12.</source>
          <target state="translated">年の月を1~12の整数で表します。</target>
        </trans-unit>
        <trans-unit id="edb5bce3a7e2bd1bf00ac6d3a9eb55fc41355ba2" translate="yes" xml:space="preserve">
          <source>The most basic primitive for minibuffer input is &lt;code&gt;read-from-minibuffer&lt;/code&gt;, which can be used to read either a string or a Lisp object in textual form. The function &lt;code&gt;read-regexp&lt;/code&gt; is used for reading regular expressions (see &lt;a href=&quot;regular-expressions#Regular-Expressions&quot;&gt;Regular Expressions&lt;/a&gt;), which are a special kind of string. There are also specialized functions for reading commands, variables, file names, etc. (see &lt;a href=&quot;completion#Completion&quot;&gt;Completion&lt;/a&gt;).</source>
          <target state="translated">ミニバッファ入力の最も基本的なプリミティブは &lt;code&gt;read-from-minibuffer&lt;/code&gt; であり、これを使用して文字列またはLispオブジェクトをテキスト形式で読み取ることができます。この関数は &lt;code&gt;read-regexp&lt;/code&gt; 正規表現（参照読み取るために使用される&lt;a href=&quot;regular-expressions#Regular-Expressions&quot;&gt;正規表現を&lt;/a&gt;文字列の特別な種類です）。コマンド、変数、ファイル名などを読み取るための特殊な関数もあります（&lt;a href=&quot;completion#Completion&quot;&gt;完了を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="04571e47b6db6005c0928b2d449f301cebe34f7a" translate="yes" xml:space="preserve">
          <source>The most basic way to alter the contents of an existing string is with &lt;code&gt;aset&lt;/code&gt; (see &lt;a href=&quot;array-functions#Array-Functions&quot;&gt;Array Functions&lt;/a&gt;). &lt;code&gt;(aset &lt;var&gt;string&lt;/var&gt;
&lt;var&gt;idx&lt;/var&gt; &lt;var&gt;char&lt;/var&gt;)&lt;/code&gt; stores &lt;var&gt;char&lt;/var&gt; into &lt;var&gt;string&lt;/var&gt; at index &lt;var&gt;idx&lt;/var&gt;. Each character occupies one or more bytes, and if &lt;var&gt;char&lt;/var&gt; needs a different number of bytes from the character already present at that index, &lt;code&gt;aset&lt;/code&gt; signals an error.</source>
          <target state="translated">既存の文字列の内容を変更する最も基本的な方法は、 &lt;code&gt;aset&lt;/code&gt; を使用することです（&lt;a href=&quot;array-functions#Array-Functions&quot;&gt;配列関数を&lt;/a&gt;参照）。 &lt;code&gt;(aset &lt;var&gt;string&lt;/var&gt; &lt;var&gt;idx&lt;/var&gt; &lt;var&gt;char&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;char&lt;/var&gt; をインデックス &lt;var&gt;idx&lt;/var&gt; の &lt;var&gt;string&lt;/var&gt; 格納します。各文字は1つ以上のバイトを占有し、 &lt;var&gt;char&lt;/var&gt; がそのインデックスにすでに存在する文字とは異なるバイト数を必要とする場合、 &lt;code&gt;aset&lt;/code&gt; はエラーを通知します。</target>
        </trans-unit>
        <trans-unit id="bf4dd793bfdf67867b9bdc6495e0ff90954bd76e" translate="yes" xml:space="preserve">
          <source>The most basic way to use the expression parser is to tell it to start at a given position with a certain state, and parse up to a specified end position.</source>
          <target state="translated">式パーサを使用する最も基本的な方法は、特定の状態で指定された位置から開始し、指定された終了位置まで解析するように指示することです。</target>
        </trans-unit>
        <trans-unit id="b7f2a6fce568eb37624dbc5a896f8aecf156540b" translate="yes" xml:space="preserve">
          <source>The most common items to autoload are the interactive entry points to a library. For example, if</source>
          <target state="translated">オートロードする最も一般的な項目は、ライブラリへのインタラクティブなエントリーポイントです。例えば</target>
        </trans-unit>
        <trans-unit id="00ce30cf3da30f9ec9b191e1b5b38d0ab5c7d881" translate="yes" xml:space="preserve">
          <source>The most common problem in writing macros is doing some of the real work prematurely&amp;mdash;while expanding the macro, rather than in the expansion itself. For instance, one real package had this macro definition:</source>
          <target state="translated">マクロを作成する際の最も一般的な問題は、実際の作業の一部を時期尚早に実行することです。つまり、展開自体ではなく、マクロを展開します。たとえば、1つの実際のパッケージには次のマクロ定義があります。</target>
        </trans-unit>
        <trans-unit id="2cf92a8ba2845654523982a452093a675127ce73" translate="yes" xml:space="preserve">
          <source>The most common reason to use &lt;code&gt;:require&lt;/code&gt; is when a variable enables a feature such as a minor mode, and just setting the variable won&amp;rsquo;t have any effect unless the code which implements the mode is loaded.</source>
          <target state="translated">&lt;code&gt;:require&lt;/code&gt; を使用する最も一般的な理由は、変数がマイナーモードなどの機能を有効にし、モードを実装するコードがロードされない限り、変数を設定するだけでは効果がない場合です。</target>
        </trans-unit>
        <trans-unit id="00d251711d163f90f5dc973380466e863d64f7b0" translate="yes" xml:space="preserve">
          <source>The most common repeat events are &lt;em&gt;double-click&lt;/em&gt; events. Emacs generates a double-click event when you click a button twice; the event happens when you release the button (as is normal for all click events).</source>
          <target state="translated">最も一般的なリピートイベントは&lt;em&gt;ダブルクリック&lt;/em&gt;イベントです。Emacsは、ボタンを2回クリックすると、ダブルクリックイベントを生成します。このイベントは、ボタンを離したときに発生します（すべてのクリックイベントで通常どおり）。</target>
        </trans-unit>
        <trans-unit id="57850c0a76ab6f2efce7f9ee07926b9e3846b613" translate="yes" xml:space="preserve">
          <source>The most common use of buffer-local bindings is for major modes to change variables that control the behavior of commands. For example, C mode and Lisp mode both set the variable &lt;code&gt;paragraph-start&lt;/code&gt; to specify that only blank lines separate paragraphs. They do this by making the variable buffer-local in the buffer that is being put into C mode or Lisp mode, and then setting it to the new value for that mode. See &lt;a href=&quot;major-modes#Major-Modes&quot;&gt;Major Modes&lt;/a&gt;.</source>
          <target state="translated">バッファローカルバインディングの最も一般的な使用法は、コマンドの動作を制御する変数を変更するメジャーモードです。たとえば、CモードとLispモードはどちらも、変数 &lt;code&gt;paragraph-start&lt;/code&gt; を設定して、空白行のみが段落を区切るように指定します。これを行うには、CモードまたはLispモードにするバッファーで変数buffer-localを作成し、それをそのモードの新しい値に設定します。&lt;a href=&quot;major-modes#Major-Modes&quot;&gt;メジャーモードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="702580a0fb96dc0456829bb764ce3a637ffd43c4" translate="yes" xml:space="preserve">
          <source>The most common way of invoking a function is by evaluating a list. For example, evaluating the list &lt;code&gt;(concat &quot;a&quot; &quot;b&quot;)&lt;/code&gt; calls the function &lt;code&gt;concat&lt;/code&gt; with arguments &lt;code&gt;&quot;a&quot;&lt;/code&gt; and &lt;code&gt;&quot;b&quot;&lt;/code&gt;. See &lt;a href=&quot;evaluation#Evaluation&quot;&gt;Evaluation&lt;/a&gt;, for a description of evaluation.</source>
          <target state="translated">関数を呼び出す最も一般的な方法は、リストを評価することです。たとえば、リスト &lt;code&gt;(concat &quot;a&quot; &quot;b&quot;)&lt;/code&gt; を評価すると、関数 &lt;code&gt;concat&lt;/code&gt; が引数 &lt;code&gt;&quot;a&quot;&lt;/code&gt; および &lt;code&gt;&quot;b&quot;&lt;/code&gt; で呼び出されます。&lt;a href=&quot;evaluation#Evaluation&quot;&gt;評価&lt;/a&gt;の説明については、評価を参照してください。</target>
        </trans-unit>
        <trans-unit id="d131735a093456a7b6d24f8f667e2b2a59acf4e8" translate="yes" xml:space="preserve">
          <source>The most common way to compute the length of a list, when you are not worried that it may be circular, is with &lt;code&gt;length&lt;/code&gt;. See &lt;a href=&quot;sequence-functions#Sequence-Functions&quot;&gt;Sequence Functions&lt;/a&gt;.</source>
          <target state="translated">あなたはそれが円形であってもよいことを心配していない場合には、リストの長さを計算するための最も一般的な方法は、である &lt;code&gt;length&lt;/code&gt; 。&lt;a href=&quot;sequence-functions#Sequence-Functions&quot;&gt;シーケンス関数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="347c946e7276a21392ff141fa45e82a75d88329c" translate="yes" xml:space="preserve">
          <source>The most general of the two facilities is controlled by the variable &lt;code&gt;format-alist&lt;/code&gt;, a list of &lt;em&gt;file format&lt;/em&gt; specifications, which describe textual representations used in files for the data in an Emacs buffer. The descriptions for reading and writing are paired, which is why we call this &amp;ldquo;round-trip&amp;rdquo; specification (see &lt;a href=&quot;format-conversion-piecemeal#Format-Conversion-Piecemeal&quot;&gt;Format Conversion Piecemeal&lt;/a&gt;, for non-paired specification).</source>
          <target state="translated">2つの機能の中で最も一般的なものは、Emacsバッファー内のデータのファイルで使用されるテキスト表現を記述する&lt;em&gt;ファイル形式&lt;/em&gt;仕様のリストである変数 &lt;code&gt;format-alist&lt;/code&gt; によって制御されます。読み取りと書き込みの説明はペアになっているため、これを「ラウンドトリップ」仕様と呼びます（ペアになっていない仕様については、&lt;a href=&quot;format-conversion-piecemeal#Format-Conversion-Piecemeal&quot;&gt;フォーマット変換の断片を&lt;/a&gt;参照してください）。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cd8ccdf82fe4e52359af0e8e7311554e454e5dd4" translate="yes" xml:space="preserve">
          <source>The most general way to check the type of an object is to call the function &lt;code&gt;type-of&lt;/code&gt;. Recall that each object belongs to one and only one primitive type; &lt;code&gt;type-of&lt;/code&gt; tells you which one (see &lt;a href=&quot;lisp-data-types#Lisp-Data-Types&quot;&gt;Lisp Data Types&lt;/a&gt;). But &lt;code&gt;type-of&lt;/code&gt; knows nothing about non-primitive types. In most cases, it is more convenient to use type predicates than &lt;code&gt;type-of&lt;/code&gt;.</source>
          <target state="translated">オブジェクトのタイプをチェックする最も一般的な方法は、関数 &lt;code&gt;type-of&lt;/code&gt; を呼び出すことです。各オブジェクトは1つのプリミティブ型にのみ属していることを思い出してください。 &lt;code&gt;type-of&lt;/code&gt; はどれを教えてくれます（&lt;a href=&quot;lisp-data-types#Lisp-Data-Types&quot;&gt;Lispデータ型を&lt;/a&gt;参照）。しかし、 &lt;code&gt;type-of&lt;/code&gt; は非プリミティブ型については何も知りません。ほとんどの場合、 &lt;code&gt;type-of&lt;/code&gt; よりもtype述語を使用する方が便利です。</target>
        </trans-unit>
        <trans-unit id="c939ba5fb7000b3ef15a75258275fafbcfabe6bd" translate="yes" xml:space="preserve">
          <source>The most important time to enter the debugger is when a Lisp error happens. This allows you to investigate the immediate causes of the error.</source>
          <target state="translated">デバッガに入る際に最も重要なのは、Lispエラーが発生した時です。これにより、エラーの直接的な原因を調べることができます。</target>
        </trans-unit>
        <trans-unit id="18cb17b94649eed8921d3ce73d54ecd88ad00023" translate="yes" xml:space="preserve">
          <source>The most simple approach to make a new atomic window is to take an existing internal window and apply the following function:</source>
          <target state="translated">新しいアトミックウィンドウを作成する最も簡単な方法は、既存の内部ウィンドウを利用して以下の関数を適用することです。</target>
        </trans-unit>
        <trans-unit id="e1e8fa969491d0969bdb64f111c245755eef7fdd" translate="yes" xml:space="preserve">
          <source>The mutex ensures atomicity, and the loop is for robustness&amp;mdash;there may be spurious notifications.</source>
          <target state="translated">ミューテックスは原子性を保証し、ループは堅牢性のためのものです。誤った通知がある可能性があります。</target>
        </trans-unit>
        <trans-unit id="20600bb0132abd59b71aa3abecbc6c3c79d7ed11" translate="yes" xml:space="preserve">
          <source>The name &lt;code&gt;easy-mmode-define-minor-mode&lt;/code&gt; is an alias for this macro.</source>
          <target state="translated">&lt;code&gt;easy-mmode-define-minor-mode&lt;/code&gt; という名前は、このマクロのエイリアスです。</target>
        </trans-unit>
        <trans-unit id="0164386da8dab74b0dca8dc21998a6981ad8f3bc" translate="yes" xml:space="preserve">
          <source>The name &lt;var&gt;property&lt;/var&gt; is compared with the existing property names using &lt;code&gt;eq&lt;/code&gt;, so any object is a legitimate property.</source>
          <target state="translated">name &lt;var&gt;property&lt;/var&gt; は、 &lt;code&gt;eq&lt;/code&gt; を使用して既存のプロパティ名と比較されるため、どのオブジェクトも正当なプロパティです。</target>
        </trans-unit>
        <trans-unit id="81686d309fb6971d2f0465f17ae4fbda5d84fd34" translate="yes" xml:space="preserve">
          <source>The name of a face from which to inherit attributes, or a list of face names. Attributes from inherited faces are merged into the face like an underlying face would be, with higher priority than underlying faces (see &lt;a href=&quot;displaying-faces#Displaying-Faces&quot;&gt;Displaying Faces&lt;/a&gt;). If the face to inherit from is &lt;code&gt;unspecified&lt;/code&gt;, it is treated the same as &lt;code&gt;nil&lt;/code&gt;, since Emacs never merges &lt;code&gt;:inherit&lt;/code&gt; attributes. If a list of faces is used, attributes from faces earlier in the list override those from later faces.</source>
          <target state="translated">属性を継承する面の名前、または面名のリスト。継承された面の属性は、下にある面と同じように、下にある面よりも優先度が高く、面にマージされます（面の&lt;a href=&quot;displaying-faces#Displaying-Faces&quot;&gt;表示を&lt;/a&gt;参照）。継承する面が &lt;code&gt;unspecified&lt;/code&gt; されていない場合、Emacsは &lt;code&gt;:inherit&lt;/code&gt; 属性をマージしないため、 &lt;code&gt;nil&lt;/code&gt; と同じように扱われます。面のリストが使用されている場合、リストの前の面の属性が後の面の属性を上書きします。</target>
        </trans-unit>
        <trans-unit id="f14b4e7f3d214e623215de71ea76c596c58a8147" translate="yes" xml:space="preserve">
          <source>The name of an existing buffer. By default, uses the name of the current buffer (see &lt;a href=&quot;buffers#Buffers&quot;&gt;Buffers&lt;/a&gt;). Existing, Completion, Default, Prompt.</source>
          <target state="translated">既存のバッファの名前。デフォルトでは、現在のバッファの名前を使用します（「&lt;a href=&quot;buffers#Buffers&quot;&gt;バッファ&lt;/a&gt;」を参照）。既存、完了、デフォルト、プロンプト。</target>
        </trans-unit>
        <trans-unit id="2d3de7a674caef56f2edb7325689eee077d5c503" translate="yes" xml:space="preserve">
          <source>The name of the &lt;em&gt;font foundry&lt;/em&gt; for the font family specified by the &lt;code&gt;:family&lt;/code&gt; attribute (a string). See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Fonts.html#Fonts&quot;&gt;Fonts&lt;/a&gt; in</source>
          <target state="translated">&lt;code&gt;:family&lt;/code&gt; 属性（文字列）で指定されたフォントファミリの&lt;em&gt;フォントファウンドリ&lt;/em&gt;の名前。の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Fonts.html#Fonts&quot;&gt;フォント&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="d84e4020bfcfa0d5df12e11e36810c5a458fbc2c" translate="yes" xml:space="preserve">
          <source>The name of the application sending the notification. The default is &lt;code&gt;notifications-application-name&lt;/code&gt;.</source>
          <target state="translated">通知を送信するアプリケーションの名前。デフォルトは &lt;code&gt;notifications-application-name&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="31bc03ff12180dc54cb103b5e65b3d301c362de1" translate="yes" xml:space="preserve">
          <source>The name of the command that runs in the process. This is a string that usually specifies the name of the executable file of the process, without the leading directories. However, some special system processes can report strings that do not correspond to an executable file of a program.</source>
          <target state="translated">プロセス内で実行されるコマンドの名前です。これは、通常、プロセスの実行ファイル名を指定する文字列で、先頭のディレクトリは含まれていません。しかし、一部の特殊なシステムプロセスは、プログラムの実行ファイルに対応しない文字列を報告することができます。</target>
        </trans-unit>
        <trans-unit id="dd51404aec6b7e3516493114c0df7bd668d69bf8" translate="yes" xml:space="preserve">
          <source>The name of the device used by the terminal (e.g., &amp;lsquo;</source>
          <target state="translated">端末が使用するデバイスの名前（例： '</target>
        </trans-unit>
        <trans-unit id="86223234e995255179c7f5ed59ad98c61222e8f0" translate="yes" xml:space="preserve">
          <source>The name of the file visited in this buffer, or &lt;code&gt;nil&lt;/code&gt;. This is the value of the buffer-local variable &lt;code&gt;buffer-file-name&lt;/code&gt; (see &lt;a href=&quot;buffer-file-name#Buffer-File-Name&quot;&gt;Buffer File Name&lt;/a&gt;).</source>
          <target state="translated">このバッファでアクセスされたファイルの名前、または &lt;code&gt;nil&lt;/code&gt; 。これは、バッファローカル変数 &lt;code&gt;buffer-file-name&lt;/code&gt; の値です（&lt;a href=&quot;buffer-file-name#Buffer-File-Name&quot;&gt;バッファファイル名を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="9cf516df8bd70dd62a0f6c98d528269943f52170" translate="yes" xml:space="preserve">
          <source>The name of the font for displaying text in the frame. This is a string, either a valid font name for your system or the name of an Emacs fontset (see &lt;a href=&quot;fontsets#Fontsets&quot;&gt;Fontsets&lt;/a&gt;). It is equivalent to the &lt;code&gt;font&lt;/code&gt; attribute of the &lt;code&gt;default&lt;/code&gt; face.</source>
          <target state="translated">フレームにテキストを表示するためのフォントの名前。これは、文字列、お使いのシステムのための有効なフォント名やEmacsのフォントセットの名前（参照のいずれかである&lt;a href=&quot;fontsets#Fontsets&quot;&gt;フォントセットを&lt;/a&gt;）。これは、 &lt;code&gt;default&lt;/code&gt; 面の &lt;code&gt;font&lt;/code&gt; 属性と同等です。</target>
        </trans-unit>
        <trans-unit id="c12d93ce989364c1c7d4f9a741900cf941c5dab1" translate="yes" xml:space="preserve">
          <source>The name of the frame. The frame name serves as a default for the frame title, if the &lt;code&gt;title&lt;/code&gt; parameter is unspecified or &lt;code&gt;nil&lt;/code&gt;. If you don&amp;rsquo;t specify a name, Emacs sets the frame name automatically (see &lt;a href=&quot;frame-titles#Frame-Titles&quot;&gt;Frame Titles&lt;/a&gt;).</source>
          <target state="translated">フレームの名前。 &lt;code&gt;title&lt;/code&gt; パラメータが指定されていないか &lt;code&gt;nil&lt;/code&gt; の場合、フレーム名はフレームタイトルのデフォルトとして機能します。名前を指定しない場合、Emacsはフレーム名を自動的に設定します（&lt;a href=&quot;frame-titles#Frame-Titles&quot;&gt;フレームタイトルを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="d46a694cb309b5635ce7fcf75332cf135b35bc90" translate="yes" xml:space="preserve">
          <source>The name of the keysym that should stand for the Control modifier (respectively, for Alt, Meta, Hyper, and Super). For example, here is how to swap the Meta and Alt modifiers within Emacs:</source>
          <target state="translated">Control モディファイア (それぞれ Alt、Meta、Hyper、Super)を表すキーシムの名前です。例えば、Emacs内でMetaモディファイアとAltモディファイアを入れ替える方法を以下に示します。</target>
        </trans-unit>
        <trans-unit id="ea60fe57d26ab008b617db1ef54c09ed08318866" translate="yes" xml:space="preserve">
          <source>The name of the package is the same as the base name of the file, as written on the first line. Here, it is &amp;lsquo;</source>
          <target state="translated">パッケージの名前は、最初の行に記載されているファイルのベース名と同じです。ここにあります '</target>
        </trans-unit>
        <trans-unit id="e21cb3a697575e4abea29254c179c8f2f42f271b" translate="yes" xml:space="preserve">
          <source>The name of the process. If &lt;var&gt;name&lt;/var&gt; is not given, &lt;var&gt;port&lt;/var&gt; will serve as the process name as well.</source>
          <target state="translated">プロセスの名前。 &lt;var&gt;name&lt;/var&gt; が指定されていない場合、 &lt;var&gt;port&lt;/var&gt; はプロセス名としても機能します。</target>
        </trans-unit>
        <trans-unit id="33d6a32c269c144c63e53d0f2cba19c64ba4f020" translate="yes" xml:space="preserve">
          <source>The name of the terminal that the subprocess is using, or &lt;code&gt;nil&lt;/code&gt; if it is using pipes.</source>
          <target state="translated">サブプロセスが使用している端末の名前。パイプを使用している場合は &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb41db266496240f445c6fb5baacf0f57a720b53" translate="yes" xml:space="preserve">
          <source>The name of the variable in the C sources.</source>
          <target state="translated">Cソースの変数名。</target>
        </trans-unit>
        <trans-unit id="a4f65da0bf349454db5eb2650407f2361527b7b0" translate="yes" xml:space="preserve">
          <source>The name of the variable to be used by Lisp programs.</source>
          <target state="translated">Lispプログラムで使用される変数名です。</target>
        </trans-unit>
        <trans-unit id="3670965055037b4c4d3b2f88fc9e6bd05ff338ee" translate="yes" xml:space="preserve">
          <source>The name of this format.</source>
          <target state="translated">このフォーマットの名前です。</target>
        </trans-unit>
        <trans-unit id="8b92537c9d27af39ba1f11b476a35f30e67426f9" translate="yes" xml:space="preserve">
          <source>The name to use in the icon for this frame, when and if the icon appears. If this is &lt;code&gt;nil&lt;/code&gt;, the frame&amp;rsquo;s title is used.</source>
          <target state="translated">アイコンが表示されるときに、このフレームのアイコンで使用する名前。これが &lt;code&gt;nil&lt;/code&gt; の場合、フレームのタイトルが使用されます。</target>
        </trans-unit>
        <trans-unit id="773601ddb143e48334daba0a066ba237e287a6d6" translate="yes" xml:space="preserve">
          <source>The name used to open the font, a string.</source>
          <target state="translated">フォントを開くときに使用する名前、文字列。</target>
        </trans-unit>
        <trans-unit id="8fcccebb07f7dee6937b0795494fd79034dd2f04" translate="yes" xml:space="preserve">
          <source>The named &lt;var&gt;method&lt;/var&gt; was defined by using &lt;code&gt;cl-defmethod&lt;/code&gt;, with &lt;var&gt;specializers&lt;/var&gt; as its specializers.</source>
          <target state="translated">名前付き &lt;var&gt;method&lt;/var&gt; 使用して定義した &lt;code&gt;cl-defmethod&lt;/code&gt; 用いて、 &lt;var&gt;specializers&lt;/var&gt; そのspecializersとして。</target>
        </trans-unit>
        <trans-unit id="fe3c2e352de1a3150f44a8697619e4fda0c3a43a" translate="yes" xml:space="preserve">
          <source>The names &lt;small&gt;CAR&lt;/small&gt; and &lt;small&gt;CDR&lt;/small&gt; derive from the history of Lisp. The original Lisp implementation ran on an IBM 704 computer which divided words into two parts, the address and the decrement; &lt;small&gt;CAR&lt;/small&gt; was an instruction to extract the contents of the address part of a register, and &lt;small&gt;CDR&lt;/small&gt; an instruction to extract the contents of the decrement. By contrast, cons cells are named for the function &lt;code&gt;cons&lt;/code&gt; that creates them, which in turn was named for its purpose, the construction of cells.</source>
          <target state="translated">&lt;small&gt;CAR&lt;/small&gt;と&lt;small&gt;CDR&lt;/small&gt;という名前は、Lispの歴史に由来しています。元のLisp実装は、ワードをアドレスとデクリメントの2つの部分に分割するIBM704コンピューターで実行されました。&lt;small&gt;CAR&lt;/small&gt;はレジスタのアドレス部分の内容を抽出する命令であり、&lt;small&gt;CDR&lt;/small&gt;はデクリメントの内容を抽出する命令でした。対照的に、consセルは、それらを作成する関数 &lt;code&gt;cons&lt;/code&gt; にちなんで名付けられ、関数consは、その目的であるセルの構築にちなんで名付けられました。</target>
        </trans-unit>
        <trans-unit id="ba31422c908b55bb35be7435bbd860d86c29702f" translate="yes" xml:space="preserve">
          <source>The native position of a frame is the reference position for functions that set or return the current position of the mouse (see &lt;a href=&quot;mouse-position#Mouse-Position&quot;&gt;Mouse Position&lt;/a&gt;) and for functions dealing with the position of windows like &lt;code&gt;window-edges&lt;/code&gt;, &lt;code&gt;window-at&lt;/code&gt; or &lt;code&gt;coordinates-in-window-p&lt;/code&gt; (see &lt;a href=&quot;coordinates-and-windows#Coordinates-and-Windows&quot;&gt;Coordinates and Windows&lt;/a&gt;). It also specifies the (0, 0) origin for locating and positioning child frames within this frame (see &lt;a href=&quot;child-frames#Child-Frames&quot;&gt;Child Frames&lt;/a&gt;).</source>
          <target state="translated">フレームのネイティブ位置は関数の基準位置であるセットまたはマウス（参照の現在位置を返す&lt;a href=&quot;mouse-position#Mouse-Position&quot;&gt;マウス位置の&lt;/a&gt;）等の窓の位置を扱う関数の &lt;code&gt;window-edges&lt;/code&gt; 、 &lt;code&gt;window-at&lt;/code&gt; 又は &lt;code&gt;coordinates-in-window-p&lt;/code&gt; （&lt;a href=&quot;coordinates-and-windows#Coordinates-and-Windows&quot;&gt;座標とウィンドウを&lt;/a&gt;参照）。また、位置を特定し、この枠内の子フレームを位置決めするための（0、0）の原点を指定します（参照&lt;a href=&quot;child-frames#Child-Frames&quot;&gt;子フレームを&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="79b45725606655f4197b9ae82b2b82dab59aede2" translate="yes" xml:space="preserve">
          <source>The native size of a frame is the size Emacs passes to the window-system or window manager when creating or resizing the frame from within Emacs. It is also the size Emacs receives from the window-system or window manager whenever these resize the frame&amp;rsquo;s window-system window, for example, after maximizing the frame by clicking on the corresponding button in the title bar or when dragging its external border with the mouse.</source>
          <target state="translated">フレームのネイティブサイズは、Emacs内からフレームを作成またはサイズ変更するときにEmacsがウィンドウシステムまたはウィンドウマネージャーに渡すサイズです。これは、Emacsがウィンドウシステムまたはウィンドウマネージャーから受け取るサイズでもあります。たとえば、タイトルバーの対応するボタンをクリックしてフレームを最大化した後や、外部の境界線をマウス。</target>
        </trans-unit>
        <trans-unit id="14825e98a6bb7730ba468267f3c379f4d50eadd3" translate="yes" xml:space="preserve">
          <source>The network mask.</source>
          <target state="translated">ネットワークマスク。</target>
        </trans-unit>
        <trans-unit id="7fc5eefdbee523b516c3a56d241e65616fe5cea8" translate="yes" xml:space="preserve">
          <source>The new command &lt;var&gt;variant&lt;/var&gt; is defined to call the function &lt;var&gt;parent&lt;/var&gt;, then override certain aspects of that parent mode:</source>
          <target state="translated">新しいコマンド &lt;var&gt;variant&lt;/var&gt; は、関数 &lt;var&gt;parent&lt;/var&gt; を呼び出し、その親モードの特定の側面をオーバーライドするように定義されています。</target>
        </trans-unit>
        <trans-unit id="5ce6d115e553357dfd304409824efeb325dc1b14" translate="yes" xml:space="preserve">
          <source>The new definition of &lt;code&gt;for&lt;/code&gt; has a new problem: it introduces a local variable named &lt;code&gt;max&lt;/code&gt; which the user does not expect. This causes trouble in examples such as the following:</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; の新しい定義には、新しい問題があります。それは、ユーザーが予期しない &lt;code&gt;max&lt;/code&gt; という名前のローカル変数を導入します。これにより、次のような例で問題が発生します。</target>
        </trans-unit>
        <trans-unit id="6a336356f22c547d590556ea521f2dad738c8349" translate="yes" xml:space="preserve">
          <source>The new fontset has two names, one long and one short. The long name is &lt;var&gt;fontpattern&lt;/var&gt; in its entirety. The short name is &amp;lsquo;</source>
          <target state="translated">新しいフォントセットには、長い名前と短い名前の2つの名前があります。長い名前は全体が &lt;var&gt;fontpattern&lt;/var&gt; です。短い名前は '</target>
        </trans-unit>
        <trans-unit id="c3a411aa70ab9bb343c22475f4a8a3db7a1aaaa6" translate="yes" xml:space="preserve">
          <source>The new marker&amp;rsquo;s insertion type is specified by the argument &lt;var&gt;insertion-type&lt;/var&gt;. See &lt;a href=&quot;marker-insertion-types#Marker-Insertion-Types&quot;&gt;Marker Insertion Types&lt;/a&gt;.</source>
          <target state="translated">新しいマーカーの挿入タイプは、引数 &lt;var&gt;insertion-type&lt;/var&gt; で指定されます。&lt;a href=&quot;marker-insertion-types#Marker-Insertion-Types&quot;&gt;マーカー挿入タイプを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e53ad877e538af9a720bbb66ac6ff5d4008840d4" translate="yes" xml:space="preserve">
          <source>The new mode has its own abbrev table, kept in the variable &lt;code&gt;&lt;var&gt;variant&lt;/var&gt;-abbrev-table&lt;/code&gt;, unless you override this using the &lt;code&gt;:abbrev-table&lt;/code&gt; keyword (see below).</source>
          <target state="translated">新しいモードには独自の略語テーブルがあり、 &lt;code&gt;:abbrev-table&lt;/code&gt; キーワードを使用してこれをオーバーライドしない限り、変数 &lt;code&gt;&lt;var&gt;variant&lt;/var&gt;-abbrev-table&lt;/code&gt; tableに保持されます（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="b817ae5e0fd787bbcf07fe3487597358970c4e96" translate="yes" xml:space="preserve">
          <source>The new mode has its own mode hook, &lt;code&gt;&lt;var&gt;variant&lt;/var&gt;-hook&lt;/code&gt;. It runs this hook, after running the hooks of its ancestor modes, with &lt;code&gt;run-mode-hooks&lt;/code&gt;, as the last thing it does, apart from running any &lt;code&gt;:after-hook&lt;/code&gt; form it may have. See &lt;a href=&quot;mode-hooks#Mode-Hooks&quot;&gt;Mode Hooks&lt;/a&gt;.</source>
          <target state="translated">新しいモードは、独自のモードフック、持っている &lt;code&gt;&lt;var&gt;variant&lt;/var&gt;-hook&lt;/code&gt; 。祖先モードのフックを実行した後、最後に &lt;code&gt;run-mode-hooks&lt;/code&gt; に、run-mode-hooksを使用してこのフックを実行します。ただし、 &lt;code&gt;:after-hook&lt;/code&gt; フォームを実行することは別としてです。&lt;a href=&quot;mode-hooks#Mode-Hooks&quot;&gt;モードフックを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="00570ab789edcc32fb33047192ad9e67acc9f749" translate="yes" xml:space="preserve">
          <source>The new mode has its own sparse keymap, named &lt;code&gt;&lt;var&gt;variant&lt;/var&gt;-map&lt;/code&gt;. &lt;code&gt;define-derived-mode&lt;/code&gt; makes the parent mode&amp;rsquo;s keymap the parent of the new map, unless &lt;code&gt;&lt;var&gt;variant&lt;/var&gt;-map&lt;/code&gt; is already set and already has a parent.</source>
          <target state="translated">新しいモードには、 &lt;code&gt;&lt;var&gt;variant&lt;/var&gt;-map&lt;/code&gt; という名前の独自のスパースキーマップがあります。 &lt;code&gt;define-derived-mode&lt;/code&gt; は、 &lt;code&gt;&lt;var&gt;variant&lt;/var&gt;-map&lt;/code&gt; がすでに設定されていて、すでに親を持っていない限り、親モードのキーマップを新しいマップの親にします。</target>
        </trans-unit>
        <trans-unit id="945a91028fd0f8fc9a5b05174767e7c35cb3f960" translate="yes" xml:space="preserve">
          <source>The new mode has its own syntax table, kept in the variable &lt;code&gt;&lt;var&gt;variant&lt;/var&gt;-syntax-table&lt;/code&gt;, unless you override this using the &lt;code&gt;:syntax-table&lt;/code&gt; keyword (see below). &lt;code&gt;define-derived-mode&lt;/code&gt; makes the parent mode&amp;rsquo;s syntax-table the parent of &lt;code&gt;&lt;var&gt;variant&lt;/var&gt;-syntax-table&lt;/code&gt;, unless the latter is already set and already has a parent different from the standard syntax table.</source>
          <target state="translated">新しいモードには独自の構文テーブルがあり、 &lt;code&gt;:syntax-table&lt;/code&gt; キーワードを使用してこれをオーバーライドしない限り、変数 &lt;code&gt;&lt;var&gt;variant&lt;/var&gt;-syntax-table&lt;/code&gt; tableに保持されます（以下を参照）。 &lt;code&gt;&lt;var&gt;variant&lt;/var&gt;-syntax-table&lt;/code&gt; &lt;code&gt;define-derived-mode&lt;/code&gt; は、親モードの構文テーブルを &lt;var&gt;variant&lt;/var&gt; -syntax-tableの親にします。ただし、後者がすでに設定されていて、標準の構文テーブルとは異なる親を持っている場合を除きます。</target>
        </trans-unit>
        <trans-unit id="c2597cc1d2ff3aeb01d30bac9fc3cde7623c9599" translate="yes" xml:space="preserve">
          <source>The new thread is created with no local variable bindings in effect. The new thread&amp;rsquo;s current buffer is inherited from the current thread.</source>
          <target state="translated">新しいスレッドは、ローカル変数のバインディングが有効になっていない状態で作成されます。新しいスレッドの現在のバッファは、現在のスレッドから継承されます。</target>
        </trans-unit>
        <trans-unit id="8df0e83e8de1eb380770375b9be1ffb711a27047" translate="yes" xml:space="preserve">
          <source>The newest element in the ring always has index 0. Higher indices correspond to older elements. Indices are computed modulo the ring length. Index -1 corresponds to the oldest element, -2 to the next-oldest, and so forth.</source>
          <target state="translated">リング内で最も新しい要素は常にインデックス 0 を持ちます。 インデックスが大きいほど古い要素に対応します。インデックスはリングの長さに応じて計算されます。インデックス -1 は最も古い要素に対応し,-2 は次に古い要素に対応します.</target>
        </trans-unit>
        <trans-unit id="8e1c114485b4df403bf7d12c30cb8c0fba64430c" translate="yes" xml:space="preserve">
          <source>The newline character (character code 10) has a special effect: it ends the preceding line and starts a new line.</source>
          <target state="translated">改行文字(文字コード10)は、前の行を終了して新しい行を開始するという特殊な効果を持っています。</target>
        </trans-unit>
        <trans-unit id="2e9517c16f2af179f8f22773bf78a93935c17bc6" translate="yes" xml:space="preserve">
          <source>The newline character is not special in the read syntax for strings; if you write a new line between the double-quotes, it becomes a character in the string. But an escaped newline&amp;mdash;one that is preceded by &amp;lsquo;</source>
          <target state="translated">改行文字は、文字列の読み取り構文では特別ではありません。二重引用符の間に改行を入れると、文字列の文字になります。しかし、エスケープされた改行-前に 'が付いているもの</target>
        </trans-unit>
        <trans-unit id="4efa69ac3b7f005e072f33b3c4d9d2015117589e" translate="yes" xml:space="preserve">
          <source>The next &lt;code&gt;pred&lt;/code&gt; (lines 4-5) evaluates &lt;code&gt;(string-match&amp;nbsp;RX&amp;nbsp;&lt;var&gt;expval&lt;/var&gt;)&lt;/code&gt; and matches if the result is non-&lt;code&gt;nil&lt;/code&gt;, which means that &lt;var&gt;expval&lt;/var&gt; has the desired form: &lt;code&gt;key:NUMBER&lt;/code&gt;. Again, failing this, &lt;code&gt;pred&lt;/code&gt; fails and &lt;code&gt;and&lt;/code&gt;, too.</source>
          <target state="translated">次の &lt;code&gt;pred&lt;/code&gt; （4〜5行目）は &lt;code&gt;(string-match&amp;nbsp;RX&amp;nbsp;&lt;var&gt;expval&lt;/var&gt;)&lt;/code&gt; を評価し、結果が &lt;code&gt;nil&lt;/code&gt; 以外の場合に一致します。つまり、 &lt;var&gt;expval&lt;/var&gt; の形式は &lt;code&gt;key:NUMBER&lt;/code&gt; です。繰り返しますが、これを失敗し、 &lt;code&gt;pred&lt;/code&gt; は失敗し、 &lt;code&gt;and&lt;/code&gt; 、あまりにも、。</target>
        </trans-unit>
        <trans-unit id="b7694837921d35a54e56c860831d6080ffe61e74" translate="yes" xml:space="preserve">
          <source>The next and previous sibling of this window as Lisp objects. &lt;code&gt;next&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; if the window is the right-most or bottom-most in its group; &lt;code&gt;prev&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; if it is the left-most or top-most in its group. Whether the sibling is left/right or up/down is determined by the &lt;code&gt;horizontal&lt;/code&gt; field of the sibling&amp;rsquo;s parent: if it&amp;rsquo;s non-zero, the siblings are arranged horizontally.</source>
          <target state="translated">Lispオブジェクトとしてのこのウィンドウの次および前の兄弟。ウィンドウがそのグループの右端または一番下にある場合、 &lt;code&gt;next&lt;/code&gt; は &lt;code&gt;nil&lt;/code&gt; です。 &lt;code&gt;prev&lt;/code&gt; は、グループの左端または一番上にある場合は &lt;code&gt;nil&lt;/code&gt; です。兄弟が左/右か上/下かは、兄弟の親の &lt;code&gt;horizontal&lt;/code&gt; フィールドによって決定されます。ゼロ以外の場合、兄弟は水平に配置されます。</target>
        </trans-unit>
        <trans-unit id="20020241f8b21f6f1b62e467e43654e312585449" translate="yes" xml:space="preserve">
          <source>The next four arguments to &lt;code&gt;sort-subr&lt;/code&gt; are functions that are called to move point across a sort record. They are called many times from within &lt;code&gt;sort-subr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sort-subr&lt;/code&gt; の次の4つの引数は、ソートレコード全体でポイントを移動するために呼び出される関数です。それらは &lt;code&gt;sort-subr&lt;/code&gt; 内から何度も呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6e6df56c6cfd59f81e1889be41424dbd8e05af1c" translate="yes" xml:space="preserve">
          <source>The next four functions all return markers with insertion type &lt;code&gt;nil&lt;/code&gt;. See &lt;a href=&quot;marker-insertion-types#Marker-Insertion-Types&quot;&gt;Marker Insertion Types&lt;/a&gt;.</source>
          <target state="translated">次の4つの関数はすべて、挿入タイプ &lt;code&gt;nil&lt;/code&gt; のマーカーを返します。&lt;a href=&quot;marker-insertion-types#Marker-Insertion-Types&quot;&gt;マーカー挿入タイプを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e6e450313c4033e8457df931e4950913eecef97c" translate="yes" xml:space="preserve">
          <source>The next redisplay after resumption will redraw the entire screen, unless the variable &lt;code&gt;no-redraw-on-reenter&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;. See &lt;a href=&quot;refresh-screen#Refresh-Screen&quot;&gt;Refresh Screen&lt;/a&gt;.</source>
          <target state="translated">再開後の次の再表示は、変数 &lt;code&gt;no-redraw-on-reenter&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; 以外でない限り、画面全体を再描画します。&lt;a href=&quot;refresh-screen#Refresh-Screen&quot;&gt;画面の更新を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3c62480706c4435432f9cbd719f04c8c0e8d4d4b" translate="yes" xml:space="preserve">
          <source>The next step is to determine precisely what is wrong. There is no way to be sure of this except by studying the program, but often the existing indentation is a clue to where the parentheses should have been. The easiest way to use this clue is to reindent with</source>
          <target state="translated">次のステップは、何が間違っているのかを正確に判断することです。プログラムを研究する以外にこれを確かめる方法はありませんが、多くの場合、既存のインデントが括弧がどこにあるべきだったかの手掛かりになります。この手掛かりを利用する最も簡単な方法は</target>
        </trans-unit>
        <trans-unit id="e881ec82dc043025b05e415a53a5307e0b9d1a7c" translate="yes" xml:space="preserve">
          <source>The next subsection describes how to define your own fringe bitmaps.</source>
          <target state="translated">次のサブセクションでは、独自のフリンジビットマップを定義する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="28f5894deb6be2c66452b9dec8f473fdb6fefb38" translate="yes" xml:space="preserve">
          <source>The next two commands are similar to &lt;code&gt;switch-to-buffer&lt;/code&gt;, except for the described features.</source>
          <target state="translated">次の2つのコマンドは、説明されている機能を除いて、 &lt;code&gt;switch-to-buffer&lt;/code&gt; に似ています。</target>
        </trans-unit>
        <trans-unit id="7cc9290c0d0d2e4b42ba908efb154f702ea15fc9" translate="yes" xml:space="preserve">
          <source>The next two functions either return the argument &lt;var&gt;string&lt;/var&gt;, or a newly created string with no text properties.</source>
          <target state="translated">次の2つの関数は、引数 &lt;var&gt;string&lt;/var&gt; 、またはテキストプロパティのない新しく作成された文字列を返します。</target>
        </trans-unit>
        <trans-unit id="c1bc1e54049d4149bb73763e09a0583d8724361a" translate="yes" xml:space="preserve">
          <source>The next two functions signal an error if the mark does not point anywhere. If Transient Mark mode is enabled and &lt;code&gt;mark-even-if-inactive&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, they also signal an error if the mark is inactive.</source>
          <target state="translated">次の2つの関数は、マークがどこも指していない場合にエラーを通知します。トランジェントマークモードが有効で、 &lt;code&gt;mark-even-if-inactive&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; の場合、マークが非アクティブの場合もエラーを通知します。</target>
        </trans-unit>
        <trans-unit id="377df722feabe51756819277064a7bd38601469b" translate="yes" xml:space="preserve">
          <source>The non-printable &lt;em&gt;&lt;acronym&gt;ASCII&lt;/acronym&gt; control characters&lt;/em&gt;&amp;mdash;character codes 0 through 31, as well as the</source>
          <target state="translated">印刷不可能な&lt;em&gt;&lt;acronym&gt;ASCII&lt;/acronym&gt;制御文字&lt;/em&gt;&amp;mdash;&lt;em&gt;文字&lt;/em&gt;コード0から31、および</target>
        </trans-unit>
        <trans-unit id="ce617211fc2ab0bb06bc37aae9e870737adcb1d5" translate="yes" xml:space="preserve">
          <source>The nonce is currently unused and only some MACs support it.</source>
          <target state="translated">nonceは現在使用されておらず、一部のMACのみがサポートしています。</target>
        </trans-unit>
        <trans-unit id="72d8a158209595f8bea693b50b579072c4c32b6d" translate="yes" xml:space="preserve">
          <source>The normal use of this function is to get the window system&amp;rsquo;s clipboard as the most recent kill, even if the selection belongs to another application. See &lt;a href=&quot;window-system-selections#Window-System-Selections&quot;&gt;Window System Selections&lt;/a&gt;. However, if the clipboard contents come from the current Emacs session, this function should return &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">この関数の通常の使用法は、選択が別のアプリケーションに属している場合でも、ウィンドウシステムのクリップボードを最新の強制終了として取得することです。&lt;a href=&quot;window-system-selections#Window-System-Selections&quot;&gt;ウィンドウシステムの選択を&lt;/a&gt;参照してください。ただし、クリップボードの内容が現在のEmacsセッションからのものである場合、この関数は &lt;code&gt;nil&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="7e4d1f4d52266035590d8daa8fadfd0297361c08" translate="yes" xml:space="preserve">
          <source>The normal use of this function is to put newly killed text in the window system&amp;rsquo;s clipboard. See &lt;a href=&quot;window-system-selections#Window-System-Selections&quot;&gt;Window System Selections&lt;/a&gt;.</source>
          <target state="translated">この関数の通常の使用法は、新しく強制終了されたテキストをウィンドウシステムのクリップボードに置くことです。&lt;a href=&quot;window-system-selections#Window-System-Selections&quot;&gt;ウィンドウシステムの選択を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fe1cb8bbe65ec53be9067206dd1dfa6d2cad2dca" translate="yes" xml:space="preserve">
          <source>The normal value of this variable includes &lt;code&gt;user-error&lt;/code&gt;, as well as several errors that happen often during editing but rarely result from bugs in Lisp programs. However, &amp;ldquo;rarely&amp;rdquo; is not &amp;ldquo;never&amp;rdquo;; if your program fails with an error that matches this list, you may try changing this list to debug the error. The easiest way is usually to set &lt;code&gt;debug-ignored-errors&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">この変数の通常の値には、 &lt;code&gt;user-error&lt;/code&gt; ほか、編集中に頻繁に発生するが、Lispプログラムのバグが原因で発生することはめったにないいくつかのエラーが含まれます。ただし、「まれに」は「決して」ではありません。このリストに一致するエラーでプログラムが失敗した場合は、このリストを変更してエラーをデバッグしてみてください。最も簡単な方法は、通常、 &lt;code&gt;debug-ignored-errors&lt;/code&gt; を &lt;code&gt;nil&lt;/code&gt; に設定することです。</target>
        </trans-unit>
        <trans-unit id="615cf55184d1614679df8cf6d2cbadac0179b9d2" translate="yes" xml:space="preserve">
          <source>The normal way to use this feature is that the &lt;code&gt;buffer-access-fontify-functions&lt;/code&gt; functions add this property, as well as others, to the characters they operate on. That way, they avoid being called over and over for the same text.</source>
          <target state="translated">この機能を使用する通常の方法は、 &lt;code&gt;buffer-access-fontify-functions&lt;/code&gt; 関数が、操作する文字にこのプロパティと他のプロパティを追加することです。そうすれば、同じテキストに対して何度も呼び出されることを回避できます。</target>
        </trans-unit>
        <trans-unit id="5bf403f55157eac254eec47b71824c0e07ba8c39" translate="yes" xml:space="preserve">
          <source>The normal way to use this function is after reading text from a file without decoding, if you decide you would rather have decoded it. Instead of deleting the text and reading it again, this time with decoding, you can call this function.</source>
          <target state="translated">この関数を使用する通常の方法は、ファイルからテキストをデコードせずに読み込んだ後に、デコードした方が良かったと判断した場合です。テキストを削除して再度読み込んだ後に、今度はデコードして読み込んだ後に、この関数を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="14a4051b3db7273c333fed729bd4705f42b76cf0" translate="yes" xml:space="preserve">
          <source>The notification &lt;var&gt;id&lt;/var&gt; that this notification replaces. &lt;var&gt;id&lt;/var&gt; must be the result of a previous &lt;code&gt;notifications-notify&lt;/code&gt; call.</source>
          <target state="translated">この通知が置き換える通知 &lt;var&gt;id&lt;/var&gt; 。 &lt;var&gt;id&lt;/var&gt; は、以前の &lt;code&gt;notifications-notify&lt;/code&gt; 結果である必要があります-通知呼び出し。</target>
        </trans-unit>
        <trans-unit id="235facb694a3673208a66d292afda77da06ef3e0" translate="yes" xml:space="preserve">
          <source>The notification body text. Depending on the implementation of the notification server, the text could contain HTML markups, like &amp;lsquo;</source>
          <target state="translated">通知本文テキスト。通知サーバーの実装によっては、テキストに「」のようなHTMLマークアップが含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="d6d14187af51bbbd99a616baf65fac010ae3eeaf" translate="yes" xml:space="preserve">
          <source>The notification title.</source>
          <target state="translated">通知のタイトル。</target>
        </trans-unit>
        <trans-unit id="e447b4e8d9dde9805fe495b79d88178d76f80ab4" translate="yes" xml:space="preserve">
          <source>The number and significance of the objects in &lt;var&gt;data&lt;/var&gt; depends on &lt;var&gt;error-symbol&lt;/var&gt;. For example, with a &lt;code&gt;wrong-type-argument&lt;/code&gt; error, there should be two objects in the list: a predicate that describes the type that was expected, and the object that failed to fit that type.</source>
          <target state="translated">&lt;var&gt;data&lt;/var&gt; 内のオブジェクトの数と重要性は、 &lt;var&gt;error-symbol&lt;/var&gt; によって異なります。たとえば、 &lt;code&gt;wrong-type-argument&lt;/code&gt; エラーの場合、リストには2つのオブジェクトが含まれている必要があります。1つは予期された型を説明する述語で、もう1つはその型に適合しなかったオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="77b891078bd95b24372c2265e2e2cd84fcd84a78" translate="yes" xml:space="preserve">
          <source>The number of &amp;lsquo;</source>
          <target state="translated">'の数</target>
        </trans-unit>
        <trans-unit id="69d9f447f26ab68125cf7f7418e7b287e062c516" translate="yes" xml:space="preserve">
          <source>The number of bits per byte, which can be 7 or 8. If &lt;var&gt;bytesize&lt;/var&gt; is not given or &lt;code&gt;nil&lt;/code&gt;, it defaults to 8.</source>
          <target state="translated">バイトあたりのビット数。7または8です &lt;var&gt;bytesize&lt;/var&gt; が指定されていないか &lt;code&gt;nil&lt;/code&gt; の場合、デフォルトで8になります。</target>
        </trans-unit>
        <trans-unit id="e69db1d2aafc1ecd874d0fd32605ef1930ae4340" translate="yes" xml:space="preserve">
          <source>The number of bool vector entries stored for each row; the smallest multiple of 8 greater than or equal to &lt;var&gt;width&lt;/var&gt;.</source>
          <target state="translated">各行に格納されているブールベクトルエントリの数。 &lt;var&gt;width&lt;/var&gt; 以上の8の最小公倍数。</target>
        </trans-unit>
        <trans-unit id="0c696104f1d296d98cbf922f187ea8cac7fb9e83" translate="yes" xml:space="preserve">
          <source>The number of buffer objects in use. This includes killed buffers invisible to users, i.e., all buffers in &lt;code&gt;all_buffers&lt;/code&gt; list.</source>
          <target state="translated">使用中のバッファオブジェクトの数。これには、ユーザーには表示されない &lt;code&gt;all_buffers&lt;/code&gt; されたバッファー、つまりall_buffersリスト内のすべてのバッファーが含まれます。</target>
        </trans-unit>
        <trans-unit id="252d4f28db846bbf940d1217fadcdf56740580e5" translate="yes" xml:space="preserve">
          <source>The number of characters at the start and end of the text that are known to be unchanged since the last complete redisplay.</source>
          <target state="translated">前回の完全な再表示から変更されていないことがわかっているテキストの先頭と末尾の文字数。</target>
        </trans-unit>
        <trans-unit id="89a302eaa04563e94b2b926ac658405d57a2374e" translate="yes" xml:space="preserve">
          <source>The number of cons cells for which space has been obtained from the operating system, but that are not currently being used.</source>
          <target state="translated">OSからスペースが取得されているが、現在使用されていないコンサセルの数。</target>
        </trans-unit>
        <trans-unit id="928cf9ce73beb664ce217349a8d5e6418448c470" translate="yes" xml:space="preserve">
          <source>The number of cons cells in use.</source>
          <target state="translated">使用しているコンサセルの数です。</target>
        </trans-unit>
        <trans-unit id="24f7af3992f54804406740120a68503980b1aaf3" translate="yes" xml:space="preserve">
          <source>The number of currently active &lt;code&gt;unwind-protect&lt;/code&gt; forms counts, together with the number of local variable bindings, against the limit &lt;code&gt;max-specpdl-size&lt;/code&gt; (see &lt;a href=&quot;local-variables#Definition-of-max_002dspecpdl_002dsize&quot;&gt;Local Variables&lt;/a&gt;).</source>
          <target state="translated">現在アクティブな &lt;code&gt;unwind-protect&lt;/code&gt; フォームの数は、ローカル変数バインディングの数とともに、制限 &lt;code&gt;max-specpdl-size&lt;/code&gt; に対してカウントされます（&lt;a href=&quot;local-variables#Definition-of-max_002dspecpdl_002dsize&quot;&gt;ローカル変数を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="9c35725bb13e2859f8f990b1b6c1b4705566676f" translate="yes" xml:space="preserve">
          <source>The number of currently active calls to &lt;code&gt;eval&lt;/code&gt; is limited to &lt;code&gt;max-lisp-eval-depth&lt;/code&gt; (see below).</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; への現在アクティブな呼び出しの数は &lt;code&gt;max-lisp-eval-depth&lt;/code&gt; に制限されています（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="26632f6fb1891fe7db7e3348f1653f11addc21e8" translate="yes" xml:space="preserve">
          <source>The number of floats for which space has been obtained from the operating system, but that are not currently being used.</source>
          <target state="translated">オペレーティングシステムからスペースが取得されているが、現在使用されていないフロートの数。</target>
        </trans-unit>
        <trans-unit id="f76646dd4182a8fa6a14d755790c6c7d2864f09c" translate="yes" xml:space="preserve">
          <source>The number of floats in use.</source>
          <target state="translated">使用しているフロートの数です。</target>
        </trans-unit>
        <trans-unit id="7d151b45b0c5d7e9e3c605630f35524687f27612" translate="yes" xml:space="preserve">
          <source>The number of free slots in all vector blocks.</source>
          <target state="translated">すべてのベクトルブロックのフリースロットの数です。</target>
        </trans-unit>
        <trans-unit id="7a5cbacf926b1512cd0ba23780e03b3e4a98118a" translate="yes" xml:space="preserve">
          <source>The number of intervals for which space has been obtained from the operating system, but that are not currently being used.</source>
          <target state="translated">OSからスペースを取得しているが、現在は使用していない間隔の数。</target>
        </trans-unit>
        <trans-unit id="602801cbd4078754bb74d81473f6f900a3e284ba" translate="yes" xml:space="preserve">
          <source>The number of intervals in use.</source>
          <target state="translated">使用中の間隔の数です。</target>
        </trans-unit>
        <trans-unit id="92de848307ab335b54cbbb276e13709bea52b86a" translate="yes" xml:space="preserve">
          <source>The number of lines to allocate at the top of the frame for a menu bar (see &lt;a href=&quot;menu-bar#Menu-Bar&quot;&gt;Menu Bar&lt;/a&gt;). The default is one if Menu Bar mode is enabled and zero otherwise. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Menu-Bars.html#Menu-Bars&quot;&gt;Menu Bars&lt;/a&gt; in</source>
          <target state="translated">メニューバーのためのフレームの上部に配分する行数（参照&lt;a href=&quot;menu-bar#Menu-Bar&quot;&gt;メニューバー&lt;/a&gt;）。デフォルトは、メニューバーモードが有効になっている場合は1、それ以外の場合は0です。の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Menu-Bars.html#Menu-Bars&quot;&gt;メニューバー&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="5827e772cc5045e135130ea07603e84be0177d9b" translate="yes" xml:space="preserve">
          <source>The number of lines to use for the tool bar (see &lt;a href=&quot;tool-bar#Tool-Bar&quot;&gt;Tool Bar&lt;/a&gt;). The default is one if Tool Bar mode is enabled and zero otherwise. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Tool-Bars.html#Tool-Bars&quot;&gt;Tool Bars&lt;/a&gt; in</source>
          <target state="translated">ツールバーに使用する行数（参照&lt;a href=&quot;tool-bar#Tool-Bar&quot;&gt;ツールバーを&lt;/a&gt;）。デフォルトは、ツールバーモードが有効になっている場合は1、それ以外の場合は0です。参照してください。&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Tool-Bars.html#Tool-Bars&quot;&gt;ツールバーを&lt;/a&gt;中</target>
        </trans-unit>
        <trans-unit id="c7f4d7c21579924cbdecd9574578a0259e96375a" translate="yes" xml:space="preserve">
          <source>The number of major page faults caused by the process since its beginning. (Major page faults require a disk to be read, and are thus more expensive than minor page faults.)</source>
          <target state="translated">プロセスが開始してから発生したメジャーページフォルトの数。(メジャーページフォルトはディスクを読み込む必要があるため、マイナーページフォルトよりも高価です)。</target>
        </trans-unit>
        <trans-unit id="190fa917612a525a4d94c58578c9ab17ff36e051" translate="yes" xml:space="preserve">
          <source>The number of minor page faults caused by the process since its beginning. (Minor page faults are those that don&amp;rsquo;t involve reading from disk.)</source>
          <target state="translated">プロセスの開始以降に発生したマイナーページフォールトの数。（マイナーページフォールトは、ディスクからの読み取りを伴わないフォールトです。）</target>
        </trans-unit>
        <trans-unit id="9d5ec76f037793ae468581429ef386612dd124f8" translate="yes" xml:space="preserve">
          <source>The number of minutes past the hour, as an integer between 0 and 59.</source>
          <target state="translated">時から何分経過したかを0から59までの整数で表します。</target>
        </trans-unit>
        <trans-unit id="ad0f8ee15c9aa29fe5fb9cbe7ca13d4d44b5ef6a" translate="yes" xml:space="preserve">
          <source>The number of names the file has (&lt;code&gt;file-attribute-link-number&lt;/code&gt;). Alternate names, also known as hard links, can be created by using the &lt;code&gt;add-name-to-file&lt;/code&gt; function (see &lt;a href=&quot;changing-files#Changing-Files&quot;&gt;Changing Files&lt;/a&gt;).</source>
          <target state="translated">ファイルが持つ名前の数（ &lt;code&gt;file-attribute-link-number&lt;/code&gt; ）。ハードリンクとも呼ばれる代替名は、 &lt;code&gt;add-name-to-file&lt;/code&gt; 機能を使用して作成できます（&lt;a href=&quot;changing-files#Changing-Files&quot;&gt;ファイルの変更を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="325baa1e7adcb16dc50f6245d77c21d0debe4ede" translate="yes" xml:space="preserve">
          <source>The number of pixels from the top of the scroll bar to the click position. On some toolkits, including GTK+, Emacs cannot extract this data, so the value is always &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">スクロールバーの上部からクリック位置までのピクセル数。GTK +を含む一部のツールキットでは、Emacsはこのデータを抽出できないため、値は常に &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="81f70c31bc5858d0b9ea55feb80b52d7b0622a5a" translate="yes" xml:space="preserve">
          <source>The number of seconds past the minute, with form described below.</source>
          <target state="translated">分を過ぎた秒数を、後述のフォームで表示します。</target>
        </trans-unit>
        <trans-unit id="16f645a9b7573d7e0be85843502b2537b32b9812" translate="yes" xml:space="preserve">
          <source>The number of slots in all used vectors. Slot counts might include some or all overhead from vector headers, depending on the platform.</source>
          <target state="translated">使用されているすべてのベクターのスロット数。スロット数には、プラットフォームによっては、ベクターヘッダからのオーバーヘッドの一部または全部が含まれているかもしれません。</target>
        </trans-unit>
        <trans-unit id="b4c7e2965ba0ba590e73e99ea618e58e9f048f9a" translate="yes" xml:space="preserve">
          <source>The number of stopbits used to terminate a transmission of each byte. &lt;var&gt;stopbits&lt;/var&gt; can be 1 or 2. If &lt;var&gt;stopbits&lt;/var&gt; is not given or &lt;code&gt;nil&lt;/code&gt;, it defaults to 1.</source>
          <target state="translated">各バイトの送信を終了するために使用されるストップビットの数。 &lt;var&gt;stopbits&lt;/var&gt; は1または2にすることができます。 &lt;var&gt;stopbits&lt;/var&gt; が指定されていないか &lt;code&gt;nil&lt;/code&gt; の場合、デフォルトで1になります。</target>
        </trans-unit>
        <trans-unit id="584465d6a9c8121efa55f5d37a6a82a27d12aa63" translate="yes" xml:space="preserve">
          <source>The number of string headers for which space has been obtained from the operating system, but that are not currently being used.</source>
          <target state="translated">オペレーティングシステムからスペースを取得したが、現在は使用されていない文字列ヘッダの数。</target>
        </trans-unit>
        <trans-unit id="11eee3b04765f2e7c114ec5eb04da8bccc9c8d67" translate="yes" xml:space="preserve">
          <source>The number of string headers in use.</source>
          <target state="translated">使用している文字列ヘッダーの数。</target>
        </trans-unit>
        <trans-unit id="2adc6fb63d1bc6a3331dbbc9b05d0c9bd724c7c7" translate="yes" xml:space="preserve">
          <source>The number of symbols for which space has been obtained from the operating system, but that are not currently being used.</source>
          <target state="translated">OSからスペースが取得されているが、現在使用されていないシンボルの数。</target>
        </trans-unit>
        <trans-unit id="710444e67e6d2313474db8860db1bd9ce9d6ab60" translate="yes" xml:space="preserve">
          <source>The number of symbols in use.</source>
          <target state="translated">使用しているシンボルの数です。</target>
        </trans-unit>
        <trans-unit id="88b7053411bf3b3b073ba4f231a1da2711e2f38c" translate="yes" xml:space="preserve">
          <source>The number of threads in the process.</source>
          <target state="translated">処理中のスレッド数。</target>
        </trans-unit>
        <trans-unit id="7d720d63753916813fff9649510319aa14c02852" translate="yes" xml:space="preserve">
          <source>The number of vector headers allocated from the vector blocks.</source>
          <target state="translated">ベクトルブロックから割り当てられたベクトルヘッダの数。</target>
        </trans-unit>
        <trans-unit id="59b6b2c7dabce2307e6e799dfef671c14314174a" translate="yes" xml:space="preserve">
          <source>The numeric prefix argument. (Note that this &amp;lsquo;</source>
          <target state="translated">数値プレフィックス引数。（これは '</target>
        </trans-unit>
        <trans-unit id="839e8e25e1178c7a8e748322d0c3fe4ba4cb103f" translate="yes" xml:space="preserve">
          <source>The numeric prefix argument; but if there is no prefix argument, read a number as with</source>
          <target state="translated">数値の接頭辞引数。ただし接頭辞引数がない場合は</target>
        </trans-unit>
        <trans-unit id="439b92119e69deb37b60614763a2c3dea4cdbbe6" translate="yes" xml:space="preserve">
          <source>The numerical priority of the process.</source>
          <target state="translated">プロセスの数値的な優先度。</target>
        </trans-unit>
        <trans-unit id="7fe81b17fc17a93e95e511a73b78731b8a8de04d" translate="yes" xml:space="preserve">
          <source>The numerical process group ID of the foreground process group that uses the process&amp;rsquo;s terminal.</source>
          <target state="translated">プロセスの端末を使用するフォアグラウンドプロセスグループの数値プロセスグループID。</target>
        </trans-unit>
        <trans-unit id="6fa1cb69c8ffa6967bb6548d178d71e54c8286e1" translate="yes" xml:space="preserve">
          <source>The object &lt;code&gt;nil&lt;/code&gt;, in addition to its other meanings, may be used as a stream. It stands for the value of the variable &lt;code&gt;standard-input&lt;/code&gt; or &lt;code&gt;standard-output&lt;/code&gt;. Also, the object &lt;code&gt;t&lt;/code&gt; as a stream specifies input using the minibuffer (see &lt;a href=&quot;minibuffers#Minibuffers&quot;&gt;Minibuffers&lt;/a&gt;) or output in the echo area (see &lt;a href=&quot;the-echo-area#The-Echo-Area&quot;&gt;The Echo Area&lt;/a&gt;).</source>
          <target state="translated">オブジェクト &lt;code&gt;nil&lt;/code&gt; は、他の意味に加えて、ストリームとして使用できます。これは、変数 &lt;code&gt;standard-input&lt;/code&gt; または &lt;code&gt;standard-output&lt;/code&gt; の値を表します。また、オブジェクト &lt;code&gt;t&lt;/code&gt; ミニバッファ（参照用いてストリームを指定入力として&lt;a href=&quot;minibuffers#Minibuffers&quot;&gt;ミニバッファを&lt;/a&gt;エコー領域内）または出力（参照&lt;a href=&quot;the-echo-area#The-Echo-Area&quot;&gt;エコーエリア&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="39f7982b68fb4ab2fb51b7f5f14923219a3d96cd" translate="yes" xml:space="preserve">
          <source>The object &lt;var&gt;name&lt;/var&gt; is a character (an integer) identifying the register.</source>
          <target state="translated">オブジェクト &lt;var&gt;name&lt;/var&gt; は、レジスタを識別する文字（整数）です。</target>
        </trans-unit>
        <trans-unit id="6833fa0e8edf6ce4aefb60918006191561783d76" translate="yes" xml:space="preserve">
          <source>The objects returned by &lt;code&gt;current-window-configuration&lt;/code&gt; die together with the Emacs process. In order to store a window configuration on disk and read it back in another Emacs session, you can use the functions described next. These functions are also useful to clone the state of a frame into an arbitrary live window (&lt;code&gt;set-window-configuration&lt;/code&gt; effectively clones the windows of a frame into the root window of that very frame only).</source>
          <target state="translated">&lt;code&gt;current-window-configuration&lt;/code&gt; によって返されるオブジェクトは、Emacsプロセスとともに消滅します。ウィンドウ構成をディスクに保存し、それを別のEmacsセッションで読み戻すために、次に説明する関数を使用できます。これらの関数は、フレームの状態を任意のライブウィンドウに複製する場合にも役立ちます（ &lt;code&gt;set-window-configuration&lt;/code&gt; は、フレームのウィンドウをそのフレームのルートウィンドウにのみ効果的に複製します）。</target>
        </trans-unit>
        <trans-unit id="72b9bbaab48ff0495bbabbd0f0bb821e6641bf93" translate="yes" xml:space="preserve">
          <source>The offset in pixels from the</source>
          <target state="translated">からのオフセットをピクセル単位で指定します。</target>
        </trans-unit>
        <trans-unit id="ad4a9f69cf841ef935ee2cfa1f4bc790f26c9421" translate="yes" xml:space="preserve">
          <source>The operating system groups files into directories. To specify a file, you must specify the directory and the file&amp;rsquo;s name within that directory. Therefore, Emacs considers a file name as having two main parts: the &lt;em&gt;directory name&lt;/em&gt; part, and the &lt;em&gt;nondirectory&lt;/em&gt; part (or &lt;em&gt;file name within the directory&lt;/em&gt;). Either part may be empty. Concatenating these two parts reproduces the original file name.</source>
          <target state="translated">オペレーティングシステムは、ファイルをディレクトリにグループ化します。ファイルを指定するには、ディレクトリとそのディレクトリ内のファイル名を指定する必要があります。 ：したがって、Emacsは2つの主要な部分を有するようにファイル名を考慮&lt;em&gt;ディレクトリ名&lt;/em&gt;部分、および&lt;em&gt;非ディレクトリ&lt;/em&gt;（または一部&lt;em&gt;のディレクトリ内のファイル名&lt;/em&gt;）。どちらの部分も空である可能性があります。これら2つの部分を連結すると、元のファイル名が再現されます。</target>
        </trans-unit>
        <trans-unit id="97b655f463790a01acf5417028d665f4f17aa3ca" translate="yes" xml:space="preserve">
          <source>The operation for which certain handlers are presently inhibited.</source>
          <target state="translated">特定のハンドラが現在禁止されている操作。</target>
        </trans-unit>
        <trans-unit id="a54beb7452d09412de65a317f1da762f7220f206" translate="yes" xml:space="preserve">
          <source>The operation of inserting text in a buffer also calls the functions listed in the &lt;code&gt;insert-in-front-hooks&lt;/code&gt; property of the following character and in the &lt;code&gt;insert-behind-hooks&lt;/code&gt; property of the preceding character. These functions receive two arguments, the beginning and end of the inserted text. The functions are called &lt;em&gt;after&lt;/em&gt; the actual insertion takes place.</source>
          <target state="translated">バッファにテキストを挿入する操作では、次の文字の &lt;code&gt;insert-in-front-hooks&lt;/code&gt; プロパティおよび前の文字の &lt;code&gt;insert-behind-hooks&lt;/code&gt; プロパティにリストされている関数も呼び出されます。これらの関数は、挿入されたテキストの開始と終了の2つの引数を受け取ります。関数は、実際の挿入が行われた&lt;em&gt;後&lt;/em&gt;に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0102d351953df3a2b1f375d80803fca9ebb0a776" translate="yes" xml:space="preserve">
          <source>The option &lt;code&gt;resize-mini-windows&lt;/code&gt; does not affect the behavior of minibuffer-only frames (see &lt;a href=&quot;frame-layout#Frame-Layout&quot;&gt;Frame Layout&lt;/a&gt;). The following option allows to automatically resize such frames as well.</source>
          <target state="translated">オプション &lt;code&gt;resize-mini-windows&lt;/code&gt; は、ミニバッファのみのフレームの動作には影響しません（&lt;a href=&quot;frame-layout#Frame-Layout&quot;&gt;フレームレイアウトを&lt;/a&gt;参照）。次のオプションを使用すると、そのようなフレームのサイズも自動的に変更できます。</target>
        </trans-unit>
        <trans-unit id="ab3586d91a06c5d8405e148f25236777a77f39af" translate="yes" xml:space="preserve">
          <source>The option &lt;code&gt;switch-to-prev-buffer-skip&lt;/code&gt; and the &lt;code&gt;buffer-predicate&lt;/code&gt; (see &lt;a href=&quot;buffer-parameters#Buffer-Parameters&quot;&gt;Buffer Parameters&lt;/a&gt;) of &lt;var&gt;window&lt;/var&gt;&amp;rsquo;s frame affect this command as they do for &lt;code&gt;switch-to-prev-buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;window&lt;/var&gt; のフレームのオプション &lt;code&gt;switch-to-prev-buffer-skip&lt;/code&gt; および &lt;code&gt;buffer-predicate&lt;/code&gt; （&lt;a href=&quot;buffer-parameters#Buffer-Parameters&quot;&gt;バッファパラメータを&lt;/a&gt;参照）は、 &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; の場合と同様に、このコマンドに影響します。</target>
        </trans-unit>
        <trans-unit id="c4c6688ae5450a1940363973e63c9245b847575d" translate="yes" xml:space="preserve">
          <source>The option &lt;code&gt;switch-to-prev-buffer-skip&lt;/code&gt; described below can be used to inhibit switching to certain buffers, for example, to those already shown in another window. Also, if &lt;var&gt;window&lt;/var&gt;&amp;rsquo;s frame has a &lt;code&gt;buffer-predicate&lt;/code&gt; parameter (see &lt;a href=&quot;buffer-parameters#Buffer-Parameters&quot;&gt;Buffer Parameters&lt;/a&gt;), that predicate may inhibit switching to certain buffers.</source>
          <target state="translated">以下で説明するオプション &lt;code&gt;switch-to-prev-buffer-skip&lt;/code&gt; を使用して、特定のバッファ、たとえば、別のウィンドウにすでに表示されているバッファへの切り替えを禁止できます。また、 &lt;var&gt;window&lt;/var&gt; のフレームに &lt;code&gt;buffer-predicate&lt;/code&gt; パラメータが含まれている場合（&lt;a href=&quot;buffer-parameters#Buffer-Parameters&quot;&gt;バッファパラメータを&lt;/a&gt;参照）、その述語によって特定のバッファへの切り替えが禁止される場合があります。</target>
        </trans-unit>
        <trans-unit id="835de90b506ab91ee5ca88e6c356759c82274cd9" translate="yes" xml:space="preserve">
          <source>The optional &lt;var&gt;form&lt;/var&gt; argument specifies the timestamp form to be returned. If &lt;var&gt;form&lt;/var&gt; is the symbol &lt;code&gt;integer&lt;/code&gt;, this function returns an integer count of seconds. If &lt;var&gt;form&lt;/var&gt; is a positive integer, it specifies a clock frequency and this function returns an integer-pair timestamp &lt;code&gt;(&lt;var&gt;ticks&lt;/var&gt;
. &lt;var&gt;form&lt;/var&gt;)&lt;/code&gt;.&lt;a href=&quot;#FOOT25&quot; name=&quot;DOCF25&quot;&gt;&lt;sup&gt;25&lt;/sup&gt;&lt;/a&gt; If &lt;var&gt;form&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;, this function treats it as a positive integer suitable for representing the timestamp; for example, it is treated as 1000000000 if &lt;var&gt;time&lt;/var&gt; is nil and the platform timestamp has nanosecond resolution. If &lt;var&gt;form&lt;/var&gt; is &lt;code&gt;list&lt;/code&gt;, this function returns an integer list &lt;code&gt;(&lt;var&gt;high&lt;/var&gt; &lt;var&gt;low&lt;/var&gt; &lt;var&gt;micro&lt;/var&gt; &lt;var&gt;pico&lt;/var&gt;)&lt;/code&gt;. Although an omitted or &lt;code&gt;nil&lt;/code&gt;&lt;var&gt;form&lt;/var&gt; currently acts like &lt;code&gt;list&lt;/code&gt;, this is planned to change in a future Emacs version, so callers requiring list timestamps should pass &lt;code&gt;list&lt;/code&gt; explicitly.</source>
          <target state="translated">オプションの &lt;var&gt;form&lt;/var&gt; 引数は、返されるタイムスタンプ形式を指定します。場合は &lt;var&gt;form&lt;/var&gt; シンボルである &lt;code&gt;integer&lt;/code&gt; 、この関数は、秒の整数カウントを返します。場合 &lt;var&gt;form&lt;/var&gt; 正の整数であり、それはクロック周波数を指定すると、この関数は、整数対のタイムスタンプを返し &lt;code&gt;(&lt;var&gt;ticks&lt;/var&gt; . &lt;var&gt;form&lt;/var&gt;)&lt;/code&gt; 。&lt;a href=&quot;#FOOT25&quot; name=&quot;DOCF25&quot;&gt;&lt;sup&gt;25&lt;/sup&gt;&lt;/a&gt; &lt;var&gt;form&lt;/var&gt; が &lt;code&gt;t&lt;/code&gt; の場合、この関数はそれをタイムスタンプを表すのに適した正の整数として扱います。たとえば、 &lt;var&gt;time&lt;/var&gt; がゼロで、プラットフォームのタイムスタンプの解像度がナノ秒の場合、1000000000として扱われます。 &lt;var&gt;form&lt;/var&gt; が &lt;code&gt;list&lt;/code&gt; 場合この関数は、整数のリストを返し &lt;code&gt;(&lt;var&gt;high&lt;/var&gt; &lt;var&gt;low&lt;/var&gt; &lt;var&gt;micro&lt;/var&gt; &lt;var&gt;pico&lt;/var&gt;)&lt;/code&gt; 。省略または &lt;code&gt;nil&lt;/code&gt; &lt;var&gt;form&lt;/var&gt; 現在 &lt;code&gt;list&lt;/code&gt; のように機能しますが、これは将来のEmacsバージョンで変更される予定なので、listタイムスタンプを必要とする呼び出し元は &lt;code&gt;list&lt;/code&gt; を明示的に渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="173acab42d67698663274d178deb55ac822fd58b" translate="yes" xml:space="preserve">
          <source>The optional &lt;var&gt;function&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, is a function to call with no arguments, to get the user&amp;rsquo;s attention.</source>
          <target state="translated">オプションの &lt;var&gt;function&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、ユーザーの注意を引くために引数なしで呼び出す関数です。</target>
        </trans-unit>
        <trans-unit id="426453a518362f581ab8e263e39b1b78287360b0" translate="yes" xml:space="preserve">
          <source>The optional &lt;var&gt;pred&lt;/var&gt; argument provides a predicate that controls which buffers to ask about (or to save silently if &lt;var&gt;save-silently-p&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;). If &lt;var&gt;pred&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, that means to use the value of &lt;code&gt;save-some-buffers-default-predicate&lt;/code&gt; instead of &lt;var&gt;pred&lt;/var&gt;. If the result is &lt;code&gt;nil&lt;/code&gt;, it means ask only about file-visiting buffers. If it is &lt;code&gt;t&lt;/code&gt;, that means also offer to save certain other non-file buffers&amp;mdash;those that have a non-&lt;code&gt;nil&lt;/code&gt; buffer-local value of &lt;code&gt;buffer-offer-save&lt;/code&gt; (see &lt;a href=&quot;killing-buffers#Killing-Buffers&quot;&gt;Killing Buffers&lt;/a&gt;). A user who says &amp;lsquo;</source>
          <target state="translated">オプションの &lt;var&gt;pred&lt;/var&gt; 引数は、質問するバッファーを制御する述語を提供します（または、 &lt;var&gt;save-silently-p&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の場合はサイレントに保存します）。場合 &lt;var&gt;pred&lt;/var&gt; がある &lt;code&gt;nil&lt;/code&gt; の手段は、の値を使用することを、 &lt;code&gt;save-some-buffers-default-predicate&lt;/code&gt; の代わりに、 &lt;var&gt;pred&lt;/var&gt; をを。結果が &lt;code&gt;nil&lt;/code&gt; の場合は、ファイル訪問バッファーについてのみ質問することを意味します。 &lt;code&gt;t&lt;/code&gt; の場合、それは、他の特定の非ファイルバッファ（ &lt;code&gt;buffer-offer-save&lt;/code&gt; のnon- &lt;code&gt;nil&lt;/code&gt; buffer-local値を持つもの）も保存することを提案することを意味します（&lt;a href=&quot;killing-buffers#Killing-Buffers&quot;&gt;Killing Buffersを&lt;/a&gt;参照）。 'と言うユーザー</target>
        </trans-unit>
        <trans-unit id="3b490b732241cae65bd40b66849ce93f50354a12" translate="yes" xml:space="preserve">
          <source>The optional &lt;var&gt;qualifier&lt;/var&gt; allows combining several applicable methods. If it is not present, the defined method is a &lt;em&gt;primary&lt;/em&gt; method, responsible for providing the primary implementation of the generic function for the specialized arguments. You can also define &lt;em&gt;auxiliary methods&lt;/em&gt;, by using one of the following values as &lt;var&gt;qualifier&lt;/var&gt;:</source>
          <target state="translated">オプションの &lt;var&gt;qualifier&lt;/var&gt; 使用すると、いくつかの適用可能な方法を組み合わせることができます。存在しない場合、定義されたメソッドは&lt;em&gt;プライマリ&lt;/em&gt;メソッドであり、特殊な引数の汎用関数のプライマリ実装を提供します。次のいずれかの値を &lt;var&gt;qualifier&lt;/var&gt; として使用して、&lt;em&gt;補助メソッドを&lt;/em&gt;定義することもできます。</target>
        </trans-unit>
        <trans-unit id="7e8b24c5a3bacf003c936b526cc2b8bc5211832b" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;accept-default-p&lt;/var&gt; determines whether a coding system selected without user interaction is acceptable. If it&amp;rsquo;s omitted or &lt;code&gt;nil&lt;/code&gt;, such a silent selection is always acceptable. If it is non-&lt;code&gt;nil&lt;/code&gt;, it should be a function; &lt;code&gt;select-safe-coding-system&lt;/code&gt; calls this function with one argument, the base coding system of the selected coding system. If the function returns &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;select-safe-coding-system&lt;/code&gt; rejects the silently selected coding system, and asks the user to select a coding system from a list of possible candidates.</source>
          <target state="translated">オプションの引数 &lt;var&gt;accept-default-p&lt;/var&gt; は、ユーザーの操作なしで選択されたコーディングシステムが受け入れられるかどうかを決定します。省略または &lt;code&gt;nil&lt;/code&gt; の場合、そのようなサイレント選択は常に受け入れられます。それが非であれば &lt;code&gt;nil&lt;/code&gt; で、それが機能する必要があります。 &lt;code&gt;select-safe-coding-system&lt;/code&gt; systemは、選択されたコーディングシステムの基本コーディングシステムである1つの引数を使用してこの関数を呼び出します。関数が &lt;code&gt;nil&lt;/code&gt; を返す場合、 &lt;code&gt;select-safe-coding-system&lt;/code&gt; は、サイレントに選択されたコーディングシステムを拒否し、可能な候補のリストからコーディングシステムを選択するようにユーザーに求めます。</target>
        </trans-unit>
        <trans-unit id="e961ebb3cc87375ff53fb5dbd5c797ff74355be5" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;access-type&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, should specify the kind of access that will trigger obsolescence warnings; it can be either &lt;code&gt;get&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="translated">オプションの引数 &lt;var&gt;access-type&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、陳腐化の警告をトリガーするアクセスの種類を指定する必要があります。 &lt;code&gt;get&lt;/code&gt; または &lt;code&gt;set&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="18e8faa626ed3c723b0d4b24ea36af13079f989a" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;action&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, should normally be a display action (described above). &lt;code&gt;display-buffer&lt;/code&gt; builds a list of action functions and an action alist, by consolidating display actions from the following sources (in order of their precedence, from highest to lowest):</source>
          <target state="translated">オプションの引数 &lt;var&gt;action&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; でない場合、通常は表示アクション（上記）である必要があります。 &lt;code&gt;display-buffer&lt;/code&gt; は、次のソースからの表示アクションを統合することにより、アクション関数のリストとアクションリストを作成します（優先順位の高いものから低いものへ）。</target>
        </trans-unit>
        <trans-unit id="86a332db454bd3dbba8b146d609ae20fa7e68ddc" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;add&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, specifies how to add &lt;var&gt;font-spec&lt;/var&gt; to the font specifications previously set. If it is &lt;code&gt;prepend&lt;/code&gt;, &lt;var&gt;font-spec&lt;/var&gt; is prepended. If it is &lt;code&gt;append&lt;/code&gt;, &lt;var&gt;font-spec&lt;/var&gt; is appended. By default, &lt;var&gt;font-spec&lt;/var&gt; overrides the previous settings.</source>
          <target state="translated">オプションの引数 &lt;var&gt;add&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、以前に設定されたフォント仕様に &lt;var&gt;font-spec&lt;/var&gt; を追加する方法を指定します。 &lt;code&gt;prepend&lt;/code&gt; の場合、 &lt;var&gt;font-spec&lt;/var&gt; が付加されます。 &lt;code&gt;append&lt;/code&gt; の場合、 &lt;var&gt;font-spec&lt;/var&gt; が追加されます。デフォルトでは、 &lt;var&gt;font-spec&lt;/var&gt; は以前の設定を上書きします。</target>
        </trans-unit>
        <trans-unit id="f8a3ae8e924fd8f4d27674f1685f4ee6a3fbe53e" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;all-frames&lt;/var&gt; has the same meaning as in &lt;code&gt;next-window&lt;/code&gt;, like a &lt;code&gt;nil&lt;/code&gt;&lt;var&gt;minibuf&lt;/var&gt; argument to &lt;code&gt;next-window&lt;/code&gt;.</source>
          <target state="translated">オプションの引数 &lt;var&gt;all-frames&lt;/var&gt; は、 &lt;code&gt;next-window&lt;/code&gt; の &lt;code&gt;nil&lt;/code&gt; &lt;var&gt;minibuf&lt;/var&gt; 引数のように、next-windowと同じ意味を持ち &lt;code&gt;next-window&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="202962f0de53dff02d10a00270753bbfa1f06e86" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;all-frames&lt;/var&gt; specifies which frames to consider:</source>
          <target state="translated">オプションの引数 &lt;var&gt;all-frames&lt;/var&gt; は、考慮するフレームを指定します。</target>
        </trans-unit>
        <trans-unit id="bb40d66cb55d279a86899a88dfb077d4f8e79fbc" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;base-url&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, should be a string specifying the base URL for relative URLs occurring in links.</source>
          <target state="translated">オプションの引数 &lt;var&gt;base-url&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、リンクで発生する相対URLのベースURLを指定する文字列である必要があります。</target>
        </trans-unit>
        <trans-unit id="6a1907330d9a397ccfad9b3e354542f50e48a6fb" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;bury-or-kill&lt;/var&gt; specifies how to deal with &lt;var&gt;window&lt;/var&gt;&amp;rsquo;s buffer. The following values are handled:</source>
          <target state="translated">オプションの引数 &lt;var&gt;bury-or-kill&lt;/var&gt; は、 &lt;var&gt;window&lt;/var&gt; のバッファを処理する方法を指定します。次の値が処理されます。</target>
        </trans-unit>
        <trans-unit id="2049134810f7e761207b9b8b3bd49725d3167d1d" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;confirm&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, says to read the password twice and insist it must be the same both times. If it isn&amp;rsquo;t the same, the user has to type it over and over until the last two times match.</source>
          <target state="translated">オプションの引数 &lt;var&gt;confirm&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、パスワードを2回読み取るように指示し、両方の時間で同じでなければならないと主張します。同じでない場合、ユーザーは最後の2回が一致するまで何度も入力する必要があります。</target>
        </trans-unit>
        <trans-unit id="7bc5835047d79ebfcafd196072cb522b7ad940af" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;contextual&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, forces Font Lock mode to always refontify a syntactically relevant part of the buffer, and not just the modified lines. This argument can usually be omitted.</source>
          <target state="translated">オプションの引数 &lt;var&gt;contextual&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、フォントロックモードに、変更された行だけでなく、バ​​ッファの構文的に関連する部分を常に再フォント化するように強制します。通常、この引数は省略できます。</target>
        </trans-unit>
        <trans-unit id="580eb5a9bd0d61ea92cc5b8878cb5564112b1db4" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;count&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, specifies a maximum number of rectangles to return. This means that the return value is a list of triples specifying rectangles with the largest rectangle first. &lt;var&gt;count&lt;/var&gt; can be also a cons cell whose car specifies the number of rectangles to return and whose &lt;small&gt;CDR&lt;/small&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, states that all rectangles returned must be disjoint.</source>
          <target state="translated">オプションの引数 &lt;var&gt;count&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、返す長方形の最大数を指定します。これは、戻り値が、最大の長方形を最初に持つ長方形を指定するトリプルのリストであることを意味します。 &lt;var&gt;count&lt;/var&gt; は、carが返す長方形の数を指定し、&lt;small&gt;CDRが&lt;/small&gt; &lt;code&gt;nil&lt;/code&gt; でない場合、返されるすべての長方形が互いに素でなければならないと述べているconsセルにすることもできます。</target>
        </trans-unit>
        <trans-unit id="3ebdbb0e5fb0f2b384549756b4989936faa9a770" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;cur-col&lt;/var&gt; specifies the current column when the function is called. This is the window-relative horizontal coordinate of point, measured in units of font width of the frame&amp;rsquo;s default face. Providing it speeds up the function, especially in very long lines, because the function doesn&amp;rsquo;t have to go back in the buffer in order to determine the current column. Note that &lt;var&gt;cur-col&lt;/var&gt; is also counted from the visual start of the line.</source>
          <target state="translated">オプションの引数 &lt;var&gt;cur-col&lt;/var&gt; は、関数が呼び出されたときの現在の列を指定します。これは、フレームのデフォルトの面のフォント幅の単位で測定された、ウィンドウに相対的なポイントの水平座標です。これを提供すると、特に非常に長い行で関数が高速化されます。これは、関数が現在の列を判別するためにバッファーに戻る必要がないためです。 &lt;var&gt;cur-col&lt;/var&gt; は、行の視覚的な開始からもカウントされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b5a3875cde45d622d71332d1342451631df66196" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;default&lt;/var&gt; is used as in &lt;code&gt;read-from-minibuffer&lt;/code&gt;, except that, if non-&lt;code&gt;nil&lt;/code&gt;, it also specifies a default value to return if the user enters null input. As in &lt;code&gt;read-from-minibuffer&lt;/code&gt; it should be a string, a list of strings, or &lt;code&gt;nil&lt;/code&gt;, which is equivalent to an empty string. When &lt;var&gt;default&lt;/var&gt; is a string, that string is the default value. When it is a list of strings, the first string is the default value. (All these strings are available to the user in the &amp;ldquo;future minibuffer history&amp;rdquo;.)</source>
          <target state="translated">オプションの引数 &lt;var&gt;default&lt;/var&gt; は、 &lt;code&gt;read-from-minibuffer&lt;/code&gt; と同様に使用されますが、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、ユーザーがnull入力を入力した場合に返すデフォルト値も指定します。 &lt;code&gt;read-from-minibuffer&lt;/code&gt; の場合と同様に、文字列、文字列のリスト、または &lt;code&gt;nil&lt;/code&gt; である必要があります。これは、空の文字列と同等です。とき &lt;var&gt;default&lt;/var&gt; 文字列で、その文字列はデフォルト値です。文字列のリストの場合、最初の文字列がデフォルト値です。 （これらの文字列はすべて、「将来のミニバッファ履歴」でユーザーが利用できます。）</target>
        </trans-unit>
        <trans-unit id="a8b8f42a687e321f80ab76cd3bccd5897a600a30" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;default&lt;/var&gt; specifies the default password to return if the user enters empty input. If &lt;var&gt;default&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, then &lt;code&gt;read-passwd&lt;/code&gt; returns the null string in that case.</source>
          <target state="translated">オプションの引数 &lt;var&gt;default&lt;/var&gt; は、ユーザーが空の入力を入力した場合に返すデフォルトのパスワードを指定します。場合は &lt;var&gt;default&lt;/var&gt; ある &lt;code&gt;nil&lt;/code&gt; の場合、 &lt;code&gt;read-passwd&lt;/code&gt; 、その場合にNULL文字列を返します。</target>
        </trans-unit>
        <trans-unit id="0048e481ce17eb199983c7400eaac1a428a4cdd4" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;defaults&lt;/var&gt; controls the default value to return if the user enters null input, and should be one of: a string; &lt;code&gt;nil&lt;/code&gt;, which is equivalent to an empty string; a list of strings; or a symbol.</source>
          <target state="translated">オプションの引数 &lt;var&gt;defaults&lt;/var&gt; は、ユーザーがnull入力を入力した場合に返すデフォルト値を制御し、次のいずれかである必要があります。 &lt;code&gt;nil&lt;/code&gt; 、これは空の文字列に相当します。文字列のリスト。またはシンボル。</target>
        </trans-unit>
        <trans-unit id="228f1c49688198d5cc5f85c1fed83e79ddfe5a7f" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;display&lt;/var&gt; in these functions specifies which display to ask the question about. It can be a display name, a frame (which designates the display that frame is on), or &lt;code&gt;nil&lt;/code&gt; (which refers to the selected frame&amp;rsquo;s display, see &lt;a href=&quot;input-focus#Input-Focus&quot;&gt;Input Focus&lt;/a&gt;).</source>
          <target state="translated">これらの関数のオプションの引数 &lt;var&gt;display&lt;/var&gt; は、質問するディスプレイを指定します。表示名、フレーム（フレームがオンになっているディスプレイを指定）、または &lt;code&gt;nil&lt;/code&gt; （選択したフレームのディスプレイを参照します。&lt;a href=&quot;input-focus#Input-Focus&quot;&gt;入力フォーカスを&lt;/a&gt;参照）のいずれかです。</target>
        </trans-unit>
        <trans-unit id="ecafec37f62287ed8dd3cb905ab5b45b69aeeb0b" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;frame&lt;/var&gt; specifies which frames to operate on:</source>
          <target state="translated">オプションの引数 &lt;var&gt;frame&lt;/var&gt; は、操作するフレームを指定します。</target>
        </trans-unit>
        <trans-unit id="26bbce4e0ce6d9c586e1c1839883be544a4991a7" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;frame&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, specifies the frame on which the fonts are to be displayed. The optional argument &lt;var&gt;num&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, should be an integer that specifies the maximum length of the returned list. The optional argument &lt;var&gt;prefer&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, should be another font spec, which is used to control the order of the returned list; the returned font entities are sorted in order of decreasing closeness to that font spec.</source>
          <target state="translated">オプションの引数 &lt;var&gt;frame&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、フォントが表示されるフレームを指定します。オプションの引数 &lt;var&gt;num&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、返されるリストの最大長を指定する整数である必要があります。オプションの引数 &lt;var&gt;prefer&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、返されるリストの順序を制御するために使用される別のフォント仕様である必要があります。返されるフォントエンティティは、そのフォント仕様に近い順に並べ替えられます。</target>
        </trans-unit>
        <trans-unit id="160ff97d48ba4a8dfa3b003d791595b0262367a7" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;frame&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, specifies which frames to check when deciding whether the buffer is already displayed. It is equivalent to adding an element &lt;code&gt;(reusable-frames&amp;nbsp;.&amp;nbsp;&lt;var&gt;frame&lt;/var&gt;)&lt;/code&gt; to the action alist of &lt;var&gt;action&lt;/var&gt; (see &lt;a href=&quot;buffer-display-action-alists#Buffer-Display-Action-Alists&quot;&gt;Buffer Display Action Alists&lt;/a&gt;). The &lt;var&gt;frame&lt;/var&gt; argument is provided for compatibility reasons, Lisp programs should not use it.</source>
          <target state="translated">オプションの引数 &lt;var&gt;frame&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、バッファがすでに表示されているかどうかを判断するときにチェックするフレームを指定します。これは、要素加算と等価である &lt;code&gt;(reusable-frames&amp;nbsp;.&amp;nbsp;&lt;var&gt;frame&lt;/var&gt;)&lt;/code&gt; の作用の連想リストに &lt;var&gt;action&lt;/var&gt; （参照&lt;a href=&quot;buffer-display-action-alists#Buffer-Display-Action-Alists&quot;&gt;バッファディスプレイアクション連想リストを&lt;/a&gt;）。 &lt;var&gt;frame&lt;/var&gt; 引数が互換性のために提供され、Lispのプログラムは、それを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="50b9dbdcad227dd99d40dacb6820fdfcb31ad949" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;from&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, specifies the first text position to consider, and defaults to the minimum accessible position of the buffer. If &lt;var&gt;from&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;, it stands for the minimum accessible position that is not a newline character. The optional argument &lt;var&gt;to&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, specifies the last text position to consider, and defaults to the maximum accessible position of the buffer. If &lt;var&gt;to&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;, it stands for the maximum accessible position that is not a newline character.</source>
          <target state="translated">からのオプションの引数 &lt;var&gt;from&lt;/var&gt; 、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、考慮する最初のテキスト位置を指定し、デフォルトでバッファの最小アクセス可能位置になります。 &lt;var&gt;from&lt;/var&gt; が &lt;code&gt;t&lt;/code&gt; の場合、改行文字ではないアクセス可能な最小位置を表します。オプションの引数 &lt;var&gt;to&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、考慮する最後のテキスト位置を指定し、デフォルトでバッファのアクセス可能な最大位置になります。 &lt;var&gt;to&lt;/var&gt; が &lt;code&gt;t&lt;/code&gt; の場合、改行文字ではないアクセス可能な最大位置を表します。</target>
        </trans-unit>
        <trans-unit id="48d8b7e116733be79108fa56696b0ae152c9cd92" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;history&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, is a symbol specifying a minibuffer history list to use (see &lt;a href=&quot;minibuffer-history#Minibuffer-History&quot;&gt;Minibuffer History&lt;/a&gt;). If it is omitted or &lt;code&gt;nil&lt;/code&gt;, the history list defaults to &lt;code&gt;regexp-history&lt;/code&gt;.</source>
          <target state="translated">オプションの引数 &lt;var&gt;history&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、使用するミニ&lt;a href=&quot;minibuffer-history#Minibuffer-History&quot;&gt;バッファー&lt;/a&gt;履歴リストを指定するシンボルです（ミニバッファー履歴を参照）。省略または &lt;code&gt;nil&lt;/code&gt; の場合、履歴リストはデフォルトで &lt;code&gt;regexp-history&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="54b2555eb4d6971581a755b86e550d7f706a4369" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;ignore&lt;/var&gt; has the same meaning as for the function &lt;code&gt;window-resizable&lt;/code&gt; above.</source>
          <target state="translated">オプションの引数 &lt;var&gt;ignore&lt;/var&gt; は、上記の &lt;code&gt;window-resizable&lt;/code&gt; 関数windowの場合と同じ意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="6bdfa63738d1ccee9b5808f3f8c9f1ebe07b8e9b" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;ignore&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, means ignore restrictions imposed by fixed size windows, &lt;code&gt;window-min-height&lt;/code&gt; or &lt;code&gt;window-min-width&lt;/code&gt; settings. If &lt;var&gt;ignore&lt;/var&gt; equals &lt;code&gt;safe&lt;/code&gt;, live windows may get as small as &lt;code&gt;window-safe-min-height&lt;/code&gt; lines and &lt;code&gt;window-safe-min-width&lt;/code&gt; columns. If &lt;var&gt;ignore&lt;/var&gt; is a window, ignore restrictions for that window only. Any other non-&lt;code&gt;nil&lt;/code&gt; value means ignore all of the above restrictions for all windows.</source>
          <target state="translated">オプションの引数 &lt;var&gt;ignore&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、固定サイズのウィンドウ、 &lt;code&gt;window-min-height&lt;/code&gt; 、または &lt;code&gt;window-min-width&lt;/code&gt; の設定によって課せられる制限を無視することを意味します。 &lt;var&gt;ignore&lt;/var&gt; が &lt;code&gt;safe&lt;/code&gt; に等しい場合、ライブウィンドウは &lt;code&gt;window-safe-min-height&lt;/code&gt; 行および &lt;code&gt;window-safe-min-width&lt;/code&gt; 列と同じくらい小さくなる可能性があります。 &lt;var&gt;ignore&lt;/var&gt; がウィンドウの場合、そのウィンドウの制限のみを無視します。その他の &lt;code&gt;nil&lt;/code&gt; 以外の値は、すべてのウィンドウについて上記の制限をすべて無視することを意味します。</target>
        </trans-unit>
        <trans-unit id="f03394985cfefcfbe4bccbc2c2b7c937f24aa8ff" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;inverse&lt;/var&gt;, if &lt;code&gt;nil&lt;/code&gt;, means that the y-pixel value returned for any line specifies the distance in pixels from the left edge (body edge if &lt;var&gt;body&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;) of &lt;var&gt;window&lt;/var&gt; to the right edge of the last glyph of that line. &lt;var&gt;inverse&lt;/var&gt; non-&lt;code&gt;nil&lt;/code&gt; means that the y-pixel value returned for any line specifies the distance in pixels from the right edge of the last glyph of that line to the right edge (body edge if &lt;var&gt;body&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;) of &lt;var&gt;window&lt;/var&gt;. This is useful for determining the amount of slack space at the end of each line.</source>
          <target state="translated">オプションの引数 &lt;var&gt;inverse&lt;/var&gt; （ &lt;code&gt;nil&lt;/code&gt; の場合）は、任意の行に返されるyピクセル値が、 &lt;var&gt;window&lt;/var&gt; の左端（ &lt;var&gt;body&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; でない場合はbodyの端）からその最後のグリフの右端までの距離をピクセル単位で指定することを意味します。ライン。 &lt;var&gt;inverse&lt;/var&gt; 非 &lt;code&gt;nil&lt;/code&gt; （場合ボディエッジ任意の行に対して返さYピクセル値が右端にその行の最後のグリフの右端からピクセル単位の距離を指定することを意味 &lt;var&gt;body&lt;/var&gt; 非ある &lt;code&gt;nil&lt;/code&gt; の） &lt;var&gt;window&lt;/var&gt; 。これは、各行の終わりのスラックスペースの量を決定するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="36d765e78065810838fe4b4dcd7aee5e46b9c2f7" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;keymap&lt;/var&gt; specifies the keymap for the minor mode. If non-&lt;code&gt;nil&lt;/code&gt;, it should be a variable name (whose value is a keymap), a keymap, or an alist of the form</source>
          <target state="translated">オプションの引数 &lt;var&gt;keymap&lt;/var&gt; は、マイナーモードのキーマップを指定します。非場合は &lt;code&gt;nil&lt;/code&gt; 、それは（その値がキーマップである）変数名、キーマップ、またはフォームの連想リストであるべきです</target>
        </trans-unit>
        <trans-unit id="45c7531620e27255788236157222d029e67710a7" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;left&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt; means to return the x- and y-coordinates of the lower left corner of the leftmost character on each line. This is the value that should be used for windows that mostly display text from right to left.</source>
          <target state="translated">オプションの引数 &lt;var&gt;left&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、各行の左端の文字の左下隅のx座標とy座標を返すことを意味します。これは、主にテキストを右から左に表示するウィンドウに使用する必要がある値です。</target>
        </trans-unit>
        <trans-unit id="fac44c195c8956dce4604ab79b6495b05c7787fa" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;left&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, means to return values suitable for buffers displaying right to left text. In that case, any rectangle returned is assumed to start at the left edge of &lt;var&gt;window&lt;/var&gt;&amp;rsquo;s text area.</source>
          <target state="translated">オプションの引数 &lt;var&gt;left&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、右から左にテキストを表示するバッファに適した値を返すことを意味します。その場合、返される長方形はすべて、 &lt;var&gt;window&lt;/var&gt; のテキスト領域の左端から始まると見なされます。</target>
        </trans-unit>
        <trans-unit id="6b9c6954a4a938b6fd1e1b213483a278916b13fe" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;locale&lt;/var&gt;, a string, overrides the setting of your current locale identifier for collation. The value is system dependent; a &lt;var&gt;locale&lt;/var&gt;&lt;code&gt;&quot;en_US.UTF-8&quot;&lt;/code&gt; is applicable on POSIX systems, while it would be, e.g., &lt;code&gt;&quot;enu_USA.1252&quot;&lt;/code&gt; on MS-Windows systems.</source>
          <target state="translated">オプションの引数 &lt;var&gt;locale&lt;/var&gt; （文字列）は、照合用の現在のロケール識別子の設定を上書きします。値はシステムに依存します。 &lt;var&gt;locale&lt;/var&gt; &lt;code&gt;&quot;en_US.UTF-8&quot;&lt;/code&gt; 、それは可能だろうが、例えば、POSIXシステムで適用される &lt;code&gt;&quot;enu_USA.1252&quot;&lt;/code&gt; MS-Windowsシステムで。</target>
        </trans-unit>
        <trans-unit id="be924dbedb077a7596937c809656d8809cb7f780" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;locale&lt;/var&gt;, a string, overrides the setting of your current locale identifier for collation. The value is system dependent; a &lt;var&gt;locale&lt;/var&gt;&lt;code&gt;&quot;en_US.UTF-8&quot;&lt;/code&gt; is applicable on POSIX systems, while it would be, e.g., &lt;code&gt;&quot;enu_USA.1252&quot;&lt;/code&gt; on MS-Windows systems. The &lt;var&gt;locale&lt;/var&gt; value of &lt;code&gt;&quot;POSIX&quot;&lt;/code&gt; or &lt;code&gt;&quot;C&quot;&lt;/code&gt; lets &lt;code&gt;string-collate-lessp&lt;/code&gt; behave like &lt;code&gt;string-lessp&lt;/code&gt;:</source>
          <target state="translated">オプションの引数 &lt;var&gt;locale&lt;/var&gt; （文字列）は、照合用の現在のロケール識別子の設定を上書きします。値はシステムに依存します。 &lt;var&gt;locale&lt;/var&gt; &lt;code&gt;&quot;en_US.UTF-8&quot;&lt;/code&gt; 、それは可能だろうが、例えば、POSIXシステムで適用される &lt;code&gt;&quot;enu_USA.1252&quot;&lt;/code&gt; MS-Windowsシステムで。 &lt;code&gt;&quot;POSIX&quot;&lt;/code&gt; または &lt;code&gt;&quot;C&quot;&lt;/code&gt; の &lt;var&gt;locale&lt;/var&gt; 値により、 &lt;code&gt;string-collate-lessp&lt;/code&gt; は &lt;code&gt;string-lessp&lt;/code&gt; のように動作します。</target>
        </trans-unit>
        <trans-unit id="4edaf13bc53c89e562d674d18afa431f2d97a551" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;lockname&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, specifies the file name to use for purposes of locking and unlocking, overriding &lt;var&gt;filename&lt;/var&gt; and &lt;var&gt;visit&lt;/var&gt; for that purpose.</source>
          <target state="translated">オプションの引数の &lt;var&gt;lockname&lt;/var&gt; 、非場合 &lt;code&gt;nil&lt;/code&gt; 、ロックおよびロック解除、オーバーライドする目的のために使用するファイル名を指定し &lt;var&gt;filename&lt;/var&gt; や &lt;var&gt;visit&lt;/var&gt; その目的のために。</target>
        </trans-unit>
        <trans-unit id="505418b83113b1a1864d4371b2abfa1905c1136b" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;maximum&lt;/var&gt; sets a limit on how many fonts to return. If it is non-&lt;code&gt;nil&lt;/code&gt;, then the return value is truncated after the first &lt;var&gt;maximum&lt;/var&gt; matching fonts. Specifying a small value for &lt;var&gt;maximum&lt;/var&gt; can make this function much faster, in cases where many fonts match the pattern.</source>
          <target state="translated">オプションの引数 &lt;var&gt;maximum&lt;/var&gt; は、返すフォントの数に制限を設定します。 &lt;code&gt;nil&lt;/code&gt; 以外の場合、最初に一致したフォントの &lt;var&gt;maximum&lt;/var&gt; 後に戻り値が切り捨てられます。 &lt;var&gt;maximum&lt;/var&gt; 値に小さな値を指定すると、多くのフォントがパターンに一致する場合に、この関数をはるかに高速にすることができます。</target>
        </trans-unit>
        <trans-unit id="e2fef78645ec648e97c68254439e56ca0814e67d" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;millisec&lt;/var&gt; specifies an additional waiting period measured in milliseconds. This adds to the period specified by &lt;var&gt;seconds&lt;/var&gt;. If the system doesn&amp;rsquo;t support waiting fractions of a second, you get an error if you specify nonzero &lt;var&gt;millisec&lt;/var&gt;.</source>
          <target state="translated">オプションの引数 &lt;var&gt;millisec&lt;/var&gt; は、ミリ秒単位で測定される追加の待機期間を指定します。これにより、 &lt;var&gt;seconds&lt;/var&gt; 指定された期間が追加されます。システムが1秒未満の待機をサポートしていない場合、ゼロ以外の &lt;var&gt;millisec&lt;/var&gt; を指定するとエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="a79dc72b2d8c8af7d2c6097667a6efcd584162f8" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;minibuf&lt;/var&gt; specifies whether minibuffer windows should be included in the cyclic ordering. Normally, when &lt;var&gt;minibuf&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, a minibuffer window is included only if it is currently active; this matches the behavior of</source>
          <target state="translated">オプションの引数 &lt;var&gt;minibuf&lt;/var&gt; は、ミニバッファーウィンドウを循環順序に含めるかどうかを指定します。通常、 &lt;var&gt;minibuf&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; の場合、ミニバッファウィンドウは現在アクティブな場合にのみ含まれます。これはの動作と一致します</target>
        </trans-unit>
        <trans-unit id="41718d9699e86f654dd2ea26e540ead2023238f1" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;minibuffer&lt;/var&gt; specifies whether to include the minibuffer window in the returned list. If &lt;var&gt;minibuffer&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;, the minibuffer window is included. If &lt;var&gt;minibuffer&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt; or omitted, the minibuffer window is included only if it is active. If &lt;var&gt;minibuffer&lt;/var&gt; is neither &lt;code&gt;nil&lt;/code&gt; nor &lt;code&gt;t&lt;/code&gt;, the minibuffer window is never included.</source>
          <target state="translated">オプションの引数 &lt;var&gt;minibuffer&lt;/var&gt; は、返されるリストにミニバッファーウィンドウを含めるかどうかを指定します。場合は &lt;var&gt;minibuffer&lt;/var&gt; ある &lt;code&gt;t&lt;/code&gt; 、ミニバッファウィンドウが含まれています。場合は &lt;var&gt;minibuffer&lt;/var&gt; ある &lt;code&gt;nil&lt;/code&gt; または省略し、ミニバッファ・ウィンドウは、それがアクティブである場合にのみ含まれています。 &lt;var&gt;minibuffer&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; でも &lt;code&gt;t&lt;/code&gt; でもない場合、ミニバッファウィンドウは含まれません。</target>
        </trans-unit>
        <trans-unit id="295f0ea496d93011b8fee19529ccf2a7cf02e05c" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;mode-and-header-line&lt;/var&gt;&lt;code&gt;nil&lt;/code&gt; or omitted means to not include the height of the mode- or header-line of &lt;var&gt;window&lt;/var&gt; in the return value. If it is either the symbol &lt;code&gt;mode-line&lt;/code&gt; or &lt;code&gt;header-line&lt;/code&gt;, include only the height of that line, if present, in the return value. If it is &lt;code&gt;t&lt;/code&gt;, include the height of both, if present, in the return value.</source>
          <target state="translated">オプションの引数 &lt;var&gt;mode-and-header-line&lt;/var&gt; &lt;code&gt;nil&lt;/code&gt; または省略は、 &lt;var&gt;window&lt;/var&gt; mode-and-header-lineの高さを戻り値に含めないことを意味します。シンボル &lt;code&gt;mode-line&lt;/code&gt; または &lt;code&gt;header-line&lt;/code&gt; のいずれかである場合は、その行の高さのみを戻り値に含めます（存在する場合）。もしそうであれば &lt;code&gt;t&lt;/code&gt; 存在する場合、戻り値は、両方の高さが挙げられます。</target>
        </trans-unit>
        <trans-unit id="e8ec5bd3618893a66ce0e97a3f3a6fa2e9be9058" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;no-activate&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, causes Emacs to update its record of installed packages without actually making them available.</source>
          <target state="translated">オプションの引数 &lt;var&gt;no-activate&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、Emacsが実際に利用可能にすることなくインストールされたパッケージのレコードを更新します。</target>
        </trans-unit>
        <trans-unit id="20709a8a77efe587a728d12e613e78b8c48774b1" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;noerror&lt;/var&gt; is obsolete, kept for backward compatibility, and has no effect.</source>
          <target state="translated">オプションの引数 &lt;var&gt;noerror&lt;/var&gt; は廃止され、下位互換性のために保持されており、効果はありません。</target>
        </trans-unit>
        <trans-unit id="2b89e1f5be44e2151710c7bdac8ce82b4cbfb2b4" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;object&lt;/var&gt; specifies which text to search, and defaults to the current buffer. If &lt;var&gt;object&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, it can be some other buffer, or it can be a string or a window. If it is a string, the function searches that string. If it is a window, the function searches the buffer displayed in that window. If a buffer whose text you want to examine is displayed in some window, we recommend to specify it by that window, rather than pass the buffer to the function. This is because telling the function about the window allows it to correctly account for window-specific overlays, which might change the result of the function if some text in the buffer is covered by overlays.</source>
          <target state="translated">オプションの引数 &lt;var&gt;object&lt;/var&gt; は、検索するテキストを指定し、デフォルトで現在のバッファーになります。 &lt;var&gt;object&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の場合は、他のバッファにすることも、文字列またはウィンドウにすることもできます。文字列の場合、関数はその文字列を検索します。ウィンドウの場合、関数はそのウィンドウに表示されているバッファを検索します。テキストを調べたいバッファがウィンドウに表示されている場合は、バッファを関数に渡すのではなく、そのウィンドウで指定することをお勧めします。これは、ウィンドウについて関数に通知すると、ウィンドウ固有のオーバーレイを正しく考慮できるためです。これにより、バッファー内の一部のテキストがオーバーレイで覆われている場合、関数の結果が変わる可能性があります。</target>
        </trans-unit>
        <trans-unit id="1a510836acc518a4ce80759b09b05d4c9fb80e93" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;object&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, specifies a buffer or string to act on, rather than the current buffer. If &lt;var&gt;object&lt;/var&gt; is a string, then &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt; are zero-based indices into the string.</source>
          <target state="translated">オプションの引数 &lt;var&gt;object&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、現在のバッファではなく、動作するバッファまたは文字列を指定します。場合 &lt;var&gt;object&lt;/var&gt; 文字列であり、その後、 &lt;var&gt;start&lt;/var&gt; 及び &lt;var&gt;end&lt;/var&gt; 文字列にゼロベースのインデックスです。</target>
        </trans-unit>
        <trans-unit id="6f772ffbd43b315bbe2a2d9ef65a881dd0172794" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;on-exit&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, specifies a function that is called, with no arguments, after &lt;var&gt;keymap&lt;/var&gt; is deactivated.</source>
          <target state="translated">オプションの引数 &lt;var&gt;on-exit&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、 &lt;var&gt;keymap&lt;/var&gt; が非アクティブ化された後に、引数なしで呼び出される関数を指定します。</target>
        </trans-unit>
        <trans-unit id="59f86c6b81e54496f12f978a2ada198f4a69de49" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;only-present&lt;/var&gt; indicates how to handle specification characters in &lt;var&gt;template&lt;/var&gt; that are not found in &lt;var&gt;spec-alist&lt;/var&gt;. If it is &lt;code&gt;nil&lt;/code&gt; or omitted, the function signals an error. Otherwise, those format specifications and any occurrences of &amp;lsquo;</source>
          <target state="translated">オプションの引数 &lt;var&gt;only-present&lt;/var&gt; は、 &lt;var&gt;spec-alist&lt;/var&gt; にない &lt;var&gt;template&lt;/var&gt; 内の仕様文字を処理する方法を示します。それがある場合 &lt;code&gt;nil&lt;/code&gt; または省略、関数がエラーを通知します。それ以外の場合は、これらのフォーマット仕様と 'の出現</target>
        </trans-unit>
        <trans-unit id="99357a38b2f2682df0548c2c500e9c64e4f6180b" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;padding&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, is a padding character added at the beginning and end of the result string, to extend it to exactly &lt;var&gt;width&lt;/var&gt; columns. The padding character is used at the end of the result if it falls short of &lt;var&gt;width&lt;/var&gt;. It is also used at the beginning of the result if one multi-column character in &lt;var&gt;string&lt;/var&gt; extends across the column &lt;var&gt;start-column&lt;/var&gt;.</source>
          <target state="translated">オプションの引数 &lt;var&gt;padding&lt;/var&gt; （ &lt;code&gt;nil&lt;/code&gt; 以外の場合）は、結果文字列を正確に &lt;var&gt;width&lt;/var&gt; 列に拡張するために、結果文字列の最初と最後に追加されるパディング文字です。 &lt;var&gt;width&lt;/var&gt; に満たない場合は、結果の最後にパディング文字が使用されます。また、 &lt;var&gt;string&lt;/var&gt; 内の1つの複数列文字が列 &lt;var&gt;start-column&lt;/var&gt; を横切る場合、結果の先頭でも使用されます。</target>
        </trans-unit>
        <trans-unit id="791557e50f0f19bd2818ee21038e7006cdf9270d" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;paren&lt;/var&gt; can be any of the following:</source>
          <target state="translated">オプションの引数 &lt;var&gt;paren&lt;/var&gt; は、次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="9125d9631a53fcb42a447bf4efdec3689610b1c4" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;pixelwise&lt;/var&gt; non-&lt;code&gt;nil&lt;/code&gt; means to measure the new width and height in units of pixels instead. Note that if &lt;code&gt;frame-resize-pixelwise&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, some toolkits may refuse to truly honor the request if it does not increase/decrease the frame size to a multiple of its character size.</source>
          <target state="translated">オプション引数 &lt;var&gt;pixelwise&lt;/var&gt; 非 &lt;code&gt;nil&lt;/code&gt; 手段ではなく、画素単位で新しい幅と高さを測定します。 &lt;code&gt;frame-resize-pixelwise&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; の場合、一部のツールキットは、フレームサイズを文字サイズの倍数に増減しないと、リクエストを真に受け入れることを拒否する場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1a486c9457c82acbf1a6a199202ab0f46c9a5f6d" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;pixelwise&lt;/var&gt; non-&lt;code&gt;nil&lt;/code&gt; means to return the minimum size of &lt;var&gt;window&lt;/var&gt; counted in pixels.</source>
          <target state="translated">オプション引数 &lt;var&gt;pixelwise&lt;/var&gt; 非 &lt;code&gt;nil&lt;/code&gt; の最小サイズを返すための手段 &lt;var&gt;window&lt;/var&gt; のピクセルでカウントします。</target>
        </trans-unit>
        <trans-unit id="58f7f9c9311afbc394002bdf8390e5e8a66c15d9" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;positions&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, is a cons cell whose &lt;small&gt;CAR&lt;/small&gt; specifies the uppermost and whose &lt;small&gt;CDR&lt;/small&gt; specifies the lowermost pixel position that must be covered by any rectangle returned. These positions measure from the start of the text area of &lt;var&gt;window&lt;/var&gt;.</source>
          <target state="translated">オプションの引数 &lt;var&gt;positions&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、&lt;small&gt;CAR&lt;/small&gt;が最上部を指定し、&lt;small&gt;CDRが&lt;/small&gt;返される長方形でカバーする必要がある最下部のピクセル位置を指定するconsセルです。これらの位置は、 &lt;var&gt;window&lt;/var&gt; テキスト領域の先頭から測定されます。</target>
        </trans-unit>
        <trans-unit id="d4d8d2c166f79b72f18b93ddb099c08e8746fd52" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;predicate&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, specifies a function to filter the buffers that should be considered: the function will be called with every potential candidate as its argument, and should return &lt;code&gt;nil&lt;/code&gt; to reject the candidate, non-&lt;code&gt;nil&lt;/code&gt; to accept it.</source>
          <target state="translated">オプションの引数の &lt;var&gt;predicate&lt;/var&gt; 、非場合は &lt;code&gt;nil&lt;/code&gt; が、考慮すべきバッファをフィルタリングする機能を指定します。関数は、引数として、すべての潜在的な候補で呼び出され、返す必要があります &lt;code&gt;nil&lt;/code&gt; の候補を拒否し、非 &lt;code&gt;nil&lt;/code&gt; のそれを受け入れるようにします。</target>
        </trans-unit>
        <trans-unit id="bf6c3432c82d35a85740cbc2f62db8414db80230" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;predicate&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, specifies a predicate function for testing whether a candidate file is suitable. The predicate is passed the candidate file name as its single argument. If &lt;var&gt;predicate&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt; or omitted, &lt;code&gt;locate-file&lt;/code&gt; uses &lt;code&gt;file-readable-p&lt;/code&gt; as the predicate. See &lt;a href=&quot;kinds-of-files#Kinds-of-Files&quot;&gt;Kinds of Files&lt;/a&gt;, for other useful predicates, e.g., &lt;code&gt;file-executable-p&lt;/code&gt; and &lt;code&gt;file-directory-p&lt;/code&gt;.</source>
          <target state="translated">オプションの引数 &lt;var&gt;predicate&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、候補ファイルが適切かどうかをテストするための述語関数を指定します。述部には、候補ファイル名が単一の引数として渡されます。場合 &lt;var&gt;predicate&lt;/var&gt; ある &lt;code&gt;nil&lt;/code&gt; または省略し、 &lt;code&gt;locate-file&lt;/code&gt; 使用して &lt;code&gt;file-readable-p&lt;/code&gt; 述語として。 &lt;code&gt;file-executable-p&lt;/code&gt; や &lt;code&gt;file-directory-p&lt;/code&gt; などの他の有用な述語について&lt;a href=&quot;kinds-of-files#Kinds-of-Files&quot;&gt;は、「ファイルの種類&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="1e2cb767e72f360984a732e376c1c4554ced51fa" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;preserve-size&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, will install a parameter to preserve the size of &lt;var&gt;window&lt;/var&gt; during future resize operations (see &lt;a href=&quot;preserving-window-sizes#Preserving-Window-Sizes&quot;&gt;Preserving Window Sizes&lt;/a&gt;).</source>
          <target state="translated">オプションの引数 &lt;var&gt;preserve-size&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、将来のサイズ変更操作中に &lt;var&gt;window&lt;/var&gt; のサイズを保持するためのパラメーターをインストールします（&lt;a href=&quot;preserving-window-sizes#Preserving-Window-Sizes&quot;&gt;ウィンドウサイズの保持を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="435a1b07679e489657de30782052b8d6eab4ec8b" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;require-match&lt;/var&gt; has the same meaning as in &lt;code&gt;completing-read&lt;/code&gt;. See &lt;a href=&quot;minibuffer-completion#Minibuffer-Completion&quot;&gt;Minibuffer Completion&lt;/a&gt;.</source>
          <target state="translated">オプションの引数 &lt;var&gt;require-match&lt;/var&gt; は、 &lt;code&gt;completing-read&lt;/code&gt; の場合と同じ意味を持ちます。&lt;a href=&quot;minibuffer-completion#Minibuffer-Completion&quot;&gt;ミニバッファの完了を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e40feac3d056e5b6f3adcd167b868b54bdefa42a" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;rgb&lt;/var&gt;, if specified, is an rgb value, a list of three numbers that specify what the color actually looks like. If you do not specify &lt;var&gt;rgb&lt;/var&gt;, then this color cannot be used by &lt;code&gt;tty-color-approximate&lt;/code&gt; to approximate other colors, because Emacs will not know what it looks like.</source>
          <target state="translated">オプションの引数 &lt;var&gt;rgb&lt;/var&gt; は、指定されている場合、rgb値であり、色が実際にどのように見えるかを指定する3つの数値のリストです。 &lt;var&gt;rgb&lt;/var&gt; を指定しない場合、Emacsはそれがどのように見えるかわからないため、この色を &lt;code&gt;tty-color-approximate&lt;/code&gt; で使用して他の色を近似することはできません。</target>
        </trans-unit>
        <trans-unit id="905cbc5fb211abaa07ac0619c5392cdf3e417dd1" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;spec-type&lt;/var&gt; determines which spec to set. If it is omitted or &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;face-override-spec&lt;/code&gt;, this function sets the &lt;em&gt;override spec&lt;/em&gt;, which overrides face specs on &lt;var&gt;face&lt;/var&gt; of all the other types mentioned below. This is useful when calling this function outside of Custom code. If &lt;var&gt;spec-type&lt;/var&gt; is &lt;code&gt;customized-face&lt;/code&gt; or &lt;code&gt;saved-face&lt;/code&gt;, this function sets the customized spec or the saved custom spec, respectively. If it is &lt;code&gt;face-defface-spec&lt;/code&gt;, this function sets the default face spec (the same one set by &lt;code&gt;defface&lt;/code&gt;). If it is &lt;code&gt;reset&lt;/code&gt;, this function clears out all customization specs and override specs from &lt;var&gt;face&lt;/var&gt; (in this case, the value of &lt;var&gt;spec&lt;/var&gt; is ignored). The effect of any other value of &lt;var&gt;spec-type&lt;/var&gt; on the face specs is reserved for internal use, but the function will still define &lt;var&gt;face&lt;/var&gt; itself and recalculate its attributes, as described above.</source>
          <target state="translated">オプションの引数 &lt;var&gt;spec-type&lt;/var&gt; は、設定する仕様を決定します。省略した場合、 &lt;code&gt;nil&lt;/code&gt; または &lt;code&gt;face-override-spec&lt;/code&gt; の場合、この関数は&lt;em&gt;オーバーライドスペックを&lt;/em&gt;設定し&lt;em&gt;ます。&lt;/em&gt;これは、以下で説明する他のすべてのタイプの &lt;var&gt;face&lt;/var&gt; のフェーススペックをオーバーライドします。これは、カスタムコードの外部でこの関数を呼び出すときに役立ちます。場合 &lt;var&gt;spec-type&lt;/var&gt; され &lt;code&gt;customized-face&lt;/code&gt; または &lt;code&gt;saved-face&lt;/code&gt; 、この関数は、それぞれ、カスタマイズされた仕様または保存されたカスタム仕様を設定します。もしそうであれば &lt;code&gt;face-defface-spec&lt;/code&gt; 、この機能はデフォルトの顔のスペック（で同じ1セットセット &lt;code&gt;defface&lt;/code&gt; を）。 &lt;code&gt;reset&lt;/code&gt; 場合、この関数は、すべてのカスタマイズ仕様をクリアし、 &lt;var&gt;face&lt;/var&gt; から仕様をオーバーライドします（この場合、 &lt;var&gt;spec&lt;/var&gt; の値は無視されます）。面の仕様に対する &lt;var&gt;spec-type&lt;/var&gt; の他の値の影響は内部使用のために予約されていますが、上記のように、関数は &lt;var&gt;face&lt;/var&gt; 自体を定義し、その属性を再計算します。</target>
        </trans-unit>
        <trans-unit id="d6f8de3101851c3382246237fec9a41fcf1e43cd" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;start-column&lt;/var&gt; specifies the starting column. If this is non-&lt;code&gt;nil&lt;/code&gt;, then the first &lt;var&gt;start-column&lt;/var&gt; columns of the string are omitted from the value. If one multi-column character in &lt;var&gt;string&lt;/var&gt; extends across the column &lt;var&gt;start-column&lt;/var&gt;, that character is not included.</source>
          <target state="translated">オプションの引数 &lt;var&gt;start-column&lt;/var&gt; は、開始列を指定します。これが &lt;code&gt;nil&lt;/code&gt; 以外の場合、文字列の最初の &lt;var&gt;start-column&lt;/var&gt; 列は値から省略されます。 &lt;var&gt;string&lt;/var&gt; 内の1つの複数列の文字が列の &lt;var&gt;start-column&lt;/var&gt; 列にまたがる場合、その文字は含まれません。</target>
        </trans-unit>
        <trans-unit id="170877c661c774db6181373f0a88ba3c4809375d" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;string&lt;/var&gt; means to get a byte value from that string instead of the current buffer.</source>
          <target state="translated">オプションの引数 &lt;var&gt;string&lt;/var&gt; は、現在のバッファではなく、その文字列からバイト値を取得することを意味します。</target>
        </trans-unit>
        <trans-unit id="08690ee1143f80767485ceb61e6025b4e1f6ad5a" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;suffixes&lt;/var&gt; gives the list of file-name suffixes to append to &lt;var&gt;filename&lt;/var&gt; when searching. &lt;code&gt;locate-file&lt;/code&gt; tries each possible directory with each of these suffixes. If &lt;var&gt;suffixes&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, or &lt;code&gt;(&quot;&quot;)&lt;/code&gt;, then there are no suffixes, and &lt;var&gt;filename&lt;/var&gt; is used only as-is. Typical values of &lt;var&gt;suffixes&lt;/var&gt; are &lt;code&gt;exec-suffixes&lt;/code&gt; (see &lt;a href=&quot;subprocess-creation#Subprocess-Creation&quot;&gt;Subprocess Creation&lt;/a&gt;), &lt;code&gt;load-suffixes&lt;/code&gt;, &lt;code&gt;load-file-rep-suffixes&lt;/code&gt; and the return value of the function &lt;code&gt;get-load-suffixes&lt;/code&gt; (see &lt;a href=&quot;load-suffixes#Load-Suffixes&quot;&gt;Load Suffixes&lt;/a&gt;).</source>
          <target state="translated">オプションの引数 &lt;var&gt;suffixes&lt;/var&gt; は、検索時に &lt;var&gt;filename&lt;/var&gt; に追加するファイル名サフィックスのリストを提供します。 &lt;code&gt;locate-file&lt;/code&gt; は、これらの各サフィックスが付いた可能な各ディレクトリを試行します。 &lt;var&gt;suffixes&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; 、または &lt;code&gt;(&quot;&quot;)&lt;/code&gt; の場合、サフィックスはなく、 &lt;var&gt;filename&lt;/var&gt; はそのまま使用されます。 &lt;var&gt;suffixes&lt;/var&gt; 一般的な値は、 &lt;code&gt;exec-suffixes&lt;/code&gt; （&lt;a href=&quot;subprocess-creation#Subprocess-Creation&quot;&gt;サブプロセスの作成を&lt;/a&gt;参照）、 &lt;code&gt;load-suffixes&lt;/code&gt; 、 &lt;code&gt;load-file-rep-suffixes&lt;/code&gt; 、および関数 &lt;code&gt;get-load-suffixes&lt;/code&gt; の戻り値（&lt;a href=&quot;load-suffixes#Load-Suffixes&quot;&gt;Load Suffixesを&lt;/a&gt;参照）です。</target>
        </trans-unit>
        <trans-unit id="6929cd262e2ec8e57cb83b3bca611739b4dfbf41" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;translation&lt;/var&gt; specifies a translation table to use for scanning the text (see &lt;a href=&quot;translation-of-characters#Translation-of-Characters&quot;&gt;Translation of Characters&lt;/a&gt;). If it is non-&lt;code&gt;nil&lt;/code&gt;, then each character in the region is translated through this table, and the value returned describes the translated characters instead of the characters actually in the buffer.</source>
          <target state="translated">オプションの引数 &lt;var&gt;translation&lt;/var&gt; は、テキストのスキャンに使用する変換テーブルを指定します（&lt;a href=&quot;translation-of-characters#Translation-of-Characters&quot;&gt;文字の変換を&lt;/a&gt;参照）。 &lt;code&gt;nil&lt;/code&gt; 以外の場合、領域内の各文字はこのテーブルを介して変換され、返される値は、実際にバッファー内の文字ではなく、変換された文字を表します。</target>
        </trans-unit>
        <trans-unit id="c092e151609e9ec5f01fdc51239dc320c81fb40d" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;type&lt;/var&gt; is a symbol specifying the image type. If &lt;var&gt;type&lt;/var&gt; is omitted or &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;create-image&lt;/code&gt; tries to determine the image type from the file&amp;rsquo;s first few bytes, or else from the file&amp;rsquo;s name.</source>
          <target state="translated">オプションの引数 &lt;var&gt;type&lt;/var&gt; は、画像タイプを指定する記号です。 &lt;var&gt;type&lt;/var&gt; が省略されているか、 &lt;code&gt;nil&lt;/code&gt; の場合、 &lt;code&gt;create-image&lt;/code&gt; は、ファイルの最初の数バイトから、またはファイルの名前からイメージタイプを判別しようとします。</target>
        </trans-unit>
        <trans-unit id="cffa81c7cb380096c5547dae42e6cb7a9528d1b2" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;type&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, determines the exact type of Lisp object to check for. In that case, &lt;var&gt;type&lt;/var&gt; should be one of &lt;code&gt;font-object&lt;/code&gt;, &lt;code&gt;font-spec&lt;/code&gt;, or &lt;code&gt;font-entity&lt;/code&gt;.</source>
          <target state="translated">オプションの引数 &lt;var&gt;type&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、チェックするLispオブジェクトの正確なタイプを決定します。その場合、 &lt;var&gt;type&lt;/var&gt; は &lt;code&gt;font-object&lt;/code&gt; 、 &lt;code&gt;font-spec&lt;/code&gt; 、または &lt;code&gt;font-entity&lt;/code&gt; のいずれかである必要があります。</target>
        </trans-unit>
        <trans-unit id="bc15e8d2ee27fc6994759226a8e71c2f534f8ee7" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;width&lt;/var&gt; specifies a desired font width. If it is non-&lt;code&gt;nil&lt;/code&gt;, the function only returns those fonts whose characters are (on average) &lt;var&gt;width&lt;/var&gt; times as wide as &lt;var&gt;reference-face&lt;/var&gt;.</source>
          <target state="translated">オプションの引数 &lt;var&gt;width&lt;/var&gt; は、目的のフォント幅を指定します。 &lt;code&gt;nil&lt;/code&gt; 以外の場合、関数は、文字の幅が &lt;var&gt;reference-face&lt;/var&gt; &lt;var&gt;width&lt;/var&gt; （平均）倍であるフォントのみを返します。</target>
        </trans-unit>
        <trans-unit id="a4adeba927f11ca868cbbc9ac454375db4897015" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;window&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, should be a live window on the specified frame; then &lt;var&gt;window&lt;/var&gt; will be the first element in the returned list. If &lt;var&gt;window&lt;/var&gt; is omitted or &lt;code&gt;nil&lt;/code&gt;, the window selected within the frame is the first element.</source>
          <target state="translated">オプションの引数 &lt;var&gt;window&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、指定されたフレームのライブウィンドウである必要があります。その場合、 &lt;var&gt;window&lt;/var&gt; は返されるリストの最初の要素になります。 &lt;var&gt;window&lt;/var&gt; が省略または &lt;code&gt;nil&lt;/code&gt; の場合、フレーム内で選択されたウィンドウが最初の要素になります。</target>
        </trans-unit>
        <trans-unit id="fdc9182a4b3a92a29afde612fa522b47066e0b79" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;x-limit&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, specifies the maximum X coordinate beyond which text should be ignored; it is therefore also the largest value of pixel-width that the function can return. If &lt;var&gt;x-limit&lt;/var&gt;&lt;code&gt;nil&lt;/code&gt; or omitted, it means to use the pixel-width of &lt;var&gt;window&lt;/var&gt;&amp;rsquo;s body (see &lt;a href=&quot;window-sizes#Window-Sizes&quot;&gt;Window Sizes&lt;/a&gt;); this default means that text of truncated lines wider than the window will be ignored. This default is useful when the caller does not intend to change the width of &lt;var&gt;window&lt;/var&gt;. Otherwise, the caller should specify here the maximum width &lt;var&gt;window&lt;/var&gt;&amp;rsquo;s body may assume; in particular, if truncated lines are expected and their text needs to be accounted for, &lt;var&gt;x-limit&lt;/var&gt; should be set to a large value. Since calculating the width of long lines can take some time, it&amp;rsquo;s always a good idea to make this argument as small as needed; in particular, if the buffer might contain long lines that will be truncated anyway.</source>
          <target state="translated">オプションの引数 &lt;var&gt;x-limit&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、それを超えるとテキストを無視する最大X座標を指定します。したがって、関数が返すことができるピクセル幅の最大値でもあります。場合 &lt;var&gt;x-limit&lt;/var&gt; &lt;code&gt;nil&lt;/code&gt; または省略し、それはピクセル幅を使用することを意味 &lt;var&gt;window&lt;/var&gt; の本体（参照&lt;a href=&quot;window-sizes#Window-Sizes&quot;&gt;ウィンドウサイズを&lt;/a&gt;）このデフォルトは、ウィンドウより幅の広い切り捨てられた行のテキストが無視されることを意味します。このデフォルトは、呼び出し元が &lt;var&gt;window&lt;/var&gt; の幅を変更する予定がない場合に役立ちます。それ以外の場合、呼び出し元はここで &lt;var&gt;window&lt;/var&gt; の本体が想定できる最大幅を指定する必要があります。特に、切り捨てられた行が予想され、それらのテキストを考慮する必要がある場合は、 &lt;var&gt;x-limit&lt;/var&gt; は大きな値に設定する必要があります。長い行の幅の計算には時間がかかる場合があるため、この引数を必要なだけ小さくすることをお勧めします。特に、バッファに長い行が含まれている可能性がある場合は、とにかく切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="c40e0ed4f1db150d7701a53bd11312d3806432c0" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;xrm-string&lt;/var&gt;, if not &lt;code&gt;nil&lt;/code&gt;, is a string of resource names and values, in the same format used in the</source>
          <target state="translated">オプションの引数 &lt;var&gt;xrm-string&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; でない場合は、リソース名と値の文字列であり、</target>
        </trans-unit>
        <trans-unit id="e45d1b4575d0268bdd495d97852d103f4fb454e9" translate="yes" xml:space="preserve">
          <source>The optional argument &lt;var&gt;y-limit&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, specifies the maximum Y coordinate beyond which text is to be ignored; it is therefore also the maximum pixel-height that the function can return. If &lt;var&gt;y-limit&lt;/var&gt; is nil or omitted, it means to considers all the lines of text till the buffer position specified by &lt;var&gt;to&lt;/var&gt;. Since calculating the pixel-height of a large buffer can take some time, it makes sense to specify this argument; in particular, if the caller does not know the size of the buffer.</source>
          <target state="translated">オプションの引数 &lt;var&gt;y-limit&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、それを超えるとテキストが無視される最大Y座標を指定します。したがって、関数が返すことができる最大ピクセル高さでもあります。場合 &lt;var&gt;y-limit&lt;/var&gt; ゼロまたは省略され、それはバッファ位置により指定されるまでテキストのすべての行を考慮することを意味 &lt;var&gt;to&lt;/var&gt; 。大きなバッファのピクセル高さの計算には時間がかかる場合があるため、この引数を指定することは理にかなっています。特に、呼び出し元がバッファーのサイズを知らない場合。</target>
        </trans-unit>
        <trans-unit id="dc3a575ab4003570a9c36540fefa7d4ef44f3823" translate="yes" xml:space="preserve">
          <source>The optional arguments &lt;var&gt;action&lt;/var&gt; and &lt;var&gt;frame&lt;/var&gt; are as for &lt;code&gt;display-buffer&lt;/code&gt;, and only used if a buffer is displayed.</source>
          <target state="translated">オプションの引数 &lt;var&gt;action&lt;/var&gt; および &lt;var&gt;frame&lt;/var&gt; は、 &lt;code&gt;display-buffer&lt;/code&gt; の場合と同じであり、バッファーが表示されている場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="0c0042672620faa70f4c2ac1559a316ba863df5c" translate="yes" xml:space="preserve">
          <source>The optional arguments &lt;var&gt;component&lt;/var&gt; and &lt;var&gt;subclass&lt;/var&gt; add to the key and the class, respectively. You must specify both of them or neither. If you specify them, the key is &amp;lsquo;</source>
          <target state="translated">オプションの引数 &lt;var&gt;component&lt;/var&gt; と &lt;var&gt;subclass&lt;/var&gt; は、それぞれキーとクラスに追加されます。両方を指定するか、どちらも指定しないでください。それらを指定する場合、キーは 'です</target>
        </trans-unit>
        <trans-unit id="ee91262e4675f009db2d341be5b1d60c2ec7c619" translate="yes" xml:space="preserve">
          <source>The optional arguments &lt;var&gt;min-width&lt;/var&gt; and &lt;var&gt;min-height&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, specify the minimum width and height of any rectangle returned.</source>
          <target state="translated">オプションの引数 &lt;var&gt;min-width&lt;/var&gt; と &lt;var&gt;min-height&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、返される長方形の最小の幅と高さを指定します。</target>
        </trans-unit>
        <trans-unit id="372690aff6ae141943d981fae5474ab55ccff89f" translate="yes" xml:space="preserve">
          <source>The optional arguments &lt;var&gt;minibuf&lt;/var&gt; and &lt;var&gt;all-frames&lt;/var&gt; specify the windows to search, and have the same meanings as in &lt;code&gt;next-window&lt;/code&gt;.</source>
          <target state="translated">オプションの引数 &lt;var&gt;minibuf&lt;/var&gt; と &lt;var&gt;all-frames&lt;/var&gt; は、検索するウィンドウを指定し、 &lt;code&gt;next-window&lt;/code&gt; と同じ意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="2c1039de00a7678732da9114d34b59102a11647b" translate="yes" xml:space="preserve">
          <source>The optional arguments &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt; are character positions specifying the portion of &lt;var&gt;object&lt;/var&gt; to compute the message digest for. If they are &lt;code&gt;nil&lt;/code&gt; or omitted, the hash is computed for the whole of &lt;var&gt;object&lt;/var&gt;.</source>
          <target state="translated">オプションの引数 &lt;var&gt;start&lt;/var&gt; と &lt;var&gt;end&lt;/var&gt; は、メッセージダイジェストを計算する &lt;var&gt;object&lt;/var&gt; の部分を指定する文字位置です。それらが &lt;code&gt;nil&lt;/code&gt; または省略されている場合、ハッシュは &lt;var&gt;object&lt;/var&gt; 全体に対して計算されます。</target>
        </trans-unit>
        <trans-unit id="2337e7f6ede507e511fcbe99dd954146514bc80b" translate="yes" xml:space="preserve">
          <source>The optional fifth argument, &lt;var&gt;object&lt;/var&gt;, specifies the string or buffer to scan. Positions are relative to &lt;var&gt;object&lt;/var&gt;. The default for &lt;var&gt;object&lt;/var&gt; is the current buffer.</source>
          <target state="translated">オプションの5番目の引数 &lt;var&gt;object&lt;/var&gt; は、スキャンする文字列またはバッファを指定します。位置は &lt;var&gt;object&lt;/var&gt; を基準にしています。 &lt;var&gt;object&lt;/var&gt; のデフォルトは現在のバッファです。</target>
        </trans-unit>
        <trans-unit id="28e7ede94a8e68a6a581d0669d18f692d137189a" translate="yes" xml:space="preserve">
          <source>The optional fourth argument &lt;var&gt;pixelwise&lt;/var&gt; non-&lt;code&gt;nil&lt;/code&gt; means that &lt;var&gt;frame&lt;/var&gt; should be &lt;var&gt;height&lt;/var&gt; pixels high. Note that if &lt;code&gt;frame-resize-pixelwise&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, some window managers may refuse to truly honor the request if it does not increase/decrease the frame height to a multiple of its character height.</source>
          <target state="translated">オプションの4番目の引数 &lt;var&gt;pixelwise&lt;/var&gt; 非 &lt;code&gt;nil&lt;/code&gt; は、 &lt;var&gt;frame&lt;/var&gt; &lt;var&gt;height&lt;/var&gt; ピクセルの高さであることを意味します。 &lt;code&gt;frame-resize-pixelwise&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; の場合、一部のウィンドウマネージャーは、フレームの高さを文字の高さの倍数まで増減しないと、要求を真に受け入れることを拒否する場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4cea50b6fa2e62214008b025d8e0f2e6fa48a344" translate="yes" xml:space="preserve">
          <source>The optional fourth argument &lt;var&gt;pixelwise&lt;/var&gt; non-&lt;code&gt;nil&lt;/code&gt; means that &lt;var&gt;frame&lt;/var&gt; should be &lt;var&gt;width&lt;/var&gt; pixels wide. Note that if &lt;code&gt;frame-resize-pixelwise&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, some window managers may refuse to fully honor the request if it does not increase/decrease the frame width to a multiple of its character width.</source>
          <target state="translated">オプションの4番目の引数 &lt;var&gt;pixelwise&lt;/var&gt; 非 &lt;code&gt;nil&lt;/code&gt; は、 &lt;var&gt;frame&lt;/var&gt; &lt;var&gt;width&lt;/var&gt; ピクセル幅であることを意味します。 &lt;code&gt;frame-resize-pixelwise&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; の場合、一部のウィンドウマネージャーは、フレーム幅を文字幅の倍数に増減しないと、要求を完全に受け入れることを拒否する場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="46a593eb8b77337d54dd037277b7e1d96651e2a6" translate="yes" xml:space="preserve">
          <source>The optional fourth argument &lt;var&gt;pixelwise&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, means to interpret &lt;var&gt;size&lt;/var&gt; in units of pixels, instead of lines and columns.</source>
          <target state="translated">オプションの第四引数 &lt;var&gt;pixelwise&lt;/var&gt; 、非場合は &lt;code&gt;nil&lt;/code&gt; 、解釈する手段と &lt;var&gt;size&lt;/var&gt; 代わりに行と列、画素単位で。</target>
        </trans-unit>
        <trans-unit id="c1d2d517b24a513e68638fc126f01cf14f00b2b4" translate="yes" xml:space="preserve">
          <source>The optional fourth argument &lt;var&gt;window&lt;/var&gt; specifies the window for obtaining parameters such as width, horizontal scrolling, and so on. The default is to use the selected window&amp;rsquo;s parameters.</source>
          <target state="translated">オプションの4番目の引数 &lt;var&gt;window&lt;/var&gt; は、幅、水平スクロールなどのパラメーターを取得するためのウィンドウを指定します。デフォルトでは、選択したウィンドウのパラメーターを使用します。</target>
        </trans-unit>
        <trans-unit id="32d500e9fa66e6e098845ee8a4f7df222a3a64f2" translate="yes" xml:space="preserve">
          <source>The optional second argument &lt;var&gt;size&lt;/var&gt; determines the sizes of &lt;var&gt;window&lt;/var&gt; and/or the new window. If it is omitted or &lt;code&gt;nil&lt;/code&gt;, both windows are given equal sizes; if there is an odd line, it is allocated to the new window. If &lt;var&gt;size&lt;/var&gt; is a positive number, &lt;var&gt;window&lt;/var&gt; is given &lt;var&gt;size&lt;/var&gt; lines (or columns, depending on the value of &lt;var&gt;side&lt;/var&gt;). If &lt;var&gt;size&lt;/var&gt; is a negative number, the new window is given -&lt;var&gt;size&lt;/var&gt; lines (or columns).</source>
          <target state="translated">オプションの2番目の引数のサイズは、 &lt;var&gt;window&lt;/var&gt; や新しいウィンドウの &lt;var&gt;size&lt;/var&gt; 決定します。省略または &lt;code&gt;nil&lt;/code&gt; の場合、両方のウィンドウに同じサイズが与えられます。奇数行がある場合は、新しいウィンドウに割り当てられます。 &lt;var&gt;size&lt;/var&gt; が正の数の場合、 &lt;var&gt;window&lt;/var&gt; は &lt;var&gt;size&lt;/var&gt; 行（または &lt;var&gt;side&lt;/var&gt; の値によっては列）が与えられます。 If &lt;var&gt;size&lt;/var&gt; 負の数である、新しいウィンドウが挙げれる- &lt;var&gt;size&lt;/var&gt; 行（または列）</target>
        </trans-unit>
        <trans-unit id="3ea25d87cc8b43ad9b6088e35f93a262a0c645a2" translate="yes" xml:space="preserve">
          <source>The optional string &lt;var&gt;docstring&lt;/var&gt; is the documentation string of the variable &lt;var&gt;tabname&lt;/var&gt;. The property list &lt;var&gt;props&lt;/var&gt; is applied to the abbrev table (see &lt;a href=&quot;abbrev-table-properties#Abbrev-Table-Properties&quot;&gt;Abbrev Table Properties&lt;/a&gt;).</source>
          <target state="translated">オプションの文字列 &lt;var&gt;docstring&lt;/var&gt; は、変数 &lt;var&gt;tabname&lt;/var&gt; のドキュメント文字列です。プロパティリストの &lt;var&gt;props&lt;/var&gt; は、略語テーブルに適用されます（&lt;a href=&quot;abbrev-table-properties#Abbrev-Table-Properties&quot;&gt;略語テーブルのプロパティを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="c222f8e06e9d5450826a8e535233e76c3aefd4d7" translate="yes" xml:space="preserve">
          <source>The optional third argument &lt;var&gt;side&lt;/var&gt; determines the position of the new window relative to &lt;var&gt;window&lt;/var&gt;. If it is &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;below&lt;/code&gt;, the new window is placed below &lt;var&gt;window&lt;/var&gt;. If it is &lt;code&gt;above&lt;/code&gt;, the new window is placed above &lt;var&gt;window&lt;/var&gt;. In both these cases, &lt;var&gt;size&lt;/var&gt; specifies a total window height, in lines.</source>
          <target state="translated">オプションの3番目の引数 &lt;var&gt;side&lt;/var&gt; は、ウィンドウに対する新しいウィンドウの位置を決定し &lt;var&gt;window&lt;/var&gt; 。それがある場合 &lt;code&gt;nil&lt;/code&gt; または &lt;code&gt;below&lt;/code&gt; 、新しいウィンドウが下に配置される &lt;var&gt;window&lt;/var&gt; 。それがある場合は &lt;code&gt;above&lt;/code&gt; 、新しいウィンドウが上方に配置されて &lt;var&gt;window&lt;/var&gt; 。どちらの場合も、 &lt;var&gt;size&lt;/var&gt; はウィンドウの高さの合計を行単位で指定します。</target>
        </trans-unit>
        <trans-unit id="b1108fc16d48a052af5da3a2a313ad2178d4f97c" translate="yes" xml:space="preserve">
          <source>The optional third argument specifies the argument list of &lt;code&gt;shell-mode&lt;/code&gt;. In this case, it takes no arguments (&lt;code&gt;nil&lt;/code&gt; is different from not specifying a value). In other cases, this might be something like &lt;code&gt;(file &amp;amp;optional overwrite)&lt;/code&gt;. You don&amp;rsquo;t have to specify the argument list, but if you do the byte compiler can check that the calls match the declaration.</source>
          <target state="translated">オプションの3番目の引数は、 &lt;code&gt;shell-mode&lt;/code&gt; 引数リストを指定します。この場合、引数は取りません（ &lt;code&gt;nil&lt;/code&gt; は値を指定しないこととは異なります）。それ以外の場合、これは &lt;code&gt;(file &amp;amp;optional overwrite)&lt;/code&gt; ようなものかもしれません。引数リストを指定する必要はありませんが、指定すると、バイトコンパイラは呼び出しが宣言と一致することを確認できます。</target>
        </trans-unit>
        <trans-unit id="c91189f64260a86a1f42683fa6c4e4a546871bd4" translate="yes" xml:space="preserve">
          <source>The order of items in the menu is the same as the order of bindings in the keymap. Since &lt;code&gt;define-key&lt;/code&gt; puts new bindings at the front, you should define the menu items starting at the bottom of the menu and moving to the top, if you care about the order. When you add an item to an existing menu, you can specify its position in the menu using &lt;code&gt;define-key-after&lt;/code&gt; (see &lt;a href=&quot;modifying-menus#Modifying-Menus&quot;&gt;Modifying Menus&lt;/a&gt;).</source>
          <target state="translated">メニューの項目の順序は、キーマップのバインディングの順序と同じです。以来 &lt;code&gt;define-key&lt;/code&gt; ご注文を気にしている場合、フロントでプットを新しいバインディング、あなたは、メニューの一番下に始まり、先頭に移動するメニュー項目を定義する必要があります。既存のメニューに項目を追加する場合、 &lt;code&gt;define-key-after&lt;/code&gt; を使用してメニュー内のその位置を指定できます（&lt;a href=&quot;modifying-menus#Modifying-Menus&quot;&gt;メニューの変更を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="1eb5686cd4b85626eb2e98bbf5e87da933ba4c3c" translate="yes" xml:space="preserve">
          <source>The order of specifications in &lt;var&gt;template&lt;/var&gt; need not correspond to the order of associations in &lt;var&gt;spec-alist&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;template&lt;/var&gt; の仕様の順序は、 &lt;var&gt;spec-alist&lt;/var&gt; の関連付けの順序に対応している必要はありません。</target>
        </trans-unit>
        <trans-unit id="318b3cee5109ab1253568ca38f5b8b67f4c1e472" translate="yes" xml:space="preserve">
          <source>The ordering information is stored in a hash table on &lt;var&gt;symbol&lt;/var&gt;&amp;rsquo;s &lt;code&gt;list-order&lt;/code&gt; property. &lt;var&gt;symbol&lt;/var&gt; cannot refer to a lexical variable.</source>
          <target state="translated">順序情報は、 &lt;var&gt;symbol&lt;/var&gt; の &lt;code&gt;list-order&lt;/code&gt; プロパティのハッシュテーブルに保存されます。 &lt;var&gt;symbol&lt;/var&gt; は字句変数を参照できません。</target>
        </trans-unit>
        <trans-unit id="2226d00d51a88ba323aae0098cc9991d74673a2e" translate="yes" xml:space="preserve">
          <source>The ordering is determined by a depth-first traversal of each frame&amp;rsquo;s window tree, retrieving the live windows which are the leaf nodes of the tree (see &lt;a href=&quot;windows-and-frames#Windows-and-Frames&quot;&gt;Windows and Frames&lt;/a&gt;). If the minibuffer is active, the minibuffer window is included too. The ordering is cyclic, so the last window in the sequence is followed by the first one.</source>
          <target state="translated">順序は、各フレームのウィンドウツリーの深さ優先走査によって決定され、ツリーのリーフノードであるライブウィンドウが取得されます（&lt;a href=&quot;windows-and-frames#Windows-and-Frames&quot;&gt;ウィンドウとフレームを&lt;/a&gt;参照）。ミニバッファがアクティブな場合、ミニバッファウィンドウも含まれます。順序は循環的であるため、シーケンスの最後のウィンドウの後に最初のウィンドウが続きます。</target>
        </trans-unit>
        <trans-unit id="f22b797aae6cb0756380535cd8ae770baa37540b" translate="yes" xml:space="preserve">
          <source>The ordinary &lt;em&gt;Lisp debugger&lt;/em&gt; provides the ability to suspend evaluation of a form. While evaluation is suspended (a state that is commonly known as a &lt;em&gt;break&lt;/em&gt;), you may examine the run time stack, examine the values of local or global variables, or change those values. Since a break is a recursive edit, all the usual editing facilities of Emacs are available; you can even run programs that will enter the debugger recursively. See &lt;a href=&quot;recursive-editing#Recursive-Editing&quot;&gt;Recursive Editing&lt;/a&gt;.</source>
          <target state="translated">通常の&lt;em&gt;Lispデバッガ&lt;/em&gt;は、フォームの評価を一時停止する機能を提供し&lt;em&gt;ます&lt;/em&gt;。評価が一時停止されている間（一般に&lt;em&gt;ブレーク&lt;/em&gt;と呼ばれる状態）、ランタイムスタックを調べたり、ローカル変数またはグローバル変数の値を調べたり、それらの値を変更したりできます。休憩は再帰的な編集であるため、Emacsの通常の編集機能をすべて利用できます。デバッガーに再帰的に入るプログラムを実行することもできます。&lt;a href=&quot;recursive-editing#Recursive-Editing&quot;&gt;再帰編集を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4f996d904bee479b366f2c2d0b17fcd959ce9c44" translate="yes" xml:space="preserve">
          <source>The ordinary elements of the display table are indexed by character codes; the element at index &lt;var&gt;c&lt;/var&gt; says how to display the character code &lt;var&gt;c&lt;/var&gt;. The value should be &lt;code&gt;nil&lt;/code&gt; (which means to display the character &lt;var&gt;c&lt;/var&gt; according to the usual display conventions; see &lt;a href=&quot;usual-display#Usual-Display&quot;&gt;Usual Display&lt;/a&gt;), or a vector of glyph codes (which means to display the character &lt;var&gt;c&lt;/var&gt; as those glyphs; see &lt;a href=&quot;glyphs#Glyphs&quot;&gt;Glyphs&lt;/a&gt;).</source>
          <target state="translated">表示テーブルの通常の要素は、文字コードによって索引付けされています。インデックス &lt;var&gt;c&lt;/var&gt; の要素は、文字コード &lt;var&gt;c&lt;/var&gt; の表示方法を示しています。値があるべきである &lt;code&gt;nil&lt;/code&gt; （文字を表示するためにどの手段 &lt;var&gt;c&lt;/var&gt; は、参照通常の表示規則に従って&lt;a href=&quot;usual-display#Usual-Display&quot;&gt;通常のディスプレイ&lt;/a&gt;（文字、表示する手段、又はグリフコードのベクトル） &lt;var&gt;c&lt;/var&gt; 、それらのグリフのように、参照&lt;a href=&quot;glyphs#Glyphs&quot;&gt;グリフ&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="623ff6e7f140985ddebe6c27ee8d097d687ce22b" translate="yes" xml:space="preserve">
          <source>The original argument list, modified with the actual connection information, is available via the &lt;code&gt;process-contact&lt;/code&gt; function.</source>
          <target state="translated">実際の接続情報で変更された元の引数リストは、 &lt;code&gt;process-contact&lt;/code&gt; 関数を介して利用できます。</target>
        </trans-unit>
        <trans-unit id="3d6da09d571fe6e045570a75658c815203791d82" translate="yes" xml:space="preserve">
          <source>The original argument list, possibly modified by later configuration, is available via the function &lt;code&gt;process-contact&lt;/code&gt;.</source>
          <target state="translated">元の引数リストは、後の構成で変更される可能性があり、関数 &lt;code&gt;process-contact&lt;/code&gt; から入手できます。</target>
        </trans-unit>
        <trans-unit id="783a67e957204d836894a368a238fa5382b7ae1b" translate="yes" xml:space="preserve">
          <source>The other Emacs prefix keys are</source>
          <target state="translated">その他のEmacsのプレフィックスキーは</target>
        </trans-unit>
        <trans-unit id="5e87cdc0bc797ddea7fd188f93a5689b5c8765dd" translate="yes" xml:space="preserve">
          <source>The outer position is specified by and can be set via the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; frame parameters (see &lt;a href=&quot;position-parameters#Position-Parameters&quot;&gt;Position Parameters&lt;/a&gt;). For a normal, top-level frame these parameters usually represent its absolute position (see below) with respect to its display&amp;rsquo;s origin. For a child frame (see &lt;a href=&quot;child-frames#Child-Frames&quot;&gt;Child Frames&lt;/a&gt;) these parameters represent its position relative to the native position (see below) of its parent frame. For frames on text terminals the values of these parameters are meaningless and always zero.</source>
          <target state="translated">外側の位置は、によって指定され、 &lt;code&gt;left&lt;/code&gt; と &lt;code&gt;top&lt;/code&gt; フレームパラメータを介して設定できます（&lt;a href=&quot;position-parameters#Position-Parameters&quot;&gt;位置パラメータを&lt;/a&gt;参照）。通常のトップレベルフレームの場合、これらのパラメータは通常、ディスプレイの原点に対する絶対位置（以下を参照）を表します。子フレームについて（参照&lt;a href=&quot;child-frames#Child-Frames&quot;&gt;子フレームの&lt;/a&gt;）これらのパラメータは、親フレームのネイティブ位置に対するその位置を（下記参照）を表します。テキスト端末のフレームの場合、これらのパラメーターの値は無意味であり、常にゼロです。</target>
        </trans-unit>
        <trans-unit id="9b61b570125b083d2bf973be5f7d446a50b1ff1e" translate="yes" xml:space="preserve">
          <source>The output characters are displayed in the echo area.</source>
          <target state="translated">エコー領域に出力文字が表示されます。</target>
        </trans-unit>
        <trans-unit id="f760a648322efbb4e113d3ec65ce0e0be54106de" translate="yes" xml:space="preserve">
          <source>The output characters are inserted into &lt;var&gt;buffer&lt;/var&gt; at point. Point advances as characters are inserted.</source>
          <target state="translated">出力文字は、ある時点で &lt;var&gt;buffer&lt;/var&gt; に挿入されます。文字が挿入されるとポイントが進みます。</target>
        </trans-unit>
        <trans-unit id="847115e1679c724c2cb4444c6559f9fe7c4d8063" translate="yes" xml:space="preserve">
          <source>The output characters are inserted into the buffer that &lt;var&gt;marker&lt;/var&gt; points into, at the marker position. The marker position advances as characters are inserted. The value of point in the buffer has no effect on printing when the stream is a marker, and this kind of printing does not move point (except that if the marker points at or before the position of point, point advances with the surrounding text, as usual).</source>
          <target state="translated">出力文字は、 &lt;var&gt;marker&lt;/var&gt; 指すバッファーのマーカー位置に挿入されます。文字が挿入されると、マーカーの位置が進みます。ストリームがマーカーである場合、バッファ内のポイントの値は印刷に影響を与えず、この種の印刷はポイントを移動しません（ただし、マーカーがポイントの位置またはその前を指している場合、ポイントは周囲のテキストとともに進みます。いつものように）。</target>
        </trans-unit>
        <trans-unit id="da1c7a7c56317e365d871f2788f8d99dcda43cbf" translate="yes" xml:space="preserve">
          <source>The output characters are passed to &lt;var&gt;function&lt;/var&gt;, which is responsible for storing them away. It is called with a single character as argument, as many times as there are characters to be output, and is responsible for storing the characters wherever you want to put them.</source>
          <target state="translated">出力文字は &lt;var&gt;function&lt;/var&gt; に渡され、関数はそれらを格納します。これは、出力する文字の数だけ、引数として1つの文字を使用して呼び出され、文字を配置したい場所に格納する役割を果たします。</target>
        </trans-unit>
        <trans-unit id="97b90b29b23cb79eed0c42878f18676a7f82018f" translate="yes" xml:space="preserve">
          <source>The output from a synchronous subprocess is generally decoded using a coding system, much like text read from a file. The input sent to a subprocess by &lt;code&gt;call-process-region&lt;/code&gt; is encoded using a coding system, much like text written into a file. See &lt;a href=&quot;coding-systems#Coding-Systems&quot;&gt;Coding Systems&lt;/a&gt;.</source>
          <target state="translated">同期サブプロセスからの出力は、通常、ファイルから読み取られたテキストと同様に、コーディングシステムを使用してデコードされます。 &lt;code&gt;call-process-region&lt;/code&gt; によってサブプロセスに送信される入力は、ファイルに書き込まれるテキストと同様に、コーディングシステムを使用してエンコードされます。&lt;a href=&quot;coding-systems#Coding-Systems&quot;&gt;コーディングシステムを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1bf1d258cf8161b4fe6f560101ccee767cdb33ab" translate="yes" xml:space="preserve">
          <source>The output string need not be newly-allocated. For example, if &lt;code&gt;x&lt;/code&gt; is the string &lt;code&gt;&quot;foo&quot;&lt;/code&gt;, the expressions &lt;code&gt;(eq x
(format x))&lt;/code&gt; and &lt;code&gt;(eq x (format &quot;%s&quot; x))&lt;/code&gt; might both yield &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">出力文字列を新たに割り当てる必要はありません。たとえば、 &lt;code&gt;x&lt;/code&gt; が文字列 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; の場合、式 &lt;code&gt;(eq x (format x))&lt;/code&gt; と &lt;code&gt;(eq x (format &quot;%s&quot; x))&lt;/code&gt; は両方とも &lt;code&gt;t&lt;/code&gt; を生成する可能性があります。</target>
        </trans-unit>
        <trans-unit id="c3615d741950845df06c53b6a7f56b4c8a5a4ebc" translate="yes" xml:space="preserve">
          <source>The output that an asynchronous subprocess writes to its standard output stream is passed to a function called the &lt;em&gt;filter function&lt;/em&gt;. The default filter function simply inserts the output into a buffer, which is called the associated buffer of the process (see &lt;a href=&quot;process-buffers#Process-Buffers&quot;&gt;Process Buffers&lt;/a&gt;). If the process has no buffer then the default filter discards the output.</source>
          <target state="translated">非同期サブプロセスが標準出力ストリームに書き込む出力は、&lt;em&gt;フィルター関数&lt;/em&gt;と呼ばれる関数に渡され&lt;em&gt;ます&lt;/em&gt;。デフォルトのフィルター関数は、プロセスの関連バッファーと呼ばれるバッファーに出力を挿入するだけです（「&lt;a href=&quot;process-buffers#Process-Buffers&quot;&gt;プロセスバッファー&lt;/a&gt;」を参照）。プロセスにバッファがない場合、デフォルトのフィルタは出力を破棄します。</target>
        </trans-unit>
        <trans-unit id="1ae9bdf1de6c1b3dee1b8c77f2a066e71cd4bda1" translate="yes" xml:space="preserve">
          <source>The output to the filter may come in chunks of any size. A program that produces the same output twice in a row may send it as one batch of 200 characters one time, and five batches of 40 characters the next. If the filter looks for certain text strings in the subprocess output, make sure to handle the case where one of these strings is split across two or more batches of output; one way to do this is to insert the received text into a temporary buffer, which can then be searched.</source>
          <target state="translated">フィルタへの出力はどのような大きさの塊になっていてもかまいません。同じ出力を連続して2回出すプログラムは、 一度に200文字のバッチとして出力し、 次のバッチは40文字のバッチを5回出すことができます。フィルタがサブプロセスの出力の中から特定の文字列を探す場合は、 その文字列の一つが 2 つ以上の出力バッチにまたがって分割されている場合に対応できるようにしてください。</target>
        </trans-unit>
        <trans-unit id="58e6196b6fc1654a77feeadf775e93f2d335a94f" translate="yes" xml:space="preserve">
          <source>The outside window configuration is saved and restored if &lt;code&gt;edebug-save-windows&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt; (see &lt;a href=&quot;edebug-options#Edebug-Options&quot;&gt;Edebug Options&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;edebug-save-windows&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の場合、外部ウィンドウ構成が保存および復元されます（&lt;a href=&quot;edebug-options#Edebug-Options&quot;&gt;Edebugオプションを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="443f8535af5feac9009b9eb74d0bd0bbb542eca8" translate="yes" xml:space="preserve">
          <source>The overlay-arrow string is displayed in any given buffer if the value of &lt;code&gt;overlay-arrow-position&lt;/code&gt; in that buffer points into that buffer. Thus, it is possible to display multiple overlay arrow strings by creating buffer-local bindings of &lt;code&gt;overlay-arrow-position&lt;/code&gt;. However, it is usually cleaner to use &lt;code&gt;overlay-arrow-variable-list&lt;/code&gt; to achieve this result.</source>
          <target state="translated">そのバッファの &lt;code&gt;overlay-arrow-position&lt;/code&gt; の値がそのバッファを指している場合、overlay-arrow文字列は任意のバッファに表示されます。したがって、 &lt;code&gt;overlay-arrow-position&lt;/code&gt; のバッファローカルバインディングを作成することにより、複数のオーバーレイ矢印文字列を表示することができます。ただし、通常、この結果を得るには、 &lt;code&gt;overlay-arrow-variable-list&lt;/code&gt; を使用する方がクリーンです。</target>
        </trans-unit>
        <trans-unit id="0c4e900964a2a9c8ee2b6d6918d8e7e1d4ae357a" translate="yes" xml:space="preserve">
          <source>The package&amp;rsquo;s main or only group should be a member of one or more of the standard customization groups. (To display the full list of them, use</source>
          <target state="translated">パッケージのメイングループまたは唯一のグループは、1つ以上の標準カスタマイズグループのメンバーである必要があります。（それらの完全なリストを表示するには、</target>
        </trans-unit>
        <trans-unit id="056f01b4a46a37e98b55727e87a95ecf4b9b9d41" translate="yes" xml:space="preserve">
          <source>The parameter&amp;rsquo;s second element is either one of the symbols &lt;code&gt;window&lt;/code&gt; or &lt;code&gt;frame&lt;/code&gt;, or a list whose elements are the buffer shown in &lt;var&gt;window&lt;/var&gt; before, that buffer&amp;rsquo;s window start and window point positions, and &lt;var&gt;window&lt;/var&gt;&amp;rsquo;s height at that time. If that buffer is still live when &lt;var&gt;window&lt;/var&gt; is quit, then this function may reuse &lt;var&gt;window&lt;/var&gt; to display it.</source>
          <target state="translated">パラメータの2番目の要素は、シンボル &lt;code&gt;window&lt;/code&gt; または &lt;code&gt;frame&lt;/code&gt; のいずれか、または要素が前の &lt;var&gt;window&lt;/var&gt; に表示されたバッファ、そのバッファのウィンドウの開始位置とウィンドウポイントの位置、およびその時点での &lt;var&gt;window&lt;/var&gt; の高さであるリストのいずれかです。 &lt;var&gt;window&lt;/var&gt; が終了したときにそのバッファがまだ有効である場合、この関数は &lt;var&gt;window&lt;/var&gt; を再利用して表示することができます。</target>
        </trans-unit>
        <trans-unit id="e0a39a896d6a8873b9effa21ba5ee259cb0e77fd" translate="yes" xml:space="preserve">
          <source>The parameters described below provide support for resizing a frame by dragging its internal borders with the mouse. They also allow moving a frame with the mouse by dragging the header line of its topmost or the mode line of its bottommost window.</source>
          <target state="translated">以下のパラメータは、フレームの内部境界線をマウスでドラッグしてサイズを変更する機能を提供します。また、最上段のウィンドウのヘッダ行や最下段のウィンドウのモード行をマウスでドラッグしてフレームを移動することもできます。</target>
        </trans-unit>
        <trans-unit id="1c21c17502bd64c3a71bdbc3fc9084a51f8eb952" translate="yes" xml:space="preserve">
          <source>The parent keymap of all &lt;code&gt;local-function-key-map&lt;/code&gt; (q.v.) instances.</source>
          <target state="translated">すべての &lt;code&gt;local-function-key-map&lt;/code&gt; （qv）インスタンスの親キーマップ。</target>
        </trans-unit>
        <trans-unit id="83241215538033ded1beeee2b0b4fdef97b639a3" translate="yes" xml:space="preserve">
          <source>The parsing facilities of Emacs consider a string as a single token. The usual syntactic meanings of the characters in the string are suppressed.</source>
          <target state="translated">Emacs の解析機能は、文字列を 1 つのトークンとみなします。文字列内の文字の通常の構文的な意味は無視されます。</target>
        </trans-unit>
        <trans-unit id="a4782b103645e67a505ec03626df6bb33c90727f" translate="yes" xml:space="preserve">
          <source>The parsing skips spaces and tabs at the beginning of &lt;var&gt;string&lt;/var&gt;, then reads as much of &lt;var&gt;string&lt;/var&gt; as it can interpret as a number in the given base. (On some systems it ignores other whitespace at the beginning, not just spaces and tabs.) If &lt;var&gt;string&lt;/var&gt; cannot be interpreted as a number, this function returns 0.</source>
          <target state="translated">解析では、 &lt;var&gt;string&lt;/var&gt; の先頭にあるスペースとタブがスキップされ、指定された基数の数値として解釈できる限り多くの &lt;var&gt;string&lt;/var&gt; 読み取られます。（一部のシステムでは、スペースやタブだけでなく、最初に他の空白を無視します。） &lt;var&gt;string&lt;/var&gt; を数値として解釈できない場合、この関数は0を返します。</target>
        </trans-unit>
        <trans-unit id="d08be782a53bbda1ba8dddd6886664346e48d767" translate="yes" xml:space="preserve">
          <source>The parsing technique used by SMIE does not allow tokens to behave differently in different contexts. For most programming languages, this manifests itself by precedence conflicts when converting the BNF grammar.</source>
          <target state="translated">SMIEで使用されている構文解析技術では、トークンが異なる文脈で異なる振る舞いをすることができません。ほとんどのプログラミング言語では、BNF文法を変換する際に優先順位の競合が発生します。</target>
        </trans-unit>
        <trans-unit id="fbb6c29935ae3da3bb37e989df0289bf03fba226" translate="yes" xml:space="preserve">
          <source>The part of the scroll bar on which the click occurred. It is one of the symbols &lt;code&gt;handle&lt;/code&gt; (the scroll bar handle), &lt;code&gt;above-handle&lt;/code&gt; (the area above the handle), &lt;code&gt;below-handle&lt;/code&gt; (the area below the handle), &lt;code&gt;up&lt;/code&gt; (the up arrow at one end of the scroll bar), or &lt;code&gt;down&lt;/code&gt; (the down arrow at one end of the scroll bar).</source>
          <target state="translated">クリックが発生したスクロールバーの部分。これは、シンボル &lt;code&gt;handle&lt;/code&gt; （スクロールバーハンドル）、 &lt;code&gt;above-handle&lt;/code&gt; （ハンドルの上の領域）、 &lt;code&gt;below-handle&lt;/code&gt; 下の領域）、 &lt;code&gt;up&lt;/code&gt; （スクロールバーの一方の端にある上矢印）のいずれかです。または &lt;code&gt;down&lt;/code&gt; （スクロールバーの一方の端にある下矢印）。</target>
        </trans-unit>
        <trans-unit id="1168a5f90813f2fcee380e2f6e20037287e336c0" translate="yes" xml:space="preserve">
          <source>The parts of a lambda expression.</source>
          <target state="translated">ラムダ式のパーツ。</target>
        </trans-unit>
        <trans-unit id="b276da95227712619d809e264d610c7532aff153" translate="yes" xml:space="preserve">
          <source>The path to a sound file to play when the notification pops up.</source>
          <target state="translated">通知がポップアップしたときに再生するサウンドファイルのパス。</target>
        </trans-unit>
        <trans-unit id="3eb392db1262ef722d3f867992b904857965d5b1" translate="yes" xml:space="preserve">
          <source>The pcase macro</source>
          <target state="translated">pcase マクロ</target>
        </trans-unit>
        <trans-unit id="bfe752af47d77462d05ad0c5ca61909d42248960" translate="yes" xml:space="preserve">
          <source>The pcase patterns that are useful for destructuring bindings are generally those described in &lt;a href=&quot;backquote-patterns#Backquote-Patterns&quot;&gt;Backquote Patterns&lt;/a&gt;, since they express a specification of the structure of objects that will match.</source>
          <target state="translated">バインディングを破棄するのに役立つ&lt;a href=&quot;backquote-patterns#Backquote-Patterns&quot;&gt;pcaseパターンは&lt;/a&gt;、一致するオブジェクトの構造の仕様を表すため、一般にBackquoteパターンで説明されているものです。</target>
        </trans-unit>
        <trans-unit id="85e5e6070e7ace2a864fd54495dc677c9fe2f335" translate="yes" xml:space="preserve">
          <source>The percentage of the CPU time used by the process since it started. The corresponding &lt;var&gt;value&lt;/var&gt; is a floating-point number between 0 and 100.</source>
          <target state="translated">プロセスが開始されてからプロセスによって使用されたCPU時間のパーセンテージ。対応する &lt;var&gt;value&lt;/var&gt; は、0〜100の浮動小数点数です。</target>
        </trans-unit>
        <trans-unit id="74a0e3e0b308a0aa69a778516c8eba726d6c3004" translate="yes" xml:space="preserve">
          <source>The percentage of the buffer text above the &lt;strong&gt;top&lt;/strong&gt; of window, or &amp;lsquo;</source>
          <target state="translated">ウィンドウ&lt;strong&gt;上部&lt;/strong&gt;の上のバッファテキストのパーセンテージ、または '</target>
        </trans-unit>
        <trans-unit id="5174826a919540ce04dc971e49d9dcc6a90c357a" translate="yes" xml:space="preserve">
          <source>The percentage of the buffer text that is above the &lt;strong&gt;bottom&lt;/strong&gt; of the window (which includes the text visible in the window, as well as the text above the top), plus &amp;lsquo;</source>
          <target state="translated">ウィンドウの&lt;strong&gt;下部&lt;/strong&gt;より上にあるバッファテキストのパーセンテージ（ウィンドウに表示されるテキストと上部より上のテキストを含む）、および '</target>
        </trans-unit>
        <trans-unit id="0cf9d906bacdebd3353589bccc8f1c56cff833ae" translate="yes" xml:space="preserve">
          <source>The percentage of the total physical memory installed on the machine used by the process&amp;rsquo;s resident set. The value is a floating-point number between 0 and 100.</source>
          <target state="translated">プロセスの常駐セットによって使用されるマシンにインストールされている合計物理メモリのパーセンテージ。値は0〜100の浮動小数点数です。</target>
        </trans-unit>
        <trans-unit id="745b0bf167534b10d93c434c0e1e395113673fc2" translate="yes" xml:space="preserve">
          <source>The percentages of text above both the &lt;strong&gt;top&lt;/strong&gt; and the &lt;strong&gt;bottom&lt;/strong&gt; of the window, separated by &amp;lsquo;</source>
          <target state="translated">ウィンドウの&lt;strong&gt;上部&lt;/strong&gt;と&lt;strong&gt;下部の&lt;/strong&gt;両方の&lt;strong&gt;上&lt;/strong&gt;にあるテキストのパーセンテージ。'で区切られています。</target>
        </trans-unit>
        <trans-unit id="0de9363c585da842dc94d7cb92e52e9a964df31b" translate="yes" xml:space="preserve">
          <source>The pixel heights of a window&amp;rsquo;s mode and header line can be retrieved with the functions given below. Their return value is usually accurate unless the window has not been displayed before: In that case, the return value is based on an estimate of the font used for the window&amp;rsquo;s frame.</source>
          <target state="translated">ウィンドウのモードとヘッダー行のピクセルの高さは、以下の関数で取得できます。ウィンドウが以前に表示されたことがない場合を除いて、通常、それらの戻り値は正確です。その場合、戻り値はウィンドウのフレームに使用されているフォントの見積もりに基づいています。</target>
        </trans-unit>
        <trans-unit id="43c14cab8a2b2bb269e27efdcb44906c088989c3" translate="yes" xml:space="preserve">
          <source>The pixel size of the font used to open the font.</source>
          <target state="translated">フォントを開くときに使用するフォントのピクセルサイズ。</target>
        </trans-unit>
        <trans-unit id="0d3304078e97e6d9fcd53507ef3658705f5b3745" translate="yes" xml:space="preserve">
          <source>The pixel size of the font.</source>
          <target state="translated">フォントのピクセルサイズ。</target>
        </trans-unit>
        <trans-unit id="d5e8626e71efeeae5801637fe0d104f5743bf82a" translate="yes" xml:space="preserve">
          <source>The pixel widths of the left and right fringes in this window. A value of -1 means use the values of the frame.</source>
          <target state="translated">このウィンドウの左右のフリンジのピクセル幅を指定します。値 -1 はフレームの値を使用することを意味します。</target>
        </trans-unit>
        <trans-unit id="a476ed7f718dc326836a3ad0a813832b8273668d" translate="yes" xml:space="preserve">
          <source>The place where you insert &amp;lsquo;</source>
          <target state="translated">挿入する場所 '</target>
        </trans-unit>
        <trans-unit id="489704a85a579cab25a1f96c62ae86111efc895a" translate="yes" xml:space="preserve">
          <source>The places within a function where Edebug can stop execution are called &lt;em&gt;stop points&lt;/em&gt;. These occur both before and after each subexpression that is a list, and also after each variable reference. Here we use periods to show the stop points in the function &lt;code&gt;fac&lt;/code&gt;:</source>
          <target state="translated">Edebugが実行を停止できる関数内の場所は、&lt;em&gt;ストップポイント&lt;/em&gt;と呼ばれます。これらは、リストである各部分式の前後、および各変数参照の後に発生します。ここでは、ピリオドを使用して関数 &lt;code&gt;fac&lt;/code&gt; の停止点を示しています。</target>
        </trans-unit>
        <trans-unit id="31d74db390eea1284d7b4e181bb2f481d81da20c" translate="yes" xml:space="preserve">
          <source>The plural &amp;ldquo;frames&amp;rdquo; in the previous paragraph is deliberate: while Emacs itself has only one selected frame, Emacs can have frames on many different terminals (recall that a connection to a window system counts as a terminal), and each terminal has its own idea of which frame has input focus. When you set the input focus to a frame, you set the focus for that frame&amp;rsquo;s terminal, but frames on other terminals may still remain focused.</source>
          <target state="translated">前の段落の複数の「フレーム」は意図的なものです。Emacs自体には選択されたフレームが1つしかありませんが、Emacsは多くの異なる端末にフレームを持つことができ（ウィンドウシステムへの接続は端末としてカウントされることを思い出してください）、各端末には独自のフレームがありますどのフレームに入力フォーカスがあるかがわかります。入力フォーカスをフレームに設定すると、そのフレームの端子にフォーカスが設定されますが、他の端子のフレームはフォーカスされたままになる場合があります。</target>
        </trans-unit>
        <trans-unit id="ce65815e1a28f37a72576e7cbec00483473f471a" translate="yes" xml:space="preserve">
          <source>The point of running a program through the shell, rather than directly with &lt;code&gt;make-process&lt;/code&gt; or &lt;code&gt;start-process&lt;/code&gt;, is so that you can employ shell features such as wildcards in the arguments. It follows that if you include any arbitrary user-specified arguments in the command, you should quote them with &lt;code&gt;shell-quote-argument&lt;/code&gt; first, so that any special shell characters do &lt;em&gt;not&lt;/em&gt; have their special shell meanings. See &lt;a href=&quot;shell-arguments#Shell-Arguments&quot;&gt;Shell Arguments&lt;/a&gt;. Of course, when executing commands based on user input you should also consider the security implications.</source>
          <target state="translated">&lt;code&gt;make-process&lt;/code&gt; または &lt;code&gt;start-process&lt;/code&gt; を直接使用するのではなく、シェルを介してプログラムを実行するポイントは、引数にワイルドカードなどのシェル機能を使用できるようにすることです。したがって、コマンドに任意のユーザー指定の引数を含める場合は、最初に &lt;code&gt;shell-quote-argument&lt;/code&gt; でそれらを引用して、特別なシェル文字が特別なシェルの意味を持た&lt;em&gt;ない&lt;/em&gt;ようにする必要が&lt;em&gt;あり&lt;/em&gt;ます。&lt;a href=&quot;shell-arguments#Shell-Arguments&quot;&gt;シェル引数を&lt;/a&gt;参照してください。もちろん、ユーザー入力に基づいてコマンドを実行するときは、セキュリティへの影響も考慮する必要があります。</target>
        </trans-unit>
        <trans-unit id="87e05b91e6233e17b204f23015097c7049303099" translate="yes" xml:space="preserve">
          <source>The position at which the line being indented begins.</source>
          <target state="translated">インデントされている行の開始位置。</target>
        </trans-unit>
        <trans-unit id="45b07b40e31e169ede72cfe22029fabdc54bc98b" translate="yes" xml:space="preserve">
          <source>The position in the buffer for which the line number is known, or zero meaning none is known. If it is -1, don&amp;rsquo;t display the line number as long as the window shows that buffer.</source>
          <target state="translated">行番号がわかっているバッファー内の位置、またはゼロは不明であることを意味します。-1の場合、ウィンドウにそのバッファが表示されている限り、行番号を表示しないでください。</target>
        </trans-unit>
        <trans-unit id="7bb41d39783192e6aaaa6d09fb0dcd6b9d067af6" translate="yes" xml:space="preserve">
          <source>The position in the string where the click occurred.</source>
          <target state="translated">文字列の中でクリックが発生した位置。</target>
        </trans-unit>
        <trans-unit id="1c5737b61d1133d53c07a40026bed5c9ffc696e8" translate="yes" xml:space="preserve">
          <source>The position of a frame on its display.</source>
          <target state="translated">ディスプレイ上のフレームの位置。</target>
        </trans-unit>
        <trans-unit id="887258f07e45dd70c1b6e53e04e7f416f5a7b904" translate="yes" xml:space="preserve">
          <source>The position of point, as an integer (see &lt;a href=&quot;point#Point&quot;&gt;Point&lt;/a&gt;). No I/O.</source>
          <target state="translated">整数としてのポイントの位置（&lt;a href=&quot;point#Point&quot;&gt;ポイントを&lt;/a&gt;参照）。I / Oなし。</target>
        </trans-unit>
        <trans-unit id="6403590e242da2f2207180f395d2c07e997ed88a" translate="yes" xml:space="preserve">
          <source>The position of the frame on the screen.</source>
          <target state="translated">画面上のフレームの位置。</target>
        </trans-unit>
        <trans-unit id="255ed0f6aab596c870f5c23defcace62009a4b51" translate="yes" xml:space="preserve">
          <source>The position of the mark, as an integer. No I/O.</source>
          <target state="translated">マークの位置を整数で指定します。I/Oはありません。</target>
        </trans-unit>
        <trans-unit id="a5dd7b877105dceee61a4c59515a66464dc839be" translate="yes" xml:space="preserve">
          <source>The position of the tool bar when Emacs was built with GTK+. Its value can be one of &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;&lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;. The default is &lt;code&gt;top&lt;/code&gt;.</source>
          <target state="translated">EmacsがGTK +で構築されたときのツールバーの位置。その値は、のいずれかになります。 &lt;code&gt;top&lt;/code&gt; 、 &lt;code&gt;bottom&lt;/code&gt; &lt;code&gt;left&lt;/code&gt; 、 &lt;code&gt;right&lt;/code&gt; 。デフォルトは &lt;code&gt;top&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="02d4165115759fe0837c49ced5e39ea743ea4c2a" translate="yes" xml:space="preserve">
          <source>The position of the top left corner of the native frame specifies the &lt;em&gt;native position&lt;/em&gt; of the frame. (1)&amp;ndash;(3) in the drawing above indicate that position for the various builds:</source>
          <target state="translated">ネイティブフレームの左上隅の&lt;em&gt;位置&lt;/em&gt;は、フレームの&lt;em&gt;ネイティブ位置&lt;/em&gt;を指定します。上の図の（1）&amp;ndash;（3）は、さまざまなビルドの位置を示しています。</target>
        </trans-unit>
        <trans-unit id="833e5a5239b46b2d55c382c18b023ecd55ad49ca" translate="yes" xml:space="preserve">
          <source>The position of the upper left corner of the outer frame (indicated by &amp;lsquo;</source>
          <target state="translated">外枠の左上隅の位置（ 'で示されます</target>
        </trans-unit>
        <trans-unit id="8410a3b5f6f9e6c84d904b172515815de91f0dd2" translate="yes" xml:space="preserve">
          <source>The position, in pixels, of the left outer edge of the frame with respect to the left edge of the frame&amp;rsquo;s display or parent frame. It can be specified in one of the following ways.</source>
          <target state="translated">フレームのディスプレイまたは親フレームの左端に対するフレームの左外端の位置（ピクセル単位）。次のいずれかの方法で指定できます。</target>
        </trans-unit>
        <trans-unit id="159bfe6471c89158a22673c87af74200df998625" translate="yes" xml:space="preserve">
          <source>The possible values for an actual subprocess are:</source>
          <target state="translated">実際のサブプロセスで可能な値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="ca9c70ab4f2597d1a37484e4797e646e200cc36c" translate="yes" xml:space="preserve">
          <source>The preceding examples all use sequencing patterns which include the &lt;var&gt;symbol&lt;/var&gt; sub-pattern in some way. Here are some important details about that usage.</source>
          <target state="translated">上記の例はすべて、何らかの方法で &lt;var&gt;symbol&lt;/var&gt; サブパターンを含むシーケンスパターンを使用しています。その使用法に関するいくつかの重要な詳細があります。</target>
        </trans-unit>
        <trans-unit id="a258153ccf268c951438b192904eade1c144e0c6" translate="yes" xml:space="preserve">
          <source>The precise effect of adding a value depends on the customization type of &lt;var&gt;symbol&lt;/var&gt;.</source>
          <target state="translated">値を追加する正確な効果は、 &lt;var&gt;symbol&lt;/var&gt; カスタマイズタイプによって異なります。</target>
        </trans-unit>
        <trans-unit id="3f4009f97f05ca5f3cb51352b6efa1949bc23635" translate="yes" xml:space="preserve">
          <source>The precise meaning of a value of &lt;code&gt;nil&lt;/code&gt; for this option depends on the toolkit used. Dragging the external border with the mouse is done character-wise provided the window manager is willing to process the corresponding size hints. Calling &lt;code&gt;set-frame-size&lt;/code&gt; (see below) with arguments that do not specify the frame size as an integer multiple of its character size, however, may: be ignored, cause a rounding (GTK+), or be accepted (Lucid, Motif, MS-Windows).</source>
          <target state="translated">このオプションの &lt;code&gt;nil&lt;/code&gt; の値の正確な意味は、使用するツールキットによって異なります。ウィンドウマネージャが対応するサイズのヒントを処理する意思がある場合、マウスで外部境界線をドラッグすることは文字単位で行われます。ただし、フレームサイズを文字サイズの整数倍として指定しない引数を使用して &lt;code&gt;set-frame-size&lt;/code&gt; （以下を参照）を呼び出すと、無視されるか、丸めが発生する（GTK +）か、受け入れられる（Lucid、Motif、 MS-Windows）。</target>
        </trans-unit>
        <trans-unit id="b4aa737004ad2535ebe02bb899113024dc279e7a" translate="yes" xml:space="preserve">
          <source>The precise meaning of the event parameters and the way these parameters are used to display the help-echo text are described in &lt;a href=&quot;special-properties#Text-help_002decho&quot;&gt;Text help-echo&lt;/a&gt;.</source>
          <target state="translated">イベントパラメータの正確な意味と、これらのパラメータを使用してヘルプエコーテキストを表示する方法については、&lt;a href=&quot;special-properties#Text-help_002decho&quot;&gt;テキストヘルプエコーで&lt;/a&gt;説明しています。</target>
        </trans-unit>
        <trans-unit id="c34b9bbf535e3965b815554ff0467b7f149d988d" translate="yes" xml:space="preserve">
          <source>The previous buffer is usually the buffer shown before the buffer currently shown in &lt;var&gt;window&lt;/var&gt;. However, a buffer that has been buried or killed, or has been already shown by a recent invocation of &lt;code&gt;switch-to-prev-buffer&lt;/code&gt;, does not qualify as previous buffer.</source>
          <target state="translated">前のバッファは通常、現在 &lt;var&gt;window&lt;/var&gt; 表示されているバッファの前に表示されているバッファです。ただし、埋め込みまたは強制終了されたバッファ、または最近の &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; の呼び出しによってすでに表示されているバッファは、以前のバッファとしての資格がありません。</target>
        </trans-unit>
        <trans-unit id="28721bd17842d6dccb7fd270c15c4194e8d5baba" translate="yes" xml:space="preserve">
          <source>The primary use of this function is as a subroutine by constructs that define or alter functions, like &lt;code&gt;defun&lt;/code&gt; or &lt;code&gt;advice-add&lt;/code&gt; (see &lt;a href=&quot;advising-functions#Advising-Functions&quot;&gt;Advising Functions&lt;/a&gt;). You can also use it to give a symbol a function definition that is not a function, e.g., a keyboard macro (see &lt;a href=&quot;keyboard-macros#Keyboard-Macros&quot;&gt;Keyboard Macros&lt;/a&gt;):</source>
          <target state="translated">この関数の主な用途は、 &lt;code&gt;defun&lt;/code&gt; や &lt;code&gt;advice-add&lt;/code&gt; などの関数を定義または変更する構造体によるサブルーチンとしてです（「&lt;a href=&quot;advising-functions#Advising-Functions&quot;&gt;アドバイス関数&lt;/a&gt;」を参照）。また、これを使用して、関数ではない関数定義をシンボルに与えることもできます（例：キーボードマクロ（&lt;a href=&quot;keyboard-macros#Keyboard-Macros&quot;&gt;キーボードマクロを&lt;/a&gt;参照））。</target>
        </trans-unit>
        <trans-unit id="ba9b5b776cc5667a85cd400075ca47d55ca09c2c" translate="yes" xml:space="preserve">
          <source>The primitive that extracts text from the buffer along with its properties is &lt;code&gt;buffer-substring&lt;/code&gt;. Before examining the properties, this function runs the abnormal hook &lt;code&gt;buffer-access-fontify-functions&lt;/code&gt;.</source>
          <target state="translated">バッファからテキストをそのプロパティとともに抽出するプリミティブは、 &lt;code&gt;buffer-substring&lt;/code&gt; です。プロパティを調べる前に、この関数は異常なフック &lt;code&gt;buffer-access-fontify-functions&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="6a90a548ae4af1e7a922a25155c161c7315ce8da" translate="yes" xml:space="preserve">
          <source>The primitive way to create a byte-code object is with &lt;code&gt;make-byte-code&lt;/code&gt;:</source>
          <target state="translated">バイトコードオブジェクトを作成する基本的な方法は、 &lt;code&gt;make-byte-code&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="4906a197371ef069deb8bf9326d82ffeae4a7205" translate="yes" xml:space="preserve">
          <source>The primitives for changing properties apply to a specified range of text in a buffer or string. The function &lt;code&gt;set-text-properties&lt;/code&gt; (see end of section) sets the entire property list of the text in that range; more often, it is useful to add, change, or delete just certain properties specified by name.</source>
          <target state="translated">プロパティを変更するためのプリミティブは、バッファまたは文字列内の指定された範囲のテキストに適用されます。関数 &lt;code&gt;set-text-properties&lt;/code&gt; （セクションの終わりを参照）は、その範囲内のテキストのプロパティリスト全体を設定します。多くの場合、名前で指定された特定のプロパティのみを追加、変更、または削除すると便利です。</target>
        </trans-unit>
        <trans-unit id="86e6972405ceac8fb0c2ebcbb1d084d74c15e137" translate="yes" xml:space="preserve">
          <source>The principal function for creating a hash table is &lt;code&gt;make-hash-table&lt;/code&gt;.</source>
          <target state="translated">ハッシュテーブルを作成するための主要な関数は &lt;code&gt;make-hash-table&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3e0ef3a61ced98eb5fb2f872d19a707b38cfe6c5" translate="yes" xml:space="preserve">
          <source>The principal purpose of coding systems is for use in reading and writing files. The function &lt;code&gt;insert-file-contents&lt;/code&gt; uses a coding system to decode the file data, and &lt;code&gt;write-region&lt;/code&gt; uses one to encode the buffer contents.</source>
          <target state="translated">コーディングシステムの主な目的は、ファイルの読み取りと書き込みに使用することです。関数 &lt;code&gt;insert-file-contents&lt;/code&gt; は、コーディングシステムを使用してファイルデータをデコードし、 &lt;code&gt;write-region&lt;/code&gt; はコーディングシステムを使用してバッファコンテンツをエンコードします。</target>
        </trans-unit>
        <trans-unit id="55a4ae7918bc297ffd67f49ed5d08ef37025a3dc" translate="yes" xml:space="preserve">
          <source>The print name cell always holds a string, and cannot be changed. Each of the other three cells can be set to any Lisp object.</source>
          <target state="translated">print nameセルは常に文字列を保持しており、変更することはできません。他の3つのセルはそれぞれ任意のLispオブジェクトに設定することができます。</target>
        </trans-unit>
        <trans-unit id="de95f3a3b46a96121feaa824d316764b0883107a" translate="yes" xml:space="preserve">
          <source>The print name cell holds the string that is the name of a symbol. Since symbols are represented textually by their names, it is important not to have two symbols with the same name. The Lisp reader ensures this: every time it reads a symbol, it looks for an existing symbol with the specified name before it creates a new one. To get a symbol&amp;rsquo;s name, use the function &lt;code&gt;symbol-name&lt;/code&gt; (see &lt;a href=&quot;creating-symbols#Creating-Symbols&quot;&gt;Creating Symbols&lt;/a&gt;).</source>
          <target state="translated">印刷名セルは、シンボルの名前である文字列を保持します。記号はテキストで名前で表されるため、同じ名前の記号が2つないことが重要です。Lispリーダーはこれを保証します。シンボルを読み取るたびに、新しいシンボルを作成する前に、指定された名前の既存のシンボルを探します。シンボルの名前を取得するには、関数 &lt;code&gt;symbol-name&lt;/code&gt; を使用します（シンボルの&lt;a href=&quot;creating-symbols#Creating-Symbols&quot;&gt;作成を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="2bbc34bf200918e9a448ed9f1f2b1f066e970b26" translate="yes" xml:space="preserve">
          <source>The printed form represents up to 8 boolean values as a single character:</source>
          <target state="translated">印刷されたフォームは、最大8つのブール値を1文字で表します。</target>
        </trans-unit>
        <trans-unit id="12644b40b0774ec2e789694cfc7abf62c019cde5" translate="yes" xml:space="preserve">
          <source>The printed representation and read syntax for a byte-code function object is like that for a vector, with an additional &amp;lsquo;</source>
          <target state="translated">バイトコード関数オブジェクトの出力された表現と読み取り構文は、ベクトルの場合と似ていますが、 'が追加されています</target>
        </trans-unit>
        <trans-unit id="93d512217d9e0e619c1036f6280703870832034c" translate="yes" xml:space="preserve">
          <source>The printed representation for a hash table consists of &amp;lsquo;</source>
          <target state="translated">ハッシュテーブルの印刷表現は、次のもので構成されます。</target>
        </trans-unit>
        <trans-unit id="861954f964e54658232242a23ea2b7ee8994c956" translate="yes" xml:space="preserve">
          <source>The printed representation for floating-point numbers requires either a decimal point (with at least one digit following), an exponent, or both. For example, &amp;lsquo;</source>
          <target state="translated">浮動小数点数の印刷表現には、小数点（少なくとも1桁の数字が続く）、指数、またはその両方が必要です。例えば、 '</target>
        </trans-unit>
        <trans-unit id="7b99966b7387dd5ed35f73f081dbe0bcb6cc5e9b" translate="yes" xml:space="preserve">
          <source>The printed representation of a bool-vector is like a string, except that it begins with &amp;lsquo;</source>
          <target state="translated">bool-vectorの印刷表現は、 'で始まることを除いて、文字列に似ています。</target>
        </trans-unit>
        <trans-unit id="9a73160413b74c1de6679be1eae2e2a5562706a0" translate="yes" xml:space="preserve">
          <source>The printed representation of a char-table is like a vector except that there is an extra &amp;lsquo;</source>
          <target state="translated">文字テーブルの印刷された表現は、余分な 'があることを除いて、ベクトルに似ています</target>
        </trans-unit>
        <trans-unit id="cf4d2204ede2ec7542b976b427c02ab6ac905744" translate="yes" xml:space="preserve">
          <source>The printed representation of a vector consists of a left square bracket, the elements, and a right square bracket. This is also the read syntax. Like numbers and strings, vectors are considered constants for evaluation.</source>
          <target state="translated">ベクトルの印刷表現は、左の角括弧、要素、右の角括弧で構成されています。これは読み取り構文でもあります。数値や文字列と同様に、ベクトルは評価のための定数と考えられています。</target>
        </trans-unit>
        <trans-unit id="54bdda2e2c897bbee3fd6ea2ce6150e050bbdbf0" translate="yes" xml:space="preserve">
          <source>The printed representation of an interned symbol whose name is an empty string (see &lt;a href=&quot;symbol-type#Symbol-Type&quot;&gt;Symbol Type&lt;/a&gt;).</source>
          <target state="translated">名前が空の文字列であるインターンシンボルの印刷表現（&lt;a href=&quot;symbol-type#Symbol-Type&quot;&gt;シンボルタイプを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="b6b4f81ab9ddc9b498748d084ab114136d13e0d2" translate="yes" xml:space="preserve">
          <source>The printed representation of an uninterned symbol whose name is &lt;var&gt;foo&lt;/var&gt; is &amp;lsquo;</source>
          <target state="translated">名前が &lt;var&gt;foo&lt;/var&gt; であるインターンされていないシンボルの印刷された表現は 'です。</target>
        </trans-unit>
        <trans-unit id="f0d146789656a2ca889b28283579fa331b709ea3" translate="yes" xml:space="preserve">
          <source>The printed representation of records is &amp;lsquo;</source>
          <target state="translated">レコードの印刷表現は 'です</target>
        </trans-unit>
        <trans-unit id="06414aa54aa49ed289b3f642280e72ea07845a4c" translate="yes" xml:space="preserve">
          <source>The priority matters when two or more overlays cover the same character and both specify the same property; the one whose &lt;code&gt;priority&lt;/code&gt; value is larger overrides the other. (For the &lt;code&gt;face&lt;/code&gt; property, the higher priority overlay&amp;rsquo;s value does not completely override the other value; instead, its face attributes override the face attributes of the lower priority &lt;code&gt;face&lt;/code&gt; property.) If two overlays have the same priority value, and one is nested in the other, then the inner one will prevail over the outer one. If neither is nested in the other then you should not make assumptions about which overlay will prevail.</source>
          <target state="translated">2つ以上のオーバーレイが同じ文字をカバーし、両方が同じプロパティを指定する場合、優先順位が重要になります。その1 &lt;code&gt;priority&lt;/code&gt; 値が大きくオーバーライド他のです。（ &lt;code&gt;face&lt;/code&gt; プロパティの場合、優先度の高いオーバーレイの値が他の値を完全にオーバーライドするのではなく、そのface属性が優先度の低い &lt;code&gt;face&lt;/code&gt; プロパティのface属性をオーバーライドします。）2つのオーバーレイの優先度が同じで、一方がネストされている場合もう一方の場合、内側のものが外側のものよりも優先されます。どちらももう一方にネストされていない場合は、どちらのオーバーレイが優先されるかを想定しないでください。</target>
        </trans-unit>
        <trans-unit id="e73afd850ba19d88fffc870b34d4546ef04a4eba" translate="yes" xml:space="preserve">
          <source>The process ID of the parent process, a number.</source>
          <target state="translated">親プロセスのプロセスID、数字。</target>
        </trans-unit>
        <trans-unit id="53e1a9ea303ee6836b551778e58f2f51e300eedc" translate="yes" xml:space="preserve">
          <source>The process group ID of the process, a number.</source>
          <target state="translated">プロセスのプロセスグループID、数字。</target>
        </trans-unit>
        <trans-unit id="4ccf440991f7f0652996b8ab7560a4dbe5b3aace" translate="yes" xml:space="preserve">
          <source>The process status, as &lt;code&gt;process-status&lt;/code&gt; should return it. This is a Lisp symbol, a cons cell, or a list.</source>
          <target state="translated">&lt;code&gt;process-status&lt;/code&gt; はそれを返す必要があるため、プロセスステータス。これは、Lispシンボル、短所セル、またはリストです。</target>
        </trans-unit>
        <trans-unit id="69ecf0580268b93750c7e889a04309c3293a5f2b" translate="yes" xml:space="preserve">
          <source>The processes are shown in a buffer named</source>
          <target state="translated">プロセスは</target>
        </trans-unit>
        <trans-unit id="6c8f30c53cf4f4d39e77991527ad73dbc1793851" translate="yes" xml:space="preserve">
          <source>The product name of the server.</source>
          <target state="translated">サーバーの商品名です。</target>
        </trans-unit>
        <trans-unit id="0cd39baec68fc236a0a093df363f5e95bd2c4fb6" translate="yes" xml:space="preserve">
          <source>The profiler report buffer shows, on each line, a function that was called, followed by how much resources (cpu or memory) it used in absolute and percentage terms since profiling started. If a given line has a &amp;lsquo;</source>
          <target state="translated">プロファイラーレポートバッファーは、各行に、呼び出された関数の後に、プロファイリングが開始されてから絶対およびパーセンテージで使用されたリソース（CPUまたはメモリ）の量を示します。特定の行に 'がある場合</target>
        </trans-unit>
        <trans-unit id="d9d8457c45fc52a797df2f33e4e4ba6a34bec404" translate="yes" xml:space="preserve">
          <source>The prompt string can use &amp;lsquo;</source>
          <target state="translated">プロンプト文字列は 'を使用できます</target>
        </trans-unit>
        <trans-unit id="0ea085744f883658e286f289c21d5bb3c923b174" translate="yes" xml:space="preserve">
          <source>The proper place to use &lt;code&gt;defalias&lt;/code&gt; is where a specific function name is being defined&amp;mdash;especially where that name appears explicitly in the source file being loaded. This is because &lt;code&gt;defalias&lt;/code&gt; records which file defined the function, just like &lt;code&gt;defun&lt;/code&gt; (see &lt;a href=&quot;unloading#Unloading&quot;&gt;Unloading&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;defalias&lt;/code&gt; を使用する適切な場所は、特定の関数名が定義されている場所です。特に、その名前がロードされているソースファイルに明示的に表示されている場所です。これは、ある &lt;code&gt;defalias&lt;/code&gt; のと同じように、機能を定義したファイル、レコード &lt;code&gt;defun&lt;/code&gt; （SEEの&lt;a href=&quot;unloading#Unloading&quot;&gt;アンロード&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="d90fe58bfa2b87a1b1cbc6838a53a60deea67366" translate="yes" xml:space="preserve">
          <source>The proper way to construct a keymap with a parent is to use &lt;code&gt;set-keymap-parent&lt;/code&gt;; if you have code that directly constructs a keymap with a parent, please convert the program to use &lt;code&gt;set-keymap-parent&lt;/code&gt; instead.</source>
          <target state="translated">親を使用してキーマップを作成する適切な方法は、 &lt;code&gt;set-keymap-parent&lt;/code&gt; を使用することです。親を使用してキーマップを直接構築するコードがある場合は、代わりに &lt;code&gt;set-keymap-parent&lt;/code&gt; を使用するようにプログラムを変換してください。</target>
        </trans-unit>
        <trans-unit id="1dfec31a43b4f7ab97faaddb57234977bb256c37" translate="yes" xml:space="preserve">
          <source>The property list cell normally should hold a correctly formatted property list. To get a symbol&amp;rsquo;s property list, use the function &lt;code&gt;symbol-plist&lt;/code&gt;. See &lt;a href=&quot;symbol-properties#Symbol-Properties&quot;&gt;Symbol Properties&lt;/a&gt;.</source>
          <target state="translated">プロパティリストセルは通常、正しくフォーマットされたプロパティリストを保持する必要があります。シンボルのプロパティリストを取得するには、関数 &lt;code&gt;symbol-plist&lt;/code&gt; を使用します。&lt;a href=&quot;symbol-properties#Symbol-Properties&quot;&gt;シンボルのプロパティを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c911a8445b3bd7bfea7954dcdd17b841dcbd3fcb" translate="yes" xml:space="preserve">
          <source>The property&amp;rsquo;s value for the character before point applies if it is non-&lt;code&gt;nil&lt;/code&gt; and rear-sticky, and the property&amp;rsquo;s value for the character after point applies if it is non-&lt;code&gt;nil&lt;/code&gt; and front-sticky. (For mouse clicks, the position of the click is used instead of the position of point.)</source>
          <target state="translated">ポイントの前の文字のプロパティの値は、 &lt;code&gt;nil&lt;/code&gt; 以外で後部の粘着性がある場合に適用され、ポイントの後の文字のプロパティの値は、 &lt;code&gt;nil&lt;/code&gt; 以外で前部の粘着性の場合に適用されます。（マウスクリックの場合、ポイントの位置の代わりにクリックの位置が使用されます。）</target>
        </trans-unit>
        <trans-unit id="78c51406ca787ccde17c730ea362d97d0f2b5d6a" translate="yes" xml:space="preserve">
          <source>The purpose of &lt;code&gt;throw&lt;/code&gt; is to return from a return point previously established with &lt;code&gt;catch&lt;/code&gt;. The argument &lt;var&gt;tag&lt;/var&gt; is used to choose among the various existing return points; it must be &lt;code&gt;eq&lt;/code&gt; to the value specified in the &lt;code&gt;catch&lt;/code&gt;. If multiple return points match &lt;var&gt;tag&lt;/var&gt;, the innermost one is used.</source>
          <target state="translated">&lt;code&gt;throw&lt;/code&gt; の目的は、 &lt;code&gt;catch&lt;/code&gt; で以前に設定されたリターンポイントから戻ることです。引数 &lt;var&gt;tag&lt;/var&gt; は、さまざまな既存のリターンポイントから選択するために使用されます。これは、 &lt;code&gt;catch&lt;/code&gt; で指定された値と &lt;code&gt;eq&lt;/code&gt; である必要があります。複数のリターンポイントが &lt;var&gt;tag&lt;/var&gt; に一致する場合、最も内側のポイントが使用されます。</target>
        </trans-unit>
        <trans-unit id="a798f48d5361b3f20f9b8da5927f51db1ca4bd70" translate="yes" xml:space="preserve">
          <source>The purpose of records is to allow programmers to create objects with new types that are not built into Emacs. They are used as the underlying representation of &lt;code&gt;cl-defstruct&lt;/code&gt; and &lt;code&gt;defclass&lt;/code&gt; instances.</source>
          <target state="translated">レコードの目的は、プログラマーがEmacsに組み込まれていない新しいタイプのオブジェクトを作成できるようにすることです。これらは、 &lt;code&gt;cl-defstruct&lt;/code&gt; および &lt;code&gt;defclass&lt;/code&gt; インスタンスの基礎となる表現として使用されます。</target>
        </trans-unit>
        <trans-unit id="6b48773be77ed3bf897730ad62b02207f496fa84" translate="yes" xml:space="preserve">
          <source>The purpose of this variable is to prevent unreasonably large images from accidentally being loaded into Emacs. It only takes effect the first time an image is loaded. Once an image is placed in the image cache, it can always be displayed, even if the value of &lt;code&gt;max-image-size&lt;/code&gt; is subsequently changed (see &lt;a href=&quot;image-cache#Image-Cache&quot;&gt;Image Cache&lt;/a&gt;).</source>
          <target state="translated">この変数の目的は、不当に大きな画像が誤ってEmacsにロードされるのを防ぐことです。画像が最初に読み込まれたときにのみ有効になります。画像が画像キャッシュに配置されると、 &lt;code&gt;max-image-size&lt;/code&gt; の値が後で変更された場合でも、いつでも表示できます（&lt;a href=&quot;image-cache#Image-Cache&quot;&gt;画像キャッシュを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="8b698db8f7ae03128e22b00ae5ae3b89fa737eaf" translate="yes" xml:space="preserve">
          <source>The range of values for a fixnum depends on the machine. The minimum range is -536,870,912 to 536,870,911 (30 bits; i.e., -2**29 to 2**29 - 1) but many machines provide a wider range.</source>
          <target state="translated">フィックスナムの値の範囲はマシンによって異なります。最小範囲は -536,870,912 から 536,870,911 (30 ビット;つまり -2**29 から 2**29-1)ですが、多くのマシンではもっと広い範囲を提供しています。</target>
        </trans-unit>
        <trans-unit id="af85b0412ddc48c46d5b6e80df88faf36ad2e739" translate="yes" xml:space="preserve">
          <source>The range of values for a fixnum depends on the machine. The minimum range is -536,870,912 to 536,870,911 (30 bits; i.e., -2**29 to 2**29 - 1), but many machines provide a wider range.</source>
          <target state="translated">フィックスナムの値の範囲はマシンによって異なります。最小範囲は -536,870,912 から 536,870,911 (30 ビット;つまり -2**29 から 2**29-1)ですが、多くのマシンではもっと広い範囲を提供しています。</target>
        </trans-unit>
        <trans-unit id="cce27534771922ba161893777df990814edba95c" translate="yes" xml:space="preserve">
          <source>The range of values for bignums is limited by the amount of main memory, by machine characteristics such as the size of the word used to represent a bignum&amp;rsquo;s exponent, and by the &lt;code&gt;integer-width&lt;/code&gt; variable. These limits are typically much more generous than the limits for fixnums. A bignum is never numerically equal to a fixnum; Emacs always represents an integer in fixnum range as a fixnum, not a bignum.</source>
          <target state="translated">bignumの値の範囲は、メインメモリの量、bignumの指数を表すために使用されるワードのサイズなどのマシンの特性、および &lt;code&gt;integer-width&lt;/code&gt; 変数によって制限されます。これらの制限は通常、fixnumの制限よりもはるかに寛大です。bignumがfixnumと数値的に等しくなることはありません。Emacsは常にfixnum範囲の整数をbignumではなくfixnumとして表します。</target>
        </trans-unit>
        <trans-unit id="88fcc9a379dd1cc063bcdc17672afd2ddd066644" translate="yes" xml:space="preserve">
          <source>The raw prefix argument value used by the previous command.</source>
          <target state="translated">前のコマンドで使用された生のプレフィックス引数の値。</target>
        </trans-unit>
        <trans-unit id="188580ce5aed7a8d00ced05add7b99d84193146d" translate="yes" xml:space="preserve">
          <source>The raw prefix argument. (Note that this &amp;lsquo;</source>
          <target state="translated">生のプレフィックス引数。（これは '</target>
        </trans-unit>
        <trans-unit id="918eb5fe78ecdeb2b74cf1c707d70d8317c7c8ca" translate="yes" xml:space="preserve">
          <source>The raw process status, as returned by the &lt;code&gt;wait&lt;/code&gt; system call.</source>
          <target state="translated">&lt;code&gt;wait&lt;/code&gt; システムコールによって返される生のプロセスステータス。</target>
        </trans-unit>
        <trans-unit id="8d40522328efd69f1813ecc9395f2a99749405bb" translate="yes" xml:space="preserve">
          <source>The read syntax &lt;code&gt;#'&lt;/code&gt; is a short-hand for using &lt;code&gt;function&lt;/code&gt;. The following forms are all equivalent:</source>
          <target state="translated">読み取り構文 &lt;code&gt;#'&lt;/code&gt; は、 &lt;code&gt;function&lt;/code&gt; を使用するための省略形です。次の形式はすべて同等です。</target>
        </trans-unit>
        <trans-unit id="f0ccfae7f5d50ab8dd7bf0125292e2e7d92e715d" translate="yes" xml:space="preserve">
          <source>The read syntax and printed representation for lists are identical, and consist of a left parenthesis, an arbitrary number of elements, and a right parenthesis. Here are examples of lists:</source>
          <target state="translated">リストの読み込み構文と印刷された表現は同じで、左括弧、任意の数の要素、右括弧で構成されています。以下にリストの例を示します。</target>
        </trans-unit>
        <trans-unit id="699968d5ddfd6c3b251c3bfee7172adb575ecba8" translate="yes" xml:space="preserve">
          <source>The read syntax for a string is a double-quote, an arbitrary number of characters, and another double-quote, &lt;code&gt;&quot;like this&quot;&lt;/code&gt;. To include a double-quote in a string, precede it with a backslash; thus, &lt;code&gt;&quot;\&quot;&quot;&lt;/code&gt; is a string containing just one double-quote character. Likewise, you can include a backslash by preceding it with another backslash, like this: &lt;code&gt;&quot;this \\ is a single embedded
backslash&quot;&lt;/code&gt;.</source>
          <target state="translated">文字列の読み取り構文は、二重引用符、任意の文字数、および &lt;code&gt;&quot;like this&quot;&lt;/code&gt; に」別の二重引用符です。文字列に二重引用符を含めるには、その前に円記号を付けます。したがって、 &lt;code&gt;&quot;\&quot;&quot;&lt;/code&gt; は二重引用符を1つだけ含む文字列です。同様に、 &lt;code&gt;&quot;this \\ is a single embedded backslash&quot;&lt;/code&gt; ように、前に別のバックスラッシュを付けることでバックスラッシュを含めることができます。</target>
        </trans-unit>
        <trans-unit id="2db9c5ad71fdc5297e7b04c37c25b525f29392e3" translate="yes" xml:space="preserve">
          <source>The read syntax for floating-point numbers requires either a decimal point, an exponent, or both. Optional signs (&amp;lsquo;</source>
          <target state="translated">浮動小数点数の読み取り構文には、小数点、指数、またはその両方が必要です。オプションの標識（ '</target>
        </trans-unit>
        <trans-unit id="468ea3ba2253c757dfcdac67156c541df702374c" translate="yes" xml:space="preserve">
          <source>The read syntax for integers is a sequence of (base ten) digits with an optional sign at the beginning and an optional period at the end. The printed representation produced by the Lisp interpreter never has a leading &amp;lsquo;</source>
          <target state="translated">整数の読み取り構文は、（基数10）桁のシーケンスであり、最初にオプションの記号があり、最後にオプションのピリオドがあります。Lispインタプリタによって生成された印刷表現には、先頭に「</target>
        </trans-unit>
        <trans-unit id="a0df8f0e56b27b7fdf3f7492d928c4cf0eb4466b" translate="yes" xml:space="preserve">
          <source>The read syntax for meta characters uses &amp;lsquo;</source>
          <target state="translated">メタ文字の読み取り構文は 'を使用します</target>
        </trans-unit>
        <trans-unit id="ef7e662450af28ad76f1d8a4260adb6e69ae8a34" translate="yes" xml:space="preserve">
          <source>The reason for a mode to change this variable instead of &lt;code&gt;revert-buffer-function&lt;/code&gt; is to avoid duplicating or replacing the rest of what &lt;code&gt;revert-buffer&lt;/code&gt; does: asking for confirmation, clearing the undo list, deciding the proper major mode, and running the hooks listed below.</source>
          <target state="translated">代わりに、この変数変更するモード理由 &lt;code&gt;revert-buffer-function&lt;/code&gt; 何の残りの複製または交換を避けるためにある &lt;code&gt;revert-buffer&lt;/code&gt; 行います、確認を求めるアンドゥリストをクリアし、適切なメジャーモードを決定し、フックを実行しています以下通り。</target>
        </trans-unit>
        <trans-unit id="4a9fa0be0804d13fd54899e6b26f2ba4d73ac7bd" translate="yes" xml:space="preserve">
          <source>The reason for the name &lt;code&gt;lazy&lt;/code&gt; is that the other composite widgets convert their inferior widgets to internal form when the widget is instantiated in a buffer. This conversion is recursive, so the inferior widgets will convert &lt;em&gt;their&lt;/em&gt; inferior widgets. If the data structure is itself recursive, this conversion is an infinite recursion. The &lt;code&gt;lazy&lt;/code&gt; widget prevents the recursion: it convert its &lt;code&gt;:type&lt;/code&gt; argument only when needed.</source>
          <target state="translated">&lt;code&gt;lazy&lt;/code&gt; 名前の理由は、ウィジェットがバッファーでインスタンス化されるときに、他の複合ウィジェットが下位のウィジェットを内部形式に変換するためです。この変換は再帰的であるため、下位ウィジェットは下位ウィジェットを変換&lt;em&gt;し&lt;/em&gt;ます。データ構造自体が再帰的である場合、この変換は無限再帰です。 &lt;code&gt;lazy&lt;/code&gt; ウィジェットは、再帰を防ぐ：それはその変換 &lt;code&gt;:type&lt;/code&gt; 必要なだけの引数を。</target>
        </trans-unit>
        <trans-unit id="97c008ed1abdd793cef86b5d0eab947dc6ccb62d" translate="yes" xml:space="preserve">
          <source>The reason for this somewhat complex behavior is that it lets users easily toggle the minor mode interactively, and also lets the minor mode be easily enabled in a mode hook, like this:</source>
          <target state="translated">このやや複雑な動作の理由は、ユーザーが簡単にマイナーモードをインタラクティブに切り替えることができ、また、このようにモードフックでマイナーモードを簡単に有効にできるようにするためです。</target>
        </trans-unit>
        <trans-unit id="ab43773cfe02cb70d41dd331c0415859809fddf1" translate="yes" xml:space="preserve">
          <source>The recommended way to add a hook function to a hook is by calling &lt;code&gt;add-hook&lt;/code&gt; (see &lt;a href=&quot;setting-hooks#Setting-Hooks&quot;&gt;Setting Hooks&lt;/a&gt;). The hook functions may be any of the valid kinds of functions that &lt;code&gt;funcall&lt;/code&gt; accepts (see &lt;a href=&quot;what-is-a-function#What-Is-a-Function&quot;&gt;What Is a Function&lt;/a&gt;). Most normal hook variables are initially void; &lt;code&gt;add-hook&lt;/code&gt; knows how to deal with this. You can add hooks either globally or buffer-locally with &lt;code&gt;add-hook&lt;/code&gt;.</source>
          <target state="translated">フック関数をフックに追加するための推奨される方法は、 &lt;code&gt;add-hook&lt;/code&gt; を呼び出すことです（フックの&lt;a href=&quot;setting-hooks#Setting-Hooks&quot;&gt;設定を&lt;/a&gt;参照）。フック関数は、 &lt;code&gt;funcall&lt;/code&gt; が受け入れる有効な種類の関数のいずれかです（&lt;a href=&quot;what-is-a-function#What-Is-a-Function&quot;&gt;関数とはを&lt;/a&gt;参照）。ほとんどの通常のフック変数は最初は無効です。 &lt;code&gt;add-hook&lt;/code&gt; はこれに対処する方法を知っています。 &lt;code&gt;add-hook&lt;/code&gt; を使用して、フックをグローバルに追加することも、バッファローカルに追加することもできます。</target>
        </trans-unit>
        <trans-unit id="e72e25c71fad41850c51c81a50b1cd4e2873976c" translate="yes" xml:space="preserve">
          <source>The recommended way to define a new major mode is to derive it from an existing one using &lt;code&gt;define-derived-mode&lt;/code&gt;. If there is no closely related mode, you should inherit from either &lt;code&gt;text-mode&lt;/code&gt;, &lt;code&gt;special-mode&lt;/code&gt;, or &lt;code&gt;prog-mode&lt;/code&gt;. See &lt;a href=&quot;basic-major-modes#Basic-Major-Modes&quot;&gt;Basic Major Modes&lt;/a&gt;. If none of these are suitable, you can inherit from &lt;code&gt;fundamental-mode&lt;/code&gt; (see &lt;a href=&quot;major-modes#Major-Modes&quot;&gt;Major Modes&lt;/a&gt;).</source>
          <target state="translated">新しいメジャーモードを定義するための推奨される方法は、define-派生モードを使用して既存のメジャーモードから派生させること &lt;code&gt;define-derived-mode&lt;/code&gt; 。密接に関連するモードがない場合は、 &lt;code&gt;text-mode&lt;/code&gt; 、 &lt;code&gt;special-mode&lt;/code&gt; 、または &lt;code&gt;prog-mode&lt;/code&gt; のいずれかから継承する必要があります。&lt;a href=&quot;basic-major-modes#Basic-Major-Modes&quot;&gt;基本的なメジャーモードを&lt;/a&gt;参照してください。これらのいずれも適切でない場合は、 &lt;code&gt;fundamental-mode&lt;/code&gt; から継承できます（&lt;a href=&quot;major-modes#Major-Modes&quot;&gt;メジャーモードを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="55ee00344a022e04c610024dc173a8e737831bfc" translate="yes" xml:space="preserve">
          <source>The recommended way to use this function is to specify a name which fits the conventions of GNU and Unix systems, and pass it to &lt;code&gt;convert-standard-filename&lt;/code&gt;.</source>
          <target state="translated">この関数を使用するための推奨される方法は、GNUおよびUnixシステムの規則に適合する名前を指定し、それを &lt;code&gt;convert-standard-filename&lt;/code&gt; に渡すことです。</target>
        </trans-unit>
        <trans-unit id="55eca5446859f2ea52f9e345f8531406554a48b1" translate="yes" xml:space="preserve">
          <source>The redirection lasts until &lt;code&gt;redirect-frame-focus&lt;/code&gt; is called to change it.</source>
          <target state="translated">リダイレクトは、 &lt;code&gt;redirect-frame-focus&lt;/code&gt; が呼び出されて変更されるまで続きます。</target>
        </trans-unit>
        <trans-unit id="1a588fb9e8fcf72cfed3b3eefc36b97e65fb8bbc" translate="yes" xml:space="preserve">
          <source>The reference to &lt;var&gt;variable&lt;/var&gt; must be in the &lt;var&gt;then-form&lt;/var&gt; of the &lt;code&gt;if&lt;/code&gt;, and &lt;var&gt;variable&lt;/var&gt; must appear quoted in the call to &lt;code&gt;boundp&lt;/code&gt;.</source>
          <target state="translated">参照 &lt;var&gt;variable&lt;/var&gt; でなければなりません &lt;var&gt;then-form&lt;/var&gt; の &lt;code&gt;if&lt;/code&gt; 、および &lt;var&gt;variable&lt;/var&gt; 呼び出しで引用されて表示されなければなりません &lt;code&gt;boundp&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e411de3f279f8655e1e219fed4c21701eca0eed7" translate="yes" xml:space="preserve">
          <source>The references to &lt;code&gt;max&lt;/code&gt; inside the body of the &lt;code&gt;for&lt;/code&gt;, which are supposed to refer to the user&amp;rsquo;s binding of &lt;code&gt;max&lt;/code&gt;, really access the binding made by &lt;code&gt;for&lt;/code&gt;.</source>
          <target state="translated">言及 &lt;code&gt;max&lt;/code&gt; の体内 &lt;code&gt;for&lt;/code&gt; ユーザーの結合のを参照することになっている、 &lt;code&gt;max&lt;/code&gt; 、本当に製のバインディングアクセス &lt;code&gt;for&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a5e79117bc2adbb317bdcd941ebc194bbe9e52a9" translate="yes" xml:space="preserve">
          <source>The reformulation demonstrates &lt;var&gt;symbol&lt;/var&gt; binding as well as &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;pred&lt;/code&gt;, &lt;code&gt;app&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;.</source>
          <target state="translated">再定式化は、 &lt;var&gt;symbol&lt;/var&gt; バインディング、 &lt;code&gt;or&lt;/code&gt; 、 &lt;code&gt;and&lt;/code&gt; 、 &lt;code&gt;pred&lt;/code&gt; 、 &lt;code&gt;app&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; を示します。</target>
        </trans-unit>
        <trans-unit id="6b316e0a4b7481395ac11f35d1a9f8c1cc3b4cde" translate="yes" xml:space="preserve">
          <source>The relative pixel coordinates of the click. For clicks in the text area of a window, the coordinate origin &lt;code&gt;(0 . 0)&lt;/code&gt; is taken to be the top left corner of the text area. See &lt;a href=&quot;window-sizes#Window-Sizes&quot;&gt;Window Sizes&lt;/a&gt;. For clicks in a mode line, header line or tab line, the coordinate origin is the top left corner of the window itself. For fringes, margins, and the vertical border, &lt;var&gt;x&lt;/var&gt; does not have meaningful data. For fringes and margins, &lt;var&gt;y&lt;/var&gt; is relative to the bottom edge of the header line. In all cases, the &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; coordinates increase rightward and downward respectively.</source>
          <target state="translated">クリックの相対的なピクセル座標。ウィンドウのテキスト領域でクリックした場合、座標の原点 &lt;code&gt;(0 . 0)&lt;/code&gt; がテキスト領域の左上隅と見なされます。&lt;a href=&quot;window-sizes#Window-Sizes&quot;&gt;ウィンドウサイズを&lt;/a&gt;参照してください。モードライン、ヘッダーライン、またはタブラインでのクリックの場合、座標の原点はウィンドウ自体の左上隅です。フリンジ、マージン、および垂直方向の境界線の場合、 &lt;var&gt;x&lt;/var&gt; には意味のあるデータがありません。フリンジとマージンの場合、 &lt;var&gt;y&lt;/var&gt; はヘッダー行の下端を基準にしています。すべての場合において、 &lt;var&gt;x&lt;/var&gt; 座標と &lt;var&gt;y&lt;/var&gt; 座標はそれぞれ右方向と下方向に増加します。</target>
        </trans-unit>
        <trans-unit id="6789ca1a5596f585de1cc2056e90783a15f620b8" translate="yes" xml:space="preserve">
          <source>The reliable and easy way to extract events from a key sequence so as to put them in &lt;code&gt;unread-command-events&lt;/code&gt; is to use &lt;code&gt;listify-key-sequence&lt;/code&gt; (see below).</source>
          <target state="translated">キーシーケンスからイベントを抽出して &lt;code&gt;listify-key-sequence&lt;/code&gt; &lt;code&gt;unread-command-events&lt;/code&gt; に入れるための信頼性が高く簡単な方法は、listify-key-sequenceを使用することです（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="6ce491e62987f2bb55f95694ce453e7531e85c7c" translate="yes" xml:space="preserve">
          <source>The remainder of this section covers six hooks that are called during redisplay provided a significant, non-scrolling change of a window has been detected. For simplicity, these hooks and the functions they call will be collectively referred to as &lt;em&gt;window change functions&lt;/em&gt;.</source>
          <target state="translated">このセクションの残りの部分では、ウィンドウの重要な非スクロール変更が検出された場合に再表示中に呼び出される6つのフックについて説明します。簡単にするために、これらのフックとそれらが呼び出す関数をまとめて&lt;em&gt;ウィンドウ変更関数&lt;/em&gt;と呼び&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="fccefbe9e1b3ac84a03c9262e101056ef8f24db4" translate="yes" xml:space="preserve">
          <source>The remaining arguments (&lt;var&gt;args&lt;/var&gt;) will be passed to the process verbatim. Emacs is not involved in processing file names that are present in &lt;var&gt;args&lt;/var&gt;. To avoid confusion, it may be best to avoid absolute file names in &lt;var&gt;args&lt;/var&gt;, but rather to specify all file names as relative to &lt;code&gt;default-directory&lt;/code&gt;. The function &lt;code&gt;file-relative-name&lt;/code&gt; is useful for constructing such relative file names. Alternatively, you can use &lt;code&gt;file-local-name&lt;/code&gt; (see &lt;a href=&quot;magic-file-names#Magic-File-Names&quot;&gt;Magic File Names&lt;/a&gt;) to obtain an absolute file name as seen from the remote host&amp;rsquo;s perspective.</source>
          <target state="translated">残りの引数（ &lt;var&gt;args&lt;/var&gt; ）は、逐語的にプロセスに渡されます。Emacsは、 &lt;var&gt;args&lt;/var&gt; に存在するファイル名の処理には関与しません。混乱を避けるために、 &lt;var&gt;args&lt;/var&gt; で絶対ファイル名を避けるのが最善かもしれませんが、 &lt;code&gt;default-directory&lt;/code&gt; を基準としてすべてのファイル名を指定するのが最善かもしれません。関数 &lt;code&gt;file-relative-name&lt;/code&gt; は、このような相対ファイル名を作成するのに役立ちます。または、 &lt;code&gt;file-local-name&lt;/code&gt; （&lt;a href=&quot;magic-file-names#Magic-File-Names&quot;&gt;Magic File Namesを&lt;/a&gt;参照）を使用して、リモートホストの観点から見た絶対ファイル名を取得することもできます。</target>
        </trans-unit>
        <trans-unit id="670a4e0596da84e4ab53487725c486bc97b4f1aa" translate="yes" xml:space="preserve">
          <source>The remaining arguments &lt;var&gt;parameters&lt;/var&gt; are keyword/argument pairs that are mainly relevant to encrypted connections:</source>
          <target state="translated">残りの引数 &lt;var&gt;parameters&lt;/var&gt; は、主に暗号化された接続に関連するキーワード/引数のペアです。</target>
        </trans-unit>
        <trans-unit id="711c3203fb757fbb6071fddfb4565e07916d99bb" translate="yes" xml:space="preserve">
          <source>The remaining arguments control the rate of echo area updates. The progress reporter will wait for at least &lt;var&gt;min-change&lt;/var&gt; more percents of the operation to be completed before printing next message; the default is one percent. &lt;var&gt;min-time&lt;/var&gt; specifies the minimum time in seconds to pass between successive prints; the default is 0.2 seconds. (On some operating systems, the progress reporter may handle fractions of seconds with varying precision).</source>
          <target state="translated">残りの引数は、エコー領域の更新速度を制御します。進行状況レポーターは、次のメッセージを出力する前に、操作の少なくとも &lt;var&gt;min-change&lt;/var&gt; が完了するまで待機します。デフォルトは1パーセントです。 &lt;var&gt;min-time&lt;/var&gt; は、連続する印刷間を通過する最小時間を秒単位で指定します。デフォルトは0.2秒です。 （一部のオペレーティングシステムでは、進行状況レポーターがさまざまな精度で数分の1秒を処理する場合があります）。</target>
        </trans-unit>
        <trans-unit id="922b5762bb85df57750f37171cdcbbec00eba4ff" translate="yes" xml:space="preserve">
          <source>The remaining arguments should be the same arguments that might be given to the corresponding I/O primitive. Depending on the primitive, one of those arguments is selected as the &lt;em&gt;target&lt;/em&gt;. For example, if &lt;var&gt;operation&lt;/var&gt; does file I/O, whichever argument specifies the file name is the target. For subprocess primitives, the process name is the target. For &lt;code&gt;open-network-stream&lt;/code&gt;, the target is the service name or port number.</source>
          <target state="translated">残りの引数は、対応するI / Oプリミティブに与えられる可能性のある引数と同じである必要があります。プリミティブに応じて、これらの引数の1つが&lt;em&gt;ターゲット&lt;/em&gt;として選択されます。たとえば、 &lt;var&gt;operation&lt;/var&gt; がファイルI / Oを実行する場合、ファイル名を指定する引数がターゲットになります。サブプロセスプリミティブの場合、プロセス名がターゲットになります。以下のため &lt;code&gt;open-network-stream&lt;/code&gt; 、ターゲットはサービス名またはポート番号です。</target>
        </trans-unit>
        <trans-unit id="3a337a486bdd471460754fa0fdb9252c1ad6a6e1" translate="yes" xml:space="preserve">
          <source>The remaining arguments, &lt;var&gt;args&lt;/var&gt;, are strings that specify command line arguments for the program.</source>
          <target state="translated">残りの引数 &lt;var&gt;args&lt;/var&gt; は、プログラムのコマンドライン引数を指定する文字列です。</target>
        </trans-unit>
        <trans-unit id="c5f9c78575e39313d5c394dcec0f4646b698aca7" translate="yes" xml:space="preserve">
          <source>The remaining arguments, &lt;var&gt;args&lt;/var&gt;, are strings that specify command line arguments for the program. Each string is passed to &lt;var&gt;program&lt;/var&gt; as a separate argument.</source>
          <target state="translated">残りの引数 &lt;var&gt;args&lt;/var&gt; は、プログラムのコマンドライン引数を指定する文字列です。各文字列は、個別の引数として &lt;var&gt;program&lt;/var&gt; 渡されます。</target>
        </trans-unit>
        <trans-unit id="e63ff1b06b54edf88e3df6de1b60c7d8bc9065cf" translate="yes" xml:space="preserve">
          <source>The remaining arguments, &lt;var&gt;props&lt;/var&gt;, specify additional image properties&amp;mdash;for example,</source>
          <target state="translated">残りの引数 &lt;var&gt;props&lt;/var&gt; は、追加の画像プロパティを指定します。たとえば、</target>
        </trans-unit>
        <trans-unit id="fbf07a85ca35fefe0fcea21832b76725d5868901" translate="yes" xml:space="preserve">
          <source>The remaining clauses use core patterns. &lt;code&gt;(pred numberp)&lt;/code&gt; matches if &lt;code&gt;form&lt;/code&gt; is a number. On match, the body evaluates it. &lt;code&gt;(pred symbolp)&lt;/code&gt; matches if &lt;code&gt;form&lt;/code&gt; is a symbol. On match, the body looks up the symbol in &lt;code&gt;env&lt;/code&gt; and returns its association. Finally, &lt;code&gt;_&lt;/code&gt; is the catch-all pattern that matches anything, so it&amp;rsquo;s suitable for reporting syntax errors.</source>
          <target state="translated">残りの句はコアパターンを使用します。 &lt;code&gt;(pred numberp)&lt;/code&gt; &lt;code&gt;form&lt;/code&gt; が数字の場合に一致します。一致すると、体はそれを評価します。 &lt;code&gt;(pred symbolp)&lt;/code&gt; &lt;code&gt;form&lt;/code&gt; がシンボルの場合に一致します。一致すると、本体は &lt;code&gt;env&lt;/code&gt; でシンボルを検索し、その関連付けを返します。最後に、 &lt;code&gt;_&lt;/code&gt; は何にでも一致するキャッチオールパターンであるため、構文エラーの報告に適しています。</target>
        </trans-unit>
        <trans-unit id="169a2fbaa470aeea2e4b7eb66378820fbb16842f" translate="yes" xml:space="preserve">
          <source>The remaining elements in &lt;var&gt;menu&lt;/var&gt; are menu items.</source>
          <target state="translated">&lt;var&gt;menu&lt;/var&gt; の残りの要素はメニュー項目です。</target>
        </trans-unit>
        <trans-unit id="4e6dd61e2904f012d61dbb3c359b6a7c4039effd" translate="yes" xml:space="preserve">
          <source>The remaining image types that Emacs can support are:</source>
          <target state="translated">Emacsがサポートできる残りの画像タイプは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="66a6e23b71c61a3f987d7762c7e2a5b7599aa9c3" translate="yes" xml:space="preserve">
          <source>The reordering algorithm uses the bidirectional properties of the characters stored as their &lt;code&gt;bidi-class&lt;/code&gt; property (see &lt;a href=&quot;character-properties#Character-Properties&quot;&gt;Character Properties&lt;/a&gt;). Lisp programs can change these properties by calling the &lt;code&gt;put-char-code-property&lt;/code&gt; function. However, doing this requires a thorough understanding of the</source>
          <target state="translated">並べ替えアルゴリズムは、 &lt;code&gt;bidi-class&lt;/code&gt; プロパティとして格納されている文字の双方向プロパティを使用します（&lt;a href=&quot;character-properties#Character-Properties&quot;&gt;文字プロパティを&lt;/a&gt;参照）。 Lispプログラムは、 &lt;code&gt;put-char-code-property&lt;/code&gt; 関数を呼び出すことによってこれらのプロパティを変更できます。ただし、これを行うには、</target>
        </trans-unit>
        <trans-unit id="0e2760fb3d24d66fd982b8a9de029f1dc2534fb7" translate="yes" xml:space="preserve">
          <source>The replacement buffer in each window is chosen via &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; (see &lt;a href=&quot;window-history#Window-History&quot;&gt;Window History&lt;/a&gt;). Any dedicated window displaying &lt;var&gt;buffer-or-name&lt;/var&gt; is deleted if possible (see &lt;a href=&quot;dedicated-windows#Dedicated-Windows&quot;&gt;Dedicated Windows&lt;/a&gt;). If such a window is the only window on its frame and there are other frames on the same terminal, the frame is deleted as well. If the dedicated window is the only window on the only frame on its terminal, the buffer is replaced anyway.</source>
          <target state="translated">各ウィンドウの置換バッファーは、 &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; を介して選択されます（&lt;a href=&quot;window-history#Window-History&quot;&gt;ウィンドウ履歴を&lt;/a&gt;参照）。表示任意の専用ウィンドウ &lt;var&gt;buffer-or-name&lt;/var&gt; 可能であれば（参照が削除された&lt;a href=&quot;dedicated-windows#Dedicated-Windows&quot;&gt;専用のWindowsを&lt;/a&gt;）。そのようなウィンドウがそのフレーム上の唯一のウィンドウであり、同じ端末上に他のフレームがある場合、フレームも削除されます。専用ウィンドウがその端末の唯一のフレーム上の唯一のウィンドウである場合、とにかくバッファは置き換えられます。</target>
        </trans-unit>
        <trans-unit id="a7bc26f1c46834e48b01bc54d1856ec2c2513fe6" translate="yes" xml:space="preserve">
          <source>The replacement is performed using &lt;code&gt;replace-buffer-contents&lt;/code&gt; (see above) which also describes the &lt;var&gt;max-secs&lt;/var&gt; and &lt;var&gt;max-costs&lt;/var&gt; arguments and the return value.</source>
          <target state="translated">交換を使用して実行される &lt;code&gt;replace-buffer-contents&lt;/code&gt; も記述している（上記参照） &lt;var&gt;max-secs&lt;/var&gt; と &lt;var&gt;max-costs&lt;/var&gt; 引数と戻り値を。</target>
        </trans-unit>
        <trans-unit id="ec1321a0692fb6ebcc794193c05c46720ae0b1d2" translate="yes" xml:space="preserve">
          <source>The representation of letters, numbers and control characters.</source>
          <target state="translated">文字、数字、制御文字の表現。</target>
        </trans-unit>
        <trans-unit id="1888fa813111440fef4cca1b17158b44c62b32a0" translate="yes" xml:space="preserve">
          <source>The rest of &lt;var&gt;args&lt;/var&gt; are strings that specify command line arguments for the subprocess.</source>
          <target state="translated">残りの &lt;var&gt;args&lt;/var&gt; は、サブプロセスのコマンドライン引数を指定する文字列です。</target>
        </trans-unit>
        <trans-unit id="e64cb5cbfa4900b03ef274ea22ff266b957788b6" translate="yes" xml:space="preserve">
          <source>The rest of the elements are the &lt;em&gt;body&lt;/em&gt; of the function: the Lisp code to do the work of the function (or, as a Lisp programmer would say, &amp;ldquo;a list of Lisp forms to evaluate&amp;rdquo;). The value returned by the function is the value returned by the last element of the body.</source>
          <target state="translated">残りの要素は関数の&lt;em&gt;本体&lt;/em&gt;です：関数の仕事をするためのLispコード（または、Lispプログラマーが言うように、「評価するLispフォームのリスト」）。関数によって返される値は、本体の最後の要素によって返される値です。</target>
        </trans-unit>
        <trans-unit id="0d7105d802c517da10dece05da93fcc235f044de" translate="yes" xml:space="preserve">
          <source>The rest of this section describes several kinds of display specifications and what they mean.</source>
          <target state="translated">ここでは、いくつかの種類の表示仕様とその意味について説明します。</target>
        </trans-unit>
        <trans-unit id="75d16b63e700fca272954b8d5c9cbea0eaebf3a4" translate="yes" xml:space="preserve">
          <source>The rest of this subsection describes different forms of core patterns, presents some examples, and concludes with important caveats on using the let-binding facility provided by some pattern forms. A core pattern can have the following forms:</source>
          <target state="translated">このサブセクションの残りの部分では、コアパターンのさまざまな形式について説明し、いくつかの例を示し、いくつかのパターン形式で提供される let-binding 機能を使用する上での重要な注意点で締めくくります。コアパターンには以下のような形式があります。</target>
        </trans-unit>
        <trans-unit id="d3d63b344006851896165eee8891a4b8d2a80cdd" translate="yes" xml:space="preserve">
          <source>The result &lt;var&gt;prevhpos&lt;/var&gt; is the horizontal position one character back from &lt;var&gt;pos&lt;/var&gt;. The result &lt;var&gt;contin&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt; if the last line was continued after (or within) the previous character.</source>
          <target state="translated">結果 &lt;var&gt;prevhpos&lt;/var&gt; は、 &lt;var&gt;pos&lt;/var&gt; から1文字後ろの水平位置です。結果 &lt;var&gt;contin&lt;/var&gt; ある &lt;code&gt;t&lt;/code&gt; 最後の行の後（または内）前の文字を続けた場合。</target>
        </trans-unit>
        <trans-unit id="daae51971c3e086b5b343e27b0d5f3425265bcec" translate="yes" xml:space="preserve">
          <source>The result is not &lt;code&gt;(&quot;&quot; &quot;two&quot; &quot;words&quot; &quot;&quot;)&lt;/code&gt;, which would rarely be useful. If you need such a result, use an explicit value for &lt;var&gt;separators&lt;/var&gt;:</source>
          <target state="translated">結果は &lt;code&gt;(&quot;&quot; &quot;two&quot; &quot;words&quot; &quot;&quot;)&lt;/code&gt; ではなく、ほとんど役に立ちません。このような結果が必要な場合は、 &lt;var&gt;separators&lt;/var&gt; 明示的な値を使用してください。</target>
        </trans-unit>
        <trans-unit id="b472acbf6233b1409a248f2d33fb8eb9ab0e8df6" translate="yes" xml:space="preserve">
          <source>The result must be accurate. The function may need to encode and decode a large part of the buffer, which is expensive and can be slow.</source>
          <target state="translated">結果が正確でなければなりません。この関数は、バッファの大部分をエンコードしてデコードする必要があるかもしれませんが、これはコストがかかり、遅くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="3fc3ca66f906ee6817d9bc3b5bb03a793a75bf8c" translate="yes" xml:space="preserve">
          <source>The result of encoding is logically a sequence of bytes, but the buffer remains multibyte if it was multibyte before, and any 8-bit bytes are converted to their multibyte representation (see &lt;a href=&quot;text-representations#Text-Representations&quot;&gt;Text Representations&lt;/a&gt;).</source>
          <target state="translated">エンコードの結果は論理的にはバイトのシーケンスですが、以前にマルチバイトであった場合、バッファはマルチバイトのままであり、8ビットバイトはすべてマルチバイト表現に変換されます（&lt;a href=&quot;text-representations#Text-Representations&quot;&gt;テキスト表現を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="c0ac4c7f55c94e4e68eece5bab668740b85fd079" translate="yes" xml:space="preserve">
          <source>The result of encoding, and the input to decoding, are not ordinary text. They logically consist of a series of byte values; that is, a series of</source>
          <target state="translated">符号化の結果や復号化の入力は、通常のテキストではありません。これらは論理的には一連のバイト値から構成されています。</target>
        </trans-unit>
        <trans-unit id="f2f9b59d04c4a67bead42edef8ea82ec9bf8264f" translate="yes" xml:space="preserve">
          <source>The result of evaluating &lt;var&gt;form&lt;/var&gt; determines whether the item is enabled (non-&lt;code&gt;nil&lt;/code&gt; means yes). If the item is not enabled, you can&amp;rsquo;t really click on it.</source>
          <target state="translated">&lt;var&gt;form&lt;/var&gt; の評価結果により、アイテムが有効かどうかが決まります（ &lt;code&gt;nil&lt;/code&gt; 以外はyesを意味します）。アイテムが有効になっていない場合、実際にクリックすることはできません。</target>
        </trans-unit>
        <trans-unit id="0ef7684b6652c1f298625050dc4e7b22d73f9616" translate="yes" xml:space="preserve">
          <source>The result of evaluating &lt;var&gt;form&lt;/var&gt; determines whether the item should actually appear in the menu (non-&lt;code&gt;nil&lt;/code&gt; means yes). If the item does not appear, then the menu is displayed as if this item were not defined at all.</source>
          <target state="translated">&lt;var&gt;form&lt;/var&gt; の評価結果により、アイテムが実際にメニューに表示されるかどうかが決まります（ &lt;code&gt;nil&lt;/code&gt; 以外はyesを意味します）。アイテムが表示されない場合、メニューはこのアイテムがまったく定義されていないかのように表示されます。</target>
        </trans-unit>
        <trans-unit id="acbd2ddb72baf0b207a6321fedc1407724073a97" translate="yes" xml:space="preserve">
          <source>The result of this form is &lt;code&gt;t&lt;/code&gt; if it works to specify &lt;var&gt;keyword&lt;/var&gt; with value &lt;var&gt;value&lt;/var&gt; in &lt;code&gt;make-network-process&lt;/code&gt;. Here are some of the &lt;var&gt;keyword&lt;/var&gt;&amp;mdash;&lt;var&gt;value&lt;/var&gt; pairs you can test in this way.</source>
          <target state="translated">&lt;code&gt;make-network-process&lt;/code&gt; で値 &lt;var&gt;value&lt;/var&gt; を持つ &lt;var&gt;keyword&lt;/var&gt; を指定するように機能する場合、この形式の結果は &lt;code&gt;t&lt;/code&gt; になります。ここにいくつかの &lt;var&gt;keyword&lt;/var&gt; &amp;mdash;この方法でテストできる &lt;var&gt;value&lt;/var&gt; ペア。</target>
        </trans-unit>
        <trans-unit id="a66be8edbff7bbe7579ce3f3a75abe46a384d47a" translate="yes" xml:space="preserve">
          <source>The result of this macro is the result returned by &lt;var&gt;body&lt;/var&gt;.</source>
          <target state="translated">このマクロの結果は、 &lt;var&gt;body&lt;/var&gt; によって返される結果です。</target>
        </trans-unit>
        <trans-unit id="27bbea73aa5cdc064da3e057ed92e4ba32abfaad" translate="yes" xml:space="preserve">
          <source>The result of using contradictory flags (for instance, both upper and lower case) is undefined.</source>
          <target state="translated">矛盾するフラグ(例えば大文字と小文字の両方)を使用した結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="46a20d33611240a9e0e5211ef91f6aa318813c3c" translate="yes" xml:space="preserve">
          <source>The resulting mouse position is constrained to the native frame of &lt;var&gt;frame&lt;/var&gt;. If &lt;var&gt;frame&lt;/var&gt; is not visible, this function does nothing. The return value is not significant.</source>
          <target state="translated">結果として得られるマウスの位置は、 &lt;var&gt;frame&lt;/var&gt; ネイティブフレームに制限されます。 &lt;var&gt;frame&lt;/var&gt; が表示されていない場合、この関数は何もしません。戻り値は重要ではありません。</target>
        </trans-unit>
        <trans-unit id="27f056d37a6f909c9875b9547c995c37a964153d" translate="yes" xml:space="preserve">
          <source>The resulting mouse position is not constrained to the native frame of &lt;var&gt;frame&lt;/var&gt;. If &lt;var&gt;frame&lt;/var&gt; is not visible, this function does nothing. The return value is not significant.</source>
          <target state="translated">結果として得られるマウスの位置は、 &lt;var&gt;frame&lt;/var&gt; ネイティブフレームに制限されません。 &lt;var&gt;frame&lt;/var&gt; が表示されていない場合、この関数は何もしません。戻り値は重要ではありません。</target>
        </trans-unit>
        <trans-unit id="97e907e5a3426231ca925e4df1a09f1c6f27899f" translate="yes" xml:space="preserve">
          <source>The resulting pixel is computed from the color intensity of the color resulting from summing up the RGB values of surrounding pixels, multiplied by the specified factors, and dividing that sum by the sum of the factors&amp;rsquo; absolute values.</source>
          <target state="translated">結果のピクセルは、周囲のピクセルのRGB値を合計し、指定された係数を掛け、その合計を係数の絶対値の合計で割った結果の色の色の強度から計算されます。</target>
        </trans-unit>
        <trans-unit id="a850c2e30c134550ab81c49f18e64cc8581aca70" translate="yes" xml:space="preserve">
          <source>The resulting regexp is preceded by &lt;var&gt;paren&lt;/var&gt; and followed by &amp;lsquo;</source>
          <target state="translated">結果の正規表現の前には &lt;var&gt;paren&lt;/var&gt; があり、その後に 'が続きます</target>
        </trans-unit>
        <trans-unit id="5cb20d9a2af4a08675a28d5ca902bb392372a3c0" translate="yes" xml:space="preserve">
          <source>The resulting regexp is surrounded by &amp;lsquo;</source>
          <target state="translated">結果の正規表現は 'で囲まれます</target>
        </trans-unit>
        <trans-unit id="75f74b291859bcb8fbacd8a981cca3c5abbd5e9c" translate="yes" xml:space="preserve">
          <source>The return value has the form &lt;code&gt;(&lt;var&gt;left&lt;/var&gt; &lt;var&gt;top&lt;/var&gt; &lt;var&gt;right&lt;/var&gt;
&lt;var&gt;bottom&lt;/var&gt;)&lt;/code&gt;. These list elements are, respectively, the X coordinate of the leftmost column occupied by the window, the Y coordinate of the topmost row, the X coordinate one column to the right of the rightmost column, and the Y coordinate one row down from the bottommost row.</source>
          <target state="translated">戻り値は、フォーム有する &lt;code&gt;(&lt;var&gt;left&lt;/var&gt; &lt;var&gt;top&lt;/var&gt; &lt;var&gt;right&lt;/var&gt; &lt;var&gt;bottom&lt;/var&gt;)&lt;/code&gt; 。これらのリスト要素は、それぞれ、ウィンドウが占める左端の列のX座標、最上行のY座標、右端の列の右側の1列のX座標、および最下部から1行下のY座標です。行。</target>
        </trans-unit>
        <trans-unit id="d012e9e07ddcadec4d4bdcd9c6d25ee2bd788334" translate="yes" xml:space="preserve">
          <source>The return value includes mode and header line, a horizontal scroll bar and a bottom divider, if any. If &lt;var&gt;window&lt;/var&gt; is an internal window, its pixel height is the pixel height of the screen areas spanned by its children.</source>
          <target state="translated">戻り値には、モードとヘッダー行、水平スクロールバー、および下部の仕切りが含まれます（存在する場合）。 &lt;var&gt;window&lt;/var&gt; が内部ウィンドウの場合、そのピクセルの高さは、その子がまたがる画面領域のピクセルの高さです。</target>
        </trans-unit>
        <trans-unit id="02435ab528a9d458375ad989e9c07e91ea1d1315" translate="yes" xml:space="preserve">
          <source>The return value includes the fringes and margins of &lt;var&gt;window&lt;/var&gt; as well as any vertical dividers or scroll bars belonging to &lt;var&gt;window&lt;/var&gt;. If &lt;var&gt;window&lt;/var&gt; is an internal window, its pixel width is the width of the screen areas spanned by its children.</source>
          <target state="translated">戻り値には、 &lt;var&gt;window&lt;/var&gt; フリンジとマージン、およびウィンドウに属する垂直方向の仕切りまたはスクロールバーが含まれ &lt;var&gt;window&lt;/var&gt; 。 &lt;var&gt;window&lt;/var&gt; が内部ウィンドウの場合、そのピクセル幅は、その子がまたがる画面領域の幅です。</target>
        </trans-unit>
        <trans-unit id="3a98f39fffcef1b3f518f4676f34cc9b1b32069e" translate="yes" xml:space="preserve">
          <source>The return value indicates the distance traveled. It is an integer that is zero or less.</source>
          <target state="translated">戻り値は、移動距離を示す。ゼロ以下の整数です。</target>
        </trans-unit>
        <trans-unit id="3fde61c2b5f5d76aef05339847ec2609e0a0f8e5" translate="yes" xml:space="preserve">
          <source>The return value is &lt;code&gt;t&lt;/code&gt; if the function actually changed some property&amp;rsquo;s value; &lt;code&gt;nil&lt;/code&gt; otherwise (if &lt;var&gt;props&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt; or if no character in the specified text had any of those properties).</source>
          <target state="translated">関数が実際にプロパティの値を変更した場合、戻り値は &lt;code&gt;t&lt;/code&gt; です。 &lt;code&gt;nil&lt;/code&gt; はそうでない（場合 &lt;var&gt;props&lt;/var&gt; で &lt;code&gt;nil&lt;/code&gt; または指定したテキストには文字がこれらのプロパティのいずれかを持っていない場合）。</target>
        </trans-unit>
        <trans-unit id="90f56f2b19d2b305eccb19f73983ee226bf52495" translate="yes" xml:space="preserve">
          <source>The return value is &lt;code&gt;t&lt;/code&gt; if the function actually changed some property&amp;rsquo;s value; &lt;code&gt;nil&lt;/code&gt; otherwise (if &lt;var&gt;props&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt; or its values agree with those in the text).</source>
          <target state="translated">関数が実際にプロパティの値を変更した場合、戻り値は &lt;code&gt;t&lt;/code&gt; です。 &lt;code&gt;nil&lt;/code&gt; はそうでない（場合 &lt;var&gt;props&lt;/var&gt; ある &lt;code&gt;nil&lt;/code&gt; またはその値は、テキスト内のものと一致します）。</target>
        </trans-unit>
        <trans-unit id="d966c0a5582546e03dd65e09ce5f5b7511e5eb89" translate="yes" xml:space="preserve">
          <source>The return value is &lt;var&gt;overlay&lt;/var&gt;.</source>
          <target state="translated">戻り値は &lt;var&gt;overlay&lt;/var&gt; です。</target>
        </trans-unit>
        <trans-unit id="c9c05af5fac5434c5acee584935759af38f45178" translate="yes" xml:space="preserve">
          <source>The return value is &lt;var&gt;value&lt;/var&gt; from the chosen alternative.</source>
          <target state="translated">戻り値はある &lt;var&gt;value&lt;/var&gt; 選ばれた選択肢から。</target>
        </trans-unit>
        <trans-unit id="414de02915422d70149abb88fd20a6bbe77b52b9" translate="yes" xml:space="preserve">
          <source>The return value is a Lisp object that serves as a cookie; you can pass this object as an argument to &lt;code&gt;face-remap-remove-relative&lt;/code&gt; if you need to remove the remapping later.</source>
          <target state="translated">戻り値は、Cookieとして機能するLispオブジェクトです。後で再マッピングを削除する必要がある場合は、このオブジェクトを引数として &lt;code&gt;face-remap-remove-relative&lt;/code&gt; に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="640083b382042a0f9ab141b72092b58d3b3db8e7" translate="yes" xml:space="preserve">
          <source>The return value is a decoded time structure.</source>
          <target state="translated">戻り値はデコードされた時間構造です。</target>
        </trans-unit>
        <trans-unit id="6948835c6ed35bc81ffd72935c26a9c6a4b01e26" translate="yes" xml:space="preserve">
          <source>The return value is a list of five elements:</source>
          <target state="translated">戻り値は5つの要素のリストです。</target>
        </trans-unit>
        <trans-unit id="90615d81da8d652dcb6154d1dc922a071b14b8e3" translate="yes" xml:space="preserve">
          <source>The return value is a list of the form &lt;code&gt;(&lt;var&gt;root&lt;/var&gt; &lt;var&gt;mini&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;root&lt;/var&gt; represents the window tree of the frame&amp;rsquo;s root window, and &lt;var&gt;mini&lt;/var&gt; is the frame&amp;rsquo;s minibuffer window.</source>
          <target state="translated">戻り値はフォーム &lt;code&gt;(&lt;var&gt;root&lt;/var&gt; &lt;var&gt;mini&lt;/var&gt;)&lt;/code&gt; のリストです。ここで、 &lt;var&gt;root&lt;/var&gt; はフレームのルートウィンドウのウィンドウツリーを表し、 &lt;var&gt;mini&lt;/var&gt; はフレームのミニバッファウィンドウです。</target>
        </trans-unit>
        <trans-unit id="52c6a1791b31a7b0eaccc6801b2780ff866415de" translate="yes" xml:space="preserve">
          <source>The return value is a triple of the width and the start and end y-coordinates of the largest rectangle that can be inscribed into the empty space (space not displaying any text) of the text area of &lt;var&gt;window&lt;/var&gt;. No x-coordinates are returned by this function&amp;mdash;any such rectangle is assumed to end at the right edge of &lt;var&gt;window&lt;/var&gt;&amp;rsquo;s text area. If no empty space can be found, the return value is &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">戻り値は、 &lt;var&gt;window&lt;/var&gt; テキスト領域の空のスペース（テキストを表示しないスペース）に内接できる最大の長方形の幅と開始および終了のy座標の3倍です。この関数ではx座標は返されません。このような長方形は、 &lt;var&gt;window&lt;/var&gt; のテキスト領域の右端で終了すると見なされます。空のスペースが見つからない場合、戻り値は &lt;code&gt;nil&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a2e42df57a0cc7d257e5e9f1e666fc7a3621ad67" translate="yes" xml:space="preserve">
          <source>The return value is always &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">戻り値は常に &lt;code&gt;nil&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4fc3028050b974b5c5985a3e65b383b27350e24c" translate="yes" xml:space="preserve">
          <source>The return value is always &lt;code&gt;nil&lt;/code&gt;; to make calls to &lt;code&gt;map-char-table&lt;/code&gt; useful, &lt;var&gt;function&lt;/var&gt; should have side effects. For example, here is how to examine the elements of the syntax table:</source>
          <target state="translated">戻り値は常に &lt;code&gt;nil&lt;/code&gt; です。 &lt;code&gt;map-char-table&lt;/code&gt; の呼び出しを便利に &lt;var&gt;function&lt;/var&gt; は、関数に副作用があるはずです。たとえば、構文テーブルの要素を調べる方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="6e1ef02d50eb6d3d11a008ae86a182534aaddd6c" translate="yes" xml:space="preserve">
          <source>The return value is like what &lt;code&gt;insert-file-contents&lt;/code&gt; returns: a list of the absolute file name and the length of the data inserted (after conversion).</source>
          <target state="translated">戻り値は、 &lt;code&gt;insert-file-contents&lt;/code&gt; が返すものと同じです。つまり、絶対ファイル名と挿入されたデータの長さ（変換後）のリストです。</target>
        </trans-unit>
        <trans-unit id="1667a16b49f259c48f935a06b46d348e1b7a9a28" translate="yes" xml:space="preserve">
          <source>The return value is never negative. It is zero when no horizontal scrolling has been done in &lt;var&gt;window&lt;/var&gt; (which is usually the case).</source>
          <target state="translated">戻り値が負になることはありません。 &lt;var&gt;window&lt;/var&gt; 水平スクロールが行われていない場合はゼロです（通常はそうです）。</target>
        </trans-unit>
        <trans-unit id="2493392e7fec786dd0b57b9149f6a4de24a60362" translate="yes" xml:space="preserve">
          <source>The return value is the column number actually moved to.</source>
          <target state="translated">戻り値は、実際に移動したカラム番号です。</target>
        </trans-unit>
        <trans-unit id="728cf9e0720907dab6445cd97c1a912356f7f43f" translate="yes" xml:space="preserve">
          <source>The return value is the distance traveled, which is a nonnegative integer.</source>
          <target state="translated">戻り値は移動距離であり、非負の整数である。</target>
        </trans-unit>
        <trans-unit id="e8f11031b2e43a095f2b7b7de82a02dfcbe6b156" translate="yes" xml:space="preserve">
          <source>The return value is the matching value from &lt;var&gt;choices&lt;/var&gt;.</source>
          <target state="translated">戻り値は、 &lt;var&gt;choices&lt;/var&gt; からの一致する値です。</target>
        </trans-unit>
        <trans-unit id="6d181ed19740d80d79cf1130d7058743bf3e3b57" translate="yes" xml:space="preserve">
          <source>The return value is the new window, &lt;code&gt;nil&lt;/code&gt; when creating that window failed.</source>
          <target state="translated">戻り値は新しいウィンドウです。ウィンドウの作成に失敗した場合は &lt;code&gt;nil&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f65065166d5e0c6aa1c92410eeb9adf0999014fa" translate="yes" xml:space="preserve">
          <source>The return value is the number of screen lines over which point was moved. The value may be less in absolute value than &lt;var&gt;count&lt;/var&gt; if the beginning or end of the buffer was reached.</source>
          <target state="translated">戻り値は、ポイントが移動された画面行の数です。バッファの開始または終了に達した場合、値は &lt;var&gt;count&lt;/var&gt; よりも絶対値​​が小さい可能性があります。</target>
        </trans-unit>
        <trans-unit id="9d83169f48bfa8d22f5e0a5baa5652dbdd9ad387" translate="yes" xml:space="preserve">
          <source>The return value is the result of this rounding.</source>
          <target state="translated">戻り値は、この丸めの結果です。</target>
        </trans-unit>
        <trans-unit id="a97826aadd65e5acdd8dae2f1cc5f5396c5e9f4d" translate="yes" xml:space="preserve">
          <source>The return value is the same as if you call the low-level parsing function &lt;code&gt;parse-partial-sexp&lt;/code&gt; to parse from the beginning of the visible portion of the buffer to &lt;var&gt;pos&lt;/var&gt; (see &lt;a href=&quot;low_002dlevel-parsing#Low_002dLevel-Parsing&quot;&gt;Low-Level Parsing&lt;/a&gt;). However, &lt;code&gt;syntax-ppss&lt;/code&gt; uses caches to speed up the computation. Due to this optimization, the second value (previous complete subexpression) and sixth value (minimum parenthesis depth) in the returned parser state are not meaningful.</source>
          <target state="translated">戻り値は、低レベルの解析関数 &lt;code&gt;parse-partial-sexp&lt;/code&gt; を呼び出して、バッファーの表示部分の先頭から &lt;var&gt;pos&lt;/var&gt; まで解析する場合と同じです（&lt;a href=&quot;low_002dlevel-parsing#Low_002dLevel-Parsing&quot;&gt;低レベルの解析を&lt;/a&gt;参照）。ただし、 &lt;code&gt;syntax-ppss&lt;/code&gt; はキャッシュを使用して計算を高速化します。この最適化により、返されるパーサー状態の2番目の値（前の完全な部分式）と6番目の値（最小括弧の深さ）は意味がありません。</target>
        </trans-unit>
        <trans-unit id="e18c940c557733fa2d17296522cd2ee2f382b25f" translate="yes" xml:space="preserve">
          <source>The return value is the total amount of leftward horizontal scrolling in effect after the change&amp;mdash;just like the value returned by &lt;code&gt;window-hscroll&lt;/code&gt; (below).</source>
          <target state="translated">戻り値は、変更後に有効な左方向の水平スクロールの合計量です。これは、 &lt;code&gt;window-hscroll&lt;/code&gt; （下記）によって返される値と同じです。</target>
        </trans-unit>
        <trans-unit id="d57cd36326fa59864f8c712bddff5dc5bb7f668f" translate="yes" xml:space="preserve">
          <source>The return value is the value of the last form in &lt;var&gt;body&lt;/var&gt;. The current buffer is restored even in case of an abnormal exit via &lt;code&gt;throw&lt;/code&gt; or error (see &lt;a href=&quot;nonlocal-exits#Nonlocal-Exits&quot;&gt;Nonlocal Exits&lt;/a&gt;).</source>
          <target state="translated">戻り値は、 &lt;var&gt;body&lt;/var&gt; の最後のフォームの値です。 &lt;code&gt;throw&lt;/code&gt; またはエラーによる異常な終了の場合でも、現在のバッファーが復元されます（&lt;a href=&quot;nonlocal-exits#Nonlocal-Exits&quot;&gt;非ローカル&lt;/a&gt;終了を参照）。</target>
        </trans-unit>
        <trans-unit id="eb0d4689de602d882bfebd89386a5243b7f33720" translate="yes" xml:space="preserve">
          <source>The return value is the value of the last form in &lt;var&gt;body&lt;/var&gt;. You can return the contents of the temporary buffer by using &lt;code&gt;(buffer-string)&lt;/code&gt; as the last form.</source>
          <target state="translated">戻り値は、 &lt;var&gt;body&lt;/var&gt; の最後のフォームの値です。最後の形式として &lt;code&gt;(buffer-string)&lt;/code&gt; を使用すると、一時バッファーの内容を返すことができます。</target>
        </trans-unit>
        <trans-unit id="98b96176f1db00d3485afd4a66e4aa0f4d04fd5e" translate="yes" xml:space="preserve">
          <source>The return value makes sure that all components of &lt;var&gt;window&lt;/var&gt; remain fully visible if &lt;var&gt;window&lt;/var&gt;&amp;rsquo;s size were actually set to it. With &lt;var&gt;horizontal&lt;/var&gt;&lt;code&gt;nil&lt;/code&gt; it includes the mode and header line, the horizontal scroll bar and the bottom divider, if present. With &lt;var&gt;horizontal&lt;/var&gt; non-&lt;code&gt;nil&lt;/code&gt; it includes the margins and fringes, the vertical scroll bar and the right divider, if present.</source>
          <target state="translated">戻り値により、 &lt;var&gt;window&lt;/var&gt; のサイズが実際に設定されている場合でも、 &lt;var&gt;window&lt;/var&gt; すべてのコンポーネントが完全に表示されたままになります。 &lt;var&gt;horizontal&lt;/var&gt; &lt;code&gt;nil&lt;/code&gt; 存在する場合には、モード、ヘッダ行、水平スクロールバーと下部分割器を含みます。 &lt;var&gt;horizontal&lt;/var&gt; 非 &lt;code&gt;nil&lt;/code&gt; 存在する場合には、マージン及び縞、垂直スクロールバーと右分割器を含みます。</target>
        </trans-unit>
        <trans-unit id="56acd2a554fb8715a71ba301e194647feef1c650" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;call-process-region&lt;/code&gt; is just like that of &lt;code&gt;call-process&lt;/code&gt;: &lt;code&gt;nil&lt;/code&gt; if you told it to return without waiting; otherwise, a number or string which indicates how the subprocess terminated.</source>
          <target state="translated">戻り値は &lt;code&gt;call-process-region&lt;/code&gt; ただのそれに似ている &lt;code&gt;call-process&lt;/code&gt; ： &lt;code&gt;nil&lt;/code&gt; のあなたは待たずに戻るには、それを告げた場合。それ以外の場合は、サブプロセスがどのように終了したかを示す数値または文字列。</target>
        </trans-unit>
        <trans-unit id="5069facca425b351b86dde2c2ae0c0771e388177" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;completion-table-dynamic&lt;/code&gt; is a function that can be used as the 2nd argument to &lt;code&gt;try-completion&lt;/code&gt; and &lt;code&gt;all-completions&lt;/code&gt;. Note that this function will always return empty metadata and trivial boundaries (see &lt;a href=&quot;#Programmed-Completion&quot;&gt;Programmed Completion&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;completion-table-dynamic&lt;/code&gt; の戻り値は、 &lt;code&gt;try-completion&lt;/code&gt; および &lt;code&gt;all-completions&lt;/code&gt; の2番目の引数として使用できる関数です。この関数は常に空のメタデータと些細な境界を返すことに注意してください（&lt;a href=&quot;#Programmed-Completion&quot;&gt;プログラムされた完了を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="eb1115fc8b41440862e5616560ee61c6930b3d4e" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;defun&lt;/code&gt; is undefined.</source>
          <target state="translated">&lt;code&gt;defun&lt;/code&gt; の戻り値は未定義です。</target>
        </trans-unit>
        <trans-unit id="a22f1787f8edaffd1df1c076115e598858217063" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;indent-relative&lt;/code&gt; is unpredictable.</source>
          <target state="translated">&lt;code&gt;indent-relative&lt;/code&gt; の戻り値は予測できません。</target>
        </trans-unit>
        <trans-unit id="40830d574522cf348ebff2db025053eb30711de0" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;map-y-or-n-p&lt;/code&gt; is the number of objects acted on.</source>
          <target state="translated">&lt;code&gt;map-y-or-n-p&lt;/code&gt; の戻り値は、操作されたオブジェクトの数です。</target>
        </trans-unit>
        <trans-unit id="bcb50cbd862df1ce6221c36f84f21509e97f8fb8" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;momentary-string-display&lt;/code&gt; is not meaningful.</source>
          <target state="translated">&lt;code&gt;momentary-string-display&lt;/code&gt; の戻り値は意味がありません。</target>
        </trans-unit>
        <trans-unit id="ee4347aba22a42b7519b85d2086502c660164bde" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;translate-region&lt;/code&gt; is the number of characters that were actually changed by the translation. This does not count characters that were mapped into themselves in the translation table.</source>
          <target state="translated">&lt;code&gt;translate-region&lt;/code&gt; の戻り値は、変換によって実際に変更された文字数です。これは、変換テーブルで自分自身にマップされた文字をカウントしません。</target>
        </trans-unit>
        <trans-unit id="ccc82eb191bcbf19332876523e72f6c383beea99" translate="yes" xml:space="preserve">
          <source>The return value of this function is &lt;code&gt;t&lt;/code&gt; if the text would be completely hidden on display, or a non-&lt;code&gt;nil&lt;/code&gt;, non-&lt;code&gt;t&lt;/code&gt; value if the text would be replaced by an ellipsis.</source>
          <target state="translated">この関数の戻り値は、テキストがディスプレイ上で完全に非表示になる場合は &lt;code&gt;t&lt;/code&gt; であり、テキストが省略記号に置き換えられる場合は非 &lt;code&gt;nil&lt;/code&gt; 、非 &lt;code&gt;t&lt;/code&gt; 値です。</target>
        </trans-unit>
        <trans-unit id="43b0ec1a11637964920ecb2540843fb9ed801524" translate="yes" xml:space="preserve">
          <source>The return value of this function. If omitted or &lt;code&gt;nil&lt;/code&gt;, return a process object. Otherwise, a cons of the form &lt;code&gt;(&lt;var&gt;process-object&lt;/var&gt;
. &lt;var&gt;plist&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;plist&lt;/var&gt; has keywords:</source>
          <target state="translated">この関数の戻り値。省略または &lt;code&gt;nil&lt;/code&gt; の場合、プロセスオブジェクトを返します。それ以外の場合は、形式 &lt;code&gt;(&lt;var&gt;process-object&lt;/var&gt; . &lt;var&gt;plist&lt;/var&gt;)&lt;/code&gt; 短所 &lt;var&gt;plist&lt;/var&gt; は次のキーワードがあります 。</target>
        </trans-unit>
        <trans-unit id="6b902298331d5acafbc78a6a866439d8f418148b" translate="yes" xml:space="preserve">
          <source>The returned &lt;em&gt;prec2&lt;/em&gt; table holds constraints between pairs of tokens, and for any given pair only one constraint can be present: T1 &amp;lt; T2, T1 = T2, or T1 &amp;gt; T2.</source>
          <target state="translated">返される&lt;em&gt;prec2&lt;/em&gt;テーブルは、トークンのペア間の制約を保持し、任意のペアに対して、T1 &amp;lt;T2、T1 = T2、またはT1&amp;gt; T2の1つの制約のみが存在できます。</target>
        </trans-unit>
        <trans-unit id="dbc5dc6672398dd058c6b4f7b7fadc842548ff7b" translate="yes" xml:space="preserve">
          <source>The returned event may come directly from the user, or from a keyboard macro. It is not decoded by the keyboard&amp;rsquo;s input coding system (see &lt;a href=&quot;terminal-i_002fo-encoding#Terminal-I_002fO-Encoding&quot;&gt;Terminal I/O Encoding&lt;/a&gt;).</source>
          <target state="translated">返されるイベントは、ユーザーから直接送信される場合と、キーボードマクロから送信される場合があります。キーボードの入力コーディングシステムではデコードされません（&lt;a href=&quot;terminal-i_002fo-encoding#Terminal-I_002fO-Encoding&quot;&gt;ターミナルI / Oエンコーディングを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="4cdf1e97bec67e330632316ef5395fcf7caf2e12" translate="yes" xml:space="preserve">
          <source>The returned regexp is ordered in such a way that it will always match the longest string possible.</source>
          <target state="translated">返される正規表現は、常に可能な限り長い文字列にマッチするように順序付けされます。</target>
        </trans-unit>
        <trans-unit id="efdbd6df6dfdf2a517533221caa6311ed4d1e39a" translate="yes" xml:space="preserve">
          <source>The returned string may be &lt;var&gt;string&lt;/var&gt; itself if it does not contain any special characters.</source>
          <target state="translated">返される &lt;var&gt;string&lt;/var&gt; は、特殊文字が含まれていない場合は文字列自体である可能性があります。</target>
        </trans-unit>
        <trans-unit id="fd9bc80d26777c7e0a2a7afa6c8e55fbe066df53" translate="yes" xml:space="preserve">
          <source>The returned value is a descriptor for the added watch. Its type depends on the underlying library, it cannot be assumed to be an integer as in the example below. It should be used for comparison by &lt;code&gt;equal&lt;/code&gt; only.</source>
          <target state="translated">戻り値は、追加された時計の記述子です。そのタイプは基礎となるライブラリに依存し、以下の例のように整数であると想定することはできません。 &lt;code&gt;equal&lt;/code&gt; だけで比較するために使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="5526f73a053a966e99ef6b773d23afe60ad9d26c" translate="yes" xml:space="preserve">
          <source>The returned value is a string.</source>
          <target state="translated">返される値は文字列です。</target>
        </trans-unit>
        <trans-unit id="265dcc02f70278df1fa86f8ca9c808c95d187ef5" translate="yes" xml:space="preserve">
          <source>The returned value is unpredictable.</source>
          <target state="translated">返された値は予測できません。</target>
        </trans-unit>
        <trans-unit id="d67d7a62afb4deb22a1a4750f3d9471f23d28534" translate="yes" xml:space="preserve">
          <source>The right way to use this variable is to bind it with &lt;code&gt;let&lt;/code&gt; for a specific I/O operation. Its global value is normally &lt;code&gt;nil&lt;/code&gt;, and you should not globally set it to any other value. Here is an example of the right way to use the variable:</source>
          <target state="translated">この変数を使用する正しい方法は、特定のI / O操作のために &lt;code&gt;let&lt;/code&gt; とバインドすることです。そのグローバル値は通常 &lt;code&gt;nil&lt;/code&gt; であり、他の値にグローバルに設定しないでください。変数を使用する正しい方法の例を次に示します。</target>
        </trans-unit>
        <trans-unit id="39952ca9e7a27cc76fd0f660398052f252830c23" translate="yes" xml:space="preserve">
          <source>The root window of this frame is an internal window, &lt;var&gt;W1&lt;/var&gt;. Its child windows form a horizontal combination, consisting of the live window &lt;var&gt;W2&lt;/var&gt; and the internal window &lt;var&gt;W3&lt;/var&gt;. The child windows of &lt;var&gt;W3&lt;/var&gt; form a vertical combination, consisting of the live windows &lt;var&gt;W4&lt;/var&gt; and &lt;var&gt;W5&lt;/var&gt;. Hence, the live windows in this window tree are &lt;var&gt;W2&lt;/var&gt;, &lt;var&gt;W4&lt;/var&gt;, and &lt;var&gt;W5&lt;/var&gt;.</source>
          <target state="translated">このフレームのルートウィンドウは、内部ウィンドウ &lt;var&gt;W1&lt;/var&gt; です。その子ウィンドウは、ライブウィンドウ &lt;var&gt;W2&lt;/var&gt; と内部ウィンドウ &lt;var&gt;W3&lt;/var&gt; で構成される水平方向の組み合わせを形成します。 &lt;var&gt;W3&lt;/var&gt; の子ウィンドウは、ライブウィンドウ &lt;var&gt;W4&lt;/var&gt; と &lt;var&gt;W5&lt;/var&gt; で構成される垂直方向の組み合わせを形成します。したがって、このウィンドウツリーのライブウィンドウは &lt;var&gt;W2&lt;/var&gt; 、 &lt;var&gt;W4&lt;/var&gt; 、および &lt;var&gt;W5&lt;/var&gt; です。</target>
        </trans-unit>
        <trans-unit id="814d3881be5a72669b9ab4a2a2237b0156c64c15" translate="yes" xml:space="preserve">
          <source>The rule for finding the binding of a key sequence assumes that the intermediate bindings (found for the events before the last) are all keymaps; if this is not so, the sequence of events does not form a unit&amp;mdash;it is not really one key sequence. In other words, removing one or more events from the end of any valid key sequence must always yield a prefix key. For example,</source>
          <target state="translated">キーシーケンスのバインディングを見つけるためのルールは、中間バインディング（最後の前のイベントで見つかった）がすべてキーマップであることを前提としています。そうでない場合、イベントのシーケンスはユニットを形成しません。実際には1つのキーシーケンスではありません。つまり、有効なキーシーケンスの最後から1つ以上のイベントを削除すると、常にプレフィックスキーが生成される必要があります。例えば、</target>
        </trans-unit>
        <trans-unit id="2122fb4e21ddd11686b2348d982b3ec0119e1727" translate="yes" xml:space="preserve">
          <source>The rule for indentation after &lt;code&gt;&quot;:=&quot;&lt;/code&gt; exists because otherwise SMIE would treat &lt;code&gt;&quot;:=&quot;&lt;/code&gt; as an infix operator and would align the right argument with the left one.</source>
          <target state="translated">&lt;code&gt;&quot;:=&quot;&lt;/code&gt; の後のインデントの規則が存在します。そうしないと、SMIEは &lt;code&gt;&quot;:=&quot;&lt;/code&gt; を中置演算子として扱い、右の引数を左の引数に揃えるからです。</target>
        </trans-unit>
        <trans-unit id="37f434c4f0270c5122c827e81b52b88938539dd1" translate="yes" xml:space="preserve">
          <source>The rule for indentation before &lt;code&gt;&quot;begin&quot;&lt;/code&gt; is an example of the use of virtual indentation: This rule is used only when &lt;code&gt;&quot;begin&quot;&lt;/code&gt; is hanging, which can happen only when &lt;code&gt;&quot;begin&quot;&lt;/code&gt; is not at the beginning of a line. So this is not used when indenting &lt;code&gt;&quot;begin&quot;&lt;/code&gt; itself but only when indenting something relative to this &lt;code&gt;&quot;begin&quot;&lt;/code&gt;. Concretely, this rule changes the indentation from:</source>
          <target state="translated">前インデントのルール &lt;code&gt;&quot;begin&quot;&lt;/code&gt; このルールは、ときにのみ使用されます。仮想インデントの使用の一例である &lt;code&gt;&quot;begin&quot;&lt;/code&gt; する場合にのみ起こることができ、ぶら下がっている &lt;code&gt;&quot;begin&quot;&lt;/code&gt; 行の先頭ではありません。したがって、これは &lt;code&gt;&quot;begin&quot;&lt;/code&gt; 自体をインデントする場合には使用されませんが、この &lt;code&gt;&quot;begin&quot;&lt;/code&gt; 関連する何かをインデントする場合にのみ使用されます。具体的には、このルールはインデントを次のように変更します。</target>
        </trans-unit>
        <trans-unit id="d2ae301bb08cbc756929fb8516392dcfbc907e46" translate="yes" xml:space="preserve">
          <source>The rule for indentation before &lt;code&gt;&quot;if&quot;&lt;/code&gt; is similar to the one for &lt;code&gt;&quot;begin&quot;&lt;/code&gt;, but where the purpose is to treat &lt;code&gt;&quot;else if&quot;&lt;/code&gt; as a single unit, so as to align a sequence of tests rather than indent each test further to the right. This function does this only in the case where the &lt;code&gt;&quot;if&quot;&lt;/code&gt; is not placed on a separate line, hence the &lt;code&gt;smie-rule-bolp&lt;/code&gt; test.</source>
          <target state="translated">&lt;code&gt;&quot;if&quot;&lt;/code&gt; 前のインデントのルールは &lt;code&gt;&quot;begin&quot;&lt;/code&gt; のルールと似ていますが、目的が &lt;code&gt;&quot;else if&quot;&lt;/code&gt; を単一のユニットとして扱い、各テストをさらにインデントするのではなく、一連のテストを整列させることです。正しい。この関数は、 &lt;code&gt;&quot;if&quot;&lt;/code&gt; が別の行に配置されていない場合にのみこれを実行します。したがって、 &lt;code&gt;smie-rule-bolp&lt;/code&gt; テストです。</target>
        </trans-unit>
        <trans-unit id="3e51195c9e4bef9ac5fed369ac13d21d4ecbb83d" translate="yes" xml:space="preserve">
          <source>The rule for the token &lt;code&gt;&quot;,&quot;&lt;/code&gt; make SMIE try to be more clever when the comma separator is placed at the beginning of lines. It tries to outdent the separator so as to align the code after the comma; for example:</source>
          <target state="translated">トークン &lt;code&gt;&quot;,&quot;&lt;/code&gt; のルールにより、コンマ区切り文字が行の先頭に配置されている場合、SMIEはより賢くなります。コードをコンマの後に揃えるように、区切り文字をインデントしようとします。例えば：</target>
        </trans-unit>
        <trans-unit id="2ea9d036c2f0944a227079154b59cbdc7f4c6f40" translate="yes" xml:space="preserve">
          <source>The rx Structured Regexp Notation</source>
          <target state="translated">rx 構造化レジェックス記法</target>
        </trans-unit>
        <trans-unit id="b8ef342720c667ded9bb4a10754ff3f59b3c59dd" translate="yes" xml:space="preserve">
          <source>The safe value definitions specified with &lt;code&gt;autoload&lt;/code&gt; are copied into the package&amp;rsquo;s autoloads file (</source>
          <target state="translated">The safe value definitions specified with &lt;code&gt;autoload&lt;/code&gt; are copied into the package&amp;rsquo;s autoloads file (</target>
        </trans-unit>
        <trans-unit id="3d3cd8e2cc092de1d198d6e2528520fe0e19f022" translate="yes" xml:space="preserve">
          <source>The same alist shown above could be regarded as having the associated value in the &lt;small&gt;CDR&lt;/small&gt; of the element; the value associated with &lt;code&gt;rose&lt;/code&gt; would be the list &lt;code&gt;(red)&lt;/code&gt;.</source>
          <target state="translated">The same alist shown above could be regarded as having the associated value in the &lt;small&gt;CDR&lt;/small&gt; of the element; the value associated with &lt;code&gt;rose&lt;/code&gt; would be the list &lt;code&gt;(red)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8b598a52d532ebb9508666d7703290c6b51b2a77" translate="yes" xml:space="preserve">
          <source>The same comparison is made for the characters before the old and new locations. The result may be to execute two &lt;code&gt;point-left&lt;/code&gt; functions (which may be the same function) and/or two &lt;code&gt;point-entered&lt;/code&gt; functions (which may be the same function). In any case, all the &lt;code&gt;point-left&lt;/code&gt; functions are called first, followed by all the &lt;code&gt;point-entered&lt;/code&gt; functions.</source>
          <target state="translated">The same comparison is made for the characters before the old and new locations. The result may be to execute two &lt;code&gt;point-left&lt;/code&gt; functions (which may be the same function) and/or two &lt;code&gt;point-entered&lt;/code&gt; functions (which may be the same function). In any case, all the &lt;code&gt;point-left&lt;/code&gt; functions are called first, followed by all the &lt;code&gt;point-entered&lt;/code&gt; functions.</target>
        </trans-unit>
        <trans-unit id="76be1f3a5b9d85ac92db6757c8aa658e4c83550f" translate="yes" xml:space="preserve">
          <source>The same list represented in the second box notation looks like this:</source>
          <target state="translated">2つ目のボックス表記で表される同じリストは、次のようになります。</target>
        </trans-unit>
        <trans-unit id="de2afa602b0c6c3641bec0bd9db4c0990c1cd810" translate="yes" xml:space="preserve">
          <source>The same magic comment can copy any kind of form into</source>
          <target state="translated">同じ魔法のコメントでも、どんなフォームでも</target>
        </trans-unit>
        <trans-unit id="4a6fb3f7c0f51bfade6342cfbde9264dd003c537" translate="yes" xml:space="preserve">
          <source>The same sort of thing goes for macros and &lt;code&gt;defsubst&lt;/code&gt; functions defined locally and only for use within the file. They are needed for compiling the file, but in most cases they are not needed for execution of the compiled file. For example,</source>
          <target state="translated">The same sort of thing goes for macros and &lt;code&gt;defsubst&lt;/code&gt; functions defined locally and only for use within the file. They are needed for compiling the file, but in most cases they are not needed for execution of the compiled file. For example,</target>
        </trans-unit>
        <trans-unit id="9eafcd90784684c4b6941c5a7e212f4389f29375" translate="yes" xml:space="preserve">
          <source>The scope of the &lt;code&gt;rx-let&lt;/code&gt; bindings is lexical, which means that they are not visible outside &lt;var&gt;body&lt;/var&gt; itself, even in functions called from &lt;var&gt;body&lt;/var&gt;.</source>
          <target state="translated">The scope of the &lt;code&gt;rx-let&lt;/code&gt; bindings is lexical, which means that they are not visible outside &lt;var&gt;body&lt;/var&gt; itself, even in functions called from &lt;var&gt;body&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="b2fa435053db7e98e5d129031c4eef40310ac931" translate="yes" xml:space="preserve">
          <source>The screen position of the left edge of the frame&amp;rsquo;s icon, in pixels, counting from the left edge of the screen. This takes effect when the frame is iconified, if the window manager supports this feature. If you specify a value for this parameter, then you must also specify a value for &lt;code&gt;icon-top&lt;/code&gt; and vice versa.</source>
          <target state="translated">The screen position of the left edge of the frame&amp;rsquo;s icon, in pixels, counting from the left edge of the screen. This takes effect when the frame is iconified, if the window manager supports this feature. If you specify a value for this parameter, then you must also specify a value for &lt;code&gt;icon-top&lt;/code&gt; and vice versa.</target>
        </trans-unit>
        <trans-unit id="e50e923623c82eb23aa190894066a65503358e35" translate="yes" xml:space="preserve">
          <source>The screen position of the top (or bottom) edge, in pixels, with respect to the top (or bottom) edge of the display or parent frame. It works just like &lt;code&gt;left&lt;/code&gt;, except vertically instead of horizontally.</source>
          <target state="translated">The screen position of the top (or bottom) edge, in pixels, with respect to the top (or bottom) edge of the display or parent frame. It works just like &lt;code&gt;left&lt;/code&gt; , except vertically instead of horizontally.</target>
        </trans-unit>
        <trans-unit id="0cda3076dfbc17092f6e7b4b160ef022e7169a19" translate="yes" xml:space="preserve">
          <source>The screen position of the top edge of the frame&amp;rsquo;s icon, in pixels, counting from the top edge of the screen. This takes effect when the frame is iconified, if the window manager supports this feature.</source>
          <target state="translated">The screen position of the top edge of the frame&amp;rsquo;s icon, in pixels, counting from the top edge of the screen. This takes effect when the frame is iconified, if the window manager supports this feature.</target>
        </trans-unit>
        <trans-unit id="e751536ab732a9f489e9afb199afec619dbdde42" translate="yes" xml:space="preserve">
          <source>The script that the font must support (a symbol).</source>
          <target state="translated">フォントが対応していなければならないスクリプト(記号)。</target>
        </trans-unit>
        <trans-unit id="5ca4bb9976c740ecc0981b8e9b17319d5ac9d81d" translate="yes" xml:space="preserve">
          <source>The search for an applicable handler checks all the established handlers starting with the most recently established one. Thus, if two nested &lt;code&gt;condition-case&lt;/code&gt; forms offer to handle the same error, the inner of the two gets to handle it.</source>
          <target state="translated">The search for an applicable handler checks all the established handlers starting with the most recently established one. Thus, if two nested &lt;code&gt;condition-case&lt;/code&gt; forms offer to handle the same error, the inner of the two gets to handle it.</target>
        </trans-unit>
        <trans-unit id="473e360900bfeca8b04b8a805f75bfd348f74028" translate="yes" xml:space="preserve">
          <source>The second argument &lt;var&gt;infile&lt;/var&gt; may invoke a file name handler. The file name handler could be different from the handler chosen for the &lt;code&gt;process-file&lt;/code&gt; function itself. (For example, &lt;code&gt;default-directory&lt;/code&gt; could be on one remote host, and &lt;var&gt;infile&lt;/var&gt; on a different remote host. Or &lt;code&gt;default-directory&lt;/code&gt; could be non-special, whereas &lt;var&gt;infile&lt;/var&gt; is on a remote host.)</source>
          <target state="translated">The second argument &lt;var&gt;infile&lt;/var&gt; may invoke a file name handler. The file name handler could be different from the handler chosen for the &lt;code&gt;process-file&lt;/code&gt; function itself. (For example, &lt;code&gt;default-directory&lt;/code&gt; could be on one remote host, and &lt;var&gt;infile&lt;/var&gt; on a different remote host. Or &lt;code&gt;default-directory&lt;/code&gt; could be non-special, whereas &lt;var&gt;infile&lt;/var&gt; is on a remote host.)</target>
        </trans-unit>
        <trans-unit id="79312a7cce37d37bed367239a38284f2028a8f95" translate="yes" xml:space="preserve">
          <source>The second argument &lt;var&gt;size&lt;/var&gt; is the size of text, in characters, following point. The function examines text only within &lt;var&gt;size&lt;/var&gt; characters after point. Normally, the buffer should be positioned at the beginning when this function is called, because one of the places for the &lt;code&gt;coding:&lt;/code&gt; tag is the first one or two lines of the file; in that case, &lt;var&gt;size&lt;/var&gt; should be the size of the buffer.</source>
          <target state="translated">The second argument &lt;var&gt;size&lt;/var&gt; is the size of text, in characters, following point. The function examines text only within &lt;var&gt;size&lt;/var&gt; characters after point. Normally, the buffer should be positioned at the beginning when this function is called, because one of the places for the &lt;code&gt;coding:&lt;/code&gt; tag is the first one or two lines of the file; in that case, &lt;var&gt;size&lt;/var&gt; should be the size of the buffer.</target>
        </trans-unit>
        <trans-unit id="b1571642b672d840c71b1f3b7f58f82da1c8dc26" translate="yes" xml:space="preserve">
          <source>The second argument of &lt;code&gt;condition-case&lt;/code&gt; is called the &lt;em&gt;protected form&lt;/em&gt;. (In the example above, the protected form is a call to &lt;code&gt;delete-file&lt;/code&gt;.) The error handlers go into effect when this form begins execution and are deactivated when this form returns. They remain in effect for all the intervening time. In particular, they are in effect during the execution of functions called by this form, in their subroutines, and so on. This is a good thing, since, strictly speaking, errors can be signaled only by Lisp primitives (including &lt;code&gt;signal&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;) called by the protected form, not by the protected form itself.</source>
          <target state="translated">The second argument of &lt;code&gt;condition-case&lt;/code&gt; is called the &lt;em&gt;protected form&lt;/em&gt;. (In the example above, the protected form is a call to &lt;code&gt;delete-file&lt;/code&gt; .) The error handlers go into effect when this form begins execution and are deactivated when this form returns. They remain in effect for all the intervening time. In particular, they are in effect during the execution of functions called by this form, in their subroutines, and so on. This is a good thing, since, strictly speaking, errors can be signaled only by Lisp primitives (including &lt;code&gt;signal&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; ) called by the protected form, not by the protected form itself.</target>
        </trans-unit>
        <trans-unit id="335d04a9fb11a0984d4c4b395642d49eb8062099" translate="yes" xml:space="preserve">
          <source>The second argument, &lt;var&gt;minibuf&lt;/var&gt;, says which frames to consider:</source>
          <target state="translated">The second argument, &lt;var&gt;minibuf&lt;/var&gt; , says which frames to consider:</target>
        </trans-unit>
        <trans-unit id="043e175330e7a9266b5fd9e72aad0ac9c4f497a2" translate="yes" xml:space="preserve">
          <source>The second cons cell, which previously held the element &lt;code&gt;b&lt;/code&gt;, still exists and its &lt;small&gt;CAR&lt;/small&gt; is still &lt;code&gt;b&lt;/code&gt;, but it no longer forms part of this list.</source>
          <target state="translated">The second cons cell, which previously held the element &lt;code&gt;b&lt;/code&gt; , still exists and its &lt;small&gt;CAR&lt;/small&gt; is still &lt;code&gt;b&lt;/code&gt; , but it no longer forms part of this list.</target>
        </trans-unit>
        <trans-unit id="cc4971cc83ebc92e997f73e4a1271f23051fec45" translate="yes" xml:space="preserve">
          <source>The second crucial difference between macros and functions is that the value returned by the macro body is an alternate Lisp expression, also known as the &lt;em&gt;expansion&lt;/em&gt; of the macro. The Lisp interpreter proceeds to evaluate the expansion as soon as it comes back from the macro.</source>
          <target state="translated">The second crucial difference between macros and functions is that the value returned by the macro body is an alternate Lisp expression, also known as the &lt;em&gt;expansion&lt;/em&gt; of the macro. The Lisp interpreter proceeds to evaluate the expansion as soon as it comes back from the macro.</target>
        </trans-unit>
        <trans-unit id="f1a6950eaae19621908380f623f25ce6e57c63a4" translate="yes" xml:space="preserve">
          <source>The second element is a list of symbols&amp;mdash;the argument variable names. This is called the &lt;em&gt;lambda list&lt;/em&gt;. When a Lisp function is called, the argument values are matched up against the variables in the lambda list, which are given local bindings with the values provided. See &lt;a href=&quot;local-variables#Local-Variables&quot;&gt;Local Variables&lt;/a&gt;.</source>
          <target state="translated">The second element is a list of symbols&amp;mdash;the argument variable names. This is called the &lt;em&gt;lambda list&lt;/em&gt;. When a Lisp function is called, the argument values are matched up against the variables in the lambda list, which are given local bindings with the values provided. See &lt;a href=&quot;local-variables#Local-Variables&quot;&gt;Local Variables&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ca40c0325b239bb969d90b6c5d596d17aee4f342" translate="yes" xml:space="preserve">
          <source>The second element, &lt;var&gt;keywords-only&lt;/var&gt;, specifies the value of the variable &lt;code&gt;font-lock-keywords-only&lt;/code&gt;. If this is omitted or &lt;code&gt;nil&lt;/code&gt;, syntactic fontification (of strings and comments) is also performed. If this is non-&lt;code&gt;nil&lt;/code&gt;, syntactic fontification is not performed. See &lt;a href=&quot;syntactic-font-lock#Syntactic-Font-Lock&quot;&gt;Syntactic Font Lock&lt;/a&gt;.</source>
          <target state="translated">The second element, &lt;var&gt;keywords-only&lt;/var&gt; , specifies the value of the variable &lt;code&gt;font-lock-keywords-only&lt;/code&gt; . If this is omitted or &lt;code&gt;nil&lt;/code&gt; , syntactic fontification (of strings and comments) is also performed. If this is non- &lt;code&gt;nil&lt;/code&gt; , syntactic fontification is not performed. See &lt;a href=&quot;syntactic-font-lock#Syntactic-Font-Lock&quot;&gt;Syntactic Font Lock&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="05af5100d6bbcd92ab672dd54e8a7002bdd81fa9" translate="yes" xml:space="preserve">
          <source>The second example shows that when the final argument is a sequence but not a list, the sequence&amp;rsquo;s elements do not become elements of the resulting list. Instead, the sequence becomes the final &lt;small&gt;CDR&lt;/small&gt;, like any other non-list final argument.</source>
          <target state="translated">The second example shows that when the final argument is a sequence but not a list, the sequence&amp;rsquo;s elements do not become elements of the resulting list. Instead, the sequence becomes the final &lt;small&gt;CDR&lt;/small&gt;, like any other non-list final argument.</target>
        </trans-unit>
        <trans-unit id="78870468f3063c31ec99a482f80bcfe4fdf9caa7" translate="yes" xml:space="preserve">
          <source>The second item in the list, &lt;var&gt;regexp&lt;/var&gt;, is a regular expression (see &lt;a href=&quot;regular-expressions#Regular-Expressions&quot;&gt;Regular Expressions&lt;/a&gt;); anything in the buffer that it matches is considered a definition, something to mention in the buffer index. The third item, &lt;var&gt;index&lt;/var&gt;, is a non-negative integer that indicates which subexpression in &lt;var&gt;regexp&lt;/var&gt; matches the definition&amp;rsquo;s name.</source>
          <target state="translated">The second item in the list, &lt;var&gt;regexp&lt;/var&gt; , is a regular expression (see &lt;a href=&quot;regular-expressions#Regular-Expressions&quot;&gt;Regular Expressions&lt;/a&gt;); anything in the buffer that it matches is considered a definition, something to mention in the buffer index. The third item, &lt;var&gt;index&lt;/var&gt; , is a non-negative integer that indicates which subexpression in &lt;var&gt;regexp&lt;/var&gt; matches the definition&amp;rsquo;s name.</target>
        </trans-unit>
        <trans-unit id="39db81295962c9250ac04e8024ae7b73da16e061" translate="yes" xml:space="preserve">
          <source>The second of these hooks is run when a &lt;em&gt;window size change&lt;/em&gt; has been detected which means that a window was created, assigned another buffer, or changed its total size or that of its text area.</source>
          <target state="translated">The second of these hooks is run when a &lt;em&gt;window size change&lt;/em&gt; has been detected which means that a window was created, assigned another buffer, or changed its total size or that of its text area.</target>
        </trans-unit>
        <trans-unit id="e10a4024014db92893950553799fa332ec4eec91" translate="yes" xml:space="preserve">
          <source>The second part of the pattern matches any closing braces and quotation marks, zero or more of them, that may follow the period, question mark or exclamation mark. The &lt;code&gt;\&quot;&lt;/code&gt; is Lisp syntax for a double-quote in a string. The &amp;lsquo;</source>
          <target state="translated">The second part of the pattern matches any closing braces and quotation marks, zero or more of them, that may follow the period, question mark or exclamation mark. The &lt;code&gt;\&quot;&lt;/code&gt; is Lisp syntax for a double-quote in a string. The &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="7da34c753b40326f37f6172c1b58a8c5f825b8f9" translate="yes" xml:space="preserve">
          <source>The selected frame is on a graphical display supporting such dialogs.</source>
          <target state="translated">選択されたフレームは、そのようなダイアログをサポートするグラフィカルなディスプレイ上にあります。</target>
        </trans-unit>
        <trans-unit id="dda9cd63960f9a91b850378b1927da3e714f3287" translate="yes" xml:space="preserve">
          <source>The selected window if it is either specified by a &lt;code&gt;previous-window&lt;/code&gt;&lt;var&gt;alist&lt;/var&gt; entry or showed &lt;var&gt;buffer&lt;/var&gt; before.</source>
          <target state="translated">The selected window if it is either specified by a &lt;code&gt;previous-window&lt;/code&gt; &lt;var&gt;alist&lt;/var&gt; entry or showed &lt;var&gt;buffer&lt;/var&gt; before.</target>
        </trans-unit>
        <trans-unit id="4beffd62ee0e9328af316739d55ab903054a8e51" translate="yes" xml:space="preserve">
          <source>The selected window is considered part of a group when the buffer local variable &lt;code&gt;selected-window-group-function&lt;/code&gt; is set to a function. In this case, &lt;code&gt;selected-window-group&lt;/code&gt; calls it with no arguments and returns its result (which should be the list of windows in the group).</source>
          <target state="translated">The selected window is considered part of a group when the buffer local variable &lt;code&gt;selected-window-group-function&lt;/code&gt; is set to a function. In this case, &lt;code&gt;selected-window-group&lt;/code&gt; calls it with no arguments and returns its result (which should be the list of windows in the group).</target>
        </trans-unit>
        <trans-unit id="c7b994494213138fb5de0429d794e7e303777bef" translate="yes" xml:space="preserve">
          <source>The selected window is the one that you edit in.</source>
          <target state="translated">選択されているウィンドウは、編集しているウィンドウです。</target>
        </trans-unit>
        <trans-unit id="8665184a4907ab2354fc3286c669e4a6527d1f62" translate="yes" xml:space="preserve">
          <source>The selected window&amp;rsquo;s mode line is usually displayed in a different color using the face &lt;code&gt;mode-line&lt;/code&gt;. Other windows&amp;rsquo; mode lines appear in the face &lt;code&gt;mode-line-inactive&lt;/code&gt; instead. See &lt;a href=&quot;faces#Faces&quot;&gt;Faces&lt;/a&gt;.</source>
          <target state="translated">The selected window&amp;rsquo;s mode line is usually displayed in a different color using the face &lt;code&gt;mode-line&lt;/code&gt; . Other windows&amp;rsquo; mode lines appear in the face &lt;code&gt;mode-line-inactive&lt;/code&gt; instead. See &lt;a href=&quot;faces#Faces&quot;&gt;Faces&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e8000cca8be137f75ed18782493ccc880df1113c" translate="yes" xml:space="preserve">
          <source>The semantics of maximizing and iconifying child frames is highly window-system dependent. As a rule, applications should never invoke these operations on child frames. By default, invoking &lt;code&gt;iconify-frame&lt;/code&gt; on a child frame will try to iconify the top-level frame corresponding to that child frame instead. To obtain a different behavior, users may customize the option &lt;code&gt;iconify-child-frame&lt;/code&gt; described below.</source>
          <target state="translated">The semantics of maximizing and iconifying child frames is highly window-system dependent. As a rule, applications should never invoke these operations on child frames. By default, invoking &lt;code&gt;iconify-frame&lt;/code&gt; on a child frame will try to iconify the top-level frame corresponding to that child frame instead. To obtain a different behavior, users may customize the option &lt;code&gt;iconify-child-frame&lt;/code&gt; described below.</target>
        </trans-unit>
        <trans-unit id="1fdee8f54d168addba0e7230f98080d05a806af9" translate="yes" xml:space="preserve">
          <source>The sequence of calls to &lt;code&gt;select-window&lt;/code&gt; with a non-&lt;code&gt;nil&lt;/code&gt;&lt;var&gt;norecord&lt;/var&gt; argument determines an ordering of windows by their selection time. The function &lt;code&gt;get-lru-window&lt;/code&gt; can be used to retrieve the least recently selected live window (see &lt;a href=&quot;cyclic-window-ordering#Cyclic-Window-Ordering&quot;&gt;Cyclic Window Ordering&lt;/a&gt;).</source>
          <target state="translated">The sequence of calls to &lt;code&gt;select-window&lt;/code&gt; with a non- &lt;code&gt;nil&lt;/code&gt; &lt;var&gt;norecord&lt;/var&gt; argument determines an ordering of windows by their selection time. The function &lt;code&gt;get-lru-window&lt;/code&gt; can be used to retrieve the least recently selected live window (see &lt;a href=&quot;cyclic-window-ordering#Cyclic-Window-Ordering&quot;&gt;Cyclic Window Ordering&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="b6126ae190f28d94232911a10b32f330dbd4538f" translate="yes" xml:space="preserve">
          <source>The sequence of kills in the kill ring wraps around, so that after the oldest one comes the newest one, and before the newest one goes the oldest.</source>
          <target state="translated">殺陣の中での殺陣の順序は、古いものの後に新しいものが来て、新しいものの前に古いものが行くように、周りにラップしています。</target>
        </trans-unit>
        <trans-unit id="d17460f17018f05e49ff10eb23d17bcf4ac2e075" translate="yes" xml:space="preserve">
          <source>The serial port can be configured at run-time, without having to close and re-open it. The function &lt;code&gt;serial-process-configure&lt;/code&gt; lets you change the speed, bytesize, and other parameters. In a terminal window created by &lt;code&gt;serial-term&lt;/code&gt;, you can click on the mode line for configuration.</source>
          <target state="translated">The serial port can be configured at run-time, without having to close and re-open it. The function &lt;code&gt;serial-process-configure&lt;/code&gt; lets you change the speed, bytesize, and other parameters. In a terminal window created by &lt;code&gt;serial-term&lt;/code&gt; , you can click on the mode line for configuration.</target>
        </trans-unit>
        <trans-unit id="d2a9ae6c941e0bf24383fb2647a4f9171e1de594" translate="yes" xml:space="preserve">
          <source>The server supports hyperlinks in the notifications.</source>
          <target state="translated">サーバーは通知のハイパーリンクに対応しています。</target>
        </trans-unit>
        <trans-unit id="1636c548d4728e3546b4e61c467b130421fb3043" translate="yes" xml:space="preserve">
          <source>The server supports images in the notifications.</source>
          <target state="translated">サーバーは通知の画像に対応しています。</target>
        </trans-unit>
        <trans-unit id="3b6b682f52a52c12c8f9b21281af0b720bd16c65" translate="yes" xml:space="preserve">
          <source>The server supports persistence of notifications.</source>
          <target state="translated">サーバーは通知の永続化をサポートしています。</target>
        </trans-unit>
        <trans-unit id="21a9b47dbf0032eaa7cb77326a6a549f6f528a88" translate="yes" xml:space="preserve">
          <source>The server supports sounds on notifications.</source>
          <target state="translated">サーバーは通知音に対応しています。</target>
        </trans-unit>
        <trans-unit id="32a2fb16a21966056b09359c49d25b26580e0735" translate="yes" xml:space="preserve">
          <source>The server will provide the specified actions to the user.</source>
          <target state="translated">サーバは指定されたアクションをユーザに提供します。</target>
        </trans-unit>
        <trans-unit id="487bc1e1eea831388d87886ebed5499c261328d4" translate="yes" xml:space="preserve">
          <source>The server will render an animation of all the frames in a given image array.</source>
          <target state="translated">サーバは、与えられた画像配列内のすべてのフレームのアニメーションをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="3d669bc7256cde6bc52048dc9f7dc18c0ff77233" translate="yes" xml:space="preserve">
          <source>The server&amp;rsquo;s process buffer value is never used directly, but the log function can retrieve it and use it to log connections by inserting text there.</source>
          <target state="translated">The server&amp;rsquo;s process buffer value is never used directly, but the log function can retrieve it and use it to log connections by inserting text there.</target>
        </trans-unit>
        <trans-unit id="d4af74ba408681f224f4eae7dc1fcceae876b1eb" translate="yes" xml:space="preserve">
          <source>The server&amp;rsquo;s version number.</source>
          <target state="translated">The server&amp;rsquo;s version number.</target>
        </trans-unit>
        <trans-unit id="850499dab30d08985261f9268e55591d68aa5d33" translate="yes" xml:space="preserve">
          <source>The session ID of the process. This is a number that is the process ID of the process&amp;rsquo;s &lt;em&gt;session leader&lt;/em&gt;.</source>
          <target state="translated">The session ID of the process. This is a number that is the process ID of the process&amp;rsquo;s &lt;em&gt;session leader&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="76fb62b9ff894328ee87291f8886595e1599a44b" translate="yes" xml:space="preserve">
          <source>The set of abbrevs currently in effect is recorded in an &lt;em&gt;abbrev table&lt;/em&gt;. Each buffer has a local abbrev table, but normally all buffers in the same major mode share one abbrev table. There is also a global abbrev table. Normally both are used.</source>
          <target state="translated">The set of abbrevs currently in effect is recorded in an &lt;em&gt;abbrev table&lt;/em&gt;. Each buffer has a local abbrev table, but normally all buffers in the same major mode share one abbrev table. There is also a global abbrev table. Normally both are used.</target>
        </trans-unit>
        <trans-unit id="13bc56e40d973a547522dffd931b5104b534cbab" translate="yes" xml:space="preserve">
          <source>The set of possible multi-event key sequences depends on the bindings for prefix keys; therefore, it can be different for different keymaps, and can change when bindings are changed. However, a one-event sequence is always a key sequence, because it does not depend on any prefix keys for its well-formedness.</source>
          <target state="translated">可能なマルチイベント鍵列のセットは、接頭辞キーのバインディングに依存しているので、キーマップごとに異なる可能性があり、バインディングが変更されると変化します。しかし、1イベント鍵列は常に鍵列であり、その整然とした形式は接頭辞キーに依存しないからです。</target>
        </trans-unit>
        <trans-unit id="ea89afa3ebcf085515befba35c098def36ebf120" translate="yes" xml:space="preserve">
          <source>The set of supported &lt;code&gt;TZ&lt;/code&gt; strings is system-dependent. GNU and many other systems support the tzdata database, e.g., &amp;lsquo;</source>
          <target state="translated">The set of supported &lt;code&gt;TZ&lt;/code&gt; strings is system-dependent. GNU and many other systems support the tzdata database, e.g., &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="ed52d340e29425d0c36d441fce1706eefbff92a9" translate="yes" xml:space="preserve">
          <source>The setf Macro</source>
          <target state="translated">setf マクロ</target>
        </trans-unit>
        <trans-unit id="656aedcd7cd333555b5a910bc06a2f9bb048509a" translate="yes" xml:space="preserve">
          <source>The shell command &lt;code&gt;printenv&lt;/code&gt; prints all or part of the environment:</source>
          <target state="translated">The shell command &lt;code&gt;printenv&lt;/code&gt; prints all or part of the environment:</target>
        </trans-unit>
        <trans-unit id="697532010a390342417a302aa64e0eeb89a98cb2" translate="yes" xml:space="preserve">
          <source>The shell command &lt;code&gt;uptime&lt;/code&gt; returns similar information.</source>
          <target state="translated">The shell command &lt;code&gt;uptime&lt;/code&gt; returns similar information.</target>
        </trans-unit>
        <trans-unit id="7c0ee07626a06ec319c5fa6dda80e5cd02b895c5" translate="yes" xml:space="preserve">
          <source>The shift modifier.</source>
          <target state="translated">シフト修飾子です。</target>
        </trans-unit>
        <trans-unit id="526047c002039949790c223830818877585cd005" translate="yes" xml:space="preserve">
          <source>The significant way that errors are classified is by their condition names&amp;mdash;the names used to match errors with handlers. An error symbol serves only as a convenient way to specify the intended error message and list of condition names. It would be cumbersome to give &lt;code&gt;signal&lt;/code&gt; a list of condition names rather than one error symbol.</source>
          <target state="translated">The significant way that errors are classified is by their condition names&amp;mdash;the names used to match errors with handlers. An error symbol serves only as a convenient way to specify the intended error message and list of condition names. It would be cumbersome to give &lt;code&gt;signal&lt;/code&gt; a list of condition names rather than one error symbol.</target>
        </trans-unit>
        <trans-unit id="701a4ad01ef06b4bddd59b324ead42eff350dde1" translate="yes" xml:space="preserve">
          <source>The simple way to define an inline function, is to write &lt;code&gt;defsubst&lt;/code&gt; instead of &lt;code&gt;defun&lt;/code&gt;. The rest of the definition looks just the same, but using &lt;code&gt;defsubst&lt;/code&gt; says to make it inline for byte compilation.</source>
          <target state="translated">The simple way to define an inline function, is to write &lt;code&gt;defsubst&lt;/code&gt; instead of &lt;code&gt;defun&lt;/code&gt; . The rest of the definition looks just the same, but using &lt;code&gt;defsubst&lt;/code&gt; says to make it inline for byte compilation.</target>
        </trans-unit>
        <trans-unit id="51e0da75b610832dceffa32e7fc903b0a72cc0e2" translate="yes" xml:space="preserve">
          <source>The simpler (and original) way to define a menu item is to bind some event type (it doesn&amp;rsquo;t matter what event type) to a binding like this:</source>
          <target state="translated">The simpler (and original) way to define a menu item is to bind some event type (it doesn&amp;rsquo;t matter what event type) to a binding like this:</target>
        </trans-unit>
        <trans-unit id="c63bdaac10002dfd9144bf4493ac37c5ee6a7227" translate="yes" xml:space="preserve">
          <source>The simplest order of execution is sequential execution: first form &lt;var&gt;a&lt;/var&gt;, then form &lt;var&gt;b&lt;/var&gt;, and so on. This is what happens when you write several forms in succession in the body of a function, or at top level in a file of Lisp code&amp;mdash;the forms are executed in the order written. We call this &lt;em&gt;textual order&lt;/em&gt;. For example, if a function body consists of two forms &lt;var&gt;a&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt;, evaluation of the function evaluates first &lt;var&gt;a&lt;/var&gt; and then &lt;var&gt;b&lt;/var&gt;. The result of evaluating &lt;var&gt;b&lt;/var&gt; becomes the value of the function.</source>
          <target state="translated">The simplest order of execution is sequential execution: first form &lt;var&gt;a&lt;/var&gt; , then form &lt;var&gt;b&lt;/var&gt; , and so on. This is what happens when you write several forms in succession in the body of a function, or at top level in a file of Lisp code&amp;mdash;the forms are executed in the order written. We call this &lt;em&gt;textual order&lt;/em&gt;. For example, if a function body consists of two forms &lt;var&gt;a&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt; , evaluation of the function evaluates first &lt;var&gt;a&lt;/var&gt; and then &lt;var&gt;b&lt;/var&gt; . The result of evaluating &lt;var&gt;b&lt;/var&gt; becomes the value of the function.</target>
        </trans-unit>
        <trans-unit id="2e0a2f8802289814697d3ff9bc642bb98ac915eb" translate="yes" xml:space="preserve">
          <source>The simplest way to add an element to an alist is like this:</source>
          <target state="translated">アリストに要素を追加する一番シンプルな方法はこんな感じです。</target>
        </trans-unit>
        <trans-unit id="b58a2304ffb2d18ce86b489ba35624a904a8a1e9" translate="yes" xml:space="preserve">
          <source>The simplest way to examine text properties is to ask for the value of a particular property of a particular character. For that, use &lt;code&gt;get-text-property&lt;/code&gt;. Use &lt;code&gt;text-properties-at&lt;/code&gt; to get the entire property list of a character. See &lt;a href=&quot;property-search#Property-Search&quot;&gt;Property Search&lt;/a&gt;, for functions to examine the properties of a number of characters at once.</source>
          <target state="translated">The simplest way to examine text properties is to ask for the value of a particular property of a particular character. For that, use &lt;code&gt;get-text-property&lt;/code&gt; . Use &lt;code&gt;text-properties-at&lt;/code&gt; to get the entire property list of a character. See &lt;a href=&quot;property-search#Property-Search&quot;&gt;Property Search&lt;/a&gt;, for functions to examine the properties of a number of characters at once.</target>
        </trans-unit>
        <trans-unit id="adc76fb843de7f5b33d2478fbfc134dfe5c4dcf3" translate="yes" xml:space="preserve">
          <source>The simplest way to use a variable is &lt;em&gt;globally&lt;/em&gt;. This means that the variable has just one value at a time, and this value is in effect (at least for the moment) throughout the Lisp system. The value remains in effect until you specify a new one. When a new value replaces the old one, no trace of the old value remains in the variable.</source>
          <target state="translated">The simplest way to use a variable is &lt;em&gt;globally&lt;/em&gt;. This means that the variable has just one value at a time, and this value is in effect (at least for the moment) throughout the Lisp system. The value remains in effect until you specify a new one. When a new value replaces the old one, no trace of the old value remains in the variable.</target>
        </trans-unit>
        <trans-unit id="2b36ac08912d39209d118742c10208da562be7cf" translate="yes" xml:space="preserve">
          <source>The size of buffer&amp;rsquo;s gap. See &lt;a href=&quot;buffer-gap#Buffer-Gap&quot;&gt;Buffer Gap&lt;/a&gt;.</source>
          <target state="translated">The size of buffer&amp;rsquo;s gap. See &lt;a href=&quot;buffer-gap#Buffer-Gap&quot;&gt;Buffer Gap&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="873e96ede3bbdf4e5518603c5529cf1eece61c3f" translate="yes" xml:space="preserve">
          <source>The size of the accessible part of the current buffer; basically &lt;code&gt;(- (point-max) (point-min))&lt;/code&gt;.</source>
          <target state="translated">The size of the accessible part of the current buffer; basically &lt;code&gt;(- (point-max) (point-min))&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2a849ae6a00f9521aec6d2261f95fba3341d311e" translate="yes" xml:space="preserve">
          <source>The size of the file in bytes (&lt;code&gt;file-attribute-size&lt;/code&gt;).</source>
          <target state="translated">The size of the file in bytes ( &lt;code&gt;file-attribute-size&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="8f563b6a9a8db0e9d2b8a141ce4f9b7d9e8e1e86" translate="yes" xml:space="preserve">
          <source>The size of the new window can be adjusted by supplying &lt;code&gt;window-height&lt;/code&gt; and &lt;code&gt;window-width&lt;/code&gt; entries in &lt;var&gt;alist&lt;/var&gt;. If &lt;var&gt;alist&lt;/var&gt; contains a &lt;code&gt;preserve-size&lt;/code&gt; entry, Emacs will also try to preserve the size of the new window during future resize operations (see &lt;a href=&quot;preserving-window-sizes#Preserving-Window-Sizes&quot;&gt;Preserving Window Sizes&lt;/a&gt;).</source>
          <target state="translated">The size of the new window can be adjusted by supplying &lt;code&gt;window-height&lt;/code&gt; and &lt;code&gt;window-width&lt;/code&gt; entries in &lt;var&gt;alist&lt;/var&gt; . If &lt;var&gt;alist&lt;/var&gt; contains a &lt;code&gt;preserve-size&lt;/code&gt; entry, Emacs will also try to preserve the size of the new window during future resize operations (see &lt;a href=&quot;preserving-window-sizes#Preserving-Window-Sizes&quot;&gt;Preserving Window Sizes&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="43af7be726f5955aa5ff42c15118a19504247059" translate="yes" xml:space="preserve">
          <source>The size of the process&amp;rsquo;s &lt;em&gt;resident set&lt;/em&gt;, the number of kilobytes occupied by the process in the machine&amp;rsquo;s physical memory.</source>
          <target state="translated">The size of the process&amp;rsquo;s &lt;em&gt;resident set&lt;/em&gt;, the number of kilobytes occupied by the process in the machine&amp;rsquo;s physical memory.</target>
        </trans-unit>
        <trans-unit id="576b8e3ff0609705a9b9504b486dacc40004ea6d" translate="yes" xml:space="preserve">
          <source>The sorting functions described in this section all rearrange text in a buffer. This is in contrast to the function &lt;code&gt;sort&lt;/code&gt;, which rearranges the order of the elements of a list (see &lt;a href=&quot;rearrangement#Rearrangement&quot;&gt;Rearrangement&lt;/a&gt;). The values returned by these functions are not meaningful.</source>
          <target state="translated">The sorting functions described in this section all rearrange text in a buffer. This is in contrast to the function &lt;code&gt;sort&lt;/code&gt; , which rearranges the order of the elements of a list (see &lt;a href=&quot;rearrangement#Rearrangement&quot;&gt;Rearrangement&lt;/a&gt;). The values returned by these functions are not meaningful.</target>
        </trans-unit>
        <trans-unit id="4c3d2a4b26d988675d4c78f53514dab4c53dcc03" translate="yes" xml:space="preserve">
          <source>The sound must be stored as a file in RIFF-WAVE format (&amp;lsquo;</source>
          <target state="translated">The sound must be stored as a file in RIFF-WAVE format (&amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="0497cf1b10750bd04c03011dc18b4f0cfdc47413" translate="yes" xml:space="preserve">
          <source>The space of possible character codes is divided into various character sets.</source>
          <target state="translated">可能な文字コードの空間は、様々な文字セットに分割されています。</target>
        </trans-unit>
        <trans-unit id="9432d6b9187cb979929edaa344995bf72578704f" translate="yes" xml:space="preserve">
          <source>The special commands of Edebug are available in the source code buffer in addition to the commands of Emacs Lisp mode. For example, you can type the Edebug command</source>
          <target state="translated">ソースコードバッファには、Emacs Lispモードのコマンドに加えて、Edebugの特別なコマンドが用意されています。例えば、以下のように Edebug コマンドを入力することができます。</target>
        </trans-unit>
        <trans-unit id="749a997c2ad2240b06198fe40cd85ef622970354" translate="yes" xml:space="preserve">
          <source>The special commands of these modes bind &lt;code&gt;buffer-read-only&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; (with &lt;code&gt;let&lt;/code&gt;) or bind &lt;code&gt;inhibit-read-only&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; around the places where they themselves change the text.</source>
          <target state="translated">The special commands of these modes bind &lt;code&gt;buffer-read-only&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; (with &lt;code&gt;let&lt;/code&gt; ) or bind &lt;code&gt;inhibit-read-only&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; around the places where they themselves change the text.</target>
        </trans-unit>
        <trans-unit id="388ba11e949e8870ac609c14e29761f15abdd417" translate="yes" xml:space="preserve">
          <source>The special form &lt;code&gt;interactive&lt;/code&gt; turns a Lisp function into a command. The &lt;code&gt;interactive&lt;/code&gt; form must be located at top-level in the function body, usually as the first form in the body; this applies to both lambda expressions (see &lt;a href=&quot;lambda-expressions#Lambda-Expressions&quot;&gt;Lambda Expressions&lt;/a&gt;) and &lt;code&gt;defun&lt;/code&gt; forms (see &lt;a href=&quot;defining-functions#Defining-Functions&quot;&gt;Defining Functions&lt;/a&gt;). This form does nothing during the actual execution of the function; its presence serves as a flag, telling the Emacs command loop that the function can be called interactively. The argument of the &lt;code&gt;interactive&lt;/code&gt; form specifies how the arguments for an interactive call should be read.</source>
          <target state="translated">The special form &lt;code&gt;interactive&lt;/code&gt; turns a Lisp function into a command. The &lt;code&gt;interactive&lt;/code&gt; form must be located at top-level in the function body, usually as the first form in the body; this applies to both lambda expressions (see &lt;a href=&quot;lambda-expressions#Lambda-Expressions&quot;&gt;Lambda Expressions&lt;/a&gt;) and &lt;code&gt;defun&lt;/code&gt; forms (see &lt;a href=&quot;defining-functions#Defining-Functions&quot;&gt;Defining Functions&lt;/a&gt;). This form does nothing during the actual execution of the function; its presence serves as a flag, telling the Emacs command loop that the function can be called interactively. The argument of the &lt;code&gt;interactive&lt;/code&gt; form specifies how the arguments for an interactive call should be read.</target>
        </trans-unit>
        <trans-unit id="0005a6b722d00b053f8a1c5bab2e99c2e0e932c1" translate="yes" xml:space="preserve">
          <source>The special form &lt;code&gt;quote&lt;/code&gt; returns its single argument, as written, without evaluating it. This provides a way to include constant symbols and lists, which are not self-evaluating objects, in a program. (It is not necessary to quote self-evaluating objects such as numbers, strings, and vectors.)</source>
          <target state="translated">The special form &lt;code&gt;quote&lt;/code&gt; returns its single argument, as written, without evaluating it. This provides a way to include constant symbols and lists, which are not self-evaluating objects, in a program. (It is not necessary to quote self-evaluating objects such as numbers, strings, and vectors.)</target>
        </trans-unit>
        <trans-unit id="244f4b5640ec3dae1a8ddb2bdbc59df8cee21b33" translate="yes" xml:space="preserve">
          <source>The special form &lt;code&gt;track-mouse&lt;/code&gt; enables generation of motion events within its body. Outside of &lt;code&gt;track-mouse&lt;/code&gt; forms, Emacs does not generate events for mere motion of the mouse, and these events do not appear. See &lt;a href=&quot;mouse-tracking#Mouse-Tracking&quot;&gt;Mouse Tracking&lt;/a&gt;.</source>
          <target state="translated">The special form &lt;code&gt;track-mouse&lt;/code&gt; enables generation of motion events within its body. Outside of &lt;code&gt;track-mouse&lt;/code&gt; forms, Emacs does not generate events for mere motion of the mouse, and these events do not appear. See &lt;a href=&quot;mouse-tracking#Mouse-Tracking&quot;&gt;Mouse Tracking&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="28ba34c98e1a089b9214cef4dc2999430a1d7a09" translate="yes" xml:space="preserve">
          <source>The special forms &lt;code&gt;defvar&lt;/code&gt; and &lt;code&gt;defconst&lt;/code&gt; also set the default value (if they set the variable at all), rather than any buffer-local value.</source>
          <target state="translated">The special forms &lt;code&gt;defvar&lt;/code&gt; and &lt;code&gt;defconst&lt;/code&gt; also set the default value (if they set the variable at all), rather than any buffer-local value.</target>
        </trans-unit>
        <trans-unit id="5e119bef1e610c9f0380fd95f6e4af11230682fc" translate="yes" xml:space="preserve">
          <source>The special forms &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;let*&lt;/code&gt; exist to create local bindings:</source>
          <target state="translated">The special forms &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;let*&lt;/code&gt; exist to create local bindings:</target>
        </trans-unit>
        <trans-unit id="67b8199effbdb879bbf1f5d04029672e2a21aec2" translate="yes" xml:space="preserve">
          <source>The special marker &amp;lsquo;</source>
          <target state="translated">The special marker &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="417f26037bec7ec878e05ef7fce97d3107e1525c" translate="yes" xml:space="preserve">
          <source>The special position where editing takes place.</source>
          <target state="translated">編集が行われる特別な位置。</target>
        </trans-unit>
        <trans-unit id="6604b0bf24124b0211a16d199be68fe327c5aa41" translate="yes" xml:space="preserve">
          <source>The special properties &lt;code&gt;point-entered&lt;/code&gt; and &lt;code&gt;point-left&lt;/code&gt; record hook functions that report motion of point. Each time point moves, Emacs compares these two property values:</source>
          <target state="translated">The special properties &lt;code&gt;point-entered&lt;/code&gt; and &lt;code&gt;point-left&lt;/code&gt; record hook functions that report motion of point. Each time point moves, Emacs compares these two property values:</target>
        </trans-unit>
        <trans-unit id="84235cb39de6ef4fc27674810653ef520a1cb95c" translate="yes" xml:space="preserve">
          <source>The special return value &amp;lsquo;</source>
          <target state="translated">The special return value &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="3cfd33d505b3e301ef67641d59464fa7fe2f87dd" translate="yes" xml:space="preserve">
          <source>The special value &lt;code&gt;child-frame&lt;/code&gt; means to make a minibuffer-only child frame (see &lt;a href=&quot;child-frames#Child-Frames&quot;&gt;Child Frames&lt;/a&gt;) whose parent becomes the frame created. As if specified as &lt;code&gt;nil&lt;/code&gt;, Emacs will set this parameter to the minibuffer window of the child frame but will not select the child frame after its creation.</source>
          <target state="translated">The special value &lt;code&gt;child-frame&lt;/code&gt; means to make a minibuffer-only child frame (see &lt;a href=&quot;child-frames#Child-Frames&quot;&gt;Child Frames&lt;/a&gt;) whose parent becomes the frame created. As if specified as &lt;code&gt;nil&lt;/code&gt; , Emacs will set this parameter to the minibuffer window of the child frame but will not select the child frame after its creation.</target>
        </trans-unit>
        <trans-unit id="fcdc41fab620d4b9e47384a2bf4786023f64d828" translate="yes" xml:space="preserve">
          <source>The specification for backquote below illustrates how to match dotted lists and use &lt;code&gt;nil&lt;/code&gt; to terminate recursion. It also illustrates how components of a vector may be matched. (The actual specification defined by Edebug is a little different, and does not support dotted lists because doing so causes very deep recursion that could fail.)</source>
          <target state="translated">The specification for backquote below illustrates how to match dotted lists and use &lt;code&gt;nil&lt;/code&gt; to terminate recursion. It also illustrates how components of a vector may be matched. (The actual specification defined by Edebug is a little different, and does not support dotted lists because doing so causes very deep recursion that could fail.)</target>
        </trans-unit>
        <trans-unit id="27d6230ee26567ac631f3131ae7886bcc7a72c78" translate="yes" xml:space="preserve">
          <source>The specification string also says which fonts to use in the fontset. See below for the details.</source>
          <target state="translated">仕様文字列には、フォントセットでどのフォントを使用するかも書かれています。詳細は以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="7f25f9498af3ebb82fd4fd0ed6c991c529aa68e9" translate="yes" xml:space="preserve">
          <source>The specification version the server is compliant with.</source>
          <target state="translated">サーバーが準拠している仕様バージョン。</target>
        </trans-unit>
        <trans-unit id="9a30b5e6e028131d98090823da5db94954c0fdbe" translate="yes" xml:space="preserve">
          <source>The specified &lt;var&gt;alist&lt;/var&gt; is an association list of symbols and values. The following symbols have a special meaning:</source>
          <target state="translated">The specified &lt;var&gt;alist&lt;/var&gt; is an association list of symbols and values. The following symbols have a special meaning:</target>
        </trans-unit>
        <trans-unit id="e407764dfcb6e2f1247a11cf715cac7ed4f26bbf" translate="yes" xml:space="preserve">
          <source>The specified &lt;var&gt;frame&lt;/var&gt; becomes the selected frame, and its terminal becomes the selected terminal. This function then calls &lt;code&gt;select-window&lt;/code&gt; as a subroutine, passing the window selected within &lt;var&gt;frame&lt;/var&gt; as its first argument and &lt;var&gt;norecord&lt;/var&gt; as its second argument (hence, if &lt;var&gt;norecord&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, this avoids changing the order of recently selected windows and the buffer list). See &lt;a href=&quot;selecting-windows#Selecting-Windows&quot;&gt;Selecting Windows&lt;/a&gt;.</source>
          <target state="translated">The specified &lt;var&gt;frame&lt;/var&gt; becomes the selected frame, and its terminal becomes the selected terminal. This function then calls &lt;code&gt;select-window&lt;/code&gt; as a subroutine, passing the window selected within &lt;var&gt;frame&lt;/var&gt; as its first argument and &lt;var&gt;norecord&lt;/var&gt; as its second argument (hence, if &lt;var&gt;norecord&lt;/var&gt; is non- &lt;code&gt;nil&lt;/code&gt; , this avoids changing the order of recently selected windows and the buffer list). See &lt;a href=&quot;selecting-windows#Selecting-Windows&quot;&gt;Selecting Windows&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="87e2533bf5024d0890c44a2a577f82288504b5ca" translate="yes" xml:space="preserve">
          <source>The specified functions are stored in the property list of &lt;var&gt;name&lt;/var&gt; under the property &lt;code&gt;hash-table-test&lt;/code&gt;; the property value&amp;rsquo;s form is &lt;code&gt;(&lt;var&gt;test-fn&lt;/var&gt; &lt;var&gt;hash-fn&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">The specified functions are stored in the property list of &lt;var&gt;name&lt;/var&gt; under the property &lt;code&gt;hash-table-test&lt;/code&gt; ; the property value&amp;rsquo;s form is &lt;code&gt;(&lt;var&gt;test-fn&lt;/var&gt; &lt;var&gt;hash-fn&lt;/var&gt;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="91455a3d8f4bdb484463e73b427656cc16a89567" translate="yes" xml:space="preserve">
          <source>The speed of the serial port in bits per second, a.k.a. &lt;em&gt;baud rate&lt;/em&gt;. The value can be any number, but most serial ports work only at a few defined values between 1200 and 115200, with 9600 being the most common value. If &lt;var&gt;speed&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, the function ignores all other arguments and does not configure the port. This may be useful for special serial ports such as Bluetooth-to-serial converters, which can only be configured through &amp;lsquo;</source>
          <target state="translated">The speed of the serial port in bits per second, a.k.a. &lt;em&gt;baud rate&lt;/em&gt;. The value can be any number, but most serial ports work only at a few defined values between 1200 and 115200, with 9600 being the most common value. If &lt;var&gt;speed&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt; , the function ignores all other arguments and does not configure the port. This may be useful for special serial ports such as Bluetooth-to-serial converters, which can only be configured through &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="52128a6146c27dc1c3960ab9a318c70adfaf8c01" translate="yes" xml:space="preserve">
          <source>The speed of the serial port in bits per second. This function calls &lt;code&gt;serial-process-configure&lt;/code&gt; to handle the speed; see the following documentation of that function for more details.</source>
          <target state="translated">The speed of the serial port in bits per second. This function calls &lt;code&gt;serial-process-configure&lt;/code&gt; to handle the speed; see the following documentation of that function for more details.</target>
        </trans-unit>
        <trans-unit id="fbb6c823ca23a02980eeae5e0a0001e4cc0886fe" translate="yes" xml:space="preserve">
          <source>The square brackets indicate that the &lt;code&gt;&amp;amp;optional&lt;/code&gt; and &lt;code&gt;&amp;amp;rest&lt;/code&gt; clauses, and the variables that follow them, are optional.</source>
          <target state="translated">The square brackets indicate that the &lt;code&gt;&amp;amp;optional&lt;/code&gt; and &lt;code&gt;&amp;amp;rest&lt;/code&gt; clauses, and the variables that follow them, are optional.</target>
        </trans-unit>
        <trans-unit id="81a3604cf4a5ac01501948bd0680c4975564433d" translate="yes" xml:space="preserve">
          <source>The stack frame made for the function call which enters the debugger in this way will be flagged automatically so that the debugger will be called again when the frame is exited. You can use the</source>
          <target state="translated">このようにしてデバッガに入る関数呼び出しのために作られたスタックフレームは、フレームが終了したときにデバッガが再度呼び出されるように自動的にフラグが立てられます。デバッガでは、このようにして作られたスタックフレームに</target>
        </trans-unit>
        <trans-unit id="9a119c8d6df162a4c1cd3d34b9608179ca3eb2aa" translate="yes" xml:space="preserve">
          <source>The standard GNU Emacs Lisp directory tree contains the code for several major modes, in files such as</source>
          <target state="translated">標準の GNU Emacs Lisp ディレクトリツリーには、いくつかの主要なモードのコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="88217deefb3d70a4db90b540339f6b3e6d2c6eee" translate="yes" xml:space="preserve">
          <source>The standard definition of the &lt;code&gt;delete-frame&lt;/code&gt; event is to delete &lt;var&gt;frame&lt;/var&gt;.</source>
          <target state="translated">The standard definition of the &lt;code&gt;delete-frame&lt;/code&gt; event is to delete &lt;var&gt;frame&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="03b918691e790a880d4fba6e47f98dbbdb8910de" translate="yes" xml:space="preserve">
          <source>The standard definition of this function is as follows:</source>
          <target state="translated">この関数の標準的な定義は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="6292beb7dc766e9cc6bfb7027445782776c9d55b" translate="yes" xml:space="preserve">
          <source>The standard definition of this function, on most operating systems, is as follows:</source>
          <target state="translated">この機能の標準的な定義は、ほとんどのオペレーティングシステムでは、次のようになっています。</target>
        </trans-unit>
        <trans-unit id="259daec623d20179dd6c873402018404fce5ae52" translate="yes" xml:space="preserve">
          <source>The standard input for the new process comes from file &lt;var&gt;infile&lt;/var&gt; if &lt;var&gt;infile&lt;/var&gt; is not &lt;code&gt;nil&lt;/code&gt;, and from the null device otherwise. The argument &lt;var&gt;destination&lt;/var&gt; says where to put the process output. Here are the possibilities:</source>
          <target state="translated">The standard input for the new process comes from file &lt;var&gt;infile&lt;/var&gt; if &lt;var&gt;infile&lt;/var&gt; is not &lt;code&gt;nil&lt;/code&gt; , and from the null device otherwise. The argument &lt;var&gt;destination&lt;/var&gt; says where to put the process output. Here are the possibilities:</target>
        </trans-unit>
        <trans-unit id="44c287ca4b32485d2fbd1b0533c6bc30851eaea0" translate="yes" xml:space="preserve">
          <source>The standard letter-codes for reading arguments in various ways.</source>
          <target state="translated">様々な方法で引数を読み取るための標準的な文字コードです。</target>
        </trans-unit>
        <trans-unit id="8f49ffda7284df4c0cd9b03dae4b8a52126166b8" translate="yes" xml:space="preserve">
          <source>The start of the documentation string is usually indented in the source file, but since these spaces come before the starting double-quote, they are not part of the string. Some people make a practice of indenting any additional lines of the string so that the text lines up in the program source. &lt;em&gt;That is a mistake.&lt;/em&gt; The indentation of the following lines is inside the string; what looks nice in the source code will look ugly when displayed by the help commands.</source>
          <target state="translated">The start of the documentation string is usually indented in the source file, but since these spaces come before the starting double-quote, they are not part of the string. Some people make a practice of indenting any additional lines of the string so that the text lines up in the program source. &lt;em&gt;That is a mistake.&lt;/em&gt; The indentation of the following lines is inside the string; what looks nice in the source code will look ugly when displayed by the help commands.</target>
        </trans-unit>
        <trans-unit id="4c672e151d200c22d18367c0a5d6b7e540bedaea" translate="yes" xml:space="preserve">
          <source>The state code of the process. This is a short string that encodes the scheduling state of the process. Here&amp;rsquo;s a list of the most frequently seen codes:</source>
          <target state="translated">The state code of the process. This is a short string that encodes the scheduling state of the process. Here&amp;rsquo;s a list of the most frequently seen codes:</target>
        </trans-unit>
        <trans-unit id="f2d7146dc12f6d9513c21cfa997b6a60f75f956d" translate="yes" xml:space="preserve">
          <source>The state of keyboard macro definition is saved and restored. While Edebug is active, &lt;code&gt;defining-kbd-macro&lt;/code&gt; is bound to &lt;code&gt;edebug-continue-kbd-macro&lt;/code&gt;.</source>
          <target state="translated">The state of keyboard macro definition is saved and restored. While Edebug is active, &lt;code&gt;defining-kbd-macro&lt;/code&gt; is bound to &lt;code&gt;edebug-continue-kbd-macro&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8c91d0e0a6d197098d1a02ec3a2503f351103980" translate="yes" xml:space="preserve">
          <source>The state of keyboard macro execution is saved and restored. While Edebug is active, &lt;code&gt;executing-kbd-macro&lt;/code&gt; is bound to &lt;code&gt;nil&lt;/code&gt; unless &lt;code&gt;edebug-continue-kbd-macro&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">The state of keyboard macro execution is saved and restored. While Edebug is active, &lt;code&gt;executing-kbd-macro&lt;/code&gt; is bound to &lt;code&gt;nil&lt;/code&gt; unless &lt;code&gt;edebug-continue-kbd-macro&lt;/code&gt; is non- &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bf9ddd67b0e2736562e5e1b48123ad8e5e1a7a7d" translate="yes" xml:space="preserve">
          <source>The state of visibility of the frame. There are three possibilities: &lt;code&gt;nil&lt;/code&gt; for invisible, &lt;code&gt;t&lt;/code&gt; for visible, and &lt;code&gt;icon&lt;/code&gt; for iconified. See &lt;a href=&quot;visibility-of-frames#Visibility-of-Frames&quot;&gt;Visibility of Frames&lt;/a&gt;.</source>
          <target state="translated">The state of visibility of the frame. There are three possibilities: &lt;code&gt;nil&lt;/code&gt; for invisible, &lt;code&gt;t&lt;/code&gt; for visible, and &lt;code&gt;icon&lt;/code&gt; for iconified. See &lt;a href=&quot;visibility-of-frames#Visibility-of-Frames&quot;&gt;Visibility of Frames&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9e8a0a928375b331768ea9541d2c2a6c4d37acbb" translate="yes" xml:space="preserve">
          <source>The status of the subprocess belonging to the current buffer, obtained with &lt;code&gt;process-status&lt;/code&gt;. See &lt;a href=&quot;process-information#Process-Information&quot;&gt;Process Information&lt;/a&gt;.</source>
          <target state="translated">The status of the subprocess belonging to the current buffer, obtained with &lt;code&gt;process-status&lt;/code&gt; . See &lt;a href=&quot;process-information#Process-Information&quot;&gt;Process Information&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="999eb55350809e41053d193b69ed4373f0358a4b" translate="yes" xml:space="preserve">
          <source>The string &lt;var&gt;buffer-name&lt;/var&gt; specifies the temporary buffer, which need not already exist. The argument must be a string, not a buffer. The buffer is erased initially (with no questions asked), and it is marked as unmodified after &lt;code&gt;with-output-to-temp-buffer&lt;/code&gt; exits.</source>
          <target state="translated">The string &lt;var&gt;buffer-name&lt;/var&gt; specifies the temporary buffer, which need not already exist. The argument must be a string, not a buffer. The buffer is erased initially (with no questions asked), and it is marked as unmodified after &lt;code&gt;with-output-to-temp-buffer&lt;/code&gt; exits.</target>
        </trans-unit>
        <trans-unit id="a4d3cb799dfeca2e1bb98a62be5a7ac517d5ffb4" translate="yes" xml:space="preserve">
          <source>The string &lt;var&gt;lighter&lt;/var&gt; says what to display in the mode line when the mode is enabled; if it is &lt;code&gt;nil&lt;/code&gt;, the mode is not displayed in the mode line.</source>
          <target state="translated">ストリング &lt;var&gt;lighter&lt;/var&gt; は、モードが有効になっているときにモード行に何を表示するかを示します。それがある場合に &lt;code&gt;nil&lt;/code&gt; 、モードは、モード行に表示されません。</target>
        </trans-unit>
        <trans-unit id="a03446e19ee8800b453720d31c0b60da78dc7e80" translate="yes" xml:space="preserve">
          <source>The string containing the byte-code instructions.</source>
          <target state="translated">バイトコード命令を含む文字列。</target>
        </trans-unit>
        <trans-unit id="1ba6ac8d60c10283435c94518d321e4f95295bb9" translate="yes" xml:space="preserve">
          <source>The string describing the event looks like one of the following:</source>
          <target state="translated">イベントを記述する文字列は、以下のいずれかのようになります。</target>
        </trans-unit>
        <trans-unit id="26291a7cd459e196bf1c635f5e136cb0085033bb" translate="yes" xml:space="preserve">
          <source>The string is inserted literally.</source>
          <target state="translated">文字列が文字通り挿入されます。</target>
        </trans-unit>
        <trans-unit id="c1cb47cdeee50f6839e7f1b4e7667115d1fdbb0c" translate="yes" xml:space="preserve">
          <source>The string or comment start position. While inside a comment, this is the position where the comment began; while inside a string, this is the position where the string began. When outside of strings and comments, this element is &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">文字列またはコメントの開始位置。コメントの中にある間、これはコメントが始まった位置です。弦の中にある間、これは弦が始まった位置です。文字列とコメントの外側にある場合、この要素は &lt;code&gt;nil&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="80ad211627a8eba28dd5ef9816837befb4643331" translate="yes" xml:space="preserve">
          <source>The string that this function returns is what is recorded in the symbolic link; it may or may not include any leading directories. This function does &lt;em&gt;not&lt;/em&gt; expand the link target to produce a fully-qualified file name, and in particular does not use the leading directories, if any, of the &lt;var&gt;filename&lt;/var&gt; argument if the link target is not an absolute file name. Here&amp;rsquo;s an example:</source>
          <target state="translated">この関数が返す文字列は、シンボリックリンクに記録されているものです。先行ディレクトリが含まれる場合と含まれない場合があります。この機能はない&lt;em&gt;ではない&lt;/em&gt;完全修飾ファイル名を生成するために、リンクのターゲットを展開し、特に以下の、いずれかの場合には、主要なディレクトリを使用していない &lt;var&gt;filename&lt;/var&gt; リンク先は、絶対ファイル名でない場合、引数。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="ed696d53e7ac7bcc7d08d01175d6eb89bf0c571f" translate="yes" xml:space="preserve">
          <source>The string to be completed.</source>
          <target state="translated">完成させる文字列です。</target>
        </trans-unit>
        <trans-unit id="07cf4d672d43fc0025d53260f62ef95ec1c50b45" translate="yes" xml:space="preserve">
          <source>The string which was clicked on, including any properties.</source>
          <target state="translated">クリックされた文字列(プロパティを含む)。</target>
        </trans-unit>
        <trans-unit id="9e01c44c700489e51d428a65abb3864ced471545" translate="yes" xml:space="preserve">
          <source>The strings are compared by the numeric values of their characters. For instance, &lt;var&gt;str1&lt;/var&gt; is considered less than &lt;var&gt;str2&lt;/var&gt; if its first differing character has a smaller numeric value. If &lt;var&gt;ignore-case&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, characters are converted to upper-case before comparing them. Unibyte strings are converted to multibyte for comparison (see &lt;a href=&quot;text-representations#Text-Representations&quot;&gt;Text Representations&lt;/a&gt;), so that a unibyte string and its conversion to multibyte are always regarded as equal.</source>
          <target state="translated">文字列は、文字の数値によって比較されます。たとえば、 &lt;var&gt;str1&lt;/var&gt; の最初の異なる文字の数値が小さい場合、str1は &lt;var&gt;str2&lt;/var&gt; よりも小さいと見なされます。場合は &lt;var&gt;ignore-case&lt;/var&gt; 非で &lt;code&gt;nil&lt;/code&gt; を、文字がそれらを比較する前に大文字に変換されます。ユニバイト文字列は比較のためにマルチバイトに変換されるため（&lt;a href=&quot;text-representations#Text-Representations&quot;&gt;テキスト表現を&lt;/a&gt;参照）、ユニバイト文字列とそのマルチバイトへの変換は常に等しいと見なされます。</target>
        </trans-unit>
        <trans-unit id="44b6399fd6b44ca0035a1f2fc79dfcc1e1445a5f" translate="yes" xml:space="preserve">
          <source>The strings in &lt;var&gt;list-of-strings&lt;/var&gt; that need quoting are those that include &lt;var&gt;separator&lt;/var&gt; as their substring. Quoting a string encloses it in double quotes &lt;code&gt;&quot;&amp;hellip;&quot;&lt;/code&gt;. In the simplest case, if you are consing a command from the individual command-line arguments, every argument that includes embedded blanks will be quoted.</source>
          <target state="translated">引用 &lt;var&gt;list-of-strings&lt;/var&gt; が必要な文字列リスト内の文字列は、部分文字列として &lt;var&gt;separator&lt;/var&gt; 文字を含む文字列です。文字列を引用すると、二重引用符 &lt;code&gt;&quot;&amp;hellip;&quot;&lt;/code&gt; 囲まれます。最も単純なケースでは、個々のコマンドライン引数からコマンドを作成する場合、空白が埋め込まれているすべての引数が引用符で囲まれます。</target>
        </trans-unit>
        <trans-unit id="6eb3410ffb193ecb3bb6cdb461cdb85ed0d15602" translate="yes" xml:space="preserve">
          <source>The strings matching the first nine grouping constructs appearing in the entire regular expression passed to a search or matching function are assigned numbers 1 through 9 in the order that the open parentheses appear in the regular expression. So you can use &amp;lsquo;</source>
          <target state="translated">検索またはマッチング関数に渡される正規表現全体に表示される最初の9つのグループ化構造に一致する文字列には、正規表現に表示される開き括弧の順序で1から9までの番号が割り当てられます。だからあなたは 'を使うことができます</target>
        </trans-unit>
        <trans-unit id="d581c2599c93c8f407b1007bbe2ce48ba6714abb" translate="yes" xml:space="preserve">
          <source>The subprocess inherits its environment from Emacs, but you can specify overrides for it with &lt;code&gt;process-environment&lt;/code&gt;. See &lt;a href=&quot;system-environment#System-Environment&quot;&gt;System Environment&lt;/a&gt;. The subprocess gets its current directory from the value of &lt;code&gt;default-directory&lt;/code&gt;.</source>
          <target state="translated">サブプロセスはその環境をEmacsから継承しますが、 &lt;code&gt;process-environment&lt;/code&gt; を使用してサブプロセスのオーバーライドを指定できます。&lt;a href=&quot;system-environment#System-Environment&quot;&gt;システム環境を&lt;/a&gt;参照してください。サブプロセスは、 &lt;code&gt;default-directory&lt;/code&gt; の値から現在のディレクトリを取得します。</target>
        </trans-unit>
        <trans-unit id="36e61db0284478d461aa89c79eac1cab50f7a0e0" translate="yes" xml:space="preserve">
          <source>The substitutions performed by &amp;lsquo;</source>
          <target state="translated">'によって実行される置換</target>
        </trans-unit>
        <trans-unit id="8b19565b999d7f6150d2a072214b083a7f92bdb0" translate="yes" xml:space="preserve">
          <source>The subtype controls the number of &lt;em&gt;extra slots&lt;/em&gt; in the char-table. This number is specified by the subtype&amp;rsquo;s &lt;code&gt;char-table-extra-slots&lt;/code&gt; symbol property (see &lt;a href=&quot;symbol-properties#Symbol-Properties&quot;&gt;Symbol Properties&lt;/a&gt;), whose value should be an integer between 0 and 10. If the subtype has no such symbol property, the char-table has no extra slots.</source>
          <target state="translated">サブタイプは、char-tableの&lt;em&gt;追加スロット&lt;/em&gt;の数を制御します。この番号は、サブタイプの &lt;code&gt;char-table-extra-slots&lt;/code&gt; シンボルプロパティ（&lt;a href=&quot;symbol-properties#Symbol-Properties&quot;&gt;シンボルプロパティを&lt;/a&gt;参照）によって指定されます。その値は0〜10の整数である必要があります。サブタイプにそのようなシンボルプロパティがない場合、char-tableには追加のスロットがありません。 。</target>
        </trans-unit>
        <trans-unit id="3b7c16dd882ba705b433c0230563b93def38601b" translate="yes" xml:space="preserve">
          <source>The subtype provides an easy way to tell what the char-table is for. For instance, display tables are char-tables with &lt;code&gt;display-table&lt;/code&gt; as the subtype, and syntax tables are char-tables with &lt;code&gt;syntax-table&lt;/code&gt; as the subtype. The subtype can be queried using the function &lt;code&gt;char-table-subtype&lt;/code&gt;, described below.</source>
          <target state="translated">サブタイプは、char-tableの目的を簡単に判断する方法を提供します。たとえば、displayテーブルは &lt;code&gt;display-table&lt;/code&gt; をサブタイプとするchar-tablesであり、 &lt;code&gt;syntax-table&lt;/code&gt; をサブタイプとするchar-tablesです。サブタイプは、以下で説明する関数 &lt;code&gt;char-table-subtype&lt;/code&gt; を使用して照会できます。</target>
        </trans-unit>
        <trans-unit id="68ac4cd83ea417c1f7f9af452e5cc5b822c521ce" translate="yes" xml:space="preserve">
          <source>The sum of &lt;code&gt;utime&lt;/code&gt; and &lt;code&gt;stime&lt;/code&gt;. The corresponding &lt;var&gt;value&lt;/var&gt; is a Lisp timestamp.</source>
          <target state="translated">&lt;code&gt;utime&lt;/code&gt; と &lt;code&gt;stime&lt;/code&gt; の合計。対応する &lt;var&gt;value&lt;/var&gt; はLispタイムスタンプです。</target>
        </trans-unit>
        <trans-unit id="d35712cec496be81a5cc381ab6d618570491eb43" translate="yes" xml:space="preserve">
          <source>The super modifier.</source>
          <target state="translated">スーパーモディファイアです。</target>
        </trans-unit>
        <trans-unit id="8e705c61a14589689176e3b34a3649287549f965" translate="yes" xml:space="preserve">
          <source>The sweep phase puts unused cons cells onto a &lt;em&gt;free list&lt;/em&gt; for future allocation; likewise for symbols and markers. It compacts the accessible strings so they occupy fewer 8k blocks; then it frees the other 8k blocks. Unreachable vectors from vector blocks are coalesced to create largest possible free areas; if a free area spans a complete 4k block, that block is freed. Otherwise, the free area is recorded in a free list array, where each entry corresponds to a free list of areas of the same size. Large vectors, buffers, and other large objects are allocated and freed individually.</source>
          <target state="translated">スイープフェーズでは、未使用のconsセルが将来の割り当てのために&lt;em&gt;空きリストに追加さ&lt;/em&gt;れます。シンボルやマーカーについても同様です。アクセス可能な文字列を圧縮して、占有する8kブロックを減らします。次に、他の8kブロックを解放します。ベクトルブロックからの到達不能なベクトルが合体して、可能な限り最大の空き領域が作成されます。空き領域が完全な4kブロックにまたがる場合、そのブロックは解放されます。それ以外の場合、空き領域は空きリスト配列に記録されます。各エントリは、同じサイズの領域の空きリストに対応します。大きなベクトル、バッファ、およびその他の大きなオブジェクトは、個別に割り当てられ、解放されます。</target>
        </trans-unit>
        <trans-unit id="80c81c27e3f0ac4ab84d01b9b6f0b0331d39a84e" translate="yes" xml:space="preserve">
          <source>The symbol &lt;code&gt;-&lt;/code&gt;. This indicates that</source>
          <target state="translated">シンボル &lt;code&gt;-&lt;/code&gt; 。これは、</target>
        </trans-unit>
        <trans-unit id="d524cc19731a4d7319fdb32e1fd42c2468c1ccdb" translate="yes" xml:space="preserve">
          <source>The symbol &lt;code&gt;undefined&lt;/code&gt; is worth special mention: it means to treat the key as undefined. Strictly speaking, the key is defined, and its binding is the command &lt;code&gt;undefined&lt;/code&gt;; but that command does the same thing that is done automatically for an undefined key: it rings the bell (by calling &lt;code&gt;ding&lt;/code&gt;) but does not signal an error.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; の記号は特筆に値します。これは、キーを未定義として扱うことを意味します。厳密に言えば、キーは定義されており、そのバインディングはコマンド &lt;code&gt;undefined&lt;/code&gt; です。ただし、このコマンドは、未定義のキーに対して自動的に実行されるのと同じことを実行します。ベルを鳴らしますが（ &lt;code&gt;ding&lt;/code&gt; を呼び出すことにより）、エラーを通知しません。</target>
        </trans-unit>
        <trans-unit id="262aaa6e5851917f322ee907187b949e88c9ea3d" translate="yes" xml:space="preserve">
          <source>The symbol &lt;var&gt;var&lt;/var&gt; was defined as a variable.</source>
          <target state="translated">シンボル &lt;var&gt;var&lt;/var&gt; は変数として定義されました。</target>
        </trans-unit>
        <trans-unit id="5b0a7c1e7a600f3ceec6a0c096061763b149143e" translate="yes" xml:space="preserve">
          <source>The symbol must have an Edebug specification, which is used instead. This indirection is repeated until another kind of specification is found. This allows you to inherit the specification from another macro.</source>
          <target state="translated">シンボルは Edebug 仕様を持っていなければなりませんが、その代わりに Edebug 仕様が使われます。このインダイレクションは、別の種類の仕様が見つかるまで繰り返されます。これにより、別のマクロから仕様を継承することができます。</target>
        </trans-unit>
        <trans-unit id="6db9e28485fd698ef52d7e3eb3a2773fea9702ff" translate="yes" xml:space="preserve">
          <source>The symbol&amp;rsquo;s current value as a variable.</source>
          <target state="translated">変数としてのシンボルの現在の値。</target>
        </trans-unit>
        <trans-unit id="a0a66fbe0304b2b0365a8eb85d918232ae7d5a27" translate="yes" xml:space="preserve">
          <source>The symbol&amp;rsquo;s function definition. It can also hold a symbol, a keymap, or a keyboard macro.</source>
          <target state="translated">シンボルの関数定義。記号、キーマップ、またはキーボードマクロを保持することもできます。</target>
        </trans-unit>
        <trans-unit id="116bb8f437931ac9fdc82686fd01e5886bbdad99" translate="yes" xml:space="preserve">
          <source>The symbol&amp;rsquo;s name.</source>
          <target state="translated">シンボルの名前。</target>
        </trans-unit>
        <trans-unit id="4815883f12f3ddda91c2ff86c5cf8ead169410ab" translate="yes" xml:space="preserve">
          <source>The symbol&amp;rsquo;s property list.</source>
          <target state="translated">シンボルのプロパティリスト。</target>
        </trans-unit>
        <trans-unit id="0da588e9c066744bf4c6e6a6cdf66d1b7de2d7a2" translate="yes" xml:space="preserve">
          <source>The symbol&amp;rsquo;s value is used.</source>
          <target state="translated">記号の値が使用されます。</target>
        </trans-unit>
        <trans-unit id="4757d314ae2103a000ffd713b4431bdf90047a13" translate="yes" xml:space="preserve">
          <source>The symbols &lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt; are treated specially, so that the value of &lt;code&gt;nil&lt;/code&gt; is always &lt;code&gt;nil&lt;/code&gt;, and the value of &lt;code&gt;t&lt;/code&gt; is always &lt;code&gt;t&lt;/code&gt;; you cannot set or bind them to any other values. Thus, these two symbols act like self-evaluating forms, even though &lt;code&gt;eval&lt;/code&gt; treats them like any other symbol. A symbol whose name starts with &amp;lsquo;</source>
          <target state="translated">記号 &lt;code&gt;nil&lt;/code&gt; と &lt;code&gt;t&lt;/code&gt; は特別に扱われるため、 &lt;code&gt;nil&lt;/code&gt; の値は常に &lt;code&gt;nil&lt;/code&gt; であり、 &lt;code&gt;t&lt;/code&gt; の値は常に &lt;code&gt;t&lt;/code&gt; です。それらを他の値に設定またはバインドすることはできません。したがって、これら2つのシンボルは、 &lt;code&gt;eval&lt;/code&gt; が他のシンボルと同じように扱う場合でも、自己評価形式のように機能します。名前が 'で始まる記号</target>
        </trans-unit>
        <trans-unit id="f0a7fe54d498086e0224f1254ce0302e2d45b30e" translate="yes" xml:space="preserve">
          <source>The symbols &lt;code&gt;user-login-name&lt;/code&gt;, &lt;code&gt;user-real-login-name&lt;/code&gt; and &lt;code&gt;user-full-name&lt;/code&gt; are variables as well as functions. The functions return the same values that the variables hold. These variables allow you to fake out Emacs by telling the functions what to return. The variables are also useful for constructing frame titles (see &lt;a href=&quot;frame-titles#Frame-Titles&quot;&gt;Frame Titles&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;user-login-name&lt;/code&gt; 、 &lt;code&gt;user-real-login-name&lt;/code&gt; 、 &lt;code&gt;user-full-name&lt;/code&gt; の記号は、変数であると同時に関数でもあります。関数は、変数が保持するのと同じ値を返します。これらの変数を使用すると、関数に何を返すかを指示することでEmacsを偽造できます。変数は、フレームタイトルの作成にも役立ちます（&lt;a href=&quot;frame-titles#Frame-Titles&quot;&gt;フレームタイトルを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="0804f73f2468d63be3d44abb01edffb59c0ad975" translate="yes" xml:space="preserve">
          <source>The synchronous subprocess functions return an indication of how the process terminated.</source>
          <target state="translated">同期サブプロセス関数は、プロセスがどのように終了したかの表示を返します。</target>
        </trans-unit>
        <trans-unit id="42db7ccb5bf39d0ef36aec66fdcf39beff2dbdf3" translate="yes" xml:space="preserve">
          <source>The syntax &lt;code&gt;(rose . violet . buttercup)&lt;/code&gt; is invalid because there is nothing that it could mean. If anything, it would say to put &lt;code&gt;buttercup&lt;/code&gt; in the &lt;small&gt;CDR&lt;/small&gt; of a cons cell whose &lt;small&gt;CDR&lt;/small&gt; is already used for &lt;code&gt;violet&lt;/code&gt;.</source>
          <target state="translated">構文 &lt;code&gt;(rose . violet . buttercup)&lt;/code&gt; は、意味するものがないため無効です。どちらかといえば、それは置くことを言うでしょう &lt;code&gt;buttercup&lt;/code&gt; に&lt;small&gt;CDR&lt;/small&gt;のコンスセルの&lt;small&gt;CDR&lt;/small&gt;すでに使用され &lt;code&gt;violet&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cab7667e7d8ac62d20cdad9ef7c79cda38e5bc22" translate="yes" xml:space="preserve">
          <source>The syntax for integers in bases other than 10 consists of &amp;lsquo;</source>
          <target state="translated">10以外の基数の整数の構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="88b43371f5f28d88c8b06cc0133c5c8be8a7772e" translate="yes" xml:space="preserve">
          <source>The syntax is changed only for &lt;var&gt;table&lt;/var&gt;, which defaults to the current buffer&amp;rsquo;s syntax table, and not in any other syntax table.</source>
          <target state="translated">構文は &lt;var&gt;table&lt;/var&gt; に対してのみ変更されます。テーブルはデフォルトで現在のバッファの構文テーブルに変更され、他の構文テーブルでは変更されません。</target>
        </trans-unit>
        <trans-unit id="239ff1bb3df2ca92e1729acd450422ea90926247" translate="yes" xml:space="preserve">
          <source>The syntax of &lt;code&gt;EMACSLOADPATH&lt;/code&gt; is the same as used for &lt;code&gt;PATH&lt;/code&gt;; directories are separated by &amp;lsquo;</source>
          <target state="translated">&lt;code&gt;EMACSLOADPATH&lt;/code&gt; の構文は、 &lt;code&gt;PATH&lt;/code&gt; に使用されるものと同じです。ディレクトリは 'で区切られます</target>
        </trans-unit>
        <trans-unit id="1999b037e6c53b71c64122a6e2bea19301ea2ee4" translate="yes" xml:space="preserve">
          <source>The syntax of format specifications accepted by &lt;code&gt;format-spec&lt;/code&gt; is similar, but not identical, to that accepted by &lt;code&gt;format&lt;/code&gt;. In both cases, a format specification is a sequence of characters beginning with &amp;lsquo;</source>
          <target state="translated">受け付けるフォーマット仕様の構文 &lt;code&gt;format-spec&lt;/code&gt; で受け入れたことに、類似しているが、同一ではない &lt;code&gt;format&lt;/code&gt; 。どちらの場合も、フォーマット指定は 'で始まる文字のシーケンスです。</target>
        </trans-unit>
        <trans-unit id="a7719f40601bdc59c72de428210fe56812c73911" translate="yes" xml:space="preserve">
          <source>The syntax table controls the interpretation of characters, so these functions can be used for Lisp expressions when in Lisp mode and for C expressions when in C mode. See &lt;a href=&quot;list-motion#List-Motion&quot;&gt;List Motion&lt;/a&gt;, for convenient higher-level functions for moving over balanced expressions.</source>
          <target state="translated">構文テーブルは文字の解釈を制御するため、これらの関数は、Lispモードの場合はLisp式に、Cモードの場合はC式に使用できます。バランスの取れた式を移動するための便利な高レベル関数については、&lt;a href=&quot;list-motion#List-Motion&quot;&gt;リストモーションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1d3dd35ac27520d192421173419189f92bfde5f7" translate="yes" xml:space="preserve">
          <source>The syntax table controls word and list parsing.</source>
          <target state="translated">構文テーブルは、単語とリストの解析を制御します。</target>
        </trans-unit>
        <trans-unit id="1b828fe7a14532d3214216229166278069ec53be" translate="yes" xml:space="preserve">
          <source>The tab character (character code 9) displays as whitespace stretching up to the next tab stop column. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Text-Display.html#Text-Display&quot;&gt;Text Display&lt;/a&gt; in</source>
          <target state="translated">タブ文字（文字コード9）は、次のタブストップ列まで伸びる空白として表示されます。の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Text-Display.html#Text-Display&quot;&gt;テキスト表示&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="4cdb77457b03ae8e4189510caa2d2cd8affcf775" translate="yes" xml:space="preserve">
          <source>The tail of the list, &lt;var&gt;item-property-list&lt;/var&gt;, has the form of a property list which contains other information.</source>
          <target state="translated">リストの末尾である &lt;var&gt;item-property-list&lt;/var&gt; は、他の情報を含むプロパティリストの形式になっています。</target>
        </trans-unit>
        <trans-unit id="7527554605fcb9db76071476569c6f6b0cf4a1ce" translate="yes" xml:space="preserve">
          <source>The term &lt;em&gt;function&lt;/em&gt; refers to all Emacs functions, whether written in Lisp or C. See &lt;a href=&quot;function-type#Function-Type&quot;&gt;Function Type&lt;/a&gt;, for information about the functions written in Lisp.</source>
          <target state="translated">&lt;em&gt;関数&lt;/em&gt;という用語は、Lispで書かれているかCで書かれているかにかかわらず、すべてのEmacs&lt;em&gt;関数を&lt;/em&gt;指します。Lispで書かれた関数については、&lt;a href=&quot;function-type#Function-Type&quot;&gt;関数タイプを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bd8132ad5a485b9ab38224ae63509adce1e85797" translate="yes" xml:space="preserve">
          <source>The terminal and keyboard coding systems used on the terminal. See &lt;a href=&quot;terminal-i_002fo-encoding#Terminal-I_002fO-Encoding&quot;&gt;Terminal I/O Encoding&lt;/a&gt;.</source>
          <target state="translated">端末および端末で使用されるキーボードコーディングシステム。&lt;a href=&quot;terminal-i_002fo-encoding#Terminal-I_002fO-Encoding&quot;&gt;ターミナルI / Oエンコーディングを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6ad03be7d14630f60e2cb6b2a4f58289b95b8877" translate="yes" xml:space="preserve">
          <source>The terminal output functions send output to a text terminal, or keep track of output sent to the terminal. The variable &lt;code&gt;baud-rate&lt;/code&gt; tells you what Emacs thinks is the output speed of the terminal.</source>
          <target state="translated">端末出力機能は、出力をテキスト端末に送信するか、端末に送信された出力を追跡します。可変 &lt;code&gt;baud-rate&lt;/code&gt; は、Emacsが端末の出力速度であると考えるものを示します。</target>
        </trans-unit>
        <trans-unit id="3a63395bf693f4ea5dbf2a2a8a31fd4771954d08" translate="yes" xml:space="preserve">
          <source>The terms &lt;em&gt;line height&lt;/em&gt; and &lt;em&gt;canonical character height&lt;/em&gt; are sometimes used instead of &amp;ldquo;default character height&amp;rdquo;. Similarly, the terms &lt;em&gt;column width&lt;/em&gt; and &lt;em&gt;canonical character width&lt;/em&gt; are used instead of &amp;ldquo;default character width&amp;rdquo;.</source>
          <target state="translated">「デフォルトの文字の高さ」の代わりに、&lt;em&gt;行の高さ&lt;/em&gt;と&lt;em&gt;正規の文字の高&lt;/em&gt;&lt;em&gt;さ&lt;/em&gt;という用語が使用&lt;em&gt;さ&lt;/em&gt;れることがあります。同様に、「デフォルトの文字幅」の代わりに、&lt;em&gt;列幅&lt;/em&gt;と&lt;em&gt;正規文字幅&lt;/em&gt;という用語が使用されます。</target>
        </trans-unit>
        <trans-unit id="4e683c537d7a88f401925ed633251e10fa4e0d2a" translate="yes" xml:space="preserve">
          <source>The terms used herein, such as IV (Initialization Vector), require some familiarity with cryptography and will not be defined in detail. Please consult &lt;a href=&quot;https://www.gnutls.org/&quot;&gt;https://www.gnutls.org/&lt;/a&gt; for specific documentation which may help you understand the terminology and structure of the GnuTLS library.</source>
          <target state="translated">IV（Initialization Vector）など、ここで使用される用語は、暗号化にある程度精通している必要があり、詳細には定義されません。GnuTLSライブラリの用語と構造を理解するのに役立つ可能性のある特定のドキュメントについては、&lt;a href=&quot;https://www.gnutls.org/&quot;&gt;https：//www.gnutls.org/&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6650dc3f7c947a7cc0f8b1e2e8887236711ab190" translate="yes" xml:space="preserve">
          <source>The test for an existing file, when &lt;var&gt;mustbenew&lt;/var&gt; is &lt;code&gt;excl&lt;/code&gt;, uses a special system feature. At least for files on a local disk, there is no chance that some other program could create a file of the same name before Emacs does, without Emacs&amp;rsquo;s noticing.</source>
          <target state="translated">&lt;var&gt;mustbenew&lt;/var&gt; が &lt;code&gt;excl&lt;/code&gt; の場合、既存のファイルのテストでは、特別なシステム機能が使用されます。少なくともローカルディスク上のファイルについては、Emacsが気付かないうちに、他のプログラムがEmacsよりも前に同じ名前のファイルを作成する可能性はありません。</target>
        </trans-unit>
        <trans-unit id="f4bec060d8606173e4510214d476948b1b689bd6" translate="yes" xml:space="preserve">
          <source>The text between point and the mark is known as &lt;em&gt;the region&lt;/em&gt;. Various functions operate on text delimited by point and the mark, but only those functions specifically related to the region itself are described here.</source>
          <target state="translated">ポイントとマークの間のテキストは&lt;em&gt;、領域&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。ポイントとマークで区切られたテキストに対してさまざまな機能が動作しますが、ここでは特に領域自体に関連する機能についてのみ説明します。</target>
        </trans-unit>
        <trans-unit id="427235673649693cef34eec5a1c49c535c367214" translate="yes" xml:space="preserve">
          <source>The text in the minibuffer always starts with the &lt;em&gt;prompt string&lt;/em&gt;, the text that was specified by the program that is using the minibuffer to tell the user what sort of input to type. This text is marked read-only so you won&amp;rsquo;t accidentally delete or change it. It is also marked as a field (see &lt;a href=&quot;fields#Fields&quot;&gt;Fields&lt;/a&gt;), so that certain motion functions, including &lt;code&gt;beginning-of-line&lt;/code&gt;, &lt;code&gt;forward-word&lt;/code&gt;, &lt;code&gt;forward-sentence&lt;/code&gt;, and &lt;code&gt;forward-paragraph&lt;/code&gt;, stop at the boundary between the prompt and the actual text.</source>
          <target state="translated">ミニバッファ内のテキストは、常に&lt;em&gt;プロンプト文字列&lt;/em&gt;で始まります。これは、ミニバッファを使用して入力する入力の種類をユーザーに通知するプログラムによって指定されたテキストです。このテキストは読み取り専用としてマークされているため、誤って削除したり変更したりすることはありません。また、フィールドとしてマークされているため（「&lt;a href=&quot;fields#Fields&quot;&gt;フィールド」を&lt;/a&gt;参照）、 &lt;code&gt;beginning-of-line&lt;/code&gt; 、 &lt;code&gt;forward-word&lt;/code&gt; 、 &lt;code&gt;forward-sentence&lt;/code&gt; 、 &lt;code&gt;forward-paragraph&lt;/code&gt; などの特定のモーション機能は、プロンプトと実際のテキストの境界で停止します。</target>
        </trans-unit>
        <trans-unit id="e254c01685b37e41ab942a41fbf59829e6d11ec6" translate="yes" xml:space="preserve">
          <source>The text of the indirect buffer is always identical to the text of its base buffer; changes made by editing either one are visible immediately in the other. This includes the text properties as well as the characters themselves.</source>
          <target state="translated">間接バッファのテキストは常にベースバッファのテキストと同じです。これには、文字そのものだけでなく、テキストのプロパティも含まれます。</target>
        </trans-unit>
        <trans-unit id="af246ddc000534af5859563e36f5153516e93316" translate="yes" xml:space="preserve">
          <source>The text properties &lt;code&gt;front-sticky&lt;/code&gt; and &lt;code&gt;rear-nonsticky&lt;/code&gt;, when used, take precedence over the default &lt;var&gt;nonstickiness&lt;/var&gt; specified in &lt;code&gt;text-property-default-nonsticky&lt;/code&gt;.</source>
          <target state="translated">テキストプロパティ &lt;code&gt;front-sticky&lt;/code&gt; および &lt;code&gt;rear-nonsticky&lt;/code&gt; を使用すると、 &lt;code&gt;text-property-default-nonsticky&lt;/code&gt; で指定されたデフォルトの &lt;var&gt;nonstickiness&lt;/var&gt; 粘着性よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="61de37a77d48c5a03418142f4c57cbd435c8202a" translate="yes" xml:space="preserve">
          <source>The text properties in &lt;code&gt;minibuffer-prompt-properties&lt;/code&gt; are applied to the prompt. By default, this property list defines a face to use for the prompt. This face, if present, is applied to the end of the face list and merged before display.</source>
          <target state="translated">&lt;code&gt;minibuffer-prompt-properties&lt;/code&gt; のテキストプロパティがプロンプトに適用されます。デフォルトでは、このプロパティリストはプロンプトに使用する面を定義します。この面が存在する場合は、面リストの最後に適用され、表示前に結合されます。</target>
        </trans-unit>
        <trans-unit id="53d1c0b3638f705814caf89c18a7ce3da885e071" translate="yes" xml:space="preserve">
          <source>The text size of any frame can be set and retrieved with the help of the &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; frame parameters (see &lt;a href=&quot;size-parameters#Size-Parameters&quot;&gt;Size Parameters&lt;/a&gt;). The text size of the initial frame can be also set with the help of an X-style geometry specification. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Invocation.html#Emacs-Invocation&quot;&gt;Command Line Arguments for Emacs Invocation&lt;/a&gt; in</source>
          <target state="translated">フレームのテキストサイズは、 &lt;code&gt;height&lt;/code&gt; と &lt;code&gt;width&lt;/code&gt; フレームパラメータを使用して設定および取得できます（&lt;a href=&quot;size-parameters#Size-Parameters&quot;&gt;サイズパラメータを&lt;/a&gt;参照）。初期フレームのテキストサイズは、Xスタイルのジオメトリ仕様を使用して設定することもできます。参照してください。&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Invocation.html#Emacs-Invocation&quot;&gt;Emacsの起動のためのコマンドライン引数を&lt;/a&gt;中</target>
        </trans-unit>
        <trans-unit id="c67ee1668cafc5069fd19fd9ac4ce5d1dfafd95a" translate="yes" xml:space="preserve">
          <source>The text&amp;rsquo;s start position in the buffer.</source>
          <target state="translated">バッファ内のテキストの開始位置。</target>
        </trans-unit>
        <trans-unit id="459ecfaa7406a56efb8cf84eab33df64259674fe" translate="yes" xml:space="preserve">
          <source>The third argument &lt;var&gt;keep-time&lt;/var&gt; non-&lt;code&gt;nil&lt;/code&gt; means to preserve the modification time of the copied files. A prefix arg makes &lt;var&gt;keep-time&lt;/var&gt; non-&lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">第三引数 &lt;var&gt;keep-time&lt;/var&gt; 非 &lt;code&gt;nil&lt;/code&gt; のコピーされたファイルの修正時刻を保存するための手段。プレフィックスargは、 &lt;var&gt;keep-time&lt;/var&gt; 非 &lt;code&gt;nil&lt;/code&gt; にします。</target>
        </trans-unit>
        <trans-unit id="da9ba46202c97f906aff04419daf0a2467b172a5" translate="yes" xml:space="preserve">
          <source>The third element is the window selected at the time the parameter was created. If this function deletes &lt;var&gt;window&lt;/var&gt;, it subsequently tries to reselect the window named by that element.</source>
          <target state="translated">3番目の要素は、パラメーターの作成時に選択されたウィンドウです。この関数が &lt;var&gt;window&lt;/var&gt; 削除すると、その後、その要素で指定されたウィンドウを再選択しようとします。</target>
        </trans-unit>
        <trans-unit id="290b74a62fe3a2fe85d724d61465dc891525fd6f" translate="yes" xml:space="preserve">
          <source>The third element, &lt;var&gt;case-fold&lt;/var&gt;, specifies the value of &lt;code&gt;font-lock-keywords-case-fold-search&lt;/code&gt;. If it is non-&lt;code&gt;nil&lt;/code&gt;, Font Lock mode ignores case during search-based fontification.</source>
          <target state="translated">3番目の要素 &lt;var&gt;case-fold&lt;/var&gt; は、 &lt;code&gt;font-lock-keywords-case-fold-search&lt;/code&gt; の値を指定します。それが非であれば &lt;code&gt;nil&lt;/code&gt; に、フォントロックモードは、検索ベースのフォント表示化の際にケースを無視します。</target>
        </trans-unit>
        <trans-unit id="a0049f036ce91322d4b97e568763827ed24c4fa6" translate="yes" xml:space="preserve">
          <source>The third element, &lt;var&gt;real-binding&lt;/var&gt;, can be the command to execute (in which case you get a normal menu item). It can also be a keymap, which will result in a submenu. Finally, it can be &lt;code&gt;nil&lt;/code&gt;, in which case you will get a non-selectable menu item. This is mostly useful when creating separator lines and the like.</source>
          <target state="translated">3番目の要素である &lt;var&gt;real-binding&lt;/var&gt; は、実行するコマンドにすることができます（この場合、通常のメニュー項目が表示されます）。キーマップにすることもでき、サブメニューになります。最後に、 &lt;code&gt;nil&lt;/code&gt; にすることもできます。その場合、選択できないメニュー項目が表示されます。これは、区切り線などを作成するときに最も役立ちます。</target>
        </trans-unit>
        <trans-unit id="5ded74e35ae11b189414eb3a2feeeaf0372642b2" translate="yes" xml:space="preserve">
          <source>The third of these hooks is run when a &lt;em&gt;window selection change&lt;/em&gt; has selected another window since the last redisplay.</source>
          <target state="translated">これらのフックの3番目は、&lt;em&gt;ウィンドウ選択の変更により&lt;/em&gt;、最後の再表示以降に別のウィンドウが選択されたときに実行されます。</target>
        </trans-unit>
        <trans-unit id="c89651a099ca91af6c8a8b83f402ae4da806d1ff" translate="yes" xml:space="preserve">
          <source>The third part of the pattern matches the whitespace that follows the end of a sentence: the end of a line (optionally with a space), or a tab, or two spaces. The double backslashes mark the parentheses and vertical bars as regular expression syntax; the parentheses delimit a group and the vertical bars separate alternatives. The dollar sign is used to match the end of a line.</source>
          <target state="translated">パターンの 3 番目の部分は、文末の後に続く空白にマッチします:行末(空白を入れることも可能)、タブ、または 2 つの空白。二重バックスラッシュは、括弧と縦棒を正規表現構文としてマークします。ドル記号は行末と一致させるために使用されます。</target>
        </trans-unit>
        <trans-unit id="607c3d642b7b987d71b42da79930af648e956246" translate="yes" xml:space="preserve">
          <source>The three Lisp modes (Lisp mode, Emacs Lisp mode, and Lisp Interaction mode) have more features than Text mode and the code is correspondingly more complicated. Here are excerpts from</source>
          <target state="translated">Lispモード(Lispモード、Emacs Lispモード、Lispインタラクションモード)の3つのLispモードは、Textモードよりも多くの機能を持っており、それに対応してコードが複雑になっています。以下は、以下からの抜粋です。</target>
        </trans-unit>
        <trans-unit id="45ee5df28937c07f3548f70fd6cc8c94bf25c3ce" translate="yes" xml:space="preserve">
          <source>The three modes for Lisp share much of their code. For instance, each calls the following function to set various variables:</source>
          <target state="translated">Lispの3つのモードはコードの多くを共有しています。例えば、それぞれが以下のような関数を呼び出して様々な変数を設定しています。</target>
        </trans-unit>
        <trans-unit id="54870091d56fd5e724ee385ddc157eb207f13d76" translate="yes" xml:space="preserve">
          <source>The time at which the event occurred, as an integer number of milliseconds since a system-dependent initial time.</source>
          <target state="translated">イベントが発生した時刻を、システム依存の初期時刻からミリ秒単位で整数化したもの。</target>
        </trans-unit>
        <trans-unit id="1ebfb539c64783c4344442794aee02ad7006a6f2" translate="yes" xml:space="preserve">
          <source>The time at which the event occurred, in milliseconds. On some toolkits, including GTK+, Emacs cannot extract this data, so the value is always &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">イベントが発生した時刻（ミリ秒単位）。GTK +を含む一部のツールキットでは、Emacsはこのデータを抽出できないため、値は常に &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="98e57126dedf2d6400ffdfdef20aa57a4ca36ef3" translate="yes" xml:space="preserve">
          <source>The time elapsed since the process started, as a Lisp timestamp.</source>
          <target state="translated">プロセスが開始されてからの経過時間を Lisp のタイムスタンプで表します。</target>
        </trans-unit>
        <trans-unit id="00b925b3b99613c5ebaf63a3e99e731129a59a23" translate="yes" xml:space="preserve">
          <source>The time of last access as a Lisp timestamp (&lt;code&gt;file-attribute-access-time&lt;/code&gt;). The timestamp is in the style of &lt;code&gt;current-time&lt;/code&gt; (see &lt;a href=&quot;time-of-day#Time-of-Day&quot;&gt;Time of Day&lt;/a&gt;) and is truncated to that of the filesystem&amp;rsquo;s timestamp resolution; for example, on some FAT-based filesystems, only the date of last access is recorded, so this time will always hold the midnight of the day of the last access.</source>
          <target state="translated">Lispタイムスタンプとしての最後のアクセスの時刻（ &lt;code&gt;file-attribute-access-time&lt;/code&gt; ）。タイムスタンプは &lt;code&gt;current-time&lt;/code&gt; スタイルであり（&lt;a href=&quot;time-of-day#Time-of-Day&quot;&gt;時刻を&lt;/a&gt;参照）、ファイルシステムのタイムスタンプ解決のスタイルに切り捨てられます。たとえば、一部のFATベースのファイルシステムでは、最後のアクセスの日付のみが記録されるため、この時間は常に最後のアクセスの日の真夜中を保持します。</target>
        </trans-unit>
        <trans-unit id="96f255ff11207f96a6ff4be345f0df83a02d827c" translate="yes" xml:space="preserve">
          <source>The time of last modification as a Lisp timestamp (&lt;code&gt;file-attribute-modification-time&lt;/code&gt;). This is the last time when the file&amp;rsquo;s contents were modified.</source>
          <target state="translated">Lispタイムスタンプとしての最後の変更の時刻（ &lt;code&gt;file-attribute-modification-time&lt;/code&gt; ）。ファイルの内容が変更されたのはこれが最後です。</target>
        </trans-unit>
        <trans-unit id="7647d2bb474bf5d47880005e9fa4aa2091b44379" translate="yes" xml:space="preserve">
          <source>The time of last status change as a Lisp timestamp (&lt;code&gt;file-attribute-status-change-time&lt;/code&gt;). This is the time of the last change to the file&amp;rsquo;s access mode bits, its owner and group, and other information recorded in the filesystem for the file, beyond the file&amp;rsquo;s contents.</source>
          <target state="translated">Lispタイムスタンプとしての最後のステータス変更の時刻（ &lt;code&gt;file-attribute-status-change-time&lt;/code&gt; ）。これは、ファイルのアクセスモードビット、その所有者とグループ、およびファイルの内容を超えてファイルのファイルシステムに記録されたその他の情報が最後に変更された時刻です。</target>
        </trans-unit>
        <trans-unit id="24c20ed315222312a2625d91bebf7c20d8b009b0" translate="yes" xml:space="preserve">
          <source>The time to use &lt;code&gt;make-variable-buffer-local&lt;/code&gt; is when it is crucial that no two buffers ever share the same binding. For example, when a variable is used for internal purposes in a Lisp program which depends on having separate values in separate buffers, then using &lt;code&gt;make-variable-buffer-local&lt;/code&gt; can be the best solution.</source>
          <target state="translated">&lt;code&gt;make-variable-buffer-local&lt;/code&gt; を使用するのは、2つのバッファーが同じバインディングを共有しないことが重要な場合です。たとえば、変数がLispプログラムの内部目的で使用され、個別のバッファに個別の値があることに依存している場合、 &lt;code&gt;make-variable-buffer-local&lt;/code&gt; を使用することが最善の解決策になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="c627015afbabd38bf35740a5ee9f2c3cb23dc48d" translate="yes" xml:space="preserve">
          <source>The time when the buffer was last auto-saved.</source>
          <target state="translated">バッファが最後に自動保存された時刻。</target>
        </trans-unit>
        <trans-unit id="1e0d0c1f4808016965104728546b5791c182f028" translate="yes" xml:space="preserve">
          <source>The time when the process was started, as a Lisp timestamp.</source>
          <target state="translated">プロセスが開始された時刻をLispのタイムスタンプとして指定します。</target>
        </trans-unit>
        <trans-unit id="802393edc2b9a42653a80bc4d4ec3e5e5f24f1f4" translate="yes" xml:space="preserve">
          <source>The timeout time in milliseconds since the display of the notification at which the notification should automatically close. If -1, the notification&amp;rsquo;s expiration time is dependent on the notification server&amp;rsquo;s settings, and may vary for the type of notification. If 0, the notification never expires. Default value is -1.</source>
          <target state="translated">通知が自動的に閉じる必要がある通知の表示からのミリ秒単位のタイムアウト時間。-1の場合、通知の有効期限は通知サーバーの設定によって異なり、通知の種類によって異なる場合があります。0の場合、通知は期限切れになりません。デフォルト値は-1です。</target>
        </trans-unit>
        <trans-unit id="5f4688992c1cae810c4b2847d1acc4a25d6a81f0" translate="yes" xml:space="preserve">
          <source>The title (only on a window system) or the name of the selected frame. See &lt;a href=&quot;basic-parameters#Basic-Parameters&quot;&gt;Basic Parameters&lt;/a&gt;.</source>
          <target state="translated">タイトル（ウィンドウシステムのみ）または選択したフレームの名前。&lt;a href=&quot;basic-parameters#Basic-Parameters&quot;&gt;基本パラメータを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="00a751eb6540114fecfd6321e7957f9e5fe58259" translate="yes" xml:space="preserve">
          <source>The title of the notification. If &lt;var&gt;title&lt;/var&gt; is a string, it is displayed in a larger font immediately above the body text. The title text can be up to 63 characters long; longer text will be truncated.</source>
          <target state="translated">通知のタイトル。 &lt;var&gt;title&lt;/var&gt; が文字列の場合、本文のすぐ上に大きなフォントで表示されます。タイトルテキストの長さは最大63文字です。長いテキストは切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="fb5b566b508b98eab0c7c5b9ce2a802059ff0fbe" translate="yes" xml:space="preserve">
          <source>The toggle command takes one optional (prefix) argument. If called interactively with no argument it toggles the mode on or off. A positive prefix argument enables the mode, any other prefix argument disables it. From Lisp, an argument of &lt;code&gt;toggle&lt;/code&gt; toggles the mode, whereas an omitted or &lt;code&gt;nil&lt;/code&gt; argument enables the mode. This makes it easy to enable the minor mode in a major mode hook, for example. If &lt;var&gt;doc&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, the macro supplies a default documentation string explaining the above.</source>
          <target state="translated">トグルコマンドは、1つのオプションの（プレフィックス）引数を取ります。引数なしでインタラクティブに呼び出されると、モードのオンとオフが切り替わります。正のプレフィックス引数はモードを有効にし、他のプレフィックス引数はモードを無効にします。Lispから、 &lt;code&gt;toggle&lt;/code&gt; の引数はモードを切り替えますが、省略または &lt;code&gt;nil&lt;/code&gt; 引数はモードを有効にします。これにより、たとえばメジャーモードフックでマイナーモードを簡単に有効にできます。場合 &lt;var&gt;doc&lt;/var&gt; ある &lt;code&gt;nil&lt;/code&gt; の上記の説明は、マクロ用品既定のドキュメントの文字列。</target>
        </trans-unit>
        <trans-unit id="ee396be1bc2edeec5a010e520887af01b2c0ec1a" translate="yes" xml:space="preserve">
          <source>The tool bar contents are controlled by a menu keymap attached to a fake function key called</source>
          <target state="translated">と呼ばれる偽のファンクションキーに付けられたメニューキーマップによって、ツールバーの内容が制御されます。</target>
        </trans-unit>
        <trans-unit id="c8e2bf3f449141de6022307bd19ac291ae6a42dd" translate="yes" xml:space="preserve">
          <source>The top edge of the window, measured in lines, relative to the topmost line (line 0) of the window&amp;rsquo;s native frame.</source>
          <target state="translated">ウィンドウのネイティブフレームの最上部の線（行0）を基準にして、線で測定されたウィンドウの上端。</target>
        </trans-unit>
        <trans-unit id="80ecb166938baeaaabb20112d9fe96a939c773d4" translate="yes" xml:space="preserve">
          <source>The top level variable, mode-line-format.</source>
          <target state="translated">最上位レベルの変数、mode-line-format。</target>
        </trans-unit>
        <trans-unit id="10fcd8fbdfa1f56f99b62be921ede3801375f31b" translate="yes" xml:space="preserve">
          <source>The top-level forms in the file defining the mode should be written so that they may be evaluated more than once without adverse consequences. For instance, use &lt;code&gt;defvar&lt;/code&gt; or &lt;code&gt;defcustom&lt;/code&gt; to set mode-related variables, so that they are not reinitialized if they already have a value (see &lt;a href=&quot;defining-variables#Defining-Variables&quot;&gt;Defining Variables&lt;/a&gt;).</source>
          <target state="translated">モードを定義するファイルの最上位フォームは、悪影響を与えることなく複数回評価できるように作成する必要があります。たとえば、 &lt;code&gt;defvar&lt;/code&gt; または &lt;code&gt;defcustom&lt;/code&gt; を使用してモード関連の変数を設定し、それらがすでに値を持っている場合に再初期化されないようにします（&lt;a href=&quot;defining-variables#Defining-Variables&quot;&gt;変数の定義を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e0bf6b79b51361600ab0d2d09d4929d9f08d380a" translate="yes" xml:space="preserve">
          <source>The total height of each display line consists of the height of the contents of the line, plus optional additional vertical line spacing above or below the display line.</source>
          <target state="translated">各表示行の総高さは、その行の内容の高さに、表示行の上または下にオプションで追加の垂直行間隔を加えたものである。</target>
        </trans-unit>
        <trans-unit id="31d0e82b6a88e74d0b24a216385d5fc85a5cec98" translate="yes" xml:space="preserve">
          <source>The total length, in pixels, of the scroll bar. On some toolkits, including GTK+, Emacs cannot extract this data, so the value is always &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">スクロールバーの全長（ピクセル単位）。GTK +を含む一部のツールキットでは、Emacsはこのデータを抽出できないため、値は常に &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b25cf92e537fbc457f73f8b8ccd34da35b4b1e0f" translate="yes" xml:space="preserve">
          <source>The total number of cons cells that have been allocated so far in this Emacs session.</source>
          <target state="translated">このEmacsセッションでこれまでに割り当てられたconsセルの総数。</target>
        </trans-unit>
        <trans-unit id="a994cddf9b826ab8c3b89d449d09ae2a9b73e706" translate="yes" xml:space="preserve">
          <source>The total number of floats that have been allocated so far in this Emacs session.</source>
          <target state="translated">このEmacsセッションでこれまでに割り当てられたフロートの総数。</target>
        </trans-unit>
        <trans-unit id="fdcf07b9e5a059b00bbaae5593cd683d00025222" translate="yes" xml:space="preserve">
          <source>The total number of intervals that have been allocated so far in this Emacs session.</source>
          <target state="translated">このEmacsセッションでこれまでに割り当てられた間隔の総数。</target>
        </trans-unit>
        <trans-unit id="614654e18f37f5b5f422dea3bbdcbb3a165f297e" translate="yes" xml:space="preserve">
          <source>The total number of string characters that have been allocated so far in this session.</source>
          <target state="translated">このセッションでこれまでに割り当てられた文字列の総数。</target>
        </trans-unit>
        <trans-unit id="abb717f47f8933d7923fb2b52cfb28bd464f36e9" translate="yes" xml:space="preserve">
          <source>The total number of strings that have been allocated so far in this Emacs session.</source>
          <target state="translated">このEmacsセッションでこれまでに割り当てられた文字列の総数。</target>
        </trans-unit>
        <trans-unit id="e9b8f06e1c94173e7b8d8a404718b1b724454813" translate="yes" xml:space="preserve">
          <source>The total number of symbols that have been allocated so far in this Emacs session.</source>
          <target state="translated">このEmacsセッションでこれまでに割り当てられたシンボルの総数。</target>
        </trans-unit>
        <trans-unit id="27a10a08d892e6a91c5cf07d46fe77aa2af1a3fa" translate="yes" xml:space="preserve">
          <source>The total number of vector cells that have been allocated so far in this Emacs session. This includes vector-like objects such as markers and overlays, plus certain objects not visible to users.</source>
          <target state="translated">このEmacsセッションでこれまでに割り当てられたベクターセルの総数。これには、マーカーやオーバーレイなどのベクターライクなオブジェクトと、ユーザーには見えないオブジェクトが含まれます。</target>
        </trans-unit>
        <trans-unit id="441a3e680eaafec796a9e2a7060e2a280535485a" translate="yes" xml:space="preserve">
          <source>The total size of all string data in bytes.</source>
          <target state="translated">すべての文字列データの合計サイズをバイト単位で表示します。</target>
        </trans-unit>
        <trans-unit id="c7d14b13c564dd0ff16404189a2b255627fffdf3" translate="yes" xml:space="preserve">
          <source>The total width and height of the window measured in pixels.</source>
          <target state="translated">ウィンドウの幅と高さの合計をピクセル単位で測定したものです。</target>
        </trans-unit>
        <trans-unit id="1ccf2de5b65512cde61e59a9ed444c1197414f54" translate="yes" xml:space="preserve">
          <source>The total width and height of the window, measured in columns and lines respectively. The values include scroll bars and fringes, dividers and/or the separator line on the right of the window (if any).</source>
          <target state="translated">ウィンドウの幅と高さの合計を、それぞれ列と線で測定します。この値には、スクロールバーやフリンジ、仕切り線、および/またはウィンドウの右側の区切り線(あれば)が含まれます。</target>
        </trans-unit>
        <trans-unit id="bc966a52b3595d2fcaff1f0ffe9ad07780edb9e3" translate="yes" xml:space="preserve">
          <source>The translation table &lt;var&gt;table&lt;/var&gt; is a string or a char-table; &lt;code&gt;(aref &lt;var&gt;table&lt;/var&gt; &lt;var&gt;ochar&lt;/var&gt;)&lt;/code&gt; gives the translated character corresponding to &lt;var&gt;ochar&lt;/var&gt;. If &lt;var&gt;table&lt;/var&gt; is a string, any characters with codes larger than the length of &lt;var&gt;table&lt;/var&gt; are not altered by the translation.</source>
          <target state="translated">変換テーブル &lt;var&gt;table&lt;/var&gt; は、文字列または文字テーブルです。 &lt;code&gt;(aref &lt;var&gt;table&lt;/var&gt; &lt;var&gt;ochar&lt;/var&gt;)&lt;/code&gt; は、 &lt;var&gt;ochar&lt;/var&gt; に対応する翻訳された文字を示します。場合 &lt;var&gt;table&lt;/var&gt; 、文字列であり、の長さよりも大きい符号を持つ任意の文字 &lt;var&gt;table&lt;/var&gt; 変換によって変更されません。</target>
        </trans-unit>
        <trans-unit id="397c955cc662600cfb57e3c9c25331b73b22fe24" translate="yes" xml:space="preserve">
          <source>The two constructs described next are mostly identical to &lt;code&gt;with-temp-buffer-window&lt;/code&gt; but differ from it as specified:</source>
          <target state="translated">次に説明する2つの構成は、 &lt;code&gt;with-temp-buffer-window&lt;/code&gt; とほとんど同じですが、指定されているとおりに異なります。</target>
        </trans-unit>
        <trans-unit id="04a05211cdc885470090771446510a238e8b75f7" translate="yes" xml:space="preserve">
          <source>The type &lt;var&gt;type&lt;/var&gt; was defined.</source>
          <target state="translated">タイプ &lt;var&gt;type&lt;/var&gt; が定義されました。</target>
        </trans-unit>
        <trans-unit id="9989a67db7c219bdacd778e97cc75a29828fcbdc" translate="yes" xml:space="preserve">
          <source>The type of connection. Options are:</source>
          <target state="translated">接続の種類です。オプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="10723b34477adf1a54c090dcb75c1b850f7f8519" translate="yes" xml:space="preserve">
          <source>The type of flow control to use for this connection, which is either &lt;code&gt;nil&lt;/code&gt; (don&amp;rsquo;t use flow control), the symbol &lt;code&gt;hw&lt;/code&gt; (use RTS/CTS hardware flow control), or the symbol &lt;code&gt;sw&lt;/code&gt; (use XON/XOFF software flow control). If &lt;var&gt;flowcontrol&lt;/var&gt; is not given, it defaults to no flow control.</source>
          <target state="translated">この接続に使用するフロー制御のタイプ &lt;code&gt;nil&lt;/code&gt; （フロー制御を使用しない）、記号 &lt;code&gt;hw&lt;/code&gt; （RTS / CTSハードウェアフロー制御を使用）、または記号 &lt;code&gt;sw&lt;/code&gt; （XON / XOFFソフトウェアフロー制御を使用）のいずれかです。 。場合は &lt;var&gt;flowcontrol&lt;/var&gt; フロー制御なしに、デフォルト与えられていません。</target>
        </trans-unit>
        <trans-unit id="824546068f92ce5ea60e0deff376010de3e1fec4" translate="yes" xml:space="preserve">
          <source>The type of icon to use for this frame. If the value is a string, that specifies a file containing a bitmap to use; &lt;code&gt;nil&lt;/code&gt; specifies no icon (in which case the window manager decides what to show); any other non-&lt;code&gt;nil&lt;/code&gt; value specifies the default Emacs icon.</source>
          <target state="translated">このフレームに使用するアイコンのタイプ。値が文字列の場合、使用するビットマップを含むファイルを指定します。 &lt;code&gt;nil&lt;/code&gt; はアイコンを指定しません（この場合、ウィンドウマネージャーが何を表示するかを決定します）。その他の &lt;code&gt;nil&lt;/code&gt; 以外の値は、デフォルトのEmacsアイコンを指定します。</target>
        </trans-unit>
        <trans-unit id="77d40006d2d51026df28ce9827773f880edd24d6" translate="yes" xml:space="preserve">
          <source>The type of notification this is, a string. See the &lt;a href=&quot;https://developer.gnome.org/notification-spec/#categories&quot;&gt;Desktop Notifications Specification&lt;/a&gt; for a list of standard categories.</source>
          <target state="translated">これが通知のタイプ、文字列です。標準カテゴリのリストについては、&lt;a href=&quot;https://developer.gnome.org/notification-spec/#categories&quot;&gt;デスクトップ通知仕様&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="55bdf0d544649480b63a1172ccccf6ea3ae2d63d" translate="yes" xml:space="preserve">
          <source>The type slot should be a symbol or a type descriptor. If it&amp;rsquo;s a type descriptor, the symbol naming its type will be returned; &lt;a href=&quot;type-descriptors#Type-Descriptors&quot;&gt;Type Descriptors&lt;/a&gt;. Any other kind of object is returned as-is.</source>
          <target state="translated">タイプスロットは、シンボルまたはタイプ記述子である必要があります。タイプ記述子の場合、そのタイプに名前を付けるシンボルが返されます。&lt;a href=&quot;type-descriptors#Type-Descriptors&quot;&gt;タイプ記述子&lt;/a&gt;。その他の種類のオブジェクトはそのまま返されます。</target>
        </trans-unit>
        <trans-unit id="e025c62fbc48998b73600c44b54165169adc5d17" translate="yes" xml:space="preserve">
          <source>The type specializer, &lt;code&gt;(&lt;var&gt;arg&lt;/var&gt; &lt;var&gt;type&lt;/var&gt;)&lt;/code&gt;, can specify one of the &lt;em&gt;system types&lt;/em&gt; in the following list. When a parent type is specified, an argument whose type is any of its more specific child types, as well as grand-children, grand-grand-children, etc. will also be compatible.</source>
          <target state="translated">タイプ &lt;code&gt;(&lt;var&gt;arg&lt;/var&gt; &lt;var&gt;type&lt;/var&gt;)&lt;/code&gt; （arg &lt;var&gt;type&lt;/var&gt; ）は、次のリストの&lt;em&gt;システムタイプの&lt;/em&gt;1つを指定できます。親タイプが指定されている場合、そのタイプがより具体的な子タイプのいずれかである引数、および孫、孫なども互換性があります。</target>
        </trans-unit>
        <trans-unit id="918de08f5d10241b12396b2606b071d4bc53db4a" translate="yes" xml:space="preserve">
          <source>The type, height, and width of the cursor that was last displayed on this window.</source>
          <target state="translated">このウィンドウに最後に表示されたカーソルの種類、高さ、幅。</target>
        </trans-unit>
        <trans-unit id="813fe6c3982289dedb90eb513614087f1cf82291" translate="yes" xml:space="preserve">
          <source>The types in the previous section are used for general programming purposes, and most of them are common to most Lisp dialects. Emacs Lisp provides several additional data types for purposes connected with editing.</source>
          <target state="translated">前のセクションの型は一般的なプログラミング目的で使用され、そのほとんどはほとんどの Lisp 方言に共通しています。Emacs Lispには、編集に関連した目的のためにいくつかのデータ型が追加されています。</target>
        </trans-unit>
        <trans-unit id="e4129664d859d9f2877eb29408df21ab5cb6661f" translate="yes" xml:space="preserve">
          <source>The types of this window&amp;rsquo;s vertical and horizontal scroll bars.</source>
          <target state="translated">このウィンドウの垂直および水平スクロールバーのタイプ。</target>
        </trans-unit>
        <trans-unit id="4ebd8369f764b15f8731d7001594b37607f527c5" translate="yes" xml:space="preserve">
          <source>The underlying ACL implementation is platform-specific; on GNU/Linux and BSD, Emacs uses the POSIX ACL interface, while on MS-Windows Emacs emulates the POSIX ACL interface with native file security APIs.</source>
          <target state="translated">基礎となる ACL の実装はプラットフォーム固有のものです。GNU/Linux と BSD では Emacs は POSIX ACL インターフェースを使用しますが、MS-Windows では Emacs はネイティブのファイルセキュリティ API を使用して POSIX ACL インターフェースをエミュレートします。</target>
        </trans-unit>
        <trans-unit id="32e0037f866c0451ac34d2bce4ba7d40d8a695e5" translate="yes" xml:space="preserve">
          <source>The unibyte and multibyte text representations use different character codes. The valid character codes for unibyte representation range from 0 to &lt;code&gt;#xFF&lt;/code&gt; (255)&amp;mdash;the values that can fit in one byte. The valid character codes for multibyte representation range from 0 to &lt;code&gt;#x3FFFFF&lt;/code&gt;. In this code space, values 0 through &lt;code&gt;#x7F&lt;/code&gt; (127) are for</source>
          <target state="translated">ユニバイトとマルチバイトのテキスト表現は、異なる文字コードを使用します。ユニバイト表現の有効な文字コードの範囲は0〜 &lt;code&gt;#xFF&lt;/code&gt; （255）で、1バイトに収まる値です。マルチバイト表現の有効な文字コードの範囲は0〜 &lt;code&gt;#x3FFFFF&lt;/code&gt; です。このコードスペースでは、値0から &lt;code&gt;#x7F&lt;/code&gt; （127）は</target>
        </trans-unit>
        <trans-unit id="9cca45442a6da20dbdae7b6615f2dc10baadc419" translate="yes" xml:space="preserve">
          <source>The unit of heap space measurement, always equal to 1024 bytes.</source>
          <target state="translated">ヒープ空間の測定単位で、常に1024バイトに等しい。</target>
        </trans-unit>
        <trans-unit id="63b023b466e3bce22e9d5ba36aecbcf660e048b0" translate="yes" xml:space="preserve">
          <source>The upcase table maps each character into the corresponding upper case character.</source>
          <target state="translated">大文字テーブルは、各文字を対応する大文字にマッピングします。</target>
        </trans-unit>
        <trans-unit id="a0c17633f0138ef3e9286c2d1a5c0258bfdb10e0" translate="yes" xml:space="preserve">
          <source>The urgency level. It can be &lt;code&gt;low&lt;/code&gt;, &lt;code&gt;normal&lt;/code&gt;, or &lt;code&gt;critical&lt;/code&gt;.</source>
          <target state="translated">緊急度。それはすることができ &lt;code&gt;low&lt;/code&gt; 、 &lt;code&gt;normal&lt;/code&gt; 、または &lt;code&gt;critical&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6ce53fb4d208bc4c27337bdd863033417c703f3c" translate="yes" xml:space="preserve">
          <source>The use of a special variable as a formal argument in a function is discouraged. Doing so gives rise to unspecified behavior when lexical binding mode is enabled (it may use lexical binding sometimes, and dynamic binding other times).</source>
          <target state="translated">関数内の形式的な引数として特別な変数を使用することは推奨されません。そうすると、辞書的バインディングモードが有効になっているときには、不特定多数の動作が発生します(辞書的バインディングを使用することもあれば、動的バインディングを使用することもあります)。</target>
        </trans-unit>
        <trans-unit id="143e85103669e6f3a73e45520cffeb3311a2e64f" translate="yes" xml:space="preserve">
          <source>The use of numbered backups ultimately leads to a large number of backup versions, which must then be deleted. Emacs can do this automatically or it can ask the user whether to delete them.</source>
          <target state="translated">番号付きバックアップを使用すると、最終的には大量のバックアップバージョンが発生し、削除する必要があります。Emacsでは、自動的に削除することもできますし、ユーザーに削除するかどうかを尋ねることもできます。</target>
        </trans-unit>
        <trans-unit id="a8707423f159b173b39f4962f0556071463cb869" translate="yes" xml:space="preserve">
          <source>The use of the &lt;var&gt;debugger-args&lt;/var&gt; is that &lt;code&gt;debug&lt;/code&gt; displays the rest of its arguments at the top of the</source>
          <target state="translated">&lt;var&gt;debugger-args&lt;/var&gt; の使用は、 &lt;code&gt;debug&lt;/code&gt; が残りの引数をの上部に表示することです。</target>
        </trans-unit>
        <trans-unit id="511c6540e54c5649d62befa61b017dde79ffef3a" translate="yes" xml:space="preserve">
          <source>The user can add any key matching the specified key type, but you can give some keys a preferential treatment by specifying them with the &lt;code&gt;:options&lt;/code&gt; (see &lt;a href=&quot;variable-definitions#Variable-Definitions&quot;&gt;Variable Definitions&lt;/a&gt;). The specified keys will always be shown in the customize buffer (together with a suitable value), with a checkbox to include or exclude or disable the key/value pair from the alist. The user will not be able to edit the keys specified by the &lt;code&gt;:options&lt;/code&gt; keyword argument.</source>
          <target state="translated">ユーザーは、指定されたキータイプに一致する任意のキーを追加できますが、 &lt;code&gt;:options&lt;/code&gt; で指定することにより、一部のキーに優先的な処理を与えることができます（&lt;a href=&quot;variable-definitions#Variable-Definitions&quot;&gt;変数の定義を&lt;/a&gt;参照）。指定されたキーは常にカスタマイズバッファに（適切な値とともに）表示され、キーと値のペアをリストに含めるか、除外するか、無効にするチェックボックスが付いています。ユーザーは、 &lt;code&gt;:options&lt;/code&gt; キーワード引数で指定されたキーを編集できなくなります。</target>
        </trans-unit>
        <trans-unit id="fdfe999c9bdc85b3810a58353ece516fc9370b63" translate="yes" xml:space="preserve">
          <source>The user can type</source>
          <target state="translated">ユーザーは以下のように入力することができます。</target>
        </trans-unit>
        <trans-unit id="fd064556685bc85b9d72d2d84d2adeec46f6b9f6" translate="yes" xml:space="preserve">
          <source>The user option &lt;code&gt;display-buffer-alist&lt;/code&gt;.</source>
          <target state="translated">ユーザーオプション &lt;code&gt;display-buffer-alist&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="51ded933043196b29f2223baab0f1acb3d9183ff" translate="yes" xml:space="preserve">
          <source>The user option &lt;code&gt;display-buffer-base-action&lt;/code&gt;.</source>
          <target state="translated">ユーザーオプション &lt;code&gt;display-buffer-base-action&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2793d8b41a5fb22673ccbb20fb899bf671a14181" translate="yes" xml:space="preserve">
          <source>The user-level commands for using Imenu are described in the Emacs Manual (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html#Imenu&quot;&gt;Imenu&lt;/a&gt; in</source>
          <target state="translated">Imenuを使用するためのユーザーレベルのコマンドは、Emacsマニュアルで説明されています（の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html#Imenu&quot;&gt;Imenu&lt;/a&gt;を参照）。</target>
        </trans-unit>
        <trans-unit id="30be3069546127e24c5678d1a47150d319e9b5c5" translate="yes" xml:space="preserve">
          <source>The usual and simplest way is to set the variable &lt;code&gt;imenu-generic-expression&lt;/code&gt;:</source>
          <target state="translated">通常の最も簡単な方法は、変数 &lt;code&gt;imenu-generic-expression&lt;/code&gt; を設定することです。</target>
        </trans-unit>
        <trans-unit id="90c75b3bffda92eeaca86bfbbe99a7430c08eb6e" translate="yes" xml:space="preserve">
          <source>The usual conventions for displaying characters.</source>
          <target state="translated">文字を表示するための通常の慣例です。</target>
        </trans-unit>
        <trans-unit id="2bd44e25afda0f432266a4e8544ff3b09136787e" translate="yes" xml:space="preserve">
          <source>The usual effect of signaling an error is to terminate the command that is running and return immediately to the Emacs editor command loop. You can arrange to trap errors occurring in a part of your program by establishing an error handler, with the special form &lt;code&gt;condition-case&lt;/code&gt;. A simple example looks like this:</source>
          <target state="translated">エラーを通知する通常の効果は、実行中のコマンドを終了し、すぐにEmacsエディターのコマンドループに戻ることです。特別な形式の &lt;code&gt;condition-case&lt;/code&gt; -caseを使用してエラーハンドラーを確立することにより、プログラムの一部で発生するエラーをトラップするように調整できます。簡単な例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="bda6ef848c823990e6e54452a3858487c06e4809" translate="yes" xml:space="preserve">
          <source>The usual interface functions for visiting.</source>
          <target state="translated">訪問時の通常のインターフェイス機能。</target>
        </trans-unit>
        <trans-unit id="af1901f1654ae4b4ade44f3e4daa9e941c61b525" translate="yes" xml:space="preserve">
          <source>The usual menu keymap item properties, &lt;code&gt;:visible&lt;/code&gt;, &lt;code&gt;:enable&lt;/code&gt;, &lt;code&gt;:button&lt;/code&gt;, and &lt;code&gt;:filter&lt;/code&gt;, are useful in tool bar bindings and have their normal meanings. The &lt;var&gt;real-binding&lt;/var&gt; in the item must be a command, not a keymap; in other words, it does not work to define a tool bar icon as a prefix key.</source>
          <target state="translated">通常のメニューキーマップ項目のプロパティである &lt;code&gt;:visible&lt;/code&gt; 、 &lt;code&gt;:enable&lt;/code&gt; 、 &lt;code&gt;:button&lt;/code&gt; 、および &lt;code&gt;:filter&lt;/code&gt; は、ツールバーのバインドに役立ち、通常の意味を持ちます。アイテムの &lt;var&gt;real-binding&lt;/var&gt; は、キーマップではなくコマンドである必要があります。つまり、ツールバーアイコンをプレフィックスキーとして定義することはできません。</target>
        </trans-unit>
        <trans-unit id="ac47370c7e29666366c5084b597a830112308e12" translate="yes" xml:space="preserve">
          <source>The usual purpose of tracking mouse motion is to indicate on the screen the consequences of pushing or releasing a button at the current position.</source>
          <target state="translated">マウスの動きを追跡する通常の目的は、現在の位置でボタンを押したり離したりした結果を画面上に表示することです。</target>
        </trans-unit>
        <trans-unit id="4945884c017dad70b10d5d997fdc2f6a3086adf5" translate="yes" xml:space="preserve">
          <source>The usual read syntax for alphanumeric characters is a question mark followed by the character; thus, &amp;lsquo;</source>
          <target state="translated">英数字の通常の読み取り構文は、疑問符の後に文字が続きます。したがって、 '</target>
        </trans-unit>
        <trans-unit id="5b4827bb568bf80753c3882d75fd2ab2a82f4c4c" translate="yes" xml:space="preserve">
          <source>The usual reason to specify a documentation string for a type is to provide more information about the meanings of alternatives inside a &lt;code&gt;choice&lt;/code&gt; type or the parts of some other composite type.</source>
          <target state="translated">タイプのドキュメント文字列を指定する通常の理由は、 &lt;code&gt;choice&lt;/code&gt; タイプまたは他の複合タイプの一部内の代替の意味に関する詳細情報を提供するためです。</target>
        </trans-unit>
        <trans-unit id="93b29e680886ef3e32073a78d95db6b48a506c98" translate="yes" xml:space="preserve">
          <source>The usual regexp special characters are not special inside a character alternative. A completely different set of characters is special: &amp;lsquo;</source>
          <target state="translated">通常の正規表現の特殊文字は、代替文字内では特別ではありません。まったく異なる文字のセットは特別です： '</target>
        </trans-unit>
        <trans-unit id="d9d1876d8ad2be0bc6c8de7cd54c94dfc02c0053" translate="yes" xml:space="preserve">
          <source>The usual regular expression functions do backtracking when necessary to handle the &amp;lsquo;</source>
          <target state="translated">通常の正規表現関数は、 'を処理するために必要なときにバックトラックを実行します</target>
        </trans-unit>
        <trans-unit id="c019ba7cb944335d1fef89c7810b797ce8729a29" translate="yes" xml:space="preserve">
          <source>The usual role of a terminal-specific library is to enable special keys to send sequences that Emacs can recognize. It may also need to set or add to &lt;code&gt;input-decode-map&lt;/code&gt; if the Termcap or Terminfo entry does not specify all the terminal&amp;rsquo;s function keys. See &lt;a href=&quot;terminal-input#Terminal-Input&quot;&gt;Terminal Input&lt;/a&gt;.</source>
          <target state="translated">端末固有のライブラリの通常の役割は、Emacsが認識できるシーケンスを特別なキーが送信できるようにすることです。また、TermcapまたはTerminfoエントリで端末のすべてのファンクションキーが指定されていない場合は、 &lt;code&gt;input-decode-map&lt;/code&gt; を設定または追加する必要があります。&lt;a href=&quot;terminal-input#Terminal-Input&quot;&gt;端子入力を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d3392a5efb2e33159132ee8ca55dd0bd95184127" translate="yes" xml:space="preserve">
          <source>The usual use of this feature is to fill comments in programming language modes. If the function needs to fill a paragraph in the usual way, it can do so as follows:</source>
          <target state="translated">この機能の通常の使用法は、プログラミング言語モードでコメントを埋めることです。関数が通常の方法で段落を埋める必要がある場合は、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="ba8560d5e995fe38c893b74271adb5dbf50667f4" translate="yes" xml:space="preserve">
          <source>The usual way to change the value of a variable is with the special form &lt;code&gt;setq&lt;/code&gt;. When you need to compute the choice of variable at run time, use the function &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="translated">変数の値を変更する通常の方法は、特殊な形式の &lt;code&gt;setq&lt;/code&gt; を使用することです。実行時に変数の選択を計算する必要がある場合は、関数 &lt;code&gt;set&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="ad41ba273b5018a4ad09f4b5ea08e124af9c068c" translate="yes" xml:space="preserve">
          <source>The usual way to define a face is through the &lt;code&gt;defface&lt;/code&gt; macro. This macro associates a face name (a symbol) with a default &lt;em&gt;face spec&lt;/em&gt;. A face spec is a construct which specifies what attributes a face should have on any given terminal; for example, a face spec might specify one foreground color on high-color terminals, and a different foreground color on low-color terminals.</source>
          <target state="translated">面を定義する通常の方法は、 &lt;code&gt;defface&lt;/code&gt; マクロを使用することです。このマクロは、面名（シンボル）をデフォルトの&lt;em&gt;面仕様に&lt;/em&gt;関連付けます。フェーススペックは、任意の端末でフェースが持つべき属性を指定する構造です。たとえば、面の仕様では、高色の端子では1つの前景色を指定し、低色の端子では別の前景色を指定する場合があります。</target>
        </trans-unit>
        <trans-unit id="ab4be22e46f2537548bcdd8b14595a57667df9f7" translate="yes" xml:space="preserve">
          <source>The usual way to define the SMIE grammar of a language is by defining a new global variable that holds the precedence table by giving a set of BNF rules. For example, the grammar definition for a small Pascal-like language could look like:</source>
          <target state="translated">言語のSMIE文法を定義する通常の方法は、BNFルールのセットを与えて優先順位テーブルを保持する新しいグローバル変数を定義することです。例えば、小さなPascalのような言語の文法定義は次のようになります。</target>
        </trans-unit>
        <trans-unit id="ea823ab039487ce6c627239fb33b038961688356" translate="yes" xml:space="preserve">
          <source>The usual way to make a buffer-local binding is with &lt;code&gt;make-local-variable&lt;/code&gt;, which is what major mode commands typically use. This affects just the current buffer; all other buffers (including those yet to be created) will continue to share the default value unless they are explicitly given their own buffer-local bindings.</source>
          <target state="translated">バッファローカルバインディングを作成する通常の方法は、 &lt;code&gt;make-local-variable&lt;/code&gt; を使用することです。これは、メジャーモードコマンドが通常使用するものです。これは現在のバッファにのみ影響します。他のすべてのバッファ（まだ作成されていないものを含む）は、独自のバッファローカルバインディングが明示的に指定されていない限り、引き続きデフォルト値を共有します。</target>
        </trans-unit>
        <trans-unit id="0fe16ddfa309e34d499b3360c2ffbfd59734391f" translate="yes" xml:space="preserve">
          <source>The usual way to make a menu keymap produce a menu is to make it the definition of a prefix key. (A Lisp program can explicitly pop up a menu and receive the user&amp;rsquo;s choice&amp;mdash;see &lt;a href=&quot;pop_002dup-menus#Pop_002dUp-Menus&quot;&gt;Pop-Up Menus&lt;/a&gt;.)</source>
          <target state="translated">メニューキーマップにメニューを生成させる通常の方法は、それをプレフィックスキーの定義にすることです。（Lispプログラムは、メニューを明示的にポップアップして、ユーザーの選択を受け取ることができます。&lt;a href=&quot;pop_002dup-menus#Pop_002dUp-Menus&quot;&gt;ポップアップメニューを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="413eaf722746475cb7fc0070f78d8c7cbef5d401" translate="yes" xml:space="preserve">
          <source>The usual way to read a file into a buffer as a sequence of bytes, so you can decode the contents explicitly, is with &lt;code&gt;insert-file-contents-literally&lt;/code&gt; (see &lt;a href=&quot;reading-from-files#Reading-from-Files&quot;&gt;Reading from Files&lt;/a&gt;); alternatively, specify a non-&lt;code&gt;nil&lt;/code&gt;&lt;var&gt;rawfile&lt;/var&gt; argument when visiting a file with &lt;code&gt;find-file-noselect&lt;/code&gt;. These methods result in a unibyte buffer.</source>
          <target state="translated">内容を明示的にデコードできるように、ファイルをバイトのシーケンスとしてバッファに読み込む通常の方法は、 &lt;code&gt;insert-file-contents-literally&lt;/code&gt; を使用することです（&lt;a href=&quot;reading-from-files#Reading-from-Files&quot;&gt;ファイルからの読み取りを&lt;/a&gt;参照）。または、 &lt;code&gt;find-file-noselect&lt;/code&gt; を使用してファイルにアクセスするときに、 &lt;code&gt;nil&lt;/code&gt; &lt;var&gt;rawfile&lt;/var&gt; 引数を指定します。これらのメソッドは、ユニバイトバッファになります。</target>
        </trans-unit>
        <trans-unit id="5a11c911f5b0f69a171b92b7cffb6822859b5ec3" translate="yes" xml:space="preserve">
          <source>The usual way to reference a variable is to write the symbol which names it. See &lt;a href=&quot;symbol-forms#Symbol-Forms&quot;&gt;Symbol Forms&lt;/a&gt;.</source>
          <target state="translated">変数を参照する通常の方法は、変数に名前を付けるシンボルを記述することです。&lt;a href=&quot;symbol-forms#Symbol-Forms&quot;&gt;シンボルフォームを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5526547f8b2c540a3aed5c614e44c4e6712243b8" translate="yes" xml:space="preserve">
          <source>The usual way to use the byte sequence that results from explicitly encoding text is to copy it to a file or process&amp;mdash;for example, to write it with &lt;code&gt;write-region&lt;/code&gt; (see &lt;a href=&quot;writing-to-files#Writing-to-Files&quot;&gt;Writing to Files&lt;/a&gt;), and suppress encoding by binding &lt;code&gt;coding-system-for-write&lt;/code&gt; to &lt;code&gt;no-conversion&lt;/code&gt;.</source>
          <target state="translated">テキストを明示的にエンコードした結果のバイトシーケンスを使用する通常の方法は、テキストをファイルまたはプロセスにコピーすることです。たとえば、 &lt;code&gt;write-region&lt;/code&gt; を使用して書き込み（&lt;a href=&quot;writing-to-files#Writing-to-Files&quot;&gt;ファイルへの書き込みを&lt;/a&gt;参照）、 &lt;code&gt;coding-system-for-write&lt;/code&gt; バインドしてエンコードを抑制します。for-not &lt;code&gt;no-conversion&lt;/code&gt; への書き込み。</target>
        </trans-unit>
        <trans-unit id="36be957267ce38e09b5982a5646ced40aa3279e5" translate="yes" xml:space="preserve">
          <source>The valid values of &lt;code&gt;syntax-table&lt;/code&gt; text property are:</source>
          <target state="translated">&lt;code&gt;syntax-table&lt;/code&gt; テキストプロパティの有効な値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="356e00fd867a17cbdcb1217100288420420a4192" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;auto-raise&lt;/code&gt; should be used when your window manager has the focus automatically follow the position of the mouse pointer and a frame that gains focus is raised automatically.</source>
          <target state="translated">ウィンドウマネージャーでフォーカスがマウスポインターの位置に自動的に追従し、フォーカスを取得するフレームが自動的に &lt;code&gt;auto-raise&lt;/code&gt; される場合は、値の自動レイズを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="893aaa83d61bb05c575aed10c479a15392b8a63f" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;t&lt;/code&gt; should be used when your window manager has the focus automatically follow the position of the mouse pointer but a frame that gains focus is not raised automatically and may even remain occluded by other window-system windows.</source>
          <target state="translated">ウィンドウマネージャーがフォーカスをマウスポインターの位置に自動的に追従させるが、フォーカスを取得するフレームが自動的に上げられず、他のウィンドウシステムウィンドウによって遮られたままになる可能性がある場合は、値 &lt;code&gt;t&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="aed9f61a23e975eb7392678e85f51f4d74310e87" translate="yes" xml:space="preserve">
          <source>The value &lt;var&gt;color&lt;/var&gt; specifies the color to draw with. The default is the foreground color of the face for simple boxes, and the background color of the face for 3D boxes.</source>
          <target state="translated">値 &lt;var&gt;color&lt;/var&gt; は、描画に使用する色を指定します。デフォルトは、単純なボックスの場合は面の前景色、3Dボックスの場合は面の背景色です。</target>
        </trans-unit>
        <trans-unit id="726b5e07fbd252dac7c2dae2a2b05f252281e1cf" translate="yes" xml:space="preserve">
          <source>The value &lt;var&gt;height&lt;/var&gt; is the value that was specified for the height of the horizontal scroll bar (which may be &lt;code&gt;nil&lt;/code&gt;); &lt;var&gt;lines&lt;/var&gt; is the (possibly rounded) number of lines that the horizontally scroll bar actually occupies.</source>
          <target state="translated">値 &lt;var&gt;height&lt;/var&gt; は、水平スクロールバーの高さに指定された値です（ &lt;code&gt;nil&lt;/code&gt; の場合もあります）。 &lt;var&gt;lines&lt;/var&gt; は、水平スクロールバーが実際に占める（丸められた）行数です。</target>
        </trans-unit>
        <trans-unit id="db2573e485b9f1d52d90fe7b697fd92212845cf8" translate="yes" xml:space="preserve">
          <source>The value &lt;var&gt;style&lt;/var&gt; specifies whether to draw a 3D box. If it is &lt;code&gt;released-button&lt;/code&gt;, the box looks like a 3D button that is not being pressed. If it is &lt;code&gt;pressed-button&lt;/code&gt;, the box looks like a 3D button that is being pressed. If it is &lt;code&gt;nil&lt;/code&gt; or omitted, a plain 2D box is used.</source>
          <target state="translated">値の &lt;var&gt;style&lt;/var&gt; は、3Dボックスを描画するかどうかを指定します。それがある場合には &lt;code&gt;released-button&lt;/code&gt; 、ボックスが押されていない3Dボタンのように見えます。 &lt;code&gt;pressed-button&lt;/code&gt; と、ボックスは押されている3Dボタンのように見えます。それがある場合 &lt;code&gt;nil&lt;/code&gt; または省略、プレーンな2Dボックスが使用されています。</target>
        </trans-unit>
        <trans-unit id="1eb8d30e0ef6e2c616649855299438edaa4b6387" translate="yes" xml:space="preserve">
          <source>The value &lt;var&gt;width&lt;/var&gt; is the value that was specified for the width of the vertical scroll bar (which may be &lt;code&gt;nil&lt;/code&gt;); &lt;var&gt;columns&lt;/var&gt; is the (possibly rounded) number of columns that the vertical scroll bar actually occupies.</source>
          <target state="translated">値 &lt;var&gt;width&lt;/var&gt; は、垂直スクロールバーの幅に指定された値です（ &lt;code&gt;nil&lt;/code&gt; の場合もあります）。 &lt;var&gt;columns&lt;/var&gt; は、垂直スクロールバーが実際に占める（おそらく丸められた）列の数です。</target>
        </trans-unit>
        <trans-unit id="738dcd4e09dec82d9c9cbf00960b591b0d043018" translate="yes" xml:space="preserve">
          <source>The value can also be a list of error conditions (see &lt;a href=&quot;signaling-errors#Signaling-Errors&quot;&gt;Signaling Errors&lt;/a&gt;). Then the debugger is called only for error conditions in this list (except those also listed in &lt;code&gt;debug-ignored-errors&lt;/code&gt;). For example, if you set &lt;code&gt;debug-on-error&lt;/code&gt; to the list &lt;code&gt;(void-variable)&lt;/code&gt;, the debugger is only called for errors about a variable that has no value.</source>
          <target state="translated">値は、エラー状態のリストにすることもできます（&lt;a href=&quot;signaling-errors#Signaling-Errors&quot;&gt;シグナリングエラーを&lt;/a&gt;参照）。次に、このリストのエラー状態に対してのみデバッガーが呼び出されます（ &lt;code&gt;debug-ignored-errors&lt;/code&gt; にもリストされているものを除く）。たとえば、 &lt;code&gt;debug-on-error&lt;/code&gt; をリスト &lt;code&gt;(void-variable)&lt;/code&gt; に設定した場合、デバッガーは、値のない変数に関するエラーに対してのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0fca95603596a3c0776843a564cf75cbd2a26719" translate="yes" xml:space="preserve">
          <source>The value can also be a symbol with a function definition. That is equivalent to &lt;code&gt;t&lt;/code&gt;, except that the next warning will also call the function with no arguments with the warnings buffer current. The function can insert text which will serve as a header for the series of warnings.</source>
          <target state="translated">値は、関数定義を持つシンボルにすることもできます。これは &lt;code&gt;t&lt;/code&gt; と同等ですが、次の警告も引数なしで関数を呼び出し、警告バッファは現在の値になります。この関数は、一連の警告のヘッダーとして機能するテキストを挿入できます。</target>
        </trans-unit>
        <trans-unit id="036ce65d4e444cc9ca133db8c5ff911fde4b8b3b" translate="yes" xml:space="preserve">
          <source>The value can also be floating point or a function, which specifies the height relative to an &lt;em&gt;underlying face&lt;/em&gt; (see &lt;a href=&quot;displaying-faces#Displaying-Faces&quot;&gt;Displaying Faces&lt;/a&gt;). A floating-point value specifies the amount by which to scale the height of the underlying face. A function value is called with one argument, the height of the underlying face, and returns the height of the new face. If the function is passed an integer argument, it must return an integer.</source>
          <target state="translated">値は、浮動小数点または&lt;em&gt;下にある面&lt;/em&gt;に対する高さを指定する関数にすることもできます（&lt;em&gt;面の&lt;/em&gt;&lt;a href=&quot;displaying-faces#Displaying-Faces&quot;&gt;表示を&lt;/a&gt;参照）。浮動小数点値は、下にある面の高さをスケーリングする量を指定します。関数値は、1つの引数、つまり下にある面の高さで呼び出され、新しい面の高さを返します。関数に整数引数が渡される場合は、整数を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="93f34264bf299dd9ff1623c4a048f9a90b6d13e4" translate="yes" xml:space="preserve">
          <source>The value can be &lt;code&gt;nil&lt;/code&gt; (don&amp;rsquo;t use parity), the symbol &lt;code&gt;odd&lt;/code&gt; (use odd parity), or the symbol &lt;code&gt;even&lt;/code&gt; (use even parity). If &lt;var&gt;parity&lt;/var&gt; is not given, it defaults to no parity.</source>
          <target state="translated">指定できる値は &lt;code&gt;nil&lt;/code&gt; （パリティを使用しないでください）、シンボル &lt;code&gt;odd&lt;/code&gt; （奇数パリティを使用）、または記号 &lt;code&gt;even&lt;/code&gt; （偶数パリティを使用します）。 &lt;var&gt;parity&lt;/var&gt; が指定されていない場合、デフォルトでパリティなしになります。</target>
        </trans-unit>
        <trans-unit id="b19ab7691b129f64fc5f72d4c526e81bb1415159" translate="yes" xml:space="preserve">
          <source>The value can be a string; that should be the name of a file containing external-format X bitmap data. The file is found in the directories listed in the variable &lt;code&gt;x-bitmap-file-path&lt;/code&gt;.</source>
          <target state="translated">値は文字列にすることができます。これは、外部形式のXビットマップデータを含むファイルの名前である必要があります。このファイルは、変数 &lt;code&gt;x-bitmap-file-path&lt;/code&gt; にリストされているディレクトリにあります。</target>
        </trans-unit>
        <trans-unit id="90810279cbdbc3d6497008e3e858bcead8d9c860" translate="yes" xml:space="preserve">
          <source>The value can be an approximation. The function may avoid expensive processing and return an inexact result.</source>
          <target state="translated">値は近似値になる可能性があります。この関数は、高価な処理を避けて、不正確な結果を返すことがあります。</target>
        </trans-unit>
        <trans-unit id="a0ff635173abbeea2ba4af8f9b36759383fe725e" translate="yes" xml:space="preserve">
          <source>The value cell holds a symbol&amp;rsquo;s value as a variable, which is what you get if the symbol itself is evaluated as a Lisp expression. See &lt;a href=&quot;variables#Variables&quot;&gt;Variables&lt;/a&gt;, for details about how values are set and retrieved, including complications such as &lt;em&gt;local bindings&lt;/em&gt; and &lt;em&gt;scoping rules&lt;/em&gt;. Most symbols can have any Lisp object as a value, but certain special symbols have values that cannot be changed; these include &lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;, and any symbol whose name starts with &amp;lsquo;</source>
          <target state="translated">値セルは、シンボルの値を変数として保持します。これは、シンボル自体がLisp式として評価された場合に取得されるものです。参照&lt;a href=&quot;variables#Variables&quot;&gt;変数の&lt;/a&gt;値は、のような合併症を含め、設定、取得する方法の詳細については、&lt;em&gt;ローカルな束縛&lt;/em&gt;と&lt;em&gt;スコープ規則&lt;/em&gt;。ほとんどのシンボルは値として任意のLispオブジェクトを持つことができますが、特定の特別なシンボルには変更できない値があります。これらには、 &lt;code&gt;nil&lt;/code&gt; と &lt;code&gt;t&lt;/code&gt; 、および名前が 'で始まる任意の記号が含まれます。</target>
        </trans-unit>
        <trans-unit id="00902684377c36ec854c666f66e1def68419f7f0" translate="yes" xml:space="preserve">
          <source>The value decides which Lisp object to use for representing a JSON array. It can be either &lt;code&gt;array&lt;/code&gt;, the default, to use Lisp arrays; or &lt;code&gt;list&lt;/code&gt; to use lists.</source>
          <target state="translated">この値は、JSON配列を表すために使用するLispオブジェクトを決定します。Lisp配列を使用する場合は、デフォルトのいずれかの &lt;code&gt;array&lt;/code&gt; にすることができます。または &lt;code&gt;list&lt;/code&gt; を使用するリスト。</target>
        </trans-unit>
        <trans-unit id="16edef5cb81f91f4adf2188db4dc4f629deae17d" translate="yes" xml:space="preserve">
          <source>The value decides which Lisp object to use for representing the key-value mappings of a JSON object. It can be either &lt;code&gt;hash-table&lt;/code&gt;, the default, to make hashtables with strings as keys; &lt;code&gt;alist&lt;/code&gt; to use alists with symbols as keys; or &lt;code&gt;plist&lt;/code&gt; to use plists with keyword symbols as keys.</source>
          <target state="translated">この値は、JSONオブジェクトのKey-Valueマッピングを表すために使用するLispオブジェクトを決定します。文字列をキーとしてハッシュテーブルを作成するのは、デフォルトの &lt;code&gt;hash-table&lt;/code&gt; いずれかです。 &lt;code&gt;alist&lt;/code&gt; は、記号をキーとして持つリストを使用します。または &lt;code&gt;plist&lt;/code&gt; を使用して、キーワード記号をキーとして持つplistを使用します。</target>
        </trans-unit>
        <trans-unit id="3fa2905ebfc7e60316747f384efec8fd2b021c6b" translate="yes" xml:space="preserve">
          <source>The value decides which Lisp object to use to represent the JSON keyword &lt;code&gt;false&lt;/code&gt;. It defaults to the symbol &lt;code&gt;:false&lt;/code&gt;.</source>
          <target state="translated">この値は、JSONキーワード &lt;code&gt;false&lt;/code&gt; を表すために使用するLispオブジェクトを決定します。デフォルトは記号 &lt;code&gt;:false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="70971f173ca78b68c08bef1aa1b243f7d8fcb51c" translate="yes" xml:space="preserve">
          <source>The value decides which Lisp object to use to represent the JSON keyword &lt;code&gt;null&lt;/code&gt;. It defaults to the symbol &lt;code&gt;:null&lt;/code&gt;.</source>
          <target state="translated">この値は、JSONキーワード &lt;code&gt;null&lt;/code&gt; を表すために使用するLispオブジェクトを決定します。デフォルトはシンボル &lt;code&gt;:null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0fe437d2786c53546e9e4721af67a363a80470e7" translate="yes" xml:space="preserve">
          <source>The value denotes the side of the frame or window where a new window displaying the buffer shall be created. This entry is used by &lt;code&gt;display-buffer-in-side-window&lt;/code&gt; to indicate the side of the frame where a new side window shall be placed (see &lt;a href=&quot;displaying-buffers-in-side-windows#Displaying-Buffers-in-Side-Windows&quot;&gt;Displaying Buffers in Side Windows&lt;/a&gt;). It is also used by &lt;code&gt;display-buffer-in-atom-window&lt;/code&gt; to indicate the side of an existing window where the new window shall be located (see &lt;a href=&quot;atomic-windows#Atomic-Windows&quot;&gt;Atomic Windows&lt;/a&gt;).</source>
          <target state="translated">値は、バッファを表示する新しいウィンドウが作成されるフレームまたはウィンドウの側面を示します。このエントリは、 &lt;code&gt;display-buffer-in-side-window&lt;/code&gt; によって使用され、新しいサイドウィンドウが配置されるフレームの側面を示します（サイドウィンドウでの&lt;a href=&quot;displaying-buffers-in-side-windows#Displaying-Buffers-in-Side-Windows&quot;&gt;バッファの表示を&lt;/a&gt;参照）。また、 &lt;code&gt;display-buffer-in-atom-window&lt;/code&gt; によって使用され、新しいウィンドウが配置される既存のウィンドウの側面を示します（&lt;a href=&quot;atomic-windows#Atomic-Windows&quot;&gt;アトミック&lt;/a&gt;ウィンドウを参照）。</target>
        </trans-unit>
        <trans-unit id="f7ee348338ce1106641a672b981019be718a72ff" translate="yes" xml:space="preserve">
          <source>The value has no effect when renaming would not alter the owner or group of the file; that is, for files which are owned by the user and whose group matches the default for a new file created there by the user.</source>
          <target state="translated">つまり、ユーザーが所有し、そのグループがユーザーによって作成された新しいファイルのデフォルトと一致するファイルに対しては、この値は何の効果もありません。</target>
        </trans-unit>
        <trans-unit id="ffc415f45e41ef7cef7291f52d1ca8b82b116694" translate="yes" xml:space="preserve">
          <source>The value has the form &lt;code&gt;(&lt;var&gt;offset&lt;/var&gt; &lt;var&gt;abbr&lt;/var&gt;)&lt;/code&gt;. Here &lt;var&gt;offset&lt;/var&gt; is an integer giving the number of seconds ahead of Universal Time (east of Greenwich). A negative value means west of Greenwich. The second element, &lt;var&gt;abbr&lt;/var&gt;, is a string giving an abbreviation for the time zone, e.g., &amp;lsquo;</source>
          <target state="translated">値の形式は &lt;code&gt;(&lt;var&gt;offset&lt;/var&gt; &lt;var&gt;abbr&lt;/var&gt;)&lt;/code&gt; です。ここで、 &lt;var&gt;offset&lt;/var&gt; は世界時（グリニッジの東）より前の秒数を示す整数です。負の値はグリニッジの西を意味します。2番目の要素 &lt;var&gt;abbr&lt;/var&gt; は、タイムゾーンの省略形を示す文字列です。例： '</target>
        </trans-unit>
        <trans-unit id="d54c14bbe8e273d4103e284f553d7a5a47ac3803" translate="yes" xml:space="preserve">
          <source>The value is 5 because that is the</source>
          <target state="translated">であるため、値は5となります。</target>
        </trans-unit>
        <trans-unit id="fcb6e2e9389f7780a675906dacf95eb444c0772f" translate="yes" xml:space="preserve">
          <source>The value is &lt;code&gt;nil&lt;/code&gt; for a subexpression inside a &amp;lsquo;</source>
          <target state="translated">'内の部分式の値は &lt;code&gt;nil&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ac9636b8cfc92069e35cc830e2013018fdbb6b7e" translate="yes" xml:space="preserve">
          <source>The value is &lt;code&gt;nil&lt;/code&gt; if &lt;var&gt;count&lt;/var&gt; is out of range, or for a subexpression inside a &amp;lsquo;</source>
          <target state="translated">&lt;var&gt;count&lt;/var&gt; が範囲外の場合、または '内の部分式の場合、値は &lt;code&gt;nil&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c167e0d6bf2b798519700d2a08b4be56ddb7ac7a" translate="yes" xml:space="preserve">
          <source>The value is &lt;code&gt;nil&lt;/code&gt; if &lt;var&gt;pos&lt;/var&gt; is not visible in &lt;var&gt;window&lt;/var&gt;. If &lt;var&gt;window&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, that stands for the selected window. If &lt;var&gt;pos&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, that stands for the value of point in &lt;var&gt;window&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;pos&lt;/var&gt; が &lt;var&gt;window&lt;/var&gt; 表示されていない場合、値は &lt;code&gt;nil&lt;/code&gt; です。 &lt;var&gt;window&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; の場合、それは選択されたウィンドウを表します。 &lt;var&gt;pos&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; の場合、それは &lt;var&gt;window&lt;/var&gt; 内のポイントの値を表します。</target>
        </trans-unit>
        <trans-unit id="a178845a64825fe33f0ce1505830cf0c8571ccb5" translate="yes" xml:space="preserve">
          <source>The value is &lt;code&gt;nil&lt;/code&gt; if &lt;var&gt;state&lt;/var&gt; represents a parse which has arrived at a top level position.</source>
          <target state="translated">&lt;var&gt;state&lt;/var&gt; が最上位の位置に到達した解析を表す場合、値は &lt;code&gt;nil&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f1847ffb79e4ef977f22b0f89bbfa3a8711353ea" translate="yes" xml:space="preserve">
          <source>The value is &lt;code&gt;nil&lt;/code&gt; if the properties remain unchanged all the way to the end of &lt;var&gt;object&lt;/var&gt; and &lt;var&gt;limit&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;. If the value is non-&lt;code&gt;nil&lt;/code&gt;, it is a position greater than or equal to &lt;var&gt;pos&lt;/var&gt;. The value equals &lt;var&gt;pos&lt;/var&gt; only when &lt;var&gt;limit&lt;/var&gt; equals &lt;var&gt;pos&lt;/var&gt;.</source>
          <target state="translated">値は &lt;code&gt;nil&lt;/code&gt; 特性がの終わりまでずっと変わらない場合は &lt;var&gt;object&lt;/var&gt; と &lt;var&gt;limit&lt;/var&gt; ある &lt;code&gt;nil&lt;/code&gt; 。値が &lt;code&gt;nil&lt;/code&gt; 以外の場合、それは &lt;var&gt;pos&lt;/var&gt; 以上の位置です。値が等しい &lt;var&gt;pos&lt;/var&gt; のみ &lt;var&gt;limit&lt;/var&gt; 等しい &lt;var&gt;pos&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="f42191ef8fc8d62fa782e6182ae3d4adf74e945c" translate="yes" xml:space="preserve">
          <source>The value is &lt;code&gt;nil&lt;/code&gt; if the property remains unchanged all the way to the end of &lt;var&gt;object&lt;/var&gt; and &lt;var&gt;limit&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;. If the value is non-&lt;code&gt;nil&lt;/code&gt;, it is a position greater than or equal to &lt;var&gt;pos&lt;/var&gt;; it equals &lt;var&gt;pos&lt;/var&gt; only if &lt;var&gt;limit&lt;/var&gt; equals &lt;var&gt;pos&lt;/var&gt;.</source>
          <target state="translated">値が &lt;code&gt;nil&lt;/code&gt; のプロパティはの終わりまでずっと変わらないままであれば &lt;var&gt;object&lt;/var&gt; と &lt;var&gt;limit&lt;/var&gt; ある &lt;code&gt;nil&lt;/code&gt; 。値が &lt;code&gt;nil&lt;/code&gt; 以外の場合、それは &lt;var&gt;pos&lt;/var&gt; 以上の位置です。それは等しい &lt;var&gt;pos&lt;/var&gt; 場合にのみ &lt;var&gt;limit&lt;/var&gt; 等しい &lt;var&gt;pos&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="862c753ca19532a871df595b1b786989741df504" translate="yes" xml:space="preserve">
          <source>The value is a form (an expression).</source>
          <target state="translated">値は形(式)です。</target>
        </trans-unit>
        <trans-unit id="ec33dbdc3801cba4b2a38abf814dcf1da00c4804" translate="yes" xml:space="preserve">
          <source>The value is a function.</source>
          <target state="translated">値は関数です。</target>
        </trans-unit>
        <trans-unit id="18ad4635bccc9d11d2025c4e0e4bf454e39e4870" translate="yes" xml:space="preserve">
          <source>The value is a key sequence. The customization buffer shows the key sequence using the same syntax as the</source>
          <target state="translated">値はキーシーケンスです。と同じ構文を使用してキーシーケンスを表示します。</target>
        </trans-unit>
        <trans-unit id="92047d2ff22dd07d30de54ae74480f7db138859c" translate="yes" xml:space="preserve">
          <source>The value is a list of all defined character set names.</source>
          <target state="translated">値は、定義されたすべての文字セット名のリストです。</target>
        </trans-unit>
        <trans-unit id="42e3b3b8e9f18abe4b0e6fc019c88b2b88f0e5a7" translate="yes" xml:space="preserve">
          <source>The value is a list of forms (expressions).</source>
          <target state="translated">値はフォーム(式)のリストです。</target>
        </trans-unit>
        <trans-unit id="d9d7add64fd5fda2d55573b4b40ddee4fa132824" translate="yes" xml:space="preserve">
          <source>The value is a list of functions.</source>
          <target state="translated">値は関数のリストです。</target>
        </trans-unit>
        <trans-unit id="744e014c080a028da5111b9957a721b5376e2f9e" translate="yes" xml:space="preserve">
          <source>The value is a predicate&amp;mdash;a function of one argument that returns non-&lt;code&gt;nil&lt;/code&gt; for success and &lt;code&gt;nil&lt;/code&gt; for failure.</source>
          <target state="translated">値は、非返す1つの引数の述語関数である &lt;code&gt;nil&lt;/code&gt; の成功とのために &lt;code&gt;nil&lt;/code&gt; の故障のために。</target>
        </trans-unit>
        <trans-unit id="fc95eed350ead41f92d508546cbe37902aff0c7a" translate="yes" xml:space="preserve">
          <source>The value is a program name.</source>
          <target state="translated">値はプログラム名です。</target>
        </trans-unit>
        <trans-unit id="b563d6300ce73a67d16482c93e6765622dfc6342" translate="yes" xml:space="preserve">
          <source>The value is a whole shell command.</source>
          <target state="translated">値はシェル全体のコマンドです。</target>
        </trans-unit>
        <trans-unit id="0fb0a1e296cb5eb5561689c7425698e96e4d5162" translate="yes" xml:space="preserve">
          <source>The value is always a string ending with a slash.</source>
          <target state="translated">値は常にスラッシュで終わる文字列です。</target>
        </trans-unit>
        <trans-unit id="38abcf64aec0a36e0f511c163ed2cd547b75773a" translate="yes" xml:space="preserve">
          <source>The value is an alist or nested alist in which each element describes one unpacked field.</source>
          <target state="translated">値は、各要素が1つのアンパックされたフィールドを記述するアリストまたは入れ子になったアリストです。</target>
        </trans-unit>
        <trans-unit id="f7f574a40cde0014d34b1f4c77ea68404bc7d6db" translate="yes" xml:space="preserve">
          <source>The value is an expression for determining whether the named menu item should be enabled in menus. See &lt;a href=&quot;simple-menu-items#Simple-Menu-Items&quot;&gt;Simple Menu Items&lt;/a&gt;.</source>
          <target state="translated">値は、指定されたメニュー項目をメニューで有効にするかどうかを決定するための式です。&lt;a href=&quot;simple-menu-items#Simple-Menu-Items&quot;&gt;シンプルなメニュー項目を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="988d1fb03cc87294d6912ad4a008a4a541a3d1cf" translate="yes" xml:space="preserve">
          <source>The value is an interactive form for the named function. Normally, you should not set this directly; use the &lt;code&gt;interactive&lt;/code&gt; special form instead. See &lt;a href=&quot;interactive-call#Interactive-Call&quot;&gt;Interactive Call&lt;/a&gt;.</source>
          <target state="translated">値は、名前付き関数の対話型フォームです。通常、これを直接設定しないでください。代わりに、 &lt;code&gt;interactive&lt;/code&gt; な特殊フォームを使用してください。&lt;a href=&quot;interactive-call#Interactive-Call&quot;&gt;インタラクティブコールを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a2675782eef27c42642a60fce1752cbb34644db5" translate="yes" xml:space="preserve">
          <source>The value is boolean&amp;mdash;either &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;t&lt;/code&gt;. Note that by using &lt;code&gt;choice&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; together (see the next section), you can specify that the value must be &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;t&lt;/code&gt;, but also specify the text to describe each value in a way that fits the specific meaning of the alternative.</source>
          <target state="translated">値はブール値（ &lt;code&gt;nil&lt;/code&gt; または &lt;code&gt;t&lt;/code&gt; )です。 &lt;code&gt;choice&lt;/code&gt; と &lt;code&gt;const&lt;/code&gt; を一緒に使用することで（次のセクションを参照）、値を &lt;code&gt;nil&lt;/code&gt; または &lt;code&gt;t&lt;/code&gt; にする必要があることを指定できますが、代替の特定の意味に合う方法で各値を説明するテキストを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="3894f2edc61204404042bc861be88ec42f3d3a29" translate="yes" xml:space="preserve">
          <source>The value is copied from &lt;code&gt;this-command&lt;/code&gt; when a command returns to the command loop, except when the command has specified a prefix argument for the following command.</source>
          <target state="translated">コマンドが次のコマンドのプレフィックス引数を指定している場合を除き、コマンドがコマンドループに戻ると、 &lt;code&gt;this-command&lt;/code&gt; から値がコピーされます。</target>
        </trans-unit>
        <trans-unit id="306c554506d781ac28efad2e4ea92701f816dce5" translate="yes" xml:space="preserve">
          <source>The value is either a major mode or a list of major modes. &lt;code&gt;display-buffer-reuse-mode-window&lt;/code&gt; may reuse a window whenever the value specified by this entry matches the major mode of that window&amp;rsquo;s buffer. Other action functions ignore such entries.</source>
          <target state="translated">値は、メジャーモードまたはメジャーモードのリストのいずれかです。 &lt;code&gt;display-buffer-reuse-mode-window&lt;/code&gt; は、このエントリで指定された値がそのウィンドウのバッファのメジャーモードと一致するときはいつでも、ウィンドウを再利用できます。他のアクション関数はそのようなエントリを無視します。</target>
        </trans-unit>
        <trans-unit id="1843e0f5c17e7f0a09b0d1319f9a950d3c352fa5" translate="yes" xml:space="preserve">
          <source>The value is either the empty vector, or is a newly constructed nonempty vector that is not &lt;code&gt;eq&lt;/code&gt; to any existing vector.</source>
          <target state="translated">値は空のベクトルであるか、既存のベクトルと &lt;code&gt;eq&lt;/code&gt; ではない新しく構築された空でないベクトルです。</target>
        </trans-unit>
        <trans-unit id="eb6e5361e7a91533e27cdf7399370f943e9ba10d" translate="yes" xml:space="preserve">
          <source>The value is measured in baud.</source>
          <target state="translated">値はボー単位で測定されます。</target>
        </trans-unit>
        <trans-unit id="be4e71b6f99d1f91e5e6b4886554248affe4a867" translate="yes" xml:space="preserve">
          <source>The value is negative if the first substring is less, positive if the first is greater, and zero if they are equal. The absolute value of the result is one plus the index of the first differing characters within the substrings.</source>
          <target state="translated">値は、最初の部分文字列が小さければ負の値、大きければ正の値、それらが等しいならばゼロである。結果の絶対値は、部分文字列内の最初の異なる文字のインデックスに 1 を足したものです。</target>
        </trans-unit>
        <trans-unit id="a221deec0b7b326eded452b6cef1afc0c42096b1" translate="yes" xml:space="preserve">
          <source>The value is normally &lt;code&gt;nil&lt;/code&gt;; Lisp programs bind it to &lt;code&gt;t&lt;/code&gt; for brief periods of time.</source>
          <target state="translated">通常、値は &lt;code&gt;nil&lt;/code&gt; です。Lispプログラムはそれを短期間 &lt;code&gt;t&lt;/code&gt; にバインドします。</target>
        </trans-unit>
        <trans-unit id="a10d990baa1d6dc687c357d4165562f04a895757" translate="yes" xml:space="preserve">
          <source>The value is normally a list of the form &lt;code&gt;(&lt;var&gt;filenum&lt;/var&gt;
&lt;var&gt;devnum&lt;/var&gt;)&lt;/code&gt;. This pair of numbers uniquely identifies the file among all files accessible on the system. See the function &lt;code&gt;file-attributes&lt;/code&gt;, in &lt;a href=&quot;file-attributes#File-Attributes&quot;&gt;File Attributes&lt;/a&gt;, for more information about them.</source>
          <target state="translated">値は通常、形式 &lt;code&gt;(&lt;var&gt;filenum&lt;/var&gt; &lt;var&gt;devnum&lt;/var&gt;)&lt;/code&gt; リストです。この番号のペアは、システムでアクセス可能なすべてのファイルの中でファイルを一意に識別します。それらの詳細については、&lt;a href=&quot;file-attributes#File-Attributes&quot;&gt;ファイル属性&lt;/a&gt;の関数 &lt;code&gt;file-attributes&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="f6457f0bb5cd3fdfe83d6454775a62a020b7ae87" translate="yes" xml:space="preserve">
          <source>The value is normally an absolute file name. It can also be &lt;code&gt;nil&lt;/code&gt;, if the definition is not associated with any file. If &lt;var&gt;symbol&lt;/var&gt; specifies an autoloaded function, the value can be a relative file name without extension.</source>
          <target state="translated">通常、値は絶対ファイル名です。定義がどのファイルにも関連付けられていない場合は、 &lt;code&gt;nil&lt;/code&gt; にすることもできます。 &lt;var&gt;symbol&lt;/var&gt; が自動ロードされた関数を指定する場合、値は拡張子のない相対ファイル名にすることができます。</target>
        </trans-unit>
        <trans-unit id="f4bcfcbe7d05d1c0191cd0ba7af653328fe120d2" translate="yes" xml:space="preserve">
          <source>The value is significant only as to whether it is &lt;code&gt;nil&lt;/code&gt; or not. Since such variables often end up acquiring more values over time, this convention is not strongly recommended.</source>
          <target state="translated">この値は、 &lt;code&gt;nil&lt;/code&gt; であるかどうかに関してのみ重要です。このような変数は時間の経過とともにより多くの値を取得することが多いため、この規則は強くお勧めしません。</target>
        </trans-unit>
        <trans-unit id="778494fde2953cd1ddb11ad185ad2d2dd95186e4" translate="yes" xml:space="preserve">
          <source>The value may also be &lt;code&gt;nil&lt;/code&gt;. Then all commands work normally, even disabled ones.</source>
          <target state="translated">値は &lt;code&gt;nil&lt;/code&gt; の場合もあります。その後、無効にされたコマンドも含め、すべてのコマンドが正常に機能します。</target>
        </trans-unit>
        <trans-unit id="ef59b01ef55bdf2efe2493eea3cfaf23a97d2e9e" translate="yes" xml:space="preserve">
          <source>The value may be any Lisp object that can be printed and read back. You can use &lt;code&gt;sexp&lt;/code&gt; as a fall-back for any option, if you don&amp;rsquo;t want to take the time to work out a more specific type to use.</source>
          <target state="translated">値は、印刷して読み戻すことができる任意のLispオブジェクトにすることができます。より具体的なタイプを使用するために時間をかけたくない場合は、任意のオプションのフォールバックとして &lt;code&gt;sexp&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="b99730ddec359b16348016cabda6e3291d81a09e" translate="yes" xml:space="preserve">
          <source>The value must be &lt;var&gt;value&lt;/var&gt;&amp;mdash;nothing else is allowed.</source>
          <target state="translated">値がでなければならない &lt;var&gt;value&lt;/var&gt; 許可されている他の-nothing。</target>
        </trans-unit>
        <trans-unit id="87b4d5cd14fe72c47e3003a8680a757eb4604dbf" translate="yes" xml:space="preserve">
          <source>The value must be a character code. A character code is actually an integer, but this type shows the value by inserting the character in the buffer, rather than by showing the number.</source>
          <target state="translated">値は文字コードでなければなりません。文字コードは実際には整数ですが、この型は数値を表示するのではなく、バッファに文字を挿入して値を表示します。</target>
        </trans-unit>
        <trans-unit id="356d38d5cf3fa505e305c63022ab492161a1a6ed" translate="yes" xml:space="preserve">
          <source>The value must be a coding-system name, and you can do completion with</source>
          <target state="translated">値はコーディングシステム名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="63573ffb5bc552f254086ecf27ae3051cb0cceff" translate="yes" xml:space="preserve">
          <source>The value must be a cons cell, its &lt;small&gt;CAR&lt;/small&gt; must fit &lt;var&gt;car-type&lt;/var&gt;, and its &lt;small&gt;CDR&lt;/small&gt; must fit &lt;var&gt;cdr-type&lt;/var&gt;. For example, &lt;code&gt;(cons string
symbol)&lt;/code&gt; is a customization type which matches values such as &lt;code&gt;(&quot;foo&quot; . foo)&lt;/code&gt;.</source>
          <target state="translated">値がコンスセルでなければならない、その&lt;small&gt;CARが&lt;/small&gt;収まらなければならない &lt;var&gt;car-type&lt;/var&gt; 、そしてその&lt;small&gt;CDRは&lt;/small&gt;収まらなければなりません &lt;var&gt;cdr-type&lt;/var&gt; 。たとえば、 &lt;code&gt;(cons string symbol)&lt;/code&gt; は、 &lt;code&gt;(&quot;foo&quot; . foo)&lt;/code&gt; などの値に一致するカスタマイズタイプです。</target>
        </trans-unit>
        <trans-unit id="57910dac76238c31c6f7af52f08cdcf756ebfb61" translate="yes" xml:space="preserve">
          <source>The value must be a directory. The widget provides completion.</source>
          <target state="translated">値はディレクトリでなければなりません。ウィジェットは補完を提供します。</target>
        </trans-unit>
        <trans-unit id="810836eddfb49dd28f43e49c497214d6e73aaac5" translate="yes" xml:space="preserve">
          <source>The value must be a file name for an existing file. The widget provides completion.</source>
          <target state="translated">値は、既存のファイルのファイル名でなければなりません。ウィジェットは補完を提供します。</target>
        </trans-unit>
        <trans-unit id="b6a74a7f285c0c5906e259820de400e746147836" translate="yes" xml:space="preserve">
          <source>The value must be a file name. The widget provides completion.</source>
          <target state="translated">値はファイル名でなければなりません。ウィジェットは補完を提供します。</target>
        </trans-unit>
        <trans-unit id="13f9e716c79c89cbb1b9b4a0a3061a3b3b7535c7" translate="yes" xml:space="preserve">
          <source>The value must be a function taking one argument (a frame), supposed to return non-&lt;code&gt;nil&lt;/code&gt; if that frame is a candidate for displaying the buffer. This entry is used by &lt;code&gt;display-buffer-use-some-frame&lt;/code&gt;.</source>
          <target state="translated">値は、1つの引数（フレーム）をとる関数である必要があり、そのフレームがバッファーを表示する候補である場合は非 &lt;code&gt;nil&lt;/code&gt; を返すことになっています。このエントリは、 &lt;code&gt;display-buffer-use-some-frame&lt;/code&gt; によって使用されます。</target>
        </trans-unit>
        <trans-unit id="d0769814e541d4c1c6d9cf382832b62aff25584a" translate="yes" xml:space="preserve">
          <source>The value must be a function that takes one argument, a window, and returns either a new window (which will be used to display the desired buffer) or &lt;code&gt;nil&lt;/code&gt; (which means the splitting failed). The default value is &lt;code&gt;split-window-sensibly&lt;/code&gt;, which is documented next.</source>
          <target state="translated">値は、1つの引数、ウィンドウを取り、新しいウィンドウ（目的のバッファーを表示するために使用される）または &lt;code&gt;nil&lt;/code&gt; （分割が失敗したことを意味する）のいずれかを返す関数である必要があります。デフォルト値は &lt;code&gt;split-window-sensibly&lt;/code&gt; であり、これについては次に説明します。</target>
        </trans-unit>
        <trans-unit id="10add5bdc2dc784e1ca37482866dfd6d4c60ef8f" translate="yes" xml:space="preserve">
          <source>The value must be a list and each element of the list must fit the type &lt;var&gt;element-type&lt;/var&gt;. This appears in the customization buffer as a list of elements, with &amp;lsquo;</source>
          <target state="translated">値はリストである必要があり、リストの各要素はタイプ &lt;var&gt;element-type&lt;/var&gt; に適合している必要があります。これは、カスタマイズバッファに要素のリストとして表示されます。</target>
        </trans-unit>
        <trans-unit id="69283ab46854490317f97e1feb0235ad06aef920" translate="yes" xml:space="preserve">
          <source>The value must be a list of cons-cells, the &lt;small&gt;CAR&lt;/small&gt; of each cell representing a key of customization type &lt;var&gt;key-type&lt;/var&gt;, and the &lt;small&gt;CDR&lt;/small&gt; of the same cell representing a value of customization type &lt;var&gt;value-type&lt;/var&gt;. The user can add and delete key/value pairs, and edit both the key and the value of each pair.</source>
          <target state="translated">値はコンス・セルのリストである必要があり、&lt;small&gt;CAR&lt;/small&gt;カスタマイズ型のキーを表す各セルの &lt;var&gt;key-type&lt;/var&gt; 、および&lt;small&gt;CDR&lt;/small&gt;カスタマイズ型の値を表す同じセルの &lt;var&gt;value-type&lt;/var&gt; 。ユーザーは、キーと値のペアを追加および削除したり、各ペアのキーと値の両方を編集したりできます。</target>
        </trans-unit>
        <trans-unit id="e94e481856916cf8928303ce6c5fe6173ae9d7b6" translate="yes" xml:space="preserve">
          <source>The value must be a list of functions. This customization type is used for hook variables. You can use the &lt;code&gt;:options&lt;/code&gt; keyword in a hook variable&amp;rsquo;s &lt;code&gt;defcustom&lt;/code&gt; to specify a list of functions recommended for use in the hook; See &lt;a href=&quot;variable-definitions#Variable-Definitions&quot;&gt;Variable Definitions&lt;/a&gt;.</source>
          <target state="translated">値は関数のリストである必要があります。このカスタマイズタイプは、フック変数に使用されます。あなたは使用することができます &lt;code&gt;:options&lt;/code&gt; フック変数の中のキーワード &lt;code&gt;defcustom&lt;/code&gt; ををフックで使用するために推奨される機能のリストを指定します。&lt;a href=&quot;variable-definitions#Variable-Definitions&quot;&gt;変数の定義を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="54b586711663d904f858b9b290b8d22b94a091f6" translate="yes" xml:space="preserve">
          <source>The value must be a list with exactly as many elements as the &lt;var&gt;element-types&lt;/var&gt; given; and each element must fit the corresponding &lt;var&gt;element-type&lt;/var&gt;.</source>
          <target state="translated">値は、指定された &lt;var&gt;element-types&lt;/var&gt; とまったく同じ数の要素を含むリストである必要があります。各要素は、対応する &lt;var&gt;element-type&lt;/var&gt; 適合している必要があります。</target>
        </trans-unit>
        <trans-unit id="896d6796a36a3b3136852c309aa7d01c3792f5f6" translate="yes" xml:space="preserve">
          <source>The value must be a list, and each element of the list must match one of the &lt;var&gt;types&lt;/var&gt; specified.</source>
          <target state="translated">値はリストである必要があり、リストの各要素は指定された &lt;var&gt;types&lt;/var&gt; 1つと一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="3aeeaa45e096ad8313dd25ab21d8c10013208130" translate="yes" xml:space="preserve">
          <source>The value must be a number (floating point or integer).</source>
          <target state="translated">値は数値(浮動小数点または整数)でなければなりません。</target>
        </trans-unit>
        <trans-unit id="945efd91d2acb86b2c28413feb5748c4d0bd2079" translate="yes" xml:space="preserve">
          <source>The value must be a string. The customization buffer shows the string without delimiting &amp;lsquo;</source>
          <target state="translated">値は文字列である必要があります。カスタマイズバッファは、区切りなしで文字列を表示します '</target>
        </trans-unit>
        <trans-unit id="4752821348ac6fabc91456f988d3e618cd05d1f6" translate="yes" xml:space="preserve">
          <source>The value must be a symbol which is a face name. The widget provides completion.</source>
          <target state="translated">値は顔の名前であるシンボルでなければなりません。ウィジェットは補完を提供します。</target>
        </trans-unit>
        <trans-unit id="67a06078fab94776bb45407ad95be9c13181139f" translate="yes" xml:space="preserve">
          <source>The value must be a symbol. It appears in the customization buffer as the symbol name. The widget provides completion.</source>
          <target state="translated">値はシンボルでなければなりません。これはシンボル名としてカスタマイズバッファに表示されます。ウィジェットは補完を提供します。</target>
        </trans-unit>
        <trans-unit id="5849f60cb5b32368a764c6539b8c8a00d225ed38" translate="yes" xml:space="preserve">
          <source>The value must be a valid color name. The widget provides completion for color names, as well as a sample and a button for selecting a color name from a list of color names shown in a</source>
          <target state="translated">値は有効な色名でなければなりません。ウィジェットは、色名の補完、サンプル、色名のリストから色名を選択するためのボタンを提供します。</target>
        </trans-unit>
        <trans-unit id="d2c0b88b87276fde817f7f25e6fbe66a3b002536" translate="yes" xml:space="preserve">
          <source>The value must be a variable name. The widget provides completion.</source>
          <target state="translated">値は変数名でなければなりません。ウィジェットは補完を提供します。</target>
        </trans-unit>
        <trans-unit id="866e1c92bc84fa3056c2cc92aa9eb34d171bc22b" translate="yes" xml:space="preserve">
          <source>The value must be an integer.</source>
          <target state="translated">値は整数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="ce3a6a49432bb3e2bb25953ebf11758d62c57727" translate="yes" xml:space="preserve">
          <source>The value must be either a lambda expression or a function name. The widget provides completion for function names.</source>
          <target state="translated">値はラムダ式か関数名のいずれかでなければなりません。ウィジェットは関数名の補完を提供します。</target>
        </trans-unit>
        <trans-unit id="9de80c74f410724e3e9d2d4e057e94956796434d" translate="yes" xml:space="preserve">
          <source>The value must be floating point.</source>
          <target state="translated">値は浮動小数点でなければなりません。</target>
        </trans-unit>
        <trans-unit id="597960a6ce739f902fa9c94199257d090be01a23" translate="yes" xml:space="preserve">
          <source>The value must fit one of &lt;var&gt;alternative-types&lt;/var&gt;. For example, &lt;code&gt;(choice integer string)&lt;/code&gt; allows either an integer or a string.</source>
          <target state="translated">値は、 &lt;var&gt;alternative-types&lt;/var&gt; 1つに適合する必要があります。たとえば、 &lt;code&gt;(choice integer string)&lt;/code&gt; は、整数または文字列のいずれかを許可します。</target>
        </trans-unit>
        <trans-unit id="c16d4e66c8a9aef6f1bbfad4e5db9283eb01c2d3" translate="yes" xml:space="preserve">
          <source>The value must specify a window that may have displayed the buffer previously. &lt;code&gt;display-buffer-in-previous-window&lt;/code&gt; will give preference to such a window provided it is still live and not dedicated to another buffer.</source>
          <target state="translated">値は、以前にバッファを表示した可能性のあるウィンドウを指定する必要があります。 &lt;code&gt;display-buffer-in-previous-window&lt;/code&gt; は、そのウィンドウがまだライブであり、別のバッファー専用でない限り、そのようなウィンドウを優先します。</target>
        </trans-unit>
        <trans-unit id="a8dcd9a15008fc01a594ad9652de93cb7a57eb20" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;(acos &lt;var&gt;arg&lt;/var&gt;)&lt;/code&gt; is a number between 0 and pi (inclusive) whose cosine is &lt;var&gt;arg&lt;/var&gt;. If &lt;var&gt;arg&lt;/var&gt; is out of range (outside [-1, 1]), &lt;code&gt;acos&lt;/code&gt; returns a NaN.</source>
          <target state="translated">&lt;code&gt;(acos &lt;var&gt;arg&lt;/var&gt;)&lt;/code&gt; の値は、0からpi（両端を含む）までの数値であり、その余弦は &lt;var&gt;arg&lt;/var&gt; です。場合 &lt;var&gt;arg&lt;/var&gt; が範囲外である（外部[-1、1]）、 &lt;code&gt;acos&lt;/code&gt; 戻るはNaN。</target>
        </trans-unit>
        <trans-unit id="fd06b4d6ba82cc559a28714761ccf61d840a6365" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;(asin &lt;var&gt;arg&lt;/var&gt;)&lt;/code&gt; is a number between -pi/2 and pi/2 (inclusive) whose sine is &lt;var&gt;arg&lt;/var&gt;. If &lt;var&gt;arg&lt;/var&gt; is out of range (outside [-1, 1]), &lt;code&gt;asin&lt;/code&gt; returns a NaN.</source>
          <target state="translated">&lt;code&gt;(asin &lt;var&gt;arg&lt;/var&gt;)&lt;/code&gt; の値は、-pi / 2からpi / 2（両端を含む）までの数値であり、その正弦は &lt;var&gt;arg&lt;/var&gt; です。場合 &lt;var&gt;arg&lt;/var&gt; が範囲外である（外部[-1、1]）、 &lt;code&gt;asin&lt;/code&gt; 戻るはNaN。</target>
        </trans-unit>
        <trans-unit id="9a7380bf9f6c5b9249cafc94b2adcec1cea58bac" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;(atan &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt; is a number between -pi/2 and pi/2 (exclusive) whose tangent is &lt;var&gt;y&lt;/var&gt;. If the optional second argument &lt;var&gt;x&lt;/var&gt; is given, the value of &lt;code&gt;(atan y x)&lt;/code&gt; is the angle in radians between the vector &lt;code&gt;[&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;]&lt;/code&gt; and the &lt;code&gt;X&lt;/code&gt; axis.</source>
          <target state="translated">&lt;code&gt;(atan &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt; の値は、接線が &lt;var&gt;y&lt;/var&gt; である-pi / 2とpi / 2（排他的）の間の数値です。オプションの2番目の引数 &lt;var&gt;x&lt;/var&gt; が指定されている場合、 &lt;code&gt;(atan y x)&lt;/code&gt; 値は、ベクトル &lt;code&gt;[&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;]&lt;/code&gt; と &lt;code&gt;X&lt;/code&gt; 軸の間のラジアン単位の角度です。</target>
        </trans-unit>
        <trans-unit id="c9e728ea829977e40f53b131b5144e09a9f2f814" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;auto-fill-function&lt;/code&gt; is &lt;code&gt;do-auto-fill&lt;/code&gt; when Auto Fill mode is enabled. That is a function whose sole purpose is to implement the usual strategy for breaking a line.</source>
          <target state="translated">&lt;code&gt;auto-fill-function&lt;/code&gt; モードが有効になっている場合、 &lt;code&gt;do-auto-fill&lt;/code&gt; 機能の値はdo-auto-fillです。これは、ラインを壊すための通常の戦略を実装することを唯一の目的とする関数です。</target>
        </trans-unit>
        <trans-unit id="d3bae7cd024789f811c4af6bb48478148919779d" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;exec-path&lt;/code&gt; is used by &lt;code&gt;call-process&lt;/code&gt; and &lt;code&gt;start-process&lt;/code&gt; when the &lt;var&gt;program&lt;/var&gt; argument is not an absolute file name.</source>
          <target state="translated">&lt;code&gt;exec-path&lt;/code&gt; の値は、 &lt;var&gt;program&lt;/var&gt; 引数が絶対ファイル名でない場合に、 &lt;code&gt;call-process&lt;/code&gt; および &lt;code&gt;start-process&lt;/code&gt; によって使用されます。</target>
        </trans-unit>
        <trans-unit id="30c13d6566147e5f7ff2d3b3fa785aa4e4166cab" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;global-mode-string&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;global-mode-string&lt;/code&gt; の値。</target>
        </trans-unit>
        <trans-unit id="3d3a2b88654bd12f5337924840af3d4601a33e57" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;input-decode-map&lt;/code&gt; is usually set up automatically according to the terminal&amp;rsquo;s Terminfo or Termcap entry, but sometimes those need help from terminal-specific Lisp files. Emacs comes with terminal-specific files for many common terminals; their main purpose is to make entries in &lt;code&gt;input-decode-map&lt;/code&gt; beyond those that can be deduced from Termcap and Terminfo. See &lt;a href=&quot;terminal_002dspecific#Terminal_002dSpecific&quot;&gt;Terminal-Specific&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;input-decode-map&lt;/code&gt; の値は通常、端末のTerminfoまたはTermcapエントリに従って自動的に設定されますが、端末固有のLispファイルの助けが必要な場合もあります。Emacsには、多くの一般的な端末用の端末固有のファイルが付属しています。それらの主な目的は、TermcapおよびTerminfoから推測できるものを超えて &lt;code&gt;input-decode-map&lt;/code&gt; にエントリを作成することです。&lt;a href=&quot;terminal_002dspecific#Terminal_002dSpecific&quot;&gt;端末固有を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="639680a63cdaad1e211652d86db8f9e826824dca" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;kill-ring-yank-pointer&lt;/code&gt; is always &lt;code&gt;eq&lt;/code&gt; to one of the links in the kill ring list. The element it identifies is the &lt;small&gt;CAR&lt;/small&gt; of that link. Kill commands, which change the kill ring, also set this variable to the value of &lt;code&gt;kill-ring&lt;/code&gt;. The effect is to rotate the ring so that the newly killed text is at the front.</source>
          <target state="translated">値が &lt;code&gt;kill-ring-yank-pointer&lt;/code&gt; は常に &lt;code&gt;eq&lt;/code&gt; キルリングリスト内のリンクの1に。それが識別する要素は、そのリンクの&lt;small&gt;CAR&lt;/small&gt;です。キルリングを変更するキルコマンドも、この変数を &lt;code&gt;kill-ring&lt;/code&gt; の値に設定します。効果は、新しく殺されたテキストが前面に来るようにリングを回転させることです。</target>
        </trans-unit>
        <trans-unit id="b0adbfa26a0f5e416e962a7d1ef1be229d44f4eb" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;load-history&lt;/code&gt; may have one element whose &lt;small&gt;CAR&lt;/small&gt; is &lt;code&gt;nil&lt;/code&gt;. This element describes definitions made with &lt;code&gt;eval-buffer&lt;/code&gt; on a buffer that is not visiting a file.</source>
          <target state="translated">&lt;code&gt;load-history&lt;/code&gt; の値には、&lt;small&gt;CAR&lt;/small&gt;が &lt;code&gt;nil&lt;/code&gt; である要素が1つ含まれている場合があります。この要素は、ファイルにアクセスしていないバッファーで &lt;code&gt;eval-buffer&lt;/code&gt; を使用して作成された定義を記述します。</target>
        </trans-unit>
        <trans-unit id="0c0cf4e96ec8565ee4c3ece809d9e7876396b3e6" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;mode-name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mode-name&lt;/code&gt; の値。</target>
        </trans-unit>
        <trans-unit id="01f5f8f11917d60cc33932b39ed53647b1e12540" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;pointm&lt;/code&gt; at the last redisplay time.</source>
          <target state="translated">最後の再表示時の &lt;code&gt;pointm&lt;/code&gt; の値。</target>
        </trans-unit>
        <trans-unit id="15b964ce86184c0c14ba0a0fa6d8168b77cc4283" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;process-connection-type&lt;/code&gt; takes effect when &lt;code&gt;make-process&lt;/code&gt; or &lt;code&gt;start-process&lt;/code&gt; is called. So you can specify how to communicate with one subprocess by binding the variable around the call to these functions.</source>
          <target state="translated">&lt;code&gt;process-connection-type&lt;/code&gt; の値は、 &lt;code&gt;make-process&lt;/code&gt; または &lt;code&gt;start-process&lt;/code&gt; が呼び出されたときに有効になります。したがって、これらの関数の呼び出しの周囲に変数をバインドすることにより、1つのサブプロセスと通信する方法を指定できます。</target>
        </trans-unit>
        <trans-unit id="f4917d7965a0a2a0eceea9527333fc312c3a1d97" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;track-mouse&lt;/code&gt; is that of the last form in &lt;var&gt;body&lt;/var&gt;. You should design &lt;var&gt;body&lt;/var&gt; to return when it sees the up-event that indicates the release of the button, or whatever kind of event means it is time to stop tracking.</source>
          <target state="translated">&lt;code&gt;track-mouse&lt;/code&gt; の値は、 &lt;var&gt;body&lt;/var&gt; の最後の形式の値です。ボタンのリリースを示すアップイベント、または追跡を停止する時期を意味するあらゆる種類のイベントが表示されたときに戻るように &lt;var&gt;body&lt;/var&gt; を設計する必要があります。</target>
        </trans-unit>
        <trans-unit id="8e1d48548038a94283629f3b24139decfc462f06" translate="yes" xml:space="preserve">
          <source>The value of &lt;var&gt;geometry&lt;/var&gt; should be a list of the form &lt;code&gt;(&lt;var&gt;width&lt;/var&gt; &lt;var&gt;height&lt;/var&gt; &lt;var&gt;x&lt;/var&gt; &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt;. &lt;var&gt;width&lt;/var&gt; and &lt;var&gt;height&lt;/var&gt; specify the width and height of the cropped image. If &lt;var&gt;x&lt;/var&gt; is a positive number it specifies the offset of the cropped area from the left of the original image, and if negative the offset from the right. If &lt;var&gt;y&lt;/var&gt; is a positive number it specifies the offset from the top of the original image, and if negative from the bottom. If &lt;var&gt;x&lt;/var&gt; or &lt;var&gt;y&lt;/var&gt; are &lt;code&gt;nil&lt;/code&gt; or unspecified the crop area will be centered on the original image.</source>
          <target state="translated">&lt;var&gt;geometry&lt;/var&gt; の値は、フォームのリスト &lt;code&gt;(&lt;var&gt;width&lt;/var&gt; &lt;var&gt;height&lt;/var&gt; &lt;var&gt;x&lt;/var&gt; &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt; ます。 &lt;var&gt;width&lt;/var&gt; と &lt;var&gt;height&lt;/var&gt; は、トリミングされた画像の幅と高さを指定します。場合 &lt;var&gt;x&lt;/var&gt; 正の数であり、それは、元の画像の左からトリミングされた領域のオフセット、および右から負のオフセットを指定した場合。場合 &lt;var&gt;y&lt;/var&gt; 正の数であり、それは、元の画像の先頭からのオフセットを指定し、下から負の場合。場合 &lt;var&gt;x&lt;/var&gt; または &lt;var&gt;y&lt;/var&gt; である &lt;code&gt;nil&lt;/code&gt; 又は不特定の作物領域は、元の画像を中心に説明します。</target>
        </trans-unit>
        <trans-unit id="f9a0aa42133a8566714c8da5cfb1ac14d08f0cbd" translate="yes" xml:space="preserve">
          <source>The value of &lt;var&gt;list&lt;/var&gt; specifies the objects to ask questions about. It should be either a list of objects or a generator function. If it is a function, it should expect no arguments, and should return either the next object to ask about, or &lt;code&gt;nil&lt;/code&gt;, meaning to stop asking questions.</source>
          <target state="translated">&lt;var&gt;list&lt;/var&gt; の値は、質問するオブジェクトを指定します。オブジェクトのリストまたはジェネレーター関数のいずれかである必要があります。関数の場合、引数を期待せず、質問する次のオブジェクト、または質問を停止することを意味する &lt;code&gt;nil&lt;/code&gt; のいずれかを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="292f71c1213df0a0c0f3e562c978b3b0e7d59643" translate="yes" xml:space="preserve">
          <source>The value of &lt;var&gt;package&lt;/var&gt; needs to be unique and it needs to match the &lt;var&gt;package&lt;/var&gt; value appearing in the &lt;code&gt;:package-version&lt;/code&gt; keyword. Since the user might see the value in an error message, a good choice is the official name of the package, such as MH-E or Gnus.</source>
          <target state="translated">&lt;var&gt;package&lt;/var&gt; の値は一意である必要があり、 &lt;code&gt;:package-version&lt;/code&gt; キーワードに表示される &lt;var&gt;package&lt;/var&gt; 値と一致する必要があります。ユーザーにはエラーメッセージに値が表示される可能性があるため、MH-EやGnusなどのパッケージの正式な名前を選択することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="fb4c37d36e42ca7bde0fbebe3ad9e40de14d67b3" translate="yes" xml:space="preserve">
          <source>The value of &lt;var&gt;persistent&lt;/var&gt; is the value specified for &lt;var&gt;window&lt;/var&gt; with the last successful invocation of &lt;code&gt;set-window-scroll-bars&lt;/code&gt;, &lt;code&gt;nil&lt;/code&gt; if there never was one.</source>
          <target state="translated">値は &lt;var&gt;persistent&lt;/var&gt; するために指定した値である &lt;var&gt;window&lt;/var&gt; の最後に成功した呼び出しに &lt;code&gt;set-window-scroll-bars&lt;/code&gt; 、 &lt;code&gt;nil&lt;/code&gt; の1があったことはありません場合。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
