<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="elisp">
    <body>
      <group id="elisp">
        <trans-unit id="3571d6eb92f7d98e1c4eda2402213efe0e7ab52a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;&lt;var&gt;signal-description&lt;/var&gt; (core dumped)\n&quot;&lt;/code&gt;. The &lt;var&gt;signal-description&lt;/var&gt; is a system-dependent textual description of a signal, e.g., &lt;code&gt;&quot;killed&quot;&lt;/code&gt; for &lt;code&gt;SIGKILL&lt;/code&gt;. The &amp;ldquo;core dumped&amp;rdquo; part is optional, and only appears if the process dumped core.</source>
          <target state="translated">&lt;code&gt;&quot;&lt;var&gt;signal-description&lt;/var&gt; (core dumped)\n&quot;&lt;/code&gt; 。 &lt;var&gt;signal-description&lt;/var&gt; 例えば、信号のシステム依存のテキスト記述である &lt;code&gt;&quot;killed&quot;&lt;/code&gt; ために &lt;code&gt;SIGKILL&lt;/code&gt; 。「コアダンプ」部分はオプションであり、プロセスがコアをダンプした場合にのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="21510b6b5c7cbab2e1be067295358d4792e4d65e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;connection broken by remote peer\n&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;connection broken by remote peer\n&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9816d6ca400b6770ec7060208e3f151de8d707a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;deleted\n&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;deleted\n&quot;&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="1c32b918f930d17e17d32954809a49631abaa8a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;exited abnormally with code &lt;var&gt;exitcode&lt;/var&gt; (core dumped)\n&quot;&lt;/code&gt;. The &amp;ldquo;core dumped&amp;rdquo; part is optional, and only appears if the process dumped core.</source>
          <target state="translated">&lt;code&gt;&quot;exited abnormally with code &lt;var&gt;exitcode&lt;/var&gt; (core dumped)\n&quot;&lt;/code&gt; 。「コアダンプ」部分はオプションであり、プロセスがコアをダンプした場合にのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="0fd91ad9f72c086362a3597555e03163dbe8e5d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;failed with code &lt;var&gt;fail-code&lt;/var&gt;\n&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;failed with code &lt;var&gt;fail-code&lt;/var&gt;\n&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="452f3fbb5d5b06f71bcf670ee21189ba10aebe5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;finished\n&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;finished\n&quot;&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="8ce5578b61523c780393dc21e82f5fd6d5f2f0fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;open from &lt;var&gt;host-name&lt;/var&gt;\n&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;open from &lt;var&gt;host-name&lt;/var&gt;\n&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aaa2e8e855dbd08e0cfa22710f395245e053bd02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;open\n&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;open\n&quot;&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="667e3d01a04fd5c5457e513a4050129a3a31ab13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(add-function :after &lt;var&gt;funvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;)&lt;/code&gt; is comparable for single-function hooks to &lt;code&gt;(add-hook '&lt;var&gt;hookvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;
'append)&lt;/code&gt; for normal hooks.</source>
          <target state="translated">&lt;code&gt;(add-function :after &lt;var&gt;funvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;)&lt;/code&gt; は、単一関数フックの場合、通常のフックの &lt;code&gt;(add-hook '&lt;var&gt;hookvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt; 'append)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e79f2e8727e321371b1128b55cf7222da89f4f69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(add-function :after-until &lt;var&gt;funvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;)&lt;/code&gt; is comparable for single-function hooks to &lt;code&gt;(add-hook '&lt;var&gt;hookvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;
'append)&lt;/code&gt; when &lt;var&gt;hookvar&lt;/var&gt; is run via &lt;code&gt;run-hook-with-args-until-success&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;(add-function :after-until &lt;var&gt;funvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;)&lt;/code&gt; は、単一関数フックの場合、 &lt;var&gt;hookvar&lt;/var&gt; が &lt;code&gt;run-hook-with-args-until-success&lt;/code&gt; を介して実行される場合の &lt;code&gt;(add-hook '&lt;var&gt;hookvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt; 'append)&lt;/code&gt; に相当します。</target>
        </trans-unit>
        <trans-unit id="d1ada1c40c2fc461e47b0536ab0b0d83798556ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(add-function :after-while &lt;var&gt;funvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;)&lt;/code&gt; is comparable for single-function hooks to &lt;code&gt;(add-hook '&lt;var&gt;hookvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;
'append)&lt;/code&gt; when &lt;var&gt;hookvar&lt;/var&gt; is run via &lt;code&gt;run-hook-with-args-until-failure&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;(add-function :after-while &lt;var&gt;funvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;)&lt;/code&gt; は、単一関数フックの場合、 &lt;var&gt;hookvar&lt;/var&gt; が &lt;code&gt;run-hook-with-args-until-failure&lt;/code&gt; を介して実行される場合の &lt;code&gt;(add-hook '&lt;var&gt;hookvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt; 'append)&lt;/code&gt; に相当します。</target>
        </trans-unit>
        <trans-unit id="77fd36076dd83bbf47f8b99d3020b0d1a3a0c601" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(add-function :before &lt;var&gt;funvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;)&lt;/code&gt; is comparable for single-function hooks to &lt;code&gt;(add-hook '&lt;var&gt;hookvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;)&lt;/code&gt; for normal hooks.</source>
          <target state="translated">&lt;code&gt;(add-function :before &lt;var&gt;funvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;)&lt;/code&gt; は、単一関数フックの場合、通常のフックの &lt;code&gt;(add-hook '&lt;var&gt;hookvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;)&lt;/code&gt; に相当します。</target>
        </trans-unit>
        <trans-unit id="30dada64dce8c2ce8801fc2baeb378ba25b722b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(add-function :before-until &lt;var&gt;funvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;)&lt;/code&gt; is comparable for single-function hooks to &lt;code&gt;(add-hook '&lt;var&gt;hookvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;)&lt;/code&gt; when &lt;var&gt;hookvar&lt;/var&gt; is run via &lt;code&gt;run-hook-with-args-until-success&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;(add-function :before-until &lt;var&gt;funvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;)&lt;/code&gt; は、単一関数フックの場合、 &lt;var&gt;hookvar&lt;/var&gt; が &lt;code&gt;run-hook-with-args-until-success&lt;/code&gt; を介して実行される場合の &lt;code&gt;(add-hook '&lt;var&gt;hookvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;)&lt;/code&gt; に相当します。</target>
        </trans-unit>
        <trans-unit id="22c99938a4d009a4111676d43f22995cb86610e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(add-function :before-while &lt;var&gt;funvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;)&lt;/code&gt; is comparable for single-function hooks to &lt;code&gt;(add-hook '&lt;var&gt;hookvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;)&lt;/code&gt; when &lt;var&gt;hookvar&lt;/var&gt; is run via &lt;code&gt;run-hook-with-args-until-failure&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;(add-function :before-while &lt;var&gt;funvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;)&lt;/code&gt; は、単一関数フックの場合、 &lt;var&gt;hookvar&lt;/var&gt; が &lt;code&gt;run-hook-with-args-until-failure&lt;/code&gt; を介して実行される場合の &lt;code&gt;(add-hook '&lt;var&gt;hookvar&lt;/var&gt; &lt;var&gt;function&lt;/var&gt;)&lt;/code&gt; に相当します。</target>
        </trans-unit>
        <trans-unit id="5c6252a7ccf0c052151b4b73d200cde8cab47324" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(column . &lt;var&gt;column&lt;/var&gt;)&lt;/code&gt;: indent to column &lt;var&gt;column&lt;/var&gt;.</source>
          <target state="translated">&lt;code&gt;(column . &lt;var&gt;column&lt;/var&gt;)&lt;/code&gt; ：列 &lt;var&gt;column&lt;/var&gt; インデントします。</target>
        </trans-unit>
        <trans-unit id="bd05cccba28e6261f59cbfbe25751f0d1d3ec26e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(zerop x)&lt;/code&gt; is equivalent to &lt;code&gt;(= x 0)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;(zerop x)&lt;/code&gt; は &lt;code&gt;(= x 0)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="8a39a0d34aa08d1f39b0ffda4c8edaa99d08f6ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0&lt;/code&gt; means operate on all visible or iconified frames.</source>
          <target state="translated">&lt;code&gt;0&lt;/code&gt; は、表示またはアイコン化されたすべてのフレームで動作することを意味します。</target>
        </trans-unit>
        <trans-unit id="4dc6a4b0544f7e10c0aac111768586f7e59a5bf1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;2C-mode-map&lt;/code&gt; is the global keymap used for the</source>
          <target state="translated">&lt;code&gt;2C-mode-map&lt;/code&gt; は、に使用されるグローバルキーマップです。</target>
        </trans-unit>
        <trans-unit id="ff17a4d55b54932f733d4df35f4351fe75f50056" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:after&lt;/code&gt;, in which case &lt;var&gt;arg&lt;/var&gt; is a token and the function should return the &lt;var&gt;offset&lt;/var&gt; to use for indentation after &lt;var&gt;arg&lt;/var&gt;.</source>
          <target state="translated">&lt;code&gt;:after&lt;/code&gt; 、この場合、 &lt;var&gt;arg&lt;/var&gt; はトークンであり、関数は &lt;var&gt;arg&lt;/var&gt; の後のインデントに使用する &lt;var&gt;offset&lt;/var&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="745c148e949b23754d925fc97e53ee25ac2e7fc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:backward-token&lt;/code&gt;&lt;var&gt;fun&lt;/var&gt;: Specify the backward lexer to use.</source>
          <target state="translated">&lt;code&gt;:backward-token&lt;/code&gt; &lt;var&gt;fun&lt;/var&gt; ：使用する後方レクサーを指定します。</target>
        </trans-unit>
        <trans-unit id="09bf88985b0025e5ce963894bae66add561883e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:before&lt;/code&gt;, in which case &lt;var&gt;arg&lt;/var&gt; is a token and the function should return the &lt;var&gt;offset&lt;/var&gt; to use to indent &lt;var&gt;arg&lt;/var&gt; itself.</source>
          <target state="translated">&lt;code&gt;:before&lt;/code&gt; 、この場合、 &lt;var&gt;arg&lt;/var&gt; はトークンであり、関数は &lt;var&gt;arg&lt;/var&gt; 自体をインデントする &lt;var&gt;offset&lt;/var&gt; に使用するオフセットを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="4a6b6bc5821f2cf42d0e5e833804de89ab8123e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:elem&lt;/code&gt;, in which case the function should return either the offset to use to indent function arguments (if &lt;var&gt;arg&lt;/var&gt; is the symbol &lt;code&gt;arg&lt;/code&gt;) or the basic indentation step (if &lt;var&gt;arg&lt;/var&gt; is the symbol &lt;code&gt;basic&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;:elem&lt;/code&gt; 。この場合、関数は、関数の引数をインデントするために使用するオフセット（ &lt;var&gt;arg&lt;/var&gt; がシンボル &lt;code&gt;arg&lt;/code&gt; の場合）または基本的なインデントステップ（ &lt;var&gt;arg&lt;/var&gt; がシンボル &lt;code&gt;basic&lt;/code&gt; の場合）のいずれかを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="66ff7dd6575d51f021e1583cc2aa0383d29e79db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:forward-token&lt;/code&gt;&lt;var&gt;fun&lt;/var&gt;: Specify the forward lexer to use.</source>
          <target state="translated">&lt;code&gt;:forward-token&lt;/code&gt; &lt;var&gt;fun&lt;/var&gt; ：使用するフォワードレクサーを指定します。</target>
        </trans-unit>
        <trans-unit id="60b5e4ffa4ea98bbfb035262b0942a24c34df7a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:list-intro&lt;/code&gt;, in which case &lt;var&gt;arg&lt;/var&gt; is a token and the function should return non-&lt;code&gt;nil&lt;/code&gt; if the token is followed by a list of expressions (not separated by any token) rather than an expression.</source>
          <target state="translated">&lt;code&gt;:list-intro&lt;/code&gt; 。この場合、 &lt;var&gt;arg&lt;/var&gt; はトークンであり、トークンの後に式ではなく式のリスト（トークンで区切られていない）が続く場合、関数は非 &lt;code&gt;nil&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="de4ff782e72efa54bfa512b55e8172fc1b21044d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:local&lt;/code&gt; and &lt;code&gt;:remote&lt;/code&gt; are included even if they were not specified explicitly in &lt;code&gt;make-network-process&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:local&lt;/code&gt; と &lt;code&gt;:remote&lt;/code&gt; は、 &lt;code&gt;make-network-process&lt;/code&gt; で明示的に指定されていない場合でも含まれます。</target>
        </trans-unit>
        <trans-unit id="93d4cc5172b5a539cd9385caf51a90816a586e54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:tag&lt;/code&gt; is often used with &lt;code&gt;const&lt;/code&gt;, inside of &lt;code&gt;choice&lt;/code&gt;. For example,</source>
          <target state="translated">&lt;code&gt;:tag&lt;/code&gt; 、多くの場合で使用されている &lt;code&gt;const&lt;/code&gt; 、内部の &lt;code&gt;choice&lt;/code&gt; 。例えば、</target>
        </trans-unit>
        <trans-unit id="d8d5cc8815e0bd9596f7142348a8519bc72bc958" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;access-file&lt;/code&gt;, &lt;code&gt;add-name-to-file&lt;/code&gt;, &lt;code&gt;byte-compiler-base-file-name&lt;/code&gt;, &lt;code&gt;copy-directory&lt;/code&gt;, &lt;code&gt;copy-file&lt;/code&gt;, &lt;code&gt;delete-directory&lt;/code&gt;, &lt;code&gt;delete-file&lt;/code&gt;, &lt;code&gt;diff-latest-backup-file&lt;/code&gt;, &lt;code&gt;directory-file-name&lt;/code&gt;, &lt;code&gt;directory-files&lt;/code&gt;, &lt;code&gt;directory-files-and-attributes&lt;/code&gt;, &lt;code&gt;dired-compress-file&lt;/code&gt;, &lt;code&gt;dired-uncache&lt;/code&gt;, &lt;code&gt;exec-path&lt;/code&gt;, &lt;code&gt;expand-file-name&lt;/code&gt;, &lt;code&gt;file-accessible-directory-p&lt;/code&gt;, &lt;code&gt;file-acl&lt;/code&gt;, &lt;code&gt;file-attributes&lt;/code&gt;, &lt;code&gt;file-directory-p&lt;/code&gt;, &lt;code&gt;file-equal-p&lt;/code&gt;, &lt;code&gt;file-executable-p&lt;/code&gt;, &lt;code&gt;file-exists-p&lt;/code&gt;, &lt;code&gt;file-in-directory-p&lt;/code&gt;, &lt;code&gt;file-local-copy&lt;/code&gt;, &lt;code&gt;file-modes&lt;/code&gt;, &lt;code&gt;file-name-all-completions&lt;/code&gt;, &lt;code&gt;file-name-as-directory&lt;/code&gt;, &lt;code&gt;file-name-case-insensitive-p&lt;/code&gt;, &lt;code&gt;file-name-completion&lt;/code&gt;, &lt;code&gt;file-name-directory&lt;/code&gt;, &lt;code&gt;file-name-nondirectory&lt;/code&gt;, &lt;code&gt;file-name-sans-versions&lt;/code&gt;, &lt;code&gt;file-newer-than-file-p&lt;/code&gt;, &lt;code&gt;file-notify-add-watch&lt;/code&gt;, &lt;code&gt;file-notify-rm-watch&lt;/code&gt;, &lt;code&gt;file-notify-valid-p&lt;/code&gt;, &lt;code&gt;file-ownership-preserved-p&lt;/code&gt;, &lt;code&gt;file-readable-p&lt;/code&gt;, &lt;code&gt;file-regular-p&lt;/code&gt;, &lt;code&gt;file-remote-p&lt;/code&gt;, &lt;code&gt;file-selinux-context&lt;/code&gt;, &lt;code&gt;file-symlink-p&lt;/code&gt;, &lt;code&gt;file-system-info&lt;/code&gt;, &lt;code&gt;file-truename&lt;/code&gt;, &lt;code&gt;file-writable-p&lt;/code&gt;, &lt;code&gt;find-backup-file-name&lt;/code&gt;, &lt;code&gt;get-file-buffer&lt;/code&gt;, &lt;code&gt;insert-directory&lt;/code&gt;, &lt;code&gt;insert-file-contents&lt;/code&gt;, &lt;code&gt;load&lt;/code&gt;, &lt;code&gt;make-auto-save-file-name&lt;/code&gt;, &lt;code&gt;make-directory&lt;/code&gt;, &lt;code&gt;make-directory-internal&lt;/code&gt;, &lt;code&gt;make-nearby-temp-file&lt;/code&gt;, &lt;code&gt;make-process&lt;/code&gt;, &lt;code&gt;make-symbolic-link&lt;/code&gt;, &lt;code&gt;process-file&lt;/code&gt;, &lt;code&gt;rename-file&lt;/code&gt;, &lt;code&gt;set-file-acl&lt;/code&gt;, &lt;code&gt;set-file-modes&lt;/code&gt;, &lt;code&gt;set-file-selinux-context&lt;/code&gt;, &lt;code&gt;set-file-times&lt;/code&gt;, &lt;code&gt;set-visited-file-modtime&lt;/code&gt;, &lt;code&gt;shell-command&lt;/code&gt;, &lt;code&gt;start-file-process&lt;/code&gt;, &lt;code&gt;substitute-in-file-name&lt;/code&gt;, &lt;code&gt;temporary-file-directory&lt;/code&gt;, &lt;code&gt;unhandled-file-name-directory&lt;/code&gt;, &lt;code&gt;vc-registered&lt;/code&gt;, &lt;code&gt;verify-visited-file-modtime&lt;/code&gt;, &lt;code&gt;write-region&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;access-file&lt;/code&gt; 、 &lt;code&gt;add-name-to-file&lt;/code&gt; 、 &lt;code&gt;byte-compiler-base-file-name&lt;/code&gt; 、 &lt;code&gt;copy-directory&lt;/code&gt; 、 &lt;code&gt;copy-file&lt;/code&gt; 、 &lt;code&gt;delete-directory&lt;/code&gt; 、 &lt;code&gt;delete-file&lt;/code&gt; 、 &lt;code&gt;diff-latest-backup-file&lt;/code&gt; 、 &lt;code&gt;directory-file-name&lt;/code&gt; 、 &lt;code&gt;directory-files&lt;/code&gt; 、 &lt;code&gt;directory-files-and-attributes&lt;/code&gt; 、 &lt;code&gt;dired-compress-file&lt;/code&gt; 、 &lt;code&gt;dired-uncache&lt;/code&gt; 、 &lt;code&gt;exec-path&lt;/code&gt; 、 &lt;code&gt;expand-file-name&lt;/code&gt; 、 &lt;code&gt;file-accessible-directory-p&lt;/code&gt; 、 &lt;code&gt;file-acl&lt;/code&gt; 、 &lt;code&gt;file-attributes&lt;/code&gt; 、 &lt;code&gt;file-directory-p&lt;/code&gt; 、 &lt;code&gt;file-equal-p&lt;/code&gt; 、 &lt;code&gt;file-executable-p&lt;/code&gt; 、 &lt;code&gt;file-exists-p&lt;/code&gt; 、 &lt;code&gt;file-in-directory-p&lt;/code&gt; 、 &lt;code&gt;file-local-copy&lt;/code&gt; 、 &lt;code&gt;file-modes&lt;/code&gt; 、 &lt;code&gt;file-name-all-completions&lt;/code&gt; 、 &lt;code&gt;file-name-as-directory&lt;/code&gt; 、 &lt;code&gt;file-name-case-insensitive-p&lt;/code&gt; 、 &lt;code&gt;file-name-completion&lt;/code&gt; 、 &lt;code&gt;file-name-directory&lt;/code&gt; 、 &lt;code&gt;file-name-nondirectory&lt;/code&gt; 、 &lt;code&gt;file-name-sans-versions&lt;/code&gt; 、 &lt;code&gt;file-newer-than-file-p&lt;/code&gt; 、 &lt;code&gt;file-notify-add-watch&lt;/code&gt; 、 &lt;code&gt;file-notify-rm-watch&lt;/code&gt; 、 &lt;code&gt;file-notify-valid-p&lt;/code&gt; 、 &lt;code&gt;file-ownership-preserved-p&lt;/code&gt; 、 &lt;code&gt;file-readable-p&lt;/code&gt; &lt;code&gt;file-truename&lt;/code&gt; 読み取り可能-p、 &lt;code&gt;file-regular-p&lt;/code&gt; 、 &lt;code&gt;file-remote-p&lt;/code&gt; 、 &lt;code&gt;file-selinux-context&lt;/code&gt; 、 &lt;code&gt;file-symlink-p&lt;/code&gt; 、 &lt;code&gt;file-system-info&lt;/code&gt; 、file-truename、 &lt;code&gt;file-writable-p&lt;/code&gt; 、 &lt;code&gt;find-backup-file-name&lt;/code&gt; 、 &lt;code&gt;get-file-buffer&lt;/code&gt; 、 &lt;code&gt;insert-directory&lt;/code&gt; 、 &lt;code&gt;insert-file-contents&lt;/code&gt; 、 &lt;code&gt;load&lt;/code&gt; 、 &lt;code&gt;make-auto-save-file-name&lt;/code&gt; 、 &lt;code&gt;make-directory&lt;/code&gt; 、 &lt;code&gt;make-directory-internal&lt;/code&gt; 、 &lt;code&gt;make-nearby-temp-file&lt;/code&gt; 、 &lt;code&gt;make-process&lt;/code&gt; 、 &lt;code&gt;make-symbolic-link&lt;/code&gt; 、 &lt;code&gt;process-file&lt;/code&gt; 、 &lt;code&gt;rename-file&lt;/code&gt; 、 &lt;code&gt;set-file-acl&lt;/code&gt; 、 &lt;code&gt;set-file-modes&lt;/code&gt; 、 &lt;code&gt;set-file-selinux-context&lt;/code&gt; 、 &lt;code&gt;set-file-times&lt;/code&gt; 、 &lt;code&gt;set-visited-file-modtime&lt;/code&gt; 、 &lt;code&gt;shell-command&lt;/code&gt; 、 &lt;code&gt;start-file-process&lt;/code&gt; 、 &lt;code&gt;substitute-in-file-name&lt;/code&gt; 、 &lt;code&gt;temporary-file-directory&lt;/code&gt; 、 &lt;code&gt;unhandled-file-name-directory&lt;/code&gt; 、 &lt;code&gt;vc-registered&lt;/code&gt; 、 &lt;code&gt;verify-visited-file-modtime&lt;/code&gt; 、 &lt;code&gt;write-region&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9a910d2cabd88a287657c3675086df2e12c75bb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add-hook&lt;/code&gt; can handle the cases where &lt;var&gt;hook&lt;/var&gt; is void or its value is a single function; it sets or changes the value to a list of functions.</source>
          <target state="translated">&lt;code&gt;add-hook&lt;/code&gt; は、 &lt;var&gt;hook&lt;/var&gt; が無効であるか、その値が単一の関数である場合を処理できます。値を関数のリストに設定または変更します。</target>
        </trans-unit>
        <trans-unit id="e338fdebb37360438c44e0ef1f0938e510dc62c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;advice-add&lt;/code&gt; can be useful for altering the behavior of existing calls to an existing function without having to redefine the whole function. However, it can be a source of bugs, since existing callers to the function may assume the old behavior, and work incorrectly when the behavior is changed by advice. Advice can also cause confusion in debugging, if the person doing the debugging does not notice or remember that the function has been modified by advice.</source>
          <target state="translated">&lt;code&gt;advice-add&lt;/code&gt; は、関数全体を再定義することなく、既存の関数への既存の呼び出しの動作を変更するのに役立ちます。ただし、関数の既存の呼び出し元が古い動作を想定し、アドバイスによって動作が変更されると正しく動作しない可能性があるため、バグの原因となる可能性があります。デバッグを行う人がアドバイスによって関数が変更されたことに気づかなかったり覚えていなかったりすると、アドバイスによってデバッグが混乱する可能性もあります。</target>
        </trans-unit>
        <trans-unit id="9b5bc6aebbe4d1ec5567b21d8b250c6288b5aa13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alnum&lt;/code&gt;, &lt;code&gt;alphanumeric&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;alnum&lt;/code&gt; 、 &lt;code&gt;alphanumeric&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="55e0ebe110df9b523af8588d07de74b48311387b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alpha&lt;/code&gt;, &lt;code&gt;alphabetic&lt;/code&gt;, &lt;code&gt;letter&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;alpha&lt;/code&gt; 、 &lt;code&gt;alphabetic&lt;/code&gt; 、 &lt;code&gt;letter&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="258b77970c969f1cf29cda319c3a2f76f3ca3d03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;and&lt;/code&gt; expressions can also be written using either &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;cond&lt;/code&gt;. Here&amp;rsquo;s how:</source>
          <target state="translated">&lt;code&gt;and&lt;/code&gt; 式は &lt;code&gt;if&lt;/code&gt; または &lt;code&gt;cond&lt;/code&gt; のいずれかを使用して記述できます。方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="5c8ce8061acb49230ba8a01fbdf7ed67c9a03473" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, and friends.</source>
          <target state="translated">&lt;code&gt;and&lt;/code&gt; 、 &lt;code&gt;or&lt;/code&gt; 、では &lt;code&gt;not&lt;/code&gt; 、および友人。</target>
        </trans-unit>
        <trans-unit id="6cbffc1a87a05c66112554e09bc35c04c5fa36de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;anychar&lt;/code&gt;, &lt;code&gt;anything&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;anychar&lt;/code&gt; 、 &lt;code&gt;anything&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee4e624b640721bf440e6348f13fadce71c3902a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;apply&lt;/code&gt; calls &lt;var&gt;function&lt;/var&gt; with &lt;var&gt;arguments&lt;/var&gt;, just like &lt;code&gt;funcall&lt;/code&gt; but with one difference: the last of &lt;var&gt;arguments&lt;/var&gt; is a list of objects, which are passed to &lt;var&gt;function&lt;/var&gt; as separate arguments, rather than a single list. We say that &lt;code&gt;apply&lt;/code&gt;&lt;em&gt;spreads&lt;/em&gt; this list so that each individual element becomes an argument.</source>
          <target state="translated">&lt;code&gt;apply&lt;/code&gt; call &lt;var&gt;function&lt;/var&gt; は、 &lt;code&gt;funcall&lt;/code&gt; と同じように &lt;var&gt;arguments&lt;/var&gt; しますが、1つの違いがあります。最後の &lt;var&gt;arguments&lt;/var&gt; はオブジェクトのリストであり、単一のリストではなく、個別の引数として &lt;var&gt;function&lt;/var&gt; 渡されます。 &lt;code&gt;apply&lt;/code&gt; はこのリストを&lt;em&gt;広げ&lt;/em&gt;て、個々の要素が引数になると言います。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c9856e4d3686dbca6454b1252a811ab995dd7923" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;apply&lt;/code&gt; returns the result of calling &lt;var&gt;function&lt;/var&gt;. As with &lt;code&gt;funcall&lt;/code&gt;, &lt;var&gt;function&lt;/var&gt; must either be a Lisp function or a primitive function; special forms and macros do not make sense in &lt;code&gt;apply&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;apply&lt;/code&gt; は、 &lt;var&gt;function&lt;/var&gt; を呼び出した結果を返します。 &lt;code&gt;funcall&lt;/code&gt; と同様に、 &lt;var&gt;function&lt;/var&gt; はLisp関数またはプリミティブ関数のいずれかでなければなりません。特別な形式やマクロは、 &lt;code&gt;apply&lt;/code&gt; では意味がありません。</target>
        </trans-unit>
        <trans-unit id="543192ce173130f8e60f6356c2436ff81754276f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ash&lt;/code&gt; (&lt;em&gt;arithmetic shift&lt;/em&gt;) shifts the bits in &lt;var&gt;integer1&lt;/var&gt; to the left &lt;var&gt;count&lt;/var&gt; places, or to the right if &lt;var&gt;count&lt;/var&gt; is negative. Left shifts introduce zero bits on the right; right shifts discard the rightmost bits. Considered as an integer operation, &lt;code&gt;ash&lt;/code&gt; multiplies &lt;var&gt;integer1&lt;/var&gt; by 2**&lt;var&gt;count&lt;/var&gt;, and then converts the result to an integer by rounding downward, toward minus infinity.</source>
          <target state="translated">&lt;code&gt;ash&lt;/code&gt; （&lt;em&gt;算術シフト&lt;/em&gt;）は、 &lt;var&gt;integer1&lt;/var&gt; のビットを左の &lt;var&gt;count&lt;/var&gt; 位置にシフトし、 &lt;var&gt;count&lt;/var&gt; が負の場合は右にシフトします。左シフトでは、右側にゼロビットが導入されます。右シフトは右端のビットを破棄します。整数演算と &lt;var&gt;integer1&lt;/var&gt; れる &lt;code&gt;ash&lt;/code&gt; は、integer1に2 ** &lt;var&gt;count&lt;/var&gt; を乗算し、マイナスの無限大に向かって下向きに丸めることにより、結果を整数に変換します。</target>
        </trans-unit>
        <trans-unit id="968029e28d94f9920ac5b9f8216de27a4a72f17e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoload&lt;/code&gt; is also effectively &lt;code&gt;eval-and-compile&lt;/code&gt; too. It&amp;rsquo;s recognized when compiling, so uses of such a function don&amp;rsquo;t produce &amp;ldquo;not known to be defined&amp;rdquo; warnings.</source>
          <target state="translated">&lt;code&gt;autoload&lt;/code&gt; も効果的に &lt;code&gt;eval-and-compile&lt;/code&gt; ます。コンパイル時に認識されるため、このような関数を使用しても「定義されていない」という警告は生成されません。</target>
        </trans-unit>
        <trans-unit id="915ee42daeea60e842ed1dda4a1dd9b72a50f128" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;backspace&lt;/code&gt;, &lt;code&gt;tab&lt;/code&gt;, &lt;code&gt;newline&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;backspace&lt;/code&gt; 、 &lt;code&gt;tab&lt;/code&gt; 、 &lt;code&gt;newline&lt;/code&gt; 、 &lt;code&gt;return&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="946f496fb049245538cd4cc7ba5132c40e505caf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bottom-left-angle&lt;/code&gt;, &lt;code&gt;bottom-right-angle&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;bottom-left-angle&lt;/code&gt; 、 &lt;code&gt;bottom-right-angle&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a4c30ff3b0a0eb9c8d6a6aa28cdb76515efbcb0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;buffer-file-coding-system&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; affect sending text to a subprocess.</source>
          <target state="translated">&lt;code&gt;buffer-file-coding-system&lt;/code&gt; は、サブプロセスへのテキストの送信に&lt;em&gt;は&lt;/em&gt;影響し&lt;em&gt;ませ&lt;/em&gt;ん。</target>
        </trans-unit>
        <trans-unit id="107c725c617b4da70945aecf0c2954c9beb9b006" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;catch&lt;/code&gt; establishes a return point for the &lt;code&gt;throw&lt;/code&gt; function. The return point is distinguished from other such return points by &lt;var&gt;tag&lt;/var&gt;, which may be any Lisp object except &lt;code&gt;nil&lt;/code&gt;. The argument &lt;var&gt;tag&lt;/var&gt; is evaluated normally before the return point is established.</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; は、 &lt;code&gt;throw&lt;/code&gt; 関数のリターンポイントを確立します。戻り点は、 &lt;var&gt;tag&lt;/var&gt; によって他のそのような戻り点と区別されます。タグは、 &lt;code&gt;nil&lt;/code&gt; を除く任意のLispオブジェクトです。引数 &lt;var&gt;tag&lt;/var&gt; は、リターンポイントが確立される前に通常評価されます。</target>
        </trans-unit>
        <trans-unit id="156ce65ca7942c7ecfd976b8e12a4e9225a1417d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;close-notification&lt;/code&gt; if the notification was closed by a call to &lt;code&gt;notifications-close-notification&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;close-notification&lt;/code&gt; 通知はへの呼び出しによって閉じられた場合は &lt;code&gt;notifications-close-notification&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="344540fc9932e2a7fe71c70a031687cce00941a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cntrl&lt;/code&gt;, &lt;code&gt;control&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;cntrl&lt;/code&gt; 、 &lt;code&gt;control&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3abbbe55e10afc6f9cf312b234ef5f28aa43d773" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compile-defun&lt;/code&gt; normally displays the result of evaluation in the echo area, but if &lt;var&gt;arg&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, it inserts the result in the current buffer after the form it has compiled.</source>
          <target state="translated">&lt;code&gt;compile-defun&lt;/code&gt; は通常、評価の結果をエコー領域に表示しますが、 &lt;var&gt;arg&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の場合、コンパイルしたフォームの後に現在のバッファーに結果を挿入します。</target>
        </trans-unit>
        <trans-unit id="0f9e94627d25b926f591b1e1c255e6cd7722db03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;completing-read&lt;/code&gt; uses this value as the local keymap when an exact match of one of the completions is not required. By default, this keymap makes the following bindings:</source>
          <target state="translated">&lt;code&gt;completing-read&lt;/code&gt; は、完了の1つと完全に一致する必要がない場合に、この値をローカルキーマップとして使用します。デフォルトでは、このキーマップは次のバインディングを作成します。</target>
        </trans-unit>
        <trans-unit id="74ad6806c122f9cb293d13928c1c9f99fd4f37a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;completing-read&lt;/code&gt; uses this value as the local keymap when an exact match of one of the completions is required. Therefore, no keys are bound to &lt;code&gt;exit-minibuffer&lt;/code&gt;, the command that exits the minibuffer unconditionally. By default, this keymap makes the following bindings:</source>
          <target state="translated">&lt;code&gt;completing-read&lt;/code&gt; は、完了の1つと完全に一致する必要がある場合に、この値をローカルキーマップとして使用します。したがって、無条件にミニバッファを終了するコマンドである &lt;code&gt;exit-minibuffer&lt;/code&gt; にキーがバインドされることはありません。デフォルトでは、このキーマップは次のバインディングを作成します。</target>
        </trans-unit>
        <trans-unit id="c2ce8658f4068cd02c2cf6c073921a3359734353" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cond&lt;/code&gt; chooses among an arbitrary number of alternatives. Each &lt;var&gt;clause&lt;/var&gt; in the &lt;code&gt;cond&lt;/code&gt; must be a list. The &lt;small&gt;CAR&lt;/small&gt; of this list is the &lt;var&gt;condition&lt;/var&gt;; the remaining elements, if any, the &lt;var&gt;body-forms&lt;/var&gt;. Thus, a clause looks like this:</source>
          <target state="translated">&lt;code&gt;cond&lt;/code&gt; は、任意の数の選択肢の中から選択します。 &lt;code&gt;cond&lt;/code&gt; の各 &lt;var&gt;clause&lt;/var&gt; はリストである必要があります。このリストの&lt;small&gt;CAR&lt;/small&gt;は &lt;var&gt;condition&lt;/var&gt; です; 残りの要素は、もしあれば、 &lt;var&gt;body-forms&lt;/var&gt; です。したがって、句は次のようになります。&lt;small&gt;&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d86b25e6a88950288688d5cde9d105628656c282" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cond&lt;/code&gt; tries the clauses in textual order, by evaluating the &lt;var&gt;condition&lt;/var&gt; of each clause. If the value of &lt;var&gt;condition&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, the clause succeeds; then &lt;code&gt;cond&lt;/code&gt; evaluates its &lt;var&gt;body-forms&lt;/var&gt;, and returns the value of the last of &lt;var&gt;body-forms&lt;/var&gt;. Any remaining clauses are ignored.</source>
          <target state="translated">&lt;code&gt;cond&lt;/code&gt; は、各句の &lt;var&gt;condition&lt;/var&gt; を評価することにより、テキスト順に句を試行します。値場合 &lt;var&gt;condition&lt;/var&gt; 非ある &lt;code&gt;nil&lt;/code&gt; 、句は成功し、次に、 &lt;code&gt;cond&lt;/code&gt; はその &lt;var&gt;body-forms&lt;/var&gt; を評価し、最後の &lt;var&gt;body-forms&lt;/var&gt; の値を返します。残りの句はすべて無視されます。</target>
        </trans-unit>
        <trans-unit id="fdb0af8dfd8be2e8ae3cbfe120787af9b87bf7b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;condition-case&lt;/code&gt; (see &lt;a href=&quot;errors#Errors&quot;&gt;Errors&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;condition-case&lt;/code&gt; （&lt;a href=&quot;errors#Errors&quot;&gt;エラーを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a6580f4efb6d6c9f789a125e8465845469547a7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;condition-notify&lt;/code&gt; releases the associated mutex while waiting. This allows other threads to acquire the mutex in order to wait on the condition.</source>
          <target state="translated">&lt;code&gt;condition-notify&lt;/code&gt; は、待機中に関連するミューテックスを解放します。これにより、他のスレッドが条件を待機するためにミューテックスを取得できるようになります。</target>
        </trans-unit>
        <trans-unit id="8437ca185db531b06367cb4346d8260607338a2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;condition-wait&lt;/code&gt; releases the associated mutex while waiting. This allows other threads to acquire the mutex in order to notify the condition.</source>
          <target state="translated">&lt;code&gt;condition-wait&lt;/code&gt; は、待機中に関連するミューテックスを解放します。これにより、他のスレッドが状態を通知するためにミューテックスを取得できるようになります。</target>
        </trans-unit>
        <trans-unit id="ccd4e34801f17b7a3fc04d72bc18102aa79bedcb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cons&lt;/code&gt; is often used to add a single element to the front of a list. This is called &lt;em&gt;consing the element onto the list&lt;/em&gt;. &lt;a href=&quot;#FOOT4&quot; name=&quot;DOCF4&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; For example:</source>
          <target state="translated">&lt;code&gt;cons&lt;/code&gt; は、リストの先頭に1つの要素を追加するためによく使用されます。これは&lt;em&gt;、要素をリストに追加すること&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。&lt;a href=&quot;#FOOT4&quot; name=&quot;DOCF4&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;例：</target>
        </trans-unit>
        <trans-unit id="b38a6ad2ed893ce1ea657ffbd022f9f0ab0a4705" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ctl-x-4-map&lt;/code&gt; is the global keymap used for the</source>
          <target state="translated">&lt;code&gt;ctl-x-4-map&lt;/code&gt; は、に使用されるグローバルキーマップです。</target>
        </trans-unit>
        <trans-unit id="036bac0feee09c67b7f81e2405656a5bd88c0a36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ctl-x-5-map&lt;/code&gt; is the global keymap used for the</source>
          <target state="translated">&lt;code&gt;ctl-x-5-map&lt;/code&gt; は、に使用されるグローバルキーマップです。</target>
        </trans-unit>
        <trans-unit id="645c950388b00cd4f5f82802b0b36167e7f5cab9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ctl-x-map&lt;/code&gt; is the global keymap used for the</source>
          <target state="translated">&lt;code&gt;ctl-x-map&lt;/code&gt; は、に使用されるグローバルキーマップです。</target>
        </trans-unit>
        <trans-unit id="bc2d1647b4cc96f41ed5000b4f82d722e0eedffe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;current-local-map&lt;/code&gt; returns a reference to the local keymap, not a copy of it; if you use &lt;code&gt;define-key&lt;/code&gt; or other functions on it you will alter local bindings.</source>
          <target state="translated">&lt;code&gt;current-local-map&lt;/code&gt; は、ローカルキーマップのコピーではなく、ローカルキーマップへの参照を返します。その上で &lt;code&gt;define-key&lt;/code&gt; または他の関数を使用すると、ローカルバインディングが変更されます。</target>
        </trans-unit>
        <trans-unit id="51c9fd0ac637d6e499a4fa7b3f7d1d6a62ef6a86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cursor-in-echo-area&lt;/code&gt; is locally bound to &lt;code&gt;nil&lt;/code&gt; so that the cursor shows up in the window.</source>
          <target state="translated">&lt;code&gt;cursor-in-echo-area&lt;/code&gt; はローカルで &lt;code&gt;nil&lt;/code&gt; にバインドされているため、カーソルはウィンドウに表示されます。</target>
        </trans-unit>
        <trans-unit id="dde4dbb3472d8335edeac01bd24bdb83e60b9415" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data-directory&lt;/code&gt;/images</source>
          <target state="translated">&lt;code&gt;data-directory&lt;/code&gt;/images</target>
        </trans-unit>
        <trans-unit id="934a2252e658e61b0e8e140170bcdaf3db4fe9a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;debug&lt;/code&gt; as first argument means &lt;code&gt;debug&lt;/code&gt; was called because of entry to a function that was set to debug on entry. The debugger displays the string &amp;lsquo;</source>
          <target state="translated">&lt;code&gt;debug&lt;/code&gt; 最初の引数手段として &lt;code&gt;debug&lt;/code&gt; ためのエントリでのデバッグに設定された関数へのエントリで呼ばれていました。デバッガーは文字列 'を表示します</target>
        </trans-unit>
        <trans-unit id="5408ee3a5ae30f1b73e2236ceb15094b6b7e60de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;declare&lt;/code&gt; is a special macro which can be used to add meta properties to a function or macro: for example, marking it as obsolete, or giving its forms a special</source>
          <target state="translated">&lt;code&gt;declare&lt;/code&gt; は、関数またはマクロにメタプロパティを追加するために使用できる特別なマクロです。たとえば、廃止としてマークしたり、フォームに特別なものを与えたりします。</target>
        </trans-unit>
        <trans-unit id="e948495adb03f74ecb74007271523cddadcd35a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default-boundp&lt;/code&gt; is to &lt;code&gt;default-value&lt;/code&gt; as &lt;code&gt;boundp&lt;/code&gt; is to &lt;code&gt;symbol-value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;default-boundp&lt;/code&gt; は &lt;code&gt;default-value&lt;/code&gt; になり、 &lt;code&gt;boundp&lt;/code&gt; は &lt;code&gt;symbol-value&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="f750ad0e57affc67c45a2f12853a28fd6ccb4c86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defconst&lt;/code&gt; always evaluates &lt;var&gt;value&lt;/var&gt;, and sets the value of &lt;var&gt;symbol&lt;/var&gt; to the result. If &lt;var&gt;symbol&lt;/var&gt; does have a buffer-local binding in the current buffer, &lt;code&gt;defconst&lt;/code&gt; sets the default value, not the buffer-local value. (But you should not be making buffer-local bindings for a symbol that is defined with &lt;code&gt;defconst&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;defconst&lt;/code&gt; は常に評価 &lt;var&gt;value&lt;/var&gt; 、との値に設定 &lt;var&gt;symbol&lt;/var&gt; 結果に。 &lt;var&gt;symbol&lt;/var&gt; の現在のバッファにバッファローカルバインディングがある場合、 &lt;code&gt;defconst&lt;/code&gt; はバッファローカル値ではなくデフォルト値を設定します。（ただし、 &lt;code&gt;defconst&lt;/code&gt; で定義されたシンボルに対してバッファーローカルバインディングを作成するべきではありません。）</target>
        </trans-unit>
        <trans-unit id="12dee0792bdf9b486bfd740498d0eadb2c152801" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defcustom&lt;/code&gt;, &lt;code&gt;defgroup&lt;/code&gt;, &lt;code&gt;defclass&lt;/code&gt; (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/eieio/index.html#Top&quot;&gt;EIEIO&lt;/a&gt; in</source>
          <target state="translated">&lt;code&gt;defcustom&lt;/code&gt; 、 &lt;code&gt;defgroup&lt;/code&gt; 、 &lt;code&gt;defclass&lt;/code&gt; （の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/eieio/index.html#Top&quot;&gt;EIEIO&lt;/a&gt;を参照）</target>
        </trans-unit>
        <trans-unit id="012f5d01fd0d5a5d01a85ae0f6957fec801c9a45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defimage&lt;/code&gt; tests each argument, one by one, to see if it is usable&amp;mdash;that is, if the type is supported and the file exists. The first usable argument is used to make an image descriptor which is stored in &lt;var&gt;symbol&lt;/var&gt;.</source>
          <target state="translated">&lt;code&gt;defimage&lt;/code&gt; は、各引数を1つずつテストして、使用可能かどうか、つまり、型がサポートされていてファイルが存在するかどうかを確認します。最初の使用可能な引数は、 &lt;var&gt;symbol&lt;/var&gt; 格納される画像記述子を作成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="65612ea68e9ef580a07b967a84376d66e7d1511f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;define-abbrev&lt;/code&gt; is the low-level basic function for defining an abbrev in an abbrev table.</source>
          <target state="translated">&lt;code&gt;define-abbrev&lt;/code&gt; は、略語テーブルで略語を定義するための低レベルの基本関数です。</target>
        </trans-unit>
        <trans-unit id="f93257cd24b7904a7e36862707a2b00198231632" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;define-minor-mode&lt;/code&gt;, &lt;code&gt;define-globalized-minor-mode&lt;/code&gt;, &lt;code&gt;define-generic-mode&lt;/code&gt;, &lt;code&gt;define-derived-mode&lt;/code&gt;, &lt;code&gt;easy-mmode-define-minor-mode&lt;/code&gt;, &lt;code&gt;easy-mmode-define-global-mode&lt;/code&gt;, &lt;code&gt;define-compilation-mode&lt;/code&gt;, and &lt;code&gt;define-global-minor-mode&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;define-minor-mode&lt;/code&gt; 、 &lt;code&gt;define-globalized-minor-mode&lt;/code&gt; 、 &lt;code&gt;define-generic-mode&lt;/code&gt; 、 &lt;code&gt;easy-mmode-define-minor-mode&lt;/code&gt; &lt;code&gt;define-derived-mode&lt;/code&gt; -mode、easy-mmode-define-minor-mode、 &lt;code&gt;easy-mmode-define-global-mode&lt;/code&gt; 、 &lt;code&gt;define-compilation-mode&lt;/code&gt; 、 &lt;code&gt;define-global-minor-mode&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9ad858ca1737d12f8ddf97a19595ffe87722585d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defmacro&lt;/code&gt; defines a symbol as a macro. It creates a macro object and stores it in the function cell of the symbol. Note that a given symbol can be a macro or a function, but not both at once, because both macro and function definitions are kept in the function cell, and that cell can hold only one Lisp object at any given time. See &lt;a href=&quot;macros#Macros&quot;&gt;Macros&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;defmacro&lt;/code&gt; は、シンボルをマクロとして定義します。マクロオブジェクトを作成し、シンボルの関数セルに格納します。マクロと関数の両方の定義が関数セルに保持され、そのセルは常に1つのLispオブジェクトしか保持できないため、特定のシンボルはマクロまたは関数にすることができますが、同時に両方にすることはできません。&lt;a href=&quot;macros#Macros&quot;&gt;マクロを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cb8d765d8f8a2f740e70c10fe1ba95bc9a6f3810" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defmacro&lt;/code&gt; defines the symbol &lt;var&gt;name&lt;/var&gt; (which should not be quoted) as a macro that looks like this:</source>
          <target state="translated">&lt;code&gt;defmacro&lt;/code&gt; は、シンボル &lt;var&gt;name&lt;/var&gt; （引用符で囲まないでください）を次のようなマクロとして定義します。</target>
        </trans-unit>
        <trans-unit id="01769f0bc967504ad48bb76fcab17f7c05016973" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defun&lt;/code&gt; and &lt;code&gt;defmacro&lt;/code&gt;; also &lt;code&gt;cl-defun&lt;/code&gt; and &lt;code&gt;cl-defmacro&lt;/code&gt; (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/cl/Argument-Lists.html#Argument-Lists&quot;&gt;Argument Lists&lt;/a&gt; in</source>
          <target state="translated">&lt;code&gt;defun&lt;/code&gt; と &lt;code&gt;defmacro&lt;/code&gt; ; また、 &lt;code&gt;cl-defun&lt;/code&gt; と &lt;code&gt;cl-defmacro&lt;/code&gt; （参照&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/cl/Argument-Lists.html#Argument-Lists&quot;&gt;引数リストを&lt;/a&gt;中</target>
        </trans-unit>
        <trans-unit id="b647875bc6007b6250b773099308720656737afa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defun&lt;/code&gt; defines a symbol as a function, creating a lambda expression and storing it in the function cell of the symbol. This lambda expression thus becomes the function definition of the symbol. (The term &amp;ldquo;function definition&amp;rdquo;, meaning the contents of the function cell, is derived from the idea that &lt;code&gt;defun&lt;/code&gt; gives the symbol its definition as a function.) &lt;code&gt;defsubst&lt;/code&gt; and &lt;code&gt;defalias&lt;/code&gt; are two other ways of defining a function. See &lt;a href=&quot;functions#Functions&quot;&gt;Functions&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;defun&lt;/code&gt; はシンボルを関数として定義し、ラムダ式を作成してシンボルの関数セルに格納します。したがって、このラムダ式はシンボルの関数定義になります。 （関数セルの内容を意味する「関数定義」という用語は、 &lt;code&gt;defun&lt;/code&gt; がシンボルに関数としての定義を与えるという考えに由来しています。） &lt;code&gt;defsubst&lt;/code&gt; と &lt;code&gt;defalias&lt;/code&gt; は、関数を定義する他の2つの方法です。&lt;a href=&quot;functions#Functions&quot;&gt;関数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="152769b81ca9a1e399de93e4483e4b2b25d12e27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defun&lt;/code&gt; is the usual way to define new Lisp functions. It defines the symbol &lt;var&gt;name&lt;/var&gt; as a function with argument list &lt;var&gt;args&lt;/var&gt; and body forms given by &lt;var&gt;body&lt;/var&gt;. Neither &lt;var&gt;name&lt;/var&gt; nor &lt;var&gt;args&lt;/var&gt; should be quoted.</source>
          <target state="translated">&lt;code&gt;defun&lt;/code&gt; は、新しいLisp関数を定義する通常の方法です。これは、シンボルの定義 &lt;var&gt;name&lt;/var&gt; 引数リストを持つ関数としての &lt;var&gt;args&lt;/var&gt; で与えられ、身体の形 &lt;var&gt;body&lt;/var&gt; 。どちらの &lt;var&gt;name&lt;/var&gt; も &lt;var&gt;args&lt;/var&gt; 引用符で囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="56917c3bbaff8b95c5489feaa298d6f87beca6dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defvar&lt;/code&gt; and &lt;code&gt;defconst&lt;/code&gt; are special forms that define a symbol as a &lt;em&gt;global variable&lt;/em&gt;&amp;mdash;a variable that can be accessed at any point in a Lisp program. See &lt;a href=&quot;variables#Variables&quot;&gt;Variables&lt;/a&gt;, for details about variables. To define a customizable variable, use the &lt;code&gt;defcustom&lt;/code&gt; macro, which also calls &lt;code&gt;defvar&lt;/code&gt; as a subroutine (see &lt;a href=&quot;customization#Customization&quot;&gt;Customization&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;defvar&lt;/code&gt; と &lt;code&gt;defconst&lt;/code&gt; は、シンボルを&lt;em&gt;グローバル変数（&lt;/em&gt; Lispプログラムの任意の時点でアクセスできる&lt;em&gt;変数）&lt;/em&gt;として定義する特殊な形式です。参照&lt;a href=&quot;variables#Variables&quot;&gt;変数の&lt;/a&gt;変数の詳細については、。カスタマイズ可能な変数を定義するには、 &lt;code&gt;defcustom&lt;/code&gt; マクロを使用します。このマクロは、サブルーチンとして &lt;code&gt;defvar&lt;/code&gt; も呼び出します（「&lt;a href=&quot;customization#Customization&quot;&gt;カスタマイズ&lt;/a&gt;」を参照）。</target>
        </trans-unit>
        <trans-unit id="3eb2267cae74dc899c4fbba26cfe21e3ea5b6517" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delete-blank-lines&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;delete-blank-lines&lt;/code&gt; は &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f840984ec3795b6f839ea590accd0745c89aaf79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delete-directory&lt;/code&gt; only follows symbolic links at the level of parent directories.</source>
          <target state="translated">&lt;code&gt;delete-directory&lt;/code&gt; は、親ディレクトリのレベルでのみシンボリックリンクをたどります。</target>
        </trans-unit>
        <trans-unit id="8b4225e31b19638d22dc17fbb44550f51340cfd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;digit&lt;/code&gt;, &lt;code&gt;numeric&lt;/code&gt;, &lt;code&gt;num&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;digit&lt;/code&gt; 、 &lt;code&gt;numeric&lt;/code&gt; 、 &lt;code&gt;num&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a908719f62b48c099dab98a459ed559d227965c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dismissed&lt;/code&gt; if the notification was dismissed by the user</source>
          <target state="translated">&lt;code&gt;dismissed&lt;/code&gt; 通知がユーザーによって却下された場合</target>
        </trans-unit>
        <trans-unit id="e907d769ab6400ef158c183eb829b092f502e5ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;display-buffer-alist&lt;/code&gt; and &lt;code&gt;display-buffer-base-action&lt;/code&gt; are user options&amp;mdash;Lisp programs must never set or rebind them. &lt;code&gt;display-buffer-overriding-action&lt;/code&gt;, on the other hand, is reserved for applications&amp;mdash;who seldom use that option and if they use it, then with utmost care.</source>
          <target state="translated">&lt;code&gt;display-buffer-alist&lt;/code&gt; と &lt;code&gt;display-buffer-base-action&lt;/code&gt; はユーザーオプションです。Lispプログラムはそれらを設定または再バインドしてはなりません。一方、 &lt;code&gt;display-buffer-overriding-action&lt;/code&gt; は、アプリケーション用に予約されています。アプリケーションは、そのオプションをほとんど使用せず、使用する場合は細心の注意を払っています。</target>
        </trans-unit>
        <trans-unit id="14d1ad1d34836cb877fe7eddc4cca15ca9bee5c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;display-buffer&lt;/code&gt; calls the action functions specified by this list in turn, passing the buffer as the first argument and the combined action alist as the second argument, until one of the functions returns non-&lt;code&gt;nil&lt;/code&gt;. See &lt;a href=&quot;precedence-of-action-functions#Precedence-of-Action-Functions&quot;&gt;Precedence of Action Functions&lt;/a&gt;, for examples how display actions specified by different sources are processed by &lt;code&gt;display-buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;display-buffer&lt;/code&gt; は、このリストで指定されたアクション関数を順番に呼び出し、関数の1つが &lt;code&gt;nil&lt;/code&gt; 返すまで、バッファーを最初の引数として渡し、結合されたアクションalistを2番目の引数として渡します。さまざまなソースによって指定された表示アクションが &lt;code&gt;display-buffer&lt;/code&gt; によって処理される方法の例について&lt;a href=&quot;precedence-of-action-functions#Precedence-of-Action-Functions&quot;&gt;は、アクション関数の優先順位を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ee6044593bc3c007fee9246a9041dc268f757d82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;display-buffer&lt;/code&gt; delegates the task of finding a suitable window to so-called action functions (see &lt;a href=&quot;buffer-display-action-functions#Buffer-Display-Action-Functions&quot;&gt;Buffer Display Action Functions&lt;/a&gt;). First, &lt;code&gt;display-buffer&lt;/code&gt; compiles a so-called action alist&amp;mdash;a special association list that action functions can use to fine-tune their behavior. Then it passes that alist on to each action function it calls (see &lt;a href=&quot;buffer-display-action-alists#Buffer-Display-Action-Alists&quot;&gt;Buffer Display Action Alists&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;display-buffer&lt;/code&gt; は、適切なウィンドウを見つけるタスクをいわゆるアクション関数に委任します（&lt;a href=&quot;buffer-display-action-functions#Buffer-Display-Action-Functions&quot;&gt;バッファー表示アクション関数を&lt;/a&gt;参照）。まず、 &lt;code&gt;display-buffer&lt;/code&gt; は、いわゆるアクションリストをコンパイルします。これは、アクション関数が動作を微調整するために使用できる特別な関連付けリストです。次に、その&lt;a href=&quot;buffer-display-action-alists#Buffer-Display-Action-Alists&quot;&gt;リストを&lt;/a&gt;、呼び出す各アクション関数に渡します（Buffer Display Action Alistsを参照）。</target>
        </trans-unit>
        <trans-unit id="f227d53c9e56460fd790779757e8a90bd347614f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;display-buffer&lt;/code&gt; is not overly well suited for displaying several buffers in sequence and making sure that all these buffers are shown orderly in the resulting window configuration. Again, the standard action functions &lt;code&gt;display-buffer-pop-up-window&lt;/code&gt; and &lt;code&gt;display-buffer-use-some-window&lt;/code&gt; are not very suited for this purpose due to their somewhat chaotic nature in more complex configurations.</source>
          <target state="translated">&lt;code&gt;display-buffer&lt;/code&gt; は、複数のバッファーを順番に表示し、これらすべてのバッファーが結果のウィンドウ構成で順番に表示されるようにするのにあまり適していません。繰り返しになりますが、標準のアクション関数 &lt;code&gt;display-buffer-pop-up-window&lt;/code&gt; と &lt;code&gt;display-buffer-use-some-window&lt;/code&gt; は、より複雑な構成ではやや混沌とした性質があるため、この目的にはあまり適していません。</target>
        </trans-unit>
        <trans-unit id="d64a554d77989581707b51f284c6e6248aa81ec2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;display-buffer&lt;/code&gt; works by combining display actions from several sources, and calling the action functions in turn, until one of them manages to display the buffer and returns a non-&lt;code&gt;nil&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;display-buffer&lt;/code&gt; は、複数のソースからの表示アクションを組み合わせ、アクション関数を順番に呼び出して、そのうちの1つがバッファーの表示に &lt;code&gt;nil&lt;/code&gt; し、nil以外の値を返すまで機能します。</target>
        </trans-unit>
        <trans-unit id="c1d4765f3824d06ce66d790e3171caf102615dee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;edebug-tracing&lt;/code&gt; and &lt;code&gt;edebug-trace&lt;/code&gt; insert lines in the trace buffer whenever they are called, even if Edebug is not active. Adding text to the trace buffer also scrolls its window to show the last lines inserted.</source>
          <target state="translated">&lt;code&gt;edebug-tracing&lt;/code&gt; および &lt;code&gt;edebug-trace&lt;/code&gt; は、Edebugがアクティブでない場合でも、呼び出されるたびにトレースバッファに行を挿入します。トレースバッファにテキストを追加すると、ウィンドウがスクロールして、最後に挿入された行が表示されます。</target>
        </trans-unit>
        <trans-unit id="a3f2415c34e4a3793e8232f202cffcf43789c5b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error&lt;/code&gt; works by calling &lt;code&gt;signal&lt;/code&gt; with two arguments: the error symbol &lt;code&gt;error&lt;/code&gt;, and a list containing the string returned by &lt;code&gt;format-message&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; は、エラーシンボル &lt;code&gt;error&lt;/code&gt; と、 &lt;code&gt;format-message&lt;/code&gt; によって返される文字列を含むリストの2つの引数を使用して &lt;code&gt;signal&lt;/code&gt; を呼び出すことによって機能します。</target>
        </trans-unit>
        <trans-unit id="e6880af6d200f2ca04ff4195004b0ab2299113fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;esc-map&lt;/code&gt; is the global keymap for the</source>
          <target state="translated">&lt;code&gt;esc-map&lt;/code&gt; は、のグローバルキーマップです。</target>
        </trans-unit>
        <trans-unit id="7f8cd7311207af652cc522fd80e074dcb6e7e056" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval-current-buffer&lt;/code&gt; is an alias for this command.</source>
          <target state="translated">&lt;code&gt;eval-current-buffer&lt;/code&gt; は、このコマンドのエイリアスです。</target>
        </trans-unit>
        <trans-unit id="56f57ab8e49b20109332e2ec24f457692e98e579" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval-region&lt;/code&gt; does not move point. It always returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;eval-region&lt;/code&gt; はポイントを移動しません。常に &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9ad1f65d94f09547d3da4083875674afe6e969a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exclamation-mark&lt;/code&gt;, &lt;code&gt;question-mark&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;exclamation-mark&lt;/code&gt; 、 &lt;code&gt;question-mark&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="40521d850dea7dce49a507b35bd302f3a54c8926" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;execute-extended-command&lt;/code&gt; is the normal definition of</source>
          <target state="translated">&lt;code&gt;execute-extended-command&lt;/code&gt; は、の通常の定義です。</target>
        </trans-unit>
        <trans-unit id="6cf89b7da2a6174c3f8e679617a63de5d2e383ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expand-file-name&lt;/code&gt; uses the default directory when its second argument is &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;expand-file-name&lt;/code&gt; 2番目の引数が &lt;code&gt;nil&lt;/code&gt; の場合、expand-file-nameはデフォルトのディレクトリを使用します。</target>
        </trans-unit>
        <trans-unit id="5c9062e5a9494acbeb71a2172655b2ae069bc217" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expired&lt;/code&gt; if the notification has expired</source>
          <target state="translated">&lt;code&gt;expired&lt;/code&gt; 通知の有効期限が切れている場合は有効期限が切れています</target>
        </trans-unit>
        <trans-unit id="d53f261a510c119d203db947e2ce5638e5bea95c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;facemenu-keymap&lt;/code&gt; is the global keymap used for the</source>
          <target state="translated">&lt;code&gt;facemenu-keymap&lt;/code&gt; は、に使用されるグローバルキーマップです。</target>
        </trans-unit>
        <trans-unit id="96b2d34869a0042346118c9a1c97c40bcab3a087" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;file-name-completion&lt;/code&gt; usually ignores file names that end in any string in this list. It does not ignore them when all the possible completions end in one of these suffixes. This variable has no effect on &lt;code&gt;file-name-all-completions&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;file-name-completion&lt;/code&gt; は通常、このリスト内の任意の文字列で終わるファイル名を無視します。可能なすべての補完がこれらの接尾辞の1つで終わる場合、それらを無視しません。この変数は、 &lt;code&gt;file-name-all-completions&lt;/code&gt; には影響しません。</target>
        </trans-unit>
        <trans-unit id="b3f4cf9c9f44781f17e7b70a6e9267aa8b348f35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filled-rectangle&lt;/code&gt;, &lt;code&gt;hollow-rectangle&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;filled-rectangle&lt;/code&gt; 、 &lt;code&gt;hollow-rectangle&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="63b0bf27eaf099c7a2aba78987210d1f60b20dc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filled-square&lt;/code&gt;, &lt;code&gt;hollow-square&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;filled-square&lt;/code&gt; 、 &lt;code&gt;hollow-square&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b151e0b46584e52a571005d89553b79e3782e2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt;: Emacs&amp;rsquo;s analogue of &lt;code&gt;printf&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; ：Emacsの &lt;code&gt;printf&lt;/code&gt; のアナログ。</target>
        </trans-unit>
        <trans-unit id="0319a37175b95184201be0902c9bbe3c803de352" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-line&lt;/code&gt; returns the difference between &lt;var&gt;count&lt;/var&gt; and the number of lines actually moved. If you attempt to move down five lines from the beginning of a buffer that has only three lines, point stops at the end of the last line, and the value will be 2. As an explicit exception, if the last accessible line is non-empty, but has no newline (e.g., if the buffer ends without a newline), the function sets point to the end of that line, and the value returned by the function counts that line as one line successfully moved.</source>
          <target state="translated">&lt;code&gt;forward-line&lt;/code&gt; は、 &lt;var&gt;count&lt;/var&gt; と実際に移動された行数の差を返します。3行しかないバッファの先頭から5行下に移動しようとすると、ポイントは最後の行の終わりで停止し、値は2になります。明示的な例外として、最後のアクセス可能な行が非空ですが、改行がありません（たとえば、バッファーが改行なしで終了する場合）。関数セットはその行の終わりを指し、関数によって返される値は、その行を1行が正常に移動したものとしてカウントします。</target>
        </trans-unit>
        <trans-unit id="9fb006a1606ebf156dd571dfdde441e64a22ee51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;funcall&lt;/code&gt; calls &lt;var&gt;function&lt;/var&gt; with &lt;var&gt;arguments&lt;/var&gt;, and returns whatever &lt;var&gt;function&lt;/var&gt; returns.</source>
          <target state="translated">&lt;code&gt;funcall&lt;/code&gt; のは、呼び出す &lt;var&gt;function&lt;/var&gt; と &lt;var&gt;arguments&lt;/var&gt; 、戻りどんな &lt;var&gt;function&lt;/var&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5ee061b6998fb423f324fd8ff9a9a90f8bd371bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;garbage-collect&lt;/code&gt; returns a list with information on amount of space in use, where each entry has the form &amp;lsquo;</source>
          <target state="translated">&lt;code&gt;garbage-collect&lt;/code&gt; は、使用中のスペースの量に関する情報を含むリストを返します。各エントリの形式は 'です。</target>
        </trans-unit>
        <trans-unit id="e8f473f7afedf2216e2bb733f7d1ce2bfec20e81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;goto-char&lt;/code&gt; returns &lt;var&gt;position&lt;/var&gt;.</source>
          <target state="translated">&lt;code&gt;goto-char&lt;/code&gt; は &lt;var&gt;position&lt;/var&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="66c22645f673d359bd032afd87fb1bda780e5783" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;goto-map&lt;/code&gt; is the global keymap used for the</source>
          <target state="translated">&lt;code&gt;goto-map&lt;/code&gt; は、に使用されるグローバルキーマップです。</target>
        </trans-unit>
        <trans-unit id="8eac353d9cbc652ce59f1d95e7cab268e9264776" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;graph&lt;/code&gt;, &lt;code&gt;graphic&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;graph&lt;/code&gt; 、 &lt;code&gt;graphic&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cc4b408f601dfd18211762a1f31289581f4d6d7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;help-map&lt;/code&gt; is the global keymap for the</source>
          <target state="translated">&lt;code&gt;help-map&lt;/code&gt; は、のグローバルキーマップです。</target>
        </trans-unit>
        <trans-unit id="d8a2acd22017b9816e7a1b9eb88b311cea6e2d74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; chooses between the &lt;var&gt;then-form&lt;/var&gt; and the &lt;var&gt;else-forms&lt;/var&gt; based on the value of &lt;var&gt;condition&lt;/var&gt;. If the evaluated &lt;var&gt;condition&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, &lt;var&gt;then-form&lt;/var&gt; is evaluated and the result returned. Otherwise, the &lt;var&gt;else-forms&lt;/var&gt; are evaluated in textual order, and the value of the last one is returned. (The &lt;var&gt;else&lt;/var&gt; part of &lt;code&gt;if&lt;/code&gt; is an example of an implicit &lt;code&gt;progn&lt;/code&gt;. See &lt;a href=&quot;sequencing#Sequencing&quot;&gt;Sequencing&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; &lt;var&gt;condition&lt;/var&gt; の値に基づいて &lt;var&gt;then-form&lt;/var&gt; と &lt;var&gt;else-forms&lt;/var&gt; -formのどちらかを選択する場合。評価された &lt;var&gt;condition&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の &lt;var&gt;then-form&lt;/var&gt; 、-formが評価され、結果が返されます。それ以外の場合、 &lt;var&gt;else-forms&lt;/var&gt; はテキスト順に評価され、最後のフォームの値が返されます。（ &lt;var&gt;else&lt;/var&gt; の一部 &lt;code&gt;if&lt;/code&gt; 、暗黙的な例である &lt;code&gt;progn&lt;/code&gt; 。を参照してください&lt;a href=&quot;sequencing#Sequencing&quot;&gt;シーケンシング&lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="a54485aa58de9cb2289aa67ac7fdf50fdb9aa0df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; is a special form because the branch that is not selected is never evaluated&amp;mdash;it is ignored. Thus, in this example, &lt;code&gt;true&lt;/code&gt; is not printed because &lt;code&gt;print&lt;/code&gt; is never called:</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 選択されていないブランチは評価されないため、ifは特殊な形式であり、無視されます。したがって、この例では、 &lt;code&gt;print&lt;/code&gt; が呼び出されないため、 &lt;code&gt;true&lt;/code&gt; は出力されません。</target>
        </trans-unit>
        <trans-unit id="6ef7e796b7e6b6881e2794286c19b66d90407fc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;cond&lt;/code&gt;, &lt;code&gt;when&lt;/code&gt;, &lt;code&gt;unless&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;cond&lt;/code&gt; 、 &lt;code&gt;when&lt;/code&gt; 、 &lt;code&gt;unless&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="56df690091e9e1e1d78c541ae39c8a9446bfb9c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indent-region&lt;/code&gt; with a non-&lt;code&gt;nil&lt;/code&gt; argument &lt;var&gt;to-column&lt;/var&gt; has a different meaning and does not use this variable.</source>
          <target state="translated">&lt;code&gt;indent-region&lt;/code&gt; 非と &lt;code&gt;nil&lt;/code&gt; 引数 &lt;var&gt;to-column&lt;/var&gt; 別の意味を持っており、この変数を使用していません。</target>
        </trans-unit>
        <trans-unit id="29940b6669ea18ccc514f7f5deaf6a35beb7ed92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inhibit-startup-message&lt;/code&gt; and &lt;code&gt;inhibit-splash-screen&lt;/code&gt; are aliases for this variable.</source>
          <target state="translated">&lt;code&gt;inhibit-startup-message&lt;/code&gt; と &lt;code&gt;inhibit-splash-screen&lt;/code&gt; は、この変数のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="29a11d8eb74550c13ad46f3f07785cf2e8353c3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;insert-file-contents&lt;/code&gt; and &lt;code&gt;write-region&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;insert-file-contents&lt;/code&gt; および &lt;code&gt;write-region&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc1819efabcf2c79e08931073dd0c99baeef175f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int-to-string&lt;/code&gt; is a semi-obsolete alias for this function.</source>
          <target state="translated">&lt;code&gt;int-to-string&lt;/code&gt; は、この関数の半ば廃止されたエイリアスです。</target>
        </trans-unit>
        <trans-unit id="cb18fb2d174e74648ae14f7c5881fe0d47fa5e84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iter-defun&lt;/code&gt; defines a generator function. A generator function has the same signature as a normal function, but works differently. Instead of executing &lt;var&gt;body&lt;/var&gt; when called, a generator function returns an iterator object. That iterator runs &lt;var&gt;body&lt;/var&gt; to generate values, emitting a value and pausing where &lt;code&gt;iter-yield&lt;/code&gt; or &lt;code&gt;iter-yield-from&lt;/code&gt; appears. When &lt;var&gt;body&lt;/var&gt; returns normally, &lt;code&gt;iter-next&lt;/code&gt; signals &lt;code&gt;iter-end-of-sequence&lt;/code&gt; with &lt;var&gt;body&lt;/var&gt;&amp;rsquo;s result as its condition data.</source>
          <target state="translated">&lt;code&gt;iter-defun&lt;/code&gt; はジェネレーター関数を定義します。ジェネレーター関数のシグネチャは通常の関数と同じですが、動作が異なります。呼び出されたときに &lt;var&gt;body&lt;/var&gt; を実行する代わりに、ジェネレーター関数はイテレーターオブジェクトを返します。そのイテレータは &lt;var&gt;body&lt;/var&gt; を実行して値を生成し、値を発行して、 &lt;code&gt;iter-yield&lt;/code&gt; または &lt;code&gt;iter-yield-from&lt;/code&gt; が表示される場所で一時停止します。 &lt;var&gt;body&lt;/var&gt; 戻り、通常、 &lt;code&gt;iter-next&lt;/code&gt; 信号 &lt;code&gt;iter-end-of-sequence&lt;/code&gt; と &lt;var&gt;body&lt;/var&gt; の状態データなどの結果。</target>
        </trans-unit>
        <trans-unit id="4109e5aa6a1bfade7fb636b24ed135f433d38221" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iter-lambda&lt;/code&gt; produces an unnamed generator function that works just like a generator function produced with &lt;code&gt;iter-defun&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;iter-lambda&lt;/code&gt; は、 &lt;code&gt;iter-defun&lt;/code&gt; で生成されたジェネレーター関数と同じように機能する名前のないジェネレーター関数を生成します。</target>
        </trans-unit>
        <trans-unit id="15d98457ad8a543fbfb81705f5a8344cb739a07d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iter-yield-from&lt;/code&gt; yields all the values that &lt;var&gt;iterator&lt;/var&gt; produces and evaluates to the value that &lt;var&gt;iterator&lt;/var&gt;&amp;rsquo;s generator function returns normally. While it has control, &lt;var&gt;iterator&lt;/var&gt; receives values sent to the iterator using &lt;code&gt;iter-next&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;iter-yield-from&lt;/code&gt; は、 &lt;var&gt;iterator&lt;/var&gt; 生成するすべての値を生成し、 &lt;var&gt;iterator&lt;/var&gt; のジェネレータ関数が通常返す値に評価します。 &lt;var&gt;iterator&lt;/var&gt; は制御を持っていますが、 &lt;code&gt;iter-next&lt;/code&gt; を使用してイテレータに送信された値を受け取ります。</target>
        </trans-unit>
        <trans-unit id="76d4e792a718ab7a155f494cc528e3c2ff57d59c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-all-local-variables&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;kill-all-local-variables&lt;/code&gt; は &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="16db06500a347a02d731c188dee9c19d07a423c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-line&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; remapped to &lt;code&gt;my-other-kill-line&lt;/code&gt;. Instead, if an ordinary key binding specifies &lt;code&gt;kill-line&lt;/code&gt;, it is remapped to &lt;code&gt;my-kill-line&lt;/code&gt;; if an ordinary binding specifies &lt;code&gt;my-kill-line&lt;/code&gt;, it is remapped to &lt;code&gt;my-other-kill-line&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;kill-line&lt;/code&gt; は &lt;code&gt;my-other-kill-line&lt;/code&gt; に再マップされ&lt;em&gt;ません&lt;/em&gt;。代わりに、通常のキーバインディングで &lt;code&gt;kill-line&lt;/code&gt; が指定されている場合、それは &lt;code&gt;my-kill-line&lt;/code&gt; に再マップされます。通常のバインディングで &lt;code&gt;my-kill-line&lt;/code&gt; が指定されている場合、それは &lt;code&gt;my-other-kill-line&lt;/code&gt; に再マップされます。</target>
        </trans-unit>
        <trans-unit id="a0ccd36137fe5b6a475fa203ddbbe785c93b64de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-local-variable&lt;/code&gt; returns &lt;var&gt;variable&lt;/var&gt;.</source>
          <target state="translated">&lt;code&gt;kill-local-variable&lt;/code&gt; は &lt;var&gt;variable&lt;/var&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="ea41619b9bb6734de2a51b35884577b932079033" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-region&lt;/code&gt; is the usual subroutine for killing text. Any command that calls this function is a kill command (and should probably have &amp;lsquo;</source>
          <target state="translated">&lt;code&gt;kill-region&lt;/code&gt; は、テキストを強制終了するための通常のサブルーチンです。この関数を呼び出すコマンドはすべてkillコマンドです（おそらく 'が必要です</target>
        </trans-unit>
        <trans-unit id="ac6b1ea9968bed95795df33bf349e7fcfc89e356" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kp-0&lt;/code&gt;, &lt;code&gt;kp-1&lt;/code&gt;, &amp;hellip;</source>
          <target state="translated">&lt;code&gt;kp-0&lt;/code&gt; 、 &lt;code&gt;kp-1&lt;/code&gt; 、&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="96bb856bea3cba200a8e8092b22bcd8017da69ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kp-add&lt;/code&gt;, &lt;code&gt;kp-decimal&lt;/code&gt;, &lt;code&gt;kp-divide&lt;/code&gt;, &amp;hellip;</source>
          <target state="translated">&lt;code&gt;kp-add&lt;/code&gt; 、 &lt;code&gt;kp-decimal&lt;/code&gt; 、 &lt;code&gt;kp-divide&lt;/code&gt; 、&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="9273b099ca4265ff47245a822044a6a00d6b8dfd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kp-f1&lt;/code&gt;, &lt;code&gt;kp-f2&lt;/code&gt;, &lt;code&gt;kp-f3&lt;/code&gt;, &lt;code&gt;kp-f4&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;kp-f1&lt;/code&gt; 、 &lt;code&gt;kp-f2&lt;/code&gt; 、 &lt;code&gt;kp-f3&lt;/code&gt; 、 &lt;code&gt;kp-f4&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a957618586d8ac88b947fe0630ce1faea33ea0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kp-home&lt;/code&gt;, &lt;code&gt;kp-left&lt;/code&gt;, &lt;code&gt;kp-up&lt;/code&gt;, &lt;code&gt;kp-right&lt;/code&gt;, &lt;code&gt;kp-down&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;kp-home&lt;/code&gt; 、 &lt;code&gt;kp-left&lt;/code&gt; 、 &lt;code&gt;kp-up&lt;/code&gt; 、 &lt;code&gt;kp-right&lt;/code&gt; 、 &lt;code&gt;kp-down&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa2b1e7bd7417d3f65fd45ff405387192fa4977a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kp-prior&lt;/code&gt;, &lt;code&gt;kp-next&lt;/code&gt;, &lt;code&gt;kp-end&lt;/code&gt;, &lt;code&gt;kp-begin&lt;/code&gt;, &lt;code&gt;kp-insert&lt;/code&gt;, &lt;code&gt;kp-delete&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;kp-prior&lt;/code&gt; 、 &lt;code&gt;kp-next&lt;/code&gt; 、 &lt;code&gt;kp-end&lt;/code&gt; 、 &lt;code&gt;kp-begin&lt;/code&gt; 、 &lt;code&gt;kp-insert&lt;/code&gt; 、 &lt;code&gt;kp-delete&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ca103fc8145d768e4a992e1cce45d81cc0ae7ebd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;left-arrow&lt;/code&gt;, &lt;code&gt;right-arrow&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;left-arrow&lt;/code&gt; 、 &lt;code&gt;right-arrow&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="246c0a986c7218186285fca89160a22af3cd88a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;left-bracket&lt;/code&gt;, &lt;code&gt;right-bracket&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;left-bracket&lt;/code&gt; 、 &lt;code&gt;right-bracket&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="125c1fd5ca16053f27bdd1d5ed69ccb1e10adb33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;left-curly-arrow&lt;/code&gt;, &lt;code&gt;right-curly-arrow&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;left-curly-arrow&lt;/code&gt; 、 &lt;code&gt;right-curly-arrow&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="de2aba66da4813f38b7fc7692996f3b46cfc61f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;left&lt;/code&gt;, &lt;code&gt;up&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;down&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;left&lt;/code&gt; 、 &lt;code&gt;up&lt;/code&gt; 、 &lt;code&gt;right&lt;/code&gt; 、 &lt;code&gt;down&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f6a8951a0db72dc26037795669472890ed7d2db9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;line-end&lt;/code&gt;, &lt;code&gt;eol&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;line-end&lt;/code&gt; 、 &lt;code&gt;eol&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ba55e96a733989c354535f935f2201139db555e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;line-start&lt;/code&gt;, &lt;code&gt;bol&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;line-start&lt;/code&gt; 、 &lt;code&gt;bol&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d0081f74a3b4ebb64b86d12fa3478d75d41dad9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load&lt;/code&gt; returns &lt;code&gt;t&lt;/code&gt; if the file loads successfully.</source>
          <target state="translated">&lt;code&gt;load&lt;/code&gt; ファイルが正常にロードされた場合、loadは &lt;code&gt;t&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="249215aae3d1624114895ec3e31fcf94b2a1e635" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local-function-key-map&lt;/code&gt; inherits from &lt;code&gt;function-key-map&lt;/code&gt;. The latter should only be altered if you want the binding to apply in all terminals, so using the former is almost always preferred.</source>
          <target state="translated">&lt;code&gt;local-function-key-map&lt;/code&gt; は &lt;code&gt;function-key-map&lt;/code&gt; から継承します。後者は、バインディングをすべての端末に適用する場合にのみ変更する必要があるため、ほとんどの場合、前者を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="1fff4afaded7fd7b964a1ba99587343fdf63a9b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lower&lt;/code&gt;, &lt;code&gt;lower-case&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;lower&lt;/code&gt; 、 &lt;code&gt;lower-case&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ea87c6e99c32b702626bc85185ff62fd8116cd88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lsh&lt;/code&gt;, which is an abbreviation for &lt;em&gt;logical shift&lt;/em&gt;, shifts the bits in &lt;var&gt;integer1&lt;/var&gt; to the left &lt;var&gt;count&lt;/var&gt; places, or to the right if &lt;var&gt;count&lt;/var&gt; is negative, bringing zeros into the vacated bits. If &lt;var&gt;count&lt;/var&gt; is negative, then &lt;var&gt;integer1&lt;/var&gt; must be either a fixnum or a positive bignum, and &lt;code&gt;lsh&lt;/code&gt; treats a negative fixnum as if it were unsigned by subtracting twice &lt;code&gt;most-negative-fixnum&lt;/code&gt; before shifting, producing a nonnegative result. This quirky behavior dates back to when Emacs supported only fixnums; nowadays &lt;code&gt;ash&lt;/code&gt; is a better choice.</source>
          <target state="translated">&lt;code&gt;lsh&lt;/code&gt; の略で、&lt;em&gt;論理シフトは&lt;/em&gt;、内のビットをシフト &lt;var&gt;integer1&lt;/var&gt; 左に &lt;var&gt;count&lt;/var&gt; 場合場所、または右に &lt;var&gt;count&lt;/var&gt; 空いたビットにゼロをもたらし、負です。場合は &lt;var&gt;count&lt;/var&gt; 負である場合、 &lt;var&gt;integer1&lt;/var&gt; FIXNUMまたは正BIGNUM、そしてどちらかでなければなりません &lt;code&gt;lsh&lt;/code&gt; それは二回引くことによってunsignedとしているかのように扱い、負FIXNUM &lt;code&gt;most-negative-fixnum&lt;/code&gt; 非負の結果を生成する、シフトの前に。この風変わりな振る舞いは、Emacsがfixnumのみをサポートしていた時代にまでさかのぼります。今日では &lt;code&gt;ash&lt;/code&gt; がより良い選択です。</target>
        </trans-unit>
        <trans-unit id="17ad6217085ea5b5e0b013ad0875589ff8f45a11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;macroexpand-all&lt;/code&gt; expands macros like &lt;code&gt;macroexpand&lt;/code&gt;, but will look for and expand all macros in &lt;var&gt;form&lt;/var&gt;, not just at the top-level. If no macros are expanded, the return value is &lt;code&gt;eq&lt;/code&gt; to &lt;var&gt;form&lt;/var&gt;.</source>
          <target state="translated">&lt;code&gt;macroexpand-all&lt;/code&gt; は、 &lt;code&gt;macroexpand&lt;/code&gt; のようにマクロを展開しますが、トップレベルだけでなく、 &lt;var&gt;form&lt;/var&gt; 内のすべてのマクロを検索して展開します。マクロが展開されていない場合、戻り値は &lt;code&gt;eq&lt;/code&gt; を &lt;var&gt;form&lt;/var&gt; ます。</target>
        </trans-unit>
        <trans-unit id="f6c4eb079c3a7e5f0aab351a5677f46fed73aea3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mapc&lt;/code&gt; is like &lt;code&gt;mapcar&lt;/code&gt; except that &lt;var&gt;function&lt;/var&gt; is used for side-effects only&amp;mdash;the values it returns are ignored, not collected into a list. &lt;code&gt;mapc&lt;/code&gt; always returns &lt;var&gt;sequence&lt;/var&gt;.</source>
          <target state="translated">&lt;code&gt;mapc&lt;/code&gt; は &lt;code&gt;mapcar&lt;/code&gt; に似ていますが、 &lt;var&gt;function&lt;/var&gt; が副作用にのみ使用される点が異なります。返される値は無視され、リストに収集されません。 &lt;code&gt;mapc&lt;/code&gt; は常に &lt;var&gt;sequence&lt;/var&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f17fefcdf6fb3bfcd7affd13ee8956dda2d2cc22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mapcar&lt;/code&gt; applies &lt;var&gt;function&lt;/var&gt; to each element of &lt;var&gt;sequence&lt;/var&gt; in turn, and returns a list of the results.</source>
          <target state="translated">&lt;code&gt;mapcar&lt;/code&gt; は、 &lt;var&gt;sequence&lt;/var&gt; 各要素に順番に &lt;var&gt;function&lt;/var&gt; を適用し、結果のリストを返します。</target>
        </trans-unit>
        <trans-unit id="c5bcbf90aecc6544db096dd87c06c5ca1e224508" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mapconcat&lt;/code&gt; applies &lt;var&gt;function&lt;/var&gt; to each element of &lt;var&gt;sequence&lt;/var&gt;; the results, which must be sequences of characters (strings, vectors, or lists), are concatenated into a single string return value. Between each pair of result sequences, &lt;code&gt;mapconcat&lt;/code&gt; inserts the characters from &lt;var&gt;separator&lt;/var&gt;, which also must be a string, or a vector or list of characters. See &lt;a href=&quot;sequences-arrays-vectors#Sequences-Arrays-Vectors&quot;&gt;Sequences Arrays Vectors&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;mapconcat&lt;/code&gt; は、 &lt;var&gt;sequence&lt;/var&gt; 各要素に &lt;var&gt;function&lt;/var&gt; を適用します。文字のシーケンス（文字列、ベクトル、またはリスト）である必要がある結果は、単一の文字列の戻り値に連結されます。結果シーケンスの各ペアの間に、 &lt;code&gt;mapconcat&lt;/code&gt; は &lt;var&gt;separator&lt;/var&gt; 文字から文字を挿入します。これも文字列、ベクトル、または文字のリストである必要があります。&lt;a href=&quot;sequences-arrays-vectors#Sequences-Arrays-Vectors&quot;&gt;シーケンス配列ベクトルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f7d2693764e07f0cb804bb968f848fd6f5c17e05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max-lisp-eval-depth&lt;/code&gt; (see &lt;a href=&quot;eval#Eval&quot;&gt;Eval&lt;/a&gt;) and &lt;code&gt;max-specpdl-size&lt;/code&gt; (see &lt;a href=&quot;local-variables#Local-Variables&quot;&gt;Local Variables&lt;/a&gt;) are both increased to reduce Edebug&amp;rsquo;s impact on the stack. You could, however, still run out of stack space when using Edebug. You can also enlarge the value of &lt;code&gt;edebug-max-depth&lt;/code&gt; if Edebug reaches the limit of recursion depth instrumenting code that contains very large quoted lists.</source>
          <target state="translated">&lt;code&gt;max-lisp-eval-depth&lt;/code&gt; （&lt;a href=&quot;eval#Eval&quot;&gt;Evalを&lt;/a&gt;参照）と &lt;code&gt;max-specpdl-size&lt;/code&gt; （&lt;a href=&quot;local-variables#Local-Variables&quot;&gt;ローカル変数を&lt;/a&gt;参照）の両方を増やして、スタックに対するEdebugの影響を減らします。ただし、Edebugを使用すると、スタックスペースが不足する可能性があります。Edebugが非常に大きな引用符付きリストを含む再帰深度インストルメンテーションコードの制限に達した場合は、 &lt;code&gt;edebug-max-depth&lt;/code&gt; の値を拡大することもできます。</target>
        </trans-unit>
        <trans-unit id="4dcede8a74a74667f6d6baa9436ec3f1ac34d528" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max-specpdl-size&lt;/code&gt; provides another limit on nesting. See &lt;a href=&quot;local-variables#Definition-of-max_002dspecpdl_002dsize&quot;&gt;Local Variables&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;max-specpdl-size&lt;/code&gt; は、ネストに関する別の制限を提供します。&lt;a href=&quot;local-variables#Definition-of-max_002dspecpdl_002dsize&quot;&gt;ローカル変数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4283393c76101b7c75957e1aa804e3afd17b137b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maximum-scroll-margin&lt;/code&gt; itself has a maximum value of 0.5, which allows setting margins large to keep the cursor at the middle line of the window (or two middle lines if the window has an even number of lines). If it&amp;rsquo;s set to a larger value (or any value other than a float between 0.0 and 0.5) then the default value of 0.25 will be used instead.</source>
          <target state="translated">&lt;code&gt;maximum-scroll-margin&lt;/code&gt; 自体の最大値は0.5です。これにより、マージンを大きく設定して、カーソルをウィンドウの中央行（または、ウィンドウの行数が偶数の場合は2つの中央行）に保つことができます。より大きな値（または0.0から0.5の間のfloat以外の値）に設定されている場合は、代わりにデフォルト値の0.25が使用されます。</target>
        </trans-unit>
        <trans-unit id="0abfae913559cf6e54f47e4c7056eab492888b98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minor-mode-alist&lt;/code&gt; itself is not buffer-local. Each variable mentioned in the alist should be buffer-local if its minor mode can be enabled separately in each buffer.</source>
          <target state="translated">&lt;code&gt;minor-mode-alist&lt;/code&gt; 自体はバッファローカルではありません。マイナーモードを各バッファーで個別に有効にできる場合は、リストに記載されている各変数をバッファーローカルにする必要があります。</target>
        </trans-unit>
        <trans-unit id="5c765a30c75d52af9ee570867780f3be534d6e3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minor-mode-overriding-map-alist&lt;/code&gt; is automatically buffer-local in all buffers.</source>
          <target state="translated">&lt;code&gt;minor-mode-overriding-map-alist&lt;/code&gt; は、すべてのバッファーで自動的にバッファーローカルになります。</target>
        </trans-unit>
        <trans-unit id="17ec7b27c2211f568583f150e109b60c029edde5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mode-specific-map&lt;/code&gt; is the global keymap for the prefix key</source>
          <target state="translated">&lt;code&gt;mode-specific-map&lt;/code&gt; は、プレフィックスキーのグローバルキーマップです。</target>
        </trans-unit>
        <trans-unit id="7890b9b8602eeddc0d995b6dc7c4ee21547818ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mule-keymap&lt;/code&gt; is the global keymap used for the</source>
          <target state="translated">&lt;code&gt;mule-keymap&lt;/code&gt; は、に使用されるグローバルキーマップです。</target>
        </trans-unit>
        <trans-unit id="d2f6cca2ccdb0ab132f6b7baf5caa26313957731" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt; means consider only windows on the selected frame. (Actually, the last frame used that is not a minibuffer-only frame.)</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; は、選択したフレーム上のウィンドウのみを考慮することを意味します。（実際には、使用された最後のフレームで、ミニバッファーのみのフレームではありません。）</target>
        </trans-unit>
        <trans-unit id="d0b9f6234ea8f44b037a824027a723100a30ef4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt; means operate on all frames.</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; は、すべてのフレームで動作することを意味します。</target>
        </trans-unit>
        <trans-unit id="819a422042048b76988497f308e14b5e715ceab5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt; means that the events used so far in the lookup form an undefined key. When a keymap fails to mention an event type at all, and has no default binding, that is equivalent to a binding of &lt;code&gt;nil&lt;/code&gt; for that event type.</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; は、ルックアップでこれまでに使用されたイベントが未定義のキーを形成することを意味します。キーマップがイベントタイプについてまったく言及しておらず、デフォルトのバインディングがない場合、それはそのイベントタイプの &lt;code&gt;nil&lt;/code&gt; のバインディングと同等です。</target>
        </trans-unit>
        <trans-unit id="afd72feaaa11fde848c1815c3b5a58b659297a44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt; means to consider windows on &lt;var&gt;window&lt;/var&gt;&amp;rsquo;s frame. If the minibuffer window is considered (as specified by the &lt;var&gt;minibuf&lt;/var&gt; argument), then frames that share the minibuffer window are considered too.</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; は、 &lt;var&gt;window&lt;/var&gt; のフレーム上のウィンドウを考慮することを意味します。ミニ &lt;var&gt;minibuf&lt;/var&gt; ウィンドウが考慮される場合（minibuf引数で指定）、ミニバッファーウィンドウを共有するフレームも考慮されます。</target>
        </trans-unit>
        <trans-unit id="7f9b163d3a6478ab15f71af56a99d5c9db6c481b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt; means to leave the height of the chosen window alone.</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; は、選択したウィンドウの高さをそのままにすることを意味します。</target>
        </trans-unit>
        <trans-unit id="c2c1988a6a0d0d9e3ac37be3a0ca11cc3a3c9234" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt; means to leave the width of the chosen window alone.</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; は、選択したウィンドウの幅をそのままにすることを意味します。</target>
        </trans-unit>
        <trans-unit id="57cc7b3ade0670ca46365bd57aa0ed27d064ec81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt; specified as an output stream means to use the value of &lt;code&gt;standard-output&lt;/code&gt; instead; that value is the &lt;em&gt;default output stream&lt;/em&gt;, and must not be &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; 出力ストリームとして指定されたnilは、代わりに &lt;code&gt;standard-output&lt;/code&gt; 値を使用することを意味します。その値は&lt;em&gt;デフォルトの出力ストリーム&lt;/em&gt;であり、 &lt;code&gt;nil&lt;/code&gt; であってはなりません。</target>
        </trans-unit>
        <trans-unit id="41ba9d1889a34528a7c6886cc43b66ce04b8fdce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt; supplied as an input stream means to use the value of &lt;code&gt;standard-input&lt;/code&gt; instead; that value is the &lt;em&gt;default input stream&lt;/em&gt;, and must be a non-&lt;code&gt;nil&lt;/code&gt; input stream.</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; 入力ストリームとして提供されるnilは、代わりに &lt;code&gt;standard-input&lt;/code&gt; 値を使用することを意味します。その値は&lt;em&gt;デフォルトの入力ストリーム&lt;/em&gt;であり、 &lt;code&gt;nil&lt;/code&gt; 以外の入力ストリームである必要があります。</target>
        </trans-unit>
        <trans-unit id="0e057410ded4fee7473aed5c911a7c0479cd5a80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt;, meaning there is no prefix argument. Its numeric value is 1, but numerous commands make a distinction between &lt;code&gt;nil&lt;/code&gt; and the integer 1.</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; は、プレフィックス引数がないことを意味します。その数値は1ですが、多くのコマンドが &lt;code&gt;nil&lt;/code&gt; と整数1を区別します。</target>
        </trans-unit>
        <trans-unit id="0d104d5ef48ee4b951b5d1860fbeed9512018d1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt;: use the default indentation rule.</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; ：デフォルトのインデントルールを使用します。</target>
        </trans-unit>
        <trans-unit id="132ce6461764b770ab4320ac5096dea3d95d0c59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no-conversion&lt;/code&gt; (and its alias &lt;code&gt;binary&lt;/code&gt;) is equivalent to &lt;code&gt;raw-text-unix&lt;/code&gt;: it specifies no conversion of either character codes or end-of-line.</source>
          <target state="translated">&lt;code&gt;no-conversion&lt;/code&gt; （およびそのエイリアス &lt;code&gt;binary&lt;/code&gt; ）は、 &lt;code&gt;raw-text-unix&lt;/code&gt; と同等です。文字コードまたは行末の変換を指定しません。</target>
        </trans-unit>
        <trans-unit id="639f287af0a67f8ed92462a2183771add87f55ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;normal-mode&lt;/code&gt; uses &lt;code&gt;condition-case&lt;/code&gt; around the call to the major mode command, so errors are caught and reported as a &amp;lsquo;</source>
          <target state="translated">&lt;code&gt;normal-mode&lt;/code&gt; は、major modeコマンドの呼び出しの前後で &lt;code&gt;condition-case&lt;/code&gt; 使用するため、エラーがキャッチされ、 'として報告されます</target>
        </trans-unit>
        <trans-unit id="f1d673027be7f0dc198c4e29d79f765eb0015789" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;not-newline&lt;/code&gt;, &lt;code&gt;nonl&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;not-newline&lt;/code&gt; &lt;code&gt;nonl&lt;/code&gt; 、nonl</target>
        </trans-unit>
        <trans-unit id="3b477bde094dcd85ca9226e2b3dd79c674114393" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;posn-at-point&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt; if &lt;var&gt;pos&lt;/var&gt; is not visible in &lt;var&gt;window&lt;/var&gt;.</source>
          <target state="translated">&lt;code&gt;posn-at-point&lt;/code&gt; &lt;var&gt;pos&lt;/var&gt; が &lt;var&gt;window&lt;/var&gt; 表示されていない場合、posn-at-pointは &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="914d11373ff4c8970d90e6703077a712573544e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;primitive-undo&lt;/code&gt; adds elements to the buffer&amp;rsquo;s undo list when it changes the buffer. Undo commands avoid confusion by saving the undo list value at the beginning of a sequence of undo operations. Then the undo operations use and update the saved value. The new elements added by undoing are not part of this saved value, so they don&amp;rsquo;t interfere with continuing to undo.</source>
          <target state="translated">&lt;code&gt;primitive-undo&lt;/code&gt; は、バッファーを変更すると、バッファーの取り消しリストに要素を追加します。元に戻すコマンドは、一連の元に戻す操作の開始時に元に戻すリストの値を保存することにより、混乱を回避します。次に、元に戻す操作で保存された値が使用および更新されます。元に戻すことによって追加された新しい要素は、この保存された値の一部ではないため、元に戻すことの続行を妨げることはありません。</target>
        </trans-unit>
        <trans-unit id="313c7f224d72ebc094061d7d24a663761e97b45b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;print&lt;/code&gt;, &lt;code&gt;printing&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;print&lt;/code&gt; 、 &lt;code&gt;printing&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ec9eda81cf8008a97b1d863eb1be427f16a8f3b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;provide&lt;/code&gt; and &lt;code&gt;require&lt;/code&gt; are an alternative to &lt;code&gt;autoload&lt;/code&gt; for loading files automatically. They work in terms of named &lt;em&gt;features&lt;/em&gt;. Autoloading is triggered by calling a specific function, but a feature is loaded the first time another program asks for it by name.</source>
          <target state="translated">&lt;code&gt;provide&lt;/code&gt; し、 &lt;code&gt;require&lt;/code&gt; する別のある &lt;code&gt;autoload&lt;/code&gt; 自動的にファイルを読み込みます。それらは名前付き&lt;em&gt;機能の&lt;/em&gt;観点から&lt;em&gt;機能します&lt;/em&gt;。自動読み込みは特定の関数を呼び出すことでトリガーされますが、別のプログラムが名前で初めて機能を要求したときに機能が読み込まれます。</target>
        </trans-unit>
        <trans-unit id="d70e77d38be89adf89d1b036b81076ba6e81cf61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;punct&lt;/code&gt;, &lt;code&gt;punctuation&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;punct&lt;/code&gt; 、 &lt;code&gt;punctuation&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="084755a084b693739801d8d8edf38356f3c7cd80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;push-button&lt;/code&gt; is the command that a user uses to actually push a button, and is bound by default in the button itself to</source>
          <target state="translated">&lt;code&gt;push-button&lt;/code&gt; は、ユーザーが実際にボタンを押すために使用するコマンドであり、デフォルトではボタン自体にバインドされています。</target>
        </trans-unit>
        <trans-unit id="6ebf9fbf5d62647055c4ba6438a6901540013693" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rassoc&lt;/code&gt; is like &lt;code&gt;assoc&lt;/code&gt; except that it compares the &lt;small&gt;CDR&lt;/small&gt; of each &lt;var&gt;alist&lt;/var&gt; association instead of the &lt;small&gt;CAR&lt;/small&gt;. You can think of this as reverse &lt;code&gt;assoc&lt;/code&gt;, finding the key for a given value.</source>
          <target state="translated">&lt;code&gt;rassoc&lt;/code&gt; は、&lt;small&gt;CAR&lt;/small&gt;ではなく各 &lt;var&gt;alist&lt;/var&gt; アソシエーションの&lt;small&gt;CDR&lt;/small&gt;を比較することを除いて、 &lt;code&gt;assoc&lt;/code&gt; に似ています。これは、特定の値のキーを見つける逆の &lt;code&gt;assoc&lt;/code&gt; と考えることができます。&lt;small&gt;&lt;/small&gt;&lt;small&gt;&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5b28e51d950dde8e979a69abe72749c3a72a81b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rassq&lt;/code&gt; cannot search for a value stored in the &lt;small&gt;CAR&lt;/small&gt; of the &lt;small&gt;CDR&lt;/small&gt; of an element:</source>
          <target state="translated">&lt;code&gt;rassq&lt;/code&gt; は、要素の&lt;small&gt;CDR&lt;/small&gt;の&lt;small&gt;CAR&lt;/small&gt;に格納されている値を検索できません。&lt;small&gt;&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e731698340710bd2ed27567345847db52d9ecc7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rassq&lt;/code&gt; is like &lt;code&gt;assq&lt;/code&gt; except that it compares the &lt;small&gt;CDR&lt;/small&gt; of each &lt;var&gt;alist&lt;/var&gt; association instead of the &lt;small&gt;CAR&lt;/small&gt;. You can think of this as reverse &lt;code&gt;assq&lt;/code&gt;, finding the key for a given value.</source>
          <target state="translated">&lt;code&gt;rassq&lt;/code&gt; ではは、のようなものです &lt;code&gt;assq&lt;/code&gt; に、それは比較することを除き、&lt;small&gt;CDR&lt;/small&gt;それぞれの &lt;var&gt;alist&lt;/var&gt; 協会の代わりに、&lt;small&gt;CARを&lt;/small&gt;。これは、指定された値のキーを見つける逆の &lt;code&gt;assq&lt;/code&gt; と考えることができます。</target>
        </trans-unit>
        <trans-unit id="67994628b87e5a6fefaf54d031a115c17ae6ec51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;read-file-name&lt;/code&gt; does not automatically expand the returned file name. You can call &lt;code&gt;expand-file-name&lt;/code&gt; yourself if an absolute file name is required.</source>
          <target state="translated">&lt;code&gt;read-file-name&lt;/code&gt; は、返されたファイル名を自動的に展開しません。絶対ファイル名が必要な場合は、 &lt;code&gt;expand-file-name&lt;/code&gt; を自分で呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="a5bb534f341b26b90a134da77d2d54c776b85a5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;read-regexp&lt;/code&gt; now ensures that the result of processing &lt;var&gt;defaults&lt;/var&gt; is a list (i.e., if the value is &lt;code&gt;nil&lt;/code&gt; or a string, it converts it to a list of one element). To this list, &lt;code&gt;read-regexp&lt;/code&gt; then appends a few potentially useful candidates for input. These are:</source>
          <target state="translated">&lt;code&gt;read-regexp&lt;/code&gt; は、 &lt;var&gt;defaults&lt;/var&gt; の処理結果がリストであることを保証するようになりました（つまり、値が &lt;code&gt;nil&lt;/code&gt; または文字列の場合、1つの要素のリストに変換されます）。次に、 &lt;code&gt;read-regexp&lt;/code&gt; は、このリストに、潜在的に有用な入力候補をいくつか追加します。これらは：</target>
        </trans-unit>
        <trans-unit id="d4c55533c2f01f1b7db258f38f07cb55c889d489" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replace-buffer-contents&lt;/code&gt; returns t if a non-destructive replacement could be performed. Otherwise, i.e., if &lt;var&gt;max-secs&lt;/var&gt; was exceeded, it returns nil.</source>
          <target state="translated">&lt;code&gt;replace-buffer-contents&lt;/code&gt; は、非破壊的な置換を実行できる場合、tを返します。それ以外の場合、つまり &lt;var&gt;max-secs&lt;/var&gt; を超えた場合は、nilを返します。</target>
        </trans-unit>
        <trans-unit id="fc560a9efb7ad3b860b6ef11a703b3989d2a895b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;revert-buffer&lt;/code&gt; binds this variable to a non-&lt;code&gt;nil&lt;/code&gt; value while it is working.</source>
          <target state="translated">&lt;code&gt;revert-buffer&lt;/code&gt; は、動作中にこの変数を &lt;code&gt;nil&lt;/code&gt; 以外の値にバインドします。</target>
        </trans-unit>
        <trans-unit id="760a5fbe6045d8f7559904c18d6a2c56d1688252" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;revert-buffer&lt;/code&gt;, and how to customize what it does.</source>
          <target state="translated">&lt;code&gt;revert-buffer&lt;/code&gt; 、およびその機能をカスタマイズする方法。</target>
        </trans-unit>
        <trans-unit id="0d8aa86d0e2e4c279aa3d7ab23ba5404e9f3bb99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;right-triangle&lt;/code&gt;, &lt;code&gt;left-triangle&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;right-triangle&lt;/code&gt; 、 &lt;code&gt;left-triangle&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ea54e890fcbaf5ede0bc6e26303eaf3f9555144a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rx-let&lt;/code&gt; can be used not only inside a function, but also at top level to include global variable and function definitions that need to share a common set of &lt;code&gt;rx&lt;/code&gt; forms. Since the names are local inside &lt;var&gt;body&lt;/var&gt;, there is no need for any package prefixes. Example:</source>
          <target state="translated">&lt;code&gt;rx-let&lt;/code&gt; は、関数内だけでなく、トップレベルでも使用でき、 &lt;code&gt;rx&lt;/code&gt; フォームの共通セットを共有する必要があるグローバル変数と関数の定義を含めることができます。名前は &lt;var&gt;body&lt;/var&gt; 内でローカルであるため、パッケージプレフィックスは必要ありません。例：</target>
        </trans-unit>
        <trans-unit id="5b08879be5eaeb8caa4a6762910dd120cba71aa8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;save-buffer&lt;/code&gt; is responsible for making backup files. Normally, &lt;var&gt;backup-option&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, and &lt;code&gt;save-buffer&lt;/code&gt; makes a backup file only if this is the first save since visiting the file. Other values for &lt;var&gt;backup-option&lt;/var&gt; request the making of backup files in other circumstances:</source>
          <target state="translated">&lt;code&gt;save-buffer&lt;/code&gt; は、バックアップファイルの作成を担当します。通常、 &lt;var&gt;backup-option&lt;/var&gt; は &lt;code&gt;nil&lt;/code&gt; であり、 &lt;code&gt;save-buffer&lt;/code&gt; は、これがファイルにアクセスしてから最初の保存である場合にのみバックアップファイルを作成します。 &lt;var&gt;backup-option&lt;/var&gt; の他の値は、他の状況でのバックアップファイルの作成を要求します。</target>
        </trans-unit>
        <trans-unit id="a1e81cd0dbdcd543cf4536779a9160daa8d5b908" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;save-restriction&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; restore point; use &lt;code&gt;save-excursion&lt;/code&gt; for that. If you use both &lt;code&gt;save-restriction&lt;/code&gt; and &lt;code&gt;save-excursion&lt;/code&gt; together, &lt;code&gt;save-excursion&lt;/code&gt; should come first (on the outside). Otherwise, the old point value would be restored with temporary narrowing still in effect. If the old point value were outside the limits of the temporary narrowing, this would fail to restore it accurately.</source>
          <target state="translated">&lt;code&gt;save-restriction&lt;/code&gt; はポイントを復元しませ&lt;em&gt;ん&lt;/em&gt;。そのために &lt;code&gt;save-excursion&lt;/code&gt; を使用します。 &lt;code&gt;save-restriction&lt;/code&gt; と &lt;code&gt;save-excursion&lt;/code&gt; の両方を一緒に使用する場合は、 &lt;code&gt;save-excursion&lt;/code&gt; が最初に（外側で）来る必要があります。そうしないと、一時的な絞り込みが有効なまま、古いポイント値が復元されます。古いポイント値が一時的な絞り込みの範囲外である場合、これは正確に復元できません。</target>
        </trans-unit>
        <trans-unit id="f681cec249f999acd57b8bf621e56d79bd04124b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;search-map&lt;/code&gt; is the global keymap used for the</source>
          <target state="translated">&lt;code&gt;search-map&lt;/code&gt; は、に使用されるグローバルキーマップです。</target>
        </trans-unit>
        <trans-unit id="21f45bc2679fe0ce6666bb52f56d2a1f5b4f3917" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;seq-elt&lt;/code&gt; returns places settable using &lt;code&gt;setf&lt;/code&gt; (see &lt;a href=&quot;setting-generalized-variables#Setting-Generalized-Variables&quot;&gt;Setting Generalized Variables&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;seq-elt&lt;/code&gt; は、 &lt;code&gt;setf&lt;/code&gt; を使用して設定可能な場所を返します（&lt;a href=&quot;setting-generalized-variables#Setting-Generalized-Variables&quot;&gt;一般化変数の設定を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="412a741ecf02586a155f9800e1819ad1a59f7197" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setenv&lt;/code&gt; returns the new value of &lt;var&gt;variable&lt;/var&gt;, or &lt;code&gt;nil&lt;/code&gt; if it removed &lt;var&gt;variable&lt;/var&gt; from the environment.</source>
          <target state="translated">&lt;code&gt;setenv&lt;/code&gt; は、新しい値を返す &lt;var&gt;variable&lt;/var&gt; 、または &lt;code&gt;nil&lt;/code&gt; を、それが削除した場合 &lt;var&gt;variable&lt;/var&gt; 環境から。</target>
        </trans-unit>
        <trans-unit id="b3298f6be0f65fb71cd9899fbda4f5d128e54411" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setenv&lt;/code&gt; works by modifying &lt;code&gt;process-environment&lt;/code&gt;; binding that variable with &lt;code&gt;let&lt;/code&gt; is also reasonable practice.</source>
          <target state="translated">&lt;code&gt;setenv&lt;/code&gt; は、 &lt;code&gt;process-environment&lt;/code&gt; を変更することで機能します。その変数を &lt;code&gt;let&lt;/code&gt; でバインドすることも合理的な方法です。</target>
        </trans-unit>
        <trans-unit id="1805264040f480fcfe5811e91adc07dd7107d291" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setf&lt;/code&gt; signals an error if you pass a &lt;var&gt;place&lt;/var&gt; form that it does not know how to handle.</source>
          <target state="translated">&lt;code&gt;setf&lt;/code&gt; は、処理方法がわからない &lt;var&gt;place&lt;/var&gt; フォームを渡すと、エラーを通知します。</target>
        </trans-unit>
        <trans-unit id="a0b172aed0c367b6469c519892afd795f43421f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setq&lt;/code&gt; does not evaluate &lt;var&gt;symbol&lt;/var&gt;; it sets the symbol that you write. We say that this argument is &lt;em&gt;automatically quoted&lt;/em&gt;. The &amp;lsquo;</source>
          <target state="translated">&lt;code&gt;setq&lt;/code&gt; は &lt;var&gt;symbol&lt;/var&gt; 評価しません; それはあなたが書くシンボルを設定します。この引数は&lt;em&gt;自動的に引用される&lt;/em&gt;と言い&lt;em&gt;ます&lt;/em&gt;。'</target>
        </trans-unit>
        <trans-unit id="84fb1128fe6ec1835607db7b74ec3623c9faaf3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;space&lt;/code&gt;, &lt;code&gt;whitespace&lt;/code&gt;, &lt;code&gt;white&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;space&lt;/code&gt; 、 &lt;code&gt;whitespace&lt;/code&gt; 、 &lt;code&gt;white&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3acebe1579627cb1ae8404add4a67e4deaffbb44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;standard-output&lt;/code&gt; and &lt;code&gt;standard-input&lt;/code&gt; are bound to &lt;code&gt;nil&lt;/code&gt; by the &lt;code&gt;recursive-edit&lt;/code&gt;, but Edebug temporarily restores them during evaluations.</source>
          <target state="translated">&lt;code&gt;standard-output&lt;/code&gt; と &lt;code&gt;standard-input&lt;/code&gt; は &lt;code&gt;recursive-edit&lt;/code&gt; によって &lt;code&gt;nil&lt;/code&gt; にバインドされていますが、Edebugは評価中にそれらを一時的に復元します。</target>
        </trans-unit>
        <trans-unit id="0a9ae84722969551ac034daec5e016ebd0c44e32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;store-match-data&lt;/code&gt; is a semi-obsolete alias for &lt;code&gt;set-match-data&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;store-match-data&lt;/code&gt; は、 &lt;code&gt;set-match-data&lt;/code&gt; の半廃止されたエイリアスです。</target>
        </trans-unit>
        <trans-unit id="09664cb1c96e9185c9144ca00b932c6582599f0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string-end&lt;/code&gt;, &lt;code&gt;eos&lt;/code&gt;, &lt;code&gt;buffer-end&lt;/code&gt;, &lt;code&gt;eot&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string-end&lt;/code&gt; 、 &lt;code&gt;eos&lt;/code&gt; 、 &lt;code&gt;buffer-end&lt;/code&gt; 、 &lt;code&gt;eot&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d6440bc6219257786238ef571e25a78488969195" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string-equal&lt;/code&gt; is another name for &lt;code&gt;string=&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string-equal&lt;/code&gt; は、 &lt;code&gt;string=&lt;/code&gt; 別名です。</target>
        </trans-unit>
        <trans-unit id="be651b6f67d7e458c50b3cf7fb671ab938eb0255" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string-lessp&lt;/code&gt; is another name for &lt;code&gt;string&amp;lt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string-lessp&lt;/code&gt; は、 &lt;code&gt;string&amp;lt;&lt;/code&gt; 別名です。</target>
        </trans-unit>
        <trans-unit id="1b5a5dbc53a397eb7b8627403504ca468cdec06d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string-start&lt;/code&gt;, &lt;code&gt;bos&lt;/code&gt;, &lt;code&gt;buffer-start&lt;/code&gt;, &lt;code&gt;bot&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string-start&lt;/code&gt; 、 &lt;code&gt;bos&lt;/code&gt; 、 &lt;code&gt;buffer-start&lt;/code&gt; 、 &lt;code&gt;bot&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="35766ce72fedccae73899ff72af9f02eba537d17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string-to-int&lt;/code&gt; is an obsolete alias for this function.</source>
          <target state="translated">&lt;code&gt;string-to-int&lt;/code&gt; は、この関数の廃止されたエイリアスです。</target>
        </trans-unit>
        <trans-unit id="f7f7697af3e84322eec091c3c1c134ddc067b714" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subst-char-in-region&lt;/code&gt; does not move point and returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;subst-char-in-region&lt;/code&gt; はポイントを移動せず、 &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="dd8ca73079df3dd53ec8024a2bbc2995ca2223f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;substring&lt;/code&gt; also accepts a vector for the first argument. For example:</source>
          <target state="translated">&lt;code&gt;substring&lt;/code&gt; は、最初の引数のベクトルも受け入れます。例えば：</target>
        </trans-unit>
        <trans-unit id="7538a9062ef699c535de57d93e800e4b85bc83fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t&lt;/code&gt; (the default)</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; （デフォルト）</target>
        </trans-unit>
        <trans-unit id="61a81a6cdbc4b7f9b8d52d68af382ec09ee04b6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t&lt;/code&gt; for a directory, a string for a symbolic link (the name linked to), or &lt;code&gt;nil&lt;/code&gt; for a text file (&lt;code&gt;file-attribute-type&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; ディレクトリの場合はt、シンボリックリンクの場合は文字列（リンク先の名前）、テキストファイルの場合は &lt;code&gt;nil&lt;/code&gt; （ &lt;code&gt;file-attribute-type&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d721e32bb95cdb8eeeb178c9e1375221de1d3779" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t&lt;/code&gt; if daylight saving time is effect, &lt;code&gt;nil&lt;/code&gt; if it is not in effect, and -1 if this information is not available.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; if daylight saving time is effect, &lt;code&gt;nil&lt;/code&gt; if it is not in effect, and -1 if this information is not available.</target>
        </trans-unit>
        <trans-unit id="d7a0e85e56982169debe8d361bb05d3472094c1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t&lt;/code&gt; if inside a non-nestable comment (of any comment style; see &lt;a href=&quot;syntax-flags#Syntax-Flags&quot;&gt;Syntax Flags&lt;/a&gt;); or the comment nesting level if inside a comment that can be nested.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; if inside a non-nestable comment (of any comment style; see &lt;a href=&quot;syntax-flags#Syntax-Flags&quot;&gt;Syntax Flags&lt;/a&gt;); or the comment nesting level if inside a comment that can be nested.</target>
        </trans-unit>
        <trans-unit id="cef1f4ed993c9f70d6394dbf0337c4865820f50f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t&lt;/code&gt; if the end point is just after a quote character.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; if the end point is just after a quote character.</target>
        </trans-unit>
        <trans-unit id="ca362524e068b7a0ec650b69f842377fea553dc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t&lt;/code&gt; means consider windows on all existing frames.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; means consider windows on all existing frames.</target>
        </trans-unit>
        <trans-unit id="d7d22e3999dd931ac69620324b6cb2afd00057de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t&lt;/code&gt; means consider windows on all frames.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; means consider windows on all frames.</target>
        </trans-unit>
        <trans-unit id="86776f9a01ba5ba7ca2810476ff92a879defb5bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t&lt;/code&gt; means do not switch to a buffer shown on any live frame.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; means do not switch to a buffer shown on any live frame.</target>
        </trans-unit>
        <trans-unit id="49bfc08b83a08210a4c227a7b4aff67853a73f0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t&lt;/code&gt; means operate on the selected frame.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; means operate on the selected frame.</target>
        </trans-unit>
        <trans-unit id="400fda1edd4652607c56029e5840115a5c101a3f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t&lt;/code&gt; means to consider windows on all existing frames.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; means to consider windows on all existing frames.</target>
        </trans-unit>
        <trans-unit id="54a6a6c1c1513953b205df1e1454c11d8964fb78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t&lt;/code&gt; used as a stream means that the input is read from the minibuffer. In fact, the minibuffer is invoked once and the text given by the user is made into a string that is then used as the input stream. If Emacs is running in batch mode, standard input is used instead of the minibuffer. For example,</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; used as a stream means that the input is read from the minibuffer. In fact, the minibuffer is invoked once and the text given by the user is made into a string that is then used as the input stream. If Emacs is running in batch mode, standard input is used instead of the minibuffer. For example,</target>
        </trans-unit>
        <trans-unit id="ef9a8dbd2ad88f17735d99134022fcc0f0647ed1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tab-prefix-map&lt;/code&gt; is the global keymap used for the</source>
          <target state="translated">&lt;code&gt;tab-prefix-map&lt;/code&gt; is the global keymap used for the</target>
        </trans-unit>
        <trans-unit id="35fa46cdfad9f57143883b7f4bf97917fce8f5fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; means do not switch to a buffer shown on the frame that hosts the window &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; is acting upon.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; means do not switch to a buffer shown on the frame that hosts the window &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; is acting upon.</target>
        </trans-unit>
        <trans-unit id="dc8c81c5704363757846f658896f4d2ab6fdd06a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thunk-let&lt;/code&gt; and &lt;code&gt;thunk-let*&lt;/code&gt; use thunks implicitly: their expansion creates helper symbols and binds them to thunks wrapping the binding expressions. All references to the original variables in the body &lt;var&gt;forms&lt;/var&gt; are then replaced by an expression that calls &lt;code&gt;thunk-force&lt;/code&gt; with the according helper variable as the argument. So, any code using &lt;code&gt;thunk-let&lt;/code&gt; or &lt;code&gt;thunk-let*&lt;/code&gt; could be rewritten to use thunks, but in many cases using these macros results in nicer code than using thunks explicitly.</source>
          <target state="translated">&lt;code&gt;thunk-let&lt;/code&gt; and &lt;code&gt;thunk-let*&lt;/code&gt; use thunks implicitly: their expansion creates helper symbols and binds them to thunks wrapping the binding expressions. All references to the original variables in the body &lt;var&gt;forms&lt;/var&gt; are then replaced by an expression that calls &lt;code&gt;thunk-force&lt;/code&gt; with the according helper variable as the argument. So, any code using &lt;code&gt;thunk-let&lt;/code&gt; or &lt;code&gt;thunk-let*&lt;/code&gt; could be rewritten to use thunks, but in many cases using these macros results in nicer code than using thunks explicitly.</target>
        </trans-unit>
        <trans-unit id="1635457aaed54c29c183ca9ed092a80dc29e4d70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time-to-seconds&lt;/code&gt; is an alias for this function.</source>
          <target state="translated">&lt;code&gt;time-to-seconds&lt;/code&gt; is an alias for this function.</target>
        </trans-unit>
        <trans-unit id="26c106c1ab2f109ecd879a98213bfc8ac5a2d35a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;top-left-angle&lt;/code&gt;, &lt;code&gt;top-right-angle&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;top-left-angle&lt;/code&gt; , &lt;code&gt;top-right-angle&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fdc662193077bc52c6a9cf20b8a1d930c0058986" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;truncation&lt;/code&gt;, &lt;code&gt;continuation&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;truncation&lt;/code&gt; , &lt;code&gt;continuation&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6c6ea0de9e9374af042b6bd3ef906b2af5702afb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;try-completion&lt;/code&gt; compares &lt;var&gt;string&lt;/var&gt; against each of the permissible completions specified by the completion table. If no permissible completions match, it returns &lt;code&gt;nil&lt;/code&gt;. If there is just one matching completion, and the match is exact, it returns &lt;code&gt;t&lt;/code&gt;. Otherwise, it returns the longest initial sequence common to all possible matching completions.</source>
          <target state="translated">&lt;code&gt;try-completion&lt;/code&gt; compares &lt;var&gt;string&lt;/var&gt; against each of the permissible completions specified by the completion table. If no permissible completions match, it returns &lt;code&gt;nil&lt;/code&gt; . If there is just one matching completion, and the match is exact, it returns &lt;code&gt;t&lt;/code&gt; . Otherwise, it returns the longest initial sequence common to all possible matching completions.</target>
        </trans-unit>
        <trans-unit id="742ccebb68329ec2fd3c50d040bcbe34bc9b1bb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt; if the notification server hasn&amp;rsquo;t provided a reason</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; if the notification server hasn&amp;rsquo;t provided a reason</target>
        </trans-unit>
        <trans-unit id="c58195fc3f2a7a906b58840d6e73503af41f547a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt; is used in local keymaps to override a global key binding and make the key undefined locally. A local binding of &lt;code&gt;nil&lt;/code&gt; would fail to do this because it would not override the global binding.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; is used in local keymaps to override a global key binding and make the key undefined locally. A local binding of &lt;code&gt;nil&lt;/code&gt; would fail to do this because it would not override the global binding.</target>
        </trans-unit>
        <trans-unit id="4abbd5612df0f57058f67cb30404ce3ad8bf4e37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unspecified&lt;/code&gt; is a relative value for all attributes. For &lt;code&gt;:height&lt;/code&gt;, floating point and function values are also relative.</source>
          <target state="translated">&lt;code&gt;unspecified&lt;/code&gt; is a relative value for all attributes. For &lt;code&gt;:height&lt;/code&gt; , floating point and function values are also relative.</target>
        </trans-unit>
        <trans-unit id="124f3fdc8f42c34d14b0df2c0020eb474f4eee0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unwind-protect&lt;/code&gt; executes &lt;var&gt;body-form&lt;/var&gt; with a guarantee that the &lt;var&gt;cleanup-forms&lt;/var&gt; will be evaluated if control leaves &lt;var&gt;body-form&lt;/var&gt;, no matter how that happens. &lt;var&gt;body-form&lt;/var&gt; may complete normally, or execute a &lt;code&gt;throw&lt;/code&gt; out of the &lt;code&gt;unwind-protect&lt;/code&gt;, or cause an error; in all cases, the &lt;var&gt;cleanup-forms&lt;/var&gt; will be evaluated.</source>
          <target state="translated">&lt;code&gt;unwind-protect&lt;/code&gt; executes &lt;var&gt;body-form&lt;/var&gt; with a guarantee that the &lt;var&gt;cleanup-forms&lt;/var&gt; will be evaluated if control leaves &lt;var&gt;body-form&lt;/var&gt; , no matter how that happens. &lt;var&gt;body-form&lt;/var&gt; may complete normally, or execute a &lt;code&gt;throw&lt;/code&gt; out of the &lt;code&gt;unwind-protect&lt;/code&gt; , or cause an error; in all cases, the &lt;var&gt;cleanup-forms&lt;/var&gt; will be evaluated.</target>
        </trans-unit>
        <trans-unit id="d81808bd6e7785579442de56a811c26e9936edbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;up-arrow&lt;/code&gt;, &lt;code&gt;down-arrow&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;up-arrow&lt;/code&gt; , &lt;code&gt;down-arrow&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8935adeb062340d1e761af492c6eaa9b7433f232" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;up&lt;/code&gt;, &lt;code&gt;down&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;top-bottom&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;up&lt;/code&gt; , &lt;code&gt;down&lt;/code&gt; , &lt;code&gt;top&lt;/code&gt; , &lt;code&gt;bottom&lt;/code&gt; , &lt;code&gt;top-bottom&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="47d330161b419cd92c499dffb7d1b14eb52cac0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;upper&lt;/code&gt;, &lt;code&gt;upper-case&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;upper&lt;/code&gt; , &lt;code&gt;upper-case&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="158a61e3891293cbbcf96cd60832d79e93f772f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vc-prefix-map&lt;/code&gt; is the global keymap used for the</source>
          <target state="translated">&lt;code&gt;vc-prefix-map&lt;/code&gt; is the global keymap used for the</target>
        </trans-unit>
        <trans-unit id="825022a69b3f863708db90f5ed68a02a6a6cb129" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vertical-bar&lt;/code&gt;, &lt;code&gt;horizontal-bar&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;vertical-bar&lt;/code&gt; , &lt;code&gt;horizontal-bar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a3a138938711530a671959761d2f5b9f94df0a46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;visible&lt;/code&gt; means consider windows on all visible frames.</source>
          <target state="translated">&lt;code&gt;visible&lt;/code&gt; means consider windows on all visible frames.</target>
        </trans-unit>
        <trans-unit id="77816e79409cf71a3ff6cf54ef6a99b6d9084ac1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;visible&lt;/code&gt; means do not switch to a buffer shown on any visible frame.</source>
          <target state="translated">&lt;code&gt;visible&lt;/code&gt; means do not switch to a buffer shown on any visible frame.</target>
        </trans-unit>
        <trans-unit id="a627c5f703440f7243320f587bc60b331be36cfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;visible&lt;/code&gt; means operate on all visible frames.</source>
          <target state="translated">&lt;code&gt;visible&lt;/code&gt; means operate on all visible frames.</target>
        </trans-unit>
        <trans-unit id="0e452b8631dd9c74908f6235ce975031b73eab84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;visible&lt;/code&gt; means to consider windows on all visible frames.</source>
          <target state="translated">&lt;code&gt;visible&lt;/code&gt; means to consider windows on all visible frames.</target>
        </trans-unit>
        <trans-unit id="6b417aa5a01b38f3953d2734846bd5504972f617" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while&lt;/code&gt; first evaluates &lt;var&gt;condition&lt;/var&gt;. If the result is non-&lt;code&gt;nil&lt;/code&gt;, it evaluates &lt;var&gt;forms&lt;/var&gt; in textual order. Then it reevaluates &lt;var&gt;condition&lt;/var&gt;, and if the result is non-&lt;code&gt;nil&lt;/code&gt;, it evaluates &lt;var&gt;forms&lt;/var&gt; again. This process repeats until &lt;var&gt;condition&lt;/var&gt; evaluates to &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; first evaluates &lt;var&gt;condition&lt;/var&gt; . If the result is non- &lt;code&gt;nil&lt;/code&gt; , it evaluates &lt;var&gt;forms&lt;/var&gt; in textual order. Then it reevaluates &lt;var&gt;condition&lt;/var&gt; , and if the result is non- &lt;code&gt;nil&lt;/code&gt; , it evaluates &lt;var&gt;forms&lt;/var&gt; again. This process repeats until &lt;var&gt;condition&lt;/var&gt; evaluates to &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c28c2a35f9d17a3343930a2172690998bd7ed6a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while&lt;/code&gt; loops.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; loops.</target>
        </trans-unit>
        <trans-unit id="81be4f19137f9a61fb5ee70cfec51ee80bd453b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wholenump&lt;/code&gt; is a synonym for &lt;code&gt;natnump&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;wholenump&lt;/code&gt; is a synonym for &lt;code&gt;natnump&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c30e3ea56a8b52086eba86f23ff7faec339cb641" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;window-preserve-size&lt;/code&gt; installs a window parameter (see &lt;a href=&quot;window-parameters#Window-Parameters&quot;&gt;Window Parameters&lt;/a&gt;) called &lt;code&gt;window-preserved-size&lt;/code&gt; which is consulted by the window resizing functions. This parameter will not prevent resizing the window when the window shows another buffer than the one when &lt;code&gt;window-preserve-size&lt;/code&gt; was invoked or if its size has changed since then.</source>
          <target state="translated">&lt;code&gt;window-preserve-size&lt;/code&gt; installs a window parameter (see &lt;a href=&quot;window-parameters#Window-Parameters&quot;&gt;Window Parameters&lt;/a&gt;) called &lt;code&gt;window-preserved-size&lt;/code&gt; which is consulted by the window resizing functions. This parameter will not prevent resizing the window when the window shows another buffer than the one when &lt;code&gt;window-preserve-size&lt;/code&gt; was invoked or if its size has changed since then.</target>
        </trans-unit>
        <trans-unit id="dfa8c3025baa1619a1cb484a98d518b5cb3a4666" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;window-preserve-size&lt;/code&gt; is currently invoked by the following functions:</source>
          <target state="translated">&lt;code&gt;window-preserve-size&lt;/code&gt; is currently invoked by the following functions:</target>
        </trans-unit>
        <trans-unit id="084ca655493b3ba8f35420163c15a65c888726c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;window-text-pixel-size&lt;/code&gt; treats the text displayed in a window as a whole and does not care about the size of individual lines. The following function does.</source>
          <target state="translated">&lt;code&gt;window-text-pixel-size&lt;/code&gt; treats the text displayed in a window as a whole and does not care about the size of individual lines. The following function does.</target>
        </trans-unit>
        <trans-unit id="c2e71a1180aa7a9a3d673745a9a8f4074202f2a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;with-output-to-temp-buffer&lt;/code&gt; binds &lt;code&gt;standard-output&lt;/code&gt; to the temporary buffer, then it evaluates the forms in &lt;var&gt;body&lt;/var&gt;. Output using the Lisp output functions within &lt;var&gt;body&lt;/var&gt; goes by default to that buffer (but screen display and messages in the echo area, although they are &amp;ldquo;output&amp;rdquo; in the general sense of the word, are not affected). See &lt;a href=&quot;output-functions#Output-Functions&quot;&gt;Output Functions&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;with-output-to-temp-buffer&lt;/code&gt; binds &lt;code&gt;standard-output&lt;/code&gt; to the temporary buffer, then it evaluates the forms in &lt;var&gt;body&lt;/var&gt; . Output using the Lisp output functions within &lt;var&gt;body&lt;/var&gt; goes by default to that buffer (but screen display and messages in the echo area, although they are &amp;ldquo;output&amp;rdquo; in the general sense of the word, are not affected). See &lt;a href=&quot;output-functions#Output-Functions&quot;&gt;Output Functions&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e84f2f07e30b4ea5b6c20826c999333168050c7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;word-end&lt;/code&gt;, &lt;code&gt;eow&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;word-end&lt;/code&gt; , &lt;code&gt;eow&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="16546b833113bda25ce2e4419ca8eceff3c8b2e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;word-start&lt;/code&gt;, &lt;code&gt;bow&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;word-start&lt;/code&gt; , &lt;code&gt;bow&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="827f531e685c5586bab6272e4714cb1f0b74f54f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;word&lt;/code&gt;, &lt;code&gt;wordchar&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;word&lt;/code&gt; , &lt;code&gt;wordchar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bb2c2f7c4cb32494d97ed15a5af54c85a51810ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;xdigit&lt;/code&gt;, &lt;code&gt;hex-digit&lt;/code&gt;, &lt;code&gt;hex&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;xdigit&lt;/code&gt; , &lt;code&gt;hex-digit&lt;/code&gt; , &lt;code&gt;hex&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8f40edd7b33461714aab3f00a1e35711dbe3ef1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yank&lt;/code&gt; does not alter the contents of the kill ring, unless it used text provided by another program, in which case it pushes that text onto the kill ring. However if &lt;var&gt;arg&lt;/var&gt; is an integer different from one, it rotates the kill ring to place the yanked string at the front.</source>
          <target state="translated">&lt;code&gt;yank&lt;/code&gt; does not alter the contents of the kill ring, unless it used text provided by another program, in which case it pushes that text onto the kill ring. However if &lt;var&gt;arg&lt;/var&gt; is an integer different from one, it rotates the kill ring to place the yanked string at the front.</target>
        </trans-unit>
        <trans-unit id="4126970d6a7ed13e2eda65cb72f08e67f0f64f18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yank&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;yank&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cc9e4d7d0310a3211cb2de0be80e8626f71d3e81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yes-or-no-p&lt;/code&gt; requires more work from the user than &lt;code&gt;y-or-n-p&lt;/code&gt; and is appropriate for more crucial decisions.</source>
          <target state="translated">&lt;code&gt;yes-or-no-p&lt;/code&gt; requires more work from the user than &lt;code&gt;y-or-n-p&lt;/code&gt; and is appropriate for more crucial decisions.</target>
        </trans-unit>
        <trans-unit id="4ef594a430773406e23fbc4cd92fa339e01285bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yes-or-no-p&lt;/code&gt; starts by displaying &lt;var&gt;prompt&lt;/var&gt; in the minibuffer, followed by &amp;lsquo;</source>
          <target state="translated">&lt;code&gt;yes-or-no-p&lt;/code&gt; starts by displaying &lt;var&gt;prompt&lt;/var&gt; in the minibuffer, followed by &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="1bb5dae876438c6d89cc978517eaaf9a3cd5e088" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Backquote constructs&lt;/em&gt; allow you to quote a list, but selectively evaluate elements of that list. In the simplest case, it is identical to the special form &lt;code&gt;quote&lt;/code&gt; (described in the previous section; see &lt;a href=&quot;quoting#Quoting&quot;&gt;Quoting&lt;/a&gt;). For example, these two forms yield identical results:</source>
          <target state="translated">&lt;em&gt;Backquote constructs&lt;/em&gt; allow you to quote a list, but selectively evaluate elements of that list. In the simplest case, it is identical to the special form &lt;code&gt;quote&lt;/code&gt; (described in the previous section; see &lt;a href=&quot;quoting#Quoting&quot;&gt;Quoting&lt;/a&gt;). For example, these two forms yield identical results:</target>
        </trans-unit>
        <trans-unit id="52d398a3e39ccaa473ca45e376fe6cbb42cee86c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Base coding systems&lt;/em&gt; such as &lt;code&gt;latin-1&lt;/code&gt; leave the end-of-line conversion unspecified, to be chosen based on the data. &lt;em&gt;Variant coding systems&lt;/em&gt; such as &lt;code&gt;latin-1-unix&lt;/code&gt;, &lt;code&gt;latin-1-dos&lt;/code&gt; and &lt;code&gt;latin-1-mac&lt;/code&gt; specify the end-of-line conversion explicitly as well. Most base coding systems have three corresponding variants whose names are formed by adding &amp;lsquo;</source>
          <target state="translated">&lt;em&gt;Base coding systems&lt;/em&gt; such as &lt;code&gt;latin-1&lt;/code&gt; leave the end-of-line conversion unspecified, to be chosen based on the data. &lt;em&gt;Variant coding systems&lt;/em&gt; such as &lt;code&gt;latin-1-unix&lt;/code&gt; , &lt;code&gt;latin-1-dos&lt;/code&gt; and &lt;code&gt;latin-1-mac&lt;/code&gt; specify the end-of-line conversion explicitly as well. Most base coding systems have three corresponding variants whose names are formed by adding &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="51b7d02da1d055c8be3f5ae434d97d9a260939bb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Byte-code function objects&lt;/em&gt; are produced by byte-compiling Lisp code (see &lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;Byte Compilation&lt;/a&gt;). Internally, a byte-code function object is much like a vector; however, the evaluator handles this data type specially when it appears in a function call. See &lt;a href=&quot;byte_002dcode-objects#Byte_002dCode-Objects&quot;&gt;Byte-Code Objects&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Byte-code function objects&lt;/em&gt; are produced by byte-compiling Lisp code (see &lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;Byte Compilation&lt;/a&gt;). Internally, a byte-code function object is much like a vector; however, the evaluator handles this data type specially when it appears in a function call. See &lt;a href=&quot;byte_002dcode-objects#Byte_002dCode-Objects&quot;&gt;Byte-Code Objects&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5dbbd81db1ec718403ad921765144545b1bbfac6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Categories&lt;/em&gt; provide an alternate way of classifying characters syntactically. You can define several categories as needed, then independently assign each character to one or more categories. Unlike syntax classes, categories are not mutually exclusive; it is normal for one character to belong to several categories.</source>
          <target state="translated">&lt;em&gt;Categories&lt;/em&gt; provide an alternate way of classifying characters syntactically. You can define several categories as needed, then independently assign each character to one or more categories. Unlike syntax classes, categories are not mutually exclusive; it is normal for one character to belong to several categories.</target>
        </trans-unit>
        <trans-unit id="1558d6fbf1fe03911a5a03e621568b3d9a4ce168" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Character code conversion&lt;/em&gt; involves conversion between the internal representation of characters used inside Emacs and some other encoding. Emacs supports many different encodings, in that it can convert to and from them. For example, it can convert text to or from encodings such as Latin 1, Latin 2, Latin 3, Latin 4, Latin 5, and several variants of ISO 2022. In some cases, Emacs supports several alternative encodings for the same characters; for example, there are three coding systems for the Cyrillic (Russian) alphabet: ISO, Alternativnyj, and KOI8.</source>
          <target state="translated">&lt;em&gt;Character code conversion&lt;/em&gt; involves conversion between the internal representation of characters used inside Emacs and some other encoding. Emacs supports many different encodings, in that it can convert to and from them. For example, it can convert text to or from encodings such as Latin 1, Latin 2, Latin 3, Latin 4, Latin 5, and several variants of ISO 2022. In some cases, Emacs supports several alternative encodings for the same characters; for example, there are three coding systems for the Cyrillic (Russian) alphabet: ISO, Alternativnyj, and KOI8.</target>
        </trans-unit>
        <trans-unit id="2280765473a8763d5ed8fdb811b91a718fab2b2f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Clickable text&lt;/em&gt; is text that can be clicked, with either the mouse or via a keyboard command, to produce some result. Many major modes use clickable text to implement textual hyper-links, or &lt;em&gt;links&lt;/em&gt; for short.</source>
          <target state="translated">&lt;em&gt;Clickable text&lt;/em&gt; is text that can be clicked, with either the mouse or via a keyboard command, to produce some result. Many major modes use clickable text to implement textual hyper-links, or &lt;em&gt;links&lt;/em&gt; for short.</target>
        </trans-unit>
        <trans-unit id="896ce8b737ceaab656b74c1b4f5d586889200d2b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Completion&lt;/em&gt; is a feature that fills in the rest of a name starting from an abbreviation for it. Completion works by comparing the user&amp;rsquo;s input against a list of valid names and determining how much of the name is determined uniquely by what the user has typed. For example, when you type</source>
          <target state="translated">&lt;em&gt;Completion&lt;/em&gt; is a feature that fills in the rest of a name starting from an abbreviation for it. Completion works by comparing the user&amp;rsquo;s input against a list of valid names and determining how much of the name is determined uniquely by what the user has typed. For example, when you type</target>
        </trans-unit>
        <trans-unit id="63d57554d3523ee752846b3da7ebbb9b7117ca1a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Custom themes&lt;/em&gt; are collections of settings that can be enabled or disabled as a unit. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html#Custom-Themes&quot;&gt;Custom Themes&lt;/a&gt; in</source>
          <target state="translated">&lt;em&gt;Custom themes&lt;/em&gt; are collections of settings that can be enabled or disabled as a unit. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html#Custom-Themes&quot;&gt;Custom Themes&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="59c2468b329e81a15b4582afd13987bde009bc69" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Customizable variables&lt;/em&gt;, also called &lt;em&gt;user options&lt;/em&gt;, are global Lisp variables whose values can be set through the Customize interface. Unlike other global variables, which are defined with &lt;code&gt;defvar&lt;/code&gt; (see &lt;a href=&quot;defining-variables#Defining-Variables&quot;&gt;Defining Variables&lt;/a&gt;), customizable variables are defined using the &lt;code&gt;defcustom&lt;/code&gt; macro. In addition to calling &lt;code&gt;defvar&lt;/code&gt; as a subroutine, &lt;code&gt;defcustom&lt;/code&gt; states how the variable should be displayed in the Customize interface, the values it is allowed to take, etc.</source>
          <target state="translated">&lt;em&gt;Customizable variables&lt;/em&gt;, also called &lt;em&gt;user options&lt;/em&gt;, are global Lisp variables whose values can be set through the Customize interface. Unlike other global variables, which are defined with &lt;code&gt;defvar&lt;/code&gt; (see &lt;a href=&quot;defining-variables#Defining-Variables&quot;&gt;Defining Variables&lt;/a&gt;), customizable variables are defined using the &lt;code&gt;defcustom&lt;/code&gt; macro. In addition to calling &lt;code&gt;defvar&lt;/code&gt; as a subroutine, &lt;code&gt;defcustom&lt;/code&gt; states how the variable should be displayed in the Customize interface, the values it is allowed to take, etc.</target>
        </trans-unit>
        <trans-unit id="d2cd1f82937a4eb7683a776100c85b39df7832c6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Deleting a process&lt;/em&gt; disconnects Emacs immediately from the subprocess. Processes are deleted automatically after they terminate, but not necessarily right away. You can delete a process explicitly at any time. If you explicitly delete a terminated process before it is deleted automatically, no harm results. Deleting a running process sends a signal to terminate it (and its child processes, if any), and calls the process sentinel. See &lt;a href=&quot;sentinels#Sentinels&quot;&gt;Sentinels&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Deleting a process&lt;/em&gt; disconnects Emacs immediately from the subprocess. Processes are deleted automatically after they terminate, but not necessarily right away. You can delete a process explicitly at any time. If you explicitly delete a terminated process before it is deleted automatically, no harm results. Deleting a running process sends a signal to terminate it (and its child processes, if any), and calls the process sentinel. See &lt;a href=&quot;sentinels#Sentinels&quot;&gt;Sentinels&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6a04597d44103a66abcb00dff3bbf8451a6cde11" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Deleting&lt;/em&gt; a window removes it from the frame&amp;rsquo;s window tree. If the window is a live window, it disappears from the screen. If the window is an internal window, its child windows are deleted too.</source>
          <target state="translated">&lt;em&gt;Deleting&lt;/em&gt; a window removes it from the frame&amp;rsquo;s window tree. If the window is a live window, it disappears from the screen. If the window is an internal window, its child windows are deleted too.</target>
        </trans-unit>
        <trans-unit id="a81cd1d7c6f845c2f4389ced6d9de2027622091f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Desktop Save Mode&lt;/em&gt; is a feature to save the state of Emacs from one session to another. The user-level commands for using Desktop Save Mode are described in the GNU Emacs Manual (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html#Saving-Emacs-Sessions&quot;&gt;Saving Emacs Sessions&lt;/a&gt; in</source>
          <target state="translated">&lt;em&gt;Desktop Save Mode&lt;/em&gt; is a feature to save the state of Emacs from one session to another. The user-level commands for using Desktop Save Mode are described in the GNU Emacs Manual (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html#Saving-Emacs-Sessions&quot;&gt;Saving Emacs Sessions&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="6a98088cdd182559754e982a584f93bcf30a3813" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Disabling a command&lt;/em&gt; marks the command as requiring user confirmation before it can be executed. Disabling is used for commands which might be confusing to beginning users, to prevent them from using the commands by accident.</source>
          <target state="translated">&lt;em&gt;Disabling a command&lt;/em&gt; marks the command as requiring user confirmation before it can be executed. Disabling is used for commands which might be confusing to beginning users, to prevent them from using the commands by accident.</target>
        </trans-unit>
        <trans-unit id="eb0a8a9ea212b9db6c42c1e84c8e32063775f5a6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Dotted pair notation&lt;/em&gt; is a general syntax for cons cells that represents the &lt;small&gt;CAR&lt;/small&gt; and &lt;small&gt;CDR&lt;/small&gt; explicitly. In this syntax, &lt;code&gt;(&lt;var&gt;a&lt;/var&gt; . &lt;var&gt;b&lt;/var&gt;)&lt;/code&gt; stands for a cons cell whose &lt;small&gt;CAR&lt;/small&gt; is the object &lt;var&gt;a&lt;/var&gt; and whose &lt;small&gt;CDR&lt;/small&gt; is the object &lt;var&gt;b&lt;/var&gt;. Dotted pair notation is more general than list syntax because the &lt;small&gt;CDR&lt;/small&gt; does not have to be a list. However, it is more cumbersome in cases where list syntax would work. In dotted pair notation, the list &amp;lsquo;</source>
          <target state="translated">&lt;em&gt;Dotted pair notation&lt;/em&gt; is a general syntax for cons cells that represents the &lt;small&gt;CAR&lt;/small&gt; and &lt;small&gt;CDR&lt;/small&gt; explicitly. In this syntax, &lt;code&gt;(&lt;var&gt;a&lt;/var&gt; . &lt;var&gt;b&lt;/var&gt;)&lt;/code&gt; stands for a cons cell whose &lt;small&gt;CAR&lt;/small&gt; is the object &lt;var&gt;a&lt;/var&gt; and whose &lt;small&gt;CDR&lt;/small&gt; is the object &lt;var&gt;b&lt;/var&gt; . Dotted pair notation is more general than list syntax because the &lt;small&gt;CDR&lt;/small&gt; does not have to be a list. However, it is more cumbersome in cases where list syntax would work. In dotted pair notation, the list &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="d05af30e83de96c74400c03d5c224bcd479e45b8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;End of line conversion&lt;/em&gt; handles three different conventions used on various systems for representing end of line in files. The Unix convention, used on GNU and Unix systems, is to use the linefeed character (also called newline). The DOS convention, used on MS-Windows and MS-DOS systems, is to use a carriage return and a linefeed at the end of a line. The Mac convention is to use just carriage return. (This was the convention used in Classic Mac OS.)</source>
          <target state="translated">&lt;em&gt;End of line conversion&lt;/em&gt; handles three different conventions used on various systems for representing end of line in files. The Unix convention, used on GNU and Unix systems, is to use the linefeed character (also called newline). The DOS convention, used on MS-Windows and MS-DOS systems, is to use a carriage return and a linefeed at the end of a line. The Mac convention is to use just carriage return. (This was the convention used in Classic Mac OS.)</target>
        </trans-unit>
        <trans-unit id="7525ea7dc927a64f5dc8869487e40c6d636e3777" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Expanding&lt;/em&gt; a file name means converting a relative file name to an absolute one. Since this is done relative to a default directory, you must specify the default directory as well as the file name to be expanded. It also involves expanding abbreviations like</source>
          <target state="translated">&lt;em&gt;Expanding&lt;/em&gt; a file name means converting a relative file name to an absolute one. Since this is done relative to a default directory, you must specify the default directory as well as the file name to be expanded. It also involves expanding abbreviations like</target>
        </trans-unit>
        <trans-unit id="e238173aa0c8a6a07d4777f2af3642f8e79949df" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Experience shows that using dynamic function loading provides benefits that are hardly measurable, so this feature is deprecated since Emacs 27.1.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Experience shows that using dynamic function loading provides benefits that are hardly measurable, so this feature is deprecated since Emacs 27.1.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4d4acaa738d1bb5676446288b0e8540c4e231918" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Face attributes&lt;/em&gt; determine the visual appearance of a face. The following table lists all the face attributes, their possible values, and their effects.</source>
          <target state="translated">&lt;em&gt;Face attributes&lt;/em&gt; determine the visual appearance of a face. The following table lists all the face attributes, their possible values, and their effects.</target>
        </trans-unit>
        <trans-unit id="012a0b361ae7bc306740626a022ce7edb06aed35" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Filling&lt;/em&gt; means adjusting the lengths of lines (by moving the line breaks) so that they are nearly (but no greater than) a specified maximum width. Additionally, lines can be &lt;em&gt;justified&lt;/em&gt;, which means inserting spaces to make the left and/or right margins line up precisely. The width is controlled by the variable &lt;code&gt;fill-column&lt;/code&gt;. For ease of reading, lines should be no longer than 70 or so columns.</source>
          <target state="translated">&lt;em&gt;Filling&lt;/em&gt; means adjusting the lengths of lines (by moving the line breaks) so that they are nearly (but no greater than) a specified maximum width. Additionally, lines can be &lt;em&gt;justified&lt;/em&gt;, which means inserting spaces to make the left and/or right margins line up precisely. The width is controlled by the variable &lt;code&gt;fill-column&lt;/code&gt; . For ease of reading, lines should be no longer than 70 or so columns.</target>
        </trans-unit>
        <trans-unit id="6be21549dd8cb0cb5b56d3378fa69c057f0887ec" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Font Lock mode&lt;/em&gt; is a buffer-local minor mode that automatically attaches &lt;code&gt;face&lt;/code&gt; properties to certain parts of the buffer based on their syntactic role. How it parses the buffer depends on the major mode; most major modes define syntactic criteria for which faces to use in which contexts. This section explains how to customize Font Lock for a particular major mode.</source>
          <target state="translated">&lt;em&gt;Font Lock mode&lt;/em&gt; is a buffer-local minor mode that automatically attaches &lt;code&gt;face&lt;/code&gt; properties to certain parts of the buffer based on their syntactic role. How it parses the buffer depends on the major mode; most major modes define syntactic criteria for which faces to use in which contexts. This section explains how to customize Font Lock for a particular major mode.</target>
        </trans-unit>
        <trans-unit id="6ebc87bbb7e17bed3e9c29a0284f9bee1e5c5c1a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Formatting&lt;/em&gt; means constructing a string by substituting computed values at various places in a constant string. This constant string controls how the other values are printed, as well as where they appear; it is called a &lt;em&gt;format string&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;Formatting&lt;/em&gt; means constructing a string by substituting computed values at various places in a constant string. This constant string controls how the other values are printed, as well as where they appear; it is called a &lt;em&gt;format string&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="0e507faa00934023f42170624d268ab633490367" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Fringe indicators&lt;/em&gt; are tiny icons displayed in the window fringe to indicate truncated or continued lines, buffer boundaries, etc.</source>
          <target state="translated">&lt;em&gt;Fringe indicators&lt;/em&gt; are tiny icons displayed in the window fringe to indicate truncated or continued lines, buffer boundaries, etc.</target>
        </trans-unit>
        <trans-unit id="c4a2bfc783163eddcde352fbc4dd6772b257ca00" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Generic modes&lt;/em&gt; are simple major modes with basic support for comment syntax and Font Lock mode. To define a generic mode, use the macro &lt;code&gt;define-generic-mode&lt;/code&gt;. See the file</source>
          <target state="translated">&lt;em&gt;Generic modes&lt;/em&gt; are simple major modes with basic support for comment syntax and Font Lock mode. To define a generic mode, use the macro &lt;code&gt;define-generic-mode&lt;/code&gt; . See the file</target>
        </trans-unit>
        <trans-unit id="112776f7781a51db193688bdbd2c5e934d7ba37b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Glyphless characters&lt;/em&gt; are characters which are displayed in a special way, e.g., as a box containing a hexadecimal code, instead of being displayed literally. These include characters which are explicitly defined to be glyphless, as well as characters for which there is no available font (on a graphical display), and characters which cannot be encoded by the terminal&amp;rsquo;s coding system (on a text terminal).</source>
          <target state="translated">&lt;em&gt;Glyphless characters&lt;/em&gt; are characters which are displayed in a special way, e.g., as a box containing a hexadecimal code, instead of being displayed literally. These include characters which are explicitly defined to be glyphless, as well as characters for which there is no available font (on a graphical display), and characters which cannot be encoded by the terminal&amp;rsquo;s coding system (on a text terminal).</target>
        </trans-unit>
        <trans-unit id="4fcbce64e8b9f4d24225b3774ba8d80b3cad522d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Horizontal scrolling&lt;/em&gt; means shifting the image in the window left or right by a specified multiple of the normal character width. Each window has a &lt;em&gt;horizontal scroll position&lt;/em&gt;, which is a number, never less than zero. It specifies how far to shift the contents left. Shifting the window contents left generally makes all or part of some characters disappear off the left, and all or part of some other characters appear at the right. The usual value is zero.</source>
          <target state="translated">&lt;em&gt;Horizontal scrolling&lt;/em&gt; means shifting the image in the window left or right by a specified multiple of the normal character width. Each window has a &lt;em&gt;horizontal scroll position&lt;/em&gt;, which is a number, never less than zero. It specifies how far to shift the contents left. Shifting the window contents left generally makes all or part of some characters disappear off the left, and all or part of some other characters appear at the right. The usual value is zero.</target>
        </trans-unit>
        <trans-unit id="93402787644d1d7eafe5bba491536d2c7912cfa7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Imenu&lt;/em&gt; is a feature that lets users select a definition or section in the buffer, from a menu which lists all of them, to go directly to that location in the buffer. Imenu works by constructing a buffer index which lists the names and buffer positions of the definitions, or other named portions of the buffer; then the user can choose one of them and move point to it. Major modes can add a menu bar item to use Imenu using &lt;code&gt;imenu-add-to-menubar&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;Imenu&lt;/em&gt; is a feature that lets users select a definition or section in the buffer, from a menu which lists all of them, to go directly to that location in the buffer. Imenu works by constructing a buffer index which lists the names and buffer positions of the definitions, or other named portions of the buffer; then the user can choose one of them and move point to it. Major modes can add a menu bar item to use Imenu using &lt;code&gt;imenu-add-to-menubar&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2d23fc3b6ee48861c0752ea1530c14e065028d3f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Input methods&lt;/em&gt; provide convenient ways of entering non-</source>
          <target state="translated">&lt;em&gt;Input methods&lt;/em&gt; provide convenient ways of entering non-</target>
        </trans-unit>
        <trans-unit id="3ee20567a4dabe85bc7a2e8fd9c60352f47fec7f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Insertion&lt;/em&gt; means adding new text to a buffer. The inserted text goes at point&amp;mdash;between the character before point and the character after point. Some insertion functions leave point before the inserted text, while other functions leave it after. We call the former insertion &lt;em&gt;after point&lt;/em&gt; and the latter insertion &lt;em&gt;before point&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;Insertion&lt;/em&gt; means adding new text to a buffer. The inserted text goes at point&amp;mdash;between the character before point and the character after point. Some insertion functions leave point before the inserted text, while other functions leave it after. We call the former insertion &lt;em&gt;after point&lt;/em&gt; and the latter insertion &lt;em&gt;before point&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="450e3407eb4f03adcc2aec7c838ee4624ba54573" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Key lookup&lt;/em&gt; is the process of finding the binding of a key sequence from a given keymap. The execution or use of the binding is not part of key lookup.</source>
          <target state="translated">&lt;em&gt;Key lookup&lt;/em&gt; is the process of finding the binding of a key sequence from a given keymap. The execution or use of the binding is not part of key lookup.</target>
        </trans-unit>
        <trans-unit id="8fa89626f95af4781c407f7abfa45810f2067b99" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Kill functions&lt;/em&gt; delete text like the deletion functions, but save it so that the user can reinsert it by &lt;em&gt;yanking&lt;/em&gt;. Most of these functions have &amp;lsquo;</source>
          <target state="translated">&lt;em&gt;Kill functions&lt;/em&gt; delete text like the deletion functions, but save it so that the user can reinsert it by &lt;em&gt;yanking&lt;/em&gt;. Most of these functions have &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="e750f743a960078ed373cd9c29df128dfa4aef0e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Killing a buffer&lt;/em&gt; makes its name unknown to Emacs and makes the memory space it occupied available for other use.</source>
          <target state="translated">&lt;em&gt;Killing a buffer&lt;/em&gt; makes its name unknown to Emacs and makes the memory space it occupied available for other use.</target>
        </trans-unit>
        <trans-unit id="d02ce601b5b10f3d058800e2800ad7f708907fbf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Macros&lt;/em&gt; enable you to define new control constructs and other language features. A macro is defined much like a function, but instead of telling how to compute a value, it tells how to compute another Lisp expression which will in turn compute the value. We call this expression the &lt;em&gt;expansion&lt;/em&gt; of the macro.</source>
          <target state="translated">&lt;em&gt;Macros&lt;/em&gt; enable you to define new control constructs and other language features. A macro is defined much like a function, but instead of telling how to compute a value, it tells how to compute another Lisp expression which will in turn compute the value. We call this expression the &lt;em&gt;expansion&lt;/em&gt; of the macro.</target>
        </trans-unit>
        <trans-unit id="b7f04fd1b052b638ef4bddfcc5d3e36d470f8ae2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Narrowing&lt;/em&gt; means limiting the text addressable by Emacs editing commands to a limited range of characters in a buffer. The text that remains addressable is called the &lt;em&gt;accessible portion&lt;/em&gt; of the buffer.</source>
          <target state="translated">&lt;em&gt;Narrowing&lt;/em&gt; means limiting the text addressable by Emacs editing commands to a limited range of characters in a buffer. The text that remains addressable is called the &lt;em&gt;accessible portion&lt;/em&gt; of the buffer.</target>
        </trans-unit>
        <trans-unit id="f76cc0b3cbad8d2db0f2f0631879949e24049985" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Point&lt;/em&gt; is a special buffer position used by many editing commands, including the self-inserting typed characters and text insertion functions. Other commands move point through the text to allow editing and insertion at different places.</source>
          <target state="translated">&lt;em&gt;Point&lt;/em&gt; is a special buffer position used by many editing commands, including the self-inserting typed characters and text insertion functions. Other commands move point through the text to allow editing and insertion at different places.</target>
        </trans-unit>
        <trans-unit id="4f1d8b41be48e34b694c6ff7cfd0bf33a88ecdc2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Printing&lt;/em&gt; a Lisp object means producing text that represents that object&amp;mdash;converting the object to its &lt;em&gt;printed representation&lt;/em&gt; (see &lt;a href=&quot;printed-representation#Printed-Representation&quot;&gt;Printed Representation&lt;/a&gt;). Printing the cons cell described above produces the text &amp;lsquo;</source>
          <target state="translated">&lt;em&gt;Printing&lt;/em&gt; a Lisp object means producing text that represents that object&amp;mdash;converting the object to its &lt;em&gt;printed representation&lt;/em&gt; (see &lt;a href=&quot;printed-representation#Printed-Representation&quot;&gt;Printed Representation&lt;/a&gt;). Printing the cons cell described above produces the text &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="3486a4d997a0991471cc5bda965e32d990483810" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Printing&lt;/em&gt; and &lt;em&gt;reading&lt;/em&gt; are the operations of converting Lisp objects to textual form and vice versa. They use the printed representations and read syntax described in &lt;a href=&quot;lisp-data-types#Lisp-Data-Types&quot;&gt;Lisp Data Types&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Printing&lt;/em&gt; and &lt;em&gt;reading&lt;/em&gt; are the operations of converting Lisp objects to textual form and vice versa. They use the printed representations and read syntax described in &lt;a href=&quot;lisp-data-types#Lisp-Data-Types&quot;&gt;Lisp Data Types&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="2f09674ebe8ae04d0dfaa08942261acf706c3808" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Radio buttons&lt;/em&gt; are a group of menu items, in which at any time one and only one is selected. There should be a variable whose value says which one is selected at any time. The &lt;var&gt;selected&lt;/var&gt; form for each radio button in the group should check whether the variable has the right value for selecting that button. Clicking on the button should set the variable so that the button you clicked on becomes selected.</source>
          <target state="translated">&lt;em&gt;Radio buttons&lt;/em&gt; are a group of menu items, in which at any time one and only one is selected. There should be a variable whose value says which one is selected at any time. The &lt;var&gt;selected&lt;/var&gt; form for each radio button in the group should check whether the variable has the right value for selecting that button. Clicking on the button should set the variable so that the button you clicked on becomes selected.</target>
        </trans-unit>
        <trans-unit id="ab34954a6344cc9f97aee9484c997887b7839fdc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Raw bytes&lt;/em&gt; are non-</source>
          <target state="translated">&lt;em&gt;Raw bytes&lt;/em&gt; are non-</target>
        </trans-unit>
        <trans-unit id="ed4269883b3c79ca4adc800e4219a3f334e69fa5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Reading&lt;/em&gt; a Lisp object means parsing a Lisp expression in textual form and producing a corresponding Lisp object. This is how Lisp programs get into Lisp from files of Lisp code. We call the text the &lt;em&gt;read syntax&lt;/em&gt; of the object. For example, the text &amp;lsquo;</source>
          <target state="translated">&lt;em&gt;Reading&lt;/em&gt; a Lisp object means parsing a Lisp expression in textual form and producing a corresponding Lisp object. This is how Lisp programs get into Lisp from files of Lisp code. We call the text the &lt;em&gt;read syntax&lt;/em&gt; of the object. For example, the text &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="542ea923b04cc1dd1ce08b789da1b9d9a6edaf8f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;SVG paths&lt;/em&gt; allow creation of complex images by combining lines, curves, arcs, and other basic shapes. The functions described below allow invoking SVG path commands from a Lisp program.</source>
          <target state="translated">&lt;em&gt;SVG paths&lt;/em&gt; allow creation of complex images by combining lines, curves, arcs, and other basic shapes. The functions described below allow invoking SVG path commands from a Lisp program.</target>
        </trans-unit>
        <trans-unit id="73c188badc81bf3fc4092200e27bb45f1e16c9ec" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Selective display&lt;/em&gt; refers to a pair of related features for hiding certain lines on the screen.</source>
          <target state="translated">&lt;em&gt;Selective display&lt;/em&gt; refers to a pair of related features for hiding certain lines on the screen.</target>
        </trans-unit>
        <trans-unit id="bf63ae9c067ac9de03cc843159e0246f28041dea" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Sending a signal&lt;/em&gt; to a subprocess is a way of interrupting its activities. There are several different signals, each with its own meaning. The set of signals and their names is defined by the operating system. For example, the signal &lt;code&gt;SIGINT&lt;/code&gt; means that the user has typed</source>
          <target state="translated">&lt;em&gt;Sending a signal&lt;/em&gt; to a subprocess is a way of interrupting its activities. There are several different signals, each with its own meaning. The set of signals and their names is defined by the operating system. For example, the signal &lt;code&gt;SIGINT&lt;/code&gt; means that the user has typed</target>
        </trans-unit>
        <trans-unit id="8517a23cb3410f1a9a7dbb62a23f1121a3f4bfb7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Signaling&lt;/em&gt; an error means beginning error processing. Error processing normally aborts all or part of the running program and returns to a point that is set up to handle the error (see &lt;a href=&quot;processing-of-errors#Processing-of-Errors&quot;&gt;Processing of Errors&lt;/a&gt;). Here we describe how to signal an error.</source>
          <target state="translated">&lt;em&gt;Signaling&lt;/em&gt; an error means beginning error processing. Error processing normally aborts all or part of the running program and returns to a point that is set up to handle the error (see &lt;a href=&quot;processing-of-errors#Processing-of-Errors&quot;&gt;Processing of Errors&lt;/a&gt;). Here we describe how to signal an error.</target>
        </trans-unit>
        <trans-unit id="4e9d8ee4cad5d0529cec696f38446bdf19fdb896" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Textual scrolling&lt;/em&gt; means moving the text up or down through a window. It works by changing the window&amp;rsquo;s display-start location. It may also change the value of &lt;code&gt;window-point&lt;/code&gt; to keep point on the screen (see &lt;a href=&quot;window-point#Window-Point&quot;&gt;Window Point&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;Textual scrolling&lt;/em&gt; means moving the text up or down through a window. It works by changing the window&amp;rsquo;s display-start location. It may also change the value of &lt;code&gt;window-point&lt;/code&gt; to keep point on the screen (see &lt;a href=&quot;window-point#Window-Point&quot;&gt;Window Point&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="9740e3157a8155d498bbc4297186350c293bbe46" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Tooltips&lt;/em&gt; are special frames (see &lt;a href=&quot;frames#Frames&quot;&gt;Frames&lt;/a&gt;) that are used to display helpful hints (a.k.a. &amp;ldquo;tips&amp;rdquo;) related to the current position of the mouse pointer. Emacs uses tooltips to display help strings about active portions of text (see &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Special Properties&lt;/a&gt;) and about various UI elements, such as menu items (see &lt;a href=&quot;extended-menu-items#Extended-Menu-Items&quot;&gt;Extended Menu Items&lt;/a&gt;) and tool-bar buttons (see &lt;a href=&quot;tool-bar#Tool-Bar&quot;&gt;Tool Bar&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;Tooltips&lt;/em&gt; are special frames (see &lt;a href=&quot;frames#Frames&quot;&gt;Frames&lt;/a&gt;) that are used to display helpful hints (a.k.a. &amp;ldquo;tips&amp;rdquo;) related to the current position of the mouse pointer. Emacs uses tooltips to display help strings about active portions of text (see &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Special Properties&lt;/a&gt;) and about various UI elements, such as menu items (see &lt;a href=&quot;extended-menu-items#Extended-Menu-Items&quot;&gt;Extended Menu Items&lt;/a&gt;) and tool-bar buttons (see &lt;a href=&quot;tool-bar#Tool-Bar&quot;&gt;Tool Bar&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="f32db6bb4b57bc264e0f679447e2ae5d29a9ba1a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Vertical fractional scrolling&lt;/em&gt; means shifting text in a window up or down by a specified multiple or fraction of a line. Emacs uses it, for example, on images and screen lines which are taller than the window. Each window has a &lt;em&gt;vertical scroll position&lt;/em&gt;, which is a number, never less than zero. It specifies how far to raise the contents of the window when displaying them. Raising the window contents generally makes all or part of some lines disappear off the top, and all or part of some other lines appear at the bottom. The usual value is zero.</source>
          <target state="translated">&lt;em&gt;Vertical fractional scrolling&lt;/em&gt; means shifting text in a window up or down by a specified multiple or fraction of a line. Emacs uses it, for example, on images and screen lines which are taller than the window. Each window has a &lt;em&gt;vertical scroll position&lt;/em&gt;, which is a number, never less than zero. It specifies how far to raise the contents of the window when displaying them. Raising the window contents generally makes all or part of some lines disappear off the top, and all or part of some other lines appear at the bottom. The usual value is zero.</target>
        </trans-unit>
        <trans-unit id="bd79e7372baa17750e541bfbfffa6606962eb07f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Warning&lt;/em&gt;: Since the result is floating point, it may not be exact. Do not use this function if precise time stamps are required. For example, on typical systems &lt;code&gt;(float-time '(1 . 10))&lt;/code&gt; displays as &amp;lsquo;</source>
          <target state="translated">&lt;em&gt;Warning&lt;/em&gt;: Since the result is floating point, it may not be exact. Do not use this function if precise time stamps are required. For example, on typical systems &lt;code&gt;(float-time '(1 . 10))&lt;/code&gt; displays as &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="b7ead6f25bbfb241ae5a10952f368db3cd8e2925" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Warnings&lt;/em&gt; are a facility for a program to inform the user of a possible problem, but continue running.</source>
          <target state="translated">&lt;em&gt;Warnings&lt;/em&gt; are a facility for a program to inform the user of a possible problem, but continue running.</target>
        </trans-unit>
        <trans-unit id="5800c704dda84085ba62504ba165321ee93d8e57" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;autoload object&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;autoload object&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8ae8f2277c5b62b3d53dc4d888c37dc29d4b795a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;byte-code function&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;byte-code function&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="eb6a46032363c9a7fc5a4b8a88bdcede5d9a80aa" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;closure&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;closure&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9be7baeb66ad7e95f9d0eded08808a28a890c19a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;command&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;command&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="661ff4cb9bee36474098da7a6f259f9a4407b987" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;lambda expression&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;lambda expression&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ed4a26bd2219a669612e9e3c2b7b5c6da73a19c5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;macro&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;macro&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e5e68111703f0fb6a63a3104797560ce66e23edc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;primitive&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;primitive&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b9022b2a3b0031d43e1cc771ebb9cb4bda490457" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;special form&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;special form&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bd34485d7828eb7e27180a104aa1a4cd030fa4b5" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;ASCII&lt;/small&gt; control characters such as</source>
          <target state="translated">&lt;small&gt;ASCII&lt;/small&gt; control characters such as</target>
        </trans-unit>
        <trans-unit id="70306c232df57307eafd76afbab83c839cc46f47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Caution:&lt;/strong&gt; it is easy to make a mistake when using the &lt;code&gt;save-restriction&lt;/code&gt; construct. Read the entire description here before you try it.</source>
          <target state="translated">&lt;strong&gt;Caution:&lt;/strong&gt; it is easy to make a mistake when using the &lt;code&gt;save-restriction&lt;/code&gt; construct. Read the entire description here before you try it.</target>
        </trans-unit>
        <trans-unit id="fedd7bf18771ffbebe7137b31f6e3297e5df6d53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Common Lisp Note:&lt;/strong&gt; At top level, &lt;code&gt;eval-when-compile&lt;/code&gt; is analogous to the Common Lisp idiom &lt;code&gt;(eval-when (compile eval) &amp;hellip;)&lt;/code&gt;. Elsewhere, the Common Lisp &amp;lsquo;</source>
          <target state="translated">&lt;strong&gt;Common Lisp Note:&lt;/strong&gt; At top level, &lt;code&gt;eval-when-compile&lt;/code&gt; is analogous to the Common Lisp idiom &lt;code&gt;(eval-when (compile eval) &amp;hellip;)&lt;/code&gt; . Elsewhere, the Common Lisp &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="4e710f2d7f73f4a8fe8b17904699b0f862c6c885" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Common Lisp Note:&lt;/strong&gt; Common Lisp has different meanings for &lt;var&gt;dow&lt;/var&gt; and &lt;var&gt;utcoff&lt;/var&gt;, and its &lt;var&gt;second&lt;/var&gt; is an integer between 0 and 59 inclusive.</source>
          <target state="translated">&lt;strong&gt;Common Lisp Note:&lt;/strong&gt; Common Lisp has different meanings for &lt;var&gt;dow&lt;/var&gt; and &lt;var&gt;utcoff&lt;/var&gt; , and its &lt;var&gt;second&lt;/var&gt; is an integer between 0 and 59 inclusive.</target>
        </trans-unit>
        <trans-unit id="40ee60ee9fcbc30da4bad494a245522e8219bb9d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not try to put symbols in an obarray yourself.&lt;/strong&gt; This does not work&amp;mdash;only &lt;code&gt;intern&lt;/code&gt; can enter a symbol in an obarray properly.</source>
          <target state="translated">&lt;strong&gt;自分でシンボルをオブレイに入れようとしないでください。&lt;/strong&gt;これは機能しません。 &lt;code&gt;intern&lt;/code&gt; だけがobarrayにシンボルを正しく入力できます。</target>
        </trans-unit>
        <trans-unit id="38de59784bef692535056aa1a8f0e471c6f3a1f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MS-DOS note:&lt;/strong&gt; On MS-DOS, there is no such thing as an executable file mode bit. So &lt;code&gt;file-modes&lt;/code&gt; considers a file executable if its name ends in one of the standard executable extensions, such as</source>
          <target state="translated">&lt;strong&gt;MS-DOS注：&lt;/strong&gt; MS-DOSには、実行可能ファイルモードビットなどはありません。したがって、 &lt;code&gt;file-modes&lt;/code&gt; は、名前が次のような標準の実行可能拡張子の1つで終わる場合、ファイルを実行可能と見なします。</target>
        </trans-unit>
        <trans-unit id="6d4102b9a0d3b47cc4a8ba5dd78a2e9f73e6b1b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Please note:&lt;/strong&gt; Each &amp;lsquo;</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;それぞれ '</target>
        </trans-unit>
        <trans-unit id="6aae4a6180fd094fd06245c7fbdba28ea2ad76d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Please note:&lt;/strong&gt; For historical compatibility, special characters are treated as ordinary ones if they are in contexts where their special meanings make no sense. For example, &amp;lsquo;</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;歴史的な互換性のために、特殊文字は、その特殊な意味が意味をなさないコンテキストにある場合、通常の文字として扱われます。例えば、 '</target>
        </trans-unit>
        <trans-unit id="e1c151cdbdbd417cac114e5aec12f7f9f9b66ea0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Please note:&lt;/strong&gt; The argument &lt;var&gt;program&lt;/var&gt; contains only the name of the program file; it may not contain any command-line arguments. You must use a separate argument, &lt;var&gt;args&lt;/var&gt;, to provide those, as described below.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;引数 &lt;var&gt;program&lt;/var&gt; には、プログラムファイルの名前のみが含まれます。コマンドライン引数を含めることはできません。以下で説明するように、それらを提供するには、個別の引数 &lt;var&gt;args&lt;/var&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3e5f3511148dd7847670eff73efe5ab3c4fa41c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Please note:&lt;/strong&gt; Use this function only if you want the user to see that the mark has moved, and you want the previous mark position to be lost. Normally, when a new mark is set, the old one should go on the &lt;code&gt;mark-ring&lt;/code&gt;. For this reason, most applications should use &lt;code&gt;push-mark&lt;/code&gt; and &lt;code&gt;pop-mark&lt;/code&gt;, not &lt;code&gt;set-mark&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;この機能は、マークが移動したことをユーザーに確認させ、以前のマーク位置を失わせたい場合にのみ使用して&lt;strong&gt;ください&lt;/strong&gt;。通常、新しいマークが設定されると、古いマークは &lt;code&gt;mark-ring&lt;/code&gt; ます。このため、ほとんどのアプリケーションでは、 &lt;code&gt;set-mark&lt;/code&gt; &lt;code&gt;pop-mark&lt;/code&gt; ではなく、 &lt;code&gt;push-mark&lt;/code&gt; とポップマークを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="1c5a80c4486e1ea38490953d74749fe3a3c8c080" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Please note:&lt;/strong&gt;&lt;code&gt;create-file-buffer&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; associate the new buffer with a file and does not select the buffer. It also does not use the default major mode.</source>
          <target state="translated">&lt;strong&gt;ご注意：&lt;/strong&gt; &lt;code&gt;create-file-buffer&lt;/code&gt; ん&lt;em&gt;ではない&lt;/em&gt;ファイルを使用して新しいバッファを関連付け、バッファを選択しません。また、デフォルトのメジャーモードは使用しません。</target>
        </trans-unit>
        <trans-unit id="a645ff0054371611b3b65b133b649ed3610b6564" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage note:&lt;/strong&gt; Don&amp;rsquo;t use &lt;code&gt;x-popup-menu&lt;/code&gt; to display a menu if you could do the job with a prefix key defined with a menu keymap. If you use a menu keymap to implement a menu,</source>
          <target state="translated">&lt;strong&gt;使用上の注意：&lt;/strong&gt;メニューキーマップで定義されたプレフィックスキーを使用してジョブを実行できる場合は、 &lt;code&gt;x-popup-menu&lt;/code&gt; を使用してメニューを表示しないでください。メニューキーマップを使用してメニューを実装する場合、</target>
        </trans-unit>
        <trans-unit id="da6799279e920a1a3a23e11b28477a3c522ee7c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Changing the string by substituting characters does change the name of the symbol, but fails to update the obarray, so don&amp;rsquo;t do it!</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;文字を置き換えて文字列を変更すると、シンボルの名前は変更されますが、obarrayの更新に失敗するため、変更しないでください。</target>
        </trans-unit>
        <trans-unit id="f42b1c51152dd5561d6e32556f381fe792e7644d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Coding systems such as &lt;code&gt;undecided&lt;/code&gt;, which determine the coding system from the data, do not work entirely reliably with asynchronous subprocess output. This is because Emacs handles asynchronous subprocess output in batches, as it arrives. If the coding system leaves the character code conversion unspecified, or leaves the end-of-line conversion unspecified, Emacs must try to detect the proper conversion from one batch at a time, and this does not always work.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;データからコーディングシステムを決定する &lt;code&gt;undecided&lt;/code&gt; などのコーディングシステムは、非同期サブプロセス出力では完全に確実に機能しません。これは、Emacsが非同期サブプロセス出力を到着時にバッチで処理するためです。コーディングシステムが文字コード変換を指定しないままにするか、行末変換を指定しないままにする場合、Emacsは一度に1つのバッチから適切な変換を検出しようとする必要があり、これは常に機能するとは限りません。</target>
        </trans-unit>
        <trans-unit id="d7a32311cb98f8982192a3a0cfb3fbd4012739fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Coding systems such as &lt;code&gt;undecided&lt;/code&gt;, which determine the coding system from the data, do not work entirely reliably with asynchronous subprocess output. This is because Emacs has to process asynchronous subprocess output in batches, as it arrives. Emacs must try to detect the proper coding system from one batch at a time, and this does not always work. Therefore, if at all possible, specify a coding system that determines both the character code conversion and the end of line conversion&amp;mdash;that is, one like &lt;code&gt;latin-1-unix&lt;/code&gt;, rather than &lt;code&gt;undecided&lt;/code&gt; or &lt;code&gt;latin-1&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;データからコーディングシステムを決定する &lt;code&gt;undecided&lt;/code&gt; などのコーディングシステムは、非同期サブプロセス出力では完全に確実に機能しません。これは、Emacsが非同期サブプロセス出力を到着時にバッチで処理する必要があるためです。 Emacsは一度に1つのバッチから適切なコーディングシステムを検出しようとする必要があり、これは常に機能するとは限りません。したがって、可能であれば、文字コード変換と行末変換の両方を決定するコーディングシステムを指定します。つまり、 &lt;code&gt;undecided&lt;/code&gt; や &lt;code&gt;latin-1&lt;/code&gt; ではなく、 &lt;code&gt;latin-1-unix&lt;/code&gt; のようなものを指定します。</target>
        </trans-unit>
        <trans-unit id="36f77abc0ee8492d9c84e64781a102965a17ca14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Do not design an element of &lt;code&gt;font-lock-keywords&lt;/code&gt; to match text which spans lines; this does not work reliably. For details, see &lt;a href=&quot;multiline-font-lock#Multiline-Font-Lock&quot;&gt;Multiline Font Lock&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;行にまたがるテキストに一致 &lt;code&gt;font-lock-keywords&lt;/code&gt; ようにfont-lock-keywordsの要素を設計しないでください。これは確実に機能しません。詳細については、&lt;a href=&quot;multiline-font-lock#Multiline-Font-Lock&quot;&gt;Multiline FontLockを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="85a74edcffc0a92c3e7b4d248d547a8ecec6f582" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Don&amp;rsquo;t assume that you should use &lt;code&gt;make-variable-buffer-local&lt;/code&gt; for user-option variables, simply because users &lt;em&gt;might&lt;/em&gt; want to customize them differently in different buffers. Users can make any variable local, when they wish to. It is better to leave the choice to them.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;ユーザー&lt;em&gt;が&lt;/em&gt;異なるバッファーで異なる方法でカスタマイズしたいという理由だけで、ユーザーオプション変数に &lt;code&gt;make-variable-buffer-local&lt;/code&gt; を使用する必要があると思い込まないでください。ユーザーは、必要に応じて、任意の変数をローカルにすることができます。選択は彼らに任せたほうがいいです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5c82827514f3c4432ba7da9ea921f90a74bde2b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Don&amp;rsquo;t use this function in Lisp programs!</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt; Lispプログラムではこの関数を使用しないでください！</target>
        </trans-unit>
        <trans-unit id="91b5bf064a888797b6873fc939ffb0b98c08f120" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; If the changes you combine occur in widely scattered parts of the buffer, this will still work, but it is not advisable, because it may lead to inefficient behavior for some change hook functions.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;結合する変更がバッファーの広範囲に分散した部分で発生した場合でも、これは機能しますが、一部の変更フック機能の動作が非効率になる可能性があるため、お勧めできません。</target>
        </trans-unit>
        <trans-unit id="45e9aba6be8fa67b5877a89186eb307eaa7e3eea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; If this function is called from within a &lt;code&gt;save-excursion&lt;/code&gt; form, the current buffer will be set to &lt;var&gt;buffer&lt;/var&gt; upon leaving the form, since the marker used by &lt;code&gt;save-excursion&lt;/code&gt; to save the position and buffer will be swapped as well.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;この関数が &lt;code&gt;save-excursion&lt;/code&gt; フォーム内から呼び出された場合、現在のバッファーはフォームを離れるときに &lt;var&gt;buffer&lt;/var&gt; に設定されます。これは、 &lt;code&gt;save-excursion&lt;/code&gt; が位置とバッファーを保存するために使用するマーカーも交換されるためです。</target>
        </trans-unit>
        <trans-unit id="2bbac455862d3d9d7a2292fdfceca6f3801d0b5b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; If you use a &lt;code&gt;defconst&lt;/code&gt; or &lt;code&gt;defvar&lt;/code&gt; special form while the variable has a local binding (made with &lt;code&gt;let&lt;/code&gt;, or a function argument), it sets the local binding rather than the global binding. This is not what you usually want. To prevent this, use these special forms at top level in a file, where normally no local binding is in effect, and make sure to load the file before making a local binding for the variable.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;変数にローカルバインディング（ &lt;code&gt;let&lt;/code&gt; 、または関数の引数で作成）があるときに &lt;code&gt;defconst&lt;/code&gt; または &lt;code&gt;defvar&lt;/code&gt; 特殊形式を使用すると、グローバルバインディングではなくローカルバインディングが設定されます。これはあなたが通常望むものではありません。これを防ぐには、通常はローカルバインディングが有効になっていないファイルのトップレベルでこれらの特殊なフォームを使用し、変数のローカルバインディングを作成する前にファイルをロードしてください。</target>
        </trans-unit>
        <trans-unit id="05119ee0b2d49b617152ce6e37a3484e14f71a9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; If you want to use your own string as a message verbatim, don&amp;rsquo;t just write &lt;code&gt;(message &lt;var&gt;string&lt;/var&gt;)&lt;/code&gt;. If &lt;var&gt;string&lt;/var&gt; contains &amp;lsquo;</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;独自の文字列をメッセージとしてそのまま使用する場合は、 &lt;code&gt;(message &lt;var&gt;string&lt;/var&gt;)&lt;/code&gt; だけ記述しないでください。 &lt;var&gt;string&lt;/var&gt; に 'が含まれている場合</target>
        </trans-unit>
        <trans-unit id="33ecfae8a5840f6e86defbbccc38ab13acbfcf98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; If you want to use your own string as an error message verbatim, don&amp;rsquo;t just write &lt;code&gt;(error &lt;var&gt;string&lt;/var&gt;)&lt;/code&gt;. If &lt;var&gt;string&lt;/var&gt;&lt;var&gt;string&lt;/var&gt; contains &amp;lsquo;</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;独自の文字列をエラーメッセージとしてそのまま使用する場合は、 &lt;code&gt;(error &lt;var&gt;string&lt;/var&gt;)&lt;/code&gt; だけ記述しないでください。 &lt;var&gt;string&lt;/var&gt; &lt;var&gt;string&lt;/var&gt; 文字列に 'が含まれている場合</target>
        </trans-unit>
        <trans-unit id="064430ad9cf0c8b3dcd0d4417ee59ce9c6716cbb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; In most cases, you should not use this function; use &lt;code&gt;make-temp-file&lt;/code&gt; instead! This function is susceptible to a race condition, between the &lt;code&gt;make-temp-name&lt;/code&gt; call and the creation of the file, which in some cases may cause a security hole.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;ほとんどの場合、この関数は使用しないでください。使用 &lt;code&gt;make-temp-file&lt;/code&gt; 代わりに！この関数は、 &lt;code&gt;make-temp-name&lt;/code&gt; 呼び出しとファイルの作成の間の競合状態の影響を受けやすく、場合によってはセキュリティホールが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="df977bf7983dca5df5b615b10e538a2c0edadc3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Major mode commands must not call &lt;code&gt;font-lock-add-keywords&lt;/code&gt; under any circumstances, either directly or indirectly, except through their mode hooks. (Doing so would lead to incorrect behavior for some minor modes.) They should set up their rules for search-based fontification by setting &lt;code&gt;font-lock-keywords&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;メジャーモードコマンドは、モードフックを介する場合を除き、直接的または間接的に、いかなる状況でも &lt;code&gt;font-lock-add-keywords&lt;/code&gt; を呼び出さないでください。（これを行うと、一部のマイナーモードで誤った動作が発生します。） &lt;code&gt;font-lock-keywords&lt;/code&gt; を設定して、検索ベースのフォント化のルールを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="5bb321756a7688c8a3f5e181b1d0cb5de59a639b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Nested repetition operators can run for an indefinitely long time, if they lead to ambiguous matching. For example, trying to match the regular expression &amp;lsquo;</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;ネストされた繰り返し演算子は、あいまいな一致につながる場合、無期限に長時間実行される可能性があります。たとえば、正規表現に一致させようとしています '</target>
        </trans-unit>
        <trans-unit id="23aa90d6d2217d7cb5e63a09251ea382a0ae7f51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Ordinary insertion of text adjacent to the saved point value relocates the saved value, just as it relocates all markers. More precisely, the saved value is a marker with insertion type &lt;code&gt;nil&lt;/code&gt;. See &lt;a href=&quot;marker-insertion-types#Marker-Insertion-Types&quot;&gt;Marker Insertion Types&lt;/a&gt;. Therefore, when the saved point value is restored, it normally comes before the inserted text.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;保存されたポイント値の隣にテキストを通常挿入すると、すべてのマーカーが再配置されるのと同じように、保存された値が再配置されます。より正確には、保存された値は挿入タイプ &lt;code&gt;nil&lt;/code&gt; のマーカーです。&lt;a href=&quot;marker-insertion-types#Marker-Insertion-Types&quot;&gt;マーカー挿入タイプを&lt;/a&gt;参照してください。したがって、保存されたポイント値が復元されると、通常、挿入されたテキストの前に表示されます。</target>
        </trans-unit>
        <trans-unit id="1e57b0c0a7f9166cb502f50cdef1217f6faa77be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Setting this variable to non-&lt;code&gt;nil&lt;/code&gt; may have annoying effects. Various parts of Emacs catch errors in the normal course of affairs, and you may not even realize that errors happen there. If you need to debug code wrapped in &lt;code&gt;condition-case&lt;/code&gt;, consider using &lt;code&gt;condition-case-unless-debug&lt;/code&gt; (see &lt;a href=&quot;handling-errors#Handling-Errors&quot;&gt;Handling Errors&lt;/a&gt;).</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;この変数を &lt;code&gt;nil&lt;/code&gt; 以外に設定すると、迷惑な影響を与える可能性があります。Emacsのさまざまな部分が通常の業務でエラーをキャッチし、そこでエラーが発生していることに気付かない場合もあります。 &lt;code&gt;condition-case&lt;/code&gt; でラップされたコードをデバッグする必要がある場合は、 &lt;code&gt;condition-case-unless-debug&lt;/code&gt; の使用を検討してください（&lt;a href=&quot;handling-errors#Handling-Errors&quot;&gt;エラーの処理を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="99398d90876bc60a8ea5c21dd040f9efdb83a5ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Since receiving subprocess output sets this variable, it can change whenever Emacs waits; therefore, you should copy the value shortly after the function call that stores the value you are interested in.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;サブプロセス出力を受信するとこの変数が設定されるため、Emacsが待機するたびに変更される可能性があります。したがって、関心のある値を格納する関数呼び出しの直後に値をコピーする必要があります。</target>
        </trans-unit>
        <trans-unit id="80b59cca73514532244288020d72ec71b0c54f97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; When a variable has buffer-local bindings in one or more buffers, &lt;code&gt;let&lt;/code&gt; rebinds the binding that&amp;rsquo;s currently in effect. For instance, if the current buffer has a buffer-local value, &lt;code&gt;let&lt;/code&gt; temporarily rebinds that. If no buffer-local bindings are in effect, &lt;code&gt;let&lt;/code&gt; rebinds the default value. If inside the &lt;code&gt;let&lt;/code&gt; you then change to a different current buffer in which a different binding is in effect, you won&amp;rsquo;t see the &lt;code&gt;let&lt;/code&gt; binding any more. And if you exit the &lt;code&gt;let&lt;/code&gt; while still in the other buffer, you won&amp;rsquo;t see the unbinding occur (though it will occur properly). Here is an example to illustrate:</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;変数の1つ以上のバッファーにバッファーローカルバインディングがある場合、現在有効なバインディングを再バインドし &lt;code&gt;let&lt;/code&gt; 。たとえば、現在のバッファにバッファローカル値がある場合、 &lt;code&gt;let&lt;/code&gt; 一時的に再バインドします。バッファローカルバインディングが有効になってい &lt;code&gt;let&lt;/code&gt; 場合は、デフォルト値を再バインドします。 &lt;code&gt;let&lt;/code&gt; 内で、別のバインディングが有効になっている別の現在のバッファーに変更すると、 &lt;code&gt;let&lt;/code&gt; バインディングは表示されなくなります。また、他のバッファにいる間に &lt;code&gt;let&lt;/code&gt; を終了すると、バインド解除が発生することはありません（ただし、正しく発生します）。説明する例を次に示します。</target>
        </trans-unit>
        <trans-unit id="3ba7ea0fe9530c6fcf03322393469252b0a2972b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; You must not alter the values of &lt;code&gt;after-change-functions&lt;/code&gt; within the body of a &lt;code&gt;combine-after-change-calls&lt;/code&gt; form.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt; &lt;code&gt;combine-after-change-calls&lt;/code&gt; フォームの本体内の &lt;code&gt;after-change-functions&lt;/code&gt; の値を変更してはなりません。</target>
        </trans-unit>
        <trans-unit id="07d2995fbb542cf0b4f59c7660f01041c61d2c74" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; You must not alter the values of &lt;code&gt;before-change-functions&lt;/code&gt; or &lt;code&gt;after-change-function&lt;/code&gt; within &lt;var&gt;body&lt;/var&gt;.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt; &lt;var&gt;body&lt;/var&gt; 内の &lt;code&gt;before-change-functions&lt;/code&gt; または &lt;code&gt;after-change-function&lt;/code&gt; の値を変更してはなりません。</target>
        </trans-unit>
        <trans-unit id="35fd27e99b5c58482abb5d76202e99aa0a1953f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; You must not make any buffer changes outside of the region specified by &lt;var&gt;beg&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt;.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt; &lt;var&gt;beg&lt;/var&gt; および &lt;var&gt;end&lt;/var&gt; で指定された領域外でバッファーを変更してはなりません。</target>
        </trans-unit>
        <trans-unit id="f9c24dc88e1e15e20222bea25a327387b74ae63e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; do not use &lt;code&gt;make-local-variable&lt;/code&gt; for a hook variable. The hook variables are automatically made buffer-local as needed if you use the &lt;var&gt;local&lt;/var&gt; argument to &lt;code&gt;add-hook&lt;/code&gt; or &lt;code&gt;remove-hook&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;フック変数に &lt;code&gt;make-local-variable&lt;/code&gt; を使用しないでください。 &lt;var&gt;local&lt;/var&gt; 引数を使用して &lt;code&gt;add-hook&lt;/code&gt; または &lt;code&gt;remove-hook&lt;/code&gt; を使用すると、フック変数は必要に応じて自動的にバッファローカルになります。</target>
        </trans-unit>
        <trans-unit id="f09a5a9449bb11206b824d27af8eddf75c885f9b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; don&amp;rsquo;t bind this variable with &lt;code&gt;let&lt;/code&gt;. It is often buffer-local, and if you bind it around reading input (which is exactly when you &lt;em&gt;would&lt;/em&gt; bind it), switching buffers asynchronously while Emacs is waiting will cause the value to be restored in the wrong buffer.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;この変数を &lt;code&gt;let&lt;/code&gt; でバインドしないでください。それは多くの場合、バッファローカルで、あなたは（あなたが正確にいつで入力読んで、それを周りにバインドする場合&lt;em&gt;でしょう&lt;/em&gt;、それをバインド）を、Emacsが待っている間に非同期バッファを切り替える値が間違ったバッファに復元されることになります。</target>
        </trans-unit>
        <trans-unit id="2c808981ea7426dd8fb31718768bdfb9240b0d82" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; don&amp;rsquo;t use the &lt;code&gt;font-lock-multiline&lt;/code&gt; property on large ranges of text, because that will make rehighlighting slow.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;広範囲のテキストで &lt;code&gt;font-lock-multiline&lt;/code&gt; プロパティを使用しないでください。再強調表示が遅くなります。</target>
        </trans-unit>
        <trans-unit id="05ceae8ad10f503f250029c7f5afe4600bba1cb7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; don&amp;rsquo;t use this feature to alter the way the window is scrolled. It&amp;rsquo;s not designed for that, and such use probably won&amp;rsquo;t work.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;この機能を使用して、ウィンドウのスクロール方法を変更しないでください。それはそのために設計されておらず、そのような使用はおそらく機能しません。</target>
        </trans-unit>
        <trans-unit id="0206e6a7c67c64ebf9955d38fb60db7426e22736" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; if you change &lt;code&gt;file-name-coding-system&lt;/code&gt; (or the language environment) in the middle of an Emacs session, problems can result if you have already visited files whose names were encoded using the earlier coding system and are handled differently under the new coding system. If you try to save one of these buffers under the visited file name, saving may use the wrong file name, or it may get an error. If such a problem happens, use</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;あなたが変更した場合 &lt;code&gt;file-name-coding-system&lt;/code&gt; Emacsセッションの途中で（または言語環境を）あなたはすでに名前が先にコーディングシステムを使用してエンコードされたファイルを訪問してきたし、下に異なる方法で処理された場合、問題が発生することができます新しいコーディングシステム。これらのバッファの1つをアクセスしたファイル名で保存しようとすると、保存に間違ったファイル名が使用されたり、エラーが発生したりする可能性があります。このような問題が発生した場合は、</target>
        </trans-unit>
        <trans-unit id="0dcce5150d56b66b966d918e097e575a78318f08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; if you use the display table to change the display of newline characters, the whole buffer will be displayed as one long line.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;表示テーブルを使用して改行文字の表示を変更すると、バッファー全体が1つの長い行として表示されます。</target>
        </trans-unit>
        <trans-unit id="29632dff1239ce71ce3a6f2b24015c04aa685041" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; the argument values should not include any data types that can&amp;rsquo;t be printed and then read. Some facilities save &lt;code&gt;command-history&lt;/code&gt; in a file to be read in the subsequent sessions; if a command&amp;rsquo;s arguments contain a data type that prints using &amp;lsquo;</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;引数の値には、印刷してから読み取ることができないデータ型を含めないでください。一部の機能では、 &lt;code&gt;command-history&lt;/code&gt; をファイルに保存して、後続のセッションで読み取ることができます。コマンドの引数に、 'を使用して出力するデータ型が含まれている場合</target>
        </trans-unit>
        <trans-unit id="bfc7d7757834b011b196dc085198902d4c7d8e65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: Lisp macros and keyboard macros (see &lt;a href=&quot;keyboard-macros#Keyboard-Macros&quot;&gt;Keyboard Macros&lt;/a&gt;) are entirely different things. When we use the word &amp;ldquo;macro&amp;rdquo; without qualification, we mean a Lisp macro, not a keyboard macro.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：Lispマクロとキーボードマクロ（&lt;a href=&quot;keyboard-macros#Keyboard-Macros&quot;&gt;キーボードマクロを&lt;/a&gt;参照）はまったく異なるものです。修飾なしで「マクロ」という単語を使用する場合、キーボードマクロではなく、Lispマクロを意味します。</target>
        </trans-unit>
        <trans-unit id="fabe30e6344dd13a2d7e00055d41e03305ca2ba2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: Note that the list in &lt;code&gt;nums&lt;/code&gt; no longer contains 0; this is the same cons cell that it was before, but it is no longer the first one in the list. Don&amp;rsquo;t assume a variable that formerly held the argument now holds the entire sorted list! Instead, save the result of &lt;code&gt;sort&lt;/code&gt; and use that. Most often we store the result back into the variable that held the original list:</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;： &lt;code&gt;nums&lt;/code&gt; のリストには0が含まれなくなったことに注意してください。これは以前と同じconsセルですが、リストの最初のセルではなくなりました。以前は引数を保持していた変数が、ソートされたリスト全体を保持すると想定しないでください。代わりに、 &lt;code&gt;sort&lt;/code&gt; の結果を保存して使用してください。ほとんどの場合、結果を元のリストを保持していた変数に格納します。</target>
        </trans-unit>
        <trans-unit id="ba718421b608b61cd6a2f215e2d8aa0c23151d9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;We discourage use of a non-&lt;code&gt;nil&lt;/code&gt; value for &lt;var&gt;initial&lt;/var&gt;&lt;/strong&gt;, because initial input is an intrusive interface. History lists and default values provide a much more convenient method to offer useful default inputs to the user.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;nil&lt;/code&gt; &lt;var&gt;initial&lt;/var&gt; &lt;/strong&gt;初期入力は煩わしいインターフェースであるため&lt;strong&gt;、&lt;/strong&gt;&lt;strong&gt;初期&lt;/strong&gt;&lt;strong&gt;値に&lt;/strong&gt;&lt;strong&gt;nil以外の&lt;/strong&gt;&lt;strong&gt;値を&lt;/strong&gt;&lt;strong&gt;使用することはお勧めしません&lt;/strong&gt;。履歴リストとデフォルト値は、ユーザーに便利なデフォルト入力を提供するためのはるかに便利な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="b1b9a3564d33e0fe386c96a11a997ce906bc8d2c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt;*</source>
          <target state="translated">&lt;var&gt;A&lt;/var&gt;*</target>
        </trans-unit>
        <trans-unit id="639372047fe8250a564cf1eb6b02b0b8d7e2adeb" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt;*?</source>
          <target state="translated">&lt;var&gt;A&lt;/var&gt;*?</target>
        </trans-unit>
        <trans-unit id="9bf26381ace5ddd45faed752347619c79ad9b0f2" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt;+</source>
          <target state="translated">&lt;var&gt;A&lt;/var&gt;+</target>
        </trans-unit>
        <trans-unit id="1f4812366bcad6063b8bc30079ff6f730a73f239" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt;+?</source>
          <target state="translated">&lt;var&gt;A&lt;/var&gt;+?</target>
        </trans-unit>
        <trans-unit id="bc301264f66964afade4544f2549e9ecb0e4f516" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt;&lt;var&gt;B&lt;/var&gt;&amp;hellip;</source>
          <target state="translated">&lt;var&gt;A&lt;/var&gt;&lt;var&gt;B&lt;/var&gt;&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="0f0c348b2921825c505106ed1e5990044cd68713" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt;?</source>
          <target state="translated">&lt;var&gt;A&lt;/var&gt;?</target>
        </trans-unit>
        <trans-unit id="2308c8eb026e3ceb97214c64e9dd48f3241dcfb7" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt;??</source>
          <target state="translated">&lt;var&gt;A&lt;/var&gt;??</target>
        </trans-unit>
        <trans-unit id="dc72642f871262e6b752597333df8d8e9dd51891" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt;\{&lt;var&gt;n&lt;/var&gt;,&lt;var&gt;m&lt;/var&gt;\}</source>
          <target state="translated">&lt;var&gt;A&lt;/var&gt;\{&lt;var&gt;n&lt;/var&gt;,&lt;var&gt;m&lt;/var&gt;\}</target>
        </trans-unit>
        <trans-unit id="072675b59fadf451e0a05fde271899b16f325fb1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt;\{&lt;var&gt;n&lt;/var&gt;,\}</source>
          <target state="translated">&lt;var&gt;A&lt;/var&gt;\{&lt;var&gt;n&lt;/var&gt;,\}</target>
        </trans-unit>
        <trans-unit id="47ef4b2187df56939010631d2add49667e8a8aca" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt;\{&lt;var&gt;n&lt;/var&gt;\}</source>
          <target state="translated">&lt;var&gt;A&lt;/var&gt;\{&lt;var&gt;n&lt;/var&gt;\}</target>
        </trans-unit>
        <trans-unit id="76e4e3a09ac81c5d948d7b54b04272d30706b4d1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt;\|&lt;var&gt;B&lt;/var&gt;\|&amp;hellip;</source>
          <target state="translated">&lt;var&gt;A&lt;/var&gt;\|&lt;var&gt;B&lt;/var&gt;\|&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="bc58f81cb092eedec2d6d8c884a9b82607fa7e3b" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;activate-func&lt;/var&gt; is a function to call to activate this method. The &lt;var&gt;args&lt;/var&gt;, if any, are passed as arguments to &lt;var&gt;activate-func&lt;/var&gt;. All told, the arguments to &lt;var&gt;activate-func&lt;/var&gt; are &lt;var&gt;input-method&lt;/var&gt; and the &lt;var&gt;args&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;activate-func&lt;/var&gt; は、このメソッドをアクティブ化するために呼び出す関数です。 &lt;var&gt;args&lt;/var&gt; 、もしあれば、引数として渡され &lt;var&gt;activate-func&lt;/var&gt; 。 &lt;var&gt;activate-func&lt;/var&gt; 、activate-funcの引数は &lt;var&gt;input-method&lt;/var&gt; と &lt;var&gt;args&lt;/var&gt; です。</target>
        </trans-unit>
        <trans-unit id="fb0c583b9c9e9be9be62ec9f98c564288e7e889c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;aead_auth&lt;/var&gt; is only checked with AEAD ciphers, that is, ciphers whose plist has &lt;code&gt;:cipher-aead-capable t&lt;/code&gt;. Otherwise it&amp;rsquo;s ignored.</source>
          <target state="translated">&lt;var&gt;aead_auth&lt;/var&gt; は、AEAD暗号、つまり、plistに &lt;code&gt;:cipher-aead-capable t&lt;/code&gt; が含まれる暗号でのみチェックされます。それ以外の場合は無視されます。</target>
        </trans-unit>
        <trans-unit id="fe415e21b51794699e741f46ca2b74fca55619fa" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;alist&lt;/var&gt; is an association list of symbols and values as for &lt;code&gt;display-buffer&lt;/code&gt;. The following symbols in &lt;var&gt;alist&lt;/var&gt; are special for this function:</source>
          <target state="translated">&lt;var&gt;alist&lt;/var&gt; は、 &lt;code&gt;display-buffer&lt;/code&gt; の場合のシンボルと値の関連付けリストです。 &lt;var&gt;alist&lt;/var&gt; の次の記号は、この関数専用です。</target>
        </trans-unit>
        <trans-unit id="eba413b4ed6d73161a8353916a5866a74e0565b9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;arglist&lt;/var&gt; may end in &lt;code&gt;&amp;amp;rest&lt;/code&gt; and one final argument name, denoting a rest parameter. The rest parameter will expand to all extra actual argument values not matched by any other parameter in &lt;var&gt;arglist&lt;/var&gt;, spliced into &lt;var&gt;rx-form&lt;/var&gt; where it occurs. Example:</source>
          <target state="translated">&lt;var&gt;arglist&lt;/var&gt; は、 &lt;code&gt;&amp;amp;rest&lt;/code&gt; と1つの最後の引数名で終わる場合があり、restパラメーターを示します。restパラメーターは、 &lt;var&gt;arglist&lt;/var&gt; 内の他のパラメーターと一致しないすべての追加の実際の引数値に展開され、発生 &lt;var&gt;rx-form&lt;/var&gt; 場所でrx-formにスプライスされます。例：</target>
        </trans-unit>
        <trans-unit id="d5bf91b60980cfbb14ffe935c92c37d495dc65c9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;background&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, should be a string specifying a color, which is used as the image&amp;rsquo;s background color if the image supports transparency. If the value is &lt;code&gt;nil&lt;/code&gt;, it defaults to the frame&amp;rsquo;s background color.</source>
          <target state="translated">&lt;var&gt;background&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、色を指定する文字列である必要があります。これは、画像が透明度をサポートしている場合に画像の背景色として使用されます。値が &lt;code&gt;nil&lt;/code&gt; の場合、デフォルトでフレームの背景色になります。</target>
        </trans-unit>
        <trans-unit id="03bae4a0f67b53539e330b159bda6052780e7ba5" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;base&lt;/var&gt;...&lt;var&gt;how-far&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;base&lt;/var&gt;...&lt;var&gt;how-far&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="ce7047ebe43595779bf964d11c2638b3ba54ec0b" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;bindings&lt;/var&gt; is a list of bindings of the form &lt;code&gt;(&lt;var&gt;pattern&lt;/var&gt;
&lt;var&gt;exp&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;exp&lt;/var&gt; is an expression to evaluate and &lt;var&gt;pattern&lt;/var&gt; is a &lt;code&gt;pcase&lt;/code&gt; pattern. The variable bindings are produced by destructuring binding of elements of &lt;var&gt;pattern&lt;/var&gt; to the values of the corresponding elements of the evaluated &lt;var&gt;exp&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;bindings&lt;/var&gt; は、形式 &lt;code&gt;(&lt;var&gt;pattern&lt;/var&gt; &lt;var&gt;exp&lt;/var&gt;)&lt;/code&gt; のバインディングのリストです。ここで、 &lt;var&gt;exp&lt;/var&gt; は評価する式であり、 &lt;var&gt;pattern&lt;/var&gt; は &lt;code&gt;pcase&lt;/code&gt; パターンです。変数バインディングは、 &lt;var&gt;pattern&lt;/var&gt; 要素の、評価された &lt;var&gt;exp&lt;/var&gt; の対応する要素の値へのバインディングを分解することによって生成されます。</target>
        </trans-unit>
        <trans-unit id="1e4e93d29947e853fda98497930b3b20ac078622" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;bindings&lt;/var&gt; is a list of bindings of the form &lt;code&gt;(&lt;var&gt;pattern&lt;/var&gt;&amp;nbsp;&lt;var&gt;exp&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;exp&lt;/var&gt; is an expression to evaluate and &lt;var&gt;pattern&lt;/var&gt; is a &lt;code&gt;pcase&lt;/code&gt; pattern.</source>
          <target state="translated">&lt;var&gt;bindings&lt;/var&gt; は、形式 &lt;code&gt;(&lt;var&gt;pattern&lt;/var&gt;&amp;nbsp;&lt;var&gt;exp&lt;/var&gt;)&lt;/code&gt; のバインディングのリストです。ここで、 &lt;var&gt;exp&lt;/var&gt; は評価する式であり、 &lt;var&gt;pattern&lt;/var&gt; は &lt;code&gt;pcase&lt;/code&gt; パターンです。</target>
        </trans-unit>
        <trans-unit id="d4209f1f9bb188e95924bdefb815300395d0fa4d" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;bnf&lt;/var&gt; is a list of nonterminal definitions of the form &lt;code&gt;(&lt;var&gt;nonterm&lt;/var&gt; &lt;var&gt;rhs1&lt;/var&gt; &lt;var&gt;rhs2&lt;/var&gt; ...)&lt;/code&gt; where each &lt;var&gt;rhs&lt;/var&gt; is a (non-empty) list of terminals (aka tokens) or non-terminals.</source>
          <target state="translated">&lt;var&gt;bnf&lt;/var&gt; は、形式 &lt;code&gt;(&lt;var&gt;nonterm&lt;/var&gt; &lt;var&gt;rhs1&lt;/var&gt; &lt;var&gt;rhs2&lt;/var&gt; ...)&lt;/code&gt; の非終端定義のリストです。ここで、各 &lt;var&gt;rhs&lt;/var&gt; は、終端（別名トークン）または非終端の（空でない）リストです。</target>
        </trans-unit>
        <trans-unit id="c62c4cf5a34d62f4083055437ae2063f61f743fa" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;boolean-expression&lt;/var&gt; is evaluated:</source>
          <target state="translated">&lt;var&gt;boolean-expression&lt;/var&gt; が評価されます：</target>
        </trans-unit>
        <trans-unit id="897206fe1c279b99023a941cb036c2c9032a2c09" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;buffer-name&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, specifies the name of the buffer for logging the warning. By default, it is</source>
          <target state="translated">&lt;var&gt;buffer-name&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 以外の場合、警告をログに記録するためのバッファーの名前を指定します。デフォルトでは、</target>
        </trans-unit>
        <trans-unit id="3e97490488a20d8323027e17c1aa26733fbaf6d4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;buffer-or-name&lt;/var&gt; must be either a string or an existing buffer. If it is a string and a live buffer with that name already exists, &lt;code&gt;get-buffer-create&lt;/code&gt; returns that buffer. If no such buffer exists, it creates a new buffer. If &lt;var&gt;buffer-or-name&lt;/var&gt; is a buffer instead of a string, it is returned as given, even if it is dead.</source>
          <target state="translated">&lt;var&gt;buffer-or-name&lt;/var&gt; は、文字列または既存のバッファのいずれかである必要があります。それが文字列であり、その名前のライブバッファがすでに存在する場合、 &lt;code&gt;get-buffer-create&lt;/code&gt; はそのバッファを返します。そのようなバッファが存在しない場合は、新しいバッファが作成されます。 &lt;var&gt;buffer-or-name&lt;/var&gt; が文字列ではなくバッファである場合、それが無効であっても、指定されたとおりに返されます。</target>
        </trans-unit>
        <trans-unit id="8a0455ef45d72d81ce9684877db5cc07d5c8a84c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;buffer-or-name&lt;/var&gt; should be a buffer or the name of a buffer; if omitted or &lt;code&gt;nil&lt;/code&gt;, it defaults to the current buffer. The optional argument &lt;var&gt;all-frames&lt;/var&gt; specifies which windows to consider:</source>
          <target state="translated">&lt;var&gt;buffer-or-name&lt;/var&gt; は、バッファーまたはバッファーの名前である必要があります。省略または &lt;code&gt;nil&lt;/code&gt; の場合、デフォルトで現在のバッファになります。オプションの引数 &lt;var&gt;all-frames&lt;/var&gt; は、考慮するウィンドウを指定します。</target>
        </trans-unit>
        <trans-unit id="14dedd5200d621b6760f626d379fabf74a6e69ec" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;character&lt;/var&gt; may be &lt;code&gt;nil&lt;/code&gt;, which means to use &lt;var&gt;font-spec&lt;/var&gt; for any character which no font-spec is specified.</source>
          <target state="translated">&lt;var&gt;character&lt;/var&gt; は &lt;code&gt;nil&lt;/code&gt; の場合があります。これは、font-specが指定されていない文字に &lt;var&gt;font-spec&lt;/var&gt; を使用することを意味します。</target>
        </trans-unit>
        <trans-unit id="0c32dca097b381952f874c4d538bc6d57210dbbe" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;character&lt;/var&gt; may be a charset (see &lt;a href=&quot;character-sets#Character-Sets&quot;&gt;Character Sets&lt;/a&gt;). In that case, use &lt;var&gt;font-spec&lt;/var&gt; for all the characters in the charset.</source>
          <target state="translated">&lt;var&gt;character&lt;/var&gt; は文字セットの場合があります（&lt;a href=&quot;character-sets#Character-Sets&quot;&gt;文字セットを&lt;/a&gt;参照）。その場合、文字セット内のすべての文字に &lt;var&gt;font-spec&lt;/var&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="49b46ba92d516a8eb20ffe7277a91cf8b50a2fc7" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;character&lt;/var&gt; may be a script name (see &lt;a href=&quot;character-properties#Character-Properties&quot;&gt;char-script-table&lt;/a&gt;). In that case, use &lt;var&gt;font-spec&lt;/var&gt; for all the characters belonging to the script.</source>
          <target state="translated">&lt;var&gt;character&lt;/var&gt; はスクリプト名でもかまいません（&lt;a href=&quot;character-properties#Character-Properties&quot;&gt;char-script-tableを&lt;/a&gt;参照）。その場合、スクリプトに属するすべての文字に &lt;var&gt;font-spec&lt;/var&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="315b7c3e1a935f87a345ecedd5cae6998bb888a6" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;charset&lt;/var&gt;:&lt;var&gt;font&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;charset&lt;/var&gt;:&lt;var&gt;font&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="4b4d89a582c439acb0591d942dabf0428a352e0f" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;choices&lt;/var&gt; is an alist where the first element in each entry is a character to be entered, the second element is a short name for the entry to be displayed while prompting (if there&amp;rsquo;s room, it might be shortened), and the third, optional entry is a longer explanation that will be displayed in a help buffer if the user requests more help.</source>
          <target state="translated">&lt;var&gt;choices&lt;/var&gt; は、各エントリの最初の要素が入力される文字であるリスト、2番目の要素がプロンプト中に表示されるエントリの短い名前（スペースがある場合は短縮される可能性があります）、3番目のオプションのエントリです。は、ユーザーがさらにヘルプを要求した場合にヘルプバッファに表示される長い説明です。</target>
        </trans-unit>
        <trans-unit id="48a1fa281d645561b8164abd8a41647240cfde22" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;col&lt;/var&gt;, &lt;var&gt;row&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;col&lt;/var&gt; 、 &lt;var&gt;row&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="25719d0480de36aa48958210c4694af307c0943b" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;collection&lt;/var&gt; is called the &lt;em&gt;completion table&lt;/em&gt;. Its value must be a list of strings or cons cells, an obarray, a hash table, or a completion function.</source>
          <target state="translated">&lt;var&gt;collection&lt;/var&gt; は&lt;em&gt;完了テーブル&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。その値は、文字列またはconsセルのリスト、obarray、ハッシュテーブル、または完了関数である必要があります。</target>
        </trans-unit>
        <trans-unit id="95ac74539379f37ce12d859cdcecdd757d3861e3" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;color&lt;/var&gt; is either a string, or the symbol &lt;code&gt;foreground-color&lt;/code&gt;, meaning the foreground color of the face. Omitting the attribute &lt;code&gt;:color&lt;/code&gt; means to use the foreground color of the face. &lt;var&gt;style&lt;/var&gt; should be a symbol &lt;code&gt;line&lt;/code&gt; or &lt;code&gt;wave&lt;/code&gt;, meaning to use a straight or wavy line. Omitting the attribute &lt;code&gt;:style&lt;/code&gt; means to use a straight line.</source>
          <target state="translated">&lt;var&gt;color&lt;/var&gt; は、文字列または記号 &lt;code&gt;foreground-color&lt;/code&gt; のいずれかであり、顔の前景色を意味します。属性 &lt;code&gt;:color&lt;/code&gt; を省略すると、顔の前景色を使用することになります。 &lt;var&gt;style&lt;/var&gt; はシンボル &lt;code&gt;line&lt;/code&gt; または &lt;code&gt;wave&lt;/code&gt; である必要があります。これは、直線または波線を使用することを意味します。属性 &lt;code&gt;:style&lt;/code&gt; を省略すると、直線を使用することになります。</target>
        </trans-unit>
        <trans-unit id="85506ad78941e763e80e1d83890c372391e36bd1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;condition&lt;/var&gt; can also be a list of error conditions.</source>
          <target state="translated">&lt;var&gt;condition&lt;/var&gt; は、エラー条件のリストにすることもできます。</target>
        </trans-unit>
        <trans-unit id="0e5f961b2b9d3d160b6161982913cce6cbabbb86" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;contents&lt;/var&gt; is a vector with the same number of elements as &lt;code&gt;tabulated-list-format&lt;/code&gt;. Each vector element is either a string, which is inserted into the buffer as-is, or a list &lt;code&gt;(&lt;var&gt;label&lt;/var&gt;
. &lt;var&gt;properties&lt;/var&gt;)&lt;/code&gt;, which means to insert a text button by calling &lt;code&gt;insert-text-button&lt;/code&gt; with &lt;var&gt;label&lt;/var&gt; and &lt;var&gt;properties&lt;/var&gt; as arguments (see &lt;a href=&quot;making-buttons#Making-Buttons&quot;&gt;Making Buttons&lt;/a&gt;).</source>
          <target state="translated">&lt;var&gt;contents&lt;/var&gt; は、 &lt;code&gt;tabulated-list-format&lt;/code&gt; と同じ数の要素を持つベクトルです。各ベクトル要素はそのままバッファに挿入される文字列、またはリストのいずれかである &lt;code&gt;(&lt;var&gt;label&lt;/var&gt; . &lt;var&gt;properties&lt;/var&gt;)&lt;/code&gt; を呼び出すことによって、テキストボタンを挿入するための手段、 &lt;code&gt;insert-text-button&lt;/code&gt; 用いて &lt;var&gt;label&lt;/var&gt; し、 &lt;var&gt;properties&lt;/var&gt; （参照引数として&lt;a href=&quot;making-buttons#Making-Buttons&quot;&gt;メイキングボタン&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="059eb938a23f2d665b19373c768d7d7e5c49c2b3" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;coordinates&lt;/var&gt; should be a cons cell of the form &lt;code&gt;(&lt;var&gt;x&lt;/var&gt;
. &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; are given in default character sizes (see &lt;a href=&quot;frame-font#Frame-Font&quot;&gt;Frame Font&lt;/a&gt;) relative to the native position of &lt;var&gt;window&lt;/var&gt;&amp;rsquo;s frame (see &lt;a href=&quot;frame-geometry#Frame-Geometry&quot;&gt;Frame Geometry&lt;/a&gt;).</source>
          <target state="translated">&lt;var&gt;coordinates&lt;/var&gt; フォームのコンス・セルであるべきである &lt;code&gt;(&lt;var&gt;x&lt;/var&gt; . &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt; 、 &lt;var&gt;x&lt;/var&gt; 及び &lt;var&gt;y&lt;/var&gt; 、デフォルトの文字サイズ（参照に記載されている&lt;a href=&quot;frame-font#Frame-Font&quot;&gt;フレームフォント&lt;/a&gt;のネイティブ位置に対して） &lt;var&gt;window&lt;/var&gt; 枠の（参照&lt;a href=&quot;frame-geometry#Frame-Geometry&quot;&gt;フレームジオメトリ&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="25f4d037ea3c1415b198231934180e02de1d9bd1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;default-coding-system&lt;/var&gt; can also be a list whose first element is &lt;code&gt;t&lt;/code&gt; and whose other elements are coding systems. Then, if no coding system in the list can handle the text, &lt;code&gt;select-safe-coding-system&lt;/code&gt; queries the user immediately, without trying any of the three alternatives described above. This is handy for checking only the coding systems in the list.</source>
          <target state="translated">&lt;var&gt;default-coding-system&lt;/var&gt; は、最初の要素が &lt;code&gt;t&lt;/code&gt; で、他の要素がコーディングシステムであるリストにすることもできます。次に、リスト内のコーディングシステムでテキストを処理できない場合、 &lt;code&gt;select-safe-coding-system&lt;/code&gt; は、上記の3つの選択肢のいずれも試行せずに、ユーザーにすぐにクエリを実行します。これは、リスト内のコーディングシステムのみをチェックする場合に便利です。</target>
        </trans-unit>
        <trans-unit id="d4740bdea7c58dc3cd47e4b528d9cddfd5ab846b" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;descriptor&lt;/var&gt; is the same object as the one returned by this function. &lt;var&gt;action&lt;/var&gt; is the description of the event. It could be any one of the following symbols:</source>
          <target state="translated">&lt;var&gt;descriptor&lt;/var&gt; は、この関数によって返されるオブジェクトと同じオブジェクトです。 &lt;var&gt;action&lt;/var&gt; は、イベントの説明です。次の記号のいずれかである可能性があります。</target>
        </trans-unit>
        <trans-unit id="e8cbced6a8e5085804c5b909584c06f650eaf2a8" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;display&lt;/var&gt; specifies a class of terminals (see below). &lt;var&gt;plist&lt;/var&gt; is a property list of face attributes and their values, specifying how the face appears on such terminals. For backward compatibility, you can also write an element as &lt;code&gt;(&lt;var&gt;display&lt;/var&gt; &lt;var&gt;plist&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;display&lt;/var&gt; は、端末のクラスを指定します（以下を参照）。 &lt;var&gt;plist&lt;/var&gt; は、顔の属性とその値のプロパティリストであり、そのような端末で顔がどのように表示されるかを指定します。下位互換性のために、要素を &lt;code&gt;(&lt;var&gt;display&lt;/var&gt; &lt;var&gt;plist&lt;/var&gt;)&lt;/code&gt; として記述することもできます。</target>
        </trans-unit>
        <trans-unit id="e3ad125e9fcc9d8ed043a029ffcfd9d1a4d42f6e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;doc&lt;/var&gt;, if present, should be a string specifying the function&amp;rsquo;s documentation string (see &lt;a href=&quot;function-documentation#Function-Documentation&quot;&gt;Function Documentation&lt;/a&gt;). &lt;var&gt;declare&lt;/var&gt;, if present, should be a &lt;code&gt;declare&lt;/code&gt; form specifying function metadata (see &lt;a href=&quot;declare-form#Declare-Form&quot;&gt;Declare Form&lt;/a&gt;). &lt;var&gt;interactive&lt;/var&gt;, if present, should be an &lt;code&gt;interactive&lt;/code&gt; form specifying how the function is to be called interactively (see &lt;a href=&quot;interactive-call#Interactive-Call&quot;&gt;Interactive Call&lt;/a&gt;).</source>
          <target state="translated">&lt;var&gt;doc&lt;/var&gt; 、存在する場合、（参照関数の説明文字列を指定する文字列でなければならない&lt;a href=&quot;function-documentation#Function-Documentation&quot;&gt;関数ドキュメントを&lt;/a&gt;）。 &lt;var&gt;declare&lt;/var&gt; は、存在する場合、関数メタデータを指定する &lt;code&gt;declare&lt;/code&gt; フォームである必要があります（&lt;a href=&quot;declare-form#Declare-Form&quot;&gt;フォームの宣言を&lt;/a&gt;参照）。 &lt;var&gt;interactive&lt;/var&gt; （存在する場合）は、関数を&lt;a href=&quot;interactive-call#Interactive-Call&quot;&gt;インタラクティブに呼び出す&lt;/a&gt;方法を指定する &lt;code&gt;interactive&lt;/code&gt; フォームである必要があります（インタラクティブ呼び出しを参照）。</target>
        </trans-unit>
        <trans-unit id="4d7cbc1a74d03a0f78e34f4208bb2aee52517b47" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;doc&lt;/var&gt;, if present, should be a string specifying the macro&amp;rsquo;s documentation string. &lt;var&gt;declare&lt;/var&gt;, if present, should be a &lt;code&gt;declare&lt;/code&gt; form specifying metadata for the macro (see &lt;a href=&quot;declare-form#Declare-Form&quot;&gt;Declare Form&lt;/a&gt;). Note that macros cannot have interactive declarations, since they cannot be called interactively.</source>
          <target state="translated">&lt;var&gt;doc&lt;/var&gt; は、存在する場合、マクロのドキュメント文字列を指定する文字列である必要があります。 &lt;var&gt;declare&lt;/var&gt; は、存在する場合、マクロのメタデータを指定する &lt;code&gt;declare&lt;/code&gt; フォームである必要があります（&lt;a href=&quot;declare-form#Declare-Form&quot;&gt;フォームの宣言を&lt;/a&gt;参照）。マクロはインタラクティブに呼び出すことができないため、インタラクティブな宣言を持つことはできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="0ccc8ddd11dcc504c397e4a0a41030c2848cd67f" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;dx&lt;/var&gt;, &lt;var&gt;dy&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;dx&lt;/var&gt; 、 &lt;var&gt;dy&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="bfeb638334ed0ea3560b17a40e5f38c1328d1164" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;emacs-name&lt;/var&gt;.dmp</source>
          <target state="translated">&lt;var&gt;emacs-name&lt;/var&gt;.dmp</target>
        </trans-unit>
        <trans-unit id="f43bbd847569b4d0976a8c99d3ef58935b829e02" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;enable&lt;/var&gt; is an expression; if it evaluates to &lt;code&gt;nil&lt;/code&gt;, the item is make unselectable.. &lt;code&gt;:enable&lt;/code&gt; is an alias for &lt;code&gt;:active&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;enable&lt;/var&gt; は式です。 &lt;code&gt;nil&lt;/code&gt; と評価された場合、アイテムは選択不可になります。 &lt;code&gt;:enable&lt;/code&gt; は &lt;code&gt;:active&lt;/code&gt; のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="026a4d4e36d46678bd210dd9c83988b282f1bbc3" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;enable&lt;/var&gt; is an expression; if it evaluates to &lt;code&gt;nil&lt;/code&gt;, the menu is not selectable. &lt;code&gt;:enable&lt;/code&gt; is an alias for &lt;code&gt;:active&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;enable&lt;/var&gt; は式です。 &lt;code&gt;nil&lt;/code&gt; と評価された場合、メニューは選択できません。 &lt;code&gt;:enable&lt;/code&gt; は &lt;code&gt;:active&lt;/code&gt; のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="24543b8028f1a35def94fb638729d3e0dc460d74" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;endkeyfun&lt;/var&gt; is called to move point from the start of the sort key to the end of the sort key. This argument is optional. If &lt;var&gt;startkeyfun&lt;/var&gt; returns &lt;code&gt;nil&lt;/code&gt; and this argument is omitted (or &lt;code&gt;nil&lt;/code&gt;), then the sort key extends to the end of the record. There is no need for &lt;var&gt;endkeyfun&lt;/var&gt; if &lt;var&gt;startkeyfun&lt;/var&gt; returns a non-&lt;code&gt;nil&lt;/code&gt; value.</source>
          <target state="translated">&lt;var&gt;endkeyfun&lt;/var&gt; は、ソートキーの先頭からソートキーの末尾にポイントを移動するために呼び出されます。この引数はオプションです。場合 &lt;var&gt;startkeyfun&lt;/var&gt; の戻りは &lt;code&gt;nil&lt;/code&gt; をし、この引数を省略（またはさ &lt;code&gt;nil&lt;/code&gt; ）、その後、ソートキーは、レコードの最後まで。以下のための必要はありません &lt;var&gt;endkeyfun&lt;/var&gt; があれば &lt;var&gt;startkeyfun&lt;/var&gt; は非返す &lt;code&gt;nil&lt;/code&gt; 値を。</target>
        </trans-unit>
        <trans-unit id="ae4587c6776baee695ab496cec1fcc993fbc9d28" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;endrecfun&lt;/var&gt; is called with point within a record. It moves point to the end of the record.</source>
          <target state="translated">&lt;var&gt;endrecfun&lt;/var&gt; は、レコード内のポイントで呼び出されます。ポイントをレコードの最後に移動します。</target>
        </trans-unit>
        <trans-unit id="07258c3d909b7d04fbc29283d3a6c004534672a9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;eol-type&lt;/var&gt; may also be 0, 1 or 2, standing for &lt;code&gt;unix&lt;/code&gt;, &lt;code&gt;dos&lt;/code&gt; and &lt;code&gt;mac&lt;/code&gt;, respectively.</source>
          <target state="translated">&lt;var&gt;eol-type&lt;/var&gt; は、0、1、または2の場合もあり、それぞれ &lt;code&gt;unix&lt;/code&gt; 、 &lt;code&gt;dos&lt;/code&gt; 、および &lt;code&gt;mac&lt;/code&gt; を表します。</target>
        </trans-unit>
        <trans-unit id="a679848f4f81da63a940e500185e5f4d31fb505d" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;face&lt;/var&gt; is a face name (a symbol), and &lt;var&gt;spec&lt;/var&gt; is the customized face specification for that face (see &lt;a href=&quot;defining-faces#Defining-Faces&quot;&gt;Defining Faces&lt;/a&gt;).</source>
          <target state="translated">&lt;var&gt;face&lt;/var&gt; は面名（シンボル）であり、 &lt;var&gt;spec&lt;/var&gt; はその面用にカスタマイズされた面仕様です（面の&lt;a href=&quot;defining-faces#Defining-Faces&quot;&gt;定義を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a673288deae0cf01bf7e0c37ea6455f2424f67ef" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;face&lt;/var&gt; is merged with the &lt;code&gt;fringe&lt;/code&gt; face, so normally &lt;var&gt;face&lt;/var&gt; should specify only the foreground color.</source>
          <target state="translated">&lt;var&gt;face&lt;/var&gt; は &lt;code&gt;fringe&lt;/code&gt; 面とマージされるため、通常、 &lt;var&gt;face&lt;/var&gt; は前景色のみを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="26d9a049372ef2db3d71a63355e838837e772504" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;family&lt;/var&gt; specifies the address (and protocol) family for communication. &lt;code&gt;nil&lt;/code&gt; means determine the proper address family automatically for the given &lt;var&gt;host&lt;/var&gt; and &lt;var&gt;service&lt;/var&gt;. &lt;code&gt;local&lt;/code&gt; specifies a Unix socket, in which case &lt;var&gt;host&lt;/var&gt; is ignored. &lt;code&gt;ipv4&lt;/code&gt; and &lt;code&gt;ipv6&lt;/code&gt; specify to use IPv4 and IPv6, respectively.</source>
          <target state="translated">&lt;var&gt;family&lt;/var&gt; は、通信用のアドレス（およびプロトコル）ファミリを指定します。 &lt;code&gt;nil&lt;/code&gt; は、指定された &lt;var&gt;host&lt;/var&gt; と &lt;var&gt;service&lt;/var&gt; の適切なアドレスファミリを自動的に決定することを意味します。 &lt;code&gt;local&lt;/code&gt; はUnixソケットを指定します。この場合、 &lt;var&gt;host&lt;/var&gt; は無視されます。 &lt;code&gt;ipv4&lt;/code&gt; と &lt;code&gt;ipv6&lt;/code&gt; は、それぞれIPv4とIPv6を使用するように指定します。</target>
        </trans-unit>
        <trans-unit id="c439447a5739faaa36388e0fd0208ee5b5f20788" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;file&lt;/var&gt; and &lt;var&gt;file1&lt;/var&gt; are the name of the file(s) whose event is being reported. For example:</source>
          <target state="translated">&lt;var&gt;file&lt;/var&gt; と &lt;var&gt;file1&lt;/var&gt; は、イベントが報告されているファイルの名前です。例えば：</target>
        </trans-unit>
        <trans-unit id="494dfd3e482f441bcf7349c4b35ed8257f3fcf33" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;file&lt;/var&gt; has been renamed to &lt;var&gt;file1&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;file&lt;/var&gt; 名前が &lt;var&gt;file1&lt;/var&gt; に変更されました</target>
        </trans-unit>
        <trans-unit id="d0efe3807ad969de00033c63916e52295c7dc7db" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;file&lt;/var&gt; was created</source>
          <target state="translated">&lt;var&gt;file&lt;/var&gt; が作成されました</target>
        </trans-unit>
        <trans-unit id="ff9b4e58b863e2d9426f346e0b4e0bc3b5c5203e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;file&lt;/var&gt; was deleted</source>
          <target state="translated">&lt;var&gt;file&lt;/var&gt; が削除されました</target>
        </trans-unit>
        <trans-unit id="ceaae3594f636f9cdc34f5ebddb7ea2e6a63d442" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;file&lt;/var&gt;&amp;rsquo;s contents has changed; with</source>
          <target state="translated">&lt;var&gt;file&lt;/var&gt; の内容が変更されました。と</target>
        </trans-unit>
        <trans-unit id="c371da9511eda87a2212e3220f12941b56c97397" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;filename&lt;/var&gt;.&lt;var&gt;ext&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;filename&lt;/var&gt;.&lt;var&gt;ext&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="4e7cc819e121989dca24eab6e075d8cd141f4606" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;filename&lt;/var&gt;.el</source>
          <target state="translated">&lt;var&gt;filename&lt;/var&gt;.el</target>
        </trans-unit>
        <trans-unit id="33e86703d5b2c9fe524e4c7367176bbb74f72f27" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;filename&lt;/var&gt;.elc</source>
          <target state="translated">&lt;var&gt;filename&lt;/var&gt;.elc</target>
        </trans-unit>
        <trans-unit id="03c0f13fc536f6551c91f757809e50b3865faf3e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;firstchar&lt;/var&gt;..&lt;var&gt;lastchar&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;firstchar&lt;/var&gt;..&lt;var&gt;lastchar&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="2f1c5588aa47061170d13d3fdbdf7eb212c134e7" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;flags&lt;/var&gt; is a list of conditions to set what will be watched for. It can include the following symbols:</source>
          <target state="translated">&lt;var&gt;flags&lt;/var&gt; は、監視対象を設定するための条件のリストです。次の記号を含めることができます。</target>
        </trans-unit>
        <trans-unit id="cb3f01a3d3b221299cad46839d79ffbec32038e4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;font-spec&lt;/var&gt; may be &lt;code&gt;nil&lt;/code&gt;, which explicitly specifies that there&amp;rsquo;s no font for the specified &lt;var&gt;character&lt;/var&gt;. This is useful, for example, to avoid expensive system-wide search for fonts for characters that have no glyphs, like those from the Unicode Private Use Area (PUA).</source>
          <target state="translated">&lt;var&gt;font-spec&lt;/var&gt; は &lt;code&gt;nil&lt;/code&gt; である可能性があります。これは、指定された &lt;var&gt;character&lt;/var&gt; フォントがないことを明示的に指定します。これは、たとえば、Unicode Private Use Area（PUA）のように、グリフのない文字のフォントをシステム全体で高額に検索することを回避するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="87791ac35e559d82f0beba087e4f60504c73063c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;font-spec&lt;/var&gt; may be a cons; &lt;code&gt;(&lt;var&gt;family&lt;/var&gt; . &lt;var&gt;registry&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;family&lt;/var&gt; is a family name of a font (possibly including a foundry name at the head), &lt;var&gt;registry&lt;/var&gt; is a registry name of a font (possibly including an encoding name at the tail).</source>
          <target state="translated">&lt;var&gt;font-spec&lt;/var&gt; は短所かもしれません。 &lt;code&gt;(&lt;var&gt;family&lt;/var&gt; . &lt;var&gt;registry&lt;/var&gt;)&lt;/code&gt; 、 &lt;var&gt;family&lt;/var&gt; （おそらくヘッドにファウンドリ名を含む）フォントファミリ名では、 &lt;var&gt;registry&lt;/var&gt; （おそらく尾でエンコーディング名を含む）フォントの登録名です。</target>
        </trans-unit>
        <trans-unit id="c4d8e9b29420e5f894d3d4388135196d57737a2e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;font-spec&lt;/var&gt; may be a font name, a string.</source>
          <target state="translated">&lt;var&gt;font-spec&lt;/var&gt; は、フォント名、文字列の場合があります。</target>
        </trans-unit>
        <trans-unit id="759768b158ba114fe576f2c579a978fa9530def7" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;font-spec&lt;/var&gt; may be a font-spec object created by the function &lt;code&gt;font-spec&lt;/code&gt; (see &lt;a href=&quot;low_002dlevel-font#Low_002dLevel-Font&quot;&gt;Low-Level Font&lt;/a&gt;).</source>
          <target state="translated">&lt;var&gt;font-spec&lt;/var&gt; は、関数 &lt;code&gt;font-spec&lt;/code&gt; によって作成されたfont-specオブジェクトの場合があります（&lt;a href=&quot;low_002dlevel-font#Low_002dLevel-Font&quot;&gt;低レベルフォントを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="029bbc3c1e9a51615a423507e468eedf7d75d6f0" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;foo&lt;/var&gt;-theme.el</source>
          <target state="translated">&lt;var&gt;foo&lt;/var&gt;-theme.el</target>
        </trans-unit>
        <trans-unit id="86da1189a32a4e33ef437641c2dc1ff3f09bc416" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;form&lt;/var&gt; is a Lisp expression evaluated at the moment the field is unpacked or packed. The result of the evaluation should be one of the above-listed type specifications.</source>
          <target state="translated">&lt;var&gt;form&lt;/var&gt; は、フィールドがアンパックまたはパックされた時点で評価されるLisp式です。評価の結果は、上記のタイプ仕様のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="92c54291694533dc568fa1eb74e1ad40167195fd" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;form&lt;/var&gt; is an expression that is dynamically evaluated and whose value is concatenated with the menu entry&amp;rsquo;s label.</source>
          <target state="translated">&lt;var&gt;form&lt;/var&gt; は動的に評価される式であり、その値はメニューエントリのラベルと連結されます。</target>
        </trans-unit>
        <trans-unit id="fb3bf40536e1a49665a57075be8eb3a300e2ec1a" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;form&lt;/var&gt; is an expression that is evaluated to obtain a value which serves as the menu item&amp;rsquo;s label (the default is &lt;var&gt;name&lt;/var&gt;).</source>
          <target state="translated">&lt;var&gt;form&lt;/var&gt; は、メニュー項目のラベルとして機能する値を取得するために評価される式です（デフォルトは &lt;var&gt;name&lt;/var&gt; です）。</target>
        </trans-unit>
        <trans-unit id="f51c3cfdb2c95fd18d36a83c0a64f4afa1c8d6e0" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;fringe&lt;/var&gt; is either the symbol &lt;code&gt;left-fringe&lt;/code&gt; or &lt;code&gt;right-fringe&lt;/code&gt;. &lt;var&gt;bitmap&lt;/var&gt; is a symbol identifying the bitmap to display. The optional &lt;var&gt;face&lt;/var&gt; names a face whose foreground and background colors are to be used to display the bitmap, using the attributes of the &lt;code&gt;fringe&lt;/code&gt; face for colors that &lt;var&gt;face&lt;/var&gt; didn&amp;rsquo;t specify. If &lt;var&gt;face&lt;/var&gt; is omitted, that means to use the attributes of the &lt;code&gt;default&lt;/code&gt; face for the colors which the &lt;code&gt;fringe&lt;/code&gt; face didn&amp;rsquo;t specify. For predictable results that don&amp;rsquo;t depend on the attributes of the &lt;code&gt;default&lt;/code&gt; and &lt;code&gt;fringe&lt;/code&gt; faces, we recommend you never omit &lt;var&gt;face&lt;/var&gt;, but always provide a specific face. In particular, if you want the bitmap to be always displayed in the &lt;code&gt;fringe&lt;/code&gt; face, use &lt;code&gt;fringe&lt;/code&gt; as &lt;var&gt;face&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;fringe&lt;/var&gt; は、シンボル &lt;code&gt;left-fringe&lt;/code&gt; または &lt;code&gt;right-fringe&lt;/code&gt; フリンジのいずれかです。 &lt;var&gt;bitmap&lt;/var&gt; は、表示するビットマップを識別する記号です。オプションの &lt;var&gt;face&lt;/var&gt; は、前景色と背景色を使用してビットマップを表示する面に、 &lt;var&gt;face&lt;/var&gt; 指定されていない色の &lt;code&gt;fringe&lt;/code&gt; 面の属性を使用して名前を付けます。 &lt;var&gt;face&lt;/var&gt; が省略されている場合は、 &lt;code&gt;fringe&lt;/code&gt; 面で指定されていない色に &lt;code&gt;default&lt;/code&gt; 面の属性を使用することを意味します。 &lt;code&gt;default&lt;/code&gt; 面と &lt;code&gt;fringe&lt;/code&gt; 面の属性に依存しない予測可能な結果を​​得るには、省略しないことをお勧めします &lt;var&gt;face&lt;/var&gt; ですが、常に特定の顔を提供します。あなたはビットマップが常にで表示させたい場合は特に、 &lt;code&gt;fringe&lt;/code&gt; 顔、使用 &lt;code&gt;fringe&lt;/code&gt; として &lt;var&gt;face&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="0e67933ea042f44af21af128920ef083d97dd3b1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;function&lt;/var&gt; is called with four arguments: &lt;var&gt;evald&lt;/var&gt;, &lt;var&gt;func&lt;/var&gt;, &lt;var&gt;args&lt;/var&gt;, and &lt;var&gt;flags&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;function&lt;/var&gt; は、 &lt;var&gt;evald&lt;/var&gt; 、 &lt;var&gt;func&lt;/var&gt; 、 &lt;var&gt;args&lt;/var&gt; 、 &lt;var&gt;flags&lt;/var&gt; の4つの引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="96a61bda6352a0a069ba29f13038afcd21b6e3cb" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;function&lt;/var&gt; is compared with functions added to &lt;var&gt;place&lt;/var&gt; using &lt;code&gt;equal&lt;/code&gt;, to try and make it work also with lambda expressions. It is additionally compared also with the &lt;code&gt;name&lt;/code&gt; property of the functions added to &lt;var&gt;place&lt;/var&gt;, which can be more reliable than comparing lambda expressions using &lt;code&gt;equal&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;function&lt;/var&gt; は、 &lt;code&gt;equal&lt;/code&gt; を使用して &lt;var&gt;place&lt;/var&gt; に追加された関数と比較され、ラムダ式でも機能するようになります。さらに、 &lt;var&gt;place&lt;/var&gt; に追加された関数の &lt;code&gt;name&lt;/code&gt; プロパティとも比較されます。これは、 &lt;code&gt;equal&lt;/code&gt; を使用してラムダ式を比較するよりも信頼性が高くなります。</target>
        </trans-unit>
        <trans-unit id="5575fbb1388958318be1a3552e5c7c509f3c4fc2" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;function&lt;/var&gt; must be a function which, if called with one argument&amp;mdash;the list of the other menu items&amp;mdash;returns the actual items to be displayed in the menu.</source>
          <target state="translated">&lt;var&gt;function&lt;/var&gt; は、1つの引数（他のメニュー項目のリスト）で呼び出された場合に、メニューに表示される実際の項目を返す関数である必要があります。</target>
        </trans-unit>
        <trans-unit id="7521d4e1d834b0b0b2987dd83395e6b17b51ac26" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;function&lt;/var&gt; should be a function used to initialize the variable when the &lt;code&gt;defcustom&lt;/code&gt; is evaluated. It should take two arguments, the option name (a symbol) and the value. Here are some predefined functions meant for use in this way:</source>
          <target state="translated">&lt;var&gt;function&lt;/var&gt; は、 &lt;code&gt;defcustom&lt;/code&gt; が評価されるときに変数を初期化するために使用される関数である必要があります。オプション名（シンボル）と値の2つの引数を取る必要があります。この方法で使用するための事前定義された関数を次に示します。</target>
        </trans-unit>
        <trans-unit id="f8f6f9d814feac7c8527f7543b641d0a69a818ed" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;getter&lt;/var&gt; will be bound to a copyable expression that returns the value of &lt;var&gt;place&lt;/var&gt;. &lt;var&gt;setter&lt;/var&gt; will be bound to a function that takes an expression &lt;var&gt;v&lt;/var&gt; and returns a new expression that sets &lt;var&gt;place&lt;/var&gt; to &lt;var&gt;v&lt;/var&gt;. &lt;var&gt;body&lt;/var&gt; should return a Emacs Lisp expression manipulating &lt;var&gt;place&lt;/var&gt; via &lt;var&gt;getter&lt;/var&gt; and &lt;var&gt;setter&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;getter&lt;/var&gt; は、 &lt;var&gt;place&lt;/var&gt; の値を返すコピー可能な式にバインドされます。 &lt;var&gt;setter&lt;/var&gt; は、式 &lt;var&gt;v&lt;/var&gt; を取り、 &lt;var&gt;place&lt;/var&gt; を &lt;var&gt;v&lt;/var&gt; に設定する新しい式を返す関数にバインドされます。 &lt;var&gt;body&lt;/var&gt; は、 &lt;var&gt;getter&lt;/var&gt; および &lt;var&gt;setter&lt;/var&gt; を介して &lt;var&gt;place&lt;/var&gt; を操作するEmacsLisp式を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="4043993b61e9a42a8e9285bfdbfe54534c1e8638" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;group&lt;/var&gt; should be one of the following:</source>
          <target state="translated">&lt;var&gt;group&lt;/var&gt; は次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="2d92881cdd8c4025ff540b733613ee07d9cfa4fc" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;handler&lt;/var&gt; describes how to unpack or pack the field and can be one of the following:</source>
          <target state="translated">&lt;var&gt;handler&lt;/var&gt; は、フィールドを解凍またはパックする方法を説明し、次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="14afc8802dd099dffd902090a0a69552b90aa24b" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;height&lt;/var&gt; specifies the height of the horizontal scroll bar in pixels (&lt;code&gt;nil&lt;/code&gt; means use the height specified for the frame). &lt;var&gt;horizontal-type&lt;/var&gt; specifies whether to have a horizontal scroll bar. The possible values are &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, which means to use the frame&amp;rsquo;s default, and &lt;code&gt;nil&lt;/code&gt; for no horizontal scroll bar. Note that for a mini window the value &lt;code&gt;t&lt;/code&gt; has the same meaning as &lt;code&gt;nil&lt;/code&gt;, namely to not show a horizontal scroll bar. You have to explicitly specify &lt;code&gt;bottom&lt;/code&gt; in order to show a horizontal scroll bar in a mini window.</source>
          <target state="translated">&lt;var&gt;height&lt;/var&gt; は、水平スクロールバーの高さをピクセル単位で指定します（ &lt;code&gt;nil&lt;/code&gt; は、フレームに指定された高さを使用することを意味します）。 &lt;var&gt;horizontal-type&lt;/var&gt; は、水平スクロールバーを使用するかどうかを指定します。可能な値は、フレームのデフォルトを使用することを意味する &lt;code&gt;bottom&lt;/code&gt; 、 &lt;code&gt;t&lt;/code&gt; 、および水平スクロールバーがない場合は &lt;code&gt;nil&lt;/code&gt; です。ミニウィンドウの場合、値 &lt;code&gt;t&lt;/code&gt; は &lt;code&gt;nil&lt;/code&gt; と同じ意味を持ちます。つまり、水平スクロールバーを表示しません。ミニウィンドウに水平スクロールバーを表示するには、 &lt;code&gt;bottom&lt;/code&gt; を明示的に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="6cd4abcdd0cf44425cf91cbe5f1f6af6363adce9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;help&lt;/var&gt; is a string describing the menu item.</source>
          <target state="translated">&lt;var&gt;help&lt;/var&gt; は、メニュー項目を説明する文字列です。</target>
        </trans-unit>
        <trans-unit id="96a4bc599371ca129df372931368e5d53c4c5189" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;help&lt;/var&gt; specifies a help-echo string to display while the mouse is on that item in the same way as &lt;code&gt;help-echo&lt;/code&gt; text properties (see &lt;a href=&quot;special-properties#Help-display&quot;&gt;Help display&lt;/a&gt;).</source>
          <target state="translated">&lt;var&gt;help&lt;/var&gt; は、help- &lt;code&gt;help-echo&lt;/code&gt; テキストプロパティと同じ方法で、マウスがそのアイテム上にあるときに表示するhelp-echo文字列を指定します（&lt;a href=&quot;special-properties#Help-display&quot;&gt;ヘルプ表示を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="b3a3fe3a0adcd58bec41606b7786fe808bb50fde" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;host&lt;/var&gt;:&lt;var&gt;dpy&lt;/var&gt;.&lt;var&gt;screen&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;host&lt;/var&gt;:&lt;var&gt;dpy&lt;/var&gt;.&lt;var&gt;screen&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="42b4994da7ef7bf80d71cd16fb9dc08946036693" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;host&lt;/var&gt;:&lt;var&gt;server&lt;/var&gt;.&lt;var&gt;screen&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;host&lt;/var&gt;:&lt;var&gt;server&lt;/var&gt;.&lt;var&gt;screen&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="0e3c28fae96e04daa9845a71c500ac2d21de32d1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;hostname&lt;/var&gt;:&lt;var&gt;displaynumber&lt;/var&gt;.&lt;var&gt;screennumber&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;hostname&lt;/var&gt;:&lt;var&gt;displaynumber&lt;/var&gt;.&lt;var&gt;screennumber&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="1c483a6a0980a0cf8c23d9ab62832084d98a30b1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;id&lt;/var&gt; is either &lt;code&gt;nil&lt;/code&gt;, or a Lisp object that identifies the entry. If the latter, the cursor stays on the same entry when re-sorting entries. Comparison is done with &lt;code&gt;equal&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;id&lt;/var&gt; は、 &lt;code&gt;nil&lt;/code&gt; 、またはエントリを識別するLispオブジェクトのいずれかです。後者の場合、エントリを再ソートするときにカーソルは同じエントリに留まります。比較は &lt;code&gt;equal&lt;/code&gt; で行われます。</target>
        </trans-unit>
        <trans-unit id="31818ab23abac17f811cdac8cd47bac29ad5ea73" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;identification&lt;/var&gt; specifies which part of the identifier shall be returned as string. &lt;var&gt;identification&lt;/var&gt; can be the symbol &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;user&lt;/code&gt; or &lt;code&gt;host&lt;/code&gt;; any other value is handled like &lt;code&gt;nil&lt;/code&gt; and means to return the complete identifier string. In the example above, the remote &lt;code&gt;user&lt;/code&gt; identifier string would be &lt;code&gt;root&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;identification&lt;/var&gt; は、識別子のどの部分を文字列として返すかを指定します。 &lt;var&gt;identification&lt;/var&gt; は、シンボル &lt;code&gt;method&lt;/code&gt; 、 &lt;code&gt;user&lt;/code&gt; または &lt;code&gt;host&lt;/code&gt; することができます。その他の値は &lt;code&gt;nil&lt;/code&gt; のように扱われ、完全な識別子文字列を返すことを意味します。上記の例では、リモート &lt;code&gt;user&lt;/code&gt; 識別子の文字列は &lt;code&gt;root&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="86739b7293c7a619312c3904fbbaab23074b10ee" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;image&lt;/var&gt; is either a single image specification (see &lt;a href=&quot;images#Images&quot;&gt;Images&lt;/a&gt;) or a vector of four image specifications. If you use a vector of four, one of them is used, depending on circumstances:</source>
          <target state="translated">&lt;var&gt;image&lt;/var&gt; は、単一の画像仕様（&lt;a href=&quot;images#Images&quot;&gt;Imagesを&lt;/a&gt;参照）または4つの画像仕様のベクトルのいずれかです。4つのベクトルを使用する場合、状況に応じて、そのうちの1つが使用されます。</target>
        </trans-unit>
        <trans-unit id="3054de9d7101f47ab193522932e03068882fe0a2" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;include&lt;/var&gt; is an expression; if it evaluates to &lt;code&gt;nil&lt;/code&gt;, the item is made invisible. &lt;code&gt;:included&lt;/code&gt; is an alias for &lt;code&gt;:visible&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;include&lt;/var&gt; は式です。 &lt;code&gt;nil&lt;/code&gt; と評価された場合、アイテムは非表示になります。 &lt;code&gt;:included&lt;/code&gt; は &lt;code&gt;:visible&lt;/code&gt; のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="7c4739c613e959e93e32b340d505b80d83477102" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;include&lt;/var&gt; is an expression; if it evaluates to &lt;code&gt;nil&lt;/code&gt;, the menu is made invisible. &lt;code&gt;:included&lt;/code&gt; is an alias for &lt;code&gt;:visible&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;include&lt;/var&gt; は式です。 &lt;code&gt;nil&lt;/code&gt; と評価された場合、メニューは非表示になります。 &lt;code&gt;:included&lt;/code&gt; は &lt;code&gt;:visible&lt;/code&gt; のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="6420fd3e3f459ab10132a472e9ecc278de5f7219" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;initial&lt;/var&gt; can also be a cons cell of the form &lt;code&gt;(&lt;var&gt;string&lt;/var&gt;
. &lt;var&gt;position&lt;/var&gt;)&lt;/code&gt;. This means to insert &lt;var&gt;string&lt;/var&gt; in the minibuffer but put point at &lt;var&gt;position&lt;/var&gt; within the string&amp;rsquo;s text.</source>
          <target state="translated">&lt;var&gt;initial&lt;/var&gt; 、フォームのコンス・セルとすることができる &lt;code&gt;(&lt;var&gt;string&lt;/var&gt; . &lt;var&gt;position&lt;/var&gt;)&lt;/code&gt; 。これは、 &lt;var&gt;string&lt;/var&gt; をミニバッファに挿入し、文字列のテキスト内の &lt;var&gt;position&lt;/var&gt; にポイントを置くことを意味します。</target>
        </trans-unit>
        <trans-unit id="4b206e32ad38dde073c99970ff35c938f9f6fb77" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;instance&lt;/var&gt;.&lt;var&gt;attribute&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;instance&lt;/var&gt;.&lt;var&gt;attribute&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="718efbcd8e4b5b6b8e8b13b1459e1cc03479ab48" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;instance&lt;/var&gt;.&lt;var&gt;component&lt;/var&gt;.&lt;var&gt;attribute&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;instance&lt;/var&gt;.&lt;var&gt;component&lt;/var&gt;.&lt;var&gt;attribute&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="4248e5e822e0f5d532af3eedf7c73be8341c3ad8" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;keys&lt;/var&gt; is a hint indicating which key sequence to display as keyboard equivalent, in case the command is bound to several key sequences. It has no effect if &lt;var&gt;keys&lt;/var&gt; is not bound to same command as this menu item.</source>
          <target state="translated">&lt;var&gt;keys&lt;/var&gt; は、コマンドが複数のキーシーケンスにバインドされている場合に、キーボードと同等のものとして表示するキーシーケンスを示すヒントです。 &lt;var&gt;keys&lt;/var&gt; がこのメニュー項目と同じコマンドにバインドされていない場合は効果がありません。</target>
        </trans-unit>
        <trans-unit id="62f6c891a1b05f30a58f0aeeed5e7c0f2822315d" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;keys&lt;/var&gt; is a string to display as keyboard equivalent to the menu item. This is normally not needed, as keyboard equivalents are computed automatically. &lt;var&gt;keys&lt;/var&gt; is expanded with &lt;code&gt;substitute-command-keys&lt;/code&gt; before it is displayed (see &lt;a href=&quot;keys-in-documentation#Keys-in-Documentation&quot;&gt;Keys in Documentation&lt;/a&gt;).</source>
          <target state="translated">&lt;var&gt;keys&lt;/var&gt; は、メニュー項目に相当するキーボードとして表示する文字列です。同等のキーボードは自動的に計算されるため、これは通常は必要ありません。 &lt;var&gt;keys&lt;/var&gt; は、表示される前に、 &lt;code&gt;substitute-command-keys&lt;/code&gt; keysで展開されます（&lt;a href=&quot;keys-in-documentation#Keys-in-Documentation&quot;&gt;ドキュメントのキーを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="596b2e28f20e0f7c98531ef608bc15ad4ac40bab" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;library&lt;/var&gt; can also be a feature (i.e., a symbol), in which case &lt;var&gt;body&lt;/var&gt; is evaluated at the end of any file where &lt;code&gt;(provide &lt;var&gt;library&lt;/var&gt;)&lt;/code&gt; is called.</source>
          <target state="translated">&lt;var&gt;library&lt;/var&gt; は機能（つまりシンボル）にすることもできます。その場合、 &lt;var&gt;body&lt;/var&gt; は &lt;code&gt;(provide &lt;var&gt;library&lt;/var&gt;)&lt;/code&gt; が呼び出されるファイルの最後で評価されます。</target>
        </trans-unit>
        <trans-unit id="3000b097be57636b873656a46f8475a5f1beb072" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;map&lt;/var&gt; must contain an appropriate keymap bound to &lt;code&gt;[menu-bar]&lt;/code&gt;. The remaining arguments &lt;var&gt;props&lt;/var&gt; are additional property list elements to add to the menu item specification.</source>
          <target state="translated">&lt;var&gt;map&lt;/var&gt; には、 &lt;code&gt;[menu-bar]&lt;/code&gt; にバインドされた適切なキーマップが含まれている必要があります。残りの引数 &lt;var&gt;props&lt;/var&gt; は、メニュー項目の仕様に追加する追加のプロパティリスト要素です。</target>
        </trans-unit>
        <trans-unit id="a521da8968366f92cee94a02ace1fd6c8e079a13" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;max-costs&lt;/var&gt; defines the quality of the difference computation. If the actual costs exceed this limit, heuristics are used to provide a faster but suboptimal solution. The default value is 1000000.</source>
          <target state="translated">&lt;var&gt;max-costs&lt;/var&gt; は、差の計算の品質を定義します。実際のコストがこの制限を超える場合、ヒューリスティックを使用して、より高速ですが最適ではないソリューションを提供します。デフォルト値は1000000です。</target>
        </trans-unit>
        <trans-unit id="a763217bb3a14d4f74e940f501ce1a0a143c32e1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;max-secs&lt;/var&gt; defines a hard boundary in terms of seconds. If given and exceeded, it will fall back to &lt;code&gt;delete-region&lt;/code&gt; and &lt;code&gt;insert-buffer-substring&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;max-secs&lt;/var&gt; は、秒単位でハード境界を定義します。指定して超えると、 &lt;code&gt;delete-region&lt;/code&gt; と &lt;code&gt;insert-buffer-substring&lt;/code&gt; にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="a5c8a5efcfb5474cdb45133f3322fdc9ebc87680" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;method&lt;/var&gt; can be:</source>
          <target state="translated">&lt;var&gt;method&lt;/var&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="27fa08ba53bae7468bfa10b0879a0af63b63c7ff" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;method&lt;/var&gt; should be the method name that was passed to &lt;code&gt;smie-rules-function&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;method&lt;/var&gt; は、 &lt;code&gt;smie-rules-function&lt;/code&gt; に渡されたメソッド名である必要があります。</target>
        </trans-unit>
        <trans-unit id="50b807ebac2655b0d8a5c152f0862476091a5d62" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;modename&lt;/var&gt;-mode-hook</source>
          <target state="translated">&lt;var&gt;modename&lt;/var&gt;-mode-hook</target>
        </trans-unit>
        <trans-unit id="586b5298d2b503845edf7730bbc979076f5aeccd" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;name&lt;/var&gt; can be supplied to give a name to the thread. The name is used for debugging and informational purposes only; it has no meaning to Emacs. If &lt;var&gt;name&lt;/var&gt; is provided, it must be a string.</source>
          <target state="translated">&lt;var&gt;name&lt;/var&gt; を指定して、スレッドに名前を付けることができます。この名前は、デバッグおよび情報提供のみを目的として使用されます。Emacsには意味がありません。 &lt;var&gt;name&lt;/var&gt; 場合は、文字列である必要があります。</target>
        </trans-unit>
        <trans-unit id="5eebb341ded2a927ba41d8e9885ef924c499a969" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;name&lt;/var&gt; is the column&amp;rsquo;s name (a string).</source>
          <target state="translated">&lt;var&gt;name&lt;/var&gt; は、列の名前（文字列）です。</target>
        </trans-unit>
        <trans-unit id="8bc34451416eb9bb94dc7e49d8604ec8fead239e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;name&lt;/var&gt; should be a string. The argument &lt;var&gt;expansion&lt;/var&gt; is normally the desired expansion (a string), or &lt;code&gt;nil&lt;/code&gt; to undefine the abbrev. If it is anything but a string or &lt;code&gt;nil&lt;/code&gt;, then the abbreviation expands solely by running &lt;var&gt;hook&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;name&lt;/var&gt; は文字列である必要があります。引数の &lt;var&gt;expansion&lt;/var&gt; は通常、目的の展開（文字列）、または略語の定義を解除するための &lt;code&gt;nil&lt;/code&gt; です。文字列または &lt;code&gt;nil&lt;/code&gt; 以外の場合、略語は &lt;var&gt;hook&lt;/var&gt; を実行するだけで展開されます。</target>
        </trans-unit>
        <trans-unit id="30b5243fd966445dc45a08c73f83cb0da097f434" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;name&lt;/var&gt;-&lt;var&gt;version&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;name&lt;/var&gt;-&lt;var&gt;version&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="cf344c891bff62333dbba018c548d00aaff7e834" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;name&lt;/var&gt;-&lt;var&gt;version&lt;/var&gt;.tar</source>
          <target state="translated">&lt;var&gt;name&lt;/var&gt;-&lt;var&gt;version&lt;/var&gt;.tar</target>
        </trans-unit>
        <trans-unit id="216a58edd79a48074a5ad6617458bb495b2790c5" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;name&lt;/var&gt;-autoloads.el</source>
          <target state="translated">&lt;var&gt;name&lt;/var&gt;-autoloads.el</target>
        </trans-unit>
        <trans-unit id="167bb5544e79104b156c0e1d7f1157bf42714410" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;name&lt;/var&gt;-pkg.el</source>
          <target state="translated">&lt;var&gt;name&lt;/var&gt;-pkg.el</target>
        </trans-unit>
        <trans-unit id="9e81faaecc9188da3158c2527f5a008ccce20eb6" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;name&lt;/var&gt;/../</source>
          <target state="translated">&lt;var&gt;name&lt;/var&gt;/../</target>
        </trans-unit>
        <trans-unit id="ab97241a11e66b9d7122a5dccc133b2a7f1d73a4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;nextrecfun&lt;/var&gt; is called with point at the end of a record. This function moves point to the start of the next record. The first record is assumed to start at the position of point when &lt;code&gt;sort-subr&lt;/code&gt; is called. Therefore, you should usually move point to the beginning of the buffer before calling &lt;code&gt;sort-subr&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;nextrecfun&lt;/var&gt; は、レコードの終わりにポイントを付けて呼び出されます。この関数は、ポイントを次のレコードの先頭に移動します。最初のレコードは、 &lt;code&gt;sort-subr&lt;/code&gt; が呼び出されたときのポイントの位置から始まると想定されます。したがって、通常、 &lt;code&gt;sort-subr&lt;/code&gt; を呼び出す前に、ポイントをバッファの先頭に移動する必要があります。</target>
        </trans-unit>
        <trans-unit id="cf466c1676191116404da7c893fc26c9b6a9eeb6" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;number&lt;/var&gt;: offset by &lt;var&gt;number&lt;/var&gt;, relative to a base token which is the current token for &lt;code&gt;:after&lt;/code&gt; and its parent for &lt;code&gt;:before&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;number&lt;/var&gt; ：： &lt;code&gt;:after&lt;/code&gt; 現在のトークンであり、 &lt;code&gt;:before&lt;/code&gt; の親であるベーストークンを基準にして、 &lt;var&gt;number&lt;/var&gt; でオフセットされます。</target>
        </trans-unit>
        <trans-unit id="b62a446c8e768cf79eea37dae884533e6c6dbd9c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;offset&lt;/var&gt; can be:</source>
          <target state="translated">&lt;var&gt;offset&lt;/var&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="de3cf1331d6c45eb1d3caca8b7b2d4f52e3a4ef9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;order&lt;/var&gt; may also be omitted or &lt;code&gt;nil&lt;/code&gt;. Then the numeric order of &lt;var&gt;element&lt;/var&gt; stays unchanged if it already has one; otherwise, &lt;var&gt;element&lt;/var&gt; has no numeric order. Elements without a numeric list order are placed at the end of the list, in no particular order.</source>
          <target state="translated">&lt;var&gt;order&lt;/var&gt; は省略または &lt;code&gt;nil&lt;/code&gt; にすることもできます。その場合、 &lt;var&gt;element&lt;/var&gt; の番号順は、すでにある場合は変更されません。それ以外の場合、 &lt;var&gt;element&lt;/var&gt; は番号順がありません。リストの番号順のない要素は、特定の順序ではなく、リストの最後に配置されます。</target>
        </trans-unit>
        <trans-unit id="99c4d75e06c1981a99d6ec13897814fd98ced18d" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;package&lt;/var&gt; should be the official name of the package, as a symbol (e.g., &lt;code&gt;MH-E&lt;/code&gt;). &lt;var&gt;version&lt;/var&gt; should be a string. If the package &lt;var&gt;package&lt;/var&gt; is released as part of Emacs, &lt;var&gt;package&lt;/var&gt; and &lt;var&gt;version&lt;/var&gt; should appear in the value of &lt;code&gt;customize-package-emacs-version-alist&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;package&lt;/var&gt; は、シンボルとしてのパッケージの正式な名前である必要があります（例： &lt;code&gt;MH-E&lt;/code&gt; ）。 &lt;var&gt;version&lt;/var&gt; は文字列である必要があります。パッケージ &lt;var&gt;package&lt;/var&gt; がEmacsの一部としてリリースされている場合、 &lt;var&gt;package&lt;/var&gt; と &lt;var&gt;version&lt;/var&gt; は &lt;code&gt;customize-package-emacs-version-alist&lt;/code&gt; の値に表示されます。</target>
        </trans-unit>
        <trans-unit id="6894fefccfb7ff6f9b8c6767f4eccbdc010b5930" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;pairs&lt;/var&gt; is a list of variable and value pairs. This macro creates a buffer-local binding in the current buffer for each of the variables, and gives them a buffer-local value. It is equivalent to calling &lt;code&gt;make-local-variable&lt;/code&gt; followed by &lt;code&gt;setq&lt;/code&gt; for each of the variables. The variables should be unquoted symbols.</source>
          <target state="translated">&lt;var&gt;pairs&lt;/var&gt; は、変数と値のペアのリストです。このマクロは、変数ごとに現在のバッファーにバッファーローカルバインディングを作成し、それらにバッファーローカル値を与えます。これは、呼び出すのと同じです &lt;code&gt;make-local-variable&lt;/code&gt; 続い &lt;code&gt;setq&lt;/code&gt; の変数のそれぞれのために。変数は引用符で囲まれていない記号である必要があります。</target>
        </trans-unit>
        <trans-unit id="faac51bbe73b1a7baf50319796f7718c84360e1d" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;position&lt;/var&gt; is a mouse position list (see &lt;a href=&quot;click-events#Click-Events&quot;&gt;Click Events&lt;/a&gt;), specifying the current position of the mouse cursor. As with the end-position of a drag event, this position list may represent a location outside the boundaries of the initially selected frame, in which case the list contains that frame in place of a window.</source>
          <target state="translated">&lt;var&gt;position&lt;/var&gt; は、マウスカーソルの現在の位置を指定するマウス位置リスト（&lt;a href=&quot;click-events#Click-Events&quot;&gt;[クリックイベント]を&lt;/a&gt;参照）です。ドラッグイベントの終了位置と同様に、この位置リストは最初に選択されたフレームの境界の外側の位置を表す場合があります。その場合、リストにはウィンドウの代わりにそのフレームが含まれます。</target>
        </trans-unit>
        <trans-unit id="f59e3c7c715366ed238889ef97ba31c569ce7eb7" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;predicate&lt;/var&gt; can either be &lt;code&gt;t&lt;/code&gt; (which is a synonym for &lt;code&gt;equal&lt;/code&gt;), &lt;code&gt;nil&lt;/code&gt; (which means &amp;ldquo;not equal&amp;rdquo;), or a predicate that will be called with two parameters: The first is &lt;var&gt;value&lt;/var&gt;, and the second is the value of the text property we&amp;rsquo;re inspecting.</source>
          <target state="translated">&lt;var&gt;predicate&lt;/var&gt; は、 &lt;code&gt;t&lt;/code&gt; （ &lt;code&gt;equal&lt;/code&gt; の同義語）、 &lt;code&gt;nil&lt;/code&gt; （「等しくない」を意味する）、または2つのパラメーターで呼び出される述語のいずれかです。1つ目は &lt;var&gt;value&lt;/var&gt; で、2つ目はtextプロパティの値です。検査中です。</target>
        </trans-unit>
        <trans-unit id="df5ae6820e0b025e86df03022536665959855d02" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;prefix&lt;/var&gt;--&amp;hellip;</source>
          <target state="translated">&lt;var&gt;prefix&lt;/var&gt;--&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="2701a0d0273e8b0469c3357e04df113afa7340aa" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;prefix&lt;/var&gt;.el</source>
          <target state="translated">&lt;var&gt;prefix&lt;/var&gt;.el</target>
        </trans-unit>
        <trans-unit id="415cc0168ff768c5644927069f207439cffdcaaf" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;question&lt;/var&gt;...&lt;var&gt;answer&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;question&lt;/var&gt;...&lt;var&gt;answer&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="b1a5e789f14de0932441acbb046bd1a8125964ba" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;radix&lt;/var&gt;r</source>
          <target state="translated">&lt;var&gt;radix&lt;/var&gt;r</target>
        </trans-unit>
        <trans-unit id="9490106685cc5ae114d3b5a517eee30cb47980e5" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;remapping&lt;/var&gt; may be any face spec suitable for a &lt;code&gt;face&lt;/code&gt; text property: either a face (i.e., a face name or a property list of attribute/value pairs), or a list of faces. For details, see the description of the &lt;code&gt;face&lt;/code&gt; text property in &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Special Properties&lt;/a&gt;. &lt;var&gt;remapping&lt;/var&gt; serves as the complete specification for the remapped face&amp;mdash;it replaces the normal definition of &lt;var&gt;face&lt;/var&gt;, instead of modifying it.</source>
          <target state="translated">&lt;var&gt;remapping&lt;/var&gt; は、 &lt;code&gt;face&lt;/code&gt; テキストプロパティに適した任意の顔の仕様、つまり顔（つまり、顔の名前または属性と値のペアのプロパティリスト）、または顔のリストのいずれかです。詳細については、「&lt;a href=&quot;special-properties#Special-Properties&quot;&gt;特殊プロパティ」の&lt;/a&gt; &lt;code&gt;face&lt;/code&gt; テキストプロパティの説明を参照してください。 &lt;var&gt;remapping&lt;/var&gt; は、再マッピングされた面の完全な仕様として機能します。 &lt;var&gt;face&lt;/var&gt; を変更するのではなく、通常の面の定義を置き換えます。</target>
        </trans-unit>
        <trans-unit id="7710cef71b2a55732fa034589d5a9648abf147de" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;repeated-args&lt;/var&gt;&amp;hellip;</source>
          <target state="translated">&lt;var&gt;repeated-args&lt;/var&gt;&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="e4128ed07ab55fb2620ee23c8c4002a9d6d8a606" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;reporter&lt;/var&gt; must be the result of a call to &lt;code&gt;make-progress-reporter&lt;/code&gt;. &lt;var&gt;value&lt;/var&gt; specifies the current state of your operation and must be between &lt;var&gt;min-value&lt;/var&gt; and &lt;var&gt;max-value&lt;/var&gt; (inclusive) as passed to &lt;code&gt;make-progress-reporter&lt;/code&gt;. For instance, if you scan a buffer, then &lt;var&gt;value&lt;/var&gt; should be the result of a call to &lt;code&gt;point&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;reporter&lt;/var&gt; は、 &lt;code&gt;make-progress-reporter&lt;/code&gt; の呼び出しの結果である必要があります。 &lt;var&gt;value&lt;/var&gt; は、操作の現在の状態を指定し、 &lt;code&gt;make-progress-reporter&lt;/code&gt; に渡される &lt;var&gt;max-value&lt;/var&gt; &lt;var&gt;min-value&lt;/var&gt; と最大値（両端を含む）の間にある必要があります。たとえば、バッファをスキャンする場合、 &lt;var&gt;value&lt;/var&gt; は &lt;code&gt;point&lt;/code&gt; への呼び出しの結果である必要があります。</target>
        </trans-unit>
        <trans-unit id="0c7b8b66a17ec0d9e7d1c618f4047785138de257" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;reporter&lt;/var&gt;, &lt;var&gt;value&lt;/var&gt;, and &lt;var&gt;suffix&lt;/var&gt; have the same meaning as for &lt;code&gt;progress-reporter-update&lt;/code&gt;. Optional &lt;var&gt;new-message&lt;/var&gt; allows you to change the message of the &lt;var&gt;reporter&lt;/var&gt;. Since this function always updates the echo area, such a change will be immediately presented to the user.</source>
          <target state="translated">&lt;var&gt;reporter&lt;/var&gt; 、 &lt;var&gt;value&lt;/var&gt; 、および &lt;var&gt;suffix&lt;/var&gt; は、 &lt;code&gt;progress-reporter-update&lt;/code&gt; の場合と同じ意味です。オプションの &lt;var&gt;new-message&lt;/var&gt; を使用すると、 &lt;var&gt;reporter&lt;/var&gt; メッセージを変更できます。この機能は常にエコーエリアを更新するため、そのような変更はすぐにユーザーに提示されます。</target>
        </trans-unit>
        <trans-unit id="d51fe7a021174666b578e4a21bdb3a618171cc76" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;requirements&lt;/var&gt; is a list of required packages and their versions. Each element in this list should have the form &lt;code&gt;(&lt;var&gt;dep-name&lt;/var&gt;
&lt;var&gt;dep-version&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;dep-name&lt;/var&gt; is a symbol whose name is the dependency&amp;rsquo;s package name, and &lt;var&gt;dep-version&lt;/var&gt; is the dependency&amp;rsquo;s version (a string).</source>
          <target state="translated">&lt;var&gt;requirements&lt;/var&gt; は、必要なパッケージとそのバージョンのリストです。このリストの各要素は、 &lt;code&gt;(&lt;var&gt;dep-name&lt;/var&gt; &lt;var&gt;dep-version&lt;/var&gt;)&lt;/code&gt; の形式である必要があります。ここで、 &lt;var&gt;dep-name&lt;/var&gt; は、名前が依存関係のパッケージ名であるシンボルであり、 &lt;var&gt;dep-version&lt;/var&gt; は依存関係のバージョン（文字列）です。</target>
        </trans-unit>
        <trans-unit id="e737d37d389d75f9cac6bb7ddb721d5c73f5fc03" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;selected&lt;/var&gt; is an expression; the checkbox or radio button is selected whenever the expression&amp;rsquo;s value is non-&lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;selected&lt;/var&gt; いるのは式です。式の値が &lt;code&gt;nil&lt;/code&gt; 以外の場合は常に、チェックボックスまたはラジオボタンが選択されます。</target>
        </trans-unit>
        <trans-unit id="4e76826cc6b334ade60730144fcdff6d3be4a681" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;service&lt;/var&gt; specifies a port number to connect to; or, for a server, the port number to listen on. It should be a service name like &amp;lsquo;</source>
          <target state="translated">&lt;var&gt;service&lt;/var&gt; は、接続するポート番号を指定します。または、サーバーの場合は、リッスンするポート番号。'のようなサービス名である必要があります</target>
        </trans-unit>
        <trans-unit id="973adcc3dd59f5f52753edf51047c9f8e5fa5e46" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;sort&lt;/var&gt; specifies how to sort entries by the column. If &lt;code&gt;nil&lt;/code&gt;, the column cannot be used for sorting. If &lt;code&gt;t&lt;/code&gt;, the column is sorted by comparing string values. Otherwise, this should be a predicate function for &lt;code&gt;sort&lt;/code&gt; (see &lt;a href=&quot;rearrangement#Rearrangement&quot;&gt;Rearrangement&lt;/a&gt;), which accepts two arguments with the same form as the elements of &lt;code&gt;tabulated-list-entries&lt;/code&gt; (see below).</source>
          <target state="translated">&lt;var&gt;sort&lt;/var&gt; は、エントリを列でソートする方法を指定します。場合 &lt;code&gt;nil&lt;/code&gt; 、列はソートに使用することはできません。場合 &lt;code&gt;t&lt;/code&gt; 、列には文字列値を比較することによりソートされます。それ以外の場合、これは &lt;code&gt;sort&lt;/code&gt; 述語関数である必要があり（&lt;a href=&quot;rearrangement#Rearrangement&quot;&gt;再配置を&lt;/a&gt;参照）、 &lt;code&gt;tabulated-list-entries&lt;/code&gt; 要素と同じ形式の2つの引数を受け入れます（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="7d39073d4b8db9cde37f102e3b0b1b5f83406619" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;speed&lt;/var&gt; is the speed of the serial port in bits per second. 9600 is a common value. The buffer is in Term mode; see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Term-Mode.html#Term-Mode&quot;&gt;Term Mode&lt;/a&gt; in</source>
          <target state="translated">&lt;var&gt;speed&lt;/var&gt; は、シリアルポートの速度（ビット/秒）です。 9600は一般的な値です。バッファは期間モードです。の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Term-Mode.html#Term-Mode&quot;&gt;用語モード&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="971f47e8670651577dc6a42bb689ff8bc62ca26d" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt; delimit the text to complete (which should enclose point). &lt;var&gt;collection&lt;/var&gt; is a completion table for completing that text, in a form suitable for passing as the second argument to &lt;code&gt;try-completion&lt;/code&gt; (see &lt;a href=&quot;basic-completion#Basic-Completion&quot;&gt;Basic Completion&lt;/a&gt;); completion alternatives will be generated from this completion table in the usual way, via the completion styles defined in &lt;code&gt;completion-styles&lt;/code&gt; (see &lt;a href=&quot;completion-variables#Completion-Variables&quot;&gt;Completion Variables&lt;/a&gt;). &lt;var&gt;props&lt;/var&gt; is a property list for additional information; any of the properties in &lt;code&gt;completion-extra-properties&lt;/code&gt; are recognized (see &lt;a href=&quot;completion-variables#Completion-Variables&quot;&gt;Completion Variables&lt;/a&gt;), as well as the following additional ones:</source>
          <target state="translated">&lt;var&gt;start&lt;/var&gt; と &lt;var&gt;end&lt;/var&gt; は、完了するテキストを区切ります（ポイントを囲む必要があります）。 &lt;var&gt;collection&lt;/var&gt; は、 &lt;code&gt;try-completion&lt;/code&gt; の2番目の引数として渡すのに適した形式で、そのテキストを完成させるための補完テーブルです（&lt;a href=&quot;basic-completion#Basic-Completion&quot;&gt;基本的な補完を&lt;/a&gt;参照）。補完の選択肢は、補完スタイルで定義された補完スタイルを介して、通常の方法でこの補完テーブルから生成され &lt;code&gt;completion-styles&lt;/code&gt; （&lt;a href=&quot;completion-variables#Completion-Variables&quot;&gt;補完変数を&lt;/a&gt;参照）。 &lt;var&gt;props&lt;/var&gt; は、追加情報のプロパティリストです。プロパティのいずれかの &lt;code&gt;completion-extra-properties&lt;/code&gt; （参照認識されている&lt;a href=&quot;completion-variables#Completion-Variables&quot;&gt;完了変数&lt;/a&gt;）と同様に、次の追加のもの：</target>
        </trans-unit>
        <trans-unit id="9309574541180ffc910dcfe02cdda08d3749f086" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;start&lt;/var&gt; may be a string, in which case &lt;var&gt;end&lt;/var&gt; is ignored and the returned value references string indices instead of buffer positions.</source>
          <target state="translated">&lt;var&gt;start&lt;/var&gt; は文字列の場合があります。その場合、 &lt;var&gt;end&lt;/var&gt; は無視され、戻り値はバッファ位置ではなく文字列インデックスを参照します。</target>
        </trans-unit>
        <trans-unit id="da4a280c768d1277e096e4c3e78a80bca4fe7713" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;startkeyfun&lt;/var&gt; is called to move point from the start of a record to the start of the sort key. This argument is optional; if it is omitted, the whole record is the sort key. If supplied, the function should either return a non-&lt;code&gt;nil&lt;/code&gt; value to be used as the sort key, or return &lt;code&gt;nil&lt;/code&gt; to indicate that the sort key is in the buffer starting at point. In the latter case, &lt;var&gt;endkeyfun&lt;/var&gt; is called to find the end of the sort key.</source>
          <target state="translated">&lt;var&gt;startkeyfun&lt;/var&gt; は、ポイントをレコードの先頭からソートキーの先頭に移動するために呼び出されます。この引数はオプションです。省略した場合、レコード全体がソートキーになります。指定されている場合、関数は、ソートキーとして使用される非 &lt;code&gt;nil&lt;/code&gt; 値を返すか、ソートキーがポイントからバッファ内にあることを示すために &lt;code&gt;nil&lt;/code&gt; を返す必要があります。後者の場合、 &lt;var&gt;endkeyfun&lt;/var&gt; の終わりを見つけるためにendkeyfunが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f73238806df0360ca7ee8bae497b6f974a669f33" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;style&lt;/var&gt; is a symbol describing the type of menu item; it should be &lt;code&gt;toggle&lt;/code&gt; (a checkbox), or &lt;code&gt;radio&lt;/code&gt; (a radio button), or anything else (meaning an ordinary menu item).</source>
          <target state="translated">&lt;var&gt;style&lt;/var&gt; は、メニュー項目のタイプを説明する記号です。それがあるべき &lt;code&gt;toggle&lt;/code&gt; （チェックボックス）、または &lt;code&gt;radio&lt;/code&gt; （ラジオボタン）、または何か他のもの（通常のメニュー項目を意味します）。</target>
        </trans-unit>
        <trans-unit id="7e15045cd15efc60dcbadbf4a9bfc1c74a850b81" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;symbol&lt;/var&gt; should be a function name; that function is called to calculate the indentation of a line within this expression. The function receives two arguments:</source>
          <target state="translated">&lt;var&gt;symbol&lt;/var&gt; は関数名である必要があります。この関数は、この式内の行のインデントを計算するために呼び出されます。関数は2つの引数を受け取ります。</target>
        </trans-unit>
        <trans-unit id="b66f2812c276f2743d9f7dec6d2407921c4d0a73" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;tag&lt;/var&gt; matches if it is &lt;code&gt;equal&lt;/code&gt; to the value of &lt;var&gt;form&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;tag&lt;/var&gt; は、 &lt;var&gt;form&lt;/var&gt; の値と &lt;code&gt;equal&lt;/code&gt; 場合に一致します。</target>
        </trans-unit>
        <trans-unit id="c11330b958f1facf64bc5c4a8eb2f52f8887ebe9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;tag&lt;/var&gt; matches unconditionally if it is &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;tag&lt;/var&gt; &lt;code&gt;t&lt;/code&gt; の場合、タグは無条件に一致します。</target>
        </trans-unit>
        <trans-unit id="fa74cd02b9eeaeaf01040683ef1ec0eda3535dae" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;time&lt;/var&gt; may specify an absolute or a relative time.</source>
          <target state="translated">&lt;var&gt;time&lt;/var&gt; は、絶対時間または相対時間を指定できます。</target>
        </trans-unit>
        <trans-unit id="95feb66b937fd5d812ad2340ecbc42562d0ebd18" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;title&lt;/var&gt; is a string to display in the mode line while this method is active. &lt;var&gt;description&lt;/var&gt; is a string describing this method and what it is good for.</source>
          <target state="translated">&lt;var&gt;title&lt;/var&gt; は、このメソッドがアクティブなときにモード行に表示する文字列です。 &lt;var&gt;description&lt;/var&gt; は、このメソッドとその用途を説明する文字列です。</target>
        </trans-unit>
        <trans-unit id="a98d01c0ccac615cc082b2f95fdfe91a54d7a493" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;to-fn&lt;/var&gt; must not involve buffers or files other than the one being encoded, otherwise the internal buffer used for formatting might be overwritten.</source>
          <target state="translated">&lt;var&gt;to-fn&lt;/var&gt; には、エンコードされているもの以外のバッファーまたはファイルを含めることはできません。含まない場合、フォーマットに使用される内部バッファーが上書きされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b832016f06701ddcb16ef3791cf3a3ce2a9399c1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;type&lt;/var&gt; should be a symbol; it is usually one of &lt;code&gt;PRIMARY&lt;/code&gt;, &lt;code&gt;SECONDARY&lt;/code&gt; or &lt;code&gt;CLIPBOARD&lt;/code&gt;. These are symbols with upper-case names, in accord with X Window System conventions. If &lt;var&gt;type&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, that stands for &lt;code&gt;PRIMARY&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;type&lt;/var&gt; はシンボルである必要があります。通常、 &lt;code&gt;PRIMARY&lt;/code&gt; 、 &lt;code&gt;SECONDARY&lt;/code&gt; 、または &lt;code&gt;CLIPBOARD&lt;/code&gt; のいずれかです。これらは、X Window Systemの規則に従って、大文字の名前が付いた記号です。 &lt;var&gt;type&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; の場合、それは &lt;code&gt;PRIMARY&lt;/code&gt; を表します。</target>
        </trans-unit>
        <trans-unit id="a342c7d2cce7402a90fc60df3bea3e251c92fd5d" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;value&lt;/var&gt; is sent into the iterator and becomes the value to which &lt;code&gt;iter-yield&lt;/code&gt; evaluates. &lt;var&gt;value&lt;/var&gt; is ignored for the first &lt;code&gt;iter-next&lt;/code&gt; call to a given iterator, since at the start of &lt;var&gt;iterator&lt;/var&gt;&amp;rsquo;s generator function, the generator function is not evaluating any &lt;code&gt;iter-yield&lt;/code&gt; form.</source>
          <target state="translated">&lt;var&gt;value&lt;/var&gt; はイテレータに送信され、 &lt;code&gt;iter-yield&lt;/code&gt; が評価する値になります。 &lt;var&gt;iterator&lt;/var&gt; のジェネレータ関数の開始時に、ジェネレータ関数は &lt;code&gt;iter-yield&lt;/code&gt; 形式を評価していないため、特定のイテレータへの最初の &lt;code&gt;iter-next&lt;/code&gt; 呼び出しでは &lt;var&gt;value&lt;/var&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="82930ebb4abfe28d89aca586ee4550c2d7c57fee" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;var&lt;/var&gt; is a variable name (a symbol), and &lt;var&gt;expression&lt;/var&gt; is an expression which evaluates to the desired customized value.</source>
          <target state="translated">&lt;var&gt;var&lt;/var&gt; は変数名（シンボル）であり、 &lt;var&gt;expression&lt;/var&gt; は目的のカスタマイズされた値に評価される式です。</target>
        </trans-unit>
        <trans-unit id="ad71f6f9e29b21a5a4b5ba0031c96e235018c497" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;watch-function&lt;/var&gt; will be called, just before changing the value of &lt;var&gt;symbol&lt;/var&gt;, with 4 arguments: &lt;var&gt;symbol&lt;/var&gt;, &lt;var&gt;newval&lt;/var&gt;, &lt;var&gt;operation&lt;/var&gt;, and &lt;var&gt;where&lt;/var&gt;. &lt;var&gt;symbol&lt;/var&gt; is the variable being changed. &lt;var&gt;newval&lt;/var&gt; is the value it will be changed to. (The old value is available to &lt;var&gt;watch-function&lt;/var&gt; as the value of &lt;var&gt;symbol&lt;/var&gt;, since it was not yet changed to &lt;var&gt;newval&lt;/var&gt;.) &lt;var&gt;operation&lt;/var&gt; is a symbol representing the kind of change, one of: &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;unlet&lt;/code&gt;, &lt;code&gt;makunbound&lt;/code&gt;, or &lt;code&gt;defvaralias&lt;/code&gt;. &lt;var&gt;where&lt;/var&gt; is a buffer if the buffer-local value of the variable is being changed, &lt;code&gt;nil&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;var&gt;watch-function&lt;/var&gt; の値が変化する直前に、呼び出される &lt;var&gt;symbol&lt;/var&gt; 4：引数を指定して、 &lt;var&gt;symbol&lt;/var&gt; 、 &lt;var&gt;newval&lt;/var&gt; 、 &lt;var&gt;operation&lt;/var&gt; 、および。 &lt;var&gt;symbol&lt;/var&gt; は変更される変数です。 &lt;var&gt;newval&lt;/var&gt; は、変更される値です。 （古い値は、まだ &lt;var&gt;newval&lt;/var&gt; に変更されていないため、 &lt;var&gt;symbol&lt;/var&gt; の値として &lt;var&gt;watch-function&lt;/var&gt; で使用できます。） &lt;var&gt;operation&lt;/var&gt; は、変更の種類を表すシンボルであり、 &lt;code&gt;set&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、 &lt;code&gt;unlet&lt;/code&gt; 、 &lt;code&gt;makunbound&lt;/code&gt; 、または &lt;code&gt;defvaralias&lt;/code&gt; のいずれかです。 &lt;var&gt;where&lt;/var&gt; 。 &lt;var&gt;where&lt;/var&gt; で、は変数のバッファローカル値が変更されている場合はバッファ、それ以外の場合は &lt;code&gt;nil&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4052603b19bcf65791aed68e81734e46505fd1f7" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;where&lt;/var&gt; determines how &lt;var&gt;function&lt;/var&gt; is composed with the existing function, e.g., whether &lt;var&gt;function&lt;/var&gt; should be called before, or after the original function. See &lt;a href=&quot;advice-combinators#Advice-Combinators&quot;&gt;Advice Combinators&lt;/a&gt;, for the list of available ways to compose the two functions.</source>
          <target state="translated">&lt;var&gt;where&lt;/var&gt; 、 &lt;var&gt;function&lt;/var&gt; が既存の関数とどのように構成されるかを決定します。たとえば、 &lt;var&gt;function&lt;/var&gt; を元の関数の前に呼び出すか、後に呼び出すかを決定します。2つの関数を構成するために使用できる方法のリストについては、&lt;a href=&quot;advice-combinators#Advice-Combinators&quot;&gt;アドバイスコンビネータを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ca11e1531e4a8d8494d88f05f553a46919cfe550" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;width&lt;/var&gt; is the width to reserve for the column (an integer). This is meaningless for the last column, which runs to the end of each line.</source>
          <target state="translated">&lt;var&gt;width&lt;/var&gt; は、列用に予約する幅（整数）です。これは、各行の終わりまで実行される最後の列には意味がありません。</target>
        </trans-unit>
        <trans-unit id="5627b0a3a3d443b1933453bb5cd20de0f0d26d5a" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;width&lt;/var&gt; specifies the width of the vertical scroll bar in pixels (&lt;code&gt;nil&lt;/code&gt; means use the width specified for the frame). &lt;var&gt;vertical-type&lt;/var&gt; specifies whether to have a vertical scroll bar and, if so, where. The possible values are &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, which means to use the frame&amp;rsquo;s default, and &lt;code&gt;nil&lt;/code&gt; for no vertical scroll bar.</source>
          <target state="translated">&lt;var&gt;width&lt;/var&gt; は、垂直スクロールバーの幅をピクセル単位で指定します（ &lt;code&gt;nil&lt;/code&gt; は、フレームに指定された幅を使用することを意味します）。 &lt;var&gt;vertical-type&lt;/var&gt; は、垂直スクロールバーを使用するかどうかを指定し、使用する場合はどこに配置するかを指定します。可能な値は、フレームのデフォルトを使用することを意味する &lt;code&gt;left&lt;/code&gt; 、 &lt;code&gt;right&lt;/code&gt; 、 &lt;code&gt;t&lt;/code&gt; であり、垂直スクロールバーがない場合は &lt;code&gt;nil&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c547cbc5c2845f4e2577ba46634ae50d14551741" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;width&lt;/var&gt;, &lt;var&gt;height&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;width&lt;/var&gt; 、 &lt;var&gt;height&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="a74d8ab3c01149182f1dc5ec8c690fdbb66475cb" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;window&lt;/var&gt; must be a live window and defaults to the selected window. &lt;var&gt;position&lt;/var&gt; defaults to the value of &lt;code&gt;window-point&lt;/code&gt; of &lt;var&gt;window&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;window&lt;/var&gt; はライブウィンドウである必要があり、デフォルトでは選択したウィンドウになります。 &lt;var&gt;position&lt;/var&gt; の値はデフォルト &lt;code&gt;window-point&lt;/code&gt; の &lt;var&gt;window&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="0dcdc549a8dcec6ec113ac1e899f074af9747242" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;x&lt;/var&gt; 、 &lt;var&gt;y&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="13a189a749c2f5d122db857ceb450b488307174d" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;width&lt;/var&gt;, and &lt;var&gt;height&lt;/var&gt; are integers. &amp;lsquo;</source>
          <target state="translated">&lt;var&gt;x&lt;/var&gt; 、 &lt;var&gt;y&lt;/var&gt; 、 &lt;var&gt;width&lt;/var&gt; 、 &lt;var&gt;height&lt;/var&gt; は整数です。'</target>
        </trans-unit>
        <trans-unit id="f26d70e928cbdeb5062b11f0ae6f958bb78b21d4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt;:/</source>
          <target state="translated">&lt;var&gt;x&lt;/var&gt;:/</target>
        </trans-unit>
        <trans-unit id="67327d2400403d993e67763cc63d3cf059b83c31" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt;:&lt;var&gt;xx&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;x&lt;/var&gt;:&lt;var&gt;xx&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="f31313bcbf9330da698e50ff142d0dd1d44b3b89" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;xx&lt;/var&gt;:&lt;var&gt;xx&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;xx&lt;/var&gt;:&lt;var&gt;xx&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="30a117ecb6ca07e6f0ab39ae1a00a801221ab69b" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;xx&lt;/var&gt;:&lt;var&gt;xx&lt;/var&gt;AM</source>
          <target state="translated">&lt;var&gt;xx&lt;/var&gt;:&lt;var&gt;xx&lt;/var&gt;AM</target>
        </trans-unit>
        <trans-unit id="0dc7a88310600ac2f33242840088cfa949ec5c00" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;xx&lt;/var&gt;:&lt;var&gt;xx&lt;/var&gt;PM</source>
          <target state="translated">&lt;var&gt;xx&lt;/var&gt;:&lt;var&gt;xx&lt;/var&gt;PM</target>
        </trans-unit>
        <trans-unit id="c4c469fb34962159f38a8e5056a82948fa3189e5" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;xx&lt;/var&gt;:&lt;var&gt;xx&lt;/var&gt;am</source>
          <target state="translated">&lt;var&gt;xx&lt;/var&gt;:&lt;var&gt;xx&lt;/var&gt;am</target>
        </trans-unit>
        <trans-unit id="03562318cb6818e744ba723a24c875d69c2acd5e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;xx&lt;/var&gt;:&lt;var&gt;xx&lt;/var&gt;pm</source>
          <target state="translated">&lt;var&gt;xx&lt;/var&gt;:&lt;var&gt;xx&lt;/var&gt;pm</target>
        </trans-unit>
        <trans-unit id="7ef500418ff05008137b29635c42810a2ebca53e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;xx&lt;/var&gt;AM</source>
          <target state="translated">&lt;var&gt;xx&lt;/var&gt;AM</target>
        </trans-unit>
        <trans-unit id="6c6955642e9352178bc5a205a340c2d1c58c2de1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;xx&lt;/var&gt;PM</source>
          <target state="translated">&lt;var&gt;xx&lt;/var&gt;PM</target>
        </trans-unit>
        <trans-unit id="17736819552d9e273869f36b796435c4a2c74701" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;xx&lt;/var&gt;am</source>
          <target state="translated">&lt;var&gt;xx&lt;/var&gt;am</target>
        </trans-unit>
        <trans-unit id="2a964e36e106b1339a3db0d45ec183e349520142" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;xx&lt;/var&gt;pm</source>
          <target state="translated">&lt;var&gt;xx&lt;/var&gt;pm</target>
        </trans-unit>
        <trans-unit id="21606782c65e44cac7afbb90977d8b6f82140e76" translate="yes" xml:space="preserve">
          <source>=</source>
          <target state="translated">=</target>
        </trans-unit>
        <trans-unit id="f52815edb4bf4384e64b0256a58e2fe3b042d4cd" translate="yes" xml:space="preserve">
          <source>?A</source>
          <target state="translated">?A</target>
        </trans-unit>
        <trans-unit id="599203ebe43f2624eea570ebba0a49b67a1818e0" translate="yes" xml:space="preserve">
          <source>?B</source>
          <target state="translated">?B</target>
        </trans-unit>
        <trans-unit id="b5a94beeeb73f886a4d79af28858dcb3ab6b7b31" translate="yes" xml:space="preserve">
          <source>?C</source>
          <target state="translated">?C</target>
        </trans-unit>
        <trans-unit id="6b4d70182298a45eaa7031398daeb6ad2782ad12" translate="yes" xml:space="preserve">
          <source>?\(</source>
          <target state="translated">?\(</target>
        </trans-unit>
        <trans-unit id="cbdd61d5fc29c31fa4405792eff9e39190e4f4e5" translate="yes" xml:space="preserve">
          <source>?\+</source>
          <target state="translated">?\+</target>
        </trans-unit>
        <trans-unit id="bad2940ef87b0d17a7c5116349545f3d674e067b" translate="yes" xml:space="preserve">
          <source>?\001</source>
          <target state="translated">?\001</target>
        </trans-unit>
        <trans-unit id="b3502d529dc1d8854f93560dc98666d4c65a5d0b" translate="yes" xml:space="preserve">
          <source>?\101</source>
          <target state="translated">?\101</target>
        </trans-unit>
        <trans-unit id="9fce6b611deb45edf21130052b9ecd9841a07506" translate="yes" xml:space="preserve">
          <source>?\C-\M-b</source>
          <target state="translated">?\C-\M-b</target>
        </trans-unit>
        <trans-unit id="4b0228d76a0a6f7f54d81c734f2e43b1cc79e704" translate="yes" xml:space="preserve">
          <source>?\C-\S-O</source>
          <target state="translated">?\C-\S-O</target>
        </trans-unit>
        <trans-unit id="87d2660a051e41aff96738baba5c207e2368c747" translate="yes" xml:space="preserve">
          <source>?\C-\S-o</source>
          <target state="translated">?\C-\S-o</target>
        </trans-unit>
        <trans-unit id="47fab5f7d4ae0f140143069c934867ab789751be" translate="yes" xml:space="preserve">
          <source>?\C-i</source>
          <target state="translated">?\C-i</target>
        </trans-unit>
        <trans-unit id="f90e3407f2bff3255b57e2755039432462d135ce" translate="yes" xml:space="preserve">
          <source>?\H-\M-\A-x</source>
          <target state="translated">?\H-\M-\A-x</target>
        </trans-unit>
        <trans-unit id="fee07cee280ad5aba36e35ab3213cbf3c5b9533d" translate="yes" xml:space="preserve">
          <source>?\M-A</source>
          <target state="translated">?\M-A</target>
        </trans-unit>
        <trans-unit id="a1f5f591dc022e0992becc5c6b9f2e09e9c4b113" translate="yes" xml:space="preserve">
          <source>?\M-\002</source>
          <target state="translated">?\M-\002</target>
        </trans-unit>
        <trans-unit id="bafd36bf88f8103b9efc69193c226588e4c45387" translate="yes" xml:space="preserve">
          <source>?\M-\101</source>
          <target state="translated">?\M-\101</target>
        </trans-unit>
        <trans-unit id="e5909bdf46b00c73e8aeff9468823539310a55f0" translate="yes" xml:space="preserve">
          <source>?\M-\C-b</source>
          <target state="translated">?\M-\C-b</target>
        </trans-unit>
        <trans-unit id="1b208eb3a3549c10763461c273c87956d3e3bbd4" translate="yes" xml:space="preserve">
          <source>?\N{LATIN SMALL LETTER A WITH GRAVE}</source>
          <target state="translated">？\ N {LATIN SMALL LETTER A WITH GRAVE}</target>
        </trans-unit>
        <trans-unit id="69a1f2deba55a734a6250ac07cfbc6794b3933af" translate="yes" xml:space="preserve">
          <source>?\\</source>
          <target state="translated">?\\</target>
        </trans-unit>
        <trans-unit id="0cf3cb1faea919f3860f818b03bbfcc9243d8900" translate="yes" xml:space="preserve">
          <source>?\^I</source>
          <target state="translated">?\^I</target>
        </trans-unit>
        <trans-unit id="3a04971235dc052a903f8d075da18e8ac58afa8f" translate="yes" xml:space="preserve">
          <source>?\^i</source>
          <target state="translated">?\^i</target>
        </trans-unit>
        <trans-unit id="867b960f113a7a5c0779b8c58e84e28e2f75a966" translate="yes" xml:space="preserve">
          <source>?\a</source>
          <target state="translated">?\a</target>
        </trans-unit>
        <trans-unit id="c5fbfc44c04b0fd9df447c22156ee7e37b25953b" translate="yes" xml:space="preserve">
          <source>?\b</source>
          <target state="translated">?\b</target>
        </trans-unit>
        <trans-unit id="4a810b1bf40c42dd4a08f3aa3861012326b32b47" translate="yes" xml:space="preserve">
          <source>?\d</source>
          <target state="translated">?\d</target>
        </trans-unit>
        <trans-unit id="29b3719b09d80bc7811aa176d73698536daca42b" translate="yes" xml:space="preserve">
          <source>?\e</source>
          <target state="translated">?\e</target>
        </trans-unit>
        <trans-unit id="ae9f72aaf52a6d4ac9607293d42d29afbca0843b" translate="yes" xml:space="preserve">
          <source>?\f</source>
          <target state="translated">?\f</target>
        </trans-unit>
        <trans-unit id="bedb9d8a983c4ae4258638456f7c4f707b123023" translate="yes" xml:space="preserve">
          <source>?\n</source>
          <target state="translated">?\n</target>
        </trans-unit>
        <trans-unit id="f946c4dd6853b2a51d459def9d1ebc230990d4fa" translate="yes" xml:space="preserve">
          <source>?\r</source>
          <target state="translated">?\r</target>
        </trans-unit>
        <trans-unit id="17d0768830f0c94bc4faf17615c57d2000e33f61" translate="yes" xml:space="preserve">
          <source>?\s</source>
          <target state="translated">?\s</target>
        </trans-unit>
        <trans-unit id="88c16d23df60641aa21518113b70aa5b1fd9c6af" translate="yes" xml:space="preserve">
          <source>?\t</source>
          <target state="translated">?\t</target>
        </trans-unit>
        <trans-unit id="5001639220c7a661b719c767f92b87d61d334296" translate="yes" xml:space="preserve">
          <source>?\v</source>
          <target state="translated">?\v</target>
        </trans-unit>
        <trans-unit id="fe8951e791e6bfe2053499640fdae36ad6b9fddc" translate="yes" xml:space="preserve">
          <source>?\x1</source>
          <target state="translated">?\x1</target>
        </trans-unit>
        <trans-unit id="7bfc455b958ad97ebd11ba2a62f818761637ffae" translate="yes" xml:space="preserve">
          <source>?\x41</source>
          <target state="translated">?\x41</target>
        </trans-unit>
        <trans-unit id="dbb47e7dc891f20d38639d6ad3ad2e8c45fd9a4d" translate="yes" xml:space="preserve">
          <source>?a</source>
          <target state="translated">?a</target>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="7b25536642ada965a8ba70bb7e96b265170e1e74" translate="yes" xml:space="preserve">
          <source>A &amp;lsquo;</source>
          <target state="translated">A '</target>
        </trans-unit>
        <trans-unit id="8cdca21dea5e4a8264a4a0d19a1fee7e75441b25" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;let&lt;/code&gt; special form has a sequence of bindings and a body. Each of the bindings is either a symbol or a sublist with a symbol and optional expression. In the specification below, notice the &lt;code&gt;gate&lt;/code&gt; inside of the sublist to prevent backtracking once a sublist is found.</source>
          <target state="translated">Aは &lt;code&gt;let&lt;/code&gt; 、特別なフォームがバインディングと体の配列を有しています。各バインディングは、シンボルまたはシンボルとオプションの式を持つサブリストのいずれかです。以下の仕様では、サブリストが見つかった後のバックトラックを防ぐために、サブリスト内の &lt;code&gt;gate&lt;/code&gt; に注意してください。</target>
        </trans-unit>
        <trans-unit id="135e6a2bf74be90fe3f773ee5fdeeae2bbbdd7ab" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;progn&lt;/code&gt; special form looks like this:</source>
          <target state="translated">&lt;code&gt;progn&lt;/code&gt; のこのような特殊な形になります。</target>
        </trans-unit>
        <trans-unit id="c62e5da7301e854f814d079251caea61f86ba089" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;struct buffer_text&lt;/code&gt; structure that ordinarily holds the buffer contents. In indirect buffers, this field is not used.</source>
          <target state="translated">&lt;code&gt;struct buffer_text&lt;/code&gt; 通常、バッファの内容を保持する構造体。間接バッファでは、このフィールドは使用されません。</target>
        </trans-unit>
        <trans-unit id="0d79644c9f1e2b9d43b38945d21a85b8f41eceb5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;wrong-type-argument&lt;/code&gt; error is signaled if &lt;var&gt;start&lt;/var&gt; is not an integer or if &lt;var&gt;end&lt;/var&gt; is neither an integer nor &lt;code&gt;nil&lt;/code&gt;. An &lt;code&gt;args-out-of-range&lt;/code&gt; error is signaled if &lt;var&gt;start&lt;/var&gt; indicates a character following &lt;var&gt;end&lt;/var&gt;, or if either integer is out of range for &lt;var&gt;string&lt;/var&gt;.</source>
          <target state="translated">&lt;code&gt;wrong-type-argument&lt;/code&gt; エラーがあれば通知され &lt;var&gt;start&lt;/var&gt; 整数でない場合、または &lt;var&gt;end&lt;/var&gt; 整数でもどちらである &lt;code&gt;nil&lt;/code&gt; で。 &lt;code&gt;args-out-of-range&lt;/code&gt; 場合は、エラーが発生される &lt;var&gt;start&lt;/var&gt; 文字以下のことを示し &lt;var&gt;end&lt;/var&gt; 、またはいずれかの整数の範囲外である場合 &lt;var&gt;string&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="ffd1de607d4e86730b7914fe4c5cd9684285cc40" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;Lisp macro&lt;/em&gt; is a user-defined construct that extends the Lisp language. It is represented as an object much like a function, but with different argument-passing semantics. A Lisp macro has the form of a list whose first element is the symbol &lt;code&gt;macro&lt;/code&gt; and whose &lt;small&gt;CDR&lt;/small&gt; is a Lisp function object, including the &lt;code&gt;lambda&lt;/code&gt; symbol.</source>
          <target state="translated">&lt;em&gt;Lispのマクロは&lt;/em&gt;Lispの言語を拡張し、ユーザ定義の構築物です。これは、関数によく似たオブジェクトとして表されますが、引数を渡すセマンティクスが異なります。Lispマクロは、最初の要素がシンボル &lt;code&gt;macro&lt;/code&gt; あり、&lt;small&gt;CDR&lt;/small&gt;が &lt;code&gt;lambda&lt;/code&gt; シンボルを含むLisp関数オブジェクトであるリストの形式を持っています。</target>
        </trans-unit>
        <trans-unit id="7d0a1b483ba2d8b083551109a784f0c67ae64feb" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;backup file&lt;/em&gt; is a copy of the old contents of a file you are editing. Emacs makes a backup file the first time you save a buffer into its visited file. Thus, normally, the backup file contains the contents of the file as it was before the current editing session. The contents of the backup file normally remain unchanged once it exists.</source>
          <target state="translated">&lt;em&gt;バックアップファイルが&lt;/em&gt;編集しているファイルの古い内容のコピーです。Emacsは、アクセスしたファイルに初めてバッファを保存したときにバックアップファイルを作成します。したがって、通常、バックアップファイルには、現在の編集セッションの前のファイルの内容が含まれています。バックアップファイルの内容は、通常、存在すると変更されません。</target>
        </trans-unit>
        <trans-unit id="3d929fdcc82b42627ef27e398a719ddbde6028a6" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;bool-vector&lt;/em&gt; is a one-dimensional array whose elements must be &lt;code&gt;t&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;ブールベクトルは、&lt;/em&gt;その要素である必要があり、一次元アレイである &lt;code&gt;t&lt;/code&gt; または &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="825376a8553269fb52ebcf7ffb4eb207689b12ed" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;buffer&lt;/em&gt; is a Lisp object containing text to be edited. Buffers are used to hold the contents of files that are being visited; there may also be buffers that are not visiting files. Although several buffers normally exist, only one buffer is designated the &lt;em&gt;current buffer&lt;/em&gt; at any time. Most editing commands act on the contents of the current buffer. Each buffer, including the current buffer, may or may not be displayed in any windows.</source>
          <target state="translated">&lt;em&gt;バッファは、&lt;/em&gt;テキストを含むLispのオブジェクトが編集されます。バッファは、アクセスされているファイルの内容を保持するために使用されます。ファイルにアクセスしていないバッファも存在する可能性があります。通常、複数のバッファーが存在しますが、常に1つのバッファーのみが&lt;em&gt;現在のバッファー&lt;/em&gt;として指定されます。ほとんどの編集コマンドは、現在のバッファの内容に作用します。現在のバッファを含む各バッファは、どのウィンドウにも表示される場合と表示されない場合があります。</target>
        </trans-unit>
        <trans-unit id="6f67a6c4f9bfcdbbe46b59e51fc8c393aeac5bb3" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;buffer&lt;/em&gt; is a Lisp object containing text to be edited. Buffers are used to hold the contents of files that are being visited; there may also be buffers that are not visiting files. While several buffers may exist at one time, only one buffer is designated the &lt;em&gt;current buffer&lt;/em&gt; at any time. Most editing commands act on the contents of the current buffer. Each buffer, including the current buffer, may or may not be displayed in any windows.</source>
          <target state="translated">&lt;em&gt;バッファは、&lt;/em&gt;テキストを含むLispのオブジェクトが編集されます。バッファは、アクセスされているファイルの内容を保持するために使用されます。ファイルにアクセスしていないバッファも存在する可能性があります。一度に複数のバッファーが存在する場合がありますが、&lt;em&gt;現在のバッファー&lt;/em&gt;として指定されるのは1つのバッファーのみです。ほとんどの編集コマンドは、現在のバッファの内容に作用します。現在のバッファを含む各バッファは、どのウィンドウにも表示される場合と表示されない場合があります。</target>
        </trans-unit>
        <trans-unit id="52fb4ef66447b55a8ae80b672427c06354ee2e1d" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;buffer&lt;/em&gt; is an object that holds text that can be edited (see &lt;a href=&quot;buffers#Buffers&quot;&gt;Buffers&lt;/a&gt;). Most buffers hold the contents of a disk file (see &lt;a href=&quot;files#Files&quot;&gt;Files&lt;/a&gt;) so they can be edited, but some are used for other purposes. Most buffers are also meant to be seen by the user, and therefore displayed, at some time, in a window (see &lt;a href=&quot;windows#Windows&quot;&gt;Windows&lt;/a&gt;). But a buffer need not be displayed in any window. Each buffer has a designated position called &lt;em&gt;point&lt;/em&gt; (see &lt;a href=&quot;positions#Positions&quot;&gt;Positions&lt;/a&gt;); most editing commands act on the contents of the current buffer in the neighborhood of point. At any time, one buffer is the &lt;em&gt;current buffer&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;バッファは、&lt;/em&gt;（参照編集可能なテキスト保持するオブジェクトである&lt;a href=&quot;buffers#Buffers&quot;&gt;バッファを&lt;/a&gt;）。ほとんどのバッファは、（参照ディスク・ファイルの内容を保持する&lt;a href=&quot;files#Files&quot;&gt;ファイルを&lt;/a&gt;、彼らは編集することができますが、いくつかは他の目的のために使用されているので）。ほとんどのバッファは、ユーザーに表示されることも意図されているため、ある時点でウィンドウに表示されます（&lt;a href=&quot;windows#Windows&quot;&gt;Windowsを&lt;/a&gt;参照）。ただし、どのウィンドウにもバッファを表示する必要はありません。各バッファと呼ばれる指定された位置有する&lt;em&gt;点&lt;/em&gt;（参照&lt;a href=&quot;positions#Positions&quot;&gt;体位&lt;/a&gt;）。ほとんどの編集コマンドは、ポイントの近くにある現在のバッファの内容に作用します。いつでも、1つのバッファが&lt;em&gt;現在のバッファ&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="58e9f6a52a39d48be38551b57b93b51b37d8bbc8" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;char-table&lt;/em&gt; is a one-dimensional array of elements of any type, indexed by character codes. Char-tables have certain extra features to make them more useful for many jobs that involve assigning information to character codes&amp;mdash;for example, a char-table can have a parent to inherit from, a default value, and a small number of extra slots to use for special purposes. A char-table can also specify a single value for a whole character set.</source>
          <target state="translated">&lt;em&gt;文字テーブルは、&lt;/em&gt;文字コードによってインデックス付け任意のタイプの要素の一次元アレイです。Char-tableには、文字コードへの情報の割り当てを伴う多くのジョブでより役立つようにする特定の追加機能があります。たとえば、char-tableには、継承元の親、デフォルト値、および少数の追加スロットを含めることができます。特別な目的で使用します。char-tableは、文字セット全体に対して単一の値を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="4d0930676c0654f8b70278e726ef587819be2392" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;character property&lt;/em&gt; is a named attribute of a character that specifies how the character behaves and how it should be handled during text processing and display. Thus, character properties are an important part of specifying the character&amp;rsquo;s semantics.</source>
          <target state="translated">&lt;em&gt;文字プロパティには、&lt;/em&gt;その指定は、どのように文字の振る舞いとどのようにそれがテキスト処理および表示中に処理する必要があり、文字の名前の属性です。したがって、文字のプロパティは、文字のセマンティクスを指定する上で重要な部分です。</target>
        </trans-unit>
        <trans-unit id="e3936c7a37167833ab4cfaa4fe7b776318fe87ee" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;character&lt;/em&gt; in Emacs Lisp is nothing more than an integer. In other words, characters are represented by their character codes. For example, the character</source>
          <target state="translated">EmacsLispの&lt;em&gt;文字&lt;/em&gt;は整数にすぎません。つまり、文字は文字コードで表されます。たとえば、キャラクター</target>
        </trans-unit>
        <trans-unit id="988e76f4ba6424d00a22226b31c6bb6069712f52" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;command-line option&lt;/em&gt; is an argument on the command line, which has the form:</source>
          <target state="translated">&lt;em&gt;コマンドラインオプションは、&lt;/em&gt;フォームがあり、コマンドライン、上の引数です：</target>
        </trans-unit>
        <trans-unit id="4e8a05b6c91ae7521b9158c75abe8973ce6b52be" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;comment&lt;/em&gt; is text that is written in a program only for the sake of humans that read the program, and that has no effect on the meaning of the program. In Lisp, an unescaped semicolon (&amp;lsquo;</source>
          <target state="translated">&lt;em&gt;コメントは&lt;/em&gt;唯一のプログラムを読んで、人間のためのプログラムで書かれたテキストで、プログラムの意味には影響を与えません。Lispでは、エスケープされていないセミコロン（ '</target>
        </trans-unit>
        <trans-unit id="0701bec604d6ebb4ee489eb99b493dc2af69d7c2" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;condition variable&lt;/em&gt; is a device for a more complex thread synchronization than the one supported by a mutex. A thread can wait on a condition variable, to be woken up when some other thread notifies the condition.</source>
          <target state="translated">&lt;em&gt;状態変数は、&lt;/em&gt;ミューテックスでサポートされているものよりもより複雑なスレッド同期化するための装置です。スレッドは、他のスレッドが条件を通知したときにウェイクアップされるように、条件変数を待機できます。</target>
        </trans-unit>
        <trans-unit id="d2b1e319d48c52f8b9b1dc9edeed91b28bd7bcde" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;condition variable&lt;/em&gt; is a way for a thread to block until some event occurs. A thread can wait on a condition variable, to be woken up when some other thread notifies the condition.</source>
          <target state="translated">&lt;em&gt;条件変数は&lt;/em&gt;、いくつかのイベントが発生するまでスレッドをブロックするための方法です。スレッドは、他のスレッドが条件を通知したときにウェイクアップされるように、条件変数を待機できます。</target>
        </trans-unit>
        <trans-unit id="2e8c4291506499a1c34b2f7a3b465bd996ccfdf5" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;conditional breakpoint&lt;/em&gt; tests a condition each time the program gets there. Any errors that occur as a result of evaluating the condition are ignored, as if the result were &lt;code&gt;nil&lt;/code&gt;. To set a conditional breakpoint, use</source>
          <target state="translated">&lt;em&gt;条件付きブレークポイントを&lt;/em&gt;条件に、プログラムがそこに着くたびにテストします。条件の評価の結果として発生したエラーは、結果が &lt;code&gt;nil&lt;/code&gt; であるかのように無視されます。条件付きブレークポイントを設定するには、</target>
        </trans-unit>
        <trans-unit id="0f175283d77a4fd94b6fc26212092340b20a89a3" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;cons cell&lt;/em&gt; is an object that consists of two slots, called the &lt;small&gt;CAR&lt;/small&gt; slot and the &lt;small&gt;CDR&lt;/small&gt; slot. Each slot can &lt;em&gt;hold&lt;/em&gt; any Lisp object. We also say that the &lt;small&gt;CAR&lt;/small&gt; of this cons cell is whatever object its &lt;small&gt;CAR&lt;/small&gt; slot currently holds, and likewise for the &lt;small&gt;CDR&lt;/small&gt;.</source>
          <target state="translated">&lt;em&gt;コンス・セルは&lt;/em&gt;呼ばれる、二つのスロットで構成されたオブジェクトである&lt;small&gt;CARの&lt;/small&gt;スロットおよび&lt;small&gt;CDRの&lt;/small&gt;スロット。各スロットは任意のLispオブジェクトを&lt;em&gt;保持&lt;/em&gt;できます。また、このconsセルの&lt;small&gt;CAR&lt;/small&gt;は、その&lt;small&gt;CAR&lt;/small&gt;スロットが現在保持しているオブジェクトであり、&lt;small&gt;CDRの場合&lt;/small&gt;も同様です。</target>
        </trans-unit>
        <trans-unit id="b422ee9e4026fd4e0cd35274610df0b46359f25a" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;data element&lt;/em&gt;, a single Lisp object.</source>
          <target state="translated">&lt;em&gt;データ要素&lt;/em&gt;、単一のLispオブジェクト。</target>
        </trans-unit>
        <trans-unit id="2fd5ff9853d86e2b5387329321415f00ec01c50e" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;datagram&lt;/em&gt; connection communicates with individual packets rather than streams of data. Each call to &lt;code&gt;process-send&lt;/code&gt; sends one datagram packet (see &lt;a href=&quot;input-to-processes#Input-to-Processes&quot;&gt;Input to Processes&lt;/a&gt;), and each datagram received results in one call to the filter function.</source>
          <target state="translated">&lt;em&gt;データグラム&lt;/em&gt;接続は、個々のパケットではなく、データのストリームと通信します。 &lt;code&gt;process-send&lt;/code&gt; への各呼び出しは1つのデータグラムパケットを送信し（&lt;a href=&quot;input-to-processes#Input-to-Processes&quot;&gt;プロセスへの入力を&lt;/a&gt;参照）、受信された各データグラムはフィルター関数への1つの呼び出しになります。</target>
        </trans-unit>
        <trans-unit id="f72e9e8f55ba9b0d557af040b71fe45f88267513" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;definition&lt;/em&gt; is a special kind of Lisp expression that announces your intention to use a symbol in a particular way. It typically specifies a value or meaning for the symbol for one kind of use, plus documentation for its meaning when used in this way. Thus, when you define a symbol as a variable, you can supply an initial value for the variable, plus documentation for the variable.</source>
          <target state="translated">&lt;em&gt;定義は、&lt;/em&gt;特定の方法で記号を使用するには、あなたの意思を発表しましたLispの式の特別な一種です。これは通常、ある種類の用途のシンボルの値または意味に加えて、この方法で使用された場合のその意味のドキュメントを指定します。したがって、シンボルを変数として定義する場合、変数の初期値に加えて、変数のドキュメントを指定できます。</target>
        </trans-unit>
        <trans-unit id="3be196257fddf44d2005a0a44f83cb229fa5908d" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;directory name&lt;/em&gt; is a string that must name a directory if it names any file at all. A directory is actually a kind of file, and it has a file name (called the &lt;em&gt;directory file name&lt;/em&gt;, which is related to the directory name but is typically not identical. (This is not quite the same as the usual POSIX terminology.) These two names for the same entity are related by a syntactic transformation. On GNU and other POSIX-like systems, this is simple: to obtain a directory name, append a &amp;lsquo;</source>
          <target state="translated">&lt;em&gt;ディレクトリ名は、&lt;/em&gt;すべてのそれの名前があれば、ファイルのディレクトリを指定する必要があり、文字列です。ディレクトリは実際には一種のファイルであり、ファイル名があります（&lt;em&gt;ディレクトリファイル名&lt;/em&gt;と呼ばれ、&lt;em&gt;ディレクトリ名&lt;/em&gt;に関連していますが、通常は同一ではありません（これは通常のPOSIX用語とはまったく同じではありません）。同じエンティティの2つの名前は、構文変換によって関連付けられます。GNUおよびその他のPOSIXのようなシステムでは、これは簡単です。ディレクトリ名を取得するには、 'を追加します。</target>
        </trans-unit>
        <trans-unit id="df1dde6d3983db88f8cc142a935e30fd2f3bd233" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;dynamic Emacs module&lt;/em&gt; is a shared library that provides additional functionality for use in Emacs Lisp programs, just like a package written in Emacs Lisp would.</source>
          <target state="translated">&lt;em&gt;ダイナミックEmacsのモジュールは&lt;/em&gt;、単に希望のEmacs Lispで書かれたパッケージと同様に、Emacs Lispプログラムで使用するための追加機能を提供する共有ライブラリです。</target>
        </trans-unit>
        <trans-unit id="5de98caf4399a9e93ce65d6deeb5b1cb3b08a098" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;dynamically loaded library&lt;/em&gt; is a library that is loaded on demand, when its facilities are first needed. Emacs supports such on-demand loading of support libraries for some of its features.</source>
          <target state="translated">&lt;em&gt;動的にロードされるライブラリは、&lt;/em&gt;その施設が最初に必要とされている場合、オンデマンドでロードされるライブラリです。Emacsは、その機能の一部について、サポートライブラリのこのようなオンデマンドロードをサポートしています。</target>
        </trans-unit>
        <trans-unit id="05b5a3be7d8b03b9d46f3e151dea5e13577ea7a8" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;face alias&lt;/em&gt; provides an equivalent name for a face. You can define a face alias by giving the alias symbol the &lt;code&gt;face-alias&lt;/code&gt; property, with a value of the target face name. The following example makes &lt;code&gt;modeline&lt;/code&gt; an alias for the &lt;code&gt;mode-line&lt;/code&gt; face.</source>
          <target state="translated">&lt;em&gt;顔の別名は&lt;/em&gt;顔のための同等の名前を提供します。エイリアスシンボルに &lt;code&gt;face-alias&lt;/code&gt; プロパティを指定し、ターゲットの顔名の値を指定することで、顔のエイリアスを定義できます。次の例では、 &lt;code&gt;modeline&lt;/code&gt; を &lt;code&gt;mode-line&lt;/code&gt; 面のエイリアスにします。</target>
        </trans-unit>
        <trans-unit id="302cf515b4948fb8d82a2188371caddf7704019d" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;face&lt;/em&gt; is a collection of graphical attributes for displaying text: font, foreground color, background color, optional underlining, etc. Faces control how Emacs displays text in buffers, as well as other parts of the frame such as the mode line.</source>
          <target state="translated">&lt;em&gt;顔は、&lt;/em&gt;テキストを表示するためのグラフィック属性の集合である：などフォント、前景色、背景色、オプションの下線は、Emacsはバッファ内のテキスト、ならびにこのようなモードラインとしてフレームの他の部分を表示する方法を制御するに直面します。</target>
        </trans-unit>
        <trans-unit id="231e0a86e11ce9343b5d5ac44eab6dbd7b32d896" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;finalizer object&lt;/em&gt; helps Lisp code clean up after objects that are no longer needed. A finalizer holds a Lisp function object. When a finalizer object becomes unreachable after a garbage collection pass, Emacs calls the finalizer&amp;rsquo;s associated function object. When deciding whether a finalizer is reachable, Emacs does not count references from finalizer objects themselves, allowing you to use finalizers without having to worry about accidentally capturing references to finalized objects themselves.</source>
          <target state="translated">&lt;em&gt;ファイナライザオブジェクトが&lt;/em&gt;不要になったオブジェクトの後にLispのコードのクリーンアップに役立ちます。ファイナライザーはLisp関数オブジェクトを保持します。ガベージコレクションパスの後でファイナライザーオブジェクトに到達できなくなると、Emacsはファイナライザーの関連する関数オブジェクトを呼び出します。ファイナライザーが到達可能かどうかを判断するとき、Emacsはファイナライザーオブジェクト自体からの参照をカウントしないため、ファイナライズされたオブジェクト自体への参照を誤ってキャプチャすることを心配せずにファイナライザーを使用できます。</target>
        </trans-unit>
        <trans-unit id="99b352b3839ee48b6a471f7ec46b92984bf71f47" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;font&lt;/em&gt; specifies how to display text on a graphical terminal. There are actually three separate font types&amp;mdash;&lt;em&gt;font objects&lt;/em&gt;, &lt;em&gt;font specs&lt;/em&gt;, and &lt;em&gt;font entities&lt;/em&gt;&amp;mdash;each of which has slightly different properties. None of them have a read syntax; their print syntax looks like &amp;lsquo;</source>
          <target state="translated">&lt;em&gt;フォント&lt;/em&gt;グラフィカル端末にテキストを表示する方法を指定します。実際には、&lt;em&gt;フォントオブジェクト&lt;/em&gt;、&lt;em&gt;フォントスペック&lt;/em&gt;、&lt;em&gt;フォントエンティティの&lt;/em&gt;3つの異なるフォントタイプがあり、それぞれにわずかに異なるプロパティがあります。それらのどれも読み取り構文を持っていません。それらの印刷構文は次のようになります '</target>
        </trans-unit>
        <trans-unit id="cf495fc305171d785ac263bbb756e22d29649431" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;fontset&lt;/em&gt; is a list of fonts, each assigned to a range of character codes. An individual font cannot display the whole range of characters that Emacs supports, but a fontset can. Fontsets have names, just as fonts do, and you can use a fontset name in place of a font name when you specify the font for a frame or a face. Here is information about defining a fontset under Lisp program control.</source>
          <target state="translated">&lt;em&gt;フォントセットは&lt;/em&gt;、フォント、文字コードの範囲に割り当てられた各のリストです。個々のフォントはEmacsがサポートする文字の全範囲を表示することはできませんが、フォントセットは表示できます。フォントセットには、フォントと同じように名前があり、フレームまたは面のフォントを指定するときに、フォント名の代わりにフォントセット名を使用できます。Lispプログラム制御下でのフォントセットの定義に関する情報は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="6e7ec63ccc23013db0bcf9c823a2170ba27b77ec" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;frame configuration&lt;/em&gt; records the current arrangement of frames, all their properties, and the window configuration of each one. (See &lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;Window Configurations&lt;/a&gt;.)</source>
          <target state="translated">&lt;em&gt;フレーム構成は&lt;/em&gt;フレーム、すべてのプロパティの現在の構成、およびそれぞれのウィンドウ構成を記録します。（&lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;ウィンドウ構成を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="bdb34f67e1e9ada804a26661b470461156464a32" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;frame configuration&lt;/em&gt; stores information about the positions, sizes, and contents of the windows in all frames. It is not a primitive type&amp;mdash;it is actually a list whose &lt;small&gt;CAR&lt;/small&gt; is &lt;code&gt;frame-configuration&lt;/code&gt; and whose &lt;small&gt;CDR&lt;/small&gt; is an alist. Each alist element describes one frame, which appears as the &lt;small&gt;CAR&lt;/small&gt; of that element.</source>
          <target state="translated">&lt;em&gt;フレーム構成の&lt;/em&gt;すべてのフレームのウィンドウの位置、大きさ、及び内容に関する情報を格納します。これはプリミティブ型ではありません。実際には、&lt;small&gt;CAR&lt;/small&gt;が &lt;code&gt;frame-configuration&lt;/code&gt; あり、&lt;small&gt;CDR&lt;/small&gt;がリストであるリストです。各alist要素は、その要素の&lt;small&gt;CAR&lt;/small&gt;として表示される1つのフレームを記述します。</target>
        </trans-unit>
        <trans-unit id="5332e8873c75bb7ff6085b71dc2c97ddd4c56866" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;frame&lt;/em&gt; is a screen area that contains one or more Emacs windows; we also use the term &amp;ldquo;frame&amp;rdquo; to refer to the Lisp object that Emacs uses to refer to the screen area.</source>
          <target state="translated">&lt;em&gt;フレームは、&lt;/em&gt;一つ以上のEmacsのウィンドウを含む画面領域です。また、「フレーム」という用語は、Emacsが画面領域を参照するために使用するLispオブジェクトを指すために使用します。</target>
        </trans-unit>
        <trans-unit id="7005fbe65ff98f53ff5b531201eb323a6292f93a" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;frame&lt;/em&gt; is a screen object that contains one or more Emacs windows (see &lt;a href=&quot;windows#Windows&quot;&gt;Windows&lt;/a&gt;). It is the kind of object called a &amp;ldquo;window&amp;rdquo; in the terminology of graphical environments; but we can&amp;rsquo;t call it a &amp;ldquo;window&amp;rdquo; here, because Emacs uses that word in a different way. In Emacs Lisp, a &lt;em&gt;frame object&lt;/em&gt; is a Lisp object that represents a frame on the screen. See &lt;a href=&quot;frame-type#Frame-Type&quot;&gt;Frame Type&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;フレームは、&lt;/em&gt;一の以上のEmacsウィンドウを含みます（画面オブジェクトである&lt;a href=&quot;windows#Windows&quot;&gt;Windowsの場合&lt;/a&gt;）。これは、グラフィック環境の用語で「ウィンドウ」と呼ばれる種類のオブジェクトです。しかし、Emacsはその単語を別の方法で使用しているため、ここではそれを「ウィンドウ」と呼ぶことはできません。 Emacs Lispでは、&lt;em&gt;フレームオブジェクト&lt;/em&gt;は画面上のフレームを表すLispオブジェクトです。&lt;a href=&quot;frame-type#Frame-Type&quot;&gt;フレームタイプを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f88eec5b56af18f140f7d22807ca47874dd75224" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;generalized variable&lt;/em&gt; or &lt;em&gt;place form&lt;/em&gt; is one of the many places in Lisp memory where values can be stored using the &lt;code&gt;setf&lt;/code&gt; macro (see &lt;a href=&quot;setting-generalized-variables#Setting-Generalized-Variables&quot;&gt;Setting Generalized Variables&lt;/a&gt;). The simplest place form is a regular Lisp variable. But the &lt;small&gt;CAR&lt;/small&gt;s and &lt;small&gt;CDR&lt;/small&gt;s of lists, elements of arrays, properties of symbols, and many other locations are also places where Lisp values get stored.</source>
          <target state="translated">&lt;em&gt;一般変数&lt;/em&gt;又は&lt;em&gt;場所フォームが&lt;/em&gt;値を使用して格納することができるLispのメモリ内の多くの場所の一つである &lt;code&gt;setf&lt;/code&gt; （参照マクロを&lt;a href=&quot;setting-generalized-variables#Setting-Generalized-Variables&quot;&gt;一般化変数の設定します&lt;/a&gt;）。最も単純な場所の形式は、通常のLisp変数です。しかし、リストの&lt;small&gt;CAR&lt;/small&gt;と&lt;small&gt;CDR&lt;/small&gt;、配列の要素、シンボルのプロパティ、および他の多くの場所も、Lisp値が格納される場所です。</target>
        </trans-unit>
        <trans-unit id="2e00b950f26582a69a82bcfeb353306eb48c749f" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;generator&lt;/em&gt; is a function that produces a potentially-infinite stream of values. Each time the function produces a value, it suspends itself and waits for a caller to request the next value.</source>
          <target state="translated">&lt;em&gt;発生器は、&lt;/em&gt;値の潜在的に無限のストリームを生成する機能です。関数が値を生成するたびに、関数はそれ自体を一時停止し、呼び出し元が次の値を要求するのを待ちます。</target>
        </trans-unit>
        <trans-unit id="9b2b0dd0e5a45f9158401409dcf1687cdf829136" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;global break condition&lt;/em&gt; stops execution when a specified condition is satisfied, no matter where that may occur. Edebug evaluates the global break condition at every stop point; if it evaluates to a non-&lt;code&gt;nil&lt;/code&gt; value, then execution stops or pauses depending on the execution mode, as if a breakpoint had been hit. If evaluating the condition gets an error, execution does not stop.</source>
          <target state="translated">&lt;em&gt;グローバルブレーク条件が&lt;/em&gt;指定された条件が満たされたときに実行を停止し、それが発生する可能性がどんなに。 Edebugは、すべての停止ポイントでグローバルブレーク条件を評価します。 &lt;code&gt;nil&lt;/code&gt; 以外の値と評価された場合、ブレークポイントに到達したかのように、実行モードに応じて実行が停止または一時停止します。条件の評価でエラーが発生しても、実行は停止しません。</target>
        </trans-unit>
        <trans-unit id="8f1a3403d60a9a41e86b1033af245da071e2841d" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;glyph&lt;/em&gt; is a graphical symbol which occupies a single character position on the screen. Each glyph is represented in Lisp as a &lt;em&gt;glyph code&lt;/em&gt;, which specifies a character and optionally a face to display it in (see &lt;a href=&quot;faces#Faces&quot;&gt;Faces&lt;/a&gt;). The main use of glyph codes is as the entries of display tables (see &lt;a href=&quot;display-tables#Display-Tables&quot;&gt;Display Tables&lt;/a&gt;). The following functions are used to manipulate glyph codes:</source>
          <target state="translated">&lt;em&gt;グリフは、&lt;/em&gt;画面上の単一の文字の位置を占めるグラフィカルシンボルです。各グリフはLispで&lt;em&gt;グリフコード&lt;/em&gt;として表され&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;グリフコード&lt;/em&gt;は、文字と、オプションでそれを表示する面を指定します（&lt;a href=&quot;faces#Faces&quot;&gt;Facesを&lt;/a&gt;参照）。グリフコードの主な用途は、表示テーブルのエントリの通りである（参照&lt;a href=&quot;display-tables#Display-Tables&quot;&gt;表示テーブル&lt;/a&gt;）。グリフコードを操作するには、次の関数を使用します。</target>
        </trans-unit>
        <trans-unit id="fc890b7a72b483efddff830ca6044d4db575c15e" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;hook&lt;/em&gt; is a variable where you can store a function or functions to be called on a particular occasion by an existing program. Emacs provides hooks for the sake of customization. Most often, hooks are set up in the init file (see &lt;a href=&quot;init-file#Init-File&quot;&gt;Init File&lt;/a&gt;), but Lisp programs can set them also. See &lt;a href=&quot;standard-hooks#Standard-Hooks&quot;&gt;Standard Hooks&lt;/a&gt;, for a list of some standard hook variables.</source>
          <target state="translated">&lt;em&gt;フックは&lt;/em&gt;、既存のプログラムによって特定の機会に呼び出される関数または関数を格納できる変数です。 Emacsはカスタマイズのためにフックを提供します。ほとんどの場合、フックはinitファイル（&lt;a href=&quot;init-file#Init-File&quot;&gt;Initファイルを&lt;/a&gt;参照）に設定されますが、Lispプログラムでも設定できます。参照&lt;a href=&quot;standard-hooks#Standard-Hooks&quot;&gt;標準フックを&lt;/a&gt;いくつかの標準的なフック変数のリストについては、。</target>
        </trans-unit>
        <trans-unit id="bffdbb4588347fb567343611aa24c24d8bc17385" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;key sequence&lt;/em&gt;, or &lt;em&gt;key&lt;/em&gt; for short, is a sequence of one or more input events that form a unit. Input events include characters, function keys, mouse actions, or system events external to Emacs, such as &lt;code&gt;iconify-frame&lt;/code&gt; (see &lt;a href=&quot;input-events#Input-Events&quot;&gt;Input Events&lt;/a&gt;). The Emacs Lisp representation for a key sequence is a string or vector. Unless otherwise stated, any Emacs Lisp function that accepts a key sequence as an argument can handle both representations.</source>
          <target state="translated">&lt;em&gt;キーシーケンス&lt;/em&gt;、または&lt;em&gt;キー&lt;/em&gt;短いためには、ユニットを形成する1つまたは複数の入力イベントのシーケンスです。入力イベントには、文字、ファンクションキー、マウスアクション、または &lt;code&gt;iconify-frame&lt;/code&gt; などのEmacs外部のシステムイベントが含まれます（&lt;a href=&quot;input-events#Input-Events&quot;&gt;入力イベントを&lt;/a&gt;参照）。キーシーケンスのEmacsLisp表現は文字列またはベクトルです。特に明記しない限り、引数としてキーシーケンスを受け入れるEmacs Lisp関数は、両方の表現を処理できます。</target>
        </trans-unit>
        <trans-unit id="b85988e0bf41dad4173ddd11ccf598cee7e5972e" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;keyboard macro&lt;/em&gt; is a canned sequence of input events that can be considered a command and made the definition of a key. The Lisp representation of a keyboard macro is a string or vector containing the events. Don&amp;rsquo;t confuse keyboard macros with Lisp macros (see &lt;a href=&quot;macros#Macros&quot;&gt;Macros&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;キーボードマクロは、&lt;/em&gt;コマンドとみなされ、キーの定義を行うことができる入力イベントの缶詰配列です。キーボードマクロのLisp表現は、イベントを含む文字列またはベクトルです。Lispのマクロと混同しないキーボードマクロを実行します（参照&lt;a href=&quot;macros#Macros&quot;&gt;マクロ&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="26289a3b7ffc5e23d66eaad1d2458be5aefdcf24" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;keymap&lt;/em&gt; maps keys typed by the user to commands. This mapping controls how the user&amp;rsquo;s command input is executed. A keymap is actually a list whose &lt;small&gt;CAR&lt;/small&gt; is the symbol &lt;code&gt;keymap&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;キーマップは、&lt;/em&gt;コマンドにユーザーが入力したキーをマッピングしています。このマッピングは、ユーザーのコマンド入力の実行方法を制御します。キーマップは、実際には&lt;small&gt;CAR&lt;/small&gt;がシンボル &lt;code&gt;keymap&lt;/code&gt; であるリストです。</target>
        </trans-unit>
        <trans-unit id="84844081aae365d9d0de9b26a33a808ddac23b71" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;list&lt;/em&gt; is a series of cons cells, linked together so that the &lt;small&gt;CDR&lt;/small&gt; slot of each cons cell holds either the next cons cell or the empty list. The empty list is actually the symbol &lt;code&gt;nil&lt;/code&gt;. See &lt;a href=&quot;lists#Lists&quot;&gt;Lists&lt;/a&gt;, for details. Because most cons cells are used as part of lists, we refer to any structure made out of cons cells as a &lt;em&gt;list structure&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;リストは&lt;/em&gt;コンス・セルの直列、一緒になるように連結されている&lt;small&gt;CDRの&lt;/small&gt;各コンスセルのスロットは次のコンスセルまたは空のリストのいずれかを保持しています。空のリストは実際には記号 &lt;code&gt;nil&lt;/code&gt; です。詳細については、&lt;a href=&quot;lists#Lists&quot;&gt;リスト&lt;/a&gt;を参照してください。ほとんどのconsセルはリストの一部として使用されるため、consセルで作成された&lt;em&gt;構造をリスト構造&lt;/em&gt;と呼びます。</target>
        </trans-unit>
        <trans-unit id="af9d5be7310bdf986a613a593c3dd63f8b5a68a2" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;list&lt;/em&gt; represents a sequence of zero or more elements (which may be any Lisp objects). The important difference between lists and vectors is that two or more lists can share part of their structure; in addition, you can insert or delete elements in a list without copying the whole list.</source>
          <target state="translated">&lt;em&gt;リストは、&lt;/em&gt;（任意のLispオブジェクトであってもよい）は、ゼロ又はそれ以上の要素の配列を表します。リストとベクターの重要な違いは、2つ以上のリストがそれらの構造の一部を共有できることです。さらに、リスト全体をコピーせずに、リスト内の要素を挿入または削除できます。</target>
        </trans-unit>
        <trans-unit id="caf235f1847f4378a02cdfbd452659a1c4694aa0" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;live frame&lt;/em&gt; is one that has not been deleted. When a frame is deleted, it is removed from its terminal display, although it may continue to exist as a Lisp object until there are no more references to it.</source>
          <target state="translated">&lt;em&gt;ライブフレームは&lt;/em&gt;削除されていないものです。フレームが削除されると、そのフレームはターミナルディスプレイから削除されますが、フレームへの参照がなくなるまでLispオブジェクトとして存在し続ける可能性があります。</target>
        </trans-unit>
        <trans-unit id="8066ef771ec62ca85e2f184cfbffda7ebe217837" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;live window&lt;/em&gt; is one that is actually displaying a buffer in a frame.</source>
          <target state="translated">&lt;em&gt;ライブウィンドウには、&lt;/em&gt;実際にフレームバッファを表示しているものです。</target>
        </trans-unit>
        <trans-unit id="27e69c5bbb12137e4e756c6d8a53777154a45869" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;mapping function&lt;/em&gt; applies a given function (&lt;em&gt;not&lt;/em&gt; a special form or macro) to each element of a list or other collection. Emacs Lisp has several such functions; this section describes &lt;code&gt;mapcar&lt;/code&gt;, &lt;code&gt;mapc&lt;/code&gt;, &lt;code&gt;mapconcat&lt;/code&gt;, and &lt;code&gt;mapcan&lt;/code&gt;, which map over a list. See &lt;a href=&quot;creating-symbols#Definition-of-mapatoms&quot;&gt;Definition of mapatoms&lt;/a&gt;, for the function &lt;code&gt;mapatoms&lt;/code&gt; which maps over the symbols in an obarray. See &lt;a href=&quot;hash-access#Definition-of-maphash&quot;&gt;Definition of maphash&lt;/a&gt;, for the function &lt;code&gt;maphash&lt;/code&gt; which maps over key/value associations in a hash table.</source>
          <target state="translated">&lt;em&gt;マッピング関数は、&lt;/em&gt;指定された機能（適用さ&lt;em&gt;れない&lt;/em&gt;リストまたは他のコレクションの各要素に対して特別な形式またはマクロ）。EmacsLispにはそのような機能がいくつかあります。このセクションでは、リスト上にマップする &lt;code&gt;mapcar&lt;/code&gt; 、 &lt;code&gt;mapc&lt;/code&gt; 、 &lt;code&gt;mapconcat&lt;/code&gt; 、および &lt;code&gt;mapcan&lt;/code&gt; について説明します。obarray内のシンボルにマップする関数 &lt;code&gt;mapatoms&lt;/code&gt; については&lt;a href=&quot;creating-symbols#Definition-of-mapatoms&quot;&gt;、mapatomsの定義を&lt;/a&gt;参照してください。ハッシュテーブル内のキー/値の関連付けをマッピングする関数 &lt;code&gt;maphash&lt;/code&gt; については&lt;a href=&quot;hash-access#Definition-of-maphash&quot;&gt;、maphashの定義を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a9ae386e3e011cfcbc753bf66f2b7dc0fabd4c7d" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;marker&lt;/em&gt; denotes a position in a specific buffer. Markers therefore have two components: one for the buffer, and one for the position. Changes in the buffer&amp;rsquo;s text automatically relocate the position value as necessary to ensure that the marker always points between the same two characters in the buffer.</source>
          <target state="translated">&lt;em&gt;マーカーは&lt;/em&gt;、特定のバッファ内の位置を示します。したがって、マーカーには2つのコンポーネントがあります。1つはバッファー用、もう1つは位置用です。バッファのテキストを変更すると、必要に応じて位置の値が自動的に再配置され、マーカーが常にバッファ内の同じ2文字の間にあるようになります。</target>
        </trans-unit>
        <trans-unit id="10866be02ee509421064f62cfd0967bae1b9827e" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;marker&lt;/em&gt; is a Lisp object used to specify a position in a buffer relative to the surrounding text. A marker changes its offset from the beginning of the buffer automatically whenever text is inserted or deleted, so that it stays with the two characters on either side of it.</source>
          <target state="translated">&lt;em&gt;マーカーは、&lt;/em&gt;周囲のテキストをバッファに相対位置を指定するために使用されるLispのオブジェクトです。マーカーは、テキストが挿入または削除されるたびにバッファーの先頭からのオフセットを自動的に変更するため、マーカーの両側に2文字が残ります。</target>
        </trans-unit>
        <trans-unit id="c40b04bfc88c42dd334dd169fa41966183de182f" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;meta character&lt;/em&gt; is a character typed with the</source>
          <target state="translated">&lt;em&gt;メタ文字は&lt;/em&gt;でタイプされた文字です</target>
        </trans-unit>
        <trans-unit id="23a7fef4af90e3b0c9cafbdf008ce03197ab4053" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;minibuffer history list&lt;/em&gt; records previous minibuffer inputs so the user can reuse them conveniently. It is a variable whose value is a list of strings (previous inputs), most recent first.</source>
          <target state="translated">&lt;em&gt;ミニバッファ履歴リストには&lt;/em&gt;、ユーザーが便利にそれらを再利用することができるように、以前のミニバッファ入力を記録します。これは、値が文字列（前の入力）のリストであり、最新のものが最初である変数です。</target>
        </trans-unit>
        <trans-unit id="a3c74914ae7bc9ba19ba505460ec3639d41b6d29" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;minibuffer&lt;/em&gt; is a special buffer that Emacs commands use to read arguments more complicated than the single numeric prefix argument. These arguments include file names, buffer names, and command names (as in</source>
          <target state="translated">&lt;em&gt;ミニバッファは&lt;/em&gt;Emacsのコマンドは、複数の単一数値接頭引数よりも複雑な引数を読み取るために使用することを特別なバッファです。これらの引数には、ファイル名、バッファー名、およびコマンド名が含まれます（</target>
        </trans-unit>
        <trans-unit id="095e352a513e7437f83cc3f2d00b1c1af9e83004" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;minor mode&lt;/em&gt; provides optional features that users may enable or disable independently of the choice of major mode. Minor modes can be enabled individually or in combination.</source>
          <target state="translated">&lt;em&gt;マイナーモードは&lt;/em&gt;、ユーザーが独立してメジャーモードの選択の有効化または無効化するというオプション機能を提供します。マイナーモードは、個別に、または組み合わせて有効にできます。</target>
        </trans-unit>
        <trans-unit id="35acaca11349cdd41823945ec417fac0c53cf91f" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;mode&lt;/em&gt; is a set of definitions that customize Emacs behavior in useful ways. There are two varieties of modes: &lt;em&gt;minor modes&lt;/em&gt;, which provide features that users can turn on and off while editing; and &lt;em&gt;major modes&lt;/em&gt;, which are used for editing or interacting with a particular kind of text. Each buffer has exactly one &lt;em&gt;major mode&lt;/em&gt; at a time.</source>
          <target state="translated">&lt;em&gt;モードは&lt;/em&gt;便利な方法でEmacsの動作をカスタマイズ定義のセットです。モードには2つの種類があります。&lt;em&gt;マイナーモード&lt;/em&gt;。ユーザーが編集中にオンとオフを切り替えることができる機能を提供します。そして&lt;em&gt;メジャーモード&lt;/em&gt;編集またはテキストの特定の種類と相互作用するために使用されます。各バッファには、一度に1つの&lt;em&gt;メジャーモードがあります&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="37b921e8300edb8a842bf43a173edf00518feefd" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;mutex&lt;/em&gt; is an exclusive lock that threads can own and disown, in order to synchronize between them. See &lt;a href=&quot;mutexes#Mutexes&quot;&gt;Mutexes&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;ミューテックスは&lt;/em&gt;スレッドがそれらの間で同期させるためには、所有して否認できるという排他ロックです。&lt;a href=&quot;mutexes#Mutexes&quot;&gt;ミューテックスを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4830aeeb1a3770ba82e4cfc3244dd0ec52cad099" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;mutex&lt;/em&gt; is an exclusive lock. At any moment, zero or one threads may own a mutex. If a thread attempts to acquire a mutex, and the mutex is already owned by some other thread, then the acquiring thread will block until the mutex becomes available.</source>
          <target state="translated">&lt;em&gt;ミューテックスは&lt;/em&gt;排他ロックです。いつでも、0個または1個のスレッドがミューテックスを所有している可能性があります。スレッドがミューテックスを取得しようとし、そのミューテックスがすでに他のスレッドによって所有されている場合、取得するスレッドはミューテックスが使用可能になるまでブロックします。</target>
        </trans-unit>
        <trans-unit id="dc0c42a6c93823ee7b58dbe26d1a5b8cff167d34" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;nonlocal exit&lt;/em&gt; is a transfer of control from one point in a program to another remote point. Nonlocal exits can occur in Emacs Lisp as a result of errors; you can also use them under explicit control. Nonlocal exits unbind all variable bindings made by the constructs being exited.</source>
          <target state="translated">&lt;em&gt;非ローカル出口が&lt;/em&gt;別の遠隔点にプログラムにおける一点からの制御の移転です。エラーの結果として、EmacsLispで非ローカル出口が発生する可能性があります。明示的な制御の下でそれらを使用することもできます。非ローカル出口は、出口にある構成によって作成されたすべての変数バインディングのバインドを解除します。</target>
        </trans-unit>
        <trans-unit id="5e377035dc909cd277170acf67398e48b68c8bcc" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;parser state&lt;/em&gt; is a list of (currently) eleven elements describing the state of the syntactic parser, after it parses the text between a specified starting point and a specified end point in the buffer using &lt;code&gt;parse-partial-sexp&lt;/code&gt; (see &lt;a href=&quot;low_002dlevel-parsing#Low_002dLevel-Parsing&quot;&gt;Low-Level Parsing&lt;/a&gt;). Parsing functions such as &lt;code&gt;syntax-ppss&lt;/code&gt; (see &lt;a href=&quot;position-parse#Position-Parse&quot;&gt;Position Parse&lt;/a&gt;) also return a parser state as the value. &lt;code&gt;parse-partial-sexp&lt;/code&gt; can accept a parser state as an argument, for resuming parsing.</source>
          <target state="translated">&lt;em&gt;パーサ状態は&lt;/em&gt;、それが指定した開始点と使用してバッファ内の指定されたエンドポイント間のテキスト解析した後に、構文パーサの状態を説明する（現在）11個の要素のリストである &lt;code&gt;parse-partial-sexp&lt;/code&gt; （参照&lt;a href=&quot;low_002dlevel-parsing#Low_002dLevel-Parsing&quot;&gt;低レベル解析&lt;/a&gt;）。 &lt;code&gt;syntax-ppss&lt;/code&gt; （&lt;a href=&quot;position-parse#Position-Parse&quot;&gt;Position Parseを&lt;/a&gt;参照）などの解析関数も、パーサーの状態を値として返します。 &lt;code&gt;parse-partial-sexp&lt;/code&gt; は、解析を再開するための引数としてパーサー状態を受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="99955a994ed6a1f18590cbdc73cecfc8216312e7" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;position&lt;/em&gt; is the index of a character in the text of a buffer. More precisely, a position identifies the place between two characters (or before the first character, or after the last character), so we can speak of the character before or after a given position. However, we often speak of the character &amp;ldquo;at&amp;rdquo; a position, meaning the character after that position.</source>
          <target state="translated">&lt;em&gt;位置は&lt;/em&gt;、バッファのテキスト内の文字のインデックスです。より正確には、位置は2つの文字の間（または最初の文字の前、または最後の文字の後）の場所を識別するため、特定の位置の前後の文字について話すことができます。ただし、ある位置にある文字、つまりその位置の後の文字についてよく話します。</target>
        </trans-unit>
        <trans-unit id="acbb40f52f0ff6871e2319c0abae324c32608028" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;prefix key&lt;/em&gt; is a key sequence whose binding is a keymap. The keymap defines what to do with key sequences that extend the prefix key. For example,</source>
          <target state="translated">&lt;em&gt;プレフィックスキーは、&lt;/em&gt;その結合キーマップであるキーシーケンスです。キーマップは、プレフィックスキーを拡張するキーシーケンスをどう処理するかを定義します。例えば、</target>
        </trans-unit>
        <trans-unit id="a750851ed6b490138262266435560c5f1eb8ffec" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;pretty-printer&lt;/em&gt; function which is responsible for inserting the textual representation of a data element value into the current buffer.</source>
          <target state="translated">&lt;em&gt;プリティプリンタの&lt;/em&gt;現在のバッファへのデータ要素の値のテキスト表現を挿入する必要がある機能。</target>
        </trans-unit>
        <trans-unit id="ef7d6b5d68eeef2c9d56f4de3848bbbf8c671fb9" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;primitive function&lt;/em&gt; is a function callable from Lisp but written in the C programming language. Primitive functions are also called &lt;em&gt;subrs&lt;/em&gt; or &lt;em&gt;built-in functions&lt;/em&gt;. (The word &amp;ldquo;subr&amp;rdquo; is derived from &amp;ldquo;subroutine&amp;rdquo;.) Most primitive functions evaluate all their arguments when they are called. A primitive function that does not evaluate all its arguments is called a &lt;em&gt;special form&lt;/em&gt; (see &lt;a href=&quot;special-forms#Special-Forms&quot;&gt;Special Forms&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;原始関数は&lt;/em&gt;Lispの関数から呼び出し可能であるが、Cプログラミング言語で書かれました。プリミティブ関数は、&lt;em&gt;subrs&lt;/em&gt;または&lt;em&gt;組み込み&lt;/em&gt;関数とも呼ば&lt;em&gt;れます&lt;/em&gt;。 （「subr」という単語は「subroutine」から派生しています。）ほとんどのプリミティブ関数は、呼び出されたときにすべての引数を評価します。すべての引数を評価しないプリミティブ関数は、&lt;em&gt;特殊フォーム&lt;/em&gt;と呼ばれます（&lt;a href=&quot;special-forms#Special-Forms&quot;&gt;特殊フォームを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="92dd79b41e8cbe4e517fdbda3429d77589653c7a" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;process sentinel&lt;/em&gt; is a function that is called whenever the associated process changes status for any reason, including signals (whether sent by Emacs or caused by the process&amp;rsquo;s own actions) that terminate, stop, or continue the process. The process sentinel is also called if the process exits. The sentinel receives two arguments: the process for which the event occurred, and a string describing the type of event.</source>
          <target state="translated">&lt;em&gt;プロセスセンチネルは&lt;/em&gt;、終了停止、またはプロセスを継続関連するプロセスは、（Emacsが送信されるか、またはプロセス自身の行動によって引き起こされるかどうか）信号を含む、何らかの理由でステータスを変更するたびに呼び出される関数です。プロセスが終了すると、プロセスセンチネルも呼び出されます。番兵は、イベントが発生したプロセスと、イベントのタイプを説明する文字列の2つの引数を受け取ります。</target>
        </trans-unit>
        <trans-unit id="12f51ef3151fa4e8e2f32edf93c5a003ab590ef1" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;property list&lt;/em&gt; (&lt;em&gt;plist&lt;/em&gt; for short) is a list of paired elements. Each of the pairs associates a property name (usually a symbol) with a property or value. Here is an example of a property list:</source>
          <target state="translated">&lt;em&gt;プロパティリスト&lt;/em&gt;（&lt;em&gt;plistの&lt;/em&gt;ショート用）ペア要素のリストです。各ペアは、プロパティ名（通常はシンボル）をプロパティまたは値に関連付けます。プロパティリストの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="52b2b067c403f7f587744597ed1ab1d8466917e9" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;record&lt;/em&gt; is much like a &lt;code&gt;vector&lt;/code&gt;. However, the first element is used to hold its type as returned by &lt;code&gt;type-of&lt;/code&gt;. The purpose of records is to allow programmers to create objects with new types that are not built into Emacs.</source>
          <target state="translated">&lt;em&gt;レコードには、&lt;/em&gt;多くのようである &lt;code&gt;vector&lt;/code&gt; 。ただし、最初の要素は、 &lt;code&gt;type-of&lt;/code&gt; によって返されるタイプを保持するために使用されます。レコードの目的は、プログラマーがEmacsに組み込まれていない新しいタイプのオブジェクトを作成できるようにすることです。</target>
        </trans-unit>
        <trans-unit id="ac904311c71c6650010f4b866dec5796be0375e1" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;regular expression&lt;/em&gt;, or &lt;em&gt;regexp&lt;/em&gt; for short, is a pattern that denotes a (possibly infinite) set of strings. Searching for matches for a regexp is a very powerful operation. This section explains how to write regexps; the following section says how to search for them.</source>
          <target state="translated">&lt;em&gt;正規表現&lt;/em&gt;、または&lt;em&gt;正規表現&lt;/em&gt;短いためには、文字列の（おそらく無限の）集合を示すパターンです。正規表現の一致を検索することは、非常に強力な操作です。このセクションでは、正規表現の記述方法について説明します。次のセクションでは、それらを検索する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="340faeff4ade281880a3cb6ca1e42a0487f388d4" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;ring&lt;/em&gt; is a fixed-size data structure that supports insertion, deletion, rotation, and modulo-indexed reference and traversal. An efficient ring data structure is implemented by the &lt;code&gt;ring&lt;/code&gt; package. It provides the functions listed in this section.</source>
          <target state="translated">&lt;em&gt;リングは&lt;/em&gt;、挿入、削除、回転、およびモジュロ・インデックス付きの参照とトラバーサルをサポートし、固定サイズのデータ構造です。効率的なリングデータ構造は、 &lt;code&gt;ring&lt;/code&gt; パッケージによって実装されます。このセクションにリストされている機能を提供します。</target>
        </trans-unit>
        <trans-unit id="68107fbcb19dcf923ea627fb36416c892f961e00" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;self-evaluating form&lt;/em&gt; is any form that is not a list or symbol. Self-evaluating forms evaluate to themselves: the result of evaluation is the same object that was evaluated. Thus, the number 25 evaluates to 25, and the string &lt;code&gt;&quot;foo&quot;&lt;/code&gt; evaluates to the string &lt;code&gt;&quot;foo&quot;&lt;/code&gt;. Likewise, evaluating a vector does not cause evaluation of the elements of the vector&amp;mdash;it returns the same vector with its contents unchanged.</source>
          <target state="translated">&lt;em&gt;自己評価フォームは、&lt;/em&gt;リストやシンボルではありません任意の形式です。自己評価フォームはそれ自体に評価されます。評価の結果は、評価されたものと同じオブジェクトです。このように、数25から25まで評価され、文字列 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; 文字列に評価する &lt;code&gt;&quot;foo&quot;&lt;/code&gt; 。同様に、ベクトルを評価しても、ベクトルの要素は評価されません。内容が変更されていない同じベクトルが返されます。</target>
        </trans-unit>
        <trans-unit id="97affbde2ffa12c383f5a977599a31f30dc833c5" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;sequence&lt;/em&gt; is a Lisp object that represents an ordered set of elements. There are two kinds of sequence in Emacs Lisp: &lt;em&gt;lists&lt;/em&gt; and &lt;em&gt;arrays&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;配列は、&lt;/em&gt;要素の順序付けられた集合を表すLispのオブジェクトです。Emacs Lispに&lt;em&gt;は&lt;/em&gt;、&lt;em&gt;リスト&lt;/em&gt;と&lt;em&gt;配列の&lt;/em&gt;2種類のシーケンスがあり&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="568827dac526a47b39447d6b276556cfd23968d9" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;sequencing pattern&lt;/em&gt; (also known as &lt;var&gt;seqpat&lt;/var&gt;) is a pattern that processes its sub-pattern arguments in sequence. There are two for &lt;code&gt;pcase&lt;/code&gt;: &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt;. They behave in a similar manner to the special forms that share their name (see &lt;a href=&quot;combining-conditions#Combining-Conditions&quot;&gt;Combining Conditions&lt;/a&gt;), but instead of processing values, they process sub-patterns.</source>
          <target state="translated">&lt;em&gt;シークエンシングパターン&lt;/em&gt;（としても知ら &lt;var&gt;seqpat&lt;/var&gt; は）配列中のそのサブパターンの引数を処理するパターンです。 &lt;code&gt;pcase&lt;/code&gt; には2つあります： &lt;code&gt;and&lt;/code&gt; および &lt;code&gt;or&lt;/code&gt; 。これらは、名前を共有する特殊なフォームと同じように動作しますが（&lt;a href=&quot;combining-conditions#Combining-Conditions&quot;&gt;条件の組み合わせを&lt;/a&gt;参照）、値を処理する代わりに、サブパターンを処理します。</target>
        </trans-unit>
        <trans-unit id="44ce679751e6da1d1f8b12e72ba46761e9428d8c" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;special form&lt;/em&gt; is a primitive function specially marked so that its arguments are not all evaluated. Most special forms define control structures or perform variable bindings&amp;mdash;things which functions cannot do.</source>
          <target state="translated">&lt;em&gt;特殊な形式は、&lt;/em&gt;その引数が全て評価されないように、特別にマークされ原始関数です。ほとんどの特殊な形式は、制御構造を定義したり、変数のバインドを実行したりします。これは、関数では実行できないことです。</target>
        </trans-unit>
        <trans-unit id="b859c57965a012d5104743eca8f2d1fc761af942" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;specification list&lt;/em&gt; is required for an Edebug specification if some arguments of a macro call are evaluated while others are not. Some elements in a specification list match one or more arguments, but others modify the processing of all following elements. The latter, called &lt;em&gt;specification keywords&lt;/em&gt;, are symbols beginning with &amp;lsquo;</source>
          <target state="translated">&lt;em&gt;指定リストは&lt;/em&gt;他の人ではないながら、マクロ呼び出しのいくつかの引数が評価されている場合のEdebug仕様のために必要です。仕様リストの一部の要素は1つ以上の引数に一致しますが、他の要素は後続のすべての要素の処理を変更します。後者は&lt;em&gt;仕様キーワード&lt;/em&gt;と呼ばれ、 'で始まる記号です。</target>
        </trans-unit>
        <trans-unit id="21fe5cc3e8db4633a353ec7b1907c0b1a22bd112" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;stream&lt;/em&gt; is an object that can be used as a source or sink for characters&amp;mdash;either to supply characters for input or to accept them as output. Many different types can be used this way: markers, buffers, strings, and functions. Most often, input streams (character sources) obtain characters from the keyboard, a buffer, or a file, and output streams (character sinks) send characters to a buffer, such as a</source>
          <target state="translated">&lt;em&gt;ストリームは、&lt;/em&gt;文字、いずれかの入力のために文字を供給したり、出力としてそれらを受け入れるためのソース又はシンクとして使用することができるオブジェクトです。この方法では、マーカー、バッファー、文字列、関数など、さまざまなタイプを使用できます。ほとんどの場合、入力ストリーム（文字ソース）はキーボード、バッファー、またはファイルから文字を取得し、出力ストリーム（文字シンク）は文字を次のようなバッファーに送信します。</target>
        </trans-unit>
        <trans-unit id="96f59884a848b92e2675f99c9b833d4b90e7cca7" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;string&lt;/em&gt; is an array of characters. Strings are used for many purposes in Emacs, as can be expected in a text editor; for example, as the names of Lisp symbols, as messages for the user, and to represent text extracted from buffers. Strings in Lisp are constants: evaluation of a string returns the same string.</source>
          <target state="translated">&lt;em&gt;文字列は&lt;/em&gt;文字の配列です。テキストエディタで期待できるように、文字列はEmacsで多くの目的に使用されます。たとえば、Lispシンボルの名前として、ユーザーへのメッセージとして、そしてバッファから抽出されたテキストを表すために。Lispの文字列は定数です。文字列を評価すると同じ文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="0d072ef54b4cc522b35609148bc97bd4b7293a8a" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;symbol&lt;/em&gt; in GNU Emacs Lisp is an object with a name. The symbol name serves as the printed representation of the symbol. In ordinary Lisp use, with one single obarray (see &lt;a href=&quot;creating-symbols#Creating-Symbols&quot;&gt;Creating Symbols&lt;/a&gt;), a symbol&amp;rsquo;s name is unique&amp;mdash;no two symbols have the same name.</source>
          <target state="translated">&lt;em&gt;シンボル&lt;/em&gt;GNU Emacs Lispのは、名前を持つオブジェクトです。シンボル名は、シンボルの印刷表現として機能します。通常のLispの使用では、単一のobarray（&lt;a href=&quot;creating-symbols#Creating-Symbols&quot;&gt;シンボルの作成を&lt;/a&gt;参照）では、シンボルの名前は一意です。2つのシンボルが同じ名前を持つことはありません。</target>
        </trans-unit>
        <trans-unit id="5c76bc331660adccd694734fdd974e80b6b3ec0b" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;symbol&lt;/em&gt; is an object with a unique name. This chapter describes symbols, their components, their property lists, and how they are created and interned. Separate chapters describe the use of symbols as variables and as function names; see &lt;a href=&quot;variables#Variables&quot;&gt;Variables&lt;/a&gt;, and &lt;a href=&quot;functions#Functions&quot;&gt;Functions&lt;/a&gt;. For the precise read syntax for symbols, see &lt;a href=&quot;symbol-type#Symbol-Type&quot;&gt;Symbol Type&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;シンボルは、&lt;/em&gt;一意の名前を持つオブジェクトです。この章では、シンボル、そのコンポーネント、プロパティリスト、およびそれらの作成方法とインターン方法について説明します。別の章では、変数および関数名としてのシンボルの使用について説明しています。&lt;a href=&quot;variables#Variables&quot;&gt;変数&lt;/a&gt;および&lt;a href=&quot;functions#Functions&quot;&gt;関数を&lt;/a&gt;参照してください。シンボルの正確な読み取り構文については、&lt;a href=&quot;symbol-type#Symbol-Type&quot;&gt;シンボルタイプを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b20ef7f5f1b7eef351ff780dde60d61921f5757e" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;syntax descriptor&lt;/em&gt; is a Lisp string that describes the syntax class and other syntactic properties of a character. When you want to modify the syntax of a character, that is done by calling the function &lt;code&gt;modify-syntax-entry&lt;/code&gt; and passing a syntax descriptor as one of its arguments (see &lt;a href=&quot;syntax-table-functions#Syntax-Table-Functions&quot;&gt;Syntax Table Functions&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;構文記述子は、&lt;/em&gt;構文クラスや文字の他の構文上の特性を記述するLispの文字列です。文字の構文を変更する場合は、関数 &lt;code&gt;modify-syntax-entry&lt;/code&gt; を呼び出し、その引数の1つとして構文記述子を渡します（&lt;a href=&quot;syntax-table-functions#Syntax-Table-Functions&quot;&gt;構文テーブル関数を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="3a870e4ec1d3cf44e7dab053db3f22b7cb521b55" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;syntax table&lt;/em&gt; specifies the syntactic role of each character in a buffer. It can be used to determine where words, symbols, and other syntactic constructs begin and end. This information is used by many Emacs facilities, including Font Lock mode (see &lt;a href=&quot;font-lock-mode#Font-Lock-Mode&quot;&gt;Font Lock Mode&lt;/a&gt;) and the various complex movement commands (see &lt;a href=&quot;motion#Motion&quot;&gt;Motion&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;構文テーブルは、&lt;/em&gt;バッファ内の各文字の構文上の役割を指定します。単語、記号、およびその他の構文構造が開始および終了する場所を判別するために使用できます。この情報は、フォントロックモード（&lt;a href=&quot;font-lock-mode#Font-Lock-Mode&quot;&gt;フォントロックモードを&lt;/a&gt;参照）やさまざまな複雑な移動コマンド（&lt;a href=&quot;motion#Motion&quot;&gt;モーションを&lt;/a&gt;参照）など、多くのEmacs機能で使用されます。</target>
        </trans-unit>
        <trans-unit id="99b87789bc8b75b81e830bdef55dad68ee43fcaa" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;terminal&lt;/em&gt; is a device capable of displaying one or more Emacs frames (see &lt;a href=&quot;frame-type#Frame-Type&quot;&gt;Frame Type&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;端末は、&lt;/em&gt;一の以上のEmacsフレーム（参照表示することができる装置である&lt;a href=&quot;frame-type#Frame-Type&quot;&gt;フレームタイプを&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="fc674df13ab428b273ec26c0dd720fcddbf5cf41" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;terminal&lt;/em&gt; is a display device capable of displaying one or more Emacs frames. In Emacs Lisp, a &lt;em&gt;terminal object&lt;/em&gt; is a Lisp object that represents a terminal. See &lt;a href=&quot;terminal-type#Terminal-Type&quot;&gt;Terminal Type&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;端末は、&lt;/em&gt;一つ以上のEmacsのフレームを表示可能な表示装置です。Emacs Lispでは、&lt;em&gt;ターミナルオブジェクト&lt;/em&gt;は&lt;em&gt;ターミナル&lt;/em&gt;を表すLispオブジェクトです。&lt;a href=&quot;terminal-type#Terminal-Type&quot;&gt;ターミナルタイプを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="59e631708c8fbabe8339a1ca817ba7c237c89147" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;thread&lt;/em&gt; in Emacs represents a separate thread of Emacs Lisp execution. It runs its own Lisp program, has its own current buffer, and can have subprocesses locked to it, i.e. subprocesses whose output only this thread can accept. See &lt;a href=&quot;threads#Threads&quot;&gt;Threads&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;スレッド&lt;/em&gt;のEmacsには、Emacs Lispの実行の別のスレッドを表します。独自のLispプログラムを実行し、独自の現在のバッファを持ち、それにロックされたサブプロセス、つまりこのスレッドのみが出力を受け入れることができるサブプロセスを持つことができます。&lt;a href=&quot;threads#Threads&quot;&gt;スレッドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5c2cf5a995b49c827b5d22748c933ccd1cf7a468" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;toggle&lt;/em&gt; is a menu item which is labeled as either on or off according to the value of &lt;var&gt;selected&lt;/var&gt;. The command itself should toggle &lt;var&gt;selected&lt;/var&gt;, setting it to &lt;code&gt;t&lt;/code&gt; if it is &lt;code&gt;nil&lt;/code&gt;, and to &lt;code&gt;nil&lt;/code&gt; if it is &lt;code&gt;t&lt;/code&gt;. Here is how the menu item to toggle the &lt;code&gt;debug-on-error&lt;/code&gt; flag is defined:</source>
          <target state="translated">&lt;em&gt;トグルは&lt;/em&gt;オンまたはの値に応じてオフのいずれかとしてラベル付けされているメニュー項目で &lt;var&gt;selected&lt;/var&gt; 。コマンド自体は、 &lt;var&gt;selected&lt;/var&gt; を切り替えて、 &lt;code&gt;nil&lt;/code&gt; の場合は &lt;code&gt;t&lt;/code&gt; に設定し、 &lt;code&gt;t&lt;/code&gt; の場合は &lt;code&gt;nil&lt;/code&gt; に設定する必要があります。 &lt;code&gt;debug-on-error&lt;/code&gt; フラグを切り替えるメニュー項目の定義方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="fcd1859232eb3fd90a12024f85384e7d8dc9e40a" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;tool bar&lt;/em&gt; is a row of clickable icons at the top of a frame, just below the menu bar. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Tool-Bars.html#Tool-Bars&quot;&gt;Tool Bars&lt;/a&gt; in</source>
          <target state="translated">&lt;em&gt;ツールバーは、&lt;/em&gt;メニューバーのすぐ下に、フレームの上部にクリック可能なアイコンの行です。参照してください。&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Tool-Bars.html#Tool-Bars&quot;&gt;ツールバーを&lt;/a&gt;中</target>
        </trans-unit>
        <trans-unit id="dcf23c2364e9a64ec7b2fbca8a8b877bcb33dd05" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;translation table&lt;/em&gt; is a char-table (see &lt;a href=&quot;char_002dtables#Char_002dTables&quot;&gt;Char-Tables&lt;/a&gt;) that specifies a mapping of characters into characters. These tables are used in encoding and decoding, and for other purposes. Some coding systems specify their own particular translation tables; there are also default translation tables which apply to all other coding systems.</source>
          <target state="translated">&lt;em&gt;変換テーブルは、&lt;/em&gt;（参照文字テーブルである&lt;a href=&quot;char_002dtables#Char_002dTables&quot;&gt;文字テーブルを&lt;/a&gt;文字に文字のマッピングを指定します）。これらのテーブルは、エンコードとデコード、およびその他の目的で使用されます。一部のコーディングシステムは、独自の特定の変換テーブルを指定します。他のすべてのコーディングシステムに適用されるデフォルトの変換テーブルもあります。</target>
        </trans-unit>
        <trans-unit id="4e4b7c57666cacb5044a47b639cb9e52a3cc5602" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;type descriptor&lt;/em&gt; is a &lt;code&gt;record&lt;/code&gt; which holds information about a type. Slot 1 in the record must be a symbol naming the type, and &lt;code&gt;type-of&lt;/code&gt; relies on this to return the type of &lt;code&gt;record&lt;/code&gt; objects. No other type descriptor slot is used by Emacs; they are free for use by Lisp extensions.</source>
          <target state="translated">&lt;em&gt;型記述子が&lt;/em&gt;ある &lt;code&gt;record&lt;/code&gt; タイプについての情報を保持しています。レコードのスロット1は、タイプを指定するシンボルである必要があり、 &lt;code&gt;type-of&lt;/code&gt; は、これに依存して &lt;code&gt;record&lt;/code&gt; オブジェクトのタイプを返します。Emacsは他のタイプ記述子スロットを使用しません。Lisp拡張機能で無料で使用できます。</target>
        </trans-unit>
        <trans-unit id="cf4c3266ea964fd1cade86b02fc7862eb97f6b90" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;valid window&lt;/em&gt; is one that is either live or internal. A valid window can be &lt;em&gt;deleted&lt;/em&gt;, i.e., removed from its frame (see &lt;a href=&quot;deleting-windows#Deleting-Windows&quot;&gt;Deleting Windows&lt;/a&gt;); then it is no longer valid, but the Lisp object representing it might be still referenced from other Lisp objects. A deleted window may be made valid again by restoring a saved window configuration (see &lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;Window Configurations&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;有効なウィンドウは&lt;/em&gt;、ライブまたは内部のいずれかであるものです。有効なウィンドウを&lt;em&gt;削除する&lt;/em&gt;、つまりフレームから&lt;em&gt;削除&lt;/em&gt;することができます（ウィンドウの&lt;a href=&quot;deleting-windows#Deleting-Windows&quot;&gt;削除を&lt;/a&gt;参照）。その場合、それはもはや有効ではありませんが、それを表すLispオブジェクトは他のLispオブジェクトから参照されている可能性があります。削除されたウィンドウが保存されたウィンドウ構成を復元することにより再び有効に行うことができる（参照&lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;ウィンドウ構成を&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="5ad4daa28cddc16fff21959bfa78979f977c6062" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;variable definition&lt;/em&gt; is a construct that announces your intention to use a symbol as a global variable. It uses the special forms &lt;code&gt;defvar&lt;/code&gt; or &lt;code&gt;defconst&lt;/code&gt;, which are documented below.</source>
          <target state="translated">&lt;em&gt;変数の定義は&lt;/em&gt;グローバル変数としてシンボルを使用するように意図を発表した構造です。これは、以下に記載されている特殊な形式 &lt;code&gt;defvar&lt;/code&gt; または &lt;code&gt;defconst&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="a8c4d77d87118f0607591ffbfce0deb3dccc3cea" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;variable&lt;/em&gt; is a name that can be &lt;em&gt;bound&lt;/em&gt; (or &lt;em&gt;set&lt;/em&gt;) to an object. The object to which a variable is bound is called a &lt;em&gt;value&lt;/em&gt;; we say also that variable holds that value. Although nearly all variables can be set by the user, certain variables exist specifically so that users can change them; these are called &lt;em&gt;user options&lt;/em&gt;. Ordinary variables and user options are described using a format like that for functions, except that there are no arguments.</source>
          <target state="translated">&lt;em&gt;変数が&lt;/em&gt;できる名前である&lt;em&gt;結合&lt;/em&gt;（または&lt;em&gt;セット&lt;/em&gt;オブジェクトに）。変数がバインドされているオブジェクトは&lt;em&gt;値&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。また、変数がその値を保持しているとも言います。ほとんどすべての変数はユーザーが設定できますが、特定の変数はユーザーが変更できるように特別に存在します。これらは&lt;em&gt;ユーザーオプション&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。常微分方程式とユーザーオプションは、引数がないことを除いて、関数のような形式を使用して記述されます。</target>
        </trans-unit>
        <trans-unit id="1156c4586d2d0883c8aca28ed3ce095b29909471" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;variable&lt;/em&gt; is a name used in a program to stand for a value. In Lisp, each variable is represented by a Lisp symbol (see &lt;a href=&quot;symbols#Symbols&quot;&gt;Symbols&lt;/a&gt;). The variable name is simply the symbol&amp;rsquo;s name, and the variable&amp;rsquo;s value is stored in the symbol&amp;rsquo;s value cell&lt;a href=&quot;#FOOT8&quot; name=&quot;DOCF8&quot;&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt;. See &lt;a href=&quot;symbol-components#Symbol-Components&quot;&gt;Symbol Components&lt;/a&gt;. In Emacs Lisp, the use of a symbol as a variable is independent of its use as a function name.</source>
          <target state="translated">&lt;em&gt;変数は、&lt;/em&gt;値を表すために、プログラムで使用される名前です。 Lispでは、各変数はLispシンボルで表されます（&lt;a href=&quot;symbols#Symbols&quot;&gt;Symbolsを&lt;/a&gt;参照）。変数名は単にシンボルの名前であり、変数の値はシンボルの値セル&lt;a href=&quot;#FOOT8&quot; name=&quot;DOCF8&quot;&gt;&lt;sup&gt;8に&lt;/sup&gt;&lt;/a&gt;格納されます。&lt;a href=&quot;symbol-components#Symbol-Components&quot;&gt;シンボルコンポーネントを&lt;/a&gt;参照してください。 Emacs Lispでは、変数としてのシンボルの使用は、関数名としての使用とは無関係です。</target>
        </trans-unit>
        <trans-unit id="cd6722509f8edba7d22e136508797e09752ed07c" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;vector&lt;/em&gt; is a general-purpose array whose elements can be any Lisp objects. (By contrast, the elements of a string can only be characters. See &lt;a href=&quot;strings-and-characters#Strings-and-Characters&quot;&gt;Strings and Characters&lt;/a&gt;.) Vectors are used in Emacs for many purposes: as key sequences (see &lt;a href=&quot;key-sequences#Key-Sequences&quot;&gt;Key Sequences&lt;/a&gt;), as symbol-lookup tables (see &lt;a href=&quot;creating-symbols#Creating-Symbols&quot;&gt;Creating Symbols&lt;/a&gt;), as part of the representation of a byte-compiled function (see &lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;Byte Compilation&lt;/a&gt;), and more.</source>
          <target state="translated">&lt;em&gt;ベクターは、&lt;/em&gt;その要素は、任意のLispオブジェクトとすることができる汎用アレイです。（これとは対照的に、文字列の要素は、文字だけでき参照してください。&lt;a href=&quot;strings-and-characters#Strings-and-Characters&quot;&gt;文字列と文字&lt;/a&gt;。）ベクターは、多くの目的のためにEmacsで使用されている：キーシーケンス（参照として&lt;a href=&quot;key-sequences#Key-Sequences&quot;&gt;キーシーケンスを&lt;/a&gt;シンボルルックアップテーブルなど）、（参照&lt;a href=&quot;creating-symbols#Creating-Symbols&quot;&gt;シンボルの作成&lt;/a&gt;）、などバイトコンパイルされた関数の表現の一部（&lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;バイトコンパイルを&lt;/a&gt;参照）など。</target>
        </trans-unit>
        <trans-unit id="55c4773d043da91116a793da0f1846bba4760d2f" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;vector&lt;/em&gt; is a one-dimensional array of elements of any type. It takes a constant amount of time to access any element of a vector. (In a list, the access time of an element is proportional to the distance of the element from the beginning of the list.)</source>
          <target state="translated">&lt;em&gt;ベクターは&lt;/em&gt;、任意のタイプの要素の一次元アレイです。ベクトルの任意の要素にアクセスするには、一定の時間がかかります。（リストでは、要素のアクセス時間は、リストの先頭からの要素の距離に比例します。）</target>
        </trans-unit>
        <trans-unit id="ac5f70614b0372d4f8f82b846b8c000ce8f68ed3" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;window configuration&lt;/em&gt; records the entire layout of one frame&amp;mdash;all windows, their sizes, which buffers they contain, how those buffers are scrolled, and their value of point; also their fringes, margins, and scroll bar settings. It also includes the value of &lt;code&gt;minibuffer-scroll-window&lt;/code&gt;. As a special exception, the window configuration does not record the value of point in the selected window for the current buffer.</source>
          <target state="translated">&lt;em&gt;ウィンドウ構成は&lt;/em&gt;、彼らがそれらのバッファがスクロールされているか、含まれている、との点の価値バッファ1フレーム-すべてのウィンドウ、それらの大きさ、全体のレイアウトを記録します。また、フリンジ、マージン、およびスクロールバーの設定。 &lt;code&gt;minibuffer-scroll-window&lt;/code&gt; の値も含まれます。特別な例外として、ウィンドウ構成は、現在のバッファーに対して選択されたウィンドウのポイントの値を記録しません。</target>
        </trans-unit>
        <trans-unit id="0d57455a82c850bc61f2d2aecdc1b09c8b42b9e8" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;window configuration&lt;/em&gt; stores information about the positions, sizes, and contents of the windows in a frame, so you can recreate the same arrangement of windows later.</source>
          <target state="translated">&lt;em&gt;ウィンドウ構成の&lt;/em&gt;フレーム内の位置、サイズ、およびウィンドウの内容に関する情報を格納し、後で窓の同じ配置を再作成することができるように。</target>
        </trans-unit>
        <trans-unit id="c00b85431c59b78e8f4e74a1925ee57f90bf7090" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;window&lt;/em&gt; describes the portion of the terminal screen that Emacs uses to display a buffer. Every window has one associated buffer, whose contents appear in the window. By contrast, a given buffer may appear in one window, no window, or several windows.</source>
          <target state="translated">&lt;em&gt;ウィンドウは&lt;/em&gt;Emacsがバッファを表示するために使用する端末画面の部分を記述する。すべてのウィンドウには1つのバッファが関連付けられており、その内容がウィンドウに表示されます。対照的に、特定のバッファは、1つのウィンドウ、ウィンドウなし、または複数のウィンドウに表示される場合があります。</target>
        </trans-unit>
        <trans-unit id="f5cca0cf4b997e339b41d33bd8f75be84d6ffeaa" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;window&lt;/em&gt; is an area of the screen that is used to display a buffer (see &lt;a href=&quot;buffers#Buffers&quot;&gt;Buffers&lt;/a&gt;). In Emacs Lisp, windows are represented by a special Lisp object type.</source>
          <target state="translated">&lt;em&gt;ウィンドウは、&lt;/em&gt;（参照バッファを表示するために使用されている画面の領域である&lt;a href=&quot;buffers#Buffers&quot;&gt;バッファを&lt;/a&gt;）。Emacs Lispでは、ウィンドウは特別なLispオブジェクトタイプで表されます。</target>
        </trans-unit>
        <trans-unit id="3507a8b3b334275d08f16d7312604f9c5451dc34" translate="yes" xml:space="preserve">
          <source>A Custom theme file should be named</source>
          <target state="translated">カスタムテーマファイルの名前は</target>
        </trans-unit>
        <trans-unit id="97e76d477ef6ece585bf0e8e626dfbf9ff92f225" translate="yes" xml:space="preserve">
          <source>A GNU (glibc-based) system with a FreeBSD kernel.</source>
          <target state="translated">FreeBSD カーネルを持つ GNU (glibc ベースの)システム。</target>
        </trans-unit>
        <trans-unit id="88a0c01d860cf991a4d23f7a207dd587f005e263" translate="yes" xml:space="preserve">
          <source>A GNU/Linux system&amp;mdash;that is, a variant GNU system, using the Linux kernel. (These systems are the ones people often call &amp;ldquo;Linux&amp;rdquo;, but actually Linux is just the kernel, not the whole system.)</source>
          <target state="translated">GNU / Linuxシステム&amp;mdash;つまり、Linuxカーネルを使用するバリアントGNUシステム。（これらのシステムは、人々がしばしば「Linux」と呼ぶものですが、実際にはLinuxは単なるカーネルであり、システム全体ではありません。）</target>
        </trans-unit>
        <trans-unit id="739c3877cd46882f2bf1e29532388af125b773c3" translate="yes" xml:space="preserve">
          <source>A Lisp &lt;em&gt;object&lt;/em&gt; is a piece of data used and manipulated by Lisp programs. For our purposes, a &lt;em&gt;type&lt;/em&gt; or &lt;em&gt;data type&lt;/em&gt; is a set of possible objects.</source>
          <target state="translated">Lisp&lt;em&gt;オブジェクト&lt;/em&gt;は、Lispプログラムによって使用および操作されるデータの一部です。私たちの目的では、&lt;em&gt;型&lt;/em&gt;または&lt;em&gt;データ型&lt;/em&gt;は可能なオブジェクトのセットです。</target>
        </trans-unit>
        <trans-unit id="0ede65fe49eec2a820dcd37ce90bed61992a08df" translate="yes" xml:space="preserve">
          <source>A Lisp buffer object contains numerous pieces of information. Some of this information is directly accessible to the programmer through variables, while other information is accessible only through special-purpose functions. For example, the visited file name is directly accessible through a variable, while the value of point is accessible only through a primitive function.</source>
          <target state="translated">Lisp のバッファオブジェクトには多くの情報が含まれています。これらの情報の中には、プログラマが変数を通して直接アクセスできるものもあれば、特別な目的の関数を通してのみアクセスできるものもあります。例えば、訪問したファイル名は変数から直接アクセスできますが、ポイントの値はプリミティブ関数からしかアクセスできません。</target>
        </trans-unit>
        <trans-unit id="0cb2ab52c23e67cc9d47f5aaa484af8daf209b86" translate="yes" xml:space="preserve">
          <source>A Lisp expression that you can evaluate is called a &lt;em&gt;form&lt;/em&gt;. Evaluating a form always produces a result, which is a Lisp object. In the examples in this manual, this is indicated with &amp;lsquo;</source>
          <target state="translated">評価できるLisp式は&lt;em&gt;フォーム&lt;/em&gt;と呼ばれます。フォームを評価すると、常に結果が生成されます。これはLispオブジェクトです。このマニュアルの例では、これは「」で示されています。</target>
        </trans-unit>
        <trans-unit id="44b74e4a3fac58ee6b57c96a4dd7b2d0e1cbf309" translate="yes" xml:space="preserve">
          <source>A Lisp form&amp;rsquo;s value. &amp;lsquo;</source>
          <target state="translated">Lispフォームの値。'</target>
        </trans-unit>
        <trans-unit id="636bf0c1ed1567a512c03ae0afbe1fe64b2f9b82" translate="yes" xml:space="preserve">
          <source>A Lisp function called whenever the state of the process changes.</source>
          <target state="translated">プロセスの状態が変化するたびに呼び出されるLisp関数。</target>
        </trans-unit>
        <trans-unit id="7e57febc310f2002b2d190a0e3bcc2fe01e7ac4d" translate="yes" xml:space="preserve">
          <source>A Lisp function used to accept output from the process.</source>
          <target state="translated">プロセスからの出力を受け取るために使用されるLisp関数。</target>
        </trans-unit>
        <trans-unit id="4952821b0ad1ac9117ff033a72abb999f4aaedb8" translate="yes" xml:space="preserve">
          <source>A Lisp macro object is a list whose &lt;small&gt;CAR&lt;/small&gt; is &lt;code&gt;macro&lt;/code&gt;, and whose &lt;small&gt;CDR&lt;/small&gt; is a function. Expansion of the macro works by applying the function (with &lt;code&gt;apply&lt;/code&gt;) to the list of &lt;em&gt;unevaluated&lt;/em&gt; arguments from the macro call.</source>
          <target state="translated">Lispマクロオブジェクトは、&lt;small&gt;CAR&lt;/small&gt;が &lt;code&gt;macro&lt;/code&gt; であり、&lt;small&gt;CDR&lt;/small&gt;が関数であるリストです。マクロの展開は、マクロ呼び出しからの&lt;em&gt;未評価の&lt;/em&gt;引数のリストに関数を（ &lt;code&gt;apply&lt;/code&gt; を使用して）適用することによって機能します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="676c0d12c6662696653cb17b87b78c6a68f660fb" translate="yes" xml:space="preserve">
          <source>A Lisp object that is intended for evaluation is called a &lt;em&gt;form&lt;/em&gt; or &lt;em&gt;expression&lt;/em&gt;&lt;a href=&quot;#FOOT6&quot; name=&quot;DOCF6&quot;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;. The fact that forms are data objects and not merely text is one of the fundamental differences between Lisp-like languages and typical programming languages. Any object can be evaluated, but in practice only numbers, symbols, lists and strings are evaluated very often.</source>
          <target state="translated">評価を目的としたLispオブジェクトは、&lt;em&gt;フォーム&lt;/em&gt;または&lt;em&gt;式&lt;/em&gt;&lt;a href=&quot;#FOOT6&quot; name=&quot;DOCF6&quot;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;と呼ばれます。フォームが単なるテキストではなくデータオブジェクトであるという事実は、Lispのような言語と典型的なプログラミング言語の根本的な違いの1つです。どのオブジェクトでも評価できますが、実際には、数値、記号、リスト、および文字列のみが非常に頻繁に評価されます。</target>
        </trans-unit>
        <trans-unit id="f33adea499465f70fa576e194f71f0ef7924e620" translate="yes" xml:space="preserve">
          <source>A Lisp object that is intended to be evaluated is called a &lt;em&gt;form&lt;/em&gt; (or an &lt;em&gt;expression&lt;/em&gt;). How Emacs evaluates a form depends on its data type. Emacs has three different kinds of form that are evaluated differently: symbols, lists, and all other types. This section describes all three kinds, one by one, starting with the other types, which are self-evaluating forms.</source>
          <target state="translated">評価されることを目的としたLispオブジェクトは、&lt;em&gt;フォーム&lt;/em&gt;（または&lt;em&gt;式&lt;/em&gt;）と呼ばれます。Emacsがフォームを評価する方法は、そのデータ型によって異なります。Emacsには、シンボル、リスト、その他すべてのタイプの3種類のフォームがあります。このセクションでは、自己評価形式である他のタイプから始めて、3つのタイプすべてを1つずつ説明します。</target>
        </trans-unit>
        <trans-unit id="61232e4f0cd79d42e285f0ee5d7b7c9f443664ba" translate="yes" xml:space="preserve">
          <source>A Lisp object, specified with its read syntax, terminated with a</source>
          <target state="translated">読み取り構文で指定されたLispオブジェクトで、最後が</target>
        </trans-unit>
        <trans-unit id="a7b12802b4f43521be72ce4a8abec084c2492675" translate="yes" xml:space="preserve">
          <source>A Lisp program can pop up a menu so that the user can choose an alternative with the mouse. On a text terminal, if the mouse is not available, the user can choose an alternative using the keyboard motion keys&amp;mdash;</source>
          <target state="translated">Lispプログラムはメニューをポップアップできるので、ユーザーはマウスで別の方法を選択できます。テキスト端末では、マウスが使用できない場合、ユーザーはキーボードのモーションキーを使用して別の方法を選択できます。</target>
        </trans-unit>
        <trans-unit id="7f6a3034ff2fce3c5efc4de7ca7afdcbe18b3a20" translate="yes" xml:space="preserve">
          <source>A Lisp program can specify to which thread a process is to be locked, or instruct Emacs to unlock a process, in which case its output can be processed by any thread. Only a single thread will wait for output from a given process at one time&amp;mdash;once one thread begins waiting for output, the process is temporarily locked until &lt;code&gt;accept-process-output&lt;/code&gt; or &lt;code&gt;sit-for&lt;/code&gt; returns.</source>
          <target state="translated">Lispプログラムは、プロセスをロックするスレッドを指定したり、Emacsにプロセスのロックを解除するように指示したりできます。その場合、その出力は任意のスレッドで処理できます。特定のプロセスからの出力を一度に待機するのは1つのスレッドだけです。1つのスレッドが出力の待機を開始すると、プロセスは、 &lt;code&gt;accept-process-output&lt;/code&gt; または &lt;code&gt;sit-for&lt;/code&gt; が戻るまで一時的にロックされます。</target>
        </trans-unit>
        <trans-unit id="6bea1c4b3a46894d0953d9ddc50f1e289ea694d1" translate="yes" xml:space="preserve">
          <source>A Lisp program consists of a set of &lt;em&gt;expressions&lt;/em&gt;, or &lt;em&gt;forms&lt;/em&gt; (see &lt;a href=&quot;forms#Forms&quot;&gt;Forms&lt;/a&gt;). We control the order of execution of these forms by enclosing them in &lt;em&gt;control structures&lt;/em&gt;. Control structures are special forms which control when, whether, or how many times to execute the forms they contain.</source>
          <target state="translated">Lispプログラムは、一連の&lt;em&gt;式&lt;/em&gt;または&lt;em&gt;フォーム&lt;/em&gt;で構成され&lt;em&gt;ます&lt;/em&gt;（&lt;a href=&quot;forms#Forms&quot;&gt;フォームを&lt;/a&gt;参照）。これらのフォームを&lt;em&gt;制御構造で&lt;/em&gt;囲むことにより、これらのフォームの実行順序を制御します。制御構造は、含まれているフォームをいつ、実行するか、または実行する回数を制御する特別なフォームです。</target>
        </trans-unit>
        <trans-unit id="49b243589d051decd3fee204d71246c9c4049473" translate="yes" xml:space="preserve">
          <source>A Lisp program is composed mainly of Lisp functions. This chapter explains what functions are, how they accept arguments, and how to define them.</source>
          <target state="translated">Lispのプログラムは、主にLispの関数で構成されています。この章では、関数とは何か、引数の受け取り方、定義の仕方について説明します。</target>
        </trans-unit>
        <trans-unit id="6f6b3875c43f74196130caa79a2aae800b9e504b" translate="yes" xml:space="preserve">
          <source>A Lisp string that names the buffer. It is guaranteed to be unique. See &lt;a href=&quot;buffer-names#Buffer-Names&quot;&gt;Buffer Names&lt;/a&gt;. This and the following fields have their names in the C struct definition end in a &lt;code&gt;_&lt;/code&gt; to indicate that they should not be accessed directly, but via the &lt;code&gt;BVAR&lt;/code&gt; macro, like this:</source>
          <target state="translated">バッファに名前を付けるLisp文字列。ユニークであることが保証されています。&lt;a href=&quot;buffer-names#Buffer-Names&quot;&gt;バッファ名を&lt;/a&gt;参照してください。このフィールドと次のフィールドの名前は、C構造体定義で &lt;code&gt;_&lt;/code&gt; で終わり、直接アクセスするのではなく、次のように &lt;code&gt;BVAR&lt;/code&gt; マクロを介してアクセスする必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="0dba94b2c27dc16f1ce1573a3fa87d12c74ef063" translate="yes" xml:space="preserve">
          <source>A Lisp string, the name of the process.</source>
          <target state="translated">プロセスの名前であるLisp文字列。</target>
        </trans-unit>
        <trans-unit id="3830b5730347a3887344295754013d799c21d823" translate="yes" xml:space="preserve">
          <source>A Sample Function Description</source>
          <target state="translated">サンプル機能の説明</target>
        </trans-unit>
        <trans-unit id="47688b6f0ccbc8ce6a610200f12d5466c7935f4e" translate="yes" xml:space="preserve">
          <source>A Sample Variable Description</source>
          <target state="translated">サンプル変数の説明</target>
        </trans-unit>
        <trans-unit id="e5a96014bd90b149f5c06b869ab3dedf6896aa07" translate="yes" xml:space="preserve">
          <source>A Simple Example of a Macro</source>
          <target state="translated">マクロの簡単な例</target>
        </trans-unit>
        <trans-unit id="6c6aa1370f28727d54174b46840756ee4eca1fca" translate="yes" xml:space="preserve">
          <source>A Simple Lambda Expression Example</source>
          <target state="translated">簡単なラムダ式の例</target>
        </trans-unit>
        <trans-unit id="fe1639cfe4a0a40f746ce0000ee16f6eaea5c41a" translate="yes" xml:space="preserve">
          <source>A backquote-style pattern has the form &lt;code&gt;`&lt;var&gt;qpat&lt;/var&gt;&lt;/code&gt; where &lt;var&gt;qpat&lt;/var&gt; can have the following forms:</source>
          <target state="translated">バッククォートスタイルのパターンの形式は &lt;code&gt;`&lt;var&gt;qpat&lt;/var&gt;&lt;/code&gt; で、 &lt;var&gt;qpat&lt;/var&gt; の形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e09b92e1e2035037489b57b2cf5ea9ec97ecb050" translate="yes" xml:space="preserve">
          <source>A backslash is allowed, and harmless, preceding any character without a special escape meaning; thus, &amp;lsquo;</source>
          <target state="translated">特別なエスケープの意味のない文字の前には、バックスラッシュが許可され、無害です。したがって、 '</target>
        </trans-unit>
        <trans-unit id="9fb9879aefa3149183ad26133a7129b3b1a9107e" translate="yes" xml:space="preserve">
          <source>A basic example.</source>
          <target state="translated">基本的な例です。</target>
        </trans-unit>
        <trans-unit id="a9f489f58b662fe1c92a44259f90e291f9de6363" translate="yes" xml:space="preserve">
          <source>A blank line is defined as a line containing only tabs and spaces.</source>
          <target state="translated">空行とは、タブとスペースのみを含む行と定義されています。</target>
        </trans-unit>
        <trans-unit id="524e4a4511120df2884e060fd767b7b40a21308e" translate="yes" xml:space="preserve">
          <source>A bool-vector is much like a vector, except that it stores only the values &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt;. If you try to store any non-&lt;code&gt;nil&lt;/code&gt; value into an element of the bool-vector, the effect is to store &lt;code&gt;t&lt;/code&gt; there. As with all arrays, bool-vector indices start from 0, and the length cannot be changed once the bool-vector is created. Bool-vectors are constants when evaluated.</source>
          <target state="translated">bool-vectorは、値 &lt;code&gt;t&lt;/code&gt; と &lt;code&gt;nil&lt;/code&gt; のみを格納することを除いて、ベクトルによく似ています。 &lt;code&gt;nil&lt;/code&gt; 以外の値をbool-vectorの要素に格納しようとすると、 &lt;code&gt;t&lt;/code&gt; をそこに格納する効果があります。すべての配列と同様に、bool-vectorインデックスは0から始まり、bool-vectorが作成されると長さを変更できません。ブールベクトルは、評価されるときの定数です。</target>
        </trans-unit>
        <trans-unit id="814538ef1618885380945f59cead64ad79435a60" translate="yes" xml:space="preserve">
          <source>A buffer can have blank areas called &lt;em&gt;display margins&lt;/em&gt; on the left and on the right. Ordinary text never appears in these areas, but you can put things into the display margins using the &lt;code&gt;display&lt;/code&gt; property. There is currently no way to make text or images in the margin mouse-sensitive.</source>
          <target state="translated">バッファには、左側と右側に&lt;em&gt;表示マージン&lt;/em&gt;と呼ばれる空白の領域を含めることができます。通常のテキストがこれらの領域に表示されることはありませんが、 &lt;code&gt;display&lt;/code&gt; プロパティを使用して表示余白に物を入れることができます。現在、余白のテキストや画像をマウスセンシティブにする方法はありません。</target>
        </trans-unit>
        <trans-unit id="dffb10f2e97287560c7112dc2419ba6c8e6575dc" translate="yes" xml:space="preserve">
          <source>A buffer is &lt;em&gt;modified&lt;/em&gt; if it needs to be saved.</source>
          <target state="translated">保存する必要がある場合は、バッファが&lt;em&gt;変更さ&lt;/em&gt;れます。</target>
        </trans-unit>
        <trans-unit id="01af951dc229e9603e576b0ef91e681538e5dd80" translate="yes" xml:space="preserve">
          <source>A buffer may be &lt;em&gt;indirect&lt;/em&gt;, which means it shares the text of another buffer, but presents it differently. See &lt;a href=&quot;indirect-buffers#Indirect-Buffers&quot;&gt;Indirect Buffers&lt;/a&gt;.</source>
          <target state="translated">バッファは&lt;em&gt;間接的&lt;/em&gt;である可能性があります。つまり、別のバッファのテキストを共有しますが、表示方法が異なります。&lt;a href=&quot;indirect-buffers#Indirect-Buffers&quot;&gt;間接バッファを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0d424b315e8ae166a8d74702d3afc5f437295bda" translate="yes" xml:space="preserve">
          <source>A buffer name. The buffer need not exist. By default, uses the name of a recently used buffer other than the current buffer. Completion, Default, Prompt.</source>
          <target state="translated">バッファ名。バッファは存在しなくても構いません。デフォルトでは、現在のバッファ以外に最近使用したバッファの名前を使用します。完了、デフォルト、プロンプト。</target>
        </trans-unit>
        <trans-unit id="4eec8b38136453dbf281b73846ca4718f3fd5704" translate="yes" xml:space="preserve">
          <source>A buffer visiting a write-protected file is normally read-only.</source>
          <target state="translated">書き込み保護されたファイルを訪れるバッファは、通常は読み取り専用です。</target>
        </trans-unit>
        <trans-unit id="b3bbdf90f180c663bc226ff02e52a4cdd65396f4" translate="yes" xml:space="preserve">
          <source>A buffer-local variable cannot be made terminal-local (see &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;).</source>
          <target state="translated">バッファローカル変数をターミナルローカルにすることはできません（&lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;複数のターミナルを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="ddf11dd51e081a083899b25a13468ba1a67d1221" translate="yes" xml:space="preserve">
          <source>A buffer-local variable has a buffer-local binding associated with a particular buffer. The binding is in effect when that buffer is current; otherwise, it is not in effect. If you set the variable while a buffer-local binding is in effect, the new value goes in that binding, so its other bindings are unchanged. This means that the change is visible only in the buffer where you made it.</source>
          <target state="translated">バッファローカル変数は、特定のバッファに関連付けられたバッファローカルバインディングを持っています。バインディングは、そのバッファがカレントであるときに有効になります。バッファローカルバインディングが有効な状態で変数を設定した場合、新しい値はそのバインディングに反映され、他のバインディングは変更されません。これは、変更を行ったバッファの中でのみ変更が表示されることを意味します。</target>
        </trans-unit>
        <trans-unit id="0ea3f6b24d8b103d0443c8cc30b8a2924a186913" translate="yes" xml:space="preserve">
          <source>A buffer-local variable is &lt;em&gt;permanent&lt;/em&gt; if the variable name (a symbol) has a &lt;code&gt;permanent-local&lt;/code&gt; property that is non-&lt;code&gt;nil&lt;/code&gt;. Such variables are unaffected by &lt;code&gt;kill-all-local-variables&lt;/code&gt;, and their local bindings are therefore not cleared by changing major modes. Permanent locals are appropriate for data pertaining to where the file came from or how to save it, rather than with how to edit the contents.</source>
          <target state="translated">変数名（シンボル）に &lt;code&gt;nil&lt;/code&gt; 以外の &lt;code&gt;permanent-local&lt;/code&gt; プロパティがある場合、バッファローカル変数は&lt;em&gt;永続的&lt;/em&gt;です。このような変数は、 &lt;code&gt;kill-all-local-variables&lt;/code&gt; の影響を受けないため、メジャーモードを変更してもローカルバインディングはクリアされません。パーマネントローカルは、コンテンツの編集方法ではなく、ファイルの出所や保存方法に関するデータに適しています。</target>
        </trans-unit>
        <trans-unit id="82e1d9061b15d192cfad42d3517641069e30a971" translate="yes" xml:space="preserve">
          <source>A button is essentially a set of text or overlay properties, attached to a stretch of text in a buffer. These properties are called &lt;em&gt;button properties&lt;/em&gt;. One of these properties, the &lt;em&gt;action property&lt;/em&gt;, specifies a function which is called when the user invokes the button using the keyboard or the mouse. The action function may examine the button and use its other properties as desired.</source>
          <target state="translated">ボタンは基本的にテキストまたはオーバーレイプロパティのセットであり、バッファ内の一連のテキストにアタッチされます。これらのプロパティは&lt;em&gt;ボタンプロパティ&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。これらのプロパティの1つである&lt;em&gt;actionプロパティ&lt;/em&gt;は、ユーザーがキーボードまたはマウスを使用してボタンを呼び出したときに呼び出される関数を指定します。アクション関数は、ボタンを調べて、必要に応じて他のプロパティを使用できます。</target>
        </trans-unit>
        <trans-unit id="a12cd4fc77bf2095be17614fa62ca6d977e907e0" translate="yes" xml:space="preserve">
          <source>A button was pushed and not yet released.</source>
          <target state="translated">ボタンが押されていて、まだ解放されていませんでした。</target>
        </trans-unit>
        <trans-unit id="e63588ea815dd6fb8cf0feb02e36a33cea09758c" translate="yes" xml:space="preserve">
          <source>A byte-compiled function is not as efficient as a primitive function written in C, but runs much faster than the version written in Lisp. Here is an example:</source>
          <target state="translated">バイトコンパイルされた関数は、Cで書かれたプリミティブ関数ほど効率的ではありませんが、Lispで書かれたバージョンよりもはるかに高速に実行されます。以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="15e5cdcc2c4c2bf479874e2a6a0a6720464a787a" translate="yes" xml:space="preserve">
          <source>A call to &lt;code&gt;clear-this-command-keys&lt;/code&gt; (see &lt;a href=&quot;command-loop-info#Command-Loop-Info&quot;&gt;Command Loop Info&lt;/a&gt;) causes this function to return an empty vector immediately afterward.</source>
          <target state="translated">呼び出し &lt;code&gt;clear-this-command-keys&lt;/code&gt; （参照&lt;a href=&quot;command-loop-info#Command-Loop-Info&quot;&gt;コマンドループ情報を&lt;/a&gt;）その直後、空のベクターを返すために、この機能が発生します。</target>
        </trans-unit>
        <trans-unit id="07bdcc88f0557d24553af69e03106b6926fb38fe" translate="yes" xml:space="preserve">
          <source>A call to &lt;code&gt;libxml-parse-html-region&lt;/code&gt; returns this</source>
          <target state="translated">&lt;code&gt;libxml-parse-html-region&lt;/code&gt; を呼び出すと、これが返されます</target>
        </trans-unit>
        <trans-unit id="9ae4251fb7c25ebcbed3100b7db0002d95f465d8" translate="yes" xml:space="preserve">
          <source>A call to any of the following Emacs-specific functions:</source>
          <target state="translated">以下のEmacs固有の関数のいずれかの呼び出し。</target>
        </trans-unit>
        <trans-unit id="3d83bc6e0965f055bd5764ea7054322f45bfafdd" translate="yes" xml:space="preserve">
          <source>A call to any of the following standard Lisp functions:</source>
          <target state="translated">以下の標準Lisp関数のいずれかを呼び出します。</target>
        </trans-unit>
        <trans-unit id="7635e7ab6b3b4e2b3b227dcbb99a41ebeab9c463" translate="yes" xml:space="preserve">
          <source>A call to the function requires one actual argument for each of the &lt;var&gt;required-vars&lt;/var&gt;. There may be actual arguments for zero or more of the &lt;var&gt;optional-vars&lt;/var&gt;, and there cannot be any actual arguments beyond that unless the lambda list uses &lt;code&gt;&amp;amp;rest&lt;/code&gt;. In that case, there may be any number of extra actual arguments.</source>
          <target state="translated">関数の呼び出しには、 &lt;var&gt;required-vars&lt;/var&gt; ごとに1つの実際の引数が必要です。0個以上の &lt;var&gt;optional-vars&lt;/var&gt; に対して実際の引数が存在する可能性があり、ラムダリストが &lt;code&gt;&amp;amp;rest&lt;/code&gt; を使用しない限り、それを超える実際の引数は存在できません。その場合、追加の実際の引数がいくつあってもかまいません。</target>
        </trans-unit>
        <trans-unit id="67fa1aeb6732d6bf7e24ec11ac66725cadaddf46" translate="yes" xml:space="preserve">
          <source>A case table is a char-table (see &lt;a href=&quot;char_002dtables#Char_002dTables&quot;&gt;Char-Tables&lt;/a&gt;) whose subtype is &lt;code&gt;case-table&lt;/code&gt;. This char-table maps each character into the corresponding lower case character. It has three extra slots, which hold related tables:</source>
          <target state="translated">ケーステーブルは、サブタイプが &lt;code&gt;case-table&lt;/code&gt; であるchar-table（&lt;a href=&quot;char_002dtables#Char_002dTables&quot;&gt;Char-Tablesを&lt;/a&gt;参照）です。このchar-tableは、各文字を対応する小文字にマップします。関連するテーブルを保持する3つの追加スロットがあります。</target>
        </trans-unit>
        <trans-unit id="2b5b379014c462345470b8abd71e3a1735572b62" translate="yes" xml:space="preserve">
          <source>A certain amount of Common Lisp emulation is available via the</source>
          <target state="translated">ある程度のCommon Lispエミュレーションは</target>
        </trans-unit>
        <trans-unit id="a4a5415d16ff7ebd6665d307ffdd64fbd966a291" translate="yes" xml:space="preserve">
          <source>A char table (see &lt;a href=&quot;char_002dtable-type#Char_002dTable-Type&quot;&gt;Char-Table Type&lt;/a&gt;).</source>
          <target state="translated">charテーブル（&lt;a href=&quot;char_002dtable-type#Char_002dTable-Type&quot;&gt;Char-Tableタイプを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="ecaf5c129d18b5a22edcf1fb273c1fdf8a52213c" translate="yes" xml:space="preserve">
          <source>A char table of characters which invoke &lt;code&gt;auto-fill-function&lt;/code&gt; when self-inserted&amp;mdash;space and newline in most language environments. They have an entry &lt;code&gt;t&lt;/code&gt; in the table.</source>
          <target state="translated">自己挿入時に &lt;code&gt;auto-fill-function&lt;/code&gt; を呼び出す文字のcharテーブル（ほとんどの言語環境ではスペースと改行）。テーブルにエントリ &lt;code&gt;t&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="a4331eab8b48d68401034877de0a7e395a6b7a91" translate="yes" xml:space="preserve">
          <source>A char-table can also have a &lt;em&gt;default value&lt;/em&gt;. If so, then &lt;code&gt;(aref &lt;var&gt;char-table&lt;/var&gt; &lt;var&gt;c&lt;/var&gt;)&lt;/code&gt; returns the default value whenever the char-table does not specify any other non-&lt;code&gt;nil&lt;/code&gt; value.</source>
          <target state="translated">char-tableには&lt;em&gt;デフォルト値を設定&lt;/em&gt;することもでき&lt;em&gt;ます&lt;/em&gt;。その場合、 &lt;code&gt;(aref &lt;var&gt;char-table&lt;/var&gt; &lt;var&gt;c&lt;/var&gt;)&lt;/code&gt; は、char-tableが他の &lt;code&gt;nil&lt;/code&gt; 以外の値を指定しない場合は常に、デフォルト値を返します。</target>
        </trans-unit>
        <trans-unit id="1fb76fc397b52b86e435eb63aca61212ac723523" translate="yes" xml:space="preserve">
          <source>A char-table can have a &lt;em&gt;parent&lt;/em&gt;, which is another char-table. If it does, then whenever the char-table specifies &lt;code&gt;nil&lt;/code&gt; for a particular character &lt;var&gt;c&lt;/var&gt;, it inherits the value specified in the parent. In other words, &lt;code&gt;(aref &lt;var&gt;char-table&lt;/var&gt; &lt;var&gt;c&lt;/var&gt;)&lt;/code&gt; returns the value from the parent of &lt;var&gt;char-table&lt;/var&gt; if &lt;var&gt;char-table&lt;/var&gt; itself specifies &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">char-tableは、別のchar-tableである&lt;em&gt;親&lt;/em&gt;を持つことができます。含まれている場合、char-tableが特定の文字 &lt;var&gt;c&lt;/var&gt; に &lt;code&gt;nil&lt;/code&gt; を指定すると、親で指定された値を継承します。つまり、 &lt;code&gt;(aref &lt;var&gt;char-table&lt;/var&gt; &lt;var&gt;c&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;char-table&lt;/var&gt; &lt;var&gt;c&lt;/var&gt; ）は、 &lt;var&gt;char-table&lt;/var&gt; 自体が &lt;code&gt;nil&lt;/code&gt; を指定している場合、 &lt;var&gt;char-table&lt;/var&gt; の親から値を返します。</target>
        </trans-unit>
        <trans-unit id="28812e862b6fe08ebd8034ca275ca9cc0b34ae20" translate="yes" xml:space="preserve">
          <source>A char-table can specify an element value for a single character code; it can also specify a value for an entire character set.</source>
          <target state="translated">文字テーブルは、単一の文字コードの要素値を指定することができますが、文字セット全体の値を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="7b405f04567fba4621b52257941c3540fa92759c" translate="yes" xml:space="preserve">
          <source>A char-table is much like a vector, except that it is indexed by character codes. Any valid character code, without modifiers, can be used as an index in a char-table. You can access a char-table&amp;rsquo;s elements with &lt;code&gt;aref&lt;/code&gt; and &lt;code&gt;aset&lt;/code&gt;, as with any array. In addition, a char-table can have &lt;em&gt;extra slots&lt;/em&gt; to hold additional data not associated with particular character codes. Like vectors, char-tables are constants when evaluated, and can hold elements of any type.</source>
          <target state="translated">char-tableは、文字コードでインデックスが付けられることを除けば、ベクトルによく似ています。修飾子のない有効な文字コードは、char-tableのインデックスとして使用できます。他の配列と &lt;code&gt;aref&lt;/code&gt; 、arefと &lt;code&gt;aset&lt;/code&gt; を使用してchar-tableの要素にアクセスできます。さらに、char-tableには、特定の文字コードに関連付けられていない追加のデータを保持するための追加の&lt;em&gt;スロット&lt;/em&gt;を&lt;em&gt;含める&lt;/em&gt;ことができます。ベクトルと同様に、char-tablesは評価時に定数であり、任意のタイプの要素を保持できます。</target>
        </trans-unit>
        <trans-unit id="f9d00bdec6ad25e61b5900d9855da9f05fa84630" translate="yes" xml:space="preserve">
          <source>A character (see &lt;a href=&quot;basic-char-syntax#Basic-Char-Syntax&quot;&gt;Basic Char Syntax&lt;/a&gt;).</source>
          <target state="translated">文字（&lt;a href=&quot;basic-char-syntax#Basic-Char-Syntax&quot;&gt;基本的な文字構文を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="5a9de7794a633ca12c84e901f3c32bafb6a9360d" translate="yes" xml:space="preserve">
          <source>A character alternative can also specify named character classes (see &lt;a href=&quot;char-classes#Char-Classes&quot;&gt;Char Classes&lt;/a&gt;). This is a POSIX feature. For example, &amp;lsquo;</source>
          <target state="translated">また、名前付き文字クラスを指定することができ、文字の代替は、（参照&lt;a href=&quot;char-classes#Char-Classes&quot;&gt;のCharクラス&lt;/a&gt;）。これはPOSIX機能です。例えば、 '</target>
        </trans-unit>
        <trans-unit id="5852ab82906acd43fcce8f1e9319776366ed12e5" translate="yes" xml:space="preserve">
          <source>A character is a Lisp object which represents a single character of text. In Emacs Lisp, characters are simply integers; whether an integer is a character or not is determined only by how it is used. See &lt;a href=&quot;character-codes#Character-Codes&quot;&gt;Character Codes&lt;/a&gt;, for details about character representation in Emacs.</source>
          <target state="translated">文字は、テキストの1文字を表すLispオブジェクトです。Emacs Lispでは、文字は単なる整数です。整数が文字であるかどうかは、その使用方法によってのみ決まります。参照&lt;a href=&quot;character-codes#Character-Codes&quot;&gt;文字コードを&lt;/a&gt;Emacsの中の文字表現の詳細については、。</target>
        </trans-unit>
        <trans-unit id="9dfbff13dd844666d887c5ab6faa1df6fbe6ee51" translate="yes" xml:space="preserve">
          <source>A character is invisible if its &lt;code&gt;invisible&lt;/code&gt; property is non-&lt;code&gt;nil&lt;/code&gt;. This is the default.</source>
          <target state="translated">&lt;code&gt;invisible&lt;/code&gt; プロパティが &lt;code&gt;nil&lt;/code&gt; 以外の場合、文字は非表示になります。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="47f28363d88b6d425d64a18f02bda09273e7eca4" translate="yes" xml:space="preserve">
          <source>A character is invisible if its &lt;code&gt;invisible&lt;/code&gt; property value is &lt;var&gt;atom&lt;/var&gt; or if it is a list with &lt;var&gt;atom&lt;/var&gt; as a member; comparison is done with &lt;code&gt;eq&lt;/code&gt;.</source>
          <target state="translated">その場合文字は見えない &lt;code&gt;invisible&lt;/code&gt; プロパティの値が &lt;var&gt;atom&lt;/var&gt; か、とのリストであれば &lt;var&gt;atom&lt;/var&gt; メンバーとして; 比較がで行われる &lt;code&gt;eq&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4c2caeed893ef6aef55ca838c3839fe9fc2a1038" translate="yes" xml:space="preserve">
          <source>A character is invisible if its &lt;code&gt;invisible&lt;/code&gt; property value is &lt;var&gt;atom&lt;/var&gt; or if it is a list with &lt;var&gt;atom&lt;/var&gt; as a member; comparison is done with &lt;code&gt;eq&lt;/code&gt;. Moreover, a sequence of such characters displays as an ellipsis.</source>
          <target state="translated">その場合文字は見えない &lt;code&gt;invisible&lt;/code&gt; プロパティの値が &lt;var&gt;atom&lt;/var&gt; か、とのリストであれば &lt;var&gt;atom&lt;/var&gt; メンバーとして; 比較がで行われる &lt;code&gt;eq&lt;/code&gt; 。さらに、そのような文字のシーケンスは省略記号として表示されます。</target>
        </trans-unit>
        <trans-unit id="b5cebcadf9e0f5094b601d80021f925480c3f78b" translate="yes" xml:space="preserve">
          <source>A character&amp;rsquo;s syntax controls how it changes the state of the parser, rather than describing the state itself. For example, a string delimiter character toggles the parser state between in-string and in-code, but the syntax of characters does not directly say whether they are inside a string. For example (note that 15 is the syntax code for generic string delimiters),</source>
          <target state="translated">文字の構文は、状態自体を記述するのではなく、パーサーの状態を変更する方法を制御します。たとえば、文字列区切り文字は、パーサーの状態を文字列内とコード内の間で切り替えますが、文字の構文は、文字列内にあるかどうかを直接示していません。たとえば（15は汎用文字列区切り文字の構文コードであることに注意してください）、</target>
        </trans-unit>
        <trans-unit id="995e1986dbee8019705c2c18b9dabf464763be2f" translate="yes" xml:space="preserve">
          <source>A character. The cursor does not move into the echo area. Prompt.</source>
          <target state="translated">文字です。カーソルがエコー領域に移動しない。プロンプト。</target>
        </trans-unit>
        <trans-unit id="9af6e20f678a486779e8667c74ae3962238033bd" translate="yes" xml:space="preserve">
          <source>A circle is a cons &lt;code&gt;(circle . ((&lt;var&gt;x0&lt;/var&gt; . &lt;var&gt;y0&lt;/var&gt;) . &lt;var&gt;r&lt;/var&gt;))&lt;/code&gt; which specifies the center and the radius of the circle; &lt;var&gt;r&lt;/var&gt; may be a float or integer.</source>
          <target state="translated">円は短所である &lt;code&gt;(circle . ((&lt;var&gt;x0&lt;/var&gt; . &lt;var&gt;y0&lt;/var&gt;) . &lt;var&gt;r&lt;/var&gt;))&lt;/code&gt; 中心とする円の半径を指定します。 &lt;var&gt;r&lt;/var&gt; はfloatまたは整数です。</target>
        </trans-unit>
        <trans-unit id="50c12ff3802dbf249cfca7012b5760bea0a96b84" translate="yes" xml:space="preserve">
          <source>A clause may also look like this:</source>
          <target state="translated">句は、次のような形になることもあります。</target>
        </trans-unit>
        <trans-unit id="4a41891558abee07449b02af72c74eac4e6837f1" translate="yes" xml:space="preserve">
          <source>A closure is a function that also carries a record of the lexical environment that existed when the function was defined. When it is invoked, any lexical variable references within its definition use the retained lexical environment. In all other respects, closures behave much like ordinary functions; in particular, they can be called in the same way as ordinary functions.</source>
          <target state="translated">クロージャは、関数が定義されたときに存在した語彙環境の記録も保持する関数です。クロージャが呼び出されると、その定義内のすべての語彙変数の参照は、保持された語彙環境を使用します。他のすべての点で、クロージャは通常の関数とよく似た挙動をします。</target>
        </trans-unit>
        <trans-unit id="ce25d22da839fc3f074d57a6f7f3079b96e65780" translate="yes" xml:space="preserve">
          <source>A coding system name (a symbol)&amp;mdash;but only if this command has a prefix argument. With no prefix argument, &amp;lsquo;</source>
          <target state="translated">コーディングシステム名（シンボル）-ただし、このコマンドにプレフィックス引数がある場合のみ。プレフィックス引数なし、 '</target>
        </trans-unit>
        <trans-unit id="32f193f6c59efaee4ac9718360d54b11c34fae18" translate="yes" xml:space="preserve">
          <source>A coding system name (a symbol). If the user enters null input, the argument value is &lt;code&gt;nil&lt;/code&gt;. See &lt;a href=&quot;coding-systems#Coding-Systems&quot;&gt;Coding Systems&lt;/a&gt;. Completion, Existing, Prompt.</source>
          <target state="translated">コーディングシステム名（シンボル）。ユーザーがnull入力を入力した場合、引数値は &lt;code&gt;nil&lt;/code&gt; です。&lt;a href=&quot;coding-systems#Coding-Systems&quot;&gt;コーディングシステムを&lt;/a&gt;参照してください。完了、既存、プロンプト。</target>
        </trans-unit>
        <trans-unit id="7ae6346452476d84451bf83887065f34142fef82" translate="yes" xml:space="preserve">
          <source>A color name is text (usually in a string) that specifies a color. Symbolic names such as &amp;lsquo;</source>
          <target state="translated">色の名前は、色を指定するテキスト（通常は文字列内）です。'などの記号名</target>
        </trans-unit>
        <trans-unit id="861c8320a472767fcebf0b85b88c1e68f51e31fe" translate="yes" xml:space="preserve">
          <source>A command can inhibit this feature by setting the variable &lt;code&gt;disable-point-adjustment&lt;/code&gt;:</source>
          <target state="translated">コマンドは、変数 &lt;code&gt;disable-point-adjustment&lt;/code&gt; を設定することにより、この機能を禁止できます。</target>
        </trans-unit>
        <trans-unit id="9a1feab560a446fec5a5847d8874376ebf879270" translate="yes" xml:space="preserve">
          <source>A command may be called from Lisp programs like any other function, but then the caller supplies the arguments and &lt;var&gt;arg-descriptor&lt;/var&gt; has no effect.</source>
          <target state="translated">コマンドは他の関数と同じようにLispプログラムから呼び出すことができますが、呼び出し元は引数を提供し、 &lt;var&gt;arg-descriptor&lt;/var&gt; は効果がありません。</target>
        </trans-unit>
        <trans-unit id="3850fb8bc1d5cf519ee8cb5ce99fd65ff30af7c4" translate="yes" xml:space="preserve">
          <source>A command name (i.e., a symbol satisfying &lt;code&gt;commandp&lt;/code&gt;). Existing, Completion, Prompt.</source>
          <target state="translated">コマンド名（つまり、 &lt;code&gt;commandp&lt;/code&gt; を満たすシンボル）。既存、完了、プロンプト。</target>
        </trans-unit>
        <trans-unit id="dea75281854f153f67a07289a0bf70599fd97be6" translate="yes" xml:space="preserve">
          <source>A command that calls &lt;code&gt;read-event&lt;/code&gt;, &lt;code&gt;read-char-choice&lt;/code&gt;, or &lt;code&gt;read-char&lt;/code&gt; probably should bind &lt;code&gt;help-form&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; expression while it does input. (The time when you should not do this is when</source>
          <target state="translated">&lt;code&gt;read-event&lt;/code&gt; 、 &lt;code&gt;read-char-choice&lt;/code&gt; 、または &lt;code&gt;read-char&lt;/code&gt; を呼び出すコマンドは、入力を実行している間、 &lt;code&gt;help-form&lt;/code&gt; を &lt;code&gt;nil&lt;/code&gt; 以外の式にバインドする必要があります。（これをすべきでない時は</target>
        </trans-unit>
        <trans-unit id="786b45a633125186b705ed0d2a068df264c8c114" translate="yes" xml:space="preserve">
          <source>A common idiom is to write a pattern starting with &lt;code&gt;and&lt;/code&gt;, with one or more &lt;var&gt;symbol&lt;/var&gt; sub-patterns providing bindings to the sub-patterns that follow (as well as to the body forms). For example, the following pattern matches single-digit integers.</source>
          <target state="translated">一般的なイディオムは、 &lt;code&gt;and&lt;/code&gt; で始まるパターンを記述し、1つ以上の &lt;var&gt;symbol&lt;/var&gt; サブパターンが後続のサブパターン（およびボディフォーム）へのバインディングを提供することです。たとえば、次のパターンは1桁の整数に一致します。</target>
        </trans-unit>
        <trans-unit id="f07ac0baafe3f998e934789a564c3d4c6b97953a" translate="yes" xml:space="preserve">
          <source>A common pitfall is to use a constant list as a non-last argument to &lt;code&gt;nconc&lt;/code&gt;. If you do this, the resulting behavior is undefined. It is possible that your program will change each time you run it! Here is what might happen (though this is not guaranteed to happen):</source>
          <target state="translated">よくある落とし穴は、 &lt;code&gt;nconc&lt;/code&gt; の最後ではない引数として定数リストを使用することです。これを行うと、結果の動作は未定義になります。プログラムを実行するたびにプログラムが変わる可能性があります。発生する可能性のあることは次のとおりです（ただし、これが発生することは保証されていません）。</target>
        </trans-unit>
        <trans-unit id="759143f2b89b63d556200183aad1e79402e78704" translate="yes" xml:space="preserve">
          <source>A common type of warning issued by the byte compiler is for functions and variables that were used but not defined. Such warnings report the line number for the end of the file, not the locations where the missing functions or variables were used; to find these, you must search the file manually.</source>
          <target state="translated">バイトコンパイラが発する一般的な警告は、使用されたが定義されていない関数や変数についてのものです。このような警告はファイルの最後の行番号を報告しますが、見つからない関数や変数が使用された場所は報告されません。</target>
        </trans-unit>
        <trans-unit id="2a3d7f1b5d61b15dc9a45f1d4a60683c03b995b6" translate="yes" xml:space="preserve">
          <source>A common use of advice is for named functions and macros. You could just use &lt;code&gt;add-function&lt;/code&gt; as in:</source>
          <target state="translated">アドバイスの一般的な使用法は、名前付き関数とマクロです。次のように &lt;code&gt;add-function&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="488edd78a5bd826f662b481ed78ba3fdff0e08c8" translate="yes" xml:space="preserve">
          <source>A complemented character alternative can match a newline, unless newline is mentioned as one of the characters not to match. This is in contrast to the handling of regexps in programs such as &lt;code&gt;grep&lt;/code&gt;.</source>
          <target state="translated">一致しない文字の1つとして改行が指定されていない限り、補完された代替文字は改行と一致できます。これは、 &lt;code&gt;grep&lt;/code&gt; などのプログラムでの正規表現の処理とは対照的です。</target>
        </trans-unit>
        <trans-unit id="ba456a01d8ae77fc51576a8cf54c1d1c946d7a68" translate="yes" xml:space="preserve">
          <source>A compromise is to set it to a positive number. This means that cached values are used for that amount of seconds since they were cached. If a remote file is checked regularly, it might be a good idea to let-bind this variable to a value less than the time period between consecutive checks. For example:</source>
          <target state="translated">妥協点は、正の数に設定することです。これは、キャッシュされた値がキャッシュされてからその秒数だけ使用されることを意味します。リモートファイルが定期的にチェックされる場合は、この変数を連続したチェックの間の期間よりも短い値にバインドするのが良いアイデアかもしれません。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="91e9b79d51b851733226729b9b7576c7c693a1aa" translate="yes" xml:space="preserve">
          <source>A condition variable is associated with a mutex and, conceptually, with some condition. For proper operation, the mutex must be acquired, and then a waiting thread must loop, testing the condition and waiting on the condition variable. For example:</source>
          <target state="translated">条件変数はミューテックスに関連付けられており、概念的には何らかの条件に関連付けられています。適切に動作させるためには、ミューテックスを取得し、待機中のスレッドがループして条件をテストし、条件変数を待たなければなりません。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="3650f8c5497d7228961bb8ca2c4d9289b5d66fe8" translate="yes" xml:space="preserve">
          <source>A cons cell of the form &lt;code&gt;(:filtered&amp;nbsp;&lt;var&gt;filter&lt;/var&gt;&amp;nbsp;&lt;var&gt;face-spec&lt;/var&gt;)&lt;/code&gt;, that specifies the face given by &lt;var&gt;face-spec&lt;/var&gt;, but only if &lt;var&gt;filter&lt;/var&gt; matches when the face is used for display. The &lt;var&gt;face-spec&lt;/var&gt; can use any of the forms mentioned above. The &lt;var&gt;filter&lt;/var&gt; should be of the form &lt;code&gt;(:window&amp;nbsp;&lt;var&gt;param&lt;/var&gt;&amp;nbsp;&lt;var&gt;value&lt;/var&gt;)&lt;/code&gt;, which matches for windows whose parameter &lt;var&gt;param&lt;/var&gt; is &lt;code&gt;eq&lt;/code&gt; to &lt;var&gt;value&lt;/var&gt;. If the variable &lt;code&gt;face-filters-always-match&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, all face filters are deemed to have matched.</source>
          <target state="translated">フォームのコンス・セル &lt;code&gt;(:filtered&amp;nbsp;&lt;var&gt;filter&lt;/var&gt;&amp;nbsp;&lt;var&gt;face-spec&lt;/var&gt;)&lt;/code&gt; 、ことを指定することによって与えられる顔 &lt;var&gt;face-spec&lt;/var&gt; が、場合にのみ、 &lt;var&gt;filter&lt;/var&gt; マッチ顔を表示するために使用されます。 &lt;var&gt;face-spec&lt;/var&gt; 上記形態のいずれかを使用することができます。 &lt;var&gt;filter&lt;/var&gt; フォームでなければならない &lt;code&gt;(:window&amp;nbsp;&lt;var&gt;param&lt;/var&gt;&amp;nbsp;&lt;var&gt;value&lt;/var&gt;)&lt;/code&gt; 、そのパラメータウィンドウの一致 &lt;var&gt;param&lt;/var&gt; ある &lt;code&gt;eq&lt;/code&gt; の &lt;var&gt;value&lt;/var&gt; 。変数 &lt;code&gt;face-filters-always-match&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の場合、すべての顔フィルターが一致したと見なされます。</target>
        </trans-unit>
        <trans-unit id="d8271db68f51039072c221d4ef9ab0b74c409c21" translate="yes" xml:space="preserve">
          <source>A cons cell of the form &lt;code&gt;(foreground-color . &lt;var&gt;color-name&lt;/var&gt;)&lt;/code&gt; or &lt;code&gt;(background-color . &lt;var&gt;color-name&lt;/var&gt;)&lt;/code&gt;. This specifies the foreground or background color, similar to &lt;code&gt;(:foreground
&lt;var&gt;color-name&lt;/var&gt;)&lt;/code&gt; or &lt;code&gt;(:background &lt;var&gt;color-name&lt;/var&gt;)&lt;/code&gt;. This form is supported for backward compatibility only, and should be avoided.</source>
          <target state="translated">&lt;code&gt;(foreground-color . &lt;var&gt;color-name&lt;/var&gt;)&lt;/code&gt; または &lt;code&gt;(background-color . &lt;var&gt;color-name&lt;/var&gt;)&lt;/code&gt; の形式のconsセル。これは、 &lt;code&gt;(:foreground &lt;var&gt;color-name&lt;/var&gt;)&lt;/code&gt; または &lt;code&gt;(:background &lt;var&gt;color-name&lt;/var&gt;)&lt;/code&gt; と同様に、前景色または背景色を指定します。この形式は下位互換性のためにのみサポートされており、避ける必要があります。</target>
        </trans-unit>
        <trans-unit id="d03a2fa230ce48add85f00959d667fc812d94873" translate="yes" xml:space="preserve">
          <source>A cons cell of this format is a raw syntax descriptor (see &lt;a href=&quot;syntax-table-internals#Syntax-Table-Internals&quot;&gt;Syntax Table Internals&lt;/a&gt;), which directly specifies a syntax class for the underlying text character.</source>
          <target state="translated">この形式のconsセルは、生の構文記述子（&lt;a href=&quot;syntax-table-internals#Syntax-Table-Internals&quot;&gt;構文テーブルの内部を&lt;/a&gt;参照）であり、基になるテキスト文字の構文クラスを直接指定します。</target>
        </trans-unit>
        <trans-unit id="5238f872a1ac4dba38c3a3004ec3ed1655dc4fed" translate="yes" xml:space="preserve">
          <source>A cons cell refers to all the characters in the inclusive range &amp;lsquo;</source>
          <target state="translated">短所セルは、包括的範囲内のすべての文字を参照します '</target>
        </trans-unit>
        <trans-unit id="1ec89aacc5165a1fe6d3ad709f5d8ebc96163844" translate="yes" xml:space="preserve">
          <source>A cons of the horizontal and vertical width of &lt;var&gt;frame&lt;/var&gt;&amp;rsquo;s external borders as supplied by the window manager. If the window manager doesn&amp;rsquo;t supply these values, Emacs will try to guess them from the coordinates of the outer and inner frame.</source>
          <target state="translated">ウィンドウマネージャによって提供される、 &lt;var&gt;frame&lt;/var&gt; の外側の境界線の水平方向と垂直方向の幅の短所。ウィンドウマネージャーがこれらの値を提供しない場合、Emacsは外側と内側のフレームの座標からそれらを推測しようとします。</target>
        </trans-unit>
        <trans-unit id="0beb20967e7325f22b981dd3f01c49dfbca35c06" translate="yes" xml:space="preserve">
          <source>A cons of the outer width and height of &lt;var&gt;frame&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;frame&lt;/var&gt; 外側の幅と高さの短所。</target>
        </trans-unit>
        <trans-unit id="79343f6085ac302ef9fa3a97ea5eeac739cb4772" translate="yes" xml:space="preserve">
          <source>A cons of the width and height of the menu bar of &lt;var&gt;frame&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;frame&lt;/var&gt; メニューバーの幅と高さの短所。</target>
        </trans-unit>
        <trans-unit id="5f12a3cec98da0d7b3d27d5bc62141f964a4c280" translate="yes" xml:space="preserve">
          <source>A cons of the width and height of the title bar of &lt;var&gt;frame&lt;/var&gt; as supplied by the window manager or operating system. If both of them are zero, the frame has no title bar. If only the width is zero, Emacs was not able to retrieve the width information.</source>
          <target state="translated">ウィンドウマネージャーまたはオペレーティングシステムによって提供される、 &lt;var&gt;frame&lt;/var&gt; のタイトルバーの幅と高さの短所。両方がゼロの場合、フレームにはタイトルバーがありません。幅だけがゼロの場合、Emacsは幅情報を取得できませんでした。</target>
        </trans-unit>
        <trans-unit id="c58e8cae6440fd807e647cdf99797dc30cefd036" translate="yes" xml:space="preserve">
          <source>A cons of the width and height of the tool bar of &lt;var&gt;frame&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;frame&lt;/var&gt; ツールバーの幅と高さの短所。</target>
        </trans-unit>
        <trans-unit id="f9033693e3f5a3c88a76aad01d35ab20eafc8a92" translate="yes" xml:space="preserve">
          <source>A cons representing the absolute position of the outer &lt;var&gt;frame&lt;/var&gt;, relative to the origin at position (0, 0) of &lt;var&gt;frame&lt;/var&gt;&amp;rsquo;s display.</source>
          <target state="translated">&lt;var&gt;frame&lt;/var&gt; の表示の位置（0、0）での原点を基準とした、外側 &lt;var&gt;frame&lt;/var&gt; 絶対位置を表す短所。</target>
        </trans-unit>
        <trans-unit id="9b4eb54eabadc737377233ef8ded968fd41e2deb" translate="yes" xml:space="preserve">
          <source>A construct defined in Lisp, which differs from a function in that it translates a Lisp expression into another expression which is to be evaluated instead of the original expression. Macros enable Lisp programmers to do the sorts of things that special forms can do. See &lt;a href=&quot;macros#Macros&quot;&gt;Macros&lt;/a&gt;.</source>
          <target state="translated">Lispで定義された構造。これは、Lisp式を、元の式の代わりに評価される別の式に変換するという点で関数とは異なります。マクロを使用すると、Lispプログラマーは特別なフォームで実行できるようなことを実行できます。&lt;a href=&quot;macros#Macros&quot;&gt;マクロを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="25f94db633d9470e92b721c0609e1574933b7102" translate="yes" xml:space="preserve">
          <source>A convenience macro for making menus.</source>
          <target state="translated">メニューを作るための便利なマクロです。</target>
        </trans-unit>
        <trans-unit id="3fafa14ddeeaf20f1b4ad6912b65d2d19616adec" translate="yes" xml:space="preserve">
          <source>A convenient facility for defining minor modes.</source>
          <target state="translated">マイナーモードを定義するための便利な施設。</target>
        </trans-unit>
        <trans-unit id="297d6bae1b885556c226c6d00dbbeb28f22842b0" translate="yes" xml:space="preserve">
          <source>A convenient way to set up and update a package archive is via the &lt;code&gt;package-x&lt;/code&gt; library. This is included with Emacs, but not loaded by default; type</source>
          <target state="translated">パッケージアーカイブを設定および更新する便利な方法は、 &lt;code&gt;package-x&lt;/code&gt; ライブラリを使用することです。これはEmacsに含まれていますが、デフォルトではロードされません。タイプ</target>
        </trans-unit>
        <trans-unit id="2e0cc653b247cb03dc9702d2d54a86897be33e6a" translate="yes" xml:space="preserve">
          <source>A convention for use of &lt;code&gt;buffer-invisibility-spec&lt;/code&gt; is that a major mode should use the mode&amp;rsquo;s own name as an element of &lt;code&gt;buffer-invisibility-spec&lt;/code&gt; and as the value of the &lt;code&gt;invisible&lt;/code&gt; property:</source>
          <target state="translated">&lt;code&gt;buffer-invisibility-spec&lt;/code&gt; の使用規則では、メジャーモードでは、モード自体の名前を &lt;code&gt;buffer-invisibility-spec&lt;/code&gt; の要素として、および &lt;code&gt;invisible&lt;/code&gt; プロパティの値として使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0095e662bacaddef74e80e8571b0f884034dde11" translate="yes" xml:space="preserve">
          <source>A debugger for the Emacs Lisp evaluator.</source>
          <target state="translated">Emacs Lisp 評価器のデバッガです。</target>
        </trans-unit>
        <trans-unit id="c27aa099ef5cc29a5bab61fb80b9be59f07e143f" translate="yes" xml:space="preserve">
          <source>A declare form, as described in &lt;a href=&quot;declare-form#Declare-Form&quot;&gt;Declare Form&lt;/a&gt;.</source>
          <target state="translated">宣言フォームで説明されている&lt;a href=&quot;declare-form#Declare-Form&quot;&gt;宣言フォーム&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1be6fff32246cce77eab4434395816c475968954" translate="yes" xml:space="preserve">
          <source>A default value of some sort is used if the user enters no text in the minibuffer. The default depends on the code character.</source>
          <target state="translated">ユーザーがミニバッファにテキストを入力しなかった場合、何らかの種類のデフォルト値が使用されます。デフォルト値はコード文字に依存します。</target>
        </trans-unit>
        <trans-unit id="3c9c4af7e022e7df38dd0e315a210ed85a2953a6" translate="yes" xml:space="preserve">
          <source>A defining form is not required to have a name field; and it may have multiple name fields.</source>
          <target state="translated">定義フォームは名前フィールドを持つ必要はなく、複数の名前フィールドを持つことができます。</target>
        </trans-unit>
        <trans-unit id="5177ad8b95e4d0810b23a049c7d8aa0b5c5cdcd6" translate="yes" xml:space="preserve">
          <source>A definition says a symbol is used as a variable.</source>
          <target state="translated">定義によると、記号は変数として使われます。</target>
        </trans-unit>
        <trans-unit id="de08378d88f315c9fa8938316807fbbd8ff34ed7" translate="yes" xml:space="preserve">
          <source>A definition says how a symbol will be used.</source>
          <target state="translated">定義では、記号がどのように使われるかを述べています。</target>
        </trans-unit>
        <trans-unit id="4364a7b67be2475f663e63107ec953eb81d8fcc0" translate="yes" xml:space="preserve">
          <source>A deleted overlay is not permanently disconnected. You can give it a position in a buffer again by calling &lt;code&gt;move-overlay&lt;/code&gt;.</source>
          <target state="translated">削除されたオーバーレイは完全に切断されません。 &lt;code&gt;move-overlay&lt;/code&gt; を呼び出すことにより、バッファ内の位置を再度指定できます。</target>
        </trans-unit>
        <trans-unit id="58b8939e754501ca7ffac5e754a5203fd8bccd0b" translate="yes" xml:space="preserve">
          <source>A description of an imaginary function, &lt;code&gt;foo&lt;/code&gt;.</source>
          <target state="translated">虚数関数 &lt;code&gt;foo&lt;/code&gt; の説明。</target>
        </trans-unit>
        <trans-unit id="11aa25b3cc19f2ea9549c34581688b4bf0ea0136" translate="yes" xml:space="preserve">
          <source>A description of an imaginary variable, &lt;code&gt;electric-future-map&lt;/code&gt;.</source>
          <target state="translated">架空の変数、 &lt;code&gt;electric-future-map&lt;/code&gt; の説明。</target>
        </trans-unit>
        <trans-unit id="1f73f21e9e7cf5032ba1e7628c65d4b74eb715d3" translate="yes" xml:space="preserve">
          <source>A detailed explanation of ACLs and SELinux is beyond the scope of this manual. For our purposes, each file can be associated with an &lt;em&gt;ACL&lt;/em&gt;, which specifies its properties under an ACL-based file control system, and/or an &lt;em&gt;SELinux context&lt;/em&gt;, which specifies its properties under the SELinux system.</source>
          <target state="translated">ACLとSELinuxの詳細な説明は、このマニュアルの範囲を超えています。我々の目的のために、各ファイルに関連付けることができる&lt;em&gt;ACL&lt;/em&gt; ACLベースのファイル管理システムの下で、そのプロパティを指定し、および/または&lt;em&gt;SELinuxのコンテキスト&lt;/em&gt;SELinuxのシステムの下でそのプロパティを指定し、。</target>
        </trans-unit>
        <trans-unit id="e1955b79f8229f08318c426ea757222c4442b725" translate="yes" xml:space="preserve">
          <source>A deterministic computer program cannot generate true random numbers. For most purposes, &lt;em&gt;pseudo-random numbers&lt;/em&gt; suffice. A series of pseudo-random numbers is generated in a deterministic fashion. The numbers are not truly random, but they have certain properties that mimic a random series. For example, all possible values occur equally often in a pseudo-random series.</source>
          <target state="translated">決定論的なコンピュータプログラムは、真の乱数を生成できません。ほとんどの場合、&lt;em&gt;疑似乱数で&lt;/em&gt;十分です。一連の疑似乱数は、決定論的な方法で生成されます。数字は本当にランダムではありませんが、ランダムな系列を模倣する特定のプロパティがあります。たとえば、すべての可能な値は、疑似乱数系列で同じ頻度で発生します。</target>
        </trans-unit>
        <trans-unit id="43e7ef970f24cac5d7645fe4b91714542c027a79" translate="yes" xml:space="preserve">
          <source>A dialog box is a variant of a pop-up menu&amp;mdash;it looks a little different, it always appears in the center of a frame, and it has just one level and one or more buttons. The main use of dialog boxes is for asking questions that the user can answer with &amp;ldquo;yes&amp;rdquo;, &amp;ldquo;no&amp;rdquo;, and a few other alternatives. With a single button, they can also force the user to acknowledge important information. The functions &lt;code&gt;y-or-n-p&lt;/code&gt; and &lt;code&gt;yes-or-no-p&lt;/code&gt; use dialog boxes instead of the keyboard, when called from commands invoked by mouse clicks.</source>
          <target state="translated">ダイアログボックスはポップアップメニューの変形です。外観は少し異なり、常にフレームの中央に表示され、1つのレベルと1つ以上のボタンがあります。ダイアログボックスの主な用途は、ユーザーが「はい」、「いいえ」、およびその他のいくつかの選択肢で答えることができる質問をすることです。ボタン1つで、ユーザーに重要な情報を確認させることもできます。関数 &lt;code&gt;y-or-n-p&lt;/code&gt; および &lt;code&gt;yes-or-no-p&lt;/code&gt; は、マウスクリックによって呼び出されたコマンドから呼び出されると、キーボードの代わりにダイアログボックスを使用します。</target>
        </trans-unit>
        <trans-unit id="06e671a1ddbd1bf37d315d97dcc27b3ed2c2dee1" translate="yes" xml:space="preserve">
          <source>A different type of local variable binding.</source>
          <target state="translated">異なるタイプのローカル変数バインディング。</target>
        </trans-unit>
        <trans-unit id="0091e52ca1a33dbd15c5a00528bef096a86ddc65" translate="yes" xml:space="preserve">
          <source>A different way to remove the instrumentation from a definition is to use the &lt;code&gt;edebug-remove-instrumentation&lt;/code&gt; command. It also allows removing the instrumentation from everything that has been instrumented.</source>
          <target state="translated">インストルメンテーションを定義から削除する別の方法は、 &lt;code&gt;edebug-remove-instrumentation&lt;/code&gt; コマンドを使用することです。また、インストルメントされたすべてのものからインストルメンテーションを削除することもできます。</target>
        </trans-unit>
        <trans-unit id="1e5fced30518a6cc177c6f9f8661843eb09981dd" translate="yes" xml:space="preserve">
          <source>A directory can specify local variable values common to all files in that directory; Emacs uses these to create buffer-local bindings for those variables in buffers visiting any file in that directory. This is useful when the files in the directory belong to some &lt;em&gt;project&lt;/em&gt; and therefore share the same local variables.</source>
          <target state="translated">ディレクトリは、そのディレクトリ内のすべてのファイルに共通のローカル変数値を指定できます。Emacsはこれらを使用して、そのディレクトリ内の任意のファイルにアクセスするバッファ内の変数のバッファローカルバインディングを作成します。これは、ディレクトリ内のファイルが特定の&lt;em&gt;プロジェクトに&lt;/em&gt;属しているため、同じローカル変数を共有している場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="48d989c612224004f5b20619066f4e6b19f37178" translate="yes" xml:space="preserve">
          <source>A directory is a kind of file that contains other files entered under various names. Directories are a feature of the file system.</source>
          <target state="translated">ディレクトリとは、様々な名前で入力された他のファイルが入っているファイルの一種です。ディレクトリはファイルシステムの機能の一つです。</target>
        </trans-unit>
        <trans-unit id="4ec31203fbb74e0088be167ac30971d85d3c047f" translate="yes" xml:space="preserve">
          <source>A directory&amp;rsquo;s name as a directory is different from its name as a file.</source>
          <target state="translated">ディレクトリとしてのディレクトリの名前は、ファイルとしての名前とは異なります。</target>
        </trans-unit>
        <trans-unit id="a2d4ede6ec1806c95321d5345fff475d6f0aebcd" translate="yes" xml:space="preserve">
          <source>A directory. The default is the current default directory of the current buffer, &lt;code&gt;default-directory&lt;/code&gt; (see &lt;a href=&quot;file-name-expansion#File-Name-Expansion&quot;&gt;File Name Expansion&lt;/a&gt;). Existing, Completion, Default, Prompt.</source>
          <target state="translated">ディレクトリ。デフォルトは、現在のバッファの現在のデフォルトディレクトリである &lt;code&gt;default-directory&lt;/code&gt; です（&lt;a href=&quot;file-name-expansion#File-Name-Expansion&quot;&gt;ファイル名の拡張を&lt;/a&gt;参照）。既存、完了、デフォルト、プロンプト。</target>
        </trans-unit>
        <trans-unit id="aebf276f3f9ef6b6d78e048e8f10f2d90ee89099" translate="yes" xml:space="preserve">
          <source>A display specification of this form means to display &lt;var&gt;string&lt;/var&gt; instead of the text that has the display specification, at the same position as that text. It is equivalent to using just &lt;var&gt;string&lt;/var&gt;, but it is done as a special case of marginal display (see &lt;a href=&quot;display-margins#Display-Margins&quot;&gt;Display Margins&lt;/a&gt;).</source>
          <target state="translated">この形式の表示仕様とは、表示仕様のあるテキストの代わりに、そのテキストと同じ位置に &lt;var&gt;string&lt;/var&gt; を表示することを意味します。 &lt;var&gt;string&lt;/var&gt; だけを使用するのと同じですが、マージナル表示の特殊なケースとして実行されます（「&lt;a href=&quot;display-margins#Display-Margins&quot;&gt;マージンの&lt;/a&gt;表示」を参照）。</target>
        </trans-unit>
        <trans-unit id="9161760d8a3ca941a9db98a283106b4f587110f2" translate="yes" xml:space="preserve">
          <source>A display table is a special-purpose char-table (see &lt;a href=&quot;char_002dtables#Char_002dTables&quot;&gt;Char-Tables&lt;/a&gt;), with &lt;code&gt;display-table&lt;/code&gt; as its subtype, which is used to override the usual character display conventions. This section describes how to make, inspect, and assign elements to a display table object.</source>
          <target state="translated">表示テーブルは特別な目的のchar-table（&lt;a href=&quot;char_002dtables#Char_002dTables&quot;&gt;Char-Tablesを&lt;/a&gt;参照）であり、サブタイプとして &lt;code&gt;display-table&lt;/code&gt; があり、通常の文字表示規則をオーバーライドするために使用されます。このセクションでは、要素を作成、検査、および表示テーブルオブジェクトに割り当てる方法について説明します。</target>
        </trans-unit>
        <trans-unit id="52695f4559e95ed4fd291753560c2fbe430d0669" translate="yes" xml:space="preserve">
          <source>A documentation string for the format.</source>
          <target state="translated">フォーマットのドキュメント文字列。</target>
        </trans-unit>
        <trans-unit id="6763620e7fdbc8305a10cc9edc12970524216315" translate="yes" xml:space="preserve">
          <source>A documentation string is written using the Lisp syntax for strings, with double-quote characters surrounding the text. It is, in fact, an actual Lisp string. When the string appears in the proper place in a function or variable definition, it serves as the function&amp;rsquo;s or variable&amp;rsquo;s documentation.</source>
          <target state="translated">ドキュメント文字列は、文字列のLisp構文を使用して記述され、テキストを二重引用符で囲みます。実際、これは実際のLisp文字列です。文字列が関数または変数の定義の適切な場所に表示されると、関数または変数のドキュメントとして機能します。</target>
        </trans-unit>
        <trans-unit id="14c8ca9284b667313f9526899ae4f3c60147c600" translate="yes" xml:space="preserve">
          <source>A double dashed line in the menu&amp;rsquo;s foreground color.</source>
          <target state="translated">メニューの前景色の二重破線。</target>
        </trans-unit>
        <trans-unit id="813cbcdafcb879f3a5a1bf64906fb09751530f37" translate="yes" xml:space="preserve">
          <source>A double line in the menu&amp;rsquo;s foreground color.</source>
          <target state="translated">メニューの前景色の二重線。</target>
        </trans-unit>
        <trans-unit id="d311dc731460b00910cb74c5f2364a3a8671a3b6" translate="yes" xml:space="preserve">
          <source>A doubly-linked chain of &lt;em&gt;nodes&lt;/em&gt;, each of which contains:</source>
          <target state="translated">二重にリンクされた&lt;em&gt;ノードの&lt;/em&gt;チェーン。各&lt;em&gt;ノード&lt;/em&gt;には次のものが含まれます。</target>
        </trans-unit>
        <trans-unit id="670af85a0c88c05fba929b7f913f66bc95166bf6" translate="yes" xml:space="preserve">
          <source>A face defines a graphics style for text characters: font, colors, etc.</source>
          <target state="translated">顔は、テキスト文字のグラフィックスタイルを定義します。</target>
        </trans-unit>
        <trans-unit id="726bfb1c0aec1ad9ae708b0d3d1b5d85a1cfcd7c" translate="yes" xml:space="preserve">
          <source>A face name (a symbol or string).</source>
          <target state="translated">顔の名前(記号や文字列)。</target>
        </trans-unit>
        <trans-unit id="4514d72359a84b597e6e68ca7f1afce732ca5d0d" translate="yes" xml:space="preserve">
          <source>A feature name is a symbol that stands for a collection of functions, variables, etc. The file that defines them should &lt;em&gt;provide&lt;/em&gt; the feature. Another program that uses them may ensure they are defined by &lt;em&gt;requiring&lt;/em&gt; the feature. This loads the file of definitions if it hasn&amp;rsquo;t been loaded already.</source>
          <target state="translated">機能名は、関数、変数などのコレクションを表す記号です。それらを定義するファイルは、機能を&lt;em&gt;提供&lt;/em&gt;する必要&lt;em&gt;が&lt;/em&gt;あります。それらを使用する別のプログラムは、機能を&lt;em&gt;要求&lt;/em&gt;することによってそれらが定義されていることを確認する場合があります。まだロードされていない場合、これは定義のファイルをロードします。</target>
        </trans-unit>
        <trans-unit id="99c5746bfcdeb35c064b9bea4ccd10d38344ce46" translate="yes" xml:space="preserve">
          <source>A few Lisp variables are &lt;em&gt;terminal-local&lt;/em&gt;; that is, they have a separate binding for each terminal. The binding in effect at any time is the one for the terminal that the currently selected frame belongs to. These variables include &lt;code&gt;default-minibuffer-frame&lt;/code&gt;, &lt;code&gt;defining-kbd-macro&lt;/code&gt;, &lt;code&gt;last-kbd-macro&lt;/code&gt;, and &lt;code&gt;system-key-alist&lt;/code&gt;. They are always terminal-local, and can never be buffer-local (see &lt;a href=&quot;buffer_002dlocal-variables#Buffer_002dLocal-Variables&quot;&gt;Buffer-Local Variables&lt;/a&gt;).</source>
          <target state="translated">いくつかのLisp変数は&lt;em&gt;ターミナルローカル&lt;/em&gt;です;つまり、端末ごとに個別のバインディングがあります。いつでも有効なバインディングは、現在選択されているフレームが属する端末のバインディングです。これらの変数には、 &lt;code&gt;default-minibuffer-frame&lt;/code&gt; 、 &lt;code&gt;defining-kbd-macro&lt;/code&gt; 、 &lt;code&gt;last-kbd-macro&lt;/code&gt; 、および &lt;code&gt;system-key-alist&lt;/code&gt; が含まれます。これらは常にターミナルローカルであり、バッファローカルになることはできません（&lt;a href=&quot;buffer_002dlocal-variables#Buffer_002dLocal-Variables&quot;&gt;バッファローカル変数を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="ef5e8cbc36482886f084f025163f8eb73160f6da" translate="yes" xml:space="preserve">
          <source>A few fundamental object types are built into Emacs. These, from which all other types are constructed, are called &lt;em&gt;primitive types&lt;/em&gt;. Each object belongs to one and only one primitive type. These types include &lt;em&gt;integer&lt;/em&gt;, &lt;em&gt;float&lt;/em&gt;, &lt;em&gt;cons&lt;/em&gt;, &lt;em&gt;symbol&lt;/em&gt;, &lt;em&gt;string&lt;/em&gt;, &lt;em&gt;vector&lt;/em&gt;, &lt;em&gt;hash-table&lt;/em&gt;, &lt;em&gt;subr&lt;/em&gt;, &lt;em&gt;byte-code function&lt;/em&gt;, and &lt;em&gt;record&lt;/em&gt;, plus several special types, such as &lt;em&gt;buffer&lt;/em&gt;, that are related to editing. (See &lt;a href=&quot;editing-types#Editing-Types&quot;&gt;Editing Types&lt;/a&gt;.)</source>
          <target state="translated">いくつかの基本的なオブジェクトタイプがEmacsに組み込まれています。これらは、他のすべての型が構築される元であり、&lt;em&gt;プリミティブ型&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。各オブジェクトは、1つのプリミティブ型にのみ属します。これらのタイプには、&lt;em&gt;integer&lt;/em&gt;、&lt;em&gt;float&lt;/em&gt;、&lt;em&gt;cons&lt;/em&gt;、&lt;em&gt;symbol&lt;/em&gt;、&lt;em&gt;string&lt;/em&gt;、&lt;em&gt;vector&lt;/em&gt;、&lt;em&gt;hash-table&lt;/em&gt;、&lt;em&gt;subr&lt;/em&gt;、&lt;em&gt;byte-code function&lt;/em&gt;、&lt;em&gt;record&lt;/em&gt;に加えて、編集に関連する&lt;em&gt;buffer&lt;/em&gt;などのいくつかの特別なタイプが含まれます。 （&lt;a href=&quot;editing-types#Editing-Types&quot;&gt;タイプの編集を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="2109a9b0cfa4198eb2ea0694b1fee3a782f0b966" translate="yes" xml:space="preserve">
          <source>A few other event types represent occurrences within the system.</source>
          <target state="translated">他のいくつかのイベントタイプは、システム内での発生を表しています。</target>
        </trans-unit>
        <trans-unit id="1ff9d92dab390c666f58e186968e826c0b79fcf0" translate="yes" xml:space="preserve">
          <source>A few things to note:</source>
          <target state="translated">注意すべき点をいくつか。</target>
        </trans-unit>
        <trans-unit id="86b66daa5d856aaa51ac94ff6f958584a9ddc1e1" translate="yes" xml:space="preserve">
          <source>A field is a range of consecutive characters in the buffer that are identified by having the same value (comparing with &lt;code&gt;eq&lt;/code&gt;) of the &lt;code&gt;field&lt;/code&gt; property (either a text-property or an overlay property). This section describes special functions that are available for operating on fields.</source>
          <target state="translated">フィールドは、 &lt;code&gt;field&lt;/code&gt; プロパティ（テキストプロパティまたはオーバーレイプロパティのいずれか）と同じ値（ &lt;code&gt;eq&lt;/code&gt; と比較して）を持つことによって識別される、バッファ内の連続する文字の範囲です。このセクションでは、フィールドでの操作に使用できる特別な機能について説明します。</target>
        </trans-unit>
        <trans-unit id="2edac8714c37f5d4697daa8ef9c7fbc14208533e" translate="yes" xml:space="preserve">
          <source>A field specification generally has the form &lt;code&gt;([&lt;var&gt;name&lt;/var&gt;]
&lt;var&gt;handler&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;name&lt;/var&gt; is optional. Don&amp;rsquo;t use names that are symbols meaningful as type specifications (above) or handler specifications (below), since that would be ambiguous. &lt;var&gt;name&lt;/var&gt; can be a symbol or an expression &lt;code&gt;(eval &lt;var&gt;form&lt;/var&gt;)&lt;/code&gt;, in which case &lt;var&gt;form&lt;/var&gt; should evaluate to a symbol.</source>
          <target state="translated">フィールド指定の形式は通常 &lt;code&gt;([&lt;var&gt;name&lt;/var&gt;] &lt;var&gt;handler&lt;/var&gt;)&lt;/code&gt; で、 &lt;var&gt;name&lt;/var&gt; はオプションです。型の仕様（上）またはハンドラーの仕様（下）として意味のある記号である名前は、あいまいになるため、使用しないでください。 &lt;var&gt;name&lt;/var&gt; は、シンボルまたは式 &lt;code&gt;(eval &lt;var&gt;form&lt;/var&gt;)&lt;/code&gt; にすることができます。この場合、 &lt;var&gt;form&lt;/var&gt; はシンボルに評価されます。</target>
        </trans-unit>
        <trans-unit id="66e349966ac46496fe078cf6419a73b28e3d4fe7" translate="yes" xml:space="preserve">
          <source>A field&amp;rsquo;s &lt;em&gt;type&lt;/em&gt; describes the size (in bytes) of the object that the field represents and, in the case of multibyte fields, how the bytes are ordered within the field. The two possible orderings are &lt;em&gt;big endian&lt;/em&gt; (also known as &amp;ldquo;network byte ordering&amp;rdquo;) and &lt;em&gt;little endian&lt;/em&gt;. For instance, the number &lt;code&gt;#x23cd&lt;/code&gt; (decimal 9165) in big endian would be the two bytes &lt;code&gt;#x23&lt;/code&gt;&lt;code&gt;#xcd&lt;/code&gt;; and in little endian, &lt;code&gt;#xcd&lt;/code&gt;&lt;code&gt;#x23&lt;/code&gt;. Here are the possible type values:</source>
          <target state="translated">フィールドの&lt;em&gt;タイプ&lt;/em&gt;は、フィールドが表すオブジェクトのサイズ（バイト単位）と、マルチバイトフィールドの場合は、フィールド内でのバイトの順序を示します。考えられる2つの順序は、&lt;em&gt;ビッグエンディアン&lt;/em&gt;（「ネットワークバイト順序」とも呼ばれます）と&lt;em&gt;リトルエンディアン&lt;/em&gt;です。たとえば、ビッグエンディアンの数値 &lt;code&gt;#x23cd&lt;/code&gt; （10進数の9165）は、2バイトの &lt;code&gt;#x23&lt;/code&gt; # &lt;code&gt;#xcd&lt;/code&gt; ます。リトルエンディアンでは、 &lt;code&gt;#x23&lt;/code&gt; &lt;code&gt;#xcd&lt;/code&gt; ＃x23です。可能なタイプ値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="580694942b3d2554858d2f62daeabff74c0c3401" translate="yes" xml:space="preserve">
          <source>A file and a buffer are two different things. A file is information recorded permanently in the computer (unless you delete it). A buffer, on the other hand, is information inside of Emacs that will vanish at the end of the editing session (or when you kill the buffer). When a buffer is visiting a file, it contains information copied from the file. The copy in the buffer is what you modify with editing commands. Changes to the buffer do not change the file; to make the changes permanent, you must &lt;em&gt;save&lt;/em&gt; the buffer, which means copying the altered buffer contents back into the file.</source>
          <target state="translated">ファイルとバッファは2つの異なるものです。ファイルは、コンピューターに永続的に記録される情報です（ファイルを削除しない限り）。一方、バッファは、編集セッションの終了時（またはバッファを強制終了したとき）に消えるEmacs内の情報です。バッファがファイルにアクセスしているとき、ファイルからコピーされた情報が含まれています。バッファ内のコピーは、編集コマンドで変更するものです。バッファを変更してもファイルは変更されません。変更を永続的にするには、バッファを&lt;em&gt;保存&lt;/em&gt;する必要があります。つまり、変更されたバッファの内容をファイルにコピーして戻します。</target>
        </trans-unit>
        <trans-unit id="b6520ff9ddc77c2a9c18bbbb20d48bf4fa9f59b0" translate="yes" xml:space="preserve">
          <source>A file can specify local variable values; Emacs uses these to create buffer-local bindings for those variables in the buffer visiting that file. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/File-Variables.html#File-Variables&quot;&gt;Local Variables in Files&lt;/a&gt; in</source>
          <target state="translated">ファイルはローカル変数値を指定できます。Emacsはこれらを使用して、そのファイルにアクセスするバッファー内の変数のバッファーローカルバインディングを作成します。の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/File-Variables.html#File-Variables&quot;&gt;ファイル&lt;/a&gt;内のローカル変数を参照してください</target>
        </trans-unit>
        <trans-unit id="8d614f30d1cecac0c2819f4acd5ac1120709f5e0" translate="yes" xml:space="preserve">
          <source>A file name handler can have an &lt;code&gt;operations&lt;/code&gt; property to declare which operations it handles in a nontrivial way. If this property has a non-&lt;code&gt;nil&lt;/code&gt; value, it should be a list of operations; then only those operations will call the handler. This avoids inefficiency, but its main purpose is for autoloaded handler functions, so that they won&amp;rsquo;t be loaded except when they have real work to do.</source>
          <target state="translated">ファイル名ハンドラーは、 &lt;code&gt;operations&lt;/code&gt; プロパティを使用して、重要な方法で処理する操作を宣言できます。このプロパティの値が &lt;code&gt;nil&lt;/code&gt; 以外の場合は、操作のリストである必要があります。その後、それらの操作のみがハンドラーを呼び出します。これにより非効率性は回避されますが、その主な目的は自動ロードされたハンドラー関数であるため、実際に実行する必要がある場合を除いて、それらはロードされません。</target>
        </trans-unit>
        <trans-unit id="1088e5bc43c1b7e8706e14f51cbd3a0578264ad7" translate="yes" xml:space="preserve">
          <source>A file name of an existing file (see &lt;a href=&quot;file-names#File-Names&quot;&gt;File Names&lt;/a&gt;). The default directory is &lt;code&gt;default-directory&lt;/code&gt;. Existing, Completion, Default, Prompt.</source>
          <target state="translated">既存のファイルの&lt;a href=&quot;file-names#File-Names&quot;&gt;ファイル名&lt;/a&gt;（「ファイル名」を参照）。デフォルトのディレクトリは &lt;code&gt;default-directory&lt;/code&gt; です。既存、完了、デフォルト、プロンプト。</target>
        </trans-unit>
        <trans-unit id="990b2e19e09d588c791c9ad42c0a10ebbf4a1858" translate="yes" xml:space="preserve">
          <source>A file name. The file need not exist. Completion, Default, Prompt.</source>
          <target state="translated">ファイル名。ファイルは存在しなくても構いません。完了、デフォルト、プロンプト。</target>
        </trans-unit>
        <trans-unit id="03b87a98b8d63d5ce31e62636e7feac61dc6a158" translate="yes" xml:space="preserve">
          <source>A file name. The file need not exist. If the user enters just a directory name, then the value is just that directory name, with no file name within the directory added. Completion, Default, Prompt.</source>
          <target state="translated">ファイル名。ファイルは存在しなくても構いません。ユーザーがディレクトリ名だけを入力した場合、値はそのディレクトリ名だけで、ディレクトリ内のファイル名は追加されません。完了、デフォルト、プロンプト。</target>
        </trans-unit>
        <trans-unit id="f353c7943be8119125e4593f00061ea9a8b8c13d" translate="yes" xml:space="preserve">
          <source>A file of saved abbrev definitions is actually a file of Lisp code. The abbrevs are saved in the form of a Lisp program to define the same abbrev tables with the same contents. Therefore, you can load the file with &lt;code&gt;load&lt;/code&gt; (see &lt;a href=&quot;how-programs-do-loading#How-Programs-Do-Loading&quot;&gt;How Programs Do Loading&lt;/a&gt;). However, the function &lt;code&gt;quietly-read-abbrev-file&lt;/code&gt; is provided as a more convenient interface. Emacs automatically calls this function at startup.</source>
          <target state="translated">保存された略語定義のファイルは、実際にはLispコードのファイルです。略語はLispプログラムの形式で保存され、同じ内容の同じ略語テーブルを定義します。したがって、loadを使用してファイルを &lt;code&gt;load&lt;/code&gt; できます（&lt;a href=&quot;how-programs-do-loading#How-Programs-Do-Loading&quot;&gt;プログラムのロード方法を&lt;/a&gt;参照）。ただし、より便利なインターフェイスとして、 &lt;code&gt;quietly-read-abbrev-file&lt;/code&gt; 関数が提供されています。 Emacsは起動時にこの関数を自動的に呼び出します。</target>
        </trans-unit>
        <trans-unit id="dbf75453e1d8ee103bca7101c95d3ea1b66bfa1e" translate="yes" xml:space="preserve">
          <source>A file that Emacs visits can contain variable settings that affect the buffer visiting that file; See &lt;a href=&quot;file-local-variables#File-Local-Variables&quot;&gt;File Local Variables&lt;/a&gt;. Similarly, a directory can specify local variable values common to all files in that directory; see &lt;a href=&quot;directory-local-variables#Directory-Local-Variables&quot;&gt;Directory Local Variables&lt;/a&gt;. Although Emacs takes some effort to protect against misuse of these variables, a security hole can be created merely by a package setting &lt;code&gt;safe-local-variable&lt;/code&gt; too optimistically, a problem that is all too common. To disable this feature for both files and directories, set &lt;code&gt;enable-local-variables&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">Emacsがアクセスするファイルには、そのファイルにアクセスするバッファーに影響を与える変数設定を含めることができます。&lt;a href=&quot;file-local-variables#File-Local-Variables&quot;&gt;ファイルローカル変数を&lt;/a&gt;参照してください。同様に、ディレクトリは、そのディレクトリ内のすべてのファイルに共通のローカル変数値を指定できます。&lt;a href=&quot;directory-local-variables#Directory-Local-Variables&quot;&gt;ディレクトリローカル変数を&lt;/a&gt;参照してください。 Emacsはこれらの変数の誤用から保護するためにいくらかの努力を払っていますが、セキュリティホールは、パッケージが &lt;code&gt;safe-local-variable&lt;/code&gt; を楽観的に設定しすぎるだけで作成できます。これは、非常に一般的な問題です。ファイルとディレクトリの両方でこの機能を無効にするには、 &lt;code&gt;enable-local-variables&lt;/code&gt; を &lt;code&gt;nil&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="3266b8d29b93dc1eee17b5d16810b5e1424e98d5" translate="yes" xml:space="preserve">
          <source>A filter function must accept two arguments: the associated process and a string, which is output just received from it. The function is then free to do whatever it chooses with the output.</source>
          <target state="translated">フィルタ関数は 2 つの引数を受け取らなければなりません:関連するプロセスと文字列です。そして、この関数はその出力をどうするかは自由です。</target>
        </trans-unit>
        <trans-unit id="0e7a297c1c489e864c66d0212903cca52a20067e" translate="yes" xml:space="preserve">
          <source>A first argument of &lt;code&gt;lambda&lt;/code&gt; means &lt;code&gt;debug&lt;/code&gt; was called because of entry to a function when &lt;code&gt;debug-on-next-call&lt;/code&gt; was non-&lt;code&gt;nil&lt;/code&gt;. The debugger displays &amp;lsquo;</source>
          <target state="translated">&lt;code&gt;lambda&lt;/code&gt; の最初の引数は、 &lt;code&gt;debug-on-next-call&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; 以外のときに関数へのエントリが原因で、 &lt;code&gt;debug&lt;/code&gt; が呼び出されたことを意味します。デバッガーは 'を表示します</target>
        </trans-unit>
        <trans-unit id="e8ddb397b9ffeb8426670eadecdce6f5c08372fe" translate="yes" xml:space="preserve">
          <source>A five-element vector &lt;code&gt;[&lt;var&gt;a&lt;/var&gt; &lt;var&gt;b&lt;/var&gt; &lt;var&gt;c&lt;/var&gt; &lt;var&gt;d&lt;/var&gt; &lt;var&gt;p&lt;/var&gt;]&lt;/code&gt; represents an IPv4 address &lt;var&gt;a&lt;/var&gt;.&lt;var&gt;b&lt;/var&gt;.&lt;var&gt;c&lt;/var&gt;.&lt;var&gt;d&lt;/var&gt; and port number &lt;var&gt;p&lt;/var&gt;. &lt;code&gt;format-network-address&lt;/code&gt; converts that to the string &lt;code&gt;&quot;&lt;var&gt;a&lt;/var&gt;.&lt;var&gt;b&lt;/var&gt;.&lt;var&gt;c&lt;/var&gt;.&lt;var&gt;d&lt;/var&gt;:&lt;var&gt;p&lt;/var&gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">5要素ベクトル &lt;code&gt;[&lt;var&gt;a&lt;/var&gt; &lt;var&gt;b&lt;/var&gt; &lt;var&gt;c&lt;/var&gt; &lt;var&gt;d&lt;/var&gt; &lt;var&gt;p&lt;/var&gt;]&lt;/code&gt; IPv4アドレスを表し &lt;var&gt;a&lt;/var&gt; 。 &lt;var&gt;b&lt;/var&gt; 。 &lt;var&gt;c&lt;/var&gt; 。 &lt;var&gt;d&lt;/var&gt; とポート番号 &lt;var&gt;p&lt;/var&gt; 。 &lt;code&gt;format-network-address&lt;/code&gt; 変換する文字列に &lt;code&gt;&quot;&lt;var&gt;a&lt;/var&gt;.&lt;var&gt;b&lt;/var&gt;.&lt;var&gt;c&lt;/var&gt;.&lt;var&gt;d&lt;/var&gt;:&lt;var&gt;p&lt;/var&gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="294aaabae5d3488734428644aba3718cfd7199de" translate="yes" xml:space="preserve">
          <source>A flag specifying the type of completion operation to perform; see &lt;a href=&quot;basic-completion#Basic-Completion&quot;&gt;Basic Completion&lt;/a&gt;, for the details of those operations. This flag may be one of the following values.</source>
          <target state="translated">実行する完了操作のタイプを指定するフラグ。これらの操作の詳細については、「&lt;a href=&quot;basic-completion#Basic-Completion&quot;&gt;基本的な完了&lt;/a&gt;」を参照してください。このフラグは、次のいずれかの値になります。</target>
        </trans-unit>
        <trans-unit id="85c834e95015be4c5179423bef79b80cc4828fe4" translate="yes" xml:space="preserve">
          <source>A flag, &lt;code&gt;t&lt;/code&gt; if &lt;code&gt;format-write-file&lt;/code&gt; should not remove this format from &lt;code&gt;buffer-file-format&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;format-write-file&lt;/code&gt; が &lt;code&gt;buffer-file-format&lt;/code&gt; からこのフォーマットを削除してはならない場合のフラグ &lt;code&gt;t&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c0b2bfadb17694a552c0239a8fd611c0d489e7e" translate="yes" xml:space="preserve">
          <source>A flag, &lt;code&gt;t&lt;/code&gt; if the encoding function modifies the buffer, and &lt;code&gt;nil&lt;/code&gt; if it works by returning a list of annotations.</source>
          <target state="translated">フラグ。エンコーディング関数がバッファを変更する場合は &lt;code&gt;t&lt;/code&gt; 、注釈のリストを返すことで機能する場合は &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="19d7f1cfc631bf26b90fef20742acf5f863fc6f4" translate="yes" xml:space="preserve">
          <source>A flag, &lt;code&gt;t&lt;/code&gt; if this is really a child process. For a network or serial connection, it is a plist based on the arguments to &lt;code&gt;make-network-process&lt;/code&gt; or &lt;code&gt;make-serial-process&lt;/code&gt;.</source>
          <target state="translated">フラグ、これが本当に子プロセスで &lt;code&gt;t&lt;/code&gt; 場合はt。ネットワークまたはシリアル接続の場合、これは &lt;code&gt;make-network-process&lt;/code&gt; または &lt;code&gt;make-serial-process&lt;/code&gt; への引数に基づくpl​​istです。</target>
        </trans-unit>
        <trans-unit id="d522ef7e7a7eea406919509b9022d018c559d736" translate="yes" xml:space="preserve">
          <source>A floating-point number between 0.0 and 1.0 can be used to specify the width of a frame via its &lt;em&gt;width ratio&lt;/em&gt;&amp;mdash;the ratio of its outer width (see &lt;a href=&quot;frame-geometry#Frame-Geometry&quot;&gt;Frame Geometry&lt;/a&gt;) to the width of the frame&amp;rsquo;s workarea (see &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;) or its parent frame&amp;rsquo;s (see &lt;a href=&quot;child-frames#Child-Frames&quot;&gt;Child Frames&lt;/a&gt;) native frame. Thus, a value of 0.5 makes the frame occupy half of the width of its workarea or parent frame, a value of 1.0 the full width. Similarly, the &lt;em&gt;height ratio&lt;/em&gt; of a frame is the ratio of its outer height to the height of its workarea or its parent&amp;rsquo;s native frame.</source>
          <target state="translated">0.0から1.0までの浮動小数点数を使用して、フレームの&lt;em&gt;幅の比率&lt;/em&gt;（フレームのワークエリア（&lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;複数のターミナルを&lt;/a&gt;参照）またはその親の&lt;em&gt;幅に対する&lt;/em&gt;外側の幅（&lt;a href=&quot;frame-geometry#Frame-Geometry&quot;&gt;フレームジオメトリを&lt;/a&gt;参照）の比率）を介してフレームの幅を指定できます。フレーム（&lt;a href=&quot;child-frames#Child-Frames&quot;&gt;子フレームを&lt;/a&gt;参照）のネイティブフレーム。したがって、値が0.5の場合、フレームはそのワークエリアまたは親フレームの幅の半分を占め、値は1.0の場合は全幅になります。同様に、フレームの&lt;em&gt;高さの比率&lt;/em&gt;は、ワークエリアまたは親のネイティブフレームの高さに対する外側の高さの比率です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="40f779f8938b4859342b30f78c216850c870ebc3" translate="yes" xml:space="preserve">
          <source>A floating-point number specifies the fraction of the chosen window&amp;rsquo;s desired total height with respect to the total height of its frame&amp;rsquo;s root window.</source>
          <target state="translated">浮動小数点数は、フレームのルートウィンドウの全高に対する、選択したウィンドウの目的の全高の割合を指定します。</target>
        </trans-unit>
        <trans-unit id="7b2c9b14e103c32f399869f8f372059ff0758de1" translate="yes" xml:space="preserve">
          <source>A floating-point number specifies the fraction of the chosen window&amp;rsquo;s desired total width with respect to the total width of the frame&amp;rsquo;s root window.</source>
          <target state="translated">浮動小数点数は、フレームのルートウィンドウの全幅に対する、選択したウィンドウの目的の全幅の割合を指定します。</target>
        </trans-unit>
        <trans-unit id="859a186fe1d162639532b367f483e64bb540ab2b" translate="yes" xml:space="preserve">
          <source>A floating-point value in the range 0.0 to 1.0 specifies the left edge&amp;rsquo;s offset via the &lt;em&gt;left position ratio&lt;/em&gt; of the frame&amp;mdash;the ratio of the left edge of its outer frame to the width of the frame&amp;rsquo;s workarea (see &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;) or its parent&amp;rsquo;s native frame (see &lt;a href=&quot;child-frames#Child-Frames&quot;&gt;Child Frames&lt;/a&gt;) minus the width of the outer frame. Thus, a left position ratio of 0.0 flushes a frame to the left, a ratio of 0.5 centers it and a ratio of 1.0 flushes it to the right of its display or parent frame. Similarly, the &lt;em&gt;top position ratio&lt;/em&gt; of a frame is the ratio of the frame&amp;rsquo;s top position to the height of its workarea or parent frame minus the height of the frame.</source>
          <target state="translated">0.0から1.0の範囲の浮動小数点値は、フレームの&lt;em&gt;左位置比&lt;/em&gt;（フレームの作業領域（&lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;複数の端子を&lt;/a&gt;参照）またはその親の幅に対する外枠の左端の比）を介した&lt;em&gt;左端&lt;/em&gt;のオフセットを指定します。ネイティブフレーム（&lt;a href=&quot;child-frames#Child-Frames&quot;&gt;子フレームを&lt;/a&gt;参照）から外枠の幅を引いたもの。したがって、左の位置の比率が0.0の場合はフレームが左にフラッシュされ、比率が0.5の場合はフレームが中央に配置され、比率が1.0の場合はディスプレイまたは親フレームの右側にフラッシュされます。同様に、&lt;em&gt;上部位置比&lt;/em&gt;フレームの、そのワークエリアまたは親フレームの高さを引いたフレームの高さにフレームの先頭位置の比です。</target>
        </trans-unit>
        <trans-unit id="17ea726a541eca726a5fb0cd7e030f18bf5f479f" translate="yes" xml:space="preserve">
          <source>A focus event in the middle of a key sequence would garble the sequence. So Emacs never generates a focus event in the middle of a key sequence. If the user changes focus in the middle of a key sequence&amp;mdash;that is, after a prefix key&amp;mdash;then Emacs reorders the events so that the focus event comes either before or after the multi-event key sequence, and not within it.</source>
          <target state="translated">キーシーケンスの途中でフォーカスイベントが発生すると、シーケンスが文字化けします。したがって、Emacsはキーシーケンスの途中でフォーカスイベントを生成することはありません。ユーザーがキーシーケンスの途中、つまりプレフィックスキーの後にフォーカスを変更すると、Emacsはイベントを並べ替えて、フォーカスイベントがマルチイベントキーシーケンスの前または後に発生し、その中には発生しないようにします。</target>
        </trans-unit>
        <trans-unit id="f412cfc73d389d8e515cd608573b4a6a5a02234e" translate="yes" xml:space="preserve">
          <source>A font entity is a reference to a font that need not be open. Its properties are intermediate between a font object and a font spec: like a font object, and unlike a font spec, it refers to a single, specific font. Unlike a font object, creating a font entity does not load the contents of that font into computer memory. Emacs may open multiple font objects of different sizes from a single font entity referring to a scalable font.</source>
          <target state="translated">フォント実体は、開いている必要のないフォントへの参照です。その特性はフォントオブジェクトとフォント仕様の中間的なもので、フォントオブジェクトと同様に、フォント仕様とは異なり、単一の特定のフォントを参照します。フォントオブジェクトとは異なり、フォントエンティティを作成しても、そのフォントの内容がコンピュータのメモリにロードされることはありません。Emacsでは、スケーラブルフォントを参照して、1つのフォントエンティティから異なるサイズの複数のフォントオブジェクトを開くことができます。</target>
        </trans-unit>
        <trans-unit id="8d5b0425b5a94a9e9802d46b457503ba1cbe0cfe" translate="yes" xml:space="preserve">
          <source>A font object is a Lisp object that represents a font that Emacs has &lt;em&gt;opened&lt;/em&gt;. Font objects cannot be modified in Lisp, but they can be inspected.</source>
          <target state="translated">フォントオブジェクトは、Emacsが&lt;em&gt;開い&lt;/em&gt;たフォントを表すLispオブジェクトです。フォントオブジェクトはLispで変更できませんが、検査することはできます。</target>
        </trans-unit>
        <trans-unit id="515cc00d7f4cb95d05c8cecf8f1e5c3622cbf2f8" translate="yes" xml:space="preserve">
          <source>A font spec is a Lisp object that contains a set of specifications that can be used to find a font. More than one font may match the specifications in a font spec.</source>
          <target state="translated">フォント仕様とは、フォントを見つけるために使用できる仕様のセットを含むLispオブジェクトのことです。1つのフォント仕様に複数のフォントがマッチすることもあります。</target>
        </trans-unit>
        <trans-unit id="fbb519c5d7bda3b24f3aefb7d9c3e252c108c2df" translate="yes" xml:space="preserve">
          <source>A fontset is a collection of fonts that handle a range of character sets.</source>
          <target state="translated">フォントセットとは、さまざまな文字セットを扱うフォントの集合体です。</target>
        </trans-unit>
        <trans-unit id="b1d4702f683ffb2a5355d8008fca5fe3ad8ec6be" translate="yes" xml:space="preserve">
          <source>A form that is a nonempty list is either a function call, a macro call, or a special form, according to its first element. These three kinds of forms are evaluated in different ways, described below. The remaining list elements constitute the &lt;em&gt;arguments&lt;/em&gt; for the function, macro, or special form.</source>
          <target state="translated">空でないリストであるフォームは、最初の要素に応じて、関数呼び出し、マクロ呼び出し、または特殊フォームのいずれかです。これらの3種類のフォームは、以下に説明するように、さまざまな方法で評価されます。残りのリスト要素は、関数、マクロ、または特殊形式の&lt;em&gt;引数&lt;/em&gt;を構成し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a12bc97651e58ff453885efcc98152a3b21b8d9d" translate="yes" xml:space="preserve">
          <source>A format specification can have a &lt;em&gt;field number&lt;/em&gt;, which is a decimal number immediately after the initial &amp;lsquo;</source>
          <target state="translated">A format specification can have a &lt;em&gt;field number&lt;/em&gt;, which is a decimal number immediately after the initial &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="c8844cc8b244f02d7287631d0e9e57e8bd2d710d" translate="yes" xml:space="preserve">
          <source>A format specification can include any number of the following flag characters immediately after the &amp;lsquo;</source>
          <target state="translated">A format specification can include any number of the following flag characters immediately after the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="33f8eb1db79183d4a02ee42a34f4def26f563ba0" translate="yes" xml:space="preserve">
          <source>A format specification is a sequence of characters beginning with a &amp;lsquo;</source>
          <target state="translated">A format specification is a sequence of characters beginning with a &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="087e2b9c7736fb58cedc9236190680cf120fd098" translate="yes" xml:space="preserve">
          <source>A frame has many parameters that control its appearance and behavior. Just what parameters a frame has depends on what display mechanism it uses.</source>
          <target state="translated">フレームには、その外観と動作を制御する多くのパラメータがあります。フレームがどのようなパラメータを持っているかは、それがどのような表示メカニズムを使用しているかによって異なります。</target>
        </trans-unit>
        <trans-unit id="8bed1cbe065649aba77e0f7bf1ff4e6629da4bbb" translate="yes" xml:space="preserve">
          <source>A frame initially contains a single main window and/or a minibuffer window; you can subdivide the main window vertically or horizontally into smaller windows. See &lt;a href=&quot;splitting-windows#Splitting-Windows&quot;&gt;Splitting Windows&lt;/a&gt;.</source>
          <target state="translated">A frame initially contains a single main window and/or a minibuffer window; you can subdivide the main window vertically or horizontally into smaller windows. See &lt;a href=&quot;splitting-windows#Splitting-Windows&quot;&gt;Splitting Windows&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="593d0194673ec750d2ada7934d7770635b502d64" translate="yes" xml:space="preserve">
          <source>A frame is &lt;em&gt;dominated&lt;/em&gt; by a physical monitor when either the largest area of the frame resides in that monitor, or (if the frame does not intersect any physical monitors) that monitor is the closest to the frame. Every (non-tooltip) frame (whether visible or not) in a graphical display is dominated by exactly one physical monitor at a time, though the frame can span multiple (or no) physical monitors.</source>
          <target state="translated">A frame is &lt;em&gt;dominated&lt;/em&gt; by a physical monitor when either the largest area of the frame resides in that monitor, or (if the frame does not intersect any physical monitors) that monitor is the closest to the frame. Every (non-tooltip) frame (whether visible or not) in a graphical display is dominated by exactly one physical monitor at a time, though the frame can span multiple (or no) physical monitors.</target>
        </trans-unit>
        <trans-unit id="93e41b196f539a42aa80f80a422bd9a7138a3f5f" translate="yes" xml:space="preserve">
          <source>A frame means consider windows on that frame only.</source>
          <target state="translated">フレームとは、そのフレームのみに窓を考慮することを意味します。</target>
        </trans-unit>
        <trans-unit id="0ac0546e4fcf2e06468d2e59e1b006fdfd50ee70" translate="yes" xml:space="preserve">
          <source>A frame means operate on that frame.</source>
          <target state="translated">フレームとは、そのフレーム上で動作することを意味します。</target>
        </trans-unit>
        <trans-unit id="56626d51f944fb36b16d03134023ca4666a8b106" translate="yes" xml:space="preserve">
          <source>A frame means to consider windows on that specific frame.</source>
          <target state="translated">フレームとは、その特定のフレームの上に窓を考慮することを意味します。</target>
        </trans-unit>
        <trans-unit id="68b2b2ef5f1170f2f9547a6799c6765e7406978b" translate="yes" xml:space="preserve">
          <source>A frame on a graphical display may be &lt;em&gt;visible&lt;/em&gt;, &lt;em&gt;invisible&lt;/em&gt;, or &lt;em&gt;iconified&lt;/em&gt;. If it is visible, its contents are displayed in the usual manner. If it is iconified, its contents are not displayed, but there is a little icon somewhere to bring the frame back into view (some window managers refer to this state as &lt;em&gt;minimized&lt;/em&gt; rather than &lt;em&gt;iconified&lt;/em&gt;, but from Emacs&amp;rsquo; point of view they are the same thing). If a frame is invisible, it is not displayed at all.</source>
          <target state="translated">A frame on a graphical display may be &lt;em&gt;visible&lt;/em&gt;, &lt;em&gt;invisible&lt;/em&gt;, or &lt;em&gt;iconified&lt;/em&gt;. If it is visible, its contents are displayed in the usual manner. If it is iconified, its contents are not displayed, but there is a little icon somewhere to bring the frame back into view (some window managers refer to this state as &lt;em&gt;minimized&lt;/em&gt; rather than &lt;em&gt;iconified&lt;/em&gt;, but from Emacs&amp;rsquo; point of view they are the same thing). If a frame is invisible, it is not displayed at all.</target>
        </trans-unit>
        <trans-unit id="ae91a9bb638c7946c6a95ecd4004f1135f49e80a" translate="yes" xml:space="preserve">
          <source>A frame that is moved with the mouse will &amp;ldquo;snap&amp;rdquo; at the border(s) of the display or its parent frame whenever it is dragged as near to such an edge as the number of pixels specified by this parameter.</source>
          <target state="translated">A frame that is moved with the mouse will &amp;ldquo;snap&amp;rdquo; at the border(s) of the display or its parent frame whenever it is dragged as near to such an edge as the number of pixels specified by this parameter.</target>
        </trans-unit>
        <trans-unit id="670133cb3dcebb82274414d4049e8b018c47f4e1" translate="yes" xml:space="preserve">
          <source>A full explanation of these matters is outside the scope of this manual. For more information on cryptographic keys and signing, see &lt;a href=&quot;http://www.gnupg.org/documentation/manuals/gnupg/index.html#Top&quot;&gt;GnuPG&lt;/a&gt; in</source>
          <target state="translated">A full explanation of these matters is outside the scope of this manual. For more information on cryptographic keys and signing, see &lt;a href=&quot;http://www.gnupg.org/documentation/manuals/gnupg/index.html#Top&quot;&gt;GnuPG&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="b59af6565c9508dfc20c12f2304360ecea3059d7" translate="yes" xml:space="preserve">
          <source>A full keymap for</source>
          <target state="translated">完全なキーマップ</target>
        </trans-unit>
        <trans-unit id="5e8dd76e935bb817d46b7e5de1c0f84394fd67d9" translate="yes" xml:space="preserve">
          <source>A full keymap is more efficient than a sparse keymap when it holds lots of bindings; for just a few, the sparse keymap is better.</source>
          <target state="translated">たくさんのバインディングを保持している場合は、完全なキーマップの方が疎なキーマップよりも効率的ですが、ほんの少しのバインディングの場合は疎なキーマップの方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="49a156dad931da06b08d870486bd7a2b697afdab" translate="yes" xml:space="preserve">
          <source>A full keymap used by the help utility package. It has the same keymap in its value cell and in its function cell.</source>
          <target state="translated">ヘルプユーティリティパッケージで使用される完全なキーマップ。値セルと関数セルに同じキーマップを持ちます。</target>
        </trans-unit>
        <trans-unit id="6509b7476dce0a2a745fa522309b5b12d6ec47f5" translate="yes" xml:space="preserve">
          <source>A full keymap used in the minibuffer when it is not active. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Minibuffer-Edit.html#Minibuffer-Edit&quot;&gt;Editing in the Minibuffer&lt;/a&gt; in</source>
          <target state="translated">A full keymap used in the minibuffer when it is not active. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Minibuffer-Edit.html#Minibuffer-Edit&quot;&gt;Editing in the Minibuffer&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="4bbb4ffda897b3f130c2ffc336b839e6d176be06" translate="yes" xml:space="preserve">
          <source>A function (in the strict sense, i.e., a function object) which is written in Lisp. These are described in the following section. See &lt;a href=&quot;lambda-expressions#Lambda-Expressions&quot;&gt;Lambda Expressions&lt;/a&gt;.</source>
          <target state="translated">A function (in the strict sense, i.e., a function object) which is written in Lisp. These are described in the following section. See &lt;a href=&quot;lambda-expressions#Lambda-Expressions&quot;&gt;Lambda Expressions&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="67975cc366b5448faeb9a64ea486c485cf194102" translate="yes" xml:space="preserve">
          <source>A function form: either a quoted function symbol, a quoted lambda expression, or a form (that should evaluate to a function symbol or lambda expression). This is useful when an argument that&amp;rsquo;s a lambda expression might be quoted with &lt;code&gt;quote&lt;/code&gt; rather than &lt;code&gt;function&lt;/code&gt;, since it instruments the body of the lambda expression either way.</source>
          <target state="translated">A function form: either a quoted function symbol, a quoted lambda expression, or a form (that should evaluate to a function symbol or lambda expression). This is useful when an argument that&amp;rsquo;s a lambda expression might be quoted with &lt;code&gt;quote&lt;/code&gt; rather than &lt;code&gt;function&lt;/code&gt; , since it instruments the body of the lambda expression either way.</target>
        </trans-unit>
        <trans-unit id="74cc8825cac1c75201b5a72537a42bcaa095f7bf" translate="yes" xml:space="preserve">
          <source>A function in &lt;code&gt;completion-at-point-functions&lt;/code&gt; may also return a function instead of a list as described above. In that case, that returned function is called, with no argument, and it is entirely responsible for performing the completion. We discourage this usage; it is only intended to help convert old code to using &lt;code&gt;completion-at-point&lt;/code&gt;.</source>
          <target state="translated">A function in &lt;code&gt;completion-at-point-functions&lt;/code&gt; may also return a function instead of a list as described above. In that case, that returned function is called, with no argument, and it is entirely responsible for performing the completion. We discourage this usage; it is only intended to help convert old code to using &lt;code&gt;completion-at-point&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3967a503993e60af7034808c468508aae1885fb4" translate="yes" xml:space="preserve">
          <source>A function is a Lisp program that can be invoked from other functions.</source>
          <target state="translated">関数とは、他の関数から呼び出すことができるLispプログラムのことです。</target>
        </trans-unit>
        <trans-unit id="88717033307ab176f0284b52276d93ae668d8d38" translate="yes" xml:space="preserve">
          <source>A function is never considered to be called interactively if it was called via Lisp evaluation (or with &lt;code&gt;apply&lt;/code&gt; or &lt;code&gt;funcall&lt;/code&gt;).</source>
          <target state="translated">A function is never considered to be called interactively if it was called via Lisp evaluation (or with &lt;code&gt;apply&lt;/code&gt; or &lt;code&gt;funcall&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="45f7858322522afa6344fc4aadc6540f15152ac3" translate="yes" xml:space="preserve">
          <source>A function name (i.e., a symbol satisfying &lt;code&gt;fboundp&lt;/code&gt;). Existing, Completion, Prompt.</source>
          <target state="translated">A function name (i.e., a symbol satisfying &lt;code&gt;fboundp&lt;/code&gt; ). Existing, Completion, Prompt.</target>
        </trans-unit>
        <trans-unit id="6604e0025d3d7acaa51d09313c30002d7a8a0abd" translate="yes" xml:space="preserve">
          <source>A function need not have a unique name. A given function object &lt;em&gt;usually&lt;/em&gt; appears in the function cell of only one symbol, but this is just a convention. It is easy to store it in several symbols using &lt;code&gt;fset&lt;/code&gt;; then each of the symbols is a valid name for the same function.</source>
          <target state="translated">A function need not have a unique name. A given function object &lt;em&gt;usually&lt;/em&gt; appears in the function cell of only one symbol, but this is just a convention. It is easy to store it in several symbols using &lt;code&gt;fset&lt;/code&gt; ; then each of the symbols is a valid name for the same function.</target>
        </trans-unit>
        <trans-unit id="8cefa34de359ec87bedfc8878b6eeae0d47b4baa" translate="yes" xml:space="preserve">
          <source>A function object that is much like a lambda expression, except that it also encloses an environment of lexical variable bindings. See &lt;a href=&quot;closures#Closures&quot;&gt;Closures&lt;/a&gt;.</source>
          <target state="translated">A function object that is much like a lambda expression, except that it also encloses an environment of lexical variable bindings. See &lt;a href=&quot;closures#Closures&quot;&gt;Closures&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4f48b6522b5235b501de8a062f2f445bd67cb08a" translate="yes" xml:space="preserve">
          <source>A function run by Edebug after it wraps the body of a definition or closure. After Edebug has initialized its own data, this function is called with one argument, the symbol associated with the definition, which may be the actual symbol defined or one generated by Edebug. This function may be used to set the &lt;code&gt;edebug-behavior&lt;/code&gt; symbol property of each definition instrumented by Edebug.</source>
          <target state="translated">A function run by Edebug after it wraps the body of a definition or closure. After Edebug has initialized its own data, this function is called with one argument, the symbol associated with the definition, which may be the actual symbol defined or one generated by Edebug. This function may be used to set the &lt;code&gt;edebug-behavior&lt;/code&gt; symbol property of each definition instrumented by Edebug.</target>
        </trans-unit>
        <trans-unit id="c7a8cbef03050f5100566a91d08438e778fff88b" translate="yes" xml:space="preserve">
          <source>A function run just before redisplay. It is called with one argument, the set of windows to be redisplayed. The set can be &lt;code&gt;nil&lt;/code&gt;, meaning only the selected window, or &lt;code&gt;t&lt;/code&gt;, meaning all the windows.</source>
          <target state="translated">A function run just before redisplay. It is called with one argument, the set of windows to be redisplayed. The set can be &lt;code&gt;nil&lt;/code&gt; , meaning only the selected window, or &lt;code&gt;t&lt;/code&gt; , meaning all the windows.</target>
        </trans-unit>
        <trans-unit id="2170a7820bb4235d6aaed2f87dfc349064f9aeed" translate="yes" xml:space="preserve">
          <source>A function that has been compiled by the byte compiler. See &lt;a href=&quot;byte_002dcode-type#Byte_002dCode-Type&quot;&gt;Byte-Code Type&lt;/a&gt;.</source>
          <target state="translated">A function that has been compiled by the byte compiler. See &lt;a href=&quot;byte_002dcode-type#Byte_002dCode-Type&quot;&gt;Byte-Code Type&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="514106b81c0fc955cf778a8f7e3aa693d74773cb" translate="yes" xml:space="preserve">
          <source>A function that takes three arguments&amp;mdash;the &lt;var&gt;window&lt;/var&gt; argument of &lt;code&gt;switch-to-prev-buffer&lt;/code&gt;, a buffer &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; intends to switch to and the &lt;var&gt;bury-or-kill&lt;/var&gt; argument of &lt;code&gt;switch-to-prev-buffer&lt;/code&gt;. If that function returns non-&lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; will refrain from switching to the buffer specified by the second argument.</source>
          <target state="translated">A function that takes three arguments&amp;mdash;the &lt;var&gt;window&lt;/var&gt; argument of &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; , a buffer &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; intends to switch to and the &lt;var&gt;bury-or-kill&lt;/var&gt; argument of &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; . If that function returns non- &lt;code&gt;nil&lt;/code&gt; , &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; will refrain from switching to the buffer specified by the second argument.</target>
        </trans-unit>
        <trans-unit id="19663365a712443cf17b0462d9e95ba641121528" translate="yes" xml:space="preserve">
          <source>A function which is callable from Lisp but is actually written in C. Primitives are also called &lt;em&gt;built-in functions&lt;/em&gt;, or &lt;em&gt;subrs&lt;/em&gt;. Examples include functions like &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;append&lt;/code&gt;. In addition, all special forms (see below) are also considered primitives.</source>
          <target state="translated">A function which is callable from Lisp but is actually written in C. Primitives are also called &lt;em&gt;built-in functions&lt;/em&gt;, or &lt;em&gt;subrs&lt;/em&gt;. Examples include functions like &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;append&lt;/code&gt; . In addition, all special forms (see below) are also considered primitives.</target>
        </trans-unit>
        <trans-unit id="1b46c595245dc0dbb005afc3ecbbdd47644569b0" translate="yes" xml:space="preserve">
          <source>A function written in C, callable from Lisp.</source>
          <target state="translated">C言語で書かれた関数で、Lispから呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="de877f0e31d6955ec95f1fb5f2fd10d5638c9689" translate="yes" xml:space="preserve">
          <source>A function written in Lisp, then compiled.</source>
          <target state="translated">Lispで書かれた関数をコンパイルしたもの。</target>
        </trans-unit>
        <trans-unit id="c9d8c9cc7681ee2ca63be007d65e384b9608592a" translate="yes" xml:space="preserve">
          <source>A general syntax for cons cells.</source>
          <target state="translated">consセルの一般的な構文。</target>
        </trans-unit>
        <trans-unit id="137d4bfab02523c448bc31f5a48ba6b6d8486e12" translate="yes" xml:space="preserve">
          <source>A generalized variable. See &lt;a href=&quot;generalized-variables#Generalized-Variables&quot;&gt;Generalized Variables&lt;/a&gt;.</source>
          <target state="translated">A generalized variable. See &lt;a href=&quot;generalized-variables#Generalized-Variables&quot;&gt;Generalized Variables&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4ebf8b963e8ef8255cbf815c795b5ed45d06bb96" translate="yes" xml:space="preserve">
          <source>A generic function specifies an abstract operation, by defining its name and list of arguments, but (usually) no implementation. The actual implementation for several specific classes of arguments is provided by &lt;em&gt;methods&lt;/em&gt;, which should be defined separately. Each method that implements a generic function has the same name as the generic function, but the method&amp;rsquo;s definition indicates what kinds of arguments it can handle by &lt;em&gt;specializing&lt;/em&gt; the arguments defined by the generic function. These &lt;em&gt;argument specializers&lt;/em&gt; can be more or less specific; for example, a &lt;code&gt;string&lt;/code&gt; type is more specific than a more general type, such as &lt;code&gt;sequence&lt;/code&gt;.</source>
          <target state="translated">A generic function specifies an abstract operation, by defining its name and list of arguments, but (usually) no implementation. The actual implementation for several specific classes of arguments is provided by &lt;em&gt;methods&lt;/em&gt;, which should be defined separately. Each method that implements a generic function has the same name as the generic function, but the method&amp;rsquo;s definition indicates what kinds of arguments it can handle by &lt;em&gt;specializing&lt;/em&gt; the arguments defined by the generic function. These &lt;em&gt;argument specializers&lt;/em&gt; can be more or less specific; for example, a &lt;code&gt;string&lt;/code&gt; type is more specific than a more general type, such as &lt;code&gt;sequence&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ce1f0389bfeda46a5ea7bd2acc7f288b0381d8d8" translate="yes" xml:space="preserve">
          <source>A good indentation function will usually need to actually parse the text, according to the syntax of the language. Luckily, it is not necessary to parse the text in as much detail as would be needed for a compiler, but on the other hand, the parser embedded in the indentation code will want to be somewhat friendly to syntactically incorrect code.</source>
          <target state="translated">優れたインデント関数は通常、言語の構文に従ってテキストを実際に解析する必要があります。幸いなことに、コンパイラが必要とするような詳細なテキストの解析は必要ありませんが、一方で、インデントコードに埋め込まれたパーサは、構文的に正しくないコードに対して多少なりとも友好的でありたいと思うでしょう。</target>
        </trans-unit>
        <trans-unit id="3411c17220662ceffaaf0e39a2c3512afe57639f" translate="yes" xml:space="preserve">
          <source>A hash table (see &lt;a href=&quot;hash-table-type#Hash-Table-Type&quot;&gt;Hash Table Type&lt;/a&gt;).</source>
          <target state="translated">A hash table (see &lt;a href=&quot;hash-table-type#Hash-Table-Type&quot;&gt;Hash Table Type&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="cb7e4bf96a133b1dfdd48a75ed263d4f15112488" translate="yes" xml:space="preserve">
          <source>A hash table is a very fast kind of lookup table, somewhat like an alist (see &lt;a href=&quot;association-lists#Association-Lists&quot;&gt;Association Lists&lt;/a&gt;) in that it maps keys to corresponding values. It differs from an alist in these ways:</source>
          <target state="translated">A hash table is a very fast kind of lookup table, somewhat like an alist (see &lt;a href=&quot;association-lists#Association-Lists&quot;&gt;Association Lists&lt;/a&gt;) in that it maps keys to corresponding values. It differs from an alist in these ways:</target>
        </trans-unit>
        <trans-unit id="5f8d7c7212fe9badba0bb89235cd56e06f21bd8a" translate="yes" xml:space="preserve">
          <source>A hash table is a very fast kind of lookup table, somewhat like an alist in that it maps keys to corresponding values, but much faster. The printed representation of a hash table specifies its properties and contents, like this:</source>
          <target state="translated">ハッシュテーブルは非常に高速な検索テーブルで、キーを対応する値にマップするという点ではアリストに似ていますが、より高速です。ハッシュテーブルの印刷された表現は、以下のようにそのプロパティと内容を指定します。</target>
        </trans-unit>
        <trans-unit id="d6be75f4157848f03320b85454c8ed3e94f490ce" translate="yes" xml:space="preserve">
          <source>A header of type &lt;code&gt;union vectorlike_header&lt;/code&gt; is common to all vectorlike objects.</source>
          <target state="translated">A header of type &lt;code&gt;union vectorlike_header&lt;/code&gt; is common to all vectorlike objects.</target>
        </trans-unit>
        <trans-unit id="bc19b5ecba8524e89dd4b02718fefc5d6d8c187a" translate="yes" xml:space="preserve">
          <source>A history list for arguments that are Lisp expressions to evaluate.</source>
          <target state="translated">評価するLisp式である引数の履歴リスト。</target>
        </trans-unit>
        <trans-unit id="d29cbee4e05656304ef83f82b3f1d36d6c40950e" translate="yes" xml:space="preserve">
          <source>A history list for arguments that are faces.</source>
          <target state="translated">面である引数の履歴リスト。</target>
        </trans-unit>
        <trans-unit id="a95052be4b299ec23859e52b4286287e5de16378" translate="yes" xml:space="preserve">
          <source>A history list for arguments that are names of extended commands.</source>
          <target state="translated">拡張コマンドの名前である引数の履歴リスト。</target>
        </trans-unit>
        <trans-unit id="8ba9f20cccf9a22f825a093b59843fd157992039" translate="yes" xml:space="preserve">
          <source>A history list for arguments that are shell commands.</source>
          <target state="translated">シェルコマンドである引数の履歴リスト。</target>
        </trans-unit>
        <trans-unit id="bc1844518b7d6ff2a94eb6a74170941282cc242b" translate="yes" xml:space="preserve">
          <source>A history list for arguments to &lt;code&gt;query-replace&lt;/code&gt; (and similar arguments to other commands).</source>
          <target state="translated">A history list for arguments to &lt;code&gt;query-replace&lt;/code&gt; (and similar arguments to other commands).</target>
        </trans-unit>
        <trans-unit id="a0f67257cfb467394ba7cf271bab3d6d12bfdd65" translate="yes" xml:space="preserve">
          <source>A history list for buffer-name arguments.</source>
          <target state="translated">バッファ名引数の履歴リスト。</target>
        </trans-unit>
        <trans-unit id="7429cd9053f94b9269173955b75a832e95aa59b8" translate="yes" xml:space="preserve">
          <source>A history list for file-name arguments.</source>
          <target state="translated">ファイル名引数の履歴リスト。</target>
        </trans-unit>
        <trans-unit id="01f40f095da40e7f61a66ab4604f84f69a4b3806" translate="yes" xml:space="preserve">
          <source>A history list for regular expression arguments.</source>
          <target state="translated">正規表現引数の履歴リスト。</target>
        </trans-unit>
        <trans-unit id="d9187f2c4893298bd5d2b8b6870e09edb2df8d32" translate="yes" xml:space="preserve">
          <source>A history list for variable-name arguments read by &lt;code&gt;read-variable&lt;/code&gt;.</source>
          <target state="translated">A history list for variable-name arguments read by &lt;code&gt;read-variable&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="88d88490f2e0ece21ea2232720e8c994b48b45c0" translate="yes" xml:space="preserve">
          <source>A inheritance interface for building JSONRPC transport implementations</source>
          <target state="translated">JSONRPC トランスポート実装を構築するための継承インターフェース</target>
        </trans-unit>
        <trans-unit id="9693681111fd400f0e66f9a76c03ef258c7b1a8e" translate="yes" xml:space="preserve">
          <source>A key sequence (see &lt;a href=&quot;key-sequences#Key-Sequences&quot;&gt;Key Sequences&lt;/a&gt;). This keeps reading events until a command (or undefined command) is found in the current key maps. The key sequence argument is represented as a string or vector. The cursor does not move into the echo area. Prompt.</source>
          <target state="translated">A key sequence (see &lt;a href=&quot;key-sequences#Key-Sequences&quot;&gt;Key Sequences&lt;/a&gt;). This keeps reading events until a command (or undefined command) is found in the current key maps. The key sequence argument is represented as a string or vector. The cursor does not move into the echo area. Prompt.</target>
        </trans-unit>
        <trans-unit id="0546250cda7c79f089fec5f11f6cebe8b610ed3c" translate="yes" xml:space="preserve">
          <source>A key sequence or &lt;code&gt;nil&lt;/code&gt;. Can be used after a &amp;lsquo;</source>
          <target state="translated">A key sequence or &lt;code&gt;nil&lt;/code&gt; . Can be used after a &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="cfce53279f617e80eaa73917517fd51b517c5eca" translate="yes" xml:space="preserve">
          <source>A key sequence that starts with a mouse event is read using the keymaps of the buffer in the window that the mouse was in, not the current buffer. This does not imply that clicking in a window selects that window or its buffer&amp;mdash;that is entirely under the control of the command binding of the key sequence.</source>
          <target state="translated">A key sequence that starts with a mouse event is read using the keymaps of the buffer in the window that the mouse was in, not the current buffer. This does not imply that clicking in a window selects that window or its buffer&amp;mdash;that is entirely under the control of the command binding of the key sequence.</target>
        </trans-unit>
        <trans-unit id="e2dad76fedc5a5f74f4a3326932c54e1522b3afb" translate="yes" xml:space="preserve">
          <source>A key sequence, whose definition you intend to change. This works like &amp;lsquo;</source>
          <target state="translated">A key sequence, whose definition you intend to change. This works like &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="a4774465bd436b77f7c7df254153ca64b8821cf1" translate="yes" xml:space="preserve">
          <source>A keymap acts as a menu if it has an &lt;em&gt;overall prompt string&lt;/em&gt;, which is a string that appears as an element of the keymap. (See &lt;a href=&quot;format-of-keymaps#Format-of-Keymaps&quot;&gt;Format of Keymaps&lt;/a&gt;.) The string should describe the purpose of the menu&amp;rsquo;s commands. Emacs displays the overall prompt string as the menu title in some cases, depending on the toolkit (if any) used for displaying menus.&lt;a href=&quot;#FOOT14&quot; name=&quot;DOCF14&quot;&gt;&lt;sup&gt;14&lt;/sup&gt;&lt;/a&gt; Keyboard menus also display the overall prompt string.</source>
          <target state="translated">A keymap acts as a menu if it has an &lt;em&gt;overall prompt string&lt;/em&gt;, which is a string that appears as an element of the keymap. (See &lt;a href=&quot;format-of-keymaps#Format-of-Keymaps&quot;&gt;Format of Keymaps&lt;/a&gt;.) The string should describe the purpose of the menu&amp;rsquo;s commands. Emacs displays the overall prompt string as the menu title in some cases, depending on the toolkit (if any) used for displaying menus.&lt;a href=&quot;#FOOT14&quot; name=&quot;DOCF14&quot;&gt;&lt;sup&gt;14&lt;/sup&gt;&lt;/a&gt; Keyboard menus also display the overall prompt string.</target>
        </trans-unit>
        <trans-unit id="83f54a39819605edababa45c4847dfff5aca04d6" translate="yes" xml:space="preserve">
          <source>A keymap can inherit the bindings of another keymap, which we call the &lt;em&gt;parent keymap&lt;/em&gt;. Such a keymap looks like this:</source>
          <target state="translated">A keymap can inherit the bindings of another keymap, which we call the &lt;em&gt;parent keymap&lt;/em&gt;. Such a keymap looks like this:</target>
        </trans-unit>
        <trans-unit id="adbbaeca7dea252f489449be95d1ffed4f071473" translate="yes" xml:space="preserve">
          <source>A keymap can operate as a menu as well as defining bindings for keyboard keys and mouse buttons. Menus are usually actuated with the mouse, but they can function with the keyboard also. If a menu keymap is active for the next input event, that activates the keyboard menu feature.</source>
          <target state="translated">キーマップは、キーボードキーやマウスボタンのバインディングを定義するだけでなく、メニューとしても動作します。メニューは通常マウスで操作するが、キーボードでも機能することができる。メニューキーマップが次の入力イベントでアクティブになると、キーボードメニュー機能がアクティブになります。</target>
        </trans-unit>
        <trans-unit id="5e8f2aa8d2594c1c94ef9f4765f642084bdc5c9e" translate="yes" xml:space="preserve">
          <source>A keymap can translate one command to another.</source>
          <target state="translated">キーマップは、あるコマンドを別のコマンドに変換することができます。</target>
        </trans-unit>
        <trans-unit id="ca5493874569cc11a4db914940648e6dd2feebb3" translate="yes" xml:space="preserve">
          <source>A keymap for translating keys. This one overrides ordinary key bindings, unlike &lt;code&gt;local-function-key-map&lt;/code&gt;. See &lt;a href=&quot;translation-keymaps#Translation-Keymaps&quot;&gt;Translation Keymaps&lt;/a&gt;.</source>
          <target state="translated">A keymap for translating keys. This one overrides ordinary key bindings, unlike &lt;code&gt;local-function-key-map&lt;/code&gt; . See &lt;a href=&quot;translation-keymaps#Translation-Keymaps&quot;&gt;Translation Keymaps&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="80a14f3ed730352665ac8497ab20c8aab1ead0c1" translate="yes" xml:space="preserve">
          <source>A keymap is a Lisp data structure that specifies &lt;em&gt;key bindings&lt;/em&gt; for various key sequences.</source>
          <target state="translated">A keymap is a Lisp data structure that specifies &lt;em&gt;key bindings&lt;/em&gt; for various key sequences.</target>
        </trans-unit>
        <trans-unit id="e581df6f5d87ba129d52ded580910d5a01f546b3" translate="yes" xml:space="preserve">
          <source>A lambda expression is a function object written in Lisp. Here is an example:</source>
          <target state="translated">ラムダ式はLispで書かれた関数オブジェクトです。以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="f7a2c28e4460e8f858bc67f5e6523cad3aaaf449" translate="yes" xml:space="preserve">
          <source>A lambda expression is a list that looks like this:</source>
          <target state="translated">ラムダ式とは、このようなリストのことです。</target>
        </trans-unit>
        <trans-unit id="b747ce530e646e9a380c84908496cdbfc9864e4b" translate="yes" xml:space="preserve">
          <source>A lambda expression may optionally have a &lt;em&gt;documentation string&lt;/em&gt; just after the lambda list. This string does not affect execution of the function; it is a kind of comment, but a systematized comment which actually appears inside the Lisp world and can be used by the Emacs help facilities. See &lt;a href=&quot;documentation#Documentation&quot;&gt;Documentation&lt;/a&gt;, for how the documentation string is accessed.</source>
          <target state="translated">A lambda expression may optionally have a &lt;em&gt;documentation string&lt;/em&gt; just after the lambda list. This string does not affect execution of the function; it is a kind of comment, but a systematized comment which actually appears inside the Lisp world and can be used by the Emacs help facilities. See &lt;a href=&quot;documentation#Documentation&quot;&gt;Documentation&lt;/a&gt;, for how the documentation string is accessed.</target>
        </trans-unit>
        <trans-unit id="3b292d4cfd4f00850f90b2cafdf8eb012fcc7887" translate="yes" xml:space="preserve">
          <source>A lambda expression with no quoting.</source>
          <target state="translated">引用符を使わないラムダ式。</target>
        </trans-unit>
        <trans-unit id="d44cec50b78191f5728f5dfe284c3f5d18297979" translate="yes" xml:space="preserve">
          <source>A lambda expression, by itself, has no name; it is an &lt;em&gt;anonymous function&lt;/em&gt;. Although lambda expressions can be used this way (see &lt;a href=&quot;anonymous-functions#Anonymous-Functions&quot;&gt;Anonymous Functions&lt;/a&gt;), they are more commonly associated with symbols to make &lt;em&gt;named functions&lt;/em&gt; (see &lt;a href=&quot;function-names#Function-Names&quot;&gt;Function Names&lt;/a&gt;). Before going into these details, the following subsections describe the components of a lambda expression and what they do.</source>
          <target state="translated">A lambda expression, by itself, has no name; it is an &lt;em&gt;anonymous function&lt;/em&gt;. Although lambda expressions can be used this way (see &lt;a href=&quot;anonymous-functions#Anonymous-Functions&quot;&gt;Anonymous Functions&lt;/a&gt;), they are more commonly associated with symbols to make &lt;em&gt;named functions&lt;/em&gt; (see &lt;a href=&quot;function-names#Function-Names&quot;&gt;Function Names&lt;/a&gt;). Before going into these details, the following subsections describe the components of a lambda expression and what they do.</target>
        </trans-unit>
        <trans-unit id="79901fc9ba461cbaf1a28d28ff8d5bb8913b104c" translate="yes" xml:space="preserve">
          <source>A lexically-bound variable has &lt;em&gt;lexical scope&lt;/em&gt;, meaning that any reference to the variable must be located textually within the binding construct. Here is an example (see &lt;a href=&quot;using-lexical-binding#Using-Lexical-Binding&quot;&gt;Using Lexical Binding&lt;/a&gt;, for how to actually enable lexical binding):</source>
          <target state="translated">A lexically-bound variable has &lt;em&gt;lexical scope&lt;/em&gt;, meaning that any reference to the variable must be located textually within the binding construct. Here is an example (see &lt;a href=&quot;using-lexical-binding#Using-Lexical-Binding&quot;&gt;Using Lexical Binding&lt;/a&gt;, for how to actually enable lexical binding):</target>
        </trans-unit>
        <trans-unit id="533bed4887f5fb41a2062d1ceb8b2882d359589f" translate="yes" xml:space="preserve">
          <source>A line prefix may also be specified for regions of text using the &lt;code&gt;line-prefix&lt;/code&gt; text or overlay property. This takes precedence over the &lt;code&gt;line-prefix&lt;/code&gt; variable. See &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Special Properties&lt;/a&gt;.</source>
          <target state="translated">A line prefix may also be specified for regions of text using the &lt;code&gt;line-prefix&lt;/code&gt; text or overlay property. This takes precedence over the &lt;code&gt;line-prefix&lt;/code&gt; variable. See &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Special Properties&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9d5d522b996bc3a1dbbe7104db24a53d4976ad85" translate="yes" xml:space="preserve">
          <source>A line-prefix may also be specified for an entire buffer using the &lt;code&gt;line-prefix&lt;/code&gt; buffer-local variable (however, a &lt;code&gt;line-prefix&lt;/code&gt; text-property takes precedence over the value of the &lt;code&gt;line-prefix&lt;/code&gt; variable). See &lt;a href=&quot;truncation#Truncation&quot;&gt;Truncation&lt;/a&gt;.</source>
          <target state="translated">A line-prefix may also be specified for an entire buffer using the &lt;code&gt;line-prefix&lt;/code&gt; buffer-local variable (however, a &lt;code&gt;line-prefix&lt;/code&gt; text-property takes precedence over the value of the &lt;code&gt;line-prefix&lt;/code&gt; variable). See &lt;a href=&quot;truncation#Truncation&quot;&gt;Truncation&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e1bcc030a8bc8877cd9b9cae08c99cc625688c45" translate="yes" xml:space="preserve">
          <source>A list can be illustrated by a diagram in which the cons cells are shown as pairs of boxes, like dominoes. (The Lisp reader cannot read such an illustration; unlike the textual notation, which can be understood by both humans and computers, the box illustrations can be understood only by humans.) This picture represents the three-element list &lt;code&gt;(rose violet buttercup)&lt;/code&gt;:</source>
          <target state="translated">A list can be illustrated by a diagram in which the cons cells are shown as pairs of boxes, like dominoes. (The Lisp reader cannot read such an illustration; unlike the textual notation, which can be understood by both humans and computers, the box illustrations can be understood only by humans.) This picture represents the three-element list &lt;code&gt;(rose violet buttercup)&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="18f1e02aad43b9d2e925fec42e48b5173603ed8e" translate="yes" xml:space="preserve">
          <source>A list can represent a finite mathematical set.</source>
          <target state="translated">リストは有限の数学的集合を表すことができます。</target>
        </trans-unit>
        <trans-unit id="99dc99207530f20a557f325ad2ddf35b0334c2e1" translate="yes" xml:space="preserve">
          <source>A list can represent a finite relation or mapping.</source>
          <target state="translated">リストは有限の関係や写像を表すことができます。</target>
        </trans-unit>
        <trans-unit id="ac710751e4b90ec9bd82d44f9428b1100cf29626" translate="yes" xml:space="preserve">
          <source>A list can represent an unordered mathematical set&amp;mdash;simply consider a value an element of a set if it appears in the list, and ignore the order of the list. To form the union of two sets, use &lt;code&gt;append&lt;/code&gt; (as long as you don&amp;rsquo;t mind having duplicate elements). You can remove &lt;code&gt;equal&lt;/code&gt; duplicates using &lt;code&gt;delete-dups&lt;/code&gt;. Other useful functions for sets include &lt;code&gt;memq&lt;/code&gt; and &lt;code&gt;delq&lt;/code&gt;, and their &lt;code&gt;equal&lt;/code&gt; versions, &lt;code&gt;member&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt;.</source>
          <target state="translated">A list can represent an unordered mathematical set&amp;mdash;simply consider a value an element of a set if it appears in the list, and ignore the order of the list. To form the union of two sets, use &lt;code&gt;append&lt;/code&gt; (as long as you don&amp;rsquo;t mind having duplicate elements). You can remove &lt;code&gt;equal&lt;/code&gt; duplicates using &lt;code&gt;delete-dups&lt;/code&gt; . Other useful functions for sets include &lt;code&gt;memq&lt;/code&gt; and &lt;code&gt;delq&lt;/code&gt; , and their &lt;code&gt;equal&lt;/code&gt; versions, &lt;code&gt;member&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ec3b92eaabe91cf1801f07fdb6f671a3685b6b4e" translate="yes" xml:space="preserve">
          <source>A list containing the command arguments that were used to start this process. For a network or serial process, it is &lt;code&gt;nil&lt;/code&gt; if the process is running or &lt;code&gt;t&lt;/code&gt; if the process is stopped.</source>
          <target state="translated">A list containing the command arguments that were used to start this process. For a network or serial process, it is &lt;code&gt;nil&lt;/code&gt; if the process is running or &lt;code&gt;t&lt;/code&gt; if the process is stopped.</target>
        </trans-unit>
        <trans-unit id="03cd1740db820619af89ab8e9d8be24952c71154" translate="yes" xml:space="preserve">
          <source>A list is a sequence of elements, but it is not a single primitive object; it is made of cons cells, one cell per element. Finding the &lt;var&gt;n&lt;/var&gt;th element requires looking through &lt;var&gt;n&lt;/var&gt; cons cells, so elements farther from the beginning of the list take longer to access. But it is possible to add elements to the list, or remove elements.</source>
          <target state="translated">A list is a sequence of elements, but it is not a single primitive object; it is made of cons cells, one cell per element. Finding the &lt;var&gt;n&lt;/var&gt; th element requires looking through &lt;var&gt;n&lt;/var&gt; cons cells, so elements farther from the beginning of the list take longer to access. But it is possible to add elements to the list, or remove elements.</target>
        </trans-unit>
        <trans-unit id="79a7cbc441d380e14b5ac8933034a90bcc47cf66" translate="yes" xml:space="preserve">
          <source>A list is a series of cons cells chained together, so that each cell refers to the next one. There is one cons cell for each element of the list. By convention, the &lt;small&gt;CAR&lt;/small&gt;s of the cons cells hold the elements of the list, and the &lt;small&gt;CDR&lt;/small&gt;s are used to chain the list (this asymmetry between &lt;small&gt;CAR&lt;/small&gt; and &lt;small&gt;CDR&lt;/small&gt; is entirely a matter of convention; at the level of cons cells, the &lt;small&gt;CAR&lt;/small&gt; and &lt;small&gt;CDR&lt;/small&gt; slots have similar properties). Hence, the &lt;small&gt;CDR&lt;/small&gt; slot of each cons cell in a list refers to the following cons cell.</source>
          <target state="translated">A list is a series of cons cells chained together, so that each cell refers to the next one. There is one cons cell for each element of the list. By convention, the &lt;small&gt;CAR&lt;/small&gt;s of the cons cells hold the elements of the list, and the &lt;small&gt;CDR&lt;/small&gt;s are used to chain the list (this asymmetry between &lt;small&gt;CAR&lt;/small&gt; and &lt;small&gt;CDR&lt;/small&gt; is entirely a matter of convention; at the level of cons cells, the &lt;small&gt;CAR&lt;/small&gt; and &lt;small&gt;CDR&lt;/small&gt; slots have similar properties). Hence, the &lt;small&gt;CDR&lt;/small&gt; slot of each cons cell in a list refers to the following cons cell.</target>
        </trans-unit>
        <trans-unit id="eb5ad8cefc6fdf97ba909694a797fc46cf77bfea" translate="yes" xml:space="preserve">
          <source>A list of actions to be applied. &lt;var&gt;key&lt;/var&gt; and &lt;var&gt;title&lt;/var&gt; are both strings. The default action (usually invoked by clicking the notification) should have a key named &amp;lsquo;</source>
          <target state="translated">A list of actions to be applied. &lt;var&gt;key&lt;/var&gt; and &lt;var&gt;title&lt;/var&gt; are both strings. The default action (usually invoked by clicking the notification) should have a key named &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="cb3dbbae0a50b4c6a0443b8163ae2bd799d39f32" translate="yes" xml:space="preserve">
          <source>A list of buffers that have been selected in this frame, ordered most-recently-selected first.</source>
          <target state="translated">このフレームで選択されたバッファのリスト。</target>
        </trans-unit>
        <trans-unit id="9e4afc49af957f8ee7b00bb9c5101181b23c3178" translate="yes" xml:space="preserve">
          <source>A list of faces. Each list element should be either a face name or an anonymous face. This specifies a face which is an aggregate of the attributes of each of the listed faces. Faces occurring earlier in the list have higher priority.</source>
          <target state="translated">顔のリスト。各リスト要素は顔名か匿名顔のいずれかでなければなりません。これは、リストされた各顔の属性の集合体である顔を指定します。リストの前にある顔の方が優先度が高くなります。</target>
        </trans-unit>
        <trans-unit id="cd93b8f785e569c20a9a3b200dddb7784d87994f" translate="yes" xml:space="preserve">
          <source>A list of four integers &lt;code&gt;(&lt;var&gt;high&lt;/var&gt; &lt;var&gt;low&lt;/var&gt; &lt;var&gt;micro&lt;/var&gt;
&lt;var&gt;pico&lt;/var&gt;)&lt;/code&gt;, where 0&amp;le;&lt;var&gt;low&lt;/var&gt;&amp;lt;65536, 0&amp;le;&lt;var&gt;micro&lt;/var&gt;&amp;lt;1000000, and 0&amp;le;&lt;var&gt;pico&lt;/var&gt;&amp;lt;1000000. This represents the number of seconds using the formula: &lt;var&gt;high&lt;/var&gt; * 2**16 + &lt;var&gt;low&lt;/var&gt; + &lt;var&gt;micro&lt;/var&gt; * 10**-6 + &lt;var&gt;pico&lt;/var&gt; * 10**-12. In some cases, functions may default to returning two- or three-element lists, with omitted &lt;var&gt;micro&lt;/var&gt; and &lt;var&gt;pico&lt;/var&gt; components defaulting to zero. On all current machines &lt;var&gt;pico&lt;/var&gt; is a multiple of 1000, but this may change as higher-resolution clocks become available.</source>
          <target state="translated">A list of four integers &lt;code&gt;(&lt;var&gt;high&lt;/var&gt; &lt;var&gt;low&lt;/var&gt; &lt;var&gt;micro&lt;/var&gt; &lt;var&gt;pico&lt;/var&gt;)&lt;/code&gt; , where 0&amp;le; &lt;var&gt;low&lt;/var&gt; &amp;lt;65536, 0&amp;le; &lt;var&gt;micro&lt;/var&gt; &amp;lt;1000000, and 0&amp;le; &lt;var&gt;pico&lt;/var&gt; &amp;lt;1000000. This represents the number of seconds using the formula: &lt;var&gt;high&lt;/var&gt; * 2**16 + &lt;var&gt;low&lt;/var&gt; + &lt;var&gt;micro&lt;/var&gt; * 10**-6 + &lt;var&gt;pico&lt;/var&gt; * 10**-12. In some cases, functions may default to returning two- or three-element lists, with omitted &lt;var&gt;micro&lt;/var&gt; and &lt;var&gt;pico&lt;/var&gt; components defaulting to zero. On all current machines &lt;var&gt;pico&lt;/var&gt; is a multiple of 1000, but this may change as higher-resolution clocks become available.</target>
        </trans-unit>
        <trans-unit id="64f061c5f8cefbf5c98fc8804458fac9b42c2790" translate="yes" xml:space="preserve">
          <source>A list of functions for &lt;code&gt;write-region&lt;/code&gt; to call. Each function in the list is called with two arguments: the start and end of the region to be written. These functions should not alter the contents of the buffer. Instead, they should return annotations.</source>
          <target state="translated">A list of functions for &lt;code&gt;write-region&lt;/code&gt; to call. Each function in the list is called with two arguments: the start and end of the region to be written. These functions should not alter the contents of the buffer. Instead, they should return annotations.</target>
        </trans-unit>
        <trans-unit id="ad430a2aa751ead60d08bdf9430d36b7f4df318c" translate="yes" xml:space="preserve">
          <source>A list of functions to be called before playing a sound. Each function is called with one argument, a property list that describes the sound.</source>
          <target state="translated">サウンドを再生する前に呼び出される関数のリスト。それぞれの関数は、1つの引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9762c2a4058c3add2cfe39ddf8d9dd6bdb44523b" translate="yes" xml:space="preserve">
          <source>A list of one element, which is an integer. This form of prefix argument results from one or a succession of</source>
          <target state="translated">整数である1つの要素のリスト。この形式のプレフィックス引数は、1つまたは連続した</target>
        </trans-unit>
        <trans-unit id="f5b0c0c7f5caee2f5c38fd7fde9aec68fd7f4efb" translate="yes" xml:space="preserve">
          <source>A list of other packages (possibly including minimal acceptable version numbers) on which this package depends. The list may be empty, meaning this package has no dependencies. Otherwise, installing this package also automatically installs its dependencies, recursively; if any dependency cannot be found, the package cannot be installed.</source>
          <target state="translated">このパッケージが依存している他のパッケージのリスト (もしかしたら最小許容バージョン番号も含む)。このリストは空の場合があり、このパッケージには依存関係がないことを意味します。そうでなければ、このパッケージをインストールすると、依存関係も自動的に再帰的にインストールされます。</target>
        </trans-unit>
        <trans-unit id="5b66488132bcde1f299fe22c7b2b1810b9065678" translate="yes" xml:space="preserve">
          <source>A list of paired elements.</source>
          <target state="translated">ペアになっている要素のリスト。</target>
        </trans-unit>
        <trans-unit id="a6fc5f224bd5c8d275550865575a986e426c96bf" translate="yes" xml:space="preserve">
          <source>A list of symbols, specifying the &lt;em&gt;font backends&lt;/em&gt; to use for drawing characters on the frame, in order of priority. In Emacs built without Cairo drawing on X, there are currently three potentially available font backends: &lt;code&gt;x&lt;/code&gt; (the X core font driver), &lt;code&gt;xft&lt;/code&gt; (the Xft font driver), and &lt;code&gt;xfthb&lt;/code&gt; (the Xft font driver with HarfBuzz text shaping). If built with Cairo drawing, there are also three potentially available font backends on X: &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;ftcr&lt;/code&gt; (the FreeType font driver on Cairo), and &lt;code&gt;ftcrhb&lt;/code&gt; (the FreeType font driver on Cairo with HarfBuzz text shaping). When Emacs is built with HarfBuzz, the default font driver is &lt;code&gt;ftcrhb&lt;/code&gt;, although use of the &lt;code&gt;ftcr&lt;/code&gt; driver is still possible, but not recommended. On MS-Windows, there are currently three available font backends: &lt;code&gt;gdi&lt;/code&gt; (the core MS-Windows font driver), &lt;code&gt;uniscribe&lt;/code&gt; (font driver for OTF and TTF fonts with text shaping by the Uniscribe engine), and &lt;code&gt;harfbuzz&lt;/code&gt; (font driver for OTF and TTF fonts with HarfBuzz text shaping) (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Windows-Fonts.html#Windows-Fonts&quot;&gt;Windows Fonts&lt;/a&gt; in</source>
          <target state="translated">A list of symbols, specifying the &lt;em&gt;font backends&lt;/em&gt; to use for drawing characters on the frame, in order of priority. In Emacs built without Cairo drawing on X, there are currently three potentially available font backends: &lt;code&gt;x&lt;/code&gt; (the X core font driver), &lt;code&gt;xft&lt;/code&gt; (the Xft font driver), and &lt;code&gt;xfthb&lt;/code&gt; (the Xft font driver with HarfBuzz text shaping). If built with Cairo drawing, there are also three potentially available font backends on X: &lt;code&gt;x&lt;/code&gt; , &lt;code&gt;ftcr&lt;/code&gt; (the FreeType font driver on Cairo), and &lt;code&gt;ftcrhb&lt;/code&gt; (the FreeType font driver on Cairo with HarfBuzz text shaping). When Emacs is built with HarfBuzz, the default font driver is &lt;code&gt;ftcrhb&lt;/code&gt; , although use of the &lt;code&gt;ftcr&lt;/code&gt; driver is still possible, but not recommended. On MS-Windows, there are currently three available font backends: &lt;code&gt;gdi&lt;/code&gt; (the core MS-Windows font driver), &lt;code&gt;uniscribe&lt;/code&gt; (font driver for OTF and TTF fonts with text shaping by the Uniscribe engine), and &lt;code&gt;harfbuzz&lt;/code&gt; (font driver for OTF and TTF fonts with HarfBuzz text shaping) (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Windows-Fonts.html#Windows-Fonts&quot;&gt;Windows Fonts&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="889ce2ae30cbe0ed4180a7fd8f0ae655444bf1e7" translate="yes" xml:space="preserve">
          <source>A list of terminal parameters. See &lt;a href=&quot;terminal-parameters#Terminal-Parameters&quot;&gt;Terminal Parameters&lt;/a&gt;.</source>
          <target state="translated">A list of terminal parameters. See &lt;a href=&quot;terminal-parameters#Terminal-Parameters&quot;&gt;Terminal Parameters&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="486df487a5b36966765d7fa430db38ceca9357e2" translate="yes" xml:space="preserve">
          <source>A list whose first element is a string or list means to process all the elements recursively and concatenate the results. This is the most common form of mode line construct.</source>
          <target state="translated">最初の要素が文字列またはリストであるリストは、すべての要素を再帰的に処理し、その結果を連結することを意味します。これはモード行構成の最も一般的な形式です。</target>
        </trans-unit>
        <trans-unit id="537d031a677ca36fa6b9cad5a659d5374622bf7d" translate="yes" xml:space="preserve">
          <source>A list whose first element is a symbol representing the font type, one of &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;opentype&lt;/code&gt;, &lt;code&gt;truetype&lt;/code&gt;, &lt;code&gt;type1&lt;/code&gt;, &lt;code&gt;pcf&lt;/code&gt;, or &lt;code&gt;bdf&lt;/code&gt;. For OpenType fonts, the list includes 2 additional elements describing the &lt;small&gt;GSUB&lt;/small&gt; and &lt;small&gt;GPOS&lt;/small&gt; features supported by the font. Each of these elements is a list of the form &lt;code&gt;((&lt;var&gt;script&lt;/var&gt; (&lt;var&gt;langsys&lt;/var&gt; &lt;var&gt;feature&lt;/var&gt; &amp;hellip;) &amp;hellip;)
&amp;hellip;)&lt;/code&gt;, where &lt;var&gt;script&lt;/var&gt; is a symbol representing an OpenType script tag, &lt;var&gt;langsys&lt;/var&gt; is a symbol representing an OpenType langsys tag (or &lt;code&gt;nil&lt;/code&gt;, which stands for the default langsys), and each &lt;var&gt;feature&lt;/var&gt; is a symbol representing an OpenType feature tag.</source>
          <target state="translated">A list whose first element is a symbol representing the font type, one of &lt;code&gt;x&lt;/code&gt; , &lt;code&gt;opentype&lt;/code&gt; , &lt;code&gt;truetype&lt;/code&gt; , &lt;code&gt;type1&lt;/code&gt; , &lt;code&gt;pcf&lt;/code&gt; , or &lt;code&gt;bdf&lt;/code&gt; . For OpenType fonts, the list includes 2 additional elements describing the &lt;small&gt;GSUB&lt;/small&gt; and &lt;small&gt;GPOS&lt;/small&gt; features supported by the font. Each of these elements is a list of the form &lt;code&gt;((&lt;var&gt;script&lt;/var&gt; (&lt;var&gt;langsys&lt;/var&gt; &lt;var&gt;feature&lt;/var&gt; &amp;hellip;) &amp;hellip;) &amp;hellip;)&lt;/code&gt; , where &lt;var&gt;script&lt;/var&gt; is a symbol representing an OpenType script tag, &lt;var&gt;langsys&lt;/var&gt; is a symbol representing an OpenType langsys tag (or &lt;code&gt;nil&lt;/code&gt; , which stands for the default langsys), and each &lt;var&gt;feature&lt;/var&gt; is a symbol representing an OpenType feature tag.</target>
        </trans-unit>
        <trans-unit id="0ce46748c8e3407b9e05ae90432a1d1f6fcfef35" translate="yes" xml:space="preserve">
          <source>A list whose first element is a symbol that is not a keyword specifies a conditional. Its meaning depends on the value of &lt;var&gt;symbol&lt;/var&gt;. If &lt;var&gt;symbol&lt;/var&gt; has a non-&lt;code&gt;nil&lt;/code&gt; value, the second element, &lt;var&gt;then&lt;/var&gt;, is processed recursively as a mode line construct. Otherwise, the third element, &lt;var&gt;else&lt;/var&gt;, is processed recursively. You may omit &lt;var&gt;else&lt;/var&gt;; then the mode line construct displays nothing if the value of &lt;var&gt;symbol&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt; or void.</source>
          <target state="translated">A list whose first element is a symbol that is not a keyword specifies a conditional. Its meaning depends on the value of &lt;var&gt;symbol&lt;/var&gt; . If &lt;var&gt;symbol&lt;/var&gt; has a non- &lt;code&gt;nil&lt;/code&gt; value, the second element, &lt;var&gt;then&lt;/var&gt; , is processed recursively as a mode line construct. Otherwise, the third element, &lt;var&gt;else&lt;/var&gt; , is processed recursively. You may omit &lt;var&gt;else&lt;/var&gt; ; then the mode line construct displays nothing if the value of &lt;var&gt;symbol&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt; or void.</target>
        </trans-unit>
        <trans-unit id="53b4d74e824eb5439ef4ec98237a2b8623aea845" translate="yes" xml:space="preserve">
          <source>A list whose first element is an integer specifies truncation or padding of the results of &lt;var&gt;rest&lt;/var&gt;. The remaining elements &lt;var&gt;rest&lt;/var&gt; are processed recursively as mode line constructs and concatenated together. When &lt;var&gt;width&lt;/var&gt; is positive, the result is space filled on the right if its width is less than &lt;var&gt;width&lt;/var&gt;. When &lt;var&gt;width&lt;/var&gt; is negative, the result is truncated on the right to -&lt;var&gt;width&lt;/var&gt; columns if its width exceeds -&lt;var&gt;width&lt;/var&gt;.</source>
          <target state="translated">A list whose first element is an integer specifies truncation or padding of the results of &lt;var&gt;rest&lt;/var&gt; . The remaining elements &lt;var&gt;rest&lt;/var&gt; are processed recursively as mode line constructs and concatenated together. When &lt;var&gt;width&lt;/var&gt; is positive, the result is space filled on the right if its width is less than &lt;var&gt;width&lt;/var&gt; . When &lt;var&gt;width&lt;/var&gt; is negative, the result is truncated on the right to - &lt;var&gt;width&lt;/var&gt; columns if its width exceeds - &lt;var&gt;width&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="200a1fdf699f4365c5108897a4f0ff20723ba395" translate="yes" xml:space="preserve">
          <source>A list whose first element is the symbol &lt;code&gt;:eval&lt;/code&gt; says to evaluate &lt;var&gt;form&lt;/var&gt;, and use the result as a string to display. Make sure this evaluation cannot load any files, as doing so could cause infinite recursion.</source>
          <target state="translated">A list whose first element is the symbol &lt;code&gt;:eval&lt;/code&gt; says to evaluate &lt;var&gt;form&lt;/var&gt; , and use the result as a string to display. Make sure this evaluation cannot load any files, as doing so could cause infinite recursion.</target>
        </trans-unit>
        <trans-unit id="1a68e385750b6b6bb2e3e3b921b8caab43897c33" translate="yes" xml:space="preserve">
          <source>A list whose first element is the symbol &lt;code&gt;:propertize&lt;/code&gt; says to process the mode line construct &lt;var&gt;elt&lt;/var&gt; recursively, then add the text properties specified by &lt;var&gt;props&lt;/var&gt; to the result. The argument &lt;var&gt;props&lt;/var&gt; should consist of zero or more pairs &lt;var&gt;text-property&lt;/var&gt;&lt;var&gt;value&lt;/var&gt;. If &lt;var&gt;elt&lt;/var&gt; is or produces a string with text properties, all the characters of that string should have the same properties, or else some of them might be removed by &lt;code&gt;:propertize&lt;/code&gt;.</source>
          <target state="translated">A list whose first element is the symbol &lt;code&gt;:propertize&lt;/code&gt; says to process the mode line construct &lt;var&gt;elt&lt;/var&gt; recursively, then add the text properties specified by &lt;var&gt;props&lt;/var&gt; to the result. The argument &lt;var&gt;props&lt;/var&gt; should consist of zero or more pairs &lt;var&gt;text-property&lt;/var&gt; &lt;var&gt;value&lt;/var&gt; . If &lt;var&gt;elt&lt;/var&gt; is or produces a string with text properties, all the characters of that string should have the same properties, or else some of them might be removed by &lt;code&gt;:propertize&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="99145ab59880d8f2b7e6b9be7771bce95706ef5a" translate="yes" xml:space="preserve">
          <source>A list with no elements in it is the &lt;em&gt;empty list&lt;/em&gt;; it is identical to the symbol &lt;code&gt;nil&lt;/code&gt;. In other words, &lt;code&gt;nil&lt;/code&gt; is both a symbol and a list.</source>
          <target state="translated">A list with no elements in it is the &lt;em&gt;empty list&lt;/em&gt;; it is identical to the symbol &lt;code&gt;nil&lt;/code&gt; . In other words, &lt;code&gt;nil&lt;/code&gt; is both a symbol and a list.</target>
        </trans-unit>
        <trans-unit id="8d5b45234e07684855dcd49734c72caa44271737" translate="yes" xml:space="preserve">
          <source>A local keymap can cancel a menu bar item made by the global keymap by rebinding the same fake function key with &lt;code&gt;undefined&lt;/code&gt; as the binding. For example, this is how Dired suppresses the &amp;lsquo;</source>
          <target state="translated">A local keymap can cancel a menu bar item made by the global keymap by rebinding the same fake function key with &lt;code&gt;undefined&lt;/code&gt; as the binding. For example, this is how Dired suppresses the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="7c4cffa2e30c2997d566ee8758396b533735bf09" translate="yes" xml:space="preserve">
          <source>A loop that scans the buffer forwards, creating overlays, can run faster if you do &lt;code&gt;(overlay-recenter (point-max))&lt;/code&gt; first.</source>
          <target state="translated">A loop that scans the buffer forwards, creating overlays, can run faster if you do &lt;code&gt;(overlay-recenter (point-max))&lt;/code&gt; first.</target>
        </trans-unit>
        <trans-unit id="a7efdb49985c362b0ca4c8aa6d3088d6718cc09a" translate="yes" xml:space="preserve">
          <source>A lot of code uses the old &lt;code&gt;defadvice&lt;/code&gt; mechanism, which is largely made obsolete by the new &lt;code&gt;advice-add&lt;/code&gt;, whose implementation and semantics is significantly simpler.</source>
          <target state="translated">A lot of code uses the old &lt;code&gt;defadvice&lt;/code&gt; mechanism, which is largely made obsolete by the new &lt;code&gt;advice-add&lt;/code&gt; , whose implementation and semantics is significantly simpler.</target>
        </trans-unit>
        <trans-unit id="0ae5e6660e603f36f91418d149ae3a32b329069b" translate="yes" xml:space="preserve">
          <source>A lower-level function for standardizing file names, which &lt;code&gt;locate-user-emacs-file&lt;/code&gt; uses as a subroutine, is &lt;code&gt;convert-standard-filename&lt;/code&gt;.</source>
          <target state="translated">A lower-level function for standardizing file names, which &lt;code&gt;locate-user-emacs-file&lt;/code&gt; uses as a subroutine, is &lt;code&gt;convert-standard-filename&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="204dc77e267dd20b6bd5f085404e9de55232cab4" translate="yes" xml:space="preserve">
          <source>A macro (see &lt;a href=&quot;macros#Macros&quot;&gt;Macros&lt;/a&gt;) can also be marked obsolete with &lt;code&gt;make-obsolete&lt;/code&gt;; this has the same effects as for a function. An alias for a function or macro can also be marked as obsolete; this makes the alias itself obsolete, not the function or macro which it resolves to.</source>
          <target state="translated">A macro (see &lt;a href=&quot;macros#Macros&quot;&gt;Macros&lt;/a&gt;) can also be marked obsolete with &lt;code&gt;make-obsolete&lt;/code&gt; ; this has the same effects as for a function. An alias for a function or macro can also be marked as obsolete; this makes the alias itself obsolete, not the function or macro which it resolves to.</target>
        </trans-unit>
        <trans-unit id="bb6a5825df107e5229f7ac1f45fb39d09577f95a" translate="yes" xml:space="preserve">
          <source>A macro call looks just like a function call in that it is a list which starts with the name of the macro. The rest of the elements of the list are the arguments of the macro.</source>
          <target state="translated">マクロの呼び出しは、マクロの名前で始まるリストであるという点で、関数の呼び出しと同じように見えます。リストの残りの要素はマクロの引数です。</target>
        </trans-unit>
        <trans-unit id="c88b5640d4554aef41be1be878e9894c1dc41ba1" translate="yes" xml:space="preserve">
          <source>A magic autoload comment (often called an &lt;em&gt;autoload cookie&lt;/em&gt;) consists of &amp;lsquo;</source>
          <target state="translated">A magic autoload comment (often called an &lt;em&gt;autoload cookie&lt;/em&gt;) consists of &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="bdf7d7f38bdc264583d1a0710beb7e25f8ed382e" translate="yes" xml:space="preserve">
          <source>A major client of this is &lt;code&gt;display-buffer-reuse-window&lt;/code&gt;, but all other action functions that try to reuse a window are affected as well. &lt;code&gt;display-buffer-in-previous-window&lt;/code&gt; consults it when searching for a window that previously displayed the buffer on another frame.</source>
          <target state="translated">A major client of this is &lt;code&gt;display-buffer-reuse-window&lt;/code&gt; , but all other action functions that try to reuse a window are affected as well. &lt;code&gt;display-buffer-in-previous-window&lt;/code&gt; consults it when searching for a window that previously displayed the buffer on another frame.</target>
        </trans-unit>
        <trans-unit id="45f557d688272099786e68e616898e0f800432d9" translate="yes" xml:space="preserve">
          <source>A major mode can also rebind the keys</source>
          <target state="translated">メジャーモードはキーのリバインドも可能</target>
        </trans-unit>
        <trans-unit id="781c3e7a06dbadfac8818dd119ef44b70073b8cd" translate="yes" xml:space="preserve">
          <source>A margin display specification looks like &lt;code&gt;((margin
right-margin) &lt;var&gt;spec&lt;/var&gt;)&lt;/code&gt; or &lt;code&gt;((margin left-margin) &lt;var&gt;spec&lt;/var&gt;)&lt;/code&gt;. Here, &lt;var&gt;spec&lt;/var&gt; is another display specification that says what to display in the margin. Typically it is a string of text to display, or an image descriptor.</source>
          <target state="translated">マージン表示仕様は、 &lt;code&gt;((margin right-margin) &lt;var&gt;spec&lt;/var&gt;)&lt;/code&gt; または &lt;code&gt;((margin left-margin) &lt;var&gt;spec&lt;/var&gt;)&lt;/code&gt; ます。ここで、 &lt;var&gt;spec&lt;/var&gt; は、余白に何を表示するかを示す別の表示仕様です。通常、表示するテキストの文字列、または画像記述子です。</target>
        </trans-unit>
        <trans-unit id="e70b47c889fabc845b90767aef6efcf0cf0a1107" translate="yes" xml:space="preserve">
          <source>A marker has three attributes: the marker position, the marker buffer, and the insertion type. The marker position is an integer that is equivalent (at a given time) to the marker as a position in that buffer. But the marker&amp;rsquo;s position value can change during the life of the marker, and often does. Insertion and deletion of text in the buffer relocate the marker. The idea is that a marker positioned between two characters remains between those two characters despite insertion and deletion elsewhere in the buffer. Relocation changes the integer equivalent of the marker.</source>
          <target state="translated">マーカーには、マーカーの位置、マーカーバッファー、挿入タイプの3つの属性があります。マーカーの位置は、そのバッファー内の位置としてのマーカーと（特定の時点で）同等の整数です。ただし、マーカーの位置の値は、マーカーの存続期間中に変更される可能性があり、多くの場合変更されます。バッファ内のテキストの挿入と削除により、マーカーが再配置されます。バッファの他の場所に挿入および削除しても、2つの文字の間に配置されたマーカーがこれらの2つの文字の間に残るという考え方です。再配置により、マーカーに相当する整数が変更されます。</target>
        </trans-unit>
        <trans-unit id="466a2e8e4ddd1269a8d20d90952cb9d2e8d1b556" translate="yes" xml:space="preserve">
          <source>A marker indicating the position of the end of the last output from this process inserted into the buffer. This is often but not always the end of the buffer.</source>
          <target state="translated">バッファに挿入されたこのプロセスからの最後の出力の終了位置を示すマーカ。これは多くの場合、バッファの終了位置であることが多いですが、必ずしもそうとは限りません。</target>
        </trans-unit>
        <trans-unit id="2d9513ddb58517694c738e7fbe081843e380b82c" translate="yes" xml:space="preserve">
          <source>A marker pointing to the position in the buffer that is the first character (in the logical order, see &lt;a href=&quot;bidirectional-display#Bidirectional-Display&quot;&gt;Bidirectional Display&lt;/a&gt;) displayed in the window.</source>
          <target state="translated">ウィンドウに表示される最初の文字（論理的な順序で、&lt;a href=&quot;bidirectional-display#Bidirectional-Display&quot;&gt;双方向表示を&lt;/a&gt;参照）であるバッファー内の位置を指すマーカー。</target>
        </trans-unit>
        <trans-unit id="09e41168573d8c2d601b252f527ba1cf4c63c69d" translate="yes" xml:space="preserve">
          <source>A marker represents a buffer position to jump to.</source>
          <target state="translated">マーカーは、ジャンプ先のバッファ位置を表します。</target>
        </trans-unit>
        <trans-unit id="704ed7dde36adbdca349302504f832854db5ca66" translate="yes" xml:space="preserve">
          <source>A marker specifies a buffer and a position in that buffer. A marker can be used to represent a position in functions that require one, just as an integer could be used. In that case, the marker&amp;rsquo;s buffer is normally ignored. Of course, a marker used in this way usually points to a position in the buffer that the function operates on, but that is entirely the programmer&amp;rsquo;s responsibility. See &lt;a href=&quot;positions#Positions&quot;&gt;Positions&lt;/a&gt;, for a complete description of positions.</source>
          <target state="translated">マーカーは、バッファーとそのバッファー内の位置を指定します。マーカーは、整数を使用できるのと同じように、マーカーを必要とする関数内の位置を表すために使用できます。その場合、マーカーのバッファーは通常無視されます。もちろん、このように使用されるマーカーは通常、関数が操作するバッファー内の位置を指しますが、それは完全にプログラマーの責任です。&lt;a href=&quot;positions#Positions&quot;&gt;体位&lt;/a&gt;の完全な説明については、体位を参照してください。</target>
        </trans-unit>
        <trans-unit id="0bc36f974eb0baf86a8ea0fb18f4b0a30f0045d5" translate="yes" xml:space="preserve">
          <source>A menu item can be a vector of three elements, &lt;code&gt;[&lt;var&gt;name&lt;/var&gt;
&lt;var&gt;callback&lt;/var&gt; &lt;var&gt;enable&lt;/var&gt;]&lt;/code&gt;. &lt;var&gt;name&lt;/var&gt; is the menu item name (a string). &lt;var&gt;callback&lt;/var&gt; is a command to run, or an expression to evaluate, when the item is chosen. &lt;var&gt;enable&lt;/var&gt; is an expression; if it evaluates to &lt;code&gt;nil&lt;/code&gt;, the item is disabled for selection.</source>
          <target state="translated">メニュー項目は、三つの要素のベクトルであることができる、 &lt;code&gt;[&lt;var&gt;name&lt;/var&gt; &lt;var&gt;callback&lt;/var&gt; &lt;var&gt;enable&lt;/var&gt;]&lt;/code&gt; 。 &lt;var&gt;name&lt;/var&gt; は、メニュー項目名（文字列）です。 &lt;var&gt;callback&lt;/var&gt; は、アイテムが選択されたときに実行するコマンド、または評価する式です。 &lt;var&gt;enable&lt;/var&gt; は式です。 &lt;code&gt;nil&lt;/code&gt; と評価された場合、アイテムは選択できません。</target>
        </trans-unit>
        <trans-unit id="6783cd5380d1ff982a022350fe9ec3e438f07ed2" translate="yes" xml:space="preserve">
          <source>A menu separator is a kind of menu item that doesn&amp;rsquo;t display any text&amp;mdash;instead, it divides the menu into subparts with a horizontal line. A separator looks like this in the menu keymap:</source>
          <target state="translated">メニューセパレータは、テキストを表示しない一種のメニュー項目です。代わりに、メニューを水平線でサブパートに分割します。メニューキーマップでは、セパレータは次のようになります。</target>
        </trans-unit>
        <trans-unit id="454923c998127cc9f1ebbf5e81d874369316f380" translate="yes" xml:space="preserve">
          <source>A method of expanding an expression into another expression, more fundamental but less pretty.</source>
          <target state="translated">表現を別の表現に展開する方法で、より基本的なことだが、あまり可愛くない。</target>
        </trans-unit>
        <trans-unit id="e1ebe68a6967a16e6180516760ceccb03b9f1d21" translate="yes" xml:space="preserve">
          <source>A minibuffer window (see &lt;a href=&quot;minibuffer-windows#Minibuffer-Windows&quot;&gt;Minibuffer Windows&lt;/a&gt;) that is not alone on its frame does not have a parent window, so it strictly speaking is not part of its frame&amp;rsquo;s window tree. Nonetheless, it is a sibling window of the frame&amp;rsquo;s root window, and thus can be reached via &lt;code&gt;window-next-sibling&lt;/code&gt;. Also, the function &lt;code&gt;window-tree&lt;/code&gt; described at the end of this section lists the minibuffer window alongside the actual window tree.</source>
          <target state="translated">ミニバッファ・ウィンドウ（参照&lt;a href=&quot;minibuffer-windows#Minibuffer-Windows&quot;&gt;ミニバッファのWindowsを&lt;/a&gt;そのフレーム上だけではありません）親ウィンドウを持っていないので、厳密に言えば、そのフレームのウィンドウツリーの一部ではありません。それでも、これはフレームのルートウィンドウの兄弟ウィンドウであるため、 &lt;code&gt;window-next-sibling&lt;/code&gt; を介してアクセスできます。また、このセクションの最後で説明する関数 &lt;code&gt;window-tree&lt;/code&gt; は、実際のウィンドウツリーと一緒にミニバッファウィンドウを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="89c2b888618beed3c117f354a901a70cc356f1d6" translate="yes" xml:space="preserve">
          <source>A minibuffer window is never a candidate. A dedicated window (see &lt;a href=&quot;dedicated-windows#Dedicated-Windows&quot;&gt;Dedicated Windows&lt;/a&gt;) is never a candidate unless the optional argument &lt;var&gt;dedicated&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;. The selected window is not a candidate if the optional argument &lt;var&gt;not-selected&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;. If the optional argument &lt;var&gt;not-selected&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt; and the selected window is the only candidate, this function returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">ミニバッファウィンドウが候補になることはありません。専用のウィンドウ（参照&lt;a href=&quot;dedicated-windows#Dedicated-Windows&quot;&gt;専用のWindowsは、&lt;/a&gt;オプションの引数がない限り）候補になることはありません &lt;var&gt;dedicated&lt;/var&gt; 非で &lt;code&gt;nil&lt;/code&gt; で。選択されていないオプションの引数が &lt;code&gt;nil&lt;/code&gt; 以外の場合、選択されたウィンドウは候補になり &lt;var&gt;not-selected&lt;/var&gt; 。 &lt;var&gt;not-selected&lt;/var&gt; オプションの引数が &lt;code&gt;nil&lt;/code&gt; 以外で、選択されたウィンドウが唯一の候補である場合、この関数は &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b599a674f06dd65226c7bca41859f38c441875f7" translate="yes" xml:space="preserve">
          <source>A minor limitation of this feature, again because it targets symbols, is that only variables of dynamic scope may be watched. This poses little difficulty, since modifications to lexical variables can be discovered easily by inspecting the code within the scope of the variable (unlike dynamic variables, which can be modified by any code at all, see &lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;Variable Scoping&lt;/a&gt;).</source>
          <target state="translated">この機能のマイナーな制限は、これもシンボルを対象としているため、動的スコープの変数のみを監視できることです。字句変数への変更は、変数のスコープ内のコードを検査することで簡単に発見できるため、これはほとんど問題になりません（動的変数とは異なり、任意のコードで変更できます。&lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;変数のスコープを&lt;/a&gt;参照してください）。</target>
        </trans-unit>
        <trans-unit id="d236ab570a4289eb003477e38186061d1fde0262" translate="yes" xml:space="preserve">
          <source>A minor-mode function to call after visiting a file converted from this format. The function is called with one argument, the integer 1; that tells a minor-mode function to enable the mode.</source>
          <target state="translated">このフォーマットから変換されたファイルを訪問した後に呼び出すマイナーモード関数。この関数は、マイナーモード関数にモードを有効にするかどうかを指示する整数 1 を引数としてコールされます。</target>
        </trans-unit>
        <trans-unit id="c276708ad05da4fad726f0a5b45a06849defae13" translate="yes" xml:space="preserve">
          <source>A mode line construct may be as simple as a fixed string of text, but it usually specifies how to combine fixed strings with variables&amp;rsquo; values to construct the text. Many of these variables are themselves defined to have mode line constructs as their values.</source>
          <target state="translated">モード行の構成は、テキストの固定文字列と同じくらい単純な場合がありますが、通常、固定文字列を変数の値と組み合わせてテキストを構成する方法を指定します。これらの変数の多くは、それ自体が値としてモードライン構造を持つように定義されています。</target>
        </trans-unit>
        <trans-unit id="8afb42d8de6cea8a8b63620c9e3383e0c0f0f509" translate="yes" xml:space="preserve">
          <source>A module can verify that the Emacs executable which loads the module is compatible with the module, by comparing the &lt;code&gt;size&lt;/code&gt; member of the &lt;var&gt;runtime&lt;/var&gt; structure with the value compiled into the module:</source>
          <target state="translated">モジュールは、 &lt;var&gt;runtime&lt;/var&gt; 構造の &lt;code&gt;size&lt;/code&gt; メンバーをモジュールにコンパイルされた値と比較することにより、モジュールをロードするEmacs実行可能ファイルがモジュールと互換性があることを確認できます。</target>
        </trans-unit>
        <trans-unit id="348aed7380113f95130d713670b2f7bc22c14981" translate="yes" xml:space="preserve">
          <source>A module function always returns a value. If the function returns normally, the Lisp code which called it will see the Lisp object corresponding to the &lt;code&gt;emacs_value&lt;/code&gt; value the function returned. However, if the user typed</source>
          <target state="translated">モジュール関数は常に値を返します。関数が正常に戻る場合、それを呼び出したLispコードは、関数が返した &lt;code&gt;emacs_value&lt;/code&gt; 値に対応するLispオブジェクトを参照します。ただし、ユーザーが入力した場合</target>
        </trans-unit>
        <trans-unit id="eb0109953f2a0b65f8f6c1374782995296dbdec9" translate="yes" xml:space="preserve">
          <source>A module function has the following general form and signature:</source>
          <target state="translated">モジュール関数は、以下の一般的な形式とシグネチャを持っています。</target>
        </trans-unit>
        <trans-unit id="9940368a099b58ff18b341d077c7d872ecd6531e" translate="yes" xml:space="preserve">
          <source>A more advanced example would be to trace the calls to the process filter of a process &lt;var&gt;proc&lt;/var&gt;:</source>
          <target state="translated">より高度な例は、プロセス &lt;var&gt;proc&lt;/var&gt; プロセスフィルタへの呼び出しをトレースすることです。</target>
        </trans-unit>
        <trans-unit id="f7dfdb4b11e543f8cc270a0d51db8591bd156e62" translate="yes" xml:space="preserve">
          <source>A more convenient format string for such cases would be something like &lt;code&gt;&quot;%f&amp;nbsp;%l&amp;nbsp;&amp;lt;%e&amp;gt;&quot;&lt;/code&gt;, where each specification character carries more semantic information and can easily be rearranged relative to other specification characters, making such format strings more easily customizable by the user.</source>
          <target state="translated">このような場合のより便利なフォーマット文字列は、 &lt;code&gt;&quot;%f&amp;nbsp;%l&amp;nbsp;&amp;lt;%e&amp;gt;&quot;&lt;/code&gt; ようなものです。各仕様文字はより多くのセマンティック情報を伝達し、他の仕様文字と比較して簡単に再配置できるため、このようなフォーマット文字列は次のように簡単にカスタマイズできます。ユーザー。</target>
        </trans-unit>
        <trans-unit id="5a3d7f1ea620bc2801ba23e243907150a812ed06" translate="yes" xml:space="preserve">
          <source>A more powerful function is &lt;code&gt;store-substring&lt;/code&gt;:</source>
          <target state="translated">より強力な関数は &lt;code&gt;store-substring&lt;/code&gt; です：</target>
        </trans-unit>
        <trans-unit id="0e8d8f144404b38e8eb77a264fc3e628792a87cf" translate="yes" xml:space="preserve">
          <source>A more powerful operation is to mark the variable as &lt;em&gt;automatically buffer-local&lt;/em&gt; by calling &lt;code&gt;make-variable-buffer-local&lt;/code&gt;. You can think of this as making the variable local in all buffers, even those yet to be created. More precisely, the effect is that setting the variable automatically makes the variable local to the current buffer if it is not already so. All buffers start out by sharing the default value of the variable as usual, but setting the variable creates a buffer-local binding for the current buffer. The new value is stored in the buffer-local binding, leaving the default binding untouched. This means that the default value cannot be changed with &lt;code&gt;setq&lt;/code&gt; in any buffer; the only way to change it is with &lt;code&gt;setq-default&lt;/code&gt;.</source>
          <target state="translated">より強力な操作は、 &lt;code&gt;make-variable-buffer-local&lt;/code&gt; を呼び出して、変数を&lt;em&gt;自動的にbuffer-local&lt;/em&gt;としてマークすることです。これは、まだ作成されていないバッファーも含め、すべてのバッファーで変数をローカルにすることと考えることができます。より正確には、変数を設定すると、変数が現在のバッファーに対してローカルになっていない場合は、自動的にローカルになります。すべてのバッファーは、通常どおり変数のデフォルト値を共有することから始まりますが、変数を設定すると、現在のバッファーのバッファーローカルバインディングが作成されます。新しい値はバッファローカルバインディングに保存され、デフォルトのバインディングは変更されません。これは、デフォルト値をどのバッファの &lt;code&gt;setq&lt;/code&gt; でも変更できないことを意味します。それを変更する唯一の方法は、 &lt;code&gt;setq-default&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="dd57642f42b5205af6e02818c9a3f1fe9a885aae" translate="yes" xml:space="preserve">
          <source>A multi-file package is less convenient to create than a single-file package, but it offers more features: it can include multiple Emacs Lisp files, an Info manual, and other file types (such as images).</source>
          <target state="translated">マルチファイルパッケージはシングルファイルパッケージに比べて作成の利便性は劣りますが、より多くの機能を提供します:複数の Emacs Lisp ファイルや Info マニュアル、その他のファイルタイプ (画像など)を含めることができます。</target>
        </trans-unit>
        <trans-unit id="fc6654118704a5566d1ff1cdbb86919396f3250f" translate="yes" xml:space="preserve">
          <source>A multi-frame image has a property &lt;code&gt;:index&lt;/code&gt;, whose value is an integer (counting from 0) that specifies which frame is being displayed.</source>
          <target state="translated">マルチフレーム画像にはプロパティ &lt;code&gt;:index&lt;/code&gt; があり、その値は表示されるフレームを指定する整数（0から数えて）です。</target>
        </trans-unit>
        <trans-unit id="b4d504d5e42e9c61bf870243dcef604603b80aa9" translate="yes" xml:space="preserve">
          <source>A multi-use object that refers to a function, variable, or property list, and has a unique identity.</source>
          <target state="translated">関数、変数、またはプロパティリストを参照し、一意のアイデンティティを持つマルチユースオブジェクト。</target>
        </trans-unit>
        <trans-unit id="6d71bbf0c51fcb0696b8faf36cf9fec0e3aa991a" translate="yes" xml:space="preserve">
          <source>A mutable object stops being mutable if it is part of an expression that is evaluated. For example:</source>
          <target state="translated">変異可能なオブジェクトは、評価される式の一部である場合、変異可能であることを停止します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="6888a521ac5206883d93875783df2620806f55a5" translate="yes" xml:space="preserve">
          <source>A negative number</source>
          <target state="translated">負の数</target>
        </trans-unit>
        <trans-unit id="e9f4501d43e4d90ee2f96cf1abe12d4d05922e4e" translate="yes" xml:space="preserve">
          <source>A negative number counts from the end of the string, so that -1 signifies the index of the last character of the string. For example:</source>
          <target state="translated">負の数は、文字列の末尾から数えて、-1 は文字列の最後の文字のインデックスを意味します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="2e25842cb9b14194506db7c6020a25184de4be86" translate="yes" xml:space="preserve">
          <source>A negative number has a similar effect as a positive number, but selects the window under the mouse pointer only after the mouse pointer has remained in it for the entire duration of the absolute value of that number and in addition has stopped moving.</source>
          <target state="translated">負の数は正の数と同様の効果がありますが、マウスポインタがその数の絶対値の間ずっとその中にあり、さらに移動が止まった後にのみ、マウスポインタの下のウィンドウが選択されます。</target>
        </trans-unit>
        <trans-unit id="da4adefdf857b6336231abc20b5b558c2ad6342c" translate="yes" xml:space="preserve">
          <source>A nested sub-alist element looks like this:</source>
          <target state="translated">入れ子になったサブアリスト要素は次のようになります。</target>
        </trans-unit>
        <trans-unit id="a12a25db6b08bb0eb9d657dfc01a94bb05fe63fe" translate="yes" xml:space="preserve">
          <source>A new internal window &lt;var&gt;W5&lt;/var&gt; has been created; its children are &lt;var&gt;W2&lt;/var&gt; and the new live window &lt;var&gt;W4&lt;/var&gt;. Now, &lt;var&gt;W2&lt;/var&gt; is the only sibling of &lt;var&gt;W4&lt;/var&gt;, so enlarging &lt;var&gt;W4&lt;/var&gt; will try to shrink &lt;var&gt;W2&lt;/var&gt;, leaving &lt;var&gt;W3&lt;/var&gt; unaffected. Observe that &lt;var&gt;W5&lt;/var&gt; represents a vertical combination of two windows embedded in the vertical combination &lt;var&gt;W1&lt;/var&gt;.</source>
          <target state="translated">新しい内部ウィンドウ &lt;var&gt;W5&lt;/var&gt; が作成されました。その子は &lt;var&gt;W2&lt;/var&gt; と新しいライブウィンドウ &lt;var&gt;W4&lt;/var&gt; です。さて、 &lt;var&gt;W2&lt;/var&gt; は唯一の兄弟である &lt;var&gt;W4&lt;/var&gt; ので拡大、 &lt;var&gt;W4&lt;/var&gt; を縮小しようと &lt;var&gt;W2&lt;/var&gt; を残し、 &lt;var&gt;W3&lt;/var&gt; を影響を受けません。 &lt;var&gt;W5&lt;/var&gt; は、垂直方向の組み合わせ &lt;var&gt;W1&lt;/var&gt; に埋め込まれた2つのウィンドウの垂直方向の組み合わせを表していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8e90e2d8579d4e6fb87c1c41547020d8e134911b" translate="yes" xml:space="preserve">
          <source>A new live window &lt;var&gt;W2&lt;/var&gt; is created, to the left of the internal window &lt;var&gt;W3&lt;/var&gt;. A new internal window &lt;var&gt;W1&lt;/var&gt; is created, becoming the new root window.</source>
          <target state="translated">内部ウィンドウ &lt;var&gt;W3&lt;/var&gt; の左側に、新しいライブウィンドウ &lt;var&gt;W2&lt;/var&gt; が作成されます。新しい内部ウィンドウ &lt;var&gt;W1&lt;/var&gt; が作成され、新しいルートウィンドウになります。</target>
        </trans-unit>
        <trans-unit id="e0f54cfb880806196378b4a34cf642931e193eb7" translate="yes" xml:space="preserve">
          <source>A new window, however, will be created by splitting the reference window such that the chosen window will share the opposite edge with the reference window. In our example, a new root window would be created with a new live window and the reference window as its children. The chosen window&amp;rsquo;s right edge coordinate would then equal the left edge coordinate of the reference window. Its left edge coordinate would equal the left edge coordinate of the frame&amp;rsquo;s new root window.</source>
          <target state="translated">ただし、新しいウィンドウは、選択したウィンドウが参照ウィンドウと反対側のエッジを共有するように参照ウィンドウを分割することによって作成されます。この例では、新しいルートウィンドウは、新しいライブウィンドウとその子としての参照ウィンドウを使用して作成されます。選択したウィンドウの右端の座標は、参照ウィンドウの左端の座標と等しくなります。その左端の座標は、フレームの新しいルートウィンドウの左端の座標と等しくなります。</target>
        </trans-unit>
        <trans-unit id="e78fb6263a1080feaf13664527cc8aee4aa494cc" translate="yes" xml:space="preserve">
          <source>A newline can have a &lt;code&gt;line-height&lt;/code&gt; text or overlay property that controls the total height of the display line ending in that newline.</source>
          <target state="translated">改行には、その改行で終わる表示行の合計の高さを制御する &lt;code&gt;line-height&lt;/code&gt; テキストまたはオーバーレイプロパティを含めることができます。</target>
        </trans-unit>
        <trans-unit id="9d4a406b984bf68d93883ae0aaacc2f86b270542" translate="yes" xml:space="preserve">
          <source>A newline can have a &lt;code&gt;line-height&lt;/code&gt; text or overlay property that controls the total height of the display line ending in that newline. See &lt;a href=&quot;line-height#Line-Height&quot;&gt;Line Height&lt;/a&gt;.</source>
          <target state="translated">改行には、その改行で終わる表示行の合計の高さを制御する &lt;code&gt;line-height&lt;/code&gt; テキストまたはオーバーレイプロパティを含めることができます。&lt;a href=&quot;line-height#Line-Height&quot;&gt;線の高さを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8c8bf6a760bbc674a4774ccb47c86778b816aa24" translate="yes" xml:space="preserve">
          <source>A newline can have a &lt;code&gt;line-spacing&lt;/code&gt; text or overlay property that controls the height of the display line ending with that newline. The property value overrides the default frame line spacing and the buffer local &lt;code&gt;line-spacing&lt;/code&gt; variable. See &lt;a href=&quot;line-height#Line-Height&quot;&gt;Line Height&lt;/a&gt;.</source>
          <target state="translated">改行には、その改行で終わる表示行の高さを制御する &lt;code&gt;line-spacing&lt;/code&gt; テキストまたはオーバーレイプロパティを含めることができます。プロパティ値は、デフォルトのフレーム行間隔とバッファローカル &lt;code&gt;line-spacing&lt;/code&gt; 変数を上書きします。&lt;a href=&quot;line-height#Line-Height&quot;&gt;線の高さを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="11021806fd752c764a129675338bc40ee3fdba04" translate="yes" xml:space="preserve">
          <source>A nine-element vector &lt;code&gt;[&lt;var&gt;a&lt;/var&gt; &lt;var&gt;b&lt;/var&gt; &lt;var&gt;c&lt;/var&gt; &lt;var&gt;d&lt;/var&gt; &lt;var&gt;e&lt;/var&gt;
&lt;var&gt;f&lt;/var&gt; &lt;var&gt;g&lt;/var&gt; &lt;var&gt;h&lt;/var&gt; &lt;var&gt;p&lt;/var&gt;]&lt;/code&gt; represents an IPv6 address along with a port number. &lt;code&gt;format-network-address&lt;/code&gt; converts that to the string &lt;code&gt;&quot;[&lt;var&gt;a&lt;/var&gt;:&lt;var&gt;b&lt;/var&gt;:&lt;var&gt;c&lt;/var&gt;:&lt;var&gt;d&lt;/var&gt;:&lt;var&gt;e&lt;/var&gt;:&lt;var&gt;f&lt;/var&gt;:&lt;var&gt;g&lt;/var&gt;:&lt;var&gt;h&lt;/var&gt;]:&lt;var&gt;p&lt;/var&gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">九要素ベクトル &lt;code&gt;[&lt;var&gt;a&lt;/var&gt; &lt;var&gt;b&lt;/var&gt; &lt;var&gt;c&lt;/var&gt; &lt;var&gt;d&lt;/var&gt; &lt;var&gt;e&lt;/var&gt; &lt;var&gt;f&lt;/var&gt; &lt;var&gt;g&lt;/var&gt; &lt;var&gt;h&lt;/var&gt; &lt;var&gt;p&lt;/var&gt;]&lt;/code&gt; ポート番号とともにIPv6アドレスを表します。 &lt;code&gt;format-network-address&lt;/code&gt; は、それを文字列 &lt;code&gt;&quot;[&lt;var&gt;a&lt;/var&gt;:&lt;var&gt;b&lt;/var&gt;:&lt;var&gt;c&lt;/var&gt;:&lt;var&gt;d&lt;/var&gt;:&lt;var&gt;e&lt;/var&gt;:&lt;var&gt;f&lt;/var&gt;:&lt;var&gt;g&lt;/var&gt;:&lt;var&gt;h&lt;/var&gt;]:&lt;var&gt;p&lt;/var&gt;&quot;&lt;/code&gt; 変換します。</target>
        </trans-unit>
        <trans-unit id="257aa05b7eddcf8d0df8b79a44b34b5bae0010cd" translate="yes" xml:space="preserve">
          <source>A node &lt;em&gt;encapsulates&lt;/em&gt; a data element much the way a variable holds a value. Normally, encapsulation occurs as a part of adding a node to the ewoc. You can retrieve the data element value and place a new value in its place, like so:</source>
          <target state="translated">ノードは、変数が値を保持するのと同じようにデータ要素を&lt;em&gt;カプセル化&lt;/em&gt;します。通常、カプセル化は、ノードをewocに追加する一環として発生します。次のように、データ要素の値を取得して、その場所に新しい値を配置できます。</target>
        </trans-unit>
        <trans-unit id="538490c91b8e54e71e0f8ac6a28516d887289f24" translate="yes" xml:space="preserve">
          <source>A non-&lt;code&gt;nil&lt;/code&gt; value also means that when &lt;code&gt;display-buffer&lt;/code&gt; is looking for a window already displaying &lt;var&gt;buffer-or-name&lt;/var&gt;, it can search any visible or iconified frame, not just the selected frame.</source>
          <target state="translated">非 &lt;code&gt;nil&lt;/code&gt; 値はまた、場合ことを意味する &lt;code&gt;display-buffer&lt;/code&gt; 既に表示しているウィンドウを探している &lt;var&gt;buffer-or-name&lt;/var&gt; 、それが目に見える、またはアイコン化フレームだけでなく、選択されたフレームを検索することができます。</target>
        </trans-unit>
        <trans-unit id="0546509f02b872fbaf2e962a3d60dc4ba6951208" translate="yes" xml:space="preserve">
          <source>A non-&lt;code&gt;nil&lt;/code&gt; value for &lt;code&gt;save-abbrevs&lt;/code&gt; means that Emacs should offer to save abbrevs (if any have changed) when files are saved. If the value is &lt;code&gt;silently&lt;/code&gt;, Emacs saves the abbrevs without asking the user. &lt;code&gt;abbrev-file-name&lt;/code&gt; specifies the file to save the abbrevs in. The default value is &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">非 &lt;code&gt;nil&lt;/code&gt; ののための値 &lt;code&gt;save-abbrevs&lt;/code&gt; （いずれかが変更されている場合）ファイルが保存されている場合、Emacsは略語を保存するために提供しなければならないことを意味します。値が &lt;code&gt;silently&lt;/code&gt; 場合、Emacsはユーザーに尋ねることなく略語を保存します。 &lt;code&gt;abbrev-file-name&lt;/code&gt; は、略語を保存するファイルを指定します。デフォルト値は &lt;code&gt;t&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b743dba1b96b6f3a754be1bd1d208ff3d9b301ed" translate="yes" xml:space="preserve">
          <source>A non-&lt;code&gt;nil&lt;/code&gt; value indicates that the named function is free of side effects (see &lt;a href=&quot;what-is-a-function#What-Is-a-Function&quot;&gt;What Is a Function&lt;/a&gt;), so the byte compiler may ignore a call whose value is unused. If the property&amp;rsquo;s value is &lt;code&gt;error-free&lt;/code&gt;, the byte compiler may even delete such unused calls. In addition to byte compiler optimizations, this property is also used for determining function safety (see &lt;a href=&quot;function-safety#Function-Safety&quot;&gt;Function Safety&lt;/a&gt;).</source>
          <target state="translated">非 &lt;code&gt;nil&lt;/code&gt; の値は、名前の関数が（参照副作用の自由であることを示している&lt;a href=&quot;what-is-a-function#What-Is-a-Function&quot;&gt;関数である何&lt;/a&gt;バイトコンパイラはその値が使用されていない呼び出しを無視することができので、）。プロパティの値に &lt;code&gt;error-free&lt;/code&gt; 場合、バイトコンパイラはそのような未使用の呼び出しを削除することさえあります。バイトコンパイラの最適化に加えて、このプロパティはまた、（参照機能の安全性を決定するために使用される&lt;a href=&quot;function-safety#Function-Safety&quot;&gt;機能安全を&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="68d8637c2c063f5d516fcb409cb0bfe1e6ec8eb6" translate="yes" xml:space="preserve">
          <source>A non-&lt;code&gt;nil&lt;/code&gt; value prevents another frame from being raised or selected, if the window chosen by &lt;code&gt;display-buffer&lt;/code&gt; is displayed there. Primarily affected by this are &lt;code&gt;display-buffer-use-some-frame&lt;/code&gt; and &lt;code&gt;display-buffer-reuse-window&lt;/code&gt;. &lt;code&gt;display-buffer-pop-up-frame&lt;/code&gt; should be affected as well, but there is no guarantee that the window manager will comply.</source>
          <target state="translated">非 &lt;code&gt;nil&lt;/code&gt; 値によって選択されたウィンドウと、隆起した又は選択されるから別のフレームを防止する &lt;code&gt;display-buffer&lt;/code&gt; そこに表示されています。これによって主に影響を受けるのは、 &lt;code&gt;display-buffer-use-some-frame&lt;/code&gt; と &lt;code&gt;display-buffer-reuse-window&lt;/code&gt; です。 &lt;code&gt;display-buffer-pop-up-frame&lt;/code&gt; も影響を受けるはずですが、ウィンドウマネージャーが準拠するという保証はありません。</target>
        </trans-unit>
        <trans-unit id="f7b66ab735a6729f6954795dc552d7446c33c1da" translate="yes" xml:space="preserve">
          <source>A non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;invisible&lt;/code&gt; property can make a character invisible on the screen. See &lt;a href=&quot;invisible-text#Invisible-Text&quot;&gt;Invisible Text&lt;/a&gt;, for details.</source>
          <target state="translated">非 &lt;code&gt;nil&lt;/code&gt; の &lt;code&gt;invisible&lt;/code&gt; 財産は、画面上の文字を不可視にすることができます。詳細については、非表示の&lt;a href=&quot;invisible-text#Invisible-Text&quot;&gt;テキスト&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2242bd96c0d6345a1c62e452fe3a19f8f5f50094" translate="yes" xml:space="preserve">
          <source>A non-sparse keymap can have a parent too, but this is not very useful. A non-sparse keymap always specifies something as the binding for every numeric character code without modifier bits, even if it is &lt;code&gt;nil&lt;/code&gt;, so these character&amp;rsquo;s bindings are never inherited from the parent keymap.</source>
          <target state="translated">非スパースキーマップにも親を含めることができますが、これはあまり役に立ちません。非スパースキーマップは、たとえそれが &lt;code&gt;nil&lt;/code&gt; であっても、修飾子ビットのないすべての数値文字コードのバインディングとして常に何かを指定するため、これらの文字のバインディングが親キーマップから継承されることはありません。</target>
        </trans-unit>
        <trans-unit id="96fdb38fb061323696d5e6da2be26efebae2b6ce" translate="yes" xml:space="preserve">
          <source>A non-zero value means the fringes outside the display margins; othersize they are between the margin and the text.</source>
          <target state="translated">0以外の値は、表示マージンの外側にあるフリンジを意味し、それ以外のサイズはマージンとテキストの間にあることを意味します。</target>
        </trans-unit>
        <trans-unit id="1e856f1217fd9e054bd7c26d7ccd34fcad9679df" translate="yes" xml:space="preserve">
          <source>A non-zero value means the window&amp;rsquo;s buffer was modified when the window was last updated.</source>
          <target state="translated">ゼロ以外の値は、ウィンドウが最後に更新されたときにウィンドウのバッファーが変更されたことを意味します。</target>
        </trans-unit>
        <trans-unit id="f4ced26d5ee072b933c88766864abe951040432f" translate="yes" xml:space="preserve">
          <source>A normal hook run by &lt;code&gt;make-frame&lt;/code&gt; before it creates the frame.</source>
          <target state="translated">&lt;code&gt;make-frame&lt;/code&gt; 作成する前にmake-frameによって実行される通常のフック。</target>
        </trans-unit>
        <trans-unit id="e085a7032b28a27db16c87868f46e839741bf52e" translate="yes" xml:space="preserve">
          <source>A normal hook run when the Emacs server creates a client frame. When this hook is called, the created frame is the selected one. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html#Emacs-Server&quot;&gt;Emacs Server&lt;/a&gt; in</source>
          <target state="translated">Emacsサーバーがクライアントフレームを作成するときに実行される通常のフック。このフックが呼び出されると、作成されたフレームが選択されたフレームになります。の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html#Emacs-Server&quot;&gt;Emacsサーバー&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="69b2704fab7bbe92fe40d18eb3d4fc4767c355fa" translate="yes" xml:space="preserve">
          <source>A note to C programmers: a Lisp list thus works as a &lt;em&gt;linked list&lt;/em&gt; built up of cons cells. Because pointers in Lisp are implicit, we do not distinguish between a cons cell slot holding a value versus pointing to the value.</source>
          <target state="translated">Cプログラマーへの注意：したがって、Lispリストはconsセルで構成された&lt;em&gt;リンクリスト&lt;/em&gt;として機能します。Lispのポインタは暗黙的であるため、値を保持するconsセルスロットと値を指すconsセルスロットを区別しません。</target>
        </trans-unit>
        <trans-unit id="8bf2ac93cadbf3bbb911da1d57b28b3c7ca4f30c" translate="yes" xml:space="preserve">
          <source>A number stands for itself. If &lt;code&gt;insert-register&lt;/code&gt; finds a number in the register, it converts the number to decimal.</source>
          <target state="translated">数字はそれ自体を表しています。場合は &lt;code&gt;insert-register&lt;/code&gt; レジスタに番号を見つけ、それを10進数に変換します。</target>
        </trans-unit>
        <trans-unit id="fbb60e0d4701e93358add5c45d04ef4a9d9e341e" translate="yes" xml:space="preserve">
          <source>A number, &lt;var&gt;factor&lt;/var&gt;, means to use a font that is &lt;var&gt;factor&lt;/var&gt; times as tall as the default font.</source>
          <target state="translated">数値、 &lt;var&gt;factor&lt;/var&gt; は、デフォルトのフォントの &lt;var&gt;factor&lt;/var&gt; 倍の高さのフォントを使用することを意味します。</target>
        </trans-unit>
        <trans-unit id="12ed92f05eab35deca7fec65e22fd2ef456204a0" translate="yes" xml:space="preserve">
          <source>A number, read with the minibuffer. If the input is not a number, the user has to try again. &amp;lsquo;</source>
          <target state="translated">ミニバッファーで読み取った数値。入力が数値でない場合、ユーザーは再試行する必要があります。'</target>
        </trans-unit>
        <trans-unit id="b18f7887ca8513454d55a4d747d8dd6eecba2669" translate="yes" xml:space="preserve">
          <source>A package archive is simply a directory in which the package files, and associated files, are stored. If you want the archive to be reachable via HTTP, this directory must be accessible to a web server; See &lt;a href=&quot;archive-web-server#Archive-Web-Server&quot;&gt;Archive Web Server&lt;/a&gt;.</source>
          <target state="translated">パッケージアーカイブは、パッケージファイルと関連ファイルが保存されるディレクトリです。HTTP経由でアーカイブにアクセスできるようにする場合は、このディレクトリにWebサーバーからアクセスできる必要があります。&lt;a href=&quot;archive-web-server#Archive-Web-Server&quot;&gt;アーカイブWebサーバーを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e8bca31273aea629d01827e859940f97c7f10f48" translate="yes" xml:space="preserve">
          <source>A package is either a &lt;em&gt;simple package&lt;/em&gt; or a &lt;em&gt;multi-file package&lt;/em&gt;. A simple package is stored in a package archive as a single Emacs Lisp file, while a multi-file package is stored as a tar file (containing multiple Lisp files, and possibly non-Lisp files such as a manual).</source>
          <target state="translated">パッケージは、&lt;em&gt;単純なパッケージ&lt;/em&gt;または&lt;em&gt;複数ファイルのパッケージの&lt;/em&gt;いずれか&lt;em&gt;です&lt;/em&gt;。単純なパッケージは単一のEmacsLispファイルとしてパッケージアーカイブに保存され、複数ファイルパッケージはtarファイル（複数のLispファイル、場合によってはマニュアルなどの非Lispファイルを含む）として保存されます。</target>
        </trans-unit>
        <trans-unit id="e856d8db6bbaad896bdc3b1232335f7c837149d7" translate="yes" xml:space="preserve">
          <source>A pair of integers &lt;code&gt;(&lt;var&gt;ticks&lt;/var&gt; . &lt;var&gt;hz&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;hz&lt;/var&gt; is positive. This represents &lt;var&gt;ticks&lt;/var&gt;/&lt;var&gt;hz&lt;/var&gt; seconds, which is the same time as plain &lt;var&gt;ticks&lt;/var&gt; if &lt;var&gt;hz&lt;/var&gt; is 1. A common value for &lt;var&gt;hz&lt;/var&gt; is 1000000000, for a nanosecond-resolution clock.&lt;a href=&quot;#FOOT24&quot; name=&quot;DOCF24&quot;&gt;&lt;sup&gt;24&lt;/sup&gt;&lt;/a&gt;</source>
          <target state="translated">整数のペアは &lt;code&gt;(&lt;var&gt;ticks&lt;/var&gt; . &lt;var&gt;hz&lt;/var&gt;)&lt;/code&gt; 、 &lt;var&gt;hz&lt;/var&gt; 正です。これは &lt;var&gt;ticks&lt;/var&gt; 表します/ &lt;var&gt;hz&lt;/var&gt; 秒を、 &lt;var&gt;hz&lt;/var&gt; が1の場合のプレーン &lt;var&gt;ticks&lt;/var&gt; と同じ時間です。ナノ秒の解像度のクロックの場合、 &lt;var&gt;hz&lt;/var&gt; の一般的な値は1000000000です。&lt;a href=&quot;#FOOT24&quot; name=&quot;DOCF24&quot;&gt;&lt;sup&gt;24&lt;/sup&gt;&lt;/a&gt;&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="ef07d2e6711012f848d582415b0eef1559c6b894" translate="yes" xml:space="preserve">
          <source>A peculiar wrinkle of this feature is that binding the variable (with &lt;code&gt;let&lt;/code&gt; or other binding constructs) does not create a buffer-local binding for it. Only setting the variable (with &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;setq&lt;/code&gt;), while the variable does not have a &lt;code&gt;let&lt;/code&gt;-style binding that was made in the current buffer, does so.</source>
          <target state="translated">この機能の特有のしわは、変数を（ &lt;code&gt;let&lt;/code&gt; または他のバインディングコンストラクトで）のバッファーローカルバインディングが作成されないことです。（ &lt;code&gt;set&lt;/code&gt; または &lt;code&gt;setq&lt;/code&gt; を使用して）変数を設定するだけで、変数には現在のバッファーで作成された &lt;code&gt;let&lt;/code&gt; スタイルのバインディングがありません。</target>
        </trans-unit>
        <trans-unit id="65536651f3f1ec2171ac27cb6241d27ce7c4b3bb" translate="yes" xml:space="preserve">
          <source>A piece of executable code you can call from elsewhere.</source>
          <target state="translated">他の場所から呼び出すことができる実行コードの一部。</target>
        </trans-unit>
        <trans-unit id="016d0dc9545552ea2f3842743d3079ba4d84de5b" translate="yes" xml:space="preserve">
          <source>A place-holder for a real function. If the autoload object is called, Emacs loads the file containing the definition of the real function, and then calls the real function. See &lt;a href=&quot;autoload#Autoload&quot;&gt;Autoload&lt;/a&gt;.</source>
          <target state="translated">実際の関数のプレースホルダー。autoloadオブジェクトが呼び出されると、Emacsは実関数の定義を含むファイルをロードしてから、実関数を呼び出します。&lt;a href=&quot;autoload#Autoload&quot;&gt;自動ロードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1a22f28df4d8c16ca0f7b01c3698b6f622a0739c" translate="yes" xml:space="preserve">
          <source>A pointer to the &lt;code&gt;buffer_text&lt;/code&gt; structure for this buffer. In an ordinary buffer, this is the &lt;code&gt;own_text&lt;/code&gt; field above. In an indirect buffer, this is the &lt;code&gt;own_text&lt;/code&gt; field of the base buffer.</source>
          <target state="translated">へのポインタ &lt;code&gt;buffer_text&lt;/code&gt; このバッファーのbuffer_text構造体。通常のバッファでは、これは上記の &lt;code&gt;own_text&lt;/code&gt; フィールドです。間接バッファでは、これはベースバッファの &lt;code&gt;own_text&lt;/code&gt; フィールドです。</target>
        </trans-unit>
        <trans-unit id="570f25dd8cbde7553399581a7984cd58caf0d35b" translate="yes" xml:space="preserve">
          <source>A pointer to the next buffer, in the chain of all buffers, including killed buffers. This chain is used only for allocation and garbage collection, in order to collect killed buffers properly.</source>
          <target state="translated">キリングされたバッファを含むすべてのバッファのチェーンの次のバッファへのポインタ。このチェーンは、キルされたバッファを適切に収集するために、アロケーションとガベージコレクションのためにのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="57379d0a3548b0207ddf3db6f5db3f7110d0b085" translate="yes" xml:space="preserve">
          <source>A polygon is a cons &lt;code&gt;(poly . [&lt;var&gt;x0&lt;/var&gt; &lt;var&gt;y0&lt;/var&gt; &lt;var&gt;x1&lt;/var&gt; &lt;var&gt;y1&lt;/var&gt; ...])&lt;/code&gt; where each pair in the vector describes one corner in the polygon.</source>
          <target state="translated">ポリゴンは短所です &lt;code&gt;(poly . [&lt;var&gt;x0&lt;/var&gt; &lt;var&gt;y0&lt;/var&gt; &lt;var&gt;x1&lt;/var&gt; &lt;var&gt;y1&lt;/var&gt; ...])&lt;/code&gt; であり、ベクトルの各ペアはポリゴンの1つのコーナーを表します。</target>
        </trans-unit>
        <trans-unit id="6d184f39a07a100cdc18527abf48e77c7d525171" translate="yes" xml:space="preserve">
          <source>A position in a buffer.</source>
          <target state="translated">バッファ内の位置。</target>
        </trans-unit>
        <trans-unit id="2e300e61cf6c874347a9d67084477385216e6483" translate="yes" xml:space="preserve">
          <source>A positive &lt;var&gt;delta&lt;/var&gt; moves the edge downwards or to the right; a negative &lt;var&gt;delta&lt;/var&gt; moves it upwards or to the left. If the edge cannot be moved as far as specified by &lt;var&gt;delta&lt;/var&gt;, this function moves it as far as possible but does not signal an error.</source>
          <target state="translated">ポジティブ &lt;var&gt;delta&lt;/var&gt; は、エッジを下または右に移動します。負の &lt;var&gt;delta&lt;/var&gt; はそれを上または左に移動します。 &lt;var&gt;delta&lt;/var&gt; で指定された範囲までエッジを移動できない場合、この関数はエッジを可能な限り移動しますが、エラーを通知しません。</target>
        </trans-unit>
        <trans-unit id="00aee430f7407880b2ed8ae8e14a657999cb9fc2" translate="yes" xml:space="preserve">
          <source>A positive integer always relates the left edge of the frame to the left edge of its display or parent frame. A negative integer relates the right frame edge to the right edge of the display or parent frame.</source>
          <target state="translated">正の整数は、常にフレームの左端をディスプレイまたは親フレームの左端に関連付ける。負の整数は、右フレームのエッジをディスプレイまたは親フレームの右エッジに関連付ける。</target>
        </trans-unit>
        <trans-unit id="b5ffcdb1646a361febcec1ea23f34bdb7945e518" translate="yes" xml:space="preserve">
          <source>A positive integer specifies the width of the frame&amp;rsquo;s text area (see &lt;a href=&quot;frame-geometry#Frame-Geometry&quot;&gt;Frame Geometry&lt;/a&gt;) in characters.</source>
          <target state="translated">正の整数は、フレームのテキスト領域（&lt;a href=&quot;frame-geometry#Frame-Geometry&quot;&gt;フレームジオメトリを&lt;/a&gt;参照）の幅を文字で指定します。</target>
        </trans-unit>
        <trans-unit id="ca19f2cd0cc62d23b3cfa1a1fcdc05db8c699a78" translate="yes" xml:space="preserve">
          <source>A positive number</source>
          <target state="translated">正の数</target>
        </trans-unit>
        <trans-unit id="90c812fcb50800a70596785c5c0f3157cdfad686" translate="yes" xml:space="preserve">
          <source>A positive value of &lt;var&gt;delta&lt;/var&gt; means to check whether the window can be enlarged by that number of lines or columns; a negative value of &lt;var&gt;delta&lt;/var&gt; means to check whether the window can be shrunk by that many lines or columns. If &lt;var&gt;delta&lt;/var&gt; is non-zero, a return value of 0 means that the window cannot be resized.</source>
          <target state="translated">&lt;var&gt;delta&lt;/var&gt; 正の値、ウィンドウがその行数または列数だけ拡大できるかどうかを確認することを意味します。 &lt;var&gt;delta&lt;/var&gt; 負の値は、ウィンドウがその数の行または列で縮小できるかどうかを確認することを意味します。場合 &lt;var&gt;delta&lt;/var&gt; ゼロ以外の、ウィンドウをサイズ変更することができない0手段の戻り値です。</target>
        </trans-unit>
        <trans-unit id="faaf39aa6748e84922a13fdbf38017d24158baa6" translate="yes" xml:space="preserve">
          <source>A predicate function with which to filter possible matches, or &lt;code&gt;nil&lt;/code&gt; if none. The function should call the predicate for each possible match, and ignore the match if the predicate returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">可能な一致をフィルタリングするための述語関数、または &lt;code&gt;nil&lt;/code&gt; 。ない場合はnil。関数は、可能な一致ごとに述語を呼び出し、述語が &lt;code&gt;nil&lt;/code&gt; を返す場合は一致を無視する必要があります。</target>
        </trans-unit>
        <trans-unit id="f75a5fa3a933e8bb3e9c6cbfd95d79808fdc8fe4" translate="yes" xml:space="preserve">
          <source>A predicate&amp;mdash;that is, a function of one argument that returns either &lt;code&gt;nil&lt;/code&gt; or non-&lt;code&gt;nil&lt;/code&gt; according to the argument. Using a predicate in the list says that objects for which the predicate returns non-&lt;code&gt;nil&lt;/code&gt; are acceptable.</source>
          <target state="translated">述語-つまり、 &lt;code&gt;nil&lt;/code&gt; またはnon-のいずれかを返す1つの引数の関数 &lt;code&gt;nil&lt;/code&gt; 、引数に応じて nilの。リストで述語を使用すると、述語が &lt;code&gt;nil&lt;/code&gt; 以外を返すオブジェクトが受け入れ可能であることがわかります。</target>
        </trans-unit>
        <trans-unit id="b10591c3a6de57d65c5089bf32dbdfd76eeb6cd9" translate="yes" xml:space="preserve">
          <source>A primitive that is like a function but does not evaluate all of its arguments in the usual way. It may evaluate only some of the arguments, or may evaluate them in an unusual order, or several times. Examples include &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt;, and &lt;code&gt;while&lt;/code&gt;. See &lt;a href=&quot;special-forms#Special-Forms&quot;&gt;Special Forms&lt;/a&gt;.</source>
          <target state="translated">関数に似ていますが、通常の方法ですべての引数を評価するわけではないプリミティブ。引数の一部のみを評価する場合もあれば、異常な順序で、または数回評価する場合もあります。例としては、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;and&lt;/code&gt; 、と &lt;code&gt;while&lt;/code&gt; 。&lt;a href=&quot;special-forms#Special-Forms&quot;&gt;特別なフォームを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b579867d6cd890e864414d728157548f1b508fd1" translate="yes" xml:space="preserve">
          <source>A problem that will seriously impair Emacs operation soon if you do not attend to it promptly.</source>
          <target state="translated">速やかに対処しないと、すぐにEmacsの動作に深刻な障害が出る問題。</target>
        </trans-unit>
        <trans-unit id="618f1e47e98772bcc8e7d133445246d27c02428e" translate="yes" xml:space="preserve">
          <source>A process &lt;em&gt;filter function&lt;/em&gt; is a function that receives the standard output from the associated process. &lt;em&gt;All&lt;/em&gt; output from that process is passed to the filter. The default filter simply outputs directly to the process buffer.</source>
          <target state="translated">プロセス&lt;em&gt;フィルター関数&lt;/em&gt;は、関連するプロセスから標準出力を受け取る関数です。そのプロセスからの&lt;em&gt;すべての&lt;/em&gt;出力はフィルターに渡されます。デフォルトのフィルターは、単にプロセスバッファーに直接出力します。</target>
        </trans-unit>
        <trans-unit id="42b4112adc62fa10e873c69e88cadab9c30de1e8" translate="yes" xml:space="preserve">
          <source>A process can (and usually does) have an &lt;em&gt;associated buffer&lt;/em&gt;, which is an ordinary Emacs buffer that is used for two purposes: storing the output from the process, and deciding when to kill the process. You can also use the buffer to identify a process to operate on, since in normal practice only one process is associated with any given buffer. Many applications of processes also use the buffer for editing input to be sent to the process, but this is not built into Emacs Lisp.</source>
          <target state="translated">プロセスは&lt;em&gt;関連するバッファを&lt;/em&gt;持つことができます（そして通常はそうします）。これは、プロセスからの出力を保存することと、プロセスをいつ強制終了するかを決定することの2つの目的で使用される通常のEmacsバッファです。通常は1つのプロセスのみが特定のバッファーに関連付けられているため、バッファーを使用して操作するプロセスを識別することもできます。プロセスの多くのアプリケーションも、プロセスに送信される入力を編集するためにバッファーを使用しますが、これはEmacsLispに組み込まれていません。</target>
        </trans-unit>
        <trans-unit id="b9529b352bcf05c67171a60f84faa1cb5c0b72d2" translate="yes" xml:space="preserve">
          <source>A prompt immediately follows the code character. The prompt ends either with the end of the string or with a newline.</source>
          <target state="translated">プロンプトはコード文字の直後に続きます。プロンプトは文字列の最後か改行で終わります。</target>
        </trans-unit>
        <trans-unit id="5c8c3454642c57a58973a211104a3e9fe7826baf" translate="yes" xml:space="preserve">
          <source>A pseudo-Lisp summary of searching active maps.</source>
          <target state="translated">アクティブなマップを検索する疑似Lispのまとめ。</target>
        </trans-unit>
        <trans-unit id="3cad1be83cf5d8d04672aa32ebef05f6a9b2fc4d" translate="yes" xml:space="preserve">
          <source>A question followed by an answer has two messages like the ones produced by &lt;code&gt;y-or-n-p&lt;/code&gt;: the first is &amp;lsquo;</source>
          <target state="translated">質問とそれに続く回答には、によって生成されたもののような2つのメッセージがあります &lt;code&gt;y-or-n-p&lt;/code&gt; 。最初のは 'です。</target>
        </trans-unit>
        <trans-unit id="8ea502c0ed6ef5dfe4f9ef1e23c5f6d04605cf5f" translate="yes" xml:space="preserve">
          <source>A quoted constant&amp;mdash;that is, &lt;code&gt;'&lt;var&gt;object&lt;/var&gt;&lt;/code&gt;. This sort of element in the list says that &lt;var&gt;object&lt;/var&gt; itself is an acceptable value.</source>
          <target state="translated">引用符で囲まれた定数、つまり &lt;code&gt;'&lt;var&gt;object&lt;/var&gt;&lt;/code&gt; 。リスト内のこの種の要素は、 &lt;var&gt;object&lt;/var&gt; 自体が許容可能な値であることを示しています。</target>
        </trans-unit>
        <trans-unit id="242ca05185b3294d6a0d632822a42b3a5da80025" translate="yes" xml:space="preserve">
          <source>A range is not affected by the locale&amp;rsquo;s collation sequence: it always represents the set of characters with codepoints ranging between those of its bounds, so that &amp;lsquo;</source>
          <target state="translated">範囲は、ロケールの照合順序の影響を受けません。常に、境界の範囲内のコードポイントを持つ文字のセットを表すため、 '</target>
        </trans-unit>
        <trans-unit id="5c4c3a1951ef6f57d1c7ca838ccf2d8eb696240b" translate="yes" xml:space="preserve">
          <source>A record is considered a constant for evaluation: the result of evaluating it is the same record. This does not evaluate or even examine the slots. See &lt;a href=&quot;self_002devaluating-forms#Self_002dEvaluating-Forms&quot;&gt;Self-Evaluating Forms&lt;/a&gt;.</source>
          <target state="translated">レコードは評価の定数と見なされます。評価の結果は同じレコードです。これはスロットを評価したり調べたりすることはありません。&lt;a href=&quot;self_002devaluating-forms#Self_002dEvaluating-Forms&quot;&gt;自己評価フォームを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1e8a6905d630d3404029e75db8db9a5413103c0b" translate="yes" xml:space="preserve">
          <source>A rectangle is a cons &lt;code&gt;(rect . ((&lt;var&gt;x0&lt;/var&gt; . &lt;var&gt;y0&lt;/var&gt;) . (&lt;var&gt;x1&lt;/var&gt; . &lt;var&gt;y1&lt;/var&gt;)))&lt;/code&gt; which specifies the pixel coordinates of the upper left and bottom right corners of the rectangle area.</source>
          <target state="translated">矩形が短所である &lt;code&gt;(rect . ((&lt;var&gt;x0&lt;/var&gt; . &lt;var&gt;y0&lt;/var&gt;) . (&lt;var&gt;x1&lt;/var&gt; . &lt;var&gt;y1&lt;/var&gt;)))&lt;/code&gt; 矩形領域の左上と右下の角の画素の座標を指定します。</target>
        </trans-unit>
        <trans-unit id="760581ec68346b2eddde59f770ca37fb8b422e75" translate="yes" xml:space="preserve">
          <source>A rectangle is represented by a list of strings.</source>
          <target state="translated">矩形は文字列のリストで表されます。</target>
        </trans-unit>
        <trans-unit id="3346e6273038fc64f4fbb8d374b1fce2c136e83d" translate="yes" xml:space="preserve">
          <source>A region is valid if it has a non-zero size, or if the user option &lt;code&gt;use-empty-active-region&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt; (by default, it is &lt;code&gt;nil&lt;/code&gt;). The function &lt;code&gt;region-active-p&lt;/code&gt; is similar to &lt;code&gt;use-region-p&lt;/code&gt;, but considers all regions as valid. In most cases, you should not use &lt;code&gt;region-active-p&lt;/code&gt;, since if the region is empty it is often more appropriate to operate on point.</source>
          <target state="translated">領域のサイズがゼロ以外の場合、またはユーザーオプション &lt;code&gt;use-empty-active-region&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; 以外（デフォルトでは &lt;code&gt;nil&lt;/code&gt; ）の場合、領域は有効です。関数 &lt;code&gt;region-active-p&lt;/code&gt; は &lt;code&gt;use-region-p&lt;/code&gt; に似ていますが、すべてのリージョンが有効であると見なされます。ほとんどの場合、 &lt;code&gt;region-active-p&lt;/code&gt; は使用しないでください。リージョンが空の場合は、ポイントで操作する方が適切な場合が多いためです。</target>
        </trans-unit>
        <trans-unit id="7645bf9394c9f078e2e073f4f4aec37d09bc9f80" translate="yes" xml:space="preserve">
          <source>A register is a sort of variable used in Emacs editing that can hold a variety of different kinds of values. Each register is named by a single character. All</source>
          <target state="translated">レジスタとは、Emacs編集で使用される変数の一種で、様々な種類の値を保持することができます。各レジスタは1文字で命名されます。すべての</target>
        </trans-unit>
        <trans-unit id="7979e8220db786a30b8cd38e091bc3092e455529" translate="yes" xml:space="preserve">
          <source>A regular expression which is used to recognize files represented in this format. If &lt;code&gt;nil&lt;/code&gt;, the format is never applied automatically.</source>
          <target state="translated">この形式で表されるファイルを認識するために使用される正規表現。場合 &lt;code&gt;nil&lt;/code&gt; 、フォーマットが自動的に適用されることはありません。</target>
        </trans-unit>
        <trans-unit id="c24b91a9f9a759a8c4432a87f2b4e9fd5d3ae1d4" translate="yes" xml:space="preserve">
          <source>A repeating timer nominally ought to run every &lt;var&gt;repeat&lt;/var&gt; seconds, but remember that any invocation of a timer can be late. Lateness of one repetition has no effect on the scheduled time of the next repetition. For instance, if Emacs is busy computing for long enough to cover three scheduled repetitions of the timer, and then starts to wait, it will immediately call the timer function three times in immediate succession (presuming no other timers trigger before or between them). If you want a timer to run again no less than &lt;var&gt;n&lt;/var&gt; seconds after the last invocation, don&amp;rsquo;t use the &lt;var&gt;repeat&lt;/var&gt; argument. Instead, the timer function should explicitly reschedule the timer.</source>
          <target state="translated">繰り返しタイマーは、名目上、 &lt;var&gt;repeat&lt;/var&gt; 秒ごとに実行する必要がありますが、タイマーの呼び出しは遅れる可能性があることに注意してください。1回の繰り返しの遅延は、次の繰り返しのスケジュールされた時間には影響しません。たとえば、Emacsがタイマーのスケジュールされた3回の繰り返しをカバーするのに十分な時間コンピューティングでビジー状態になり、その後待機を開始した場合、Emacsはすぐにタイマー関数を3回続けて呼び出します（他のタイマーがそれらの前または間にトリガーされないと仮定します）。最後の呼び出しから &lt;var&gt;n&lt;/var&gt; 秒以上後にタイマーを再度実行する場合は、 &lt;var&gt;repeat&lt;/var&gt; 引数を使用しないでください。代わりに、タイマー関数は明示的にタイマーを再スケジュールする必要があります。</target>
        </trans-unit>
        <trans-unit id="e2f2ef14d718ca929e8c78fb3c4ed893768a421e" translate="yes" xml:space="preserve">
          <source>A report of data or circumstances that are inherently wrong.</source>
          <target state="translated">本質的に間違っているデータや状況の報告。</target>
        </trans-unit>
        <trans-unit id="eb8781d25e6f48f39b9f40a9a917637ab87ff6e8" translate="yes" xml:space="preserve">
          <source>A report of data or circumstances that are not inherently wrong, but raise suspicion of a possible problem.</source>
          <target state="translated">本質的に間違っているわけではないが、疑念を抱かせるようなデータや状況の報告。</target>
        </trans-unit>
        <trans-unit id="d307c7cf4ee99bc6a57ebcd6b8bdb77c9921af7c" translate="yes" xml:space="preserve">
          <source>A report of information that may be useful if you are debugging.</source>
          <target state="translated">デバッグをしていると便利そうな情報の報告。</target>
        </trans-unit>
        <trans-unit id="c2d41ababeb627cbea79a2b4774d407966246992" translate="yes" xml:space="preserve">
          <source>A request coming into the Emacs server (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html#Emacs-Server&quot;&gt;Emacs Server&lt;/a&gt; in</source>
          <target state="translated">Emacsのサーバーに入ってくる要求（参照&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html#Emacs-Server&quot;&gt;Emacsのサーバー&lt;/a&gt;での</target>
        </trans-unit>
        <trans-unit id="4719bdbbbee0aec61be6413a247c988307546c30" translate="yes" xml:space="preserve">
          <source>A search which fails may or may not alter the match data. In the current implementation, it does not, but we may change it in the future. Don&amp;rsquo;t try to rely on the value of the match data after a failing search.</source>
          <target state="translated">失敗した検索は、一致データを変更する場合と変更しない場合があります。現在の実装では変更されていませんが、将来変更される可能性があります。検索に失敗した後は、一致データの値に依存しようとしないでください。</target>
        </trans-unit>
        <trans-unit id="19f76fe6ffeea4fd01e5d22be85263b150bdcc1b" translate="yes" xml:space="preserve">
          <source>A self-evaluating form yields a value that becomes part of the program, and you should not try to modify it via &lt;code&gt;setcar&lt;/code&gt;, &lt;code&gt;aset&lt;/code&gt; or similar operations. The Lisp interpreter might unify the constants yielded by your program&amp;rsquo;s self-evaluating forms, so that these constants might share structure. See &lt;a href=&quot;mutability#Mutability&quot;&gt;Mutability&lt;/a&gt;.</source>
          <target state="translated">自己評価フォームは、プログラムの一部となる値を生成します &lt;code&gt;setcar&lt;/code&gt; 、 &lt;code&gt;aset&lt;/code&gt; 、または同様の操作を介してそれを変更しようとしないでください。Lispインタプリタは、プログラムの自己評価フォームによって生成された定数を統合して、これらの定数が構造を共有するようにする場合があります。&lt;a href=&quot;mutability#Mutability&quot;&gt;可変性を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="809f65864b2f06a73611f6d9773e8af0e1c6a342" translate="yes" xml:space="preserve">
          <source>A sentinel runs only while Emacs is waiting (e.g., for terminal input, or for time to elapse, or for process output). This avoids the timing errors that could result from running sentinels at random places in the middle of other Lisp programs. A program can wait, so that sentinels will run, by calling &lt;code&gt;sit-for&lt;/code&gt; or &lt;code&gt;sleep-for&lt;/code&gt; (see &lt;a href=&quot;waiting#Waiting&quot;&gt;Waiting&lt;/a&gt;), or &lt;code&gt;accept-process-output&lt;/code&gt; (see &lt;a href=&quot;accepting-output#Accepting-Output&quot;&gt;Accepting Output&lt;/a&gt;). Emacs also allows sentinels to run when the command loop is reading input. &lt;code&gt;delete-process&lt;/code&gt; calls the sentinel when it terminates a running process.</source>
          <target state="translated">センチネルは、Emacsが待機している間（たとえば、端末入力、経過時間、またはプロセス出力）にのみ実行されます。これにより、他のLispプログラムの途中でランダムな場所でセンチネルを実行することによって発生する可能性のあるタイミングエラーが回避されます。プログラムは、 &lt;code&gt;sit-for&lt;/code&gt; または &lt;code&gt;sleep-for&lt;/code&gt; （&lt;a href=&quot;waiting#Waiting&quot;&gt;Waitingを&lt;/a&gt;参照）または &lt;code&gt;accept-process-output&lt;/code&gt; （&lt;a href=&quot;accepting-output#Accepting-Output&quot;&gt;Accepting Outputを&lt;/a&gt;参照）を呼び出すことにより、センチネルが実行されるように待機できます。 Emacsでは、コマンドループが入力を読み取っているときにセンチネルを実行することもできます。 &lt;code&gt;delete-process&lt;/code&gt; は、実行中のプロセスを終了するときにセンチネルを呼び出します。</target>
        </trans-unit>
        <trans-unit id="7e6cb7e7f9dd3a2fd01fc8d41681abcaa0d49a05" translate="yes" xml:space="preserve">
          <source>A sentinel that writes the output into the buffer of the process should check whether the buffer is still alive. If it tries to insert into a dead buffer, it will get an error. If the buffer is dead, &lt;code&gt;(buffer-name (process-buffer &lt;var&gt;process&lt;/var&gt;))&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">プロセスのバッファに出力を書き込む番兵は、バッファがまだ生きているかどうかをチェックする必要があります。デッドバッファに挿入しようとすると、エラーが発生します。バッファが停止している場合、 &lt;code&gt;(buffer-name (process-buffer &lt;var&gt;process&lt;/var&gt;))&lt;/code&gt; は &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9064318e89e1a55faeb1389633cadc95355e58cb" translate="yes" xml:space="preserve">
          <source>A serial connection is represented by a process object, which can be used in a similar way to a subprocess or network process. You can send and receive data, and configure the serial port. A serial process object has no process ID, however, and you can&amp;rsquo;t send signals to it, and the status codes are different from other types of processes. &lt;code&gt;delete-process&lt;/code&gt; on the process object or &lt;code&gt;kill-buffer&lt;/code&gt; on the process buffer close the connection, but this does not affect the device connected to the serial port.</source>
          <target state="translated">シリアル接続は、サブプロセスまたはネットワークプロセスと同様の方法で使用できるプロセスオブジェクトによって表されます。データの送受信、シリアルポートの設定ができます。ただし、シリアルプロセスオブジェクトにはプロセスIDがなく、シグナルを送信することはできません。また、ステータスコードは他のタイプのプロセスとは異なります。プロセスオブジェクトの &lt;code&gt;delete-process&lt;/code&gt; またはプロセスバッファの &lt;code&gt;kill-buffer&lt;/code&gt; は接続を閉じますが、これはシリアルポートに接続されているデバイスには影響しません。</target>
        </trans-unit>
        <trans-unit id="21fa9f7da229282ff2694dd4a704dadec42a314f" translate="yes" xml:space="preserve">
          <source>A series of progress messages has successive messages like those produced by &lt;code&gt;make-progress-reporter&lt;/code&gt;. They have the form &amp;lsquo;</source>
          <target state="translated">一連の進行状況メッセージには、 &lt;code&gt;make-progress-reporter&lt;/code&gt; によって生成されたような連続したメッセージがあります。彼らは形をしています '</target>
        </trans-unit>
        <trans-unit id="d71f439ab0b95d0944c5e07853acd9ce8564b47a" translate="yes" xml:space="preserve">
          <source>A shell command is represented as a string; Emacs runs the command as a filter to perform the conversion.</source>
          <target state="translated">シェルコマンドは文字列として表現され、Emacsは変換を実行するためのフィルタとしてコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="f3bb37324cc51a26f83843d1862a1fad8f6884b1" translate="yes" xml:space="preserve">
          <source>A shell command or function to decode data in this format (to convert file data into the usual Emacs data representation).</source>
          <target state="translated">この形式でデータをデコードするシェルコマンドまたは関数 (ファイルデータを通常の Emacs データ表現に変換する)。</target>
        </trans-unit>
        <trans-unit id="5ec054c18402296c7ff7d861f7941798d34c99a2" translate="yes" xml:space="preserve">
          <source>A shell command or function to encode data in this format&amp;mdash;that is, to convert the usual Emacs data representation into this format.</source>
          <target state="translated">この形式でデータをエンコードする、つまり通常のEmacsデータ表現をこの形式に変換するシェルコマンドまたは関数。</target>
        </trans-unit>
        <trans-unit id="bc6de15dd942ef7840dc24baab1e8703aa52b682" translate="yes" xml:space="preserve">
          <source>A shell connection.</source>
          <target state="translated">シェル接続です。</target>
        </trans-unit>
        <trans-unit id="9094c70e17d9457eebec5ed27a044e758bc6892f" translate="yes" xml:space="preserve">
          <source>A short word (e.g., &amp;lsquo;</source>
          <target state="translated">短い単語（例： '</target>
        </trans-unit>
        <trans-unit id="ce6ed42d12370e9ea126ada03e72bd7201fc704a" translate="yes" xml:space="preserve">
          <source>A short-cut function is useful in modes such as C mode and Lisp mode, where the &lt;code&gt;indent-line-function&lt;/code&gt; must scan from the beginning of the function definition: applying it to each line would be quadratic in time. The short cut can update the scan information as it moves through the lines indenting them; this takes linear time. In a mode where indenting a line individually is fast, there is no need for a short cut.</source>
          <target state="translated">ショートカット関数は、CモードやLispモードなどのモードで役立ちます。このモードでは、 &lt;code&gt;indent-line-function&lt;/code&gt; は関数定義の最初からスキャンする必要があります。各ラインに適用すると、時間は2次関数になります。ショートカットは、スキャン情報をインデントする行を移動するときにスキャン情報を更新できます。これには線形時間がかかります。行を個別にインデントする速度が速いモードでは、ショートカットは必要ありません。</target>
        </trans-unit>
        <trans-unit id="dc7b14268a4f6af9d3385017ee2059ab1e06d721" translate="yes" xml:space="preserve">
          <source>A simple example.</source>
          <target state="translated">簡単な例です。</target>
        </trans-unit>
        <trans-unit id="ab823a2c48df7184be7245e578393bb0a5fddeca" translate="yes" xml:space="preserve">
          <source>A simple kind of menu key binding.</source>
          <target state="translated">シンプルなメニューキーバインドの一種です。</target>
        </trans-unit>
        <trans-unit id="277219dee67d93e83d0e5932ad5a5a1753829752" translate="yes" xml:space="preserve">
          <source>A simple minded indentation engine.</source>
          <target state="translated">シンプルマインドのインデントエンジン。</target>
        </trans-unit>
        <trans-unit id="5d11d08e977e9455c28873a94f783cd668ae1815" translate="yes" xml:space="preserve">
          <source>A simple package consists of a single Emacs Lisp source file. The file must conform to the Emacs Lisp library header conventions (see &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html#Library-Headers&quot;&gt;Library Headers&lt;/a&gt;). The package&amp;rsquo;s attributes are taken from the various headers, as illustrated by the following example:</source>
          <target state="translated">単純なパッケージは、単一のEmacsLispソースファイルで構成されています。ファイルは、Emacs Lispのライブラリのヘッダの慣習（参照に準拠する必要があります&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html#Library-Headers&quot;&gt;ライブラリヘッダを&lt;/a&gt;）。次の例に示すように、パッケージの属性はさまざまなヘッダーから取得されます。</target>
        </trans-unit>
        <trans-unit id="520a895cdaf962be2ce3af051f139699eaa002ef" translate="yes" xml:space="preserve">
          <source>A simple way to find out which variables need a variable definition is to byte-compile the source file. See &lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;Byte Compilation&lt;/a&gt;. If a non-special variable is used outside of a &lt;code&gt;let&lt;/code&gt; form, the byte-compiler will warn about reference or assignment to a free variable. If a non-special variable is bound but not used within a &lt;code&gt;let&lt;/code&gt; form, the byte-compiler will warn about an unused lexical variable. The byte-compiler will also issue a warning if you use a special variable as a function argument.</source>
          <target state="translated">どの変数に変数定義が必要かを見つける簡単な方法は、ソースファイルをバイトコンパイルすることです。&lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;バイトコンパイルを&lt;/a&gt;参照してください。特殊でない変数が &lt;code&gt;let&lt;/code&gt; 形式の外部で使用されている場合、バイトコンパイラは自由変数への参照または割り当てについて警告します。非特殊変数がバインドされているが、 &lt;code&gt;let&lt;/code&gt; フォーム内で使用されていない場合、バイトコンパイラは未使用の字句変数について警告します。関数の引数として特別な変数を使用すると、バイトコンパイラも警告を発行します。</target>
        </trans-unit>
        <trans-unit id="6f39c8140232b676e89b57d7d761a068ed372a35" translate="yes" xml:space="preserve">
          <source>A single X server can handle more than one display. Each X display has a three-part name, &amp;lsquo;</source>
          <target state="translated">1つのXサーバーで複数のディスプレイを処理できます。各Xディスプレイには、3つの部分からなる名前があります。</target>
        </trans-unit>
        <trans-unit id="32d2586e3a5876244258502d69a6f8d0bd5a0545" translate="yes" xml:space="preserve">
          <source>A single dashed line in the menu&amp;rsquo;s foreground color.</source>
          <target state="translated">メニューの前景色の1本の破線。</target>
        </trans-unit>
        <trans-unit id="0c3c5559359b2d5a679708aa8a74ccf3b71a8107" translate="yes" xml:space="preserve">
          <source>A single dashed line with a 3D raised appearance.</source>
          <target state="translated">立体的に盛り上がった一本の破線。</target>
        </trans-unit>
        <trans-unit id="17212cacb20906b6c24890be72d573523178f23c" translate="yes" xml:space="preserve">
          <source>A single dashed line with a 3D sunken appearance.</source>
          <target state="translated">立体的に沈んだ外観の一本の破線。</target>
        </trans-unit>
        <trans-unit id="82b9849c085f11ad9ba2a7d45a6524fef0303bac" translate="yes" xml:space="preserve">
          <source>A single evaluated expression, which is instrumented. If your macro wraps the expression with &lt;code&gt;lambda&lt;/code&gt; before it is evaluated, use &lt;code&gt;def-form&lt;/code&gt; instead. See &lt;code&gt;def-form&lt;/code&gt; below.</source>
          <target state="translated">インストルメント化された単一の評価された式。マクロが評価される前に式を &lt;code&gt;lambda&lt;/code&gt; ラップする場合は、代わりに &lt;code&gt;def-form&lt;/code&gt; を使用してください。以下の &lt;code&gt;def-form&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="c513f75e3380a33dab37bc8aac024b117ef8a454" translate="yes" xml:space="preserve">
          <source>A single keymap directly specifies definitions for individual events. When a key sequence consists of a single event, its binding in a keymap is the keymap&amp;rsquo;s definition for that event. The binding of a longer key sequence is found by an iterative process: first find the definition of the first event (which must itself be a keymap); then find the second event&amp;rsquo;s definition in that keymap, and so on until all the events in the key sequence have been processed.</source>
          <target state="translated">単一のキーマップは、個々のイベントの定義を直接指定します。キーシーケンスが単一のイベントで構成されている場合、キーマップでのそのバインディングは、そのイベントに対するキーマップの定義です。より長いキーシーケンスのバインディングは、反復プロセスによって検出されます。最初に最初のイベントの定義を検索します（それ自体がキーマップである必要があります）。次に、そのキーマップで2番目のイベントの定義を見つけ、キーシーケンス内のすべてのイベントが処理されるまで続けます。</target>
        </trans-unit>
        <trans-unit id="68df86ba1c5862318582f32a099345601694b64c" translate="yes" xml:space="preserve">
          <source>A single line in the menu&amp;rsquo;s foreground color.</source>
          <target state="translated">メニューの前景色の1行。</target>
        </trans-unit>
        <trans-unit id="3641adcfa90046311ac53168ff3f79632b8c65e5" translate="yes" xml:space="preserve">
          <source>A single line with a 3D raised appearance.</source>
          <target state="translated">立体的に盛り上がった一本の線。</target>
        </trans-unit>
        <trans-unit id="23b2b0891d5f5c8e4e993fb83b1fecf8c9b84e7c" translate="yes" xml:space="preserve">
          <source>A single line with a 3D sunken appearance. This is the default, used separators consisting of dashes only.</source>
          <target state="translated">3D 沈み込みの外観を持つ単線。これはデフォルトで、ダッシュのみで構成されるセパレータを使用します。</target>
        </trans-unit>
        <trans-unit id="1f59dc4152bf6a9fe4beadc9f38421d0b0d74e59" translate="yes" xml:space="preserve">
          <source>A single unevaluated Lisp object, which is not instrumented.</source>
          <target state="translated">インストルメントされていない、評価されていない単一のLispオブジェクト。</target>
        </trans-unit>
        <trans-unit id="9bf5016aa282317531cb06fa6fb9bc5beb69e9c5" translate="yes" xml:space="preserve">
          <source>A small number of additional symbols are made read-only for various practical reasons. These include &lt;code&gt;enable-multibyte-characters&lt;/code&gt;, &lt;code&gt;most-positive-fixnum&lt;/code&gt;, &lt;code&gt;most-negative-fixnum&lt;/code&gt;, and a few others. Any attempt to set or bind these also signals a &lt;code&gt;setting-constant&lt;/code&gt; error.</source>
          <target state="translated">いくつかの追加のシンボルは、さまざまな実用上の理由から読み取り専用になっています。これらには、 &lt;code&gt;enable-multibyte-characters&lt;/code&gt; &lt;code&gt;most-positive-fixnum&lt;/code&gt; -characters、most-positive-fixnum、 &lt;code&gt;most-negative-fixnum&lt;/code&gt; 、およびその他のいくつかが含まれます。これらを設定またはバインドしようとすると、 &lt;code&gt;setting-constant&lt;/code&gt; エラーも通知されます。</target>
        </trans-unit>
        <trans-unit id="7f66127e9377d487c9f73a0fe060d40fd147df4f" translate="yes" xml:space="preserve">
          <source>A source-level Emacs Lisp debugger.</source>
          <target state="translated">ソースレベルの Emacs Lisp デバッガです。</target>
        </trans-unit>
        <trans-unit id="eb28b2c1df892613561beddc4f55a0e071830859" translate="yes" xml:space="preserve">
          <source>A sparse keymap for keys that follows the</source>
          <target state="translated">鍵のための疎なキーマップ。</target>
        </trans-unit>
        <trans-unit id="a9aac0b1d7a10812c3d23d1c071d53d1c3d93f10" translate="yes" xml:space="preserve">
          <source>A sparse keymap for subcommands of the prefix</source>
          <target state="translated">プレフィックスのサブコマンド用の疎なキーマップ</target>
        </trans-unit>
        <trans-unit id="40c40f01737627b7bbebfaa0fb152cd44949cc13" translate="yes" xml:space="preserve">
          <source>A sparse keymap for the keys following the help character</source>
          <target state="translated">ヘルプ文字に続くキーのための疎なキーマップ</target>
        </trans-unit>
        <trans-unit id="fa46b728661fa6d918bb2c7cb51670008d478213" translate="yes" xml:space="preserve">
          <source>A sparse keymap that provides global bindings for search-related commands.</source>
          <target state="translated">検索関連コマンドのグローバルバインディングを提供する疎なキーマップ。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
