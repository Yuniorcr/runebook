<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="elisp">
    <body>
      <group id="elisp">
        <trans-unit id="338332c00ceaa9fdea31e35d6188944036e1afd8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, then the function skips characters whose syntax is &lt;em&gt;not&lt;/em&gt; in &lt;var&gt;syntaxes&lt;/var&gt;.</source>
          <target state="translated">&amp;rsquo;, then the function skips characters whose syntax is &lt;em&gt;not&lt;/em&gt; in &lt;var&gt;syntaxes&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="2bdea50e7f60979a583a9fcb9b89f1c9d5c7273f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, then the variable name is everything up to the matching &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, then the variable name is everything up to the matching &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="aed664b1485da6cc9f55a5212ab99a86dd143d39" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, there is no way to determine which representation was actually written by the programmer.</source>
          <target state="translated">&amp;rsquo;, there is no way to determine which representation was actually written by the programmer.</target>
        </trans-unit>
        <trans-unit id="2171df2942c5004d336176e3f04900c47e3cab8a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, to format just integers you can also use &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, to format just integers you can also use &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="9553dca23f7df3d735e2a2f87dd5cc9b0f829e23" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, to play when the notification pops up. Similar to the icon name, only for sounds. An example would be &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, to play when the notification pops up. Similar to the icon name, only for sounds. An example would be &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="ace62d39c190b1878f45bacfc172fb2f90ecd0b3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, to remind you to recompile it.</source>
          <target state="translated">&amp;rsquo;, to remind you to recompile it.</target>
        </trans-unit>
        <trans-unit id="88ef3b1775658920726073f79ed020824f423672" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, use the POSIX regular expression functions (see &lt;a href=&quot;posix-regexps#POSIX-Regexps&quot;&gt;POSIX Regexps&lt;/a&gt;).</source>
          <target state="translated">&amp;rsquo;, use the POSIX regular expression functions (see &lt;a href=&quot;posix-regexps#POSIX-Regexps&quot;&gt;POSIX Regexps&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="a9b5e78cae42d88b75bc99367644d755daf1e5d6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, waits about two seconds and repeats the request.</source>
          <target state="translated">&amp;rsquo;, waits about two seconds and repeats the request.</target>
        </trans-unit>
        <trans-unit id="fb4a71de67abc3082610c7289044290808c5f73d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, where &lt;var&gt;base&lt;/var&gt; is the same each time, while &lt;var&gt;how-far&lt;/var&gt; varies. Logging each message in the series discards the previous one, provided they are consecutive.</source>
          <target state="translated">&amp;rsquo;, where &lt;var&gt;base&lt;/var&gt; is the same each time, while &lt;var&gt;how-far&lt;/var&gt; varies. Logging each message in the series discards the previous one, provided they are consecutive.</target>
        </trans-unit>
        <trans-unit id="61fb2b1012aea8d283974b4e0fd853063f053478" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, where &lt;var&gt;n&lt;/var&gt; is a digit</source>
          <target state="translated">&amp;rsquo;, where &lt;var&gt;n&lt;/var&gt; is a digit</target>
        </trans-unit>
        <trans-unit id="04d7417b6c4ef86f0c2050612c8ec7002b5df152" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, where &lt;var&gt;n&lt;/var&gt; is an integer, is appended to &lt;var&gt;name&lt;/var&gt;.</source>
          <target state="translated">&amp;rsquo;, where &lt;var&gt;n&lt;/var&gt; is an integer, is appended to &lt;var&gt;name&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="a1ff7eb7a886b2d9e457cfd13dafd34fe8a24d90" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, where &lt;var&gt;r&lt;/var&gt; specifies the red level, &lt;var&gt;g&lt;/var&gt; specifies the green level, and &lt;var&gt;b&lt;/var&gt; specifies the blue level. You can use either one, two, three, or four hex digits for &lt;var&gt;r&lt;/var&gt;; then you must use the same number of hex digits for all &lt;var&gt;g&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt; as well, making either 3, 6, 9 or 12 hex digits in all. (See the documentation of the X Window System for more details about numerical RGB specification of colors.)</source>
          <target state="translated">&amp;rsquo;, where &lt;var&gt;r&lt;/var&gt; specifies the red level, &lt;var&gt;g&lt;/var&gt; specifies the green level, and &lt;var&gt;b&lt;/var&gt; specifies the blue level. You can use either one, two, three, or four hex digits for &lt;var&gt;r&lt;/var&gt; ; then you must use the same number of hex digits for all &lt;var&gt;g&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt; as well, making either 3, 6, 9 or 12 hex digits in all. (See the documentation of the X Window System for more details about numerical RGB specification of colors.)</target>
        </trans-unit>
        <trans-unit id="3c2f9311da690eaf37ce5c0b510e9164b436662e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, where &lt;var&gt;x&lt;/var&gt; is the &lt;em&gt;drive letter&lt;/em&gt;.</source>
          <target state="translated">&amp;rsquo;, where &lt;var&gt;x&lt;/var&gt; is the &lt;em&gt;drive letter&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="0d7c8c360c0472e973e270d62630a18a011a7fcd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, whereas &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, whereas &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="879c3210340c30ecd701be24b016be260ce63b4e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which allow the help display to adapt automatically to the user&amp;rsquo;s own key bindings. See &lt;a href=&quot;keys-in-documentation#Keys-in-Documentation&quot;&gt;Keys in Documentation&lt;/a&gt;.</source>
          <target state="translated">&amp;rsquo;, which allow the help display to adapt automatically to the user&amp;rsquo;s own key bindings. See &lt;a href=&quot;keys-in-documentation#Keys-in-Documentation&quot;&gt;Keys in Documentation&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a6787399974f01415854e862ce6afbcd47efe2d1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which are ignored by the function that parses the</source>
          <target state="translated">&amp;rsquo;, which are ignored by the function that parses the</target>
        </trans-unit>
        <trans-unit id="d4ddbbfb8c7f68bd68b9bd9c5c89d832b357b3b7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which calls &lt;var&gt;function&lt;/var&gt; with no arguments, or &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, which calls &lt;var&gt;function&lt;/var&gt; with no arguments, or &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="1e65a9601b871f47626748643f8be406ae56e423" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which loads the library named &lt;var&gt;file&lt;/var&gt;, or &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, which loads the library named &lt;var&gt;file&lt;/var&gt; , or &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="43a51c29ec65b042e84daf8e15be7f5da8aa6929" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which matches any lower case</source>
          <target state="translated">&amp;rsquo;, which matches any lower case</target>
        </trans-unit>
        <trans-unit id="3dcfb4839df9c9ca10346fbe7c02133bfae62886" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which matches any three-character string that begins with &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, which matches any three-character string that begins with &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="d8e0c9fd9f4f8214b3eabe1c211a987660b3a172" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which matches lines with at least one character besides a newline, would make each such line into a sort record. See &lt;a href=&quot;regular-expressions#Regular-Expressions&quot;&gt;Regular Expressions&lt;/a&gt;, for a description of the syntax and meaning of regular expressions.</source>
          <target state="translated">&amp;rsquo;, which matches lines with at least one character besides a newline, would make each such line into a sort record. See &lt;a href=&quot;regular-expressions#Regular-Expressions&quot;&gt;Regular Expressions&lt;/a&gt;, for a description of the syntax and meaning of regular expressions.</target>
        </trans-unit>
        <trans-unit id="cba5f1bd32077e31accecfad9acfb7d1ba8fc1a4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which matches only the string &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, which matches only the string &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="4981a07874b78f3759572884d9b16e71937e2c5a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which represents an address and port number. Otherwise, it is a unique number in brackets, as in &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, which represents an address and port number. Otherwise, it is a unique number in brackets, as in &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="4b6e5eb87b7790d18f80df6523f87cd833951944" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which tells the Lisp reader to produce an uninterned symbol.</source>
          <target state="translated">&amp;rsquo;, which tells the Lisp reader to produce an uninterned symbol.</target>
        </trans-unit>
        <trans-unit id="33d9b89ccd3d6ed5e32e2f0e23459fd8f7dfd98b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, while the newline character (character code 10) starts a new screen line.</source>
          <target state="translated">&amp;rsquo;, while the newline character (character code 10) starts a new screen line.</target>
        </trans-unit>
        <trans-unit id="37692e520010377b8fac0335a7efb6bbd566d31e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, you can add a decimal integer after the &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, you can add a decimal integer after the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="1b84c5fe09d8790bb872ab98bfdbcf83d26c6cbd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, you can use &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, you can use &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="e2fa97858f2ed56784046caa01023aada5bd0429" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, you can use &lt;code&gt;(concat
(file-name-as-directory directory) filename)&lt;/code&gt; instead of &lt;code&gt;(expand-file-name filename directory)&lt;/code&gt;.</source>
          <target state="translated">&amp;rsquo;, you can use &lt;code&gt;(concat (file-name-as-directory directory) filename)&lt;/code&gt; instead of &lt;code&gt;(expand-file-name filename directory)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0dd5d55150e4ed47f72d838d31bc8d0e13093376" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, you must use a second &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, you must use a second &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="d9f56707bf372f103356f64429dc88156c9b72c3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, you should make sure to call &lt;code&gt;file-truename&lt;/code&gt; without prior direct or indirect calls to &lt;code&gt;expand-file-name&lt;/code&gt;. See &lt;a href=&quot;truenames#Truenames&quot;&gt;Truenames&lt;/a&gt;.</source>
          <target state="translated">&amp;rsquo;, you should make sure to call &lt;code&gt;file-truename&lt;/code&gt; without prior direct or indirect calls to &lt;code&gt;expand-file-name&lt;/code&gt; . See &lt;a href=&quot;truenames#Truenames&quot;&gt;Truenames&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4c3919354e6e193030d935f78e0dd6d55b33930d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, you should set &lt;var&gt;record-regexp&lt;/var&gt; to &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, you should set &lt;var&gt;record-regexp&lt;/var&gt; to &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="f1108c40fd2cd8bbc1916e140e4fba0de0fddf4e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-modified construct in the hope that this will make it possible to match the rest of the pattern. For example, in matching &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;-modified construct in the hope that this will make it possible to match the rest of the pattern. For example, in matching &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="4b8ba4b864cdb2f1481e0e7a343357dcafc7fff9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequence, after any flags. For example, &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;-sequence, after any flags. For example, &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="5804150be1743d4212af0df893b430fbb5d1fc77" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequence. &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;-sequence. &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="f623182097fcbcb235fca9208ca5fae8ae747ddb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequence; e.g., &lt;code&gt;&quot;Error: %S&quot;&lt;/code&gt;. Use &lt;code&gt;with-demoted-errors&lt;/code&gt; around code that is not expected to signal errors, but should be robust if one does occur. Note that this macro uses &lt;code&gt;condition-case-unless-debug&lt;/code&gt; rather than &lt;code&gt;condition-case&lt;/code&gt;.</source>
          <target state="translated">&amp;rsquo;-sequence; e.g., &lt;code&gt;&quot;Error: %S&quot;&lt;/code&gt; . Use &lt;code&gt;with-demoted-errors&lt;/code&gt; around code that is not expected to signal errors, but should be robust if one does occur. Note that this macro uses &lt;code&gt;condition-case-unless-debug&lt;/code&gt; rather than &lt;code&gt;condition-case&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9c629d2a7582da3a286d41bf61f93a8ba8c266b5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequences as extensions.</source>
          <target state="translated">&amp;rsquo;-sequences as extensions.</target>
        </trans-unit>
        <trans-unit id="1fe79c758286747b35f9b4c8a50c44c703211327" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequences mean:</source>
          <target state="translated">&amp;rsquo;-sequences mean:</target>
        </trans-unit>
        <trans-unit id="bc1d4c02feb5871d8593dd8ff121cf6ad6f65f87" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequences stand for themselves and are output as-is. Programs should not rely on this behavior, as future versions of Emacs may recognize new &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;-sequences stand for themselves and are output as-is. Programs should not rely on this behavior, as future versions of Emacs may recognize new &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="ee3ad3f0448eebc9630ef7231f0397acd4ee35bc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequences which control the conversion. Here is a table of what the &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;-sequences which control the conversion. Here is a table of what the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="6d9b0622efde68eb979cb56ed40c4831d9cd79db" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequences which say to substitute parts of the time. Here is a table of what the &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;-sequences which say to substitute parts of the time. Here is a table of what the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="d0882996099b2f7f2b40d1baac9ef6d816431329" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequences. This works as in &lt;code&gt;printf&lt;/code&gt;: you write the field width as digits in a &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;-sequences. This works as in &lt;code&gt;printf&lt;/code&gt; : you write the field width as digits in a &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="e3452488ae13df1d0d8c33070cfb15b84b474e0e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-specification to be used in the C function &lt;code&gt;sprintf&lt;/code&gt;. For further restrictions on what you can use, see the variable&amp;rsquo;s documentation string.</source>
          <target state="translated">&amp;rsquo;-specification to be used in the C function &lt;code&gt;sprintf&lt;/code&gt; . For further restrictions on what you can use, see the variable&amp;rsquo;s documentation string.</target>
        </trans-unit>
        <trans-unit id="4dece5708020cd65d858b4b08e3d8683a52a6a69" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;.</source>
          <target state="translated">&amp;rsquo;.</target>
        </trans-unit>
        <trans-unit id="5d70589a69d369e7bf4347c7ccd68068ef698e63" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. &amp;lsquo;</source>
          <target state="translated">'。」</target>
        </trans-unit>
        <trans-unit id="ce683316fec4ce2b4c77e592d1a6caa5f31270c0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. (Case is significant in these prefixes.) Thus, &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. (Case is significant in these prefixes.) Thus, &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="5700b394aac85a4f74b32b84ce806e1e2a5efa9b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. (That is always the prompt used when you read from the stream &lt;code&gt;t&lt;/code&gt;.) The user&amp;rsquo;s input is shown following the prompt.</source>
          <target state="translated">&amp;rsquo;. (That is always the prompt used when you read from the stream &lt;code&gt;t&lt;/code&gt; .) The user&amp;rsquo;s input is shown following the prompt.</target>
        </trans-unit>
        <trans-unit id="791ebac6f04ed7defa6c85545d2fb268c5f4cd1d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. (The &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. (The &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="fc9f7e8c740a399e62be768334b6aa70b37dc63d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. (The smallest possible match here for &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. (The smallest possible match here for &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="0780074e3bfd7a227144227ddd2d9c202ba2c832" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. (The value of &lt;var&gt;directory&lt;/var&gt; should itself be an absolute directory name or directory file name; it may start with &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. (The value of &lt;var&gt;directory&lt;/var&gt; should itself be an absolute directory name or directory file name; it may start with &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="3af07e8a0a0c868bc6380d5bcfd850c9c10b16df" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. (We use a backslash to split the documentation string&amp;rsquo;s first line into two lines in the text, but produce just one line in the string itself.)</source>
          <target state="translated">&amp;rsquo;. (We use a backslash to split the documentation string&amp;rsquo;s first line into two lines in the text, but produce just one line in the string itself.)</target>
        </trans-unit>
        <trans-unit id="02a05aaf9ce60da2b6de04de1b5d5d05095fd647" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. &lt;strong&gt;Warning:&lt;/strong&gt; don&amp;rsquo;t use this default group name unless you have written a &lt;code&gt;defgroup&lt;/code&gt; to define that group properly. See &lt;a href=&quot;group-definitions#Group-Definitions&quot;&gt;Group Definitions&lt;/a&gt;.</source>
          <target state="translated">&amp;rsquo;. &lt;strong&gt;Warning:&lt;/strong&gt; don&amp;rsquo;t use this default group name unless you have written a &lt;code&gt;defgroup&lt;/code&gt; to define that group properly. See &lt;a href=&quot;group-definitions#Group-Definitions&quot;&gt;Group Definitions&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5ac688c1cb4d74dbcdc8b0089bf92eafc6894297" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. A period can be used instead of a colon to separate the hour and minute parts.</source>
          <target state="translated">&amp;rsquo;. A period can be used instead of a colon to separate the hour and minute parts.</target>
        </trans-unit>
        <trans-unit id="5194eb7bf695b34f40173275513368807dd43657" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. After the form is evaluated, point is located at the end of that line (between the &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. After the form is evaluated, point is located at the end of that line (between the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="ba211da8c053a9a7ea6d06b0cf9f2723d5db8c85" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. All the arguments are evaluated, and &lt;code&gt;edebug-tracing&lt;/code&gt; returns the value of the last form in &lt;var&gt;body&lt;/var&gt;.</source>
          <target state="translated">&amp;rsquo;. All the arguments are evaluated, and &lt;code&gt;edebug-tracing&lt;/code&gt; returns the value of the last form in &lt;var&gt;body&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="37156d7116474ca00aaa48ebbe5e1d51ec116a40" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Although functions like &lt;code&gt;shell-quote-argument&lt;/code&gt; can help avoid this sort of problem, they are not panaceas; for example, on a POSIX platform &lt;code&gt;shell-quote-argument&lt;/code&gt; quotes shell metacharacters but not leading &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. Although functions like &lt;code&gt;shell-quote-argument&lt;/code&gt; can help avoid this sort of problem, they are not panaceas; for example, on a POSIX platform &lt;code&gt;shell-quote-argument&lt;/code&gt; quotes shell metacharacters but not leading &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="a729093898cb227c36a8ac74a480b12d242044ec" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. An event that is a list appears as the name of the symbol in the &lt;small&gt;CAR&lt;/small&gt; of the list, inside angle brackets.</source>
          <target state="translated">&amp;rsquo;. An event that is a list appears as the name of the symbol in the &lt;small&gt;CAR&lt;/small&gt; of the list, inside angle brackets.</target>
        </trans-unit>
        <trans-unit id="32dfe4e846148041bca3b8953e155b799b33eeaf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Assuming that &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. Assuming that &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="0c8eb27555415c9f392a451455af6f7bfbde325b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. At the end, point is located directly before that same &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. At the end, point is located directly before that same &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="9b0bd4cb477dbe85b51c361ff287c8b444632ea2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. At the end, the marker has advanced over the inserted text so that it remains positioned before the same &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. At the end, the marker has advanced over the inserted text so that it remains positioned before the same &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="ae99819f0533cb20ecece6175293d84961985773" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Be aware that sensitive information (such as passwords) may end up recorded in the dribble file.</source>
          <target state="translated">&amp;rsquo;. Be aware that sensitive information (such as passwords) may end up recorded in the dribble file.</target>
        </trans-unit>
        <trans-unit id="e8fa641becff1133fce5c4d2b3077ede4731b4fd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Both designators are equivalent.</source>
          <target state="translated">&amp;rsquo;. Both designators are equivalent.</target>
        </trans-unit>
        <trans-unit id="7ea803d48b5ab9465ce9437026a4b8f993404bbd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. But</source>
          <target state="translated">&amp;rsquo;. But</target>
        </trans-unit>
        <trans-unit id="ca99c6d74effa1eedd1d09232836becae45476c3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. But if the handler that would be used for them has a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;safe-magic&lt;/code&gt; property, the &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. But if the handler that would be used for them has a non- &lt;code&gt;nil&lt;/code&gt; &lt;code&gt;safe-magic&lt;/code&gt; property, the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="f5b0d53a91116fad250a268160e8a7ad915d0341" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Each hook function is called with no arguments and should return a string describing the current prefix state, or &lt;code&gt;nil&lt;/code&gt; if there&amp;rsquo;s no prefix state. See &lt;a href=&quot;prefix-command-arguments#Prefix-Command-Arguments&quot;&gt;Prefix Command Arguments&lt;/a&gt;.</source>
          <target state="translated">&amp;rsquo;. Each hook function is called with no arguments and should return a string describing the current prefix state, or &lt;code&gt;nil&lt;/code&gt; if there&amp;rsquo;s no prefix state. See &lt;a href=&quot;prefix-command-arguments#Prefix-Command-Arguments&quot;&gt;Prefix Command Arguments&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ffec325b908df24f0b42898919b420f6124ce0a0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Evaluating the search call moves point to the end of that line (between the &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. Evaluating the search call moves point to the end of that line (between the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="b585ed881f3c66399f451ef8bd952d9006480d9d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Firstly, it may never print it, there are many good reasons for this not to happen. Secondly, &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. Firstly, it may never print it, there are many good reasons for this not to happen. Secondly, &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="c15206d709fc8785c12654bcc271fe6f4c42516a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. For &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. For &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="dc0e40f41f99905a57a0d4d5df269fc359a22807" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. For &lt;code&gt;nil&lt;/code&gt;-terminated lists, you can use either notation, but list notation is usually clearer and more convenient. When printing a list, the dotted pair notation is only used if the &lt;small&gt;CDR&lt;/small&gt; of a cons cell is not a list.</source>
          <target state="translated">&amp;rsquo;. For &lt;code&gt;nil&lt;/code&gt; -terminated lists, you can use either notation, but list notation is usually clearer and more convenient. When printing a list, the dotted pair notation is only used if the &lt;small&gt;CDR&lt;/small&gt; of a cons cell is not a list.</target>
        </trans-unit>
        <trans-unit id="5adab14b4c2596d0b1e0f2f9383d94df6c450797" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. For example, &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. For example, &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="d3ccaa08216b0003d5a6887a2f3bb30d14ddf518" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. For example, &lt;code&gt;Canonical_Combining_Class&lt;/code&gt; becomes &lt;code&gt;canonical-combining-class&lt;/code&gt;. However, sometimes we shorten the names to make their use easier.</source>
          <target state="translated">&amp;rsquo;. For example, &lt;code&gt;Canonical_Combining_Class&lt;/code&gt; becomes &lt;code&gt;canonical-combining-class&lt;/code&gt; . However, sometimes we shorten the names to make their use easier.</target>
        </trans-unit>
        <trans-unit id="7a6554765a74201f045996ef2c9444441def4729" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. For example, dragging the mouse with button 2 held down generates a &lt;code&gt;drag-mouse-2&lt;/code&gt; event. The second and third elements of the event give the starting and ending position of the drag, as mouse position lists (see &lt;a href=&quot;click-events#Click-Events&quot;&gt;Click Events&lt;/a&gt;). You can access the second element of any mouse event in the same way. However, the drag event may end outside the boundaries of the frame that was initially selected. In that case, the third element&amp;rsquo;s position list contains that frame in place of a window.</source>
          <target state="translated">&amp;rsquo;. For example, dragging the mouse with button 2 held down generates a &lt;code&gt;drag-mouse-2&lt;/code&gt; event. The second and third elements of the event give the starting and ending position of the drag, as mouse position lists (see &lt;a href=&quot;click-events#Click-Events&quot;&gt;Click Events&lt;/a&gt;). You can access the second element of any mouse event in the same way. However, the drag event may end outside the boundaries of the frame that was initially selected. In that case, the third element&amp;rsquo;s position list contains that frame in place of a window.</target>
        </trans-unit>
        <trans-unit id="13af62e71e2ed62cc31a5b3b908923935f085ce2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. For example, the regular expression that matches the &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. For example, the regular expression that matches the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="e34901926b6215f3fc0c34c033c7d77570e136f5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. For example:</source>
          <target state="translated">'。例えば：</target>
        </trans-unit>
        <trans-unit id="0a00c3f523b24ed6aa68808921edff61bc78ec43" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. For more serious errors, the caller should usually not call &lt;code&gt;after-find-file&lt;/code&gt;.</source>
          <target state="translated">&amp;rsquo;. For more serious errors, the caller should usually not call &lt;code&gt;after-find-file&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="96a6031b28740b83c68cd6e394a2e32fcfd51dbf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If &lt;var&gt;device&lt;/var&gt; is a frame, this function returns that frame&amp;rsquo;s terminal; &lt;code&gt;nil&lt;/code&gt; means the selected frame. Finally, if &lt;var&gt;device&lt;/var&gt; is a terminal object that represents a live terminal, that terminal is returned. The function signals an error if its argument is none of the above.</source>
          <target state="translated">&amp;rsquo;. If &lt;var&gt;device&lt;/var&gt; is a frame, this function returns that frame&amp;rsquo;s terminal; &lt;code&gt;nil&lt;/code&gt; means the selected frame. Finally, if &lt;var&gt;device&lt;/var&gt; is a terminal object that represents a live terminal, that terminal is returned. The function signals an error if its argument is none of the above.</target>
        </trans-unit>
        <trans-unit id="3d420d77d9d35f5350119833c36d23337a9acf8e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If &lt;var&gt;name&lt;/var&gt; is a remote file name, the local part of &lt;var&gt;name&lt;/var&gt; (see &lt;a href=&quot;magic-file-names#Magic-File-Names&quot;&gt;Magic File Names&lt;/a&gt;) is quoted. If &lt;var&gt;name&lt;/var&gt; is already a quoted file name, &lt;var&gt;name&lt;/var&gt; is returned unchanged.</source>
          <target state="translated">&amp;rsquo;. If &lt;var&gt;name&lt;/var&gt; is a remote file name, the local part of &lt;var&gt;name&lt;/var&gt; (see &lt;a href=&quot;magic-file-names#Magic-File-Names&quot;&gt;Magic File Names&lt;/a&gt;) is quoted. If &lt;var&gt;name&lt;/var&gt; is already a quoted file name, &lt;var&gt;name&lt;/var&gt; is returned unchanged.</target>
        </trans-unit>
        <trans-unit id="f14284b6330372b5a8699e400c1d5d1354e83cf4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If &lt;var&gt;name&lt;/var&gt; is a remote file name, the local part of &lt;var&gt;name&lt;/var&gt; is checked.</source>
          <target state="translated">&amp;rsquo;. If &lt;var&gt;name&lt;/var&gt; is a remote file name, the local part of &lt;var&gt;name&lt;/var&gt; is checked.</target>
        </trans-unit>
        <trans-unit id="9f6ecdd04482a6f8b07743fe94a2a7ec46a35988" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If a double-down event has no binding, Emacs looks for an alternate binding as if the event were an ordinary button-down event. If it finds no binding that way either, the double-down event is ignored.</source>
          <target state="translated">&amp;rsquo;. If a double-down event has no binding, Emacs looks for an alternate binding as if the event were an ordinary button-down event. If it finds no binding that way either, the double-down event is ignored.</target>
        </trans-unit>
        <trans-unit id="e1e6a1d60f047343795d3248611683b7cbc3227e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If a double-drag event has no binding, Emacs looks for an alternate binding as if the event were an ordinary drag.</source>
          <target state="translated">&amp;rsquo;. If a double-drag event has no binding, Emacs looks for an alternate binding as if the event were an ordinary drag.</target>
        </trans-unit>
        <trans-unit id="ee97193ac124230bc8e2851e3b47d2c7949413df" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If an invalid regular expression is passed to any of the search functions, an &lt;code&gt;invalid-regexp&lt;/code&gt; error is signaled.</source>
          <target state="translated">&amp;rsquo;. If an invalid regular expression is passed to any of the search functions, an &lt;code&gt;invalid-regexp&lt;/code&gt; error is signaled.</target>
        </trans-unit>
        <trans-unit id="c43c1af8551069bcc23f0fcf9206beea58cd9891" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If any triple event has no binding, Emacs uses the binding that it would use for the corresponding double event.</source>
          <target state="translated">&amp;rsquo;. If any triple event has no binding, Emacs uses the binding that it would use for the corresponding double event.</target>
        </trans-unit>
        <trans-unit id="786afad75112f4b223d0194b0fe9ed5268777e73" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If it is &lt;code&gt;nil&lt;/code&gt;, they are displayed as octal escapes: a backslash followed by three octal digits, as in &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. If it is &lt;code&gt;nil&lt;/code&gt; , they are displayed as octal escapes: a backslash followed by three octal digits, as in &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="eab5c635fd9e22fdb16917557714a82c895614e6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If it were anywhere else, the result would be &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&amp;rsquo;. If it were anywhere else, the result would be &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="09432d6277531883880b5f9a58bf2c60976740e8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If the &lt;var&gt;n&lt;/var&gt;th subexpression never matched, an empty string is substituted.</source>
          <target state="translated">&amp;rsquo;. If the &lt;var&gt;n&lt;/var&gt; th subexpression never matched, an empty string is substituted.</target>
        </trans-unit>
        <trans-unit id="92863a8a35d7bdcceaa2b9efd33b1642dcf657e8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If the character following the &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. If the character following the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="4a5475c92b03f9c7200836a9c6303120ee86224e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If the input is not one of the expected answers (</source>
          <target state="translated">&amp;rsquo;. If the input is not one of the expected answers (</target>
        </trans-unit>
        <trans-unit id="2f9fb271915928a85a5c6ed2f37081f8f2c8f29e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If you do not follow that convention, it will not cause serious problems, but these commands may give less-than-desirable results.</source>
          <target state="translated">&amp;rsquo;. If you do not follow that convention, it will not cause serious problems, but these commands may give less-than-desirable results.</target>
        </trans-unit>
        <trans-unit id="89e0f1a9db158118461ac0b7367081182e99fec9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In Emacs Lisp, the delimiters for lists and vectors (&amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. In Emacs Lisp, the delimiters for lists and vectors (&amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="1fc3aa88e01777813c1e0a8c689bf314f92c8e57" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In most of the symbols, this is followed with a &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. In most of the symbols, this is followed with a &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="cc5fd2b1bdb505b556c6d9175851365facef0805" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In such situations, it sometimes may be necessary to carefully parse the regexp from the start to determine which square brackets enclose a character alternative. For example, &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. In such situations, it sometimes may be necessary to carefully parse the regexp from the start to determine which square brackets enclose a character alternative. For example, &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="83671e8067adc46fcf4ffdbd64413d23aff097c4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In the entry, &lt;var&gt;name&lt;/var&gt; is a symbol describing the kind of objects this entry represents, &lt;var&gt;size&lt;/var&gt; is the number of bytes used by each one, &lt;var&gt;used&lt;/var&gt; is the number of those objects that were found live in the heap, and optional &lt;var&gt;free&lt;/var&gt; is the number of those objects that are not live but that Emacs keeps around for future allocations. So an overall result is:</source>
          <target state="translated">&amp;rsquo;. In the entry, &lt;var&gt;name&lt;/var&gt; is a symbol describing the kind of objects this entry represents, &lt;var&gt;size&lt;/var&gt; is the number of bytes used by each one, &lt;var&gt;used&lt;/var&gt; is the number of those objects that were found live in the heap, and optional &lt;var&gt;free&lt;/var&gt; is the number of those objects that are not live but that Emacs keeps around for future allocations. So an overall result is:</target>
        </trans-unit>
        <trans-unit id="7d161f4c9c2d5c5f20181ee969791cd28af2be80" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In the simplest case, the characters between the two brackets are what this character alternative can match.</source>
          <target state="translated">&amp;rsquo;. In the simplest case, the characters between the two brackets are what this character alternative can match.</target>
        </trans-unit>
        <trans-unit id="ed46d4f68f388b8c89728dff64bd1d307c770875" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In this case, you must specify the precise file name you want, except that, if Auto Compression mode is enabled, &lt;code&gt;load&lt;/code&gt; will still use &lt;code&gt;jka-compr-load-suffixes&lt;/code&gt; to find compressed versions. By specifying the precise file name and using &lt;code&gt;t&lt;/code&gt; for &lt;var&gt;nosuffix&lt;/var&gt;, you can prevent file names like</source>
          <target state="translated">&amp;rsquo;. In this case, you must specify the precise file name you want, except that, if Auto Compression mode is enabled, &lt;code&gt;load&lt;/code&gt; will still use &lt;code&gt;jka-compr-load-suffixes&lt;/code&gt; to find compressed versions. By specifying the precise file name and using &lt;code&gt;t&lt;/code&gt; for &lt;var&gt;nosuffix&lt;/var&gt; , you can prevent file names like</target>
        </trans-unit>
        <trans-unit id="c92ca67c5717c288379bdd9710e3b12196eec542" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In this instance, you need to know the</source>
          <target state="translated">&amp;rsquo;. In this instance, you need to know the</target>
        </trans-unit>
        <trans-unit id="9401e7f65dc5de67271b7cea25dae316982838a0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. It also contains the Emacs process</source>
          <target state="translated">&amp;rsquo;. It also contains the Emacs process</target>
        </trans-unit>
        <trans-unit id="f83d4ac61c9df0201304a44f0845b94ebd2bea81" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. It causes the format specification to convert the argument with the given number instead of the next argument. Field numbers start at 1. A format can contain either numbered or unnumbered format specifications but not both, except that &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;. It causes the format specification to convert the argument with the given number instead of the next argument. Field numbers start at 1. A format can contain either numbered or unnumbered format specifications but not both, except that &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="0325e44c83acce524655fd535d64063d868c79a9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. It is not easy to change this, as various Lisp files refer to</source>
          <target state="translated">&amp;rsquo;. It is not easy to change this, as various Lisp files refer to</target>
        </trans-unit>
        <trans-unit id="660a2931515004c6a26bede9de1851870a0b2207" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. It matches &amp;lsquo;</source>
          <target state="translated">'。一致します '</target>
        </trans-unit>
        <trans-unit id="17ddd1b5810a7b7be0f5c04faeb0d55d093937fd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. It must have at least four elements; there is no maximum number, but only the first six elements have any normal use. They are:</source>
          <target state="translated">'。少なくとも4つの要素が必要です。最大数はありませんが、通常は最初の6つの要素のみが使用されます。彼らです：</target>
        </trans-unit>
        <trans-unit id="6c32e555bd043ace8153528c942fea1141afec64" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. It returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">'。 &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e7a6758750fbc3643e324cb92b72b6b217dc315b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. It starts at 2 and keeps incrementing the number until it is not the name of an existing buffer.</source>
          <target state="translated">'。2から始まり、既存のバッファーの名前でなくなるまで番号を増やし続けます。</target>
        </trans-unit>
        <trans-unit id="fe954a715ef3135e354b3199514af046ba05ff59" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Letter case is ignored and there is no initial sign or final period. For example:</source>
          <target state="translated">'。大文字と小文字は無視され、最初の記号や最後の期間はありません。例えば：</target>
        </trans-unit>
        <trans-unit id="b313b00afd56ff0e4d0f4201e92ba270cc12e5d2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Likewise, you can write</source>
          <target state="translated">'。同様に、あなたは書くことができます</target>
        </trans-unit>
        <trans-unit id="920d116ef31dce31f371939ed945afe9a2b64c10" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Normally these characters are printed as actual newlines and formfeeds.</source>
          <target state="translated">'。通常、これらの文字は実際の改行およびフォームフィードとして印刷されます。</target>
        </trans-unit>
        <trans-unit id="c8d656e5c6efdb5d777c45caff340de0c360f2fe" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Normally this variable is &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">'。通常、この変数は &lt;code&gt;nil&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f5033799763d08b021660d520078ce1d7313d968" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that &amp;lsquo;</source>
          <target state="translated">'。ご了承ください '</target>
        </trans-unit>
        <trans-unit id="952a240e8d4ff59265a8614f5e5ad27ca364e2d6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that if &lt;var&gt;file&lt;/var&gt; is a symbolic link, &lt;code&gt;vc-responsible-backend&lt;/code&gt; will not resolve it&amp;mdash;the backend of the symbolic link file itself is reported. To get the backend VC of the file to which &lt;var&gt;file&lt;/var&gt; refers, wrap &lt;var&gt;file&lt;/var&gt; with a symbolic link resolving function such as &lt;code&gt;file-chase-links&lt;/code&gt;:</source>
          <target state="translated">'。 &lt;var&gt;file&lt;/var&gt; がシンボリックリンクである場合、 &lt;code&gt;vc-responsible-backend&lt;/code&gt; はそれを解決しないことに注意してください。シンボリックリンクファイル自体のバックエンドが報告されます。 &lt;var&gt;file&lt;/var&gt; 参照するファイルのバックエンドVCを取得するには、 &lt;code&gt;file-chase-links&lt;/code&gt; などのシンボリックリンク解決関数で &lt;var&gt;file&lt;/var&gt; をラップします。</target>
        </trans-unit>
        <trans-unit id="a042478bb7b805167a4e3dc4622510eb66219528" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that the default mode line construct truncates this to three characters.</source>
          <target state="translated">'。デフォルトのモード行構造は、これを3文字に切り捨てることに注意してください。</target>
        </trans-unit>
        <trans-unit id="11f821e083cd0266b540825f770e25afc7f591c9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that the location of point, shown in the usual fashion, has no effect.</source>
          <target state="translated">'。通常の方法で表示されるポイントの位置は効果がないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="aab99fbafa26397628ee2ebabc8fedd3e1efe586" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that this is not a subcategory of &lt;code&gt;file-error&lt;/code&gt;, because it pertains to the Lisp reader, not to file I/O. See &lt;a href=&quot;input-functions#Input-Functions&quot;&gt;Input Functions&lt;/a&gt;.</source>
          <target state="translated">'。これはファイルI / OではなくLispリーダーに関係するため、 &lt;code&gt;file-error&lt;/code&gt; サブカテゴリではないことに注意してください。&lt;a href=&quot;input-functions#Input-Functions&quot;&gt;入力関数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="812a48de1a51edc7cb8f75b50065813f0710bb67" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that this technique may be inconvenient when the mode needs to limit the initial character of a name to a smaller set of characters than are allowed in the rest of a name.</source>
          <target state="translated">'。この手法は、モードで名前の最初の文字を名前の残りの部分で許可されている文字のセットよりも少ない文字セットに制限する必要がある場合に不便になる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1275c6b0d8f2ab8404ce559438e61304735bf9d0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that, if the monitor is not the primary monitor, some of the coordinates might be negative.</source>
          <target state="translated">'。モニターがプライマリモニターでない場合、一部の座標が負になる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a699b01aa70bc4021daead05db706585b9646693" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. On MS-DOS the relationship is more complicated.</source>
          <target state="translated">'。MS-DOSでは、関係はより複雑です。</target>
        </trans-unit>
        <trans-unit id="89ad4af2ba16b71d599aa8b0b16ece9bb49d7d60" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. On MS-Windows, quoting for &amp;lsquo;</source>
          <target state="translated">'。MS-Windowsの場合、「</target>
        </trans-unit>
        <trans-unit id="68b0c22b9a7c53dac6af3537f1e7a53d27509fdb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Other formats may be problematic; for example, &amp;lsquo;</source>
          <target state="translated">'。他の形式では問題が発生する可能性があります。例えば、 '</target>
        </trans-unit>
        <trans-unit id="fa13adab25eeab730e17e5f7623285de995402f1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Recursive minibuffers are named by incrementing the number at the end of the name. (The names begin with a space so that they won&amp;rsquo;t show up in normal buffer lists.) Of several recursive minibuffers, the innermost (or most recently entered) is the active minibuffer. We usually call this &lt;em&gt;the&lt;/em&gt; minibuffer. You can permit or forbid recursive minibuffers by setting the variable &lt;code&gt;enable-recursive-minibuffers&lt;/code&gt;, or by putting properties of that name on command symbols (See &lt;a href=&quot;recursive-mini#Recursive-Mini&quot;&gt;Recursive Mini&lt;/a&gt;.)</source>
          <target state="translated">'。再帰的ミニバッファーは、名前の最後にある番号をインクリメントすることによって名前が付けられます。（名前は、通常のバッファーリストに表示されないように、スペースで始まります。）いくつかの再帰的ミニバッファーのうち、最も内側の（または最近入力された）ものがアクティブなミニバッファーです。我々は通常、これを呼び出すミニバッファ。変数 &lt;code&gt;enable-recursive-minibuffers&lt;/code&gt; を設定するか、コマンドシンボルにその名前のプロパティを配置することにより、再帰的ミニバッファーを許可または禁止できます（&lt;a href=&quot;recursive-mini#Recursive-Mini&quot;&gt;再帰的ミニを&lt;/a&gt;参照）。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1eb6fb51d0b937f80387af624efa9250bf90f772" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;accessing-variables#Accessing-Variables&quot;&gt;Accessing Variables&lt;/a&gt;.</source>
          <target state="translated">'。&lt;a href=&quot;accessing-variables#Accessing-Variables&quot;&gt;変数へのアクセスを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8da730b30acac0cce8f9cdfd9cce6dd48f5a6bb4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;argument-list#Argument-List&quot;&gt;Argument List&lt;/a&gt;.</source>
          <target state="translated">'。&lt;a href=&quot;argument-list#Argument-List&quot;&gt;引数リストを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c7d964c8d1a648402b3d2d8f63175a8dbe8e07a4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;buffer-file-name#Buffer-File-Name&quot;&gt;Buffer File Name&lt;/a&gt;, for functions and variables that access the visited file name of a buffer or that find an existing buffer by its visited file name.</source>
          <target state="translated">'。&lt;a href=&quot;buffer-file-name#Buffer-File-Name&quot;&gt;バッファ&lt;/a&gt;の訪問済みファイル名にアクセスする関数と変数、または訪問済みファイル名で既存のバッファを検索する関数と変数については、「バッファファイル名」を参照してください。</target>
        </trans-unit>
        <trans-unit id="b6932fa39d1d0a56a1acc983bb1d8304a0853076" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;catch-and-throw#Catch-and-Throw&quot;&gt;Catch and Throw&lt;/a&gt;.</source>
          <target state="translated">'。&lt;a href=&quot;catch-and-throw#Catch-and-Throw&quot;&gt;キャッチアンドスローを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6d835b0439cdc56eea14d68848f9fc4f2d68fec1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;character-motion#Character-Motion&quot;&gt;Character Motion&lt;/a&gt;.</source>
          <target state="translated">'。&lt;a href=&quot;character-motion#Character-Motion&quot;&gt;キャラクターモーションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6ff3b798a1ea12a41e7aee0f8afdeb3efcdfe4e4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;character-type#Character-Type&quot;&gt;Character Type&lt;/a&gt;.</source>
          <target state="translated">'。&lt;a href=&quot;character-type#Character-Type&quot;&gt;文字タイプを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cc7df82090928974419a9818517d487d065edb62" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;color-names#Color-Names&quot;&gt;Color Names&lt;/a&gt;.</source>
          <target state="translated">'。&lt;a href=&quot;color-names#Color-Names&quot;&gt;色名を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7311b04bec5a42fbe3f2b3d769165aeeb5e8009e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;errors#Errors&quot;&gt;Errors&lt;/a&gt;.</source>
          <target state="translated">'。&lt;a href=&quot;errors#Errors&quot;&gt;エラーを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0f11bdbe8d58d482196546474b48331d4a5340b3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;function-cells#Function-Cells&quot;&gt;Function Cells&lt;/a&gt;.</source>
          <target state="translated">'。&lt;a href=&quot;function-cells#Function-Cells&quot;&gt;関数セルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c00d3c273c37139c1fa00d5c10fc880035a5e8a1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;function-indirection#Function-Indirection&quot;&gt;Function Indirection&lt;/a&gt;.</source>
          <target state="translated">'。&lt;a href=&quot;function-indirection#Function-Indirection&quot;&gt;関数の間接&lt;/a&gt;参照を参照してください。</target>
        </trans-unit>
        <trans-unit id="2339ffb1d0a728a9ab5091b45827cfd0262a46cf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Edit-Keyboard-Macro.html#Edit-Keyboard-Macro&quot;&gt;Edit Keyboard Macro&lt;/a&gt; in</source>
          <target state="translated">'。参照&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Edit-Keyboard-Macro.html#Edit-Keyboard-Macro&quot;&gt;編集キーボードマクロを&lt;/a&gt;中</target>
        </trans-unit>
        <trans-unit id="8a22c01f6694975280688068f654af727fd48a93" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/dbus/Errors-and-Events.html#Errors-and-Events&quot;&gt;Errors and Events&lt;/a&gt; in</source>
          <target state="translated">'。の&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/dbus/Errors-and-Events.html#Errors-and-Events&quot;&gt;エラーとイベント&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="bd82692f132c70466eaada657ab683b51b064435" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;images#Images&quot;&gt;Images&lt;/a&gt;.</source>
          <target state="translated">'。&lt;a href=&quot;images#Images&quot;&gt;画像を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="beae9936e8492d297bd98e80b412895ad89dcda8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;lisp-and-coding-systems#Lisp-and-Coding-Systems&quot;&gt;Lisp and Coding Systems&lt;/a&gt;.</source>
          <target state="translated">'。&lt;a href=&quot;lisp-and-coding-systems#Lisp-and-Coding-Systems&quot;&gt;Lispとコーディングシステムを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7c41251b9b7b1c45ce1d56d76bf0f93d7e5e1418" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;printed-representation#Printed-Representation&quot;&gt;Printed Representation&lt;/a&gt;. This error can also be raised by commands like &lt;code&gt;eval-expression&lt;/code&gt; when there&amp;rsquo;s text following an expression. In that case, the message is &amp;lsquo;</source>
          <target state="translated">'。&lt;a href=&quot;printed-representation#Printed-Representation&quot;&gt;印刷表現を&lt;/a&gt;参照してください。このエラーは、式の後にテキストがある場合に &lt;code&gt;eval-expression&lt;/code&gt; などのコマンドによっても発生する可能性があります。その場合、メッセージは '</target>
        </trans-unit>
        <trans-unit id="cc08ed04cdffbd5fd65c26146270f9bbb1a04702" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;quitting#Quitting&quot;&gt;Quitting&lt;/a&gt;.</source>
          <target state="translated">'。&lt;a href=&quot;quitting#Quitting&quot;&gt;終了を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="589de1814a7fa1ad0f947d9308fc5521cb679891" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;read-only-buffers#Read-Only-Buffers&quot;&gt;Read Only Buffers&lt;/a&gt;.</source>
          <target state="translated">'。&lt;a href=&quot;read-only-buffers#Read-Only-Buffers&quot;&gt;読み取り専用バッファを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e2cb54699a2c2524bd274091a851bcc89919846e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;regular-expressions#Regular-Expressions&quot;&gt;Regular Expressions&lt;/a&gt;.</source>
          <target state="translated">'。&lt;a href=&quot;regular-expressions#Regular-Expressions&quot;&gt;正規表現を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="da9e031a0e96e1f92cd69f013bf68b178fcbfc7b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;searching-and-matching#Searching-and-Matching&quot;&gt;Searching and Matching&lt;/a&gt;.</source>
          <target state="translated">'。&lt;a href=&quot;searching-and-matching#Searching-and-Matching&quot;&gt;検索と照合を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0bb7aa62695d7aa685b32da8243848e09cce0326" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;signaling-errors#Signaling-Errors&quot;&gt;Signaling Errors&lt;/a&gt;, and see &lt;a href=&quot;searching-and-matching#Searching-and-Matching&quot;&gt;Searching and Matching&lt;/a&gt;. This is used for searching in Info files, see &lt;a href=&quot;http://www.gnu.org/software/texinfo/manual/info/html_node/Search-Text.html#Search-Text&quot;&gt;Search Text&lt;/a&gt; in</source>
          <target state="translated">'。参照&lt;a href=&quot;signaling-errors#Signaling-Errors&quot;&gt;エラーをシグナリング&lt;/a&gt;、および参照の&lt;a href=&quot;searching-and-matching#Searching-and-Matching&quot;&gt;検索とマッチング&lt;/a&gt;。これはInfoファイルで検索するために使用され、参照&lt;a href=&quot;http://www.gnu.org/software/texinfo/manual/info/html_node/Search-Text.html#Search-Text&quot;&gt;検索テキストを&lt;/a&gt;中</target>
        </trans-unit>
        <trans-unit id="abd11e7bc3c3e1d55ae3839cab31be824a78387f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;the-mark#The-Mark&quot;&gt;The Mark&lt;/a&gt;.</source>
          <target state="translated">'。&lt;a href=&quot;the-mark#The-Mark&quot;&gt;マークを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9af09d0863a34e91acd72eabe4a0bead8eca76e7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;type-predicates#Type-Predicates&quot;&gt;Type Predicates&lt;/a&gt;.</source>
          <target state="translated">'。&lt;a href=&quot;type-predicates#Type-Predicates&quot;&gt;タイプ述語を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="78a66d5295da80a184cf1e0415df5ae43abf9ae5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;variable-aliases#Variable-Aliases&quot;&gt;Variable Aliases&lt;/a&gt;.</source>
          <target state="translated">'。&lt;a href=&quot;variable-aliases#Variable-Aliases&quot;&gt;変数エイリアスを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0d2dc46695cab2abafe665a0ab23ab1e7e831602" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;Window Configurations&lt;/a&gt;, for a description of several functions related to window configurations.</source>
          <target state="translated">'。&lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;ウィンドウ構成&lt;/a&gt;に関連するいくつかの機能の説明については、ウィンドウ構成を参照してください。</target>
        </trans-unit>
        <trans-unit id="6ee7cff7fa0778ba210ce16dfbd4f06464fbc8a2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Shy groups are particularly useful for mechanically-constructed regular expressions, because they can be added automatically without altering the numbering of ordinary, non-shy groups.</source>
          <target state="translated">'。恥ずかしがり屋のグループは、通常の恥ずかしがり屋でないグループの番号を変更せずに自動的に追加できるため、機械的に構築された正規表現に特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="708084086d79648a8110eed3665d422c8ffd666f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Similarly, the modifiers list for an</source>
          <target state="translated">'。同様に、</target>
        </trans-unit>
        <trans-unit id="5cf026f0f492ab0affae3c0f66630e78e42df892" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. So you should not quote these characters when they have no special meaning either. This would not clarify anything, since backslashes can legitimately precede these characters where they &lt;em&gt;have&lt;/em&gt; special meaning, as in &amp;lsquo;</source>
          <target state="translated">'。したがって、これらの文字にも特別な意味がない場合は、これらの文字を引用しないでください。'のように、バックスラッシュ&lt;em&gt;は&lt;/em&gt;特別な意味を&lt;em&gt;持つ&lt;/em&gt;これらの文字の前に合法的に&lt;em&gt;置く&lt;/em&gt;ことができるため、これは何も明確にしません。</target>
        </trans-unit>
        <trans-unit id="cd1d2047c2fd7918d45532fbecf28b3cc52c2b6c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Some characters, however, are displayed specially. For example, the formfeed character (character code 12) is usually displayed as a sequence of two glyphs, &amp;lsquo;</source>
          <target state="translated">'。ただし、一部の文字は特別に表示されます。たとえば、改ページ文字（文字コード12）は通常、2つのグリフのシーケンスとして表示されます。</target>
        </trans-unit>
        <trans-unit id="14eea4763dde3ddf5ce53a86a1896eb1fd318bb7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Still trivial. To do something more powerful, you need to use one of the special regular expression constructs.</source>
          <target state="translated">'。まだ些細なことです。より強力なことを行うには、特別な正規表現構造の1つを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e07226d2be075ac9dda9196295d008c4e3fc810c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Such names require no special punctuation; the characters of the name suffice as long as the name does not look like a number. (If it does, write a &amp;lsquo;</source>
          <target state="translated">'。このような名前には特別な句読点は必要ありません。名前が数字のように見えない限り、名前の文字で十分です。（もしそうなら、 'を書く</target>
        </trans-unit>
        <trans-unit id="906bb999bf9ee508c31bffefdbc7d73f14771f08" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. That way, none of these functions will block.</source>
          <target state="translated">'。そうすれば、これらの機能はどれもブロックされません。</target>
        </trans-unit>
        <trans-unit id="fd1611dd4569a88af914da509268caa5134b1296" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The &amp;lsquo;</source>
          <target state="translated">'。「</target>
        </trans-unit>
        <trans-unit id="37628035fbcce70009f881ac679633ada127de15" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The &lt;var&gt;count&lt;/var&gt;th subexpression is found by counting occurrences of &amp;lsquo;</source>
          <target state="translated">'。 &lt;var&gt;count&lt;/var&gt; 番目の部分式の計数出現によって発見されました&quot;</target>
        </trans-unit>
        <trans-unit id="12baa4d667ec3a90f60c245e7e86979c6d6e442a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The &lt;var&gt;target&lt;/var&gt; argument is treated only as a string; it need not name an existing file. If &lt;var&gt;ok-if-already-exists&lt;/var&gt; is an integer, indicating interactive use, then leading &amp;lsquo;</source>
          <target state="translated">'。 &lt;var&gt;target&lt;/var&gt; 引数は唯一の文字列として扱われます。既存のファイルに名前を付ける必要はありません。場合 &lt;var&gt;ok-if-already-exists&lt;/var&gt; インタラクティブ使用を示す整数であり、次いで'リーディング</target>
        </trans-unit>
        <trans-unit id="8b6cfc9f76c474ed48699fb8ae94e5576e6036f0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The Unicode Standard defines code points only up to &amp;lsquo;</source>
          <target state="translated">'。Unicode標準では、 'までのコードポイントのみが定義されています。</target>
        </trans-unit>
        <trans-unit id="b29a3c4f0556ebcb72ab0596e39a357e6936b460" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The beginning of the entire match is at the 9th character of the buffer (&amp;lsquo;</source>
          <target state="translated">'。一致全体の開始は、バッファーの9番目の文字（ '</target>
        </trans-unit>
        <trans-unit id="f37afdff242ec169a2f84592cd3cc3b9468bb20d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The binding to use is the command &lt;var&gt;def&lt;/var&gt;, and &lt;var&gt;key&lt;/var&gt; is the fake function key symbol in the prefix keymap. The remaining arguments &lt;var&gt;props&lt;/var&gt; are additional property list elements to add to the menu item specification.</source>
          <target state="translated">'。使用するバインディングはコマンド &lt;var&gt;def&lt;/var&gt; であり、 &lt;var&gt;key&lt;/var&gt; はプレフィックスキーマップの偽のファンクションキーシンボルです。残りの引数 &lt;var&gt;props&lt;/var&gt; は、メニュー項目の仕様に追加する追加のプロパティリスト要素です。</target>
        </trans-unit>
        <trans-unit id="e50bcddf2c441313d584f0d54ae74d7b638a4786" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The character codes for these non-</source>
          <target state="translated">'。これらの非の文字コード</target>
        </trans-unit>
        <trans-unit id="793c3d36052d9aa3c00cec57f54fd273ea5df407" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The elements of the spliced list become elements at the same level as the other elements of the resulting list. The equivalent code without using &amp;lsquo;</source>
          <target state="translated">'。スプライスされたリストの要素は、結果のリストの他の要素と同じレベルの要素になります。'を使用しない同等のコード</target>
        </trans-unit>
        <trans-unit id="cad679c43232df637e874176b4445335999ad74d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The first message conveys no additional information beyond what&amp;rsquo;s in the second, so logging the second message discards the first from the log.</source>
          <target state="translated">'。最初のメッセージは2番目のメッセージ以外の追加情報を伝達しないため、2番目のメッセージをログに記録すると、最初のメッセージがログから破棄されます。</target>
        </trans-unit>
        <trans-unit id="2970f815d2c99b66e86ad69cb3e0cec486a88a95" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The first part, &lt;var&gt;hostname&lt;/var&gt;, specifies the name of the machine to which the display is physically connected. The second part, &lt;var&gt;displaynumber&lt;/var&gt;, is a zero-based number that identifies one or more monitors connected to that machine that share a common keyboard and pointing device (mouse, tablet, etc.). The third part, &lt;var&gt;screennumber&lt;/var&gt;, identifies a zero-based screen number (a separate monitor) that is part of a single monitor collection on that X server. When you use two or more screens belonging to one server, Emacs knows by the similarity in their names that they share a single keyboard.</source>
          <target state="translated">'。最初の部分である &lt;var&gt;hostname&lt;/var&gt; は、ディスプレイが物理的に接続されているマシンの名前を指定します。2番目の部分である &lt;var&gt;displaynumber&lt;/var&gt; は、共通のキーボードとポインティングデバイス（マウス、タブレットなど）を共有する、そのマシンに接続されている1つ以上のモニターを識別するゼロベースの番号です。3番目の部分である &lt;var&gt;screennumber&lt;/var&gt; は、そのXサーバー上の単一のモニターコレクションの一部であるゼロベースの画面番号（個別のモニター）を識別します。1つのサーバーに属する2つ以上の画面を使用する場合、Emacsは名前の類似性から、1つのキーボードを共有していることを認識します。</target>
        </trans-unit>
        <trans-unit id="1fd22dd646a09e9239d462916bff3e97ef3f5f54" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The former is used for &lt;code&gt;message-box&lt;/code&gt; (see &lt;a href=&quot;displaying-messages#message_002dbox&quot;&gt;message-box&lt;/a&gt;). (On text terminals, the box title is not displayed.)</source>
          <target state="translated">'。前者は &lt;code&gt;message-box&lt;/code&gt; 使用されます（&lt;a href=&quot;displaying-messages#message_002dbox&quot;&gt;メッセージボックスを&lt;/a&gt;参照）。（テキスト端末では、ボックスのタイトルは表示されません。）</target>
        </trans-unit>
        <trans-unit id="7359acff8f50c55cfea4a3c96b0f985db936f774" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The latter is also used in Lisp strings, so this function can handle those as well.</source>
          <target state="translated">'。後者はLisp文字列でも使用されるため、この関数はそれらも処理できます。</target>
        </trans-unit>
        <trans-unit id="852e94652163a71ebbf771fc8cdd98e3887a9eb9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The major mode command runs this normal hook with &lt;code&gt;run-mode-hooks&lt;/code&gt; as the very last thing it does. See &lt;a href=&quot;mode-hooks#Mode-Hooks&quot;&gt;Mode Hooks&lt;/a&gt;. Most minor modes have mode hooks too.</source>
          <target state="translated">'。メジャーモードコマンドは、最後に &lt;code&gt;run-mode-hooks&lt;/code&gt; 、run-mode-hooksを使用してこの通常のフックを実行します。&lt;a href=&quot;mode-hooks#Mode-Hooks&quot;&gt;モードフックを&lt;/a&gt;参照してください。ほとんどのマイナーモードにはモードフックもあります。</target>
        </trans-unit>
        <trans-unit id="a5baebd66099b401b4fcb10b83cff4483027a3b5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The next conversion will start with the wrong data straight away.</source>
          <target state="translated">'。次の変換は、すぐに間違ったデータから始まります。</target>
        </trans-unit>
        <trans-unit id="1d0b8ed2d6113a855e1100f3ed92552702615a37" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The number is unique for each connection in the Emacs session.</source>
          <target state="translated">'。この番号は、Emacsセッションの接続ごとに一意です。</target>
        </trans-unit>
        <trans-unit id="91c8923474bd22278c1eb58f69beafd83ed9a013" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The rest of the list should consist of zero or more property-value pairs specifying the hash table&amp;rsquo;s properties and initial contents. The properties and values are read literally. Valid property names are &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;weakness&lt;/code&gt;, &lt;code&gt;rehash-size&lt;/code&gt;, &lt;code&gt;rehash-threshold&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; property should be a list of key-value pairs for the initial contents; the other properties have the same meanings as the matching &lt;code&gt;make-hash-table&lt;/code&gt; keywords (&lt;code&gt;:size&lt;/code&gt;, &lt;code&gt;:test&lt;/code&gt;, etc.), described above.</source>
          <target state="translated">'。リストの残りの部分は、ハッシュテーブルのプロパティと初期コンテンツを指定する0個以上のプロパティと値のペアで構成されている必要があります。プロパティと値は文字通りに読み取られます。有効なプロパティ名は、 &lt;code&gt;size&lt;/code&gt; 、 &lt;code&gt;test&lt;/code&gt; 、 &lt;code&gt;weakness&lt;/code&gt; 、 &lt;code&gt;rehash-size&lt;/code&gt; 、 &lt;code&gt;rehash-threshold&lt;/code&gt; 、および &lt;code&gt;data&lt;/code&gt; です。 &lt;code&gt;data&lt;/code&gt; プロパティは、初期内容のためのキーと値のペアのリストでなければなりません。他のプロパティは、上記の一致 &lt;code&gt;make-hash-table&lt;/code&gt; キーワード（ &lt;code&gt;:size&lt;/code&gt; 、 &lt;code&gt;:test&lt;/code&gt; など）と同じ意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="9d46cc9c8482c75316f352d083633117c60ce1c4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The resulting expression looks like this:</source>
          <target state="translated">'。結果の式は次のようになります。</target>
        </trans-unit>
        <trans-unit id="000bce74e71c14f772e17a4725ffb2983c6c237c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The special option</source>
          <target state="translated">'。特別なオプション</target>
        </trans-unit>
        <trans-unit id="2919e410441cd3fa14c70862d86e23d936c19ddd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The title can be anything, though implementations are free not to display it.</source>
          <target state="translated">'。タイトルは何でもかまいませんが、実装では表示しないでください。</target>
        </trans-unit>
        <trans-unit id="e00cf602888dbc607dc52fd64e22b253efc27627" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The tooltip text can be up to 127 characters long (63 on Windows versions before W2K). Longer strings will be truncated.</source>
          <target state="translated">'。ツールチップテキストの長さは最大127文字です（W2Kより前のWindowsバージョンでは63文字）。長い文字列は切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="e83a72ffdf79671929a84095de854f2be8408d18" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The user must type</source>
          <target state="translated">'。ユーザーは入力する必要があります</target>
        </trans-unit>
        <trans-unit id="ca8cca00f15f099c0463338b17073df8dcef4b8a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The user must type one of the expected responses; otherwise, the function responds &amp;lsquo;</source>
          <target state="translated">'。ユーザーは、予想される応答の1つを入力する必要があります。それ以外の場合、関数は応答します '</target>
        </trans-unit>
        <trans-unit id="6d2ead8c402d58d069a0a75b0ac5ba0038afde6c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The value is 2 because the first substring is greater at the second character.</source>
          <target state="translated">'。最初の部分文字列が2番目の文字で大きいため、値は2です。</target>
        </trans-unit>
        <trans-unit id="161102cc186fe64e67ec8696a8c4ec982a46cf83" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The value is an integer, or &lt;code&gt;nil&lt;/code&gt; if the character has no decimal digit value. For unassigned codepoints, the value is &lt;code&gt;nil&lt;/code&gt;, which means</source>
          <target state="translated">'。値は整数、または文字に10進数値がない場合は &lt;code&gt;nil&lt;/code&gt; です。割り当てられていないコードポイントの場合、値は &lt;code&gt;nil&lt;/code&gt; です。これは、</target>
        </trans-unit>
        <trans-unit id="1df558a104e07868e3cbcf719429951a4fc4da12" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The value is an integer. Examples of such characters include compatibility subscript and superscript digits, for which the value is the corresponding number. For characters that don&amp;rsquo;t have any numeric value, and for unassigned codepoints, the value is &lt;code&gt;nil&lt;/code&gt;, which means</source>
          <target state="translated">'。値は整数です。このような文字の例には、互換性の下付き文字と上付き数字が含まれ、値は対応する数値です。数値を持たない文字の場合、および割り当てられていないコードポイントの場合、値は &lt;code&gt;nil&lt;/code&gt; です。これは、</target>
        </trans-unit>
        <trans-unit id="0ddb1fa3cf6e34b1f3363e5b6f36e2a8cc474f68" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The value of this property is a number. Examples of characters that have this property include fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers. For example, the value of this property for the character U+2155 &lt;small&gt;VULGAR FRACTION ONE FIFTH&lt;/small&gt; is &lt;code&gt;0.2&lt;/code&gt;. For characters that don&amp;rsquo;t have any numeric value, and for unassigned codepoints, the value is &lt;code&gt;nil&lt;/code&gt;, which means</source>
          <target state="translated">'。このプロパティの値は数値です。このプロパティを持つ文字の例には、分数、下付き文字、上付き文字、ローマ数字、通貨分子、および丸で囲まれた数字が含まれます。たとえば、文字U + 2155 &lt;small&gt;VULGAR FRACTION ONEFIFTH&lt;/small&gt;のこのプロパティの値は &lt;code&gt;0.2&lt;/code&gt; です。数値を持たない文字の場合、および割り当てられていないコードポイントの場合、値は &lt;code&gt;nil&lt;/code&gt; です。これは、</target>
        </trans-unit>
        <trans-unit id="57464e10812884a2a7fdf8e2192323a75775afc5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The value should be a string or a symbol.</source>
          <target state="translated">'。値は文字列または記号である必要があります。</target>
        </trans-unit>
        <trans-unit id="e98566487fca63f26672521f75752ff8b09e552a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. There is no reason to add a backslash before most characters. However, you must add a backslash before any of the characters &amp;lsquo;</source>
          <target state="translated">'。ほとんどの文字の前に円記号を追加する理由はありません。ただし、文字の前に円記号を追加する必要があります '</target>
        </trans-unit>
        <trans-unit id="5e0e6b6040e359e05222db840c43e4cc73bbef06" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Therefore, the read syntax for a regular expression matching &amp;lsquo;</source>
          <target state="translated">'。したがって、 'に一致する正規表現の読み取り構文</target>
        </trans-unit>
        <trans-unit id="9bf973b7b01692cd39ee5163b36b22c75b948c67" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. These specification characters accept the &amp;lsquo;</source>
          <target state="translated">'。これらの指定文字は 'を受け入れます</target>
        </trans-unit>
        <trans-unit id="cb2069f434d89c890103ae08358351f3a31fa354" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. They are &lt;em&gt;normal hooks&lt;/em&gt;, run by means of &lt;code&gt;run-hooks&lt;/code&gt;. The value of such a hook is a list of functions; the functions are called with no arguments and their values are completely ignored. The recommended way to put a new function on such a hook is to call &lt;code&gt;add-hook&lt;/code&gt;. See &lt;a href=&quot;hooks#Hooks&quot;&gt;Hooks&lt;/a&gt;, for more information about using hooks.</source>
          <target state="translated">'。それらは&lt;em&gt;通常のフックであり&lt;/em&gt;、 &lt;code&gt;run-hooks&lt;/code&gt; によって実行されます。このようなフックの値は関数のリストです。関数は引数なしで呼び出され、それらの値は完全に無視されます。このようなフックに新しい関数を配置するための推奨される方法は、 &lt;code&gt;add-hook&lt;/code&gt; を呼び出すことです。&lt;a href=&quot;hooks#Hooks&quot;&gt;フックの&lt;/a&gt;使用の詳細については、フックを参照してください。</target>
        </trans-unit>
        <trans-unit id="6c0441774ee83f80549b8d2a5a8e22cc03db7a33" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This binds &lt;code&gt;debug-on-error&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; while loading the init file, and bypasses the &lt;code&gt;condition-case&lt;/code&gt; which normally catches errors in the init file.</source>
          <target state="translated">'。これにより、initファイルのロード中に &lt;code&gt;debug-on-error&lt;/code&gt; が &lt;code&gt;t&lt;/code&gt; にバインドされ、通常はinitファイルのエラーをキャッチする &lt;code&gt;condition-case&lt;/code&gt; がバイパスされます。</target>
        </trans-unit>
        <trans-unit id="05650f6565c7cb5517800d8261d59997f84ab135" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This causes Emacs to display the nested keymap using a separate &lt;em&gt;menu pane&lt;/em&gt;; the rest of the item string after the &amp;lsquo;</source>
          <target state="translated">'。これにより、Emacsは別の&lt;em&gt;メニューペイン&lt;/em&gt;を使用してネストされたキーマップを&lt;em&gt;表示し&lt;/em&gt;ます。'の後のアイテム文字列の残り</target>
        </trans-unit>
        <trans-unit id="15182435e26097bab3e00fe7539278a0bf7847c0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This command takes care of switching to that mode in the current buffer, by setting various buffer-local variables such as a local keymap. See &lt;a href=&quot;major-mode-conventions#Major-Mode-Conventions&quot;&gt;Major Mode Conventions&lt;/a&gt;. Note that unlike minor modes there is no way to &amp;ldquo;turn off&amp;rdquo; a major mode, instead the buffer must be switched to a different one. However, you can temporarily &lt;em&gt;suspend&lt;/em&gt; a major mode and later &lt;em&gt;restore&lt;/em&gt; the suspended mode, see below.</source>
          <target state="translated">'。このコマンドは、ローカルキーマップなどのさまざまなバッファローカル変数を設定することにより、現在のバッファでそのモードに切り替える処理を行います。&lt;a href=&quot;major-mode-conventions#Major-Mode-Conventions&quot;&gt;メジャーモードの規則を&lt;/a&gt;参照してください。マイナーモードとは異なり、メジャーモードを「オフ」にする方法はなく、代わりにバッファを別のバッファに切り替える必要があることに注意してください。ただし、メジャーモードを一時的に一時&lt;em&gt;停止し&lt;/em&gt;、後で一時&lt;em&gt;停止し&lt;/em&gt;たモードに&lt;em&gt;戻す&lt;/em&gt;ことができます。以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="d216d0272cb4897fcf3c66233f3dd47d81871679" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This construct skips the next &lt;var&gt;count&lt;/var&gt; characters. It also uses the &amp;lsquo;</source>
          <target state="translated">'。この構成は、次の &lt;var&gt;count&lt;/var&gt; 文字をスキップします。'も使用します</target>
        </trans-unit>
        <trans-unit id="5816f84c39272f885290eee298a72b6c9d0c116a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This format specification is unusual in that its only form is plain &amp;lsquo;</source>
          <target state="translated">'。このフォーマット仕様は、その唯一の形式がプレーンであるという点で珍しいです。</target>
        </trans-unit>
        <trans-unit id="316f3bb4ab1f8ea0d64ff173acca0438022f0ab0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This happens when a circular structure is encountered. See &lt;a href=&quot;circular-objects#Circular-Objects&quot;&gt;Circular Objects&lt;/a&gt;.</source>
          <target state="translated">'。これは、円形の構造に遭遇したときに発生します。&lt;a href=&quot;circular-objects#Circular-Objects&quot;&gt;円形オブジェクトを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="09bff7c889bdb5a4b33dee11801255ae7a83831f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This happens when attempting to assign values to &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;most-positive-fixnum&lt;/code&gt;, &lt;code&gt;most-negative-fixnum&lt;/code&gt;, and keyword symbols. It also happens when attempting to assign values to &lt;code&gt;enable-multibyte-characters&lt;/code&gt; and some other symbols whose direct assignment is not allowed for some reason. See &lt;a href=&quot;constant-variables#Constant-Variables&quot;&gt;Constant Variables&lt;/a&gt;.</source>
          <target state="translated">'。これは、 &lt;code&gt;nil&lt;/code&gt; 、 &lt;code&gt;t&lt;/code&gt; 、 &lt;code&gt;most-positive-fixnum&lt;/code&gt; 、 &lt;code&gt;most-negative-fixnum&lt;/code&gt; 、およびキーワードシンボルに値を割り当てようとしたときに発生します。また、 &lt;code&gt;enable-multibyte-characters&lt;/code&gt; や、何らかの理由で直接割り当てが許可されていないその他のシンボルに値を割り当てようとした場合にも発生します。&lt;a href=&quot;constant-variables#Constant-Variables&quot;&gt;定数変数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="75f592dac877729f6703ed64009997e93d7a39cf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This happens when certain syntax-parsing functions find invalid syntax or mismatched parentheses. Conventionally raised with three argument: a human-readable error message, the start of the obstacle that cannot be moved over, and the end of the obstacle. See &lt;a href=&quot;list-motion#List-Motion&quot;&gt;List Motion&lt;/a&gt;, and see &lt;a href=&quot;parsing-expressions#Parsing-Expressions&quot;&gt;Parsing Expressions&lt;/a&gt;.</source>
          <target state="translated">'。これは、特定の構文解析関数が無効な構文または不一致の括弧を検出した場合に発生します。従来、人間が読めるエラーメッセージ、移動できない障害物の開始、障害物の終了という3つの引数で発生していました。参照&lt;a href=&quot;list-motion#List-Motion&quot;&gt;リストモーション&lt;/a&gt;、および参照の&lt;a href=&quot;parsing-expressions#Parsing-Expressions&quot;&gt;解析式を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="318f0e093037067226b703cd3f50f1d5280b9791" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This happens when the &lt;code&gt;cl-assert&lt;/code&gt; macro fails a test. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/cl/Assertions.html#Assertions&quot;&gt;Assertions&lt;/a&gt; in</source>
          <target state="translated">'。これは、 &lt;code&gt;cl-assert&lt;/code&gt; マクロがテストに失敗した場合に発生します。の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/cl/Assertions.html#Assertions&quot;&gt;アサーション&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="21a076e5d7d04b2f124f63daa11a44ed7155139e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This happens when trying to access an element beyond the range of a sequence, buffer, or other container-like object. See &lt;a href=&quot;sequences-arrays-vectors#Sequences-Arrays-Vectors&quot;&gt;Sequences Arrays Vectors&lt;/a&gt;, and see &lt;a href=&quot;text#Text&quot;&gt;Text&lt;/a&gt;.</source>
          <target state="translated">'。これは、シーケンス、バッファ、またはその他のコンテナのようなオブジェクトの範囲を超えて要素にアクセスしようとしたときに発生します。参照&lt;a href=&quot;sequences-arrays-vectors#Sequences-Arrays-Vectors&quot;&gt;シーケンス配列のベクター&lt;/a&gt;、および参照の&lt;a href=&quot;text#Text&quot;&gt;テキストを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ee0d4705c8bb4207d391f22dc73c8bbb2e3086cd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This is a subcategory of &lt;code&gt;buffer-read-only&lt;/code&gt;. See &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Special Properties&lt;/a&gt;.</source>
          <target state="translated">'。これは、 &lt;code&gt;buffer-read-only&lt;/code&gt; サブカテゴリです。&lt;a href=&quot;special-properties#Special-Properties&quot;&gt;特別なプロパティを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="95666866996419c404d9ef874e3cd2863c08ec2d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This is a subcategory of &lt;code&gt;range-error&lt;/code&gt;. This can happen with integers exceeding the &lt;code&gt;integer-width&lt;/code&gt; limit. See &lt;a href=&quot;integer-basics#Integer-Basics&quot;&gt;Integer Basics&lt;/a&gt;.</source>
          <target state="translated">'。これは &lt;code&gt;range-error&lt;/code&gt; のサブカテゴリです。これは、 &lt;code&gt;integer-width&lt;/code&gt; 制限を超えている場合に発生する可能性があります。&lt;a href=&quot;integer-basics#Integer-Basics&quot;&gt;整数の基本を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="48a9681d36036edee101467989e10875fb905fcf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This is useful only when you call a primitive that is defined only on certain systems. Most primitives are always defined, so they will never give you a warning.</source>
          <target state="translated">'。これは、特定のシステムでのみ定義されているプリミティブを呼び出す場合にのみ役立ちます。ほとんどのプリミティブは常に定義されているため、警告が表示されることはありません。</target>
        </trans-unit>
        <trans-unit id="5270a644dbe96004ce03d796db44c47e8b1011eb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This lasts until the next special &amp;lsquo;</source>
          <target state="translated">'。これは次のスペシャルまで続きます '</target>
        </trans-unit>
        <trans-unit id="5bda5f2613d9531266fe2c54156a16ead54aaec8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This may be different from &amp;lsquo;</source>
          <target state="translated">'。これは 'とは異なる場合があります</target>
        </trans-unit>
        <trans-unit id="81f287934ec906215054a3c0d5eb5ca99e14aac6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This occurs when trying to perform integer division by zero. See &lt;a href=&quot;numeric-conversions#Numeric-Conversions&quot;&gt;Numeric Conversions&lt;/a&gt;, and see &lt;a href=&quot;arithmetic-operations#Arithmetic-Operations&quot;&gt;Arithmetic Operations&lt;/a&gt;.</source>
          <target state="translated">'。これは、ゼロによる整数除算を実行しようとしたときに発生します。参照&lt;a href=&quot;numeric-conversions#Numeric-Conversions&quot;&gt;数の変換&lt;/a&gt;、および参照の&lt;a href=&quot;arithmetic-operations#Arithmetic-Operations&quot;&gt;算術演算を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="414ff2267f9826d7bd13cd2d374b957d138e2861" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This variable is buffer-local in every buffer.</source>
          <target state="translated">'。この変数は、すべてのバッファーでバッファーローカルです。</target>
        </trans-unit>
        <trans-unit id="70581dcd87789833c6a0f3144cc5bd0f17aa6998" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Thus, &amp;lsquo;</source>
          <target state="translated">'。したがって、 '</target>
        </trans-unit>
        <trans-unit id="ca053ea1d986e2dfa62edc9c38303d448e2c4f99" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Thus, &lt;code&gt;&quot;a-zA-Z&quot;&lt;/code&gt; skips over all letters, stopping before the first nonletter, and &lt;code&gt;&quot;^a-zA-Z&quot;&lt;/code&gt; skips nonletters stopping before the first letter (see &lt;a href=&quot;regular-expressions#Regular-Expressions&quot;&gt;Regular Expressions&lt;/a&gt;). Character classes can also be used, e.g., &lt;code&gt;&quot;[:alnum:]&quot;&lt;/code&gt; (see &lt;a href=&quot;char-classes#Char-Classes&quot;&gt;Char Classes&lt;/a&gt;).</source>
          <target state="translated">'。したがって、 &lt;code&gt;&quot;a-zA-Z&quot;&lt;/code&gt; はすべての文字をスキップして最初の非文字の前で停止し、 &lt;code&gt;&quot;^a-zA-Z&quot;&lt;/code&gt; は最初の文字の前で停止する非文字をスキップします（&lt;a href=&quot;regular-expressions#Regular-Expressions&quot;&gt;正規表現を&lt;/a&gt;参照）。 &lt;code&gt;&quot;[:alnum:]&quot;&lt;/code&gt; 文字クラスも使用できます（&lt;a href=&quot;char-classes#Char-Classes&quot;&gt;Char Classesを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="31db43e0f62f5918021f4304c3b57c98b1f485d7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Thus, a double click on the second mouse button with</source>
          <target state="translated">'。したがって、2番目のマウスボタンをダブルクリックします。</target>
        </trans-unit>
        <trans-unit id="49226b43496927226013c375a3905de681bc1894" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Thus, if there is a &amp;lsquo;</source>
          <target state="translated">'。したがって、 'がある場合</target>
        </trans-unit>
        <trans-unit id="874956d01e70f45a109825abc27d584d72e4f201" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. To activate the packages in the latter case, &lt;code&gt;package-activate-all&lt;/code&gt; should be called explicitly (e.g., via the &amp;lsquo;</source>
          <target state="translated">'。後者の場合に &lt;code&gt;package-activate-all&lt;/code&gt; 、package-activate-allを明示的に呼び出す必要があります（たとえば、「</target>
        </trans-unit>
        <trans-unit id="5d17f34aad040ac16bbe3e7e207e5072f9097300" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. To have a symbol with a tab character in its name, you must actually use a tab (preceded with a backslash). But it&amp;rsquo;s rare to do such a thing.</source>
          <target state="translated">'。名前にタブ文字が含まれるシンボルを使用するには、実際にタブを使用する必要があります（前に円記号が付きます）。しかし、そのようなことをすることはめったにありません。</target>
        </trans-unit>
        <trans-unit id="40d1da7236353b66283a8e0d665f7aa50d39c40a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. To include &amp;lsquo;</source>
          <target state="translated">'。含める '</target>
        </trans-unit>
        <trans-unit id="cfd4671f7f558d7f9826bc96f1106cac5603f8eb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. To remove this advice, say</source>
          <target state="translated">'。このアドバイスを削除するには、</target>
        </trans-unit>
        <trans-unit id="5978960388f3c9dbfeacd5a01349a4f2fd056b14" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. To write a Lisp string that contains the characters &amp;lsquo;</source>
          <target state="translated">'。文字を含むLisp文字列を書くには '</target>
        </trans-unit>
        <trans-unit id="d51ac1a5016e8263d8d91254e30b5f5b6bd21bf9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Unicode character escapes can help here; for example, for most programmers &amp;lsquo;</source>
          <target state="translated">'。ここでは、Unicode文字のエスケープが役立ちます。たとえば、ほとんどのプログラマーにとって</target>
        </trans-unit>
        <trans-unit id="e508b205c9c36ae9bed615f782193f132fc3aa2c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. We call this the &lt;em&gt;mode variable&lt;/em&gt;. The minor mode command should set this variable. The value will be &lt;code&gt;nil&lt;/code&gt; if the mode is disabled, and non-&lt;code&gt;nil&lt;/code&gt; if the mode is enabled. The variable should be buffer-local if the minor mode is buffer-local.</source>
          <target state="translated">'。これを&lt;em&gt;モード変数&lt;/em&gt;と呼び&lt;em&gt;ます&lt;/em&gt;。マイナーモードコマンドは、この変数を設定する必要があります。値は次のようになります &lt;code&gt;nil&lt;/code&gt; のモードが無効になっている、と非場合は &lt;code&gt;nil&lt;/code&gt; のモードが有効になっている場合。マイナーモードがバッファローカルの場合、変数はバッファローカルである必要があります。</target>
        </trans-unit>
        <trans-unit id="bc90b4943ed58fc986b8cd750926a26e0d3eafcd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. We may or may not show the result of the evaluation of the expanded form.</source>
          <target state="translated">'。拡張フォームの評価結果を表示する場合と表示しない場合があります。</target>
        </trans-unit>
        <trans-unit id="8c2abaf3dccae438c3e3bec735f16d20fb5b2dc2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. When called with no arguments, this command should switch to the new mode in the current buffer by setting up the keymap, syntax table, and buffer-local variables in an existing buffer. It should not change the buffer&amp;rsquo;s contents.</source>
          <target state="translated">'。引数なしで呼び出された場合、このコマンドは、既存のバッファーにキーマップ、構文テーブル、およびバッファーローカル変数を設定することにより、現在のバッファーの新しいモードに切り替える必要があります。バッファの内容を変更するべきではありません。</target>
        </trans-unit>
        <trans-unit id="3778a1de9c11c4ca20a07cd8f1e4b79f4bcb089a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Where those operators match the largest possible substring (consistent with matching the entire containing expression), the non-greedy variants match the smallest possible substring (consistent with matching the entire containing expression).</source>
          <target state="translated">'。これらの演算子が可能な最大の部分文字列と一致する場合（含まれる式全体と一致する）、貪欲でないバリアントは可能な限り小さい部分文字列と一致します（含まれる式全体と一致する）。</target>
        </trans-unit>
        <trans-unit id="4f5b78b0f81e0b29716f109e21129103b5e1cda4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. You can refer to the fontset by either name. If a fontset with the same name already exists, an error is signaled, unless &lt;var&gt;noerror&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, in which case this function does nothing.</source>
          <target state="translated">'。フォントセットはどちらの名前でも参照できます。同じ名前のフォントセットがすでに存在する場合、 &lt;var&gt;noerror&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の場合を除いて、エラーが通知されます。この場合、この関数は何も実行しません。</target>
        </trans-unit>
        <trans-unit id="7828357c077844f0538b33bc92cb44411f658edd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. You specify the name of a category when you define it with &lt;code&gt;define-category&lt;/code&gt;.</source>
          <target state="translated">'。カテゴリの名前は、 &lt;code&gt;define-category&lt;/code&gt; で定義するときに指定します。</target>
        </trans-unit>
        <trans-unit id="6ed3aa9a75d90fa30ae4fd470caff45c2e0442f1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;.)</source>
          <target state="translated">&amp;rsquo;.)</target>
        </trans-unit>
        <trans-unit id="4695df59bc44fdf1f0b9ccceafc6bcc3537b8d3f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;.) Otherwise, the current buffer&amp;rsquo;s value of &lt;code&gt;default-directory&lt;/code&gt; is used. For example:</source>
          <target state="translated">'。）それ以外の場合は、現在のバッファの &lt;code&gt;default-directory&lt;/code&gt; の値が使用されます。例えば：</target>
        </trans-unit>
        <trans-unit id="156309a7b165cae2860384c8bd41ff8b92b091f4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;:</source>
          <target state="translated">&amp;rsquo;:</target>
        </trans-unit>
        <trans-unit id="e3aac28a5bcca39e6df51325cb075999557416de" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;: the second alternative inside the larger group matches it, but then &amp;lsquo;</source>
          <target state="translated">'：より大きなグループ内の2番目の選択肢はそれに一致しますが、'</target>
        </trans-unit>
        <trans-unit id="deeb59fff1e51675d1aae26f3821e4d1d2865c23" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; 1 for a comment of style &amp;lsquo;</source>
          <target state="translated">'; スタイルのコメントは1</target>
        </trans-unit>
        <trans-unit id="22f826cf2c98a14b68e4605a706e32fbe4128ad7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; 2 for a comment of style &amp;lsquo;</source>
          <target state="translated">'; スタイルのコメントは2</target>
        </trans-unit>
        <trans-unit id="9cb73a66b531834fedad3d7de77945cd8757552f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; and &lt;code&gt;syntax-table&lt;/code&gt; for a comment that should be ended by a generic comment delimiter character.</source>
          <target state="translated">'; そして、 &lt;code&gt;syntax-table&lt;/code&gt; 汎用コメント区切り文字で終了すべきコメントを。</target>
        </trans-unit>
        <trans-unit id="cefb6e8274a49b4a2bba22f6b26c68707c2c5b2c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; and so on. Thus, the ten characters appear as five A&amp;rsquo;s.</source>
          <target state="translated">'; 等々。したがって、10文字は5つのAとして表示されます。</target>
        </trans-unit>
        <trans-unit id="4fa6fb399deb8a666e11816ad0dd2045410d2da7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; here, &amp;lsquo;</source>
          <target state="translated">'; ここに、 '</target>
        </trans-unit>
        <trans-unit id="8454a0c551c38668fa1152aca2478b5d63bcb854" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; if &lt;var&gt;filename&lt;/var&gt; does not end in &amp;lsquo;</source>
          <target state="translated">'; &lt;var&gt;filename&lt;/var&gt; が 'で終わらない場合</target>
        </trans-unit>
        <trans-unit id="cbba786de7468587648939c0e7e0527e85168c0a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; if you try to read this text, you get an error. There is no way to read those data types.</source>
          <target state="translated">'; このテキストを読み込もうとすると、エラーが発生します。これらのデータ型を読み取る方法はありません。</target>
        </trans-unit>
        <trans-unit id="d2db7d37546a01e935190c342f3e16620c41d180" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; it is the logical truth value &lt;var&gt;false&lt;/var&gt;; and it is the empty list&amp;mdash;the list of zero elements. When used as a variable, &lt;code&gt;nil&lt;/code&gt; always has the value &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">'; それは論理的真理値 &lt;var&gt;false&lt;/var&gt; です; そしてそれは空のリスト、つまりゼロ要素のリストです。変数として使用する場合、 &lt;code&gt;nil&lt;/code&gt; の値は常に &lt;code&gt;nil&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="14d49f5f4cb91d122f34aa9f738bd01a8eaf65f2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; no new special characters will be defined in the future. The character &amp;lsquo;</source>
          <target state="translated">'; 今後、新しい特殊文字は定義されません。キャラクター '</target>
        </trans-unit>
        <trans-unit id="615d4290dbeb4980cb06a27a02058feaa5b4af62" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; nothing else.</source>
          <target state="translated">'; 他には何もありません。</target>
        </trans-unit>
        <trans-unit id="add5af4d45fdfbae08c257d45949a9120ae2346d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Text-Display.html#Text-Display&quot;&gt;How Text Is Displayed&lt;/a&gt; in</source>
          <target state="translated">'; 参照&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Text-Display.html#Text-Display&quot;&gt;テキストの表示方法&lt;/a&gt;に</target>
        </trans-unit>
        <trans-unit id="5b99dfe7a482d74e67f02559e3b0cfc188912d25" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; that kind of name is automatically recognized as risky.</source>
          <target state="translated">'; そのような名前は自動的に危険であると認識されます。</target>
        </trans-unit>
        <trans-unit id="8eb026e1ad4a50a1d0320af7236ebd940775864f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; the fact that the display property was assigned in two separate calls to &lt;code&gt;put-text-property&lt;/code&gt; is irrelevant. Similarly, the next two characters get a second string (&lt;code&gt;concat&lt;/code&gt; creates a new string object), so they are replaced with one &amp;lsquo;</source>
          <target state="translated">'; 表示プロパティが &lt;code&gt;put-text-property&lt;/code&gt; への2つの別々の呼び出しで割り当てられたという事実は関係ありません。同様に、次の2文字は2番目の文字列を取得するため（ &lt;code&gt;concat&lt;/code&gt; は新しい文字列オブジェクトを作成します）、1つに置き換えられます '</target>
        </trans-unit>
        <trans-unit id="4182bfcd623839a25901982ab84a7ce748ac5e5f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; then the expansion of the %-construct will have that same text property.</source>
          <target state="translated">'; その場合、％-constructの展開には、同じテキストプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="f7b94bbcaf99fbf3d23c67965aa2111cace5d269" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; they distinguish strings from symbols, and prevent punctuation characters in strings and symbols from being taken as delimiters when reading. See &lt;a href=&quot;printed-representation#Printed-Representation&quot;&gt;Printed Representation&lt;/a&gt;, for full details. You specify quoting or no quoting by the choice of printing function.</source>
          <target state="translated">'; これらは文字列と記号を区別し、文字列と記号の句読文字が読み取り時に区切り文字として使用されるのを防ぎます。詳細については、&lt;a href=&quot;printed-representation#Printed-Representation&quot;&gt;印刷表現を&lt;/a&gt;参照してください。印刷機能の選択により、引用するか引用しないかを指定します。</target>
        </trans-unit>
        <trans-unit id="b7297e8488917747040cac9d9f00e72cbe782ad2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; this gives the user a way to quote a &amp;lsquo;</source>
          <target state="translated">'; これにより、ユーザーは 'を引用することができます。</target>
        </trans-unit>
        <trans-unit id="5eca84d86a4bc4a83fd6bfa2c0a6970138953dfa" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; thus, &amp;lsquo;</source>
          <target state="translated">'; したがって、 '</target>
        </trans-unit>
        <trans-unit id="3faca3177de3d387dfb50a0757c458a953b0da4d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s (including no &amp;lsquo;</source>
          <target state="translated">の（なしを含む）</target>
        </trans-unit>
        <trans-unit id="7dcc27923e605aadb2c1017616d5f7e8c4169923" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s (including the empty string). It follows that &amp;lsquo;</source>
          <target state="translated">の（空の文字列を含む）。その結果 '</target>
        </trans-unit>
        <trans-unit id="ab709833e2c64b80aadc23e7eacc6135ca7721e3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s &lt;em&gt;environment&lt;/em&gt;, a C &lt;code&gt;struct&lt;/code&gt; which also has a &lt;code&gt;size&lt;/code&gt; field holding the size of the structure in bytes.</source>
          <target state="translated">の&lt;em&gt;環境&lt;/em&gt;、 &lt;code&gt;struct&lt;/code&gt; のサイズをバイト単位で保持する &lt;code&gt;size&lt;/code&gt; フィールドも持つC構造体。</target>
        </trans-unit>
        <trans-unit id="81beab491315974c75546e90975912f61ad751ec" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s and &amp;lsquo;</source>
          <target state="translated">'砂 '</target>
        </trans-unit>
        <trans-unit id="14d12665396a3bce7258df47f6abec7f699fb21e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s before concluding that none of them can work. Even worse, &amp;lsquo;</source>
          <target state="translated">それらのどれも動作できないと結論付ける前に。さらに悪いことに、」</target>
        </trans-unit>
        <trans-unit id="0f735e2e37377ec4eba340dcdf4ebdc9e655d789" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s extension is &lt;code&gt;nil&lt;/code&gt;, not &amp;lsquo;</source>
          <target state="translated">の拡張子は &lt;code&gt;nil&lt;/code&gt; であり、 'ではありません</target>
        </trans-unit>
        <trans-unit id="a411072e6ab56489a6405f8d3ae96eafca5d392f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s in an entry shows its recursion depth. You can use the braces in the trace buffer to find the matching beginning or end of function calls.</source>
          <target state="translated">エントリ内のは、その再帰の深さを示しています。トレースバッファ内の中括弧を使用して、一致する関数呼び出しの開始または終了を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="d2b7dc883d476931d7fc0476d34c263f7e5e49c6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s).</source>
          <target state="translated">&amp;rsquo;s).</target>
        </trans-unit>
        <trans-unit id="9d2b1b1916f9e66dc77b6276688ff21f0d18b8dc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s, the &lt;code&gt;save-buffer&lt;/code&gt; function marks this version of the file to be backed up when the buffer is next saved.</source>
          <target state="translated">の場合、 &lt;code&gt;save-buffer&lt;/code&gt; 関数は、バッファが次に保存されるときにバックアップされるファイルのこのバージョンをマークします。</target>
        </trans-unit>
        <trans-unit id="86f7b5eeee874afb36f96509a49da5ba435536b7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s, the &lt;code&gt;save-buffer&lt;/code&gt; function unconditionally backs up the previous version of the file before saving it.</source>
          <target state="translated">の場合、 &lt;code&gt;save-buffer&lt;/code&gt; 関数は、ファイルを保存する前に、前のバージョンのファイルを無条件にバックアップします。</target>
        </trans-unit>
        <trans-unit id="62c00ed21835d6b53c6ca6cfe57b9f2b852c221e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s. With this choice, the rest of the regexp matches successfully.</source>
          <target state="translated">の。この選択により、残りの正規表現は正常に一致します。</target>
        </trans-unit>
        <trans-unit id="cbed273fd9bd702b1594782e2ff1c6576cce9456" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s; but the rest of the pattern is &amp;lsquo;</source>
          <target state="translated">の; しかし、パターンの残りの部分は '</target>
        </trans-unit>
        <trans-unit id="eebe33eb3b07fce4794dd29b4efa03e937445cd2" translate="yes" xml:space="preserve">
          <source>'like this'</source>
          <target state="translated">'このような'</target>
        </trans-unit>
        <trans-unit id="28ed3a797da3c48c309a4ef792147f3c56cfec40" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>
        </trans-unit>
        <trans-unit id="11f9ee4d666a516beba09ca14b6114cc113eac8e" translate="yes" xml:space="preserve">
          <source>(&quot;This is a &quot; &quot;and here's &quot; &quot;and this is the end&quot;)</source>
          <target state="translated">（「これは「」であり、これが「」であり、これで終わりです」）</target>
        </trans-unit>
        <trans-unit id="3b68c6de2c66f2968f2d8fb4be216af6f9995901" translate="yes" xml:space="preserve">
          <source>(&quot;bold&quot; &quot;bold&quot; &quot;italic&quot;)</source>
          <target state="translated">（「太字」「太字」「斜体」）</target>
        </trans-unit>
        <trans-unit id="29ad299bb8dea092301514db6455f6485ec7bef0" translate="yes" xml:space="preserve">
          <source>()[]\;&quot;</source>
          <target state="translated">()[]\;&quot;</target>
        </trans-unit>
        <trans-unit id="ca2bd2464ffff926c3bddb3fc9b1f4f2e0b1de72" translate="yes" xml:space="preserve">
          <source>(1 . (2 . (3 . nil)))</source>
          <target state="translated">（1。（2。（3。nil）））</target>
        </trans-unit>
        <trans-unit id="af5c8e3c39491ea4acc2b4f636081c4d8019041a" translate="yes" xml:space="preserve">
          <source>(1 2 3)</source>
          <target state="translated">（1 2 3）</target>
        </trans-unit>
        <trans-unit id="91ce9374a8d9b3758172a4a4957c8babf824efb5" translate="yes" xml:space="preserve">
          <source>(1) non-toolkit and terminal frames</source>
          <target state="translated">（1）非ツールキットおよびターミナルフレーム</target>
        </trans-unit>
        <trans-unit id="fdecdfa43a63c75b199dc29afcd065e93dab4228" translate="yes" xml:space="preserve">
          <source>(2) Lucid, Motif and MS-Windows frames</source>
          <target state="translated">（2）Lucid、Motif、およびMS-Windowsフレーム</target>
        </trans-unit>
        <trans-unit id="d90f53517a44bd4ce027a53dd0801b007378b6ed" translate="yes" xml:space="preserve">
          <source>(3) GTK+ and NS frames</source>
          <target state="translated">（3）GTK +およびNSフレーム</target>
        </trans-unit>
        <trans-unit id="1c6c7ac584dca2dbba4009ad6b227a32fab8b826" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;abort-recursive-edit&lt;/code&gt;).</source>
          <target state="translated">(&lt;code&gt;abort-recursive-edit&lt;/code&gt;).</target>
        </trans-unit>
        <trans-unit id="2634b0147564e044c324bb9fcfa5a8f97c3963dc" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;backward-up-list&lt;/code&gt; with an argument of -1) to find the end of the first unbalanced defun.</source>
          <target state="translated">（引数が-1の &lt;code&gt;backward-up-list&lt;/code&gt; ）最初の不均衡なデファンの終わりを見つけます。</target>
        </trans-unit>
        <trans-unit id="136f562371d96cdc09795acbc8fd79e6e121ffb8" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;backward-up-list&lt;/code&gt;, see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Moving-by-Parens.html#Moving-by-Parens&quot;&gt;Moving by Parens&lt;/a&gt; in</source>
          <target state="translated">（ &lt;code&gt;backward-up-list&lt;/code&gt; を参照してください&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Moving-by-Parens.html#Moving-by-Parens&quot;&gt;括弧で移動&lt;/a&gt;中</target>
        </trans-unit>
        <trans-unit id="630d83872ba9379547256811651469b9ca58d41d" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;compose-mail&lt;/code&gt;) command prompt for a &amp;lsquo;</source>
          <target state="translated">（ &lt;code&gt;compose-mail&lt;/code&gt; ） 'のコマンドプロンプト</target>
        </trans-unit>
        <trans-unit id="740b034935c3cbdf1dde371e0af19631b0527f97" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;describe-function&lt;/code&gt;) for a function.</source>
          <target state="translated">（ &lt;code&gt;describe-function&lt;/code&gt; ）関数の場合。</target>
        </trans-unit>
        <trans-unit id="361879d4baa9f1223fefd18765e48c74241c0c7e" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;describe-package&lt;/code&gt;), following the package&amp;rsquo;s brief description and installation status. It normally spans multiple lines, and should fully describe the package&amp;rsquo;s capabilities and how to begin using it once it is installed.</source>
          <target state="translated">（ &lt;code&gt;describe-package&lt;/code&gt; ）、パッケージの簡単な説明とインストールステータスに従います。通常は複数行にまたがっており、パッケージの機能と、インストール後に使用を開始する方法を完全に説明する必要があります。</target>
        </trans-unit>
        <trans-unit id="0d90a1dc54b79002bf44d9632619588f61f6c4e1" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;dired-clean-directory&lt;/code&gt;). That&amp;rsquo;s the same thing &lt;code&gt;kept-new-versions&lt;/code&gt; specifies when you make a new backup file. The default is 2.</source>
          <target state="translated">（ &lt;code&gt;dired-clean-directory&lt;/code&gt; ）。これは、 &lt;code&gt;kept-new-versions&lt;/code&gt; が新しいバックアップファイルを作成するときに指定するものと同じです。デフォルトは2です。</target>
        </trans-unit>
        <trans-unit id="4bb1adb9281e7d020ff8780a79f20e07873f5e64" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;display-bindings&lt;/code&gt;), since the main use of this prefix key is for mode-specific bindings.</source>
          <target state="translated">（ &lt;code&gt;display-bindings&lt;/code&gt; ）。このプレフィックスキーの主な用途はモード固有のバインディングであるためです。</target>
        </trans-unit>
        <trans-unit id="7ad92bba8bac6c3fab512955948832c5457c615f" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;display-bindings&lt;/code&gt;), where it describes the main use of the</source>
          <target state="translated">（ &lt;code&gt;display-bindings&lt;/code&gt; ）、ここでは、</target>
        </trans-unit>
        <trans-unit id="6cf6a219d97ea532dcd6c2484a195a07565bad33" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;edebug-display-freq-count&lt;/code&gt;) to display both the coverage information and the frequency counts for a definition. Just</source>
          <target state="translated">（ &lt;code&gt;edebug-display-freq-count&lt;/code&gt; ）は、定義のカバレッジ情報と頻度カウントの両方を表示します。ただ</target>
        </trans-unit>
        <trans-unit id="f09a553bf50d8983fa2e1b39d83e2a024e45ea86" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;edebug-instrument-callee&lt;/code&gt;) instruments the definition of the function or macro called by the list form after point, if it is not already instrumented. This is possible only if Edebug knows where to find the source for that function; for this reason, after loading Edebug, &lt;code&gt;eval-region&lt;/code&gt; records the position of every definition it evaluates, even if not instrumenting it. See also the</source>
          <target state="translated">（ &lt;code&gt;edebug-instrument-callee&lt;/code&gt; ）は、まだインスツルメントされていない場合、ポイントの後にリストフォームによって呼び出される関数またはマクロの定義をインストルメントします。これは、Edebugがその関数のソースを見つける場所を知っている場合にのみ可能です。このため、Edebugをロードした後、 &lt;code&gt;eval-region&lt;/code&gt; は、インストルメント化していない場合でも、評価するすべての定義の位置を記録します。も参照してください</target>
        </trans-unit>
        <trans-unit id="d69ee4faa7a9df650d3a2ee0c5b823d88d505eac" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;edebug-set-initial-mode&lt;/code&gt;). See &lt;a href=&quot;edebug-execution-modes#Edebug-Execution-Modes&quot;&gt;Edebug Execution Modes&lt;/a&gt;.</source>
          <target state="translated">（ &lt;code&gt;edebug-set-initial-mode&lt;/code&gt; ）。&lt;a href=&quot;edebug-execution-modes#Edebug-Execution-Modes&quot;&gt;Edebug実行モードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8fec78c3510d8b0be46e3b64324da65d8edb04d5" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;edebug-set-initial-mode&lt;/code&gt;):</source>
          <target state="translated">(&lt;code&gt;edebug-set-initial-mode&lt;/code&gt;):</target>
        </trans-unit>
        <trans-unit id="83587ec6a0c832834e1e8f4e14e17d1d0a69f8da" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;edebug-temp-display-freq-count&lt;/code&gt;) displays the same information temporarily, only until you type another key.</source>
          <target state="translated">（ &lt;code&gt;edebug-temp-display-freq-count&lt;/code&gt; ）は、別のキーを入力するまで、同じ情報を一時的に表示します。</target>
        </trans-unit>
        <trans-unit id="8a4b2db1825bf5709210fde987eb4d55d7a73269" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;edebug-update-eval-list&lt;/code&gt;) rebuilds the evaluation list, scanning the buffer and using the first expression of each group. (The idea is that the second expression of the group is the value previously computed and displayed.)</source>
          <target state="translated">（ &lt;code&gt;edebug-update-eval-list&lt;/code&gt; ）は、評価リストを再構築し、バッファーをスキャンして、各グループの最初の式を使用します。（グループの2番目の式は、以前に計算および表示された値であるという考え方です。）</target>
        </trans-unit>
        <trans-unit id="63d17b05f8e2dd85d78721c4368319535f3f580c" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;edebug-visit-eval-list&lt;/code&gt;).</source>
          <target state="translated">(&lt;code&gt;edebug-visit-eval-list&lt;/code&gt;).</target>
        </trans-unit>
        <trans-unit id="c9a3ceb4283bee610278cbf32d651f6412634f3c" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;edebug-where&lt;/code&gt;) to move point there, and then type</source>
          <target state="translated">（ &lt;code&gt;edebug-where&lt;/code&gt; ）ポイントをそこに移動し、次のように入力します</target>
        </trans-unit>
        <trans-unit id="34a37fbadf9f311136deca164af7dda68ddadc7c" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;end-of-defun&lt;/code&gt;) to move there, since that too will fail to work until the defun is balanced.</source>
          <target state="translated">（ &lt;code&gt;end-of-defun&lt;/code&gt; ）そこに移動します。これも、defunのバランスがとれるまで機能しません。</target>
        </trans-unit>
        <trans-unit id="069d038fa487a150d9c81374523d8f46d4980e8e" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;end-of-defun&lt;/code&gt;, see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Moving-by-Defuns.html#Moving-by-Defuns&quot;&gt;Moving by Defuns&lt;/a&gt; in</source>
          <target state="translated">（ &lt;code&gt;end-of-defun&lt;/code&gt; 参照してください&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Moving-by-Defuns.html#Moving-by-Defuns&quot;&gt;Defunsで移動&lt;/a&gt;中</target>
        </trans-unit>
        <trans-unit id="0a68ae59982c8b45a2fd1fad0b7f74df3824bbef" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;eval-defun&lt;/code&gt; with a prefix argument). See &lt;a href=&quot;instrumenting#Instrumenting&quot;&gt;Instrumenting&lt;/a&gt;, for alternative ways to instrument code.</source>
          <target state="translated">（接頭辞引数付きの &lt;code&gt;eval-defun&lt;/code&gt; ）。コードをインストルメントする別の方法については、&lt;a href=&quot;instrumenting#Instrumenting&quot;&gt;インストルメンテーションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="12069c528422ffc29a95633b0435727f408c7268" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;eval-defun&lt;/code&gt;) with a prefix argument on a function definition, it instruments the definition before evaluating it. (This does not modify the source code itself.) If the variable &lt;code&gt;edebug-all-defs&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, that inverts the meaning of the prefix argument: in this case,</source>
          <target state="translated">（ &lt;code&gt;eval-defun&lt;/code&gt; ）関数定義にプレフィックス引数を付けて、評価する前に定義をインストルメントします。（これはソースコード自体を変更しません。）変数 &lt;code&gt;edebug-all-defs&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の場合、プレフィックス引数の意味が逆になります。この場合、</target>
        </trans-unit>
        <trans-unit id="4fedc5b77d15f0147d4d36f8492491644651b00e" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;eval-defun&lt;/code&gt;, a Lisp mode key binding). &lt;strong&gt;Warning:&lt;/strong&gt; if you do this for temporary debugging purposes, be sure to undo this insertion before you save the file!</source>
          <target state="translated">（ &lt;code&gt;eval-defun&lt;/code&gt; 、Lispモードのキーバインディング）。&lt;strong&gt;警告：&lt;/strong&gt;一時的なデバッグ目的でこれを行う場合は、ファイルを保存する前に、必ずこの挿入を元に戻してください。</target>
        </trans-unit>
        <trans-unit id="9621cb6485f91bfb7496f8fa0055569d8c7dfee8" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;eval-expression&lt;/code&gt;) and when processing the</source>
          <target state="translated">（ &lt;code&gt;eval-expression&lt;/code&gt; ）および処理時</target>
        </trans-unit>
        <trans-unit id="4536fa0a23bbecf146727bcea90c618f590602ac" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;exit-recursive-edit&lt;/code&gt;) does this. Throwing a &lt;code&gt;t&lt;/code&gt; value causes &lt;code&gt;recursive-edit&lt;/code&gt; to quit, so that control returns to the command loop one level up. This is called &lt;em&gt;aborting&lt;/em&gt;, and is done by</source>
          <target state="translated">（ &lt;code&gt;exit-recursive-edit&lt;/code&gt; ）はこれを行います。投げる &lt;code&gt;t&lt;/code&gt; 値は、原因となる &lt;code&gt;recursive-edit&lt;/code&gt; 1つ上のレベルのコマンドループに制御が戻ることを、終了します。これは&lt;em&gt;中止&lt;/em&gt;と呼ばれ、によって行われます</target>
        </trans-unit>
        <trans-unit id="0576ea6c0dbb6d4d070277c9c2026745e9da1bb2" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;font-lock-fontify-block&lt;/code&gt;).</source>
          <target state="translated">(&lt;code&gt;font-lock-fontify-block&lt;/code&gt;).</target>
        </trans-unit>
        <trans-unit id="18d13345fe58077b2b840f6700a5491e9d9a3fab" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;forward-char&lt;/code&gt;) moves point unhesitatingly into hidden text. However, the replacement of newline characters with carriage return characters affects some editing commands. For example, &lt;code&gt;next-line&lt;/code&gt; skips hidden lines, since it searches only for newlines. Modes that use selective display can also define commands that take account of the newlines, or that control which parts of the text are hidden.</source>
          <target state="translated">（ &lt;code&gt;forward-char&lt;/code&gt; ）は、ポイントを隠しテキストにためらうことなく移動します。ただし、改行文字をキャリッジリターン文字に置き換えると、一部の編集コマンドに影響します。たとえば、 &lt;code&gt;next-line&lt;/code&gt; は改行のみを検索するため、非表示の行をスキップします。選択的表示を使用するモードでは、改行を考慮したコマンド、またはテキストのどの部分を非表示にするかを制御するコマンドを定義することもできます。</target>
        </trans-unit>
        <trans-unit id="75187f2d3d4323af398d0fe1824a00cbee09fb34" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;forward-sexp&lt;/code&gt;, see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Expressions.html#Expressions&quot;&gt;Expressions&lt;/a&gt; in</source>
          <target state="translated">（ &lt;code&gt;forward-sexp&lt;/code&gt; 、の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Expressions.html#Expressions&quot;&gt;式&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="3a182ee44f0a5f60aff29d2e46cb12af9bf119e6" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;indent-for-tab-command&lt;/code&gt;) command. If the value is &lt;code&gt;t&lt;/code&gt; (the default), the command normally just indents the current line. If the value is &lt;code&gt;nil&lt;/code&gt;, the command indents the current line only if point is at the left margin or in the line&amp;rsquo;s indentation; otherwise, it inserts a tab character. If the value is &lt;code&gt;complete&lt;/code&gt;, the command first tries to indent the current line, and if the line was already indented, it calls &lt;code&gt;completion-at-point&lt;/code&gt; to complete the text at point (see &lt;a href=&quot;completion-in-buffers#Completion-in-Buffers&quot;&gt;Completion in Buffers&lt;/a&gt;).</source>
          <target state="translated">（ &lt;code&gt;indent-for-tab-command&lt;/code&gt; ）コマンド。値が &lt;code&gt;t&lt;/code&gt; （デフォルト）の場合、コマンドは通常、現在の行をインデントするだけです。値が &lt;code&gt;nil&lt;/code&gt; の場合、コマンドは、ポイントが左マージンまたは行のインデントにある場合にのみ、現在の行をインデントします。それ以外の場合は、タブ文字を挿入します。値が &lt;code&gt;complete&lt;/code&gt; 場合、コマンドは最初に現在の行をインデントしようとし、行がすでにインデントされている場合は、 &lt;code&gt;completion-at-point&lt;/code&gt; を呼び出して、ポイントでテキストを完成させます（「&lt;a href=&quot;completion-in-buffers#Completion-in-Buffers&quot;&gt;バッファーでの完了」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="059558b470d0a3087d9942b079d5d123b926c71b" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;indent-pp-sexp&lt;/code&gt;) at the beginning of the defun. A range of lines will probably shift left; if so, the missing open parenthesis or spurious close parenthesis is probably near the first of those lines. (However, don&amp;rsquo;t assume this is true; study the code to make sure.) Once you have found the discrepancy, undo the</source>
          <target state="translated">（ &lt;code&gt;indent-pp-sexp&lt;/code&gt; ）defunの開始時。線の範囲はおそらく左にシフトします。もしそうなら、欠落している開き括弧または偽の閉じ括弧は、おそらくそれらの行の最初の近くにあります。（ただし、これが当てはまるとは限りません。コードを調べて確認してください。）不一致を見つけたら、元に戻します。</target>
        </trans-unit>
        <trans-unit id="4e3464f9d4e7d903682ed0c920dbee7e8468a206" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;indent-pp-sexp&lt;/code&gt;, see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Multi_002dline-Indent.html#Multi_002dline-Indent&quot;&gt;Multi-line Indent&lt;/a&gt; in</source>
          <target state="translated">（ &lt;code&gt;indent-pp-sexp&lt;/code&gt; 、参照&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Multi_002dline-Indent.html#Multi_002dline-Indent&quot;&gt;マルチラインインデント&lt;/a&gt;での</target>
        </trans-unit>
        <trans-unit id="c244d556639ec6e57f8159952332254d4820f8a0" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;kbd-macro-query&lt;/code&gt;).</source>
          <target state="translated">(&lt;code&gt;kbd-macro-query&lt;/code&gt;).</target>
        </trans-unit>
        <trans-unit id="b98f990aef5298be7eabc9558464eec34d2a71b2" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;kmacro-edit-macro&lt;/code&gt;) command; in particular, you must surround function key names with &amp;lsquo;</source>
          <target state="translated">（ &lt;code&gt;kmacro-edit-macro&lt;/code&gt; ）コマンド; 特に、ファンクションキー名は 'で囲む必要があります</target>
        </trans-unit>
        <trans-unit id="7630a8cfd9a78274f5209735a446539830fb0654" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;minibuffer-complete&lt;/code&gt;), Emacs extends the name as far as it can.</source>
          <target state="translated">（ &lt;code&gt;minibuffer-complete&lt;/code&gt; ）、Emacsは名前を可能な限り拡張します。</target>
        </trans-unit>
        <trans-unit id="dfa0a924fd5af63f1ed64781eceb79fddd80e302" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;other-window&lt;/code&gt;) to select some other window, it moves through live windows in a specific order. For any given configuration of windows, this order never varies. It is called the &lt;em&gt;cyclic ordering of windows&lt;/em&gt;.</source>
          <target state="translated">（ &lt;code&gt;other-window&lt;/code&gt; ）他のウィンドウを選択するには、ライブウィンドウを特定の順序で移動します。Windowsの特定の構成では、この順序は決して変わりません。これは&lt;em&gt;、ウィンドウ&lt;/em&gt;の&lt;em&gt;循環順序付け&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="017cb8b82c0ddef5c6f2193de4290a09e0be5be0" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;save-buffers-kill-terminal&lt;/code&gt;). See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Exiting.html#Exiting&quot;&gt;Exiting&lt;/a&gt; in</source>
          <target state="translated">（ &lt;code&gt;save-buffers-kill-terminal&lt;/code&gt; ）。で&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Exiting.html#Exiting&quot;&gt;終了&lt;/a&gt;するを参照してください</target>
        </trans-unit>
        <trans-unit id="440956cbb48fb5fbf0713447ce0ea8a97410f378" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;switch-to-buffer&lt;/code&gt;) and then type the first few letters of the name of the buffer to which you wish to switch, and then type</source>
          <target state="translated">（ &lt;code&gt;switch-to-buffer&lt;/code&gt; ）次に、切り替え先のバッファー名の最初の数文字を入力してから、</target>
        </trans-unit>
        <trans-unit id="734a207cf7bcb26532f691a76b25f1895de7079e" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;switch-to-buffer&lt;/code&gt;), the new buffer is put in the major mode of the previously current buffer. As an exception, if the major mode of the previous buffer has a &lt;code&gt;mode-class&lt;/code&gt; symbol property with value &lt;code&gt;special&lt;/code&gt;, the new buffer is put in Fundamental mode (see &lt;a href=&quot;major-mode-conventions#Major-Mode-Conventions&quot;&gt;Major Mode Conventions&lt;/a&gt;).</source>
          <target state="translated">（ &lt;code&gt;switch-to-buffer&lt;/code&gt; ）、新しいバッファは以前の現在のバッファのメジャーモードになります。例外として、前のバッファのメジャーモードに値 &lt;code&gt;special&lt;/code&gt; の &lt;code&gt;mode-class&lt;/code&gt; シンボルプロパティがある場合、新しいバッファは基本モードになります（&lt;a href=&quot;major-mode-conventions#Major-Mode-Conventions&quot;&gt;メジャーモードの規則を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="852f21db3aabffffe9911c1ff687b3ddc740499d" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;timer-list-cancel&lt;/code&gt;) that will cancel the timer on the line under point.</source>
          <target state="translated">（ &lt;code&gt;timer-list-cancel&lt;/code&gt; ）ポイントの下の行のタイマーをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="186fd4236f28d3428e47c7edbfe0261b0fe96c49" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;undo&lt;/code&gt;), since the old indentation is probably appropriate to the intended parentheses.</source>
          <target state="translated">（ &lt;code&gt;undo&lt;/code&gt; ）、古いインデントはおそらく意図された括弧に適切であるためです。</target>
        </trans-unit>
        <trans-unit id="cdae63d07f404492d9cce97a177b919021d3347f" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;universal-coding-system-argument&lt;/code&gt;) and specify &amp;lsquo;</source>
          <target state="translated">（ &lt;code&gt;universal-coding-system-argument&lt;/code&gt; ）および指定 '</target>
        </trans-unit>
        <trans-unit id="b3d5a45272297a43c8c518ef8ee8149f234076c0" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;universal-coding-system-argument&lt;/code&gt;) works by binding &lt;code&gt;coding-system-for-write&lt;/code&gt;, and Emacs should obey user selection. If a Lisp program binds &lt;code&gt;coding-system-for-write&lt;/code&gt; to a value that might not be safe for encoding the text to be written, it can also bind &lt;code&gt;coding-system-require-warning&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; value, which will force the output primitives to check the encoding by calling the value of &lt;code&gt;select-safe-coding-system-function&lt;/code&gt; even though &lt;code&gt;coding-system-for-write&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;. Alternatively, call &lt;code&gt;select-safe-coding-system&lt;/code&gt; explicitly before using the specified encoding.</source>
          <target state="translated">（ &lt;code&gt;universal-coding-system-argument&lt;/code&gt; ）は &lt;code&gt;coding-system-for-write&lt;/code&gt; をバインドすることで機能し、Emacsはユーザーの選択に従う必要があります。Lispプログラムが &lt;code&gt;coding-system-for-write&lt;/code&gt; を、書き込むテキストをエンコードするのに安全ではない可能性のある値にバインドする場合、 &lt;code&gt;coding-system-require-warning&lt;/code&gt; を &lt;code&gt;nil&lt;/code&gt; 以外の値にバインドすることもできます。これにより、強制的に &lt;code&gt;coding-system-for-write&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の &lt;code&gt;select-safe-coding-system-function&lt;/code&gt; でも、select-safe-coding-system-functionの値を呼び出してエンコーディングをチェックするプリミティブを出力します。または、指定されたエンコーディングを使用する前に、 &lt;code&gt;select-safe-coding-system&lt;/code&gt; を明示的に呼び出します。</target>
        </trans-unit>
        <trans-unit id="826346b927705138c21f8da99aa96f6ce39a7ffa" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;yank-pop&lt;/code&gt;).</source>
          <target state="translated">(&lt;code&gt;yank-pop&lt;/code&gt;).</target>
        </trans-unit>
        <trans-unit id="ea81403f9ddefa112baedefc5b8ece579249316d" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;yank&lt;/code&gt;) immediately followed by</source>
          <target state="translated">（ &lt;code&gt;yank&lt;/code&gt; ）直後に続く</target>
        </trans-unit>
        <trans-unit id="905f108a0fc13fbe61b6a2de013d658c7e2c26c7" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;JavaScript Object Notation&lt;/em&gt;) support, it provides several functions to convert between Lisp objects and JSON values. Any JSON value can be converted to a Lisp object, but not vice versa. Specifically:</source>
          <target state="translated">（&lt;em&gt;JavaScript Object Notation&lt;/em&gt;）のサポート。LispオブジェクトとJSON値の間で変換するいくつかの関数を提供します。JSON値はLispオブジェクトに変換できますが、その逆はできません。具体的には：</target>
        </trans-unit>
        <trans-unit id="258cf028ecc1ad2f169b333d5b5c9867d653d25f" translate="yes" xml:space="preserve">
          <source>(&lt;var&gt;name&lt;/var&gt;&lt;var&gt;size&lt;/var&gt;&lt;var&gt;used&lt;/var&gt;)</source>
          <target state="translated">(&lt;var&gt;name&lt;/var&gt;&lt;var&gt;size&lt;/var&gt;&lt;var&gt;used&lt;/var&gt;)</target>
        </trans-unit>
        <trans-unit id="0706df67f0840c13147810fdc4a37dba93b9296b" translate="yes" xml:space="preserve">
          <source>(&lt;var&gt;name&lt;/var&gt;&lt;var&gt;size&lt;/var&gt;&lt;var&gt;used&lt;/var&gt;&lt;var&gt;free&lt;/var&gt;)</source>
          <target state="translated">(&lt;var&gt;name&lt;/var&gt;&lt;var&gt;size&lt;/var&gt;&lt;var&gt;used&lt;/var&gt;&lt;var&gt;free&lt;/var&gt;)</target>
        </trans-unit>
        <trans-unit id="bb2ab752a93f2b3cee4a56ee6003cc4a526ad1b9" translate="yes" xml:space="preserve">
          <source>(&lt;var&gt;variable&lt;/var&gt; . &lt;var&gt;startpos&lt;/var&gt;)</source>
          <target state="translated">（ &lt;var&gt;variable&lt;/var&gt; 。 &lt;var&gt;startpos&lt;/var&gt; ）</target>
        </trans-unit>
        <trans-unit id="eec0c430beb7f790d88f7a69d30cdd77ba0e1c7c" translate="yes" xml:space="preserve">
          <source>(&lt;var&gt;width&lt;/var&gt;&lt;var&gt;height&lt;/var&gt;)</source>
          <target state="translated">(&lt;var&gt;width&lt;/var&gt;&lt;var&gt;height&lt;/var&gt;)</target>
        </trans-unit>
        <trans-unit id="aa73839d3eb6099df7cd47a7612f305c910d91e0" translate="yes" xml:space="preserve">
          <source>(&lt;var&gt;x&lt;/var&gt;&lt;var&gt;y&lt;/var&gt;&lt;var&gt;width&lt;/var&gt;&lt;var&gt;height&lt;/var&gt;)</source>
          <target state="translated">(&lt;var&gt;x&lt;/var&gt;&lt;var&gt;y&lt;/var&gt;&lt;var&gt;width&lt;/var&gt;&lt;var&gt;height&lt;/var&gt;)</target>
        </trans-unit>
        <trans-unit id="40c0f523f5f1e9c4a05077a7af0277d8eeb61901" translate="yes" xml:space="preserve">
          <source>(Application Programming Interface) defined and documented in the header file</source>
          <target state="translated">（アプリケーションプログラミングインターフェイス）ヘッダーファイルで定義および文書化</target>
        </trans-unit>
        <trans-unit id="f40d8814f1414c949b4462ef99ca7a3de65dab7c" translate="yes" xml:space="preserve">
          <source>(In this and the following examples, replace</source>
          <target state="translated">（この例と次の例では、</target>
        </trans-unit>
        <trans-unit id="29bfa1d6d3398320644f775b0b8be618a36cfe69" translate="yes" xml:space="preserve">
          <source>(In this case, the index returned is a buffer position; the first character of the buffer counts as 1.)</source>
          <target state="translated">（この場合、返されるインデックスはバッファー位置です。バッファーの最初の文字は1としてカウントされます。）</target>
        </trans-unit>
        <trans-unit id="88b75919331fd3484b0ad066bf3acbdebad1ba20" translate="yes" xml:space="preserve">
          <source>(Internally, the lexical environment is an alist of symbol-value pairs, with the final element in the alist being the symbol &lt;code&gt;t&lt;/code&gt; rather than a cons cell. Such an alist can be passed as the second argument to the &lt;code&gt;eval&lt;/code&gt; function, in order to specify a lexical environment in which to evaluate a form. See &lt;a href=&quot;eval#Eval&quot;&gt;Eval&lt;/a&gt;. Most Emacs Lisp programs, however, should not interact directly with lexical environments in this way; only specialized programs like debuggers.)</source>
          <target state="translated">（内部的には、字句環境は記号と値のペアのリストであり、リストの最後の要素はconsセルではなく記号 &lt;code&gt;t&lt;/code&gt; です。このようなリストは、 &lt;code&gt;eval&lt;/code&gt; 関数の2番目の引数として渡すことができます。。フォームを評価するにはレキシカル環境の指定を参照してください&lt;a href=&quot;eval#Eval&quot;&gt;評価&lt;/a&gt;。ほとんどのEmacs Lispプログラムは、しかし、ではない相互作用を直接べきで、このように字句環境と、デバッガなどの唯一の専門プログラム）。</target>
        </trans-unit>
        <trans-unit id="38286f5ce7f65f5286c3070ba523832996be7bbe" translate="yes" xml:space="preserve">
          <source>(New file)</source>
          <target state="translated">（新しいファイル）</target>
        </trans-unit>
        <trans-unit id="80c561e8d30e05008668bb423efdbbafef3ad412" translate="yes" xml:space="preserve">
          <source>(Note that the &lt;small&gt;CDR&lt;/small&gt; of this list is a lambda expression.) This macro object is stored in the function cell of &lt;var&gt;name&lt;/var&gt;. The meaning of &lt;var&gt;args&lt;/var&gt; is the same as in a function, and the keywords &lt;code&gt;&amp;amp;rest&lt;/code&gt; and &lt;code&gt;&amp;amp;optional&lt;/code&gt; may be used (see &lt;a href=&quot;argument-list#Argument-List&quot;&gt;Argument List&lt;/a&gt;). Neither &lt;var&gt;name&lt;/var&gt; nor &lt;var&gt;args&lt;/var&gt; should be quoted. The return value of &lt;code&gt;defmacro&lt;/code&gt; is undefined.</source>
          <target state="translated">（このリストの&lt;small&gt;CDR&lt;/small&gt;はラムダ式であることに注意してください。）このマクロオブジェクトは、 &lt;var&gt;name&lt;/var&gt; の関数セルに格納されます。 &lt;var&gt;args&lt;/var&gt; の意味は関数の場合と同じであり、キーワード &lt;code&gt;&amp;amp;rest&lt;/code&gt; および &lt;code&gt;&amp;amp;optional&lt;/code&gt; を使用できます（&lt;a href=&quot;argument-list#Argument-List&quot;&gt;引数リストを&lt;/a&gt;参照）。どちらの &lt;var&gt;name&lt;/var&gt; も &lt;var&gt;args&lt;/var&gt; 引用符で囲む必要があります。 &lt;code&gt;defmacro&lt;/code&gt; の戻り値は未定義です。</target>
        </trans-unit>
        <trans-unit id="9c80acf240bd3970f9277d522549217e76f774c1" translate="yes" xml:space="preserve">
          <source>(See &lt;code&gt;switch-to-buffer&lt;/code&gt; in &lt;a href=&quot;switching-buffers#Switching-Buffers&quot;&gt;Switching Buffers&lt;/a&gt;.)</source>
          <target state="translated">（参照 &lt;code&gt;switch-to-buffer&lt;/code&gt; で&lt;a href=&quot;switching-buffers#Switching-Buffers&quot;&gt;バッファを切り替えます&lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="821773db32b91b9f4bdddf26ea974a732e3681a7" translate="yes" xml:space="preserve">
          <source>(Shell:run)</source>
          <target state="translated">(Shell:run)</target>
        </trans-unit>
        <trans-unit id="60e2994049eb942c34cc6da4c8d819d20e369086" translate="yes" xml:space="preserve">
          <source>(The ellipsis &amp;lsquo;</source>
          <target state="translated">（省略記号 '</target>
        </trans-unit>
        <trans-unit id="ac62bda9f101ee60d925d4499778c013fbb2ac0a" translate="yes" xml:space="preserve">
          <source>(The variables &lt;code&gt;line-number-mode&lt;/code&gt;, &lt;code&gt;column-number-mode&lt;/code&gt; and &lt;code&gt;which-func-mode&lt;/code&gt; enable particular minor modes; as usual, these variable names are also the minor mode command names.)</source>
          <target state="translated">（変数 &lt;code&gt;line-number-mode&lt;/code&gt; 、 &lt;code&gt;column-number-mode&lt;/code&gt; 、および &lt;code&gt;which-func-mode&lt;/code&gt; は、特定のマイナーモードを有効にします。通常どおり、これらの変数名はマイナーモードコマンド名でもあります。）</target>
        </trans-unit>
        <trans-unit id="96ee79fadbf19bf35bcb5af0fbcdc7e445756bb5" translate="yes" xml:space="preserve">
          <source>(To silence byte-compiler warnings about unused variables, just use a variable name that starts with an underscore. The byte-compiler interprets this as an indication that this is a variable known not to be used.)</source>
          <target state="translated">（未使用の変数に関するバイトコンパイラの警告を消音するには、アンダースコアで始まる変数名を使用します。バイトコンパイラは、これが使用されていないことがわかっている変数であることを示すものとして解釈します。）</target>
        </trans-unit>
        <trans-unit id="6a37f8d47f88018745a1d4d859201b574654a8ac" translate="yes" xml:space="preserve">
          <source>(Transport Layer Security) connection.</source>
          <target state="translated">（トランスポート層セキュリティ）接続。</target>
        </trans-unit>
        <trans-unit id="44f8b7b7a370f875f5899b978bfb21f49cf1859c" translate="yes" xml:space="preserve">
          <source>(a . (b))</source>
          <target state="translated">（a。（b））</target>
        </trans-unit>
        <trans-unit id="f3f59b60231e6c33e27c252046033b9e1191f3a7" translate="yes" xml:space="preserve">
          <source>(a . 5)</source>
          <target state="translated">（a .5）</target>
        </trans-unit>
        <trans-unit id="752848797c854b8af57db419ecd8c1fe5c00fa6f" translate="yes" xml:space="preserve">
          <source>(a b)</source>
          <target state="translated">（ab）</target>
        </trans-unit>
        <trans-unit id="c77b7e4b36d6e7cb4e46b368349cd6c80d618080" translate="yes" xml:space="preserve">
          <source>(an integer); that allows you to send signals to processes that are not children of Emacs. See &lt;a href=&quot;system-processes#System-Processes&quot;&gt;System Processes&lt;/a&gt;.</source>
          <target state="translated">（整数）; これにより、Emacsの子ではないプロセスにシグナルを送信できます。&lt;a href=&quot;system-processes#System-Processes&quot;&gt;システムプロセスを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7634eb19ab6a83b09060922e4bfa27adad033ad9" translate="yes" xml:space="preserve">
          <source>(apostrophe) stands for a right quote. This generates a right single quotation mark or an apostrophe depending on the value of &lt;code&gt;text-quoting-style&lt;/code&gt;.</source>
          <target state="translated">（アポストロフィ）は正しい引用を表します。これにより、 &lt;code&gt;text-quoting-style&lt;/code&gt; の値に応じて、右引用符またはアポストロフィが生成されます。</target>
        </trans-unit>
        <trans-unit id="49df1c4d6ddf8623c038723b9f7b51eb792e71f0" translate="yes" xml:space="preserve">
          <source>(compiled; note, source is newer)</source>
          <target state="translated">（コンパイル済み。ソースは新しいことに注意してください）</target>
        </trans-unit>
        <trans-unit id="b4b11101a472ba50a9408019f325ea89b71aa318" translate="yes" xml:space="preserve">
          <source>(debug)</source>
          <target state="translated">(debug)</target>
        </trans-unit>
        <trans-unit id="315c82c8a05a0195a20701755571d7e19d2e0d5f" translate="yes" xml:space="preserve">
          <source>(document object model):</source>
          <target state="translated">（ドキュメントオブジェクトモデル）：</target>
        </trans-unit>
        <trans-unit id="4311f9cae0dc679a7cc182285961309a6ce14f93" translate="yes" xml:space="preserve">
          <source>(double the backslashes in Lisp strings).</source>
          <target state="translated">（Lispストリングのバックスラッシュを2倍にする）。</target>
        </trans-unit>
        <trans-unit id="84fae69de84d42f2c2ff8baf9a07eb9745bf9c6f" translate="yes" xml:space="preserve">
          <source>(file &lt;var&gt;filename&lt;/var&gt;)</source>
          <target state="translated">（ファイルファイル &lt;var&gt;filename&lt;/var&gt; ）</target>
        </trans-unit>
        <trans-unit id="c2fccc3de2d90ef363a4fbd14678f63b995c43c3" translate="yes" xml:space="preserve">
          <source>(file-query &lt;var&gt;filename&lt;/var&gt;&lt;var&gt;position&lt;/var&gt;)</source>
          <target state="translated">（ファイルクエリ &lt;var&gt;filename&lt;/var&gt; &lt;var&gt;position&lt;/var&gt; ）</target>
        </trans-unit>
        <trans-unit id="b1fb49a3263a25153d18fe4b9a1ac5b5438e42ed" translate="yes" xml:space="preserve">
          <source>(fn)</source>
          <target state="translated">(fn)</target>
        </trans-unit>
        <trans-unit id="5ad79fb0d27d755bdd16802033cb504810714523" translate="yes" xml:space="preserve">
          <source>(grave accent) stands for a left quote. This generates a left single quotation mark, an apostrophe, or a grave accent depending on the value of &lt;code&gt;text-quoting-style&lt;/code&gt;. See &lt;a href=&quot;text-quoting-style#Text-Quoting-Style&quot;&gt;Text Quoting Style&lt;/a&gt;.</source>
          <target state="translated">（アクサングラーブ）は左引用符を表します。これにより、 &lt;code&gt;text-quoting-style&lt;/code&gt; の値に応じて、左一重引用符、アポストロフィ、またはアクサングラーブが生成されます。&lt;a href=&quot;text-quoting-style#Text-Quoting-Style&quot;&gt;テキスト引用スタイルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4c8306629e6f12f78ef0b0f55459408d40919a4b" translate="yes" xml:space="preserve">
          <source>(much like the way the menu bar is controlled). So you define a tool bar item using &lt;code&gt;define-key&lt;/code&gt;, like this:</source>
          <target state="translated">（メニューバーの制御方法とよく似ています）。したがって、次のように、 &lt;code&gt;define-key&lt;/code&gt; を使用してツールバーアイテムを定義します。</target>
        </trans-unit>
        <trans-unit id="7739136dc697141cd8d76585cab6736b910f012b" translate="yes" xml:space="preserve">
          <source>(or</source>
          <target state="translated">(or</target>
        </trans-unit>
        <trans-unit id="377f179340caaa760087487edbe34af88115de6a" translate="yes" xml:space="preserve">
          <source>(or whatever is currently the value of &lt;code&gt;meta-prefix-char&lt;/code&gt;). Thus, the key</source>
          <target state="translated">（または現在 &lt;code&gt;meta-prefix-char&lt;/code&gt; の値であるものは何でも）。したがって、鍵</target>
        </trans-unit>
        <trans-unit id="0db8549c1f910da7f3c9adafb7e0c72c4760527a" translate="yes" xml:space="preserve">
          <source>(period) to act on the current object and then exit; or</source>
          <target state="translated">（期間）現在のオブジェクトに作用してから終了します。または</target>
        </trans-unit>
        <trans-unit id="6ef0b111c345816525a69085924018c995a04259" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;directory-names#abbreviate_002dfile_002dname&quot;&gt;abbreviate-file-name&lt;/a&gt;), and eliminating redundancies like</source>
          <target state="translated">（&lt;a href=&quot;directory-names#abbreviate_002dfile_002dname&quot;&gt;省略形ファイル名を&lt;/a&gt;参照）、および次のような冗長性を排除します</target>
        </trans-unit>
        <trans-unit id="943fdbeb9be9997a6dc5392484c5f87e816ccfaf" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;non_002dascii-characters#Non_002dASCII-Characters&quot;&gt;Non-ASCII Characters&lt;/a&gt;). Characters that represent keyboard input have a much wider range, to encode modifier keys such as Control, Meta and Shift.</source>
          <target state="translated">（&lt;a href=&quot;non_002dascii-characters#Non_002dASCII-Characters&quot;&gt;非ASCII文字を&lt;/a&gt;参照）。キーボード入力を表す文字は、Control、Meta、Shiftなどの修飾キーをエンコードするためにはるかに広い範囲を持っています。</target>
        </trans-unit>
        <trans-unit id="4c1ad032690b4d35651b3c82e19652c9c12c67fb" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;quitting#Quitting&quot;&gt;Quitting&lt;/a&gt;). The following function, which is available since Emacs 26.1, is provided for that purpose.</source>
          <target state="translated">（&lt;a href=&quot;quitting#Quitting&quot;&gt;終了を&lt;/a&gt;参照）。そのために、Emacs26.1以降で利用できる以下の機能が提供されています。</target>
        </trans-unit>
        <trans-unit id="2df9c4c74e30edf93d4baadda4992e6091eb99bb" translate="yes" xml:space="preserve">
          <source>(see below)&amp;mdash;the valid values are &lt;code&gt;'string&lt;/code&gt; and &lt;code&gt;'integer&lt;/code&gt;. The latter is the default, but we plan to change that, so you should specify a non-&lt;code&gt;nil&lt;/code&gt; value for &lt;var&gt;id-format&lt;/var&gt; if you use the returned</source>
          <target state="translated">（以下を参照）-有効な値は &lt;code&gt;'string&lt;/code&gt; および &lt;code&gt;'integer&lt;/code&gt; です。後者がデフォルトですが、これを変更する予定なので、返された値を使用する場合は、 &lt;var&gt;id-format&lt;/var&gt; に &lt;code&gt;nil&lt;/code&gt; 以外の値を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="bef3d6c70c291ea68bbd3a2248f77782001a83c7" translate="yes" xml:space="preserve">
          <source>(the &amp;lsquo;</source>
          <target state="translated">（ '</target>
        </trans-unit>
        <trans-unit id="d7457f0b7e386400081654bd498fa4f1c8375ea3" translate="yes" xml:space="preserve">
          <source>(the actual value also contains a menu binding, which is omitted here for the sake of brevity).</source>
          <target state="translated">（実際の値にはメニューバインディングも含まれていますが、簡潔にするためにここでは省略しています）。</target>
        </trans-unit>
        <trans-unit id="cc5cd7aa465f9acce5b29508cf6807f6d8b99073" translate="yes" xml:space="preserve">
          <source>(the default global key sequence for &lt;code&gt;kill-line&lt;/code&gt;) Emacs will instead run &lt;code&gt;my-kill-line&lt;/code&gt;.</source>
          <target state="translated">（ &lt;code&gt;kill-line&lt;/code&gt; のデフォルトのグローバルキーシーケンス）Emacsは代わりに &lt;code&gt;my-kill-line&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="4087c2138ee8b1340faa9e075ce65eda7d21c71f" translate="yes" xml:space="preserve">
          <source>(there is a small overhead associated with profiling, so we don&amp;rsquo;t recommend leaving it active except when you are actually running the code you want to examine).</source>
          <target state="translated">（プロファイリングに関連する小さなオーバーヘッドがあるため、調べたいコードを実際に実行している場合を除いて、アクティブのままにしておくことはお勧めしません）。</target>
        </trans-unit>
        <trans-unit id="f9b9bcb23ccd5677387cf40296fb8445134d8d8c" translate="yes" xml:space="preserve">
          <source>(unless you specify otherwise using the optional argument &lt;var&gt;buffer&lt;/var&gt;), whose major mode is Process Menu mode.</source>
          <target state="translated">（オプションの引数 &lt;var&gt;buffer&lt;/var&gt; を使用して別の方法で指定しない限り）、そのメジャーモードはプロセスメニューモードです。</target>
        </trans-unit>
        <trans-unit id="4d681bab37cd1884ea4a6643078af3dc3ee21876" translate="yes" xml:space="preserve">
          <source>(we assume</source>
          <target state="translated">（私たちは</target>
        </trans-unit>
        <trans-unit id="af6440240624b1b9d5c1a311005afb49e2e4578a" translate="yes" xml:space="preserve">
          <source>(which is really</source>
          <target state="translated">（これは本当に</target>
        </trans-unit>
        <trans-unit id="e20cbcdf209f423372032d0b29b4fa14581771e3" translate="yes" xml:space="preserve">
          <source>(y or n)</source>
          <target state="translated">（yまたはn）</target>
        </trans-unit>
        <trans-unit id="65801b9a65f764d63a93c1b6420eb8ea8b7f2a69" translate="yes" xml:space="preserve">
          <source>(yes or no)</source>
          <target state="translated">（はい、もしくは、いいえ）</target>
        </trans-unit>
        <trans-unit id="49c04a14dd8cf0dd8f75941d3cabd49ff8457766" translate="yes" xml:space="preserve">
          <source>) also applies to &lt;code&gt;tab&lt;/code&gt;. Likewise for the other symbols in this group. The function &lt;code&gt;read-char&lt;/code&gt; likewise converts these events into characters.</source>
          <target state="translated">）は &lt;code&gt;tab&lt;/code&gt; も適用されます。このグループの他のシンボルについても同様です。関数 &lt;code&gt;read-char&lt;/code&gt; も同様に、これらのイベントを文字に変換します。</target>
        </trans-unit>
        <trans-unit id="073d0308b8b9be18296d367b35ec54590b48f865" translate="yes" xml:space="preserve">
          <source>) and</source>
          <target state="translated">）および</target>
        </trans-unit>
        <trans-unit id="f7533b731a30b7a7fbf3b293e6320144bd5ed4cc" translate="yes" xml:space="preserve">
          <source>) and &lt;code&gt;emacsclient&lt;/code&gt; (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/emacsclient-Options.html#emacsclient-Options&quot;&gt;emacsclient Options&lt;/a&gt; in</source>
          <target state="translated">）および &lt;code&gt;emacsclient&lt;/code&gt; （の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/emacsclient-Options.html#emacsclient-Options&quot;&gt;emacsclientオプション&lt;/a&gt;を参照）</target>
        </trans-unit>
        <trans-unit id="3bd6e10d0da7de3b6289cd88476e45a3c9912b45" translate="yes" xml:space="preserve">
          <source>) and RIGHT-TO-LEFT OVERRIDE (</source>
          <target state="translated">）および右から左に上書き（</target>
        </trans-unit>
        <trans-unit id="1b1f05124bb78c06731d2242a8f635cc9051c553" translate="yes" xml:space="preserve">
          <source>) and apostrophes (</source>
          <target state="translated">）およびアポストロフィ（</target>
        </trans-unit>
        <trans-unit id="ab290a5596a04d9fbbf91d37653cabc8f7cd0fb3" translate="yes" xml:space="preserve">
          <source>) and see what moves. &lt;strong&gt;But don&amp;rsquo;t do this yet!&lt;/strong&gt; Keep reading, first.</source>
          <target state="translated">）そして何が動くかを見てください。&lt;strong&gt;しかし、まだこれをしないでください！&lt;/strong&gt;まず、読み続けてください。</target>
        </trans-unit>
        <trans-unit id="4aab9d329d6e91ff4036ef14bba18b1529b2d482" translate="yes" xml:space="preserve">
          <source>) and suggests (but doesn&amp;rsquo;t force) its clients to do the same. A macro &lt;code&gt;jsonrpc-lambda&lt;/code&gt; can be used to create a lambda for destructuring a JSON-object like in this example:</source>
          <target state="translated">）そして、クライアントに同じことをするように提案します（ただし、強制はしません）。次の例のように、マクロ &lt;code&gt;jsonrpc-lambda&lt;/code&gt; を使用して、JSONオブジェクトを破棄するためのラムダを作成できます。</target>
        </trans-unit>
        <trans-unit id="1353df51549f889516902de9667420c3c56428f5" translate="yes" xml:space="preserve">
          <source>) and then delays this many seconds before continuing, the prefix key is echoed in the echo area. (Once echoing begins in a key sequence, all subsequent characters in the same key sequence are echoed immediately.)</source>
          <target state="translated">）次に、続行する前にこの秒数だけ遅延すると、プレフィックスキーがエコー領域にエコーされます。（キーシーケンスでエコーが開始されると、同じキーシーケンス内の後続のすべての文字がすぐにエコーされます。）</target>
        </trans-unit>
        <trans-unit id="c32f77ec06151493cf05d77453ac89af9fe62fa7" translate="yes" xml:space="preserve">
          <source>) are used to represent buffers in C. The &lt;code&gt;buffer_text&lt;/code&gt; structure contains fields describing the text of a buffer; the &lt;code&gt;buffer&lt;/code&gt; structure holds other fields. In the case of indirect buffers, two or more &lt;code&gt;buffer&lt;/code&gt; structures reference the same &lt;code&gt;buffer_text&lt;/code&gt; structure.</source>
          <target state="translated">）は、Cでバッファを表すために使用されます &lt;code&gt;buffer_text&lt;/code&gt; 構造体には、バッファのテキストを説明するフィールドが含まれています。 &lt;code&gt;buffer&lt;/code&gt; 構造は、他のフィールドを保持しています。間接バッファーの場合、2つ以上の &lt;code&gt;buffer&lt;/code&gt; 構造が同じ &lt;code&gt;buffer_text&lt;/code&gt; 構造を参照します。</target>
        </trans-unit>
        <trans-unit id="d6bcdf8d3c943e850736212105a03f41b8fe2b3b" translate="yes" xml:space="preserve">
          <source>) as well as these special commands:</source>
          <target state="translated">）およびこれらの特別なコマンド：</target>
        </trans-unit>
        <trans-unit id="01858794e3d8177e7fa3eee0717e350c240fd6c9" translate="yes" xml:space="preserve">
          <source>) at the beginning of each defun, and see if it goes to the place where that defun appears to end. If it does not, there is a problem in that defun.</source>
          <target state="translated">）各デファンの開始時に、そのデファンが終了しているように見える場所に移動するかどうかを確認します。そうでない場合は、その楽しいことに問題があります。</target>
        </trans-unit>
        <trans-unit id="226c5d823b47223a2d7cdd562977ca13d7ca3a63" translate="yes" xml:space="preserve">
          <source>) at the beginning of that defun. This will leave you somewhere short of the place where the defun ought to end. It is possible that you will find a spurious close parenthesis in that vicinity.</source>
          <target state="translated">）その楽しいの始まりに。これは、defunが終了するはずの場所のどこかにあなたを残します。その近くに偽の閉じ括弧が見つかる可能性があります。</target>
        </trans-unit>
        <trans-unit id="636fa4f254723003d55ea731a6de152cb35a07ec" translate="yes" xml:space="preserve">
          <source>) can be used to name registers. Thus, there are 255 possible registers. A register is designated in Emacs Lisp by the character that is its name.</source>
          <target state="translated">）レジスタに名前を付けるために使用できます。したがって、255個の可能なレジスタがあります。レジスターは、EmacsLispではその名前である文字によって指定されます。</target>
        </trans-unit>
        <trans-unit id="45e4a53d28525007ce8f377bc0da016122463461" translate="yes" xml:space="preserve">
          <source>) commands.</source>
          <target state="translated">）コマンド。</target>
        </trans-unit>
        <trans-unit id="f3e2748c1e69f3a4944821404d571f635550ab73" translate="yes" xml:space="preserve">
          <source>) control character, whichever comes first, will be displayed as if they were strong right-to-left characters, i.e. they will be reversed on display. Similarly, any characters between</source>
          <target state="translated">）制御文字のどちらか早い方が、右から左に強い文字であるかのように表示されます。つまり、表示時に反転されます。同様に、</target>
        </trans-unit>
        <trans-unit id="940a384a1806a126600072809d5e730a29183ce6" translate="yes" xml:space="preserve">
          <source>) doesn&amp;rsquo;t delete the region before &lt;code&gt;post-self-insert-hook&lt;/code&gt; functions are invoked. The way to do so is to add a function that returns &lt;code&gt;nil&lt;/code&gt; to &lt;code&gt;self-insert-uses-region-functions&lt;/code&gt;, a special hook that tells Delete Selection mode it should not delete the region.</source>
          <target state="translated">） &lt;code&gt;post-self-insert-hook&lt;/code&gt; 関数が呼び出される前に領域を削除しません。これを行う方法は、 &lt;code&gt;nil&lt;/code&gt; を &lt;code&gt;self-insert-uses-region-functions&lt;/code&gt; に返す関数を追加することです。これは、選択の削除モードに領域を削除しないように指示する特別なフックです。</target>
        </trans-unit>
        <trans-unit id="4613299a5ee2e95f135d131fcd00a53826266d97" translate="yes" xml:space="preserve">
          <source>) flow control for output to the terminal. This has no effect except in &lt;small&gt;CBREAK&lt;/small&gt; mode.</source>
          <target state="translated">）端末への出力のフロー制御。これは、&lt;small&gt;CBREAK&lt;/small&gt;モード以外では効果がありません。</target>
        </trans-unit>
        <trans-unit id="3ccc814fbb8c7b4bbba9ac223b05b01e02fc42c0" translate="yes" xml:space="preserve">
          <source>) flow control for output to the terminal. This value is meaningful only when &lt;var&gt;interrupt&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">）端末への出力のフロー制御。この値は、 &lt;var&gt;interrupt&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; の場合にのみ意味があります。</target>
        </trans-unit>
        <trans-unit id="35f58811071207be5ed3db04c572133659408c42" translate="yes" xml:space="preserve">
          <source>) for an example of a mode that uses &lt;code&gt;show-help-function&lt;/code&gt;.</source>
          <target state="translated">） &lt;code&gt;show-help-function&lt;/code&gt; を使用するモードの例。</target>
        </trans-unit>
        <trans-unit id="5c18c29b4e3509699afc78360bfb7f6239584fd3" translate="yes" xml:space="preserve">
          <source>) for this category.</source>
          <target state="translated">）このカテゴリの場合。</target>
        </trans-unit>
        <trans-unit id="26bed234a17e894c978fee1d007d77ab8d3f7d05" translate="yes" xml:space="preserve">
          <source>) in &lt;var&gt;string&lt;/var&gt; as per the value of &lt;code&gt;text-quoting-style&lt;/code&gt;.</source>
          <target state="translated">） &lt;code&gt;text-quoting-style&lt;/code&gt; の値に従って &lt;var&gt;string&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="3501b0c5ea8b351768f7ac5a9241095b622535d0" translate="yes" xml:space="preserve">
          <source>) in the &amp;ldquo;fullboth&amp;rdquo; state. Normally this parameter is installed automatically by that command when toggling the state to fullboth. If, however, you start Emacs in the &amp;ldquo;fullboth&amp;rdquo; state, you have to specify the desired behavior in your initial file as, for example</source>
          <target state="translated">）「両方」の状態。通常、このパラメーターは、状態を両方に切り替えるときに、そのコマンドによって自動的にインストールされます。ただし、Emacsを「fullboth」状態で起動する場合は、たとえば、初期ファイルで目的の動作を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="b234c04b41508a5bd9df2801fd6a4dc23f62210f" translate="yes" xml:space="preserve">
          <source>) include:</source>
          <target state="translated">）含める：</target>
        </trans-unit>
        <trans-unit id="621e654b796198d3886b46a1846923b4710210e8" translate="yes" xml:space="preserve">
          <source>) is enabled, commands that operate on the active region (a.k.a. &amp;ldquo;selection&amp;rdquo;) behave slightly differently. This works by adding the function &lt;code&gt;delete-selection-pre-hook&lt;/code&gt; to the &lt;code&gt;pre-command-hook&lt;/code&gt; (see &lt;a href=&quot;command-overview#Command-Overview&quot;&gt;Command Overview&lt;/a&gt;). That function calls &lt;code&gt;delete-selection-helper&lt;/code&gt; to delete the selection as appropriate for the command. If you want to adapt a command to Delete Selection mode, put the &lt;code&gt;delete-selection&lt;/code&gt; property on the function&amp;rsquo;s symbol (see &lt;a href=&quot;symbol-plists#Symbol-Plists&quot;&gt;Symbol Plists&lt;/a&gt;); commands that don&amp;rsquo;t have this property on their symbol won&amp;rsquo;t delete the selection. This property can have one of several values to tailor the behavior to what the command is supposed to do; see the doc strings of &lt;code&gt;delete-selection-pre-hook&lt;/code&gt; and &lt;code&gt;delete-selection-helper&lt;/code&gt; for the details.</source>
          <target state="translated">）が有効になっている場合、アクティブ領域（別名「選択」）で動作するコマンドの動作は少し異なります。これは、関数 &lt;code&gt;delete-selection-pre-hook&lt;/code&gt; を &lt;code&gt;pre-command-hook&lt;/code&gt; に追加することで機能します（&lt;a href=&quot;command-overview#Command-Overview&quot;&gt;コマンドの概要を&lt;/a&gt;参照）。この関数は &lt;code&gt;delete-selection-helper&lt;/code&gt; を呼び出して、コマンドに応じて選択を削除します。コマンドを&lt;a href=&quot;symbol-plists#Symbol-Plists&quot;&gt;DeleteSelection&lt;/a&gt;モードに適合させる場合は、関数のシンボルに &lt;code&gt;delete-selection&lt;/code&gt; プロパティを設定します（Symbol Plistsを参照）。シンボルにこのプロパティがないコマンドは、選択を削除しません。このプロパティは、コマンドが実行することになっている動作に合わせて動作を調整するために、いくつかの値の1つを持つことができます。のドキュメント文字列を参照してください &lt;code&gt;delete-selection-pre-hook&lt;/code&gt; 詳細については、delete-selection-pre-hookおよび &lt;code&gt;delete-selection-helper&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e7b28f78a86403f4dcad79dbba94916e498dee62" translate="yes" xml:space="preserve">
          <source>) normally sends the &lt;code&gt;SIGTSTP&lt;/code&gt; signal to a subprocess. When &lt;var&gt;current-group&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, you can think of this function as typing</source>
          <target state="translated">）通常、 &lt;code&gt;SIGTSTP&lt;/code&gt; シグナルをサブプロセスに送信します。場合は &lt;var&gt;current-group&lt;/var&gt; 非で &lt;code&gt;nil&lt;/code&gt; の、あなたが入力として、この機能を考えることができます</target>
        </trans-unit>
        <trans-unit id="c7dba5f36ad3244d4529eef581ce34deef656b1c" translate="yes" xml:space="preserve">
          <source>) or 160 through 255 (&lt;code&gt;eight-bit-graphic&lt;/code&gt;). However, when a unibyte string is converted to a multibyte string, all characters with codes in the range 160 through 255 are converted to characters with higher codes, whereas</source>
          <target state="translated">）または160〜255（ &lt;code&gt;eight-bit-graphic&lt;/code&gt; ）。ただし、ユニバイト文字列をマルチバイト文字列に変換すると、コードが160〜255の範囲のすべての文字が、より高いコードの文字に変換されます。</target>
        </trans-unit>
        <trans-unit id="bf24b0073668a08646c687c6cf07c938af06ebe3" translate="yes" xml:space="preserve">
          <source>) or the file name of a file which is a directory (such as</source>
          <target state="translated">）またはディレクトリであるファイルのファイル名（など</target>
        </trans-unit>
        <trans-unit id="7f6afa2ebd2052d9da57e030feeedff4d52e4821" translate="yes" xml:space="preserve">
          <source>) runs these two hooks just as a keyboard command does.</source>
          <target state="translated">）キーボードコマンドと同じように、これら2つのフックを実行します。</target>
        </trans-unit>
        <trans-unit id="e2deb8d69fd107234cd1204579040571cc46b2e0" translate="yes" xml:space="preserve">
          <source>) sandboxing system.</source>
          <target state="translated">）サンドボックスシステム。</target>
        </trans-unit>
        <trans-unit id="ad337ca541ac98f5169649b9256a37a1af4fde66" translate="yes" xml:space="preserve">
          <source>) sent by a Latin-1 terminal. In order to use this binding, you need to teach Emacs how to decode the keyboard by using an appropriate input method (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Input-Methods.html#Input-Methods&quot;&gt;Input Methods&lt;/a&gt; in</source>
          <target state="translated">）Latin-1端末から送信されます。このバインディングを使用するには、適切な入力方法を使用してキーボードをデコードする方法をEmacsに教える必要があります（の「&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Input-Methods.html#Input-Methods&quot;&gt;入力方法」&lt;/a&gt;を参照）。</target>
        </trans-unit>
        <trans-unit id="f573b0ba691b201b5ab47a7b830b5b498fedcd85" translate="yes" xml:space="preserve">
          <source>) that overcomes their limitations and introduces the &lt;em&gt;pattern matching programming style&lt;/em&gt;. The limitations that &lt;code&gt;pcase&lt;/code&gt; overcomes are:</source>
          <target state="translated">）制限を克服し、&lt;em&gt;パターンマッチングプログラミングスタイル&lt;/em&gt;を導入し&lt;em&gt;ます&lt;/em&gt;。 &lt;code&gt;pcase&lt;/code&gt; が克服する制限は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="72606b384cda61d767f2667441cea324cb2f3d72" translate="yes" xml:space="preserve">
          <source>) to do most of the work. In order to communicate with that function, it first converts &lt;var&gt;time&lt;/var&gt; and &lt;var&gt;zone&lt;/var&gt; to internal form; the operating system limits the range of time and zone values. This function also encodes &lt;var&gt;format-string&lt;/var&gt; using the coding system specified by &lt;code&gt;locale-coding-system&lt;/code&gt; (see &lt;a href=&quot;locales#Locales&quot;&gt;Locales&lt;/a&gt;); after &lt;code&gt;strftime&lt;/code&gt; returns the resulting string, this function decodes the string using that same coding system.</source>
          <target state="translated">）ほとんどの作業を行います。その関数と通信するために、最初に &lt;var&gt;time&lt;/var&gt; と &lt;var&gt;zone&lt;/var&gt; を内部形式に変換します。オペレーティングシステムは、時間とゾーンの値の範囲を制限します。この関数は、 &lt;code&gt;locale-coding-system&lt;/code&gt; で指定されたコーディングシステムを使用して &lt;var&gt;format-string&lt;/var&gt; もエンコードします（&lt;a href=&quot;locales#Locales&quot;&gt;ロケールを&lt;/a&gt;参照）。 &lt;code&gt;strftime&lt;/code&gt; が結果の文字列を返した後、この関数は同じコーディングシステムを使用して文字列をデコードします。</target>
        </trans-unit>
        <trans-unit id="bfcc0e1afb4479acd81a2ba043bf80a1bdeffe5c" translate="yes" xml:space="preserve">
          <source>) to move back beyond the start of your Info browsing history, Emacs signals a &lt;code&gt;user-error&lt;/code&gt;. Such errors do not cause entry to the debugger, even when &lt;code&gt;debug-on-error&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;. See &lt;a href=&quot;error-debugging#Error-Debugging&quot;&gt;Error Debugging&lt;/a&gt;.</source>
          <target state="translated">）情報閲覧履歴の開始を超えて戻るために、Emacsは &lt;code&gt;user-error&lt;/code&gt; 。このようなエラーは、 &lt;code&gt;debug-on-error&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; でない場合でも、デバッガーへのエントリを引き起こしません。&lt;a href=&quot;error-debugging#Error-Debugging&quot;&gt;エラーデバッグを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bccb2df169c5d4a1b38e22322dff12cd1b92de1c" translate="yes" xml:space="preserve">
          <source>) to see the whole call tree below a function. Pressing</source>
          <target state="translated">）関数の下の呼び出しツリー全体を表示します。押す</target>
        </trans-unit>
        <trans-unit id="053bcd05153d7d65f9cce71ab70156c8db3f4663" translate="yes" xml:space="preserve">
          <source>) when you are not inside Emacs.</source>
          <target state="translated">）Emacsの中にいないとき。</target>
        </trans-unit>
        <trans-unit id="b556254390b4e0259df3206dd9ecceca497ee366" translate="yes" xml:space="preserve">
          <source>) which should return a string describing the current prefix state. For example,</source>
          <target state="translated">）現在のプレフィックス状態を説明する文字列を返す必要があります。例えば、</target>
        </trans-unit>
        <trans-unit id="951c4cdbbef269d94c75128aac88d0f7ffc4c9bf" translate="yes" xml:space="preserve">
          <source>) with no modifier bits, it calls that function, passing the character as an argument.</source>
          <target state="translated">）修飾子ビットなしで、その関数を呼び出し、文字を引数として渡します。</target>
        </trans-unit>
        <trans-unit id="15a5313afd38cc04f828b34a31382864d7d7a8b0" translate="yes" xml:space="preserve">
          <source>), Prog mode and Special mode exist mainly to let other modes derive from them.</source>
          <target state="translated">）、ProgモードとSpecialモードは、主に他のモードをそれらから派生させるために存在します。</target>
        </trans-unit>
        <trans-unit id="f9a440382d28b0557a916a28a2786ffb723a1a6d" translate="yes" xml:space="preserve">
          <source>), and &lt;code&gt;define-overloadable-function&lt;/code&gt; (see the commentary in</source>
          <target state="translated">）、および &lt;code&gt;define-overloadable-function&lt;/code&gt; （の解説を参照）</target>
        </trans-unit>
        <trans-unit id="e830d495d0a5eefc8074113b8e40dd8904c9a9d9" translate="yes" xml:space="preserve">
          <source>), and &lt;code&gt;define-skeleton&lt;/code&gt; (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/autotype/index.html#Top&quot;&gt;Autotyping&lt;/a&gt; in</source>
          <target state="translated">）、および &lt;code&gt;define-skeleton&lt;/code&gt; （の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/autotype/index.html#Top&quot;&gt;オートタイピング&lt;/a&gt;を参照）</target>
        </trans-unit>
        <trans-unit id="8715387dc4046bb21c373d26d670b2ef9a870574" translate="yes" xml:space="preserve">
          <source>), as well as in Lisp programs. The return value is the buffer switched to.</source>
          <target state="translated">）、およびLispプログラムで。戻り値は、切り替えられたバッファーです。</target>
        </trans-unit>
        <trans-unit id="4087ef7cf3a90e72351d90652bae11ec7bf2334c" translate="yes" xml:space="preserve">
          <source>), before loading the terminal-specific library (if started on a text terminal) and processing the command-line action arguments.</source>
          <target state="translated">）、端末固有のライブラリをロードし（テキスト端末で開始した場合）、コマンドラインアクション引数を処理する前。</target>
        </trans-unit>
        <trans-unit id="651dd418a9f33f79b50005fed18a5c5cdb923769" translate="yes" xml:space="preserve">
          <source>), but some are defined in Lisp. For example, the file</source>
          <target state="translated">）、しかしいくつかはLispで定義されています。たとえば、ファイル</target>
        </trans-unit>
        <trans-unit id="a63155659a13b513d8930deae62c784d6975959f" translate="yes" xml:space="preserve">
          <source>), don&amp;rsquo;t shorten long items (like strings and lists).</source>
          <target state="translated">）、長いアイテム（文字列やリストなど）を短くしないでください。</target>
        </trans-unit>
        <trans-unit id="8af74967f6e976df5b905ce2d09f7edcc3959f66" translate="yes" xml:space="preserve">
          <source>), except the first element of the list is the archive version.</source>
          <target state="translated">）、ただしリストの最初の要素がアーカイブバージョンであることを除きます。</target>
        </trans-unit>
        <trans-unit id="833963ce398ca1c512dfb2ffd10e295afb07c3a1" translate="yes" xml:space="preserve">
          <source>), it is sometimes useful to know the width taken for displaying the line numbers. The following function is for Lisp programs which need this information for layout calculations.</source>
          <target state="translated">）、行番号を表示するために使用される幅を知っておくと便利な場合があります。次の関数は、レイアウト計算のためにこの情報を必要とするLispプログラム用です。</target>
        </trans-unit>
        <trans-unit id="e2f944ee593e735a3b155a648092b983a852f18b" translate="yes" xml:space="preserve">
          <source>), like this:</source>
          <target state="translated">）、 このような：</target>
        </trans-unit>
        <trans-unit id="30e9e1571a45871ae2600c659e07c6f67e8b2816" translate="yes" xml:space="preserve">
          <source>), not into code 8 (</source>
          <target state="translated">）、コード8ではありません（</target>
        </trans-unit>
        <trans-unit id="757528d5b33a28606a5ae2e1e0ce3703323b990d" translate="yes" xml:space="preserve">
          <source>), or of one of its child classes.</source>
          <target state="translated">）、またはその子クラスの1つ。</target>
        </trans-unit>
        <trans-unit id="6672345a5e5d7e1e8bae19710e4a683c087fafc5" translate="yes" xml:space="preserve">
          <source>), the printed text is inserted into the buffer. If you execute the example by other means (such as by evaluating the function &lt;code&gt;eval-region&lt;/code&gt;), the printed text is displayed in the echo area.</source>
          <target state="translated">）、印刷されたテキストがバッファに挿入されます。他の方法（関数 &lt;code&gt;eval-region&lt;/code&gt; の評価など）で例を実行すると、印刷されたテキストがエコー領域に表示されます。</target>
        </trans-unit>
        <trans-unit id="a56fc82dd2da4ba4272eeceb2622080fa79c4840" translate="yes" xml:space="preserve">
          <source>), then substitutes &amp;lsquo;</source>
          <target state="translated">）、次に 'を代入します</target>
        </trans-unit>
        <trans-unit id="4f20f1100e3ba8d23ce2bbad7bb5e3a3bcadf952" translate="yes" xml:space="preserve">
          <source>), this support is based on &lt;em&gt;generic functions&lt;/em&gt;. The Emacs generic functions closely follow</source>
          <target state="translated">）、このサポートは&lt;em&gt;ジェネリック関数に&lt;/em&gt;基づいてい&lt;em&gt;ます&lt;/em&gt;。Emacsのジェネリック関数は密接に続きます</target>
        </trans-unit>
        <trans-unit id="8a858352706cfaa69f1c00b730ab3f9321d381c5" translate="yes" xml:space="preserve">
          <source>), which is described in Annex #9 of the Unicode standard (&lt;a href=&quot;http://www.unicode.org/reports/tr9/&quot;&gt;http://www.unicode.org/reports/tr9/&lt;/a&gt;). Emacs provides a &amp;ldquo;Full Bidirectionality&amp;rdquo; class implementation of the</source>
          <target state="translated">）、これはUnicode標準の付録＃9（&lt;a href=&quot;http://www.unicode.org/reports/tr9/&quot;&gt;http://www.unicode.org/reports/tr9/&lt;/a&gt;）で説明されています。Emacsは、「完全な双方向性」クラスの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="d41919407ce8f78b6cd89401353e39179fec9ab2" translate="yes" xml:space="preserve">
          <source>).</source>
          <target state="translated">).</target>
        </trans-unit>
        <trans-unit id="6bc702cb6b19e4fb55b91ac44da9f15726a86ef9" translate="yes" xml:space="preserve">
          <source>). (The only way to change it with real effect is before dumping Emacs.)</source>
          <target state="translated">）。（実際の効果でそれを変更する唯一の方法は、Emacsをダンプする前です。）</target>
        </trans-unit>
        <trans-unit id="e430dcad94c6273b9afd285db151fe1da6688fe1" translate="yes" xml:space="preserve">
          <source>). &lt;var&gt;buffer-or-name&lt;/var&gt; can be a buffer, a buffer name (a string), or &lt;code&gt;nil&lt;/code&gt; (or omitted), which means to use the current buffer. &lt;var&gt;stream&lt;/var&gt; is used as in &lt;code&gt;eval-region&lt;/code&gt;, unless &lt;var&gt;stream&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt; and &lt;var&gt;print&lt;/var&gt; non-&lt;code&gt;nil&lt;/code&gt;. In that case, values that result from evaluating the expressions are still discarded, but the output of the output functions is printed in the echo area. &lt;var&gt;filename&lt;/var&gt; is the file name to use for &lt;code&gt;load-history&lt;/code&gt; (see &lt;a href=&quot;unloading#Unloading&quot;&gt;Unloading&lt;/a&gt;), and defaults to &lt;code&gt;buffer-file-name&lt;/code&gt; (see &lt;a href=&quot;buffer-file-name#Buffer-File-Name&quot;&gt;Buffer File Name&lt;/a&gt;). If &lt;var&gt;unibyte&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;read&lt;/code&gt; converts strings to unibyte whenever possible.</source>
          <target state="translated">）。 &lt;var&gt;buffer-or-name&lt;/var&gt; は、バッファー、バッファー名（文字列）、または &lt;code&gt;nil&lt;/code&gt; （または省略）にすることができます。これは、現在のバッファーを使用することを意味します。 &lt;var&gt;stream&lt;/var&gt; のように使用される &lt;code&gt;eval-region&lt;/code&gt; がない限り、 &lt;var&gt;stream&lt;/var&gt; ある &lt;code&gt;nil&lt;/code&gt; と &lt;var&gt;print&lt;/var&gt; 非 &lt;code&gt;nil&lt;/code&gt; を。その場合、式の評価から得られた値は引き続き破棄されますが、出力関数の出力はエコー領域に出力されます。 &lt;var&gt;filename&lt;/var&gt; は、 &lt;code&gt;load-history&lt;/code&gt; に使用するファイル名（&lt;a href=&quot;unloading#Unloading&quot;&gt;Unloadingを&lt;/a&gt;参照）であり、デフォルトは &lt;code&gt;buffer-file-name&lt;/code&gt; （&lt;a href=&quot;buffer-file-name#Buffer-File-Name&quot;&gt;Buffer File Nameを&lt;/a&gt;参照）です。 &lt;var&gt;unibyte&lt;/var&gt; 場合 &lt;code&gt;nil&lt;/code&gt; 以外の場合、 &lt;code&gt;read&lt;/code&gt; は可能な限り文字列をユニバイトに変換します。</target>
        </trans-unit>
        <trans-unit id="07a2510c420a7965262548fdd3405514483b8c1d" translate="yes" xml:space="preserve">
          <source>). After the frame is created, this function applies any parameters specified in &lt;code&gt;frame-inherited-parameters&lt;/code&gt; (see below) it has no assigned yet, taking the values from the frame that was selected when &lt;code&gt;make-frame&lt;/code&gt; was called.</source>
          <target state="translated">）。フレームが作成された後、この関数は、 &lt;code&gt;make-frame&lt;/code&gt; が呼び出されたときに選択されたフレームから値を取得して、まだ割り当てられていない &lt;code&gt;frame-inherited-parameters&lt;/code&gt; （以下を参照）で指定されたパラメーターを適用します。</target>
        </trans-unit>
        <trans-unit id="0216cddf360a2a85d790b19bbbc35086b0fdcab8" translate="yes" xml:space="preserve">
          <source>). Any characters between a</source>
          <target state="translated">）。との間の任意の文字</target>
        </trans-unit>
        <trans-unit id="d5f243bc61820b15169ec95c36fe9c706ac2323e" translate="yes" xml:space="preserve">
          <source>). Documentation strings and message formats should be written so that they display well with any of these styles. For example, the documentation string</source>
          <target state="translated">）。ドキュメントの文字列とメッセージ形式は、これらのスタイルのいずれでも適切に表示されるように作成する必要があります。たとえば、ドキュメント文字列</target>
        </trans-unit>
        <trans-unit id="b73b129cee71ad3bf5376cffeb058aa050c76526" translate="yes" xml:space="preserve">
          <source>). Emacs can connect to other X displays via the command &lt;code&gt;make-frame-on-display&lt;/code&gt;. Each X display has its own selected frame and its own minibuffer windows; however, only one of those frames is &lt;em&gt;the&lt;/em&gt; selected frame at any given moment (see &lt;a href=&quot;input-focus#Input-Focus&quot;&gt;Input Focus&lt;/a&gt;). Emacs can even connect to other text terminals, by interacting with the &lt;code&gt;emacsclient&lt;/code&gt; program. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html#Emacs-Server&quot;&gt;Emacs Server&lt;/a&gt; in</source>
          <target state="translated">）。Emacsは、コマンド &lt;code&gt;make-frame-on-display&lt;/code&gt; を介して他のXディスプレイに接続できます。各Xディスプレイには、独自に選択されたフレームと独自のミニバッファウィンドウがあります。ただし、これらのフレームの1つだけが&lt;em&gt;、&lt;/em&gt;常に選択されたフレームです（&lt;a href=&quot;input-focus#Input-Focus&quot;&gt;入力フォーカスを&lt;/a&gt;参照）。Emacsは、 &lt;code&gt;emacsclient&lt;/code&gt; プログラムと対話することにより、他のテキスト端末に接続することもできます。の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html#Emacs-Server&quot;&gt;Emacsサーバー&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="066d1d65d8509797f2d96be2e3015ba666bf465f" translate="yes" xml:space="preserve">
          <source>). For example, abbrev definitions are stored by default in</source>
          <target state="translated">）。たとえば、略語の定義はデフォルトでに保存されます</target>
        </trans-unit>
        <trans-unit id="94c00897f2e11a204eb5c6761348c0f8312af235" translate="yes" xml:space="preserve">
          <source>). For this reason, you might not use command-line arguments very often; nonetheless, they can be useful when invoking Emacs from session scripts or debugging Emacs. This section describes how Emacs processes command-line arguments.</source>
          <target state="translated">）。このため、コマンドライン引数をあまり頻繁に使用しない場合があります。それでも、セッションスクリプトからEmacsを呼び出したり、Emacsをデバッグしたりするときに役立ちます。このセクションでは、Emacsがコマンドライン引数を処理する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="728f8798e5be4aedb202df13fa2c782d1de335ff" translate="yes" xml:space="preserve">
          <source>). If &lt;code&gt;debug-on-quit&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; (the default), then the debugger is not called when you quit.</source>
          <target state="translated">）。場合は &lt;code&gt;debug-on-quit&lt;/code&gt; ある &lt;code&gt;nil&lt;/code&gt; （デフォルト）あなたが終了したときに、デバッガは呼び出されません。</target>
        </trans-unit>
        <trans-unit id="fb170b189eb5437331809439a20255ffb7f79fff" translate="yes" xml:space="preserve">
          <source>). If not present, mouse-clicks use &lt;code&gt;action&lt;/code&gt; instead.</source>
          <target state="translated">）。存在しない場合、マウスクリックは代わりに &lt;code&gt;action&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="b396761af7a7f7aaf287d0561b9bf7ea930bd58c" translate="yes" xml:space="preserve">
          <source>). If the part before the first slash is &amp;lsquo;</source>
          <target state="translated">）。最初のスラッシュの前の部分が 'の場合</target>
        </trans-unit>
        <trans-unit id="6f1da0e0e0efb94a375946201121a0262ccc4281" translate="yes" xml:space="preserve">
          <source>). In modern object-oriented parlance, this class is &amp;ldquo;abstract&amp;rdquo;, i.e. the actual class of a useful connection object is always a subclass of &lt;code&gt;jsonrpc-connection&lt;/code&gt;. Nevertheless, we can define two distinct APIs around the &lt;code&gt;jsonrpc-connection&lt;/code&gt; class:</source>
          <target state="translated">）。最新のオブジェクト指向の用語では、このクラスは「抽象」です。つまり、有用な接続オブジェクトの実際のクラスは、常に &lt;code&gt;jsonrpc-connection&lt;/code&gt; のサブクラスです。それでも、 &lt;code&gt;jsonrpc-connection&lt;/code&gt; クラスの周りに2つの異なるAPIを定義できます。</target>
        </trans-unit>
        <trans-unit id="c0bab5a1784a2fcb2c482c80fe9763233a1547b0" translate="yes" xml:space="preserve">
          <source>). In particular, stack-allocated objects should never be made visible to user Lisp code.</source>
          <target state="translated">）。特に、スタックに割り当てられたオブジェクトは、ユーザーのLispコードに表示されないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="1a31c66c7664254198e479280c1092ac3f0f380f" translate="yes" xml:space="preserve">
          <source>). It also adds the directories where optional packages are installed, if any (see &lt;a href=&quot;packaging-basics#Packaging-Basics&quot;&gt;Packaging Basics&lt;/a&gt;).</source>
          <target state="translated">）。また、オプションのパッケージがインストールされているディレクトリも追加されます（&lt;a href=&quot;packaging-basics#Packaging-Basics&quot;&gt;パッケージの基本を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="eb6eccfa6a3552625a92765ed4eabc0113ca9cc4" translate="yes" xml:space="preserve">
          <source>). It returns a list of all key sequences (of any length) that are bound to &lt;var&gt;command&lt;/var&gt; in a set of keymaps.</source>
          <target state="translated">）。キーマップのセットで &lt;var&gt;command&lt;/var&gt; にバインドされている（任意の長さの）すべてのキーシーケンスのリストを返します。</target>
        </trans-unit>
        <trans-unit id="1a87dce53bb8cbe87969c28c20182d110ecbc478" translate="yes" xml:space="preserve">
          <source>). Modes whose buffers visit a file, don&amp;rsquo;t have to do anything to use this feature.</source>
          <target state="translated">）。バッファがファイルにアクセスするモードでは、この機能を使用するために何もする必要はありません。</target>
        </trans-unit>
        <trans-unit id="0a2d02183133f0bcaa675cd6203051bc17dc3838" translate="yes" xml:space="preserve">
          <source>). Only used for</source>
          <target state="translated">）。のみに使用</target>
        </trans-unit>
        <trans-unit id="17ce559712d512ce869b08af5a3c13919cdf3479" translate="yes" xml:space="preserve">
          <source>). Prompt.</source>
          <target state="translated">）。促す。</target>
        </trans-unit>
        <trans-unit id="3a49fa7f0dffd6cb3bfa090eb4e34ffb81c5bda0" translate="yes" xml:space="preserve">
          <source>). See the &lt;a href=&quot;https://www.unicode.org/versions/Unicode12.1.0/ch04.pdf&quot;&gt;Character Properties chapter of the Unicode Standard&lt;/a&gt;, for a detailed description of Unicode character properties and their meaning. This section assumes you are already familiar with that chapter of the Unicode Standard, and want to apply that knowledge to Emacs Lisp programs.</source>
          <target state="translated">）。Unicode文字プロパティとその意味の詳細については&lt;a href=&quot;https://www.unicode.org/versions/Unicode12.1.0/ch04.pdf&quot;&gt;、Unicode標準&lt;/a&gt;の文字プロパティの章を参照してください。このセクションは、あなたがすでにUnicode標準のその章に精通していて、その知識をEmacsLispプログラムに適用したいと思っていることを前提としています。</target>
        </trans-unit>
        <trans-unit id="1419299c74c981ec36a2579df8c6be1c026603d0" translate="yes" xml:space="preserve">
          <source>). The &lt;code&gt;harfbuzz&lt;/code&gt; driver is similarly recommended. On other systems, there is only one available font backend, so it does not make sense to modify this frame parameter.</source>
          <target state="translated">）。 &lt;code&gt;harfbuzz&lt;/code&gt; ドライバも同様に推奨されます。他のシステムでは、使用可能なフォントバックエンドが1つしかないため、このフレームパラメータを変更しても意味がありません。</target>
        </trans-unit>
        <trans-unit id="572ec2df6091e2de7abdb26132c366a418487f98" translate="yes" xml:space="preserve">
          <source>). The &lt;code&gt;help-echo&lt;/code&gt; and &lt;code&gt;keymap&lt;/code&gt; properties in &lt;var&gt;string&lt;/var&gt; have special meanings. See &lt;a href=&quot;properties-in-mode#Properties-in-Mode&quot;&gt;Properties in Mode&lt;/a&gt;.</source>
          <target state="translated">）。 &lt;var&gt;string&lt;/var&gt; の &lt;code&gt;help-echo&lt;/code&gt; プロパティと &lt;code&gt;keymap&lt;/code&gt; プロパティには特別な意味があります。&lt;a href=&quot;properties-in-mode#Properties-in-Mode&quot;&gt;モードのプロパティを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f4e8d2341b1c3f661e9dc908fa9a2024bfff000c" translate="yes" xml:space="preserve">
          <source>). The chosen level&amp;rsquo;s symbol value is used to initialize &lt;code&gt;font-lock-keywords&lt;/code&gt;.</source>
          <target state="translated">）。選択したレベルのシンボル値は、 &lt;code&gt;font-lock-keywords&lt;/code&gt; を初期化するために使用されます。</target>
        </trans-unit>
        <trans-unit id="8089685677ab37cbc7dda734039ddd03a3bfe4cb" translate="yes" xml:space="preserve">
          <source>). The image type symbol for images loaded via ImageMagick is &lt;code&gt;imagemagick&lt;/code&gt;, regardless of the actual underlying image format.</source>
          <target state="translated">). The image type symbol for images loaded via ImageMagick is &lt;code&gt;imagemagick&lt;/code&gt; , regardless of the actual underlying image format.</target>
        </trans-unit>
        <trans-unit id="b678b15930d746fbaaa829bd817ec8e13d1fb3ba" translate="yes" xml:space="preserve">
          <source>). The listing command should create or switch to a buffer, turn on the derived mode, specify the tabulated data, and finally call &lt;code&gt;tabulated-list-print&lt;/code&gt; to populate the buffer.</source>
          <target state="translated">). The listing command should create or switch to a buffer, turn on the derived mode, specify the tabulated data, and finally call &lt;code&gt;tabulated-list-print&lt;/code&gt; to populate the buffer.</target>
        </trans-unit>
        <trans-unit id="7d08e33dad037ba3ba25aedd7ea0a5ed0e5de9a2" translate="yes" xml:space="preserve">
          <source>). The minibuffer is displayed on the bottom line of the frame, in the same place as the echo area (see &lt;a href=&quot;the-echo-area#The-Echo-Area&quot;&gt;The Echo Area&lt;/a&gt;), but only while it is in use for reading an argument.</source>
          <target state="translated">). The minibuffer is displayed on the bottom line of the frame, in the same place as the echo area (see &lt;a href=&quot;the-echo-area#The-Echo-Area&quot;&gt;The Echo Area&lt;/a&gt;), but only while it is in use for reading an argument.</target>
        </trans-unit>
        <trans-unit id="072f1abd96aeba3a7f4a4c818f1d0c3967bd54de" translate="yes" xml:space="preserve">
          <source>). The order of looking for a matching rule is &lt;code&gt;auto-coding-alist&lt;/code&gt; first, then &lt;code&gt;auto-coding-regexp-alist&lt;/code&gt;, then the &lt;code&gt;coding:&lt;/code&gt; tag, and lastly &lt;code&gt;auto-coding-functions&lt;/code&gt;. If no matching rule was found, the function returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">). The order of looking for a matching rule is &lt;code&gt;auto-coding-alist&lt;/code&gt; first, then &lt;code&gt;auto-coding-regexp-alist&lt;/code&gt; , then the &lt;code&gt;coding:&lt;/code&gt; tag, and lastly &lt;code&gt;auto-coding-functions&lt;/code&gt; . If no matching rule was found, the function returns &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="250c795e9ba43ff9a60c730d6ee6993b65cec415" translate="yes" xml:space="preserve">
          <source>). Then:</source>
          <target state="translated">). Then:</target>
        </trans-unit>
        <trans-unit id="286e2b3bf949060c30be8e9f33bc4371c6f9f0f2" translate="yes" xml:space="preserve">
          <source>). This is not done if the options &amp;lsquo;</source>
          <target state="translated">). This is not done if the options &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="0cda135f2159c3d8fa253292c549c5efa01b21b7" translate="yes" xml:space="preserve">
          <source>). This is what most users prefer.</source>
          <target state="translated">). This is what most users prefer.</target>
        </trans-unit>
        <trans-unit id="9ed31daed3ddf208b63a3857f511f34f5e96c456" translate="yes" xml:space="preserve">
          <source>). This section explains how to customize Imenu&amp;rsquo;s method of finding definitions or buffer portions for a particular major mode.</source>
          <target state="translated">). This section explains how to customize Imenu&amp;rsquo;s method of finding definitions or buffer portions for a particular major mode.</target>
        </trans-unit>
        <trans-unit id="1af39ec0f6e6fe3b30164370716a75eb2fdda459" translate="yes" xml:space="preserve">
          <source>). This will move you to the beginning of the first defun that is unbalanced.</source>
          <target state="translated">). This will move you to the beginning of the first defun that is unbalanced.</target>
        </trans-unit>
        <trans-unit id="123fb6098721cdb942517f5b61e2ee732ce7ff0a" translate="yes" xml:space="preserve">
          <source>). We call this the package&amp;rsquo;s &lt;em&gt;content directory&lt;/em&gt;. It is where Emacs puts the package&amp;rsquo;s contents (the single Lisp file for a simple package, or the files extracted from a multi-file package).</source>
          <target state="translated">). We call this the package&amp;rsquo;s &lt;em&gt;content directory&lt;/em&gt;. It is where Emacs puts the package&amp;rsquo;s contents (the single Lisp file for a simple package, or the files extracted from a multi-file package).</target>
        </trans-unit>
        <trans-unit id="a7099ed7d17868c66e5e144077105d5e67f7ba6f" translate="yes" xml:space="preserve">
          <source>). Within an XLFD string, wildcard characters may be used: the &amp;lsquo;</source>
          <target state="translated">). Within an XLFD string, wildcard characters may be used: the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="aa39a761bab27ab071435ed15061c91ffcd1cea8" translate="yes" xml:space="preserve">
          <source>). Within the minibuffer, the usual minibuffer history commands are available.</source>
          <target state="translated">). Within the minibuffer, the usual minibuffer history commands are available.</target>
        </trans-unit>
        <trans-unit id="67f69ef0c07d30c0476bd886f60193097cb47f3e" translate="yes" xml:space="preserve">
          <source>):</source>
          <target state="translated">):</target>
        </trans-unit>
        <trans-unit id="02f9e08f032c78a11939dd4121fe5f583c13a5b7" translate="yes" xml:space="preserve">
          <source>); if the font name is an XLFD containing wildcards, Emacs chooses the first font matching those wildcards. Specifying this attribute also changes the values of the &lt;code&gt;:family&lt;/code&gt;, &lt;code&gt;:foundry&lt;/code&gt;, &lt;code&gt;:width&lt;/code&gt;, &lt;code&gt;:height&lt;/code&gt;, &lt;code&gt;:weight&lt;/code&gt;, and &lt;code&gt;:slant&lt;/code&gt; attributes.</source>
          <target state="translated">); if the font name is an XLFD containing wildcards, Emacs chooses the first font matching those wildcards. Specifying this attribute also changes the values of the &lt;code&gt;:family&lt;/code&gt; , &lt;code&gt;:foundry&lt;/code&gt; , &lt;code&gt;:width&lt;/code&gt; , &lt;code&gt;:height&lt;/code&gt; , &lt;code&gt;:weight&lt;/code&gt; , and &lt;code&gt;:slant&lt;/code&gt; attributes.</target>
        </trans-unit>
        <trans-unit id="fa5911a23ca6e694ca03a8ad5fb73cf752432e07" translate="yes" xml:space="preserve">
          <source>); then the value specified in the</source>
          <target state="translated">); then the value specified in the</target>
        </trans-unit>
        <trans-unit id="df58248c414f342c81e056b40bee12d17a08bf61" translate="yes" xml:space="preserve">
          <source>*</source>
          <target state="translated">*</target>
        </trans-unit>
        <trans-unit id="68c8f260d94a8e5f1351012b584ed42e859abe7e" translate="yes" xml:space="preserve">
          <source>*.elc</source>
          <target state="translated">*.elc</target>
        </trans-unit>
        <trans-unit id="ea248735dfd6dbdc9955c9c29db3e45b0a846e0c" translate="yes" xml:space="preserve">
          <source>*Apropos*</source>
          <target state="translated">*Apropos*</target>
        </trans-unit>
        <trans-unit id="a5a9034f996ce8c8eb96feecf9a5469bc891720e" translate="yes" xml:space="preserve">
          <source>*Backtrace*</source>
          <target state="translated">*Backtrace*</target>
        </trans-unit>
        <trans-unit id="aaa04024d52053fe290aaad9fea028d106a431ee" translate="yes" xml:space="preserve">
          <source>*Backtrace*&amp;lt;2&amp;gt;</source>
          <target state="translated">*Backtrace*&amp;lt;2&amp;gt;</target>
        </trans-unit>
        <trans-unit id="b6c60dba32bf3e855ffa22a9f9343edc7b276ef2" translate="yes" xml:space="preserve">
          <source>*Buffer List*</source>
          <target state="translated">*Buffer List*</target>
        </trans-unit>
        <trans-unit id="3f1b850fad17b9bd4d19a42a8838ea9e792e3f0c" translate="yes" xml:space="preserve">
          <source>*Colors*</source>
          <target state="translated">*Colors*</target>
        </trans-unit>
        <trans-unit id="fafdbbbe7d281c0d76f42085678b94deecea55a8" translate="yes" xml:space="preserve">
          <source>*Compilation*</source>
          <target state="translated">*Compilation*</target>
        </trans-unit>
        <trans-unit id="b9eac9c2978a0a9695595b6e10c10a3c2471918d" translate="yes" xml:space="preserve">
          <source>*Compile-Log*</source>
          <target state="translated">*Compile-Log*</target>
        </trans-unit>
        <trans-unit id="ed700b174c4129e0eb6aaabac5f8da20b7c01b64" translate="yes" xml:space="preserve">
          <source>*Compiler Input*</source>
          <target state="translated">*Compiler Input*</target>
        </trans-unit>
        <trans-unit id="6f9e827d0fdc6f7904289a06985c3029002a6e76" translate="yes" xml:space="preserve">
          <source>*Completions*</source>
          <target state="translated">*Completions*</target>
        </trans-unit>
        <trans-unit id="ee55bb497d1a87de8bad6ce68e9e25a27702f288" translate="yes" xml:space="preserve">
          <source>*Custom Themes*</source>
          <target state="translated">*Custom Themes*</target>
        </trans-unit>
        <trans-unit id="1258cb964a55e938757facfaffe0e3066fb2dc5f" translate="yes" xml:space="preserve">
          <source>*Debugger-record*</source>
          <target state="translated">*Debugger-record*</target>
        </trans-unit>
        <trans-unit id="401281af20e4abf320fb5aacd768fe40abb7c013" translate="yes" xml:space="preserve">
          <source>*Disassemble*</source>
          <target state="translated">*Disassemble*</target>
        </trans-unit>
        <trans-unit id="c146cba2a0b674281b65aeaf8e308df7f1f5518b" translate="yes" xml:space="preserve">
          <source>*Help*</source>
          <target state="translated">*Help*</target>
        </trans-unit>
        <trans-unit id="59539fb500987835722817a5e7ff58519e4cb398" translate="yes" xml:space="preserve">
          <source>*Message*</source>
          <target state="translated">*Message*</target>
        </trans-unit>
        <trans-unit id="b9bd88492bc70e2dd4330c65a4383edfd519a961" translate="yes" xml:space="preserve">
          <source>*Messages*</source>
          <target state="translated">*Messages*</target>
        </trans-unit>
        <trans-unit id="feb90cf3c960ea7a4cfd04a832764b8813ba4454" translate="yes" xml:space="preserve">
          <source>*Minibuf-1*</source>
          <target state="translated">*Minibuf-1*</target>
        </trans-unit>
        <trans-unit id="7a3eb7ea2ec32045165f08df94f4a8c4778567bd" translate="yes" xml:space="preserve">
          <source>*Minibuf-&lt;var&gt;number&lt;/var&gt;*</source>
          <target state="translated">*Minibuf-&lt;var&gt;number&lt;/var&gt;*</target>
        </trans-unit>
        <trans-unit id="a42fbe55623f4315fd315074ccb709dae31b546f" translate="yes" xml:space="preserve">
          <source>*Process List*</source>
          <target state="translated">*Process List*</target>
        </trans-unit>
        <trans-unit id="8f97af6851bd60a5f921865002bd80037108fe5c" translate="yes" xml:space="preserve">
          <source>*Tags List*</source>
          <target state="translated">*Tags List*</target>
        </trans-unit>
        <trans-unit id="b2b65bb9ae79c3dc80d05a2e1ed1e071c0b184d0" translate="yes" xml:space="preserve">
          <source>*Threads*</source>
          <target state="translated">*Threads*</target>
        </trans-unit>
        <trans-unit id="9cb3a64ae7348a788e4fc7cd891ea796fec435e2" translate="yes" xml:space="preserve">
          <source>*Warnings*</source>
          <target state="translated">*Warnings*</target>
        </trans-unit>
        <trans-unit id="d86f82c774ee81f0658888cf6d7e300b6996ef32" translate="yes" xml:space="preserve">
          <source>*compilation*</source>
          <target state="translated">*compilation*</target>
        </trans-unit>
        <trans-unit id="658ea5dcf1e5d596edafe96dbac597ed1af57153" translate="yes" xml:space="preserve">
          <source>*edebug*</source>
          <target state="translated">*edebug*</target>
        </trans-unit>
        <trans-unit id="10cf21b6ab56ca4d626bb645b8181ed601b3007a" translate="yes" xml:space="preserve">
          <source>*edebug-trace*</source>
          <target state="translated">*edebug-trace*</target>
        </trans-unit>
        <trans-unit id="8c71091087d744a5ade4945df7f7d4b84df0f3c5" translate="yes" xml:space="preserve">
          <source>*foo</source>
          <target state="translated">*foo</target>
        </trans-unit>
        <trans-unit id="f803fdca3304ab50f5ba4e785578531dc4389f43" translate="yes" xml:space="preserve">
          <source>*foo*</source>
          <target state="translated">*foo*</target>
        </trans-unit>
        <trans-unit id="9503b9951f97b2b5fe2fd74075ce8f65dbb12ad8" translate="yes" xml:space="preserve">
          <source>*get_user_ptr</source>
          <target state="translated">*get_user_ptr</target>
        </trans-unit>
        <trans-unit id="21e9556909ab1ace2fa09c307dcc369e91dfd93d" translate="yes" xml:space="preserve">
          <source>*grep*</source>
          <target state="translated">*grep*</target>
        </trans-unit>
        <trans-unit id="649a23dfcc137b308a4d9882bc937af2b1ff2d84" translate="yes" xml:space="preserve">
          <source>*help*</source>
          <target state="translated">*help*</target>
        </trans-unit>
        <trans-unit id="f0f4859236d45d31122f0e646c9d122a91c100ba" translate="yes" xml:space="preserve">
          <source>*ielm*</source>
          <target state="translated">*ielm*</target>
        </trans-unit>
        <trans-unit id="b034cc570736bf7a3e6729e74744869564f2adbc" translate="yes" xml:space="preserve">
          <source>*scratch*</source>
          <target state="translated">*scratch*</target>
        </trans-unit>
        <trans-unit id="d7ab9abadedbc53f8391d372e8ef97545ef282db" translate="yes" xml:space="preserve">
          <source>*shell*</source>
          <target state="translated">*shell*</target>
        </trans-unit>
        <trans-unit id="a979ef10cc6f6a36df6b8a323307ee3bb2e2db9c" translate="yes" xml:space="preserve">
          <source>+</source>
          <target state="translated">+</target>
        </trans-unit>
        <trans-unit id="b402299c46b0b238d8c24883c7bd7740667cb495" translate="yes" xml:space="preserve">
          <source>+1500000e-3</source>
          <target state="translated">+1500000e-3</target>
        </trans-unit>
        <trans-unit id="2edd79e233fb1dc2172342f60592616ee96377a8" translate="yes" xml:space="preserve">
          <source>+15e2</source>
          <target state="translated">+15e2</target>
        </trans-unit>
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">,</target>
        </trans-unit>
        <trans-unit id="7c0185ac95f3306ac515ae5ad432d9e50eb43d6d" translate="yes" xml:space="preserve">
          <source>, &amp;hellip;,</source>
          <target state="translated">, &amp;hellip;,</target>
        </trans-unit>
        <trans-unit id="85664cc490e650e69d51808edcdb018b5b8aa244" translate="yes" xml:space="preserve">
          <source>, &amp;lsquo;</source>
          <target state="translated">、 '</target>
        </trans-unit>
        <trans-unit id="f5dd631869970d4dee36348e800412f90a6b95e2" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;&quot;\C-f&quot;&lt;/code&gt; is read as containing a single</source>
          <target state="translated">, &lt;code&gt;&quot;\C-f&quot;&lt;/code&gt; is read as containing a single</target>
        </trans-unit>
        <trans-unit id="cfa97495f691c0ad49ac23d10a91d7bb25dd6f6d" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;completing-read&lt;/code&gt; returns &lt;code&gt;barfoo&lt;/code&gt;.</source>
          <target state="translated">, &lt;code&gt;completing-read&lt;/code&gt; returns &lt;code&gt;barfoo&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f3f249ee1ff34d3ffaadba0feceb027bf38a6a80" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;display-buffer&lt;/code&gt; would have split the window at the bottom instead.</source>
          <target state="translated">, &lt;code&gt;display-buffer&lt;/code&gt; would have split the window at the bottom instead.</target>
        </trans-unit>
        <trans-unit id="94447616798f16a11fc24490129a4bf5e56314e8" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;load&lt;/code&gt; searches for the file using the variable &lt;code&gt;load-path&lt;/code&gt;. It appends &lt;var&gt;filename&lt;/var&gt; to each of the directories listed in &lt;code&gt;load-path&lt;/code&gt;, and loads the first file it finds whose name matches. The current default directory is tried only if it is specified in &lt;code&gt;load-path&lt;/code&gt;, where &lt;code&gt;nil&lt;/code&gt; stands for the default directory. &lt;code&gt;load&lt;/code&gt; tries all three possible suffixes in the first directory in &lt;code&gt;load-path&lt;/code&gt;, then all three suffixes in the second directory, and so on. See &lt;a href=&quot;library-search#Library-Search&quot;&gt;Library Search&lt;/a&gt;.</source>
          <target state="translated">, &lt;code&gt;load&lt;/code&gt; searches for the file using the variable &lt;code&gt;load-path&lt;/code&gt; . It appends &lt;var&gt;filename&lt;/var&gt; to each of the directories listed in &lt;code&gt;load-path&lt;/code&gt; , and loads the first file it finds whose name matches. The current default directory is tried only if it is specified in &lt;code&gt;load-path&lt;/code&gt; , where &lt;code&gt;nil&lt;/code&gt; stands for the default directory. &lt;code&gt;load&lt;/code&gt; tries all three possible suffixes in the first directory in &lt;code&gt;load-path&lt;/code&gt; , then all three suffixes in the second directory, and so on. See &lt;a href=&quot;library-search#Library-Search&quot;&gt;Library Search&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="adf6a2abe31dc18c938fb4a07e258d85ab7105eb" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;nil&lt;/code&gt; if the user types</source>
          <target state="translated">, &lt;code&gt;nil&lt;/code&gt; if the user types</target>
        </trans-unit>
        <trans-unit id="51e3d81dbc7e9e489fa73def469509de76cb04bf" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;read-file-name&lt;/code&gt; returns the file name as the string &lt;code&gt;&quot;/gp/gnu/elisp/manual.texi&quot;&lt;/code&gt;.</source>
          <target state="translated">, &lt;code&gt;read-file-name&lt;/code&gt; returns the file name as the string &lt;code&gt;&quot;/gp/gnu/elisp/manual.texi&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="49a2625d3fb8b511a96cbc3daa7c0c8e556258b5" translate="yes" xml:space="preserve">
          <source>, a function key, is not converted into</source>
          <target state="translated">, a function key, is not converted into</target>
        </trans-unit>
        <trans-unit id="e4b747ad0cf9e010babc53671044228154230534" translate="yes" xml:space="preserve">
          <source>, a numerical process ID that is assigned by the OS and distinguishes the process from all the other processes running on the same machine at the same time.</source>
          <target state="translated">, a numerical process ID that is assigned by the OS and distinguishes the process from all the other processes running on the same machine at the same time.</target>
        </trans-unit>
        <trans-unit id="4124957bc7d216e466f96a4f986787553fa34eff" translate="yes" xml:space="preserve">
          <source>, acts like &lt;code&gt;recenter&lt;/code&gt;, except if called with no argument. In that case, successive calls place point according to the cycling order defined by the variable &lt;code&gt;recenter-positions&lt;/code&gt;.</source>
          <target state="translated">, acts like &lt;code&gt;recenter&lt;/code&gt; , except if called with no argument. In that case, successive calls place point according to the cycling order defined by the variable &lt;code&gt;recenter-positions&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1b9143dac34627130fb9e82380a06dbdf41719e9" translate="yes" xml:space="preserve">
          <source>, also called a &lt;em&gt;bare impure Emacs&lt;/em&gt;. It contains the Emacs Lisp interpreter and I/O routines, but not the editing commands.</source>
          <target state="translated">, also called a &lt;em&gt;bare impure Emacs&lt;/em&gt;. It contains the Emacs Lisp interpreter and I/O routines, but not the editing commands.</target>
        </trans-unit>
        <trans-unit id="51fc51348600db0345fa8dbcf1a349175e802240" translate="yes" xml:space="preserve">
          <source>, an unusual style in English.</source>
          <target state="translated">, an unusual style in English.</target>
        </trans-unit>
        <trans-unit id="8278d2adba7612cf98a492d21a4ac4c78acb1202" translate="yes" xml:space="preserve">
          <source>, and</source>
          <target state="translated">、および</target>
        </trans-unit>
        <trans-unit id="f426f972d9e2e410d1cd265b7d8eb71579d193d3" translate="yes" xml:space="preserve">
          <source>, and &amp;lsquo;</source>
          <target state="translated">、および '</target>
        </trans-unit>
        <trans-unit id="5bab5a6b07998c4c11abd29d6290c02a4d252ae1" translate="yes" xml:space="preserve">
          <source>, and &lt;code&gt;&quot;\M-\C-x&quot;&lt;/code&gt; and &lt;code&gt;&quot;\C-\M-x&quot;&lt;/code&gt; are both read as containing a single</source>
          <target state="translated">, and &lt;code&gt;&quot;\M-\C-x&quot;&lt;/code&gt; and &lt;code&gt;&quot;\C-\M-x&quot;&lt;/code&gt; are both read as containing a single</target>
        </trans-unit>
        <trans-unit id="c7db769c033926aa7c242e36cccf2673f752b45b" translate="yes" xml:space="preserve">
          <source>, and &lt;code&gt;?\002&lt;/code&gt; for the character</source>
          <target state="translated">, and &lt;code&gt;?\002&lt;/code&gt; for the character</target>
        </trans-unit>
        <trans-unit id="880d2fd9ca0a909a8bdd1e0f511e0ae3047499a0" translate="yes" xml:space="preserve">
          <source>, and &lt;code&gt;?\xe0&lt;/code&gt; is the character</source>
          <target state="translated">, and &lt;code&gt;?\xe0&lt;/code&gt; is the character</target>
        </trans-unit>
        <trans-unit id="5af374137c6bea5c9b94d6e1f7122e8167f72507" translate="yes" xml:space="preserve">
          <source>, and &lt;code&gt;read-key-sequence&lt;/code&gt; translates this back into</source>
          <target state="translated">, and &lt;code&gt;read-key-sequence&lt;/code&gt; translates this back into</target>
        </trans-unit>
        <trans-unit id="f9758ac9f3d00fc7044bb30aa84f59a95a71bb2c" translate="yes" xml:space="preserve">
          <source>, and if so, aborts the processing. You should do that in any loop that can potentially require a large number of iterations; in this case, the list of arguments could be very long. This increases Emacs responsiveness and improves user experience.</source>
          <target state="translated">, and if so, aborts the processing. You should do that in any loop that can potentially require a large number of iterations; in this case, the list of arguments could be very long. This increases Emacs responsiveness and improves user experience.</target>
        </trans-unit>
        <trans-unit id="5b454d6e8f3f0305d032dc68337000e1f3c9dfa3" translate="yes" xml:space="preserve">
          <source>, and if so, loads it. The</source>
          <target state="translated">, and if so, loads it. The</target>
        </trans-unit>
        <trans-unit id="ba74b354a1b71c68fdb9b3cbb3deba3328e3c0ac" translate="yes" xml:space="preserve">
          <source>, and is installed in the Emacs &lt;code&gt;exec-directory&lt;/code&gt; (see &lt;a href=&quot;help-functions#Help-Functions&quot;&gt;Help Functions&lt;/a&gt;). This method is the most preferred one, as it does not require Emacs to employ any special techniques of memory allocation, which might get in the way of various memory-layout techniques used by modern systems to enhance security and privacy.</source>
          <target state="translated">, and is installed in the Emacs &lt;code&gt;exec-directory&lt;/code&gt; (see &lt;a href=&quot;help-functions#Help-Functions&quot;&gt;Help Functions&lt;/a&gt;). This method is the most preferred one, as it does not require Emacs to employ any special techniques of memory allocation, which might get in the way of various memory-layout techniques used by modern systems to enhance security and privacy.</target>
        </trans-unit>
        <trans-unit id="6af435c9caa0dc387e46ddfe28f51b04c3fa595c" translate="yes" xml:space="preserve">
          <source>, and is therefore not recommended. Any changes to the bidirectional properties of a character have global effect: they affect all Emacs frames and windows.</source>
          <target state="translated">, and is therefore not recommended. Any changes to the bidirectional properties of a character have global effect: they affect all Emacs frames and windows.</target>
        </trans-unit>
        <trans-unit id="678e2ccc3b5a4e1ed7f6b32d047f22355c246a99" translate="yes" xml:space="preserve">
          <source>, and it demonstrates the use of macros and functions to manipulate Lisp objects.</source>
          <target state="translated">, and it demonstrates the use of macros and functions to manipulate Lisp objects.</target>
        </trans-unit>
        <trans-unit id="7d3a6a77ade5d26d3f6ab3688a4fb6e098c4dfd0" translate="yes" xml:space="preserve">
          <source>, and its global binding is found at the slot for</source>
          <target state="translated">, and its global binding is found at the slot for</target>
        </trans-unit>
        <trans-unit id="4ca786015ce7cee99e7bb4f3600ffa91cc2df171" translate="yes" xml:space="preserve">
          <source>, and one of these would be the file</source>
          <target state="translated">, and one of these would be the file</target>
        </trans-unit>
        <trans-unit id="709717e7ffe4a23dfdce97248749484eaa2a3993" translate="yes" xml:space="preserve">
          <source>, and similar evaluation commands in &lt;code&gt;lisp-interaction-mode&lt;/code&gt;.) The elements are ordered most recent first.</source>
          <target state="translated">, and similar evaluation commands in &lt;code&gt;lisp-interaction-mode&lt;/code&gt; .) The elements are ordered most recent first.</target>
        </trans-unit>
        <trans-unit id="7b410e10184ce986d71ead2776d4612aebf7eff8" translate="yes" xml:space="preserve">
          <source>, and so on.</source>
          <target state="translated">、 等々。</target>
        </trans-unit>
        <trans-unit id="e7a2e530a6ab9efe11fd30e0b8433961dd1df333" translate="yes" xml:space="preserve">
          <source>, and some others. Files that begin with the POSIX-standard &amp;lsquo;</source>
          <target state="translated">, and some others. Files that begin with the POSIX-standard &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="9e46e03e5a95d351f5856f34e08245231c022303" translate="yes" xml:space="preserve">
          <source>, and specify the condition expression in the minibuffer. Setting a conditional breakpoint at a stop point that has a previously established conditional breakpoint puts the previous condition expression in the minibuffer so you can edit it.</source>
          <target state="translated">, and specify the condition expression in the minibuffer. Setting a conditional breakpoint at a stop point that has a previously established conditional breakpoint puts the previous condition expression in the minibuffer so you can edit it.</target>
        </trans-unit>
        <trans-unit id="3edf3f0a7da4b78580f03d9cf78969cb53bfa05b" translate="yes" xml:space="preserve">
          <source>, and subdirectories containing a file named</source>
          <target state="translated">, and subdirectories containing a file named</target>
        </trans-unit>
        <trans-unit id="9ca9c3e24d166e2eaeadbd0a8b46a94d9a74eb56" translate="yes" xml:space="preserve">
          <source>, and subsequently evaluate that form. &lt;code&gt;display-buffer&lt;/code&gt; should split the upper window, and show</source>
          <target state="translated">, and subsequently evaluate that form. &lt;code&gt;display-buffer&lt;/code&gt; should split the upper window, and show</target>
        </trans-unit>
        <trans-unit id="58da794c6ca02d6805a157ee26db647de9910145" translate="yes" xml:space="preserve">
          <source>, and the corresponding</source>
          <target state="translated">, and the corresponding</target>
        </trans-unit>
        <trans-unit id="9b81b6f863e116358d7583422c3eea5a997a6970" translate="yes" xml:space="preserve">
          <source>, and the environment variables &lt;code&gt;LOGNAME&lt;/code&gt; and &lt;code&gt;USER&lt;/code&gt;.</source>
          <target state="translated">, and the environment variables &lt;code&gt;LOGNAME&lt;/code&gt; and &lt;code&gt;USER&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c534cd8e28058510fdfee9345ac8a307dfcdaacf" translate="yes" xml:space="preserve">
          <source>, and the specified return value does not matter.</source>
          <target state="translated">, and the specified return value does not matter.</target>
        </trans-unit>
        <trans-unit id="f18f186299547a638f2d7f34072e462016a2b2a3" translate="yes" xml:space="preserve">
          <source>, and then in &lt;code&gt;load-path&lt;/code&gt;, followed by a path suitable for &lt;var&gt;library&lt;/var&gt;, which includes</source>
          <target state="translated">, and then in &lt;code&gt;load-path&lt;/code&gt; , followed by a path suitable for &lt;var&gt;library&lt;/var&gt; , which includes</target>
        </trans-unit>
        <trans-unit id="31787317c96642dfb03546ca2f99160b3196879c" translate="yes" xml:space="preserve">
          <source>, and you can&amp;rsquo;t kill it or send it signals. All you can do is send and receive data. &lt;code&gt;delete-process&lt;/code&gt; closes the connection, but does not kill the program at the other end; that program must decide what to do about closure of the connection.</source>
          <target state="translated">, and you can&amp;rsquo;t kill it or send it signals. All you can do is send and receive data. &lt;code&gt;delete-process&lt;/code&gt; closes the connection, but does not kill the program at the other end; that program must decide what to do about closure of the connection.</target>
        </trans-unit>
        <trans-unit id="c9fa2a8a9f759de21b4ee61a63b53936873ce301" translate="yes" xml:space="preserve">
          <source>, and, if not found, for</source>
          <target state="translated">, and, if not found, for</target>
        </trans-unit>
        <trans-unit id="aa903064855ec84062f817d0337fbfae20014dc7" translate="yes" xml:space="preserve">
          <source>, any of</source>
          <target state="translated">, any of</target>
        </trans-unit>
        <trans-unit id="21cfc7b0c8fbd493f6ae5ad4a7f0f32f44adca02" translate="yes" xml:space="preserve">
          <source>, as defined in the active keymaps.</source>
          <target state="translated">, as defined in the active keymaps.</target>
        </trans-unit>
        <trans-unit id="1e56c701225feeb10483edc89ec9cb976253ae00" translate="yes" xml:space="preserve">
          <source>, but also save the result of evaluation in the buffer</source>
          <target state="translated">, but also save the result of evaluation in the buffer</target>
        </trans-unit>
        <trans-unit id="df812f699659b6688a957387b282052199292f8d" translate="yes" xml:space="preserve">
          <source>, but did not proceed to resolve it, although that file is itself a symbolic link. That is because this function does not follow symbolic links&amp;mdash;the process of following the symbolic links does not apply to the last component of the file name.</source>
          <target state="translated">, but did not proceed to resolve it, although that file is itself a symbolic link. That is because this function does not follow symbolic links&amp;mdash;the process of following the symbolic links does not apply to the last component of the file name.</target>
        </trans-unit>
        <trans-unit id="a29508653431ad938083f2e8b4879d5701db8dd7" translate="yes" xml:space="preserve">
          <source>, but don&amp;rsquo;t stop even for protected code (&lt;code&gt;edebug-top-level-nonstop&lt;/code&gt;).</source>
          <target state="translated">, but don&amp;rsquo;t stop even for protected code ( &lt;code&gt;edebug-top-level-nonstop&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="2239ec7079476973c61c4399ef8aa8692af31971" translate="yes" xml:space="preserve">
          <source>, but temporarily disable break-on-entry for all functions that are set up to do so by &lt;code&gt;debug-on-entry&lt;/code&gt;.</source>
          <target state="translated">, but temporarily disable break-on-entry for all functions that are set up to do so by &lt;code&gt;debug-on-entry&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eea052ca7bf78a8639e93773560c5889c28b7123" translate="yes" xml:space="preserve">
          <source>, but you can override that, e.g., in the local variables section of a</source>
          <target state="translated">, but you can override that, e.g., in the local variables section of a</target>
        </trans-unit>
        <trans-unit id="f3a4a5a915a593fde2a3701f53edb97e28d24d32" translate="yes" xml:space="preserve">
          <source>, by calling the more powerful Emacs &lt;code&gt;intern&lt;/code&gt; function (see &lt;a href=&quot;creating-symbols#Creating-Symbols&quot;&gt;Creating Symbols&lt;/a&gt;):</source>
          <target state="translated">, by calling the more powerful Emacs &lt;code&gt;intern&lt;/code&gt; function (see &lt;a href=&quot;creating-symbols#Creating-Symbols&quot;&gt;Creating Symbols&lt;/a&gt;):</target>
        </trans-unit>
        <trans-unit id="b1975d20ff6eefb16c4c59086070e2171f7c2714" translate="yes" xml:space="preserve">
          <source>, can also be used on any identifier in a backtrace (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Looking-Up-Identifiers.html#Looking-Up-Identifiers&quot;&gt;Looking Up Identifiers&lt;/a&gt; in</source>
          <target state="translated">, can also be used on any identifier in a backtrace (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Looking-Up-Identifiers.html#Looking-Up-Identifiers&quot;&gt;Looking Up Identifiers&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="b9662b99a6653f47f010f2abb10d94d7212d3047" translate="yes" xml:space="preserve">
          <source>, consistent with the requirements of the Unicode Standard v9.0. Note, however, that the way Emacs displays continuation lines when text direction is opposite to the base paragraph direction deviates from the UBA, which requires to perform line wrapping before reordering text for display.</source>
          <target state="translated">, consistent with the requirements of the Unicode Standard v9.0. Note, however, that the way Emacs displays continuation lines when text direction is opposite to the base paragraph direction deviates from the UBA, which requires to perform line wrapping before reordering text for display.</target>
        </trans-unit>
        <trans-unit id="3db09a6e437b17347c95ff452a8339c59f838eea" translate="yes" xml:space="preserve">
          <source>, described below and in the following subsections, provides facilities for conversion between basic C data types and the corresponding &lt;code&gt;emacs_value&lt;/code&gt; objects.</source>
          <target state="translated">, described below and in the following subsections, provides facilities for conversion between basic C data types and the corresponding &lt;code&gt;emacs_value&lt;/code&gt; objects.</target>
        </trans-unit>
        <trans-unit id="4a50f9bc271adbc472119a91de220395bd21ff79" translate="yes" xml:space="preserve">
          <source>, each with a one-line description taken from the beginning of its documentation string.</source>
          <target state="translated">, each with a one-line description taken from the beginning of its documentation string.</target>
        </trans-unit>
        <trans-unit id="d895bb1209c5f2b478c3e514b0e684577ee98ed8" translate="yes" xml:space="preserve">
          <source>, etc.) between the process and its children, and because interactive programs treat ptys as terminal devices, whereas pipes don&amp;rsquo;t support these features. However, for subprocesses used by Lisp programs for internal purposes (i.e., no user interaction with the subprocess is required), where significant amounts of data need to be exchanged between the subprocess and the Lisp program, it is often better to use a pipe, because pipes are more efficient. Also, the total number of ptys is limited on many systems, and it is good not to waste them unnecessarily.</source>
          <target state="translated">, etc.) between the process and its children, and because interactive programs treat ptys as terminal devices, whereas pipes don&amp;rsquo;t support these features. However, for subprocesses used by Lisp programs for internal purposes (i.e., no user interaction with the subprocess is required), where significant amounts of data need to be exchanged between the subprocess and the Lisp program, it is often better to use a pipe, because pipes are more efficient. Also, the total number of ptys is limited on many systems, and it is good not to waste them unnecessarily.</target>
        </trans-unit>
        <trans-unit id="a22ce430a5b62c295056d355313b80ff0114f835" translate="yes" xml:space="preserve">
          <source>, evaluation of &lt;code&gt;(load &quot;foo.el&quot;)&lt;/code&gt; will indeed find it.)</source>
          <target state="translated">, evaluation of &lt;code&gt;(load &quot;foo.el&quot;)&lt;/code&gt; will indeed find it.)</target>
        </trans-unit>
        <trans-unit id="e5a1268712480aa95c0218117a55890eb20d28e2" translate="yes" xml:space="preserve">
          <source>, even if it is not normally displayed.</source>
          <target state="translated">, even if it is not normally displayed.</target>
        </trans-unit>
        <trans-unit id="950f055f692941d0732489afb3c87c393e5b4217" translate="yes" xml:space="preserve">
          <source>, followed by a control character, a digit, or</source>
          <target state="translated">, followed by a control character, a digit, or</target>
        </trans-unit>
        <trans-unit id="b007ec8bf6702cc8237da75271bf78b9f29a1563" translate="yes" xml:space="preserve">
          <source>, for Emacs commands that make use of these selections. This section documents the low-level functions for reading and setting window-system selections.</source>
          <target state="translated">, for Emacs commands that make use of these selections. This section documents the low-level functions for reading and setting window-system selections.</target>
        </trans-unit>
        <trans-unit id="20f7d2663951c54d4b52f7c9239ca65bae3a98b4" translate="yes" xml:space="preserve">
          <source>, for a description of file mode specifications.</source>
          <target state="translated">, for a description of file mode specifications.</target>
        </trans-unit>
        <trans-unit id="793eae959d2cbca89e75e046b4a2b7b626fdbf46" translate="yes" xml:space="preserve">
          <source>, for a description of mode bit specifications.</source>
          <target state="translated">, for a description of mode bit specifications.</target>
        </trans-unit>
        <trans-unit id="b194e15bf7628c069794dc50861c39d04eb9b20e" translate="yes" xml:space="preserve">
          <source>, for a description of mode bits. For example, if the low-order bit is 1, the file is executable by all users; if the second-lowest-order bit is 1, the file is writable by all users; etc. The highest possible value is 4095 (7777 octal), meaning that everyone has read, write, and execute permission, the</source>
          <target state="translated">, for a description of mode bits. For example, if the low-order bit is 1, the file is executable by all users; if the second-lowest-order bit is 1, the file is writable by all users; etc. The highest possible value is 4095 (7777 octal), meaning that everyone has read, write, and execute permission, the</target>
        </trans-unit>
        <trans-unit id="db7d098258232badcef8107e75ae191e8ff619e5" translate="yes" xml:space="preserve">
          <source>, for a description of the available completion styles.</source>
          <target state="translated">, for a description of the available completion styles.</target>
        </trans-unit>
        <trans-unit id="585c324b520785697bd3b571a6d51316a9eccae5" translate="yes" xml:space="preserve">
          <source>, for a description of user-level features of the packaging system.</source>
          <target state="translated">, for a description of user-level features of the packaging system.</target>
        </trans-unit>
        <trans-unit id="5fdba2f3c85273e11fb3c7c2d762f2461cb5710a" translate="yes" xml:space="preserve">
          <source>, for basic information about file-local variables. This section describes the functions and variables that affect how file-local variables are processed.</source>
          <target state="translated">, for basic information about file-local variables. This section describes the functions and variables that affect how file-local variables are processed.</target>
        </trans-unit>
        <trans-unit id="bd58e28c4b7f5b816bd711f90aacde43f8a23c0d" translate="yes" xml:space="preserve">
          <source>, for details.</source>
          <target state="translated">、 詳細については。</target>
        </trans-unit>
        <trans-unit id="104ab1ab741152cc42897531cd059413e04b3b84" translate="yes" xml:space="preserve">
          <source>, for examples of how to make various commonly desired customizations in your</source>
          <target state="translated">, for examples of how to make various commonly desired customizations in your</target>
        </trans-unit>
        <trans-unit id="a1d481a3867e08f3e83c10412ec67ffc9ef84492" translate="yes" xml:space="preserve">
          <source>, for information about XLFDs. If the name is too long for an XLFD (which can contain at most 255 characters), the function returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">, for information about XLFDs. If the name is too long for an XLFD (which can contain at most 255 characters), the function returns &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="85bd4ad821eec4d4d1c0a55b469f8aa705350f27" translate="yes" xml:space="preserve">
          <source>, for information on auto-save for users. Here we describe the functions used to implement auto-saving and the variables that control them.</source>
          <target state="translated">, for information on auto-save for users. Here we describe the functions used to implement auto-saving and the variables that control them.</target>
        </trans-unit>
        <trans-unit id="fbcb41f680fdc0f30920ae9c189fa440d07aee3e" translate="yes" xml:space="preserve">
          <source>, for information on how users use input methods to enter text.) How to define input methods is not yet documented in this manual, but here we describe how to use them.</source>
          <target state="translated">, for information on how users use input methods to enter text.) How to define input methods is not yet documented in this manual, but here we describe how to use them.</target>
        </trans-unit>
        <trans-unit id="8844630297e4483f6d0b066bd991a4fbbd9871bf" translate="yes" xml:space="preserve">
          <source>, for more details.</source>
          <target state="translated">, for more details.</target>
        </trans-unit>
        <trans-unit id="56b35b1f0c39ee275d44400e546966add8810635" translate="yes" xml:space="preserve">
          <source>, for more information about X resources.</source>
          <target state="translated">, for more information about X resources.</target>
        </trans-unit>
        <trans-unit id="65675fd31b2974ea1401d0e2ceb3562c1bab856e" translate="yes" xml:space="preserve">
          <source>, for more information about font families. The function &lt;code&gt;font-family-list&lt;/code&gt; (see below) returns a list of available family names.</source>
          <target state="translated">, for more information about font families. The function &lt;code&gt;font-family-list&lt;/code&gt; (see below) returns a list of available family names.</target>
        </trans-unit>
        <trans-unit id="2f644b60d3d513dab1caba09d9d23731c9e7b301" translate="yes" xml:space="preserve">
          <source>, for more information about locales and locale items.</source>
          <target state="translated">, for more information about locales and locale items.</target>
        </trans-unit>
        <trans-unit id="9f39a21badb6706968aaf6c6f88fea87fa23ff8c" translate="yes" xml:space="preserve">
          <source>, for that. Instead we are going to demonstrate the minimal functionality needed for defining new customize types by a simple example.</source>
          <target state="translated">, for that. Instead we are going to demonstrate the minimal functionality needed for defining new customize types by a simple example.</target>
        </trans-unit>
        <trans-unit id="d4b370a66bde502f6b741a0018aadba6ae1b0039" translate="yes" xml:space="preserve">
          <source>, for the commands to use in that buffer. You can change the speed and the configuration in the mode line menu. If &lt;var&gt;line-mode&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;term-line-mode&lt;/code&gt; is used; otherwise &lt;code&gt;term-raw-mode&lt;/code&gt; is used.</source>
          <target state="translated">, for the commands to use in that buffer. You can change the speed and the configuration in the mode line menu. If &lt;var&gt;line-mode&lt;/var&gt; is non- &lt;code&gt;nil&lt;/code&gt; , &lt;code&gt;term-line-mode&lt;/code&gt; is used; otherwise &lt;code&gt;term-raw-mode&lt;/code&gt; is used.</target>
        </trans-unit>
        <trans-unit id="f2d956e3325f132feba7fd3f3e93cf7539b748fe" translate="yes" xml:space="preserve">
          <source>, for the details on what happens when a disabled command is invoked interactively. Disabling a command has no effect on calling it as a function from Lisp programs.</source>
          <target state="translated">, for the details on what happens when a disabled command is invoked interactively. Disabling a command has no effect on calling it as a function from Lisp programs.</target>
        </trans-unit>
        <trans-unit id="ad9b95b93b64a88d5404f19fe41f0990e8365e02" translate="yes" xml:space="preserve">
          <source>, for the syntax of the local variables section of a file.</source>
          <target state="translated">, for the syntax of the local variables section of a file.</target>
        </trans-unit>
        <trans-unit id="00fc6fc5bd1f54b3ca5a1af3116e61fd7be936be" translate="yes" xml:space="preserve">
          <source>, for various integers &lt;var&gt;v&lt;/var&gt;, like this:</source>
          <target state="translated">, for various integers &lt;var&gt;v&lt;/var&gt; , like this:</target>
        </trans-unit>
        <trans-unit id="53ff2b2e7c84eba26737940f1be2d6a10a3c5995" translate="yes" xml:space="preserve">
          <source>, if it exists. This is not done if &lt;code&gt;inhibit-default-init&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, nor if the options &amp;lsquo;</source>
          <target state="translated">, if it exists. This is not done if &lt;code&gt;inhibit-default-init&lt;/code&gt; is non- &lt;code&gt;nil&lt;/code&gt; , nor if the options &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="ccdf080c9ca45b69c54e877cf9fd45c289dd473f" translate="yes" xml:space="preserve">
          <source>, if it exists. This is not done if the options &amp;lsquo;</source>
          <target state="translated">, if it exists. This is not done if the options &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="271d47b6a11f895a0fedfe51053d20cfd75195f4" translate="yes" xml:space="preserve">
          <source>, if you do it in an Emacs with standard bindings:</source>
          <target state="translated">, if you do it in an Emacs with standard bindings:</target>
        </trans-unit>
        <trans-unit id="40c2c6b4b8428f90a56994e3b6b74a1c96e54d2e" translate="yes" xml:space="preserve">
          <source>, in order to see the function(s) called by the higher-level function. Use a prefix argument (</source>
          <target state="translated">, in order to see the function(s) called by the higher-level function. Use a prefix argument (</target>
        </trans-unit>
        <trans-unit id="331dee74741b368fc0ab29ac0935fd691368d3e7" translate="yes" xml:space="preserve">
          <source>, in the directory specified by &lt;code&gt;doc-directory&lt;/code&gt; (see &lt;a href=&quot;accessing-documentation#Accessing-Documentation&quot;&gt;Accessing Documentation&lt;/a&gt;). Secondly, when a function or variable is loaded from a byte-compiled file, Emacs avoids loading its documentation string (see &lt;a href=&quot;docs-and-compilation#Docs-and-Compilation&quot;&gt;Docs and Compilation&lt;/a&gt;). In both cases, Emacs looks up the documentation string from the file only when needed, such as when the user calls</source>
          <target state="translated">, in the directory specified by &lt;code&gt;doc-directory&lt;/code&gt; (see &lt;a href=&quot;accessing-documentation#Accessing-Documentation&quot;&gt;Accessing Documentation&lt;/a&gt;). Secondly, when a function or variable is loaded from a byte-compiled file, Emacs avoids loading its documentation string (see &lt;a href=&quot;docs-and-compilation#Docs-and-Compilation&quot;&gt;Docs and Compilation&lt;/a&gt;). In both cases, Emacs looks up the documentation string from the file only when needed, such as when the user calls</target>
        </trans-unit>
        <trans-unit id="7254429858fea6e1dfaa04c558d313cd2c1adc29" translate="yes" xml:space="preserve">
          <source>, in which case Emacs should not sit there waiting for the next key to decide whether the user really pressed</source>
          <target state="translated">, in which case Emacs should not sit there waiting for the next key to decide whether the user really pressed</target>
        </trans-unit>
        <trans-unit id="a1dde2f6c518f2de5fd42e1b7dece35513c35a3f" translate="yes" xml:space="preserve">
          <source>, including use of similar names, so if you have experience with</source>
          <target state="translated">, including use of similar names, so if you have experience with</target>
        </trans-unit>
        <trans-unit id="5fb0e65b91cd2cf002ddd52c60f0956d8c1dd410" translate="yes" xml:space="preserve">
          <source>, instead.) This is one of the solutions recommended by the UBA.</source>
          <target state="translated">, instead.) This is one of the solutions recommended by the UBA.</target>
        </trans-unit>
        <trans-unit id="1b30181c2e8b8c2e46c27c2ea2678bb5246f89f4" translate="yes" xml:space="preserve">
          <source>, invoke Emacs with the</source>
          <target state="translated">, invoke Emacs with the</target>
        </trans-unit>
        <trans-unit id="7ebf3357763f24dbfffbc00326a57137cee7d5de" translate="yes" xml:space="preserve">
          <source>, is available to instrument any top-level form regardless of the values of &lt;code&gt;edebug-all-defs&lt;/code&gt; and &lt;code&gt;edebug-all-forms&lt;/code&gt;. &lt;code&gt;edebug-defun&lt;/code&gt; is an alias for &lt;code&gt;edebug-eval-top-level-form&lt;/code&gt;.</source>
          <target state="translated">, is available to instrument any top-level form regardless of the values of &lt;code&gt;edebug-all-defs&lt;/code&gt; and &lt;code&gt;edebug-all-forms&lt;/code&gt; . &lt;code&gt;edebug-defun&lt;/code&gt; is an alias for &lt;code&gt;edebug-eval-top-level-form&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8c1be56b68bc613247fe8bb6974c0abe61da899a" translate="yes" xml:space="preserve">
          <source>, is not considered an error, but it is handled almost like an error. See &lt;a href=&quot;quitting#Quitting&quot;&gt;Quitting&lt;/a&gt;.</source>
          <target state="translated">, is not considered an error, but it is handled almost like an error. See &lt;a href=&quot;quitting#Quitting&quot;&gt;Quitting&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b19964093ad87aca99cd799771143b36f13cdce5" translate="yes" xml:space="preserve">
          <source>, it &lt;em&gt;is&lt;/em&gt; possible to put a space into the string, by quoting it.</source>
          <target state="translated">、引用することで文字列にスペースを入れること&lt;em&gt;が&lt;/em&gt;できます。</target>
        </trans-unit>
        <trans-unit id="2af423e7ec002dc9f382ded690f80c2da79045b4" translate="yes" xml:space="preserve">
          <source>, it finds the documentation strings for primitive and preloaded functions (and variables) in the file</source>
          <target state="translated">、ファイル内のプリミティブ関数とプリロードされた関数（および変数）のドキュメント文字列を検索します</target>
        </trans-unit>
        <trans-unit id="5a01ba5cc3073713f30497e256a743de76d646b2" translate="yes" xml:space="preserve">
          <source>, it is discarded. Any other terminating character is used as input after this function returns.</source>
          <target state="translated">、破棄されます。この関数が戻った後、他の終了文字が入力として使用されます。</target>
        </trans-unit>
        <trans-unit id="f01de15c191684f3a94dfac8ae99aaed5c70bea1" translate="yes" xml:space="preserve">
          <source>, it is marked as read-only (on operating systems that permit this), so that the memory space can be shared by all the Emacs jobs running on the machine at once. Pure storage is not expandable; a fixed amount is allocated when Emacs is compiled, and if that is not sufficient for the preloaded libraries,</source>
          <target state="translated">、（これを許可するオペレーティングシステムでは）読み取り専用としてマークされているため、マシン上で実行されているすべてのEmacsジョブでメモリスペースを一度に共有できます。ピュアストレージは拡張できません。Emacsのコンパイル時に固定量が割り当てられ、それがプリロードされたライブラリにとって十分でない場合は、</target>
        </trans-unit>
        <trans-unit id="a0778941e4c9248c045cf2bf276ef338d80ddd50" translate="yes" xml:space="preserve">
          <source>, it is possible to define more complex function and data types: interactive functions, inline functions, macros, etc. However, the resulting C code will be cumbersome and hard to read. Therefore, we recommend that you limit the module code which creates functions and data structures to the absolute minimum, and leave the rest for a Lisp package that will accompany your module, because doing these additional tasks in Lisp is much easier, and will produce a much more readable code. For example, given a module function &lt;code&gt;module-func&lt;/code&gt; defined as above, one way of making an interactive command &lt;code&gt;module-cmd&lt;/code&gt; based on it is with the following simple Lisp wrapper:</source>
          <target state="translated">、インタラクティブ関数、インライン関数、マクロなど、より複雑な関数とデータ型を定義することは可能です。ただし、結果のCコードは扱いにくく、読みにくいものになります。したがって、関数とデータ構造を作成するモジュールコードを最小限に制限し、残りをモジュールに付属するLispパッケージに残すことをお勧めします。これは、Lispでこれらの追加タスクを実行する方がはるかに簡単であり、はるかに読みやすいコード。たとえば、上記のように定義されたモジュール関数 &lt;code&gt;module-func&lt;/code&gt; が与えられた場合、それに基づいて対話型コマンド &lt;code&gt;module-cmd&lt;/code&gt; を作成する1つの方法は、次の単純なLispラッパーを使用することです。</target>
        </trans-unit>
        <trans-unit id="e7f0fff2629f320da8fa8bd6e27ad4a352f52e1c" translate="yes" xml:space="preserve">
          <source>, it means you should consider recompiling</source>
          <target state="translated">、それはあなたが再コンパイルを検討する必要があることを意味します</target>
        </trans-unit>
        <trans-unit id="b1aded5e1ebeb3e1027f429710f9ceef9614fc4c" translate="yes" xml:space="preserve">
          <source>, it sets the mode to &lt;code&gt;initial-major-mode&lt;/code&gt;.</source>
          <target state="translated">、モードを &lt;code&gt;initial-major-mode&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="850f4fcb9bb52103cd0cad2bd7acd0f822828335" translate="yes" xml:space="preserve">
          <source>, just as you would in</source>
          <target state="translated">、あなたがするのと同じように</target>
        </trans-unit>
        <trans-unit id="84832595d3cbe2b517545c0c4504977d15e937f6" translate="yes" xml:space="preserve">
          <source>, leaving</source>
          <target state="translated">、去る</target>
        </trans-unit>
        <trans-unit id="c45dbcf2752b210609d4ca15ceb586e283ab9947" translate="yes" xml:space="preserve">
          <source>, likewise (&lt;code&gt;file-attribute-group-id&lt;/code&gt;).</source>
          <target state="translated">、同様に（ &lt;code&gt;file-attribute-group-id&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="259c114ff84a62fbecc21be8d807ee9cea0da371" translate="yes" xml:space="preserve">
          <source>, non-printing characters &lt;code&gt;U+0080&lt;/code&gt; to &lt;code&gt;U+009F&lt;/code&gt; (normally displayed as octal escape sequences like &amp;lsquo;</source>
          <target state="translated">、非印刷文字 &lt;code&gt;U+0080&lt;/code&gt; &lt;code&gt;U+009F&lt;/code&gt; からU + 009F（通常は 'のような8進エスケープシーケンスとして表示されます</target>
        </trans-unit>
        <trans-unit id="a65d6b7901ddab6bf32beb522c2ee8923c1da658" translate="yes" xml:space="preserve">
          <source>, normally as a string (&lt;code&gt;file-attribute-user-id&lt;/code&gt;). However, if it does not correspond to a named user, the value is an integer.</source>
          <target state="translated">、通常は文字列（ &lt;code&gt;file-attribute-user-id&lt;/code&gt; ）として。ただし、指定されたユーザーに対応していない場合、値は整数です。</target>
        </trans-unit>
        <trans-unit id="74fb43cfb1e296ecc158b16063c7aa5647a5fd0a" translate="yes" xml:space="preserve">
          <source>, not the real</source>
          <target state="translated">、本物ではない</target>
        </trans-unit>
        <trans-unit id="801d3767fa2e19fb28c1655e44d8607d399b04ad" translate="yes" xml:space="preserve">
          <source>, one function entry or exit per line, indented by the recursion level.</source>
          <target state="translated">、再帰レベルによってインデントされた、行ごとに1つの関数エントリまたは出口。</target>
        </trans-unit>
        <trans-unit id="b366d1a229ec84d93ba42e7ecafb33db5b7b9b39" translate="yes" xml:space="preserve">
          <source>, or</source>
          <target state="translated">、または</target>
        </trans-unit>
        <trans-unit id="7bfcc2866caf44f9ba3993d6d7be5414fab59b55" translate="yes" xml:space="preserve">
          <source>, or &amp;ldquo;not a number&amp;rdquo;.</source>
          <target state="translated">、または「数値ではありません」。</target>
        </trans-unit>
        <trans-unit id="c2dd491507686d31a3a4ac2c1232e40603b3f0b2" translate="yes" xml:space="preserve">
          <source>, or a control character or digit, are reserved for major modes. Also,</source>
          <target state="translated">、または制御文字または数字は、メジャーモード用に予約されています。また、</target>
        </trans-unit>
        <trans-unit id="ad3ce66cbe484a009c1b8dbe0e19d592c8f03cb0" translate="yes" xml:space="preserve">
          <source>, or any editing command.</source>
          <target state="translated">、または任意の編集コマンド。</target>
        </trans-unit>
        <trans-unit id="95cbc9818cfc368701ad4b911e5f5c40e68f5ffd" translate="yes" xml:space="preserve">
          <source>, or if the module function or its callees signaled an error or exited nonlocally (see &lt;a href=&quot;module-nonlocal#Module-Nonlocal&quot;&gt;Module Nonlocal&lt;/a&gt;), Emacs will ignore the returned value and quit or throw as it does when Lisp code encounters the same situations.</source>
          <target state="translated">、またはモジュール関数またはその呼び出し先がエラーを通知したか、非ローカルで終了した場合（&lt;a href=&quot;module-nonlocal#Module-Nonlocal&quot;&gt;モジュール非&lt;/a&gt;ローカルを参照）、Emacsは戻り値を無視し、Lispコードが同じ状況に遭遇したときと同じように終了またはスローします。</target>
        </trans-unit>
        <trans-unit id="7a9a4144d73765f2025df16e9ae920efa23ffda9" translate="yes" xml:space="preserve">
          <source>, or simply delete the text for the group and update the evaluation list with</source>
          <target state="translated">、または単にグループのテキストを削除し、評価リストを次のように更新します</target>
        </trans-unit>
        <trans-unit id="ebeaf27d279a4390c9a93f2537dd066f9203fcfe" translate="yes" xml:space="preserve">
          <source>, or something that quits), the function responds &amp;lsquo;</source>
          <target state="translated">、または終了するもの）、関数は応答します '</target>
        </trans-unit>
        <trans-unit id="384021a65d1d1a4f831c785a4314b21c72918bb7" translate="yes" xml:space="preserve">
          <source>, or that some analogous thing has happened.</source>
          <target state="translated">、またはいくつかの類似したことが起こったこと。</target>
        </trans-unit>
        <trans-unit id="a5441141ea72b94e39215f9e0c87dfc2b5309741" translate="yes" xml:space="preserve">
          <source>, or up- and down-arrow keys.</source>
          <target state="translated">、または上矢印キーと下矢印キー。</target>
        </trans-unit>
        <trans-unit id="c3553652b6dbe514bb22b0b88ea52b357cd0bc87" translate="yes" xml:space="preserve">
          <source>, sets &lt;code&gt;edebug-initial-mode&lt;/code&gt;. It prompts you for a key to indicate the mode. You should enter one of the eight keys listed above, which sets the corresponding mode.</source>
          <target state="translated">、 &lt;code&gt;edebug-initial-mode&lt;/code&gt; を設定します。モードを示すキーの入力を求められます。上記の8つのキーのいずれかを入力して、対応するモードを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="491c3177bf09e8149addbed4486879dbfda63e5c" translate="yes" xml:space="preserve">
          <source>, so Emacs uses the 2**25 bit in</source>
          <target state="translated">、したがってEmacsは2 ** 25ビットを使用します</target>
        </trans-unit>
        <trans-unit id="2d4fdb2d9eef4209a8679c5d398da855fa007b68" translate="yes" xml:space="preserve">
          <source>, so it uses the string &amp;lsquo;</source>
          <target state="translated">、したがって、文字列 'を使用します</target>
        </trans-unit>
        <trans-unit id="75a62d4bb14e4617f0ec8777696c00a78e6355cd" translate="yes" xml:space="preserve">
          <source>, so that users can override your changes if they wish. See &lt;a href=&quot;startup-summary#Startup-Summary&quot;&gt;Startup Summary&lt;/a&gt;. Note that if either</source>
          <target state="translated">、ユーザーが必要に応じて変更を上書きできるようにします。&lt;a href=&quot;startup-summary#Startup-Summary&quot;&gt;スタートアップの概要を&lt;/a&gt;参照してください。いずれかの場合に注意してください</target>
        </trans-unit>
        <trans-unit id="936c93afcbf934222d5dff1671b0eecf323f0d2d" translate="yes" xml:space="preserve">
          <source>, such as</source>
          <target state="translated">、 といった</target>
        </trans-unit>
        <trans-unit id="bce5222fc5fc63bb67a806b561a412a2ad48ccc7" translate="yes" xml:space="preserve">
          <source>, that is, for a file whose name is &lt;var&gt;filename&lt;/var&gt; with the extension &amp;lsquo;</source>
          <target state="translated">、つまり、名前が &lt;var&gt;filename&lt;/var&gt; で拡張子が 'のファイルの場合</target>
        </trans-unit>
        <trans-unit id="8ef49190ec4cb9b5814fd9d63465c6426302cbda" translate="yes" xml:space="preserve">
          <source>, that kills the subprocess instantly with &lt;code&gt;SIGKILL&lt;/code&gt; and quits immediately (except on MS-DOS, where killing other processes doesn&amp;rsquo;t work). See &lt;a href=&quot;quitting#Quitting&quot;&gt;Quitting&lt;/a&gt;.</source>
          <target state="translated">、これは &lt;code&gt;SIGKILL&lt;/code&gt; を使用してサブプロセスを即座に強制終了し、すぐに終了します（MS-DOSを除き、他のプロセスの強制終了は機能しません）。&lt;a href=&quot;quitting#Quitting&quot;&gt;終了を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b76999fd0fa519f9eae96e8e6d9eae19226fb53f" translate="yes" xml:space="preserve">
          <source>, the &lt;em&gt;content directory&lt;/em&gt; (see &lt;a href=&quot;packaging-basics#Packaging-Basics&quot;&gt;Packaging Basics&lt;/a&gt;). Files may also extract into subdirectories of the content directory.</source>
          <target state="translated">、&lt;em&gt;コンテンツディレクトリ&lt;/em&gt;（&lt;a href=&quot;packaging-basics#Packaging-Basics&quot;&gt;パッケージングの基本を&lt;/a&gt;参照）。ファイルは、コンテンツディレクトリのサブディレクトリに抽出される場合もあります。</target>
        </trans-unit>
        <trans-unit id="8465b7d48ed4ca88d608a874cc8429e836a56ae5" translate="yes" xml:space="preserve">
          <source>, the &lt;var&gt;newname&lt;/var&gt;</source>
          <target state="translated">、 &lt;var&gt;newname&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="6f625e702b29cb575b0a620b0d66dedcfd75b493" translate="yes" xml:space="preserve">
          <source>, the character whose value is 9.</source>
          <target state="translated">、値が9の文字。</target>
        </trans-unit>
        <trans-unit id="570ce3746587271f7e97d2af2dcaaa694bb83415" translate="yes" xml:space="preserve">
          <source>, the definition for &lt;code&gt;idlwave-complete-filename&lt;/code&gt; includes the following code:</source>
          <target state="translated">、 &lt;code&gt;idlwave-complete-filename&lt;/code&gt; の定義には、次のコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="693758fe3cc6c68b4177a63b54de56e3820df82c" translate="yes" xml:space="preserve">
          <source>, the function returns 1, which is the</source>
          <target state="translated">、関数は1を返します。これは、</target>
        </trans-unit>
        <trans-unit id="f7635ad74fd6b235954b8ca05a1ccc51695adac9" translate="yes" xml:space="preserve">
          <source>, the function returns 134217729, 8000001 in hex, i.e. &amp;lsquo;</source>
          <target state="translated">、関数は16進数で134217729、8000001を返します。</target>
        </trans-unit>
        <trans-unit id="07bb66bbcd3d6aa188e3c9b7b9823aa1bf18ef9d" translate="yes" xml:space="preserve">
          <source>, the names of its numbered backup versions are</source>
          <target state="translated">、番号が付けられたバックアップバージョンの名前は</target>
        </trans-unit>
        <trans-unit id="de3218635582472b0098ed4fbb4005530692c1eb" translate="yes" xml:space="preserve">
          <source>, the rest of this section will sound very familiar.</source>
          <target state="translated">、このセクションの残りの部分は非常に馴染み深いように聞こえます。</target>
        </trans-unit>
        <trans-unit id="74c551eda534f73b849ea817621b9b1b8680f2db" translate="yes" xml:space="preserve">
          <source>, the value refers to the corresponding source file.</source>
          <target state="translated">、値は対応するソースファイルを参照します。</target>
        </trans-unit>
        <trans-unit id="570e3d1970c63f701be009a816968c5405646cd7" translate="yes" xml:space="preserve">
          <source>, then Emacs will translate</source>
          <target state="translated">、その後、Emacsは翻訳します</target>
        </trans-unit>
        <trans-unit id="f5a07451cc9a412265cc9c56a26655232cecf72b" translate="yes" xml:space="preserve">
          <source>, then copy the files into the installation directory for Lisp files when you install Emacs.</source>
          <target state="translated">、Emacsをインストールするときに、ファイルをLispファイルのインストールディレクトリにコピーします。</target>
        </trans-unit>
        <trans-unit id="8fe6de79f8f8d7ff4ec4961ba6b858d923159e00" translate="yes" xml:space="preserve">
          <source>, then it reads the name of another command, which it then calls. This is done by the command &lt;code&gt;execute-extended-command&lt;/code&gt; (see &lt;a href=&quot;interactive-call#Interactive-Call&quot;&gt;Interactive Call&lt;/a&gt;).</source>
          <target state="translated">、次に別のコマンドの名前を読み取り、それを呼び出します。これは、コマンド &lt;code&gt;execute-extended-command&lt;/code&gt; によって実行されます（&lt;a href=&quot;interactive-call#Interactive-Call&quot;&gt;インタラクティブコールを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="cb833ae231baf6ef09e8c5f4f0d530ef71ba493f" translate="yes" xml:space="preserve">
          <source>, then this function returns &lt;code&gt;forward-char&lt;/code&gt;.</source>
          <target state="translated">の場合、この関数は &lt;code&gt;forward-char&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9bff9c70df1ebf8baf219de2feaeff785195c039" translate="yes" xml:space="preserve">
          <source>, then this normally results in a quit and &lt;code&gt;x-popup-menu&lt;/code&gt; does not return. But if &lt;var&gt;position&lt;/var&gt; is a mouse button event (indicating that the user invoked the menu with the mouse) then no quit occurs and &lt;code&gt;x-popup-menu&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">、その後、これは通常終了し、 &lt;code&gt;x-popup-menu&lt;/code&gt; は戻りません。ただし、 &lt;var&gt;position&lt;/var&gt; がマウスボタンイベント（ユーザーがマウスでメニューを呼び出したことを示す）の場合、終了は発生せず、 &lt;code&gt;x-popup-menu&lt;/code&gt; は &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="3f5581ab98055d42a927035928858c39da8897b8" translate="yes" xml:space="preserve">
          <source>, this file is used as the long description (overriding any &amp;lsquo;</source>
          <target state="translated">、このファイルは長い説明として使用されます（ 'をオーバーライドします</target>
        </trans-unit>
        <trans-unit id="34887d4f30f8425f4c841e6b5d4a249dfc4ae9b1" translate="yes" xml:space="preserve">
          <source>, this is assumed to be an Info directory file made with &lt;code&gt;install-info&lt;/code&gt;. See &lt;a href=&quot;http://www.gnu.org/software/texinfo/manual/texinfo/html_node/Invoking-install_002dinfo.html#Invoking-install_002dinfo&quot;&gt;Invoking install-info&lt;/a&gt; in</source>
          <target state="translated">、これは、 &lt;code&gt;install-info&lt;/code&gt; で作成されたInfoディレクトリファイルであると見なされます。参照&lt;a href=&quot;http://www.gnu.org/software/texinfo/manual/texinfo/html_node/Invoking-install_002dinfo.html#Invoking-install_002dinfo&quot;&gt;の呼び出しは、インストール-情報を&lt;/a&gt;中</target>
        </trans-unit>
        <trans-unit id="3ab7f8a96990afab1ca4d331462ceffc479cc7fb" translate="yes" xml:space="preserve">
          <source>, this would map &amp;lsquo;</source>
          <target state="translated">、これはマップされます '</target>
        </trans-unit>
        <trans-unit id="75a2ab01a9d133f3393cad3c0b33aa097865fb29" translate="yes" xml:space="preserve">
          <source>, to evaluate expressions interactively. You can also set up the &lt;em&gt;evaluation list&lt;/em&gt; of expressions to be evaluated automatically each time Edebug updates the display.</source>
          <target state="translated">、式をインタラクティブに評価します。Edebugが表示を更新するたびに自動的に評価される式の&lt;em&gt;評価リスト&lt;/em&gt;を設定することもできます。</target>
        </trans-unit>
        <trans-unit id="3171d5064865c9dbd2c26248d58a4a642fa2257d" translate="yes" xml:space="preserve">
          <source>, to the end of each field that may have bidirectional content, or prepend it to the beginning of the following field. The function &lt;code&gt;bidi-string-mark-left-to-right&lt;/code&gt;, described below, comes in handy for this purpose. (In a right-to-left paragraph, use U+200F &lt;small&gt;RIGHT-TO-LEFT MARK&lt;/small&gt;, or</source>
          <target state="translated">、双方向コンテンツを持つ可能性のある各フィールドの最後に、または次のフィールドの最初に追加します。以下で説明する関数 &lt;code&gt;bidi-string-mark-left-to-right&lt;/code&gt; は、この目的に役立ちます。（右から左の段落では、U + 200Fの&lt;small&gt;右から左のマーク&lt;/small&gt;を使用するか、</target>
        </trans-unit>
        <trans-unit id="f532f4650c3b6bb5627c80d03456904539897e9b" translate="yes" xml:space="preserve">
          <source>, to visit the source code. You can also type</source>
          <target state="translated">、ソースコードにアクセスします。入力することもできます</target>
        </trans-unit>
        <trans-unit id="afc0091c7f573bf20611ebe5d30457ae56ff9b22" translate="yes" xml:space="preserve">
          <source>, type</source>
          <target state="translated">、タイプ</target>
        </trans-unit>
        <trans-unit id="f1567d51181fba773ba40085364e6edaaf98999f" translate="yes" xml:space="preserve">
          <source>, uses a keymap which is also the value of the variable &lt;code&gt;ctl-x-4-map&lt;/code&gt;. The event &lt;code&gt;mode-line&lt;/code&gt; is one of several dummy events used as prefixes for mouse actions in special parts of a window.</source>
          <target state="translated">は、変数 &lt;code&gt;ctl-x-4-map&lt;/code&gt; の値でもあるキーマップを使用します。イベント &lt;code&gt;mode-line&lt;/code&gt; は、ウィンドウの特別な部分でのマウスアクションのプレフィックスとして使用されるいくつかのダミーイベントの1つです。</target>
        </trans-unit>
        <trans-unit id="33fab3a53ef64d0b8deade8f74732ed726444ee7" translate="yes" xml:space="preserve">
          <source>, where &lt;var&gt;emacs-name&lt;/var&gt; is the name of the Emacs executable file. The optional argument &lt;var&gt;track-referrers&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, causes the portable dumper to keep additional information to help track down the provenance of object types that are not yet supported by the &lt;code&gt;pdump&lt;/code&gt; method.</source>
          <target state="translated">、ここで、 &lt;var&gt;emacs-name&lt;/var&gt; はEmacs実行可能ファイルの名前です。オプションの引数 &lt;var&gt;track-referrers&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; でない場合、ポータブルダンパーは、 &lt;code&gt;pdump&lt;/code&gt; メソッドでまだサポートされていないオブジェクトタイプの出所を追跡するのに役立つ追加情報を保持します。</target>
        </trans-unit>
        <trans-unit id="c369b21f1741d6a2f5d19477217e5c5eb2cbc15a" translate="yes" xml:space="preserve">
          <source>, where &lt;var&gt;ext&lt;/var&gt; is a system-dependent file-name extension of shared libraries. Finally, if neither of those names is found, &lt;code&gt;load&lt;/code&gt; looks for a file named &lt;var&gt;filename&lt;/var&gt; with nothing appended, and loads it if it exists. (The &lt;code&gt;load&lt;/code&gt; function is not clever about looking at &lt;var&gt;filename&lt;/var&gt;. In the perverse case of a file named</source>
          <target state="translated">、ここで、 &lt;var&gt;ext&lt;/var&gt; は共有ライブラリのシステム依存のファイル名拡張子です。最後に、これらの名前のどちらも見つからない場合、 &lt;code&gt;load&lt;/code&gt; は何も追加されていない &lt;var&gt;filename&lt;/var&gt; という名前のファイルを探し、存在する場合はそれをロードします。（ &lt;code&gt;load&lt;/code&gt; 関数は &lt;var&gt;filename&lt;/var&gt; 見るのに賢くありません。という名前のファイルのひねくれた場合</target>
        </trans-unit>
        <trans-unit id="5ffdef9a047e69c5f12ce0156850fe05da245a31" translate="yes" xml:space="preserve">
          <source>, where &lt;var&gt;foo&lt;/var&gt; is the theme name. The first Lisp form in the file should be a call to &lt;code&gt;deftheme&lt;/code&gt;, and the last form should be a call to &lt;code&gt;provide-theme&lt;/code&gt;.</source>
          <target state="translated">、ここで &lt;var&gt;foo&lt;/var&gt; はテーマ名です。ファイルの最初のLispフォームは &lt;code&gt;deftheme&lt;/code&gt; の呼び出しであり、最後のフォームは &lt;code&gt;provide-theme&lt;/code&gt; の呼び出しである必要があります。</target>
        </trans-unit>
        <trans-unit id="6382fed52749a12d31bfb08ac6fa61b93e72d37a" translate="yes" xml:space="preserve">
          <source>, where &lt;var&gt;name&lt;/var&gt; is the package name and &lt;var&gt;version&lt;/var&gt; is the version number. Its contents, once extracted, must all appear in a directory named</source>
          <target state="translated">、ここで、 &lt;var&gt;name&lt;/var&gt; はパッケージ名、 &lt;var&gt;version&lt;/var&gt; はバージョン番号です。その内容は、抽出されると、すべて次の名前のディレクトリに表示される必要があります</target>
        </trans-unit>
        <trans-unit id="1a9f4c48d422ccf449aa38cb62b4fd0124311a2d" translate="yes" xml:space="preserve">
          <source>, where &lt;var&gt;name&lt;/var&gt; is the package&amp;rsquo;s name and &lt;var&gt;version&lt;/var&gt; its version (e.g.,</source>
          <target state="translated">、ここで、 &lt;var&gt;name&lt;/var&gt; はパッケージの名前であり、 &lt;var&gt;version&lt;/var&gt; そのバージョンです（例：</target>
        </trans-unit>
        <trans-unit id="7bbbacd399e08c955bc5a67df4a442eac8874c6b" translate="yes" xml:space="preserve">
          <source>, where it is executed while building Emacs.</source>
          <target state="translated">、Emacsのビルド中に実行されます。</target>
        </trans-unit>
        <trans-unit id="2c558cea7def2b18e7e6c2af543726d48805fb8b" translate="yes" xml:space="preserve">
          <source>, which causes a &lt;em&gt;quit&lt;/em&gt;. See &lt;a href=&quot;quitting#Quitting&quot;&gt;Quitting&lt;/a&gt;.</source>
          <target state="translated">、&lt;em&gt;終了し&lt;/em&gt;ます。&lt;a href=&quot;quitting#Quitting&quot;&gt;終了を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b4831f4c79670e5a03ee0d15897e2ccd52664e78" translate="yes" xml:space="preserve">
          <source>, which has all the standard Lisp files already preloaded into it. (The &amp;lsquo;</source>
          <target state="translated">、すべての標準Lispファイルがすでにプリロードされています。（ '</target>
        </trans-unit>
        <trans-unit id="0108761494e477fe492ad06c3903eeb071193995" translate="yes" xml:space="preserve">
          <source>, which is a meaningful input character under X, using &amp;lsquo;</source>
          <target state="translated">、Xの下で意味のある入力文字であり、 'を使用します</target>
        </trans-unit>
        <trans-unit id="f23f37f9d90b4de59787272c7b1c55a3f9e766bd" translate="yes" xml:space="preserve">
          <source>, which is displayed as &amp;lsquo;</source>
          <target state="translated">、 'として表示されます</target>
        </trans-unit>
        <trans-unit id="2c62658d01fac9b357a47cc2f4f4e77c55982578" translate="yes" xml:space="preserve">
          <source>, which is invalid because this function demands the entire word &amp;lsquo;</source>
          <target state="translated">、この関数は単語全体を要求するため無効です '</target>
        </trans-unit>
        <trans-unit id="c15fdbbc43d3ff48ce5bd7b97ba691fdfaada446" translate="yes" xml:space="preserve">
          <source>, which is normally defined as the &lt;code&gt;backward-word&lt;/code&gt; command. However, if you were to set &lt;code&gt;meta-prefix-char&lt;/code&gt; to 24, the code for</source>
          <target state="translated">、これは通常、 &lt;code&gt;backward-word&lt;/code&gt; コマンドとして定義されます。ただし、 &lt;code&gt;meta-prefix-char&lt;/code&gt; を24に設定すると、</target>
        </trans-unit>
        <trans-unit id="5dc227c531e0734955bcbffe2093e4dab1200cf0" translate="yes" xml:space="preserve">
          <source>, which is preloaded. The default value is set based on &lt;code&gt;data-directory&lt;/code&gt;. The variable needs to access the value of &lt;code&gt;data-directory&lt;/code&gt; when Emacs starts, not when it is dumped, because the Emacs executable has probably been installed in a different location since it was dumped.</source>
          <target state="translated">、プリロードされています。デフォルト値は、 &lt;code&gt;data-directory&lt;/code&gt; に基づいて設定されます。変数は、Emacs実行可能ファイルがダンプされてから別の場所にインストールされている可能性があるため、Emacsがダンプされたときではなく、開始時に &lt;code&gt;data-directory&lt;/code&gt; の値にアクセスする必要があります。</target>
        </trans-unit>
        <trans-unit id="d79712411c1c9a25e15789984ff0672b70486c25" translate="yes" xml:space="preserve">
          <source>, which uses Compilation mode. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html#Compilation-Mode&quot;&gt;Compilation Mode&lt;/a&gt; in</source>
          <target state="translated">、コンパイルモードを使用します。の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html#Compilation-Mode&quot;&gt;コンパイルモード&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="1bb1325314b0546ff09aaeb225d0141d3b90107c" translate="yes" xml:space="preserve">
          <source>, whose standard binding is the &lt;code&gt;switch-to-buffer&lt;/code&gt; command. (Don&amp;rsquo;t actually do this!) Here is an illustration of what would happen:</source>
          <target state="translated">、その標準バインディングは &lt;code&gt;switch-to-buffer&lt;/code&gt; コマンドです。（実際にはこれを行わないでください！）これは、何が起こるかを示しています。</target>
        </trans-unit>
        <trans-unit id="dae9d538231b4711e332a6db49564125c77314e1" translate="yes" xml:space="preserve">
          <source>, whose standard meaning is rarely of any use in the minibuffer. Major modes such as Dired or Rmail that do not allow self-insertion of text can reasonably redefine letters and other printing characters as special commands.</source>
          <target state="translated">、その標準的な意味がミニバッファで使用されることはめったにありません。テキストの自己挿入を許可しないDiredやRmailなどの主要なモードでは、文字やその他の印刷文字を特別なコマンドとして合理的に再定義できます。</target>
        </trans-unit>
        <trans-unit id="54e0ddbf180a14c2b8420316f0adffc4ed1aa3d2" translate="yes" xml:space="preserve">
          <source>, with commas and spaces between them, like this: &lt;code&gt;&quot;\t, \C-a&quot;&lt;/code&gt;. See &lt;a href=&quot;character-type#Character-Type&quot;&gt;Character Type&lt;/a&gt;, for a description of the read syntax for characters.</source>
          <target state="translated">、次のように、カンマとスペースを間に入れます： &lt;code&gt;&quot;\t, \C-a&quot;&lt;/code&gt; 。&lt;a href=&quot;character-type#Character-Type&quot;&gt;文字&lt;/a&gt;の読み取り構文の説明については、「文字タイプ」を参照してください。</target>
        </trans-unit>
        <trans-unit id="b2f72cb53c5d48ea7ac064ffd4880c483576335d" translate="yes" xml:space="preserve">
          <source>, without the final slash).</source>
          <target state="translated">、最後のスラッシュなし）。</target>
        </trans-unit>
        <trans-unit id="2c7b15edf84ace76ceebd4e6f87c7b26d24e3b21" translate="yes" xml:space="preserve">
          <source>, you can return to the source code buffer with</source>
          <target state="translated">、でソースコードバッファに戻ることができます</target>
        </trans-unit>
        <trans-unit id="6546d41b943f923ac4efda201cb58b4407fd5d23" translate="yes" xml:space="preserve">
          <source>, your init file, and</source>
          <target state="translated">、initファイル、および</target>
        </trans-unit>
        <trans-unit id="3bc15c8aae3e4124dd409035f32ea2fd6835efc9" translate="yes" xml:space="preserve">
          <source>-</source>
          <target state="translated">-</target>
        </trans-unit>
        <trans-unit id="33285e44fa9db112bb52db18a1217ab92887c9ae" translate="yes" xml:space="preserve">
          <source>-  Separate fields with a &lt;code&gt;display&lt;/code&gt; property or overlay with a property value of the form &lt;code&gt;(space . PROPS)&lt;/code&gt; (see &lt;a href=&quot;specified-space#Specified-Space&quot;&gt;Specified Space&lt;/a&gt;). Emacs treats this display specification as a &lt;em&gt;paragraph separator&lt;/em&gt;, and reorders the text on either side separately.</source>
          <target state="translated">-フィールドを &lt;code&gt;display&lt;/code&gt; プロパティで区切るか、フォームのプロパティ値 &lt;code&gt;(space . PROPS)&lt;/code&gt; オーバーレイします（&lt;a href=&quot;specified-space#Specified-Space&quot;&gt;指定されたスペースを&lt;/a&gt;参照）。Emacsはこの表示仕様を&lt;em&gt;段落区切り文字&lt;/em&gt;として扱い、両側のテキストを別々に並べ替えます。</target>
        </trans-unit>
        <trans-unit id="06b3cad9047eefc675d5e3671032a05da35fa6a5" translate="yes" xml:space="preserve">
          <source>- &lt;code&gt;regexp-history-last&lt;/code&gt;, which means to use the first element of the appropriate minibuffer history list (see below).</source>
          <target state="translated">- &lt;code&gt;regexp-history-last&lt;/code&gt; 手段は、適切なミニバッファ履歴リストの最初の要素を使用する（下記参照）。</target>
        </trans-unit>
        <trans-unit id="dcf3de43a93dc25082ccdd72fbcf352df3aaef7f" translate="yes" xml:space="preserve">
          <source>- A function of no arguments that returns either &lt;code&gt;nil&lt;/code&gt;, a string, or a list of strings.</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; 、文字列、または文字列のリストのいずれかを返す引数のない関数。</target>
        </trans-unit>
        <trans-unit id="5dea26830b748014bf1b420fb899e2ba1c59d256" translate="yes" xml:space="preserve">
          <source>- A function of no arguments, whose return value (which should be &lt;code&gt;nil&lt;/code&gt;, a string, or a list of strings) becomes the value of &lt;var&gt;defaults&lt;/var&gt;.</source>
          <target state="translated">-引数のない関数。その戻り値（ &lt;code&gt;nil&lt;/code&gt; 、文字列、または文字列のリストである必要があります）が &lt;var&gt;defaults&lt;/var&gt; の値になります。</target>
        </trans-unit>
        <trans-unit id="fa3f9ae03fb00240a0e68896ebc3ddfc89b4659e" translate="yes" xml:space="preserve">
          <source>- A local address is represented as a string, which specifies the address in the local address space.</source>
          <target state="translated">-ローカルアドレスは、ローカルアドレス空間のアドレスを指定する文字列として表されます。</target>
        </trans-unit>
        <trans-unit id="88bb42990b1b8e57893b33faf96e22c7130707d2" translate="yes" xml:space="preserve">
          <source>- An IPv4 address is represented as a five-element vector of four 8-bit integers and one 16-bit integer &lt;code&gt;[&lt;var&gt;a&lt;/var&gt; &lt;var&gt;b&lt;/var&gt; &lt;var&gt;c&lt;/var&gt; &lt;var&gt;d&lt;/var&gt; &lt;var&gt;p&lt;/var&gt;]&lt;/code&gt; corresponding to numeric IPv4 address &lt;var&gt;a&lt;/var&gt;.&lt;var&gt;b&lt;/var&gt;.&lt;var&gt;c&lt;/var&gt;.&lt;var&gt;d&lt;/var&gt; and port number &lt;var&gt;p&lt;/var&gt;.</source>
          <target state="translated">-アンIPv4アドレスは、4つの8ビット整数と1つの16ビット整数の5要素ベクトルとして表される &lt;code&gt;[&lt;var&gt;a&lt;/var&gt; &lt;var&gt;b&lt;/var&gt; &lt;var&gt;c&lt;/var&gt; &lt;var&gt;d&lt;/var&gt; &lt;var&gt;p&lt;/var&gt;]&lt;/code&gt; 数値IPv4アドレスに対応する &lt;var&gt;a&lt;/var&gt; 。 &lt;var&gt;b&lt;/var&gt; 。 &lt;var&gt;c&lt;/var&gt; 。 &lt;var&gt;d&lt;/var&gt; とポート番号 &lt;var&gt;p&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="506aa8260502ca04f0e854fe853e0488a019c794" translate="yes" xml:space="preserve">
          <source>- An IPv6 address is represented as a nine-element vector of 16-bit integers &lt;code&gt;[&lt;var&gt;a&lt;/var&gt; &lt;var&gt;b&lt;/var&gt; &lt;var&gt;c&lt;/var&gt; &lt;var&gt;d&lt;/var&gt; &lt;var&gt;e&lt;/var&gt; &lt;var&gt;f&lt;/var&gt;
&lt;var&gt;g&lt;/var&gt; &lt;var&gt;h&lt;/var&gt; &lt;var&gt;p&lt;/var&gt;]&lt;/code&gt; corresponding to numeric IPv6 address &lt;var&gt;a&lt;/var&gt;:&lt;var&gt;b&lt;/var&gt;:&lt;var&gt;c&lt;/var&gt;:&lt;var&gt;d&lt;/var&gt;:&lt;var&gt;e&lt;/var&gt;:&lt;var&gt;f&lt;/var&gt;:&lt;var&gt;g&lt;/var&gt;:&lt;var&gt;h&lt;/var&gt; and port number &lt;var&gt;p&lt;/var&gt;.</source>
          <target state="translated">-アンIPv6アドレスは16ビット整数の9要素のベクトルとして表現されている &lt;code&gt;[&lt;var&gt;a&lt;/var&gt; &lt;var&gt;b&lt;/var&gt; &lt;var&gt;c&lt;/var&gt; &lt;var&gt;d&lt;/var&gt; &lt;var&gt;e&lt;/var&gt; &lt;var&gt;f&lt;/var&gt; &lt;var&gt;g&lt;/var&gt; &lt;var&gt;h&lt;/var&gt; &lt;var&gt;p&lt;/var&gt;]&lt;/code&gt; 数値のIPv6アドレスに対応する &lt;var&gt;a&lt;/var&gt; ： &lt;var&gt;b&lt;/var&gt; ： &lt;var&gt;c&lt;/var&gt; ： &lt;var&gt;d&lt;/var&gt; ： &lt;var&gt;e&lt;/var&gt; ： &lt;var&gt;f&lt;/var&gt; ： &lt;var&gt;g&lt;/var&gt; ： &lt;var&gt;h&lt;/var&gt; とポート番号 &lt;var&gt;p&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="1511637c65bc913962272cf479cb7e658e62c4e2" translate="yes" xml:space="preserve">
          <source>- An unsupported-family address is represented by a cons &lt;code&gt;(&lt;var&gt;f&lt;/var&gt; . &lt;var&gt;av&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;f&lt;/var&gt; is the family number and &lt;var&gt;av&lt;/var&gt; is a vector specifying the socket address using one element per address data byte. Do not rely on this format in portable code, as it may depend on implementation defined constants, data sizes, and data structure alignment.</source>
          <target state="translated">-サポートされていないファミリアドレスは、cons &lt;code&gt;(&lt;var&gt;f&lt;/var&gt; . &lt;var&gt;av&lt;/var&gt;)&lt;/code&gt; で表されます。ここで、 &lt;var&gt;f&lt;/var&gt; はファミリ番号、 &lt;var&gt;av&lt;/var&gt; はアドレスデータバイトごとに1つの要素を使用してソケットアドレスを指定するベクトルです。実装で定義された定数、データサイズ、およびデータ構造の配置に依存する可能性があるため、ポータブルコードではこの形式に依存しないでください。</target>
        </trans-unit>
        <trans-unit id="4c9931ffcf7dd05812353dc1871c96a9ae6bd545" translate="yes" xml:space="preserve">
          <source>- Append the special character U+200E &lt;small&gt;LEFT-TO-RIGHT MARK&lt;/small&gt;, or</source>
          <target state="translated">-特殊文字U + 200Eの&lt;small&gt;左から右へのマーク&lt;/small&gt;、または</target>
        </trans-unit>
        <trans-unit id="ab933652fb2c86dd986ef8dc07896036bc653b32" translate="yes" xml:space="preserve">
          <source>- Functions defined using &lt;code&gt;apply-partially&lt;/code&gt; (see &lt;a href=&quot;calling-functions#Calling-Functions&quot;&gt;apply-partially&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;apply-partially&lt;/code&gt; を使用して定義された関数（&lt;a href=&quot;calling-functions#Calling-Functions&quot;&gt;apply-partiallyを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a08759998820b3bb00f1c9d5cf53c84dcc31cb5e" translate="yes" xml:space="preserve">
          <source>- Functions that are advised using &lt;code&gt;advice-add&lt;/code&gt; (see &lt;a href=&quot;advising-named-functions#Advising-Named-Functions&quot;&gt;Advising Named Functions&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;advising-named-functions#Advising-Named-Functions&quot;&gt;-advice &lt;/a&gt; &lt;code&gt;advice-add&lt;/code&gt; を使用してアドバイスされる関数（名前付き関数のアドバイスを参照）。</target>
        </trans-unit>
        <trans-unit id="08c2c0220fb6124298cefd652d025ee86c1e1db0" translate="yes" xml:space="preserve">
          <source>- Functions that determine the argument list dynamically, as part of their code.</source>
          <target state="translated">-コードの一部として、引数リストを動的に決定する関数。</target>
        </trans-unit>
        <trans-unit id="7600b849e55951bc092b7d8c88afc385dfe1f531" translate="yes" xml:space="preserve">
          <source>- Include the tab character in the field separator. The tab character plays the role of &lt;em&gt;segment separator&lt;/em&gt; in bidirectional reordering, causing the text on either side to be reordered separately.</source>
          <target state="translated">-フィールド区切り文字にタブ文字を含めます。タブ文字は、双方向の並べ替えで&lt;em&gt;セグメント区切り&lt;/em&gt;文字の役割を果たし、両側のテキストを個別に並べ替えます。</target>
        </trans-unit>
        <trans-unit id="451dd44a910f938c000b4af610c9702adcffb0fe" translate="yes" xml:space="preserve">
          <source>- The last regexp used in an incremental search.</source>
          <target state="translated">-インクリメンタルサーチで使用された最後の正規表現。</target>
        </trans-unit>
        <trans-unit id="71545aa56444671fd4b06e3ccb47466525b243b7" translate="yes" xml:space="preserve">
          <source>- The last string or pattern used in query-replace commands.</source>
          <target state="translated">-query-replaceコマンドで使用される最後の文字列またはパターン。</target>
        </trans-unit>
        <trans-unit id="34811aa9bdac4e20fbb69643c8c3bd96b3d8c531" translate="yes" xml:space="preserve">
          <source>- The last string used in an incremental search.</source>
          <target state="translated">-インクリメンタルサーチで使用される最後の文字列。</target>
        </trans-unit>
        <trans-unit id="eb7095e549a94198834ab25fcc1944b0d63cafaa" translate="yes" xml:space="preserve">
          <source>- The symbol &lt;code&gt;regexp-history-last&lt;/code&gt;.</source>
          <target state="translated">-シンボル &lt;code&gt;regexp-history-last&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bfcc72d1fa008fc21cb979da0cd6fba59c8e79fe" translate="yes" xml:space="preserve">
          <source>- The word or symbol at point.</source>
          <target state="translated">-ポイントの単語または記号。</target>
        </trans-unit>
        <trans-unit id="3223424cc2cb4c13d8bbdacc0d1eb71a628c0844" translate="yes" xml:space="preserve">
          <source>- They are more efficient.</source>
          <target state="translated">-それらはより効率的です。</target>
        </trans-unit>
        <trans-unit id="5105129deaf3ab492601160ad4a267494b2310dd" translate="yes" xml:space="preserve">
          <source>- They behave in a more predictable way than &lt;code&gt;cl-defsubst&lt;/code&gt; (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/cl/Argument-Lists.html#Argument-Lists&quot;&gt;Argument Lists&lt;/a&gt; in</source>
          <target state="translated">&lt;code&gt;cl-defsubst&lt;/code&gt; よりも予測可能な方法で動作します（の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/cl/Argument-Lists.html#Argument-Lists&quot;&gt;引数リスト&lt;/a&gt;を参照）</target>
        </trans-unit>
        <trans-unit id="b0614b60fd4ade25f0db81a8c7174c93e6f1976d" translate="yes" xml:space="preserve">
          <source>- They can be passed to &lt;code&gt;mapcar&lt;/code&gt; (see &lt;a href=&quot;mapping-functions#Mapping-Functions&quot;&gt;Mapping Functions&lt;/a&gt;).</source>
          <target state="translated">-それらは &lt;code&gt;mapcar&lt;/code&gt; に渡すことができます（&lt;a href=&quot;mapping-functions#Mapping-Functions&quot;&gt;マッピング関数を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="9cde96239b628f73da4ee4557f1bd83336a79dfd" translate="yes" xml:space="preserve">
          <source>- They can be used as &lt;em&gt;place forms&lt;/em&gt; to store values (see &lt;a href=&quot;generalized-variables#Generalized-Variables&quot;&gt;Generalized Variables&lt;/a&gt;).</source>
          <target state="translated">-値を格納&lt;em&gt;する&lt;/em&gt;ための&lt;em&gt;プレースフォーム&lt;/em&gt;として使用できます（&lt;a href=&quot;generalized-variables#Generalized-Variables&quot;&gt;一般化変数を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a76dc48d4e001c4f8e825c32371f9c999ce8919c" translate="yes" xml:space="preserve">
          <source>- Your module function might use uninitialized or undefined values, since</source>
          <target state="translated">-モジュール関数は、初期化されていない値または未定義の値を使用する可能性があります。</target>
        </trans-unit>
        <trans-unit id="475eb258658c4a55de3a576c495d8edab2e5dd72" translate="yes" xml:space="preserve">
          <source>- Your module might leak resources, because it might not have the opportunity to release them.</source>
          <target state="translated">-モジュールがリソースを解放する機会がない可能性があるため、モジュールがリソースをリークする可能性があります。</target>
        </trans-unit>
        <trans-unit id="d7013d67e8298bc4e00947c349fa968b1df0dc69" translate="yes" xml:space="preserve">
          <source>--batch</source>
          <target state="translated">--batch</target>
        </trans-unit>
        <trans-unit id="e3746e8966e5886a1a9491aa8442ff100a441035" translate="yes" xml:space="preserve">
          <source>--debug-init</source>
          <target state="translated">--debug-init</target>
        </trans-unit>
        <trans-unit id="dd8390426042729fa28a3e5e2529e9247dbf1584" translate="yes" xml:space="preserve">
          <source>--dired</source>
          <target state="translated">--dired</target>
        </trans-unit>
        <trans-unit id="e556d49418327e5df95b69cb87420177b3b8558b" translate="yes" xml:space="preserve">
          <source>--disable-build-details</source>
          <target state="translated">--disable-build-details</target>
        </trans-unit>
        <trans-unit id="36a45e0c3a55a850fa8754c49a95b16beadd0893" translate="yes" xml:space="preserve">
          <source>--display</source>
          <target state="translated">--display</target>
        </trans-unit>
        <trans-unit id="a6d99f8eb52f3d2882bd5bcfd18fc32f13994665" translate="yes" xml:space="preserve">
          <source>--enable-locallisppath</source>
          <target state="translated">--enable-locallisppath</target>
        </trans-unit>
        <trans-unit id="6a5c0d431d80728f444faf2b6934c85226337a6c" translate="yes" xml:space="preserve">
          <source>--enable-profiling</source>
          <target state="translated">--enable-profiling</target>
        </trans-unit>
        <trans-unit id="75b28b862f9c65a9ba883e6a4fc25107a961037b" translate="yes" xml:space="preserve">
          <source>--eval</source>
          <target state="translated">--eval</target>
        </trans-unit>
        <trans-unit id="1cc39fb1039691c5a005c1747f71ffe31b8a4ff1" translate="yes" xml:space="preserve">
          <source>--eval=&lt;var&gt;form&lt;/var&gt;</source>
          <target state="translated">--eval=&lt;var&gt;form&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="da9f4060ee141b437a6813b862c3abb5c5023e29" translate="yes" xml:space="preserve">
          <source>--funcall</source>
          <target state="translated">--funcall</target>
        </trans-unit>
        <trans-unit id="9bbdc553421327ea6503065b19ad8c2746194038" translate="yes" xml:space="preserve">
          <source>--geometry</source>
          <target state="translated">--geometry</target>
        </trans-unit>
        <trans-unit id="c07381c98fadbc874a2793fce70ac1fc156492cb" translate="yes" xml:space="preserve">
          <source>--maximized</source>
          <target state="translated">--maximized</target>
        </trans-unit>
        <trans-unit id="abe5632014bfba52c35d27f79de36cc4e97615a1" translate="yes" xml:space="preserve">
          <source>--module-assertions</source>
          <target state="translated">--module-assertions</target>
        </trans-unit>
        <trans-unit id="4b56a9ef9f1124865e2b90acbe9a1a53404d03fd" translate="yes" xml:space="preserve">
          <source>--no-site-file</source>
          <target state="translated">--no-site-file</target>
        </trans-unit>
        <trans-unit id="d6c6ba76b3ee19f65456bd988c6e49390537bde6" translate="yes" xml:space="preserve">
          <source>--no-site-lisp</source>
          <target state="translated">--no-site-lisp</target>
        </trans-unit>
        <trans-unit id="004d00a7bcbcdf314bf386f5ef646ba38c1d8907" translate="yes" xml:space="preserve">
          <source>--no-splash</source>
          <target state="translated">--no-splash</target>
        </trans-unit>
        <trans-unit id="bec877af6426434d79c88d98d466faff6debbfc6" translate="yes" xml:space="preserve">
          <source>--smid &lt;var&gt;session&lt;/var&gt;</source>
          <target state="translated">--smid &lt;var&gt;session&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="55c71bddcb182d9e3d12232e79587180b074ef25" translate="yes" xml:space="preserve">
          <source>--temacs</source>
          <target state="translated">--temacs</target>
        </trans-unit>
        <trans-unit id="a99c29d552237adb11edc13899229fdee541254a" translate="yes" xml:space="preserve">
          <source>--with-modules</source>
          <target state="translated">--with-modules</target>
        </trans-unit>
        <trans-unit id="d48cd3f3cb4e695558dda91f4e1d74d40a1adb45" translate="yes" xml:space="preserve">
          <source>-0.0e+NaN</source>
          <target state="translated">-0.0e+NaN</target>
        </trans-unit>
        <trans-unit id="6cfe453a9bea6dbb425a96d0901b8e56aad33cea" translate="yes" xml:space="preserve">
          <source>-1 is represented as all ones. (This is called &lt;em&gt;two&amp;rsquo;s complement&lt;/em&gt; notation.)</source>
          <target state="translated">-1はすべて1として表されます。（これは&lt;em&gt;2の補数&lt;/em&gt;表記と呼ばれます。）</target>
        </trans-unit>
        <trans-unit id="45acbc42ae78935fd0dce00a8fea0f7104dcd452" translate="yes" xml:space="preserve">
          <source>-1.0e+INF</source>
          <target state="translated">-1.0e+INF</target>
        </trans-unit>
        <trans-unit id="ad9aee0e02aa7df5696f88c33c3f5b0003d54711" translate="yes" xml:space="preserve">
          <source>-D</source>
          <target state="translated">-D</target>
        </trans-unit>
        <trans-unit id="c20a39eb3af4897aa4dea2bd9a1ba1a16fa16352" translate="yes" xml:space="preserve">
          <source>-L</source>
          <target state="translated">-L</target>
        </trans-unit>
        <trans-unit id="6422eedc12255e6b5d4e04ab2b26ee196c74c4c7" translate="yes" xml:space="preserve">
          <source>-Q</source>
          <target state="translated">-Q</target>
        </trans-unit>
        <trans-unit id="1e8af43a53eabd62fd847b1aacadc92c281cff51" translate="yes" xml:space="preserve">
          <source>-based network protocols. In that case, use the &lt;code&gt;with-case-table&lt;/code&gt; macro with the variable &lt;var&gt;ascii-case-table&lt;/var&gt;, which stores the unmodified case table for the</source>
          <target state="translated">ベースのネットワークプロトコル。その場合は、変数 &lt;var&gt;ascii-case-table&lt;/var&gt; を指定して &lt;code&gt;with-case-table&lt;/code&gt; マクロを使用します。このマクロは、変更されていないケーステーブルを格納します。</target>
        </trans-unit>
        <trans-unit id="17d3a498e96fc364bea369a8b040d59536425b86" translate="yes" xml:space="preserve">
          <source>-batch</source>
          <target state="translated">-batch</target>
        </trans-unit>
        <trans-unit id="252ed75b388acc56155130114d64702e8d9fafa5" translate="yes" xml:space="preserve">
          <source>-bindat-spec</source>
          <target state="translated">-bindat-spec</target>
        </trans-unit>
        <trans-unit id="50ef56ca72c755dcbde6ce4b013f4deb64cb1044" translate="yes" xml:space="preserve">
          <source>-command</source>
          <target state="translated">-command</target>
        </trans-unit>
        <trans-unit id="d5537351313df4188977a7d2a773daedb94d0b26" translate="yes" xml:space="preserve">
          <source>-d</source>
          <target state="translated">-d</target>
        </trans-unit>
        <trans-unit id="ca33a1f12ea9e40ab6e3467dbc0955a758ab0b11" translate="yes" xml:space="preserve">
          <source>-dos</source>
          <target state="translated">-dos</target>
        </trans-unit>
        <trans-unit id="4b580664b594ba557e0be8fd1d011e617e854549" translate="yes" xml:space="preserve">
          <source>-f &lt;var&gt;function&lt;/var&gt;</source>
          <target state="translated">-f &lt;var&gt;function&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="fc5ed6287b5f2ae9862d00fd7ce70882c8a720a1" translate="yes" xml:space="preserve">
          <source>-face</source>
          <target state="translated">-face</target>
        </trans-unit>
        <trans-unit id="7eb4f04f23eb05a225581041feabf2dfdc300e8d" translate="yes" xml:space="preserve">
          <source>-form</source>
          <target state="translated">-form</target>
        </trans-unit>
        <trans-unit id="b0f2e2a8eceb4685aadb3c682c78b8fcd4e0d7b8" translate="yes" xml:space="preserve">
          <source>-forms</source>
          <target state="translated">-forms</target>
        </trans-unit>
        <trans-unit id="7168d25cda7eab2741830258912a1bf4f709044b" translate="yes" xml:space="preserve">
          <source>-frame-alist</source>
          <target state="translated">-frame-alist</target>
        </trans-unit>
        <trans-unit id="36cfe871fc80707c410b0c0818e4529ad91f7ccd" translate="yes" xml:space="preserve">
          <source>-function</source>
          <target state="translated">-function</target>
        </trans-unit>
        <trans-unit id="379f41c43d80c925b34dec28336919e5c9a40619" translate="yes" xml:space="preserve">
          <source>-functions</source>
          <target state="translated">-functions</target>
        </trans-unit>
        <trans-unit id="8c79005e9a3ea7467c761c3670f0009087f9a634" translate="yes" xml:space="preserve">
          <source>-handling in strings.</source>
          <target state="translated">-文字列での処理。</target>
        </trans-unit>
        <trans-unit id="f68842a72182e6aac1382641cf9d776940cab416" translate="yes" xml:space="preserve">
          <source>-hook</source>
          <target state="translated">-hook</target>
        </trans-unit>
        <trans-unit id="9865da85c07a3d1655e9a4fb8c2ea54c2555bf95" translate="yes" xml:space="preserve">
          <source>-hooks</source>
          <target state="translated">-hooks</target>
        </trans-unit>
        <trans-unit id="1545d123761e7946eb208a62f8f771b22f9df5b0" translate="yes" xml:space="preserve">
          <source>-internal</source>
          <target state="translated">-internal</target>
        </trans-unit>
        <trans-unit id="95251b6a3cd71cc3cacb9667af58e23a7ca6b7fd" translate="yes" xml:space="preserve">
          <source>-l &lt;var&gt;file&lt;/var&gt;</source>
          <target state="translated">-l &lt;var&gt;file&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="51063ef1d5283f6f3133bca32f524c07b2f6ee7d" translate="yes" xml:space="preserve">
          <source>-mac</source>
          <target state="translated">-mac</target>
        </trans-unit>
        <trans-unit id="7574c6815ca15ee845975a62923bb10e43f3db6c" translate="yes" xml:space="preserve">
          <source>-map</source>
          <target state="translated">-map</target>
        </trans-unit>
        <trans-unit id="f906a9c10ce29a8203def61bd8771066f73fbb03" translate="yes" xml:space="preserve">
          <source>-map-alist</source>
          <target state="translated">-map-alist</target>
        </trans-unit>
        <trans-unit id="fabcf398478e51ffd357feaa3784ed9d256fdee9" translate="yes" xml:space="preserve">
          <source>-mode</source>
          <target state="translated">-mode</target>
        </trans-unit>
        <trans-unit id="54553690612602f22254056cb3aa1246ba8dc6a1" translate="yes" xml:space="preserve">
          <source>-mode-alist</source>
          <target state="translated">-mode-alist</target>
        </trans-unit>
        <trans-unit id="da1a3943047a29a7896c92a3403dcb5daa326d89" translate="yes" xml:space="preserve">
          <source>-name</source>
          <target state="translated">-name</target>
        </trans-unit>
        <trans-unit id="75cf423bb669c8605f4dd84a2a66999aab8fe69c" translate="yes" xml:space="preserve">
          <source>-predicate</source>
          <target state="translated">-predicate</target>
        </trans-unit>
        <trans-unit id="8df6bb5f94912d1640cab447d949ade49cde100a" translate="yes" xml:space="preserve">
          <source>-program</source>
          <target state="translated">-program</target>
        </trans-unit>
        <trans-unit id="ac33d7b02f2a5c6708f6060ad24e0c1c16b31e96" translate="yes" xml:space="preserve">
          <source>-q</source>
          <target state="translated">-q</target>
        </trans-unit>
        <trans-unit id="40cb771f2c893ba1a8854b2bc66328ee281f0645" translate="yes" xml:space="preserve">
          <source>-q --no-site-file --no-splash</source>
          <target state="translated">-q --no-site-file --no-splash</target>
        </trans-unit>
        <trans-unit id="bc194590c381e1da75d92f4ee397555078cb7f92" translate="yes" xml:space="preserve">
          <source>-rn</source>
          <target state="translated">-rn</target>
        </trans-unit>
        <trans-unit id="2c2dcf44f1bc9aa15d180db1d30d26a50922272d" translate="yes" xml:space="preserve">
          <source>-u</source>
          <target state="translated">-u</target>
        </trans-unit>
        <trans-unit id="82e2ceb5c950d49804fd0abd0ce8edf026a0a61a" translate="yes" xml:space="preserve">
          <source>-u &lt;var&gt;user&lt;/var&gt;</source>
          <target state="translated">-u &lt;var&gt;user&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="d641d018df28470d43a9eae843d1ec0b040a3205" translate="yes" xml:space="preserve">
          <source>-unix</source>
          <target state="translated">-unix</target>
        </trans-unit>
        <trans-unit id="05063fbbb236a1065c0dc3ba7b1564fcb5907343" translate="yes" xml:space="preserve">
          <source>-|</source>
          <target state="translated">-|</target>
        </trans-unit>
        <trans-unit id="3a52ce780950d4d969792a2559cd519d7ee8c727" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>
        </trans-unit>
        <trans-unit id="8be4e9178931d35b1a218eda82e20d3678deccf3" translate="yes" xml:space="preserve">
          <source>. &amp;lsquo;</source>
          <target state="translated">。'</target>
        </trans-unit>
        <trans-unit id="8c8bc713978c45d08afcc3b34a65c24b3233a5f0" translate="yes" xml:space="preserve">
          <source>. (</source>
          <target state="translated">。（</target>
        </trans-unit>
        <trans-unit id="13a2ba527b55af39a157e15de1a1a3c6a4cfcf67" translate="yes" xml:space="preserve">
          <source>. (An ordinary function would have the same general appearance.)</source>
          <target state="translated">。（通常の関数の一般的な外観は同じです。）</target>
        </trans-unit>
        <trans-unit id="35d4c3e988667ef3dba7222a2c938da86bb5967d" translate="yes" xml:space="preserve">
          <source>. (Emacs code contributed before 2018 may follow other conventions, which are being phased out.)</source>
          <target state="translated">。（2018年より前に提供されたEmacsコードは、段階的に廃止されている他の規則に従う可能性があります。）</target>
        </trans-unit>
        <trans-unit id="fa3148bb5019bb32d68f9748fdbd4adbba05aaee" translate="yes" xml:space="preserve">
          <source>. (Note that &amp;lsquo;</source>
          <target state="translated">。（ご了承ください '</target>
        </trans-unit>
        <trans-unit id="1921a75312a79bb6553bd77eace60b332cdb4cb2" translate="yes" xml:space="preserve">
          <source>. (Note that a minibuffer window is active as long as its minibuffer is in use; see &lt;a href=&quot;minibuffers#Minibuffers&quot;&gt;Minibuffers&lt;/a&gt;).</source>
          <target state="translated">。（ミニ&lt;a href=&quot;minibuffers#Minibuffers&quot;&gt;バッファー&lt;/a&gt;ウィンドウは、そのミニバッファーが使用されている限りアクティブであることに注意してください。ミニバッファーを参照してください）。</target>
        </trans-unit>
        <trans-unit id="b99baecbe569e7c851169b41d4caa104682438c0" translate="yes" xml:space="preserve">
          <source>. (The string that serves as the autoload cookie and the name of the file generated by &lt;code&gt;update-file-autoloads&lt;/code&gt; can be changed from the above defaults, see below.) Building Emacs loads</source>
          <target state="translated">。（自動ロードCookieとして機能する文字列と、 &lt;code&gt;update-file-autoloads&lt;/code&gt; によって生成されたファイルの名前は、上記のデフォルトから変更できます。以下を参照してください。）Emacsロードの構築</target>
        </trans-unit>
        <trans-unit id="538dd1ba7c8db78241e77d2c4ab52f3bfd7d5db7" translate="yes" xml:space="preserve">
          <source>. (This buffer name starts with a space, so it does not show up in the Buffer Menu.) This buffer contains the program being compiled, and point shows how far the byte compiler was able to read; the cause of the error might be nearby. See &lt;a href=&quot;syntax-errors#Syntax-Errors&quot;&gt;Syntax Errors&lt;/a&gt;, for some tips for locating syntax errors.</source>
          <target state="translated">。（このバッファー名はスペースで始まるため、バッファーメニューには表示されません。）このバッファーには、コンパイル中のプログラムが含まれ、ポイントはバイトコンパイラーが読み取ることができた距離を示します。エラーの原因は近くにある可能性があります。&lt;a href=&quot;syntax-errors#Syntax-Errors&quot;&gt;構文エラー&lt;/a&gt;を見つけるためのヒントについては、構文エラーを参照してください。</target>
        </trans-unit>
        <trans-unit id="be04a39d9ba0d7f687c583df1fd357c9259c0bf1" translate="yes" xml:space="preserve">
          <source>. (This method has the drawback that the documentation strings take up space in Emacs all the time.)</source>
          <target state="translated">。（この方法には、ドキュメント文字列がEmacsで常にスペースを占めるという欠点があります。）</target>
        </trans-unit>
        <trans-unit id="ff168b9513b7c24d5a5055e7c6b0461b7c7acc5a" translate="yes" xml:space="preserve">
          <source>. (Try adding increments of 20000 until it is big enough.) However, the advantage of preloading additional files decreases as machines get faster. On modern machines, it is usually not advisable.</source>
          <target state="translated">。（十分な大きさになるまで20000の増分を追加してみてください。）ただし、マシンが高速になるにつれて、追加のファイルをプリロードする利点は減少します。最近のマシンでは、通常はお勧めできません。</target>
        </trans-unit>
        <trans-unit id="4cfbaff69fdaea57f5ad594a8409a4d323dc955f" translate="yes" xml:space="preserve">
          <source>. 14</source>
          <target state="translated">。14</target>
        </trans-unit>
        <trans-unit id="8f31f866cd3a305246e0ce2870cb40292e17cf9a" translate="yes" xml:space="preserve">
          <source>. Be aware that the backtrace is a snapshot; the thread could have meanwhile resumed execution, and be in a different state, or could have exited.</source>
          <target state="translated">。バックトレースはスナップショットであることに注意してください。その間にスレッドが実行を再開し、別の状態になっているか、終了している可能性があります。</target>
        </trans-unit>
        <trans-unit id="41dd6802b000bf77cd6971c020e380b6f2fe42c1" translate="yes" xml:space="preserve">
          <source>. Below we list some functions to access and set the size of an existing, visible frame, by default the selected one.</source>
          <target state="translated">。以下に、既存の表示可能なフレーム（デフォルトでは選択されているフレーム）にアクセスしてサイズを設定するためのいくつかの関数を示します。</target>
        </trans-unit>
        <trans-unit id="6d6e3b8a0212db4d70e67ccc10e5a9a3ddc93de9" translate="yes" xml:space="preserve">
          <source>. But &lt;code&gt;backspace&lt;/code&gt; converts into the character code 127 (</source>
          <target state="translated">。ただし、 &lt;code&gt;backspace&lt;/code&gt; は文字コード127（</target>
        </trans-unit>
        <trans-unit id="0249300dca04b7ddd672e51917cc03689940477a" translate="yes" xml:space="preserve">
          <source>. Character codes 160 through 255 are not entirely proper in multibyte text, even though they can occur. As a consequence, the situation where a unibyte and a multibyte string are &lt;code&gt;equal&lt;/code&gt; without both being all</source>
          <target state="translated">。文字コード160から255は、発生する可能性はありますが、マルチバイトテキストでは完全に適切ではありません。結果として、ユニバイト文字列とマルチバイト文字列がすべてではなく &lt;code&gt;equal&lt;/code&gt; 状況</target>
        </trans-unit>
        <trans-unit id="2b29a4884002727e4b8ab004dbc336c620aa70db" translate="yes" xml:space="preserve">
          <source>. Control character events are prefixed by the substring &lt;code&gt;&quot;\C-&quot;&lt;/code&gt;, and meta characters by &lt;code&gt;&quot;\M-&quot;&lt;/code&gt;; for example, &lt;code&gt;&quot;\C-x&quot;&lt;/code&gt; represents the key</source>
          <target state="translated">。制御文字イベントの前には部分文字列 &lt;code&gt;&quot;\C-&quot;&lt;/code&gt; が付き、メタ文字の前には &lt;code&gt;&quot;\M-&quot;&lt;/code&gt; ます。たとえば、 &lt;code&gt;&quot;\C-x&quot;&lt;/code&gt; はキーを表します</target>
        </trans-unit>
        <trans-unit id="cb31ce05aca9a97f8ebba0980e6d5c3668ff392f" translate="yes" xml:space="preserve">
          <source>. Each Custom theme is defined by an Emacs Lisp source file, which should follow the conventions described in this section. (Instead of writing a Custom theme by hand, you can also create one using a Customize-like interface; see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Creating-Custom-Themes.html#Creating-Custom-Themes&quot;&gt;Creating Custom Themes&lt;/a&gt; in</source>
          <target state="translated">。各カスタムテーマは、Emacs Lispソースファイルによって定義されます。このファイルは、このセクションで説明されている規則に従う必要があります。（代わりに手でカスタムテーマを書いて、あなたはまた、カスタマイズのようなインタフェースを使用して作成することができ、参照&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Creating-Custom-Themes.html#Creating-Custom-Themes&quot;&gt;カスタムテーマを作成する&lt;/a&gt;には</target>
        </trans-unit>
        <trans-unit id="2c7a299af752f1e98effa1480204e7fc34ff5cda" translate="yes" xml:space="preserve">
          <source>. Emacs comes with an interface to GNU Privacy Guard, see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/epa/index.html#Top&quot;&gt;EasyPG&lt;/a&gt; in</source>
          <target state="translated">。Emacsには&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/epa/index.html#Top&quot;&gt;GNUPrivacyGuard&lt;/a&gt;へのインターフェースが付属しています。EasyPGを参照してください。</target>
        </trans-unit>
        <trans-unit id="ebfb5f96b19d2e5229e6180c748242504bd89ca5" translate="yes" xml:space="preserve">
          <source>. Emacs finds this file through the standard search path for libraries (see &lt;a href=&quot;how-programs-do-loading#How-Programs-Do-Loading&quot;&gt;How Programs Do Loading&lt;/a&gt;). The Emacs distribution does not come with this file; it is intended for local customizations. If the default init file exists, it is loaded whenever you start Emacs. But your own personal init file, if any, is loaded first; if it sets &lt;code&gt;inhibit-default-init&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; value, then Emacs does not subsequently load the</source>
          <target state="translated">。Emacsは、ライブラリの標準検索パスを介してこのファイルを検索します（&lt;a href=&quot;how-programs-do-loading#How-Programs-Do-Loading&quot;&gt;プログラムの読み込み方法を&lt;/a&gt;参照）。Emacsディストリビューションにはこのファイルは付属していません。ローカルでのカスタマイズを目的としています。デフォルトのinitファイルが存在する場合、Emacsを起動するたびにロードされます。ただし、個人のinitファイルがある場合は、最初にロードされます。それが &lt;code&gt;inhibit-default-init&lt;/code&gt; を &lt;code&gt;nil&lt;/code&gt; 以外の値に設定した場合、Emacsはその後ロードしません</target>
        </trans-unit>
        <trans-unit id="7478a10ba8529477feecf6198f79e2763f2c6d6a" translate="yes" xml:space="preserve">
          <source>. Emacs loads this &lt;em&gt;before&lt;/em&gt; the user&amp;rsquo;s init file. You can inhibit the loading of this file with the option &amp;lsquo;</source>
          <target state="translated">。Emacsはこれをユーザーのinitファイルの&lt;em&gt;前に&lt;/em&gt;ロードします。オプション 'を使用して、このファイルのロードを禁止できます。</target>
        </trans-unit>
        <trans-unit id="e7e255ce9eca1411dfe1d79789b01a01454ea130" translate="yes" xml:space="preserve">
          <source>. Emacs normally shows a tool bar on graphical displays.</source>
          <target state="translated">。Emacsは通常、グラフィックディスプレイにツールバーを表示します。</target>
        </trans-unit>
        <trans-unit id="7e2b2d797568d56142a89f973e8897484d236746" translate="yes" xml:space="preserve">
          <source>. Emacs provides two variables to control this:</source>
          <target state="translated">。Emacsはこれを制御するために2つの変数を提供します：</target>
        </trans-unit>
        <trans-unit id="64a3c82cbcc305c0ee22f249aaaae0c5a0be37ef" translate="yes" xml:space="preserve">
          <source>. Examples of defined complete keys are</source>
          <target state="translated">。定義された完全なキーの例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="39e2af243206d8de8ea55c6b9c894e22b1a458f5" translate="yes" xml:space="preserve">
          <source>. Examples of undefined complete keys are</source>
          <target state="translated">。未定義の完全なキーの例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="206f0a508d1817288afd6666e42f2c7d992b0120" translate="yes" xml:space="preserve">
          <source>. First move point to the Edebug stop point of your choice, then type</source>
          <target state="translated">。最初にポイントを選択したEdebugストップポイントに移動し、次に次のように入力します</target>
        </trans-unit>
        <trans-unit id="333aef616ff29e6af0efca27e6a6b6d0b6bbe48f" translate="yes" xml:space="preserve">
          <source>. For an external menu bar (see &lt;a href=&quot;frame-layout#Frame-Layout&quot;&gt;Frame Layout&lt;/a&gt;), this value remains unchanged even when the menu bar wraps to two or more lines. In that case, the &lt;code&gt;menu-bar-size&lt;/code&gt; value returned by &lt;code&gt;frame-geometry&lt;/code&gt; (see &lt;a href=&quot;frame-geometry#Frame-Geometry&quot;&gt;Frame Geometry&lt;/a&gt;) allows to derive whether the menu bar actually occupies one or more lines.</source>
          <target state="translated">。外部メニューバー（&lt;a href=&quot;frame-layout#Frame-Layout&quot;&gt;フレームレイアウトを&lt;/a&gt;参照）の場合、メニューバーが2行以上に折り返されていても、この値は変更されません。その場合、 &lt;code&gt;frame-geometry&lt;/code&gt; によって返される &lt;code&gt;menu-bar-size&lt;/code&gt; 値（&lt;a href=&quot;frame-geometry#Frame-Geometry&quot;&gt;Frame Geometryを&lt;/a&gt;参照）により、メニューバーが実際に1行以上を占めるかどうかを判断できます。</target>
        </trans-unit>
        <trans-unit id="b3d2c0dfaacb26c7f33418797db935878bbdde14" translate="yes" xml:space="preserve">
          <source>. For example,</source>
          <target state="translated">。例えば、</target>
        </trans-unit>
        <trans-unit id="e25b45dcef7dc232a55d1969530e00f6a5c3fe96" translate="yes" xml:space="preserve">
          <source>. For how to define new categories, see &lt;a href=&quot;categories#Categories&quot;&gt;Categories&lt;/a&gt;. Corresponding string regexp: &amp;lsquo;</source>
          <target state="translated">。新しいカテゴリを定義する方法については、を参照してください&lt;a href=&quot;categories#Categories&quot;&gt;カテゴリ&lt;/a&gt;。対応する文字列正規表現： '</target>
        </trans-unit>
        <trans-unit id="711ff22643d3a2db4df9bc5593a3ac61c83640c6" translate="yes" xml:space="preserve">
          <source>. For more information about them, see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Help.html#Help&quot;&gt;Help&lt;/a&gt; in</source>
          <target state="translated">。それらの詳細については、&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Help.html#Help&quot;&gt;ヘルプ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d20bfe8f05ce9074f162e0d47ee4d3991470965c" translate="yes" xml:space="preserve">
          <source>. For the saved variable to work, you should ensure that the &lt;code&gt;define-minor-mode&lt;/code&gt; form is evaluated each time Emacs starts; for packages that are not part of Emacs, the easiest way to do this is to specify a &lt;code&gt;:require&lt;/code&gt; keyword.</source>
          <target state="translated">。保存された変数が機能するためには、Emacsが起動するたびに &lt;code&gt;define-minor-mode&lt;/code&gt; フォームが評価されることを確認する必要があります。Emacsの一部ではないパッケージの場合、これを行う最も簡単な方法は &lt;code&gt;:require&lt;/code&gt; キーワードを指定することです。</target>
        </trans-unit>
        <trans-unit id="95193deaa824af2c6aff93efa64b69c81562e950" translate="yes" xml:space="preserve">
          <source>. Here is the definition of &lt;code&gt;abbrev-file-name&lt;/code&gt;:</source>
          <target state="translated">。 &lt;code&gt;abbrev-file-name&lt;/code&gt; の定義は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8eee7b87f6c6aaaafb82616b2c324ec6ebea7e8e" translate="yes" xml:space="preserve">
          <source>. Here we describe only the search functions useful in programs. The principal one is &lt;code&gt;re-search-forward&lt;/code&gt;.</source>
          <target state="translated">。ここでは、プログラムで役立つ検索機能についてのみ説明します。主なものは &lt;code&gt;re-search-forward&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e87bf62597c0febf53c83fd4c2c8f0f306663e93" translate="yes" xml:space="preserve">
          <source>. Here we describe some program-level interfaces to the same information.</source>
          <target state="translated">。ここでは、同じ情報へのいくつかのプログラムレベルのインターフェイスについて説明します。</target>
        </trans-unit>
        <trans-unit id="90bf8ebe3bd4c93714c097c5b320e8fc568f9172" translate="yes" xml:space="preserve">
          <source>. However, for compatibility with other graphical applications, Emacs also recognizes</source>
          <target state="translated">。ただし、他のグラフィカルアプリケーションとの互換性のために、Emacsは</target>
        </trans-unit>
        <trans-unit id="1ec36c003ececcceae3eb9086b04ae839dd072d4" translate="yes" xml:space="preserve">
          <source>. However, if the variable &lt;code&gt;byte-compile-debug&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, error messages will be signaled as Lisp errors instead (see &lt;a href=&quot;errors#Errors&quot;&gt;Errors&lt;/a&gt;).</source>
          <target state="translated">。ただし、変数 &lt;code&gt;byte-compile-debug&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; 以外の場合、エラーメッセージは代わりにLispエラーとして通知されます（&lt;a href=&quot;errors#Errors&quot;&gt;エラーを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="56fd94aa2d1a1881b6f4bff8185b7e3b81ac8674" translate="yes" xml:space="preserve">
          <source>. Iconify that frame and evaluate the canonical form again: &lt;code&gt;display-buffer&lt;/code&gt; will reuse the window on the new frame (usually raising the frame and giving it focus too).</source>
          <target state="translated">。そのフレームをアイコン化し、正規の形式を再度評価します。display &lt;code&gt;display-buffer&lt;/code&gt; は、新しいフレームでウィンドウを再利用します（通常、フレームを上げてフォーカスを与えます）。</target>
        </trans-unit>
        <trans-unit id="fea93d4a86a9e13404b50840e0556e45632663ff" translate="yes" xml:space="preserve">
          <source>. If &lt;code&gt;enable-local-variables&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;set-auto-mode&lt;/code&gt; does not check the &amp;lsquo;</source>
          <target state="translated">。場合は &lt;code&gt;enable-local-variables&lt;/code&gt; ある &lt;code&gt;nil&lt;/code&gt; 、 &lt;code&gt;set-auto-mode&lt;/code&gt; 「チェックしません</target>
        </trans-unit>
        <trans-unit id="961949e4bf72b3049770b194f9f5f795d0f51c82" translate="yes" xml:space="preserve">
          <source>. If &lt;code&gt;use-dialog-box&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, and this function was invoked by mouse events, the question and the answers will be displayed in a GUI dialog box.</source>
          <target state="translated">。場合は &lt;code&gt;use-dialog-box&lt;/code&gt; 非で &lt;code&gt;nil&lt;/code&gt; であり、この機能は、マウスイベントによって呼び出された、質問と回答は、GUIのダイアログボックスに表示されます。</target>
        </trans-unit>
        <trans-unit id="6705f94c319841dd6c1924f134c5716ea701f700" translate="yes" xml:space="preserve">
          <source>. If &lt;var&gt;buffer-or-name&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, it must be a buffer or the name of an existing buffer. Then the output goes there, at point, and point is left before the output.</source>
          <target state="translated">。場合は &lt;var&gt;buffer-or-name&lt;/var&gt; 非で &lt;code&gt;nil&lt;/code&gt; の、それはバッファまたは既存のバッファの名前でなければなりません。次に、出力はポイントでそこに行き、ポイントは出力の前に残されます。</target>
        </trans-unit>
        <trans-unit id="35e58247418f59b69ab75bd234148ba301302221" translate="yes" xml:space="preserve">
          <source>. If it is &lt;code&gt;[foo]&lt;/code&gt;,</source>
          <target state="translated">。それがある場合は &lt;code&gt;[foo]&lt;/code&gt; 、</target>
        </trans-unit>
        <trans-unit id="4d34d806826f8bcaa528b15232637eb05115f9ef" translate="yes" xml:space="preserve">
          <source>. If necessary, the terminal library can evaluate &lt;code&gt;(getenv &quot;TERM&quot;)&lt;/code&gt; to find the full name of the terminal type.</source>
          <target state="translated">。必要に応じて、端末ライブラリは &lt;code&gt;(getenv &quot;TERM&quot;)&lt;/code&gt; を評価して、端末タイプのフルネームを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="cf2dffe7279d180fd805dbbdc95a991e2382a40e" translate="yes" xml:space="preserve">
          <source>. If neither option is specified, Emacs uses the &lt;code&gt;LOGNAME&lt;/code&gt; environment variable, or the &lt;code&gt;USER&lt;/code&gt; (most systems) or &lt;code&gt;USERNAME&lt;/code&gt; (MS systems) variable, to find your home directory and thus your init file; this way, even if you have su&amp;rsquo;d, Emacs still loads your own init file. If those environment variables are absent, though, Emacs uses your user-id to find your home directory.</source>
          <target state="translated">。どちらのオプションも指定されていない場合、Emacsは &lt;code&gt;LOGNAME&lt;/code&gt; 環境変数、または &lt;code&gt;USER&lt;/code&gt; （ほとんどのシステム）または &lt;code&gt;USERNAME&lt;/code&gt; （MSシステム）変数を使用して、ホームディレクトリ、つまりinitファイルを検索します。このように、あなたがsuしたとしても、Emacsはあなた自身のinitファイルをロードします。ただし、これらの環境変数が存在しない場合、EmacsはユーザーIDを使用してホームディレクトリを検索します。</target>
        </trans-unit>
        <trans-unit id="1a200a3d911aa9408bacbf9888deeff42a2f9df3" translate="yes" xml:space="preserve">
          <source>. If such a file exists, the return value is the absolute name of that file, instead of the file specified by &lt;var&gt;base-name&lt;/var&gt;. This argument is intended to be used by Emacs packages to provide backward compatibility. For instance, prior to the introduction of &lt;code&gt;user-emacs-directory&lt;/code&gt;, the abbrev file was located in</source>
          <target state="translated">。そのようなファイルが存在する場合、戻り値は、 &lt;var&gt;base-name&lt;/var&gt; で指定されたファイルではなく、そのファイルの絶対名です。この引数は、下位互換性を提供するためにEmacsパッケージで使用されることを目的としています。たとえば、 &lt;code&gt;user-emacs-directory&lt;/code&gt; が導入される前は、略語ファイルは次の場所にありました。</target>
        </trans-unit>
        <trans-unit id="e547009bb9faaac26e744a98030dd4909047be32" translate="yes" xml:space="preserve">
          <source>. If that fails, retain the unencrypted connection.</source>
          <target state="translated">。それが失敗した場合は、暗号化されていない接続を保持します。</target>
        </trans-unit>
        <trans-unit id="f22f6b1b1b115a9327260d499d9298c2ebce530b" translate="yes" xml:space="preserve">
          <source>. If that file exists, it is loaded. If Emacs was compiled with support for dynamic modules (see &lt;a href=&quot;dynamic-modules#Dynamic-Modules&quot;&gt;Dynamic Modules&lt;/a&gt;), &lt;code&gt;load&lt;/code&gt; next looks for a file named</source>
          <target state="translated">。そのファイルが存在する場合は、ロードされます。Emacsを（参照動的モジュールをサポートするようにコンパイルされた場合は&lt;a href=&quot;dynamic-modules#Dynamic-Modules&quot;&gt;動的モジュールを&lt;/a&gt;）、 &lt;code&gt;load&lt;/code&gt; という名前のファイルを次のルックスを</target>
        </trans-unit>
        <trans-unit id="5e508e912d3b91da715965b763460b62772cb2ab" translate="yes" xml:space="preserve">
          <source>. If the last component of a file name begins with a &amp;lsquo;</source>
          <target state="translated">。ファイル名の最後のコンポーネントが 'で始まる場合</target>
        </trans-unit>
        <trans-unit id="71e2eb976224a50ecaaf9a8d431d8704fbd63fbd" translate="yes" xml:space="preserve">
          <source>. If this second dir-locals file is present, then that is loaded in addition to</source>
          <target state="translated">。この2番目のdir-localsファイルが存在する場合、それに加えてロードされます</target>
        </trans-unit>
        <trans-unit id="c6ba57dfab0cde2fb24c7d6fd117fb991851283e" translate="yes" xml:space="preserve">
          <source>. In addition, the</source>
          <target state="translated">。加えて</target>
        </trans-unit>
        <trans-unit id="59d26d7d6bde81e9af387a0aac16088b6c2a4df6" translate="yes" xml:space="preserve">
          <source>. In particular, boolean bitfields should be of type &lt;code&gt;bool_bf&lt;/code&gt;, not &lt;code&gt;bool&lt;/code&gt;, so that they work correctly even when compiling Objective C with standard GCC.</source>
          <target state="translated">。特に、ブールビットフィールドは &lt;code&gt;bool&lt;/code&gt; ではなく &lt;code&gt;bool_bf&lt;/code&gt; 型である必要があります。これにより、ObjectiveCを標準のGCCでコンパイルする場合でも正しく機能します。</target>
        </trans-unit>
        <trans-unit id="aab0959b990df8440546fcc08ca6d8bcf7a811ea" translate="yes" xml:space="preserve">
          <source>. In the case where &lt;var&gt;message&lt;/var&gt; is a string and displayed in the echo area, it is not specified whether the contents are inserted into the buffer anyway.</source>
          <target state="translated">。 &lt;var&gt;message&lt;/var&gt; が文字列でエコー領域に表示される場合は、とにかく内容をバッファに挿入するかどうかは指定されていません。</target>
        </trans-unit>
        <trans-unit id="353a0c46c14e1b14af584f63da9cba3aa48268e2" translate="yes" xml:space="preserve">
          <source>. Internal-use functions written in C have names ending in &amp;lsquo;</source>
          <target state="translated">。Cで記述された内部使用関数の名前は 'で終わります</target>
        </trans-unit>
        <trans-unit id="5e0e6b1b2cc3d3c88d928454c3e431e7b7f41c24" translate="yes" xml:space="preserve">
          <source>. It also &lt;em&gt;enables&lt;/em&gt; the theme (unless the optional argument &lt;var&gt;no-enable&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;), causing its variable and face settings to take effect. It prompts the user for confirmation before loading the theme, unless the optional argument &lt;var&gt;no-confirm&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">。また、テーマを&lt;em&gt;有効に&lt;/em&gt;し（オプションの引数 &lt;var&gt;no-enable&lt;/var&gt; がnon - &lt;code&gt;nil&lt;/code&gt; でない限り）、変数と面の設定を有効にします。オプションの引数 &lt;var&gt;no-confirm&lt;/var&gt; が &lt;code&gt;nil&lt;/code&gt; - nilでない限り、テーマをロードする前に確認を求めるプロンプトが表示されます。</target>
        </trans-unit>
        <trans-unit id="996522e882fa954a6cf1a3c9fcd10b28f926d01a" translate="yes" xml:space="preserve">
          <source>. It is also called automatically if Emacs receives a &lt;code&gt;SIGTERM&lt;/code&gt; or &lt;code&gt;SIGHUP&lt;/code&gt; operating system signal (e.g., when the controlling terminal is disconnected), or if it receives a &lt;code&gt;SIGINT&lt;/code&gt; signal while running in batch mode (see &lt;a href=&quot;batch-mode#Batch-Mode&quot;&gt;Batch Mode&lt;/a&gt;).</source>
          <target state="translated">。また、Emacsが &lt;code&gt;SIGTERM&lt;/code&gt; または &lt;code&gt;SIGHUP&lt;/code&gt; オペレーティングシステム信号を受信した場合（たとえば、制御端末が切断された場合）、またはバッチモードでの実行中に &lt;code&gt;SIGINT&lt;/code&gt; 信号を受信した場合（&lt;a href=&quot;batch-mode#Batch-Mode&quot;&gt;バッチモードを&lt;/a&gt;参照）、自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="bcca18c5dbd9219202aacc29792c5ac902eb0218" translate="yes" xml:space="preserve">
          <source>. It is also used as a subroutine by many functions and commands, including &lt;code&gt;switch-to-buffer&lt;/code&gt; and &lt;code&gt;pop-to-buffer&lt;/code&gt; (see &lt;a href=&quot;switching-buffers#Switching-Buffers&quot;&gt;Switching Buffers&lt;/a&gt;).</source>
          <target state="translated">。また、 &lt;code&gt;switch-to-buffer&lt;/code&gt; や &lt;code&gt;pop-to-buffer&lt;/code&gt; など、多くの関数やコマンドでサブルーチンとして使用されます（「&lt;a href=&quot;switching-buffers#Switching-Buffers&quot;&gt;SwitchingBuffers&lt;/a&gt;」を参照）。</target>
        </trans-unit>
        <trans-unit id="bd3529526e8c4b930cd1955cfb7766880867b7c5" translate="yes" xml:space="preserve">
          <source>. It is always active, and is bound to the variable &lt;code&gt;global-map&lt;/code&gt;.</source>
          <target state="translated">。これは常にアクティブであり、変数 &lt;code&gt;global-map&lt;/code&gt; にバインドされています。</target>
        </trans-unit>
        <trans-unit id="1a6af467d41002c8a4433b75c34addf44537978a" translate="yes" xml:space="preserve">
          <source>. It is called automatically by the Emacs command loop whenever a command with a &amp;lsquo;</source>
          <target state="translated">。'を含むコマンドは常にEmacsコマンドループによって自動的に呼び出されます</target>
        </trans-unit>
        <trans-unit id="431b5574dcfcd5b3640654bd9a0a2207b262a870" translate="yes" xml:space="preserve">
          <source>. It must contain a single Lisp form, consisting of a call to the function &lt;code&gt;define-package&lt;/code&gt;, described below. This defines the package&amp;rsquo;s attributes: version, brief description, and requirements.</source>
          <target state="translated">。これには、以下で説明する関数 &lt;code&gt;define-package&lt;/code&gt; の呼び出しで構成される単一のLispフォームが含まれている必要があります。これにより、パッケージの属性（バージョン、簡単な説明、および要件）が定義されます。</target>
        </trans-unit>
        <trans-unit id="08804c313ef450f88e0f4a91fd42c9e85799fe5d" translate="yes" xml:space="preserve">
          <source>. It returns &lt;code&gt;&quot;&quot;&lt;/code&gt; for null extensions, as in</source>
          <target state="translated">。null拡張子の場合は、次のように &lt;code&gt;&quot;&quot;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="eb4c57305878200472bfdbc0b173a7459cf3d223" translate="yes" xml:space="preserve">
          <source>. It uses the value of the variable &lt;code&gt;major-mode&lt;/code&gt; (see &lt;a href=&quot;major-modes#Major-Modes&quot;&gt;Major Modes&lt;/a&gt;), which is why every major mode command needs to set that variable.</source>
          <target state="translated">。変数 &lt;code&gt;major-mode&lt;/code&gt; の値を使用します（&lt;a href=&quot;major-modes#Major-Modes&quot;&gt;Major Modesを&lt;/a&gt;参照）。そのため、すべてのmajormodeコマンドでその変数を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="b4dfdcd4a458b5286b2c302eb5e6eafef1d9bf5f" translate="yes" xml:space="preserve">
          <source>. Its argument list and return value are the same as for &lt;code&gt;display-sort-function&lt;/code&gt;.</source>
          <target state="translated">。その引数リストと戻り値は、 &lt;code&gt;display-sort-function&lt;/code&gt; の場合と同じです。</target>
        </trans-unit>
        <trans-unit id="1fafe6978133265f94ac7cdc43be74f2af449ae2" translate="yes" xml:space="preserve">
          <source>. Its contents would extract into the directory</source>
          <target state="translated">。その内容はディレクトリに抽出されます</target>
        </trans-unit>
        <trans-unit id="603ebda48d985675b3c2e85ec67d2510a70d7f05" translate="yes" xml:space="preserve">
          <source>. Less commonly, Emacs displays grave accents and apostrophes as themselves, or as apostrophes only (e.g.,</source>
          <target state="translated">。あまり一般的ではありませんが、Emacsはアクサングラーブとアポストロフィをそれ自体として、またはアポストロフィとしてのみ表示します（例：</target>
        </trans-unit>
        <trans-unit id="c0e05fddc64bed3aa11501318aff2c5657711077" translate="yes" xml:space="preserve">
          <source>. Like the functions described in previous subsections, all of them are actually function pointers, and need to be called via the &lt;code&gt;emacs_env&lt;/code&gt; pointer. Description of functions that were introduced after Emacs 25 calls out the first version where they became available.</source>
          <target state="translated">。前のサブセクションで説明した関数と同様に、それらはすべて実際には関数ポインターであり、 &lt;code&gt;emacs_env&lt;/code&gt; ポインターを介して呼び出す必要があります。Emacs25が利用可能になった最初のバージョンを呼び出した後に導入された関数の説明。</target>
        </trans-unit>
        <trans-unit id="7346eb47bb411138dfd549f1f9a80ac42d359bdd" translate="yes" xml:space="preserve">
          <source>. Likewise, &lt;code&gt;debug-on-quit&lt;/code&gt; has no effect on errors.</source>
          <target state="translated">。同様に、 &lt;code&gt;debug-on-quit&lt;/code&gt; はエラーに影響を与えません。</target>
        </trans-unit>
        <trans-unit id="d7ce77027dd8e0d18b045760997449f01023cb25" translate="yes" xml:space="preserve">
          <source>. Menu bar items are subcommands of the fake function key</source>
          <target state="translated">。メニューバーの項目は、偽のファンクションキーのサブコマンドです</target>
        </trans-unit>
        <trans-unit id="d934afd6a2f775b0095b3c992e9dde252a82a219" translate="yes" xml:space="preserve">
          <source>. Normally, Emacs automatically chooses a font based on the faces assigned to that character&amp;mdash;specifically, the face attributes &lt;code&gt;:family&lt;/code&gt;, &lt;code&gt;:weight&lt;/code&gt;, &lt;code&gt;:slant&lt;/code&gt;, and &lt;code&gt;:width&lt;/code&gt; (see &lt;a href=&quot;face-attributes#Face-Attributes&quot;&gt;Face Attributes&lt;/a&gt;). The choice of font also depends on the character to be displayed; some fonts can only display a limited set of characters. If no available font exactly fits the requirements, Emacs looks for the &lt;em&gt;closest matching font&lt;/em&gt;. The variables in this section control how Emacs makes this selection.</source>
          <target state="translated">。通常、Emacsはそのキャラクターに割り当てられた顔に基づいてフォントを自動的に選択します &lt;code&gt;:family&lt;/code&gt; 具体的には、顔の属性：family、 &lt;code&gt;:weight&lt;/code&gt; 、 &lt;code&gt;:slant&lt;/code&gt; 、および &lt;code&gt;:width&lt;/code&gt; です（&lt;a href=&quot;face-attributes#Face-Attributes&quot;&gt;顔の属性を&lt;/a&gt;参照）。フォントの選択は、表示する文字によっても異なります。一部のフォントは、限られた文字セットしか表示できません。要件に正確に適合する利用可能なフォントがない場合、Emacsは&lt;em&gt;最も一致するフォントを&lt;/em&gt;探します。このセクションの変数は、Emacsがこの選択を行う方法を制御します。</target>
        </trans-unit>
        <trans-unit id="2583a19c7e4bd38586dccc8af716cc77ef7b52c8" translate="yes" xml:space="preserve">
          <source>. Note, this is in the global map. This map is not actually mode-specific: its name was chosen to be informative in</source>
          <target state="translated">。これは世界地図にあることに注意してください。このマップは実際にはモード固有ではありません。その名前は、</target>
        </trans-unit>
        <trans-unit id="a3d1fd232c7e60d72cae3c44e8a025a16c8737ea" translate="yes" xml:space="preserve">
          <source>. On MS-Windows, iconifying such a frame will &quot;roll in&quot; its window-system window at the bottom of the desktop. Some window managers may not honor this parameter.</source>
          <target state="translated">。MS-Windowsでは、このようなフレームをアイコン化すると、デスクトップの下部にあるウィンドウシステムウィンドウが「ロールイン」されます。一部のウィンドウマネージャーは、このパラメーターを尊重しない場合があります。</target>
        </trans-unit>
        <trans-unit id="1bd06221ce0de286d1bf2de7194d3cdab61ac9a9" translate="yes" xml:space="preserve">
          <source>. On Windows, this could be</source>
          <target state="translated">。Windowsでは、これは</target>
        </trans-unit>
        <trans-unit id="19c3890948b9a3aba4e79c688b0169be6e51b0c1" translate="yes" xml:space="preserve">
          <source>. On other filesystems,</source>
          <target state="translated">。他のファイルシステムでは、</target>
        </trans-unit>
        <trans-unit id="29e201f97283e805ce0a9144155b71c6b13d0090" translate="yes" xml:space="preserve">
          <source>. Only characters up to octal code 777 can be specified this way.</source>
          <target state="translated">。この方法で指定できるのは、8進コード777までの文字のみです。</target>
        </trans-unit>
        <trans-unit id="e1aec4a91b6d397d09e55b40ba5c02bc2190b243" translate="yes" xml:space="preserve">
          <source>. Other characters that normally terminate a symbol (e.g., whitespace, parentheses and brackets) do not do so here. Prompt.</source>
          <target state="translated">。通常は記号を終了する他の文字（空白、括弧、角かっこなど）は、ここでは終了しません。促す。</target>
        </trans-unit>
        <trans-unit id="d8f49da478473aed4f47c1ea3bd74dfcf85159c8" translate="yes" xml:space="preserve">
          <source>. Pseudo-processes such as network or serial connections use a value of 0.</source>
          <target state="translated">。ネットワーク接続やシリアル接続などの疑似プロセスは、値0を使用します。</target>
        </trans-unit>
        <trans-unit id="46ee29e6101f276b77e5902a024614f2f8862b99" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;Byte Compilation&lt;/a&gt;.</source>
          <target state="translated">。&lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;バイトコンパイルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="74707ef096791e6cc5666db9522b66b3ac3b28f3" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;help-functions#Help-Functions&quot;&gt;Help Functions&lt;/a&gt;.</source>
          <target state="translated">。&lt;a href=&quot;help-functions#Help-Functions&quot;&gt;ヘルプ機能を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6f995d5b769ba31a67028090ef391a3524591944" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Defining-Abbrevs.html#Defining-Abbrevs&quot;&gt;Defining Abbrevs&lt;/a&gt; in</source>
          <target state="translated">。参照&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Defining-Abbrevs.html#Defining-Abbrevs&quot;&gt;定義略語を&lt;/a&gt;中</target>
        </trans-unit>
        <trans-unit id="14041e0efa7f9c899bf974e9274c4dd6fdd4c6ad" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html#Registers&quot;&gt;Registers&lt;/a&gt; in</source>
          <target state="translated">。の&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html#Registers&quot;&gt;レジスタ&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="b4cd068d9d7df6cc1c72c6269c9f5cc1e83f115e" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Two_002dColumn.html#Two_002dColumn&quot;&gt;Two-Column Editing&lt;/a&gt; in</source>
          <target state="translated">。参照してください&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Two_002dColumn.html#Two_002dColumn&quot;&gt;二列の編集&lt;/a&gt;で</target>
        </trans-unit>
        <trans-unit id="8e52ff90382e995df7ab32a9e6fc5ea715b319ca" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;prefix-command-arguments#Prefix-Command-Arguments&quot;&gt;Prefix Command Arguments&lt;/a&gt;.</source>
          <target state="translated">。&lt;a href=&quot;prefix-command-arguments#Prefix-Command-Arguments&quot;&gt;プレフィックスコマンドの引数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="95c7a8506fec4b3e0b273ef0426b855a14aa2191" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;prefix-keys#Prefix-Keys&quot;&gt;Prefix Keys&lt;/a&gt;, for more details.</source>
          <target state="translated">。詳細については、&lt;a href=&quot;prefix-keys#Prefix-Keys&quot;&gt;プレフィックスキーを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ec14033a78239324a871bb5a07d43a86f1755d48" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;quitting#Quitting&quot;&gt;Quitting&lt;/a&gt;.</source>
          <target state="translated">。&lt;a href=&quot;quitting#Quitting&quot;&gt;終了を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3f061fa44abe579708fd084a483068c3a9de2704" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;text-quoting-style#Text-Quoting-Style&quot;&gt;Text Quoting Style&lt;/a&gt;, for how to influence or inhibit this translation.</source>
          <target state="translated">。この翻訳に影響を与えたり禁止したりする方法については、&lt;a href=&quot;text-quoting-style#Text-Quoting-Style&quot;&gt;テキスト引用スタイルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fe61f7a42795a6bc8b6926db866dc77f5a795fe1" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;variable-definitions#Variable-Definitions&quot;&gt;Variable Definitions&lt;/a&gt;, for a description of the format to use.</source>
          <target state="translated">。使用する形式の説明については、&lt;a href=&quot;variable-definitions#Variable-Definitions&quot;&gt;変数の定義を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="54c7a199b142658032d0f0b89fff0f2a31642f1f" translate="yes" xml:space="preserve">
          <source>. Since it&amp;rsquo;s defined in &lt;code&gt;word_size&lt;/code&gt; units, the value is 400,000 for the default 32-bit configuration and 800,000 for the 64-bit one. If you specify a larger value, garbage collection will happen less often. This reduces the amount of time spent garbage collecting, but increases total memory use. You may want to do this when running a program that creates lots of Lisp data.</source>
          <target state="translated">。 &lt;code&gt;word_size&lt;/code&gt; 単位で定義されているため、値はデフォルトの32ビット構成の場合は400,000、64ビット構成の場合は800,000です。より大きな値を指定すると、ガベージコレクションが発生する頻度が少なくなります。これにより、ガベージコレクションに費やされる時間が短縮されますが、合計メモリ使用量が増加します。大量のLispデータを作成するプログラムを実行するときにこれを行うことができます。</target>
        </trans-unit>
        <trans-unit id="338bcb0d0b4f6443c09736e45408c62579701cfd" translate="yes" xml:space="preserve">
          <source>. The</source>
          <target state="translated">。の</target>
        </trans-unit>
        <trans-unit id="23a79640c6758182cbf73db2bd65149e28201353" translate="yes" xml:space="preserve">
          <source>. The &lt;code&gt;loadup&lt;/code&gt; library loads additional Lisp libraries, which set up the normal Emacs editing environment. After this step, the Emacs executable is no longer &lt;em&gt;bare&lt;/em&gt;.</source>
          <target state="translated">。 &lt;code&gt;loadup&lt;/code&gt; ライブラリのロード通常のEmacs編集環境を設定し、追加のLispライブラリ、。このステップの後、Emacs実行可能ファイルは&lt;em&gt;ベアで&lt;/em&gt;はなくなります。</target>
        </trans-unit>
        <trans-unit id="26236e4dba3e996086a95468bd66c546f6b92df6" translate="yes" xml:space="preserve">
          <source>. The advantage of the Button package is that it is faster, smaller, and simpler to program. From the point of view of the user, the interfaces produced by the two packages are very similar.</source>
          <target state="translated">。Buttonパッケージの利点は、プログラミングがより速く、より小さく、より簡単になることです。ユーザーの観点からは、2つのパッケージによって生成されるインターフェイスは非常に似ています。</target>
        </trans-unit>
        <trans-unit id="c6a2563c885987fdb47ea86421206b327aad596b" translate="yes" xml:space="preserve">
          <source>. The argument &lt;var&gt;require-match&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;, and the only buffer name starting with the given input is &amp;lsquo;</source>
          <target state="translated">。引数 &lt;var&gt;require-match&lt;/var&gt; は &lt;code&gt;t&lt;/code&gt; であり、指定された入力で始まる唯一のバッファー名は 'です。</target>
        </trans-unit>
        <trans-unit id="6b94ae472daf8827612d9bd7a473765fb5c612c4" translate="yes" xml:space="preserve">
          <source>. The bindings for</source>
          <target state="translated">。のバインディング</target>
        </trans-unit>
        <trans-unit id="cb18a5479398dd6fd86a2d53428e997ea2bf744e" translate="yes" xml:space="preserve">
          <source>. The easiest way to specify such a file name is to use the function &lt;code&gt;locate-user-emacs-file&lt;/code&gt;.</source>
          <target state="translated">。このようなファイル名を指定する最も簡単な方法は、関数 &lt;code&gt;locate-user-emacs-file&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="bd3288412e142272f9ea1bc76ec7be9679af164c" translate="yes" xml:space="preserve">
          <source>. The external support uses the</source>
          <target state="translated">。外部サポートは</target>
        </trans-unit>
        <trans-unit id="60785fa6a4f94a2c12cd06082ed5341b6c5b6d8e" translate="yes" xml:space="preserve">
          <source>. The first</source>
          <target state="translated">。最初</target>
        </trans-unit>
        <trans-unit id="13e56506ef207bd9b703c8eb290d69b655a3e3fb" translate="yes" xml:space="preserve">
          <source>. The following function is supported when D-Bus support is available:</source>
          <target state="translated">。D-Busサポートが利用可能な場合、次の機能がサポートされます。</target>
        </trans-unit>
        <trans-unit id="c0e9f01a21dfe7cd4620a588af9eef24f4e7e650" translate="yes" xml:space="preserve">
          <source>. The form following the magic comment is copied verbatim, &lt;em&gt;except&lt;/em&gt; if it is one of the forms which the autoload facility handles specially (e.g., by conversion into an &lt;code&gt;autoload&lt;/code&gt; call). The forms which are not copied verbatim are the following:</source>
          <target state="translated">。マジックコメントに続くフォームは、自動ロード機能が特別に処理するフォームの1つである場合&lt;em&gt;を除いて&lt;/em&gt;、逐語的にコピーされます（たとえば、 &lt;code&gt;autoload&lt;/code&gt; 呼び出しへの変換によって）。逐語的にコピーされないフォームは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="10f1895d53b3240cf2d73a60d5ba00301827dd28" translate="yes" xml:space="preserve">
          <source>. The key sequence</source>
          <target state="translated">。キーシーケンス</target>
        </trans-unit>
        <trans-unit id="11be9ca5acbfd855db785c3e4c725411af3782c2" translate="yes" xml:space="preserve">
          <source>. The link appears in the customization buffer as &lt;var&gt;url&lt;/var&gt; and invokes the WWW browser specified by &lt;code&gt;browse-url-browser-function&lt;/code&gt;.</source>
          <target state="translated">。リンクはカスタマイズバッファに &lt;var&gt;url&lt;/var&gt; として表示され、 &lt;code&gt;browse-url-browser-function&lt;/code&gt; で指定されたWWWブラウザを呼び出します。</target>
        </trans-unit>
        <trans-unit id="93b8b9d2f3c3c65f5d4e443fd5c49f41dcdfdfff" translate="yes" xml:space="preserve">
          <source>. The object is not evaluated. See &lt;a href=&quot;object-from-minibuffer#Object-from-Minibuffer&quot;&gt;Object from Minibuffer&lt;/a&gt;. Prompt.</source>
          <target state="translated">。オブジェクトは評価されません。&lt;a href=&quot;object-from-minibuffer#Object-from-Minibuffer&quot;&gt;ミニバッファからのオブジェクトを&lt;/a&gt;参照してください。促す。</target>
        </trans-unit>
        <trans-unit id="d6a9f9615fa516e1109ff463714edbe0584098f1" translate="yes" xml:space="preserve">
          <source>. The old contents of</source>
          <target state="translated">。の古い内容</target>
        </trans-unit>
        <trans-unit id="89c25e995b112763a704e24b23de32055f221f2e" translate="yes" xml:space="preserve">
          <source>. The other punctuation characters are reserved for minor modes, and ordinary letters are reserved for users.</source>
          <target state="translated">。他の句読文字はマイナーモード用に予約されており、通常の文字はユーザー用に予約されています。</target>
        </trans-unit>
        <trans-unit id="f2ca8d0ef6637d50dd596c53b66fc0e54cd0cb26" translate="yes" xml:space="preserve">
          <source>. The relevant Info files should also be present in the content directory. In this case, Emacs will automatically add the content directory to &lt;code&gt;Info-directory-list&lt;/code&gt; when the package is activated.</source>
          <target state="translated">。関連する情報ファイルもコンテンツディレクトリに存在する必要があります。この場合、パッケージがアクティブ化されると、Emacsはコンテンツディレクトリを &lt;code&gt;Info-directory-list&lt;/code&gt; に自動的に追加します。</target>
        </trans-unit>
        <trans-unit id="d3a300dba763d73e8e6b749884746ae06a7daa93" translate="yes" xml:space="preserve">
          <source>. The text is grouped by modes&amp;mdash;minor modes first, then the major mode, then global bindings.</source>
          <target state="translated">。テキストはモードごとにグループ化されています。最初にマイナーモード、次にメジャーモード、次にグローバルバインディングです。</target>
        </trans-unit>
        <trans-unit id="e79e3f2b523be18620a16e977128d31076d8e2df" translate="yes" xml:space="preserve">
          <source>. The value is always a number. See &lt;a href=&quot;prefix-command-arguments#Prefix-Command-Arguments&quot;&gt;Prefix Command Arguments&lt;/a&gt;. Prompt.</source>
          <target state="translated">。値は常に数値です。&lt;a href=&quot;prefix-command-arguments#Prefix-Command-Arguments&quot;&gt;プレフィックスコマンドの引数を&lt;/a&gt;参照してください。促す。</target>
        </trans-unit>
        <trans-unit id="2c28b2f60408a4d6fc3319bbfb0b669caefe3119" translate="yes" xml:space="preserve">
          <source>. The variable &lt;code&gt;tab-width&lt;/code&gt; controls the number of spaces per tab stop (see below).</source>
          <target state="translated">。可変 &lt;code&gt;tab-width&lt;/code&gt; は、タブストップごとのスペース数を制御します（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="475a25562a32072d9abbca007e216cc16dd719dd" translate="yes" xml:space="preserve">
          <source>. Then &lt;code&gt;(require 'foo)&lt;/code&gt; never loads the file in the second directory. Such a situation might indicate a problem in the way Emacs was installed.</source>
          <target state="translated">。その場合、 &lt;code&gt;(require 'foo)&lt;/code&gt; は2番目のディレクトリにファイルをロードしません。このような状況は、Emacsのインストール方法に問題があることを示している可能性があります。</target>
        </trans-unit>
        <trans-unit id="0d500eb08f53c5641e92c7cd39f8fc453eed984c" translate="yes" xml:space="preserve">
          <source>. Then &lt;code&gt;eval-expression&lt;/code&gt; displays its return value in the echo area.</source>
          <target state="translated">。次に、 &lt;code&gt;eval-expression&lt;/code&gt; はその戻り値をエコー領域に表示します。</target>
        </trans-unit>
        <trans-unit id="6ff7a8a7b9804f2e196c5f95f8e6e4a127cc2c37" translate="yes" xml:space="preserve">
          <source>. Then continue execution like</source>
          <target state="translated">。その後、次のように実行を続行します</target>
        </trans-unit>
        <trans-unit id="7987dcae896ae71467dbee888a196581900f2a3a" translate="yes" xml:space="preserve">
          <source>. Then the binding for</source>
          <target state="translated">。次に、</target>
        </trans-unit>
        <trans-unit id="dfa79532760661317b61b7d30fecfa193d651d95" translate="yes" xml:space="preserve">
          <source>. There are no &lt;var&gt;body&lt;/var&gt; forms&amp;mdash;many minor modes don&amp;rsquo;t need any.</source>
          <target state="translated">。何もありません &lt;var&gt;body&lt;/var&gt; の形-多くのマイナーモードはいずれも必要ありませんが。</target>
        </trans-unit>
        <trans-unit id="d7a7e02f056566031479ae440458f3963c92f90d" translate="yes" xml:space="preserve">
          <source>. These messages include file names and line numbers identifying the location of the problem. The usual Emacs commands for operating on compiler output can be used on these messages.</source>
          <target state="translated">。これらのメッセージには、問題の場所を特定するファイル名と行番号が含まれています。コンパイラ出力を操作するための通常のEmacsコマンドは、これらのメッセージで使用できます。</target>
        </trans-unit>
        <trans-unit id="6de359c4ae6f3d9bf1f938a972654462d7d36fba" translate="yes" xml:space="preserve">
          <source>. These values apply to all Emacs frames created on this display, overriding the resource values recorded in the X server. Here&amp;rsquo;s an example of what this string might look like:</source>
          <target state="translated">。これらの値は、このディスプレイで作成されたすべてのEmacsフレームに適用され、Xサーバーに記録されたリソース値を上書きします。この文字列がどのように見えるかの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="ab37342e51a64e7e4aaf7b35420e6e052b66960c" translate="yes" xml:space="preserve">
          <source>. They all return lists of matching nodes.</source>
          <target state="translated">。それらはすべて、一致するノードのリストを返します。</target>
        </trans-unit>
        <trans-unit id="62573a4326c7e966f0ccc21f04c44d60ead448db" translate="yes" xml:space="preserve">
          <source>. They use keymaps that have no special names.</source>
          <target state="translated">。特別な名前のないキーマップを使用します。</target>
        </trans-unit>
        <trans-unit id="d3e96f9d9598fb97c0f86c580b9a077a05c131ce" translate="yes" xml:space="preserve">
          <source>. This chapter describes how to define &lt;em&gt;customization items&lt;/em&gt; that users can interact with through the Customize interface.</source>
          <target state="translated">。この章では、ユーザーがカスタマイズインターフェイスを介して操作できる&lt;em&gt;カスタマイズアイテム&lt;/em&gt;を定義する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="b276f5d39c0f07465dca4475a7187f3dfb760832" translate="yes" xml:space="preserve">
          <source>. This command uses the abnormal hook variable &lt;code&gt;completion-at-point-functions&lt;/code&gt;:</source>
          <target state="translated">。このコマンドは、異常なフック変数 &lt;code&gt;completion-at-point-functions&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="440e8b65c220454eda49f23925a1c481db332bb9" translate="yes" xml:space="preserve">
          <source>. This file is executed after the documentation strings are found.</source>
          <target state="translated">。このファイルは、ドキュメント文字列が見つかった後に実行されます。</target>
        </trans-unit>
        <trans-unit id="0ac510c906c2ba1fe0e42b295df8444b06fa6e43" translate="yes" xml:space="preserve">
          <source>. This file is reserved for the package&amp;rsquo;s autoload definitions (see &lt;a href=&quot;packaging-basics#Packaging-Basics&quot;&gt;Packaging Basics&lt;/a&gt;). It is created automatically when the package is installed, by searching all the Lisp files in the package for autoload magic comments.</source>
          <target state="translated">。このファイルは、パッケージの自動ロード定義用に予約されています（&lt;a href=&quot;packaging-basics#Packaging-Basics&quot;&gt;パッケージングの基本を&lt;/a&gt;参照）。パッケージがインストールされると、パッケージ内のすべてのLispファイルで自動ロードマジックコメントを検索することにより、自動的に作成されます。</target>
        </trans-unit>
        <trans-unit id="9083dd2188875736a04b396d142e6789b8938c5d" translate="yes" xml:space="preserve">
          <source>. This file should have been compiled into the Emacs executable when it was built.</source>
          <target state="translated">。このファイルは、ビルド時にEmacs実行可能ファイルにコンパイルされている必要があります。</target>
        </trans-unit>
        <trans-unit id="9fb24ef0316e818466d6ee65409af277724a4326" translate="yes" xml:space="preserve">
          <source>. This function also accepts</source>
          <target state="translated">。この関数は、</target>
        </trans-unit>
        <trans-unit id="75bfea971cd20cf7ae8c1bead0746148234b64d0" translate="yes" xml:space="preserve">
          <source>. This handling is done at a very low level, so you may assume that all the functions described in this chapter accept magic file names as file name arguments, except where noted. See &lt;a href=&quot;magic-file-names#Magic-File-Names&quot;&gt;Magic File Names&lt;/a&gt;, for details.</source>
          <target state="translated">。この処理は非常に低いレベルで行われるため、この章で説明するすべての関数は、特に明記されていない限り、ファイル名の引数としてマジックファイル名を受け入れると想定できます。詳細については、&lt;a href=&quot;magic-file-names#Magic-File-Names&quot;&gt;マジックファイル名&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e9d0ec542029b062fdc942a354352adebd9cc164" translate="yes" xml:space="preserve">
          <source>. This ignores the effective</source>
          <target state="translated">。これは効果的なものを無視します</target>
        </trans-unit>
        <trans-unit id="7feac71636196c6d9ece4f2d7a4ac0179123d423" translate="yes" xml:space="preserve">
          <source>. This is a log of function calls and returns, showing the function names and their arguments and values. To enable trace recording, set &lt;code&gt;edebug-trace&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; value.</source>
          <target state="translated">。これは、関数の呼び出しと戻りのログであり、関数名とその引数および値を示しています。トレース記録を有効にするには、 &lt;code&gt;edebug-trace&lt;/code&gt; を &lt;code&gt;nil&lt;/code&gt; 以外の値に設定します。</target>
        </trans-unit>
        <trans-unit id="9d3972c2f73be112c14da46593cbcebfbe3de606" translate="yes" xml:space="preserve">
          <source>. This is useful when</source>
          <target state="translated">。これは次の場合に便利です</target>
        </trans-unit>
        <trans-unit id="f67f10c496ecf97ea2af4f07ed9f5dbd5b44142e" translate="yes" xml:space="preserve">
          <source>. This map is actually global, not mode-specific, but its name provides useful information about</source>
          <target state="translated">。このマップは実際にはグローバルであり、モード固有ではありませんが、その名前は</target>
        </trans-unit>
        <trans-unit id="79788305f020097034ee12f7dadb97bf6ff2763e" translate="yes" xml:space="preserve">
          <source>. This section describes some variables used by Auto Fill mode. For a description of functions that you can call explicitly to fill and justify existing text, see &lt;a href=&quot;filling#Filling&quot;&gt;Filling&lt;/a&gt;.</source>
          <target state="translated">。このセクションでは、自動入力モードで使用されるいくつかの変数について説明します。既存のテキストを記入し、正当化するために、明示的に呼び出すことができるという機能の説明については、参照の&lt;a href=&quot;filling#Filling&quot;&gt;充填を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f13a11b97d1ed9c0650d9ba61a57a68db27f6ec6" translate="yes" xml:space="preserve">
          <source>. This special treatment does not apply if &lt;var&gt;newname&lt;/var&gt; is not a directory name but names a file that is a directory; for example, the &lt;var&gt;newname&lt;/var&gt;</source>
          <target state="translated">。 &lt;var&gt;newname&lt;/var&gt; がディレクトリ名ではなく、ディレクトリであるファイルに名前を付ける場合、この特別な扱いは適用されません。たとえば、 &lt;var&gt;newname&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="2bc32a518110730920225717e4ef7ff03240c1bb" translate="yes" xml:space="preserve">
          <source>. This value may change whenever the tool bar wraps (see &lt;a href=&quot;frame-layout#Frame-Layout&quot;&gt;Frame Layout&lt;/a&gt;).</source>
          <target state="translated">。この値は、ツールバーが折り返されるたびに変更される可能性があります（&lt;a href=&quot;frame-layout#Frame-Layout&quot;&gt;フレームレイアウトを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="0e040ea259233cb8831ee6cd1514da2d1c0f498f" translate="yes" xml:space="preserve">
          <source>. To add a new expression to the evaluation list, insert the expression at a suitable place, insert a new comment line, then type</source>
          <target state="translated">。評価リストに新しい式を追加するには、適切な場所に式を挿入し、新しいコメント行を挿入してから、次のように入力します。</target>
        </trans-unit>
        <trans-unit id="c53a8234aae95a2dc0f7d035ebba5aed21f904cb" translate="yes" xml:space="preserve">
          <source>. To enable automatic queries of &lt;code&gt;auth-source&lt;/code&gt; when &lt;code&gt;:client-certificate&lt;/code&gt; is not specified customize &lt;code&gt;network-stream-use-client-certificates&lt;/code&gt; to t.</source>
          <target state="translated">。 &lt;code&gt;:client-certificate&lt;/code&gt; が指定されていない場合に &lt;code&gt;auth-source&lt;/code&gt; の自動クエリを有効にするには、 &lt;code&gt;network-stream-use-client-certificates&lt;/code&gt; をtにカスタマイズします。</target>
        </trans-unit>
        <trans-unit id="e33a0ed1c7912c2a54c99ecf031b5f9c3eab7768" translate="yes" xml:space="preserve">
          <source>. To hide them again use</source>
          <target state="translated">。それらを再び非表示にするには、</target>
        </trans-unit>
        <trans-unit id="2298f613da3424a27f72fa532169aa303d2086a7" translate="yes" xml:space="preserve">
          <source>. Unlike &lt;code&gt;find-file-literally&lt;/code&gt;, finding a file as &amp;lsquo;</source>
          <target state="translated">。 &lt;code&gt;find-file-literally&lt;/code&gt; とは異なり、ファイルを 'として検索する</target>
        </trans-unit>
        <trans-unit id="493af3014138d1d8c2f9ce4fecc7ed908edeba2f" translate="yes" xml:space="preserve">
          <source>. Use</source>
          <target state="translated">。使用する</target>
        </trans-unit>
        <trans-unit id="5c59fdf4315978390ace5e00226c159499e7c9fe" translate="yes" xml:space="preserve">
          <source>. Usually all the lines from a certain point to the end of the function will shift to the right. There is probably a missing close parenthesis, or a superfluous open parenthesis, near that point. (However, don&amp;rsquo;t assume this is true; study the code to make sure.) Once you have found the discrepancy, undo the</source>
          <target state="translated">。通常、特定のポイントから関数の終わりまでのすべての行が右にシフトします。そのポイントの近くに、閉じ括弧がないか、余分な開き括弧がある可能性があります。（ただし、これが当てはまるとは限りません。コードを調べて確認してください。）不一致を見つけたら、元に戻します。</target>
        </trans-unit>
        <trans-unit id="430df61a1948fbf603f53eda89fa439bd575ee9c" translate="yes" xml:space="preserve">
          <source>. When Emacs reads this character, if &lt;code&gt;help-form&lt;/code&gt; is a non-&lt;code&gt;nil&lt;/code&gt; Lisp expression, it evaluates that expression, and displays the result in a window if it is a string.</source>
          <target state="translated">。Emacsがこの文字を読み取るとき、 &lt;code&gt;help-form&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; 以外のLisp式である場合、Emacsはその式を評価し、文字列の場合は結果をウィンドウに表示します。</target>
        </trans-unit>
        <trans-unit id="f68eb18b1e7f0028b830056453fb798d1d79ad51" translate="yes" xml:space="preserve">
          <source>. When called interactively, &lt;var&gt;trash&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt; if no prefix argument is given, and &lt;code&gt;nil&lt;/code&gt; otherwise.</source>
          <target state="translated">。インタラクティブに呼び出された場合、プレフィックス引数が指定されていない場合は &lt;var&gt;trash&lt;/var&gt; は &lt;code&gt;t&lt;/code&gt; であり、それ以外の場合は &lt;code&gt;nil&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a0c27330a94e7b867923b5db36265c8d0bb0bd10" translate="yes" xml:space="preserve">
          <source>. When disabling Read Only mode, it disables View mode if View mode was enabled.</source>
          <target state="translated">。読み取り専用モードを無効にすると、表示モードが有効になっている場合は表示モードが無効になります。</target>
        </trans-unit>
        <trans-unit id="e0c60baa39e76c33679739010e7071bd49a26a76" translate="yes" xml:space="preserve">
          <source>. You can also define your own categories in addition to the standard ones using the &lt;code&gt;define-category&lt;/code&gt; function (see &lt;a href=&quot;categories#Categories&quot;&gt;Categories&lt;/a&gt;).</source>
          <target state="translated">。また、 &lt;code&gt;define-category&lt;/code&gt; 関数を使用して、標準のカテゴリに加えて独自のカテゴリを定義することもできます（&lt;a href=&quot;categories#Categories&quot;&gt;カテゴリを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="bb813dc19fbdc426d076c3177df98a0979c8e6cd" translate="yes" xml:space="preserve">
          <source>. You can also use the &lt;code&gt;benchmark&lt;/code&gt; command for timing forms interactively.</source>
          <target state="translated">。フォームのタイミングをインタラクティブに設定するために &lt;code&gt;benchmark&lt;/code&gt; コマンドを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="f5da1b103fb5770d46c5dbca3ca074025b8ae069" translate="yes" xml:space="preserve">
          <source>. You can also use this escape syntax in vectors, as well as others that aren&amp;rsquo;t allowed in strings; one example is &amp;lsquo;</source>
          <target state="translated">。このエスケープ構文は、ベクターや、文字列で許可されていない他の構文でも使用できます。一例は '</target>
        </trans-unit>
        <trans-unit id="4f1d734ed57c16c20097a3e6242d286cf28b8c65" translate="yes" xml:space="preserve">
          <source>. You can choose to profile by processor usage, memory usage, or both. Then run the code you&amp;rsquo;d like to speed up. After that, type</source>
          <target state="translated">。プロセッサ使用率、メモリ使用率、またはその両方でプロファイルを選択できます。次に、高速化したいコードを実行します。その後、入力します</target>
        </trans-unit>
        <trans-unit id="8d2280ed98781dfe279ab9ab06c266368c257c71" translate="yes" xml:space="preserve">
          <source>. You can compare two profiles using</source>
          <target state="translated">。を使用して2つのプロファイルを比較できます</target>
        </trans-unit>
        <trans-unit id="027f25f51706acde06611f59d7afbab61442f2fd" translate="yes" xml:space="preserve">
          <source>. You can display a backtrace of all the pending evaluations with</source>
          <target state="translated">。保留中のすべての評価のバックトレースを表示できます。</target>
        </trans-unit>
        <trans-unit id="9556ea1c9440f59c0b01a3f0b09baafe0132b153" translate="yes" xml:space="preserve">
          <source>. You can study these libraries to see how modes are written.</source>
          <target state="translated">。これらのライブラリを調べて、モードがどのように記述されているかを確認できます。</target>
        </trans-unit>
        <trans-unit id="5a1a734d2c879ab7f9c3f87b2d8782c1736d17d8" translate="yes" xml:space="preserve">
          <source>. You can use &amp;lsquo;</source>
          <target state="translated">。'を使用できます</target>
        </trans-unit>
        <trans-unit id="b0bd1788e82700c0b129739bcb5285ffb34bf612" translate="yes" xml:space="preserve">
          <source>. You need not insert dashes in the comment line&amp;mdash;its contents don&amp;rsquo;t matter.</source>
          <target state="translated">。コメント行にダッシュを挿入する必要はありません。内容は関係ありません。</target>
        </trans-unit>
        <trans-unit id="d3e80f8035b29cb513aafe9628c9427b0b7b99f3" translate="yes" xml:space="preserve">
          <source>.)</source>
          <target state="translated">.)</target>
        </trans-unit>
        <trans-unit id="539689767d2e3addf7138caf13f1ee79f653c44b" translate="yes" xml:space="preserve">
          <source>.) Choose one or more of them (but not too many), and add your group to each of them using the &lt;code&gt;:group&lt;/code&gt; keyword.</source>
          <target state="translated">。）1つ以上（ただし多すぎない）を選択し、 &lt;code&gt;:group&lt;/code&gt; キーワードを使用してそれぞれにグループを追加します。</target>
        </trans-unit>
        <trans-unit id="5e8ea8e32ad7a5cfb33297cc5b2b742abbd4c82a" translate="yes" xml:space="preserve">
          <source>.) If the primitive is a special form, it must accept a Lisp list containing its unevaluated Lisp arguments as a single argument of type &lt;code&gt;Lisp_Object&lt;/code&gt;. If the primitive has no upper limit on the number of evaluated Lisp arguments, it must have exactly two C arguments: the first is the number of Lisp arguments, and the second is the address of a block containing their values. These have types &lt;code&gt;ptrdiff_t&lt;/code&gt; and &lt;code&gt;Lisp_Object&amp;nbsp;*&lt;/code&gt;, respectively. Since &lt;code&gt;Lisp_Object&lt;/code&gt; can hold any Lisp object of any data type, you can determine the actual data type only at run time; so if you want a primitive to accept only a certain type of argument, you must check the type explicitly using a suitable predicate (see &lt;a href=&quot;type-predicates#Type-Predicates&quot;&gt;Type Predicates&lt;/a&gt;).</source>
          <target state="translated">。）プリミティブが特殊な形式の場合、未評価のLisp引数を含むLispリストを &lt;code&gt;Lisp_Object&lt;/code&gt; 型の単一引数として受け入れる必要があります。プリミティブに評価されるLisp引数の数に上限がない場合、正確に2つのC引数が必要です。1つ目はLisp引数の数で、2つ目はそれらの値を含むブロックのアドレスです。これらのタイプは、それぞれ &lt;code&gt;ptrdiff_t&lt;/code&gt; および &lt;code&gt;Lisp_Object&amp;nbsp;*&lt;/code&gt; です。以来 &lt;code&gt;Lisp_Object&lt;/code&gt; は、任意のデータ型の任意のLispオブジェクトを保持することができ、あなただけの実行時に実際のデータ型を決定することができます。したがって、プリミティブが特定のタイプの引数のみを受け入れるようにする場合は、適切な述語を使用してタイプを明示的にチェックする必要があります（&lt;a href=&quot;type-predicates#Type-Predicates&quot;&gt;タイプ述語を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="f95503a9df52be0a55e5e848a1ec32db30fac5f9" translate="yes" xml:space="preserve">
          <source>.) Note that the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; parameters, if present, override the values of mouse-relative offsets.</source>
          <target state="translated">。） &lt;code&gt;left&lt;/code&gt; と &lt;code&gt;top&lt;/code&gt; パラメータが存在する場合、マウス相対オフセットの値を上書きすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="76205ae30772ac93486c0a3c2a85562d154592d3" translate="yes" xml:space="preserve">
          <source>../../etc/images</source>
          <target state="translated">../../etc/images</target>
        </trans-unit>
        <trans-unit id="7936c668c3f30126965691fdeacaf56c349267d4" translate="yes" xml:space="preserve">
          <source>../etc/images</source>
          <target state="translated">../etc/images</target>
        </trans-unit>
        <trans-unit id="b2aa0d96b99ab0f0b362ffad234f827ee35020ec" translate="yes" xml:space="preserve">
          <source>.15e4</source>
          <target state="translated">.15e4</target>
        </trans-unit>
        <trans-unit id="fa63aa964f4c14b9885f272aadf411cb9ea4dc99" translate="yes" xml:space="preserve">
          <source>.Xresources</source>
          <target state="translated">.Xresources</target>
        </trans-unit>
        <trans-unit id="6b74f8382b73f81104ed866789f2261a7109348d" translate="yes" xml:space="preserve">
          <source>.\|\n</source>
          <target state="translated">.\|\n</target>
        </trans-unit>
        <trans-unit id="e473aee93856e9575d33fb51693f35c2eaddeb44" translate="yes" xml:space="preserve">
          <source>.au</source>
          <target state="translated">.au</target>
        </trans-unit>
        <trans-unit id="59ad5dfb199e0d50018178fc31e4529d6df35d35" translate="yes" xml:space="preserve">
          <source>.bat</source>
          <target state="translated">.bat</target>
        </trans-unit>
        <trans-unit id="48022311225df803178b78acbdb71930dbf6c39c" translate="yes" xml:space="preserve">
          <source>.bmp</source>
          <target state="translated">.bmp</target>
        </trans-unit>
        <trans-unit id="089d0d0acddf66296ea6622a4bc5373e7afeb2db" translate="yes" xml:space="preserve">
          <source>.c</source>
          <target state="translated">.c</target>
        </trans-unit>
        <trans-unit id="27dad88631482fda4301df1d6fbf9278c94c0f1f" translate="yes" xml:space="preserve">
          <source>.com</source>
          <target state="translated">.com</target>
        </trans-unit>
        <trans-unit id="4434bacef9c00424a65bfd8afe1a0799d2a54d23" translate="yes" xml:space="preserve">
          <source>.dir-locals-2.el</source>
          <target state="translated">.dir-locals-2.el</target>
        </trans-unit>
        <trans-unit id="f9cb3a52c9078cde24bd83b34488343ab4538f65" translate="yes" xml:space="preserve">
          <source>.dir-locals.el</source>
          <target state="translated">.dir-locals.el</target>
        </trans-unit>
        <trans-unit id="e68a65cce98da78e6fa59f7acde8480614e6c25f" translate="yes" xml:space="preserve">
          <source>.dll</source>
          <target state="translated">.dll</target>
        </trans-unit>
        <trans-unit id="37e85384bfabab60684432b98cfd134b74a64e93" translate="yes" xml:space="preserve">
          <source>.el</source>
          <target state="translated">.el</target>
        </trans-unit>
        <trans-unit id="5bc31f8d3859e89df1b10b4407da261743609da9" translate="yes" xml:space="preserve">
          <source>.elc</source>
          <target state="translated">.elc</target>
        </trans-unit>
        <trans-unit id="749725386ab34f45d93016ad1809528d8d6dd6bc" translate="yes" xml:space="preserve">
          <source>.emacs</source>
          <target state="translated">.emacs</target>
        </trans-unit>
        <trans-unit id="d5652b137d9bd31dbc103d8c6107cdf43741963c" translate="yes" xml:space="preserve">
          <source>.emacs.d</source>
          <target state="translated">.emacs.d</target>
        </trans-unit>
        <trans-unit id="767dddbb5742ce5d7ca4b29e327f1f6fb9d8ac6a" translate="yes" xml:space="preserve">
          <source>.emacs.el</source>
          <target state="translated">.emacs.el</target>
        </trans-unit>
        <trans-unit id="a9085093a9d58148571626b42be2902497a50db1" translate="yes" xml:space="preserve">
          <source>.emacs.elc</source>
          <target state="translated">.emacs.elc</target>
        </trans-unit>
        <trans-unit id="fc4302a8973108f7b86565d5a49182ded2b0bf31" translate="yes" xml:space="preserve">
          <source>.exe</source>
          <target state="translated">.exe</target>
        </trans-unit>
        <trans-unit id="86d263da4dff65808ce6105209554674768d0759" translate="yes" xml:space="preserve">
          <source>.gz</source>
          <target state="translated">.gz</target>
        </trans-unit>
        <trans-unit id="af3df703ca523bbde4c5317a8bc7d22bc7a3ac3b" translate="yes" xml:space="preserve">
          <source>.ico</source>
          <target state="translated">.ico</target>
        </trans-unit>
        <trans-unit id="a9ca8ac26a06f7f78fb0177657c1b734adaf2ba4" translate="yes" xml:space="preserve">
          <source>.m</source>
          <target state="translated">.m</target>
        </trans-unit>
        <trans-unit id="c2f992fd652f93bf13447aa31922ed3e0a189712" translate="yes" xml:space="preserve">
          <source>.nosearch</source>
          <target state="translated">.nosearch</target>
        </trans-unit>
        <trans-unit id="d8acaf02a6271f2c0f6dc24f707ad72d0f009e89" translate="yes" xml:space="preserve">
          <source>.pbm</source>
          <target state="translated">.pbm</target>
        </trans-unit>
        <trans-unit id="d558ce4a0c95ff70bdf9fd133b3f27587c7a2ab0" translate="yes" xml:space="preserve">
          <source>.saves-</source>
          <target state="translated">.saves-</target>
        </trans-unit>
        <trans-unit id="db01633920422b5141ebc872759171f089fc1102" translate="yes" xml:space="preserve">
          <source>.sig</source>
          <target state="translated">.sig</target>
        </trans-unit>
        <trans-unit id="c17b4000f3f9edf25c74222bf5e8a16e787cee11" translate="yes" xml:space="preserve">
          <source>.so</source>
          <target state="translated">.so</target>
        </trans-unit>
        <trans-unit id="39cb42ed04010c3ce1112ee8fdbe978799a17590" translate="yes" xml:space="preserve">
          <source>.txt</source>
          <target state="translated">.txt</target>
        </trans-unit>
        <trans-unit id="c5ef9b806cbd2bfa0d6c179fe35e3ab475bf5aaf" translate="yes" xml:space="preserve">
          <source>.wav</source>
          <target state="translated">.wav</target>
        </trans-unit>
        <trans-unit id="0aba491d681d7be6e2b4fb159297be35fae172a0" translate="yes" xml:space="preserve">
          <source>.xbm</source>
          <target state="translated">.xbm</target>
        </trans-unit>
        <trans-unit id="9e2efa39f5d920790904583da479565824ac74d9" translate="yes" xml:space="preserve">
          <source>.xpm</source>
          <target state="translated">.xpm</target>
        </trans-unit>
        <trans-unit id="207e6c15ec0274ab39b0485f4b922d9d2105cb22" translate="yes" xml:space="preserve">
          <source>.~3~</source>
          <target state="translated">.~3~</target>
        </trans-unit>
        <trans-unit id="42099b4af021e53fd8fd4e056c2568d7c2e3ffa8" translate="yes" xml:space="preserve">
          <source>/</source>
          <target state="translated">/</target>
        </trans-unit>
        <trans-unit id="45f99afec6361c417ce6f676d8dba2f8876eb051" translate="yes" xml:space="preserve">
          <source>/=</source>
          <target state="translated">/=</target>
        </trans-unit>
        <trans-unit id="b95096d8d85c98f17d6bfc99b6aa1ce94cfcfcd9" translate="yes" xml:space="preserve">
          <source>/dev/pts65</source>
          <target state="translated">/dev/pts65</target>
        </trans-unit>
        <trans-unit id="e9293bc922cf9f349bd144647c40226343f5bc6f" translate="yes" xml:space="preserve">
          <source>/dev/tty</source>
          <target state="translated">/dev/tty</target>
        </trans-unit>
        <trans-unit id="d4baa1182495c2678ec727ce7cb0afa61dff3382" translate="yes" xml:space="preserve">
          <source>/dev/ttyS0</source>
          <target state="translated">/dev/ttyS0</target>
        </trans-unit>
        <trans-unit id="6dbd548cc03e44b8b44b6e68e56255ce4273ae49" translate="yes" xml:space="preserve">
          <source>/foo</source>
          <target state="translated">/foo</target>
        </trans-unit>
        <trans-unit id="8d960560c82f4e6c8b1b0f03eb30a1afd00e5696" translate="yes" xml:space="preserve">
          <source>/foo/</source>
          <target state="translated">/foo/</target>
        </trans-unit>
        <trans-unit id="93c32861879e0bba207915a3e4fd3119d42b98ab" translate="yes" xml:space="preserve">
          <source>/foo/bar/baz</source>
          <target state="translated">/foo/bar/baz</target>
        </trans-unit>
        <trans-unit id="0749b21ed6719a6647cd8c0fdaa1976eb25559cd" translate="yes" xml:space="preserve">
          <source>/home/foo</source>
          <target state="translated">/home/foo</target>
        </trans-unit>
        <trans-unit id="c866ca20d08741307126bed71c0bb57400b84064" translate="yes" xml:space="preserve">
          <source>/home/foo/hello</source>
          <target state="translated">/home/foo/hello</target>
        </trans-unit>
        <trans-unit id="671b61f950d8ef9c05cfff332e853b1a881f9d6d" translate="yes" xml:space="preserve">
          <source>/tmp/bar</source>
          <target state="translated">/tmp/bar</target>
        </trans-unit>
        <trans-unit id="3fe85dc53534214baefbe5977efa4ac05c5ad3c1" translate="yes" xml:space="preserve">
          <source>/tmp/foo/bar</source>
          <target state="translated">/tmp/foo/bar</target>
        </trans-unit>
        <trans-unit id="aeac54337a02692badcbfc48701e6bd5bd866f5a" translate="yes" xml:space="preserve">
          <source>/usr/foo</source>
          <target state="translated">/usr/foo</target>
        </trans-unit>
        <trans-unit id="153276ff164eab5666ed7f41c2115213fab725c5" translate="yes" xml:space="preserve">
          <source>/usr/local</source>
          <target state="translated">/usr/local</target>
        </trans-unit>
        <trans-unit id="0a8950e282f8fbecf98e8ac31d419a2feffeab0c" translate="yes" xml:space="preserve">
          <source>/xcssun/users/rms</source>
          <target state="translated">/xcssun/users/rms</target>
        </trans-unit>
        <trans-unit id="a0729eb28491ac5f96025cf2e34c20b27a174b99" translate="yes" xml:space="preserve">
          <source>0 (the number zero) means do not switch to a buffer shown on any visible or iconified frame.</source>
          <target state="translated">0(数字のゼロ)は、可視フレームやアイコン化されたフレームに表示されているバッファに切り替えないことを意味します。</target>
        </trans-unit>
        <trans-unit id="7390c3e77d0e92d1d0ab05507f0d9af5aca52e88" translate="yes" xml:space="preserve">
          <source>0 means consider windows on all visible or iconified frames.</source>
          <target state="translated">0 は、すべての可視フレームまたはアイコン化されたフレームの窓を考慮することを意味します。</target>
        </trans-unit>
        <trans-unit id="2dab72e25a5fcd4d5b0760e515fa132fbd8ffec2" translate="yes" xml:space="preserve">
          <source>0 means to consider windows on all visible or iconified frames.</source>
          <target state="translated">0は、すべての可視フレームまたはアイコン化されたフレームに窓を考慮することを意味します。</target>
        </trans-unit>
        <trans-unit id="7cf37d39b6231fc24159aebe60ebda94b435bfe2" translate="yes" xml:space="preserve">
          <source>0.0e+NaN</source>
          <target state="translated">0.0e+NaN</target>
        </trans-unit>
        <trans-unit id="79854e52752d02d886cecd248ab4073d810e3072" translate="yes" xml:space="preserve">
          <source>0X</source>
          <target state="translated">0X</target>
        </trans-unit>
        <trans-unit id="1a349dcc540a3978584510d982075f838b17cd6d" translate="yes" xml:space="preserve">
          <source>0x</source>
          <target state="translated">0x</target>
        </trans-unit>
        <trans-unit id="3eb8a90885d8f08dbcb4bfc386c68bf8b5895e42" translate="yes" xml:space="preserve">
          <source>1 min</source>
          <target state="translated">1分</target>
        </trans-unit>
        <trans-unit id="18cd3712fcf41d0c1eac4e680abc0719fde3242b" translate="yes" xml:space="preserve">
          <source>1 min 2 sec 3 hour 4 day 5 week 6 fortnight 7 month 8 year</source>
          <target state="translated">1分2秒3時間4日5週6週間7ヶ月8年</target>
        </trans-unit>
        <trans-unit id="b805f34e4ae8286300214103187151bcc69f1087" translate="yes" xml:space="preserve">
          <source>1 min 5 sec</source>
          <target state="translated">1分5秒</target>
        </trans-unit>
        <trans-unit id="658484f978118fcffcbd5dd045a0837ac46a3bdf" translate="yes" xml:space="preserve">
          <source>1+</source>
          <target state="translated">1+</target>
        </trans-unit>
        <trans-unit id="c8768506501239f7fab1e229fbf2c762ea7060e4" translate="yes" xml:space="preserve">
          <source>1-</source>
          <target state="translated">1-</target>
        </trans-unit>
        <trans-unit id="96b81708e432414e7f04119cf66e0038e375e61a" translate="yes" xml:space="preserve">
          <source>1.0e+INF</source>
          <target state="translated">1.0e+INF</target>
        </trans-unit>
        <trans-unit id="e0a44f4caaca9c2a4127895099aad2c35bbac8bb" translate="yes" xml:space="preserve">
          <source>1.5e2</source>
          <target state="translated">1.5e2</target>
        </trans-unit>
        <trans-unit id="f53b25481e85dc640ed4304089aacd524cbec116" translate="yes" xml:space="preserve">
          <source>126, and the characters between them include all the normal printing characters, (e.g., letters, digits, punctuation, etc.); all these characters are bound to &lt;code&gt;self-insert-command&lt;/code&gt;.</source>
          <target state="translated">126、およびそれらの間の文字には、すべての通常の印刷文字（たとえば、文字、数字、句読点など）が含まれます。これらの文字はすべて、 &lt;code&gt;self-insert-command&lt;/code&gt; バインドされています。</target>
        </trans-unit>
        <trans-unit id="27a52d6e5c5ddb6850d0526f5687ceb2c9eb938c" translate="yes" xml:space="preserve">
          <source>15.0e+2</source>
          <target state="translated">15.0e+2</target>
        </trans-unit>
        <trans-unit id="5ef72bf91f8254ac2a64a56cb3202c82d2f72b80" translate="yes" xml:space="preserve">
          <source>1value</source>
          <target state="translated">1value</target>
        </trans-unit>
        <trans-unit id="0730a1ea68bdaa5e01fa52d15e69551e40cf7c03" translate="yes" xml:space="preserve">
          <source>23b</source>
          <target state="translated">23b</target>
        </trans-unit>
        <trans-unit id="2cc4e1dc9104676883b5aa72fb69b6028fdf40dd" translate="yes" xml:space="preserve">
          <source>32,</source>
          <target state="translated">32,</target>
        </trans-unit>
        <trans-unit id="05a79f06cf3f67f726dae68d18a2290f6c9a50c9" translate="yes" xml:space="preserve">
          <source>:</source>
          <target state="translated">:</target>
        </trans-unit>
        <trans-unit id="686979267e9da5d4c8ad4b6924620505630e4ca7" translate="yes" xml:space="preserve">
          <source>: &lt;code&gt;lexical-let&lt;/code&gt;, &lt;code&gt;macrolet&lt;/code&gt;, and &lt;code&gt;symbol-macrolet&lt;/code&gt;.</source>
          <target state="translated">： &lt;code&gt;lexical-let&lt;/code&gt; 、 &lt;code&gt;macrolet&lt;/code&gt; 、 &lt;code&gt;symbol-macrolet&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="40ee31002957968f0f91eb4bcfac390eb980bc86" translate="yes" xml:space="preserve">
          <source>:align-to 0</source>
          <target state="translated">：align-0に</target>
        </trans-unit>
        <trans-unit id="06b2ab1ae934d7be012660f4712efa7122fa0e29" translate="yes" xml:space="preserve">
          <source>:bindtodevice &lt;var&gt;device-name&lt;/var&gt;</source>
          <target state="translated">：bindtodevice &lt;var&gt;device-name&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="94419904883b01a6927eb024d986e83d90db7825" translate="yes" xml:space="preserve">
          <source>:broadcast &lt;var&gt;broadcast-flag&lt;/var&gt;</source>
          <target state="translated">：ブロードキャスト &lt;var&gt;broadcast-flag&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="cc455516b52f9a9ce367ead04ad9701928d3ec46" translate="yes" xml:space="preserve">
          <source>:buffer &lt;var&gt;buffer&lt;/var&gt;</source>
          <target state="translated">：バッファ &lt;var&gt;buffer&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="abfcb809caa604adc590f3687175c98edad0cbc3" translate="yes" xml:space="preserve">
          <source>:capability-command</source>
          <target state="translated">:capability-command</target>
        </trans-unit>
        <trans-unit id="69971d9acd038eca21ffe9464cee50780c5a8bd9" translate="yes" xml:space="preserve">
          <source>:coding &lt;var&gt;coding&lt;/var&gt;</source>
          <target state="translated">：コーディング &lt;var&gt;coding&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="a96cc2afdbc17a8c5b066c48df6623ebcc405409" translate="yes" xml:space="preserve">
          <source>:command &lt;var&gt;command&lt;/var&gt;</source>
          <target state="translated">：コマンド &lt;var&gt;command&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="bf2fbbba4ce1298f81a19a5eab503f3d10523f52" translate="yes" xml:space="preserve">
          <source>:connection-type &lt;var&gt;type&lt;/var&gt;</source>
          <target state="translated">：接続タイプ &lt;var&gt;type&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="002df618c8fe131f8e5e1438d70618a95dea94a7" translate="yes" xml:space="preserve">
          <source>:dontroute &lt;var&gt;dontroute-flag&lt;/var&gt;</source>
          <target state="translated">：dontroutedontroute- &lt;var&gt;dontroute-flag&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="0af505286f7f7820ff04b8d8fecfff964428ba41" translate="yes" xml:space="preserve">
          <source>:family &lt;var&gt;family&lt;/var&gt;</source>
          <target state="translated">：家族 &lt;var&gt;family&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="5e3342710cfcf858961d9e51d8e92b7d7579d258" translate="yes" xml:space="preserve">
          <source>:file-handler &lt;var&gt;file-handler&lt;/var&gt;</source>
          <target state="translated">：file-handler &lt;var&gt;file-handler&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="f10b29323191dcc64eddf1db11977dd7492ecc03" translate="yes" xml:space="preserve">
          <source>:filter &lt;var&gt;filter&lt;/var&gt;</source>
          <target state="translated">：フィルター &lt;var&gt;filter&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="a68ccd576a4715e68d844f3f6da2743b9c41b22a" translate="yes" xml:space="preserve">
          <source>:filter-multibyte &lt;var&gt;multibyte&lt;/var&gt;</source>
          <target state="translated">：filter- &lt;var&gt;multibyte&lt;/var&gt; バイトマルチバイト</target>
        </trans-unit>
        <trans-unit id="693a7120b632aacaa3b5f1a0984898dee6fdd376" translate="yes" xml:space="preserve">
          <source>:host &lt;var&gt;host&lt;/var&gt;</source>
          <target state="translated">：ホスト &lt;var&gt;host&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="4ba19e2f71a6d15372664d787de00cb7f44150a3" translate="yes" xml:space="preserve">
          <source>:keepalive &lt;var&gt;keepalive-flag&lt;/var&gt;</source>
          <target state="translated">：keepalivekeepalive- &lt;var&gt;keepalive-flag&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="5c9b811c8bcf49f557ef432e6822086fdc7caf8d" translate="yes" xml:space="preserve">
          <source>:linger &lt;var&gt;linger-arg&lt;/var&gt;</source>
          <target state="translated">：linger &lt;var&gt;linger-arg&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="c317142f4ed8008d1706d5b4d5ebfdc7b979a377" translate="yes" xml:space="preserve">
          <source>:local &lt;var&gt;local-address&lt;/var&gt;</source>
          <target state="translated">：ローカル &lt;var&gt;local-address&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="040a5b3baddb43fa16ba824983caee445ffa0e37" translate="yes" xml:space="preserve">
          <source>:log &lt;var&gt;log&lt;/var&gt;</source>
          <target state="translated">： &lt;var&gt;log&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="8a7f34685b9a9391287a0b3faed05f1e418720eb" translate="yes" xml:space="preserve">
          <source>:name &lt;var&gt;name&lt;/var&gt;</source>
          <target state="translated">：name &lt;var&gt;name&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="c1741ed5abc6d8dda267d87b408ce574177b6427" translate="yes" xml:space="preserve">
          <source>:noquery &lt;var&gt;query-flag&lt;/var&gt;</source>
          <target state="translated">：noquery &lt;var&gt;query-flag&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="66948ec55ea5b8f5e05d36d5ee74e530cb37875a" translate="yes" xml:space="preserve">
          <source>:nowait &lt;var&gt;bool&lt;/var&gt;</source>
          <target state="translated">：nowait &lt;var&gt;bool&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="630d54f26f290e46f025fee907b7e839b191e428" translate="yes" xml:space="preserve">
          <source>:oobinline &lt;var&gt;oobinline-flag&lt;/var&gt;</source>
          <target state="translated">：oobinlineoobinline- &lt;var&gt;oobinline-flag&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="6ad2ef94214dbc0f97577fc7d429c822ffc5d857" translate="yes" xml:space="preserve">
          <source>:plist &lt;var&gt;plist&lt;/var&gt;</source>
          <target state="translated">：plist &lt;var&gt;plist&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="4dc2e6100fc48ffcd5a6f346febaeef11a3d9b69" translate="yes" xml:space="preserve">
          <source>:priority &lt;var&gt;priority&lt;/var&gt;</source>
          <target state="translated">：priority &lt;var&gt;priority&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="8275f6dacc343622b2b7d5bc4ffbca327bfd9f1b" translate="yes" xml:space="preserve">
          <source>:remote &lt;var&gt;remote-address&lt;/var&gt;</source>
          <target state="translated">：リモート &lt;var&gt;remote-address&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="62a3a1ccb1692695cb63c5cdfb140254ed7cd3f7" translate="yes" xml:space="preserve">
          <source>:reuseaddr &lt;var&gt;reuseaddr-flag&lt;/var&gt;</source>
          <target state="translated">：reuseaddrreuseaddr- &lt;var&gt;reuseaddr-flag&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="f033a7c5f1f67c3c092625af8cb229d9b0d91fb0" translate="yes" xml:space="preserve">
          <source>:sentinel &lt;var&gt;sentinel&lt;/var&gt;</source>
          <target state="translated">：センチネル &lt;var&gt;sentinel&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="5430b870212b2d41c84bbdb2bf3970307429aea5" translate="yes" xml:space="preserve">
          <source>:server &lt;var&gt;server-flag&lt;/var&gt;</source>
          <target state="translated">：サーバー &lt;var&gt;server-flag&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="7c54002f57a058c7bd294ef92d9f45fcf3b53bd3" translate="yes" xml:space="preserve">
          <source>:service &lt;var&gt;service&lt;/var&gt;</source>
          <target state="translated">：サービス &lt;var&gt;service&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="52ac3afb89aec9d4328b970c3efc2ef579887474" translate="yes" xml:space="preserve">
          <source>:stderr &lt;var&gt;stderr&lt;/var&gt;</source>
          <target state="translated">：stderr &lt;var&gt;stderr&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="df7f14baba2db19cbb14466a356a1ea6e49d0891" translate="yes" xml:space="preserve">
          <source>:stop &lt;var&gt;stopped&lt;/var&gt;</source>
          <target state="translated">：停止 &lt;var&gt;stopped&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="c0787384dc28b5bfeff1e4be66d825dde3d88647" translate="yes" xml:space="preserve">
          <source>:success</source>
          <target state="translated">:success</target>
        </trans-unit>
        <trans-unit id="a3248cab13383ae1d63eb9acc0f857d018e6f981" translate="yes" xml:space="preserve">
          <source>:tls-parameters</source>
          <target state="translated">:tls-parameters</target>
        </trans-unit>
        <trans-unit id="f51a4ea8d4341d7c62aa0896a05006d78d350e6d" translate="yes" xml:space="preserve">
          <source>:type &lt;var&gt;type&lt;/var&gt;</source>
          <target state="translated">：type &lt;var&gt;type&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="69be668ac7ab45003f7aad02b655a486d76f1041" translate="yes" xml:space="preserve">
          <source>:use-external-socket &lt;var&gt;use-external-socket&lt;/var&gt;</source>
          <target state="translated">：use-external-socket &lt;var&gt;use-external-socket&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="b05656c08d7ab767fee43f538b3b9d8c2e174064" translate="yes" xml:space="preserve">
          <source>; because filenames can contain spaces. The function &lt;code&gt;read-file-name&lt;/code&gt; combines this keymap with either &lt;code&gt;minibuffer-local-completion-map&lt;/code&gt; or &lt;code&gt;minibuffer-local-must-match-map&lt;/code&gt;.</source>
          <target state="translated">; ファイル名にはスペースを含めることができるためです。関数 &lt;code&gt;read-file-name&lt;/code&gt; は、このキーマップを &lt;code&gt;minibuffer-local-completion-map&lt;/code&gt; または &lt;code&gt;minibuffer-local-must-match-map&lt;/code&gt; のいずれかと組み合わせます。</target>
        </trans-unit>
        <trans-unit id="850c15f3fa85d86d20b68663e13efe43a1a41188" translate="yes" xml:space="preserve">
          <source>; but for keyboard input purposes, you can turn any character into a control character with &amp;lsquo;</source>
          <target state="translated">; ただし、キーボード入力の目的で、「」を使用して任意の文字を制御文字に変換できます。</target>
        </trans-unit>
        <trans-unit id="73ea0cea742a3db6ec3c431020f69339a5e3b558" translate="yes" xml:space="preserve">
          <source>; but they are evaluated in the context outside of Edebug.</source>
          <target state="translated">; ただし、Edebug以外のコンテキストで評価されます。</target>
        </trans-unit>
        <trans-unit id="dfd9d0ecb96384cfbf0c3941bf53363cec430cf8" translate="yes" xml:space="preserve">
          <source>; if neither file exists, Emacs will create</source>
          <target state="translated">; どちらのファイルも存在しない場合、Emacsは作成します</target>
        </trans-unit>
        <trans-unit id="60522d957b18879e8563e5360ed6913eb48199c8" translate="yes" xml:space="preserve">
          <source>; if such a buffer does not exist, it is first created.</source>
          <target state="translated">; そのようなバッファが存在しない場合は、最初に作成されます。</target>
        </trans-unit>
        <trans-unit id="8c757a33edcb033f1030119f1cb438615b02bc52" translate="yes" xml:space="preserve">
          <source>; if the value is a number,</source>
          <target state="translated">; 値が数値の場合、</target>
        </trans-unit>
        <trans-unit id="cece8767090f8fbec9bbca7b3c6458fcf1d69bc0" translate="yes" xml:space="preserve">
          <source>; in a nutshell, the first character in a paragraph that has an explicit directionality determines the base direction of the paragraph. However, sometimes a buffer may need to force a certain base direction for its paragraphs. For example, buffers containing program source code should force all paragraphs to be displayed left-to-right. You can use following variable to do this:</source>
          <target state="translated">; 一言で言えば、明示的な方向性を持つ段落の最初の文字は、段落の基本方向を決定します。ただし、バッファがその段落に対して特定の基本方向を強制する必要がある場合があります。たとえば、プログラムのソースコードを含むバッファでは、すべての段落を左から右に表示する必要があります。これを行うには、次の変数を使用できます。</target>
        </trans-unit>
        <trans-unit id="a076f7afa562b44c53c4203c05631ef27627a9d1" translate="yes" xml:space="preserve">
          <source>; it is the functional equivalent of the &lt;code&gt;Lisp_Object&lt;/code&gt; type used in Emacs C primitives (see &lt;a href=&quot;writing-emacs-primitives#Writing-Emacs-Primitives&quot;&gt;Writing Emacs Primitives&lt;/a&gt;). This section describes the parts of the module</source>
          <target state="translated">; これは、Emacs Cプリミティブで使用される &lt;code&gt;Lisp_Object&lt;/code&gt; 型と機能的に同等です（&lt;a href=&quot;writing-emacs-primitives#Writing-Emacs-Primitives&quot;&gt;Emacsプリミティブ&lt;/a&gt;の記述を参照）。このセクションでは、モジュールのパーツについて説明します</target>
        </trans-unit>
        <trans-unit id="c6261eb921e3e265e24a0f8ecaa56fe3c2a3322f" translate="yes" xml:space="preserve">
          <source>; they tell &lt;code&gt;make-docfile&lt;/code&gt; to put the documentation string in the</source>
          <target state="translated">; それらは &lt;code&gt;make-docfile&lt;/code&gt; にドキュメント文字列を</target>
        </trans-unit>
        <trans-unit id="71af3a99d714ad2fe85d56e631bdea4cf4d950b6" translate="yes" xml:space="preserve">
          <source>;;; Commentary:</source>
          <target state="translated">;;; 解説：</target>
        </trans-unit>
        <trans-unit id="8f84e2b6e48f86dfa7bce8ca1ad38eb966945aae" translate="yes" xml:space="preserve">
          <source>;;;###autoload</source>
          <target state="translated">;;;###autoload</target>
        </trans-unit>
        <trans-unit id="eac858a1a2a92559fd14a2a67a2f33fba7b2b8d8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#FOOT10&quot; name=&quot;DOCF10&quot;&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt;. A file by that name in a directory causes Emacs to apply its settings to any file in that directory or any of its subdirectories (optionally, you can exclude subdirectories; see below). If some of the subdirectories have their own</source>
          <target state="translated">&lt;a href=&quot;#FOOT10&quot; name=&quot;DOCF10&quot;&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt;。ディレクトリ内のその名前のファイルにより、Emacsはその設定をそのディレクトリ内の任意のファイルまたはそのサブディレクトリに適用します（オプションで、サブディレクトリを除外できます。以下を参照してください）。一部のサブディレクトリに独自のサブディレクトリがある場合</target>
        </trans-unit>
        <trans-unit id="7d5c3733b2b97d204545bd541ceb9ba2260298b5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; Common Lisp allows the function to specify what default value to use when an optional argument is omitted; Emacs Lisp always uses &lt;code&gt;nil&lt;/code&gt;. Emacs Lisp does not support &lt;code&gt;supplied-p&lt;/code&gt; variables that tell you whether an argument was explicitly passed.</source>
          <target state="translated">&lt;b&gt;Common Lisp注：&lt;/b&gt; Common Lispを使用すると、オプションの引数を省略した場合に使用するデフォルト値を関数で指定できます。EmacsLispは常に &lt;code&gt;nil&lt;/code&gt; を使用します。Emacs Lispは、引数が明示的に渡されたかどうかを示す &lt;code&gt;supplied-p&lt;/code&gt; 変数をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="6367857ee9e29c4473084381a801ec8349aeb22c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; Common Lisp defines another way to specify the &lt;code&gt;setf&lt;/code&gt; behavior of a function, namely &lt;code&gt;setf&lt;/code&gt; functions, whose names are lists &lt;code&gt;(setf &lt;var&gt;name&lt;/var&gt;)&lt;/code&gt; rather than symbols. For example, &lt;code&gt;(defun (setf foo) &amp;hellip;)&lt;/code&gt; defines the function that is used when &lt;code&gt;setf&lt;/code&gt; is applied to &lt;code&gt;foo&lt;/code&gt;. Emacs does not support this. It is a compile-time error to use &lt;code&gt;setf&lt;/code&gt; on a form that has not already had an appropriate expansion defined. In Common Lisp, this is not an error since the function &lt;code&gt;(setf
&lt;var&gt;func&lt;/var&gt;)&lt;/code&gt; might be defined later.</source>
          <target state="translated">&lt;b&gt;Common Lisp注：&lt;/b&gt; Common Lispは、関数の &lt;code&gt;setf&lt;/code&gt; 動作を指定する別の方法、つまり、名前がシンボルではなくリスト &lt;code&gt;(setf &lt;var&gt;name&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;name&lt;/var&gt; ）である &lt;code&gt;setf&lt;/code&gt; 関数を定義します。たとえば、 &lt;code&gt;(defun (setf foo) &amp;hellip;)&lt;/code&gt; は、 &lt;code&gt;setf&lt;/code&gt; が &lt;code&gt;foo&lt;/code&gt; に適用されるときに使用される関数を定義します。 Emacsはこれをサポートしていません。適切な拡張がまだ定義されていないフォームで &lt;code&gt;setf&lt;/code&gt; を使用すると、コンパイル時エラーになります。 Common Lispでは、関数 &lt;code&gt;(setf &lt;var&gt;func&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;func&lt;/var&gt; ）が後で定義される可能性があるため、これはエラーではありません。</target>
        </trans-unit>
        <trans-unit id="b553724505c7b2ff9cd2dd0f6f26179f25ff53d9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; Common Lisp has functions &lt;code&gt;union&lt;/code&gt; (which avoids duplicate elements) and &lt;code&gt;intersection&lt;/code&gt; for set operations. In Emacs Lisp, variants of these facilities are provided by the</source>
          <target state="translated">&lt;b&gt;Common Lisp注：&lt;/b&gt; Common Lispには、関数の &lt;code&gt;union&lt;/code&gt; （要素の重複を回避する）と集合演算の &lt;code&gt;intersection&lt;/code&gt; があります。Emacs Lispでは、これらの機能のバリエーションは、</target>
        </trans-unit>
        <trans-unit id="22015162b0b6cf562a348be322a99274ab88223c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; Common Lisp uses functions &lt;code&gt;rplaca&lt;/code&gt; and &lt;code&gt;rplacd&lt;/code&gt; to alter list structure; they change structure the same way as &lt;code&gt;setcar&lt;/code&gt; and &lt;code&gt;setcdr&lt;/code&gt;, but the Common Lisp functions return the cons cell while &lt;code&gt;setcar&lt;/code&gt; and &lt;code&gt;setcdr&lt;/code&gt; return the new &lt;small&gt;CAR&lt;/small&gt; or &lt;small&gt;CDR&lt;/small&gt;.</source>
          <target state="translated">&lt;b&gt;Common Lisp注：&lt;/b&gt; Common Lispは、関数 &lt;code&gt;rplaca&lt;/code&gt; および &lt;code&gt;rplacd&lt;/code&gt; を使用してリスト構造を変更します。これらは &lt;code&gt;setcar&lt;/code&gt; および &lt;code&gt;setcdr&lt;/code&gt; と同じ方法で構造を変更しますが、Common Lisp関数はconsセルを返し、 &lt;code&gt;setcar&lt;/code&gt; および &lt;code&gt;setcdr&lt;/code&gt; は新しい&lt;small&gt;CAR&lt;/small&gt;または&lt;small&gt;CDRを&lt;/small&gt;返します。</target>
        </trans-unit>
        <trans-unit id="ebb79170f9f6008be3b36f4402d4c4ffd7c7d3eb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; Emacs Lisp has nothing like the Common Lisp concept of continuable errors.</source>
          <target state="translated">&lt;b&gt;Common Lisp注：&lt;/b&gt; Emacs Lispには、継続可能なエラーというCommonLispの概念に似たものはありません。</target>
        </trans-unit>
        <trans-unit id="e1c1987c8ae7965c8aeef374c399a5aba221a9db" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; Here are some comparisons of special forms in GNU Emacs Lisp and Common Lisp. &lt;code&gt;setq&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, and &lt;code&gt;catch&lt;/code&gt; are special forms in both Emacs Lisp and Common Lisp. &lt;code&gt;save-excursion&lt;/code&gt; is a special form in Emacs Lisp, but doesn&amp;rsquo;t exist in Common Lisp. &lt;code&gt;throw&lt;/code&gt; is a special form in Common Lisp (because it must be able to throw multiple values), but it is a function in Emacs Lisp (which doesn&amp;rsquo;t have multiple values).</source>
          <target state="translated">&lt;b&gt;Common Lisp注：&lt;/b&gt; GNU EmacsLispとCommonLispの特殊な形式の比較を次に示します。 &lt;code&gt;setq&lt;/code&gt; 、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;catch&lt;/code&gt; は、EmacsLispとCommonLispの両方で特殊な形式です。 &lt;code&gt;save-excursion&lt;/code&gt; はEmacsLispの特別な形式ですが、CommonLispには存在しません。 &lt;code&gt;throw&lt;/code&gt; はCommonLispの特殊な形式です（複数の値をスローできる必要があるため）が、Emacs Lispの関数です（複数の値はありません）。</target>
        </trans-unit>
        <trans-unit id="461775aaf52be2a8f8b9da187f5469e279a12664" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; In Common Lisp a similar function is called &lt;code&gt;sxhash&lt;/code&gt;. Emacs provides this name as a compatibility alias for &lt;code&gt;sxhash-equal&lt;/code&gt;.</source>
          <target state="translated">&lt;b&gt;Common Lisp注：&lt;/b&gt; Common Lispでは、同様の関数は &lt;code&gt;sxhash&lt;/code&gt; と呼ばれます。Emacsはこの名前を &lt;code&gt;sxhash-equal&lt;/code&gt; の互換性エイリアスとして提供します。</target>
        </trans-unit>
        <trans-unit id="1e6ce144f4e2ab72dfb3bf32261406e5ea16e7d1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; In Common Lisp, &lt;code&gt;clrhash&lt;/code&gt; returns the empty &lt;var&gt;table&lt;/var&gt;. In Emacs Lisp, it returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;b&gt;Common Lisp注：&lt;/b&gt; Common Lispでは、 &lt;code&gt;clrhash&lt;/code&gt; は空の &lt;var&gt;table&lt;/var&gt; 返します。Emacs Lispでは、 &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="883fddb1102b92cffd11c402a566a42b36bdc655" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; In Common Lisp, &lt;code&gt;remhash&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt; if it actually removed an association and &lt;code&gt;nil&lt;/code&gt; otherwise. In Emacs Lisp, &lt;code&gt;remhash&lt;/code&gt; always returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;b&gt;Common Lispのノート：&lt;/b&gt;でCommon Lispに、 &lt;code&gt;remhash&lt;/code&gt; 戻っ非 &lt;code&gt;nil&lt;/code&gt; のそれは実際に関連して削除した場合 &lt;code&gt;nil&lt;/code&gt; そう。Emacs Lispでは、 &lt;code&gt;remhash&lt;/code&gt; は常に &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="bbcea5c9de01b724f73c8bdf1b9a568d2ece9b4d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; In Common Lisp, lower case letters are always folded to upper case, unless they are explicitly escaped. In Emacs Lisp, upper case and lower case letters are distinct.</source>
          <target state="translated">&lt;b&gt;Common Lisp注：&lt;/b&gt; Common Lispでは、明示的にエスケープしない限り、小文字は常に大文字に折りたたまれます。Emacs Lispでは、大文字と小文字が区別されます。</target>
        </trans-unit>
        <trans-unit id="4448631a5e3f6b8bdf37d289aa6b1dfc59dbc1a4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; In Common Lisp, you can intern an existing symbol in an obarray. In Emacs Lisp, you cannot do this, because the argument to &lt;code&gt;intern&lt;/code&gt; must be a string, not a symbol.</source>
          <target state="translated">&lt;b&gt;Common Lisp注：&lt;/b&gt; Common Lispでは、既存のシンボルをobarrayにインターンできます。Emacs Lispでは、 &lt;code&gt;intern&lt;/code&gt; への引数はシンボルではなく文字列でなければならないため、これを行うことはできません。</target>
        </trans-unit>
        <trans-unit id="35bdc599b057feab1fdbac7138b61708594fbf48" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; Most other versions of Lisp, including Common Lisp, have several ways of transferring control nonsequentially: &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;return-from&lt;/code&gt;, and &lt;code&gt;go&lt;/code&gt;, for example. Emacs Lisp has only &lt;code&gt;throw&lt;/code&gt;. The</source>
          <target state="translated">&lt;b&gt;Common Lisp注：Common Lisp&lt;/b&gt;を含む他のほとんどのバージョンのLispには、制御を非順次に転送するいくつかの方法があります。たとえば、 &lt;code&gt;return&lt;/code&gt; 、 &lt;code&gt;return-from&lt;/code&gt; 、 &lt;code&gt;go&lt;/code&gt; などです。EmacsLispは &lt;code&gt;throw&lt;/code&gt; だけです。ザ・</target>
        </trans-unit>
        <trans-unit id="0a28db1ab06daa4ba2de19e43209b90772c24bbf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; The functions &lt;code&gt;member&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt; and &lt;code&gt;remove&lt;/code&gt; in GNU Emacs Lisp are derived from Maclisp, not Common Lisp. The Common Lisp versions do not use &lt;code&gt;equal&lt;/code&gt; to compare elements.</source>
          <target state="translated">&lt;b&gt;Common Lisp注：&lt;/b&gt; GNU Emacs Lispの関数 &lt;code&gt;member&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt; 、 &lt;code&gt;remove&lt;/code&gt; は、CommonLispではなくMaclispから派生しています。Common Lispバージョンは、 &lt;code&gt;equal&lt;/code&gt; を使用して要素を比較しません。</target>
        </trans-unit>
        <trans-unit id="481b03630d7d1963a68afcb9aa760048b4e87a17" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; Unlike Common Lisp, Emacs Lisp does not provide for interning a single symbol in several obarrays.</source>
          <target state="translated">&lt;b&gt;Common Lisp注：&lt;/b&gt; Common Lispとは異なり、EmacsLispは複数のobarrayで単一のシンボルをインターンすることを提供しません。</target>
        </trans-unit>
        <trans-unit id="8bff408889e4337d00cf240d84d8156cfe8464c4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; Unlike other Lisps, GNU Emacs Lisp does not call the garbage collector when the free list is empty. Instead, it simply requests the operating system to allocate more storage, and processing continues until &lt;code&gt;gc-cons-threshold&lt;/code&gt; bytes have been used.</source>
          <target state="translated">&lt;b&gt;Common Lispの注意：&lt;/b&gt;他の&lt;b&gt;Lisp&lt;/b&gt;とは異なり、GNU Emacs Lispは、空きリストが空の場合、ガベージコレクタを呼び出しません。代わりに、オペレーティングシステムにさらにストレージを割り当てるように要求するだけで、 &lt;code&gt;gc-cons-threshold&lt;/code&gt; バイトが使用されるまで処理が続行されます。</target>
        </trans-unit>
        <trans-unit id="2777476ce485422646e2c57bff88f755808cde88" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Completion&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Completion&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="677fe5061c3339a3af7e2fcddfa71f830896e1f9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Default&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Default&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="644966ccd81f72102c8b8359c223d687f6a87adf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Existing&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Existing&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="d6475c26f45a98f3c2a9c7476df7ac9e61a68fba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;No I/O&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;I / Oなし&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="517425362cbb54fe23154f4b6072a55c40083eab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Prompt&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Prompt&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="7bbc5663e059ef4b86f48f96a3cf6a6ccdee95f4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Special&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Special&lt;/b&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
