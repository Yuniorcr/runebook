<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="haskell">
    <body>
      <group id="haskell">
        <trans-unit id="79989340f73ef6b73a4a5cde8b93048d012a4b1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt; until either EOF is reached or &lt;code&gt;count&lt;/code&gt; 8-bit bytes have been read. It returns the number of bytes actually read. This may be zero if EOF was reached before any data was read (or if &lt;code&gt;count&lt;/code&gt; is zero).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl buf count&lt;/code&gt; は、EOFに到達するか、 &lt;code&gt;count&lt;/code&gt; 8ビットバイトが読み込まれるまで、ハンドル &lt;code&gt;hdl&lt;/code&gt; からバッファ &lt;code&gt;buf&lt;/code&gt; にデータを読み込みます。実際に読み取られたバイト数を返します。データが読み込まれる前にEOFに達した場合（または &lt;code&gt;count&lt;/code&gt; がゼロの場合）は、ゼロになることがあります。</target>
        </trans-unit>
        <trans-unit id="bed86d9bc28a698e12be5abb17db9e7f612a25e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; は実勢無視 &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; 上の &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 、直接バイト読み込みます。</target>
        </trans-unit>
        <trans-unit id="1bd4a53f6437f9d0725aebbeb0384ac93d23343d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; is identical to &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;, except that it will never block waiting for data to become available, instead it returns only whatever data is available. To wait for data to arrive before calling &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt;, use &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; は同じです &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; 代わりに、それが利用可能なあらゆるデータのみを返し、それはデータが利用可能になるのを待ってブロックしないことを除いて、。 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; を呼び出す前にデータが到着するのを待つには、 hWaitForInputを使用し &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f2ebea4e3a09186bbe7167d238194af736b29fdb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt; until either EOF is reached, or &lt;code&gt;count&lt;/code&gt; 8-bit bytes have been read, or there is no more data available to read immediately.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl buf count&lt;/code&gt; ハンドルからデータを読み込み、 &lt;code&gt;hdl&lt;/code&gt; バッファに &lt;code&gt;buf&lt;/code&gt; のいずれかEOFに達した、またはされるまで &lt;code&gt;count&lt;/code&gt; する8ビットのバイトが読み込まれた、またはすぐに読むことが可能なこれ以上データがありません。</target>
        </trans-unit>
        <trans-unit id="2ccf6f7dd805bc0c12ebc044d3d369fc5a7a12b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores any text encoding that applies to the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, writing the bytes directly to the underlying file or device.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; に適用されるテキストエンコーディングを無視し、基になるファイルまたはデバイスに直接バイトを書き込みます。</target>
        </trans-unit>
        <trans-unit id="7cfb6c021bfac087b9c96c06f48939dd8c361aa6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and writes bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; は実勢無視 &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; を上 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 、直接バイト書き込みます。</target>
        </trans-unit>
        <trans-unit id="9258862ce9f1a9933b92ddf9b1d9d2f18a73c4c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; writes &lt;code&gt;count&lt;/code&gt; 8-bit bytes from the buffer &lt;code&gt;buf&lt;/code&gt; to the handle &lt;code&gt;hdl&lt;/code&gt;. It returns ().</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl buf count&lt;/code&gt; は、 &lt;code&gt;count&lt;/code&gt; 8ビットバイトをバッファ &lt;code&gt;buf&lt;/code&gt; からハンドル &lt;code&gt;hdl&lt;/code&gt; に書き込みます。（）を返します。</target>
        </trans-unit>
        <trans-unit id="dd4dc99a653b44c373451a82441234ea2af3e4a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSetEncoding&quot;&gt;hSetEncoding&lt;/a&gt;&lt;/code&gt; may need to flush buffered data in order to change the encoding.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSetEncoding&quot;&gt;hSetEncoding&lt;/a&gt;&lt;/code&gt; は、エンコーディングを変更するために、バッファリングされたデータをフラッシュする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="758453f292a1bc331974aee59776adf0d5a5edf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSetFileSize&quot;&gt;hSetFileSize&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt;&lt;code&gt;size&lt;/code&gt; truncates the physical file with handle &lt;code&gt;hdl&lt;/code&gt; to &lt;code&gt;size&lt;/code&gt; bytes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSetFileSize&quot;&gt;hSetFileSize&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; &lt;code&gt;size&lt;/code&gt; は、ハンドル &lt;code&gt;hdl&lt;/code&gt; を含む物理ファイルを &lt;code&gt;size&lt;/code&gt; バイトに切り捨てます。</target>
        </trans-unit>
        <trans-unit id="f36b65e511253e3d033408247e4fa325e5ae3a59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hShow&quot;&gt;hShow&lt;/a&gt;&lt;/code&gt; is in the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad, and gives more comprehensive output than the (pure) instance of &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hShow&quot;&gt;hShow&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドにあり、 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; の（純粋な）インスタンスよりも包括的な出力を提供します。</target>
        </trans-unit>
        <trans-unit id="ea2b92ce8d23599bea2516993e5dbe37888912d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; は実勢無視 &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; 上の &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 、直接バイト読み込みます。</target>
        </trans-unit>
        <trans-unit id="cbe87b19d9e6f8769238851f3e7af9644a5e24ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; never raises an EOF exception, instead it returns a value smaller than &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; がEOF例外を発生させることはなく、代わりに &lt;code&gt;count&lt;/code&gt; より小さい値を返します。</target>
        </trans-unit>
        <trans-unit id="8c70313e9e1c4c08fa152b5d6ddb6d81984c313f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt; until either EOF is reached or &lt;code&gt;count&lt;/code&gt; 8-bit bytes have been read. It returns the number of bytes actually read. This may be zero if EOF was reached before any data was read (or if &lt;code&gt;count&lt;/code&gt; is zero).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl buf count&lt;/code&gt; は、EOFに到達するか、 &lt;code&gt;count&lt;/code&gt; 8ビットバイトが読み込まれるまで、ハンドル &lt;code&gt;hdl&lt;/code&gt; からバッファ &lt;code&gt;buf&lt;/code&gt; にデータを読み込みます。実際に読み取られたバイト数を返します。データが読み込まれる前にEOFに達した場合（または &lt;code&gt;count&lt;/code&gt; がゼロの場合）は、ゼロになることがあります。</target>
        </trans-unit>
        <trans-unit id="e47efae207f2d69e8afb3b2c31e0e6c287fa4931" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; は実勢無視 &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; 上の &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 、直接バイト読み込みます。</target>
        </trans-unit>
        <trans-unit id="bf74d5b0617474e1979d9aca9cad61c7fccce397" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; is identical to &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;, except that it will never block waiting for data to become available, instead it returns only whatever data is available. To wait for data to arrive before calling &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt;, use &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; は同じです &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; 代わりに、それが利用可能なあらゆるデータのみを返し、それはデータが利用可能になるのを待ってブロックしないことを除いて、。 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; を呼び出す前にデータが到着するのを待つには、 hWaitForInputを使用し &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1c7041975b55bc2c0a58f2acc2e167c0f3c333b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt; until either EOF is reached, or &lt;code&gt;count&lt;/code&gt; 8-bit bytes have been read, or there is no more data available to read immediately.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl buf count&lt;/code&gt; ハンドルからデータを読み込み、 &lt;code&gt;hdl&lt;/code&gt; バッファに &lt;code&gt;buf&lt;/code&gt; のいずれかEOFに達した、またはされるまで &lt;code&gt;count&lt;/code&gt; する8ビットのバイトが読み込まれた、またはすぐに読むことが可能なこれ以上データがありません。</target>
        </trans-unit>
        <trans-unit id="60c05363a86ed4b4209f87b96dd1ac90748a8b99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; は実勢無視 &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; 上の &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 、直接バイト読み込みます。</target>
        </trans-unit>
        <trans-unit id="128ffa636231d59898b0936d59913edcbfdfb97c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; never raises an EOF exception, instead it returns a value smaller than &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; はEOF例外を発生させることはなく、代わりに &lt;code&gt;count&lt;/code&gt; より小さい値を返します。</target>
        </trans-unit>
        <trans-unit id="1e3e4bb2613c2387dc097154e93c221b936f32cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt;. If there is any data available to read, then &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; returns it immediately; it only blocks if there is no data to be read.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl buf count&lt;/code&gt; は、ハンドル &lt;code&gt;hdl&lt;/code&gt; からバッファ &lt;code&gt;buf&lt;/code&gt; にデータを読み込みます。読み取り可能なデータがある場合、 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; はすぐにそれを返します。読み取るデータがない場合にのみブロックします。</target>
        </trans-unit>
        <trans-unit id="6e69c3ad885c4a35a35a3b1be1a6cba549c12772" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores any text encoding that applies to the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, writing the bytes directly to the underlying file or device.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; に適用されるテキストエンコーディングを無視し、基になるファイルまたはデバイスに直接バイトを書き込みます。</target>
        </trans-unit>
        <trans-unit id="a7dc59680c7f6bb4bdd5385367eb8538bf70d97c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and writes bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; は実勢無視 &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; を上 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 、直接バイト書き込みます。</target>
        </trans-unit>
        <trans-unit id="f4fe23129403af9cc61e0ccfe3894fce89faaedd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; writes &lt;code&gt;count&lt;/code&gt; 8-bit bytes from the buffer &lt;code&gt;buf&lt;/code&gt; to the handle &lt;code&gt;hdl&lt;/code&gt;. It returns ().</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl buf count&lt;/code&gt; は、 &lt;code&gt;count&lt;/code&gt; 8ビットバイトをバッファ &lt;code&gt;buf&lt;/code&gt; からハンドル &lt;code&gt;hdl&lt;/code&gt; に書き込みます。（）を返します。</target>
        </trans-unit>
        <trans-unit id="0cae9e28bf8f7e443c79fb2d9e2286cab0a47437" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-unsafe#v:unsafeDupableInterleaveIO&quot;&gt;unsafeDupableInterleaveIO&lt;/a&gt;&lt;/code&gt; allows an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computation to be deferred lazily. When passed a value of type &lt;code&gt;IO a&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; will only be performed when the value of the &lt;code&gt;a&lt;/code&gt; is demanded.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-unsafe#v:unsafeDupableInterleaveIO&quot;&gt;unsafeDupableInterleaveIO&lt;/a&gt;&lt;/code&gt; を使用すると、 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 計算を遅延して延期できます。型の値渡されると &lt;code&gt;IO a&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; はの価値ときにのみ実行されます &lt;code&gt;a&lt;/code&gt; 要求されています。</target>
        </trans-unit>
        <trans-unit id="17b9b14d5e8df36dce195f7980e9dbc7fc64eed9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-unsafe#v:unsafeInterleaveIO&quot;&gt;unsafeInterleaveIO&lt;/a&gt;&lt;/code&gt; allows an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computation to be deferred lazily. When passed a value of type &lt;code&gt;IO a&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; will only be performed when the value of the &lt;code&gt;a&lt;/code&gt; is demanded. This is used to implement lazy file reading, see &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-unsafe#v:unsafeInterleaveIO&quot;&gt;unsafeInterleaveIO&lt;/a&gt;&lt;/code&gt; を使用すると、 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 計算を遅延して延期できます。型の値渡されると &lt;code&gt;IO a&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; はの価値ときにのみ実行されます &lt;code&gt;a&lt;/code&gt; 要求されています。これは、遅延ファイル読み取りを実装するために使用されます &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="8a50dabe78c23f292553c005f2860041796c5a18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-ix#v:range&quot;&gt;range&lt;/a&gt; (l,u) !! &lt;a href=&quot;ghc-ix#v:index&quot;&gt;index&lt;/a&gt; (l,u) i == i&lt;/code&gt;, when &lt;code&gt;&lt;a href=&quot;ghc-ix#v:inRange&quot;&gt;inRange&lt;/a&gt; (l,u) i&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-ix#v:range&quot;&gt;range&lt;/a&gt; (l,u) !! &lt;a href=&quot;ghc-ix#v:index&quot;&gt;index&lt;/a&gt; (l,u) i == i&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ghc-ix#v:inRange&quot;&gt;inRange&lt;/a&gt; (l,u) i&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c9ff939a7c655e40f252ea2a1fdf65e215f1e609" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:and&quot;&gt;and&lt;/a&gt;&lt;/code&gt; returns the conjunction of a Boolean list. For the result to be &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, the list must be finite; &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, however, results from a &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; value at a finite index of a finite or infinite list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:and&quot;&gt;and&lt;/a&gt;&lt;/code&gt; ブールリストの組み合わせを返します。結果が &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; になるには、リストが有限でなければなりません。 &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; から、しかし、結果 &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 有限または無限リストの有限インデックスの値。</target>
        </trans-unit>
        <trans-unit id="730ca4b7e7275ef9d1e96efbe04d42630082f29c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns a tuple where first element is longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that &lt;em&gt;do not satisfy&lt;/em&gt;&lt;code&gt;p&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; 述語 &lt;code&gt;p&lt;/code&gt; とリスト &lt;code&gt;xs&lt;/code&gt; に適用される breakは、最初の要素が &lt;code&gt;p&lt;/code&gt; を&lt;em&gt;満たさない&lt;/em&gt;要素の &lt;code&gt;xs&lt;/code&gt; の最長の接頭辞（おそらく空）であり、2番目の要素がリストの残りであるタプルを返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7c28c67953f6b715e1894eff4607f9eccef2c735" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;ghc-list#v:span&quot;&gt;span&lt;/a&gt; (&lt;a href=&quot;data-bool#v:not&quot;&gt;not&lt;/a&gt; . p)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;ghc-list#v:span&quot;&gt;span&lt;/a&gt; (&lt;a href=&quot;data-bool#v:not&quot;&gt;not&lt;/a&gt; . p)&lt;/code&gt; 。pではない）と同じです。</target>
        </trans-unit>
        <trans-unit id="124dcdaa10b0ebef8bc6a8625440c8d4bd3ca1fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt; ties a finite list into a circular one, or equivalently, the infinite repetition of the original list. It is the identity on infinite lists.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt; は、有限リストを循環リスト、または同等に、元のリストの無限反復に結び付けます。無限リストのアイデンティティです。</target>
        </trans-unit>
        <trans-unit id="d9bacf4f5985fc97176702ae8b1e40ae85a7f8b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns the suffix of &lt;code&gt;xs&lt;/code&gt; after the first &lt;code&gt;n&lt;/code&gt; elements, or &lt;code&gt;[]&lt;/code&gt; if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; は、最初の &lt;code&gt;n&lt;/code&gt; 要素の後に &lt;code&gt;xs&lt;/code&gt; の接尾辞を返します &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;長さ&lt;/a&gt;xsの場合は &lt;code&gt;[]&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5fb3707b27bc7936c7d8943822fa2d99435b6995" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns the suffix of &lt;code&gt;xs&lt;/code&gt; after the first &lt;code&gt;n&lt;/code&gt; elements, or &lt;code&gt;[]&lt;/code&gt; if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; は、最初の &lt;code&gt;n&lt;/code&gt; 要素の後の &lt;code&gt;xs&lt;/code&gt; のサフィックスを返します &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xsの場合は &lt;code&gt;[]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="76167dac1a892d837d8c1958a5cebac85755f37c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; returns the suffix remaining after &lt;code&gt;&lt;a href=&quot;ghc-list#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p xs&lt;/code&gt; 後に残った接尾辞を返し &lt;code&gt;&lt;a href=&quot;ghc-list#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;p xs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5fc7768763cbae8d5654c35a88a6c69b3585f871" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; returns the suffix remaining after &lt;code&gt;&lt;a href=&quot;ghc-list#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p xs&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;ghc-list#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p xs&lt;/code&gt; の後に残っているサフィックスを返します。</target>
        </trans-unit>
        <trans-unit id="02a1094e0d73152ec3d048877a7d9d4413b830b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; is the list membership predicate, usually written in infix form, e.g., &lt;code&gt;x `elem` xs&lt;/code&gt;. For the result to be &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, the list must be finite; &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, however, results from an element equal to &lt;code&gt;x&lt;/code&gt; found at a finite index of a finite or infinite list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; はリストメンバーシップの述語で、通常はイン &lt;code&gt;x `elem` xs&lt;/code&gt; 形式で記述されます（例： x `elem` xs）。結果が &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; になるには、リストが有限でなければなりません。ただし、 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; は、有限または無限リストの有限インデックスで見つかった &lt;code&gt;x&lt;/code&gt; に等しい要素から生じます。</target>
        </trans-unit>
        <trans-unit id="2dd587787d42bd8ca7c94bf6bff4fe23e922896b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, applied to a binary operator, a starting value (typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; は、二項演算子、開始値（通常は演算子の左ID）、およびリストに適用され、二項演算子を使用して左から右にリストを縮小します。</target>
        </trans-unit>
        <trans-unit id="308eb7da1cef17bc9ce1ea7005628690c47f1de5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to non-empty lists.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt; の変形である &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; の出発値の引数を持っていないため、非空のリストに適用する必要があります。</target>
        </trans-unit>
        <trans-unit id="24ab5d7d30dfc344cacd2965b7fb61c855f936c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to non-empty lists. Note that unlike &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, the accumulated value must be of the same type as the list elements.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt; の変形である &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; の出発値の引数を持っていないため、非空のリストに適用する必要があります。 &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; とは異なり、累積値はリスト要素と同じタイプである必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3ddb4a8ceae0a66226783c02cd43b0ae1bdc9502" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;, applied to a binary operator, a starting value (typically the right-identity of the operator), and a list, reduces the list using the binary operator, from right to left:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; は、二項演算子、開始値（通常は演算子の右ID）、およびリストに適用され、二項演算子を使用してリストを右から左に減らします。</target>
        </trans-unit>
        <trans-unit id="b6014a31a38fe5b6e5e38931269202310381a6b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr1&quot;&gt;foldr1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to non-empty lists.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr1&quot;&gt;foldr1&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; のバリアントであり、開始値引数がないため、空でないリストに適用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0701558fc3a74b6ec5f14b106655c5d80ac1d77f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr1&quot;&gt;foldr1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to non-empty lists. Note that unlike &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;, the accumulated value must be of the same type as the list elements.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr1&quot;&gt;foldr1&lt;/a&gt;&lt;/code&gt; は、開始値の引数がない &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; のバリアントであるため、空でないリストに適用する必要があります。 &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; とは異なり、累積値はリスト要素と同じタイプである必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="715d39b0ff885f6988c0a2a054ea0418da8baa14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f x&lt;/code&gt; returns an infinite list of repeated applications of &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt; &lt;code&gt;f x&lt;/code&gt; の繰り返しのアプリケーションの無限のリストを返し &lt;code&gt;f&lt;/code&gt; に &lt;code&gt;x&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c196c56ceab029291efacfab9fcb76cae8d82bd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:iterate-39-&quot;&gt;iterate'&lt;/a&gt;&lt;/code&gt; is the strict version of &lt;code&gt;&lt;a href=&quot;ghc-list#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:iterate-39-&quot;&gt;iterate'&lt;/a&gt;&lt;/code&gt; 厳格なバージョンである &lt;code&gt;&lt;a href=&quot;ghc-list#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dbe67506166938e7aecccf91d6dacbcebddea684" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:maximum&quot;&gt;maximum&lt;/a&gt;&lt;/code&gt; returns the maximum value from a list, which must be non-empty, finite, and of an ordered type. It is a special case of &lt;code&gt;&lt;a href=&quot;data-list#v:maximumBy&quot;&gt;maximumBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own comparison function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:maximum&quot;&gt;maximum&lt;/a&gt;&lt;/code&gt; は、リストから最大値を返します。リストは空でなく、有限で、順序付けされた型でなければなりません。これは、プログラマーが独自の比較関数を提供できるようにする &lt;code&gt;&lt;a href=&quot;data-list#v:maximumBy&quot;&gt;maximumBy&lt;/a&gt;&lt;/code&gt; の特殊なケースです。</target>
        </trans-unit>
        <trans-unit id="ab899ccb74911194bc0a36f649dd833fed41899d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:minimum&quot;&gt;minimum&lt;/a&gt;&lt;/code&gt; returns the minimum value from a list, which must be non-empty, finite, and of an ordered type. It is a special case of &lt;code&gt;&lt;a href=&quot;data-list#v:minimumBy&quot;&gt;minimumBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own comparison function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:minimum&quot;&gt;minimum&lt;/a&gt;&lt;/code&gt; は、リストから最小値を返します。リストは空でなく、有限で、順序付けされた型でなければなりません。これは、プログラマーが独自の比較関数を提供できるようにする &lt;code&gt;&lt;a href=&quot;data-list#v:minimumBy&quot;&gt;minimumBy&lt;/a&gt;&lt;/code&gt; の特殊なケースです。</target>
        </trans-unit>
        <trans-unit id="88d7787ebb380bc1b96eea72666d3c7fb09c1fd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; is the negation of &lt;code&gt;&lt;a href=&quot;ghc-list#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;ghc-list#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; の否定です。</target>
        </trans-unit>
        <trans-unit id="8b4cbfdc0ab989ac8a97a13d0b822efc2880bb2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:or&quot;&gt;or&lt;/a&gt;&lt;/code&gt; returns the disjunction of a Boolean list. For the result to be &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, the list must be finite; &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, however, results from a &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; value at a finite index of a finite or infinite list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:or&quot;&gt;or&lt;/a&gt;&lt;/code&gt; 、ブールリストの論理和を返します。結果が &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; になるには、リストが有限でなければなりません。 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; から、しかし、結果 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 有限または無限リストの有限インデックスの値。</target>
        </trans-unit>
        <trans-unit id="c0644636df8cd78b43e909330866bf2fc7a1332f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:repeat&quot;&gt;repeat&lt;/a&gt;&lt;/code&gt;&lt;code&gt;x&lt;/code&gt; is an infinite list, with &lt;code&gt;x&lt;/code&gt; the value of every element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:repeat&quot;&gt;repeat&lt;/a&gt;&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; は無限リストであり、 &lt;code&gt;x&lt;/code&gt; はすべての要素の値です。</target>
        </trans-unit>
        <trans-unit id="f3f16a21b88ce11f01110656453d9e5ca17ded48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n x&lt;/code&gt; is a list of length &lt;code&gt;n&lt;/code&gt; with &lt;code&gt;x&lt;/code&gt; the value of every element. It is an instance of the more general &lt;code&gt;&lt;a href=&quot;data-list#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt;, in which &lt;code&gt;n&lt;/code&gt; may be of any integral type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n x&lt;/code&gt; 長さのリストである &lt;code&gt;n&lt;/code&gt; と &lt;code&gt;x&lt;/code&gt; の各要素の値。これは、より一般的なのインスタンスである &lt;code&gt;&lt;a href=&quot;data-list#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt; 、ここで &lt;code&gt;n&lt;/code&gt; は任意の整数型であってもよいです。</target>
        </trans-unit>
        <trans-unit id="be3ea283727763eb521eacf3475eb243d7fc80c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt;&lt;code&gt;xs&lt;/code&gt; returns the elements of &lt;code&gt;xs&lt;/code&gt; in reverse order. &lt;code&gt;xs&lt;/code&gt; must be finite.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt; &lt;code&gt;xs&lt;/code&gt; の要素を返し &lt;code&gt;xs&lt;/code&gt; 逆の順序で。 &lt;code&gt;xs&lt;/code&gt; は有限でなければなりません。</target>
        </trans-unit>
        <trans-unit id="f2f2fd2116d78d9c7d6f5ea32f6d049ad0d24135" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns a tuple where first element is longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt; 述語 &lt;code&gt;p&lt;/code&gt; とリスト &lt;code&gt;xs&lt;/code&gt; に適用される spanは、最初の要素が &lt;code&gt;p&lt;/code&gt; を満たす要素の &lt;code&gt;xs&lt;/code&gt; の最長の接頭辞（おそらく空）であり、2番目の要素がリストの残りであるタプルを返します。</target>
        </trans-unit>
        <trans-unit id="5614c2d7768cf34ead9c78f699a1a2ac6ca4129e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; is equivalent to &lt;code&gt;(&lt;a href=&quot;ghc-list#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs, &lt;a href=&quot;ghc-list#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p xs&lt;/code&gt; は &lt;code&gt;(&lt;a href=&quot;ghc-list#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs, &lt;a href=&quot;ghc-list#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs)&lt;/code&gt; &lt;a href=&quot;ghc-list#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs、&lt;a href=&quot;ghc-list#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs）と同等です。</target>
        </trans-unit>
        <trans-unit id="5bd60ec9080c776a697617229269dbf5d665bebe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns a tuple where first element is &lt;code&gt;xs&lt;/code&gt; prefix of length &lt;code&gt;n&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; は、最初の要素が長さ &lt;code&gt;n&lt;/code&gt; の &lt;code&gt;xs&lt;/code&gt; プレフィックスであり、2番目の要素がリストの残りであるタプルを返します。</target>
        </trans-unit>
        <trans-unit id="375995f4bf1d686a47fe83a689d9a4ddb59fce75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a list &lt;code&gt;xs&lt;/code&gt;, returns the prefix of &lt;code&gt;xs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;xs&lt;/code&gt; itself if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; 、リストに適用される &lt;code&gt;xs&lt;/code&gt; 、の接頭辞戻り &lt;code&gt;xs&lt;/code&gt; 長さを &lt;code&gt;n&lt;/code&gt; 、または &lt;code&gt;xs&lt;/code&gt; 場合自体を &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4cb293e6998cc31fa897cbea745221011fb65dbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a list &lt;code&gt;xs&lt;/code&gt;, returns the prefix of &lt;code&gt;xs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;xs&lt;/code&gt; itself if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; は、リストに適用される &lt;code&gt;xs&lt;/code&gt; 、の接頭辞を返し &lt;code&gt;xs&lt;/code&gt; 長の &lt;code&gt;n&lt;/code&gt; 、または &lt;code&gt;xs&lt;/code&gt; 自体であれば &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3409abb3d272ec533dfe1d6e762fec560d0c16f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns the longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt; 述語に適用さ、 &lt;code&gt;p&lt;/code&gt; およびリスト &lt;code&gt;xs&lt;/code&gt; 、最長プレフィックス（空）を返し &lt;code&gt;xs&lt;/code&gt; 満たすのその要素の &lt;code&gt;p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="35961b7b3bb0ba89dd8d90255d0b44b66b7bbe9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns the longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt; は、述部に適用される &lt;code&gt;p&lt;/code&gt; 及びリスト &lt;code&gt;xs&lt;/code&gt; 、最長プレフィックス（空）を返し &lt;code&gt;xs&lt;/code&gt; 満たすのその要素の &lt;code&gt;p&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c507fb664e824b1b2b5b97d504e8eadf8522670b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; transforms a list of pairs into a list of first components and a list of second components.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; は、ペアのリストを最初のコンポーネントのリストと2番目のコンポーネントのリストに変換します。</target>
        </trans-unit>
        <trans-unit id="8a0a3cd7752a8faf44ddf8e4f3ae87c49f6fba6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; はリストの融合が可能ですが、最初のリスト引数と結果のリストに制限されています。</target>
        </trans-unit>
        <trans-unit id="2a86655e8615dd5c7df5069eacbc9a824510fc78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; is right-lazy:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; は右遅延です：</target>
        </trans-unit>
        <trans-unit id="ed4341238ba246513d0d76e699d4e0c53a9971f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:zip3&quot;&gt;zip3&lt;/a&gt;&lt;/code&gt; takes three lists and returns a list of triples, analogous to &lt;code&gt;&lt;a href=&quot;ghc-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:zip3&quot;&gt;zip3&lt;/a&gt;&lt;/code&gt; は3つのリストを取り、 &lt;code&gt;&lt;a href=&quot;ghc-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; に類似したトリプルのリストを返します。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="fafdec54231c6ac532d9ab6d6ed23e90c8b52131" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; はリスト融合が可能ですが、最初のリスト引数とその結果のリストに制限されています。</target>
        </trans-unit>
        <trans-unit id="33c34ba7dbeeca331c8c5c40b90d132b644fa326" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; is right-lazy:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; はright-lazyです。</target>
        </trans-unit>
        <trans-unit id="a9770e7e6a31badc0fd83a36d4dac4d34fde31ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; is single-wakeup. That is, if there are multiple threads blocked in &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; becomes empty, only one thread will be woken up. The runtime guarantees that the woken thread completes its &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; は単一ウェイクアップです。つまり、 &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; でブロックされているスレッドが複数あり、 &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; が空になると、1つのスレッドのみが起こされます。ランタイムは、起動されたスレッドが &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; 操作を完了することを保証します。</target>
        </trans-unit>
        <trans-unit id="2f6605cc8aa1dd4380ed5f686cb15ea7e5556c7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-mvar#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; is multiple-wakeup, so when multiple readers are blocked on an &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;, all of them are woken up at the same time.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-mvar#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; は複数ウェイクアップであるため、 &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; で複数のリーダーがブロックされている場合、すべてのリーダーが同時に起動されます。</target>
        </trans-unit>
        <trans-unit id="37e37f43479bb93d6474577033bd649c009b9af1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; is single-wakeup. That is, if there are multiple threads blocked in &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; becomes full, only one thread will be woken up. The runtime guarantees that the woken thread completes its &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; は単一ウェイクアップです。つまり、 &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; でブロックされているスレッドが複数あり、 &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; がいっぱいになると、1つのスレッドのみが起こされます。ランタイムは、起動されたスレッドが &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; 操作を完了することを保証します。</target>
        </trans-unit>
        <trans-unit id="3360ac613b6939a0c4153bf08ef3debedbc4f26d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; Addition</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; 追加</target>
        </trans-unit>
        <trans-unit id="c84e5de112b7d0a3ff2ad89b54b58dcc13c4819c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; multiplication</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; 乗算</target>
        </trans-unit>
        <trans-unit id="3e6b4deddb46310d3de232e589dee823e4c35bfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; subtraction. May &lt;code&gt;&lt;a href=&quot;control-exception#v:throw&quot;&gt;throw&lt;/a&gt;
&lt;a href=&quot;control-exception#v:Underflow&quot;&gt;Underflow&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; 減算。 &lt;code&gt;&lt;a href=&quot;control-exception#v:throw&quot;&gt;throw&lt;/a&gt; &lt;a href=&quot;control-exception#v:Underflow&quot;&gt;Underflow&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="28cb3bbdce439f134b8a30a9df09a5c492a3384d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; subtraction. Returns &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;s for non-positive results.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; 減算。ポジティブでない結果に対しては &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8e9bdbe865727346833837579264fd68e6849372" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:and&quot;&gt;and&lt;/a&gt;&lt;/code&gt; returns the conjunction of a Boolean list. For the result to be &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, the list must be finite; &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, however, results from a &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; value at a finite index of a finite or infinite list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:and&quot;&gt;and&lt;/a&gt;&lt;/code&gt; ブールリストの組み合わせを返します。結果が &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; になるには、リストが有限でなければなりません。 &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; から、しかし、結果 &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 有限または無限リストの有限インデックスの値。</target>
        </trans-unit>
        <trans-unit id="34f1b0fd79abca30b3e13000f72f034498252b54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns a tuple where first element is longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that &lt;em&gt;do not satisfy&lt;/em&gt;&lt;code&gt;p&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; 述語 &lt;code&gt;p&lt;/code&gt; とリスト &lt;code&gt;xs&lt;/code&gt; に適用される breakは、最初の要素が &lt;code&gt;p&lt;/code&gt; を&lt;em&gt;満たさない&lt;/em&gt;要素の &lt;code&gt;xs&lt;/code&gt; の最長の接頭辞（おそらく空）であり、2番目の要素がリストの残りであるタプルを返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c78655fa3b81cee82b34334bd0ee86d51c454325" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:span&quot;&gt;span&lt;/a&gt; (&lt;a href=&quot;data-bool#v:not&quot;&gt;not&lt;/a&gt; . p)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:span&quot;&gt;span&lt;/a&gt; (&lt;a href=&quot;data-bool#v:not&quot;&gt;not&lt;/a&gt; . p)&lt;/code&gt; 。pではない）と同じです。</target>
        </trans-unit>
        <trans-unit id="9762ea602021c138997b18bfd3007c3d576930a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt; ties a finite list into a circular one, or equivalently, the infinite repetition of the original list. It is the identity on infinite lists.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt; は、有限リストを循環リスト、または同等に、元のリストの無限反復に結び付けます。無限リストのアイデンティティです。</target>
        </trans-unit>
        <trans-unit id="7c9a6d042c0befb32a4ebd2db42cec991ed97aa3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns the suffix of &lt;code&gt;xs&lt;/code&gt; after the first &lt;code&gt;n&lt;/code&gt; elements, or &lt;code&gt;[]&lt;/code&gt; if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; は、最初の &lt;code&gt;n&lt;/code&gt; 要素の後に &lt;code&gt;xs&lt;/code&gt; の接尾辞を返します &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; &lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;長さ&lt;/a&gt;xsの場合は &lt;code&gt;[]&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="074dc89a2a81b639143b0ca7af4d6716fc72b760" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns the suffix of &lt;code&gt;xs&lt;/code&gt; after the first &lt;code&gt;n&lt;/code&gt; elements, or &lt;code&gt;[]&lt;/code&gt; if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; は、最初の &lt;code&gt;n&lt;/code&gt; 要素の後の &lt;code&gt;xs&lt;/code&gt; のサフィックスを返します &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; &lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;length&lt;/a&gt; xsの場合は &lt;code&gt;[]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="82a427f38eee53c1873c5395046cfce1a647f24a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; returns the suffix remaining after &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p xs&lt;/code&gt; 後に残った接尾辞を返し &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;p xs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3f4b9ddcc87f0dae1d2837a5909a400d7754df58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; returns the suffix remaining after &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p xs&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p xs&lt;/code&gt; の後に残っているサフィックスを返します。</target>
        </trans-unit>
        <trans-unit id="3ddf6879dc1e7153c478bb7419886be34c97a639" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; is the list membership predicate, usually written in infix form, e.g., &lt;code&gt;x `elem` xs&lt;/code&gt;. For the result to be &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, the list must be finite; &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, however, results from an element equal to &lt;code&gt;x&lt;/code&gt; found at a finite index of a finite or infinite list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; はリストメンバーシップの述語で、通常はイン &lt;code&gt;x `elem` xs&lt;/code&gt; 形式で記述されます（例： x `elem` xs）。結果が &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; になるには、リストが有限でなければなりません。ただし、 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; は、有限または無限リストの有限インデックスで見つかった &lt;code&gt;x&lt;/code&gt; に等しい要素から生じます。</target>
        </trans-unit>
        <trans-unit id="5f9d40fe0905a10ed1d6facb3d27ae9defa449d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, applied to a binary operator, a starting value (typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; は、二項演算子、開始値（通常は演算子の左ID）、およびリストに適用され、二項演算子を使用して左から右にリストを縮小します。</target>
        </trans-unit>
        <trans-unit id="916c6220f765b3e109e83387aa8e247db20cccfc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to non-empty lists.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt; の変形である &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; の出発値の引数を持っていないため、非空のリストに適用する必要があります。</target>
        </trans-unit>
        <trans-unit id="c8f9f6374c0f4d5c23e61c0de2228d0b2f351428" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to non-empty lists. Note that unlike &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, the accumulated value must be of the same type as the list elements.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt; の変形である &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; の出発値の引数を持っていないため、非空のリストに適用する必要があります。 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; とは異なり、累積値はリスト要素と同じタイプである必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="88b199b16ada99235883951d2d68955839142a3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;, applied to a binary operator, a starting value (typically the right-identity of the operator), and a list, reduces the list using the binary operator, from right to left:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; は、二項演算子、開始値（通常は演算子の右ID）、およびリストに適用され、二項演算子を使用してリストを右から左に減らします。</target>
        </trans-unit>
        <trans-unit id="beac374c835fe87254ca862fa5b06447471c7a5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr1&quot;&gt;foldr1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to non-empty lists.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr1&quot;&gt;foldr1&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; のバリアントであり、開始値引数がないため、空でないリストに適用する必要があります。</target>
        </trans-unit>
        <trans-unit id="82e63aad9080b2f34d95c8cfc5eed72bf79e03a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr1&quot;&gt;foldr1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to non-empty lists. Note that unlike &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;, the accumulated value must be of the same type as the list elements.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr1&quot;&gt;foldr1&lt;/a&gt;&lt;/code&gt; は、開始値の引数がない &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; のバリアントであるため、空でないリストに適用する必要があります。 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; とは異なり、累積値はリスト要素と同じタイプである必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0287222812e6dc5bec2c145ad192c83ca9041d4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:intercalate&quot;&gt;intercalate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;xs xss&lt;/code&gt; is equivalent to &lt;code&gt;(&lt;a href=&quot;ghc-oldlist#v:concat&quot;&gt;concat&lt;/a&gt; (&lt;a href=&quot;ghc-oldlist#v:intersperse&quot;&gt;intersperse&lt;/a&gt; xs xss))&lt;/code&gt;. It inserts the list &lt;code&gt;xs&lt;/code&gt; in between the lists in &lt;code&gt;xss&lt;/code&gt; and concatenates the result.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:intercalate&quot;&gt;intercalate&lt;/a&gt;&lt;/code&gt; &lt;code&gt;xs xss&lt;/code&gt; は &lt;code&gt;(&lt;a href=&quot;ghc-oldlist#v:concat&quot;&gt;concat&lt;/a&gt; (&lt;a href=&quot;ghc-oldlist#v:intersperse&quot;&gt;intersperse&lt;/a&gt; xs xss))&lt;/code&gt; と同等です。 &lt;code&gt;xss&lt;/code&gt; のリストの間に &lt;code&gt;xs&lt;/code&gt; リストを挿入し、結果を連結します。</target>
        </trans-unit>
        <trans-unit id="0c30d7393da22016a45414eb2ee806c0e8a9b364" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f x&lt;/code&gt; returns an infinite list of repeated applications of &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt; &lt;code&gt;f x&lt;/code&gt; の繰り返しのアプリケーションの無限のリストを返し &lt;code&gt;f&lt;/code&gt; に &lt;code&gt;x&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5c431feab47e595bc7144a888a3fad5807053508" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:iterate-39-&quot;&gt;iterate'&lt;/a&gt;&lt;/code&gt; is the strict version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:iterate-39-&quot;&gt;iterate'&lt;/a&gt;&lt;/code&gt; 厳格なバージョンである &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="34d3235657a416a08470e9737648f234dc9b564c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt; breaks a string up into a list of strings at newline characters. The resulting strings do not contain newlines.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt; は、文字列を改行文字で文字列のリストに分割します。結果の文字列には改行は含まれません。</target>
        </trans-unit>
        <trans-unit id="d257a40bab1ece98bfd0554292505ad0b8197913" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:maximum&quot;&gt;maximum&lt;/a&gt;&lt;/code&gt; returns the maximum value from a list, which must be non-empty, finite, and of an ordered type. It is a special case of &lt;code&gt;&lt;a href=&quot;data-list#v:maximumBy&quot;&gt;maximumBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own comparison function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:maximum&quot;&gt;maximum&lt;/a&gt;&lt;/code&gt; は、リストから最大値を返します。リストは空でなく、有限で、順序付けされた型でなければなりません。これは、プログラマーが独自の比較関数を提供できるようにする &lt;code&gt;&lt;a href=&quot;data-list#v:maximumBy&quot;&gt;maximumBy&lt;/a&gt;&lt;/code&gt; の特殊なケースです。</target>
        </trans-unit>
        <trans-unit id="2b409d587004226531c4c952954bf3a65187c828" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:minimum&quot;&gt;minimum&lt;/a&gt;&lt;/code&gt; returns the minimum value from a list, which must be non-empty, finite, and of an ordered type. It is a special case of &lt;code&gt;&lt;a href=&quot;data-list#v:minimumBy&quot;&gt;minimumBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own comparison function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:minimum&quot;&gt;minimum&lt;/a&gt;&lt;/code&gt; は、リストから最小値を返します。リストは空でなく、有限で、順序付けされた型でなければなりません。これは、プログラマーが独自の比較関数を提供できるようにする &lt;code&gt;&lt;a href=&quot;data-list#v:minimumBy&quot;&gt;minimumBy&lt;/a&gt;&lt;/code&gt; の特殊なケースです。</target>
        </trans-unit>
        <trans-unit id="e9f4ff7773a89ae60de1da2aac827c2152bcd23c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; is the negation of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; の否定です。</target>
        </trans-unit>
        <trans-unit id="f5918c8d1b197ed3a0becf2b7ca664b38cc19f74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:or&quot;&gt;or&lt;/a&gt;&lt;/code&gt; returns the disjunction of a Boolean list. For the result to be &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, the list must be finite; &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, however, results from a &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; value at a finite index of a finite or infinite list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:or&quot;&gt;or&lt;/a&gt;&lt;/code&gt; 、ブールリストの論理和を返します。結果が &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; になるには、リストが有限でなければなりません。 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; から、しかし、結果 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 有限または無限リストの有限インデックスの値。</target>
        </trans-unit>
        <trans-unit id="a677af46f3e047946923afd966e750559d7d679a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:repeat&quot;&gt;repeat&lt;/a&gt;&lt;/code&gt;&lt;code&gt;x&lt;/code&gt; is an infinite list, with &lt;code&gt;x&lt;/code&gt; the value of every element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:repeat&quot;&gt;repeat&lt;/a&gt;&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; は無限リストであり、 &lt;code&gt;x&lt;/code&gt; はすべての要素の値です。</target>
        </trans-unit>
        <trans-unit id="255b893eabb96daf6eb78db66aa3d00d0aacdcd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n x&lt;/code&gt; is a list of length &lt;code&gt;n&lt;/code&gt; with &lt;code&gt;x&lt;/code&gt; the value of every element. It is an instance of the more general &lt;code&gt;&lt;a href=&quot;data-list#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt;, in which &lt;code&gt;n&lt;/code&gt; may be of any integral type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n x&lt;/code&gt; 長さのリストである &lt;code&gt;n&lt;/code&gt; と &lt;code&gt;x&lt;/code&gt; の各要素の値。これは、より一般的なのインスタンスである &lt;code&gt;&lt;a href=&quot;data-list#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt; 、ここで &lt;code&gt;n&lt;/code&gt; は任意の整数型であってもよいです。</target>
        </trans-unit>
        <trans-unit id="c67f8631f7545bf0267d1a9d6bde0113e4bd6401" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt;&lt;code&gt;xs&lt;/code&gt; returns the elements of &lt;code&gt;xs&lt;/code&gt; in reverse order. &lt;code&gt;xs&lt;/code&gt; must be finite.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt; &lt;code&gt;xs&lt;/code&gt; の要素を返し &lt;code&gt;xs&lt;/code&gt; 逆の順序で。 &lt;code&gt;xs&lt;/code&gt; は有限でなければなりません。</target>
        </trans-unit>
        <trans-unit id="a62d4347f16c1bd4b0511872d22b982a5a62c665" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns a tuple where first element is longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt; 述語 &lt;code&gt;p&lt;/code&gt; とリスト &lt;code&gt;xs&lt;/code&gt; に適用される spanは、最初の要素が &lt;code&gt;p&lt;/code&gt; を満たす要素の &lt;code&gt;xs&lt;/code&gt; の最長の接頭辞（おそらく空）であり、2番目の要素がリストの残りであるタプルを返します。</target>
        </trans-unit>
        <trans-unit id="bb6be4a3e987c474d875791b91a20621fb5f5954" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; is equivalent to &lt;code&gt;(&lt;a href=&quot;ghc-oldlist#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs, &lt;a href=&quot;ghc-oldlist#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p xs&lt;/code&gt; は &lt;code&gt;(&lt;a href=&quot;ghc-oldlist#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs, &lt;a href=&quot;ghc-oldlist#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs)&lt;/code&gt; &lt;a href=&quot;ghc-oldlist#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs、&lt;a href=&quot;ghc-oldlist#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs）と同等です。</target>
        </trans-unit>
        <trans-unit id="1dd2175a54ef8e7543543661ef61e6630901d48d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns a tuple where first element is &lt;code&gt;xs&lt;/code&gt; prefix of length &lt;code&gt;n&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; は、最初の要素が長さ &lt;code&gt;n&lt;/code&gt; の &lt;code&gt;xs&lt;/code&gt; プレフィックスであり、2番目の要素がリストの残りであるタプルを返します。</target>
        </trans-unit>
        <trans-unit id="c668a434adac50d4d07b161dfc7cc834d30f6211" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a list &lt;code&gt;xs&lt;/code&gt;, returns the prefix of &lt;code&gt;xs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;xs&lt;/code&gt; itself if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; 、リストに適用される &lt;code&gt;xs&lt;/code&gt; 、の接頭辞戻り &lt;code&gt;xs&lt;/code&gt; 長さを &lt;code&gt;n&lt;/code&gt; 、または &lt;code&gt;xs&lt;/code&gt; 場合自体を &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3a431017754ad67adc003f8933b8daf88f503298" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a list &lt;code&gt;xs&lt;/code&gt;, returns the prefix of &lt;code&gt;xs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;xs&lt;/code&gt; itself if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; は、リストに適用される &lt;code&gt;xs&lt;/code&gt; 、の接頭辞を返し &lt;code&gt;xs&lt;/code&gt; 長の &lt;code&gt;n&lt;/code&gt; 、または &lt;code&gt;xs&lt;/code&gt; 自体であれば &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="6691f4e2d807afd5e7f3cf69b6b58de74a706459" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns the longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt; 述語に適用さ、 &lt;code&gt;p&lt;/code&gt; およびリスト &lt;code&gt;xs&lt;/code&gt; 、最長プレフィックス（空）を返し &lt;code&gt;xs&lt;/code&gt; 満たすのその要素の &lt;code&gt;p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9416f8ab38a6a456ce2ab46b5cb5ee0a714c32f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns the longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt; は、述部に適用される &lt;code&gt;p&lt;/code&gt; 及びリスト &lt;code&gt;xs&lt;/code&gt; 、最長プレフィックス（空）を返し &lt;code&gt;xs&lt;/code&gt; 満たすのその要素の &lt;code&gt;p&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ca3260bd80e445c70ebee8ef36bb94699933245d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; is an inverse operation to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt;. It joins lines, after appending a terminating newline to each.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; はとは逆の動作である &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt; 。行末に改行を追加した後、行を結合します。</target>
        </trans-unit>
        <trans-unit id="2c343661c4c5b2ba3867b786e6ec22fcd23bab38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; is an inverse operation to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt;. It joins words with separating spaces.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt; の逆演算です。単語をスペースで区切って結合します。</target>
        </trans-unit>
        <trans-unit id="e15cac96c59f8fe5a7d26cbe12b261e69528ec10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; transforms a list of pairs into a list of first components and a list of second components.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; は、ペアのリストを最初のコンポーネントのリストと2番目のコンポーネントのリストに変換します。</target>
        </trans-unit>
        <trans-unit id="21fad57b58ceda8fc2c35e80ccbbf130647310a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt; breaks a string up into a list of words, which were delimited by white space.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt; は、文字列を空白で区切られた単語のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="dcdc3bff0e3d396c9659b6e0817fd3ca5435c91f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; はリストの融合が可能ですが、最初のリスト引数と結果のリストに制限されています。</target>
        </trans-unit>
        <trans-unit id="a4c74902e41e6a90fe42cbdb4a15b17aa3612718" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; is right-lazy:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; は右遅延です：</target>
        </trans-unit>
        <trans-unit id="27dc5d2945ebc8477d5418718b41eff26f59f736" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip3&quot;&gt;zip3&lt;/a&gt;&lt;/code&gt; takes three lists and returns a list of triples, analogous to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip3&quot;&gt;zip3&lt;/a&gt;&lt;/code&gt; は3つのリストを取り、 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; に類似したトリプルのリストを返します。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="5704149f69dc4d065be3de2c92a9bfd3b028b253" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; はリスト融合が可能ですが、最初のリスト引数とその結果のリストに制限されています。</target>
        </trans-unit>
        <trans-unit id="3067983166d12ffd7099880da0207ed3c82c3b10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; is right-lazy:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; はright-lazyです。</target>
        </trans-unit>
        <trans-unit id="3b8a40cd1a39553a12b4e46d896437e11f11ae50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; parser for a record field, of the form &lt;code&gt;fieldName#=value&lt;/code&gt;. That is, an alphanumeric identifier &lt;code&gt;fieldName&lt;/code&gt; followed by the symbol &lt;code&gt;#&lt;/code&gt;. The second argument is a parser for the field value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; &lt;code&gt;fieldName#=value&lt;/code&gt; の形式のレコードフィールドのパーサーを読み取ります。つまり、英数字の識別子 &lt;code&gt;fieldName&lt;/code&gt; の後に記号 &lt;code&gt;#&lt;/code&gt; が続きます。2番目の引数は、フィールド値のパーサーです。</target>
        </trans-unit>
        <trans-unit id="ae5a5faeb26de5b3c48d6dd9e8be5375ec884457" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; parser for a record field, of the form &lt;code&gt;fieldName=value&lt;/code&gt;. The &lt;code&gt;fieldName&lt;/code&gt; must be an alphanumeric identifier; for symbols (operator-style) field names, e.g. &lt;code&gt;(#)&lt;/code&gt;, use &lt;code&gt;&lt;a href=&quot;ghc-read#v:readSymField&quot;&gt;readSymField&lt;/a&gt;&lt;/code&gt;). The second argument is a parser for the field value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; &lt;code&gt;fieldName=value&lt;/code&gt; の形式のレコードフィールドのパーサーを読み取ります。 &lt;code&gt;fieldName&lt;/code&gt; には、英数字の識別子でなければなりません。シンボル（演算子スタイル）のフィールド名（例： &lt;code&gt;(#)&lt;/code&gt; の場合、 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readSymField&quot;&gt;readSymField&lt;/a&gt;&lt;/code&gt; を使用）。2番目の引数は、フィールド値のパーサーです。</target>
        </trans-unit>
        <trans-unit id="3da2aac9b80108a5b3b6a34b0e30c108d0d00cca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; parser for a symbol record field, of the form &lt;code&gt;(###)=value&lt;/code&gt; (where &lt;code&gt;###&lt;/code&gt; is the field name). The field name must be a symbol (operator-style), e.g. &lt;code&gt;(#)&lt;/code&gt;. For regular (alphanumeric) field names, use &lt;code&gt;&lt;a href=&quot;ghc-read#v:readField&quot;&gt;readField&lt;/a&gt;&lt;/code&gt;. The second argument is a parser for the field value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; &lt;code&gt;(###)=value&lt;/code&gt; （ &lt;code&gt;###&lt;/code&gt; はフィールド名）という形式の、シンボルレコードフィールドのパーサーを読み取ります。フィールド名はシンボル（演算子スタイル）でなければなりません（例： &lt;code&gt;(#)&lt;/code&gt; )。通常の（英数字の）フィールド名の場合は、 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readField&quot;&gt;readField&lt;/a&gt;&lt;/code&gt; を使用します。2番目の引数は、フィールド値のパーサーです。</target>
        </trans-unit>
        <trans-unit id="fc1e4a49a842bcc7357116b4bcaf1dbd3fe4f53e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt; p&lt;/code&gt; parses what &lt;code&gt;p&lt;/code&gt; parses, but optionally surrounded with parentheses.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt; p&lt;/code&gt; パース何 &lt;code&gt;p&lt;/code&gt; パースが、必要に応じて括弧で囲まれています。</target>
        </trans-unit>
        <trans-unit id="8bae4abccfaabf546f2e1228b2518d60b461a6ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt; p&lt;/code&gt; parses what &lt;code&gt;p&lt;/code&gt; parses, but surrounded with parentheses.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt; p&lt;/code&gt; パース何 &lt;code&gt;p&lt;/code&gt; パースが、括弧で囲まれています。</target>
        </trans-unit>
        <trans-unit id="567d3f90c45d29b23b2c186f5f5cc356673aa5cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt;, on the other hand, is based on a much more efficient &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readprec#t:ReadPrec&quot;&gt;ReadPrec&lt;/a&gt;&lt;/code&gt; datatype (a.k.a &quot;new-style parsers&quot;), but its definition relies on the use of the &lt;code&gt;RankNTypes&lt;/code&gt; language extension. Therefore, &lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; (and its cousin, &lt;code&gt;&lt;a href=&quot;ghc-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt;) are marked as GHC-only. Nevertheless, it is recommended to use &lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;ghc-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; whenever possible for the efficiency improvements it brings.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; は、他の一方で、はるかに効率的に基づいている &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readprec#t:ReadPrec&quot;&gt;ReadPrec&lt;/a&gt;&lt;/code&gt; データ型（別名「新しいスタイルのパーサ」）が、その定義はの使用に依存している &lt;code&gt;RankNTypes&lt;/code&gt; の言語拡張。したがって、 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; （およびその従兄弟である &lt;code&gt;&lt;a href=&quot;ghc-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; ）はGHCのみとしてマークされます。それでも、可能な限り、 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 代わりに &lt;code&gt;&lt;a href=&quot;ghc-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; を使用して、効率を向上させることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f818d33f49c36e5bd08eeae556f19678592545d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:ceiling&quot;&gt;ceiling&lt;/a&gt; x&lt;/code&gt; returns the least integer not less than &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-real#v:ceiling&quot;&gt;ceiling&lt;/a&gt; x&lt;/code&gt; より小さくない最小の整数を返し &lt;code&gt;x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9c50aa2a62a618744936a20658cca1344b434a10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:floor&quot;&gt;floor&lt;/a&gt; x&lt;/code&gt; returns the greatest integer not greater than &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-real#v:floor&quot;&gt;floor&lt;/a&gt; x&lt;/code&gt; より大きくない最大の整数を返し &lt;code&gt;x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="319a905d94ae2e8f071c1798237712390429f2dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; x y&lt;/code&gt; is the non-negative factor of both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; of which every common factor of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; is also a factor; for example &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; 4 2 = 2&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; (-4) 6 = 2&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 4&lt;/code&gt; = &lt;code&gt;4&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 0&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;. (That is, the common divisor that is &quot;greatest&quot; in the divisibility preordering.)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; x y&lt;/code&gt; 、両方の非マイナス要因であり &lt;code&gt;x&lt;/code&gt; 及び &lt;code&gt;y&lt;/code&gt; すべての共通の要因うち &lt;code&gt;x&lt;/code&gt; 及び &lt;code&gt;y&lt;/code&gt; また要因です。たとえば、 &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; 4 2 = 2&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; (-4) 6 = 2&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 4&lt;/code&gt; = &lt;code&gt;4&lt;/code&gt; です。 &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 0&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt; 。（つまり、分割可能プレオーダーで「最大」である共通除数です。）</target>
        </trans-unit>
        <trans-unit id="e92565e2a3dec9cdb3459eed5d5f0d227e08643d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:lcm&quot;&gt;lcm&lt;/a&gt; x y&lt;/code&gt; is the smallest positive integer that both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; divide.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-real#v:lcm&quot;&gt;lcm&lt;/a&gt; x y&lt;/code&gt; は、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の両方が割る最小の正の整数です。</target>
        </trans-unit>
        <trans-unit id="cb83bf837be47ed6a65ffe14ae13c31a18082e8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:reduce&quot;&gt;reduce&lt;/a&gt;&lt;/code&gt; is a subsidiary function used only in this module. It normalises a ratio by dividing both numerator and denominator by their greatest common divisor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-real#v:reduce&quot;&gt;reduce&lt;/a&gt;&lt;/code&gt; は、このモジュールでのみ使用される補助関数です。分子と分母の両方をそれらの最大公約数で割ることにより比率を正規化します。</target>
        </trans-unit>
        <trans-unit id="a9dd499cd9c9b751c0fca50154687b004edfff3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:round&quot;&gt;round&lt;/a&gt; x&lt;/code&gt; returns the nearest integer to &lt;code&gt;x&lt;/code&gt;; the even integer if &lt;code&gt;x&lt;/code&gt; is equidistant between two integers</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-real#v:round&quot;&gt;round&lt;/a&gt; x&lt;/code&gt; に最も近い整数を返す &lt;code&gt;x&lt;/code&gt; 。 &lt;code&gt;x&lt;/code&gt; が2つの整数の間で等距離の場合、偶数の整数</target>
        </trans-unit>
        <trans-unit id="b18f58d80977e91ef26ad42b2e08deecc2d7820e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:truncate&quot;&gt;truncate&lt;/a&gt; x&lt;/code&gt; returns the integer nearest &lt;code&gt;x&lt;/code&gt; between zero and &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-real#v:truncate&quot;&gt;truncate&lt;/a&gt; x&lt;/code&gt; 、最も近い整数値を返し &lt;code&gt;x&lt;/code&gt; がゼロとの間で &lt;code&gt;x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f18b7e588038bb2313fb65fa5f5ae38b5e024f32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-rts-flags#t:RtsTime&quot;&gt;RtsTime&lt;/a&gt;&lt;/code&gt; is defined as a &lt;code&gt;StgWord64&lt;/code&gt; in &lt;code&gt;stg/Types.h&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-rts-flags#t:RtsTime&quot;&gt;RtsTime&lt;/a&gt;&lt;/code&gt; は、のように定義される &lt;code&gt;StgWord64&lt;/code&gt; に &lt;code&gt;stg/Types.h&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3914e0bcc8d1236c512d64770c07549eca388052" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-show#v:show&quot;&gt;show&lt;/a&gt; (Leaf 1 :^: Leaf 2 :^: Leaf 3)&lt;/code&gt; produces the string &lt;code&gt;&quot;Leaf 1 :^: (Leaf 2 :^: Leaf 3)&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-show#v:show&quot;&gt;show&lt;/a&gt; (Leaf 1 :^: Leaf 2 :^: Leaf 3)&lt;/code&gt; は、文字列 &lt;code&gt;&quot;Leaf 1 :^: (Leaf 2 :^: Leaf 3)&quot;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="bc45df7c2d0510c8aff5c5b3a84ba902911f4890" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; should satisfy the law</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; は法律を満たしている必要があります</target>
        </trans-unit>
        <trans-unit id="3eb99f6e79be6e92cc4c84aa3ae6ef2cf6ebfb21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-st#v:unsafeDupableInterleaveST&quot;&gt;unsafeDupableInterleaveST&lt;/a&gt;&lt;/code&gt; allows an &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation to be deferred lazily. When passed a value of type &lt;code&gt;ST a&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation will only be performed when the value of the &lt;code&gt;a&lt;/code&gt; is demanded.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-st#v:unsafeDupableInterleaveST&quot;&gt;unsafeDupableInterleaveST&lt;/a&gt;&lt;/code&gt; を使用すると、 &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 計算を遅延して延期できます。タイプの値渡されたとき &lt;code&gt;ST a&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; の値場合、計算にのみ実行され &lt;code&gt;a&lt;/code&gt; 求められています。</target>
        </trans-unit>
        <trans-unit id="7912136bfe56b731805d99e4b630da55cbd9f2ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-st#v:unsafeInterleaveST&quot;&gt;unsafeInterleaveST&lt;/a&gt;&lt;/code&gt; allows an &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation to be deferred lazily. When passed a value of type &lt;code&gt;ST a&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation will only be performed when the value of the &lt;code&gt;a&lt;/code&gt; is demanded.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-st#v:unsafeInterleaveST&quot;&gt;unsafeInterleaveST&lt;/a&gt;&lt;/code&gt; を使用すると、 &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 計算を遅延して延期できます。タイプの値渡されたとき &lt;code&gt;ST a&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; の値場合、計算にのみ実行され &lt;code&gt;a&lt;/code&gt; 求められています。</target>
        </trans-unit>
        <trans-unit id="b4c9af8fda41ef6eb26ff7db581519d20c9414c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;s are a lightweight method of obtaining a partial call-stack at any point in the program.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; は、プログラムの任意の時点で部分的なコールスタックを取得する軽量な方法です。</target>
        </trans-unit>
        <trans-unit id="bed0ecabea47e9d304fac4c13dc87e914b8dc670" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;s do not interact with the RTS and do not require compilation with &lt;code&gt;-prof&lt;/code&gt;. On the other hand, as they are built up explicitly via the &lt;code&gt;&lt;a href=&quot;ghc-stack#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; constraints, they will generally not contain as much information as the simulated call-stacks maintained by the RTS.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; はRTSと相互作用せず、 &lt;code&gt;-prof&lt;/code&gt; を使用したコンパイルを必要としません。一方、 &lt;code&gt;&lt;a href=&quot;ghc-stack#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; 制約を介して明示的に構築されるため、RTSによって維持されるシミュレートされたコールスタックほど多くの情報は含まれません。</target>
        </trans-unit>
        <trans-unit id="0b54b6378609adfef6bcc92559ed48934566d6dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;s are a lightweight method of obtaining a partial call-stack at any point in the program.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; は、プログラムの任意の時点で部分的なコールスタックを取得する軽量な方法です。</target>
        </trans-unit>
        <trans-unit id="1ccdf2703d063754e5da79d77d000c1e4a8bdf62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;s do not interact with the RTS and do not require compilation with &lt;code&gt;-prof&lt;/code&gt;. On the other hand, as they are built up explicitly via the &lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; constraints, they will generally not contain as much information as the simulated call-stacks maintained by the RTS.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; はRTSと相互作用せず、 &lt;code&gt;-prof&lt;/code&gt; を使用したコンパイルを必要としません。一方、 &lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; 制約を介して明示的に構築されるため、RTSによって維持されるシミュレートされたコールスタックほど多くの情報は含まれません。</target>
        </trans-unit>
        <trans-unit id="93b4a0b3ee1f7074fdbceb2404e3c332a0581142" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticPtrInfo&quot;&gt;StaticPtrInfo&lt;/a&gt;&lt;/code&gt; of the given &lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticPtr&quot;&gt;StaticPtr&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticPtrInfo&quot;&gt;StaticPtrInfo&lt;/a&gt;&lt;/code&gt; 与えられたの &lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticPtr&quot;&gt;StaticPtr&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eaf127c76c486df4dbaba4066f38234d89487977" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-tophandler#v:runIO&quot;&gt;runIO&lt;/a&gt;&lt;/code&gt; is wrapped around every &lt;code&gt;foreign export&lt;/code&gt; and &lt;code&gt;foreign
 import &quot;wrapper&quot;&lt;/code&gt; to mop up any uncaught exceptions. Thus, the result of running &lt;code&gt;&lt;a href=&quot;system-exit#v:exitWith&quot;&gt;exitWith&lt;/a&gt;&lt;/code&gt; in a foreign-exported function is the same as in the main thread: it terminates the program.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-tophandler#v:runIO&quot;&gt;runIO&lt;/a&gt;&lt;/code&gt; は、すべての &lt;code&gt;foreign export&lt;/code&gt; と &lt;code&gt;foreign import &quot;wrapper&quot;&lt;/code&gt; をラップして、キャッチされていない例外をすべて取り除きます。したがって、 &lt;code&gt;&lt;a href=&quot;system-exit#v:exitWith&quot;&gt;exitWith&lt;/a&gt;&lt;/code&gt; を外部にエクスポートされた関数で実行した結果は、メインスレッドと同じです。プログラムを終了します。</target>
        </trans-unit>
        <trans-unit id="30e2557cd44bda005fab1056fa2bf589342d1921" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-tophandler#v:runMainIO&quot;&gt;runMainIO&lt;/a&gt;&lt;/code&gt; is wrapped around &lt;code&gt;&lt;a href=&quot;main#v:main&quot;&gt;main&lt;/a&gt;&lt;/code&gt; (or whatever main is called in the program). It catches otherwise uncaught exceptions, and also flushes stdout/stderr before exiting.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-tophandler#v:runMainIO&quot;&gt;runMainIO&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;main#v:main&quot;&gt;main&lt;/a&gt;&lt;/code&gt; （またはプログラムで呼び出されるメイン）をラップします。キャッチされない例外をキャッチし、終了する前にstdout / stderrをフラッシュします。</target>
        </trans-unit>
        <trans-unit id="097134ff5407332cd6aae265f2160cb39552c00d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:assert&quot;&gt;assert&lt;/a&gt;&lt;/code&gt; was applied to &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:assert&quot;&gt;assert&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; にassertが適用されました。</target>
        </trans-unit>
        <trans-unit id="dddf7a1d52cc7dcf3162f8ed8af8437a3cf87aed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-prim-0.6.1/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt; size is an exact multiple of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-prim-0.6.1/GHC-Prim.html#t:Word-35-&quot;&gt;Word#&lt;/a&gt;&lt;/code&gt; size</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-prim-0.6.1/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt; サイズは &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-prim-0.6.1/GHC-Prim.html#t:Word-35-&quot;&gt;Word#&lt;/a&gt;&lt;/code&gt; サイズの正確な倍数です</target>
        </trans-unit>
        <trans-unit id="0e33df6a525249c18105a29a873ed6404b98744d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:assert&quot;&gt;assert&lt;/a&gt;&lt;/code&gt; was applied to &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:assert&quot;&gt;assert&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; に適用されました。</target>
        </trans-unit>
        <trans-unit id="1ac0d90eaed26f78e7e904a221a7ec137823fb97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt; size is an exact multiple of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:Word-35-&quot;&gt;Word#&lt;/a&gt;&lt;/code&gt; size</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt; サイズは &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:Word-35-&quot;&gt;Word#&lt;/a&gt;&lt;/code&gt; サイズの正確な倍数です</target>
        </trans-unit>
        <trans-unit id="9606742142b860818f7451dc0c9307f7f3af4469" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:assert&quot;&gt;assert&lt;/a&gt;&lt;/code&gt; was applied to &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:assert&quot;&gt;assert&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; にassertが適用されました。</target>
        </trans-unit>
        <trans-unit id="682d326289cd3fb5a09f9f84fa9a199624bf8e75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#t:InstanceDec&quot;&gt;InstanceDec&lt;/a&gt;&lt;/code&gt; describes a single instance of a class or type function. It is just a &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Dec&quot;&gt;Dec&lt;/a&gt;&lt;/code&gt;, but guaranteed to be one of the following:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#t:InstanceDec&quot;&gt;InstanceDec&lt;/a&gt;&lt;/code&gt; は、クラスまたは型関数の単一のインスタンスを記述します。ちょうど &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Dec&quot;&gt;Dec&lt;/a&gt;&lt;/code&gt; ですが、次のいずれかであることが保証されています。</target>
        </trans-unit>
        <trans-unit id="2cfa58e5846605bc97f27d46b944d2cffadf6d37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#t:InstanceDec&quot;&gt;InstanceDec&lt;/a&gt;&lt;/code&gt; desribes a single instance of a class or type function. It is just a &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Dec&quot;&gt;Dec&lt;/a&gt;&lt;/code&gt;, but guaranteed to be one of the following:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#t:InstanceDec&quot;&gt;InstanceDec&lt;/a&gt;&lt;/code&gt; は、クラスまたはタイプ関数の単一のインスタンスを記述します。これは単なる &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Dec&quot;&gt;Dec&lt;/a&gt;&lt;/code&gt; ですが、次のいずれかであることが保証されています。</target>
        </trans-unit>
        <trans-unit id="07bd31aaac16d5e33d0f79df81ab94bfb8d25b35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt;s can be constructed in several ways, which come with different name-capture guarantees (see &lt;a href=&quot;language-haskell-th-syntax#namecapture&quot;&gt;Language.Haskell.TH.Syntax&lt;/a&gt; for an explanation of name capture):</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt; は、いくつかの方法で構築できます。これには、さまざまな名前キャプチャの保証が付属しています（名前キャプチャの説明については、&lt;a href=&quot;language-haskell-th-syntax#namecapture&quot;&gt; Language.Haskell.TH.Syntax&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="79e0fef24bf5f2a737953d8e70adf7276053b2a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:DataInstD&quot;&gt;DataInstD&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:NewtypeInstD&quot;&gt;NewtypeInstD&lt;/a&gt;&lt;/code&gt; (with empty derived &lt;code&gt;[&lt;a href=&quot;language-haskell-th#t:Name&quot;&gt;Name&lt;/a&gt;]&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:DataInstD&quot;&gt;DataInstD&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:NewtypeInstD&quot;&gt;NewtypeInstD&lt;/a&gt;&lt;/code&gt; （空の派生 &lt;code&gt;[&lt;a href=&quot;language-haskell-th#t:Name&quot;&gt;Name&lt;/a&gt;]&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="3f8654d746f2c60644b5d2281313083cc9a1aa53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:InstanceD&quot;&gt;InstanceD&lt;/a&gt;&lt;/code&gt; (with empty &lt;code&gt;[&lt;a href=&quot;language-haskell-th#t:Dec&quot;&gt;Dec&lt;/a&gt;]&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:InstanceD&quot;&gt;InstanceD&lt;/a&gt;&lt;/code&gt; （空の &lt;code&gt;[&lt;a href=&quot;language-haskell-th#t:Dec&quot;&gt;Dec&lt;/a&gt;]&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="d9c7ba6a896ef8663fc06d9c179a38c6ce1844ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:lookupValueName&quot;&gt;lookupValueName&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:lookupTypeName&quot;&gt;lookupTypeName&lt;/a&gt;&lt;/code&gt; are similar to &lt;code&gt;'f&lt;/code&gt; and &lt;code&gt;''T&lt;/code&gt; respectively, but the &lt;code&gt;Name&lt;/code&gt;s are looked up at the point where the current splice is being run. These names can never be captured.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:lookupValueName&quot;&gt;lookupValueName&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:lookupTypeName&quot;&gt;lookupTypeName&lt;/a&gt;&lt;/code&gt; はそれぞれ &lt;code&gt;'f&lt;/code&gt; および &lt;code&gt;''T&lt;/code&gt; 似ていますが、 &lt;code&gt;Name&lt;/code&gt; は現在のスプライスが実行されているポイントで検索されます。これらの名前を取得することはできません。</target>
        </trans-unit>
        <trans-unit id="dcbce836ad277a603ffcf7c220b9f06cb8eab87f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:mkName&quot;&gt;mkName&lt;/a&gt;&lt;/code&gt; generates a capturable name.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:mkName&quot;&gt;mkName&lt;/a&gt;&lt;/code&gt; はキャプチャ可能な名前を生成します。</target>
        </trans-unit>
        <trans-unit id="9e8790d572e782d1539ea11dd4a464a9e0271ae8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:newName&quot;&gt;newName&lt;/a&gt;&lt;/code&gt; is used when desugaring binding structures such as lambdas to generate fresh names.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:newName&quot;&gt;newName&lt;/a&gt;&lt;/code&gt; は、ラムダなどのバインディング構造を脱糖して新しい名前を生成するときに使用されます。</target>
        </trans-unit>
        <trans-unit id="5c56cad08125fd33a494fa84bec89a27cd88b90a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:newName&quot;&gt;newName&lt;/a&gt;&lt;/code&gt; monadically generates a new name, which can never be captured.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:newName&quot;&gt;newName&lt;/a&gt;&lt;/code&gt; は、キャプチャできない決して新しい名前をモナディックに生成します。</target>
        </trans-unit>
        <trans-unit id="8c4147d27888b89b2c78b46305d524b8aa858515" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reify&quot;&gt;reify&lt;/a&gt;&lt;/code&gt; looks up information about the &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reify&quot;&gt;reify&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt; に関する情報を検索します。</target>
        </trans-unit>
        <trans-unit id="1232001b6fbae38e36c1cd90a7584f019a4964b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reifyConStrictness&quot;&gt;reifyConStrictness&lt;/a&gt;&lt;/code&gt; would return &lt;code&gt;[&lt;a href=&quot;language-haskell-th#v:DecidedLazy&quot;&gt;DecidedLazy&lt;/a&gt;, DecidedLazy]&lt;/code&gt; under most circumstances, but it would return &lt;code&gt;[&lt;a href=&quot;language-haskell-th#v:DecidedStrict&quot;&gt;DecidedStrict&lt;/a&gt;, DecidedStrict]&lt;/code&gt; if the &lt;code&gt;-XStrictData&lt;/code&gt; language extension was enabled.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reifyConStrictness&quot;&gt;reifyConStrictness&lt;/a&gt;&lt;/code&gt; は戻ってくる &lt;code&gt;[&lt;a href=&quot;language-haskell-th#v:DecidedLazy&quot;&gt;DecidedLazy&lt;/a&gt;, DecidedLazy]&lt;/code&gt; ほとんどの状況で、それが戻ってくる &lt;code&gt;[&lt;a href=&quot;language-haskell-th#v:DecidedStrict&quot;&gt;DecidedStrict&lt;/a&gt;, DecidedStrict]&lt;/code&gt; 場合 &lt;code&gt;-XStrictData&lt;/code&gt; 言語拡張が有効になっていました。</target>
        </trans-unit>
        <trans-unit id="dc83d1bc9715c0147848c379b12c8b18d57a5085" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; converts a value to a 'Q Exp' representation of the same value, in the SYB style. It is generalized to take a function override type-specific cases; see &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; for a more commonly used variant.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; は、値をSYBスタイルの同じ値の「Q Exp」表現に変換します。これは、関数オーバーライドタイプ固有のケースを取るように一般化されています。より一般的に使用されるバリアントについては、 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="fc1abba8f48c8e74e00076f916bc7da316ad97c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; converts a value to a &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Exp&quot;&gt;Exp&lt;/a&gt;&lt;/code&gt; representation of the same value, in the SYB style. It is generalized to take a function override type-specific cases; see &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; for a more commonly used variant.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; は、SYBスタイルで、値を同じ値の &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Exp&quot;&gt;Exp&lt;/a&gt;&lt;/code&gt; 表現に変換します。関数オーバーライドタイプ固有のケースを取ることが一般化されています。より一般的に使用されるバリアントについては、 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="a796695d16121f87b865283cf6538c18e0ac6eac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; converts a value to a 'Q Pat' representation of the same value, in the SYB style. It takes a function to handle type-specific cases, alternatively, pass &lt;code&gt;const Nothing&lt;/code&gt; to get default behavior.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; は、値をSYBスタイルの同じ値の「Q Pat」表現に変換します。これは、型固有のケースを処理する関数を取るか、またはデフォルトの動作を取得するために &lt;code&gt;const Nothing&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="a0cf5a1eca31316e6adde73b8c699eccd3bc55f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; converts a value to a &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Pat&quot;&gt;Pat&lt;/a&gt;&lt;/code&gt; representation of the same value, in the SYB style. It takes a function to handle type-specific cases, alternatively, pass &lt;code&gt;const Nothing&lt;/code&gt; to get default behavior.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; は、SYBスタイルで、値を同じ値の &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Pat&quot;&gt;Pat&lt;/a&gt;&lt;/code&gt; 表現に変換します。タイプ固有のケースを処理する関数を使用するか、 &lt;code&gt;const Nothing&lt;/code&gt; 渡してデフォルトの動作を取得します。</target>
        </trans-unit>
        <trans-unit id="9649b818454081f402bceec28a692626aec7dcbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToQa&quot;&gt;dataToQa&lt;/a&gt;&lt;/code&gt; is an internal utility function for constructing generic conversion functions from types with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances to various quasi-quoting representations. See the source of &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; for two example usages: &lt;code&gt;mkCon&lt;/code&gt;, &lt;code&gt;mkLit&lt;/code&gt; and &lt;code&gt;appQ&lt;/code&gt; are overloadable to account for different syntax for expressions and patterns; &lt;code&gt;antiQ&lt;/code&gt; allows you to override type-specific cases, a common usage is just &lt;code&gt;const Nothing&lt;/code&gt;, which results in no overloading.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToQa&quot;&gt;dataToQa&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; インスタンスを持つ型からさまざまな準引用表現への一般的な変換関数を構築するための内部ユーティリティ関数です。ソースを参照してください &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; 2例の用途のために： &lt;code&gt;mkCon&lt;/code&gt; 、 &lt;code&gt;mkLit&lt;/code&gt; と &lt;code&gt;appQ&lt;/code&gt; は式とパターンのための別の構文を説明するためにオーバーロードされています。 &lt;code&gt;antiQ&lt;/code&gt; を使用すると、タイプ固有のケースをオーバーライドできます。一般的な使用法は &lt;code&gt;const Nothing&lt;/code&gt; であり、オーバーロードは発生しません。</target>
        </trans-unit>
        <trans-unit id="7a27814a62a6d9b384d54c193804b6368d0fffb3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToQa&quot;&gt;dataToQa&lt;/a&gt;&lt;/code&gt; is an internal utility function for constructing generic conversion functions from types with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances to various quasi-quoting representations. See the source of &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; for two example usages: &lt;code&gt;mkCon&lt;/code&gt;, &lt;code&gt;mkLit&lt;/code&gt; and &lt;code&gt;appQ&lt;/code&gt; are overloadable to account for different syntax for expressions and patterns; &lt;code&gt;antiQ&lt;/code&gt; allows you to override type-specific cases, a common usage is just &lt;code&gt;const Nothing&lt;/code&gt;, which results in no overloading.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToQa&quot;&gt;dataToQa&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; インスタンスを持つ型からさまざまな準引用表現への汎用変換関数を構築するための内部ユーティリティ関数です。2つの使用例については、 &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; のソースを参照してください &lt;code&gt;mkCon&lt;/code&gt; 、 &lt;code&gt;mkLit&lt;/code&gt; 、および &lt;code&gt;appQ&lt;/code&gt; は、式とパターンの異なる構文を説明するためにオーバーロード可能です。 &lt;code&gt;antiQ&lt;/code&gt; を使用すると、タイプ固有のケースをオーバーライドできます。一般的な使用法は &lt;code&gt;const Nothing&lt;/code&gt; であり、オーバーロードは発生しません。</target>
        </trans-unit>
        <trans-unit id="4cc1c32206b5445a02773c291388a56f8409ea0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToQa&quot;&gt;dataToQa&lt;/a&gt;&lt;/code&gt; is an internal utility function for constructing generic conversion functions from types with &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances to various quasi-quoting representations. See the source of &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; for two example usages: &lt;code&gt;mkCon&lt;/code&gt;, &lt;code&gt;mkLit&lt;/code&gt; and &lt;code&gt;appQ&lt;/code&gt; are overloadable to account for different syntax for expressions and patterns; &lt;code&gt;antiQ&lt;/code&gt; allows you to override type-specific cases, a common usage is just &lt;code&gt;const Nothing&lt;/code&gt;, which results in no overloading.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToQa&quot;&gt;dataToQa&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; インスタンスを持つ型からさまざまな準引用表現への一般的な変換関数を構築するための内部ユーティリティ関数です。2つの使用例については、 &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; のソースを参照してください &lt;code&gt;mkCon&lt;/code&gt; 、 &lt;code&gt;mkLit&lt;/code&gt; 、および &lt;code&gt;appQ&lt;/code&gt; は、式とパターンの異なる構文を説明するためにオーバーロード可能です。 &lt;code&gt;antiQ&lt;/code&gt; を使用すると、タイプ固有のケースをオーバーライドできます。一般的な使用法は &lt;code&gt;const Nothing&lt;/code&gt; であり、オーバーロードは発生しません。</target>
        </trans-unit>
        <trans-unit id="1d9999bf12ab30c952de4581c3e5219fe3da4a3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:quoteFile&quot;&gt;quoteFile&lt;/a&gt;&lt;/code&gt; takes a &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#t:QuasiQuoter&quot;&gt;QuasiQuoter&lt;/a&gt;&lt;/code&gt; and lifts it into one that read the data out of a file. For example, suppose &lt;code&gt;asmq&lt;/code&gt; is an assembly-language quoter, so that you can write [asmq| ld r1, r2 |] as an expression. Then if you define &lt;code&gt;asmq_f = quoteFile asmq&lt;/code&gt;, then the quote [asmq_f|foo.s|] will take input from file &lt;code&gt;&quot;foo.s&quot;&lt;/code&gt; instead of the inline text</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:quoteFile&quot;&gt;quoteFile&lt;/a&gt;&lt;/code&gt; は取り &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#t:QuasiQuoter&quot;&gt;QuasiQuoter&lt;/a&gt;&lt;/code&gt; をして、ファイルのデータを読み出す1にそれを持ち上げます。たとえば、 &lt;code&gt;asmq&lt;/code&gt; がアセンブリ言語の引用符であり、[asmq | 式としてld r1、r2 |]。次に、 &lt;code&gt;asmq_f = quoteFile asmq&lt;/code&gt; を定義すると、引用[asmq_f | foo.s |]は、インラインテキストではなく、ファイル &lt;code&gt;&quot;foo.s&quot;&lt;/code&gt; から入力を取得します。</target>
        </trans-unit>
        <trans-unit id="ac4dad3fc46a67164e9333fdedd426c1af241c2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:InstanceDec&quot;&gt;InstanceDec&lt;/a&gt;&lt;/code&gt; describes a single instance of a class or type function. It is just a &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Dec&quot;&gt;Dec&lt;/a&gt;&lt;/code&gt;, but guaranteed to be one of the following:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:InstanceDec&quot;&gt;InstanceDec&lt;/a&gt;&lt;/code&gt; は、クラスまたは型関数の単一のインスタンスを記述します。ちょうど &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Dec&quot;&gt;Dec&lt;/a&gt;&lt;/code&gt; ですが、次のいずれかであることが保証されています。</target>
        </trans-unit>
        <trans-unit id="494cab9c250a45952ecb439d0268aa339e64f1eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:InstanceDec&quot;&gt;InstanceDec&lt;/a&gt;&lt;/code&gt; desribes a single instance of a class or type function. It is just a &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Dec&quot;&gt;Dec&lt;/a&gt;&lt;/code&gt;, but guaranteed to be one of the following:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:InstanceDec&quot;&gt;InstanceDec&lt;/a&gt;&lt;/code&gt; は、クラスまたはタイプ関数の単一のインスタンスを記述します。これは単なる &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Dec&quot;&gt;Dec&lt;/a&gt;&lt;/code&gt; ですが、次のいずれかであることが保証されています。</target>
        </trans-unit>
        <trans-unit id="bd3b710ead83ecd7653b5b900b934a99e2f05f4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Lift&quot;&gt;Lift&lt;/a&gt;&lt;/code&gt; instances can be derived automatically by use of the &lt;code&gt;-XDeriveLift&lt;/code&gt; GHC language extension:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Lift&quot;&gt;Lift&lt;/a&gt;&lt;/code&gt; インスタンスは、 &lt;code&gt;-XDeriveLift&lt;/code&gt; GHC言語拡張を使用して自動的に導出できます。</target>
        </trans-unit>
        <trans-unit id="23d7b99c603ed7e2bb515dc1e52c2959a87dc223" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt;s can be constructed in several ways, which come with different name-capture guarantees (see &lt;a href=&quot;language-haskell-th-syntax#namecapture&quot;&gt;Language.Haskell.TH.Syntax&lt;/a&gt; for an explanation of name capture):</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt; は、いくつかの方法で構築できます。これには、さまざまな名前キャプチャの保証が付属しています（名前キャプチャの説明については、&lt;a href=&quot;language-haskell-th-syntax#namecapture&quot;&gt; Language.Haskell.TH.Syntax&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="840f5a195d18c505eed5b6054a43f1d20883a5c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:DataInstD&quot;&gt;DataInstD&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:NewtypeInstD&quot;&gt;NewtypeInstD&lt;/a&gt;&lt;/code&gt; (with empty derived &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#t:Name&quot;&gt;Name&lt;/a&gt;]&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:DataInstD&quot;&gt;DataInstD&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:NewtypeInstD&quot;&gt;NewtypeInstD&lt;/a&gt;&lt;/code&gt; （空の派生 &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#t:Name&quot;&gt;Name&lt;/a&gt;]&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="ff569f15354913d27bea83e61cb925996c8b4b80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:InstanceD&quot;&gt;InstanceD&lt;/a&gt;&lt;/code&gt; (with empty &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#t:Dec&quot;&gt;Dec&lt;/a&gt;]&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:InstanceD&quot;&gt;InstanceD&lt;/a&gt;&lt;/code&gt; （空の &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#t:Dec&quot;&gt;Dec&lt;/a&gt;]&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="f86a8355fed83acbfb520a5aab5343fc869dd2e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; converts a value to a 'Q Exp' representation of the same value, in the SYB style. It is generalized to take a function override type-specific cases; see &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; for a more commonly used variant.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; は、値をSYBスタイルの同じ値の「Q Exp」表現に変換します。これは、関数オーバーライドタイプ固有のケースを取るように一般化されています。より一般的に使用されるバリアントについては、 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="f90c028616e83fa4a61cc4000a8751c4d5d3b1e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; converts a value to a &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Exp&quot;&gt;Exp&lt;/a&gt;&lt;/code&gt; representation of the same value, in the SYB style. It is generalized to take a function override type-specific cases; see &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; for a more commonly used variant.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; は、SYBスタイルで、値を同じ値の &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Exp&quot;&gt;Exp&lt;/a&gt;&lt;/code&gt; 表現に変換します。関数オーバーライドタイプ固有のケースを取ることが一般化されています。より一般的に使用されるバリアントについては、 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="9c6b26f7ad040178ea0b3b4d3d2be19ece4e031f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; converts a value to a 'Q Pat' representation of the same value, in the SYB style. It takes a function to handle type-specific cases, alternatively, pass &lt;code&gt;const Nothing&lt;/code&gt; to get default behavior.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; は、値をSYBスタイルの同じ値の「Q Pat」表現に変換します。これは、型固有のケースを処理する関数を取るか、またはデフォルトの動作を取得するために &lt;code&gt;const Nothing&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="249c19a8ee506026f0ff86a72fc3a27e12d98055" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; converts a value to a &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Pat&quot;&gt;Pat&lt;/a&gt;&lt;/code&gt; representation of the same value, in the SYB style. It takes a function to handle type-specific cases, alternatively, pass &lt;code&gt;const Nothing&lt;/code&gt; to get default behavior.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; は、SYBスタイルで、値を同じ値の &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Pat&quot;&gt;Pat&lt;/a&gt;&lt;/code&gt; 表現に変換します。タイプ固有のケースを処理する関数を使用するか、 &lt;code&gt;const Nothing&lt;/code&gt; 渡してデフォルトの動作を取得します。</target>
        </trans-unit>
        <trans-unit id="22aaea3f49bbbb1c791befecde6970da7b81782b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToQa&quot;&gt;dataToQa&lt;/a&gt;&lt;/code&gt; is an internal utility function for constructing generic conversion functions from types with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances to various quasi-quoting representations. See the source of &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; for two example usages: &lt;code&gt;mkCon&lt;/code&gt;, &lt;code&gt;mkLit&lt;/code&gt; and &lt;code&gt;appQ&lt;/code&gt; are overloadable to account for different syntax for expressions and patterns; &lt;code&gt;antiQ&lt;/code&gt; allows you to override type-specific cases, a common usage is just &lt;code&gt;const Nothing&lt;/code&gt;, which results in no overloading.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToQa&quot;&gt;dataToQa&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; インスタンスを持つ型からさまざまな準引用表現への一般的な変換関数を構築するための内部ユーティリティ関数です。ソースを参照してください &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; 2例の用途のために： &lt;code&gt;mkCon&lt;/code&gt; 、 &lt;code&gt;mkLit&lt;/code&gt; と &lt;code&gt;appQ&lt;/code&gt; は式とパターンのための別の構文を説明するためにオーバーロードされています。 &lt;code&gt;antiQ&lt;/code&gt; を使用すると、タイプ固有のケースをオーバーライドできます。一般的な使用法は &lt;code&gt;const Nothing&lt;/code&gt; であり、オーバーロードは発生しません。</target>
        </trans-unit>
        <trans-unit id="10add102c8fc9fd32cf68549aeccb4d1e59f0397" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToQa&quot;&gt;dataToQa&lt;/a&gt;&lt;/code&gt; is an internal utility function for constructing generic conversion functions from types with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances to various quasi-quoting representations. See the source of &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; for two example usages: &lt;code&gt;mkCon&lt;/code&gt;, &lt;code&gt;mkLit&lt;/code&gt; and &lt;code&gt;appQ&lt;/code&gt; are overloadable to account for different syntax for expressions and patterns; &lt;code&gt;antiQ&lt;/code&gt; allows you to override type-specific cases, a common usage is just &lt;code&gt;const Nothing&lt;/code&gt;, which results in no overloading.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToQa&quot;&gt;dataToQa&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; インスタンスを持つ型からさまざまな準引用表現への汎用変換関数を構築するための内部ユーティリティ関数です。2つの使用例については、 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; のソースを参照してください &lt;code&gt;mkCon&lt;/code&gt; 、 &lt;code&gt;mkLit&lt;/code&gt; 、および &lt;code&gt;appQ&lt;/code&gt; は、式とパターンの異なる構文を説明するためにオーバーロード可能です。 &lt;code&gt;antiQ&lt;/code&gt; を使用すると、タイプ固有のケースをオーバーライドできます。一般的な使用法は &lt;code&gt;const Nothing&lt;/code&gt; であり、オーバーロードは発生しません。</target>
        </trans-unit>
        <trans-unit id="37c1f6203521d9f7d2e2c8fb17d33b0c7679d86d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToQa&quot;&gt;dataToQa&lt;/a&gt;&lt;/code&gt; is an internal utility function for constructing generic conversion functions from types with &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances to various quasi-quoting representations. See the source of &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; for two example usages: &lt;code&gt;mkCon&lt;/code&gt;, &lt;code&gt;mkLit&lt;/code&gt; and &lt;code&gt;appQ&lt;/code&gt; are overloadable to account for different syntax for expressions and patterns; &lt;code&gt;antiQ&lt;/code&gt; allows you to override type-specific cases, a common usage is just &lt;code&gt;const Nothing&lt;/code&gt;, which results in no overloading.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToQa&quot;&gt;dataToQa&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; インスタンスを持つ型からさまざまな準引用表現への一般的な変換関数を構築するための内部ユーティリティ関数です。2つの使用例については、 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; のソースを参照してください &lt;code&gt;mkCon&lt;/code&gt; 、 &lt;code&gt;mkLit&lt;/code&gt; 、および &lt;code&gt;appQ&lt;/code&gt; は、式とパターンの異なる構文を説明するためにオーバーロード可能です。 &lt;code&gt;antiQ&lt;/code&gt; を使用すると、タイプ固有のケースをオーバーライドできます。一般的な使用法は &lt;code&gt;const Nothing&lt;/code&gt; であり、オーバーロードは発生しません。</target>
        </trans-unit>
        <trans-unit id="b4f75bfe15dbc2aba3edb2e4be0269424f421b58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lift&quot;&gt;lift&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Lift&quot;&gt;Lift&lt;/a&gt;&lt;/code&gt; type class which works for any type with a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Lift&quot;&gt;Lift&lt;/a&gt;&lt;/code&gt; タイプクラスの &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lift&quot;&gt;lift&lt;/a&gt;&lt;/code&gt; のバリアントであり、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; インスタンスを持つ任意のタイプで機能します。</target>
        </trans-unit>
        <trans-unit id="5814770fde78eb5934b4082ca60db9cb82455092" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lift&quot;&gt;lift&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Lift&quot;&gt;Lift&lt;/a&gt;&lt;/code&gt; type class which works for any type with a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Lift&quot;&gt;Lift&lt;/a&gt;&lt;/code&gt; 型クラスの &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lift&quot;&gt;lift&lt;/a&gt;&lt;/code&gt; のバリアントであり、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; インスタンスを持つすべての型で機能します。</target>
        </trans-unit>
        <trans-unit id="74bbaadb75878917bc715e149d7421a6a1fe8f0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lift&quot;&gt;lift&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Lift&quot;&gt;Lift&lt;/a&gt;&lt;/code&gt; type class which works for any type with a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Lift&quot;&gt;Lift&lt;/a&gt;&lt;/code&gt; 型クラスの &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lift&quot;&gt;lift&lt;/a&gt;&lt;/code&gt; のバリアントであり、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; インスタンスを持つすべての型で機能します。</target>
        </trans-unit>
        <trans-unit id="dcc1818b27997f484d76b1b79bfb3ed25655b1c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lookupValueName&quot;&gt;lookupValueName&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lookupTypeName&quot;&gt;lookupTypeName&lt;/a&gt;&lt;/code&gt; are similar to &lt;code&gt;'f&lt;/code&gt; and &lt;code&gt;''T&lt;/code&gt; respectively, but the &lt;code&gt;Name&lt;/code&gt;s are looked up at the point where the current splice is being run. These names can never be captured.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lookupValueName&quot;&gt;lookupValueName&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lookupTypeName&quot;&gt;lookupTypeName&lt;/a&gt;&lt;/code&gt; はそれぞれ &lt;code&gt;'f&lt;/code&gt; および &lt;code&gt;''T&lt;/code&gt; 似ていますが、 &lt;code&gt;Name&lt;/code&gt; は現在のスプライスが実行されているポイントで検索されます。これらの名前を取得することはできません。</target>
        </trans-unit>
        <trans-unit id="782af2f301a050a096829ddcc020be752f84b031" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:mkName&quot;&gt;mkName&lt;/a&gt;&lt;/code&gt; generates a capturable name.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:mkName&quot;&gt;mkName&lt;/a&gt;&lt;/code&gt; はキャプチャ可能な名前を生成します。</target>
        </trans-unit>
        <trans-unit id="92e17b8752506a36ee09121ca9b111edaa207761" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:newName&quot;&gt;newName&lt;/a&gt;&lt;/code&gt; is used when desugaring binding structures such as lambdas to generate fresh names.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:newName&quot;&gt;newName&lt;/a&gt;&lt;/code&gt; は、ラムダなどのバインディング構造を脱糖して新しい名前を生成するときに使用されます。</target>
        </trans-unit>
        <trans-unit id="a79c55fb6b73bfd7edc3807f496aa3696fb852af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:newName&quot;&gt;newName&lt;/a&gt;&lt;/code&gt; monadically generates a new name, which can never be captured.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:newName&quot;&gt;newName&lt;/a&gt;&lt;/code&gt; は、キャプチャできない決して新しい名前をモナディックに生成します。</target>
        </trans-unit>
        <trans-unit id="381c1a27fd7e44fc833c358502fc48714bafb7d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reify&quot;&gt;reify&lt;/a&gt;&lt;/code&gt; looks up information about the &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reify&quot;&gt;reify&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt; に関する情報を検索します。</target>
        </trans-unit>
        <trans-unit id="f3240516619298cb631a45a4cbd8e169f3c59649" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reifyConStrictness&quot;&gt;reifyConStrictness&lt;/a&gt;&lt;/code&gt; would return &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#v:DecidedLazy&quot;&gt;DecidedLazy&lt;/a&gt;, DecidedLazy]&lt;/code&gt; under most circumstances, but it would return &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#v:DecidedStrict&quot;&gt;DecidedStrict&lt;/a&gt;, DecidedStrict]&lt;/code&gt; if the &lt;code&gt;-XStrictData&lt;/code&gt; language extension was enabled.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reifyConStrictness&quot;&gt;reifyConStrictness&lt;/a&gt;&lt;/code&gt; は戻ってくる &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#v:DecidedLazy&quot;&gt;DecidedLazy&lt;/a&gt;, DecidedLazy]&lt;/code&gt; ほとんどの状況で、それが戻ってくる &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#v:DecidedStrict&quot;&gt;DecidedStrict&lt;/a&gt;, DecidedStrict]&lt;/code&gt; 場合 &lt;code&gt;-XStrictData&lt;/code&gt; 言語拡張が有効になっていました。</target>
        </trans-unit>
        <trans-unit id="454769dfaae8136c2efb11174dc30677b704c7d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;numeric#v:expm1&quot;&gt;expm1&lt;/a&gt; x&lt;/code&gt; computes &lt;code&gt;&lt;a href=&quot;numeric#v:exp&quot;&gt;exp&lt;/a&gt; x - 1&lt;/code&gt;, but provides more precise results for small (absolute) values of &lt;code&gt;x&lt;/code&gt; if possible.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;numeric#v:expm1&quot;&gt;expm1&lt;/a&gt; x&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;numeric#v:exp&quot;&gt;exp&lt;/a&gt; x - 1&lt;/code&gt; 計算しますが、可能であれば &lt;code&gt;x&lt;/code&gt; の小さな（絶対）値に対してより正確な結果を提供します。</target>
        </trans-unit>
        <trans-unit id="37a695e4fedd553cca25bc687a091bbb8bd1eb4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;numeric#v:floatToDigits&quot;&gt;floatToDigits&lt;/a&gt;&lt;/code&gt; takes a base and a non-negative &lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; number, and returns a list of digits and an exponent. In particular, if &lt;code&gt;x&amp;gt;=0&lt;/code&gt;, and</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;numeric#v:floatToDigits&quot;&gt;floatToDigits&lt;/a&gt;&lt;/code&gt; は、基数と非負の &lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; 数を取り、数字と指数のリストを返します。特に、 &lt;code&gt;x&amp;gt;=0&lt;/code&gt; の場合、および</target>
        </trans-unit>
        <trans-unit id="2bc289c8e0f3df346b3f2df9d3046765701b5d00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;numeric#v:log1mexp&quot;&gt;log1mexp&lt;/a&gt; x&lt;/code&gt; computes &lt;code&gt;&lt;a href=&quot;numeric#v:log&quot;&gt;log&lt;/a&gt; (1 - &lt;a href=&quot;numeric#v:exp&quot;&gt;exp&lt;/a&gt; x)&lt;/code&gt;, but provides more precise results if possible.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;numeric#v:log1mexp&quot;&gt;log1mexp&lt;/a&gt; x&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;numeric#v:log&quot;&gt;log&lt;/a&gt; (1 - &lt;a href=&quot;numeric#v:exp&quot;&gt;exp&lt;/a&gt; x)&lt;/code&gt; 計算しますが、可能であればより正確な結果を提供します。</target>
        </trans-unit>
        <trans-unit id="73d3a0d65b796f7a7d489e2a0759ae805e686ffc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;numeric#v:log1p&quot;&gt;log1p&lt;/a&gt; x&lt;/code&gt; computes &lt;code&gt;&lt;a href=&quot;numeric#v:log&quot;&gt;log&lt;/a&gt; (1 + x)&lt;/code&gt;, but provides more precise results for small (absolute) values of &lt;code&gt;x&lt;/code&gt; if possible.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;numeric#v:log1p&quot;&gt;log1p&lt;/a&gt; x&lt;/code&gt; 計算するには、 &lt;code&gt;&lt;a href=&quot;numeric#v:log&quot;&gt;log&lt;/a&gt; (1 + x)&lt;/code&gt; が、少量の（絶対）値のより正確な結果を提供 &lt;code&gt;x&lt;/code&gt; 可能であれば。</target>
        </trans-unit>
        <trans-unit id="a6b46197cb9efd3cbb22ddf1716cbb034ebe2c34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;numeric#v:log1pexp&quot;&gt;log1pexp&lt;/a&gt; x&lt;/code&gt; computes &lt;code&gt;&lt;a href=&quot;numeric#v:log&quot;&gt;log&lt;/a&gt; (1 + &lt;a href=&quot;numeric#v:exp&quot;&gt;exp&lt;/a&gt; x)&lt;/code&gt;, but provides more precise results if possible.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;numeric#v:log1pexp&quot;&gt;log1pexp&lt;/a&gt; x&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;numeric#v:log&quot;&gt;log&lt;/a&gt; (1 + &lt;a href=&quot;numeric#v:exp&quot;&gt;exp&lt;/a&gt; x)&lt;/code&gt; 計算しますが、可能であればより正確な結果を提供します。</target>
        </trans-unit>
        <trans-unit id="6424498da93c2983f328c66db54a22f98306bf63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; instance:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; インスタンス：</target>
        </trans-unit>
        <trans-unit id="0c1a4639ba97766eb5656c3df06ea8d4a0f0d9b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; instance:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; インスタンス：</target>
        </trans-unit>
        <trans-unit id="b9bd3b22141c968eee8ca6b786e08d4e759efff8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; is a monad, so &lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; actions can be combined using either the do-notation or the &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; operations from the &lt;code&gt;&lt;a href=&quot;prelude#v:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; はモナドであるため、 &lt;code&gt;&lt;a href=&quot;prelude#v:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; クラスのdo表記または &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; 操作を使用して、 &lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; アクションを組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="e32ea5f5b152080a9f34fd24ca98e1512f639bbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; types, including &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; を含む整数型</target>
        </trans-unit>
        <trans-unit id="ea52587d7432250da9aeb55e6e11c439a3603740" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; types</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; タイプ</target>
        </trans-unit>
        <trans-unit id="39e34dbd740d7bf97972384f8bcece1a0e39559e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the argument is an IEEE &quot;not-a-number&quot; (NaN) value</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 引数がIEEEの「非数」（NaN）値の場合は真</target>
        </trans-unit>
        <trans-unit id="180bb4b0bf7a783f528ceb51480a97a340dccdf2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the argument is an IEEE floating point number</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 引数がIEEE浮動小数点数であれば真</target>
        </trans-unit>
        <trans-unit id="c29dfef2c890e37ba43e2c88e4bce45d2762f25c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the argument is an IEEE infinity or negative infinity</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 引数がIEEE無限大または負の無限大の場合は真</target>
        </trans-unit>
        <trans-unit id="30bab898a810255506ac0b849f91dc439e83157a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the argument is an IEEE negative zero</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 引数がIEEE負のゼロの場合は真</target>
        </trans-unit>
        <trans-unit id="e885ccee58dc4e7f6edcffcd266655296a0da640" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the argument is too small to be represented in normalized format</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 引数が小さすぎて正規化形式で表現できない場合は true</target>
        </trans-unit>
        <trans-unit id="3ea9bb036ffe299726473f5b83da12eaf2ce2ab9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:abs&quot;&gt;abs&lt;/a&gt; (&lt;a href=&quot;data-ratio#v:numerator&quot;&gt;numerator&lt;/a&gt; y) &amp;lt;= &lt;a href=&quot;prelude#v:abs&quot;&gt;abs&lt;/a&gt; (&lt;a href=&quot;data-ratio#v:numerator&quot;&gt;numerator&lt;/a&gt; y')&lt;/code&gt;, and</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:abs&quot;&gt;abs&lt;/a&gt; (&lt;a href=&quot;data-ratio#v:numerator&quot;&gt;numerator&lt;/a&gt; y) &amp;lt;= &lt;a href=&quot;prelude#v:abs&quot;&gt;abs&lt;/a&gt; (&lt;a href=&quot;data-ratio#v:numerator&quot;&gt;numerator&lt;/a&gt; y')&lt;/code&gt; 、および</target>
        </trans-unit>
        <trans-unit id="fceec3ddb765a69aa6c91cd7fc9f35374de2ae71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:and&quot;&gt;and&lt;/a&gt;&lt;/code&gt; returns the conjunction of a container of Bools. For the result to be &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, the container must be finite; &lt;code&gt;&lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, however, results from a &lt;code&gt;&lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; value finitely far from the left end.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:and&quot;&gt;and&lt;/a&gt;&lt;/code&gt; Boolsのコンテナの積を返します。結果が &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; になるには、コンテナが有限でなければなりません。 &lt;code&gt;&lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 、しかし、結果から &lt;code&gt;&lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 有限遠い左端からの値。</target>
        </trans-unit>
        <trans-unit id="0f9c668715480a625fd9af9eb80eeeb206edb78b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:asTypeOf&quot;&gt;asTypeOf&lt;/a&gt;&lt;/code&gt; is a type-restricted version of &lt;code&gt;&lt;a href=&quot;prelude#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;. It is usually used as an infix operator, and its typing forces its first argument (which is usually overloaded) to have the same type as the second.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:asTypeOf&quot;&gt;asTypeOf&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;prelude#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; のタイプ制限バージョンです。これは通常、中置演算子として使用され、その型付けにより、最初の引数（通常はオーバーロードされます）が2番目の引数と同じ型になります。</target>
        </trans-unit>
        <trans-unit id="b0d89710515219cec11872fcfa257cbf3a150eab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns a tuple where first element is longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that &lt;em&gt;do not satisfy&lt;/em&gt;&lt;code&gt;p&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; 述語 &lt;code&gt;p&lt;/code&gt; とリスト &lt;code&gt;xs&lt;/code&gt; に適用される breakは、最初の要素が &lt;code&gt;p&lt;/code&gt; を&lt;em&gt;満たさない&lt;/em&gt;要素の &lt;code&gt;xs&lt;/code&gt; の最長の接頭辞（おそらく空）であり、2番目の要素がリストの残りであるタプルを返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="65677c9d5d8e6310793e1ab8a36f6af8c40c3791" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;prelude#v:span&quot;&gt;span&lt;/a&gt; (&lt;a href=&quot;prelude#v:not&quot;&gt;not&lt;/a&gt; . p)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;prelude#v:span&quot;&gt;span&lt;/a&gt; (&lt;a href=&quot;prelude#v:not&quot;&gt;not&lt;/a&gt; . p)&lt;/code&gt; 。pではない）と同じです。</target>
        </trans-unit>
        <trans-unit id="be66c280ca45c2cf1c5ce3828088758d49c7d3ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:ceiling&quot;&gt;ceiling&lt;/a&gt; x&lt;/code&gt; returns the least integer not less than &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:ceiling&quot;&gt;ceiling&lt;/a&gt; x&lt;/code&gt; より小さくない最小の整数を返し &lt;code&gt;x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="35530e911664fd9b3c43e39777246bc6aad72b52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:curry&quot;&gt;curry&lt;/a&gt;&lt;/code&gt; converts an uncurried function to a curried function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:curry&quot;&gt;curry&lt;/a&gt;&lt;/code&gt; は、カリー化されていない関数をカリー化された関数に変換します。</target>
        </trans-unit>
        <trans-unit id="2d8691393163701b125cd36603fd414089952c93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt; ties a finite list into a circular one, or equivalently, the infinite repetition of the original list. It is the identity on infinite lists.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt; は、有限リストを循環リスト、または同等に、元のリストの無限反復に結び付けます。無限リストのアイデンティティです。</target>
        </trans-unit>
        <trans-unit id="1c942b07bb10eb1145ca600107edf3100ca16ca1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns the suffix of &lt;code&gt;xs&lt;/code&gt; after the first &lt;code&gt;n&lt;/code&gt; elements, or &lt;code&gt;[]&lt;/code&gt; if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; は、最初の &lt;code&gt;n&lt;/code&gt; 要素の後に &lt;code&gt;xs&lt;/code&gt; の接尾辞を返します &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;長さ&lt;/a&gt;xsの場合は &lt;code&gt;[]&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e37417a71dbc3a4e0a039f0004373fc1c05087a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns the suffix of &lt;code&gt;xs&lt;/code&gt; after the first &lt;code&gt;n&lt;/code&gt; elements, or &lt;code&gt;[]&lt;/code&gt; if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; は、最初の &lt;code&gt;n&lt;/code&gt; 要素の後の &lt;code&gt;xs&lt;/code&gt; のサフィックスを返します &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xsの場合は &lt;code&gt;[]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="81191f7a025adc4d885776e0188b16a7d7b934aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; returns the suffix remaining after &lt;code&gt;&lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p xs&lt;/code&gt; 後に残った接尾辞を返し &lt;code&gt;&lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;p xs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="538ae1fd53b40794542f19501354d2d6fa15020e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; returns the suffix remaining after &lt;code&gt;&lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p xs&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p xs&lt;/code&gt; の後に残っているサフィックスを返します。</target>
        </trans-unit>
        <trans-unit id="b506e84360977987754db1c0f4ccade20a2e0af4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:encodeFloat&quot;&gt;encodeFloat&lt;/a&gt;&lt;/code&gt; performs the inverse of &lt;code&gt;&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt;&lt;/code&gt; in the sense that for finite &lt;code&gt;x&lt;/code&gt; with the exception of &lt;code&gt;-0.0&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#v:uncurry&quot;&gt;uncurry&lt;/a&gt; &lt;a href=&quot;prelude#v:encodeFloat&quot;&gt;encodeFloat&lt;/a&gt; (&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt; x) = x&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;prelude#v:encodeFloat&quot;&gt;encodeFloat&lt;/a&gt; m n&lt;/code&gt; is one of the two closest representable floating-point numbers to &lt;code&gt;m*b^^n&lt;/code&gt; (or &lt;code&gt;&amp;plusmn;Infinity&lt;/code&gt; if overflow occurs); usually the closer, but if &lt;code&gt;m&lt;/code&gt; contains too many bits, the result may be rounded in the wrong direction.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:encodeFloat&quot;&gt;encodeFloat&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;-0.0&lt;/code&gt; を除いて有限 &lt;code&gt;x&lt;/code&gt; の場合、 &lt;code&gt;&lt;a href=&quot;prelude#v:uncurry&quot;&gt;uncurry&lt;/a&gt; &lt;a href=&quot;prelude#v:encodeFloat&quot;&gt;encodeFloat&lt;/a&gt; (&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt; x) = x&lt;/code&gt; &lt;a href=&quot;prelude#v:encodeFloat&quot;&gt;encodeFloat&lt;/a&gt;（&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt; x）= xであるという意味で、 &lt;code&gt;&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt;&lt;/code&gt; の逆を実行します。 &lt;code&gt;&lt;a href=&quot;prelude#v:encodeFloat&quot;&gt;encodeFloat&lt;/a&gt; m n&lt;/code&gt; mnは、 &lt;code&gt;m*b^^n&lt;/code&gt; （またはオーバーフローが発生した場合は &lt;code&gt;&amp;plusmn;Infinity&lt;/code&gt; ）に最も近い2つの表現可能な浮動小数点数の1つです。通常は近い方ですが、 &lt;code&gt;m&lt;/code&gt; に含まれるビットが多すぎると、結果が間違った方向に丸められる可能性があります。</target>
        </trans-unit>
        <trans-unit id="7e005e5bf5443bae1200923a51681b7678dea36c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:enumFrom&quot;&gt;enumFrom&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:enumFromThen&quot;&gt;enumFromThen&lt;/a&gt;&lt;/code&gt; should be defined with an implicit bound, thus:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:enumFrom&quot;&gt;enumFrom&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;prelude#v:enumFromThen&quot;&gt;enumFromThen&lt;/a&gt;&lt;/code&gt; は、暗黙の境界で定義する必要があります。したがって、</target>
        </trans-unit>
        <trans-unit id="5f76a96d436885ad0fc422b0d0033bcce4f84b92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; stops execution and displays an error message.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; は実行を停止し、エラーメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="99cd8d4c12d9480115246931f5727c25ecc68890" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt;&lt;/code&gt; corresponds to the second component of &lt;code&gt;&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt; 0 = 0&lt;/code&gt; and for finite nonzero &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt; x = snd (&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt; x) + &lt;a href=&quot;prelude#v:floatDigits&quot;&gt;floatDigits&lt;/a&gt; x&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; is a finite floating-point number, it is equal in value to &lt;code&gt;&lt;a href=&quot;prelude#v:significand&quot;&gt;significand&lt;/a&gt; x * b ^^ &lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt; x&lt;/code&gt;, where &lt;code&gt;b&lt;/code&gt; is the floating-point radix. The behaviour is unspecified on infinite or &lt;code&gt;NaN&lt;/code&gt; values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt;&lt;/code&gt; の2番目のコンポーネントに対応します。 &lt;code&gt;&lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt; 0 = 0&lt;/code&gt; で、ゼロ以外の有限 &lt;code&gt;x&lt;/code&gt; の場合、 &lt;code&gt;&lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt; x = snd (&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt; x) + &lt;a href=&quot;prelude#v:floatDigits&quot;&gt;floatDigits&lt;/a&gt; x&lt;/code&gt; 。場合 &lt;code&gt;x&lt;/code&gt; 有限の浮動小数点数であり、それはの値に等しい &lt;code&gt;&lt;a href=&quot;prelude#v:significand&quot;&gt;significand&lt;/a&gt; x * b ^^ &lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt; x&lt;/code&gt; 、 &lt;code&gt;b&lt;/code&gt; は浮動小数点基数です。動作は、無限または &lt;code&gt;NaN&lt;/code&gt; 値では指定されていません。</target>
        </trans-unit>
        <trans-unit id="9eb0d52360c67c8eed2b8ebe7918d0021bfca7cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:flip&quot;&gt;flip&lt;/a&gt; f&lt;/code&gt; takes its (first) two arguments in the reverse order of &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:flip&quot;&gt;flip&lt;/a&gt; f&lt;/code&gt; は、その（最初の）2つの引数を &lt;code&gt;f&lt;/code&gt; の逆の順序で受け取ります。</target>
        </trans-unit>
        <trans-unit id="74582fe2c1b8b6147f60f7d9b00babc28681d6af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:floor&quot;&gt;floor&lt;/a&gt; x&lt;/code&gt; returns the greatest integer not greater than &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:floor&quot;&gt;floor&lt;/a&gt; x&lt;/code&gt; より大きくない最大の整数を返し &lt;code&gt;x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="41ab1bc2943c0be811d10077bb62e6127ff2dd29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:toEnum&quot;&gt;toEnum&lt;/a&gt;&lt;/code&gt; should give a runtime error if the result value is not representable in the result type. For example, &lt;code&gt;&lt;a href=&quot;prelude#v:toEnum&quot;&gt;toEnum&lt;/a&gt; 7 :: &lt;a href=&quot;prelude#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; is an error.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; 結果値が結果タイプで表現できない場合、 fromEnumおよび &lt;code&gt;&lt;a href=&quot;prelude#v:toEnum&quot;&gt;toEnum&lt;/a&gt;&lt;/code&gt; は実行時エラーを生成するはずです。たとえば、 &lt;code&gt;&lt;a href=&quot;prelude#v:toEnum&quot;&gt;toEnum&lt;/a&gt; 7 :: &lt;a href=&quot;prelude#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; はエラーです。</target>
        </trans-unit>
        <trans-unit id="4ce643c41c2db2cd82ad44ae59c126bfc3d20a14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; x y&lt;/code&gt; is the non-negative factor of both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; of which every common factor of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; is also a factor; for example &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; 4 2 = 2&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; (-4) 6 = 2&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 4&lt;/code&gt; = &lt;code&gt;4&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 0&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;. (That is, the common divisor that is &quot;greatest&quot; in the divisibility preordering.)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; x y&lt;/code&gt; 、両方の非マイナス要因であり &lt;code&gt;x&lt;/code&gt; 及び &lt;code&gt;y&lt;/code&gt; すべての共通の要因うち &lt;code&gt;x&lt;/code&gt; 及び &lt;code&gt;y&lt;/code&gt; また要因です。たとえば、 &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; 4 2 = 2&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; (-4) 6 = 2&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 4&lt;/code&gt; = &lt;code&gt;4&lt;/code&gt; です。 &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 0&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt; 。（つまり、分割可能プレオーダーで「最大」である共通除数です。）</target>
        </trans-unit>
        <trans-unit id="5cca57c5550be7ce21679621b488ce401911a226" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f x&lt;/code&gt; returns an infinite list of repeated applications of &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt; &lt;code&gt;f x&lt;/code&gt; の繰り返しのアプリケーションの無限のリストを返し &lt;code&gt;f&lt;/code&gt; に &lt;code&gt;x&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="9a579489e99e31a99cb9989088525deb9b63c304" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:lcm&quot;&gt;lcm&lt;/a&gt; x y&lt;/code&gt; is the smallest positive integer that both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; divide.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:lcm&quot;&gt;lcm&lt;/a&gt; x y&lt;/code&gt; は、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の両方が割る正の最小整数です。</target>
        </trans-unit>
        <trans-unit id="ad1e9d56d03a39d084962d1040fb10f5830e566d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt; breaks a string up into a list of strings at newline characters. The resulting strings do not contain newlines.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt; は、文字列を改行文字で文字列のリストに分割します。結果の文字列には改行は含まれません。</target>
        </trans-unit>
        <trans-unit id="232e62d33d5415303a6ebfd56d333b7bead3bd0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:mapM&quot;&gt;mapM&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;prelude#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;prelude#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt;, and the following example shows how &lt;code&gt;&lt;a href=&quot;prelude#v:mapM&quot;&gt;mapM&lt;/a&gt;&lt;/code&gt; can apply an &lt;code&gt;IO&lt;/code&gt; action to a &lt;code&gt;List&lt;/code&gt; to produce a structured result.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:mapM&quot;&gt;mapM&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;prelude#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; です。次の例は、 &lt;code&gt;&lt;a href=&quot;prelude#v:mapM&quot;&gt;mapM&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;IO&lt;/code&gt; アクションを &lt;code&gt;List&lt;/code&gt; に適用して構造化された結果を生成する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="686c9ee332ea9d96b02a9a2a17983e52eb2c92ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:mapM_&quot;&gt;mapM_&lt;/a&gt;&lt;/code&gt; is just like &lt;code&gt;&lt;a href=&quot;data-foldable#v:traverse_&quot;&gt;traverse_&lt;/a&gt;&lt;/code&gt;, but specialised to monadic actions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:mapM_&quot;&gt;mapM_&lt;/a&gt;&lt;/code&gt; はtraverse_と同じです &lt;code&gt;&lt;a href=&quot;data-foldable#v:traverse_&quot;&gt;traverse_&lt;/a&gt;&lt;/code&gt; 、モナドアクションに特化しています。</target>
        </trans-unit>
        <trans-unit id="8fafdea8effdc5eae5a1b9a120a5f9860943ebba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:mempty&quot;&gt;mempty&lt;/a&gt; @(Op a b)&lt;/code&gt; without newtypes is &lt;code&gt;mempty @(b-&amp;gt;a)&lt;/code&gt; = &lt;code&gt;_ -&amp;gt; mempty&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:mempty&quot;&gt;mempty&lt;/a&gt; @(Op a b)&lt;/code&gt; は &lt;code&gt;mempty @(b-&amp;gt;a)&lt;/code&gt; = &lt;code&gt;_ -&amp;gt; mempty&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2415c2b21b2b0f10387ba3ba19026a95244480cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; on comparisons always returns &lt;code&gt;EQ&lt;/code&gt;. Without newtypes this equals &lt;code&gt;&lt;a href=&quot;prelude#v:pure&quot;&gt;pure&lt;/a&gt; (&lt;a href=&quot;prelude#v:pure&quot;&gt;pure&lt;/a&gt; EQ)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; 比較で空の場合は常に &lt;code&gt;EQ&lt;/code&gt; を返します。ニュータイプがない場合、これは &lt;code&gt;&lt;a href=&quot;prelude#v:pure&quot;&gt;pure&lt;/a&gt; (&lt;a href=&quot;prelude#v:pure&quot;&gt;pure&lt;/a&gt; EQ)&lt;/code&gt; 等しくなります。</target>
        </trans-unit>
        <trans-unit id="cb2ba98d8ed5e6681f9cf69dd3a8140c14e146ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; on equivalences always returns &lt;code&gt;True&lt;/code&gt;. Without newtypes this equals &lt;code&gt;&lt;a href=&quot;prelude#v:pure&quot;&gt;pure&lt;/a&gt; (&lt;a href=&quot;prelude#v:pure&quot;&gt;pure&lt;/a&gt; True)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; 同等性のmemptyは、常に &lt;code&gt;True&lt;/code&gt; を返します。ニュータイプがない場合、これは &lt;code&gt;&lt;a href=&quot;prelude#v:pure&quot;&gt;pure&lt;/a&gt; (&lt;a href=&quot;prelude#v:pure&quot;&gt;pure&lt;/a&gt; True)&lt;/code&gt; 等しくなります。</target>
        </trans-unit>
        <trans-unit id="c24631d151c910fb26d6af214d0395577a139547" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; on predicates always returns &lt;code&gt;True&lt;/code&gt;. Without newtypes this equals &lt;code&gt;&lt;a href=&quot;prelude#v:pure&quot;&gt;pure&lt;/a&gt; True&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; 述語のmemptyは常に &lt;code&gt;True&lt;/code&gt; を返します。ニュータイプがなければ、これは &lt;code&gt;&lt;a href=&quot;prelude#v:pure&quot;&gt;pure&lt;/a&gt; True&lt;/code&gt; 等しくなります。</target>
        </trans-unit>
        <trans-unit id="90c3b95d95e8a8b18102086e126bd104cf69ecf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; is the negation of &lt;code&gt;&lt;a href=&quot;prelude#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;prelude#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; の否定です。</target>
        </trans-unit>
        <trans-unit id="25f89a20e7cd5ede8d2347c3bbd6c599e0f4a3fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:null&quot;&gt;null&lt;/a&gt;&lt;/code&gt; is expected to terminate even for infinite structures. The default implementation terminates provided the structure is bounded on the left (there is a left-most element).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:null&quot;&gt;null&lt;/a&gt;&lt;/code&gt; は、無限の構造でも終了することが期待されます。デフォルトの実装は、構造が左側に制限されている場合に終了します（左端の要素があります）。</target>
        </trans-unit>
        <trans-unit id="4b28da115bfd5d00bf1b920bb984e01a5fc3c009" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:or&quot;&gt;or&lt;/a&gt;&lt;/code&gt; returns the disjunction of a container of Bools. For the result to be &lt;code&gt;&lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, the container must be finite; &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, however, results from a &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; value finitely far from the left end.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:or&quot;&gt;or&lt;/a&gt;&lt;/code&gt; 、ブール値のコンテナの選言を返します。結果が &lt;code&gt;&lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; になるには、コンテナが有限でなければなりません。 &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 、しかし、結果から &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 有限遠い左端からの値。</target>
        </trans-unit>
        <trans-unit id="e4fd83f3d011b16b6dc51c43a910c7e9a78e1cd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:otherwise&quot;&gt;otherwise&lt;/a&gt;&lt;/code&gt; is defined as the value &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;. It helps to make guards more readable. eg.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:otherwise&quot;&gt;otherwise&lt;/a&gt;&lt;/code&gt; は、値 &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; として定義されます。ガードを読みやすくするのに役立ちます。例えば。</target>
        </trans-unit>
        <trans-unit id="ea0cc360ae261aac376aac41131de9104e521a59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt; p&lt;/code&gt; parses what &lt;code&gt;p&lt;/code&gt; parses, but optionally surrounded with parentheses.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt; p&lt;/code&gt; パース何 &lt;code&gt;p&lt;/code&gt; パースが、必要に応じて括弧で囲まれています。</target>
        </trans-unit>
        <trans-unit id="6e7b88af6312a71be1e6cc5991346df63e87cce7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt; p&lt;/code&gt; parses what &lt;code&gt;p&lt;/code&gt; parses, but surrounded with parentheses.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt; p&lt;/code&gt; パース何 &lt;code&gt;p&lt;/code&gt; パースが、括弧で囲まれています。</target>
        </trans-unit>
        <trans-unit id="95cc0f4a75c44098555587a9b632e29fb9c47ba9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:repeat&quot;&gt;repeat&lt;/a&gt;&lt;/code&gt;&lt;code&gt;x&lt;/code&gt; is an infinite list, with &lt;code&gt;x&lt;/code&gt; the value of every element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:repeat&quot;&gt;repeat&lt;/a&gt;&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; は無限リストであり、 &lt;code&gt;x&lt;/code&gt; はすべての要素の値です。</target>
        </trans-unit>
        <trans-unit id="14ec4a6aab6c31f279c50924ed8fe63b61c8afc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n x&lt;/code&gt; is a list of length &lt;code&gt;n&lt;/code&gt; with &lt;code&gt;x&lt;/code&gt; the value of every element. It is an instance of the more general &lt;code&gt;&lt;a href=&quot;data-list#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt;, in which &lt;code&gt;n&lt;/code&gt; may be of any integral type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n x&lt;/code&gt; は長さ &lt;code&gt;n&lt;/code&gt; のリストで、 &lt;code&gt;x&lt;/code&gt; はすべての要素の値です。これは、より一般的なのインスタンスである &lt;code&gt;&lt;a href=&quot;data-list#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt; 、ここで &lt;code&gt;n&lt;/code&gt; は任意の整数型であってもよいです。</target>
        </trans-unit>
        <trans-unit id="eb0f5651974cd39db6372713ad54f0e127cd892e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt;&lt;code&gt;xs&lt;/code&gt; returns the elements of &lt;code&gt;xs&lt;/code&gt; in reverse order. &lt;code&gt;xs&lt;/code&gt; must be finite.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt; &lt;code&gt;xs&lt;/code&gt; の要素を返し &lt;code&gt;xs&lt;/code&gt; 逆の順序で。 &lt;code&gt;xs&lt;/code&gt; は有限でなければなりません。</target>
        </trans-unit>
        <trans-unit id="8866f3369aabdd70b6cea2f8ac67cc5354993ba5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:round&quot;&gt;round&lt;/a&gt; x&lt;/code&gt; returns the nearest integer to &lt;code&gt;x&lt;/code&gt;; the even integer if &lt;code&gt;x&lt;/code&gt; is equidistant between two integers</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:round&quot;&gt;round&lt;/a&gt; x&lt;/code&gt; に最も近い整数を返す &lt;code&gt;x&lt;/code&gt; 。 &lt;code&gt;x&lt;/code&gt; が2つの整数の間で等距離にある場合の偶数の整数</target>
        </trans-unit>
        <trans-unit id="5a283c6757436da16fa63be36f5fdec8f3342640" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:sequence_&quot;&gt;sequence_&lt;/a&gt;&lt;/code&gt; is just like &lt;code&gt;&lt;a href=&quot;data-foldable#v:sequenceA_&quot;&gt;sequenceA_&lt;/a&gt;&lt;/code&gt;, but specialised to monadic actions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:sequence_&quot;&gt;sequence_&lt;/a&gt;&lt;/code&gt; のはただのようなものです &lt;code&gt;&lt;a href=&quot;data-foldable#v:sequenceA_&quot;&gt;sequenceA_&lt;/a&gt;&lt;/code&gt; が、モナドアクションに特化しました。</target>
        </trans-unit>
        <trans-unit id="8197db2f8f42c33ac929501c115f060c4003dc88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:show&quot;&gt;show&lt;/a&gt; (Leaf 1 :^: Leaf 2 :^: Leaf 3)&lt;/code&gt; produces the string &lt;code&gt;&quot;Leaf 1 :^: (Leaf 2 :^: Leaf 3)&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:show&quot;&gt;show&lt;/a&gt; (Leaf 1 :^: Leaf 2 :^: Leaf 3)&lt;/code&gt; は、文字列 &lt;code&gt;&quot;Leaf 1 :^: (Leaf 2 :^: Leaf 3)&quot;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="2ff5551274655dfcc8b4e4f810e9c6303ce24ce9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; should satisfy the law</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; は法律を満たしている必要があります</target>
        </trans-unit>
        <trans-unit id="cd876887b676862f1db8746de58d3818bafe9192" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns a tuple where first element is longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt; 述語 &lt;code&gt;p&lt;/code&gt; とリスト &lt;code&gt;xs&lt;/code&gt; に適用される spanは、最初の要素が &lt;code&gt;p&lt;/code&gt; を満たす要素の &lt;code&gt;xs&lt;/code&gt; の最長の接頭辞（おそらく空）であり、2番目の要素がリストの残りであるタプルを返します。</target>
        </trans-unit>
        <trans-unit id="9ef69a25e6b580461c6edf12e74a04f68967a80a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; is equivalent to &lt;code&gt;(&lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs, &lt;a href=&quot;prelude#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p xs&lt;/code&gt; は &lt;code&gt;(&lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs, &lt;a href=&quot;prelude#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs)&lt;/code&gt; &lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs、&lt;a href=&quot;prelude#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs）と同等です。</target>
        </trans-unit>
        <trans-unit id="4a9986add984ef8935e2a10368b30a5809dab25a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns a tuple where first element is &lt;code&gt;xs&lt;/code&gt; prefix of length &lt;code&gt;n&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; は、最初の要素が長さ &lt;code&gt;n&lt;/code&gt; の &lt;code&gt;xs&lt;/code&gt; プレフィックスであり、2番目の要素がリストの残りであるタプルを返します。</target>
        </trans-unit>
        <trans-unit id="ea1c0f6b301075f9dbe662e9e46342b29c6d0274" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a list &lt;code&gt;xs&lt;/code&gt;, returns the prefix of &lt;code&gt;xs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;xs&lt;/code&gt; itself if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; 、リストに適用される &lt;code&gt;xs&lt;/code&gt; 、の接頭辞戻り &lt;code&gt;xs&lt;/code&gt; 長さを &lt;code&gt;n&lt;/code&gt; 、または &lt;code&gt;xs&lt;/code&gt; 場合自体を &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="85f7535d630138e7e51f7c3606a32ee218bfc27c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a list &lt;code&gt;xs&lt;/code&gt;, returns the prefix of &lt;code&gt;xs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;xs&lt;/code&gt; itself if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; は、リストに適用される &lt;code&gt;xs&lt;/code&gt; 、の接頭辞を返し &lt;code&gt;xs&lt;/code&gt; 長の &lt;code&gt;n&lt;/code&gt; 、または &lt;code&gt;xs&lt;/code&gt; 自体であれば &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0bd1c7ad23c0b8c2b17c78a6689cb7fd6af987ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns the longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt; 述語に適用さ、 &lt;code&gt;p&lt;/code&gt; およびリスト &lt;code&gt;xs&lt;/code&gt; 、最長プレフィックス（空）を返し &lt;code&gt;xs&lt;/code&gt; 満たすのその要素の &lt;code&gt;p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e32f5f2062f7bfd5341a8a4f847eef925def4c9e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns the longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt; は、述部に適用される &lt;code&gt;p&lt;/code&gt; 及びリスト &lt;code&gt;xs&lt;/code&gt; 、最長プレフィックス（空）を返し &lt;code&gt;xs&lt;/code&gt; 満たすのその要素の &lt;code&gt;p&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c565b5e43a2f7011ee17ba13f5a371da254c5bd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:truncate&quot;&gt;truncate&lt;/a&gt; x&lt;/code&gt; returns the integer nearest &lt;code&gt;x&lt;/code&gt; between zero and &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:truncate&quot;&gt;truncate&lt;/a&gt; x&lt;/code&gt; 、最も近い整数値を返し &lt;code&gt;x&lt;/code&gt; がゼロとの間で &lt;code&gt;x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6833bf4f6e77728c935667d52aa1f8e4d0e22592" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:uncurry&quot;&gt;uncurry&lt;/a&gt;&lt;/code&gt; converts a curried function to a function on pairs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:uncurry&quot;&gt;uncurry&lt;/a&gt;&lt;/code&gt; は、カリー化された関数をペアの関数に変換します。</target>
        </trans-unit>
        <trans-unit id="82b39b05584d753464e0a137e37b0275efe3cd36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; is an inverse operation to &lt;code&gt;&lt;a href=&quot;prelude#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt;. It joins lines, after appending a terminating newline to each.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; はとは逆の動作である &lt;code&gt;&lt;a href=&quot;prelude#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt; 。行末に改行を追加した後、行を結合します。</target>
        </trans-unit>
        <trans-unit id="4c0909cfb4024e044a781c8cc3e577608acc465b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:until&quot;&gt;until&lt;/a&gt; p f&lt;/code&gt; yields the result of applying &lt;code&gt;f&lt;/code&gt; until &lt;code&gt;p&lt;/code&gt; holds.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:until&quot;&gt;until&lt;/a&gt; p f&lt;/code&gt; 適用した結果得 &lt;code&gt;f&lt;/code&gt; するまで、 &lt;code&gt;p&lt;/code&gt; が成り立つが。</target>
        </trans-unit>
        <trans-unit id="8bd1257a93569ed215b8f5b00ca0ecbd2be3bd4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; is an inverse operation to &lt;code&gt;&lt;a href=&quot;prelude#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt;. It joins words with separating spaces.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;prelude#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt; の逆演算です。単語をスペースで区切って結合します。</target>
        </trans-unit>
        <trans-unit id="01bef010073b5e20e4dd758bd14bfeda1aaccea8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; transforms a list of pairs into a list of first components and a list of second components.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; は、ペアのリストを最初のコンポーネントのリストと2番目のコンポーネントのリストに変換します。</target>
        </trans-unit>
        <trans-unit id="c52b4c6fc29dbc556d93ce39796f1355a44b3669" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt; breaks a string up into a list of words, which were delimited by white space.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt; は、文字列を空白で区切られた単語のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="9e4c37f6f58036a01b451e7d137537e6c4533a7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; はリストの融合が可能ですが、最初のリスト引数とその結果のリストに制限されています。</target>
        </trans-unit>
        <trans-unit id="5f0622371527d648d60c30d9849cadcf847e4eb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; is right-lazy:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; は右遅延です：</target>
        </trans-unit>
        <trans-unit id="a7a23fc01912013cc00c836f8604380b992b0b40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:zip3&quot;&gt;zip3&lt;/a&gt;&lt;/code&gt; takes three lists and returns a list of triples, analogous to &lt;code&gt;&lt;a href=&quot;prelude#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:zip3&quot;&gt;zip3&lt;/a&gt;&lt;/code&gt; は3つのリストを取り、 &lt;code&gt;&lt;a href=&quot;prelude#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; に類似したトリプルのリストを返します。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="5690d97420c567a27377bcacc8f8b46ef04bfcdb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; はリスト融合が可能ですが、最初のリスト引数とその結果のリストに制限されています。</target>
        </trans-unit>
        <trans-unit id="1fa4a1a38d950808687c491ece1044d0ba291c72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; is right-lazy:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; はright-lazyです。</target>
        </trans-unit>
        <trans-unit id="3cfd4533290c5ef0e949ada807c3772d5eebbee4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-console-getopt#v:getOpt&quot;&gt;getOpt&lt;/a&gt;&lt;/code&gt; returns a triple consisting of the option arguments, a list of non-options, and a list of error messages.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-console-getopt#v:getOpt&quot;&gt;getOpt&lt;/a&gt;&lt;/code&gt; は、オプション引数、非オプションのリスト、およびエラーメッセージのリストで構成されるトリプルを返します。</target>
        </trans-unit>
        <trans-unit id="428066ca06ed596ddd333bde5016b887aba49d76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-console-haskeline#t:Prefs&quot;&gt;Prefs&lt;/a&gt;&lt;/code&gt; allow the user to customize the terminal-style line-editing interface. They are read by default from &lt;code&gt;~/.haskeline&lt;/code&gt;; to override that behavior, use &lt;code&gt;&lt;a href=&quot;system-console-haskeline#v:readPrefs&quot;&gt;readPrefs&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;runInputTWithPrefs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-console-haskeline#t:Prefs&quot;&gt;Prefs&lt;/a&gt;&lt;/code&gt; により、ユーザーは端末スタイルの行編集インターフェースをカスタマイズできます。それらはデフォルトで &lt;code&gt;~/.haskeline&lt;/code&gt; から読み込まれます。その動作をオーバーライドするには、 &lt;code&gt;&lt;a href=&quot;system-console-haskeline#v:readPrefs&quot;&gt;readPrefs&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;runInputTWithPrefs&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="4f6d385a35e1b7babd43615a60f7444f80af2444" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:createDirectory&quot;&gt;createDirectory&lt;/a&gt; dir&lt;/code&gt; creates a new directory &lt;code&gt;dir&lt;/code&gt; which is initially empty, or as near to empty as the operating system allows.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:createDirectory&quot;&gt;createDirectory&lt;/a&gt; dir&lt;/code&gt; は、最初は空、またはオペレーティングシステムが許可する限り空に近い新しいディレクトリ &lt;code&gt;dir&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="705ef22f70043a77d804ac1a1f20e78c6f911351" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:createDirectoryIfMissing&quot;&gt;createDirectoryIfMissing&lt;/a&gt; parents dir&lt;/code&gt; creates a new directory &lt;code&gt;dir&lt;/code&gt; if it doesn't exist. If the first argument is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; the function will also create all parent directories if they are missing.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:createDirectoryIfMissing&quot;&gt;createDirectoryIfMissing&lt;/a&gt; parents dir&lt;/code&gt; 新しいディレクトリを作成 &lt;code&gt;dir&lt;/code&gt; 、それが存在しない場合に。最初の引数が &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; の場合、欠落している場合、関数はすべての親ディレクトリも作成します。</target>
        </trans-unit>
        <trans-unit id="5dd8d9e061e9438354e5ec94c30200556169080d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:createDirectoryIfMissing&quot;&gt;createDirectoryIfMissing&lt;/a&gt; parents dir&lt;/code&gt; creates a new directory &lt;code&gt;dir&lt;/code&gt; if it doesn't exist. If the first argument is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; the function will also create all parent directories if they are missing.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:createDirectoryIfMissing&quot;&gt;createDirectoryIfMissing&lt;/a&gt; parents dir&lt;/code&gt; 新しいディレクトリを作成 &lt;code&gt;dir&lt;/code&gt; 、それが存在しない場合に。最初の引数が &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; の場合、関数はすべての親ディレクトリが欠落している場合にもそれらを作成します。</target>
        </trans-unit>
        <trans-unit id="0344064d2ee0360c2b38c6b1cd9dc04bf3040903" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:createDirectoryIfMissing&quot;&gt;createDirectoryIfMissing&lt;/a&gt; parents dir&lt;/code&gt; creates a new directory &lt;code&gt;dir&lt;/code&gt; if it doesn't exist. If the first argument is &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; the function will also create all parent directories if they are missing.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:createDirectoryIfMissing&quot;&gt;createDirectoryIfMissing&lt;/a&gt; parents dir&lt;/code&gt; 新しいディレクトリを作成 &lt;code&gt;dir&lt;/code&gt; 、それが存在しない場合に。最初の引数が &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; の場合、関数はすべての親ディレクトリが欠落している場合にもそれらを作成します。</target>
        </trans-unit>
        <trans-unit id="3f166a33c1b1210e5ef26e6bcfe69d6be0bbcfca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:listDirectory&quot;&gt;listDirectory&lt;/a&gt; dir&lt;/code&gt; returns a list of &lt;em&gt;all&lt;/em&gt; entries in &lt;em&gt;dir&lt;/em&gt; without the special entries (&lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:listDirectory&quot;&gt;listDirectory&lt;/a&gt; dir&lt;/code&gt; は、特別なエントリ（ &lt;code&gt;.&lt;/code&gt; および &lt;code&gt;..&lt;/code&gt; ）なしで&lt;em&gt; dir&lt;/em&gt;内の&lt;em&gt;すべての&lt;/em&gt;エントリのリストを返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1f17bbcb6b2bedb9848c973e471df1323555cd5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectory&quot;&gt;removeDirectory&lt;/a&gt; dir&lt;/code&gt; removes an existing directory &lt;em&gt;dir&lt;/em&gt;. The implementation may specify additional constraints which must be satisfied before a directory can be removed (e.g. the directory has to be empty, or may not be in use by other processes). It is not legal for an implementation to partially remove a directory unless the entire directory is removed. A conformant implementation need not support directory removal in all situations (e.g. removal of the root directory).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectory&quot;&gt;removeDirectory&lt;/a&gt; dir&lt;/code&gt; 既存のディレクトリ削除する&lt;em&gt;ディレクトリを&lt;/em&gt;。実装では、ディレクトリを削除する前に満たす必要がある追加の制約を指定する場合があります（たとえば、ディレクトリを空にする必要がある、または他のプロセスで使用されていない可能性があります）。ディレクトリ全体が削除されない限り、実装がディレクトリを部分的に削除することは合法ではありません。準拠した実装は、すべての状況でディレクトリの削除をサポートする必要はありません（たとえば、ルートディレクトリの削除）。</target>
        </trans-unit>
        <trans-unit id="811605cb16909a2d10f9fbab42d71ae040bd7169" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectoryRecursive&quot;&gt;removeDirectoryRecursive&lt;/a&gt; dir&lt;/code&gt; removes an existing directory &lt;em&gt;dir&lt;/em&gt; together with its contents and subdirectories. Within this directory, symbolic links are removed without affecting their targets.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectoryRecursive&quot;&gt;removeDirectoryRecursive&lt;/a&gt; dir&lt;/code&gt; は、既存のディレクトリ&lt;em&gt; dir&lt;/em&gt;をその内容とサブディレクトリとともに削除します。このディレクトリ内では、シンボリックリンクはターゲットに影響を与えることなく削除されます。</target>
        </trans-unit>
        <trans-unit id="16d7e645324acff7f68a3c901de6f888fcae3589" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:removeFile&quot;&gt;removeFile&lt;/a&gt;&lt;/code&gt;&lt;em&gt;file&lt;/em&gt; removes the directory entry for an existing file &lt;em&gt;file&lt;/em&gt;, where &lt;em&gt;file&lt;/em&gt; is not itself a directory. The implementation may specify additional constraints which must be satisfied before a file can be removed (e.g. the file may not be in use by other processes).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:removeFile&quot;&gt;removeFile&lt;/a&gt;&lt;/code&gt; &lt;em&gt;ファイルは、&lt;/em&gt;既存のファイルのディレクトリエントリ削除&lt;em&gt;ファイル&lt;/em&gt;、&lt;em&gt;ファイルが&lt;/em&gt;ディレクトリ自体ではありませんが。実装は、ファイルを削除する前に満たす必要がある追加の制約を指定する場合があります（たとえば、ファイルが他のプロセスで使用されていない場合があります）。</target>
        </trans-unit>
        <trans-unit id="512fb3e5392402ecd530cb7a00735e380b377ae0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:renameDirectory&quot;&gt;renameDirectory&lt;/a&gt; old new&lt;/code&gt; changes the name of an existing directory from &lt;em&gt;old&lt;/em&gt; to &lt;em&gt;new&lt;/em&gt;. If the &lt;em&gt;new&lt;/em&gt; directory already exists, it is atomically replaced by the &lt;em&gt;old&lt;/em&gt; directory. If the &lt;em&gt;new&lt;/em&gt; directory is neither the &lt;em&gt;old&lt;/em&gt; directory nor an alias of the &lt;em&gt;old&lt;/em&gt; directory, it is removed as if by &lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectory&quot;&gt;removeDirectory&lt;/a&gt;&lt;/code&gt;. A conformant implementation need not support renaming directories in all situations (e.g. renaming to an existing directory, or across different physical devices), but the constraints must be documented.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:renameDirectory&quot;&gt;renameDirectory&lt;/a&gt; old new&lt;/code&gt; 変化から、既存のディレクトリの名前&lt;em&gt;古い&lt;/em&gt;に&lt;em&gt;新しいです&lt;/em&gt;。&lt;em&gt;新しい&lt;/em&gt;ディレクトリがすでに存在する場合は、&lt;em&gt;古い&lt;/em&gt;ディレクトリに自動的に置き換えられます。場合は&lt;em&gt;、新しい&lt;/em&gt;ディレクトリはどちらもある&lt;em&gt;古い&lt;/em&gt;ディレクトリもの別名&lt;em&gt;古い&lt;/em&gt;ディレクトリは、それをしたかのように除去される &lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectory&quot;&gt;removeDirectory&lt;/a&gt;&lt;/code&gt; 。準拠した実装は、すべての状況でディレクトリの名前変更をサポートする必要はありません（たとえば、既存のディレクトリへの名前変更、または異なる物理デバイスにわたる）。ただし、制約を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="1eb6bb0aba7cc14757847ba9a69350ee82df65ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:renameFile&quot;&gt;renameFile&lt;/a&gt; old new&lt;/code&gt; changes the name of an existing file system object from &lt;em&gt;old&lt;/em&gt; to &lt;em&gt;new&lt;/em&gt;. If the &lt;em&gt;new&lt;/em&gt; object already exists, it is atomically replaced by the &lt;em&gt;old&lt;/em&gt; object. Neither path may refer to an existing directory. A conformant implementation need not support renaming files in all situations (e.g. renaming across different physical devices), but the constraints must be documented.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:renameFile&quot;&gt;renameFile&lt;/a&gt; old new&lt;/code&gt; からの変更既存のファイル・システム・オブジェクトの名前を&lt;em&gt;古い&lt;/em&gt;と&lt;em&gt;新しいです&lt;/em&gt;。&lt;em&gt;新しい&lt;/em&gt;オブジェクトがすでに存在する場合は、&lt;em&gt;古い&lt;/em&gt;オブジェクトに自動的に置き換えられます。どちらのパスも既存のディレクトリを参照することはできません。準拠した実装では、すべての状況でファイルの名前を変更する必要はありません（たとえば、異なる物理デバイス間での名前の変更）。ただし、制約を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="51de27a973f5ea2ab881c2dcfed1f431af95026d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:alloca&quot;&gt;alloca&lt;/a&gt; f&lt;/code&gt; executes the computation &lt;code&gt;f&lt;/code&gt;, passing as argument a pointer to a temporarily allocated block of memory sufficient to hold values of type &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:alloca&quot;&gt;alloca&lt;/a&gt; f&lt;/code&gt; 、演算実行 &lt;code&gt;f&lt;/code&gt; 引数として、型の値を保持するのに十分なメモリの一時的に割り当てられたブロックへのポインタを渡すこと、 &lt;code&gt;a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="30881e33e4b76a76383543da3ebacc9cb6fcb0de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:allocaBytes&quot;&gt;allocaBytes&lt;/a&gt; n f&lt;/code&gt; executes the computation &lt;code&gt;f&lt;/code&gt;, passing as argument a pointer to a temporarily allocated block of memory of &lt;code&gt;n&lt;/code&gt; bytes. The block of memory is sufficiently aligned for any of the basic foreign types that fits into a memory block of the allocated size.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:allocaBytes&quot;&gt;allocaBytes&lt;/a&gt; n f&lt;/code&gt; は、計算 &lt;code&gt;f&lt;/code&gt; を実行し、一時的に割り当てられた &lt;code&gt;n&lt;/code&gt; バイトのメモリブロックへのポインタを引数として渡します。メモリのブロックは、割り当てられたサイズのメモリブロックに適合する基本的な外部タイプのいずれかに対して十分に調整されます。</target>
        </trans-unit>
        <trans-unit id="f2ba2e7e29aaa12a74022482ac7bb88fbe0e0b96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; with its arguments flipped. For a version that ignores the results see &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-foldable#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; はその引数を反転させた &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; です。結果を無視するバージョンについては、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-foldable#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="6ab889ad9f194c93c1eea10d838337f057a56901" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; with its arguments flipped. For a version that ignores the results see &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-foldable#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; は、引数を反転した &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; です。結果を無視するバージョンについては、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-foldable#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="29c58161bc0363776dedd520693acb037228f73f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; with its arguments flipped. For a version that ignores the results see &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; は、引数を反転させて &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; します。結果を無視するバージョンについては、 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="9fdb0cf82593649629819bceb7666b11e7e622a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:traverse_&quot;&gt;traverse_&lt;/a&gt;&lt;/code&gt; with its arguments flipped. For a version that doesn't ignore the results see &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt; は、引数が反転した &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:traverse_&quot;&gt;traverse_&lt;/a&gt;&lt;/code&gt; です。結果は見無視していないバージョンの場合 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df8475c8cf49f84b6370923213383095fa9333d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:traverse_&quot;&gt;traverse_&lt;/a&gt;&lt;/code&gt; with its arguments flipped. For a version that doesn't ignore the results see &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:traverse_&quot;&gt;traverse_&lt;/a&gt;&lt;/code&gt; であり、引数が反転しています。結果は見無視していないバージョンの場合 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="89eb602e98173faddcd75956811398b07adcccdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:traverse_&quot;&gt;traverse_&lt;/a&gt;&lt;/code&gt; with its arguments flipped. For a version that doesn't ignore the results see &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-traversable#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt;. This is &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-foldable#v:forM_&quot;&gt;forM_&lt;/a&gt;&lt;/code&gt; generalised to &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; actions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:traverse_&quot;&gt;traverse_&lt;/a&gt;&lt;/code&gt; であり、引数が反転しています。結果は見無視していないバージョンの場合 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-traversable#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; 。これは、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; アクションに一般化された &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-foldable#v:forM_&quot;&gt;forM_&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="eb82ca16c7548cfab3f8d76ac4545bc61d07c09b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt; is just like &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-foldable#v:forM_&quot;&gt;forM_&lt;/a&gt;&lt;/code&gt;, but generalised to &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; actions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt; はforM_と同じ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-foldable#v:forM_&quot;&gt;forM_&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; アクションに一般化されています。</target>
        </trans-unit>
        <trans-unit id="028b5625464fb8097365abe596c3d54434e3ec10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; は実勢無視 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; 上の &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 、直接バイト読み込みます。</target>
        </trans-unit>
        <trans-unit id="eaf72ee3c4b139e6871f68b5d4b0867bf429a8ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; は実勢無視 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; 上の &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 、直接バイト読み込みます。</target>
        </trans-unit>
        <trans-unit id="e3daff5624900de5ce170c2295902fb589a81ad4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; は実勢無視 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; 上の &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 、直接バイト読み込みます。</target>
        </trans-unit>
        <trans-unit id="57cfc1e5042a12660b3e720d93cf0cab9c7794d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; never raises an EOF exception, instead it returns a value smaller than &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; がEOF例外を発生させることはなく、代わりに &lt;code&gt;count&lt;/code&gt; より小さい値を返します。</target>
        </trans-unit>
        <trans-unit id="f11b3c0865d210f9ab7b132999b6c4c16d6ef98e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt; until either EOF is reached or &lt;code&gt;count&lt;/code&gt; 8-bit bytes have been read. It returns the number of bytes actually read. This may be zero if EOF was reached before any data was read (or if &lt;code&gt;count&lt;/code&gt; is zero).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl buf count&lt;/code&gt; は、EOFに到達するか、 &lt;code&gt;count&lt;/code&gt; 8ビットバイトが読み込まれるまで、ハンドル &lt;code&gt;hdl&lt;/code&gt; からバッファ &lt;code&gt;buf&lt;/code&gt; にデータを読み込みます。実際に読み取られたバイト数を返します。データが読み込まれる前にEOFに達した場合（または &lt;code&gt;count&lt;/code&gt; がゼロの場合）は、ゼロになることがあります。</target>
        </trans-unit>
        <trans-unit id="14075775c0ee25ea68f9e2f09601e21154b0a0f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores any text encoding that applies to the &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, writing the bytes directly to the underlying file or device.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; に適用されるテキストエンコーディングを無視し、基になるファイルまたはデバイスに直接バイトを書き込みます。</target>
        </trans-unit>
        <trans-unit id="d99d667e36582cea7f2334c492a206fcb6df9006" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and writes bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; は実勢無視 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; を上 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 、直接バイト書き込みます。</target>
        </trans-unit>
        <trans-unit id="4692edaab9643d8a5e7c5c6c2f995daef5ee1220" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and writes bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; は実勢無視 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; を上 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 、直接バイト書き込みます。</target>
        </trans-unit>
        <trans-unit id="7a31e83517ae97a0aa2d92168814fa56c954692c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and writes bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; は実勢無視 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; を上 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 、直接バイト書き込みます。</target>
        </trans-unit>
        <trans-unit id="0490d1f560a432f99bac3122c75fb8ef6af90f33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; writes &lt;code&gt;count&lt;/code&gt; 8-bit bytes from the buffer &lt;code&gt;buf&lt;/code&gt; to the handle &lt;code&gt;hdl&lt;/code&gt;. It returns ().</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl buf count&lt;/code&gt; は、 &lt;code&gt;count&lt;/code&gt; 8ビットバイトをバッファ &lt;code&gt;buf&lt;/code&gt; からハンドル &lt;code&gt;hdl&lt;/code&gt; に書き込みます。（）を返します。</target>
        </trans-unit>
        <trans-unit id="675e0c5497e4318c63592abccd2c82715047a160" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isAlreadyExistsError&quot;&gt;isAlreadyExistsError&lt;/a&gt;&lt;/code&gt; The operand refers to a directory that already exists. &lt;code&gt; [EEXIST]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isAlreadyExistsError&quot;&gt;isAlreadyExistsError&lt;/a&gt;&lt;/code&gt; オペランドは、すでに存在するディレクトリを参照しています。 &lt;code&gt; [EEXIST]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e8d3a2ed896f8f5ead7e97db7d1db41059cac067" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; The directory does not exist. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; ディレクトリが存在しません。 &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="570fc6e70848e62062b5f67d22eb279fa47e3442" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; The document directory for the current user does not exist, or cannot be found.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 現在のユーザーのドキュメントディレクトリが存在しないか、見つかりません。</target>
        </trans-unit>
        <trans-unit id="e20e3f01828fc8f87cbe164a8b5c4e1b2aa04ca4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; The file does not exist. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; ファイルが存在しません。 &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="858cd772984a7e4429db514018b70ce3afd9ae06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; The home directory for the current user does not exist, or cannot be found.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 現在のユーザーのホームディレクトリが存在しないか、見つかりません。</target>
        </trans-unit>
        <trans-unit id="7a85b3657c156b8ae293b591e0cb872c2e655091" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; The original directory does not exist, or there is no path to the target. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 元のディレクトリが存在しないか、ターゲットへのパスがありません。 &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="47c5c9601ce63bc94ccc8604c54e7bb22d69d8dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; The original file does not exist, or there is no path to the target. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 元のファイルが存在しないか、ターゲットへのパスがありません。 &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d2ab4ae517a822445df2a1a704ad3674534b7b20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; There is no path referring to the working directory. &lt;code&gt;[EPERM, ENOENT, ESTALE...]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 作業ディレクトリを参照するパスがありません。 &lt;code&gt;[EPERM, ENOENT, ESTALE...]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ae0dd37d90f48cfbdef6a570db9acc64836085b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; There is no path to the directory. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; ディレクトリへのパスがありません。 &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="347fc8584d20e401ff8f78ac63c1500e20cf5de5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if the file or directory does not exist.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; (ファイルまたはディレクトリが存在しない場合）。</target>
        </trans-unit>
        <trans-unit id="e5fc418c169c85bf7e022cca595290b216e02ae5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if the symbolic link does not exist; or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; (シンボリックリンクが存在しない場合）。または</target>
        </trans-unit>
        <trans-unit id="a4a49ab0d29fe4fe855dfb979840d520e0507041" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; The process has insufficient privileges to perform the operation. &lt;code&gt;[EACCES]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; プロセスには、操作を実行するための十分な権限がありません。 &lt;code&gt;[EACCES]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee56e32bdbd4711aea4be33a1fcaaf4bda21f029" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; The process has insufficient privileges to perform the operation. &lt;code&gt;[EROFS, EACCES, EPERM]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; プロセスには、操作を実行するための十分な権限がありません。 &lt;code&gt;[EROFS, EACCES, EPERM]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4b64e747953087c74ce74e2be09ce5f51ed1f10f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; The process has insufficient privileges to perform the operation. &lt;code&gt;[EROFS, EACCES]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; プロセスには、操作を実行するための十分な権限がありません。 &lt;code&gt;[EROFS, EACCES]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9131e447f68b5aa32b4fe3baa0338cd3a6741e0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if another system resource limit would be exceeded.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; -別のシステムリソース制限を超える場合。</target>
        </trans-unit>
        <trans-unit id="42d89f5accd453087b393d912d9093968f25de64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to access the permissions, or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; -ユーザーが権限へのアクセスを許可されていない場合、または</target>
        </trans-unit>
        <trans-unit id="c180a36cc0fcd2cf5d5a734f85406f596ffb1a04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to alter the access time; or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; -ユーザーがアクセス時間の変更を許可されていない場合。または</target>
        </trans-unit>
        <trans-unit id="05cff511b1fbc5935a930f77cb71c60e1570a1cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to alter the modification time; or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; -ユーザーが変更時刻の変更を許可されていない場合。または</target>
        </trans-unit>
        <trans-unit id="60d066f5275ae106507bc969993fbcf135694886" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to read the access time; or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; -ユーザーがアクセス時間の読み取りを許可されていない場合。または</target>
        </trans-unit>
        <trans-unit id="8fc550853d68871a0ca61e37d18be5e8873706bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to read the modification time; or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; 、ユーザーが変更時刻の読み取りを許可されていない場合。または</target>
        </trans-unit>
        <trans-unit id="7cfd615404ba5f6b6c0ef4f41d095e3187b64658" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to read the symbolic link.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; (ユーザーがシンボリックリンクの読み取りを許可されていない場合）。</target>
        </trans-unit>
        <trans-unit id="d6d79b4dc766b0087bfb9c761ba001e872def17a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to set the permissions, or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; -ユーザーが権限の設定を許可されていない場合、または</target>
        </trans-unit>
        <trans-unit id="8d1c7bba021927430b68ec57e72e32c19451ce3f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:killThread&quot;&gt;killThread&lt;/a&gt;&lt;/code&gt; raises the &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:ThreadKilled&quot;&gt;ThreadKilled&lt;/a&gt;&lt;/code&gt; exception in the given thread (GHC only).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:killThread&quot;&gt;killThread&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:ThreadKilled&quot;&gt;ThreadKilled&lt;/a&gt;&lt;/code&gt; れたスレッドでThreadKilled例外を発生させます（GHCのみ）。</target>
        </trans-unit>
        <trans-unit id="344e76d740bf897453387371cea23cc330cac420" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:killThread&quot;&gt;killThread&lt;/a&gt;&lt;/code&gt; raises the &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:ThreadKilled&quot;&gt;ThreadKilled&lt;/a&gt;&lt;/code&gt; exception in the given thread (GHC only).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:killThread&quot;&gt;killThread&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:ThreadKilled&quot;&gt;ThreadKilled&lt;/a&gt;&lt;/code&gt; れたスレッドで ThreadKilled例外を発生させます（GHCのみ）。</target>
        </trans-unit>
        <trans-unit id="4fcd67feb0737a226270b6200083d1229b140169" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:killThread&quot;&gt;killThread&lt;/a&gt;&lt;/code&gt; raises the &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:ThreadKilled&quot;&gt;ThreadKilled&lt;/a&gt;&lt;/code&gt; exception in the given thread (GHC only).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:killThread&quot;&gt;killThread&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:ThreadKilled&quot;&gt;ThreadKilled&lt;/a&gt;&lt;/code&gt; れたスレッドでThreadKilled例外を発生させます（GHCのみ）。</target>
        </trans-unit>
        <trans-unit id="e615977c2722c4f0e45c54f7345e00cff9115bc7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:on&quot;&gt;on&lt;/a&gt; b u x y&lt;/code&gt; runs the binary function &lt;code&gt;b&lt;/code&gt;&lt;em&gt;on&lt;/em&gt; the results of applying unary function &lt;code&gt;u&lt;/code&gt; to two arguments &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. From the opposite perspective, it transforms two inputs and combines the outputs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:on&quot;&gt;on&lt;/a&gt; b u x y&lt;/code&gt; は、単項関数 &lt;code&gt;u&lt;/code&gt; を2つの引数 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; に適用&lt;em&gt;し&lt;/em&gt;た結果 &lt;code&gt;b&lt;/code&gt; 、バイナリ関数 b &lt;em&gt;を&lt;/em&gt;実行します。反対の見方をすると、2つの入力を変換し、出力を結合します。</target>
        </trans-unit>
        <trans-unit id="786c99907a020f9c48152e8d24c6885af0611c87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; is single-wakeup. That is, if there are multiple threads blocked in &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; becomes empty, only one thread will be woken up. The runtime guarantees that the woken thread completes its &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; は単一ウェイクアップです。つまり、 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; でブロックされているスレッドが複数あり、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; が空になると、1つのスレッドのみが起こされます。ランタイムは、起動されたスレッドが &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; 操作を完了することを保証します。</target>
        </trans-unit>
        <trans-unit id="74a812d8a8c0f3519c071dad1226398b35116293" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; is single-wakeup. That is, if there are multiple threads blocked in &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; becomes empty, only one thread will be woken up. The runtime guarantees that the woken thread completes its &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; はシングルウェイクアップです。つまり、 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; で複数のスレッドがブロックされていて、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; が空になった場合、1つのスレッドだけがウェイクアップされます。ランタイムは、ウェイク &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; されたスレッドがputMVar操作を完了することを保証します。</target>
        </trans-unit>
        <trans-unit id="efe497dd438d73586c7eebed24127a70908205a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; is single-wakeup. That is, if there are multiple threads blocked in &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; becomes empty, only one thread will be woken up. The runtime guarantees that the woken thread completes its &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; はシングルウェイクアップです。つまり、 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; で複数のスレッドがブロックされていて、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; が空になった場合、1つのスレッドだけがウェイクアップされます。ランタイムは、ウェイク &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; されたスレッドがputMVar操作を完了することを保証します。</target>
        </trans-unit>
        <trans-unit id="e578064f0da8499089a403d976f0baf9159aed9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; is multiple-wakeup, so when multiple readers are blocked on an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;, all of them are woken up at the same time.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; は複数ウェイクアップであるため、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; で複数のリーダーがブロックされている場合、すべてのリーダーが同時に起動されます。</target>
        </trans-unit>
        <trans-unit id="249cb4fb75c51d144375974f15423f8de0ca57cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; is multiple-wakeup, so when multiple readers are blocked on an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;, all of them are woken up at the same time.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; は複数のウェイクアップであるため、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; で複数のリーダーがブロックされると、それらすべてが同時にウェイクアップされます。</target>
        </trans-unit>
        <trans-unit id="2d582e863221eaa5de9ca7509f205d6fa2086d4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; is multiple-wakeup, so when multiple readers are blocked on an &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;, all of them are woken up at the same time.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; は複数のウェイクアップであるため、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; で複数のリーダーがブロックされると、それらすべてが同時にウェイクアップされます。</target>
        </trans-unit>
        <trans-unit id="0b3f50ac80b1318619fa52bcf2532a8192f5aefc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; is single-wakeup. That is, if there are multiple threads blocked in &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; becomes full, only one thread will be woken up. The runtime guarantees that the woken thread completes its &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; は単一ウェイクアップです。つまり、 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; でブロックされているスレッドが複数あり、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; がいっぱいになると、1つのスレッドのみが起こされます。ランタイムは、起動されたスレッドが &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; 操作を完了することを保証します。</target>
        </trans-unit>
        <trans-unit id="b69d3fc09ff33c36a03a7ba1a1ea73aff653b08e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; is single-wakeup. That is, if there are multiple threads blocked in &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; becomes full, only one thread will be woken up. The runtime guarantees that the woken thread completes its &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; はシングルウェイクアップです。つまり、 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; で複数のスレッドがブロックされていて、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; がいっぱいになると、1つのスレッドだけがウェイクアップされます。ランタイムは、ウェイク &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; されたスレッドがtakeMVar操作を完了することを保証します。</target>
        </trans-unit>
        <trans-unit id="04e0a6fd89f99e7667af758401fbb9833a01dc4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; is single-wakeup. That is, if there are multiple threads blocked in &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; becomes full, only one thread will be woken up. The runtime guarantees that the woken thread completes its &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; はシングルウェイクアップです。つまり、 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; で複数のスレッドがブロックされていて、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; がいっぱいになると、1つのスレッドだけがウェイクアップされます。ランタイムは、ウェイク &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; されたスレッドがtakeMVar操作を完了することを保証します。</target>
        </trans-unit>
        <trans-unit id="3261c45531c9f2ca81cfec32e44e7b5337d2cd02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:traverse_&quot;&gt;traverse_&lt;/a&gt;&lt;/code&gt; is just like &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-foldable#v:mapM_&quot;&gt;mapM_&lt;/a&gt;&lt;/code&gt;, but generalised to &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; actions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:traverse_&quot;&gt;traverse_&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-foldable#v:mapM_&quot;&gt;mapM_&lt;/a&gt;&lt;/code&gt; と同じですが、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; アクションに一般化されています。</target>
        </trans-unit>
        <trans-unit id="2b4939a05367193825eecc5af2806613fa289229" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:with&quot;&gt;with&lt;/a&gt; val f&lt;/code&gt; executes the computation &lt;code&gt;f&lt;/code&gt;, passing as argument a pointer to a temporarily allocated block of memory into which &lt;code&gt;val&lt;/code&gt; has been marshalled (the combination of &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:poke&quot;&gt;poke&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:with&quot;&gt;with&lt;/a&gt; val f&lt;/code&gt; 演算実行 &lt;code&gt;f&lt;/code&gt; 引数としてその中にメモリの一時的に割り当てられたブロックへのポインタを渡す、 &lt;code&gt;val&lt;/code&gt; はマーシャリングされている（組み合わせ &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:poke&quot;&gt;poke&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="9e61feadfc129e536f83d38e4032d764857e8122" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt; name mode act&lt;/code&gt; opens a file using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; and passes the resulting handle to the computation &lt;code&gt;act&lt;/code&gt;. The handle will be closed on exit from &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt;&lt;/code&gt;, whether by normal termination or by raising an exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt; name mode act&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; を使用してファイルを開き、結果のハンドルを計算の &lt;code&gt;act&lt;/code&gt; に渡します。ハンドルは &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt;&lt;/code&gt; からの終了時に、通常の終了または例外の発生によって閉じられます。</target>
        </trans-unit>
        <trans-unit id="c6dad49a905f8d674e7d0ee29159ce4a7bd8962f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt; name mode act&lt;/code&gt; opens a file using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; and passes the resulting handle to the computation &lt;code&gt;act&lt;/code&gt;. The handle will be closed on exit from &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt;&lt;/code&gt;, whether by normal termination or by raising an exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt; name mode act&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; を使用してファイルを開き、結果のハンドルを計算 &lt;code&gt;act&lt;/code&gt; に渡します。ハンドルは、通常の終了または例外の発生のいずれかによって、 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt;&lt;/code&gt; の終了時に閉じられます。</target>
        </trans-unit>
        <trans-unit id="f284b0da3ee017e9b93ec9b4e40542aafdbc7068" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt; name mode act&lt;/code&gt; opens a file using &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-stdhandles#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; and passes the resulting handle to the computation &lt;code&gt;act&lt;/code&gt;. The handle will be closed on exit from &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt;&lt;/code&gt;, whether by normal termination or by raising an exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt; name mode act&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-stdhandles#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; を使用してファイルを開き、結果のハンドルを計算 &lt;code&gt;act&lt;/code&gt; に渡します。ハンドルは、通常の終了または例外の発生のいずれかによって、 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt;&lt;/code&gt; の終了時に閉じられます。</target>
        </trans-unit>
        <trans-unit id="97f4bfc1af66b1f78e6fa201119dedebf31cea28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-environment#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; retrieves the entire environment as a list of &lt;code&gt;(key,value)&lt;/code&gt; pairs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-environment#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; は、環境全体を &lt;code&gt;(key,value)&lt;/code&gt; ペアのリストとして取得します。</target>
        </trans-unit>
        <trans-unit id="77b5a03cf9bedea531e171f5f1e26bc4003a8f2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-environment#v:withArgs&quot;&gt;withArgs&lt;/a&gt;&lt;/code&gt;&lt;code&gt;args act&lt;/code&gt; - while executing action &lt;code&gt;act&lt;/code&gt;, have &lt;code&gt;&lt;a href=&quot;system-environment#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; return &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-environment#v:withArgs&quot;&gt;withArgs&lt;/a&gt;&lt;/code&gt; &lt;code&gt;args act&lt;/code&gt; act-アクション &lt;code&gt;act&lt;/code&gt; の実行中に、 &lt;code&gt;&lt;a href=&quot;system-environment#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;args&lt;/code&gt; を返すようにします。</target>
        </trans-unit>
        <trans-unit id="ab56e078d2844082ad734d0aabb2c57a6ce5bc98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-environment#v:withProgName&quot;&gt;withProgName&lt;/a&gt;&lt;/code&gt;&lt;code&gt;name act&lt;/code&gt; - while executing action &lt;code&gt;act&lt;/code&gt;, have &lt;code&gt;&lt;a href=&quot;system-environment#v:getProgName&quot;&gt;getProgName&lt;/a&gt;&lt;/code&gt; return &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-environment#v:withProgName&quot;&gt;withProgName&lt;/a&gt;&lt;/code&gt; &lt;code&gt;name act&lt;/code&gt; act-アクション &lt;code&gt;act&lt;/code&gt; の実行中に、 &lt;code&gt;&lt;a href=&quot;system-environment#v:getProgName&quot;&gt;getProgName&lt;/a&gt;&lt;/code&gt; が nameを返すようにし &lt;code&gt;name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f58d145ae3238904f6ded50a490545f505e32944" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; retrieves the entire environment as a list of &lt;code&gt;(key,value)&lt;/code&gt; pairs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; は、環境全体を &lt;code&gt;(key,value)&lt;/code&gt; ペアのリストとして取得します。</target>
        </trans-unit>
        <trans-unit id="6013d33c430ebf7ce02db5cc25b9470bb617134d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-environment-blank#v:withArgs&quot;&gt;withArgs&lt;/a&gt;&lt;/code&gt;&lt;code&gt;args act&lt;/code&gt; - while executing action &lt;code&gt;act&lt;/code&gt;, have &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; return &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-environment-blank#v:withArgs&quot;&gt;withArgs&lt;/a&gt;&lt;/code&gt; &lt;code&gt;args act&lt;/code&gt; act-アクション &lt;code&gt;act&lt;/code&gt; の実行中に、 &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;args&lt;/code&gt; を返すようにします。</target>
        </trans-unit>
        <trans-unit id="ff4e2cb305925639cfd5cfb1c2f1ba63b4d75cb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-environment-blank#v:withProgName&quot;&gt;withProgName&lt;/a&gt;&lt;/code&gt;&lt;code&gt;name act&lt;/code&gt; - while executing action &lt;code&gt;act&lt;/code&gt;, have &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getProgName&quot;&gt;getProgName&lt;/a&gt;&lt;/code&gt; return &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-environment-blank#v:withProgName&quot;&gt;withProgName&lt;/a&gt;&lt;/code&gt; &lt;code&gt;name act&lt;/code&gt; act-アクション &lt;code&gt;act&lt;/code&gt; の実行中に、 &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getProgName&quot;&gt;getProgName&lt;/a&gt;&lt;/code&gt; が nameを返すようにし &lt;code&gt;name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="750cbc8039fe1c83e8763f28996fdc34077a41e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:dropExtension&quot;&gt;dropExtension&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;/directory/file&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:dropExtension&quot;&gt;dropExtension&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&quot;/directory/file&quot;&lt;/code&gt; を提供します</target>
        </trans-unit>
        <trans-unit id="ee498c484d9daa5b759cbcd3d038588c60a44a4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeBaseName&quot;&gt;takeBaseName&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;file&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeBaseName&quot;&gt;takeBaseName&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&quot;file&quot;&lt;/code&gt; を提供します</target>
        </trans-unit>
        <trans-unit id="204e024900f7186a24f70c664c7a279d94013014" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeDirectory&quot;&gt;takeDirectory&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;/directory&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeDirectory&quot;&gt;takeDirectory&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&quot;/directory&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="505fc89627c6e7b66a4e50349bdf9c2ce4989f4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeExtension&quot;&gt;takeExtension&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;.ext&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeExtension&quot;&gt;takeExtension&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&quot;.ext&quot;&lt;/code&gt; を与えます</target>
        </trans-unit>
        <trans-unit id="9828687142d3f94e89126e3b00c12daaf2d4cd55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeFileName&quot;&gt;takeFileName&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;file.ext&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeFileName&quot;&gt;takeFileName&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&quot;file.ext&quot;&lt;/code&gt; を提供します</target>
        </trans-unit>
        <trans-unit id="5a8b69a5412a9c411b18cda76536b61138da5070" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:dropExtension&quot;&gt;dropExtension&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;/directory/file&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:dropExtension&quot;&gt;dropExtension&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&quot;/directory/file&quot;&lt;/code&gt; を提供します</target>
        </trans-unit>
        <trans-unit id="67fe48558f1fa4ec40f72ce35a9aab921fcd7182" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeBaseName&quot;&gt;takeBaseName&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;file&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeBaseName&quot;&gt;takeBaseName&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&quot;file&quot;&lt;/code&gt; を提供します</target>
        </trans-unit>
        <trans-unit id="f3d9d266b688f599b0358a6292fe227b5ec8759f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeDirectory&quot;&gt;takeDirectory&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;/directory&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeDirectory&quot;&gt;takeDirectory&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&quot;/directory&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e898427c7f13c21982b1e0944597a896ad6ad697" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeExtension&quot;&gt;takeExtension&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;.ext&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeExtension&quot;&gt;takeExtension&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&quot;.ext&quot;&lt;/code&gt; を与えます</target>
        </trans-unit>
        <trans-unit id="c6f4096a36fedbe5e31682897c961e85cc71b392" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeFileName&quot;&gt;takeFileName&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;file.ext&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeFileName&quot;&gt;takeFileName&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&quot;file.ext&quot;&lt;/code&gt; を提供します</target>
        </trans-unit>
        <trans-unit id="2fd87e5da495cc20bcf39cf6c0ba9d2a05fc5f65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; is a monad, so &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; actions can be combined using either the do-notation or the &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; operations from the &lt;code&gt;&lt;a href=&quot;prelude#v:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; はモナドであるため、 &lt;code&gt;&lt;a href=&quot;prelude#v:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; クラスのdo表記または &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; 操作を使用して、 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; アクションを組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="0c113f8cff9254292f69bc05445fda1246e90fbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; は実勢無視 &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; 上の &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 、直接バイト読み込みます。</target>
        </trans-unit>
        <trans-unit id="1e51dc3c610b9def739345e883f90795ad069471" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; never raises an EOF exception, instead it returns a value smaller than &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; がEOF例外を発生させることはなく、代わりに &lt;code&gt;count&lt;/code&gt; より小さい値を返します。</target>
        </trans-unit>
        <trans-unit id="fedf06dacc84d057e0aff65b80b4609f5234e578" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt; until either EOF is reached or &lt;code&gt;count&lt;/code&gt; 8-bit bytes have been read. It returns the number of bytes actually read. This may be zero if EOF was reached before any data was read (or if &lt;code&gt;count&lt;/code&gt; is zero).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl buf count&lt;/code&gt; は、EOFに到達するか、 &lt;code&gt;count&lt;/code&gt; 8ビットバイトが読み込まれるまで、ハンドル &lt;code&gt;hdl&lt;/code&gt; からバッファ &lt;code&gt;buf&lt;/code&gt; にデータを読み込みます。実際に読み取られたバイト数を返します。データが読み込まれる前にEOFに達した場合（または &lt;code&gt;count&lt;/code&gt; がゼロの場合）は、ゼロになることがあります。</target>
        </trans-unit>
        <trans-unit id="47492e6c7d3b7b167bf4a77f02ebb3177702211f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; は実勢無視 &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; 上の &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 、直接バイト読み込みます。</target>
        </trans-unit>
        <trans-unit id="8d5e68a418777562629e83c6914b5965e4f8b7de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; is identical to &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;, except that it will never block waiting for data to become available, instead it returns only whatever data is available. To wait for data to arrive before calling &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt;, use &lt;code&gt;&lt;a href=&quot;system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; は同じです &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; 代わりに、それが利用可能なあらゆるデータのみを返し、それはデータが利用可能になるのを待ってブロックしないことを除いて、。 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; を呼び出す前にデータが到着するのを待つには、 hWaitForInputを使用し &lt;code&gt;&lt;a href=&quot;system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01b3ffe2679a681145b675a90cf9229e33661ea0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt; until either EOF is reached, or &lt;code&gt;count&lt;/code&gt; 8-bit bytes have been read, or there is no more data available to read immediately.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl buf count&lt;/code&gt; は、ハンドル &lt;code&gt;hdl&lt;/code&gt; からバッファ &lt;code&gt;buf&lt;/code&gt; にデータを読み込み、EOFに達するか、8ビットバイトが読み込まれるか、すぐに読み込むデータがなくなるまで &lt;code&gt;count&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="900ccd5046937da12e632c0bd8f4813e0b7ef207" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; は実勢無視 &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; 上の &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 、直接バイト読み込みます。</target>
        </trans-unit>
        <trans-unit id="22c26258224fd2f78d0012cf7ca47b489b5ae960" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; never raises an EOF exception, instead it returns a value smaller than &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; はEOF例外を発生させることはなく、代わりに &lt;code&gt;count&lt;/code&gt; より小さい値を返します。</target>
        </trans-unit>
        <trans-unit id="118c238c7398f2db604334baf0dccba6607b9e36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt;. If there is any data available to read, then &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; returns it immediately; it only blocks if there is no data to be read.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl buf count&lt;/code&gt; は、ハンドル &lt;code&gt;hdl&lt;/code&gt; からバッファ &lt;code&gt;buf&lt;/code&gt; にデータを読み込みます。読み取り可能なデータがある場合、 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; はすぐにそれを返します。読み取るデータがない場合にのみブロックします。</target>
        </trans-unit>
        <trans-unit id="70fd3acb2ea09a247c6cc9f61439f4360fb06b9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores any text encoding that applies to the &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, writing the bytes directly to the underlying file or device.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; に適用されるテキストエンコーディングを無視し、基になるファイルまたはデバイスに直接バイトを書き込みます。</target>
        </trans-unit>
        <trans-unit id="e2c77d44f270fef69a537c97036ebff6b054a777" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and writes bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; は実勢無視 &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; を上 &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 、直接バイト書き込みます。</target>
        </trans-unit>
        <trans-unit id="79fa5cc1f0dea220b5d570d24561ebd4cee15a81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; writes &lt;code&gt;count&lt;/code&gt; 8-bit bytes from the buffer &lt;code&gt;buf&lt;/code&gt; to the handle &lt;code&gt;hdl&lt;/code&gt;. It returns ().</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl buf count&lt;/code&gt; は、 &lt;code&gt;count&lt;/code&gt; 8ビットバイトをバッファ &lt;code&gt;buf&lt;/code&gt; からハンドル &lt;code&gt;hdl&lt;/code&gt; に書き込みます。（）を返します。</target>
        </trans-unit>
        <trans-unit id="d26bfccb8bc5cc4f2e1a6ae4c49863b3fecc5656" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hSetEncoding&quot;&gt;hSetEncoding&lt;/a&gt;&lt;/code&gt; may need to flush buffered data in order to change the encoding.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hSetEncoding&quot;&gt;hSetEncoding&lt;/a&gt;&lt;/code&gt; は、エンコーディングを変更するために、バッファリングされたデータをフラッシュする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="4f709fcc15fedd012e20af0c4a2ce129ee579458" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hSetFileSize&quot;&gt;hSetFileSize&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt;&lt;code&gt;size&lt;/code&gt; truncates the physical file with handle &lt;code&gt;hdl&lt;/code&gt; to &lt;code&gt;size&lt;/code&gt; bytes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hSetFileSize&quot;&gt;hSetFileSize&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; &lt;code&gt;size&lt;/code&gt; は、ハンドル &lt;code&gt;hdl&lt;/code&gt; を含む物理ファイルを &lt;code&gt;size&lt;/code&gt; バイトに切り捨てます。</target>
        </trans-unit>
        <trans-unit id="fee68b3d1c21bbb0d90dc848ac40c2956dc50c88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hShow&quot;&gt;hShow&lt;/a&gt;&lt;/code&gt; is in the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad, and gives more comprehensive output than the (pure) instance of &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hShow&quot;&gt;hShow&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドにあり、 &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; の（純粋な）インスタンスよりも包括的な出力を提供します。</target>
        </trans-unit>
        <trans-unit id="5868d6a3771c787f8c7a6ca4570efb80ef87837a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt; name mode act&lt;/code&gt; opens a file using &lt;code&gt;&lt;a href=&quot;system-io#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; and passes the resulting handle to the computation &lt;code&gt;act&lt;/code&gt;. The handle will be closed on exit from &lt;code&gt;&lt;a href=&quot;system-io#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt;&lt;/code&gt;, whether by normal termination or by raising an exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt; name mode act&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;system-io#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; を使用してファイルを開き、結果のハンドルを計算の &lt;code&gt;act&lt;/code&gt; に渡します。ハンドルは &lt;code&gt;&lt;a href=&quot;system-io#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt;&lt;/code&gt; からの終了時に、通常の終了または例外の発生によって閉じられます。</target>
        </trans-unit>
        <trans-unit id="bbf5cb2c1fd5be3e782db10ab3e5cb2a4b1ee149" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:withFile&quot;&gt;withFile&lt;/a&gt; name mode act&lt;/code&gt; opens a file using &lt;code&gt;&lt;a href=&quot;system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt; and passes the resulting handle to the computation &lt;code&gt;act&lt;/code&gt;. The handle will be closed on exit from &lt;code&gt;&lt;a href=&quot;system-io#v:withFile&quot;&gt;withFile&lt;/a&gt;&lt;/code&gt;, whether by normal termination or by raising an exception. If closing the handle raises an exception, then this exception will be raised by &lt;code&gt;&lt;a href=&quot;system-io#v:withFile&quot;&gt;withFile&lt;/a&gt;&lt;/code&gt; rather than any exception raised by &lt;code&gt;act&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:withFile&quot;&gt;withFile&lt;/a&gt; name mode act&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt; を使用してファイルを開き、結果のハンドルを計算 &lt;code&gt;act&lt;/code&gt; に渡します。ハンドルは &lt;code&gt;&lt;a href=&quot;system-io#v:withFile&quot;&gt;withFile&lt;/a&gt;&lt;/code&gt; の終了時に、通常の終了または例外の発生によって閉じられます。ハンドルを閉じると例外が発生する場合、この例外は、 &lt;code&gt;act&lt;/code&gt; によって発生した例外ではなく、 &lt;code&gt;&lt;a href=&quot;system-io#v:withFile&quot;&gt;withFile&lt;/a&gt;&lt;/code&gt; によって発生します。</target>
        </trans-unit>
        <trans-unit id="dabc71eec17f83a93ea23ff66cab4a1dc6ba84c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isAlreadyInUseError&quot;&gt;isAlreadyInUseError&lt;/a&gt;&lt;/code&gt; if the file is already open and cannot be reopened;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isAlreadyInUseError&quot;&gt;isAlreadyInUseError&lt;/a&gt;&lt;/code&gt; 。ファイルがすでに開いており、再度開くことができない場合。</target>
        </trans-unit>
        <trans-unit id="75e8b0ed7a31703858ed0a28c48503222d5319df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if the encoding is unknown</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; エンコーディングが不明な場合</target>
        </trans-unit>
        <trans-unit id="a3003e85eaf3fbc4d4ba4bf2a4cb43b86fc85bdc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if the environment variable does not exist.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; (環境変数が存在しない場合）。</target>
        </trans-unit>
        <trans-unit id="084f3f0a8dd95c22a11cd704ae034bf71b1f18cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if the file does not exist or (on POSIX systems) is a FIFO without a reader and &lt;code&gt;&lt;a href=&quot;system-io#v:WriteMode&quot;&gt;WriteMode&lt;/a&gt;&lt;/code&gt; was requested; or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; -ファイルが存在しない場合、または（POSIXシステムでは）リーダーなしのFIFOで、 &lt;code&gt;&lt;a href=&quot;system-io#v:WriteMode&quot;&gt;WriteMode&lt;/a&gt;&lt;/code&gt; が要求された場合。または</target>
        </trans-unit>
        <trans-unit id="c936737e355c2bbc41be6c619b317caa00c885f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isEOFError&quot;&gt;isEOFError&lt;/a&gt;&lt;/code&gt; if the end of file has been reached.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isEOFError&quot;&gt;isEOFError&lt;/a&gt;&lt;/code&gt; ファイルの終わりに達した場合は isEOFError。</target>
        </trans-unit>
        <trans-unit id="ea9e4b0caa72bab041ae1ff68c755698491c977d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isEOFError&quot;&gt;isEOFError&lt;/a&gt;&lt;/code&gt; if the end of file is encountered when reading the &lt;em&gt;first&lt;/em&gt; character of the line.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isEOFError&quot;&gt;isEOFError&lt;/a&gt;&lt;/code&gt; 行の&lt;em&gt;最初の&lt;/em&gt;文字を読み取るときにファイルの終わりに達した場合。</target>
        </trans-unit>
        <trans-unit id="61c609bcfaa99944aeb4ff3e9dd3d277f3cdb404" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isFullError&quot;&gt;isFullError&lt;/a&gt;&lt;/code&gt; if the device is full;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isFullError&quot;&gt;isFullError&lt;/a&gt;&lt;/code&gt; デバイスがいっぱいの場合。</target>
        </trans-unit>
        <trans-unit id="8b22ca3a03b411a711bed4b581a930e9ee4bf29b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isFullError&quot;&gt;isFullError&lt;/a&gt;&lt;/code&gt; if the device is full; or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isFullError&quot;&gt;isFullError&lt;/a&gt;&lt;/code&gt; デバイスがいっぱいの場合。または</target>
        </trans-unit>
        <trans-unit id="45e7a82af7669853759d0945fa89a702e11253c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;hdl&lt;/code&gt; has buffered read data, and is not seekable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt; 場合 &lt;code&gt;hdl&lt;/code&gt; 読み出しデータをバッファリングし、シークではありませんしました。</target>
        </trans-unit>
        <trans-unit id="4da7adc31ef4edef17a242440c7d64d638a8bd80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isIllegalOperationError&quot;&gt;isIllegalOperationError&lt;/a&gt;&lt;/code&gt; if the Handle is not seekable, or does not support the requested seek mode.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isIllegalOperationError&quot;&gt;isIllegalOperationError&lt;/a&gt;&lt;/code&gt; (ハンドルがシークできない場合、または要求されたシークモードをサポートしていない場合）。</target>
        </trans-unit>
        <trans-unit id="c8e8eb6cf62901659fe79c54f96421c223046405" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isIllegalOperationError&quot;&gt;isIllegalOperationError&lt;/a&gt;&lt;/code&gt; if the Handle is not seekable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isIllegalOperationError&quot;&gt;isIllegalOperationError&lt;/a&gt;&lt;/code&gt; ハンドルがシークできない場合は isIllegalOperationError。</target>
        </trans-unit>
        <trans-unit id="5ce2292e357dc0bd830c43d2560fdb040d147b0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if a system resource limit would be exceeded.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; システムリソースの制限を超える場合。</target>
        </trans-unit>
        <trans-unit id="8c1106621d2a78ef47cd789f50dfd1a8b9f50c67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if a system resource limit would be exceeded. It is unspecified whether the characters in the buffer are discarded or retained under these circumstances.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; システムリソースの制限を超える場合。このような状況でバッファ内の文字を破棄するか保持するかは不定です。</target>
        </trans-unit>
        <trans-unit id="2180955149dbf5012930133930c9cc308ff60476" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if a system resource limit would be exceeded. It is unspecified whether the characters in the buffer are discarded or retained under these circumstances;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; システムリソースの制限を超える場合。このような状況でバッファ内の文字を破棄するか保持するかは不定です。</target>
        </trans-unit>
        <trans-unit id="f1e9517f13f2c20a3e48c3a33ab514f471703b91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if another system resource limit would be exceeded.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; -別のシステムリソース制限を超える場合。</target>
        </trans-unit>
        <trans-unit id="d8930e357a572dfef9dbdede92f4e890fe39a178" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the handle has already been used for reading or writing and the implementation does not allow the buffering mode to be changed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; ハンドルがすでに読み取りまたは書き込みに使用されており、実装がバッファリングモードの変更を許可していない場合。</target>
        </trans-unit>
        <trans-unit id="e9bbfadf606b4d0c13351714bfa1ed22830942d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user does not have permission to open the file.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; -ユーザーがファイルを開く権限を持っていない場合。</target>
        </trans-unit>
        <trans-unit id="9a84d685062db941954c961e65e03ffbf15c9da5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafeInterleaveIO&quot;&gt;unsafeInterleaveIO&lt;/a&gt;&lt;/code&gt; allows an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computation to be deferred lazily. When passed a value of type &lt;code&gt;IO a&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; will only be performed when the value of the &lt;code&gt;a&lt;/code&gt; is demanded. This is used to implement lazy file reading, see &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafeInterleaveIO&quot;&gt;unsafeInterleaveIO&lt;/a&gt;&lt;/code&gt; を使用すると、 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 計算を遅延して延期できます。型の値渡されると &lt;code&gt;IO a&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; はの価値ときにのみ実行されます &lt;code&gt;a&lt;/code&gt; 要求されています。これは、遅延ファイル読み取りを実装するために使用されます &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="636f9ef00f0bbe41d9813b08a2e27024248f864a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; returns the address binding of the symbol described in &lt;code&gt;symbol&lt;/code&gt;, as it occurs in the shared object identified by &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; をは、シンボルのバインディングアドレスに記載返し &lt;code&gt;symbol&lt;/code&gt; がによって識別される共有オブジェクトで起こるように、 &lt;code&gt;source&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db638659b004f209b3be8d77aaba2e2a820082ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; obtains the raw handle. You mustn't do something like &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;=  p -&amp;gt; use p&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; は生のハンドルを取得します。 &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;= p -&amp;gt; use p&lt;/code&gt; ようなことをしてはいけません $ liftM undl &amp;gt;&amp;gt; = p-&amp;gt; use p</target>
        </trans-unit>
        <trans-unit id="594f51891d30d86cfed741461446e3a9341bd7ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-bytestring#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; returns the address binding of the symbol described in &lt;code&gt;symbol&lt;/code&gt;, as it occurs in the shared object identified by &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-bytestring#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; をは、シンボルのバインディングアドレスに記載返し &lt;code&gt;symbol&lt;/code&gt; がによって識別される共有オブジェクトで起こるように、 &lt;code&gt;source&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="38a741da0985ccc5379b3b2289e21c9c8ecc6c53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-bytestring#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; obtains the raw handle. You mustn't do something like &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;=  p -&amp;gt; use p&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-bytestring#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; は生のハンドルを取得します。 &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;= p -&amp;gt; use p&lt;/code&gt; ようなことをしてはいけません $ liftM undl &amp;gt;&amp;gt; = p-&amp;gt; use p</target>
        </trans-unit>
        <trans-unit id="6ffd9b58b987c6fd0a2c462b44c0987761e83f02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; returns the address binding of the symbol described in &lt;code&gt;symbol&lt;/code&gt;, as it occurs in the shared object identified by &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; をは、シンボルのバインディングアドレスに記載返し &lt;code&gt;symbol&lt;/code&gt; がによって識別される共有オブジェクトで起こるように、 &lt;code&gt;source&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6bc263b138bbc4a173923c1e1aefd1e9bda3260d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; obtains the raw handle. You mustn't do something like &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;=  p -&amp;gt; use p&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; は生のハンドルを取得します。 &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;= p -&amp;gt; use p&lt;/code&gt; ようなことをしてはいけません $ liftM undl &amp;gt;&amp;gt; = p-&amp;gt; use p</target>
        </trans-unit>
        <trans-unit id="0e4787c41d0942e72d36598464f8701661cb6393" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker-bytestring#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; returns the address binding of the symbol described in &lt;code&gt;symbol&lt;/code&gt;, as it occurs in the shared object identified by &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker-bytestring#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; をは、シンボルのバインディングアドレスに記載返し &lt;code&gt;symbol&lt;/code&gt; がによって識別される共有オブジェクトで起こるように、 &lt;code&gt;source&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3bc21cb66946a59fcabcd04a2651b642cc04cdfc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker-bytestring#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; obtains the raw handle. You mustn't do something like &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;=  p -&amp;gt; use p&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker-bytestring#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; は生のハンドルを取得します。 &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;= p -&amp;gt; use p&lt;/code&gt; ようなことをしてはいけません $ liftM undl &amp;gt;&amp;gt; = p-&amp;gt; use p</target>
        </trans-unit>
        <trans-unit id="875b6886f5f845cde066821d5d52dcec6a8d27c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; looks up a variable in the environment.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; は環境内の変数を検索します。</target>
        </trans-unit>
        <trans-unit id="77f55c89f7417b0b10d95b889afaa28b4a9090e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnvDefault&quot;&gt;getEnvDefault&lt;/a&gt;&lt;/code&gt; is a wrapper around &lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; where the programmer can specify a fallback if the variable is not found in the environment.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnvDefault&quot;&gt;getEnvDefault&lt;/a&gt;&lt;/code&gt; はラッパです &lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; 変数が環境に見つからない場合、プログラマは、フォールバックを指定することができます。</target>
        </trans-unit>
        <trans-unit id="cca2c0a4d829cb0ea281df253eab24ce8639f433" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; retrieves the entire environment as a list of &lt;code&gt;(key,value)&lt;/code&gt; pairs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; は、環境全体を &lt;code&gt;(key,value)&lt;/code&gt; ペアのリストとして取得します。</target>
        </trans-unit>
        <trans-unit id="4ec6916cb7447bb41f13e0beda26ad49291fcde9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env#v:putEnv&quot;&gt;putEnv&lt;/a&gt;&lt;/code&gt; function takes an argument of the form &lt;code&gt;name=value&lt;/code&gt; and is equivalent to &lt;code&gt;setEnv(key,value,True{-overwrite-})&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env#v:putEnv&quot;&gt;putEnv&lt;/a&gt;&lt;/code&gt; 関数は &lt;code&gt;name=value&lt;/code&gt; の形式の引数を取り、 &lt;code&gt;setEnv(key,value,True{-overwrite-})&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="f64fc2012cb425156b398f64b5e3be84f23273cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env#v:setEnvironment&quot;&gt;setEnvironment&lt;/a&gt;&lt;/code&gt; resets the entire environment to the given list of &lt;code&gt;(key,value)&lt;/code&gt; pairs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env#v:setEnvironment&quot;&gt;setEnvironment&lt;/a&gt;&lt;/code&gt; は、環境全体を指定された &lt;code&gt;(key,value)&lt;/code&gt; ペアのリストにリセットします。</target>
        </trans-unit>
        <trans-unit id="e4643c36ddd3c482bcd236e8e545490ab553c2dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; looks up a variable in the environment.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; は環境内の変数を検索します。</target>
        </trans-unit>
        <trans-unit id="45ae85a79131db90987ae906284712d80186032c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnvDefault&quot;&gt;getEnvDefault&lt;/a&gt;&lt;/code&gt; is a wrapper around &lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; where the programmer can specify a fallback if the variable is not found in the environment.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnvDefault&quot;&gt;getEnvDefault&lt;/a&gt;&lt;/code&gt; はラッパです &lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; 変数が環境に見つからない場合、プログラマは、フォールバックを指定することができます。</target>
        </trans-unit>
        <trans-unit id="1d18cbcc5157f7be9ed80d4af97fcdb77623d64a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; retrieves the entire environment as a list of &lt;code&gt;(key,value)&lt;/code&gt; pairs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; は、環境全体を &lt;code&gt;(key,value)&lt;/code&gt; ペアのリストとして取得します。</target>
        </trans-unit>
        <trans-unit id="6df8503d7e50a0837aebd3fee4a3c41e23fd2cbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:putEnv&quot;&gt;putEnv&lt;/a&gt;&lt;/code&gt; function takes an argument of the form &lt;code&gt;name=value&lt;/code&gt; and is equivalent to &lt;code&gt;setEnv(key,value,True{-overwrite-})&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:putEnv&quot;&gt;putEnv&lt;/a&gt;&lt;/code&gt; 関数は &lt;code&gt;name=value&lt;/code&gt; の形式の引数を取り、 &lt;code&gt;setEnv(key,value,True{-overwrite-})&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="6c9265b7d41ad37773728bc0c5f02dcfc38e8770" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:createProcessGroup&quot;&gt;createProcessGroup&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to make process &lt;code&gt;pid&lt;/code&gt; a new process group leader. This function is currently deprecated, and might be changed to making the current process a new process group leader in future versions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:createProcessGroup&quot;&gt;createProcessGroup&lt;/a&gt; pid&lt;/code&gt; 呼び出しは &lt;code&gt;setpgid&lt;/code&gt; プロセスを作るため &lt;code&gt;pid&lt;/code&gt; 新しいプロセスグループのリーダーを。この関数は現在非推奨であり、現在のプロセスを将来のバージョンで新しいプロセスグループリーダーにするために変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="afde6d8639aaa455c87557d905849cd65ad38cfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:createProcessGroupFor&quot;&gt;createProcessGroupFor&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to make process &lt;code&gt;pid&lt;/code&gt; a new process group leader.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:createProcessGroupFor&quot;&gt;createProcessGroupFor&lt;/a&gt; pid&lt;/code&gt; 呼び出しは &lt;code&gt;setpgid&lt;/code&gt; プロセスを作るため &lt;code&gt;pid&lt;/code&gt; 新しいプロセスグループのリーダーを。</target>
        </trans-unit>
        <trans-unit id="33add91f94714967891e5a07f35980bf1089bae0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:createSession&quot;&gt;createSession&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;setsid&lt;/code&gt; to create a new session with the current process as session leader.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:createSession&quot;&gt;createSession&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;setsid&lt;/code&gt; を呼び出して、現在のプロセスをセッションリーダーとして新しいセッションを作成します。</target>
        </trans-unit>
        <trans-unit id="245ba1378d38e9bdbe623e874acbfa4bb68bd7dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:executeFile&quot;&gt;executeFile&lt;/a&gt; cmd args env&lt;/code&gt; calls one of the &lt;code&gt;execv*&lt;/code&gt; family, depending on whether or not the current PATH is to be searched for the command, and whether or not an environment is provided to supersede the process's current environment. The basename (leading directory names suppressed) of the command is passed to &lt;code&gt;execv*&lt;/code&gt; as &lt;code&gt;arg[0]&lt;/code&gt;; the argument list passed to &lt;code&gt;&lt;a href=&quot;system-posix-process#v:executeFile&quot;&gt;executeFile&lt;/a&gt;&lt;/code&gt; therefore begins with &lt;code&gt;arg[1]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:executeFile&quot;&gt;executeFile&lt;/a&gt; cmd args env&lt;/code&gt; は、コマンドの現在のPATHを検索するかどうか、およびプロセスの現在の環境に &lt;code&gt;execv*&lt;/code&gt; 環境が提供されているかどうかに応じて、 execv *ファミリーの1つを呼び出します。コマンドのベース名（先頭のディレクトリー名は抑制されます）は &lt;code&gt;arg[0]&lt;/code&gt; として &lt;code&gt;execv*&lt;/code&gt; 渡されます。したがって、 &lt;code&gt;&lt;a href=&quot;system-posix-process#v:executeFile&quot;&gt;executeFile&lt;/a&gt;&lt;/code&gt; に渡される引数リストは &lt;code&gt;arg[1]&lt;/code&gt; 始まります。</target>
        </trans-unit>
        <trans-unit id="4f8a276c3f2654ee2807265a2207fd529c00542f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:exitImmediately&quot;&gt;exitImmediately&lt;/a&gt; status&lt;/code&gt; calls &lt;code&gt;_exit&lt;/code&gt; to terminate the process with the indicated exit &lt;code&gt;status&lt;/code&gt;. The operation never returns.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:exitImmediately&quot;&gt;exitImmediately&lt;/a&gt; status&lt;/code&gt; は &lt;code&gt;_exit&lt;/code&gt; を呼び出して、指定された終了 &lt;code&gt;status&lt;/code&gt; プロセスを終了します。操作は決して戻りません。</target>
        </trans-unit>
        <trans-unit id="b331a44e9f2d96759818096d963d90ff6d61a2b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; comes with a giant warning: since any other running threads are not copied into the child process, it's easy to go wrong: e.g. by accessing some shared resource that was held by another thread in the parent.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; には巨大な警告が付属しています。実行中の他のスレッドは子プロセスにコピーされないため、親の別のスレッドによって保持されている共有リソースにアクセスするなど、簡単に失敗します。</target>
        </trans-unit>
        <trans-unit id="a4692b194fcb7b65a798de44ae9867dce23eaa1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; corresponds to the POSIX &lt;code&gt;fork&lt;/code&gt; system call. The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action passed as an argument is executed in the child process; no other threads will be copied to the child process. On success, &lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; returns the child's &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; to the parent process; in case of an error, an exception is thrown.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; は、POSIX &lt;code&gt;fork&lt;/code&gt; システムコールに対応しています。 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; の引数は子プロセスで実行されるようアクションが渡されました。他のスレッドは子プロセスにコピーされません。成功すると、 &lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; は子の &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; を親プロセスに返します。エラーの場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="af51370316e8fa699d7f1a30060504b482c10353" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; corresponds to the POSIX &lt;code&gt;fork&lt;/code&gt; system call. The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action passed as an argument is executed in the child process; no other threads will be copied to the child process. On success, &lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; returns the child's &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; to the parent process; in case of an error, an exception is thrown.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; はPOSIXに対応する &lt;code&gt;fork&lt;/code&gt; システムコール。 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; の引数は子プロセスで実行されるようアクションが渡されました。他のスレッドは子プロセスにコピーされません。成功すると、 &lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; は子の &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; を親プロセスに返します。エラーの場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="8f1d2a8ff9cd2071e1923b2cfcc5d7d87a6389d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; corresponds to the POSIX &lt;code&gt;fork&lt;/code&gt; system call. The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action passed as an argument is executed in the child process; no other threads will be copied to the child process. On success, &lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; returns the child's &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; to the parent process; in case of an error, an exception is thrown.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; はPOSIXに対応する &lt;code&gt;fork&lt;/code&gt; システムコール。 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; の引数は子プロセスで実行されるようアクションが渡されました。他のスレッドは子プロセスにコピーされません。成功すると、 &lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; は子の &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; を親プロセスに返します。エラーの場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="b809bf2a9fb32b1598e28df2a68a97866ebf61db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any child process if a child process has exited, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; 呼び出しが &lt;code&gt;waitpid&lt;/code&gt; の帰国、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; のと &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; を子プロセスが終了した場合には任意の子プロセスのために、あるいは &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; そこに子プロセスですが、何も終了していない場合。子プロセスがない場合、 &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;isDoesNotExistError&lt;/code&gt; 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="e41dc14e618360849da7757b81e03c6d1da557c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any child process if a child process has exited, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; は &lt;code&gt;waitpid&lt;/code&gt; を呼び出し、子プロセスが終了した場合は任意の子プロセスの &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; を返し、子プロセスは存在するが終了してい &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 場合はNothingを返します。子プロセスがない場合、 &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;isDoesNotExistError&lt;/code&gt; 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="f7975030ef339f57f8b739ffa4b62f6343202a04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any child process if a child process has exited, or &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; は &lt;code&gt;waitpid&lt;/code&gt; を呼び出し、子プロセスが終了した場合は任意の子プロセスの &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; を返し、子プロセスは存在するが終了してい &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 場合はNothingを返します。子プロセスがない場合、 &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;isDoesNotExistError&lt;/code&gt; 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="c98ebfb294b94ec9189fdc4e24a36426044fac82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any process in group &lt;code&gt;pgid&lt;/code&gt; if one is available, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; 呼び出しが &lt;code&gt;waitpid&lt;/code&gt; のない返却、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; のと &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; をグループ内のすべてのプロセスの &lt;code&gt;pgid&lt;/code&gt; が利用可能な場合、または &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; そこに子プロセスがあるが、どれも終了していない場合。子プロセスがない場合、 &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;isDoesNotExistError&lt;/code&gt; 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="4398624eeea97dd37bcf79734f76f75600b92ced" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any process in group &lt;code&gt;pgid&lt;/code&gt; if one is available, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; が &lt;code&gt;waitpid&lt;/code&gt; を呼び出し、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; 、グループ &lt;code&gt;pgid&lt;/code&gt; 内のプロセスが利用可能な場合は &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; を返し、子プロセスはあるが終了していない場合は &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を返します。子プロセスがない場合、 &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;isDoesNotExistError&lt;/code&gt; 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="bbb8ebfa1fa5e6246b434e6f3c6eba8216c90dfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any process in group &lt;code&gt;pgid&lt;/code&gt; if one is available, or &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; が &lt;code&gt;waitpid&lt;/code&gt; を呼び出し、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; 、グループ &lt;code&gt;pgid&lt;/code&gt; 内のプロセスが利用可能な場合は &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; を返し、子プロセスはあるが終了していない場合は &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を返します。子プロセスがない場合、 &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;isDoesNotExistError&lt;/code&gt; 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="fb25d6c41db8f5f6945414c45e95ecdf7eb42feb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpgrp&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; は呼び出す &lt;code&gt;getpgrp&lt;/code&gt; 得るために、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を現在のプロセスのために。</target>
        </trans-unit>
        <trans-unit id="35000f6c82ef3af2376fdde5f80d49175fb12291" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpgrp&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; は呼び出す &lt;code&gt;getpgrp&lt;/code&gt; 得るために、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を現在のプロセスのために。</target>
        </trans-unit>
        <trans-unit id="5991796019dd394e1ec45534d31624d8c121bb7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpgrp&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; は呼び出す &lt;code&gt;getpgrp&lt;/code&gt; 得るために、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を現在のプロセスのために。</target>
        </trans-unit>
        <trans-unit id="2f67b7427ac92b4b61f43521ff5a27e70fd55c8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;getpgid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; 呼び出しは &lt;code&gt;getpgid&lt;/code&gt; 得ることが &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を、プロセスのために &lt;code&gt;pid&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="46a851a447c67bd1371b24ded961af267f234f12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;getpgid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; 呼び出しは &lt;code&gt;getpgid&lt;/code&gt; 得ることが &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を、プロセスのために &lt;code&gt;pid&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="b138365da4eeb52a28677918b3f89469f4bfed6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;getpgid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; 呼び出しは &lt;code&gt;getpgid&lt;/code&gt; 得ることが &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を、プロセスのために &lt;code&gt;pid&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="48849504f015622f71b1e18ff371e828e5bee0ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;getpid&lt;/code&gt; を呼び出して、現在のプロセスの &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="70f9238aecdfcdf1b12e61afd35983097f9772a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;getpid&lt;/code&gt; を呼び出して、現在のプロセスの &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="d5007c570efa387a4c05e2e632719293c7cbd966" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;getpid&lt;/code&gt; を呼び出して、現在のプロセスの &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="decddcab9a19d21de13b036047e55700e721b43c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getppid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the parent of the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; は、呼び出しを &lt;code&gt;getppid&lt;/code&gt; 得ることが &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; のを現在のプロセスの親のために。</target>
        </trans-unit>
        <trans-unit id="7cc151819d797fce9c21a832e6de34540fea1f28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getppid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the parent of the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; は、呼び出しを &lt;code&gt;getppid&lt;/code&gt; 得ることが &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; のを現在のプロセスの親のために。</target>
        </trans-unit>
        <trans-unit id="38ae7c757ce2fee3a04a6b68992ee76d335220e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getppid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the parent of the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; は、呼び出しを &lt;code&gt;getppid&lt;/code&gt; 得ることが &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; のを現在のプロセスの親のために。</target>
        </trans-unit>
        <trans-unit id="9e8af69aea7593c4003bc5ffe850e0a4ff63aa42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; if it is available, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; otherwise. If &lt;code&gt;blk&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WNOHANG&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not. If &lt;code&gt;stopped&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WUNTRACED&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; 呼び出しが &lt;code&gt;waitpid&lt;/code&gt; のない戻って、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; をプロセスのために &lt;code&gt;pid&lt;/code&gt; を、それが利用可能な場合 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; そう。場合は &lt;code&gt;blk&lt;/code&gt; ある &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; の場合、 &lt;code&gt;WNOHANG&lt;/code&gt; がするためのオプションに設定されている &lt;code&gt;waitpid&lt;/code&gt; をそれ以外の場合は、ありません。場合は &lt;code&gt;stopped&lt;/code&gt; ている &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 、その後、 &lt;code&gt;WUNTRACED&lt;/code&gt; をするためのオプションに設定されている &lt;code&gt;waitpid&lt;/code&gt; をそれ以外の場合は、ありません。</target>
        </trans-unit>
        <trans-unit id="579432a4355fa782df05cd3e056646e7b878df3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; if it is available, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; otherwise. If &lt;code&gt;blk&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WNOHANG&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not. If &lt;code&gt;stopped&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WUNTRACED&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; 呼び出しが &lt;code&gt;waitpid&lt;/code&gt; のない戻って、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; をプロセスのために &lt;code&gt;pid&lt;/code&gt; を、それが利用可能な場合 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; そう。場合は &lt;code&gt;blk&lt;/code&gt; ある &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; の場合、 &lt;code&gt;WNOHANG&lt;/code&gt; がするためのオプションに設定されている &lt;code&gt;waitpid&lt;/code&gt; をそれ以外の場合は、ありません。場合は &lt;code&gt;stopped&lt;/code&gt; ている &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 、その後、 &lt;code&gt;WUNTRACED&lt;/code&gt; をするためのオプションに設定されている &lt;code&gt;waitpid&lt;/code&gt; をそれ以外の場合は、ありません。</target>
        </trans-unit>
        <trans-unit id="2d5fe0e0449cc6cb960e7a96be158ccab5d1b241" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; if it is available, &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; otherwise. If &lt;code&gt;blk&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WNOHANG&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not. If &lt;code&gt;stopped&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WUNTRACED&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; は &lt;code&gt;waitpid&lt;/code&gt; を呼び出し、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt; を返します。プロセス &lt;code&gt;pid&lt;/code&gt; が使用可能な場合は &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 返しません。場合は &lt;code&gt;blk&lt;/code&gt; ある &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; の場合、 &lt;code&gt;WNOHANG&lt;/code&gt; がするためのオプションに設定されている &lt;code&gt;waitpid&lt;/code&gt; をそれ以外の場合は、ありません。場合は &lt;code&gt;stopped&lt;/code&gt; ている &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 、その後、 &lt;code&gt;WUNTRACED&lt;/code&gt; をするためのオプションに設定されている &lt;code&gt;waitpid&lt;/code&gt; をそれ以外の場合は、ありません。</target>
        </trans-unit>
        <trans-unit id="f018d81ab726d4c0eb48f687fbe0b88d32709812" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessTimes&quot;&gt;getProcessTimes&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;times&lt;/code&gt; to obtain time-accounting information for the current process and its children.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessTimes&quot;&gt;getProcessTimes&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;times&lt;/code&gt; を呼び出して、現在のプロセスとその子のタイムアカウンティング情報を取得します。</target>
        </trans-unit>
        <trans-unit id="ee83b521f68e9f8ba6aacfaae6c1f93e7e178ebf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; of the current process to &lt;code&gt;pgid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; 呼び出しは &lt;code&gt;setpgid&lt;/code&gt; 設定する &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; に、現在のプロセスのを &lt;code&gt;pgid&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b7a1554e08d9805f8d7b85b2bcb9156a604fe233" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; of the current process to &lt;code&gt;pgid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; 呼び出しは &lt;code&gt;setpgid&lt;/code&gt; 設定する &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; に、現在のプロセスのを &lt;code&gt;pgid&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="48af742bcf43ee992a53b9aa78d7ce9e8edcb5e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; of the current process to &lt;code&gt;pgid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; 呼び出しは &lt;code&gt;setpgid&lt;/code&gt; 設定する &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; に、現在のプロセスのを &lt;code&gt;pgid&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="72301bac429c0fcb4bdd937a5f747b9535a5d2a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt;. This function is currently deprecated, and might be changed to setting the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process in future versions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; 呼び出しは &lt;code&gt;setpgid&lt;/code&gt; 設定する &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を、プロセスのための &lt;code&gt;pid&lt;/code&gt; に &lt;code&gt;pgid&lt;/code&gt; 。この関数は現在非推奨であり、将来のバージョンでは現在のプロセスの &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; の設定に変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="0cc89a927ba375b64508c726899bf6a65979b8bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt;. This function is currently deprecated, and might be changed to setting the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process in future versions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; 呼び出しは &lt;code&gt;setpgid&lt;/code&gt; 設定する &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を、プロセスのための &lt;code&gt;pid&lt;/code&gt; に &lt;code&gt;pgid&lt;/code&gt; 。この関数は現在非推奨であり、将来のバージョンで現在のプロセスの &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を設定するように変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="60ab4dcebe9b47b7da31ea70fb599201469e01c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt;. This function is currently deprecated, and might be changed to setting the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process in future versions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; 呼び出しは &lt;code&gt;setpgid&lt;/code&gt; 設定する &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を、プロセスのための &lt;code&gt;pid&lt;/code&gt; に &lt;code&gt;pgid&lt;/code&gt; 。この関数は現在非推奨であり、将来のバージョンで現在のプロセスの &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を設定するように変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="6326a70dbe10166b3d108453064f69feb6545960" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:setProcessGroupIDOf&quot;&gt;setProcessGroupIDOf&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;ProcessGroupIDOf&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:setProcessGroupIDOf&quot;&gt;setProcessGroupIDOf&lt;/a&gt; pid pgid&lt;/code&gt; 呼び出しは &lt;code&gt;setpgid&lt;/code&gt; 設定する &lt;code&gt;ProcessGroupIDOf&lt;/code&gt; を、プロセスのための &lt;code&gt;pid&lt;/code&gt; に &lt;code&gt;pgid&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="49bd46c02e8acf48d5c4c4f61e50fb216e1bf2b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:createProcessGroup&quot;&gt;createProcessGroup&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to make process &lt;code&gt;pid&lt;/code&gt; a new process group leader. This function is currently deprecated, and might be changed to making the current process a new process group leader in future versions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:createProcessGroup&quot;&gt;createProcessGroup&lt;/a&gt; pid&lt;/code&gt; 呼び出しは &lt;code&gt;setpgid&lt;/code&gt; プロセスを作るため &lt;code&gt;pid&lt;/code&gt; 新しいプロセスグループのリーダーを。この関数は現在非推奨であり、現在のプロセスを将来のバージョンで新しいプロセスグループリーダーにするために変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="bdaf0e0f4ace757b290ce823bf71937210469424" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:createProcessGroupFor&quot;&gt;createProcessGroupFor&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to make process &lt;code&gt;pid&lt;/code&gt; a new process group leader.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:createProcessGroupFor&quot;&gt;createProcessGroupFor&lt;/a&gt; pid&lt;/code&gt; 呼び出しは &lt;code&gt;setpgid&lt;/code&gt; プロセスを作るため &lt;code&gt;pid&lt;/code&gt; 新しいプロセスグループのリーダーを。</target>
        </trans-unit>
        <trans-unit id="469b4647b75bb623290b754f947b421cc558a3a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:createSession&quot;&gt;createSession&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;setsid&lt;/code&gt; to create a new session with the current process as session leader.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:createSession&quot;&gt;createSession&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;setsid&lt;/code&gt; を呼び出して、現在のプロセスをセッションリーダーとして新しいセッションを作成します。</target>
        </trans-unit>
        <trans-unit id="3b6263bdcc9198f197573ea3e7bff7fd1a1f9b98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:executeFile&quot;&gt;executeFile&lt;/a&gt; cmd args env&lt;/code&gt; calls one of the &lt;code&gt;execv*&lt;/code&gt; family, depending on whether or not the current PATH is to be searched for the command, and whether or not an environment is provided to supersede the process's current environment. The basename (leading directory names suppressed) of the command is passed to &lt;code&gt;execv*&lt;/code&gt; as &lt;code&gt;arg[0]&lt;/code&gt;; the argument list passed to &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:executeFile&quot;&gt;executeFile&lt;/a&gt;&lt;/code&gt; therefore begins with &lt;code&gt;arg[1]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:executeFile&quot;&gt;executeFile&lt;/a&gt; cmd args env&lt;/code&gt; は、コマンドの現在のPATHを検索するかどうか、およびプロセスの現在の環境に &lt;code&gt;execv*&lt;/code&gt; 環境が提供されているかどうかに応じて、 execv *ファミリーの1つを呼び出します。コマンドのベース名（先頭のディレクトリー名は抑制されます）は &lt;code&gt;arg[0]&lt;/code&gt; として &lt;code&gt;execv*&lt;/code&gt; 渡されます。したがって、 &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:executeFile&quot;&gt;executeFile&lt;/a&gt;&lt;/code&gt; に渡される引数リストは &lt;code&gt;arg[1]&lt;/code&gt; 始まります。</target>
        </trans-unit>
        <trans-unit id="f62df387d69aa46aebb9fd22e8170de79505247a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:exitImmediately&quot;&gt;exitImmediately&lt;/a&gt; status&lt;/code&gt; calls &lt;code&gt;_exit&lt;/code&gt; to terminate the process with the indicated exit &lt;code&gt;status&lt;/code&gt;. The operation never returns.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:exitImmediately&quot;&gt;exitImmediately&lt;/a&gt; status&lt;/code&gt; は &lt;code&gt;_exit&lt;/code&gt; を呼び出して、指定された終了 &lt;code&gt;status&lt;/code&gt; プロセスを終了します。操作は決して戻りません。</target>
        </trans-unit>
        <trans-unit id="b6fbeeb193386e128dd8791d9dbb3d92d21dddff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; comes with a giant warning: since any other running threads are not copied into the child process, it's easy to go wrong: e.g. by accessing some shared resource that was held by another thread in the parent.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; には巨大な警告が付属しています。実行中の他のスレッドは子プロセスにコピーされないため、親の別のスレッドによって保持されている共有リソースにアクセスするなど、簡単に失敗します。</target>
        </trans-unit>
        <trans-unit id="d58c670bbc1937d16c9525d1af1ece17d42e24b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; corresponds to the POSIX &lt;code&gt;fork&lt;/code&gt; system call. The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action passed as an argument is executed in the child process; no other threads will be copied to the child process. On success, &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; returns the child's &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; to the parent process; in case of an error, an exception is thrown.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; は、POSIX &lt;code&gt;fork&lt;/code&gt; システムコールに対応しています。 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; の引数は子プロセスで実行されるようアクションが渡されました。他のスレッドは子プロセスにコピーされません。成功すると、 &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; は子の &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; を親プロセスに返します。エラーの場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="1d73f9a1ea23a3c6cbe77983b6fc1fcbe1c10802" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; corresponds to the POSIX &lt;code&gt;fork&lt;/code&gt; system call. The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action passed as an argument is executed in the child process; no other threads will be copied to the child process. On success, &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; returns the child's &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; to the parent process; in case of an error, an exception is thrown.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; はPOSIXに対応する &lt;code&gt;fork&lt;/code&gt; システムコール。 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; の引数は子プロセスで実行されるようアクションが渡されました。他のスレッドは子プロセスにコピーされません。成功すると、 &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; は子の &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; を親プロセスに返します。エラーの場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="aea05c694193d1ce00d121b44347935697bdd26f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; corresponds to the POSIX &lt;code&gt;fork&lt;/code&gt; system call. The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action passed as an argument is executed in the child process; no other threads will be copied to the child process. On success, &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; returns the child's &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; to the parent process; in case of an error, an exception is thrown.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; はPOSIXに対応する &lt;code&gt;fork&lt;/code&gt; システムコール。 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; の引数は子プロセスで実行されるようアクションが渡されました。他のスレッドは子プロセスにコピーされません。成功すると、 &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; は子の &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; を親プロセスに返します。エラーの場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="5c78fd307d5e5a42736a557bf89bf2c903970904" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any child process if a child process has exited, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; 呼び出しが &lt;code&gt;waitpid&lt;/code&gt; の帰国、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; のと &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; を子プロセスが終了した場合には任意の子プロセスのために、あるいは &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; そこに子プロセスですが、何も終了していない場合。子プロセスがない場合、 &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;isDoesNotExistError&lt;/code&gt; 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="58aa010afbdea9f9c683c6e4ae48ebc9ed80f53a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any child process if a child process has exited, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; は &lt;code&gt;waitpid&lt;/code&gt; を呼び出し、子プロセスが終了した場合は任意の子プロセスの &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; を返し、子プロセスは存在するが終了してい &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 場合はNothingを返します。子プロセスがない場合、 &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;isDoesNotExistError&lt;/code&gt; 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="f3ce849ff26b923e93b7aa1bdb3cf772b8831229" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any child process if a child process has exited, or &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; は &lt;code&gt;waitpid&lt;/code&gt; を呼び出し、子プロセスが終了した場合は任意の子プロセスの &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; を返し、子プロセスは存在するが終了してい &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 場合はNothingを返します。子プロセスがない場合、 &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;isDoesNotExistError&lt;/code&gt; 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="b0156321aba7322067db6b6b754a4fa5290e04b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any process in group &lt;code&gt;pgid&lt;/code&gt; if one is available, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; 呼び出しが &lt;code&gt;waitpid&lt;/code&gt; のない返却、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; のと &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; をグループ内のすべてのプロセスの &lt;code&gt;pgid&lt;/code&gt; が利用可能な場合、または &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; そこに子プロセスがあるが、どれも終了していない場合。子プロセスがない場合、 &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;isDoesNotExistError&lt;/code&gt; 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="af035c09a69441b421533cd8e0b957536055b1f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any process in group &lt;code&gt;pgid&lt;/code&gt; if one is available, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; が &lt;code&gt;waitpid&lt;/code&gt; を呼び出し、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; 、グループ &lt;code&gt;pgid&lt;/code&gt; 内のプロセスが利用可能な場合は &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; を返し、子プロセスはあるが終了していない場合は &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を返します。子プロセスがない場合、 &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;isDoesNotExistError&lt;/code&gt; 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="660d26c26eca2d2fda91264be28c86607082c64d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any process in group &lt;code&gt;pgid&lt;/code&gt; if one is available, or &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; が &lt;code&gt;waitpid&lt;/code&gt; を呼び出し、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; 、グループ &lt;code&gt;pgid&lt;/code&gt; 内のプロセスが利用可能な場合は &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; を返し、子プロセスはあるが終了していない場合は &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を返します。子プロセスがない場合、 &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;isDoesNotExistError&lt;/code&gt; 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="87c9e9b139b243bcf78e76dd75ea702542d69581" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpgrp&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; は呼び出す &lt;code&gt;getpgrp&lt;/code&gt; 得るために、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を現在のプロセスのために。</target>
        </trans-unit>
        <trans-unit id="e0c4fd79c2ba2ad4684e017c47b25f789ff7ad57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpgrp&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; は呼び出す &lt;code&gt;getpgrp&lt;/code&gt; 得るために、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を現在のプロセスのために。</target>
        </trans-unit>
        <trans-unit id="5f2cc963d2d2a65c26a2655ecb3dcbaaf4c55754" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpgrp&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; は呼び出す &lt;code&gt;getpgrp&lt;/code&gt; 得るために、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を現在のプロセスのために。</target>
        </trans-unit>
        <trans-unit id="74dd1b917e9a69953bf4b8c937d8de8237d2dc57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;getpgid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; 呼び出しは &lt;code&gt;getpgid&lt;/code&gt; 得ることが &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を、プロセスのために &lt;code&gt;pid&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="2722768d62346c78e55322c9c90b517d3798beb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;getpgid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; 呼び出しは &lt;code&gt;getpgid&lt;/code&gt; 得ることが &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を、プロセスのために &lt;code&gt;pid&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="51d0c86f3d13ee6081a88815d65cd1bd72eb7628" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;getpgid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; 呼び出しは &lt;code&gt;getpgid&lt;/code&gt; 得ることが &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を、プロセスのために &lt;code&gt;pid&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="54cca06453c3413022dab30e1c4b8ad600d8a92b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;getpid&lt;/code&gt; を呼び出して、現在のプロセスの &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="2ac8b6dd9e674ed076100afb6b8f72517c55a5a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;getpid&lt;/code&gt; を呼び出して、現在のプロセスの &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="c207ceaae7307bc69a71a688a36e0ea8b3e20c4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;getpid&lt;/code&gt; を呼び出して、現在のプロセスの &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="79de4d0dd36d60e8d1af122d16523600e029dc2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getppid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the parent of the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; は、呼び出しを &lt;code&gt;getppid&lt;/code&gt; 得ることが &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; のを現在のプロセスの親のために。</target>
        </trans-unit>
        <trans-unit id="a6332a3dd49bea9bab89b165d20990868c0b72be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getppid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the parent of the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; は、呼び出しを &lt;code&gt;getppid&lt;/code&gt; 得ることが &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; のを現在のプロセスの親のために。</target>
        </trans-unit>
        <trans-unit id="e333568d50adfada18c68cdec8504f799e36fa0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getppid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the parent of the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; は、呼び出しを &lt;code&gt;getppid&lt;/code&gt; 得ることが &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; のを現在のプロセスの親のために。</target>
        </trans-unit>
        <trans-unit id="8a4c674b6cb46e258db01fef8f8501dd6db5f62c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; if it is available, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; otherwise. If &lt;code&gt;blk&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WNOHANG&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not. If &lt;code&gt;stopped&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WUNTRACED&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; 呼び出しが &lt;code&gt;waitpid&lt;/code&gt; のない戻って、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; をプロセスのために &lt;code&gt;pid&lt;/code&gt; を、それが利用可能な場合 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; そう。場合は &lt;code&gt;blk&lt;/code&gt; ある &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; の場合、 &lt;code&gt;WNOHANG&lt;/code&gt; がするためのオプションに設定されている &lt;code&gt;waitpid&lt;/code&gt; をそれ以外の場合は、ありません。場合は &lt;code&gt;stopped&lt;/code&gt; ている &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 、その後、 &lt;code&gt;WUNTRACED&lt;/code&gt; をするためのオプションに設定されている &lt;code&gt;waitpid&lt;/code&gt; をそれ以外の場合は、ありません。</target>
        </trans-unit>
        <trans-unit id="65781d113566d57dadcf38da291555269df6461a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; if it is available, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; otherwise. If &lt;code&gt;blk&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WNOHANG&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not. If &lt;code&gt;stopped&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WUNTRACED&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; 呼び出しが &lt;code&gt;waitpid&lt;/code&gt; のない戻って、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; をプロセスのために &lt;code&gt;pid&lt;/code&gt; を、それが利用可能な場合 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; そう。場合は &lt;code&gt;blk&lt;/code&gt; ある &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; の場合、 &lt;code&gt;WNOHANG&lt;/code&gt; がするためのオプションに設定されている &lt;code&gt;waitpid&lt;/code&gt; をそれ以外の場合は、ありません。場合は &lt;code&gt;stopped&lt;/code&gt; ている &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 、その後、 &lt;code&gt;WUNTRACED&lt;/code&gt; をするためのオプションに設定されている &lt;code&gt;waitpid&lt;/code&gt; をそれ以外の場合は、ありません。</target>
        </trans-unit>
        <trans-unit id="a4ba3d25ada57e9c04b1cb8153c41ebfcc5fe191" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; if it is available, &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; otherwise. If &lt;code&gt;blk&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WNOHANG&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not. If &lt;code&gt;stopped&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WUNTRACED&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; は &lt;code&gt;waitpid&lt;/code&gt; を呼び出し、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt; を返します。プロセス &lt;code&gt;pid&lt;/code&gt; が使用可能な場合は &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 返しません。場合は &lt;code&gt;blk&lt;/code&gt; ある &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; の場合、 &lt;code&gt;WNOHANG&lt;/code&gt; がするためのオプションに設定されている &lt;code&gt;waitpid&lt;/code&gt; をそれ以外の場合は、ありません。場合は &lt;code&gt;stopped&lt;/code&gt; ている &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 、その後、 &lt;code&gt;WUNTRACED&lt;/code&gt; をするためのオプションに設定されている &lt;code&gt;waitpid&lt;/code&gt; をそれ以外の場合は、ありません。</target>
        </trans-unit>
        <trans-unit id="d7311896f40e30cb5781949c817e42696c43aed9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessTimes&quot;&gt;getProcessTimes&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;times&lt;/code&gt; to obtain time-accounting information for the current process and its children.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessTimes&quot;&gt;getProcessTimes&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;times&lt;/code&gt; を呼び出して、現在のプロセスとその子のタイムアカウンティング情報を取得します。</target>
        </trans-unit>
        <trans-unit id="b6c595a2d722abb1bcf2e66915b65efc8d9368e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; of the current process to &lt;code&gt;pgid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; 呼び出しは &lt;code&gt;setpgid&lt;/code&gt; 設定する &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; に、現在のプロセスのを &lt;code&gt;pgid&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="240034462e5baf7004d022d107b82e4b88ad9176" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; of the current process to &lt;code&gt;pgid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; 呼び出しは &lt;code&gt;setpgid&lt;/code&gt; 設定する &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; に、現在のプロセスのを &lt;code&gt;pgid&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="91763c68c3a83d4eacdbd9627549a06c514228b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; of the current process to &lt;code&gt;pgid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; 呼び出しは &lt;code&gt;setpgid&lt;/code&gt; 設定する &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; に、現在のプロセスのを &lt;code&gt;pgid&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2dc571de8e85d6e8e708d01bd91d87adf802e837" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt;. This function is currently deprecated, and might be changed to setting the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process in future versions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; 呼び出しは &lt;code&gt;setpgid&lt;/code&gt; 設定する &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を、プロセスのための &lt;code&gt;pid&lt;/code&gt; に &lt;code&gt;pgid&lt;/code&gt; 。この関数は現在非推奨であり、将来のバージョンでは現在のプロセスの &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; の設定に変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="fa3ce82401a2804b5bdee5fc9addab00f4af2750" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt;. This function is currently deprecated, and might be changed to setting the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process in future versions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; 呼び出しは &lt;code&gt;setpgid&lt;/code&gt; 設定する &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を、プロセスのための &lt;code&gt;pid&lt;/code&gt; に &lt;code&gt;pgid&lt;/code&gt; 。この関数は現在非推奨であり、将来のバージョンで現在のプロセスの &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を設定するように変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="f22d7996f8ba63b0049c2e6120ca5af6ac8f305b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt;. This function is currently deprecated, and might be changed to setting the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process in future versions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; 呼び出しは &lt;code&gt;setpgid&lt;/code&gt; 設定する &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を、プロセスのための &lt;code&gt;pid&lt;/code&gt; に &lt;code&gt;pgid&lt;/code&gt; 。この関数は現在非推奨であり、将来のバージョンで現在のプロセスの &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; を設定するように変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="53ceb7acc2877b94d34a92c5a21115598457dc92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:setProcessGroupIDOf&quot;&gt;setProcessGroupIDOf&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;ProcessGroupIDOf&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:setProcessGroupIDOf&quot;&gt;setProcessGroupIDOf&lt;/a&gt; pid pgid&lt;/code&gt; 呼び出しは &lt;code&gt;setpgid&lt;/code&gt; 設定する &lt;code&gt;ProcessGroupIDOf&lt;/code&gt; を、プロセスのための &lt;code&gt;pid&lt;/code&gt; に &lt;code&gt;pgid&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="15c39aa4ff44d160dd0591f998e5da759c4de9d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-temp-bytestring#v:mkstemps&quot;&gt;mkstemps&lt;/a&gt;&lt;/code&gt; - make a unique filename with a given prefix and suffix and open it for reading/writing (only safe on GHC &amp;amp; Hugs). The returned &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#t:RawFilePath&quot;&gt;RawFilePath&lt;/a&gt;&lt;/code&gt; is the (possibly relative) path of the created file, which contains 6 random characters in between the prefix and suffix.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-temp-bytestring#v:mkstemps&quot;&gt;mkstemps&lt;/a&gt;&lt;/code&gt; -特定の接頭辞と接尾辞を使用して一意のファイル名を作成し、読み取り/書き込み用に開きます（GHCおよびHugsでのみ安全）。返される &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#t:RawFilePath&quot;&gt;RawFilePath&lt;/a&gt;&lt;/code&gt; は、作成されたファイルの（おそらく相対）パスで、プレフィックスとサフィックスの間にランダムな6文字が含まれています。</target>
        </trans-unit>
        <trans-unit id="46bea2aa50741b2e7f2386613326bfd099a95d84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-process#v:createProcess&quot;&gt;createProcess&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;(&lt;em&gt;mb_stdin_hdl&lt;/em&gt;, &lt;em&gt;mb_stdout_hdl&lt;/em&gt;, &lt;em&gt;mb_stderr_hdl&lt;/em&gt;, &lt;em&gt;ph&lt;/em&gt;)&lt;/code&gt;, where</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-process#v:createProcess&quot;&gt;createProcess&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;(&lt;em&gt;mb_stdin_hdl&lt;/em&gt;, &lt;em&gt;mb_stdout_hdl&lt;/em&gt;, &lt;em&gt;mb_stderr_hdl&lt;/em&gt;, &lt;em&gt;ph&lt;/em&gt;)&lt;/code&gt; 返します。ここで、</target>
        </trans-unit>
        <trans-unit id="de0c3cc659c266f87b433652ed3e05f145a2368e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-process#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; can be set in CreateProcess since 1.5.0.0 in order to create an I/O completion port to monitor a process tree's progress on Windows.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-process#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; Windowsでプロセスツリーの進行状況を監視するI / O完了ポートを作成するために、1.5.0.0以降、 createProcessでuse_process_jobsを設定できます。</target>
        </trans-unit>
        <trans-unit id="d33ffc652cd6edf400a46276eaaa778541643378" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-process-internals#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; can be set in CreateProcess since 1.5.0.0 in order to create an I/O completion port to monitor a process tree's progress on Windows.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-process-internals#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; Windowsでプロセスツリーの進行状況を監視するI / O完了ポートを作成するために、1.5.0.0以降、 createProcessでuse_process_jobsを設定できます。</target>
        </trans-unit>
        <trans-unit id="7f52a0c6f660fe927ed21e05a3a1360d4ea9efe9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-parsec#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; . &lt;a href=&quot;text-parsec#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt;&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; equivalent to &lt;code&gt;&lt;a href=&quot;text-parsec#v:lookAhead&quot;&gt;lookAhead&lt;/a&gt;&lt;/code&gt;, and</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsec#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; . &lt;a href=&quot;text-parsec#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt;&lt;/code&gt; あり&lt;em&gt;ません&lt;/em&gt;に相当 &lt;code&gt;&lt;a href=&quot;text-parsec#v:lookAhead&quot;&gt;lookAhead&lt;/a&gt;&lt;/code&gt; し、</target>
        </trans-unit>
        <trans-unit id="68c49529901eea1e0cb2b493adedce1abc8b1a33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-parsec#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; &lt;a href=&quot;text-parsec#v:eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt;&lt;em&gt;never&lt;/em&gt; fails.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsec#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; &lt;a href=&quot;text-parsec#v:eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; &lt;em&gt;が&lt;/em&gt;失敗する&lt;em&gt;ことはありませ&lt;/em&gt;ん。</target>
        </trans-unit>
        <trans-unit id="3af5a9904d9710409de9c4aebdf7e5361ebc65a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; . &lt;a href=&quot;text-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt;&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; equivalent to &lt;code&gt;&lt;a href=&quot;text-parsec-combinator#v:lookAhead&quot;&gt;lookAhead&lt;/a&gt;&lt;/code&gt;, and</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; . &lt;a href=&quot;text-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt;&lt;/code&gt; あり&lt;em&gt;ません&lt;/em&gt;に相当 &lt;code&gt;&lt;a href=&quot;text-parsec-combinator#v:lookAhead&quot;&gt;lookAhead&lt;/a&gt;&lt;/code&gt; し、</target>
        </trans-unit>
        <trans-unit id="92803927bf6a1f9b9f8b4ddc08877befa5fdd4e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; &lt;a href=&quot;text-parsec-combinator#v:eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt;&lt;em&gt;never&lt;/em&gt; fails.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; &lt;a href=&quot;text-parsec-combinator#v:eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; &lt;em&gt;が&lt;/em&gt;失敗する&lt;em&gt;ことはありませ&lt;/em&gt;ん。</target>
        </trans-unit>
        <trans-unit id="35e8fcc93dfde1032e0672527b4aa4de752f9942" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; . &lt;a href=&quot;text-parsercombinators-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt;&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; equivalent to &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-combinator#v:lookAhead&quot;&gt;lookAhead&lt;/a&gt;&lt;/code&gt;, and</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; . &lt;a href=&quot;text-parsercombinators-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt;&lt;/code&gt; あり&lt;em&gt;ません&lt;/em&gt;に相当 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-combinator#v:lookAhead&quot;&gt;lookAhead&lt;/a&gt;&lt;/code&gt; し、</target>
        </trans-unit>
        <trans-unit id="d6635c77539cf16fd391ec1952c7c92332d159d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; &lt;a href=&quot;text-parsercombinators-parsec-combinator#v:eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt;&lt;em&gt;never&lt;/em&gt; fails.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; &lt;a href=&quot;text-parsercombinators-parsec-combinator#v:eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; &lt;em&gt;が&lt;/em&gt;失敗する&lt;em&gt;ことはありませ&lt;/em&gt;ん。</target>
        </trans-unit>
        <trans-unit id="df3d9cbc949cf6333e88d0ebc550d9fdbbf76c29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; is associative, with identity &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, and also satisfies</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; は結合性があり、IDは &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; で、また次の条件を満たす</target>
        </trans-unit>
        <trans-unit id="141a47d100bf17a87275869021f7f3028622c513" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:text&quot;&gt;text&lt;/a&gt; &quot;&quot; &lt;a href=&quot;text-prettyprint-annotated#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; x = x&lt;/code&gt;, if &lt;code&gt;x&lt;/code&gt; non-empty</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:text&quot;&gt;text&lt;/a&gt; &quot;&quot; &lt;a href=&quot;text-prettyprint-annotated#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; x = x&lt;/code&gt; 、 &lt;code&gt;x&lt;/code&gt; が空でない場合</target>
        </trans-unit>
        <trans-unit id="457174c44b409f24e8791008f7651eca30c9c696" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; is associative, with identity &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, and also satisfies</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; は結合性があり、IDは &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; で、また次の条件を満たす</target>
        </trans-unit>
        <trans-unit id="26226ef68095c42422efb5c3d8302ac36a4708d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:text&quot;&gt;text&lt;/a&gt; &quot;&quot; &lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; x = x&lt;/code&gt;, if &lt;code&gt;x&lt;/code&gt; non-empty</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:text&quot;&gt;text&lt;/a&gt; &quot;&quot; &lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; x = x&lt;/code&gt; 、 &lt;code&gt;x&lt;/code&gt; が空でない場合</target>
        </trans-unit>
        <trans-unit id="45c2291fca5d52ef3b8e385c5f03a12ad549a5f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; is associative, with identity &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, and also satisfies</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; は結合性があり、IDは &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; で、また次の条件を満たす</target>
        </trans-unit>
        <trans-unit id="a32bc610caedfebea4dc059d18e1763813e85b09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:text&quot;&gt;text&lt;/a&gt; &quot;&quot; &lt;a href=&quot;text-prettyprint-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; x = x&lt;/code&gt;, if &lt;code&gt;x&lt;/code&gt; non-empty</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:text&quot;&gt;text&lt;/a&gt; &quot;&quot; &lt;a href=&quot;text-prettyprint-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; x = x&lt;/code&gt; 、 &lt;code&gt;x&lt;/code&gt; が空でない場合</target>
        </trans-unit>
        <trans-unit id="725f5858e606954b65734f12a822508079606c02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-printf#v:printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; is also extensible to support other types: see below.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-printf#v:printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; は、他のタイプをサポートするように拡張することもできます。以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="0644a1d5dabe87d85072f10dfb2b9115091ba3c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; instance:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; インスタンスを読み取る：</target>
        </trans-unit>
        <trans-unit id="dd9cd267df7fcaca555ff4ca74cb25cf9a34b68b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; functions for the argument type. The default implementation using standard list syntax is correct for most types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; に基づい型コンストラクタを適用するための機能 &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; 引数の型のために機能します。標準のリスト構文を使用したデフォルトの実装は、ほとんどのタイプに適しています。</target>
        </trans-unit>
        <trans-unit id="38cb59ebfa0eac4e107f95758f79cf34e98d7c15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; functions for the argument types. The default implementation using standard list syntax is correct for most types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; に基づい型コンストラクタを適用するための機能 &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; 引数の型のために機能します。標準のリスト構文を使用したデフォルトの実装は、ほとんどのタイプに適しています。</target>
        </trans-unit>
        <trans-unit id="bdfeef58efc61d05d69245dec05258ba6ce9073b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; functions for the argument type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; に基づい型コンストラクタを適用するための機能 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; 引数の型のために機能します。</target>
        </trans-unit>
        <trans-unit id="6197b43c339862398a73fc7613d833b3a16c5f39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; functions for the argument types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; に基づい型コンストラクタを適用するための機能 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; 引数の型のために機能します。</target>
        </trans-unit>
        <trans-unit id="8db3b7b54f5fc83a3fcfd970477f8aebb48a3cec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt; p&lt;/code&gt; parses what &lt;code&gt;p&lt;/code&gt; parses, but optionally surrounded with parentheses.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt; p&lt;/code&gt; パース何 &lt;code&gt;p&lt;/code&gt; パースが、必要に応じて括弧で囲まれています。</target>
        </trans-unit>
        <trans-unit id="2044ace9d85fa680cc478309bd2f2ded048a2b39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt; p&lt;/code&gt; parses what &lt;code&gt;p&lt;/code&gt; parses, but surrounded with parentheses.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt; p&lt;/code&gt; パース何 &lt;code&gt;p&lt;/code&gt; パースが、括弧で囲まれています。</target>
        </trans-unit>
        <trans-unit id="2a9ff89d616e39145786ac040250d647eab33b9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; functions for the argument type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; に基づい型コンストラクタを適用するための機能 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; 引数の型のために機能します。</target>
        </trans-unit>
        <trans-unit id="5e6189616d11fa36d845ab24a61e5678894ac658" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; functions for the argument types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; に基づい型コンストラクタを適用するための機能 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; 引数の型のために機能します。</target>
        </trans-unit>
        <trans-unit id="b0d3b65253e1a0e79d545366904f567a7720fddd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt;, on the other hand, is based on a much more efficient &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readprec#t:ReadPrec&quot;&gt;ReadPrec&lt;/a&gt;&lt;/code&gt; datatype (a.k.a &quot;new-style parsers&quot;), but its definition relies on the use of the &lt;code&gt;RankNTypes&lt;/code&gt; language extension. Therefore, &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; (and its cousin, &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt;) are marked as GHC-only. Nevertheless, it is recommended to use &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;prelude#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; whenever possible for the efficiency improvements it brings.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; は、他の一方で、はるかに効率的に基づいている &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readprec#t:ReadPrec&quot;&gt;ReadPrec&lt;/a&gt;&lt;/code&gt; データ型（別名「新しいスタイルのパーサ」）が、その定義はの使用に依存している &lt;code&gt;RankNTypes&lt;/code&gt; の言語拡張。したがって、 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; （およびその従兄弟の &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; ）はGHCのみとしてマークされます。それでも、可能な限り、 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 代わりに &lt;code&gt;&lt;a href=&quot;prelude#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; を使用して、効率を向上させることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b44fdded4467ee56f959686fa369301287106b0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt;, on the other hand, is based on a much more efficient &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readprec#t:ReadPrec&quot;&gt;ReadPrec&lt;/a&gt;&lt;/code&gt; datatype (a.k.a &quot;new-style parsers&quot;), but its definition relies on the use of the &lt;code&gt;RankNTypes&lt;/code&gt; language extension. Therefore, &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; (and its cousin, &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt;) are marked as GHC-only. Nevertheless, it is recommended to use &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; whenever possible for the efficiency improvements it brings.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; は、他の一方で、はるかに効率的に基づいている &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readprec#t:ReadPrec&quot;&gt;ReadPrec&lt;/a&gt;&lt;/code&gt; データ型（別名「新しいスタイルのパーサ」）が、その定義はの使用に依存している &lt;code&gt;RankNTypes&lt;/code&gt; の言語拡張。したがって、 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; （およびその従兄弟の &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; ）はGHCのみとしてマークされます。それでも、可能な限り、 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 代わりに &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; を使用して、効率を向上させることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c25a064a5394131ced760c05653fc84a47396bf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; functions for the argument type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; に基づい型コンストラクタを適用するための機能 &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; 引数の型のために機能します。</target>
        </trans-unit>
        <trans-unit id="c55e89dc1b131b2fd55b8fd8b3cb60cfb042c4be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; functions for the argument types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; に基づい型コンストラクタを適用するための機能 &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; 引数の型のために機能します。</target>
        </trans-unit>
        <trans-unit id="13c815201524120824766c3dddd2008bb519e427" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; instance:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; インスタンスを表示：</target>
        </trans-unit>
        <trans-unit id="83e49af0b446f9ab9986d2b037bf28032ad9c217" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt;ing a value of type &lt;code&gt;&lt;a href=&quot;data-dynamic#t:Dynamic&quot;&gt;Dynamic&lt;/a&gt;&lt;/code&gt; returns a pretty-printed representation of the object's type; useful for debugging.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; タイプ &lt;code&gt;&lt;a href=&quot;data-dynamic#t:Dynamic&quot;&gt;Dynamic&lt;/a&gt;&lt;/code&gt; の値を表示すると、オブジェクトのタイプのきれいに表示された表現が返されます。デバッグに役立ちます。</target>
        </trans-unit>
        <trans-unit id="12e1a13168f31f937931e2e70ce16a2f67a0264d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#v:show&quot;&gt;show&lt;/a&gt; (Leaf 1 :^: Leaf 2 :^: Leaf 3)&lt;/code&gt; produces the string &lt;code&gt;&quot;Leaf 1 :^: (Leaf 2 :^: Leaf 3)&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-show#v:show&quot;&gt;show&lt;/a&gt; (Leaf 1 :^: Leaf 2 :^: Leaf 3)&lt;/code&gt; は、文字列 &lt;code&gt;&quot;Leaf 1 :^: (Leaf 2 :^: Leaf 3)&quot;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="f872106d8005b7af4744ef31052e2ecc016fcb23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; functions for the argument type. The default implementation using standard list syntax is correct for most types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; に基づい型コンストラクタを適用するための機能 &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; 引数の型のために機能します。標準のリスト構文を使用したデフォルトの実装は、ほとんどのタイプに適しています。</target>
        </trans-unit>
        <trans-unit id="23c5fb4ec796298a072bbc0df7dcab65babeaf7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; functions for the argument types. The default implementation using standard list syntax is correct for most types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; に基づい型コンストラクタを適用するための機能 &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; 引数の型のために機能します。標準のリスト構文を使用したデフォルトの実装は、ほとんどのタイプに適しています。</target>
        </trans-unit>
        <trans-unit id="b35b80b86962fdcf1594ced86e6e8402d3fdb4b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; functions for the argument type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; に基づい型コンストラクタを適用するための機能 &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; 引数の型のために機能します。</target>
        </trans-unit>
        <trans-unit id="2cb41c0ec80e9802efc6886fc457bc595361ca2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; functions for the argument types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; に基づい型コンストラクタを適用するための機能 &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; 引数の型のために機能します。</target>
        </trans-unit>
        <trans-unit id="e18c8f572d4c964d5cef3f1b56f579716e61ef57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; should satisfy the law</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; は法律を満たしている必要があります</target>
        </trans-unit>
        <trans-unit id="8452d2c7d8573e6d8d7eebb138d036b0ba6609e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;trace-hpc-mix#t:Mix&quot;&gt;Mix&lt;/a&gt;&lt;/code&gt; is the information about a modules static properties, like location of Tix's in a file.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;trace-hpc-mix#t:Mix&quot;&gt;Mix&lt;/a&gt;&lt;/code&gt; は、ファイル内のTixの場所など、モジュールの静的プロパティに関する情報です。</target>
        </trans-unit>
        <trans-unit id="1a3f75375d99611ab884a7c4628ca1086ff611c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;trace-hpc-tix#t:Tix&quot;&gt;Tix&lt;/a&gt;&lt;/code&gt; is the storage format for our dynamic information about what boxes are ticked.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;trace-hpc-tix#t:Tix&quot;&gt;Tix&lt;/a&gt;&lt;/code&gt; は、どのボックスがチェックされているかに関する動的情報のストレージ形式です。</target>
        </trans-unit>
        <trans-unit id="cf8eaede1379a8ef516539cf75e1e62246c19952" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;trace-hpc-util#t:HpcPos&quot;&gt;HpcPos&lt;/a&gt;&lt;/code&gt; is an Hpc local rendition of a Span.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;trace-hpc-util#t:HpcPos&quot;&gt;HpcPos&lt;/a&gt;&lt;/code&gt; は、スパンのHpcローカルレンディションです。</target>
        </trans-unit>
        <trans-unit id="222d13f1ef6a9c1b57a2f449156236fe67454407" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;trace-hpc-util#v:fromHpcPos&quot;&gt;fromHpcPos&lt;/a&gt;&lt;/code&gt; explodes the HpcPos into &lt;em&gt;line:column&lt;/em&gt;-&lt;em&gt;line:column&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;trace-hpc-util#v:fromHpcPos&quot;&gt;fromHpcPos&lt;/a&gt;&lt;/code&gt; はHpcPosを&lt;em&gt; line：column&lt;/em&gt; -&lt;em&gt; line：columnに&lt;/em&gt;分解し&lt;em&gt;ます&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0cf707979d12a15b678a25d216452eb375b3ad48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;trace-hpc-util#v:toHpcPos&quot;&gt;toHpcPos&lt;/a&gt;&lt;/code&gt; implodes to HpcPos, from &lt;em&gt;line:column&lt;/em&gt;-&lt;em&gt;line:column&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;trace-hpc-util#v:toHpcPos&quot;&gt;toHpcPos&lt;/a&gt;&lt;/code&gt; は、&lt;em&gt; line：column&lt;/em&gt; -&lt;em&gt; line：column&lt;/em&gt;から HpcPosに内破し&lt;em&gt;ます。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="14d85912577817b4928dad24283578df3ee994e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;em&gt;appdata&lt;/em&gt;/ghc/ghci.conf&lt;/code&gt;, where ⟨appdata⟩ depends on your system, but is usually something like &lt;code&gt;C:/Documents and Settings/user/Application Data&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;appdata&lt;/em&gt;/ghc/ghci.conf&lt;/code&gt; 、ここで「&lt;em&gt; appdata&lt;/em&gt;」はシステムに依存しますが、通常は &lt;code&gt;C:/Documents and Settings/user/Application Data&lt;/code&gt; のようなものです</target>
        </trans-unit>
        <trans-unit id="aa3074d66d301f190f572eaf6abdc1642ce7ec0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;em&gt;ghcappdata&lt;/em&gt;/ghci.conf&lt;/code&gt;, where ⟨ghcappdata⟩ depends on your system, but is usually something like &lt;code&gt;$HOME/.ghc&lt;/code&gt; on Unix or &lt;code&gt;C:/Documents and Settings/user/Application
Data/ghc&lt;/code&gt; on Windows.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;ghcappdata&lt;/em&gt;/ghci.conf&lt;/code&gt; 、ここで⟨ghcappdata⟩はシステムによって異なりますが、通常はUnixの場合は &lt;code&gt;$HOME/.ghc&lt;/code&gt; 、Windowsの場合は &lt;code&gt;C:/Documents and Settings/user/Application Data/ghc&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="78ad489dac9b7e1c6477508bafbae8a936d7c78d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;em&gt;ph&lt;/em&gt;&lt;/code&gt; contains a handle to the running process. On Windows &lt;code&gt;&lt;a href=&quot;system-process#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; can be set in CreateProcess in order to create a Win32 Job object to monitor a process tree's progress. If it is set then that job is also returned inside &lt;code&gt;&lt;em&gt;ph&lt;/em&gt;&lt;/code&gt;. &lt;code&gt;&lt;em&gt;ph&lt;/em&gt;&lt;/code&gt; can be used to kill all running sub-processes. This feature has been available since 1.5.0.0.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;ph&lt;/em&gt;&lt;/code&gt; には、実行中のプロセスへのハンドルが含まれています。Windowsでは、プロセスツリーの進行状況を監視するWin32 Jobオブジェクトを作成するために、 &lt;code&gt;&lt;a href=&quot;system-process#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; を設定できます。設定されている場合、そのジョブも &lt;code&gt;&lt;em&gt;ph&lt;/em&gt;&lt;/code&gt; 内に返されます。 &lt;code&gt;&lt;em&gt;ph&lt;/em&gt;&lt;/code&gt; を使用して、実行中のすべてのサブプロセスを&lt;em&gt;強制終了&lt;/em&gt;できます。この機能は1.5.0.0から利用可能です。</target>
        </trans-unit>
        <trans-unit id="c4ff94f2eb76a795e8930956d84627f0a9129554" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;em&gt;size&lt;/em&gt;&lt;/code&gt; bytes from the &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-prim-0.6.1/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;em&gt;ba&lt;/em&gt;&lt;/code&gt; starting at &lt;code&gt;&lt;em&gt;offset&lt;/em&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;size&lt;/em&gt;&lt;/code&gt; &lt;code&gt;&lt;em&gt;offset&lt;/em&gt;&lt;/code&gt; 始まる &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-prim-0.6.1/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;em&gt;ba&lt;/em&gt;&lt;/code&gt; からの&lt;em&gt;サイズ&lt;/em&gt;バイト&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5a7730656222b7aef7f9ac270eef1ee1a0a0cc87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;em&gt;size&lt;/em&gt;&lt;/code&gt; bytes from the &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;em&gt;ba&lt;/em&gt;&lt;/code&gt; starting at &lt;code&gt;&lt;em&gt;offset&lt;/em&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;size&lt;/em&gt;&lt;/code&gt; &lt;code&gt;&lt;em&gt;offset&lt;/em&gt;&lt;/code&gt; 始まる &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;em&gt;ba&lt;/em&gt;&lt;/code&gt; からのバイトの&lt;em&gt;サイズ&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="26a0fdf6d9d1e4ef4d41c9661e30b9a6163fb629" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@&lt;/code&gt;-patterns and view patterns are not linear.</source>
          <target state="translated">&lt;code&gt;@&lt;/code&gt; -patternsとviewpatternsは線形ではありません。</target>
        </trans-unit>
        <trans-unit id="04cc56f9108b51d563dbeb568d126dd0908fa34e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Alternative&lt;/code&gt; wrapper</source>
          <target state="translated">&lt;code&gt;Alternative&lt;/code&gt; ラッパー</target>
        </trans-unit>
        <trans-unit id="d1b5ad560a36d111f7b170517bec1ad9c252b361" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Applicative&lt;/code&gt; wrapper</source>
          <target state="translated">&lt;code&gt;Applicative&lt;/code&gt; ラッパー</target>
        </trans-unit>
        <trans-unit id="ed139e35c53a715a44b14239fe12ce2befbcd11b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array#&lt;/code&gt;&lt;code&gt;MutableArray#&lt;/code&gt;&lt;code&gt;SmallArray#&lt;/code&gt;&lt;code&gt;MutableSmallArray#&lt;/code&gt;&lt;code&gt;ArrayArray#&lt;/code&gt;&lt;code&gt;MutableArrayArray#&lt;/code&gt; unpinned &lt;code&gt;ByteArray#&lt;/code&gt; unpinned &lt;code&gt;MutableByteArray#&lt;/code&gt; pinned &lt;code&gt;ByteArray#&lt;/code&gt; pinned &lt;code&gt;MutableByteArray#&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Array#&lt;/code&gt; &lt;code&gt;MutableArray#&lt;/code&gt; &lt;code&gt;SmallArray#&lt;/code&gt; &lt;code&gt;MutableSmallArray#&lt;/code&gt; &lt;code&gt;ArrayArray#&lt;/code&gt; &lt;code&gt;MutableArrayArray#&lt;/code&gt; 固定解除 &lt;code&gt;ByteArray#&lt;/code&gt; 固定解除 &lt;code&gt;MutableByteArray#&lt;/code&gt; ピン止め &lt;code&gt;ByteArray#&lt;/code&gt; ピン止め &lt;code&gt;MutableByteArray#&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ded059f33997a34e4cb25713d008460b2ad90488" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BigNat&lt;/code&gt; arithmetic operations</source>
          <target state="translated">&lt;code&gt;BigNat&lt;/code&gt; 算術演算</target>
        </trans-unit>
        <trans-unit id="d0e53fe9f571fb27c2541c25d32556160cbfe83e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BigNat&lt;/code&gt; comparison predicates</source>
          <target state="translated">&lt;code&gt;BigNat&lt;/code&gt; 比較述語</target>
        </trans-unit>
        <trans-unit id="d650170048a21327c9057e63a570ab7560de1b5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BigNat&lt;/code&gt; logic operations</source>
          <target state="translated">&lt;code&gt;BigNat&lt;/code&gt; 論理演算</target>
        </trans-unit>
        <trans-unit id="98cced63202e4646943f1d5997420ad399053024" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Bool&lt;/code&gt; wrappers</source>
          <target state="translated">&lt;code&gt;Bool&lt;/code&gt; ラッパー</target>
        </trans-unit>
        <trans-unit id="f6fac90529992fc3ed472546b3158d027f06fa86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Buggle&lt;/code&gt;, is compiled with &lt;code&gt;-XSafe&lt;/code&gt;, so the code is machine-checked to be OK, but again under the assumption that all of &lt;code&gt;Buggle&lt;/code&gt;&amp;lsquo;s imports are trusted by &lt;code&gt;C&lt;/code&gt;. We must recursively check all imports!</source>
          <target state="translated">&lt;code&gt;Buggle&lt;/code&gt; は、してコンパイルされ &lt;code&gt;-XSafe&lt;/code&gt; コードはマシン・チェックをOKになることですが、もう一度、すべてのことを仮定して、 &lt;code&gt;Buggle&lt;/code&gt; の輸入はから信頼されている &lt;code&gt;C&lt;/code&gt; 。すべてのインポートを再帰的にチェックする必要があります！</target>
        </trans-unit>
        <trans-unit id="e302746e5a51cd50b17e28f9955a7b45b41bc60c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Buggle&lt;/code&gt;, is compiled with &lt;code&gt;-XSafe&lt;/code&gt;, so the code is machine-checked to be OK, but again under the assumption that all of &lt;code&gt;Buggle&lt;/code&gt;&amp;rsquo;s imports are trusted by &lt;code&gt;C&lt;/code&gt;. We must recursively check all imports!</source>
          <target state="translated">&lt;code&gt;Buggle&lt;/code&gt; は、してコンパイルされ &lt;code&gt;-XSafe&lt;/code&gt; コードはマシン・チェックをOKになることですが、もう一度、すべてのことを仮定して、 &lt;code&gt;Buggle&lt;/code&gt; の輸入はから信頼されている &lt;code&gt;C&lt;/code&gt; 。すべてのインポートを再帰的にチェックする必要があります！</target>
        </trans-unit>
        <trans-unit id="8776b69f579fb241ce32fd13622015e4d0b83de0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ByteString&lt;/code&gt; shared substring: 5 words; 20 or 40 bytes.</source>
          <target state="translated">&lt;code&gt;ByteString&lt;/code&gt; 共有サブストリング：5ワード。20または40バイト。</target>
        </trans-unit>
        <trans-unit id="7599c125a41ef345c4cf6708fab6e6948fb7ee1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ByteString&lt;/code&gt; unshared: 9 words; 36 or 72 bytes.</source>
          <target state="translated">&lt;code&gt;ByteString&lt;/code&gt; 非共有のByteString：9ワード。36バイトまたは72バイト。</target>
        </trans-unit>
        <trans-unit id="bc938b5f924562545bcd6ad426f0bdc998312507" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C&lt;/code&gt; does not have any associated data families (only type families). To see why data families are forbidden, imagine the following scenario:</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; には関連するデータファミリーはありません（タイプファミリーのみ）。データファミリが禁止されている理由を確認するには、次のシナリオを想像してください。</target>
        </trans-unit>
        <trans-unit id="6ea75b2216d756d059065338554235079a07239d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C&lt;/code&gt; is allowed to be different from &lt;code&gt;C'&lt;/code&gt;, but the right-hand sides of the type signatures must coincide. We require this because when you declare an empty instance for a class that uses &lt;a href=&quot;#extension-DefaultSignatures&quot;&gt;&lt;code&gt;DefaultSignatures&lt;/code&gt;&lt;/a&gt;, GHC implicitly fills in the default implementation like this:</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; は &lt;code&gt;C'&lt;/code&gt; と異なっていてもかまいませんが、型シグネチャの右側は一致している必要があります。&lt;a href=&quot;#extension-DefaultSignatures&quot;&gt; &lt;code&gt;DefaultSignatures&lt;/code&gt; &lt;/a&gt;を使用するクラスの空のインスタンスを宣言すると、GHCは次のようにデフォルトの実装を暗黙的に埋めるため、これが必要になります。</target>
        </trans-unit>
        <trans-unit id="278d10bb958aa2569a8ce66305104a3060e9a7bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C&lt;/code&gt; is allowed to have associated type families, provided they meet the requirements laid out in the section on &lt;a href=&quot;#gnd-and-associated-types&quot;&gt;GND and associated types&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; は、&lt;a href=&quot;#gnd-and-associated-types&quot;&gt;GNDおよび関連する型の&lt;/a&gt;セクションで説明されている要件を満たしていれば、関連する型ファミリーを持つことができます。</target>
        </trans-unit>
        <trans-unit id="4c00311b73a3a04aff330aa580c1629544cc14f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C&lt;/code&gt; is not &lt;code&gt;Read&lt;/code&gt;, &lt;code&gt;Show&lt;/code&gt;, &lt;code&gt;Typeable&lt;/code&gt;, or &lt;code&gt;Data&lt;/code&gt;. These classes should not &amp;ldquo;look through&amp;rdquo; the type or its constructor. You can still derive these classes for a newtype, but it happens in the usual way, not via this new mechanism. Confer with &lt;a href=&quot;#default-deriving-strategy&quot;&gt;Default deriving strategy&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; は、 &lt;code&gt;Read&lt;/code&gt; 、 &lt;code&gt;Show&lt;/code&gt; 、 &lt;code&gt;Typeable&lt;/code&gt; 、または &lt;code&gt;Data&lt;/code&gt; ではありません。これらのクラスは、型またはそのコンストラクターを「調べる」べきではありません。これらのクラスをnewtypeから派生させることもできますが、この新しいメカニズムを介さずに通常の方法で行われます。協議&lt;a href=&quot;#default-deriving-strategy&quot;&gt;デフォルト導出戦略&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7ad78da0f3b462b3a266dfe75a8c065bceb1a263" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C&lt;/code&gt; is not &lt;code&gt;Read&lt;/code&gt;, &lt;code&gt;Show&lt;/code&gt;, &lt;code&gt;Typeable&lt;/code&gt;, or &lt;code&gt;Data&lt;/code&gt;. These classes should not &amp;ldquo;look through&amp;rdquo; the type or its constructor. You can still derive these classes for a newtype, but it happens in the usual way, not via this new mechanism. Confer with &lt;a href=&quot;deriving_strategies#default-deriving-strategy&quot;&gt;Default deriving strategy&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; は、 &lt;code&gt;Read&lt;/code&gt; 、 &lt;code&gt;Show&lt;/code&gt; 、 &lt;code&gt;Typeable&lt;/code&gt; 、または &lt;code&gt;Data&lt;/code&gt; はありません。これらのクラスは、型またはそのコンストラクターを「調べる」べきではありません。これらのクラスをnewtypeに対して派生させることはできますが、この新しいメカニズムではなく、通常の方法で行われます。協議&lt;a href=&quot;deriving_strategies#default-deriving-strategy&quot;&gt;デフォルト導出戦略&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="be4e6723a7a8830f64b1c41d49bc7a4eb6985c7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;COMPLETE&lt;/code&gt; pragmas are only used by the pattern match checker. If a function definition matches on all the constructors specified in the pragma then the compiler will produce no warning.</source>
          <target state="translated">&lt;code&gt;COMPLETE&lt;/code&gt; プラグマは、パターンマッチチェッカーでのみ使用されます。関数定義がプラグマで指定されたすべてのコンストラクターに一致する場合、コンパイラーは警告を生成しません。</target>
        </trans-unit>
        <trans-unit id="b3da2fa05cdf701d710001ae3f83641efe49d34d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;COMPLETE&lt;/code&gt; pragmas can contain any data constructors or pattern synonyms which are in scope, but must mention at least one data constructor or pattern synonym defined in the same module. &lt;code&gt;COMPLETE&lt;/code&gt; pragmas may only appear at the top level of a module. Once defined, they are automatically imported and exported from modules. &lt;code&gt;COMPLETE&lt;/code&gt; pragmas should be thought of as asserting a universal truth about a set of patterns and as a result, should not be used to silence context specific incomplete match warnings.</source>
          <target state="translated">&lt;code&gt;COMPLETE&lt;/code&gt; プラグマには、スコープ内にある任意のデータコンストラクターまたはパターンシノニムを含めることができますが、同じモジュールで定義された少なくとも1つのデータコンストラクターまたはパターンシノニムに言及する必要があります。 &lt;code&gt;COMPLETE&lt;/code&gt; プラグマは、モジュールの最上位にのみ表示できます。定義すると、モジュールから自動的にインポートおよびエクスポートされます。 &lt;code&gt;COMPLETE&lt;/code&gt; プラグマは、一連のパターンに関する普遍的な真実を主張していると見なされるべきであり、その結果、コンテキスト固有の不完全な一致の警告を黙らせるために使用されるべきではありません。</target>
        </trans-unit>
        <trans-unit id="485baa405ddb5381f9b1f0f30331e14960f4dfc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CONLIKE&lt;/code&gt; is a modifier to an &lt;code&gt;INLINE&lt;/code&gt; or &lt;code&gt;NOINLINE&lt;/code&gt; pragma. It specifies that an application of &lt;code&gt;f&lt;/code&gt; to one argument (in general, the number of arguments to the left of the &lt;code&gt;=&lt;/code&gt; sign) should be considered cheap enough to duplicate, if such a duplication would make rule fire. (The name &amp;ldquo;CONLIKE&amp;rdquo; is short for &amp;ldquo;constructor-like&amp;rdquo;, because constructors certainly have such a property.) The &lt;a href=&quot;#pragma-CONLIKE&quot;&gt;&lt;code&gt;CONLIKE&lt;/code&gt;&lt;/a&gt; pragma is a modifier to &lt;a href=&quot;#pragma-INLINE&quot;&gt;&lt;code&gt;INLINE&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#pragma-NOINLINE&quot;&gt;&lt;code&gt;NOINLINE&lt;/code&gt;&lt;/a&gt; because it really only makes sense to match &lt;code&gt;f&lt;/code&gt; on the LHS of a rule if you are sure that &lt;code&gt;f&lt;/code&gt; is not going to be inlined before the rule has a chance to fire.</source>
          <target state="translated">&lt;code&gt;CONLIKE&lt;/code&gt; は、 &lt;code&gt;INLINE&lt;/code&gt; または &lt;code&gt;NOINLINE&lt;/code&gt; プラグマの修飾子です。これは、1つの引数（一般に、 &lt;code&gt;=&lt;/code&gt; 記号の左側の引数の数）への &lt;code&gt;f&lt;/code&gt; の適用は、そのような複製がルールを実行する場合、複製するのに十分安価であると見なされるべきであることを指定します。 （コンストラクターには確かにそのようなプロパティがあるため、「CONLIKE」という名前は「コンストラクターのような」の&lt;a href=&quot;#pragma-CONLIKE&quot;&gt; &lt;code&gt;CONLIKE&lt;/code&gt; &lt;/a&gt;です。）CONLIKEプラグマは、ルールのLHSで &lt;code&gt;f&lt;/code&gt; に一致する場合にのみ意味があるため、&lt;a href=&quot;#pragma-INLINE&quot;&gt; &lt;code&gt;INLINE&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#pragma-NOINLINE&quot;&gt; &lt;code&gt;NOINLINE&lt;/code&gt; の&lt;/a&gt;修飾子です。ルールが実行される前に、 &lt;code&gt;f&lt;/code&gt; がインライン化されないことは確実です。</target>
        </trans-unit>
        <trans-unit id="383fb77fb99e560b9514437be93f406fd34ad198" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CONLIKE&lt;/code&gt; is a modifier to an &lt;code&gt;INLINE&lt;/code&gt; or &lt;code&gt;NOINLINE&lt;/code&gt; pragma. It specifies that an application of &lt;code&gt;f&lt;/code&gt; to one argument (in general, the number of arguments to the left of the &lt;code&gt;=&lt;/code&gt; sign) should be considered cheap enough to duplicate, if such a duplication would make rule fire. (The name &amp;ldquo;CONLIKE&amp;rdquo; is short for &amp;ldquo;constructor-like&amp;rdquo;, because constructors certainly have such a property.) The &lt;a href=&quot;pragmas#pragma-CONLIKE&quot;&gt;&lt;code&gt;CONLIKE&lt;/code&gt;&lt;/a&gt; pragma is a modifier to &lt;a href=&quot;pragmas#pragma-INLINE&quot;&gt;&lt;code&gt;INLINE&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;pragmas#pragma-NOINLINE&quot;&gt;&lt;code&gt;NOINLINE&lt;/code&gt;&lt;/a&gt; because it really only makes sense to match &lt;code&gt;f&lt;/code&gt; on the LHS of a rule if you are sure that &lt;code&gt;f&lt;/code&gt; is not going to be inlined before the rule has a chance to fire.</source>
          <target state="translated">&lt;code&gt;CONLIKE&lt;/code&gt; は、 &lt;code&gt;INLINE&lt;/code&gt; または &lt;code&gt;NOINLINE&lt;/code&gt; プラグマの修飾子です。これは、1つの引数（一般に、 &lt;code&gt;=&lt;/code&gt; 記号の左側の引数の数）への &lt;code&gt;f&lt;/code&gt; の適用は、そのような複製がルールを実行する場合、複製するのに十分安価であると見なされるべきであることを指定します。 （コンストラクターには確かにそのようなプロパティがあるため、「CONLIKE」という名前は「コンストラクターのような」の&lt;a href=&quot;pragmas#pragma-CONLIKE&quot;&gt; &lt;code&gt;CONLIKE&lt;/code&gt; &lt;/a&gt;です。）CONLIKEプラグマは、ルールのLHSで &lt;code&gt;f&lt;/code&gt; に一致する場合にのみ意味があるため、&lt;a href=&quot;pragmas#pragma-INLINE&quot;&gt; &lt;code&gt;INLINE&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;pragmas#pragma-NOINLINE&quot;&gt; &lt;code&gt;NOINLINE&lt;/code&gt; の&lt;/a&gt;修飾子です。ルールが実行される前に、 &lt;code&gt;f&lt;/code&gt; がインライン化されないことは確実です。</target>
        </trans-unit>
        <trans-unit id="d2d81e2d9ec7cf4164a86b31f92b6391db5bcaa3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CONLIKE&lt;/code&gt; is a modifier to an &lt;code&gt;INLINE&lt;/code&gt; or &lt;code&gt;NOINLINE&lt;/code&gt; pragma. It specifies that an application of &lt;code&gt;f&lt;/code&gt; to one argument (in general, the number of arguments to the left of the &lt;code&gt;=&lt;/code&gt; sign) should be considered cheap enough to duplicate, if such a duplication would make rule fire. (The name &amp;ldquo;CONLIKE&amp;rdquo; is short for &amp;ldquo;constructor-like&amp;rdquo;, because constructors certainly have such a property.) The &lt;code&gt;CONLIKE&lt;/code&gt; pragma is a modifier to &lt;a href=&quot;#pragma-INLINE&quot;&gt;&lt;code&gt;INLINE&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#pragma-NOINLINE&quot;&gt;&lt;code&gt;NOINLINE&lt;/code&gt;&lt;/a&gt; because it really only makes sense to match &lt;code&gt;f&lt;/code&gt; on the LHS of a rule if you are sure that &lt;code&gt;f&lt;/code&gt; is not going to be inlined before the rule has a chance to fire.</source>
          <target state="translated">&lt;code&gt;CONLIKE&lt;/code&gt; は、 &lt;code&gt;INLINE&lt;/code&gt; または &lt;code&gt;NOINLINE&lt;/code&gt; プラグマの修飾子です。これは、1つの引数（一般的に &lt;code&gt;=&lt;/code&gt; 記号の左側にある引数の数）への &lt;code&gt;f&lt;/code&gt; の適用は、そのような重複によってルールが発動する場合、複製するのに十分安価であると見なされるべきであることを指定します。 （コンストラクタは確かに、このような性質を持っているので名前「CONLIKEは」「コンストラクタ様」、の略です。） &lt;code&gt;CONLIKE&lt;/code&gt; のプラグマがに修飾子です&lt;a href=&quot;#pragma-INLINE&quot;&gt; &lt;code&gt;INLINE&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#pragma-NOINLINE&quot;&gt; &lt;code&gt;NOINLINE&lt;/code&gt; &lt;/a&gt;それは本当に唯一の一致することは理にかなっているので &lt;code&gt;f&lt;/code&gt; 場合は、ルールのLHSにルールが発動する前に &lt;code&gt;f&lt;/code&gt; がインライン化されないことは確かです。</target>
        </trans-unit>
        <trans-unit id="ca0776483d98a399bc40ea0c0a1e8f9c8c9ec7b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CallStack&lt;/code&gt; is kept abstract, but GHC provides a function</source>
          <target state="translated">&lt;code&gt;CallStack&lt;/code&gt; は抽象的ですが、GHCは機能を提供します</target>
        </trans-unit>
        <trans-unit id="f6f472147735abc0cecb50b7cdcae7f9dffd268e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Coercible&lt;/code&gt; is a two-parameter class that has instances for types &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; if the compiler can infer that they have the same representation. This class does not have regular instances; instead they are created on-the-fly during type-checking. Trying to manually declare an instance of &lt;code&gt;Coercible&lt;/code&gt; is an error.</source>
          <target state="translated">&lt;code&gt;Coercible&lt;/code&gt; は、コンパイラーが同じ表現を持っていると推測できる場合、タイプ &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; のインスタンスを持つ2つのパラメーターのクラスです。このクラスには通常のインスタンスはありません。代わりに、型チェック中にオンザフライで作成されます。 &lt;code&gt;Coercible&lt;/code&gt; のインスタンスを手動で宣言しようとするとエラーになります。</target>
        </trans-unit>
        <trans-unit id="68695f75a6a8888c47fbc91891863a97d327aa92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CoreM&lt;/code&gt; is a monad that all of the Core optimizations live and operate inside of.</source>
          <target state="translated">&lt;code&gt;CoreM&lt;/code&gt; は、すべてのコア最適化が内部に存在し、動作するモナドです。</target>
        </trans-unit>
        <trans-unit id="6583859913f3d3f655e0c5fc1c133204e495bdd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CoreToDo&lt;/code&gt; is effectively a data type that describes all the kinds of optimization passes GHC does on Core. There are passes for simplification, CSE, etc. There is a specific case for plugins, &lt;code&gt;CoreDoPluginPass :: String -&amp;gt; PluginPass -&amp;gt; CoreToDo&lt;/code&gt; which should be what you always use when inserting your own pass into the pipeline. The first parameter is the name of the plugin, and the second is the pass you wish to insert.</source>
          <target state="translated">&lt;code&gt;CoreToDo&lt;/code&gt; は事実上、GHCがCoreに対して行うあらゆる種類の最適化パスを記述するデータ型です。単純化、CSEなどのパスがあります。プラグインには特定のケースがあります &lt;code&gt;CoreDoPluginPass :: String -&amp;gt; PluginPass -&amp;gt; CoreToDo&lt;/code&gt; は、独自のパスをパイプラインに挿入するときに常に使用する必要があります。最初のパラメーターはプラグインの名前で、2番目のパラメーターは挿入するパスです。</target>
        </trans-unit>
        <trans-unit id="dfd16322bf8019d77331194eed535094f9511cf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DW_TAG_ghc_src_note&lt;/code&gt; DIEs (tag 0x5b01) are found as children of &lt;code&gt;DW_TAG_lexical_block&lt;/code&gt; DIEs. They describe source spans which gave rise to the block; formally these spans are causally responsible for produced code: changes to code in the given span may change the code within the block; conversely changes outside the span are guaranteed not to affect the code in the block.</source>
          <target state="translated">&lt;code&gt;DW_TAG_ghc_src_note&lt;/code&gt; DIE（タグ0x5b01）は、 &lt;code&gt;DW_TAG_lexical_block&lt;/code&gt; DIEの子として検出されます。それらは、ブロックを生じさせたソーススパンを記述しています。正式には、これらのスパンは因果的に生成されたコードを担当します。特定のスパンのコードを変更すると、ブロック内のコードが変更される可能性があります。逆に、スパン外の変更は、ブロック内のコードに影響しないことが保証されています。</target>
        </trans-unit>
        <trans-unit id="8b7c7d802a6dbb96171248964f81e77ab81fa0f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data.List.splitAt&lt;/code&gt; is more strict than specified in the Report. Specifically, the Report specifies that</source>
          <target state="translated">&lt;code&gt;Data.List.splitAt&lt;/code&gt; は、レポートで指定されているよりも厳格です。具体的には、レポートでは、</target>
        </trans-unit>
        <trans-unit id="797d728b99ac46cda0551db9b0ec7459aa60f5a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data.List&lt;/code&gt; due to the future addition of &lt;code&gt;Data.List.singleton&lt;/code&gt; and specialisation of exports to the &lt;code&gt;[]&lt;/code&gt; type. See the &lt;a href=&quot;https://groups.google.com/forum/#!topic/haskell-core-libraries/q3zHLmzBa5E&quot;&gt;mailing list&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;Data.List&lt;/code&gt; .singletonの将来の追加と、 &lt;code&gt;[]&lt;/code&gt; タイプへのエクスポートの特殊化による &lt;code&gt;Data.List.singleton&lt;/code&gt; 。詳細については、&lt;a href=&quot;https://groups.google.com/forum/#!topic/haskell-core-libraries/q3zHLmzBa5E&quot;&gt;メーリングリスト&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="634502578bcebb8751a50be27b2ca0dc61cb2dca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data.List&lt;/code&gt; due to the future addition of &lt;code&gt;Data.List.singleton&lt;/code&gt; and specialisation of exports to the &lt;code&gt;[]&lt;/code&gt; type. See the mailing list for details.</source>
          <target state="translated">&lt;code&gt;Data.List&lt;/code&gt; .singletonの将来の追加と、 &lt;code&gt;[]&lt;/code&gt; タイプへのエクスポートの特殊化による &lt;code&gt;Data.List.singleton&lt;/code&gt; 。詳細については、メーリングリストを参照してください。</target>
        </trans-unit>
        <trans-unit id="815ef066b033cb4c87bc7a18a2fa4cd277f22cb3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Debug.Trace.traceStack&lt;/code&gt; is a version of &lt;code&gt;Debug.Trace.trace&lt;/code&gt; that also prints the current call stack.</source>
          <target state="translated">&lt;code&gt;Debug.Trace.traceStack&lt;/code&gt; は、現在のコールスタックも出力する &lt;code&gt;Debug.Trace.trace&lt;/code&gt; のバージョンです。</target>
        </trans-unit>
        <trans-unit id="b8d4387e40f23e3472e133e5c182a6f9802e1b6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EVENTLOG_NOT_CONFIGURED&lt;/code&gt;: An &lt;a href=&quot;#c.EventLogWriter&quot;&gt;&lt;code&gt;EventLogWriter&lt;/code&gt;&lt;/a&gt; has not yet been configured.</source>
          <target state="translated">&lt;code&gt;EVENTLOG_NOT_CONFIGURED&lt;/code&gt; ：&lt;a href=&quot;#c.EventLogWriter&quot;&gt; &lt;code&gt;EventLogWriter&lt;/code&gt; &lt;/a&gt;はまだ構成されていません。</target>
        </trans-unit>
        <trans-unit id="b27f651b027bed566be4b5cf11369491bee9e73e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EVENTLOG_NOT_SUPPORTED&lt;/code&gt;: The runtime system wasn&amp;rsquo;t compiled with eventlog support.</source>
          <target state="translated">&lt;code&gt;EVENTLOG_NOT_SUPPORTED&lt;/code&gt; ：ランタイムシステムは、イベントログをサポートしてコンパイルされていません。</target>
        </trans-unit>
        <trans-unit id="e317c61d93437ba4a2376e0409ff8c943799793b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EVENTLOG_RUNNING&lt;/code&gt;: An &lt;a href=&quot;#c.EventLogWriter&quot;&gt;&lt;code&gt;EventLogWriter&lt;/code&gt;&lt;/a&gt; has been configured and is running.</source>
          <target state="translated">&lt;code&gt;EVENTLOG_RUNNING&lt;/code&gt; ：&lt;a href=&quot;#c.EventLogWriter&quot;&gt; &lt;code&gt;EventLogWriter&lt;/code&gt; &lt;/a&gt;が構成され、実行されています。</target>
        </trans-unit>
        <trans-unit id="1100cc7824ba867b1412485db228fd16684f426f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Errno&lt;/code&gt; functions</source>
          <target state="translated">&lt;code&gt;Errno&lt;/code&gt; 関数</target>
        </trans-unit>
        <trans-unit id="888974bc2aa26aaf4445c229662809d0f31e1715" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ExceptT&lt;/code&gt; constructs a monad parameterized over two things:</source>
          <target state="translated">&lt;code&gt;ExceptT&lt;/code&gt; は、次の2つをパラメータとしてモナドを構築します。</target>
        </trans-unit>
        <trans-unit id="8f5c6138e19bc23ad3c13556f8e70f0b98fb7c07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Floats&lt;/code&gt; (probably 32-bits) are almost always a bad idea, anyway, unless you Really Know What You Are Doing. Use &lt;code&gt;Double&lt;/code&gt;s. There&amp;rsquo;s rarely a speed disadvantage&amp;mdash;modern machines will use the same floating-point unit for both. With &lt;code&gt;Double&lt;/code&gt;s, you are much less likely to hang yourself with numerical errors.</source>
          <target state="translated">&lt;code&gt;Floats&lt;/code&gt; （おそらく32ビット）は、実際に何をしているのかを本当に理解していない限り、とにかくほとんど常に悪い考えです。 &lt;code&gt;Double&lt;/code&gt; sを使用します。速度が低下することはめったにありません。最新のマシンでは、両方に同じ浮動小数点ユニットが使用されます。 &lt;code&gt;Double&lt;/code&gt; の、あなたははるかに少ない数値誤差を自分でハングアップする可能性があります。</target>
        </trans-unit>
        <trans-unit id="955ed75750440fafd18815a2c675e276a49e5759" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Foldable&lt;/code&gt; deriving will produce</source>
          <target state="translated">&lt;code&gt;Foldable&lt;/code&gt; 派生が生成されます</target>
        </trans-unit>
        <trans-unit id="e0678b9641a4a2d85d4305a811bf0abc62c93278" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Foldable&lt;/code&gt; instances are expected to satisfy the following laws:</source>
          <target state="translated">&lt;code&gt;Foldable&lt;/code&gt; インスタンスは、次の法律を満たしている必要があります。</target>
        </trans-unit>
        <trans-unit id="3dce461b4659e9b6b61c24b5f4524e648fc47d64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Foldable&lt;/code&gt; instances can be derived for data types in which the last type parameter is existentially constrained or refined in a GADT. For example, this data type:</source>
          <target state="translated">&lt;code&gt;Foldable&lt;/code&gt; 可能なインスタンスは、最後の型パラメーターがGADTで存在的に制約または調整されているデータ型に対して導出できます。たとえば、このデータ型は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="2cfc19a59e8f6e4775b559a0bc28b66c2ed86472" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ForeignFunctionInterface&lt;/code&gt; &amp;mdash; Foreign import declarations that import a function with a non-&lt;code&gt;IO&lt;/code&gt; type are disallowed.</source>
          <target state="translated">&lt;code&gt;ForeignFunctionInterface&lt;/code&gt; &amp;mdash;非 &lt;code&gt;IO&lt;/code&gt; タイプの関数をインポートする外部インポート宣言は許可されていません。</target>
        </trans-unit>
        <trans-unit id="de3911b91d2db2e249dba745cebf6cf6a5bd07ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FrontendPlugin&lt;/code&gt; exports a field &lt;code&gt;frontend&lt;/code&gt;, which is a function &lt;code&gt;[String] -&amp;gt; [(String, Maybe Phase)] -&amp;gt; Ghc ()&lt;/code&gt;. The first argument is a list of extra flags passed to the frontend with &lt;code&gt;-ffrontend-opt&lt;/code&gt;; the second argument is the list of arguments, usually source files and module names to be compiled (the &lt;code&gt;Phase&lt;/code&gt; indicates if an &lt;code&gt;-x&lt;/code&gt; flag was set), and a frontend simply executes some operation in the &lt;code&gt;Ghc&lt;/code&gt; monad (which, among other things, has a &lt;code&gt;Session&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;FrontendPlugin&lt;/code&gt; はフィールド &lt;code&gt;frontend&lt;/code&gt; エンドをエクスポートします。これは関数です &lt;code&gt;[String] -&amp;gt; [(String, Maybe Phase)] -&amp;gt; Ghc ()&lt;/code&gt; 。最初の引数は、 &lt;code&gt;-ffrontend-opt&lt;/code&gt; でフロントエンドに渡される追加のフラグのリストです。 2番目の引数は、通常はコンパイルされるソースファイルとモジュール名（ &lt;code&gt;Phase&lt;/code&gt; は &lt;code&gt;-x&lt;/code&gt; フラグが設定されているかどうかを示します）の引数のリストであり、フロントエンドは &lt;code&gt;Ghc&lt;/code&gt; モナド（特に、 &lt;code&gt;Session&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="51bd0a9f38012e1893cd46eccca8a4f917d5f9a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GHC.Generics&lt;/code&gt; &amp;mdash; Hand crafted instances of the &lt;code&gt;Generic&lt;/code&gt; type class are not allowed in Safe Haskell. Such instances aren&amp;rsquo;t strictly unsafe, but there is an important invariant that a &lt;code&gt;Generic&lt;/code&gt; instance should adhere to the structure of the data type for which the instance is defined, and allowing manually implemented &lt;code&gt;Generic&lt;/code&gt; instances would break that invariant. Derived instances (through the &lt;a href=&quot;generics#extension-DeriveGeneric&quot;&gt;&lt;code&gt;DeriveGeneric&lt;/code&gt;&lt;/a&gt; extension) are still allowed. Note that the only allowed &lt;a href=&quot;deriving_strategies#deriving-strategies&quot;&gt;deriving strategy&lt;/a&gt; for deriving &lt;code&gt;Generic&lt;/code&gt; under Safe Haskell is &lt;code&gt;stock&lt;/code&gt;, as another strategy (e.g., &lt;code&gt;anyclass&lt;/code&gt;) would produce an instance that violates the invariant.</source>
          <target state="translated">&lt;code&gt;GHC.Generics&lt;/code&gt; &amp;mdash; &lt;code&gt;Generic&lt;/code&gt; 型クラスの手作りインスタンスはSafeHaskellでは許可されていません。このようなインスタンスは厳密に安全ではありませんが、 &lt;code&gt;Generic&lt;/code&gt; インスタンスがインスタンスが定義されているデータ型の構造に準拠する必要があるという重要な不変条件があり、手動で実装された &lt;code&gt;Generic&lt;/code&gt; インスタンスを許可するとその不変条件が壊れます。 （&lt;a href=&quot;generics#extension-DeriveGeneric&quot;&gt; &lt;code&gt;DeriveGeneric&lt;/code&gt; &lt;/a&gt;拡張を介した）派生インスタンスは引き続き許可されます。Safe Haskellで &lt;code&gt;Generic&lt;/code&gt; を導出するために許可されている唯一の&lt;a href=&quot;deriving_strategies#deriving-strategies&quot;&gt;導出戦略&lt;/a&gt;は &lt;code&gt;stock&lt;/code&gt; であることに注意してください。別の戦略（たとえば、 &lt;code&gt;anyclass&lt;/code&gt; ）は、不変条件に違反するインスタンスを生成するためです。</target>
        </trans-unit>
        <trans-unit id="e224ff13d4731a0e30f49bc73daccfc5e8a6efb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GHC.Generics&lt;/code&gt; &amp;mdash; Hand crafted instances of the &lt;code&gt;Generic&lt;/code&gt; type class are not allowed in Safe Haskell. Such instances aren&amp;rsquo;t strictly unsafe, but there is an important invariant that a &lt;code&gt;Generic&lt;/code&gt; instance should adhere to the structure of the data type for which the instance is defined, and allowing manually implemented &lt;code&gt;Generic&lt;/code&gt; instances would break that invariant. Derived instances (through the &lt;a href=&quot;glasgow_exts#extension-DeriveGeneric&quot;&gt;&lt;code&gt;DeriveGeneric&lt;/code&gt;&lt;/a&gt; extension) are still allowed. Note that the only allowed &lt;a href=&quot;glasgow_exts#deriving-strategies&quot;&gt;deriving strategy&lt;/a&gt; for deriving &lt;code&gt;Generic&lt;/code&gt; under Safe Haskell is &lt;code&gt;stock&lt;/code&gt;, as another strategy (e.g., &lt;code&gt;anyclass&lt;/code&gt;) would produce an instance that violates the invariant.</source>
          <target state="translated">&lt;code&gt;GHC.Generics&lt;/code&gt; &amp;mdash; &lt;code&gt;Generic&lt;/code&gt; タイプクラスの手作りのインスタンスはSafe Haskellでは許可されていません。そのようなインスタンスは厳密に安全ではありませんが、 &lt;code&gt;Generic&lt;/code&gt; インスタンスがインスタンスが定義されているデータ型の構造に準拠するという重要な不変条件があり、手動で実装された &lt;code&gt;Generic&lt;/code&gt; インスタンスを許可すると、その不変条件が壊れます。派生インスタンス（&lt;a href=&quot;glasgow_exts#extension-DeriveGeneric&quot;&gt; &lt;code&gt;DeriveGeneric&lt;/code&gt; &lt;/a&gt;拡張を介して）は引き続き許可されます。Safe Haskellで &lt;code&gt;Generic&lt;/code&gt; を導出するために許可されている唯一の&lt;a href=&quot;glasgow_exts#deriving-strategies&quot;&gt;導出戦略&lt;/a&gt;は &lt;code&gt;stock&lt;/code&gt; であることに注意してください。これは、別の戦略（たとえば &lt;code&gt;anyclass&lt;/code&gt; ）が不変条件に違反するインスタンスを生成するためです。</target>
        </trans-unit>
        <trans-unit id="30bec5effabc453c5c550dd66f484dff6b4e7c78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GHC.Stack.HasCallStack&lt;/code&gt; is a lightweight method of obtaining a partial call-stack at any point in the program.</source>
          <target state="translated">&lt;code&gt;GHC.Stack.HasCallStack&lt;/code&gt; は、プログラムの任意の時点で部分的なコールスタックを取得する軽量な方法です。</target>
        </trans-unit>
        <trans-unit id="03dd505cec7bb9d9c1f6b491b23d69415fd128d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GHC.Stack&lt;/code&gt; additionally exports a function &lt;code&gt;withFrozenCallStack&lt;/code&gt; that allows users to freeze the current &lt;code&gt;CallStack&lt;/code&gt;, preventing any future push operations from having an effect. This can be used by library authors to prevent &lt;code&gt;CallStack&lt;/code&gt;s from exposing unnecessary implementation details. Consider the &lt;code&gt;myHead&lt;/code&gt; example above, the &lt;code&gt;errorWithCallStack&lt;/code&gt; line in the printed stack is not particularly enlightening, so we might choose to suppress it by freezing the &lt;code&gt;CallStack&lt;/code&gt; that we pass to &lt;code&gt;errorWithCallStack&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;GHC.Stack&lt;/code&gt; はさらに、ユーザーが現在の &lt;code&gt;CallStack&lt;/code&gt; をフリーズできる関数 &lt;code&gt;withFrozenCallStack&lt;/code&gt; をエクスポートし、今後のプッシュ操作が影響を及ぼさないようにします。ライブラリの作成者はこれを使用して、 &lt;code&gt;CallStack&lt;/code&gt; が不必要な実装の詳細を公開しないようにすることができます。考えてみましょう &lt;code&gt;myHead&lt;/code&gt; の、上記の例を &lt;code&gt;errorWithCallStack&lt;/code&gt; の我々は凍結して、それを抑制することを選択するかもしれないので、印刷されたスタック内の行は特に啓発されていない &lt;code&gt;CallStack&lt;/code&gt; 、我々はに渡すこと &lt;code&gt;errorWithCallStack&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cacf23bdced212015af63b3a25cbc43c9f95175b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GeneralisedNewtypeDeriving&lt;/code&gt; &amp;mdash; GND is not allowed in the safe language. This is due to the ability of it to violate module boundaries when module authors forget to put nominal role annotations on their types as appropriate. For this reason, the &lt;code&gt;Data.Coerce&lt;/code&gt; module is also considered unsafe. We are hoping to find a better solution here in the future.</source>
          <target state="translated">&lt;code&gt;GeneralisedNewtypeDeriving&lt;/code&gt; &amp;mdash;安全な言語ではGNDは許可されていません。これは、モジュールの作成者が名目上の役割の注釈を適切に型に付け忘れた場合に、モジュールの境界に違反する可能性があるためです。このため、 &lt;code&gt;Data.Coerce&lt;/code&gt; モジュールも安全ではないと見なされます。私たちは将来、ここでより良い解決策を見つけることを望んでいます。</target>
        </trans-unit>
        <trans-unit id="0c565ee148d058ead79d9d99b67aa40318a498ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Generic1&lt;/code&gt; is used for functions that can only be defined over type containers, such as &lt;code&gt;map&lt;/code&gt;. Note that &lt;code&gt;Generic1&lt;/code&gt; ranges over types of kind &lt;code&gt;Type -&amp;gt; Type&lt;/code&gt; by default, but if the &lt;a href=&quot;#extension-PolyKinds&quot;&gt;&lt;code&gt;PolyKinds&lt;/code&gt;&lt;/a&gt; extension is enabled, then it can range of types of kind &lt;code&gt;k -&amp;gt; Type&lt;/code&gt;, for any kind &lt;code&gt;k&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Generic1&lt;/code&gt; は、 &lt;code&gt;map&lt;/code&gt; などのタイプコンテナーに対してのみ定義できる関数に使用されます。 &lt;code&gt;Generic1&lt;/code&gt; は、デフォルトで種類Type- &lt;code&gt;Type -&amp;gt; Type&lt;/code&gt; 範囲に及ぶことに注意してください。ただし、&lt;a href=&quot;#extension-PolyKinds&quot;&gt; &lt;code&gt;PolyKinds&lt;/code&gt; &lt;/a&gt;拡張機能が有効になっている場合は、種類 &lt;code&gt;k -&amp;gt; Type&lt;/code&gt; の種類の範囲-&amp;gt; Typeを任意の種類 &lt;code&gt;k&lt;/code&gt; に適用できます。</target>
        </trans-unit>
        <trans-unit id="d00838cee73d94164cf18cf4d9aa6fa583d994bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Generic1&lt;/code&gt; is used for functions that can only be defined over type containers, such as &lt;code&gt;map&lt;/code&gt;. Note that &lt;code&gt;Generic1&lt;/code&gt; ranges over types of kind &lt;code&gt;Type -&amp;gt; Type&lt;/code&gt; by default, but if the &lt;a href=&quot;poly_kinds#extension-PolyKinds&quot;&gt;&lt;code&gt;PolyKinds&lt;/code&gt;&lt;/a&gt; extension is enabled, then it can range of types of kind &lt;code&gt;k -&amp;gt; Type&lt;/code&gt;, for any kind &lt;code&gt;k&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Generic1&lt;/code&gt; は、 &lt;code&gt;map&lt;/code&gt; などのタイプコンテナに対してのみ定義できる関数に使用されます。注意 &lt;code&gt;Generic1&lt;/code&gt; は一種の種類以上の範囲 &lt;code&gt;Type -&amp;gt; Type&lt;/code&gt; デフォルトではなく、場合&lt;a href=&quot;poly_kinds#extension-PolyKinds&quot;&gt; &lt;code&gt;PolyKinds&lt;/code&gt; の&lt;/a&gt;拡張機能が有効になっている、それは一種の型の範囲することができます &lt;code&gt;k -&amp;gt; Type&lt;/code&gt; いずれかの種類のために、 &lt;code&gt;k&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a148a88bda531280ce07277c149aeeb8b4a7fa46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_BIOGRAPHY&lt;/code&gt; (output from &lt;a href=&quot;profiling#rts-flag--hb&quot;&gt;&lt;code&gt;-hb&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;HEAP_PROF_BREAKDOWN_BIOGRAPHY&lt;/code&gt; （出力&lt;a href=&quot;profiling#rts-flag--hb&quot;&gt; &lt;code&gt;-hb&lt;/code&gt; &lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="068621d0e0e41ba086128590df0fff41e1584f9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_CLOSURE_DESCR&lt;/code&gt; (output from &lt;a href=&quot;profiling#rts-flag--hd&quot;&gt;&lt;code&gt;-hd&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;HEAP_PROF_BREAKDOWN_CLOSURE_DESCR&lt;/code&gt; （出力&lt;a href=&quot;profiling#rts-flag--hd&quot;&gt; &lt;code&gt;-hd&lt;/code&gt; &lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="58a8b71168176994430a3b85d67178e5de6130f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_CLOSURE_TYPE&lt;/code&gt; (output from &lt;a href=&quot;runtime_control#rts-flag--hT&quot;&gt;&lt;code&gt;-hT&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;HEAP_PROF_BREAKDOWN_CLOSURE_TYPE&lt;/code&gt; （出力&lt;a href=&quot;runtime_control#rts-flag--hT&quot;&gt; &lt;code&gt;-hT&lt;/code&gt; &lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="209a144514bd6e95585d78e3e5e19f871cad323d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_COST_CENTER&lt;/code&gt; (output from &lt;a href=&quot;profiling#rts-flag--hc&quot;&gt;&lt;code&gt;-hc&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;HEAP_PROF_BREAKDOWN_COST_CENTER&lt;/code&gt; （出力&lt;a href=&quot;profiling#rts-flag--hc&quot;&gt; &lt;code&gt;-hc&lt;/code&gt; &lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="f451a9f63b51d74a46a9eb64ea0f9b88a970893b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_MODULE&lt;/code&gt; (output from &lt;a href=&quot;profiling#rts-flag--hm&quot;&gt;&lt;code&gt;-hm&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;HEAP_PROF_BREAKDOWN_MODULE&lt;/code&gt; （出力&lt;a href=&quot;profiling#rts-flag--hm&quot;&gt; &lt;code&gt;-hm&lt;/code&gt; &lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="ec935e2a6930cb421328847852dc23d457d013d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_RETAINER&lt;/code&gt; (output from &lt;a href=&quot;profiling#rts-flag--hr&quot;&gt;&lt;code&gt;-hr&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;HEAP_PROF_BREAKDOWN_RETAINER&lt;/code&gt; （出力&lt;a href=&quot;profiling#rts-flag--hr&quot;&gt; &lt;code&gt;-hr&lt;/code&gt; &lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="ca3e72b620b2d3d0650ba2a97060b270f6baaf16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_TYPE_DESCR&lt;/code&gt; (output from &lt;a href=&quot;profiling#rts-flag--hy&quot;&gt;&lt;code&gt;-hy&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;HEAP_PROF_BREAKDOWN_TYPE_DESCR&lt;/code&gt; （出力&lt;a href=&quot;profiling#rts-flag--hy&quot;&gt; &lt;code&gt;-hy&lt;/code&gt; &lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="d7bc90056af6e8a8f92b1863498736e87ba72e93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Happy&lt;/code&gt; is at its shining best when compiled by GHC.</source>
          <target state="translated">&lt;code&gt;Happy&lt;/code&gt; はGHCによって編集されたときその輝かしい最高にあります。</target>
        </trans-unit>
        <trans-unit id="4e7fb99a7c08e34fbbbc2b3dcaabb50bc04ddf4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HardwareFault&lt;/code&gt; A physical I/O error has occurred. &lt;code&gt;[EIO]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HardwareFault&lt;/code&gt; 物理I / Oエラーが発生しました。 &lt;code&gt;[EIO]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6068446cca90eb8d5dbf34bec50409f58be19461" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasCallStack&lt;/code&gt; does not interact with the RTS and does not require compilation with &lt;code&gt;-prof&lt;/code&gt;. On the other hand, as the &lt;code&gt;CallStack&lt;/code&gt; is built up explicitly via the &lt;code&gt;HasCallStack&lt;/code&gt; constraints, it will generally not contain as much information as the simulated call-stacks maintained by the RTS.</source>
          <target state="translated">&lt;code&gt;HasCallStack&lt;/code&gt; は RTSと相互作用しないとしてコンパイルを必要としない &lt;code&gt;-prof&lt;/code&gt; 。一方、 &lt;code&gt;CallStack&lt;/code&gt; は &lt;code&gt;HasCallStack&lt;/code&gt; 制約を介して明示的に構築されるため、RTSによって維持されるシミュレートされたコールスタックほど多くの情報は含まれません。</target>
        </trans-unit>
        <trans-unit id="e5d8b1de1f8979e61e56730cc1889a483e11eac7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasField &quot;foo&quot; (T ...) _&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; has a field &lt;code&gt;foo&lt;/code&gt; (but this instance is permitted if it does not).</source>
          <target state="translated">&lt;code&gt;HasField &quot;foo&quot; (T ...) _&lt;/code&gt; あれば &lt;code&gt;T&lt;/code&gt; は、フィールドがある &lt;code&gt;foo&lt;/code&gt; （それがない場合、このインスタンスが許可されています）。</target>
        </trans-unit>
        <trans-unit id="5700fafed7e10df4a8c118fcd5e9263f0065a67b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasField _ (T ...) _&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a data family (because it might have fields introduced later, using data instance declarations);</source>
          <target state="translated">&lt;code&gt;HasField _ (T ...) _&lt;/code&gt; あれば &lt;code&gt;T&lt;/code&gt; はデータ族である（それはフィールドはデータインスタンス宣言を使用して、後から導入している可能性があるため）。</target>
        </trans-unit>
        <trans-unit id="5264b03696796236f3d719c78abcae6b3f3f0a09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasField _ r _&lt;/code&gt; where &lt;code&gt;r&lt;/code&gt; is a variable;</source>
          <target state="translated">&lt;code&gt;HasField _ r _&lt;/code&gt; ここで、 &lt;code&gt;r&lt;/code&gt; は変数です。</target>
        </trans-unit>
        <trans-unit id="e9c05d6fdac6e1567fec438d0cdab0fc4afb3545" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasField x (T ...) _&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is a variable and &lt;code&gt;T&lt;/code&gt; has any fields at all (but this instance is permitted if &lt;code&gt;T&lt;/code&gt; has no fields);</source>
          <target state="translated">&lt;code&gt;HasField x (T ...) _&lt;/code&gt; 場合 &lt;code&gt;x&lt;/code&gt; 変数であり、 &lt;code&gt;T&lt;/code&gt; は全く任意のフィールドを持っている（しかし、もしこのインスタンスが許可されている &lt;code&gt;T&lt;/code&gt; はないフィールドを持っていません）。</target>
        </trans-unit>
        <trans-unit id="7aec9ce990f77203a5be3e65db8c8327be14721f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasField&lt;/code&gt; is a magic built-in typeclass (similar to &lt;code&gt;Coercible&lt;/code&gt;, for example). It is given special treatment by the constraint solver (see &lt;a href=&quot;#solving-hasfield-constraints&quot;&gt;Solving HasField constraints&lt;/a&gt;). Users may define their own instances of &lt;code&gt;HasField&lt;/code&gt; also (see &lt;a href=&quot;#virtual-record-fields&quot;&gt;Virtual record fields&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;HasField&lt;/code&gt; は魔法の組み込み型クラスです（たとえば、 &lt;code&gt;Coercible&lt;/code&gt; に似ています）。制約ソルバーによって特別な扱いが与えられます（&lt;a href=&quot;#solving-hasfield-constraints&quot;&gt;HasField制約の解決を&lt;/a&gt;参照）。ユーザーは &lt;code&gt;HasField&lt;/code&gt; の独自のインスタンスも定義できます（&lt;a href=&quot;#virtual-record-fields&quot;&gt;仮想レコードフィールドを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="d20e178ee4e7ec8ad37a957ea188f63fe497426d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HoleFitPlugins&lt;/code&gt; are then defined as follows</source>
          <target state="translated">&lt;code&gt;HoleFitPlugins&lt;/code&gt; 次に、HoleFitPluginsは次のように定義されます</target>
        </trans-unit>
        <trans-unit id="533982614e84625b9b013ab97e717a02d3751315" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HoleFitPlugins&lt;/code&gt; are wrapped in a &lt;code&gt;HoleFitPluginR&lt;/code&gt;, which provides a &lt;code&gt;TcRef&lt;/code&gt; for the plugin to use to track internal state, and to facilitate communication between the candidate and fit plugin.</source>
          <target state="translated">&lt;code&gt;HoleFitPlugins&lt;/code&gt; はでラップされ &lt;code&gt;HoleFitPluginR&lt;/code&gt; 提供 &lt;code&gt;TcRef&lt;/code&gt; を内部状態を追跡するために使用する、候補とフィットプラグインとの間の通信を容易にするプラグインの。</target>
        </trans-unit>
        <trans-unit id="dc6cffe526f8b73f4e82196500374e9b8a6444bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;INLINE&lt;/code&gt; pragmas are a particularly good idea for the &lt;code&gt;then&lt;/code&gt;/&lt;code&gt;return&lt;/code&gt; (or &lt;code&gt;bind&lt;/code&gt;/&lt;code&gt;unit&lt;/code&gt;) functions in a monad. For example, in GHC&amp;rsquo;s own &lt;code&gt;UniqueSupply&lt;/code&gt; monad code, we have:</source>
          <target state="translated">&lt;code&gt;INLINE&lt;/code&gt; プラグマは、モナドの &lt;code&gt;then&lt;/code&gt; / &lt;code&gt;return&lt;/code&gt; （または &lt;code&gt;bind&lt;/code&gt; / &lt;code&gt;unit&lt;/code&gt; ）関数にとって特に良いアイデアです。たとえば、GHC独自の &lt;code&gt;UniqueSupply&lt;/code&gt; モナドコードでは、次のようになります。</target>
        </trans-unit>
        <trans-unit id="901c047eb44abad4b6a88d748d755034c6f1a34d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; arrays with boxed elements</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; ボックス化された要素を持つIO配列</target>
        </trans-unit>
        <trans-unit id="42a7b46391e9bb7b64c3bb83e7cfb74f064ef781" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; arrays with unboxed elements</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; ボックス化されていない要素を持つIO配列</target>
        </trans-unit>
        <trans-unit id="1bab4139528505f1933a5126ca5e8dad8d6f05a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#v:newTBQueue&quot;&gt;newTBQueue&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;atomically&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#v:newTBQueue&quot;&gt;newTBQueue&lt;/a&gt;&lt;/code&gt; の IOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; 使用S &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;atomically&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="379e487bf600ecb8b0dc3c55ed12ff6ecee70812" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#v:newTBQueue&quot;&gt;newTBQueue&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;atomically&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#v:newTBQueue&quot;&gt;newTBQueue&lt;/a&gt;&lt;/code&gt; のIOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; 使用S &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;atomically&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="ce1d6612c901b640a3f9ce0018db30af2dbb3147" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#v:newTBQueue&quot;&gt;newTBQueue&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;atomically&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#v:newTBQueue&quot;&gt;newTBQueue&lt;/a&gt;&lt;/code&gt; のIOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; 使用S &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;atomically&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="e0fe5fae312067423e670caed31b21f21aec8380" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:newBroadcastTChan&quot;&gt;newBroadcastTChan&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:newBroadcastTChan&quot;&gt;newBroadcastTChan&lt;/a&gt;&lt;/code&gt; の IOバージョン。</target>
        </trans-unit>
        <trans-unit id="8b624f4c489644af79e12b03eb404af311649a56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:newTChan&quot;&gt;newTChan&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:newTChan&quot;&gt;newTChan&lt;/a&gt;&lt;/code&gt; の IOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt; の使用 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="ea4f0d05d35ce3750a6c2a025173003d7ee8e4b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:newTChan&quot;&gt;newTChan&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:newTChan&quot;&gt;newTChan&lt;/a&gt;&lt;/code&gt; のIOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt; の使用 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="f74508c2d57ccccb926131a2eae989ce33f601d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:newTChan&quot;&gt;newTChan&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:newTChan&quot;&gt;newTChan&lt;/a&gt;&lt;/code&gt; のIOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt; の使用 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="9bf20f0a03d2295cf766d6ee202fdb2629a13ab9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newEmptyTMVar&quot;&gt;newEmptyTMVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newEmptyTMVar&quot;&gt;newEmptyTMVar&lt;/a&gt;&lt;/code&gt; の IOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; の使用 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="da9f8cb745e6853c75472a31ab7067ff76e01f36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newEmptyTMVar&quot;&gt;newEmptyTMVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newEmptyTMVar&quot;&gt;newEmptyTMVar&lt;/a&gt;&lt;/code&gt; のIOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; の使用 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="6189d22a760f6634a472f5d418fa91b3600dd226" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newEmptyTMVar&quot;&gt;newEmptyTMVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newEmptyTMVar&quot;&gt;newEmptyTMVar&lt;/a&gt;&lt;/code&gt; のIOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; の使用 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="c2d30910e61968ba33e90093ef732f69e067e626" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newTMVar&quot;&gt;newTMVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newTMVar&quot;&gt;newTMVar&lt;/a&gt;&lt;/code&gt; の IOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; の使用 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="8cebd28d4c93e1df1496cde6e41b72ebde7a7ad0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newTMVar&quot;&gt;newTMVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newTMVar&quot;&gt;newTMVar&lt;/a&gt;&lt;/code&gt; のIOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; の使用 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="f85fa8ae4f1b9f16686f191856afc03deb5e6fe5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newTMVar&quot;&gt;newTMVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newTMVar&quot;&gt;newTMVar&lt;/a&gt;&lt;/code&gt; のIOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; の使用 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="cf1336f44e50c7b39bebbf08a440daab9c174089" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#v:newTQueue&quot;&gt;newTQueue&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#v:newTQueue&quot;&gt;newTQueue&lt;/a&gt;&lt;/code&gt; の IOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt; の使用 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="e714c34e96580f3404158dafccee4018c47a4e7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#v:newTQueue&quot;&gt;newTQueue&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#v:newTQueue&quot;&gt;newTQueue&lt;/a&gt;&lt;/code&gt; のIOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt; の使用 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="d3e437454d5f43cc75ad21bf519e6a6d0d895675" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#v:newTQueue&quot;&gt;newTQueue&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#v:newTQueue&quot;&gt;newTQueue&lt;/a&gt;&lt;/code&gt; のIOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt; の使用 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="3d874a88b64c4df2448eb9e342598edefa0288cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt; の IOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 使用S &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="4a6fecbf37ac802d728b75b399dce7f6cb65a300" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt; のIOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 使用S &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="d56bcaea5219587172851ffea9e2f364c9208168" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt; のIOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 使用S &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="516f29992eac640bfb59ed6888b6d20b2bbab2db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;ghc-conc#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;ghc-conc#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;ghc-conc#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt; の IOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 使用S &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="bceb1c379d548419d109f13f58a3de8d417d8817" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt; の IOバージョン。これは、トップレベルの作成に有用である &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 使用S &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; を使用しているため、 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 内部 &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; することは不可能です。</target>
        </trans-unit>
        <trans-unit id="1ce0b487e317e9c5b653ea8d945068173ff933f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IOErrorType&lt;/code&gt; predicates</source>
          <target state="translated">&lt;code&gt;IOErrorType&lt;/code&gt; 述語</target>
        </trans-unit>
        <trans-unit id="c15b27b6cc7c3faa78681c91847f1fd46e4be27b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ImportQualifiedPost&lt;/code&gt; allows the syntax &lt;code&gt;import M qualified&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ImportQualifiedPost&lt;/code&gt; は、構文ことができます &lt;code&gt;import M qualified&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e13aa25c95855e50897a4ca7fc4be0bc55141120" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ImportQualifiedPost&lt;/code&gt; allows the syntax &lt;code&gt;import M qualified&lt;/code&gt;, that is, to annotate a module as qualified by writing &lt;code&gt;qualified&lt;/code&gt; after the module name.</source>
          <target state="translated">&lt;code&gt;ImportQualifiedPost&lt;/code&gt; は、構文ができます &lt;code&gt;import M qualified&lt;/code&gt; 書き込むことによって修飾としてモジュールに注釈を付けること、である、 &lt;code&gt;qualified&lt;/code&gt; モジュール名の後に。</target>
        </trans-unit>
        <trans-unit id="6ec2892e99b7bf5db3e130e5a59572fb77c0cfde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; Either path refers to an existing directory. &lt;code&gt;[ENOTDIR, EISDIR, EINVAL, EEXIST, ENOTEMPTY]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InappropriateType&lt;/code&gt; どちらのパスも既存のディレクトリを参照しています。 &lt;code&gt;[ENOTDIR, EISDIR, EINVAL, EEXIST, ENOTEMPTY]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9167ba62b64c56ed3fb570018b11a056ec8c14e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; Either path refers to an existing non-directory object. &lt;code&gt;[ENOTDIR, EISDIR]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InappropriateType&lt;/code&gt; どちらのパスも、既存の非ディレクトリオブジェクトを参照しています。 &lt;code&gt;[ENOTDIR, EISDIR]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fde883260c4267d5fd7e6f9499278487dbc99deb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; Either the destination path refers to an existing directory, or one of the parent segments in the destination path is not a directory. &lt;code&gt;[ENOTDIR, EISDIR, EINVAL, EEXIST, ENOTEMPTY]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InappropriateType&lt;/code&gt; 宛先パスが既存のディレクトリを参照しているか、宛先パスの親セグメントの1つがディレクトリではありません。 &lt;code&gt;[ENOTDIR, EISDIR, EINVAL, EEXIST, ENOTEMPTY]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="19368a400e931bcc5f0723b99aa19e33c6f36db3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; The operand refers to an existing directory. &lt;code&gt;[EPERM, EINVAL]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InappropriateType&lt;/code&gt; オペランドは既存のディレクトリを参照しています。 &lt;code&gt;[EPERM, EINVAL]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1d93edc091d9addc333a574a6fb146b6b670ded1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; The operand refers to an existing non-directory object. &lt;code&gt;[ENOTDIR]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InappropriateType&lt;/code&gt; オペランドは、既存の非ディレクトリオブジェクトを参照しています。 &lt;code&gt;[ENOTDIR]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2653bd58a2db75a12dbbb3dfbc2c005ae4a403db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; The path refers to an existing non-directory object. &lt;code&gt;[EEXIST]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InappropriateType&lt;/code&gt; パスは、既存の非ディレクトリオブジェクトを参照しています。 &lt;code&gt;[EEXIST]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="97c23c3e11cba77cebb16481b8ae3eb81980a2f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; The path refers to an existing non-directory object. &lt;code&gt;[ENOTDIR]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InappropriateType&lt;/code&gt; パスは、既存の非ディレクトリオブジェクトを参照しています。 &lt;code&gt;[ENOTDIR]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6e316f50b68392c3bf88565809d8d5921608e25e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int#&lt;/code&gt;-boolean valued versions of comparison predicates</source>
          <target state="translated">&lt;code&gt;Int#&lt;/code&gt; -比較述語のブール値バージョン</target>
        </trans-unit>
        <trans-unit id="3c5af0835484c93acfce75dd1f0be2a7475a5843" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, and &lt;code&gt;Double&lt;/code&gt; arithmetic is &lt;em&gt;unchecked&lt;/em&gt;. Overflows, underflows and loss of precision are either silent or reported as an exception by the operating system (depending on the platform). Divide-by-zero &lt;em&gt;may&lt;/em&gt; cause an untrapped exception (please report it if it does).</source>
          <target state="translated">&lt;code&gt;Int&lt;/code&gt; 、 &lt;code&gt;Float&lt;/code&gt; 、および &lt;code&gt;Double&lt;/code&gt; 演算は&lt;em&gt;チェックされていません&lt;/em&gt;。オーバーフロー、アンダーフロー、および精度の低下は、サイレントであるか、オペレーティングシステムによって例外として報告されます（プラットフォームによって異なります）。ゼロで除算&lt;em&gt;する&lt;/em&gt;と、トラップされない例外&lt;em&gt;が&lt;/em&gt;発生する&lt;em&gt;可能性が&lt;/em&gt;あります（発生する場合は報告してください）。</target>
        </trans-unit>
        <trans-unit id="d99bc7e94a1d72caaafed95443b5f36b2617ac42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InvalidArgument&lt;/code&gt; Either operand is not a valid directory name. &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InvalidArgument&lt;/code&gt; いずれかのオペランドが有効なディレクトリ名ではありません。 &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="96ababa591787c1343e9b7ad0aaab21ce4e69061" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InvalidArgument&lt;/code&gt; Either operand is not a valid file name. &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InvalidArgument&lt;/code&gt; いずれかのオペランドが有効なファイル名ではありません。 &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a9840b1befc0df2612d36488b1b1d4ecccc5f414" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InvalidArgument&lt;/code&gt; The operand is not a valid directory name. &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InvalidArgument&lt;/code&gt; オペランドが有効なディレクトリ名ではありません。 &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f49c8b69035a45d96153fa175c98a2806e9feead" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InvalidArgument&lt;/code&gt; The operand is not a valid file name. &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InvalidArgument&lt;/code&gt; オペランドが有効なファイル名ではありません。 &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e7fd3d7a643641e7914c0691c98647c1656fdbcc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ix&lt;/code&gt; is an orphan instance or a multi-parameter-type-class.</source>
          <target state="translated">&lt;code&gt;Ix&lt;/code&gt; は孤立したインスタンスまたはマルチパラメータタイプクラスです。</target>
        </trans-unit>
        <trans-unit id="9bf57a5f62276c3028a14efb3cc961be69551b17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Iy&lt;/code&gt; is not marked &lt;code&gt;OVERLAPPABLE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Iy&lt;/code&gt; は &lt;code&gt;OVERLAPPABLE&lt;/code&gt; とマークされていません</target>
        </trans-unit>
        <trans-unit id="7de88eab6cd0113c6c7ff7d763258bf2eb18a9bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LANGUAGE&lt;/code&gt; is a file-header pragma (see &lt;a href=&quot;#pragmas&quot;&gt;Pragmas&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;LANGUAGE&lt;/code&gt; は、ファイルヘッダープラグマです（&lt;a href=&quot;#pragmas&quot;&gt;プラグマを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="f076d3164cc7f28be9ed21236444f2fb85c29cd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LINE&lt;/code&gt; pragmas generated from Template Haskell set the file and line position for the duration of the splice and are limited to the splice. Note that because Template Haskell splices abstract syntax, the file positions are not automatically advanced.</source>
          <target state="translated">&lt;code&gt;LINE&lt;/code&gt; テンプレートHaskellから生成されたLINEプラグマは、スプライスの期間中のファイルと行の位置を設定し、スプライスに制限されます。テンプレートHaskellは抽象構文をスプライスするため、ファイルの位置は自動的には進みません。</target>
        </trans-unit>
        <trans-unit id="470d6dd2e7912f4907d0f83a0fcef8239178e8af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MVar&lt;/code&gt;s</source>
          <target state="translated">&lt;code&gt;MVar&lt;/code&gt;s</target>
        </trans-unit>
        <trans-unit id="8e950852064463f2891ce5299025a3f0486b0f69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Maybe&lt;/code&gt; wrappers</source>
          <target state="translated">&lt;code&gt;Maybe&lt;/code&gt; ラッパー</target>
        </trans-unit>
        <trans-unit id="f1847b86db7d48ce524d541637255e35bc38b76a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MkFoo1&lt;/code&gt; and &lt;code&gt;MkFoo2&lt;/code&gt; can be promoted, since their contexts only involve equality-oriented constraints. However, &lt;code&gt;MkFoo3&lt;/code&gt;&amp;lsquo;s context contains a non-equality constraint &lt;code&gt;Show a&lt;/code&gt;, and thus cannot be promoted.</source>
          <target state="translated">&lt;code&gt;MkFoo1&lt;/code&gt; と &lt;code&gt;MkFoo2&lt;/code&gt; は、それらのコンテキストに含まれるのは等値指向の制約のみであるため、昇格できます。ただし、 &lt;code&gt;MkFoo3&lt;/code&gt; のコンテキストには非等号制約 &lt;code&gt;Show a&lt;/code&gt; が含まれているため、昇格できません。</target>
        </trans-unit>
        <trans-unit id="9f5ee6f833d3b2e9951ec6ab238d8ea1b6fd3579" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MkFoo1&lt;/code&gt; and &lt;code&gt;MkFoo2&lt;/code&gt; can be promoted, since their contexts only involve equality-oriented constraints. However, &lt;code&gt;MkFoo3&lt;/code&gt;&amp;rsquo;s context contains a non-equality constraint &lt;code&gt;Show a&lt;/code&gt;, and thus cannot be promoted.</source>
          <target state="translated">&lt;code&gt;MkFoo1&lt;/code&gt; と &lt;code&gt;MkFoo2&lt;/code&gt; は、コンテキストに等式指向の制約のみが含まれるため、昇格できます。ただし、 &lt;code&gt;MkFoo3&lt;/code&gt; のコンテキストには非等式制約 &lt;code&gt;Show a&lt;/code&gt; が含まれているため、昇格できません。</target>
        </trans-unit>
        <trans-unit id="3db30a94611388e3ec6f6f7a0d10306ac89b36b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Monoid&lt;/code&gt; typeclass</source>
          <target state="translated">&lt;code&gt;Monoid&lt;/code&gt; クラス</target>
        </trans-unit>
        <trans-unit id="6ce30fdd32f587a07c3ccd03a7589cbe882b388f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NFData&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;NFData&lt;/code&gt; クラス</target>
        </trans-unit>
        <trans-unit id="ec680a929ede9b766f3bf18664d11ed7399400a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NOTINLINE&lt;/code&gt; is a synonym for &lt;code&gt;NOINLINE&lt;/code&gt; (&lt;code&gt;NOINLINE&lt;/code&gt; is specified by Haskell 98 as the standard way to disable inlining, so it should be used if you want your code to be portable).</source>
          <target state="translated">&lt;code&gt;NOTINLINE&lt;/code&gt; は同義語である &lt;code&gt;NOINLINE&lt;/code&gt; （ &lt;code&gt;NOINLINE&lt;/code&gt; が無効にインライン化する標準的な方法としてはHaskell 98で指定されているので、あなたのコードがポータブルになりたい場合は、それを使用する必要があります）。</target>
        </trans-unit>
        <trans-unit id="d2cb5297978bdd0d73f9920f2cb94ca4e2c109d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NominalDiffTime&lt;/code&gt; and &lt;code&gt;DiffTime&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;NominalDiffTime&lt;/code&gt; および &lt;code&gt;DiffTime&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c84f1d4a4b497e7078e729e86506cddd7bfb2b75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Num&lt;/code&gt; instance, and</source>
          <target state="translated">&lt;code&gt;Num&lt;/code&gt; インスタンス、および</target>
        </trans-unit>
        <trans-unit id="45c396e63bd9c44eeb55cdefadb405ee01a84408" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Num&lt;/code&gt; wrappers</source>
          <target state="translated">&lt;code&gt;Num&lt;/code&gt; ラッパー</target>
        </trans-unit>
        <trans-unit id="2a353d1c569ad940f238c445c1000ad6c6085778" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OPTIONS_GHC&lt;/code&gt; is a &lt;em&gt;file-header pragma&lt;/em&gt; (see &lt;a href=&quot;exts/pragmas#options-pragma&quot;&gt;OPTIONS_GHC pragma&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;OPTIONS_GHC&lt;/code&gt; は、&lt;em&gt;ファイルヘッダープラグマです&lt;/em&gt;（&lt;a href=&quot;exts/pragmas#options-pragma&quot;&gt;OPTIONS_GHCプラグマを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="339e7f1c84a18e65c7b455719bba422a3d544601" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OPTIONS_GHC&lt;/code&gt; is a &lt;em&gt;file-header pragma&lt;/em&gt; (see &lt;a href=&quot;glasgow_exts#options-pragma&quot;&gt;OPTIONS_GHC pragma&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;OPTIONS_GHC&lt;/code&gt; は&lt;em&gt;ファイルヘッダープラグマです&lt;/em&gt;（&lt;a href=&quot;glasgow_exts#options-pragma&quot;&gt;OPTIONS_GHCプラグマを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e59fff9df8173d07867cecfecb2c5ff2512242c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OPTIONS_GHC&lt;/code&gt; is a file-header pragma (see &lt;a href=&quot;#pragmas&quot;&gt;Pragmas&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;OPTIONS_GHC&lt;/code&gt; は、ファイルヘッダープラグマです（&lt;a href=&quot;#pragmas&quot;&gt;プラグマを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="7765f78f62ac1e9afb8eb0f2da33f6f7ea4ee12d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OverlappingInstances&lt;/code&gt; &amp;mdash; There is no restriction on the creation of overlapping instances, but we do restrict their use at a particular call site. This is a detailed restriction, please refer to &lt;a href=&quot;#safe-overlapping-instances&quot;&gt;Safe Overlapping Instances&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;OverlappingInstances&lt;/code&gt; &amp;mdash;重複するインスタンスの作成に制限はありませんが、特定の呼び出しサイトでの使用を制限しています。これは詳細な制限です。詳細については、「&lt;a href=&quot;#safe-overlapping-instances&quot;&gt;安全な重複インスタンス」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="36255b2fbbb41ed1d004bec3abd13a6f6d816e9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ParsecT s u m a&lt;/code&gt; is a parser with stream type &lt;code&gt;s&lt;/code&gt;, user state type &lt;code&gt;u&lt;/code&gt;, underlying monad &lt;code&gt;m&lt;/code&gt; and return type &lt;code&gt;a&lt;/code&gt;. Parsec is strict in the user state. If this is undesirable, simply use a data type like &lt;code&gt;data Box a = Box a&lt;/code&gt; and the state type &lt;code&gt;Box YourStateType&lt;/code&gt; to add a level of indirection.</source>
          <target state="translated">&lt;code&gt;ParsecT s u m a&lt;/code&gt; は、ストリーム型 &lt;code&gt;s&lt;/code&gt; 、ユーザー状態型 &lt;code&gt;u&lt;/code&gt; 、基礎となるモナド &lt;code&gt;m&lt;/code&gt; 、戻り型 &lt;code&gt;a&lt;/code&gt; を持つパーサーです。Parsecはユーザー状態で厳密です。これが望ましくない場合は、 &lt;code&gt;data Box a = Box a&lt;/code&gt; ようなデータ型と状態タイプ &lt;code&gt;Box YourStateType&lt;/code&gt; を使用して、間接参照のレベルを追加します。</target>
        </trans-unit>
        <trans-unit id="fb6af7ff9bda841f09ba07d97347830184d0f8f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Plugin&lt;/code&gt; exports a field, &lt;code&gt;installCoreToDos&lt;/code&gt; which is a function of type &lt;code&gt;[CommandLineOption] -&amp;gt; [CoreToDo] -&amp;gt; CoreM [CoreToDo]&lt;/code&gt;. A &lt;code&gt;CommandLineOption&lt;/code&gt; is effectively just &lt;code&gt;String&lt;/code&gt;, and a &lt;code&gt;CoreToDo&lt;/code&gt; is basically a function of type &lt;code&gt;Core -&amp;gt; Core&lt;/code&gt;. A &lt;code&gt;CoreToDo&lt;/code&gt; gives your pass a name and runs it over every compiled module when you invoke GHC.</source>
          <target state="translated">&lt;code&gt;Plugin&lt;/code&gt; は、タイプ &lt;code&gt;[CommandLineOption] -&amp;gt; [CoreToDo] -&amp;gt; CoreM [CoreToDo]&lt;/code&gt; 関数であるフィールド &lt;code&gt;installCoreToDos&lt;/code&gt; をエクスポートします。A &lt;code&gt;CommandLineOption&lt;/code&gt; は効果だけで &lt;code&gt;String&lt;/code&gt; 、及び &lt;code&gt;CoreToDo&lt;/code&gt; は基本的タイプの関数である &lt;code&gt;Core -&amp;gt; Core&lt;/code&gt; 。A &lt;code&gt;CoreToDo&lt;/code&gt; は名前あなたのパスを与え、あなたのGHC呼び出しごとにコンパイルされたモジュール上でそれを実行します。</target>
        </trans-unit>
        <trans-unit id="67d3d0e89234b63e36a3e1abd25e28e36aa4ba6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Prelude&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;Prelude&lt;/code&gt; それ以外の場合は前奏曲。</target>
        </trans-unit>
        <trans-unit id="d7a373f7633c479789271c23e1b1277df47fb78a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PyYmMdD&lt;/code&gt; (ISO 8601:2004(E) sec. 4.4.3.2)</source>
          <target state="translated">&lt;code&gt;PyYmMdD&lt;/code&gt; （ISO 8601：2004（E）sec。4.4.3.2）</target>
        </trans-unit>
        <trans-unit id="42b6f33dd8dd2f78ec60b0d48abb85f162e0cb84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PyYmMdDThHmMs[.sss]S&lt;/code&gt; (ISO 8601:2004(E) sec. 4.4.3.2)</source>
          <target state="translated">&lt;code&gt;PyYmMdDThHmMs[.sss]S&lt;/code&gt; （ISO 8601：2004（E）sec。4.4.3.2）</target>
        </trans-unit>
        <trans-unit id="521b364495c09bcbe04448826274c726023d22e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;QualifiedDo&lt;/code&gt; enables qualifying a &lt;code&gt;do&lt;/code&gt; block with a module name, to control which operations to use for the monadic combinators that the &lt;code&gt;do&lt;/code&gt; notation desugars to. When &lt;code&gt;-XQualifiedDo&lt;/code&gt; is enabled, you can &lt;em&gt;qualify&lt;/em&gt; the &lt;code&gt;do&lt;/code&gt; notation by writing &lt;code&gt;modid.do&lt;/code&gt;, where &lt;code&gt;modid&lt;/code&gt; is a module name in scope:</source>
          <target state="translated">&lt;code&gt;QualifiedDo&lt;/code&gt; を使用すると、モジュール名で &lt;code&gt;do&lt;/code&gt; ブロックを修飾して、 &lt;code&gt;do&lt;/code&gt; 表記が脱糖するモナドコンビネータに使用する操作を制御できます。とき &lt;code&gt;-XQualifiedDo&lt;/code&gt; が有効になっている、あなたができる&lt;em&gt;資格&lt;/em&gt; &lt;code&gt;do&lt;/code&gt; 書き込むことによって表記を &lt;code&gt;modid.do&lt;/code&gt; 、 &lt;code&gt;modid&lt;/code&gt; スコープ内のモジュール名です。</target>
        </trans-unit>
        <trans-unit id="961ff89792e76bad1270d0352029c98a7f2504d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RULES&lt;/code&gt; &amp;mdash; Rewrite rules defined in a module M compiled with &lt;a href=&quot;#extension-Safe&quot;&gt;&lt;code&gt;Safe&lt;/code&gt;&lt;/a&gt; are dropped. Rules defined in Trustworthy modules that &lt;code&gt;M&lt;/code&gt; imports are still valid and will fire as usual.</source>
          <target state="translated">&lt;code&gt;RULES&lt;/code&gt; &amp;mdash; &lt;a href=&quot;#extension-Safe&quot;&gt; &lt;code&gt;Safe&lt;/code&gt; で&lt;/a&gt;コンパイルされたモジュールMで定義された書き換えルールは削除されます。 &lt;code&gt;M&lt;/code&gt; がインポートするTrustworthyモジュールで定義されたルールはまだ有効であり、通常どおり起動します。</target>
        </trans-unit>
        <trans-unit id="f68ff9c1328c6499c92ab6bc0d005a077e93ba0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reader&lt;/code&gt; to run in the modified environment.</source>
          <target state="translated">&lt;code&gt;Reader&lt;/code&gt; 変更された環境で実行するリーダー。</target>
        </trans-unit>
        <trans-unit id="150747c346cb4043728e6aeb094f71c729c4ff44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RealWorld&lt;/code&gt; is deeply magical. It is &lt;em&gt;primitive&lt;/em&gt;, but it is not &lt;em&gt;unlifted&lt;/em&gt; (hence &lt;code&gt;ptrArg&lt;/code&gt;). We never manipulate values of type &lt;code&gt;RealWorld&lt;/code&gt;; it's only used in the type system, to parameterise &lt;code&gt;State#&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RealWorld&lt;/code&gt; は非常に魔法のようです。これは&lt;em&gt;原始的ですが&lt;/em&gt;、&lt;em&gt;持ち上げ&lt;/em&gt;られていないわけではありませ&lt;em&gt;ん&lt;/em&gt;（したがって、 &lt;code&gt;ptrArg&lt;/code&gt; ）。 &lt;code&gt;RealWorld&lt;/code&gt; タイプの値を操作することはありません。これは型システムでのみ使用され、 &lt;code&gt;State#&lt;/code&gt; をパラメーター化します。</target>
        </trans-unit>
        <trans-unit id="17d8e5b60e541c9708c36f2eb66acc458855d367" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ScopedTypeVariables&lt;/code&gt; breaks GHC&amp;rsquo;s usual rule that explicit &lt;code&gt;forall&lt;/code&gt; is optional and doesn&amp;rsquo;t affect semantics. For the &lt;a href=&quot;#decl-type-sigs&quot;&gt;Declaration type signatures&lt;/a&gt; (or &lt;a href=&quot;#exp-type-sigs&quot;&gt;Expression type signatures&lt;/a&gt;) examples in this section, the explicit &lt;code&gt;forall&lt;/code&gt; is required. (If omitted, usually the program will not compile; in a few cases it will compile but the functions get a different signature.) To trigger those forms of &lt;code&gt;ScopedTypeVariables&lt;/code&gt;, the &lt;code&gt;forall&lt;/code&gt; must appear against the top-level signature (or outer expression) but &lt;em&gt;not&lt;/em&gt; against nested signatures referring to the same type variables.</source>
          <target state="translated">&lt;code&gt;ScopedTypeVariables&lt;/code&gt; は、明示的な &lt;code&gt;forall&lt;/code&gt; はオプションであり、セマンティクスには影響しないというGHCの通常の規則に違反します。このセクションの&lt;a href=&quot;#decl-type-sigs&quot;&gt;宣言型シグネチャ&lt;/a&gt;（または&lt;a href=&quot;#exp-type-sigs&quot;&gt;式型シグネチャ&lt;/a&gt;）の例では、明示的な &lt;code&gt;forall&lt;/code&gt; が必要です。（省略した場合、通常、プログラムはコンパイルされません。コンパイルされることもありますが、関数は異なるシグニチャーを取得します。）これらの形式の &lt;code&gt;ScopedTypeVariables&lt;/code&gt; をトリガーするには、 &lt;code&gt;forall&lt;/code&gt; がトップレベルのシグニチャー（または外部式）に対して表示される必要がありますが、同じ型の変数を参照するネストされたシグネチャに対してで&lt;em&gt;はありません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="5e8546de8393043d85df6466b8334ea2602c27fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Show&lt;/code&gt; and &lt;code&gt;Eq&lt;/code&gt; instances, and</source>
          <target state="translated">&lt;code&gt;Show&lt;/code&gt; および &lt;code&gt;Eq&lt;/code&gt; インスタンス、および</target>
        </trans-unit>
        <trans-unit id="b045de224343a1c387b5019818791a2694ab3cd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;State#&lt;/code&gt; is the primitive, unlifted type of states. It has one type parameter, thus &lt;code&gt;State# RealWorld&lt;/code&gt;, or &lt;code&gt;State# s&lt;/code&gt;, where s is a type variable. The only purpose of the type parameter is to keep different state threads separate. It is represented by nothing at all.</source>
          <target state="translated">&lt;code&gt;State#&lt;/code&gt; は、原始的な、持ち上げられていない状態のタイプです。これには1つの型パラメーターがあるため、 &lt;code&gt;State# RealWorld&lt;/code&gt; または &lt;code&gt;State# s&lt;/code&gt; です。ここで、sは型変数です。typeパラメータの唯一の目的は、異なる状態のスレッドを分離しておくことです。何も表されていません。</target>
        </trans-unit>
        <trans-unit id="d953c49248db1d20798dbfecf150b0ea4f7ce454" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Strict&lt;/code&gt; and &lt;code&gt;StrictData&lt;/code&gt; only affects definitions in the module they are used in. Functions and data types imported from other modules are unaffected. For example, we won&amp;rsquo;t evaluate the argument to &lt;code&gt;Just&lt;/code&gt; before applying the constructor. Similarly we won&amp;rsquo;t evaluate the first argument to &lt;code&gt;Data.Map.findWithDefault&lt;/code&gt; before applying the function.</source>
          <target state="translated">&lt;code&gt;Strict&lt;/code&gt; と &lt;code&gt;StrictData&lt;/code&gt; は、それらが使用されているモジュールの定義にのみ影響します。他のモジュールからインポートされた関数とデータ型は影響を受けません。たとえば、コンストラクタを適用する &lt;code&gt;Just&lt;/code&gt; に、引数を評価しません。同様に、関数を適用する前に &lt;code&gt;Data.Map.findWithDefault&lt;/code&gt; の最初の引数を評価しません。</target>
        </trans-unit>
        <trans-unit id="691f5268bc97c136ef0fd5624b38ea2322b13642" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Strict&lt;/code&gt; implies &lt;a href=&quot;#strict-data&quot;&gt;StrictData&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Strict&lt;/code&gt; は&lt;a href=&quot;#strict-data&quot;&gt;StrictDataを&lt;/a&gt;意味します。</target>
        </trans-unit>
        <trans-unit id="3ab68fe30de1834c2407e7d2cc3e965d8327927b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Biography filter</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; ：伝記フィルター</target>
        </trans-unit>
        <trans-unit id="ac96b5031b77df4e051a07a8628edebd8d8b9bd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Closure description filter</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; ：クロージャ説明フィルタ</target>
        </trans-unit>
        <trans-unit id="828827c4a462555cbd27487175c17eb5af20e685" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Cost centre filter</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; ：コストセンターフィルター</target>
        </trans-unit>
        <trans-unit id="dd397d881f95605a8a1624c0c1e46541c77ed119" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Cost centre stack filter</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; ：コストセンタースタックフィルター</target>
        </trans-unit>
        <trans-unit id="766256d50228d727faf935a0f569e1ea819a4474" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Module filter</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; ：モジュールフィルター</target>
        </trans-unit>
        <trans-unit id="ad54b46a3384c1f6d54893db00cf8b346306d510" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Retainer filter</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; ：保持フィルター</target>
        </trans-unit>
        <trans-unit id="c65175f99eb3eb09144f63eeba4ed2896107f996" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Type description filter</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; ：タイプ説明フィルター</target>
        </trans-unit>
        <trans-unit id="35e6ada374a8716af991f1b75981c04e5ec1447a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: label</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; ：ラベル</target>
        </trans-unit>
        <trans-unit id="fe2014b1e5fbc9dfd7f95e8a5e6c5b90d10ec94b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: module</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; ：モジュール</target>
        </trans-unit>
        <trans-unit id="9cce2ee62be918d933789d987c72075e686fd01f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: source location</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; ：ソースの場所</target>
        </trans-unit>
        <trans-unit id="cbeeb8eae0e3e79bc5d61d9b5f58ef4cd5fe08ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: type or closure description, or module name</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; ：タイプまたはクロージャの説明、またはモジュール名</target>
        </trans-unit>
        <trans-unit id="593aedd04957fecb0ecd4a0d1682f6ecef4e48ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TemplateHaskell&lt;/code&gt; &amp;mdash; Can be used to gain access to constructors and abstract data types that weren&amp;rsquo;t exported by a module, subverting module boundaries.</source>
          <target state="translated">&lt;code&gt;TemplateHaskell&lt;/code&gt; &amp;mdash;モジュールの境界を覆し、モジュールによってエクスポートされなかったコンストラクターおよび抽象データ型へのアクセスを取得するために使用できます。</target>
        </trans-unit>
        <trans-unit id="a239272fe0fbb6f9e56ba6d7932a7c3e4ef6a90e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Typeable&lt;/code&gt; is kind-polymorphic (see &lt;a href=&quot;#kind-polymorphism&quot;&gt;Kind polymorphism&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;Typeable&lt;/code&gt; は、kind-polymorphicです（&lt;a href=&quot;#kind-polymorphism&quot;&gt;Kind polymorphismを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="b63eb9358c1c6bbb07c3c748d7b61a3fed02525d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Typeable&lt;/code&gt; is kind-polymorphic (see &lt;a href=&quot;poly_kinds#kind-polymorphism&quot;&gt;Kind polymorphism&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;Typeable&lt;/code&gt; はkind-polymorphicです（&lt;a href=&quot;poly_kinds#kind-polymorphism&quot;&gt;Kind polymorphismを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="52040b4bac337720bdaeb27d72d21766b604d15d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTCTime&lt;/code&gt; and &lt;code&gt;ZonedTime&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UTCTime&lt;/code&gt; および &lt;code&gt;ZonedTime&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5d6bf75fee53246b618432df56bf7f00bae7355c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF-16&lt;/code&gt;, &lt;code&gt;UTF-16BE&lt;/code&gt;, &lt;code&gt;UTF-16LE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UTF-16&lt;/code&gt; 、 &lt;code&gt;UTF-16BE&lt;/code&gt; 、 &lt;code&gt;UTF-16LE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="83582f01952008dd81c27fec6422bc954d9d5f4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF-32&lt;/code&gt;, &lt;code&gt;UTF-32BE&lt;/code&gt;, &lt;code&gt;UTF-32LE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UTF-32&lt;/code&gt; 、 &lt;code&gt;UTF-32BE&lt;/code&gt; 、 &lt;code&gt;UTF-32LE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="068c4418106687cd5548668ce7057a140e2efd87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uniq&lt;/code&gt; is used by GHC to distinguish names from each other.</source>
          <target state="translated">&lt;code&gt;Uniq&lt;/code&gt; は、名前を互いに区別するためにGHCによって使用されます。</target>
        </trans-unit>
        <trans-unit id="3b54c2f57fb807de8cc0df62106b648136974182" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsatisfiedConstraints&lt;/code&gt; Implementation-dependent constraints are not satisfied. &lt;code&gt;[EBUSY, ENOTEMPTY, EEXIST]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UnsatisfiedConstraints&lt;/code&gt; 実装依存の制約が満たされていません。 &lt;code&gt;[EBUSY, ENOTEMPTY, EEXIST]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="da250b3804989b0a72671f1b86ef79968ebb5238" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsatisfiedConstraints&lt;/code&gt; Implementation-dependent constraints are not satisfied. &lt;code&gt;[EBUSY]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UnsatisfiedConstraints&lt;/code&gt; 実装依存の制約が満たされていません。 &lt;code&gt;[EBUSY]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0660b241338bccd2fb6cd29b6bb53ab9cc39c5c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The implementation does not support removal in this situation. &lt;code&gt;[EINVAL]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UnsupportedOperation&lt;/code&gt; 実装は、この状況での削除をサポートしていません。 &lt;code&gt;[EINVAL]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1d46558055619c14ce6a83bcc00dd667c816ea08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The implementation does not support renaming in this situation. &lt;code&gt;[EINVAL, EXDEV]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UnsupportedOperation&lt;/code&gt; この実装では、この状況での名前の変更はサポートされていません。 &lt;code&gt;[EINVAL, EXDEV]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6dc475e868fb74e8ba3bdab39d0aff97dc8489c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The implementation does not support renaming in this situation. &lt;code&gt;[EXDEV]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UnsupportedOperation&lt;/code&gt; この実装では、この状況での名前の変更はサポートされていません。 &lt;code&gt;[EXDEV]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9545512e2aded1a5123c575c06b5c671197e8add" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The operating system has no notion of application-specific data directory.</source>
          <target state="translated">&lt;code&gt;UnsupportedOperation&lt;/code&gt; オペレーティングシステムには、アプリケーション固有のデータディレクトリの概念はありません。</target>
        </trans-unit>
        <trans-unit id="9af063b48cb70612c9e31e94606b9d63a49558b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The operating system has no notion of current working directory, or the working directory cannot be dynamically changed.</source>
          <target state="translated">&lt;code&gt;UnsupportedOperation&lt;/code&gt; オペレーティングシステムに現在の作業ディレクトリの概念がないか、または作業ディレクトリを動的に変更できません。</target>
        </trans-unit>
        <trans-unit id="f2d2661856a3cd03506f48fe4735aa425a9e11e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The operating system has no notion of current working directory.</source>
          <target state="translated">&lt;code&gt;UnsupportedOperation&lt;/code&gt; オペレーティングシステムには、現在の作業ディレクトリの概念がありません。</target>
        </trans-unit>
        <trans-unit id="de72e737e54be81258b64fb7ba3aff517fab9709" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The operating system has no notion of document directory.</source>
          <target state="translated">&lt;code&gt;UnsupportedOperation&lt;/code&gt; オペレーティングシステムにはドキュメントディレクトリの概念がありません。</target>
        </trans-unit>
        <trans-unit id="f20d062d31428763adab8d45ff072cb7e3756899" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The operating system has no notion of home directory.</source>
          <target state="translated">&lt;code&gt;UnsupportedOperation&lt;/code&gt; オペレーティングシステムにはホームディレクトリの概念がありません。</target>
        </trans-unit>
        <trans-unit id="db45167ed4c480f8e5ee5133b810c044467b5f89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The operating system has no notion of temporary directory.</source>
          <target state="translated">&lt;code&gt;UnsupportedOperation&lt;/code&gt; オペレーティングシステムには、一時ディレクトリの概念がありません。</target>
        </trans-unit>
        <trans-unit id="6d187643c9b7dbe49cc293ea82ff2dfa5448a074" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WhenMatched&lt;/code&gt; tactics</source>
          <target state="translated">&lt;code&gt;WhenMatched&lt;/code&gt; 戦術</target>
        </trans-unit>
        <trans-unit id="159616400a692c69b068d46bd4c970d467315dc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WhenMissing&lt;/code&gt; tactics</source>
          <target state="translated">&lt;code&gt;WhenMissing&lt;/code&gt; 戦術</target>
        </trans-unit>
        <trans-unit id="e1e8c1ea96c98074e49f8099c1ba8333765ef6b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Word32&lt;/code&gt;: Sample break-down type. One of,</source>
          <target state="translated">&lt;code&gt;Word32&lt;/code&gt; ：サンプルの内訳タイプ。の一つ、</target>
        </trans-unit>
        <trans-unit id="e974cf0cf18bc7a75aada6d6fbad1643ca335886" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Word32&lt;/code&gt;: cost centre number</source>
          <target state="translated">&lt;code&gt;Word32&lt;/code&gt; ：コストセンター番号</target>
        </trans-unit>
        <trans-unit id="5f4ada9410b62496b425a16307d467f11f28d2d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Word32[]&lt;/code&gt;: cost centre stack starting with inner-most (cost centre numbers)</source>
          <target state="translated">&lt;code&gt;Word32[]&lt;/code&gt; ：最も内側から始まるコストセンタースタック（コストセンター番号）</target>
        </trans-unit>
        <trans-unit id="a7e547fe5072b36274cbe18086fdc1cef3c94170" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Word64&lt;/code&gt;: Sampling period in nanoseconds</source>
          <target state="translated">&lt;code&gt;Word64&lt;/code&gt; ：ナノ秒単位のサンプリング期間</target>
        </trans-unit>
        <trans-unit id="655461f866e8dcf7a719b29ca9eae06d41cc16f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Word64&lt;/code&gt;: heap residency in bytes</source>
          <target state="translated">&lt;code&gt;Word64&lt;/code&gt; ：バイト単位のヒープ常駐</target>
        </trans-unit>
        <trans-unit id="57c4bf76d18b8d73b8885944b2c3aba87800835e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Word64&lt;/code&gt;: sample number</source>
          <target state="translated">&lt;code&gt;Word64&lt;/code&gt; ：サンプル番号</target>
        </trans-unit>
        <trans-unit id="8c1b5641770bd3fd50e280d95a8774029f41ec91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Word8&lt;/code&gt;: Profile ID</source>
          <target state="translated">&lt;code&gt;Word8&lt;/code&gt; ：プロファイルID</target>
        </trans-unit>
        <trans-unit id="74a3555d86cd073ebeb3b493a6db6382cf95b8cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Word8&lt;/code&gt;: flags</source>
          <target state="translated">&lt;code&gt;Word8&lt;/code&gt; ：フラグ</target>
        </trans-unit>
        <trans-unit id="5f5c8012178da4dfb98e24b91a15275dc83f0cb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Word8&lt;/code&gt;: stack depth</source>
          <target state="translated">&lt;code&gt;Word8&lt;/code&gt; ：スタックの深さ</target>
        </trans-unit>
        <trans-unit id="3c0de180396ecebd5a0cc21d0d8efc7bd303c02c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[d| ... |]&lt;/code&gt;, where the &amp;ldquo;&amp;hellip;&amp;rdquo; is a list of top-level declarations; the quotation has type &lt;code&gt;Q [Dec]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[d| ... |]&lt;/code&gt; 、ここで「&amp;hellip;」はトップレベルの宣言のリストです。見積もりの​​タイプは &lt;code&gt;Q [Dec]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d6dbcfd4aff3d285d540a23f09e537c93ce97438" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[d| ... |]&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is a list of top-level declarations; the quotation has type &lt;code&gt;Q [Dec]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[d| ... |]&lt;/code&gt; 、ここで&amp;rdquo; ...&amp;rdquo;はトップレベルの宣言のリストです。見積もりの​​タイプは &lt;code&gt;Q [Dec]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1bdda657e607b026f5a41b06951c40406cde0a9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[d| ... |]&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is a list of top-level declarations; the quotation has type &lt;code&gt;Quote m =&amp;gt; m [Dec]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[d| ... |]&lt;/code&gt; 、ここで「...」はトップレベルの宣言のリストです。見積もりの​​タイプは &lt;code&gt;Quote m =&amp;gt; m [Dec]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1376f4269d1a1b13c9bee1537886b55bc5e97ed3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[p| ... |]&lt;/code&gt;, where the &amp;ldquo;&amp;hellip;&amp;rdquo; is a pattern; the quotation has type &lt;code&gt;Q Pat&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[p| ... |]&lt;/code&gt; 、ここで「&amp;hellip;」はパターンです。見積もりの​​タイプは &lt;code&gt;Q Pat&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="dc1e911488d0253fbdf7543f136d38edfc246336" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[p| ... |]&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is a pattern; the quotation has type &lt;code&gt;Q Pat&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[p| ... |]&lt;/code&gt; 、「...」はパターンです。見積もりの​​タイプは &lt;code&gt;Q Pat&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="52ba24c2076fb0178296cf84e8a3f9879505f27d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[p| ... |]&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is a pattern; the quotation has type &lt;code&gt;Quote m =&amp;gt; m Pat&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[p| ... |]&lt;/code&gt; 、ここで「...」はパターンです。見積もりの​​タイプは &lt;code&gt;Quote m =&amp;gt; m Pat&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4733a2580f30b50f050ebbd7f025ec21e698c97f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[t| ... |]&lt;/code&gt;, where the &amp;ldquo;&amp;hellip;&amp;rdquo; is a type; the quotation has type &lt;code&gt;Q Type&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[t| ... |]&lt;/code&gt; 、ここで「&amp;hellip;」はタイプです。見積のタイプは &lt;code&gt;Q Type&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2025e48e0db384fd506f6cfd601352a1e0460961" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[t| ... |]&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is a type; the quotation has type &lt;code&gt;Q Type&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[t| ... |]&lt;/code&gt; 、「...」はタイプです。見積もりの​​タイプは &lt;code&gt;Q Type&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="98a73029ac8ee86e6e13b5862ca0a669df2987c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[t| ... |]&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is a type; the quotation has type &lt;code&gt;Quote m =&amp;gt; m Type&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[t| ... |]&lt;/code&gt; 、ここで「...」はタイプです。見積もりの​​タイプは &lt;code&gt;Quote m =&amp;gt; m Type&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8f40b2c7c94c5e2a59a4dc6260ed1675d91eea1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[varid| ... |]&lt;/code&gt;, where the &amp;ldquo;&amp;hellip;&amp;rdquo; is an arbitrary string; a full description of the quasi-quotation facility is given in &lt;a href=&quot;#th-quasiquotation&quot;&gt;Template Haskell Quasi-quotation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;[varid| ... |]&lt;/code&gt; 、ここで「&amp;hellip;」は任意の文字列です。準引用機能の完全な説明は、&lt;a href=&quot;#th-quasiquotation&quot;&gt;テンプレートHaskell準引用に記載されてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="27f1a9cdc8c400f772fa51edfe8a34908baf7581" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[varid| ... |]&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is an arbitrary string; a full description of the quasi-quotation facility is given in &lt;a href=&quot;#th-quasiquotation&quot;&gt;Template Haskell Quasi-quotation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;[varid| ... |]&lt;/code&gt; 、ここで&amp;rdquo; ...&amp;rdquo;は任意の文字列です。準見積もり機能の詳細については、&lt;a href=&quot;#th-quasiquotation&quot;&gt;テンプレートHaskell準見積もりを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="30ab6f1a47eb9bba8ed335ad0c82c4a9273a314e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[| ... |]&lt;/code&gt;, or &lt;code&gt;[e| ... |]&lt;/code&gt;, where the &amp;ldquo;&amp;hellip;&amp;rdquo; is an expression; the quotation has type &lt;code&gt;Q Exp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[| ... |]&lt;/code&gt; 、または &lt;code&gt;[e| ... |]&lt;/code&gt; 、ここで「&amp;hellip;」は式です。見積のタイプは &lt;code&gt;Q Exp&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0447e54062d56fc83577942673bc23adc6a785d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[| ... |]&lt;/code&gt;, or &lt;code&gt;[e| ... |]&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is an expression; the quotation has type &lt;code&gt;Q Exp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[| ... |]&lt;/code&gt; 、または &lt;code&gt;[e| ... |]&lt;/code&gt; 、ここで&amp;rdquo; ...&amp;rdquo;は式です。見積のタイプは &lt;code&gt;Q Exp&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9e27c3663394f1d272ed5138b3d81bbaf123b9af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[| ... |]&lt;/code&gt;, or &lt;code&gt;[e| ... |]&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is an expression; the quotation has type &lt;code&gt;Quote m =&amp;gt; m Exp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[| ... |]&lt;/code&gt; 、または &lt;code&gt;[e| ... |]&lt;/code&gt; 、ここで「...」は式です。見積もりの​​タイプは &lt;code&gt;Quote m =&amp;gt; m Exp&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2eb1f60931044aab8e92659cfcd1fa7dd4353883" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a * (b + c)&lt;/code&gt; = &lt;code&gt;(a * b) + (a * c)&lt;/code&gt; and &lt;code&gt;(b + c) * a&lt;/code&gt; = &lt;code&gt;(b * a) + (c * a)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a * (b + c)&lt;/code&gt; = &lt;code&gt;(a * b) + (a * c)&lt;/code&gt; および &lt;code&gt;(b + c) * a&lt;/code&gt; = &lt;code&gt;(b * a) + (c * a)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7186a6c673d735648990c73c641adbe3bdd3474f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt; &amp;mdash; enable all event classes listed above</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; &amp;mdash;上記のすべてのイベントクラスを有効にします</target>
        </trans-unit>
        <trans-unit id="149cba18745043c4326ac22f19718f7a6d529cae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt; must appear after &lt;code&gt;k&lt;/code&gt; in the declaration, and</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 宣言で &lt;code&gt;k&lt;/code&gt; の後にaがなければなりません。</target>
        </trans-unit>
        <trans-unit id="6dd7f136797a73d97f172726782cf449cc821102" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accum f&lt;/code&gt; takes an array and an association list and accumulates pairs from the list into the array with the accumulating function &lt;code&gt;f&lt;/code&gt;. Thus &lt;code&gt;&lt;a href=&quot;data-array-iarray#v:accumArray&quot;&gt;accumArray&lt;/a&gt;&lt;/code&gt; can be defined using &lt;code&gt;&lt;a href=&quot;data-array-iarray#v:accum&quot;&gt;accum&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;accum f&lt;/code&gt; は、配列と連想リストを取り、リストからペアを累積関数 &lt;code&gt;f&lt;/code&gt; を使用して配列に累積します。したがって &lt;code&gt;&lt;a href=&quot;data-array-iarray#v:accumArray&quot;&gt;accumArray&lt;/a&gt;&lt;/code&gt; を使用して定義することができます &lt;code&gt;&lt;a href=&quot;data-array-iarray#v:accum&quot;&gt;accum&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="bc2d0019a6be9362d0d370987d97b795ac5b5928" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accum&lt;/code&gt; is strict in all the results of applying the accumulation. However, it is lazy in the initial values of the array.</source>
          <target state="translated">&lt;code&gt;accum&lt;/code&gt; は、累積を適用したすべての結果で厳密です。ただし、配列の初期値では遅延です。</target>
        </trans-unit>
        <trans-unit id="92c3c436ea0e922399fff00f11ab69e17acf33e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accumArray&lt;/code&gt; is strict in each result of applying the accumulating function, although it is lazy in the initial value. Thus, unlike arrays built with &lt;code&gt;&lt;a href=&quot;data-array#v:array&quot;&gt;array&lt;/a&gt;&lt;/code&gt;, accumulated arrays should not in general be recursive.</source>
          <target state="translated">&lt;code&gt;accumArray&lt;/code&gt; は、累積値を適用した結果ごとに厳密ですが、初期値では遅延します。したがって、arrayで構築された &lt;code&gt;&lt;a href=&quot;data-array#v:array&quot;&gt;array&lt;/a&gt;&lt;/code&gt; とは異なり、累積された配列は一般に再帰的であってはなりません。</target>
        </trans-unit>
        <trans-unit id="83233de3ba4aa8ca11ffaf932deec605d107e1a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accumArray&lt;/code&gt; is strict in each result of applying the accumulating function, although it is lazy in the initial value. Thus, unlike arrays built with &lt;code&gt;&lt;a href=&quot;ghc-arr#v:array&quot;&gt;array&lt;/a&gt;&lt;/code&gt;, accumulated arrays should not in general be recursive.</source>
          <target state="translated">&lt;code&gt;accumArray&lt;/code&gt; は、累積値を適用した結果ごとに厳密ですが、初期値では遅延します。したがって、arrayで構築された &lt;code&gt;&lt;a href=&quot;ghc-arr#v:array&quot;&gt;array&lt;/a&gt;&lt;/code&gt; とは異なり、累積された配列は一般に再帰的であってはなりません。</target>
        </trans-unit>
        <trans-unit id="9923105636c6caa73cb09df905df6a129e309eff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;addCFinalizerToWeak# fptr ptr flag eptr w&lt;/code&gt; attaches a C function pointer &lt;code&gt;fptr&lt;/code&gt; to a weak pointer &lt;code&gt;w&lt;/code&gt; as a finalizer. If &lt;code&gt;flag&lt;/code&gt; is zero, &lt;code&gt;fptr&lt;/code&gt; will be called with one argument, &lt;code&gt;ptr&lt;/code&gt;. Otherwise, it will be called with two arguments, &lt;code&gt;eptr&lt;/code&gt; and &lt;code&gt;ptr&lt;/code&gt;. &lt;code&gt;addCFinalizerToWeak#&lt;/code&gt; returns 1 on success, or 0 if &lt;code&gt;w&lt;/code&gt; is already dead.</source>
          <target state="translated">&lt;code&gt;addCFinalizerToWeak# fptr ptr flag eptr w&lt;/code&gt; 、C関数ポインター &lt;code&gt;fptr&lt;/code&gt; を弱いポインター &lt;code&gt;w&lt;/code&gt; にファイナライザーとしてアタッチします。場合は &lt;code&gt;flag&lt;/code&gt; ゼロである、 &lt;code&gt;fptr&lt;/code&gt; 一つの引数で呼び出されます &lt;code&gt;ptr&lt;/code&gt; 。それ以外の場合は、2つの引数 &lt;code&gt;eptr&lt;/code&gt; と &lt;code&gt;ptr&lt;/code&gt; で呼び出されます。 &lt;code&gt;addCFinalizerToWeak#&lt;/code&gt; は、成功した場合は1を返し、 &lt;code&gt;w&lt;/code&gt; がすでに死んでいる場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="3f49149e870aea23ae76be6e895338577892e46f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;addCorePlugin m&lt;/code&gt; has almost the same effect as passing &lt;code&gt;-fplugin=m&lt;/code&gt; to ghc in the command line. The major difference is that the plugin module &lt;code&gt;m&lt;/code&gt; must not belong to the current package. When TH executes, it is too late to tell the compiler that we needed to compile first a plugin module in the current package.</source>
          <target state="translated">&lt;code&gt;addCorePlugin m&lt;/code&gt; は、コマンドラインで &lt;code&gt;-fplugin=m&lt;/code&gt; をghcに渡すのとほぼ同じ効果があります。主な違いは、プラグインモジュール &lt;code&gt;m&lt;/code&gt; が現在のパッケージに属していてはならないことです。THの実行時に、現在のパッケージのプラグインモジュールを最初にコンパイルする必要があることをコンパイラーに伝えるのは遅すぎます。</target>
        </trans-unit>
        <trans-unit id="d279010765e6e6b900a3896b2e19ea792336d687" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;all&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;and&lt;/code&gt; 、 &lt;code&gt;or&lt;/code&gt; 、 &lt;code&gt;any&lt;/code&gt; 、 &lt;code&gt;all&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="51f41197b390a7a1589583f2062f9ff7711a6864" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;anyclass&lt;/code&gt;: Use &lt;a href=&quot;#extension-DeriveAnyClass&quot;&gt;&lt;code&gt;DeriveAnyClass&lt;/code&gt;&lt;/a&gt; (see &lt;a href=&quot;#derive-any-class&quot;&gt;Deriving any other class&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;anyclass&lt;/code&gt; ：DeriveAnyClassを使用し&lt;a href=&quot;#extension-DeriveAnyClass&quot;&gt; &lt;code&gt;DeriveAnyClass&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;#derive-any-class&quot;&gt;他のクラスの派生を&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="d1be80c0d1fe0935bae5c804b5465e9cc894cf47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;anyclass&lt;/code&gt;: Use &lt;a href=&quot;derive_any_class#extension-DeriveAnyClass&quot;&gt;&lt;code&gt;DeriveAnyClass&lt;/code&gt;&lt;/a&gt; (see &lt;a href=&quot;derive_any_class#derive-any-class&quot;&gt;Deriving any other class&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;anyclass&lt;/code&gt; ：DeriveAnyClassを使用し&lt;a href=&quot;derive_any_class#extension-DeriveAnyClass&quot;&gt; &lt;code&gt;DeriveAnyClass&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;derive_any_class#derive-any-class&quot;&gt;他のクラスの派生を&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="5b4c5b8b1d0fbe5510c268591ea1736245a43d72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arg1 `Name` arg2&lt;/code&gt; or &lt;code&gt;arg1 op arg2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;arg1 `Name` arg2&lt;/code&gt; または &lt;code&gt;arg1 op arg2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d985d2ca87e1958d7d2a3a4f879d91f464608904" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arg_type&lt;/code&gt; is a type that is not allowed to have &lt;a href=&quot;#id3&quot;&gt;&lt;span id=&quot;id4&quot;&gt;``&lt;/span&gt;&lt;/a&gt;forall``s or &lt;a href=&quot;#id5&quot;&gt;&lt;span id=&quot;id6&quot;&gt;``&lt;/span&gt;&lt;/a&gt;=&amp;gt;``s</source>
          <target state="translated">&lt;code&gt;arg_type&lt;/code&gt; は、&lt;a href=&quot;#id3&quot;&gt;&lt;span id=&quot;id4&quot;&gt;「&lt;/span&gt;&lt;/a&gt; forall」または&lt;a href=&quot;#id5&quot;&gt;&lt;span id=&quot;id6&quot;&gt;「&lt;/span&gt;&lt;/a&gt; =&amp;gt;」を持つことが許可されていないタイプです。</target>
        </trans-unit>
        <trans-unit id="7aaf19cc340c9cf99a449248ea81553e1e61e914" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arithSeqE&lt;/code&gt; Shortcuts</source>
          <target state="translated">&lt;code&gt;arithSeqE&lt;/code&gt; のショートカット</target>
        </trans-unit>
        <trans-unit id="41adaeb06038cb0ab2e6d98a6ec1c7cd61ee8445" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;array&lt;/code&gt; (on its second argument)</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; （2番目の引数）</target>
        </trans-unit>
        <trans-unit id="77ec368c080e175a9a031ae9ab42188f68c395a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoAddHistory&lt;/code&gt;: add nonblank lines to the command history (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; by default).</source>
          <target state="translated">&lt;code&gt;autoAddHistory&lt;/code&gt; ：コマンド履歴に空白以外の行を追加します（デフォルトでは &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1f5bbacc3d1d41c88563e2e13395cc0f2d12194f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoAddHistory&lt;/code&gt;: add nonblank lines to the command history (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; by default).</source>
          <target state="translated">&lt;code&gt;autoAddHistory&lt;/code&gt; ：コマンド履歴に空白以外の行を追加します（デフォルトでは &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="229544bd22998195c3c8197d3098cdbdff3a9b46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoAddHistory&lt;/code&gt;: add nonblank lines to the command history (&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; by default).</source>
          <target state="translated">&lt;code&gt;autoAddHistory&lt;/code&gt; ：コマンド履歴に空白以外の行を追加します（デフォルトでは &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="dfdb0f8dc66ababee0bfcfeccddd70afba3e3f40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;awaitSignal iset&lt;/code&gt; suspends execution until an interrupt is received. If &lt;code&gt;iset&lt;/code&gt; is &lt;code&gt;Just s&lt;/code&gt;, &lt;code&gt;awaitSignal&lt;/code&gt; calls &lt;code&gt;sigsuspend&lt;/code&gt;, installing &lt;code&gt;s&lt;/code&gt; as the new signal mask before suspending execution; otherwise, it calls &lt;code&gt;sigsuspend&lt;/code&gt; with current signal mask. Note that RTS scheduler signal (either &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:virtualTimerExpired&quot;&gt;virtualTimerExpired&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:realTimeAlarm&quot;&gt;realTimeAlarm&lt;/a&gt;&lt;/code&gt;) could cause premature termination of this call. It might be necessary to block that signal before invocation of &lt;code&gt;awaitSignal&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:blockSignals&quot;&gt;blockSignals&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;system-posix-signals#v:reservedSignals&quot;&gt;reservedSignals&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;awaitSignal iset&lt;/code&gt; は、割り込みを受け取るまで実行を一時停止します。場合 &lt;code&gt;iset&lt;/code&gt; ある &lt;code&gt;Just s&lt;/code&gt; 、 &lt;code&gt;awaitSignal&lt;/code&gt; は呼び出す &lt;code&gt;sigsuspend&lt;/code&gt; をインストールし、 &lt;code&gt;s&lt;/code&gt; 実行を中断する前に、新しいシグナルマスクとして、それ以外の場合は、現在のシグナルマスクで &lt;code&gt;sigsuspend&lt;/code&gt; を呼び出します。RTSスケジューラー信号（ &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:virtualTimerExpired&quot;&gt;virtualTimerExpired&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:realTimeAlarm&quot;&gt;realTimeAlarm&lt;/a&gt;&lt;/code&gt; ）が原因で、この呼び出しが途中で終了する可能性があることに注意してください。 &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:blockSignals&quot;&gt;blockSignals&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:reservedSignals&quot;&gt;reservedSignals&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;awaitSignal&lt;/code&gt; を呼び出す前に、その信号をブロックする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="5eddccd6b130a969a4bbe6cdbe1b5a2f2a4ecc07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;awaitSignal&lt;/code&gt; returns when signal was received and processed by a signal handler, or if the signal could not be caught. If you have installed any signal handlers with &lt;code&gt;installHandler&lt;/code&gt;, it may be wise to call &lt;code&gt;yield&lt;/code&gt; directly after &lt;code&gt;awaitSignal&lt;/code&gt; to ensure that the signal handler runs as promptly as possible.</source>
          <target state="translated">&lt;code&gt;awaitSignal&lt;/code&gt; は、シグナルがシグナルハンドラーによって受信および処理されたとき、またはシグナルをキャッチできなかったときに戻ります。あなたが持つ任意のシグナルハンドラがインストールされている場合 &lt;code&gt;installHandler&lt;/code&gt; を、呼び出すことが賢明かもしれ &lt;code&gt;yield&lt;/code&gt; 直接後 &lt;code&gt;awaitSignal&lt;/code&gt; 速やかにできるだけシグナルハンドラが実行されていることを確実にするために。</target>
        </trans-unit>
        <trans-unit id="3f5527e0647486b41cc4312b1d976476b7d23da3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;between open close p&lt;/code&gt; parses &lt;code&gt;open&lt;/code&gt;, followed by &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;close&lt;/code&gt;. Returns the value returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;between open close p&lt;/code&gt; は &lt;code&gt;open&lt;/code&gt; を解析し、その後に &lt;code&gt;p&lt;/code&gt; と &lt;code&gt;close&lt;/code&gt; が続きます。 &lt;code&gt;p&lt;/code&gt; によって返された値を返します。</target>
        </trans-unit>
        <trans-unit id="f0efed973c68857e9c777874430eb0a944f2fb18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;between open close p&lt;/code&gt; parses &lt;code&gt;open&lt;/code&gt;, followed by &lt;code&gt;p&lt;/code&gt; and finally &lt;code&gt;close&lt;/code&gt;. Only the value of &lt;code&gt;p&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;between open close p&lt;/code&gt; は、 &lt;code&gt;open&lt;/code&gt; を解析し、その後に &lt;code&gt;p&lt;/code&gt; が続き、最後に &lt;code&gt;close&lt;/code&gt; を解析します。 &lt;code&gt;p&lt;/code&gt; の値のみが返されます。</target>
        </trans-unit>
        <trans-unit id="b59bced716aaa8611056a86795f00fa553ec80c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bit &lt;em&gt;i&lt;/em&gt;&lt;/code&gt; is a value with the &lt;code&gt;&lt;em&gt;i&lt;/em&gt;&lt;/code&gt;th bit set and all other bits clear.</source>
          <target state="translated">&lt;code&gt;bit &lt;em&gt;i&lt;/em&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;em&gt;i&lt;/em&gt;&lt;/code&gt; 番目のビットが設定され、他のすべてのビットがクリアされた値です。</target>
        </trans-unit>
        <trans-unit id="23bb751a500bd875d7a338e20a5b8f74883baf0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blockSignals mask&lt;/code&gt; calls &lt;code&gt;sigprocmask&lt;/code&gt; with &lt;code&gt;SIG_BLOCK&lt;/code&gt; to add all interrupts in &lt;code&gt;mask&lt;/code&gt; to the set of blocked interrupts.</source>
          <target state="translated">&lt;code&gt;blockSignals mask&lt;/code&gt; は、 &lt;code&gt;sigprocmask&lt;/code&gt; を &lt;code&gt;SIG_BLOCK&lt;/code&gt; してsigprocmaskを呼び出し、 &lt;code&gt;mask&lt;/code&gt; れたすべての割り込みをブロックされた割り込みのセットに追加します。</target>
        </trans-unit>
        <trans-unit id="301745b3e2d8f597d5464a70aecbbb41cdc8dabb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;btype&lt;/code&gt; is a type that is not allowed to have an outermost &lt;code&gt;forall&lt;/code&gt;/&lt;code&gt;=&amp;gt;&lt;/code&gt; unless it is surrounded by parentheses. For example, &lt;code&gt;forall a. a&lt;/code&gt; and &lt;code&gt;Eq a =&amp;gt; a&lt;/code&gt; are not legal &lt;code&gt;btype&lt;/code&gt;s, but &lt;code&gt;(forall a. a)&lt;/code&gt; and &lt;code&gt;(Eq a =&amp;gt; a)&lt;/code&gt; are legal.</source>
          <target state="translated">&lt;code&gt;btype&lt;/code&gt; は、括弧で囲まれていない限り、最も外側の &lt;code&gt;forall&lt;/code&gt; / &lt;code&gt;=&amp;gt;&lt;/code&gt; を持つことが許可されていないタイプです。たとえば、 &lt;code&gt;forall a. a&lt;/code&gt; と &lt;code&gt;btype&lt;/code&gt; &lt;code&gt;Eq a =&amp;gt; a&lt;/code&gt; は正当なbtypesではありませんが、 &lt;code&gt;(forall a. a)&lt;/code&gt; すべてのa。a ）と &lt;code&gt;(Eq a =&amp;gt; a)&lt;/code&gt; は正当です。</target>
        </trans-unit>
        <trans-unit id="89c6ef433203d949ec991909402a77ed3a60c650" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;btype&lt;/code&gt; is a type that is not allowed to have an outermost &lt;code&gt;forall&lt;/code&gt;/&lt;code&gt;=&amp;gt;&lt;/code&gt; unless it is surrounded by parentheses. For example, &lt;code&gt;forall a. a&lt;/code&gt; and &lt;code&gt;Eq a =&amp;gt; a&lt;/code&gt; are not legal &lt;code&gt;btype``s, but
``(forall a. a)&lt;/code&gt; and &lt;code&gt;(Eq a =&amp;gt; a)&lt;/code&gt; are legal.</source>
          <target state="translated">&lt;code&gt;btype&lt;/code&gt; は、括弧で囲まれていない限り、最も外側の &lt;code&gt;forall&lt;/code&gt; / &lt;code&gt;=&amp;gt;&lt;/code&gt; を持つことが許可されていないタイプです。たとえば、 &lt;code&gt;forall a. a&lt;/code&gt; と &lt;code&gt;btype``s, but ``(forall a. a)&lt;/code&gt; &lt;code&gt;Eq a =&amp;gt; a&lt;/code&gt; は合法的なbtypeではありませんが、「（foralla。a）と &lt;code&gt;(Eq a =&amp;gt; a)&lt;/code&gt; は合法です。</target>
        </trans-unit>
        <trans-unit id="aa85a6159c096b8d76aaf5324597df0c97865075" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;buildExpressionParser table term&lt;/code&gt; builds an expression parser for terms &lt;code&gt;term&lt;/code&gt; with operators from &lt;code&gt;table&lt;/code&gt;, taking the associativity and precedence specified in &lt;code&gt;table&lt;/code&gt; into account. Prefix and postfix operators of the same precedence can only occur once (i.e. &lt;code&gt;--2&lt;/code&gt; is not allowed if &lt;code&gt;-&lt;/code&gt; is prefix negate). Prefix and postfix operators of the same precedence associate to the left (i.e. if &lt;code&gt;++&lt;/code&gt; is postfix increment, than &lt;code&gt;-2++&lt;/code&gt; equals &lt;code&gt;-1&lt;/code&gt;, not &lt;code&gt;-3&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;buildExpressionParser table term&lt;/code&gt; 用語についての発現パーサ構築する &lt;code&gt;term&lt;/code&gt; から事業者との &lt;code&gt;table&lt;/code&gt; で指定された結合性と優先順位取って、 &lt;code&gt;table&lt;/code&gt; 考慮を。同じ優先順位の前置演算子と後 &lt;code&gt;--2&lt;/code&gt; は1回しか使用できません（つまり、 &lt;code&gt;-&lt;/code&gt; が前置否定の場合は--2は許可されません）。同じ優先順位の前置演算子と後置演算子は左側に関連付けられます（つまり、 &lt;code&gt;++&lt;/code&gt; が後置増分の場合、 &lt;code&gt;-2++&lt;/code&gt; は &lt;code&gt;-3&lt;/code&gt; ではなく &lt;code&gt;-1&lt;/code&gt; になります）。</target>
        </trans-unit>
        <trans-unit id="fad0cb08a7c9a3cf2d210817336c422f8de0001f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c&lt;/code&gt; coverage</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; カバレッジ</target>
        </trans-unit>
        <trans-unit id="3c4f0b1c441a8fe302ce5fcf7e664d845e9fa265" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callCC&lt;/code&gt; (call-with-current-continuation) calls a function with the current continuation as its argument. Provides an escape continuation mechanism for use with Continuation monads. Escape continuations allow to abort the current computation and return a value immediately. They achieve a similar effect to &lt;code&gt;&lt;a href=&quot;control-monad-error#v:throwError&quot;&gt;throwError&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad-error#v:catchError&quot;&gt;catchError&lt;/a&gt;&lt;/code&gt; within an &lt;code&gt;&lt;a href=&quot;control-monad-error#v:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; monad. Advantage of this function over calling &lt;code&gt;return&lt;/code&gt; is that it makes the continuation explicit, allowing more flexibility and better control (see examples in &lt;a href=&quot;control-monad-cont&quot;&gt;Control.Monad.Cont&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;callCC&lt;/code&gt; （call-with-current-continuation）は、現在の継続を引数として関数を呼び出します。 Continuationモナドで使用するエスケープ継続メカニズムを提供します。エスケープの継続により、現在の計算を中止してすぐに値を返すことができます。これらは、 &lt;code&gt;&lt;a href=&quot;control-monad-error#v:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; モナド内の &lt;code&gt;&lt;a href=&quot;control-monad-error#v:throwError&quot;&gt;throwError&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;control-monad-error#v:catchError&quot;&gt;catchError&lt;/a&gt;&lt;/code&gt; と同様の効果を実現します。 &lt;code&gt;return&lt;/code&gt; の呼び出しに対するこの関数の利点は、継続を明示的にすることで、柔軟性と制御を向上できることです（&lt;a href=&quot;control-monad-cont&quot;&gt;Control.Monad.Contの&lt;/a&gt;例を参照）。</target>
        </trans-unit>
        <trans-unit id="b4ceae3c8a658aaa250e40e1e151e962d689447b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callCC&lt;/code&gt; (call-with-current-continuation) calls its argument function, passing it the current continuation. It provides an escape continuation mechanism for use with continuation monads. Escape continuations one allow to abort the current computation and return a value immediately. They achieve a similar effect to &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:throwE&quot;&gt;throwE&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:catchE&quot;&gt;catchE&lt;/a&gt;&lt;/code&gt; within an &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; monad. The advantage of this function over calling &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; is that it makes the continuation explicit, allowing more flexibility and better control.</source>
          <target state="translated">&lt;code&gt;callCC&lt;/code&gt; （call-with-current-continuation）は引数関数を呼び出し、現在の継続を渡します。継続モナドで使用するエスケープ継続メカニズムを提供します。エスケープ継続1では、現在の計算を中止して、すぐに値を返すことができます。これらは、 &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; モナド内で &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:throwE&quot;&gt;throwE&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:catchE&quot;&gt;catchE&lt;/a&gt;&lt;/code&gt; と同様の効果を発揮します。 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; を呼び出すことに対するこの関数の利点は、継続が明示的になり、柔軟性と制御が向上することです。</target>
        </trans-unit>
        <trans-unit id="26616a8960b4dcf96d8cb0402767831b4e88b141" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callCC&lt;/code&gt; (call-with-current-continuation) calls its argument function, passing it the current continuation. It provides an escape continuation mechanism for use with continuation monads. Escape continuations one allow to abort the current computation and return a value immediately. They achieve a similar effect to &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:throwE&quot;&gt;throwE&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:catchE&quot;&gt;catchE&lt;/a&gt;&lt;/code&gt; within an &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; monad. The advantage of this function over calling &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; is that it makes the continuation explicit, allowing more flexibility and better control.</source>
          <target state="translated">&lt;code&gt;callCC&lt;/code&gt; （call-with-current-continuation）は、引数関数を呼び出して、現在の継続を渡します。継続モナドで使用するためのエスケープ継続メカニズムを提供します。エスケープ継続を使用すると、現在の計算を中止して、すぐに値を返すことができます。それらは、 &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; モナド内で &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:throwE&quot;&gt;throwE&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:catchE&quot;&gt;catchE&lt;/a&gt;&lt;/code&gt; と同様の効果を達成します。 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; の呼び出しに対するこの関数の利点は、継続が明示的になり、柔軟性と制御が向上することです。</target>
        </trans-unit>
        <trans-unit id="7d3a97689b1258b2ec3ac4351c52bb6b131631a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callCC&lt;/code&gt; (call-with-current-continuation) calls its argument function, passing it the current continuation. It provides an escape continuation mechanism for use with continuation monads. Escape continuations one allow to abort the current computation and return a value immediately. They achieve a similar effect to &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:throwE&quot;&gt;throwE&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:catchE&quot;&gt;catchE&lt;/a&gt;&lt;/code&gt; within an &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; monad. The advantage of this function over calling &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; is that it makes the continuation explicit, allowing more flexibility and better control.</source>
          <target state="translated">&lt;code&gt;callCC&lt;/code&gt; （call-with-current-continuation）は、引数関数を呼び出して、現在の継続を渡します。継続モナドで使用するためのエスケープ継続メカニズムを提供します。エスケープ継続を使用すると、現在の計算を中止して、すぐに値を返すことができます。それらは、 &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; モナド内で &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:throwE&quot;&gt;throwE&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:catchE&quot;&gt;catchE&lt;/a&gt;&lt;/code&gt; と同様の効果を達成します。 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; の呼び出しに対するこの関数の利点は、継続が明示的になり、柔軟性と制御が向上することです。</target>
        </trans-unit>
        <trans-unit id="1b1b977fbb6cf876421ec8abbe31bbe12bcf60ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;canonicalizePath&lt;/code&gt; can resolve at least 64 indirections in a single path, more than what is supported by most operating systems. Therefore, it may return the fully resolved path even though the operating system itself would have long given up.</source>
          <target state="translated">&lt;code&gt;canonicalizePath&lt;/code&gt; は、単一のパスで少なくとも64の間接参照を解決できます。これは、ほとんどのオペレーティングシステムでサポートされているものを超えています。したがって、オペレーティングシステム自体が長い間あきらめていたとしても、完全に解決されたパスを返す可能性があります。</target>
        </trans-unit>
        <trans-unit id="28dd479cd1b1864b8f668e1c6cb5657768e71aeb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;castFloatToWord64 f&lt;/code&gt; does a bit-for-bit copy from a floating-point value to an integral value.</source>
          <target state="translated">&lt;code&gt;castFloatToWord64 f&lt;/code&gt; は、浮動小数点値から整数値へのビットごとのコピーを実行します。</target>
        </trans-unit>
        <trans-unit id="36dcb166d8a42d48877e184da7dd256de9be24bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chainl p op x&lt;/code&gt; parses &lt;em&gt;zero&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated by &lt;code&gt;op&lt;/code&gt;. Returns a value obtained by a &lt;em&gt;left&lt;/em&gt; associative application of all functions returned by &lt;code&gt;op&lt;/code&gt; to the values returned by &lt;code&gt;p&lt;/code&gt;. If there are zero occurrences of &lt;code&gt;p&lt;/code&gt;, the value &lt;code&gt;x&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;chainl p op x&lt;/code&gt; は、 &lt;code&gt;op&lt;/code&gt; で区切られた、&lt;em&gt;0&lt;/em&gt;個以上の &lt;code&gt;p&lt;/code&gt; の出現を解析し&lt;em&gt;ます&lt;/em&gt;。 &lt;code&gt;op&lt;/code&gt; によって返されたすべての関数を &lt;code&gt;p&lt;/code&gt; によって返された値に&lt;em&gt;左&lt;/em&gt;連想的に適用することによって得られた値を返します。 &lt;code&gt;p&lt;/code&gt; の出現がゼロの場合、値 &lt;code&gt;x&lt;/code&gt; が返されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="194ab257885ffa8cbd5692de9ec6b0aeef2c6c6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chainl p op x&lt;/code&gt; parses zero or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated by &lt;code&gt;op&lt;/code&gt;. Returns a value produced by a &lt;em&gt;left&lt;/em&gt; associative application of all functions returned by &lt;code&gt;op&lt;/code&gt;. If there are no occurrences of &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;chainl p op x&lt;/code&gt; は、 &lt;code&gt;op&lt;/code&gt; で区切られた、0個以上の &lt;code&gt;p&lt;/code&gt; の出現を解析します。 &lt;code&gt;op&lt;/code&gt; によって返されるすべての関数の&lt;em&gt;左&lt;/em&gt;連想アプリケーションによって生成された値を返します。 &lt;code&gt;p&lt;/code&gt; が発生しない場合、 &lt;code&gt;x&lt;/code&gt; が返されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="24ff236a28e78bb8481813277cfd6fb730a2afd3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chainl1 p op&lt;/code&gt; parses &lt;em&gt;one&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated by &lt;code&gt;op&lt;/code&gt; Returns a value obtained by a &lt;em&gt;left&lt;/em&gt; associative application of all functions returned by &lt;code&gt;op&lt;/code&gt; to the values returned by &lt;code&gt;p&lt;/code&gt;. This parser can for example be used to eliminate left recursion which typically occurs in expression grammars.</source>
          <target state="translated">&lt;code&gt;chainl1 p op&lt;/code&gt; 解析する&lt;em&gt;1つの&lt;/em&gt;またはそれ以上の出現 &lt;code&gt;p&lt;/code&gt; によって分離され、 &lt;code&gt;op&lt;/code&gt; 戻り値によって得られた値&lt;em&gt;左&lt;/em&gt;によって返されるすべての機能の連想アプリケーション &lt;code&gt;op&lt;/code&gt; によって返される値に &lt;code&gt;p&lt;/code&gt; 。このパーサーは、たとえば、式文法で通常発生する左再帰を排除するために使用できます。</target>
        </trans-unit>
        <trans-unit id="68ed2fa3e7c58bbb8e0801d890944be400e1a245" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chainr p op x&lt;/code&gt; parses &lt;em&gt;zero&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated by &lt;code&gt;op&lt;/code&gt; Returns a value obtained by a &lt;em&gt;right&lt;/em&gt; associative application of all functions returned by &lt;code&gt;op&lt;/code&gt; to the values returned by &lt;code&gt;p&lt;/code&gt;. If there are no occurrences of &lt;code&gt;p&lt;/code&gt;, the value &lt;code&gt;x&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;chainr p op x&lt;/code&gt; 構文解析は、&lt;em&gt;ゼロ&lt;/em&gt;またはそれ以上の出現 &lt;code&gt;p&lt;/code&gt; によって分離された、 &lt;code&gt;op&lt;/code&gt; によって得られた値を返し&lt;em&gt;、右&lt;/em&gt;によって返されるすべての機能の連想アプリケーション &lt;code&gt;op&lt;/code&gt; によって返される値に &lt;code&gt;p&lt;/code&gt; 。 &lt;code&gt;p&lt;/code&gt; が発生しない場合、値 &lt;code&gt;x&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="8c985ed0f65a6c5e10c4638ffd95ed75329f0609" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chainr p op x&lt;/code&gt; parses zero or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated by &lt;code&gt;op&lt;/code&gt;. Returns a value produced by a &lt;em&gt;right&lt;/em&gt; associative application of all functions returned by &lt;code&gt;op&lt;/code&gt;. If there are no occurrences of &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;chainr p op x&lt;/code&gt; は、 &lt;code&gt;op&lt;/code&gt; で区切られた0個以上の &lt;code&gt;p&lt;/code&gt; の出現を解析します。 &lt;code&gt;op&lt;/code&gt; によって返されたすべての関数の&lt;em&gt;正しい&lt;/em&gt;連想アプリケーションによって生成された値を返します。 &lt;code&gt;p&lt;/code&gt; が発生しない場合、 &lt;code&gt;x&lt;/code&gt; が返されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="16cb565d6d3d03fad93241fb30def31c12816cc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chainr1 p op x&lt;/code&gt; parses &lt;em&gt;one&lt;/em&gt; or more occurrences of |p|, separated by &lt;code&gt;op&lt;/code&gt; Returns a value obtained by a &lt;em&gt;right&lt;/em&gt; associative application of all functions returned by &lt;code&gt;op&lt;/code&gt; to the values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;chainr1 p op x&lt;/code&gt; パース&lt;em&gt;1件&lt;/em&gt;の以上の発生| P |で区切られた &lt;code&gt;op&lt;/code&gt; によって得られた値を返し&lt;em&gt;、右&lt;/em&gt;から返されたすべての関数の連想アプリケーション &lt;code&gt;op&lt;/code&gt; の値には、によって返され &lt;code&gt;p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2063898cc537ebd7e745780ddecfa292106d7e4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;changeWorkingDirectory dir&lt;/code&gt; calls &lt;code&gt;chdir&lt;/code&gt; to change the current working directory to &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;changeWorkingDirectory dir&lt;/code&gt; は、現在の作業ディレクトリを &lt;code&gt;dir&lt;/code&gt; に変更するために &lt;code&gt;chdir&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="052c109fb02bbddcf21e7a3e895f702c6cbe4d90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;char c&lt;/code&gt; parses a single character &lt;code&gt;c&lt;/code&gt;. Returns the parsed character (i.e. &lt;code&gt;c&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;char c&lt;/code&gt; は、単一の文字cを解析し &lt;code&gt;c&lt;/code&gt; 。解析された文字（つまり &lt;code&gt;c&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="f74b913f338132524c6dc452f39e326e7016e390" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;choice ps&lt;/code&gt; tries to apply the parsers in the list &lt;code&gt;ps&lt;/code&gt; in order, until one of them succeeds. Returns the value of the succeeding parser.</source>
          <target state="translated">&lt;code&gt;choice ps&lt;/code&gt; は、リスト &lt;code&gt;ps&lt;/code&gt; 内のパーサーの1つが成功するまで、順番に適用しようとします。後続のパーサーの値を返します。</target>
        </trans-unit>
        <trans-unit id="062c2c8918d9490e5adc2e2a085dfd713939cbf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class&lt;/code&gt; declarations:</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; 宣言：</target>
        </trans-unit>
        <trans-unit id="0e0fa4497c830d4b56d4c13c5c623e1dc2dbc3ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;closeDirStream dp&lt;/code&gt; calls &lt;code&gt;closedir&lt;/code&gt; to close the directory stream &lt;code&gt;dp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;closeDirStream dp&lt;/code&gt; は &lt;code&gt;closedir&lt;/code&gt; を呼び出して、ディレクトリストリーム &lt;code&gt;dp&lt;/code&gt; を閉じます。</target>
        </trans-unit>
        <trans-unit id="1fb18d7eb20b393b53c8ff4b44d606a6dd7d2c1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;closureSize# closure&lt;/code&gt; returns the size of the given closure in machine words.</source>
          <target state="translated">&lt;code&gt;closureSize# closure&lt;/code&gt; は、指定されたクロージャのサイズをマシンワードで返します。</target>
        </trans-unit>
        <trans-unit id="4ea4a17d2d326c8280f997479099e349bd994f4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compareByteArrays# src1 src1_ofs src2 src2_ofs n&lt;/code&gt; compares &lt;code&gt;n&lt;/code&gt; bytes starting at offset &lt;code&gt;src1_ofs&lt;/code&gt; in the first &lt;code&gt;ByteArray#&lt;/code&gt;&lt;code&gt;src1&lt;/code&gt; to the range of &lt;code&gt;n&lt;/code&gt; bytes (i.e. same length) starting at offset &lt;code&gt;src2_ofs&lt;/code&gt; of the second &lt;code&gt;ByteArray#&lt;/code&gt;&lt;code&gt;src2&lt;/code&gt;. Both arrays must fully contain the specified ranges, but this is not checked. Returns an &lt;code&gt;Int#&lt;/code&gt; less than, equal to, or greater than zero if the range is found, respectively, to be byte-wise lexicographically less than, to match, or be greater than the second range.</source>
          <target state="translated">&lt;code&gt;compareByteArrays# src1 src1_ofs src2 src2_ofs n&lt;/code&gt; 比較 &lt;code&gt;n&lt;/code&gt; 個のオフセットから始まるバイト &lt;code&gt;src1_ofs&lt;/code&gt; 最初に &lt;code&gt;ByteArray#&lt;/code&gt; &lt;code&gt;src1&lt;/code&gt; の範囲に &lt;code&gt;n&lt;/code&gt; 個（すなわち、同じ長さ）バイトオフセットから始まります &lt;code&gt;src2_ofs&lt;/code&gt; 第二の &lt;code&gt;ByteArray#&lt;/code&gt; &lt;code&gt;src2&lt;/code&gt; 。両方の配列は指定された範囲を完全に含む必要がありますが、これはチェックされません。範囲が見つかった場合は、それぞれバイト単位で辞書式に小さい、一致する、または2番目の範囲より大きい &lt;code&gt;Int#&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e544d236b45af1423cd3bc87ffb5df232a61481e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const x&lt;/code&gt; is a unary function which evaluates to &lt;code&gt;x&lt;/code&gt; for all inputs.</source>
          <target state="translated">&lt;code&gt;const x&lt;/code&gt; は、すべての入力に対して &lt;code&gt;x&lt;/code&gt; に評価される単項関数です。</target>
        </trans-unit>
        <trans-unit id="62f12c013af092c4fde3972020484445440d928a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;controlFlow fd action&lt;/code&gt; calls &lt;code&gt;tcflow&lt;/code&gt; to control the flow of data on &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt;, as indicated by &lt;code&gt;action&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;controlFlow fd action&lt;/code&gt; は &lt;code&gt;tcflow&lt;/code&gt; を呼び出して、データのフローを制御します &lt;code&gt;Fd&lt;/code&gt; &lt;code&gt;fd&lt;/code&gt; によって示されるように、 &lt;code&gt;action&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4520bb319d4ec6dac65138fd7754f5a137bf16e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;copyByteArray# src src_ofs dst dst_ofs n&lt;/code&gt; copies the range starting at offset &lt;code&gt;src_ofs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt; from the &lt;code&gt;ByteArray#&lt;/code&gt;&lt;code&gt;src&lt;/code&gt; to the &lt;code&gt;MutableByteArray#&lt;/code&gt;&lt;code&gt;dst&lt;/code&gt; starting at offset &lt;code&gt;dst_ofs&lt;/code&gt;. Both arrays must fully contain the specified ranges, but this is not checked. The two arrays must not be the same array in different states, but this is not checked either.</source>
          <target state="translated">&lt;code&gt;copyByteArray# src src_ofs dst dst_ofs n&lt;/code&gt; レンジオフセットから始まるコピー &lt;code&gt;src_ofs&lt;/code&gt; 長さの &lt;code&gt;n&lt;/code&gt; から &lt;code&gt;ByteArray#&lt;/code&gt; &lt;code&gt;src&lt;/code&gt; へ &lt;code&gt;MutableByteArray#&lt;/code&gt; &lt;code&gt;dst&lt;/code&gt; オフセットから始まる &lt;code&gt;dst_ofs&lt;/code&gt; 。両方の配列は指定された範囲を完全に含む必要がありますが、これはチェックされません。2つの配列は異なる状態の同じ配列であってはなりませんが、これもチェックされません。</target>
        </trans-unit>
        <trans-unit id="73a9a6ad988ae4dd809544f37834df439c94aeb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count n p&lt;/code&gt; parses &lt;code&gt;n&lt;/code&gt; occurrences of &lt;code&gt;p&lt;/code&gt; in sequence. A list of results is returned.</source>
          <target state="translated">&lt;code&gt;count n p&lt;/code&gt; は、 &lt;code&gt;n&lt;/code&gt; 個の &lt;code&gt;p&lt;/code&gt; のオカレンスを順番に解析します。結果のリストが返されます。</target>
        </trans-unit>
        <trans-unit id="ef3ab7cc4ff01c7961fe0a527f57426f6bcf5c6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count n p&lt;/code&gt; parses &lt;code&gt;n&lt;/code&gt; occurrences of &lt;code&gt;p&lt;/code&gt;. If &lt;code&gt;n&lt;/code&gt; is smaller or equal to zero, the parser equals to &lt;code&gt;return []&lt;/code&gt;. Returns a list of &lt;code&gt;n&lt;/code&gt; values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;count n p&lt;/code&gt; は、 &lt;code&gt;n&lt;/code&gt; 回出現する &lt;code&gt;p&lt;/code&gt; を解析します。 &lt;code&gt;n&lt;/code&gt; がゼロ以下の場合、パーサーは &lt;code&gt;return []&lt;/code&gt; を返します。 &lt;code&gt;p&lt;/code&gt; が返す &lt;code&gt;n&lt;/code&gt; 個の値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="e830eb32578a6325a39011990994921443ead963" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createDevice path mode dev&lt;/code&gt; creates either a regular or a special file depending on the value of &lt;code&gt;mode&lt;/code&gt; (and &lt;code&gt;dev&lt;/code&gt;). &lt;code&gt;mode&lt;/code&gt; will normally be either &lt;code&gt;&lt;a href=&quot;system-posix-files#v:blockSpecialMode&quot;&gt;blockSpecialMode&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;system-posix-files#v:characterSpecialMode&quot;&gt;characterSpecialMode&lt;/a&gt;&lt;/code&gt;. May fail with &lt;code&gt;&lt;a href=&quot;system-posix-error#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; if a file named &lt;code&gt;name&lt;/code&gt; already exists or if the effective user ID of the current process doesn't have permission to create the file.</source>
          <target state="translated">&lt;code&gt;createDevice path mode dev&lt;/code&gt; は、 &lt;code&gt;mode&lt;/code&gt; （および &lt;code&gt;dev&lt;/code&gt; ）の値に応じて、通常のファイルまたは特別なファイルを作成します。 &lt;code&gt;mode&lt;/code&gt; は通常、 &lt;code&gt;&lt;a href=&quot;system-posix-files#v:blockSpecialMode&quot;&gt;blockSpecialMode&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;system-posix-files#v:characterSpecialMode&quot;&gt;characterSpecialMode&lt;/a&gt;&lt;/code&gt; のいずれかです。失敗するかもしれません &lt;code&gt;&lt;a href=&quot;system-posix-error#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; &lt;code&gt;name&lt;/code&gt; という名前のファイルがすでに存在する場合、または現在のプロセスの実効ユーザーIDにファイルを作成する権限がない場合、 throwErrnoPathIfMinus1_ですることがあります。</target>
        </trans-unit>
        <trans-unit id="bb2dd5362da4181a22373ec75833e78ad69887b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createDevice path mode dev&lt;/code&gt; creates either a regular or a special file depending on the value of &lt;code&gt;mode&lt;/code&gt; (and &lt;code&gt;dev&lt;/code&gt;). &lt;code&gt;mode&lt;/code&gt; will normally be either &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:blockSpecialMode&quot;&gt;blockSpecialMode&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:characterSpecialMode&quot;&gt;characterSpecialMode&lt;/a&gt;&lt;/code&gt;. May fail with &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; if a file named &lt;code&gt;name&lt;/code&gt; already exists or if the effective user ID of the current process doesn't have permission to create the file.</source>
          <target state="translated">&lt;code&gt;createDevice path mode dev&lt;/code&gt; は、 &lt;code&gt;mode&lt;/code&gt; （および &lt;code&gt;dev&lt;/code&gt; ）の値に応じて、通常のファイルまたは特別なファイルを作成します。 &lt;code&gt;mode&lt;/code&gt; は通常、 &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:blockSpecialMode&quot;&gt;blockSpecialMode&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:characterSpecialMode&quot;&gt;characterSpecialMode&lt;/a&gt;&lt;/code&gt; のいずれかです。失敗するかもしれません &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; &lt;code&gt;name&lt;/code&gt; という名前のファイルがすでに存在する場合、または現在のプロセスの実効ユーザーIDにファイルを作成する権限がない場合、 throwErrnoPathIfMinus1_ですることがあります。</target>
        </trans-unit>
        <trans-unit id="b4db2b138b3574750e07f04c89c2cc7fbde2fdc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createDirectory dir mode&lt;/code&gt; calls &lt;code&gt;mkdir&lt;/code&gt; to create a new directory, &lt;code&gt;dir&lt;/code&gt;, with permissions based on &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;createDirectory dir mode&lt;/code&gt; は、 &lt;code&gt;mkdir&lt;/code&gt; を呼び出して新しいディレクトリを作成します。 &lt;code&gt;dir&lt;/code&gt; 、 &lt;code&gt;mode&lt;/code&gt; 基づいた権限を持つ dirします。</target>
        </trans-unit>
        <trans-unit id="c58e82da0a7fba5c9695024c0d36d817d9035005" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createLink old new&lt;/code&gt; creates a new path, &lt;code&gt;new&lt;/code&gt;, linked to an existing file, &lt;code&gt;old&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;createLink old new&lt;/code&gt; は新しいパスを作成し、 &lt;code&gt;new&lt;/code&gt; 、既存のファイルにリンクされ、 &lt;code&gt;old&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a1232f65b6cf592ca37036cb00c10cd711926dd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createNamedPipe fifo mode&lt;/code&gt; creates a new named pipe, &lt;code&gt;fifo&lt;/code&gt;, with permissions based on &lt;code&gt;mode&lt;/code&gt;. May fail with &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; if a file named &lt;code&gt;name&lt;/code&gt; already exists or if the effective user ID of the current process doesn't have permission to create the pipe.</source>
          <target state="translated">&lt;code&gt;createNamedPipe fifo mode&lt;/code&gt; 、新しい名前付きパイプを作成し、 &lt;code&gt;fifo&lt;/code&gt; に基づく権限で、 &lt;code&gt;mode&lt;/code&gt; 。 &lt;code&gt;name&lt;/code&gt; という名前のファイルがすでに存在する場合、または現在のプロセスの実効ユーザーIDにパイプを作成する権限がない場合、 &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; で失敗することがあります。</target>
        </trans-unit>
        <trans-unit id="70ad04d1d6775e833f76121193627201a6e247a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createNamedPipe fifo mode&lt;/code&gt; creates a new named pipe, &lt;code&gt;fifo&lt;/code&gt;, with permissions based on &lt;code&gt;mode&lt;/code&gt;. May fail with &lt;code&gt;&lt;a href=&quot;system-posix-error#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; if a file named &lt;code&gt;name&lt;/code&gt; already exists or if the effective user ID of the current process doesn't have permission to create the pipe.</source>
          <target state="translated">&lt;code&gt;createNamedPipe fifo mode&lt;/code&gt; 、新しい名前付きパイプを作成し、 &lt;code&gt;fifo&lt;/code&gt; に基づく権限で、 &lt;code&gt;mode&lt;/code&gt; 。 &lt;code&gt;name&lt;/code&gt; という名前のファイルがすでに存在する場合、または現在のプロセスの実効ユーザーIDにパイプを作成する権限がない場合、 &lt;code&gt;&lt;a href=&quot;system-posix-error#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; で失敗することがあります。</target>
        </trans-unit>
        <trans-unit id="c9ee9efc00efab99d5643207aebaa92809f127e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createSymbolicLink file1 file2&lt;/code&gt; creates a symbolic link named &lt;code&gt;file2&lt;/code&gt; which points to the file &lt;code&gt;file1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;createSymbolicLink file1 file2&lt;/code&gt; は、ファイル &lt;code&gt;file1&lt;/code&gt; を指す &lt;code&gt;file2&lt;/code&gt; という名前のシンボリックリンクを作成します。</target>
        </trans-unit>
        <trans-unit id="e5a0f009de98351bb5b4cf2d8bcfd0f7b332d103" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ctype&lt;/code&gt; is a &lt;code&gt;btype&lt;/code&gt; that has no restrictions on an outermost &lt;code&gt;forall&lt;/code&gt;/&lt;code&gt;=&amp;gt;&lt;/code&gt;, so &lt;code&gt;forall a. a&lt;/code&gt; and &lt;code&gt;Eq a =&amp;gt; a&lt;/code&gt; are legal &lt;a href=&quot;#id1&quot;&gt;&lt;span id=&quot;id2&quot;&gt;``&lt;/span&gt;&lt;/a&gt;ctype``s.</source>
          <target state="translated">&lt;code&gt;ctype&lt;/code&gt; は、最も外側の &lt;code&gt;forall&lt;/code&gt; / &lt;code&gt;=&amp;gt;&lt;/code&gt; に制限がない &lt;code&gt;btype&lt;/code&gt; であるため、foralla &lt;code&gt;forall a. a&lt;/code&gt; aとEqa &lt;code&gt;Eq a =&amp;gt; a&lt;/code&gt; は正当な&lt;a href=&quot;#id1&quot;&gt;&lt;span id=&quot;id2&quot;&gt;``&lt;/span&gt;&lt;/a&gt; ctype``です。&lt;span id=&quot;id2&quot;&gt;&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d1c83337569a79154f51498099035bebb7e01aea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ctype&lt;/code&gt; is a &lt;code&gt;btype&lt;/code&gt; that has no restrictions on an outermost &lt;code&gt;forall&lt;/code&gt;/&lt;code&gt;=&amp;gt;&lt;/code&gt;, so &lt;code&gt;forall a. a&lt;/code&gt; and &lt;code&gt;Eq a =&amp;gt; a&lt;/code&gt; are legal &lt;code&gt;ctype&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;ctype&lt;/code&gt; は、最も外側の &lt;code&gt;forall&lt;/code&gt; / &lt;code&gt;=&amp;gt;&lt;/code&gt; に制限がない &lt;code&gt;btype&lt;/code&gt; であるため、foralla &lt;code&gt;forall a. a&lt;/code&gt; aと &lt;code&gt;Eq a =&amp;gt; a&lt;/code&gt; は正当な &lt;code&gt;ctype&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bda456eb4890ee9084670d9f458789b18bd7e5b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt; and &lt;code&gt;data instance&lt;/code&gt; declarations must have return kinds that end in &lt;code&gt;TYPE LiftedRep&lt;/code&gt;. (Recall that &lt;code&gt;Type&lt;/code&gt; is just a synonym for &lt;code&gt;TYPE LiftedRep&lt;/code&gt;.) By &amp;ldquo;end in&amp;rdquo;, we refer to the kind left over after all arguments (introduced either by &lt;code&gt;forall&lt;/code&gt; or &lt;code&gt;-&amp;gt;&lt;/code&gt;) are stripped off and type synonyms expanded. Note that no type family expansion is done when performing this check.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; および &lt;code&gt;data instance&lt;/code&gt; 宣言には、 &lt;code&gt;TYPE LiftedRep&lt;/code&gt; で終わる戻りの種類が必要です。（ &lt;code&gt;Type&lt;/code&gt; は &lt;code&gt;TYPE LiftedRep&lt;/code&gt; の単なる同義語であることを思い出してください。）「endin」とは、すべての引数（ &lt;code&gt;forall&lt;/code&gt; または &lt;code&gt;-&amp;gt;&lt;/code&gt; のいずれかによって導入された）が削除され、型の同義語が展開された後に残った種類を指します。このチェックを実行するとき、型族の拡張は行われないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c1fbc8e436d708733f29d632bb7c387b44f62477" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt; declarations:</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 宣言：</target>
        </trans-unit>
        <trans-unit id="df60e7df637060c0210c29137e93f51d157ff540" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defaultPlugin&lt;/code&gt; defines &lt;code&gt;pluginRecompile&lt;/code&gt; to be &lt;code&gt;impurePlugin&lt;/code&gt; which is the most conservative and backwards compatible option.</source>
          <target state="translated">&lt;code&gt;defaultPlugin&lt;/code&gt; はpluginRecompileを定義し &lt;code&gt;pluginRecompile&lt;/code&gt; すべき &lt;code&gt;impurePlugin&lt;/code&gt; 最も保守的と下位互換性オプションです。</target>
        </trans-unit>
        <trans-unit id="9d8ac8ba952e96f2f584ff153d1e0d2c50fbb8b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;discardData fd queues&lt;/code&gt; calls &lt;code&gt;tcflush&lt;/code&gt; to discard pending input and/or output for &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt;, as indicated by the &lt;code&gt;QueueSelector&lt;/code&gt;&lt;code&gt;queues&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;discardData fd queues&lt;/code&gt; は、 &lt;code&gt;tcflush&lt;/code&gt; を呼び出して、 &lt;code&gt;QueueSelector&lt;/code&gt; で示されるように、 &lt;code&gt;Fd&lt;/code&gt; &lt;code&gt;fd&lt;/code&gt; の保留中の入力および/または出力を破棄します &lt;code&gt;queues&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="653522ba69eccab6c77a8c5417dd32997d59a2ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dlopen(3)&lt;/code&gt; and friends Derived from &lt;code&gt;GModule.chs&lt;/code&gt; by M.Weber &amp;amp; M.Chakravarty which is part of c2hs. I left the API more or less the same, mostly the flags are different.</source>
          <target state="translated">&lt;code&gt;dlopen(3)&lt;/code&gt; および友達 &lt;code&gt;GModule.chs&lt;/code&gt; c2hsの一部であるM.Weber＆M.Chakravartyによる。私はAPIを多かれ少なかれ同じままにしました、ほとんどのフラグは異なります。</target>
        </trans-unit>
        <trans-unit id="ef46bdd157c3375114408f775493150852e02e44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;drainOutput fd&lt;/code&gt; calls &lt;code&gt;tcdrain&lt;/code&gt; to block until all output written to &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt; has been transmitted.</source>
          <target state="translated">&lt;code&gt;drainOutput fd&lt;/code&gt; は、 &lt;code&gt;tcdrain&lt;/code&gt; を呼び出して、 &lt;code&gt;Fd&lt;/code&gt; &lt;code&gt;fd&lt;/code&gt; に書き込まれたすべての出力が送信されるまでブロックします。</target>
        </trans-unit>
        <trans-unit id="d76e6c62116a09c7ea69142e3b355a99f57dbfe8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dup2 source target&lt;/code&gt; replaces the target device with the source device. The target device is closed first, if necessary, and then it is made into a duplicate of the first device (like Unix &lt;code&gt;dup2&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;dup2 source target&lt;/code&gt; は、ターゲットデバイスをソースデバイスに置き換えます。ターゲットデバイスは必要に応じて最初に閉じられ、次に最初のデバイスの複製になります（Unix &lt;code&gt;dup2&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="554a03aaac855cf87b3e1e6f5b648cb30d35ab3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt;: the element type of the array.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; ：配列の要素タイプ。</target>
        </trans-unit>
        <trans-unit id="466c8896289ba5414e01061af7677aabe076c33c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt;: the element type of the array. Only certain element types are supported.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; ：配列の要素タイプ。特定の要素タイプのみがサポートされています。</target>
        </trans-unit>
        <trans-unit id="86251c46011752870f8ac6831c8af890201af68f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt;: the element type of the array. Only certain element types are supported: see &lt;a href=&quot;data-array-marray&quot;&gt;Data.Array.MArray&lt;/a&gt; for a list of instances.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; ：配列の要素タイプ。特定の要素タイプのみがサポートされています。インスタンスのリストについては、&lt;a href=&quot;data-array-marray&quot;&gt;Data.Array.MArray&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="57723498d28290c18a0e14ab2d7a1a61c416dc3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;endBy p sep&lt;/code&gt; parses &lt;em&gt;zero&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated and ended by &lt;code&gt;sep&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;endBy p sep&lt;/code&gt; は、&lt;em&gt;0&lt;/em&gt;個以上の &lt;code&gt;p&lt;/code&gt; の出現を解析し、 &lt;code&gt;sep&lt;/code&gt; で区切って終了します。 &lt;code&gt;p&lt;/code&gt; が返す値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="a3ea67996444d2042ff0261a1d87529799f87f8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;endBy p sep&lt;/code&gt; parses one or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated and ended by &lt;code&gt;sep&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;endBy p sep&lt;/code&gt; は、1つ以上の &lt;code&gt;p&lt;/code&gt; の出現を解析し、区切られて終了します &lt;code&gt;sep&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="311ae2cbe599a5740080499a38949d85bd6cacaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;endBy p sep&lt;/code&gt; parses zero or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated and ended by &lt;code&gt;sep&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;endBy p sep&lt;/code&gt; は、0個以上の &lt;code&gt;p&lt;/code&gt; の出現を解析し、 &lt;code&gt;sep&lt;/code&gt; で区切って終了しますます。</target>
        </trans-unit>
        <trans-unit id="d1116ff23b47ec9512b9459f3a2fdaf213daad63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;endBy1 p sep&lt;/code&gt; parses &lt;em&gt;one&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated and ended by &lt;code&gt;sep&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;endBy1 p sep&lt;/code&gt; は、&lt;em&gt;1&lt;/em&gt;つ以上の &lt;code&gt;p&lt;/code&gt; の出現を解析し、 &lt;code&gt;sep&lt;/code&gt; で区切って終了します。 &lt;code&gt;p&lt;/code&gt; が返す値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="3e4bfd1c817ef4eb16eb5e85f5174941b1fb2639" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;epochTime&lt;/code&gt; calls &lt;code&gt;time&lt;/code&gt; to obtain the number of seconds that have elapsed since the epoch (Jan 01 00:00:00 GMT 1970).</source>
          <target state="translated">&lt;code&gt;epochTime&lt;/code&gt; は、エポック（Jan 01 00:00:00 GMT 1970）から経過した秒数を取得するために &lt;code&gt;time&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="492b5f7d9d9dd85eb8274906f65463b75437f4c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; automatically attach the current stack to the error message. This often complements the &lt;code&gt;HasCallStack&lt;/code&gt; stack (see &lt;a href=&quot;exts/callstack#hascallstack&quot;&gt;HasCallStack&lt;/a&gt;), so both call stacks are shown.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; および &lt;code&gt;undefined&lt;/code&gt; は、現在のスタックをエラーメッセージに自動的に添付します。これは多くの場合、 &lt;code&gt;HasCallStack&lt;/code&gt; スタックを補完するため（&lt;a href=&quot;exts/callstack#hascallstack&quot;&gt;HasCallStackを&lt;/a&gt;参照）、両方のコールスタックが表示されます。</target>
        </trans-unit>
        <trans-unit id="a3b22431113363995e02522f9f91315f345d06cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; automatically attach the current stack to the error message. This often complements the &lt;code&gt;HasCallStack&lt;/code&gt; stack (see &lt;a href=&quot;glasgow_exts#hascallstack&quot;&gt;HasCallStack&lt;/a&gt;), so both call stacks are shown.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; および &lt;code&gt;undefined&lt;/code&gt; は、現在のスタックをエラーメッセージに自動的に添付します。これはしばしば &lt;code&gt;HasCallStack&lt;/code&gt; スタックを補完します（参照&lt;a href=&quot;glasgow_exts#hascallstack&quot;&gt; HasCallStackを&lt;/a&gt;）をため、両方の呼び出しスタックが表示されます。</target>
        </trans-unit>
        <trans-unit id="c51b9aa0edf648e3722c4daac57a257721f19863" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exp (a + b)&lt;/code&gt; = &lt;code&gt;exp a * exp b&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;exp (a + b)&lt;/code&gt; = &lt;code&gt;exp a * exp b&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eac0e4af0d48ad50e7fd3f23c631168d62f509d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exp (fromInteger 0)&lt;/code&gt; = &lt;code&gt;fromInteger 1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;exp (fromInteger 0)&lt;/code&gt; = &lt;code&gt;fromInteger 1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b126a049558f379fb47e63dbe3b5d5892512a2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f1&lt;/code&gt; is a function binding, and &lt;code&gt;f2&lt;/code&gt; binds a bare variable; in both cases the type signature brings &lt;code&gt;a&lt;/code&gt; into scope. However the binding for &lt;code&gt;f3&lt;/code&gt; is a pattern binding, and so &lt;code&gt;f3&lt;/code&gt; is a fresh variable brought into scope by the pattern, not connected with top level &lt;code&gt;f3&lt;/code&gt;. Then type variable &lt;code&gt;a&lt;/code&gt; is not in scope of the right-hand side of &lt;code&gt;Just f3 = ...&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f1&lt;/code&gt; は関数バインディングで、 &lt;code&gt;f2&lt;/code&gt; はベア変数をバインドします。両方の場合において、型シグネチャをもたらす範囲内。ただし、 &lt;code&gt;f3&lt;/code&gt; のバインディングはパターンバインディングであるため、 &lt;code&gt;f3&lt;/code&gt; はパターンによってスコープに組み込まれる新しい変数であり、トップレベルの &lt;code&gt;f3&lt;/code&gt; とは接続されていません。次に、型変数 &lt;code&gt;a&lt;/code&gt; は &lt;code&gt;Just f3 = ...&lt;/code&gt; 右側のスコープにありません。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="088aadfe34e0c8fec30aa1426daa42c266d37c9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; &amp;mdash; parallel sparks (fully accurate). Disabled by default.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; &amp;mdash;並列スパーク（完全に正確）。デフォルトでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="a21ee40c92d51b07b0a214a5537689b1a9fe1a5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; does not use an explicit &lt;code&gt;forall&lt;/code&gt;, so type variables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are brought into scope implicitly. &lt;code&gt;g&lt;/code&gt; quantifies both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; explicitly. Both &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; work today and will continue to work in the future because they adhere to the &amp;ldquo;forall-or-nothing&amp;rdquo; rule: either all type variables in a function definition are introduced explicitly or implicitly, there is no middle ground.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; は明示的な &lt;code&gt;forall&lt;/code&gt; を使用しないため、型変数 &lt;code&gt;a&lt;/code&gt; および &lt;code&gt;b&lt;/code&gt; は暗黙的にスコープに入れられます。 &lt;code&gt;g&lt;/code&gt; は &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; の両方を明示的に数量化します。 &lt;code&gt;f&lt;/code&gt; と &lt;code&gt;g&lt;/code&gt; の両方今日機能し、「forall-or-nothing」ルールに準拠しているため、今後も機能します。関数定義のすべての型変数が明示的または暗黙的に導入され、中間の根拠はありません。</target>
        </trans-unit>
        <trans-unit id="d7d648ac806ab27c3b6b97ebdc3984b377a4b72d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; is a fraction with the same type and sign as &lt;code&gt;x&lt;/code&gt;, and with absolute value less than &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; は、 &lt;code&gt;x&lt;/code&gt; と同じ型および符号の分数であり、絶対値は &lt;code&gt;1&lt;/code&gt; 未満です。</target>
        </trans-unit>
        <trans-unit id="c1f56fbf9b84fe774bb4706812a58a48678a4d4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; is a record field of constructor &lt;code&gt;C&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; はコンストラクタ &lt;code&gt;C&lt;/code&gt; のレコードフィールドです。。</target>
        </trans-unit>
        <trans-unit id="eefbbe91a073414235b75d9f1a3b74ecb7ba1a01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fileAccess name read write exec&lt;/code&gt; checks if the file (or other file system object) &lt;code&gt;name&lt;/code&gt; can be accessed for reading, writing and/or executing. To check a permission set the corresponding argument to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fileAccess name read write exec&lt;/code&gt; は、ファイル（または他のファイルシステムオブジェクト）の &lt;code&gt;name&lt;/code&gt; にアクセスして、読み取り、書き込み、実行ができるかどうかを確認します。権限を確認するには、対応する引数を &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="21096c752309e1ba1993b650b0441bde685dce28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fileAccess name read write exec&lt;/code&gt; checks if the file (or other file system object) &lt;code&gt;name&lt;/code&gt; can be accessed for reading, writing and/or executing. To check a permission set the corresponding argument to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fileAccess name read write exec&lt;/code&gt; は、ファイル（または他のファイルシステムオブジェクト） &lt;code&gt;name&lt;/code&gt; にアクセスして読み取り、書き込み、および/または実行できるかどうかを確認します。権限を確認するには、対応する引数を &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="9b646aeaf6fc7b495cd471ca64a41e7a7a4b1452" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fileAccess name read write exec&lt;/code&gt; checks if the file (or other file system object) &lt;code&gt;name&lt;/code&gt; can be accessed for reading, writing and/or executing. To check a permission set the corresponding argument to &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fileAccess name read write exec&lt;/code&gt; は、ファイル（または他のファイルシステムオブジェクト） &lt;code&gt;name&lt;/code&gt; にアクセスして読み取り、書き込み、および/または実行できるかどうかを確認します。権限を確認するには、対応する引数を &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="841b2ff8e1b534d6b7ff33e50bc7b8b488c6d4f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findFilesWith predicate dirs name&lt;/code&gt; searches through the list of directories (&lt;code&gt;dirs&lt;/code&gt;) for files that have the given &lt;code&gt;name&lt;/code&gt; and satisfy the given &lt;code&gt;predicate&lt;/code&gt; ands return the paths of those files. The directories are checked in a left-to-right order and the paths are returned in the same order.</source>
          <target state="translated">&lt;code&gt;findFilesWith predicate dirs name&lt;/code&gt; は、ディレクトリ（ &lt;code&gt;dirs&lt;/code&gt; ）のリストを検索して、指定された &lt;code&gt;name&lt;/code&gt; を持ち、指定された &lt;code&gt;predicate&lt;/code&gt; を満たすファイルを探し、それらのファイルのパスを返します。ディレクトリは左から右の順序でチェックされ、パスは同じ順序で返されます。</target>
        </trans-unit>
        <trans-unit id="be93079f8a7e644b25fa4bf9cbf3c7628d158741" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;first&lt;/code&gt; returns its first argument if it is non-empty, otherwise its second.</source>
          <target state="translated">&lt;code&gt;first&lt;/code&gt; 、それはそうでない場合、その第二の非空の場合は、最初の引数を返します。</target>
        </trans-unit>
        <trans-unit id="4b5dba7994c32924f46d343d35d94e730e375533" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forall&lt;/code&gt; is always a reserved keyword at the type level, contrary to the Haskell Report, which allows type variables to be named &lt;code&gt;forall&lt;/code&gt;. Note that this does not imply that GHC always enables the &lt;a href=&quot;exts/explicit_forall#extension-ExplicitForAll&quot;&gt;&lt;code&gt;ExplicitForAll&lt;/code&gt;&lt;/a&gt; extension. Even without this extension enabled, reserving &lt;code&gt;forall&lt;/code&gt; as a keyword has significance. For instance, GHC will not parse the type signature &lt;code&gt;foo :: forall x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;forall&lt;/code&gt; は、型変数に &lt;code&gt;forall&lt;/code&gt; という名前を付けることができるHaskellレポートとは異なり、常に型レベルで予約されたキーワードです。これは、GHCが常に&lt;a href=&quot;exts/explicit_forall#extension-ExplicitForAll&quot;&gt; &lt;code&gt;ExplicitForAll&lt;/code&gt; &lt;/a&gt;拡張機能を有効にすることを意味するものではないことに注意してください。この拡張機能を有効にしなくても、 &lt;code&gt;forall&lt;/code&gt; をキーワードとして予約することには意味があります。たとえば、GHCは型シグネチャ &lt;code&gt;foo :: forall x&lt;/code&gt; 解析しません。</target>
        </trans-unit>
        <trans-unit id="9248da6ebdc881872dcbd69414dec40c653819fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forall&lt;/code&gt; is always a reserved keyword at the type level, contrary to the Haskell Report, which allows type variables to be named &lt;code&gt;forall&lt;/code&gt;. Note that this does not imply that GHC always enables the &lt;a href=&quot;glasgow_exts#extension-ExplicitForAll&quot;&gt;&lt;code&gt;-XExplicitForAll&lt;/code&gt;&lt;/a&gt; extension. Even without this extension enabled, reserving &lt;code&gt;forall&lt;/code&gt; as a keyword has significance. For instance, GHC will not parse the type signature &lt;code&gt;foo :: forall x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;forall&lt;/code&gt; は、型変数に &lt;code&gt;forall&lt;/code&gt; という名前を付けることができるHaskellレポートとは異なり、常に型レベルで予約済みのキーワードです。これは、GHCが常に&lt;a href=&quot;glasgow_exts#extension-ExplicitForAll&quot;&gt; &lt;code&gt;-XExplicitForAll&lt;/code&gt; &lt;/a&gt;拡張を有効にすることを意味するものではないことに注意してください。この拡張機能が有効になっていない場合でも、キーワードとして &lt;code&gt;forall&lt;/code&gt; を予約することには意味があります。たとえば、GHCは型シグネチャ &lt;code&gt;foo :: forall x&lt;/code&gt; 解析しません。</target>
        </trans-unit>
        <trans-unit id="e045484c5dafee9e3b89e2862b7036eb43ca1c6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forall&lt;/code&gt; is always a reserved keyword at the type level, contrary to the Haskell Report, which allows type variables to be named &lt;code&gt;forall&lt;/code&gt;. Note that this does not imply that GHC always enables the &lt;a href=&quot;glasgow_exts#extension-ExplicitForAll&quot;&gt;&lt;code&gt;ExplicitForAll&lt;/code&gt;&lt;/a&gt; extension. Even without this extension enabled, reserving &lt;code&gt;forall&lt;/code&gt; as a keyword has significance. For instance, GHC will not parse the type signature &lt;code&gt;foo :: forall x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;forall&lt;/code&gt; は、型変数に &lt;code&gt;forall&lt;/code&gt; という名前を付けることができるHaskellレポートとは異なり、常に型レベルで予約されたキーワードです。これは、GHCが常に&lt;a href=&quot;glasgow_exts#extension-ExplicitForAll&quot;&gt; &lt;code&gt;ExplicitForAll&lt;/code&gt; &lt;/a&gt;拡張を有効にすることを意味するものではないことに注意してください。この拡張機能を有効にしなくても、 &lt;code&gt;forall&lt;/code&gt; をキーワードとして予約することには意味があります。たとえば、GHCは型シグネチャ &lt;code&gt;foo :: forall x&lt;/code&gt; 解析しません。</target>
        </trans-unit>
        <trans-unit id="08b836363d9e5a185a08c9082ffa2e4a6e0db892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forall&lt;/code&gt;&amp;lsquo;s in type signatures:</source>
          <target state="translated">&lt;code&gt;forall&lt;/code&gt; 型シグネチャ内のforall：</target>
        </trans-unit>
        <trans-unit id="96e1f4d2001cd4c4cadecf2c88a6ab6d6bba71cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forall&lt;/code&gt;&amp;rsquo;s in type signatures:</source>
          <target state="translated">&lt;code&gt;forall&lt;/code&gt; の型シグネチャ：</target>
        </trans-unit>
        <trans-unit id="13628c7bed0f5a87fd30a4a8c34334306d16fb22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;force x&lt;/code&gt; fully evaluates &lt;code&gt;x&lt;/code&gt;, and then returns it. Note that &lt;code&gt;force x&lt;/code&gt; only performs evaluation when the value of &lt;code&gt;force x&lt;/code&gt; itself is demanded, so essentially it turns shallow evaluation into deep evaluation.</source>
          <target state="translated">&lt;code&gt;force x&lt;/code&gt; 評価する完全 &lt;code&gt;x&lt;/code&gt; 、およびそれを返します。ことを注意 &lt;code&gt;force x&lt;/code&gt; の値場合にのみ行う評価の &lt;code&gt;force x&lt;/code&gt; 自体が要求されるので、本質的にそれが深い評価に浅い評価を回します。</target>
        </trans-unit>
        <trans-unit id="2d98f965de72b886a03781bc735bd86909818e22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;g&lt;/code&gt; &amp;mdash; GC events, including GC start/stop. Enabled by default.</source>
          <target state="translated">&lt;code&gt;g&lt;/code&gt; &amp;mdash; GCイベント（GCの開始/停止を含む）。デフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="b249929568260bd2badbaaecf85c48a21a93b9b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getAllGroupEntries&lt;/code&gt; returns all group entries on the system by repeatedly calling &lt;code&gt;getgrent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;getAllGroupEntries&lt;/code&gt; は、 &lt;code&gt;getgrent&lt;/code&gt; を繰り返し呼び出して、システム上のすべてのグループエントリを返します</target>
        </trans-unit>
        <trans-unit id="155ffebaf7cac1b73e60ff3d2c7fabfebde64da1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getAllUserEntries&lt;/code&gt; returns all user entries on the system by repeatedly calling &lt;code&gt;getpwent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;getAllUserEntries&lt;/code&gt; は、 &lt;code&gt;getpwent&lt;/code&gt; を繰り返し呼び出して、システム上のすべてのユーザーエントリを返します。</target>
        </trans-unit>
        <trans-unit id="d62311d6fe39b7f73808772e922af25463f96b74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getControllingTerminalName&lt;/code&gt; calls &lt;code&gt;ctermid&lt;/code&gt; to obtain a name associated with the controlling terminal for the process. If a controlling terminal exists, &lt;code&gt;getControllingTerminalName&lt;/code&gt; returns the name of the controlling terminal.</source>
          <target state="translated">&lt;code&gt;getControllingTerminalName&lt;/code&gt; は &lt;code&gt;ctermid&lt;/code&gt; を呼び出して、プロセスの制御端末に関連付けられた名前を取得します。制御端末が存在する場合、 &lt;code&gt;getControllingTerminalName&lt;/code&gt; は制御端末の名前を返します。</target>
        </trans-unit>
        <trans-unit id="7b48c75090f4029b19deb63392b19507171798cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getEffectiveGroupID&lt;/code&gt; calls &lt;code&gt;getegid&lt;/code&gt; to obtain the effective &lt;code&gt;GroupID&lt;/code&gt; associated with the current process.</source>
          <target state="translated">&lt;code&gt;getEffectiveGroupID&lt;/code&gt; 呼び出しは &lt;code&gt;getegid&lt;/code&gt; 有効得るために &lt;code&gt;GroupID&lt;/code&gt; 、現在のプロセスに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="1466a085d0563a0c255277828065f309f7b37c45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getEffectiveUserID&lt;/code&gt; calls &lt;code&gt;geteuid&lt;/code&gt; to obtain the effective &lt;code&gt;UserID&lt;/code&gt; associated with the current process.</source>
          <target state="translated">&lt;code&gt;getEffectiveUserID&lt;/code&gt; は &lt;code&gt;geteuid&lt;/code&gt; を呼び出して有効な &lt;code&gt;UserID&lt;/code&gt; を取得しますて、現在のプロセスに関連付けられているます。</target>
        </trans-unit>
        <trans-unit id="4f0a78700d175452cf4149f703baaec00541475e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getEffectiveUserName&lt;/code&gt; gets the name associated with the effective &lt;code&gt;UserID&lt;/code&gt; of the process.</source>
          <target state="translated">&lt;code&gt;getEffectiveUserName&lt;/code&gt; は、プロセスの実効ユーザー &lt;code&gt;UserID&lt;/code&gt; に関連付けられた名前を取得します。</target>
        </trans-unit>
        <trans-unit id="bb694fd7dcf596ee545e8885cab4fbd6764ef189" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getFdPathVar var fd&lt;/code&gt; obtains the dynamic value of the requested configurable file limit or option associated with the file or directory attached to the open channel &lt;code&gt;fd&lt;/code&gt;. For defined file limits, &lt;code&gt;getFdPathVar&lt;/code&gt; returns the associated value. For defined file options, the result of &lt;code&gt;getFdPathVar&lt;/code&gt; is undefined, but not failure.</source>
          <target state="translated">&lt;code&gt;getFdPathVar var fd&lt;/code&gt; は、オープンチャネル &lt;code&gt;fd&lt;/code&gt; に接続されているファイルまたはディレクトリに関連付けられている、要求された構成可能なファイル制限またはオプションの動的な値を取得します。定義されたファイル制限の場合、 &lt;code&gt;getFdPathVar&lt;/code&gt; は関連する値を返します。定義済みファイルオプションの場合、 &lt;code&gt;getFdPathVar&lt;/code&gt; の結果は未定義ですが、失敗ではありません。</target>
        </trans-unit>
        <trans-unit id="db3b2f46830208e498ebfb2dd49b7cdea145897b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getFdStatus fd&lt;/code&gt; acts as &lt;code&gt;getFileStatus&lt;/code&gt; but uses a file descriptor &lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getFdStatus fd&lt;/code&gt; は &lt;code&gt;getFileStatus&lt;/code&gt; として機能しますが、ファイル記述子 &lt;code&gt;fd&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="4b8b63428c73d4d68ccfd8d495d890a2bc5622c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getFileStatus path&lt;/code&gt; calls gets the &lt;code&gt;FileStatus&lt;/code&gt; information (user ID, size, access times, etc.) for the file &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getFileStatus path&lt;/code&gt; 呼び出しは、ファイル &lt;code&gt;path&lt;/code&gt; の &lt;code&gt;FileStatus&lt;/code&gt; 情報（ユーザーID、サイズ、アクセス時間など）を取得します。</target>
        </trans-unit>
        <trans-unit id="1c4b2df9f9650d51c44fc63378f653450e8fbaa1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getGroupEntryForID gid&lt;/code&gt; calls &lt;code&gt;getgrgid_r&lt;/code&gt; to obtain the &lt;code&gt;GroupEntry&lt;/code&gt; information associated with &lt;code&gt;GroupID&lt;/code&gt;&lt;code&gt;gid&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such group exists.</source>
          <target state="translated">&lt;code&gt;getGroupEntryForID gid&lt;/code&gt; は &lt;code&gt;getgrgid_r&lt;/code&gt; を呼び出して、 &lt;code&gt;GroupID&lt;/code&gt; &lt;code&gt;gid&lt;/code&gt; に関連付けられた &lt;code&gt;GroupEntry&lt;/code&gt; 情報を取得します。そのようなグループが存在しない場合、この操作は &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; で失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="85c29b25ea39b82d40b02d29f39278619e3c5996" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getGroupEntryForID gid&lt;/code&gt; calls &lt;code&gt;getgrgid_r&lt;/code&gt; to obtain the &lt;code&gt;GroupEntry&lt;/code&gt; information associated with &lt;code&gt;GroupID&lt;/code&gt;&lt;code&gt;gid&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such group exists.</source>
          <target state="translated">&lt;code&gt;getGroupEntryForID gid&lt;/code&gt; 呼び出しが &lt;code&gt;getgrgid_r&lt;/code&gt; 得ることが &lt;code&gt;GroupEntry&lt;/code&gt; のに関連した情報 &lt;code&gt;GroupID&lt;/code&gt; &lt;code&gt;gid&lt;/code&gt; 。このようなグループが存在しない場合、この操作は &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; で失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="7f2f70d2983e5618cf0ff73fb7a9990dc6502b1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getGroupEntryForID gid&lt;/code&gt; calls &lt;code&gt;getgrgid_r&lt;/code&gt; to obtain the &lt;code&gt;GroupEntry&lt;/code&gt; information associated with &lt;code&gt;GroupID&lt;/code&gt;&lt;code&gt;gid&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such group exists.</source>
          <target state="translated">&lt;code&gt;getGroupEntryForID gid&lt;/code&gt; 呼び出しが &lt;code&gt;getgrgid_r&lt;/code&gt; 得ることが &lt;code&gt;GroupEntry&lt;/code&gt; のに関連した情報 &lt;code&gt;GroupID&lt;/code&gt; &lt;code&gt;gid&lt;/code&gt; 。このようなグループが存在しない場合、この操作は &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; で失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d99566a619942846eb4f8f101022a3e21cd7ef5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getGroupEntryForName name&lt;/code&gt; calls &lt;code&gt;getgrnam_r&lt;/code&gt; to obtain the &lt;code&gt;GroupEntry&lt;/code&gt; information associated with the group called &lt;code&gt;name&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such group exists.</source>
          <target state="translated">&lt;code&gt;getGroupEntryForName name&lt;/code&gt; 呼び出しは &lt;code&gt;getgrnam_r&lt;/code&gt; 取得するために &lt;code&gt;GroupEntry&lt;/code&gt; のと呼ばれるグループに関連付けられた情報 &lt;code&gt;name&lt;/code&gt; 。そのようなグループが存在しない場合、この操作は &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; で失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d5377f754e4ff03e12d095983355683d1a2c03b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getGroupEntryForName name&lt;/code&gt; calls &lt;code&gt;getgrnam_r&lt;/code&gt; to obtain the &lt;code&gt;GroupEntry&lt;/code&gt; information associated with the group called &lt;code&gt;name&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such group exists.</source>
          <target state="translated">&lt;code&gt;getGroupEntryForName name&lt;/code&gt; は、 &lt;code&gt;getgrnam_r&lt;/code&gt; を呼び出して、 &lt;code&gt;GroupEntry&lt;/code&gt; という &lt;code&gt;name&lt;/code&gt; のグループに関連付けられたGroupEntry情報を取得します。このようなグループが存在しない場合、この操作は &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; で失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="b8586afbcc6495735cc47716ab12e342fcc93176" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getGroupEntryForName name&lt;/code&gt; calls &lt;code&gt;getgrnam_r&lt;/code&gt; to obtain the &lt;code&gt;GroupEntry&lt;/code&gt; information associated with the group called &lt;code&gt;name&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such group exists.</source>
          <target state="translated">&lt;code&gt;getGroupEntryForName name&lt;/code&gt; は、 &lt;code&gt;getgrnam_r&lt;/code&gt; を呼び出して、 &lt;code&gt;GroupEntry&lt;/code&gt; という &lt;code&gt;name&lt;/code&gt; のグループに関連付けられたGroupEntry情報を取得します。このようなグループが存在しない場合、この操作は &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; で失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="13de22006fa5622016e7393522a11015373b3d37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getGroups&lt;/code&gt; calls &lt;code&gt;getgroups&lt;/code&gt; to obtain the list of supplementary &lt;code&gt;GroupID&lt;/code&gt;s associated with the current process.</source>
          <target state="translated">&lt;code&gt;getGroups&lt;/code&gt; は &lt;code&gt;getgroups&lt;/code&gt; を呼び出して、補足 &lt;code&gt;GroupID&lt;/code&gt; のリストを取得しますて、現在のプロセスに関連付けられているのます。</target>
        </trans-unit>
        <trans-unit id="85af0049a29319ae7de0479eb0f344f0e66f16b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getLoginName&lt;/code&gt; calls &lt;code&gt;getlogin&lt;/code&gt; to obtain the login name associated with the current process.</source>
          <target state="translated">&lt;code&gt;getLoginName&lt;/code&gt; は &lt;code&gt;getlogin&lt;/code&gt; を呼び出して、現在のプロセスに関連付けられているログイン名を取得します。</target>
        </trans-unit>
        <trans-unit id="cbddb8a78d2ffe61237c26bedc39c18a07770790" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getPathVar var path&lt;/code&gt; obtains the dynamic value of the requested configurable file limit or option associated with file or directory &lt;code&gt;path&lt;/code&gt;. For defined file limits, &lt;code&gt;getPathVar&lt;/code&gt; returns the associated value. For defined file options, the result of &lt;code&gt;getPathVar&lt;/code&gt; is undefined, but not failure.</source>
          <target state="translated">&lt;code&gt;getPathVar var path&lt;/code&gt; は、要求された構成可能なファイル制限またはファイルまたはディレクトリ &lt;code&gt;path&lt;/code&gt; 関連付けられたオプションの動的な値を取得します。定義されたファイル制限の場合、 &lt;code&gt;getPathVar&lt;/code&gt; は関連する値を返します。定義済みファイルオプションの場合、 &lt;code&gt;getPathVar&lt;/code&gt; の結果は未定義ですが、失敗ではありません。</target>
        </trans-unit>
        <trans-unit id="66d396e74c45dc35a39ef497b1e2868eefb84330" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getPendingSignals&lt;/code&gt; calls &lt;code&gt;sigpending&lt;/code&gt; to obtain the set of interrupts which have been received but are currently blocked.</source>
          <target state="translated">&lt;code&gt;getPendingSignals&lt;/code&gt; は &lt;code&gt;sigpending&lt;/code&gt; を呼び出して、受信されたが現在ブロックされている一連の割り込みを取得します。</target>
        </trans-unit>
        <trans-unit id="f9d58ff35678f8b2b29a5d781fabf1cb87c05f81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getRealGroupID&lt;/code&gt; calls &lt;code&gt;getgid&lt;/code&gt; to obtain the real &lt;code&gt;GroupID&lt;/code&gt; associated with the current process.</source>
          <target state="translated">&lt;code&gt;getRealGroupID&lt;/code&gt; は &lt;code&gt;getgid&lt;/code&gt; を呼び出して実際のGroupIDを取得し &lt;code&gt;GroupID&lt;/code&gt; 、現在のプロセスに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="2a3a1137f3fbbbc0823d11c9ceed084d0845b810" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getRealUserID&lt;/code&gt; calls &lt;code&gt;getuid&lt;/code&gt; to obtain the real &lt;code&gt;UserID&lt;/code&gt; associated with the current process.</source>
          <target state="translated">&lt;code&gt;getRealUserID&lt;/code&gt; は &lt;code&gt;getuid&lt;/code&gt; を呼び出して、現在のプロセスに関連付けられている実際の &lt;code&gt;UserID&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="0a0848532c3948ab0f2e080e8d8f66facf8bf125" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getSignalMask&lt;/code&gt; calls &lt;code&gt;sigprocmask&lt;/code&gt; to determine the set of interrupts which are currently being blocked.</source>
          <target state="translated">&lt;code&gt;getSignalMask&lt;/code&gt; は &lt;code&gt;sigprocmask&lt;/code&gt; を呼び出して、現在ブロックされている一連の割り込みを判別します。</target>
        </trans-unit>
        <trans-unit id="45792ac1182ddb07da8ad701cd5db05b437b3f26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getSlaveTerminalName&lt;/code&gt; calls &lt;code&gt;ptsname&lt;/code&gt; to obtain the name of the slave terminal associated with a pseudoterminal pair. The file descriptor to pass in must be that of the master.</source>
          <target state="translated">&lt;code&gt;getSlaveTerminalName&lt;/code&gt; は、 &lt;code&gt;ptsname&lt;/code&gt; を呼び出して、疑似端末ペアに関連付けられたスレーブ端末の名前を取得します。渡すファイル記述子は、マスターのものでなければなりません。</target>
        </trans-unit>
        <trans-unit id="0b9d53296999bcb92b005cdf6ca8476ec18bb8a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getTerminalAttributes fd&lt;/code&gt; calls &lt;code&gt;tcgetattr&lt;/code&gt; to obtain the &lt;code&gt;TerminalAttributes&lt;/code&gt; associated with &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getTerminalAttributes fd&lt;/code&gt; は、 &lt;code&gt;tcgetattr&lt;/code&gt; を呼び出して、 &lt;code&gt;Fd&lt;/code&gt; &lt;code&gt;fd&lt;/code&gt; に関連付けられた &lt;code&gt;TerminalAttributes&lt;/code&gt; を取得します。ます。</target>
        </trans-unit>
        <trans-unit id="0aabec5d2ccf6dc660c81c4d3db77eeda5c51c5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getTerminalName fd&lt;/code&gt; calls &lt;code&gt;ttyname&lt;/code&gt; to obtain a name associated with the terminal for &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt;. If &lt;code&gt;fd&lt;/code&gt; is associated with a terminal, &lt;code&gt;getTerminalName&lt;/code&gt; returns the name of the terminal.</source>
          <target state="translated">&lt;code&gt;getTerminalName fd&lt;/code&gt; は &lt;code&gt;ttyname&lt;/code&gt; を呼び出して、 &lt;code&gt;Fd&lt;/code&gt; &lt;code&gt;fd&lt;/code&gt; の端末に関連付けられた名前を取得します。 &lt;code&gt;fd&lt;/code&gt; が端末に関連付けられている場合、 &lt;code&gt;getTerminalName&lt;/code&gt; は端末の名前を返します。</target>
        </trans-unit>
        <trans-unit id="f737b45d8d4b7f86b0a85afaefa9c1d471e82657" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getTerminalProcessGroupID fd&lt;/code&gt; calls &lt;code&gt;tcgetpgrp&lt;/code&gt; to obtain the &lt;code&gt;ProcessGroupID&lt;/code&gt; of the foreground process group associated with the terminal attached to &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getTerminalProcessGroupID fd&lt;/code&gt; 呼び出しが &lt;code&gt;tcgetpgrp&lt;/code&gt; 得るため &lt;code&gt;ProcessGroupID&lt;/code&gt; に取り付けられた端末に関連するフォアグラウンドプロセスグループの &lt;code&gt;Fd&lt;/code&gt; を &lt;code&gt;fd&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="87891a3f9d6eb6431b9cf1cc3d718af57ed5829e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getTixFullName&lt;/code&gt; takes a binary or &lt;code&gt;.tix&lt;/code&gt;-file name, and normalizes it into a &lt;code&gt;.tix&lt;/code&gt;-file name.</source>
          <target state="translated">&lt;code&gt;getTixFullName&lt;/code&gt; は、バイナリまたはかかる &lt;code&gt;.tix&lt;/code&gt; 名-fileを、とにそれを正規化し &lt;code&gt;.tix&lt;/code&gt; 名-file。</target>
        </trans-unit>
        <trans-unit id="9261c091b62d2dfbb82de0c098cfc567fa937d7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getUserEntryForID gid&lt;/code&gt; calls &lt;code&gt;getpwuid_r&lt;/code&gt; to obtain the &lt;code&gt;UserEntry&lt;/code&gt; information associated with &lt;code&gt;UserID&lt;/code&gt;&lt;code&gt;uid&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such user exists.</source>
          <target state="translated">&lt;code&gt;getUserEntryForID gid&lt;/code&gt; は &lt;code&gt;getpwuid_r&lt;/code&gt; を呼び出して、 &lt;code&gt;UserID&lt;/code&gt; &lt;code&gt;uid&lt;/code&gt; に関連付けられた &lt;code&gt;UserEntry&lt;/code&gt; 情報を取得します。このようなユーザーが存在しない場合、この操作は &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; で失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="8344adfa513e619454773c358dd2db2dfd4aeb48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getUserEntryForID gid&lt;/code&gt; calls &lt;code&gt;getpwuid_r&lt;/code&gt; to obtain the &lt;code&gt;UserEntry&lt;/code&gt; information associated with &lt;code&gt;UserID&lt;/code&gt;&lt;code&gt;uid&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such user exists.</source>
          <target state="translated">&lt;code&gt;getUserEntryForID gid&lt;/code&gt; 通話 &lt;code&gt;getpwuid_r&lt;/code&gt; 取得するために &lt;code&gt;UserEntry&lt;/code&gt; のに関連した情報 &lt;code&gt;UserID&lt;/code&gt; &lt;code&gt;uid&lt;/code&gt; 。このようなユーザーが存在しない場合、この操作は &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; で失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="9501b1be20ca40612fb59193f4a4582721285632" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getUserEntryForID gid&lt;/code&gt; calls &lt;code&gt;getpwuid_r&lt;/code&gt; to obtain the &lt;code&gt;UserEntry&lt;/code&gt; information associated with &lt;code&gt;UserID&lt;/code&gt;&lt;code&gt;uid&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such user exists.</source>
          <target state="translated">&lt;code&gt;getUserEntryForID gid&lt;/code&gt; 通話 &lt;code&gt;getpwuid_r&lt;/code&gt; 取得するために &lt;code&gt;UserEntry&lt;/code&gt; のに関連した情報 &lt;code&gt;UserID&lt;/code&gt; &lt;code&gt;uid&lt;/code&gt; 。そのようなユーザーが存在しない場合、この操作は &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; で失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ccf511082d2a6b712638b3e82d5840bf3ca63672" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getUserEntryForName name&lt;/code&gt; calls &lt;code&gt;getpwnam_r&lt;/code&gt; to obtain the &lt;code&gt;UserEntry&lt;/code&gt; information associated with the user login &lt;code&gt;name&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such user exists.</source>
          <target state="translated">&lt;code&gt;getUserEntryForName name&lt;/code&gt; は &lt;code&gt;getpwnam_r&lt;/code&gt; を呼び出して、ユーザーログイン &lt;code&gt;name&lt;/code&gt; 関連付けられた &lt;code&gt;UserEntry&lt;/code&gt; 情報を取得します。このようなユーザーが存在しない場合、この操作は &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; で失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="b4164e1d23ba1b22b5610de03ae6cb68bb1d4105" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getUserEntryForName name&lt;/code&gt; calls &lt;code&gt;getpwnam_r&lt;/code&gt; to obtain the &lt;code&gt;UserEntry&lt;/code&gt; information associated with the user login &lt;code&gt;name&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such user exists.</source>
          <target state="translated">&lt;code&gt;getUserEntryForName name&lt;/code&gt; は、 &lt;code&gt;getpwnam_r&lt;/code&gt; を呼び出して、ユーザーログイン &lt;code&gt;name&lt;/code&gt; 関連付けられた &lt;code&gt;UserEntry&lt;/code&gt; 情報を取得します。このようなユーザーが存在しない場合、この操作は &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; で失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="63753e2a0b26bd1005294724d99e5f1b0037d3e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getUserEntryForName name&lt;/code&gt; calls &lt;code&gt;getpwnam_r&lt;/code&gt; to obtain the &lt;code&gt;UserEntry&lt;/code&gt; information associated with the user login &lt;code&gt;name&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such user exists.</source>
          <target state="translated">&lt;code&gt;getUserEntryForName name&lt;/code&gt; は、 &lt;code&gt;getpwnam_r&lt;/code&gt; を呼び出して、ユーザーログイン &lt;code&gt;name&lt;/code&gt; 関連付けられた &lt;code&gt;UserEntry&lt;/code&gt; 情報を取得します。そのようなユーザーが存在しない場合、この操作は &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; で失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="c8740046480f41b804442de90b74552696ab9e20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getWorkingDirectory&lt;/code&gt; calls &lt;code&gt;getcwd&lt;/code&gt; to obtain the name of the current working directory.</source>
          <target state="translated">&lt;code&gt;getWorkingDirectory&lt;/code&gt; は &lt;code&gt;getcwd&lt;/code&gt; を呼び出して、現在の作業ディレクトリの名前を取得します。</target>
        </trans-unit>
        <trans-unit id="4762bc4b56e65e8b8a41059f063dd83d23d621b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;graph :: Graph&lt;/code&gt; is the raw, array based adjacency list for the graph.</source>
          <target state="translated">&lt;code&gt;graph :: Graph&lt;/code&gt; は、グラフの生の配列ベースの隣接リストです。</target>
        </trans-unit>
        <trans-unit id="e79558186bcedb7ea80b05cefae0ea91dd4a1a9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;haystack&lt;/code&gt; in which to search</source>
          <target state="translated">&lt;code&gt;haystack&lt;/code&gt; 検索する干し草</target>
        </trans-unit>
        <trans-unit id="7149c630b16c4633db4eba03d7f955c96e250e83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;haystack&lt;/code&gt; in which to search.</source>
          <target state="translated">&lt;code&gt;haystack&lt;/code&gt; 検索する干し草。</target>
        </trans-unit>
        <trans-unit id="8f32f6945456e580108cadc3338cc8b49521e04a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hh:mm:ss[.sss]&lt;/code&gt; (ISO 8601:2004(E) sec. 4.2.2.2, 4.2.2.4(a) extended format)</source>
          <target state="translated">&lt;code&gt;hh:mm:ss[.sss]&lt;/code&gt; （ISO 8601：2004（E）sec。4.2.2.2、4.2.2.4（a）拡張フォーマット）</target>
        </trans-unit>
        <trans-unit id="2a73e769e2f0e725e70eea0a5095b2b787c516ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;historyFile&lt;/code&gt;: read/write the history to a file before and after the line input session.</source>
          <target state="translated">&lt;code&gt;historyFile&lt;/code&gt; ：行入力セッションの前後の履歴をファイルに読み書きします。</target>
        </trans-unit>
        <trans-unit id="c698564f1a7e7c33afd149f30061f586392287cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hpc combine&lt;/code&gt; is the swiss army knife of &lt;code&gt;hpc&lt;/code&gt;. It can be used to take the difference between &lt;code&gt;.tix&lt;/code&gt; files, to subtract one &lt;code&gt;.tix&lt;/code&gt; file from another, or to add two &lt;code&gt;.tix&lt;/code&gt; files. hpc combine does not change the original &lt;code&gt;.tix&lt;/code&gt; file; it generates a new &lt;code&gt;.tix&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;hpc combine&lt;/code&gt; のスイスアーミーナイフである &lt;code&gt;hpc&lt;/code&gt; 。これを使用して、 &lt;code&gt;.tix&lt;/code&gt; ファイル間の差をとったり、1つの &lt;code&gt;.tix&lt;/code&gt; ファイルを別の.tixファイルから減算したり、2つの &lt;code&gt;.tix&lt;/code&gt; ファイルを追加したりできます。hpc &lt;code&gt;.tix&lt;/code&gt; は元の.tixファイルを変更しません。新しい &lt;code&gt;.tix&lt;/code&gt; ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="84c21af023ae06fb4936ed44b4cdebc2dee607a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hpc markup&lt;/code&gt; marks up source files into colored html.</source>
          <target state="translated">&lt;code&gt;hpc markup&lt;/code&gt; は、ソースファイルを色付きのhtmlにマークアップします。</target>
        </trans-unit>
        <trans-unit id="7243cfbd88573b525191ebf4ad35c0dcbe0f0b2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hpc report&lt;/code&gt; gives a textual report of coverage. By default, all modules and packages are considered in generating report, unless include or exclude are used. The report is a summary unless the &lt;code&gt;--per-module&lt;/code&gt; flag is used. The &lt;code&gt;--xml-output&lt;/code&gt; option allows for tools to use hpc to glean coverage.</source>
          <target state="translated">&lt;code&gt;hpc report&lt;/code&gt; は、カバレッジのテキストレポートを提供します。includeまたはexcludeが使用されない限り、デフォルトでは、すべてのモジュールとパッケージがレポートの生成で考慮されます。 &lt;code&gt;--per-module&lt;/code&gt; フラグを使用しない限り、レポートは要約です。 &lt;code&gt;--xml-output&lt;/code&gt; ツールがグリーニングカバレッジにHPCを使用するためのオプションができます。</target>
        </trans-unit>
        <trans-unit id="3252f4e6796500fd704525666c9774a65171e975" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hpc sum&lt;/code&gt; adds together any number of &lt;code&gt;.tix&lt;/code&gt; files into a single &lt;code&gt;.tix&lt;/code&gt; file. &lt;code&gt;hpc sum&lt;/code&gt; does not change the original &lt;code&gt;.tix&lt;/code&gt; file; it generates a new &lt;code&gt;.tix&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;hpc sum&lt;/code&gt; は、任意の数の &lt;code&gt;.tix&lt;/code&gt; ファイルを1つの &lt;code&gt;.tix&lt;/code&gt; ファイルに追加します。 &lt;code&gt;hpc sum&lt;/code&gt; は元の &lt;code&gt;.tix&lt;/code&gt; ファイルを変更しません。新しい &lt;code&gt;.tix&lt;/code&gt; ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="7dcb7093805a2f32af47e2a28fbdb5856337eb0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hs_exit()&lt;/code&gt; normally causes the termination of any running Haskell threads in the system, and when &lt;code&gt;hs_exit()&lt;/code&gt; returns, there will be no more Haskell threads running. The runtime will then shut down the system in an orderly way, generating profiling output and statistics if necessary, and freeing all the memory it owns.</source>
          <target state="translated">&lt;code&gt;hs_exit()&lt;/code&gt; は通常、システムで実行中のすべてのHaskellスレッドを終了させ、 &lt;code&gt;hs_exit()&lt;/code&gt; が戻ると、実行中のHaskellスレッドはありません。次に、ランタイムはシステムを通常の方法でシャットダウンし、必要に応じてプロファイリング出力と統計を生成し、所有しているすべてのメモリを解放します。</target>
        </trans-unit>
        <trans-unit id="6171e08dc403c1068b283577596b39ac17685cb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hs_free_stable_ptr_unsafe&lt;/code&gt; must be used &lt;em&gt;only&lt;/em&gt; when the table has been locked using &lt;code&gt;hs_lock_stable_ptr_table&lt;/code&gt;. It must be unlocked afterwards using &lt;code&gt;hs_unlock_stable_ptr_table&lt;/code&gt;. The Haskell garbage collector cannot run while the table is locked, so it should be unlocked promptly. The following operations are forbidden while the stable pointer table is locked:</source>
          <target state="translated">&lt;code&gt;hs_free_stable_ptr_unsafe&lt;/code&gt; は、テーブルが &lt;code&gt;hs_lock_stable_ptr_table&lt;/code&gt; を使用してロックされている場合に&lt;em&gt;のみ&lt;/em&gt;使用する必要があります。その後、 &lt;code&gt;hs_unlock_stable_ptr_table&lt;/code&gt; を使用してロックを解除する必要があります。Haskellガベージコレクターは、テーブルがロックされている間は実行できないため、すぐにロック解除する必要があります。安定したポインタテーブルがロックされている間は、次の操作は禁止されています。</target>
        </trans-unit>
        <trans-unit id="158445a439d4ff5a6a7d5923dbb75384af873d21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hsc2hs&lt;/code&gt; normally operates by creating, compiling, and running a C program. That approach doesn&amp;rsquo;t work when cross-compiling &amp;mdash; in this case, the C compiler&amp;rsquo;s generates code for the target machine, not the host machine. For this situation, there&amp;rsquo;s a special mode &lt;code&gt;hsc2hs --cross-compile&lt;/code&gt; which can generate the .hs by extracting information from compilations only &amp;mdash; specifically, whether or not compilation fails.</source>
          <target state="translated">&lt;code&gt;hsc2hs&lt;/code&gt; は通常、Cプログラムを作成、コンパイル、および実行することによって動作します。そのアプローチはクロスコンパイル時には機能しません&amp;mdash;この場合、Cコンパイラはホストマシンではなくターゲットマシン用のコードを生成します。この状況には、コンパイルのみから情報を抽出することによって.hsを生成できる特別なモード &lt;code&gt;hsc2hs --cross-compile&lt;/code&gt; があります。具体的には、コンパイルが失敗したかどうかにかかわらずです。</target>
        </trans-unit>
        <trans-unit id="d99d4db11281b54a6773aae14f2c6331f47f456e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hsc2hs&lt;/code&gt; takes input files as arguments, and flags that modify its behavior:</source>
          <target state="translated">&lt;code&gt;hsc2hs&lt;/code&gt; は入力ファイルを引数として取り、その動作を変更するフラグを使用します。</target>
        </trans-unit>
        <trans-unit id="3c128fada72033616aaef08247531117855db892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hsig&lt;/code&gt; files are written in a variant of Haskell similar to &lt;code&gt;hs-boot&lt;/code&gt; files, but with some slight changes:</source>
          <target state="translated">&lt;code&gt;hsig&lt;/code&gt; ファイルは &lt;code&gt;hs-boot&lt;/code&gt; ファイルに似たHaskellの変種で書かれていますが、いくつかのわずかな変更があります：</target>
        </trans-unit>
        <trans-unit id="fffb7b4d60dfc9369148b986d5c58f8a5d0a5726" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt;: the index type of the array (should be an instance of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; ：配列のインデックスタイプ（ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; のインスタンスである必要があります）</target>
        </trans-unit>
        <trans-unit id="b7aad8e1ace6210c4105af3b2907a570de93e87e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt;: the index type of the array (should be an instance of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; ：配列のインデックスタイプ（ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; のインスタンスである必要があります）</target>
        </trans-unit>
        <trans-unit id="e231460d6356836f70df627ffacf880779361422" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt;: the index type of the array (should be an instance of &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; ：配列のインデックスタイプ（ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; のインスタンスである必要があります）</target>
        </trans-unit>
        <trans-unit id="db798c17f327bae423b0e022cc72a3fe7bfec9cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt;: the index type of the array (should be an instance of &lt;code&gt;&lt;a href=&quot;data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; ：配列のインデックスタイプ（ &lt;code&gt;&lt;a href=&quot;data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; のインスタンスである必要があります）</target>
        </trans-unit>
        <trans-unit id="180d4e808183a0bb9849f66107190e0a00a9ef78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt;: the index type of the array (should be an instance of &lt;code&gt;&lt;a href=&quot;ghc-arr#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; ：配列のインデックスタイプ（ &lt;code&gt;&lt;a href=&quot;ghc-arr#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; のインスタンスである必要があります）</target>
        </trans-unit>
        <trans-unit id="617a65d4ddc0f8fa29d5630aad7e1b8a5082dbf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt;: the index type of the array (should be an instance of &lt;code&gt;Ix&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; ：配列のインデックスタイプ（ &lt;code&gt;Ix&lt;/code&gt; のインスタンスである必要があります）</target>
        </trans-unit>
        <trans-unit id="5f54123d67fec07d114ce05638f1a7715e824f55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;installHandler int handler iset&lt;/code&gt; calls &lt;code&gt;sigaction&lt;/code&gt; to install an interrupt handler for signal &lt;code&gt;int&lt;/code&gt;. If &lt;code&gt;handler&lt;/code&gt; is &lt;code&gt;Default&lt;/code&gt;, &lt;code&gt;SIG_DFL&lt;/code&gt; is installed; if &lt;code&gt;handler&lt;/code&gt; is &lt;code&gt;Ignore&lt;/code&gt;, &lt;code&gt;SIG_IGN&lt;/code&gt; is installed; if &lt;code&gt;handler&lt;/code&gt; is &lt;code&gt;Catch action&lt;/code&gt;, a handler is installed which will invoke &lt;code&gt;action&lt;/code&gt; in a new thread when (or shortly after) the signal is received. If &lt;code&gt;iset&lt;/code&gt; is &lt;code&gt;Just s&lt;/code&gt;, then the &lt;code&gt;sa_mask&lt;/code&gt; of the &lt;code&gt;sigaction&lt;/code&gt; structure is set to &lt;code&gt;s&lt;/code&gt;; otherwise it is cleared. The previously installed signal handler for &lt;code&gt;int&lt;/code&gt; is returned</source>
          <target state="translated">&lt;code&gt;installHandler int handler iset&lt;/code&gt; は &lt;code&gt;sigaction&lt;/code&gt; を呼び出して、シグナル &lt;code&gt;int&lt;/code&gt; の割り込みハンドラをインストールします。 &lt;code&gt;handler&lt;/code&gt; が &lt;code&gt;Default&lt;/code&gt; の場合、 &lt;code&gt;SIG_DFL&lt;/code&gt; がインストールされます。 &lt;code&gt;handler&lt;/code&gt; が &lt;code&gt;Ignore&lt;/code&gt; の場合、 &lt;code&gt;SIG_IGN&lt;/code&gt; がインストールされます。 &lt;code&gt;handler&lt;/code&gt; が &lt;code&gt;Catch action&lt;/code&gt; の場合、シグナルが受信されたとき（またはその直後）に新しいスレッドで &lt;code&gt;action&lt;/code&gt; を呼び出すハンドラーがインストールされます。場合 &lt;code&gt;iset&lt;/code&gt; ある &lt;code&gt;Just s&lt;/code&gt; 、そして &lt;code&gt;sa_mask&lt;/code&gt; の &lt;code&gt;sigaction&lt;/code&gt; 構造がに設定されている &lt;code&gt;s&lt;/code&gt; ; それ以外の場合はクリアされます。以前にインストールされた &lt;code&gt;int&lt;/code&gt; のシグナルハンドラが返されます</target>
        </trans-unit>
        <trans-unit id="2735fff850fb0ce80ad1b2ea06ae65280146117c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;interruptible&lt;/code&gt; behaves exactly as &lt;code&gt;safe&lt;/code&gt;, except that when a &lt;code&gt;throwTo&lt;/code&gt; is directed at a thread in an interruptible foreign call, an OS-specific mechanism will be used to attempt to cause the foreign call to return:</source>
          <target state="translated">&lt;code&gt;interruptible&lt;/code&gt; は、 &lt;code&gt;throwTo&lt;/code&gt; が割り込み可能な外部呼び出しのスレッドに向けられたときに、OS固有のメカニズムを使用して外部呼び出しを返そうとする場合を除いて、まったく同じように動作し &lt;code&gt;safe&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2139518b81e5d97293508153cbed8ebe724f4f8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iserv-proxy&lt;/code&gt; needs to be built on the build machine by the build compiler.</source>
          <target state="translated">&lt;code&gt;iserv-proxy&lt;/code&gt; は、ビルドコンパイラによってビルドマシン上にビルドされる必要があります。</target>
        </trans-unit>
        <trans-unit id="27b48731a8a7e22b2dcac8d4798c86a629568e47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iterate&lt;/code&gt;, &lt;code&gt;repeat&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;iterate&lt;/code&gt; 、 &lt;code&gt;repeat&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aace12ecce1e8eac0d6581a430a3d2a3111f1eed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;j&lt;/code&gt;&amp;lsquo;s signature is accepted despite its mixture of implicit and explicit quantification. As long as a &lt;code&gt;forall&lt;/code&gt; is not an outermost one, it is fine to use it among implicitly bound type variables.</source>
          <target state="translated">&lt;code&gt;j&lt;/code&gt; の署名は、暗黙的および明示的な定量化が混在しているにもかかわらず受け入れられます。 &lt;code&gt;forall&lt;/code&gt; が最も外側のものでない限り、暗黙的にバインドされた型変数間で使用することは問題ありません。</target>
        </trans-unit>
        <trans-unit id="cc3895b019e0a39f76ec6015b7f84c618a1850f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;k&lt;/code&gt; is chosen so that &lt;code&gt;C t1..tj (T v1...vk)&lt;/code&gt; is well-kinded. (Or, in the case of a &lt;code&gt;data instance&lt;/code&gt;, so that &lt;code&gt;C t1..tj (T s1..sk)&lt;/code&gt; is well kinded.)</source>
          <target state="translated">&lt;code&gt;k&lt;/code&gt; は、 &lt;code&gt;C t1..tj (T v1...vk)&lt;/code&gt; が親切になるように選択されます。（または、の場合に &lt;code&gt;data instance&lt;/code&gt; 、その結果、 &lt;code&gt;C t1..tj (T s1..sk)&lt;/code&gt; 十分kindedされます。）</target>
        </trans-unit>
        <trans-unit id="622e7af3e93d01a6d8d5dc33d97ddfe36bec9e82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;k&lt;/code&gt; must appear explicitly in the kind of &lt;em&gt;some&lt;/em&gt; type variable in that declaration.</source>
          <target state="translated">&lt;code&gt;k&lt;/code&gt; は、その宣言の&lt;em&gt;ある&lt;/em&gt;型変数の種類に明示的に出現する必要があります。</target>
        </trans-unit>
        <trans-unit id="0b18456512087e15557f2d479e871ced5f2fb18f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;k&lt;/code&gt;&amp;lsquo;s signature is accepted because the outermost parentheses imply that the &lt;code&gt;forall&lt;/code&gt; is not an outermost &lt;code&gt;forall&lt;/code&gt;. The &lt;code&gt;forall&lt;/code&gt;-or-nothing rule is one of the few places in GHC where the presence or absence of parentheses can be semantically significant!</source>
          <target state="translated">&lt;code&gt;k&lt;/code&gt; の署名が受け入れられるのは、最も外側の括弧が、 &lt;code&gt;forall&lt;/code&gt; が最も外側の &lt;code&gt;forall&lt;/code&gt; ではないことを意味するためです。 &lt;code&gt;forall&lt;/code&gt; は-or-何もルールは、括弧の有無を意味的に大きくなる可能性がGHCでも数少ない場所の一つです！</target>
        </trans-unit>
        <trans-unit id="29d303bf07ef6fd38f12c9c9c2623f4ab1cdfe97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;l&lt;/code&gt; the object linker</source>
          <target state="translated">&lt;code&gt;l&lt;/code&gt; オブジェクトリンカー</target>
        </trans-unit>
        <trans-unit id="283469c10fca69b6183207317811536889b814a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lexeme p&lt;/code&gt; first applies parser &lt;code&gt;p&lt;/code&gt; and then the &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:whiteSpace&quot;&gt;whiteSpace&lt;/a&gt;&lt;/code&gt; parser, returning the value of &lt;code&gt;p&lt;/code&gt;. Every lexical token (lexeme) is defined using &lt;code&gt;lexeme&lt;/code&gt;, this way every parse starts at a point without white space. Parsers that use &lt;code&gt;lexeme&lt;/code&gt; are called &lt;em&gt;lexeme&lt;/em&gt; parsers in this document.</source>
          <target state="translated">&lt;code&gt;lexeme p&lt;/code&gt; は最初にパーサー &lt;code&gt;p&lt;/code&gt; を適用し、次に &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:whiteSpace&quot;&gt;whiteSpace&lt;/a&gt;&lt;/code&gt; パーサーを適用して、 &lt;code&gt;p&lt;/code&gt; の値を返します。すべての字句トークン（字句）を使用して定義された &lt;code&gt;lexeme&lt;/code&gt; すべての解析開始は、空白なしの時点で、この方法を。使用パーサ &lt;code&gt;lexeme&lt;/code&gt; 呼ばれている&lt;em&gt;語彙素&lt;/em&gt;この文書のパーサーを。</target>
        </trans-unit>
        <trans-unit id="ab75ab10eb3e1a67279f20cdfe9db09933d97808" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lexeme p&lt;/code&gt; first applies parser &lt;code&gt;p&lt;/code&gt; and then the &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:whiteSpace&quot;&gt;whiteSpace&lt;/a&gt;&lt;/code&gt; parser, returning the value of &lt;code&gt;p&lt;/code&gt;. Every lexical token (lexeme) is defined using &lt;code&gt;lexeme&lt;/code&gt;, this way every parse starts at a point without white space. Parsers that use &lt;code&gt;lexeme&lt;/code&gt; are called &lt;em&gt;lexeme&lt;/em&gt; parsers in this document.</source>
          <target state="translated">&lt;code&gt;lexeme p&lt;/code&gt; は最初にパーサー &lt;code&gt;p&lt;/code&gt; を適用し、次に &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:whiteSpace&quot;&gt;whiteSpace&lt;/a&gt;&lt;/code&gt; パーサーを適用して、 &lt;code&gt;p&lt;/code&gt; の値を返します。すべての字句トークン（字句）を使用して定義された &lt;code&gt;lexeme&lt;/code&gt; すべての解析開始は、空白なしの時点で、この方法を。使用パーサ &lt;code&gt;lexeme&lt;/code&gt; 呼ばれている&lt;em&gt;語彙素&lt;/em&gt;この文書のパーサーを。</target>
        </trans-unit>
        <trans-unit id="53d24678ad2c8b5597e9f0ac0655b8161c2e0827" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lookAhead p&lt;/code&gt; parses &lt;code&gt;p&lt;/code&gt; without consuming any input.</source>
          <target state="translated">&lt;code&gt;lookAhead p&lt;/code&gt; 解析し &lt;code&gt;p&lt;/code&gt; 任意の入力を消費せず。</target>
        </trans-unit>
        <trans-unit id="be8260c972c6f5f473130a0d9d8505bde17b521f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m&lt;/code&gt; - The inner monad.</source>
          <target state="translated">&lt;code&gt;m&lt;/code&gt; -内部モナド。</target>
        </trans-unit>
        <trans-unit id="2469e47161db63f9190e78307eaf5fe489c6f0fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m&lt;/code&gt; does not introduce one of the variables, &lt;code&gt;b&lt;/code&gt;, and thus is rejected.</source>
          <target state="translated">&lt;code&gt;m&lt;/code&gt; は変数 &lt;code&gt;b&lt;/code&gt; の 1つを導入しないため、拒否されます。</target>
        </trans-unit>
        <trans-unit id="0ccdfdf9e6a52d5ec89e3c0b202b8b38f2042c49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;many p&lt;/code&gt; applies the parser &lt;code&gt;p&lt;/code&gt;&lt;em&gt;zero&lt;/em&gt; or more times. Returns a list of the returned values of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;many p&lt;/code&gt; は、パーサー &lt;code&gt;p&lt;/code&gt; を&lt;em&gt;ゼロ&lt;/em&gt;回以上適用します。 &lt;code&gt;p&lt;/code&gt; の戻り値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="c8386ca93afe24efb128ad974653e26fa09db4a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;many1 p&lt;/code&gt; applies the parser &lt;code&gt;p&lt;/code&gt;&lt;em&gt;one&lt;/em&gt; or more times. Returns a list of the returned values of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;many1 p&lt;/code&gt; は、パーサー &lt;code&gt;p&lt;/code&gt; を&lt;em&gt;1&lt;/em&gt;回以上適用します。 &lt;code&gt;p&lt;/code&gt; の戻り値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="532542dcaa9192e88329138dac2196c78bce7c41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;manyTill p end&lt;/code&gt; applies parser &lt;code&gt;p&lt;/code&gt;&lt;em&gt;zero&lt;/em&gt; or more times until parser &lt;code&gt;end&lt;/code&gt; succeeds. Returns the list of values returned by &lt;code&gt;p&lt;/code&gt;. This parser can be used to scan comments:</source>
          <target state="translated">&lt;code&gt;manyTill p end&lt;/code&gt; は、パーサー &lt;code&gt;end&lt;/code&gt; が成功するまで、パーサー &lt;code&gt;p&lt;/code&gt; を&lt;em&gt;0&lt;/em&gt;回以上適用します。 &lt;code&gt;p&lt;/code&gt; によって返される値のリストを返します。このパーサーは、コメントのスキャンに使用できます。</target>
        </trans-unit>
        <trans-unit id="cd84809de445a13b8fa6c8bf6e31f5e5e33ad2ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;manyTill p end&lt;/code&gt; parses zero or more occurrences of &lt;code&gt;p&lt;/code&gt;, until &lt;code&gt;end&lt;/code&gt; succeeds. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;manyTill p end&lt;/code&gt; は、 &lt;code&gt;end&lt;/code&gt; が成功するまで、 &lt;code&gt;p&lt;/code&gt; の 0回以上の出現を解析します。 &lt;code&gt;p&lt;/code&gt; が返す値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="9e00baf13c159c42b130a388fa7c68571d949d3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt;&lt;em&gt;XXX&lt;/em&gt;&lt;code&gt;T t . &lt;a href=&quot;control-monad-trans-class#v:lift&quot;&gt;lift&lt;/a&gt; = &lt;a href=&quot;control-monad-trans-class#v:lift&quot;&gt;lift&lt;/a&gt; . t&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; &lt;em&gt;XXX &lt;/em&gt; &lt;code&gt;T t . &lt;a href=&quot;control-monad-trans-class#v:lift&quot;&gt;lift&lt;/a&gt; = &lt;a href=&quot;control-monad-trans-class#v:lift&quot;&gt;lift&lt;/a&gt; . t&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ff044cde3ea44699eaa1733d0c06230bf5e937bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mappend&lt;/code&gt; takes the longer of two lifetimes.</source>
          <target state="translated">&lt;code&gt;mappend&lt;/code&gt; は2つのライフタイムのうち長い方をとります。</target>
        </trans-unit>
        <trans-unit id="cb09e948d69668b5b23f295b4403b0940d6ca175" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max x y == if x &amp;gt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;max x y == if x &amp;gt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2ee5f7e457014efc55712b28856e1e8c43cc3a2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max x y == if x &amp;gt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;max x y == if x &amp;gt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f2d6f36a3f246953bf407b238d5d4b4956e89839" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mergeA&lt;/code&gt; will first &quot;align&quot; these maps by key:</source>
          <target state="translated">&lt;code&gt;mergeA&lt;/code&gt; は、まずこれらのマップをキーで「位置合わせ」します。</target>
        </trans-unit>
        <trans-unit id="07564f3f6292128b7fb23deab444d624083a69a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;min x y == if x &amp;lt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;min x y == if x &amp;lt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5baaa477d2b0357e85c24cc65b9a0c8db647b2d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;min x y == if x &amp;lt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;min x y == if x &amp;lt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8cc58927959aeb9dab3dc72ab465ca570a504b06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mkWeak# k v finalizer s&lt;/code&gt; creates a weak reference to value &lt;code&gt;k&lt;/code&gt;, with an associated reference to some value &lt;code&gt;v&lt;/code&gt;. If &lt;code&gt;k&lt;/code&gt; is still alive then &lt;code&gt;v&lt;/code&gt; can be retrieved using &lt;code&gt;deRefWeak#&lt;/code&gt;. Note that the type of &lt;code&gt;k&lt;/code&gt; must be represented by a pointer (i.e. of kind &lt;code&gt;TYPE 'LiftedRep&lt;/code&gt; or &lt;code&gt;TYPE 'UnliftedRep&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;mkWeak# k v finalizer s&lt;/code&gt; は、値 &lt;code&gt;k&lt;/code&gt; への弱参照を作成し、関連付けられたある値 &lt;code&gt;v&lt;/code&gt; への参照を作成します。場合は &lt;code&gt;k&lt;/code&gt; まだ生きているそして &lt;code&gt;v&lt;/code&gt; が使用して取得することができ &lt;code&gt;deRefWeak#&lt;/code&gt; を。 &lt;code&gt;k&lt;/code&gt; のタイプは、ポインター（つまり、 &lt;code&gt;TYPE 'LiftedRep&lt;/code&gt; または &lt;code&gt;TYPE 'UnliftedRep&lt;/code&gt; ）で表す必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f980f294fcd0aaa83bf0434a1d2798b56e011816" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;modifyState f&lt;/code&gt; applies function &lt;code&gt;f&lt;/code&gt; to the user state. Suppose that we want to count identifiers in a source, we could use the user state as:</source>
          <target state="translated">&lt;code&gt;modifyState f&lt;/code&gt; は、関数 &lt;code&gt;f&lt;/code&gt; をユーザー状態に適用します。ソース内の識別子をカウントしたい場合、ユーザー状態を次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="e460b94b8a438c08063c41e5f7e745a074b16b31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt; could be a Haskell source filename with or without the extension. If for some reason the filename starts with a &lt;code&gt;-&lt;/code&gt; you can use a second &lt;code&gt;--&lt;/code&gt; to indicate the end of flags. Anything following a second &lt;code&gt;--&lt;/code&gt; will be considered a program file or module name followed by its arguments. For example:</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; は、Haskellのソースファイル名で、拡張子のあるものとないものがあります。いくつかの理由であれば、ファイル名の開始 &lt;code&gt;-&lt;/code&gt; あなたは、第二を使用することができます &lt;code&gt;--&lt;/code&gt; フラグの終わりを示します。2番目以降のすべて &lt;code&gt;--&lt;/code&gt; プログラムファイルまたはモジュール名と見なされ、その後に引数が続きます。例えば：</target>
        </trans-unit>
        <trans-unit id="42df5d70d0c8653f3f8af294a83e6694b808b964" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt; &amp;mdash; non-moving garbage collector (see &lt;a href=&quot;#rts-flag---nonmoving-gc&quot;&gt;&lt;code&gt;--nonmoving-gc&lt;/code&gt;&lt;/a&gt;) events including start and end of the concurrent mark and census information to characterise heap fragmentation. Disabled by default.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; &amp;mdash;ヒープの断片化を特徴付ける同時マークおよび国勢調査情報の開始と終了を含む非移動ガベージコレクター（&lt;a href=&quot;#rts-flag---nonmoving-gc&quot;&gt; &lt;code&gt;--nonmoving-gc&lt;/code&gt; を&lt;/a&gt;参照）イベント。デフォルトでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="856fcb98eadbb78f6ce119264b935b6e706ee599" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt; is an integral number with the same sign as &lt;code&gt;x&lt;/code&gt;; and</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; は &lt;code&gt;x&lt;/code&gt; と同じ符号を持つ整数です。そして</target>
        </trans-unit>
        <trans-unit id="33d513bf305b7a102b9a18dbc0caa74d78da4beb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;needle&lt;/code&gt; to search for</source>
          <target state="translated">&lt;code&gt;needle&lt;/code&gt; 検索する針</target>
        </trans-unit>
        <trans-unit id="ff8dbf7443db4c2f2acbe71b904cddb2944e1a8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;needle&lt;/code&gt; to search for. If this string is empty, an error will occur.</source>
          <target state="translated">&lt;code&gt;needle&lt;/code&gt; 検索する針。この文字列が空の場合、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="3617913f70a336eee917e86d8a292b8fdc107490" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newBCO# instrs lits ptrs arity bitmap&lt;/code&gt; creates a new bytecode object. The resulting object encodes a function of the given arity with the instructions encoded in &lt;code&gt;instrs&lt;/code&gt;, and a static reference table usage bitmap given by &lt;code&gt;bitmap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;newBCO# instrs lits ptrs arity bitmap&lt;/code&gt; は新しいバイトコードオブジェクトを作成します。得られた目的は、で符号化命令で指定されたアリティの機能をコード &lt;code&gt;instrs&lt;/code&gt; 、によって与えられた静的参照テーブルの使用ビットマップ &lt;code&gt;bitmap&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5d5d69a0b7d37427bfa59138ce5d6ff629f5c0f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newtype: Use&lt;/code&gt;&lt;a href=&quot;#extension-GeneralizedNewtypeDeriving&quot;&gt;&lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;newtype: Use&lt;/code&gt; &lt;a href=&quot;#extension-GeneralizedNewtypeDeriving&quot;&gt; &lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt; を&lt;/a&gt;使用します</target>
        </trans-unit>
        <trans-unit id="1054f6a3390f183ac8d5b6950d80a3e94a1643a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newtype: Use&lt;/code&gt;&lt;a href=&quot;newtype_deriving#extension-GeneralizedNewtypeDeriving&quot;&gt;&lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;newtype: Use&lt;/code&gt;&lt;a href=&quot;newtype_deriving#extension-GeneralizedNewtypeDeriving&quot;&gt;&lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5c6ce5e75313c95a77bc3bab8bfba53e26446a4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nodeFromVertex :: Vertex -&amp;gt; (node, key, [key])&lt;/code&gt; returns the node associated with the given 0-based &lt;code&gt;Int&lt;/code&gt; vertex; see &lt;em&gt;warning&lt;/em&gt; below.</source>
          <target state="translated">&lt;code&gt;nodeFromVertex :: Vertex -&amp;gt; (node, key, [key])&lt;/code&gt; は、指定された0ベースの &lt;code&gt;Int&lt;/code&gt; 頂点に関連付けられたノードを返します。以下の&lt;em&gt;警告を&lt;/em&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c8e41909ff90e256d7c446570c47a96250d4299b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notFollowedBy p&lt;/code&gt; only succeeds when parser &lt;code&gt;p&lt;/code&gt; fails. This parser does not consume any input. This parser can be used to implement the 'longest match' rule. For example, when recognizing keywords (for example &lt;code&gt;let&lt;/code&gt;), we want to make sure that a keyword is not followed by a legal identifier character, in which case the keyword is actually an identifier (for example &lt;code&gt;lets&lt;/code&gt;). We can program this behaviour as follows:</source>
          <target state="translated">&lt;code&gt;notFollowedBy p&lt;/code&gt; は、パーサー &lt;code&gt;p&lt;/code&gt; が失敗した場合にのみ成功します。このパーサーは入力を消費しません。このパーサーを使用して、「最長一致」ルールを実装できます。たとえば、キーワード（たとえば &lt;code&gt;let&lt;/code&gt; ）を認識する場合、キーワードの後に​​有効な識別子文字が続かないようにする必要があり &lt;code&gt;lets&lt;/code&gt; 。その場合、キーワードは実際には識別子です（たとえばlet）。この動作は次のようにプログラムできます。</target>
        </trans-unit>
        <trans-unit id="1a5fe52c557ae22b302bd14a1e2519394bd13a06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nubInt&lt;/code&gt; is strict in the elements of the list.</source>
          <target state="translated">&lt;code&gt;nubInt&lt;/code&gt; はリストの要素で厳密です。</target>
        </trans-unit>
        <trans-unit id="3f23a458f31f92b124a38b0e41aaac962127e60e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nubIntOn&lt;/code&gt; is strict in the values of the function applied to the elements of the list.</source>
          <target state="translated">&lt;code&gt;nubIntOn&lt;/code&gt; は、リストの要素に適用される関数の値が厳密です。</target>
        </trans-unit>
        <trans-unit id="5d4b8287c8c8882e31b3f8d2880cdfeab11fc132" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nubOrd&lt;/code&gt; is strict in the elements of the list.</source>
          <target state="translated">&lt;code&gt;nubOrd&lt;/code&gt; はリストの要素で厳密です。</target>
        </trans-unit>
        <trans-unit id="686732935ff85a620a7bd6262da47b1e3811624f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nubOrdOn&lt;/code&gt; is strict in the values of the function applied to the elements of the list.</source>
          <target state="translated">&lt;code&gt;nubOrdOn&lt;/code&gt; は、リストの要素に適用される関数の値が厳密です。</target>
        </trans-unit>
        <trans-unit id="7367896f7681bf47f880f32a2ceb33950d3c01be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;oneOf cs&lt;/code&gt; succeeds if the current character is in the supplied list of characters &lt;code&gt;cs&lt;/code&gt;. Returns the parsed character. See also &lt;code&gt;&lt;a href=&quot;text-parsec-char#v:satisfy&quot;&gt;satisfy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;oneOf cs&lt;/code&gt; 現在の文字が指定された文字 &lt;code&gt;cs&lt;/code&gt; のリストにある場合、oneOf csは成功します。解析された文字を返します。参照してください &lt;code&gt;&lt;a href=&quot;text-parsec-char#v:satisfy&quot;&gt;satisfy&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2dba7dbf8a8ed84fe2b86840692ea4684e4d77da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;oneOf cs&lt;/code&gt; succeeds if the current character is in the supplied list of characters &lt;code&gt;cs&lt;/code&gt;. Returns the parsed character. See also &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-char#v:satisfy&quot;&gt;satisfy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;oneOf cs&lt;/code&gt; 現在の文字が指定された文字 &lt;code&gt;cs&lt;/code&gt; のリストにある場合、oneOf csは成功します。解析された文字を返します。参照してください &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-char#v:satisfy&quot;&gt;satisfy&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a0a04efca569dfa9fbbe7d89cb7c4dd3f73aa983" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;openDirStream dir&lt;/code&gt; calls &lt;code&gt;opendir&lt;/code&gt; to obtain a directory stream for &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;openDirStream dir&lt;/code&gt; は &lt;code&gt;opendir&lt;/code&gt; を呼び出して、 &lt;code&gt;dir&lt;/code&gt; のディレクトリストリームを取得します。</target>
        </trans-unit>
        <trans-unit id="192a654c09f0df329ab2519a071a25e8eab05de9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;openPseudoTerminal&lt;/code&gt; creates a pseudoterminal (pty) pair, and returns the newly created pair as a (&lt;code&gt;master&lt;/code&gt;, &lt;code&gt;slave&lt;/code&gt;) tuple.</source>
          <target state="translated">&lt;code&gt;openPseudoTerminal&lt;/code&gt; は疑似端末（pty）ペアを作成し、新しく作成されたペアを（ &lt;code&gt;master&lt;/code&gt; 、 &lt;code&gt;slave&lt;/code&gt; ）タプルとして返します。</target>
        </trans-unit>
        <trans-unit id="bace0c54f31a15f5bddbe9ad572bb21e32508f41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;option x p&lt;/code&gt; tries to apply parser &lt;code&gt;p&lt;/code&gt;. If &lt;code&gt;p&lt;/code&gt; fails without consuming input, it returns the value &lt;code&gt;x&lt;/code&gt;, otherwise the value returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;option x p&lt;/code&gt; は、パーサー &lt;code&gt;p&lt;/code&gt; を適用しようとします。入力を消費せずに &lt;code&gt;p&lt;/code&gt; が失敗した場合は、値 &lt;code&gt;x&lt;/code&gt; を返します。それ以外の場合は、 &lt;code&gt;p&lt;/code&gt; によって返された値を返します。</target>
        </trans-unit>
        <trans-unit id="e4ebf5c81299360ece1c5fcdf4eefbb30ff2d4c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;option x p&lt;/code&gt; will either parse &lt;code&gt;p&lt;/code&gt; or return &lt;code&gt;x&lt;/code&gt; without consuming any input.</source>
          <target state="translated">&lt;code&gt;option x p&lt;/code&gt; は、 &lt;code&gt;p&lt;/code&gt; を解析するか、入力を消費せずに &lt;code&gt;x&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="28b4086a811e0da08b201496f5d39d65225aa8a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optionMaybe p&lt;/code&gt; tries to apply parser &lt;code&gt;p&lt;/code&gt;. If &lt;code&gt;p&lt;/code&gt; fails without consuming input, it return &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, otherwise it returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the value returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;optionMaybe p&lt;/code&gt; がパーサー &lt;code&gt;p&lt;/code&gt; を適用しようとするかもしれません。入力を消費せずに &lt;code&gt;p&lt;/code&gt; が失敗した場合は、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を返します。それ以外の場合は、 &lt;code&gt;p&lt;/code&gt; によって返された値 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="b61bd1c4a189a12ad0e625a4e5613f6f3fd49a73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optionMaybe p&lt;/code&gt; tries to apply parser &lt;code&gt;p&lt;/code&gt;. If &lt;code&gt;p&lt;/code&gt; fails without consuming input, it return &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, otherwise it returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the value returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;optionMaybe p&lt;/code&gt; はパーサー &lt;code&gt;p&lt;/code&gt; を適用しようとします。場合は &lt;code&gt;p&lt;/code&gt; が入力を消費せずに失敗し、それが返す &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 、そうでない場合は返す &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; で返された値 &lt;code&gt;p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="366666007aa469b82cc4267824a9b6540b6166f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optionMaybe p&lt;/code&gt; tries to apply parser &lt;code&gt;p&lt;/code&gt;. If &lt;code&gt;p&lt;/code&gt; fails without consuming input, it return &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, otherwise it returns &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the value returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;optionMaybe p&lt;/code&gt; はパーサー &lt;code&gt;p&lt;/code&gt; を適用しようとします。場合は &lt;code&gt;p&lt;/code&gt; が入力を消費せずに失敗し、それが返す &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 、そうでない場合は返す &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; で返された値 &lt;code&gt;p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="56f4b419c9e52aaebf3661bb8fc5fd960b9dbbbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optional p&lt;/code&gt; optionally parses &lt;code&gt;p&lt;/code&gt; and always returns &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;optional p&lt;/code&gt; 任意に解析し &lt;code&gt;p&lt;/code&gt; と常に戻ります &lt;code&gt;()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="52a9fa7e27cef29971c48bc00d735454128fbbd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optional p&lt;/code&gt; tries to apply parser &lt;code&gt;p&lt;/code&gt;. It will parse &lt;code&gt;p&lt;/code&gt; or nothing. It only fails if &lt;code&gt;p&lt;/code&gt; fails after consuming input. It discards the result of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;optional p&lt;/code&gt; は、パーサー &lt;code&gt;p&lt;/code&gt; を適用しようとします。 &lt;code&gt;p&lt;/code&gt; を解析するか、何も解析しません。入力を消費した後に &lt;code&gt;p&lt;/code&gt; が失敗した場合にのみ失敗します。 &lt;code&gt;p&lt;/code&gt; の結果を破棄します。</target>
        </trans-unit>
        <trans-unit id="724942ba218da78a2b98ad86431785fc08972c22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;p&lt;/code&gt; &amp;mdash; parallel sparks (sampled). Enabled by default.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; &amp;mdash;並列スパーク（サンプリング）。デフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="e1500ec5b52d9695092d929dcc0d64f327ff5fdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parse p filePath input&lt;/code&gt; runs a parser &lt;code&gt;p&lt;/code&gt; over Identity without user state. The &lt;code&gt;filePath&lt;/code&gt; is only used in error messages and may be the empty string. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parse p filePath input&lt;/code&gt; は、ユーザー状態なしでパーサー &lt;code&gt;p&lt;/code&gt; をIdentityで実行します。 &lt;code&gt;filePath&lt;/code&gt; には、エラーメッセージだけで使用され、空の文字列かもしれません。 &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; の値（ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="5d2afcdb91582af684549b0b5b315b8b27b776e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parse p filePath input&lt;/code&gt; runs a parser &lt;code&gt;p&lt;/code&gt; over Identity without user state. The &lt;code&gt;filePath&lt;/code&gt; is only used in error messages and may be the empty string. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parse p filePath input&lt;/code&gt; は、ユーザー状態なしでIdentityに対してパーサー &lt;code&gt;p&lt;/code&gt; を実行します。 &lt;code&gt;filePath&lt;/code&gt; には、エラーメッセージだけで使用され、空の文字列かもしれません。 &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）の値を返します。</target>
        </trans-unit>
        <trans-unit id="86ca391f7803987dc7a284d13e0e25246075be39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parse p filePath input&lt;/code&gt; runs a parser &lt;code&gt;p&lt;/code&gt; over Identity without user state. The &lt;code&gt;filePath&lt;/code&gt; is only used in error messages and may be the empty string. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parse p filePath input&lt;/code&gt; は、ユーザー状態なしでIdentityに対してパーサー &lt;code&gt;p&lt;/code&gt; を実行します。 &lt;code&gt;filePath&lt;/code&gt; には、エラーメッセージだけで使用され、空の文字列かもしれません。 &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）の値を返します。</target>
        </trans-unit>
        <trans-unit id="5054021e9af465d95264d1946eaa05a51db43fb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parse p filePath input&lt;/code&gt; runs a parser &lt;code&gt;p&lt;/code&gt; over Identity without user state. The &lt;code&gt;filePath&lt;/code&gt; is only used in error messages and may be the empty string. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parse p filePath input&lt;/code&gt; は、ユーザー状態なしでパーサー &lt;code&gt;p&lt;/code&gt; をIdentityで実行します。 &lt;code&gt;filePath&lt;/code&gt; には、エラーメッセージだけで使用され、空の文字列かもしれません。 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; の値（ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="07ad6dff7f3b300c74accf61e4a0a68f323e23ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parse p filePath input&lt;/code&gt; runs a parser &lt;code&gt;p&lt;/code&gt; over Identity without user state. The &lt;code&gt;filePath&lt;/code&gt; is only used in error messages and may be the empty string. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parse p filePath input&lt;/code&gt; は、ユーザー状態なしでIdentityに対してパーサー &lt;code&gt;p&lt;/code&gt; を実行します。 &lt;code&gt;filePath&lt;/code&gt; には、エラーメッセージだけで使用され、空の文字列かもしれません。 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）の値を返します。</target>
        </trans-unit>
        <trans-unit id="34943fa1da7fa6b76e275c27dd0da06bfe932bc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parse p filePath input&lt;/code&gt; runs a parser &lt;code&gt;p&lt;/code&gt; over Identity without user state. The &lt;code&gt;filePath&lt;/code&gt; is only used in error messages and may be the empty string. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parse p filePath input&lt;/code&gt; は、ユーザー状態なしでIdentityに対してパーサー &lt;code&gt;p&lt;/code&gt; を実行します。 &lt;code&gt;filePath&lt;/code&gt; には、エラーメッセージだけで使用され、空の文字列かもしれません。 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）の値を返します。</target>
        </trans-unit>
        <trans-unit id="a0116427892802de970e9caf1b430f5b1e1556ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a lazy bytestring parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;bytestring-lazy-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; は、 &lt;code&gt;filePath&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;bytestring-lazy-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; から読み取った入力に対して遅延バイト文字列パーサー &lt;code&gt;p&lt;/code&gt; を実行します。 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; の値（ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="d1d5cdfb4505652b21669dced167c2669cab0606" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a lazy bytestring parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;bytestring-lazy-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; は、 &lt;code&gt;filePath&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;bytestring-lazy-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; から読み取られた入力に対して遅延バイト文字列パーサー &lt;code&gt;p&lt;/code&gt; を実行します。 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）の値を返します。</target>
        </trans-unit>
        <trans-unit id="dc72eb70a488f4845d5aa95bcf6548d83f90d907" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a lazy bytestring parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;bytestring-lazy-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; は、 &lt;code&gt;filePath&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;bytestring-lazy-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; から読み取られた入力に対して遅延バイト文字列パーサー &lt;code&gt;p&lt;/code&gt; を実行します。 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）の値を返します。</target>
        </trans-unit>
        <trans-unit id="3b0af969a2929691936a95f88bc3a6ec38adc318" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a strict bytestring parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;bytestring-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; は、 &lt;code&gt;filePath&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;bytestring-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; から読み取った入力 &lt;code&gt;p&lt;/code&gt; 、厳密なバイト文字列パーサーpを実行します。 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; の値（ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="7c92c41179d84bebc475d2609a463b9b7af88b5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a strict bytestring parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;bytestring-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; は、 &lt;code&gt;filePath&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;bytestring-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; から読み取られた入力に対して厳密なバイト文字列パーサー &lt;code&gt;p&lt;/code&gt; を実行します。 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）の値を返します。</target>
        </trans-unit>
        <trans-unit id="1053691afd5ff650051b723121d045bcb0fd66fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a strict bytestring parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;bytestring-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; は、 &lt;code&gt;filePath&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;bytestring-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; から読み取られた入力に対して厳密なバイト文字列パーサー &lt;code&gt;p&lt;/code&gt; を実行します。 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）の値を返します。</target>
        </trans-unit>
        <trans-unit id="9274ce751d68bc092fadbf25016576d667e7a055" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a strict text parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../text-1.2.3.2/data-text-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; は、 &lt;code&gt;filePath&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../text-1.2.3.2/data-text-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; から読み取られた入力に対して厳密なテキストパーサー &lt;code&gt;p&lt;/code&gt; を実行します。 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）の値を返します。</target>
        </trans-unit>
        <trans-unit id="b56993adb3ddf07cc416f8812b76c888415e3090" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a strict text parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../text-1.2.3.2/data-text-lazy-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; は、 &lt;code&gt;filePath&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../text-1.2.3.2/data-text-lazy-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; から読み取られた入力に対して厳密なテキストパーサー &lt;code&gt;p&lt;/code&gt; を実行します。 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）の値を返します。</target>
        </trans-unit>
        <trans-unit id="c82856998d9751a3733e60c0607c7b45ff990c62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a strict text parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../text-1.2.4.0/data-text-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; は、 &lt;code&gt;filePath&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../text-1.2.4.0/data-text-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; から読み取った入力に対して厳密なテキストパーサー &lt;code&gt;p&lt;/code&gt; を実行します。 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; の値（ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="d74d5d2e59d089c23ba274edea898c51fbfd1b0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a strict text parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../text-1.2.4.0/data-text-lazy-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; は、 &lt;code&gt;filePath&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../text-1.2.4.0/data-text-lazy-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; から読み取った入力に対して厳密なテキストパーサー &lt;code&gt;p&lt;/code&gt; を実行します。 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; の値（ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="d8d8d59f334cb61dfdba2d46c755a99563203bf2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a strict text parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../text-1.2.4.1/data-text-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; は、 &lt;code&gt;filePath&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../text-1.2.4.1/data-text-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; から読み取られた入力に対して厳密なテキストパーサー &lt;code&gt;p&lt;/code&gt; を実行します。 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）の値を返します。</target>
        </trans-unit>
        <trans-unit id="1b9337613f2aae06b856414b00075815e0b870ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a strict text parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../text-1.2.4.1/data-text-lazy-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; は、 &lt;code&gt;filePath&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../text-1.2.4.1/data-text-lazy-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; から読み取られた入力に対して厳密なテキストパーサー &lt;code&gt;p&lt;/code&gt; を実行します。 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）の値を返します。</target>
        </trans-unit>
        <trans-unit id="10e0c755040d08e0b997234debcadf0bec890c51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a string parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; は、 &lt;code&gt;filePath&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; から読み取った入力に対して文字列パーサー &lt;code&gt;p&lt;/code&gt; を実行します。 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; の値（ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="477dcde6e2ec4bd125a8dff3dd805107405d8b62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a string parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; は、 &lt;code&gt;filePath&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; から読み取られた入力に対して文字列パーサー &lt;code&gt;p&lt;/code&gt; を実行します。 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）の値を返します。</target>
        </trans-unit>
        <trans-unit id="c4c5255d50669bc7dcac0846f93ff5f19e3762b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a string parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; は、 &lt;code&gt;filePath&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; から読み取られた入力に対して文字列パーサー &lt;code&gt;p&lt;/code&gt; を実行します。 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ）またはタイプ &lt;code&gt;a&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ）の値を返します。</target>
        </trans-unit>
        <trans-unit id="43361805333d6340ba3d49341667b633c9628ea2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserTrace label&lt;/code&gt; is an impure function, implemented with &lt;a href=&quot;../base-4.13.0.0/debug-trace&quot;&gt;Debug.Trace&lt;/a&gt; that prints to the console the remaining parser state at the time it is invoked. It is intended to be used for debugging parsers by inspecting their intermediate states.</source>
          <target state="translated">&lt;code&gt;parserTrace label&lt;/code&gt; は不明瞭な関数であり、&lt;a href=&quot;../base-4.13.0.0/debug-trace&quot;&gt;Debug.Trace&lt;/a&gt;で実装され、呼び出された時点で残りのパーサーの状態をコンソールに出力します。中間状態を検査して、パーサーのデバッグに使用することを目的としています。</target>
        </trans-unit>
        <trans-unit id="93f3ac1ff6bb5a54866efe8adc497fffdb4a9ca8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserTrace label&lt;/code&gt; is an impure function, implemented with &lt;a href=&quot;../base-4.14.1.0/debug-trace&quot;&gt;Debug.Trace&lt;/a&gt; that prints to the console the remaining parser state at the time it is invoked. It is intended to be used for debugging parsers by inspecting their intermediate states.</source>
          <target state="translated">&lt;code&gt;parserTrace label&lt;/code&gt; は不純な関数であり、&lt;a href=&quot;../base-4.14.1.0/debug-trace&quot;&gt;Debug.Trace&lt;/a&gt;で実装され、呼び出されたときの残りのパーサー状態をコンソールに出力します。これは、パーサーの中間状態を検査することにより、パーサーをデバッグするために使用することを目的としています。</target>
        </trans-unit>
        <trans-unit id="879c8325139e7bc31e473c013585bd241420880a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserTrace label&lt;/code&gt; is an impure function, implemented with &lt;a href=&quot;../base-4.15.0.0/debug-trace&quot;&gt;Debug.Trace&lt;/a&gt; that prints to the console the remaining parser state at the time it is invoked. It is intended to be used for debugging parsers by inspecting their intermediate states.</source>
          <target state="translated">&lt;code&gt;parserTrace label&lt;/code&gt; は不純な関数であり、&lt;a href=&quot;../base-4.15.0.0/debug-trace&quot;&gt;Debug.Trace&lt;/a&gt;で実装され、呼び出されたときの残りのパーサー状態をコンソールに出力します。これは、パーサーの中間状態を検査することにより、パーサーをデバッグするために使用することを目的としています。</target>
        </trans-unit>
        <trans-unit id="32d68a071a6f06d0f798f3a76c7a234c33d6d89b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserTraced label p&lt;/code&gt; is an impure function, implemented with &lt;a href=&quot;../base-4.13.0.0/debug-trace&quot;&gt;Debug.Trace&lt;/a&gt; that prints to the console the remaining parser state at the time it is invoked. It then continues to apply parser &lt;code&gt;p&lt;/code&gt;, and if &lt;code&gt;p&lt;/code&gt; fails will indicate that the label has been backtracked. It is intended to be used for debugging parsers by inspecting their intermediate states.</source>
          <target state="translated">&lt;code&gt;parserTraced label p&lt;/code&gt; は、起動時に残りのパーサーの状態をコンソールに出力する&lt;a href=&quot;../base-4.13.0.0/debug-trace&quot;&gt;Debug.Trace&lt;/a&gt;で実装される不純な関数です。次に、パーサー &lt;code&gt;p&lt;/code&gt; を適用し続け、 &lt;code&gt;p&lt;/code&gt; が失敗した場合は、ラベルがバックトラックされたことを示します。中間状態を検査して、パーサーのデバッグに使用することを目的としています。</target>
        </trans-unit>
        <trans-unit id="1281f6233dfa11f4020888eb8828673fa8d58a8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserTraced label p&lt;/code&gt; is an impure function, implemented with &lt;a href=&quot;../base-4.14.1.0/debug-trace&quot;&gt;Debug.Trace&lt;/a&gt; that prints to the console the remaining parser state at the time it is invoked. It then continues to apply parser &lt;code&gt;p&lt;/code&gt;, and if &lt;code&gt;p&lt;/code&gt; fails will indicate that the label has been backtracked. It is intended to be used for debugging parsers by inspecting their intermediate states.</source>
          <target state="translated">&lt;code&gt;parserTraced label p&lt;/code&gt; は不純な関数であり、&lt;a href=&quot;../base-4.14.1.0/debug-trace&quot;&gt;Debug.Trace&lt;/a&gt;で実装され、呼び出されたときの残りのパーサー状態をコンソールに出力します。その後、パーサー &lt;code&gt;p&lt;/code&gt; を適用し続け、 &lt;code&gt;p&lt;/code&gt; が失敗した場合は、ラベルがバックトラックされたことを示します。これは、パーサーの中間状態を検査することにより、パーサーをデバッグするために使用することを目的としています。</target>
        </trans-unit>
        <trans-unit id="49812f6feb205081910ec8c2a733b4530421a827" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserTraced label p&lt;/code&gt; is an impure function, implemented with &lt;a href=&quot;../base-4.15.0.0/debug-trace&quot;&gt;Debug.Trace&lt;/a&gt; that prints to the console the remaining parser state at the time it is invoked. It then continues to apply parser &lt;code&gt;p&lt;/code&gt;, and if &lt;code&gt;p&lt;/code&gt; fails will indicate that the label has been backtracked. It is intended to be used for debugging parsers by inspecting their intermediate states.</source>
          <target state="translated">&lt;code&gt;parserTraced label p&lt;/code&gt; は不純な関数であり、&lt;a href=&quot;../base-4.15.0.0/debug-trace&quot;&gt;Debug.Trace&lt;/a&gt;で実装され、呼び出されたときの残りのパーサー状態をコンソールに出力します。その後、パーサー &lt;code&gt;p&lt;/code&gt; を適用し続け、 &lt;code&gt;p&lt;/code&gt; が失敗した場合は、ラベルがバックトラックされたことを示します。これは、パーサーの中間状態を検査することにより、パーサーをデバッグするために使用することを目的としています。</target>
        </trans-unit>
        <trans-unit id="236d859b7609fc1ca1bc13d6b5fcf5a0b0f249f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserZero&lt;/code&gt; always fails without consuming any input. &lt;code&gt;parserZero&lt;/code&gt; is defined equal to the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:mzero&quot;&gt;mzero&lt;/a&gt;&lt;/code&gt; member of the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:MonadPlus&quot;&gt;MonadPlus&lt;/a&gt;&lt;/code&gt; class and to the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; member of the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;parserZero&lt;/code&gt; は、入力を消費せずに常に失敗します。 &lt;code&gt;parserZero&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:MonadPlus&quot;&gt;MonadPlus&lt;/a&gt;&lt;/code&gt; クラスの &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:mzero&quot;&gt;mzero&lt;/a&gt;&lt;/code&gt; メンバーおよび &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt; クラスの &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; メンバーと同等に定義されます。</target>
        </trans-unit>
        <trans-unit id="9d89f53e0ad613258b6413d6827e25a6d280be5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserZero&lt;/code&gt; always fails without consuming any input. &lt;code&gt;parserZero&lt;/code&gt; is defined equal to the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:mzero&quot;&gt;mzero&lt;/a&gt;&lt;/code&gt; member of the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:MonadPlus&quot;&gt;MonadPlus&lt;/a&gt;&lt;/code&gt; class and to the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; member of the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;parserZero&lt;/code&gt; は、入力を消費せずに常に失敗します。 &lt;code&gt;parserZero&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:MonadPlus&quot;&gt;MonadPlus&lt;/a&gt;&lt;/code&gt; クラスの &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:mzero&quot;&gt;mzero&lt;/a&gt;&lt;/code&gt; メンバーおよび &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt; クラスの &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; メンバーと同じように定義されます。</target>
        </trans-unit>
        <trans-unit id="81104d71b74042726d0988f39451e3791bf450b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserZero&lt;/code&gt; always fails without consuming any input. &lt;code&gt;parserZero&lt;/code&gt; is defined equal to the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:mzero&quot;&gt;mzero&lt;/a&gt;&lt;/code&gt; member of the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#t:MonadPlus&quot;&gt;MonadPlus&lt;/a&gt;&lt;/code&gt; class and to the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; member of the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#v:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;parserZero&lt;/code&gt; は、入力を消費せずに常に失敗します。 &lt;code&gt;parserZero&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#t:MonadPlus&quot;&gt;MonadPlus&lt;/a&gt;&lt;/code&gt; クラスの &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:mzero&quot;&gt;mzero&lt;/a&gt;&lt;/code&gt; メンバーおよび &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#v:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt; クラスの &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; メンバーと同じように定義されます。</target>
        </trans-unit>
        <trans-unit id="504d82cde56581b09dfa342968dbd29806585e3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prefix_cls_tycon&lt;/code&gt; is a class type constructor written prefix (e.g., &lt;code&gt;Show&lt;/code&gt; or &lt;code&gt;(&amp;amp;&amp;amp;&amp;amp;)&lt;/code&gt;), while &lt;code&gt;infix_cls_tycon&lt;/code&gt; is a class type constructor written infix (e.g., &lt;code&gt;`Show`&lt;/code&gt; or &lt;code&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;prefix_cls_tycon&lt;/code&gt; は、接頭辞（ &lt;code&gt;Show&lt;/code&gt; または &lt;code&gt;(&amp;amp;&amp;amp;&amp;amp;)&lt;/code&gt; など）で記述されたクラス型コンストラクターですが、 &lt;code&gt;infix_cls_tycon&lt;/code&gt; は、中置辞（ &lt;code&gt;`Show`&lt;/code&gt; または &lt;code&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/code&gt; など）で記述されたクラス型コンストラクターです。</target>
        </trans-unit>
        <trans-unit id="6b37ef552b620f945e9569f42eacd214db31f687" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;purgeObj&lt;/code&gt; drops the symbols for the dynamic library from the symbol table. Unlike &lt;code&gt;&lt;a href=&quot;ghci-objlink#v:unloadObj&quot;&gt;unloadObj&lt;/a&gt;&lt;/code&gt;, the library will not be dropped memory during a future major GC.</source>
          <target state="translated">&lt;code&gt;purgeObj&lt;/code&gt; は、ダイナミックライブラリのシンボルをシンボルテーブルから削除します。 &lt;code&gt;&lt;a href=&quot;ghci-objlink#v:unloadObj&quot;&gt;unloadObj&lt;/a&gt;&lt;/code&gt; とは異なり、ライブラリは将来の主要なGC中にメモリを削除されません。</target>
        </trans-unit>
        <trans-unit id="170f3799fb282ab1d8c87871e662353dc351f122" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;putState st&lt;/code&gt; set the user state to &lt;code&gt;st&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;putState st&lt;/code&gt; にユーザーの状態を設定する &lt;code&gt;st&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f8dae793f8fc921273397467c9a90d1a4fe2513a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queryTerminal fd&lt;/code&gt; calls &lt;code&gt;isatty&lt;/code&gt; to determine whether or not &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt; is associated with a terminal.</source>
          <target state="translated">&lt;code&gt;queryTerminal fd&lt;/code&gt; は &lt;code&gt;isatty&lt;/code&gt; を呼び出して、 &lt;code&gt;Fd&lt;/code&gt; &lt;code&gt;fd&lt;/code&gt; が端末に関連付けられているかどうかを判別します。</target>
        </trans-unit>
        <trans-unit id="886c07b9fda367d73fea1ebd7fa724ee8ac39ee2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;raiseSignal int&lt;/code&gt; calls &lt;code&gt;kill&lt;/code&gt; to signal the current process with interrupt signal &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;raiseSignal int&lt;/code&gt; は &lt;code&gt;kill&lt;/code&gt; を呼び出して、割り込みシグナル &lt;code&gt;int&lt;/code&gt; で現在のプロセスにシグナルを送ります。</target>
        </trans-unit>
        <trans-unit id="6dcb68b814fda4f0e43be7d3203f944bd95bb03a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;readCreateProcess&lt;/code&gt; works exactly like &lt;code&gt;&lt;a href=&quot;system-process#v:readProcess&quot;&gt;readProcess&lt;/a&gt;&lt;/code&gt; except that it lets you pass &lt;code&gt;&lt;a href=&quot;system-process#t:CreateProcess&quot;&gt;CreateProcess&lt;/a&gt;&lt;/code&gt; giving better flexibility.</source>
          <target state="translated">&lt;code&gt;readCreateProcess&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;system-process#t:CreateProcess&quot;&gt;CreateProcess&lt;/a&gt;&lt;/code&gt; を渡して柔軟性を向上させることを除いて、 &lt;code&gt;&lt;a href=&quot;system-process#v:readProcess&quot;&gt;readProcess&lt;/a&gt;&lt;/code&gt; とまったく同じように機能します。</target>
        </trans-unit>
        <trans-unit id="81073c68ed5f7be32aa4c53668308268db887816" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;readCreateProcessWithExitCode&lt;/code&gt; works exactly like &lt;code&gt;&lt;a href=&quot;system-process#v:readProcessWithExitCode&quot;&gt;readProcessWithExitCode&lt;/a&gt;&lt;/code&gt; except that it lets you pass &lt;code&gt;&lt;a href=&quot;system-process#t:CreateProcess&quot;&gt;CreateProcess&lt;/a&gt;&lt;/code&gt; giving better flexibility.</source>
          <target state="translated">&lt;code&gt;readCreateProcessWithExitCode&lt;/code&gt; は、readProcessWithExitCodeとまったく同じように &lt;code&gt;&lt;a href=&quot;system-process#v:readProcessWithExitCode&quot;&gt;readProcessWithExitCode&lt;/a&gt;&lt;/code&gt; ますが、 &lt;code&gt;&lt;a href=&quot;system-process#t:CreateProcess&quot;&gt;CreateProcess&lt;/a&gt;&lt;/code&gt; を渡すことができるため、柔軟性が向上します。</target>
        </trans-unit>
        <trans-unit id="d854f1fd3410de9533ec03113bd2149d14e1e32f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;readDirStream dp&lt;/code&gt; calls &lt;code&gt;readdir&lt;/code&gt; to obtain the next directory entry (&lt;code&gt;struct dirent&lt;/code&gt;) for the open directory stream &lt;code&gt;dp&lt;/code&gt;, and returns the &lt;code&gt;d_name&lt;/code&gt; member of that structure.</source>
          <target state="translated">&lt;code&gt;readDirStream dp&lt;/code&gt; は &lt;code&gt;readdir&lt;/code&gt; を呼び出して、開いているディレクトリストリーム &lt;code&gt;dp&lt;/code&gt; の次のディレクトリエントリ（ &lt;code&gt;struct dirent&lt;/code&gt; ）を取得し、その構造の &lt;code&gt;d_name&lt;/code&gt; メンバーを返します。</target>
        </trans-unit>
        <trans-unit id="2dd1b8c25588d116697950fed46adb2fda59d402" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;readProcess&lt;/code&gt; forks an external process, reads its standard output strictly, blocking until the process terminates, and returns the output string. The external process inherits the standard error.</source>
          <target state="translated">&lt;code&gt;readProcess&lt;/code&gt; は外部プロセスをフォークし、その標準出力を厳密に読み取り、プロセスが終了するまでブロックして、出力文字列を返します。外部プロセスは標準エラーを継承します。</target>
        </trans-unit>
        <trans-unit id="b887babad0ba6bd33de067b5d1b4e71a63412ecd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;readProcessWithExitCode&lt;/code&gt; is like &lt;code&gt;&lt;a href=&quot;system-process#v:readProcess&quot;&gt;readProcess&lt;/a&gt;&lt;/code&gt; but with two differences:</source>
          <target state="translated">&lt;code&gt;readProcessWithExitCode&lt;/code&gt; はreadProcessに似てい &lt;code&gt;&lt;a href=&quot;system-process#v:readProcess&quot;&gt;readProcess&lt;/a&gt;&lt;/code&gt; が、次の2つの違いがあります。</target>
        </trans-unit>
        <trans-unit id="4f483a9990e96db9a4f03d5a02fa8dae77197ad9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ready dev write msecs&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the device has data to read (if &lt;code&gt;write&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;) or space to write new data (if &lt;code&gt;write&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;). &lt;code&gt;msecs&lt;/code&gt; specifies how long to wait, in milliseconds.</source>
          <target state="translated">&lt;code&gt;ready dev write msecs&lt;/code&gt; は、デバイスが読み取るデータ（ &lt;code&gt;write&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; の場合）または新しいデータを書き込むスペース（ &lt;code&gt;write&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; の場合）がある場合、 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; を返します。 &lt;code&gt;msecs&lt;/code&gt; は、待機時間をミリ秒単位で指定します。</target>
        </trans-unit>
        <trans-unit id="98f3be57aded45701eafb922c4274e13ced485c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rec&lt;/code&gt; blocks can also be used inside &lt;code&gt;mdo&lt;/code&gt;-expressions, which will be treated as a single statement. However, it is good style to either use &lt;code&gt;mdo&lt;/code&gt; or &lt;code&gt;rec&lt;/code&gt; blocks in a single expression.</source>
          <target state="translated">&lt;code&gt;rec&lt;/code&gt; ブロックは &lt;code&gt;mdo&lt;/code&gt; 式の内部でも使用でき、単一のステートメントとして扱われます。ただし、単一の式で &lt;code&gt;mdo&lt;/code&gt; ブロックまたは &lt;code&gt;rec&lt;/code&gt; ブロックを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="dc7e5bdf258b0658e02b38e74dc9e32538cea781" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recover&lt;/code&gt; may raise an exception rather than skipping anything.</source>
          <target state="translated">&lt;code&gt;recover&lt;/code&gt; は、何もスキップせずに例外を発生させる場合があります。</target>
        </trans-unit>
        <trans-unit id="265d32357e56084e5000a238d381807aead6cf70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;registerFd mgr cb fd evs lt&lt;/code&gt; registers interest in the events &lt;code&gt;evs&lt;/code&gt; on the file descriptor &lt;code&gt;fd&lt;/code&gt; for lifetime &lt;code&gt;lt&lt;/code&gt;. &lt;code&gt;cb&lt;/code&gt; is called for each event that occurs. Returns a cookie that can be handed to &lt;code&gt;&lt;a href=&quot;ghc-event#v:unregisterFd&quot;&gt;unregisterFd&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;registerFd mgr cb fd evs lt&lt;/code&gt; は、存続期間 &lt;code&gt;lt&lt;/code&gt; のファイル記述子 &lt;code&gt;fd&lt;/code&gt; のイベント &lt;code&gt;evs&lt;/code&gt; に関心を登録します。 &lt;code&gt;cb&lt;/code&gt; は、発生するイベントごとに呼び出されます。 &lt;code&gt;&lt;a href=&quot;ghc-event#v:unregisterFd&quot;&gt;unregisterFd&lt;/a&gt;&lt;/code&gt; に渡すことができるCookieを返します。</target>
        </trans-unit>
        <trans-unit id="ceba8248ce54a903b180a608d6cdff89c75e179e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyAnnotations target&lt;/code&gt; returns the list of annotations associated with &lt;code&gt;target&lt;/code&gt;. Only the annotations that are appropriately typed is returned. So if you have &lt;code&gt;Int&lt;/code&gt; and &lt;code&gt;String&lt;/code&gt; annotations for the same target, you have to call this function twice.</source>
          <target state="translated">&lt;code&gt;reifyAnnotations target&lt;/code&gt; 関連付けられた注釈のリストを返す &lt;code&gt;target&lt;/code&gt; 。適切に入力された注釈のみが返されます。したがって、同じターゲットに &lt;code&gt;Int&lt;/code&gt; アノテーションと &lt;code&gt;String&lt;/code&gt; アノテーションがある場合は、この関数を2回呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="1d5cf4e2162253915e3ee1295e39df377a108dba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyConStrictness nm&lt;/code&gt; looks up the strictness information for the fields of the constructor with the name &lt;code&gt;nm&lt;/code&gt;. Note that the strictness information that &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reifyConStrictness&quot;&gt;reifyConStrictness&lt;/a&gt;&lt;/code&gt; returns may not correspond to what is written in the source code. For example, in the following data declaration:</source>
          <target state="translated">&lt;code&gt;reifyConStrictness nm&lt;/code&gt; は、 &lt;code&gt;nm&lt;/code&gt; という名前のコンストラクターのフィールドの厳密性情報を検索します。 &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reifyConStrictness&quot;&gt;reifyConStrictness&lt;/a&gt;&lt;/code&gt; が返す厳密性情報は、ソースコードで記述されているものと一致しない場合があることに注意してください。たとえば、次のデータ宣言では：</target>
        </trans-unit>
        <trans-unit id="57fa87179057dc8ec4e7011d77aa926ee76aecb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyConStrictness nm&lt;/code&gt; looks up the strictness information for the fields of the constructor with the name &lt;code&gt;nm&lt;/code&gt;. Note that the strictness information that &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reifyConStrictness&quot;&gt;reifyConStrictness&lt;/a&gt;&lt;/code&gt; returns may not correspond to what is written in the source code. For example, in the following data declaration:</source>
          <target state="translated">&lt;code&gt;reifyConStrictness nm&lt;/code&gt; は、 &lt;code&gt;nm&lt;/code&gt; という名前のコンストラクターのフィールドの厳密性情報を検索します。 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reifyConStrictness&quot;&gt;reifyConStrictness&lt;/a&gt;&lt;/code&gt; が返す厳密性情報は、ソースコードで記述されているものと一致しない場合があることに注意してください。たとえば、次のデータ宣言では：</target>
        </trans-unit>
        <trans-unit id="3171898bb71444e3f243c891e7ea1ff27407d6b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyFixity nm&lt;/code&gt; attempts to find a fixity declaration for &lt;code&gt;nm&lt;/code&gt;. For example, if the function &lt;code&gt;foo&lt;/code&gt; has the fixity declaration &lt;code&gt;infixr 7 foo&lt;/code&gt;, then &lt;code&gt;reifyFixity 'foo&lt;/code&gt; would return &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (&lt;a href=&quot;language-haskell-th#t:Fixity&quot;&gt;Fixity&lt;/a&gt; 7 &lt;a href=&quot;language-haskell-th#v:InfixR&quot;&gt;InfixR&lt;/a&gt;)&lt;/code&gt;. If the function &lt;code&gt;bar&lt;/code&gt; does not have a fixity declaration, then &lt;code&gt;reifyFixity 'bar&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, so you may assume &lt;code&gt;bar&lt;/code&gt; has &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:defaultFixity&quot;&gt;defaultFixity&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reifyFixity nm&lt;/code&gt; は、 &lt;code&gt;nm&lt;/code&gt; の固定宣言を見つけようとします。たとえば、関数 &lt;code&gt;foo&lt;/code&gt; に &lt;code&gt;infixr 7 foo&lt;/code&gt; 宣言infixr 7 fooがある場合、 &lt;code&gt;reifyFixity 'foo&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (&lt;a href=&quot;language-haskell-th#t:Fixity&quot;&gt;Fixity&lt;/a&gt; 7 &lt;a href=&quot;language-haskell-th#v:InfixR&quot;&gt;InfixR&lt;/a&gt;)&lt;/code&gt; を返します。関数 &lt;code&gt;bar&lt;/code&gt; に固定宣言がない場合、 &lt;code&gt;reifyFixity 'bar&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を返すため、 &lt;code&gt;bar&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:defaultFixity&quot;&gt;defaultFixity&lt;/a&gt;&lt;/code&gt; があると想定できます。</target>
        </trans-unit>
        <trans-unit id="9186e7ae6d03c2aeb322f6526d5dc2396a52ba7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyFixity nm&lt;/code&gt; attempts to find a fixity declaration for &lt;code&gt;nm&lt;/code&gt;. For example, if the function &lt;code&gt;foo&lt;/code&gt; has the fixity declaration &lt;code&gt;infixr 7 foo&lt;/code&gt;, then &lt;code&gt;reifyFixity 'foo&lt;/code&gt; would return &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (&lt;a href=&quot;language-haskell-th-syntax#t:Fixity&quot;&gt;Fixity&lt;/a&gt; 7 &lt;a href=&quot;language-haskell-th-syntax#v:InfixR&quot;&gt;InfixR&lt;/a&gt;)&lt;/code&gt;. If the function &lt;code&gt;bar&lt;/code&gt; does not have a fixity declaration, then &lt;code&gt;reifyFixity 'bar&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, so you may assume &lt;code&gt;bar&lt;/code&gt; has &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:defaultFixity&quot;&gt;defaultFixity&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reifyFixity nm&lt;/code&gt; は、 &lt;code&gt;nm&lt;/code&gt; の固定宣言を見つけようとします。たとえば、関数 &lt;code&gt;foo&lt;/code&gt; に &lt;code&gt;infixr 7 foo&lt;/code&gt; 宣言infixr 7 fooがある場合、 &lt;code&gt;reifyFixity 'foo&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (&lt;a href=&quot;language-haskell-th-syntax#t:Fixity&quot;&gt;Fixity&lt;/a&gt; 7 &lt;a href=&quot;language-haskell-th-syntax#v:InfixR&quot;&gt;InfixR&lt;/a&gt;)&lt;/code&gt; を返します。関数 &lt;code&gt;bar&lt;/code&gt; に固定宣言がない場合、 &lt;code&gt;reifyFixity 'bar&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を返すため、 &lt;code&gt;bar&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:defaultFixity&quot;&gt;defaultFixity&lt;/a&gt;&lt;/code&gt; があると想定できます。</target>
        </trans-unit>
        <trans-unit id="ce2e33c56db1ccefc4637c22e7f0fac18f16bd52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyFixity nm&lt;/code&gt; attempts to find a fixity declaration for &lt;code&gt;nm&lt;/code&gt;. For example, if the function &lt;code&gt;foo&lt;/code&gt; has the fixity declaration &lt;code&gt;infixr 7 foo&lt;/code&gt;, then &lt;code&gt;reifyFixity 'foo&lt;/code&gt; would return &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (&lt;a href=&quot;language-haskell-th#t:Fixity&quot;&gt;Fixity&lt;/a&gt; 7 &lt;a href=&quot;language-haskell-th#v:InfixR&quot;&gt;InfixR&lt;/a&gt;)&lt;/code&gt;. If the function &lt;code&gt;bar&lt;/code&gt; does not have a fixity declaration, then &lt;code&gt;reifyFixity 'bar&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, so you may assume &lt;code&gt;bar&lt;/code&gt; has &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:defaultFixity&quot;&gt;defaultFixity&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reifyFixity nm&lt;/code&gt; は、 &lt;code&gt;nm&lt;/code&gt; の固定宣言を見つけようとします。たとえば、関数 &lt;code&gt;foo&lt;/code&gt; に &lt;code&gt;infixr 7 foo&lt;/code&gt; 宣言infixr 7 fooがある場合、 &lt;code&gt;reifyFixity 'foo&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (&lt;a href=&quot;language-haskell-th#t:Fixity&quot;&gt;Fixity&lt;/a&gt; 7 &lt;a href=&quot;language-haskell-th#v:InfixR&quot;&gt;InfixR&lt;/a&gt;)&lt;/code&gt; を返します。関数 &lt;code&gt;bar&lt;/code&gt; &lt;code&gt;reifyFixity 'bar&lt;/code&gt; 宣言がない場合、reifyFixity 'バーは &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を返すため、 &lt;code&gt;bar&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:defaultFixity&quot;&gt;defaultFixity&lt;/a&gt;&lt;/code&gt; があると見なすことができます。</target>
        </trans-unit>
        <trans-unit id="21649650133480d4c0b26aca04a4cc4772599f4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyFixity nm&lt;/code&gt; attempts to find a fixity declaration for &lt;code&gt;nm&lt;/code&gt;. For example, if the function &lt;code&gt;foo&lt;/code&gt; has the fixity declaration &lt;code&gt;infixr 7 foo&lt;/code&gt;, then &lt;code&gt;reifyFixity 'foo&lt;/code&gt; would return &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (&lt;a href=&quot;language-haskell-th-syntax#t:Fixity&quot;&gt;Fixity&lt;/a&gt; 7 &lt;a href=&quot;language-haskell-th-syntax#v:InfixR&quot;&gt;InfixR&lt;/a&gt;)&lt;/code&gt;. If the function &lt;code&gt;bar&lt;/code&gt; does not have a fixity declaration, then &lt;code&gt;reifyFixity 'bar&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, so you may assume &lt;code&gt;bar&lt;/code&gt; has &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:defaultFixity&quot;&gt;defaultFixity&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reifyFixity nm&lt;/code&gt; は、 &lt;code&gt;nm&lt;/code&gt; の固定宣言を見つけようとします。たとえば、関数 &lt;code&gt;foo&lt;/code&gt; に &lt;code&gt;infixr 7 foo&lt;/code&gt; 宣言infixr 7 fooがある場合、 &lt;code&gt;reifyFixity 'foo&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (&lt;a href=&quot;language-haskell-th-syntax#t:Fixity&quot;&gt;Fixity&lt;/a&gt; 7 &lt;a href=&quot;language-haskell-th-syntax#v:InfixR&quot;&gt;InfixR&lt;/a&gt;)&lt;/code&gt; を返します。関数 &lt;code&gt;bar&lt;/code&gt; &lt;code&gt;reifyFixity 'bar&lt;/code&gt; 宣言がない場合、reifyFixity 'バーは &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を返すため、 &lt;code&gt;bar&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:defaultFixity&quot;&gt;defaultFixity&lt;/a&gt;&lt;/code&gt; があると見なすことができます。</target>
        </trans-unit>
        <trans-unit id="098effe7ab62540e7b6907712db1f73b89142e04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyFixity nm&lt;/code&gt; attempts to find a fixity declaration for &lt;code&gt;nm&lt;/code&gt;. For example, if the function &lt;code&gt;foo&lt;/code&gt; has the fixity declaration &lt;code&gt;infixr 7 foo&lt;/code&gt;, then &lt;code&gt;reifyFixity 'foo&lt;/code&gt; would return &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (&lt;a href=&quot;language-haskell-th#t:Fixity&quot;&gt;Fixity&lt;/a&gt; 7 &lt;a href=&quot;language-haskell-th#v:InfixR&quot;&gt;InfixR&lt;/a&gt;)&lt;/code&gt;. If the function &lt;code&gt;bar&lt;/code&gt; does not have a fixity declaration, then &lt;code&gt;reifyFixity 'bar&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, so you may assume &lt;code&gt;bar&lt;/code&gt; has &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:defaultFixity&quot;&gt;defaultFixity&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reifyFixity nm&lt;/code&gt; は、 &lt;code&gt;nm&lt;/code&gt; の固定宣言を見つけようとします。たとえば、関数 &lt;code&gt;foo&lt;/code&gt; に &lt;code&gt;infixr 7 foo&lt;/code&gt; 宣言infixr 7 fooがある場合、 &lt;code&gt;reifyFixity 'foo&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (&lt;a href=&quot;language-haskell-th#t:Fixity&quot;&gt;Fixity&lt;/a&gt; 7 &lt;a href=&quot;language-haskell-th#v:InfixR&quot;&gt;InfixR&lt;/a&gt;)&lt;/code&gt; を返します。関数 &lt;code&gt;bar&lt;/code&gt; &lt;code&gt;reifyFixity 'bar&lt;/code&gt; 宣言がない場合、reifyFixity 'バーは &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を返すため、 &lt;code&gt;bar&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:defaultFixity&quot;&gt;defaultFixity&lt;/a&gt;&lt;/code&gt; があると見なすことができます。</target>
        </trans-unit>
        <trans-unit id="8b1293d8fa5f1b570af6cabb2a627f3b65689347" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyFixity nm&lt;/code&gt; attempts to find a fixity declaration for &lt;code&gt;nm&lt;/code&gt;. For example, if the function &lt;code&gt;foo&lt;/code&gt; has the fixity declaration &lt;code&gt;infixr 7 foo&lt;/code&gt;, then &lt;code&gt;reifyFixity 'foo&lt;/code&gt; would return &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (&lt;a href=&quot;language-haskell-th-syntax#t:Fixity&quot;&gt;Fixity&lt;/a&gt; 7 &lt;a href=&quot;language-haskell-th-syntax#v:InfixR&quot;&gt;InfixR&lt;/a&gt;)&lt;/code&gt;. If the function &lt;code&gt;bar&lt;/code&gt; does not have a fixity declaration, then &lt;code&gt;reifyFixity 'bar&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, so you may assume &lt;code&gt;bar&lt;/code&gt; has &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:defaultFixity&quot;&gt;defaultFixity&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reifyFixity nm&lt;/code&gt; は、 &lt;code&gt;nm&lt;/code&gt; の固定宣言を見つけようとします。たとえば、関数 &lt;code&gt;foo&lt;/code&gt; に &lt;code&gt;infixr 7 foo&lt;/code&gt; 宣言infixr 7 fooがある場合、 &lt;code&gt;reifyFixity 'foo&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (&lt;a href=&quot;language-haskell-th-syntax#t:Fixity&quot;&gt;Fixity&lt;/a&gt; 7 &lt;a href=&quot;language-haskell-th-syntax#v:InfixR&quot;&gt;InfixR&lt;/a&gt;)&lt;/code&gt; を返します。関数 &lt;code&gt;bar&lt;/code&gt; &lt;code&gt;reifyFixity 'bar&lt;/code&gt; 宣言がない場合、reifyFixity 'バーは &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を返すため、 &lt;code&gt;bar&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:defaultFixity&quot;&gt;defaultFixity&lt;/a&gt;&lt;/code&gt; があると見なすことができます。</target>
        </trans-unit>
        <trans-unit id="ec02029956845456aa9222455473fd38db7f2e45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyInstances ''Eq [ &lt;a href=&quot;language-haskell-th#v:TupleT&quot;&gt;TupleT&lt;/a&gt; 2 `&lt;a href=&quot;language-haskell-th#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th#v:ConT&quot;&gt;ConT&lt;/a&gt; ''A `&lt;a href=&quot;language-haskell-th#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th#v:ConT&quot;&gt;ConT&lt;/a&gt; ''B ]&lt;/code&gt; contains the &lt;code&gt;instance (Eq a, Eq b) =&amp;gt; Eq (a, b)&lt;/code&gt; regardless of whether &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; themselves implement &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reifyInstances ''Eq [ &lt;a href=&quot;language-haskell-th#v:TupleT&quot;&gt;TupleT&lt;/a&gt; 2 `&lt;a href=&quot;language-haskell-th#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th#v:ConT&quot;&gt;ConT&lt;/a&gt; ''A `&lt;a href=&quot;language-haskell-th#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th#v:ConT&quot;&gt;ConT&lt;/a&gt; ''B ]&lt;/code&gt; 含まれている &lt;code&gt;instance (Eq a, Eq b) =&amp;gt; Eq (a, b)&lt;/code&gt; にかかわらずかどうかの &lt;code&gt;A&lt;/code&gt; 及び &lt;code&gt;B&lt;/code&gt; 自体が実装 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2543cc1130ab85fd405c5f333078bae343c2cb0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyInstances ''Eq [ &lt;a href=&quot;language-haskell-th#v:TupleT&quot;&gt;TupleT&lt;/a&gt; 2 `&lt;a href=&quot;language-haskell-th#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th#v:ConT&quot;&gt;ConT&lt;/a&gt; ''A `&lt;a href=&quot;language-haskell-th#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th#v:ConT&quot;&gt;ConT&lt;/a&gt; ''B ]&lt;/code&gt; contains the &lt;code&gt;instance (Eq a, Eq b) =&amp;gt; Eq (a, b)&lt;/code&gt; regardless of whether &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; themselves implement &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reifyInstances ''Eq [ &lt;a href=&quot;language-haskell-th#v:TupleT&quot;&gt;TupleT&lt;/a&gt; 2 `&lt;a href=&quot;language-haskell-th#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th#v:ConT&quot;&gt;ConT&lt;/a&gt; ''A `&lt;a href=&quot;language-haskell-th#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th#v:ConT&quot;&gt;ConT&lt;/a&gt; ''B ]&lt;/code&gt; 含まれている &lt;code&gt;instance (Eq a, Eq b) =&amp;gt; Eq (a, b)&lt;/code&gt; にかかわらずかどうかの &lt;code&gt;A&lt;/code&gt; 及び &lt;code&gt;B&lt;/code&gt; 自体が実装 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9951d7fe88984b6f5555e48fc8b19a4605fe5819" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyInstances ''Eq [ &lt;a href=&quot;language-haskell-th#v:TupleT&quot;&gt;TupleT&lt;/a&gt; 2 `&lt;a href=&quot;language-haskell-th#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th#v:ConT&quot;&gt;ConT&lt;/a&gt; ''A `&lt;a href=&quot;language-haskell-th#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th#v:ConT&quot;&gt;ConT&lt;/a&gt; ''B ]&lt;/code&gt; contains the &lt;code&gt;instance (Eq a, Eq b) =&amp;gt; Eq (a, b)&lt;/code&gt; regardless of whether &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; themselves implement &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reifyInstances ''Eq [ &lt;a href=&quot;language-haskell-th#v:TupleT&quot;&gt;TupleT&lt;/a&gt; 2 `&lt;a href=&quot;language-haskell-th#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th#v:ConT&quot;&gt;ConT&lt;/a&gt; ''A `&lt;a href=&quot;language-haskell-th#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th#v:ConT&quot;&gt;ConT&lt;/a&gt; ''B ]&lt;/code&gt; 含まれている &lt;code&gt;instance (Eq a, Eq b) =&amp;gt; Eq (a, b)&lt;/code&gt; にかかわらずかどうかの &lt;code&gt;A&lt;/code&gt; 及び &lt;code&gt;B&lt;/code&gt; 自体が実装 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="283004a3b86ddf80020a048e53a2844f731c1145" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyInstances ''Eq [ &lt;a href=&quot;language-haskell-th-syntax#v:TupleT&quot;&gt;TupleT&lt;/a&gt; 2 `&lt;a href=&quot;language-haskell-th-syntax#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th-syntax#v:ConT&quot;&gt;ConT&lt;/a&gt; ''A `&lt;a href=&quot;language-haskell-th-syntax#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th-syntax#v:ConT&quot;&gt;ConT&lt;/a&gt; ''B ]&lt;/code&gt; contains the &lt;code&gt;instance (Eq a, Eq b) =&amp;gt; Eq (a, b)&lt;/code&gt; regardless of whether &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; themselves implement &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reifyInstances ''Eq [ &lt;a href=&quot;language-haskell-th-syntax#v:TupleT&quot;&gt;TupleT&lt;/a&gt; 2 `&lt;a href=&quot;language-haskell-th-syntax#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th-syntax#v:ConT&quot;&gt;ConT&lt;/a&gt; ''A `&lt;a href=&quot;language-haskell-th-syntax#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th-syntax#v:ConT&quot;&gt;ConT&lt;/a&gt; ''B ]&lt;/code&gt; 含まれている &lt;code&gt;instance (Eq a, Eq b) =&amp;gt; Eq (a, b)&lt;/code&gt; にかかわらずかどうかの &lt;code&gt;A&lt;/code&gt; 及び &lt;code&gt;B&lt;/code&gt; 自体が実装 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3d16150bca7dae1c840862cd8ddfca9585a257c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyInstances ''Eq [ &lt;a href=&quot;language-haskell-th-syntax#v:TupleT&quot;&gt;TupleT&lt;/a&gt; 2 `&lt;a href=&quot;language-haskell-th-syntax#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th-syntax#v:ConT&quot;&gt;ConT&lt;/a&gt; ''A `&lt;a href=&quot;language-haskell-th-syntax#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th-syntax#v:ConT&quot;&gt;ConT&lt;/a&gt; ''B ]&lt;/code&gt; contains the &lt;code&gt;instance (Eq a, Eq b) =&amp;gt; Eq (a, b)&lt;/code&gt; regardless of whether &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; themselves implement &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reifyInstances ''Eq [ &lt;a href=&quot;language-haskell-th-syntax#v:TupleT&quot;&gt;TupleT&lt;/a&gt; 2 `&lt;a href=&quot;language-haskell-th-syntax#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th-syntax#v:ConT&quot;&gt;ConT&lt;/a&gt; ''A `&lt;a href=&quot;language-haskell-th-syntax#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th-syntax#v:ConT&quot;&gt;ConT&lt;/a&gt; ''B ]&lt;/code&gt; 含まれている &lt;code&gt;instance (Eq a, Eq b) =&amp;gt; Eq (a, b)&lt;/code&gt; にかかわらずかどうかの &lt;code&gt;A&lt;/code&gt; 及び &lt;code&gt;B&lt;/code&gt; 自体が実装 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9c25aa1de4bff4e4985b391953ffcdc3fca37c79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyInstances ''Eq [ &lt;a href=&quot;language-haskell-th-syntax#v:TupleT&quot;&gt;TupleT&lt;/a&gt; 2 `&lt;a href=&quot;language-haskell-th-syntax#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th-syntax#v:ConT&quot;&gt;ConT&lt;/a&gt; ''A `&lt;a href=&quot;language-haskell-th-syntax#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th-syntax#v:ConT&quot;&gt;ConT&lt;/a&gt; ''B ]&lt;/code&gt; contains the &lt;code&gt;instance (Eq a, Eq b) =&amp;gt; Eq (a, b)&lt;/code&gt; regardless of whether &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; themselves implement &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reifyInstances ''Eq [ &lt;a href=&quot;language-haskell-th-syntax#v:TupleT&quot;&gt;TupleT&lt;/a&gt; 2 `&lt;a href=&quot;language-haskell-th-syntax#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th-syntax#v:ConT&quot;&gt;ConT&lt;/a&gt; ''A `&lt;a href=&quot;language-haskell-th-syntax#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th-syntax#v:ConT&quot;&gt;ConT&lt;/a&gt; ''B ]&lt;/code&gt; 含まれている &lt;code&gt;instance (Eq a, Eq b) =&amp;gt; Eq (a, b)&lt;/code&gt; にかかわらずかどうかの &lt;code&gt;A&lt;/code&gt; 及び &lt;code&gt;B&lt;/code&gt; 自体が実装 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c88069868bb5989758442814f5f3137ad959b9a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyInstances ''Show [ &lt;a href=&quot;language-haskell-th#v:VarT&quot;&gt;VarT&lt;/a&gt; (&lt;a href=&quot;language-haskell-th#v:mkName&quot;&gt;mkName&lt;/a&gt; &quot;a&quot;) ]&lt;/code&gt; produces every available instance of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reifyInstances ''Show [ &lt;a href=&quot;language-haskell-th#v:VarT&quot;&gt;VarT&lt;/a&gt; (&lt;a href=&quot;language-haskell-th#v:mkName&quot;&gt;mkName&lt;/a&gt; &quot;a&quot;) ]&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; の使用可能なすべてのインスタンスを生成します</target>
        </trans-unit>
        <trans-unit id="e90c93eb3ca39219d568ff2cb4d051e4aad67ca9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyInstances ''Show [ &lt;a href=&quot;language-haskell-th#v:VarT&quot;&gt;VarT&lt;/a&gt; (&lt;a href=&quot;language-haskell-th#v:mkName&quot;&gt;mkName&lt;/a&gt; &quot;a&quot;) ]&lt;/code&gt; produces every available instance of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reifyInstances ''Show [ &lt;a href=&quot;language-haskell-th#v:VarT&quot;&gt;VarT&lt;/a&gt; (&lt;a href=&quot;language-haskell-th#v:mkName&quot;&gt;mkName&lt;/a&gt; &quot;a&quot;) ]&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; 利用可能なすべてのインスタンスを生成します</target>
        </trans-unit>
        <trans-unit id="a0721dcc4fdbb04468b5c6b68abe1fed0aa49233" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyInstances ''Show [ &lt;a href=&quot;language-haskell-th#v:VarT&quot;&gt;VarT&lt;/a&gt; (&lt;a href=&quot;language-haskell-th#v:mkName&quot;&gt;mkName&lt;/a&gt; &quot;a&quot;) ]&lt;/code&gt; produces every available instance of &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reifyInstances ''Show [ &lt;a href=&quot;language-haskell-th#v:VarT&quot;&gt;VarT&lt;/a&gt; (&lt;a href=&quot;language-haskell-th#v:mkName&quot;&gt;mkName&lt;/a&gt; &quot;a&quot;) ]&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; 利用可能なすべてのインスタンスを生成します</target>
        </trans-unit>
        <trans-unit id="7d6895425c26a36b390cb51e247d255d052077ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyInstances ''Show [ &lt;a href=&quot;language-haskell-th-syntax#v:VarT&quot;&gt;VarT&lt;/a&gt; (&lt;a href=&quot;language-haskell-th-syntax#v:mkName&quot;&gt;mkName&lt;/a&gt; &quot;a&quot;) ]&lt;/code&gt; produces every available instance of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reifyInstances ''Show [ &lt;a href=&quot;language-haskell-th-syntax#v:VarT&quot;&gt;VarT&lt;/a&gt; (&lt;a href=&quot;language-haskell-th-syntax#v:mkName&quot;&gt;mkName&lt;/a&gt; &quot;a&quot;) ]&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; の使用可能なすべてのインスタンスを生成します</target>
        </trans-unit>
        <trans-unit id="e7239faec742815ae05a53c5424b2fc8cea3b4d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyInstances ''Show [ &lt;a href=&quot;language-haskell-th-syntax#v:VarT&quot;&gt;VarT&lt;/a&gt; (&lt;a href=&quot;language-haskell-th-syntax#v:mkName&quot;&gt;mkName&lt;/a&gt; &quot;a&quot;) ]&lt;/code&gt; produces every available instance of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reifyInstances ''Show [ &lt;a href=&quot;language-haskell-th-syntax#v:VarT&quot;&gt;VarT&lt;/a&gt; (&lt;a href=&quot;language-haskell-th-syntax#v:mkName&quot;&gt;mkName&lt;/a&gt; &quot;a&quot;) ]&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; 利用可能なすべてのインスタンスを生成します</target>
        </trans-unit>
        <trans-unit id="628dea83cd1da7c10aec83d49e500257ca0f19f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyInstances ''Show [ &lt;a href=&quot;language-haskell-th-syntax#v:VarT&quot;&gt;VarT&lt;/a&gt; (&lt;a href=&quot;language-haskell-th-syntax#v:mkName&quot;&gt;mkName&lt;/a&gt; &quot;a&quot;) ]&lt;/code&gt; produces every available instance of &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reifyInstances ''Show [ &lt;a href=&quot;language-haskell-th-syntax#v:VarT&quot;&gt;VarT&lt;/a&gt; (&lt;a href=&quot;language-haskell-th-syntax#v:mkName&quot;&gt;mkName&lt;/a&gt; &quot;a&quot;) ]&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; 利用可能なすべてのインスタンスを生成します</target>
        </trans-unit>
        <trans-unit id="8593931ee33b1f35174c28ea1bd5868e84bf8fdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyInstances nm tys&lt;/code&gt; returns a list of visible instances of &lt;code&gt;nm tys&lt;/code&gt;. That is, if &lt;code&gt;nm&lt;/code&gt; is the name of a type class, then all instances of this class at the types &lt;code&gt;tys&lt;/code&gt; are returned. Alternatively, if &lt;code&gt;nm&lt;/code&gt; is the name of a data family or type family, all instances of this family at the types &lt;code&gt;tys&lt;/code&gt; are returned.</source>
          <target state="translated">&lt;code&gt;reifyInstances nm tys&lt;/code&gt; 可視インスタンスのリストを返し &lt;code&gt;nm tys&lt;/code&gt; 。つまり、 &lt;code&gt;nm&lt;/code&gt; が型クラスの名前である場合、型 &lt;code&gt;tys&lt;/code&gt; でのこのクラスのすべてのインスタンスが返されます。または、 &lt;code&gt;nm&lt;/code&gt; がデータファミリまたはタイプファミリの名前である場合、タイプ &lt;code&gt;tys&lt;/code&gt; でのこのファミリのすべてのインスタンスが返されます。</target>
        </trans-unit>
        <trans-unit id="fe13212d92928e6f52708e4eaf0d3c36fed210dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyModule mod&lt;/code&gt; looks up information about module &lt;code&gt;mod&lt;/code&gt;. To look up the current module, call this function with the return value of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/template-haskell-2.16.0.0/Language-Haskell-TH-Lib.html#v:thisModule&quot;&gt;thisModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reifyModule mod&lt;/code&gt; は、モジュール &lt;code&gt;mod&lt;/code&gt; に関する情報を検索します。現在のモジュールを検索するには、 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/template-haskell-2.16.0.0/Language-Haskell-TH-Lib.html#v:thisModule&quot;&gt;thisModule&lt;/a&gt;&lt;/code&gt; の戻り値を使用してこの関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="b0d42ac930e50199fc7453bb2278f37f2da1f282" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyModule mod&lt;/code&gt; looks up information about module &lt;code&gt;mod&lt;/code&gt;. To look up the current module, call this function with the return value of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/template-haskell-2.15.0.0/Language-Haskell-TH-Lib.html#v:thisModule&quot;&gt;thisModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reifyModule mod&lt;/code&gt; はモジュール &lt;code&gt;mod&lt;/code&gt; に関する情報を検索します。現在のモジュールを検索するには、 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/template-haskell-2.15.0.0/Language-Haskell-TH-Lib.html#v:thisModule&quot;&gt;thisModule&lt;/a&gt;&lt;/code&gt; の戻り値を指定してこの関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="4cf6eed65eb8fad9a8ff7cbf474172f45cb8b5e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyModule mod&lt;/code&gt; looks up information about module &lt;code&gt;mod&lt;/code&gt;. To look up the current module, call this function with the return value of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/template-haskell-2.17.0.0/Language-Haskell-TH-Lib.html#v:thisModule&quot;&gt;thisModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reifyModule mod&lt;/code&gt; は、モジュール &lt;code&gt;mod&lt;/code&gt; に関する情報を検索します。現在のモジュールを検索するには、 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/template-haskell-2.17.0.0/Language-Haskell-TH-Lib.html#v:thisModule&quot;&gt;thisModule&lt;/a&gt;&lt;/code&gt; の戻り値を使用してこの関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="575396fa065d49a249a7e28aff7323762a2a438f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyRoles nm&lt;/code&gt; returns the list of roles associated with the parameters of the tycon &lt;code&gt;nm&lt;/code&gt;. Fails if &lt;code&gt;nm&lt;/code&gt; cannot be found or is not a tycon. The returned list should never contain &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:InferR&quot;&gt;InferR&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reifyRoles nm&lt;/code&gt; 戻っtyconののパラメータに関連付けられているロールのリスト &lt;code&gt;nm&lt;/code&gt; 。場合は失敗 &lt;code&gt;nm&lt;/code&gt; 見つからないか、tyconではありません。返されるリストに &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:InferR&quot;&gt;InferR&lt;/a&gt;&lt;/code&gt; が含まれることはありません。</target>
        </trans-unit>
        <trans-unit id="3965028a5f0f0e3fcee0452d77c2e97741ed567e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyRoles nm&lt;/code&gt; returns the list of roles associated with the parameters of the tycon &lt;code&gt;nm&lt;/code&gt;. Fails if &lt;code&gt;nm&lt;/code&gt; cannot be found or is not a tycon. The returned list should never contain &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:InferR&quot;&gt;InferR&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reifyRoles nm&lt;/code&gt; 戻っtyconののパラメータに関連付けられているロールのリスト &lt;code&gt;nm&lt;/code&gt; 。場合は失敗 &lt;code&gt;nm&lt;/code&gt; 見つからないか、tyconではありません。返されるリストに &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:InferR&quot;&gt;InferR&lt;/a&gt;&lt;/code&gt; が含まれることはありません。</target>
        </trans-unit>
        <trans-unit id="ddad94b6096b603419ff17e7f786616da7e08e0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyType nm&lt;/code&gt; attempts to find the type or kind of &lt;code&gt;nm&lt;/code&gt;. For example, &lt;code&gt;reifyType 'not&lt;/code&gt; returns &lt;code&gt;Bool -&amp;gt; Bool&lt;/code&gt;, and &lt;code&gt;reifyType ''Bool&lt;/code&gt; returns &lt;code&gt;Type&lt;/code&gt;. This works even if there's no explicit signature and the type or kind is inferred.</source>
          <target state="translated">&lt;code&gt;reifyType nm&lt;/code&gt; の種類や種類を見つけるための試み &lt;code&gt;nm&lt;/code&gt; 。たとえば、 &lt;code&gt;reifyType 'not&lt;/code&gt; &lt;code&gt;Bool -&amp;gt; Bool&lt;/code&gt; 返しません。また、 &lt;code&gt;reifyType ''Bool&lt;/code&gt; は &lt;code&gt;Type&lt;/code&gt; を返します。これは、明示的な署名がなく、タイプまたは種類が推測されている場合でも機能します。</target>
        </trans-unit>
        <trans-unit id="0aaf5a16b5281de946b561ad54cd72f255f67752" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remote-iserv&lt;/code&gt; needs to be built with the cross compiler to be executed on the remote host. Or in the case of using it on the same host the stage2 compiler will do as well.</source>
          <target state="translated">&lt;code&gt;remote-iserv&lt;/code&gt; は、リモートホストで実行するためにクロスコンパイラで構築する必要があります。または、同じホストで使用する場合は、stage2コンパイラも同様に機能します。</target>
        </trans-unit>
        <trans-unit id="f9d448e97359782a5dbe07e79da2577eca574e63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;removeLink path&lt;/code&gt; removes the link named &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;removeLink path&lt;/code&gt; は、pathという名前のリンクを削除し &lt;code&gt;path&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="550bb511ad425f8c4f3c908fe6da9909ef7c475c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rename old new&lt;/code&gt; renames a file or directory from &lt;code&gt;old&lt;/code&gt; to &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rename old new&lt;/code&gt; 名前の変更にからファイルまたはディレクトリ &lt;code&gt;old&lt;/code&gt; の &lt;code&gt;new&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="155b28beb538e403a66daa23e12f814af17aba07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replacement&lt;/code&gt; to replace &lt;code&gt;needle&lt;/code&gt; with.</source>
          <target state="translated">&lt;code&gt;replacement&lt;/code&gt; &lt;code&gt;needle&lt;/code&gt; を交換するための交換。</target>
        </trans-unit>
        <trans-unit id="7f0128115331b20e25affae6e3881f81b8878341" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return_type&lt;/code&gt; is a type that is not allowed to have &lt;code&gt;forall&lt;/code&gt;s, &lt;code&gt;=&amp;gt;&lt;/code&gt;s, or &lt;code&gt;-&amp;gt;&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;return_type&lt;/code&gt; は、 &lt;code&gt;forall&lt;/code&gt; s、 &lt;code&gt;=&amp;gt;&lt;/code&gt; s、または &lt;code&gt;-&amp;gt;&lt;/code&gt; sを持つことが許可されていない型です。</target>
        </trans-unit>
        <trans-unit id="ba4e244589f4c5565cb799374bf758dedf3facf4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rewindDirStream dp&lt;/code&gt; calls &lt;code&gt;rewinddir&lt;/code&gt; to reposition the directory stream &lt;code&gt;dp&lt;/code&gt; at the beginning of the directory.</source>
          <target state="translated">&lt;code&gt;rewindDirStream dp&lt;/code&gt; は &lt;code&gt;rewinddir&lt;/code&gt; を呼び出して、ディレクトリストリーム &lt;code&gt;dp&lt;/code&gt; をディレクトリの先頭に再配置します。</target>
        </trans-unit>
        <trans-unit id="bee3ee293e4f137dbc8b105d9ba4102b86baba79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;runInteractiveProcess&lt;/code&gt; blocks signals around the fork(). Since blocking/unblocking of signals is a global state operation, we need to ensure mutual exclusion of calls to &lt;code&gt;runInteractiveProcess&lt;/code&gt;. This lock is exported so that other libraries which also need to fork() (and also need to make the same global state changes) can protect their changes with the same lock. See &lt;a href=&quot;https://github.com/haskell/process/pull/154&quot;&gt;https://github.com/haskell/process/pull/154&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;runInteractiveProcess&lt;/code&gt; は、fork（）の周囲の信号をブロックします。シグナルのブロック/ブロック解除はグローバルな状態操作であるため、 &lt;code&gt;runInteractiveProcess&lt;/code&gt; への呼び出しを相互に除外する必要があります。このロックがエクスポートされるので、fork（）を必要とする（そして同じグローバル状態の変更を行う必要もある）他のライブラリも、同じロックでそれらの変更を保護できます。&lt;a href=&quot;https://github.com/haskell/process/pull/154&quot;&gt;https://github.com/haskell/process/pull/154を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="34289d913a16bfedba5ca3d6752f02385b8b653b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;runghc&lt;/code&gt; allows you to run Haskell programs without first having to compile them.</source>
          <target state="translated">&lt;code&gt;runghc&lt;/code&gt; を使用すると、最初にコンパイルすることなくHaskellプログラムを実行できます。</target>
        </trans-unit>
        <trans-unit id="b84851a67c47a052297b1232f321d809608f6e15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s1 .. sm&lt;/code&gt; do not contain any type family constructors,</source>
          <target state="translated">&lt;code&gt;s1 .. sm&lt;/code&gt; はタイプファミリーコンストラクターが含まれていません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
