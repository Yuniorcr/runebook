<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="haskell">
    <body>
      <group id="haskell">
        <trans-unit id="a92d8a22678d1ed93d3ed9de1a9610c7120b9ecd" translate="yes" xml:space="preserve">
          <source>Signal a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#t:TSem&quot;&gt;TSem&lt;/a&gt;&lt;/code&gt; (aka &lt;strong&gt;V&lt;/strong&gt; operation).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#t:TSem&quot;&gt;TSem&lt;/a&gt;&lt;/code&gt; （別名&lt;strong&gt;V&lt;/strong&gt;操作）に信号を送ります。</target>
        </trans-unit>
        <trans-unit id="7faf1744de6593083507c993ee402428da616138" translate="yes" xml:space="preserve">
          <source>Signal an error value &lt;code&gt;e&lt;/code&gt;.</source>
          <target state="translated">エラー値 &lt;code&gt;e&lt;/code&gt; を通知します。</target>
        </trans-unit>
        <trans-unit id="0ab0be7390844491a378148aa0a0ec27a51e7fd3" translate="yes" xml:space="preserve">
          <source>Signal an exception value &lt;code&gt;e&lt;/code&gt;.</source>
          <target state="translated">例外値 &lt;code&gt;e&lt;/code&gt; を通知します。</target>
        </trans-unit>
        <trans-unit id="43dcfb7f770264df5121067ff7e41f7762b823ad" translate="yes" xml:space="preserve">
          <source>Signal sets</source>
          <target state="translated">信号セット</target>
        </trans-unit>
        <trans-unit id="6e2b0250c7c005748eaa4ac67266b3f863754cec" translate="yes" xml:space="preserve">
          <source>Signal that a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; chunk should be inserted directly.</source>
          <target state="translated">その信号 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; のチャンクを直接挿入する必要があります。</target>
        </trans-unit>
        <trans-unit id="ba54c581a3f441c65c92e2baee812d0da04ee381" translate="yes" xml:space="preserve">
          <source>Signal that a given quantity is now available from the &lt;code&gt;&lt;a href=&quot;control-concurrent-qsemn#t:QSemN&quot;&gt;QSemN&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">指定された数量が &lt;code&gt;&lt;a href=&quot;control-concurrent-qsemn#t:QSemN&quot;&gt;QSemN&lt;/a&gt;&lt;/code&gt; から入手可能になったことを通知します。</target>
        </trans-unit>
        <trans-unit id="87a1485810fd26f94cc9f0ff238a3ba2bfc6f646" translate="yes" xml:space="preserve">
          <source>Signal that a unit of the &lt;code&gt;&lt;a href=&quot;control-concurrent-qsem#t:QSem&quot;&gt;QSem&lt;/a&gt;&lt;/code&gt; is available</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-qsem#t:QSem&quot;&gt;QSem&lt;/a&gt;&lt;/code&gt; のユニットが利用可能であることを示す</target>
        </trans-unit>
        <trans-unit id="d05d125580c039448902d54c1d68c6ed10aab430" translate="yes" xml:space="preserve">
          <source>Signal that the current &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BuildStep&quot;&gt;BuildStep&lt;/a&gt;&lt;/code&gt; is done and has computed a value.</source>
          <target state="translated">現在の &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BuildStep&quot;&gt;BuildStep&lt;/a&gt;&lt;/code&gt; が完了し、値を計算したことを通知します。</target>
        </trans-unit>
        <trans-unit id="b25333c40d4e76fdfd2b926091d37059f28e4458" translate="yes" xml:space="preserve">
          <source>Signal that the current buffer is full.</source>
          <target state="translated">現在のバッファが一杯になったことを示します。</target>
        </trans-unit>
        <trans-unit id="bda1defb0bfaa6f6f05508c2913b7399ffccc4a9" translate="yes" xml:space="preserve">
          <source>SignalInfo</source>
          <target state="translated">SignalInfo</target>
        </trans-unit>
        <trans-unit id="1f55553112777d173b17ae22b112315b87d8850d" translate="yes" xml:space="preserve">
          <source>SignalSet</source>
          <target state="translated">SignalSet</target>
        </trans-unit>
        <trans-unit id="b915c6d49b21a224f21cc001eaea59c0a767a9cd" translate="yes" xml:space="preserve">
          <source>SignalSpecificInfo</source>
          <target state="translated">SignalSpecificInfo</target>
        </trans-unit>
        <trans-unit id="ccb47cd46d649568155cc014dfdf759a79c80d54" translate="yes" xml:space="preserve">
          <source>Signature of the &lt;code&gt;callCC&lt;/code&gt; operation, introduced in &lt;a href=&quot;control-monad-trans-cont&quot;&gt;Control.Monad.Trans.Cont&lt;/a&gt;. Any lifting function &lt;code&gt;liftCallCC&lt;/code&gt; should satisfy</source>
          <target state="translated">&lt;a href=&quot;control-monad-trans-cont&quot;&gt;Control.Monad.Trans.Cont&lt;/a&gt;で導入された &lt;code&gt;callCC&lt;/code&gt; 操作の署名。すべてのリフティング関数 &lt;code&gt;liftCallCC&lt;/code&gt; は、</target>
        </trans-unit>
        <trans-unit id="dc072b7ced69fef99c753d561d3b128bff762047" translate="yes" xml:space="preserve">
          <source>Signature of the &lt;code&gt;catchE&lt;/code&gt; operation, introduced in &lt;a href=&quot;control-monad-trans-except&quot;&gt;Control.Monad.Trans.Except&lt;/a&gt;. Any lifting function &lt;code&gt;liftCatch&lt;/code&gt; should satisfy</source>
          <target state="translated">&lt;a href=&quot;control-monad-trans-except&quot;&gt;Control.Monad.Trans.Except&lt;/a&gt;で導入された &lt;code&gt;catchE&lt;/code&gt; 操作のシグネチャ。すべてのリフティング関数 &lt;code&gt;liftCatch&lt;/code&gt; は、</target>
        </trans-unit>
        <trans-unit id="06ced7472a7d98b2992e44e905e9851d04e1f27c" translate="yes" xml:space="preserve">
          <source>Signature of the &lt;code&gt;listen&lt;/code&gt; operation, introduced in &lt;a href=&quot;control-monad-trans-writer&quot;&gt;Control.Monad.Trans.Writer&lt;/a&gt;. Any lifting function &lt;code&gt;liftListen&lt;/code&gt; should satisfy</source>
          <target state="translated">署名 &lt;code&gt;listen&lt;/code&gt; に導入された操作、&lt;a href=&quot;control-monad-trans-writer&quot;&gt;Control.Monad.Trans.Writer&lt;/a&gt;。すべてのリフティング関数 &lt;code&gt;liftListen&lt;/code&gt; は、</target>
        </trans-unit>
        <trans-unit id="471a6524bc858a0af7e9c23b213e515b816b6af8" translate="yes" xml:space="preserve">
          <source>Signature of the &lt;code&gt;pass&lt;/code&gt; operation, introduced in &lt;a href=&quot;control-monad-trans-writer&quot;&gt;Control.Monad.Trans.Writer&lt;/a&gt;. Any lifting function &lt;code&gt;liftPass&lt;/code&gt; should satisfy</source>
          <target state="translated">&lt;code&gt;pass&lt;/code&gt; 操作の署名&lt;a href=&quot;control-monad-trans-writer&quot;&gt;。Control.Monad.Trans.Writer&lt;/a&gt;で導入されました。すべてのリフティング関数 &lt;code&gt;liftPass&lt;/code&gt; は、</target>
        </trans-unit>
        <trans-unit id="b6d3726f623c40a8cabcc16cb52ff7c79549a1d8" translate="yes" xml:space="preserve">
          <source>Signatures are the basic trick; putting them on exported, top-level functions is good software-engineering practice, anyway. (Tip: using the &lt;a href=&quot;using-warnings#ghc-flag--Wmissing-signatures&quot;&gt;&lt;code&gt;-Wmissing-signatures&lt;/code&gt;&lt;/a&gt; option can help enforce good signature-practice).</source>
          <target state="translated">署名は基本的なトリックです。とにかく、それらをエクスポートされたトップレベルの関数に配置することは、優れたソフトウェアエンジニアリング手法です。（ヒント：&lt;a href=&quot;using-warnings#ghc-flag--Wmissing-signatures&quot;&gt; &lt;code&gt;-Wmissing-signatures&lt;/code&gt; &lt;/a&gt;オプションを使用すると、適切な署名実践を実施できます）。</target>
        </trans-unit>
        <trans-unit id="bd4dc91b9095e590c4c59400be8d1e0092a3123d" translate="yes" xml:space="preserve">
          <source>Signatures for monad operations that require specialized lifting. Each signature has a uniformity property that the lifting should satisfy.</source>
          <target state="translated">特殊なリフティングを必要とするモナド操作のためのシグネチャ。各シグネチャは、リフティングが満たすべき一様性の特性を持っています。</target>
        </trans-unit>
        <trans-unit id="c8655a56d33a88ccca3424a80c2615a1309c9dd5" translate="yes" xml:space="preserve">
          <source>Signed integer types</source>
          <target state="translated">符号付き整数型</target>
        </trans-unit>
        <trans-unit id="bc8f7713be6f647392fbe5ee79a3aa6f63e743ad" translate="yes" xml:space="preserve">
          <source>Similar restrictions apply on import.</source>
          <target state="translated">輸入についても同様の制限があります。</target>
        </trans-unit>
        <trans-unit id="8bc3ab3ec0d3f059d92afcca7a240673aeb581b4" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;#include&lt;/code&gt;. Note that &lt;code&gt;#includes&lt;/code&gt; and &lt;code&gt;#defines&lt;/code&gt; may be put in the same file twice so they should not assume otherwise.</source>
          <target state="translated">&lt;code&gt;#include&lt;/code&gt; に似ています。注意 &lt;code&gt;#includes&lt;/code&gt; と &lt;code&gt;#defines&lt;/code&gt; 、彼らはそうと仮定してはならないので、二度同じファイルに格納することができます。</target>
        </trans-unit>
        <trans-unit id="f8b7c34ef6b3ef4b139d142b36f5ca52bb618fdd" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;../filepath-1.4.2.1/system-filepath#v:normalise&quot;&gt;normalise&lt;/a&gt;&lt;/code&gt;, passing an empty path is equivalent to passing the current directory.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../filepath-1.4.2.1/system-filepath#v:normalise&quot;&gt;normalise&lt;/a&gt;&lt;/code&gt; と同様に、空のパスを渡すことは、現在のディレクトリを渡すことと同じです。</target>
        </trans-unit>
        <trans-unit id="27ef37da227875b38c1dff73e9e1be77cc836490" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;../filepath-1.4.2.1/system-filepath-posix#v:normalise&quot;&gt;normalise&lt;/a&gt;&lt;/code&gt; but empty paths stay empty.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../filepath-1.4.2.1/system-filepath-posix#v:normalise&quot;&gt;normalise&lt;/a&gt;&lt;/code&gt; 似ていますが、空のパスは空のままです。</target>
        </trans-unit>
        <trans-unit id="6e0ed3ab56de8039cd55c5a996d69854f97e5b41" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;../filepath-1.4.2.1/system-filepath-posix#v:normalise&quot;&gt;normalise&lt;/a&gt;&lt;/code&gt; but:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../filepath-1.4.2.1/system-filepath-posix#v:normalise&quot;&gt;normalise&lt;/a&gt;&lt;/code&gt; 似ていますが：</target>
        </trans-unit>
        <trans-unit id="542f31f014f92fc9ae9375f7fa3f84eba434a89d" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt;, but returns an &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; result which is &lt;code&gt;(&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt; a)&lt;/code&gt; if no exception of type &lt;code&gt;e&lt;/code&gt; was raised, or &lt;code&gt;(&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt; ex)&lt;/code&gt; if an exception of type &lt;code&gt;e&lt;/code&gt; was raised and its value is &lt;code&gt;ex&lt;/code&gt;. If any other type of exception is raised than it will be propogated up to the next enclosing exception handler.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; に似ていますが、 &lt;code&gt;(&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt; a)&lt;/code&gt; &lt;a href=&quot;data-either#v:Right&quot;&gt;右&lt;/a&gt; a）タイプ &lt;code&gt;e&lt;/code&gt; の例外が発生しなかった場合、または &lt;code&gt;(&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt; ex)&lt;/code&gt; &lt;a href=&quot;data-either#v:Left&quot;&gt;左&lt;/a&gt; ex）タイプ &lt;code&gt;e&lt;/code&gt; の例外が発生し、その値が &lt;code&gt;ex&lt;/code&gt; である場合、 &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; 結果を返します。他のタイプの例外が発生した場合、それが次の例外ハンドラーに伝達されます。</target>
        </trans-unit>
        <trans-unit id="16fc786828b7d4406df1094871a854dcefa83108" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt;, but returns an &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; result which is &lt;code&gt;(&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt; a)&lt;/code&gt; if no exception of type &lt;code&gt;e&lt;/code&gt; was raised, or &lt;code&gt;(&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt; ex)&lt;/code&gt; if an exception of type &lt;code&gt;e&lt;/code&gt; was raised and its value is &lt;code&gt;ex&lt;/code&gt;. If any other type of exception is raised then it will be propagated up to the next enclosing exception handler.</source>
          <target state="translated">同様に &lt;code&gt;&lt;a href=&quot;control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; 、しかし戻っ &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; ある結果 &lt;code&gt;(&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt; a)&lt;/code&gt; タイプの例外場合 &lt;code&gt;e&lt;/code&gt; は上げていない、またはされた &lt;code&gt;(&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt; ex)&lt;/code&gt; 型の例外場合は &lt;code&gt;e&lt;/code&gt; が上昇し、その値がされた &lt;code&gt;ex&lt;/code&gt; 。他のタイプの例外が発生した場合、それは次に囲まれている例外ハンドラーまで伝播されます。</target>
        </trans-unit>
        <trans-unit id="ca51e5585eb7b02179db77af4a26e05f8bc673d0" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt;, but returns an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; result. See &lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;'s &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-catch#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; に似ていますが、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; の結果を返します。&lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;の &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e4d84c2c39a8dcfa738d414b615b32ad502c84c0" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt;, but returns an &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; result. See &lt;a href=&quot;../base-4.15.0.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;'s &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-catch#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; に似ていますが、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; の結果を返します。&lt;a href=&quot;../base-4.15.0.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;の &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="4f9cc64c05ae9436759ac2ecebecd00d3e18f356" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;data-bytestring#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt; except that it will never block. Instead it returns any tail that did not get written. This tail may be &lt;code&gt;&lt;a href=&quot;data-bytestring#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; in the case that the whole string was written, or the whole original string if nothing was written. Partial writes are also possible.</source>
          <target state="translated">ブロックしないことを除いて、 &lt;code&gt;&lt;a href=&quot;data-bytestring#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt; と同様です。代わりに、書き込まれなかった尾を返します。文字列全体が書き込まれた場合、このテールは &lt;code&gt;&lt;a href=&quot;data-bytestring#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; になるか、何も書き込まれなかった場合、元の文字列全体が空になります。部分的な書き込みも可能です。</target>
        </trans-unit>
        <trans-unit id="10e97da418a5d2e3bf30cb52703ec9c3b35b2eb0" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt; except that it will never block. Instead it returns any tail that did not get written. This tail may be &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; in the case that the whole string was written, or the whole original string if nothing was written. Partial writes are also possible.</source>
          <target state="translated">ブロックしないことを除いて、 &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt; と同様です。代わりに、書き込まれなかった尾を返します。文字列全体が書き込まれた場合、このテールは &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; になるか、何も書き込まれなかった場合、元の文字列全体が空になります。部分的な書き込みも可能です。</target>
        </trans-unit>
        <trans-unit id="baa221a6563e815403c24a3304f99b1901e309ba" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt; except that it will never block. Instead it returns any tail that did not get written. This tail may be &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; in the case that the whole string was written, or the whole original string if nothing was written. Partial writes are also possible.</source>
          <target state="translated">ブロックしないことを除いて、 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt; と同様です。代わりに、書き込まれなかった尾を返します。文字列全体が書き込まれた場合、このテールは &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; になるか、何も書き込まれなかった場合、元の文字列全体が空になります。部分的な書き込みも可能です。</target>
        </trans-unit>
        <trans-unit id="2d8a8c139d044bfc97649150358b7d46c85a7c02" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt; except that it will never block. Instead it returns any tail that did not get written. This tail may be &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; in the case that the whole string was written, or the whole original string if nothing was written. Partial writes are also possible.</source>
          <target state="translated">ブロックしないことを除いて、 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt; と同様です。代わりに、書き込まれなかった尾を返します。文字列全体が書き込まれた場合、このテールは &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; になるか、何も書き込まれなかった場合、元の文字列全体が空になります。部分的な書き込みも可能です。</target>
        </trans-unit>
        <trans-unit id="b6812700ce6836af8ea820cf5a8f555d5a5fdeaa" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;system-directory#v:getXdgDirectory&quot;&gt;getXdgDirectory&lt;/a&gt;&lt;/code&gt; but retrieves the entire list of XDG directories.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:getXdgDirectory&quot;&gt;getXdgDirectory&lt;/a&gt;&lt;/code&gt; に似ていますが、XDGディレクトリのリスト全体を取得します。</target>
        </trans-unit>
        <trans-unit id="57e43ed99c85f1b0d39406105fc8f61e36899564" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;system-directory#v:listDirectory&quot;&gt;listDirectory&lt;/a&gt;&lt;/code&gt;, but always includes the special entries (&lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt;). (This applies to Windows as well.)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:listDirectory&quot;&gt;listDirectory&lt;/a&gt;&lt;/code&gt; に似ていますが、常に特別なエントリ（ &lt;code&gt;.&lt;/code&gt; および &lt;code&gt;..&lt;/code&gt; ）が含まれます。（これはWindowsにも適用されます。）</target>
        </trans-unit>
        <trans-unit id="660dc82ff3b0b468cc9930547529586e8470e00e" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt;, but returns an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; result which is &lt;code&gt;(&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt; a)&lt;/code&gt; if no exception of type &lt;code&gt;e&lt;/code&gt; was raised, or &lt;code&gt;(&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt; ex)&lt;/code&gt; if an exception of type &lt;code&gt;e&lt;/code&gt; was raised and its value is &lt;code&gt;ex&lt;/code&gt;. If any other type of exception is raised than it will be propogated up to the next enclosing exception handler.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; に似ていますが、 &lt;code&gt;(&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt; a)&lt;/code&gt; &lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;右&lt;/a&gt; a）タイプ &lt;code&gt;e&lt;/code&gt; の例外が発生しなかった場合、または &lt;code&gt;(&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt; ex)&lt;/code&gt; &lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;左&lt;/a&gt; ex）タイプ &lt;code&gt;e&lt;/code&gt; の例外が発生し、その値が &lt;code&gt;ex&lt;/code&gt; である場合、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; 結果を返します。他のタイプの例外が発生した場合、それが次の例外ハンドラーに伝達されます。</target>
        </trans-unit>
        <trans-unit id="3589f418a0ca3d773922bd7ac92e0b76a5d98393" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt;, but returns an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; result which is &lt;code&gt;(&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt; a)&lt;/code&gt; if no exception of type &lt;code&gt;e&lt;/code&gt; was raised, or &lt;code&gt;(&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt; ex)&lt;/code&gt; if an exception of type &lt;code&gt;e&lt;/code&gt; was raised and its value is &lt;code&gt;ex&lt;/code&gt;. If any other type of exception is raised than it will be propogated up to the next enclosing exception handler.</source>
          <target state="translated">同様に &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; 、しかし戻っ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; ある結果 &lt;code&gt;(&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt; a)&lt;/code&gt; タイプの例外場合 &lt;code&gt;e&lt;/code&gt; は上げていない、またはされた &lt;code&gt;(&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt; ex)&lt;/code&gt; 型の例外場合は &lt;code&gt;e&lt;/code&gt; が上昇し、その値がされた &lt;code&gt;ex&lt;/code&gt; 。他のタイプの例外が発生した場合、それは次の包含例外ハンドラーまで伝播されます。</target>
        </trans-unit>
        <trans-unit id="f1a2da99fa330831827d9b6394372755d8d5e3b8" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt;, but returns an &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; result which is &lt;code&gt;(&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt; a)&lt;/code&gt; if no exception of type &lt;code&gt;e&lt;/code&gt; was raised, or &lt;code&gt;(&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt; ex)&lt;/code&gt; if an exception of type &lt;code&gt;e&lt;/code&gt; was raised and its value is &lt;code&gt;ex&lt;/code&gt;. If any other type of exception is raised then it will be propagated up to the next enclosing exception handler.</source>
          <target state="translated">同様に &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; 、しかし戻っ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; ある結果 &lt;code&gt;(&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt; a)&lt;/code&gt; タイプの例外場合 &lt;code&gt;e&lt;/code&gt; は上げていない、またはされた &lt;code&gt;(&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt; ex)&lt;/code&gt; 型の例外場合は &lt;code&gt;e&lt;/code&gt; が上昇し、その値がされた &lt;code&gt;ex&lt;/code&gt; 。他のタイプの例外が発生した場合、それは次に囲まれている例外ハンドラーまで伝播されます。</target>
        </trans-unit>
        <trans-unit id="90e03b9a7a228a53dbb39e14a73fe6f20f226d8b" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; but only catches a specify kind of &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; as specified by the predicate.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; に似ていますが、述語で指定された特定の種類の &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; のみをキャッチします。</target>
        </trans-unit>
        <trans-unit id="6316de3946f0281c76f7f074401dd37726631f7b" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;system-environment#v:lookupEnv&quot;&gt;lookupEnv&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-environment#v:lookupEnv&quot;&gt;lookupEnv&lt;/a&gt;&lt;/code&gt; に似ています。</target>
        </trans-unit>
        <trans-unit id="4978e69224854cb1188b7b6a6a5fd8277344aa82" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;text-printf#v:printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt;, except that output is via the specified &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;. The return type is restricted to &lt;code&gt;(&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt; a)&lt;/code&gt;.</source>
          <target state="translated">出力が指定された &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; を介することを除いて、 &lt;code&gt;&lt;a href=&quot;text-printf#v:printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; と同様です。戻り値の型は &lt;code&gt;(&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt; a)&lt;/code&gt; &lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt; a）に制限されています。</target>
        </trans-unit>
        <trans-unit id="ca1cb31f24046f8e92a3161a42917732c72704cd" translate="yes" xml:space="preserve">
          <source>Similar to a package&amp;rsquo;s hidden status is a package&amp;rsquo;s trusted status. A package can be either trusted or not trusted (distrusted). By default packages are distrusted. This property of a package only plays a role when compiling code using GHC&amp;rsquo;s Safe Haskell feature (see &lt;a href=&quot;exts/safe_haskell#safe-haskell&quot;&gt;Safe Haskell&lt;/a&gt;) with the &lt;code&gt;-fpackage-trust&lt;/code&gt; flag enabled.</source>
          <target state="translated">パッケージの非表示ステータスと同様に、パッケージの信頼済みステータスがあります。パッケージは、信頼できる場合と信頼できない（信頼できない）場合があります。デフォルトでは、パッケージは信頼されていません。パッケージのこのプロパティは、 &lt;code&gt;-fpackage-trust&lt;/code&gt; フラグを有効にしてGHCのSafe Haskell機能（&lt;a href=&quot;exts/safe_haskell#safe-haskell&quot;&gt;Safe Haskellを&lt;/a&gt;参照）を使用してコードをコンパイルする場合にのみ役割を果たします。</target>
        </trans-unit>
        <trans-unit id="229ca7cf384e50c25f3b1100a99987d2dacc4e24" translate="yes" xml:space="preserve">
          <source>Similar to a package&amp;rsquo;s hidden status is a package&amp;rsquo;s trusted status. A package can be either trusted or not trusted (distrusted). By default packages are distrusted. This property of a package only plays a role when compiling code using GHC&amp;rsquo;s Safe Haskell feature (see &lt;a href=&quot;safe_haskell#safe-haskell&quot;&gt;Safe Haskell&lt;/a&gt;) with the &lt;code&gt;-fpackage-trust&lt;/code&gt; flag enabled.</source>
          <target state="translated">パッケージの非表示ステータスと同様に、パッケージの信頼ステータスです。パッケージは、信頼されているか、信頼されていない（信頼されていない）かのいずれかです。デフォルトでは、パッケージは信頼されていません。パッケージのこのプロパティは、 &lt;code&gt;-fpackage-trust&lt;/code&gt; フラグを有効にしてGHCのSafe Haskell機能（&lt;a href=&quot;safe_haskell#safe-haskell&quot;&gt;Safe Haskellを&lt;/a&gt;参照）を使用してコードをコンパイルするときにのみ役割を果たします。</target>
        </trans-unit>
        <trans-unit id="9fea15c634779ed02f2440e6b6a59fcff27bc989" translate="yes" xml:space="preserve">
          <source>Similar warnings are given for a redundant constraint in an instance declaration.</source>
          <target state="translated">インスタンス宣言の冗長な制約についても同様の警告があります。</target>
        </trans-unit>
        <trans-unit id="0df5b62317eeac762d6d8de8ded61c204a2aa13c" translate="yes" xml:space="preserve">
          <source>Similarly</source>
          <target state="translated">Similarly</target>
        </trans-unit>
        <trans-unit id="4e756760c448cbb0ee811c4780b862558ba85c10" translate="yes" xml:space="preserve">
          <source>Similarly for &lt;code&gt;&lt;em&gt;mb_stdout_hdl&lt;/em&gt;&lt;/code&gt; and &lt;code&gt;&lt;em&gt;mb_stderr_hdl&lt;/em&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;mb_stdout_hdl&lt;/em&gt;&lt;/code&gt; および &lt;code&gt;&lt;em&gt;mb_stderr_hdl&lt;/em&gt;&lt;/code&gt; の場合も同様です。</target>
        </trans-unit>
        <trans-unit id="53f860fbf15691abee95cb74212d38c8ffab7717" translate="yes" xml:space="preserve">
          <source>Similarly for poke. It will have the type &lt;code&gt;Storable b =&amp;gt; Ptr a -&amp;gt; b -&amp;gt; IO ()&lt;/code&gt;.</source>
          <target state="translated">同様に突く。タイプは &lt;code&gt;Storable b =&amp;gt; Ptr a -&amp;gt; b -&amp;gt; IO ()&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="c13e26d695f984b0c2425fb184a24bdbb38e9680" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;a href=&quot;#extension-ScopedTypeVariables&quot;&gt;&lt;code&gt;ScopedTypeVariables&lt;/code&gt;&lt;/a&gt; is not required for type variables from the top of the class or instance declaration to scope over associated type families, which only requires the &lt;a href=&quot;type_families#extension-TypeFamilies&quot;&gt;&lt;code&gt;TypeFamilies&lt;/code&gt;&lt;/a&gt; extension. For instance, the following will be accepted without explicitly enabling &lt;a href=&quot;#extension-ScopedTypeVariables&quot;&gt;&lt;code&gt;ScopedTypeVariables&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">同様に、&lt;a href=&quot;#extension-ScopedTypeVariables&quot;&gt; &lt;code&gt;ScopedTypeVariables&lt;/code&gt; &lt;/a&gt;は、クラスまたはインスタンス宣言の最上位から、関連付けられた型族をスコープするための型変数には必要ありません。これには、&lt;a href=&quot;type_families#extension-TypeFamilies&quot;&gt; &lt;code&gt;TypeFamilies&lt;/code&gt; &lt;/a&gt;拡張機能のみが必要です。たとえば、&lt;a href=&quot;#extension-ScopedTypeVariables&quot;&gt; &lt;code&gt;ScopedTypeVariables&lt;/code&gt; &lt;/a&gt;を明示的に有効にしなくても、次のことが受け入れられます。</target>
        </trans-unit>
        <trans-unit id="7f5da1209277a14bc9b96e35323cc3bfe53d401e" translate="yes" xml:space="preserve">
          <source>Similarly, concrete representations of versions may differ. One possible concrete representation is provided (see &lt;code&gt;&lt;a href=&quot;data-version#v:showVersion&quot;&gt;showVersion&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-version#v:parseVersion&quot;&gt;parseVersion&lt;/a&gt;&lt;/code&gt;), but depending on the application a different concrete representation may be more appropriate.</source>
          <target state="translated">同様に、バージョンの具体的な表現は異なる場合があります。1つの具体的な表現が提供されていますが（ &lt;code&gt;&lt;a href=&quot;data-version#v:showVersion&quot;&gt;showVersion&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;data-version#v:parseVersion&quot;&gt;parseVersion&lt;/a&gt;&lt;/code&gt; を参照）、アプリケーションによっては、異なる具体的な表現の方が適切な場合があります。</target>
        </trans-unit>
        <trans-unit id="7782df4729eeb27c498e54c2f81044f0eb23e82f" translate="yes" xml:space="preserve">
          <source>Similarly, each flag could yield a monadic function transforming a record, of type &lt;code&gt;Options -&amp;gt; IO Options&lt;/code&gt; (or any other monad), allowing option processing to perform actions of the chosen monad, e.g. printing help or version messages, checking that file arguments exist, etc.</source>
          <target state="translated">同様に、各フラグは、 &lt;code&gt;Options -&amp;gt; IO Options&lt;/code&gt; （または他のモナド）タイプのレコードを変換するモナド関数を生成し、オプション処理が選択されたモナドのアクションを実行できるようにします（例：ヘルプまたはバージョンメッセージの印刷、ファイル引数の存在の確認） 、など</target>
        </trans-unit>
        <trans-unit id="607820a98f79637f4244b8c06e798ba23f806752" translate="yes" xml:space="preserve">
          <source>Similarly, for List, we have:</source>
          <target state="translated">同様に、Listについても</target>
        </trans-unit>
        <trans-unit id="768dfc93fe4b6e2bceaced605fb9acafb22e0030" translate="yes" xml:space="preserve">
          <source>Similarly, in Figure 4 of &lt;a href=&quot;http://www.haskell.org/onlinereport/exps.html#sect3.17.3&quot;&gt;Section 3.17.3&lt;/a&gt;, add a new case (t):</source>
          <target state="translated">同様に、&lt;a href=&quot;http://www.haskell.org/onlinereport/exps.html#sect3.17.3&quot;&gt;セクション3.17.3の&lt;/a&gt;図4で、新しいケース（t）を追加します。</target>
        </trans-unit>
        <trans-unit id="fdf628201833483c1dff7b0128b7cad1ec8c4ef7" translate="yes" xml:space="preserve">
          <source>Similarly, in Figure 4 of &lt;a href=&quot;https://www.haskell.org/onlinereport/exps.html#sect3.17.3&quot;&gt;Section 3.17.3&lt;/a&gt;, add a new case (t):</source>
          <target state="translated">同様に、&lt;a href=&quot;https://www.haskell.org/onlinereport/exps.html#sect3.17.3&quot;&gt;セクション3.17.3の&lt;/a&gt;図4で、新しいケース（t）を追加します。</target>
        </trans-unit>
        <trans-unit id="9738cd7cc2cfc10ef5ab5d5dc58012a0d3fbddd3" translate="yes" xml:space="preserve">
          <source>Similarly, input occurs according to the buffer mode for the handle:</source>
          <target state="translated">同様に、ハンドルのバッファモードに応じて入力が発生します。</target>
        </trans-unit>
        <trans-unit id="a384949695264094d00fd92a67c38d622f44b64a" translate="yes" xml:space="preserve">
          <source>Similarly, it can be tempting to lift the coverage condition:</source>
          <target state="translated">同様に、カバー条件を持ち上げたくなることもあります。</target>
        </trans-unit>
        <trans-unit id="a1151457996c266f72946b1cc825a568fcae806b" translate="yes" xml:space="preserve">
          <source>Similarly, the &lt;code&gt;-hisuf&lt;/code&gt; ⟨suffix⟩ will change the &lt;code&gt;.hi&lt;/code&gt; file suffix for non-system interface files (see &lt;a href=&quot;#hi-options&quot;&gt;Other options related to interface files&lt;/a&gt;).</source>
          <target state="translated">同様に、 &lt;code&gt;-hisuf&lt;/code&gt; ⟨suffix⟩は、非システムインターフェースファイルの &lt;code&gt;.hi&lt;/code&gt; ファイルサフィックスを変更します（&lt;a href=&quot;#hi-options&quot;&gt;インターフェースファイルに関連する他のオプションを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a31cbc061be5476938866cdeb9d50441154b14fb" translate="yes" xml:space="preserve">
          <source>Similarly, using O(n) concatentations like &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:-43--43-&quot;&gt;++&lt;/a&gt;&lt;/code&gt; or the equivalent &lt;code&gt;&lt;a href=&quot;data-bytestring#v:concat&quot;&gt;concat&lt;/a&gt;&lt;/code&gt; operations on strict and lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s should be avoided. The following definition of &lt;code&gt;renderString&lt;/code&gt; is also about 20% slower.</source>
          <target state="translated">同様に、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:-43--43-&quot;&gt;++&lt;/a&gt;&lt;/code&gt; などのO（n）連結や、厳密で遅延のある &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; での同等の &lt;code&gt;&lt;a href=&quot;data-bytestring#v:concat&quot;&gt;concat&lt;/a&gt;&lt;/code&gt; 操作の使用は避けてください。次の &lt;code&gt;renderString&lt;/code&gt; の定義も約20％遅くなっています。</target>
        </trans-unit>
        <trans-unit id="3b3d5692e3f8e1c6861143c86ccc4967a6b6045a" translate="yes" xml:space="preserve">
          <source>Similarly, using O(n) concatentations like &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:-43--43-&quot;&gt;++&lt;/a&gt;&lt;/code&gt; or the equivalent &lt;code&gt;&lt;a href=&quot;data-bytestring#v:concat&quot;&gt;concat&lt;/a&gt;&lt;/code&gt; operations on strict and lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s should be avoided. The following definition of &lt;code&gt;renderString&lt;/code&gt; is also about 20% slower.</source>
          <target state="translated">同様に、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:-43--43-&quot;&gt;++&lt;/a&gt;&lt;/code&gt; のようなO（n）連結、または厳密で怠惰な &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; での同等の &lt;code&gt;&lt;a href=&quot;data-bytestring#v:concat&quot;&gt;concat&lt;/a&gt;&lt;/code&gt; 操作の使用は避ける必要があります。次の &lt;code&gt;renderString&lt;/code&gt; の定義も約20％遅くなります。</target>
        </trans-unit>
        <trans-unit id="8bcb4bbdae0f345fbd14fd887e775b1c87b8729a" translate="yes" xml:space="preserve">
          <source>Similarly, using O(n) concatentations like &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:-43--43-&quot;&gt;++&lt;/a&gt;&lt;/code&gt; or the equivalent &lt;code&gt;&lt;a href=&quot;data-bytestring#v:concat&quot;&gt;concat&lt;/a&gt;&lt;/code&gt; operations on strict and lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s should be avoided. The following definition of &lt;code&gt;renderString&lt;/code&gt; is also about 20% slower.</source>
          <target state="translated">同様に、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:-43--43-&quot;&gt;++&lt;/a&gt;&lt;/code&gt; のようなO（n）連結、または厳密で怠惰な &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; での同等の &lt;code&gt;&lt;a href=&quot;data-bytestring#v:concat&quot;&gt;concat&lt;/a&gt;&lt;/code&gt; 操作の使用は避ける必要があります。次の &lt;code&gt;renderString&lt;/code&gt; の定義も約20％遅くなります。</target>
        </trans-unit>
        <trans-unit id="a4471b41263ad9adf6f85b55da954e429b3ab7e0" translate="yes" xml:space="preserve">
          <source>Similarly, when the type has no constructors, &lt;a href=&quot;#extension-DeriveFoldable&quot;&gt;&lt;code&gt;DeriveFoldable&lt;/code&gt;&lt;/a&gt; will derive a trivial instance:</source>
          <target state="translated">同様に、型にコンストラクタがない場合、&lt;a href=&quot;#extension-DeriveFoldable&quot;&gt; &lt;code&gt;DeriveFoldable&lt;/code&gt; &lt;/a&gt;は簡単なインスタンスを派生させます。</target>
        </trans-unit>
        <trans-unit id="6d83e6781648d3ac1c0f099889b20ba000688ff5" translate="yes" xml:space="preserve">
          <source>Simon Marlow</source>
          <target state="translated">サイモン・マーロウ</target>
        </trans-unit>
        <trans-unit id="721761d7c3527b2927215d48b5e79269e734f403" translate="yes" xml:space="preserve">
          <source>Simon Meier &amp;lt;iridcode@gmail.com&amp;gt;</source>
          <target state="translated">Simon Meier &amp;lt;iridcode@gmail.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="97c728edb7e33dd04fbb272a56799d9470e77207" translate="yes" xml:space="preserve">
          <source>Simon Peyton-Jones, Stephanie Weirich, Richard Eisenberg, Dimitrios Vytiniotis. &quot;A reflection on types.&quot; &lt;em&gt;Proc. Philip Wadler's 60th birthday Festschrift&lt;/em&gt;, Edinburgh (April 2016).</source>
          <target state="translated">Simon Peyton-Jones、Stephanie Weirich、Richard Eisenberg、Dimitrios Vytiniotis。「型についての考察」&lt;em&gt;手続き フィリップワドラー生誕60周年、フェストシュリフト&lt;/em&gt;、エジンバラ（2016年4月）。</target>
        </trans-unit>
        <trans-unit id="74dd80b56709788af336659b1da51e7d702bad4d" translate="yes" xml:space="preserve">
          <source>Simon Peyton-Jones, Stephanie Weirich, Richard Eisenberg, Dimitrios Vytiniotis. &quot;A reflection on types.&quot; &lt;em&gt;Proc. Philip Wadler's 60th birthday Festschrift&lt;/em&gt;, Edinburgh (April 2016). ([PDF](https:/&lt;em&gt;www.microsoft.com&lt;/em&gt;en-us&lt;em&gt;research&lt;/em&gt;wp-content&lt;em&gt;uploads&lt;/em&gt;2016&lt;em&gt;08&lt;/em&gt;dynamic.pdf))</source>
          <target state="translated">サイモンペイトンジョーンズ、ステファニーワイリッヒ、リチャードアイゼンバーグ、ディミトリオスヴィティニオティス。「タイプについての考察。」&lt;em&gt;手順 フィリップ・ワドラー生誕60周年記念論文集&lt;/em&gt;、エジンバラ（2016年4月）。（[PDF]（https：/ &lt;em&gt;www.microsoft.com&lt;/em&gt; en-us &lt;em&gt;research&lt;/em&gt; wp-content &lt;em&gt;uploads&lt;/em&gt; 2016 &lt;em&gt;08&lt;/em&gt; dynamic.pdf））</target>
        </trans-unit>
        <trans-unit id="39c57c12c9385683e8d20ca175b57599de663434" translate="yes" xml:space="preserve">
          <source>Simple I/O operations</source>
          <target state="translated">簡単なI/O操作</target>
        </trans-unit>
        <trans-unit id="a0aafc5a010624cf1ad90350d8ff2615301d7859" translate="yes" xml:space="preserve">
          <source>Simple Quantity Semaphores</source>
          <target state="translated">単純な量のセマフォ</target>
        </trans-unit>
        <trans-unit id="1899b459ab13441c4fd4ea79a247337d46148ed6" translate="yes" xml:space="preserve">
          <source>Simple combinators working solely on and with functions.</source>
          <target state="translated">関数のみで動作する単純な組合せ演算子。</target>
        </trans-unit>
        <trans-unit id="76e406312f1df07ec4f3170cd189cbcdf66d018a" translate="yes" xml:space="preserve">
          <source>Simple derived documents</source>
          <target state="translated">シンプルな派生文書</target>
        </trans-unit>
        <trans-unit id="2da50aac11d8ca66848914b700c0c9f47ee24b9b" translate="yes" xml:space="preserve">
          <source>Simple merge tactic types</source>
          <target state="translated">シンプルなマージ戦術の種類</target>
        </trans-unit>
        <trans-unit id="4b663b14df3db19e6ed77f56627396751ae261df" translate="yes" xml:space="preserve">
          <source>Simple quantity semaphores.</source>
          <target state="translated">単純な量のセマフォ。</target>
        </trans-unit>
        <trans-unit id="4bd9201363f4d432c251e62333c10bccfdc5b9a8" translate="yes" xml:space="preserve">
          <source>SimpleWhenMatched</source>
          <target state="translated">SimpleWhenMatched</target>
        </trans-unit>
        <trans-unit id="0b4d04feabdb3d3c68c1b995d43123f1d6afcd02" translate="yes" xml:space="preserve">
          <source>SimpleWhenMissing</source>
          <target state="translated">SimpleWhenMissing</target>
        </trans-unit>
        <trans-unit id="26d9f8d71695eefd9fa7c2f4080c6bc04cc76eaf" translate="yes" xml:space="preserve">
          <source>Simpler functions for common tasks</source>
          <target state="translated">一般的なタスクのためのシンプルな機能</target>
        </trans-unit>
        <trans-unit id="f3d640053c2f3d3e8a62efc1770b31a346cee466" translate="yes" xml:space="preserve">
          <source>Simultaneous &lt;code&gt;&lt;a href=&quot;ghc-integer#v:divInteger&quot;&gt;divInteger&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-integer#v:modInteger&quot;&gt;modInteger&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-integer#v:divInteger&quot;&gt;divInteger&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;ghc-integer#v:modInteger&quot;&gt;modInteger&lt;/a&gt;&lt;/code&gt; を同時に使用します。</target>
        </trans-unit>
        <trans-unit id="416d98e04e3b99a9d17328e9604e9b66fe809537" translate="yes" xml:space="preserve">
          <source>Simultaneous &lt;code&gt;&lt;a href=&quot;ghc-integer#v:quotInteger&quot;&gt;quotInteger&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-integer#v:remInteger&quot;&gt;remInteger&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-integer#v:quotInteger&quot;&gt;quotInteger&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;ghc-integer#v:remInteger&quot;&gt;remInteger&lt;/a&gt;&lt;/code&gt; を同時に使用します。</target>
        </trans-unit>
        <trans-unit id="22a4ed66c623d273a571652cc9ae1a89577a837f" translate="yes" xml:space="preserve">
          <source>Since</source>
          <target state="translated">Since</target>
        </trans-unit>
        <trans-unit id="365db0b84c6c56e50d57eaa31442e0adccc0ee99" translate="yes" xml:space="preserve">
          <source>Since 4.11.0: constraint on inner &lt;code&gt;a&lt;/code&gt; value generalised from &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">4.11.0以降：内部の制約 &lt;code&gt;a&lt;/code&gt; から一般値 &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c4dc6b036482694efeee84ef35143665b8251d30" translate="yes" xml:space="preserve">
          <source>Since 4.11.0: constraint on inner &lt;code&gt;a&lt;/code&gt; value generalised from &lt;code&gt;&lt;a href=&quot;ghc-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;ghc-base#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">4.11.0以降：内部の制約 &lt;code&gt;a&lt;/code&gt; から一般値 &lt;code&gt;&lt;a href=&quot;ghc-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;ghc-base#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="07a471c12b48b3ce26cb82c74a832505c52ccbf6" translate="yes" xml:space="preserve">
          <source>Since 4.11.0: constraint on inner &lt;code&gt;a&lt;/code&gt; value generalised from &lt;code&gt;&lt;a href=&quot;prelude#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">4.11.0以降：内部の制約 &lt;code&gt;a&lt;/code&gt; から一般値 &lt;code&gt;&lt;a href=&quot;prelude#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed2b907ebe5eec7331c3d7d4f6126de4e2f3c06e" translate="yes" xml:space="preserve">
          <source>Since 4.11.0: constraint on inner &lt;code&gt;a&lt;/code&gt; value generalised from &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">4.11.0以降：内部の制約 &lt;code&gt;a&lt;/code&gt; から一般値 &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b187a998801b69c5b9c858285eff5f8f21513a70" translate="yes" xml:space="preserve">
          <source>Since 4.11.0: constraint on inner &lt;code&gt;a&lt;/code&gt; value generalised from &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">4.11.0以降：内部の制約 &lt;code&gt;a&lt;/code&gt; から一般値 &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="640edc28c7c3c2c7d89938717a28cfa68bc90499" translate="yes" xml:space="preserve">
          <source>Since 4.11.0: constraint on inner &lt;code&gt;a&lt;/code&gt; value generalised from &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">4.11.0以降：内部の制約 &lt;code&gt;a&lt;/code&gt; から一般値 &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b9720fa4244bac57236a014ac120ca95bbe9d50" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;` is strict in the accumulator, this is always a &lt;a href=&quot;#strict&quot;&gt;strict&lt;/a&gt; reduction with no opportunity for early return or intermediate results. The structure must be finite, since no result is returned until the last element is processed. The advantage of strictness is space efficiency: the final result can be computed without storing a potentially deep stack of lazy intermediate results.</source>
          <target state="translated">以来 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; のは`アキュムレータで厳格である、これは常に&lt;a href=&quot;#strict&quot;&gt;厳格な&lt;/a&gt;早期復帰や中間結果のための機会での還元。最後の要素が処理されるまで結果が返されないため、構造は有限である必要があります。厳密さの利点はスペース効率です。怠惰な中間結果の潜在的に深いスタックを保存せずに、最終結果を計算できます。</target>
        </trans-unit>
        <trans-unit id="5ec07a6f9035d42e00400b44c34975fdb0e205b5" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; are either empty or singletons, we have</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; が空かシングルトンのどちらかなので、</target>
        </trans-unit>
        <trans-unit id="e413035bd22b86d9449ed318f5a887751f8b8247" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;&lt;a href=&quot;data-void#t:Void&quot;&gt;Void&lt;/a&gt;&lt;/code&gt; values logically don't exist, this witnesses the logical reasoning tool of &quot;ex falso quodlibet&quot;.</source>
          <target state="translated">以来 &lt;code&gt;&lt;a href=&quot;data-void#t:Void&quot;&gt;Void&lt;/a&gt;&lt;/code&gt; の値が論理的に存在しない、この証人「EX falso quodlibet」の論理的な推論ツール。</target>
        </trans-unit>
        <trans-unit id="742e2e4b092f77ac9992fb604d64e442d66cd19b" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;f&lt;/code&gt;&amp;lsquo;s right-hand side is small, it is inlined into &lt;code&gt;g&lt;/code&gt;, to give</source>
          <target state="translated">以来 &lt;code&gt;f&lt;/code&gt; の右辺が小さく、それにインライン化されている &lt;code&gt;g&lt;/code&gt; 与えるために、</target>
        </trans-unit>
        <trans-unit id="b42b0c7564570daa7bbb542fd1a945ed985de016" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;f&lt;/code&gt;&amp;rsquo;s right-hand side is small, it is inlined into &lt;code&gt;g&lt;/code&gt;, to give</source>
          <target state="translated">以来 &lt;code&gt;f&lt;/code&gt; の右辺が小さく、それにインライン化されている &lt;code&gt;g&lt;/code&gt; 与えるために、</target>
        </trans-unit>
        <trans-unit id="dc601fa89674ba7a70b8f9b3885146266611a172" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;g&lt;/code&gt; has a polymorphic type, it must have a type signature.</source>
          <target state="translated">&lt;code&gt;g&lt;/code&gt; には多相型があるため、型シグネチャが必要です。</target>
        </trans-unit>
        <trans-unit id="f935060d8a8aa8a42d5b0b0006916a1dc6743811" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;xs&lt;/code&gt; is used twice, GHC does not fire the foldr/build rule. Rightly so, because it might take a lot of work to compute &lt;code&gt;xs&lt;/code&gt;, which would be duplicated if the rule fired.</source>
          <target state="translated">&lt;code&gt;xs&lt;/code&gt; は2回使用されるため、GHCはフォルダー/ビルドルールを起動しません。当然のことですが、 &lt;code&gt;xs&lt;/code&gt; の計算には多くの作業が必要になる可能性があるため、ルールが実行された場合は重複します。</target>
        </trans-unit>
        <trans-unit id="3b49633244a64da1bdac807727d693aaee4c11dd" translate="yes" xml:space="preserve">
          <source>Since GHC 7.10, &lt;code&gt;Typeable&lt;/code&gt; is automatically derived for all types. Thus, deriving &lt;code&gt;Typeable&lt;/code&gt; yourself is redundant.</source>
          <target state="translated">GHC 7.10以降、 &lt;code&gt;Typeable&lt;/code&gt; はすべてのタイプに対して自動的に派生します。したがって、 &lt;code&gt;Typeable&lt;/code&gt; を自分で導出することは冗長です。</target>
        </trans-unit>
        <trans-unit id="4d2c5e5d7898d3bfaead9391d3acfc7f454cf563" translate="yes" xml:space="preserve">
          <source>Since GHC 7.10, all types automatically have &lt;code&gt;&lt;a href=&quot;data-typeable#t:Typeable&quot;&gt;Typeable&lt;/a&gt;&lt;/code&gt; instances derived. This is in contrast to previous releases where &lt;code&gt;&lt;a href=&quot;data-typeable#t:Typeable&quot;&gt;Typeable&lt;/a&gt;&lt;/code&gt; had to be explicitly derived using the &lt;code&gt;DeriveDataTypeable&lt;/code&gt; language extension.</source>
          <target state="translated">GHC 7.10以降、すべてのタイプで &lt;code&gt;&lt;a href=&quot;data-typeable#t:Typeable&quot;&gt;Typeable&lt;/a&gt;&lt;/code&gt; インスタンスが自動的に派生します。これは、 &lt;code&gt;&lt;a href=&quot;data-typeable#t:Typeable&quot;&gt;Typeable&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;DeriveDataTypeable&lt;/code&gt; 言語拡張を使用して明示的に派生する必要があった以前のリリースとは対照的です。</target>
        </trans-unit>
        <trans-unit id="e030b36993167c6a650b53e7ddf9b917012e5ada" translate="yes" xml:space="preserve">
          <source>Since GHC 7.6.1, GHCi prints the result of expressions typed at the prompt using the function &lt;code&gt;System.IO.print&lt;/code&gt;. Its type signature is &lt;code&gt;Show a =&amp;gt; a -&amp;gt;
IO ()&lt;/code&gt;, and it works by converting the value to &lt;code&gt;String&lt;/code&gt; using &lt;code&gt;show&lt;/code&gt;.</source>
          <target state="translated">GHC 7.6.1以降、GHCiは関数 &lt;code&gt;System.IO.print&lt;/code&gt; を使用してプロンプトで入力された式の結果を出力します。その型シグネチャは &lt;code&gt;Show a =&amp;gt; a -&amp;gt; IO ()&lt;/code&gt; であり、 &lt;code&gt;show&lt;/code&gt; を使用して値を &lt;code&gt;String&lt;/code&gt; 変換することで機能します。</target>
        </trans-unit>
        <trans-unit id="bd3de9296edafefe93b1d0ef0e92bf1198bbce4d" translate="yes" xml:space="preserve">
          <source>Since GHC 7.8, &lt;code&gt;&lt;a href=&quot;data-typeable#t:Typeable&quot;&gt;Typeable&lt;/a&gt;&lt;/code&gt; is poly-kinded. The changes required for this might break some old programs involving &lt;code&gt;&lt;a href=&quot;data-typeable#t:Typeable&quot;&gt;Typeable&lt;/a&gt;&lt;/code&gt;. More details on this, including how to fix your code, can be found on the &lt;a href=&quot;https://ghc.haskell.org/trac/ghc/wiki/GhcKinds/PolyTypeable&quot;&gt;PolyTypeable wiki page&lt;/a&gt;</source>
          <target state="translated">GHC 7.8以降、 &lt;code&gt;&lt;a href=&quot;data-typeable#t:Typeable&quot;&gt;Typeable&lt;/a&gt;&lt;/code&gt; は多種多様です。これに必要な変更により、 &lt;code&gt;&lt;a href=&quot;data-typeable#t:Typeable&quot;&gt;Typeable&lt;/a&gt;&lt;/code&gt; を含む古いプログラムが壊れる可能性があります。コードの修正方法など、詳細については、&lt;a href=&quot;https://ghc.haskell.org/trac/ghc/wiki/GhcKinds/PolyTypeable&quot;&gt;PolyTypeable wikiページをご覧ください。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a4c1020250358d5d584ec512e57a538baabf14d5" translate="yes" xml:space="preserve">
          <source>Since GHC 7.8, &lt;code&gt;&lt;a href=&quot;data-typeable#t:Typeable&quot;&gt;Typeable&lt;/a&gt;&lt;/code&gt; is poly-kinded. The changes required for this might break some old programs involving &lt;code&gt;&lt;a href=&quot;data-typeable#t:Typeable&quot;&gt;Typeable&lt;/a&gt;&lt;/code&gt;. More details on this, including how to fix your code, can be found on the &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/ghc-kinds/poly-typeable&quot;&gt;PolyTypeable wiki page&lt;/a&gt;</source>
          <target state="translated">GHC 7.8以降、 &lt;code&gt;&lt;a href=&quot;data-typeable#t:Typeable&quot;&gt;Typeable&lt;/a&gt;&lt;/code&gt; は多種類です。これに必要な変更は、 &lt;code&gt;&lt;a href=&quot;data-typeable#t:Typeable&quot;&gt;Typeable&lt;/a&gt;&lt;/code&gt; を含むいくつかの古いプログラムを壊す可能性があります。コードの修正方法など、これに関する詳細は、&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/ghc-kinds/poly-typeable&quot;&gt;PolyTypeablewikiページにあります。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a1efcdcdfe9f24dfcac0c8281223316bf6fbd5ce" translate="yes" xml:space="preserve">
          <source>Since GHC 8.0 declarations such as &lt;code&gt;MkSwizzle'&lt;/code&gt; will cause an out-of-scope error.</source>
          <target state="translated">&lt;code&gt;MkSwizzle'&lt;/code&gt; などのGHC 8.0宣言はスコープ外エラーを引き起こします。</target>
        </trans-unit>
        <trans-unit id="46c019fb065bf32f08d475f7477d99f7ad55034c" translate="yes" xml:space="preserve">
          <source>Since GHC 8.0.1, you can bind values and functions to names without &lt;code&gt;let&lt;/code&gt; statement:</source>
          <target state="translated">GHC 8.0.1以降、 &lt;code&gt;let&lt;/code&gt; ステートメントなしで値と関数を名前にバインドできます：</target>
        </trans-unit>
        <trans-unit id="8db6b22a338c6ccc9b864915896215b8f369833d" translate="yes" xml:space="preserve">
          <source>Since GHC 8.2, GHC has supported type-indexed type representations. &lt;a href=&quot;data-typeable&quot;&gt;Data.Typeable&lt;/a&gt; provides type representations which are qualified over this index, providing an interface very similar to the &lt;a href=&quot;typeable&quot;&gt;Typeable&lt;/a&gt; notion seen in previous releases. For the type-indexed interface, see &lt;a href=&quot;type-reflection&quot;&gt;Type.Reflection&lt;/a&gt;.</source>
          <target state="translated">GHC 8.2以降、GHCは型インデックス付き型表現をサポートしています。&lt;a href=&quot;data-typeable&quot;&gt;Data.Typeable&lt;/a&gt;は、このインデックスで修飾される型表現を提供し、以前のリリースで見られた&lt;a href=&quot;typeable&quot;&gt;Typeableの&lt;/a&gt;概念と非常によく似たインターフェースを提供します。タイプインデックス付きのインターフェイスについては、&lt;a href=&quot;type-reflection&quot;&gt;Type.Reflectionを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9b09eefad81a0c7d13e72eb5c0b6d6f00145c1bd" translate="yes" xml:space="preserve">
          <source>Since GHC 8.6.1, the Haskell I/O manager automatically promotes paths in the legacy format to Win32 file namespace. By default the I/O manager will do two things to your paths:</source>
          <target state="translated">GHC 8.6.1以降、Haskell I/Oマネージャはレガシーフォーマットのパスを自動的にWin32ファイル名空間にプロモートします。デフォルトでは、I/Oマネージャはパスに対して2つのことを行います。</target>
        </trans-unit>
        <trans-unit id="1e0a728c3ee5e407a3cec0ce3ea3def9fc1224df" translate="yes" xml:space="preserve">
          <source>Since GHC is itself compiled by GHC, you can change RTS options in the compiler using the normal &lt;code&gt;+RTS ... -RTS&lt;/code&gt; combination. For instance, to set the maximum heap size for a compilation to 128M, you would add &lt;code&gt;+RTS -M128m -RTS&lt;/code&gt; to the command line.</source>
          <target state="translated">GHC自体はGHCによってコンパイルされるため、通常の &lt;code&gt;+RTS ... -RTS&lt;/code&gt; 組み合わせを使用して、コンパイラでRTSオプションを変更できます。たとえば、コンパイルの最大ヒープサイズを128Mに &lt;code&gt;+RTS -M128m -RTS&lt;/code&gt; するには、コマンドラインに+ RTS -M128m -RTSを追加します。</target>
        </trans-unit>
        <trans-unit id="33d1df2ac8344d31d5e6a2a15a2a791229762c8c" translate="yes" xml:space="preserve">
          <source>Since GHCi will only use a compiled object file if it can be sure that the compiled version is up-to-date, a good technique when working on a large program is to occasionally run &lt;code&gt;ghc --make&lt;/code&gt; to compile the whole project (say before you go for lunch :-), then continue working in the interpreter. As you modify code, the changed modules will be interpreted, but the rest of the project will remain compiled.</source>
          <target state="translated">GHCiは、コンパイルされたバージョンが最新であることを確認できる場合にのみ、コンパイルされたオブジェクトファイルを使用するため、大規模なプログラムで作業するときの良いテクニックは、時々 &lt;code&gt;ghc --make&lt;/code&gt; を実行してプロジェクト全体をコンパイルすることです（前述のように）あなたは昼食に行きます:-)そして、通訳で働き続けます。コードを変更すると、変更されたモジュールが解釈されますが、プロジェクトの残りの部分はコンパイルされたままになります。</target>
        </trans-unit>
        <trans-unit id="96efe90028550298ac23162e5b8ef10f08d1c73d" translate="yes" xml:space="preserve">
          <source>Since all we know about &lt;code&gt;val&lt;/code&gt; and &lt;code&gt;fn&lt;/code&gt; is that they are compatible, the only (useful) thing we can do with them is to apply &lt;code&gt;fn&lt;/code&gt; to &lt;code&gt;val&lt;/code&gt; to get a boolean. For example:</source>
          <target state="translated">&lt;code&gt;val&lt;/code&gt; と &lt;code&gt;fn&lt;/code&gt; について互換性があるということだけを知っているので、それらを使ってできる（有用な）唯一のことは、 &lt;code&gt;fn&lt;/code&gt; を &lt;code&gt;val&lt;/code&gt; に適用してブール値を取得することです。例えば：</target>
        </trans-unit>
        <trans-unit id="80000692872a3a5ce4cbb0abce40d21312044a95" translate="yes" xml:space="preserve">
          <source>Since base 4.11.0.0, &lt;code&gt;&lt;a href=&quot;system-environment#v:getExecutablePath&quot;&gt;getExecutablePath&lt;/a&gt;&lt;/code&gt; resolves symlinks on Windows. If an executable is launched through a symlink, &lt;code&gt;&lt;a href=&quot;system-environment#v:getExecutablePath&quot;&gt;getExecutablePath&lt;/a&gt;&lt;/code&gt; returns the absolute path of the original executable.</source>
          <target state="translated">ベース4.11.0.0以降、 &lt;code&gt;&lt;a href=&quot;system-environment#v:getExecutablePath&quot;&gt;getExecutablePath&lt;/a&gt;&lt;/code&gt; はWindows上のシンボリックリンクを解決します。実行可能ファイルがシンボリックリンクを介して起動された場合、 &lt;code&gt;&lt;a href=&quot;system-environment#v:getExecutablePath&quot;&gt;getExecutablePath&lt;/a&gt;&lt;/code&gt; は元の実行可能ファイルの絶対パスを返します。</target>
        </trans-unit>
        <trans-unit id="3e638c7ecefd20fb0ec39b4c3b95c075d843ac61" translate="yes" xml:space="preserve">
          <source>Since base 4.11.0.0, &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getExecutablePath&quot;&gt;getExecutablePath&lt;/a&gt;&lt;/code&gt; resolves symlinks on Windows. If an executable is launched through a symlink, &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getExecutablePath&quot;&gt;getExecutablePath&lt;/a&gt;&lt;/code&gt; returns the absolute path of the original executable.</source>
          <target state="translated">ベース4.11.0.0以降、 &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getExecutablePath&quot;&gt;getExecutablePath&lt;/a&gt;&lt;/code&gt; はWindows上のシンボリックリンクを解決します。実行可能ファイルがシンボリックリンクを介して起動された場合、 &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getExecutablePath&quot;&gt;getExecutablePath&lt;/a&gt;&lt;/code&gt; は元の実行可能ファイルの絶対パスを返します。</target>
        </trans-unit>
        <trans-unit id="730351f5e8ace4619e0c70c82886ac2af7f9b9b8" translate="yes" xml:space="preserve">
          <source>Since many programs do use &lt;code&gt;exec&lt;/code&gt;, the &lt;code&gt;process&lt;/code&gt; library exposes the &lt;code&gt;&lt;a href=&quot;system-process#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; flag to make it possible to reliably detect when such a process completes. When this flag is set a &lt;code&gt;&lt;a href=&quot;system-process#t:ProcessHandle&quot;&gt;ProcessHandle&lt;/a&gt;&lt;/code&gt; will not be deemed to be &quot;finished&quot; until all processes spawned by it have terminated (except those spawned by the child with the &lt;code&gt;CREATE_BREAKAWAY_FROM_JOB&lt;/code&gt;&lt;code&gt;CreateProcess&lt;/code&gt; flag).</source>
          <target state="translated">多くのプログラムは &lt;code&gt;exec&lt;/code&gt; を使用するため、 &lt;code&gt;process&lt;/code&gt; ライブラリは &lt;code&gt;&lt;a href=&quot;system-process#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; フラグを公開して、そのようなプロセスがいつ完了したかを確実に検出できるようにします。このフラグが設定されている場合、 &lt;code&gt;&lt;a href=&quot;system-process#t:ProcessHandle&quot;&gt;ProcessHandle&lt;/a&gt;&lt;/code&gt; は、それによって生成されたすべてのプロセスが終了するまで「終了」したと見なされません（ &lt;code&gt;CREATE_BREAKAWAY_FROM_JOB&lt;/code&gt; &lt;code&gt;CreateProcess&lt;/code&gt; フラグを持つ子によって生成されたものを除く）。</target>
        </trans-unit>
        <trans-unit id="5054d4166324369087bef29fe407c1cd566703a2" translate="yes" xml:space="preserve">
          <source>Since most array functions involve the class &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;, this module is exported from &lt;a href=&quot;data-array&quot;&gt;Data.Array&lt;/a&gt; so that modules need not import both &lt;a href=&quot;data-array&quot;&gt;Data.Array&lt;/a&gt; and &lt;a href=&quot;../base-4.13.0.0/data-ix&quot;&gt;Data.Ix&lt;/a&gt;.</source>
          <target state="translated">ほとんどの配列関数にはクラス &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; が含まれるため、モジュールは&lt;a href=&quot;data-array&quot;&gt;Data.Array&lt;/a&gt;と&lt;a href=&quot;../base-4.13.0.0/data-ix&quot;&gt;Data.Ixの&lt;/a&gt;両方をインポートする必要がないように、&lt;a href=&quot;data-array&quot;&gt;Data.Array&lt;/a&gt;からエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="e479c93c5d30b046bafa27d037a25369776a9584" translate="yes" xml:space="preserve">
          <source>Since most array functions involve the class &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;, this module is exported from &lt;a href=&quot;data-array&quot;&gt;Data.Array&lt;/a&gt; so that modules need not import both &lt;a href=&quot;data-array&quot;&gt;Data.Array&lt;/a&gt; and &lt;a href=&quot;../base-4.14.1.0/data-ix&quot;&gt;Data.Ix&lt;/a&gt;.</source>
          <target state="translated">ほとんどの配列関数にはクラス &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; が含まれるため、このモジュールは&lt;a href=&quot;data-array&quot;&gt;Data.Array&lt;/a&gt;からエクスポートされるため、モジュールは&lt;a href=&quot;data-array&quot;&gt;Data.Array&lt;/a&gt;と&lt;a href=&quot;../base-4.14.1.0/data-ix&quot;&gt;Data.Ixの&lt;/a&gt;両方をインポートする必要はありません。</target>
        </trans-unit>
        <trans-unit id="cdb09878070f32cd71d576eba8e0563e95304a21" translate="yes" xml:space="preserve">
          <source>Since most array functions involve the class &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;, this module is exported from &lt;a href=&quot;data-array&quot;&gt;Data.Array&lt;/a&gt; so that modules need not import both &lt;a href=&quot;data-array&quot;&gt;Data.Array&lt;/a&gt; and &lt;a href=&quot;../base-4.15.0.0/data-ix&quot;&gt;Data.Ix&lt;/a&gt;.</source>
          <target state="translated">ほとんどの配列関数にはクラス &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; が含まれるため、このモジュールは&lt;a href=&quot;data-array&quot;&gt;Data.Array&lt;/a&gt;からエクスポートされるため、モジュールは&lt;a href=&quot;data-array&quot;&gt;Data.Array&lt;/a&gt;と&lt;a href=&quot;../base-4.15.0.0/data-ix&quot;&gt;Data.Ixの&lt;/a&gt;両方をインポートする必要はありません。</target>
        </trans-unit>
        <trans-unit id="496f029c9d8ece7bdc0f0f53e67b1b083f3e6dcd" translate="yes" xml:space="preserve">
          <source>Since representations such as this can support field labels with kinds other than &lt;code&gt;Symbol&lt;/code&gt;, the &lt;code&gt;HasField&lt;/code&gt; class is poly-kinded (even though the built-in constraint solving works only at kind &lt;code&gt;Symbol&lt;/code&gt;). In particular, this allows users to declare scoped field labels such as in the following example:</source>
          <target state="translated">このような表現は &lt;code&gt;Symbol&lt;/code&gt; 以外の種類のフィールドラベルをサポートできるため、 &lt;code&gt;HasField&lt;/code&gt; クラスは多種多様です（組み込みの制約の解決は種類 &lt;code&gt;Symbol&lt;/code&gt; でのみ機能します）。特に、これにより、ユーザーは次の例のようにスコープフィールドラベルを宣言できます。</target>
        </trans-unit>
        <trans-unit id="bdf5363abc4404928095a9d94e007193484d0e99" translate="yes" xml:space="preserve">
          <source>Since some indirections (symbolic links on all systems, &lt;code&gt;..&lt;/code&gt; on non-Windows systems, and junction points on Windows) are dependent on the state of the existing filesystem, the function can only make a conservative attempt by removing such indirections from the longest prefix of the path that still points to an existing file or directory.</source>
          <target state="translated">いくつかの（すべてのシステム上のシンボリックリンク、間接ので &lt;code&gt;..&lt;/code&gt; . Windows以外のシステム上、およびWindows上の接続点）は、既存のファイルシステムの状態に依存している、機能だけで最長のプレフィックスから、このような間接を除去することにより、保守的な試みを行うことができます既存のファイルまたはディレクトリを指すパスの一部。</target>
        </trans-unit>
        <trans-unit id="4242f12de68611c93a575510b8d4598c73b2dd7a" translate="yes" xml:space="preserve">
          <source>Since the 7.10 release GHC can emit a debugging information to help debugging tools understand the code that GHC produces. This debugging information is useable by most UNIX debugging tools.</source>
          <target state="translated">7.10リリース以降、GHCはデバッグツールがGHCが生成するコードを理解するのに役立つデバッグ情報を出力できるようになりました。このデバッグ情報は、ほとんどの UNIX デバッグツールで利用できます。</target>
        </trans-unit>
        <trans-unit id="b7a4561fa92a8019fe88f1cc517299a9155c17c2" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; type uses UTF-16 internally, it cannot represent characters in the reserved surrogate code point range U+D800 to U+DFFF. To maintain this invariant, the &lt;code&gt;&lt;a href=&quot;data-text-internal#v:safe&quot;&gt;safe&lt;/a&gt;&lt;/code&gt; function maps &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; values in this range to the replacement character (U+FFFD, '�').</source>
          <target state="translated">以来、 &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; タイプが内部UTF-16を使用し、それはU + DFFFに予約サロゲートコードポイント範囲U + D800の文字を表すことができません。この不変条件を維持するために、 &lt;code&gt;&lt;a href=&quot;data-text-internal#v:safe&quot;&gt;safe&lt;/a&gt;&lt;/code&gt; 関数はこの範囲の &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 値を置換文字（U + FFFD、 ''）にマップします。</target>
        </trans-unit>
        <trans-unit id="556224b3ff4a022597cda038d6a487230f3082b2" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; type uses UTF-16 internally, it cannot represent characters in the reserved surrogate code point range U+D800 to U+DFFF. To maintain this invariant, the &lt;code&gt;&lt;a href=&quot;data-text-internal#v:safe&quot;&gt;safe&lt;/a&gt;&lt;/code&gt; function maps &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; values in this range to the replacement character (U+FFFD, '�').</source>
          <target state="translated">以来、 &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; タイプが内部UTF-16を使用し、それはU + DFFFに予約サロゲートコードポイント範囲U + D800の文字を表すことができません。この不変条件を維持するために、 &lt;code&gt;&lt;a href=&quot;data-text-internal#v:safe&quot;&gt;safe&lt;/a&gt;&lt;/code&gt; 関数はこの範囲の &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 値を置換文字（U + FFFD、 ' '）にマップします。</target>
        </trans-unit>
        <trans-unit id="e2ec48554d4419e079abb8a13ad47659a5fa5d42" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; type uses UTF-16 internally, it cannot represent characters in the reserved surrogate code point range U+D800 to U+DFFF. To maintain this invariant, the &lt;code&gt;&lt;a href=&quot;data-text-internal#v:safe&quot;&gt;safe&lt;/a&gt;&lt;/code&gt; function maps &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; values in this range to the replacement character (U+FFFD, '�').</source>
          <target state="translated">以来、 &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; タイプが内部UTF-16を使用し、それはU + DFFFに予約サロゲートコードポイント範囲U + D800の文字を表すことができません。この不変条件を維持するために、 &lt;code&gt;&lt;a href=&quot;data-text-internal#v:safe&quot;&gt;safe&lt;/a&gt;&lt;/code&gt; 関数はこの範囲の &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 値を置換文字（U + FFFD、 ' '）にマップします。</target>
        </trans-unit>
        <trans-unit id="90babc4747e5189efb1739787a51e33fec57750e" translate="yes" xml:space="preserve">
          <source>Since the advent of &lt;code&gt;ConstraintKinds&lt;/code&gt;, constraints are really just types. Equality constraints use the &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:EqualityT&quot;&gt;EqualityT&lt;/a&gt;&lt;/code&gt; constructor. Constraints may also be tuples of other constraints.</source>
          <target state="translated">&lt;code&gt;ConstraintKinds&lt;/code&gt; の登場以来、制約は実際には単なるタイプです。等価制約は &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:EqualityT&quot;&gt;EqualityT&lt;/a&gt;&lt;/code&gt; コンストラクタを使用します。制約は、他の制約のタプルにすることもできます。</target>
        </trans-unit>
        <trans-unit id="2252814c6c7377dbdf38b2f0e09ef963a5819600" translate="yes" xml:space="preserve">
          <source>Since the advent of &lt;code&gt;ConstraintKinds&lt;/code&gt;, constraints are really just types. Equality constraints use the &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:EqualityT&quot;&gt;EqualityT&lt;/a&gt;&lt;/code&gt; constructor. Constraints may also be tuples of other constraints.</source>
          <target state="translated">&lt;code&gt;ConstraintKinds&lt;/code&gt; の登場以来、制約は実際には単なるタイプです。等価制約は &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:EqualityT&quot;&gt;EqualityT&lt;/a&gt;&lt;/code&gt; コンストラクタを使用します。制約は、他の制約のタプルにすることもできます。</target>
        </trans-unit>
        <trans-unit id="359bceb972223e45891270cf0e66d2673d1b706f" translate="yes" xml:space="preserve">
          <source>Since the binding for &lt;code&gt;y&lt;/code&gt; falls under the Monomorphism Restriction it is not generalised, so the type of &lt;code&gt;y&lt;/code&gt; is simply &lt;code&gt;Int&lt;/code&gt;, not &lt;code&gt;(?x::Int) =&amp;gt; Int&lt;/code&gt;. Hence, &lt;code&gt;(f 9)&lt;/code&gt; returns result &lt;code&gt;9&lt;/code&gt;. If you add a type signature for &lt;code&gt;y&lt;/code&gt;, then &lt;code&gt;y&lt;/code&gt; will get type &lt;code&gt;(?x::Int) =&amp;gt; Int&lt;/code&gt;, so the occurrence of &lt;code&gt;y&lt;/code&gt; in the body of the &lt;code&gt;let&lt;/code&gt; will see the inner binding of &lt;code&gt;?x&lt;/code&gt;, so &lt;code&gt;(f 9)&lt;/code&gt; will return &lt;code&gt;14&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; のバインディングは単相性制限に該当するため、一般化されていないため、 &lt;code&gt;y&lt;/code&gt; の型は &lt;code&gt;(?x::Int) =&amp;gt; Int&lt;/code&gt; ではなく単に &lt;code&gt;Int&lt;/code&gt; です。したがって、 &lt;code&gt;(f 9)&lt;/code&gt; は結果 &lt;code&gt;9&lt;/code&gt; を返します。 &lt;code&gt;y&lt;/code&gt; の型シグネチャを追加すると、 &lt;code&gt;y&lt;/code&gt; は型 &lt;code&gt;(?x::Int) =&amp;gt; Int&lt;/code&gt; を取得するため、 &lt;code&gt;let&lt;/code&gt; の本体で &lt;code&gt;y&lt;/code&gt; が出現すると、 &lt;code&gt;?x&lt;/code&gt; の内部バインディングが表示されるため、 &lt;code&gt;(f 9)&lt;/code&gt; &lt;code&gt;14&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a0a8746ea17a0e1219ce13f54d77952737fdabbd" translate="yes" xml:space="preserve">
          <source>Since the constructor &lt;code&gt;MkS&lt;/code&gt; is only in scope qualified, you must name it &lt;code&gt;M.MkS&lt;/code&gt;, but the field &lt;code&gt;x&lt;/code&gt; does not need to be qualified even though &lt;code&gt;M.x&lt;/code&gt; is in scope but &lt;code&gt;x&lt;/code&gt; is not (In effect, it is qualified by the constructor).</source>
          <target state="translated">コンストラクター &lt;code&gt;MkS&lt;/code&gt; はスコープ内でのみ修飾されているため、M.MkSという名前を &lt;code&gt;M.MkS&lt;/code&gt; 必要がありますが、フィールド &lt;code&gt;x&lt;/code&gt; は &lt;code&gt;M.x&lt;/code&gt; がスコープ内であっても &lt;code&gt;x&lt;/code&gt; が修飾されていなくても修飾する必要はありません（実際には、コンストラクターによって修飾されます）。</target>
        </trans-unit>
        <trans-unit id="b21b672f553cf2eae5e1fe001388a793bfa1e3ed" translate="yes" xml:space="preserve">
          <source>Since the declaration group containing &lt;code&gt;D&lt;/code&gt; is in the previous declaration group, the splice &lt;code&gt;$(th2 ...)&lt;/code&gt;&lt;em&gt;can&lt;/em&gt; refer to &lt;code&gt;D&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;D&lt;/code&gt; を含む宣言グループは前の宣言グループにあるため、スプライス &lt;code&gt;$(th2 ...)&lt;/code&gt; &lt;em&gt;は&lt;/em&gt; &lt;code&gt;D&lt;/code&gt; &lt;em&gt;を&lt;/em&gt;参照&lt;em&gt;でき&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="800fc2a0187e7fedaabd6764d60a913f30b063f5" translate="yes" xml:space="preserve">
          <source>Since the default type signatures for &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt; require &lt;code&gt;Show a&lt;/code&gt; and &lt;code&gt;Ord a&lt;/code&gt; constraints, respectively.</source>
          <target state="translated">&lt;code&gt;bar&lt;/code&gt; と &lt;code&gt;baz&lt;/code&gt; のデフォルトの型シグネチャには、それぞれ &lt;code&gt;Show a&lt;/code&gt; &lt;code&gt;Ord a&lt;/code&gt; 制約とOrd a制約が必要です。</target>
        </trans-unit>
        <trans-unit id="16b751ad88c8087ece123dbf36badd7ea5adc302" translate="yes" xml:space="preserve">
          <source>Since the rules for defaulting are relaxed under &lt;a href=&quot;#extension-ExtendedDefaultRules&quot;&gt;&lt;code&gt;ExtendedDefaultRules&lt;/code&gt;&lt;/a&gt;, the rules for &lt;code&gt;default&lt;/code&gt; declarations are also relaxed. According to Section 4.3.4 of the Haskell 2010 Report, a &lt;code&gt;default&lt;/code&gt; declaration looks like &lt;code&gt;default (t1, ..., tn)&lt;/code&gt; where, for each &lt;code&gt;ti&lt;/code&gt;, &lt;code&gt;Num ti&lt;/code&gt; must hold. This is relaxed to say that for each &lt;code&gt;ti&lt;/code&gt;, there must exist an interactive class &lt;code&gt;C&lt;/code&gt; such that &lt;code&gt;C ti&lt;/code&gt; holds. This means that type &lt;em&gt;constructors&lt;/em&gt; can be allowed in these lists. For example, the following works if you wish your &lt;code&gt;Foldable&lt;/code&gt; constraints to default to &lt;code&gt;Maybe&lt;/code&gt; but your &lt;code&gt;Num&lt;/code&gt; constraints to still default to &lt;code&gt;Integer&lt;/code&gt; or &lt;code&gt;Double&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; のルールは&lt;a href=&quot;#extension-ExtendedDefaultRules&quot;&gt; &lt;code&gt;ExtendedDefaultRules&lt;/code&gt; &lt;/a&gt;で緩和されているため、デフォルト宣言のルールも緩和されています。 Haskell 2010レポートのセクション4.3.4によると、 &lt;code&gt;default&lt;/code&gt; 宣言は &lt;code&gt;default (t1, ..., tn)&lt;/code&gt; ようになり、各 &lt;code&gt;ti&lt;/code&gt; に対して &lt;code&gt;Num ti&lt;/code&gt; が保持される必要があります。これは、各 &lt;code&gt;ti&lt;/code&gt; に対して、 &lt;code&gt;C ti&lt;/code&gt; が保持するような対話型クラス &lt;code&gt;C&lt;/code&gt; が存在する必要があると言うために緩和されています。つまり、これらのリストでは型&lt;em&gt;コンストラクタ&lt;/em&gt;を許可できます。たとえば、 &lt;code&gt;Foldable&lt;/code&gt; 制約をデフォルトで &lt;code&gt;Maybe&lt;/code&gt; にしたい場合、次のように機能します&lt;em&gt;&lt;/em&gt;ただし、 &lt;code&gt;Num&lt;/code&gt; 制約のデフォルトは引き続き &lt;code&gt;Integer&lt;/code&gt; または &lt;code&gt;Double&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="66391afbb5d9bc2304cefb3b644abd022794aa14" translate="yes" xml:space="preserve">
          <source>Since the semantics of pattern matching in case expressions is strict, this usually has no effect whatsoever. But it does make a difference in the degenerate case of variables and newtypes. So</source>
          <target state="translated">大文字小文字のパターンマッチングのセマンティクスは厳密なので、通常は何の影響もありません。しかし、変数やニュータイプの退化したケースでは違いがあります。そのため</target>
        </trans-unit>
        <trans-unit id="0cea23350a88954c9487d31e0b35ad738ef40ded" translate="yes" xml:space="preserve">
          <source>Since the translation uses &lt;code&gt;|||&lt;/code&gt;, the arrow concerned must belong to the &lt;code&gt;ArrowChoice&lt;/code&gt; class.</source>
          <target state="translated">翻訳では &lt;code&gt;|||&lt;/code&gt; 、関係する矢印は &lt;code&gt;ArrowChoice&lt;/code&gt; クラスに属している必要があります。</target>
        </trans-unit>
        <trans-unit id="4434cedbc25a9b21d7d06d3713a6484879933703" translate="yes" xml:space="preserve">
          <source>Since:</source>
          <target state="translated">Since:</target>
        </trans-unit>
        <trans-unit id="77def7beba57681c13b67bbe39738aa4b7cbd1d2" translate="yes" xml:space="preserve">
          <source>Since: array-0.4.0.0</source>
          <target state="translated">以降:array-0.4.0.0.0</target>
        </trans-unit>
        <trans-unit id="edf610fa82eebe50d34335d39e3e1610a5ca1584" translate="yes" xml:space="preserve">
          <source>Since: base-2.0.1</source>
          <target state="translated">以降:base-2.0.1</target>
        </trans-unit>
        <trans-unit id="aee04122d549b2e4aa6954d6c06b6ffb6a09909a" translate="yes" xml:space="preserve">
          <source>Since: base-2.1</source>
          <target state="translated">以降:base-2.1</target>
        </trans-unit>
        <trans-unit id="dcde35893e4d6dc32d096855f15dcf5ea3247487" translate="yes" xml:space="preserve">
          <source>Since: base-3.0</source>
          <target state="translated">以降:base-3.0</target>
        </trans-unit>
        <trans-unit id="be060310da47406378288eb54af64a5df3346140" translate="yes" xml:space="preserve">
          <source>Since: base-4.0</source>
          <target state="translated">以降:base-4.0</target>
        </trans-unit>
        <trans-unit id="4f866c74c054a47d6140e4fc6d5be8de11f99994" translate="yes" xml:space="preserve">
          <source>Since: base-4.0.0.0</source>
          <target state="translated">以降:base-4.0.0.0.0</target>
        </trans-unit>
        <trans-unit id="7d12eeaf7cce814b0171237c84978cff10f83652" translate="yes" xml:space="preserve">
          <source>Since: base-4.1.0.0</source>
          <target state="translated">以降:base-4.1.0.0</target>
        </trans-unit>
        <trans-unit id="05d33b2fd09ae58a6be7191730fc97d0c21a2f4d" translate="yes" xml:space="preserve">
          <source>Since: base-4.10</source>
          <target state="translated">以降:base-4.10</target>
        </trans-unit>
        <trans-unit id="13f96c7c19da91d3b76637089fe3d61114bac377" translate="yes" xml:space="preserve">
          <source>Since: base-4.10.0.0</source>
          <target state="translated">以降:base-4.10.0.0</target>
        </trans-unit>
        <trans-unit id="f0b4e2c80c6439234dda497542e0fb4b91039b2a" translate="yes" xml:space="preserve">
          <source>Since: base-4.11</source>
          <target state="translated">以降:base-4.11</target>
        </trans-unit>
        <trans-unit id="683ec4ab5b5bc414eea9901a86c5ba15f8e88688" translate="yes" xml:space="preserve">
          <source>Since: base-4.11.0.0</source>
          <target state="translated">以降:base-4.11.0.0</target>
        </trans-unit>
        <trans-unit id="e8a5cd5f7f090603e16566046cda15e3e4135697" translate="yes" xml:space="preserve">
          <source>Since: base-4.12.0.0</source>
          <target state="translated">以降:base-4.12.0.0</target>
        </trans-unit>
        <trans-unit id="5af6852241714d9fdb31605fd1f208d9c6009de3" translate="yes" xml:space="preserve">
          <source>Since: base-4.13.0.0</source>
          <target state="translated">以降:base-4.13.0.0</target>
        </trans-unit>
        <trans-unit id="38326ad2575b534e56c4be5611359e24936a3859" translate="yes" xml:space="preserve">
          <source>Since: base-4.14.0.0</source>
          <target state="translated">以降:base-4.14.0.0</target>
        </trans-unit>
        <trans-unit id="1fdcb9b54c0681c318aee2c0738a74788f34d962" translate="yes" xml:space="preserve">
          <source>Since: base-4.15</source>
          <target state="translated">以降:Base-4.15</target>
        </trans-unit>
        <trans-unit id="e7302425c56ff600e8fb2ea080892bc7122447c9" translate="yes" xml:space="preserve">
          <source>Since: base-4.15.0.0</source>
          <target state="translated">以降:base-4.15.0.0</target>
        </trans-unit>
        <trans-unit id="eb6dd42022e6c37b6d8a2db8819868d46dbed0ed" translate="yes" xml:space="preserve">
          <source>Since: base-4.2.0.0</source>
          <target state="translated">以降:base-4.2.0.0</target>
        </trans-unit>
        <trans-unit id="a09d23c3cf1105f84b13bb28455cd72dee2790e4" translate="yes" xml:space="preserve">
          <source>Since: base-4.3.0.0</source>
          <target state="translated">以降:base-4.3.0.0</target>
        </trans-unit>
        <trans-unit id="144f1a3697c9ba27bd4249620fbf1bd9ea7f587f" translate="yes" xml:space="preserve">
          <source>Since: base-4.3.1.0</source>
          <target state="translated">以降:base-4.3.1.0</target>
        </trans-unit>
        <trans-unit id="680457cc73e9dd574fa979ff49af4da5b57992b0" translate="yes" xml:space="preserve">
          <source>Since: base-4.4.0.0</source>
          <target state="translated">以降:base-4.4.0.0.0</target>
        </trans-unit>
        <trans-unit id="f75c6bc02d8b9b78a830ddca4064ffd908c23e26" translate="yes" xml:space="preserve">
          <source>Since: base-4.5.0.0</source>
          <target state="translated">以降:base-4.5.0.0.0</target>
        </trans-unit>
        <trans-unit id="5ae7f8cea58726ff3644070a6db4a739241c1acc" translate="yes" xml:space="preserve">
          <source>Since: base-4.5.1.0</source>
          <target state="translated">以降:base-4.5.1.0</target>
        </trans-unit>
        <trans-unit id="03a1803c388da99e52160354039f4ba8b886fd0a" translate="yes" xml:space="preserve">
          <source>Since: base-4.6.0.0</source>
          <target state="translated">以降:base-4.6.0.0</target>
        </trans-unit>
        <trans-unit id="85e9cfb41e19fb0e4e80bef745aafb6d92fcf4e1" translate="yes" xml:space="preserve">
          <source>Since: base-4.7.0.0</source>
          <target state="translated">以降:base-4.7.0.0</target>
        </trans-unit>
        <trans-unit id="46488ca60516ce3e49a1e0df18bd8590e8cfa510" translate="yes" xml:space="preserve">
          <source>Since: base-4.7.1.0</source>
          <target state="translated">以降:base-4.7.1.0</target>
        </trans-unit>
        <trans-unit id="76ab5db5cd82a814866a80e90191a0d846519c6a" translate="yes" xml:space="preserve">
          <source>Since: base-4.8.0</source>
          <target state="translated">以降:base-4.8.0</target>
        </trans-unit>
        <trans-unit id="6ba2d0be46afd875d370d91e7321fd9bf26a8590" translate="yes" xml:space="preserve">
          <source>Since: base-4.8.0.0</source>
          <target state="translated">以降:base-4.8.0.0</target>
        </trans-unit>
        <trans-unit id="f426eca9a2be82f35331af20b4cfe339247c0995" translate="yes" xml:space="preserve">
          <source>Since: base-4.8.1.0</source>
          <target state="translated">以降:base-4.8.1.0</target>
        </trans-unit>
        <trans-unit id="11b390bc2c4894d60b23a370abbb27423829a35f" translate="yes" xml:space="preserve">
          <source>Since: base-4.8.2.0</source>
          <target state="translated">以降:base-4.8.2.0</target>
        </trans-unit>
        <trans-unit id="35579eb050b331ba1656177052fdcbc9e5a7483e" translate="yes" xml:space="preserve">
          <source>Since: base-4.9.0.0</source>
          <target state="translated">以降:base-4.9.0.0</target>
        </trans-unit>
        <trans-unit id="658e7afd7720cc41503432edd0c6116f4b6e8a4d" translate="yes" xml:space="preserve">
          <source>Since: binary-0.6.4.0</source>
          <target state="translated">以降:binary-0.6.4.0</target>
        </trans-unit>
        <trans-unit id="e1254dc15885f528e522e321e7322e049ab4c07d" translate="yes" xml:space="preserve">
          <source>Since: binary-0.7.0.0</source>
          <target state="translated">以降:binary-0.7.0.0.0</target>
        </trans-unit>
        <trans-unit id="9df3d7e6dd0e0c223fc816bd04de0611d7d49fa4" translate="yes" xml:space="preserve">
          <source>Since: binary-0.7.1.0</source>
          <target state="translated">以降:binary-0.7.1.0</target>
        </trans-unit>
        <trans-unit id="3d8accc860c008eff39b30c31f5ee1a6438088f4" translate="yes" xml:space="preserve">
          <source>Since: binary-0.7.2.0</source>
          <target state="translated">以降:binary-0.7.2.0</target>
        </trans-unit>
        <trans-unit id="4d47c9c367ee9364536b7778828cc37b93197d84" translate="yes" xml:space="preserve">
          <source>Since: binary-0.7.3.0</source>
          <target state="translated">以降:binary-0.7.3.0</target>
        </trans-unit>
        <trans-unit id="8eca414fddbddbf89e34bbdb86c556a83275161f" translate="yes" xml:space="preserve">
          <source>Since: binary-0.7.6.0</source>
          <target state="translated">以降:binary-0.7.6.0</target>
        </trans-unit>
        <trans-unit id="c829cb1478c66580c9bfd528d1bbe79a07bfbaa5" translate="yes" xml:space="preserve">
          <source>Since: binary-0.8.0.0</source>
          <target state="translated">以降:binary-0.8.0.0.0</target>
        </trans-unit>
        <trans-unit id="df32c99ffc6d58246dc2570e031500fcf72546a5" translate="yes" xml:space="preserve">
          <source>Since: binary-0.8.4.0</source>
          <target state="translated">以降:binary-0.8.4.0</target>
        </trans-unit>
        <trans-unit id="ebb2e8cb34f3772781da1e84b010972418d76bc8" translate="yes" xml:space="preserve">
          <source>Since: binary-0.8.5.0</source>
          <target state="translated">以降:binary-0.8.5.0</target>
        </trans-unit>
        <trans-unit id="18c425e1b8587d0b2c4b6bf9f213d6790905745f" translate="yes" xml:space="preserve">
          <source>Since: bytestring-0.10.10.0</source>
          <target state="translated">以降:bytestring-0.10.10.0</target>
        </trans-unit>
        <trans-unit id="925ae28e6d8b3de1bbec81df32bc9caa7be1dde0" translate="yes" xml:space="preserve">
          <source>Since: bytestring-0.10.12.0</source>
          <target state="translated">Since:bytestring-0.10.12.0</target>
        </trans-unit>
        <trans-unit id="6518880ea188f60056ca82c073f5d56cbfd34edc" translate="yes" xml:space="preserve">
          <source>Since: bytestring-0.10.6.0</source>
          <target state="translated">以降:bytestring-0.10.6.0</target>
        </trans-unit>
        <trans-unit id="0380db1a0bdc415031dd3036a309afa37f855cb9" translate="yes" xml:space="preserve">
          <source>Since: bytestring-0.10.8.0</source>
          <target state="translated">以降:bytestring-0.10.8.0</target>
        </trans-unit>
        <trans-unit id="fdf6e3c7b504de7245d979d91df8a2646b848ecc" translate="yes" xml:space="preserve">
          <source>Since: containers-0.3.0</source>
          <target state="translated">以降:containers-0.3.0</target>
        </trans-unit>
        <trans-unit id="f06861bb8e4e4be2b3677620bebf64a3c5ad40a8" translate="yes" xml:space="preserve">
          <source>Since: containers-0.5.11</source>
          <target state="translated">以降:containers-0.5.11</target>
        </trans-unit>
        <trans-unit id="577b8aadc1cb4368cf53ffefdc40a69f4597906d" translate="yes" xml:space="preserve">
          <source>Since: containers-0.5.4</source>
          <target state="translated">以降:containers-0.5.4</target>
        </trans-unit>
        <trans-unit id="fc1cf1dd4ede2f7f17476148a62faf21986fb885" translate="yes" xml:space="preserve">
          <source>Since: containers-0.5.6.2</source>
          <target state="translated">以降:containers-0.5.6.2</target>
        </trans-unit>
        <trans-unit id="13e4f07bc2720d1cffeeb52d2dc06893ee8d870c" translate="yes" xml:space="preserve">
          <source>Since: containers-0.5.7</source>
          <target state="translated">以降:containers-0.5.7</target>
        </trans-unit>
        <trans-unit id="47f9c4b76709a133698fdeca81e3051dc9505b51" translate="yes" xml:space="preserve">
          <source>Since: containers-0.5.8</source>
          <target state="translated">以降:containers-0.5.8</target>
        </trans-unit>
        <trans-unit id="ae27d699c1c6990c388b145614849e38387c6286" translate="yes" xml:space="preserve">
          <source>Since: containers-0.5.9</source>
          <target state="translated">以降:containers-0.5.9</target>
        </trans-unit>
        <trans-unit id="2b133bb65c60d58b732f7bf441a5584fa48e61aa" translate="yes" xml:space="preserve">
          <source>Since: containers-0.6.0.1</source>
          <target state="translated">Since:containers-0.6.0.1</target>
        </trans-unit>
        <trans-unit id="78520db3f1b0ec496990ff4370a69536fffd930b" translate="yes" xml:space="preserve">
          <source>Since: containers-0.6.2.1</source>
          <target state="translated">以降:containers-0.6.2.1</target>
        </trans-unit>
        <trans-unit id="9fbe865014717c6efe091c69c7711d590606b54e" translate="yes" xml:space="preserve">
          <source>Since: containers-0.6.3.1</source>
          <target state="translated">Since:containers-0.6.3.1</target>
        </trans-unit>
        <trans-unit id="5ff94c61a77f414b07542aefeafc2ced0bd363df" translate="yes" xml:space="preserve">
          <source>Since: containers-0.6.4</source>
          <target state="translated">Since:containers-0.6.4</target>
        </trans-unit>
        <trans-unit id="8522e90c33a3f82e61cc697ad582479c24002695" translate="yes" xml:space="preserve">
          <source>Since: deepseq-1.1.0.0</source>
          <target state="translated">以降:deepseq-1.1.0.0</target>
        </trans-unit>
        <trans-unit id="ba0b40b62680e1546633deea4523d9f070b52939" translate="yes" xml:space="preserve">
          <source>Since: deepseq-1.2.0.0</source>
          <target state="translated">以降:deepseq-1.2.0.0</target>
        </trans-unit>
        <trans-unit id="23b0c0cc1f5cc41cd8fdf05342c8bbf805c0798b" translate="yes" xml:space="preserve">
          <source>Since: deepseq-1.3.0.0</source>
          <target state="translated">以降:deepseq-1.3.0.0</target>
        </trans-unit>
        <trans-unit id="59f0c9cbf4feb123aafa1a5a5703b539a5b4fda6" translate="yes" xml:space="preserve">
          <source>Since: deepseq-1.4.0.0</source>
          <target state="translated">以降:deepseq-1.4.0.0</target>
        </trans-unit>
        <trans-unit id="0fe7e33f7665b0ce8e1ababedf6898c47b29c9aa" translate="yes" xml:space="preserve">
          <source>Since: deepseq-1.4.2.0</source>
          <target state="translated">以降:deepseq-1.4.2.0</target>
        </trans-unit>
        <trans-unit id="39f4ae9d4ce6a16c2bf1af2aef06b7676ecccc70" translate="yes" xml:space="preserve">
          <source>Since: deepseq-1.4.3.0</source>
          <target state="translated">以降:deepseq-1.4.3.0</target>
        </trans-unit>
        <trans-unit id="742e67906f923078347ec8ee540c00ed9681da69" translate="yes" xml:space="preserve">
          <source>Since: deepseq-1.4.4.0</source>
          <target state="translated">以降:deepseq-1.4.4.4.0</target>
        </trans-unit>
        <trans-unit id="7a5c3230ba84c3f2b4f312010d88ae9e5692c4f1" translate="yes" xml:space="preserve">
          <source>Since: directory-1.2.1.0</source>
          <target state="translated">以降:directory-1.2.1.0</target>
        </trans-unit>
        <trans-unit id="65b42c7a9a69ce5572b0c7234fb5f6767a450d39" translate="yes" xml:space="preserve">
          <source>Since: directory-1.2.2.0</source>
          <target state="translated">以降:directory-1.2.2.2.0</target>
        </trans-unit>
        <trans-unit id="bc4052b1dd8564d95ce1b9f9431caef291a4bd56" translate="yes" xml:space="preserve">
          <source>Since: directory-1.2.3.0</source>
          <target state="translated">以降:directory-1.2.3.0</target>
        </trans-unit>
        <trans-unit id="f0238ae30cb2d6ad58309654cc6dbd216f38364c" translate="yes" xml:space="preserve">
          <source>Since: directory-1.2.4.0</source>
          <target state="translated">以降:directory-1.2.4.0</target>
        </trans-unit>
        <trans-unit id="6b50a2b40a56c1e3a9e95e2c334661d111e94ce2" translate="yes" xml:space="preserve">
          <source>Since: directory-1.2.5.0</source>
          <target state="translated">以降:directory-1.2.5.0</target>
        </trans-unit>
        <trans-unit id="6e2b33aa315c83e970d7d495e06755f5409436fd" translate="yes" xml:space="preserve">
          <source>Since: directory-1.2.6.0</source>
          <target state="translated">以降:directory-1.2.6.0</target>
        </trans-unit>
        <trans-unit id="a9095f546a294ceb9fc37230e06d9919d9d3ae9d" translate="yes" xml:space="preserve">
          <source>Since: directory-1.2.7.0</source>
          <target state="translated">以降:directory-1.2.7.0</target>
        </trans-unit>
        <trans-unit id="a40dfe915a83635ffc721f1d82e530692a392aed" translate="yes" xml:space="preserve">
          <source>Since: directory-1.3.0.0</source>
          <target state="translated">以降:directory-1.3.0.0.0</target>
        </trans-unit>
        <trans-unit id="dadb98c14951153ce3fe87ace2ba1accd0b22e29" translate="yes" xml:space="preserve">
          <source>Since: directory-1.3.1.0</source>
          <target state="translated">以降:directory-1.3.1.0</target>
        </trans-unit>
        <trans-unit id="57a78f7ba776ce5334ae2670a31ac864d0149ded" translate="yes" xml:space="preserve">
          <source>Since: directory-1.3.2.0</source>
          <target state="translated">以降:directory-1.3.2.0</target>
        </trans-unit>
        <trans-unit id="0e0f1e314f11c558938a10dfac547a0b62f5dbc1" translate="yes" xml:space="preserve">
          <source>Since: exceptions-0.10.0</source>
          <target state="translated">以降:exceptions-0.10.0</target>
        </trans-unit>
        <trans-unit id="4a15ae376a67eb7aa798bf3a370ad84becf101cb" translate="yes" xml:space="preserve">
          <source>Since: exceptions-0.8.3</source>
          <target state="translated">以降:exceptions-0.8.3</target>
        </trans-unit>
        <trans-unit id="befe2b35c3325d013f0354bdaa2a627e8e4d9d8f" translate="yes" xml:space="preserve">
          <source>Since: exceptions-0.9.0</source>
          <target state="translated">以降:exceptions-0.9.0</target>
        </trans-unit>
        <trans-unit id="2c2e51efb76d50326f5e12852339d51262b4bf1e" translate="yes" xml:space="preserve">
          <source>Since: ghc-prim-4.7.0.0</source>
          <target state="translated">以降:ghc-prim-4.7.0.0</target>
        </trans-unit>
        <trans-unit id="b829433a6a8bc4969728e4c2f98e041dcac4bbdb" translate="yes" xml:space="preserve">
          <source>Since: integer-gmp-0.5.1.0</source>
          <target state="translated">以降:integer-gmp-0.5.1.0</target>
        </trans-unit>
        <trans-unit id="bd054c527ebccc74ae7d1d0a3e09384ae22a43d4" translate="yes" xml:space="preserve">
          <source>Since: integer-gmp-1.0.0.0</source>
          <target state="translated">以降:integer-gmp-1.0.0.0</target>
        </trans-unit>
        <trans-unit id="43920e394a2ba131398c556bf12bb033f35c9c19" translate="yes" xml:space="preserve">
          <source>Since: integer-gmp-1.0.2.0</source>
          <target state="translated">以降:integer-gmp-1.0.2.0</target>
        </trans-unit>
        <trans-unit id="004c0ba26418c847845a8cd73a707283b6b7b762" translate="yes" xml:space="preserve">
          <source>Since: mtl-2.2</source>
          <target state="translated">以降:mtl-2.2</target>
        </trans-unit>
        <trans-unit id="7ec1e756cf1356e146a94455a2518bfb08041043" translate="yes" xml:space="preserve">
          <source>Since: mtl-2.2.1</source>
          <target state="translated">以降:mtl-2.2.1</target>
        </trans-unit>
        <trans-unit id="b4e6c09c839d1caa94436ab981a0c2a07125b4c0" translate="yes" xml:space="preserve">
          <source>Since: mtl-2.2.2</source>
          <target state="translated">以降:mtl-2.2.2</target>
        </trans-unit>
        <trans-unit id="13c40b5c2c7f6ade575241224827c7966117515d" translate="yes" xml:space="preserve">
          <source>Since: parsec-3.1.12</source>
          <target state="translated">以降:parsec-3.1.12</target>
        </trans-unit>
        <trans-unit id="f52072649d261562d195b742c7ccd786e827a9b7" translate="yes" xml:space="preserve">
          <source>Since: parsec-3.1.12.0</source>
          <target state="translated">以降:parsec-3.1.12.0</target>
        </trans-unit>
        <trans-unit id="4d6a533c2c6d20dd47d3b12857db2cdaec7a2cdb" translate="yes" xml:space="preserve">
          <source>Since: parsec-3.1.14.0</source>
          <target state="translated">以降:parsec-3.1.14.0</target>
        </trans-unit>
        <trans-unit id="6173b8c40187f0403433affadab2e1b113153635" translate="yes" xml:space="preserve">
          <source>Since: process-1.2.0.0</source>
          <target state="translated">以降:process-1.2.0.0.0</target>
        </trans-unit>
        <trans-unit id="8896f78f6039216ebe47c0235497e88bc80921d6" translate="yes" xml:space="preserve">
          <source>Since: process-1.2.1.0</source>
          <target state="translated">以降:process-1.2.1.0</target>
        </trans-unit>
        <trans-unit id="a70da9bec719dce3f035dbadd7fb71c5cddf1a8d" translate="yes" xml:space="preserve">
          <source>Since: process-1.2.3.0</source>
          <target state="translated">以降:process-1.2.3.0</target>
        </trans-unit>
        <trans-unit id="57742d4cffbe428edb2f9f9ac22d46ba647431a4" translate="yes" xml:space="preserve">
          <source>Since: process-1.3.0.0</source>
          <target state="translated">以降:process-1.3.0.0</target>
        </trans-unit>
        <trans-unit id="d6a5677135258e2e23093787a21e48ca71ecb4c1" translate="yes" xml:space="preserve">
          <source>Since: process-1.4.0.0</source>
          <target state="translated">以降:process-1.4.0.0.0</target>
        </trans-unit>
        <trans-unit id="498b94a80c875e9f98f47da8ec7403dbf39ea6c6" translate="yes" xml:space="preserve">
          <source>Since: process-1.4.2.0</source>
          <target state="translated">以降:process-1.4.2.0</target>
        </trans-unit>
        <trans-unit id="7bc1e7d90ae9c5909f1654ed127ce95087e50cc0" translate="yes" xml:space="preserve">
          <source>Since: process-1.4.3.0</source>
          <target state="translated">以降:process-1.4.3.0</target>
        </trans-unit>
        <trans-unit id="b1b9c1a8beadcf6db9b4297a068995ba68a4927e" translate="yes" xml:space="preserve">
          <source>Since: process-1.5.0.0</source>
          <target state="translated">以降:process-1.5.0.0.0</target>
        </trans-unit>
        <trans-unit id="4189c5931e04cd6fed6cce8762f7e5165b1ba170" translate="yes" xml:space="preserve">
          <source>Since: process-1.6.3.0</source>
          <target state="translated">以降:process-1.6.3.0</target>
        </trans-unit>
        <trans-unit id="049ae56593018f4677ed85e055f9a1ce08f66049" translate="yes" xml:space="preserve">
          <source>Since: process-1.6.4.0</source>
          <target state="translated">以降:process-1.6.4.0</target>
        </trans-unit>
        <trans-unit id="9b7c6b58f57e4a8671138b2114c78b0b54c65398" translate="yes" xml:space="preserve">
          <source>Since: process-1.6.6.0</source>
          <target state="translated">以降:process-1.6.6.6.0</target>
        </trans-unit>
        <trans-unit id="ac8a27e52dca71762bc74740bf4af5f72f77b87a" translate="yes" xml:space="preserve">
          <source>Since: stm-2.1.1</source>
          <target state="translated">以降:stm-2.1.1</target>
        </trans-unit>
        <trans-unit id="5c2c66abc6e977dff9b834ac6480f85638a86ec6" translate="yes" xml:space="preserve">
          <source>Since: stm-2.3</source>
          <target state="translated">以降:stm-2.3</target>
        </trans-unit>
        <trans-unit id="965dff965e12a908b89b54c941c884ee7f2229f5" translate="yes" xml:space="preserve">
          <source>Since: stm-2.4</source>
          <target state="translated">以降:stm-2.4</target>
        </trans-unit>
        <trans-unit id="44cf8ad94a99b2f1040f22f0c75084026130c01e" translate="yes" xml:space="preserve">
          <source>Since: stm-2.4.2</source>
          <target state="translated">以降:stm-2.4.2</target>
        </trans-unit>
        <trans-unit id="2301069f7c516acb3207b256c89590bdbf70a9e9" translate="yes" xml:space="preserve">
          <source>Since: stm-2.4.3</source>
          <target state="translated">以降:stm-2.4.3</target>
        </trans-unit>
        <trans-unit id="9b7e05e66356944adf88eee159b3ab5ac884b069" translate="yes" xml:space="preserve">
          <source>Since: stm-2.4.4</source>
          <target state="translated">以降:stm-2.4.4</target>
        </trans-unit>
        <trans-unit id="857edb3f4333fcaabe059867bf8052f4b6b1477e" translate="yes" xml:space="preserve">
          <source>Since: stm-2.4.5</source>
          <target state="translated">以降:stm-2.4.5</target>
        </trans-unit>
        <trans-unit id="7286bc217a3cd4d33959970f2b786deaf882f174" translate="yes" xml:space="preserve">
          <source>Since: stm-2.5.0</source>
          <target state="translated">以降:stm-2.5.0</target>
        </trans-unit>
        <trans-unit id="3c869e7edea16d874494af249b4126984bd821db" translate="yes" xml:space="preserve">
          <source>Since: stm-2.5.0.0</source>
          <target state="translated">以降:stm-2.5.0.0</target>
        </trans-unit>
        <trans-unit id="f67b9fe7a58ad39b2e35517726d3db81b19aade3" translate="yes" xml:space="preserve">
          <source>Since: template-haskell-2.15.0.0</source>
          <target state="translated">以降:template-haskell-2.15.0.0</target>
        </trans-unit>
        <trans-unit id="a7304c429569bb460bef240e56bc834cea587f4b" translate="yes" xml:space="preserve">
          <source>Since: template-haskell-2.16.0.0</source>
          <target state="translated">以降:template-haskell-2.16.0.0.0</target>
        </trans-unit>
        <trans-unit id="dece4208dd4707329b7300737141d2da48838203" translate="yes" xml:space="preserve">
          <source>Since: template-haskell-2.17.0.0</source>
          <target state="translated">Since:template-haskell-2.17.0.0</target>
        </trans-unit>
        <trans-unit id="8aabacf9854282527de969fd23dbcdbc51ff78ec" translate="yes" xml:space="preserve">
          <source>Since: text-1.0.0.0</source>
          <target state="translated">以降:text-1.0.0.0.0</target>
        </trans-unit>
        <trans-unit id="ac1ea29ccfe8bd36cc9b751cf0b1ff463e545e5a" translate="yes" xml:space="preserve">
          <source>Since: text-1.1.0.0</source>
          <target state="translated">以降:text-1.1.0.0</target>
        </trans-unit>
        <trans-unit id="bb53e2414ab0137617e64e01a9860e801a35448c" translate="yes" xml:space="preserve">
          <source>Since: text-1.1.1.0</source>
          <target state="translated">以降:text-1.1.1.0</target>
        </trans-unit>
        <trans-unit id="5d32cc5824dc965d69da87f6912c59a36a2fead3" translate="yes" xml:space="preserve">
          <source>Since: text-1.2.0.0</source>
          <target state="translated">以降:text-1.2.0.0</target>
        </trans-unit>
        <trans-unit id="1fb0fda51801f74cccca168e2b8213b751303ba6" translate="yes" xml:space="preserve">
          <source>Since: text-1.2.0.5</source>
          <target state="translated">以降:text-1.2.0.5</target>
        </trans-unit>
        <trans-unit id="c9e336d4dce405d619839f75ec3e1f317f755928" translate="yes" xml:space="preserve">
          <source>Since: text-1.2.1.0</source>
          <target state="translated">以降:text-1.2.1.0</target>
        </trans-unit>
        <trans-unit id="6acb17f9287ddf6b6a58d7bbcbf3426fe18904eb" translate="yes" xml:space="preserve">
          <source>Since: text-1.2.1.1</source>
          <target state="translated">以降:text-1.2.1.1.1</target>
        </trans-unit>
        <trans-unit id="988b102348b68065a69dff157ca14bc8858843a6" translate="yes" xml:space="preserve">
          <source>Since: text-1.2.2.0</source>
          <target state="translated">以降:text-1.2.2.2.0</target>
        </trans-unit>
        <trans-unit id="9cd01f28b288a0f48d503cb143cbd29939600897" translate="yes" xml:space="preserve">
          <source>Since: text-1.2.3.0</source>
          <target state="translated">以降:text-1.2.3.0</target>
        </trans-unit>
        <trans-unit id="7ee99f863662dbbabaddbfa21372c79b7e136f26" translate="yes" xml:space="preserve">
          <source>Since: text-1.2.4.0</source>
          <target state="translated">以降:text-1.2.4.0</target>
        </trans-unit>
        <trans-unit id="3cfede30507dcb300d436671c18da9ff6aeb363c" translate="yes" xml:space="preserve">
          <source>Since: time-1.9.1</source>
          <target state="translated">以降:time-1.9.1</target>
        </trans-unit>
        <trans-unit id="374097987d66186f927af026e737463802906874" translate="yes" xml:space="preserve">
          <source>Since: time-1.9.2</source>
          <target state="translated">以降:time-1.9.2</target>
        </trans-unit>
        <trans-unit id="377a583802c298cd81e90936d99bfec164df44aa" translate="yes" xml:space="preserve">
          <source>Since: unix-2.7.0.0</source>
          <target state="translated">以降:unix-2.7.0.0</target>
        </trans-unit>
        <trans-unit id="a82c41491e9a18319c2f514b90d9e4bcb2aecb44" translate="yes" xml:space="preserve">
          <source>Since: unix-2.7.1.0</source>
          <target state="translated">以降:unix-2.7.1.0</target>
        </trans-unit>
        <trans-unit id="0ba4fc6db3d406b16b4b8fde03d4704598511128" translate="yes" xml:space="preserve">
          <source>Since: xhtml-3000.2.2</source>
          <target state="translated">以降:xhtml-3000.2.2.2</target>
        </trans-unit>
        <trans-unit id="20d2ef17cb47b98fef4cfaf10b396482cd42ec29" translate="yes" xml:space="preserve">
          <source>Single digit characters</source>
          <target state="translated">一桁文字</target>
        </trans-unit>
        <trans-unit id="1e9345ad9bb25be4b1cf58b3adf8865600be7c7b" translate="yes" xml:space="preserve">
          <source>Single-arg lambda</source>
          <target state="translated">シングルアルグラムダ</target>
        </trans-unit>
        <trans-unit id="14669f485c7e56115731a61454d09957eaca9d40" translate="yes" xml:space="preserve">
          <source>Single-byte encodings that map directly to Unicode code points.</source>
          <target state="translated">Unicode コードポイントに直接マップするシングルバイトエンコーディング。</target>
        </trans-unit>
        <trans-unit id="6e37ddbd6674a40e66efc0bc23ed651836fbd696" translate="yes" xml:space="preserve">
          <source>Single-precision floating point numbers. It is desirable that this type be at least equal in range and precision to the IEEE single-precision type.</source>
          <target state="translated">単精度浮動小数点数。この型は、少なくともIEEEE単精度型と同等の範囲と精度であることが望ましい。</target>
        </trans-unit>
        <trans-unit id="ce33b41f5288545cb2356817cb6cedd453e57b8e" translate="yes" xml:space="preserve">
          <source>Single-stepping is a great way to visualise the execution of your program, and it is also a useful tool for identifying the source of a bug. GHCi offers two variants of stepping. Use &lt;a href=&quot;#ghci-cmd-:step&quot;&gt;&lt;code&gt;:step&lt;/code&gt;&lt;/a&gt; to enable all the breakpoints in the program, and execute until the next breakpoint is reached. Use &lt;a href=&quot;#ghci-cmd-:steplocal&quot;&gt;&lt;code&gt;:steplocal&lt;/code&gt;&lt;/a&gt; to limit the set of enabled breakpoints to those in the current top level function. Similarly, use &lt;a href=&quot;#ghci-cmd-:stepmodule&quot;&gt;&lt;code&gt;:stepmodule&lt;/code&gt;&lt;/a&gt; to single step only on breakpoints contained in the current module. For example:</source>
          <target state="translated">シングルステップは、プログラムの実行を視覚化する優れた方法であり、バグの原因を特定するための便利なツールでもあります。GHCiには、ステッピングの2つのバリアントがあります。&lt;a href=&quot;#ghci-cmd-:step&quot;&gt; &lt;code&gt;:step&lt;/code&gt; &lt;/a&gt;を使用してプログラムのすべてのブレークポイントを有効にし、次のブレークポイントに到達するまで実行します。&lt;a href=&quot;#ghci-cmd-:steplocal&quot;&gt; &lt;code&gt;:steplocal&lt;/code&gt; &lt;/a&gt;を使用して、有効なブレークポイントのセットを現在のトップレベル関数のブレークポイントに制限します。同様に、&lt;a href=&quot;#ghci-cmd-:stepmodule&quot;&gt; &lt;code&gt;:stepmodule&lt;/code&gt; &lt;/a&gt;を使用して、現在のモジュールに含まれているブレークポイントでのみシングルステップを実行します。例えば：</target>
        </trans-unit>
        <trans-unit id="0fbed616e820e529c17fe989f933ba66cd5b42ad" translate="yes" xml:space="preserve">
          <source>Six type synonyms are provided for convenience:</source>
          <target state="translated">便利なように6種類の類義語が用意されています。</target>
        </trans-unit>
        <trans-unit id="b7152342a267362add3c0d7f69f720f7a9c76c9e" translate="yes" xml:space="preserve">
          <source>Size</source>
          <target state="translated">Size</target>
        </trans-unit>
        <trans-unit id="ee88a459725792c449b28f989797c18caa3cfbd5" translate="yes" xml:space="preserve">
          <source>Size hints.</source>
          <target state="translated">サイズのヒント。</target>
        </trans-unit>
        <trans-unit id="23aa6e811d60088ebfe23efb308861aa99dcc44c" translate="yes" xml:space="preserve">
          <source>Size in bytes</source>
          <target state="translated">サイズ(バイト数</target>
        </trans-unit>
        <trans-unit id="2ced24d9bc086de69d1e6c412ac712c671ff2940" translate="yes" xml:space="preserve">
          <source>Size of first buffer</source>
          <target state="translated">最初のバッファのサイズ</target>
        </trans-unit>
        <trans-unit id="9b93ec609f720ca0a12d37261230464f95d759c4" translate="yes" xml:space="preserve">
          <source>Size of mapped area</source>
          <target state="translated">マップされた領域のサイズ</target>
        </trans-unit>
        <trans-unit id="fcacc325302e2347b1d98a261a5af1eedb76da58" translate="yes" xml:space="preserve">
          <source>Size of region to lock</source>
          <target state="translated">ロックする領域のサイズ</target>
        </trans-unit>
        <trans-unit id="f0254837d170bb8c800cefdaca160c811c8faa93" translate="yes" xml:space="preserve">
          <source>Size of region to unlock</source>
          <target state="translated">ロック解除する領域の大きさ</target>
        </trans-unit>
        <trans-unit id="a61bd3d28a161f9bb15e04c0ec6e593b7dfbe96f" translate="yes" xml:space="preserve">
          <source>Size of successive buffers</source>
          <target state="translated">連続するバッファのサイズ</target>
        </trans-unit>
        <trans-unit id="6ff89a859c0ba07715f955ae4145f4dc3f84e978" translate="yes" xml:space="preserve">
          <source>Size of the file in bytes. If this file is a symbolic link the size is the length of the pathname it contains.</source>
          <target state="translated">ファイルのサイズをバイト単位で指定します。このファイルがシンボリックリンクの場合、サイズはそれが含むパス名の長さになります。</target>
        </trans-unit>
        <trans-unit id="9e6881680dcd16572a5b83e38e827cc16d2da9d2" translate="yes" xml:space="preserve">
          <source>Size of the first buffer</source>
          <target state="translated">最初のバッファのサイズ</target>
        </trans-unit>
        <trans-unit id="fe35ba267dcb8f39bac84d1dfc68c1afe1c29e8a" translate="yes" xml:space="preserve">
          <source>Sized unsigned integral types: &lt;code&gt;&lt;a href=&quot;ghc-word#t:Word&quot;&gt;Word&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ghc-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">サイズ付きの符号なし整数型： &lt;code&gt;&lt;a href=&quot;ghc-word#t:Word&quot;&gt;Word&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ghc-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ghc-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ghc-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;ghc-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="96de489fe3c2b4dd68982096808dc9222145c984" translate="yes" xml:space="preserve">
          <source>Sizes</source>
          <target state="translated">Sizes</target>
        </trans-unit>
        <trans-unit id="edff5c71d4c8d43fcb60eae3da014b44cff6889a" translate="yes" xml:space="preserve">
          <source>Sk: Symbol, Modifier</source>
          <target state="translated">Sk:シンボル,修正</target>
        </trans-unit>
        <trans-unit id="ac15a2caab382e4edd0604967978ea93af80034c" translate="yes" xml:space="preserve">
          <source>Skip ahead &lt;code&gt;n&lt;/code&gt; bytes. Fails if fewer than &lt;code&gt;n&lt;/code&gt; bytes are available.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; バイト先にスキップします。使用可能なバイト数が &lt;code&gt;n&lt;/code&gt; 未満の場合は失敗します。</target>
        </trans-unit>
        <trans-unit id="775a6924e43b006a3108939c1828cd348870fe2c" translate="yes" xml:space="preserve">
          <source>Skip past the synopsis for some important notes on performance and portability across different versions of GHC.</source>
          <target state="translated">GHCの異なるバージョン間での性能と移植性に関する重要な注意事項については、シノプシスをスキップしてください。</target>
        </trans-unit>
        <trans-unit id="7307357bd7d3f0d162319fc719cd3048a39c24b5" translate="yes" xml:space="preserve">
          <source>Skips &lt;em&gt;zero&lt;/em&gt; or more white space characters. See also &lt;code&gt;&lt;a href=&quot;text-parsec#v:skipMany&quot;&gt;skipMany&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;ゼロ&lt;/em&gt;個以上の空白文字をスキップし&lt;em&gt;ます&lt;/em&gt;。 &lt;code&gt;&lt;a href=&quot;text-parsec#v:skipMany&quot;&gt;skipMany&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="10c61a6ab1f78695040f7df9004d741983826a75" translate="yes" xml:space="preserve">
          <source>Skips all whitespace.</source>
          <target state="translated">すべての空白をスキップします。</target>
        </trans-unit>
        <trans-unit id="09306439fbb2a3fffb7bac3f9143f96e4c0224bb" translate="yes" xml:space="preserve">
          <source>Sleep for the specified duration (in microseconds).</source>
          <target state="translated">指定された時間(マイクロ秒)だけスリープします。</target>
        </trans-unit>
        <trans-unit id="c368b5139ecb1e62bb50ab1cc9c442cac8ff8fb1" translate="yes" xml:space="preserve">
          <source>Sleep for the specified duration (in nanoseconds)</source>
          <target state="translated">指定された時間だけスリープ(ナノ秒単位</target>
        </trans-unit>
        <trans-unit id="c8f38f865cb98d0faf81d906138a6bd08eacedcc" translate="yes" xml:space="preserve">
          <source>Sleep for the specified duration (in seconds). Returns the time remaining (if the sleep was interrupted by a signal, for example).</source>
          <target state="translated">指定した時間(秒単位)だけスリープします。残り時間を返します(例えば、信号によってスリープが中断された場合など)。</target>
        </trans-unit>
        <trans-unit id="8594c519b8c02edb97e1e02a88f086d5abda30ff" translate="yes" xml:space="preserve">
          <source>Sleep specified number of microseconds.</source>
          <target state="translated">指定されたマイクロ秒数をスリープします。</target>
        </trans-unit>
        <trans-unit id="dd43b59ee118fca8a0c08fafd9a8e0a347b7c213" translate="yes" xml:space="preserve">
          <source>Sleeping</source>
          <target state="translated">Sleeping</target>
        </trans-unit>
        <trans-unit id="3e955acb7111188bb9a8a1b0b71ec56b07e5b988" translate="yes" xml:space="preserve">
          <source>Sleeping.</source>
          <target state="translated">Sleeping.</target>
        </trans-unit>
        <trans-unit id="541383d9a838b8c712f5a57589a561fb8538c524" translate="yes" xml:space="preserve">
          <source>Sliding</source>
          <target state="translated">Sliding</target>
        </trans-unit>
        <trans-unit id="1898a1d18f337556674473cb2c7360096b53ea67" translate="yes" xml:space="preserve">
          <source>Sm: Symbol, Math</source>
          <target state="translated">Sm:記号、数学</target>
        </trans-unit>
        <trans-unit id="0eea20953a5ecdc4c9ba8f993c0ec7b681e147c5" translate="yes" xml:space="preserve">
          <source>SmallArray#</source>
          <target state="translated">SmallArray#</target>
        </trans-unit>
        <trans-unit id="dd84b2369c5418fcf9675c4a7d7bd92b469cc5bd" translate="yes" xml:space="preserve">
          <source>SmallMutableArray#</source>
          <target state="translated">SmallMutableArray#</target>
        </trans-unit>
        <trans-unit id="082e849cd81567000bc4f04d8d038ea06679cad1" translate="yes" xml:space="preserve">
          <source>Smart constructor for &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-internal#v:Chunk&quot;&gt;Chunk&lt;/a&gt;&lt;/code&gt;. Guarantees the data type invariant.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-internal#v:Chunk&quot;&gt;Chunk&lt;/a&gt;&lt;/code&gt; のスマートコンストラクタ。データ型が不変であることを保証します。</target>
        </trans-unit>
        <trans-unit id="ae009355769fc5ef8208422e55c29dfac52203b6" translate="yes" xml:space="preserve">
          <source>Smart constructor for &lt;code&gt;&lt;a href=&quot;data-text-internal-lazy#v:Chunk&quot;&gt;Chunk&lt;/a&gt;&lt;/code&gt;. Guarantees the data type invariant.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-internal-lazy#v:Chunk&quot;&gt;Chunk&lt;/a&gt;&lt;/code&gt; のスマートコンストラクタ。データ型が不変であることを保証します。</target>
        </trans-unit>
        <trans-unit id="2e036da60869e8f04748dfbc4f8faf996a01967c" translate="yes" xml:space="preserve">
          <source>Smart constructor for &lt;code&gt;&lt;a href=&quot;data-text-internal-lazy#v:Empty&quot;&gt;Empty&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-internal-lazy#v:Empty&quot;&gt;Empty&lt;/a&gt;&lt;/code&gt; のスマートコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="44841c358a6ad5d6956d6f7643ad238f48ec2e96" translate="yes" xml:space="preserve">
          <source>So &lt;em&gt;GHC guarantees to inline precisely the code that you wrote&lt;/em&gt;, no more and no less. It does this by capturing a copy of the definition of the function to use for inlining (we call this the &amp;ldquo;inline-RHS&amp;rdquo;), which it leaves untouched, while optimising the ordinarily RHS as usual. For externally-visible functions the inline-RHS (not the optimised RHS) is recorded in the interface file.</source>
          <target state="translated">したがって、&lt;em&gt;GHCは、作成したコードを正確にインライン化することを保証します&lt;/em&gt;。これは、通常どおりRHSを通常どおり最適化しながら、変更せずにそのままにしておくインライン化に使用する関数の定義のコピー（これを「インラインRHS」と呼びます）をキャプチャすることで行われます。外部から見える関数の場合、インラインRHS（最適化されたRHSではない）がインターフェースファイルに記録されます。</target>
        </trans-unit>
        <trans-unit id="2970c036414da3ba365b9f649b8449bd8c1b91a8" translate="yes" xml:space="preserve">
          <source>So far, we have not discussed &lt;em&gt;generative recursion&lt;/em&gt;. Unlike recursive reduction or corecursion, instead of processing a sequence of elements already in memory, generative recursion involves producing a possibly unbounded sequence of values from an initial seed value. The canonical example of this is &lt;code&gt;&lt;a href=&quot;data-list#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; for Lists, with variants available for Vectors and various other structures.</source>
          <target state="translated">これまで、&lt;em&gt;生成的再帰&lt;/em&gt;については説明していません。再帰的リダクションやコアカーションとは異なり、すでにメモリ内にある要素のシーケンスを処理する代わりに、生成的再帰では、初期シード値から無制限の値のシーケンスを生成する必要があります。本の標準的な例はある &lt;code&gt;&lt;a href=&quot;data-list#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; ベクターおよび様々な他の構造に利用可能なバリエーションで、リストのため。</target>
        </trans-unit>
        <trans-unit id="5fe59edcdef1b109742fde147ed868b9a7a0980e" translate="yes" xml:space="preserve">
          <source>So for example if you wanted to compress as well, you could use:</source>
          <target state="translated">そのため、例えば、同様に圧縮したい場合は、次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="3efd5f7f7e186a22a80701125dfe95b2c1eb675c" translate="yes" xml:space="preserve">
          <source>So in fact we use this as our &lt;em&gt;definition&lt;/em&gt; of ambiguity: a type &lt;code&gt;ty&lt;/code&gt; is ambiguous if and only if &lt;code&gt;((undefined :: ty) :: ty)&lt;/code&gt; would fail to typecheck. We use a very similar test for &lt;em&gt;inferred&lt;/em&gt; types, to ensure that they too are unambiguous.</source>
          <target state="translated">したがって、実際には、あいまいさの&lt;em&gt;定義&lt;/em&gt;としてこれを使用します。 &lt;code&gt;((undefined :: ty) :: ty)&lt;/code&gt; が型チェックに失敗した場合にのみ、型 &lt;code&gt;ty&lt;/code&gt; があいまいになります。&lt;em&gt;推論された&lt;/em&gt;型にも非常に類似したテストを使用して、それらも明確であることを確認します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="12880a1736fb221da50ff1ca5f2e86269792caea" translate="yes" xml:space="preserve">
          <source>So in the previous example, when used in an expression, &lt;code&gt;ExNumPat&lt;/code&gt; has type</source>
          <target state="translated">したがって、前の例では、式で使用されると、 &lt;code&gt;ExNumPat&lt;/code&gt; には次のタイプがあります。</target>
        </trans-unit>
        <trans-unit id="a034197073194c7daf973480c055c6e6aa3a8c7b" translate="yes" xml:space="preserve">
          <source>So it looks as if the memo table will keep all its values alive for ever. One way to solve this is to purge the table occasionally, by deleting entries whose keys have died.</source>
          <target state="translated">そのため、メモテーブルはすべての値を永遠に存続させているように見えます。これを解決する1つの方法は、キーが死んだエントリを削除することで、時々テーブルをパージすることです。</target>
        </trans-unit>
        <trans-unit id="71597c36a36665c7487e64f5f299c33bbb186aaa" translate="yes" xml:space="preserve">
          <source>So let&amp;rsquo;s try compiling one of the other modules:</source>
          <target state="translated">それでは、他のモジュールのいずれかをコンパイルしてみましょう：</target>
        </trans-unit>
        <trans-unit id="5742f2870ad7881c300055b4c65112e17e4fb6df" translate="yes" xml:space="preserve">
          <source>So that means you can't use a lazy recursive contruction like this:</source>
          <target state="translated">ということは、このようなダラダラした再帰的なコントラクションは使えないということですね。</target>
        </trans-unit>
        <trans-unit id="8fda64e633b4852cd7ca94d0408efe4729d0d280" translate="yes" xml:space="preserve">
          <source>So the RULE never has a chance to fire, for just the same reasons as in &lt;a href=&quot;#rules-inline&quot;&gt;How rules interact with INLINE/NOINLINE pragmas&lt;/a&gt;.</source>
          <target state="translated">したがって、&lt;a href=&quot;#rules-inline&quot;&gt;ルール&lt;/a&gt;がどのようにINLINE / NOINLINEプラグマと相互作用するかと同じ理由で、RULEが実行される機会はありません。</target>
        </trans-unit>
        <trans-unit id="2b52171bd94949bb4fc94339a76302c2d48f1f5f" translate="yes" xml:space="preserve">
          <source>So the approach taken here is to provide a representation which subsumes many of the versioning schemes commonly in use, and we provide implementations of &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; and conversion to/from &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; which will be appropriate for some applications, but not all.</source>
          <target state="translated">したがって、ここで採用されたアプローチは、一般的に使用されているバージョン管理スキームの多くを包括する表現を提供することであり、 &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; 、およびすべてではなく一部のアプリケーションに適切な &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; との変換の実装を提供します。</target>
        </trans-unit>
        <trans-unit id="0b2bbe31ecd7e628eade8e30a170c3dc3d7f0d61" translate="yes" xml:space="preserve">
          <source>So, &lt;code&gt;&lt;a href=&quot;ghc-generics#t:U1&quot;&gt;U1&lt;/a&gt;&lt;/code&gt; is just the unit type, &lt;code&gt;&lt;a href=&quot;ghc-generics#t::-43-:&quot;&gt;:+:&lt;/a&gt;&lt;/code&gt; is just a binary choice like &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-generics#t::-42-:&quot;&gt;:*:&lt;/a&gt;&lt;/code&gt; is a binary pair like the pair constructor &lt;code&gt;(,)&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ghc-generics#t:K1&quot;&gt;K1&lt;/a&gt;&lt;/code&gt; is a value of a specific type &lt;code&gt;c&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ghc-generics#t:M1&quot;&gt;M1&lt;/a&gt;&lt;/code&gt; wraps a value of the generic type argument, which in the lifted world is an &lt;code&gt;f p&lt;/code&gt; (where we do not care about &lt;code&gt;p&lt;/code&gt;).</source>
          <target state="translated">したがって、 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:U1&quot;&gt;U1&lt;/a&gt;&lt;/code&gt; は単なるユニットタイプ、 &lt;code&gt;&lt;a href=&quot;ghc-generics#t::-43-:&quot;&gt;:+:&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; のようなバイナリの選択、 &lt;code&gt;&lt;a href=&quot;ghc-generics#t::-42-:&quot;&gt;:*:&lt;/a&gt;&lt;/code&gt; はペアコンストラクター &lt;code&gt;(,)&lt;/code&gt; ようなバイナリのペア、 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:K1&quot;&gt;K1&lt;/a&gt;&lt;/code&gt; は特定のタイプ &lt;code&gt;c&lt;/code&gt; の値、 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:M1&quot;&gt;M1&lt;/a&gt;&lt;/code&gt; は aをラップします総称型引数の値。持ち上げられた世界では &lt;code&gt;f p&lt;/code&gt; （ここでは &lt;code&gt;p&lt;/code&gt; は関係ありません）。</target>
        </trans-unit>
        <trans-unit id="4657eb3351469e3823c0006847a0fd29a7706c0a" translate="yes" xml:space="preserve">
          <source>So, before you report a bug because of a core dump, you should probably:</source>
          <target state="translated">だから、コアダンプのせいでバグを報告する前に、おそらく</target>
        </trans-unit>
        <trans-unit id="729d5b2c39984d06063f8f75d246a94f19438390" translate="yes" xml:space="preserve">
          <source>So, for example, the expression &lt;code&gt;length &quot;foo&quot;&lt;/code&gt; will give rise to an ambiguous use of &lt;code&gt;IsString a0&lt;/code&gt; which, because of the above rules, will default to &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">したがって、たとえば、式の &lt;code&gt;length &quot;foo&quot;&lt;/code&gt; は、 &lt;code&gt;IsString a0&lt;/code&gt; のあいまいな使用を引き起こします。これは、上記の規則により、デフォルトで &lt;code&gt;String&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="20df18d1e4fba4a3bc7d6e769107a72a6f7fe96a" translate="yes" xml:space="preserve">
          <source>So, for example, the following should generate no intermediate lists:</source>
          <target state="translated">そのため、例えば以下のようにすると、中間リストは生成されないはずです。</target>
        </trans-unit>
        <trans-unit id="d744a90766c844fe7d8671fff6a3de56d1b5eede" translate="yes" xml:space="preserve">
          <source>So, for example, this will be rejected:</source>
          <target state="translated">なので、例えばこれは却下されます。</target>
        </trans-unit>
        <trans-unit id="518be3884dd7af6372c6e17ccdd411c87beae470" translate="yes" xml:space="preserve">
          <source>So, for example, to force an &lt;code&gt;-Ewurble&lt;/code&gt; option to the assembler, you would tell the driver &lt;code&gt;-opta-Ewurble&lt;/code&gt; (the dash before the E is required).</source>
          <target state="translated">したがって、たとえば、アセンブラに &lt;code&gt;-Ewurble&lt;/code&gt; オプションを強制するには、ドライバに &lt;code&gt;-opta-Ewurble&lt;/code&gt; （Eが必要な前のダッシュ）を指示します。</target>
        </trans-unit>
        <trans-unit id="9f14098b5f961677d9656a963cd4aba692f5f2a7" translate="yes" xml:space="preserve">
          <source>So: Symbol, Other</source>
          <target state="translated">だから。シンボル、その他</target>
        </trans-unit>
        <trans-unit id="940c5aa771e5665f182ea719d8a532302770345a" translate="yes" xml:space="preserve">
          <source>Software Transactional Memory: a modular composable concurrency abstraction. See</source>
          <target state="translated">Software Transactional Memory (ソフトウェア・トランザクション・メモリ):モジュール式の合成可能な同時実行の抽象化。以下を参照。</target>
        </trans-unit>
        <trans-unit id="709c0f3ded96c18e0831ad69a18b3bb977f5c897" translate="yes" xml:space="preserve">
          <source>Solving &lt;code&gt;HasField&lt;/code&gt; constraints depends on the field selector functions that are generated for each datatype definition:</source>
          <target state="translated">&lt;code&gt;HasField&lt;/code&gt; 制約の解決は、各データ型定義に対して生成されるフィールドセレクター関数に依存します。</target>
        </trans-unit>
        <trans-unit id="b0b8f3da4c0650228d0ea82c9191c466b9f63144" translate="yes" xml:space="preserve">
          <source>Some arrows allow application of arrow inputs to other inputs. Instances should satisfy the following laws:</source>
          <target state="translated">矢印の中には、矢印入力を他の入力に適用できるものがあります。インスタンスは以下の法則を満たす必要があります。</target>
        </trans-unit>
        <trans-unit id="28b210bb937af75083dc4473d42d0ea425c660eb" translate="yes" xml:space="preserve">
          <source>Some caveats apply, however. In the current implementation, a profiled program is likely to scale much less well than the unprofiled program, because the profiling implementation uses some shared data structures which require locking in the runtime system. Furthermore, the memory allocation statistics collected by the profiled program are stored in shared memory but &lt;em&gt;not&lt;/em&gt; locked (for speed), which means that these figures might be inaccurate for parallel programs.</source>
          <target state="translated">ただし、いくつかの警告が適用されます。現在の実装では、プロファイリング実装は、ランタイムシステムでのロックを必要とするいくつかの共有データ構造を使用するため、プロファイリングされたプログラムは、プロファイリングされていないプログラムよりもスケーリングがはるかに少ない可能性があります。さらに、プロファイルされたプログラムによって収集されたメモリ割り当ての統計情報は共有メモリに格納されますが、（速度のために）ロックされ&lt;em&gt;ません&lt;/em&gt;。つまり、これらの数値は並列プログラムに対して不正確になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="6317acc5aa205f8070b0ac2748c6e332ccdbd67b" translate="yes" xml:space="preserve">
          <source>Some caveats for POSIX systems:</source>
          <target state="translated">POSIXシステムのためのいくつかの注意点。</target>
        </trans-unit>
        <trans-unit id="d058277da2d734bfb9a747a11fa938e3c5dbc86b" translate="yes" xml:space="preserve">
          <source>Some characters are actually &quot;surrogate&quot; codepoints defined for use in UTF-16. We need to signal an invalid character if we detect them when encoding a sequence of &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;s into &lt;code&gt;&lt;a href=&quot;data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt;s because they won't give valid Unicode.</source>
          <target state="translated">一部の文字は、実際にはUTF-16で使用するために定義された「代理」コードポイントです。 &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; のシーケンスを &lt;code&gt;&lt;a href=&quot;data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; にエンコードするときに検出した場合、無効な文字を通知する必要があります。これは、有効なUnicodeを提供しないためです。</target>
        </trans-unit>
        <trans-unit id="68375bf516d881b3b2ed9d5fc942f00aafaaba22" translate="yes" xml:space="preserve">
          <source>Some computations may not require the full power of state transformers:</source>
          <target state="translated">計算によっては、状態変換器のフルパワーを必要としない場合もあります。</target>
        </trans-unit>
        <trans-unit id="42ea672bde0048cb70ad0b8a0bb8375096f86784" translate="yes" xml:space="preserve">
          <source>Some details</source>
          <target state="translated">いくつかの詳細</target>
        </trans-unit>
        <trans-unit id="3364836e71a69082c5516662c5ad99b374ef4adf" translate="yes" xml:space="preserve">
          <source>Some details:</source>
          <target state="translated">いくつかの詳細。</target>
        </trans-unit>
        <trans-unit id="4239bd8430db07a2ed7e043b8d77eb04c81493c6" translate="yes" xml:space="preserve">
          <source>Some examples below also use the following BiList to showcase empty Bifoldable behaviors when relevant (&lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;(,)&lt;/code&gt; containing always exactly resp. 1 and 2 elements):</source>
          <target state="translated">以下のいくつかの例では、次のBiListを使用して、関連する場合に空のBifoldable動作を示しています（ &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;(,)&lt;/code&gt; は、常に正確にそれぞれ1および2の要素が含まれています）。</target>
        </trans-unit>
        <trans-unit id="6890b4c2dd99a5835fbedd20629d84619c665374" translate="yes" xml:space="preserve">
          <source>Some examples of calling of this function are:</source>
          <target state="translated">この関数の呼び出し例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="128ddf003e6cd572fea01b05f1157adbab6f964a" translate="yes" xml:space="preserve">
          <source>Some flags only make sense for a particular use case.</source>
          <target state="translated">フラグの中には、特定のユースケースでしか意味をなさないものもあります。</target>
        </trans-unit>
        <trans-unit id="fd514ba697ee70ab091ab54b2a42db165d0ecf9e" translate="yes" xml:space="preserve">
          <source>Some flags only make sense for particular target platforms.</source>
          <target state="translated">特定のターゲットプラットフォームでしか意味をなさないフラグもあります。</target>
        </trans-unit>
        <trans-unit id="85fb8cff6adf432fb677b83701d455a9ed7df526" translate="yes" xml:space="preserve">
          <source>Some functors support an implementation of &lt;code&gt;&lt;a href=&quot;control-applicative#v:liftA2&quot;&gt;liftA2&lt;/a&gt;&lt;/code&gt; that is more efficient than the default one. In particular, if &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; is an expensive operation, it is likely better to use &lt;code&gt;&lt;a href=&quot;control-applicative#v:liftA2&quot;&gt;liftA2&lt;/a&gt;&lt;/code&gt; than to &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; over the structure and then use &lt;code&gt;&lt;a href=&quot;control-applicative#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">一部のファンクタは、デフォルトのものよりも効率的な &lt;code&gt;&lt;a href=&quot;control-applicative#v:liftA2&quot;&gt;liftA2&lt;/a&gt;&lt;/code&gt; の実装をサポートしています。特に、 &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;control-applicative#v:liftA2&quot;&gt;liftA2&lt;/a&gt;&lt;/code&gt; 高い操作である場合は、構造体を &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; してから &lt;code&gt;&lt;a href=&quot;control-applicative#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; を使用するよりも、liftA2を使用する方が適切です。</target>
        </trans-unit>
        <trans-unit id="7fd908c7cb649beb35906a0b56fcdaee91fd66b5" translate="yes" xml:space="preserve">
          <source>Some functors support an implementation of &lt;code&gt;&lt;a href=&quot;ghc-base#v:liftA2&quot;&gt;liftA2&lt;/a&gt;&lt;/code&gt; that is more efficient than the default one. In particular, if &lt;code&gt;&lt;a href=&quot;ghc-base#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; is an expensive operation, it is likely better to use &lt;code&gt;&lt;a href=&quot;ghc-base#v:liftA2&quot;&gt;liftA2&lt;/a&gt;&lt;/code&gt; than to &lt;code&gt;&lt;a href=&quot;ghc-base#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; over the structure and then use &lt;code&gt;&lt;a href=&quot;ghc-base#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">一部のファンクタは、デフォルトのものよりも効率的な &lt;code&gt;&lt;a href=&quot;ghc-base#v:liftA2&quot;&gt;liftA2&lt;/a&gt;&lt;/code&gt; の実装をサポートしています。特に、 &lt;code&gt;&lt;a href=&quot;ghc-base#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;ghc-base#v:liftA2&quot;&gt;liftA2&lt;/a&gt;&lt;/code&gt; 高い操作である場合は、構造体を &lt;code&gt;&lt;a href=&quot;ghc-base#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; してから &lt;code&gt;&lt;a href=&quot;ghc-base#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; を使用するよりも、liftA2を使用する方が適切です。</target>
        </trans-unit>
        <trans-unit id="17fe68b1000108e55296a80faf01120fd6b37755" translate="yes" xml:space="preserve">
          <source>Some interesting values:</source>
          <target state="translated">面白い価値観もあります。</target>
        </trans-unit>
        <trans-unit id="52af78667ee939270bcd5b6ad18a257a8753cf09" translate="yes" xml:space="preserve">
          <source>Some of the Glasgow extensions serve to give you access to the underlying facilities with which we implement Haskell. Thus, you can get at the Raw Iron, if you are willing to write some non-portable code at a more primitive level. You need not be &amp;ldquo;stuck&amp;rdquo; on performance because of the implementation costs of Haskell&amp;rsquo;s &amp;ldquo;high-level&amp;rdquo; features&amp;mdash;you can always code &amp;ldquo;under&amp;rdquo; them. In an extreme case, you can write all your time-critical code in C, and then just glue it together with Haskell!</source>
          <target state="translated">グラスゴーの拡張機能の一部は、Haskellを実装するための基本的な機能へのアクセスを提供します。したがって、より原始的なレベルで移植性のないコードを記述したい場合は、Raw Ironを使用できます。 Haskellの「ハイレベル」機能の実装コストのために、パフォーマンスに「こだわる」必要はありません。常に「下」にコーディングできます。極端なケースでは、タイムクリティカルなコードをすべてCで記述して、それをHaskellで接着することができます。</target>
        </trans-unit>
        <trans-unit id="a6d748015d29b61c683795717bd1f0d8efc82859" translate="yes" xml:space="preserve">
          <source>Some of the extensions serve to give you access to the underlying facilities with which we implement Haskell. Thus, you can get at the Raw Iron, if you are willing to write some non-portable code at a more primitive level. You need not be &amp;ldquo;stuck&amp;rdquo; on performance because of the implementation costs of Haskell&amp;rsquo;s &amp;ldquo;high-level&amp;rdquo; features&amp;mdash;you can always code &amp;ldquo;under&amp;rdquo; them. In an extreme case, you can write all your time-critical code in C, and then just glue it together with Haskell!</source>
          <target state="translated">一部の拡張機能は、Haskellを実装するための基盤となる機能へのアクセスを提供するのに役立ちます。したがって、よりプリミティブなレベルで移植性のないコードを記述したい場合は、RawIronを入手できます。Haskellの「高レベル」機能の実装コストのために、パフォーマンスに「行き詰まる」必要はありません。いつでも「下」にコーディングできます。極端な場合、タイムクリティカルなコードをすべてCで記述し、それをHaskellで接着するだけです。</target>
        </trans-unit>
        <trans-unit id="2f3ff37baa9590a5168edb2c18c20ece84b457d9" translate="yes" xml:space="preserve">
          <source>Some of the standard Haskell libraries behave slightly differently on Windows.</source>
          <target state="translated">標準のHaskellライブラリの中には、Windows上では若干挙動が異なるものがあります。</target>
        </trans-unit>
        <trans-unit id="d93c006b20ff5d288b7ee94bfa44e0174aead14d" translate="yes" xml:space="preserve">
          <source>Some operations are &lt;em&gt;interruptible&lt;/em&gt;, which means that they can receive asynchronous exceptions even in the scope of a &lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt;. Any function which may itself block is defined as interruptible; this includes &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; (but not &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:tryTakeMVar&quot;&gt;tryTakeMVar&lt;/a&gt;&lt;/code&gt;), and most operations which perform some I/O with the outside world. The reason for having interruptible operations is so that we can write things like</source>
          <target state="translated">一部の操作は&lt;em&gt;割り込み&lt;/em&gt;可能です。つまり、 &lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; スコープ内でも非同期例外を受け取る可能性があります。それ自体がブロックする可能性がある関数は、割り込み可能として定義されます。これには、 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; （tryTakeMVarは &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:tryTakeMVar&quot;&gt;tryTakeMVar&lt;/a&gt;&lt;/code&gt; ）、および外部との入出力を実行するほとんどの操作が含まれます。割り込み可能な操作がある理由は、次のようなものを書くことができるようにするためです</target>
        </trans-unit>
        <trans-unit id="f1650f09104f0f20f3551f52363c3fd6cac8d1e0" translate="yes" xml:space="preserve">
          <source>Some operations, such as &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:concat&quot;&gt;concat&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:append&quot;&gt;append&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt;, have better complexity than their &lt;a href=&quot;data-bytestring&quot;&gt;Data.ByteString&lt;/a&gt; equivalents, due to optimisations resulting from the list spine structure. For other operations lazy ByteStrings are usually within a few percent of strict ones.</source>
          <target state="translated">リストのスパイン構造に起因する最適化により、 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:concat&quot;&gt;concat&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:append&quot;&gt;append&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt; などの一部の操作は、同等の&lt;a href=&quot;data-bytestring&quot;&gt;Data.ByteString&lt;/a&gt;よりも複雑です。他の操作の場合、遅延ByteStringは通常、厳密なものの数パーセント以内です。</target>
        </trans-unit>
        <trans-unit id="4208a1ba197e8b5c691a4a1ff887427cc02f0547" translate="yes" xml:space="preserve">
          <source>Some operations, such as &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:concat&quot;&gt;concat&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:append&quot;&gt;append&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt;, have better time complexity than their &lt;a href=&quot;data-text&quot;&gt;Data.Text&lt;/a&gt; equivalents, due to the underlying representation being a list of chunks. For other operations, lazy &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s are usually within a few percent of strict ones, but often with better heap usage if used in a streaming fashion. For data larger than available memory, or if you have tight memory constraints, this module will be the only option.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:concat&quot;&gt;concat&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:append&quot;&gt;append&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt; などの一部の操作は、基礎となる表現がチャンクのリストであるため、同等の&lt;a href=&quot;data-text&quot;&gt;Data.Text&lt;/a&gt;よりも時間の複雑さが高くなります。他の操作の場合、レイジー &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; は通常、厳密なTextの数パーセント以内ですが、ストリーミング方式で使用すると、多くの場合、ヒープ使用率が向上します。使用可能なメモリより大きいデータの場合、またはメモリの制約が厳しい場合は、このモジュールが唯一のオプションになります。</target>
        </trans-unit>
        <trans-unit id="b475a94a0b9d8eeab0c6c78df1ab308caae52572" translate="yes" xml:space="preserve">
          <source>Some operators will need to pass additional inputs to their subcommands. For example, in an arrow type supporting exceptions, the operator that attaches an exception handler will wish to pass the exception that occurred to the handler. Such an operator might have a type</source>
          <target state="translated">演算子によっては、サブコマンドに追加の入力を渡す必要があります。例えば、例外をサポートする矢印型の場合、例外ハンドラをアタッチする演算子は、ハンドラに発生した例外を渡したいと思うでしょう。このような演算子は</target>
        </trans-unit>
        <trans-unit id="3f647c70e11c8545c303776f7b6785eb68aea7e2" translate="yes" xml:space="preserve">
          <source>Some raw bytes, type &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">いくつかの生のバイト、タイプ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="17fcc39c7980e820b0bc2aab624e9af1fa0cd6a4" translate="yes" xml:space="preserve">
          <source>Some raw bytes, type &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">いくつかの生のバイト、タイプ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="adcbfb95b4ae4710402965d2ee60695cbdfbdde5" translate="yes" xml:space="preserve">
          <source>Some rough guidelines for a &quot;correct&quot; instance of Stream:</source>
          <target state="translated">Stream の「正しい」インスタンスの大まかなガイドライン。</target>
        </trans-unit>
        <trans-unit id="2b7bc7b7a65ca6e805a4e89b2183a68cf92c6d14" translate="yes" xml:space="preserve">
          <source>Some simple examples are &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;(,)&lt;/code&gt;:</source>
          <target state="translated">いくつかの簡単な例は &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;(,)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fe9d4215e16aa90ccfc39c9dd60b3910ea592ffa" translate="yes" xml:space="preserve">
          <source>Some text with any width. (&lt;code&gt;text s = sizedText (length s) s&lt;/code&gt;)</source>
          <target state="translated">任意の幅のテキスト。（ &lt;code&gt;text s = sizedText (length s) s&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="91e3fce246936fdedd20321a77fc106afe962848" translate="yes" xml:space="preserve">
          <source>Some text, but without any width. Use for non-printing text such as a HTML or Latex tags</source>
          <target state="translated">多少のテキストはあるが、横幅がない HTMLやLatexタグのような印刷しないテキストに使用する</target>
        </trans-unit>
        <trans-unit id="18c25ca98c0020654ec72f5391f7632d8dd84d40" translate="yes" xml:space="preserve">
          <source>Some types can be viewed as a monoid in more than one way, e.g. both addition and multiplication on numbers. In such cases we often define &lt;code&gt;newtype&lt;/code&gt;s and make those instances of &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt;, e.g. &lt;code&gt;&lt;a href=&quot;data-semigroup#v:Sum&quot;&gt;Sum&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-semigroup#v:Product&quot;&gt;Product&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">一部のタイプは、複数の方法でモノイドとして表示できます。たとえば、数値の加算と乗算の両方です。このような場合、私たちはしばしば &lt;code&gt;newtype&lt;/code&gt; を定義し、 &lt;code&gt;&lt;a href=&quot;data-semigroup#v:Sum&quot;&gt;Sum&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;data-semigroup#v:Product&quot;&gt;Product&lt;/a&gt;&lt;/code&gt; などの &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="b4289a866eaa1c3bda758b6f62ecf70034a01040" translate="yes" xml:space="preserve">
          <source>Some types can be viewed as a monoid in more than one way, e.g. both addition and multiplication on numbers. In such cases we often define &lt;code&gt;newtype&lt;/code&gt;s and make those instances of &lt;code&gt;&lt;a href=&quot;ghc-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt;, e.g. &lt;code&gt;&lt;a href=&quot;data-semigroup#v:Sum&quot;&gt;Sum&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-semigroup#v:Product&quot;&gt;Product&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">一部のタイプは、複数の方法でモノイドとして表示できます。たとえば、数値の加算と乗算の両方です。このような場合、私たちはしばしば &lt;code&gt;newtype&lt;/code&gt; を定義し、 &lt;code&gt;&lt;a href=&quot;data-semigroup#v:Sum&quot;&gt;Sum&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;data-semigroup#v:Product&quot;&gt;Product&lt;/a&gt;&lt;/code&gt; などの &lt;code&gt;&lt;a href=&quot;ghc-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="626881078c3bdf261f4293b2dfc34fe599fd39ff" translate="yes" xml:space="preserve">
          <source>Some types can be viewed as a monoid in more than one way, e.g. both addition and multiplication on numbers. In such cases we often define &lt;code&gt;newtype&lt;/code&gt;s and make those instances of &lt;code&gt;&lt;a href=&quot;prelude#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt;, e.g. &lt;code&gt;&lt;a href=&quot;data-semigroup#v:Sum&quot;&gt;Sum&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-semigroup#v:Product&quot;&gt;Product&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">一部のタイプは、複数の方法でモノイドとして表示できます。たとえば、数値の加算と乗算の両方です。このような場合、私たちはしばしば &lt;code&gt;newtype&lt;/code&gt; を定義し、 &lt;code&gt;&lt;a href=&quot;data-semigroup#v:Sum&quot;&gt;Sum&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;data-semigroup#v:Product&quot;&gt;Product&lt;/a&gt;&lt;/code&gt; などの &lt;code&gt;&lt;a href=&quot;prelude#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="475ad3c8e895ec32aaeaa974377e9ad6d2ee48d5" translate="yes" xml:space="preserve">
          <source>Some types can be viewed as a monoid in more than one way, e.g. both addition and multiplication on numbers. In such cases we often define &lt;code&gt;newtype&lt;/code&gt;s and make those instances of &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt;, e.g. &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-semigroup#v:Sum&quot;&gt;Sum&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-semigroup#v:Product&quot;&gt;Product&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">一部のタイプは、複数の方法でモノイドとして表示できます。たとえば、数値の加算と乗算の両方です。このような場合、私たちはしばしば &lt;code&gt;newtype&lt;/code&gt; を定義し、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-semigroup#v:Sum&quot;&gt;Sum&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-semigroup#v:Product&quot;&gt;Product&lt;/a&gt;&lt;/code&gt; などの &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="85da493cec9b2f2a6322674c1ac4d8f30eb807bc" translate="yes" xml:space="preserve">
          <source>Some types can be viewed as a monoid in more than one way, e.g. both addition and multiplication on numbers. In such cases we often define &lt;code&gt;newtype&lt;/code&gt;s and make those instances of &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt;, e.g. &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-semigroup#v:Sum&quot;&gt;Sum&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-semigroup#v:Product&quot;&gt;Product&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">一部のタイプは、複数の方法でモノイドと見なすことができます。たとえば、数値の加算と乗算の両方です。このような場合、多くの場合、 &lt;code&gt;newtype&lt;/code&gt; を定義し、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-semigroup#v:Sum&quot;&gt;Sum&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-semigroup#v:Product&quot;&gt;Product&lt;/a&gt;&lt;/code&gt; などの &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; のインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="4c287ecb3cc8a7f66a3644bf4b3c669e0247cf32" translate="yes" xml:space="preserve">
          <source>Some types can be viewed as a monoid in more than one way, e.g. both addition and multiplication on numbers. In such cases we often define &lt;code&gt;newtype&lt;/code&gt;s and make those instances of &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt;, e.g. &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-semigroup#v:Sum&quot;&gt;Sum&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-semigroup#v:Product&quot;&gt;Product&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">一部のタイプは、複数の方法でモノイドと見なすことができます。たとえば、数値の加算と乗算の両方です。このような場合、多くの場合、 &lt;code&gt;newtype&lt;/code&gt; を定義し、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-semigroup#v:Sum&quot;&gt;Sum&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-semigroup#v:Product&quot;&gt;Product&lt;/a&gt;&lt;/code&gt; などの &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; のインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="a73210f1f825c5682938244f87045d72fe31e41a" translate="yes" xml:space="preserve">
          <source>SomeAsyncException</source>
          <target state="translated">SomeAsyncException</target>
        </trans-unit>
        <trans-unit id="a9fca238800c0171a88f23ffe29cc203d76bd4a0" translate="yes" xml:space="preserve">
          <source>SomeException</source>
          <target state="translated">SomeException</target>
        </trans-unit>
        <trans-unit id="e788303f6b7afd065799324e55a5e86228b44f37" translate="yes" xml:space="preserve">
          <source>SomeNat</source>
          <target state="translated">SomeNat</target>
        </trans-unit>
        <trans-unit id="bc2716c489a873389d9fdf81b1400ea55e8f9815" translate="yes" xml:space="preserve">
          <source>SomeSymbol</source>
          <target state="translated">SomeSymbol</target>
        </trans-unit>
        <trans-unit id="c0f5488352bb1c40f30a81f2f5cf8c79569317da" translate="yes" xml:space="preserve">
          <source>SomeTypeRep</source>
          <target state="translated">SomeTypeRep</target>
        </trans-unit>
        <trans-unit id="253471bb3a6ba0fcfdfcb49655fc59ce4f00689c" translate="yes" xml:space="preserve">
          <source>Sometimes &lt;a href=&quot;#extension-AllowAmbiguousTypes&quot;&gt;&lt;code&gt;AllowAmbiguousTypes&lt;/code&gt;&lt;/a&gt; does not mix well with &lt;a href=&quot;#extension-RankNTypes&quot;&gt;&lt;code&gt;RankNTypes&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">時には&lt;a href=&quot;#extension-AllowAmbiguousTypes&quot;&gt; &lt;code&gt;AllowAmbiguousTypes&lt;/code&gt; は&lt;/a&gt;とよく混合しない&lt;a href=&quot;#extension-RankNTypes&quot;&gt; &lt;code&gt;RankNTypes&lt;/code&gt; &lt;/a&gt;。例えば：</target>
        </trans-unit>
        <trans-unit id="ee6c21a5bac5f6f0c445bd39e88279fbe9834e5d" translate="yes" xml:space="preserve">
          <source>Sometimes &lt;a href=&quot;#extension-AllowAmbiguousTypes&quot;&gt;&lt;code&gt;AllowAmbiguousTypes&lt;/code&gt;&lt;/a&gt; does not mix well with &lt;a href=&quot;rank_polymorphism#extension-RankNTypes&quot;&gt;&lt;code&gt;RankNTypes&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">時には&lt;a href=&quot;#extension-AllowAmbiguousTypes&quot;&gt; &lt;code&gt;AllowAmbiguousTypes&lt;/code&gt; は&lt;/a&gt;とよく混合しない&lt;a href=&quot;rank_polymorphism#extension-RankNTypes&quot;&gt; &lt;code&gt;RankNTypes&lt;/code&gt; &lt;/a&gt;。例えば：</target>
        </trans-unit>
        <trans-unit id="352ea77080f423e22959b16cda976119340bb0af" translate="yes" xml:space="preserve">
          <source>Sometimes an external entity is a pure function, except that it passes arguments and/or results via pointers. The function &lt;code&gt;unsafeLocalState&lt;/code&gt; permits the packaging of such entities as pure functions.</source>
          <target state="translated">ポインターを介して引数や結果を渡すことを除いて、外部エンティティは純粋な関数である場合があります。関数 &lt;code&gt;unsafeLocalState&lt;/code&gt; は、そのようなエンティティを純粋な関数としてパッケージ化することを許可します。</target>
        </trans-unit>
        <trans-unit id="7b65299fa56b5c60fa5a03a98420e1718fc83f32" translate="yes" xml:space="preserve">
          <source>Sometimes even the termination rules of &lt;a href=&quot;#instance-termination&quot;&gt;Instance termination rules&lt;/a&gt; are too onerous. So GHC allows you to experiment with more liberal rules: if you use the experimental extension &lt;a href=&quot;#extension-UndecidableInstances&quot;&gt;&lt;code&gt;UndecidableInstances&lt;/code&gt;&lt;/a&gt;, both the Paterson Conditions and the Coverage Condition (described in &lt;a href=&quot;#instance-termination&quot;&gt;Instance termination rules&lt;/a&gt;) are lifted. Termination is still ensured by having a fixed-depth recursion stack. If you exceed the stack depth you get a sort of backtrace, and the opportunity to increase the stack depth with &lt;code&gt;-freduction-depth=⟨n⟩&lt;/code&gt;. However, if you should exceed the default reduction depth limit, it is probably best just to disable depth checking, with &lt;code&gt;-freduction-depth=0&lt;/code&gt;. The exact depth your program requires depends on minutiae of your code, and it may change between minor GHC releases. The safest bet for released code &amp;ndash; if you&amp;rsquo;re sure that it should compile in finite time &amp;ndash; is just to disable the check.</source>
          <target state="translated">場合によっては、&lt;a href=&quot;#instance-termination&quot;&gt;インスタンス終了ルールの&lt;/a&gt;終了ルールでさえ、面倒すぎることがあります。したがって、GHCではより自由度の高いルールを試すことができます。実験的な拡張&lt;a href=&quot;#extension-UndecidableInstances&quot;&gt; &lt;code&gt;UndecidableInstances&lt;/code&gt; &lt;/a&gt;を使用すると、パターソン条件とカバレッジ条件（&lt;a href=&quot;#instance-termination&quot;&gt;インスタンス終了ルールで&lt;/a&gt;説明）の両方が解除されます。終了は、固定深さの再帰スタックを使用することで引き続き保証されます。スタックの深さを超えると、一種のバックトレースが発生し、 &lt;code&gt;-freduction-depth=⟨n⟩&lt;/code&gt; を使用してスタックの深さを増やすことができます。ただし、デフォルトの削減深度制限を超える必要がある場合は、おそらく &lt;code&gt;-freduction-depth=0&lt;/code&gt; で深度チェックを無効にすることをお勧めします。。プログラムが必要とする正確な深さは、コードの細部に依存し、GHCのマイナーリリース間で変わる可能性があります。リリースされたコードの最も安全な方法は、有限の時間でコンパイルする必要があると確信している場合は、単にチェックを無効にすることです。</target>
        </trans-unit>
        <trans-unit id="85a2578bf18e78e6f25ba61291fd14a9266c8f2c" translate="yes" xml:space="preserve">
          <source>Sometimes it is too onerous to handle exceptions in the middle of a critical piece of stateful code. There are three ways to handle this kind of situation:</source>
          <target state="translated">ステートフルなコードの重要な部分の途中で例外を処理するのは負担が大きすぎることがあります。このような状況を処理するには、3つの方法があります。</target>
        </trans-unit>
        <trans-unit id="ea719fb646d5a1bb3ad284e63e1f0944c3e14f3d" translate="yes" xml:space="preserve">
          <source>Sometimes it is useful to access the value-level literal associated with a type-level literal. This is done with the functions &lt;code&gt;natVal&lt;/code&gt; and &lt;code&gt;symbolVal&lt;/code&gt;. For example:</source>
          <target state="translated">型レベルのリテラルに関連付けられている値レベルのリテラルにアクセスすると便利な場合があります。これは、 &lt;code&gt;natVal&lt;/code&gt; および &lt;code&gt;symbolVal&lt;/code&gt; 関数を使用して行われます。例えば：</target>
        </trans-unit>
        <trans-unit id="1b1abe36f336e236262383a3c6c28719e0ce9e69" translate="yes" xml:space="preserve">
          <source>Sometimes it is useful to make the connection between a source file and the command-line options it requires quite tight. For instance, if a Haskell source file deliberately uses name shadowing, it should be compiled with the &lt;code&gt;-Wno-name-shadowing&lt;/code&gt; option. Rather than maintaining the list of per-file options in a &lt;code&gt;Makefile&lt;/code&gt;, it is possible to do this directly in the source file using the &lt;code&gt;OPTIONS_GHC&lt;/code&gt;&lt;a href=&quot;exts/pragmas#options-pragma&quot;&gt;pragma&lt;/a&gt;</source>
          <target state="translated">ソースファイルと必要なコマンドラインオプションを非常に緊密に接続すると便利な場合があります。たとえば、Haskellソースファイルが意図的に名前シャドウイングを使用している場合は、 &lt;code&gt;-Wno-name-shadowing&lt;/code&gt; オプションを使用してコンパイルする必要があります。 &lt;code&gt;Makefile&lt;/code&gt; でファイルごとのオプションのリストを維持するのではなく、 &lt;code&gt;OPTIONS_GHC&lt;/code&gt; &lt;a href=&quot;exts/pragmas#options-pragma&quot;&gt;プラグマ&lt;/a&gt;を使用してソースファイルで直接これを行うことができます。</target>
        </trans-unit>
        <trans-unit id="8def09fa30fffc199ff3ef990e81004ba91a2022" translate="yes" xml:space="preserve">
          <source>Sometimes it is useful to make the connection between a source file and the command-line options it requires quite tight. For instance, if a Haskell source file deliberately uses name shadowing, it should be compiled with the &lt;code&gt;-Wno-name-shadowing&lt;/code&gt; option. Rather than maintaining the list of per-file options in a &lt;code&gt;Makefile&lt;/code&gt;, it is possible to do this directly in the source file using the &lt;code&gt;OPTIONS_GHC&lt;/code&gt;&lt;a href=&quot;glasgow_exts#options-pragma&quot;&gt;pragma&lt;/a&gt;</source>
          <target state="translated">ソースファイルと、それが必要とするコマンドラインオプションとの間の接続を確立すると便利な場合があります。たとえば、Haskellソースファイルが意図的に名前のシャドウイングを使用している場合、 &lt;code&gt;-Wno-name-shadowing&lt;/code&gt; オプションを使用してコンパイルする必要があります。 &lt;code&gt;Makefile&lt;/code&gt; でファイルごとのオプションのリストを維持するのではなく、 &lt;code&gt;OPTIONS_GHC&lt;/code&gt; &lt;a href=&quot;glasgow_exts#options-pragma&quot;&gt;プラグマ&lt;/a&gt;を使用してソースファイルで直接これを行うことができます。</target>
        </trans-unit>
        <trans-unit id="a1328ebf20aa66cb0e24bd446367b2121bd33387" translate="yes" xml:space="preserve">
          <source>Sometimes the programmer wants to constrain the inference process. For example, the base library contains the following definition:</source>
          <target state="translated">プログラマが推論処理を制約したい場合もあります。例えば、ベースライブラリには次のような定義があります。</target>
        </trans-unit>
        <trans-unit id="4afdc6ef96718e4fb77ab2b55eacfaef686da59b" translate="yes" xml:space="preserve">
          <source>Sometimes there &lt;em&gt;is&lt;/em&gt; no &amp;ldquo;outermost level&amp;rdquo;, in which case no implicit quantification happens:</source>
          <target state="translated">「最外レベル」&lt;em&gt;が&lt;/em&gt;ない場合もあります。その場合、暗黙的な数量化は行われません。</target>
        </trans-unit>
        <trans-unit id="53fa2a9068573e71d72c1598f67c9f1f9ccc7a49" translate="yes" xml:space="preserve">
          <source>Sometimes we want to be able to wake up a Haskell thread from some C code. For example, when using a callback-based C API, we register a C callback and then we need to wait for the callback to run.</source>
          <target state="translated">時には、いくつかの C コードから Haskell スレッドをウェイクアップできるようにしたいことがあります。例えば、コールバックベースのC APIを使用する場合、Cのコールバックを登録し、そのコールバックが実行されるのを待つ必要があります。</target>
        </trans-unit>
        <trans-unit id="5b98ed9742a9bf9e304f489711d98115561e28fa" translate="yes" xml:space="preserve">
          <source>Sometimes when you are writing a tool, knowing the source code is not enough, you also have to know details about the modules that you import. In this case we suggest using the &lt;code&gt;interfaceLoadAction&lt;/code&gt;. This will be called each time when the code of an already compiled module is loaded. It will be invoked for modules from installed packages and even modules that are installed with GHC. It will NOT be invoked with your own modules.</source>
          <target state="translated">ツールを作成しているときに、ソースコードだけでは不十分な場合、インポートするモジュールの詳細も知る必要があります。この場合、 &lt;code&gt;interfaceLoadAction&lt;/code&gt; の使用をお勧めします。これは、コンパイル済みのモジュールのコードが読み込まれるたびに呼び出されます。インストールされたパッケージからのモジュール、およびGHCでインストールされたモジュールに対しても呼び出されます。独自のモジュールでは呼び出されません。</target>
        </trans-unit>
        <trans-unit id="b06fde4b131102a7013c432e477b901c95375ea6" translate="yes" xml:space="preserve">
          <source>Sometimes you want to catch two different sorts of exception. You could do something like</source>
          <target state="translated">たまには2つの異なる種類の例外をキャッチしたくなることがあります。以下のようなことができます。</target>
        </trans-unit>
        <trans-unit id="3e3ff6405e51f4dc7f2c2c32ca8455e658134af1" translate="yes" xml:space="preserve">
          <source>Sometimes you want to control exactly when in GHC&amp;rsquo;s pipeline the &lt;a href=&quot;#pragma-INLINE&quot;&gt;&lt;code&gt;INLINE&lt;/code&gt;&lt;/a&gt; pragma is switched on. Inlining happens only during runs of the &lt;em&gt;simplifier&lt;/em&gt;. Each run of the simplifier has a different &lt;em&gt;phase number&lt;/em&gt;; the phase number decreases towards zero. If you use &lt;a href=&quot;../debugging#ghc-flag--dverbose-core2core&quot;&gt;&lt;code&gt;-dverbose-core2core&lt;/code&gt;&lt;/a&gt; you will see the sequence of phase numbers for successive runs of the simplifier. In an &lt;a href=&quot;#pragma-INLINE&quot;&gt;&lt;code&gt;INLINE&lt;/code&gt;&lt;/a&gt; pragma you can optionally specify a phase number, thus:</source>
          <target state="translated">GHCのパイプラインで、&lt;a href=&quot;#pragma-INLINE&quot;&gt; &lt;code&gt;INLINE&lt;/code&gt; &lt;/a&gt;プラグマがオンになっているタイミングを正確に制御したい場合があります。インライン&lt;em&gt;化&lt;/em&gt;は、&lt;em&gt;単純&lt;/em&gt;化子の実行中にのみ発生します。シンプリファイアの実行ごとに異なる&lt;em&gt;フェーズ番号があり&lt;/em&gt;ます。相数はゼロに向かって減少します。&lt;a href=&quot;../debugging#ghc-flag--dverbose-core2core&quot;&gt; &lt;code&gt;-dverbose-core2core&lt;/code&gt; &lt;/a&gt;を使用すると、シンプリファイアを連続して実行するためのフェーズ番号のシーケンスが表示されます。で&lt;a href=&quot;#pragma-INLINE&quot;&gt; &lt;code&gt;INLINE&lt;/code&gt; の&lt;/a&gt;プラグマ必要に応じてこのように、位相番号を指定することができます。</target>
        </trans-unit>
        <trans-unit id="e2da9cda1d9f8f695ec767c64ba9ffca28ae7bf4" translate="yes" xml:space="preserve">
          <source>Sometimes you want to control exactly when in GHC&amp;rsquo;s pipeline the &lt;a href=&quot;#pragma-INLINE&quot;&gt;&lt;code&gt;INLINE&lt;/code&gt;&lt;/a&gt; pragma is switched on. Inlining happens only during runs of the &lt;em&gt;simplifier&lt;/em&gt;. Each run of the simplifier has a different &lt;em&gt;phase number&lt;/em&gt;; the phase number decreases towards zero. If you use &lt;a href=&quot;debugging#ghc-flag--dverbose-core2core&quot;&gt;&lt;code&gt;-dverbose-core2core&lt;/code&gt;&lt;/a&gt; you will see the sequence of phase numbers for successive runs of the simplifier. In an &lt;a href=&quot;#pragma-INLINE&quot;&gt;&lt;code&gt;INLINE&lt;/code&gt;&lt;/a&gt; pragma you can optionally specify a phase number, thus:</source>
          <target state="translated">GHCのパイプラインで&lt;a href=&quot;#pragma-INLINE&quot;&gt; &lt;code&gt;INLINE&lt;/code&gt; &lt;/a&gt;プラグマがオンになっているときを正確に制御したい場合があります。インライン&lt;em&gt;化&lt;/em&gt;は、&lt;em&gt;単純化器の&lt;/em&gt;実行中にのみ発生します。単純化器の実行ごとに異なる&lt;em&gt;フェーズ番号があり&lt;/em&gt;ます。相数はゼロに向かって減少します。&lt;a href=&quot;debugging#ghc-flag--dverbose-core2core&quot;&gt; &lt;code&gt;-dverbose-core2core&lt;/code&gt; &lt;/a&gt;を使用すると、単純化器の連続実行のフェーズ番号のシーケンスが表示されます。で&lt;a href=&quot;#pragma-INLINE&quot;&gt; &lt;code&gt;INLINE&lt;/code&gt; の&lt;/a&gt;プラグマ必要に応じてこのように、位相番号を指定することができます。</target>
        </trans-unit>
        <trans-unit id="006f1663a6f8933a75b44849a9e084f9ff1e3039" translate="yes" xml:space="preserve">
          <source>Sometimes, however, this approach is over-cautious, and we &lt;em&gt;do&lt;/em&gt; want the rule to fire, even though doing so would duplicate redex. There is no way that GHC can work out when this is a good idea, so we provide the &lt;code&gt;CONLIKE&lt;/code&gt; pragma to declare it, thus:</source>
          <target state="translated">ただし、このアプローチは慎重すぎる場合があり、ルールを&lt;em&gt;実行する&lt;/em&gt;と、REDEXが重複することになります。これが良いアイデアであるときにGHCがうまくいく方法はないので、それを宣言するために &lt;code&gt;CONLIKE&lt;/code&gt; プラグマを提供します。</target>
        </trans-unit>
        <trans-unit id="a2269b3b0400cc7cd6a06ab997508af71a4124d6" translate="yes" xml:space="preserve">
          <source>Sometimes, this ordering does not respect dependency. For example:</source>
          <target state="translated">時々、この順序は依存関係を尊重しないことがあります。例えば</target>
        </trans-unit>
        <trans-unit id="ee56244ceec6c1a6fa75c93f810b50c4d542e710" translate="yes" xml:space="preserve">
          <source>Sophisticated &lt;strong&gt;make&lt;/strong&gt; variants may achieve some of the above more elegantly. Notably, &lt;strong&gt;gmake&lt;/strong&gt;&amp;lsquo;s pattern rules let you write the more comprehensible:</source>
          <target state="translated">洗練された&lt;strong&gt;make&lt;/strong&gt;バリアントは、上記のいくつかをよりエレガントに実現できます。特に、&lt;strong&gt;gmake&lt;/strong&gt;のパターンルールを使用すると、よりわかりやすいものを記述できます。</target>
        </trans-unit>
        <trans-unit id="09c0e674e4dc5b76e5d8b55c7b5621e47b8f3761" translate="yes" xml:space="preserve">
          <source>Sophisticated &lt;strong&gt;make&lt;/strong&gt; variants may achieve some of the above more elegantly. Notably, &lt;strong&gt;gmake&lt;/strong&gt;&amp;rsquo;s pattern rules let you write the more comprehensible:</source>
          <target state="translated">洗練された&lt;strong&gt;make&lt;/strong&gt;バリアントは、上記のいくつかをよりエレガントに実現する可能性があります。特に、&lt;strong&gt;gmake&lt;/strong&gt;のパターンルールを使用すると、よりわかりやすいものを記述できます。</target>
        </trans-unit>
        <trans-unit id="80f5e15f2fdfc060865a0321280cb4f55d388b76" translate="yes" xml:space="preserve">
          <source>Sort Functions</source>
          <target state="translated">ソート機能</target>
        </trans-unit>
        <trans-unit id="62fb73f0b079b659df3c5371cf47f1e52a5149bf" translate="yes" xml:space="preserve">
          <source>Sort a list by comparing the results of a key function applied to each element. &lt;code&gt;sortOn f&lt;/code&gt; is equivalent to &lt;code&gt;sortBy (comparing f)&lt;/code&gt;, but has the performance advantage of only evaluating &lt;code&gt;f&lt;/code&gt; once for each element in the input list. This is called the decorate-sort-undecorate paradigm, or Schwartzian transform.</source>
          <target state="translated">各要素に適用されたキー関数の結果を比較することにより、リストを並べ替えます。 &lt;code&gt;sortOn f&lt;/code&gt; は &lt;code&gt;sortBy (comparing f)&lt;/code&gt; と同等ですが、入力リストの各要素 &lt;code&gt;f&lt;/code&gt; 1回だけ評価するというパフォーマンス上の利点があります。これは、装飾、並べ替え、非装飾のパラダイム、またはシュヴァルツ変換と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="2ddd8184205974debf7f3c1270f917403b807d65" translate="yes" xml:space="preserve">
          <source>Sort a stream.</source>
          <target state="translated">ストリームをソートします。</target>
        </trans-unit>
        <trans-unit id="83586d407706d12c20b9ae6ec088028b8c42c6a7" translate="yes" xml:space="preserve">
          <source>Sort valid hole fits by size.</source>
          <target state="translated">有効なホールフィットをサイズ別に並べ替えます。</target>
        </trans-unit>
        <trans-unit id="60d075980f901dd0d260c4a4dc976f7f0cf96747" translate="yes" xml:space="preserve">
          <source>Sort valid hole fits by subsumption.</source>
          <target state="translated">有効なホールフィットを部分的に並べ替えます。</target>
        </trans-unit>
        <trans-unit id="40db53ed68be5c8c190ee806ce61f73a8ec9187a" translate="yes" xml:space="preserve">
          <source>SortID</source>
          <target state="translated">SortID</target>
        </trans-unit>
        <trans-unit id="378e9e163b7eecefadb4415cae533096e336c4ab" translate="yes" xml:space="preserve">
          <source>Sorting</source>
          <target state="translated">Sorting</target>
        </trans-unit>
        <trans-unit id="2ad02c4be5346ff5c157ce5f4cd2e3ed1947b8de" translate="yes" xml:space="preserve">
          <source>Sorts by how big the types the quantified type variables in the type of the function would have to be in order to match the type of the hole.</source>
          <target state="translated">関数の型の中の定量化された型の変数が、穴の型と一致するためにはどのくらいの大きさの型でなければならないかでソートします。</target>
        </trans-unit>
        <trans-unit id="b4e3efeba10e84f7148da9f7efe85e07057d7c7a" translate="yes" xml:space="preserve">
          <source>Sound</source>
          <target state="translated">Sound</target>
        </trans-unit>
        <trans-unit id="b1d138a6f0e8a54e36d527519fc55c09d2d7ec60" translate="yes" xml:space="preserve">
          <source>Sound Sound Sound Sound Sound Sound Sound Sound Sound Sound</source>
          <target state="translated">音が鳴る音が鳴る音が鳴る音が鳴る音が鳴る音が鳴る音が鳴る音が鳴る音が鳴る</target>
        </trans-unit>
        <trans-unit id="66e31931555fd60b594f2f953ed76be0f1dcdaf1" translate="yes" xml:space="preserve">
          <source>Sound the audible bell.</source>
          <target state="translated">聴こえる鐘を鳴らす。</target>
        </trans-unit>
        <trans-unit id="2c0fc29fc40b7716fd55f76b69dee51ad61c5e5e" translate="yes" xml:space="preserve">
          <source>Sound the bell at the start of each (major) garbage collection.</source>
          <target state="translated">各(主要な)ゴミ収集の開始時にベルを鳴らす。</target>
        </trans-unit>
        <trans-unit id="6da13addb000b67d42a6d66391713819e634149f" translate="yes" xml:space="preserve">
          <source>Source</source>
          <target state="translated">Source</target>
        </trans-unit>
        <trans-unit id="f0504d680e5497190bf98af48be51d5fff8ab674" translate="yes" xml:space="preserve">
          <source>Source file</source>
          <target state="translated">ソースファイル</target>
        </trans-unit>
        <trans-unit id="8091484c6f31f1117923c9664497a1cbe6670631" translate="yes" xml:space="preserve">
          <source>Source filename</source>
          <target state="translated">ソースファイル名</target>
        </trans-unit>
        <trans-unit id="043832aaa925a2acb78aeef1dc0d996a319150fd" translate="yes" xml:space="preserve">
          <source>Source handle</source>
          <target state="translated">ソースハンドル</target>
        </trans-unit>
        <trans-unit id="603143aeb3609daada9d014cfbf58b60a1064c4b" translate="yes" xml:space="preserve">
          <source>Source location of the definition of the static pointer as a &lt;code&gt;(Line, Column)&lt;/code&gt; pair.</source>
          <target state="translated">&lt;code&gt;(Line, Column)&lt;/code&gt; ペアとしての静的ポインターの定義のソースの場所。</target>
        </trans-unit>
        <trans-unit id="cf91d5597c65567b1d8cfb4e58887c82e5f45402" translate="yes" xml:space="preserve">
          <source>Source locations</source>
          <target state="translated">ソースの場所</target>
        </trans-unit>
        <trans-unit id="9269640b7621532a77fa3da76b4927eb7157ce5d" translate="yes" xml:space="preserve">
          <source>Source offset</source>
          <target state="translated">ソースオフセット</target>
        </trans-unit>
        <trans-unit id="31f641a733c36dd6c3795da4c26c25e30c4a88a3" translate="yes" xml:space="preserve">
          <source>SourceLazy</source>
          <target state="translated">SourceLazy</target>
        </trans-unit>
        <trans-unit id="c59e0c0b529b14a96443ec3615e2336a63030855" translate="yes" xml:space="preserve">
          <source>SourceName</source>
          <target state="translated">SourceName</target>
        </trans-unit>
        <trans-unit id="5a4297bb014f5cf1fa133435123ed12b9dec1eaa" translate="yes" xml:space="preserve">
          <source>SourceNoUnpack</source>
          <target state="translated">SourceNoUnpack</target>
        </trans-unit>
        <trans-unit id="d96804e995fc1e9dd523112b9b6d5f6a825f864f" translate="yes" xml:space="preserve">
          <source>SourcePos</source>
          <target state="translated">SourcePos</target>
        </trans-unit>
        <trans-unit id="b9170cda31822359eabc35642ca621bb815194db" translate="yes" xml:space="preserve">
          <source>SourceStrict</source>
          <target state="translated">SourceStrict</target>
        </trans-unit>
        <trans-unit id="d67ef83bb2f0c766cc25fcf6159919dc7d8f3b96" translate="yes" xml:space="preserve">
          <source>SourceStrictness</source>
          <target state="translated">SourceStrictness</target>
        </trans-unit>
        <trans-unit id="3e68c9926b79128e3b93b88f0c422ddc877e5da4" translate="yes" xml:space="preserve">
          <source>SourceStrictnessQ</source>
          <target state="translated">SourceStrictnessQ</target>
        </trans-unit>
        <trans-unit id="4fdc91f154397fd423b7c564665299527b2b9056" translate="yes" xml:space="preserve">
          <source>SourceUnpack</source>
          <target state="translated">SourceUnpack</target>
        </trans-unit>
        <trans-unit id="d5d27525ee31c761d0fdc974fbd22b6cf6c9cb62" translate="yes" xml:space="preserve">
          <source>SourceUnpackedness</source>
          <target state="translated">SourceUnpackedness</target>
        </trans-unit>
        <trans-unit id="83502607cb7bce36f846e5f9a7b497ea681a8308" translate="yes" xml:space="preserve">
          <source>SourceUnpackednessQ</source>
          <target state="translated">SourceUnpackednessQ</target>
        </trans-unit>
        <trans-unit id="1ec08447a17ccb7c6ca810c40ad10be834d1e8a5" translate="yes" xml:space="preserve">
          <source>Sourcing untrusted &lt;code&gt;./.ghci&lt;/code&gt; files is a security risk. They can contain arbitrary commands that will be executed as the user. Use &lt;a href=&quot;#ghci-cmd-:set%20local-config&quot;&gt;&lt;code&gt;:set local-config&lt;/code&gt;&lt;/a&gt; to inhibit the processing of &lt;code&gt;./.ghci&lt;/code&gt; files.</source>
          <target state="translated">信頼できない &lt;code&gt;./.ghci&lt;/code&gt; ファイルを調達することはセキュリティリスクです。これらには、ユーザーとして実行される任意のコマンドを含めることができます。&lt;a href=&quot;#ghci-cmd-:set%20local-config&quot;&gt; &lt;code&gt;:set local-config&lt;/code&gt; &lt;/a&gt;を使用して、。/。 &lt;code&gt;./.ghci&lt;/code&gt; ファイルの処理を禁止します。</target>
        </trans-unit>
        <trans-unit id="6d8c9b124d521027647b4f270cb2872798f9264e" translate="yes" xml:space="preserve">
          <source>Space</source>
          <target state="translated">Space</target>
        </trans-unit>
        <trans-unit id="ad9cc5e6543539ff293f4fc68a09fe3acf82b92e" translate="yes" xml:space="preserve">
          <source>SpacingCombiningMark</source>
          <target state="translated">SpacingCombiningMark</target>
        </trans-unit>
        <trans-unit id="080e88efe900aeae1b711b9bfcae61f969382e29" translate="yes" xml:space="preserve">
          <source>Span</source>
          <target state="translated">Span</target>
        </trans-unit>
        <trans-unit id="97144deb6d321fefadcfadc18fed0e9eccfc3e8c" translate="yes" xml:space="preserve">
          <source>Spans are described with the following attributes,</source>
          <target state="translated">スパンは以下の属性で記述されています。</target>
        </trans-unit>
        <trans-unit id="bb53c54b6964fdaec13b585fa63970c44968ee3d" translate="yes" xml:space="preserve">
          <source>SpecConstr annotations</source>
          <target state="translated">SpecConstr アノテーション</target>
        </trans-unit>
        <trans-unit id="9595c16e661dbb05063bc2ca0da70a1e3bb0ef75" translate="yes" xml:space="preserve">
          <source>SpecConstrAnnotation</source>
          <target state="translated">SpecConstrAnnotation</target>
        </trans-unit>
        <trans-unit id="3c30c6a89cc7c0b5ea6d835b21dc823e4e135afe" translate="yes" xml:space="preserve">
          <source>Special 0-sized bigNat returned in case of arithmetic underflow</source>
          <target state="translated">算術アンダーフローの場合に返される特殊な0サイズのbigNat</target>
        </trans-unit>
        <trans-unit id="f87de3fcfe3911d0ff478bdc8f381a0ceefd1153" translate="yes" xml:space="preserve">
          <source>Special biased folds</source>
          <target state="translated">特殊な偏った折り目</target>
        </trans-unit>
        <trans-unit id="75f613a38c9a77eef52fd9053dd584ff64dc4df0" translate="yes" xml:space="preserve">
          <source>Special cases</source>
          <target state="translated">特殊なケース</target>
        </trans-unit>
        <trans-unit id="ae1bd102fec7d8d3ed1f2139398af55953e9354d" translate="yes" xml:space="preserve">
          <source>Special cases for standard input and output</source>
          <target state="translated">標準入出力の特殊ケース</target>
        </trans-unit>
        <trans-unit id="26fd2f94c5577053b977d9b4f21e480f7943f1e3" translate="yes" xml:space="preserve">
          <source>Special directories for storing user-specific application data, configuration, and cache files, as specified by the &lt;a href=&quot;http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;XDG Base Directory Specification&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;XDG Base Directory Specificationで&lt;/a&gt;指定されている、ユーザー固有のアプリケーションデータ、構成、およびキャッシュファイルを格納するための特別なディレクトリ。</target>
        </trans-unit>
        <trans-unit id="1b4a08805f9b9409b53dec73b83058044eee4437" translate="yes" xml:space="preserve">
          <source>Special directories for storing user-specific application data, configuration, and cache files, as specified by the &lt;a href=&quot;https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;XDG Base Directory Specification&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;XDG Base Directory Specificationで&lt;/a&gt;指定されている、ユーザー固有のアプリケーションデータ、構成、およびキャッシュファイルを格納するための特別なディレクトリ。</target>
        </trans-unit>
        <trans-unit id="d4cb50fb388e854463a9590daead0898380e35ef" translate="yes" xml:space="preserve">
          <source>Special folds</source>
          <target state="translated">特殊な折り目</target>
        </trans-unit>
        <trans-unit id="c32e14686a320dbd5a9d8033ad47f1eb93c03936" translate="yes" xml:space="preserve">
          <source>Special lists</source>
          <target state="translated">特別リスト</target>
        </trans-unit>
        <trans-unit id="49454cb23ee02d07df99dcb8b1ab6047529856de" translate="yes" xml:space="preserve">
          <source>Specialise &lt;code&gt;INLINABLE&lt;/code&gt; (&lt;a href=&quot;exts/pragmas#inlinable-pragma&quot;&gt;INLINABLE pragma&lt;/a&gt;) type-class-overloaded functions imported from other modules for the types at which they are called in this module. Note that specialisation must be enabled (by &lt;code&gt;-fspecialise&lt;/code&gt;) for this to have any effect.</source>
          <target state="translated">他のモジュールからインポートされた &lt;code&gt;INLINABLE&lt;/code&gt; （&lt;a href=&quot;exts/pragmas#inlinable-pragma&quot;&gt;INLINABLE pragma&lt;/a&gt;）タイプクラスオーバーロード関数を、このモジュールで呼び出されるタイプに特化します。これを有効にするには、（- &lt;code&gt;-fspecialise&lt;/code&gt; によって）特殊化を有効にする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="cdc58545155006d2a45e2dfddaca149b408705ae" translate="yes" xml:space="preserve">
          <source>Specialise &lt;code&gt;INLINABLE&lt;/code&gt; (&lt;a href=&quot;glasgow_exts#inlinable-pragma&quot;&gt;INLINABLE pragma&lt;/a&gt;) type-class-overloaded functions imported from other modules for the types at which they are called in this module. Note that specialisation must be enabled (by &lt;code&gt;-fspecialise&lt;/code&gt;) for this to have any effect.</source>
          <target state="translated">他のモジュールからインポートされた &lt;code&gt;INLINABLE&lt;/code&gt; （&lt;a href=&quot;glasgow_exts#inlinable-pragma&quot;&gt;INLINABLE pragma&lt;/a&gt;）タイプクラスがオーバーロードされた関数を、このモジュールで呼び出される型に特化します。これを有効にするには、特殊化を（ &lt;code&gt;-fspecialise&lt;/code&gt; によって）有効にする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e1ede224d29edb2e1aba0b72121e4b8a0c9ccb77" translate="yes" xml:space="preserve">
          <source>Specialise each type-class-overloaded function defined in this module for the types at which it is called in this module. If &lt;a href=&quot;#ghc-flag--fcross-module-specialise&quot;&gt;&lt;code&gt;-fcross-module-specialise&lt;/code&gt;&lt;/a&gt; is set imported functions that have an INLINABLE pragma (&lt;a href=&quot;exts/pragmas#inlinable-pragma&quot;&gt;INLINABLE pragma&lt;/a&gt;) will be specialised as well.</source>
          <target state="translated">このモジュールで定義されている各型クラスオーバーロード関数を、このモジュールで呼び出される型に特化します。場合&lt;a href=&quot;#ghc-flag--fcross-module-specialise&quot;&gt; &lt;code&gt;-fcross-module-specialise&lt;/code&gt; &lt;/a&gt;設定されているINLINABLEプラグマ（持っているインポート機能&lt;a href=&quot;exts/pragmas#inlinable-pragma&quot;&gt;INLINABLEプラグマは&lt;/a&gt;）うまくとして専門されます。</target>
        </trans-unit>
        <trans-unit id="c00895b6256e0da507e996ad332925f32b69d743" translate="yes" xml:space="preserve">
          <source>Specialise each type-class-overloaded function defined in this module for the types at which it is called in this module. If &lt;a href=&quot;#ghc-flag--fcross-module-specialise&quot;&gt;&lt;code&gt;-fcross-module-specialise&lt;/code&gt;&lt;/a&gt; is set imported functions that have an INLINABLE pragma (&lt;a href=&quot;glasgow_exts#inlinable-pragma&quot;&gt;INLINABLE pragma&lt;/a&gt;) will be specialised as well.</source>
          <target state="translated">このモジュールで定義されている各型クラスがオーバーロードされた関数を、このモジュールで呼び出される型に特化します。場合&lt;a href=&quot;#ghc-flag--fcross-module-specialise&quot;&gt; &lt;code&gt;-fcross-module-specialise&lt;/code&gt; &lt;/a&gt;設定されているINLINABLEプラグマ（持っているインポート機能&lt;a href=&quot;glasgow_exts#inlinable-pragma&quot;&gt;INLINABLEプラグマは&lt;/a&gt;）うまくとして専門されます。</target>
        </trans-unit>
        <trans-unit id="91b524c5325f442d5791af4d4e088519228758b4" translate="yes" xml:space="preserve">
          <source>Specialised tuple for case conversion.</source>
          <target state="translated">ケース変換に特化したタプル</target>
        </trans-unit>
        <trans-unit id="aa6f74a1731dff3e057af83f6b26846c6109fda9" translate="yes" xml:space="preserve">
          <source>Specialised version of</source>
          <target state="translated">の専門的なバージョン</target>
        </trans-unit>
        <trans-unit id="d26aed4701469cdcb4cf41a1cd41000f51658618" translate="yes" xml:space="preserve">
          <source>Specialised versions</source>
          <target state="translated">専門的なバージョン</target>
        </trans-unit>
        <trans-unit id="affef48fe2e4691035f47470b13d3b630e74210d" translate="yes" xml:space="preserve">
          <source>Specialize a call with an explicit constructor argument, even if the argument is not scrutinised in the body of the function</source>
          <target state="translated">明示的なコンストラクタの引数を持つ呼び出しを特殊化します。</target>
        </trans-unit>
        <trans-unit id="0f8320802c7e335ba55d7659f0a9af32dc11f6b1" translate="yes" xml:space="preserve">
          <source>Specialize the overloading on key functions in your program. See &lt;a href=&quot;exts/pragmas#specialize-pragma&quot;&gt;SPECIALIZE pragma&lt;/a&gt; and &lt;a href=&quot;exts/pragmas#specialize-instance-pragma&quot;&gt;SPECIALIZE instance pragma&lt;/a&gt;.</source>
          <target state="translated">プログラムの主要な機能のオーバーロードを専門にします。&lt;a href=&quot;exts/pragmas#specialize-pragma&quot;&gt;SPECIALIZEプラグマ&lt;/a&gt;および&lt;a href=&quot;exts/pragmas#specialize-instance-pragma&quot;&gt;SPECIALIZEインスタンスプラグマを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c514b8a0eaa25c7b6b293ac4abbe55d6c5e83934" translate="yes" xml:space="preserve">
          <source>Specialize the overloading on key functions in your program. See &lt;a href=&quot;glasgow_exts#specialize-pragma&quot;&gt;SPECIALIZE pragma&lt;/a&gt; and &lt;a href=&quot;glasgow_exts#specialize-instance-pragma&quot;&gt;SPECIALIZE instance pragma&lt;/a&gt;.</source>
          <target state="translated">プログラムの主要な関数のオーバーロードを専門化します。&lt;a href=&quot;glasgow_exts#specialize-pragma&quot;&gt;SPECIALIZEプラグマ&lt;/a&gt;と&lt;a href=&quot;glasgow_exts#specialize-instance-pragma&quot;&gt;SPECIALIZEインスタンスプラグマを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a93f06c73a9f12fa3e18026b2a8785a41a101bf6" translate="yes" xml:space="preserve">
          <source>Specialized folds</source>
          <target state="translated">特殊な折り目</target>
        </trans-unit>
        <trans-unit id="f97044c34f322278833a86f50d9bdc888c10c331" translate="yes" xml:space="preserve">
          <source>Specific signals</source>
          <target state="translated">特定の信号</target>
        </trans-unit>
        <trans-unit id="012d095adddd2c75c8a53cf7b075e562107942d0" translate="yes" xml:space="preserve">
          <source>Specifically, a package &lt;em&gt;P is trusted&lt;/em&gt; when one of these hold:</source>
          <target state="translated">具体的には、パッケージ&lt;em&gt;Pは&lt;/em&gt;、次のいずれか&lt;em&gt;が当てはまる&lt;/em&gt;場合に&lt;em&gt;信頼され&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="2cf257058a6de171a5b7098bc4c5affbf8572b6b" translate="yes" xml:space="preserve">
          <source>Specifically, applications of the form: &lt;code&gt;
 unsafeWithForeignPtr fptr (&lt;a href=&quot;../base-4.15.0.0/control-monad#v:forever&quot;&gt;forever&lt;/a&gt; something)
 &lt;/code&gt;</source>
          <target state="translated">具体的には、次の形式のアプリケーション： &lt;code&gt; unsafeWithForeignPtr fptr (&lt;a href=&quot;../base-4.15.0.0/control-monad#v:forever&quot;&gt;forever&lt;/a&gt; something) &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b4a26bed342f80779ea47f542d125ca697cd47a7" translate="yes" xml:space="preserve">
          <source>Specifically, applications of the form: &lt;code&gt;
 unsafeWithForeignPtr fptr (&lt;a href=&quot;control-monad#v:forever&quot;&gt;forever&lt;/a&gt; something)
 &lt;/code&gt;</source>
          <target state="translated">具体的には、次の形式のアプリケーション： &lt;code&gt; unsafeWithForeignPtr fptr (&lt;a href=&quot;control-monad#v:forever&quot;&gt;forever&lt;/a&gt; something) &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="31067049b8259a6fe75ff4e59dea7ee1d9fd4720" translate="yes" xml:space="preserve">
          <source>Specifically, we apply the following rule to determine if a type-class method call is &lt;em&gt;unsafe&lt;/em&gt; when overlapping instances are involved:</source>
          <target state="translated">具体的には、次のルールを適用して、重複するインスタンスが関係している場合に型クラスのメソッド呼び出しが&lt;em&gt;安全でない&lt;/em&gt;かどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="011c8fc32927f3b371c0e014cd6e390cf7367ee4" translate="yes" xml:space="preserve">
          <source>SpecifiedSpec</source>
          <target state="translated">SpecifiedSpec</target>
        </trans-unit>
        <trans-unit id="8500b954beac6c09bc9a2ffd80eaf5707b319a7f" translate="yes" xml:space="preserve">
          <source>Specifies the path to the package environment file to be used by GHC. Overridden by the &lt;a href=&quot;#ghc-flag--package-env%20%E2%9F%A8file%E2%9F%A9%7C%E2%9F%A8name%E2%9F%A9&quot;&gt;&lt;code&gt;-package-env ⟨file⟩|⟨name⟩&lt;/code&gt;&lt;/a&gt; flag if set.</source>
          <target state="translated">GHCが使用するパッケージ環境ファイルへのパスを指定します。設定されている場合、&lt;a href=&quot;#ghc-flag--package-env%20%E2%9F%A8file%E2%9F%A9%7C%E2%9F%A8name%E2%9F%A9&quot;&gt; &lt;code&gt;-package-env ⟨file⟩|⟨name⟩&lt;/code&gt; &lt;/a&gt;フラグによってオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="1b4862443cf2a7d1cac51c15b30d894bfc62157c" translate="yes" xml:space="preserve">
          <source>Specifies the translation, if any, of newline characters between internal Strings and the external file or stream. Haskell Strings are assumed to represent newlines with the &lt;code&gt;'\n'&lt;/code&gt; character; the newline mode specifies how to translate &lt;code&gt;'\n'&lt;/code&gt; on output, and what to translate into &lt;code&gt;'\n'&lt;/code&gt; on input.</source>
          <target state="translated">内部文字列と外部ファイルまたはストリームの間の改行文字の変換を指定します（ある場合）。Haskell文字 &lt;code&gt;'\n'&lt;/code&gt; は'\ n'文字で改行を表すと見なされます。改行モードは、出力時に &lt;code&gt;'\n'&lt;/code&gt; を変換する方法と、入力時に &lt;code&gt;'\n'&lt;/code&gt; に変換するものを指定します。</target>
        </trans-unit>
        <trans-unit id="ebf5b69cd7c66af683c0b7a42a0af08526744a15" translate="yes" xml:space="preserve">
          <source>Specify a directory in which to look for &lt;code&gt;#include&lt;/code&gt; files, in the usual C way.</source>
          <target state="translated">通常のCの方法で、 &lt;code&gt;#include&lt;/code&gt; ファイルを検索するディレクトリを指定します。</target>
        </trans-unit>
        <trans-unit id="8d4c49c89d68c7a927228351dcbcc9ab40cd7d1e" translate="yes" xml:space="preserve">
          <source>Specify the set of constructors or pattern synonyms which constitute a total match.</source>
          <target state="translated">完全一致を構成するコンストラクタまたはパターン同義語のセットを指定します。</target>
        </trans-unit>
        <trans-unit id="00db81cc99d352529fe191ffc9903c20f150f263" translate="yes" xml:space="preserve">
          <source>Specifying 1 generation with &lt;code&gt;+RTS -G1&lt;/code&gt; gives you a simple 2-space collector, as you would expect. In a 2-space collector, the &lt;a href=&quot;#rts-flag--A%20%E2%9F%A8size%E2%9F%A9&quot;&gt;&lt;code&gt;-A
⟨size⟩&lt;/code&gt;&lt;/a&gt; option specifies the &lt;em&gt;minimum&lt;/em&gt; allocation area size, since the allocation area will grow with the amount of live data in the heap. In a multi-generational collector the allocation area is a fixed size (unless you use the &lt;a href=&quot;#rts-flag--H%20%5B%E2%9F%A8size%E2%9F%A9%5D&quot;&gt;&lt;code&gt;-H [⟨size⟩]&lt;/code&gt;&lt;/a&gt; option).</source>
          <target state="translated">&lt;code&gt;+RTS -G1&lt;/code&gt; で 1世代を指定すると、予想どおり、単純な2スペースのコレクターが得られます。2スペースコレクターでは、ヒープ内のライブデータの量に応じて割り当て領域が拡大するため、&lt;a href=&quot;#rts-flag--A%20%E2%9F%A8size%E2%9F%A9&quot;&gt; &lt;code&gt;-A ⟨size⟩&lt;/code&gt; &lt;/a&gt;サイズ'オプションは&lt;em&gt;最小&lt;/em&gt;割り当て領域サイズを指定します。多世代コレクターでは、割り当て領域は固定サイズです（&lt;a href=&quot;#rts-flag--H%20%5B%E2%9F%A8size%E2%9F%A9%5D&quot;&gt; &lt;code&gt;-H [⟨size⟩]&lt;/code&gt; &lt;/a&gt;オプションを使用しない限り）。</target>
        </trans-unit>
        <trans-unit id="f85e404c6bf9f3220fac735c5afca8c50da07140" translate="yes" xml:space="preserve">
          <source>Splices can be nested inside quotation brackets. For example the fragment representing &lt;code&gt;1 + 2&lt;/code&gt; can be constructed using nested splices:</source>
          <target state="translated">スプライスは引用符で囲むことができます。たとえば、 &lt;code&gt;1 + 2&lt;/code&gt; 表すフラグメントは、ネストされたスプライスを使用して構築できます。</target>
        </trans-unit>
        <trans-unit id="bf1ac07144caf163566ae2b03385ea555d86cddf" translate="yes" xml:space="preserve">
          <source>Split a filename into directory and file. &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt; is the inverse. The first component will often end with a trailing slash.</source>
          <target state="translated">ファイル名をディレクトリとファイルに分割します。 &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt; はその逆です。多くの場合、最初のコンポーネントは末尾のスラッシュで終わります。</target>
        </trans-unit>
        <trans-unit id="d592948a8e0377a4243d7b9fc69951e953dde864" translate="yes" xml:space="preserve">
          <source>Split a filename into directory and file. &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt; is the inverse. The first component will often end with a trailing slash.</source>
          <target state="translated">ファイル名をディレクトリとファイルに分割します。 &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt; はその逆です。多くの場合、最初のコンポーネントは末尾のスラッシュで終わります。</target>
        </trans-unit>
        <trans-unit id="a2bc85796ff5f7226a895f062a3613441039aeea" translate="yes" xml:space="preserve">
          <source>Split a path by the directory separator.</source>
          <target state="translated">ディレクトリ区切りでパスを分割します。</target>
        </trans-unit>
        <trans-unit id="cebdf092e543b83f3fb3d5aeb6388d38ad7eac5a" translate="yes" xml:space="preserve">
          <source>Split a path into a drive and a path. On Posix, / is a Drive.</source>
          <target state="translated">パスをドライブとパスに分割します。Posixでは、/はドライブです。</target>
        </trans-unit>
        <trans-unit id="cb53d1cfdd5b139b7bd5fc1b2a8bd36d0ed492a7" translate="yes" xml:space="preserve">
          <source>Split objects (for libraries)</source>
          <target state="translated">オブジェクトの分割 (ライブラリの場合)</target>
        </trans-unit>
        <trans-unit id="2a067f724534a9c83887aebcdf2c883c2a8417e6" translate="yes" xml:space="preserve">
          <source>Split on all extensions.</source>
          <target state="translated">すべてのエクステンションで分割。</target>
        </trans-unit>
        <trans-unit id="e263c8e234fad76e90972473c790d76df84e5e16" translate="yes" xml:space="preserve">
          <source>Split on the extension. &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:addExtension&quot;&gt;addExtension&lt;/a&gt;&lt;/code&gt; is the inverse.</source>
          <target state="translated">拡張子で分割します。 &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:addExtension&quot;&gt;addExtension&lt;/a&gt;&lt;/code&gt; はその逆です。</target>
        </trans-unit>
        <trans-unit id="42c55528a61016a85d0981a77f718525c03afd02" translate="yes" xml:space="preserve">
          <source>Split on the extension. &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:addExtension&quot;&gt;addExtension&lt;/a&gt;&lt;/code&gt; is the inverse.</source>
          <target state="translated">拡張子で分割します。 &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:addExtension&quot;&gt;addExtension&lt;/a&gt;&lt;/code&gt; はその逆です。</target>
        </trans-unit>
        <trans-unit id="90c9f466e36b1d73c1fe86a7707a2200dcd9d2b3" translate="yes" xml:space="preserve">
          <source>Split sections for link-time dead-code stripping</source>
          <target state="translated">リンクタイムデッドコードストリッピング用の分割セクション</target>
        </trans-unit>
        <trans-unit id="7af7b9d93aa19256eefce38852f4b5d272275331" translate="yes" xml:space="preserve">
          <source>Split the input between the two argument arrows and combine their output. Note that this is in general not a functor.</source>
          <target state="translated">2つの引数の矢印の間で入力を分割し、その出力を結合します。これは一般的にファンクタではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c1f4e0453574829c9c92fa9f38974ac29cedef5e" translate="yes" xml:space="preserve">
          <source>Split the input between the two argument arrows, retagging and merging their outputs. Note that this is in general not a functor.</source>
          <target state="translated">2つの引数の矢印の間で入力を分割し、その出力をリタグしてマージします。これは一般的にファンクタではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="316d460a7a2507e25510a2601feefd8ca7cc2063" translate="yes" xml:space="preserve">
          <source>Splits a type constructor application. Note that if the type constructor is polymorphic, this will not return the kinds that were used.</source>
          <target state="translated">型コンストラクタのアプリケーションを分割します。型のコンストラクタがポリモーフィックである場合、使用された種類は返されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="e7cf9a5d6d4c50cdabf326f01166416b681f8a38" translate="yes" xml:space="preserve">
          <source>Splitting functions in this library do not perform character-wise copies to create substrings; they just construct new &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s that are slices of the original.</source>
          <target state="translated">このライブラリの分割関数は、部分文字列を作成するために文字単位のコピーを実行しません。オリジナルのスライスである新しい &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; を構築するだけです。</target>
        </trans-unit>
        <trans-unit id="ae15788730e0f1320a6a5a039cedc7a46ed9e446" translate="yes" xml:space="preserve">
          <source>Splitting functions in this library do not perform character-wise copies to create substrings; they just construct new &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s that are slices of the original.</source>
          <target state="translated">このライブラリの分割関数は、部分文字列を作成するために文字単位のコピーを実行しません。オリジナルのスライスである新しい &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; を構築するだけです。</target>
        </trans-unit>
        <trans-unit id="da6ae66c86b9a6e3e1c72f728844ea7edf75d30e" translate="yes" xml:space="preserve">
          <source>Square &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">スクエア &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6779d64ea3734d3b574f9704fc863bcc4d27a144" translate="yes" xml:space="preserve">
          <source>Square &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">平方 &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="90d977c737cfe8e295a62ac0d52b9b79cbdebb7f" translate="yes" xml:space="preserve">
          <source>SrcLoc</source>
          <target state="translated">SrcLoc</target>
        </trans-unit>
        <trans-unit id="785ca9526809c90e3417966be7d5844fd2a0c5c8" translate="yes" xml:space="preserve">
          <source>Stability</source>
          <target state="translated">Stability</target>
        </trans-unit>
        <trans-unit id="d96e5b2dd07c1733b2b013bd82922c22baade37d" translate="yes" xml:space="preserve">
          <source>Stable</source>
          <target state="translated">Stable</target>
        </trans-unit>
        <trans-unit id="1b9780093cdfd639e1fc94e37ddfc9e261e9c1dd" translate="yes" xml:space="preserve">
          <source>Stable Names</source>
          <target state="translated">安定した名前</target>
        </trans-unit>
        <trans-unit id="b124de185c68f1d92f48239730360ca3c1db0932" translate="yes" xml:space="preserve">
          <source>Stable Names are similar to Stable Pointers (&lt;a href=&quot;foreign-stableptr&quot;&gt;Foreign.StablePtr&lt;/a&gt;), but differ in the following ways:</source>
          <target state="translated">安定した名前は安定したポインタ（&lt;a href=&quot;foreign-stableptr&quot;&gt;Foreign.StablePtr&lt;/a&gt;）に似ていますが、次の点で異なります。</target>
        </trans-unit>
        <trans-unit id="a01c1d0efe78a3ab9a11dd3d476288433a0081aa" translate="yes" xml:space="preserve">
          <source>Stable branches are numbered &lt;code&gt;x.y&lt;/code&gt;, where ⟨y⟩ is &lt;em&gt;even&lt;/em&gt;. Releases on the stable branch &lt;code&gt;x.y&lt;/code&gt; are numbered &lt;code&gt;x.y.z&lt;/code&gt;, where ⟨z⟩ (&amp;gt;= 1) is the patchlevel number. Patchlevels are bug-fix releases only, and never change the programmer interface to any system-supplied code. However, if you install a new patchlevel over an old one you will need to recompile any code that was compiled against the old libraries.</source>
          <target state="translated">安定したブランチには &lt;code&gt;x.y&lt;/code&gt; という番号が付けられ、,y⟩は&lt;em&gt;偶数&lt;/em&gt;です。安定版ブランチ &lt;code&gt;x.y&lt;/code&gt; リリースには、 &lt;code&gt;x.y.z&lt;/code&gt; という番号が付けられます。ここで、⟨z⟩（&amp;gt; = 1）はパッチレベル番号です。パッチレベルはバグ修正リリースのみであり、プログラマーインターフェイスをシステム提供のコードに変更することはありません。ただし、古いパッチレベルの上に新しいパッチレベルをインストールする場合は、古いライブラリに対してコンパイルされたコードを再コンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="a1627c388393e7ac83aa51c9d70e169f078fbc24" translate="yes" xml:space="preserve">
          <source>Stable names are a way of performing fast ( \(\mathcal{O}(1)\) ), not-quite-exact comparison between objects.</source>
          <target state="translated">安定した名前は、オブジェクト間の比較を高速に行うための方法です。</target>
        </trans-unit>
        <trans-unit id="4cd3f2d0c8741933dae5efc8c6c48a88e995a1c5" translate="yes" xml:space="preserve">
          <source>Stable names are a way of performing fast (O(1)), not-quite-exact comparison between objects.</source>
          <target state="translated">安定した名前は、オブジェクト間の比較を高速に(O(1))、正確ではありませんが実行する方法です。</target>
        </trans-unit>
        <trans-unit id="6545f5f403dd45baa6ff4a3ad49d364a7e57e87a" translate="yes" xml:space="preserve">
          <source>Stable names have the following property:</source>
          <target state="translated">安定した名前には次のようなプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="c930dd441ec9a10fa8b41f15b63e01cc4a9157dc" translate="yes" xml:space="preserve">
          <source>Stable names solve the following problem: suppose you want to build a hash table with Haskell objects as keys, but you want to use pointer equality for comparison; maybe because the keys are large and hashing would be slow, or perhaps because the keys are infinite in size. We can't build a hash table using the address of the object as the key, because objects get moved around by the garbage collector, meaning a re-hash would be necessary after every garbage collection.</source>
          <target state="translated">安定した名前は以下の問題を解決します:Haskell オブジェクトをキーにしてハッシュテーブルを構築したいが、比較のためにポインタの平等性を使いたいとします。オブジェクトのアドレスをキーにしてハッシュテーブルを構築することはできません。オブジェクトはガベージコレクタによって移動してしまうので、ガベージコレクションのたびに再ハッシュが必要になるからです。</target>
        </trans-unit>
        <trans-unit id="8e44ac7fde1a959e4f87285404024914d18fcbbf" translate="yes" xml:space="preserve">
          <source>Stable pointers.</source>
          <target state="translated">安定したポインター。</target>
        </trans-unit>
        <trans-unit id="f96c029d1e410dab21513196d744d01064e5a832" translate="yes" xml:space="preserve">
          <source>Stable references to Haskell values</source>
          <target state="translated">Haskell値への安定した参照</target>
        </trans-unit>
        <trans-unit id="b7009f4dd94170790b48faf243126af3763a3938" translate="yes" xml:space="preserve">
          <source>Stable snapshot releases are named &lt;code&gt;x.y.z.YYYYMMDD&lt;/code&gt;. where &lt;code&gt;YYYYMMDD&lt;/code&gt; is the date of the sources from which the snapshot was built, and &lt;code&gt;x.y.z+1&lt;/code&gt; is the next release to be made on that branch. For example, &lt;code&gt;6.8.1.20040225&lt;/code&gt; would be a snapshot of the &lt;code&gt;6.8&lt;/code&gt; branch during the development of &lt;code&gt;6.8.2&lt;/code&gt;.</source>
          <target state="translated">安定したスナップショットリリースの名前は &lt;code&gt;x.y.z.YYYYMMDD&lt;/code&gt; です。ここで、 &lt;code&gt;YYYYMMDD&lt;/code&gt; はスナップショットが作成されたソースの日付であり、 &lt;code&gt;x.y.z+1&lt;/code&gt; はそのブランチで作成される次のリリースです。たとえば、 &lt;code&gt;6.8.1.20040225&lt;/code&gt; は、 &lt;code&gt;6.8.2&lt;/code&gt; の開発中の &lt;code&gt;6.8&lt;/code&gt; ブランチのスナップショットになります。</target>
        </trans-unit>
        <trans-unit id="64feb94468e16e2ea70284003a8c4dfee7a2b84e" translate="yes" xml:space="preserve">
          <source>StableName</source>
          <target state="translated">StableName</target>
        </trans-unit>
        <trans-unit id="fbb55afa3444be1926fc9d52446de2670df59e35" translate="yes" xml:space="preserve">
          <source>StableName#</source>
          <target state="translated">StableName#</target>
        </trans-unit>
        <trans-unit id="de96d23d1deefa3ce99fa0a6afe698d4777eea5c" translate="yes" xml:space="preserve">
          <source>StablePtr</source>
          <target state="translated">StablePtr</target>
        </trans-unit>
        <trans-unit id="7e5628607d77a5b61e929e3d235dd3928a074751" translate="yes" xml:space="preserve">
          <source>StablePtr#</source>
          <target state="translated">StablePtr#</target>
        </trans-unit>
        <trans-unit id="f7b98e4b6482e7275550ba1011355872faf5ea2a" translate="yes" xml:space="preserve">
          <source>Stack trace functionality is exposed for use by Haskell programs in the &lt;a href=&quot;../libraries/base-4.13.0.0/ghc-executionstack&quot;&gt;GHC.ExecutionStack&lt;/a&gt; module. See the Haddock documentation in this module for details regarding usage.</source>
          <target state="translated">スタックトレース機能は、&lt;a href=&quot;../libraries/base-4.13.0.0/ghc-executionstack&quot;&gt;GHC.ExecutionStack&lt;/a&gt;モジュールのHaskellプログラムで使用するために公開されています。使用方法の詳細については、このモジュールのHaddockドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="3714e866dbf3b26bb67f3d0d8dde5ef4dcd4ec16" translate="yes" xml:space="preserve">
          <source>Stack trace functionality is exposed for use by Haskell programs in the &lt;a href=&quot;../libraries/base-4.14.1.0/ghc-executionstack&quot;&gt;GHC.ExecutionStack&lt;/a&gt; module. See the Haddock documentation in this module for details regarding usage.</source>
          <target state="translated">スタックトレース機能は、&lt;a href=&quot;../libraries/base-4.14.1.0/ghc-executionstack&quot;&gt;GHC.ExecutionStack&lt;/a&gt;モジュールのHaskellプログラムで使用できるように公開されています。使用法の詳細については、このモジュールのHaddockのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b27a20d42030b984b0aef1e076c3bea640109768" translate="yes" xml:space="preserve">
          <source>Stack trace functionality is exposed for use by Haskell programs in the &lt;a href=&quot;../libraries/base-4.15.0.0/ghc-executionstack&quot;&gt;GHC.ExecutionStack&lt;/a&gt; module. See the Haddock documentation in this module for details regarding usage.</source>
          <target state="translated">スタックトレース機能は、&lt;a href=&quot;../libraries/base-4.15.0.0/ghc-executionstack&quot;&gt;GHC.ExecutionStack&lt;/a&gt;モジュールのHaskellプログラムで使用できるように公開されています。使用法の詳細については、このモジュールのHaddockのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="68c48da7f7123f0ff64967c266833c6e4063f95a" translate="yes" xml:space="preserve">
          <source>Stack two pieces of error message on top of each other.</source>
          <target state="translated">エラーメッセージを2枚重ねる。</target>
        </trans-unit>
        <trans-unit id="11982574c05624fd4946dda5298cf9db6c679ef4" translate="yes" xml:space="preserve">
          <source>StackOverflow</source>
          <target state="translated">StackOverflow</target>
        </trans-unit>
        <trans-unit id="c7d890a6474c971c057ab4ea575d83552a62c69b" translate="yes" xml:space="preserve">
          <source>StackTrace</source>
          <target state="translated">StackTrace</target>
        </trans-unit>
        <trans-unit id="0bf83f962ea4728b5cef631d3fafc1a5854fc24f" translate="yes" xml:space="preserve">
          <source>Standalone &lt;code&gt;deriving&lt;/code&gt; declarations permit the use of a single, extra-constraints wildcard, like so:</source>
          <target state="translated">スタンドアロンの &lt;code&gt;deriving&lt;/code&gt; 宣言では、次のように、単一の追加の制約ワイルドカードを使用できます。</target>
        </trans-unit>
        <trans-unit id="7813ed26b5b3e0c984a35b0f17db9c2d504c4c68" translate="yes" xml:space="preserve">
          <source>Standalone kind signatures and polymorphic recursion</source>
          <target state="translated">スタンドアローンの種類のシグネチャと多相性再帰</target>
        </trans-unit>
        <trans-unit id="ebe743ca060fac51902b85da54b6ccd49dd8f45d" translate="yes" xml:space="preserve">
          <source>StandaloneDeriving</source>
          <target state="translated">StandaloneDeriving</target>
        </trans-unit>
        <trans-unit id="eee16e937ea994a073bdb0813b431267ee5888e5" translate="yes" xml:space="preserve">
          <source>StandaloneKindSignatures</source>
          <target state="translated">StandaloneKindSignatures</target>
        </trans-unit>
        <trans-unit id="cf09d1d65d0c5998001c536d15e70925e670b957" translate="yes" xml:space="preserve">
          <source>Standard C Functions</source>
          <target state="translated">標準C関数</target>
        </trans-unit>
        <trans-unit id="dd904943e5d0e0ae554caef1ba1d493b42ea28e6" translate="yes" xml:space="preserve">
          <source>Standard Formatters</source>
          <target state="translated">標準フォーマッタ</target>
        </trans-unit>
        <trans-unit id="e0571ffbdfbb2ed310c1a468b735edd6e5003c26" translate="yes" xml:space="preserve">
          <source>Standard Haskell has a rich type language. Types classify terms and serve to avoid many common programming mistakes. The kind language, however, is relatively simple, distinguishing only regular types (kind &lt;code&gt;Type&lt;/code&gt;) and type constructors (e.g. kind &lt;code&gt;Type -&amp;gt; Type -&amp;gt; Type&lt;/code&gt;). In particular when using advanced type system features, such as type families (&lt;a href=&quot;#type-families&quot;&gt;Type families&lt;/a&gt;) or GADTs (&lt;a href=&quot;#gadt&quot;&gt;Generalised Algebraic Data Types (GADTs)&lt;/a&gt;), this simple kind system is insufficient, and fails to prevent simple errors. Consider the example of type-level natural numbers, and length-indexed vectors:</source>
          <target state="translated">標準のHaskellには豊富な型言語があります。タイプは用語を分類し、多くの一般的なプログラミングの間違いを回避するのに役立ちます。ただし、kind言語は比較的単純で、通常の型（kind &lt;code&gt;Type&lt;/code&gt; ）と型コンストラクター（たとえば、kind &lt;code&gt;Type -&amp;gt; Type -&amp;gt; Type&lt;/code&gt; ）のみを区別します。特に、タイプファミリー（&lt;a href=&quot;#type-families&quot;&gt;タイプファミリー&lt;/a&gt;）やGADT（&lt;a href=&quot;#gadt&quot;&gt;一般化代数データタイプ（GADT）&lt;/a&gt;）などの高度なタイプシステム機能を使用する場合、この単純な種類システムでは不十分であり、単純なエラーを防止できません。型レベルの自然数と長さインデックス付きのベクトルの例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="f1c74072df96dcfd7d49cfc49a0a34cd72f9e7a9" translate="yes" xml:space="preserve">
          <source>Standard Haskell has a rich type language. Types classify terms and serve to avoid many common programming mistakes. The kind language, however, is relatively simple, distinguishing only regular types (kind &lt;code&gt;Type&lt;/code&gt;) and type constructors (e.g. kind &lt;code&gt;Type -&amp;gt; Type -&amp;gt; Type&lt;/code&gt;). In particular when using advanced type system features, such as type families (&lt;a href=&quot;type_families#type-families&quot;&gt;Type families&lt;/a&gt;) or GADTs (&lt;a href=&quot;gadt#gadt&quot;&gt;Generalised Algebraic Data Types (GADTs)&lt;/a&gt;), this simple kind system is insufficient, and fails to prevent simple errors. Consider the example of type-level natural numbers, and length-indexed vectors:</source>
          <target state="translated">標準のHaskellには豊富なタイプの言語があります。タイプは用語を分類し、多くの一般的なプログラミングミスを回避するのに役立ちます。ただし、kind言語は比較的単純で、通常の型（kind &lt;code&gt;Type&lt;/code&gt; ）と型コンストラクター（kind &lt;code&gt;Type -&amp;gt; Type -&amp;gt; Type&lt;/code&gt; ）のみを区別します。特に、型族（&lt;a href=&quot;type_families#type-families&quot;&gt;型族&lt;/a&gt;）やGADT（&lt;a href=&quot;gadt#gadt&quot;&gt;一般化代数データ型（GADT）&lt;/a&gt;）などの高度な型システム機能を使用する場合、この単純な型システムでは不十分であり、単純なエラーを防ぐことができません。タイプレベルの自然数と長さインデックス付きベクトルの例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="df22790aeb71a9887d25b6dd614d58cf9fb0694a" translate="yes" xml:space="preserve">
          <source>Standard IO Errors.</source>
          <target state="translated">標準IOエラー。</target>
        </trans-unit>
        <trans-unit id="249edee58712f047430f6cee9d157476dba55fa5" translate="yes" xml:space="preserve">
          <source>Standard decimal notation.</source>
          <target state="translated">標準的な10進法。</target>
        </trans-unit>
        <trans-unit id="4a1d4ca499caf2fdda735441459f6399ddcd070d" translate="yes" xml:space="preserve">
          <source>Standard encodings of Haskell values</source>
          <target state="translated">Haskell の値の標準エンコーディング</target>
        </trans-unit>
        <trans-unit id="6641ea0e41b6762a2dc18847e3792238d0d52d15" translate="yes" xml:space="preserve">
          <source>Standard file descriptors</source>
          <target state="translated">標準ファイル記述子</target>
        </trans-unit>
        <trans-unit id="95653fb800f837db1f88a5516a37229f7e9ae2b9" translate="yes" xml:space="preserve">
          <source>Standard functions on rational numbers</source>
          <target state="translated">有理数上の標準関数</target>
        </trans-unit>
        <trans-unit id="41705579c741338bdfe2f2ddf805a96446f8e522" translate="yes" xml:space="preserve">
          <source>Standard handles</source>
          <target state="translated">標準ハンドル</target>
        </trans-unit>
        <trans-unit id="feb489760695bfa9f478fd69772c4e317ba3a9fa" translate="yes" xml:space="preserve">
          <source>Standard input and output</source>
          <target state="translated">標準入出力</target>
        </trans-unit>
        <trans-unit id="8a130b0aafbe13ee540535ba34a95f4a2bd1d78e" translate="yes" xml:space="preserve">
          <source>Standard types, classes and related functions</source>
          <target state="translated">標準型、クラス、関連機能</target>
        </trans-unit>
        <trans-unit id="05565eead6cfb1432b88147e2b7df47f443c8aa8" translate="yes" xml:space="preserve">
          <source>StarIsType</source>
          <target state="translated">StarIsType</target>
        </trans-unit>
        <trans-unit id="b71fa15cc8a020abade88d38b208048c963ab2a9" translate="yes" xml:space="preserve">
          <source>StarT</source>
          <target state="translated">StarT</target>
        </trans-unit>
        <trans-unit id="952f375412e89ff213a8aca383d18e5691354347" translate="yes" xml:space="preserve">
          <source>Start</source>
          <target state="translated">Start</target>
        </trans-unit>
        <trans-unit id="164f116940c507103d0f7330fae894367bd8f944" translate="yes" xml:space="preserve">
          <source>Start &lt;code&gt;UniqSupply&lt;/code&gt; allocation from ⟨s⟩.</source>
          <target state="translated">「 &lt;code&gt;UniqSupply&lt;/code&gt; からUniqSupply割り当てを開始します。</target>
        </trans-unit>
        <trans-unit id="87cd67587e7700e90403704138073c86ff153532" translate="yes" xml:space="preserve">
          <source>Start a new TH module, return a state token that should be</source>
          <target state="translated">新しいTHモジュールを起動し、ステートトークンを返します。</target>
        </trans-unit>
        <trans-unit id="05924043e5e4e1f8094f7c0ced251fc393740a73" translate="yes" xml:space="preserve">
          <source>Start attributing ticks to cost centres. This is called by the RTS on startup.</source>
          <target state="translated">ティックのコストセンターへの帰属を開始します。これは起動時にRTSによって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e956beda0bcd377f3930544bb800c5b08449c53e" translate="yes" xml:space="preserve">
          <source>Start logging events to the given &lt;a href=&quot;#c.EventLogWriter&quot;&gt;&lt;code&gt;EventLogWriter&lt;/code&gt;&lt;/a&gt;. Returns true on success or false is another writer has already been configured.</source>
          <target state="translated">指定された&lt;a href=&quot;#c.EventLogWriter&quot;&gt; &lt;code&gt;EventLogWriter&lt;/code&gt; &lt;/a&gt;へのイベントのログ記録を開始します。成功した場合はtrueを返し、別のライターが既に構成されている場合はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="6ce1d9a5005d443d987ee67873bd91b0a6d5100e" translate="yes" xml:space="preserve">
          <source>StartStopInput</source>
          <target state="translated">StartStopInput</target>
        </trans-unit>
        <trans-unit id="c52f329a2ad4e9037d6af00f2143b3e11f38996b" translate="yes" xml:space="preserve">
          <source>StartStopOutput</source>
          <target state="translated">StartStopOutput</target>
        </trans-unit>
        <trans-unit id="9760639dd8bd243ed8a34ff7a71ee1c87cbfc596" translate="yes" xml:space="preserve">
          <source>Starting an annotation.</source>
          <target state="translated">アノテーションを開始します。</target>
        </trans-unit>
        <trans-unit id="3a4f8f81a5426d57a58b4f781bb5fa3f3fa1571d" translate="yes" xml:space="preserve">
          <source>Starting from Windows 10 version 1703 (Creators Update), after enabling Developer Mode, users can create symbolic links without requiring the Administrator privilege in the current process. Supply a &lt;code&gt;&lt;a href=&quot;../base/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; flag in addition to the target and link name to enable this behavior.</source>
          <target state="translated">Windows 10バージョン1703（Creators Update）以降、開発者モードを有効にすると、ユーザーは現在のプロセスで管理者権限を必要とせずにシンボリックリンクを作成できます。供給 &lt;code&gt;&lt;a href=&quot;../base/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; この動作を可能にするために、ターゲットとリンク名に加えて、旗を。</target>
        </trans-unit>
        <trans-unit id="a2bbf1741439888f11bdd7d78ae7a3c39a61635c" translate="yes" xml:space="preserve">
          <source>Starting with GHC 7.10, the example above can be written more concisely by enabling the new &lt;code&gt;DeriveAnyClass&lt;/code&gt; extension:</source>
          <target state="translated">GHC 7.10以降、上記の例は、新しい &lt;code&gt;DeriveAnyClass&lt;/code&gt; 拡張を有効にすることでより簡潔に記述できます。</target>
        </trans-unit>
        <trans-unit id="443aedd3cb6408bc6151745f0efb5bde637384f3" translate="yes" xml:space="preserve">
          <source>Starting with GHC 7.2, you can automatically derive instances for types possessing a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-generics#t:Generic&quot;&gt;Generic&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">GHC 7.2以降、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-generics#t:Generic&quot;&gt;Generic&lt;/a&gt;&lt;/code&gt; インスタンスを所有するタイプのインスタンスを自動的に派生させることができます。</target>
        </trans-unit>
        <trans-unit id="083897f53ad9288353b0b64c6973be990cb1d2df" translate="yes" xml:space="preserve">
          <source>Starting with GHC 7.2, you can automatically derive instances for types possessing a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-generics#t:Generic&quot;&gt;Generic&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">GHC 7.2以降、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-generics#t:Generic&quot;&gt;Generic&lt;/a&gt;&lt;/code&gt; インスタンスを持つタイプのインスタンスを自動的に派生させることができます。</target>
        </trans-unit>
        <trans-unit id="92f6d1fff5bed8cd78c305735785759b5b20b5dc" translate="yes" xml:space="preserve">
          <source>Starting with GHC 7.2, you can automatically derive instances for types possessing a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-generics#t:Generic&quot;&gt;Generic&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">GHC 7.2以降、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-generics#t:Generic&quot;&gt;Generic&lt;/a&gt;&lt;/code&gt; インスタンスを持つタイプのインスタンスを自動的に派生させることができます。</target>
        </trans-unit>
        <trans-unit id="0717d7a07a44a226da10392758555b92d5c36a4e" translate="yes" xml:space="preserve">
          <source>Starting with GHC 8.0 type families can be annotated with injectivity information. This information is then used by GHC during type checking to resolve type ambiguities in situations where a type variable appears only under type family applications. Consider this contrived example:</source>
          <target state="translated">GHC 8.0からは、型ファミリーに注入性情報の注釈を付けることができます。この情報は、型チェックの際にGHCによって使用され、型変数が型ファミリーのアプリケーションの下でのみ出現する状況で型の曖昧さを解決するために使用されます。次のような工夫された例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="fa3a5bbcd112252696951a4fcf34da3cfa7847b0" translate="yes" xml:space="preserve">
          <source>Starting with minimal verbosity (&lt;code&gt;-v1&lt;/code&gt;, see &lt;a href=&quot;#ghc-flag--v&quot;&gt;&lt;code&gt;-v&lt;/code&gt;&lt;/a&gt;), GHC displays the name, the source path and the target path of each compiled module. This flag can be used to reduce GHC&amp;rsquo;s output by hiding source paths and target paths.</source>
          <target state="translated">最小限の冗長性（ &lt;code&gt;-v1&lt;/code&gt; 、&lt;a href=&quot;#ghc-flag--v&quot;&gt; &lt;code&gt;-v&lt;/code&gt; を&lt;/a&gt;参照）から始めて、GHCは各コンパイル済みモジュールの名前、ソースパス、およびターゲットパスを表示します。このフラグを使用して、ソースパスとターゲットパスを非表示にすることにより、GHCの出力を削減できます。</target>
        </trans-unit>
        <trans-unit id="a72502067518684f9deeec70cf119fd26326cd33" translate="yes" xml:space="preserve">
          <source>State</source>
          <target state="translated">State</target>
        </trans-unit>
        <trans-unit id="66da945894f82db14a77a8be2c6323321041bb1c" translate="yes" xml:space="preserve">
          <source>State monads</source>
          <target state="translated">ステートモナド</target>
        </trans-unit>
        <trans-unit id="158b4d2c36c72da53e5e963fedebe7ce62a55af8" translate="yes" xml:space="preserve">
          <source>State operations</source>
          <target state="translated">国家運営</target>
        </trans-unit>
        <trans-unit id="536a546647686d5dbe50b90d5b04f3d2452d84ce" translate="yes" xml:space="preserve">
          <source>State#</source>
          <target state="translated">State#</target>
        </trans-unit>
        <trans-unit id="79532d5103d1a13b6e1c0c339a9743192eeb51c6" translate="yes" xml:space="preserve">
          <source>StateT</source>
          <target state="translated">StateT</target>
        </trans-unit>
        <trans-unit id="e5f4ecfe4af1087571afda2ddc97808c6498333b" translate="yes" xml:space="preserve">
          <source>Static pointers were first proposed in the paper &lt;a href=&quot;http://research.microsoft.com/en-us/um/people/simonpj/papers/parallel/remote.pdf&quot;&gt;Towards Haskell in the cloud&lt;/a&gt;, Jeff Epstein, Andrew P. Black and Simon Peyton-Jones, Proceedings of the 4th ACM Symposium on Haskell, pp. 118-129, ACM, 2011.</source>
          <target state="translated">静的ポインタは、最初&lt;a href=&quot;http://research.microsoft.com/en-us/um/people/simonpj/papers/parallel/remote.pdf&quot;&gt;に「クラウド内のHaskell in the cloud」&lt;/a&gt;、Jeff Epstein、Andrew P. Black、Simon Peyton-Jones、Proceedings of the 4th ACM Symposium on Haskell、pp。118-129、ACM、2011で最初に提案されました。</target>
        </trans-unit>
        <trans-unit id="74315e17a1a8b045102ac7e9df4355c190ad7a64" translate="yes" xml:space="preserve">
          <source>StaticKey</source>
          <target state="translated">StaticKey</target>
        </trans-unit>
        <trans-unit id="c4cf883c115ad4a37a0d8ea79661e165e8cf7edf" translate="yes" xml:space="preserve">
          <source>StaticPointers</source>
          <target state="translated">StaticPointers</target>
        </trans-unit>
        <trans-unit id="04c2c864bcbffe68997c27cc94d1413712fc6055" translate="yes" xml:space="preserve">
          <source>StaticPtr</source>
          <target state="translated">StaticPtr</target>
        </trans-unit>
        <trans-unit id="1985d9c485de177986ea553f7aa1b1ec15724799" translate="yes" xml:space="preserve">
          <source>StaticPtrInfo</source>
          <target state="translated">StaticPtrInfo</target>
        </trans-unit>
        <trans-unit id="b6ed444cfd31a4303c65cc81df375b9c2410e95d" translate="yes" xml:space="preserve">
          <source>Statistics about a single GC. This is a mirror of the C &lt;code&gt;struct
   GCDetails&lt;/code&gt; in &lt;code&gt;RtsAPI.h&lt;/code&gt;, with the field prefixed with &lt;code&gt;gc_&lt;/code&gt; to avoid collisions with &lt;code&gt;&lt;a href=&quot;ghc-stats#t:RTSStats&quot;&gt;RTSStats&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">単一のGCに関する統計。これは、Cのミラーである &lt;code&gt;struct GCDetails&lt;/code&gt; で &lt;code&gt;RtsAPI.h&lt;/code&gt; 接頭辞フィールドで、 &lt;code&gt;gc_&lt;/code&gt; との衝突を避けるために &lt;code&gt;&lt;a href=&quot;ghc-stats#t:RTSStats&quot;&gt;RTSStats&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="cfe3c1150c6acf9c8d532af7cedc95d73c3a8d58" translate="yes" xml:space="preserve">
          <source>Statistics about runtime activity since the start of the program. This is a mirror of the C &lt;code&gt;struct RTSStats&lt;/code&gt; in &lt;code&gt;RtsAPI.h&lt;/code&gt;</source>
          <target state="translated">プログラムの開始以降のランタイムアクティビティに関する統計。これは、Cのミラーである &lt;code&gt;struct RTSStats&lt;/code&gt; で &lt;code&gt;RtsAPI.h&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e42b22b2b6b3e7f57c4367d72673984413ed8319" translate="yes" xml:space="preserve">
          <source>StdCall</source>
          <target state="translated">StdCall</target>
        </trans-unit>
        <trans-unit id="f187fc429f4baaf1f243e44e3303328c03854a81" translate="yes" xml:space="preserve">
          <source>StdStream</source>
          <target state="translated">StdStream</target>
        </trans-unit>
        <trans-unit id="dc416e1088e4bf094dfc9abe0210e0288f5a169e" translate="yes" xml:space="preserve">
          <source>Step</source>
          <target state="translated">Step</target>
        </trans-unit>
        <trans-unit id="db05c9beb5e691dc03390a6a1b7db16a6ffddc7d" translate="yes" xml:space="preserve">
          <source>Stephen Adams, &quot;&lt;em&gt;Efficient sets: a balancing act&lt;/em&gt;&quot;, Journal of Functional Programming 3(4):553-562, October 1993, &lt;a href=&quot;http://www.swiss.ai.mit.edu/~adams/BB/&quot;&gt;http://www.swiss.ai.mit.edu/~adams/BB/&lt;/a&gt;.</source>
          <target state="translated">スティーブンアダムス、「&lt;em&gt;効率的なセット：バランスをとる行為&lt;/em&gt;」、Journal of Functional Programming 3（4）：553-562、1993年10月、&lt;a href=&quot;http://www.swiss.ai.mit.edu/~adams/BB/&quot;&gt;http&lt;/a&gt;：//www.swiss.ai.mit.edu/~adams/BB/ 。</target>
        </trans-unit>
        <trans-unit id="35cb1f2f3090469fddd290f48f6f6f66f6cfbf71" translate="yes" xml:space="preserve">
          <source>Stmt</source>
          <target state="translated">Stmt</target>
        </trans-unit>
        <trans-unit id="31572ff73d7bde41a9d74f83a2ddad260f7a6baa" translate="yes" xml:space="preserve">
          <source>StmtQ</source>
          <target state="translated">StmtQ</target>
        </trans-unit>
        <trans-unit id="de21a77acb31d0982c49a80ac234a3a75eaede79" translate="yes" xml:space="preserve">
          <source>Stock type classes, i.e. those specified in the report and those enabled by &lt;a href=&quot;#deriving-extra&quot;&gt;language extensions&lt;/a&gt;, are derived using the &lt;code&gt;stock&lt;/code&gt; strategy, with the following exception:</source>
          <target state="translated">ストックタイプのクラス、つまりレポートで指定されたクラスと&lt;a href=&quot;#deriving-extra&quot;&gt;言語拡張&lt;/a&gt;によって有効にされたクラスは、 &lt;code&gt;stock&lt;/code&gt; 戦略を使用して導出されますが、次の例外があります。</target>
        </trans-unit>
        <trans-unit id="204cbd05b28e23bed603f5dd8080b3836a48b443" translate="yes" xml:space="preserve">
          <source>StockStrategy</source>
          <target state="translated">StockStrategy</target>
        </trans-unit>
        <trans-unit id="43a6d25b74506c0f2ea1fec92eab1a0520e2eec8" translate="yes" xml:space="preserve">
          <source>Stolen (in types) by default (see &lt;a href=&quot;../bugs#infelicities-lexical&quot;&gt;Lexical syntax&lt;/a&gt;). &lt;code&gt;forall&lt;/code&gt; is a reserved keyword and never a type variable, in accordance with &lt;a href=&quot;https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0043-forall-keyword.rst&quot;&gt;GHC Proposal #43&lt;/a&gt;.</source>
          <target state="translated">デフォルトで（タイプで）盗まれます（&lt;a href=&quot;../bugs#infelicities-lexical&quot;&gt;字句構文を&lt;/a&gt;参照）。 &lt;code&gt;forall&lt;/code&gt; は予約済みのキーワードであり、&lt;a href=&quot;https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0043-forall-keyword.rst&quot;&gt;GHC提案＃43&lt;/a&gt;に従って、型変数になることはありません。</target>
        </trans-unit>
        <trans-unit id="2384b537a83bb6a33e1d390c0c67ee850919b47c" translate="yes" xml:space="preserve">
          <source>Stolen (in types) by default (see &lt;a href=&quot;bugs#infelicities-lexical&quot;&gt;Lexical syntax&lt;/a&gt;). &lt;code&gt;forall&lt;/code&gt; is a reserved keyword and never a type variable, in accordance with &lt;a href=&quot;https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0043-forall-keyword.rst&quot;&gt;GHC Proposal #43&lt;/a&gt;.</source>
          <target state="translated">デフォルトで（タイプ&lt;a href=&quot;bugs#infelicities-lexical&quot;&gt;ごとに&lt;/a&gt;）盗まれます（字句構文を参照）。 &lt;code&gt;forall&lt;/code&gt; は、&lt;a href=&quot;https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0043-forall-keyword.rst&quot;&gt;GHC Proposal＃43&lt;/a&gt;に従って、予約キーワードであり、型変数にはなりません。</target>
        </trans-unit>
        <trans-unit id="0109369d2950503b351e2a645b66ee0cdfb0870d" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-Arrows&quot;&gt;&lt;code&gt;Arrows&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗まれた：&lt;a href=&quot;#extension-Arrows&quot;&gt; &lt;code&gt;Arrows&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5fc6096bd7063eafd5e2d7f8790bd891b7444589" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-BangPatterns&quot;&gt;&lt;code&gt;BangPatterns&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗まれた：&lt;a href=&quot;#extension-BangPatterns&quot;&gt; &lt;code&gt;BangPatterns&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="694982805bbb9dcc8a752cd200a66c9de952c939" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-ImplicitParams&quot;&gt;&lt;code&gt;ImplicitParams&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗まれた：&lt;a href=&quot;#extension-ImplicitParams&quot;&gt; &lt;code&gt;ImplicitParams&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e9dd99f3a29bdf521b42a19c25458329948cfb7d" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-MagicHash&quot;&gt;&lt;code&gt;MagicHash&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗まれた：&lt;a href=&quot;#extension-MagicHash&quot;&gt; &lt;code&gt;MagicHash&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="653e10151f5343c05b8d78af3a7faf47567411a0" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-PatternSynonyms&quot;&gt;&lt;code&gt;PatternSynonyms&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗まれた：&lt;a href=&quot;#extension-PatternSynonyms&quot;&gt; &lt;code&gt;PatternSynonyms&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3efe252a38c04276c73af597275737fcd9cfdad6" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-QuasiQuotes&quot;&gt;&lt;code&gt;QuasiQuotes&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗まれた：&lt;a href=&quot;#extension-QuasiQuotes&quot;&gt; &lt;code&gt;QuasiQuotes&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="77ef467f6713170bca1aee5678526a7c56d8ba32" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-QuasiQuotes&quot;&gt;&lt;code&gt;QuasiQuotes&lt;/code&gt;&lt;/a&gt;. Moreover, this introduces an ambiguity with list comprehension syntax. See the &lt;a href=&quot;#quasi-quotes-list-comprehension-ambiguity&quot;&gt;discussion on quasi-quoting&lt;/a&gt; for details.</source>
          <target state="translated">盗まれた：&lt;a href=&quot;#extension-QuasiQuotes&quot;&gt; &lt;code&gt;QuasiQuotes&lt;/code&gt; &lt;/a&gt;。さらに、これはリスト内包構文のあいまいさをもたらします。詳細&lt;a href=&quot;#quasi-quotes-list-comprehension-ambiguity&quot;&gt;については、準引用&lt;/a&gt;に関する説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="1c972925d5d27b40147d40d5e67b8fcfe3d1b5c4" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-RecursiveDo&quot;&gt;&lt;code&gt;RecursiveDo&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗まれた：&lt;a href=&quot;#extension-RecursiveDo&quot;&gt; &lt;code&gt;RecursiveDo&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b7f9280e17d67586f2b5b75560c5c0e17b233c4d" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-StaticPointers&quot;&gt;&lt;code&gt;StaticPointers&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗まれた：&lt;a href=&quot;#extension-StaticPointers&quot;&gt; &lt;code&gt;StaticPointers&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7856923f2170cc077edb89e9a27de0c565b9f3d5" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-TemplateHaskell&quot;&gt;&lt;code&gt;TemplateHaskell&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗まれた：&lt;a href=&quot;#extension-TemplateHaskell&quot;&gt; &lt;code&gt;TemplateHaskell&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ef9015f89e07e2c82a32bc002e98ffaf87a6d39d" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-UnboxedTuples&quot;&gt;&lt;code&gt;UnboxedTuples&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗まれた：&lt;a href=&quot;#extension-UnboxedTuples&quot;&gt; &lt;code&gt;UnboxedTuples&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fe90e6c97a9cd8a1baff5c3ed62ad460060824b0" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;arrows#extension-Arrows&quot;&gt;&lt;code&gt;Arrows&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗難：&lt;a href=&quot;arrows#extension-Arrows&quot;&gt; &lt;code&gt;Arrows&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e885bf68157ec94c46e7f4c2718e5e2226bfaf57" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;ffi#extension-ForeignFunctionInterface&quot;&gt;&lt;code&gt;ForeignFunctionInterface&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗難：&lt;a href=&quot;ffi#extension-ForeignFunctionInterface&quot;&gt; &lt;code&gt;ForeignFunctionInterface&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fed63a5d990e7192e1cdc7d3914885acbeebf644" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;ffi-chap#extension-ForeignFunctionInterface&quot;&gt;&lt;code&gt;ForeignFunctionInterface&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗まれた：&lt;a href=&quot;ffi-chap#extension-ForeignFunctionInterface&quot;&gt; &lt;code&gt;ForeignFunctionInterface&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b0c54399afe9029b193056ff697a538bcdab057c" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;implicit_parameters#extension-ImplicitParams&quot;&gt;&lt;code&gt;ImplicitParams&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗難：&lt;a href=&quot;implicit_parameters#extension-ImplicitParams&quot;&gt; &lt;code&gt;ImplicitParams&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a7c177e991d54c7ba3b86d393f01edfa48b31c45" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;magic_hash#extension-MagicHash&quot;&gt;&lt;code&gt;MagicHash&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗難：&lt;a href=&quot;magic_hash#extension-MagicHash&quot;&gt; &lt;code&gt;MagicHash&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="716517f91d414fcbeb362be90a6b06232afcefd7" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;pattern_synonyms#extension-PatternSynonyms&quot;&gt;&lt;code&gt;PatternSynonyms&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗難：&lt;a href=&quot;pattern_synonyms#extension-PatternSynonyms&quot;&gt; &lt;code&gt;PatternSynonyms&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="28f5f3d876fac0342f638cf231a1bd3cf274c02b" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;primitives#extension-UnboxedTuples&quot;&gt;&lt;code&gt;UnboxedTuples&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗難：&lt;a href=&quot;primitives#extension-UnboxedTuples&quot;&gt; &lt;code&gt;UnboxedTuples&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e3d47ff61257561e7743f0fffee1cbc7eb1704a9" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;recursive_do#extension-RecursiveDo&quot;&gt;&lt;code&gt;RecursiveDo&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗難：&lt;a href=&quot;recursive_do#extension-RecursiveDo&quot;&gt; &lt;code&gt;RecursiveDo&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2e618891b7d3d85715a17cac1737091860a52119" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;static_pointers#extension-StaticPointers&quot;&gt;&lt;code&gt;StaticPointers&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗難：&lt;a href=&quot;static_pointers#extension-StaticPointers&quot;&gt; &lt;code&gt;StaticPointers&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e0c2e10957d66418b0b9ddf69266970ca49884dc" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;strict#extension-BangPatterns&quot;&gt;&lt;code&gt;BangPatterns&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗難：&lt;a href=&quot;strict#extension-BangPatterns&quot;&gt; &lt;code&gt;BangPatterns&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4d8a0a96370072b027db31c611c25c2ef0b5c8b2" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;template_haskell#extension-QuasiQuotes&quot;&gt;&lt;code&gt;QuasiQuotes&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗難：&lt;a href=&quot;template_haskell#extension-QuasiQuotes&quot;&gt; &lt;code&gt;QuasiQuotes&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="455d503974f7126109ab4d4c5cfc710d36c7e3e3" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;template_haskell#extension-QuasiQuotes&quot;&gt;&lt;code&gt;QuasiQuotes&lt;/code&gt;&lt;/a&gt;. Moreover, this introduces an ambiguity with list comprehension syntax. See the &lt;a href=&quot;template_haskell#quasi-quotes-list-comprehension-ambiguity&quot;&gt;discussion on quasi-quoting&lt;/a&gt; for details.</source>
          <target state="translated">盗難：&lt;a href=&quot;template_haskell#extension-QuasiQuotes&quot;&gt; &lt;code&gt;QuasiQuotes&lt;/code&gt; &lt;/a&gt;。さらに、これにより、リスト内包表記の構文があいまいになります。詳細&lt;a href=&quot;template_haskell#quasi-quotes-list-comprehension-ambiguity&quot;&gt;については、準引用&lt;/a&gt;に関する説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="1a8e00f23c16d90de37b216d4d60737abe57fa27" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;template_haskell#extension-TemplateHaskell&quot;&gt;&lt;code&gt;TemplateHaskell&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">盗難：&lt;a href=&quot;template_haskell#extension-TemplateHaskell&quot;&gt; &lt;code&gt;TemplateHaskell&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9e253470c876ee6d5c720eb777aeb82d4c26e28f" translate="yes" xml:space="preserve">
          <source>Stop</source>
          <target state="translated">Stop</target>
        </trans-unit>
        <trans-unit id="b413b82268045c1e7ece0c70b4a9a04ae7c50bcc" translate="yes" xml:space="preserve">
          <source>Stop after generating C (&lt;code&gt;.hc&lt;/code&gt; file)</source>
          <target state="translated">C（ &lt;code&gt;.hc&lt;/code&gt; ファイル）の生成後に停止</target>
        </trans-unit>
        <trans-unit id="77bce4d6858afe8047dad68e79b4b967e9dbc28a" translate="yes" xml:space="preserve">
          <source>Stop after generating assembly (&lt;code&gt;.s&lt;/code&gt; file)</source>
          <target state="translated">アセンブリの生成後に停止（ &lt;code&gt;.s&lt;/code&gt; ファイル）</target>
        </trans-unit>
        <trans-unit id="72f8e464de0b7ece18b856f82c9428b57e04e974" translate="yes" xml:space="preserve">
          <source>Stop after generating object (&lt;code&gt;.o&lt;/code&gt;) file</source>
          <target state="translated">オブジェクト（ &lt;code&gt;.o&lt;/code&gt; ）ファイルの生成後に停止</target>
        </trans-unit>
        <trans-unit id="ccf7f91d046e26549f0e33e6e9690b34f2c10594" translate="yes" xml:space="preserve">
          <source>Stop after preprocessing (&lt;code&gt;.hspp&lt;/code&gt; file)</source>
          <target state="translated">前処理後に停止（ &lt;code&gt;.hspp&lt;/code&gt; ファイル）</target>
        </trans-unit>
        <trans-unit id="04cf767bea5cd66e2d50d24b00a36eb3c8c924af" translate="yes" xml:space="preserve">
          <source>Stop after writing out the intermediate C program to disk. The file name for the intermediate C program is the input file name with &lt;code&gt;.hsc&lt;/code&gt; replaced with &lt;code&gt;_hsc_make.c&lt;/code&gt;.</source>
          <target state="translated">中間Cプログラムをディスクに書き込んだ後に停止します。中間Cプログラムのファイル名は、 &lt;code&gt;.hsc&lt;/code&gt; が_hsc_make.cに置き換えられた入力ファイル名 &lt;code&gt;_hsc_make.c&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="023c4f92246f4178341e6f0a01ceb000f420e539" translate="yes" xml:space="preserve">
          <source>Stop attributing ticks to cost centres. Allocations will still be attributed.</source>
          <target state="translated">目盛りをコストセンターに帰属させないようにします。割り当ては引き続き帰属します。</target>
        </trans-unit>
        <trans-unit id="988ad614c0272f1d7935dae544cb67bc6c2c9fa0" translate="yes" xml:space="preserve">
          <source>Stopped because the input contains insufficient available elements, or all of the input sequence has been successfully translated.</source>
          <target state="translated">入力に利用可能な要素が不足しているか、入力シーケンスのすべてが正常に翻訳されたために停止しました。</target>
        </trans-unit>
        <trans-unit id="a8ba068bf5a51f6b6475c3d5a9cb52f8a6f89148" translate="yes" xml:space="preserve">
          <source>Stopped because the output contains insufficient free elements</source>
          <target state="translated">出力に十分な自由要素が含まれていないため停止します。</target>
        </trans-unit>
        <trans-unit id="5af0db05a6b8a98c75558631d0f653da1ee69ba7" translate="yes" xml:space="preserve">
          <source>Stopped because there are sufficient free elements in the output to output at least one encoded ASCII character, but the input contains an invalid or unrepresentable sequence</source>
          <target state="translated">少なくとも1つのエンコードされたASCII文字を出力するのに十分な空き要素が出力にあるが、入力には無効なシーケンスまたは表現不可能なシーケンスが含まれているため停止した。</target>
        </trans-unit>
        <trans-unit id="45b0f8b6273dfd6e7997a4038c99b48d40e17dae" translate="yes" xml:space="preserve">
          <source>Storable</source>
          <target state="translated">Storable</target>
        </trans-unit>
        <trans-unit id="3b41fc4e981bcddf2ba33abc4e193e3e4d082300" translate="yes" xml:space="preserve">
          <source>StorableArray</source>
          <target state="translated">StorableArray</target>
        </trans-unit>
        <trans-unit id="df063869e11d7a9aa132cd4a984f7b5eb870d656" translate="yes" xml:space="preserve">
          <source>Stream</source>
          <target state="translated">Stream</target>
        </trans-unit>
        <trans-unit id="3be78028889b120996da7446ec1e97f062f6f5e6" translate="yes" xml:space="preserve">
          <source>Stream interface</source>
          <target state="translated">ストリームインターフェース</target>
        </trans-unit>
        <trans-unit id="a48481a1738943e8ff33ac4241138fa17939a34e" translate="yes" xml:space="preserve">
          <source>Stream oriented decoding</source>
          <target state="translated">ストリーム指向デコーディング</target>
        </trans-unit>
        <trans-unit id="1b965be2081b010a98a8633b41b3ef04aba79c9a" translate="yes" xml:space="preserve">
          <source>Stream the UTF-8-like packed encoding used by GHC to represent constant strings in generated code.</source>
          <target state="translated">生成されたコード中の定数文字列を表現するためにGHCで使用されているUTF-8ライクなパックエンコーディングをストリーム化します。</target>
        </trans-unit>
        <trans-unit id="e39823f5d6394e4bb2bfdaafc16bb62eb67d74f1" translate="yes" xml:space="preserve">
          <source>StreamPermParser</source>
          <target state="translated">StreamPermParser</target>
        </trans-unit>
        <trans-unit id="1e8325521df6e6903ede77955f9bf1a333363aed" translate="yes" xml:space="preserve">
          <source>Streaming</source>
          <target state="translated">Streaming</target>
        </trans-unit>
        <trans-unit id="47ed8fde8f8f26c0b70f354149f72da58928a969" translate="yes" xml:space="preserve">
          <source>Strict</source>
          <target state="translated">Strict</target>
        </trans-unit>
        <trans-unit id="b055906719fced632d6400efb20c56d4258a207b" translate="yes" xml:space="preserve">
          <source>Strict (call-by-value) application operator. It takes a function and an argument, evaluates the argument to weak head normal form (WHNF), then calls the function with that value.</source>
          <target state="translated">厳密な(値ごとの呼び出し)アプリケーション演算子。関数と引数を受け取り、引数を弱頭正規形(WHNF)に評価し、その値で関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="2363e1b8ae1b0a70a1ec6e14abb0c9296f7b59e1" translate="yes" xml:space="preserve">
          <source>Strict RWS monad.</source>
          <target state="translated">厳格なRWSモナド。</target>
        </trans-unit>
        <trans-unit id="76c36336f1c9bfc6331550790fe3c915ad08f140" translate="yes" xml:space="preserve">
          <source>Strict Reader-writer-state monads</source>
          <target state="translated">厳格なリーダライタ状態のモナド</target>
        </trans-unit>
        <trans-unit id="24fea344d26bff4ae8bc8eed70c80a6cb9aa0f42" translate="yes" xml:space="preserve">
          <source>Strict data types (&lt;a href=&quot;#extension-StrictData&quot;&gt;&lt;code&gt;StrictData&lt;/code&gt;&lt;/a&gt;) makes constructor fields strict by default, on a per-module basis.</source>
          <target state="translated">Strictデータ型（&lt;a href=&quot;#extension-StrictData&quot;&gt; &lt;code&gt;StrictData&lt;/code&gt; &lt;/a&gt;）は、デフォルトでモジュールごとにコンストラクタフィールドを厳密にします。</target>
        </trans-unit>
        <trans-unit id="783404847dd6d8a5d62d9c622cb41988c5035941" translate="yes" xml:space="preserve">
          <source>Strict folds</source>
          <target state="translated">ストリクトフォールド</target>
        </trans-unit>
        <trans-unit id="d3d907b1eb1f2241730e00b68e6ba576432e2b4d" translate="yes" xml:space="preserve">
          <source>Strict functions are good for space usage, as they are for time, as discussed in the previous section. Strict functions get right down to business, rather than filling up the heap with closures (the system&amp;rsquo;s notes to itself about how to evaluate something, should it eventually be required).</source>
          <target state="translated">厳密な関数は、前のセクションで説明したように、時間の場合と同様に、スペースの使用に適しています。厳密な関数は、ヒープをクロージャーで満たすのではなく、ビジネスに直接影響します（最終的にそれが必要になった場合、何かを評価する方法に関するシステム自体へのメモ）。</target>
        </trans-unit>
        <trans-unit id="8c4eb494994ad32b8dbb336545842b450c139303" translate="yes" xml:space="preserve">
          <source>Strict functions are your dear friends:</source>
          <target state="translated">厳格な機能はあなたの大切な友人です。</target>
        </trans-unit>
        <trans-unit id="a914659b0f38edc507ba27a21a6bdfb6fb5c1655" translate="yes" xml:space="preserve">
          <source>Strict monadic functions</source>
          <target state="translated">厳格な単項関数</target>
        </trans-unit>
        <trans-unit id="9ca63820e49dcf2df96864861f0eefabb957830d" translate="yes" xml:space="preserve">
          <source>Strict monads</source>
          <target state="translated">厳格なモナド</target>
        </trans-unit>
        <trans-unit id="4c509cf9b703d49cd6bbacf171b7c6babe197659" translate="yes" xml:space="preserve">
          <source>Strict pair.</source>
          <target state="translated">厳格なペア。</target>
        </trans-unit>
        <trans-unit id="35d0eb483830c5ebf332d2a08d7d715707ad4d98" translate="yes" xml:space="preserve">
          <source>Strict pattern (&lt;a href=&quot;#extension-Strict&quot;&gt;&lt;code&gt;Strict&lt;/code&gt;&lt;/a&gt;) makes all patterns and let bindings strict by default, on a per-module basis.</source>
          <target state="translated">Strictパターン（&lt;a href=&quot;#extension-Strict&quot;&gt; &lt;code&gt;Strict&lt;/code&gt; &lt;/a&gt;）は、すべてのパターンを作成し、バインディングをモジュールごとにデフォルトで厳密にします。</target>
        </trans-unit>
        <trans-unit id="6853e1094840ac1d46253c8379c257656578cd1a" translate="yes" xml:space="preserve">
          <source>Strict recursive folds</source>
          <target state="translated">厳密な再帰的折り返し</target>
        </trans-unit>
        <trans-unit id="397ea718e8a9c7d01c35b292cb86a750beb71caa" translate="yes" xml:space="preserve">
          <source>Strict state monads, passing an updatable state through a computation. See below for examples.</source>
          <target state="translated">厳密なステート・モナドで、更新可能な状態を計算に渡します。例は以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="8e2a656a92ddc304255d0a52d40959ab09737cb2" translate="yes" xml:space="preserve">
          <source>Strict state monads.</source>
          <target state="translated">厳格な状態のモナド。</target>
        </trans-unit>
        <trans-unit id="c23a76f4f4cbe7a8a5ea9caabae32c329023144a" translate="yes" xml:space="preserve">
          <source>Strict version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#v:modifyTVar&quot;&gt;modifyTVar&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">厳密なバージョンの &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#v:modifyTVar&quot;&gt;modifyTVar&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a9f6e9fe1cf7ec312e545a2b19d927d754a6713f" translate="yes" xml:space="preserve">
          <source>Strict version of &lt;code&gt;&lt;a href=&quot;data-functor#v:-60--36--62-&quot;&gt;&amp;lt;$&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">厳密なバージョンの &lt;code&gt;&lt;a href=&quot;data-functor#v:-60--36--62-&quot;&gt;&amp;lt;$&amp;gt;&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b5b1f7c9a0fe31f46ed198e1435d2adf277aa5a7" translate="yes" xml:space="preserve">
          <source>Strict version of &lt;code&gt;&lt;a href=&quot;data-ioref#v:atomicModifyIORef&quot;&gt;atomicModifyIORef&lt;/a&gt;&lt;/code&gt;. This forces both the value stored in the &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; and the value returned. The new value is installed in the &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; before the returned value is forced. So</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-ioref#v:atomicModifyIORef&quot;&gt;atomicModifyIORef&lt;/a&gt;&lt;/code&gt; の厳密なバージョン。これにより、 &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; に格納された値と返された値の両方が強制されます。戻り値が強制される前に、新しい値が &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; にインストールされます。そう</target>
        </trans-unit>
        <trans-unit id="42d8bc23e3f7197b0d30446e7060aeae40e600db" translate="yes" xml:space="preserve">
          <source>Strict version of &lt;code&gt;&lt;a href=&quot;data-ioref#v:atomicModifyIORef&quot;&gt;atomicModifyIORef&lt;/a&gt;&lt;/code&gt;. This forces both the value stored in the &lt;code&gt;&lt;a href=&quot;ghc-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; and the value returned. The new value is installed in the &lt;code&gt;&lt;a href=&quot;ghc-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; before the returned value is forced. So</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-ioref#v:atomicModifyIORef&quot;&gt;atomicModifyIORef&lt;/a&gt;&lt;/code&gt; の厳密なバージョン。これにより、 &lt;code&gt;&lt;a href=&quot;ghc-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; に格納された値と返された値の両方が強制されます。戻り値が強制される前に、新しい値が &lt;code&gt;&lt;a href=&quot;ghc-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; にインストールされます。そう</target>
        </trans-unit>
        <trans-unit id="c77f471f01bedb20ebf62401466c912c23fb1b2b" translate="yes" xml:space="preserve">
          <source>Strict version of &lt;code&gt;&lt;a href=&quot;data-ioref#v:modifyIORef&quot;&gt;modifyIORef&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">厳密なバージョンの &lt;code&gt;&lt;a href=&quot;data-ioref#v:modifyIORef&quot;&gt;modifyIORef&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b7514ea4bb82dd2520d82e380ee5aa69bd87d59b" translate="yes" xml:space="preserve">
          <source>Strict version of &lt;code&gt;&lt;a href=&quot;data-stref#v:modifySTRef&quot;&gt;modifySTRef&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">厳密なバージョンの &lt;code&gt;&lt;a href=&quot;data-stref#v:modifySTRef&quot;&gt;modifySTRef&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8ca33b0d79de13dece7742f5c06160e31b2fa41c" translate="yes" xml:space="preserve">
          <source>Strict vs lazy types</source>
          <target state="translated">厳格なタイプと怠惰なタイプ</target>
        </trans-unit>
        <trans-unit id="074e69dbc31a99f40b705371021696d29cc33268" translate="yes" xml:space="preserve">
          <source>Strict writer monads.</source>
          <target state="translated">厳格なライターのモナド。</target>
        </trans-unit>
        <trans-unit id="7adb8ee02eaf5cab8e6bbff5ce1f99a1ae0004b9" translate="yes" xml:space="preserve">
          <source>StrictData</source>
          <target state="translated">StrictData</target>
        </trans-unit>
        <trans-unit id="99c80ad9bf7b25224884bf0b85507c17346ab8e3" translate="yes" xml:space="preserve">
          <source>StrictPair</source>
          <target state="translated">StrictPair</target>
        </trans-unit>
        <trans-unit id="03053dcabec6cb004527a0b6b191c9f8ef2e0a88" translate="yes" xml:space="preserve">
          <source>StrictType</source>
          <target state="translated">StrictType</target>
        </trans-unit>
        <trans-unit id="ab1c44ad2859867b138996798bcf74fea8aec139" translate="yes" xml:space="preserve">
          <source>StrictTypeQ</source>
          <target state="translated">StrictTypeQ</target>
        </trans-unit>
        <trans-unit id="42f1bfdab9b4c0657e9556a7fee5234617960acf" translate="yes" xml:space="preserve">
          <source>Strictly speaking it is better to use &lt;code&gt;&lt;a href=&quot;ghc-conc#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt;, because the number of capabilities might vary at runtime.</source>
          <target state="translated">厳密に言えば、機能の数は実行時に変化する可能性があるため、 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="e7c5a762202275568d2d039c3d14f4827f67e0c5" translate="yes" xml:space="preserve">
          <source>Strictly speaking it is better to use &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt;, because the number of capabilities might vary at runtime.</source>
          <target state="translated">厳密に言えば、機能の数は実行時に変化する可能性があるため、 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4e4b8136d197b8377982f8eec167ef1e32bcd988" translate="yes" xml:space="preserve">
          <source>Strictly speaking, &lt;code&gt;-main-is&lt;/code&gt; is not a link-phase flag at all; it has no effect on the link step. The flag must be specified when compiling the module containing the specified main function (e.g. module &lt;code&gt;A&lt;/code&gt; in the latter two items above). It has no effect for other modules, and hence can safely be given to &lt;code&gt;ghc --make&lt;/code&gt;. However, if all the modules are otherwise up to date, you may need to force recompilation both of the module where the new &amp;ldquo;main&amp;rdquo; is, and of the module where the &amp;ldquo;main&amp;rdquo; function used to be; &lt;code&gt;ghc&lt;/code&gt; is not clever enough to figure out that they both need recompiling. You can force recompilation by removing the object file, or by using the &lt;a href=&quot;separate_compilation#ghc-flag--fforce-recomp&quot;&gt;&lt;code&gt;-fforce-recomp&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="translated">厳密に言えば、 &lt;code&gt;-main-is&lt;/code&gt; はリンクフェーズフラグではありません。リンク手順には影響しません。このフラグは、指定されたメイン関数を含むモジュールをコンパイルするときに指定する必要があります（上記の2つの項目のモジュール &lt;code&gt;A&lt;/code&gt; など）。他のモジュールには影響しないため、 &lt;code&gt;ghc --make&lt;/code&gt; に安全に与えることができます。ただし、他の方法ですべてのモジュールが最新の場合は、新しい「メイン」が存在するモジュールと、「メイン」機能が使用されていたモジュールの両方を強制的に再コンパイルする必要があります。 &lt;code&gt;ghc&lt;/code&gt; はどちらも再コンパイルが必要であることを理解するのに十分なほど賢くはありません。オブジェクトファイルを削除するか、&lt;a href=&quot;separate_compilation#ghc-flag--fforce-recomp&quot;&gt; &lt;code&gt;-fforce-recomp&lt;/code&gt; &lt;/a&gt;フラグを使用して、再コンパイルを強制できます。</target>
        </trans-unit>
        <trans-unit id="ea178a9a9bd02024d63a2e33e3d1c06a8b763aa9" translate="yes" xml:space="preserve">
          <source>Strictness</source>
          <target state="translated">Strictness</target>
        </trans-unit>
        <trans-unit id="db0e28e8cacc91926f075308cc8f7e3ec4225e7b" translate="yes" xml:space="preserve">
          <source>Strictness annotations in data declarations must be written in prefix form:</source>
          <target state="translated">データ宣言における厳密性のアノテーションは、プレフィックス形式で記述する必要があります。</target>
        </trans-unit>
        <trans-unit id="ae70c5e0aadd2a887566abe055fa2287e396a0cb" translate="yes" xml:space="preserve">
          <source>Strictness properties</source>
          <target state="translated">厳格性の特性</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="df69c43ff78249932546b7a676fcb79fae83ee1b" translate="yes" xml:space="preserve">
          <source>String I/O functions</source>
          <target state="translated">文字列入出力関数</target>
        </trans-unit>
        <trans-unit id="8bafd8dde0ea5116b7c687fc066421bac5b8e127" translate="yes" xml:space="preserve">
          <source>String concatenation is another example of a &lt;code&gt;&lt;a href=&quot;data-semigroup#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance:</source>
          <target state="translated">文字列連結は、 &lt;code&gt;&lt;a href=&quot;data-semigroup#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; インスタンスの別の例です。</target>
        </trans-unit>
        <trans-unit id="93a6aed0e197696ef30cd67ec01d419a5ab47362" translate="yes" xml:space="preserve">
          <source>String literal, with escapes interpreted</source>
          <target state="translated">文字列リテラル。</target>
        </trans-unit>
        <trans-unit id="fead3f626ab1bc4364788f5110ede5fbbe578349" translate="yes" xml:space="preserve">
          <source>String literals are also handled the same way, except that the translation is &lt;code&gt;fromString (&quot;368&quot;::String)&lt;/code&gt;.</source>
          <target state="translated">文字列リテラルも、変換が &lt;code&gt;fromString (&quot;368&quot;::String)&lt;/code&gt; ことを除いて、同じ方法で処理されます。</target>
        </trans-unit>
        <trans-unit id="322526bf32416e96b1ec87cec2493bb7d90ce000" translate="yes" xml:space="preserve">
          <source>String representations</source>
          <target state="translated">文字列表現</target>
        </trans-unit>
        <trans-unit id="82ff0b28eaf4650bf30ef651a57f09d0653293aa" translate="yes" xml:space="preserve">
          <source>String to seach in.</source>
          <target state="translated">調べるための文字列。</target>
        </trans-unit>
        <trans-unit id="4eb2a869e70cfb05bab0937ce14f9bffba3de724" translate="yes" xml:space="preserve">
          <source>String to search for</source>
          <target state="translated">検索する文字列</target>
        </trans-unit>
        <trans-unit id="deba9216c2af2ec3dea18fad6cf02b2f8a974cd4" translate="yes" xml:space="preserve">
          <source>String to search for.</source>
          <target state="translated">検索する文字列。</target>
        </trans-unit>
        <trans-unit id="4e35ca95f79c8fb89c80a4d3e5db5f199d244ff7" translate="yes" xml:space="preserve">
          <source>String to search in</source>
          <target state="translated">で検索する文字列</target>
        </trans-unit>
        <trans-unit id="053cfb20420cb605c24aee25c0bbdf9ce7b6d359" translate="yes" xml:space="preserve">
          <source>String to split on. If this string is empty, an error will occur.</source>
          <target state="translated">分割する文字列。この文字列が空の場合、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="fff53bec8fdc451861d5af1b1290addb682dd9c5" translate="yes" xml:space="preserve">
          <source>String-based POSIX directory support</source>
          <target state="translated">文字列ベースの POSIX ディレクトリのサポート</target>
        </trans-unit>
        <trans-unit id="8cef583d5b61b7fc89558336bd703935be4e09ad" translate="yes" xml:space="preserve">
          <source>StripHighBit</source>
          <target state="translated">StripHighBit</target>
        </trans-unit>
        <trans-unit id="871647865c6cba3a00d16282577f9276133331ff" translate="yes" xml:space="preserve">
          <source>Strongly Connected Components</source>
          <target state="translated">強力に接続されたコンポーネント</target>
        </trans-unit>
        <trans-unit id="9885145de2eac313bd39f23faaeadb94394cd85f" translate="yes" xml:space="preserve">
          <source>Strongly connected component.</source>
          <target state="translated">強く接続されたコンポーネント。</target>
        </trans-unit>
        <trans-unit id="99a0efc6cfd85d8ff2732a6718140f822cb90472" translate="yes" xml:space="preserve">
          <source>Style</source>
          <target state="translated">Style</target>
        </trans-unit>
        <trans-unit id="076bd1a687008936807629119bee2e2c08a156e4" translate="yes" xml:space="preserve">
          <source>SubLANGID</source>
          <target state="translated">SubLANGID</target>
        </trans-unit>
        <trans-unit id="246054a773a4e9a7ae273fea13e407f37de9f51d" translate="yes" xml:space="preserve">
          <source>Subject to fusion (fuses with its argument).</source>
          <target state="translated">融合の対象となる(その主張と融合する)。</target>
        </trans-unit>
        <trans-unit id="2da53afea791a30451890074f317e123f7bce821" translate="yes" xml:space="preserve">
          <source>Subject to fusion.</source>
          <target state="translated">融合の対象となる。</target>
        </trans-unit>
        <trans-unit id="38dc790c6071b3fcf05389a8505d2d40f9609dfa" translate="yes" xml:space="preserve">
          <source>Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="translated">融合の対象となります。無効なスカラ値の置換を行います。</target>
        </trans-unit>
        <trans-unit id="d560c3166145993736fa5da12096c1747a90f1a1" translate="yes" xml:space="preserve">
          <source>Sublist predicates</source>
          <target state="translated">サブリスト述語</target>
        </trans-unit>
        <trans-unit id="7503d011931067b41e002f8956088332dc99cac0" translate="yes" xml:space="preserve">
          <source>Sublists</source>
          <target state="translated">Sublists</target>
        </trans-unit>
        <trans-unit id="e452b6e9b72f42cbb3a20fd5c96416db827ecc42" translate="yes" xml:space="preserve">
          <source>Submap</source>
          <target state="translated">Submap</target>
        </trans-unit>
        <trans-unit id="041d20cfb351df25518b1fc63a1180aa4794aa06" translate="yes" xml:space="preserve">
          <source>Subranges</source>
          <target state="translated">Subranges</target>
        </trans-unit>
        <trans-unit id="04b8db0c75f75123429916d395a99faa9f90f414" translate="yes" xml:space="preserve">
          <source>Subscribers can post to the list by sending their message to &lt;a href=&quot;mailto:ghc-devs%40haskell.org&quot;&gt;ghc-devs@haskell.org&lt;/a&gt;. Further information can be found on the &lt;a href=&quot;http://www.haskell.org/mailman/listinfo/ghc-devs&quot;&gt;Mailman page&lt;/a&gt;.</source>
          <target state="translated">購読者は、メッセージを&lt;a href=&quot;mailto:ghc-devs%40haskell.org&quot;&gt;ghc-devs@haskell.orgに&lt;/a&gt;送信することにより、リストに投稿できます。詳細については、&lt;a href=&quot;http://www.haskell.org/mailman/listinfo/ghc-devs&quot;&gt;Mailmanページをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a55a58dbac6ef3771bf77d6556d2bb6b23de79ee" translate="yes" xml:space="preserve">
          <source>Subscribers can post to the list by sending their message to &lt;a href=&quot;mailto:ghc-devs%40haskell.org&quot;&gt;ghc-devs@haskell.org&lt;/a&gt;. Further information can be found on the &lt;a href=&quot;https://www.haskell.org/mailman/listinfo/ghc-devs&quot;&gt;Mailman page&lt;/a&gt;.</source>
          <target state="translated">サブスクライバーは、メッセージを&lt;a href=&quot;mailto:ghc-devs%40haskell.org&quot;&gt;ghc-devs@haskell.orgに&lt;/a&gt;送信することにより、リストに投稿できます。詳細については、&lt;a href=&quot;https://www.haskell.org/mailman/listinfo/ghc-devs&quot;&gt;Mailmanページを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5eb1c8f193a2e720b166a1c1ec2db58a17d52f8b" translate="yes" xml:space="preserve">
          <source>Subscribers can post to the list by sending their message to &lt;a href=&quot;mailto:glasgow-haskell-users%40haskell.org&quot;&gt;glasgow-haskell-users@haskell.org&lt;/a&gt;. Further information can be found on the &lt;a href=&quot;http://www.haskell.org/mailman/listinfo/glasgow-haskell-users&quot;&gt;Mailman page&lt;/a&gt;.</source>
          <target state="translated">購読者は、メッセージを&lt;a href=&quot;mailto:glasgow-haskell-users%40haskell.org&quot;&gt;glasgow-haskell-users@haskell.orgに&lt;/a&gt;送信することにより、リストに投稿できます。詳細については、&lt;a href=&quot;http://www.haskell.org/mailman/listinfo/glasgow-haskell-users&quot;&gt;Mailmanページをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="351670b66e76590d384a886988305491213bc05b" translate="yes" xml:space="preserve">
          <source>Subscribers can post to the list by sending their message to &lt;a href=&quot;mailto:glasgow-haskell-users%40haskell.org&quot;&gt;glasgow-haskell-users@haskell.org&lt;/a&gt;. Further information can be found on the &lt;a href=&quot;https://www.haskell.org/mailman/listinfo/glasgow-haskell-users&quot;&gt;Mailman page&lt;/a&gt;.</source>
          <target state="translated">サブスクライバーは、メッセージを&lt;a href=&quot;mailto:glasgow-haskell-users%40haskell.org&quot;&gt;glasgow-haskell-users@haskell.orgに&lt;/a&gt;送信して、リストに投稿できます。詳細については、&lt;a href=&quot;https://www.haskell.org/mailman/listinfo/glasgow-haskell-users&quot;&gt;Mailmanページを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1ee5424964da2c091edd5848a37ea5bf9cb02ac7" translate="yes" xml:space="preserve">
          <source>Substitute a 'v' format character with the given default format character in the &lt;code&gt;&lt;a href=&quot;text-printf#t:FieldFormat&quot;&gt;FieldFormat&lt;/a&gt;&lt;/code&gt;. A convenience for user-implemented types, which should support &quot;%v&quot;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-printf#t:FieldFormat&quot;&gt;FieldFormat&lt;/a&gt;&lt;/code&gt; の「v」フォーマット文字を、指定されたデフォルトのフォーマット文字に置き換えます。&quot;％v&quot;をサポートするユーザー実装型の利便性。</target>
        </trans-unit>
        <trans-unit id="827c20543512b6872f9167e039de225d7f3586ed" translate="yes" xml:space="preserve">
          <source>Substitute various time-related information for each %-code in the string, as per &lt;code&gt;&lt;a href=&quot;data-time-format-internal#v:formatCharacter&quot;&gt;formatCharacter&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-time-format-internal#v:formatCharacter&quot;&gt;formatCharacter&lt;/a&gt;&lt;/code&gt; に従って、文字列内の各％-codeにさまざまな時間関連情報を代入します。</target>
        </trans-unit>
        <trans-unit id="21d9ae09150728fb01f3df8f2d5bf01b3f3ebc56" translate="yes" xml:space="preserve">
          <source>Substring matching is supported for ⟨M⟩ in &lt;code&gt;find-module&lt;/code&gt; and for ⟨P⟩ in &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;describe&lt;/code&gt;, and &lt;code&gt;field&lt;/code&gt;, where a &lt;code&gt;'*'&lt;/code&gt; indicates open substring ends (&lt;code&gt;prefix*&lt;/code&gt;, &lt;code&gt;*suffix&lt;/code&gt;, &lt;code&gt;*infix*&lt;/code&gt;). Examples (output omitted):</source>
          <target state="translated">部分文字列の照合は、 &lt;code&gt;find-module&lt;/code&gt; の「M &lt;code&gt;'*'&lt;/code&gt; および &lt;code&gt;list&lt;/code&gt; 、 &lt;code&gt;describe&lt;/code&gt; 、および &lt;code&gt;field&lt;/code&gt; の「 P」でサポートされます。ここで、「*」は開いている部分文字列の終わりを示します（ &lt;code&gt;prefix*&lt;/code&gt; 、 &lt;code&gt;*suffix&lt;/code&gt; 、 &lt;code&gt;*infix*&lt;/code&gt; ）。例（出力は省略）：</target>
        </trans-unit>
        <trans-unit id="ab6fff443cc0973a1c46302de5d05ef909254c54" translate="yes" xml:space="preserve">
          <source>Substring to search for (&lt;code&gt;needle&lt;/code&gt;)</source>
          <target state="translated">検索する部分文字列（ &lt;code&gt;needle&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="910b443e8f3aa911551fe1b15df5c21842322d13" translate="yes" xml:space="preserve">
          <source>Substrings</source>
          <target state="translated">Substrings</target>
        </trans-unit>
        <trans-unit id="98a81fc167b58777c62ed1dfaa91251ba9db5eee" translate="yes" xml:space="preserve">
          <source>Subtract one &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; from another.</source>
          <target state="translated">ある &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; を別の整数から減算します。</target>
        </trans-unit>
        <trans-unit id="ee4ba19df4728cec72d08a77d05708e00b8bcb7a" translate="yes" xml:space="preserve">
          <source>Subtract signed integers reporting overflow. First member of result is the difference truncated to an &lt;code&gt;Int#&lt;/code&gt;; second member is zero if the true difference fits in an &lt;code&gt;Int#&lt;/code&gt;, nonzero if overflow occurred (the difference is either too large or too small to fit in an &lt;code&gt;Int#&lt;/code&gt;).</source>
          <target state="translated">オーバーフローを報告する符号付き整数を減算します。結果の最初のメンバーは、 &lt;code&gt;Int#&lt;/code&gt; に切り捨てられた差です。2番目のメンバーは、真の差が &lt;code&gt;Int#&lt;/code&gt; に収まる場合はゼロ、オーバーフローが発生した場合はゼロ以外です（差が大きすぎるか小さすぎる場合は &lt;code&gt;Int#&lt;/code&gt; に収まりません）。</target>
        </trans-unit>
        <trans-unit id="30c07609e2e31f77bb622485b3cc7bf36c0b3d7d" translate="yes" xml:space="preserve">
          <source>Subtract two vectors element-wise.</source>
          <target state="translated">2つのベクトルを要素ごとに減算します。</target>
        </trans-unit>
        <trans-unit id="b665f5751f6c474585435dc9171b3dae6053a5f0" translate="yes" xml:space="preserve">
          <source>Subtract unsigned integers reporting overflow. The first element of the pair is the result. The second element is the carry flag, which is nonzero on overflow.</source>
          <target state="translated">オーバーフローを報告する符号なし整数を減算します。ペアの最初の要素が結果です。2 番目の要素はキャリーフラグで、オーバーフロー時には 0 以外の値になります。</target>
        </trans-unit>
        <trans-unit id="497cccd33439953bbbd65da81332fed6920de8d2" translate="yes" xml:space="preserve">
          <source>Subtraction of type-level naturals.</source>
          <target state="translated">型レベルの自然数の減算。</target>
        </trans-unit>
        <trans-unit id="91d5cb154b12d16f439a24c1bf3b1c526a720a4b" translate="yes" xml:space="preserve">
          <source>Succeeds iff we are at the end of input</source>
          <target state="translated">入力の最後にいる場合に成功する</target>
        </trans-unit>
        <trans-unit id="85957404dd49cf29cf9e260987f143968d4c3b86" translate="yes" xml:space="preserve">
          <source>Such arrows are equivalent to monads (see &lt;code&gt;&lt;a href=&quot;control-arrow#t:ArrowMonad&quot;&gt;ArrowMonad&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">このような矢印はモナドと同じです（ &lt;code&gt;&lt;a href=&quot;control-arrow#t:ArrowMonad&quot;&gt;ArrowMonad&lt;/a&gt;&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="8b16de06d17ad8c6bf7ec704068bb13890314a12" translate="yes" xml:space="preserve">
          <source>Such data types have only one value, namely bottom. Nevertheless, they can be useful when defining &amp;ldquo;phantom types&amp;rdquo;.</source>
          <target state="translated">このようなデータ型には、1つの値、つまり「ボトム」しかありません。それでも、「ファントムタイプ」を定義するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="f1473fd9419719956dc153fb3e53b7c0229f16c2" translate="yes" xml:space="preserve">
          <source>Such macros can also be defined directly in the source. They are useful for making a &lt;code&gt;#let&lt;/code&gt;-like macro whose expansion uses other &lt;code&gt;#let&lt;/code&gt; macros. Plain &lt;code&gt;#let&lt;/code&gt; prepends &lt;code&gt;hsc_&lt;/code&gt; to the macro name and wraps the definition in a &lt;code&gt;printf&lt;/code&gt; call.</source>
          <target state="translated">このようなマクロは、ソースで直接定義することもできます。これらは、展開で他の &lt;code&gt;#let&lt;/code&gt; マクロを使用する &lt;code&gt;#let&lt;/code&gt; のようなマクロを作成するのに役立ちます。プレーン &lt;code&gt;#let&lt;/code&gt; は &lt;code&gt;hsc_&lt;/code&gt; をマクロ名の前に付加し、 &lt;code&gt;printf&lt;/code&gt; 呼び出しで定義をラップします。</target>
        </trans-unit>
        <trans-unit id="55b56095e34a272508b89dad1dc7be5bd15118fb" translate="yes" xml:space="preserve">
          <source>Such multiline commands can be used with any GHCi command, and note that the layout rule is in effect. The main purpose of multiline commands is not to replace module loading but to make definitions in .ghci-files (see &lt;a href=&quot;#ghci-dot-files&quot;&gt;The .ghci and .haskeline files&lt;/a&gt;) more readable and maintainable.</source>
          <target state="translated">このような複数行のコマンドは任意のGHCiコマンドで使用でき、レイアウトルールが有効であることに注意してください。マルチラインコマンドの主な目的は、モジュールの読み込みを置き換えることではなく、.ghci-files（&lt;a href=&quot;#ghci-dot-files&quot;&gt;.ghciおよび.haskelineファイルを&lt;/a&gt;参照）の定義をより読みやすく保守しやすくすることです。</target>
        </trans-unit>
        <trans-unit id="7169e9119a6aaa5f7b6232bacf90dcb50543ba51" translate="yes" xml:space="preserve">
          <source>Suffix saying &amp;ldquo;start here&amp;rdquo;</source>
          <target state="translated">「ここから始めよう」という接尾辞</target>
        </trans-unit>
        <trans-unit id="65ff33cefc3f84e88830d0bf249af62b2e49d228" translate="yes" xml:space="preserve">
          <source>Suggest that the compiler always consider inlining &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">コンパイラが常にインライン &lt;code&gt;name&lt;/code&gt; 考慮することを提案します。</target>
        </trans-unit>
        <trans-unit id="fc9ce14b28c6f2c3b72caf056ca604b2b96f7d2b" translate="yes" xml:space="preserve">
          <source>Sum</source>
          <target state="translated">Sum</target>
        </trans-unit>
        <trans-unit id="d9e2491eb7656e3492fcc3876a7a77de3462b7a8" translate="yes" xml:space="preserve">
          <source>Sum of copied_bytes across all GCs</source>
          <target state="translated">すべての GC 2011 のコピーされたバイトの合計</target>
        </trans-unit>
        <trans-unit id="0d9ccb61b1acc93fbb28f6e048faf94d55b713a5" translate="yes" xml:space="preserve">
          <source>Sum of copied_bytes across all parallel GCs</source>
          <target state="translated">すべての並列 GC 2011 にまたがる copied_bytes の合計</target>
        </trans-unit>
        <trans-unit id="dcad0491181633bafafa0e3db915b09abae702b5" translate="yes" xml:space="preserve">
          <source>Sum of live bytes across all major GCs. Divided by major_gcs gives the average live data over the lifetime of the program.</source>
          <target state="translated">すべてのメジャー GC にまたがるライブバイトの合計。major_gcs で割ると、プログラムの寿命にわたって平均的なライブデータが得られます。</target>
        </trans-unit>
        <trans-unit id="70ac69aadffa6cb9bde16c8cdf6f65307407d32c" translate="yes" xml:space="preserve">
          <source>Sum of par_balanced_copied bytes across all parallel GCs</source>
          <target state="translated">すべての並列 GC 2011 における par_balanced_copied バイトの合計</target>
        </trans-unit>
        <trans-unit id="07a5b55c642011e64059485d82402747c10b4adb" translate="yes" xml:space="preserve">
          <source>Sum of par_max_copied_bytes across all parallel GCs. Deprecated.</source>
          <target state="translated">すべての並列 GC 2011 における par_max_copied_bytes の合計。非推奨。</target>
        </trans-unit>
        <trans-unit id="5215b34dfb01abbf7378acfdcf4fe1dedcc8e009" translate="yes" xml:space="preserve">
          <source>Sum the values in a tree:</source>
          <target state="translated">ツリー内の値を合計します。</target>
        </trans-unit>
        <trans-unit id="4f4abb0e8c9277199f066395cb9c2c425902f02e" translate="yes" xml:space="preserve">
          <source>SumAlt</source>
          <target state="translated">SumAlt</target>
        </trans-unit>
        <trans-unit id="9d6c94fe6e3e0e9614bba2768e5b7540a7c0bf47" translate="yes" xml:space="preserve">
          <source>SumArity</source>
          <target state="translated">SumArity</target>
        </trans-unit>
        <trans-unit id="e797e0283a33d4a2f6f3ed364c6e9ca07755e641" translate="yes" xml:space="preserve">
          <source>Summarise timing stats for GHC (same as &lt;code&gt;+RTS -tstderr&lt;/code&gt;).</source>
          <target state="translated">GHCのタイミング統計を要約します（ &lt;code&gt;+RTS -tstderr&lt;/code&gt; と同じ）。</target>
        </trans-unit>
        <trans-unit id="6a0ba6d4cba69cca9ee908b3882310d0126b622e" translate="yes" xml:space="preserve">
          <source>SummaryGCStats</source>
          <target state="translated">SummaryGCStats</target>
        </trans-unit>
        <trans-unit id="45c7c0bcfb7345694edd730cace93da339799b81" translate="yes" xml:space="preserve">
          <source>Sums, lifted to functors.</source>
          <target state="translated">和、ファンクタに持ち越される。</target>
        </trans-unit>
        <trans-unit id="825e9b3f9d7fa4f8c1136e7e836e969e05770489" translate="yes" xml:space="preserve">
          <source>Sums: encode choice between constructors</source>
          <target state="translated">Sums:コンストラクタ間の選択をエンコード</target>
        </trans-unit>
        <trans-unit id="bc5dd045b8623ddfc4bd0bce98ca5fda42accf88" translate="yes" xml:space="preserve">
          <source>Sunday</source>
          <target state="translated">Sunday</target>
        </trans-unit>
        <trans-unit id="e87c6d01d55d0ce0b58fc09dd2f8e52d59de79d1" translate="yes" xml:space="preserve">
          <source>Sunday-starting week number (as &lt;code&gt;%U&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;data-time-format#v:formatTime&quot;&gt;formatTime&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">（日曜開始週数 &lt;code&gt;%U&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;data-time-format#v:formatTime&quot;&gt;formatTime&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7c7cab6646f2b97044e50ae44c966832deeaa85f" translate="yes" xml:space="preserve">
          <source>Superclass for asynchronous exceptions.</source>
          <target state="translated">非同期例外のためのスーパークラスです。</target>
        </trans-unit>
        <trans-unit id="78433170f0b7b96ef33df863ac26779a57388106" translate="yes" xml:space="preserve">
          <source>Support augmentation of finalizers, i.e. &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:addForeignPtrFinalizer&quot;&gt;addForeignPtrFinalizer&lt;/a&gt;&lt;/code&gt;. As a motivating example, suppose that the payload of a foreign pointer is C struct &lt;code&gt;bar&lt;/code&gt; that has an optionally NULL pointer field &lt;code&gt;foo&lt;/code&gt; to an unmanaged heap object. Initially, &lt;code&gt;foo&lt;/code&gt; is NULL, and later the program uses &lt;code&gt;malloc&lt;/code&gt;, initializes the object, and assigns &lt;code&gt;foo&lt;/code&gt; the address returned by &lt;code&gt;malloc&lt;/code&gt;. When the foreign pointer becomes unreachable, it is now necessary to first &lt;code&gt;free&lt;/code&gt; the object pointed to by &lt;code&gt;foo&lt;/code&gt; and then invoke whatever finalizer was associated with &lt;code&gt;bar&lt;/code&gt;. That is, finalizers must be invoked in the opposite order they are added.</source>
          <target state="translated">ファイナライザー、つまり &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:addForeignPtrFinalizer&quot;&gt;addForeignPtrFinalizer&lt;/a&gt;&lt;/code&gt; の拡張をサポートします。動機付けの例として、外部ポインターのペイロードが、アンマネージヒープオブジェクトへのオプションでNULLポインターフィールド &lt;code&gt;foo&lt;/code&gt; を持つC構造体 &lt;code&gt;bar&lt;/code&gt; であると仮定します。最初は &lt;code&gt;foo&lt;/code&gt; はNULLであり、後でプログラムは &lt;code&gt;malloc&lt;/code&gt; を使用してオブジェクトを初期化し、 &lt;code&gt;malloc&lt;/code&gt; によって返されたアドレスを &lt;code&gt;foo&lt;/code&gt; に割り当てます。外部ポインターが到達不能になった場合、最初に &lt;code&gt;foo&lt;/code&gt; が指すオブジェクトを &lt;code&gt;free&lt;/code&gt; てから、 &lt;code&gt;bar&lt;/code&gt; に関連付けられているファイナライザーを呼び出す必要があります。。つまり、ファイナライザーは、追加されるのとは逆の順序で呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="ff030e54038a44e824c8361bcdbaeb79e030624e" translate="yes" xml:space="preserve">
          <source>Support for API calls that are passed a fixed-size buffer and tell you via the return value if the buffer was too small. In that case, we extend the buffer size and try again.</source>
          <target state="translated">固定サイズのバッファが渡され、バッファが小さすぎた場合に戻り値を介して伝えるAPIコールをサポートします。その場合は、バッファサイズを拡張して再試行します。</target>
        </trans-unit>
        <trans-unit id="9ce001752e5496cae9273594bdb80a3136c0b971" translate="yes" xml:space="preserve">
          <source>Support for API calls that return the required size, in characters including a null character, of the buffer when passed a buffer size of zero.</source>
          <target state="translated">バッファサイズがゼロの場合に、バッファの必要なサイズ(ヌル文字を含む文字数)を返すAPIコールをサポートしました。</target>
        </trans-unit>
        <trans-unit id="42fe79082e0a9288bda8ac01c25ca56f6078fa67" translate="yes" xml:space="preserve">
          <source>Support for bound threads; see the paper &lt;a href=&quot;http://community.haskell.org/~simonmar/papers/conc-ffi.pdf&quot;&gt;Extending the FFI with concurrency&lt;/a&gt;.</source>
          <target state="translated">バインドされたスレッドのサポート。&lt;a href=&quot;http://community.haskell.org/~simonmar/papers/conc-ffi.pdf&quot;&gt;同時実行によるFFIの拡張&lt;/a&gt;のペーパーを参照してください。</target>
        </trans-unit>
        <trans-unit id="f3cb7ae652ba2f67aaaa3d6c38db502bc3ca3643" translate="yes" xml:space="preserve">
          <source>Support for catching exceptions raised during top-level computations (e.g. &lt;code&gt;Main.main&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;, and foreign exports)</source>
          <target state="translated">トップレベルの計算中に発生した例外をキャッチするためのサポート（例： &lt;code&gt;Main.main&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; 、および外部エクスポート）</target>
        </trans-unit>
        <trans-unit id="31617f5b30b1b9c8053b244b4ae6feb5a246d66c" translate="yes" xml:space="preserve">
          <source>Support for multiple operating system threads and bound threads as described below is currently only available in the GHC runtime system if you use the &lt;em&gt;-threaded&lt;/em&gt; option when linking.</source>
          <target state="translated">以下に説明する複数のオペレーティングシステムスレッドとバインドされたスレッドのサポートは、リンク時に&lt;em&gt;-threaded&lt;/em&gt;オプションを使用する場合、現在GHCランタイムシステムでのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="e0bd01fb9ed07046a4615b96dd1a8c99f7d4ce7b" translate="yes" xml:space="preserve">
          <source>Support for using &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; data with native code via the Haskell foreign function interface.</source>
          <target state="translated">Haskell外部関数インターフェースを介してネイティブコードで &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; データを使用するためのサポート。</target>
        </trans-unit>
        <trans-unit id="ddf769c12c4f317b302132ad5336a5ddba73c0c8" translate="yes" xml:space="preserve">
          <source>Suppose a client C decides to trust package &lt;code&gt;P&lt;/code&gt; and package &lt;code&gt;base&lt;/code&gt;. Then does C trust module &lt;code&gt;M&lt;/code&gt;? Well &lt;code&gt;M&lt;/code&gt; is marked &lt;a href=&quot;#extension-Trustworthy&quot;&gt;&lt;code&gt;Trustworthy&lt;/code&gt;&lt;/a&gt;, so we don&amp;rsquo;t restrict the language. However, we still must check &lt;code&gt;M&lt;/code&gt;&amp;lsquo;s imports:</source>
          <target state="translated">クライアントCがパッケージ &lt;code&gt;P&lt;/code&gt; とパッケージ &lt;code&gt;base&lt;/code&gt; を信頼することを決定したとします。次に、Cはモジュール &lt;code&gt;M&lt;/code&gt; を信頼しますか？まあ &lt;code&gt;M&lt;/code&gt; は&lt;a href=&quot;#extension-Trustworthy&quot;&gt; &lt;code&gt;Trustworthy&lt;/code&gt; &lt;/a&gt;とマークされているので、言語を制限しません。ただし、 &lt;code&gt;M&lt;/code&gt; のインポートを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="6edabccdee60f9757ab610d65ace3f274d627ee0" translate="yes" xml:space="preserve">
          <source>Suppose a client C decides to trust package &lt;code&gt;P&lt;/code&gt; and package &lt;code&gt;base&lt;/code&gt;. Then does C trust module &lt;code&gt;M&lt;/code&gt;? Well &lt;code&gt;M&lt;/code&gt; is marked &lt;a href=&quot;#extension-Trustworthy&quot;&gt;&lt;code&gt;Trustworthy&lt;/code&gt;&lt;/a&gt;, so we don&amp;rsquo;t restrict the language. However, we still must check &lt;code&gt;M&lt;/code&gt;&amp;rsquo;s imports:</source>
          <target state="translated">クライアントCがパッケージ &lt;code&gt;P&lt;/code&gt; とパッケージ &lt;code&gt;base&lt;/code&gt; を信頼することを決定したとします。では、Cはモジュール &lt;code&gt;M&lt;/code&gt; を信頼しますか？まあ &lt;code&gt;M&lt;/code&gt; がマークされている&lt;a href=&quot;#extension-Trustworthy&quot;&gt; &lt;code&gt;Trustworthy&lt;/code&gt; &lt;/a&gt;、私たちは言語を制限するものではありません。ただし、 &lt;code&gt;M&lt;/code&gt; のインポートを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="095b60f3ba2863e8c5c5d107012bf74c2b5f0019" translate="yes" xml:space="preserve">
          <source>Suppose that from the RHS of &lt;code&gt;f&lt;/code&gt; we get the constraint &lt;code&gt;C b [b]&lt;/code&gt;. But GHC does not commit to instance (C), because in a particular call of &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; might be instantiated to &lt;code&gt;Int&lt;/code&gt;, in which case instance (D) would be more specific still. So GHC rejects the program.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; のRHSから制約 &lt;code&gt;C b [b]&lt;/code&gt; を取得するとします。ただし、GHCはインスタンス（C）にコミットしません。これは、 &lt;code&gt;f&lt;/code&gt; の特定の呼び出しで、 &lt;code&gt;b&lt;/code&gt; が &lt;code&gt;Int&lt;/code&gt; にインスタンス化される可能性があるためです。この場合、インスタンス（D）はより具体的です。したがって、GHCはプログラムを拒否します。</target>
        </trans-unit>
        <trans-unit id="da498088a064a16427d552d5b30c6ce378689bb7" translate="yes" xml:space="preserve">
          <source>Suppose we have the following Haskell source code, which we place in a file &lt;code&gt;Main.hs&lt;/code&gt;:</source>
          <target state="translated">次のHaskellソースコードがあり、ファイル &lt;code&gt;Main.hs&lt;/code&gt; に配置するとします。</target>
        </trans-unit>
        <trans-unit id="efb59f4ee25bd81474f2698e49ad1d0c32f825f1" translate="yes" xml:space="preserve">
          <source>Suppose we have two uses of a type constructor, each applied to the same parameters except for one difference. (For example, &lt;code&gt;T Age Bool c&lt;/code&gt; and &lt;code&gt;T Int Bool c&lt;/code&gt; for some type &lt;code&gt;T&lt;/code&gt;.) The role of a type parameter says what we need to know about the two differing type arguments in order to know that the two outer types have the same representation (in the example, what must be true about &lt;code&gt;Age&lt;/code&gt; and &lt;code&gt;Int&lt;/code&gt; in order to show that &lt;code&gt;T Age Bool c&lt;/code&gt; has the same representation as &lt;code&gt;T Int Bool c&lt;/code&gt;).</source>
          <target state="translated">型コンストラクターの2つの使用法があり、それぞれが1つの違いを除いて同じパラメーターに適用されているとします。 （例えば、 &lt;code&gt;T Age Bool c&lt;/code&gt; と &lt;code&gt;T Int Bool c&lt;/code&gt; いくつかのタイプのための &lt;code&gt;T&lt;/code&gt; 。）typeパラメータの役割は、我々は二つの外側の型が同じ表現を持っていることを知るために、2つの異なる型の引数について知っておくべきことを言います（この例では、 &lt;code&gt;T Age Bool c&lt;/code&gt; が &lt;code&gt;T Int Bool c&lt;/code&gt; と同じ表現であることを示すために、 &lt;code&gt;Age&lt;/code&gt; と &lt;code&gt;Int&lt;/code&gt; について何が真でなければならないか）。</target>
        </trans-unit>
        <trans-unit id="e3f030babe9d462a874f39c8cea4c76533ced64f" translate="yes" xml:space="preserve">
          <source>Suppose we have:</source>
          <target state="translated">あるとしましょう。</target>
        </trans-unit>
        <trans-unit id="95d757c1803d865246ed0c5f9c2e1f752242c85c" translate="yes" xml:space="preserve">
          <source>Suppose we want to define an interpreter that can do I/O and has exceptions, an environment and a modifiable store. We can define a monad that supports all these things as a stack of monad transformers:</source>
          <target state="translated">I/Oができ、例外、環境、変更可能なストアを持つインタプリタを定義したいとします。これらすべてをサポートするモナドをモナド変換器のスタックとして定義することができます。</target>
        </trans-unit>
        <trans-unit id="0e761d7f04f0cd2dc6abebf53430127001808a68" translate="yes" xml:space="preserve">
          <source>Suppose you are importing a Prelude of your own in order to define your own numeric class hierarchy. It completely defeats that purpose if the literal &amp;ldquo;1&amp;rdquo; means &amp;ldquo;&lt;code&gt;Prelude.fromInteger 1&lt;/code&gt;&amp;rdquo;, which is what the Haskell Report specifies. So the &lt;a href=&quot;#extension-RebindableSyntax&quot;&gt;&lt;code&gt;RebindableSyntax&lt;/code&gt;&lt;/a&gt; extension causes the following pieces of built-in syntax to refer to &lt;em&gt;whatever is in scope&lt;/em&gt;, not the Prelude versions:</source>
          <target state="translated">独自の数値クラス階層を定義するために、独自のプレリュードをインポートするとします。Haskell Reportが指定するリテラル「1」が「 &lt;code&gt;Prelude.fromInteger 1&lt;/code&gt; 」を意味する場合、それはその目的を完全に無効にします。したがって、&lt;a href=&quot;#extension-RebindableSyntax&quot;&gt; &lt;code&gt;RebindableSyntax&lt;/code&gt; &lt;/a&gt;拡張機能により、次の組み込み構文は、Preludeバージョンではなく、&lt;em&gt;スコープ内のすべてのもの&lt;/em&gt;を参照します。</target>
        </trans-unit>
        <trans-unit id="b130631fc1a052b53e9b573c6a35c3793ee28509" translate="yes" xml:space="preserve">
          <source>Suppose:</source>
          <target state="translated">Suppose:</target>
        </trans-unit>
        <trans-unit id="c769136ca44e362284769d80ccd2b1f9f09dfcf1" translate="yes" xml:space="preserve">
          <source>Suppress &quot;ticks&quot; in the pretty-printer output.</source>
          <target state="translated">プリティプリンタ出力の &quot;刻み &quot;を抑制します。</target>
        </trans-unit>
        <trans-unit id="ac34491e80235a273a00fbf5ae564921bc6adb63" translate="yes" xml:space="preserve">
          <source>Suppress &amp;ldquo;ticks&amp;rdquo; in the pretty-printer output.</source>
          <target state="translated">pretty-printerの出力で「ティック」を抑制します。</target>
        </trans-unit>
        <trans-unit id="6adae4844792476be6006de9e866028d9783ef04" translate="yes" xml:space="preserve">
          <source>Suppress any unsolicited debugging output. When GHC has been built with the &lt;code&gt;DEBUG&lt;/code&gt; option it occasionally emits debug output of interest to developers. The extra output can confuse the testing framework and cause bogus test failures, so this flag is provided to turn it off.</source>
          <target state="translated">任意のデバッグ出力を抑制します。GHCが &lt;code&gt;DEBUG&lt;/code&gt; オプションを使用してビルドされている場合、開発者が関心のあるデバッグ出力を時々出力します。追加の出力はテストフレームワークを混乱させ、偽のテストエラーを引き起こす可能性があるため、このフラグはそれをオフにするために提供されています。</target>
        </trans-unit>
        <trans-unit id="290ff2e65a492c159dfad44b8433444fb21b1d9b" translate="yes" xml:space="preserve">
          <source>Suppress everything that can be suppressed, except for unique ids as this often makes the printout ambiguous. If you just want to see the overall structure of the code, then start here.</source>
          <target state="translated">抑制できるものはすべて抑制しますが、ユニークな ID を除いては、プリントアウトが曖昧になることが多いので、抑制します。コードの全体的な構造を見たいだけなら、ここから始めてください。</target>
        </trans-unit>
        <trans-unit id="a53d305ee7381472627843798c8d10190107cab3" translate="yes" xml:space="preserve">
          <source>Suppress extended information about identifiers where they are bound</source>
          <target state="translated">識別子がバインドされている場合は、識別子に関する拡張情報を抑制します。</target>
        </trans-unit>
        <trans-unit id="11b448ead99f0bf773abbe1b2d9be994c6e6b74f" translate="yes" xml:space="preserve">
          <source>Suppress extended information about identifiers where they are bound. This includes strictness information and inliner templates. Using this flag can cut the size of the core dump in half, due to the lack of inliner templates</source>
          <target state="translated">識別子がバインドされている場所での識別子に関する拡張情報を抑制します。これには、厳密性情報やインラインテンプレートが含まれます。このフラグを使用すると、インラインテンプレートがないため、コアダンプのサイズを半分にすることができます。</target>
        </trans-unit>
        <trans-unit id="fbb75bd7a15050e7f0b879e9c42149aa1c523a0e" translate="yes" xml:space="preserve">
          <source>Suppress the printing of closure free variable lists in STG output</source>
          <target state="translated">STG出力でクロージャフリー変数リストの印刷を抑制</target>
        </trans-unit>
        <trans-unit id="e6f6d31cea2bd9d749646450b106f137701dd495" translate="yes" xml:space="preserve">
          <source>Suppress the printing of coercions in Core dumps to make them shorter</source>
          <target state="translated">コアダンプの強制力の印刷を抑制して短くする</target>
        </trans-unit>
        <trans-unit id="12c098bf156d0093acc5cd885289b696e4cc4c15" translate="yes" xml:space="preserve">
          <source>Suppress the printing of module qualification prefixes</source>
          <target state="translated">モジュール資格の接頭辞の印刷を抑制</target>
        </trans-unit>
        <trans-unit id="5bbac2f4b131b833c24ec52650a5f5f342d244b7" translate="yes" xml:space="preserve">
          <source>Suppress the printing of module qualification prefixes. This is the &lt;code&gt;Data.List&lt;/code&gt; in &lt;code&gt;Data.List.length&lt;/code&gt;.</source>
          <target state="translated">モジュール修飾接頭辞の出力を抑制します。これは、 &lt;code&gt;Data.List&lt;/code&gt; で &lt;code&gt;Data.List.length&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="71860721ed879e362ecab05e711aec4a79ac4c5e" translate="yes" xml:space="preserve">
          <source>Suppress the printing of the stable unfolding of a variable at its binding site</source>
          <target state="translated">変数の結合部位での安定した展開の印刷を抑制します。</target>
        </trans-unit>
        <trans-unit id="dbb99127d9ceaf3187aec7c23b17de65a58473e2" translate="yes" xml:space="preserve">
          <source>Suppress the printing of the stable unfolding of a variable at its binding site.</source>
          <target state="translated">変数の結合部位での安定した展開の印刷を抑制します。</target>
        </trans-unit>
        <trans-unit id="dd6fc6999fd1d0618447db94d8224cadf833b0b9" translate="yes" xml:space="preserve">
          <source>Suppress the printing of timestamps. This makes it easier to diff dumps.</source>
          <target state="translated">タイムスタンプの印刷を抑制します。これにより、ダンプの差分を容易にすることができます。</target>
        </trans-unit>
        <trans-unit id="7ae280ce64aac04364611b8b6b2d9fdd41e13369" translate="yes" xml:space="preserve">
          <source>Suppress the printing of type applications.</source>
          <target state="translated">タイプアプリケーションの印刷を抑制します。</target>
        </trans-unit>
        <trans-unit id="c8cbf5451aabc9715d94f13c130e063b24125bba" translate="yes" xml:space="preserve">
          <source>Suppress the printing of type coercions.</source>
          <target state="translated">タイプ強制の印刷を抑制する。</target>
        </trans-unit>
        <trans-unit id="60d40a0d45f6f7bc2dc57806157b743c4e81be9e" translate="yes" xml:space="preserve">
          <source>Suppress the printing of type signatures.</source>
          <target state="translated">書体署名の印刷を抑制します。</target>
        </trans-unit>
        <trans-unit id="1e1a665236d94041050e8a7fe1af9a10ff9786d7" translate="yes" xml:space="preserve">
          <source>Suppress the printing of uniques in debug output (easier to use &lt;code&gt;diff&lt;/code&gt;)</source>
          <target state="translated">デバッグ出力での一意の出力を抑制します（ &lt;code&gt;diff&lt;/code&gt; を使用する方が簡単です）</target>
        </trans-unit>
        <trans-unit id="8200cb700aabd0d0bba42349c1c49130a9f1b310" translate="yes" xml:space="preserve">
          <source>Suppress the printing of uniques. This may make the printout ambiguous (e.g. unclear where an occurrence of &amp;lsquo;x&amp;rsquo; is bound), but it makes the output of two compiler runs have many fewer gratuitous differences, so you can realistically apply &lt;code&gt;diff&lt;/code&gt;. Once &lt;code&gt;diff&lt;/code&gt; has shown you where to look, you can try again without &lt;a href=&quot;#ghc-flag--dsuppress-uniques&quot;&gt;&lt;code&gt;-dsuppress-uniques&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">一意の印刷を抑制します。これにより、印刷結果があいまいになる可能性があります（たとえば、「x」の発生箇所がどこにあるか不明）。2つのコンパイラー実行の出力の不必要な違いがはるかに少なくなるため、実際に &lt;code&gt;diff&lt;/code&gt; を適用できます。いったん &lt;code&gt;diff&lt;/code&gt; はどこを見れするかを示している、あなたはせずにもう一度試すことができ&lt;a href=&quot;#ghc-flag--dsuppress-uniques&quot;&gt; &lt;code&gt;-dsuppress-uniques&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6bc6a8fee0bd35a3f374848c1e256872c6dd2b76" translate="yes" xml:space="preserve">
          <source>Suppress the printing of variable kinds</source>
          <target state="translated">可変種類の印刷を抑制</target>
        </trans-unit>
        <trans-unit id="6c6d53545f757aadefd3054db1329ebc043b8bef" translate="yes" xml:space="preserve">
          <source>Suppress timestamps in dumps</source>
          <target state="translated">ダンプでのタイムスタンプの抑制</target>
        </trans-unit>
        <trans-unit id="3abe7da92f27950aff8e21a0aef0128f001453a5" translate="yes" xml:space="preserve">
          <source>Suppress type applications</source>
          <target state="translated">抑制型アプリケーション</target>
        </trans-unit>
        <trans-unit id="44ecea02757bd5ca6bbfad966fb0bcd136dfa16a" translate="yes" xml:space="preserve">
          <source>Suppress type signatures</source>
          <target state="translated">型署名の抑制</target>
        </trans-unit>
        <trans-unit id="54ef935ccf47a05ace57d8ba2fc3133cb9a96abf" translate="yes" xml:space="preserve">
          <source>Suppress unsolicited debugging output</source>
          <target state="translated">依頼されていないデバッグ出力を抑制する</target>
        </trans-unit>
        <trans-unit id="ab5b3b04ea9eccd0e7c10a8ebf5857fc6c1efffc" translate="yes" xml:space="preserve">
          <source>Suppressing unwanted information</source>
          <target state="translated">不要な情報を抑制する</target>
        </trans-unit>
        <trans-unit id="e7d4a581c7bb167e18fdfc218fab181c1829c818" translate="yes" xml:space="preserve">
          <source>Surprises can arise from the &lt;code&gt;Foldable&lt;/code&gt; instance of the 2-tuple &lt;code&gt;(a,)&lt;/code&gt; which now behaves as a 1-element &lt;code&gt;Foldable&lt;/code&gt; container in its second slot. In contexts where a specific monomorphic type is expected, and you want to be able to rely on type errors to guide refactoring, it may make sense to define and use less-polymorphic variants of some of the &lt;code&gt;Foldable&lt;/code&gt; methods.</source>
          <target state="translated">サプライズは、2つのタプル &lt;code&gt;(a,)&lt;/code&gt; の &lt;code&gt;Foldable&lt;/code&gt; インスタンスから発生する可能性があります。これは、2番目のスロットで1要素の &lt;code&gt;Foldable&lt;/code&gt; コンテナーとして動作するようになりました。特定の単形型が予想され、型エラーに依存してリファクタリングをガイドできるようにしたい場合は、一部の &lt;code&gt;Foldable&lt;/code&gt; メソッドの多形性の低いバリアントを定義して使用することが理にかなっている場合があります。</target>
        </trans-unit>
        <trans-unit id="c948ea0246807256cf48a7cfaaf94b78e7b2095a" translate="yes" xml:space="preserve">
          <source>Surrogate</source>
          <target state="translated">Surrogate</target>
        </trans-unit>
        <trans-unit id="b24247fb5a9d8d8059901182187be57626f3ba71" translate="yes" xml:space="preserve">
          <source>Suspend</source>
          <target state="translated">Suspend</target>
        </trans-unit>
        <trans-unit id="60bdfaeef9de3afa9e3d9ef36f96b7bc40de22ca" translate="yes" xml:space="preserve">
          <source>SuspendOutput</source>
          <target state="translated">SuspendOutput</target>
        </trans-unit>
        <trans-unit id="e2749e7502a8294d14da474dd386ce65dffc90c7" translate="yes" xml:space="preserve">
          <source>Suspends the current thread for a given number of microseconds (GHC only).</source>
          <target state="translated">指定されたマイクロ秒数の間、現在のスレッドを中断します (GHC のみ)。</target>
        </trans-unit>
        <trans-unit id="4996fb84d9b501491f3973b59b2e677765620dc5" translate="yes" xml:space="preserve">
          <source>Swap bytes in &lt;code&gt;&lt;a href=&quot;data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; のバイトを交換します。</target>
        </trans-unit>
        <trans-unit id="72e71d9c46fe0a70f7a1bcce92e5572e02939858" translate="yes" xml:space="preserve">
          <source>Swap bytes in &lt;code&gt;&lt;a href=&quot;ghc-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; のバイトを交換します。</target>
        </trans-unit>
        <trans-unit id="63ac1bbf25314306de791757bf99d5d5c6a18eb6" translate="yes" xml:space="preserve">
          <source>Swap bytes in a 64 bits of a word.</source>
          <target state="translated">ワードの64ビットでバイトをスワップします。</target>
        </trans-unit>
        <trans-unit id="982631a751cc307941c1b0d5303a312235500a9f" translate="yes" xml:space="preserve">
          <source>Swap bytes in a word.</source>
          <target state="translated">ワード内のバイトをスワップします。</target>
        </trans-unit>
        <trans-unit id="b5c217b3175f1db23e820f4a3a6c120af18860d1" translate="yes" xml:space="preserve">
          <source>Swap bytes in the lower 16 bits of a word. The higher bytes are undefined.</source>
          <target state="translated">ワードの下位16ビットのバイトを入れ替えます。上位のバイトは未定義です。</target>
        </trans-unit>
        <trans-unit id="c7a751206d598feafc5b6d1ca524120a3e50c2de" translate="yes" xml:space="preserve">
          <source>Swap bytes in the lower 32 bits of a word. The higher bytes are undefined.</source>
          <target state="translated">ワードの下位32ビットのバイトを交換します。上位のバイトは未定義です。</target>
        </trans-unit>
        <trans-unit id="63dba41d9260dcf93f9a599778c93ef027d53087" translate="yes" xml:space="preserve">
          <source>Swap the components of a pair.</source>
          <target state="translated">ペアの構成要素を入れ替えます。</target>
        </trans-unit>
        <trans-unit id="77dc57d8f17c6348cc9cdd40f021e393b0104236" translate="yes" xml:space="preserve">
          <source>Swap the contents of a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; for a new value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; の内容を新しい値に交換します。</target>
        </trans-unit>
        <trans-unit id="27a7ce7e921ae432d26780f916950fbd4a0fa123" translate="yes" xml:space="preserve">
          <source>Swap the contents of a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; for a new value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; のコンテンツを新しい値に交換します。</target>
        </trans-unit>
        <trans-unit id="790f0a2bc12a3bf658c90383a9223f1f59c1db67" translate="yes" xml:space="preserve">
          <source>Swaps &lt;code&gt;&lt;a href=&quot;ghc-enum#v:minBound&quot;&gt;minBound&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-enum#v:maxBound&quot;&gt;maxBound&lt;/a&gt;&lt;/code&gt; of the underlying type.</source>
          <target state="translated">スワップ &lt;code&gt;&lt;a href=&quot;ghc-enum#v:minBound&quot;&gt;minBound&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;ghc-enum#v:maxBound&quot;&gt;maxBound&lt;/a&gt;&lt;/code&gt; 基本となるタイプの。</target>
        </trans-unit>
        <trans-unit id="ebda191efbe7ed2462e005d1d50e04e806f69493" translate="yes" xml:space="preserve">
          <source>Swaps &lt;code&gt;&lt;a href=&quot;prelude#v:minBound&quot;&gt;minBound&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:maxBound&quot;&gt;maxBound&lt;/a&gt;&lt;/code&gt; of the underlying type.</source>
          <target state="translated">スワップ &lt;code&gt;&lt;a href=&quot;prelude#v:minBound&quot;&gt;minBound&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;prelude#v:maxBound&quot;&gt;maxBound&lt;/a&gt;&lt;/code&gt; 基本となるタイプの。</target>
        </trans-unit>
        <trans-unit id="3c4b8d9f358f2ff51aae7a538ec11a54f6930031" translate="yes" xml:space="preserve">
          <source>Switch on all rewrite rules (including rules generated by automatic specialisation of overloaded functions). Implied by &lt;a href=&quot;using-optimisation#ghc-flag--O&quot;&gt;&lt;code&gt;-O&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての書き換えルール（オーバーロードされた関数の自動特殊化によって生成されたルールを含む）をオンにします。&lt;a href=&quot;using-optimisation#ghc-flag--O&quot;&gt; &lt;code&gt;-O&lt;/code&gt; &lt;/a&gt;によって暗示されます。</target>
        </trans-unit>
        <trans-unit id="a04b53848ca9575d58f32001c43b4ce12406c870" translate="yes" xml:space="preserve">
          <source>Switch on the strictness analyser. The implementation is described in the paper &lt;a href=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/2017/03/demand-jfp-draft.pdf&quot;&gt;Theory and Practice of Demand Analysis in Haskell&lt;/a&gt;.</source>
          <target state="translated">正格性アナライザをオンにします。実装は&lt;a href=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/2017/03/demand-jfp-draft.pdf&quot;&gt;、Haskellでの需要分析の理論と実践で&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="02d654f263c534c666ce44e6336048ef132a5d99" translate="yes" xml:space="preserve">
          <source>Switch the value of returned &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; from initial value &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; after a given number of microseconds. The caveats associated with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; also apply.</source>
          <target state="translated">指定されたマイクロ秒数後に、返された &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; の値を初期値 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; に切り替えます。 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; に関連する警告も適用されます。</target>
        </trans-unit>
        <trans-unit id="0eeb0af96c4035314f68fc54800b2cbb07932307" translate="yes" xml:space="preserve">
          <source>Switch the value of returned &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; from initial value &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; after a given number of microseconds. The caveats associated with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; also apply.</source>
          <target state="translated">返された &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; の値を、指定されたマイクロ秒数後に初期値 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; に切り替えます。 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; に関連する警告も適用されます。</target>
        </trans-unit>
        <trans-unit id="f3aba9059dfedace649b15e5e12e32c19b9b5d5f" translate="yes" xml:space="preserve">
          <source>Switch the value of returned &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; from initial value &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; after a given number of microseconds. The caveats associated with &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; also apply.</source>
          <target state="translated">返された &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; の値を、指定されたマイクロ秒数後に初期値 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; に切り替えます。 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; に関連する警告も適用されます。</target>
        </trans-unit>
        <trans-unit id="7cfbadc54deedd0db1e69f8be2474847082c0a00" translate="yes" xml:space="preserve">
          <source>Switch the value of returned &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; from initial value &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; after a given number of microseconds. The caveats associated with &lt;code&gt;&lt;a href=&quot;ghc-conc#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; also apply.</source>
          <target state="translated">指定されたマイクロ秒数後に、返された &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; の値を初期値 &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; に切り替えます。 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; に関連する警告も適用されます。</target>
        </trans-unit>
        <trans-unit id="e07d7d535fdc45f51b0b07854b267895fb591b38" translate="yes" xml:space="preserve">
          <source>Switch the value of returned &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; from initial value &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; after a given number of microseconds. The caveats associated with &lt;code&gt;&lt;a href=&quot;ghc-conc-io#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; also apply.</source>
          <target state="translated">指定されたマイクロ秒数後に、返された &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; の値を初期値 &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; に切り替えます。 &lt;code&gt;&lt;a href=&quot;ghc-conc-io#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; に関連する警告も適用されます。</target>
        </trans-unit>
        <trans-unit id="3f84ef531f9db996694ad09a8fdddbca1440577e" translate="yes" xml:space="preserve">
          <source>Symbol</source>
          <target state="translated">Symbol</target>
        </trans-unit>
        <trans-unit id="9a4a2407422f77912e71d6a50bc07b4dbe875d7d" translate="yes" xml:space="preserve">
          <source>Symbolic link name</source>
          <target state="translated">シンボリックリンク名</target>
        </trans-unit>
        <trans-unit id="1af7d6c34ea3d7825f1508a7baf71357f217a173" translate="yes" xml:space="preserve">
          <source>Symbolic links</source>
          <target state="translated">シンボリックリンク</target>
        </trans-unit>
        <trans-unit id="783361b7b59d49d71046c74299252d084b9c7882" translate="yes" xml:space="preserve">
          <source>Symbolic links are interpreted at run-time as if the contents of the link had been substituted into the path being followed to find a file or directory.</source>
          <target state="translated">シンボリックリンクは、ファイルやディレクトリを見つけるためのパスにリンクの内容が置換されているかのようにランタイムに解釈されます。</target>
        </trans-unit>
        <trans-unit id="aff7b58eb9d618c164b0172e0b642bbd7ee3bed7" translate="yes" xml:space="preserve">
          <source>Symbolic references to values.</source>
          <target state="translated">値への記号的な参照。</target>
        </trans-unit>
        <trans-unit id="6085593feb58c36d11cea09fb5b42788f1a415de" translate="yes" xml:space="preserve">
          <source>SymbolicLink</source>
          <target state="translated">SymbolicLink</target>
        </trans-unit>
        <trans-unit id="21d208078f8fa17e45f46b6a3dbd64fbee7de0c9" translate="yes" xml:space="preserve">
          <source>SymbolicLinkFlags</source>
          <target state="translated">SymbolicLinkFlags</target>
        </trans-unit>
        <trans-unit id="788f13ef423790cd39647c69cc0a0c58faa99c27" translate="yes" xml:space="preserve">
          <source>SymbolicLinkLimit</source>
          <target state="translated">SymbolicLinkLimit</target>
        </trans-unit>
        <trans-unit id="9f1776cfc9a7333966da54deeb1343c396bc5ca1" translate="yes" xml:space="preserve">
          <source>Symmetric choice.</source>
          <target state="translated">対称的な選択。</target>
        </trans-unit>
        <trans-unit id="a30db73bdbd543bd62c51cc7cbfd53abdb952bb2" translate="yes" xml:space="preserve">
          <source>Symmetry</source>
          <target state="translated">Symmetry</target>
        </trans-unit>
        <trans-unit id="c65dc38c1e7d55fb39d508e68b61f0074c4c4660" translate="yes" xml:space="preserve">
          <source>Symmetry of equality</source>
          <target state="translated">平等性の対称性</target>
        </trans-unit>
        <trans-unit id="daaae392ecd2cfcb8c9a5ad68257590b8bbdfaee" translate="yes" xml:space="preserve">
          <source>Symmetry of representational equality</source>
          <target state="translated">表現の平等性の対称性</target>
        </trans-unit>
        <trans-unit id="a9b8b1d19a51e6138d76dae280c03cb8a38abaff" translate="yes" xml:space="preserve">
          <source>SyncIOAvailable</source>
          <target state="translated">SyncIOAvailable</target>
        </trans-unit>
        <trans-unit id="78a8df308e4ac054650c3c44fc4298d45737ee3c" translate="yes" xml:space="preserve">
          <source>Synchronised mutable variables, called &lt;code&gt;MVars&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;MVars&lt;/code&gt; と呼ばれる同期された可変変数</target>
        </trans-unit>
        <trans-unit id="bb4777d71294a1975decab3266abe6d4a49ac42f" translate="yes" xml:space="preserve">
          <source>SynchronousWrites</source>
          <target state="translated">SynchronousWrites</target>
        </trans-unit>
        <trans-unit id="8c4e75e6b94ca02b13fdfea1474a5fa8bf2871da" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:-60--124-&quot;&gt;&amp;lt;|&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:-60--124-&quot;&gt;&amp;lt;|&lt;/a&gt;&lt;/code&gt; の同義語 。</target>
        </trans-unit>
        <trans-unit id="c5009b7aa8ffbb85e47c87d652e2c495fe1375d8" translate="yes" xml:space="preserve">
          <source>Synonyms for convenience</source>
          <target state="translated">便利さの同義語</target>
        </trans-unit>
        <trans-unit id="5fd831fc65c8b632816765c2116fb97599a425fe" translate="yes" xml:space="preserve">
          <source>Syntactically, an &lt;code&gt;INLINE&lt;/code&gt; pragma for a function can be put anywhere its type signature could be put.</source>
          <target state="translated">構文的には、関数の &lt;code&gt;INLINE&lt;/code&gt; プラグマは、型シグネチャを配置できる場所ならどこにでも配置できます。</target>
        </trans-unit>
        <trans-unit id="111026c4c5d52f704cc515ec3a428bac05c14bda" translate="yes" xml:space="preserve">
          <source>Syntactically, the declaration lacks the &amp;ldquo;= constrs&amp;rdquo; part. The type can be parameterised over types of any kind, but if the kind is not &lt;code&gt;Type&lt;/code&gt; then an explicit kind annotation must be used (see &lt;a href=&quot;#kinding&quot;&gt;Explicitly-kinded quantification&lt;/a&gt;).</source>
          <target state="translated">構文的には、この宣言には「= constrs」の部分がありません。タイプは任意の種類のタイプでパラメーター化できますが、種類が &lt;code&gt;Type&lt;/code&gt; でない場合は、明示的なkindアノテーションを使用する必要があります（明示的な種類の&lt;a href=&quot;#kinding&quot;&gt;数量化を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="5bd92ba797d357f7001a54b8bf917d47c8885caf" translate="yes" xml:space="preserve">
          <source>Syntactically, the declaration lacks the &amp;ldquo;= constrs&amp;rdquo; part. The type can be parameterised over types of any kind, but if the kind is not &lt;code&gt;Type&lt;/code&gt; then an explicit kind annotation must be used (see &lt;a href=&quot;kind_signatures#kinding&quot;&gt;Explicitly-kinded quantification&lt;/a&gt;).</source>
          <target state="translated">構文的には、宣言には「= constrs」の部分がありません。種類でない場合タイプはどんな種類のタイプ上にパラメータ化することができるが、 &lt;code&gt;Type&lt;/code&gt; 明示的な種類の注釈を使用する必要があり、次いで（参照&lt;a href=&quot;kind_signatures#kinding&quot;&gt;明示的kinded定量化&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="ced60300064781c174fbd8a0a8185d8ec7226f08" translate="yes" xml:space="preserve">
          <source>SysVar</source>
          <target state="translated">SysVar</target>
        </trans-unit>
        <trans-unit id="bc0792d8dc81e8aa30b987246a5ce97c40cd6833" translate="yes" xml:space="preserve">
          <source>System</source>
          <target state="translated">System</target>
        </trans-unit>
        <trans-unit id="22f626269b535be1c0e966f5cc96ffff2957b1b5" translate="yes" xml:space="preserve">
          <source>System environment</source>
          <target state="translated">システム環境</target>
        </trans-unit>
        <trans-unit id="9542bd35aa2f7ec22b0274a1a139aa8b0370e91b" translate="yes" xml:space="preserve">
          <source>System metrics</source>
          <target state="translated">システムメトリクス</target>
        </trans-unit>
        <trans-unit id="054d4da93d51f39ec2625b1a2fd9ef9d24365634" translate="yes" xml:space="preserve">
          <source>System-independent interface to directory manipulation.</source>
          <target state="translated">システムに依存しないディレクトリ操作のためのインターフェース。</target>
        </trans-unit>
        <trans-unit id="3cd94fc5a1a46ef3a6e5357bbfd94595a0395feb" translate="yes" xml:space="preserve">
          <source>System.CPUTime</source>
          <target state="translated">System.CPUTime</target>
        </trans-unit>
        <trans-unit id="abc2d555767936189fe82418dc11207d84b13f01" translate="yes" xml:space="preserve">
          <source>System.Cmd</source>
          <target state="translated">System.Cmd</target>
        </trans-unit>
        <trans-unit id="c80643d67b51d9087bf1a233ae3f8b99119d3de9" translate="yes" xml:space="preserve">
          <source>System.Console.GetOpt</source>
          <target state="translated">System.Console.GetOpt</target>
        </trans-unit>
        <trans-unit id="94c2d8456ad9d7db7535979829f620bdf7715969" translate="yes" xml:space="preserve">
          <source>System.Console.Haskeline</source>
          <target state="translated">System.Console.Haskeline</target>
        </trans-unit>
        <trans-unit id="995530c03cc406b77999512d065a39ec46d35a9f" translate="yes" xml:space="preserve">
          <source>System.Console.Haskeline.Completion</source>
          <target state="translated">System.Console.Haskeline.Completion</target>
        </trans-unit>
        <trans-unit id="a684ecdf4d5d95d72d8af3b78db64da52bff47f0" translate="yes" xml:space="preserve">
          <source>System.Console.Haskeline.History</source>
          <target state="translated">System.Console.Haskeline.History</target>
        </trans-unit>
        <trans-unit id="54886ee30a709eefbeeff00d918f48ef8511c73a" translate="yes" xml:space="preserve">
          <source>System.Console.Haskeline.IO</source>
          <target state="translated">System.Console.Haskeline.IO</target>
        </trans-unit>
        <trans-unit id="2f9f3ddd1bee8ea163a496bb15c99ac67eaf6374" translate="yes" xml:space="preserve">
          <source>System.Console.Haskeline.Internal</source>
          <target state="translated">System.Console.Haskeline.Internal</target>
        </trans-unit>
        <trans-unit id="3d1ff7ae655f9425baf34abb0fc50577afb05559" translate="yes" xml:space="preserve">
          <source>System.Console.Haskeline.MonadException</source>
          <target state="translated">System.Console.Haskeline.MonadException</target>
        </trans-unit>
        <trans-unit id="b38428bbdc0febc23724b9b6917d59dc07cd4772" translate="yes" xml:space="preserve">
          <source>System.Console.Terminfo.Base</source>
          <target state="translated">System.Console.Terminfo.Base</target>
        </trans-unit>
        <trans-unit id="f0530b93c36300df420c73051cf5d07524a2cd9e" translate="yes" xml:space="preserve">
          <source>System.Console.Terminfo.Color</source>
          <target state="translated">System.Console.Terminfo.Color</target>
        </trans-unit>
        <trans-unit id="8720cecc6bce59d2d1b27f650fff474071f33a34" translate="yes" xml:space="preserve">
          <source>System.Console.Terminfo.Cursor</source>
          <target state="translated">System.Console.Terminfo.Cursor</target>
        </trans-unit>
        <trans-unit id="a30e7d7d690dc83e7411bcf1cfa0738ae0ea6724" translate="yes" xml:space="preserve">
          <source>System.Console.Terminfo.Edit</source>
          <target state="translated">System.Console.Terminfo.Edit</target>
        </trans-unit>
        <trans-unit id="b42df4bf6e0e3dbffae5ad7025449b91817b472a" translate="yes" xml:space="preserve">
          <source>System.Console.Terminfo.Effects</source>
          <target state="translated">System.Console.Terminfo.Effects</target>
        </trans-unit>
        <trans-unit id="caf0cb118af26fb3d6c8a384d366d0d181635bfb" translate="yes" xml:space="preserve">
          <source>System.Console.Terminfo.Keys</source>
          <target state="translated">System.Console.Terminfo.Keys</target>
        </trans-unit>
        <trans-unit id="11c2831a9056f8ddbe33dd4b68973289a4922bc9" translate="yes" xml:space="preserve">
          <source>System.Directory</source>
          <target state="translated">System.Directory</target>
        </trans-unit>
        <trans-unit id="2231e02df58e07096e144b5dd37896c98561a1ce" translate="yes" xml:space="preserve">
          <source>System.Directory.Internal</source>
          <target state="translated">System.Directory.Internal</target>
        </trans-unit>
        <trans-unit id="bf7d731a3526683fd629e32ccc3301b8cd716809" translate="yes" xml:space="preserve">
          <source>System.Directory.Internal.Prelude</source>
          <target state="translated">System.Directory.Internal.Prelude</target>
        </trans-unit>
        <trans-unit id="e21d345f344bfeaa3d9d66b3283c404541cdc3c0" translate="yes" xml:space="preserve">
          <source>System.Environment</source>
          <target state="translated">System.Environment</target>
        </trans-unit>
        <trans-unit id="0682f5d14b13bf07429dea7469e3c899f29deabf" translate="yes" xml:space="preserve">
          <source>System.Environment.Blank</source>
          <target state="translated">System.Environment.Blank</target>
        </trans-unit>
        <trans-unit id="6953b81e8a3a09467269ca7c82603f7cd5beec76" translate="yes" xml:space="preserve">
          <source>System.Exit</source>
          <target state="translated">System.Exit</target>
        </trans-unit>
        <trans-unit id="d08a9c01ae30c3d75533db9568bfa6bd75ed9d5a" translate="yes" xml:space="preserve">
          <source>System.FilePath.Posix</source>
          <target state="translated">System.FilePath.Posix</target>
        </trans-unit>
        <trans-unit id="9345ab5d2c1dc96d733c628fcb0d3f1eafabe3db" translate="yes" xml:space="preserve">
          <source>System.FilePath.Windows</source>
          <target state="translated">System.FilePath.Windows</target>
        </trans-unit>
        <trans-unit id="e506c53144a5eb9430973dbf3945a01b65e458c8" translate="yes" xml:space="preserve">
          <source>System.IO</source>
          <target state="translated">System.IO</target>
        </trans-unit>
        <trans-unit id="f14994a07ba5c1fead4e1586350fd2f9f21b59ac" translate="yes" xml:space="preserve">
          <source>System.IO.Error</source>
          <target state="translated">System.IO.Error</target>
        </trans-unit>
        <trans-unit id="e6c221935a69c687e42cd4035eb242d37e0bc15d" translate="yes" xml:space="preserve">
          <source>System.IO.Unsafe</source>
          <target state="translated">System.IO.Unsafe</target>
        </trans-unit>
        <trans-unit id="4419a80c9771611849683123ba04940c8af31934" translate="yes" xml:space="preserve">
          <source>System.Info</source>
          <target state="translated">System.Info</target>
        </trans-unit>
        <trans-unit id="3617a3cadbc5a5ec3cfc9d65ecc01945d52eb407" translate="yes" xml:space="preserve">
          <source>System.Mem</source>
          <target state="translated">System.Mem</target>
        </trans-unit>
        <trans-unit id="6c9fd4d2bf1355b803db6cbe5d56252ee1742a6f" translate="yes" xml:space="preserve">
          <source>System.Mem.StableName</source>
          <target state="translated">System.Mem.StableName</target>
        </trans-unit>
        <trans-unit id="ac63ef484f855a177f2a757712147bfca196e486" translate="yes" xml:space="preserve">
          <source>System.Mem.Weak</source>
          <target state="translated">System.Mem.Weak</target>
        </trans-unit>
        <trans-unit id="ff9de231a8350dc1875fefc39446441429733a49" translate="yes" xml:space="preserve">
          <source>System.Posix</source>
          <target state="translated">System.Posix</target>
        </trans-unit>
        <trans-unit id="3cf8346d50b6c4a7d2803333b7d5081b7651d6d0" translate="yes" xml:space="preserve">
          <source>System.Posix.ByteString</source>
          <target state="translated">System.Posix.ByteString</target>
        </trans-unit>
        <trans-unit id="615b349e99f89ae638c9bbfee8d35110bc55e372" translate="yes" xml:space="preserve">
          <source>System.Posix.ByteString.FilePath</source>
          <target state="translated">System.Posix.ByteString.FilePath</target>
        </trans-unit>
        <trans-unit id="839c186633a65e67330b131f125358fae81aa060" translate="yes" xml:space="preserve">
          <source>System.Posix.Directory</source>
          <target state="translated">System.Posix.Directory</target>
        </trans-unit>
        <trans-unit id="5a3b5e49d6b16b646df6df41ead9202c77b9bef0" translate="yes" xml:space="preserve">
          <source>System.Posix.Directory.ByteString</source>
          <target state="translated">System.Posix.Directory.ByteString</target>
        </trans-unit>
        <trans-unit id="bca5aa52215960fa4b05ae4e363825a04f9aa221" translate="yes" xml:space="preserve">
          <source>System.Posix.DynamicLinker</source>
          <target state="translated">System.Posix.DynamicLinker</target>
        </trans-unit>
        <trans-unit id="77f11246dec1a6540247cbe70a18bcc1f279f73d" translate="yes" xml:space="preserve">
          <source>System.Posix.DynamicLinker.ByteString</source>
          <target state="translated">System.Posix.DynamicLinker.ByteString</target>
        </trans-unit>
        <trans-unit id="eb9f2c4c4cf862c1683a5ce26af6cc931dacac14" translate="yes" xml:space="preserve">
          <source>System.Posix.DynamicLinker.Prim</source>
          <target state="translated">System.Posix.DynamicLinker.Prim</target>
        </trans-unit>
        <trans-unit id="7012264b990a89bac3be5d6ca05099972d043ade" translate="yes" xml:space="preserve">
          <source>System.Posix.Env</source>
          <target state="translated">System.Posix.Env</target>
        </trans-unit>
        <trans-unit id="d85b248583f751494f8005b88043518e74818eb6" translate="yes" xml:space="preserve">
          <source>System.Posix.Env.ByteString</source>
          <target state="translated">System.Posix.Env.ByteString</target>
        </trans-unit>
        <trans-unit id="9d076155d3a24a5f2de23d788d4abcd046d5e3ae" translate="yes" xml:space="preserve">
          <source>System.Posix.Error</source>
          <target state="translated">System.Posix.Error</target>
        </trans-unit>
        <trans-unit id="fd09872967b2ac3194c5fc4696d20d385a7860cf" translate="yes" xml:space="preserve">
          <source>System.Posix.Fcntl</source>
          <target state="translated">System.Posix.Fcntl</target>
        </trans-unit>
        <trans-unit id="8b9dfa6855c09b97391250383b5e8b726a1e9368" translate="yes" xml:space="preserve">
          <source>System.Posix.Files</source>
          <target state="translated">System.Posix.Files</target>
        </trans-unit>
        <trans-unit id="3f16b041c6b93909cffec51a79153fc2127e2847" translate="yes" xml:space="preserve">
          <source>System.Posix.Files.ByteString</source>
          <target state="translated">System.Posix.Files.ByteString</target>
        </trans-unit>
        <trans-unit id="22826d441bec239829da5b7727f84d6d3b1133c0" translate="yes" xml:space="preserve">
          <source>System.Posix.IO</source>
          <target state="translated">System.Posix.IO</target>
        </trans-unit>
        <trans-unit id="18c8e2232b9cdd0cf3ebd5fa88f48eca9614e2e6" translate="yes" xml:space="preserve">
          <source>System.Posix.IO.ByteString</source>
          <target state="translated">System.Posix.IO.ByteString</target>
        </trans-unit>
        <trans-unit id="0e75686cfcd84fcb1d09bd17aae8a371c23e513a" translate="yes" xml:space="preserve">
          <source>System.Posix.Process</source>
          <target state="translated">System.Posix.Process</target>
        </trans-unit>
        <trans-unit id="a2480310db25045522aaedbac979f4e3b09ed4f7" translate="yes" xml:space="preserve">
          <source>System.Posix.Process.ByteString</source>
          <target state="translated">System.Posix.Process.ByteString</target>
        </trans-unit>
        <trans-unit id="3d04fba1f9cd86e6a65d2fe8eeafe107cd69e871" translate="yes" xml:space="preserve">
          <source>System.Posix.Resource</source>
          <target state="translated">System.Posix.Resource</target>
        </trans-unit>
        <trans-unit id="51c71a3d3a66769026e6df46a54a73309e13f961" translate="yes" xml:space="preserve">
          <source>System.Posix.Semaphore</source>
          <target state="translated">System.Posix.Semaphore</target>
        </trans-unit>
        <trans-unit id="ac81966f5a16d6c1c0e69ed22750af2629c3fae8" translate="yes" xml:space="preserve">
          <source>System.Posix.SharedMem</source>
          <target state="translated">System.Posix.SharedMem</target>
        </trans-unit>
        <trans-unit id="3d33e9b08ac0cb85ad23dc6f05061d5b85066a26" translate="yes" xml:space="preserve">
          <source>System.Posix.Signals</source>
          <target state="translated">System.Posix.Signals</target>
        </trans-unit>
        <trans-unit id="bb04d0378c3bdc451f4e9aa993deb76622436b73" translate="yes" xml:space="preserve">
          <source>System.Posix.Temp</source>
          <target state="translated">System.Posix.Temp</target>
        </trans-unit>
        <trans-unit id="d0851806197ca7004c5d22b8345141db932aaaf7" translate="yes" xml:space="preserve">
          <source>System.Posix.Temp.ByteString</source>
          <target state="translated">System.Posix.Temp.ByteString</target>
        </trans-unit>
        <trans-unit id="b09408e86331461a71180d769c64b1a1e47eeb55" translate="yes" xml:space="preserve">
          <source>System.Posix.Terminal</source>
          <target state="translated">System.Posix.Terminal</target>
        </trans-unit>
        <trans-unit id="870614aa5a0cdaab31cb71eae42b2b0cb05f0acb" translate="yes" xml:space="preserve">
          <source>System.Posix.Terminal.ByteString</source>
          <target state="translated">System.Posix.Terminal.ByteString</target>
        </trans-unit>
        <trans-unit id="c0e3de00081dd59744fcaeb8b4867250ed4b1d63" translate="yes" xml:space="preserve">
          <source>System.Posix.Time</source>
          <target state="translated">System.Posix.Time</target>
        </trans-unit>
        <trans-unit id="65da21e1dd4c609c1a9f47d74327799512873aad" translate="yes" xml:space="preserve">
          <source>System.Posix.Types</source>
          <target state="translated">System.Posix.Types</target>
        </trans-unit>
        <trans-unit id="372a2b6602a17fa2360b51ad286e668b23423aba" translate="yes" xml:space="preserve">
          <source>System.Posix.Unistd</source>
          <target state="translated">System.Posix.Unistd</target>
        </trans-unit>
        <trans-unit id="34810d7b3b44d620826a9004dc0e5f29f8060ad2" translate="yes" xml:space="preserve">
          <source>System.Posix.User</source>
          <target state="translated">System.Posix.User</target>
        </trans-unit>
        <trans-unit id="2f1f00ef514b8a51d9e31107436a2fadecf66e3a" translate="yes" xml:space="preserve">
          <source>System.Process</source>
          <target state="translated">System.Process</target>
        </trans-unit>
        <trans-unit id="3674625325b086997e3b8bdb4b942a52193dbf8d" translate="yes" xml:space="preserve">
          <source>System.Process.Internals</source>
          <target state="translated">System.Process.Internals</target>
        </trans-unit>
        <trans-unit id="f1d0016b14caeb58ea97185a11bffc8f1b11451e" translate="yes" xml:space="preserve">
          <source>System.Timeout</source>
          <target state="translated">System.Timeout</target>
        </trans-unit>
        <trans-unit id="fa140aad200d97695f84bf85abb63a17293dd672" translate="yes" xml:space="preserve">
          <source>System.Win32</source>
          <target state="translated">System.Win32</target>
        </trans-unit>
        <trans-unit id="414f69cf4731ac1ba88cdb13dba547656cf1b29c" translate="yes" xml:space="preserve">
          <source>System.Win32.Automation.Input</source>
          <target state="translated">System.Win32.Automation.Input</target>
        </trans-unit>
        <trans-unit id="75709f84f78171e47b532b82a0fbbe8bc1e08692" translate="yes" xml:space="preserve">
          <source>System.Win32.Console</source>
          <target state="translated">System.Win32.Console</target>
        </trans-unit>
        <trans-unit id="5d3b2aa714514fda846675252ec6852b1e3d17f9" translate="yes" xml:space="preserve">
          <source>System.Win32.Console.CtrlHandler</source>
          <target state="translated">System.Win32.Console.CtrlHandler</target>
        </trans-unit>
        <trans-unit id="f096899037f3e974d013f5997b2831c5300d2cb1" translate="yes" xml:space="preserve">
          <source>System.Win32.Console.HWND</source>
          <target state="translated">System.Win32.Console.HWND</target>
        </trans-unit>
        <trans-unit id="41a35e001877340a7eb5d9fc7e67e59fe2abb4cc" translate="yes" xml:space="preserve">
          <source>System.Win32.Encoding</source>
          <target state="translated">System.Win32.Encoding</target>
        </trans-unit>
        <trans-unit id="66112b6d5cadbf608f5cd52ef12708bb3b252bc2" translate="yes" xml:space="preserve">
          <source>System.Win32.File</source>
          <target state="translated">System.Win32.File</target>
        </trans-unit>
        <trans-unit id="2095f23b33e7b9883a33cd535b5a08c23ad182d2" translate="yes" xml:space="preserve">
          <source>System.Win32.FileMapping</source>
          <target state="translated">System.Win32.FileMapping</target>
        </trans-unit>
        <trans-unit id="d73afd581990396c86d0f828e422efce382953f7" translate="yes" xml:space="preserve">
          <source>System.Win32.HardLink</source>
          <target state="translated">System.Win32.HardLink</target>
        </trans-unit>
        <trans-unit id="ad3fe0641322a90efb9d6f6bcc1b642f286a6068" translate="yes" xml:space="preserve">
          <source>System.Win32.Info.Computer</source>
          <target state="translated">System.Win32.Info.Computer</target>
        </trans-unit>
        <trans-unit id="e7cbd6f609063d2fbbea58646f57624041dc6fa9" translate="yes" xml:space="preserve">
          <source>System.Win32.Info.Version</source>
          <target state="translated">System.Win32.Info.Version</target>
        </trans-unit>
        <trans-unit id="b3bf2730645f2e3a415e64c3d5d248b5dc815140" translate="yes" xml:space="preserve">
          <source>System.Win32.MinTTY</source>
          <target state="translated">System.Win32.MinTTY</target>
        </trans-unit>
        <trans-unit id="e6d32a80127bc26de0ea4f3f6100d936dbac372e" translate="yes" xml:space="preserve">
          <source>System.Win32.NLS</source>
          <target state="translated">System.Win32.NLS</target>
        </trans-unit>
        <trans-unit id="773e9bbcf1f71ef20e54313cffbf86abf337dc71" translate="yes" xml:space="preserve">
          <source>System.Win32.Process</source>
          <target state="translated">System.Win32.Process</target>
        </trans-unit>
        <trans-unit id="1b0b0e5dfb19bff80fb1189d9b41bff8ceaacc1b" translate="yes" xml:space="preserve">
          <source>System.Win32.Registry</source>
          <target state="translated">System.Win32.Registry</target>
        </trans-unit>
        <trans-unit id="923aeaa600aee8a79d1f2ddee37447444712bc2a" translate="yes" xml:space="preserve">
          <source>System.Win32.Security</source>
          <target state="translated">System.Win32.Security</target>
        </trans-unit>
        <trans-unit id="60a4407d0e475e148aadd205cc69e995817d6bcc" translate="yes" xml:space="preserve">
          <source>System.Win32.SimpleMAPI</source>
          <target state="translated">System.Win32.SimpleMAPI</target>
        </trans-unit>
        <trans-unit id="4413d5194e6ad6774ef578e46350e454f43dbdc7" translate="yes" xml:space="preserve">
          <source>System.Win32.String</source>
          <target state="translated">System.Win32.String</target>
        </trans-unit>
        <trans-unit id="9f1c463c538ca39643a8017b215c963a6f077f2f" translate="yes" xml:space="preserve">
          <source>System.Win32.SymbolicLink</source>
          <target state="translated">System.Win32.SymbolicLink</target>
        </trans-unit>
        <trans-unit id="cd93fa66a20bf4df736ed9cc81adf625096902ac" translate="yes" xml:space="preserve">
          <source>System.Win32.Types</source>
          <target state="translated">System.Win32.Types</target>
        </trans-unit>
        <trans-unit id="1a22699e906f0cbad54a648440b242757ba8bd85" translate="yes" xml:space="preserve">
          <source>System.Win32.Utils</source>
          <target state="translated">System.Win32.Utils</target>
        </trans-unit>
        <trans-unit id="47e68638ef3b94e3c34563e1179f97e827fb9bec" translate="yes" xml:space="preserve">
          <source>SystemError</source>
          <target state="translated">SystemError</target>
        </trans-unit>
        <trans-unit id="268b2a7b07a0ad87688e0007102a12e89748562a" translate="yes" xml:space="preserve">
          <source>SystemID</source>
          <target state="translated">SystemID</target>
        </trans-unit>
        <trans-unit id="cf2a95ca758b8bdeeb2ecf600f0df3a984af4e8f" translate="yes" xml:space="preserve">
          <source>SystemTime</source>
          <target state="translated">SystemTime</target>
        </trans-unit>
        <trans-unit id="851bce85512645682970d2b5fe17d9d43c9de283" translate="yes" xml:space="preserve">
          <source>Systems such as information flow control security, capability based security systems and DSLs for working with encrypted data.. etc can be built in the Haskell language as a library. However they require guarantees about the properties of Haskell that aren&amp;rsquo;t true in general due to the presence of functions like &lt;code&gt;unsafePerformIO&lt;/code&gt;. Safe Haskell gives users enough guarantees about the type system to allow them to build such secure systems.</source>
          <target state="translated">情報フロー制御セキュリティ、機能ベースのセキュリティシステム、暗号化されたデータを操作するためのDSLなどのシステムは、Haskell言語でライブラリとして構築できます。ただし、それらには、 &lt;code&gt;unsafePerformIO&lt;/code&gt; などの関数が存在するため、Haskellのプロパティに関する保証が必要です。Safe Haskellは、ユーザーが型システムについて十分な保証を提供し、そのような安全なシステムを構築できるようにします。</target>
        </trans-unit>
        <trans-unit id="74319ad714357112b950fcacee0295caa8b354ea" translate="yes" xml:space="preserve">
          <source>TAI - UTC during this day. No table is provided, as any program compiled with it would become out of date in six months.</source>
          <target state="translated">TAI-この日のUTC。これを使ってコンパイルされたプログラムは半年後には古くなってしまうため、表は提供されていません。</target>
        </trans-unit>
        <trans-unit id="1727e72b5c5ad211de6825534794a74df1a1a413" translate="yes" xml:space="preserve">
          <source>TAI and leap-second maps for converting to UTC: most people won't need this module.</source>
          <target state="translated">UTCに変換するためのTAIと閏秒マップ:ほとんどの人はこのモジュールを必要としません。</target>
        </trans-unit>
        <trans-unit id="9b62e74d4806b8741ec136d2ab4f7a33bba92e70" translate="yes" xml:space="preserve">
          <source>TAI clock, if it exists. Note that it is unlikely to be set correctly, without due care and attention.</source>
          <target state="translated">TAIクロックがあれば、それを使用してください。注意しないと正しく設定できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="ea7d3c18994e2490c462241ebe25179ce7ebd3bc" translate="yes" xml:space="preserve">
          <source>TArray</source>
          <target state="translated">TArray</target>
        </trans-unit>
        <trans-unit id="c84c024ccfb745d3cd171eb6af01cfd3bc8684cb" translate="yes" xml:space="preserve">
          <source>TArray is a transactional array, supporting the usual &lt;code&gt;&lt;a href=&quot;../array-0.5.4.0/data-array-marray#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; interface for mutable arrays.</source>
          <target state="translated">TArrayはトランザクション配列であり、可変配列の通常の &lt;code&gt;&lt;a href=&quot;../array-0.5.4.0/data-array-marray#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; インターフェイスをサポートしています。</target>
        </trans-unit>
        <trans-unit id="10f16ce6fbbc23c8f857fdac0d27ba4eb31ec913" translate="yes" xml:space="preserve">
          <source>TBQueue</source>
          <target state="translated">TBQueue</target>
        </trans-unit>
        <trans-unit id="1eb5affcfc085f437d0186c927dcc74b9e2e4fbb" translate="yes" xml:space="preserve">
          <source>TCHAR</source>
          <target state="translated">TCHAR</target>
        </trans-unit>
        <trans-unit id="fda90d9eef3786d8353f1a1a0101c2994f16dc3e" translate="yes" xml:space="preserve">
          <source>TCIOFF</source>
          <target state="translated">TCIOFF</target>
        </trans-unit>
        <trans-unit id="33b459f201eb7b79961025dfa1eb8056af66b395" translate="yes" xml:space="preserve">
          <source>TCION</source>
          <target state="translated">TCION</target>
        </trans-unit>
        <trans-unit id="91b82e688ad4a91a8f8d35942bfb1b0267a2bc12" translate="yes" xml:space="preserve">
          <source>TCOOFF</source>
          <target state="translated">TCOOFF</target>
        </trans-unit>
        <trans-unit id="458745b27d48d51cbe1818f94471b17912d468ed" translate="yes" xml:space="preserve">
          <source>TCOON</source>
          <target state="translated">TCOON</target>
        </trans-unit>
        <trans-unit id="b0b62257759bc2acc58f041228bc720d599dfd23" translate="yes" xml:space="preserve">
          <source>TChan</source>
          <target state="translated">TChan</target>
        </trans-unit>
        <trans-unit id="9d004963a17f54a22663ca06e4dc245e834f954b" translate="yes" xml:space="preserve">
          <source>TChans</source>
          <target state="translated">TChans</target>
        </trans-unit>
        <trans-unit id="f78b01a61a63053d8f5ba0765d223c8c30a0c824" translate="yes" xml:space="preserve">
          <source>TEMP environment variable.</source>
          <target state="translated">TEMP 環境変数。</target>
        </trans-unit>
        <trans-unit id="77d01d4400641cd13772b447d053178042a5b9f8" translate="yes" xml:space="preserve">
          <source>TExp</source>
          <target state="translated">TExp</target>
        </trans-unit>
        <trans-unit id="ffc50102cf77faab4bd8d11769fb4a9db711a702" translate="yes" xml:space="preserve">
          <source>TExpQ</source>
          <target state="translated">TExpQ</target>
        </trans-unit>
        <trans-unit id="bf532ec46446db37cd9e4a9a9e0a0ca2b9cf4069" translate="yes" xml:space="preserve">
          <source>THAnnWrapper</source>
          <target state="translated">THAnnWrapper</target>
        </trans-unit>
        <trans-unit id="038851b817b9b84caf352b988e893435568ae800" translate="yes" xml:space="preserve">
          <source>THDec</source>
          <target state="translated">THDec</target>
        </trans-unit>
        <trans-unit id="badeede43ed54cb619ce6c3b76094dd5c7488268" translate="yes" xml:space="preserve">
          <source>THExp</source>
          <target state="translated">THExp</target>
        </trans-unit>
        <trans-unit id="09029e3cebd49b033df6c5bea1ca322d10d6934c" translate="yes" xml:space="preserve">
          <source>THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY COURT OF THE UNIVERSITY OF GLASGOW AND THE CONTRIBUTORS &amp;ldquo;AS IS&amp;rdquo; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY COURT OF THE UNIVERSITY OF GLASGOW OR THE CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</source>
          <target state="translated">このソフトウェアは、グラスゴー大学の大学裁判所および寄稿者によって「現状有姿」で提供され、商品性および特定目的への適合性の黙示の保証を含むがこれに限定されない、明示または黙示の保証があります。いかなる場合も、グラスゴー大学の大学裁判所または寄稿者は、直接的、間接的、偶発的、特別、模範的、または結果的な損害（代替商品またはサービスの調達を含むがこれに限定されない）に対して責任を負わないものとします。 、データ、または利益、またはビジネスの中断）ただし、契約、無過失責任、または不法行為（過失またはその他を含む）にかかわらず、このソフトウェアの使用から生じた場合でも、責任の理論に基づいて引き起こされます。そのような損害の可能性。</target>
        </trans-unit>
        <trans-unit id="ea60d3ac9972fdc020e7c91d19f18f48686c8c5a" translate="yes" xml:space="preserve">
          <source>THMessage</source>
          <target state="translated">THMessage</target>
        </trans-unit>
        <trans-unit id="dff6bb8e59ff4feee5b2c3a461ab059b8e32e9ea" translate="yes" xml:space="preserve">
          <source>THMsg</source>
          <target state="translated">THMsg</target>
        </trans-unit>
        <trans-unit id="2a19baa88a31d713903f96a9d03e694a78c0eb00" translate="yes" xml:space="preserve">
          <source>THPat</source>
          <target state="translated">THPat</target>
        </trans-unit>
        <trans-unit id="aaa0285fa41dd2a2d13544b874effeb1204519cb" translate="yes" xml:space="preserve">
          <source>THResult</source>
          <target state="translated">THResult</target>
        </trans-unit>
        <trans-unit id="f80a9d51dc48677f6d6e0e07a50d560ec6c5a50c" translate="yes" xml:space="preserve">
          <source>THResultType</source>
          <target state="translated">THResultType</target>
        </trans-unit>
        <trans-unit id="f1239fbccf0f921ceee38368839375fffd40c686" translate="yes" xml:space="preserve">
          <source>THType</source>
          <target state="translated">THType</target>
        </trans-unit>
        <trans-unit id="9f8f499f0f42ab20ff0659d3dce21f141749ef81" translate="yes" xml:space="preserve">
          <source>TMP environment variable.</source>
          <target state="translated">TMPの環境変数です。</target>
        </trans-unit>
        <trans-unit id="1ed48a41abbc149594d26db97fa4773fef889eb2" translate="yes" xml:space="preserve">
          <source>TMVar</source>
          <target state="translated">TMVar</target>
        </trans-unit>
        <trans-unit id="977a7d57f19d844873125a2f1ca576764e2a543e" translate="yes" xml:space="preserve">
          <source>TMVars</source>
          <target state="translated">TMVars</target>
        </trans-unit>
        <trans-unit id="b698c11e84460ed5999bfeb5cbf25b865c238f3c" translate="yes" xml:space="preserve">
          <source>TODO</source>
          <target state="translated">TODO</target>
        </trans-unit>
        <trans-unit id="94f2cc6c9faca722da7d41fc06a5344c540ba432" translate="yes" xml:space="preserve">
          <source>TODO.</source>
          <target state="translated">TODO.</target>
        </trans-unit>
        <trans-unit id="5189c0462a327407842c657829fb8cfcdcee04ca" translate="yes" xml:space="preserve">
          <source>TQList</source>
          <target state="translated">TQList</target>
        </trans-unit>
        <trans-unit id="c9f4ed3ab0090df5294277bfc9635ecd16c9294d" translate="yes" xml:space="preserve">
          <source>TQNil</source>
          <target state="translated">TQNil</target>
        </trans-unit>
        <trans-unit id="5e8112b9bc7d573e0132a346e4f69b74ded60a70" translate="yes" xml:space="preserve">
          <source>TQueue</source>
          <target state="translated">TQueue</target>
        </trans-unit>
        <trans-unit id="33e8a7fb34109ea263f4e125202073824c4c8b68" translate="yes" xml:space="preserve">
          <source>TSem</source>
          <target state="translated">TSem</target>
        </trans-unit>
        <trans-unit id="4464b8e4a039bf6559ad424da8e3e745adcd64af" translate="yes" xml:space="preserve">
          <source>TVar</source>
          <target state="translated">TVar</target>
        </trans-unit>
        <trans-unit id="d2c1f866346f095c2573a4945b2e554e4287937b" translate="yes" xml:space="preserve">
          <source>TVar#</source>
          <target state="translated">TVar#</target>
        </trans-unit>
        <trans-unit id="ea0172c0f81612a2096348aa35563dc56d777a10" translate="yes" xml:space="preserve">
          <source>TVars</source>
          <target state="translated">TVars</target>
        </trans-unit>
        <trans-unit id="6e9816a8e9d0388eecdb52866188c04e75e4b1b3" translate="yes" xml:space="preserve">
          <source>TYPE</source>
          <target state="translated">TYPE</target>
        </trans-unit>
        <trans-unit id="8b7a73938e078907cbcaa328110155ded5994f28" translate="yes" xml:space="preserve">
          <source>Tab stops are the size of a tab in the provided &lt;em&gt;line:column&lt;/em&gt; values.</source>
          <target state="translated">タブストップは、提供された&lt;em&gt;line：column&lt;/em&gt;値のタブのサイズです。</target>
        </trans-unit>
        <trans-unit id="0424f6e7026fa4bc2c4a7043083417315113c79b" translate="yes" xml:space="preserve">
          <source>Table</source>
          <target state="translated">Table</target>
        </trans-unit>
        <trans-unit id="78f5f5dd09ff7a5e934419029673c218534f2b15" translate="yes" xml:space="preserve">
          <source>Table combinators for XHTML.</source>
          <target state="translated">XHTML用のテーブルコンビネータ。</target>
        </trans-unit>
        <trans-unit id="80d8dd8f19975ebde18e5655c0adff4ea370a112" translate="yes" xml:space="preserve">
          <source>Table indexed by a contiguous set of vertices.</source>
          <target state="translated">頂点の連続した集合で索引付けされたテーブル。</target>
        </trans-unit>
        <trans-unit id="982963c1c41cbed8cab073724749592fe35c532b" translate="yes" xml:space="preserve">
          <source>Tag</source>
          <target state="translated">Tag</target>
        </trans-unit>
        <trans-unit id="3c85b45a7de3b7201de5d83d204a225914dd2b80" translate="yes" xml:space="preserve">
          <source>Tag for K1: recursion (of kind &lt;code&gt;Type&lt;/code&gt;)</source>
          <target state="translated">K1のタグ：（種類 &lt;code&gt;Type&lt;/code&gt; の）再帰</target>
        </trans-unit>
        <trans-unit id="e972fe06be2cdde81f3a01b7d99768480021a3c4" translate="yes" xml:space="preserve">
          <source>Tag for M1: constructor</source>
          <target state="translated">M1用タグ:コンストラクタ</target>
        </trans-unit>
        <trans-unit id="592655fa52c225437f9b7c4bff055c1860aa44b8" translate="yes" xml:space="preserve">
          <source>Tag for M1: datatype</source>
          <target state="translated">M1用タグ:データ型</target>
        </trans-unit>
        <trans-unit id="13d0d11f8436482da878107e6ab575c238f46af8" translate="yes" xml:space="preserve">
          <source>Tag for M1: record selector</source>
          <target state="translated">M1のタグ:レコードセレクター</target>
        </trans-unit>
        <trans-unit id="817a37a1c4c69025d120d3d790bfd3a7c57c08a1" translate="yes" xml:space="preserve">
          <source>Tag:</source>
          <target state="translated">Tag:</target>
        </trans-unit>
        <trans-unit id="fa463232bf447f8bacd0d6f66b5937149f02d14f" translate="yes" xml:space="preserve">
          <source>TaggedQueue</source>
          <target state="translated">TaggedQueue</target>
        </trans-unit>
        <trans-unit id="80af165ded52eb5f823b06e8e7198b1e25fbc5da" translate="yes" xml:space="preserve">
          <source>Take a FilePath and make it valid; does not change already valid FilePaths.</source>
          <target state="translated">FilePathを取得してそれを有効にします。</target>
        </trans-unit>
        <trans-unit id="4a723fc39dcf4377dc0d11aafd6f849c739325aa" translate="yes" xml:space="preserve">
          <source>Take a given number of elements in order, beginning with the smallest ones.</source>
          <target state="translated">小さいものから順に、与えられた数の要素を取ります。</target>
        </trans-unit>
        <trans-unit id="430d666fb3c9c0e08a2be91c56b9433434f51150" translate="yes" xml:space="preserve">
          <source>Take a given number of entries in key order, beginning with the smallest keys.</source>
          <target state="translated">与えられた数のエントリを、小さいキーから順に取得します。</target>
        </trans-unit>
        <trans-unit id="9587c5ae4ea1a4fbd4bab86f98fb889083a0db82" translate="yes" xml:space="preserve">
          <source>Take a string, split it on the &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:searchPathSeparator&quot;&gt;searchPathSeparator&lt;/a&gt;&lt;/code&gt; character. Blank items are ignored on Windows, and converted to &lt;code&gt;.&lt;/code&gt; on Posix. On Windows path elements are stripped of quotes.</source>
          <target state="translated">文字列を &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:searchPathSeparator&quot;&gt;searchPathSeparator&lt;/a&gt;&lt;/code&gt; し、それをsearchPathSeparator文字で分割します。Windowsでは空白のアイテムは無視され、に変換され &lt;code&gt;.&lt;/code&gt; Posixで。Windowsでは、パス要素から引用符が取り除かれます。</target>
        </trans-unit>
        <trans-unit id="80240e9aba0721fddd38fea701f84cdb2e1f6e0b" translate="yes" xml:space="preserve">
          <source>Take a string, split it on the &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:searchPathSeparator&quot;&gt;searchPathSeparator&lt;/a&gt;&lt;/code&gt; character. Blank items are ignored on Windows, and converted to &lt;code&gt;.&lt;/code&gt; on Posix. On Windows path elements are stripped of quotes.</source>
          <target state="translated">文字列を &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:searchPathSeparator&quot;&gt;searchPathSeparator&lt;/a&gt;&lt;/code&gt; し、それをsearchPathSeparator文字で分割します。Windowsでは空白のアイテムは無視され、に変換され &lt;code&gt;.&lt;/code&gt; Posixで。Windowsでは、パス要素から引用符が取り除かれます。</target>
        </trans-unit>
        <trans-unit id="1d8280d5e368da252b3055a1416972cdcbb48aa9" translate="yes" xml:space="preserve">
          <source>Take a value from an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;, put a new value into the &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; and return the value taken. This function is atomic only if there are no other producers for this &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; から値を取得し、MVarに新しい値を入力して、 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; した値を返します。この関数は、この &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; のプロデューサーが他にない場合にのみアトミックです。</target>
        </trans-unit>
        <trans-unit id="8bddc3bc632e48c7b7df71bdce026a23e42c19ce" translate="yes" xml:space="preserve">
          <source>Take, for example,</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="7004c356a6391cdc61b111e2dfbd22378fd51474" translate="yes" xml:space="preserve">
          <source>Take, for example, the following program</source>
          <target state="translated">例えば、次のようなプログラムを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="4397c207b3f93f72f76adcda5a12f1ef685122e8" translate="yes" xml:space="preserve">
          <source>Takes a value of type &lt;code&gt;a&lt;/code&gt; and returns a concrete representation of that type.</source>
          <target state="translated">型の値がとり &lt;code&gt;a&lt;/code&gt; 、そのタイプの具体的な表現を返します。</target>
        </trans-unit>
        <trans-unit id="9c14b0726bc4a4cfe19a274b23d1058099f497a9" translate="yes" xml:space="preserve">
          <source>Takes an array and a list of pairs and returns an array identical to the left argument except that it has been updated by the associations in the right argument. For example, if m is a 1-origin, n by n matrix, then &lt;code&gt;m//[((i,i), 0) | i &amp;lt;- [1..n]]&lt;/code&gt; is the same matrix, except with the diagonal zeroed.</source>
          <target state="translated">配列とペアのリストを取り、右側の引数の関連付けによって更新されたことを除いて、左側の引数と同じ配列を返します。たとえば、mが1から始まるn行n列の行列の場合、 &lt;code&gt;m//[((i,i), 0) | i &amp;lt;- [1..n]]&lt;/code&gt; は、対角ゼロの場合を除いて同じ行列です。</target>
        </trans-unit>
        <trans-unit id="45445e57054c85ae00f410a0c1de20f4a944e380" translate="yes" xml:space="preserve">
          <source>Takes high word of dividend, then low word of dividend, then divisor. Requires that high word &amp;lt; divisor.</source>
          <target state="translated">高い配当の言葉、次に低い配当の言葉、そして除数を取ります。その高い単語&amp;lt;除数が必要です。</target>
        </trans-unit>
        <trans-unit id="a81c08f0a558b2cdb54cb75a7570aa71433fb35d" translate="yes" xml:space="preserve">
          <source>Target byte ordering.</source>
          <target state="translated">ターゲットのバイト順。</target>
        </trans-unit>
        <trans-unit id="2212c7b535f766ed5f3dc0a2d491cf1267e6dc5e" translate="yes" xml:space="preserve">
          <source>Target file path</source>
          <target state="translated">対象ファイルのパス</target>
        </trans-unit>
        <trans-unit id="478d30d8174645ac8285e3dd15ce42c3543a6834" translate="yes" xml:space="preserve">
          <source>TcClsName</source>
          <target state="translated">TcClsName</target>
        </trans-unit>
        <trans-unit id="e4e0aabcee25a85a81c328ace4a61f66b1899623" translate="yes" xml:space="preserve">
          <source>Tear down the active &lt;a href=&quot;#c.EventLogWriter&quot;&gt;&lt;code&gt;EventLogWriter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">アクティブな&lt;a href=&quot;#c.EventLogWriter&quot;&gt; &lt;code&gt;EventLogWriter&lt;/code&gt; を破棄&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="56829ff154bdc1bf9f3f2d63d8359c01ea11c05e" translate="yes" xml:space="preserve">
          <source>Technically in Haskell 2010 this is illegal:</source>
          <target state="translated">技術的にはHaskell 2010ではこれは違法です。</target>
        </trans-unit>
        <trans-unit id="16afc18c8983601b01eddd4bfffa7ba0a0a2c738" translate="yes" xml:space="preserve">
          <source>Tell a &lt;code&gt;&lt;a href=&quot;data-binary-get#t:Decoder&quot;&gt;Decoder&lt;/a&gt;&lt;/code&gt; that there is no more input. This passes &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;data-binary-get#v:Partial&quot;&gt;Partial&lt;/a&gt;&lt;/code&gt; decoder, otherwise returns the decoder unchanged.</source>
          <target state="translated">入力がなくなったことを &lt;code&gt;&lt;a href=&quot;data-binary-get#t:Decoder&quot;&gt;Decoder&lt;/a&gt;&lt;/code&gt; 伝えます。これは &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;data-binary-get#v:Partial&quot;&gt;Partial&lt;/a&gt;&lt;/code&gt; デコーダーに渡し、それ以外の場合はデコーダーを変更せずに返します。</target>
        </trans-unit>
        <trans-unit id="c4250d8d2575c381cec45fcc44a10100db48019a" translate="yes" xml:space="preserve">
          <source>Tell a &lt;code&gt;&lt;a href=&quot;data-binary-get#t:Decoder&quot;&gt;Decoder&lt;/a&gt;&lt;/code&gt; that there is no more input. This passes &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;data-binary-get#v:Partial&quot;&gt;Partial&lt;/a&gt;&lt;/code&gt; decoder, otherwise returns the decoder unchanged.</source>
          <target state="translated">これ以上入力がないことを &lt;code&gt;&lt;a href=&quot;data-binary-get#t:Decoder&quot;&gt;Decoder&lt;/a&gt;&lt;/code&gt; 伝えます。これにより、 &lt;code&gt;&lt;a href=&quot;data-binary-get#v:Partial&quot;&gt;Partial&lt;/a&gt;&lt;/code&gt; デコーダーに &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; が渡されます。それ以外の場合は、デコーダーは変更されずに返されます。</target>
        </trans-unit>
        <trans-unit id="94d43fe9edc1f1c78b45310faae41313eceee8f2" translate="yes" xml:space="preserve">
          <source>Tell a &lt;code&gt;&lt;a href=&quot;data-binary-get#t:Decoder&quot;&gt;Decoder&lt;/a&gt;&lt;/code&gt; that there is no more input. This passes &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;data-binary-get#v:Partial&quot;&gt;Partial&lt;/a&gt;&lt;/code&gt; decoder, otherwise returns the decoder unchanged.</source>
          <target state="translated">これ以上入力がないことを &lt;code&gt;&lt;a href=&quot;data-binary-get#t:Decoder&quot;&gt;Decoder&lt;/a&gt;&lt;/code&gt; 伝えます。これにより、 &lt;code&gt;&lt;a href=&quot;data-binary-get#v:Partial&quot;&gt;Partial&lt;/a&gt;&lt;/code&gt; デコーダーに &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; が渡されます。それ以外の場合は、デコーダーは変更されずに返されます。</target>
        </trans-unit>
        <trans-unit id="6af5e03d501c4ea227683a7b31027dcfffc9e0f7" translate="yes" xml:space="preserve">
          <source>Tell the linker to avoid shared Haskell libraries, if possible. This is the default.</source>
          <target state="translated">リンカに、可能であれば共有されているHaskellライブラリを避けるように指示します。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="bbc0aca55dd018fd5970b62abe8e150fd79f9ab2" translate="yes" xml:space="preserve">
          <source>Tell the linker to split the single object file that would normally be generated into multiple object files, one per top-level Haskell function or type in the module. This only makes sense for libraries, where it means that executables linked against the library are smaller as they only link against the object files that they need. However, assembling all the sections separately is expensive, so this is slower than compiling normally. Additionally, the size of the library itself (the &lt;code&gt;.a&lt;/code&gt; file) can be a factor of 2 to 2.5 larger.</source>
          <target state="translated">通常生成される単一のオブジェクトファイルを、最上位のHaskell関数またはモジュールのタイプごとに1つずつ、複数のオブジェクトファイルに分割するようにリンカーに指示します。これは、ライブラリに対してのみ意味があります。つまり、ライブラリに対してリンクされている実行可能ファイルは、必要なオブジェクトファイルに対してのみリンクするため、サイズが小さくなります。ただし、すべてのセクションを個別にアセンブルするとコストがかかるため、通常のコンパイルよりも時間がかかります。さらに、ライブラリ自体（ &lt;code&gt;.a&lt;/code&gt; ファイル）のサイズは2〜2.5倍大きくなる場合があります。</target>
        </trans-unit>
        <trans-unit id="76ed640ba01abb6ba7a1c2453ca7124d9760be5f" translate="yes" xml:space="preserve">
          <source>Tells GHC not to collect information about how often functions are entered at runtime (the &amp;ldquo;entries&amp;rdquo; column of the time profile), for this module. This tends to make the profiled code run faster, and hence closer to the speed of the unprofiled code, because GHC is able to optimise more aggressively if it doesn&amp;rsquo;t have to maintain correct entry counts. This option can be useful if you aren&amp;rsquo;t interested in the entry counts (for example, if you only intend to do heap profiling).</source>
          <target state="translated">このモジュールについて、実行時に関数が入力される頻度に関する情報（時間プロファイルの「エントリ」列）を収集しないようにGHCに指示します。GHCは正しいエントリ数を維持する必要がない場合、より積極的に最適化できるため、これによりプロファイル済みコードの実行が速くなり、プロファイルなしコードの速度に近づく傾向があります。このオプションは、エントリ数に関心がない場合（たとえば、ヒーププロファイリングのみを行う場合）に役立ちます。</target>
        </trans-unit>
        <trans-unit id="16a08220f8dfb558172d312872b55f0316d3cfa8" translate="yes" xml:space="preserve">
          <source>Tells GHC that the module being compiled forms part of unit ID ⟨unit-id⟩; internally, these keys are used to determine type equality and linker symbols. As of GHC 8.0, unit IDs must consist solely of alphanumeric characters, dashes, underscores and periods. GHC reserves the right to interpret other characters in a special way in later releases.</source>
          <target state="translated">コンパイルされているモジュールがユニット ID ⟨unit-id⟩の一部を形成していることを GHC に伝えます。GHC 8.0では、ユニットIDは英数字、ダッシュ、アンダースコア、ピリオドのみで構成されなければなりません。GHC は、後のリリースで他の文字を特別な方法で解釈する権利を留保します。</target>
        </trans-unit>
        <trans-unit id="57fde8a4c38996e78f9476baf473c5f093c84804" translate="yes" xml:space="preserve">
          <source>Tells GHC to ignore all inessential information when reading interface files. That is, even if &lt;code&gt;M.hi&lt;/code&gt; contains unfolding or strictness information for a function, GHC will ignore that information.</source>
          <target state="translated">インターフェースファイルを読み取るときに重要でない情報をすべて無視するようにGHCに指示します。つまり、 &lt;code&gt;M.hi&lt;/code&gt; に関数の展開または厳密性の情報が含まれている場合でも、GHCはその情報を無視します。</target>
        </trans-unit>
        <trans-unit id="f49bc22458bf36f5d9ba2d83d0c8c50ed672a695" translate="yes" xml:space="preserve">
          <source>Tells GHC to omit all inessential information from the interface file generated for the module being compiled (say M). This means that a module importing M will see only the &lt;em&gt;types&lt;/em&gt; of the functions that M exports, but not their unfoldings, strictness info, etc. Hence, for example, no function exported by M will be inlined into an importing module. The benefit is that modules that import M will need to be recompiled less often (only when M&amp;rsquo;s exports change their type, not when they change their implementation).</source>
          <target state="translated">コンパイルされるモジュール用に生成されたインターフェースファイル（Mなど）から重要でない情報をすべて省略するようにGHCに指示します。これは、Mをインポートするモジュールは、Mがエクスポートする関数の&lt;em&gt;タイプ&lt;/em&gt;のみを表示し、展開、厳密性情報などは表示しないことを意味します。したがって、たとえば、Mによってエクスポートされる関数は、インポートモジュールにインライン化されません。利点は、Mをインポートするモジュールを再コンパイルする必要が少なくなることです（Mのエクスポートが型を変更する場合のみであり、実装を変更する場合ではありません）。</target>
        </trans-unit>
        <trans-unit id="ededfcf737f4c4553d987674c6464c6bd022107e" translate="yes" xml:space="preserve">
          <source>Tells GHC to omit heap checks when no allocation is being performed. While this improves binary sizes by about 5%, it also means that threads run in tight non-allocating loops will not get preempted in a timely fashion. If it is important to always be able to interrupt such threads, you should turn this optimization off. Consider also recompiling all libraries with this optimization turned off, if you need to guarantee interruptibility.</source>
          <target state="translated">割り当てが実行されていないときにヒープチェックを省略するように GHC に指示します。これはバイナリサイズを約 5% 向上させますが、タイトな非アロケーションループで実行されるスレッドがタイムリーにプリエンプートされないことも意味します。そのようなスレッドを常に割り込みできることが重要な場合は、この最適化をオフにすべきです。割り込みを保証する必要がある場合は、この最適化をオフにしてすべてのライブラリを再コンパイルすることも検討してください。</target>
        </trans-unit>
        <trans-unit id="fce750875cd9a44b96f71a6caaa5492836a9bfeb" translate="yes" xml:space="preserve">
          <source>Tells the system whether or not to set the &lt;code&gt;SA_NOCLDSTOP&lt;/code&gt; flag when installing new signal handlers.</source>
          <target state="translated">新しいシグナルハンドラをインストールするときに &lt;code&gt;SA_NOCLDSTOP&lt;/code&gt; フラグを設定するかどうかをシステムに通知します。</target>
        </trans-unit>
        <trans-unit id="ff437703677ef424e354947da194211739cafb40" translate="yes" xml:space="preserve">
          <source>Template Haskell allows you to do compile-time meta-programming in Haskell. The background to the main technical innovations is discussed in &amp;ldquo;&lt;a href=&quot;http://research.microsoft.com/~simonpj/papers/meta-haskell/&quot;&gt;Template Meta-programming for Haskell&lt;/a&gt;&amp;rdquo; (Proc Haskell Workshop 2002).</source>
          <target state="translated">テンプレートHaskellを使用すると、Haskellでコンパイル時のメタプログラミングを実行できます。主な技術革新の背景については、「&lt;a href=&quot;http://research.microsoft.com/~simonpj/papers/meta-haskell/&quot;&gt;Haskellのテンプレートメタプログラミング&lt;/a&gt;」（Proc Haskell Workshop 2002）で説明しています。</target>
        </trans-unit>
        <trans-unit id="5a8aec726ed3125e3c09e3a3ff7b03d8c159f6e8" translate="yes" xml:space="preserve">
          <source>Template Haskell cannot know what the argument to &lt;code&gt;add1&lt;/code&gt; will be at the function&amp;rsquo;s definition site, so a lifting mechanism is used to promote &lt;code&gt;x&lt;/code&gt; into a value of type &lt;code&gt;Q Exp&lt;/code&gt;. This functionality is exposed to the user as the &lt;code&gt;Lift&lt;/code&gt; typeclass in the &lt;code&gt;Language.Haskell.TH.Syntax&lt;/code&gt; module. If a type has a &lt;code&gt;Lift&lt;/code&gt; instance, then any of its values can be lifted to a Template Haskell expression:</source>
          <target state="translated">テンプレートHaskellは &lt;code&gt;add1&lt;/code&gt; の引数が関数の定義サイトでどのようになるかを認識できないため、リフティングメカニズムを使用して、 &lt;code&gt;x&lt;/code&gt; を &lt;code&gt;Q Exp&lt;/code&gt; 型の値に昇格させます。この機能は、 &lt;code&gt;Language.Haskell.TH.Syntax&lt;/code&gt; モジュールの &lt;code&gt;Lift&lt;/code&gt; タイプクラスとしてユーザーに公開されます。タイプに &lt;code&gt;Lift&lt;/code&gt; インスタンスがある場合、その値のいずれかをテンプレートHaskell式にリフトできます。</target>
        </trans-unit>
        <trans-unit id="0615045ad37ab501e0dedc212409d593c3996e9c" translate="yes" xml:space="preserve">
          <source>Template Haskell cannot know what the argument to &lt;code&gt;add1&lt;/code&gt; will be at the function&amp;rsquo;s definition site, so a lifting mechanism is used to promote &lt;code&gt;x&lt;/code&gt; into a value of type &lt;code&gt;Quote m =&amp;gt; m Exp&lt;/code&gt;. This functionality is exposed to the user as the &lt;code&gt;Lift&lt;/code&gt; typeclass in the &lt;code&gt;Language.Haskell.TH.Syntax&lt;/code&gt; module. If a type has a &lt;code&gt;Lift&lt;/code&gt; instance, then any of its values can be lifted to a Template Haskell expression:</source>
          <target state="translated">テンプレートHaskellは、関数の定義サイトで &lt;code&gt;add1&lt;/code&gt; の引数がどうなるかを知ることができないため、リフティングメカニズムを使用して &lt;code&gt;x&lt;/code&gt; を &lt;code&gt;Quote m =&amp;gt; m Exp&lt;/code&gt; mExp型の値に昇格させます。この機能は、 &lt;code&gt;Language.Haskell.TH.Syntax&lt;/code&gt; モジュールの &lt;code&gt;Lift&lt;/code&gt; 型クラスとしてユーザーに公開されます。タイプに &lt;code&gt;Lift&lt;/code&gt; インスタンスがある場合、その値のいずれかをTemplateHaskell式にリフトできます。</target>
        </trans-unit>
        <trans-unit id="0bfc14e4c55c321d42934a17794446d7262b8922" translate="yes" xml:space="preserve">
          <source>Template Haskell has no way of knowing what value &lt;code&gt;x&lt;/code&gt; will take on at splice-time, so it requires the type of &lt;code&gt;x&lt;/code&gt; to be an instance of &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Lift&quot;&gt;Lift&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テンプレートHaskellは、スプライス時に &lt;code&gt;x&lt;/code&gt; がどのような値をとるかを知る方法がないため、 &lt;code&gt;x&lt;/code&gt; のタイプが &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Lift&quot;&gt;Lift&lt;/a&gt;&lt;/code&gt; のインスタンスである必要があります。</target>
        </trans-unit>
        <trans-unit id="aa5b11adaee119e29f46852dbeadbc40dddb30de" translate="yes" xml:space="preserve">
          <source>Template Haskell has the following new syntactic constructions. You need to use the extension &lt;a href=&quot;#extension-TemplateHaskell&quot;&gt;&lt;code&gt;TemplateHaskell&lt;/code&gt;&lt;/a&gt; to switch these syntactic extensions on. Alternatively, the &lt;a href=&quot;#extension-TemplateHaskellQuotes&quot;&gt;&lt;code&gt;TemplateHaskellQuotes&lt;/code&gt;&lt;/a&gt; extension can be used to enable the quotation subset of Template Haskell (i.e. without splice syntax). The &lt;a href=&quot;#extension-TemplateHaskellQuotes&quot;&gt;&lt;code&gt;TemplateHaskellQuotes&lt;/code&gt;&lt;/a&gt; extension is considered safe under &lt;a href=&quot;safe_haskell#safe-haskell&quot;&gt;Safe Haskell&lt;/a&gt; while &lt;a href=&quot;#extension-TemplateHaskell&quot;&gt;&lt;code&gt;TemplateHaskell&lt;/code&gt;&lt;/a&gt; is not.</source>
          <target state="translated">テンプレートHaskellには、以下の新しい構文構造があります。これらの構文拡張をオンに切り替えるには、拡張&lt;a href=&quot;#extension-TemplateHaskell&quot;&gt; &lt;code&gt;TemplateHaskell&lt;/code&gt; &lt;/a&gt;を使用する必要があります。あるいは、&lt;a href=&quot;#extension-TemplateHaskellQuotes&quot;&gt; &lt;code&gt;TemplateHaskellQuotes&lt;/code&gt; &lt;/a&gt;拡張機能を使用して、テンプレートHaskellの引用サブセットを有効にすることができます（つまり、スプライス構文なし）。&lt;a href=&quot;#extension-TemplateHaskellQuotes&quot;&gt; &lt;code&gt;TemplateHaskellQuotes&lt;/code&gt; の&lt;/a&gt;延長は下に安全と考えられている&lt;a href=&quot;safe_haskell#safe-haskell&quot;&gt;安全なHaskellの&lt;/a&gt;間、&lt;a href=&quot;#extension-TemplateHaskell&quot;&gt; &lt;code&gt;TemplateHaskell&lt;/code&gt; は&lt;/a&gt;ありません。</target>
        </trans-unit>
        <trans-unit id="47667042cd12161693fdf281d0c757fa05365130" translate="yes" xml:space="preserve">
          <source>Template Haskell has the following new syntactic constructions. You need to use the extension &lt;a href=&quot;#extension-TemplateHaskell&quot;&gt;&lt;code&gt;TemplateHaskell&lt;/code&gt;&lt;/a&gt; to switch these syntactic extensions on. Alternatively, the &lt;a href=&quot;#extension-TemplateHaskellQuotes&quot;&gt;&lt;code&gt;TemplateHaskellQuotes&lt;/code&gt;&lt;/a&gt; extension can be used to enable the quotation subset of Template Haskell (i.e. without top-level splices). The &lt;a href=&quot;#extension-TemplateHaskellQuotes&quot;&gt;&lt;code&gt;TemplateHaskellQuotes&lt;/code&gt;&lt;/a&gt; extension is considered safe under &lt;a href=&quot;safe_haskell#safe-haskell&quot;&gt;Safe Haskell&lt;/a&gt; while &lt;a href=&quot;#extension-TemplateHaskell&quot;&gt;&lt;code&gt;TemplateHaskell&lt;/code&gt;&lt;/a&gt; is not.</source>
          <target state="translated">テンプレートHaskellには次の新しい構文構造があります。これらの構文拡張機能をオンにするには、拡張機能&lt;a href=&quot;#extension-TemplateHaskell&quot;&gt; &lt;code&gt;TemplateHaskell&lt;/code&gt; &lt;/a&gt;を使用する必要があります。あるいは、&lt;a href=&quot;#extension-TemplateHaskellQuotes&quot;&gt; &lt;code&gt;TemplateHaskellQuotes&lt;/code&gt; &lt;/a&gt;拡張機能を使用して、Template Haskellの見積もりサブセットを有効にすることができます（つまり、トップレベルのスプライスなしで）。&lt;a href=&quot;#extension-TemplateHaskellQuotes&quot;&gt; &lt;code&gt;TemplateHaskellQuotes&lt;/code&gt; の&lt;/a&gt;延長は下に安全と考えられている&lt;a href=&quot;safe_haskell#safe-haskell&quot;&gt;安全なHaskellの&lt;/a&gt;間、&lt;a href=&quot;#extension-TemplateHaskell&quot;&gt; &lt;code&gt;TemplateHaskell&lt;/code&gt; は&lt;/a&gt;ありません。</target>
        </trans-unit>
        <trans-unit id="cf0bfe7b83cf1fe4eb5eae8c6dda164d7ea82705" translate="yes" xml:space="preserve">
          <source>Template Haskell relies on GHC&amp;rsquo;s built-in bytecode compiler and interpreter to run the splice expressions. The bytecode interpreter runs the compiled expression on top of the same runtime on which GHC itself is running; this means that the compiled code referred to by the interpreted expression must be compatible with this runtime, and in particular this means that object code that is compiled for profiling &lt;em&gt;cannot&lt;/em&gt; be loaded and used by a splice expression, because profiled object code is only compatible with the profiling version of the runtime.</source>
          <target state="translated">テンプレートHaskellは、GHCの組み込みバイトコードコンパイラとインタープリタを使用してスプライス式を実行します。バイトコードインタープリターは、GHC自体が実行されているのと同じランタイム上でコンパイルされた式を実行します。このコンパイルされたコードを解釈式で参照することを意味このランタイムと互換性がなければならない、そしてプロファイリング用にコンパイルされたオブジェクトコードがその特定にこの手段&lt;em&gt;はできません&lt;/em&gt;プロファイルオブジェクトコードにのみ対応しているので、スプライス発現によってロードして使用することランタイムのプロファイリングバージョン。</target>
        </trans-unit>
        <trans-unit id="7bdefc9539b9194a2d4149a5c91d997eef29d850" translate="yes" xml:space="preserve">
          <source>Template Haskell return values</source>
          <target state="translated">テンプレート Haskell の戻り値</target>
        </trans-unit>
        <trans-unit id="9b404f6d6623869222b538ba6bfc06c98e19cb94" translate="yes" xml:space="preserve">
          <source>Template Haskell splices won&amp;rsquo;t be checked for warnings, because the code causing the warning might originate from a third-party library and possibly was not written by the user. If you want to have warnings for splices anyway, pass &lt;a href=&quot;#ghc-flag--fenable-th-splice-warnings&quot;&gt;&lt;code&gt;-fenable-th-splice-warnings&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">警告の原因となるコードはサードパーティのライブラリからのものであり、ユーザーが作成したものではない可能性があるため、テンプレートHaskellスプライスは警告がチェックされません。とにかくスプライスの警告が必要な場合は、&lt;a href=&quot;#ghc-flag--fenable-th-splice-warnings&quot;&gt; &lt;code&gt;-fenable-th-splice-warnings&lt;/code&gt; を&lt;/a&gt;渡します。</target>
        </trans-unit>
        <trans-unit id="d152140c1e18c7cd3a3f310906c764d63ca1e2f5" translate="yes" xml:space="preserve">
          <source>Template Haskell supports quasiquoting, which permits users to construct program fragments by directly writing concrete syntax. A quasiquoter is essentially a function with takes a string to a Template Haskell AST. This module defines the &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#t:QuasiQuoter&quot;&gt;QuasiQuoter&lt;/a&gt;&lt;/code&gt; datatype, which specifies a quasiquoter &lt;code&gt;q&lt;/code&gt; which can be invoked using the syntax &lt;code&gt;[q| ... string to parse ... |]&lt;/code&gt; when the &lt;code&gt;QuasiQuotes&lt;/code&gt; language extension is enabled, and some utility functions for manipulating quasiquoters. Nota bene: this package does not define any parsers, that is up to you.</source>
          <target state="translated">テンプレートHaskellは、ユーザーが具体的な構文を直接記述してプログラムフラグメントを構築できるようにする準クォートをサポートしています。 quasiquoterは基本的に文字列をテンプレートHaskell ASTに渡す関数です。このモジュールは &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#t:QuasiQuoter&quot;&gt;QuasiQuoter&lt;/a&gt;&lt;/code&gt; データ型を定義します。これは、構文 &lt;code&gt;[q| ... string to parse ... |]&lt;/code&gt; を使用して呼び出すことができる準クォータ &lt;code&gt;q&lt;/code&gt; を指定します。 ...文字列を解析するために... |]とき &lt;code&gt;QuasiQuotes&lt;/code&gt; 言語拡張が有効になっている、とquasiquotersを操作するためのいくつかのユーティリティ機能。注意：このパッケージはパーサーを定義していません。それはあなた次第です。</target>
        </trans-unit>
        <trans-unit id="2f4dbc2d2312ca1363e0c5abf29b93f188fd7af1" translate="yes" xml:space="preserve">
          <source>Template Haskell works in any mode (&lt;a href=&quot;../using#ghc-flag---make&quot;&gt;&lt;code&gt;--make&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../using#ghc-flag---interactive&quot;&gt;&lt;code&gt;--interactive&lt;/code&gt;&lt;/a&gt;, or file-at-a-time). There used to be a restriction to the former two, but that restriction has been lifted.</source>
          <target state="translated">テンプレートHaskellはどのモードでも動作します（&lt;a href=&quot;../using#ghc-flag---make&quot;&gt; &lt;code&gt;--make&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../using#ghc-flag---interactive&quot;&gt; &lt;code&gt;--interactive&lt;/code&gt; &lt;/a&gt;、またはファイルアット・タイム）。以前は前の2つに制限がありましたが、その制限は解除されました。</target>
        </trans-unit>
        <trans-unit id="ebddc9e0d108559114cba48b682824dfa130af27" translate="yes" xml:space="preserve">
          <source>Template Haskell works in any mode (&lt;a href=&quot;using#ghc-flag---make&quot;&gt;&lt;code&gt;--make&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;using#ghc-flag---interactive&quot;&gt;&lt;code&gt;--interactive&lt;/code&gt;&lt;/a&gt;, or file-at-a-time). There used to be a restriction to the former two, but that restriction has been lifted.</source>
          <target state="translated">テンプレートHaskellはどのモードでも動作します（&lt;a href=&quot;using#ghc-flag---make&quot;&gt; &lt;code&gt;--make&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;using#ghc-flag---interactive&quot;&gt; &lt;code&gt;--interactive&lt;/code&gt; &lt;/a&gt;、またはファイルアット・タイム）。以前の2つには制限がありましたが、その制限は解除されました。</target>
        </trans-unit>
        <trans-unit id="eff1de13128bcd2013c8040639470f88614a3c94" translate="yes" xml:space="preserve">
          <source>TemplateHaskell</source>
          <target state="translated">TemplateHaskell</target>
        </trans-unit>
        <trans-unit id="e2eaaaa85415bd784e73442f3556432b23b5f25d" translate="yes" xml:space="preserve">
          <source>TemplateHaskellQuotes</source>
          <target state="translated">TemplateHaskellQuotes</target>
        </trans-unit>
        <trans-unit id="c51a91a0b8b55080de83a8c4c22ec084a18dc465" translate="yes" xml:space="preserve">
          <source>Temporarily allocate space for the given number of elements (like &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-marshal-alloc#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt;, but for multiple elements).</source>
          <target state="translated">指定された数の要素に一時的にスペースを割り当てます（ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-marshal-alloc#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt; と同様ですが、複数の要素に対して）。</target>
        </trans-unit>
        <trans-unit id="9904b71b142aff63e385635451d8015680bcbfa1" translate="yes" xml:space="preserve">
          <source>Temporarily allocate space for the given number of elements (like &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-marshal-alloc#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt;, but for multiple elements).</source>
          <target state="translated">指定された数の要素（ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-marshal-alloc#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt; と同様ですが、複数の要素）に一時的にスペースを割り当てます。</target>
        </trans-unit>
        <trans-unit id="f3fc7226b1f096762cc7a4a3cc0eb77153195944" translate="yes" xml:space="preserve">
          <source>Temporarily allocate space for the given number of elements (like &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-marshal-alloc#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt;, but for multiple elements).</source>
          <target state="translated">指定された数の要素に一時的にスペースを割り当てます（ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-marshal-alloc#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt; と同様ですが、複数の要素に割り当てます）。</target>
        </trans-unit>
        <trans-unit id="3aa2fa00cb424efa41a42f9a30ef6767085c8e77" translate="yes" xml:space="preserve">
          <source>Temporarily allocate space for the given number of elements (like &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt;, but for multiple elements).</source>
          <target state="translated">指定された数の要素に一時的にスペースを割り当てます（ &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt; と同様ですが、複数の要素に対して）。</target>
        </trans-unit>
        <trans-unit id="d153213de595f2b0457842b1e89ecf37e5861427" translate="yes" xml:space="preserve">
          <source>Temporarily store a list of storable values in memory (like &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-marshal-utils#v:with&quot;&gt;with&lt;/a&gt;&lt;/code&gt;, but for multiple elements).</source>
          <target state="translated">一時的に（のようなメモリに格納可能な値のリストを格納する &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-marshal-utils#v:with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; 、しかし、複数の要素のために）。</target>
        </trans-unit>
        <trans-unit id="747adc425badeb586a9ef48c932f50cbafbf55bd" translate="yes" xml:space="preserve">
          <source>Temporarily store a list of storable values in memory (like &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-marshal-utils#v:with&quot;&gt;with&lt;/a&gt;&lt;/code&gt;, but for multiple elements).</source>
          <target state="translated">一時的に（のようなメモリに格納可能な値のリストを格納する &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-marshal-utils#v:with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; 、しかし、複数の要素のために）。</target>
        </trans-unit>
        <trans-unit id="6499eb4e4bd563afa79f792deb0376ad5080b835" translate="yes" xml:space="preserve">
          <source>Temporarily store a list of storable values in memory (like &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-marshal-utils#v:with&quot;&gt;with&lt;/a&gt;&lt;/code&gt;, but for multiple elements).</source>
          <target state="translated">一時的に（のようなメモリに格納可能な値のリストを格納する &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-marshal-utils#v:with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; 、しかし、複数の要素のために）。</target>
        </trans-unit>
        <trans-unit id="910480cf7ceec100a9b2c82c87ed4abd8a847b1f" translate="yes" xml:space="preserve">
          <source>Temporarily store a list of storable values in memory (like &lt;code&gt;&lt;a href=&quot;foreign-marshal-utils#v:with&quot;&gt;with&lt;/a&gt;&lt;/code&gt;, but for multiple elements).</source>
          <target state="translated">一時的に（のようなメモリに格納可能な値のリストを格納する &lt;code&gt;&lt;a href=&quot;foreign-marshal-utils#v:with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; 、しかし、複数の要素のために）。</target>
        </trans-unit>
        <trans-unit id="951532b532d7745015bbec59ce7f15413c9aa665" translate="yes" xml:space="preserve">
          <source>Temporary bindings introduced at the prompt only last until the next &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt;&lt;code&gt;:reload&lt;/code&gt;&lt;/a&gt; command, at which time they will be simply lost. However, they do survive a change of context with &lt;a href=&quot;#ghci-cmd-:module&quot;&gt;&lt;code&gt;:module&lt;/code&gt;&lt;/a&gt;: the temporary bindings just move to the new location.</source>
          <target state="translated">プロンプトで導入された一時的なバインディングは、次の&lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#ghci-cmd-:reload&quot;&gt; &lt;code&gt;:reload&lt;/code&gt; &lt;/a&gt;コマンドまでしか持続せず、その時点でそれらは単純に失われます。ただし、それらは&lt;a href=&quot;#ghci-cmd-:module&quot;&gt; &lt;code&gt;:module&lt;/code&gt; &lt;/a&gt;によるコンテキストの変更後も存続します。一時的なバインディングは新しい場所に移動するだけです。</target>
        </trans-unit>
        <trans-unit id="8e2754fc91f29834706af71cfa26258d56805769" translate="yes" xml:space="preserve">
          <source>Temporary files</source>
          <target state="translated">一時ファイル</target>
        </trans-unit>
        <trans-unit id="61dadf9304563410bab92330ef592c2024f65bc0" translate="yes" xml:space="preserve">
          <source>TermOutput</source>
          <target state="translated">TermOutput</target>
        </trans-unit>
        <trans-unit id="ea3bc4f028c31af0bf78ae8d2532320026163e9c" translate="yes" xml:space="preserve">
          <source>TermStr</source>
          <target state="translated">TermStr</target>
        </trans-unit>
        <trans-unit id="a1f52cdcb3f2bf91aa12082618f306714fbe6324" translate="yes" xml:space="preserve">
          <source>Terminal</source>
          <target state="translated">Terminal</target>
        </trans-unit>
        <trans-unit id="656752cc25cccadfaad5f1821bdf864540c6e0e9" translate="yes" xml:space="preserve">
          <source>Terminal attributes</source>
          <target state="translated">端末属性</target>
        </trans-unit>
        <trans-unit id="c74ce25f28d15f536a08e8a7aae17a8cd82fa296" translate="yes" xml:space="preserve">
          <source>Terminal dimensions</source>
          <target state="translated">端子寸法</target>
        </trans-unit>
        <trans-unit id="16006e478e8b7dad1a17b3808b498b74f603d953" translate="yes" xml:space="preserve">
          <source>Terminal operations</source>
          <target state="translated">ターミナル業務</target>
        </trans-unit>
        <trans-unit id="8abbc9be81a91e1208c58253f1fdb1868684462a" translate="yes" xml:space="preserve">
          <source>Terminal operations (not portable: GHC only)</source>
          <target state="translated">端末操作(携帯不可:GHCのみ</target>
        </trans-unit>
        <trans-unit id="03e69355cb9e53e2cd49b81f2188ca3e9216ddfa" translate="yes" xml:space="preserve">
          <source>Terminal support</source>
          <target state="translated">ターミナルサポート</target>
        </trans-unit>
        <trans-unit id="4356c0a245abed0df475bf4fd2e4f9252ed9378c" translate="yes" xml:space="preserve">
          <source>TerminalAttributes</source>
          <target state="translated">TerminalAttributes</target>
        </trans-unit>
        <trans-unit id="48cf04933dc0932b897bc63f987d824ce367d66f" translate="yes" xml:space="preserve">
          <source>TerminalMode</source>
          <target state="translated">TerminalMode</target>
        </trans-unit>
        <trans-unit id="eeed32bdc9fc6804be1d50287fd767119a6e6a5c" translate="yes" xml:space="preserve">
          <source>TerminalState</source>
          <target state="translated">TerminalState</target>
        </trans-unit>
        <trans-unit id="60e3b2b4662f7f71b1278d8bd5f47d4ddfcd23fa" translate="yes" xml:space="preserve">
          <source>Terminating the program</source>
          <target state="translated">プログラムの終了</target>
        </trans-unit>
        <trans-unit id="bf3badca71aac2c2189a5d1f128d3744ce4ba74d" translate="yes" xml:space="preserve">
          <source>Terminfo contains many string capabilities for special effects. For example, the &lt;code&gt;cuu1&lt;/code&gt; capability moves the cursor up one line; on ANSI terminals this is accomplished by printing the control sequence &lt;code&gt;&quot;\ESC[A&quot;&lt;/code&gt;. However, some older terminals also require &quot;padding&quot;, or short pauses, after certain commands. For example, when &lt;code&gt;TERM=vt100&lt;/code&gt; the &lt;code&gt;cuu1&lt;/code&gt; capability is &lt;code&gt;&quot;\ESC[A$&amp;lt;2&amp;gt;&quot;&lt;/code&gt;, which instructs terminfo to pause for two milliseconds after outputting the control sequence.</source>
          <target state="translated">Terminfoには、特殊効果のための多くの文字列機能が含まれています。たとえば、 &lt;code&gt;cuu1&lt;/code&gt; 機能はカーソルを1行上に移動します。ANSI端末では、これは制御シーケンス &lt;code&gt;&quot;\ESC[A&quot;&lt;/code&gt; ことによって実現されます。ただし、一部の古い端末では、特定のコマンドの後に「パディング」または短い一時停止が必要です。たとえば、 &lt;code&gt;TERM=vt100&lt;/code&gt; の場合、 &lt;code&gt;cuu1&lt;/code&gt; 機能は &lt;code&gt;&quot;\ESC[A$&amp;lt;2&amp;gt;&quot;&lt;/code&gt; であり、制御シーケンスを出力した後、terminfoに2ミリ秒間休止するように指示します。</target>
        </trans-unit>
        <trans-unit id="5a1bfca651035bf564aa1981572b07bdf7c4afa0" translate="yes" xml:space="preserve">
          <source>Test for a non-representable type</source>
          <target state="translated">表現不可能なタイプのテスト</target>
        </trans-unit>
        <trans-unit id="e53f6246b72df3a6091a48b1550fd22b7e1ecb7b" translate="yes" xml:space="preserve">
          <source>Test for an algebraic type</source>
          <target state="translated">代数型のテスト</target>
        </trans-unit>
        <trans-unit id="6d642ca4244b8dfb74521331eba817e7a20071aa" translate="yes" xml:space="preserve">
          <source>Test for special 0-sized &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; representing underflows.</source>
          <target state="translated">アンダーフローを表す特別な0サイズの &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; をテストします。</target>
        </trans-unit>
        <trans-unit id="1d02aa099737fb0fe7c1625e39f58b89235df364" translate="yes" xml:space="preserve">
          <source>Test if &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; value is equal to zero.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; 値がゼロに等しいかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="95bb15347fba86c3b17001ad0a8b69992a876f4b" translate="yes" xml:space="preserve">
          <source>Test if &lt;em&gt;n&lt;/em&gt;-th bit is set.</source>
          <target state="translated">&lt;em&gt;n&lt;/em&gt;番目のビットが設定されているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="292e850af715e74ed5bb5feffdf8cbf1885014a3" translate="yes" xml:space="preserve">
          <source>Test if a map obeys the balance invariants.</source>
          <target state="translated">マップがバランス不変量に従うかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="5a94265ab8733a209e426c94ee183c76717c01db" translate="yes" xml:space="preserve">
          <source>Test if each node of a map reports its size correctly.</source>
          <target state="translated">マップの各ノードがそのサイズを正しく報告するかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="96936c8d777fcfcafb5eb9b7eb0d03ba6539a1a1" translate="yes" xml:space="preserve">
          <source>Test if the keys are ordered correctly.</source>
          <target state="translated">キーの順序が正しいかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="d7e009b0c3f999ffcaef1173db81146aed8dee25" translate="yes" xml:space="preserve">
          <source>Test whether all input has been consumed, i.e. there are no remaining undecoded bytes.</source>
          <target state="translated">すべての入力が消費されたかどうか、つまり未コードのバイトが残っていないかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="9925348510b47b2863e5ef1c82653a196c4b207d" translate="yes" xml:space="preserve">
          <source>Test whether all internal invariants are satisfied by &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; value</source>
          <target state="translated">すべての内部不変式が &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; 値によって満たされているかどうかをテスト</target>
        </trans-unit>
        <trans-unit id="06cded3ffb44966c229aa0a84babdf0e8c0c2137" translate="yes" xml:space="preserve">
          <source>Test whether all internal invariants are satisfied by &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; value</source>
          <target state="translated">すべての内部不変式が &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 値で満たされているかどうかをテストします</target>
        </trans-unit>
        <trans-unit id="cca497a59c276e03e96debbd45d14f22a694b070" translate="yes" xml:space="preserve">
          <source>Test whether all internal invariants are satisfied by &lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; value</source>
          <target state="translated">すべての内部不変式が &lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; 値で満たされているかどうかをテストします</target>
        </trans-unit>
        <trans-unit id="87dfc36f0f2fd749d5bd7ceb68abbb872b3a6ab1" translate="yes" xml:space="preserve">
          <source>Test whether the given path points to an existing filesystem object. If the user lacks necessary permissions to search the parent directories, this function may return false even if the file does actually exist.</source>
          <target state="translated">与えられたパスが既存のファイルシステムオブジェクトを指しているかどうかをテストします。ユーザが親ディレクトリを検索するのに必要な権限を持っていない場合、ファイルが実際に存在していたとしても、この関数はfalseを返すことがあります。</target>
        </trans-unit>
        <trans-unit id="618c6539f1506b1efcaa432cec593a3ec5e5b23d" translate="yes" xml:space="preserve">
          <source>Test whether the structure is empty.</source>
          <target state="translated">構造体が空かどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="a5e063ecbd1d45ffe293e2b19dcede51dfcac352" translate="yes" xml:space="preserve">
          <source>Test whether the structure is empty. The default implementation is Left-associative and lazy in both the initial element and the accumulator. Thus optimised for structures where the first element can be accessed in constant time. Structures where this is not the case should have a non-default implementation.</source>
          <target state="translated">構造体が空であるかどうかをテストします。デフォルトの実装では,左結合で,初期要素とアキュムレータの両方で遅延しています。そのため,最初の要素に一定時間でアクセスできる構造に最適化されている。そうでない構造体には,デフォルト以外の実装を施すべきである。</target>
        </trans-unit>
        <trans-unit id="9ec504560faa4c177387ae484066374e0280ed4d" translate="yes" xml:space="preserve">
          <source>Test whether the structure is empty. The default implementation is optimized for structures that are similar to cons-lists, because there is no general way to do better.</source>
          <target state="translated">構造体が空かどうかをテストします。デフォルトの実装は、コンサリストに似た構造体に対して最適化されていますが、それ以上の一般的な方法はないためです。</target>
        </trans-unit>
        <trans-unit id="9ffe4f99279c8b3a1a6045e3b220319bfa26e4d4" translate="yes" xml:space="preserve">
          <source>TestCoercion</source>
          <target state="translated">TestCoercion</target>
        </trans-unit>
        <trans-unit id="6baebd3bcf2faffa77a6af6d701aed3296ee682f" translate="yes" xml:space="preserve">
          <source>TestEquality</source>
          <target state="translated">TestEquality</target>
        </trans-unit>
        <trans-unit id="13305b14347347ab0b4ea787bc14cb2b6a7b2d6b" translate="yes" xml:space="preserve">
          <source>Testing a file descriptor</source>
          <target state="translated">ファイル記述子のテスト</target>
        </trans-unit>
        <trans-unit id="c3328c39b0e29f78e9ff45db674248b1d245887d" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="translated">Text</target>
        </trans-unit>
        <trans-unit id="28ca7dae3040931c19068173384884833a123118" translate="yes" xml:space="preserve">
          <source>Text attributes</source>
          <target state="translated">テキスト属性</target>
        </trans-unit>
        <trans-unit id="fbaed2b20b527facc4ca0f4514252eda74d458bd" translate="yes" xml:space="preserve">
          <source>Text codecs for I/O</source>
          <target state="translated">I/O用テキストコーデック</target>
        </trans-unit>
        <trans-unit id="24fe565b53a0883ce95a8e632e2283a1bc0c4892" translate="yes" xml:space="preserve">
          <source>Text formatting.</source>
          <target state="translated">テキストの書式設定。</target>
        </trans-unit>
        <trans-unit id="c8677ef2e3f2a24ffc9cc25edf46d04be93e6e2d" translate="yes" xml:space="preserve">
          <source>Text input</source>
          <target state="translated">テキスト入力</target>
        </trans-unit>
        <trans-unit id="b0540832a654644f2f5c3a0970298868a5907146" translate="yes" xml:space="preserve">
          <source>Text input and output</source>
          <target state="translated">テキストの入力と出力</target>
        </trans-unit>
        <trans-unit id="05a09f33e47e5c09ffcc367387ff34665b9cdd9d" translate="yes" xml:space="preserve">
          <source>Text manipulation functions represented as fusible operations over streams.</source>
          <target state="translated">ストリーム上の可逆的な操作として表現されたテキスト操作関数。</target>
        </trans-unit>
        <trans-unit id="722885d8d390e65ecfcdb41ec41ea3b9328037eb" translate="yes" xml:space="preserve">
          <source>Text output</source>
          <target state="translated">テキスト出力</target>
        </trans-unit>
        <trans-unit id="13943b8e4677c9da2e6203d1b329951861af4e3e" translate="yes" xml:space="preserve">
          <source>Text representing the offset of this timezone, such as &quot;-0800&quot; or &quot;+0400&quot; (like &lt;code&gt;%z&lt;/code&gt; in formatTime), with arbitrary padding.</source>
          <target state="translated">&quot;-0800&quot;や &quot;+0400&quot;（formatTimeの &lt;code&gt;%z&lt;/code&gt; など）など、このタイムゾーンのオフセットを表すテキストで、任意のパディングを使用します。</target>
        </trans-unit>
        <trans-unit id="852166d16456b6fa662df8fb149d236828c68e68" translate="yes" xml:space="preserve">
          <source>Text representing the offset of this timezone, such as &quot;-0800&quot; or &quot;+0400&quot; (like &lt;code&gt;%z&lt;/code&gt; in formatTime).</source>
          <target state="translated">このタイムゾーンのオフセットを表すテキスト。「-0800」や「+0400」など（formatTimeの &lt;code&gt;%z&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="ed7ae1196ea4dde7920491b601f4301c95e1e9a5" translate="yes" xml:space="preserve">
          <source>Text to display when listing alternatives.</source>
          <target state="translated">代替案をリストアップする際に表示するテキスト。</target>
        </trans-unit>
        <trans-unit id="11b672bb892b79d6582e0455b8fff6ee5ceb9ac5" translate="yes" xml:space="preserve">
          <source>Text to insert in line.</source>
          <target state="translated">行に挿入するテキスト。</target>
        </trans-unit>
        <trans-unit id="b3cddd25d1a3ba043388a9be9c805221e0702100" translate="yes" xml:space="preserve">
          <source>Text to search in (&lt;code&gt;haystack&lt;/code&gt;)</source>
          <target state="translated">検索するテキスト（ &lt;code&gt;haystack&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="f4926373d9c800f5b51da1a7b6d5f3a2e217d0fb" translate="yes" xml:space="preserve">
          <source>Text.Parsec</source>
          <target state="translated">Text.Parsec</target>
        </trans-unit>
        <trans-unit id="4396c7c924e8d78705c74431cf54ec75db0c822f" translate="yes" xml:space="preserve">
          <source>Text.Parsec.ByteString</source>
          <target state="translated">Text.Parsec.ByteString</target>
        </trans-unit>
        <trans-unit id="5f5916c1c3b3ac72a76fc3edc051f943c1ed5cc5" translate="yes" xml:space="preserve">
          <source>Text.Parsec.ByteString.Lazy</source>
          <target state="translated">Text.Parsec.ByteString.Lazy</target>
        </trans-unit>
        <trans-unit id="5026a39135d437c0e3d50661263d3bddb505076d" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Char</source>
          <target state="translated">Text.Parsec.Char</target>
        </trans-unit>
        <trans-unit id="d79e1e5ccbab402519d7709b426069da0e1ba90e" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Combinator</source>
          <target state="translated">Text.Parsec.Combinator</target>
        </trans-unit>
        <trans-unit id="eaa3d89d72b1231b22ba03f0db4bdaf19d21fcb1" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Error</source>
          <target state="translated">Text.Parsec.Error</target>
        </trans-unit>
        <trans-unit id="111558045cf99bdede51fa1129966883ff24afd0" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Expr</source>
          <target state="translated">Text.Parsec.Expr</target>
        </trans-unit>
        <trans-unit id="a80b14e828d7ccebb142e616cfa44b68880cc27b" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Language</source>
          <target state="translated">Text.Parsec.Language</target>
        </trans-unit>
        <trans-unit id="6c69560acd89a3439e49df9a1a3254a8b3186128" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Perm</source>
          <target state="translated">Text.Parsec.Perm</target>
        </trans-unit>
        <trans-unit id="899a00a65f2d54739e5641e8688795990245109f" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Pos</source>
          <target state="translated">Text.Parsec.Pos</target>
        </trans-unit>
        <trans-unit id="7636f7cf5f4e8c88253662fac8c688523ac4d886" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Prim</source>
          <target state="translated">Text.Parsec.Prim</target>
        </trans-unit>
        <trans-unit id="29826c57fcb89761863c39eec9c5af8a6f5febad" translate="yes" xml:space="preserve">
          <source>Text.Parsec.String</source>
          <target state="translated">Text.Parsec.String</target>
        </trans-unit>
        <trans-unit id="3b836c92fbd7582025c709ff24c175d6e716ca73" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Text</source>
          <target state="translated">Text.Parsec.Text</target>
        </trans-unit>
        <trans-unit id="e90063f714a4da52e66a2df4dd86435908e09fa3" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Text.Lazy</source>
          <target state="translated">Text.Parsec.Text.Lazy</target>
        </trans-unit>
        <trans-unit id="6fe265f0e82179432eb9ade64e7861432f7d60af" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Token</source>
          <target state="translated">Text.Parsec.Token</target>
        </trans-unit>
        <trans-unit id="f172b568000576f45d59679777ed7684132968eb" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec</source>
          <target state="translated">Text.ParserCombinators.Parsec</target>
        </trans-unit>
        <trans-unit id="10b214a4ec90242f725f97833fd7675f54a888a3" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec.Char</source>
          <target state="translated">Text.ParserCombinators.Parsec.Char</target>
        </trans-unit>
        <trans-unit id="79ef51731535d8527d907194e42ac5b111d4c5fe" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec.Combinator</source>
          <target state="translated">Text.ParserCombinators.Parsec.Combinator</target>
        </trans-unit>
        <trans-unit id="61d2e006fb97d64aea24f02c9e3c08ebb1a99396" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec.Error</source>
          <target state="translated">Text.ParserCombinators.Parsec.Error</target>
        </trans-unit>
        <trans-unit id="516a4fb2d75ecfa62ec407490b7bc7c2d044edf8" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec.Expr</source>
          <target state="translated">Text.ParserCombinators.Parsec.Expr</target>
        </trans-unit>
        <trans-unit id="5e6854330348d33d0af39d8fdc6812b41298e84f" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec.Language</source>
          <target state="translated">Text.ParserCombinators.Parsec.Language</target>
        </trans-unit>
        <trans-unit id="05c55b78874022b802d181ba4f2880cd161193cb" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec.Perm</source>
          <target state="translated">Text.ParserCombinators.Parsec.Perm</target>
        </trans-unit>
        <trans-unit id="23fb49ec2cfe90e1ed5d4c61ff69122ee664057b" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec.Pos</source>
          <target state="translated">Text.ParserCombinators.Parsec.Pos</target>
        </trans-unit>
        <trans-unit id="f235b5d7f1d368a293584919135e9009215e4195" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec.Prim</source>
          <target state="translated">Text.ParserCombinators.Parsec.Prim</target>
        </trans-unit>
        <trans-unit id="f3945aa5d3428a81bf8a3a610bbab3644b5df29a" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec.Token</source>
          <target state="translated">Text.ParserCombinators.Parsec.Token</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
