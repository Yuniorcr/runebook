<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="haskell">
    <body>
      <group id="haskell">
        <trans-unit id="468cdfbdf06effe43a3aa0fc4e881403e078094b" translate="yes" xml:space="preserve">
          <source>A right fold over the elements with no starting value</source>
          <target state="translated">開始値のない要素の上に右折します。</target>
        </trans-unit>
        <trans-unit id="1bd8cdef3742749b47082f965a23008abf9bc15b" translate="yes" xml:space="preserve">
          <source>A rule does not need to be in the same module as (any of) the variables it mentions, though of course they need to be in scope.</source>
          <target state="translated">ルールは、それが言及している(いずれかの)変数と同じモジュール内にある必要はありませんが、もちろんスコープ内にある必要があります。</target>
        </trans-unit>
        <trans-unit id="4dda8ffe8bacae7a3d13b78da8fc37161b54e971" translate="yes" xml:space="preserve">
          <source>A rule may optionally have a phase-control number (see &lt;a href=&quot;#phase-control&quot;&gt;Phase control&lt;/a&gt;), immediately after the name of the rule. Thus:</source>
          <target state="translated">ルールには、オプションで、ルールの名前の直後に&lt;a href=&quot;#phase-control&quot;&gt;フェーズ制御&lt;/a&gt;番号（フェーズ制御を参照）を付けることができます。したがって：</target>
        </trans-unit>
        <trans-unit id="9f50ddc31db41c043270b82360d43d4990fd88e5" translate="yes" xml:space="preserve">
          <source>A rule may optionally have a phase-control number (see &lt;a href=&quot;pragmas#phase-control&quot;&gt;Phase control&lt;/a&gt;), immediately after the name of the rule. Thus:</source>
          <target state="translated">ルールには、オプションで、ルール名の直後に&lt;a href=&quot;pragmas#phase-control&quot;&gt;フェーズ制御&lt;/a&gt;番号（フェーズ制御を参照）を付けることができます。したがって：</target>
        </trans-unit>
        <trans-unit id="ba8873804ea20a68777a6a79acc2a5e0d1a22d48" translate="yes" xml:space="preserve">
          <source>A safe way to create and work with a mutable array before returning an immutable array for later perusal. This function avoids copying the array before returning it - it uses &lt;code&gt;unsafeFreeze&lt;/code&gt; internally, but this wrapper is a safe interface to that function.</source>
          <target state="translated">後で閲覧するために不変の配列を返す前に、可変配列を作成して操作する安全な方法。この関数は、配列を返す前に配列をコピーすることを避けます- 内部で &lt;code&gt;unsafeFreeze&lt;/code&gt; を使用しますが、このラッパーはその関数への安全なインターフェースです。</target>
        </trans-unit>
        <trans-unit id="8ed6207609d767c14b5aa06f9aa68c12587a18b1" translate="yes" xml:space="preserve">
          <source>A safe way to create and work with an unboxed mutable array before returning an immutable array for later perusal. This function avoids copying the array before returning it - it uses &lt;code&gt;unsafeFreeze&lt;/code&gt; internally, but this wrapper is a safe interface to that function.</source>
          <target state="translated">後で閲覧するために不変の配列を返す前に、ボックス化されていない可変配列を作成して操作するための安全な方法。この関数は、配列を返す前に配列をコピーすることを避けます- 内部で &lt;code&gt;unsafeFreeze&lt;/code&gt; を使用しますが、このラッパーはその関数への安全なインターフェースです。</target>
        </trans-unit>
        <trans-unit id="b9df3dc079f00f9a8e0de830c01848206acb9ca5" translate="yes" xml:space="preserve">
          <source>A sample (consisting of a list of break-down classes, e.g. cost centres, and heap residency sizes), is to be encoded in the body of one or more events.</source>
          <target state="translated">サンプル(ブレークダウンクラスのリスト(例えば、コストセンター、ヒープの居住サイズなど)からなる)は、1つ以上のイベントのボディにエンコードされる。</target>
        </trans-unit>
        <trans-unit id="75c24f2265f3d8c4ccd393f15ae237ff3f6f2a33" translate="yes" xml:space="preserve">
          <source>A scoped type variable stands for a type &lt;em&gt;variable&lt;/em&gt;, and not for a &lt;em&gt;type&lt;/em&gt;. (This is a change from GHC&amp;rsquo;s earlier design.)</source>
          <target state="translated">スコープ型変数は、型の略&lt;em&gt;変数&lt;/em&gt;のために、そしてない&lt;em&gt;タイプ&lt;/em&gt;。（これはGHCの以前の設計からの変更点です。）</target>
        </trans-unit>
        <trans-unit id="f9e8504d9f7ca56788ad83a6712e3deabb56b1fb" translate="yes" xml:space="preserve">
          <source>A sequence of actions produces a value only if all the actions in the sequence do. If one exits, the rest of the sequence is skipped and the composite action exits.</source>
          <target state="translated">アクションのシーケンスは、シーケンス内のすべてのアクションが実行した場合にのみ値を生成します。1つのアクションが終了した場合、残りのシーケンスはスキップされ、複合アクションは終了します。</target>
        </trans-unit>
        <trans-unit id="627ab33bc11dc284fde08d4bb2c60e4ca6633e05" translate="yes" xml:space="preserve">
          <source>A sequence of actions succeeds, producing a value, only if all the actions in the sequence are successful. If one fails with an error, the rest of the sequence is skipped and the composite action fails with that error.</source>
          <target state="translated">シーケンス内のすべてのアクションが成功した場合にのみ、一連のアクションが成功し、値を生成します。1つのアクションがエラーで失敗した場合、残りのシーケンスはスキップされ、複合アクションはそのエラーで失敗します。</target>
        </trans-unit>
        <trans-unit id="2df1f1dd397310b516738a6b735261200af88e24" translate="yes" xml:space="preserve">
          <source>A sequence of actions terminates normally, producing a value, only if none of the actions in the sequence throws an exception. If one throws an exception, the rest of the sequence is skipped and the composite action exits with that exception.</source>
          <target state="translated">アクションのシーケンスは、シーケンス内のアクションのどれもが例外をスローしない場合にのみ、値を生成して正常に終了します。例外が発生した場合、残りのシーケンスはスキップされ、複合アクションはその例外で終了します。</target>
        </trans-unit>
        <trans-unit id="86877c5118e45e245e3a082f5d36380aaa868a97" translate="yes" xml:space="preserve">
          <source>A sequence of non-space characters, or a sequence of arbitrary characters surrounded by quotes &lt;code&gt;&quot;....&quot;&lt;/code&gt;.</source>
          <target state="translated">スペース以外の文字のシーケンス、または引用符 &lt;code&gt;&quot;....&quot;&lt;/code&gt; で囲まれた任意の文字のシーケンス。</target>
        </trans-unit>
        <trans-unit id="76595a701ee44ea1c9f930a9c60dd85fa6bdaa4c" translate="yes" xml:space="preserve">
          <source>A sequence of strings, separated by commas. The sequence may be empty.</source>
          <target state="translated">コンマで区切られた文字列のシーケンス。シーケンスは空の場合もあります。</target>
        </trans-unit>
        <trans-unit id="94dd7b6a2c0e4fe592c072a99a09ce1205c850da" translate="yes" xml:space="preserve">
          <source>A sequential garbage collection has been requested by a capability.</source>
          <target state="translated">シーケンシャルガベージコレクションがケイパビリティによって要求されました。</target>
        </trans-unit>
        <trans-unit id="b9195a974dd24c0ef39d75bed4d1efb9a1d3015e" translate="yes" xml:space="preserve">
          <source>A set of integers.</source>
          <target state="translated">整数の集合。</target>
        </trans-unit>
        <trans-unit id="bb204bd8db13fe7816a94a82e9d47e0712050306" translate="yes" xml:space="preserve">
          <source>A set of signals reserved for use by the implementation. In GHC, this will normally include either &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:sigVTALRM&quot;&gt;sigVTALRM&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:sigALRM&quot;&gt;sigALRM&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">実装で使用するために予約されている信号のセット。GHCでは、これには通常 &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:sigVTALRM&quot;&gt;sigVTALRM&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:sigALRM&quot;&gt;sigALRM&lt;/a&gt;&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="2a966b0c2cbc724a4e1636286c1f35ede7a08d8c" translate="yes" xml:space="preserve">
          <source>A set of values &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">値のセット &lt;code&gt;a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a84ea57aa89435041641005d90f97cd8afe4994e" translate="yes" xml:space="preserve">
          <source>A setEnv implementation that allows blank environment variables. Mimics the &lt;code&gt;&lt;a href=&quot;system-posix#v:Env&quot;&gt;Env&lt;/a&gt;&lt;/code&gt; module from the &lt;code&gt;unix&lt;/code&gt; package, but with support for Windows too.</source>
          <target state="translated">空白の環境変数を許可するsetEnv実装。 &lt;code&gt;unix&lt;/code&gt; パッケージの &lt;code&gt;&lt;a href=&quot;system-posix#v:Env&quot;&gt;Env&lt;/a&gt;&lt;/code&gt; モジュールを模倣しますが、Windowsもサポートしています。</target>
        </trans-unit>
        <trans-unit id="0e9f33b64534c5d6c799976470e6fc95c2cda254" translate="yes" xml:space="preserve">
          <source>A shared I/O port is almost the same as a &lt;code&gt;MVar#&lt;/code&gt;!). The main difference is that IOPort has no deadlock detection or deadlock breaking code that forcibly releases the lock.</source>
          <target state="translated">共有I / Oポートは &lt;code&gt;MVar#&lt;/code&gt; とほぼ同じです！）。主な違いは、IOPortには、ロックを強制的に解放するデッドロック検出またはデッドロック解除コードがないことです。</target>
        </trans-unit>
        <trans-unit id="f4ca239f09f9ab5cacd4dc55290c45509ce3c667" translate="yes" xml:space="preserve">
          <source>A shared mutable variable (&lt;em&gt;not&lt;/em&gt; the same as a &lt;code&gt;MutVar#&lt;/code&gt;!). (Note: in a non-concurrent implementation, &lt;code&gt;(MVar# a)&lt;/code&gt; can be represented by &lt;code&gt;(MutVar# (Maybe a))&lt;/code&gt;.)</source>
          <target state="translated">Aは、（変更可能な変数を共有し&lt;em&gt;ていない&lt;/em&gt;と同じ &lt;code&gt;MutVar#&lt;/code&gt; ！）。（注：非並行実装では、 &lt;code&gt;(MVar# a)&lt;/code&gt; は &lt;code&gt;(MutVar# (Maybe a))&lt;/code&gt; で表すことができます。）</target>
        </trans-unit>
        <trans-unit id="a82158df9a5688ce51d763088d1b6426e23f9a62" translate="yes" xml:space="preserve">
          <source>A shortcut for multiple definitions which use &lt;code&gt;#const&lt;/code&gt;. Each &lt;code&gt;value&lt;/code&gt; is a name of a C integer constant, e.g. enumeration value. The name will be translated to Haskell by making each letter following an underscore uppercase, making all the rest lowercase, and removing underscores. You can supply a different translation by writing &lt;code&gt;hs_name = c_value&lt;/code&gt; instead of a &lt;code&gt;value&lt;/code&gt;, in which case &lt;code&gt;c_value&lt;/code&gt; may be an arbitrary expression. The &lt;code&gt;hs_name&lt;/code&gt; will be defined as having the specified &lt;code&gt;type&lt;/code&gt;. Its definition is the specified &lt;code&gt;constructor&lt;/code&gt; (which in fact may be an expression or be empty) applied to the appropriate integer value. You can have multiple &lt;code&gt;#enum&lt;/code&gt; definitions with the same &lt;code&gt;type&lt;/code&gt;; this construct does not emit the type definition itself.</source>
          <target state="translated">&lt;code&gt;#const&lt;/code&gt; を使用する複数の定義のショートカット。各 &lt;code&gt;value&lt;/code&gt; は、列挙値などのC整数定数の名前です。名前は、アンダースコアを大文字にし、残りをすべて小文字にし、アンダースコアを削除することにより、Haskellに翻訳されます。あなたが書き込むことによって、異なる翻訳を供給することができ &lt;code&gt;hs_name = c_value&lt;/code&gt; 代わりの &lt;code&gt;value&lt;/code&gt; ケースここで、 &lt;code&gt;c_value&lt;/code&gt; は任意の式であってもよいし。 &lt;code&gt;hs_name&lt;/code&gt; を指定有するものとして定義される &lt;code&gt;type&lt;/code&gt; 。その定義は、適切な整数値に適用される指定された &lt;code&gt;constructor&lt;/code&gt; （実際には式または空の場合があります）です。あなたは複数を持つことができます &lt;code&gt;#enum&lt;/code&gt; 同じ &lt;code&gt;type&lt;/code&gt; #enum定義; この構成体は、型定義自体を発行しません。</target>
        </trans-unit>
        <trans-unit id="00e25301890375feab76786821b7d4508efb82ce" translate="yes" xml:space="preserve">
          <source>A signature file is denoted by an &lt;code&gt;hsig&lt;/code&gt; file; every required signature must have an &lt;code&gt;hsig&lt;/code&gt; file (even if it is an empty one), including required signatures inherited from dependencies. Signatures can be imported using an ordinary &lt;code&gt;import Sig&lt;/code&gt; declaration.</source>
          <target state="translated">署名ファイルは &lt;code&gt;hsig&lt;/code&gt; ファイルで示されます。依存関係から継承された必要な署名を含め、必要なすべての署名には、（空のファイルであっても） &lt;code&gt;hsig&lt;/code&gt; ファイルが必要です。署名は、通常の &lt;code&gt;import Sig&lt;/code&gt; 宣言を使用してインポートできます。</target>
        </trans-unit>
        <trans-unit id="92355b0e296eb8f9e53318fcbdb4d680dbc31d1d" translate="yes" xml:space="preserve">
          <source>A signed integral type that can be losslessly converted to and from &lt;code&gt;Ptr&lt;/code&gt;. This type is also compatible with the C99 type &lt;code&gt;intptr_t&lt;/code&gt;, and can be marshalled to and from that type safely.</source>
          <target state="translated">&lt;code&gt;Ptr&lt;/code&gt; との間で可逆的に変換できる符号付き整数型。この型はC99型 &lt;code&gt;intptr_t&lt;/code&gt; とも互換性があり、その型との間で安全にマーシャリングできます。</target>
        </trans-unit>
        <trans-unit id="948520b277e60dcee21361dd65adb915f2606d36" translate="yes" xml:space="preserve">
          <source>A similar transformation of array values may be achieved using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;&lt;a href=&quot;data-array#t:Array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; instance of the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; クラスの &lt;code&gt;&lt;a href=&quot;data-array#t:Array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; インスタンスからの &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; を使用して、配列値の同様の変換を実現できます。</target>
        </trans-unit>
        <trans-unit id="99bde5053270918eb2f3d7c1e964f644e4ce138b" translate="yes" xml:space="preserve">
          <source>A similar transformation of array values may be achieved using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;&lt;a href=&quot;data-array#t:Array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; instance of the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">A similar transformation of array values may be achieved using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;&lt;a href=&quot;data-array#t:Array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; instance of the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; class.</target>
        </trans-unit>
        <trans-unit id="4de6912d1447ddb732a8d09237cfff4f57791648" translate="yes" xml:space="preserve">
          <source>A similar transformation of array values may be achieved using &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;&lt;a href=&quot;data-array#t:Array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; instance of the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">配列値の同様の変換は、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; クラスの &lt;code&gt;&lt;a href=&quot;data-array#t:Array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; インスタンスからの &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; を使用して実現できます。</target>
        </trans-unit>
        <trans-unit id="fbbe5e3287fe101eaac49bce2bfcb028d8f2b308" translate="yes" xml:space="preserve">
          <source>A similar transformation of array values may be achieved using &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;&lt;a href=&quot;ghc-arr#t:Array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; instance of the &lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; クラスの &lt;code&gt;&lt;a href=&quot;ghc-arr#t:Array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; インスタンスからの &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; を使用して、配列値の同様の変換を実現できます。</target>
        </trans-unit>
        <trans-unit id="f6c85786bd39c1497a36a8cbe06706b97c38a416" translate="yes" xml:space="preserve">
          <source>A simple choice for the type associated with flags is to define a type &lt;code&gt;Flag&lt;/code&gt; as an algebraic type representing the possible flags and their arguments:</source>
          <target state="translated">フラグに関連付けられた型の単純な選択は、可能なフラグとその引数を表す代数型として型 &lt;code&gt;Flag&lt;/code&gt; を定義することです：</target>
        </trans-unit>
        <trans-unit id="385ee26bb3c563691e99d165abb3ca38a355c178" translate="yes" xml:space="preserve">
          <source>A simple day and time aggregate, where the day is of the specified parameter, and the time is a TimeOfDay. Conversion of this (as local civil time) to UTC depends on the time zone. Conversion of this (as local mean time) to UT1 depends on the longitude.</source>
          <target state="translated">単純な日と時間の集合体で、日は指定されたパラメータ、時間はTimeOfDayです。これのUTCへの変換はタイムゾーンに依存します。これを(ローカル平均時間としての)UT1に変換すると、経度に依存します。</target>
        </trans-unit>
        <trans-unit id="5071edc607af851a249c97dfb4d0c57e03432a4d" translate="yes" xml:space="preserve">
          <source>A simple example of the new notation is the expression</source>
          <target state="translated">新しい表記法の簡単な例としては、次のような式があります。</target>
        </trans-unit>
        <trans-unit id="32cefd4bea4e7110a3dca7239bc47887ca83ce67" translate="yes" xml:space="preserve">
          <source>A simple pairing heap.</source>
          <target state="translated">シンプルなペアリングヒープ。</target>
        </trans-unit>
        <trans-unit id="8ad0b83378258a314fc0adf90a8e10c9bc3f1588" translate="yes" xml:space="preserve">
          <source>A simple use of unfoldr:</source>
          <target state="translated">unfoldrの簡単な使い方。</target>
        </trans-unit>
        <trans-unit id="a1f654f7060b7d2d650700b6c757eab119833574" translate="yes" xml:space="preserve">
          <source>A simpler version of this function is:</source>
          <target state="translated">この関数のよりシンプルなバージョンは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="109ec8484c225e4b238b8dbafe102ddb90cbe663" translate="yes" xml:space="preserve">
          <source>A single &lt;code&gt;deriving&lt;/code&gt; clause at the end of a datatype.</source>
          <target state="translated">データ型の最後にある単一の &lt;code&gt;deriving&lt;/code&gt; 句。</target>
        </trans-unit>
        <trans-unit id="07552ccc8f83d8da8c2ff1373fe5871fc375aea0" translate="yes" xml:space="preserve">
          <source>A single Char fragment</source>
          <target state="translated">単一の Char フラグメント</target>
        </trans-unit>
        <trans-unit id="c8a470d3f21b5f8bd88b72ca5e212009e6a9ba92" translate="yes" xml:space="preserve">
          <source>A single data constructor.</source>
          <target state="translated">単一のデータコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="8b90ffe9d4585beccabc5b42a63afc7e90a28d58" translate="yes" xml:space="preserve">
          <source>A single fixed-width event emitted during program start-up describing the samples that follow.</source>
          <target state="translated">プログラムのスタートアップ時に放出される単一の固定幅イベントで、それに続くサンプルを記述します。</target>
        </trans-unit>
        <trans-unit id="dce34a123f3c9357183ae1491a545fbaf2ea2561" translate="yes" xml:space="preserve">
          <source>A single location in the source code.</source>
          <target state="translated">ソースコード内の一箇所。</target>
        </trans-unit>
        <trans-unit id="50f411ba135dec27d6a3801b72dc1838706dca5a" translate="yes" xml:space="preserve">
          <source>A single vertex that is not in any cycle.</source>
          <target state="translated">どのサイクルにも入っていない単一の頂点。</target>
        </trans-unit>
        <trans-unit id="97bd9aab1d447685b69723475ad0a956cc38e08e" translate="yes" xml:space="preserve">
          <source>A sink of event-log data.</source>
          <target state="translated">イベントログデータのシンク。</target>
        </trans-unit>
        <trans-unit id="80976804b592e9e2e94c0bbcedb3e158f3a504b2" translate="yes" xml:space="preserve">
          <source>A size in UTF-16 code units.</source>
          <target state="translated">UTF-16コード単位のサイズ。</target>
        </trans-unit>
        <trans-unit id="909e2a440c7053acbcd40d2af23d2760c9d12442" translate="yes" xml:space="preserve">
          <source>A skip channel is a pair of &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;s. The first &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; contains the current value, and a list of semaphores that need to be notified when it changes. The second &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is a semaphore for this particular reader: it is full if there is a value in the channel that this reader has not read yet, and empty otherwise.</source>
          <target state="translated">スキップチャネルは、 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; のペアです。最初の &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; には、現在の値と、変更時に通知する必要のあるセマフォのリストが含まれています。2番目の &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; はこの特定のリーダーのセマフォです。このリーダーがまだ読み取っていないチャネルに値がある場合はフルになり、それ以外の場合は空になります。</target>
        </trans-unit>
        <trans-unit id="75b2421aa3377ed4749c4916a0cb0dcfc04c0013" translate="yes" xml:space="preserve">
          <source>A slight variation on &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:modifyMVar_&quot;&gt;modifyMVar_&lt;/a&gt;&lt;/code&gt; that allows a value to be returned (&lt;code&gt;b&lt;/code&gt;) in addition to the modified value of the &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">上のわずかな変化 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:modifyMVar_&quot;&gt;modifyMVar_&lt;/a&gt;&lt;/code&gt; 値（返却されることを可能にする &lt;code&gt;b&lt;/code&gt; の修正値に加えて） &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f69c10ed60508f59cb5a529f1b359642cbe6b858" translate="yes" xml:space="preserve">
          <source>A slightly faster version of &lt;code&gt;&lt;a href=&quot;system-io#v:fixIO&quot;&gt;fixIO&lt;/a&gt;&lt;/code&gt; that may not be safe to use with multiple threads. The unsafety arises when used like this:</source>
          <target state="translated">複数のスレッドで使用するのは安全ではない可能性がある &lt;code&gt;&lt;a href=&quot;system-io#v:fixIO&quot;&gt;fixIO&lt;/a&gt;&lt;/code&gt; のやや高速なバージョン。このように使用すると、危険が発生します。</target>
        </trans-unit>
        <trans-unit id="1a46cd68f2f2846ae726246b12281b2435629226" translate="yes" xml:space="preserve">
          <source>A small example:</source>
          <target state="translated">小さな例です。</target>
        </trans-unit>
        <trans-unit id="f3fa3447a8afd4949b9c12f9f8e9147cd390aae9" translate="yes" xml:space="preserve">
          <source>A small word of warning: &lt;a href=&quot;#ghc-flag--cpp&quot;&gt;&lt;code&gt;-cpp&lt;/code&gt;&lt;/a&gt; is not friendly to &amp;ldquo;string gaps&amp;rdquo;. In other words, strings such as the following:</source>
          <target state="translated">警告の短い言葉：&lt;a href=&quot;#ghc-flag--cpp&quot;&gt; &lt;code&gt;-cpp&lt;/code&gt; &lt;/a&gt;は、「文字列のギャップ」に対応していません。つまり、次のような文字列です。</target>
        </trans-unit>
        <trans-unit id="b896df9db0191f80e6db640a0983ae75b9330707" translate="yes" xml:space="preserve">
          <source>A space character</source>
          <target state="translated">スペースキャラクター</target>
        </trans-unit>
        <trans-unit id="2cf7bf5a17da5fc043fc8f14a663aecfa5439dbc" translate="yes" xml:space="preserve">
          <source>A space efficient, packed, unboxed Unicode text type.</source>
          <target state="translated">スペース効率の良い、パックされた、箱なしのUnicodeテキストタイプ。</target>
        </trans-unit>
        <trans-unit id="b320aab997efd2d7ca1e00ac225c124b5d920ec5" translate="yes" xml:space="preserve">
          <source>A space-efficient representation of a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; vector, supporting many efficient operations.</source>
          <target state="translated">多くの効率的な操作をサポートする、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; ベクトルのスペース効率の良い表現。</target>
        </trans-unit>
        <trans-unit id="edd5ed41a7ad61d8ccb7e1f320dd68310fe46295" translate="yes" xml:space="preserve">
          <source>A space-efficient representation of a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; vector, supporting many efficient operations.</source>
          <target state="translated">A space-efficient representation of a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; vector, supporting many efficient operations.</target>
        </trans-unit>
        <trans-unit id="528bfc88f2580c5e4224639fe1f9ce14d026166f" translate="yes" xml:space="preserve">
          <source>A space-efficient representation of a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; vector, supporting many efficient operations.</source>
          <target state="translated">多くの効率的な操作をサポートする、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; ベクトルのスペース効率の高い表現。</target>
        </trans-unit>
        <trans-unit id="e34c30bb293046f1353d1b4c1fb7e4c15767c64f" translate="yes" xml:space="preserve">
          <source>A spanning forest of the graph, obtained from a depth-first search of the graph starting from each vertex in an unspecified order.</source>
          <target state="translated">各頂点から始まるグラフの深さ優先探索から得られるグラフのスパニングフォレスト。</target>
        </trans-unit>
        <trans-unit id="4794ea6b46c0b3e368866c3f6657148757943020" translate="yes" xml:space="preserve">
          <source>A spanning forest of the part of the graph reachable from the listed vertices, obtained from a depth-first search of the graph starting at each of the listed vertices in order.</source>
          <target state="translated">リストされた各頂点から順に始まるグラフの深さ優先探索から得られる,リストされた頂点から到達可能なグラフの部分のスパニングフォレスト.</target>
        </trans-unit>
        <trans-unit id="17409cdf1a726a6b210a04d4446854b3d6bf4233" translate="yes" xml:space="preserve">
          <source>A spark has been GC&amp;rsquo;d before being evaluated.</source>
          <target state="translated">A spark has been GC&amp;rsquo;d before being evaluated.</target>
        </trans-unit>
        <trans-unit id="fc7a9f3b3b4de7ca05232bf75a6a63a5d4979fe6" translate="yes" xml:space="preserve">
          <source>A spark has been added to the spark pool.</source>
          <target state="translated">スパークプールにスパークが追加されました。</target>
        </trans-unit>
        <trans-unit id="20ef42be18896ca33cf39edd26afbfce8fc5c5ae" translate="yes" xml:space="preserve">
          <source>A spark has been stolen from another capability for evaluation.</source>
          <target state="translated">評価のために別の能力から火花が盗まれています。</target>
        </trans-unit>
        <trans-unit id="000576d9dd7d866ebbbaf02ec2da581917b4c07a" translate="yes" xml:space="preserve">
          <source>A special case of &lt;code&gt;&lt;a href=&quot;ghc-err#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt;. It is expected that compilers will recognize this and insert error messages which are more appropriate to the context in which &lt;code&gt;&lt;a href=&quot;ghc-err#v:undefined&quot;&gt;undefined&lt;/a&gt;&lt;/code&gt; appears.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-err#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; 特別なケース。コンパイラーがこれを認識し、 &lt;code&gt;&lt;a href=&quot;ghc-err#v:undefined&quot;&gt;undefined&lt;/a&gt;&lt;/code&gt; が表示されるコンテキストにより適切なエラーメッセージを挿入することが期待されます。</target>
        </trans-unit>
        <trans-unit id="73c8066b78af5a513799e5e6e43841a928951845" translate="yes" xml:space="preserve">
          <source>A special case of &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt;. It is expected that compilers will recognize this and insert error messages which are more appropriate to the context in which &lt;code&gt;&lt;a href=&quot;prelude#v:undefined&quot;&gt;undefined&lt;/a&gt;&lt;/code&gt; appears.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; 特別なケース。コンパイラーがこれを認識し、 &lt;code&gt;&lt;a href=&quot;prelude#v:undefined&quot;&gt;undefined&lt;/a&gt;&lt;/code&gt; が表示されるコンテキストにより適切なエラーメッセージを挿入することが期待されます。</target>
        </trans-unit>
        <trans-unit id="b61fe333d2ebb606e68ef9534fb8ee51a3dcbe6f" translate="yes" xml:space="preserve">
          <source>A specialised variant of &lt;code&gt;&lt;a href=&quot;control-exception#v:bracket&quot;&gt;bracket&lt;/a&gt;&lt;/code&gt; with just a computation to run afterward.</source>
          <target state="translated">後で実行するための計算のみを含む、 &lt;code&gt;&lt;a href=&quot;control-exception#v:bracket&quot;&gt;bracket&lt;/a&gt;&lt;/code&gt; 特殊なバリアント。</target>
        </trans-unit>
        <trans-unit id="d381bfcecd222a40938da33628701d9caa7e0fc9" translate="yes" xml:space="preserve">
          <source>A specialised variant of &lt;code&gt;&lt;a href=&quot;ghc-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt;, using precedence context zero, and returning an ordinary &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">優先コンテキストゼロを使用し、通常の &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; を返す、 &lt;code&gt;&lt;a href=&quot;ghc-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; の特殊なバリアント。</target>
        </trans-unit>
        <trans-unit id="3551127e07d1074127cf665da3dc3de8f74d78ac" translate="yes" xml:space="preserve">
          <source>A specialised variant of &lt;code&gt;&lt;a href=&quot;prelude#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt;, using precedence context zero, and returning an ordinary &lt;code&gt;&lt;a href=&quot;prelude#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">優先コンテキストゼロを使用し、通常の &lt;code&gt;&lt;a href=&quot;prelude#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; を返す、 &lt;code&gt;&lt;a href=&quot;prelude#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; の特殊なバリアント。</target>
        </trans-unit>
        <trans-unit id="7f3343104c8933573bbaff2361f546628d45e8d8" translate="yes" xml:space="preserve">
          <source>A specialised variant of &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:bracket&quot;&gt;bracket&lt;/a&gt;&lt;/code&gt; with just a computation to run afterward.</source>
          <target state="translated">後で実行するための計算のみを含む、 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:bracket&quot;&gt;bracket&lt;/a&gt;&lt;/code&gt; 特殊なバリアント。</target>
        </trans-unit>
        <trans-unit id="addf8bf904a9b53d42ba0004dc6e0c96e5f166b4" translate="yes" xml:space="preserve">
          <source>A specialised variant of &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt;, using precedence context zero, and returning an ordinary &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">優先コンテキストゼロを使用し、通常の &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; を返す、 &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; の特殊なバリアント。</target>
        </trans-unit>
        <trans-unit id="1a0c5e6176b1b7f34e452cb42488bc078090478d" translate="yes" xml:space="preserve">
          <source>A specialised version of &lt;code&gt;&lt;a href=&quot;system-mem-weak#v:mkWeak&quot;&gt;mkWeak&lt;/a&gt;&lt;/code&gt; where the value is actually a pair of the key and value passed to &lt;code&gt;&lt;a href=&quot;system-mem-weak#v:mkWeakPair&quot;&gt;mkWeakPair&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-mem-weak#v:mkWeak&quot;&gt;mkWeak&lt;/a&gt;&lt;/code&gt; の特別なバージョンで、値は実際には &lt;code&gt;&lt;a href=&quot;system-mem-weak#v:mkWeakPair&quot;&gt;mkWeakPair&lt;/a&gt;&lt;/code&gt; に渡されるキーと値のペアです。</target>
        </trans-unit>
        <trans-unit id="ed256b1475f3db11a1e053e7393f2e62ac0741a5" translate="yes" xml:space="preserve">
          <source>A specialised version of &lt;code&gt;&lt;a href=&quot;system-mem-weak#v:mkWeak&quot;&gt;mkWeak&lt;/a&gt;&lt;/code&gt;, where the key and the value are the same object:</source>
          <target state="translated">キーと値が同じオブジェクトである &lt;code&gt;&lt;a href=&quot;system-mem-weak#v:mkWeak&quot;&gt;mkWeak&lt;/a&gt;&lt;/code&gt; の特殊バージョン：</target>
        </trans-unit>
        <trans-unit id="88cbeb4d1e4332278f7efaec95990a7cd06ab5a6" translate="yes" xml:space="preserve">
          <source>A specialised version of &lt;code&gt;&lt;a href=&quot;system-mem-weak#v:mkWeakPtr&quot;&gt;mkWeakPtr&lt;/a&gt;&lt;/code&gt;, where the &lt;code&gt;&lt;a href=&quot;system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; object returned is simply thrown away (however the finalizer will be remembered by the garbage collector, and will still be run when the key becomes unreachable).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-mem-weak#v:mkWeakPtr&quot;&gt;mkWeakPtr&lt;/a&gt;&lt;/code&gt; の特殊なバージョン。返された &lt;code&gt;&lt;a href=&quot;system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; オブジェクトは単に破棄されます（ただし、ファイナライザはガベージコレクタによって記憶され、キーが到達不能になったときに実行されます）。</target>
        </trans-unit>
        <trans-unit id="c000f76b0d515b8c303304c303dc38592d07556a" translate="yes" xml:space="preserve">
          <source>A splice can occur in place of</source>
          <target state="translated">の代わりにスプライスが発生することがあります。</target>
        </trans-unit>
        <trans-unit id="8347bfbd4296dc52f2f8f7af1d3b4addc2cc0243" translate="yes" xml:space="preserve">
          <source>A splice is written &lt;code&gt;$x&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is an arbitrary expression. There must be no space between the &amp;ldquo;$&amp;rdquo; and the expression. This use of &amp;ldquo;$&amp;rdquo; overrides its meaning as an infix operator, just as &amp;ldquo;M.x&amp;rdquo; overrides the meaning of &amp;rdquo;.&amp;rdquo; as an infix operator. If you want the infix operator, put spaces around it.</source>
          <target state="translated">スプライスは &lt;code&gt;$x&lt;/code&gt; と記述されます。ここで、 &lt;code&gt;x&lt;/code&gt; は任意の式です。「$」と式の間にスペースがあってはなりません。この「$」の使用は、「Mx」が「」の意味をオーバーライドするのと同じように、中置演算子としての意味をオーバーライドします。中置演算子として。中置演算子が必要な場合は、その周りにスペースを入れてください。</target>
        </trans-unit>
        <trans-unit id="cd4cb3a4aa37b46f04784c0f6f0060998bc7f64a" translate="yes" xml:space="preserve">
          <source>A splice is written &lt;code&gt;$x&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is an identifier, or &lt;code&gt;$(...)&lt;/code&gt;, where the &amp;ldquo;&amp;hellip;&amp;rdquo; is an arbitrary expression. There must be no space between the &amp;ldquo;$&amp;rdquo; and the identifier or parenthesis. This use of &amp;ldquo;$&amp;rdquo; overrides its meaning as an infix operator, just as &amp;ldquo;M.x&amp;rdquo; overrides the meaning of &amp;ldquo;.&amp;rdquo; as an infix operator. If you want the infix operator, put spaces around it.</source>
          <target state="translated">A splice is written &lt;code&gt;$x&lt;/code&gt; , where &lt;code&gt;x&lt;/code&gt; is an identifier, or &lt;code&gt;$(...)&lt;/code&gt; , where the &amp;ldquo;&amp;hellip;&amp;rdquo; is an arbitrary expression. There must be no space between the &amp;ldquo;$&amp;rdquo; and the identifier or parenthesis. This use of &amp;ldquo;$&amp;rdquo; overrides its meaning as an infix operator, just as &amp;ldquo;M.x&amp;rdquo; overrides the meaning of &amp;ldquo;.&amp;rdquo; as an infix operator. If you want the infix operator, put spaces around it.</target>
        </trans-unit>
        <trans-unit id="2fc7d08e30e7130abc877e7e166eb7f0bb2f0e91" translate="yes" xml:space="preserve">
          <source>A splice is written &lt;code&gt;$x&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is an identifier, or &lt;code&gt;$(...)&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is an arbitrary expression. There must be no space between the &amp;ldquo;$&amp;rdquo; and the identifier or parenthesis. This use of &amp;ldquo;$&amp;rdquo; overrides its meaning as an infix operator, just as &amp;ldquo;M.x&amp;rdquo; overrides the meaning of &amp;rdquo;.&amp;rdquo; as an infix operator. If you want the infix operator, put spaces around it.</source>
          <target state="translated">スプライスは &lt;code&gt;$x&lt;/code&gt; （ &lt;code&gt;x&lt;/code&gt; は識別子）、または &lt;code&gt;$(...)&lt;/code&gt; (「...」は任意の式）で記述されます。「$」と識別子または括弧の間にスペースがあってはなりません。この「$」の使用は、「Mx」が「」の意味をオーバーライドするのと同じように、中置演算子としての意味をオーバーライドします。中置演算子として。中置演算子が必要な場合は、その前後にスペースを入れてください。</target>
        </trans-unit>
        <trans-unit id="029020ae6b32756dd16466eb423a1a26ab4457d6" translate="yes" xml:space="preserve">
          <source>A state monad parameterized by the type &lt;code&gt;s&lt;/code&gt; of the state to carry.</source>
          <target state="translated">状態は、タイプによってパラメータモナド &lt;code&gt;s&lt;/code&gt; キャリーへの状態の。</target>
        </trans-unit>
        <trans-unit id="dc96818c8486fd2f0989d60f3799e6dcb782b7f0" translate="yes" xml:space="preserve">
          <source>A state transformer monad parameterized by:</source>
          <target state="translated">によってパラメータ化された状態変換モナド。</target>
        </trans-unit>
        <trans-unit id="584d223e5ba9554539274f317131b078dc9f657c" translate="yes" xml:space="preserve">
          <source>A static form determines a value of type &lt;code&gt;StaticPtr t&lt;/code&gt;, but just like &lt;code&gt;OverloadedLists&lt;/code&gt; and &lt;code&gt;OverloadedStrings&lt;/code&gt;, this literal expression is overloaded to allow lifting a &lt;code&gt;StaticPtr&lt;/code&gt; into another type implicitly, via the &lt;code&gt;IsStatic&lt;/code&gt; class:</source>
          <target state="translated">静的フォームが型の値を判定する &lt;code&gt;StaticPtr t&lt;/code&gt; を、ちょうどよう &lt;code&gt;OverloadedLists&lt;/code&gt; と &lt;code&gt;OverloadedStrings&lt;/code&gt; 、このリテラル発現が昇降できるようにオーバーロードされ &lt;code&gt;StaticPtr&lt;/code&gt; を介して、暗黙的に別の型に &lt;code&gt;IsStatic&lt;/code&gt; のクラス：</target>
        </trans-unit>
        <trans-unit id="29153c897e531a67acff58cc6b01500af3000f33" translate="yes" xml:space="preserve">
          <source>A storable array is an IO-mutable array which stores its contents in a contiguous memory block living in the C heap. Elements are stored according to the class &lt;code&gt;Storable&lt;/code&gt;. You can obtain the pointer to the array contents to manipulate elements from languages like C.</source>
          <target state="translated">格納可能な配列は、Cヒープにある連続したメモリブロックにその内容を格納するIO可変配列です。要素は &lt;code&gt;Storable&lt;/code&gt; クラスに従って格納されます。配列の内容へのポインタを取得して、Cなどの言語の要素を操作できます。</target>
        </trans-unit>
        <trans-unit id="4f5037287f3893bff45330861345a86eebed76c2" translate="yes" xml:space="preserve">
          <source>A stream of chunks that are constructed in the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドで構築されるチャンクのストリーム。</target>
        </trans-unit>
        <trans-unit id="43919f0b621bd7f60ea00562492dbc3adfa8a6aa" translate="yes" xml:space="preserve">
          <source>A stream of chunks that are constructed in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">A stream of chunks that are constructed in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad.</target>
        </trans-unit>
        <trans-unit id="f56c425d06d6a4abacf4b26c19f6964c1319467d" translate="yes" xml:space="preserve">
          <source>A stream of chunks that are constructed in the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドで構築されるチャンクのストリーム。</target>
        </trans-unit>
        <trans-unit id="9b113394401941b6890516fb8e3af8a462d1fd40" translate="yes" xml:space="preserve">
          <source>A stream oriented decoding result.</source>
          <target state="translated">ストリーム指向のデコード結果。</target>
        </trans-unit>
        <trans-unit id="d911f61b4fa0d9284a8e1a6f69a0f61b1e73b5e6" translate="yes" xml:space="preserve">
          <source>A strict left fold over the elements</source>
          <target state="translated">要素の上に厳格な左折</target>
        </trans-unit>
        <trans-unit id="98cd4454f56f48afeffc70d90f58b5920ca58301" translate="yes" xml:space="preserve">
          <source>A strict pair</source>
          <target state="translated">厳格なペア</target>
        </trans-unit>
        <trans-unit id="6eccc911da51c833236284b3d32b3123513710ad" translate="yes" xml:space="preserve">
          <source>A strict pattern match in a bind statement prevents &lt;code&gt;ApplicativeDo&lt;/code&gt; from transforming that statement to use &lt;code&gt;Applicative&lt;/code&gt;. This is because the transformation would change the semantics by making the expression lazier.</source>
          <target state="translated">bindステートメントでの厳密なパターン一致により、 &lt;code&gt;ApplicativeDo&lt;/code&gt; がそのステートメントを変換して &lt;code&gt;Applicative&lt;/code&gt; を使用することを防ぎます。これは、変換が式をレイジーにすることでセマンティクスを変更するためです。</target>
        </trans-unit>
        <trans-unit id="0814095da0f374f363b2744acbf7641a2610efcb" translate="yes" xml:space="preserve">
          <source>A strict right fold over the elements</source>
          <target state="translated">要素の厳密な右折</target>
        </trans-unit>
        <trans-unit id="0ec086694cd0bcf9cc7eaaf131dce1a8c3f470d3" translate="yes" xml:space="preserve">
          <source>A strict variant of foldr1</source>
          <target state="translated">foldr1の厳密なバリアント</target>
        </trans-unit>
        <trans-unit id="37c2878fde673453465a3e32200c82b9e97c2b4d" translate="yes" xml:space="preserve">
          <source>A strict version of &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt; の厳密なバージョン</target>
        </trans-unit>
        <trans-unit id="00787a530c1e072ddb6f8e17b643611bd5348b98" translate="yes" xml:space="preserve">
          <source>A strict version of &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; の厳密なバージョン。</target>
        </trans-unit>
        <trans-unit id="00a8b3473a1ebcbcb0938b14d80dd5227345445f" translate="yes" xml:space="preserve">
          <source>A strict version of &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt; の厳密なバージョン</target>
        </trans-unit>
        <trans-unit id="d8c8ab54cce45db26e6dab71f39c06ea62ab7980" translate="yes" xml:space="preserve">
          <source>A strict version of &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt; の厳密なバージョン。</target>
        </trans-unit>
        <trans-unit id="5320390dc6f10cc24227a72c79ba582ebcc655a1" translate="yes" xml:space="preserve">
          <source>A strict version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; の厳密なバージョン。</target>
        </trans-unit>
        <trans-unit id="493154631c22520a575e67380475a32d6bd2b085" translate="yes" xml:space="preserve">
          <source>A strict version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt; の厳密なバージョン</target>
        </trans-unit>
        <trans-unit id="3fbcaceb0158cacd282ec70be5aab020df060aca" translate="yes" xml:space="preserve">
          <source>A strict version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt; の厳密なバージョン。</target>
        </trans-unit>
        <trans-unit id="fb8a26929f2fded3b180d5708141aba0e7729a4d" translate="yes" xml:space="preserve">
          <source>A strict version of foldl.</source>
          <target state="translated">foldlの厳密なバージョン。</target>
        </trans-unit>
        <trans-unit id="38c487e511f9d1d69315932a619005a1ef13ecae" translate="yes" xml:space="preserve">
          <source>A strict version of foldl1.</source>
          <target state="translated">foldl1の厳密なバージョン。</target>
        </trans-unit>
        <trans-unit id="3a7a0698bbaa3cecd2768e6bf682a107a5760347" translate="yes" xml:space="preserve">
          <source>A string &lt;code&gt;x&lt;/code&gt; is a caseless match for a string &lt;code&gt;y&lt;/code&gt; if and only if:</source>
          <target state="translated">文字列 &lt;code&gt;x&lt;/code&gt; は、次の場合に限り、文字列 &lt;code&gt;y&lt;/code&gt; の大文字と小文字を区別しない一致です。</target>
        </trans-unit>
        <trans-unit id="0a89823ddb2e0acf1e32d6f1968848a1d41921ad" translate="yes" xml:space="preserve">
          <source>A string can be thrown as an error.</source>
          <target state="translated">文字列をエラーとしてスローすることができます。</target>
        </trans-unit>
        <trans-unit id="a6ae9c82c7d68fe5d1dffcf904a8de12b9166247" translate="yes" xml:space="preserve">
          <source>A string describing the source span enclosing the cost-centre.</source>
          <target state="translated">コストセンターを囲むソース・スパンを記述する文字列。</target>
        </trans-unit>
        <trans-unit id="1236c4b5dbb424adbd898df93abf13e38ab1cf45" translate="yes" xml:space="preserve">
          <source>A string to pass on standard input to the forked process.</source>
          <target state="translated">標準入力をフォークされたプロセスに渡すための文字列。</target>
        </trans-unit>
        <trans-unit id="624066030a645e943a5b155270eb593c7b3b17d0" translate="yes" xml:space="preserve">
          <source>A string with explicit length information in bytes instead of a terminating NUL (allowing NUL characters in the middle of the string).</source>
          <target state="translated">終端のNULの代わりにバイト単位で明示的な長さ情報を持つ文字列(文字列の途中でNUL文字を許可する)。</target>
        </trans-unit>
        <trans-unit id="2356ccf00398e74e586e317a2fe01305d7bf8c72" translate="yes" xml:space="preserve">
          <source>A superclass context for a class &lt;code&gt;C&lt;/code&gt; is allowed if, after expanding type synonyms to their right-hand-sides, and uses of classes (other than &lt;code&gt;C&lt;/code&gt;) to their superclasses, &lt;code&gt;C&lt;/code&gt; does not occur syntactically in the context.</source>
          <target state="translated">クラス &lt;code&gt;C&lt;/code&gt; のスーパークラスコンテキストは、型の同義語を右側に展開し、クラス（ &lt;code&gt;C&lt;/code&gt; 以外）をスーパークラスに使用した後、コンテキストで構文的に &lt;code&gt;C&lt;/code&gt; が発生しない場合に許可されます。</target>
        </trans-unit>
        <trans-unit id="a8df258a3806dcb111bd7b1772adfed8e5b1b40a" translate="yes" xml:space="preserve">
          <source>A synonym for &lt;code&gt;&amp;lt;?&amp;gt;&lt;/code&gt;, but as a function instead of an operator.</source>
          <target state="translated">&lt;code&gt;&amp;lt;?&amp;gt;&lt;/code&gt; の同義語。ただし、演​​算子ではなく関数として。</target>
        </trans-unit>
        <trans-unit id="b99600f4f94d4a88ef68809095d330e12de5939a" translate="yes" xml:space="preserve">
          <source>A synonym for &lt;code&gt;hPut&lt;/code&gt;, for compatibility</source>
          <target state="translated">互換性のために &lt;code&gt;hPut&lt;/code&gt; の同義語</target>
        </trans-unit>
        <trans-unit id="f7bdd4682beedebc0801ab80535b56959469b2ec" translate="yes" xml:space="preserve">
          <source>A system-dependent mode. This is also the default mode. On Unix ELF systems this embeds &lt;code id=&quot;index-1&quot;&gt;RPATH&lt;/code&gt;/&lt;code id=&quot;index-2&quot;&gt;RUNPATH&lt;/code&gt; entries into the shared library or executable. In particular it uses absolute paths to where the shared libraries for the rts and each package can be found. This means the program can immediately be run and it will be able to find the libraries it needs. However it may not be suitable for deployment if the libraries are installed in a different location on another machine.</source>
          <target state="translated">システム依存モード。これもデフォルトのモードです。Unix ELFシステムでは、これは &lt;code id=&quot;index-1&quot;&gt;RPATH&lt;/code&gt; / &lt;code id=&quot;index-2&quot;&gt;RUNPATH&lt;/code&gt; エントリを共有ライブラリまたは実行可能ファイルに埋め込みます。特に、rtsと各パッケージの共有ライブラリがある場所への絶対パスを使用します。つまり、プログラムはすぐに実行でき、必要なライブラリを見つけることができます。ただし、ライブラリが別のマシンの別の場所にインストールされている場合は、展開に適さない可能性があります。</target>
        </trans-unit>
        <trans-unit id="e155fb42dd454dac03073c4506c36df94ce050b3" translate="yes" xml:space="preserve">
          <source>A table of the count of edges from each node.</source>
          <target state="translated">各ノードからの辺の数の表。</target>
        </trans-unit>
        <trans-unit id="e0214aac47583666947c6b02d5dbd5d0f74c69cb" translate="yes" xml:space="preserve">
          <source>A table of the count of edges into each node.</source>
          <target state="translated">各ノードへの辺の数の表。</target>
        </trans-unit>
        <trans-unit id="9e56547706c1d22e7563bc02015e6d5ea9059fce" translate="yes" xml:space="preserve">
          <source>A tactic for dealing with keys present in both maps in &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; の両方のマップに存在するキーを処理するための戦術。</target>
        </trans-unit>
        <trans-unit id="c5b40ab4ad40ca71821f774d179180ff9dbb3299" translate="yes" xml:space="preserve">
          <source>A tactic for dealing with keys present in both maps in &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; に両方のマップに存在するキーを処理するための戦術。</target>
        </trans-unit>
        <trans-unit id="68563c20275c3937fe80971256761864f36ba257" translate="yes" xml:space="preserve">
          <source>A tactic for dealing with keys present in both maps in &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; の両方のマップに存在するキーを処理するための戦術。</target>
        </trans-unit>
        <trans-unit id="d861ca0e3d900bc21406b6b1807bc2b2cf18dc29" translate="yes" xml:space="preserve">
          <source>A tactic for dealing with keys present in both maps in &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; に両方のマップに存在するキーを処理するための戦術。</target>
        </trans-unit>
        <trans-unit id="8ae51b27a95cdff285456cfd64fc7198ed349ffd" translate="yes" xml:space="preserve">
          <source>A tactic for dealing with keys present in both maps in &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; の両方のマップに存在するキーを処理するための戦術。</target>
        </trans-unit>
        <trans-unit id="0f49a606d06085ba26fc41ac70ef7f11a81b40cb" translate="yes" xml:space="preserve">
          <source>A tactic for dealing with keys present in both maps in &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; に両方のマップに存在するキーを処理するための戦術。</target>
        </trans-unit>
        <trans-unit id="f35d2589fef4b7d60b15566c52bfd61bb4b033fd" translate="yes" xml:space="preserve">
          <source>A tactic for dealing with keys present in both maps in &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; の両方のマップに存在するキーを処理するための戦術。</target>
        </trans-unit>
        <trans-unit id="35605a33cfca77541ce0f7a28d4adaaa7f211e60" translate="yes" xml:space="preserve">
          <source>A tactic for dealing with keys present in both maps in &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; に両方のマップに存在するキーを処理するための戦術。</target>
        </trans-unit>
        <trans-unit id="22ba35b272e3222b9000490c23cd7a38c265aa2c" translate="yes" xml:space="preserve">
          <source>A tactic for dealing with keys present in one map but not the other in &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">1つのマップには存在するが、 &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; には存在しないキーを処理するための戦術。</target>
        </trans-unit>
        <trans-unit id="724f196ee83cb8f7d04ef2bfd02c2a5fc6e8942c" translate="yes" xml:space="preserve">
          <source>A tactic for dealing with keys present in one map but not the other in &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">1つのマップに存在するが、中に他のではないキーを扱うための戦術 &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="68f6f41d93467c8eca9791eed5e9e6b94541a4bf" translate="yes" xml:space="preserve">
          <source>A tactic for dealing with keys present in one map but not the other in &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">1つのマップには存在するが、 &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; には存在しないキーを処理するための戦術。</target>
        </trans-unit>
        <trans-unit id="3768165dc6a607a11a4e4e49c5b342c117fa0f2f" translate="yes" xml:space="preserve">
          <source>A tactic for dealing with keys present in one map but not the other in &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">1つのマップに存在するが、中に他のではないキーを扱うための戦術 &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c0f20d68941a262026f0633a3098ddef91196da" translate="yes" xml:space="preserve">
          <source>A tactic for dealing with keys present in one map but not the other in &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">1つのマップには存在するが、 &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; には存在しないキーを処理するための戦術。</target>
        </trans-unit>
        <trans-unit id="e901e7cd9f4ef00918e6cc4628a80d9109d39ab6" translate="yes" xml:space="preserve">
          <source>A tactic for dealing with keys present in one map but not the other in &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">1つのマップに存在するが、中に他のではないキーを扱うための戦術 &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d93c5772a7eda6b6b5cb9d8ee695cda722b263bd" translate="yes" xml:space="preserve">
          <source>A tactic for dealing with keys present in one map but not the other in &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">1つのマップには存在するが、 &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; には存在しないキーを処理するための戦術。</target>
        </trans-unit>
        <trans-unit id="e438d5b20c4d0ae49dae9e96e6eb2bd92c80240d" translate="yes" xml:space="preserve">
          <source>A tactic for dealing with keys present in one map but not the other in &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">1つのマップに存在するが、中に他のではないキーを扱うための戦術 &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c03aaf5092b4ace221cdda40d0db350523640c20" translate="yes" xml:space="preserve">
          <source>A tactic of type &lt;code&gt; SimpleWhenMatched k x y z &lt;/code&gt; is an abstract representation of a function of type &lt;code&gt; k -&amp;gt; x -&amp;gt; y -&amp;gt; Maybe z &lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt; SimpleWhenMatched k x y z &lt;/code&gt; 戦術は、タイプ &lt;code&gt; k -&amp;gt; x -&amp;gt; y -&amp;gt; Maybe z &lt;/code&gt; 関数の抽象的な表現です。</target>
        </trans-unit>
        <trans-unit id="a13beca0501a32224295f634b47d23e06f1ddb66" translate="yes" xml:space="preserve">
          <source>A tactic of type &lt;code&gt; SimpleWhenMissing k x z &lt;/code&gt; is an abstract representation of a function of type &lt;code&gt; k -&amp;gt; x -&amp;gt; Maybe z &lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt; SimpleWhenMissing k x z &lt;/code&gt; 戦術は、タイプ &lt;code&gt; k -&amp;gt; x -&amp;gt; Maybe z &lt;/code&gt; 関数の抽象表現です。</target>
        </trans-unit>
        <trans-unit id="8ba8a10e8973c7adb58835a435c234b5058a0a41" translate="yes" xml:space="preserve">
          <source>A tactic of type &lt;code&gt; WhenMatched f k x y z &lt;/code&gt; is an abstract representation of a function of type &lt;code&gt; k -&amp;gt; x -&amp;gt; y -&amp;gt; f (Maybe z) &lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt; WhenMatched f k x y z &lt;/code&gt; 戦術は、タイプ &lt;code&gt; k -&amp;gt; x -&amp;gt; y -&amp;gt; f (Maybe z) &lt;/code&gt; 関数の抽象表現です。</target>
        </trans-unit>
        <trans-unit id="e2a9c18a71365b1b648cf16681fd8c36a0f1c2b1" translate="yes" xml:space="preserve">
          <source>A tactic of type &lt;code&gt; WhenMissing f k x z &lt;/code&gt; is an abstract representation of a function of type &lt;code&gt; k -&amp;gt; x -&amp;gt; f (Maybe z) &lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt; WhenMissing f k x z &lt;/code&gt; 戦術は、タイプ &lt;code&gt; k -&amp;gt; x -&amp;gt; f (Maybe z) &lt;/code&gt; 関数の抽象表現です。</target>
        </trans-unit>
        <trans-unit id="fa71c38b94fc6a846cbe5d938f6e3e23141ac8bc" translate="yes" xml:space="preserve">
          <source>A tactic of type &lt;code&gt;SimpleWhenMatched x y z&lt;/code&gt; is an abstract representation of a function of type &lt;code&gt;Key -&amp;gt; x -&amp;gt; y -&amp;gt; Maybe z&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;SimpleWhenMatched x y z&lt;/code&gt; 戦術は、タイプKey- &lt;code&gt;Key -&amp;gt; x -&amp;gt; y -&amp;gt; Maybe z&lt;/code&gt; 関数の抽象的な表現です。</target>
        </trans-unit>
        <trans-unit id="4e05a0a550e141ac884df50db0a9d4c7b208813b" translate="yes" xml:space="preserve">
          <source>A tactic of type &lt;code&gt;SimpleWhenMissing x z&lt;/code&gt; is an abstract representation of a function of type &lt;code&gt;Key -&amp;gt; x -&amp;gt; Maybe z&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleWhenMissing x z&lt;/code&gt; タイプの戦術は、 &lt;code&gt;Key -&amp;gt; x -&amp;gt; Maybe z&lt;/code&gt; タイプ-&amp;gt; x-&amp;gt;多分zタイプの関数の抽象表現です。</target>
        </trans-unit>
        <trans-unit id="788c7aaeca2fa9237bef6f30f44eda24345655ff" translate="yes" xml:space="preserve">
          <source>A tactic of type &lt;code&gt;WhenMatched f x y z&lt;/code&gt; is an abstract representation of a function of type &lt;code&gt;Key -&amp;gt; x -&amp;gt; y -&amp;gt; f (Maybe z)&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;WhenMatched f x y z&lt;/code&gt; 戦術は、タイプKey- &lt;code&gt;Key -&amp;gt; x -&amp;gt; y -&amp;gt; f (Maybe z)&lt;/code&gt; 関数の抽象的な表現です。</target>
        </trans-unit>
        <trans-unit id="8d8ff0b141b2eb58a8bb144bfb707f725b7e036c" translate="yes" xml:space="preserve">
          <source>A tactic of type &lt;code&gt;WhenMissing f k x z&lt;/code&gt; is an abstract representation of a function of type &lt;code&gt;Key -&amp;gt; x -&amp;gt; f (Maybe z)&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;WhenMissing f k x z&lt;/code&gt; 戦術は、タイプKey- &lt;code&gt;Key -&amp;gt; x -&amp;gt; f (Maybe z)&lt;/code&gt; 関数の抽象表現です。</target>
        </trans-unit>
        <trans-unit id="ac94aa09dce6e03f7dc40cf67060871ccd2030ef" translate="yes" xml:space="preserve">
          <source>A text format for a type</source>
          <target state="translated">タイプのテキスト形式</target>
        </trans-unit>
        <trans-unit id="5d64a70b084ed3d99633afca034baca94024378e" translate="yes" xml:space="preserve">
          <source>A text-mode &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; has an associated &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; that specifies how to transate newline characters. The &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; specifies the input and output translation separately, so that for instance you can translate &lt;code&gt;'\r\n'&lt;/code&gt; to &lt;code&gt;'\n'&lt;/code&gt; on input, but leave newlines as &lt;code&gt;'\n'&lt;/code&gt; on output.</source>
          <target state="translated">テキストモードの &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; は、改行文字を変換する方法を指定する関連付けられた &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; があります。 &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; は、例えば、あなたが翻訳できるように、個別の入力および出力変換を指定する &lt;code&gt;'\r\n'&lt;/code&gt; する &lt;code&gt;'\n'&lt;/code&gt; 入力の上、しかし休暇改行として &lt;code&gt;'\n'&lt;/code&gt; 出力に。</target>
        </trans-unit>
        <trans-unit id="6df45c2152a1885d718710f3f4c32cb1ceb8d125" translate="yes" xml:space="preserve">
          <source>A text-mode &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; has an associated &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; that specifies how to translate newline characters. The &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; specifies the input and output translation separately, so that for instance you can translate &lt;code&gt;'\r\n'&lt;/code&gt; to &lt;code&gt;'\n'&lt;/code&gt; on input, but leave newlines as &lt;code&gt;'\n'&lt;/code&gt; on output.</source>
          <target state="translated">テキストモードの &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; は、改行文字の変換方法を指定する &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; が関連付けられています。 &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; は、入力と出力の変換を個別に指定します。たとえば、入力時に &lt;code&gt;'\r\n'&lt;/code&gt; を &lt;code&gt;'\n'&lt;/code&gt; に変換できますが、出力では改行を &lt;code&gt;'\n'&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="e920ef23a8f0e5c9a461f6e5c3a3ecaedd1aa8f0" translate="yes" xml:space="preserve">
          <source>A text-mode &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; has an associated &lt;code&gt;&lt;a href=&quot;system-io#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt;, which is used to decode bytes into Unicode characters when reading, and encode Unicode characters into bytes when writing.</source>
          <target state="translated">テキストモードの &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; は、関連付けられた &lt;code&gt;&lt;a href=&quot;system-io#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; があります。これは、読み取り時にバイトをUnicode文字にデコードし、書き込み時にUnicode文字をバイトにエンコードするために使用されます。</target>
        </trans-unit>
        <trans-unit id="afd27d79af07b06b6dd2c8c51dd15b84360a87c3" translate="yes" xml:space="preserve">
          <source>A thread has been created to perform spark evaluation.</source>
          <target state="translated">スパーク評価を行うためのスレッドが作成されました。</target>
        </trans-unit>
        <trans-unit id="513f9205785871fd0e6a34a5a8b00e27eaabc144" translate="yes" xml:space="preserve">
          <source>A time and space-efficient implementation of Unicode text using lists of packed arrays.</source>
          <target state="translated">パックされた配列のリストを用いたUnicodeテキストの時間と空間効率の良い実装。</target>
        </trans-unit>
        <trans-unit id="871d33c09316ac87a1774045ce6be43e65d6fbbd" translate="yes" xml:space="preserve">
          <source>A time and space-efficient implementation of Unicode text. Suitable for performance critical use, both in terms of large data quantities and high speed.</source>
          <target state="translated">Unicodeテキストの時間と空間効率の高い実装。大量のデータ量と高速性の両方の観点から、パフォーマンスが重要な用途に適しています。</target>
        </trans-unit>
        <trans-unit id="cb913ed9248b4b73bbb05825979d544eb2127ebb" translate="yes" xml:space="preserve">
          <source>A time and space-efficient implementation of lazy byte vectors using lists of packed &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; arrays, suitable for high performance use, both in terms of large data quantities, or high speed requirements. Lazy ByteStrings are encoded as lazy lists of strict chunks of bytes.</source>
          <target state="translated">大量のデータ量または高速要件の両方の観点から、高性能の使用に適した、パックされた &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 配列のリストを使用した、レイジーバイトベクトルの時間とスペースの効率的な実装。遅延ByteStringは、バイトの厳密なチャンクの遅延リストとしてエンコードされます。</target>
        </trans-unit>
        <trans-unit id="87548884e6950ce7611c58d0e6aa6d111ae018da" translate="yes" xml:space="preserve">
          <source>A time and space-efficient implementation of lazy byte vectors using lists of packed &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; arrays, suitable for high performance use, both in terms of large data quantities, or high speed requirements. Lazy ByteStrings are encoded as lazy lists of strict chunks of bytes.</source>
          <target state="translated">A time and space-efficient implementation of lazy byte vectors using lists of packed &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; arrays, suitable for high performance use, both in terms of large data quantities, or high speed requirements. Lazy ByteStrings are encoded as lazy lists of strict chunks of bytes.</target>
        </trans-unit>
        <trans-unit id="24b2d7b93ba4c008451c53fe10e4e7754f0b4315" translate="yes" xml:space="preserve">
          <source>A time and space-efficient implementation of lazy byte vectors using lists of packed &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; arrays, suitable for high performance use, both in terms of large data quantities, or high speed requirements. Lazy ByteStrings are encoded as lazy lists of strict chunks of bytes.</source>
          <target state="translated">パックされた &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 配列のリストを使用した、時間とスペース効率の高いレイジーバイトベクトルの実装。大量のデータまたは高速要件の両方の観点から、高性能の使用に適しています。レイジーByteStringは、バイトの厳密なチャンクのレイジーリストとしてエンコードされます。</target>
        </trans-unit>
        <trans-unit id="a51040e6bbff0d1db2681967125dbcf0660a785a" translate="yes" xml:space="preserve">
          <source>A time- and space-efficient implementation of byte vectors using packed Word8 arrays, suitable for high performance use, both in terms of large data quantities and high speed requirements. Byte vectors are encoded as strict &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; arrays of bytes, held in a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;, and can be passed between C and Haskell with little effort.</source>
          <target state="translated">大量のデータ量と高速要件の両方の観点から、高性能の使用に適した、パックされたWord8配列を使用した、時間とスペースの効率に優れたバイトベクトルの実装。バイトベクトルは、厳密な &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; バイト配列としてエンコードされ、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; に保持されます。CとHaskellの間で簡単に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="bd5048b9a802cb3ce698b367ba1957e1c7c15edd" translate="yes" xml:space="preserve">
          <source>A time- and space-efficient implementation of byte vectors using packed Word8 arrays, suitable for high performance use, both in terms of large data quantities and high speed requirements. Byte vectors are encoded as strict &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; arrays of bytes, held in a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;, and can be passed between C and Haskell with little effort.</source>
          <target state="translated">A time- and space-efficient implementation of byte vectors using packed Word8 arrays, suitable for high performance use, both in terms of large data quantities and high speed requirements. Byte vectors are encoded as strict &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; arrays of bytes, held in a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; , and can be passed between C and Haskell with little effort.</target>
        </trans-unit>
        <trans-unit id="96fe69d98b9d3411409ef49b51f90af2280d646b" translate="yes" xml:space="preserve">
          <source>A time- and space-efficient implementation of byte vectors using packed Word8 arrays, suitable for high performance use, both in terms of large data quantities and high speed requirements. Byte vectors are encoded as strict &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; arrays of bytes, held in a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;, and can be passed between C and Haskell with little effort.</source>
          <target state="translated">パックされたWord8配列を使用した、時間とスペースの効率的なバイトベクトルの実装。大量のデータと高速要件の両方の観点から、高性能の使用に適しています。バイトベクトルは、厳密な &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; バイト配列としてエンコードされ、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; に保持され、ほとんど労力をかけずにCとHaskellの間で受け渡すことができます。</target>
        </trans-unit>
        <trans-unit id="9fe6c6fa0b66fdbc97157d1012689fd665f63f77" translate="yes" xml:space="preserve">
          <source>A timeout registration cookie.</source>
          <target state="translated">タイムアウトした登録クッキー。</target>
        </trans-unit>
        <trans-unit id="9e5d778e506d2310054d3157a8637a07f1af1107" translate="yes" xml:space="preserve">
          <source>A top-level declaration</source>
          <target state="translated">トップレベル宣言</target>
        </trans-unit>
        <trans-unit id="c0a632faf1705f0bf1b050442c8d1e64943fd4fa" translate="yes" xml:space="preserve">
          <source>A top-level splice can occur in place of</source>
          <target state="translated">の代わりにトップレベルのスプライスが発生することがあります。</target>
        </trans-unit>
        <trans-unit id="de62f1896f9b461fde0d7a734c551759e77767fa" translate="yes" xml:space="preserve">
          <source>A top-level typed expression splice can occur in place of an expression; the spliced expression must have type &lt;code&gt;Code Q a&lt;/code&gt;</source>
          <target state="translated">式の代わりに、最上位の型付き式スプライスを使用できます。スプライスされた式のタイプは &lt;code&gt;Code Q a&lt;/code&gt; Qaである必要があります</target>
        </trans-unit>
        <trans-unit id="c16187723ff5e241fc07ce9bf83e42940dac6da5" translate="yes" xml:space="preserve">
          <source>A topological sort of the graph. The order is partially specified by the condition that a vertex &lt;em&gt;i&lt;/em&gt; precedes &lt;em&gt;j&lt;/em&gt; whenever &lt;em&gt;j&lt;/em&gt; is reachable from &lt;em&gt;i&lt;/em&gt; but not vice versa.</source>
          <target state="translated">グラフのトポロジカルソート。順序は、&lt;em&gt;j&lt;/em&gt;が&lt;em&gt;i&lt;/em&gt;から到達可能であるときはいつでも頂点&lt;em&gt;i&lt;/em&gt;が&lt;em&gt;jの&lt;/em&gt;前に来るという条件によって部分的に指定されます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4693f1c5c0fbb57b8d5c4df19d87586bf13001db" translate="yes" xml:space="preserve">
          <source>A tricky implementation detail is the question of how to abort an &lt;code&gt;IO&lt;/code&gt; computation. This combinator relies on asynchronous exceptions internally (namely throwing the computation the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-timeout#t:Timeout&quot;&gt;Timeout&lt;/a&gt;&lt;/code&gt; exception). The technique works very well for computations executing inside of the Haskell runtime system, but it doesn't work at all for non-Haskell code. Foreign function calls, for example, cannot be timed out with this combinator simply because an arbitrary C function cannot receive asynchronous exceptions. When &lt;code&gt;timeout&lt;/code&gt; is used to wrap an FFI call that blocks, no timeout event can be delivered until the FFI call returns, which pretty much negates the purpose of the combinator. In practice, however, this limitation is less severe than it may sound. Standard I/O functions like &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt;, Network.Socket.accept, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; appear to be blocking, but they really don't because the runtime system uses scheduling mechanisms like &lt;code&gt;select(2)&lt;/code&gt; to perform asynchronous I/O, so it is possible to interrupt standard socket I/O or file I/O using this combinator.</source>
          <target state="translated">A tricky implementation detail is the question of how to abort an &lt;code&gt;IO&lt;/code&gt; computation. This combinator relies on asynchronous exceptions internally (namely throwing the computation the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-timeout#t:Timeout&quot;&gt;Timeout&lt;/a&gt;&lt;/code&gt; exception). The technique works very well for computations executing inside of the Haskell runtime system, but it doesn't work at all for non-Haskell code. Foreign function calls, for example, cannot be timed out with this combinator simply because an arbitrary C function cannot receive asynchronous exceptions. When &lt;code&gt;timeout&lt;/code&gt; is used to wrap an FFI call that blocks, no timeout event can be delivered until the FFI call returns, which pretty much negates the purpose of the combinator. In practice, however, this limitation is less severe than it may sound. Standard I/O functions like &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; , Network.Socket.accept, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; appear to be blocking, but they really don't because the runtime system uses scheduling mechanisms like &lt;code&gt;select(2)&lt;/code&gt; to perform asynchronous I/O, so it is possible to interrupt standard socket I/O or file I/O using this combinator.</target>
        </trans-unit>
        <trans-unit id="5c3b0573aefd9efe2af69d52343a0a530da53a04" translate="yes" xml:space="preserve">
          <source>A tricky implementation detail is the question of how to abort an &lt;code&gt;IO&lt;/code&gt; computation. This combinator relies on asynchronous exceptions internally (namely throwing the computation the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-timeout#t:Timeout&quot;&gt;Timeout&lt;/a&gt;&lt;/code&gt; exception). The technique works very well for computations executing inside of the Haskell runtime system, but it doesn't work at all for non-Haskell code. Foreign function calls, for example, cannot be timed out with this combinator simply because an arbitrary C function cannot receive asynchronous exceptions. When &lt;code&gt;timeout&lt;/code&gt; is used to wrap an FFI call that blocks, no timeout event can be delivered until the FFI call returns, which pretty much negates the purpose of the combinator. In practice, however, this limitation is less severe than it may sound. Standard I/O functions like &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt;, Network.Socket.accept, or &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; appear to be blocking, but they really don't because the runtime system uses scheduling mechanisms like &lt;code&gt;select(2)&lt;/code&gt; to perform asynchronous I/O, so it is possible to interrupt standard socket I/O or file I/O using this combinator.</source>
          <target state="translated">トリッキーな実装の詳細は、 &lt;code&gt;IO&lt;/code&gt; 計算を中止する方法の問題です。このコンビネータは、内部的に非同期例外に依存しています（つまり、計算に &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-timeout#t:Timeout&quot;&gt;Timeout&lt;/a&gt;&lt;/code&gt; 例外をスローします）。この手法は、Haskellランタイムシステム内で実行される計算には非常にうまく機能しますが、Haskell以外のコードにはまったく機能しません。たとえば、外部関数呼び出しは、任意のC関数が非同期例外を受信できないという理由だけで、このコンビネータでタイムアウトすることはできません。 &lt;code&gt;timeout&lt;/code&gt; 時はブロックするFFI呼び出しをラップするために使用され、FFI呼び出しが戻るまでタイムアウトイベントを配信できません。これは、コンビネータの目的をほぼ否定します。ただし、実際には、この制限は思ったほど深刻ではありません。以下のような標準I / O機能 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; 、Network.Socket.accept、または &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; をブロックしているように見えるが、彼らは本当にないランタイムシステムの用途は、同様のメカニズムのスケジューリングため &lt;code&gt;select(2)&lt;/code&gt; 非同期I / Oを実行するために、それはそうこのコンビネータを使用して、標準のソケットI / OまたはファイルI / Oを中断することができます。</target>
        </trans-unit>
        <trans-unit id="fa67008717fa4c4a4a1edf551b1dac2041a4d8c1" translate="yes" xml:space="preserve">
          <source>A tricky implementation detail is the question of how to abort an &lt;code&gt;IO&lt;/code&gt; computation. This combinator relies on asynchronous exceptions internally (namely throwing the computation the &lt;code&gt;&lt;a href=&quot;system-timeout#t:Timeout&quot;&gt;Timeout&lt;/a&gt;&lt;/code&gt; exception). The technique works very well for computations executing inside of the Haskell runtime system, but it doesn't work at all for non-Haskell code. Foreign function calls, for example, cannot be timed out with this combinator simply because an arbitrary C function cannot receive asynchronous exceptions. When &lt;code&gt;timeout&lt;/code&gt; is used to wrap an FFI call that blocks, no timeout event can be delivered until the FFI call returns, which pretty much negates the purpose of the combinator. In practice, however, this limitation is less severe than it may sound. Standard I/O functions like &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt;, Network.Socket.accept, or &lt;code&gt;&lt;a href=&quot;system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; appear to be blocking, but they really don't because the runtime system uses scheduling mechanisms like &lt;code&gt;select(2)&lt;/code&gt; to perform asynchronous I/O, so it is possible to interrupt standard socket I/O or file I/O using this combinator.</source>
          <target state="translated">トリッキーな実装の詳細は、 &lt;code&gt;IO&lt;/code&gt; 計算を中止する方法の問題です。このコンビネータは、内部的に非同期例外に依存しています（つまり、計算に &lt;code&gt;&lt;a href=&quot;system-timeout#t:Timeout&quot;&gt;Timeout&lt;/a&gt;&lt;/code&gt; 例外をスローします）。この手法は、Haskellランタイムシステム内で実行される計算には非常にうまく機能しますが、Haskell以外のコードにはまったく機能しません。たとえば、外部関数呼び出しは、任意のC関数が非同期例外を受信できないという理由だけで、このコンビネータでタイムアウトすることはできません。 &lt;code&gt;timeout&lt;/code&gt; 時ブロックするFFI呼び出しをラップするために使用され、FFI呼び出しが戻るまでタイムアウトイベントを配信できません。これは、コンビネータの目的をほぼ否定します。ただし、実際には、この制限は思ったほど深刻ではありません。以下のような標準I / O機能 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; 、Network.Socket.accept、または &lt;code&gt;&lt;a href=&quot;system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; をブロックしているように見えるが、彼らは本当にないランタイムシステムの用途は、同様のメカニズムのスケジューリングため &lt;code&gt;select(2)&lt;/code&gt; 非同期I / Oを実行するために、それはそうこのコンビネータを使用して、標準のソケットI / OまたはファイルI / Oを中断することができます。</target>
        </trans-unit>
        <trans-unit id="6efe802c821d7daf17899a761feb1bf7a82692b9" translate="yes" xml:space="preserve">
          <source>A tricky implementation detail is the question of how to abort an &lt;code&gt;IO&lt;/code&gt; computation. This combinator relies on asynchronous exceptions internally. The technique works very well for computations executing inside of the Haskell runtime system, but it doesn't work at all for non-Haskell code. Foreign function calls, for example, cannot be timed out with this combinator simply because an arbitrary C function cannot receive asynchronous exceptions. When &lt;code&gt;timeout&lt;/code&gt; is used to wrap an FFI call that blocks, no timeout event can be delivered until the FFI call returns, which pretty much negates the purpose of the combinator. In practice, however, this limitation is less severe than it may sound. Standard I/O functions like &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt;, Network.Socket.accept, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; appear to be blocking, but they really don't because the runtime system uses scheduling mechanisms like &lt;code&gt;select(2)&lt;/code&gt; to perform asynchronous I/O, so it is possible to interrupt standard socket I/O or file I/O using this combinator.</source>
          <target state="translated">トリッキーな実装の詳細は、 &lt;code&gt;IO&lt;/code&gt; 計算を中止する方法の問題です。このコンビネータは、内部的に非同期例外に依存しています。この手法は、Haskellランタイムシステム内で実行される計算には非常に有効ですが、Haskell以外のコードにはまったく機能しません。たとえば、任意のC関数が非同期例外を受信できないため、このコンビネータを使用して外部関数呼び出しをタイムアウトにすることはできません。ときに &lt;code&gt;timeout&lt;/code&gt; ブロックすることをFFIの呼び出しをラップするために使用され、タイムアウトイベントはかなりコンビネータの目的を否定するFFIの呼び出しが戻るまで配信することはできません。ただし、実際には、この制限は実際よりも深刻ではありません。 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; などの標準I / O関数、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; 、またはhWaitForInputはブロックしているように見えますが、ランタイムシステムは &lt;code&gt;select(2)&lt;/code&gt; などのスケジューリングメカニズムを使用して非同期I / Oを実行しているため、実際にはブロックしていません。または、このコンビネータを使用してファイルI / Oを行います。</target>
        </trans-unit>
        <trans-unit id="41f5a544b2c86e8b88cd4fa644eb1707b05f6a06" translate="yes" xml:space="preserve">
          <source>A tricky implementation detail is the question of how to abort an &lt;code&gt;IO&lt;/code&gt; computation. This combinator relies on asynchronous exceptions internally. The technique works very well for computations executing inside of the Haskell runtime system, but it doesn't work at all for non-Haskell code. Foreign function calls, for example, cannot be timed out with this combinator simply because an arbitrary C function cannot receive asynchronous exceptions. When &lt;code&gt;timeout&lt;/code&gt; is used to wrap an FFI call that blocks, no timeout event can be delivered until the FFI call returns, which pretty much negates the purpose of the combinator. In practice, however, this limitation is less severe than it may sound. Standard I/O functions like &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt;, Network.Socket.accept, or &lt;code&gt;&lt;a href=&quot;system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; appear to be blocking, but they really don't because the runtime system uses scheduling mechanisms like &lt;code&gt;select(2)&lt;/code&gt; to perform asynchronous I/O, so it is possible to interrupt standard socket I/O or file I/O using this combinator.</source>
          <target state="translated">トリッキーな実装の詳細は、 &lt;code&gt;IO&lt;/code&gt; 計算を中止する方法の問題です。このコンビネータは、内部的に非同期例外に依存しています。この手法は、Haskellランタイムシステム内で実行される計算には非常に有効ですが、Haskell以外のコードにはまったく機能しません。たとえば、任意のC関数が非同期例外を受信できないため、このコンビネータを使用して外部関数呼び出しをタイムアウトにすることはできません。ときに &lt;code&gt;timeout&lt;/code&gt; ブロックすることをFFIの呼び出しをラップするために使用され、タイムアウトイベントはかなりコンビネータの目的を否定するFFIの呼び出しが戻るまで配信することはできません。ただし、実際には、この制限は実際よりも深刻ではありません。 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; などの標準I / O関数、 &lt;code&gt;&lt;a href=&quot;system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; 、またはhWaitForInputはブロックしているように見えますが、ランタイムシステムは &lt;code&gt;select(2)&lt;/code&gt; などのスケジューリングメカニズムを使用して非同期I / Oを実行しているため、実際にはブロックしていません。または、このコンビネータを使用してファイルI / Oを行います。</target>
        </trans-unit>
        <trans-unit id="966e03642cf0118fe092db70abdc7d1b27e6b71d" translate="yes" xml:space="preserve">
          <source>A type</source>
          <target state="translated">タイプ</target>
        </trans-unit>
        <trans-unit id="b12eefa8f8a22f3c9c1c70d44c19389c8c5386e5" translate="yes" xml:space="preserve">
          <source>A type &lt;code&gt;a&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; if it provides an associative function (&lt;code&gt;&lt;a href=&quot;data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt;) that lets you combine any two values of type &lt;code&gt;a&lt;/code&gt; into one, and a neutral element (&lt;code&gt;&lt;a href=&quot;data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt;) such that</source>
          <target state="translated">タイプがある &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; それが連想機能（提供する場合 &lt;code&gt;&lt;a href=&quot;data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt; あなたはタイプのいずれかの二つの値まとめることができます） &lt;code&gt;a&lt;/code&gt; 一つにし、ニュートラル要素（ &lt;code&gt;&lt;a href=&quot;data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; ように） &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="900bea671831ed1ce8158cdebd74c597c210974a" translate="yes" xml:space="preserve">
          <source>A type &lt;code&gt;a&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;data-semigroup#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; if it provides an associative function (&lt;code&gt;&lt;a href=&quot;data-semigroup#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt;) that lets you combine any two values of type &lt;code&gt;a&lt;/code&gt; into one. Where being associative means that the following must always hold:</source>
          <target state="translated">タイプがある &lt;code&gt;&lt;a href=&quot;data-semigroup#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 、それが連想機能（提供する場合 &lt;code&gt;&lt;a href=&quot;data-semigroup#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt; あなたはタイプのいずれかの二つの値まとめることができます） &lt;code&gt;a&lt;/code&gt; 1にします。関連性があるとは、以下が常に成り立つ必要があることを意味します。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5c36da43acccbf65c4959f463c0fb381ab69f5fb" translate="yes" xml:space="preserve">
          <source>A type &lt;code&gt;f&lt;/code&gt; is a Functor if it provides a function &lt;code&gt;fmap&lt;/code&gt; which, given any types &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; lets you apply any function from &lt;code&gt;(a -&amp;gt; b)&lt;/code&gt; to turn an &lt;code&gt;f a&lt;/code&gt; into an &lt;code&gt;f b&lt;/code&gt;, preserving the structure of &lt;code&gt;f&lt;/code&gt;. Furthermore &lt;code&gt;f&lt;/code&gt; needs to adhere to the following:</source>
          <target state="translated">タイプ &lt;code&gt;f&lt;/code&gt; は、任意のタイプ &lt;code&gt;a&lt;/code&gt; および &lt;code&gt;b&lt;/code&gt; を使用して &lt;code&gt;(a -&amp;gt; b)&lt;/code&gt; &lt;code&gt;f a&lt;/code&gt; &amp;gt; b）の任意の関数を適用してfaを &lt;code&gt;f b&lt;/code&gt; に変換し、 &lt;code&gt;f&lt;/code&gt; の構造を維持する関数 &lt;code&gt;fmap&lt;/code&gt; を提供する場合、Functorです。さらに、 &lt;code&gt;f&lt;/code&gt; は以下に従う必要があります。</target>
        </trans-unit>
        <trans-unit id="e8dc677defa7be455d6125e7b6e0f1fcd1c4b205" translate="yes" xml:space="preserve">
          <source>A type &lt;code&gt;f&lt;/code&gt; is a Functor if it provides a function &lt;code&gt;fmap&lt;/code&gt; which, given any types &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, lets you apply any function of type &lt;code&gt;(a -&amp;gt; b)&lt;/code&gt; to turn an &lt;code&gt;f a&lt;/code&gt; into an &lt;code&gt;f b&lt;/code&gt;, preserving the structure of &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;f&lt;/code&gt; は、任意のタイプ &lt;code&gt;a&lt;/code&gt; および &lt;code&gt;b&lt;/code&gt; が与えられ、タイプ（ &lt;code&gt;fmap&lt;/code&gt; &lt;code&gt;(a -&amp;gt; b)&lt;/code&gt; 任意の関数を適用して &lt;code&gt;f a&lt;/code&gt; を &lt;code&gt;f b&lt;/code&gt; に変換し、 &lt;code&gt;f&lt;/code&gt; の構造を維持できる関数fmapを提供する場合、Functorです。</target>
        </trans-unit>
        <trans-unit id="f5b73b56591ee75fd4320cdb138584a6631c70e7" translate="yes" xml:space="preserve">
          <source>A type application.</source>
          <target state="translated">型のアプリケーションです。</target>
        </trans-unit>
        <trans-unit id="4843d11f8e6edd0b1d5c045f927fdb0d7d055f98" translate="yes" xml:space="preserve">
          <source>A type constructor or class can be any non-reserved operator. Symbols used in types are always like capitalized identifiers; they are never variables. Note that this is different from the lexical syntax of data constructors, which are required to begin with a &lt;code&gt;:&lt;/code&gt;.</source>
          <target state="translated">型コンストラクターまたはクラスは、予約されていない任意の演算子にすることができます。タイプで使用されるシンボルは、常に大文字の識別子のようです。それらは決して変数ではありません。これは、 &lt;code&gt;:&lt;/code&gt; で始まる必要があるデータコンストラクターの字句構文とは異なります。</target>
        </trans-unit>
        <trans-unit id="2957975b2e2a0d72a85cca6ba60d8dc7b412130f" translate="yes" xml:space="preserve">
          <source>A type context can include equality constraints of the form &lt;code&gt;t1 ~ t2&lt;/code&gt;, which denote that the types &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt; need to be the same. In the presence of type families, whether two types are equal cannot generally be decided locally. Hence, the contexts of function signatures may include equality constraints, as in the following example:</source>
          <target state="translated">型コンテキストは、フォームの等式制約含むことができ、 &lt;code&gt;t1 ~ t2&lt;/code&gt; 種類ことを示し、 &lt;code&gt;t1&lt;/code&gt; 及び &lt;code&gt;t2&lt;/code&gt; の必要性が同じであることを。タイプファミリーが存在する場合、2つのタイプが等しいかどうかは、一般にローカルで決定できません。したがって、関数シグネチャのコンテキストには、次の例のように、等価制約が含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="dbb43eef001aa96d23cb8f2b1045baf5a1fc027f" translate="yes" xml:space="preserve">
          <source>A type family can also be declared with a &lt;code&gt;where&lt;/code&gt; clause, defining the full set of equations for that family. For example:</source>
          <target state="translated">タイプファミリーは、 &lt;code&gt;where&lt;/code&gt; 句で宣言して、そのファミリーの方程式の完全なセットを定義することもできます。例えば：</target>
        </trans-unit>
        <trans-unit id="3ca042aa66fa2759abc533fbf4e600be254b35ae" translate="yes" xml:space="preserve">
          <source>A type family to compute Boolean equality.</source>
          <target state="translated">ブール値の等値性を計算するための型ファミリ.</target>
        </trans-unit>
        <trans-unit id="8eff1fa8083a3c76f23688ec0faf2770e8f9b619" translate="yes" xml:space="preserve">
          <source>A type is &amp;ldquo;rigid&amp;rdquo; if it is completely known to the compiler at its binding site. The easiest way to ensure that a variable a rigid type is to give it a type signature. For more precise details see &lt;a href=&quot;http://research.microsoft.com/%7Esimonpj/papers/gadt/&quot;&gt;Simple unification-based type inference for GADTs&lt;/a&gt;. The criteria implemented by GHC are given in the Appendix.</source>
          <target state="translated">バインディングサイトでコンパイラが完全に認識している場合、タイプは「固定」です。変数をリジッドな型にするための最も簡単な方法は、型シグネチャを与えることです。詳細については&lt;a href=&quot;http://research.microsoft.com/%7Esimonpj/papers/gadt/&quot;&gt;、GADTの単純な統合ベースの型推論をご覧ください&lt;/a&gt;。GHCによって実施される基準は、付録に記載されています。</target>
        </trans-unit>
        <trans-unit id="6b6dc84a99a51911e396803e6f137d1ec9e7ecb5" translate="yes" xml:space="preserve">
          <source>A type or data family, with a list of its visible instances. A closed type family is returned with 0 instances.</source>
          <target state="translated">型またはデータファミリで、その可視インスタンスのリストを持ちます。閉じた型ファミリーは、0個のインスタンスで返されます。</target>
        </trans-unit>
        <trans-unit id="0a858ee617d52cf82c99429cf69589bf7daf3b44" translate="yes" xml:space="preserve">
          <source>A type or kind variable explicitly bound using &lt;a href=&quot;#extension-ExplicitForAll&quot;&gt;&lt;code&gt;ExplicitForAll&lt;/code&gt;&lt;/a&gt; but not used on the left hand side will generate an error, not a warning.</source>
          <target state="translated">&lt;a href=&quot;#extension-ExplicitForAll&quot;&gt; &lt;code&gt;ExplicitForAll&lt;/code&gt; &lt;/a&gt;を使用して明示的にバインドされているが左側では使用されていない型または種類の変数は、警告ではなくエラーを生成します。</target>
        </trans-unit>
        <trans-unit id="000d83df44a22517780a9f759c41e9e35406572a" translate="yes" xml:space="preserve">
          <source>A type or kind variable explicitly bound using &lt;a href=&quot;explicit_forall#extension-ExplicitForAll&quot;&gt;&lt;code&gt;ExplicitForAll&lt;/code&gt;&lt;/a&gt; but not used on the left hand side will generate an error, not a warning.</source>
          <target state="translated">&lt;a href=&quot;explicit_forall#extension-ExplicitForAll&quot;&gt; &lt;code&gt;ExplicitForAll&lt;/code&gt; &lt;/a&gt;を使用して明示的にバインドされているが、左側では使用されていないタイプまたは種類の変数は、警告ではなくエラーを生成します。</target>
        </trans-unit>
        <trans-unit id="13dc503b524051e73bf1854416495a7c476690ef" translate="yes" xml:space="preserve">
          <source>A type representing a number of UTF-16 code units.</source>
          <target state="translated">UTF-16コード単位の数を表す型。</target>
        </trans-unit>
        <trans-unit id="fac7b1b31387a5dce83f6207988f33acc423d8c4" translate="yes" xml:space="preserve">
          <source>A type signature may occur in any pattern; this is a &lt;em&gt;pattern type signature&lt;/em&gt;. For example:</source>
          <target state="translated">型シグネチャは任意のパターンで発生する可能性があります。これは&lt;em&gt;パターン型シグネチャ&lt;/em&gt;です。例えば：</target>
        </trans-unit>
        <trans-unit id="8682a8a15f37e1952f2bed70e4a76505ad01ea0d" translate="yes" xml:space="preserve">
          <source>A type variable applied to some types:</source>
          <target state="translated">一部の型に適用される型変数。</target>
        </trans-unit>
        <trans-unit id="9bfcbaf65cc2630df1737c174af7d766948febae" translate="yes" xml:space="preserve">
          <source>A type variable beginning with an underscore is not treated specially in a type or data instance declaration. For example:</source>
          <target state="translated">アンダースコアで始まる型変数は、型やデータインスタンス宣言では特別に扱われません。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="6ca958f1089d3d1582d1c30aba329c8223832dd9" translate="yes" xml:space="preserve">
          <source>A type variable.</source>
          <target state="translated">型変数です。</target>
        </trans-unit>
        <trans-unit id="297b034e775e243ef7a125f9be96bd9336678f08" translate="yes" xml:space="preserve">
          <source>A typed expression splice can occur in place of an expression; the spliced expression must have type &lt;code&gt;Q (TExp a)&lt;/code&gt;</source>
          <target state="translated">型付けされた式スプライスが式の代わりに発生する場合があります。スプライスされた式のタイプは &lt;code&gt;Q (TExp a)&lt;/code&gt; なければなりません</target>
        </trans-unit>
        <trans-unit id="fff5bdf005b35f179294ba275419d126af32c8a0" translate="yes" xml:space="preserve">
          <source>A typical heap object may be in one of the following four states at each point in its lifetime:</source>
          <target state="translated">典型的なヒープオブジェクトは、その寿命の各時点で以下の4つの状態のいずれかになっている可能性があります。</target>
        </trans-unit>
        <trans-unit id="6e00c4c8e7f8a62193a99b6e6434c24bc66d1ce8" translate="yes" xml:space="preserve">
          <source>A typical use is to prevent resource leaks in lazy IO programs, by forcing all characters from a file to be read. For example:</source>
          <target state="translated">典型的な使用法は、ファイルのすべての文字を強制的に読み込ませることで、遅延IOプログラムでのリソースリークを防ぐことです。例えば</target>
        </trans-unit>
        <trans-unit id="fb52c77586fd9d5d1d5e06c0781fa29b45252709" translate="yes" xml:space="preserve">
          <source>A typical use of &lt;code&gt;&lt;a href=&quot;control-exception#v:tryJust&quot;&gt;tryJust&lt;/a&gt;&lt;/code&gt; for recovery looks like this:</source>
          <target state="translated">回復のための &lt;code&gt;&lt;a href=&quot;control-exception#v:tryJust&quot;&gt;tryJust&lt;/a&gt;&lt;/code&gt; の一般的な使用法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f5fa8bc47ca59ba407ee77bfa4f457f11af6f63d" translate="yes" xml:space="preserve">
          <source>A unique &lt;code&gt;&lt;a href=&quot;type-reflection-unsafe#t:TyCon&quot;&gt;TyCon&lt;/a&gt;&lt;/code&gt; object Used when the strings are dynamically allocated, eg from binary deserialisation</source>
          <target state="translated">一意の &lt;code&gt;&lt;a href=&quot;type-reflection-unsafe#t:TyCon&quot;&gt;TyCon&lt;/a&gt;&lt;/code&gt; オブジェクト。文字列が動的に割り当てられる場合に使用されます（例：バイナリの逆シリアル化）。</target>
        </trans-unit>
        <trans-unit id="6e0b23e86250bf5ded8e24685820d0cba5c52892" translate="yes" xml:space="preserve">
          <source>A unique identifier used to refer to the cost-centre</source>
          <target state="translated">コストセンターを参照するために使用される一意の識別子</target>
        </trans-unit>
        <trans-unit id="e2b058205e0073a16e899cb4a51295d96e6d2af1" translate="yes" xml:space="preserve">
          <source>A unique local name</source>
          <target state="translated">ユニークな地名</target>
        </trans-unit>
        <trans-unit id="1f67274a4c72a292a8769f67401cc21d34e5f22d" translate="yes" xml:space="preserve">
          <source>A use of &lt;code&gt;MkSet&lt;/code&gt; as a constructor (e.g. in the definition of &lt;code&gt;makeSet&lt;/code&gt;) gives rise to a &lt;code&gt;(Eq a)&lt;/code&gt; constraint, as you would expect. The new feature is that pattern-matching on &lt;code&gt;MkSet&lt;/code&gt; (as in the definition of &lt;code&gt;insert&lt;/code&gt;) makes &lt;em&gt;available&lt;/em&gt; an &lt;code&gt;(Eq a)&lt;/code&gt; context. In implementation terms, the &lt;code&gt;MkSet&lt;/code&gt; constructor has a hidden field that stores the &lt;code&gt;(Eq a)&lt;/code&gt; dictionary that is passed to &lt;code&gt;MkSet&lt;/code&gt;; so when pattern-matching that dictionary becomes available for the right-hand side of the match. In the example, the equality dictionary is used to satisfy the equality constraint generated by the call to &lt;code&gt;elem&lt;/code&gt;, so that the type of &lt;code&gt;insert&lt;/code&gt; itself has no &lt;code&gt;Eq&lt;/code&gt; constraint.</source>
          <target state="translated">使用 &lt;code&gt;MkSet&lt;/code&gt; （例えばの定義でコンストラクタとして &lt;code&gt;makeSet&lt;/code&gt; は）を生じさせる &lt;code&gt;(Eq a)&lt;/code&gt; 、あなたが期待するように、制約。新機能は、 &lt;code&gt;MkSet&lt;/code&gt; でのパターンマッチング（ &lt;code&gt;insert&lt;/code&gt; の定義のように）が &lt;code&gt;(Eq a)&lt;/code&gt; コンテキストを&lt;em&gt;利用できるように&lt;/em&gt;すること&lt;em&gt;です&lt;/em&gt;。実装に関しては、 &lt;code&gt;MkSet&lt;/code&gt; コンストラクターには、 &lt;code&gt;MkSet&lt;/code&gt; に渡される &lt;code&gt;(Eq a)&lt;/code&gt; 辞書を格納する隠しフィールドがあります。したがって、パターンマッチングを行うと、その右側の辞書でその辞書が使用可能になります。この例では、等価ディクショナリを使用して、次の呼び出しによって生成された等価制約を満たします。 &lt;code&gt;elem&lt;/code&gt; 。 &lt;code&gt;insert&lt;/code&gt; のタイプ自体には &lt;code&gt;Eq&lt;/code&gt; 制約がありません。</target>
        </trans-unit>
        <trans-unit id="c1353efcd4777e1aa99c83066c3c4fd8238bee7d" translate="yes" xml:space="preserve">
          <source>A useful &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt;-like function for debugging purposes.</source>
          <target state="translated">デバッグに役立つ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; に似た関数。</target>
        </trans-unit>
        <trans-unit id="90246cdcbf9692185ad9ba6a865f4e67d7ff859b" translate="yes" xml:space="preserve">
          <source>A useful &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt;-like function for debugging purposes.</source>
          <target state="translated">デバッグ目的の便利な &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; - like関数。</target>
        </trans-unit>
        <trans-unit id="70dab16ccb3b6a703ee5b204fc51c139f8aea1e3" translate="yes" xml:space="preserve">
          <source>A useful &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt;-like function for debugging purposes.</source>
          <target state="translated">デバッグ目的の便利な &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; - like関数。</target>
        </trans-unit>
        <trans-unit id="782053667e2306e8cf3e91531fa691fe2c43fa11" translate="yes" xml:space="preserve">
          <source>A useful combinator for embedding monadic actions into &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Code&quot;&gt;Code&lt;/a&gt;&lt;/code&gt;&lt;code&gt;
 myCode :: ... =&amp;gt; Code m a
 myCode = joinCode $ do
   x &amp;lt;- someSideEffect
   return (makeCodeWith x)
 &lt;/code&gt;</source>
          <target state="translated">モナドアクションを &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Code&quot;&gt;Code&lt;/a&gt;&lt;/code&gt; &lt;code&gt; myCode :: ... =&amp;gt; Code m a myCode = joinCode $ do x &amp;lt;- someSideEffect return (makeCodeWith x) &lt;/code&gt; 埋め込むための便利なコンビネータ:: ... =&amp;gt;コードmamyCode = joinCode $ do x &amp;lt;-someSideEffect return（makeCodeWith x）</target>
        </trans-unit>
        <trans-unit id="d824bcabbe540d6f8669abe4aa80a8124bcecbd4" translate="yes" xml:space="preserve">
          <source>A useful combinator for embedding monadic actions into &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Code&quot;&gt;Code&lt;/a&gt;&lt;/code&gt;&lt;code&gt;
 myCode :: ... =&amp;gt; Code m a
 myCode = joinCode $ do
   x &amp;lt;- someSideEffect
   return (makeCodeWith x)
 &lt;/code&gt;</source>
          <target state="translated">モナドアクションを &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Code&quot;&gt;Code&lt;/a&gt;&lt;/code&gt; &lt;code&gt; myCode :: ... =&amp;gt; Code m a myCode = joinCode $ do x &amp;lt;- someSideEffect return (makeCodeWith x) &lt;/code&gt; 埋め込むための便利なコンビネータ:: ... =&amp;gt;コードmamyCode = joinCode $ do x &amp;lt;-someSideEffect return（makeCodeWith x）</target>
        </trans-unit>
        <trans-unit id="86295d409cfd9cf7cbef34ae7b547dcc96dc0f25" translate="yes" xml:space="preserve">
          <source>A useful default. In particular:</source>
          <target state="translated">便利なデフォルト。特に。</target>
        </trans-unit>
        <trans-unit id="f8c74a72bfde3e2ebcf4f91dbf953debbfc38d10" translate="yes" xml:space="preserve">
          <source>A useful idiom permitted by the above rules is as follows. If one allows overlapping instance declarations then it&amp;rsquo;s quite convenient to have a &amp;ldquo;default instance&amp;rdquo; declaration that applies if something more specific does not:</source>
          <target state="translated">上記のルールで許可されている便利なイディオムは次のとおりです。重複するインスタンス宣言を許可する場合、より具体的なものが適用されない場合に適用される「デフォルトのインスタンス」宣言があると非常に便利です。</target>
        </trans-unit>
        <trans-unit id="a0a8e93d7731f26de07f8a99cabb013a2ca2c78f" translate="yes" xml:space="preserve">
          <source>A useful option to alert you when interfaces change is &lt;code&gt;-ddump-hi-diffs&lt;/code&gt; option. It will run &lt;code&gt;diff&lt;/code&gt; on the changed interface file, before and after, when applicable.</source>
          <target state="translated">インターフェイスが変更されたときに警告する便利なオプションは、 &lt;code&gt;-ddump-hi-diffs&lt;/code&gt; オプションです。必要に応じて、変更前と変更後のインターフェースファイルで &lt;code&gt;diff&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="48bece416cc59f93fda6101dbf5899713474b8a5" translate="yes" xml:space="preserve">
          <source>A user could provide, for example, a &lt;code&gt;GSerialize UInt&lt;/code&gt; instance so that a &lt;code&gt;Serialize IntHash&lt;/code&gt; instance could be easily defined in terms of &lt;code&gt;GSerialize&lt;/code&gt;.</source>
          <target state="translated">ユーザーは、たとえば、 &lt;code&gt;GSerialize UInt&lt;/code&gt; インスタンスを提供して、 &lt;code&gt;Serialize IntHash&lt;/code&gt; インスタンスを &lt;code&gt;GSerialize&lt;/code&gt; に関して簡単に定義できるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="5dd220d0ff116d56be2881c3c2eda319a7be24bc" translate="yes" xml:space="preserve">
          <source>A user log message (from, e.g., &lt;a href=&quot;../libraries/base-4.14.1.0/control-concurrent#v:traceEvent&quot;&gt;Control.Concurrent.traceEvent&lt;/a&gt;).</source>
          <target state="translated">A user log message (from, e.g., &lt;a href=&quot;../libraries/base-4.14.1.0/control-concurrent#v:traceEvent&quot;&gt;Control.Concurrent.traceEvent&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="1250342d5626fba6702338245b1266f9d21826be" translate="yes" xml:space="preserve">
          <source>A user log message (from, e.g., &lt;a href=&quot;../libraries/base-4.15.0.0/control-concurrent#v:traceEvent&quot;&gt;Control.Concurrent.traceEvent&lt;/a&gt;).</source>
          <target state="translated">ユーザーログメッセージ（たとえば、&lt;a href=&quot;../libraries/base-4.15.0.0/control-concurrent#v:traceEvent&quot;&gt;Control.Concurrent.traceEventから&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="ab5483fab05ffacd5a3f560ae7afd7921c21d6c2" translate="yes" xml:space="preserve">
          <source>A user marker (from &lt;a href=&quot;../libraries/base-4.14.1.0/debug-trace#v:traceMarker&quot;&gt;Debug.Trace.traceMarker&lt;/a&gt;).</source>
          <target state="translated">A user marker (from &lt;a href=&quot;../libraries/base-4.14.1.0/debug-trace#v:traceMarker&quot;&gt;Debug.Trace.traceMarker&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="18a25443692419f0097e3d6524d19af87b268dcc" translate="yes" xml:space="preserve">
          <source>A user marker (from &lt;a href=&quot;../libraries/base-4.15.0.0/debug-trace#v:traceMarker&quot;&gt;Debug.Trace.traceMarker&lt;/a&gt;).</source>
          <target state="translated">ユーザーマーカー（&lt;a href=&quot;../libraries/base-4.15.0.0/debug-trace#v:traceMarker&quot;&gt;Debug.Trace.traceMarker&lt;/a&gt;から）。</target>
        </trans-unit>
        <trans-unit id="4bf4989d597f060b1f221f4d9b40f8cbdd26cf10" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;&lt;a href=&quot;data-dynamic#t:Dynamic&quot;&gt;Dynamic&lt;/a&gt;&lt;/code&gt; is an object encapsulated together with its type.</source>
          <target state="translated">タイプ &lt;code&gt;&lt;a href=&quot;data-dynamic#t:Dynamic&quot;&gt;Dynamic&lt;/a&gt;&lt;/code&gt; の値は、そのタイプとともにカプセル化されたオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="5e578226b20de3d07741dafad66454d118f3458d" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt; a&lt;/code&gt; is a pointer to a function callable from foreign code. The type &lt;code&gt;a&lt;/code&gt; will normally be a &lt;em&gt;foreign type&lt;/em&gt;, a function type with zero or more arguments where</source>
          <target state="translated">タイプ &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt; a&lt;/code&gt; の値は、外部コードから呼び出し可能な関数へのポインターです。タイプ &lt;code&gt;a&lt;/code&gt; は通常、&lt;em&gt;外部タイプ&lt;/em&gt;、つまりゼロ個以上の引数を持つ関数タイプです。</target>
        </trans-unit>
        <trans-unit id="5e81410f386c89f452d754e65a825472786597c7" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt; a&lt;/code&gt; may be a pointer to a foreign function, either returned by another foreign function or imported with a a static address import like</source>
          <target state="translated">タイプ &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt; a&lt;/code&gt; の値は、別の外部関数によって返されるか、静的アドレスインポートでインポートされた外部関数へのポインタである場合があります。</target>
        </trans-unit>
        <trans-unit id="7f136bc98f2d8137b486a143123edbe9b3241275" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt; a&lt;/code&gt; represents a pointer to an object, or an array of objects, which may be marshalled to or from Haskell values of type &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt; a&lt;/code&gt; の値は、オブジェクトへのポインター、またはオブジェクトの配列を表し、タイプ &lt;code&gt;a&lt;/code&gt; の Haskell値との間でマーシャリングできます。</target>
        </trans-unit>
        <trans-unit id="3cd6a3283ff99f274500f801cf1370f639df9d9c" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;&lt;a href=&quot;ghc-exts#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt; a&lt;/code&gt; is a pointer to a function callable from foreign code. The type &lt;code&gt;a&lt;/code&gt; will normally be a &lt;em&gt;foreign type&lt;/em&gt;, a function type with zero or more arguments where</source>
          <target state="translated">タイプ &lt;code&gt;&lt;a href=&quot;ghc-exts#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt; a&lt;/code&gt; の値は、外部コードから呼び出し可能な関数へのポインターです。タイプ &lt;code&gt;a&lt;/code&gt; は通常、&lt;em&gt;外部タイプ&lt;/em&gt;、つまりゼロ個以上の引数を持つ関数タイプです。</target>
        </trans-unit>
        <trans-unit id="afb41f27d10d971b0c644adebd15549eb369a006" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;&lt;a href=&quot;ghc-exts#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt; a&lt;/code&gt; may be a pointer to a foreign function, either returned by another foreign function or imported with a a static address import like</source>
          <target state="translated">タイプ &lt;code&gt;&lt;a href=&quot;ghc-exts#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt; a&lt;/code&gt; の値は、別の外部関数によって返されるか、静的アドレスインポートでインポートされた外部関数へのポインタである場合があります。</target>
        </trans-unit>
        <trans-unit id="239d8e1787a28722de24cac0f475ff48393d312a" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Ptr&quot;&gt;Ptr&lt;/a&gt; a&lt;/code&gt; represents a pointer to an object, or an array of objects, which may be marshalled to or from Haskell values of type &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Ptr&quot;&gt;Ptr&lt;/a&gt; a&lt;/code&gt; の値は、オブジェクトへのポインター、またはオブジェクトの配列を表し、タイプ &lt;code&gt;a&lt;/code&gt; の Haskell値との間でマーシャリングできます。</target>
        </trans-unit>
        <trans-unit id="65cdd07d411abaf19b949230fd787b91d7248467" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt; a&lt;/code&gt; is a computation which, when performed, does some I/O before returning a value of type &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt; a&lt;/code&gt; の値は、実行時に、タイプ &lt;code&gt;a&lt;/code&gt; の値を返す前に何らかの入出力を行う計算です。</target>
        </trans-unit>
        <trans-unit id="a20081f01fcf352f0cfcb6c5a5c6d192ad5b3810" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt; a&lt;/code&gt; is a pointer to a function callable from foreign code. The type &lt;code&gt;a&lt;/code&gt; will normally be a &lt;em&gt;foreign type&lt;/em&gt;, a function type with zero or more arguments where</source>
          <target state="translated">タイプ &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt; a&lt;/code&gt; の値は、外部コードから呼び出し可能な関数へのポインターです。タイプ &lt;code&gt;a&lt;/code&gt; は通常、&lt;em&gt;外部タイプ&lt;/em&gt;、つまりゼロ個以上の引数を持つ関数タイプです。</target>
        </trans-unit>
        <trans-unit id="6305ddbae16f3512160787cb992d3e58bee68afe" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt; a&lt;/code&gt; may be a pointer to a foreign function, either returned by another foreign function or imported with a a static address import like</source>
          <target state="translated">タイプ &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt; a&lt;/code&gt; の値は、別の外部関数によって返されるか、静的アドレスインポートでインポートされた外部関数へのポインタである場合があります。</target>
        </trans-unit>
        <trans-unit id="9be954ea62342aa30dc2f597f01c234102f416fd" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt; a&lt;/code&gt; represents a pointer to an object, or an array of objects, which may be marshalled to or from Haskell values of type &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt; a&lt;/code&gt; の値は、オブジェクトへのポインター、またはオブジェクトの配列を表し、タイプ &lt;code&gt;a&lt;/code&gt; の Haskell値との間でマーシャリングできます。</target>
        </trans-unit>
        <trans-unit id="90894fbb07b5d90eacb70ed7f8519e1d7af5b5d4" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt; a&lt;/code&gt; is a computation which, when performed, does some I/O before returning a value of type &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt; a&lt;/code&gt; の値は、実行時に、タイプ &lt;code&gt;a&lt;/code&gt; の値を返す前に何らかの入出力を行う計算です。</target>
        </trans-unit>
        <trans-unit id="5f741bc04d3ebabbc8052c3e8ced2a6bbb1b0a05" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Ptr&quot;&gt;Ptr&lt;/a&gt; a&lt;/code&gt; represents a pointer to an object, or an array of objects, which may be marshalled to or from Haskell values of type &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Ptr&quot;&gt;Ptr&lt;/a&gt; a&lt;/code&gt; の値は、オブジェクトへのポインター、またはオブジェクトの配列を表し、タイプ &lt;code&gt;a&lt;/code&gt; の Haskell値との間でマーシャリングできます。</target>
        </trans-unit>
        <trans-unit id="9e06d2b58f261c19e13fe9c8981e6d1218570c7c" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt; a&lt;/code&gt; is a computation which, when performed, does some I/O before returning a value of type &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt; a&lt;/code&gt; の値は、実行時に、タイプ &lt;code&gt;a&lt;/code&gt; の値を返す前に何らかの入出力を行う計算です。</target>
        </trans-unit>
        <trans-unit id="65e2250aafb04e86e024b91238925a6bb2963b39" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;StablePtr a&lt;/code&gt; is a stable pointer to a Haskell expression of type &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">タイプの値 &lt;code&gt;StablePtr a&lt;/code&gt; 型のHaskellの発現に対して安定ポインタである &lt;code&gt;a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="013a61726b4b56a72c4ddab274465f1e28f21c9f" translate="yes" xml:space="preserve">
          <source>A variable is &lt;em&gt;closed&lt;/em&gt; if and only if</source>
          <target state="translated">変数が&lt;em&gt;閉じ&lt;/em&gt;られるのは、</target>
        </trans-unit>
        <trans-unit id="6d0624bb33a678b07c2a300b904ae61401b2b3e3" translate="yes" xml:space="preserve">
          <source>A variable is called &lt;em&gt;dynamically bound&lt;/em&gt; when it is bound by the calling context of a function and &lt;em&gt;statically bound&lt;/em&gt; when bound by the callee&amp;rsquo;s context. In Haskell, all variables are statically bound. Dynamic binding of variables is a notion that goes back to Lisp, but was later discarded in more modern incarnations, such as Scheme. Dynamic binding can be very confusing in an untyped language, and unfortunately, typed languages, in particular Hindley-Milner typed languages like Haskell, only support static scoping of variables.</source>
          <target state="translated">変数は、関数の呼び出しコンテキストによってバインドされている場合は&lt;em&gt;動的バインド&lt;/em&gt;と呼ばれ、呼び出し先のコンテキストによってバインドされている場合は&lt;em&gt;静的バインド&lt;/em&gt;と呼ばれます。Haskellでは、すべての変数が静的にバインドされます。変数の動的バインディングは、Lispにさかのぼる概念ですが、Schemeなどのより現代的な化身では後に破棄されました。動的バインディングは、型なし言語では非常に混乱する可能性があります。残念ながら、型付き言語、特にHaskellなどのHindley-Milner型付き言語は、変数の静的スコープのみをサポートしています。</target>
        </trans-unit>
        <trans-unit id="e557c6a254bde2fa9fce694bac49fbabbe6203a2" translate="yes" xml:space="preserve">
          <source>A variable is regarded as &amp;ldquo;used&amp;rdquo; if</source>
          <target state="translated">変数は、「使用済み」と見なされます。</target>
        </trans-unit>
        <trans-unit id="ef00f1720266eda76457e7e8274afd0d351d58ec" translate="yes" xml:space="preserve">
          <source>A variable-length event encoding a heap sample broken down by,</source>
          <target state="translated">ヒープサンプルを分解してエンコードする可変長イベント。</target>
        </trans-unit>
        <trans-unit id="b96521844e19dff99bc29450ed4b5c3e48d9657d" translate="yes" xml:space="preserve">
          <source>A variable-length packet encoding a heap profile sample broken down by,</source>
          <target state="translated">ヒーププロファイルのサンプルを、次のように分解してエンコードした可変長のパケットです。</target>
        </trans-unit>
        <trans-unit id="d2629ff819bfa2b3bc89a988e7b72caf2ad22ebf" translate="yes" xml:space="preserve">
          <source>A variable-length packet encoding a profile sample.</source>
          <target state="translated">プロファイルサンプルをエンコードする可変長パケット。</target>
        </trans-unit>
        <trans-unit id="661a750d420cf956ff31ac1cd27a77853ed3578e" translate="yes" xml:space="preserve">
          <source>A variable-length packet produced once for each cost centre,</source>
          <target state="translated">各コストセンターごとに1回生成される可変長のパケット。</target>
        </trans-unit>
        <trans-unit id="5d1f67f8c131ae27aed80d2e73f0a9a08edfca88" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;control-applicative#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; with the arguments reversed.</source>
          <target state="translated">引数を逆にした &lt;code&gt;&lt;a href=&quot;control-applicative#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="bdb2d179c96dfc9014b723ecd18ad20eb9df0287" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;control-exception#v:bracket&quot;&gt;bracket&lt;/a&gt;&lt;/code&gt; where the return value from the first computation is not required.</source>
          <target state="translated">最初の計算からの戻り値が不要な &lt;code&gt;&lt;a href=&quot;control-exception#v:bracket&quot;&gt;bracket&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="f484ec182618f59bc6a03fa556e1dfe4602922b2" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;control-exception#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; that can only be used within the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナド内でのみ使用できる &lt;code&gt;&lt;a href=&quot;control-exception#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="1a806f7ef066f93f4459cf71c970f146b042ce14" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; that takes an exception predicate to select which exceptions are caught (c.f. &lt;code&gt;&lt;a href=&quot;control-exception#v:catchJust&quot;&gt;catchJust&lt;/a&gt;&lt;/code&gt;). If the exception does not match the predicate, it is re-thrown.</source>
          <target state="translated">キャッチされる例外を選択するために例外述語を使用する &lt;code&gt;&lt;a href=&quot;control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; のバリアント（cf &lt;code&gt;&lt;a href=&quot;control-exception#v:catchJust&quot;&gt;catchJust&lt;/a&gt;&lt;/code&gt; ）。例外が述語と一致しない場合は、再スローされます。</target>
        </trans-unit>
        <trans-unit id="4650eb44df689d006c59aa8509db3ab07c1464b0" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; that takes an exception predicate to select which exceptions are caught. See &lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;'s &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:tryJust&quot;&gt;tryJust&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">キャッチする例外を選択するために例外述語を使用する &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; のバリアント。&lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;の &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:tryJust&quot;&gt;tryJust&lt;/a&gt;&lt;/code&gt; を参照してください</target>
        </trans-unit>
        <trans-unit id="457d97e538f9f0947778be46de4c4ed029daa48c" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; that takes an exception predicate to select which exceptions are caught. See &lt;a href=&quot;../base-4.15.0.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;'s &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:tryJust&quot;&gt;tryJust&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">キャッチする例外を選択するために例外述語を使用する &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; のバリアント。&lt;a href=&quot;../base-4.15.0.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;の &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:tryJust&quot;&gt;tryJust&lt;/a&gt;&lt;/code&gt; を参照してください</target>
        </trans-unit>
        <trans-unit id="980dc5b1188b883f4b0698253298fdcc03f22555" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;control-monad-state-class#v:modify&quot;&gt;modify&lt;/a&gt;&lt;/code&gt; in which the computation is strict in the new state.</source>
          <target state="translated">新しい状態での計算が厳密な &lt;code&gt;&lt;a href=&quot;control-monad-state-class#v:modify&quot;&gt;modify&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="4ec6ceddfeaaf45a25f723cacb495b1ccc3c2250" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;control-monad-state-lazy#v:modify&quot;&gt;modify&lt;/a&gt;&lt;/code&gt; in which the computation is strict in the new state.</source>
          <target state="translated">新しい状態での計算が厳密な &lt;code&gt;&lt;a href=&quot;control-monad-state-lazy#v:modify&quot;&gt;modify&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="d552c9d4da515c75912002c65ae5ebd55983c353" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;control-monad-state-strict#v:modify&quot;&gt;modify&lt;/a&gt;&lt;/code&gt; in which the computation is strict in the new state.</source>
          <target state="translated">新しい状態での計算が厳密な &lt;code&gt;&lt;a href=&quot;control-monad-state-strict#v:modify&quot;&gt;modify&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="2be03be1f4f972f3e16388053b30f3f14523b03b" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:modify&quot;&gt;modify&lt;/a&gt;&lt;/code&gt; in which the computation is strict in the new state.</source>
          <target state="translated">新しい状態での計算が厳密な &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:modify&quot;&gt;modify&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="3d7eba7d8d00a5efd27077394673889a22d85d24" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-strict#v:modify&quot;&gt;modify&lt;/a&gt;&lt;/code&gt; in which the computation is strict in the new state.</source>
          <target state="translated">新しい状態での計算が厳密な &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-strict#v:modify&quot;&gt;modify&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="f8879cc31acc8932b5c49885c6d29e918117f2f5" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifoldl&quot;&gt;bifoldl&lt;/a&gt;&lt;/code&gt; that has no base case, and thus may only be applied to non-empty structures.</source>
          <target state="translated">基本ケースがないため、空でない構造にのみ適用できる &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifoldl&quot;&gt;bifoldl&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="d3d4bfbfcd281f231983e2d29e27a74b95a66a32" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifoldr&quot;&gt;bifoldr&lt;/a&gt;&lt;/code&gt; that has no base case, and thus may only be applied to non-empty structures.</source>
          <target state="translated">基本ケースがないため、空でない構造にのみ適用できる &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifoldr&quot;&gt;bifoldr&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="50c2bc37d962248156836e2639fc6b4dadc3fba3" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldMap&quot;&gt;foldMap&lt;/a&gt;&lt;/code&gt; that is strict in the accumulator.</source>
          <target state="translated">アキュムレータで厳密な &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldMap&quot;&gt;foldMap&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="18749169ab66a243e5d3ff1e282a5a0fa0dd77c7" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; that has no base case, and thus may only be applied to non-empty structures.</source>
          <target state="translated">ベースケースがない &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; のバリアントで、空でない構造にのみ適用できます。</target>
        </trans-unit>
        <trans-unit id="c779c916890acc8970f5fe31251b940c218fccc0" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; that has no base case, and thus may only be applied to non-empty structures.</source>
          <target state="translated">ベースケースがなく、空でない構造体にのみ適用できる &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="8ddfd37c7061963e7b77b06bdb4fbd084e4a8097" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;data-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; that has no base case, and thus may only be applied to non-empty structures.</source>
          <target state="translated">ベースケースがない &lt;code&gt;&lt;a href=&quot;data-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; のバリアントで、空でない構造にのみ適用できます。</target>
        </trans-unit>
        <trans-unit id="7defbd1e72da7e4dd78ff7b670071a5b458cf24a" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;data-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; that has no base case, and thus may only be applied to non-empty structures.</source>
          <target state="translated">ベースケースがなく、空でない構造体にのみ適用できる &lt;code&gt;&lt;a href=&quot;data-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="e9ee1d48660b932b3bb180c1aaef20eee11c73c0" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;ghc-base#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; with the arguments reversed.</source>
          <target state="translated">引数を逆にした &lt;code&gt;&lt;a href=&quot;ghc-base#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="d32ebdebb4f9a3837e2e7d4648c8bd7eceb6c9f2" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;ghc-err#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; that does not produce a stack trace.</source>
          <target state="translated">スタックトレースを生成しない &lt;code&gt;&lt;a href=&quot;ghc-err#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="f23407f9c31b9d9550363e44222113e312af065d" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; that can only be used within the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">A variant of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; that can only be used within the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad.</target>
        </trans-unit>
        <trans-unit id="228eb2d34fa954a72d817265f3ac30a2c4d0f77c" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; that can only be used within the &lt;code&gt;&lt;a href=&quot;control-monad-stm#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">A variant of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; that can only be used within the &lt;code&gt;&lt;a href=&quot;control-monad-stm#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; monad.</target>
        </trans-unit>
        <trans-unit id="7861d5890086af48309a590da6181c625683ee1f" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; that can only be used within the &lt;code&gt;&lt;a href=&quot;ghc-conc#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; モナド内でのみ使用できる &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="9f5f00d655edd846275d9f60a79ac5425b4f77f7" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; that can only be used within the &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; モナド内でのみ使用できる &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="01e8eb5a5f4093ff8d82e55e0f565658eec94954" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; that can only be used within the &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナド内でのみ使用できる &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="0680130bb0f4b8f4cbc7c8b028930fd44a3af9ce" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; that can only be used within the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナド内でのみ使用できる &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="0ec4492419779cfaef51be94d2b8f28e80c4545f" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; that can only be used within the &lt;code&gt;&lt;a href=&quot;control-monad-stm#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-stm#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; モナド内でのみ使用できる &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="491efa58eb1f11c0cb3815ae8f348ca0c034ce84" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; that can only be used within the &lt;code&gt;&lt;a href=&quot;ghc-conc#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; モナド内でのみ使用できる &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="47d036c06686a27eae150f0188962179aa6b3b53" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; that can only be used within the &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; モナド内でのみ使用できる &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="da53c6399c31d81bfdb2f650d84ca62634038b07" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; that can only be used within the &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナド内でのみ使用できる &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="69da1307743efe2e8a8237d476b798b7d7365b9a" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; that can only be used within the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナド内でのみ使用できる &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="56ff224858a3dde352cfd622f8faf06fdcac9f54" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; that can only be used within the &lt;code&gt;&lt;a href=&quot;control-monad-stm#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-stm#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; モナド内でのみ使用できる &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="a809c38b18d928a0f77c7c89ff90f9de166ff429" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; that can only be used within the &lt;code&gt;&lt;a href=&quot;ghc-conc#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; モナド内でのみ使用できる &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="c8e0d10a78be7ef30c601c88335815732a957190" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; that can only be used within the &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; モナド内でのみ使用できる &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="5e7511a38a7e0457f1dab5ba0b54c5cec192d597" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; that can only be used within the &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナド内でのみ使用できる &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="73f171fdb5237d901b1c481374b6861edf14fa56" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; that does not produce a stack trace.</source>
          <target state="translated">スタックトレースを生成しない &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="47f3f2679bc0ad75bdf30646c6761ef6c4b68243" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;prelude#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; that has no base case, and thus may only be applied to non-empty structures.</source>
          <target state="translated">ベースケースがない &lt;code&gt;&lt;a href=&quot;prelude#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; のバリアントで、空でない構造にのみ適用できます。</target>
        </trans-unit>
        <trans-unit id="477f918f68cdb05044cf99fdb58a555808faeff3" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;prelude#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; that has no base case, and thus may only be applied to non-empty structures.</source>
          <target state="translated">ベースケースがなく、空でない構造体にのみ適用できる &lt;code&gt;&lt;a href=&quot;prelude#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="6911589d252df6b0d320b35e4685df9e30028055" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:bracket&quot;&gt;bracket&lt;/a&gt;&lt;/code&gt; where the return value from the first computation is not required.</source>
          <target state="translated">最初の計算からの戻り値が不要な &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:bracket&quot;&gt;bracket&lt;/a&gt;&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="add459265a4128073f2963ebb449fbb05ec6cb08" translate="yes" xml:space="preserve">
          <source>A variety of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; which omits the checks on &lt;code&gt;n&lt;/code&gt; so there is an obligation on the programmer to provide a proof that &lt;code&gt;0 &amp;lt;= n &amp;lt;= &lt;a href=&quot;../base-4.13.0.0/data-foldable#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; のチェックを省略したさまざまな &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; により、プログラマーは &lt;code&gt;0 &amp;lt;= n &amp;lt;= &lt;a href=&quot;../base-4.13.0.0/data-foldable#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; &lt;a href=&quot;../base-4.13.0.0/data-foldable#v:length&quot;&gt;長さ&lt;/a&gt; xsであるという証明を提供する義務があります。</target>
        </trans-unit>
        <trans-unit id="022677c1577a85e404387475e8f412822a05da7e" translate="yes" xml:space="preserve">
          <source>A variety of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:head&quot;&gt;head&lt;/a&gt;&lt;/code&gt; for non-empty ByteStrings. &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt; omits the check for the empty case, so there is an obligation on the programmer to provide a proof that the ByteString is non-empty.</source>
          <target state="translated">空でないByteStringのさまざまな &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:head&quot;&gt;head&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt; は空のケースのチェックを省略しているため、ByteStringが空でないことの証明を提供することはプログラマーの義務です。</target>
        </trans-unit>
        <trans-unit id="8b4ffb4fe31d0195b8acddfad454298b4604216b" translate="yes" xml:space="preserve">
          <source>A variety of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; for non-empty ByteStrings. &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeInit&quot;&gt;unsafeInit&lt;/a&gt;&lt;/code&gt; omits the check for the empty case. As with &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt;, the programmer must provide a separate proof that the ByteString is non-empty.</source>
          <target state="translated">空でないByteStringのさまざまな &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; 化。 &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeInit&quot;&gt;unsafeInit&lt;/a&gt;&lt;/code&gt; は、空のケースのチェックを省略します。 &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt; と同様に、プログラマーはByteStringが空でないことを個別に証明する必要があります。</target>
        </trans-unit>
        <trans-unit id="1d777dc5f4859f53e852d78b2a883751d3a5e477" translate="yes" xml:space="preserve">
          <source>A variety of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; for non-empty ByteStrings. &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeLast&quot;&gt;unsafeLast&lt;/a&gt;&lt;/code&gt; omits the check for the empty case. As with &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt;, the programmer must provide a separate proof that the ByteString is non-empty.</source>
          <target state="translated">空でないByteStringsのさまざまな &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeLast&quot;&gt;unsafeLast&lt;/a&gt;&lt;/code&gt; は、空のケースのチェックを省略します。 &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt; と同様に、プログラマーはByteStringが空でないことを個別に証明する必要があります。</target>
        </trans-unit>
        <trans-unit id="d0e791ecae2adcb55aa4c85c7e30c588765957cb" translate="yes" xml:space="preserve">
          <source>A variety of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:tail&quot;&gt;tail&lt;/a&gt;&lt;/code&gt; for non-empty ByteStrings. &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeTail&quot;&gt;unsafeTail&lt;/a&gt;&lt;/code&gt; omits the check for the empty case. As with &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt;, the programmer must provide a separate proof that the ByteString is non-empty.</source>
          <target state="translated">空でないByteStringのさまざまな &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:tail&quot;&gt;tail&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeTail&quot;&gt;unsafeTail&lt;/a&gt;&lt;/code&gt; は、空のケースのチェックを省略します。 &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt; と同様に、プログラマーはByteStringが空でないことを個別に証明する必要があります。</target>
        </trans-unit>
        <trans-unit id="cd0eca831b19e2193bae89b92f0b4e215f8baf4c" translate="yes" xml:space="preserve">
          <source>A variety of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; which omits the checks on &lt;code&gt;n&lt;/code&gt; so there is an obligation on the programmer to provide a proof that &lt;code&gt;0 &amp;lt;= n &amp;lt;= &lt;a href=&quot;../base-4.13.0.0/data-foldable#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; のチェックを省略したさまざまな &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; なので、プログラマーは &lt;code&gt;0 &amp;lt;= n &amp;lt;= &lt;a href=&quot;../base-4.13.0.0/data-foldable#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; &lt;a href=&quot;../base-4.13.0.0/data-foldable#v:length&quot;&gt;長さ&lt;/a&gt; xsであるという証明を提供する義務があります。</target>
        </trans-unit>
        <trans-unit id="9d61fdfe5cc2564d603aac91be2fa83ba8aa2a7c" translate="yes" xml:space="preserve">
          <source>A variety of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; which omits the checks on &lt;code&gt;n&lt;/code&gt; so there is an obligation on the programmer to provide a proof that &lt;code&gt;0 &amp;lt;= n &amp;lt;= &lt;a href=&quot;../base-4.14.1.0/data-foldable#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">A variety of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; which omits the checks on &lt;code&gt;n&lt;/code&gt; so there is an obligation on the programmer to provide a proof that &lt;code&gt;0 &amp;lt;= n &amp;lt;= &lt;a href=&quot;../base-4.14.1.0/data-foldable#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="06fb91e894a0b25610b75a5af5b9808209630d25" translate="yes" xml:space="preserve">
          <source>A variety of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:head&quot;&gt;head&lt;/a&gt;&lt;/code&gt; for non-empty ByteStrings. &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt; omits the check for the empty case, so there is an obligation on the programmer to provide a proof that the ByteString is non-empty.</source>
          <target state="translated">A variety of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:head&quot;&gt;head&lt;/a&gt;&lt;/code&gt; for non-empty ByteStrings. &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt; omits the check for the empty case, so there is an obligation on the programmer to provide a proof that the ByteString is non-empty.</target>
        </trans-unit>
        <trans-unit id="fdce50acace32ba6eb0fe5af8f10f59503ea5260" translate="yes" xml:space="preserve">
          <source>A variety of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; for non-empty ByteStrings. &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeInit&quot;&gt;unsafeInit&lt;/a&gt;&lt;/code&gt; omits the check for the empty case. As with &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt;, the programmer must provide a separate proof that the ByteString is non-empty.</source>
          <target state="translated">A variety of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; for non-empty ByteStrings. &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeInit&quot;&gt;unsafeInit&lt;/a&gt;&lt;/code&gt; omits the check for the empty case. As with &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt; , the programmer must provide a separate proof that the ByteString is non-empty.</target>
        </trans-unit>
        <trans-unit id="416bf67712d94a4092fa1366ed0a1243511ca321" translate="yes" xml:space="preserve">
          <source>A variety of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; for non-empty ByteStrings. &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeLast&quot;&gt;unsafeLast&lt;/a&gt;&lt;/code&gt; omits the check for the empty case. As with &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt;, the programmer must provide a separate proof that the ByteString is non-empty.</source>
          <target state="translated">A variety of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; for non-empty ByteStrings. &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeLast&quot;&gt;unsafeLast&lt;/a&gt;&lt;/code&gt; omits the check for the empty case. As with &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt; , the programmer must provide a separate proof that the ByteString is non-empty.</target>
        </trans-unit>
        <trans-unit id="73173fcba7dc4f1755bea5939f3721c98a85b2cb" translate="yes" xml:space="preserve">
          <source>A variety of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:tail&quot;&gt;tail&lt;/a&gt;&lt;/code&gt; for non-empty ByteStrings. &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeTail&quot;&gt;unsafeTail&lt;/a&gt;&lt;/code&gt; omits the check for the empty case. As with &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt;, the programmer must provide a separate proof that the ByteString is non-empty.</source>
          <target state="translated">A variety of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:tail&quot;&gt;tail&lt;/a&gt;&lt;/code&gt; for non-empty ByteStrings. &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeTail&quot;&gt;unsafeTail&lt;/a&gt;&lt;/code&gt; omits the check for the empty case. As with &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt; , the programmer must provide a separate proof that the ByteString is non-empty.</target>
        </trans-unit>
        <trans-unit id="91ba6eac709468119bb502dc4a786ac25beaa443" translate="yes" xml:space="preserve">
          <source>A variety of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; which omits the checks on &lt;code&gt;n&lt;/code&gt; so there is an obligation on the programmer to provide a proof that &lt;code&gt;0 &amp;lt;= n &amp;lt;= &lt;a href=&quot;../base-4.14.1.0/data-foldable#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">A variety of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; which omits the checks on &lt;code&gt;n&lt;/code&gt; so there is an obligation on the programmer to provide a proof that &lt;code&gt;0 &amp;lt;= n &amp;lt;= &lt;a href=&quot;../base-4.14.1.0/data-foldable#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9d3b1c4fc3a142fd20dff1de407e4ac59e10a400" translate="yes" xml:space="preserve">
          <source>A variety of &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; which omits the checks on &lt;code&gt;n&lt;/code&gt; so there is an obligation on the programmer to provide a proof that &lt;code&gt;0 &amp;lt;= n &amp;lt;= &lt;a href=&quot;../base-4.15.0.0/data-foldable#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; のチェックを省略しているため、プログラマーには &lt;code&gt;0 &amp;lt;= n &amp;lt;= &lt;a href=&quot;../base-4.15.0.0/data-foldable#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; &lt;a href=&quot;../base-4.15.0.0/data-foldable#v:length&quot;&gt;長さ&lt;/a&gt;xsの証明を提供する義務があるさまざまな &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9efa9d9e56c28930437717cb9aa4849cca73292e" translate="yes" xml:space="preserve">
          <source>A variety of &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:head&quot;&gt;head&lt;/a&gt;&lt;/code&gt; for non-empty ByteStrings. &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt; omits the check for the empty case, so there is an obligation on the programmer to provide a proof that the ByteString is non-empty.</source>
          <target state="translated">空でないByteStringのさまざまな &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:head&quot;&gt;head&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt; は空のケースのチェックを省略しているため、ByteStringが空でないことを証明する義務がプログラマーにあります。</target>
        </trans-unit>
        <trans-unit id="70d5fb53ef83cc099b75753728a3c1d6ef6749dd" translate="yes" xml:space="preserve">
          <source>A variety of &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; for non-empty ByteStrings. &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeInit&quot;&gt;unsafeInit&lt;/a&gt;&lt;/code&gt; omits the check for the empty case. As with &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt;, the programmer must provide a separate proof that the ByteString is non-empty.</source>
          <target state="translated">空でないByteStringのさまざまな &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; 化。 &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeInit&quot;&gt;unsafeInit&lt;/a&gt;&lt;/code&gt; は、空のケースのチェックを省略します。 &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt; と同様に、プログラマーはByteStringが空でないことを示す別の証明を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="296f173f8814e66ec18c8aaf3b18462a6dccf7c5" translate="yes" xml:space="preserve">
          <source>A variety of &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; for non-empty ByteStrings. &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeLast&quot;&gt;unsafeLast&lt;/a&gt;&lt;/code&gt; omits the check for the empty case. As with &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt;, the programmer must provide a separate proof that the ByteString is non-empty.</source>
          <target state="translated">各種の &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 空でないバイト文字列のため。 &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeLast&quot;&gt;unsafeLast&lt;/a&gt;&lt;/code&gt; は、空のケースのチェックを省略します。 &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt; と同様に、プログラマーはByteStringが空でないことを示す別の証明を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="9a16411bd7567a88ce6dd6bd308879944efffc3c" translate="yes" xml:space="preserve">
          <source>A variety of &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:tail&quot;&gt;tail&lt;/a&gt;&lt;/code&gt; for non-empty ByteStrings. &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeTail&quot;&gt;unsafeTail&lt;/a&gt;&lt;/code&gt; omits the check for the empty case. As with &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt;, the programmer must provide a separate proof that the ByteString is non-empty.</source>
          <target state="translated">空でないByteStringのさまざまな &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:tail&quot;&gt;tail&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeTail&quot;&gt;unsafeTail&lt;/a&gt;&lt;/code&gt; は、空のケースのチェックを省略します。 &lt;code&gt;&lt;a href=&quot;data-bytestring-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt; と同様に、プログラマーはByteStringが空でないことを示す別の証明を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="51c2f33a34276ee363eda08a1559587e08e149e8" translate="yes" xml:space="preserve">
          <source>A variety of &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; which omits the checks on &lt;code&gt;n&lt;/code&gt; so there is an obligation on the programmer to provide a proof that &lt;code&gt;0 &amp;lt;= n &amp;lt;= &lt;a href=&quot;../base-4.15.0.0/data-foldable#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; のチェックを省略しているため、プログラマーには &lt;code&gt;0 &amp;lt;= n &amp;lt;= &lt;a href=&quot;../base-4.15.0.0/data-foldable#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; &lt;a href=&quot;../base-4.15.0.0/data-foldable#v:length&quot;&gt;長さ&lt;/a&gt;xsの証明を提供する義務があるさまざまな &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="011da0f3d1d6c75639ffb6db3b663d10df8596d2" translate="yes" xml:space="preserve">
          <source>A version can be tagged with an arbitrary list of strings. The interpretation of the list of tags is entirely dependent on the entity that this version applies to.</source>
          <target state="translated">バージョンには、任意の文字列のリストでタグを付けることができます。タグのリストの解釈は、このバージョンが適用されるエンティティに完全に依存します。</target>
        </trans-unit>
        <trans-unit id="ecaf2ca21f3f2373e5185cd515851b6e67ee803a" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#v:peekTBQueue&quot;&gt;peekTBQueue&lt;/a&gt;&lt;/code&gt; which does not retry. Instead it returns &lt;code&gt;Nothing&lt;/code&gt; if no value is available.</source>
          <target state="translated">再試行しないバージョンの &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#v:peekTBQueue&quot;&gt;peekTBQueue&lt;/a&gt;&lt;/code&gt; 。使用できる値がない場合は、代わりに &lt;code&gt;Nothing&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="60ffeb4910a01e5cd6d72fcebc814ef710471656" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#v:readTBQueue&quot;&gt;readTBQueue&lt;/a&gt;&lt;/code&gt; which does not retry. Instead it returns &lt;code&gt;Nothing&lt;/code&gt; if no value is available.</source>
          <target state="translated">再試行しない &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#v:readTBQueue&quot;&gt;readTBQueue&lt;/a&gt;&lt;/code&gt; のバージョン。使用できる値がない場合は、代わりに &lt;code&gt;Nothing&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0b08df2ea8c4c791467734758ae49b0aa839c743" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:peekTChan&quot;&gt;peekTChan&lt;/a&gt;&lt;/code&gt; which does not retry. Instead it returns &lt;code&gt;Nothing&lt;/code&gt; if no value is available.</source>
          <target state="translated">再試行しないバージョンの &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:peekTChan&quot;&gt;peekTChan&lt;/a&gt;&lt;/code&gt; 。使用できる値がない場合は、代わりに &lt;code&gt;Nothing&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ef5e78e2ce5a1352cca108846156255775dd7108" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:readTChan&quot;&gt;readTChan&lt;/a&gt;&lt;/code&gt; which does not retry. Instead it returns &lt;code&gt;Nothing&lt;/code&gt; if no value is available.</source>
          <target state="translated">再試行しないバージョンの &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:readTChan&quot;&gt;readTChan&lt;/a&gt;&lt;/code&gt; 。使用できる値がない場合は、代わりに &lt;code&gt;Nothing&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ff76e55acfcccd02a15d736db81fe96146722925" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:putTMVar&quot;&gt;putTMVar&lt;/a&gt;&lt;/code&gt; that does not &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:tryPutTMVar&quot;&gt;tryPutTMVar&lt;/a&gt;&lt;/code&gt; function attempts to put the value &lt;code&gt;a&lt;/code&gt; into the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if it was successful, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt; しない &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:putTMVar&quot;&gt;putTMVar&lt;/a&gt;&lt;/code&gt; のバージョン。 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:tryPutTMVar&quot;&gt;tryPutTMVar&lt;/a&gt;&lt;/code&gt; 値置くための機能の試み &lt;code&gt;a&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; 返し、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; それは成功し、またはした場合 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; そう。</target>
        </trans-unit>
        <trans-unit id="28577cb8a660e56c217a279acfd2976c3b7454ed" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:putTMVar&quot;&gt;putTMVar&lt;/a&gt;&lt;/code&gt; that does not &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:tryPutTMVar&quot;&gt;tryPutTMVar&lt;/a&gt;&lt;/code&gt; function attempts to put the value &lt;code&gt;a&lt;/code&gt; into the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if it was successful, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">A version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:putTMVar&quot;&gt;putTMVar&lt;/a&gt;&lt;/code&gt; that does not &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt; . The &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:tryPutTMVar&quot;&gt;tryPutTMVar&lt;/a&gt;&lt;/code&gt; function attempts to put the value &lt;code&gt;a&lt;/code&gt; into the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; , returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if it was successful, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; otherwise.</target>
        </trans-unit>
        <trans-unit id="4f86494fde7cd60fb48e1793ad1502f5eb25c2ad" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:putTMVar&quot;&gt;putTMVar&lt;/a&gt;&lt;/code&gt; that does not &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:tryPutTMVar&quot;&gt;tryPutTMVar&lt;/a&gt;&lt;/code&gt; function attempts to put the value &lt;code&gt;a&lt;/code&gt; into the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if it was successful, or &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt; しないバージョンの &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:putTMVar&quot;&gt;putTMVar&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:tryPutTMVar&quot;&gt;tryPutTMVar&lt;/a&gt;&lt;/code&gt; 値置くための機能の試み &lt;code&gt;a&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; 返し、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; それは成功し、またはした場合 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; そう。</target>
        </trans-unit>
        <trans-unit id="01dc8f0973fefa88de9a13d12ee694150980b61d" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:readTMVar&quot;&gt;readTMVar&lt;/a&gt;&lt;/code&gt; which does not retry. Instead it returns &lt;code&gt;Nothing&lt;/code&gt; if no value is available.</source>
          <target state="translated">再試行しないバージョンの &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:readTMVar&quot;&gt;readTMVar&lt;/a&gt;&lt;/code&gt; 。使用できる値がない場合は、代わりに &lt;code&gt;Nothing&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ed2b50c296f40c959a6e33c87f8de3078552d7bb" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:takeTMVar&quot;&gt;takeTMVar&lt;/a&gt;&lt;/code&gt; that does not &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:tryTakeTMVar&quot;&gt;tryTakeTMVar&lt;/a&gt;&lt;/code&gt; function returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; was empty, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt; if the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; was full with contents &lt;code&gt;a&lt;/code&gt;. After &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:tryTakeTMVar&quot;&gt;tryTakeTMVar&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; is left empty.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt; しない &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:takeTMVar&quot;&gt;takeTMVar&lt;/a&gt;&lt;/code&gt; のバージョン。 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:tryTakeTMVar&quot;&gt;tryTakeTMVar&lt;/a&gt;&lt;/code&gt; 関数が戻るの &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; あれば &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; は空ではなかった、または &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt; 場合 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; は内容でいっぱいでした。 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:tryTakeTMVar&quot;&gt;tryTakeTMVar&lt;/a&gt;&lt;/code&gt; の後、 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; は空のままになります。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5433d7bb6120760452598bf6c542c3024a31c810" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:takeTMVar&quot;&gt;takeTMVar&lt;/a&gt;&lt;/code&gt; that does not &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:tryTakeTMVar&quot;&gt;tryTakeTMVar&lt;/a&gt;&lt;/code&gt; function returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; was empty, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt; if the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; was full with contents &lt;code&gt;a&lt;/code&gt;. After &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:tryTakeTMVar&quot;&gt;tryTakeTMVar&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; is left empty.</source>
          <target state="translated">A version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:takeTMVar&quot;&gt;takeTMVar&lt;/a&gt;&lt;/code&gt; that does not &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt; . The &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:tryTakeTMVar&quot;&gt;tryTakeTMVar&lt;/a&gt;&lt;/code&gt; function returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; was empty, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt; if the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; was full with contents &lt;code&gt;a&lt;/code&gt; . After &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:tryTakeTMVar&quot;&gt;tryTakeTMVar&lt;/a&gt;&lt;/code&gt; , the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; is left empty.</target>
        </trans-unit>
        <trans-unit id="1bbdfb47a525512aa542f96f58483e8697d0dc16" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:takeTMVar&quot;&gt;takeTMVar&lt;/a&gt;&lt;/code&gt; that does not &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:tryTakeTMVar&quot;&gt;tryTakeTMVar&lt;/a&gt;&lt;/code&gt; function returns &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; was empty, or &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt; if the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; was full with contents &lt;code&gt;a&lt;/code&gt;. After &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:tryTakeTMVar&quot;&gt;tryTakeTMVar&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; is left empty.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt; しないバージョンの &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:takeTMVar&quot;&gt;takeTMVar&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:tryTakeTMVar&quot;&gt;tryTakeTMVar&lt;/a&gt;&lt;/code&gt; 関数が戻るの &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; あれば &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; は空ではなかった、または &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt; 場合 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; は内容でいっぱいでした。 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:tryTakeTMVar&quot;&gt;tryTakeTMVar&lt;/a&gt;&lt;/code&gt; の後、 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; は空のままになります。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e30f3fd19a32279f9ca43fcf5051a4b725b4afb0" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#v:peekTQueue&quot;&gt;peekTQueue&lt;/a&gt;&lt;/code&gt; which does not retry. Instead it returns &lt;code&gt;Nothing&lt;/code&gt; if no value is available.</source>
          <target state="translated">再試行しないバージョンの &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#v:peekTQueue&quot;&gt;peekTQueue&lt;/a&gt;&lt;/code&gt; 。使用できる値がない場合は、代わりに &lt;code&gt;Nothing&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2433a0ad5e90f34ad9f4bf45621e0ceb170fdea6" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#v:readTQueue&quot;&gt;readTQueue&lt;/a&gt;&lt;/code&gt; which does not retry. Instead it returns &lt;code&gt;Nothing&lt;/code&gt; if no value is available.</source>
          <target state="translated">再試行しないバージョンの &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#v:readTQueue&quot;&gt;readTQueue&lt;/a&gt;&lt;/code&gt; 。使用できる値がない場合は、代わりに &lt;code&gt;Nothing&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4fc561502aa5288942ce875d139d9631abcf512c" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;&lt;a href=&quot;control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; with the arguments swapped around; useful in situations where the code for the handler is shorter. For example:</source>
          <target state="translated">引数を入れ替えた &lt;code&gt;&lt;a href=&quot;control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; のバージョン。ハンドラーのコードが短い状況で役立ちます。例えば：</target>
        </trans-unit>
        <trans-unit id="1c3e44a662ef33517cd5d56bc8e42cf32ad0c3d0" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;&lt;a href=&quot;control-exception#v:catchJust&quot;&gt;catchJust&lt;/a&gt;&lt;/code&gt; with the arguments swapped around (see &lt;code&gt;&lt;a href=&quot;control-exception#v:handle&quot;&gt;handle&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">引数が交換されたバージョンの &lt;code&gt;&lt;a href=&quot;control-exception#v:catchJust&quot;&gt;catchJust&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;control-exception#v:handle&quot;&gt;handle&lt;/a&gt;&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="e66efe0c3f15c8fafbf44d9ce27299363bc807ef" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;&lt;a href=&quot;data-ioref#v:atomicModifyIORef&quot;&gt;atomicModifyIORef&lt;/a&gt;&lt;/code&gt; that forces the (pair) result of the function.</source>
          <target state="translated">関数の（ペアの）結果を強制する &lt;code&gt;&lt;a href=&quot;data-ioref#v:atomicModifyIORef&quot;&gt;atomicModifyIORef&lt;/a&gt;&lt;/code&gt; のバージョン。</target>
        </trans-unit>
        <trans-unit id="bef2aa5115f3db1a79e2efec0dfffeeae204b525" translate="yes" xml:space="preserve">
          <source>A vertical bar denotes disjunction, i.e. one of the two sides is required. A comma denotes conjunction, i.e. both sides are required. Conjunction binds stronger than disjunction.</source>
          <target state="translated">縦棒は接続詞を表し、2つの辺のうちどちらか一方が必要です。コンマは接続詞を表します。接続詞は、接続詞よりも強い結合力を持ちます。</target>
        </trans-unit>
        <trans-unit id="edf34a57d05a3c5d4ea50057dd0ce34f6a6b36fa" translate="yes" xml:space="preserve">
          <source>A very experimental flag that makes dictionary-valued expressions seem cheap to the optimiser.</source>
          <target state="translated">辞書値式をオプティマイザに安く見せるための非常に実験的なフラグです。</target>
        </trans-unit>
        <trans-unit id="7c65e4b2cb887d618e9c4063061a15033cdc0051" translate="yes" xml:space="preserve">
          <source>A violation of the &amp;ldquo;forall-or-nothing&amp;rdquo; rule looks like this:</source>
          <target state="translated">「forall-or-nothing」ルールの違反は次のようになります。</target>
        </trans-unit>
        <trans-unit id="a5feb9baead6354d4dfbb9ad7fa5678327d72c84" translate="yes" xml:space="preserve">
          <source>A visible type application is preceded with an &lt;code&gt;@&lt;/code&gt; sign. (To disambiguate the syntax, the &lt;code&gt;@&lt;/code&gt; must be preceded with a non-identifier letter, usually a space. For example, &lt;code&gt;read@Int 5&lt;/code&gt; would not parse.) It can be used whenever the full polymorphic type of the function is known. If the function is an identifier (the common case), its type is considered known only when the identifier has been given a type signature. If the identifier does not have a type signature, visible type application cannot be used.</source>
          <target state="translated">可視タイプのアプリケーションの前には &lt;code&gt;@&lt;/code&gt; 記号が付いています。（構文を明確にするために、 &lt;code&gt;@&lt;/code&gt; の前には識別子以外の文字（通常はスペース）を付ける必要があります。たとえば、 &lt;code&gt;read@Int 5&lt;/code&gt; は解析されません。）これは、関数の完全なポリモーフィック型がわかっている場合はいつでも使用できます。関数が識別子である場合（一般的なケース）、その型は、識別子に型シグネチャが与えられている場合にのみ既知と見なされます。識別子に型シグネチャがない場合、可視型アプリケーションは使用できません。</target>
        </trans-unit>
        <trans-unit id="f7aecd3b32383a90db727ba6bc951dd96bb7555b" translate="yes" xml:space="preserve">
          <source>A way of creating ByteStrings outside the IO monad. The &lt;code&gt;Int&lt;/code&gt; argument gives the final size of the ByteString.</source>
          <target state="translated">IOモナドの外でByteStringを作成する方法。 &lt;code&gt;Int&lt;/code&gt; の引数は、延ByteStringの最終的なサイズを提供します。</target>
        </trans-unit>
        <trans-unit id="ae700162fd083eb51a2e5484581b63431c6cf961" translate="yes" xml:space="preserve">
          <source>A weak pointer expresses a relationship between two objects, the &lt;em&gt;key&lt;/em&gt; and the &lt;em&gt;value&lt;/em&gt;: if the key is considered to be alive by the garbage collector, then the value is also alive. A reference from the value to the key does &lt;em&gt;not&lt;/em&gt; keep the key alive.</source>
          <target state="translated">ウィークポインタは、&lt;em&gt;キー&lt;/em&gt;と&lt;em&gt;値の&lt;/em&gt; 2つのオブジェクト間の関係を表し&lt;em&gt;ます&lt;/em&gt;。ガベージコレクタによってキーが有効であると見なされた場合、&lt;em&gt;値&lt;/em&gt;も有効です。値からキーへの参照は、キーを維持しませ&lt;em&gt;ん&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="4c0a7ed1da2479162371079b8163cabf26c83c98" translate="yes" xml:space="preserve">
          <source>A weak pointer may also have a finalizer of type &lt;code&gt;IO ()&lt;/code&gt;; if it does, then the finalizer will be run at most once, at a time after the key has become unreachable by the program (&quot;dead&quot;). The storage manager attempts to run the finalizer(s) for an object soon after the object dies, but promptness is not guaranteed.</source>
          <target state="translated">ウィークポインタには、 &lt;code&gt;IO ()&lt;/code&gt; 型のファイナライザも含まれます。そうである場合、ファイナライザは、キーがプログラムによって到達できなくなった（ &quot;デッド&quot;）後の時点で、最大で1回実行されます。ストレージマネージャは、オブジェクトが終了した直後にオブジェクトのファイナライザを実行しようとしますが、迅速性は保証されません。</target>
        </trans-unit>
        <trans-unit id="a955a161a9eee216cd6b80d8d47df1c807c9be34" translate="yes" xml:space="preserve">
          <source>A weak pointer object with a key and a value. The value has type &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">キーと値を持つ弱いポインタオブジェクト。値のタイプは &lt;code&gt;v&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8b5c16f462f6b8ca64b6aee48fd180f321af7cba" translate="yes" xml:space="preserve">
          <source>A whole String fragment</source>
          <target state="translated">文字列全体の断片</target>
        </trans-unit>
        <trans-unit id="1306d902863c6c0a77b6f4d1230a385868937f62" translate="yes" xml:space="preserve">
          <source>A wide character string with explicit length information in &lt;code&gt;&lt;a href=&quot;foreign-c-types#t:CWchar&quot;&gt;CWchar&lt;/a&gt;&lt;/code&gt;s instead of a terminating NUL (allowing NUL characters in the middle of the string).</source>
          <target state="translated">終端のNULの代わりに &lt;code&gt;&lt;a href=&quot;foreign-c-types#t:CWchar&quot;&gt;CWchar&lt;/a&gt;&lt;/code&gt; で明示的な長さ情報を持つワイド文字列（文字列の途中でNUL文字を許可）。</target>
        </trans-unit>
        <trans-unit id="987253a26575543a06fc7e055fbc0251b63eb205" translate="yes" xml:space="preserve">
          <source>A word begins either at the start of the line or after an unescaped whitespace character.</source>
          <target state="translated">単語は、行頭またはエスケープされていない空白文字の後に始まります。</target>
        </trans-unit>
        <trans-unit id="98bca88a2b006e940b1f7f785915d961c11c9f72" translate="yes" xml:space="preserve">
          <source>A writer monad parameterized by the type &lt;code&gt;w&lt;/code&gt; of output to accumulate.</source>
          <target state="translated">蓄積する出力のタイプ &lt;code&gt;w&lt;/code&gt; でパラメーター化されたライターモナド。</target>
        </trans-unit>
        <trans-unit id="07ef82639a79658d53d1fcd5bfce5876d5b9adb5" translate="yes" xml:space="preserve">
          <source>A writer monad parameterized by:</source>
          <target state="translated">によってパラメータ化されたライターモナド。</target>
        </trans-unit>
        <trans-unit id="3f08cc0b30779a95143aa2ad65f0531b4ad12960" translate="yes" xml:space="preserve">
          <source>ACL</source>
          <target state="translated">ACL</target>
        </trans-unit>
        <trans-unit id="882edca3292f207f02c04f0e4d828075132b5c5b" translate="yes" xml:space="preserve">
          <source>ADDATTRS</source>
          <target state="translated">ADDATTRS</target>
        </trans-unit>
        <trans-unit id="d37db076be2c745cf98c9bb60cf88dbf2626e6b7" translate="yes" xml:space="preserve">
          <source>AM/PM symbols</source>
          <target state="translated">AM/PM記号</target>
        </trans-unit>
        <trans-unit id="94090230b1f8c256f7ac5dc5a70bd3b20ee4ff15" translate="yes" xml:space="preserve">
          <source>ASCII</source>
          <target state="translated">ASCII</target>
        </trans-unit>
        <trans-unit id="e95867ec94d8c275a2d1d9afac6a1d2ffb7fd390" translate="yes" xml:space="preserve">
          <source>ASCII (Char7)</source>
          <target state="translated">アスキー</target>
        </trans-unit>
        <trans-unit id="2f934a30b8b57fba10b2b745dc320b339724b1b7" translate="yes" xml:space="preserve">
          <source>ASCII &lt;code&gt;'0'&lt;/code&gt; through &lt;code&gt;'9'&lt;/code&gt; are all numbers:</source>
          <target state="translated">ASCIIの &lt;code&gt;'0'&lt;/code&gt; から &lt;code&gt;'9'&lt;/code&gt; はすべて数値です。</target>
        </trans-unit>
        <trans-unit id="cae061a530cef71c477f974034de1fd1d9b43ecb" translate="yes" xml:space="preserve">
          <source>ATOM</source>
          <target state="translated">ATOM</target>
        </trans-unit>
        <trans-unit id="09116156619580f2fa8233d5bca8cf8644f9c359" translate="yes" xml:space="preserve">
          <source>Abandon evaluation of a statement after a breakpoint</source>
          <target state="translated">ブレークポイント後の文の評価を放棄する</target>
        </trans-unit>
        <trans-unit id="c38c6ea6c11538ed82fd288d53c904871944106f" translate="yes" xml:space="preserve">
          <source>Abandons the current evaluation (only available when stopped at a breakpoint).</source>
          <target state="translated">現在の評価を放棄する(ブレークポイントで停止した場合のみ利用可能)。</target>
        </trans-unit>
        <trans-unit id="f07c8230701366b843cd68845fafa5d65a1de2d9" translate="yes" xml:space="preserve">
          <source>About validity:</source>
          <target state="translated">有効性について。</target>
        </trans-unit>
        <trans-unit id="05edf0d68cd3c84475eb832e7d283639e6bdeca9" translate="yes" xml:space="preserve">
          <source>Above, except that if the last line of the first argument stops at least one position before the first line of the second begins, these two lines are overlapped. For example:</source>
          <target state="translated">上記、第1引数の最後の行が、第2引数の最初の行が始まる前の少なくとも1つの位置で止まっている場合、これらの2つの行が重なっていることを除いて。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="ef82336eb495d4e5324f732f879ad3b7c7dd9b61" translate="yes" xml:space="preserve">
          <source>Above, with no overlapping. &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:-36--43--36-&quot;&gt;$+$&lt;/a&gt;&lt;/code&gt; is associative, with identity &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">上、重なりなし。 &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:-36--43--36-&quot;&gt;$+$&lt;/a&gt;&lt;/code&gt; は連想で、IDは &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8a7dc34cb7ea60a4e1ddaf0a591cdafbc0e403cf" translate="yes" xml:space="preserve">
          <source>Above, with no overlapping. &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-36--43--36-&quot;&gt;$+$&lt;/a&gt;&lt;/code&gt; is associative, with identity &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">上、重なりなし。 &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-36--43--36-&quot;&gt;$+$&lt;/a&gt;&lt;/code&gt; は連想で、IDは &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d2d972269377ed5359cdd2dcc108f0e3936d78b1" translate="yes" xml:space="preserve">
          <source>Above, with no overlapping. &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:-36--43--36-&quot;&gt;$+$&lt;/a&gt;&lt;/code&gt; is associative, with identity &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">上、重なりなし。 &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:-36--43--36-&quot;&gt;$+$&lt;/a&gt;&lt;/code&gt; は連想で、IDは &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="88874691ade84811a148df43dee3e898c7993db4" translate="yes" xml:space="preserve">
          <source>Above, without dovetailing.</source>
          <target state="translated">上記、アリ合わせなし。</target>
        </trans-unit>
        <trans-unit id="ffc84c11cb600f5730c837f24132ad44932f0e4a" translate="yes" xml:space="preserve">
          <source>Above; if there is no overlap it &quot;dovetails&quot; the two</source>
          <target state="translated">上;重なりがなければ、それは2つの &quot;dovetails &quot;です。</target>
        </trans-unit>
        <trans-unit id="2c7fe8b95b08b1e64796580d91044372f5603e8d" translate="yes" xml:space="preserve">
          <source>Absolute cursor movements</source>
          <target state="translated">絶対的なカーソルの動き</target>
        </trans-unit>
        <trans-unit id="44530d6a736fdaae47537dfbad7f8dda6f90c1ca" translate="yes" xml:space="preserve">
          <source>Absolute intervals</source>
          <target state="translated">絶対間隔</target>
        </trans-unit>
        <trans-unit id="05675a8df55f00a801d7267f15ceae258c856842" translate="yes" xml:space="preserve">
          <source>Absolute value.</source>
          <target state="translated">絶対的な価値。</target>
        </trans-unit>
        <trans-unit id="be11481292069bbf4e5d32f6f22e3e0ba35a6c06" translate="yes" xml:space="preserve">
          <source>AbsoluteSeek</source>
          <target state="translated">AbsoluteSeek</target>
        </trans-unit>
        <trans-unit id="d18ae99534459c5602deda227d35dbfc2f1e9957" translate="yes" xml:space="preserve">
          <source>AbsoluteTime</source>
          <target state="translated">AbsoluteTime</target>
        </trans-unit>
        <trans-unit id="434cecc208a8b4bb275114bca8d90f1c47541833" translate="yes" xml:space="preserve">
          <source>AbsoluteTime is TAI, time as measured by a clock.</source>
          <target state="translated">AbsoluteTimeはTAI、時計で計測した時間です。</target>
        </trans-unit>
        <trans-unit id="667a8cf10407b19099b8b8a8c853533598abd554" translate="yes" xml:space="preserve">
          <source>Abstract data types can be implemented not only with data declarations, but also newtypes and type synonyms (with the restriction that a type synonym must be fully eta-reduced, e.g., &lt;code&gt;type T = ...&lt;/code&gt; to be accepted.) For example, the following are all valid implementations of the T above:</source>
          <target state="translated">抽象データ型は、データ宣言だけでなく、newtypesと型シノニムでも実装できます（型シノニムを完全にeta削減する必要がある、たとえば、 &lt;code&gt;type T = ...&lt;/code&gt; が受け入れられるという制限があります）。たとえば、以下は、上記のTのすべての有効な実装です。</target>
        </trans-unit>
        <trans-unit id="beb8fcf15e248371df65aec656beac0bfea7c0b8" translate="yes" xml:space="preserve">
          <source>Abstract representation of vertices.</source>
          <target state="translated">頂点の抽象表現。</target>
        </trans-unit>
        <trans-unit id="f326ddf7104d3df6fa13479c593c244c4623b73c" translate="yes" xml:space="preserve">
          <source>Abstract syntax definitions for Template Haskell.</source>
          <target state="translated">テンプレートHaskellのための抽象的な構文定義。</target>
        </trans-unit>
        <trans-unit id="71b7aef56068b7e751389cca7071da4abd7a1c80" translate="yes" xml:space="preserve">
          <source>Accept leading and trailing whitespace?</source>
          <target state="translated">先頭と末尾の空白を受け入れるか?</target>
        </trans-unit>
        <trans-unit id="95d34f3b555d7e27b1e17d75f2e37485b204658e" translate="yes" xml:space="preserve">
          <source>Accept leading whitespace?</source>
          <target state="translated">先頭のホワイトスペースを受け入れるか?</target>
        </trans-unit>
        <trans-unit id="bc52205c7ec889cf4cba765533bcd4e5d13957bc" translate="yes" xml:space="preserve">
          <source>Acceptable data</source>
          <target state="translated">受け入れ可能なデータ</target>
        </trans-unit>
        <trans-unit id="3a8a3f0706793232d22f7100e8ea68a2faa1f5f0" translate="yes" xml:space="preserve">
          <source>Access to GHC's call-stack simulation</source>
          <target state="translated">GHCのコールスタックシミュレーションへのアクセス</target>
        </trans-unit>
        <trans-unit id="4756089d5cd10709a1d37fad3e346fb021462dee" translate="yes" xml:space="preserve">
          <source>AccessMode</source>
          <target state="translated">AccessMode</target>
        </trans-unit>
        <trans-unit id="f9fce24b3c49b79586973841924c190bcf8769f7" translate="yes" xml:space="preserve">
          <source>Accessing arrays</source>
          <target state="translated">配列へのアクセス</target>
        </trans-unit>
        <trans-unit id="aff0bc5a5aaa0b373eac340c6aadb774a3a23049" translate="yes" xml:space="preserve">
          <source>Accessing the pointer to the array contents</source>
          <target state="translated">配列の内容へのポインタへのアクセス</target>
        </trans-unit>
        <trans-unit id="3efd139cf44f823a7b553a058c94da8090307f52" translate="yes" xml:space="preserve">
          <source>Accessors to GHC RTS flags. Descriptions of flags can be seen in &lt;a href=&quot;https://www.haskell.org/ghc/docs/latest/html/users_guide/runtime_control.html&quot;&gt;GHC User's Guide&lt;/a&gt;, or by running RTS help message using &lt;code&gt;+RTS --help&lt;/code&gt;.</source>
          <target state="translated">GHC RTSフラグへのアクセサ。フラグの説明は、&lt;a href=&quot;https://www.haskell.org/ghc/docs/latest/html/users_guide/runtime_control.html&quot;&gt;GHCユーザーガイドで&lt;/a&gt;、または &lt;code&gt;+RTS --help&lt;/code&gt; を使用してRTSヘルプメッセージを実行することで確認できます。</target>
        </trans-unit>
        <trans-unit id="7edca54ae2bf350d49cd477266ad9dd7d55aedcd" translate="yes" xml:space="preserve">
          <source>According to [1]:</source>
          <target state="translated">1]によると</target>
        </trans-unit>
        <trans-unit id="2d6dfb6165d33d7dc1b66480f6a0d421d69dd337" translate="yes" xml:space="preserve">
          <source>According to the GMP documentation, the underlying function &lt;code&gt;mpz_nextprime()&lt;/code&gt; &quot;uses a probabilistic algorithm to identify primes. For practical purposes it's adequate, the chance of a composite passing will be extremely small.&quot;</source>
          <target state="translated">GMPのドキュメントによると、基になる関数 &lt;code&gt;mpz_nextprime()&lt;/code&gt; は確率論的アルゴリズムを使用して素数を識別します。実際には、コンポジットが通過する可能性は非常に小さいです。</target>
        </trans-unit>
        <trans-unit id="a91ad95de89488856c8210673c103c15b4491b35" translate="yes" xml:space="preserve">
          <source>According to the rules above &lt;code&gt;X&lt;/code&gt; has a CUSK. Yet, the kind of &lt;code&gt;k&lt;/code&gt; is undetermined. It is thus quantified over, giving &lt;code&gt;X&lt;/code&gt; the kind &lt;code&gt;forall k1 (k :: k1). Proxy k -&amp;gt; Type&lt;/code&gt;.</source>
          <target state="translated">上記のルールによると、 &lt;code&gt;X&lt;/code&gt; にはCUSKがあります。ただし、 &lt;code&gt;k&lt;/code&gt; の種類は不明です。したがって、それは定量化され、 &lt;code&gt;X&lt;/code&gt; に種類 &lt;code&gt;forall k1 (k :: k1). Proxy k -&amp;gt; Type&lt;/code&gt; を与えます。プロキシk-&amp;gt;タイプ。</target>
        </trans-unit>
        <trans-unit id="3d5e0f0e68219f2793950ff4f739b0707416bc38" translate="yes" xml:space="preserve">
          <source>Accordingly, the rule for kind quantification in higher-rank contexts has changed slightly. In GHC 7, if a kind variable was mentioned for the first time in the kind of a variable bound in a non-top-level &lt;code&gt;forall&lt;/code&gt;, the kind variable was bound there, too. That is, in &lt;code&gt;f :: (forall (a :: k). ...) -&amp;gt; ...&lt;/code&gt;, the &lt;code&gt;k&lt;/code&gt; was bound by the same &lt;code&gt;forall&lt;/code&gt; as the &lt;code&gt;a&lt;/code&gt;. In GHC 8, however, all kind variables mentioned in a type are bound at the outermost level. If you want one bound in a higher-rank &lt;code&gt;forall&lt;/code&gt;, include it explicitly.</source>
          <target state="translated">したがって、上位のコンテキストでの種類の数量化のルールが少し変更されました。GHC 7では、トップレベル以外の &lt;code&gt;forall&lt;/code&gt; でバインドされた変数の種類で種類変数が初めて言及された場合、種類変数もそこでバインドされていました。つまり、 &lt;code&gt;f :: (forall (a :: k). ...) -&amp;gt; ...&lt;/code&gt; では、 &lt;code&gt;k&lt;/code&gt; は &lt;code&gt;a&lt;/code&gt; と同じ &lt;code&gt;forall&lt;/code&gt; によってバインドされていました。ただし、GHC 8では、型で言及されているすべての種類変数は、最も外側のレベルでバインドされます。上位の &lt;code&gt;forall&lt;/code&gt; にバインドしたい場合は、明示的に含めます。</target>
        </trans-unit>
        <trans-unit id="1bb0023c7c1fa4cd60dd0df32c9589498220f1d0" translate="yes" xml:space="preserve">
          <source>Accordingly, the type environment seen by &lt;code&gt;reify&lt;/code&gt; includes all the top-level declarations up to the end of the immediately preceding declaration group, but no more.</source>
          <target state="translated">したがって、 &lt;code&gt;reify&lt;/code&gt; によって認識される型環境には、直前の宣言グループの最後までのすべてのトップレベルの宣言が含まれますが、それ以上は含まれません。</target>
        </trans-unit>
        <trans-unit id="82bedfe88009972d90237d52b7f414b23e6d5eb6" translate="yes" xml:space="preserve">
          <source>Accum</source>
          <target state="translated">Accum</target>
        </trans-unit>
        <trans-unit id="50b4f3d88aa3c9059e12c063f7c950d2f9b4b778" translate="yes" xml:space="preserve">
          <source>Accum operations</source>
          <target state="translated">アキュムオペレーション</target>
        </trans-unit>
        <trans-unit id="cd4bf7ea6fd4060189e1e1baaa24ebb42d7660ad" translate="yes" xml:space="preserve">
          <source>AccumT</source>
          <target state="translated">AccumT</target>
        </trans-unit>
        <trans-unit id="50412c7500ef5d04ef8c2e37d60a2b1db38c9207" translate="yes" xml:space="preserve">
          <source>Accumulating maps</source>
          <target state="translated">蓄積マップ</target>
        </trans-unit>
        <trans-unit id="97c89a4d6630adeb18fa12ba9976a31413fe293e" translate="yes" xml:space="preserve">
          <source>Action</source>
          <target state="translated">Action</target>
        </trans-unit>
        <trans-unit id="6347206826a895475f5f91774a889e897ffc7d63" translate="yes" xml:space="preserve">
          <source>Action &lt;code&gt;askString&lt;/code&gt; requests user to enter a string, and passes it to the continuation. &lt;code&gt;askString&lt;/code&gt; takes as a parameter a continuation taking a string parameter, and returning &lt;code&gt;IO ()&lt;/code&gt;. Compare its signature to &lt;code&gt;&lt;a href=&quot;control-monad-cont#v:runContT&quot;&gt;runContT&lt;/a&gt;&lt;/code&gt; definition.</source>
          <target state="translated">アクション &lt;code&gt;askString&lt;/code&gt; は、ユーザーに文字列の入力を要求し、それを継続に渡します。 &lt;code&gt;askString&lt;/code&gt; は、文字列パラメーターを受け取り、 &lt;code&gt;IO ()&lt;/code&gt; を返す継続をパラメーターとして受け取ります。その署名を &lt;code&gt;&lt;a href=&quot;control-monad-cont#v:runContT&quot;&gt;runContT&lt;/a&gt;&lt;/code&gt; 定義と比較します。</target>
        </trans-unit>
        <trans-unit id="a2f1b38e49644d95f7b46650e509c991d77060f8" translate="yes" xml:space="preserve">
          <source>Action to be executed</source>
          <target state="translated">実行するアクション</target>
        </trans-unit>
        <trans-unit id="f5278c8649d913f335c11a62f866017db4429c6b" translate="yes" xml:space="preserve">
          <source>Actions on directories</source>
          <target state="translated">ディレクトリのアクション</target>
        </trans-unit>
        <trans-unit id="696ed90b8efd0baea13c573b2e7c286d011d6b3c" translate="yes" xml:space="preserve">
          <source>Actions on files</source>
          <target state="translated">ファイルへのアクション</target>
        </trans-unit>
        <trans-unit id="7083b72c48cfaf651eebc9aa10754311beefc8de" translate="yes" xml:space="preserve">
          <source>Activate cross-compilation mode (see &lt;a href=&quot;#hsc2hs-cross&quot;&gt;Cross-compilation&lt;/a&gt;).</source>
          <target state="translated">クロスコンパイルモードをアクティブにします（&lt;a href=&quot;#hsc2hs-cross&quot;&gt;クロスコンパイルを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="583d9a705b86bbdfe3e1d9047b3ea1485ccadeeb" translate="yes" xml:space="preserve">
          <source>Acts as &lt;code&gt;&lt;a href=&quot;system-posix-files#v:getFileStatus&quot;&gt;getFileStatus&lt;/a&gt;&lt;/code&gt; except when the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; refers to a symbolic link. In that case the &lt;code&gt;FileStatus&lt;/code&gt; information of the symbolic link itself is returned instead of that of the file it points to.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; がシンボリックリンクを参照する場合を除いて、 &lt;code&gt;&lt;a href=&quot;system-posix-files#v:getFileStatus&quot;&gt;getFileStatus&lt;/a&gt;&lt;/code&gt; として機能します。その場合、シンボリックリンク自体の &lt;code&gt;FileStatus&lt;/code&gt; 情報が、それが指すファイルの情報ではなく返されます。</target>
        </trans-unit>
        <trans-unit id="7d65523818024ea88107f6287927f036ddf6afd4" translate="yes" xml:space="preserve">
          <source>Acts as &lt;code&gt;&lt;a href=&quot;system-posix-files#v:getFileStatus&quot;&gt;getFileStatus&lt;/a&gt;&lt;/code&gt; except when the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; refers to a symbolic link. In that case the &lt;code&gt;FileStatus&lt;/code&gt; information of the symbolic link itself is returned instead of that of the file it points to.</source>
          <target state="translated">Acts as &lt;code&gt;&lt;a href=&quot;system-posix-files#v:getFileStatus&quot;&gt;getFileStatus&lt;/a&gt;&lt;/code&gt; except when the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; refers to a symbolic link. In that case the &lt;code&gt;FileStatus&lt;/code&gt; information of the symbolic link itself is returned instead of that of the file it points to.</target>
        </trans-unit>
        <trans-unit id="b0cdc6afa6bf7a9a92dae50e6c59c713b9c3a94b" translate="yes" xml:space="preserve">
          <source>Acts as &lt;code&gt;&lt;a href=&quot;system-posix-files#v:getFileStatus&quot;&gt;getFileStatus&lt;/a&gt;&lt;/code&gt; except when the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; refers to a symbolic link. In that case the &lt;code&gt;FileStatus&lt;/code&gt; information of the symbolic link itself is returned instead of that of the file it points to.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; がシンボリックリンクを参照する場合を除いて、 &lt;code&gt;&lt;a href=&quot;system-posix-files#v:getFileStatus&quot;&gt;getFileStatus&lt;/a&gt;&lt;/code&gt; として機能します。その場合、シンボリックリンク自体の &lt;code&gt;FileStatus&lt;/code&gt; 情報が、それが指すファイルの情報ではなく返されます。</target>
        </trans-unit>
        <trans-unit id="8bb8dd245b9cb57f179bf3b4b88042343c063795" translate="yes" xml:space="preserve">
          <source>Acts as &lt;code&gt;&lt;a href=&quot;system-posix-files#v:setOwnerAndGroup&quot;&gt;setOwnerAndGroup&lt;/a&gt;&lt;/code&gt; but does not follow symlinks (and thus changes permissions on the link itself).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-files#v:setOwnerAndGroup&quot;&gt;setOwnerAndGroup&lt;/a&gt;&lt;/code&gt; として機能しますが、シンボリックリンクをたどりません（したがって、リンク自体のアクセス許可を変更します）。</target>
        </trans-unit>
        <trans-unit id="00b98c6571c6f97fdd25d5e837fe03213c325e22" translate="yes" xml:space="preserve">
          <source>Acts as &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:getFileStatus&quot;&gt;getFileStatus&lt;/a&gt;&lt;/code&gt; except when the &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#t:RawFilePath&quot;&gt;RawFilePath&lt;/a&gt;&lt;/code&gt; refers to a symbolic link. In that case the &lt;code&gt;FileStatus&lt;/code&gt; information of the symbolic link itself is returned instead of that of the file it points to.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:getFileStatus&quot;&gt;getFileStatus&lt;/a&gt;&lt;/code&gt; がシンボリックリンクを参照する場合を除き、 &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#t:RawFilePath&quot;&gt;RawFilePath&lt;/a&gt;&lt;/code&gt; として機能します。その場合、シンボリックリンク自体の &lt;code&gt;FileStatus&lt;/code&gt; 情報が、それが指すファイルの情報ではなく返されます。</target>
        </trans-unit>
        <trans-unit id="cbcea92f66c4289d12fcd3463f6bb4e3fab3bda6" translate="yes" xml:space="preserve">
          <source>Acts as &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:setOwnerAndGroup&quot;&gt;setOwnerAndGroup&lt;/a&gt;&lt;/code&gt; but does not follow symlinks (and thus changes permissions on the link itself).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:setOwnerAndGroup&quot;&gt;setOwnerAndGroup&lt;/a&gt;&lt;/code&gt; として機能しますが、シンボリックリンクをたどりません（したがって、リンク自体のアクセス許可を変更します）。</target>
        </trans-unit>
        <trans-unit id="6a6c3ff29419f1c7034849f1db0a070b794f9ad2" translate="yes" xml:space="preserve">
          <source>Acts as &lt;code&gt;setFileSize&lt;/code&gt; but uses a file descriptor instead of a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setFileSize&lt;/code&gt; として機能しますが、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; の代わりにファイル記述子を使用します。</target>
        </trans-unit>
        <trans-unit id="49be567080d7b410e84b47729961520e4de920c4" translate="yes" xml:space="preserve">
          <source>Acts as &lt;code&gt;setFileSize&lt;/code&gt; but uses a file descriptor instead of a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Acts as &lt;code&gt;setFileSize&lt;/code&gt; but uses a file descriptor instead of a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a7abb6dfde7eef75e3008b76f458c888ddea86b0" translate="yes" xml:space="preserve">
          <source>Acts as &lt;code&gt;setFileSize&lt;/code&gt; but uses a file descriptor instead of a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setFileSize&lt;/code&gt; として機能しますが、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; の代わりにファイル記述子を使用します。</target>
        </trans-unit>
        <trans-unit id="d4b7078adb2d96736d050720e01d8ae82392b27c" translate="yes" xml:space="preserve">
          <source>Acts as &lt;code&gt;setOwnerAndGroup&lt;/code&gt; but uses a file descriptor instead of a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setOwnerAndGroup&lt;/code&gt; として機能しますが、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; の代わりにファイル記述子を使用します。</target>
        </trans-unit>
        <trans-unit id="f40c80358e12a1e2aaf02b1148d6c20fcfd4ba45" translate="yes" xml:space="preserve">
          <source>Acts as &lt;code&gt;setOwnerAndGroup&lt;/code&gt; but uses a file descriptor instead of a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Acts as &lt;code&gt;setOwnerAndGroup&lt;/code&gt; but uses a file descriptor instead of a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5709329f4d41fd8b75411e36d0c8d0a6e2033e83" translate="yes" xml:space="preserve">
          <source>Acts as &lt;code&gt;setOwnerAndGroup&lt;/code&gt; but uses a file descriptor instead of a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setOwnerAndGroup&lt;/code&gt; として機能しますが、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; の代わりにファイル記述子を使用します。</target>
        </trans-unit>
        <trans-unit id="fce17679436ea260fadec4591a677de22164d0f8" translate="yes" xml:space="preserve">
          <source>Actually &lt;code&gt;hsc2hs&lt;/code&gt; does not output the Haskell file directly. It creates a C program that includes the headers, gets automatically compiled and run. That program outputs the Haskell code.</source>
          <target state="translated">実際、 &lt;code&gt;hsc2hs&lt;/code&gt; はHaskellファイルを直接出力しません。ヘッダーを含むCプログラムを作成し、自動的にコンパイルして実行します。そのプログラムはHaskellコードを出力します。</target>
        </trans-unit>
        <trans-unit id="4f047ea892e21f4553c30a3d6ef7ff19933e3fa6" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;&lt;a href=&quot;control-monad-catch#t:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt; handling abilities to a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;control-monad-catch#t:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt; 処理機能を追加します。</target>
        </trans-unit>
        <trans-unit id="bb27c3e9c12f7296abdd1656c75526ce920178b5" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;&lt;a href=&quot;control-monad-catch#t:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt; handling abilities to a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;control-monad-catch#t:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt; 処理機能を追加します。</target>
        </trans-unit>
        <trans-unit id="282d599b16c31e26561720e6c06e8259bdd71518" translate="yes" xml:space="preserve">
          <source>Add Finalizers</source>
          <target state="translated">ファイナライザの追加</target>
        </trans-unit>
        <trans-unit id="d138b6ef22b1ca378b672fc1221a3aa6b42bbf3c" translate="yes" xml:space="preserve">
          <source>Add a default &lt;code&gt;error&lt;/code&gt; alternative to case expressions without a default alternative.</source>
          <target state="translated">デフォルトの代替なしでケース式にデフォルトの &lt;code&gt;error&lt;/code&gt; 代替を追加します。</target>
        </trans-unit>
        <trans-unit id="eb4c8a6633849d6709d07c9f3e63104f63a51077" translate="yes" xml:space="preserve">
          <source>Add a finalizer that will run in the Q monad after the current module has been type checked. This only makes sense when run within a top-level splice.</source>
          <target state="translated">現在のモジュールがタイプチェックされた後に Q モナドで実行されるファイナライザを追加しました。これはトップレベルのスプライス内で実行される場合にのみ意味があります。</target>
        </trans-unit>
        <trans-unit id="de0de177dcddf4173fd744c404b8ba61f96637ed" translate="yes" xml:space="preserve">
          <source>Add a finalizer to an &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; (GHC only). See &lt;a href=&quot;foreign-foreignptr&quot;&gt;Foreign.ForeignPtr&lt;/a&gt; and &lt;a href=&quot;system-mem-weak&quot;&gt;System.Mem.Weak&lt;/a&gt; for more about finalizers.</source>
          <target state="translated">ファイナライザーを &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; に追加します（GHCのみ）。ファイナライザの詳細については、&lt;a href=&quot;foreign-foreignptr&quot;&gt;Foreign.ForeignPtr&lt;/a&gt;および&lt;a href=&quot;system-mem-weak&quot;&gt;System.Mem.Weak&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="87eb63d6dca38f792891dceb6d3068ba951d4549" translate="yes" xml:space="preserve">
          <source>Add a line to the history unless it matches the previously recorded line.</source>
          <target state="translated">以前に記録された行と一致しない限り、履歴に行を追加します。</target>
        </trans-unit>
        <trans-unit id="aaca03fa0d32c5a3d402a6fb5fcc0ded2bb915ec" translate="yes" xml:space="preserve">
          <source>Add a line to the history, and remove all previous entries which are the same as it.</source>
          <target state="translated">履歴に行を追加し、それと同じである以前のエントリをすべて削除します。</target>
        </trans-unit>
        <trans-unit id="1d7fd5dfa46b0f645d5db42f20504f6c3caf7358" translate="yes" xml:space="preserve">
          <source>Add a trailing file path separator if one is not already present.</source>
          <target state="translated">ファイルパスの区切り文字がない場合は、末尾にパス区切り文字を追加します。</target>
        </trans-unit>
        <trans-unit id="c5f1a8ca3a641a6b0ef6dbe461171ca7f604eb5a" translate="yes" xml:space="preserve">
          <source>Add additional top-level declarations. The added declarations will be type checked along with the current declaration group.</source>
          <target state="translated">トップレベル宣言を追加します。追加された宣言は、現在の宣言グループと一緒に型チェックされます。</target>
        </trans-unit>
        <trans-unit id="cecd1aea8fe88c39fcc8f71681a3e087791c984b" translate="yes" xml:space="preserve">
          <source>Add an extension, even if there is already one there, equivalent to &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:-60-.-62-&quot;&gt;&amp;lt;.&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">拡張子がすでにある場合でも、 &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:-60-.-62-&quot;&gt;&amp;lt;.&amp;gt;&lt;/a&gt;&lt;/code&gt; と同等の拡張子を追加します。</target>
        </trans-unit>
        <trans-unit id="34878ebb3f1e96601aafa913d00d7bd263cdc36c" translate="yes" xml:space="preserve">
          <source>Add an extension, even if there is already one there, equivalent to &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:addExtension&quot;&gt;addExtension&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">拡張がすでに存在する場合でも、 &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:addExtension&quot;&gt;addExtension&lt;/a&gt;&lt;/code&gt; と同等の拡張を追加します。</target>
        </trans-unit>
        <trans-unit id="89357b09335d29d387cf17547863b974b8decc59" translate="yes" xml:space="preserve">
          <source>Add an extension, even if there is already one there, equivalent to &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:-60-.-62-&quot;&gt;&amp;lt;.&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">拡張子がすでにある場合でも、 &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:-60-.-62-&quot;&gt;&amp;lt;.&amp;gt;&lt;/a&gt;&lt;/code&gt; と同等の拡張子を追加します。</target>
        </trans-unit>
        <trans-unit id="12e0f266814b31f57d2a4d4f2e065ebded03e6c4" translate="yes" xml:space="preserve">
          <source>Add an extension, even if there is already one there, equivalent to &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:addExtension&quot;&gt;addExtension&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">拡張がすでに存在する場合でも、 &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:addExtension&quot;&gt;addExtension&lt;/a&gt;&lt;/code&gt; と同等の拡張を追加します。</target>
        </trans-unit>
        <trans-unit id="88bd486d89c4fede722e2d2391a03c0fd1f29c23" translate="yes" xml:space="preserve">
          <source>Add entries to the Static Pointer Table</source>
          <target state="translated">静的ポインタテーブルにエントリを追加する</target>
        </trans-unit>
        <trans-unit id="573b000c455e2582361374a0f2d5ce932b4443a5" translate="yes" xml:space="preserve">
          <source>Add months (clipped to last day), then add days</source>
          <target state="translated">月を追加(最後の日を切り取ったもの)し、日を追加します。</target>
        </trans-unit>
        <trans-unit id="11f2dacfd6ba9147a205050f051361aedae62583" translate="yes" xml:space="preserve">
          <source>Add months (rolling over to next month), then add days</source>
          <target state="translated">月を追加(翌月にロールオーバー)し、日を追加します。</target>
        </trans-unit>
        <trans-unit id="b015364a9bf90321fb61c3a98f1cdc612fdf7a8d" translate="yes" xml:space="preserve">
          <source>Add months, with days past the last day of the month clipped to the last day. For instance, 2005-01-30 + 1 month = 2005-02-28.</source>
          <target state="translated">月の最終日を過ぎた日を最終日にクリップして、月を追加します。例えば、2005-01-30+1ヶ月=2005-02-28。</target>
        </trans-unit>
        <trans-unit id="1ce9d4dd3c00c35abdeda445f12f814c42604388" translate="yes" xml:space="preserve">
          <source>Add months, with days past the last day of the month rolling over to the next month. For instance, 2005-01-30 + 1 month = 2005-03-02.</source>
          <target state="translated">月を追加し、その月の最終日を過ぎた日を次の月に繰り越します。例えば、2005-01-30+1ヶ月=2005-03-02。</target>
        </trans-unit>
        <trans-unit id="45aa2700c673ebfa0acebc5efea925be3a17cb6f" translate="yes" xml:space="preserve">
          <source>Add one to the given number using the state monad:</source>
          <target state="translated">状態モナドを使って、与えられた数に1を加算します。</target>
        </trans-unit>
        <trans-unit id="ad0277793f67d2e393175d08b52db34131c5ef10" translate="yes" xml:space="preserve">
          <source>Add signed integers reporting overflow. First member of result is the sum truncated to an &lt;code&gt;Int#&lt;/code&gt;; second member is zero if the true sum fits in an &lt;code&gt;Int#&lt;/code&gt;, nonzero if overflow occurred (the sum is either too large or too small to fit in an &lt;code&gt;Int#&lt;/code&gt;).</source>
          <target state="translated">オーバーフローを報告する符号付き整数を追加します。結果の最初のメンバーは、 &lt;code&gt;Int#&lt;/code&gt; に切り捨てられた合計です。2番目のメンバーは、真の合計が &lt;code&gt;Int#&lt;/code&gt; に収まる場合はゼロ、オーバーフローが発生した場合はゼロ以外です（合計が大きすぎるか小さすぎる場合は &lt;code&gt;Int#&lt;/code&gt; に収まりません）。</target>
        </trans-unit>
        <trans-unit id="b0fcd5e56314036018a9f0cac00e78ef55a1787b" translate="yes" xml:space="preserve">
          <source>Add some helper code that starts up and shuts down the Haskell RTS:</source>
          <target state="translated">Haskell RTSを起動したり、シャットダウンしたりするヘルパーコードを追加します。</target>
        </trans-unit>
        <trans-unit id="985586c7f3031f00d6269e644d3adc10e6ea07bc" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;-s [⟨file⟩]&lt;/code&gt; RTS option when running the program to see timing stats, which will help to tell you whether your program got faster by using more CPUs or not. If the user time is greater than the elapsed time, then the program used more than one CPU. You should also run the program without &lt;a href=&quot;#rts-flag--N%20%E2%9F%A8x%E2%9F%A9&quot;&gt;&lt;code&gt;-N ⟨x⟩&lt;/code&gt;&lt;/a&gt; for comparison.</source>
          <target state="translated">追加 &lt;code&gt;-s [⟨file⟩]&lt;/code&gt; あなたのプログラムは、より多くのCPUを使用したりしないことによって、より速くなったかどうかを伝えるために役立つタイミングの統計情報を参照するには、プログラムを実行している時にRTSオプションを。ユーザー時間が経過時間よりも大きい場合、プログラムは複数のCPUを使用していました。比較のために、&lt;a href=&quot;#rts-flag--N%20%E2%9F%A8x%E2%9F%A9&quot;&gt; &lt;code&gt;-N ⟨x⟩&lt;/code&gt; &lt;/a&gt;なしでプログラムを実行する必要もあります。</target>
        </trans-unit>
        <trans-unit id="343b1a229f6a10110d459f27e6591278cc0810b3" translate="yes" xml:space="preserve">
          <source>Add the global package database on top of the current stack. This option can be used after &lt;a href=&quot;#ghc-flag--no-global-package-db&quot;&gt;&lt;code&gt;-no-global-package-db&lt;/code&gt;&lt;/a&gt; to specify the position in the stack where the global package database should be loaded.</source>
          <target state="translated">現在のスタックの上にグローバルパッケージデータベースを追加します。このオプションを&lt;a href=&quot;#ghc-flag--no-global-package-db&quot;&gt; &lt;code&gt;-no-global-package-db&lt;/code&gt; の&lt;/a&gt;後に使用して、グローバルパッケージデータベースをロードするスタック内の位置を指定できます。</target>
        </trans-unit>
        <trans-unit id="24dc1f25cbb780084188d4ff897a81d5104622f0" translate="yes" xml:space="preserve">
          <source>Add the global package db to the stack.</source>
          <target state="translated">グローバルパッケージのdbをスタックに追加します。</target>
        </trans-unit>
        <trans-unit id="fe975763255492732af82ca06ecb5eda5e5fa904" translate="yes" xml:space="preserve">
          <source>Add the package database ⟨file⟩ on top of the current stack.</source>
          <target state="translated">パッケージデータベース ⟨file⟩ を現在のスタックの上に追加します。</target>
        </trans-unit>
        <trans-unit id="6134bf2d1b2295efc8fa6b7e828ec4d22ba2e38e" translate="yes" xml:space="preserve">
          <source>Add the user&amp;rsquo;s package database on top of the current stack. This option can be used after &lt;a href=&quot;#ghc-flag--no-user-package-db&quot;&gt;&lt;code&gt;-no-user-package-db&lt;/code&gt;&lt;/a&gt; to specify the position in the stack where the user&amp;rsquo;s package database should be loaded.</source>
          <target state="translated">現在のスタックの上にユーザーのパッケージデータベースを追加します。このオプションを&lt;a href=&quot;#ghc-flag--no-user-package-db&quot;&gt; &lt;code&gt;-no-user-package-db&lt;/code&gt; の&lt;/a&gt;後に使用して、ユーザーのパッケージデータベースをロードするスタック内の位置を指定できます。</target>
        </trans-unit>
        <trans-unit id="30d336c4a71c8e660819935f8d9b591c05d3839d" translate="yes" xml:space="preserve">
          <source>Add the user&amp;rsquo;s package db to the stack.</source>
          <target state="translated">ユーザーのパッケージdbをスタックに追加します。</target>
        </trans-unit>
        <trans-unit id="f0c714c0819e829fa65b99edbce416f762fa1cd5" translate="yes" xml:space="preserve">
          <source>Add the user's package db to the stack.</source>
          <target state="translated">ユーザーのパッケージDBをスタックに追加します。</target>
        </trans-unit>
        <trans-unit id="52e83704b0c13e474a873f78d2503ff9d5058a2e" translate="yes" xml:space="preserve">
          <source>Add two &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;s</source>
          <target state="translated">2追加 &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 秒</target>
        </trans-unit>
        <trans-unit id="42140a41e27de0c19e086f86091f816243e8209e" translate="yes" xml:space="preserve">
          <source>Add two non-negative numbers. Errors out on overflow.</source>
          <target state="translated">2つの非負数を加算します。オーバーフローでエラーアウト。</target>
        </trans-unit>
        <trans-unit id="e2856c1714aa39e0ac4378840b55f10a1492a342" translate="yes" xml:space="preserve">
          <source>Add two vectors element-wise.</source>
          <target state="translated">2つのベクトルを要素ごとに加算します。</target>
        </trans-unit>
        <trans-unit id="d21ffb0b2e887326fe4eaccd172c45b78c0f6321" translate="yes" xml:space="preserve">
          <source>Add unsigned integers reporting overflow. The first element of the pair is the result. The second element is the carry flag, which is nonzero on overflow. See also &lt;code&gt;plusWord2#&lt;/code&gt;.</source>
          <target state="translated">オーバーフローを報告する符号なし整数を追加します。ペアの最初の要素は結果です。2番目の要素はキャリーフラグで、オーバーフロー時にゼロ以外になります。 &lt;code&gt;plusWord2#&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="4224f11c255c4982dd554902608b0a229771245f" translate="yes" xml:space="preserve">
          <source>Add unsigned integers, with the high part (carry) in the first component of the returned pair and the low part in the second component of the pair. See also &lt;code&gt;addWordC#&lt;/code&gt;.</source>
          <target state="translated">符号なし整数を追加します。返されるペアの最初のコンポーネントに高い部分（キャリー）があり、ペアの2番目のコンポーネントに低い部分があります。 &lt;code&gt;addWordC#&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="d7bc6acbb336def5a2fed21adc84cf2eba8c8695" translate="yes" xml:space="preserve">
          <source>Add years, matching month and day, with Feb 29th clipped to Feb 28th if necessary. For instance, 2004-02-29 + 2 years = 2006-02-28.</source>
          <target state="translated">必要に応じて、2月29日を2月28日に切り取って、月と日を一致させて年を追加します。例えば、2004-02-29+2年=2006-02-28となります。</target>
        </trans-unit>
        <trans-unit id="00a5a0f630ddf36709167f1d67babdf5ba438d3b" translate="yes" xml:space="preserve">
          <source>Add years, matching month and day, with Feb 29th rolled over to Mar 1st if necessary. For instance, 2004-02-29 + 2 years = 2006-03-01.</source>
          <target state="translated">必要に応じて2月29日を3月1日にロールオーバーして、月と日を一致させて年を追加します。例えば、2004-02-29+2年=2006-03-01となります。</target>
        </trans-unit>
        <trans-unit id="b78eacb0dc09583fbc5860e25537c0fbd17b2217" translate="yes" xml:space="preserve">
          <source>Add ⟨dir⟩ to the directory search list for &lt;code&gt;#include&lt;/code&gt; files</source>
          <target state="translated">&lt;code&gt;#include&lt;/code&gt; ファイルのディレクトリ検索リストに「dir」を追加します</target>
        </trans-unit>
        <trans-unit id="3af3cf99d9bd473db5a8f166f611704c815a0e2a" translate="yes" xml:space="preserve">
          <source>Add ⟨dir⟩ to the list of directories searched for libraries</source>
          <target state="translated">ライブラリで検索したディレクトリのリストに⟨dir⟩を追加します。</target>
        </trans-unit>
        <trans-unit id="22a6f927fd045f27916f2841389ceb5619f2f520" translate="yes" xml:space="preserve">
          <source>Add ⟨file⟩ to the package db stack.</source>
          <target state="translated">⟨file⟩をパッケージのdbスタックに追加します。</target>
        </trans-unit>
        <trans-unit id="fd862d70f0a0e1b3f98b9cfd9a82f7a12719414c" translate="yes" xml:space="preserve">
          <source>Add ⟨module⟩(s) to the current target set, and perform a reload. Normally pre-compiled code for the module will be loaded if available, or otherwise the module will be compiled to byte-code. Using the &lt;code&gt;*&lt;/code&gt; prefix forces the module to be loaded as byte-code.</source>
          <target state="translated">「モジュール」を現在のターゲットセットに追加し、リロードを実行します。通常、モジュールの事前コンパイルされたコードが利用可能な場合は読み込まれます。そうでない場合、モジュールはバイトコードにコンパイルされます。 &lt;code&gt;*&lt;/code&gt; 接頭辞を使用すると、モジュールが強制的にバイトコードとしてロードされます。</target>
        </trans-unit>
        <trans-unit id="d5c0d264184b29e5240b822c85a976bae183083b" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;~&lt;/code&gt; in front of &lt;code&gt;x&lt;/code&gt; gives the regular lazy behavior.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の前に &lt;code&gt;~&lt;/code&gt; を追加すると、通常の遅延動作になります。</target>
        </trans-unit>
        <trans-unit id="320069f40befc715427528e74af5fccc8e33c273" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;~&lt;/code&gt; in front of &lt;code&gt;x&lt;/code&gt; gives the regular lazy behavior. The general rule is that we add an implicit bang on the outermost pattern, unless disabled with &lt;code&gt;~&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の前に &lt;code&gt;~&lt;/code&gt; を追加すると、通常の遅延動作になります。一般的なルールは、 &lt;code&gt;~&lt;/code&gt; 無効にしない限り、最も外側のパターンに暗黙の強打を追加することです。</target>
        </trans-unit>
        <trans-unit id="d83058e490d2d8e416a97aa6b2da12e694c423cc" translate="yes" xml:space="preserve">
          <source>Adding a new kind of pure computation to an applicative functor.</source>
          <target state="translated">応用ファンクタに新しい種類の純粋な計算を追加しました。</target>
        </trans-unit>
        <trans-unit id="3e22ec51f6417f07ed5484e9c1f31e458834a41e" translate="yes" xml:space="preserve">
          <source>Adding a type signature dramatically changes the result! This is a rather counter-intuitive phenomenon, worth watching out for.</source>
          <target state="translated">タイプシグネチャを追加すると結果が劇的に変わる! これはかなり直観的ではない現象で、注意する価値があります。</target>
        </trans-unit>
        <trans-unit id="d9f79758ab7e2377c37e190db1c47d9123b9b0b2" translate="yes" xml:space="preserve">
          <source>Adding the optional &amp;ldquo;&lt;code&gt;!&lt;/code&gt;&amp;rdquo; turns type errors into warnings while loading. This allows to use the portions of the module that are correct, even if there are type errors in some definitions. Effectively, the &amp;ldquo;-fdefer-type-errors&amp;rdquo; flag is set before loading and unset after loading if the flag has not already been set before. See &lt;a href=&quot;exts/defer_type_errors#defer-type-errors&quot;&gt;Deferring type errors to runtime&lt;/a&gt; for further motivation and details.</source>
          <target state="translated">オプションの「 &lt;code&gt;!&lt;/code&gt; 」は、読み込み中にタイプエラーを警告に変えます。これにより、一部の定義にタイプエラーがある場合でも、モジュールの正しい部分を使用できます。事実上、「-fdefer-type-errors」フラグはロード前に設定され、フラグがまだ設定されていない場合はロード後に設定解除されます。参照してください。&lt;a href=&quot;exts/defer_type_errors#defer-type-errors&quot;&gt;実行時に型エラーを延期&lt;/a&gt;、さらにモチベーションや詳細については。</target>
        </trans-unit>
        <trans-unit id="99385bb5ea9d50b509bba76a80c6d5cf02fdad9b" translate="yes" xml:space="preserve">
          <source>Adding the optional &amp;ldquo;&lt;code&gt;!&lt;/code&gt;&amp;rdquo; turns type errors into warnings while loading. This allows to use the portions of the module that are correct, even if there are type errors in some definitions. Effectively, the &amp;ldquo;-fdefer-type-errors&amp;rdquo; flag is set before loading and unset after loading if the flag has not already been set before. See &lt;a href=&quot;glasgow_exts#defer-type-errors&quot;&gt;Deferring type errors to runtime&lt;/a&gt; for further motivation and details.</source>
          <target state="translated">オプションの「 &lt;code&gt;!&lt;/code&gt; ロード中にタイプエラーを警告に変えます。これにより、一部の定義にタイプエラーがある場合でも、モジュールの正しい部分を使用できます。事実上、「-fdefer-type-errors」フラグはロード前に設定され、フラグがまだ設定されていない場合はロード後に設定解除されます。参照してください。&lt;a href=&quot;glasgow_exts#defer-type-errors&quot;&gt;実行時に型エラーを延期&lt;/a&gt;、さらにモチベーションや詳細については。</target>
        </trans-unit>
        <trans-unit id="00f220c3a56210a9843d04890d61a40e6f8811dd" translate="yes" xml:space="preserve">
          <source>Addition of type-level naturals.</source>
          <target state="translated">タイプレベルのナチュールを追加しました。</target>
        </trans-unit>
        <trans-unit id="1d55c4561961d726b476a4d113ce4ac1271e1f3d" translate="yes" xml:space="preserve">
          <source>Additional &lt;code&gt;Integer&lt;/code&gt; operations</source>
          <target state="translated">追加の &lt;code&gt;Integer&lt;/code&gt; 演算</target>
        </trans-unit>
        <trans-unit id="452f31724597f25fbb7b21a77fe4b6fccc9c9f11" translate="yes" xml:space="preserve">
          <source>Additional arguments to the pre-processor can be passed in using the &lt;a href=&quot;#ghc-flag--optF%20%E2%9F%A8option%E2%9F%A9&quot;&gt;&lt;code&gt;-optF ⟨option⟩&lt;/code&gt;&lt;/a&gt; option. These are fed to ⟨cmd⟩ on the command line after the three standard input and output arguments.</source>
          <target state="translated">プリプロセッサーへの追加の引数は、&lt;a href=&quot;#ghc-flag--optF%20%E2%9F%A8option%E2%9F%A9&quot;&gt; &lt;code&gt;-optF ⟨option⟩&lt;/code&gt; &lt;/a&gt;オプションを使用して渡すことができます。これらは、3つの標準入力および出力引数の後にコマンドラインの「cmd」に送られます。</target>
        </trans-unit>
        <trans-unit id="ba84f116cccb8aaddf33910d85c19273f9b5c33d" translate="yes" xml:space="preserve">
          <source>Additional conversion operations to &lt;code&gt;Integer&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Integer&lt;/code&gt; への追加の変換操作</target>
        </trans-unit>
        <trans-unit id="05dd2fde350699cecd8602584538e2a5301a7997" translate="yes" xml:space="preserve">
          <source>Additional functions for deconstructing sequences are available via the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-foldable#v:Foldable&quot;&gt;Foldable&lt;/a&gt;&lt;/code&gt; instance of &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">シーケンスを分解するための追加の関数は、 &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-foldable#v:Foldable&quot;&gt;Foldable&lt;/a&gt;&lt;/code&gt; インスタンスを介して利用できます。</target>
        </trans-unit>
        <trans-unit id="5cf2915563496656545c5e0888c8da42599eb5f8" translate="yes" xml:space="preserve">
          <source>Additional functions for deconstructing sequences are available via the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-foldable#v:Foldable&quot;&gt;Foldable&lt;/a&gt;&lt;/code&gt; instance of &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Additional functions for deconstructing sequences are available via the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-foldable#v:Foldable&quot;&gt;Foldable&lt;/a&gt;&lt;/code&gt; instance of &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="94293acb7d800e768e0370ed3629748a97bd0b8e" translate="yes" xml:space="preserve">
          <source>Additional functions for deconstructing sequences are available via the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-foldable#v:Foldable&quot;&gt;Foldable&lt;/a&gt;&lt;/code&gt; instance of &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">シーケンスを分解するための追加の関数は、 &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-foldable#v:Foldable&quot;&gt;Foldable&lt;/a&gt;&lt;/code&gt; インスタンスを介して利用できます。</target>
        </trans-unit>
        <trans-unit id="33810ea2f256277dbeeee354b4b9748e64cd54e7" translate="yes" xml:space="preserve">
          <source>Additional generic representation type constructors</source>
          <target state="translated">追加の汎用表現型コンストラクタ</target>
        </trans-unit>
        <trans-unit id="fefa8177b546e09c697ef3ccda7dfb9a8468dadd" translate="yes" xml:space="preserve">
          <source>Additional submodules</source>
          <target state="translated">追加のサブモジュール</target>
        </trans-unit>
        <trans-unit id="d5fc75cb6b2328204ad6e4f5c7b8aa1503974318" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;ghc-pkg list&lt;/code&gt; reminds you that there are broken packages and suggests &lt;code&gt;ghc-pkg check&lt;/code&gt;, which displays more information about the nature of the failure:</source>
          <target state="translated">さらに、 &lt;code&gt;ghc-pkg list&lt;/code&gt; は壊れたパッケージがあることを通知し、失敗の性質に関する詳細情報を表示 &lt;code&gt;ghc-pkg check&lt;/code&gt; を提案します。</target>
        </trans-unit>
        <trans-unit id="4dc57812bc7acb080b8b1b3c9a8dc29f687921a8" translate="yes" xml:space="preserve">
          <source>Additionally, any files specified with &lt;a href=&quot;#ghc-flag--ghci-script&quot;&gt;&lt;code&gt;-ghci-script&lt;/code&gt;&lt;/a&gt; flags will be read after the standard files, allowing the use of custom .ghci files.</source>
          <target state="translated">さらに、&lt;a href=&quot;#ghc-flag--ghci-script&quot;&gt; &lt;code&gt;-ghci-script&lt;/code&gt; &lt;/a&gt;フラグで指定されたファイルは標準ファイルの後に読み取られるため、カスタム.ghciファイルを使用できます。</target>
        </trans-unit>
        <trans-unit id="8273902569bf382d8f68303982acb32861c6cbb8" translate="yes" xml:space="preserve">
          <source>Additionally, in function definitions, variables bound by matching earlier curried arguments may be used in view pattern expressions in later arguments:</source>
          <target state="translated">さらに、関数定義では、以前のカレー化された引数にマッチすることでバインドされた変数は、後の引数のビューパターン式で使用することができます。</target>
        </trans-unit>
        <trans-unit id="bd25e90c276ad8a7d25e96fdbb8ecaf1a0b665bf" translate="yes" xml:space="preserve">
          <source>Additionally, since GHC 9.0.1, combining &lt;a href=&quot;#extension-LambdaCase&quot;&gt;&lt;code&gt;LambdaCase&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;arrows#extension-Arrows&quot;&gt;&lt;code&gt;Arrows&lt;/code&gt;&lt;/a&gt; allows &lt;code&gt;\case&lt;/code&gt; syntax to be used as a command in &lt;code&gt;proc&lt;/code&gt; notation:</source>
          <target state="translated">さらに、GHC 9.0.1以降、&lt;a href=&quot;#extension-LambdaCase&quot;&gt; &lt;code&gt;LambdaCase&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;arrows#extension-Arrows&quot;&gt; &lt;code&gt;Arrows&lt;/code&gt; &lt;/a&gt;を組み合わせると、 &lt;code&gt;\case&lt;/code&gt; 構文を &lt;code&gt;proc&lt;/code&gt; 表記のコマンドとして使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="f89673843f1be6757860a64501f5bc027e357960" translate="yes" xml:space="preserve">
          <source>Additionally, the following flags are accepted by &lt;code&gt;ghc-pkg&lt;/code&gt;:</source>
          <target state="translated">さらに、次のフラグが &lt;code&gt;ghc-pkg&lt;/code&gt; によって受け入れられます。</target>
        </trans-unit>
        <trans-unit id="dd4c0753998481c0fdb1163a5b1e4a326161eee0" translate="yes" xml:space="preserve">
          <source>Additionally, the use of &lt;a href=&quot;../extending_ghc#annotation-pragmas&quot;&gt;annotations&lt;/a&gt; is forbidden, as that would allow bypassing Safe Haskell restrictions. See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/10826&quot;&gt;#10826&lt;/a&gt; for details.</source>
          <target state="translated">さらに、Safe Haskellの制限を回避できるため、&lt;a href=&quot;../extending_ghc#annotation-pragmas&quot;&gt;注釈&lt;/a&gt;の使用は禁止されています。詳細については、&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/10826&quot;&gt;＃10826&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6098dd57b05f9b5adb478e7eb1c70e1499221dae" translate="yes" xml:space="preserve">
          <source>Additionally, the use of &lt;a href=&quot;extending_ghc#annotation-pragmas&quot;&gt;annotations&lt;/a&gt; is forbidden, as that would allow bypassing Safe Haskell restrictions. See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/10826&quot;&gt;#10826&lt;/a&gt; for details.</source>
          <target state="translated">Additionally, the use of &lt;a href=&quot;extending_ghc#annotation-pragmas&quot;&gt;annotations&lt;/a&gt; is forbidden, as that would allow bypassing Safe Haskell restrictions. See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/10826&quot;&gt;#10826&lt;/a&gt; for details.</target>
        </trans-unit>
        <trans-unit id="ea07a4f598cd1862ca91a8d811d4455a836c0db0" translate="yes" xml:space="preserve">
          <source>Additionally, the use of &lt;a href=&quot;extending_ghc#annotation-pragmas&quot;&gt;annotations&lt;/a&gt; is forbidden, as that would allow bypassing Safe Haskell restrictions. See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/10826&quot;&gt;Issue #10826&lt;/a&gt; for details.</source>
          <target state="translated">さらに、Safe Haskellの制限を回避できるようにするため、&lt;a href=&quot;extending_ghc#annotation-pragmas&quot;&gt;注釈&lt;/a&gt;の使用は禁止されています。詳細については、&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/10826&quot;&gt;問題＃10826&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ba7d071e5cf6b03c15819e3ffdf6a64a0ef17bfa" translate="yes" xml:space="preserve">
          <source>Additionally, this implementation places bitmaps in the leaves of the tree. Their size is the natural size of a machine word (32 or 64 bits) and greatly reduce memory footprint and execution times for dense sets, e.g. sets where it is likely that many values lie close to each other. The asymptotics are not affected by this optimization.</source>
          <target state="translated">さらに、この実装ではビットマップをツリーの葉に配置しています。そのサイズはマシンワードの自然なサイズ(32ビットまたは64ビット)であり、密な集合(例えば、多くの値が互いに近くにある可能性が高い集合)のメモリフットプリントと実行時間を大幅に削減します。漸近論はこの最適化によって影響を受けません。</target>
        </trans-unit>
        <trans-unit id="9433cfd346f8c54358a2f7edce3cb77efb148924" translate="yes" xml:space="preserve">
          <source>Additionally, this implementation places bitmaps in the leaves of the tree. Their size is the natural size of a machine word (32 or 64 bits) and greatly reduces the memory footprint and execution times for dense sets, e.g. sets where it is likely that many values lie close to each other. The asymptotics are not affected by this optimization.</source>
          <target state="translated">さらに、この実装ではビットマップをツリーの葉に配置します。そのサイズはマシンワードの自然なサイズ(32ビットまたは64ビット)であり、密な集合(例えば、多くの値が互いに近くにある可能性が高い集合)のメモリフットプリントと実行時間を大幅に削減します。漸近論はこの最適化によって影響を受けません。</target>
        </trans-unit>
        <trans-unit id="1bf2d76785594ad916dd8c2e5e99f51e13db7893" translate="yes" xml:space="preserve">
          <source>Additionally, unless &lt;code&gt;-hide-all-packages&lt;/code&gt; is specified &lt;code&gt;ghc&lt;/code&gt; will also look for the package environment in the following locations:</source>
          <target state="translated">さらに、 &lt;code&gt;-hide-all-packages&lt;/code&gt; が指定されていない限り、 &lt;code&gt;ghc&lt;/code&gt; は次の場所でパッケージ環境も検索します。</target>
        </trans-unit>
        <trans-unit id="2aa983ad06fdb2dac09d7b6232814da70747e9ee" translate="yes" xml:space="preserve">
          <source>Additive</source>
          <target state="translated">Additive</target>
        </trans-unit>
        <trans-unit id="e571fb2f3cd62f8043f73be079635a2b1b76993b" translate="yes" xml:space="preserve">
          <source>Additive inverse:</source>
          <target state="translated">加算逆算。</target>
        </trans-unit>
        <trans-unit id="0d42cec26dbc762aafe43e05a50f969d0b7505d7" translate="yes" xml:space="preserve">
          <source>Addr</source>
          <target state="translated">Addr</target>
        </trans-unit>
        <trans-unit id="e78f3509a8a9919b87bca8268eb67a1992a398dd" translate="yes" xml:space="preserve">
          <source>Addr#</source>
          <target state="translated">Addr#</target>
        </trans-unit>
        <trans-unit id="9693f97edb3f213e60bf04638a2964d95c0a8e70" translate="yes" xml:space="preserve">
          <source>AddrRep</source>
          <target state="translated">AddrRep</target>
        </trans-unit>
        <trans-unit id="e1bcdaba63c737122befb027c96355aebd956e8a" translate="yes" xml:space="preserve">
          <source>Address range information necessary for efficient lookup in debug information.</source>
          <target state="translated">デバッグ情報の中で効率的に参照するために必要なアドレス範囲の情報です。</target>
        </trans-unit>
        <trans-unit id="2bea019ec2ca9ce8cba25638cef6e4ebf912a40d" translate="yes" xml:space="preserve">
          <source>Adds a core plugin to the compilation pipeline.</source>
          <target state="translated">コンパイルパイプラインにコアプラグインを追加します。</target>
        </trans-unit>
        <trans-unit id="f141d838836915fbdfd335ae66e883d10b2bee58" translate="yes" xml:space="preserve">
          <source>Adds a location description and maybe a file path and file handle to an &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt;. If any of the file handle or file path is not given the corresponding value in the &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; remains unaltered.</source>
          <target state="translated">場所の説明と、ファイルパスとファイルハンドルを &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; に追加します。ファイルハンドルまたはファイルパスのいずれかが指定されていない場合、 &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; の対応する値は変更されません。</target>
        </trans-unit>
        <trans-unit id="14518bca79b10a8d6a6afac2dc2d74ba60c9789a" translate="yes" xml:space="preserve">
          <source>Adds an automatic &lt;code&gt;SCC&lt;/code&gt; annotation to all &lt;em&gt;call sites&lt;/em&gt;. This is particularly useful when using profiling for the purposes of generating stack traces; see the function &lt;a href=&quot;../libraries/base-4.13.0.0/debug-trace#v:traceShow&quot;&gt;Debug.Trace.traceShow&lt;/a&gt;, or the &lt;a href=&quot;runtime_control#rts-flag--xc&quot;&gt;&lt;code&gt;-xc&lt;/code&gt;&lt;/a&gt; RTS flag (&lt;a href=&quot;runtime_control#rts-options-debugging&quot;&gt;RTS options for hackers, debuggers, and over-interested souls&lt;/a&gt;) for more details.</source>
          <target state="translated">自動 &lt;code&gt;SCC&lt;/code&gt; 注釈をすべての&lt;em&gt;呼び出しサイトに&lt;/em&gt;追加し&lt;em&gt;ます&lt;/em&gt;。これは、スタックトレースを生成する目的でプロファイリングを使用する場合に特に便利です。詳細については、関数&lt;a href=&quot;../libraries/base-4.13.0.0/debug-trace#v:traceShow&quot;&gt;Debug.Trace.traceShow&lt;/a&gt;または&lt;a href=&quot;runtime_control#rts-flag--xc&quot;&gt; &lt;code&gt;-xc&lt;/code&gt; &lt;/a&gt; RTSフラグ（&lt;a href=&quot;runtime_control#rts-options-debugging&quot;&gt;ハッカー、デバッガー、および関心の&lt;/a&gt;高い魂のためのRTSオプション）を参照してください。</target>
        </trans-unit>
        <trans-unit id="4dd58b10c5df43531b5419e150eab3428f317659" translate="yes" xml:space="preserve">
          <source>Adds an automatic &lt;code&gt;SCC&lt;/code&gt; annotation to all &lt;em&gt;call sites&lt;/em&gt;. This is particularly useful when using profiling for the purposes of generating stack traces; see the function &lt;a href=&quot;../libraries/base-4.14.1.0/debug-trace#v:traceShow&quot;&gt;Debug.Trace.traceShow&lt;/a&gt;, or the &lt;a href=&quot;runtime_control#rts-flag--xc&quot;&gt;&lt;code&gt;-xc&lt;/code&gt;&lt;/a&gt; RTS flag (&lt;a href=&quot;runtime_control#rts-options-debugging&quot;&gt;RTS options for hackers, debuggers, and over-interested souls&lt;/a&gt;) for more details.</source>
          <target state="translated">Adds an automatic &lt;code&gt;SCC&lt;/code&gt; annotation to all &lt;em&gt;call sites&lt;/em&gt;. This is particularly useful when using profiling for the purposes of generating stack traces; see the function &lt;a href=&quot;../libraries/base-4.14.1.0/debug-trace#v:traceShow&quot;&gt;Debug.Trace.traceShow&lt;/a&gt;, or the &lt;a href=&quot;runtime_control#rts-flag--xc&quot;&gt; &lt;code&gt;-xc&lt;/code&gt; &lt;/a&gt; RTS flag (&lt;a href=&quot;runtime_control#rts-options-debugging&quot;&gt;RTS options for hackers, debuggers, and over-interested souls&lt;/a&gt;) for more details.</target>
        </trans-unit>
        <trans-unit id="77b18e119a59d882bbdff5f7cdcc19671357a56c" translate="yes" xml:space="preserve">
          <source>Adds an automatic &lt;code&gt;SCC&lt;/code&gt; annotation to all &lt;em&gt;call sites&lt;/em&gt;. This is particularly useful when using profiling for the purposes of generating stack traces; see the function &lt;a href=&quot;../libraries/base-4.15.0.0/debug-trace#v:traceShow&quot;&gt;Debug.Trace.traceShow&lt;/a&gt;, or the &lt;a href=&quot;runtime_control#rts-flag--xc&quot;&gt;&lt;code&gt;-xc&lt;/code&gt;&lt;/a&gt; RTS flag (&lt;a href=&quot;runtime_control#rts-options-debugging&quot;&gt;RTS options for hackers, debuggers, and over-interested souls&lt;/a&gt;) for more details.</source>
          <target state="translated">すべての&lt;em&gt;呼び出しサイトに&lt;/em&gt;自動 &lt;code&gt;SCC&lt;/code&gt; 注釈を追加し&lt;em&gt;ます&lt;/em&gt;。これは、スタックトレースを生成する目的でプロファイリングを使用する場合に特に役立ちます。詳細については、関数&lt;a href=&quot;../libraries/base-4.15.0.0/debug-trace#v:traceShow&quot;&gt;Debug.Trace.traceShow&lt;/a&gt;、または&lt;a href=&quot;runtime_control#rts-flag--xc&quot;&gt; &lt;code&gt;-xc&lt;/code&gt; &lt;/a&gt; RTSフラグ（&lt;a href=&quot;runtime_control#rts-options-debugging&quot;&gt;ハッカー、デバッガー、および過度に関心のある魂のためのRTSオプション&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="a4fd2a08806dfb482db344074817b7f6e5c01441" translate="yes" xml:space="preserve">
          <source>Adds ⟨file⟩ to the stack of package databases. Additionally, ⟨file⟩ will also be the database modified by a &lt;code&gt;register&lt;/code&gt;, &lt;code&gt;unregister&lt;/code&gt;, &lt;code&gt;expose&lt;/code&gt; or &lt;code&gt;hide&lt;/code&gt; command, unless it is overridden by a later &lt;code&gt;--package-db&lt;/code&gt;, &lt;code&gt;--user&lt;/code&gt; or &lt;code&gt;--global&lt;/code&gt; option.</source>
          <target state="translated">パッケージデータベースのスタックに「ファイル」を追加します。また、⟨file⟩はまたによって変更されたデータベースになり &lt;code&gt;register&lt;/code&gt; 、 &lt;code&gt;unregister&lt;/code&gt; 、 &lt;code&gt;expose&lt;/code&gt; 又は &lt;code&gt;hide&lt;/code&gt; それは後によりオーバーライドされない限り、コマンド &lt;code&gt;--package-db&lt;/code&gt; 、 &lt;code&gt;--user&lt;/code&gt; または &lt;code&gt;--global&lt;/code&gt; オプション。</target>
        </trans-unit>
        <trans-unit id="6b704187610182fd9bd374b8590aaa1ef187a2e9" translate="yes" xml:space="preserve">
          <source>Adjacency list representation of a graph, mapping each vertex to its list of successors.</source>
          <target state="translated">グラフの隣接関係リスト表現で,各頂点をその後継者リストにマッピングします.</target>
        </trans-unit>
        <trans-unit id="b54a06cdf203c292a9600afc8f4877852335267a" translate="yes" xml:space="preserve">
          <source>Adjust the size of an array</source>
          <target state="translated">配列のサイズを調整する</target>
        </trans-unit>
        <trans-unit id="90ae8e7c61f1d870875dbba75294d0ee30d78240" translate="yes" xml:space="preserve">
          <source>Adjust the size of an array in the given pool.</source>
          <target state="translated">与えられたプール内の配列のサイズを調整します。</target>
        </trans-unit>
        <trans-unit id="0f13658ace97bdbb476bffd14472478597823d14" translate="yes" xml:space="preserve">
          <source>Adjust the size of an array including an extra position for the end marker.</source>
          <target state="translated">エンドマーカの位置を追加して配列のサイズを調整します。</target>
        </trans-unit>
        <trans-unit id="8f64f3b151b220c78b035080db416951b86c9133" translate="yes" xml:space="preserve">
          <source>Adjust the size of an array with an end marker in the given pool.</source>
          <target state="translated">指定されたプールの終了マーカーを持つ配列のサイズを調整します。</target>
        </trans-unit>
        <trans-unit id="22c056b1203c0d0dbe4975dcb12541b083750969" translate="yes" xml:space="preserve">
          <source>Adjust the storage area for an element in the pool to the given size of the required type.</source>
          <target state="translated">プール内の要素の格納領域を、必要なタイプの指定されたサイズに調整します。</target>
        </trans-unit>
        <trans-unit id="7b78d30e021c76a4d2cd9b8d7c83d0401635e998" translate="yes" xml:space="preserve">
          <source>Adjust the storage area for an element in the pool to the given size.</source>
          <target state="translated">プール内の要素の格納領域を指定されたサイズに調整します。</target>
        </trans-unit>
        <trans-unit id="483b6c748f94c6096a813d4e1202da0abec1197a" translate="yes" xml:space="preserve">
          <source>Administration: errors, locations and IO</source>
          <target state="translated">管理:エラー、場所、IO</target>
        </trans-unit>
        <trans-unit id="e796c7c730ff7dabd900a81e118126dd63495d56" translate="yes" xml:space="preserve">
          <source>Advance a pointer into an array by the given number of elements</source>
          <target state="translated">指定された要素数だけ配列へのポインタを進めます.</target>
        </trans-unit>
        <trans-unit id="260fc09cb1bd463d426655ad971e67b80c27f04d" translate="yes" xml:space="preserve">
          <source>Advances the given address by the given offset in bytes.</source>
          <target state="translated">指定されたアドレスを、指定されたオフセット分だけバイト単位で進めます。</target>
        </trans-unit>
        <trans-unit id="8295b736050208f7764a760aab4c1497c80f65b8" translate="yes" xml:space="preserve">
          <source>Advice</source>
          <target state="translated">Advice</target>
        </trans-unit>
        <trans-unit id="1f3b7ab3442ed00e15ed0541b2686cab5245f648" translate="yes" xml:space="preserve">
          <source>Advice parameter for &lt;code&gt;&lt;a href=&quot;system-posix-fcntl#v:fileAdvise&quot;&gt;fileAdvise&lt;/a&gt;&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-fcntl#v:fileAdvise&quot;&gt;fileAdvise&lt;/a&gt;&lt;/code&gt; 操作のアドバイスパラメータ。</target>
        </trans-unit>
        <trans-unit id="641791da837ed200728e9e50c3a7a04bddd511ba" translate="yes" xml:space="preserve">
          <source>AdviceDontNeed</source>
          <target state="translated">AdviceDontNeed</target>
        </trans-unit>
        <trans-unit id="ea4292d4f711440375ee49d21953e80b5e52f970" translate="yes" xml:space="preserve">
          <source>AdviceNoReuse</source>
          <target state="translated">AdviceNoReuse</target>
        </trans-unit>
        <trans-unit id="74d7e2511ff18bffd6e754606fb5eef4017e56ae" translate="yes" xml:space="preserve">
          <source>AdviceNormal</source>
          <target state="translated">AdviceNormal</target>
        </trans-unit>
        <trans-unit id="81df8c0f743f838767314197c10a01806cad2ee1" translate="yes" xml:space="preserve">
          <source>AdviceRandom</source>
          <target state="translated">AdviceRandom</target>
        </trans-unit>
        <trans-unit id="ccfd39209774bc0bd28a1949494a57c9a708ab38" translate="yes" xml:space="preserve">
          <source>AdviceSequential</source>
          <target state="translated">AdviceSequential</target>
        </trans-unit>
        <trans-unit id="42c90330aa2e9c8f79a56b93334f2cee6565ec83" translate="yes" xml:space="preserve">
          <source>AdviceWillNeed</source>
          <target state="translated">AdviceWillNeed</target>
        </trans-unit>
        <trans-unit id="ed7d231de2d15caa7608638f366b36b040083e12" translate="yes" xml:space="preserve">
          <source>After &amp;ldquo;for each class constraint &lt;code&gt;(C t1 ... tn)&lt;/code&gt;&amp;rdquo;, add &amp;ldquo;or each quantified constraint &lt;code&gt;(forall as. context =&amp;gt; C t1 .. tn)&lt;/code&gt;&amp;ldquo;</source>
          <target state="translated">「各クラス制約 &lt;code&gt;(C t1 ... tn)&lt;/code&gt; 後に」の後に、「または各数量化制約 &lt;code&gt;(forall as. context =&amp;gt; C t1 .. tn)&lt;/code&gt; 」を追加します</target>
        </trans-unit>
        <trans-unit id="962b02c7a62413f64f2ece2fa9269c59c618e145" translate="yes" xml:space="preserve">
          <source>After &amp;ldquo;for each class constraint &lt;code&gt;(C t1 ... tn)&lt;/code&gt;&amp;rdquo;, add &amp;ldquo;or each quantified constraint &lt;code&gt;(forall as. context =&amp;gt; C t1 .. tn)&lt;/code&gt;&amp;rdquo;</source>
          <target state="translated">After &amp;ldquo;for each class constraint &lt;code&gt;(C t1 ... tn)&lt;/code&gt; &amp;rdquo;, add &amp;ldquo;or each quantified constraint &lt;code&gt;(forall as. context =&amp;gt; C t1 .. tn)&lt;/code&gt; &amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="5b0f8ce28395257ee72603489cfcfd39f2ac90c3" translate="yes" xml:space="preserve">
          <source>After a &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt; command, the current context is set to:</source>
          <target state="translated">後&lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt;コマンド、現在のコンテキストは次のように設定されています。</target>
        </trans-unit>
        <trans-unit id="07383eb16f1578a01af993380c0758317c77da4a" translate="yes" xml:space="preserve">
          <source>After analysing this declaration, GHC will discover that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; can be kind-polymorphic, with &lt;code&gt;a :: k2 -&amp;gt; Type&lt;/code&gt; and &lt;code&gt;c :: k2&lt;/code&gt;. We thus infer the following kind:</source>
          <target state="translated">この宣言を分析した後、GHCは &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;c&lt;/code&gt; が &lt;code&gt;a :: k2 -&amp;gt; Type&lt;/code&gt; と &lt;code&gt;c :: k2&lt;/code&gt; 、種類が多相であることを発見します。したがって、次の種類を推測します。</target>
        </trans-unit>
        <trans-unit id="43eb39a82773f2a643009be434c6a85d6547dd46" translate="yes" xml:space="preserve">
          <source>After calling this function the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; shares the underlying byte buffer with the original &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. Thus modifying the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt;, either in C, or using poke, will cause the contents of the &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to change, breaking referential transparency. Other &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s created by sharing (such as those produced via &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;) will also reflect these changes. Modifying the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; will break referential transparency. To avoid this, use &lt;code&gt;useAsCString&lt;/code&gt;, which makes a copy of the original &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数を呼び出した後、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; は基になるバイトバッファーを元の &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; と共有します。したがって、Cで &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; を変更するか、pokeを使用すると、 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; の内容が変更され、参照の透過性が失われます。共有によって作成された他の &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; を介して作成されたものなど）もこれらの変更を反映します。 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; を変更すると、参照の透明性が失われます。これを回避するには、元の &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; のコピーを作成する &lt;code&gt;useAsCString&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="f34b11d2d5cf5b9fa61ceda45199281dda85ee6f" translate="yes" xml:space="preserve">
          <source>After calling this function the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; shares the underlying byte buffer with the original &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. Thus modifying the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt;, either in C, or using poke, will cause the contents of the &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to change, breaking referential transparency. Other &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s created by sharing (such as those produced via &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;) will also reflect these changes. Modifying the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; will break referential transparency. To avoid this, use &lt;code&gt;useAsCStringLen&lt;/code&gt;, which makes a copy of the original &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数を呼び出した後、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; は元のバイトバッファーを元の &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; と共有します。このように変更 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; をいずれかのCに、またはPOKEを使用して、内容原因となり &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 参照透明性を壊し、変更に。共有によって作成された他の &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; を介して作成されたものなど）もこれらの変更を反映します。 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; を変更すると、参照の透明性が失われます。これを回避するには、元の &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; のコピーを作成する &lt;code&gt;useAsCStringLen&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="82a058ea48e1049a3153e84c6e2e32200ba90877" translate="yes" xml:space="preserve">
          <source>After calling this function the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; shares the underlying byte buffer with the original &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. Thus modifying the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt;, either in C, or using poke, will cause the contents of the &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to change, breaking referential transparency. Other &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s created by sharing (such as those produced via &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;) will also reflect these changes. Modifying the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; will break referential transparency. To avoid this, use &lt;code&gt;useAsCString&lt;/code&gt;, which makes a copy of the original &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">After calling this function the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; shares the underlying byte buffer with the original &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; . Thus modifying the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; , either in C, or using poke, will cause the contents of the &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to change, breaking referential transparency. Other &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; s created by sharing (such as those produced via &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; ) will also reflect these changes. Modifying the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; will break referential transparency. To avoid this, use &lt;code&gt;useAsCString&lt;/code&gt; , which makes a copy of the original &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0cb3d574900104a74408c8731d7eda427531f654" translate="yes" xml:space="preserve">
          <source>After calling this function the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; shares the underlying byte buffer with the original &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. Thus modifying the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt;, either in C, or using poke, will cause the contents of the &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to change, breaking referential transparency. Other &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s created by sharing (such as those produced via &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;) will also reflect these changes. Modifying the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; will break referential transparency. To avoid this, use &lt;code&gt;useAsCStringLen&lt;/code&gt;, which makes a copy of the original &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">After calling this function the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; shares the underlying byte buffer with the original &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; . Thus modifying the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; , either in C, or using poke, will cause the contents of the &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to change, breaking referential transparency. Other &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; s created by sharing (such as those produced via &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; ) will also reflect these changes. Modifying the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; will break referential transparency. To avoid this, use &lt;code&gt;useAsCStringLen&lt;/code&gt; , which makes a copy of the original &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b0813da186b2fd975a2b14a0effb46982b0d9725" translate="yes" xml:space="preserve">
          <source>After calling this function the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; shares the underlying byte buffer with the original &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. Thus modifying the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt;, either in C, or using poke, will cause the contents of the &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to change, breaking referential transparency. Other &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s created by sharing (such as those produced via &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;) will also reflect these changes. Modifying the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; will break referential transparency. To avoid this, use &lt;code&gt;&lt;a href=&quot;data-bytestring#v:useAsCString&quot;&gt;useAsCString&lt;/a&gt;&lt;/code&gt;, which makes a copy of the original &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数を呼び出した後、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; は基になるバイトバッファを元の &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; と共有します。したがって、Cで、またはpokeを使用して &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; を変更すると、 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; の内容が変更され、参照透過性が失われます。共有によって作成された他の &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; を介して生成されたものなど）も、これらの変更を反映します。 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; を変更すると、参照透過性が失われます。これを回避するには、元の &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; のコピーを作成する &lt;code&gt;&lt;a href=&quot;data-bytestring#v:useAsCString&quot;&gt;useAsCString&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="3bcf6e4ef8c43a1cd9147a5828b1a7983f16e46a" translate="yes" xml:space="preserve">
          <source>After calling this function the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; shares the underlying byte buffer with the original &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. Thus modifying the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt;, either in C, or using poke, will cause the contents of the &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to change, breaking referential transparency. Other &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s created by sharing (such as those produced via &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;) will also reflect these changes. Modifying the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; will break referential transparency. To avoid this, use &lt;code&gt;&lt;a href=&quot;data-bytestring#v:useAsCStringLen&quot;&gt;useAsCStringLen&lt;/a&gt;&lt;/code&gt;, which makes a copy of the original &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数を呼び出した後、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; は基になるバイトバッファを元の &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; と共有します。このように変更 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; をいずれかのCに、またはPOKEを使用して、内容原因となり &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 参照透明性を壊し、変更に。共有によって作成された他の &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; を介して生成されたものなど）も、これらの変更を反映します。 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; を変更すると、参照透過性が失われます。これを回避するには、元の &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; のコピーを作成する &lt;code&gt;&lt;a href=&quot;data-bytestring#v:useAsCStringLen&quot;&gt;useAsCStringLen&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="6923804e768f3da3c4e34a50b537baa1cecaa53f" translate="yes" xml:space="preserve">
          <source>After expanding the synonym, &lt;code&gt;f&lt;/code&gt; has the legal (in GHC) type:</source>
          <target state="translated">シノニムを拡張すると、 &lt;code&gt;f&lt;/code&gt; は正当な（GHC形式の）タイプになります。</target>
        </trans-unit>
        <trans-unit id="e94a959addb55b4d2ce5f3c538f5e0b4451a9198" translate="yes" xml:space="preserve">
          <source>After expanding the synonym, &lt;code&gt;foo&lt;/code&gt; has the legal (in GHC) type:</source>
          <target state="translated">シノニムを拡張すると、 &lt;code&gt;foo&lt;/code&gt; は正当な（GHCで）タイプになります。</target>
        </trans-unit>
        <trans-unit id="06d0d43c4a9a4534a91da534db4a4831101176f7" translate="yes" xml:space="preserve">
          <source>After expanding type synonyms, GHC does validity checking on types, looking for the following malformedness which isn&amp;rsquo;t detected simply by kind checking:</source>
          <target state="translated">型の同義語を拡張した後、GHCは型の妥当性検査を行い、種類の検査だけでは検出されない次の不正な形式を探します。</target>
        </trans-unit>
        <trans-unit id="0449647915398655b7a878613d9a9af3cfaf3fda" translate="yes" xml:space="preserve">
          <source>After running a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-extra#t:BufferWriter&quot;&gt;BufferWriter&lt;/a&gt;&lt;/code&gt; action there are three possibilities for what comes next:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-extra#t:BufferWriter&quot;&gt;BufferWriter&lt;/a&gt;&lt;/code&gt; アクションを実行した後、次の3つの可能性があります。</target>
        </trans-unit>
        <trans-unit id="f4bbb708c55cef458c6b0bed0fa5801c96a405ff" translate="yes" xml:space="preserve">
          <source>After starting &lt;code&gt;remote-iserv ⟨tmp_dir⟩ ⟨port⟩&lt;/code&gt; on the target and providing it with a temporary folder (where it will copy the necessary libraries to load to) and port it will listen for the proxy to connect.</source>
          <target state="translated">After starting &lt;code&gt;remote-iserv ⟨tmp_dir⟩ ⟨port⟩&lt;/code&gt; on the target and providing it with a temporary folder (where it will copy the necessary libraries to load to) and port it will listen for the proxy to connect.</target>
        </trans-unit>
        <trans-unit id="8f8861d66315ce749c004b7e24b472e22e1345c7" translate="yes" xml:space="preserve">
          <source>After we&amp;rsquo;ve finished invoking our Haskell functions, we can call &lt;code&gt;hs_exit()&lt;/code&gt;, which terminates the RTS.</source>
          <target state="translated">Haskell関数の呼び出しが完了したら、RTSを終了する &lt;code&gt;hs_exit()&lt;/code&gt; を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="2fa08ab3cb629ae0630f4dccf9a63999f34ccc01" translate="yes" xml:space="preserve">
          <source>Again, if &lt;code&gt;C&lt;/code&gt; contains no class methods, the instance context will be redundant, so GHC will instead generate &lt;code&gt;instance C c_1 c_2 ... c_(m-1) (N n_1 n_2 ... n_q)&lt;/code&gt;.</source>
          <target state="translated">ここでも、 &lt;code&gt;C&lt;/code&gt; にクラスメソッドが含まれていない場合、インスタンスコンテキストは冗長になるため、GHCは代わりに &lt;code&gt;instance C c_1 c_2 ... c_(m-1) (N n_1 n_2 ... n_q)&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="80611142c1da75771c803bc1306de5dd47e954cb" translate="yes" xml:space="preserve">
          <source>Alexander Berntsen 2014</source>
          <target state="translated">アレクサンダー・ベルンツェン 2014</target>
        </trans-unit>
        <trans-unit id="0f9d329fecfee776bcba1d14e6bca4840fae8ece" translate="yes" xml:space="preserve">
          <source>Algebraic data types specified in a signature cannot be implemented using pattern synonyms. See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/12717&quot;&gt;#12717&lt;/a&gt;</source>
          <target state="translated">Algebraic data types specified in a signature cannot be implemented using pattern synonyms. See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/12717&quot;&gt;#12717&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="70df90ba28c32aa3934681405622b497740ae050" translate="yes" xml:space="preserve">
          <source>Algebraic data types specified in a signature cannot be implemented using pattern synonyms. See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/12717&quot;&gt;Issue #12717&lt;/a&gt;</source>
          <target state="translated">署名で指定された代数的データ型は、パターン同義語を使用して実装することはできません。&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/12717&quot;&gt;問題＃12717を&lt;/a&gt;参照</target>
        </trans-unit>
        <trans-unit id="a995fe628ebfb0ac7cc0c0b98a66a1d60308575a" translate="yes" xml:space="preserve">
          <source>Algebraic properties:</source>
          <target state="translated">代数的性質。</target>
        </trans-unit>
        <trans-unit id="6437c830d041bd055bd0fc417ef4e386c80c8f74" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#ghc-flag--ddump-cmm-opt&quot;&gt;&lt;code&gt;-ddump-cmm-opt&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--ddump-cmm-opt&quot;&gt; &lt;code&gt;-ddump-cmm-opt&lt;/code&gt; の&lt;/a&gt;エイリアス</target>
        </trans-unit>
        <trans-unit id="00fe36cee0a001e71e45449595c2a673824d1b79" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:biasum&quot;&gt;biasum&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bifoldable#v:biasum&quot;&gt;biasum&lt;/a&gt;&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="308d7f644aaa00a5665368fb713217dcb84b51ce" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifor_&quot;&gt;bifor_&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifor_&quot;&gt;bifor_&lt;/a&gt;&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="9cdf35744dcefb67854cfd9303dbe37b27518062" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bisequence_&quot;&gt;bisequence_&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bisequence_&quot;&gt;bisequence_&lt;/a&gt;&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="107c8c77b99ddea22e0d4483b070454ccd2a71ae" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bitraverse_&quot;&gt;bitraverse_&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bitraverse_&quot;&gt;bitraverse_&lt;/a&gt;&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="23f78602884a7b538f91b984806e37d22c871f3b" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;&lt;a href=&quot;data-bitraversable#v:bifor&quot;&gt;bifor&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bitraversable#v:bifor&quot;&gt;bifor&lt;/a&gt;&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="0c1b2d82c320084f6a2ecaa9b2bb2ee948dec368" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;&lt;a href=&quot;data-bitraversable#v:bisequence&quot;&gt;bisequence&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">二 &lt;code&gt;&lt;a href=&quot;data-bitraversable#v:bisequence&quot;&gt;bisequence&lt;/a&gt;&lt;/code&gt; エイリアス。</target>
        </trans-unit>
        <trans-unit id="60cc1b8e67da53fd1ea040fa3bfb7016cc924b7f" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;&lt;a href=&quot;data-bitraversable#v:bitraverse&quot;&gt;bitraverse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bitraversable#v:bitraverse&quot;&gt;bitraverse&lt;/a&gt;&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="dc75b7adfd72cadf1d0c28de54a66b5886fa0528" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;&lt;a href=&quot;ghc-exts#v:tagToEnum-35-&quot;&gt;tagToEnum#&lt;/a&gt;&lt;/code&gt;. Returns True if its parameter is 1# and False if it is 0#.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#v:tagToEnum-35-&quot;&gt;tagToEnum#&lt;/a&gt;&lt;/code&gt; のエイリアス。パラメータが1＃の場合はTrueを、0＃の場合はFalseを返します。</target>
        </trans-unit>
        <trans-unit id="b5417a2480ca72a7d0a8e8c2b271f31533da5d02" translate="yes" xml:space="preserve">
          <source>Align functions at given boundary.</source>
          <target state="translated">与えられた境界で関数を整列させます。</target>
        </trans-unit>
        <trans-unit id="309cb56d1cbd5360ce8e4fa89688161c57474b68" translate="yes" xml:space="preserve">
          <source>Align functions to multiples of the given value. Only valid values are powers of two.</source>
          <target state="translated">関数を指定された値の倍数に整列させます。有効な値は2の累乗のみです。</target>
        </trans-unit>
        <trans-unit id="6a72085653e4c5be8c7640c868ef787cbcf063d1" translate="yes" xml:space="preserve">
          <source>All</source>
          <target state="translated">All</target>
        </trans-unit>
        <trans-unit id="e59028d7705dee24116bda8c5fbd199fa57a7e8b" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;case&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;where&lt;/code&gt; statements consume their right-hand side, or scrutiny, &lt;code&gt;Many&lt;/code&gt; times. That is, the following will not type check:</source>
          <target state="translated">すべての &lt;code&gt;case&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; および &lt;code&gt;where&lt;/code&gt; ステートメントは、その右側、つまり精査を &lt;code&gt;Many&lt;/code&gt; 度も消費します。つまり、以下はタイプチェックを行いません。</target>
        </trans-unit>
        <trans-unit id="be7cbc9171e2709ef932f92879b2fa92b735095e" translate="yes" xml:space="preserve">
          <source>All are based directly on their similarly-named &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#t:ReadP&quot;&gt;ReadP&lt;/a&gt;&lt;/code&gt; counterparts.</source>
          <target state="translated">これらはすべて、同じ名前の &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#t:ReadP&quot;&gt;ReadP&lt;/a&gt;&lt;/code&gt; の対応物に直接基づいています。</target>
        </trans-unit>
        <trans-unit id="a6cd8f76353135f8eca4c08f035ed3722d4ad99a" translate="yes" xml:space="preserve">
          <source>All arithmetic is performed modulo 2^n, where &lt;code&gt;n&lt;/code&gt; is the number of bits in the type.</source>
          <target state="translated">すべての演算は2 ^ nを法として実行されます &lt;code&gt;n&lt;/code&gt; は型のビット数です。</target>
        </trans-unit>
        <trans-unit id="5c996c3cc62dedfc6f0f7accd3202c5cbe66b76c" translate="yes" xml:space="preserve">
          <source>All arithmetic is performed modulo 2^n, where n is the number of bits in the type. One non-obvious consequence of this is that &lt;code&gt;&lt;a href=&quot;prelude#v:negate&quot;&gt;negate&lt;/a&gt;&lt;/code&gt; should &lt;em&gt;not&lt;/em&gt; raise an error on negative arguments.</source>
          <target state="translated">すべての演算は2 ^ nを法として実行されます。nは型のビット数です。これの明らかでない結果の1つは、 &lt;code&gt;&lt;a href=&quot;prelude#v:negate&quot;&gt;negate&lt;/a&gt;&lt;/code&gt; が負の引数でエラーを発生させてはなら&lt;em&gt;ない&lt;/em&gt;ということです。</target>
        </trans-unit>
        <trans-unit id="0cb70b7dc62c8932f9a5fdafd462f49e1a9ac846" translate="yes" xml:space="preserve">
          <source>All data that is read will be decoded as UTF-8.</source>
          <target state="translated">読み込まれたデータはすべて UTF-8 としてデコードされます。</target>
        </trans-unit>
        <trans-unit id="63944b6a06201ae38dfb9a4d0c8e79dcd222ae47" translate="yes" xml:space="preserve">
          <source>All formats</source>
          <target state="translated">すべてのフォーマット</target>
        </trans-unit>
        <trans-unit id="3da05872e313e33621f92f71c99a716c25b4c06e" translate="yes" xml:space="preserve">
          <source>All marshalling between Haskell and a foreign language ultimately boils down to translating Haskell data structures into the binary representation of a corresponding data structure of the foreign language and vice versa. To code this marshalling in Haskell, it is necessary to manipulate primitive data types stored in unstructured memory blocks. The class &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; facilitates this manipulation on all types for which it is instantiated, which are the standard basic types of Haskell, the fixed size &lt;code&gt;Int&lt;/code&gt; types (&lt;code&gt;&lt;a href=&quot;data-int#t:Int8&quot;&gt;Int8&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-int#t:Int16&quot;&gt;Int16&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-int#t:Int32&quot;&gt;Int32&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-int#t:Int64&quot;&gt;Int64&lt;/a&gt;&lt;/code&gt;), the fixed size &lt;code&gt;Word&lt;/code&gt; types (&lt;code&gt;&lt;a href=&quot;data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt;), &lt;code&gt;&lt;a href=&quot;foreign-stableptr#t:StablePtr&quot;&gt;StablePtr&lt;/a&gt;&lt;/code&gt;, all types from &lt;a href=&quot;foreign-c-types&quot;&gt;Foreign.C.Types&lt;/a&gt;, as well as &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Haskellと外国語の間のすべてのマーシャリングは、最終的にはHaskellデータ構造を外国語の対応するデータ構造のバイナリ表現に、またはその逆に変換することになります。 Haskellでこのマーシャリングをコーディングするには、非構造化メモリブロックに格納されているプリミティブデータ型を操作する必要があります。クラス &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; は、インスタンス化されるすべての型（Haskellの標準の基本型、固定サイズの &lt;code&gt;Int&lt;/code&gt; 型（ &lt;code&gt;&lt;a href=&quot;data-int#t:Int8&quot;&gt;Int8&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-int#t:Int16&quot;&gt;Int16&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-int#t:Int32&quot;&gt;Int32&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-int#t:Int64&quot;&gt;Int64&lt;/a&gt;&lt;/code&gt; ）、固定サイズの &lt;code&gt;Word&lt;/code&gt; 型（ &lt;code&gt;&lt;a href=&quot;data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt; ）でこの操作を容易にします、 &lt;code&gt;&lt;a href=&quot;data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt; ）、 &lt;code&gt;&lt;a href=&quot;foreign-stableptr#t:StablePtr&quot;&gt;StablePtr&lt;/a&gt;&lt;/code&gt; 、すべての種類の&lt;a href=&quot;foreign-c-types&quot;&gt;Foreign.C.Types&lt;/a&gt;、など &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cffe145534643d9c1142d3476b91e58e7cb0edd7" translate="yes" xml:space="preserve">
          <source>All marshalling between Haskell and a foreign language ultimately boils down to translating Haskell data structures into the binary representation of a corresponding data structure of the foreign language and vice versa. To code this marshalling in Haskell, it is necessary to manipulate primitive data types stored in unstructured memory blocks. The class &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; facilitates this manipulation on all types for which it is instantiated, which are the standard basic types of Haskell, the fixed size &lt;code&gt;Int&lt;/code&gt; types (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int8&quot;&gt;Int8&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int16&quot;&gt;Int16&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int32&quot;&gt;Int32&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int64&quot;&gt;Int64&lt;/a&gt;&lt;/code&gt;), the fixed size &lt;code&gt;Word&lt;/code&gt; types (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt;), &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-stableptr#t:StablePtr&quot;&gt;StablePtr&lt;/a&gt;&lt;/code&gt;, all types from &lt;a href=&quot;../base-4.13.0.0/foreign-c-types&quot;&gt;Foreign.C.Types&lt;/a&gt;, as well as &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Haskellと外国語の間のすべてのマーシャリングは、最終的にはHaskellデータ構造を外国語の対応するデータ構造のバイナリ表現に、またはその逆に変換することになります。 Haskellでこのマーシャリングをコーディングするには、非構造化メモリブロックに格納されているプリミティブデータ型を操作する必要があります。クラス &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; は、インスタンス化されるすべての型（Haskellの標準の基本型、固定サイズの &lt;code&gt;Int&lt;/code&gt; 型（ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int8&quot;&gt;Int8&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int16&quot;&gt;Int16&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int32&quot;&gt;Int32&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int64&quot;&gt;Int64&lt;/a&gt;&lt;/code&gt; ）、固定サイズの &lt;code&gt;Word&lt;/code&gt; 型（ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt; ）でこの操作を容易にします、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt; ）、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-stableptr#t:StablePtr&quot;&gt;StablePtr&lt;/a&gt;&lt;/code&gt; 、すべての種類の&lt;a href=&quot;../base-4.13.0.0/foreign-c-types&quot;&gt;Foreign.C.Types&lt;/a&gt;、など &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8ce405ee1194b3ce0523423637671f91407135a7" translate="yes" xml:space="preserve">
          <source>All marshalling between Haskell and a foreign language ultimately boils down to translating Haskell data structures into the binary representation of a corresponding data structure of the foreign language and vice versa. To code this marshalling in Haskell, it is necessary to manipulate primitive data types stored in unstructured memory blocks. The class &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; facilitates this manipulation on all types for which it is instantiated, which are the standard basic types of Haskell, the fixed size &lt;code&gt;Int&lt;/code&gt; types (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int8&quot;&gt;Int8&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int16&quot;&gt;Int16&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int32&quot;&gt;Int32&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int64&quot;&gt;Int64&lt;/a&gt;&lt;/code&gt;), the fixed size &lt;code&gt;Word&lt;/code&gt; types (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt;), &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-stableptr#t:StablePtr&quot;&gt;StablePtr&lt;/a&gt;&lt;/code&gt;, all types from &lt;a href=&quot;../base-4.14.1.0/foreign-c-types&quot;&gt;Foreign.C.Types&lt;/a&gt;, as well as &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">All marshalling between Haskell and a foreign language ultimately boils down to translating Haskell data structures into the binary representation of a corresponding data structure of the foreign language and vice versa. To code this marshalling in Haskell, it is necessary to manipulate primitive data types stored in unstructured memory blocks. The class &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; facilitates this manipulation on all types for which it is instantiated, which are the standard basic types of Haskell, the fixed size &lt;code&gt;Int&lt;/code&gt; types ( &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int8&quot;&gt;Int8&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int16&quot;&gt;Int16&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int32&quot;&gt;Int32&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int64&quot;&gt;Int64&lt;/a&gt;&lt;/code&gt; ), the fixed size &lt;code&gt;Word&lt;/code&gt; types ( &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt; ), &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-stableptr#t:StablePtr&quot;&gt;StablePtr&lt;/a&gt;&lt;/code&gt; , all types from &lt;a href=&quot;../base-4.14.1.0/foreign-c-types&quot;&gt;Foreign.C.Types&lt;/a&gt;, as well as &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9a4bb5186ba5f9598821b21b590dc381adb80441" translate="yes" xml:space="preserve">
          <source>All marshalling between Haskell and a foreign language ultimately boils down to translating Haskell data structures into the binary representation of a corresponding data structure of the foreign language and vice versa. To code this marshalling in Haskell, it is necessary to manipulate primitive data types stored in unstructured memory blocks. The class &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; facilitates this manipulation on all types for which it is instantiated, which are the standard basic types of Haskell, the fixed size &lt;code&gt;Int&lt;/code&gt; types (&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-int#t:Int8&quot;&gt;Int8&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-int#t:Int16&quot;&gt;Int16&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-int#t:Int32&quot;&gt;Int32&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-int#t:Int64&quot;&gt;Int64&lt;/a&gt;&lt;/code&gt;), the fixed size &lt;code&gt;Word&lt;/code&gt; types (&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt;), &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-stableptr#t:StablePtr&quot;&gt;StablePtr&lt;/a&gt;&lt;/code&gt;, all types from &lt;a href=&quot;../base-4.15.0.0/foreign-c-types&quot;&gt;Foreign.C.Types&lt;/a&gt;, as well as &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Haskellと外国語の間のすべてのマーシャリングは、最終的にはHaskellデータ構造を外国語の対応するデータ構造のバイナリ表現に変換すること、またはその逆に変換することになります。このマーシャリングをHaskellでコーディングするには、非構造化メモリブロックに格納されているプリミティブデータ型を操作する必要があります。クラス &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; は、インスタンス化されるすべてのタイプでこの操作を容易にします。これは、Haskellの標準の基本タイプ、固定サイズの &lt;code&gt;Int&lt;/code&gt; タイプ（ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-int#t:Int8&quot;&gt;Int8&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-int#t:Int16&quot;&gt;Int16&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-int#t:Int32&quot;&gt;Int32&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-int#t:Int64&quot;&gt;Int64&lt;/a&gt;&lt;/code&gt; ）、固定サイズの &lt;code&gt;Word&lt;/code&gt; タイプ（ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt; )です。、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt; ）、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-stableptr#t:StablePtr&quot;&gt;StablePtr&lt;/a&gt;&lt;/code&gt; 、すべての種類の&lt;a href=&quot;../base-4.15.0.0/foreign-c-types&quot;&gt;Foreign.C.Types&lt;/a&gt;、など &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd19ff0d458c57b97295494e47d40838d1850a87" translate="yes" xml:space="preserve">
          <source>All of &lt;code&gt;M&lt;/code&gt;&amp;lsquo;s direct &lt;em&gt;safe imports&lt;/em&gt; are trusted by C</source>
          <target state="translated">&lt;code&gt;M&lt;/code&gt; の直接&lt;em&gt;安全なインポート&lt;/em&gt;はすべてCによって信頼されています</target>
        </trans-unit>
        <trans-unit id="1ef5ded9d2dd453646aebbde6bc1e77e258d91ac" translate="yes" xml:space="preserve">
          <source>All of &lt;code&gt;M&lt;/code&gt;&amp;lsquo;s direct imports are trusted by C</source>
          <target state="translated">&lt;code&gt;M&lt;/code&gt; のすべての直接インポートはCによって信頼されています</target>
        </trans-unit>
        <trans-unit id="ef4a7530bfdff42a708223449593af312fe8738b" translate="yes" xml:space="preserve">
          <source>All of &lt;code&gt;M&lt;/code&gt;&amp;lsquo;s direct safe imports are trusted by C</source>
          <target state="translated">&lt;code&gt;M&lt;/code&gt; の直接安全なインポートはすべてCによって信頼されています</target>
        </trans-unit>
        <trans-unit id="a5408f6679dcddf6cf10903e40871b1051e396da" translate="yes" xml:space="preserve">
          <source>All of &lt;code&gt;M&lt;/code&gt;&amp;rsquo;s direct &lt;em&gt;safe imports&lt;/em&gt; are trusted by C</source>
          <target state="translated">All of &lt;code&gt;M&lt;/code&gt; &amp;rsquo;s direct &lt;em&gt;safe imports&lt;/em&gt; are trusted by C</target>
        </trans-unit>
        <trans-unit id="e797d2c20c300f4f341eb1a8bbafe469bcca673e" translate="yes" xml:space="preserve">
          <source>All of &lt;code&gt;M&lt;/code&gt;&amp;rsquo;s direct imports are trusted by C</source>
          <target state="translated">All of &lt;code&gt;M&lt;/code&gt; &amp;rsquo;s direct imports are trusted by C</target>
        </trans-unit>
        <trans-unit id="1624840fe46a64a971c34a839de2cd6166d7cc15" translate="yes" xml:space="preserve">
          <source>All of &lt;code&gt;M&lt;/code&gt;&amp;rsquo;s direct safe imports are trusted by C</source>
          <target state="translated">All of &lt;code&gt;M&lt;/code&gt; &amp;rsquo;s direct safe imports are trusted by C</target>
        </trans-unit>
        <trans-unit id="d26ff1c50009409908cc1dc4184f2fa494a5bb4b" translate="yes" xml:space="preserve">
          <source>All of M&amp;rsquo;s direct imports are trusted by C</source>
          <target state="translated">Mのすべての直接インポートはCによって信頼されています</target>
        </trans-unit>
        <trans-unit id="6bbff3b9a2342fa6a7328cc64d9d064b0c59177f" translate="yes" xml:space="preserve">
          <source>All of the following are permissible:</source>
          <target state="translated">以下のすべてが認められます。</target>
        </trans-unit>
        <trans-unit id="07a302413e8b75e6da91c912ef456b8df520f40e" translate="yes" xml:space="preserve">
          <source>All of the functions fail on an empty queue.</source>
          <target state="translated">空のキューではすべての関数が失敗します。</target>
        </trans-unit>
        <trans-unit id="459b9c097e1f48899719948d13092addea8d683b" translate="yes" xml:space="preserve">
          <source>All of the heaps are defined to be non-empty, which speeds up the merge functions.</source>
          <target state="translated">すべてのヒープは空ではないと定義されているので、マージ関数を高速化することができます。</target>
        </trans-unit>
        <trans-unit id="a6d572146a4416cc21d822c5b9122cc28fefd404" translate="yes" xml:space="preserve">
          <source>All of the monad transformers except &lt;code&gt;&lt;a href=&quot;control-monad-trans-cont#v:ContT&quot;&gt;ContT&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad-trans-cont#v:SelectT&quot;&gt;SelectT&lt;/a&gt;&lt;/code&gt; are functors on the category of monads: in addition to defining a mapping of monads, they also define a mapping from transformations between base monads to transformations between transformed monads, called &lt;code&gt;map&lt;/code&gt;&lt;em&gt;XXX&lt;/em&gt;&lt;code&gt;T&lt;/code&gt;. Thus given a monad transformation &lt;code&gt;t :: M a -&amp;gt; N a&lt;/code&gt;, the combinator &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:mapStateT&quot;&gt;mapStateT&lt;/a&gt;&lt;/code&gt; constructs a monad transformation</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-trans-cont#v:ContT&quot;&gt;ContT&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;control-monad-trans-cont#v:SelectT&quot;&gt;SelectT&lt;/a&gt;&lt;/code&gt; を除くすべてのモナド変換子は、モナドのカテゴリのファンクターです。モナドのマッピングを定義するだけでなく、基本モナド間の変換から変換されたモナド間の変換へのマッピング（ &lt;code&gt;map&lt;/code&gt; &lt;em&gt;XXX &lt;/em&gt; &lt;code&gt;T&lt;/code&gt; と呼ばれます）も定義します。したがって、モナド変換 &lt;code&gt;t :: M a -&amp;gt; N a&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:mapStateT&quot;&gt;mapStateT&lt;/a&gt;&lt;/code&gt; &amp;gt; N aが与えられると、コンビネータmapStateTはモナド変換を構築します</target>
        </trans-unit>
        <trans-unit id="9ff4cf753e2cbc29b4117cb6c949a3dcfef8b652" translate="yes" xml:space="preserve">
          <source>All of the single-parameter functions for decoding bytestrings encoded in one of the Unicode Transformation Formats (UTF) operate in a &lt;em&gt;strict&lt;/em&gt; mode: each will throw an exception if given invalid input.</source>
          <target state="translated">Unicode変換フォーマット（UTF）の1つでエンコードされたバイト文字列をデコードするためのすべての単一パラメーター関数は、&lt;em&gt;厳密な&lt;/em&gt;モードで動作します。無効な入力が与えられると、それぞれが例外をスローします。</target>
        </trans-unit>
        <trans-unit id="c1146584e3cb478bf3265f7c6f72fec49b0f80d2" translate="yes" xml:space="preserve">
          <source>All of the type variables mentioned are bound by the class declaration, and none is locally quantified. Examples:</source>
          <target state="translated">言及されている型変数はすべてクラス宣言によって拘束されており、どれも局所的に定量化されていません。例を示します。</target>
        </trans-unit>
        <trans-unit id="d683e41b047bddec21ed6f58cd355ac5da8d7ca4" translate="yes" xml:space="preserve">
          <source>All on one line, &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; ignored and explicit new lines (&lt;code&gt;$$&lt;/code&gt;) are turned into spaces.</source>
          <target state="translated">すべて1行で、 &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; は無視され、明示的な改行（ &lt;code&gt;$$&lt;/code&gt; ）はスペースに変換されます。</target>
        </trans-unit>
        <trans-unit id="d04619ab3f8398e576bbe00b547d8d28a39b93a6" translate="yes" xml:space="preserve">
          <source>All on one line, &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; ignored and explicit new lines (&lt;code&gt;$$&lt;/code&gt;) are turned into spaces.</source>
          <target state="translated">すべて1行で、 &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; は無視され、明示的な改行（ &lt;code&gt;$$&lt;/code&gt; ）はスペースに変換されます。</target>
        </trans-unit>
        <trans-unit id="8734d083f84649d66cdee2cb45a731a5deb1ea31" translate="yes" xml:space="preserve">
          <source>All on one line, &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; ignored and explicit new lines (&lt;code&gt;$$&lt;/code&gt;) are turned into spaces.</source>
          <target state="translated">すべて1行で、 &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; は無視され、明示的な改行（ &lt;code&gt;$$&lt;/code&gt; ）はスペースに変換されます。</target>
        </trans-unit>
        <trans-unit id="1204352a7da2dcfde36198d2e6c39544ea4e7814" translate="yes" xml:space="preserve">
          <source>All other instances of &lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; behave as they do for &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">他のすべてのインスタンス &lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; 、彼らがそうであるように振る舞う &lt;code&gt;a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ccfa841ab2b631ea408bbbe074e7afe6c507835f" translate="yes" xml:space="preserve">
          <source>All other instances of &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; behave as they do for &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">他のすべてのインスタンス &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; 、彼らがそうであるように振る舞う &lt;code&gt;a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9bd92a106884eb39d74915dc625e8a2eeded96d9" translate="yes" xml:space="preserve">
          <source>All other type errors are reported immediately, and cannot be deferred; for example, an ill-kinded type signature, an instance declaration that is non-terminating or ill-formed, a type-family instance that does not obey the declared injectivity constraints, etc etc.</source>
          <target state="translated">他のすべての型エラーはすぐに報告され、延期することはできません。例えば、気の進まない型シグネチャ、終端していないインスタンス宣言、宣言された注入性制約に従わない型ファミリのインスタンスなどです。</target>
        </trans-unit>
        <trans-unit id="100083b95ff688c1be21a4288351839a84f80d50" translate="yes" xml:space="preserve">
          <source>All previously loaded modules, except package modules, are forgotten. The new set of modules is known as the target set. Note that &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt; can be used without any arguments to unload all the currently loaded modules and bindings.</source>
          <target state="translated">パッケージモジュールを除いて、以前にロードされたすべてのモジュールは忘れられます。新しいモジュールのセットは、ターゲットセットと呼ばれます。&lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt;を引数なしで使用して、現在ロードされているすべてのモジュールとバインディングをアンロードできることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6827c99a0f2492e5c37fe7d9438e06c6b6af14e1" translate="yes" xml:space="preserve">
          <source>All rules are implicitly exported from the module, and are therefore in force in any module that imports the module that defined the rule, directly or indirectly. (That is, if A imports B, which imports C, then C&amp;rsquo;s rules are in force when compiling A.) The situation is very similar to that for instance declarations.</source>
          <target state="translated">すべてのルールはモジュールから暗黙的にエクスポートされるため、ルールを定義したモジュールを直接または間接的にインポートするすべてのモジュールで有効です。（つまり、AがCをインポートするBをインポートする場合、Aのコンパイル時にCのルールが有効になります。）状況は、インスタンス宣言の場合と非常に似ています。</target>
        </trans-unit>
        <trans-unit id="7dbe1320fffcde509144ec4167268e2f24928720" translate="yes" xml:space="preserve">
          <source>All special processing is triggered by the &lt;code&gt;#&lt;/code&gt; operator. To output a literal &lt;code&gt;#&lt;/code&gt;, write it twice: &lt;code&gt;##&lt;/code&gt;. Inside string literals and comments &lt;code&gt;#&lt;/code&gt; characters are not processed.</source>
          <target state="translated">すべての特別な処理は、 &lt;code&gt;#&lt;/code&gt; 演算子によってトリガーされます。リテラル &lt;code&gt;#&lt;/code&gt; を出力するには、2度書きます： &lt;code&gt;##&lt;/code&gt; 。文字列リテラルとコメント内の &lt;code&gt;#&lt;/code&gt; 文字は処理されません。</target>
        </trans-unit>
        <trans-unit id="e754d606e9f071f8917ddf678a8be51138905754" translate="yes" xml:space="preserve">
          <source>All storage allocated by functions that allocate based on a &lt;em&gt;size in bytes&lt;/em&gt; must be sufficiently aligned for any of the basic foreign types that fits into the newly allocated storage. All storage allocated by functions that allocate based on a specific type must be sufficiently aligned for that type. Array allocation routines need to obey the same alignment constraints for each array element.</source>
          <target state="translated">&lt;em&gt;バイト単位のサイズに&lt;/em&gt;基づいて割り当てる関数によって割り当てられるすべてのストレージは、新しく割り当てられたストレージに適合するすべての基本的な外部型に対して十分に調整されている必要があります。特定のタイプに基づいて割り振る関数によって割り振られるすべてのストレージは、そのタイプに対して十分に位置合わせされている必要があります。配列割り当てルーチンは、各配列要素に対して同じ配置制約に従う必要があります。</target>
        </trans-unit>
        <trans-unit id="0f41064ade872ca46f2cce357b6f0f602bb6c9f2" translate="yes" xml:space="preserve">
          <source>All the &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt;, including a header.</source>
          <target state="translated">ヘッダーを含むすべての &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8191f2288d30ed04618d8a7f6947ee07d2f827e8" translate="yes" xml:space="preserve">
          <source>All the classes &lt;code&gt;Ci&lt;/code&gt; are standard.</source>
          <target state="translated">クラス &lt;code&gt;Ci&lt;/code&gt; はすべて標準です。</target>
        </trans-unit>
        <trans-unit id="27b13a294aaa6ffa8890f192e7f1dee01b865654" translate="yes" xml:space="preserve">
          <source>All the instance does is apply and remove the &lt;code&gt;newtype&lt;/code&gt; constructor. It is particularly galling that, since the constructor doesn&amp;rsquo;t appear at run-time, this instance declaration defines a dictionary which is &lt;em&gt;wholly equivalent&lt;/em&gt; to the &lt;code&gt;Int&lt;/code&gt; dictionary, only slower!</source>
          <target state="translated">インスタンスが行うのは、 &lt;code&gt;newtype&lt;/code&gt; コンストラクターを適用して削除することだけです。コンストラクターは実行時に表示されないため、このインスタンス宣言は、&lt;em&gt;完全&lt;/em&gt;に &lt;code&gt;Int&lt;/code&gt; 辞書&lt;em&gt;と同等の&lt;/em&gt;ディクショナリーを定義しますが、遅いだけです。</target>
        </trans-unit>
        <trans-unit id="3560dcf83b04004c14094e6b1d3cd4500f468374" translate="yes" xml:space="preserve">
          <source>All these features are described in the papers mentioned earlier.</source>
          <target state="translated">これらの特徴はすべて前述の論文に記載されている。</target>
        </trans-unit>
        <trans-unit id="9f289fff56ff75be648fe75fd05b62eefadc5aae" translate="yes" xml:space="preserve">
          <source>All these features are enabled by default if the &lt;a href=&quot;#extension-MonadComprehensions&quot;&gt;&lt;code&gt;MonadComprehensions&lt;/code&gt;&lt;/a&gt; extension is enabled. The types and more detailed examples on how to use comprehensions are explained in the previous chapters &lt;a href=&quot;#generalised-list-comprehensions&quot;&gt;Generalised (SQL-like) List Comprehensions&lt;/a&gt; and &lt;a href=&quot;#parallel-list-comprehensions&quot;&gt;Parallel List Comprehensions&lt;/a&gt;. In general you just have to replace the type &lt;code&gt;[a]&lt;/code&gt; with the type &lt;code&gt;Monad m =&amp;gt; m a&lt;/code&gt; for monad comprehensions.</source>
          <target state="translated">&lt;a href=&quot;#extension-MonadComprehensions&quot;&gt; &lt;code&gt;MonadComprehensions&lt;/code&gt; &lt;/a&gt;拡張機能が有効になっている場合、これらの機能はすべてデフォルトで有効になります。内包表記の使用方法のタイプとより詳細な例については、前の章「&lt;a href=&quot;#generalised-list-comprehensions&quot;&gt;一般化（SQLに似た）リスト&lt;/a&gt;内包表記」と「&lt;a href=&quot;#parallel-list-comprehensions&quot;&gt;並列リスト&lt;/a&gt;内包表記」で説明しています。一般に、モナド内包表記については、タイプ &lt;code&gt;[a]&lt;/code&gt; をタイプ &lt;code&gt;Monad m =&amp;gt; m a&lt;/code&gt; に置き換えるだけです。</target>
        </trans-unit>
        <trans-unit id="feb134ce7e85ca12d2afc3f255be965a242a95ce" translate="yes" xml:space="preserve">
          <source>All these features are enabled by default if the &lt;a href=&quot;#extension-MonadComprehensions&quot;&gt;&lt;code&gt;MonadComprehensions&lt;/code&gt;&lt;/a&gt; extension is enabled. The types and more detailed examples on how to use comprehensions are explained in the previous chapters &lt;a href=&quot;generalised_list_comprehensions#generalised-list-comprehensions&quot;&gt;Generalised (SQL-like) List Comprehensions&lt;/a&gt; and &lt;a href=&quot;parallel_list_comprehensions#parallel-list-comprehensions&quot;&gt;Parallel List Comprehensions&lt;/a&gt;. In general you just have to replace the type &lt;code&gt;[a]&lt;/code&gt; with the type &lt;code&gt;Monad m =&amp;gt; m a&lt;/code&gt; for monad comprehensions.</source>
          <target state="translated">&lt;a href=&quot;#extension-MonadComprehensions&quot;&gt; &lt;code&gt;MonadComprehensions&lt;/code&gt; &lt;/a&gt;拡張機能が有効になっている場合、これらの機能はすべてデフォルトで有効になっています。内包表記の種類と使用方法の詳細な例は、前の章の&lt;a href=&quot;generalised_list_comprehensions#generalised-list-comprehensions&quot;&gt;一般化（SQLのような）リスト&lt;/a&gt;内包表記と&lt;a href=&quot;parallel_list_comprehensions#parallel-list-comprehensions&quot;&gt;並列リスト&lt;/a&gt;内包表記で説明されています。一般に、モナド内包 &lt;code&gt;[a]&lt;/code&gt; では、タイプ[a]をタイプ &lt;code&gt;Monad m =&amp;gt; m a&lt;/code&gt; に置き換える必要があります。</target>
        </trans-unit>
        <trans-unit id="f320750508ae8a4bdfcecfb3e8588bc22cc54930" translate="yes" xml:space="preserve">
          <source>All these functions evaluate the message completely before printing it; so if the message is not fully defined, none of it will be printed.</source>
          <target state="translated">これらの関数はすべて、メッセージを印刷する前にメッセージを完全に評価します。</target>
        </trans-unit>
        <trans-unit id="6e55f75e6b6187e12dad6c83393f2395b07acab0" translate="yes" xml:space="preserve">
          <source>All these primitive data types and operations are exported by the library &lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/ghc-prim-0.7.0/GHC-Prim.html&quot;&gt;GHC.Prim&lt;/a&gt;. (This documentation is generated from the file &lt;code&gt;compiler/GHC/Builtin/primops.txt.pp&lt;/code&gt;.)</source>
          <target state="translated">これらのプリミティブデータ型と操作はすべて、ライブラリ&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/ghc-prim-0.7.0/GHC-Prim.html&quot;&gt;GHC.Prim&lt;/a&gt;によってエクスポートされます。（このドキュメントは、ファイル &lt;code&gt;compiler/GHC/Builtin/primops.txt.pp&lt;/code&gt; から生成されます。）</target>
        </trans-unit>
        <trans-unit id="fcd3e8296e242f3b3d9e914ad0a98eb399c9d926" translate="yes" xml:space="preserve">
          <source>All these primitive data types and operations are exported by the library &lt;code&gt;GHC.Prim&lt;/code&gt;, for which there is detailed online documentation &amp;lt;GHC.Prim.&amp;gt;. (This documentation is generated from the file &lt;code&gt;compiler/prelude/primops.txt.pp&lt;/code&gt;.)</source>
          <target state="translated">これらすべてのプリミティブデータタイプと操作は、詳細なオンラインドキュメント&amp;lt;GHC.Prim。&amp;gt;があるライブラリ &lt;code&gt;GHC.Prim&lt;/code&gt; によってエクスポートされます。（このドキュメントは、ファイル &lt;code&gt;compiler/prelude/primops.txt.pp&lt;/code&gt; から生成されます。）</target>
        </trans-unit>
        <trans-unit id="11d822b519b4d27d4c90f7025aa2f37e057b1573" translate="yes" xml:space="preserve">
          <source>All this applies to constructors declared using the syntax of &lt;a href=&quot;#existential-with-context&quot;&gt;Existentials and type classes&lt;/a&gt;. For example, the &lt;code&gt;NumInst&lt;/code&gt; data type above could equivalently be declared like this:</source>
          <target state="translated">これはすべて、&lt;a href=&quot;#existential-with-context&quot;&gt;Existentialsおよび型クラスの&lt;/a&gt;構文を使用して宣言されたコンストラクターに適用されます。たとえば、上記の &lt;code&gt;NumInst&lt;/code&gt; データ型は、次のように同等に宣言できます。</target>
        </trans-unit>
        <trans-unit id="9fd09b60db993145d9aa0ee7759554858065ea03" translate="yes" xml:space="preserve">
          <source>All this applies to constructors declared using the syntax of &lt;a href=&quot;existential_quantification#existential-with-context&quot;&gt;Existentials and type classes&lt;/a&gt;. For example, the &lt;code&gt;NumInst&lt;/code&gt; data type above could equivalently be declared like this:</source>
          <target state="translated">これはすべて、&lt;a href=&quot;existential_quantification#existential-with-context&quot;&gt;Existentialsと型クラスの&lt;/a&gt;構文を使用して宣言されたコンストラクターに適用されます。たとえば、上記の &lt;code&gt;NumInst&lt;/code&gt; データ型は、同等に次のように宣言できます。</target>
        </trans-unit>
        <trans-unit id="70df367f1e5c153af04770d26e6bb6e5662b24b1" translate="yes" xml:space="preserve">
          <source>All this behaviour contrasts with Haskell 98&amp;rsquo;s peculiar treatment of contexts on a data type declaration (Section 4.2.1 of the Haskell 98 Report). In Haskell 98 the definition</source>
          <target state="translated">このすべての動作は、Haskell 98のデータ型宣言におけるコンテキストの特殊な扱い（Haskell 98レポートのセクション4.2.1）と対照的です。Haskell 98での定義</target>
        </trans-unit>
        <trans-unit id="3d7f2d606f261a5fba2db68b6939910c2cd2ece4" translate="yes" xml:space="preserve">
          <source>All this looks quite promising; we have a class and a range of interesting implementations. Unfortunately, there are some serious problems with the class declaration. First, the empty function has an ambiguous type:</source>
          <target state="translated">このすべては非常に有望に見えます。クラスと興味深い実装の範囲があります。しかし、残念なことに、クラス宣言にはいくつかの深刻な問題があります。まず、空の関数の型が曖昧です。</target>
        </trans-unit>
        <trans-unit id="c67f8504ed498a898f1ab818b85763d53fddcf77" translate="yes" xml:space="preserve">
          <source>All three of these examples would compile without issue. On the other hand:</source>
          <target state="translated">これらの3つの例はすべて問題なくコンパイルできます。一方で</target>
        </trans-unit>
        <trans-unit id="9677956077fa96efb5b69b5a1ae7ad4b38e3313b" translate="yes" xml:space="preserve">
          <source>All types are classified as one of these classes: 32bit word, 64bit word, 32bit float, 64bit float, pointer.</source>
          <target state="translated">すべての型は、これらのクラスのいずれかに分類されます。32ビットワード、64ビットワード、32ビットフロート、64ビットフロート、ポインタ。</target>
        </trans-unit>
        <trans-unit id="057ac441b399eb9586ae68f5c1eb9f47b4178362" translate="yes" xml:space="preserve">
          <source>All unbound identifiers are treated as typed holes, &lt;em&gt;whether or not they start with an underscore&lt;/em&gt;. The only difference is in the error message:</source>
          <target state="translated">バインドされていない識別子はすべて&lt;em&gt;、アンダースコアで始まるかどうかに関係なく&lt;/em&gt;、型付きホールとして扱われ&lt;em&gt;ます&lt;/em&gt;。唯一の違いはエラーメッセージです。</target>
        </trans-unit>
        <trans-unit id="fd53184b2d10dc248ec6c9e2385390b9b65b470a" translate="yes" xml:space="preserve">
          <source>AllPhases</source>
          <target state="translated">AllPhases</target>
        </trans-unit>
        <trans-unit id="86266bd7ede6bd6ba8469405abe76d387f23e4e4" translate="yes" xml:space="preserve">
          <source>Allocate a block of memory and marshal a value into it (the combination of &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:malloc&quot;&gt;malloc&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;foreign-storable#v:poke&quot;&gt;poke&lt;/a&gt;&lt;/code&gt;). The size of the area allocated is determined by the &lt;code&gt;&lt;a href=&quot;foreign-storable#v:sizeOf&quot;&gt;sizeOf&lt;/a&gt;&lt;/code&gt; method from the instance of &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; for the appropriate type.</source>
          <target state="translated">メモリのブロックを割り当て、それに値をマーシャリングします（ &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:malloc&quot;&gt;malloc&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;foreign-storable#v:poke&quot;&gt;poke&lt;/a&gt;&lt;/code&gt; の組み合わせ）。割り当てられる領域のサイズは、適切なタイプの &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; のインスタンスからの &lt;code&gt;&lt;a href=&quot;foreign-storable#v:sizeOf&quot;&gt;sizeOf&lt;/a&gt;&lt;/code&gt; メソッドによって決定されます。</target>
        </trans-unit>
        <trans-unit id="bd8c715cc3db061ff535eb5c0524be9fac0fa2b8" translate="yes" xml:space="preserve">
          <source>Allocate a block of memory of the given number of bytes. The block of memory is sufficiently aligned for any of the basic foreign types that fits into a memory block of the allocated size.</source>
          <target state="translated">指定されたバイト数のメモリブロックを割り当てます。メモリブロックは、割り当てられたサイズのメモリブロックに収まる基本的な外部型のいずれかに対して十分に整列されています。</target>
        </trans-unit>
        <trans-unit id="48f50994b06d1d5671f516b19482a827582f3624" translate="yes" xml:space="preserve">
          <source>Allocate a block of memory that is sufficient to hold values of type &lt;code&gt;a&lt;/code&gt;. The size of the area allocated is determined by the &lt;code&gt;&lt;a href=&quot;foreign-storable#v:sizeOf&quot;&gt;sizeOf&lt;/a&gt;&lt;/code&gt; method from the instance of &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; for the appropriate type.</source>
          <target state="translated">タイプ &lt;code&gt;a&lt;/code&gt; の値を保持するのに十分なメモリのブロックを割り当てます。割り当てられる領域のサイズは、適切なタイプの &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; のインスタンスからの &lt;code&gt;&lt;a href=&quot;foreign-storable#v:sizeOf&quot;&gt;sizeOf&lt;/a&gt;&lt;/code&gt; メソッドによって決定されます。</target>
        </trans-unit>
        <trans-unit id="945eac0de6e1530ab37e60133056c31933f7e0c0" translate="yes" xml:space="preserve">
          <source>Allocate a fresh memory pool.</source>
          <target state="translated">新鮮なメモリプールを割り当てます。</target>
        </trans-unit>
        <trans-unit id="bf161f8d2ef1099082c0d5528c3c029bcc71adc8" translate="yes" xml:space="preserve">
          <source>Allocate a new buffer of the given size.</source>
          <target state="translated">指定したサイズの新しいバッファを割り当てます。</target>
        </trans-unit>
        <trans-unit id="797966dc728422a87321bee745962bf7b9b2105b" translate="yes" xml:space="preserve">
          <source>Allocate consecutive storage for a list of values in the given pool and marshal these values into it, terminating the end with the given marker.</source>
          <target state="translated">指定されたプール内の値のリストに連続したストレージを割り当て、これらの値をプール内に集約し、指定されたマーカーで終了します。</target>
        </trans-unit>
        <trans-unit id="f5067d72f839d0ca801793aa2138ada31d2918c8" translate="yes" xml:space="preserve">
          <source>Allocate consecutive storage for a list of values in the given pool and marshal these values into it.</source>
          <target state="translated">与えられたプール内の値のリストに連続したストレージを割り当て、これらの値をプールに集約します。</target>
        </trans-unit>
        <trans-unit id="4f94873e14ae1ca0d376362647204a8cbf513639" translate="yes" xml:space="preserve">
          <source>Allocate some memory and return a &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; to it. The memory will be released automatically when the &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; is discarded.</source>
          <target state="translated">メモリを割り当てて、 &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; を返します。メモリは、 &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; が破棄されると自動的に解放されます。</target>
        </trans-unit>
        <trans-unit id="adc10905359d2ad848031b0da8c89829871951ed" translate="yes" xml:space="preserve">
          <source>Allocate some memory and return a &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; to it. The memory will be released automatically when the &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; is discarded.</source>
          <target state="translated">メモリを割り当てて、 &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; を返します。メモリは、 &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; が破棄されると自動的に解放されます。</target>
        </trans-unit>
        <trans-unit id="d7a74b5000fcb22d46c63fd1403958268121cb0e" translate="yes" xml:space="preserve">
          <source>Allocate some memory and return a &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; to it. The memory will be released automatically when the &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; is discarded.</source>
          <target state="translated">メモリを割り当てて、 &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; を返します。メモリは、 &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; が破棄されると自動的に解放されます。</target>
        </trans-unit>
        <trans-unit id="18d53cff546da86cca443415642d6098c6313605" translate="yes" xml:space="preserve">
          <source>Allocate space for storable type in the given pool. The size of the area allocated is determined by the &lt;code&gt;&lt;a href=&quot;foreign-storable#v:sizeOf&quot;&gt;sizeOf&lt;/a&gt;&lt;/code&gt; method from the instance of &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; for the appropriate type.</source>
          <target state="translated">指定されたプール内の格納可能なタイプにスペースを割り当てます。割り当てられる領域のサイズは、適切なタイプの &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; のインスタンスからの &lt;code&gt;&lt;a href=&quot;foreign-storable#v:sizeOf&quot;&gt;sizeOf&lt;/a&gt;&lt;/code&gt; メソッドによって決定されます。</target>
        </trans-unit>
        <trans-unit id="d0faf0f0921366d35115d853c768adb58bbc217c" translate="yes" xml:space="preserve">
          <source>Allocate storage and marshal a storable value wrapped into a &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">ストレージを割り当て、 &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; にラップされた保存可能な値をマーシャリングします</target>
        </trans-unit>
        <trans-unit id="85a29b1e9713abbc38e1d1724333822128176095" translate="yes" xml:space="preserve">
          <source>Allocate storage for a value in the given pool and marshal the value into this storage.</source>
          <target state="translated">指定されたプール内の値にストレージを割り当て、その値をこのストレージにマーシャリングします。</target>
        </trans-unit>
        <trans-unit id="a751dea2f39999181b1d506f2ded5ae31093a057" translate="yes" xml:space="preserve">
          <source>Allocate storage for the given number of elements of a storable type (like &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:malloc&quot;&gt;malloc&lt;/a&gt;&lt;/code&gt;, but for multiple elements).</source>
          <target state="translated">格納可能な型の指定された数の要素にストレージを割り当てます（ &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:malloc&quot;&gt;malloc&lt;/a&gt;&lt;/code&gt; と同様ですが、複数の要素に対して）。</target>
        </trans-unit>
        <trans-unit id="b8bd206b599ec8ecb129ced0e29abca1ece50440" translate="yes" xml:space="preserve">
          <source>Allocate storage for the given number of elements of a storable type in the pool, but leave room for an extra element to signal the end of the array.</source>
          <target state="translated">プール内の格納可能なタイプの指定された数の要素にストレージを割り当てますが、アレイの終了を知らせるために余分な要素のためのスペースを残します。</target>
        </trans-unit>
        <trans-unit id="3c6502a8f26acdc89616720173572f6835f4395f" translate="yes" xml:space="preserve">
          <source>Allocate storage for the given number of elements of a storable type in the pool.</source>
          <target state="translated">プール内の格納可能なタイプの要素の指定された数のストレージを割り当てます。</target>
        </trans-unit>
        <trans-unit id="dfb0511a4ae80d311521dfea2fd5a589ea804b6a" translate="yes" xml:space="preserve">
          <source>Allocate the given number of bytes of storage in the pool.</source>
          <target state="translated">プール内のストレージの指定されたバイト数を割り当てます。</target>
        </trans-unit>
        <trans-unit id="74c31d0f81c37ba9952fac9ee09d5580d40e7044" translate="yes" xml:space="preserve">
          <source>Allocate the nursery from node-local memory.</source>
          <target state="translated">ノードローカルメモリから苗床を割り当てます。</target>
        </trans-unit>
        <trans-unit id="489efe43727a84928b21db7c885a4647eec79612" translate="yes" xml:space="preserve">
          <source>Allocating managed memory</source>
          <target state="translated">管理されたメモリの割り当て</target>
        </trans-unit>
        <trans-unit id="1b5c021aee14bea734803bc4262d3ac794a7f664" translate="yes" xml:space="preserve">
          <source>Allocation</source>
          <target state="translated">Allocation</target>
        </trans-unit>
        <trans-unit id="a371c9709f159b54fa290c4ef85af0337a88411e" translate="yes" xml:space="preserve">
          <source>Allocation accounting is accurate only to about 4Kbytes.</source>
          <target state="translated">割り当て会計は4Kバイト程度までしか正確にできません。</target>
        </trans-unit>
        <trans-unit id="672bb521be73595aa99b0bcb407ba5c8a04ff65e" translate="yes" xml:space="preserve">
          <source>Allocation counter and limit</source>
          <target state="translated">割当カウンタとリミット</target>
        </trans-unit>
        <trans-unit id="6be4e23bfb8b2d85b4d8e47ee554151801bbfd62" translate="yes" xml:space="preserve">
          <source>Allocation counter and limits</source>
          <target state="translated">割当カウンターと制限</target>
        </trans-unit>
        <trans-unit id="f863a7852bc37e781471622e1a75707f51a4b50b" translate="yes" xml:space="preserve">
          <source>Allocation counter and quota</source>
          <target state="translated">割当カウンターとクォータ</target>
        </trans-unit>
        <trans-unit id="6714f70908a1447bb325aa721caef6aa021fb67a" translate="yes" xml:space="preserve">
          <source>AllocationLimitExceeded</source>
          <target state="translated">AllocationLimitExceeded</target>
        </trans-unit>
        <trans-unit id="78fee5f8d19c1012e15c9cb754371db736ef10f0" translate="yes" xml:space="preserve">
          <source>AllocationStrategy</source>
          <target state="translated">AllocationStrategy</target>
        </trans-unit>
        <trans-unit id="1e0ddb13f2d7482f1d9d4401e43c0f7c159e3d27" translate="yes" xml:space="preserve">
          <source>Allow &lt;code&gt;#&lt;/code&gt; as a postfix modifier on identifiers.</source>
          <target state="translated">識別子の &lt;code&gt;#&lt;/code&gt; を後置修飾子として許可します。</target>
        </trans-unit>
        <trans-unit id="487b72f96ce687ab0a0c0c91a3747ce245eb86bd" translate="yes" xml:space="preserve">
          <source>Allow &lt;code&gt;do&lt;/code&gt; blocks and other constructs as function arguments.</source>
          <target state="translated">関数の引数として、 &lt;code&gt;do&lt;/code&gt; ブロックやその他の構成要素を許可します。</target>
        </trans-unit>
        <trans-unit id="f3d4d6a5ae1b8e8556bffe5a2051a8a7eeb9bcd1" translate="yes" xml:space="preserve">
          <source>Allow &lt;code&gt;do&lt;/code&gt; expressions, lambda expressions, etc. to be directly used as a function argument.</source>
          <target state="translated">許可 &lt;code&gt;do&lt;/code&gt; 直接関数の引数として使用するなどの表現、ラムダ式を、。</target>
        </trans-unit>
        <trans-unit id="57b2197ae6b5696247d5182d09e77a732fad1d01" translate="yes" xml:space="preserve">
          <source>Allow &lt;code&gt;forall&lt;/code&gt; quantifiers in constraints.</source>
          <target state="translated">制約内の &lt;code&gt;forall&lt;/code&gt; 数量詞を許可します。</target>
        </trans-unit>
        <trans-unit id="48fb284220c7e71266222e272e89501b5da2de4e" translate="yes" xml:space="preserve">
          <source>Allow all superclass constraints, including those that may result in non-termination of the typechecker.</source>
          <target state="translated">タイプチェッカの非終端になる可能性のあるものも含めて、すべてのスーパークラス制約を許可します。</target>
        </trans-unit>
        <trans-unit id="80eb231dd3933ab2efd3d5dfa5c44bae12bc9d69" translate="yes" xml:space="preserve">
          <source>Allow an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation to be deferred lazily. When passed an action of type &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt;&lt;code&gt;s&lt;/code&gt;&lt;code&gt;a&lt;/code&gt;, the action will only be performed when the value of &lt;code&gt;a&lt;/code&gt; is demanded.</source>
          <target state="translated">許可 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; の計算を遅延延期されます。タイプのアクション渡されると &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; &lt;code&gt;s&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; は、アクションは実行されますの値際に要求されています。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7a2ecf66e99906eb20d2eca046ddaa3ae040e446" translate="yes" xml:space="preserve">
          <source>Allow an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation to be deferred lazily. When passed an action of type &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt;&lt;code&gt;s&lt;/code&gt;&lt;code&gt;a&lt;/code&gt;, the action will only be performed when the value of &lt;code&gt;a&lt;/code&gt; is demanded.</source>
          <target state="translated">許可 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; の計算を遅延延期されます。タイプのアクション渡されると &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; &lt;code&gt;s&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; は、アクションは実行されますの値際に要求されています。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="257c67e3f1b7316fe3182000abf107e20bc8ca0d" translate="yes" xml:space="preserve">
          <source>Allow an &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation to be deferred lazily. When passed an action of type &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt;&lt;code&gt;s&lt;/code&gt;&lt;code&gt;a&lt;/code&gt;, the action will only be performed when the value of &lt;code&gt;a&lt;/code&gt; is demanded.</source>
          <target state="translated">許可 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; の計算を遅延延期されます。タイプのアクション渡されると &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; &lt;code&gt;s&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; は、アクションは実行されますの値際に要求されています。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1750d76ce07b95cdb172cc776a34f360d5d4cd29" translate="yes" xml:space="preserve">
          <source>Allow asynchronous exceptions to be raised even inside &lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt;, making the operation interruptible (see the discussion of &quot;Interruptible operations&quot; in &lt;code&gt;&lt;a href=&quot;control#v:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; の内部でも非同期例外が発生することを許可し、操作を割り込み可能にします（ &lt;code&gt;&lt;a href=&quot;control#v:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt; 「割り込み可能な操作」の説明を参照してください）。</target>
        </trans-unit>
        <trans-unit id="780a200a64ac9433b47b1da40e2581b24c295f40" translate="yes" xml:space="preserve">
          <source>Allow asynchronous exceptions to be raised even inside &lt;code&gt;&lt;a href=&quot;ghc-io#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt;, making the operation interruptible (see the discussion of &quot;Interruptible operations&quot; in &lt;code&gt;&lt;a href=&quot;control#v:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; の内部でも非同期例外が発生することを許可し、操作を割り込み可能にします（ &lt;code&gt;&lt;a href=&quot;control#v:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt; 「割り込み可能な操作」の説明を参照してください）。</target>
        </trans-unit>
        <trans-unit id="8baf535a4dbc587a727d88078ccbc03106a8d4ba" translate="yes" xml:space="preserve">
          <source>Allow automatic deriving of instances for the &lt;code&gt;Foldable&lt;/code&gt; typeclass.</source>
          <target state="translated">インスタンスを自動導出を許可する &lt;code&gt;Foldable&lt;/code&gt; 型クラス。</target>
        </trans-unit>
        <trans-unit id="4f96512299d9639cbf383164f1db522bd120f323" translate="yes" xml:space="preserve">
          <source>Allow automatic deriving of instances for the &lt;code&gt;Functor&lt;/code&gt; typeclass.</source>
          <target state="translated">&lt;code&gt;Functor&lt;/code&gt; タイプクラスのインスタンスの自動派生を許可します。</target>
        </trans-unit>
        <trans-unit id="cb4259796e51e2d950e57edd562f9cf8982dd300" translate="yes" xml:space="preserve">
          <source>Allow automatic deriving of instances for the &lt;code&gt;Generic&lt;/code&gt; typeclass.</source>
          <target state="translated">&lt;code&gt;Generic&lt;/code&gt; 型クラスのインスタンスの自動派生を許可します。</target>
        </trans-unit>
        <trans-unit id="a7632af3ddef7069071f3bf8a7c397be4ca59fcd" translate="yes" xml:space="preserve">
          <source>Allow automatic deriving of instances for the &lt;code&gt;Traversable&lt;/code&gt; typeclass.</source>
          <target state="translated">&lt;code&gt;Traversable&lt;/code&gt; 型クラスのインスタンスの自動派生を許可します。</target>
        </trans-unit>
        <trans-unit id="add95d26da022101d791b89213499080da94e3a9" translate="yes" xml:space="preserve">
          <source>Allow constant folding in case expressions that scrutinise some primops: For example,</source>
          <target state="translated">いくつかのプリモプスを精査する場合の表現で、一定の折りたたみを許可します。例えば</target>
        </trans-unit>
        <trans-unit id="934cc159b35ac28d99ae334c8a54aa36d7a7c39a" translate="yes" xml:space="preserve">
          <source>Allow constraints to quantify over types.</source>
          <target state="translated">制約が型を超えて定量化できるようにします。</target>
        </trans-unit>
        <trans-unit id="2ce51b30b9da5f59ff139ceec6637a831ee564b6" translate="yes" xml:space="preserve">
          <source>Allow contexts on &lt;code&gt;data&lt;/code&gt; types.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 型のコンテキストを許可します。</target>
        </trans-unit>
        <trans-unit id="eab095a3e387bb8b63300500e130636d41df289c" translate="yes" xml:space="preserve">
          <source>Allow defaulting to take place for more than just numeric classes.</source>
          <target state="translated">数値クラス以外のクラスでもデフォルト設定を行うことができるようにします。</target>
        </trans-unit>
        <trans-unit id="926119bf4ff3119fe5a37dc0cb8f3089e82d4ec6" translate="yes" xml:space="preserve">
          <source>Allow definition of empty &lt;code&gt;data&lt;/code&gt; types.</source>
          <target state="translated">空の &lt;code&gt;data&lt;/code&gt; 型の定義を許可します。</target>
        </trans-unit>
        <trans-unit id="36885bc6f326d61d2bc2d18c723dc0b2ce083841" translate="yes" xml:space="preserve">
          <source>Allow definition of functions expecting implicit parameters.</source>
          <target state="translated">暗黙のパラメータを期待する関数の定義を許可します。</target>
        </trans-unit>
        <trans-unit id="b8fdd0e51a265a2c590d00cb6abc3adad2684d61" translate="yes" xml:space="preserve">
          <source>Allow definition of record types with identically-named fields.</source>
          <target state="translated">同名のフィールドを持つレコードタイプの定義を許可する。</target>
        </trans-unit>
        <trans-unit id="726294c3f294ef13dd773189e75ae54c6d6e3bbd" translate="yes" xml:space="preserve">
          <source>Allow definition of type class instances for type synonyms.</source>
          <target state="translated">型同義語のための型クラスインスタンスの定義を許可する。</target>
        </trans-unit>
        <trans-unit id="7f2a1ee40ed67cae653a504bd6f3545fe705b983" translate="yes" xml:space="preserve">
          <source>Allow definition of type class instances with arbitrary nested types in the instance head.</source>
          <target state="translated">インスタンスヘッドに任意の入れ子になった型を持つ型クラスインスタンスの定義を許可します。</target>
        </trans-unit>
        <trans-unit id="86966622a20e13b1ac31de8f45367c263a8977cf" translate="yes" xml:space="preserve">
          <source>Allow deriving instances of standard type classes for empty data types.</source>
          <target state="translated">空のデータ型のための標準型クラスのインスタンスを導出できるようにします。</target>
        </trans-unit>
        <trans-unit id="60943beab02466a2c26e0ab7a51efa95c6e2a7fe" translate="yes" xml:space="preserve">
          <source>Allow empty case alternatives.</source>
          <target state="translated">空文字の代替案を許可します。</target>
        </trans-unit>
        <trans-unit id="025c491c399c735d766d5a9892dd9e6ee33b7e08" translate="yes" xml:space="preserve">
          <source>Allow empty case expressions.</source>
          <target state="translated">空の大文字小文字の表現を許可します。</target>
        </trans-unit>
        <trans-unit id="6c84f72d8d262e69d1f9faa234eff6fdf37f2369" translate="yes" xml:space="preserve">
          <source>Allow existentially quantified type variables in types.</source>
          <target state="translated">型の中で実在的に定量化された型変数を許可します。</target>
        </trans-unit>
        <trans-unit id="1ab319c3adc39803249aca0e24d447b1fb428579" translate="yes" xml:space="preserve">
          <source>Allow explicit kind signatures on type variables.</source>
          <target state="translated">型変数での明示的な型署名を許可します。</target>
        </trans-unit>
        <trans-unit id="17fa756b705f1fa52e127048ab38d27914f60aba" translate="yes" xml:space="preserve">
          <source>Allow functional dependency annotations on type families. This allows one to define injective type families.</source>
          <target state="translated">型ファミリーに対する機能依存性アノテーションを許可します。これにより、注入的型ファミリーを定義できるようになります。</target>
        </trans-unit>
        <trans-unit id="6eb8b184e2bcabb5b3fa790e938afe5ac1becfb4" translate="yes" xml:space="preserve">
          <source>Allow impredicative polymorphic types.</source>
          <target state="translated">不明確な多相型を許可する。</target>
        </trans-unit>
        <trans-unit id="2433b80c1b9d57252941872fdc1b781f2a3699e6" translate="yes" xml:space="preserve">
          <source>Allow kind polymorphic types.</source>
          <target state="translated">親切な多相型を許可します。</target>
        </trans-unit>
        <trans-unit id="cdff7073df11b6e1c05a0eceb6acaa80701d67af" translate="yes" xml:space="preserve">
          <source>Allow multiple &lt;code&gt;deriving&lt;/code&gt;, each optionally qualified with a &lt;em&gt;strategy&lt;/em&gt;.</source>
          <target state="translated">複数の &lt;code&gt;deriving&lt;/code&gt; 許可し、それぞれがオプションで&lt;em&gt;戦略で&lt;/em&gt;修飾されます。</target>
        </trans-unit>
        <trans-unit id="76ba8a634a12bd3f74b9359ac050a7de5e913037" translate="yes" xml:space="preserve">
          <source>Allow naming of wildcards (e.g. &lt;code&gt;_x&lt;/code&gt;) in type signatures.</source>
          <target state="translated">型シグネチャでワイルドカード（例： &lt;code&gt;_x&lt;/code&gt; ）の命名を許可します。</target>
        </trans-unit>
        <trans-unit id="70463e61ddc2770c5bfd923aebb592b3ba442123" translate="yes" xml:space="preserve">
          <source>Allow nested contexts to be at the same indentation level as its enclosing context.</source>
          <target state="translated">入れ子になっているコンテキストが、それを囲むコンテキストと同じインデントレベルであることを許可します。</target>
        </trans-unit>
        <trans-unit id="a24b90b3b696d68b4a53058736b07d9593258864" translate="yes" xml:space="preserve">
          <source>Allow other process to set Window to Foreground by using &lt;code&gt;&lt;a href=&quot;graphics-win32-window-foregroundwindow#v:setForegroundWindow&quot;&gt;setForegroundWindow&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">他のプロセスが &lt;code&gt;&lt;a href=&quot;graphics-win32-window-foregroundwindow#v:setForegroundWindow&quot;&gt;setForegroundWindow&lt;/a&gt;&lt;/code&gt; 関数を使用してウィンドウをフォアグラウンドに設定できるようにします。</target>
        </trans-unit>
        <trans-unit id="3466dbeb7cfb661d1b3d5d9ae06ef44c39d689be" translate="yes" xml:space="preserve">
          <source>Allow parallel list comprehension syntax.</source>
          <target state="translated">並列リスト内包構文を許可します。</target>
        </trans-unit>
        <trans-unit id="3ed92111f1838c96b6c033cdfe95611654ed8c96" translate="yes" xml:space="preserve">
          <source>Allow promotion of data types to kind level.</source>
          <target state="translated">データ型の種類レベルへの昇格を許可する。</target>
        </trans-unit>
        <trans-unit id="260dca80fe27608e688cf5033c080a2cfba5b239" translate="yes" xml:space="preserve">
          <source>Allow role annotation syntax.</source>
          <target state="translated">ロールアノテーション構文を許可します。</target>
        </trans-unit>
        <trans-unit id="87a0f4cf411c10836ab0efbb3303960a1c45e4a3" translate="yes" xml:space="preserve">
          <source>Allow the compiler to apply rewrite rules to the source program.</source>
          <target state="translated">コンパイラがソース プログラムに書き換えルールを適用できるようにします。</target>
        </trans-unit>
        <trans-unit id="6b09bb1ac28b5b0c583dc8ebf98fba2849116608" translate="yes" xml:space="preserve">
          <source>Allow the compiler to automatically choose between identically-named record selectors based on type (if the choice is unambiguous).</source>
          <target state="translated">コンパイラがタイプに基づいて同名のレコードセレクタを自動的に選択できるようにします (選択が曖昧でない場合)。</target>
        </trans-unit>
        <trans-unit id="83c47b742b143b98b73e92a9a5de1c9e32c641ec" translate="yes" xml:space="preserve">
          <source>Allow the definition of pattern synonyms.</source>
          <target state="translated">パターンの同義語の定義を許可する。</target>
        </trans-unit>
        <trans-unit id="fe2a8646e41c100c7ad5651319a6e065e997f85a" translate="yes" xml:space="preserve">
          <source>Allow the definition of typeclasses with more than one parameter.</source>
          <target state="translated">複数のパラメータを持つ型クラスの定義を許可します。</target>
        </trans-unit>
        <trans-unit id="d185ff37afe97c8a5c9c099b699c25563f19c7b7" translate="yes" xml:space="preserve">
          <source>Allow the result of an &lt;code&gt;&lt;a href=&quot;control-monad-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation to be used (lazily) inside the computation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 計算の結果を計算内で（遅延的に）使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="ce75fe6b08dfb2e2c5aeb7a05bc37771108792fd" translate="yes" xml:space="preserve">
          <source>Allow the result of an &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation to be used (lazily) inside the computation. Note that if &lt;code&gt;f&lt;/code&gt; is strict, &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#v:fixST&quot;&gt;fixST&lt;/a&gt; f = _|_&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 計算の結果を計算内で（遅延的に）使用できるようにします。 &lt;code&gt;f&lt;/code&gt; が厳密な場合、 &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#v:fixST&quot;&gt;fixST&lt;/a&gt; f = _|_&lt;/code&gt; ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="71db9c7ef93f554ac579b40d6689938982ec9dda" translate="yes" xml:space="preserve">
          <source>Allow the result of an &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation to be used (lazily) inside the computation. Note that if &lt;code&gt;f&lt;/code&gt; is strict, &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#v:fixST&quot;&gt;fixST&lt;/a&gt; f = _|_&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 計算の結果を計算内で（遅延的に）使用できるようにします。 &lt;code&gt;f&lt;/code&gt; が厳密な場合、 &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#v:fixST&quot;&gt;fixST&lt;/a&gt; f = _|_&lt;/code&gt; ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="67e53378677db7eb448650e4848cf3af89d1c7b5" translate="yes" xml:space="preserve">
          <source>Allow the result of an &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation to be used (lazily) inside the computation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 計算の結果を計算内で（遅延的に）使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="a25778334adcda643e0a1777a4a1308851238bc9" translate="yes" xml:space="preserve">
          <source>Allow the use and definition of types with operator names.</source>
          <target state="translated">演算子名を持つ型の使用と定義を許可します。</target>
        </trans-unit>
        <trans-unit id="ffa6e2a8241cb1d89e5bfc36b1a5b18d2b5d635a" translate="yes" xml:space="preserve">
          <source>Allow the use of GADT syntax in data type definitions (but not GADTs themselves; for this see &lt;a href=&quot;#extension-GADTs&quot;&gt;&lt;code&gt;GADTs&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">データ型定義でGADT構文の使用を許可します（;この参照のためではなく、自分自身をGADTsない&lt;a href=&quot;#extension-GADTs&quot;&gt; &lt;code&gt;GADTs&lt;/code&gt; &lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="4252aea65ec49612e55dd6f6e924842c8bdd89da" translate="yes" xml:space="preserve">
          <source>Allow the use of GADT syntax in data type definitions (but not GADTs themselves; for this see &lt;a href=&quot;gadt#extension-GADTs&quot;&gt;&lt;code&gt;GADTs&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">データ型定義でGADT構文の使用を許可します（ただし、GADT自体は許可しません。これについては&lt;a href=&quot;gadt#extension-GADTs&quot;&gt; &lt;code&gt;GADTs&lt;/code&gt; &lt;/a&gt;参照してください）。</target>
        </trans-unit>
        <trans-unit id="59b4b3836b0ad08f877b34af9e4fa8b8a8d4a012" translate="yes" xml:space="preserve">
          <source>Allow the use of binary notation in integer literals.</source>
          <target state="translated">整数リテラルでのバイナリ表記の使用を許可します。</target>
        </trans-unit>
        <trans-unit id="efcd29c7bce33303e5d32e6ccbc57335b0acff65" translate="yes" xml:space="preserve">
          <source>Allow the use of complex constraints in class declaration contexts.</source>
          <target state="translated">クラス宣言コンテキストでの複雑な制約の使用を許可します。</target>
        </trans-unit>
        <trans-unit id="702e6903368de34c7b00d4d1faab5cc980b6ff20" translate="yes" xml:space="preserve">
          <source>Allow the use of floating-point literal syntax for integral types.</source>
          <target state="translated">積分型に浮動小数点リテラル構文を使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="2f2df53ac2aa65699d533256ce56f3e679075bdf" translate="yes" xml:space="preserve">
          <source>Allow the use of lambda-case syntax.</source>
          <target state="translated">ラムダケース構文の使用を許可します。</target>
        </trans-unit>
        <trans-unit id="76a7a3b4a067b229370029d02bfb2c0e97e8bc7f" translate="yes" xml:space="preserve">
          <source>Allow the use of multi-way-&lt;code&gt;if&lt;/code&gt; syntax.</source>
          <target state="translated">multi-way- &lt;code&gt;if&lt;/code&gt; 構文の使用を許可します。</target>
        </trans-unit>
        <trans-unit id="4acbbed0487deb8857b5f7e688836829f142c6f1" translate="yes" xml:space="preserve">
          <source>Allow the use of package-qualified &lt;code&gt;import&lt;/code&gt; syntax.</source>
          <target state="translated">パッケージ修飾された &lt;code&gt;import&lt;/code&gt; 構文の使用を許可します。</target>
        </trans-unit>
        <trans-unit id="eea333a314c924e9102b9616473c6ae74d1b2886" translate="yes" xml:space="preserve">
          <source>Allow the use of post-fix operators</source>
          <target state="translated">ポストフィックス演算子の使用を許可する</target>
        </trans-unit>
        <trans-unit id="86a9c510a8bddeadb8d33b32c38ba64ebef29791" translate="yes" xml:space="preserve">
          <source>Allow the use of qualified &lt;code&gt;do&lt;/code&gt; notation.</source>
          <target state="translated">修飾された &lt;code&gt;do&lt;/code&gt; 表記の使用を許可します。</target>
        </trans-unit>
        <trans-unit id="adb08d203af69b5b4cd4dd423b7318efffc8b20f" translate="yes" xml:space="preserve">
          <source>Allow the use of recursive &lt;code&gt;do&lt;/code&gt; notation.</source>
          <target state="translated">再帰的な &lt;code&gt;do&lt;/code&gt; 表記の使用を許可します。</target>
        </trans-unit>
        <trans-unit id="b0029babcf620375a925cb0f309e07f9eef805a4" translate="yes" xml:space="preserve">
          <source>Allow the use of stand-alone &lt;code&gt;deriving&lt;/code&gt; declarations.</source>
          <target state="translated">スタンドアロンの &lt;code&gt;deriving&lt;/code&gt; 宣言の使用を許可します。</target>
        </trans-unit>
        <trans-unit id="6ffc26d958cddfc3a794521475014c76922cd906" translate="yes" xml:space="preserve">
          <source>Allow the use of standalone kind signatures.</source>
          <target state="translated">スタンドアロンの親切な署名の使用を許可します。</target>
        </trans-unit>
        <trans-unit id="86686087092ab757a3c44071e8cdb958a2e740ab" translate="yes" xml:space="preserve">
          <source>Allow the use of tuple section syntax</source>
          <target state="translated">タプルセクション構文の使用を許可する</target>
        </trans-unit>
        <trans-unit id="f62761563b5f41d61ca0ecbb5ad968019d4409d7" translate="yes" xml:space="preserve">
          <source>Allow the use of type application syntax.</source>
          <target state="translated">型アプリケーション構文の使用を許可します。</target>
        </trans-unit>
        <trans-unit id="5675777ef0f98250d6e550ff440d842beeff404c" translate="yes" xml:space="preserve">
          <source>Allow the use of underscores in numeric literals.</source>
          <target state="translated">数字リテラルでのアンダースコアの使用を許可する。</target>
        </trans-unit>
        <trans-unit id="eee4b36605984e0b63f2119e25dc26be8151e070" translate="yes" xml:space="preserve">
          <source>Allow the use of wildcards in record construction and pattern matching.</source>
          <target state="translated">レコード構築やパターンマッチングでのワイルドカードの使用を許可します。</target>
        </trans-unit>
        <trans-unit id="1a6687c47ecd5f08e5cbe5a2d433f777d1b2ba65" translate="yes" xml:space="preserve">
          <source>Allow the user to write ambiguous types, and the type inference engine to infer them.</source>
          <target state="translated">ユーザーが曖昧な型を書き、型推論エンジンがそれを推論できるようにします。</target>
        </trans-unit>
        <trans-unit id="86a368ced00c7e3c3b92de7fbdde36c04126fbd7" translate="yes" xml:space="preserve">
          <source>Allow turning known into unknown calls while performing late lambda lifting.</source>
          <target state="translated">後半のラムダリフティングを実行している間に、既知のコールを未知のコールに変換できるようにします。</target>
        </trans-unit>
        <trans-unit id="3cbe6d10b7f1a1883fd95b6bb21627c693dfd0bb" translate="yes" xml:space="preserve">
          <source>Allow turning known into unknown calls while performing late lambda lifting. This is deemed non-beneficial, so it&amp;rsquo;s off by default.</source>
          <target state="translated">遅いラムダリフティングの実行中に、既知のコールを不明なコールに変えることを許可します。これは有益ではないと見なされるため、デフォルトではオフになっています。</target>
        </trans-unit>
        <trans-unit id="274c2026d3d9723dc92cd98f7d9326abfd5773f8" translate="yes" xml:space="preserve">
          <source>Allow type signatures for members in instance definitions.</source>
          <target state="translated">インスタンス定義でメンバーの型署名を許可します。</target>
        </trans-unit>
        <trans-unit id="da5bb70ccf69edfc067bb0ecac09b8b7fa946e39" translate="yes" xml:space="preserve">
          <source>Allow type signatures which appear that they would result in an unusable binding.</source>
          <target state="translated">使用不可能なバインディングになるように見える型署名を許可します。</target>
        </trans-unit>
        <trans-unit id="7f9ebd8bc90d2c97f8f8af6055daef8a66d58b11" translate="yes" xml:space="preserve">
          <source>Allow types of arbitrary rank.</source>
          <target state="translated">任意のランクのタイプを許可します。</target>
        </trans-unit>
        <trans-unit id="72c06cac8ca4e2cc8c6349ed8e7e17158f9a5bef" translate="yes" xml:space="preserve">
          <source>Allow types of kind &lt;code&gt;Constraint&lt;/code&gt; to be used in contexts.</source>
          <target state="translated">種類の &lt;code&gt;Constraint&lt;/code&gt; タイプをコンテキストで使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="a7e55900edd38daa3e986afd90affccc2a45f441" translate="yes" xml:space="preserve">
          <source>Allow use and definition of indexed type and data families.</source>
          <target state="translated">インデックス化された型とデータファミリの使用と定義を許可します。</target>
        </trans-unit>
        <trans-unit id="3b140d99bb4b6d5ef2bf11c89c4fa48c5d311a8e" translate="yes" xml:space="preserve">
          <source>Allow use and definition of type classes with no parameters. This extension has been replaced by &lt;a href=&quot;multi_param_type_classes#extension-MultiParamTypeClasses&quot;&gt;&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パラメータなしで型クラスの使用と定義を許可します。この拡張機能は&lt;a href=&quot;multi_param_type_classes#extension-MultiParamTypeClasses&quot;&gt; &lt;code&gt;MultiParamTypeClasses&lt;/code&gt; に&lt;/a&gt;置き換えられました。</target>
        </trans-unit>
        <trans-unit id="6e40b71ea659cf26b3075e17e0c63e65704ae662" translate="yes" xml:space="preserve">
          <source>Allow use of &lt;code&gt;Applicative&lt;/code&gt;&lt;code&gt;do&lt;/code&gt; notation.</source>
          <target state="translated">&lt;code&gt;Applicative&lt;/code&gt; &lt;code&gt;do&lt;/code&gt; 表記の使用を許可します。</target>
        </trans-unit>
        <trans-unit id="9bed755b4d0a566202ee360d2e8141648215487c" translate="yes" xml:space="preserve">
          <source>Allow use of Generalised Algebraic Data Types (GADTs).</source>
          <target state="translated">一般化された代数データ型(GADT)の使用を許可します。</target>
        </trans-unit>
        <trans-unit id="b42306fa5c185a7862be6bb52526be30dbac6894" translate="yes" xml:space="preserve">
          <source>Allow use of any typeclass in &lt;code&gt;deriving&lt;/code&gt; clauses.</source>
          <target state="translated">&lt;code&gt;deriving&lt;/code&gt; 句での任意の型クラスの使用を許可します。</target>
        </trans-unit>
        <trans-unit id="5a457c798a55fb26f0dd47dc4032be39a59a6341" translate="yes" xml:space="preserve">
          <source>Allow use of bang pattern syntax.</source>
          <target state="translated">バングパターン構文の使用を許可する。</target>
        </trans-unit>
        <trans-unit id="c23bf1d512a631794fb404638276aacd4f32df67" translate="yes" xml:space="preserve">
          <source>Allow use of functional dependencies in class declarations.</source>
          <target state="translated">クラス宣言での機能依存関係の使用を許可する。</target>
        </trans-unit>
        <trans-unit id="2d060a642a2f52d17e449b4e275108c16d94164a" translate="yes" xml:space="preserve">
          <source>Allow use of generalised list (SQL-like) comprehension syntax. This introduces the &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;by&lt;/code&gt;, and &lt;code&gt;using&lt;/code&gt; keywords.</source>
          <target state="translated">一般化されたリスト（SQLのような）内包構文の使用を許可します。これにより、 &lt;code&gt;group&lt;/code&gt; 、 &lt;code&gt;by&lt;/code&gt; 、および &lt;code&gt;using&lt;/code&gt; キーワードが導入されます。</target>
        </trans-unit>
        <trans-unit id="6416480874a524bb16d12732baf7a1a42b48283b" translate="yes" xml:space="preserve">
          <source>Allow use of record puns.</source>
          <target state="translated">記録的なダジャレの使用を許可する。</target>
        </trans-unit>
        <trans-unit id="62089014435f225ba326e9329061e5e4a53f0bb5" translate="yes" xml:space="preserve">
          <source>Allow use of static pointer syntax.</source>
          <target state="translated">静的ポインタ構文の使用を許可します。</target>
        </trans-unit>
        <trans-unit id="8f3abc6ee81a5c4909fa0b404e4d5cc274c88e29" translate="yes" xml:space="preserve">
          <source>Allow use of the &lt;code&gt;forall&lt;/code&gt; keyword in places where universal quantification is implicit.</source>
          <target state="translated">普遍的な数量化が暗黙的に行われる場所で &lt;code&gt;forall&lt;/code&gt; キーワードの使用を許可します。</target>
        </trans-unit>
        <trans-unit id="f830fe1b81f5dd2916e893293dc917cf10ac1a5f" translate="yes" xml:space="preserve">
          <source>Allow use of the Haskell foreign function interface.</source>
          <target state="translated">Haskellの外部関数インタフェースの使用を許可します。</target>
        </trans-unit>
        <trans-unit id="d2ec09e108221e720d271bb74180facf527b037f" translate="yes" xml:space="preserve">
          <source>Allow use of view pattern syntax.</source>
          <target state="translated">ビューパターン構文の使用を許可します。</target>
        </trans-unit>
        <trans-unit id="a28bc70794bb29c8fd92ff3803dba6b69736ec2e" translate="yes" xml:space="preserve">
          <source>Allow users to invoke a finalizer promptly if they know that the foreign pointer is unreachable, i.e. &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:finalizeForeignPtr&quot;&gt;finalizeForeignPtr&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">外部ポインターに到達できないことがわかっている場合、つまり &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:finalizeForeignPtr&quot;&gt;finalizeForeignPtr&lt;/a&gt;&lt;/code&gt; の場合、ユーザーがファイナライザーをすぐに呼び出せるようにします。</target>
        </trans-unit>
        <trans-unit id="d8d0040f1860796d1680868b0c0c97a27e733ecd" translate="yes" xml:space="preserve">
          <source>Allow worker-wrapper to convert a function closure into a thunk if the function does not use any of its arguments. Off by default.</source>
          <target state="translated">関数がその引数のどれも使わない場合に、ワーカーラッパーが関数のクロージャを thunk に変換することを許可します。デフォルトでは Off です。</target>
        </trans-unit>
        <trans-unit id="0bf61d77eeec666128b4e93e100c46e62621a2b9" translate="yes" xml:space="preserve">
          <source>Allow writing floating point literals using hexadecimal notation.</source>
          <target state="translated">16進数表記を使用して浮動小数点リテラルを書けるようにしました。</target>
        </trans-unit>
        <trans-unit id="44b76e5dbcac70fa19335f3f6dd1767846c2ae45" translate="yes" xml:space="preserve">
          <source>AllowAmbiguousTypes</source>
          <target state="translated">AllowAmbiguousTypes</target>
        </trans-unit>
        <trans-unit id="f568f29db39d6daee9c168b5db2b40a0f82b6e78" translate="yes" xml:space="preserve">
          <source>Allows the definition of default method signatures in class definitions.</source>
          <target state="translated">クラス定義におけるデフォルトのメソッドシグネチャの定義を可能にします。</target>
        </trans-unit>
        <trans-unit id="39a8bda3c1c817a2744fbe48c428dd732e29b994" translate="yes" xml:space="preserve">
          <source>Allows the definition of further constraints on individual class methods.</source>
          <target state="translated">個々のクラスメソッドに対するさらなる制約の定義を可能にします。</target>
        </trans-unit>
        <trans-unit id="795662519537fb732dd1a2476e8a6962c0c19569" translate="yes" xml:space="preserve">
          <source>Allows the use definition of type classes with no parameters. This extension has been replaced by &lt;a href=&quot;#extension-MultiParamTypeClasses&quot;&gt;&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パラメータなしの型クラスの使用定義を許可します。この拡張機能は&lt;a href=&quot;#extension-MultiParamTypeClasses&quot;&gt; &lt;code&gt;MultiParamTypeClasses&lt;/code&gt; に&lt;/a&gt;置き換えられました。</target>
        </trans-unit>
        <trans-unit id="2018e3c7850e7133b41fccedea329900b1f4d76e" translate="yes" xml:space="preserve">
          <source>Alone</source>
          <target state="translated">Alone</target>
        </trans-unit>
        <trans-unit id="ac58ae5ab26ea9f98150373e68429bafad7728e6" translate="yes" xml:space="preserve">
          <source>Along with traverseMaybeMissing, witnesses the isomorphism between &lt;code&gt;WhenMissing f k x y&lt;/code&gt; and &lt;code&gt;k -&amp;gt; x -&amp;gt; f (Maybe y)&lt;/code&gt;.</source>
          <target state="translated">traverseMaybeMissingと共に、 &lt;code&gt;WhenMissing f k x y&lt;/code&gt; と &lt;code&gt;k -&amp;gt; x -&amp;gt; f (Maybe y)&lt;/code&gt; 間の同型性を目撃します。</target>
        </trans-unit>
        <trans-unit id="7eaf4e6487782093547b308bb962d31222393a9b" translate="yes" xml:space="preserve">
          <source>Along with traverseMaybeMissing, witnesses the isomorphism between &lt;code&gt;WhenMissing f x y&lt;/code&gt; and &lt;code&gt;Key -&amp;gt; x -&amp;gt; f (Maybe y)&lt;/code&gt;.</source>
          <target state="translated">traverseMaybeMissingとともに、 &lt;code&gt;WhenMissing f x y&lt;/code&gt; とKey- &lt;code&gt;Key -&amp;gt; x -&amp;gt; f (Maybe y)&lt;/code&gt; 間の同型性を目撃します。</target>
        </trans-unit>
        <trans-unit id="fceb538d6e1da23d3f3babb9155dbc45ee7239e4" translate="yes" xml:space="preserve">
          <source>Along with zipWithMaybeAMatched, witnesses the isomorphism between &lt;code&gt;WhenMatched f k x y z&lt;/code&gt; and &lt;code&gt;k -&amp;gt; x -&amp;gt; y -&amp;gt; f (Maybe z)&lt;/code&gt;.</source>
          <target state="translated">zipWithMaybeAMatchedとともに、WhenMatched &lt;code&gt;WhenMatched f k x y z&lt;/code&gt; と &lt;code&gt;k -&amp;gt; x -&amp;gt; y -&amp;gt; f (Maybe z)&lt;/code&gt; 間の同型性を目撃します。</target>
        </trans-unit>
        <trans-unit id="88e74dd86e7cd0c0ee3739f6c7a769d3ff6c7c44" translate="yes" xml:space="preserve">
          <source>Along with zipWithMaybeAMatched, witnesses the isomorphism between &lt;code&gt;WhenMatched f x y z&lt;/code&gt; and &lt;code&gt;Key -&amp;gt; x -&amp;gt; y -&amp;gt; f (Maybe z)&lt;/code&gt;.</source>
          <target state="translated">zipWithMaybeAMatchedと共に、証人の間同型 &lt;code&gt;WhenMatched f x y z&lt;/code&gt; と &lt;code&gt;Key -&amp;gt; x -&amp;gt; y -&amp;gt; f (Maybe z)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="19ad299afbc240cf0075ef975ed7558787fe489f" translate="yes" xml:space="preserve">
          <source>AlreadyExists</source>
          <target state="translated">AlreadyExists</target>
        </trans-unit>
        <trans-unit id="630df194c5b10abfa95d9d050a3cb36c24a133d2" translate="yes" xml:space="preserve">
          <source>Also</source>
          <target state="translated">Also</target>
        </trans-unit>
        <trans-unit id="50722218b035a878cd9ffc30a73ebfebc7a35f8b" translate="yes" xml:space="preserve">
          <source>Also causes a warning to be emitted when a module is re-exported, but that module exports nothing.</source>
          <target state="translated">また、モジュールが再エクスポートされているが、そのモジュールは何もエクスポートしていない場合に警告を発するようになります。</target>
        </trans-unit>
        <trans-unit id="746c9d1259ee19f74bffdc1d68a458f59b53388d" translate="yes" xml:space="preserve">
          <source>Also for newtypes, &lt;code&gt;Functor&lt;/code&gt;, &lt;code&gt;Foldable&lt;/code&gt; and &lt;code&gt;Enum&lt;/code&gt; are derived using the &lt;code&gt;newtype&lt;/code&gt; strategy if &lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt; is enabled and the derivation succeeds.</source>
          <target state="translated">また、newtypesの場合、 &lt;code&gt;Functor&lt;/code&gt; 、 &lt;code&gt;Foldable&lt;/code&gt; 、および &lt;code&gt;Enum&lt;/code&gt; は、 &lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt; が有効であり、派生が成功した場合、 &lt;code&gt;newtype&lt;/code&gt; 戦略を使用して派生します。</target>
        </trans-unit>
        <trans-unit id="9b5456c8967e8ed475ed23a6be13064c4931fe49" translate="yes" xml:space="preserve">
          <source>Also in the same way as &lt;a href=&quot;#data-instance-declarations&quot;&gt;Data instance declarations&lt;/a&gt;, when &lt;a href=&quot;#extension-ExplicitForAll&quot;&gt;&lt;code&gt;ExplicitForAll&lt;/code&gt;&lt;/a&gt; is enabled, type and kind variables can be explicilty bound in a type instance declaration.</source>
          <target state="translated">また、&lt;a href=&quot;#data-instance-declarations&quot;&gt;Dataインスタンスの宣言&lt;/a&gt;と同じように、&lt;a href=&quot;#extension-ExplicitForAll&quot;&gt; &lt;code&gt;ExplicitForAll&lt;/code&gt; &lt;/a&gt;が有効になっている場合は、型と種類の変数を型インスタンスの宣言に明示的にバインドできます。</target>
        </trans-unit>
        <trans-unit id="f69c8574bf36e86f8483192aacd06c285a54e8f8" translate="yes" xml:space="preserve">
          <source>Also in the same way as &lt;a href=&quot;#data-instance-declarations&quot;&gt;Data instance declarations&lt;/a&gt;, when &lt;a href=&quot;explicit_forall#extension-ExplicitForAll&quot;&gt;&lt;code&gt;ExplicitForAll&lt;/code&gt;&lt;/a&gt; is enabled, type and kind variables can be explicitly bound in a type instance declaration.</source>
          <target state="translated">また、&lt;a href=&quot;#data-instance-declarations&quot;&gt;データインスタンス宣言&lt;/a&gt;と同じように、&lt;a href=&quot;explicit_forall#extension-ExplicitForAll&quot;&gt; &lt;code&gt;ExplicitForAll&lt;/code&gt; &lt;/a&gt;が有効になっている場合、型変数と種類変数を型インスタンス宣言で明示的にバインドできます。</target>
        </trans-unit>
        <trans-unit id="6cdbfaf0e12c5c669a436bbe3f3e6d1b8921e00e" translate="yes" xml:space="preserve">
          <source>Also note that &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; instance does not satisfy substitutivity:</source>
          <target state="translated">また、 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; インスタンスは代替性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="92256f9554b50ce0b2fea7c43d4cb8cc3cb75d44" translate="yes" xml:space="preserve">
          <source>Also note that &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; instance does not satisfy substitutivity:</source>
          <target state="translated">また、 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; インスタンスは置換性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="691fd7629064f3b051f676bcbfa6149c61d9b342" translate="yes" xml:space="preserve">
          <source>Also note that &lt;code&gt;&lt;a href=&quot;ghc-float#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; instance does not satisfy substitutivity:</source>
          <target state="translated">また、 &lt;code&gt;&lt;a href=&quot;ghc-float#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; インスタンスは代替性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="406dc1c18625f274ff0dc94719e4b6be8d808a02" translate="yes" xml:space="preserve">
          <source>Also note that &lt;code&gt;&lt;a href=&quot;ghc-float#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; instance does not satisfy substitutivity:</source>
          <target state="translated">また、 &lt;code&gt;&lt;a href=&quot;ghc-float#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; インスタンスは置換性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="810701a878272ce093eceec04b908e8284d8a9c5" translate="yes" xml:space="preserve">
          <source>Also note that &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; instance does not satisfy substitutivity:</source>
          <target state="translated">また、 &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; インスタンスは代替性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="8d40d8b2532580731c8434c5f67b1078551988ae" translate="yes" xml:space="preserve">
          <source>Also note that &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;prelude#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; instance does not satisfy substitutivity:</source>
          <target state="translated">また、 &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; インスタンスは代替性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="dd8ee350e8fa89eeaea33735d33ccaffdcefe56b" translate="yes" xml:space="preserve">
          <source>Also note that &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; instance does not satisfy substitutivity:</source>
          <target state="translated">また、 &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; インスタンスは置換性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="e30beaf60ec387590381b5355c5af1eb18030345" translate="yes" xml:space="preserve">
          <source>Also note that &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;prelude#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; instance does not satisfy substitutivity:</source>
          <target state="translated">また、 &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; インスタンスは置換性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="aab6ba61f08a0ca3c95484013fb136c6e751322c" translate="yes" xml:space="preserve">
          <source>Also note that due to the presence of -0, &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; instance doesn't have an additive identity</source>
          <target state="translated">また、-0が存在するため、 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; インスタンスには付加的なIDがありません。</target>
        </trans-unit>
        <trans-unit id="f4786dd3fd2bcdff58d3b26007350033e063a192" translate="yes" xml:space="preserve">
          <source>Also note that due to the presence of -0, &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; instance doesn't have an additive identity</source>
          <target state="translated">また、-0が存在するため、 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; インスタンスには付加的なIDがありません。</target>
        </trans-unit>
        <trans-unit id="3e16b7f498e9a6b4b83f2652ce5ef38935a94752" translate="yes" xml:space="preserve">
          <source>Also note that due to the presence of -0, &lt;code&gt;&lt;a href=&quot;ghc-float#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; instance doesn't have an additive identity</source>
          <target state="translated">また、-0が存在するため、 &lt;code&gt;&lt;a href=&quot;ghc-float#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; インスタンスには付加的なIDがありません。</target>
        </trans-unit>
        <trans-unit id="3e9f33b522d825dd8a332d37d794d47c3815cced" translate="yes" xml:space="preserve">
          <source>Also note that due to the presence of -0, &lt;code&gt;&lt;a href=&quot;ghc-float#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; instance doesn't have an additive identity</source>
          <target state="translated">また、-0が存在するため、 &lt;code&gt;&lt;a href=&quot;ghc-float#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; インスタンスには付加的なIDがありません。</target>
        </trans-unit>
        <trans-unit id="40cdf5e6225f275daf21fe333e66b5c010a69778" translate="yes" xml:space="preserve">
          <source>Also note that due to the presence of -0, &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;ghc-num#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; instance doesn't have an additive identity</source>
          <target state="translated">また、-0が存在するため、 &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;ghc-num#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; インスタンスには付加的なIDがありません。</target>
        </trans-unit>
        <trans-unit id="b45d0d39ada80fe3208a871ffe74aeb25503276e" translate="yes" xml:space="preserve">
          <source>Also note that due to the presence of -0, &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; instance doesn't have an additive identity</source>
          <target state="translated">また、-0が存在するため、 &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; インスタンスには付加的なIDがありません。</target>
        </trans-unit>
        <trans-unit id="1f433875b8e4b77573f0f23895a49894977730bb" translate="yes" xml:space="preserve">
          <source>Also note that due to the presence of -0, &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;ghc-num#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; instance doesn't have an additive identity</source>
          <target state="translated">また、-0が存在するため、 &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;ghc-num#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; インスタンスには付加的なIDがありません。</target>
        </trans-unit>
        <trans-unit id="c6e30397e70af87af894b6d2572b73af0484f5e2" translate="yes" xml:space="preserve">
          <source>Also note that due to the presence of -0, &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; instance doesn't have an additive identity</source>
          <target state="translated">また、-0が存在するため、 &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; インスタンスには付加的なIDがありません。</target>
        </trans-unit>
        <trans-unit id="b4cc23b0b0763553e0311dddd73a34a9e4dee8d5" translate="yes" xml:space="preserve">
          <source>Also note that if you want an efficient left-fold, you probably want to use &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;. The reason for this is that latter does not force the &quot;inner&quot; results (e.g. &lt;code&gt;z `f` x1&lt;/code&gt; in the above example) before applying them to the operator (e.g. to &lt;code&gt;(`f` x2)&lt;/code&gt;). This results in a thunk chain &lt;code&gt;O(n)&lt;/code&gt; elements long, which then must be evaluated from the outside-in.</source>
          <target state="translated">また、効率的な左折りが必要な場合は、 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; 代わりに &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; 'を使用することもできます。これは、後者が演算子（たとえば &lt;code&gt;(`f` x2)&lt;/code&gt; ）に適用する前に「内側」の結果（上記の例では &lt;code&gt;z `f` x1&lt;/code&gt; ）を強制しないためです。これにより、サンクチェーン &lt;code&gt;O(n)&lt;/code&gt; 要素が長くなり、外部から評価する必要があります。</target>
        </trans-unit>
        <trans-unit id="ac14b968b5bbba0075fe9bfd17b35d0cc2b952eb" translate="yes" xml:space="preserve">
          <source>Also note that if you want an efficient left-fold, you probably want to use &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;. The reason for this is that latter does not force the &quot;inner&quot; results (e.g. &lt;code&gt;z `f` x1&lt;/code&gt; in the above example) before applying them to the operator (e.g. to &lt;code&gt;(`f` x2)&lt;/code&gt;). This results in a thunk chain \(\mathcal{O}(n)\) elements long, which then must be evaluated from the outside-in.</source>
          <target state="translated">また、効率的な左折りが必要な場合は、 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; 代わりに &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; 'を使用することをお勧めします。これは、後者が「内部」の結果（たとえば、上記の例では &lt;code&gt;z `f` x1&lt;/code&gt; ）を演算子に適用する前に（たとえば、 &lt;code&gt;(`f` x2)&lt;/code&gt; ）強制しないためです。これにより、サンクチェーン\（\ mathcal {O}（n）\）要素が長くなり、外部から評価する必要があります。</target>
        </trans-unit>
        <trans-unit id="8ed5ac80b0447d75eb36a8e1088f826de1949152" translate="yes" xml:space="preserve">
          <source>Also note that if you want an efficient left-fold, you probably want to use &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;prelude#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;. The reason for this is that latter does not force the &quot;inner&quot; results (e.g. &lt;code&gt;z `f` x1&lt;/code&gt; in the above example) before applying them to the operator (e.g. to &lt;code&gt;(`f` x2)&lt;/code&gt;). This results in a thunk chain &lt;code&gt;O(n)&lt;/code&gt; elements long, which then must be evaluated from the outside-in.</source>
          <target state="translated">また、効率的な左折りが必要な場合は、 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; 代わりに &lt;code&gt;&lt;a href=&quot;prelude#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; 'を使用することもできます。これは、後者が演算子（たとえば &lt;code&gt;(`f` x2)&lt;/code&gt; ）に適用する前に「内側」の結果（上記の例では &lt;code&gt;z `f` x1&lt;/code&gt; ）を強制しないためです。これにより、サンクチェーン &lt;code&gt;O(n)&lt;/code&gt; 要素が長くなり、外部から評価する必要があります。</target>
        </trans-unit>
        <trans-unit id="f372abd57a7f3cac154979340cbe51baeec9bbfb" translate="yes" xml:space="preserve">
          <source>Also note that if you want an efficient left-fold, you probably want to use &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;prelude#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;. The reason for this is that latter does not force the &quot;inner&quot; results (e.g. &lt;code&gt;z `f` x1&lt;/code&gt; in the above example) before applying them to the operator (e.g. to &lt;code&gt;(`f` x2)&lt;/code&gt;). This results in a thunk chain \(\mathcal{O}(n)\) elements long, which then must be evaluated from the outside-in.</source>
          <target state="translated">また、効率的な左折りが必要な場合は、 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; 代わりに &lt;code&gt;&lt;a href=&quot;prelude#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; 'を使用することをお勧めします。これは、後者が「内部」の結果（たとえば、上記の例では &lt;code&gt;z `f` x1&lt;/code&gt; ）を演算子に適用する前に（たとえば、 &lt;code&gt;(`f` x2)&lt;/code&gt; ）強制しないためです。これにより、サンクチェーン\（\ mathcal {O}（n）\）要素が長くなり、外部から評価する必要があります。</target>
        </trans-unit>
        <trans-unit id="0312e92e764c438aa064f2113437c35a6539b369" translate="yes" xml:space="preserve">
          <source>Also note that if you want an efficient left-fold, you probably want to use &lt;code&gt;&lt;a href=&quot;data-list#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;data-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;. The reason for this is that latter does not force the &quot;inner&quot; results (e.g. &lt;code&gt;z `f` x1&lt;/code&gt; in the above example) before applying them to the operator (e.g. to &lt;code&gt;(`f` x2)&lt;/code&gt;). This results in a thunk chain &lt;code&gt;O(n)&lt;/code&gt; elements long, which then must be evaluated from the outside-in.</source>
          <target state="translated">また、効率的な左折りが必要な場合は、 &lt;code&gt;&lt;a href=&quot;data-list#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; 代わりに &lt;code&gt;&lt;a href=&quot;data-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; 'を使用することもできます。これは、後者が演算子（たとえば &lt;code&gt;(`f` x2)&lt;/code&gt; ）に適用する前に「内側」の結果（上記の例では &lt;code&gt;z `f` x1&lt;/code&gt; ）を強制しないためです。これにより、サンクチェーン &lt;code&gt;O(n)&lt;/code&gt; 要素が長くなり、外部から評価する必要があります。</target>
        </trans-unit>
        <trans-unit id="adb136095ed6cc375f6a3f0659e9e4fe69576dda" translate="yes" xml:space="preserve">
          <source>Also note that if you want an efficient left-fold, you probably want to use &lt;code&gt;&lt;a href=&quot;data-list#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;data-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;. The reason for this is that latter does not force the &quot;inner&quot; results (e.g. &lt;code&gt;z `f` x1&lt;/code&gt; in the above example) before applying them to the operator (e.g. to &lt;code&gt;(`f` x2)&lt;/code&gt;). This results in a thunk chain \(\mathcal{O}(n)\) elements long, which then must be evaluated from the outside-in.</source>
          <target state="translated">また、効率的な左折りが必要な場合は、 &lt;code&gt;&lt;a href=&quot;data-list#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; 代わりに &lt;code&gt;&lt;a href=&quot;data-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; 'を使用することをお勧めします。これは、後者が「内部」の結果（たとえば、上記の例では &lt;code&gt;z `f` x1&lt;/code&gt; ）を演算子に適用する前に（たとえば、 &lt;code&gt;(`f` x2)&lt;/code&gt; ）強制しないためです。これにより、サンクチェーン\（\ mathcal {O}（n）\）要素が長くなり、外部から評価する必要があります。</target>
        </trans-unit>
        <trans-unit id="1acbfc03f5d47fca9d6b436cb055a438d6d24adc" translate="yes" xml:space="preserve">
          <source>Also note that the argument to &lt;code&gt;DEPRECATED&lt;/code&gt; and &lt;code&gt;WARNING&lt;/code&gt; can also be a list of strings, in which case the strings will be presented on separate lines in the resulting warning message,</source>
          <target state="translated">また、 &lt;code&gt;DEPRECATED&lt;/code&gt; および &lt;code&gt;WARNING&lt;/code&gt; への引数は文字列のリストにすることもできます。その場合、文字列は結果の警告メッセージの個別の行に表示されます。</target>
        </trans-unit>
        <trans-unit id="aa8f340d5595cab499d451cc0ad91fefbf788a96" translate="yes" xml:space="preserve">
          <source>Also note that, due to the same, &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt;'s operator interactions are not respected by &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s instance:</source>
          <target state="translated">また、同じため、 &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; の演算子の相互作用は &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; のインスタンスでは考慮されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="cde3b82cd7b9ecd782961c29d79052d748e75c8a" translate="yes" xml:space="preserve">
          <source>Also note that, due to the same, &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt;'s operator interactions are not respected by &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s instance:</source>
          <target state="translated">また、同じ理由により、 &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; の演算子の相互作用は &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; のインスタンスでは考慮されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="41ccfa2353a09113f0c811d9cb51cb48399720bc" translate="yes" xml:space="preserve">
          <source>Also note that, due to the same, &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt;'s operator interactions are not respected by &lt;code&gt;&lt;a href=&quot;ghc-float#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s instance:</source>
          <target state="translated">また、同じため、 &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; の演算子の相互作用は &lt;code&gt;&lt;a href=&quot;ghc-float#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; のインスタンスでは考慮されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="235d629ac464213b855f299b5269fbab1821ac2a" translate="yes" xml:space="preserve">
          <source>Also note that, due to the same, &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt;'s operator interactions are not respected by &lt;code&gt;&lt;a href=&quot;ghc-float#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s instance:</source>
          <target state="translated">また、同じ理由により、 &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; の演算子の相互作用は &lt;code&gt;&lt;a href=&quot;ghc-float#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; のインスタンスでは考慮されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a09b8126190a3493d9f5d149861112b275c4a820" translate="yes" xml:space="preserve">
          <source>Also note that, due to the same, &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt;'s operator interactions are not respected by &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s instance:</source>
          <target state="translated">また、同じため、 &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; の演算子の相互作用は &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; のインスタンスでは考慮されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="df2b6faed2041cbc5f8775d83e79ec068a616bf0" translate="yes" xml:space="preserve">
          <source>Also note that, due to the same, &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt;'s operator interactions are not respected by &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s instance:</source>
          <target state="translated">また、同じ理由により、 &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; の演算子の相互作用は &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; のインスタンスでは考慮されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="f982812ed18e181efb5f1842c282247a56bf7ec3" translate="yes" xml:space="preserve">
          <source>Also note that, due to the same, &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt;'s operator interactions are not respected by &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s instance:</source>
          <target state="translated">また、同じため、 &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; の演算子の相互作用は &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; のインスタンスでは考慮されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="27a6d2f2099e869b6c35b0b33e690f3dbb98988d" translate="yes" xml:space="preserve">
          <source>Also note that, due to the same, &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt;'s operator interactions are not respected by &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s instance:</source>
          <target state="translated">また、同じ理由により、 &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; の演算子の相互作用は &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; のインスタンスでは考慮されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="25470094bd74b3e948c7c6097cd019d5c2529be4" translate="yes" xml:space="preserve">
          <source>Also note the use of &lt;a href=&quot;../ghci#ghci-cmd-:type%20+v&quot;&gt;&lt;code&gt;:type +v&lt;/code&gt;&lt;/a&gt; in the GHCi session above instead of &lt;a href=&quot;../ghci#ghci-cmd-:type&quot;&gt;&lt;code&gt;:type&lt;/code&gt;&lt;/a&gt;. This is because &lt;a href=&quot;../ghci#ghci-cmd-:type&quot;&gt;&lt;code&gt;:type&lt;/code&gt;&lt;/a&gt; gives you the type that would be inferred for a variable assigned to the expression provided (that is, the type of &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;let x = &amp;lt;expr&amp;gt;&lt;/code&gt;). As we saw above with &lt;code&gt;myLength2&lt;/code&gt;, this type will have no variables available to visible type application. On the other hand, &lt;a href=&quot;../ghci#ghci-cmd-:type%20+v&quot;&gt;&lt;code&gt;:type +v&lt;/code&gt;&lt;/a&gt; gives you the actual type of the expression provided. To illustrate this:</source>
          <target state="translated">また、上記のGHCiセッションで&lt;a href=&quot;../ghci#ghci-cmd-:type&quot;&gt; &lt;code&gt;:type&lt;/code&gt; の&lt;/a&gt;代わりに：type &lt;a href=&quot;../ghci#ghci-cmd-:type%20+v&quot;&gt; &lt;code&gt;:type +v&lt;/code&gt; &lt;/a&gt;使用していることに注意してください。これは、&lt;a href=&quot;../ghci#ghci-cmd-:type&quot;&gt; &lt;code&gt;:type&lt;/code&gt; &lt;/a&gt;が、提供された式に割り当てられた変数に対して推測される型（つまり、 &lt;code&gt;let x = &amp;lt;expr&amp;gt;&lt;/code&gt; 内の &lt;code&gt;x&lt;/code&gt; の型）を提供するためです。上記の &lt;code&gt;myLength2&lt;/code&gt; で見たように、この型には、可視型アプリケーションで使用できる変数がありません。一方、&lt;a href=&quot;../ghci#ghci-cmd-:type%20+v&quot;&gt; &lt;code&gt;:type +v&lt;/code&gt; &lt;/a&gt;は、提供された式の実際のタイプを示します。これを説明するために：</target>
        </trans-unit>
        <trans-unit id="220abdef84f1e02ea77807f44da3633ce41b62f6" translate="yes" xml:space="preserve">
          <source>Also note the use of &lt;a href=&quot;ghci#ghci-cmd-:type%20+v&quot;&gt;&lt;code&gt;:type +v&lt;/code&gt;&lt;/a&gt; in the GHCi session above instead of &lt;a href=&quot;ghci#ghci-cmd-:type&quot;&gt;&lt;code&gt;:type&lt;/code&gt;&lt;/a&gt;. This is because &lt;a href=&quot;ghci#ghci-cmd-:type&quot;&gt;&lt;code&gt;:type&lt;/code&gt;&lt;/a&gt; gives you the type that would be inferred for a variable assigned to the expression provided (that is, the type of &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;let x = &amp;lt;expr&amp;gt;&lt;/code&gt;). As we saw above with &lt;code&gt;myLength2&lt;/code&gt;, this type will have no variables available to visible type application. On the other hand, &lt;a href=&quot;ghci#ghci-cmd-:type%20+v&quot;&gt;&lt;code&gt;:type +v&lt;/code&gt;&lt;/a&gt; gives you the actual type of the expression provided. To illustrate this:</source>
          <target state="translated">また、上記のGHCiセッションで&lt;a href=&quot;ghci#ghci-cmd-:type&quot;&gt; &lt;code&gt;:type&lt;/code&gt; の&lt;/a&gt;代わりに：type &lt;a href=&quot;ghci#ghci-cmd-:type%20+v&quot;&gt; &lt;code&gt;:type +v&lt;/code&gt; &lt;/a&gt;使用していることに注意してください。これがあるためである&lt;a href=&quot;ghci#ghci-cmd-:type&quot;&gt; &lt;code&gt;:type&lt;/code&gt; &lt;/a&gt;あなたに提供される発現に割り当てられた変数に対して推論されるだろうタイプを提供します（つまり、タイプ &lt;code&gt;x&lt;/code&gt; における &lt;code&gt;let x = &amp;lt;expr&amp;gt;&lt;/code&gt; ）。上記の &lt;code&gt;myLength2&lt;/code&gt; で見たように、この型には可視型アプリケーションで使用できる変数がありません。一方、&lt;a href=&quot;ghci#ghci-cmd-:type%20+v&quot;&gt; &lt;code&gt;:type +v&lt;/code&gt; &lt;/a&gt;は、指定された式の実際のタイプを示します。これを説明するには：</target>
        </trans-unit>
        <trans-unit id="2513c4a2bdd30848586867d45397f58c5275a1ec" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;extra-libraries&lt;/code&gt; are placed on the linker command line after the &lt;code&gt;hs-libraries&lt;/code&gt; for the same package. If your package has dependencies in the other direction (i.e. &lt;code&gt;extra-libraries&lt;/code&gt; depends on &lt;code&gt;hs-libraries&lt;/code&gt;), and the libraries are static, you might need to make two separate packages.</source>
          <target state="translated">また、 &lt;code&gt;extra-libraries&lt;/code&gt; は、同じパッケージの &lt;code&gt;hs-libraries&lt;/code&gt; の後にリンカーコマンドラインで配置されます。パッケージに逆方向の依存関係があり（つまり、 &lt;code&gt;extra-libraries&lt;/code&gt; が &lt;code&gt;hs-libraries&lt;/code&gt; に依存している）、ライブラリが静的である場合、2つの別個のパッケージを作成する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="a082bc7aa16e694d046953671bb878019d49365f" translate="yes" xml:space="preserve">
          <source>Also, note that this function should not be used to express dependencies between finalizers on &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;s. For example, if the finalizer for a &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;F1&lt;/code&gt; calls &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt; on a second &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;F2&lt;/code&gt;, then the only guarantee is that the finalizer for &lt;code&gt;F2&lt;/code&gt; is never started before the finalizer for &lt;code&gt;F1&lt;/code&gt;. They might be started together if for example both &lt;code&gt;F1&lt;/code&gt; and &lt;code&gt;F2&lt;/code&gt; are otherwise unreachable, and in that case the scheduler might end up running the finalizer for &lt;code&gt;F2&lt;/code&gt; first.</source>
          <target state="translated">また、この関数は、 &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; のファイナライザー間の依存関係を表すために使用しないでください。以下のためのファイナライザたとえば、 &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;F1&lt;/code&gt; が呼び出す &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt; を第二に &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;F2&lt;/code&gt; 、そして唯一の保証はのためのファイナライザということである &lt;code&gt;F2&lt;/code&gt; がためのファイナライザ前に開始されることはありません &lt;code&gt;F1&lt;/code&gt; 。たとえば、 &lt;code&gt;F1&lt;/code&gt; と &lt;code&gt;F2&lt;/code&gt; の両方に到達できない場合、それらは一緒に開始される可能性があり、その場合、スケジューラーは &lt;code&gt;F2&lt;/code&gt; のファイナライザーを最初に実行することになります。</target>
        </trans-unit>
        <trans-unit id="3131b8ab181c5396dcc60eede1991b95828099cb" translate="yes" xml:space="preserve">
          <source>Also, note that this function should not be used to express dependencies between finalizers on &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;s. For example, if the finalizer for a &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;F1&lt;/code&gt; calls &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt; on a second &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;F2&lt;/code&gt;, then the only guarantee is that the finalizer for &lt;code&gt;F2&lt;/code&gt; is never started before the finalizer for &lt;code&gt;F1&lt;/code&gt;. They might be started together if for example both &lt;code&gt;F1&lt;/code&gt; and &lt;code&gt;F2&lt;/code&gt; are otherwise unreachable, and in that case the scheduler might end up running the finalizer for &lt;code&gt;F2&lt;/code&gt; first.</source>
          <target state="translated">また、この関数は、 &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; のファイナライザー間の依存関係を表すために使用しないでください。以下のためのファイナライザたとえば、 &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;F1&lt;/code&gt; が呼び出す &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt; を第二に &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;F2&lt;/code&gt; 、そして唯一の保証はのためのファイナライザということである &lt;code&gt;F2&lt;/code&gt; がためのファイナライザ前に開始されることはありません &lt;code&gt;F1&lt;/code&gt; 。たとえば、 &lt;code&gt;F1&lt;/code&gt; と &lt;code&gt;F2&lt;/code&gt; の両方に到達できない場合、それらは一緒に開始される可能性があり、その場合、スケジューラーは &lt;code&gt;F2&lt;/code&gt; のファイナライザーを最初に実行することになります。</target>
        </trans-unit>
        <trans-unit id="9cd5abc8befc620fdf0d69370c448ed49b4a5500" translate="yes" xml:space="preserve">
          <source>Also, note that this function should not be used to express dependencies between finalizers on &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;s. For example, if the finalizer for a &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;F1&lt;/code&gt; calls &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt; on a second &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;F2&lt;/code&gt;, then the only guarantee is that the finalizer for &lt;code&gt;F2&lt;/code&gt; is never started before the finalizer for &lt;code&gt;F1&lt;/code&gt;. They might be started together if for example both &lt;code&gt;F1&lt;/code&gt; and &lt;code&gt;F2&lt;/code&gt; are otherwise unreachable, and in that case the scheduler might end up running the finalizer for &lt;code&gt;F2&lt;/code&gt; first.</source>
          <target state="translated">また、この関数は、 &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; のファイナライザー間の依存関係を表すために使用しないでください。以下のためのファイナライザたとえば、 &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;F1&lt;/code&gt; が呼び出す &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt; を第二に &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;F2&lt;/code&gt; 、そして唯一の保証はのためのファイナライザということである &lt;code&gt;F2&lt;/code&gt; がためのファイナライザ前に開始されることはありません &lt;code&gt;F1&lt;/code&gt; 。たとえば、 &lt;code&gt;F1&lt;/code&gt; と &lt;code&gt;F2&lt;/code&gt; の両方に到達できない場合、それらは一緒に開始される可能性があり、その場合、スケジューラーは &lt;code&gt;F2&lt;/code&gt; のファイナライザーを最初に実行することになります。</target>
        </trans-unit>
        <trans-unit id="40984f68323bbc3a5e0662d8396443ffd212990b" translate="yes" xml:space="preserve">
          <source>Also, you may need to use the &lt;a href=&quot;#ghc-flag--rdynamic&quot;&gt;&lt;code&gt;-rdynamic&lt;/code&gt;&lt;/a&gt; flag to ensure that that symbols are not dropped from your PIE objects.</source>
          <target state="translated">また、&lt;a href=&quot;#ghc-flag--rdynamic&quot;&gt; &lt;code&gt;-rdynamic&lt;/code&gt; &lt;/a&gt;フラグを使用して、PIEオブジェクトからシンボルが削除されないようにする必要がある場合もあります。</target>
        </trans-unit>
        <trans-unit id="e30eff925100b7c3e119ed678e39009e962455b0" translate="yes" xml:space="preserve">
          <source>Alt</source>
          <target state="translated">Alt</target>
        </trans-unit>
        <trans-unit id="e429c5fc3a2401f13f505fe2471ed35cea126252" translate="yes" xml:space="preserve">
          <source>Alternate completion to perform if the cursor is not at a quoted word</source>
          <target state="translated">カーソルが引用語にない場合に実行する代替補完</target>
        </trans-unit>
        <trans-unit id="3b74e96e489cf616e54374e5e92ff3290101f441" translate="yes" xml:space="preserve">
          <source>Alternative</source>
          <target state="translated">Alternative</target>
        </trans-unit>
        <trans-unit id="f427a4339b88ab5730e552c0af40d96b9c132d30" translate="yes" xml:space="preserve">
          <source>AlternativeLayoutRule</source>
          <target state="translated">AlternativeLayoutRule</target>
        </trans-unit>
        <trans-unit id="a87adb1730114f941ad55c79898057fd80fd74d1" translate="yes" xml:space="preserve">
          <source>AlternativeLayoutRuleTransitional</source>
          <target state="translated">AlternativeLayoutRuleTransitional</target>
        </trans-unit>
        <trans-unit id="76d5f5130ef008f32d0f9b4ea42dc455c34353b6" translate="yes" xml:space="preserve">
          <source>Alternatively &lt;code&gt;Coll&lt;/code&gt; might be rewritten</source>
          <target state="translated">あるいは、 &lt;code&gt;Coll&lt;/code&gt; は書き換えられる可能性があります</target>
        </trans-unit>
        <trans-unit id="a65a8212521ccdabba5ba2d4d0578992c935fe0f" translate="yes" xml:space="preserve">
          <source>Alternatively you can use &lt;a href=&quot;#ghc-flag--funbox-small-strict-fields&quot;&gt;&lt;code&gt;-funbox-small-strict-fields&lt;/code&gt;&lt;/a&gt; to only unbox strict fields which are &amp;ldquo;small&amp;rdquo;.</source>
          <target state="translated">または、&lt;a href=&quot;#ghc-flag--funbox-small-strict-fields&quot;&gt; &lt;code&gt;-funbox-small-strict-fields&lt;/code&gt; &lt;/a&gt;を使用して、「小さい」strictフィールドのみをunbox することができます。</target>
        </trans-unit>
        <trans-unit id="0139c0df4a42fccf86ef595e9d7e4a89d60e0341" translate="yes" xml:space="preserve">
          <source>Alternatively, core plugins can be specified with Template Haskell.</source>
          <target state="translated">あるいは、Haskellテンプレートを使ってコアプラグインを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="12456ce612ba3cf75605afebc2b84de246c8bd30" translate="yes" xml:space="preserve">
          <source>Alternatively, if any of the &lt;code&gt;(f e)&lt;/code&gt; ignore their second argument, the fold stops there, with the remaining elements unused. As a result, &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; is well suited to define both &lt;a href=&quot;#corec&quot;&gt;corecursive&lt;/a&gt; and &lt;a href=&quot;#short&quot;&gt;short-circuit&lt;/a&gt; reductions.</source>
          <target state="translated">あるいは、 &lt;code&gt;(f e)&lt;/code&gt; いずれかが2番目の引数を無視した場合、フォールドはそこで停止し、残りの要素は使用されません。結果として、 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; は両方定義することが適している&lt;a href=&quot;#corec&quot;&gt;corecursive&lt;/a&gt;と&lt;a href=&quot;#short&quot;&gt;短絡&lt;/a&gt;削減。</target>
        </trans-unit>
        <trans-unit id="1bde40f6b099fd2459055a9d8eec8e840639306e" translate="yes" xml:space="preserve">
          <source>Alternatively, if you want to build GHC yourself, head on over to the &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/Building&quot;&gt;GHC Building Guide&lt;/a&gt; to find out how to get the sources, and build it on your system. Note that GHC itself is written in Haskell, so you will still need to install GHC in order to build it.</source>
          <target state="translated">あるいは、GHCを自分でビルドしたい場合は、&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/Building&quot;&gt;GHC構築ガイド&lt;/a&gt;にアクセスして、ソースを取得する方法を見つけ、システムでビルドしてください。GHC自体はHaskellで記述されているため、ビルドするためにGHCをインストールする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="487925a0dfe33b56fabdc308b58c83700f73524a" translate="yes" xml:space="preserve">
          <source>Alternatively, if you want to build GHC yourself, head on over to the &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/building&quot;&gt;GHC Building Guide&lt;/a&gt; to find out how to get the sources, and build it on your system. Note that GHC itself is written in Haskell, so you will still need to install GHC in order to build it.</source>
          <target state="translated">Alternatively, if you want to build GHC yourself, head on over to the &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/building&quot;&gt;GHC Building Guide&lt;/a&gt; to find out how to get the sources, and build it on your system. Note that GHC itself is written in Haskell, so you will still need to install GHC in order to build it.</target>
        </trans-unit>
        <trans-unit id="017799e0bdc7d7426f1d60caa28c84b64a1787eb" translate="yes" xml:space="preserve">
          <source>Alternatively, one could define &lt;code&gt;foldMap&lt;/code&gt;:</source>
          <target state="translated">あるいは、 &lt;code&gt;foldMap&lt;/code&gt; を定義することもできます。</target>
        </trans-unit>
        <trans-unit id="cdb5e0c35bffdb5bac67b4158b85ee94fc664745" translate="yes" xml:space="preserve">
          <source>Alternatively, use your &lt;code id=&quot;index-14&quot;&gt;TMPDIR&lt;/code&gt; environment variable. Set it to the name of the directory where temporary files should be put. GCC and other programs will honour the &lt;code id=&quot;index-15&quot;&gt;TMPDIR&lt;/code&gt; variable as well.</source>
          <target state="translated">または、 &lt;code id=&quot;index-14&quot;&gt;TMPDIR&lt;/code&gt; 環境変数を使用します。一時ファイルを置くディレクトリの名前に設定します。GCCや他のプログラムも &lt;code id=&quot;index-15&quot;&gt;TMPDIR&lt;/code&gt; 変数を尊重します。</target>
        </trans-unit>
        <trans-unit id="7b0162a0bbd1d38dbdfc269cc088cc5f731a6ba2" translate="yes" xml:space="preserve">
          <source>Alternatively, you can give a type signature to the enclosing context, which GHC can &amp;ldquo;push down&amp;rdquo; to find the type for the variable:</source>
          <target state="translated">あるいは、GHCが変数の型を見つけるために「プッシュダウン」できる、囲んでいるコンテキストに型シグネチャを与えることができます。</target>
        </trans-unit>
        <trans-unit id="3a4be7155bcffba0850c80a370bc5c6b34c37e74" translate="yes" xml:space="preserve">
          <source>Alternatives</source>
          <target state="translated">Alternatives</target>
        </trans-unit>
        <trans-unit id="369a93d4fce888d55a59c31d08c7fb3c46433a3b" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&lt;a href=&quot;control-exception#v:throwIO&quot;&gt;throwIO&lt;/a&gt;&lt;/code&gt; has a type that is an instance of the type of &lt;code&gt;&lt;a href=&quot;control-exception#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt;, the two functions are subtly different:</source>
          <target state="translated">が &lt;code&gt;&lt;a href=&quot;control-exception#v:throwIO&quot;&gt;throwIO&lt;/a&gt;&lt;/code&gt; は、のタイプのインスタンスであるタイプ有する &lt;code&gt;&lt;a href=&quot;control-exception#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; 、二つの機能は微妙に異なっています。</target>
        </trans-unit>
        <trans-unit id="29cf9aad2a6fbceeb5608717dde74a1b736195b5" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt; has a type that is an instance of the type of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt;, the two functions are subtly different:</source>
          <target state="translated">Although &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt; has a type that is an instance of the type of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; , the two functions are subtly different:</target>
        </trans-unit>
        <trans-unit id="c14f8d1451ab6b8eb4e7c4771d4a0ca47ed0fa3c" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt; has a type that is an instance of the type of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt;, the two functions are subtly different:</source>
          <target state="translated">が &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt; は、のタイプのインスタンスであるタイプ有する &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; 、二つの機能は微妙に異なっています。</target>
        </trans-unit>
        <trans-unit id="0e51576239bb4dfd89a49cde0c91b94d3c029853" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt; has a type that is an instance of the type of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt;, the two functions are subtly different:</source>
          <target state="translated">が &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt; は、のタイプのインスタンスであるタイプ有する &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; 、二つの機能は微妙に異なっています。</target>
        </trans-unit>
        <trans-unit id="9d4b54010820702fe99161a26c1a3fd6da57d30a" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt; has a type that is an instance of the type of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt;, the two functions are subtly different:</source>
          <target state="translated">が &lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt; は、のタイプのインスタンスであるタイプ有する &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; 、二つの機能は微妙に異なっています。</target>
        </trans-unit>
        <trans-unit id="aabfacf44a025fa1709c2ce0bc2ca417b25be0c8" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt; has a type that is an instance of the type of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt;, the two functions are subtly different:</source>
          <target state="translated">が &lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt; は、のタイプのインスタンスであるタイプ有する &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; 、二つの機能は微妙に異なっています。</target>
        </trans-unit>
        <trans-unit id="ad067360286354ab105001df012d810684e67e11" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt; has a type that is an instance of the type of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt;, the two functions are subtly different:</source>
          <target state="translated">が &lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt; は、のタイプのインスタンスであるタイプ有する &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; 、二つの機能は微妙に異なっています。</target>
        </trans-unit>
        <trans-unit id="2f75950244ae1b83eb1fa765162dcee833eb2b00" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt; has a type that is an instance of the type of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt;, the two functions are subtly different:</source>
          <target state="translated">が &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt; は、のタイプのインスタンスであるタイプ有する &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; 、二つの機能は微妙に異なっています。</target>
        </trans-unit>
        <trans-unit id="53f69795c586d406dd4511ba9d5155c1a42f2617" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt; has a type that is an instance of the type of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt;, the two functions are subtly different:</source>
          <target state="translated">が &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt; は、のタイプのインスタンスであるタイプ有する &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; 、二つの機能は微妙に異なっています。</target>
        </trans-unit>
        <trans-unit id="22e9f09fd992835fa4360f80b95f40b2227ad567" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt; has a type that is an instance of the type of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt;, the two functions are subtly different:</source>
          <target state="translated">が &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt; は、のタイプのインスタンスであるタイプ有する &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; 、二つの機能は微妙に異なっています。</target>
        </trans-unit>
        <trans-unit id="8f38ab9e9f8dc1070a59ba1354c8cbcf7666ec61" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&lt;a href=&quot;ghc-io#v:throwIO&quot;&gt;throwIO&lt;/a&gt;&lt;/code&gt; has a type that is an instance of the type of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt;, the two functions are subtly different:</source>
          <target state="translated">が &lt;code&gt;&lt;a href=&quot;ghc-io#v:throwIO&quot;&gt;throwIO&lt;/a&gt;&lt;/code&gt; は、のタイプのインスタンスであるタイプ有する &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; 、二つの機能は微妙に異なっています。</target>
        </trans-unit>
        <trans-unit id="7e9ddf09d766d5f9ca39130ead484571fe0feced" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&lt;a href=&quot;ghc-io#v:throwIO&quot;&gt;throwIO&lt;/a&gt;&lt;/code&gt; has a type that is an instance of the type of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt;, the two functions are subtly different:</source>
          <target state="translated">が &lt;code&gt;&lt;a href=&quot;ghc-io#v:throwIO&quot;&gt;throwIO&lt;/a&gt;&lt;/code&gt; は、のタイプのインスタンスであるタイプ有する &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; 、二つの機能は微妙に異なっています。</target>
        </trans-unit>
        <trans-unit id="a30521846de09e3ca8cee7b96284911c314803ae" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&lt;a href=&quot;ghc-io#v:throwIO&quot;&gt;throwIO&lt;/a&gt;&lt;/code&gt; has a type that is an instance of the type of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt;, the two functions are subtly different:</source>
          <target state="translated">が &lt;code&gt;&lt;a href=&quot;ghc-io#v:throwIO&quot;&gt;throwIO&lt;/a&gt;&lt;/code&gt; は、のタイプのインスタンスであるタイプ有する &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; 、二つの機能は微妙に異なっています。</target>
        </trans-unit>
        <trans-unit id="832b928147d026a938c7c9c4f9b77b788e8f12a1" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:throwIO&quot;&gt;throwIO&lt;/a&gt;&lt;/code&gt; has a type that is an instance of the type of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt;, the two functions are subtly different:</source>
          <target state="translated">Although &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:throwIO&quot;&gt;throwIO&lt;/a&gt;&lt;/code&gt; has a type that is an instance of the type of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; , the two functions are subtly different:</target>
        </trans-unit>
        <trans-unit id="b8713c63104594f55f79cca79583e8fe10117c5e" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:throwIO&quot;&gt;throwIO&lt;/a&gt;&lt;/code&gt; has a type that is an instance of the type of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt;, the two functions are subtly different:</source>
          <target state="translated">が &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:throwIO&quot;&gt;throwIO&lt;/a&gt;&lt;/code&gt; は、のタイプのインスタンスであるタイプ有する &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; 、二つの機能は微妙に異なっています。</target>
        </trans-unit>
        <trans-unit id="3ba685506461100035a0dc7e24aec988f66251e4" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:throwIO&quot;&gt;throwIO&lt;/a&gt;&lt;/code&gt; has a type that is an instance of the type of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt;, the two functions are subtly different:</source>
          <target state="translated">が &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:throwIO&quot;&gt;throwIO&lt;/a&gt;&lt;/code&gt; は、のタイプのインスタンスであるタイプ有する &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; 、二つの機能は微妙に異なっています。</target>
        </trans-unit>
        <trans-unit id="e2ed5be7a335e3dba8612b72e2da7b9e639f8124" translate="yes" xml:space="preserve">
          <source>Although GHC allows the user to pass all unlifted boxed types to foreign functions, some of them are not amenable to useful work. Although &lt;code&gt;Array#&lt;/code&gt; is unlifted, the elements in its payload are lifted, and a foreign C function cannot safely force thunks. Consequently, a foreign C function may not dereference any of the addresses that comprise the payload of the &lt;code&gt;Array#&lt;/code&gt;.</source>
          <target state="translated">Although GHC allows the user to pass all unlifted boxed types to foreign functions, some of them are not amenable to useful work. Although &lt;code&gt;Array#&lt;/code&gt; is unlifted, the elements in its payload are lifted, and a foreign C function cannot safely force thunks. Consequently, a foreign C function may not dereference any of the addresses that comprise the payload of the &lt;code&gt;Array#&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ea6b65048b50606bfc86ae17bba6c11487ce8b27" translate="yes" xml:space="preserve">
          <source>Although all open type families are considered to have a complete user-supplied kind signature, we can relax this condition for closed type families, where we have equations on which to perform kind inference. GHC will infer kinds for the arguments and result types of a closed type family.</source>
          <target state="translated">すべてのオープン型ファミリはユーザが提供した完全な型署名を持つと考えられていますが、クローズド型ファミリではこの条件を緩和することができます。GHCは,クローズド型ファミリの引数と結果の型に対して,型を推論します.</target>
        </trans-unit>
        <trans-unit id="a8ba660b18337f8755c5f957412710cfb811a48b" translate="yes" xml:space="preserve">
          <source>Although it is equivalent to running GHC twice, using &lt;code&gt;-dynamic-too&lt;/code&gt; is more efficient, because the earlier phases of the compiler up to code generation are performed just once.</source>
          <target state="translated">これはGHCを2回実行することと同じですが、 &lt;code&gt;-dynamic-too&lt;/code&gt; を使用する方が効率的です。これは、コンパイラーの初期段階からコード生成までが1回だけ実行されるためです。</target>
        </trans-unit>
        <trans-unit id="17fe55cf03ef562c44820f718c2ff2b873fd70ad" translate="yes" xml:space="preserve">
          <source>Although it is unusual, there (currently) can be &lt;em&gt;multiple&lt;/em&gt; instances for an associated family in a single instance declaration. For example, this is legitimate:</source>
          <target state="translated">珍しいことですが、（現在のところ）1つのインスタンス宣言で、関連付けられたファミリーに&lt;em&gt;複数の&lt;/em&gt;インスタンスが存在する可能性があります。たとえば、これは正当です。</target>
        </trans-unit>
        <trans-unit id="c0e0fc4143b94596d60f1c94c3fec1d4b047aa5e" translate="yes" xml:space="preserve">
          <source>Although names generated by &lt;code&gt;newName&lt;/code&gt; cannot &lt;em&gt;be captured&lt;/em&gt;, they can &lt;em&gt;capture&lt;/em&gt; other names. For example, this:</source>
          <target state="translated">&lt;code&gt;newName&lt;/code&gt; で生成された名前はキャプチャできません&lt;em&gt;が&lt;/em&gt;、他の名前を&lt;em&gt;キャプチャ&lt;/em&gt;できます。たとえば、これ：</target>
        </trans-unit>
        <trans-unit id="051c31d13e18e01e98444eb19f8ca75e805e3ed3" translate="yes" xml:space="preserve">
          <source>Although not recommended, the deprecated &lt;a href=&quot;#ghc-flag--fglasgow-exts&quot;&gt;&lt;code&gt;-fglasgow-exts&lt;/code&gt;&lt;/a&gt; flag enables a large swath of the extensions supported by GHC at once.</source>
          <target state="translated">推奨されていませんが、非推奨の&lt;a href=&quot;#ghc-flag--fglasgow-exts&quot;&gt; &lt;code&gt;-fglasgow-exts&lt;/code&gt; &lt;/a&gt;フラグを使用すると、GHCでサポートされる拡張機能を大量に一度に有効にできます。</target>
        </trans-unit>
        <trans-unit id="fca41e21a6d4cf355148dfe827eb5a105a329d84" translate="yes" xml:space="preserve">
          <source>Although only GHC implements arrow notation directly, there is also a preprocessor (available from the &lt;a href=&quot;http://www.haskell.org/arrows/&quot;&gt;arrows web page&lt;/a&gt;) that translates arrow notation into Haskell 98 for use with other Haskell systems. You would still want to check arrow programs with GHC; tracing type errors in the preprocessor output is not easy. Modules intended for both GHC and the preprocessor must observe some additional restrictions:</source>
          <target state="translated">GHCのみが矢印表記を直接実装していますが、他のHaskellシステムで使用するために矢印表記をHaskell 98に変換するプリプロセッサ（&lt;a href=&quot;http://www.haskell.org/arrows/&quot;&gt;arrows Webページ&lt;/a&gt;から入手可能）もあります。あなたはまだGHCで矢印プログラムをチェックしたいでしょう;プリプロセッサ出力のタイプエラーのトレースは簡単ではありません。 GHCとプリプロセッサーの両方を対象としたモジュールは、いくつかの追加の制限を遵守する必要があります。</target>
        </trans-unit>
        <trans-unit id="5452a72fe79a04ee53ca78ffa45ecae6398cb3ee" translate="yes" xml:space="preserve">
          <source>Although only GHC implements arrow notation directly, there is also a preprocessor (available from the &lt;a href=&quot;https://www.haskell.org/arrows/&quot;&gt;arrows web page&lt;/a&gt;) that translates arrow notation into Haskell 98 for use with other Haskell systems. You would still want to check arrow programs with GHC; tracing type errors in the preprocessor output is not easy. Modules intended for both GHC and the preprocessor must observe some additional restrictions:</source>
          <target state="translated">GHCだけが矢印表記を直接実装していますが、他のHaskellシステムで使用するために矢印表記をHaskell 98に変換するプリプロセッサ（&lt;a href=&quot;https://www.haskell.org/arrows/&quot;&gt;arrowsのWebページ&lt;/a&gt;から入手可能）もあります。あなたはまだGHCで矢印プログラムをチェックしたいと思うでしょう。プリプロセッサ出力のタイプエラーを追跡するのは簡単ではありません。GHCとプリプロセッサの両方を対象としたモジュールは、いくつかの追加の制限を遵守する必要があります。</target>
        </trans-unit>
        <trans-unit id="030de1c351ae0b62dc7102e4cd4c0fd4463e840e" translate="yes" xml:space="preserve">
          <source>Although quantified constraints are a little like local instance declarations, they differ in one big way: the local instances are written by the compiler, not the user, and hence cannot introduce incoherence. Consider</source>
          <target state="translated">量化された制約は、ローカル・インスタンスの宣言に少し似ていますが、大きな違いがあります。以下を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="917df874b8dc3f0710c076dbfbabbd379b501cb5" translate="yes" xml:space="preserve">
          <source>Although the distinction between &lt;em&gt;file&lt;/em&gt; symbolic links and &lt;em&gt;directory&lt;/em&gt; symbolic links does not exist on POSIX systems, on Windows this is an intrinsic property of every symbolic link and cannot be changed without recreating the link. A file symbolic link that actually points to a directory will fail to dereference and vice versa. Moreover, creating symbolic links on Windows may require privileges unavailable to users outside the Administrators group. Portable programs that use symbolic links should take both into consideration.</source>
          <target state="translated">&lt;em&gt;ファイル&lt;/em&gt;シンボリックリンクと&lt;em&gt;ディレクトリ&lt;/em&gt;シンボリックリンクの違いはPOSIXシステムには存在しませんが、Windowsでは、これはすべてのシンボリックリンクの固有のプロパティであり、リンクを再作成しないと変更できません。実際にディレクトリを指すファイルシンボリックリンクは逆参照に失敗し、逆もまた同様です。さらに、Windowsでシンボリックリンクを作成するには、Administratorsグループ以外のユーザーが使用できない特権が必要になる場合があります。シンボリックリンクを使用するポータブルプログラムでは、両方を考慮する必要があります。</target>
        </trans-unit>
        <trans-unit id="99e9a14b3e8cd2cda9b0d1073e9a3e3d417a68e2" translate="yes" xml:space="preserve">
          <source>Although typechecking &lt;code&gt;T MyInt&lt;/code&gt; will terminate, GHC&amp;rsquo;s termination checker isn&amp;rsquo;t sophisticated enough to determine this, so you&amp;rsquo;ll need to enable &lt;a href=&quot;#extension-UndecidableInstances&quot;&gt;&lt;code&gt;UndecidableInstances&lt;/code&gt;&lt;/a&gt; in order to use this derived instance. If you do go down this route, make sure you can convince yourself that all of the type family instances you&amp;rsquo;re deriving will eventually terminate if used!</source>
          <target state="translated">&lt;code&gt;T MyInt&lt;/code&gt; の型チェックは終了しますが、GHCの終了チェッカーはこれを判別するほど高度ではないため、この派生インスタンスを使用するには、&lt;a href=&quot;#extension-UndecidableInstances&quot;&gt; &lt;code&gt;UndecidableInstances&lt;/code&gt; &lt;/a&gt;を有効にする必要があります。この方法を使用する場合は、派生しているすべてのタイプファミリーインスタンスが使用されると最終的に終了することを確信できることを確認してください。</target>
        </trans-unit>
        <trans-unit id="523b9d21632bf4280da460c9aa733a85b9bf182d" translate="yes" xml:space="preserve">
          <source>Although typechecking &lt;code&gt;T MyInt&lt;/code&gt; will terminate, GHC&amp;rsquo;s termination checker isn&amp;rsquo;t sophisticated enough to determine this, so you&amp;rsquo;ll need to enable &lt;a href=&quot;instances#extension-UndecidableInstances&quot;&gt;&lt;code&gt;UndecidableInstances&lt;/code&gt;&lt;/a&gt; in order to use this derived instance. If you do go down this route, make sure you can convince yourself that all of the type family instances you&amp;rsquo;re deriving will eventually terminate if used!</source>
          <target state="translated">型チェックが &lt;code&gt;T MyInt&lt;/code&gt; あなたが有効にする必要がありますので終了します、GHCの終了チェッカーは、これを決定するための高度な十分ではありません&lt;a href=&quot;instances#extension-UndecidableInstances&quot;&gt; &lt;code&gt;UndecidableInstances&lt;/code&gt; を&lt;/a&gt;この派生したインスタンスを使用するために。このルートをたどる場合は、派生しているすべての型族インスタンスが使用されると最終的に終了することを確信できることを確認してください。</target>
        </trans-unit>
        <trans-unit id="6fee9b71141e5521bd00d271e9f736a2cbff6c7d" translate="yes" xml:space="preserve">
          <source>Although we have given only a few examples here, it should be clear that the addition of dependency information can help to make multiple parameter classes more useful in practice, avoiding ambiguity problems, and allowing more general sets of instance declarations.</source>
          <target state="translated">ここではいくつかの例を挙げましたが、依存関係情報を追加することで、複数のパラメータクラスをより実用的なものにし、曖昧さの問題を回避し、より一般的なインスタンス宣言のセットを可能にすることができることは明らかです。</target>
        </trans-unit>
        <trans-unit id="d34157ee16cf986f86cc94da23a34f265af1348f" translate="yes" xml:space="preserve">
          <source>Although, a data family is &lt;em&gt;introduced&lt;/em&gt; with the keyword &amp;ldquo;&lt;code&gt;data&lt;/code&gt;&amp;rdquo;, a data family &lt;em&gt;instance&lt;/em&gt; can use either &lt;code&gt;data&lt;/code&gt; or &lt;code&gt;newtype&lt;/code&gt;. For example:</source>
          <target state="translated">データファミリは「 &lt;code&gt;data&lt;/code&gt; 」というキーワードで&lt;em&gt;導入され&lt;/em&gt;&lt;em&gt;ます&lt;/em&gt;が、データファミリ&lt;em&gt;インスタンス&lt;/em&gt;は &lt;code&gt;data&lt;/code&gt; または &lt;code&gt;newtype&lt;/code&gt; のいずれかを使用できます。例えば：&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dc69fe6d4cdd92804a7734b80adc8316333f1f44" translate="yes" xml:space="preserve">
          <source>Always fails.</source>
          <target state="translated">いつも失敗する。</target>
        </trans-unit>
        <trans-unit id="d694f7e3dcf06959f0a7fcce2057e4016e3a9632" translate="yes" xml:space="preserve">
          <source>Always write interface files</source>
          <target state="translated">常にインターフェイスファイルを書き込む</target>
        </trans-unit>
        <trans-unit id="acb5edef3f602d225f892db47fe7ee1f895d055d" translate="yes" xml:space="preserve">
          <source>Always write interface files. GHC will normally write interface files automatically, but this flag is useful with &lt;a href=&quot;#ghc-flag--fno-code&quot;&gt;&lt;code&gt;-fno-code&lt;/code&gt;&lt;/a&gt;, which normally suppresses generation of interface files. This is useful if you want to type check over multiple runs of GHC without compiling dependencies.</source>
          <target state="translated">常にインターフェイスファイルを記述します。GHCは通常、インターフェースファイルを自動的に書き込みますが、このフラグは、通常はインターフェースファイルの生成を抑制する&lt;a href=&quot;#ghc-flag--fno-code&quot;&gt; &lt;code&gt;-fno-code&lt;/code&gt; &lt;/a&gt;とともに使用すると便利です。これは、依存関係をコンパイルせずにGHCの複数の実行に対してタイプチェックを実行する場合に便利です。</target>
        </trans-unit>
        <trans-unit id="770876e2d8a6f234b57db2323d7a120bd5cefd2f" translate="yes" xml:space="preserve">
          <source>Ambiguity can be subtle. Consider this example which uses functional dependencies:</source>
          <target state="translated">曖昧さは微妙なものです。機能的な依存関係を使用するこの例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="3ee65b18fc60dcabb8937e100f2503fb55e37a11" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#pragma-INLINE&quot;&gt;&lt;code&gt;INLINE&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#pragma-NOINLINE&quot;&gt;&lt;code&gt;NOINLINE&lt;/code&gt;&lt;/a&gt; pragma may have a &lt;a href=&quot;#pragma-CONLIKE&quot;&gt;&lt;code&gt;CONLIKE&lt;/code&gt;&lt;/a&gt; modifier, which affects matching in &lt;a href=&quot;#pragma-RULES&quot;&gt;&lt;code&gt;RULE&lt;/code&gt;&lt;/a&gt;s (only). See &lt;a href=&quot;#conlike&quot;&gt;How rules interact with CONLIKE pragmas&lt;/a&gt;.</source>
          <target state="translated">An &lt;a href=&quot;#pragma-INLINE&quot;&gt; &lt;code&gt;INLINE&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;#pragma-NOINLINE&quot;&gt; &lt;code&gt;NOINLINE&lt;/code&gt; &lt;/a&gt; pragma may have a &lt;a href=&quot;#pragma-CONLIKE&quot;&gt; &lt;code&gt;CONLIKE&lt;/code&gt; &lt;/a&gt; modifier, which affects matching in &lt;a href=&quot;#pragma-RULES&quot;&gt; &lt;code&gt;RULE&lt;/code&gt; &lt;/a&gt;s (only). See &lt;a href=&quot;#conlike&quot;&gt;How rules interact with CONLIKE pragmas&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="06cb182c0f6b04aac935f9fe503fdf7ae1bfb73a" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#pragma-INLINE&quot;&gt;&lt;code&gt;INLINE&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#pragma-NOINLINE&quot;&gt;&lt;code&gt;NOINLINE&lt;/code&gt;&lt;/a&gt; pragma may have a &lt;a href=&quot;#pragma-CONLIKE&quot;&gt;&lt;code&gt;CONLIKE&lt;/code&gt;&lt;/a&gt; modifier, which affects matching in &lt;a href=&quot;rewrite_rules#pragma-RULES&quot;&gt;&lt;code&gt;RULE&lt;/code&gt;&lt;/a&gt;s (only). See &lt;a href=&quot;rewrite_rules#conlike&quot;&gt;How rules interact with CONLIKE pragmas&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#pragma-INLINE&quot;&gt; &lt;code&gt;INLINE&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#pragma-NOINLINE&quot;&gt; &lt;code&gt;NOINLINE&lt;/code&gt; &lt;/a&gt;プラグマを有していてもよい&lt;a href=&quot;#pragma-CONLIKE&quot;&gt; &lt;code&gt;CONLIKE&lt;/code&gt; の&lt;/a&gt;にマッチングに影響を与える修飾剤、&lt;a href=&quot;rewrite_rules#pragma-RULES&quot;&gt; &lt;code&gt;RULE&lt;/code&gt; &lt;/a&gt; S（のみ）。&lt;a href=&quot;rewrite_rules#conlike&quot;&gt;ルールがCONLIKEプラグマとどのように相互作用するかを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d03a800321c3532f62fd50dbd5f813f55dc2c76d" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#pragma-INLINE&quot;&gt;&lt;code&gt;INLINE&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#pragma-NOINLINE&quot;&gt;&lt;code&gt;NOINLINE&lt;/code&gt;&lt;/a&gt; pragma may have a &lt;code&gt;CONLIKE&lt;/code&gt; modifier, which affects matching in &lt;code&gt;RULE&lt;/code&gt;s (only). See &lt;a href=&quot;#conlike&quot;&gt;How rules interact with CONLIKE pragmas&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#pragma-INLINE&quot;&gt; &lt;code&gt;INLINE&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#pragma-NOINLINE&quot;&gt; &lt;code&gt;NOINLINE&lt;/code&gt; &lt;/a&gt;プラグマを有していてもよい &lt;code&gt;CONLIKE&lt;/code&gt; のにマッチングに影響を与える修飾剤、 &lt;code&gt;RULE&lt;/code&gt; S（のみ）。&lt;a href=&quot;#conlike&quot;&gt;ルールがCONLIKEプラグマとどのように相互作用するかを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="de96fd13e454f7d0ced988da0b0fe6591f42a8af" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt; t&lt;/code&gt; is mutable location that is either empty or contains a value of type &lt;code&gt;t&lt;/code&gt;. It has two fundamental operations: &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; which fills an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; if it is empty and blocks otherwise, and &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; which empties an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; if it is full and blocks otherwise. They can be used in multiple different ways:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt; t&lt;/code&gt; 、空またはタイプの値が含まれている可変位置で &lt;code&gt;t&lt;/code&gt; 。：それは、2つの基本的な操作を持ってい &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; いっぱい &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 、それは別の空とブロックされ、そして場合 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; 空にする &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; それはそう完全かつブロックである場合を。それらは複数の異なる方法で使用できます：</target>
        </trans-unit>
        <trans-unit id="bfc651b7b6015a5d38e8dc9b2d2cd9a41bf19609" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; (pronounced &quot;em-var&quot;) is a synchronising variable, used for communication between concurrent threads. It can be thought of as a box, which may be empty or full.</source>
          <target state="translated">アン &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; （発音は「EM-VAR」）は、同時実行スレッド間の通信に使用される同期変数、です。それは、空または一杯の箱であると考えることができます。</target>
        </trans-unit>
        <trans-unit id="52e415725c78688d42711652a7e4079f14251bb6" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;data-array-io#t:IOArray&quot;&gt;IOArray&lt;/a&gt;&lt;/code&gt; is a mutable, boxed, non-strict array in the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</source>
          <target state="translated">AN &lt;code&gt;&lt;a href=&quot;data-array-io#t:IOArray&quot;&gt;IOArray&lt;/a&gt;&lt;/code&gt; はで変更可能な、箱入り、非厳密な配列で &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナド。型引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e750e5e924cba57bf36a0ebd4161427cec7557d4" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;data-array-io#t:IOArray&quot;&gt;IOArray&lt;/a&gt;&lt;/code&gt; is a mutable, boxed, non-strict array in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</source>
          <target state="translated">An &lt;code&gt;&lt;a href=&quot;data-array-io#t:IOArray&quot;&gt;IOArray&lt;/a&gt;&lt;/code&gt; is a mutable, boxed, non-strict array in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</target>
        </trans-unit>
        <trans-unit id="4a0acc3f7eca8dfaa44c1a33f0fe4a81c5a78694" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;data-array-io#t:IOArray&quot;&gt;IOArray&lt;/a&gt;&lt;/code&gt; is a mutable, boxed, non-strict array in the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</source>
          <target state="translated">AN &lt;code&gt;&lt;a href=&quot;data-array-io#t:IOArray&quot;&gt;IOArray&lt;/a&gt;&lt;/code&gt; はで変更可能な、箱入り、非厳密な配列で &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナド。型引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="34c3205df3a50720edd8ad6a1e53cf3a8ebdb0c5" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;data-array-io-safe#t:IOArray&quot;&gt;IOArray&lt;/a&gt;&lt;/code&gt; is a mutable, boxed, non-strict array in the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</source>
          <target state="translated">AN &lt;code&gt;&lt;a href=&quot;data-array-io-safe#t:IOArray&quot;&gt;IOArray&lt;/a&gt;&lt;/code&gt; はで変更可能な、箱入り、非厳密な配列で &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナド。型引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="4f847ae13cb0b0976d90acd768ce3eab18b000b5" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;data-array-io-safe#t:IOArray&quot;&gt;IOArray&lt;/a&gt;&lt;/code&gt; is a mutable, boxed, non-strict array in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</source>
          <target state="translated">An &lt;code&gt;&lt;a href=&quot;data-array-io-safe#t:IOArray&quot;&gt;IOArray&lt;/a&gt;&lt;/code&gt; is a mutable, boxed, non-strict array in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</target>
        </trans-unit>
        <trans-unit id="a1df649f3e9608bfa59b69ce49171cbd785155b3" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;data-array-io-safe#t:IOArray&quot;&gt;IOArray&lt;/a&gt;&lt;/code&gt; is a mutable, boxed, non-strict array in the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</source>
          <target state="translated">AN &lt;code&gt;&lt;a href=&quot;data-array-io-safe#t:IOArray&quot;&gt;IOArray&lt;/a&gt;&lt;/code&gt; はで変更可能な、箱入り、非厳密な配列で &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナド。型引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="47281938d8ea8fab14ec059d784740642bb1fcd7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;data-array-st#t:STUArray&quot;&gt;STUArray&lt;/a&gt;&lt;/code&gt; will generally be more efficient (in terms of both time and space) than the equivalent boxed version (&lt;code&gt;&lt;a href=&quot;data-array-st#t:STArray&quot;&gt;STArray&lt;/a&gt;&lt;/code&gt;) with the same element type. However, &lt;code&gt;&lt;a href=&quot;data-array-st#t:STUArray&quot;&gt;STUArray&lt;/a&gt;&lt;/code&gt; is strict in its elements - so don't use &lt;code&gt;&lt;a href=&quot;data-array-st#t:STUArray&quot;&gt;STUArray&lt;/a&gt;&lt;/code&gt; if you require the non-strictness that &lt;code&gt;&lt;a href=&quot;data-array-st#t:STArray&quot;&gt;STArray&lt;/a&gt;&lt;/code&gt; provides.</source>
          <target state="translated">AN &lt;code&gt;&lt;a href=&quot;data-array-st#t:STUArray&quot;&gt;STUArray&lt;/a&gt;&lt;/code&gt; は、一般的に等価ボックス化バージョン（より（時間及び空間の両方の点で）より効率的であろう &lt;code&gt;&lt;a href=&quot;data-array-st#t:STArray&quot;&gt;STArray&lt;/a&gt;&lt;/code&gt; 同じ要素型を有します）。ただし、 &lt;code&gt;&lt;a href=&quot;data-array-st#t:STUArray&quot;&gt;STUArray&lt;/a&gt;&lt;/code&gt; の要素は厳密です。 &lt;code&gt;&lt;a href=&quot;data-array-st#t:STArray&quot;&gt;STArray&lt;/a&gt;&lt;/code&gt; 、STArrayが提供する厳密でないことが必要な場合は、 &lt;code&gt;&lt;a href=&quot;data-array-st#t:STUArray&quot;&gt;STUArray&lt;/a&gt;&lt;/code&gt; を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="10ab056c484cefd1634f35523d774bd2bf27bc81" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;data-array-st-safe#t:STUArray&quot;&gt;STUArray&lt;/a&gt;&lt;/code&gt; will generally be more efficient (in terms of both time and space) than the equivalent boxed version (&lt;code&gt;&lt;a href=&quot;data-array-st-safe#t:STArray&quot;&gt;STArray&lt;/a&gt;&lt;/code&gt;) with the same element type. However, &lt;code&gt;&lt;a href=&quot;data-array-st-safe#t:STUArray&quot;&gt;STUArray&lt;/a&gt;&lt;/code&gt; is strict in its elements - so don't use &lt;code&gt;&lt;a href=&quot;data-array-st-safe#t:STUArray&quot;&gt;STUArray&lt;/a&gt;&lt;/code&gt; if you require the non-strictness that &lt;code&gt;&lt;a href=&quot;data-array-st-safe#t:STArray&quot;&gt;STArray&lt;/a&gt;&lt;/code&gt; provides.</source>
          <target state="translated">AN &lt;code&gt;&lt;a href=&quot;data-array-st-safe#t:STUArray&quot;&gt;STUArray&lt;/a&gt;&lt;/code&gt; は、一般的に等価ボックス化バージョン（より（時間及び空間の両方の点で）より効率的であろう &lt;code&gt;&lt;a href=&quot;data-array-st-safe#t:STArray&quot;&gt;STArray&lt;/a&gt;&lt;/code&gt; 同じ要素型を有します）。ただし、 &lt;code&gt;&lt;a href=&quot;data-array-st-safe#t:STUArray&quot;&gt;STUArray&lt;/a&gt;&lt;/code&gt; の要素は厳密です。 &lt;code&gt;&lt;a href=&quot;data-array-st-safe#t:STArray&quot;&gt;STArray&lt;/a&gt;&lt;/code&gt; 、STArrayが提供する厳密でないことが必要な場合は、 &lt;code&gt;&lt;a href=&quot;data-array-st-safe#t:STUArray&quot;&gt;STUArray&lt;/a&gt;&lt;/code&gt; を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="c72c0a99e8a213a03ed1ff5d7bad4f8d34a4fe41" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;ghc-generics#t:M1&quot;&gt;M1&lt;/a&gt;&lt;/code&gt; instance is always required (but it can just ignore the meta-information, as is the case for &lt;code&gt;encode&lt;/code&gt; above).</source>
          <target state="translated">AN &lt;code&gt;&lt;a href=&quot;ghc-generics#t:M1&quot;&gt;M1&lt;/a&gt;&lt;/code&gt; のインスタンスが常に必要とされる（しかしの場合のようにそれだけで、メタ情報を無視することができる &lt;code&gt;encode&lt;/code&gt; 上で）。</target>
        </trans-unit>
        <trans-unit id="c6430d754f6ee1e74237537560c890d61207b930" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;ghc-ioarray#t:IOArray&quot;&gt;IOArray&lt;/a&gt;&lt;/code&gt; is a mutable, boxed, non-strict array in the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</source>
          <target state="translated">AN &lt;code&gt;&lt;a href=&quot;ghc-ioarray#t:IOArray&quot;&gt;IOArray&lt;/a&gt;&lt;/code&gt; はで変更可能な、箱入り、非厳密な配列で &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナド。型引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9fec238ef2447aa47087bb9d112fb0dd69cdcd4c" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; (pronounced &quot;em-var&quot;) is a synchronising variable, used for communication between concurrent threads. It can be thought of as a box, which may be empty or full.</source>
          <target state="translated">アン &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; （発音は「EM-VAR」）は、同時実行スレッド間の通信に使用される同期変数、です。それは、空または一杯の箱であると考えることができます。</target>
        </trans-unit>
        <trans-unit id="e64ebf00aaf703cb98269bd37718878465c05c15" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;INLINE&lt;/code&gt; function is not worker/wrappered by strictness analysis. It&amp;rsquo;s going to be inlined wholesale instead.</source>
          <target state="translated">&lt;code&gt;INLINE&lt;/code&gt; の機能は、労働者/厳密解析によってラップされていません。代わりにインラインホールセールになります。</target>
        </trans-unit>
        <trans-unit id="683b56235dbe6d9de132b9c32113d5f5fe04aa0c" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;InstalledPackageInfo&lt;/code&gt; has a human readable/writable syntax. The functions &lt;code&gt;parseInstalledPackageInfo&lt;/code&gt; and &lt;code&gt;showInstalledPackageInfo&lt;/code&gt; read and write this syntax respectively. Here&amp;rsquo;s an example of the &lt;code&gt;InstalledPackageInfo&lt;/code&gt; for the &lt;code&gt;unix&lt;/code&gt; package:</source>
          <target state="translated">アン &lt;code&gt;InstalledPackageInfo&lt;/code&gt; は、人間の読み出し/書き込み可能な構文があります。関数 &lt;code&gt;parseInstalledPackageInfo&lt;/code&gt; と &lt;code&gt;showInstalledPackageInfo&lt;/code&gt; は、それぞれこの構文を読み書きします。ここでの例です &lt;code&gt;InstalledPackageInfo&lt;/code&gt; 用 &lt;code&gt;unix&lt;/code&gt; パッケージは：</target>
        </trans-unit>
        <trans-unit id="3a2c03ccefc5072e12ca70273302c1ee7ab6f1d5" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;OperatorTable s u m a&lt;/code&gt; is a list of &lt;code&gt;Operator s u m a&lt;/code&gt; lists. The list is ordered in descending precedence. All operators in one list have the same precedence (but may have a different associativity).</source>
          <target state="translated">&lt;code&gt;OperatorTable s u m a&lt;/code&gt; のリストである &lt;code&gt;Operator s u m a&lt;/code&gt; リスト。リストは降順で並べられます。1つのリスト内のすべての演算子の優先順位は同じです（ただし、関連付けが異なる場合があります）。</target>
        </trans-unit>
        <trans-unit id="0f9933684475c3885933d3cb45f7d700d24f1bf2" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;{-# INLINABLE f #-}&lt;/code&gt; pragma on a function &lt;code&gt;f&lt;/code&gt; has the following behaviour:</source>
          <target state="translated">関数 &lt;code&gt;f&lt;/code&gt; の &lt;code&gt;{-# INLINABLE f #-}&lt;/code&gt; プラグマの動作は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b9ded8006363b78c478c9d256d512759af3de706" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;orphan module&lt;/em&gt; orphan module contains at least one &lt;em&gt;orphan instance&lt;/em&gt; or at least one &lt;em&gt;orphan rule&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;オーファンモジュール&lt;/em&gt;孤立モジュールが少なくとも一つ含ま&lt;em&gt;孤立インスタンス&lt;/em&gt;または少なくとも一つの&lt;em&gt;孤立ルール&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e3de3cb88319a179768b2746e40461a71f436143" translate="yes" xml:space="preserve">
          <source>An FFI binding to the hot key part of the Win32 API.</source>
          <target state="translated">Win32 API のホットキー部分への FFI バインディング。</target>
        </trans-unit>
        <trans-unit id="cbfb652fdf79531cc3d86d6d11da84e45c07abbf" translate="yes" xml:space="preserve">
          <source>An FFI binding to the system part of the Win32 API.</source>
          <target state="translated">Win32 API のシステム部分への FFI バインディング。</target>
        </trans-unit>
        <trans-unit id="451395d3497bffe11685a4808d989a520d0e956e" translate="yes" xml:space="preserve">
          <source>An HValueRef with a finalizer</source>
          <target state="translated">ファイナライザを持つHValueRef</target>
        </trans-unit>
        <trans-unit id="d2d296bd0d9d97c26c27e28a4f8f9fc312ec86a0" translate="yes" xml:space="preserve">
          <source>An I/O event.</source>
          <target state="translated">I/Oイベント。</target>
        </trans-unit>
        <trans-unit id="9d61e77c59f8de3e6e0f09bd0569bdcfd960fe05" translate="yes" xml:space="preserve">
          <source>An IO monad wrapped in &lt;code&gt;StateT&lt;/code&gt; inside of &lt;code&gt;ErrorT&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;StateT&lt;/code&gt; 内の &lt;code&gt;ErrorT&lt;/code&gt; ラップされたIOモナド：</target>
        </trans-unit>
        <trans-unit id="7426b52720da94bc2bc36c2af36224d9d16ed966" translate="yes" xml:space="preserve">
          <source>An ML-style language usually generalises the type of any &lt;code&gt;let&lt;/code&gt;-bound or &lt;code&gt;where&lt;/code&gt;-bound variable, so that it is as polymorphic as possible. With the extension &lt;a href=&quot;#extension-MonoLocalBinds&quot;&gt;&lt;code&gt;MonoLocalBinds&lt;/code&gt;&lt;/a&gt; GHC implements a slightly more conservative policy, using the following rules:</source>
          <target state="translated">MLスタイルの言語は通常、 &lt;code&gt;let&lt;/code&gt; -boundまたは &lt;code&gt;where&lt;/code&gt; -bound変数のタイプを一般化するため、可能な限り多態性になります。拡張機能&lt;a href=&quot;#extension-MonoLocalBinds&quot;&gt; &lt;code&gt;MonoLocalBinds&lt;/code&gt; &lt;/a&gt;を使用すると、GHCは次のルールを使用して、やや保守的なポリシーを実装します。</target>
        </trans-unit>
        <trans-unit id="9cefabc3584d4516f625a578f6ab414f96911025" translate="yes" xml:space="preserve">
          <source>An RTS debugging flag; only available if the program was linked with the &lt;a href=&quot;phases#ghc-flag--debug&quot;&gt;&lt;code&gt;-debug&lt;/code&gt;&lt;/a&gt; option. Various values of ⟨x⟩ are provided to enable debug messages and additional runtime sanity checks in different subsystems in the RTS, for example &lt;code&gt;+RTS -Ds -RTS&lt;/code&gt; enables debug messages from the scheduler. Use &lt;code&gt;+RTS -?&lt;/code&gt; to find out which debug flags are supported.</source>
          <target state="translated">RTSデバッグフラグ。プログラムが&lt;a href=&quot;phases#ghc-flag--debug&quot;&gt; &lt;code&gt;-debug&lt;/code&gt; &lt;/a&gt;オプションでリンクされている場合にのみ使用できます。⟨x⟩の様々な値がRTSで異なるサブシステム内のデバッグメッセージと、追加のランタイム妥当性検査を可能にするために提供され、例えば &lt;code&gt;+RTS -Ds -RTS&lt;/code&gt; スケジューラからデバッグメッセージを可能にします。 &lt;code&gt;+RTS -?&lt;/code&gt; 使用-？サポートされているデバッグフラグを確認します。</target>
        </trans-unit>
        <trans-unit id="4e45674dc1c637028f0f01799a8815e6ecb98130" translate="yes" xml:space="preserve">
          <source>An XHTML combinator library.</source>
          <target state="translated">XHTML コンビネータライブラリ。</target>
        </trans-unit>
        <trans-unit id="09858e905a1c37c93edf149194a2d9bb2ce3582b" translate="yes" xml:space="preserve">
          <source>An abstract interface to a unique symbol generator.</source>
          <target state="translated">ユニークなシンボルジェネレータへの抽象的なインターフェースです。</target>
        </trans-unit>
        <trans-unit id="c3d4f7cf1abe842d95a74003b96fc062bd25f990" translate="yes" xml:space="preserve">
          <source>An abstract name for an object, that supports equality and hashing.</source>
          <target state="translated">オブジェクトの抽象的な名前で、平等性とハッシュをサポートします。</target>
        </trans-unit>
        <trans-unit id="c7780c030353da535248bab25cc8ad315039483b" translate="yes" xml:space="preserve">
          <source>An abstract type representing names in the syntax tree.</source>
          <target state="translated">構文ツリー内の名前を表す抽象型。</target>
        </trans-unit>
        <trans-unit id="3739511153de0d9b79bcbb692e2cd72c742f7bd7" translate="yes" xml:space="preserve">
          <source>An abstract type that contains a value for each variant of &lt;code&gt;&lt;a href=&quot;ghc-io-exception#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-exception#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; の各バリアントの値を含む抽象型。</target>
        </trans-unit>
        <trans-unit id="580e2ee0cc2d32003a3cd07143debcb038d87924" translate="yes" xml:space="preserve">
          <source>An abstract type that contains a value for each variant of &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; の各バリアントの値を含む抽象型。</target>
        </trans-unit>
        <trans-unit id="4efb40389fa8d66e189c71d212784428f0bae6b2" translate="yes" xml:space="preserve">
          <source>An abstract type that contains a value for each variant of &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; の各バリアントの値を含む抽象型。</target>
        </trans-unit>
        <trans-unit id="35eff700132dbe6d90bfc15821db76d5acbdf25d" translate="yes" xml:space="preserve">
          <source>An abstract unique object. Objects of type &lt;code&gt;&lt;a href=&quot;data-unique#t:Unique&quot;&gt;Unique&lt;/a&gt;&lt;/code&gt; may be compared for equality and ordering and hashed into &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">抽象の一意のオブジェクト。 &lt;code&gt;&lt;a href=&quot;data-unique#t:Unique&quot;&gt;Unique&lt;/a&gt;&lt;/code&gt; 型のオブジェクトは、等価性と順序付けが比較され、 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; にハッシュされます。</target>
        </trans-unit>
        <trans-unit id="21c7f832db5783c3e7a8088c500d2962ed9384be" translate="yes" xml:space="preserve">
          <source>An accumulating function</source>
          <target state="translated">蓄積機能</target>
        </trans-unit>
        <trans-unit id="b61c87037791a3b504bed8e01931aafc2fc5942c" translate="yes" xml:space="preserve">
          <source>An accumulation monad parameterized by the type &lt;code&gt;w&lt;/code&gt; of output to accumulate.</source>
          <target state="translated">累積する出力のタイプ &lt;code&gt;w&lt;/code&gt; でパラメーター化された累積モナド。</target>
        </trans-unit>
        <trans-unit id="f7cc330fe5c9abb7f58e424cead33a14c496fa0c" translate="yes" xml:space="preserve">
          <source>An accumulation monad parameterized by:</source>
          <target state="translated">によってパラメータ化された蓄積モナド。</target>
        </trans-unit>
        <trans-unit id="282bf0a0b47e57c828188f0a009349e911a1315e" translate="yes" xml:space="preserve">
          <source>An action which sends output to the terminal. That output may mix plain text with control characters and escape sequences, along with delays (called &quot;padding&quot;) required by some older terminals.</source>
          <target state="translated">端末に出力を送るアクション。この出力は、プレーンテキストに制御文字やエスケープシーケンスを混ぜたもので、古いターミナルで必要とされる遅延 (パディングと呼ばれる)を伴うものもあります。</target>
        </trans-unit>
        <trans-unit id="40621b0cc1f828021b505715d70a5c3153c57b8e" translate="yes" xml:space="preserve">
          <source>An alias for &lt;a href=&quot;#ghc-flag--ddump-ticked&quot;&gt;&lt;code&gt;-ddump-ticked&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--ddump-ticked&quot;&gt; &lt;code&gt;-ddump-ticked&lt;/code&gt; &lt;/a&gt;のエイリアス。</target>
        </trans-unit>
        <trans-unit id="35feeff338058bf37c6e24f0244366473367a8b7" translate="yes" xml:space="preserve">
          <source>An alias for &lt;a href=&quot;#rts-flag---nonmoving-gc&quot;&gt;&lt;code&gt;--nonmoving-gc&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">An alias for &lt;a href=&quot;#rts-flag---nonmoving-gc&quot;&gt; &lt;code&gt;--nonmoving-gc&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6cbb51b39bb5ee9826d87215f4821611643eee9b" translate="yes" xml:space="preserve">
          <source>An alias for &lt;a href=&quot;debugging#ghc-flag--ddump-ticked&quot;&gt;&lt;code&gt;-ddump-ticked&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;debugging#ghc-flag--ddump-ticked&quot;&gt; &lt;code&gt;-ddump-ticked&lt;/code&gt; &lt;/a&gt;のエイリアス。</target>
        </trans-unit>
        <trans-unit id="8b292908bf0d2936fbcd16984eafba397dbc968a" translate="yes" xml:space="preserve">
          <source>An alias for &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="a37301a9d0fe7303c2440af029087f787465968c" translate="yes" xml:space="preserve">
          <source>An alias for &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="39f245d534c3b422c9edc0bbe9598133641be7f8" translate="yes" xml:space="preserve">
          <source>An alias for modifyState for backwards compatibility.</source>
          <target state="translated">下位互換性のためのmodifyStateのエイリアス。</target>
        </trans-unit>
        <trans-unit id="99e294020522b0531d3dadc4d8bef2d2fd79bf01" translate="yes" xml:space="preserve">
          <source>An alias for putState for backwards compatibility.</source>
          <target state="translated">後方互換性のための putState のエイリアス。</target>
        </trans-unit>
        <trans-unit id="709a0f933c96849749d91e33427992ea15ebf916" translate="yes" xml:space="preserve">
          <source>An allocation strategy that does not trim any of the filled buffers before converting it to a chunk</source>
          <target state="translated">チャンクに変換する前に、満たされたバッファをトリミングしないアロケーション戦略。</target>
        </trans-unit>
        <trans-unit id="7cb706568d5dabeb772af56d1f92199b0a7ee949" translate="yes" xml:space="preserve">
          <source>An allocation strategy that guarantees that at least half of the allocated memory is used for live data</source>
          <target state="translated">割り当てられたメモリの少なくとも半分がライブデータのために使用されることを保証する割り当て戦略</target>
        </trans-unit>
        <trans-unit id="c8a358c8e089a8a6ad543274e213736fdd805423" translate="yes" xml:space="preserve">
          <source>An alternative sort. Sorts by checking which hole fits subsume other hole fits, such that if hole fit a could be used as hole fits for hole fit b, then b appears before a in the output. It is more precise than the default sort, but also a lot slower, since a subsumption check has to be run for each pair of valid hole fits.</source>
          <target state="translated">代替ソート。どのホールフィットが他のホールフィットを包含するかをチェックしてソートします。これは、デフ ォル ト ソ ー ト ソ ー ト よ り も 正確ですが、 有効なホールフィットの各組に対してサブサムセーションチェックを実行する必要があ るため、 ソ ー ト が非常に遅くなります。</target>
        </trans-unit>
        <trans-unit id="85c8ea4d2925dfd094cde7445f68c6da3c037dbf" translate="yes" xml:space="preserve">
          <source>An ambiguous selector may be disambiguated by the type being &amp;ldquo;pushed down&amp;rdquo; to the occurrence of the selector (see &lt;a href=&quot;#higher-rank-type-inference&quot;&gt;Type inference&lt;/a&gt; for more details on what &amp;ldquo;pushed down&amp;rdquo; means). For example, the following are permitted:</source>
          <target state="translated">あいまいなセレクターは、セレクターの出現に対して型が「プッシュダウン」されることで一義化される場合があります（「プッシュダウン」の意味の詳細については、&lt;a href=&quot;#higher-rank-type-inference&quot;&gt;型推論&lt;/a&gt;を参照してください）。たとえば、以下は許可されます。</target>
        </trans-unit>
        <trans-unit id="530369416b52ec99a3cf0ffe2567f4c3f5a96342" translate="yes" xml:space="preserve">
          <source>An ambiguous selector may be disambiguated by the type being &amp;ldquo;pushed down&amp;rdquo; to the occurrence of the selector (see &lt;a href=&quot;rank_polymorphism#higher-rank-type-inference&quot;&gt;Type inference&lt;/a&gt; for more details on what &amp;ldquo;pushed down&amp;rdquo; means). For example, the following are permitted:</source>
          <target state="translated">あいまいなセレクターは、セレクターの出現に「プッシュダウン」されるタイプによって明確になる場合があります（「プッシュダウン」の意味の詳細については、&lt;a href=&quot;rank_polymorphism#higher-rank-type-inference&quot;&gt;タイプの推論&lt;/a&gt;を参照してください）。たとえば、次のものが許可されます。</target>
        </trans-unit>
        <trans-unit id="cb9d0b854775c17b2c5aff97ccac59e5200fac6e" translate="yes" xml:space="preserve">
          <source>An amortized running time is given for each operation, with &lt;em&gt;n&lt;/em&gt; referring to the length of the sequence and &lt;em&gt;i&lt;/em&gt; being the integral index used by some operations. These bounds hold even in a persistent (shared) setting.</source>
          <target state="translated">償却実行時間は各操作に対して与えられます&lt;em&gt;。n&lt;/em&gt;はシーケンスの長さを表し、&lt;em&gt;i&lt;/em&gt;は一部の操作で使用される整数のインデックスです。これらの境界は、永続的な（共有）設定でも保持されます。</target>
        </trans-unit>
        <trans-unit id="6ce9dd94558d3a6cb7c491d6ce3c6738daadefaa" translate="yes" xml:space="preserve">
          <source>An annotation (side-metadata) attached at a particular point in a &lt;code&gt;Doc&lt;/code&gt;. Allows carrying non-pretty-printed data around in a &lt;code&gt;Doc&lt;/code&gt; that is attached at particular points in the structure. Once the &lt;code&gt;Doc&lt;/code&gt; is render to an output type (such as &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;), we can also retrieve where in the rendered document our annotations start and end (see &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#t:Span&quot;&gt;Span&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:renderSpans&quot;&gt;renderSpans&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Doc&lt;/code&gt; の特定のポイントに添付された注釈（サイドメタデータ）。構造内の特定のポイントに接続されている &lt;code&gt;Doc&lt;/code&gt; 内で、きれいに印刷されていないデータを運ぶことができます。 &lt;code&gt;Doc&lt;/code&gt; が出力タイプ（ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; など）にレンダリングされたら、レンダリングされたドキュメントのどこで注釈が開始および終了するかを取得することもできます（ &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#t:Span&quot;&gt;Span&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:renderSpans&quot;&gt;renderSpans&lt;/a&gt;&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="11d313098b3ec3f985281ba5d03b5e871c638cd4" translate="yes" xml:space="preserve">
          <source>An annotation (side-metadata) attached at a particular point in a &lt;code&gt;Doc&lt;/code&gt;. Allows carrying non-pretty-printed data around in a &lt;code&gt;Doc&lt;/code&gt; that is attached at particular points in the structure. Once the &lt;code&gt;Doc&lt;/code&gt; is render to an output type (such as &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;), we can also retrieve where in the rendered document our annotations start and end (see &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#t:Span&quot;&gt;Span&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:renderSpans&quot;&gt;renderSpans&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">An annotation (side-metadata) attached at a particular point in a &lt;code&gt;Doc&lt;/code&gt; . Allows carrying non-pretty-printed data around in a &lt;code&gt;Doc&lt;/code&gt; that is attached at particular points in the structure. Once the &lt;code&gt;Doc&lt;/code&gt; is render to an output type (such as &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; ), we can also retrieve where in the rendered document our annotations start and end (see &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#t:Span&quot;&gt;Span&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:renderSpans&quot;&gt;renderSpans&lt;/a&gt;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="c22b50b6aacfdd3de4e2ab9f37143ab2eebbb870" translate="yes" xml:space="preserve">
          <source>An annotation (side-metadata) attached at a particular point in a &lt;code&gt;Doc&lt;/code&gt;. Allows carrying non-pretty-printed data around in a &lt;code&gt;Doc&lt;/code&gt; that is attached at particular points in the structure. Once the &lt;code&gt;Doc&lt;/code&gt; is render to an output type (such as &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;), we can also retrieve where in the rendered document our annotations start and end (see &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#t:Span&quot;&gt;Span&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:renderSpans&quot;&gt;renderSpans&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Doc&lt;/code&gt; 内の特定のポイントに添付された注釈（サイドメタデータ）。構造内の特定のポイントに添付されている &lt;code&gt;Doc&lt;/code&gt; で、きれいに印刷されていないデータを持ち運ぶことができます。いったん &lt;code&gt;Doc&lt;/code&gt; 出力タイプ（などにレンダリングされた &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; ）、我々はまた、どこレンダリングされた文書では、当社の注釈の開始と終了（参照取得することができます &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#t:Span&quot;&gt;Span&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:renderSpans&quot;&gt;renderSpans&lt;/a&gt;&lt;/code&gt; を）。</target>
        </trans-unit>
        <trans-unit id="a4a5bd4a90cc650cc053e5d8d2d60daef1c2e891" translate="yes" xml:space="preserve">
          <source>An applicative functor that collects a monoid (e.g. lists) of errors. A sequence of computations fails if any of its components do, but unlike monads made with &lt;code&gt;ExceptT&lt;/code&gt; from &lt;a href=&quot;control-monad-trans-except&quot;&gt;Control.Monad.Trans.Except&lt;/a&gt;, these computations continue after an error, collecting all the errors.</source>
          <target state="translated">エラーのモノイド（例：リスト）を収集するアプリケーションファンクタ。そのコンポーネントのいずれかを行う場合の計算のシーケンスは失敗しますが、で作られたモナドとは異なり &lt;code&gt;ExceptT&lt;/code&gt; から&lt;a href=&quot;control-monad-trans-except&quot;&gt;Control.Monad.Trans.Except&lt;/a&gt;、これらの計算は、すべてのエラーを収集し、エラーの後に続けます。</target>
        </trans-unit>
        <trans-unit id="bc070c7328fa5d3571a45acb079f74b2dde0b0b6" translate="yes" xml:space="preserve">
          <source>An applicative version of &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; の適用バージョン。</target>
        </trans-unit>
        <trans-unit id="3cf3d115218ff8bff3d10483bba1404c9ab4c403" translate="yes" xml:space="preserve">
          <source>An applicative version of &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; の適用バージョン。</target>
        </trans-unit>
        <trans-unit id="97a468ebf5cf1c674abd871e054ea2dee404c992" translate="yes" xml:space="preserve">
          <source>An applicative version of &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; の適用バージョン。</target>
        </trans-unit>
        <trans-unit id="714a850af4acc6ad522e25162362c1e340e36f2e" translate="yes" xml:space="preserve">
          <source>An applicative version of &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; の適用バージョン。</target>
        </trans-unit>
        <trans-unit id="3e4069001a63b95ceb7dda105321002b8f3e3ba6" translate="yes" xml:space="preserve">
          <source>An arbitrary machine address assumed to point outside the garbage-collected heap.</source>
          <target state="translated">ガベージコレクションされたヒープの外側を指すと仮定した任意のマシンアドレス。</target>
        </trans-unit>
        <trans-unit id="8bf5023dfbbe40314a1c91c2950b274f9f5333cc" translate="yes" xml:space="preserve">
          <source>An array type has the form &lt;code&gt;(a i e)&lt;/code&gt; where &lt;code&gt;a&lt;/code&gt; is the array type constructor (kind &lt;code&gt;* -&amp;gt; * -&amp;gt; *&lt;/code&gt;), &lt;code&gt;i&lt;/code&gt; is the index type (a member of the class &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;), and &lt;code&gt;e&lt;/code&gt; is the element type.</source>
          <target state="translated">配列型の形式は &lt;code&gt;(a i e)&lt;/code&gt; で &lt;code&gt;a&lt;/code&gt; は配列型コンストラクター（種類 &lt;code&gt;* -&amp;gt; * -&amp;gt; *&lt;/code&gt; ）、 &lt;code&gt;i&lt;/code&gt; はインデックス型（クラス &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; のメンバー）、 &lt;code&gt;e&lt;/code&gt; は要素型です。</target>
        </trans-unit>
        <trans-unit id="f333085677822b91b2d6266691a5fadac493bad0" translate="yes" xml:space="preserve">
          <source>An array type has the form &lt;code&gt;(a i e)&lt;/code&gt; where &lt;code&gt;a&lt;/code&gt; is the array type constructor (kind &lt;code&gt;* -&amp;gt; * -&amp;gt; *&lt;/code&gt;), &lt;code&gt;i&lt;/code&gt; is the index type (a member of the class &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;), and &lt;code&gt;e&lt;/code&gt; is the element type. The &lt;code&gt;IArray&lt;/code&gt; class is parameterised over both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;e&lt;/code&gt;, so that instances specialised to certain element types can be defined.</source>
          <target state="translated">配列型の形式は &lt;code&gt;(a i e)&lt;/code&gt; で &lt;code&gt;a&lt;/code&gt; は配列型コンストラクター（種類 &lt;code&gt;* -&amp;gt; * -&amp;gt; *&lt;/code&gt; ）、 &lt;code&gt;i&lt;/code&gt; はインデックス型（クラス &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; のメンバー）、 &lt;code&gt;e&lt;/code&gt; は要素型です。 &lt;code&gt;IArray&lt;/code&gt; のクラスは両方の上パラメータ化された &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;e&lt;/code&gt; のインスタンスを定義することができる特定の要素タイプに特化したように、。</target>
        </trans-unit>
        <trans-unit id="fd0764a85da5b607f0944932a419f16b24701a2a" translate="yes" xml:space="preserve">
          <source>An array type has the form &lt;code&gt;(a i e)&lt;/code&gt; where &lt;code&gt;a&lt;/code&gt; is the array type constructor (kind &lt;code&gt;* -&amp;gt; * -&amp;gt; *&lt;/code&gt;), &lt;code&gt;i&lt;/code&gt; is the index type (a member of the class &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;), and &lt;code&gt;e&lt;/code&gt; is the element type.</source>
          <target state="translated">An array type has the form &lt;code&gt;(a i e)&lt;/code&gt; where &lt;code&gt;a&lt;/code&gt; is the array type constructor (kind &lt;code&gt;* -&amp;gt; * -&amp;gt; *&lt;/code&gt; ), &lt;code&gt;i&lt;/code&gt; is the index type (a member of the class &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; ), and &lt;code&gt;e&lt;/code&gt; is the element type.</target>
        </trans-unit>
        <trans-unit id="2b79318296e9a1df365be13462713df9a22390f7" translate="yes" xml:space="preserve">
          <source>An array type has the form &lt;code&gt;(a i e)&lt;/code&gt; where &lt;code&gt;a&lt;/code&gt; is the array type constructor (kind &lt;code&gt;* -&amp;gt; * -&amp;gt; *&lt;/code&gt;), &lt;code&gt;i&lt;/code&gt; is the index type (a member of the class &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;), and &lt;code&gt;e&lt;/code&gt; is the element type. The &lt;code&gt;IArray&lt;/code&gt; class is parameterised over both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;e&lt;/code&gt;, so that instances specialised to certain element types can be defined.</source>
          <target state="translated">An array type has the form &lt;code&gt;(a i e)&lt;/code&gt; where &lt;code&gt;a&lt;/code&gt; is the array type constructor (kind &lt;code&gt;* -&amp;gt; * -&amp;gt; *&lt;/code&gt; ), &lt;code&gt;i&lt;/code&gt; is the index type (a member of the class &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; ), and &lt;code&gt;e&lt;/code&gt; is the element type. The &lt;code&gt;IArray&lt;/code&gt; class is parameterised over both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;e&lt;/code&gt; , so that instances specialised to certain element types can be defined.</target>
        </trans-unit>
        <trans-unit id="59f77e407160339257d6e7e19656f935267c2d3f" translate="yes" xml:space="preserve">
          <source>An array type has the form &lt;code&gt;(a i e)&lt;/code&gt; where &lt;code&gt;a&lt;/code&gt; is the array type constructor (kind &lt;code&gt;* -&amp;gt; * -&amp;gt; *&lt;/code&gt;), &lt;code&gt;i&lt;/code&gt; is the index type (a member of the class &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;), and &lt;code&gt;e&lt;/code&gt; is the element type.</source>
          <target state="translated">配列型の形式は &lt;code&gt;(a i e)&lt;/code&gt; ここで &lt;code&gt;a&lt;/code&gt; は配列型コンストラクター（kind &lt;code&gt;* -&amp;gt; * -&amp;gt; *&lt;/code&gt; ）、 &lt;code&gt;i&lt;/code&gt; はインデックス型（クラス &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; のメンバー）、 &lt;code&gt;e&lt;/code&gt; は要素型です。</target>
        </trans-unit>
        <trans-unit id="bbf6f68d6cac61b7ec8e86bda765cc696db93453" translate="yes" xml:space="preserve">
          <source>An array type has the form &lt;code&gt;(a i e)&lt;/code&gt; where &lt;code&gt;a&lt;/code&gt; is the array type constructor (kind &lt;code&gt;* -&amp;gt; * -&amp;gt; *&lt;/code&gt;), &lt;code&gt;i&lt;/code&gt; is the index type (a member of the class &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;), and &lt;code&gt;e&lt;/code&gt; is the element type. The &lt;code&gt;IArray&lt;/code&gt; class is parameterised over both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;e&lt;/code&gt;, so that instances specialised to certain element types can be defined.</source>
          <target state="translated">配列型の形式は &lt;code&gt;(a i e)&lt;/code&gt; ここで &lt;code&gt;a&lt;/code&gt; は配列型コンストラクター（kind &lt;code&gt;* -&amp;gt; * -&amp;gt; *&lt;/code&gt; ）、 &lt;code&gt;i&lt;/code&gt; はインデックス型（クラス &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; のメンバー）、 &lt;code&gt;e&lt;/code&gt; は要素型です。 &lt;code&gt;IArray&lt;/code&gt; のクラスは両方の上パラメータ化された &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;e&lt;/code&gt; のインスタンスを定義することができる特定の要素タイプに特化したように、。</target>
        </trans-unit>
        <trans-unit id="e15133cd1e98c4cec2d0b6095c794ad5b60cd611" translate="yes" xml:space="preserve">
          <source>An assembly-language source file, usually produced by the compiler.</source>
          <target state="translated">アセンブリ言語のソースファイルで、通常はコンパイラによって作成されます。</target>
        </trans-unit>
        <trans-unit id="e94a0acd4447829f7e16f2e0681abc5b94e72a47" translate="yes" xml:space="preserve">
          <source>An associated type or data family declaration has a CUSK precisely if its enclosing class has a CUSK.</source>
          <target state="translated">関連付けられた型またはデータファミリ宣言は、その包含クラスがCUSKを持っている場合、正確にはCUSKを持っています。</target>
        </trans-unit>
        <trans-unit id="9a839446e60f1231647068f143a30b2ecfe17004" translate="yes" xml:space="preserve">
          <source>An association is a pair of the form &lt;code&gt;(i,x)&lt;/code&gt;, which defines the value of the array at index &lt;code&gt;i&lt;/code&gt; to be &lt;code&gt;x&lt;/code&gt;. The array is undefined if any index in the list is out of bounds. If any two associations in the list have the same index, the value at that index is implementation-dependent. (In GHC, the last value specified for that index is used. Other implementations will also do this for unboxed arrays, but Haskell 98 requires that for &lt;code&gt;Array&lt;/code&gt; the value at such indices is bottom.)</source>
          <target state="translated">会合は、フォームのペアである &lt;code&gt;(i,x)&lt;/code&gt; インデックスで配列の値を定義し、 &lt;code&gt;i&lt;/code&gt; があると &lt;code&gt;x&lt;/code&gt; 。リスト内のインデックスが範囲外の場合、配列は未定義です。リスト内の2つの関連付けが同じインデックスを持つ場合、そのインデックスの値は実装に依存します。（GHCでは、そのインデックスに指定された最後の値が使用されます。他の実装でもボックス化されていない配列に対してこれを行いますが、Haskell 98では、 &lt;code&gt;Array&lt;/code&gt; の場合、そのようなインデックスの値が下であることを要求しています。）</target>
        </trans-unit>
        <trans-unit id="3afb607a33ed15aef025831322f63f1a04d9a09d" translate="yes" xml:space="preserve">
          <source>An associative binary operation</source>
          <target state="translated">連想二項演算</target>
        </trans-unit>
        <trans-unit id="1147ac2d130bd449477786144a5c8a1b76f89092" translate="yes" xml:space="preserve">
          <source>An associative operation</source>
          <target state="translated">連想演算</target>
        </trans-unit>
        <trans-unit id="8ce47487694776c0a4231b6d5c5f44ab8e16a07a" translate="yes" xml:space="preserve">
          <source>An associative operation with identity &lt;code&gt;&lt;a href=&quot;control-arrow#v:zeroArrow&quot;&gt;zeroArrow&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">アイデンティティが &lt;code&gt;&lt;a href=&quot;control-arrow#v:zeroArrow&quot;&gt;zeroArrow&lt;/a&gt;&lt;/code&gt; の連想操作。</target>
        </trans-unit>
        <trans-unit id="8f702f0949aff10d3524aea50e9531b4e09362c3" translate="yes" xml:space="preserve">
          <source>An associative operation.</source>
          <target state="translated">連想操作。</target>
        </trans-unit>
        <trans-unit id="d3660f5f8cdd17a078c28b99ce21ad421e42c7b8" translate="yes" xml:space="preserve">
          <source>An associative operation. The default definition is</source>
          <target state="translated">連想操作。デフォルトの定義は</target>
        </trans-unit>
        <trans-unit id="e8163d537de96930d1551a2bbdc32c863286eb63" translate="yes" xml:space="preserve">
          <source>An attempt was made to evaluate an element of an array that had not been initialized.</source>
          <target state="translated">初期化されていない配列の要素を評価しようとしました。</target>
        </trans-unit>
        <trans-unit id="578f42dbdd127ca4fccb4e419110bd0c78e68ac1" translate="yes" xml:space="preserve">
          <source>An attempt was made to index an array outside its declared bounds.</source>
          <target state="translated">宣言された範囲外の配列をインデックス化しようとしました。</target>
        </trans-unit>
        <trans-unit id="424d796a4ce39c6e1c11527f6f9821335c409254" translate="yes" xml:space="preserve">
          <source>An easy extension is to allow arbitrary contexts before the constructor. For example:</source>
          <target state="translated">簡単な拡張としては、コンストラクタの前に任意のコンテキストを許可することです。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="aa4b3e7e1ba4fecc1be2a9b715baa31cf5742128" translate="yes" xml:space="preserve">
          <source>An edge from the first vertex to the second.</source>
          <target state="translated">第1の頂点から第2の頂点への辺。</target>
        </trans-unit>
        <trans-unit id="37f36fd364f93ab076dac05112c547d9ca7b71a6" translate="yes" xml:space="preserve">
          <source>An edit to apply to a &lt;code&gt;&lt;a href=&quot;ghc-event-timeout#t:TimeoutQueue&quot;&gt;TimeoutQueue&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-event-timeout#t:TimeoutQueue&quot;&gt;TimeoutQueue&lt;/a&gt;&lt;/code&gt; に適用する編集。</target>
        </trans-unit>
        <trans-unit id="4dfc37a5d88a5cef62918450d61f82ec135f66a3" translate="yes" xml:space="preserve">
          <source>An efficient deserialiser of &lt;code&gt;&lt;a href=&quot;../array-0.5.4.0/data-array-unboxed#t:UArray&quot;&gt;UArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../array-0.5.4.0/data-array-unboxed#t:UArray&quot;&gt;UArray&lt;/a&gt;&lt;/code&gt; の効率的なデシリアライザ。</target>
        </trans-unit>
        <trans-unit id="9abf3b4b588f08354857f088c37e909380ccb8c8" translate="yes" xml:space="preserve">
          <source>An efficient get method for lazy ByteStrings. Fails if fewer than &lt;code&gt;n&lt;/code&gt; bytes are left in the input.</source>
          <target state="translated">遅延ByteStringの効率的なgetメソッド。入力に残っているバイト数が &lt;code&gt;n&lt;/code&gt; バイト未満の場合は失敗します。</target>
        </trans-unit>
        <trans-unit id="779d338d8d1396567da301a0915991a8253fcb3d" translate="yes" xml:space="preserve">
          <source>An efficient get method for strict ByteStrings. Fails if fewer than &lt;code&gt;n&lt;/code&gt; bytes are left in the input. If &lt;code&gt;n &amp;lt;= 0&lt;/code&gt; then the empty string is returned.</source>
          <target state="translated">厳密なByteStringの効率的なgetメソッド。入力に残っているバイト数が &lt;code&gt;n&lt;/code&gt; バイト未満の場合は失敗します。場合 &lt;code&gt;n &amp;lt;= 0&lt;/code&gt; 空の文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="64a0398b712134b5c921639d4662413422147955" translate="yes" xml:space="preserve">
          <source>An efficient implementation of integer sets.</source>
          <target state="translated">整数集合の効率的な実装。</target>
        </trans-unit>
        <trans-unit id="ed7ff4240488108e796dda83b8f8a885a21e7f97" translate="yes" xml:space="preserve">
          <source>An efficient implementation of maps from integer keys to values (dictionaries).</source>
          <target state="translated">整数キーから値(辞書)へのマップの効率的な実装。</target>
        </trans-unit>
        <trans-unit id="300c10f93efb7d8e708d1538e08d8d7e538b4d21" translate="yes" xml:space="preserve">
          <source>An efficient implementation of ordered maps from keys to values (dictionaries).</source>
          <target state="translated">キーから値(辞書)への順序付きマップの効率的な実装。</target>
        </trans-unit>
        <trans-unit id="9c17d2bea255ffe0974a30b48457084e4d307e5f" translate="yes" xml:space="preserve">
          <source>An efficient primitive to write a strict ByteString into the output buffer. It flushes the current buffer, and writes the argument into a new chunk.</source>
          <target state="translated">厳格な ByteString を出力バッファに書き込むための効率的なプリミティブ。現在のバッファをフラッシュし、引数を新しいチャンクに書き込みます。</target>
        </trans-unit>
        <trans-unit id="409ad01192a6191df9780f4e796153ec80522cce" translate="yes" xml:space="preserve">
          <source>An efficient serialiser of &lt;code&gt;&lt;a href=&quot;../array-0.5.4.0/data-array-unboxed#t:UArray&quot;&gt;UArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../array-0.5.4.0/data-array-unboxed#t:UArray&quot;&gt;UArray&lt;/a&gt;&lt;/code&gt; の効率的なシリアライザ。</target>
        </trans-unit>
        <trans-unit id="e6015ce2daa6533d6818de8c86f4d41b485e9542" translate="yes" xml:space="preserve">
          <source>An empty document</source>
          <target state="translated">空のドキュメント</target>
        </trans-unit>
        <trans-unit id="ce3be77c03c4e3699f0fd72a41b3ed4e3a5f892e" translate="yes" xml:space="preserve">
          <source>An empty graph.</source>
          <target state="translated">空のグラフ。</target>
        </trans-unit>
        <trans-unit id="60a7cfffba592bf3fc0701b5fe4cb99cba424d1c" translate="yes" xml:space="preserve">
          <source>An empty immutable array.</source>
          <target state="translated">空の不変配列。</target>
        </trans-unit>
        <trans-unit id="110c4ac770ed6cac3b6a8ac6f3769b9a42dfce56" translate="yes" xml:space="preserve">
          <source>An empty piece of HTML.</source>
          <target state="translated">HTMLの空の部分。</target>
        </trans-unit>
        <trans-unit id="863735067735f8b0df4ec524f2091a6814c632b6" translate="yes" xml:space="preserve">
          <source>An encoding in which Unicode code points are translated to bytes by taking the code point modulo 256. When decoding, bytes are translated directly into the equivalent code point.</source>
          <target state="translated">Unicode のコードポイントがコードポイント modulo 256 を取ることによってバイトに翻訳されるエンコーディング。デコード時には、バイトは等価なコードポイントに直接翻訳される。</target>
        </trans-unit>
        <trans-unit id="379731e74a8a7303ee4ec5e7849e8a388a898a4e" translate="yes" xml:space="preserve">
          <source>An equivalent form for that example, avoiding explicit &lt;code&gt;forall&lt;/code&gt; uses &lt;a href=&quot;#pattern-type-sigs&quot;&gt;Pattern type signatures&lt;/a&gt;:</source>
          <target state="translated">その例と同等の形式で、明示的な &lt;code&gt;forall&lt;/code&gt; を使用しない場合は、&lt;a href=&quot;#pattern-type-sigs&quot;&gt;パターンタイプシグネチャを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="2317b7500211efb11dba6702f8ff358cab78a9f0" translate="yes" xml:space="preserve">
          <source>An error indicating that an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because one of its arguments already exists.</source>
          <target state="translated">引数の1つがすでに存在するため、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 操作が失敗したことを示すエラー。</target>
        </trans-unit>
        <trans-unit id="9c5c1ab24132ff1db5fc41f514c9dd3d02f6830b" translate="yes" xml:space="preserve">
          <source>An error indicating that an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because one of its arguments does not exist.</source>
          <target state="translated">引数の1つが存在しないため、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 操作が失敗したことを示すエラー。</target>
        </trans-unit>
        <trans-unit id="a44dec7bdac91aad0789fdf13b8614448d0c3e1b" translate="yes" xml:space="preserve">
          <source>An error indicating that an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because the operation was not possible. Any computation which returns an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; result may fail with &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt;. In some cases, an implementation will not be able to distinguish between the possible error causes. In this case it should fail with &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">操作が不可能だったため、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 操作が失敗したことを示すエラー。 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 結果を返す計算は、 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt; で失敗する可能性があります。場合によっては、実装で考えられるエラーの原因を区別できないことがあります。この場合、 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt; で失敗するはずです。</target>
        </trans-unit>
        <trans-unit id="4f839fc9cbc9a7a46f4c3ef068799b74f941ae12" translate="yes" xml:space="preserve">
          <source>An error indicating that an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because the user does not have sufficient operating system privilege to perform that operation.</source>
          <target state="translated">ユーザーにその操作を実行するための十分なオペレーティングシステム権限がないため、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 操作が失敗したことを示すエラー。</target>
        </trans-unit>
        <trans-unit id="353bc4608932aa64def2cb47401212891190e861" translate="yes" xml:space="preserve">
          <source>An error indicating that an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because one of its arguments already exists.</source>
          <target state="translated">An error indicating that an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because one of its arguments already exists.</target>
        </trans-unit>
        <trans-unit id="afac72a08e880e338eb3054c3cc4cb3b2c8d874a" translate="yes" xml:space="preserve">
          <source>An error indicating that an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because one of its arguments does not exist.</source>
          <target state="translated">An error indicating that an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because one of its arguments does not exist.</target>
        </trans-unit>
        <trans-unit id="fa08b0c059f66a3dd7b2f5959546d1e6588e7a9f" translate="yes" xml:space="preserve">
          <source>An error indicating that an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because the operation was not possible. Any computation which returns an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; result may fail with &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt;. In some cases, an implementation will not be able to distinguish between the possible error causes. In this case it should fail with &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">An error indicating that an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because the operation was not possible. Any computation which returns an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; result may fail with &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt; . In some cases, an implementation will not be able to distinguish between the possible error causes. In this case it should fail with &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3fdd36f108f41c6140824253d332a12f73fc5123" translate="yes" xml:space="preserve">
          <source>An error indicating that an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because the user does not have sufficient operating system privilege to perform that operation.</source>
          <target state="translated">An error indicating that an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because the user does not have sufficient operating system privilege to perform that operation.</target>
        </trans-unit>
        <trans-unit id="ea03f394d021d1cd4da4e7fc5d83c7e482c79f96" translate="yes" xml:space="preserve">
          <source>An error indicating that an &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because one of its arguments already exists.</source>
          <target state="translated">引数の1つがすでに存在するため、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 操作が失敗したことを示すエラー。</target>
        </trans-unit>
        <trans-unit id="f72e0410c352366f2cdd4edcd2b3af6c0cb92e24" translate="yes" xml:space="preserve">
          <source>An error indicating that an &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because one of its arguments does not exist.</source>
          <target state="translated">引数の1つが存在しないために &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 操作が失敗したことを示すエラー。</target>
        </trans-unit>
        <trans-unit id="97941a9e54766e034e75e82cc25885eff0ea6ff1" translate="yes" xml:space="preserve">
          <source>An error indicating that an &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because the operation was not possible. Any computation which returns an &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; result may fail with &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt;. In some cases, an implementation will not be able to distinguish between the possible error causes. In this case it should fail with &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">操作ができなかったために &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 操作が失敗したことを示すエラー。 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 結果を返す計算は、 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt; で失敗する可能性があります。場合によっては、実装は考えられるエラーの原因を区別できないことがあります。この場合、 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt; で失敗するはずです。</target>
        </trans-unit>
        <trans-unit id="7d948b579969e230d68945e4ae51508275ca602c" translate="yes" xml:space="preserve">
          <source>An error indicating that an &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because the user does not have sufficient operating system privilege to perform that operation.</source>
          <target state="translated">ユーザーがその操作を実行するのに十分なオペレーティングシステム特権を持っていないために &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 操作が失敗したことを示すエラー。</target>
        </trans-unit>
        <trans-unit id="e66b1c80ba834855aae9f9d43d3592e67e98a671" translate="yes" xml:space="preserve">
          <source>An error indicating that an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because one of its arguments already exists.</source>
          <target state="translated">引数の1つがすでに存在するため、 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 操作が失敗したことを示すエラー。</target>
        </trans-unit>
        <trans-unit id="84e040a37ce664544af44aa14d72c1c5b1f5fdf7" translate="yes" xml:space="preserve">
          <source>An error indicating that an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because one of its arguments does not exist.</source>
          <target state="translated">引数の1つが存在しないため、 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 操作が失敗したことを示すエラー。</target>
        </trans-unit>
        <trans-unit id="3aaf153bc2f4b4a705a6640c9e8a13f49833a532" translate="yes" xml:space="preserve">
          <source>An error indicating that an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because one of its arguments is a single-use resource, which is already being used (for example, opening the same file twice for writing might give this error).</source>
          <target state="translated">引数の1つが既に使用されている使い捨てリソースであるため、 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 操作が失敗したことを示すエラー（たとえば、書き込みのために同じファイルを2回開くと、このエラーが発生する場合があります）。</target>
        </trans-unit>
        <trans-unit id="fbdf1497d8ba0761ae0294d7cba12faf35e238d8" translate="yes" xml:space="preserve">
          <source>An error indicating that an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because the device is full.</source>
          <target state="translated">デバイスがいっぱいのため、 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 操作が失敗したことを示すエラー。</target>
        </trans-unit>
        <trans-unit id="587d82956d47a090dc9d6a33c66777d643e7e317" translate="yes" xml:space="preserve">
          <source>An error indicating that an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because the end of file has been reached.</source>
          <target state="translated">ファイルの終わりに達したため、 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 操作が失敗したことを示すエラー。</target>
        </trans-unit>
        <trans-unit id="0cfca5871ab77adff3cb578bb0516ceb582413e3" translate="yes" xml:space="preserve">
          <source>An error indicating that an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because the operation was not possible. Any computation which returns an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; result may fail with &lt;code&gt;&lt;a href=&quot;system-io-error#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt;. In some cases, an implementation will not be able to distinguish between the possible error causes. In this case it should fail with &lt;code&gt;&lt;a href=&quot;system-io-error#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">操作が不可能だったため、 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 操作が失敗したことを示すエラー。 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 結果を返す計算は、 &lt;code&gt;&lt;a href=&quot;system-io-error#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt; で失敗する可能性があります。場合によっては、実装で考えられるエラーの原因を区別できないことがあります。この場合、 &lt;code&gt;&lt;a href=&quot;system-io-error#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt; で失敗するはずです。</target>
        </trans-unit>
        <trans-unit id="5f1a557e45ff222ff19723cc3b00907ab8191320" translate="yes" xml:space="preserve">
          <source>An error indicating that an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operation failed because the user does not have sufficient operating system privilege to perform that operation.</source>
          <target state="translated">ユーザーにその操作を実行するための十分なオペレーティングシステム権限がないため、 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 操作が失敗したことを示すエラー。</target>
        </trans-unit>
        <trans-unit id="502a1695e398902350a22b419e2e0b7872570bf2" translate="yes" xml:space="preserve">
          <source>An error indicating that the operation failed because the resource vanished. See &lt;code&gt;&lt;a href=&quot;system-io-error#v:resourceVanishedErrorType&quot;&gt;resourceVanishedErrorType&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">リソースが消失したために操作が失敗したことを示すエラー。 &lt;code&gt;&lt;a href=&quot;system-io-error#v:resourceVanishedErrorType&quot;&gt;resourceVanishedErrorType&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="cb8588ea4ffd2451e25b457e42e986ce533b40b9" translate="yes" xml:space="preserve">
          <source>An example from &lt;em&gt;The Craft of Functional Programming&lt;/em&gt;, Simon Thompson (&lt;a href=&quot;http://www.cs.kent.ac.uk/people/staff/sjt/&quot;&gt;http://www.cs.kent.ac.uk/people/staff/sjt/&lt;/a&gt;), Addison-Wesley 1999: &quot;Given an arbitrary tree, transform it to a tree of integers in which the original elements are replaced by natural numbers, starting from 0. The same element has to be replaced by the same number at every occurrence, and when we meet an as-yet-unvisited element we have to find a 'new' number to match it with:&quot;</source>
          <target state="translated">以下からの例&lt;em&gt;関数型プログラミングのクラフト&lt;/em&gt;、サイモン・トンプソン（&lt;a href=&quot;http://www.cs.kent.ac.uk/people/staff/sjt/&quot;&gt;http://www.cs.kent.ac.uk/people/staff/sjt/&lt;/a&gt;）、アディソン・ウェスリー1999：「任意の木を考えると、ツリーに変換元の要素が0から始まる自然数に置き換えられる整数の集合です。同じ要素は、出現するたびに同じ番号に置き換えられる必要があります。まだアクセスしていない要素に遭遇した場合は、新しい要素を見つける必要があります。 '一致する番号： &quot;</target>
        </trans-unit>
        <trans-unit id="26553b69de76ef603493e22f9b56e8e8f0e7cc55" translate="yes" xml:space="preserve">
          <source>An example in which using &lt;code&gt;RULES&lt;/code&gt; for specialisation will Win Big:</source>
          <target state="translated">特殊化に &lt;code&gt;RULES&lt;/code&gt; を使用する例が大きな勝利を収めます。</target>
        </trans-unit>
        <trans-unit id="d94ee3fed69a3a2d6cbb28624b1e2c3a6d9674bc" translate="yes" xml:space="preserve">
          <source>An example is shown in the opening example, where &lt;code&gt;sortWith&lt;/code&gt; is supplied with a function that lets it find out the &lt;code&gt;sum salary&lt;/code&gt; for any item in the list comprehension it transforms.</source>
          <target state="translated">例は冒頭の例に示されています &lt;code&gt;sortWith&lt;/code&gt; は、変換するリスト内包内の任意の項目の &lt;code&gt;sum salary&lt;/code&gt; を調べる関数が用意されています。</target>
        </trans-unit>
        <trans-unit id="92f996a82b303141412a037410a747eab994f16e" translate="yes" xml:space="preserve">
          <source>An example of a pre-processor is to convert your source files to the input encoding that GHC expects, i.e. create a script &lt;code&gt;convert.sh&lt;/code&gt; containing the lines:</source>
          <target state="translated">プリプロセッサの例は、ソースファイルをGHCが期待する入力エンコーディングに変換することです。つまり、次の行を含むスクリプト &lt;code&gt;convert.sh&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="46db75079dc947994d3c8f73c95f7d8d5b14f912" translate="yes" xml:space="preserve">
          <source>An example of a suitable Euclidean function, for &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;'s instance, is &lt;code&gt;&lt;a href=&quot;prelude#v:abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; のインスタンスに適したユークリッド関数の例は、 &lt;code&gt;&lt;a href=&quot;prelude#v:abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4c01fc02e927a60926df24dbe6dfbd1b4746279b" translate="yes" xml:space="preserve">
          <source>An example of using &lt;code&gt;&lt;a href=&quot;data-sequence#v:sortOn&quot;&gt;sortOn&lt;/a&gt;&lt;/code&gt; might be to sort a &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; of strings according to their length:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-sequence#v:sortOn&quot;&gt;sortOn&lt;/a&gt;&lt;/code&gt; の使用例は、文字列の &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; をその長さに従ってソートすることです。</target>
        </trans-unit>
        <trans-unit id="bd7ad3a60a7ec7010ecf8274734b34b569a3aa76" translate="yes" xml:space="preserve">
          <source>An example of using &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt;&lt;/code&gt; might be to sort a &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; of strings according to their length:</source>
          <target state="translated">使用例 &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt;&lt;/code&gt; は、ソートするかもしれない &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; 、それらの長さに応じて文字列のを：</target>
        </trans-unit>
        <trans-unit id="fd78ec4b25edfc34c070db47b86faa55268ea5fe" translate="yes" xml:space="preserve">
          <source>An example of using &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sortOn&quot;&gt;sortOn&lt;/a&gt;&lt;/code&gt; might be to sort a &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; of strings according to their length:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sortOn&quot;&gt;sortOn&lt;/a&gt;&lt;/code&gt; の使用例は、文字列の &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; をその長さに従ってソートすることです。</target>
        </trans-unit>
        <trans-unit id="2aef6af3f5288d7dec723009106ae656cb18d0ec" translate="yes" xml:space="preserve">
          <source>An example of using &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt;&lt;/code&gt; might be to sort a &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; of strings according to their length:</source>
          <target state="translated">使用例 &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt;&lt;/code&gt; は、ソートするかもしれない &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; 、それらの長さに応じて文字列のを：</target>
        </trans-unit>
        <trans-unit id="37825ef9057435b5d70e42055abe88a2f5caa9ef" translate="yes" xml:space="preserve">
          <source>An example of using &lt;code&gt;Adder.dll&lt;/code&gt; from C++ is:</source>
          <target state="translated">C ++から &lt;code&gt;Adder.dll&lt;/code&gt; を使用する例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="284aba923f06dcb4f47c7f3c609dae9afb54f97b" translate="yes" xml:space="preserve">
          <source>An example of using &lt;code&gt;Adder.dll&lt;/code&gt; from VBA is:</source>
          <target state="translated">VBAの &lt;code&gt;Adder.dll&lt;/code&gt; の使用例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0a2f6a683146590a81cb59662a6f31a14e0007fe" translate="yes" xml:space="preserve">
          <source>An example of using &lt;code&gt;lookup&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;lookup&lt;/code&gt; の使用例：</target>
        </trans-unit>
        <trans-unit id="62a7372438651bafa2669d1145fa021654f7a3ee" translate="yes" xml:space="preserve">
          <source>An example use of this library for a simple read-eval-print loop (REPL) is the following:</source>
          <target state="translated">このライブラリを単純な読み取り-評価-印刷ループ(REPL)に使用する例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="57f1733124f33be242778620a4eb6cdc6409382d" translate="yes" xml:space="preserve">
          <source>An example using &lt;code&gt;&lt;a href=&quot;control-monad#v:mfilter&quot;&gt;mfilter&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; monad:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; モナドで &lt;code&gt;&lt;a href=&quot;control-monad#v:mfilter&quot;&gt;mfilter&lt;/a&gt;&lt;/code&gt; を使用する例：</target>
        </trans-unit>
        <trans-unit id="f481ad49809e7c27b79d2e6d830283b22c04c1f7" translate="yes" xml:space="preserve">
          <source>An example:</source>
          <target state="translated">一例です。</target>
        </trans-unit>
        <trans-unit id="381e8e3e19da9b996ca14e0adbfa4195c12da0b2" translate="yes" xml:space="preserve">
          <source>An exception thrown to a thread by &lt;code&gt;&lt;a href=&quot;system-timeout#v:timeout&quot;&gt;timeout&lt;/a&gt;&lt;/code&gt; to interrupt a timed-out computation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-timeout#v:timeout&quot;&gt;timeout&lt;/a&gt;&lt;/code&gt; された計算を中断するためにタイムアウトによってスレッドにスローされた例外。</target>
        </trans-unit>
        <trans-unit id="a213b0b1515044c4c78bd78637c0113c5cd8be80" translate="yes" xml:space="preserve">
          <source>An exception to be thrown.</source>
          <target state="translated">投げられる例外。</target>
        </trans-unit>
        <trans-unit id="fdf570a64c3420a5e9dc66825959db440f96c3c1" translate="yes" xml:space="preserve">
          <source>An exception type for representing Unicode encoding errors.</source>
          <target state="translated">Unicode エンコーディングエラーを表す例外型。</target>
        </trans-unit>
        <trans-unit id="efb9885da89ae0153ca6bd437d81d85bcf6d2a5e" translate="yes" xml:space="preserve">
          <source>An exception-safe wrapper for modifying the contents of an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;. Like &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:withMVar&quot;&gt;withMVar&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:modifyMVar&quot;&gt;modifyMVar&lt;/a&gt;&lt;/code&gt; will replace the original contents of the &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; if an exception is raised during the operation. This function is only atomic if there are no other producers for this &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; のコンテンツを変更するための例外セーフなラッパー。 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:withMVar&quot;&gt;withMVar&lt;/a&gt;&lt;/code&gt; と同様に、 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:modifyMVar&quot;&gt;modifyMVar&lt;/a&gt;&lt;/code&gt; は、操作中に例外が発生した場合、 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; の元のコンテンツを置き換えます。この関数は、この &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; のプロデューサーが他にない場合にのみアトミックです。</target>
        </trans-unit>
        <trans-unit id="f7bad0722f6e1639c9b8bf58917fbc9a749282ca" translate="yes" xml:space="preserve">
          <source>An experimental flag to expose all unfoldings, even for very large or recursive functions. This allows for all functions to be inlined while usually GHC would avoid inlining larger functions.</source>
          <target state="translated">非常に大きな関数や再帰的な関数であっても、すべての展開を公開するための実験的フラグです。これにより、すべての関数をインライン化することができますが、通常 GHC はより大きな関数のインライン化は避けます。</target>
        </trans-unit>
        <trans-unit id="fcc169bba3c04120ce581359b5205c6e6861fa64" translate="yes" xml:space="preserve">
          <source>An expression</source>
          <target state="translated">表情</target>
        </trans-unit>
        <trans-unit id="5b3e9db1ce65c03995d328bea346bec14a73a082" translate="yes" xml:space="preserve">
          <source>An expression that didn't typecheck during compile time was called. This is only possible with -fdefer-type-errors. The &lt;code&gt;String&lt;/code&gt; gives details about the failed type check.</source>
          <target state="translated">コンパイル時にタイプチェックしない式が呼び出されました。これは-fdefer-type-errorsでのみ可能です。 &lt;code&gt;String&lt;/code&gt; 失敗した型チェックの詳細を提供します。</target>
        </trans-unit>
        <trans-unit id="23d6c8ea4520ef478bc2079b23a73769921d85ca" translate="yes" xml:space="preserve">
          <source>An expression type signature (&lt;a href=&quot;#exp-type-sigs&quot;&gt;Expression type signatures&lt;/a&gt;)</source>
          <target state="translated">式タイプのシグニチャー（&lt;a href=&quot;#exp-type-sigs&quot;&gt;式タイプのシグニチャー&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="befd82a9275f38fcab59cee9b3a9893ec9498cda" translate="yes" xml:space="preserve">
          <source>An expression type signature that has &lt;em&gt;explicit&lt;/em&gt; quantification (using &lt;code&gt;forall&lt;/code&gt;) brings into scope the explicitly-quantified type variables, in the annotated expression. For example:</source>
          <target state="translated">&lt;em&gt;明示的な&lt;/em&gt;数量化（ &lt;code&gt;forall&lt;/code&gt; を使用）を持つ式の型シグネチャは、注釈付きの式で、明示的に数量化された型変数のスコープに入ります。例えば：</target>
        </trans-unit>
        <trans-unit id="b82cc29cb694eff0d6c543cfd3b0fa40875fc57b" translate="yes" xml:space="preserve">
          <source>An extended Haskell interface file, produced by the Haskell compiler.</source>
          <target state="translated">Haskell コンパイラが生成する拡張 Haskell インターフェースファイル。</target>
        </trans-unit>
        <trans-unit id="06078bbc223f3f2c54001e817424da6925e7e456" translate="yes" xml:space="preserve">
          <source>An extra flag to pass to the C compiler.</source>
          <target state="translated">C コンパイラに渡す追加フラグ。</target>
        </trans-unit>
        <trans-unit id="4ada7ba8223269b5dc2b7e6f71e6be14db026a01" translate="yes" xml:space="preserve">
          <source>An extra flag to pass to the linker.</source>
          <target state="translated">リンカに渡すための余分なフラグ。</target>
        </trans-unit>
        <trans-unit id="ff063cb1c991404edd003923980f0718291bfcf8" translate="yes" xml:space="preserve">
          <source>An extra-constraints wildcard can also lead to zero extra constraints to be inferred, e.g.</source>
          <target state="translated">余分な制約のワイルドカードは、推測される余分な制約をゼロにすることもできます。</target>
        </trans-unit>
        <trans-unit id="8737dcbc364a0104937da45530e573d364b0ae37" translate="yes" xml:space="preserve">
          <source>An extra-constraints wildcard shouldn&amp;rsquo;t prevent the programmer from already listing the constraints he knows or wants to annotate, e.g.</source>
          <target state="translated">追加の制約ワイルドカードは、プログラマーが知っている、または注釈を付けたい制約をプログラマーが既にリストすることを妨げるべきではありません。例えば、</target>
        </trans-unit>
        <trans-unit id="d29ed66c17bed0542d86b370f6bc6043d2a378e4" translate="yes" xml:space="preserve">
          <source>An extremely light-weight, fast, and limited representation of a string of up to (2*WORDSIZE - 2) bits. In fact, there are two representations, misleadingly named bit queue builder and bit queue. The builder supports only &lt;code&gt;&lt;a href=&quot;utils-containers-internal-bitqueue#v:emptyQB&quot;&gt;emptyQB&lt;/a&gt;&lt;/code&gt;, creating an empty builder, and &lt;code&gt;&lt;a href=&quot;utils-containers-internal-bitqueue#v:snocQB&quot;&gt;snocQB&lt;/a&gt;&lt;/code&gt;, enqueueing a bit. The bit queue builder is then turned into a bit queue using &lt;code&gt;&lt;a href=&quot;utils-containers-internal-bitqueue#v:buildQ&quot;&gt;buildQ&lt;/a&gt;&lt;/code&gt;, after which bits can be removed one by one using &lt;code&gt;&lt;a href=&quot;utils-containers-internal-bitqueue#v:unconsQ&quot;&gt;unconsQ&lt;/a&gt;&lt;/code&gt;. If the size limit is exceeded, further operations will silently produce nonsense.</source>
          <target state="translated">（2 * WORDSIZE-2）ビットまでの文字列の非常に軽量で高速な限定表現。実際には、誤解を招きやすい名前のビットキュービルダーとビットキューの2つの表現があります。ビルダーのサポートのみ &lt;code&gt;&lt;a href=&quot;utils-containers-internal-bitqueue#v:emptyQB&quot;&gt;emptyQB&lt;/a&gt;&lt;/code&gt; 、空のビルダーを作成し、 &lt;code&gt;&lt;a href=&quot;utils-containers-internal-bitqueue#v:snocQB&quot;&gt;snocQB&lt;/a&gt;&lt;/code&gt; ビットをエンキュー、。ビット・キュー・ビルダは、次に使用ビットキューになっている &lt;code&gt;&lt;a href=&quot;utils-containers-internal-bitqueue#v:buildQ&quot;&gt;buildQ&lt;/a&gt;&lt;/code&gt; をビットを使用して一枚ずつ除去することができ、その後、 &lt;code&gt;&lt;a href=&quot;utils-containers-internal-bitqueue#v:unconsQ&quot;&gt;unconsQ&lt;/a&gt;&lt;/code&gt; を。サイズの制限を超えた場合、それ以降の操作は黙って無意味な結果を生成します。</target>
        </trans-unit>
        <trans-unit id="4a1b2653a1c9d958510f1ed844f74e8ecb8d1c49" translate="yes" xml:space="preserve">
          <source>An idiom that is common in some languages is to find the numeric offset of a character or substring, then use that number to split or trim the searched string. With a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; value, this approach would require two O(n) operations: one to perform the search, and one to operate from wherever the search ended.</source>
          <target state="translated">一部の言語で一般的な慣用法は、文字または部分文字列の数値オフセットを見つけ、その数値を使用して検索文字列を分割またはトリミングすることです。 &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; つの検索を実行すると、検索が終了したどこからでも動作するように1：値、このアプローチは、2つのO（n）の操作を必要とします。</target>
        </trans-unit>
        <trans-unit id="67c017344c03d68395eeb6821615e8a8bfe1033a" translate="yes" xml:space="preserve">
          <source>An idle-time garbage collection has been started.</source>
          <target state="translated">アイドルタイムのゴミ収集が開始されました。</target>
        </trans-unit>
        <trans-unit id="0d426bd25abbccce84e0bdf47cb062c833bbb269" translate="yes" xml:space="preserve">
          <source>An illustrative example for these strictness properties is the implementation of Base64 decoding (&lt;a href=&quot;http://en.wikipedia.org/wiki/Base64&quot;&gt;http://en.wikipedia.org/wiki/Base64&lt;/a&gt;).</source>
          <target state="translated">これらの厳格性プロパティの実例は、Base64デコードの実装です（&lt;a href=&quot;http://en.wikipedia.org/wiki/Base64&quot;&gt;http://en.wikipedia.org/wiki/Base64&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="dbd827594115c2bfaffbdec57e877da3c74390fc" translate="yes" xml:space="preserve">
          <source>An illustrative example for these strictness properties is the implementation of Base64 decoding (&lt;a href=&quot;https://en.wikipedia.org/wiki/Base64&quot;&gt;http://en.wikipedia.org/wiki/Base64&lt;/a&gt;).</source>
          <target state="translated">これらの厳密性プロパティの実例は、Base64デコードの実装です（&lt;a href=&quot;https://en.wikipedia.org/wiki/Base64&quot;&gt;http://en.wikipedia.org/wiki/Base64&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="d20888eadb4852094fcef2f3603d26df3e4539de" translate="yes" xml:space="preserve">
          <source>An implementation is entitled to assume the following laws about these operations:</source>
          <target state="translated">実装は、これらの操作について、以下の法律を前提とする権利があります。</target>
        </trans-unit>
        <trans-unit id="5dd9779568fb3b84f00870e9c9dc5e99b34e41c6" translate="yes" xml:space="preserve">
          <source>An implementation is free to flush the buffer more frequently, but not less frequently, than specified above. The output buffer is emptied as soon as it has been written out.</source>
          <target state="translated">実装は、上記で指定された頻度よりも多くの頻度でバッファをフラッシュすることができますが、それ以下の頻度ではありません。出力バッファは書き出されるとすぐに空になります。</target>
        </trans-unit>
        <trans-unit id="764ec8855ef58c6a8f42aecb228f30ad41274dec" translate="yes" xml:space="preserve">
          <source>An implementation of the old &lt;code&gt;atomicModifyMutVar#&lt;/code&gt; primop in terms of the new &lt;code&gt;&lt;a href=&quot;ghc-exts#v:atomicModifyMutVar2-35-&quot;&gt;atomicModifyMutVar2#&lt;/a&gt;&lt;/code&gt; primop, for backwards compatibility. The type of this function is a bit bogus. It's best to think of it as having type</source>
          <target state="translated">下位互換性のために、新しい &lt;code&gt;&lt;a href=&quot;ghc-exts#v:atomicModifyMutVar2-35-&quot;&gt;atomicModifyMutVar2#&lt;/a&gt;&lt;/code&gt; プリモップに関する古い &lt;code&gt;atomicModifyMutVar#&lt;/code&gt; プリモップの実装。この関数の型は少し偽です。タイプがあると考えるのが一番です</target>
        </trans-unit>
        <trans-unit id="055bfb77bc4911c1d902e9c7e877458502ecd8a2" translate="yes" xml:space="preserve">
          <source>An implicit parameter is &lt;em&gt;bound&lt;/em&gt; using the standard &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;where&lt;/code&gt; binding forms. For example, we define the &lt;code&gt;min&lt;/code&gt; function by binding &lt;code&gt;cmp&lt;/code&gt;.</source>
          <target state="translated">暗黙のパラメータがされて&lt;em&gt;バインドされ&lt;/em&gt;、標準的な使用 &lt;code&gt;let&lt;/code&gt; か、 &lt;code&gt;where&lt;/code&gt; のフォームを結合します。たとえば、 &lt;code&gt;cmp&lt;/code&gt; をバインドして &lt;code&gt;min&lt;/code&gt; 関数を定義します。</target>
        </trans-unit>
        <trans-unit id="83f900390293c670e8a8d65bb9afeb5cc8fcf2b6" translate="yes" xml:space="preserve">
          <source>An implicit parameter occurs in an expression using the special form &lt;code&gt;?x&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is any valid identifier (e.g. &lt;code&gt;ord ?x&lt;/code&gt; is a valid expression). Use of this construct also introduces a new dynamic-binding constraint in the type of the expression. For example, the following definition shows how we can define an implicitly parameterised sort function in terms of an explicitly parameterised &lt;code&gt;sortBy&lt;/code&gt; function:</source>
          <target state="translated">暗黙のパラメーターは、特殊な形式 &lt;code&gt;?x&lt;/code&gt; を使用する式で発生します。ここで、 &lt;code&gt;x&lt;/code&gt; は任意の有効な識別子です（たとえば、 &lt;code&gt;ord ?x&lt;/code&gt; は有効な式です）。このコンストラクトを使用すると、式のタイプに新しい動的バインディング制約も導入されます。たとえば、次の定義は、明示的にパラメーター化された &lt;code&gt;sortBy&lt;/code&gt; 関数に関して、暗黙的にパラメーター化された並べ替え関数を定義する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="2e728fe00beb5b98842848d858c512e28ed428db" translate="yes" xml:space="preserve">
          <source>An implicit-parameter binding group must be a collection of simple bindings to implicit-style variables (no function-style bindings, and no type signatures); these bindings are neither polymorphic or recursive.</source>
          <target state="translated">暗黙的パラメータバインディンググループは、暗黙的スタイルの変数への単純なバインディングの集合でなければなりません(関数スタイルのバインディングはなく、型のシグネチャもありません)。</target>
        </trans-unit>
        <trans-unit id="055d0a98d0fca1648c6546c9fc6ca5cb2c9b9157" translate="yes" xml:space="preserve">
          <source>An implicit-parameter type constraint differs from other type class constraints in the following way: All uses of a particular implicit parameter must have the same type. This means that the type of &lt;code&gt;(?x, ?x)&lt;/code&gt; is &lt;code&gt;(?x::a) =&amp;gt; (a,a)&lt;/code&gt;, and not &lt;code&gt;(?x::a, ?x::b) =&amp;gt; (a, b)&lt;/code&gt;, as would be the case for type class constraints.</source>
          <target state="translated">暗黙的なパラメーターの型制約は、次の点で他の型クラスの制約と異なります。特定の暗黙的なパラメーターのすべての使用は、同じ型でなければなりません。つまり、 &lt;code&gt;(?x, ?x)&lt;/code&gt; のタイプは &lt;code&gt;(?x::a) =&amp;gt; (a,a)&lt;/code&gt; であり、 &lt;code&gt;(?x::a, ?x::b) =&amp;gt; (a, b)&lt;/code&gt; はありません） ）、型クラス制約の場合と同様に。</target>
        </trans-unit>
        <trans-unit id="06fa3a1fc7569e6b102829c5e3a0c13f3b3b71a7" translate="yes" xml:space="preserve">
          <source>An infinitely &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; value hangs:</source>
          <target state="translated">無限に &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; の値がハングします：</target>
        </trans-unit>
        <trans-unit id="48ffc89b558ed7d94c8d0903a4ca6f8c47772a67" translate="yes" xml:space="preserve">
          <source>An infinitely &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; value hangs:</source>
          <target state="translated">無限に &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 値がハングします：</target>
        </trans-unit>
        <trans-unit id="41e571a04d49adc778f99f9915a653a4d8383f97" translate="yes" xml:space="preserve">
          <source>An infix synonym for &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; のインフィックス同義語。</target>
        </trans-unit>
        <trans-unit id="676b0466c764d24182ade55c20826949e1613615" translate="yes" xml:space="preserve">
          <source>An infix synonym for &lt;code&gt;&lt;a href=&quot;prelude#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; のインフィックス同義語。</target>
        </trans-unit>
        <trans-unit id="45e7ca78829cc48699173c5bd84e19553844a4fb" translate="yes" xml:space="preserve">
          <source>An initial environment.</source>
          <target state="translated">初期環境。</target>
        </trans-unit>
        <trans-unit id="032f25891e62fb8921b2ffd173fccd585c489d81" translate="yes" xml:space="preserve">
          <source>An installed package is either &lt;em&gt;exposed&lt;/em&gt; or &lt;em&gt;hidden&lt;/em&gt; by default. Packages hidden by default are listed in parentheses (e.g. &lt;code&gt;(lang-1.0)&lt;/code&gt;), or possibly in blue if your terminal supports colour, in the output of &lt;code&gt;ghc-pkg list&lt;/code&gt;. Command-line flags, described below, allow you to expose a hidden package or hide an exposed one. Only modules from exposed packages may be imported by your Haskell code; if you try to import a module from a hidden package, GHC will emit an error message. It should be noted that a hidden package might still get linked with your program as a dependency of an exposed package, it is only restricted from direct imports.</source>
          <target state="translated">インストールされたパッケージは、デフォルトで&lt;em&gt;公開&lt;/em&gt;または&lt;em&gt;非表示になっ&lt;/em&gt;ています。 &lt;code&gt;ghc-pkg list&lt;/code&gt; の出力では、デフォルトで非表示になっているパッケージが括弧内に表示されます（例： &lt;code&gt;(lang-1.0)&lt;/code&gt; ）、またはターミナルが色をサポートしている場合は青で表示されます。以下で説明するコマンドラインフラグを使用すると、非表示のパッケージを公開したり、公開したパッケージを非表示にしたりできます。 Haskellコードでインポートできるのは、公開パッケージのモジュールのみです。非表示のパッケージからモジュールをインポートしようとすると、GHCはエラーメッセージを出力します。非表示のパッケージは、公開されたパッケージの依存関係としてプログラムにリンクされる可能性があることに注意してください。直接のインポートのみが制限されています。</target>
        </trans-unit>
        <trans-unit id="6e9e64155c356c6955cab41597813ffebcaa65a5" translate="yes" xml:space="preserve">
          <source>An instance can define either this and &lt;code&gt;&lt;a href=&quot;data-bits#v:rotateL&quot;&gt;rotateL&lt;/a&gt;&lt;/code&gt; or the unified &lt;code&gt;&lt;a href=&quot;data-bits#v:rotate&quot;&gt;rotate&lt;/a&gt;&lt;/code&gt;, depending on which is more convenient for the type in question.</source>
          <target state="translated">インスタンスは、対象のタイプにとってどちらがより便利であるかに応じて、thisと &lt;code&gt;&lt;a href=&quot;data-bits#v:rotateL&quot;&gt;rotateL&lt;/a&gt;&lt;/code&gt; または統一 &lt;code&gt;&lt;a href=&quot;data-bits#v:rotate&quot;&gt;rotate&lt;/a&gt;&lt;/code&gt; れたrotateを定義できます。</target>
        </trans-unit>
        <trans-unit id="d84b0a9b1da15cdbb5efba9440685e88ebcccf36" translate="yes" xml:space="preserve">
          <source>An instance can define either this and &lt;code&gt;&lt;a href=&quot;data-bits#v:rotateR&quot;&gt;rotateR&lt;/a&gt;&lt;/code&gt; or the unified &lt;code&gt;&lt;a href=&quot;data-bits#v:rotate&quot;&gt;rotate&lt;/a&gt;&lt;/code&gt;, depending on which is more convenient for the type in question.</source>
          <target state="translated">インスタンスは、対象の型にとってどちらがより便利であるかに応じて、thisと &lt;code&gt;&lt;a href=&quot;data-bits#v:rotateR&quot;&gt;rotateR&lt;/a&gt;&lt;/code&gt; または統合 &lt;code&gt;&lt;a href=&quot;data-bits#v:rotate&quot;&gt;rotate&lt;/a&gt;&lt;/code&gt; れたrotateを定義できます。</target>
        </trans-unit>
        <trans-unit id="771255935064afcdb9c5d67ea14ceedd0c402b64" translate="yes" xml:space="preserve">
          <source>An instance can define either this and &lt;code&gt;&lt;a href=&quot;data-bits#v:shiftL&quot;&gt;shiftL&lt;/a&gt;&lt;/code&gt; or the unified &lt;code&gt;&lt;a href=&quot;data-bits#v:shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt;, depending on which is more convenient for the type in question.</source>
          <target state="translated">インスタンスは、問題の型にとってどちらがより便利であるかに応じて、thisと &lt;code&gt;&lt;a href=&quot;data-bits#v:shiftL&quot;&gt;shiftL&lt;/a&gt;&lt;/code&gt; または統合 &lt;code&gt;&lt;a href=&quot;data-bits#v:shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; いずれかを定義できます。</target>
        </trans-unit>
        <trans-unit id="c91e8ae7413d71da86962a384a3de3aff328dd8d" translate="yes" xml:space="preserve">
          <source>An instance can define either this and &lt;code&gt;&lt;a href=&quot;data-bits#v:shiftR&quot;&gt;shiftR&lt;/a&gt;&lt;/code&gt; or the unified &lt;code&gt;&lt;a href=&quot;data-bits#v:shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt;, depending on which is more convenient for the type in question.</source>
          <target state="translated">インスタンスは、問題の型にとってどちらがより便利であるかに応じて、thisと &lt;code&gt;&lt;a href=&quot;data-bits#v:shiftR&quot;&gt;shiftR&lt;/a&gt;&lt;/code&gt; または統合 &lt;code&gt;&lt;a href=&quot;data-bits#v:shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; いずれかを定義できます。</target>
        </trans-unit>
        <trans-unit id="9505be87e1ced40bfc25bab37f391a9491bdd4ef" translate="yes" xml:space="preserve">
          <source>An instance can define either this unified &lt;code&gt;&lt;a href=&quot;data-bits#v:rotate&quot;&gt;rotate&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-bits#v:rotateL&quot;&gt;rotateL&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bits#v:rotateR&quot;&gt;rotateR&lt;/a&gt;&lt;/code&gt;, depending on which is more convenient for the type in question.</source>
          <target state="translated">インスタンスは、問題の型にとってどちらがより便利であるかに応じて、この統一 &lt;code&gt;&lt;a href=&quot;data-bits#v:rotate&quot;&gt;rotate&lt;/a&gt;&lt;/code&gt; れた回転または &lt;code&gt;&lt;a href=&quot;data-bits#v:rotateL&quot;&gt;rotateL&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-bits#v:rotateR&quot;&gt;rotateR&lt;/a&gt;&lt;/code&gt; のいずれかを定義できます。</target>
        </trans-unit>
        <trans-unit id="1f6f1ff04bfa289ae107fe2cb73d2dc665d5edae" translate="yes" xml:space="preserve">
          <source>An instance can define either this unified &lt;code&gt;&lt;a href=&quot;data-bits#v:shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-bits#v:shiftL&quot;&gt;shiftL&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bits#v:shiftR&quot;&gt;shiftR&lt;/a&gt;&lt;/code&gt;, depending on which is more convenient for the type in question.</source>
          <target state="translated">インスタンスは、問題の型にとってどちらがより便利であるかに応じて、この統合 &lt;code&gt;&lt;a href=&quot;data-bits#v:shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-bits#v:shiftL&quot;&gt;shiftL&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-bits#v:shiftR&quot;&gt;shiftR&lt;/a&gt;&lt;/code&gt; のいずれかを定義できます。</target>
        </trans-unit>
        <trans-unit id="b91c1218cc10bd9b2d241b41fc654dedb75905ac" translate="yes" xml:space="preserve">
          <source>An instance declaration has the form</source>
          <target state="translated">インスタンス宣言は</target>
        </trans-unit>
        <trans-unit id="26c153920f2310699986516df24fc799108ac963" translate="yes" xml:space="preserve">
          <source>An instance declaration in a module &lt;code&gt;M&lt;/code&gt; is an &lt;em&gt;orphan instance&lt;/em&gt; if</source>
          <target state="translated">モジュール内のインスタンス宣言 &lt;code&gt;M&lt;/code&gt; がある&lt;em&gt;孤立インスタンス&lt;/em&gt;場合</target>
        </trans-unit>
        <trans-unit id="0422a1c1ceadfc36e077b4145e342be0d4fe9752" translate="yes" xml:space="preserve">
          <source>An instance declaration in a module &lt;code&gt;M&lt;/code&gt; is an &lt;em&gt;orphan instance&lt;/em&gt; if orphan instance</source>
          <target state="translated">&lt;em&gt;孤立インスタンスの&lt;/em&gt;場合、モジュール &lt;code&gt;M&lt;/code&gt; のインスタンス宣言は&lt;em&gt;孤立インスタンス&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="f659879efb627bdd5cecbbab282a1e9e47a6cd51" translate="yes" xml:space="preserve">
          <source>An instance declaration is &lt;em&gt;more specific&lt;/em&gt; than another iff the head of former is a substitution instance of the latter. For example (D) is &amp;ldquo;more specific&amp;rdquo; than (C) because you can get from (C) to (D) by substituting &lt;code&gt;a := Int&lt;/code&gt;.</source>
          <target state="translated">前者の頭が後者の置換インスタンスである場合、インスタンス宣言は別のインスタンス宣言&lt;em&gt;よりも具体的&lt;/em&gt;です。たとえば、（D）は（C）よりも「より具体的」です。これは &lt;code&gt;a := Int&lt;/code&gt; 置き換えることで（C）から（D）に移動できるためです。</target>
        </trans-unit>
        <trans-unit id="a925b49f0219e891d285365b66dce29fa02d0e7e" translate="yes" xml:space="preserve">
          <source>An instance for an associated family can only appear as part of an instance declarations of the class in which the family was declared, just as with the equations of the methods of a class.</source>
          <target state="translated">関連付けられたファミリのインスタンスは、クラスのメソッドの方程式と同様に、ファミリが宣言されたクラスのインスタンス宣言の一部としてのみ現れることができます。</target>
        </trans-unit>
        <trans-unit id="6797a394b5a38cb77951470781b2ae0ce53d676c" translate="yes" xml:space="preserve">
          <source>An instance is &lt;em&gt;incoherent&lt;/em&gt; if: it has an &lt;code&gt;INCOHERENT&lt;/code&gt; pragma; or if the instance has no pragma and it appears in a module compiled with &lt;a href=&quot;#extension-IncoherentInstances&quot;&gt;&lt;code&gt;IncoherentInstances&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の場合、インスタンスは &lt;code&gt;INCOHERENT&lt;/code&gt; &lt;em&gt;性があり&lt;/em&gt;ません：INCOHERENTプラグマがある。または、インスタンスにプラグマがなく、&lt;a href=&quot;#extension-IncoherentInstances&quot;&gt; &lt;code&gt;IncoherentInstances&lt;/code&gt; で&lt;/a&gt;コンパイルされたモジュールに表示される場合。</target>
        </trans-unit>
        <trans-unit id="0b66884ab42d5d8b014e6fc23b4324da15721d24" translate="yes" xml:space="preserve">
          <source>An instance is &lt;em&gt;overlappable&lt;/em&gt; if: it has an &lt;code&gt;OVERLAPPABLE&lt;/code&gt; or &lt;code&gt;OVERLAPS&lt;/code&gt; pragma; or if the instance has no pragma and it appears in a module compiled with &lt;a href=&quot;#extension-OverlappingInstances&quot;&gt;&lt;code&gt;OverlappingInstances&lt;/code&gt;&lt;/a&gt;; or if the instance is incoherent.</source>
          <target state="translated">次の場合、インスタンスは&lt;em&gt;オーバーラップ&lt;/em&gt;可能です： &lt;code&gt;OVERLAPPABLE&lt;/code&gt; または &lt;code&gt;OVERLAPS&lt;/code&gt; プラグマがある場合。または、インスタンスにプラグマがなく、&lt;a href=&quot;#extension-OverlappingInstances&quot;&gt; &lt;code&gt;OverlappingInstances&lt;/code&gt; で&lt;/a&gt;コンパイルされたモジュールに表示される場合。または、インスタンスに一貫性がない場合。</target>
        </trans-unit>
        <trans-unit id="c64945d958795bcda270b74e76ecf8e08588cfbe" translate="yes" xml:space="preserve">
          <source>An instance is &lt;em&gt;overlapping&lt;/em&gt; if: it has an &lt;code&gt;OVERLAPPING&lt;/code&gt; or &lt;code&gt;OVERLAPS&lt;/code&gt; pragma; or if the instance has no pragma and it appears in a module compiled with &lt;a href=&quot;#extension-OverlappingInstances&quot;&gt;&lt;code&gt;OverlappingInstances&lt;/code&gt;&lt;/a&gt;; or if the instance is incoherent.</source>
          <target state="translated">インスタンスが&lt;em&gt;オーバーラップしている&lt;/em&gt;場合： &lt;code&gt;OVERLAPPING&lt;/code&gt; または &lt;code&gt;OVERLAPS&lt;/code&gt; プラグマがある場合。または、インスタンスにプラグマがなく、&lt;a href=&quot;#extension-OverlappingInstances&quot;&gt; &lt;code&gt;OverlappingInstances&lt;/code&gt; で&lt;/a&gt;コンパイルされたモジュールに表示される場合。または、インスタンスに一貫性がない場合。</target>
        </trans-unit>
        <trans-unit id="da552798a9dccf85004f0b6505ae33c512663e04" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; is provided, which implements exact equality modulo reordering of the tags in the &lt;code&gt;&lt;a href=&quot;data-version#v:versionTags&quot;&gt;versionTags&lt;/a&gt;&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; のインスタンスが提供されます。これは、 &lt;code&gt;&lt;a href=&quot;data-version#v:versionTags&quot;&gt;versionTags&lt;/a&gt;&lt;/code&gt; フィールドのタグの正確な等価モジュロ再配列を実装します。</target>
        </trans-unit>
        <trans-unit id="41664f4a7f5f1d180ac492e6274bf660ab0d02d1" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; is also provided, which gives lexicographic ordering on the &lt;code&gt;&lt;a href=&quot;data-version#v:versionBranch&quot;&gt;versionBranch&lt;/a&gt;&lt;/code&gt; fields (i.e. 2.1 &amp;gt; 2.0, 1.2.3 &amp;gt; 1.2.2, etc.). This is expected to be sufficient for many uses, but note that you may need to use a more specific ordering for your versioning scheme. For example, some versioning schemes may include pre-releases which have tags &lt;code&gt;&quot;pre1&quot;&lt;/code&gt;, &lt;code&gt;&quot;pre2&quot;&lt;/code&gt;, and so on, and these would need to be taken into account when determining ordering. In some cases, date ordering may be more appropriate, so the application would have to look for &lt;code&gt;date&lt;/code&gt; tags in the &lt;code&gt;&lt;a href=&quot;data-version#v:versionTags&quot;&gt;versionTags&lt;/a&gt;&lt;/code&gt; field and compare those. The bottom line is, don't always assume that &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; and other &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; operations are the right thing for every &lt;code&gt;&lt;a href=&quot;data-version#t:Version&quot;&gt;Version&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; のインスタンスも提供されます。これにより、 &lt;code&gt;&lt;a href=&quot;data-version#v:versionBranch&quot;&gt;versionBranch&lt;/a&gt;&lt;/code&gt; フィールドに辞書式順序が付けられます（2.1&amp;gt; 2.0、1.2.3 &amp;gt; 1.2.2など）。これは多くの用途で十分であると予想されますが、バージョン管理スキームに対してより具体的な順序を使用する必要がある場合があることに注意してください。たとえば、一部のバージョン管理スキームには、タグ &lt;code&gt;&quot;pre1&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;pre2&quot;&lt;/code&gt; などを含むプレリリースが含まれる場合があり、順序を決定するときにこれらを考慮する必要があります。場合によっては、日付の順序付けの方が適切なことがあります。そのため、アプリケーションは &lt;code&gt;&lt;a href=&quot;data-version#v:versionTags&quot;&gt;versionTags&lt;/a&gt;&lt;/code&gt; フィールドで &lt;code&gt;date&lt;/code&gt; タグを探し、それらを比較する必要があります。肝心なのは、 &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; することを常に前提としないことですその他の &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; 操作は、すべての &lt;code&gt;&lt;a href=&quot;data-version#t:Version&quot;&gt;Version&lt;/a&gt;&lt;/code&gt; 適切です。</target>
        </trans-unit>
        <trans-unit id="fdfa656ab79a71bc26c499aa546810046ca396ff" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;&lt;a href=&quot;system-console-haskeline-monadexception#t:MonadException&quot;&gt;MonadException&lt;/a&gt;&lt;/code&gt; is generally made up of monad transformers layered on top of the IO monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-console-haskeline-monadexception#t:MonadException&quot;&gt;MonadException&lt;/a&gt;&lt;/code&gt; のインスタンスは通常、IOモナドの上に重ねられたモナド変換子で構成されます。</target>
        </trans-unit>
        <trans-unit id="8ef31ea41a9ba018762805e0743531d210cd6284" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;Stream&lt;/code&gt; has stream type &lt;code&gt;s&lt;/code&gt;, underlying monad &lt;code&gt;m&lt;/code&gt; and token type &lt;code&gt;t&lt;/code&gt; determined by the stream</source>
          <target state="translated">&lt;code&gt;Stream&lt;/code&gt; のインスタンスには、ストリームタイプ &lt;code&gt;s&lt;/code&gt; 、基になるモナド &lt;code&gt;m&lt;/code&gt; 、およびストリームによって決定されるトークンタイプ &lt;code&gt;t&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="182b96f131379637cff152270abf17ec6ecf1c40" translate="yes" xml:space="preserve">
          <source>An integer denoting the number &lt;code&gt;l&lt;/code&gt; of printed completions,</source>
          <target state="translated">印刷された補完の数 &lt;code&gt;l&lt;/code&gt; を示す整数、</target>
        </trans-unit>
        <trans-unit id="5705ba72313d6782ee3dec31edcfe71a4e6bfe65" translate="yes" xml:space="preserve">
          <source>An integer literal &lt;code&gt;368&lt;/code&gt; means &amp;ldquo;&lt;code&gt;fromInteger (368::Integer)&lt;/code&gt;&amp;rdquo;, rather than &amp;ldquo;&lt;code&gt;Prelude.fromInteger (368::Integer)&lt;/code&gt;&amp;rdquo;.</source>
          <target state="translated">整数リテラル &lt;code&gt;368&lt;/code&gt; は、「 &lt;code&gt;fromInteger (368::Integer)&lt;/code&gt; 」ではなく、「 &lt;code&gt;Prelude.fromInteger (368::Integer)&lt;/code&gt; 」を意味します。</target>
        </trans-unit>
        <trans-unit id="7fcfdbe8f2cac93c2ec79190607c573c3d60d86c" translate="yes" xml:space="preserve">
          <source>An intermediate result in a scan.</source>
          <target state="translated">スキャンの中間結果。</target>
        </trans-unit>
        <trans-unit id="4fdb6e08d830a1c3979bfdc3fd7343eb5abdfb8f" translate="yes" xml:space="preserve">
          <source>An invocation of GHC takes the following form:</source>
          <target state="translated">GHC の呼び出しは以下の形式をとります。</target>
        </trans-unit>
        <trans-unit id="edb1f7c1dc03b67ee6b809077f9e5604578eb554" translate="yes" xml:space="preserve">
          <source>An llvm-intermediate-language bitcode file, usually produced by the compiler.</source>
          <target state="translated">llvm-中間言語のビットコードファイルで、通常はコンパイラによって生成されます。</target>
        </trans-unit>
        <trans-unit id="11d0526a9a9e3e29d8774eda5075a8938912393d" translate="yes" xml:space="preserve">
          <source>An llvm-intermediate-language source file, usually produced by the compiler.</source>
          <target state="translated">llvm-中間言語のソースファイルで、通常はコンパイラによって生成されます。</target>
        </trans-unit>
        <trans-unit id="2e0a23e4bb2863d568c7f363da30cd3b735cae06" translate="yes" xml:space="preserve">
          <source>An object &lt;code&gt;B&lt;/code&gt; retains object &lt;code&gt;A&lt;/code&gt; if (i) &lt;code&gt;B&lt;/code&gt; is a retainer object and (ii) object &lt;code&gt;A&lt;/code&gt; can be reached by recursively following pointers starting from object &lt;code&gt;B&lt;/code&gt;, but not meeting any other retainer objects on the way. Each live object is retained by one or more retainer objects, collectively called its retainer set, or its retainer set, or its retainers.</source>
          <target state="translated">オブジェクト &lt;code&gt;B&lt;/code&gt; 保持オブジェクト &lt;code&gt;A&lt;/code&gt; IF（I） &lt;code&gt;B&lt;/code&gt; は、保持対象であり、（ii）のオブジェクト &lt;code&gt;A&lt;/code&gt; は、再帰的オブジェクトから開始ポインタに従うことによって到達することができる &lt;code&gt;B&lt;/code&gt; が、途中で他のリテーナオブジェクトを満たしていません。各ライブオブジェクトは、1つ以上の保持オブジェクトによって保持され、まとめてその保持セット、保持セット、または保持と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="42910c59b4eb5fc3b9c19c32b311eab9e4bf6a36" translate="yes" xml:space="preserve">
          <source>An object file, produced by an assembler.</source>
          <target state="translated">アセンブラによって生成されるオブジェクトファイル。</target>
        </trans-unit>
        <trans-unit id="18c88b3ac1bd46ecfef3ff8276bc55927b9a64fe" translate="yes" xml:space="preserve">
          <source>An object which is never used is said to be in the void state for its whole lifetime.</source>
          <target state="translated">一度も使用されないオブジェクトは、その生涯にわたってボイド状態にあると言われています。</target>
        </trans-unit>
        <trans-unit id="5199083ec8a4ed3cb5139c93d4aeb1ab1a44d8f3" translate="yes" xml:space="preserve">
          <source>An offset, counted in bytes.</source>
          <target state="translated">バイト単位でカウントされるオフセット。</target>
        </trans-unit>
        <trans-unit id="4e93ce4db75561be705e22c1086fdc986365d26d" translate="yes" xml:space="preserve">
          <source>An operator version of &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; のオペレーターバージョン。</target>
        </trans-unit>
        <trans-unit id="269ede13d98d287f0dd18a20f718823a44965f42" translate="yes" xml:space="preserve">
          <source>An optional &lt;code&gt;E&lt;/code&gt; character indicates an alternate formatting. Currently this only affects &lt;code&gt;%Z&lt;/code&gt; and &lt;code&gt;%z&lt;/code&gt;.</source>
          <target state="translated">オプションの &lt;code&gt;E&lt;/code&gt; 文字は、代替フォーマットを示します。現在、これは &lt;code&gt;%Z&lt;/code&gt; と &lt;code&gt;%z&lt;/code&gt; にのみ影響します。</target>
        </trans-unit>
        <trans-unit id="147554bd72cb36203ba4e437f86b5856939ecef7" translate="yes" xml:space="preserve">
          <source>An optional escape character</source>
          <target state="translated">オプションのエスケープ文字</target>
        </trans-unit>
        <trans-unit id="470bd4645aa2a37d61b6006cf88e182f77dda35b" translate="yes" xml:space="preserve">
          <source>An overloaded interface to mutable arrays. For array types which can be used with this interface, see &lt;a href=&quot;data-array-io&quot;&gt;Data.Array.IO&lt;/a&gt;, &lt;a href=&quot;data-array-st&quot;&gt;Data.Array.ST&lt;/a&gt;, and &lt;a href=&quot;data-array-storable&quot;&gt;Data.Array.Storable&lt;/a&gt;.</source>
          <target state="translated">可変配列へのオーバーロードされたインターフェース。このインターフェイスで使用できる配列型については、&lt;a href=&quot;data-array-io&quot;&gt;Data.Array.IO&lt;/a&gt;、&lt;a href=&quot;data-array-st&quot;&gt;Data.Array.ST&lt;/a&gt;、および&lt;a href=&quot;data-array-storable&quot;&gt;Data.Array.Storableを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ed76ddf939d258125a9d07e26bf81d6563190100" translate="yes" xml:space="preserve">
          <source>An overloaded interface to mutable arrays. For array types which can be used with this interface, see &lt;a href=&quot;data-array-io&quot;&gt;Data.Array.IO&lt;/a&gt;, &lt;a href=&quot;data-array-st&quot;&gt;Data.Array.ST&lt;/a&gt;, and &lt;a href=&quot;data-array-storable&quot;&gt;Data.Array.Storable&lt;/a&gt;. . Safe API only of &lt;a href=&quot;data-array-marray&quot;&gt;Data.Array.MArray&lt;/a&gt;.</source>
          <target state="translated">可変配列へのオーバーロードされたインターフェース。このインターフェイスで使用できる配列型については、&lt;a href=&quot;data-array-io&quot;&gt;Data.Array.IO&lt;/a&gt;、&lt;a href=&quot;data-array-st&quot;&gt;Data.Array.ST&lt;/a&gt;、および&lt;a href=&quot;data-array-storable&quot;&gt;Data.Array.Storableを&lt;/a&gt;参照してください。。&lt;a href=&quot;data-array-marray&quot;&gt;Data.Array.MArray&lt;/a&gt;のみの安全なAPI 。</target>
        </trans-unit>
        <trans-unit id="b46b21c3d0ad448b7dbfafad15287d739812f46d" translate="yes" xml:space="preserve">
          <source>An overloaded label &amp;ldquo;&lt;code&gt;#foo&lt;/code&gt;&amp;rdquo; means &amp;ldquo;&lt;code&gt;fromLabel @&quot;foo&quot;&lt;/code&gt;&amp;rdquo;, rather than &amp;ldquo;&lt;code&gt;GHC.OverloadedLabels.fromLabel @&quot;foo&quot;&lt;/code&gt;&amp;rdquo; (see &lt;a href=&quot;#overloaded-labels&quot;&gt;Overloaded labels&lt;/a&gt;).</source>
          <target state="translated">オーバーロードされたラベル「 &lt;code&gt;#foo&lt;/code&gt; 」は、「 &lt;code&gt;fromLabel @&quot;foo&quot;&lt;/code&gt; 」ではなく「 &lt;code&gt;GHC.OverloadedLabels.fromLabel @&quot;foo&quot;&lt;/code&gt; 」を意味します（&lt;a href=&quot;#overloaded-labels&quot;&gt;オーバーロードされたラベルを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="13ae824d56d65e3bd4e71208269f6dcaeae34e0a" translate="yes" xml:space="preserve">
          <source>An overloaded label &amp;ldquo;&lt;code&gt;#foo&lt;/code&gt;&amp;rdquo; means &amp;ldquo;&lt;code&gt;fromLabel @&quot;foo&quot;&lt;/code&gt;&amp;rdquo;, rather than &amp;ldquo;&lt;code&gt;GHC.OverloadedLabels.fromLabel @&quot;foo&quot;&lt;/code&gt;&amp;rdquo; (see &lt;a href=&quot;overloaded_labels#overloaded-labels&quot;&gt;Overloaded labels&lt;/a&gt;).</source>
          <target state="translated">オーバーロードされたラベル「 &lt;code&gt;#foo&lt;/code&gt; 」は、「 &lt;code&gt;fromLabel @&quot;foo&quot;&lt;/code&gt; 」ではなく、「 &lt;code&gt;GHC.OverloadedLabels.fromLabel @&quot;foo&quot;&lt;/code&gt; 」を意味します（&lt;a href=&quot;overloaded_labels#overloaded-labels&quot;&gt;オーバーロードされたラベルを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="9468ea5c26fba1b901ed7aacb46a3a82ed93f64b" translate="yes" xml:space="preserve">
          <source>An un-associated open type or data family declaration &lt;em&gt;always&lt;/em&gt; has a CUSK; un-annotated type variables default to kind &lt;code&gt;Type&lt;/code&gt;:</source>
          <target state="translated">関連付けられていないオープンタイプまたはデータファミリ宣言には&lt;em&gt;常に&lt;/em&gt; CUSKがあります。注釈なしの型変数のデフォルトは種類 &lt;code&gt;Type&lt;/code&gt; です：</target>
        </trans-unit>
        <trans-unit id="130b0c42eca7246bf15b8c958b406f7273873440" translate="yes" xml:space="preserve">
          <source>An unbounded size unsigned integer type is available with &lt;code&gt;&lt;a href=&quot;numeric-natural#v:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">無制限のサイズの符号なし整数型は、 &lt;code&gt;&lt;a href=&quot;numeric-natural#v:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; で使用できます。</target>
        </trans-unit>
        <trans-unit id="860459917b5a02de589e908d125eff6b77571ea2" translate="yes" xml:space="preserve">
          <source>An unboxed sum of the given reps</source>
          <target state="translated">与えられたレスポンデンスのアンボックス化された合計</target>
        </trans-unit>
        <trans-unit id="7a6c34e18a2ffbd1385e4ed434dc780b5897e179" translate="yes" xml:space="preserve">
          <source>An unboxed tuple of the given reps</source>
          <target state="translated">与えられたレスポンダのアンボックス化されたタプル</target>
        </trans-unit>
        <trans-unit id="58d8e58dbcaf88f766575185e1685146830b08ca" translate="yes" xml:space="preserve">
          <source>An unevaluated spark has been garbage collected.</source>
          <target state="translated">評価されていない火花がゴミとして回収されています。</target>
        </trans-unit>
        <trans-unit id="6dc5e3262cb4421f0eecc8b241d84ce50b4e2631" translate="yes" xml:space="preserve">
          <source>An uninitialised record field was used. The &lt;code&gt;String&lt;/code&gt; gives information about the source location where the record was constructed.</source>
          <target state="translated">初期化されていないレコードフィールドが使用されました。 &lt;code&gt;String&lt;/code&gt; 、レコードを構築したソースの場所についての情報を提供します。</target>
        </trans-unit>
        <trans-unit id="35d4a9def65ccb498f533dbeaee2b2071da0bbc7" translate="yes" xml:space="preserve">
          <source>An unqualified name; dynamically bound</source>
          <target state="translated">非修飾名。</target>
        </trans-unit>
        <trans-unit id="dd607d2def70825ae686680e0742f5955f4c5559" translate="yes" xml:space="preserve">
          <source>An unsigned integral type that can be losslessly converted to and from &lt;code&gt;Ptr&lt;/code&gt;. This type is also compatible with the C99 type &lt;code&gt;uintptr_t&lt;/code&gt;, and can be marshalled to and from that type safely.</source>
          <target state="translated">&lt;code&gt;Ptr&lt;/code&gt; との間で可逆的に変換できる符号なし整数型。この型はC99型 &lt;code&gt;uintptr_t&lt;/code&gt; とも互換性があり、その型との間で安全にマーシャリングできます。</target>
        </trans-unit>
        <trans-unit id="14042e31bb5752011e77595736a7c337f4b6cf90" translate="yes" xml:space="preserve">
          <source>And a response file &lt;code&gt;args.txt&lt;/code&gt;:</source>
          <target state="translated">そして、応答ファイル &lt;code&gt;args.txt&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="cbd0ba0de747b34708a0f30527430f5a5c552189" translate="yes" xml:space="preserve">
          <source>And five warning flags:</source>
          <target state="translated">そして5つの警告旗。</target>
        </trans-unit>
        <trans-unit id="bec77e7ebcf7d86b1c8bc9d49ea2a2b98175dacc" translate="yes" xml:space="preserve">
          <source>And indeed some efficiency may be gained by directly defining both, avoiding some indirection in the default definitions that express one in terms of the other. If you implement just one, likely &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; is the better choice.</source>
          <target state="translated">実際、両方を直接定義することである程度の効率が得られる可能性があり、一方を他方で表すデフォルトの定義で間接参照を回避できます。実装するのが1つだけの場合は、おそらく &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; の方が適しています。</target>
        </trans-unit>
        <trans-unit id="523755b21b99024bbe43a1c9df96976e561c8e78" translate="yes" xml:space="preserve">
          <source>And inside &lt;code&gt;scheduleCallback&lt;/code&gt;, we create a callback that will in due course store the result data in the &lt;code&gt;Ptr Result&lt;/code&gt;, and then call &lt;code&gt;hs_try_putmvar()&lt;/code&gt;.</source>
          <target state="translated">そして、 &lt;code&gt;scheduleCallback&lt;/code&gt; 内で、 &lt;code&gt;Ptr Result&lt;/code&gt; データをPtr Resultに格納するコールバックを作成し、次に &lt;code&gt;hs_try_putmvar()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="c289bb0b2889358d5359dfed88823350fe8916e4" translate="yes" xml:space="preserve">
          <source>And multi-line spans are possible too:</source>
          <target state="translated">また、複数行スパンも可能です。</target>
        </trans-unit>
        <trans-unit id="5e61586d1382fe8ad684bf10b7ab8931fb17aed0" translate="yes" xml:space="preserve">
          <source>And one general flag:</source>
          <target state="translated">そして一般的な旗が一つ。</target>
        </trans-unit>
        <trans-unit id="dea1f9e397867b9cb1063d86c4c517eae2eedcd1" translate="yes" xml:space="preserve">
          <source>And read back with:</source>
          <target state="translated">と読み返してみてください。</target>
        </trans-unit>
        <trans-unit id="fc6d8473bdc84d9a5a02e5f55e8ffba9c7a1eadb" translate="yes" xml:space="preserve">
          <source>And the program will loop at runtime. Similarly, an &lt;code&gt;Applicative&lt;/code&gt; instance like this</source>
          <target state="translated">そして、プログラムは実行時にループします。同様に、このような &lt;code&gt;Applicative&lt;/code&gt; インスタンス</target>
        </trans-unit>
        <trans-unit id="91b7607b548e3de2b58aab9b4afde889d7ecf3e4" translate="yes" xml:space="preserve">
          <source>And three warning flags:</source>
          <target state="translated">そして3つの警告旗。</target>
        </trans-unit>
        <trans-unit id="0194dd87cfa77e0f7f90bc726fd0703ab0c251ba" translate="yes" xml:space="preserve">
          <source>And we could have built an equivalent path with the following expressions:</source>
          <target state="translated">そして、以下のような表現で同等のパスを構築することができました。</target>
        </trans-unit>
        <trans-unit id="f04f47a0bf05c20c03ec6759fd8321b4e440f4b6" translate="yes" xml:space="preserve">
          <source>And with &lt;a href=&quot;#unboxed-sums&quot;&gt;UnboxedSums&lt;/a&gt; enabled</source>
          <target state="translated">And with &lt;a href=&quot;#unboxed-sums&quot;&gt;UnboxedSums&lt;/a&gt; enabled</target>
        </trans-unit>
        <trans-unit id="ff1853f8dddb99a8c160df02448f14aeb5c7e0b7" translate="yes" xml:space="preserve">
          <source>And write a value to disk</source>
          <target state="translated">そして、ディスクに値を書き込む</target>
        </trans-unit>
        <trans-unit id="0b691ef27c0c127676c790709cff2ef33778d7eb" translate="yes" xml:space="preserve">
          <source>And you attempt to derive it using &lt;a href=&quot;#extension-DeriveAnyClass&quot;&gt;&lt;code&gt;DeriveAnyClass&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">そして、あなたは&lt;a href=&quot;#extension-DeriveAnyClass&quot;&gt; &lt;code&gt;DeriveAnyClass&lt;/code&gt; &lt;/a&gt;を使用してそれを導出しようとします：</target>
        </trans-unit>
        <trans-unit id="495577bd97a225b48a7e5b45336021b982d75dbc" translate="yes" xml:space="preserve">
          <source>And you tried to derive an instance for it:</source>
          <target state="translated">あなたはそれのインスタンスを導出しようとした</target>
        </trans-unit>
        <trans-unit id="b8ad3365893a0b275281ec83a50665e9f2d6834f" translate="yes" xml:space="preserve">
          <source>And, among other things, lazy pattern-matching is your enemy.</source>
          <target state="translated">そして、とりわけ、怠惰なパターンマッチングはあなたの敵です。</target>
        </trans-unit>
        <trans-unit id="8c4a82e242cf12aed8b85b58f58b0968fee82178" translate="yes" xml:space="preserve">
          <source>Andy Gill and Simon Marlow have written a parser-generator for Haskell, called &lt;code&gt;happy&lt;/code&gt;. &lt;code&gt;Happy&lt;/code&gt; is to Haskell what &lt;code&gt;Yacc&lt;/code&gt; is to C.</source>
          <target state="translated">Andy GillとSimon Marlowが、Haskellのパーサージェネレーター（ &lt;code&gt;happy&lt;/code&gt; )を作成しました。 &lt;code&gt;Yacc&lt;/code&gt; &lt;code&gt;Happy&lt;/code&gt; は、C にとってのYaccです。</target>
        </trans-unit>
        <trans-unit id="74661a73b0dde5f32e46ef5440b8f7c212e3dd3f" translate="yes" xml:space="preserve">
          <source>AnnLookup</source>
          <target state="translated">AnnLookup</target>
        </trans-unit>
        <trans-unit id="c1da64c83c4be735ccac640316d60131dd4381db" translate="yes" xml:space="preserve">
          <source>AnnTarget</source>
          <target state="translated">AnnTarget</target>
        </trans-unit>
        <trans-unit id="f1b790e1da14310f6ece84c62bb58322fef3c9fc" translate="yes" xml:space="preserve">
          <source>AnnotDetails</source>
          <target state="translated">AnnotDetails</target>
        </trans-unit>
        <trans-unit id="bf34615f46f75f35e2f9ccc197db2f929dd6a301" translate="yes" xml:space="preserve">
          <source>AnnotStart</source>
          <target state="translated">AnnotStart</target>
        </trans-unit>
        <trans-unit id="1e19b78b16e2a7b6a1e4f80c0a4d231548b5500d" translate="yes" xml:space="preserve">
          <source>Annotate the Template Haskell expression with a type</source>
          <target state="translated">テンプレートHaskell式を型でアノテーションします。</target>
        </trans-unit>
        <trans-unit id="665edccbf78492c3059856c8597043ed30b15ce4" translate="yes" xml:space="preserve">
          <source>Annotating documents</source>
          <target state="translated">文書のアノテーション</target>
        </trans-unit>
        <trans-unit id="0d453d564eadde058c35ace639f7bec19eccb3ee" translate="yes" xml:space="preserve">
          <source>Annotation lookup</source>
          <target state="translated">アノテーションルックアップ</target>
        </trans-unit>
        <trans-unit id="11129140d62298b72f4c953d972b05a50da295ea" translate="yes" xml:space="preserve">
          <source>Annotation rendering</source>
          <target state="translated">アノテーションレンダリング</target>
        </trans-unit>
        <trans-unit id="112cca03c76acb3cca2a892f6e3fa24c275d9756" translate="yes" xml:space="preserve">
          <source>Annotation target for reifyAnnotations</source>
          <target state="translated">reifyAnnotationsのアノテーション対象</target>
        </trans-unit>
        <trans-unit id="fddbd22c104843c74d2c00f8cf2af89a7f68516f" translate="yes" xml:space="preserve">
          <source>Annotations are small pragmas that allow you to attach data to identifiers in source code, which are persisted when compiled. These pieces of data can then inspected and utilized when using GHC as a library or writing a compiler plugin.</source>
          <target state="translated">アノテーションとは、ソースコード内の識別子にデータをアタッチすることができる小さなプラグマで、コンパイル時に保持されます。これらのデータは、ライブラリとしてGHCを使用したり、コンパイラプラグインを書いたりする際に、検査して利用することができます。</target>
        </trans-unit>
        <trans-unit id="e5b762d7dbaed9bb5ebd61e64b87ad52b2d8a6ca" translate="yes" xml:space="preserve">
          <source>Anonymous and named wildcards &lt;em&gt;can&lt;/em&gt; occur on the left hand side of a type or data instance declaration; see &lt;a href=&quot;#type-wildcards-lhs&quot;&gt;Wildcards on the LHS of data and type family instances&lt;/a&gt;.</source>
          <target state="translated">匿名または名前付きのワイルドカードは、型またはデータインスタンスの宣言の左側で使用&lt;em&gt;でき&lt;/em&gt;ます。&lt;a href=&quot;#type-wildcards-lhs&quot;&gt;データとタイプファミリーインスタンスのLHSのワイルドカードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2933014e43439d1ca1dfa76d9cf24791b507ac57" translate="yes" xml:space="preserve">
          <source>Anonymous and named wildcards &lt;em&gt;can&lt;/em&gt; occur on the left hand side of a type or data instance declaration; see &lt;a href=&quot;type_families#type-wildcards-lhs&quot;&gt;Wildcards on the LHS of data and type family instances&lt;/a&gt;.</source>
          <target state="translated">匿名および名前付きのワイルドカードは、型またはデータインスタンス宣言の左側に発生する&lt;em&gt;可能&lt;/em&gt;性があります。&lt;a href=&quot;type_families#type-wildcards-lhs&quot;&gt;データのLHSおよびタイプファミリーインスタンスのワイルドカードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2cf2947ec117ab6af4c3e63853ae6bc974a4aab5" translate="yes" xml:space="preserve">
          <source>Anonymous wildcards are also allowed in visible type applications/ visible kind applications (&lt;a href=&quot;#visible-type-application&quot;&gt;Visible type application&lt;/a&gt;). If you want to specify only the second type argument to &lt;code&gt;wurble&lt;/code&gt;, then you can say &lt;code&gt;wurble @_ @Int&lt;/code&gt; where the first argument is a wildcard.</source>
          <target state="translated">匿名ワイルドカードは、可視型アプリケーション/ &lt;a href=&quot;#visible-type-application&quot;&gt;可視型アプリケーション&lt;/a&gt;（可視型アプリケーション）でも使用できます。 &lt;code&gt;wurble&lt;/code&gt; に 2番目の型の引数のみを指定する場合は、最初の引数がワイルドカードである &lt;code&gt;wurble @_ @Int&lt;/code&gt; と指定できます。</target>
        </trans-unit>
        <trans-unit id="760e8be8ff8aded9e397539dd6c206869559d124" translate="yes" xml:space="preserve">
          <source>Anonymous wildcards are also allowed in visible type applications/ visible kind applications (&lt;a href=&quot;type_applications#visible-type-application&quot;&gt;Visible type application&lt;/a&gt;). If you want to specify only the second type argument to &lt;code&gt;wurble&lt;/code&gt;, then you can say &lt;code&gt;wurble @_ @Int&lt;/code&gt; where the first argument is a wildcard.</source>
          <target state="translated">匿名ワイルドカードは、可視タイプのアプリケーション/可視タイプのアプリケーション（&lt;a href=&quot;type_applications#visible-type-application&quot;&gt;可視タイプのアプリケーション&lt;/a&gt;）でも使用できます。 &lt;code&gt;wurble&lt;/code&gt; に2番目の型引数のみを指定する場合は、最初の引数がワイルドカードである &lt;code&gt;wurble @_ @Int&lt;/code&gt; と言うことができます。</target>
        </trans-unit>
        <trans-unit id="b4f913427243fca5da364b9f4af093e1c132cd45" translate="yes" xml:space="preserve">
          <source>Another common question that comes up when debugging is &amp;ldquo;where did this exception come from?&amp;rdquo;. Exceptions such as those raised by &lt;code&gt;error&lt;/code&gt; or &lt;code&gt;head []&lt;/code&gt; have no context information attached to them. Finding which particular call to &lt;code&gt;head&lt;/code&gt; in your program resulted in the error can be a painstaking process, usually involving &lt;code&gt;Debug.Trace.trace&lt;/code&gt;, or compiling with profiling and using &lt;code&gt;Debug.Trace.traceStack&lt;/code&gt; or &lt;code&gt;+RTS -xc&lt;/code&gt; (see &lt;a href=&quot;runtime_control#rts-flag--xc&quot;&gt;&lt;code&gt;-xc&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">デバッグ時に出てくるもう1つの一般的な質問は、「この例外はどこから発生したのか」です。 &lt;code&gt;error&lt;/code&gt; または &lt;code&gt;head []&lt;/code&gt; によって発生した例外などの例外には、コンテキスト情報が添付されていません。プログラム内の &lt;code&gt;head&lt;/code&gt; への特定の呼び出しが原因でエラーが発生したことを &lt;code&gt;Debug.Trace.trace&lt;/code&gt; ことは、通常はDebug.Trace.traceを伴うか、プロファイリングを使用してコンパイルし、 &lt;code&gt;Debug.Trace.traceStack&lt;/code&gt; または &lt;code&gt;+RTS -xc&lt;/code&gt; を使用して（&lt;a href=&quot;runtime_control#rts-flag--xc&quot;&gt; &lt;code&gt;-xc&lt;/code&gt; を&lt;/a&gt;参照）、骨の折れるプロセスになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8a901bb130edd93de354a92729369e7eb8a77ff7" translate="yes" xml:space="preserve">
          <source>Another common use is to ensure any exceptions hidden within lazy fields of a data structure do not leak outside the scope of the exception handler, or to force evaluation of a data structure in one thread, before passing to another thread (preventing work moving to the wrong threads).</source>
          <target state="translated">他にも、データ構造体の遅延フィールド内に隠された例外が例外ハンドラの範囲外に漏れないようにしたり、別のスレッドに渡す前にあるスレッドでデータ構造体を強制的に評価したり(作業が間違ったスレッドに移動するのを防ぐ)するのが一般的な使用法です。</target>
        </trans-unit>
        <trans-unit id="312336ad458ea40ebadf4c791b596f396bc92d0d" translate="yes" xml:space="preserve">
          <source>Another difference between higher-rank kinds and types can be found in their treatment of inferred and user-specified type variables. Consider the following program:</source>
          <target state="translated">上位の種類と型のもう一つの違いは、推論された型変数とユーザが指定した型変数の扱いに見出すことができます。次のプログラムを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="619e7f27cda3e42e4615c75dcb4975c0f4f68283" translate="yes" xml:space="preserve">
          <source>Another difficulty with the memo table is that the value of a key/value pair might itself contain a pointer to the key. So the memo table keeps the value alive, which keeps the key alive, even though there may be no other references to the key so both should die. The weak pointers in this library provide a slight generalisation of the basic weak-pointer idea, in which each weak pointer actually contains both a key and a value.</source>
          <target state="translated">メモテーブルのもう一つの問題点は、キーと値のペアの値自体にキーへのポインタが含まれている可能性があることです。そのため、メモテーブルは値を生きたままにしておき、キーを生きたままにしておきます。このライブラリの弱いポインタは、基本的な弱いポインタの考え方を少し一般化したもので、各弱いポインタは実際にはキーと値の両方を含んでいます。</target>
        </trans-unit>
        <trans-unit id="3139c4c3d9fe163dd31667b3304a7a4a55378c8e" translate="yes" xml:space="preserve">
          <source>Another extremely efficient way to make your program snappy is to use library code that has been Seriously Tuned By Someone Else. You &lt;em&gt;might&lt;/em&gt; be able to write a better quicksort than the one in &lt;code&gt;Data.List&lt;/code&gt;, but it will take you much longer than typing &lt;code&gt;import Data.List&lt;/code&gt;.</source>
          <target state="translated">他の非常に効率的な方法は、他の誰かが真剣に調整したライブラリコードを使用することです。あなたは&lt;em&gt;可能性がある&lt;/em&gt; 1つのより良いクイックソート書くことができるように &lt;code&gt;Data.List&lt;/code&gt; を、それははるかに長い入力するよりも行くことができます &lt;code&gt;import Data.List&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0192d00c4c561122179982081c286d8efe43c16b" translate="yes" xml:space="preserve">
          <source>Another form of command is a form of &lt;code&gt;do&lt;/code&gt;-notation. For example, you can write</source>
          <target state="translated">コマンドの別の形式は、 &lt;code&gt;do&lt;/code&gt; 表記の形式です。たとえば、次のように書くことができます</target>
        </trans-unit>
        <trans-unit id="ca7ae7aaeace3e8afcdea81b5fff39694bdaa3a2" translate="yes" xml:space="preserve">
          <source>Another important difference between the two types of binding is that the monadic bind (&lt;code&gt;p &amp;lt;- e&lt;/code&gt;) is &lt;em&gt;strict&lt;/em&gt; (it evaluates &lt;code&gt;e&lt;/code&gt;), whereas with the &lt;code&gt;let&lt;/code&gt; form, the expression isn&amp;rsquo;t evaluated immediately:</source>
          <target state="translated">2つのタイプのバインディングのもう1つの重要な違いは、モナドバインド（ &lt;code&gt;p &amp;lt;- e&lt;/code&gt; ）が&lt;em&gt;厳密&lt;/em&gt;（ &lt;code&gt;e&lt;/code&gt; を評価）であるのに対し、 &lt;code&gt;let&lt;/code&gt; フォームでは式がすぐに評価されないことです。</target>
        </trans-unit>
        <trans-unit id="fa6d0d044f8316bb0266e4594b9afdb9ea5faf82" translate="yes" xml:space="preserve">
          <source>Another point to bear in mind: By far the best way to improve a program&amp;rsquo;s performance &lt;em&gt;dramatically&lt;/em&gt; is to use better algorithms. Once profiling has thrown the spotlight on the guilty time-consumer(s), it may be better to re-think your program than to try all the tweaks listed below.</source>
          <target state="translated">留意すべきもう1つのポイント：プログラムのパフォーマンスを&lt;em&gt;劇的&lt;/em&gt;に向上させる最善の方法は、より優れたアルゴリズムを使用することです。プロファイリングが有罪の消費者にスポットライトを当てたら、以下にリストされているすべての微調整を試すよりも、プログラムを再考する方が良い場合があります。</target>
        </trans-unit>
        <trans-unit id="d787e6c2588a53fddf149a1d181b21e1640ac274" translate="yes" xml:space="preserve">
          <source>Another useful application is to combine &lt;code&gt;&lt;a href=&quot;control-deepseq#v:force&quot;&gt;force&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-exception#v:evaluate&quot;&gt;evaluate&lt;/a&gt;&lt;/code&gt; in order to force deep evaluation relative to other &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operations:</source>
          <target state="translated">別の有用なアプリケーションは、 &lt;code&gt;&lt;a href=&quot;control-deepseq#v:force&quot;&gt;force&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-exception#v:evaluate&quot;&gt;evaluate&lt;/a&gt;&lt;/code&gt; を組み合わせることです、他の &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 操作と比較して詳細な評価を強制するため。</target>
        </trans-unit>
        <trans-unit id="748a1e04935a7f3501001c42790b9f7f7d64ce9f" translate="yes" xml:space="preserve">
          <source>Another useful application is to combine &lt;code&gt;&lt;a href=&quot;control-deepseq#v:force&quot;&gt;force&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-exception#v:evaluate&quot;&gt;evaluate&lt;/a&gt;&lt;/code&gt; in order to force deep evaluation relative to other &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operations:</source>
          <target state="translated">Another useful application is to combine &lt;code&gt;&lt;a href=&quot;control-deepseq#v:force&quot;&gt;force&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-exception#v:evaluate&quot;&gt;evaluate&lt;/a&gt;&lt;/code&gt; in order to force deep evaluation relative to other &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operations:</target>
        </trans-unit>
        <trans-unit id="5c2f9a75636ccb2a48b5f68cc2e6881b697e167f" translate="yes" xml:space="preserve">
          <source>Another useful application is to combine &lt;code&gt;&lt;a href=&quot;control-deepseq#v:force&quot;&gt;force&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-exception#v:evaluate&quot;&gt;evaluate&lt;/a&gt;&lt;/code&gt; in order to force deep evaluation relative to other &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; operations:</source>
          <target state="translated">もう1つの便利なアプリケーションは、他の &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 操作と比較して詳細な評価を強制するために、 &lt;code&gt;&lt;a href=&quot;control-deepseq#v:force&quot;&gt;force&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-exception#v:evaluate&quot;&gt;evaluate&lt;/a&gt;&lt;/code&gt; を組み合わせることです。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
