<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="haskell">
    <body>
      <group id="haskell">
        <trans-unit id="39accf2eb466f5f7950fa262a0b934abef85ea1f" translate="yes" xml:space="preserve">
          <source>Indicates if unlocking was successful, if not query getLastError.</source>
          <target state="translated">ロック解除が成功したかどうかを示し、失敗した場合は getLastError を問い合わせます。</target>
        </trans-unit>
        <trans-unit id="ee701376e3689ff56e8540e626710f8190183f54" translate="yes" xml:space="preserve">
          <source>Indicates that this RunTH is finished, and the next message will be the result of RunTH (a QResult).</source>
          <target state="translated">このRunTHが終了し、次のメッセージがRunTHの結果(QResult)であることを示します。</target>
        </trans-unit>
        <trans-unit id="ffebd8440073e88e499e1336894f2e16eae1751e" translate="yes" xml:space="preserve">
          <source>Indirections include the two special directories &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt;, as well as any symbolic links (and junction points on Windows). The input path need not point to an existing file or directory. Canonicalization is performed on the longest prefix of the path that points to an existing file or directory. The remaining portion of the path that does not point to an existing file or directory will still be normalized, but case canonicalization and indirection removal are skipped as they are impossible to do on a nonexistent path.</source>
          <target state="translated">間接参照には、2つの特別なディレクトリが含まれます &lt;code&gt;.&lt;/code&gt; および &lt;code&gt;..&lt;/code&gt; 、およびすべてのシンボリックリンク（およびWindowsのジャンクションポイント）。入力パスは、既存のファイルまたはディレクトリを指す必要はありません。正規化は、既存のファイルまたはディレクトリを指すパスの最長プレフィックスで実行されます。既存のファイルまたはディレクトリを指していないパスの残りの部分は正規化されますが、存在しないパスでは実行できないため、ケースの正規化と間接削除はスキップされます。</target>
        </trans-unit>
        <trans-unit id="66db8a5a7f44af7446c06e6455194d161c7318dd" translate="yes" xml:space="preserve">
          <source>Individual fields of constructors: &lt;code&gt;K1&lt;/code&gt;</source>
          <target state="translated">コンストラクタの個々のフィールド： &lt;code&gt;K1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="004823746d749da477fecffe53c215cee2dcb8f7" translate="yes" xml:space="preserve">
          <source>Infer less polymorphic types for local bindings by default.</source>
          <target state="translated">デフォルトでは、ローカルバインディングの多相型を少なくします。</target>
        </trans-unit>
        <trans-unit id="a49aa56d23bf8a67723b80736f57bcc1ae0f7ed4" translate="yes" xml:space="preserve">
          <source>InferR</source>
          <target state="translated">InferR</target>
        </trans-unit>
        <trans-unit id="0fb53a8fadb337cee5f4d84c1662f6c7a3cd7d5a" translate="yes" xml:space="preserve">
          <source>Inferred variables are printed in braces. Thus, the type of the data constructor &lt;code&gt;Proxy&lt;/code&gt; from the previous example is &lt;code&gt;forall {k} (a :: k). Proxy a&lt;/code&gt;. We can observe this behavior in a GHCi session:</source>
          <target state="translated">推測される変数は中括弧で囲まれています。したがって、前の例のデータコンストラクタ &lt;code&gt;Proxy&lt;/code&gt; タイプは &lt;code&gt;forall {k} (a :: k). Proxy a&lt;/code&gt; 。この動作はGHCiセッションで観察できます。</target>
        </trans-unit>
        <trans-unit id="89d01d742994f65d06832b042946ae6540ea435b" translate="yes" xml:space="preserve">
          <source>InferredSpec</source>
          <target state="translated">InferredSpec</target>
        </trans-unit>
        <trans-unit id="b62fa7fe203f750a1b3935b720b00e4d542210bf" translate="yes" xml:space="preserve">
          <source>Inferring equality from other types</source>
          <target state="translated">他のタイプからの平等性の推論</target>
        </trans-unit>
        <trans-unit id="3744a97e602ea3666eb2a1e01050a64e4445a1a1" translate="yes" xml:space="preserve">
          <source>Infers and prints the kind of ⟨type⟩. The latter can be an arbitrary type expression, including a partial application of a type constructor, such as &lt;code&gt;Either Int&lt;/code&gt;. In fact, &lt;a href=&quot;#ghci-cmd-:kind&quot;&gt;&lt;code&gt;:kind&lt;/code&gt;&lt;/a&gt; even allows you to write a partial application of a type synonym (usually disallowed), so that this works:</source>
          <target state="translated">「タイプ」の種類を推測して出力します。後者は、 &lt;code&gt;Either Int&lt;/code&gt; などの型コンストラクターの部分的な適用を含む、任意の型式にすることができます。実際、&lt;a href=&quot;#ghci-cmd-:kind&quot;&gt; &lt;code&gt;:kind&lt;/code&gt; &lt;/a&gt;を使用すると、型シノニムの部分的なアプリケーション（通常は許可されない）を作成できるため、次のように機能します。</target>
        </trans-unit>
        <trans-unit id="b107164b72629a12fc9de20620c30233bc8a18cb" translate="yes" xml:space="preserve">
          <source>Infers and prints the type of ⟨expression⟩, but without fiddling with type variables or class constraints. This is useful when you are using &lt;a href=&quot;exts/type_applications#extension-TypeApplications&quot;&gt;&lt;code&gt;TypeApplications&lt;/code&gt;&lt;/a&gt; and care about the distinction between specified type variables (available for type application) and inferred type variables (not available). This mode sometimes prints constraints (such as &lt;code&gt;Show Int&lt;/code&gt;) that could readily be solved, but solving these constraints may affect the type variables, so GHC refrains.</source>
          <target state="translated">⟨式⟩の型を推測して出力しますが、型変数やクラス制約をいじることはありません。これは、&lt;a href=&quot;exts/type_applications#extension-TypeApplications&quot;&gt; &lt;code&gt;TypeApplications&lt;/code&gt; &lt;/a&gt;を使用していて、指定された型変数（型アプリケーションで使用可能）と推測された型変数（使用不可）の違いに注意する場合に役立ちます。このモードでは、簡単に解決できる制約（ &lt;code&gt;Show Int&lt;/code&gt; など）が出力されることがありますが、これらの制約を解決すると型変数に影響する可能性があるため、GHCは控えています。</target>
        </trans-unit>
        <trans-unit id="3177c8b6010228311525b74fd82e8bb7622e8e6c" translate="yes" xml:space="preserve">
          <source>Infers and prints the type of ⟨expression⟩, but without fiddling with type variables or class constraints. This is useful when you are using &lt;a href=&quot;glasgow_exts#extension-TypeApplications&quot;&gt;&lt;code&gt;TypeApplications&lt;/code&gt;&lt;/a&gt; and care about the distinction between specified type variables (available for type application) and inferred type variables (not available). This mode sometimes prints constraints (such as &lt;code&gt;Show Int&lt;/code&gt;) that could readily be solved, but solving these constraints may affect the type variables, so GHC refrains.</source>
          <target state="translated">「式」のタイプを推測して出力しますが、タイプ変数やクラス制約をいじる必要はありません。これは、&lt;a href=&quot;glasgow_exts#extension-TypeApplications&quot;&gt; &lt;code&gt;TypeApplications&lt;/code&gt; &lt;/a&gt;を使用していて、指定された型変数（型アプリケーションで利用可能）と推論された型変数（利用不可）の違いに注意する場合に役立ちます。このモードは、すぐに解決できる制約（ &lt;code&gt;Show Int&lt;/code&gt; など）を出力することがありますが、これらの制約を解決すると型変数に影響する可能性があるため、GHCは控えます。</target>
        </trans-unit>
        <trans-unit id="8a06b410b4c6d06c8f15b06ce8d7dbe7ce974ec5" translate="yes" xml:space="preserve">
          <source>Infers and prints the type of ⟨expression⟩, defaulting type variables if possible. In this mode, if the inferred type is constrained by any interactive class (&lt;code&gt;Num&lt;/code&gt;, &lt;code&gt;Show&lt;/code&gt;, &lt;code&gt;Eq&lt;/code&gt;, &lt;code&gt;Ord&lt;/code&gt;, &lt;code&gt;Foldable&lt;/code&gt;, or &lt;code&gt;Traversable&lt;/code&gt;), the constrained type variable(s) are defaulted according to the rules described under &lt;a href=&quot;#extension-ExtendedDefaultRules&quot;&gt;&lt;code&gt;ExtendedDefaultRules&lt;/code&gt;&lt;/a&gt;. This mode is quite useful when the inferred type is quite general (such as for &lt;code&gt;foldr&lt;/code&gt;) and it may be helpful to see a more concrete instantiation.</source>
          <target state="translated">「式」のタイプを推測して出力し、可能な場合はデフォルトのタイプ変数を使用します。このモードでは、推論された型がインタラクティブクラス（ &lt;code&gt;Num&lt;/code&gt; 、 &lt;code&gt;Show&lt;/code&gt; 、 &lt;code&gt;Eq&lt;/code&gt; 、 &lt;code&gt;Ord&lt;/code&gt; 、 &lt;code&gt;Foldable&lt;/code&gt; 、または &lt;code&gt;Traversable&lt;/code&gt; ）によって制約されている場合、制約された型の変数は、&lt;a href=&quot;#extension-ExtendedDefaultRules&quot;&gt; &lt;code&gt;ExtendedDefaultRules&lt;/code&gt; で&lt;/a&gt;説明されているルールに従ってデフォルト設定されます。このモードは、推論されたタイプが非常に一般的な場合（ &lt;code&gt;foldr&lt;/code&gt; など）に非常に役立ち、より具体的なインスタンス化を確認すると役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="9b49ea1e8603da8d3ed4f7b29043ab1b859d18a2" translate="yes" xml:space="preserve">
          <source>Infers and prints the type of ⟨expression⟩, including explicit forall quantifiers for polymorphic types. The type reported is the type that would be inferred for a variable assigned to the expression, but without the monomorphism restriction applied.</source>
          <target state="translated">多相型のための明示的なforall量詞を含む、⟨式⟩の型を推定して表示します。報告される型は、式に代入された変数に対して推論される型ですが、単相性制限が適用されていません。</target>
        </trans-unit>
        <trans-unit id="89ab60251bc6707c53f48175ddc8665e44956e1a" translate="yes" xml:space="preserve">
          <source>Infinite ByteStrings</source>
          <target state="translated">無限バイト文字列</target>
        </trans-unit>
        <trans-unit id="f1a0caa9cda260897b3d3a8a3366456b3f12604b" translate="yes" xml:space="preserve">
          <source>Infinite lists</source>
          <target state="translated">無限リスト</target>
        </trans-unit>
        <trans-unit id="51da236acb5f8cdb6fe7b72a8257afecb4400026" translate="yes" xml:space="preserve">
          <source>Infinite structures</source>
          <target state="translated">無限の構造</target>
        </trans-unit>
        <trans-unit id="fe77bd8489f76d5d9e8b67c97bcc2fb77aac9380" translate="yes" xml:space="preserve">
          <source>Infix</source>
          <target state="translated">Infix</target>
        </trans-unit>
        <trans-unit id="1a2524f2cdc191259a8cb8d6d990ea9482634447" translate="yes" xml:space="preserve">
          <source>Infix version of &lt;code&gt;&lt;a href=&quot;ghc-io-subsystem#v:conditional&quot;&gt;conditional&lt;/a&gt;&lt;/code&gt;. posix &lt;a href=&quot;!&quot;&gt;!&lt;/a&gt; windows == conditional posix windows</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-subsystem#v:conditional&quot;&gt;conditional&lt;/a&gt;&lt;/code&gt; インフィックスバージョン。posix &lt;a href=&quot;!&quot;&gt;！&lt;/a&gt;windows ==条件付きposixウィンドウ</target>
        </trans-unit>
        <trans-unit id="dc17702bd4456d8936d032b3557ed49fb5376c40" translate="yes" xml:space="preserve">
          <source>InfixL</source>
          <target state="translated">InfixL</target>
        </trans-unit>
        <trans-unit id="20413b58a0ca7cb9b7575983b614a1c19ab4ff77" translate="yes" xml:space="preserve">
          <source>InfixN</source>
          <target state="translated">InfixN</target>
        </trans-unit>
        <trans-unit id="028e6ce7a43f27e4616aed257c32e084ad147516" translate="yes" xml:space="preserve">
          <source>InfixR</source>
          <target state="translated">InfixR</target>
        </trans-unit>
        <trans-unit id="4b631f69842530d659306c8f06dbad594a6b1807" translate="yes" xml:space="preserve">
          <source>Info</source>
          <target state="translated">Info</target>
        </trans-unit>
        <trans-unit id="83ca07e3694e10dbb5ccf3a65b2e15a2aa71adaa" translate="yes" xml:space="preserve">
          <source>InfoQ</source>
          <target state="translated">InfoQ</target>
        </trans-unit>
        <trans-unit id="ce6a0a5b544415ee768925ccfd3225f374bbf9b6" translate="yes" xml:space="preserve">
          <source>Informally the &lt;code&gt;Strict&lt;/code&gt; language extension switches functions, data types, and bindings to be strict by default, allowing optional laziness by adding &lt;code&gt;~&lt;/code&gt; in front of a variable. This essentially reverses the present situation where laziness is default and strictness can be optionally had by adding &lt;code&gt;!&lt;/code&gt; in front of a variable.</source>
          <target state="translated">非公式に、 &lt;code&gt;Strict&lt;/code&gt; 言語拡張機能は、デフォルトで関数、データ型、バインディングを厳密に切り替え、変数の前に &lt;code&gt;~&lt;/code&gt; を追加することでオプションの遅延を許可します。これは基本的に、遅延がデフォルトである現在の状況を逆転させ、オプションで &lt;code&gt;!&lt;/code&gt; 変数の前。</target>
        </trans-unit>
        <trans-unit id="b7a8fe8965d2d84c47cc81ac096afe56b49210c8" translate="yes" xml:space="preserve">
          <source>Informally the &lt;code&gt;StrictData&lt;/code&gt; language extension switches data type declarations to be strict by default allowing fields to be lazy by adding a &lt;code&gt;~&lt;/code&gt; in front of the field.</source>
          <target state="translated">非公式に、 &lt;code&gt;StrictData&lt;/code&gt; 言語拡張機能は、デフォルトでデータ型宣言を厳密に切り替え、フィールドの前に &lt;code&gt;~&lt;/code&gt; を追加することでフィールドを遅延させることができます。</target>
        </trans-unit>
        <trans-unit id="c1d79469162855a43f3eaf9e3321d8cf50684dcb" translate="yes" xml:space="preserve">
          <source>Informally, if we have a closed expression</source>
          <target state="translated">非公式には、閉じた式があれば</target>
        </trans-unit>
        <trans-unit id="bc65f2d3fbd1ee9f583dec831481e53abb70fa26" translate="yes" xml:space="preserve">
          <source>Information Preservation</source>
          <target state="translated">情報の保存</target>
        </trans-unit>
        <trans-unit id="ccf896e081192f981240670d0e7869acc682d16d" translate="yes" xml:space="preserve">
          <source>Information about a received signal (derived from &lt;code&gt;siginfo_t&lt;/code&gt;).</source>
          <target state="translated">受信信号に関する情報（ &lt;code&gt;siginfo_t&lt;/code&gt; から派生）。</target>
        </trans-unit>
        <trans-unit id="e730d579902dace90d61c30931b7c39b9b5c188a" translate="yes" xml:space="preserve">
          <source>Information about the characteristics of the host system lucky enough to run your program.</source>
          <target state="translated">プログラムを運良く実行できたホストシステムの特徴についての情報。</target>
        </trans-unit>
        <trans-unit id="97818649517ae55c8ef983801726362db33a72b7" translate="yes" xml:space="preserve">
          <source>Information about your computer.</source>
          <target state="translated">パソコンに関する情報です。</target>
        </trans-unit>
        <trans-unit id="7590d8f956e48cf87c1411168c5822d362a8880b" translate="yes" xml:space="preserve">
          <source>Information specific to a particular type of signal (derived from &lt;code&gt;siginfo_t&lt;/code&gt;).</source>
          <target state="translated">特定のタイプの信号に固有の情報（ &lt;code&gt;siginfo_t&lt;/code&gt; から派生）。</target>
        </trans-unit>
        <trans-unit id="18f99833bb423f35b13b6374e87a08306b82f669" translate="yes" xml:space="preserve">
          <source>Inherit</source>
          <target state="translated">Inherit</target>
        </trans-unit>
        <trans-unit id="10a7ab6418304c704b776a62f13dc7b3f3d8190a" translate="yes" xml:space="preserve">
          <source>Inherit Handle from parent</source>
          <target state="translated">親からハンドルを継承</target>
        </trans-unit>
        <trans-unit id="131da1e4b635c2e4aa073e59724b377201ce6033" translate="yes" xml:space="preserve">
          <source>InitialQuote</source>
          <target state="translated">InitialQuote</target>
        </trans-unit>
        <trans-unit id="68fa16ffd48f366e4fa8d57fea78ff03fcab0191" translate="yes" xml:space="preserve">
          <source>Initialization</source>
          <target state="translated">Initialization</target>
        </trans-unit>
        <trans-unit id="468840c91f4e11363baba6fad080b835e2d90e74" translate="yes" xml:space="preserve">
          <source>Initialize a session of line-oriented user interaction.</source>
          <target state="translated">ライン指向のユーザーインタラクションのセッションを初期化します。</target>
        </trans-unit>
        <trans-unit id="79a1bd4a448da27813a2c98ec5cbdca961401161" translate="yes" xml:space="preserve">
          <source>Initialize the terminfo library to the given terminal entry.</source>
          <target state="translated">Terminfoライブラリを与えられたターミナルエントリに初期化します。</target>
        </trans-unit>
        <trans-unit id="f311d39fb45ca161e338979b5589e040c6185db3" translate="yes" xml:space="preserve">
          <source>Initialize the terminfo library, using the &lt;code&gt;TERM&lt;/code&gt; environmental variable. If &lt;code&gt;TERM&lt;/code&gt; is not set, we use the generic, minimal entry &lt;code&gt;dumb&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TERM&lt;/code&gt; 環境変数を使用して、terminfoライブラリを初期化します。 &lt;code&gt;TERM&lt;/code&gt; が設定されていない場合は、汎用の最小エントリ &lt;code&gt;dumb&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="939c8fcbb3a241e55009e926ba9e9f9f130c11fc" translate="yes" xml:space="preserve">
          <source>Initializes your &lt;a href=&quot;#c.EventLogWriter&quot;&gt;&lt;code&gt;EventLogWriter&lt;/code&gt;&lt;/a&gt;. This is optional.</source>
          <target state="translated">&lt;a href=&quot;#c.EventLogWriter&quot;&gt; &lt;code&gt;EventLogWriter&lt;/code&gt; を&lt;/a&gt;初期化します。これはオプションです。</target>
        </trans-unit>
        <trans-unit id="c79f3175dc50a18ee0d2393eff10c5aa2297aaaf" translate="yes" xml:space="preserve">
          <source>Inject a value into the monadic type.</source>
          <target state="translated">モナディック型に値を注入します。</target>
        </trans-unit>
        <trans-unit id="7de60f53f52e7d4a1d23489236b528a745ebb923" translate="yes" xml:space="preserve">
          <source>Injective type families are enabled with &lt;code&gt;-XTypeFamilyDependencies&lt;/code&gt; language extension. This extension implies &lt;code&gt;-XTypeFamilies&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-XTypeFamilyDependencies&lt;/code&gt; タイプファミリーは、-XTypeFamilyDependencies言語拡張機能で有効になります。この拡張機能は &lt;code&gt;-XTypeFamilies&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="3800191eed005fd216c850a6af16770c6198afc5" translate="yes" xml:space="preserve">
          <source>Injectivity annotation</source>
          <target state="translated">インジェクティビティのアノテーション</target>
        </trans-unit>
        <trans-unit id="20740ccc0ccfa9620154536bb90e4481418a8cde" translate="yes" xml:space="preserve">
          <source>Injectivity annotation is added after type family head and consists of two parts:</source>
          <target state="translated">射影性アノテーションは、ファミリーヘッド型の後に追加され、2つの部分から構成されています。</target>
        </trans-unit>
        <trans-unit id="5ce4a424681e8e8d4af68879e4d178e19578aaeb" translate="yes" xml:space="preserve">
          <source>InjectivityAnn</source>
          <target state="translated">InjectivityAnn</target>
        </trans-unit>
        <trans-unit id="70da87d6559d7f1134da3bb10fd8c978c0bbd8a1" translate="yes" xml:space="preserve">
          <source>Inlinable</source>
          <target state="translated">Inlinable</target>
        </trans-unit>
        <trans-unit id="2e347f4ceb23a6d8637cc8028fda9ad8c7b7c47f" translate="yes" xml:space="preserve">
          <source>Inline</source>
          <target state="translated">Inline</target>
        </trans-unit>
        <trans-unit id="2cf1a81193ffc568b768198d38637e294820f553" translate="yes" xml:space="preserve">
          <source>Inline &lt;code&gt;memcpy&lt;/code&gt; calls if they would generate no more than ⟨n⟩ pseudo-instructions.</source>
          <target state="translated">生成される疑似命令が「n」個以下の場合、インライン &lt;code&gt;memcpy&lt;/code&gt; 呼び出し。</target>
        </trans-unit>
        <trans-unit id="5455a4bec4fb43a62132e2ac05940c352abd92c6" translate="yes" xml:space="preserve">
          <source>Inline &lt;code&gt;memset&lt;/code&gt; calls if they would generate no more than n pseudo instructions.</source>
          <target state="translated">生成する疑似命令がn以下の場合、インライン &lt;code&gt;memset&lt;/code&gt; 呼び出し。</target>
        </trans-unit>
        <trans-unit id="f455d62d020e6eddcc787a8c9c55ba1f78236d68" translate="yes" xml:space="preserve">
          <source>Input / Output</source>
          <target state="translated">入力/出力</target>
        </trans-unit>
        <trans-unit id="d395c711b92fc61b74f8c3ff68d9004aa7cb8404" translate="yes" xml:space="preserve">
          <source>Input functions</source>
          <target state="translated">入力機能</target>
        </trans-unit>
        <trans-unit id="5d1b609b532bb8aa117614c8340893874e0d56cc" translate="yes" xml:space="preserve">
          <source>Input string.</source>
          <target state="translated">入力文字列。</target>
        </trans-unit>
        <trans-unit id="746797b58353ee493a111e047d8432803b2bf4f0" translate="yes" xml:space="preserve">
          <source>Input text.</source>
          <target state="translated">テキストを入力します。</target>
        </trans-unit>
        <trans-unit id="59f2d1955d5cf0a2b8bee3b6d9a4ed1809c129a3" translate="yes" xml:space="preserve">
          <source>InputLineLimit</source>
          <target state="translated">InputLineLimit</target>
        </trans-unit>
        <trans-unit id="a1aa2989284777e5694122e01199982258b92b20" translate="yes" xml:space="preserve">
          <source>InputQueue</source>
          <target state="translated">InputQueue</target>
        </trans-unit>
        <trans-unit id="642ac7e20b3f8a8dd831942dd30d6fb267ed8a73" translate="yes" xml:space="preserve">
          <source>InputQueueLimit</source>
          <target state="translated">InputQueueLimit</target>
        </trans-unit>
        <trans-unit id="6b355e50341a905ef45c8beb3f4a624b29b98e2e" translate="yes" xml:space="preserve">
          <source>InputState</source>
          <target state="translated">InputState</target>
        </trans-unit>
        <trans-unit id="49141e9c95b68ea8d21c96c95e556fd4e3c8b9a0" translate="yes" xml:space="preserve">
          <source>InputT</source>
          <target state="translated">InputT</target>
        </trans-unit>
        <trans-unit id="e75f30b22d5bec33bb907d8901f7fb77cde5c043" translate="yes" xml:space="preserve">
          <source>InputUnderflow</source>
          <target state="translated">InputUnderflow</target>
        </trans-unit>
        <trans-unit id="d42b1cf617b7ff4fdd4f096b44e1d83b5423c29e" translate="yes" xml:space="preserve">
          <source>Insert &lt;code&gt;error&lt;/code&gt; expressions after bottoming expressions; useful when debugging the compiler.</source>
          <target state="translated">ボトム式の後に &lt;code&gt;error&lt;/code&gt; 式を挿入します。コンパイラのデバッグ時に役立ちます。</target>
        </trans-unit>
        <trans-unit id="76aa707dc17cbfd229d5de411f19e42614784006" translate="yes" xml:space="preserve">
          <source>Insert a scalar at the given position in a vector.</source>
          <target state="translated">ベクトルの指定された位置にスカラを挿入します.</target>
        </trans-unit>
        <trans-unit id="6ffaeff164e1d6773f39ae8fe9bbe6e6ef734c6a" translate="yes" xml:space="preserve">
          <source>Insertion</source>
          <target state="translated">Insertion</target>
        </trans-unit>
        <trans-unit id="0fb526c25f533482f1770bd05055cb689b6470bc" translate="yes" xml:space="preserve">
          <source>Insertion/removal</source>
          <target state="translated">Insertion/removal</target>
        </trans-unit>
        <trans-unit id="33b33d75acd9bccbdc63b02e3a1b9e48f6928c65" translate="yes" xml:space="preserve">
          <source>Inside a &lt;a href=&quot;#pragma-RULES&quot;&gt;&lt;code&gt;RULES&lt;/code&gt;&lt;/a&gt; &amp;ldquo;&lt;code&gt;forall&lt;/code&gt;&amp;rdquo; is treated as a keyword, regardless of any other flag settings. Furthermore, inside a &lt;a href=&quot;#pragma-RULES&quot;&gt;&lt;code&gt;RULES&lt;/code&gt;&lt;/a&gt;, the language extension &lt;a href=&quot;#extension-ScopedTypeVariables&quot;&gt;&lt;code&gt;ScopedTypeVariables&lt;/code&gt;&lt;/a&gt; is automatically enabled; see &lt;a href=&quot;#scoped-type-variables&quot;&gt;Lexically scoped type variables&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#pragma-RULES&quot;&gt; &lt;code&gt;RULES&lt;/code&gt; &lt;/a&gt;内では、他のフラグ設定に関係なく、「 &lt;code&gt;forall&lt;/code&gt; 」はキーワードとして扱われます。さらに、&lt;a href=&quot;#pragma-RULES&quot;&gt; &lt;code&gt;RULES&lt;/code&gt; &lt;/a&gt;内では、言語拡張&lt;a href=&quot;#extension-ScopedTypeVariables&quot;&gt; &lt;code&gt;ScopedTypeVariables&lt;/code&gt; &lt;/a&gt;が自動的に有効になります。&lt;a href=&quot;#scoped-type-variables&quot;&gt;字句スコープの型変数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="94d741748ca5ae1bc40ce11d1afc506bcc3344ad" translate="yes" xml:space="preserve">
          <source>Inside a &lt;a href=&quot;#pragma-RULES&quot;&gt;&lt;code&gt;RULES&lt;/code&gt;&lt;/a&gt; &amp;ldquo;&lt;code&gt;forall&lt;/code&gt;&amp;rdquo; is treated as a keyword, regardless of any other flag settings. Furthermore, inside a &lt;a href=&quot;#pragma-RULES&quot;&gt;&lt;code&gt;RULES&lt;/code&gt;&lt;/a&gt;, the language extension &lt;a href=&quot;scoped_type_variables#extension-ScopedTypeVariables&quot;&gt;&lt;code&gt;ScopedTypeVariables&lt;/code&gt;&lt;/a&gt; is automatically enabled; see &lt;a href=&quot;scoped_type_variables#scoped-type-variables&quot;&gt;Lexically scoped type variables&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#pragma-RULES&quot;&gt; &lt;code&gt;RULES&lt;/code&gt; &lt;/a&gt;内では、他のフラグ設定に関係なく、「 &lt;code&gt;forall&lt;/code&gt; 」はキーワードとして扱われます。さらに、&lt;a href=&quot;#pragma-RULES&quot;&gt; &lt;code&gt;RULES&lt;/code&gt; &lt;/a&gt;内では、言語拡張&lt;a href=&quot;scoped_type_variables#extension-ScopedTypeVariables&quot;&gt; &lt;code&gt;ScopedTypeVariables&lt;/code&gt; &lt;/a&gt;が自動的に有効になります。&lt;a href=&quot;scoped_type_variables#scoped-type-variables&quot;&gt;字句スコープの型変数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3de0c91236421ce4d302848e923cf815031f7fda" translate="yes" xml:space="preserve">
          <source>Inside a &lt;code&gt;RULE&lt;/code&gt; &amp;ldquo;&lt;code&gt;forall&lt;/code&gt;&amp;rdquo; is treated as a keyword, regardless of any other flag settings. Furthermore, inside a RULE, the language extension &lt;a href=&quot;#extension-ScopedTypeVariables&quot;&gt;&lt;code&gt;ScopedTypeVariables&lt;/code&gt;&lt;/a&gt; is automatically enabled; see &lt;a href=&quot;#scoped-type-variables&quot;&gt;Lexically scoped type variables&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;RULE&lt;/code&gt; 内では、「 &lt;code&gt;forall&lt;/code&gt; 」は、他のフラグ設定に関係なく、キーワードとして扱われます。さらに、RULE内では、言語拡張&lt;a href=&quot;#extension-ScopedTypeVariables&quot;&gt; &lt;code&gt;ScopedTypeVariables&lt;/code&gt; &lt;/a&gt;が自動的に有効になります。&lt;a href=&quot;#scoped-type-variables&quot;&gt;字句スコープの型変数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8052685f0cc727e7c2ebcd111bc548b4add6a4b8" translate="yes" xml:space="preserve">
          <source>Inside a splice you can only call functions defined in imported modules, not functions defined elsewhere in the same module. Note that declaration splices are not allowed anywhere except at top level (outside any other declarations).</source>
          <target state="translated">スプライスの中では、インポートされたモジュールで定義された関数のみを呼び出すことができ、同じモジュール内の他の場所で定義された関数は呼び出すことができません。宣言スプライスは、トップレベル (他の宣言の外側)以外の場所では許されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="545835b49fc011bc077a5db3657fd4e34d03642a" translate="yes" xml:space="preserve">
          <source>Inspecting</source>
          <target state="translated">Inspecting</target>
        </trans-unit>
        <trans-unit id="2409022af23815ff0491ac232cbdc6c5b9d6cd9e" translate="yes" xml:space="preserve">
          <source>Inspired by the paper &lt;em&gt;Functional Programming with Overloading and Higher-Order Polymorphism&lt;/em&gt;, Mark P Jones (&lt;a href=&quot;http://web.cecs.pdx.edu/~mpj/&quot;&gt;http://web.cecs.pdx.edu/~mpj/&lt;/a&gt;) Advanced School of Functional Programming, 1995.</source>
          <target state="translated">紙に触発&lt;em&gt;オーバーロードと高次多型と関数型プログラミング&lt;/em&gt;、マーク・P・ジョーンズ（&lt;a href=&quot;http://web.cecs.pdx.edu/~mpj/&quot;&gt;http://web.cecs.pdx.edu/~mpj/&lt;/a&gt;）関数プログラミングの高度な学校、1995。</target>
        </trans-unit>
        <trans-unit id="70c309e18c61bc57ee637952f14b1c7107d7947a" translate="yes" xml:space="preserve">
          <source>Inspired by the paper &lt;em&gt;Functional Programming with Overloading and Higher-Order Polymorphism&lt;/em&gt;, Mark P Jones (&lt;a href=&quot;http://web.cecs.pdx.edu/~mpj/pubs/springschool.html&quot;&gt;http://web.cecs.pdx.edu/~mpj/pubs/springschool.html&lt;/a&gt;) Advanced School of Functional Programming, 1995.</source>
          <target state="translated">紙に触発&lt;em&gt;オーバーロードと高次多型と関数型プログラミング&lt;/em&gt;、マーク・P・ジョーンズ（&lt;a href=&quot;http://web.cecs.pdx.edu/~mpj/pubs/springschool.html&quot;&gt;http://web.cecs.pdx.edu/~mpj/pubs/springschool.html&lt;/a&gt;）関数プログラミングの高度な学校、1995。</target>
        </trans-unit>
        <trans-unit id="c0aacbdde24ca156566b7d32f70c5cccf57ab9e3" translate="yes" xml:space="preserve">
          <source>Install standard signal handlers for catching ^C, which just throw an exception in the target thread. The current target thread is the thread at the head of the list in the MVar passed to installSignalHandlers.</source>
          <target state="translated">C をキャッチするための標準のシグナルハンドラをインストールします。現在のターゲットスレッドは、installSignalHandlers に渡された MVar のリストの先頭にあるスレッドです。</target>
        </trans-unit>
        <trans-unit id="4a69978d36d4f8c81b1e10d8995051dff3da9a47" translate="yes" xml:space="preserve">
          <source>Installer detection can be also turned off globally for the system using the security control panel, but GHC by default generates binaries that don&amp;rsquo;t depend on the user having disabled installer detection.</source>
          <target state="translated">インストーラー検出は、セキュリティコントロールパネルを使用してシステムに対してグローバルにオフにすることもできますが、GHCはデフォルトで、インストーラー検出を無効にしたユーザーに依存しないバイナリを生成します。</target>
        </trans-unit>
        <trans-unit id="221ab4fc522872824cd72443453566a64d62e095" translate="yes" xml:space="preserve">
          <source>Instance declarations</source>
          <target state="translated">インスタンス宣言</target>
        </trans-unit>
        <trans-unit id="799a53eb0cd003248b751073c77a5d5c34971dc1" translate="yes" xml:space="preserve">
          <source>Instance declarations are not allowed to be declared with nested &lt;a href=&quot;#id7&quot;&gt;&lt;span id=&quot;id8&quot;&gt;``&lt;/span&gt;&lt;/a&gt;forall``s or &lt;a href=&quot;#id9&quot;&gt;&lt;span id=&quot;id10&quot;&gt;``&lt;/span&gt;&lt;/a&gt;=&amp;gt;``s. For example, this would be rejected:</source>
          <target state="translated">インスタンス宣言は、ネストされた&lt;a href=&quot;#id7&quot;&gt;&lt;span id=&quot;id8&quot;&gt;``&lt;/span&gt;&lt;/a&gt; forall``または&lt;a href=&quot;#id9&quot;&gt;&lt;span id=&quot;id10&quot;&gt;``&lt;/span&gt;&lt;/a&gt; =&amp;gt; ``で宣言することはできません。たとえば、これは拒否されます。</target>
        </trans-unit>
        <trans-unit id="7cc8d33f2d97d8e835a27045d7ac58f353fddcec" translate="yes" xml:space="preserve">
          <source>Instance declarations are only merged if their heads are exactly the same, so it is possible to get into a situation where GHC thinks that instances in a signature are overlapping, even if they are implemented in a non-overlapping way. If this is giving you problems give us a shout.</source>
          <target state="translated">インスタンス宣言は、その頭が全く同じである場合にのみマージされるので、たとえ重ならない方法で実装されていても、シグネチャ内のインスタンスが重なっているとGHCが考えるような状況に陥る可能性があります。もしこれが問題を引き起こしているのであれば、私たちに声をかけてください。</target>
        </trans-unit>
        <trans-unit id="44d84e2252fdea394c95b5f2a46555b5e11e4e23" translate="yes" xml:space="preserve">
          <source>Instance declarations of data and newtype families are very similar to standard data and newtype declarations. The only two differences are that the keyword &lt;code&gt;data&lt;/code&gt; or &lt;code&gt;newtype&lt;/code&gt; is followed by &lt;code&gt;instance&lt;/code&gt; and that some or all of the type arguments can be non-variable types, but may not contain forall types or type synonym families. However, data families are generally allowed in type parameters, and type synonyms are allowed as long as they are fully applied and expand to a type that is itself admissible - exactly as this is required for occurrences of type synonyms in class instance parameters. For example, the &lt;code&gt;Either&lt;/code&gt; instance for &lt;code&gt;GMap&lt;/code&gt; is</source>
          <target state="translated">データおよびnewtypeファミリーのインスタンス宣言は、標準のデータおよびnewtype宣言と非常に似ています。唯一の2つの違いは、キーワード &lt;code&gt;data&lt;/code&gt; または &lt;code&gt;newtype&lt;/code&gt; の後に &lt;code&gt;instance&lt;/code&gt; が続くことと、型引数の一部またはすべてが非変数型である可能性があることですが、forall型または型の同義語ファミリーが含まれていない場合があります。ただし、データファミリーは通常、型パラメーターで許可され、完全に適用され、それ自体が許容される型に拡張される限り、型の同義語が許可されます-これは、クラスインスタンスパラメーターでの型の同義語の出現に必要とされるのとまったく同じです。たとえば、 &lt;code&gt;GMap&lt;/code&gt; の &lt;code&gt;Either&lt;/code&gt; インスタンスは</target>
        </trans-unit>
        <trans-unit id="83bfa7778c9507fc8976cd01f0cb81fffebfd1e7" translate="yes" xml:space="preserve">
          <source>Instance declarations of type families are very similar to standard type synonym declarations. The only two differences are that the keyword &lt;code&gt;type&lt;/code&gt; is followed by &lt;code&gt;instance&lt;/code&gt; and that some or all of the type arguments can be non-variable types, but may not contain forall types or type synonym families. However, data families are generally allowed, and type synonyms are allowed as long as they are fully applied and expand to a type that is admissible - these are the exact same requirements as for data instances. For example, the &lt;code&gt;[e]&lt;/code&gt; instance for &lt;code&gt;Elem&lt;/code&gt; is</source>
          <target state="translated">型ファミリーのインスタンス宣言は、標準の型シノニム宣言と非常によく似ています。唯一の2つの違いは、キーワード &lt;code&gt;type&lt;/code&gt; 後に &lt;code&gt;instance&lt;/code&gt; が続くことと、タイプ引数の一部またはすべてが変数以外のタイプになる可能性があることですが、forallタイプまたはタイプシノニムファミリーを含めることはできません。ただし、データファミリーは一般に許可され、タイプのシノニムは完全に適用され、許容可能なタイプに拡張される限り許可されます。これらはデータインスタンスの場合とまったく同じ要件です。たとえば、 &lt;code&gt;Elem&lt;/code&gt; の &lt;code&gt;[e]&lt;/code&gt; インスタンスは</target>
        </trans-unit>
        <trans-unit id="aa54ccd8a5b1e6248e90321db5cede28dbc27c83" translate="yes" xml:space="preserve">
          <source>Instance details</source>
          <target state="translated">インスタンスの詳細</target>
        </trans-unit>
        <trans-unit id="7e9c3e59e4902eb11a9bc6ca6aecc9cd55844913" translate="yes" xml:space="preserve">
          <source>Instance lookup</source>
          <target state="translated">インスタンスルックアップ</target>
        </trans-unit>
        <trans-unit id="4d286d9c6958cb859af4d3cc5f70112b22b5d71b" translate="yes" xml:space="preserve">
          <source>InstanceDec</source>
          <target state="translated">InstanceDec</target>
        </trans-unit>
        <trans-unit id="fd5054f4d8b7d330705d793f60720bb1539b82c2" translate="yes" xml:space="preserve">
          <source>InstanceSigs</source>
          <target state="translated">InstanceSigs</target>
        </trans-unit>
        <trans-unit id="86d67413e7f102d37a19a41e92518fd07b196a5a" translate="yes" xml:space="preserve">
          <source>Instances</source>
          <target state="translated">Instances</target>
        </trans-unit>
        <trans-unit id="87602c33058f0ebd121afb309504a6eb0e28e43e" translate="yes" xml:space="preserve">
          <source>Instances are similar to &lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt;, e.g. given a data type</source>
          <target state="translated">インスタンスは &lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; に似ています。たとえば、データ型が与えられます</target>
        </trans-unit>
        <trans-unit id="2b4574eaaa234d54582199f6b7f5240c28a0c1c8" translate="yes" xml:space="preserve">
          <source>Instances are similar to &lt;code&gt;&lt;a href=&quot;prelude#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt;, e.g. given a data type</source>
          <target state="translated">インスタンスは &lt;code&gt;&lt;a href=&quot;prelude#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; に似ています。たとえば、データ型が与えられます</target>
        </trans-unit>
        <trans-unit id="85623227591bc8f2cac930639d86e2c526f030d5" translate="yes" xml:space="preserve">
          <source>Instances can be derived automatically by enabling the &lt;code&gt;DeriveFoldable&lt;/code&gt; extension. For example, a derived instance for a binary tree might be:</source>
          <target state="translated">&lt;code&gt;DeriveFoldable&lt;/code&gt; 拡張機能を有効にすることで、インスタンスを自動的に派生させることができます。たとえば、バイナリツリーの派生インスタンスは次のようになります。</target>
        </trans-unit>
        <trans-unit id="e4b471ed6e4af73beb38b8a58ed041752edf7705" translate="yes" xml:space="preserve">
          <source>Instances details</source>
          <target state="translated">インスタンスの詳細</target>
        </trans-unit>
        <trans-unit id="d8a851e89f00abbc9380f8fe634c1825d148cc64" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; should satisfy the following:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; インスタンスは以下を満たす必要があります：</target>
        </trans-unit>
        <trans-unit id="f456cfda455d78aa8a5bb61b135052b5780b6a6d" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;&lt;a href=&quot;control-monad#t:MonadFail&quot;&gt;MonadFail&lt;/a&gt;&lt;/code&gt; should satisfy the following law: &lt;code&gt;fail s&lt;/code&gt; should be a left zero for &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#t:MonadFail&quot;&gt;MonadFail&lt;/a&gt;&lt;/code&gt; のインスタンスは、次の法則を満たしている必要があります： &lt;code&gt;fail s&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; は&amp;gt;&amp;gt; =の左ゼロでなければなりません。</target>
        </trans-unit>
        <trans-unit id="af23596067e4762785ef1756f8ec64eb7e700ca3" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;&lt;a href=&quot;control-monad-fail#t:MonadFail&quot;&gt;MonadFail&lt;/a&gt;&lt;/code&gt; should satisfy the following law: &lt;code&gt;fail s&lt;/code&gt; should be a left zero for &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-fail#t:MonadFail&quot;&gt;MonadFail&lt;/a&gt;&lt;/code&gt; のインスタンスは、次の法則を満たしている必要があります： &lt;code&gt;fail s&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; は&amp;gt;&amp;gt; =の左ゼロでなければなりません。</target>
        </trans-unit>
        <trans-unit id="d95157f0e1123c9e701efbf70b7e19778274e572" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;&lt;a href=&quot;control-monad-instances#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; should satisfy the following:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-instances#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; インスタンスは以下を満たす必要があります：</target>
        </trans-unit>
        <trans-unit id="c793ddfb9db8e74c5e0c06e1d28e546ad4cb0556" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; can be derived for any user-defined datatype whose constituent types are in &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt;. The declared order of the constructors in the data declaration determines the ordering in derived &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; instances. The &lt;code&gt;&lt;a href=&quot;data-ord#t:Ordering&quot;&gt;Ordering&lt;/a&gt;&lt;/code&gt; datatype allows a single comparison to determine the precise ordering of two objects.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; のインスタンスは、構成要素の型が &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; にある任意のユーザー定義データ型から派生できます。データ宣言でのコンストラクターの宣言された順序は、派生 &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; インスタンスの順序を決定します。 &lt;code&gt;&lt;a href=&quot;data-ord#t:Ordering&quot;&gt;Ordering&lt;/a&gt;&lt;/code&gt; データ型は、2つのオブジェクトの正確な順序を決定するために、単一の比較を可能にします。</target>
        </trans-unit>
        <trans-unit id="2b35050349db25cdc61794ff971eb58445ded210" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;&lt;a href=&quot;ghc-base#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; should satisfy the following:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-base#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; インスタンスは以下を満たす必要があります：</target>
        </trans-unit>
        <trans-unit id="54c208a5a34a501f171c263767afb89fcd30fabe" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; may be derived for any enumeration type (types whose constructors have no fields). The nullary constructors are assumed to be numbered left-to-right by &lt;code&gt;&lt;a href=&quot;ghc-enum#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;0&lt;/code&gt; through &lt;code&gt;n-1&lt;/code&gt;. See Chapter 10 of the &lt;em&gt;Haskell Report&lt;/em&gt; for more details.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-enum#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; のインスタンスは、任意の列挙型（コンストラクターにフィールドがない型）から派生できます。nullaryコンストラクターは、 &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;n-1&lt;/code&gt; までの &lt;code&gt;&lt;a href=&quot;ghc-enum#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; によって左から右に番号が付けられていると想定されます。詳細については、&lt;em&gt;Haskellレポートの&lt;/em&gt;第10章を参照してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="993368854467462dff364596a665427fa9e766be" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;&lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; may be derived for any enumeration type (types whose constructors have no fields). The nullary constructors are assumed to be numbered left-to-right by &lt;code&gt;&lt;a href=&quot;prelude#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;0&lt;/code&gt; through &lt;code&gt;n-1&lt;/code&gt;. See Chapter 10 of the &lt;em&gt;Haskell Report&lt;/em&gt; for more details.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; のインスタンスは、任意の列挙型（コンストラクターにフィールドがない型）から派生できます。nullaryコンストラクターは、 &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;n-1&lt;/code&gt; までの &lt;code&gt;&lt;a href=&quot;prelude#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; によって左から右に番号が付けられていると想定されます。詳細については、&lt;em&gt;Haskellレポートの&lt;/em&gt;第10章を参照してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6abd05054200d033151c38fc2023bfb19af24a4f" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;&lt;a href=&quot;prelude#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; should satisfy the following:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; インスタンスは以下を満たす必要があります：</target>
        </trans-unit>
        <trans-unit id="81df02f73af490aca4a8ceac4875eec434e49205" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;&lt;a href=&quot;prelude#t:MonadFail&quot;&gt;MonadFail&lt;/a&gt;&lt;/code&gt; should satisfy the following law: &lt;code&gt;fail s&lt;/code&gt; should be a left zero for &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:MonadFail&quot;&gt;MonadFail&lt;/a&gt;&lt;/code&gt; のインスタンスは、次の法則を満たしている必要があります： &lt;code&gt;fail s&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; は&amp;gt;&amp;gt; =の左ゼロでなければなりません。</target>
        </trans-unit>
        <trans-unit id="8400c20b4cb48bf7adc682e14acc2013d85e7139" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; can be derived for any user-defined datatype whose constituent types are in &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt;. The declared order of the constructors in the data declaration determines the ordering in derived &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; instances. The &lt;code&gt;&lt;a href=&quot;prelude#t:Ordering&quot;&gt;Ordering&lt;/a&gt;&lt;/code&gt; datatype allows a single comparison to determine the precise ordering of two objects.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; のインスタンスは、構成要素の型が &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; にある任意のユーザー定義データ型から派生できます。データ宣言でのコンストラクターの宣言された順序は、派生 &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; インスタンスの順序を決定します。 &lt;code&gt;&lt;a href=&quot;prelude#t:Ordering&quot;&gt;Ordering&lt;/a&gt;&lt;/code&gt; データ型は、2つのオブジェクトの正確な順序を決定するために、単一の比較を可能にします。</target>
        </trans-unit>
        <trans-unit id="8498083049962c5ddf48a88c7ef6ff394e9c7be7" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;Monoid&lt;/code&gt; should also be instances of &lt;code&gt;Semigroup&lt;/code&gt;</source>
          <target state="translated">インスタンス &lt;code&gt;Monoid&lt;/code&gt; またのインスタンスでなければなりません &lt;code&gt;Semigroup&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b42499a12ab52b772685bdffe6cd77d34696c747" translate="yes" xml:space="preserve">
          <source>Instances of Binary should satisfy the following property:</source>
          <target state="translated">Binaryのインスタンスは、以下の特性を満たす必要があります。</target>
        </trans-unit>
        <trans-unit id="679c72c6bd3806fccb37008ccaad716ad6e46022" translate="yes" xml:space="preserve">
          <source>Instances of these classes can be derived by GHC with the &lt;a href=&quot;#extension-DeriveGeneric&quot;&gt;&lt;code&gt;DeriveGeneric&lt;/code&gt;&lt;/a&gt; extension, and are necessary to be able to define generic instances automatically.</source>
          <target state="translated">これらのクラスのインスタンスは、&lt;a href=&quot;#extension-DeriveGeneric&quot;&gt; &lt;code&gt;DeriveGeneric&lt;/code&gt; &lt;/a&gt;拡張を使用してGHCによって派生させることができ、ジェネリックインスタンスを自動的に定義できるようにするために必要です。</target>
        </trans-unit>
        <trans-unit id="65c1e5f128f1f1839602ec922ecbb3d89a2bfa33" translate="yes" xml:space="preserve">
          <source>Instances should ensure that, in the following code:</source>
          <target state="translated">インスタンスは、次のコードで、それを確実にする必要があります。</target>
        </trans-unit>
        <trans-unit id="60ec83a7328fd0f4c726f4dd91a7d148a7b39c03" translate="yes" xml:space="preserve">
          <source>Instances should obey the following law:</source>
          <target state="translated">インスタンスは次の法則に従うべきです。</target>
        </trans-unit>
        <trans-unit id="89fe09bb4f8ebf1e47ee60af8037d77fb33c5ffb" translate="yes" xml:space="preserve">
          <source>Instances should satisfy the following laws, which state that &lt;code&gt;&lt;a href=&quot;control-monad-io-class#v:liftIO&quot;&gt;liftIO&lt;/a&gt;&lt;/code&gt; is a transformer of monads:</source>
          <target state="translated">インスタンスは、 &lt;code&gt;&lt;a href=&quot;control-monad-io-class#v:liftIO&quot;&gt;liftIO&lt;/a&gt;&lt;/code&gt; がモナドの変換子であると述べている次の法律を満たしている必要があります。</target>
        </trans-unit>
        <trans-unit id="1abade2b53df1a1ba01e60f984a3a5290e836572" translate="yes" xml:space="preserve">
          <source>Instances should satisfy the following laws:</source>
          <target state="translated">インスタンスは以下の法則を満たす必要があります。</target>
        </trans-unit>
        <trans-unit id="9d7bb7203c91aa0d38c7b980a4ce66dfed489cf2" translate="yes" xml:space="preserve">
          <source>Instances should satisfy the following:</source>
          <target state="translated">インスタンスは以下の条件を満たす必要があります。</target>
        </trans-unit>
        <trans-unit id="e86269f38cc2b59aa37a9312708da931d8afbda8" translate="yes" xml:space="preserve">
          <source>Instances should satisfy the laws:</source>
          <target state="translated">インスタンスは法律を満たす必要があります。</target>
        </trans-unit>
        <trans-unit id="b012f0abcde18071b0722ff582581b311bd03281" translate="yes" xml:space="preserve">
          <source>Instead of a single form of arrow application (arrow tail) with two translations, the implementation provides two forms &lt;code&gt;-&amp;lt;&lt;/code&gt; (first-order) and &lt;code&gt;-&amp;lt;&amp;lt;&lt;/code&gt; (higher-order).</source>
          <target state="translated">2つの変換を伴う単一の形式の矢印アプリケーション（矢印の尾）の代わりに、実装は2つの形式 &lt;code&gt;-&amp;lt;&lt;/code&gt; （1次）および &lt;code&gt;-&amp;lt;&amp;lt;&lt;/code&gt; （高次）を提供します。</target>
        </trans-unit>
        <trans-unit id="886e0a6b103c70f084410d0784c49a059007efdd" translate="yes" xml:space="preserve">
          <source>Instead of creating an executable, GHC produces a shared object with this linker flag. Depending on the operating system target, this might be an ELF DSO, a Windows DLL, or a Mac OS dylib. GHC hides the operating system details beneath this uniform flag.</source>
          <target state="translated">GHCは実行ファイルを作成する代わりに、このリンカーフラグを持つ共有オブジェクトを生成します。オペレーティングシステムのターゲットによっては、これはELFのDSO、WindowsのDLL、またはMac OSのdylibかもしれません。GHCは、この統一フラグの下にオペレーティングシステムの詳細を隠します。</target>
        </trans-unit>
        <trans-unit id="4bea18059726367b2d2fc3a93789ffe96f83da94" translate="yes" xml:space="preserve">
          <source>Instead of making a recursive call, we introduce a dummy parameter &lt;code&gt;rec&lt;/code&gt;; when used within &lt;code&gt;&lt;a href=&quot;control-monad-fix#v:fix&quot;&gt;fix&lt;/a&gt;&lt;/code&gt;, this parameter then refers to &lt;code&gt;&lt;a href=&quot;control-monad-fix#v:fix&quot;&gt;fix&lt;/a&gt;&lt;/code&gt; argument, hence the recursion is reintroduced.</source>
          <target state="translated">再帰呼び出しを行う代わりに、ダミーパラメータ &lt;code&gt;rec&lt;/code&gt; を導入します。 &lt;code&gt;&lt;a href=&quot;control-monad-fix#v:fix&quot;&gt;fix&lt;/a&gt;&lt;/code&gt; 内で使用すると、このパラメーターは &lt;code&gt;&lt;a href=&quot;control-monad-fix#v:fix&quot;&gt;fix&lt;/a&gt;&lt;/code&gt; 引数を参照するため、再帰が再導入されます。</target>
        </trans-unit>
        <trans-unit id="4d75fde1ad8ce1fe9457a9340d10b92d1fe2f1c4" translate="yes" xml:space="preserve">
          <source>Instead of making a recursive call, we introduce a dummy parameter &lt;code&gt;rec&lt;/code&gt;; when used within &lt;code&gt;&lt;a href=&quot;control-monad-fix#v:fix&quot;&gt;fix&lt;/a&gt;&lt;/code&gt;, this parameter then refers to &lt;code&gt;&lt;a href=&quot;control-monad-fix#v:fix&quot;&gt;fix&lt;/a&gt;&lt;/code&gt;&amp;rsquo;s argument, hence the recursion is reintroduced.</source>
          <target state="translated">再帰呼び出しを行う代わりに、ダミーパラメータ &lt;code&gt;rec&lt;/code&gt; を導入します。 &lt;code&gt;&lt;a href=&quot;control-monad-fix#v:fix&quot;&gt;fix&lt;/a&gt;&lt;/code&gt; 内で使用される場合、このパラメーターは &lt;code&gt;&lt;a href=&quot;control-monad-fix#v:fix&quot;&gt;fix&lt;/a&gt;&lt;/code&gt; の引数を参照するため、再帰が再導入されます。</target>
        </trans-unit>
        <trans-unit id="43d6bd77abb0145c25600eed500e3ab34605d53a" translate="yes" xml:space="preserve">
          <source>Instead of making a recursive call, we introduce a dummy parameter &lt;code&gt;rec&lt;/code&gt;; when used within &lt;code&gt;&lt;a href=&quot;data-function#v:fix&quot;&gt;fix&lt;/a&gt;&lt;/code&gt;, this parameter then refers to &lt;code&gt;&lt;a href=&quot;data-function#v:fix&quot;&gt;fix&lt;/a&gt;&lt;/code&gt; argument, hence the recursion is reintroduced.</source>
          <target state="translated">再帰呼び出しを行う代わりに、ダミーパラメータ &lt;code&gt;rec&lt;/code&gt; を導入します。 &lt;code&gt;&lt;a href=&quot;data-function#v:fix&quot;&gt;fix&lt;/a&gt;&lt;/code&gt; 内で使用すると、このパラメーターは &lt;code&gt;&lt;a href=&quot;data-function#v:fix&quot;&gt;fix&lt;/a&gt;&lt;/code&gt; 引数を参照するため、再帰が再導入されます。</target>
        </trans-unit>
        <trans-unit id="f408254609f2594f75fbcdb0b71c211f8a49859f" translate="yes" xml:space="preserve">
          <source>Instead of making a recursive call, we introduce a dummy parameter &lt;code&gt;rec&lt;/code&gt;; when used within &lt;code&gt;&lt;a href=&quot;data-function#v:fix&quot;&gt;fix&lt;/a&gt;&lt;/code&gt;, this parameter then refers to &lt;code&gt;&lt;a href=&quot;data-function#v:fix&quot;&gt;fix&lt;/a&gt;&lt;/code&gt;&amp;rsquo;s argument, hence the recursion is reintroduced.</source>
          <target state="translated">再帰呼び出しを行う代わりに、ダミーパラメータ &lt;code&gt;rec&lt;/code&gt; を導入します。 &lt;code&gt;&lt;a href=&quot;data-function#v:fix&quot;&gt;fix&lt;/a&gt;&lt;/code&gt; 内で使用される場合、このパラメーターは &lt;code&gt;&lt;a href=&quot;data-function#v:fix&quot;&gt;fix&lt;/a&gt;&lt;/code&gt; の引数を参照するため、再帰が再導入されます。</target>
        </trans-unit>
        <trans-unit id="e766beefc2f70f81de8c559b30c93536dd165acf" translate="yes" xml:space="preserve">
          <source>Instead of reusing &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Rec0&quot;&gt;Rec0&lt;/a&gt;&lt;/code&gt;, a separate data family &lt;code&gt;&lt;a href=&quot;ghc-generics#t:URec&quot;&gt;URec&lt;/a&gt;&lt;/code&gt; is used to mark occurrences of common unlifted types:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-generics#t:Rec0&quot;&gt;Rec0&lt;/a&gt;&lt;/code&gt; を再利用する代わりに、別のデータファミリー &lt;code&gt;&lt;a href=&quot;ghc-generics#t:URec&quot;&gt;URec&lt;/a&gt;&lt;/code&gt; を使用して、リフトされていない一般的なタイプの発生をマークします。</target>
        </trans-unit>
        <trans-unit id="28acba53025bd15fee205581c34d0d6b581a22f3" translate="yes" xml:space="preserve">
          <source>Instead, use a &lt;code&gt;case&lt;/code&gt; expression:</source>
          <target state="translated">代わりに、 &lt;code&gt;case&lt;/code&gt; 式を使用します。</target>
        </trans-unit>
        <trans-unit id="904bf5c0f9e80212c91a23a693a49eb67e501513" translate="yes" xml:space="preserve">
          <source>Instead, we can use the &lt;a href=&quot;#ghci-cmd-:main&quot;&gt;&lt;code&gt;:main&lt;/code&gt;&lt;/a&gt; command. This runs whatever &lt;code&gt;main&lt;/code&gt; is in scope, with any arguments being treated the same as command-line arguments, e.g.:</source>
          <target state="translated">代わりに、&lt;a href=&quot;#ghci-cmd-:main&quot;&gt; &lt;code&gt;:main&lt;/code&gt; &lt;/a&gt;コマンドを使用できます。これは、スコープ内の &lt;code&gt;main&lt;/code&gt; が何であっても実行します。引数はコマンドライン引数と同じように扱われます。例：</target>
        </trans-unit>
        <trans-unit id="ed612bf7d1e1bf9249388e996ba2c817a283fe3f" translate="yes" xml:space="preserve">
          <source>Instead, we provide a function &lt;code&gt;&lt;a href=&quot;control-exception#v:catches&quot;&gt;catches&lt;/a&gt;&lt;/code&gt;, which would be used thus:</source>
          <target state="translated">代わりに、次のように使用される関数 &lt;code&gt;&lt;a href=&quot;control-exception#v:catches&quot;&gt;catches&lt;/a&gt;&lt;/code&gt; を提供します。</target>
        </trans-unit>
        <trans-unit id="af0a510e3a346d26bd86b56dc0c175daeafd39a0" translate="yes" xml:space="preserve">
          <source>Instead, you should only catch exactly the exceptions that you really want. In this case, this would likely be more specific than even &quot;any IO exception&quot;; a permissions error would likely also want to be handled differently. Instead, you would probably want something like:</source>
          <target state="translated">その代わり、本当に必要な例外だけを捕捉するべきです。この場合、これはおそらく &quot;any IO exception &quot;よりもより具体的なものになるでしょう。その代わりに、おそらく次のようなものが必要になるでしょう。</target>
        </trans-unit>
        <trans-unit id="ad2288edd1fb8d5afcaabf253b85250d058d0294" translate="yes" xml:space="preserve">
          <source>Instead, you would have to write &lt;code&gt;foo&lt;/code&gt; as a class operation, thus:</source>
          <target state="translated">代わりに、 &lt;code&gt;foo&lt;/code&gt; をクラスオペレーションとして記述する必要があるため、次のようになります。</target>
        </trans-unit>
        <trans-unit id="dbd230bbda194ea68580a1f846c3ea6c3d1dcbb0" translate="yes" xml:space="preserve">
          <source>Instruct &lt;a href=&quot;ghci#ghci-cmd-:print&quot;&gt;&lt;code&gt;:print&lt;/code&gt;&lt;/a&gt; to use &lt;code&gt;Show&lt;/code&gt; instances where possible.</source>
          <target state="translated">指示&lt;a href=&quot;ghci#ghci-cmd-:print&quot;&gt; &lt;code&gt;:print&lt;/code&gt; &lt;/a&gt;に使用する &lt;code&gt;Show&lt;/code&gt; 可能なインスタンスを。</target>
        </trans-unit>
        <trans-unit id="b8b938452c4d4e801965219c0e20127da862913e" translate="yes" xml:space="preserve">
          <source>Instruct the linker to produce a position-independent executable.</source>
          <target state="translated">リンカに位置に依存しない実行ファイルを生成するように指示します。</target>
        </trans-unit>
        <trans-unit id="395f6e3c69e858b418512c3a6a34e4c05014b51b" translate="yes" xml:space="preserve">
          <source>Instructs GHC to consider a value to be especially cheap to inline.</source>
          <target state="translated">GHCにインラインで特に安い値を検討するよう指示する。</target>
        </trans-unit>
        <trans-unit id="bccb53bdffc16a668b6a787212ca241e78854706" translate="yes" xml:space="preserve">
          <source>Instructs GHC to use the platform&amp;rsquo;s native vector registers to pass vector arguments during function calls. As with all vector support, this requires &lt;a href=&quot;phases#ghc-flag--fllvm&quot;&gt;&lt;code&gt;-fllvm&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">関数呼び出し中にプラットフォームのネイティブベクトルレジスタを使用してベクトル引数を渡すようにGHCに指示します。すべてのベクトルサポートと同様に、これには&lt;a href=&quot;phases#ghc-flag--fllvm&quot;&gt; &lt;code&gt;-fllvm&lt;/code&gt; &lt;/a&gt;が必要です。</target>
        </trans-unit>
        <trans-unit id="8fc26ab3c56e988207cb5b87c0a8f1b8c3e39ed8" translate="yes" xml:space="preserve">
          <source>Instructs the GHC driver not to delete any of its temporary files, which it normally keeps in &lt;code&gt;/tmp&lt;/code&gt; (or possibly elsewhere; see &lt;a href=&quot;#temp-files&quot;&gt;Redirecting temporary files&lt;/a&gt;). Running GHC with &lt;code&gt;-v&lt;/code&gt; will show you what temporary files were generated along the way.</source>
          <target state="translated">GHCドライバーに、一時ファイルを削除しないように指示します。一時ファイルは通常 &lt;code&gt;/tmp&lt;/code&gt; に保持されます（または他の場所にある可能性があります。&lt;a href=&quot;#temp-files&quot;&gt;一時ファイルのリダイレクトを&lt;/a&gt;参照してください）。 &lt;code&gt;-v&lt;/code&gt; を指定してGHCを実行すると、途中で生成された一時ファイルが表示されます。</target>
        </trans-unit>
        <trans-unit id="eeeb93766512243c6a86ffca2e17fc90c9bf7fbd" translate="yes" xml:space="preserve">
          <source>Instructs the LLVM code generator to fill dead STG registers with garbage instead of &lt;code&gt;undef&lt;/code&gt; in calls. This makes it easier to catch subtle code generator and runtime system bugs (e.g. see &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/11487&quot;&gt;#11487&lt;/a&gt;).</source>
          <target state="translated">LLVMコードジェネレーターに、呼び出しで &lt;code&gt;undef&lt;/code&gt; ではなく、デッドSTGレジスターをガベージで埋めるように指示します。これにより、コードジェネレーターとランタイムシステムの微妙なバグを簡単に&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/11487&quot;&gt;見つける&lt;/a&gt;ことができます（例：＃11487を参照）。</target>
        </trans-unit>
        <trans-unit id="2154c477da950e933ffd834aafe87aa85025a4f4" translate="yes" xml:space="preserve">
          <source>Instructs the LLVM code generator to fill dead STG registers with garbage instead of &lt;code&gt;undef&lt;/code&gt; in calls. This makes it easier to catch subtle code generator and runtime system bugs (e.g. see &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/11487&quot;&gt;Issue #11487&lt;/a&gt;).</source>
          <target state="translated">呼び出しで &lt;code&gt;undef&lt;/code&gt; の代わりに不要な STGレジスタをガベージで埋めるようにLLVMコードジェネレーターに指示します。これにより、微妙なコードジェネレーターやランタイムシステムのバグを簡単に検出できるようになります（たとえば、&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/11487&quot;&gt;問題＃11487を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="bfa150c9679995565d99e25e8bfa01f17da6a7ba" translate="yes" xml:space="preserve">
          <source>Instructs the compiler not to inline a value.</source>
          <target state="translated">コンパイラに値をインライン化しないように指示します。</target>
        </trans-unit>
        <trans-unit id="675da7443910dccefb93ff214351f3b254eb9326" translate="yes" xml:space="preserve">
          <source>Instructs the compiler not to unpack a constructor field.</source>
          <target state="translated">コンストラクタ・フィールドをアンパックしないようにコンパイラに指示します。</target>
        </trans-unit>
        <trans-unit id="91e67ac1bd85402d088ab03ef989ae5c792d157d" translate="yes" xml:space="preserve">
          <source>Instructs the compiler to unpack the contents of a constructor field into the constructor itself.</source>
          <target state="translated">コンストラクタ・フィールドの内容をコンストラクタ自身に展開するようにコンパイラに指示します。</target>
        </trans-unit>
        <trans-unit id="365865761dffc2759227bec5082fd7cd2a7643d4" translate="yes" xml:space="preserve">
          <source>Instructs the simplifier to emit &lt;code&gt;error&lt;/code&gt; expressions in the continuation of empty case analyses (which should bottom and consequently not return). This is helpful when debugging demand analysis bugs which can sometimes manifest as segmentation faults.</source>
          <target state="translated">空のケース分析の継続時に &lt;code&gt;error&lt;/code&gt; 式を出力するように簡略化プログラムに指示します（これにより、ボトムになり、結果として返されません）。これは、セグメンテーションエラーとして現れることがあるデマンド分析バグをデバッグするときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="40743f84300c6c1b0918774a56963484d75164e4" translate="yes" xml:space="preserve">
          <source>Insufficient resources are available to perform the operation.</source>
          <target state="translated">操作を実行するためのリソースが不足している。</target>
        </trans-unit>
        <trans-unit id="5c89edcac2811a6a9e8072517cae7f3cbfd5049d" translate="yes" xml:space="preserve">
          <source>Int</source>
          <target state="translated">Int</target>
        </trans-unit>
        <trans-unit id="b0b14c298354a19d3dea6a61e98e487fa2e51bfb" translate="yes" xml:space="preserve">
          <source>Int results</source>
          <target state="translated">ちゅうかんけっか</target>
        </trans-unit>
        <trans-unit id="474e49b09d35d1abae6313b6259476068b2d3bdb" translate="yes" xml:space="preserve">
          <source>Int#</source>
          <target state="translated">Int#</target>
        </trans-unit>
        <trans-unit id="7982e8c08d84551a97dde8c3cc98e03fc2d6082c" translate="yes" xml:space="preserve">
          <source>Int16</source>
          <target state="translated">Int16</target>
        </trans-unit>
        <trans-unit id="89aeb74564c1a3c6fca4d47bfe34fd7d47efe931" translate="yes" xml:space="preserve">
          <source>Int16#</source>
          <target state="translated">Int16#</target>
        </trans-unit>
        <trans-unit id="ea2b1a89854df33ae5484ba3a6d447aba6945b77" translate="yes" xml:space="preserve">
          <source>Int16ElemRep</source>
          <target state="translated">Int16ElemRep</target>
        </trans-unit>
        <trans-unit id="169183d72c87a00c62c1bb70bbe1dfca6290ac59" translate="yes" xml:space="preserve">
          <source>Int16Rep</source>
          <target state="translated">Int16Rep</target>
        </trans-unit>
        <trans-unit id="e2fdc71a811dda1a2d0bb96b4d4e22861e2e4166" translate="yes" xml:space="preserve">
          <source>Int16X16#</source>
          <target state="translated">Int16X16#</target>
        </trans-unit>
        <trans-unit id="89b499eed6d98b58571c4a678cbf7b8a491c01ed" translate="yes" xml:space="preserve">
          <source>Int16X32#</source>
          <target state="translated">Int16X32#</target>
        </trans-unit>
        <trans-unit id="126ed280a67ec0e5c6c0869188f83c20171f65d3" translate="yes" xml:space="preserve">
          <source>Int16X8#</source>
          <target state="translated">Int16X8#</target>
        </trans-unit>
        <trans-unit id="f4753a4dee54ee10a75b28c6d04eb9ea0d19acce" translate="yes" xml:space="preserve">
          <source>Int32</source>
          <target state="translated">Int32</target>
        </trans-unit>
        <trans-unit id="6f45983428b6cb7b5a6012b9615122a8dcae1e85" translate="yes" xml:space="preserve">
          <source>Int32#</source>
          <target state="translated">Int32#</target>
        </trans-unit>
        <trans-unit id="03ba764facc01a43ae3957c999e280d34c99b823" translate="yes" xml:space="preserve">
          <source>Int32ElemRep</source>
          <target state="translated">Int32ElemRep</target>
        </trans-unit>
        <trans-unit id="4764bca69c81c35d030020e51edddf17222f768e" translate="yes" xml:space="preserve">
          <source>Int32Rep</source>
          <target state="translated">Int32Rep</target>
        </trans-unit>
        <trans-unit id="1dfbf78305bea63530a44158509f80087a73c868" translate="yes" xml:space="preserve">
          <source>Int32X16#</source>
          <target state="translated">Int32X16#</target>
        </trans-unit>
        <trans-unit id="6e53f2f4f4529ad29ba52b5509f536c32a89ecff" translate="yes" xml:space="preserve">
          <source>Int32X4#</source>
          <target state="translated">Int32X4#</target>
        </trans-unit>
        <trans-unit id="882e5d71bbe1adc471c1dd253deaed0ba0cf0f2c" translate="yes" xml:space="preserve">
          <source>Int32X8#</source>
          <target state="translated">Int32X8#</target>
        </trans-unit>
        <trans-unit id="180fcbe698d0f2c44101a06215c472930bbd0a01" translate="yes" xml:space="preserve">
          <source>Int64</source>
          <target state="translated">Int64</target>
        </trans-unit>
        <trans-unit id="2e9b900740b9471923d1ee1ad9a28f09fca651d7" translate="yes" xml:space="preserve">
          <source>Int64#</source>
          <target state="translated">Int64#</target>
        </trans-unit>
        <trans-unit id="280ff825353cf945ad0e0cb68c2f00e2c3be2f18" translate="yes" xml:space="preserve">
          <source>Int64ElemRep</source>
          <target state="translated">Int64ElemRep</target>
        </trans-unit>
        <trans-unit id="35a21477cc0dcffc75ded41cca3b2d1f63f3bc54" translate="yes" xml:space="preserve">
          <source>Int64Rep</source>
          <target state="translated">Int64Rep</target>
        </trans-unit>
        <trans-unit id="7dc1816fbc9a76921593b78d139c0aefaa5ed5d4" translate="yes" xml:space="preserve">
          <source>Int64X2#</source>
          <target state="translated">Int64X2#</target>
        </trans-unit>
        <trans-unit id="b5d12f27a2badb0da71c1c025c40a353791c7df3" translate="yes" xml:space="preserve">
          <source>Int64X4#</source>
          <target state="translated">Int64X4#</target>
        </trans-unit>
        <trans-unit id="0126c222589438679d7129f37eaa49a40ef647ad" translate="yes" xml:space="preserve">
          <source>Int64X8#</source>
          <target state="translated">Int64X8#</target>
        </trans-unit>
        <trans-unit id="a96d87d7c8b3dcfbd0b1d669a1f16d6b32c2a364" translate="yes" xml:space="preserve">
          <source>Int8</source>
          <target state="translated">Int8</target>
        </trans-unit>
        <trans-unit id="f23dd6eb83dd2c6d4c26d67bd205664514ef3334" translate="yes" xml:space="preserve">
          <source>Int8#</source>
          <target state="translated">Int8#</target>
        </trans-unit>
        <trans-unit id="6432a5292cbe710c394997d2e832158d7d933219" translate="yes" xml:space="preserve">
          <source>Int8ElemRep</source>
          <target state="translated">Int8ElemRep</target>
        </trans-unit>
        <trans-unit id="eeefd58bf82829401c0268ef8251bdf8b3f24966" translate="yes" xml:space="preserve">
          <source>Int8Rep</source>
          <target state="translated">Int8Rep</target>
        </trans-unit>
        <trans-unit id="bca4f782d0f853ef5278cf2783e82bd4ca0e6793" translate="yes" xml:space="preserve">
          <source>Int8X16#</source>
          <target state="translated">Int8X16#</target>
        </trans-unit>
        <trans-unit id="273d50cf360a4f6d087c88837ee0b4808a7557d2" translate="yes" xml:space="preserve">
          <source>Int8X32#</source>
          <target state="translated">Int8X32#</target>
        </trans-unit>
        <trans-unit id="5ec83732ef2a77c6bd76ba72fb9dccf0fdb8ff21" translate="yes" xml:space="preserve">
          <source>Int8X64#</source>
          <target state="translated">Int8X64#</target>
        </trans-unit>
        <trans-unit id="e09cb14a20b097264eac071df65d1afd98163fbc" translate="yes" xml:space="preserve">
          <source>IntMap</source>
          <target state="translated">IntMap</target>
        </trans-unit>
        <trans-unit id="e63b5240ec2d5f7585915f4d28ddb5efc058620c" translate="yes" xml:space="preserve">
          <source>IntPtr</source>
          <target state="translated">IntPtr</target>
        </trans-unit>
        <trans-unit id="2901d3f7a1db5d58eeaffb4b887831e2d949eb75" translate="yes" xml:space="preserve">
          <source>IntRep</source>
          <target state="translated">IntRep</target>
        </trans-unit>
        <trans-unit id="9e69d47445a71be667d23e5d0ef7d5321b56a177" translate="yes" xml:space="preserve">
          <source>IntSet</source>
          <target state="translated">IntSet</target>
        </trans-unit>
        <trans-unit id="9edcffff4461c9083fbff857f8dcee0f0769cbd4" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Integer</target>
        </trans-unit>
        <trans-unit id="320552ac98d7f56a8b5c90eb071442ff5ade6253" translate="yes" xml:space="preserve">
          <source>Integer results</source>
          <target state="translated">整数結果</target>
        </trans-unit>
        <trans-unit id="5b14f5b085db1d133e9ea53c0ae99ca5b12454fa" translate="yes" xml:space="preserve">
          <source>Integers are stored in a kind of sign-magnitude form, hence do not expect two's complement form when using bit operations.</source>
          <target state="translated">整数は一種の符号-振幅形式で格納されているため、ビット演算を使用する際に2の補数形式を期待してはいけません。</target>
        </trans-unit>
        <trans-unit id="e3b59c9f1c26e320e172cac39695e68589e740a0" translate="yes" xml:space="preserve">
          <source>Integral</source>
          <target state="translated">Integral</target>
        </trans-unit>
        <trans-unit id="c4c03c5bf82bd9916b53979e703ce58d3667b527" translate="yes" xml:space="preserve">
          <source>Integral numbers, supporting integer division.</source>
          <target state="translated">整数、整数除算をサポートしています。</target>
        </trans-unit>
        <trans-unit id="234d47467506fc9f47ee7950fcdb7bb2ae54365b" translate="yes" xml:space="preserve">
          <source>Integral types</source>
          <target state="translated">積分型</target>
        </trans-unit>
        <trans-unit id="df30aeff3c9f2ae9693e9f1c28c3699de6eac4ed" translate="yes" xml:space="preserve">
          <source>Integral types with lossless conversion to and from pointers</source>
          <target state="translated">ポインタへのロスレス変換とポインタからのロスレス変換を備えた積分型</target>
        </trans-unit>
        <trans-unit id="e27829052d0d9df18b05cefeb88ad5a94afbc61c" translate="yes" xml:space="preserve">
          <source>Intended for use with pinned arrays; otherwise very unsafe!</source>
          <target state="translated">ピン留めされた配列での使用を想定していますが、そうでない場合は非常に危険です。</target>
        </trans-unit>
        <trans-unit id="007b2ebed9a4c28b982956fb6038e4230fef94c2" translate="yes" xml:space="preserve">
          <source>Interactive mode - normally used by just running &lt;code&gt;ghci&lt;/code&gt;; see &lt;a href=&quot;ghci#ghci&quot;&gt;Using GHCi&lt;/a&gt; for details.</source>
          <target state="translated">対話モード-通常は実行するだけで使用されます &lt;code&gt;ghci&lt;/code&gt; をます。詳細については、&lt;a href=&quot;ghci#ghci&quot;&gt;GHCiの使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d1a5c0c3d73751b79478f13c6aba7659e97bd850" translate="yes" xml:space="preserve">
          <source>Interactive mode, which is also available as &lt;strong&gt;ghci&lt;/strong&gt;. Interactive mode is described in more detail in &lt;a href=&quot;ghci#ghci&quot;&gt;Using GHCi&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;ghci&lt;/strong&gt;としても利用可能な対話モード&lt;strong&gt;&lt;/strong&gt;。インタラクティブモードの詳細については、&lt;a href=&quot;ghci#ghci&quot;&gt;GHCiの使用を参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="200ddf5e689f542251354b2292ff7f306c830bcd" translate="yes" xml:space="preserve">
          <source>Interactive sessions</source>
          <target state="translated">インタラクティブなセッション</target>
        </trans-unit>
        <trans-unit id="9b175511971a5226d37c0acfed7f54181e087e72" translate="yes" xml:space="preserve">
          <source>Interchange</source>
          <target state="translated">Interchange</target>
        </trans-unit>
        <trans-unit id="0889e1352d0093dd2c1bd60ccefdbe1787dedf12" translate="yes" xml:space="preserve">
          <source>Intermediate C file produced by the Haskell compiler.</source>
          <target state="translated">Haskell コンパイラが生成する中間的な C ファイルです。</target>
        </trans-unit>
        <trans-unit id="0e87fa48ab9403bcfb3ef1be0554d0a70b493987" translate="yes" xml:space="preserve">
          <source>Intermediate result in a processing pipeline.</source>
          <target state="translated">処理パイプラインの中間的な結果。</target>
        </trans-unit>
        <trans-unit id="fc9225a1693f44637be7aea70d7fcc2c5840704d" translate="yes" xml:space="preserve">
          <source>Internal</source>
          <target state="translated">Internal</target>
        </trans-unit>
        <trans-unit id="82a32977b22d691e4bebb6181d666886678637a3" translate="yes" xml:space="preserve">
          <source>Internal encoding of argv</source>
          <target state="translated">argv の内部エンコーディング</target>
        </trans-unit>
        <trans-unit id="25a43e5e4971ff9be08a18b36db8ee9809321bf3" translate="yes" xml:space="preserve">
          <source>Internal function used by the RTS to run sparks.</source>
          <target state="translated">RTSがスパークを実行するために使用する内部関数。</target>
        </trans-unit>
        <trans-unit id="811920182b71e4d6c39f62829f0533afa24b5bfb" translate="yes" xml:space="preserve">
          <source>Internal functions</source>
          <target state="translated">内部機能</target>
        </trans-unit>
        <trans-unit id="f9ce090f6b4e6812a2a33054e170fe0befa25fea" translate="yes" xml:space="preserve">
          <source>Internal implementation</source>
          <target state="translated">内部実装</target>
        </trans-unit>
        <trans-unit id="335c261c9e3240dffccc5e11b7feb9b035c0ffee" translate="yes" xml:space="preserve">
          <source>Internal modules are always subject to change from version to version.</source>
          <target state="translated">内部モジュールは常にバージョンによって変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="4cd52ec76491f663a1c43928caec2f316b4ca018" translate="yes" xml:space="preserve">
          <source>Internal modules are always subject to change from version to version. The contents of this module are also platform-dependent, hence what is shown in the Hackage documentation may differ from what is actually available on your system.</source>
          <target state="translated">内部モジュールは常にバージョンごとに変更される可能性があります。このモジュールの内容もプラットフォームに依存しているため、Hackageのドキュメントに示されている内容は、実際のシステムで利用可能なものとは異なる可能性があります。</target>
        </trans-unit>
        <trans-unit id="0fcdcb0ba8bba814068eb6100072ef47243548c0" translate="yes" xml:space="preserve">
          <source>Internal representation of ShortByteString</source>
          <target state="translated">ShortByteStringの内部表現</target>
        </trans-unit>
        <trans-unit id="6f8442c92f2a07632791660fdbe8ed261d183750" translate="yes" xml:space="preserve">
          <source>Internal stuff: support for ByteString FilePaths</source>
          <target state="translated">内部的なもの:ByteString FilePaths のサポート</target>
        </trans-unit>
        <trans-unit id="cd6b4c82116a3ab03a952912381612ba9253116d" translate="yes" xml:space="preserve">
          <source>Internal to GHC is yet a third equality relation &lt;code&gt;(~#)&lt;/code&gt;. It is heterogeneous (like &lt;code&gt;~~&lt;/code&gt;) and is used only internally. It may appear in error messages and other output only when &lt;a href=&quot;../using#ghc-flag--fprint-equality-relations&quot;&gt;&lt;code&gt;-fprint-equality-relations&lt;/code&gt;&lt;/a&gt; is enabled.</source>
          <target state="translated">GHCの内部には、まだ3番目の等式関係 &lt;code&gt;(~#)&lt;/code&gt; ます。これは（ &lt;code&gt;~~&lt;/code&gt; のように）異種であり、内部でのみ使用されます。&lt;a href=&quot;../using#ghc-flag--fprint-equality-relations&quot;&gt; &lt;code&gt;-fprint-equality-relations&lt;/code&gt; &lt;/a&gt;が有効になっている場合にのみ、エラーメッセージやその他の出力に表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="c06d3b6c05aaeb5431e0abe73a9ea613ced45014" translate="yes" xml:space="preserve">
          <source>Internal to GHC is yet a third equality relation &lt;code&gt;(~#)&lt;/code&gt;. It is heterogeneous (like &lt;code&gt;~~&lt;/code&gt;) and is used only internally. It may appear in error messages and other output only when &lt;a href=&quot;using#ghc-flag--fprint-equality-relations&quot;&gt;&lt;code&gt;-fprint-equality-relations&lt;/code&gt;&lt;/a&gt; is enabled.</source>
          <target state="translated">GHCの内部は、3番目の等式関係 &lt;code&gt;(~#)&lt;/code&gt; です。（ &lt;code&gt;~~&lt;/code&gt; のように）異種混合であり、内部でのみ使用されます。エラーメッセージやその他の出力に表示されるのは、&lt;a href=&quot;using#ghc-flag--fprint-equality-relations&quot;&gt; &lt;code&gt;-fprint-equality-relations&lt;/code&gt; &lt;/a&gt;が有効になっているです。</target>
        </trans-unit>
        <trans-unit id="2bd330af85b0e5f22d5c9a7160723d4849210dfe" translate="yes" xml:space="preserve">
          <source>Internally, &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;s are buffer-filling functions. They are executed by a &lt;em&gt;driver&lt;/em&gt; that provides them with an actual buffer to fill. Once called with a buffer, a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; fills it and returns a signal to the driver telling it that it is either done, has filled the current buffer, or wants to directly insert a reference to a chunk of memory. In the last two cases, the &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; also returns a continutation &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that the driver can call to fill the next buffer. Here, we provide the two drivers that satisfy almost all use cases. See &lt;a href=&quot;data-bytestring-builder-extra&quot;&gt;Data.ByteString.Builder.Extra&lt;/a&gt;, for information about fine-tuning them.</source>
          <target state="translated">内部的には、 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; はバッファを埋める関数です。それらは、埋めるための実際のバッファーを提供する&lt;em&gt;ドライバー&lt;/em&gt;によって実行されます。バッファで呼び出されると、 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; はそれを満たし、それが完了したか、現在のバッファを満たしたか、またはメモリのチャンクへの参照を直接挿入したいことを伝える信号をドライバに返します。最後の2つのケースで、 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; はまたcontinutationの返し &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; ドライバは、次のバッファを埋めるために呼び出すことができるということを。ここでは、ほぼすべてのユースケースを満たす2つのドライバーを提供します。それらの微調整については、&lt;a href=&quot;data-bytestring-builder-extra&quot;&gt;Data.ByteString.Builder.Extraを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d88cff51e0a932119461c68d8546032600672fb6" translate="yes" xml:space="preserve">
          <source>Internally, a builder constructs a lazy &lt;code&gt;Text&lt;/code&gt; by filling arrays piece by piece. As each buffer is filled, it is 'popped' off, to become a new chunk of the resulting lazy &lt;code&gt;Text&lt;/code&gt;. All this is hidden from the user of the &lt;code&gt;Builder&lt;/code&gt;.</source>
          <target state="translated">内部的には、ビルダーは配列を少しずつ埋めることで遅延 &lt;code&gt;Text&lt;/code&gt; 構築します。各バッファーがいっぱいになると、そのバッファーは「ポップ」され、結果の遅延 &lt;code&gt;Text&lt;/code&gt; 新しいチャンクになります。ます。これらはすべて &lt;code&gt;Builder&lt;/code&gt; のユーザーには表示されません。</target>
        </trans-unit>
        <trans-unit id="12bba6c28355d7983d21c1e6090494085220dbb9" translate="yes" xml:space="preserve">
          <source>Internally, the &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; type is represented as an array of &lt;code&gt;Word16&lt;/code&gt; UTF-16 code units. The offset and length fields in the constructor are in these units, &lt;em&gt;not&lt;/em&gt; units of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">内部的には、 &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 型は &lt;code&gt;Word16&lt;/code&gt; UTF-16コード単位の配列として表されます。コンストラクターのオフセットフィールドと長さフィールドは、これらの単位で&lt;em&gt;あり&lt;/em&gt;、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="52f341c327dc6a2b9f9f6adb900102322209af62" translate="yes" xml:space="preserve">
          <source>Internally, the &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; type is represented as an array of &lt;code&gt;Word16&lt;/code&gt; UTF-16 code units. The offset and length fields in the constructor are in these units, &lt;em&gt;not&lt;/em&gt; units of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">内部的には、 &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; タイプは &lt;code&gt;Word16&lt;/code&gt; UTF -16コードユニットの配列として表されます。コンストラクタのオフセットと長さフィールドは、これらの単位である&lt;em&gt;ていない&lt;/em&gt;単位 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a667adfd3c426aaf0343e5e70da079f910efcf93" translate="yes" xml:space="preserve">
          <source>Internally, the &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; type is represented as an array of &lt;code&gt;Word16&lt;/code&gt; UTF-16 code units. The offset and length fields in the constructor are in these units, &lt;em&gt;not&lt;/em&gt; units of &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">内部的には、 &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; タイプは &lt;code&gt;Word16&lt;/code&gt; UTF -16コードユニットの配列として表されます。コンストラクタのオフセットと長さフィールドは、これらの単位である&lt;em&gt;ていない&lt;/em&gt;単位 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c0b999b33863c1153156a264b1868a08a53695d3" translate="yes" xml:space="preserve">
          <source>Internally, this function reads a chunk at a time from the lower-level buffering abstraction, and concatenates the chunks into a single string once the entire file has been read.</source>
          <target state="translated">内部的には、この関数は下位レベルのバッファリング抽象化からチャンクを一度に読み込み、ファイル全体が読み込まれるとチャンクを1つの文字列に連結します。</target>
        </trans-unit>
        <trans-unit id="653edb0bfdb6bd20dfe7affb5776bc7d271237c7" translate="yes" xml:space="preserve">
          <source>Internals</source>
          <target state="translated">Internals</target>
        </trans-unit>
        <trans-unit id="a897c5f4e03ea395f7767d7d272cb62520bcf994" translate="yes" xml:space="preserve">
          <source>Internals of the &lt;code&gt;&lt;a href=&quot;ghc#v:ExecutionStack&quot;&gt;ExecutionStack&lt;/a&gt;&lt;/code&gt; module</source>
          <target state="translated">の内部 &lt;code&gt;&lt;a href=&quot;ghc#v:ExecutionStack&quot;&gt;ExecutionStack&lt;/a&gt;&lt;/code&gt; モジュールの</target>
        </trans-unit>
        <trans-unit id="8603050a19ff41766967b86a389c3d31e6830c45" translate="yes" xml:space="preserve">
          <source>Interoperability with native code</source>
          <target state="translated">ネイティブコードとの相互運用性</target>
        </trans-unit>
        <trans-unit id="c0f7a30128320b71a384a07bf1ad2a57bf643c91" translate="yes" xml:space="preserve">
          <source>Interpret &lt;code&gt;&lt;a href=&quot;data-bool#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; as 1-bit bit-field</source>
          <target state="translated">解釈する &lt;code&gt;&lt;a href=&quot;data-bool#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; を1ビットのビットフィールドとして</target>
        </trans-unit>
        <trans-unit id="2344763cc3af5c5ff8f14dc7427762225e47cc74" translate="yes" xml:space="preserve">
          <source>Interpret &lt;code&gt;&lt;a href=&quot;prelude#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; as 1-bit bit-field</source>
          <target state="translated">解釈する &lt;code&gt;&lt;a href=&quot;prelude#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; を1ビットのビットフィールドとして</target>
        </trans-unit>
        <trans-unit id="8180b611e957caccb58a76268ebb6645c0d090ca" translate="yes" xml:space="preserve">
          <source>Interpreter monad</source>
          <target state="translated">インタプリタモナド</target>
        </trans-unit>
        <trans-unit id="bc1f6afb0744a5bbe6fbb6b0551f3c09aa2d8e3d" translate="yes" xml:space="preserve">
          <source>Interpreting flags as concrete values</source>
          <target state="translated">フラグを具体的な値として解釈する</target>
        </trans-unit>
        <trans-unit id="b3238b1b65299f84d2a4787b06c096df0bde1630" translate="yes" xml:space="preserve">
          <source>Interpreting flags as transformations of an options record</source>
          <target state="translated">オプションレコードの変換としてのフラグの解釈</target>
        </trans-unit>
        <trans-unit id="5ca1eff01a671dfb25491109dc859fa21b0790a2" translate="yes" xml:space="preserve">
          <source>Interprocess communication</source>
          <target state="translated">プロセス間通信</target>
        </trans-unit>
        <trans-unit id="d5db45498426a18d87491bdc35ea0b2b61778847" translate="yes" xml:space="preserve">
          <source>Interrupt</source>
          <target state="translated">Interrupt</target>
        </trans-unit>
        <trans-unit id="fd306da47657f9f268642aa78227bfb906aca053" translate="yes" xml:space="preserve">
          <source>InterruptOnBreak</source>
          <target state="translated">InterruptOnBreak</target>
        </trans-unit>
        <trans-unit id="50be3afcff74fd9eea61c4dfdd7da275a216bfb6" translate="yes" xml:space="preserve">
          <source>Interrupted</source>
          <target state="translated">Interrupted</target>
        </trans-unit>
        <trans-unit id="36df567b3b522f136606322b1937e0e7e48c4f5c" translate="yes" xml:space="preserve">
          <source>Interruptible</source>
          <target state="translated">Interruptible</target>
        </trans-unit>
        <trans-unit id="d8390d6de28cf8b96b830c119a47584ce55061df" translate="yes" xml:space="preserve">
          <source>Interruptible operations</source>
          <target state="translated">割り込み可能な操作</target>
        </trans-unit>
        <trans-unit id="68c9e301e1801956050651ad57b360275600a452" translate="yes" xml:space="preserve">
          <source>InterruptibleFFI</source>
          <target state="translated">InterruptibleFFI</target>
        </trans-unit>
        <trans-unit id="a6ee111a4a83b6eb2aa173dcd6b41a0a9e1f3bf2" translate="yes" xml:space="preserve">
          <source>Interrupts the current wait of the I/O manager if it is currently blocked. This instructs it to re-read how much it should wait and to process any pending events. @since 4.15</source>
          <target state="translated">I/Oマネージャが現在ブロックされている場合、その待ち時間を中断します。これにより、どのくらい待つべきかを再確認し、保留中のイベントを処理するよう指示します。4.15以降</target>
        </trans-unit>
        <trans-unit id="d0f596ba112a353008597117b57b10b067fc620b" translate="yes" xml:space="preserve">
          <source>Intersection</source>
          <target state="translated">Intersection</target>
        </trans-unit>
        <trans-unit id="8ee8437c2a66962c8f0907ee26289d77e36aba20" translate="yes" xml:space="preserve">
          <source>Introducing and eliminating &lt;code&gt;ByteString&lt;/code&gt;s</source>
          <target state="translated">紹介と排除 &lt;code&gt;ByteString&lt;/code&gt; の</target>
        </trans-unit>
        <trans-unit id="f2ed6db5ae3728afff2fec4a361e39f9464f0d95" translate="yes" xml:space="preserve">
          <source>Introducing quantified constraints offers two main benefits:</source>
          <target state="translated">定量化された制約の導入には、主に2つの利点があります。</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="e9b6edb900949eb2a114c5641991b055536e376d" translate="yes" xml:space="preserve">
          <source>Intruct LLVM to fill dead STG registers with garbage</source>
          <target state="translated">死んだSTGレジスタをガベージで埋めるためにLLVMをインストラクトします。</target>
        </trans-unit>
        <trans-unit id="f13f1e646d5fc57caced649f7e0af90a6d1873ef" translate="yes" xml:space="preserve">
          <source>Intuitively it is a bifunctor where both the first and second arguments are covariant.</source>
          <target state="translated">直感的には、第1引数と第2引数の両方が共分散であるビファンクタです。</target>
        </trans-unit>
        <trans-unit id="f11b308cf805ee45457dc6ec7628b5e4afe5bda0" translate="yes" xml:space="preserve">
          <source>Intuitively, a covariant type is &lt;em&gt;produced&lt;/em&gt;, and a contravariant type is &lt;em&gt;consumed&lt;/em&gt;. Most types in Haskell are covariant, but the function type is special in that the lefthand side of a function arrow reverses variance. If a function type &lt;code&gt;a -&amp;gt; b&lt;/code&gt; appears in a covariant position (e.g., &lt;code&gt;CovFun1&lt;/code&gt; above), then &lt;code&gt;a&lt;/code&gt; is in a contravariant position and &lt;code&gt;b&lt;/code&gt; is in a covariant position. Similarly, if &lt;code&gt;a -&amp;gt; b&lt;/code&gt; appears in a contravariant position (e.g., &lt;code&gt;CovFun2&lt;/code&gt; above), then &lt;code&gt;a&lt;/code&gt; is in &lt;code&gt;a&lt;/code&gt; covariant position and &lt;code&gt;b&lt;/code&gt; is in a contravariant position.</source>
          <target state="translated">直観的には、共変型が&lt;em&gt;生成され&lt;/em&gt;、反変型が&lt;em&gt;消費され&lt;/em&gt;ます。Haskellのほとんどの型は共変ですが、関数型は関数矢印の左側が分散を逆にするという点で特別です。関数が入力した場合 &lt;code&gt;a -&amp;gt; b&lt;/code&gt; 共変な位置に表示されます（例えば、 &lt;code&gt;CovFun1&lt;/code&gt; 以上）、その後、反変位置にあり、 &lt;code&gt;b&lt;/code&gt; は共変な位置にあります。同様に、 &lt;code&gt;CovFun2&lt;/code&gt; &lt;code&gt;a -&amp;gt; b&lt;/code&gt; が反変の位置にある場合（たとえば、上記のCovFun2）、 &lt;code&gt;a&lt;/code&gt; は &lt;code&gt;a&lt;/code&gt; にあります。 &lt;code&gt;a&lt;/code&gt; 共変位置及び &lt;code&gt;b&lt;/code&gt; は反変位置にあります。</target>
        </trans-unit>
        <trans-unit id="721bd28235527f71feda3a70976332e724e9adeb" translate="yes" xml:space="preserve">
          <source>InvalidArgument</source>
          <target state="translated">InvalidArgument</target>
        </trans-unit>
        <trans-unit id="c34e89295bf2cea238c801b77ea83ba0fd5c3764" translate="yes" xml:space="preserve">
          <source>InvalidSequence</source>
          <target state="translated">InvalidSequence</target>
        </trans-unit>
        <trans-unit id="f30f94b5e7824cc91a857050e0c882e98ceaff86" translate="yes" xml:space="preserve">
          <source>Invariant (canonical representation): higher Word# is non-zero.</source>
          <target state="translated">不変(正統な表現):上位のWord#は0ではない。</target>
        </trans-unit>
        <trans-unit id="6e547a33d95e99ec46c6344b0c23479734bb0e2a" translate="yes" xml:space="preserve">
          <source>Invariant: &lt;code&gt;&lt;a href=&quot;../integer-gmp-1.0.2.0/ghc-integer-gmp-internals#v:Jn-35-&quot;&gt;Jn#&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../integer-gmp-1.0.2.0/ghc-integer-gmp-internals#v:Jp-35-&quot;&gt;Jp#&lt;/a&gt;&lt;/code&gt; are used iff value doesn't fit in &lt;code&gt;&lt;a href=&quot;../integer-gmp-1.0.2.0/ghc-integer-gmp-internals#v:S-35-&quot;&gt;S#&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">不変： &lt;code&gt;&lt;a href=&quot;../integer-gmp-1.0.2.0/ghc-integer-gmp-internals#v:Jn-35-&quot;&gt;Jn#&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../integer-gmp-1.0.2.0/ghc-integer-gmp-internals#v:Jp-35-&quot;&gt;Jp#&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../integer-gmp-1.0.2.0/ghc-integer-gmp-internals#v:S-35-&quot;&gt;S#&lt;/a&gt;&lt;/code&gt; に適合しない場合に使用されます</target>
        </trans-unit>
        <trans-unit id="bf37e1cc70f0e61b9e34e40498126af8ea1a4ccd" translate="yes" xml:space="preserve">
          <source>Invariant: &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:Jn-35-&quot;&gt;Jn#&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:Jp-35-&quot;&gt;Jp#&lt;/a&gt;&lt;/code&gt; are used iff value doesn't fit in &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:S-35-&quot;&gt;S#&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">不変： &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:Jn-35-&quot;&gt;Jn#&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:Jp-35-&quot;&gt;Jp#&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:S-35-&quot;&gt;S#&lt;/a&gt;&lt;/code&gt; に適合しない場合に使用されます</target>
        </trans-unit>
        <trans-unit id="aca711904cd0afb5b4429984b51cd06c6731bc80" translate="yes" xml:space="preserve">
          <source>Invariant: &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/ghc-bignum-1.0/GHC-Num-Integer.html#v:IP&quot;&gt;IP&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/ghc-bignum-1.0/GHC-Num-Integer.html#v:IN&quot;&gt;IN&lt;/a&gt;&lt;/code&gt; are used iff value doesn't fit in &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/ghc-bignum-1.0/GHC-Num-Integer.html#v:IS&quot;&gt;IS&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">不変：値が &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/ghc-bignum-1.0/GHC-Num-Integer.html#v:IS&quot;&gt;IS&lt;/a&gt;&lt;/code&gt; に適合しない場合、 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/ghc-bignum-1.0/GHC-Num-Integer.html#v:IP&quot;&gt;IP&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/ghc-bignum-1.0/GHC-Num-Integer.html#v:IN&quot;&gt;IN&lt;/a&gt;&lt;/code&gt; が使用されます</target>
        </trans-unit>
        <trans-unit id="4be325aac9fdf79f01267a725e7d6afb3b543711" translate="yes" xml:space="preserve">
          <source>Invariant: A &lt;code&gt;&lt;a href=&quot;ghc-exts#t:MutableByteArray-35-&quot;&gt;MutableByteArray#&lt;/a&gt;&lt;/code&gt; must not be associated with more than one set of finalizers. For example, this is sound:</source>
          <target state="translated">不変： &lt;code&gt;&lt;a href=&quot;ghc-exts#t:MutableByteArray-35-&quot;&gt;MutableByteArray#&lt;/a&gt;&lt;/code&gt; を複数のファイナライザーのセットに関連付けてはなりません。たとえば、これは健全です。</target>
        </trans-unit>
        <trans-unit id="e47339e1c6fcd41f40ed2907ae6002b9cec9f6cc" translate="yes" xml:space="preserve">
          <source>Invariant: The &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; in the parent &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; is an interior pointer into this &lt;code&gt;&lt;a href=&quot;ghc-exts#t:MutableByteArray-35-&quot;&gt;MutableByteArray#&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">不変：親 &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; は、この &lt;code&gt;&lt;a href=&quot;ghc-exts#t:MutableByteArray-35-&quot;&gt;MutableByteArray#&lt;/a&gt;&lt;/code&gt; への内部ポインターです。</target>
        </trans-unit>
        <trans-unit id="668f4200fec0082e9da84453223afa7cc5f74c18" translate="yes" xml:space="preserve">
          <source>Invariant: The &lt;code&gt;&lt;a href=&quot;ghc-exts#t:MutableByteArray-35-&quot;&gt;MutableByteArray#&lt;/a&gt;&lt;/code&gt; is pinned, so the &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; does not get invalidated by the GC moving the byte array.</source>
          <target state="translated">不変： &lt;code&gt;&lt;a href=&quot;ghc-exts#t:MutableByteArray-35-&quot;&gt;MutableByteArray#&lt;/a&gt;&lt;/code&gt; が固定されているため、GCがバイト配列を移動しても &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; が無効になることはありません。</target>
        </trans-unit>
        <trans-unit id="d89008df010ecfe1f3e53e4fcbfa9a63476eae95" translate="yes" xml:space="preserve">
          <source>Invariant: numbers &amp;lt;= 0xffffffffffffffff use the &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/ghc-bignum-1.0/GHC-Num-Natural.html#v:NS&quot;&gt;NS&lt;/a&gt;&lt;/code&gt; constructor</source>
          <target state="translated">不変：数値&amp;lt;= 0xffffffffffffffffは &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/ghc-bignum-1.0/GHC-Num-Natural.html#v:NS&quot;&gt;NS&lt;/a&gt;&lt;/code&gt; コンストラクターを使用します</target>
        </trans-unit>
        <trans-unit id="4bfccb2baadf6166a2829f9676f95fd9d7a60ac3" translate="yes" xml:space="preserve">
          <source>Invariants that all functions must maintain:</source>
          <target state="translated">すべての関数が維持しなければならない不変量。</target>
        </trans-unit>
        <trans-unit id="d29df8c63e237c937395d3a2b73f553b2eedce66" translate="yes" xml:space="preserve">
          <source>Invoke a finalizer once a foreign pointer becomes unreachable.</source>
          <target state="translated">外部ポインタが到達不能になった時点でファイナライザを起動する。</target>
        </trans-unit>
        <trans-unit id="2306eeb4a0ccc3ac5701782ba0b1a5d4ccbb6396" translate="yes" xml:space="preserve">
          <source>IoNative</source>
          <target state="translated">IoNative</target>
        </trans-unit>
        <trans-unit id="0ed195ad462ef61e760c5ac5c767ddb7f63f43d3" translate="yes" xml:space="preserve">
          <source>IoPOSIX</source>
          <target state="translated">IoPOSIX</target>
        </trans-unit>
        <trans-unit id="96608860edbeb0fe5691c8761e4f0a05b3d1fe32" translate="yes" xml:space="preserve">
          <source>Irrefutable patterns must be written in prefix form:</source>
          <target state="translated">反論の余地のないパターンは、接頭辞の形で書かなければならない。</target>
        </trans-unit>
        <trans-unit id="11b6b45efb71efd3b50f12592ee43024fb8e5262" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;Tricky Nom Age&lt;/code&gt; representationally equal to &lt;code&gt;Tricky Nom Int&lt;/code&gt;? No! The former stores a &lt;code&gt;Char&lt;/code&gt; and the latter stores a &lt;code&gt;Bool&lt;/code&gt;. The solution to this is to require all parameters to type variables to have role nominal. Thus, GHC would infer role representational for &lt;code&gt;a&lt;/code&gt; but role nominal for &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">ある &lt;code&gt;Tricky Nom Age&lt;/code&gt; にrepresentationally等しい &lt;code&gt;Tricky Nom Int&lt;/code&gt; ？番号！前者は &lt;code&gt;Char&lt;/code&gt; を格納し、後者は &lt;code&gt;Bool&lt;/code&gt; を格納します。これに対する解決策は、変数をタイプするためのすべてのパラメーターが名義役割を持つことを要求することです。したがって、GHCは &lt;code&gt;b&lt;/code&gt; 代表的な役割を推測し &lt;code&gt;a&lt;/code&gt; が、bの名目上の役割を推測します。</target>
        </trans-unit>
        <trans-unit id="a766705ed66afa23d41d644b867c8c1d8246d785" translate="yes" xml:space="preserve">
          <source>Is a FilePath valid, i.e. could you create a file like it? This function checks for invalid names, and invalid characters, but does not check if length limits are exceeded, as these are typically filesystem dependent.</source>
          <target state="translated">FilePathが有効かどうか、つまり、そのようなファイルを作成できるかどうか?この関数は、無効な名前や無効な文字をチェックしますが、長さの制限を超えていないかどうかはチェックしません。</target>
        </trans-unit>
        <trans-unit id="2d4afcc43e797a70db779c9a0014ea77683183f9" translate="yes" xml:space="preserve">
          <source>Is a path relative, or is it fixed to the root?</source>
          <target state="translated">パスは相対パスなのか、ルートに固定されているのか。</target>
        </trans-unit>
        <trans-unit id="43af79dad26580cb65546e44c841b83ea361dfc6" translate="yes" xml:space="preserve">
          <source>Is an element a drive</source>
          <target state="translated">要素はドライブですか?</target>
        </trans-unit>
        <trans-unit id="ad55afc8d42967efa9b30f062839411d7d64cecd" translate="yes" xml:space="preserve">
          <source>Is an item either a directory or the last character a path separator?</source>
          <target state="translated">項目はディレクトリか、最後の文字がパスの区切り文字になっていますか?</target>
        </trans-unit>
        <trans-unit id="dea849a91828d7c22d9e225f465ea37622f0abe6" translate="yes" xml:space="preserve">
          <source>Is event tracing enabled?</source>
          <target state="translated">イベントトレースは有効になっていますか?</target>
        </trans-unit>
        <trans-unit id="4a3d4ce5bba4710d2b59407e172ef6004d960b58" translate="yes" xml:space="preserve">
          <source>Is parameterized over the type of error information and the monad type constructor. It is common to use &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; as the monad type constructor for an error monad in which error descriptions take the form of strings. In that case and many other common cases the resulting monad is already defined as an instance of the &lt;code&gt;&lt;a href=&quot;control-monad-error#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; class. You can also define your own error type and/or use a monad type constructor other than &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; IOError&lt;/code&gt;. In these cases you will have to explicitly define instances of the &lt;code&gt;&lt;a href=&quot;control-monad-error#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; class. (If you are using the deprecated &lt;a href=&quot;control-monad-error&quot;&gt;Control.Monad.Error&lt;/a&gt; or &lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-error&quot;&gt;Control.Monad.Trans.Error&lt;/a&gt;, you may also have to define an &lt;code&gt;&lt;a href=&quot;control-monad-error#t:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; instance.)</source>
          <target state="translated">エラー情報のタイプとモナドタイプコンストラクターでパラメーター化されます。エラーの説明が文字列の形式をとるエラーモナドのモナド型コンストラクターとして &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; を使用するのが一般的です。その場合および他の多くの一般的なケースでは、結果のモナドは &lt;code&gt;&lt;a href=&quot;control-monad-error#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; クラスのインスタンスとしてすでに定義されています。また、独自のエラータイプを定義したり、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; IOError&lt;/code&gt; 以外のモナドタイプコンストラクターを使用したりすることもできます。これらの場合、 &lt;code&gt;&lt;a href=&quot;control-monad-error#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; のインスタンスを明示的に定義するクラスの。 （非推奨の&lt;a href=&quot;control-monad-error&quot;&gt;Control.Monad.Error&lt;/a&gt;または&lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-error&quot;&gt;Control.Monad.Trans.Error&lt;/a&gt;を使用している場合、 &lt;code&gt;&lt;a href=&quot;control-monad-error#t:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; インスタンスを定義する必要がある場合もあります。）</target>
        </trans-unit>
        <trans-unit id="3d87698463b1e6a36b367f2bd25afa09087482c6" translate="yes" xml:space="preserve">
          <source>Is parameterized over the type of error information and the monad type constructor. It is common to use &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; as the monad type constructor for an error monad in which error descriptions take the form of strings. In that case and many other common cases the resulting monad is already defined as an instance of the &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; class. You can also define your own error type and/or use a monad type constructor other than &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; IOError&lt;/code&gt;. In these cases you will have to explicitly define instances of the &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; class. (If you are using the deprecated &lt;a href=&quot;control-monad-error&quot;&gt;Control.Monad.Error&lt;/a&gt; or &lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-error&quot;&gt;Control.Monad.Trans.Error&lt;/a&gt;, you may also have to define an &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; instance.)</source>
          <target state="translated">エラー情報のタイプとモナドタイプコンストラクターでパラメーター化されます。エラーの説明が文字列の形式をとるエラーモナドのモナド型コンストラクターとして &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; を使用するのが一般的です。その場合および他の多くの一般的なケースでは、結果のモナドは &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; クラスのインスタンスとしてすでに定義されています。また、独自のエラータイプを定義したり、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; IOError&lt;/code&gt; 以外のモナドタイプコンストラクターを使用したりすることもできます。これらの場合、 &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; クラスのインスタンスを明示的に定義する必要があります。 （非推奨の&lt;a href=&quot;control-monad-error&quot;&gt;Control.Monad.Error&lt;/a&gt;または&lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-error&quot;&gt;Control.Monad.Trans.Error&lt;/a&gt;を使用している場合、 &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; インスタンスを定義する必要がある場合もあります。）</target>
        </trans-unit>
        <trans-unit id="3bfeac45184637e42717c5ef3d8450bbfdd4d45a" translate="yes" xml:space="preserve">
          <source>Is parameterized over the type of error information and the monad type constructor. It is common to use &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; as the monad type constructor for an error monad in which error descriptions take the form of strings. In that case and many other common cases the resulting monad is already defined as an instance of the &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; class. You can also define your own error type and/or use a monad type constructor other than &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; IOError&lt;/code&gt;. In these cases you will have to explicitly define instances of the &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; class. (If you are using the deprecated &lt;a href=&quot;control-monad-error&quot;&gt;Control.Monad.Error&lt;/a&gt; or &lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-error&quot;&gt;Control.Monad.Trans.Error&lt;/a&gt;, you may also have to define an &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; instance.)</source>
          <target state="translated">エラー情報のタイプとモナドタイプコンストラクターでパラメーター化されます。エラーの説明が文字列の形式をとるエラーモナドのモナド型コンストラクターとして &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; を使用するのが一般的です。その場合および他の多くの一般的なケースでは、結果のモナドは &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; クラスのインスタンスとしてすでに定義されています。また、独自のエラータイプを定義したり、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; IOError&lt;/code&gt; 以外のモナドタイプコンストラクターを使用したりすることもできます。これらの場合、 &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; クラスのインスタンスを明示的に定義する必要があります。 （非推奨の&lt;a href=&quot;control-monad-error&quot;&gt;Control.Monad.Error&lt;/a&gt;または&lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-error&quot;&gt;Control.Monad.Trans.Error&lt;/a&gt;を使用している場合、 &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; インスタンスます。）</target>
        </trans-unit>
        <trans-unit id="371baf4cf811b522632264fa7d84bdafaf787645" translate="yes" xml:space="preserve">
          <source>Is parameterized over the type of error information and the monad type constructor. It is common to use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; as the monad type constructor for an error monad in which error descriptions take the form of strings. In that case and many other common cases the resulting monad is already defined as an instance of the &lt;code&gt;&lt;a href=&quot;control-monad-error#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; class. You can also define your own error type and/or use a monad type constructor other than &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; IOError&lt;/code&gt;. In these cases you will have to explicitly define instances of the &lt;code&gt;&lt;a href=&quot;control-monad-error#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; class. (If you are using the deprecated &lt;a href=&quot;control-monad-error&quot;&gt;Control.Monad.Error&lt;/a&gt; or &lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-error&quot;&gt;Control.Monad.Trans.Error&lt;/a&gt;, you may also have to define an &lt;code&gt;&lt;a href=&quot;control-monad-error#t:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; instance.)</source>
          <target state="translated">エラー情報のタイプとモナドタイプコンストラクターに対してパラメーター化されます。使用するのが一般的である &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; エラーの説明が文字列の形をとるれるエラーモナドのためのモナド型コンストラクタとして。その場合および他の多くの一般的な場合、結果のモナドはすでに &lt;code&gt;&lt;a href=&quot;control-monad-error#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; クラスのインスタンスとして定義されています。また、独自のエラータイプを定義および/または以外のモナド型コンストラクタを使用することができます &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; IOError&lt;/code&gt; 。このような場合、 &lt;code&gt;&lt;a href=&quot;control-monad-error#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; クラスのインスタンスを明示的に定義する必要があります。 （非推奨の&lt;a href=&quot;control-monad-error&quot;&gt;Control.Monad.Error&lt;/a&gt;または&lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-error&quot;&gt;Control.Monad.Trans.Error&lt;/a&gt;を使用している場合、 &lt;code&gt;&lt;a href=&quot;control-monad-error#t:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; インスタンスを定義する必要がある場合もあります。）</target>
        </trans-unit>
        <trans-unit id="b1fd83de1504db40a2c6a9fab6c7f5a6ffe0a914" translate="yes" xml:space="preserve">
          <source>Is parameterized over the type of error information and the monad type constructor. It is common to use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; as the monad type constructor for an error monad in which error descriptions take the form of strings. In that case and many other common cases the resulting monad is already defined as an instance of the &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; class. You can also define your own error type and/or use a monad type constructor other than &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; IOError&lt;/code&gt;. In these cases you will have to explicitly define instances of the &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; class. (If you are using the deprecated &lt;a href=&quot;control-monad-error&quot;&gt;Control.Monad.Error&lt;/a&gt; or &lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-error&quot;&gt;Control.Monad.Trans.Error&lt;/a&gt;, you may also have to define an &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; instance.)</source>
          <target state="translated">エラー情報のタイプとモナドタイプコンストラクターに対してパラメーター化されます。使用するのが一般的である &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; エラーの説明が文字列の形をとるれるエラーモナドのためのモナド型コンストラクタとして。その場合および他の多くの一般的な場合、結果のモナドはすでに &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; クラスのインスタンスとして定義されています。また、独自のエラータイプを定義および/または以外のモナド型コンストラクタを使用することができます &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; IOError&lt;/code&gt; 。このような場合、 &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; クラスのインスタンスを明示的に定義する必要があります。 （非推奨の&lt;a href=&quot;control-monad-error&quot;&gt;Control.Monad.Error&lt;/a&gt;または&lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-error&quot;&gt;Control.Monad.Trans.Error&lt;/a&gt;を使用している場合、 &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; インスタンスを定義する必要がある場合もあります。）</target>
        </trans-unit>
        <trans-unit id="ca9ee65f747219137fd7d52ad82e317c19d9c76e" translate="yes" xml:space="preserve">
          <source>Is parameterized over the type of error information and the monad type constructor. It is common to use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; as the monad type constructor for an error monad in which error descriptions take the form of strings. In that case and many other common cases the resulting monad is already defined as an instance of the &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; class. You can also define your own error type and/or use a monad type constructor other than &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; IOError&lt;/code&gt;. In these cases you will have to explicitly define instances of the &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; class. (If you are using the deprecated &lt;a href=&quot;control-monad-error&quot;&gt;Control.Monad.Error&lt;/a&gt; or &lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-error&quot;&gt;Control.Monad.Trans.Error&lt;/a&gt;, you may also have to define an &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; instance.)</source>
          <target state="translated">エラー情報のタイプとモナドタイプコンストラクターに対してパラメーター化されます。使用するのが一般的である &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; エラーの説明が文字列の形をとるれるエラーモナドのためのモナド型コンストラクタとして。その場合および他の多くの一般的な場合、結果のモナドはすでに &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; クラスのインスタンスとして定義されています。また、独自のエラータイプを定義および/または以外のモナド型コンストラクタを使用することができます &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; IOError&lt;/code&gt; 。このような場合、 &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; クラスのインスタンスを明示的に定義する必要があります。 （非推奨の&lt;a href=&quot;control-monad-error&quot;&gt;Control.Monad.Error&lt;/a&gt;または&lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-error&quot;&gt;Control.Monad.Trans.Error&lt;/a&gt;を使用している場合、 &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; インスタンスを定義する必要がある場合もあります。）</target>
        </trans-unit>
        <trans-unit id="90aec48d5d510f6afeff95f6a4779d93a0f6d310" translate="yes" xml:space="preserve">
          <source>Is parameterized over the type of error information and the monad type constructor. It is common to use &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; as the monad type constructor for an error monad in which error descriptions take the form of strings. In that case and many other common cases the resulting monad is already defined as an instance of the &lt;code&gt;&lt;a href=&quot;control-monad-error#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; class. You can also define your own error type and/or use a monad type constructor other than &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; IOError&lt;/code&gt;. In these cases you will have to explicitly define instances of the &lt;code&gt;&lt;a href=&quot;control-monad-error#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; class. (If you are using the deprecated &lt;a href=&quot;control-monad-error&quot;&gt;Control.Monad.Error&lt;/a&gt; or &lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-error&quot;&gt;Control.Monad.Trans.Error&lt;/a&gt;, you may also have to define an &lt;code&gt;&lt;a href=&quot;control-monad-error#t:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; instance.)</source>
          <target state="translated">エラー情報のタイプとモナドタイプコンストラクターに対してパラメーター化されます。使用するのが一般的である &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; エラーの説明が文字列の形をとるれるエラーモナドのためのモナド型コンストラクタとして。その場合および他の多くの一般的な場合、結果のモナドはすでに &lt;code&gt;&lt;a href=&quot;control-monad-error#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; クラスのインスタンスとして定義されています。また、独自のエラータイプを定義および/または以外のモナド型コンストラクタを使用することができます &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; IOError&lt;/code&gt; 。このような場合、 &lt;code&gt;&lt;a href=&quot;control-monad-error#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; クラスのインスタンスを明示的に定義する必要があります。 （非推奨の&lt;a href=&quot;control-monad-error&quot;&gt;Control.Monad.Error&lt;/a&gt;または&lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-error&quot;&gt;Control.Monad.Trans.Error&lt;/a&gt;を使用している場合、 &lt;code&gt;&lt;a href=&quot;control-monad-error#t:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; インスタンスを定義する必要がある場合もあります。）</target>
        </trans-unit>
        <trans-unit id="a17deabcb706cd08d6fb17b66ea46acf00398ab4" translate="yes" xml:space="preserve">
          <source>Is parameterized over the type of error information and the monad type constructor. It is common to use &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; as the monad type constructor for an error monad in which error descriptions take the form of strings. In that case and many other common cases the resulting monad is already defined as an instance of the &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; class. You can also define your own error type and/or use a monad type constructor other than &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; IOError&lt;/code&gt;. In these cases you will have to explicitly define instances of the &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; class. (If you are using the deprecated &lt;a href=&quot;control-monad-error&quot;&gt;Control.Monad.Error&lt;/a&gt; or &lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-error&quot;&gt;Control.Monad.Trans.Error&lt;/a&gt;, you may also have to define an &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; instance.)</source>
          <target state="translated">エラー情報のタイプとモナドタイプコンストラクターに対してパラメーター化されます。使用するのが一般的である &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; エラーの説明が文字列の形をとるれるエラーモナドのためのモナド型コンストラクタとして。その場合および他の多くの一般的な場合、結果のモナドはすでに &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; クラスのインスタンスとして定義されています。また、独自のエラータイプを定義および/または以外のモナド型コンストラクタを使用することができます &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; IOError&lt;/code&gt; 。このような場合、 &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; クラスのインスタンスを明示的に定義する必要があります。 （非推奨の&lt;a href=&quot;control-monad-error&quot;&gt;Control.Monad.Error&lt;/a&gt;または&lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-error&quot;&gt;Control.Monad.Trans.Error&lt;/a&gt;を使用している場合、 &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; インスタンスを定義する必要がある場合もあります。）</target>
        </trans-unit>
        <trans-unit id="476e0bb47bf942bb152bfeaaa1e1a912cbba5ab8" translate="yes" xml:space="preserve">
          <source>Is parameterized over the type of error information and the monad type constructor. It is common to use &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; as the monad type constructor for an error monad in which error descriptions take the form of strings. In that case and many other common cases the resulting monad is already defined as an instance of the &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; class. You can also define your own error type and/or use a monad type constructor other than &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; IOError&lt;/code&gt;. In these cases you will have to explicitly define instances of the &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; class. (If you are using the deprecated &lt;a href=&quot;control-monad-error&quot;&gt;Control.Monad.Error&lt;/a&gt; or &lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-error&quot;&gt;Control.Monad.Trans.Error&lt;/a&gt;, you may also have to define an &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; instance.)</source>
          <target state="translated">エラー情報のタイプとモナドタイプコンストラクターに対してパラメーター化されます。使用するのが一般的である &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; エラーの説明が文字列の形をとるれるエラーモナドのためのモナド型コンストラクタとして。その場合および他の多くの一般的な場合、結果のモナドはすでに &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; クラスのインスタンスとして定義されています。また、独自のエラータイプを定義および/または以外のモナド型コンストラクタを使用することができます &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; String&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; IOError&lt;/code&gt; 。このような場合、 &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt;&lt;/code&gt; クラスのインスタンスを明示的に定義する必要があります。 （非推奨の&lt;a href=&quot;control-monad-error&quot;&gt;Control.Monad.Error&lt;/a&gt;または&lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-error&quot;&gt;Control.Monad.Trans.Error&lt;/a&gt;を使用している場合、 &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; インスタンスを定義する必要がある場合もあります。）</target>
        </trans-unit>
        <trans-unit id="4fa333bbf2afea384536b00960809179ff42dd9d" translate="yes" xml:space="preserve">
          <source>Is the character a file separator?</source>
          <target state="translated">その文字はファイルの区切り文字ですか?</target>
        </trans-unit>
        <trans-unit id="5f43305893105d5144cecca878b219714e75b65a" translate="yes" xml:space="preserve">
          <source>Is the character an extension character?</source>
          <target state="translated">そのキャラは拡張キャラなのか?</target>
        </trans-unit>
        <trans-unit id="badcfb21de3bbbdff6edcea7831f4297f75e8e47" translate="yes" xml:space="preserve">
          <source>Is the handle connected to a terminal?</source>
          <target state="translated">ハンドルは端子に接続されていますか?</target>
        </trans-unit>
        <trans-unit id="db53055cb5536987019e96f49887b6f3ccf9ab28" translate="yes" xml:space="preserve">
          <source>Is the list of instances returned by &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reifyInstances&quot;&gt;reifyInstances&lt;/a&gt;&lt;/code&gt; nonempty?</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reifyInstances&quot;&gt;reifyInstances&lt;/a&gt;&lt;/code&gt; によって返されるインスタンスのリストは空ではありませんか？</target>
        </trans-unit>
        <trans-unit id="0276f66684c522748357fa6f520335cef096d53c" translate="yes" xml:space="preserve">
          <source>Is the list of instances returned by &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reifyInstances&quot;&gt;reifyInstances&lt;/a&gt;&lt;/code&gt; nonempty?</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reifyInstances&quot;&gt;reifyInstances&lt;/a&gt;&lt;/code&gt; によって返されるインスタンスのリストは空ではありませんか？</target>
        </trans-unit>
        <trans-unit id="0d2adc690f10a7f72a0ff52f81eef4c6e91e521a" translate="yes" xml:space="preserve">
          <source>Is this a definition of the infix function &amp;ldquo;&lt;code&gt;(!)&lt;/code&gt;&amp;rdquo;, or of the &amp;ldquo;&lt;code&gt;f&lt;/code&gt;&amp;rdquo; with a bang pattern? GHC resolves this ambiguity by looking at the surrounding whitespace:</source>
          <target state="translated">これは、中置関数「 &lt;code&gt;(!)&lt;/code&gt; 」の定義ですか、それともバングパターンの「 &lt;code&gt;f&lt;/code&gt; 」の定義ですか？GHCは、周囲の空白を調べることにより、このあいまいさを解決します。</target>
        </trans-unit>
        <trans-unit id="ff726b2a6e4e23e49531e7725f31b4ca2f33315a" translate="yes" xml:space="preserve">
          <source>Is this a definition of the infix function &amp;ldquo;&lt;code&gt;(!)&lt;/code&gt;&amp;rdquo;, or of the &amp;ldquo;&lt;code&gt;f&lt;/code&gt;&amp;rdquo; with a bang pattern? GHC resolves this ambiguity in favour of the latter. If you want to define &lt;code&gt;(!)&lt;/code&gt; with bang-patterns enabled, you have to do so using prefix notation:</source>
          <target state="translated">これは、中置関数「 &lt;code&gt;(!)&lt;/code&gt; 」の定義ですか、それとも「 &lt;code&gt;f&lt;/code&gt; 」のバングパターンの定義ですか？GHCは後者を支持してこのあいまいさを解決します。bang-patternsを有効にして &lt;code&gt;(!)&lt;/code&gt; を定義する場合は、プレフィックス表記を使用して定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="727d9897dcf734181d527a496f77a4e981c855b3" translate="yes" xml:space="preserve">
          <source>Is this an orphan module? Apparently not, because &lt;code&gt;T&lt;/code&gt; is declared in the same module. But suppose class &lt;code&gt;E&lt;/code&gt; had a functional dependency:</source>
          <target state="translated">これは孤立モジュールですか？ &lt;code&gt;T&lt;/code&gt; が同じモジュールで宣言されているため、どうやらそうではありません。しかし、クラス &lt;code&gt;E&lt;/code&gt; に機能的な依存関係があるとします。</target>
        </trans-unit>
        <trans-unit id="015d37bd7153776002ea5dd2e0e58e04be60d1e9" translate="yes" xml:space="preserve">
          <source>Is this program linked against the GHC RTS? (always &amp;ldquo;YES&amp;rdquo;).</source>
          <target state="translated">このプログラムはGHC RTSにリンクしていますか？（常に「はい」）。</target>
        </trans-unit>
        <trans-unit id="4ab93a61d74047e9e250aa0b4d353a580e7f3de6" translate="yes" xml:space="preserve">
          <source>Is this time zone just persisting for the summer?</source>
          <target state="translated">この時間帯は夏に向けて粘っているだけなのかな?</target>
        </trans-unit>
        <trans-unit id="5bdaa14aeb3a57c8d59aa15adeeaf4ca36f447a6" translate="yes" xml:space="preserve">
          <source>Is this year a leap year according to the proleptic Gregorian calendar?</source>
          <target state="translated">プロレプティック・グレゴリオ暦によると、今年はうるう年なのでしょうか?</target>
        </trans-unit>
        <trans-unit id="722098dfb78f933cddee4ba4c9a0bba9c43dafcf" translate="yes" xml:space="preserve">
          <source>Is this year a leap year according to the proleptic Julian calendar?</source>
          <target state="translated">今年はプロレプティックなユリウス暦によると閏年なのかな?</target>
        </trans-unit>
        <trans-unit id="ad4ea982b3c058e21b49b8f110e994dd2768d032" translate="yes" xml:space="preserve">
          <source>Is transformed to,</source>
          <target state="translated">変身しています。</target>
        </trans-unit>
        <trans-unit id="ad0876366a1c77a7a9a0da1b2963828591f6ce29" translate="yes" xml:space="preserve">
          <source>Is used within a monadic computation to begin exception processing.</source>
          <target state="translated">例外処理を開始するために単項演算内で使用されます。</target>
        </trans-unit>
        <trans-unit id="5534ee618fbad70f11c2e1cb6e9405c6eaa359eb" translate="yes" xml:space="preserve">
          <source>IsChar</source>
          <target state="translated">IsChar</target>
        </trans-unit>
        <trans-unit id="1aa675efc7a7eeb0b92b8ba7fa53d00d3161a009" translate="yes" xml:space="preserve">
          <source>IsList</source>
          <target state="translated">IsList</target>
        </trans-unit>
        <trans-unit id="98e4309bebb71a041dd60cba19bc3de15703f3bf" translate="yes" xml:space="preserve">
          <source>IsStatic</source>
          <target state="translated">IsStatic</target>
        </trans-unit>
        <trans-unit id="d9570a11de28b7264d6886af3296a0aa64b763e0" translate="yes" xml:space="preserve">
          <source>IsString</source>
          <target state="translated">IsString</target>
        </trans-unit>
        <trans-unit id="3676b65080f47af23667593fa2dbe56b53899761" translate="yes" xml:space="preserve">
          <source>Isolate a decoder to operate with a fixed number of bytes, and fail if fewer bytes were consumed, or more bytes were attempted to be consumed. If the given decoder fails, &lt;code&gt;&lt;a href=&quot;data-binary-get#v:isolate&quot;&gt;isolate&lt;/a&gt;&lt;/code&gt; will also fail. Offset from &lt;code&gt;&lt;a href=&quot;data-binary-get#v:bytesRead&quot;&gt;bytesRead&lt;/a&gt;&lt;/code&gt; will be relative to the start of &lt;code&gt;&lt;a href=&quot;data-binary-get#v:isolate&quot;&gt;isolate&lt;/a&gt;&lt;/code&gt;, not the absolute of the input.</source>
          <target state="translated">デコーダーを分離して、固定バイト数で動作するようにします。消費されるバイト数が少ない場合、または消費されるバイト数が多い場合は失敗します。指定されたデコーダが失敗 &lt;code&gt;&lt;a href=&quot;data-binary-get#v:isolate&quot;&gt;isolate&lt;/a&gt;&lt;/code&gt; と、isolateも失敗します。オフセット &lt;code&gt;&lt;a href=&quot;data-binary-get#v:bytesRead&quot;&gt;bytesRead&lt;/a&gt;&lt;/code&gt; の開始に対してであろう &lt;code&gt;&lt;a href=&quot;data-binary-get#v:isolate&quot;&gt;isolate&lt;/a&gt;&lt;/code&gt; 入力の絶対的ではありません。</target>
        </trans-unit>
        <trans-unit id="a4ce542505148e05bcc65af7af6636a88b0f16dd" translate="yes" xml:space="preserve">
          <source>Issue a warning if the module being compiled is marked as -XTrustworthy but it could instead be marked as -XSafe , a more informative bound. Can be used to detect once a Safe Haskell bound can be improved as dependencies are updated.</source>
          <target state="translated">コンパイル中のモジュールが -XTrustworthy とマークされていても、代わりに -XSafe とマークされている場合に警告を表示します。依存関係が更新された際に、Safe Haskell バウンドが改善される可能性があるかどうかを検出するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="06aa14b53286f8584e57c40fad1e3a81a67ba0f1" translate="yes" xml:space="preserve">
          <source>Issue a warning if the module being compiled is regarded to be safe. Should be used to check the safety type of modules when using safe inference.</source>
          <target state="translated">コンパイル中のモジュールが安全であると判断された場合に警告を発行します。安全推論を使用する際に、モジュールの安全タイプをチェックするために使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="b6ed530fa6a142afa10ab96b574f393e658ba7bb" translate="yes" xml:space="preserve">
          <source>Issue a warning if the module being compiled is regarded to be safe. Should be used to check the safety type of modules when using safe inference. If the module is explicitly marked as safe then no warning will be issued.</source>
          <target state="translated">コンパイル中のモジュールが安全であると判断された場合に警告を発行します。安全推論を使用する際に、モジュールの安全タイプをチェックするために使用します。モジュールが明示的に安全であるとマークされている場合は、警告は発行されません。</target>
        </trans-unit>
        <trans-unit id="60682df2a77a2bc855bbc66ec9bbdabac2ee26b2" translate="yes" xml:space="preserve">
          <source>Issue a warning if the module being compiled is regarded to be unsafe. Should be used to check the safety type of modules when using safe inference.</source>
          <target state="translated">コンパイル中のモジュールが安全でないと判断された場合に警告を発行します。安全推論を使用する際に、モジュールの安全タイプをチェックするために使用します。</target>
        </trans-unit>
        <trans-unit id="7bf53c375a4a624f22b2da10f2c07ed17f8bb47d" translate="yes" xml:space="preserve">
          <source>It appears in the right hand side of a binding that binds at least one used variable that is used</source>
          <target state="translated">使用される少なくとも1つの使用済み変数をバインドするバインディングの右側に表示されます。</target>
        </trans-unit>
        <trans-unit id="223c43fdc56fe609487e6e247ea7cd3e66ebb0fa" translate="yes" xml:space="preserve">
          <source>It can also be placed on the right-hand side of a type-level function to provide an error for an invalid case,</source>
          <target state="translated">また、型レベル関数の右側に配置して、無効なケースのエラーを提供することもできます。</target>
        </trans-unit>
        <trans-unit id="2ac87d14aeacaa952c867a2404b8511d2d18797a" translate="yes" xml:space="preserve">
          <source>It can also help in a third way: when used with &lt;a href=&quot;using-optimisation#ghc-flag--funbox-strict-fields&quot;&gt;&lt;code&gt;-funbox-strict-fields&lt;/code&gt;&lt;/a&gt; (see &lt;a href=&quot;using-optimisation#options-f&quot;&gt;-f*: platform-independent flags&lt;/a&gt;), a strict field can be unpacked or unboxed in the constructor, and one or more levels of indirection may be removed. Unpacking only happens for single-constructor datatypes (&lt;code&gt;Int&lt;/code&gt; is a good candidate, for example).</source>
          <target state="translated">3番目の方法でも役立ちます。&lt;a href=&quot;using-optimisation#ghc-flag--funbox-strict-fields&quot;&gt; &lt;code&gt;-funbox-strict-fields&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;using-optimisation#options-f&quot;&gt;-f *：プラットフォームに依存しないフラグを&lt;/a&gt;参照）と一緒に使用すると、厳密なフィールドをコンストラクターでアンパックまたはボックス化解除でき、1つ以上のレベルの間接参照が可能です。除去される。アンパックは、単一コンストラクターのデータ型に対してのみ行われます（たとえば、 &lt;code&gt;Int&lt;/code&gt; は適切な候補です）。</target>
        </trans-unit>
        <trans-unit id="294eac74bb8a1b732eb019ba498538e7dd7de972" translate="yes" xml:space="preserve">
          <source>It can be implemented in any way, with any set of superclasses and methods; however, modules depending on an abstract class are not permitted to define instances (as of GHC 8.2, this restriction is not checked, see &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/13086&quot;&gt;#13086&lt;/a&gt;.) These declarations can be implemented by type synonyms of kind &lt;code&gt;Constraint&lt;/code&gt;; this can be useful if you want to parametrize over a constraint in functions. For example, with the &lt;code&gt;ConstraintKinds&lt;/code&gt; extension, this type synonym is a valid implementation of the signature above:</source>
          <target state="translated">これは、スーパークラスとメソッドの任意のセットを使用して、任意の方法で実装できます。ただし、抽象クラスに依存するモジュールはインスタンスを定義できません（GHC 8.2以降、この制限はチェックされていません。&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/13086&quot;&gt;＃13086を&lt;/a&gt;参照してください）。これらの宣言は、 &lt;code&gt;Constraint&lt;/code&gt; 種類の同義語によって実装できます。これは、関数の制約をパラメーター化する場合に役立ちます。たとえば、 &lt;code&gt;ConstraintKinds&lt;/code&gt; 拡張機能を使用すると、このタイプの同義語は上記の署名の有効な実装になります。</target>
        </trans-unit>
        <trans-unit id="477b37878c8cab374119d560c1fadebca482f149" translate="yes" xml:space="preserve">
          <source>It can be implemented in any way, with any set of superclasses and methods; however, modules depending on an abstract class are not permitted to define instances (as of GHC 8.2, this restriction is not checked, see &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/13086&quot;&gt;Issue #13086&lt;/a&gt;.) These declarations can be implemented by type synonyms of kind &lt;code&gt;Constraint&lt;/code&gt;; this can be useful if you want to parametrize over a constraint in functions. For example, with the &lt;code&gt;ConstraintKinds&lt;/code&gt; extension, this type synonym is a valid implementation of the signature above:</source>
          <target state="translated">スーパークラスとメソッドの任意のセットを使用して、任意の方法で実装できます。ただし、抽象クラスに依存するモジュールはインスタンスを定義できません（GHC 8.2以降、この制限はチェックされていません。&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/13086&quot;&gt;問題＃13086を&lt;/a&gt;参照してください）。これらの宣言は、種類 &lt;code&gt;Constraint&lt;/code&gt; の型の同義語によって実装できます。これは、関数の制約をパラメーター化する場合に役立ちます。たとえば、 &lt;code&gt;ConstraintKinds&lt;/code&gt; 拡張機能では、この型の同義語は上記の署名の有効な実装です。</target>
        </trans-unit>
        <trans-unit id="7dc3d61a5c9f85d876d3d8830ea9d78107b392ca" translate="yes" xml:space="preserve">
          <source>It can be used as a base monad to which a series of monad transformers may be applied to construct a composite monad. Most monad transformer modules include the special case of applying the transformer to &lt;code&gt;&lt;a href=&quot;data-functor-identity#t:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt;. For example, &lt;code&gt;State s&lt;/code&gt; is an abbreviation for &lt;code&gt;StateT s &lt;a href=&quot;data-functor-identity#t:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">複合モナドを構築するために一連のモナド変換子を適用できる基本モナドとして使用できます。ほとんどのモナド変換モジュールには、変換を &lt;code&gt;&lt;a href=&quot;data-functor-identity#t:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt; に適用する特別なケースが含まれています。たとえば、 &lt;code&gt;State s&lt;/code&gt; は &lt;code&gt;StateT s &lt;a href=&quot;data-functor-identity#t:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt; の省略形です。</target>
        </trans-unit>
        <trans-unit id="b9852af2f468eb5552aeda23d235265408470558" translate="yes" xml:space="preserve">
          <source>It can be used with functions parameterized by functor or monad classes.</source>
          <target state="translated">ファンクタやモナドクラスでパラメータ化された関数で使用することができます。</target>
        </trans-unit>
        <trans-unit id="9d9e1dcae3fe4aa8145c9784bf5a266157b5617e" translate="yes" xml:space="preserve">
          <source>It can sometime be the case that the name and type of a valid hole fit is not enough to realize what the fit stands for. This flag adds the documentation of the fit to the message, if the documentation is available (and the module from which the function comes was compiled with the &lt;code&gt;-haddock&lt;/code&gt; flag).</source>
          <target state="translated">有効な穴あてはめの名前とタイプが、あてはまりの意味を理解するのに十分でない場合もあります。ドキュメンテーションが利用可能な場合（および関数の &lt;code&gt;-haddock&lt;/code&gt; のモジュールが-haddockフラグを使用してコンパイルされている場合）、このフラグはメッセージにフィットのドキュメンテーションを追加します。</target>
        </trans-unit>
        <trans-unit id="131c8043e25d68f30a2ae760ed59ea45ec37b93c" translate="yes" xml:space="preserve">
          <source>It does seem odd that the existentially-bound type variable &lt;em&gt;must not&lt;/em&gt; be already in scope. Contrast that usually name-bindings merely shadow (make a &amp;lsquo;hole&amp;rsquo;) in a same-named outer variable&amp;rsquo;s scope. But we must have &lt;em&gt;some&lt;/em&gt; way to bring such type variables into scope, else we could not name existentially-bound type variables in subsequent type signatures.</source>
          <target state="translated">実存的に束縛された型変数がすでにスコープ内にあっては&lt;em&gt;ならないの&lt;/em&gt;は奇妙に思えます。対照的に、通常、名前バインディングは、同じ名前の外部変数のスコープを単にシャドウ（「穴」を作る）します。しかし、そのような型変数をスコープに入れるには&lt;em&gt;何らかの&lt;/em&gt;方法が必要です。そうしないと、後続の型シグネチャで実存的にバインドされた型変数に名前を付けることができません。</target>
        </trans-unit>
        <trans-unit id="cd0b20dc53b3f56118493854441da04b5d5caf19" translate="yes" xml:space="preserve">
          <source>It enables the &lt;a href=&quot;#rts-flag--N%20%E2%9F%A8x%E2%9F%A9&quot;&gt;&lt;code&gt;-N ⟨x⟩&lt;/code&gt;&lt;/a&gt; to be used, which allows threads to run in parallel on a multi-processor or multi-core machine. See &lt;a href=&quot;#using-smp&quot;&gt;Using SMP parallelism&lt;/a&gt;.</source>
          <target state="translated">これにより、&lt;a href=&quot;#rts-flag--N%20%E2%9F%A8x%E2%9F%A9&quot;&gt; &lt;code&gt;-N ⟨x⟩&lt;/code&gt; &lt;/a&gt;を使用できるようになり、マルチプロセッサまたはマルチコアマシンでスレッドを並列に実行できるようになります。&lt;a href=&quot;#using-smp&quot;&gt;SMP並列処理の使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="054d4cae547999a330f8c63a5c615eee34554065" translate="yes" xml:space="preserve">
          <source>It enables the &lt;a href=&quot;#rts-flag--N%20%E2%9F%A8x%E2%9F%A9&quot;&gt;&lt;code&gt;-N ⟨x⟩&lt;/code&gt;&lt;/a&gt; to be used, which allows threads to run in parallelism on a multi-processor or multi-core machine. See &lt;a href=&quot;#using-smp&quot;&gt;Using SMP parallelism&lt;/a&gt;.</source>
          <target state="translated">これにより、&lt;a href=&quot;#rts-flag--N%20%E2%9F%A8x%E2%9F%A9&quot;&gt; &lt;code&gt;-N ⟨x⟩&lt;/code&gt; &lt;/a&gt;を使用できるようになり、マルチプロセッサまたはマルチコアマシン上でスレッドを並列処理することができます。&lt;a href=&quot;#using-smp&quot;&gt;SMP並列処理の使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4f4b4b81f61547fa1245445f1f306f991f4d6a69" translate="yes" xml:space="preserve">
          <source>It enables the &lt;code&gt;-N ⟨x⟩&lt;/code&gt; RTS option to be used, which allows threads to run in parallel on a multiprocessor or multicore machine. See &lt;a href=&quot;using-concurrent#using-smp&quot;&gt;Using SMP parallelism&lt;/a&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;-N ⟨x⟩&lt;/code&gt; オプションを使用できるようになり、マルチプロセッサーまたはマルチコアマシンでスレッドを並列に実行できるようになります。&lt;a href=&quot;using-concurrent#using-smp&quot;&gt;SMP並列処理の使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bb0ce11093eeb1e05f584fe528a07b4ef4451608" translate="yes" xml:space="preserve">
          <source>It ensures that the result of each application of force to weak head normal form before proceeding.</source>
          <target state="translated">それは進む前に弱い頭部の正常な形態への力の各適用の結果を保障します。</target>
        </trans-unit>
        <trans-unit id="6cc40bdad8257aec1a113a8cf6c4f9244f5bbe8e" translate="yes" xml:space="preserve">
          <source>It forces the result of each application of the function to weak head normal form (WHNF) before proceeding.</source>
          <target state="translated">これは、関数の各アプリケーションの結果を、処理を進める前に強制的に弱頭正規形(Wheavy Head Normal Form:WHNF)にするものです。</target>
        </trans-unit>
        <trans-unit id="46308fd5d44db11f7f98b515fc84088603b61098" translate="yes" xml:space="preserve">
          <source>It has a lower memory overhead than a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and and does not contribute to heap fragmentation. It can be converted to or from a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; (at the cost of copying the string data). It supports very few other operations.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; よりもメモリオーバーヘッドが低く、ヒープの断片化に寄与しません。 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; との間で変換できます（文字列データをコピーすることを犠牲にして）。他の操作はほとんどサポートしていません。</target>
        </trans-unit>
        <trans-unit id="4477cc94d81fac95238764279438f0a0ecec3424" translate="yes" xml:space="preserve">
          <source>It has a lower memory overhead than a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and does not contribute to heap fragmentation. It can be converted to or from a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; (at the cost of copying the string data). It supports very few other operations.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; よりもメモリのオーバーヘッドが低く、ヒープの断片化には寄与しません。 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; との間で変換できます（文字列データのコピーを犠牲にして）。他の操作はほとんどサポートしていません。</target>
        </trans-unit>
        <trans-unit id="5740ea7db69553e93f1f0294393cd715c08f5eba" translate="yes" xml:space="preserve">
          <source>It has been copied into a compact region. The documentation for &lt;code&gt;ghc-compact&lt;/code&gt; and &lt;code&gt;compact&lt;/code&gt; describes this process.</source>
          <target state="translated">コンパクトな領域にコピーされています。 &lt;code&gt;ghc-compact&lt;/code&gt; および &lt;code&gt;compact&lt;/code&gt; のドキュメントでは、このプロセスについて説明しています。</target>
        </trans-unit>
        <trans-unit id="48a707e49b0a7765ed34649085bd077081e96884" translate="yes" xml:space="preserve">
          <source>It ignores leap-seconds, so it's not necessarily a fixed amount of clock time. For instance, 23:00 UTC + 2 hours of NominalDiffTime = 01:00 UTC (+ 1 day), regardless of whether a leap-second intervened.</source>
          <target state="translated">これはうるう秒を無視しているので、必ずしも一定の時計時間とは限りません。例えば、23:00 UTC+2時間のNominalDiffTime=01:00 UTC (+1日)、うるう秒が介在したかどうかに関係なく、23:00 UTC+2時間のNominalDiffTime=01:00 UTC (+1日)となります。</target>
        </trans-unit>
        <trans-unit id="df69e6b9bd468ac0cfd863a00e4fc497cbf20b12" translate="yes" xml:space="preserve">
          <source>It is &lt;em&gt;Your Responsibility&lt;/em&gt; to make sure that &lt;code&gt;intLookup&lt;/code&gt; really behaves as a specialised version of &lt;code&gt;genericLookup&lt;/code&gt;!!!</source>
          <target state="translated">&lt;code&gt;intLookup&lt;/code&gt; が &lt;code&gt;genericLookup&lt;/code&gt; の特殊バージョンとして実際に動作することを確認するのは&lt;em&gt;あなたの責任&lt;/em&gt;です !!!</target>
        </trans-unit>
        <trans-unit id="03f782cb2cf883c8957d19560fdc08a6367864fa" translate="yes" xml:space="preserve">
          <source>It is a member of the &lt;em&gt;root set&lt;/em&gt;.</source>
          <target state="translated">これは、&lt;em&gt;ルートセットの&lt;/em&gt;メンバーです。</target>
        </trans-unit>
        <trans-unit id="069be4f33a15425dcbdb6739fc39df2c50d79737" translate="yes" xml:space="preserve">
          <source>It is a special case of &lt;code&gt;&lt;a href=&quot;data-bytestring#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own equality test. It is about 40% faster than &lt;em&gt;groupBy (==)&lt;/em&gt;</source>
          <target state="translated">これは、プログラマが独自の等価テストを提供できるようにする &lt;code&gt;&lt;a href=&quot;data-bytestring#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; の特殊なケースです。&lt;em&gt;groupBy（==）&lt;/em&gt;よりも約40％高速です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="239e0df1f67690a4356b9b61134d42a036c1b5b3" translate="yes" xml:space="preserve">
          <source>It is a special case of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own equality test.</source>
          <target state="translated">これは、プログラマが独自の等価テストを提供できるようにする &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; の特殊なケースです。</target>
        </trans-unit>
        <trans-unit id="bd809bd965bb0b89781400d6bdebc57c3ad18a2c" translate="yes" xml:space="preserve">
          <source>It is a special case of &lt;code&gt;&lt;a href=&quot;data-list#v:deleteBy&quot;&gt;deleteBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own equality test.</source>
          <target state="translated">これは、プログラマーが独自の等価テストを提供できるようにする &lt;code&gt;&lt;a href=&quot;data-list#v:deleteBy&quot;&gt;deleteBy&lt;/a&gt;&lt;/code&gt; の特殊なケースです。</target>
        </trans-unit>
        <trans-unit id="fa42b4f7bbfb75dac932dd4da50a6822c257bf8f" translate="yes" xml:space="preserve">
          <source>It is a special case of &lt;code&gt;&lt;a href=&quot;data-list#v:deleteFirstsBy&quot;&gt;deleteFirstsBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own equality test.</source>
          <target state="translated">これは、プログラマーが独自の等価テストを提供できるようにする &lt;code&gt;&lt;a href=&quot;data-list#v:deleteFirstsBy&quot;&gt;deleteFirstsBy&lt;/a&gt;&lt;/code&gt; の特殊なケースです。</target>
        </trans-unit>
        <trans-unit id="f8fd3a20ff645eb541fd385527d7dc74a8034274" translate="yes" xml:space="preserve">
          <source>It is a special case of &lt;code&gt;&lt;a href=&quot;data-list#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own equality test.</source>
          <target state="translated">これは、プログラマが独自の等価テストを提供できるようにする &lt;code&gt;&lt;a href=&quot;data-list#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; の特殊なケースです。</target>
        </trans-unit>
        <trans-unit id="cb8c3ea4f4fa2bd6894db3bc15c4f14fe3736921" translate="yes" xml:space="preserve">
          <source>It is a special case of &lt;code&gt;&lt;a href=&quot;data-list#v:intersectBy&quot;&gt;intersectBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own equality test. If the element is found in both the first and the second list, the element from the first list will be used.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;data-list#v:intersectBy&quot;&gt;intersectBy&lt;/a&gt;&lt;/code&gt; の特殊なケースで、プログラマーが独自の等価テストを提供できるようにします。要素が最初と2番目のリストの両方で見つかった場合、最初のリストの要素が使用されます。</target>
        </trans-unit>
        <trans-unit id="8ca3310f8d4a5261d5f6d4a55bd30a7adbbbfad1" translate="yes" xml:space="preserve">
          <source>It is a special case of &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own equality test.</source>
          <target state="translated">これは、プログラマが独自の等価テストを提供できるようにする &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; の特殊なケースです。</target>
        </trans-unit>
        <trans-unit id="c645a3e28d8356b799e0c5997e6e6fa8ae48c19e" translate="yes" xml:space="preserve">
          <source>It is a special case of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:deleteBy&quot;&gt;deleteBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own equality test.</source>
          <target state="translated">これは、プログラマーが独自の等価テストを提供できるようにする &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:deleteBy&quot;&gt;deleteBy&lt;/a&gt;&lt;/code&gt; の特殊なケースです。</target>
        </trans-unit>
        <trans-unit id="cbc3e58e1417baac797e30cd4b1fce7f11aee8c6" translate="yes" xml:space="preserve">
          <source>It is a special case of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:deleteFirstsBy&quot;&gt;deleteFirstsBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own equality test.</source>
          <target state="translated">これは、プログラマーが独自の等価テストを提供できるようにする &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:deleteFirstsBy&quot;&gt;deleteFirstsBy&lt;/a&gt;&lt;/code&gt; の特殊なケースです。</target>
        </trans-unit>
        <trans-unit id="eab5f4c0e60e1bf6ad7feb752ee004afd76acf82" translate="yes" xml:space="preserve">
          <source>It is a special case of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own equality test.</source>
          <target state="translated">これは、プログラマが独自の等価テストを提供できるようにする &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; の特殊なケースです。</target>
        </trans-unit>
        <trans-unit id="9f4770e82cc2d4aa8245aef5038e07d136f80baa" translate="yes" xml:space="preserve">
          <source>It is a special case of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:intersectBy&quot;&gt;intersectBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own equality test. If the element is found in both the first and the second list, the element from the first list will be used.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:intersectBy&quot;&gt;intersectBy&lt;/a&gt;&lt;/code&gt; の特殊なケースで、プログラマーが独自の等価テストを提供できるようにします。要素が最初と2番目のリストの両方で見つかった場合、最初のリストの要素が使用されます。</target>
        </trans-unit>
        <trans-unit id="b1552e1c07901d09d36b63e9e1d341f53802ec30" translate="yes" xml:space="preserve">
          <source>It is a weak pointer object whose key is reachable.</source>
          <target state="translated">キーが到達可能な弱いポインタオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="0cca6e72767e4d015953dd197d29471c4aebb413" translate="yes" xml:space="preserve">
          <source>It is also possible for library writers to instruct GHC to perform call-pattern specialisation extremely aggressively. This is necessary for some highly optimized libraries, where we may want to specialize regardless of the number of specialisations, or the size of the code. As an example, consider a simplified use-case from the &lt;code&gt;vector&lt;/code&gt; library:</source>
          <target state="translated">また、ライブラリライターがGHCに呼び出しパターンの特殊化を非常に積極的に実行するように指示することもできます。これは、特殊化の数やコードのサイズに関係なく特殊化する必要がある、高度に最適化された一部のライブラリに必要です。例として、 &lt;code&gt;vector&lt;/code&gt; ライブラリの単純化されたユースケースを考えます。</target>
        </trans-unit>
        <trans-unit id="4757c18b6a5b619791dbad2b33b1d97df1650f39" translate="yes" xml:space="preserve">
          <source>It is also possible to break down the heap in one or more of these states by a different criteria, by restricting a profile by biography. For example, to show the portion of the heap in the drag or void state by producer:</source>
          <target state="translated">また、プロファイルを伝記で制限することで、これらの状態のうちの 1 つ以上のヒープを別の基準で分解することも可能です。例えば、ドラッグ状態やボイド状態にあるヒープの部分をプロデューサー別に表示することもできます。</target>
        </trans-unit>
        <trans-unit id="22401f25d2546092811a16d0a0193b09e8047866" translate="yes" xml:space="preserve">
          <source>It is also possible to convert a run-time integer or string value to the corresponding type-level literal. Of course, the resulting type literal will be unknown at compile-time, so it is hidden in an existential type. The conversion may be performed using &lt;code&gt;someNatVal&lt;/code&gt; for integers and &lt;code&gt;someSymbolVal&lt;/code&gt; for strings:</source>
          <target state="translated">ランタイム整数または文字列値を対応するタイプレベルのリテラルに変換することもできます。もちろん、結果の型リテラルはコンパイル時には不明であるため、存在型には隠されています。変換を使用して行うことができる &lt;code&gt;someNatVal&lt;/code&gt; を整数とするために &lt;code&gt;someSymbolVal&lt;/code&gt; 文字列の：</target>
        </trans-unit>
        <trans-unit id="c3907b0597bf6218c2db4b87b9bbdc3553feab8b" translate="yes" xml:space="preserve">
          <source>It is also possible to define pattern synonyms which behave just like record constructors. The syntax for doing this is as follows:</source>
          <target state="translated">レコード・コンストラクタと同じように動作するパターン・シノニムを定義することも可能です。そのための構文は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="8a1490fcee5f36e805c28234c40d20c616d4e3dd" translate="yes" xml:space="preserve">
          <source>It is also possible to use the special token &lt;code&gt;..&lt;/code&gt; in an export list to mean all currently bundled constructors. For example, we could write:</source>
          <target state="translated">特別なトークンを使用することも可能である &lt;code&gt;..&lt;/code&gt; 現在のすべてのバンドルのコンストラクタを意味するエクスポートリストに。たとえば、次のように記述できます。</target>
        </trans-unit>
        <trans-unit id="de2873d8935eeb0018b07c42899bc06b831c7270" translate="yes" xml:space="preserve">
          <source>It is also useful in higher-order situations, such as &lt;code&gt;&lt;a href=&quot;ghc-base#v:map&quot;&gt;map&lt;/a&gt; (&lt;a href=&quot;ghc-base#v:-36-&quot;&gt;$&lt;/a&gt; 0) xs&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt; (&lt;a href=&quot;ghc-base#v:-36-&quot;&gt;$&lt;/a&gt;) fs xs&lt;/code&gt;.</source>
          <target state="translated">また、 &lt;code&gt;&lt;a href=&quot;ghc-base#v:map&quot;&gt;map&lt;/a&gt; (&lt;a href=&quot;ghc-base#v:-36-&quot;&gt;$&lt;/a&gt; 0) xs&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt; (&lt;a href=&quot;ghc-base#v:-36-&quot;&gt;$&lt;/a&gt;) fs xs&lt;/code&gt; などの高次の状況でも役立ちます。</target>
        </trans-unit>
        <trans-unit id="c12a49d05c28a1a98429762042c0b4412957c895" translate="yes" xml:space="preserve">
          <source>It is also useful in higher-order situations, such as &lt;code&gt;&lt;a href=&quot;ghc-list#v:map&quot;&gt;map&lt;/a&gt; (&lt;a href=&quot;data-function#v:-36-&quot;&gt;$&lt;/a&gt; 0) xs&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt; (&lt;a href=&quot;data-function#v:-36-&quot;&gt;$&lt;/a&gt;) fs xs&lt;/code&gt;.</source>
          <target state="translated">また、 &lt;code&gt;&lt;a href=&quot;ghc-list#v:map&quot;&gt;map&lt;/a&gt; (&lt;a href=&quot;data-function#v:-36-&quot;&gt;$&lt;/a&gt; 0) xs&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt; (&lt;a href=&quot;data-function#v:-36-&quot;&gt;$&lt;/a&gt;) fs xs&lt;/code&gt; などの高次の状況でも役立ちます。</target>
        </trans-unit>
        <trans-unit id="d9f8f6803d1f1e2615e394efe93e5fe24a089463" translate="yes" xml:space="preserve">
          <source>It is also useful in higher-order situations, such as &lt;code&gt;&lt;a href=&quot;prelude#v:map&quot;&gt;map&lt;/a&gt; (&lt;a href=&quot;prelude#v:-36-&quot;&gt;$&lt;/a&gt; 0) xs&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt; (&lt;a href=&quot;prelude#v:-36-&quot;&gt;$&lt;/a&gt;) fs xs&lt;/code&gt;.</source>
          <target state="translated">また、 &lt;code&gt;&lt;a href=&quot;prelude#v:map&quot;&gt;map&lt;/a&gt; (&lt;a href=&quot;prelude#v:-36-&quot;&gt;$&lt;/a&gt; 0) xs&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt; (&lt;a href=&quot;prelude#v:-36-&quot;&gt;$&lt;/a&gt;) fs xs&lt;/code&gt; などの高次の状況でも役立ちます。</target>
        </trans-unit>
        <trans-unit id="088801e51db959873ed393905491b4b94a913978" translate="yes" xml:space="preserve">
          <source>It is an error if &lt;code&gt;qualified&lt;/code&gt; appears in both pre and postpositive positions.</source>
          <target state="translated">&lt;code&gt;qualified&lt;/code&gt; が前と後の両方の位置に表示される場合はエラーです。</target>
        </trans-unit>
        <trans-unit id="c19c4298b2ba4d7e7e82d4c54f964b68bea6b25f" translate="yes" xml:space="preserve">
          <source>It is an instance of the more general &lt;code&gt;&lt;a href=&quot;data-list#v:genericDrop&quot;&gt;genericDrop&lt;/a&gt;&lt;/code&gt;, in which &lt;code&gt;n&lt;/code&gt; may be of any integral type.</source>
          <target state="translated">これは、より一般的なのインスタンスである &lt;code&gt;&lt;a href=&quot;data-list#v:genericDrop&quot;&gt;genericDrop&lt;/a&gt;&lt;/code&gt; 、ここで &lt;code&gt;n&lt;/code&gt; は任意の整数型であってもよいです。</target>
        </trans-unit>
        <trans-unit id="8d61ccfca667f2076e6f4edcc5438cf1d81d7dfc" translate="yes" xml:space="preserve">
          <source>It is an instance of the more general &lt;code&gt;&lt;a href=&quot;data-list#v:genericTake&quot;&gt;genericTake&lt;/a&gt;&lt;/code&gt;, in which &lt;code&gt;n&lt;/code&gt; may be of any integral type.</source>
          <target state="translated">これは、より一般的なのインスタンスである &lt;code&gt;&lt;a href=&quot;data-list#v:genericTake&quot;&gt;genericTake&lt;/a&gt;&lt;/code&gt; 、ここで &lt;code&gt;n&lt;/code&gt; は任意の整数型であってもよいです。</target>
        </trans-unit>
        <trans-unit id="4520db00eca14b103654198af329d717c9454f03" translate="yes" xml:space="preserve">
          <source>It is conceivable that this restriction will be relaxed in the future, but it is (at the time of writing) unclear if the difficulties around this scenario are theoretical (inferring this dependency would mean our type system does not have principal types) or merely practical (inferring this dependency is hard, given GHC&amp;rsquo;s implementation). So, GHC takes the easy way out and requires a little help from the user.</source>
          <target state="translated">この制限は将来的に緩和されると考えられますが、この記事の執筆時点では、このシナリオに関する困難が理論的なものであるかどうか（この依存性を推測すると、型システムにプリンシパル型がないことを意味します）、または単に実用的かどうかはわかりません（GHCの実装を考えると、この依存関係を推測することは困難です）。したがって、GHCは簡単な方法を採用し、ユーザーからの少しの支援を必要とします。</target>
        </trans-unit>
        <trans-unit id="132f9840bd91416c5132ad1603ef8603660ce360" translate="yes" xml:space="preserve">
          <source>It is currently implemented as &lt;code&gt;Array ix (TVar e)&lt;/code&gt;, but it may be replaced by a more efficient implementation in the future (the interface will remain the same, however).</source>
          <target state="translated">現在は &lt;code&gt;Array ix (TVar e)&lt;/code&gt; として実装されていますが、将来はより効率的な実装に置き換えられる可能性があります（ただし、インターフェースは同じままです）。</target>
        </trans-unit>
        <trans-unit id="abf70f5f9fd5128dce09b9caedea975ee8e442ea" translate="yes" xml:space="preserve">
          <source>It is directly pointed to by a reachable object, other than a weak pointer object.</source>
          <target state="translated">弱いポインタオブジェクト以外の到達可能なオブジェクトから直接指される。</target>
        </trans-unit>
        <trans-unit id="261c2e926d54062731e9f0110ad18886ba23e42b" translate="yes" xml:space="preserve">
          <source>It is enabled with the extension &lt;a href=&quot;#extension-RecursiveDo&quot;&gt;&lt;code&gt;RecursiveDo&lt;/code&gt;&lt;/a&gt;, or the &lt;code&gt;LANGUAGE RecursiveDo&lt;/code&gt; pragma. (The same extension enables both &lt;code&gt;mdo&lt;/code&gt;-notation, and the use of &lt;code&gt;rec&lt;/code&gt; blocks inside &lt;code&gt;do&lt;/code&gt; expressions.)</source>
          <target state="translated">これは、拡張&lt;a href=&quot;#extension-RecursiveDo&quot;&gt; &lt;code&gt;RecursiveDo&lt;/code&gt; &lt;/a&gt;または &lt;code&gt;LANGUAGE RecursiveDo&lt;/code&gt; プラグマで有効になります。（同じ拡張機能により、 &lt;code&gt;mdo&lt;/code&gt; 表記と &lt;code&gt;do&lt;/code&gt; 式内での &lt;code&gt;rec&lt;/code&gt; ブロックの使用の両方が可能になります。）</target>
        </trans-unit>
        <trans-unit id="8bea23b077b757046e91df01a7b24e7e8a098f4b" translate="yes" xml:space="preserve">
          <source>It is equivalent to &lt;code&gt;(&lt;a href=&quot;data-list#v:take&quot;&gt;take&lt;/a&gt; n xs, &lt;a href=&quot;data-list#v:drop&quot;&gt;drop&lt;/a&gt; n xs)&lt;/code&gt; when &lt;code&gt;n&lt;/code&gt; is not &lt;code&gt;_|_&lt;/code&gt; (&lt;code&gt;splitAt _|_ xs = _|_&lt;/code&gt;). &lt;code&gt;&lt;a href=&quot;data-list#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; is an instance of the more general &lt;code&gt;&lt;a href=&quot;data-list#v:genericSplitAt&quot;&gt;genericSplitAt&lt;/a&gt;&lt;/code&gt;, in which &lt;code&gt;n&lt;/code&gt; may be of any integral type.</source>
          <target state="translated">これは、 &lt;code&gt;n&lt;/code&gt; が &lt;code&gt;_|_&lt;/code&gt; ない場合 &lt;code&gt;(&lt;a href=&quot;data-list#v:take&quot;&gt;take&lt;/a&gt; n xs, &lt;a href=&quot;data-list#v:drop&quot;&gt;drop&lt;/a&gt; n xs)&lt;/code&gt; と同等です（ &lt;code&gt;splitAt _|_ xs = _|_&lt;/code&gt; ）。 &lt;code&gt;&lt;a href=&quot;data-list#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; は、より一般的なのインスタンスで &lt;code&gt;&lt;a href=&quot;data-list#v:genericSplitAt&quot;&gt;genericSplitAt&lt;/a&gt;&lt;/code&gt; た、 &lt;code&gt;n&lt;/code&gt; は任意の整数タイプであってもよいです。</target>
        </trans-unit>
        <trans-unit id="ab7ccf86caf74eb72038f169e079e1f3cf957dea" translate="yes" xml:space="preserve">
          <source>It is equivalent to &lt;code&gt;(&lt;a href=&quot;ghc-list#v:take&quot;&gt;take&lt;/a&gt; n xs, &lt;a href=&quot;ghc-list#v:drop&quot;&gt;drop&lt;/a&gt; n xs)&lt;/code&gt; when &lt;code&gt;n&lt;/code&gt; is not &lt;code&gt;_|_&lt;/code&gt; (&lt;code&gt;splitAt _|_ xs = _|_&lt;/code&gt;). &lt;code&gt;&lt;a href=&quot;ghc-list#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; is an instance of the more general &lt;code&gt;&lt;a href=&quot;data-list#v:genericSplitAt&quot;&gt;genericSplitAt&lt;/a&gt;&lt;/code&gt;, in which &lt;code&gt;n&lt;/code&gt; may be of any integral type.</source>
          <target state="translated">これは、 &lt;code&gt;n&lt;/code&gt; が &lt;code&gt;_|_&lt;/code&gt; ない場合 &lt;code&gt;(&lt;a href=&quot;ghc-list#v:take&quot;&gt;take&lt;/a&gt; n xs, &lt;a href=&quot;ghc-list#v:drop&quot;&gt;drop&lt;/a&gt; n xs)&lt;/code&gt; と同等です（ &lt;code&gt;splitAt _|_ xs = _|_&lt;/code&gt; ）。 &lt;code&gt;&lt;a href=&quot;ghc-list#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; は、より一般的なのインスタンスで &lt;code&gt;&lt;a href=&quot;data-list#v:genericSplitAt&quot;&gt;genericSplitAt&lt;/a&gt;&lt;/code&gt; た、 &lt;code&gt;n&lt;/code&gt; は任意の整数タイプであってもよいです。</target>
        </trans-unit>
        <trans-unit id="dd5e739fd9707031c252768bfd31d106af48cdf7" translate="yes" xml:space="preserve">
          <source>It is equivalent to &lt;code&gt;(&lt;a href=&quot;ghc-oldlist#v:take&quot;&gt;take&lt;/a&gt; n xs, &lt;a href=&quot;ghc-oldlist#v:drop&quot;&gt;drop&lt;/a&gt; n xs)&lt;/code&gt; when &lt;code&gt;n&lt;/code&gt; is not &lt;code&gt;_|_&lt;/code&gt; (&lt;code&gt;splitAt _|_ xs = _|_&lt;/code&gt;). &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; is an instance of the more general &lt;code&gt;&lt;a href=&quot;data-list#v:genericSplitAt&quot;&gt;genericSplitAt&lt;/a&gt;&lt;/code&gt;, in which &lt;code&gt;n&lt;/code&gt; may be of any integral type.</source>
          <target state="translated">これは、 &lt;code&gt;n&lt;/code&gt; が &lt;code&gt;_|_&lt;/code&gt; ない場合 &lt;code&gt;(&lt;a href=&quot;ghc-oldlist#v:take&quot;&gt;take&lt;/a&gt; n xs, &lt;a href=&quot;ghc-oldlist#v:drop&quot;&gt;drop&lt;/a&gt; n xs)&lt;/code&gt; と同等です（ &lt;code&gt;splitAt _|_ xs = _|_&lt;/code&gt; ）。 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; は、より一般的なのインスタンスで &lt;code&gt;&lt;a href=&quot;data-list#v:genericSplitAt&quot;&gt;genericSplitAt&lt;/a&gt;&lt;/code&gt; た、 &lt;code&gt;n&lt;/code&gt; は任意の整数タイプであってもよいです。</target>
        </trans-unit>
        <trans-unit id="012b2268f894fbcad616c233a5e6e2ed1c0e90d2" translate="yes" xml:space="preserve">
          <source>It is equivalent to &lt;code&gt;(&lt;a href=&quot;prelude#v:take&quot;&gt;take&lt;/a&gt; n xs, &lt;a href=&quot;prelude#v:drop&quot;&gt;drop&lt;/a&gt; n xs)&lt;/code&gt; when &lt;code&gt;n&lt;/code&gt; is not &lt;code&gt;_|_&lt;/code&gt; (&lt;code&gt;splitAt _|_ xs = _|_&lt;/code&gt;). &lt;code&gt;&lt;a href=&quot;prelude#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; is an instance of the more general &lt;code&gt;&lt;a href=&quot;data-list#v:genericSplitAt&quot;&gt;genericSplitAt&lt;/a&gt;&lt;/code&gt;, in which &lt;code&gt;n&lt;/code&gt; may be of any integral type.</source>
          <target state="translated">これは、 &lt;code&gt;n&lt;/code&gt; が &lt;code&gt;_|_&lt;/code&gt; ない場合 &lt;code&gt;(&lt;a href=&quot;prelude#v:take&quot;&gt;take&lt;/a&gt; n xs, &lt;a href=&quot;prelude#v:drop&quot;&gt;drop&lt;/a&gt; n xs)&lt;/code&gt; と同等です（ &lt;code&gt;splitAt _|_ xs = _|_&lt;/code&gt; ）。 &lt;code&gt;&lt;a href=&quot;prelude#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; は、より一般的なのインスタンスで &lt;code&gt;&lt;a href=&quot;data-list#v:genericSplitAt&quot;&gt;genericSplitAt&lt;/a&gt;&lt;/code&gt; た、 &lt;code&gt;n&lt;/code&gt; は任意の整数タイプであってもよいです。</target>
        </trans-unit>
        <trans-unit id="9043eb63209967eef7cab64b2197f94ad029bacc" translate="yes" xml:space="preserve">
          <source>It is essential that this operator be polymorphic in &lt;code&gt;e&lt;/code&gt; (representing the environment input to the command and thence to its subcommands) and satisfy the corresponding naturality property</source>
          <target state="translated">この演算子は、 &lt;code&gt;e&lt;/code&gt; （コマンドへの環境入力とそのサブコマンドへの環境入力を表す）で多態性であり、対応する自然性プロパティを満たすことが不可欠です。</target>
        </trans-unit>
        <trans-unit id="51c5c05402feec4369eaf30cf0ebc2b274ccd329" translate="yes" xml:space="preserve">
          <source>It is expected that this operation will be replaced in a future revision of Haskell.</source>
          <target state="translated">この操作はHaskellの将来のリビジョンで置き換えられることが期待されています。</target>
        </trans-unit>
        <trans-unit id="6893a464868ba3a09460037bfdb1c410934d2838" translate="yes" xml:space="preserve">
          <source>It is exported, or</source>
          <target state="translated">輸出されているか</target>
        </trans-unit>
        <trans-unit id="6817f51eb52aa0729cda4c69d73c2002e9dd073d" translate="yes" xml:space="preserve">
          <source>It is fine for there to be a &lt;em&gt;potential&lt;/em&gt; of overlap (by including both declarations (A) and (B), say); an error is only reported if a particular constraint matches more than one.</source>
          <target state="translated">（たとえば、宣言（A）と（B）の両方を含めることによって）重複の&lt;em&gt;可能性&lt;/em&gt;があることは問題ありません。エラーは、特定の制約が複数に一致する場合にのみ報告されます。</target>
        </trans-unit>
        <trans-unit id="b7b71de1d9414a5e4eec5ca37b04a89216d93297" translate="yes" xml:space="preserve">
          <source>It is important to note that the &lt;code&gt;-O*&lt;/code&gt; flags are roughly equivalent to combinations of &lt;code&gt;-f*&lt;/code&gt; flags. For this reason, the effect of the &lt;code&gt;-O*&lt;/code&gt; and &lt;code&gt;-f*&lt;/code&gt; flags is dependent upon the order in which they occur on the command line.</source>
          <target state="translated">&lt;code&gt;-O*&lt;/code&gt; フラグは &lt;code&gt;-f*&lt;/code&gt; フラグの組み合わせとほぼ同等であることに注意することが重要です。このため、 &lt;code&gt;-O*&lt;/code&gt; &lt;code&gt;-f*&lt;/code&gt; フラグと-f *フラグの効果は、コマンドラインでの発生順序によって異なります。</target>
        </trans-unit>
        <trans-unit id="51fa236e42b180f8cc9073b0f8f9aa89b051ee47" translate="yes" xml:space="preserve">
          <source>It is large. Currently, GHC defines large object to be one that is at least as large as 80% of a 4KB block (i.e. at least 3277 bytes).</source>
          <target state="translated">大きいものである。現在、GHCは、少なくとも4KBブロックの80%以上(すなわち、少なくとも3277バイト)の大きさを持つものをラージオブジェクトと定義しています。</target>
        </trans-unit>
        <trans-unit id="b3a3f52225442e2fb709c4dba2b7ecf38df183fa" translate="yes" xml:space="preserve">
          <source>It is less well known that &lt;code&gt;&lt;a href=&quot;ghc-io#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; is not type safe. For example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; がタイプセーフではないことはあまり知られていません。例えば：</target>
        </trans-unit>
        <trans-unit id="c74a81a688854157f5042c8facebe05cd92fb4c3" translate="yes" xml:space="preserve">
          <source>It is less well known that &lt;code&gt;&lt;a href=&quot;ghc-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; is not type safe. For example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; がタイプセーフではないことはあまり知られていません。例えば：</target>
        </trans-unit>
        <trans-unit id="9df03deec4ca738a7771974c1c29751abc74608f" translate="yes" xml:space="preserve">
          <source>It is less well known that &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; is not type safe. For example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; がタイプセーフではないことはあまり知られていません。例えば：</target>
        </trans-unit>
        <trans-unit id="f4ac0712f3f7039b35bf7281360a3c3a76733fb1" translate="yes" xml:space="preserve">
          <source>It is necessary to iterate the case, rather than using an equational function definition. And the situation is even worse when the matching against &lt;code&gt;t&lt;/code&gt; is buried deep inside another pattern.</source>
          <target state="translated">方程式関数の定義を使用するのではなく、ケースを繰り返す必要があります。そして、 &lt;code&gt;t&lt;/code&gt; に対するマッチングが別のパターンの奥深くに埋め込まれている場合、状況はさらに悪化します。</target>
        </trans-unit>
        <trans-unit id="e8c666bcec97da91a1f2bdb19c53fb008bad01e9" translate="yes" xml:space="preserve">
          <source>It is no faster than using &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; を使用するよりも速くありません</target>
        </trans-unit>
        <trans-unit id="7993dac004679b298df229876946bdc7ec3a34f8" translate="yes" xml:space="preserve">
          <source>It is no faster than using &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; を使用するよりも速くはありません。</target>
        </trans-unit>
        <trans-unit id="8c92a675066e21869f55b433afde1a20b5c0c7ab" translate="yes" xml:space="preserve">
          <source>It is not always required to provide instances for all the generic representation types, but omitting instances restricts the set of datatypes the functions will work for:</source>
          <target state="translated">すべての一般的な表現型に対してインスタンスを提供する必要はありませんが、インスタンスを省略すると、関数が動作するデータ型のセットが制限されます。</target>
        </trans-unit>
        <trans-unit id="b38df5c45ca172adcd27d8afb5aa470712828fe4" translate="yes" xml:space="preserve">
          <source>It is not guaranteed that a finalizer will eventually run, and no attempt is made to run outstanding finalizers when the program exits. Therefore finalizers should not be relied on to clean up resources - other methods (eg. exception handlers) should be employed, possibly in addition to finalizers.</source>
          <target state="translated">ファイナライザが最終的に実行されることは保証されておらず、プログラムの終了時に未処理のファイナライザを実行しようとはしません。そのため、ファイナライザはリソースをクリーンアップするために利用すべきではありません。</target>
        </trans-unit>
        <trans-unit id="4bbc26cf551bb9424447020a8aa82fbb576e6ad5" translate="yes" xml:space="preserve">
          <source>It is not recommended to move all the contents of your Makefiles into your source files, but in some circumstances, the &lt;code&gt;OPTIONS_GHC&lt;/code&gt; pragma is the Right Thing. (If you use &lt;a href=&quot;separate_compilation#ghc-flag--keep-hc-file&quot;&gt;&lt;code&gt;-keep-hc-file&lt;/code&gt;&lt;/a&gt; and have &lt;code&gt;OPTION&lt;/code&gt; flags in your module, the &lt;code&gt;OPTIONS_GHC&lt;/code&gt; will get put into the generated &lt;code&gt;.hc&lt;/code&gt; file).</source>
          <target state="translated">Makefileのすべてのコンテンツをソースファイルに移動することはお勧めできませんが、状況によっては、 &lt;code&gt;OPTIONS_GHC&lt;/code&gt; プラグマが適切な場合があります。（あなたが使用している場合は&lt;a href=&quot;separate_compilation#ghc-flag--keep-hc-file&quot;&gt; &lt;code&gt;-keep-hc-file&lt;/code&gt; &lt;/a&gt;し、持っている &lt;code&gt;OPTION&lt;/code&gt; のあなたのモジュールのフラグを、 &lt;code&gt;OPTIONS_GHC&lt;/code&gt; は、生成に入れてしまいます &lt;code&gt;.hc&lt;/code&gt; ファイル）。</target>
        </trans-unit>
        <trans-unit id="1ff8d11ee1db2c3d0f7f66202dd22454f1e83d2b" translate="yes" xml:space="preserve">
          <source>It is often convenient to use these functions together with &lt;code&gt;&lt;a href=&quot;data-function#v:on&quot;&gt;on&lt;/a&gt;&lt;/code&gt;, for instance &lt;code&gt;&lt;a href=&quot;data-list#v:sortBy&quot;&gt;sortBy&lt;/a&gt; (&lt;a href=&quot;prelude#v:compare&quot;&gt;compare&lt;/a&gt;
&lt;a href=&quot;data-function#v:on&quot;&gt;`on`&lt;/a&gt; &lt;a href=&quot;prelude#v:fst&quot;&gt;fst&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">一緒に、これらの機能を使用するのが便利であることが多い &lt;code&gt;&lt;a href=&quot;data-function#v:on&quot;&gt;on&lt;/a&gt;&lt;/code&gt; 、たとえば、 &lt;code&gt;&lt;a href=&quot;data-list#v:sortBy&quot;&gt;sortBy&lt;/a&gt; (&lt;a href=&quot;prelude#v:compare&quot;&gt;compare&lt;/a&gt; &lt;a href=&quot;data-function#v:on&quot;&gt;`on`&lt;/a&gt; &lt;a href=&quot;prelude#v:fst&quot;&gt;fst&lt;/a&gt;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f82e0aec46550ca7cd3c7a17a29d279383519fb8" translate="yes" xml:space="preserve">
          <source>It is often convenient to use these functions together with &lt;code&gt;&lt;a href=&quot;data-function#v:on&quot;&gt;on&lt;/a&gt;&lt;/code&gt;, for instance &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:sortBy&quot;&gt;sortBy&lt;/a&gt; (&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;
 `on` &lt;a href=&quot;data-tuple#v:fst&quot;&gt;fst&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">一緒に、これらの機能を使用するのが便利であることが多い &lt;code&gt;&lt;a href=&quot;data-function#v:on&quot;&gt;on&lt;/a&gt;&lt;/code&gt; 、たとえば、 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:sortBy&quot;&gt;sortBy&lt;/a&gt; (&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt; `on` &lt;a href=&quot;data-tuple#v:fst&quot;&gt;fst&lt;/a&gt;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de502421480842aa548e8ea6ed82138595929709" translate="yes" xml:space="preserve">
          <source>It is often useful to change the interactive options, without having that option apply to loaded modules too. For example</source>
          <target state="translated">読み込まれたモジュールにもそのオプションを適用させずに、 対話的なオプションを変更するのは便利なことがよくあります。例えば</target>
        </trans-unit>
        <trans-unit id="eb7c1cce1ac012520a592bb5beee1e418b094930" translate="yes" xml:space="preserve">
          <source>It is perfectly fine to declare new instances of &lt;code&gt;IsList&lt;/code&gt;, so that list notation becomes useful for completely new data types. Here are several example instances:</source>
          <target state="translated">&lt;code&gt;IsList&lt;/code&gt; の新しいインスタンスを宣言することは完全に問題ないので、リスト表記は完全に新しいデータ型に役立ちます。ここにいくつかの例のインスタンスがあります：</target>
        </trans-unit>
        <trans-unit id="be592f31214a85aaa56dc9374e547bf23d2889f8" translate="yes" xml:space="preserve">
          <source>It is permitted to declare an ordinary algebraic data type using GADT-style syntax. What makes a GADT into a GADT is not the syntax, but rather the presence of data constructors whose result type is not just &lt;code&gt;T a b&lt;/code&gt;.</source>
          <target state="translated">GADTスタイルの構文を使用して、通常の代数データ型を宣言することができます。GADTをGADTにするのは構文ではなく、結果タイプが &lt;code&gt;T a b&lt;/code&gt; だけではないデータコンストラクターの存在です。</target>
        </trans-unit>
        <trans-unit id="5bbad91689683e0416e9939388b48991ae76e32a" translate="yes" xml:space="preserve">
          <source>It is possible for a splice to expand to an expression that contain names which are not in scope at the site of the splice. As an example, consider the following code:</source>
          <target state="translated">スプライスのサイトではスコープに入っていない名前を含む式にスプライスを展開することができます。例として、次のコードを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="bd581700f02bf98080ced3eb7d39eabe45397ae7" translate="yes" xml:space="preserve">
          <source>It is possible for the class defining the associated type to specify a default for associated type instances. So for example, this is OK:</source>
          <target state="translated">関連する型を定義しているクラスが、関連する型インスタンスのデフォルトを指定することが可能です。なので、例えばこんな感じでOKです。</target>
        </trans-unit>
        <trans-unit id="d7b7fcebbf4b65341979036fb2aefa0d104f093c" translate="yes" xml:space="preserve">
          <source>It is possible that by using packages you might end up with a program that contains two modules with the same name: perhaps you used a package &lt;code&gt;P&lt;/code&gt; that has a &lt;em&gt;hidden&lt;/em&gt; module &lt;code&gt;M&lt;/code&gt;, and there is also a module &lt;code&gt;M&lt;/code&gt; in your program. Or perhaps the dependencies of packages that you used contain some overlapping modules. Perhaps the program even contains multiple versions of a certain package, due to dependencies from other packages.</source>
          <target state="translated">パッケージを使用することにより、同じ名前の2つのモジュールを含むプログラムになってしまう可能性があります。おそらく、&lt;em&gt;非表示の&lt;/em&gt;モジュール &lt;code&gt;M&lt;/code&gt; を持つパッケージ &lt;code&gt;P&lt;/code&gt; を使用し、プログラム内にモジュール &lt;code&gt;M&lt;/code&gt; も存在する場合があります。または、使用したパッケージの依存関係に重複するモジュールが含まれている可能性があります。おそらく、他のパッケージからの依存関係が原因で、プログラムに特定のパッケージの複数のバージョンが含まれている可能性もあります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e864f624e39a6372353b24e0e6a96c7344cbf60c" translate="yes" xml:space="preserve">
          <source>It is possible to ask the RTS to give some information about itself. To do this, use the &lt;a href=&quot;#rts-flag---info&quot;&gt;&lt;code&gt;--info&lt;/code&gt;&lt;/a&gt; flag, e.g.</source>
          <target state="translated">RTSにそれ自体についての情報を提供するよう依頼することは可能です。これを行うには、たとえば&lt;a href=&quot;#rts-flag---info&quot;&gt; &lt;code&gt;--info&lt;/code&gt; &lt;/a&gt;フラグを使用します。</target>
        </trans-unit>
        <trans-unit id="1a5239595846ebef3ee721fce01d7bb0a22f2eef" translate="yes" xml:space="preserve">
          <source>It is possible to catch all exceptions, by using the type &lt;code&gt;&lt;a href=&quot;control-exception#t:SomeException&quot;&gt;SomeException&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">タイプ &lt;code&gt;&lt;a href=&quot;control-exception#t:SomeException&quot;&gt;SomeException&lt;/a&gt;&lt;/code&gt; を使用すると、すべての例外をキャッチできます。</target>
        </trans-unit>
        <trans-unit id="8190060f870795d42df681cc02e5db01b634f194" translate="yes" xml:space="preserve">
          <source>It is possible to chain &lt;code&gt;&lt;a href=&quot;control-monad-cont#t:Cont&quot;&gt;Cont&lt;/a&gt;&lt;/code&gt; blocks with &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;control-monad-cont#t:Cont&quot;&gt;Cont&lt;/a&gt;&lt;/code&gt; ブロックをチェーンすることができます。</target>
        </trans-unit>
        <trans-unit id="de29d8a86d26aa4a500950a6e0de53b7d124ad27" translate="yes" xml:space="preserve">
          <source>It is possible to extract a value of type &lt;code&gt;m Exp&lt;/code&gt; from &lt;code&gt;Code m a&lt;/code&gt; using the &lt;code&gt;unTypeCode :: Code m a -&amp;gt; m Exp&lt;/code&gt; function.</source>
          <target state="translated">型の値を抽出することが可能である &lt;code&gt;m Exp&lt;/code&gt; から &lt;code&gt;Code m a&lt;/code&gt; 使用 &lt;code&gt;unTypeCode :: Code m a -&amp;gt; m Exp&lt;/code&gt; 機能を。</target>
        </trans-unit>
        <trans-unit id="eb0b7b074cc3fe7c2ea69389e576baaaad67d773" translate="yes" xml:space="preserve">
          <source>It is possible to get intricate dependencies among the type variables introduced in a type or class declaration. Here is an example:</source>
          <target state="translated">型やクラス宣言で導入された型変数間の複雑な依存関係を得ることができます。以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="dedaac9870154cb1e43ca5bf912ba5696270690e" translate="yes" xml:space="preserve">
          <source>It is possible to glean a little information about how well &lt;code&gt;par&lt;/code&gt; is working from the runtime statistics; see &lt;a href=&quot;../runtime_control#rts-options-gc&quot;&gt;RTS options to control the garbage collector&lt;/a&gt;.</source>
          <target state="translated">実行時の統計から、 &lt;code&gt;par&lt;/code&gt; がどの程度うまく機能しているかについての情報を少し収集することができます。&lt;a href=&quot;../runtime_control#rts-options-gc&quot;&gt;ガベージコレクタを制御するには、RTSオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e9a188cc02db22c8ef5ca5e67b12a46a7c5847e2" translate="yes" xml:space="preserve">
          <source>It is possible to glean a little information about how well &lt;code&gt;par&lt;/code&gt; is working from the runtime statistics; see &lt;a href=&quot;runtime_control#rts-options-gc&quot;&gt;RTS options to control the garbage collector&lt;/a&gt;.</source>
          <target state="translated">ランタイム統計から &lt;code&gt;par&lt;/code&gt; がどの程度うまく機能しているかについて少し情報を収集することが可能です。&lt;a href=&quot;runtime_control#rts-options-gc&quot;&gt;ガベージコレクタを制御するRTSオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="82c8e6ba79f13f4308db35903d0f8010b8c6598a" translate="yes" xml:space="preserve">
          <source>It is possible to load shared libraries generated by GHC in other programs not written in Haskell, so they are suitable for using as plugins. Of course to construct a plugin you will have to use the FFI to export C functions and follow the rules about initialising the RTS. See &lt;a href=&quot;exts/ffi#ffi-library&quot;&gt;Making a Haskell library that can be called from foreign code&lt;/a&gt;. In particular you will probably want to export a C function from your shared library to initialise the plugin before any Haskell functions are called.</source>
          <target state="translated">GHCによって生成された共有ライブラリをHaskellで書かれていない他のプログラムにロードすることが可能であるため、プラグインとして使用するのに適しています。もちろん、プラグインを作成するには、FFIを使用してC関数をエクスポートし、RTSの初期化に関するルールに従う必要があります。&lt;a href=&quot;exts/ffi#ffi-library&quot;&gt;外部コードから呼び出すことができるHaskellライブラリの作成を&lt;/a&gt;参照してください。特に、Haskell関数が呼び出される前に、共有ライブラリからC関数をエクスポートして、プラグインを初期化することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b7f5b4a244218bab17d22682a2382ef6e25e7da7" translate="yes" xml:space="preserve">
          <source>It is possible to load shared libraries generated by GHC in other programs not written in Haskell, so they are suitable for using as plugins. Of course to construct a plugin you will have to use the FFI to export C functions and follow the rules about initialising the RTS. See &lt;a href=&quot;ffi-chap#ffi-library&quot;&gt;Making a Haskell library that can be called from foreign code&lt;/a&gt;. In particular you will probably want to export a C function from your shared library to initialise the plugin before any Haskell functions are called.</source>
          <target state="translated">Haskellで書かれていない他のプログラムでGHCによって生成された共有ライブラリをロードすることが可能であるので、それらはプラグインとして使用するのに適しています。もちろん、プラグインを構築するには、FFIを使用してC関数をエクスポートし、RTSの初期化に関するルールに従う必要があります。&lt;a href=&quot;ffi-chap#ffi-library&quot;&gt;外部コードから呼び出せるHaskellライブラリの作成を&lt;/a&gt;参照してください。特に、おそらくHaskell関数が呼び出される前に、共有ライブラリからC関数をエクスポートしてプラグインを初期化したいと思うでしょう。</target>
        </trans-unit>
        <trans-unit id="a1594eefc0a39a04b21198840922dcc7bcda370e" translate="yes" xml:space="preserve">
          <source>It is possible to see the actual translation by using &lt;a href=&quot;../debugging#ghc-flag--ddump-ds&quot;&gt;&lt;code&gt;-ddump-ds&lt;/code&gt;&lt;/a&gt;, but be warned, the output is quite verbose.</source>
          <target state="translated">&lt;a href=&quot;../debugging#ghc-flag--ddump-ds&quot;&gt; &lt;code&gt;-ddump-ds&lt;/code&gt; &lt;/a&gt;を使用して実際の翻訳を確認することは可能ですが、出力は非常に冗長であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="98b901240fe3edf96da3bc8e1456eab7dfeb139d" translate="yes" xml:space="preserve">
          <source>It is possible to see the actual translation by using &lt;a href=&quot;debugging#ghc-flag--ddump-ds&quot;&gt;&lt;code&gt;-ddump-ds&lt;/code&gt;&lt;/a&gt;, but be warned, the output is quite verbose.</source>
          <target state="translated">&lt;a href=&quot;debugging#ghc-flag--ddump-ds&quot;&gt; &lt;code&gt;-ddump-ds&lt;/code&gt; &lt;/a&gt;を使用して実際の翻訳を確認することは可能ですが、出力は非常に詳細です。</target>
        </trans-unit>
        <trans-unit id="97c0a8caadf3b66e62c0079cf1c23a1634b80cf9" translate="yes" xml:space="preserve">
          <source>It is possible to use the debugger to examine function values. When we are at a breakpoint and a function is in scope, the debugger cannot show you the source code for it; however, it is possible to get some information by applying it to some arguments and observing the result.</source>
          <target state="translated">デバッガを使って関数の値を調べることができます。ブレークポイントで関数がスコープ内にある場合、デバッガはその関数のソースコードを表示することはできませんが、いくつかの引数にそれを適用して結果を観察することで情報を得ることができます。</target>
        </trans-unit>
        <trans-unit id="3cffc26f001e98a5eb62d64eab151b2a804d4ff6" translate="yes" xml:space="preserve">
          <source>It is possible to write a datatype that syntactically has a CUSK (according to the rules above) but actually requires some inference. As a very contrived example, consider</source>
          <target state="translated">構文的にCUSKを持つdatatypeを書くことは可能ですが(上記のルールに従って)、実際にはある程度の推論を必要とします。非常に対照的な例として、次のように考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="e70bf594eb18f38591c15ebb15e4986a31f41ffd" translate="yes" xml:space="preserve">
          <source>It is reasonably straightforward to set up a &lt;code&gt;Makefile&lt;/code&gt; to use with GHC, assuming you name your source files the same as your modules. Thus:</source>
          <target state="translated">ソースファイルにモジュールと同じ名前を付けると仮定すると、GHCで使用する &lt;code&gt;Makefile&lt;/code&gt; を設定するのはかなり簡単です。したがって：</target>
        </trans-unit>
        <trans-unit id="9b1330a63d6eae27b2d3c5c63940929507d87108" translate="yes" xml:space="preserve">
          <source>It is recommended that the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; is set to binary and &lt;code&gt;BlockBuffering&lt;/code&gt; mode. See &lt;code&gt;hSetBinaryMode&lt;/code&gt; and &lt;code&gt;hSetBuffering&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; をバイナリモードおよび &lt;code&gt;BlockBuffering&lt;/code&gt; モードに設定することをお勧めします。 &lt;code&gt;hSetBinaryMode&lt;/code&gt; および &lt;code&gt;hSetBuffering&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="fec177bf1098e5f20ba1d64f4c20e2f4b753abf5" translate="yes" xml:space="preserve">
          <source>It is recommended that the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; is set to binary and &lt;code&gt;BlockBuffering&lt;/code&gt; mode. See &lt;code&gt;hSetBinaryMode&lt;/code&gt; and &lt;code&gt;hSetBuffering&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; をバイナリモードおよび &lt;code&gt;BlockBuffering&lt;/code&gt; モードに設定することをお勧めします。 &lt;code&gt;hSetBinaryMode&lt;/code&gt; および &lt;code&gt;hSetBuffering&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e9cf0e87fcc8c4aca3617d4a5dc0deb83f6cef9b" translate="yes" xml:space="preserve">
          <source>It is recommended that the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; is set to binary and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:BlockBuffering&quot;&gt;BlockBuffering&lt;/a&gt;&lt;/code&gt; mode. See &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:hSetBuffering&quot;&gt;hSetBuffering&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; をバイナリおよび &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:BlockBuffering&quot;&gt;BlockBuffering&lt;/a&gt;&lt;/code&gt; モードに設定することをお勧めします。 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:hSetBuffering&quot;&gt;hSetBuffering&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="a7149585b59024bf632f3eb0345377f4daf71cd2" translate="yes" xml:space="preserve">
          <source>It is safe to coerce each of the methods of &lt;code&gt;C&lt;/code&gt;. That is, the missing last argument to &lt;code&gt;C&lt;/code&gt; is not used at a nominal role in any of the &lt;code&gt;C&lt;/code&gt;&amp;lsquo;s methods. (See &lt;a href=&quot;#roles&quot;&gt;Roles&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; の各メソッドを強制しても安全です。つまり、 &lt;code&gt;C&lt;/code&gt; への最後の引数の欠落は、 &lt;code&gt;C&lt;/code&gt; のメソッドのいずれでも名目上の役割では使用されません。（&lt;a href=&quot;#roles&quot;&gt;役割を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="9dae310ee0c9c0d6c351f210e6b5d84bf1211c9d" translate="yes" xml:space="preserve">
          <source>It is safe to coerce each of the methods of &lt;code&gt;C&lt;/code&gt;. That is, the missing last argument to &lt;code&gt;C&lt;/code&gt; is not used at a nominal role in any of the &lt;code&gt;C&lt;/code&gt;&amp;lsquo;s methods. (See &lt;a href=&quot;roles#roles&quot;&gt;Roles&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; の各メソッドを強制するのは安全です。つまり、 &lt;code&gt;C&lt;/code&gt; に対する欠落している最後の引数は、 &lt;code&gt;C&lt;/code&gt; のどのメソッドでも名目上の役割で使用されません。（&lt;a href=&quot;roles#roles&quot;&gt;役割を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="56ac92f5a75c017852235f851030bbab0ac262ac" translate="yes" xml:space="preserve">
          <source>It is safe to coerce each of the methods of &lt;code&gt;C&lt;/code&gt;. That is, the missing last argument to &lt;code&gt;C&lt;/code&gt; is not used at a nominal role in any of the &lt;code&gt;C&lt;/code&gt;&amp;rsquo;s methods. (See &lt;a href=&quot;#roles&quot;&gt;Roles&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; の各メソッドを強制するのは安全です。つまり、 &lt;code&gt;C&lt;/code&gt; に対する欠落している最後の引数は、 &lt;code&gt;C&lt;/code&gt; のどのメソッドでも名目上の役割で使用されません。（&lt;a href=&quot;#roles&quot;&gt;役割を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="d6dfdd6aaac4046a07ffe9ab81b043a38fb69661" translate="yes" xml:space="preserve">
          <source>It is safe to modify the floating-point unit state temporarily during a foreign call, because foreign calls are never pre-empted by GHC.</source>
          <target state="translated">外部からの呼び出しはGHCによってプリエンプティされることはないので、外部からの呼び出し中に浮動小数点単位の状態を一時的に変更しても安全です。</target>
        </trans-unit>
        <trans-unit id="96385c6227a3ac0109a62a1c3c011cd583d5d18e" translate="yes" xml:space="preserve">
          <source>It is similar to &lt;code&gt;&lt;a href=&quot;data-array-io#v:IOUArray&quot;&gt;IOUArray&lt;/a&gt;&lt;/code&gt; but slower. Its advantage is that it's compatible with C.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-array-io#v:IOUArray&quot;&gt;IOUArray&lt;/a&gt;&lt;/code&gt; に似ていますが、速度は遅くなります。その利点は、Cと互換性があることです。</target>
        </trans-unit>
        <trans-unit id="5091abc2477144e1329f7f3c467074952c1a5362" translate="yes" xml:space="preserve">
          <source>It is sometimes necessary to enable additional language extensions when deriving instances via &lt;a href=&quot;#extension-GeneralizedNewtypeDeriving&quot;&gt;&lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt;&lt;/a&gt;. For instance, consider a simple class and instance using &lt;a href=&quot;#extension-UnboxedTuples&quot;&gt;&lt;code&gt;UnboxedTuples&lt;/code&gt;&lt;/a&gt; syntax:</source>
          <target state="translated">&lt;a href=&quot;#extension-GeneralizedNewtypeDeriving&quot;&gt; &lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt; &lt;/a&gt;を介してインスタンスを派生させるときに、追加の言語拡張を有効にする必要がある場合があります。たとえば、&lt;a href=&quot;#extension-UnboxedTuples&quot;&gt; &lt;code&gt;UnboxedTuples&lt;/code&gt; &lt;/a&gt;構文を使用する単純なクラスとインスタンスについて考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="1600f03c1044e49fbd598b16e83434840c44835b" translate="yes" xml:space="preserve">
          <source>It is sometimes necessary to enable additional language extensions when deriving instances via &lt;a href=&quot;#extension-GeneralizedNewtypeDeriving&quot;&gt;&lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt;&lt;/a&gt;. For instance, consider a simple class and instance using &lt;a href=&quot;primitives#extension-UnboxedTuples&quot;&gt;&lt;code&gt;UnboxedTuples&lt;/code&gt;&lt;/a&gt; syntax:</source>
          <target state="translated">&lt;a href=&quot;#extension-GeneralizedNewtypeDeriving&quot;&gt; &lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt; &lt;/a&gt;を介してインスタンスを派生させるときに、追加の言語拡張を有効にする必要がある場合があります。たとえば、&lt;a href=&quot;primitives#extension-UnboxedTuples&quot;&gt; &lt;code&gt;UnboxedTuples&lt;/code&gt; &lt;/a&gt;構文を使用した単純なクラスとインスタンスについて考えてみます。</target>
        </trans-unit>
        <trans-unit id="5897d1d4639badd735a78c211392c1d9c37495e6" translate="yes" xml:space="preserve">
          <source>It is sometimes useful to construct the argument name using &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:lookupTypeName&quot;&gt;lookupTypeName&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:lookupValueName&quot;&gt;lookupValueName&lt;/a&gt;&lt;/code&gt; to ensure that we are reifying from the right namespace. For instance, in this context:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:lookupTypeName&quot;&gt;lookupTypeName&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:lookupValueName&quot;&gt;lookupValueName&lt;/a&gt;&lt;/code&gt; を使用して引数名を作成すると、適切なネームスペースから具体化していることを確認できる場合があります。たとえば、このコンテキストでは：</target>
        </trans-unit>
        <trans-unit id="000457152f4555357926c0b8afb516222a4f1c89" translate="yes" xml:space="preserve">
          <source>It is sometimes useful to construct the argument name using &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lookupTypeName&quot;&gt;lookupTypeName&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lookupValueName&quot;&gt;lookupValueName&lt;/a&gt;&lt;/code&gt; to ensure that we are reifying from the right namespace. For instance, in this context:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lookupTypeName&quot;&gt;lookupTypeName&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lookupValueName&quot;&gt;lookupValueName&lt;/a&gt;&lt;/code&gt; を使用して引数名を作成すると、適切なネームスペースから具体化していることを確認できる場合があります。たとえば、このコンテキストでは：</target>
        </trans-unit>
        <trans-unit id="c301fee90cdf2b960b35ddd17fe3eb6c2529a715" translate="yes" xml:space="preserve">
          <source>It is strongly recommended to use the safer, monadic API of &lt;a href=&quot;system-console-haskeline&quot;&gt;System.Console.Haskeline&lt;/a&gt;, if possible, rather than the explicit state management functions of this module.</source>
          <target state="translated">このモジュールの明示的な状態管理関数ではなく、可能であれば、&lt;a href=&quot;system-console-haskeline&quot;&gt;System.Console.Haskelineの&lt;/a&gt;より安全なモナディックAPIを使用することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="cc6c22c421bb7df31e233c1d7015be119c4e51ad" translate="yes" xml:space="preserve">
          <source>It is suitable for use as an internal representation for code that needs to keep many short strings in memory, but it &lt;em&gt;should not&lt;/em&gt; be used as an interchange type. That is, it should not generally be used in public APIs. The &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; type is usually more suitable for use in interfaces; it is more flexible and it supports a wide range of operations.</source>
          <target state="translated">多くの短い文字列をメモリに保持する必要があるコードの内部表現としての使用に適していますが、交換型としては使用し&lt;em&gt;ない&lt;/em&gt;で&lt;em&gt;ください&lt;/em&gt;。つまり、一般的にパブリックAPIでは使用しないでください。 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 型は、通常、インターフェースでの使用に適しています。より柔軟性があり、幅広い操作をサポートします。</target>
        </trans-unit>
        <trans-unit id="c44526ff00c2ea8f2f54194c36d403aa696761a1" translate="yes" xml:space="preserve">
          <source>It is suitable for use in pure code. In an IO context use &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEventIO&quot;&gt;traceEventIO&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">純粋なコードでの使用に適しています。IOコンテキストでは、代わりに &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEventIO&quot;&gt;traceEventIO&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="dc72eb1fbfce672989fe724db9126c46b5b0adc1" translate="yes" xml:space="preserve">
          <source>It is the value or finalizer of a weak pointer object whose key is reachable.</source>
          <target state="translated">キーが到達可能な弱いポインタオブジェクトの値またはファイナライザです。</target>
        </trans-unit>
        <trans-unit id="746eec2fe2a404a8fabc9e6abdf7648c07f8bc2b" translate="yes" xml:space="preserve">
          <source>It is undefined which thread receives this exception. GHC currently throws this to the same thread that receives &lt;code&gt;&lt;a href=&quot;control-exception#v:UserInterrupt&quot;&gt;UserInterrupt&lt;/a&gt;&lt;/code&gt;, but this may change in the future.</source>
          <target state="translated">この例外を受け取るスレッドは定義されていません。GHCは現在、これを &lt;code&gt;&lt;a href=&quot;control-exception#v:UserInterrupt&quot;&gt;UserInterrupt&lt;/a&gt;&lt;/code&gt; を受け取るのと同じスレッドにスローしますが、これは将来変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="d492c88d310512060b035b6ec8aa0a90e3614dfd" translate="yes" xml:space="preserve">
          <source>It is undefined which thread receives this exception. GHC currently throws this to the same thread that receives &lt;code&gt;&lt;a href=&quot;ghc-io-exception#v:UserInterrupt&quot;&gt;UserInterrupt&lt;/a&gt;&lt;/code&gt;, but this may change in the future.</source>
          <target state="translated">この例外を受け取るスレッドは定義されていません。GHCは現在、これを &lt;code&gt;&lt;a href=&quot;ghc-io-exception#v:UserInterrupt&quot;&gt;UserInterrupt&lt;/a&gt;&lt;/code&gt; を受け取るのと同じスレッドにスローしますが、これは将来変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="f6bfd659d3eb587c25350fe75cdd1cec239a674b" translate="yes" xml:space="preserve">
          <source>It is useful for GHC to optimise the definition of an INLINE function &lt;code&gt;f&lt;/code&gt; just like any other non-&lt;code&gt;INLINE&lt;/code&gt; function, in case the non-inlined version of &lt;code&gt;f&lt;/code&gt; is ultimately called. But we don&amp;rsquo;t want to inline the &lt;em&gt;optimised&lt;/em&gt; version of &lt;code&gt;f&lt;/code&gt;; a major reason for &lt;code&gt;INLINE&lt;/code&gt; pragmas is to expose functions in &lt;code&gt;f&lt;/code&gt;&amp;lsquo;s RHS that have rewrite rules, and it&amp;rsquo;s no good if those functions have been optimised away.</source>
          <target state="translated">インライン化されていないバージョンの &lt;code&gt;f&lt;/code&gt; が最終的に呼び出される場合に備えて、GHCが他の非 &lt;code&gt;INLINE&lt;/code&gt; 関数と同じように、インライン関数 &lt;code&gt;f&lt;/code&gt; の定義を最適化すると便利です。しかし、&lt;em&gt;最適化された&lt;/em&gt;バージョンの &lt;code&gt;f&lt;/code&gt; をインライン&lt;em&gt;化し&lt;/em&gt;たくありません。 &lt;code&gt;INLINE&lt;/code&gt; プラグマの主な理由は、リライトルールを持つ &lt;code&gt;f&lt;/code&gt; のRHS 内の関数を公開することであり、それらの関数が最適化されていない場合は良くありません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="257ce5275a4cb48ad40d9428d4ab5e66cc348fde" translate="yes" xml:space="preserve">
          <source>It is useful for GHC to optimise the definition of an INLINE function &lt;code&gt;f&lt;/code&gt; just like any other non-&lt;code&gt;INLINE&lt;/code&gt; function, in case the non-inlined version of &lt;code&gt;f&lt;/code&gt; is ultimately called. But we don&amp;rsquo;t want to inline the &lt;em&gt;optimised&lt;/em&gt; version of &lt;code&gt;f&lt;/code&gt;; a major reason for &lt;code&gt;INLINE&lt;/code&gt; pragmas is to expose functions in &lt;code&gt;f&lt;/code&gt;&amp;rsquo;s RHS that have rewrite rules, and it&amp;rsquo;s no good if those functions have been optimised away.</source>
          <target state="translated">インライン化されていないバージョンの &lt;code&gt;f&lt;/code&gt; が最終的に呼び出された場合に備えて、GHCが他の非 &lt;code&gt;INLINE&lt;/code&gt; 関数と同じようにインライン関数 &lt;code&gt;f&lt;/code&gt; の定義を最適化すると便利です。ただし、&lt;em&gt;最適化された&lt;/em&gt;バージョンの &lt;code&gt;f&lt;/code&gt; をインライン&lt;em&gt;化する&lt;/em&gt;必要はありません。 &lt;code&gt;INLINE&lt;/code&gt; プラグマの主な理由は、書き換えルールを持つ &lt;code&gt;f&lt;/code&gt; のRHSの関数を公開することであり、これらの関数が最適化されていない場合は適切ではありません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b3b833a6a7471fbafdafb50780dec24992986833" translate="yes" xml:space="preserve">
          <source>It is useful for modelling any computation that is allowed to fail.</source>
          <target state="translated">これは、失敗が許されるあらゆる計算をモデル化するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="bf84a0b4bca232dcfe172af6a8fe10d863549539" translate="yes" xml:space="preserve">
          <source>It is useful to think of &lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; not as a way to completely prevent asynchronous exceptions, but as a way to switch from asynchronous mode to polling mode. The main difficulty with asynchronous exceptions is that they normally can occur anywhere, but within a &lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; an asynchronous exception is only raised by operations that are interruptible (or call other interruptible operations). In many cases these operations may themselves raise exceptions, such as I/O errors, so the caller will usually be prepared to handle exceptions arising from the operation anyway. To perform an explicit poll for asynchronous exceptions inside &lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt;, use &lt;code&gt;&lt;a href=&quot;control-exception#v:allowInterrupt&quot;&gt;allowInterrupt&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; は、非同期例外を完全に防ぐ方法としてではなく、非同期モードからポーリングモードに切り替える方法として考えると便利です。非同期例外の主な問題は、通常、どこでも発生する可能性があることですが、 &lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; 内では、非同期例外は割り込み可能な操作（または他の割り込み可能な操作を呼び出す）によってのみ発生します。多くの場合、これらの操作自体がI / Oエラーなどの例外を発生させる可能性があるため、呼び出し元は通常、操作に起因する例外を処理する準備ができています。 &lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; 内の非同期例外の明示的なポーリングを実行するには、 &lt;code&gt;&lt;a href=&quot;control-exception#v:allowInterrupt&quot;&gt;allowInterrupt&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="def905b28141bd2cd23fb72f07484744ecd15628" translate="yes" xml:space="preserve">
          <source>It is worth noting that &lt;a href=&quot;#extension-UnliftedNewtypes&quot;&gt;&lt;code&gt;UnliftedNewtypes&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;not&lt;/em&gt; required to give the data families themselves return kinds involving &lt;code&gt;TYPE&lt;/code&gt;, such as the &lt;code&gt;FooKey&lt;/code&gt; and &lt;code&gt;BarType&lt;/code&gt; examples above. The extension is only required for &lt;code&gt;newtype instance&lt;/code&gt; declarations, such as &lt;code&gt;FooKeyBoolC&lt;/code&gt; and &lt;code&gt;BarTypeWorkRepC&lt;/code&gt; above.</source>
          <target state="translated">&lt;a href=&quot;#extension-UnliftedNewtypes&quot;&gt; &lt;code&gt;UnliftedNewtypes&lt;/code&gt; &lt;/a&gt;は、上記の &lt;code&gt;FooKey&lt;/code&gt; や &lt;code&gt;BarType&lt;/code&gt; の例のように、データファミリ自体に &lt;code&gt;TYPE&lt;/code&gt; を含む種類を返す必要が&lt;em&gt;ない&lt;/em&gt;ことに注意してください。拡張機能は、上記の &lt;code&gt;FooKeyBoolC&lt;/code&gt; や &lt;code&gt;BarTypeWorkRepC&lt;/code&gt; などの &lt;code&gt;newtype instance&lt;/code&gt; 宣言にのみ必要です。</target>
        </trans-unit>
        <trans-unit id="c498521723f8812e03fd4118ff670333ce430a6f" translate="yes" xml:space="preserve">
          <source>It is worth noting with shared objects, when each package is built as a single shared object file, since a reference to a shared object costs an extra indirection, intra-package references are cheaper than inter-package references. Of course, this applies to the &lt;code&gt;main&lt;/code&gt; package as well.</source>
          <target state="translated">共有オブジェクトへの参照は追加の間接参照を必要とするため、各パッケージが単一の共有オブジェクトファイルとして構築される場合、共有オブジェクトについては注目に値します。パッケージ内参照は、パッケージ間参照よりも安価です。もちろん、これは &lt;code&gt;main&lt;/code&gt; パッケージにも適用されます。</target>
        </trans-unit>
        <trans-unit id="54a6b23a21fda9c044fe0d97ce9ef235ca220f49" translate="yes" xml:space="preserve">
          <source>It isn&amp;rsquo;t always possible to terminate a Haskell thread forcibly: for example, the thread might be currently executing a foreign call, and we have no way to force the foreign call to complete. What&amp;rsquo;s more, the runtime must assume that in the worst case the Haskell code and runtime are about to be removed from memory (e.g. if this is a &lt;a href=&quot;../win32-dlls#win32-dlls&quot;&gt;Windows DLL&lt;/a&gt;, &lt;code&gt;hs_exit()&lt;/code&gt; is normally called before unloading the DLL). So &lt;code&gt;hs_exit()&lt;/code&gt;&lt;em&gt;must&lt;/em&gt; wait until all outstanding foreign calls return before it can return itself.</source>
          <target state="translated">Haskellスレッドを強制的に終了できるとは限りません。たとえば、スレッドが現在外部呼び出しを実行している可能性があり、外部呼び出しを強制的に完了する方法はありません。さらに、ランタイムは、最悪の場合、Haskellコードとランタイムがメモリから削除されようとしていると想定する必要があります（たとえば、これが&lt;a href=&quot;../win32-dlls#win32-dlls&quot;&gt;Windows DLLの&lt;/a&gt;場合、通常、DLLをアンロードする前に &lt;code&gt;hs_exit()&lt;/code&gt; が呼び出されます）。したがって、 &lt;code&gt;hs_exit()&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;、すべての未処理の外部呼び出しが戻るまで待機してから、それ自体を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="92ef842f60f53412417acbb9c342eaa7f4e2205c" translate="yes" xml:space="preserve">
          <source>It isn&amp;rsquo;t always possible to terminate a Haskell thread forcibly: for example, the thread might be currently executing a foreign call, and we have no way to force the foreign call to complete. What&amp;rsquo;s more, the runtime must assume that in the worst case the Haskell code and runtime are about to be removed from memory (e.g. if this is a &lt;a href=&quot;win32-dlls#win32-dlls&quot;&gt;Windows DLL&lt;/a&gt;, &lt;code&gt;hs_exit()&lt;/code&gt; is normally called before unloading the DLL). So &lt;code&gt;hs_exit()&lt;/code&gt;&lt;em&gt;must&lt;/em&gt; wait until all outstanding foreign calls return before it can return itself.</source>
          <target state="translated">Haskellスレッドを強制的に終了できるとは限りません。たとえば、スレッドが現在外部呼び出しを実行している可能性があり、外部呼び出しを強制的に完了する方法がありません。さらに、ランタイムは最悪の場合、Haskellコードとランタイムがメモリから削除されようとしていることを想定する必要があります（たとえば、これが&lt;a href=&quot;win32-dlls#win32-dlls&quot;&gt;Windows DLLの&lt;/a&gt;場合、DLLをアンロードする前に &lt;code&gt;hs_exit()&lt;/code&gt; が通常呼び出されます）。そのため、 &lt;code&gt;hs_exit()&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;、すべての未解決の外部呼び出しが戻るまで待機してから、自分自身を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="8458bc24663504817189be36256a7f90d9fdfdc9" translate="yes" xml:space="preserve">
          <source>It loops indefinitely; every time a key is pressed, it will print that key as it was recognized by Haskeline. Pressing Ctrl-C will stop the loop.</source>
          <target state="translated">キーが押されるたびに、そのキーが Haskeline で認識されたとおりに印刷されます。Ctrl-Cを押すとループが停止します。</target>
        </trans-unit>
        <trans-unit id="3e1f8368ea03e61951e96f7203ef6dd1ba202cc6" translate="yes" xml:space="preserve">
          <source>It may also output a C file which contains additional C functions to be linked into the program, together with a C header that gets included into the C code to which the Haskell module will be compiled (when compiled via C) and into the C file. These two files are created when the &lt;code&gt;#def&lt;/code&gt; construct is used (see below).</source>
          <target state="translated">また、HaskellモジュールがコンパイルされるCコード（C経由でコンパイルされた場合）およびCファイルに含まれるCヘッダーとともに、プログラムにリンクされる追加のC関数を含むCファイルを出力する場合もあります。 。これら2つのファイルは、 &lt;code&gt;#def&lt;/code&gt; コンストラクトが使用されたときに作成されます（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="d09779bd37727473434368e2def3ed2ba44679a3" translate="yes" xml:space="preserve">
          <source>It may appear tempting to use &lt;code&gt;DllMain&lt;/code&gt; to call &lt;code&gt;hs_init&lt;/code&gt;/&lt;code&gt;hs_exit&lt;/code&gt;, but this won&amp;rsquo;t work (particularly if you compile with &lt;code&gt;-threaded&lt;/code&gt;). There are severe restrictions on which actions can be performed during &lt;code&gt;DllMain&lt;/code&gt;, and &lt;code&gt;hs_init&lt;/code&gt; violates these restrictions, which can lead to your DLL freezing during startup (see &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/3605&quot;&gt;#3605&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;DllMain&lt;/code&gt; を使用して &lt;code&gt;hs_init&lt;/code&gt; / &lt;code&gt;hs_exit&lt;/code&gt; を呼び出したくなるように見えるかもしれませんが、これは機能しません（特に、 &lt;code&gt;-threaded&lt;/code&gt; を使用してコンパイルする場合）。 &lt;code&gt;DllMain&lt;/code&gt; 中に実行できるアクションには厳しい制限があり、 &lt;code&gt;hs_init&lt;/code&gt; はこれらの制限に違反しているため、起動時にDLLがフリーズする可能性があります（&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/3605&quot;&gt;＃3605を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="8136f6e215348988c49d3102c5c3052b920fc9de" translate="yes" xml:space="preserve">
          <source>It may appear tempting to use &lt;code&gt;DllMain&lt;/code&gt; to call &lt;code&gt;hs_init&lt;/code&gt;/&lt;code&gt;hs_exit&lt;/code&gt;, but this won&amp;rsquo;t work (particularly if you compile with &lt;code&gt;-threaded&lt;/code&gt;). There are severe restrictions on which actions can be performed during &lt;code&gt;DllMain&lt;/code&gt;, and &lt;code&gt;hs_init&lt;/code&gt; violates these restrictions, which can lead to your DLL freezing during startup (see &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/3605&quot;&gt;Issue #3605&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;DllMain&lt;/code&gt; を使用して &lt;code&gt;hs_init&lt;/code&gt; / &lt;code&gt;hs_exit&lt;/code&gt; を呼び出すのは魅力的ですが、これは機能しません（特に &lt;code&gt;-threaded&lt;/code&gt; でコンパイルする場合）。 &lt;code&gt;DllMain&lt;/code&gt; の実行中に実行できるアクションには厳しい制限があり、 &lt;code&gt;hs_init&lt;/code&gt; はこれらの制限に違反しているため、起動時にDLLがフリーズする可能性があります（&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/3605&quot;&gt;問題＃3605を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="863ecc94447ccc2697e7cef0c45280ea8b50466a" translate="yes" xml:space="preserve">
          <source>It may be useful to note that supposing</source>
          <target state="translated">と仮定すると便利なことがあります。</target>
        </trans-unit>
        <trans-unit id="f48419fb8305c7fcc0e8958cac1ac07d41e90892" translate="yes" xml:space="preserve">
          <source>It may still terminate under one of the following conditions:</source>
          <target state="translated">また、以下のいずれかの条件で終了することもあります。</target>
        </trans-unit>
        <trans-unit id="32c8a688305684e8a6eed99f28e0bf7debe34172" translate="yes" xml:space="preserve">
          <source>It might seem that &lt;a href=&quot;#ghci-cmd-:module&quot;&gt;&lt;code&gt;:module&lt;/code&gt;&lt;/a&gt;/&lt;code&gt;import&lt;/code&gt; and &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#ghci-cmd-:add&quot;&gt;&lt;code&gt;:add&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#ghci-cmd-:reload&quot;&gt;&lt;code&gt;:reload&lt;/code&gt;&lt;/a&gt; do similar things: you can use both to bring a module into scope. However, there is a very important difference. GHCi is concerned with two sets of modules:</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:module&quot;&gt; &lt;code&gt;:module&lt;/code&gt; &lt;/a&gt; / &lt;code&gt;import&lt;/code&gt; と&lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#ghci-cmd-:add&quot;&gt; &lt;code&gt;:add&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt; &lt;code&gt;:reload&lt;/code&gt; &lt;/a&gt;は同じようなことをするように見えるかもしれません：両方を使ってモジュールをスコープに入れることができます。ただし、非常に重要な違いがあります。GHCiは2組のモジュールに関係しています。</target>
        </trans-unit>
        <trans-unit id="8e2a509fc1a6cc8bacc29eac66f8d2b04611ec55" translate="yes" xml:space="preserve">
          <source>It must be that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; have the same kind. Note also that &lt;code&gt;b&lt;/code&gt; is implicitly declared in &lt;code&gt;c&lt;/code&gt;&amp;lsquo;s kind. Thus, according to our general principle, &lt;code&gt;b&lt;/code&gt; must come &lt;em&gt;before&lt;/em&gt;&lt;code&gt;k&lt;/code&gt;. However, &lt;code&gt;b&lt;/code&gt;&lt;em&gt;depends on&lt;/em&gt;&lt;code&gt;k&lt;/code&gt;. We thus reject &lt;code&gt;T2&lt;/code&gt; with a suitable error message.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; は同じ種類である必要があります。また、 &lt;code&gt;b&lt;/code&gt; は &lt;code&gt;c&lt;/code&gt; の種類で暗黙的に宣言されています。したがって、私たちの一般的な原理によれば、 &lt;code&gt;b&lt;/code&gt; は &lt;code&gt;k&lt;/code&gt; の&lt;em&gt;前に&lt;/em&gt;来る必要があります。ただし、 &lt;code&gt;b&lt;/code&gt; &lt;em&gt;は&lt;/em&gt; &lt;code&gt;k&lt;/code&gt; に&lt;em&gt;依存し&lt;/em&gt;ます。したがって、適切なエラーメッセージで &lt;code&gt;T2&lt;/code&gt; を拒否します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d71a3e4924a3c6c7be2ff4e99d0b3ace79cfc698" translate="yes" xml:space="preserve">
          <source>It must be that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; have the same kind. Note also that &lt;code&gt;b&lt;/code&gt; is implicitly declared in &lt;code&gt;c&lt;/code&gt;&amp;rsquo;s kind. Thus, according to our general principle, &lt;code&gt;b&lt;/code&gt; must come &lt;em&gt;before&lt;/em&gt;&lt;code&gt;k&lt;/code&gt;. However, &lt;code&gt;b&lt;/code&gt;&lt;em&gt;depends on&lt;/em&gt;&lt;code&gt;k&lt;/code&gt;. We thus reject &lt;code&gt;T2&lt;/code&gt; with a suitable error message.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; が同じ種類である必要があります。 &lt;code&gt;b&lt;/code&gt; は &lt;code&gt;c&lt;/code&gt; の種類で暗黙的に宣言されていることにも注意してください。したがって、私たちの一般原則によれば、 &lt;code&gt;b&lt;/code&gt; は &lt;code&gt;k&lt;/code&gt; の&lt;em&gt;前に&lt;/em&gt;来なければなりません。ただし、 &lt;code&gt;b&lt;/code&gt; &lt;em&gt;は&lt;/em&gt; &lt;code&gt;k&lt;/code&gt; に&lt;em&gt;依存し&lt;/em&gt;ます。したがって、適切なエラーメッセージで &lt;code&gt;T2&lt;/code&gt; を拒否します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6086959b33661c7e9581d7038f036b9687ffb684" translate="yes" xml:space="preserve">
          <source>It returns the number of bytes actually read. This may be zero if EOF was reached before any data was read (or if &lt;code&gt;count&lt;/code&gt; is zero).</source>
          <target state="translated">実際に読み取られたバイト数を返します。データが読み込まれる前にEOFに達した場合（または &lt;code&gt;count&lt;/code&gt; がゼロの場合）は、ゼロになることがあります。</target>
        </trans-unit>
        <trans-unit id="ad092a31e7b069ad5452e1dfd822db5e1ae8fc9d" translate="yes" xml:space="preserve">
          <source>It serves to keep the internal states of different invocations of &lt;code&gt;&lt;a href=&quot;control-monad-st#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt; separate from each other and from invocations of &lt;code&gt;&lt;a href=&quot;control-monad-st#v:stToIO&quot;&gt;stToIO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;control-monad-st#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt; のさまざまな呼び出しの内部状態を互いに分離したり、stToIOの呼び出しから分離したりするのに &lt;code&gt;&lt;a href=&quot;control-monad-st#v:stToIO&quot;&gt;stToIO&lt;/a&gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="211c65f9fdb230b192954d5e3e492b544e937b6c" translate="yes" xml:space="preserve">
          <source>It serves to keep the internal states of different invocations of &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt; separate from each other and from invocations of &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#v:stToIO&quot;&gt;stToIO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt; のさまざまな呼び出しの内部状態を互いに分離したり、stToIOの呼び出しから分離したりするのに &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#v:stToIO&quot;&gt;stToIO&lt;/a&gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="5294a2ca52cc071e8a324a9f8f6ff0a8cae15e2b" translate="yes" xml:space="preserve">
          <source>It serves to keep the internal states of different invocations of &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt; separate from each other and from invocations of &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#v:stToIO&quot;&gt;stToIO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt; のさまざまな呼び出しの内部状態を互いに分離したり、stToIOの呼び出しから分離したりするのに &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#v:stToIO&quot;&gt;stToIO&lt;/a&gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="2289a3219a1ed755ecc57cda3383343eb8709ef1" translate="yes" xml:space="preserve">
          <source>It serves to keep the internal states of different invocations of &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt; separate from each other and from invocations of &lt;code&gt;&lt;a href=&quot;control-monad-st#v:stToIO&quot;&gt;stToIO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt; のさまざまな呼び出しの内部状態を互いに分離したり、stToIOの呼び出しから分離したりするのに &lt;code&gt;&lt;a href=&quot;control-monad-st#v:stToIO&quot;&gt;stToIO&lt;/a&gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="b435c38ec10dc76b668c9ec854526a598ebffc36" translate="yes" xml:space="preserve">
          <source>It serves to keep the internal states of different invocations of &lt;code&gt;&lt;a href=&quot;ghc-st#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt; separate from each other and from invocations of &lt;code&gt;&lt;a href=&quot;control-monad-st#v:stToIO&quot;&gt;stToIO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;ghc-st#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt; のさまざまな呼び出しの内部状態を互いに分離したり、stToIOの呼び出しから分離したりするのに &lt;code&gt;&lt;a href=&quot;control-monad-st#v:stToIO&quot;&gt;stToIO&lt;/a&gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="29550fa0ca4c9e4aac212d854a9fc9caacdfa683" translate="yes" xml:space="preserve">
          <source>It turns out that such recursive bindings do indeed make sense for a variety of monads, but not all. In particular, recursion in this sense requires a fixed-point operator for the underlying monad, captured by the &lt;code&gt;mfix&lt;/code&gt; method of the &lt;code&gt;MonadFix&lt;/code&gt; class, defined in &lt;code&gt;Control.Monad.Fix&lt;/code&gt; as follows:</source>
          <target state="translated">このような再帰的なバインディングは、実際にはさまざまなモナドに意味がありますが、すべてに意味があるわけではありません。特に、この意味での再帰には、 &lt;code&gt;Control.Monad.Fix&lt;/code&gt; で次のように定義された、 &lt;code&gt;MonadFix&lt;/code&gt; クラスの &lt;code&gt;mfix&lt;/code&gt; メソッドによってキャプチャされた、基になるモナドの固定小数点演算子が必要です。</target>
        </trans-unit>
        <trans-unit id="dc2967b7223e4a80cc2b7ede4a86ad6f728237bf" translate="yes" xml:space="preserve">
          <source>It was allocated by &lt;code&gt;newPinnedByteArray#&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;newPinnedByteArray#&lt;/code&gt; によって割り当てられました。</target>
        </trans-unit>
        <trans-unit id="c5052bd2b0b2688526179e347a8f93097a86fbaf" translate="yes" xml:space="preserve">
          <source>It will create &lt;code&gt;.ghci-history&lt;/code&gt; in current folder where GHCi is launched.</source>
          <target state="translated">GHCiが起動される現在のフォルダーに &lt;code&gt;.ghci-history&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="e89d7af8e2aa6670470982a682725f5658cf083d" translate="yes" xml:space="preserve">
          <source>It will then pass the individual entries and pairs of entries to &lt;code&gt;g1&lt;/code&gt;, &lt;code&gt;g2&lt;/code&gt;, or &lt;code&gt;f&lt;/code&gt; as appropriate:</source>
          <target state="translated">次に、必要に応じて、個々のエントリとエントリのペアを &lt;code&gt;g1&lt;/code&gt; 、 &lt;code&gt;g2&lt;/code&gt; 、または &lt;code&gt;f&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="1540cae372d4d44e85661059bc790134f5ab7b8e" translate="yes" xml:space="preserve">
          <source>It would be better for GHCi to record what the default settings in each module are, and use those of the &amp;lsquo;current&amp;rsquo; module (whatever that is).</source>
          <target state="translated">GHCiが各モジュールのデフォルト設定を記録し、「現在の」モジュールの設定（それが何であれ）を使用する方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="7f8111ac56899714c85e5abca35105627760e1bf" translate="yes" xml:space="preserve">
          <source>It would be quite sensible to &lt;em&gt;compile&lt;/em&gt; on a fast machine using remotely-mounted disks; then &lt;em&gt;link&lt;/em&gt; on a slow machine that had your disks directly mounted.</source>
          <target state="translated">リモートでマウントされたディスクを使用して高速マシンで&lt;em&gt;コンパイルするの&lt;/em&gt;はかなり賢明でしょう。次に、ディスクが直接マウントされている低速のマシンに&lt;em&gt;リンク&lt;/em&gt;します。</target>
        </trans-unit>
        <trans-unit id="8a7b6b7d9f87d44e8662ce4bef918aef2f8488ae" translate="yes" xml:space="preserve">
          <source>It would be undesirable if &lt;a href=&quot;exts/let_generalisation#extension-MonoLocalBinds&quot;&gt;&lt;code&gt;MonoLocalBinds&lt;/code&gt;&lt;/a&gt; were to apply to loaded modules too: that might cause a compilation error, but more commonly it will cause extra recompilation, because GHC will think that it needs to recompile the module because the flags have changed.</source>
          <target state="translated">読み込まれたモジュールにも&lt;a href=&quot;exts/let_generalisation#extension-MonoLocalBinds&quot;&gt; &lt;code&gt;MonoLocalBinds&lt;/code&gt; &lt;/a&gt;を適用するのは望ましくありません。コンパイルエラーが発生する可能性がありますが、フラグが変更されたためにGHCがモジュールを再コンパイルする必要があると考えるため、より一般的には余分な再コンパイルが発生します。</target>
        </trans-unit>
        <trans-unit id="763a82435cb1c586af5397dec827eab8a6fea09e" translate="yes" xml:space="preserve">
          <source>It would be undesirable if &lt;a href=&quot;glasgow_exts#extension-MonoLocalBinds&quot;&gt;&lt;code&gt;MonoLocalBinds&lt;/code&gt;&lt;/a&gt; were to apply to loaded modules too: that might cause a compilation error, but more commonly it will cause extra recompilation, because GHC will think that it needs to recompile the module because the flags have changed.</source>
          <target state="translated">ロードされたモジュールに&lt;a href=&quot;glasgow_exts#extension-MonoLocalBinds&quot;&gt; &lt;code&gt;MonoLocalBinds&lt;/code&gt; &lt;/a&gt;を適用することも望ましくありません。コンパイルエラーが発生する可能性がありますが、フラグが変更されたためにGHCがモジュールを再コンパイルする必要があると考えるため、通常は追加の再コンパイルが発生します。</target>
        </trans-unit>
        <trans-unit id="738c3efaf58c34fc713cd68ed8f30d5430283ea5" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s all the better if a function is strict in a single-constructor type (a type with only one data-constructor; for example, tuples are single-constructor types).</source>
          <target state="translated">関数が単一コンストラクター型（データコンストラクターが1つしかない型。たとえば、タプルは単一コンストラクター型である）で関数が厳密である場合、それはさらに優れています。</target>
        </trans-unit>
        <trans-unit id="7aca502a5780a7008e4ab06793361208292555d4" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s also possible to have mutually recursive bindings, using the new &lt;code&gt;rec&lt;/code&gt; keyword, as in the following example:</source>
          <target state="translated">次の例のように、新しい &lt;code&gt;rec&lt;/code&gt; キーワードを使用して、相互に再帰的なバインディングを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="923f83a378500c5bf707083388bd8a5d2d3dc878" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s ok to say &lt;code&gt;a==b&lt;/code&gt; or &lt;code&gt;p==q&lt;/code&gt;, but &lt;code&gt;a==q&lt;/code&gt; is wrong because it equates the two distinct types arising from the two &lt;code&gt;Baz1&lt;/code&gt; constructors.</source>
          <target state="translated">&lt;code&gt;a==b&lt;/code&gt; または &lt;code&gt;p==q&lt;/code&gt; と言っても問題ありませんが &lt;code&gt;a==q&lt;/code&gt; は2つの &lt;code&gt;Baz1&lt;/code&gt; コンストラクターから生じる2つの異なる型と同等であるため、誤りです。</target>
        </trans-unit>
        <trans-unit id="f7c6fdc0025c696839bbcb4d3a4afbd97412dcd6" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s ugly and slow.</source>
          <target state="translated">醜くて遅いです。</target>
        </trans-unit>
        <trans-unit id="514128120e37ddc76a0f201865baee5082dd51ad" translate="yes" xml:space="preserve">
          <source>It's recommended to avoid calling &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:exportIntegerToMutableByteArray&quot;&gt;exportIntegerToMutableByteArray&lt;/a&gt;&lt;/code&gt; for small integers as this function would currently convert those to big integers in msbf to call &lt;code&gt;mpz_export()&lt;/code&gt;.</source>
          <target state="translated">この関数は現在、これらをmsbfの大きな整数に変換して &lt;code&gt;mpz_export()&lt;/code&gt; を呼び出すため、小さな整数に対して &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:exportIntegerToMutableByteArray&quot;&gt;exportIntegerToMutableByteArray&lt;/a&gt;&lt;/code&gt; を呼び出さないようにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="7cee3c6301483587eda64e5ab687af2ed85576f1" translate="yes" xml:space="preserve">
          <source>It's worth noting that the size of the result may be smaller if, for some &lt;code&gt;(x,y)&lt;/code&gt;, &lt;code&gt;x /= y &amp;amp;&amp;amp; f x == f y&lt;/code&gt;</source>
          <target state="translated">一部の &lt;code&gt;(x,y)&lt;/code&gt; 、 &lt;code&gt;x /= y &amp;amp;&amp;amp; f x == f y&lt;/code&gt; 場合、結果のサイズが小さくなる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ee6ff3dfa9bf63053b4c7f482ac4fa5228abd4d4" translate="yes" xml:space="preserve">
          <source>Item (IsList)</source>
          <target state="translated">項目 (IsList)</target>
        </trans-unit>
        <trans-unit id="091b8d78ec3176b66348479ab0a7eba113756aa7" translate="yes" xml:space="preserve">
          <source>Iter</source>
          <target state="translated">Iter</target>
        </trans-unit>
        <trans-unit id="912a927d3c272044f83f97a4a9348c2b0b737b5e" translate="yes" xml:space="preserve">
          <source>Iterative construction</source>
          <target state="translated">反復構築</target>
        </trans-unit>
        <trans-unit id="15efe73a427c5593245c3e378d2d1f213eb9ce90" translate="yes" xml:space="preserve">
          <source>Ix</source>
          <target state="translated">Ix</target>
        </trans-unit>
        <trans-unit id="c00d287ecb04edccb5fea26b5b72064393528f73" translate="yes" xml:space="preserve">
          <source>J. Nievergelt and E.M. Reingold, &quot;&lt;em&gt;Binary search trees of bounded balance&lt;/em&gt;&quot;, SIAM journal of computing 2(1), March 1973.</source>
          <target state="translated">J. NievergeltとEM Reingold、「&lt;em&gt;有界バランスのバイナリ検索ツリー&lt;/em&gt;」、SIAMジャーナルオブコンピューティング2（1）、1973年3月。</target>
        </trans-unit>
        <trans-unit id="ee620923ff5fc510555dc37083a135ee93b5404b" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="translated">JavaScript</target>
        </trans-unit>
        <trans-unit id="13f21e57d0b030c88aa84181b98abab96e4c801a" translate="yes" xml:space="preserve">
          <source>JavaScriptFFI</source>
          <target state="translated">JavaScriptFFI</target>
        </trans-unit>
        <trans-unit id="35f6feec54354858f697f87aaa0e0984f56e1720" translate="yes" xml:space="preserve">
          <source>Johan Tibell &amp;lt;johan.tibell@gmail.com&amp;gt;</source>
          <target state="translated">ヨハンティベル&amp;lt;johan.tibell@gmail.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="136e9e756d575af36e49778c9cc45e9f8a0f90f2" translate="yes" xml:space="preserve">
          <source>Join a drive and the rest of the path.</source>
          <target state="translated">ドライブと残りの道に参加してください。</target>
        </trans-unit>
        <trans-unit id="81e4e655a28bbcb077ce4558a222bf0f0a8cba3c" translate="yes" xml:space="preserve">
          <source>Join path elements back together.</source>
          <target state="translated">パスの要素をつなぎ合わせます。</target>
        </trans-unit>
        <trans-unit id="382ff1702ad460b913c77bbc040227d10fae8bb9" translate="yes" xml:space="preserve">
          <source>Jose Pedro Magalhaes, Atze Dijkstra, Johan Jeuring, and Andres Loeh. &lt;a href=&quot;http://dreixel.net/research/pdf/gdmh.pdf&quot;&gt;A generic deriving mechanism for Haskell&lt;/a&gt;. Proceedings of the third ACM Haskell symposium on Haskell (Haskell&amp;lsquo;2010), pp. 37-48, ACM, 2010.</source>
          <target state="translated">ホセ・ペドロ・マガリャエス、アツェ・ダイクストラ、ヨハン・ジューリング、アンドレス・レー。&lt;a href=&quot;http://dreixel.net/research/pdf/gdmh.pdf&quot;&gt;Haskellの一般的な派生メカニズム&lt;/a&gt;。Haskellに関する第3回ACM Haskellシンポジウムの議事録（Haskell'2010）、37-48ページ、ACM、2010年。</target>
        </trans-unit>
        <trans-unit id="8cce6d3a7b7f612b30abbeb5c7bc5be263acd7cb" translate="yes" xml:space="preserve">
          <source>Jose Pedro Magalhaes, Atze Dijkstra, Johan Jeuring, and Andres Loeh. &lt;a href=&quot;http://dreixel.net/research/pdf/gdmh.pdf&quot;&gt;A generic deriving mechanism for Haskell&lt;/a&gt;. Proceedings of the third ACM Haskell symposium on Haskell (Haskell&amp;rsquo;2010), pp. 37-48, ACM, 2010.</source>
          <target state="translated">Jose Pedro Magalhaes, Atze Dijkstra, Johan Jeuring, and Andres Loeh. &lt;a href=&quot;http://dreixel.net/research/pdf/gdmh.pdf&quot;&gt;A generic deriving mechanism for Haskell&lt;/a&gt;. Proceedings of the third ACM Haskell symposium on Haskell (Haskell&amp;rsquo;2010), pp. 37-48, ACM, 2010.</target>
        </trans-unit>
        <trans-unit id="9361b1c736dd39f64c18be1fbaf85ce313be120e" translate="yes" xml:space="preserve">
          <source>Jules Hedges. &quot;Monad transformers for backtracking search&quot;. In &lt;em&gt;Proceedings of MSFP 2014&lt;/em&gt;. &lt;a href=&quot;https://arxiv.org/abs/1406.2058&quot;&gt;https://arxiv.org/abs/1406.2058&lt;/a&gt;</source>
          <target state="translated">ジュール・ヘッジス。「バックトラック検索のためのモナド変換器」。で&lt;em&gt;MSFP 2014の議事&lt;/em&gt;。&lt;a href=&quot;https://arxiv.org/abs/1406.2058&quot;&gt;https://arxiv.org/abs/1406.2058&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6e1532d85b8e7a783cd0eeb4f032f73947230558" translate="yes" xml:space="preserve">
          <source>Just as &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:splitPath&quot;&gt;splitPath&lt;/a&gt;&lt;/code&gt;, but don't add the trailing slashes to each element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:splitPath&quot;&gt;splitPath&lt;/a&gt;&lt;/code&gt; と同じですが、各要素に末尾のスラッシュを追加しないでください。</target>
        </trans-unit>
        <trans-unit id="e1b8cd9be8a4a56d3e279168c48e322c5a8f7d5f" translate="yes" xml:space="preserve">
          <source>Just as &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:splitPath&quot;&gt;splitPath&lt;/a&gt;&lt;/code&gt;, but don't add the trailing slashes to each element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:splitPath&quot;&gt;splitPath&lt;/a&gt;&lt;/code&gt; と同じですが、各要素に末尾のスラッシュを追加しないでください。</target>
        </trans-unit>
        <trans-unit id="bf4d570e4ce8e1639edd6b13c9e338ab1cfd25c6" translate="yes" xml:space="preserve">
          <source>Just as compiling &lt;code&gt;A.hs&lt;/code&gt; produces an interface file &lt;code&gt;A.hi&lt;/code&gt;, and an object file &lt;code&gt;A.o&lt;/code&gt;, so compiling &lt;code&gt;A.hs-boot&lt;/code&gt; produces an interface file &lt;code&gt;A.hi-boot&lt;/code&gt;, and a pseudo-object file &lt;code&gt;A.o-boot&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;A.hs&lt;/code&gt; をコンパイルするとインターフェースファイル &lt;code&gt;A.hi&lt;/code&gt; とオブジェクトファイル &lt;code&gt;A.o&lt;/code&gt; 生成されるのと &lt;code&gt;A.hs-boot&lt;/code&gt; ように、A.hs-bootをコンパイルするとインターフェースファイル &lt;code&gt;A.hi-boot&lt;/code&gt; と疑似オブジェクトファイル &lt;code&gt;A.o-boot&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a7ab736e2bc63d2763e588e9ee6e30408ceb5d71" translate="yes" xml:space="preserve">
          <source>Just as in the case of Template Haskell (&lt;a href=&quot;#th-syntax&quot;&gt;Syntax&lt;/a&gt;), GHC gets confused if you put a quote mark before a data constructor whose second character is a quote mark. In this case, just put a space between the promotion quote and the data constructor:</source>
          <target state="translated">テンプレートHaskell（&lt;a href=&quot;#th-syntax&quot;&gt;Syntax&lt;/a&gt;）の場合と同様に、2番目の文字が引用符であるデータコンストラクターの前に引用符を置くと、GHCは混乱します。この場合、プロモーションの見積もりとデータコンストラクターの間にスペースを入れるだけです。</target>
        </trans-unit>
        <trans-unit id="2870800735c79017eac1d692e6e01d1292a30d03" translate="yes" xml:space="preserve">
          <source>Just as in the case of Template Haskell (&lt;a href=&quot;template_haskell#th-syntax&quot;&gt;Syntax&lt;/a&gt;), GHC gets confused if you put a quote mark before a data constructor whose second character is a quote mark. In this case, just put a space between the promotion quote and the data constructor:</source>
          <target state="translated">Template Haskell（&lt;a href=&quot;template_haskell#th-syntax&quot;&gt;構文&lt;/a&gt;）の場合と同様に、2番目の文字が引用符であるデータコンストラクターの前に引用符を置くと、GHCは混乱します。この場合、プロモーション見積もりとデータコンストラクターの間にスペースを入れるだけです。</target>
        </trans-unit>
        <trans-unit id="5b2209ab2f057867c4513a2da5e88701a39853ef" translate="yes" xml:space="preserve">
          <source>Just as in type inference, kind inference for recursive types can only use &lt;em&gt;monomorphic&lt;/em&gt; recursion. Consider this (contrived) example:</source>
          <target state="translated">型推論と同様に、再帰型の種推論では&lt;em&gt;単相&lt;/em&gt;再帰のみを使用できます。次の（不自然な）例を考えてみます。</target>
        </trans-unit>
        <trans-unit id="960a74070ce7ace8facd72bd4167a0b45f8388db" translate="yes" xml:space="preserve">
          <source>Just as you wouldn&amp;rsquo;t define a &lt;code&gt;Monad&lt;/code&gt; instance using the do-notation, you shouldn&amp;rsquo;t define &lt;code&gt;Functor&lt;/code&gt; or &lt;code&gt;Applicative&lt;/code&gt; instance using do-notation (when using &lt;code&gt;ApplicativeDo&lt;/code&gt;) either. The correct way to define these instances in terms of &lt;code&gt;Monad&lt;/code&gt; is to use the &lt;code&gt;Monad&lt;/code&gt; operations directly, e.g.</source>
          <target state="translated">do-notationを使用して &lt;code&gt;Monad&lt;/code&gt; インスタンスを定義しないのと同様に、（ &lt;code&gt;ApplicativeDo&lt;/code&gt; を使用する場合）do-notationを使用して &lt;code&gt;Functor&lt;/code&gt; または &lt;code&gt;Applicative&lt;/code&gt; インスタンスも定義しないでください。これらのインスタンスを &lt;code&gt;Monad&lt;/code&gt; で定義する正しい方法は、 &lt;code&gt;Monad&lt;/code&gt; 演算を直接使用することです。たとえば、</target>
        </trans-unit>
        <trans-unit id="4b041bcf3276487951d5811d4b81addad99a067a" translate="yes" xml:space="preserve">
          <source>Just like signatures on value-level bindings, pattern synonym signatures can apply to more than one pattern. For instance,</source>
          <target state="translated">値レベルバインディングのシグネチャと同様に、パターン同義語シグネチャは複数のパターンに適用することができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7774d2f3942adcf9419122bc33bb2393a5f13dbf" translate="yes" xml:space="preserve">
          <source>Just like the other types of plugins, you can write &lt;code&gt;DynFlags&lt;/code&gt; plugins that can take and make use of some options that you can then specify using the &lt;code&gt;-fplugin-opt&lt;/code&gt; flag. In the &lt;code&gt;DynFlagsPlugin&lt;/code&gt; code from above, the said options would be available in the &lt;code&gt;opts&lt;/code&gt; argument of &lt;code&gt;hooksP&lt;/code&gt;.</source>
          <target state="translated">Just like the other types of plugins, you can write &lt;code&gt;DynFlags&lt;/code&gt; plugins that can take and make use of some options that you can then specify using the &lt;code&gt;-fplugin-opt&lt;/code&gt; flag. In the &lt;code&gt;DynFlagsPlugin&lt;/code&gt; code from above, the said options would be available in the &lt;code&gt;opts&lt;/code&gt; argument of &lt;code&gt;hooksP&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="985acf2ff25e349dcabef121160378e3f752037f" translate="yes" xml:space="preserve">
          <source>Just like unsafePerformIO, but we inline it. Big performance gains as it exposes lots of things to further inlining. &lt;em&gt;Very unsafe&lt;/em&gt;. In particular, you should do no memory allocation inside an &lt;code&gt;&lt;a href=&quot;data-text-internal-unsafe#v:inlinePerformIO&quot;&gt;inlinePerformIO&lt;/a&gt;&lt;/code&gt; block. On Hugs this is just &lt;code&gt;unsafePerformIO&lt;/code&gt;.</source>
          <target state="translated">unsafePerformIOと同じですが、インライン化します。多くのものがさらにインライン化されるため、パフォーマンスが大幅に向上します。&lt;em&gt;非常に危険&lt;/em&gt;です。特に、 &lt;code&gt;&lt;a href=&quot;data-text-internal-unsafe#v:inlinePerformIO&quot;&gt;inlinePerformIO&lt;/a&gt;&lt;/code&gt; ブロック内ではメモリ割り当てを行わないでください。Hugsでは、これは単に &lt;code&gt;unsafePerformIO&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2fe74271062cab89acca9c50f817b98e381da7a1" translate="yes" xml:space="preserve">
          <source>Just like unsafePerformIO, but we inline it. Big performance gains as it exposes lots of things to further inlining. &lt;em&gt;Very unsafe&lt;/em&gt;. In particular, you should do no memory allocation inside an &lt;code&gt;&lt;a href=&quot;data-text-unsafe#v:inlinePerformIO&quot;&gt;inlinePerformIO&lt;/a&gt;&lt;/code&gt; block. On Hugs this is just &lt;code&gt;unsafePerformIO&lt;/code&gt;.</source>
          <target state="translated">unsafePerformIOと同じですが、インライン化します。多くのものがさらにインライン化されるため、パフォーマンスが大幅に向上します。&lt;em&gt;非常に危険&lt;/em&gt;です。特に、 &lt;code&gt;&lt;a href=&quot;data-text-unsafe#v:inlinePerformIO&quot;&gt;inlinePerformIO&lt;/a&gt;&lt;/code&gt; ブロック内ではメモリ割り当てを行わないでください。Hugsでは、これは単に &lt;code&gt;unsafePerformIO&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7a6159003781d783ae2d3e51421957681ceabbb1" translate="yes" xml:space="preserve">
          <source>Just x =&amp;gt; creates the file with the given modes, Nothing =&amp;gt; the file must exist.</source>
          <target state="translated">x =&amp;gt;は指定されたモードでファイルを作成し、Nothing =&amp;gt;ファイルは存在する必要があります。</target>
        </trans-unit>
        <trans-unit id="7d2a7bff0abb0d0de4946434ea191a1498465dec" translate="yes" xml:space="preserve">
          <source>Justification</source>
          <target state="translated">Justification</target>
        </trans-unit>
        <trans-unit id="f0cab9d2f956f8044d800c15b8fc3a101bddd6b9" translate="yes" xml:space="preserve">
          <source>K1</source>
          <target state="translated">K1</target>
        </trans-unit>
        <trans-unit id="8db55d0eb9679e9399434774b00bd1464da87b23" translate="yes" xml:space="preserve">
          <source>KProxy</source>
          <target state="translated">KProxy</target>
        </trans-unit>
        <trans-unit id="39150f84927b15fbfb438bdbe30c28313b7dab8c" translate="yes" xml:space="preserve">
          <source>Keep intermediate &lt;code&gt;.hc&lt;/code&gt; files when doing &lt;code&gt;.hs&lt;/code&gt;-to-&lt;code&gt;.o&lt;/code&gt; compilations via &lt;a href=&quot;codegens#c-code-gen&quot;&gt;C&lt;/a&gt; (Note: &lt;code&gt;.hc&lt;/code&gt; files are only generated by &lt;a href=&quot;codegens#unreg&quot;&gt;unregisterised&lt;/a&gt; compilers).</source>
          <target state="translated">&lt;a href=&quot;codegens#c-code-gen&quot;&gt;C&lt;/a&gt;を介して &lt;code&gt;.hs&lt;/code&gt; -to- &lt;code&gt;.o&lt;/code&gt; コンパイルを行うときは、中間の &lt;code&gt;.hc&lt;/code&gt; ファイルを保持します（注： &lt;code&gt;.hc&lt;/code&gt; ファイルは&lt;a href=&quot;codegens#unreg&quot;&gt;未登録の&lt;/a&gt;コンパイラーによってのみ生成されます）。</target>
        </trans-unit>
        <trans-unit id="0e96ed700c728faa5ce093e2ef58af4b206c758f" translate="yes" xml:space="preserve">
          <source>Keep intermediate &lt;code&gt;.hi&lt;/code&gt; files. This is the default. You may use &lt;code&gt;-no-keep-hi-files&lt;/code&gt; if you are not interested in the &lt;code&gt;.hi&lt;/code&gt; files.</source>
          <target state="translated">中間の &lt;code&gt;.hi&lt;/code&gt; ファイルを保持します。これがデフォルトです。 &lt;code&gt;.hi&lt;/code&gt; ファイルに関心がない場合は、 &lt;code&gt;-no-keep-hi-files&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="65a6fabb3b1fdedf128544cf6e03be19810249f5" translate="yes" xml:space="preserve">
          <source>Keep intermediate &lt;code&gt;.ll&lt;/code&gt; files when doing &lt;code&gt;.hs&lt;/code&gt;-to-&lt;code&gt;.o&lt;/code&gt; compilations via &lt;a href=&quot;codegens#llvm-code-gen&quot;&gt;LLVM&lt;/a&gt; (Note: &lt;code&gt;.ll&lt;/code&gt; files aren&amp;rsquo;t generated when using the native code generator, you may need to use &lt;a href=&quot;phases#ghc-flag--fllvm&quot;&gt;&lt;code&gt;-fllvm&lt;/code&gt;&lt;/a&gt; to force them to be produced).</source>
          <target state="translated">中間キープ &lt;code&gt;.ll&lt;/code&gt; 実行時にファイルを &lt;code&gt;.hs&lt;/code&gt; -to- &lt;code&gt;.o&lt;/code&gt; のコンパイルを経由して&lt;a href=&quot;codegens#llvm-code-gen&quot;&gt;LLVM&lt;/a&gt;（注： &lt;code&gt;.ll&lt;/code&gt; ファイルが生成されていないネイティブコード生成器を使用しているとき、あなたは使用する必要があるかもしれませ&lt;a href=&quot;phases#ghc-flag--fllvm&quot;&gt; &lt;code&gt;-fllvm&lt;/code&gt; &lt;/a&gt;生産することを強制します）。</target>
        </trans-unit>
        <trans-unit id="bb4eaab08ea50b174cad4a0dcbfee09ebe256732" translate="yes" xml:space="preserve">
          <source>Keep intermediate &lt;code&gt;.o&lt;/code&gt; files. This is the default. You may use &lt;code&gt;-no-keep-o-files&lt;/code&gt; if you are not interested in the &lt;code&gt;.o&lt;/code&gt; files.</source>
          <target state="translated">中間の &lt;code&gt;.o&lt;/code&gt; ファイルを保持します。これがデフォルトです。 &lt;code&gt;.o&lt;/code&gt; ファイルに関心がない場合は、 &lt;code&gt;-no-keep-o-files&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="8891247972e540d00a82a48db690001e72e39435" translate="yes" xml:space="preserve">
          <source>Keep intermediate &lt;code&gt;.s&lt;/code&gt; files.</source>
          <target state="translated">中間の &lt;code&gt;.s&lt;/code&gt; ファイルを保持します。</target>
        </trans-unit>
        <trans-unit id="618d7b66d0a5da454a76c61a106bbc8b386980c1" translate="yes" xml:space="preserve">
          <source>Keep only the groups in which at least one of the classes is an &lt;strong&gt;interactive class&lt;/strong&gt; (defined below).</source>
          <target state="translated">少なくとも1つのクラスが&lt;strong&gt;インタラクティブクラス&lt;/strong&gt;（以下で定義）であるグループのみを保持します。</target>
        </trans-unit>
        <trans-unit id="db48f9adf54739f6c307652ccc128abe44ee55b6" translate="yes" xml:space="preserve">
          <source>Keep the output of the &lt;code&gt;CPP&lt;/code&gt; pre-processor phase as &lt;code&gt;.hscpp&lt;/code&gt; files. A &lt;code&gt;.hscpp&lt;/code&gt; file is only created, if a module gets compiled and uses the C pre-processor.</source>
          <target state="translated">&lt;code&gt;CPP&lt;/code&gt; プリプロセッサフ​​ェーズの出力を &lt;code&gt;.hscpp&lt;/code&gt; ファイルとして保持します。 &lt;code&gt;.hscpp&lt;/code&gt; のモジュールをコンパイルし、Cプリプロセッサを使用して取得する場合、ファイルにのみ、生成されます。</target>
        </trans-unit>
        <trans-unit id="c67dd20ee842986086a0a915ddc2a279490130ed" translate="yes" xml:space="preserve">
          <source>Key</source>
          <target state="translated">Key</target>
        </trans-unit>
        <trans-unit id="45185a850411c05190d8644455ed7e28be79f32f" translate="yes" xml:space="preserve">
          <source>Key arguments are evaluated to WHNF</source>
          <target state="translated">キー引数はWHNFに評価されます。</target>
        </trans-unit>
        <trans-unit id="108b398a8a710d3b21b74c853623729fec5c66a8" translate="yes" xml:space="preserve">
          <source>KeyboardInterrupts</source>
          <target state="translated">KeyboardInterrupts</target>
        </trans-unit>
        <trans-unit id="7b932e7704c56ac279074adf9cbeed98bb90a289" translate="yes" xml:space="preserve">
          <source>Kill</source>
          <target state="translated">Kill</target>
        </trans-unit>
        <trans-unit id="e00ac23f2ac2ff73ad4f3c4b263d6c5bbfb80190" translate="yes" xml:space="preserve">
          <source>Kind</source>
          <target state="translated">Kind</target>
        </trans-unit>
        <trans-unit id="f6f11ccdb22e9dbd420ca8b73fb865e1a73beb02" translate="yes" xml:space="preserve">
          <source>Kind heterogeneous propositional equality. Like &lt;code&gt;&lt;a href=&quot;data-type-equality#t::-126-:&quot;&gt;:~:&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;a :~~: b&lt;/code&gt; is inhabited by a terminating value if and only if &lt;code&gt;a&lt;/code&gt; is the same type as &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">種類の異なる命題の平等。同様に &lt;code&gt;&lt;a href=&quot;data-type-equality#t::-126-:&quot;&gt;:~:&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;a :~~: b&lt;/code&gt; 場合に限り、終端値が住んでと同じタイプである &lt;code&gt;b&lt;/code&gt; が。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9add9e559da1de515054945468cae650868cb37" translate="yes" xml:space="preserve">
          <source>Kind heterogeneous propositional equality. Like &lt;code&gt;&lt;a href=&quot;data-typeable#t::-126-:&quot;&gt;:~:&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;a :~~: b&lt;/code&gt; is inhabited by a terminating value if and only if &lt;code&gt;a&lt;/code&gt; is the same type as &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">種類の異なる命題の平等。同様に &lt;code&gt;&lt;a href=&quot;data-typeable#t::-126-:&quot;&gt;:~:&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;a :~~: b&lt;/code&gt; 場合に限り、終端値が住んでと同じタイプである &lt;code&gt;b&lt;/code&gt; が。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2b9fefce453a09c064d0416bf50a8fdee9b8f03a" translate="yes" xml:space="preserve">
          <source>Kind heterogeneous propositional equality. Like &lt;code&gt;&lt;a href=&quot;type-reflection#t::-126-:&quot;&gt;:~:&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;a :~~: b&lt;/code&gt; is inhabited by a terminating value if and only if &lt;code&gt;a&lt;/code&gt; is the same type as &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">種類の異なる命題の平等。同様に &lt;code&gt;&lt;a href=&quot;type-reflection#t::-126-:&quot;&gt;:~:&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;a :~~: b&lt;/code&gt; 場合に限り、終端値が住んでと同じタイプである &lt;code&gt;b&lt;/code&gt; が。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1e2202b3014628a192e63059a442e7689aab808a" translate="yes" xml:space="preserve">
          <source>Kind of filling or padding to be done.</source>
          <target state="translated">詰め物や詰め物のようなもの。</target>
        </trans-unit>
        <trans-unit id="15d871de56a82992077494c7e2360de27a218760" translate="yes" xml:space="preserve">
          <source>Kind representations</source>
          <target state="translated">種類の表現</target>
        </trans-unit>
        <trans-unit id="cc4cf8a32a2bc0862e7d482199843cd1ee70873c" translate="yes" xml:space="preserve">
          <source>Kind variables can also be quantified in &lt;em&gt;visible&lt;/em&gt; positions. Consider the following two examples:</source>
          <target state="translated">Kind variables can also be quantified in &lt;em&gt;visible&lt;/em&gt; positions. Consider the following two examples:</target>
        </trans-unit>
        <trans-unit id="c0a4407d441254c502eba426c88d24ec2721a6ab" translate="yes" xml:space="preserve">
          <source>Kind-equalities cannot be deferred, e.g.</source>
          <target state="translated">種類平等は先延ばしにできません。</target>
        </trans-unit>
        <trans-unit id="db7f1b7b324213bc7b9a60bf048eeec0dafa8a82" translate="yes" xml:space="preserve">
          <source>KindQ</source>
          <target state="translated">KindQ</target>
        </trans-unit>
        <trans-unit id="a0e1adf2caacb11f0a7f30552166686185a261b9" translate="yes" xml:space="preserve">
          <source>KindRep</source>
          <target state="translated">KindRep</target>
        </trans-unit>
        <trans-unit id="c53c4c21817ef2a1d4f60e2cceae1eb6be52eda4" translate="yes" xml:space="preserve">
          <source>KindSignatures</source>
          <target state="translated">KindSignatures</target>
        </trans-unit>
        <trans-unit id="1f207bb143ebf53a96f07da496ea625fd1ed3952" translate="yes" xml:space="preserve">
          <source>Kinds</source>
          <target state="translated">Kinds</target>
        </trans-unit>
        <trans-unit id="a4c865932a7f3d9b055f979bca5ede567a926edc" translate="yes" xml:space="preserve">
          <source>Kleisli</source>
          <target state="translated">Kleisli</target>
        </trans-unit>
        <trans-unit id="e841df54a07c5f2cc9b5f9af566dd4e754d4d096" translate="yes" xml:space="preserve">
          <source>Kleisli arrows of a monad.</source>
          <target state="translated">モナドのクライスリの矢。</target>
        </trans-unit>
        <trans-unit id="a5a5fafee83492d8b176cbbdd5bb0860a6fdbf28" translate="yes" xml:space="preserve">
          <source>Known limitations:</source>
          <target state="translated">既知の制限事項。</target>
        </trans-unit>
        <trans-unit id="5d7d25439595bfc8d329c71ca182a7c6823088b5" translate="yes" xml:space="preserve">
          <source>KnownNat</source>
          <target state="translated">KnownNat</target>
        </trans-unit>
        <trans-unit id="c37bbcaa811caf4684344786df42286e08100459" translate="yes" xml:space="preserve">
          <source>KnownSymbol</source>
          <target state="translated">KnownSymbol</target>
        </trans-unit>
        <trans-unit id="1bafcba98aca5f350dc05c967f514185665ef856" translate="yes" xml:space="preserve">
          <source>LANGID</source>
          <target state="translated">LANGID</target>
        </trans-unit>
        <trans-unit id="84f34581093e5397ee10c973d3f1265b05c1f6db" translate="yes" xml:space="preserve">
          <source>LARGE_INTEGER</source>
          <target state="translated">LARGE_INTEGER</target>
        </trans-unit>
        <trans-unit id="bf87bea3a535f56ac91a5de66d6b55f69d98184f" translate="yes" xml:space="preserve">
          <source>LCID</source>
          <target state="translated">LCID</target>
        </trans-unit>
        <trans-unit id="0beee13d31c1e3c6098692c8568c5506cfa9174d" translate="yes" xml:space="preserve">
          <source>LCMapFlags</source>
          <target state="translated">LCMapFlags</target>
        </trans-unit>
        <trans-unit id="336b811f9fed9547f7ebf0e4f1880cbb455180ca" translate="yes" xml:space="preserve">
          <source>LCTYPE</source>
          <target state="translated">LCTYPE</target>
        </trans-unit>
        <trans-unit id="52c2e43c2456d90f37c50642076b0af5566ae13a" translate="yes" xml:space="preserve">
          <source>LEFTWARDS ARROW</source>
          <target state="translated">左矢印</target>
        </trans-unit>
        <trans-unit id="cecc3c11891d7815b56633d3559be2f6608334e9" translate="yes" xml:space="preserve">
          <source>LEFTWARDS ARROW-TAIL</source>
          <target state="translated">左翼矢印テイル</target>
        </trans-unit>
        <trans-unit id="16577c79334aa225051280c5bb84f84cce0e4ae6" translate="yes" xml:space="preserve">
          <source>LEFTWARDS DOUBLE ARROW-TAIL</source>
          <target state="translated">レフトワードダブルアローテイル</target>
        </trans-unit>
        <trans-unit id="91a07087a57580c557f3a426586f0c2f60ef2af4" translate="yes" xml:space="preserve">
          <source>LF</source>
          <target state="translated">LF</target>
        </trans-unit>
        <trans-unit id="7526c6cf5f75ab344e0a9b50d84724f46ba01601" translate="yes" xml:space="preserve">
          <source>LHANDLE</source>
          <target state="translated">LHANDLE</target>
        </trans-unit>
        <trans-unit id="a85510722a0e3f63597435d302fceae090486b57" translate="yes" xml:space="preserve">
          <source>LLVM code from the &lt;a href=&quot;codegens#llvm-code-gen&quot;&gt;LLVM code generator&lt;/a&gt;</source>
          <target state="translated">LLVMコード&lt;a href=&quot;codegens#llvm-code-gen&quot;&gt;ジェネレーター&lt;/a&gt;からのLLVMコード</target>
        </trans-unit>
        <trans-unit id="e71dc1792dc3123b5a369dd038b6e7cc64277908" translate="yes" xml:space="preserve">
          <source>LLVM code generator</source>
          <target state="translated">LLVMコード生成器</target>
        </trans-unit>
        <trans-unit id="3c49671b7e2363cd100d9148316191ae6da5ed49" translate="yes" xml:space="preserve">
          <source>LOCALESIGNATURE</source>
          <target state="translated">LOCALESIGNATURE</target>
        </trans-unit>
        <trans-unit id="a4ab30ac59152c7cdac425098a0e91bddb57dee0" translate="yes" xml:space="preserve">
          <source>LONG</source>
          <target state="translated">LONG</target>
        </trans-unit>
        <trans-unit id="ec5d37add4b689af044ac3c5bffa9caeddd4928a" translate="yes" xml:space="preserve">
          <source>LONG32</source>
          <target state="translated">LONG32</target>
        </trans-unit>
        <trans-unit id="4d839d00f90159ea1c7a2cce620daacfba69bfe0" translate="yes" xml:space="preserve">
          <source>LONG64</source>
          <target state="translated">LONG64</target>
        </trans-unit>
        <trans-unit id="30573aefe36d3bba7516573e936a54b9886f4531" translate="yes" xml:space="preserve">
          <source>LONG_PTR</source>
          <target state="translated">LONG_PTR</target>
        </trans-unit>
        <trans-unit id="6799d635b5e2816633a1eee1011aa42c6900072f" translate="yes" xml:space="preserve">
          <source>LPARAM</source>
          <target state="translated">LPARAM</target>
        </trans-unit>
        <trans-unit id="e191267d6636b8d8dd17922a36f5d83423ca186f" translate="yes" xml:space="preserve">
          <source>LPBOOL</source>
          <target state="translated">LPBOOL</target>
        </trans-unit>
        <trans-unit id="b0179249b725b53a04310f204589b18a9f487e9a" translate="yes" xml:space="preserve">
          <source>LPBYTE</source>
          <target state="translated">LPBYTE</target>
        </trans-unit>
        <trans-unit id="1aa1c9f4c10c1f10229a085be9fe5e8d772815c4" translate="yes" xml:space="preserve">
          <source>LPCSTR</source>
          <target state="translated">LPCSTR</target>
        </trans-unit>
        <trans-unit id="e741ece1418d5a115d62b99230ca71d3efe4070d" translate="yes" xml:space="preserve">
          <source>LPCTSTR</source>
          <target state="translated">LPCTSTR</target>
        </trans-unit>
        <trans-unit id="172c9c6bdd05170cc78b4016e92a18b0ce371012" translate="yes" xml:space="preserve">
          <source>LPCTSTR_</source>
          <target state="translated">LPCTSTR_</target>
        </trans-unit>
        <trans-unit id="77d43834b2e69f339ace63bdd9b49fba118491ec" translate="yes" xml:space="preserve">
          <source>LPCWSTR</source>
          <target state="translated">LPCWSTR</target>
        </trans-unit>
        <trans-unit id="eacdfe1b863de52295f8ed9111840c8b69de1d8a" translate="yes" xml:space="preserve">
          <source>LPDWORD</source>
          <target state="translated">LPDWORD</target>
        </trans-unit>
        <trans-unit id="f5d63f9a27fa44191677aa464c55c7503eba938c" translate="yes" xml:space="preserve">
          <source>LPINPUT</source>
          <target state="translated">LPINPUT</target>
        </trans-unit>
        <trans-unit id="d255c79116e40dec5d46ebe0b88ddcd312799e9a" translate="yes" xml:space="preserve">
          <source>LPMSG</source>
          <target state="translated">LPMSG</target>
        </trans-unit>
        <trans-unit id="4ade22c4abe03e351c322f7d46f37b350a895c69" translate="yes" xml:space="preserve">
          <source>LPOSVERSIONINFOEX</source>
          <target state="translated">LPOSVERSIONINFOEX</target>
        </trans-unit>
        <trans-unit id="59d6e50d1a4f36a9203f0cbba59c865419b38b5b" translate="yes" xml:space="preserve">
          <source>LPOVERLAPPED</source>
          <target state="translated">LPOVERLAPPED</target>
        </trans-unit>
        <trans-unit id="be649aa6e2e33d351a5bab4d706cca9fa800ea52" translate="yes" xml:space="preserve">
          <source>LPPAINTSTRUCT</source>
          <target state="translated">LPPAINTSTRUCT</target>
        </trans-unit>
        <trans-unit id="67257cfd99d80a2df705d6b562a4f33f6da4eef6" translate="yes" xml:space="preserve">
          <source>LPSECURITY_ATTRIBUTES</source>
          <target state="translated">LPSECURITY_ATTRIBUTES</target>
        </trans-unit>
        <trans-unit id="89625841cf8382a8b7cbfb91a1aa9825d588e589" translate="yes" xml:space="preserve">
          <source>LPSTR</source>
          <target state="translated">LPSTR</target>
        </trans-unit>
        <trans-unit id="4bf9ddc5d3aca695589c5b07f3bbfd2293289ee7" translate="yes" xml:space="preserve">
          <source>LPTSTR</source>
          <target state="translated">LPTSTR</target>
        </trans-unit>
        <trans-unit id="f34c393d2b1c91567364523f1ab42c92643afd25" translate="yes" xml:space="preserve">
          <source>LPVOID</source>
          <target state="translated">LPVOID</target>
        </trans-unit>
        <trans-unit id="df97686e2eaf116cd4616939d89f5db838713001" translate="yes" xml:space="preserve">
          <source>LPWSTR</source>
          <target state="translated">LPWSTR</target>
        </trans-unit>
        <trans-unit id="c9907d8861344b17d44c4f103abf75a9157959d9" translate="yes" xml:space="preserve">
          <source>LRESULT</source>
          <target state="translated">LRESULT</target>
        </trans-unit>
        <trans-unit id="6c62fb7313eb9d28efbca3e61ff13801b5b45a0a" translate="yes" xml:space="preserve">
          <source>LT</source>
          <target state="translated">LT</target>
        </trans-unit>
        <trans-unit id="e069a75ab11debd5703606dcab59ec2fb4d96109" translate="yes" xml:space="preserve">
          <source>Label a decoder. If the decoder fails, the label will be appended on a new line to the error message string.</source>
          <target state="translated">デコーダにラベルを付けます。デコーダが失敗した場合、ラベルはエラーメッセージ文字列の新しい行に追加されます。</target>
        </trans-unit>
        <trans-unit id="600b10a6ff2b2b4798fef332e1c46bd3ff40864f" translate="yes" xml:space="preserve">
          <source>Labelling trees</source>
          <target state="translated">木のラベリング</target>
        </trans-unit>
        <trans-unit id="bd0e2f60f3cab26b9d1a005d3e6df03ee775b43b" translate="yes" xml:space="preserve">
          <source>LambdaCase</source>
          <target state="translated">LambdaCase</target>
        </trans-unit>
        <trans-unit id="f8ba7082b851540c52b04047ac4c6d27074d828b" translate="yes" xml:space="preserve">
          <source>LangAsm</source>
          <target state="translated">LangAsm</target>
        </trans-unit>
        <trans-unit id="e29d0e2e40cfc7d4080b46c4ed09bd1426b13ae6" translate="yes" xml:space="preserve">
          <source>LangC</source>
          <target state="translated">LangC</target>
        </trans-unit>
        <trans-unit id="6f9fe5d064c62dd571d1cd25ae70836c15d42666" translate="yes" xml:space="preserve">
          <source>LangCxx</source>
          <target state="translated">LangCxx</target>
        </trans-unit>
        <trans-unit id="b36e168343c5d8ff6e8b16848d95a785e3e4e206" translate="yes" xml:space="preserve">
          <source>LangObjc</source>
          <target state="translated">LangObjc</target>
        </trans-unit>
        <trans-unit id="8f6e55899c5e99e242135ff6cf8c727ef909dd4c" translate="yes" xml:space="preserve">
          <source>LangObjcxx</source>
          <target state="translated">LangObjcxx</target>
        </trans-unit>
        <trans-unit id="89b86ab0e66f527166d98df92ddbcf5416ed58f6" translate="yes" xml:space="preserve">
          <source>Language</source>
          <target state="translated">Language</target>
        </trans-unit>
        <trans-unit id="e3818c797711a3ca9b496a8bf021d70184059791" translate="yes" xml:space="preserve">
          <source>Language extension lookup</source>
          <target state="translated">言語拡張子ルックアップ</target>
        </trans-unit>
        <trans-unit id="819f46032d151fbc83b888fce06e8becbc1ba90d" translate="yes" xml:space="preserve">
          <source>Language extensions</source>
          <target state="translated">言語拡張</target>
        </trans-unit>
        <trans-unit id="b475046df5e047a5d324d26e9300cc370c2f256f" translate="yes" xml:space="preserve">
          <source>Language extensions can also be enabled using the &lt;code&gt;LANGUAGE&lt;/code&gt; pragma, thus &lt;code&gt;{-# LANGUAGE TemplateHaskell #-}&lt;/code&gt; (see &lt;a href=&quot;pragmas#language-pragma&quot;&gt;LANGUAGE pragma&lt;/a&gt;).</source>
          <target state="translated">言語拡張は、 &lt;code&gt;LANGUAGE&lt;/code&gt; プラグマを使用して有効にすることもできます。したがって、 &lt;code&gt;{-# LANGUAGE TemplateHaskell #-}&lt;/code&gt; （&lt;a href=&quot;pragmas#language-pragma&quot;&gt;LANGUAGEプラグマを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="b09f9847980af7e4a3a6760441d9ffe569eb0c00" translate="yes" xml:space="preserve">
          <source>Language extensions can be controlled (i.e. allowed or not) in two ways:</source>
          <target state="translated">言語拡張の制御(許可・不許可)には2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="05b5ef0d2efbebac38a6a109039519a6c3f95008" translate="yes" xml:space="preserve">
          <source>Language extensions known to GHC</source>
          <target state="translated">GHCで知られている言語拡張</target>
        </trans-unit>
        <trans-unit id="b132eded8d0dc30dbe1263774537feb48884f8fb" translate="yes" xml:space="preserve">
          <source>Language options can be controlled in two ways:</source>
          <target state="translated">言語オプションは2つの方法で制御できます。</target>
        </trans-unit>
        <trans-unit id="1d88995321d1e03fc9c056aa2f0848cb14f687c1" translate="yes" xml:space="preserve">
          <source>Language options can be enabled either by a command-line option &lt;code&gt;-Xblah&lt;/code&gt;, or by a &lt;code&gt;{-# LANGUAGE blah #-}&lt;/code&gt; pragma in the file itself. See &lt;a href=&quot;exts/control#options-language&quot;&gt;Controlling extensions&lt;/a&gt;.</source>
          <target state="translated">言語オプションは、コマンドラインオプション &lt;code&gt;-Xblah&lt;/code&gt; 、またはファイル自体の &lt;code&gt;{-# LANGUAGE blah #-}&lt;/code&gt; プラグマのいずれかによって有効にできます。&lt;a href=&quot;exts/control#options-language&quot;&gt;拡張機能の制御を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6bd1a5ed914255da4f2e3d146728cb1407c73dac" translate="yes" xml:space="preserve">
          <source>Language options can be enabled either by a command-line option &lt;code&gt;-Xblah&lt;/code&gt;, or by a &lt;code&gt;{-# LANGUAGE blah #-}&lt;/code&gt; pragma in the file itself. See &lt;a href=&quot;glasgow_exts#options-language&quot;&gt;Language options&lt;/a&gt;.</source>
          <target state="translated">言語オプションは、コマンドラインオプション &lt;code&gt;-Xblah&lt;/code&gt; によって、またはファイル自体の &lt;code&gt;{-# LANGUAGE blah #-}&lt;/code&gt; プラグマによって有効にすることができます。&lt;a href=&quot;glasgow_exts#options-language&quot;&gt;言語オプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cb129676df1e2ca9487a872968ddcafe0d9dd6a9" translate="yes" xml:space="preserve">
          <source>Language options recognised by Cabal can also be enabled using the &lt;code&gt;LANGUAGE&lt;/code&gt; pragma, thus &lt;code&gt;{-# LANGUAGE TemplateHaskell #-}&lt;/code&gt; (see &lt;a href=&quot;#language-pragma&quot;&gt;LANGUAGE pragma&lt;/a&gt;).</source>
          <target state="translated">Cabalが認識する言語オプションは、 &lt;code&gt;LANGUAGE&lt;/code&gt; プラグマを使用して有効にすることもできるため、 &lt;code&gt;{-# LANGUAGE TemplateHaskell #-}&lt;/code&gt; （&lt;a href=&quot;#language-pragma&quot;&gt;LANGUAGEプラグマを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="4303cd5d535fbb5d0b9f4d30dd7adce7e5ce6778" translate="yes" xml:space="preserve">
          <source>Language.Haskell.TH</source>
          <target state="translated">Language.Haskell.TH</target>
        </trans-unit>
        <trans-unit id="5f9b3e6bbd10362e192076519937e6af00547ec4" translate="yes" xml:space="preserve">
          <source>Language.Haskell.TH.CodeDo</source>
          <target state="translated">Language.Haskell.TH.CodeDo</target>
        </trans-unit>
        <trans-unit id="de2ab3d572f18c64ff1f3f745dbafb85fc36b86d" translate="yes" xml:space="preserve">
          <source>Language.Haskell.TH.LanguageExtensions</source>
          <target state="translated">Language.Haskell.TH.LanguageExtensions</target>
        </trans-unit>
        <trans-unit id="a536fc0da9feb311a1888ebea07a6df0b1199739" translate="yes" xml:space="preserve">
          <source>Language.Haskell.TH.Lib.Internal</source>
          <target state="translated">Language.Haskell.TH.Lib.Internal</target>
        </trans-unit>
        <trans-unit id="625f2edd5986bf5aa6e47f4476741a674b3ee730" translate="yes" xml:space="preserve">
          <source>Language.Haskell.TH.Lib.Internal exposes some additional functionality that is used internally in GHC's integration with Template Haskell. This is not a part of the public API, and as such, there are no API guarantees for this module from version to version.</source>
          <target state="translated">Language.Haskell.TH.Lib.Internalは、GHCのHaskellテンプレートとの統合で内部的に使用される追加機能を公開しています。これは公開APIの一部ではないため、バージョンごとにこのモジュールのAPI保証はありません。</target>
        </trans-unit>
        <trans-unit id="1c03c9aef7745ac205e3905894725dfd28c07640" translate="yes" xml:space="preserve">
          <source>Language.Haskell.TH.Ppr</source>
          <target state="translated">Language.Haskell.TH.Ppr</target>
        </trans-unit>
        <trans-unit id="d5b1913241bcbf67ca726f074016aeb992ec6064" translate="yes" xml:space="preserve">
          <source>Language.Haskell.TH.PprLib</source>
          <target state="translated">Language.Haskell.TH.PprLib</target>
        </trans-unit>
        <trans-unit id="beacda45774b21626492b1c3c45cdfb6c502fea0" translate="yes" xml:space="preserve">
          <source>Language.Haskell.TH.Quote</source>
          <target state="translated">Language.Haskell.TH.Quote</target>
        </trans-unit>
        <trans-unit id="2af0f0aebf13fc8e5f915b22fc1832e251d01c0b" translate="yes" xml:space="preserve">
          <source>Language.Haskell.TH.Syntax</source>
          <target state="translated">Language.Haskell.TH.Syntax</target>
        </trans-unit>
        <trans-unit id="2c4c7d3c26eea5a437b10f135bd656f51fe7182c" translate="yes" xml:space="preserve">
          <source>LanguageDef</source>
          <target state="translated">LanguageDef</target>
        </trans-unit>
        <trans-unit id="8d5e1a74eb773e87b48d793c077afcf2cd4b9d8a" translate="yes" xml:space="preserve">
          <source>Large objects are not allocated from the normal allocation area set by the &lt;code&gt;-A&lt;/code&gt; flag, which is why there is a separate limit for these. Large objects tend to be much rarer than small objects, so most programs hit the &lt;code&gt;-A&lt;/code&gt; limit before the &lt;code&gt;-AL&lt;/code&gt; limit. However, the &lt;code&gt;-A&lt;/code&gt; limit is per-capability, whereas the &lt;code&gt;-AL&lt;/code&gt; limit is global, so as &lt;code&gt;-N&lt;/code&gt; gets larger it becomes more likely that we hit the &lt;code&gt;-AL&lt;/code&gt; limit first. To counteract this, it might be necessary to use a larger &lt;code&gt;-AL&lt;/code&gt; limit when using a large &lt;code&gt;-N&lt;/code&gt;.</source>
          <target state="translated">ラージオブジェクトは、 &lt;code&gt;-A&lt;/code&gt; フラグで設定された通常の割り当て領域から割り当てられないため、これらには個別の制限があります。大きなオブジェクトは小さなオブジェクトよりもはるかにまれである傾向があるため、ほとんどのプログラムは &lt;code&gt;-AL&lt;/code&gt; 制限の前に &lt;code&gt;-A&lt;/code&gt; 制限に達します。ただし、 &lt;code&gt;-A&lt;/code&gt; 制限は機能ごとですが、 &lt;code&gt;-AL&lt;/code&gt; 制限はグローバルなので、 &lt;code&gt;-N&lt;/code&gt; が大きくなると、最初に &lt;code&gt;-AL&lt;/code&gt; 制限に達する可能性が高くなります。これに対処するには、大きな &lt;code&gt;-N&lt;/code&gt; を使用するときに、大きな &lt;code&gt;-AL&lt;/code&gt; 制限を使用する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="d1c69a859a9638b242f2dabf8acf1c0b1450ce6b" translate="yes" xml:space="preserve">
          <source>Last</source>
          <target state="translated">Last</target>
        </trans-unit>
        <trans-unit id="036fd8195c1bacf1837b14eef6243e90d12eeff8" translate="yes" xml:space="preserve">
          <source>Lastly come the normal type variables of a declaration.</source>
          <target state="translated">最後に宣言の通常の型変数が来ます。</target>
        </trans-unit>
        <trans-unit id="96565d42beb23b9f18b0c44cb990adddfa8c6c5e" translate="yes" xml:space="preserve">
          <source>Lastly, all of this applies only for classes other than &lt;code&gt;Read&lt;/code&gt;, &lt;code&gt;Show&lt;/code&gt;, &lt;code&gt;Typeable&lt;/code&gt;, and &lt;code&gt;Data&lt;/code&gt;, for which the stock derivation applies (section 4.3.3. of the Haskell Report). (For the standard classes &lt;code&gt;Eq&lt;/code&gt;, &lt;code&gt;Ord&lt;/code&gt;, &lt;code&gt;Ix&lt;/code&gt;, and &lt;code&gt;Bounded&lt;/code&gt; it is immaterial whether the stock method is used or the one described here.)</source>
          <target state="translated">最後に、これらすべては、株式の派生が適用される &lt;code&gt;Read&lt;/code&gt; 、 &lt;code&gt;Show&lt;/code&gt; 、 &lt;code&gt;Typeable&lt;/code&gt; 、および &lt;code&gt;Data&lt;/code&gt; 以外のクラスにのみ適用されます（Haskellレポートのセクション4.3.3。）。（標準クラス &lt;code&gt;Eq&lt;/code&gt; 、 &lt;code&gt;Ord&lt;/code&gt; 、 &lt;code&gt;Ix&lt;/code&gt; 、および &lt;code&gt;Bounded&lt;/code&gt; の場合、ストックメソッドを使用するか、ここで説明するメソッドを使用するかは重要ではありません。）</target>
        </trans-unit>
        <trans-unit id="f0fc455f2e488c46f4258275b73483dfdda67dc4" translate="yes" xml:space="preserve">
          <source>Laws</source>
          <target state="translated">Laws</target>
        </trans-unit>
        <trans-unit id="7a81fbeb8d54ada80dba09a4fc21a3129bfb1430" translate="yes" xml:space="preserve">
          <source>Laws:</source>
          <target state="translated">Laws:</target>
        </trans-unit>
        <trans-unit id="0f509e179cc1a0fe8f803e98982287db8fe059d4" translate="yes" xml:space="preserve">
          <source>Layout fields are then overlapped so that the final layout will be as compact as possible. For example, suppose we have the unboxed sum:</source>
          <target state="translated">そして、最終的なレイアウトができるだけコンパクトになるようにレイアウトフィールドを重ね合わせます。例えば、箱から出した合計があるとします。</target>
        </trans-unit>
        <trans-unit id="cb90f09d6abe9a4f5536f00172206430dfc1fd65" translate="yes" xml:space="preserve">
          <source>Layout with multi-way if works in the same way as other layout contexts, except that the semi-colons between guards in a multi-way if are optional. So it is not necessary to line up all the guards at the same column; this is consistent with the way guards work in function definitions and case expressions.</source>
          <target state="translated">多元ifを使ったレイアウトは他のレイアウトコンテキストと同じように動作しますが、多元ifでのガード間のセミコロンはオプションです。したがって、すべてのガードを同じ列に並べる必要はありません。これは、関数定義や大文字小文字の表現でのガードの働き方と一致しています。</target>
        </trans-unit>
        <trans-unit id="cb0824cf9ff62297df30a510f886637077aac5e0" translate="yes" xml:space="preserve">
          <source>Lazily read all user input on &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle-fd#v:stdin&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; as a single string.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle-fd#v:stdin&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; でのすべてのユーザー入力を単一の文字列として遅延読み込みします。</target>
        </trans-unit>
        <trans-unit id="9c161543e3be3df002213096ec26355269feb4c2" translate="yes" xml:space="preserve">
          <source>Lazily read all user input on &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle-fd#v:stdin&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; as a single string.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle-fd#v:stdin&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; へのすべてのユーザー入力を単一の文字列として怠惰に読み取ります。</target>
        </trans-unit>
        <trans-unit id="e038a37a55536e01a6e93e7ead75ab34c8cde87f" translate="yes" xml:space="preserve">
          <source>Lazily read all user input on &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-stdhandles#v:stdin&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; as a single string.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-stdhandles#v:stdin&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; へのすべてのユーザー入力を単一の文字列として怠惰に読み取ります。</target>
        </trans-unit>
        <trans-unit id="740345f4fc26eb7795ac98f172dc650babd2bee4" translate="yes" xml:space="preserve">
          <source>Lazily read the remaining contents of a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; will be closed after the read completes, or on error.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; の残りの内容を怠惰に読み取ります。 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 、読み取りが完了した後、あるいはエラー時に閉じられます。</target>
        </trans-unit>
        <trans-unit id="4161b76a8d82e2a67a0cc9182fd41736687ceb1c" translate="yes" xml:space="preserve">
          <source>Lazily read the remaining contents of a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; will be closed after the read completes, or on error.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 残りの内容を怠惰に読んでください。 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 、読み取りが完了した後、あるいはエラー時に閉じられます。</target>
        </trans-unit>
        <trans-unit id="bf9b4f02596e6fd7b5e52ce1559424597d35ee1c" translate="yes" xml:space="preserve">
          <source>Lazily read the remaining contents of a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; will be closed after the read completes, or on error.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 残りの内容を怠惰に読みます。 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 、読み取りが完了した後、あるいはエラー時に閉じられます。</target>
        </trans-unit>
        <trans-unit id="9133c4ce416a587d4206249b3ec0be18933d85ff" translate="yes" xml:space="preserve">
          <source>Lazily serialise a value to a file.</source>
          <target state="translated">値をファイルに簡単にシリアライズします。</target>
        </trans-unit>
        <trans-unit id="2e58d7db217f7ed5e5b534420eebdd649aef1451" translate="yes" xml:space="preserve">
          <source>Laziness in the second argument</source>
          <target state="translated">第二引数の怠慢</target>
        </trans-unit>
        <trans-unit id="8e4c4b8d6f447284862f49f3045c8dc03eb992a3" translate="yes" xml:space="preserve">
          <source>Lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to use as the tail of the generated lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">レイジー &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 生成された怠け者の尾として使用する &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2200f814b893336b40ddd029ac88811c89cd6469" translate="yes" xml:space="preserve">
          <source>Lazy I/O throws an exception if an error is encountered, in contrast to the Haskell 98 spec which requires that errors are discarded (see Section 21.2.2 of the Haskell 98 report). The exception thrown is the usual IO exception that would be thrown if the failing IO operation was performed in the IO monad, and can be caught by &lt;code&gt;System.IO.Error.catch&lt;/code&gt; or &lt;code&gt;Control.Exception.catch&lt;/code&gt;.</source>
          <target state="translated">エラーが破棄されることを要求するHaskell 98仕様（Haskell 98レポートのセクション21.2.2を参照）とは対照的に、レイジーI / Oはエラーが発生した場合に例外をスローします。スローされる例外は、失敗したIO操作がIOモナドで実行された場合にスローされる通常のIO例外であり、 &lt;code&gt;System.IO.Error.catch&lt;/code&gt; または &lt;code&gt;Control.Exception.catch&lt;/code&gt; によってキャッチできます。</target>
        </trans-unit>
        <trans-unit id="0dc8a7617416cac1adb37dc18ef37fe1492d919f" translate="yes" xml:space="preserve">
          <source>Lazy RWS monad.</source>
          <target state="translated">怠惰なRWSモナド。</target>
        </trans-unit>
        <trans-unit id="4e7f54740d38945be5cd4b244d5c2c47d033b6be" translate="yes" xml:space="preserve">
          <source>Lazy Reader-writer-state monads</source>
          <target state="translated">怠惰なリーダー-ライター状態のモナド</target>
        </trans-unit>
        <trans-unit id="d5489376c9d88deacb286105f787e1b38b636614" translate="yes" xml:space="preserve">
          <source>Lazy corecursive folds</source>
          <target state="translated">遅延コアカーシブ・フォールド</target>
        </trans-unit>
        <trans-unit id="cfe6c9b5652571971dc8bf8ed33e2fb436e96b8f" translate="yes" xml:space="preserve">
          <source>Lazy corecursive folds of unbounded structures are fine:</source>
          <target state="translated">拘束されていない構造体のレイジーな内包的折り畳みは問題ありません。</target>
        </trans-unit>
        <trans-unit id="eb43f112ea276b50bd6b9f699aa36231d04bac2f" translate="yes" xml:space="preserve">
          <source>Lazy state monads, passing an updatable state through a computation. See below for examples.</source>
          <target state="translated">遅延状態のモナド。更新可能な状態を計算に渡します。例は以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="556c668dfd9b10659aee0887aa651ecc4197ef61" translate="yes" xml:space="preserve">
          <source>Lazy state monads.</source>
          <target state="translated">怠惰な状態のモナド。</target>
        </trans-unit>
        <trans-unit id="d6e57ca0c7140fb8eaf2002ba63c8930d28ffe8d" translate="yes" xml:space="preserve">
          <source>Lazy writer monads.</source>
          <target state="translated">怠け者ライターのモナド。</target>
        </trans-unit>
        <trans-unit id="0f8c868597dc0fe23d3aa967985ce4e3dd234ee3" translate="yes" xml:space="preserve">
          <source>LeapSecondMap</source>
          <target state="translated">LeapSecondMap</target>
        </trans-unit>
        <trans-unit id="0a2f5e69772acd39bb519e219d7512fd338af3bf" translate="yes" xml:space="preserve">
          <source>Left and right folds</source>
          <target state="translated">左と右のフォールド</target>
        </trans-unit>
        <trans-unit id="6d9694ab87c1509816fc3f073364a45eed8143dd" translate="yes" xml:space="preserve">
          <source>Left associative monadic bifold over a structure.</source>
          <target state="translated">構造体上の左連想的な単項二重項。</target>
        </trans-unit>
        <trans-unit id="9113429feae9435bc9a22b91fdadcab770bb70b5" translate="yes" xml:space="preserve">
          <source>Left identity</source>
          <target state="translated">左のアイデンティティ</target>
        </trans-unit>
        <trans-unit id="888262dff4e29ba66957e08ae5e7c00c8ddb1ac9" translate="yes" xml:space="preserve">
          <source>Left shrinking (or Tightening)</source>
          <target state="translated">左縮み(または引き締め</target>
        </trans-unit>
        <trans-unit id="43b09cf749eb5491b74e53f1bc09fa04659674f0" translate="yes" xml:space="preserve">
          <source>Left-associative fold of a structure but with strict application of the operator.</source>
          <target state="translated">構造体の左結合的な折り畳みですが、演算子を厳密に適用しています。</target>
        </trans-unit>
        <trans-unit id="9ad7cc2dc31661b7a9b7f1187d9b82b29af93328" translate="yes" xml:space="preserve">
          <source>Left-associative fold of a structure, lazy in the accumulator. This is rarely what you want, but can work well for structures with efficient right-to-left sequencing and an operator that is lazy in its left argument.</source>
          <target state="translated">構造体の左結合フォールド、アキュムレータでの遅延。これが必要になることはほとんどありませんが、効率的な右から左への順序付けや、左の引数で遅延する演算子を持つ構造体ではうまく機能します。</target>
        </trans-unit>
        <trans-unit id="2e864825085ba6b285b3deb3c0b79e4d521a8979" translate="yes" xml:space="preserve">
          <source>Left-associative fold of a structure.</source>
          <target state="translated">構造体の左結合的な折り目。</target>
        </trans-unit>
        <trans-unit id="3c1c012fb20a62b44c7c2d747a91757337b12110" translate="yes" xml:space="preserve">
          <source>Left-associative fold operation for constructor applications.</source>
          <target state="translated">コンストラクタアプリケーションのための左結合的な折り畳み操作。</target>
        </trans-unit>
        <trans-unit id="771b2d8147f59a5691eb79cad7d5c64627dab857" translate="yes" xml:space="preserve">
          <source>Left-to-right composition</source>
          <target state="translated">左から右への構図</target>
        </trans-unit>
        <trans-unit id="c2371e24467463447fab51b81ef30f6f1fa7acf3" translate="yes" xml:space="preserve">
          <source>Left-to-right composition of Kleisli arrows.</source>
          <target state="translated">クライスリの矢印の左から右の構図。</target>
        </trans-unit>
        <trans-unit id="b396eca23f1092998983c79f8de12421ce4d07d7" translate="yes" xml:space="preserve">
          <source>LeftAdjust</source>
          <target state="translated">LeftAdjust</target>
        </trans-unit>
        <trans-unit id="6f12db94ca14c410ee6aea9aaf9f37f142111790" translate="yes" xml:space="preserve">
          <source>LeftAssociative</source>
          <target state="translated">LeftAssociative</target>
        </trans-unit>
        <trans-unit id="0b5d32fdd51149a3a9a8927f5a4932ddaa322146" translate="yes" xml:space="preserve">
          <source>LeftMode</source>
          <target state="translated">LeftMode</target>
        </trans-unit>
        <trans-unit id="17af1ff09188bf46cc1670386af27eac4b42d3c1" translate="yes" xml:space="preserve">
          <source>Legacy folds</source>
          <target state="translated">レガシーフォールド</target>
        </trans-unit>
        <trans-unit id="3bade34ecbc5d996b2f301ebd4ba689e81c7c9ea" translate="yes" xml:space="preserve">
          <source>Length</source>
          <target state="translated">Length</target>
        </trans-unit>
        <trans-unit id="b35cc825e3ceae3035f623e062f495f46e1b0bf1" translate="yes" xml:space="preserve">
          <source>Length of a SIMD vector type</source>
          <target state="translated">SIMD ベクトル型の長さ</target>
        </trans-unit>
        <trans-unit id="47460bf7f1b7a814e03f3e50d8835668cf96f2db" translate="yes" xml:space="preserve">
          <source>Length:</source>
          <target state="translated">Length:</target>
        </trans-unit>
        <trans-unit id="1da751ae056c25dec1bf146025343c7d7baa5ec4" translate="yes" xml:space="preserve">
          <source>Lennart Kolmodin</source>
          <target state="translated">レナート・コルモーディン</target>
        </trans-unit>
        <trans-unit id="4c902ed308255eedb5791755b57d87de654a6e37" translate="yes" xml:space="preserve">
          <source>Lennart Kolmodin &amp;lt;kolmodin@gmail.com&amp;gt;</source>
          <target state="translated">Lennart Kolmodin &amp;lt;kolmodin@gmail.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="c65eb9120ed9793a089cab8d78b2b3e2762a66f1" translate="yes" xml:space="preserve">
          <source>Lennart Kolmodin Ross Paterson</source>
          <target state="translated">レナート・コルモーディン ロス・パターソン</target>
        </trans-unit>
        <trans-unit id="785175efbad60848e99dc0e384b6197a7399034b" translate="yes" xml:space="preserve">
          <source>Let us illustrate these improvements on the CSV-table rendering example from &lt;a href=&quot;data-bytestring-builder&quot;&gt;Data.ByteString.Builder&lt;/a&gt;. Its &quot;hot code&quot; is the rendering of a table's cells, which we implement as follows using only the functions from the &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; API.</source>
          <target state="translated">&lt;a href=&quot;data-bytestring-builder&quot;&gt;Data.ByteString.Builder&lt;/a&gt;からのCSVテーブルレンダリングの例におけるこれらの改善を説明しましょう。その「ホットコード」は、テーブルのセルのレンダリングであり、 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; APIの関数のみを使用して、次のように実装します。</target>
        </trans-unit>
        <trans-unit id="8f4eb684c9a2dfb229ddec06c0f99f449d161a5a" translate="yes" xml:space="preserve">
          <source>Let us look at an example first:</source>
          <target state="translated">まずは一例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="a5c3e5bbf9a5e76197700fa3298be080332fba3f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s consider a simple example,</source>
          <target state="translated">簡単な例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="a592951b101ac13a4cc74ab595c10c997b2adfa4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create a Hello World program, and compile and run it. First, create a file &lt;code&gt;hello.hs&lt;/code&gt; containing the Haskell code:</source>
          <target state="translated">Hello Worldプログラムを作成し、コンパイルして実行してみましょう。まず、Haskellコードを含むファイル &lt;code&gt;hello.hs&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="dd8ebc96ea1bed3112a906d9d91800a76be4b101" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s first see how execution flows through this program. We start by telling GHC that we want debug information,</source>
          <target state="translated">まず、このプログラムの実行フローを見てみましょう。まず、GHCにデバッグ情報が必要であることを伝えます。</target>
        </trans-unit>
        <trans-unit id="bf4f9d515969a695864d800b64fe827628e6fe9a" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start with an example GHCi session. You can fire up GHCi with the command &lt;code&gt;ghci&lt;/code&gt;:</source>
          <target state="translated">GHCiセッションの例から始めましょう。コマンド &lt;code&gt;ghci&lt;/code&gt; で GHCiを起動できます：</target>
        </trans-unit>
        <trans-unit id="3484d66cbe4a02744097aac7ef40e2f056cef65a" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take a look at an example:</source>
          <target state="translated">例を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="594c7197a66aa41cb3dd72c23871e7b9c600e29e" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take the example from above, and invoke it from a standalone C program. Here&amp;rsquo;s the C code:</source>
          <target state="translated">上記の例を取り上げ、スタンドアロンのCプログラムから呼び出しましょう。Cコードは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c8a1d1f3d4842f4a6ca73f207182495c844d5cac" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s use quicksort as a running example. Here&amp;rsquo;s the code:</source>
          <target state="translated">実行例としてクイックソートを使用してみましょう。これがコードです：</target>
        </trans-unit>
        <trans-unit id="acb86e263cb9634893bee6f20e365bbfa9867198" translate="yes" xml:space="preserve">
          <source>Let's decode binary data representing illustrated here. In this example the values are in little endian.</source>
          <target state="translated">ここでは、図のようなバイナリデータをデコードしてみましょう。この例では、値はリトルエンディアンで表示されています。</target>
        </trans-unit>
        <trans-unit id="789a59a775f3c2900a64ef818bc09e8989fd5353" translate="yes" xml:space="preserve">
          <source>Let's first define a function that decodes many &lt;code&gt;Trade&lt;/code&gt;s.</source>
          <target state="translated">最初に、多くの &lt;code&gt;Trade&lt;/code&gt; をデコードする関数を定義しましょう。</target>
        </trans-unit>
        <trans-unit id="9e7e5ce190e9c80ce4a8c228bca3542e7865655a" translate="yes" xml:space="preserve">
          <source>LetterNumber</source>
          <target state="translated">LetterNumber</target>
        </trans-unit>
        <trans-unit id="87f5f38833b121fccd9e5087f3c99d3bb46af917" translate="yes" xml:space="preserve">
          <source>Level of detail in the pretty printed output. Level 0 is the least detail.</source>
          <target state="translated">きれいに印刷された出力の詳細のレベル。レベル0が最も詳細なレベルです。</target>
        </trans-unit>
        <trans-unit id="46ea3fc173ca6f3f7f2ab9f2d659dfe92c450434" translate="yes" xml:space="preserve">
          <source>Levity-polymorphic since &lt;em&gt;template-haskell-2.16.0.0&lt;/em&gt;.</source>
          <target state="translated">Levity- &lt;em&gt;template-haskell-2.16.0.0&lt;/em&gt;以降の多態性。</target>
        </trans-unit>
        <trans-unit id="52dcee87fcfc322421d1cb812971dd1afed2aeaf" translate="yes" xml:space="preserve">
          <source>Levity-polymorphic since &lt;em&gt;template-haskell-2.17.0.0&lt;/em&gt;. type TExpQ :: TYPE r -&amp;gt; Kind.Type</source>
          <target state="translated">Levity- &lt;em&gt;template-haskell-2.17.0.0&lt;/em&gt;以降の多態性。タイプTExpQ :: TYPE r-&amp;gt; Kind.Type</target>
        </trans-unit>
        <trans-unit id="25799598a4e8c42a83738d367f796323e13b7b18" translate="yes" xml:space="preserve">
          <source>Lexeme</source>
          <target state="translated">Lexeme</target>
        </trans-unit>
        <trans-unit id="46ace3bdab1ce2e35c935ef17a0a57edf4886910" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;angles p&lt;/code&gt; parses &lt;code&gt;p&lt;/code&gt; enclosed in angle brackets ('&amp;lt;' and '&amp;gt;'), returning the value of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサ &lt;code&gt;angles p&lt;/code&gt; パース &lt;code&gt;p&lt;/code&gt; 密閉型の値戻り角括弧（「&amp;lt;」と「&amp;gt;」）に &lt;code&gt;p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4cc7d61ad991ca5dc420dbacf991b3321c23b4f3" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;braces p&lt;/code&gt; parses &lt;code&gt;p&lt;/code&gt; enclosed in braces ('{' and '}'), returning the value of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサ &lt;code&gt;braces p&lt;/code&gt; パース &lt;code&gt;p&lt;/code&gt; 括弧で囲まれた（「{」と「}」）の値戻り &lt;code&gt;p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b05508eef449259c3da847ba5b8908b337a57ef" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;brackets p&lt;/code&gt; parses &lt;code&gt;p&lt;/code&gt; enclosed in brackets ('[' and ']'), returning the value of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサ &lt;code&gt;brackets p&lt;/code&gt; パース &lt;code&gt;p&lt;/code&gt; 閉鎖性カッコ内（「[」と「]」）の値戻り &lt;code&gt;p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d6f01f6fd61a8c0bb200b1113e901859689cb574" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;colon&lt;/code&gt; parses the character ':' and skips any trailing white space. Returns the string &quot;:&quot;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;colon&lt;/code&gt; は文字「：」を解析し、末尾の空白をスキップします。文字列「：」を返します。</target>
        </trans-unit>
        <trans-unit id="906be22b3485d6af088c4586447a23867836a78c" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;comma&lt;/code&gt; parses the character ',' and skips any trailing white space. Returns the string &quot;,&quot;.</source>
          <target state="translated">語彙素パーサーの &lt;code&gt;comma&lt;/code&gt; は文字「、」を解析し、末尾の空白をスキップします。文字列「、」を返します。</target>
        </trans-unit>
        <trans-unit id="8fa5d226b4524a8f2606ab3fb7b4e7c3152035a2" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;commaSep p&lt;/code&gt; parses &lt;em&gt;zero&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt; separated by &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:comma&quot;&gt;comma&lt;/a&gt;&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;commaSep p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:comma&quot;&gt;comma&lt;/a&gt;&lt;/code&gt; 区切られた&lt;em&gt;0&lt;/em&gt;個以上の &lt;code&gt;p&lt;/code&gt; の出現を解析します。 &lt;code&gt;p&lt;/code&gt; が返す値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="8f0383ea5ef26d7b618c08586a182319e06433ed" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;commaSep p&lt;/code&gt; parses &lt;em&gt;zero&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt; separated by &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:comma&quot;&gt;comma&lt;/a&gt;&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;commaSep p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:comma&quot;&gt;comma&lt;/a&gt;&lt;/code&gt; 区切られた&lt;em&gt;0&lt;/em&gt;個以上の &lt;code&gt;p&lt;/code&gt; の出現を解析します。 &lt;code&gt;p&lt;/code&gt; が返す値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="3b0f682fe5ecece9ab074d848ae3efde0075785f" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;commaSep1 p&lt;/code&gt; parses &lt;em&gt;one&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt; separated by &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:comma&quot;&gt;comma&lt;/a&gt;&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;commaSep1 p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:comma&quot;&gt;comma&lt;/a&gt;&lt;/code&gt; 区切られた&lt;em&gt;1&lt;/em&gt;つ以上の &lt;code&gt;p&lt;/code&gt; の出現を解析します。 &lt;code&gt;p&lt;/code&gt; が返す値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="1527e1889e4d9db5a2a2a401431c80198a7ad8ed" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;commaSep1 p&lt;/code&gt; parses &lt;em&gt;one&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt; separated by &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:comma&quot;&gt;comma&lt;/a&gt;&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;commaSep1 p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:comma&quot;&gt;comma&lt;/a&gt;&lt;/code&gt; 区切られた&lt;em&gt;1&lt;/em&gt;つ以上の &lt;code&gt;p&lt;/code&gt; の出現を解析します。 &lt;code&gt;p&lt;/code&gt; が返す値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="a06e52077d648a539ce51fcce5464792168d2116" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;dot&lt;/code&gt; parses the character '.' and skips any trailing white space. Returns the string &quot;.&quot;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;dot&lt;/code&gt; は文字「。」を解析します 末尾の空白はスキップします。文字列「。」を返します。</target>
        </trans-unit>
        <trans-unit id="5c625c13a8a270d65b20ce25a79ef5d1e88e0c01" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;parens p&lt;/code&gt; parses &lt;code&gt;p&lt;/code&gt; enclosed in parenthesis, returning the value of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサ &lt;code&gt;parens p&lt;/code&gt; パース &lt;code&gt;p&lt;/code&gt; の値を返す、括弧で囲まれ &lt;code&gt;p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09775ca66fe1940d621ab83bb334774f062130fc" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;semiSep p&lt;/code&gt; parses &lt;em&gt;zero&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt; separated by &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:semi&quot;&gt;semi&lt;/a&gt;&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;semiSep p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:semi&quot;&gt;semi&lt;/a&gt;&lt;/code&gt; で区切られた &lt;code&gt;p&lt;/code&gt; 個の&lt;em&gt;0&lt;/em&gt;回以上の出現を解析し&lt;em&gt;ます&lt;/em&gt;。 &lt;code&gt;p&lt;/code&gt; が返す値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="1fde367cf1acc73ec6e48dd7f44d104f7a0066d3" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;semiSep p&lt;/code&gt; parses &lt;em&gt;zero&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt; separated by &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:semi&quot;&gt;semi&lt;/a&gt;&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;semiSep p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:semi&quot;&gt;semi&lt;/a&gt;&lt;/code&gt; で区切られた &lt;code&gt;p&lt;/code&gt; 個の&lt;em&gt;0&lt;/em&gt;回以上の出現を解析し&lt;em&gt;ます&lt;/em&gt;。 &lt;code&gt;p&lt;/code&gt; が返す値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="a56558ecec4b9b3865d84f3538f50974882790bc" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;semiSep1 p&lt;/code&gt; parses &lt;em&gt;one&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt; separated by &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:semi&quot;&gt;semi&lt;/a&gt;&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;semiSep1 p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:semi&quot;&gt;semi&lt;/a&gt;&lt;/code&gt; で区切られた &lt;code&gt;p&lt;/code&gt; の&lt;em&gt;1&lt;/em&gt;つ以上のオカレンスを解析します。 &lt;code&gt;p&lt;/code&gt; が返す値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="f226487b67eb839b478eae118624bbb75f343207" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;semiSep1 p&lt;/code&gt; parses &lt;em&gt;one&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt; separated by &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:semi&quot;&gt;semi&lt;/a&gt;&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;semiSep1 p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:semi&quot;&gt;semi&lt;/a&gt;&lt;/code&gt; で区切られた &lt;code&gt;p&lt;/code&gt; の&lt;em&gt;1&lt;/em&gt;つ以上のオカレンスを解析します。 &lt;code&gt;p&lt;/code&gt; が返す値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="71ba5db9cf8b9d035392754516d0f0d298c6b31e" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;symbol s&lt;/code&gt; parses &lt;code&gt;&lt;a href=&quot;text-parsec-char#v:string&quot;&gt;string&lt;/a&gt;&lt;/code&gt;&lt;code&gt;s&lt;/code&gt; and skips trailing white space.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;symbol s&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;text-parsec-char#v:string&quot;&gt;string&lt;/a&gt;&lt;/code&gt; &lt;code&gt;s&lt;/code&gt; を解析し、末尾の空白をスキップします。</target>
        </trans-unit>
        <trans-unit id="1cae647ca5dc3e8507fd8b9a75e7e569807d779e" translate="yes" xml:space="preserve">
          <source>Lexeme parser |semi| parses the character ';' and skips any trailing white space. Returns the string &quot;;&quot;.</source>
          <target state="translated">Lexeme parser |semi| は ';' を解析し、末尾の空白をスキップします。文字列 &quot;;&quot; を返します。</target>
        </trans-unit>
        <trans-unit id="1a85bb6bdbe773df37163bd57f9f3cbce90e0583" translate="yes" xml:space="preserve">
          <source>Lexical type variables may be alpha-renamed freely, without changing the program.</source>
          <target state="translated">レキシカル型変数は、プログラムを変更することなく自由にアルファリネームすることができます。</target>
        </trans-unit>
        <trans-unit id="dfa4917a631d5ad9efc7afed87e7e85e133625b5" translate="yes" xml:space="preserve">
          <source>LexicalNegation</source>
          <target state="translated">LexicalNegation</target>
        </trans-unit>
        <trans-unit id="acfd3fae981ce83b9a78f156f575113d42a472b8" translate="yes" xml:space="preserve">
          <source>LiberalTypeSynonyms</source>
          <target state="translated">LiberalTypeSynonyms</target>
        </trans-unit>
        <trans-unit id="57b431fa7c23fe6a92d842e080f85a382840075b" translate="yes" xml:space="preserve">
          <source>Libraries can specify this by using &lt;code&gt;&lt;a href=&quot;ghc-exts#t:SPEC&quot;&gt;SPEC&lt;/a&gt;&lt;/code&gt; data type to inform which loops should be aggressively specialized.</source>
          <target state="translated">ライブラリは、 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:SPEC&quot;&gt;SPEC&lt;/a&gt;&lt;/code&gt; データ型を使用してこれを指定し、どのループを積極的に特殊化する必要があるかを通知できます。</target>
        </trans-unit>
        <trans-unit id="150017bb5be516efb13183274c04717c3913f12c" translate="yes" xml:space="preserve">
          <source>Library functions</source>
          <target state="translated">図書館機能</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">License</target>
        </trans-unit>
        <trans-unit id="8f40b70f72540e03b88378ef3507f6d84f38b8e2" translate="yes" xml:space="preserve">
          <source>Licensed under a BSD-style license (see top of the page).</source>
          <target state="translated">BSDスタイルのライセンスでライセンスされています(ページ上部参照)。</target>
        </trans-unit>
        <trans-unit id="7c040e16c5971eb5c4f65496f4403ed7de94405d" translate="yes" xml:space="preserve">
          <source>Licensed under the Glasgow Haskell Compiler License.</source>
          <target state="translated">Glasgow Haskellコンパイラライセンスの下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="8d33f31baff91c27917dcfcd7222cc394cee13fd" translate="yes" xml:space="preserve">
          <source>Lifetime</source>
          <target state="translated">Lifetime</target>
        </trans-unit>
        <trans-unit id="efd0976a0ad531b6453a3782b50f0f3ff5363b1e" translate="yes" xml:space="preserve">
          <source>Lift</source>
          <target state="translated">Lift</target>
        </trans-unit>
        <trans-unit id="69bd6ed6019d0841a40b7376c8be9d0e00a15a4a" translate="yes" xml:space="preserve">
          <source>Lift &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; functions through the type constructor.</source>
          <target state="translated">型コンストラクタを通じて &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="28a4c297cb17de5189cf531fb8cff2247893efd7" translate="yes" xml:space="preserve">
          <source>Lift a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">持ち上げ &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="b11a06f969ecc3525b7fd7eb5bd850c961745651" translate="yes" xml:space="preserve">
          <source>Lift a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">持ち上げ &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="77ad9a4be8766f89114fe4a089c39d2885ba04cb" translate="yes" xml:space="preserve">
          <source>Lift a &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; function through the type constructor.</source>
          <target state="translated">型コンストラクタを通じて &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="57350b28e0ae1579635d1c5f5bfee71f12dc8af6" translate="yes" xml:space="preserve">
          <source>Lift a &lt;code&gt;callCC&lt;/code&gt; operation to the new monad.</source>
          <target state="translated">&lt;code&gt;callCC&lt;/code&gt; 操作を新しいモナドに持ち上げます。</target>
        </trans-unit>
        <trans-unit id="e69559f09d367723fe7abf1f50e359886a0e8931" translate="yes" xml:space="preserve">
          <source>Lift a &lt;code&gt;catchE&lt;/code&gt; operation to the new monad.</source>
          <target state="translated">&lt;code&gt;catchE&lt;/code&gt; 操作を新しいモナドに持ち上げます。</target>
        </trans-unit>
        <trans-unit id="9c3605ce5319733a98246b58994a1c7a3b22a3dc" translate="yes" xml:space="preserve">
          <source>Lift a &lt;code&gt;listen&lt;/code&gt; operation to the new monad.</source>
          <target state="translated">新しいモナドへの &lt;code&gt;listen&lt;/code&gt; 操作を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="898de1bff1c29cda9790c0fed24117c87b00c641" translate="yes" xml:space="preserve">
          <source>Lift a &lt;code&gt;pass&lt;/code&gt; operation to the new monad.</source>
          <target state="translated">&lt;code&gt;pass&lt;/code&gt; 操作を新しいモナドに持ち上げます。</target>
        </trans-unit>
        <trans-unit id="0d0feda6a4614b667af6e9eb00a72f0992d75a5c" translate="yes" xml:space="preserve">
          <source>Lift a IO operation</source>
          <target state="translated">IO操作を解除する</target>
        </trans-unit>
        <trans-unit id="b9039d9d95aa49349189305fdf5c0f23de8d10bb" translate="yes" xml:space="preserve">
          <source>Lift a binary function to actions.</source>
          <target state="translated">2進関数をアクションにリフトします。</target>
        </trans-unit>
        <trans-unit id="4fdb7ea3c747b4ff83d8fd93dbad25981db51967" translate="yes" xml:space="preserve">
          <source>Lift a computation from the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドから計算を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="0e31379847177eab30d30f0126819d393b4805f7" translate="yes" xml:space="preserve">
          <source>Lift a computation from the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. This allows us to run IO computations in any monadic stack, so long as it supports these kinds of operations (i.e. &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; is the base monad for the stack).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドから計算を解除します。これにより、これらの種類の操作をサポートしている限り、任意のモナドスタックでIO計算を実行できます（つまり、 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; がスタックのベースモナドです）。</target>
        </trans-unit>
        <trans-unit id="6fb4cfd1308d8bc1fc2b8075cc399da8778ef019" translate="yes" xml:space="preserve">
          <source>Lift a computation from the argument monad to the constructed monad.</source>
          <target state="translated">引数モナドから構築されたモナドへ計算をリフトします。</target>
        </trans-unit>
        <trans-unit id="755e2bbeb43333564e4df3721333f2c5cb05f108" translate="yes" xml:space="preserve">
          <source>Lift a function to actions. This function may be used as a value for &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; in a &lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">関数をアクションに持ち上げます。この関数は、 &lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; インスタンスの &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; の値として使用できます。</target>
        </trans-unit>
        <trans-unit id="65540f13b21961e922b1b042f1d167b1c9a2abf6" translate="yes" xml:space="preserve">
          <source>Lift a function to actions. This function may be used as a value for &lt;code&gt;&lt;a href=&quot;ghc-base#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; in a &lt;code&gt;&lt;a href=&quot;ghc-base#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">関数をアクションに持ち上げます。この関数は、 &lt;code&gt;&lt;a href=&quot;ghc-base#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; インスタンスの &lt;code&gt;&lt;a href=&quot;ghc-base#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; の値として使用できます。</target>
        </trans-unit>
        <trans-unit id="e3306c8d28d88915bd946a2603ec45578ecd138e" translate="yes" xml:space="preserve">
          <source>Lift a function to an arrow.</source>
          <target state="translated">機能を矢印に持ち上げる。</target>
        </trans-unit>
        <trans-unit id="70e5d47cad9c90bc5aea988bdcc449bc319bf871" translate="yes" xml:space="preserve">
          <source>Lift a monadic action producing code into the typed &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Code&quot;&gt;Code&lt;/a&gt;&lt;/code&gt; representation</source>
          <target state="translated">コードを生成するモナドアクションを、型指定された &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Code&quot;&gt;Code&lt;/a&gt;&lt;/code&gt; 表現に持ち上げます</target>
        </trans-unit>
        <trans-unit id="072c31ba78fc0ac74605cd75f183f4375e32d5b8" translate="yes" xml:space="preserve">
          <source>Lift a monadic action producing code into the typed &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Code&quot;&gt;Code&lt;/a&gt;&lt;/code&gt; representation</source>
          <target state="translated">コードを生成するモナドアクションを、型指定された &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Code&quot;&gt;Code&lt;/a&gt;&lt;/code&gt; 表現に持ち上げます</target>
        </trans-unit>
        <trans-unit id="34e1005428b4115e3bdc892cb79d78caeaad7d73" translate="yes" xml:space="preserve">
          <source>Lift a precedence-insensitive &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#t:ReadP&quot;&gt;ReadP&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readprec#t:ReadPrec&quot;&gt;ReadPrec&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">優先度に依存しない &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#t:ReadP&quot;&gt;ReadP&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readprec#t:ReadPrec&quot;&gt;ReadPrec&lt;/a&gt;&lt;/code&gt; に持ち上げます。</target>
        </trans-unit>
        <trans-unit id="5a927363c52ab42f8173b13c6038ee007ad8a17e" translate="yes" xml:space="preserve">
          <source>Lift a semigroup into &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; forming a &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; according to &lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;: &quot;Any semigroup &lt;code&gt;S&lt;/code&gt; may be turned into a monoid simply by adjoining an element &lt;code&gt;e&lt;/code&gt; not in &lt;code&gt;S&lt;/code&gt; and defining &lt;code&gt;e*e = e&lt;/code&gt; and &lt;code&gt;e*s = s = s*e&lt;/code&gt; for all &lt;code&gt;s &amp;isin; S&lt;/code&gt;.&quot;</source>
          <target state="translated">半群を持ち上げ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 形成 &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に従って&lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;：「任意の半群の &lt;code&gt;S&lt;/code&gt; は、単に要素の隣接によってモノイドに変えることができる &lt;code&gt;e&lt;/code&gt; していない &lt;code&gt;S&lt;/code&gt; と定義 &lt;code&gt;e*e = e&lt;/code&gt; そして、すべて &lt;code&gt;s &amp;isin; S&lt;/code&gt; &lt;code&gt;e*s = s = s*e&lt;/code&gt; です。」</target>
        </trans-unit>
        <trans-unit id="9bff245d149ddf1ae6d16d98ebd9221f1ea4340f" translate="yes" xml:space="preserve">
          <source>Lift a semigroup into &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; forming a &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; according to &lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;: &quot;Any semigroup &lt;code&gt;S&lt;/code&gt; may be turned into a monoid simply by adjoining an element &lt;code&gt;e&lt;/code&gt; not in &lt;code&gt;S&lt;/code&gt; and defining &lt;code&gt;e*e = e&lt;/code&gt; and &lt;code&gt;e*s = s = s*e&lt;/code&gt; for all &lt;code&gt;s &amp;isin; S&lt;/code&gt;.&quot;</source>
          <target state="translated">Lift a semigroup into &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; forming a &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; according to &lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;: &quot;Any semigroup &lt;code&gt;S&lt;/code&gt; may be turned into a monoid simply by adjoining an element &lt;code&gt;e&lt;/code&gt; not in &lt;code&gt;S&lt;/code&gt; and defining &lt;code&gt;e*e = e&lt;/code&gt; and &lt;code&gt;e*s = s = s*e&lt;/code&gt; for all &lt;code&gt;s &amp;isin; S&lt;/code&gt; .&quot;</target>
        </trans-unit>
        <trans-unit id="29850a41c75e24ec5f1d7822fdd746419e6175d1" translate="yes" xml:space="preserve">
          <source>Lift a semigroup into &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; forming a &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; according to &lt;a href=&quot;https://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;: &quot;Any semigroup &lt;code&gt;S&lt;/code&gt; may be turned into a monoid simply by adjoining an element &lt;code&gt;e&lt;/code&gt; not in &lt;code&gt;S&lt;/code&gt; and defining &lt;code&gt;e*e = e&lt;/code&gt; and &lt;code&gt;e*s = s = s*e&lt;/code&gt; for all &lt;code&gt;s &amp;isin; S&lt;/code&gt;.&quot;</source>
          <target state="translated">半群を持ち上げ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 形成 &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に従って&lt;a href=&quot;https://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;：「任意の半群の &lt;code&gt;S&lt;/code&gt; は、単に要素の隣接によってモノイドに変えることができる &lt;code&gt;e&lt;/code&gt; していない &lt;code&gt;S&lt;/code&gt; と定義 &lt;code&gt;e*e = e&lt;/code&gt; そして、すべて &lt;code&gt;s &amp;isin; S&lt;/code&gt; &lt;code&gt;e*s = s = s*e&lt;/code&gt; です。」</target>
        </trans-unit>
        <trans-unit id="a1f4ae6d40699215f86ae7acc6dbd638b4d640c8" translate="yes" xml:space="preserve">
          <source>Lift a semigroup into &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; forming a &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; according to &lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;: &quot;Any semigroup &lt;code&gt;S&lt;/code&gt; may be turned into a monoid simply by adjoining an element &lt;code&gt;e&lt;/code&gt; not in &lt;code&gt;S&lt;/code&gt; and defining &lt;code&gt;e*e = e&lt;/code&gt; and &lt;code&gt;e*s = s = s*e&lt;/code&gt; for all &lt;code&gt;s &amp;isin; S&lt;/code&gt;.&quot;</source>
          <target state="translated">半群を持ち上げ &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 形成 &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に従って&lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;：「任意の半群の &lt;code&gt;S&lt;/code&gt; は、単に要素の隣接によってモノイドに変えることができる &lt;code&gt;e&lt;/code&gt; していない &lt;code&gt;S&lt;/code&gt; と定義 &lt;code&gt;e*e = e&lt;/code&gt; そして、すべて &lt;code&gt;s &amp;isin; S&lt;/code&gt; &lt;code&gt;e*s = s = s*e&lt;/code&gt; です。」</target>
        </trans-unit>
        <trans-unit id="50ae922d71481e0c500a4d32043520930c6c6f12" translate="yes" xml:space="preserve">
          <source>Lift a semigroup into &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; forming a &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; according to &lt;a href=&quot;https://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;: &quot;Any semigroup &lt;code&gt;S&lt;/code&gt; may be turned into a monoid simply by adjoining an element &lt;code&gt;e&lt;/code&gt; not in &lt;code&gt;S&lt;/code&gt; and defining &lt;code&gt;e*e = e&lt;/code&gt; and &lt;code&gt;e*s = s = s*e&lt;/code&gt; for all &lt;code&gt;s &amp;isin; S&lt;/code&gt;.&quot;</source>
          <target state="translated">半群を持ち上げ &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 形成 &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に従って&lt;a href=&quot;https://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;：「任意の半群の &lt;code&gt;S&lt;/code&gt; は、単に要素の隣接によってモノイドに変えることができる &lt;code&gt;e&lt;/code&gt; していない &lt;code&gt;S&lt;/code&gt; と定義 &lt;code&gt;e*e = e&lt;/code&gt; そして、すべて &lt;code&gt;s &amp;isin; S&lt;/code&gt; &lt;code&gt;e*s = s = s*e&lt;/code&gt; です。」</target>
        </trans-unit>
        <trans-unit id="ef6d5d2890f728fc0dec424db983bea6034793d1" translate="yes" xml:space="preserve">
          <source>Lift a semigroup into &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; forming a &lt;code&gt;&lt;a href=&quot;ghc-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; according to &lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;: &quot;Any semigroup &lt;code&gt;S&lt;/code&gt; may be turned into a monoid simply by adjoining an element &lt;code&gt;e&lt;/code&gt; not in &lt;code&gt;S&lt;/code&gt; and defining &lt;code&gt;e*e = e&lt;/code&gt; and &lt;code&gt;e*s = s = s*e&lt;/code&gt; for all &lt;code&gt;s &amp;isin; S&lt;/code&gt;.&quot;</source>
          <target state="translated">半群を持ち上げ &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 形成 &lt;code&gt;&lt;a href=&quot;ghc-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に従って&lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;：「任意の半群の &lt;code&gt;S&lt;/code&gt; は、単に要素の隣接によってモノイドに変えることができる &lt;code&gt;e&lt;/code&gt; していない &lt;code&gt;S&lt;/code&gt; と定義 &lt;code&gt;e*e = e&lt;/code&gt; そして、すべて &lt;code&gt;s &amp;isin; S&lt;/code&gt; &lt;code&gt;e*s = s = s*e&lt;/code&gt; です。」</target>
        </trans-unit>
        <trans-unit id="d9bf2088ff3118acf5a0706a43b2ca5d9acc93eb" translate="yes" xml:space="preserve">
          <source>Lift a semigroup into &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; forming a &lt;code&gt;&lt;a href=&quot;ghc-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; according to &lt;a href=&quot;https://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;: &quot;Any semigroup &lt;code&gt;S&lt;/code&gt; may be turned into a monoid simply by adjoining an element &lt;code&gt;e&lt;/code&gt; not in &lt;code&gt;S&lt;/code&gt; and defining &lt;code&gt;e*e = e&lt;/code&gt; and &lt;code&gt;e*s = s = s*e&lt;/code&gt; for all &lt;code&gt;s &amp;isin; S&lt;/code&gt;.&quot;</source>
          <target state="translated">半群を持ち上げ &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 形成 &lt;code&gt;&lt;a href=&quot;ghc-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に従って&lt;a href=&quot;https://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;：「任意の半群の &lt;code&gt;S&lt;/code&gt; は、単に要素の隣接によってモノイドに変えることができる &lt;code&gt;e&lt;/code&gt; していない &lt;code&gt;S&lt;/code&gt; と定義 &lt;code&gt;e*e = e&lt;/code&gt; そして、すべて &lt;code&gt;s &amp;isin; S&lt;/code&gt; &lt;code&gt;e*s = s = s*e&lt;/code&gt; です。」</target>
        </trans-unit>
        <trans-unit id="f3a10c09a2df5ee40736eca77b005327c3f502e1" translate="yes" xml:space="preserve">
          <source>Lift a semigroup into &lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; forming a &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; according to &lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;: &quot;Any semigroup &lt;code&gt;S&lt;/code&gt; may be turned into a monoid simply by adjoining an element &lt;code&gt;e&lt;/code&gt; not in &lt;code&gt;S&lt;/code&gt; and defining &lt;code&gt;e*e = e&lt;/code&gt; and &lt;code&gt;e*s = s = s*e&lt;/code&gt; for all &lt;code&gt;s &amp;isin; S&lt;/code&gt;.&quot;</source>
          <target state="translated">半群を持ち上げ &lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 形成 &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に従って&lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;：「任意の半群の &lt;code&gt;S&lt;/code&gt; は、単に要素の隣接によってモノイドに変えることができる &lt;code&gt;e&lt;/code&gt; していない &lt;code&gt;S&lt;/code&gt; と定義 &lt;code&gt;e*e = e&lt;/code&gt; そして、すべて &lt;code&gt;s &amp;isin; S&lt;/code&gt; &lt;code&gt;e*s = s = s*e&lt;/code&gt; です。」</target>
        </trans-unit>
        <trans-unit id="5e1fcf4cd57048cb7f11dc48a4d6b768b70babd3" translate="yes" xml:space="preserve">
          <source>Lift a semigroup into &lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; forming a &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; according to &lt;a href=&quot;https://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;: &quot;Any semigroup &lt;code&gt;S&lt;/code&gt; may be turned into a monoid simply by adjoining an element &lt;code&gt;e&lt;/code&gt; not in &lt;code&gt;S&lt;/code&gt; and defining &lt;code&gt;e*e = e&lt;/code&gt; and &lt;code&gt;e*s = s = s*e&lt;/code&gt; for all &lt;code&gt;s &amp;isin; S&lt;/code&gt;.&quot;</source>
          <target state="translated">半群を持ち上げ &lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 形成 &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に従って&lt;a href=&quot;https://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;：「任意の半群の &lt;code&gt;S&lt;/code&gt; は、単に要素の隣接によってモノイドに変えることができる &lt;code&gt;e&lt;/code&gt; していない &lt;code&gt;S&lt;/code&gt; と定義 &lt;code&gt;e*e = e&lt;/code&gt; そして、すべて &lt;code&gt;s &amp;isin; S&lt;/code&gt; &lt;code&gt;e*s = s = s*e&lt;/code&gt; です。」</target>
        </trans-unit>
        <trans-unit id="55317bb47900a6c531bb57912283090eb69391dc" translate="yes" xml:space="preserve">
          <source>Lift a semigroup into &lt;code&gt;&lt;a href=&quot;prelude#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; forming a &lt;code&gt;&lt;a href=&quot;prelude#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; according to &lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;: &quot;Any semigroup &lt;code&gt;S&lt;/code&gt; may be turned into a monoid simply by adjoining an element &lt;code&gt;e&lt;/code&gt; not in &lt;code&gt;S&lt;/code&gt; and defining &lt;code&gt;e*e = e&lt;/code&gt; and &lt;code&gt;e*s = s = s*e&lt;/code&gt; for all &lt;code&gt;s &amp;isin; S&lt;/code&gt;.&quot;</source>
          <target state="translated">半群を持ち上げ &lt;code&gt;&lt;a href=&quot;prelude#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 形成 &lt;code&gt;&lt;a href=&quot;prelude#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に従って&lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;：「任意の半群の &lt;code&gt;S&lt;/code&gt; は、単に要素の隣接によってモノイドに変えることができる &lt;code&gt;e&lt;/code&gt; していない &lt;code&gt;S&lt;/code&gt; と定義 &lt;code&gt;e*e = e&lt;/code&gt; そして、すべて &lt;code&gt;s &amp;isin; S&lt;/code&gt; &lt;code&gt;e*s = s = s*e&lt;/code&gt; です。」</target>
        </trans-unit>
        <trans-unit id="3c1bc5d6a5612d9590c702c04f8fbd95d193c275" translate="yes" xml:space="preserve">
          <source>Lift a semigroup into &lt;code&gt;&lt;a href=&quot;prelude#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; forming a &lt;code&gt;&lt;a href=&quot;prelude#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; according to &lt;a href=&quot;https://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;: &quot;Any semigroup &lt;code&gt;S&lt;/code&gt; may be turned into a monoid simply by adjoining an element &lt;code&gt;e&lt;/code&gt; not in &lt;code&gt;S&lt;/code&gt; and defining &lt;code&gt;e*e = e&lt;/code&gt; and &lt;code&gt;e*s = s = s*e&lt;/code&gt; for all &lt;code&gt;s &amp;isin; S&lt;/code&gt;.&quot;</source>
          <target state="translated">半群を持ち上げ &lt;code&gt;&lt;a href=&quot;prelude#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 形成 &lt;code&gt;&lt;a href=&quot;prelude#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に従って&lt;a href=&quot;https://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;：「任意の半群の &lt;code&gt;S&lt;/code&gt; は、単に要素の隣接によってモノイドに変えることができる &lt;code&gt;e&lt;/code&gt; していない &lt;code&gt;S&lt;/code&gt; と定義 &lt;code&gt;e*e = e&lt;/code&gt; そして、すべて &lt;code&gt;s &amp;isin; S&lt;/code&gt; &lt;code&gt;e*s = s = s*e&lt;/code&gt; です。」</target>
        </trans-unit>
        <trans-unit id="b18efdb14898a61cd6bf3e53b88908b07c899338" translate="yes" xml:space="preserve">
          <source>Lift a ternary function to actions.</source>
          <target state="translated">三項関数をアクションに持ち上げる。</target>
        </trans-unit>
        <trans-unit id="1c6cfea669eba5bd426957f891847f721512f382" translate="yes" xml:space="preserve">
          <source>Lift a unary operation to the new monad.</source>
          <target state="translated">単項演算を新しいモナドに持ち上げる。</target>
        </trans-unit>
        <trans-unit id="46b3af654500c45d1bbe42552320fbf9acf7d7ab" translate="yes" xml:space="preserve">
          <source>Lift a value.</source>
          <target state="translated">値を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="1a088c3e62edefbbd612558fe95e26c16929b0cf" translate="yes" xml:space="preserve">
          <source>Lift an IO operation</source>
          <target state="translated">IO操作を解除する</target>
        </trans-unit>
        <trans-unit id="f3531bf1113fe8b33ad38c7a7731990c8b025668" translate="yes" xml:space="preserve">
          <source>Lift an equality test through the type constructor.</source>
          <target state="translated">型のコンストラクタを介して等質性テストを解除します。</target>
        </trans-unit>
        <trans-unit id="d59a4331fe2b228402b5f804879977d4d2bdbdf8" translate="yes" xml:space="preserve">
          <source>Lift equality tests through the type constructor.</source>
          <target state="translated">型のコンストラクタを使って等質性テストを解除します。</target>
        </trans-unit>
        <trans-unit id="ba141aacd2971ab64cd183f644499403aa27baf6" translate="yes" xml:space="preserve">
          <source>Lift the standard &lt;code&gt;(&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;)&lt;/code&gt; function through the type constructor.</source>
          <target state="translated">型コンストラクタを通じて標準 &lt;code&gt;(&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;)&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="2a5c11e919022ea17cf3e50538bb0b39ab267ca8" translate="yes" xml:space="preserve">
          <source>Lift the standard &lt;code&gt;&lt;a href=&quot;control-deepseq#v:rnf&quot;&gt;rnf&lt;/a&gt;&lt;/code&gt; function through the type constructor.</source>
          <target state="translated">型コンストラクタを通じて標準の &lt;code&gt;&lt;a href=&quot;control-deepseq#v:rnf&quot;&gt;rnf&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="a22f0b12039df26e38242ef4e1b27fd9a2aca7c5" translate="yes" xml:space="preserve">
          <source>Lift the standard &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; function through the type constructor.</source>
          <target state="translated">型コンストラクタを通じて標準の &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="cef4fc8589a89ebe3dab70e8896098b35542b102" translate="yes" xml:space="preserve">
          <source>Lift the standard &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; functions through the type constructor.</source>
          <target state="translated">型コンストラクタを使用して、標準の &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 関数と &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="81beb3415733b0127f91ccfbc68d75371f1bc17c" translate="yes" xml:space="preserve">
          <source>Lift the standard &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; function through the type constructor.</source>
          <target state="translated">型コンストラクターを通じて標準の &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="faeb2e4ce6194f3ee4155e1efd45893a2e939961" translate="yes" xml:space="preserve">
          <source>Lift the standard &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; functions through the type constructor.</source>
          <target state="translated">型コンストラクタを使用して、標準の &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="053aeb1412e2444b0b1a20409a35603dc721e057" translate="yes" xml:space="preserve">
          <source>Lift the standard &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; function through the type constructor.</source>
          <target state="translated">型コンストラクタを使用して、標準の &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="408cf02de66cc6b705154fd2c661de60e644f5b6" translate="yes" xml:space="preserve">
          <source>Lift the standard &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; functions through the type constructor.</source>
          <target state="translated">型コンストラクタを通じて標準の &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 関数と &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="3004afec47fb6a84cae4d9e49047dab3af9ecdbb" translate="yes" xml:space="preserve">
          <source>Lift the standard &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; function through the type constructor.</source>
          <target state="translated">型コンストラクタを通じて標準の &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="f4fbea4d9b31cd33d7694749c6476d3a1af9a3ab" translate="yes" xml:space="preserve">
          <source>Lifted product of functors.</source>
          <target state="translated">ファンクタのリフトド積。</target>
        </trans-unit>
        <trans-unit id="3b10925916ee44f531f851144318a3b5ce0f20aa" translate="yes" xml:space="preserve">
          <source>Lifted sum of functors.</source>
          <target state="translated">ファンクタの総和をリフトしたもの。</target>
        </trans-unit>
        <trans-unit id="babef654d32e20b79299fbdb4e3acce1da353228" translate="yes" xml:space="preserve">
          <source>Lifted, heterogeneous equality. By lifted, we mean that it can be bogus (deferred type error). By heterogeneous, the two types &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; might have different kinds. Because &lt;code&gt;~~&lt;/code&gt; can appear unexpectedly in error messages to users who do not care about the difference between heterogeneous equality &lt;code&gt;~~&lt;/code&gt; and homogeneous equality &lt;code&gt;~&lt;/code&gt;, this is printed as &lt;code&gt;~&lt;/code&gt; unless &lt;code&gt;-fprint-equality-relations&lt;/code&gt; is set.</source>
          <target state="translated">リフトされた異種の平等。持ち上げるとは、それが偽物（据え置き型エラー）になる可能性があることを意味します。異種混合により、2つのタイプ &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; は異なる種類を持つ場合があります。 &lt;code&gt;~~&lt;/code&gt; は、異種の等価性 &lt;code&gt;~~&lt;/code&gt; と均一の等価性 &lt;code&gt;~&lt;/code&gt; の違いを気にしないユーザーへのエラーメッセージに予期せず表示される可能性があるため、 &lt;code&gt;-fprint-equality-relations&lt;/code&gt; が設定されていない限り、これは &lt;code&gt;~&lt;/code&gt; として出力されます。</target>
        </trans-unit>
        <trans-unit id="f4bfbdd16cc189cc5129a0d8ec953d2317a224b0" translate="yes" xml:space="preserve">
          <source>LiftedRep</source>
          <target state="translated">LiftedRep</target>
        </trans-unit>
        <trans-unit id="12c2f75c3b26c4edac3b33e5c51db3b8e36394c9" translate="yes" xml:space="preserve">
          <source>Lifting an applicative</source>
          <target state="translated">アプリケータを持ち上げる</target>
        </trans-unit>
        <trans-unit id="e2c3b2b741daea57fdd436a0412a6ba2f18b6f68" translate="yes" xml:space="preserve">
          <source>Lifting of the &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; class to binary type constructors.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; クラスのバイナリ型コンストラクタへの引き上げ。</target>
        </trans-unit>
        <trans-unit id="44895603faea79f05cd37173f6a4597b6953146e" translate="yes" xml:space="preserve">
          <source>Lifting of the &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; class to unary type constructors.</source>
          <target state="translated">リフティング &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; 単項型コンストラクタへのクラス。</target>
        </trans-unit>
        <trans-unit id="e0a82371cc12bbf7738745a43b619731d3611950" translate="yes" xml:space="preserve">
          <source>Lifting of the &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; class to binary type constructors.</source>
          <target state="translated">リフティング &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; バイナリ型のコンストラクタへのクラス。</target>
        </trans-unit>
        <trans-unit id="7d9b6f54af0f5e9694ecfd7ee7add7a2cc652087" translate="yes" xml:space="preserve">
          <source>Lifting of the &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; class to unary type constructors.</source>
          <target state="translated">リフティング &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; 単項型コンストラクタへのクラス。</target>
        </trans-unit>
        <trans-unit id="ae55fc1bef97cadc36b9661bf1e25f7f4c7e352d" translate="yes" xml:space="preserve">
          <source>Lifting of the &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; class to binary type constructors.</source>
          <target state="translated">リフティング &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; バイナリ型のコンストラクタへのクラス。</target>
        </trans-unit>
        <trans-unit id="86c660f1a1c56586cead2935de6c64b3ef5324c5" translate="yes" xml:space="preserve">
          <source>Lifting of the &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; class to unary type constructors.</source>
          <target state="translated">リフティング &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; 単項型コンストラクタへのクラス。</target>
        </trans-unit>
        <trans-unit id="b2e9206d787342e53328d0f894bfa7fc5940af4a" translate="yes" xml:space="preserve">
          <source>Lifting of the &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; class to binary type constructors.</source>
          <target state="translated">リフティング &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; バイナリ型のコンストラクタへのクラス。</target>
        </trans-unit>
        <trans-unit id="d56ab180af5b8c6b67cd1de105953549f78976c7" translate="yes" xml:space="preserve">
          <source>Lifting of the &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; class to unary type constructors.</source>
          <target state="translated">リフティング &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; 単項型コンストラクタへのクラス。</target>
        </trans-unit>
        <trans-unit id="ef79daca18c86fc7acb004897eb034a72769183c" translate="yes" xml:space="preserve">
          <source>Lifting other operations</source>
          <target state="translated">リフティングその他の作業</target>
        </trans-unit>
        <trans-unit id="70b315b20d2f0763f381b07677fe5fcdd427769f" translate="yes" xml:space="preserve">
          <source>Liftings of Prelude classes</source>
          <target state="translated">プレリュードクラスのリフティング</target>
        </trans-unit>
        <trans-unit id="bbd32f90f691094d13a835f9d8bc070165c84480" translate="yes" xml:space="preserve">
          <source>Liftings of the &lt;code&gt;NFData&lt;/code&gt; class</source>
          <target state="translated">NFData クラスの &lt;code&gt;NFData&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf36ebf7919530abaa3b7a585d3a7f483fb9666d" translate="yes" xml:space="preserve">
          <source>Liftings of the Prelude classes &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; to unary and binary type constructors.</source>
          <target state="translated">Preludeクラスの &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; を単項およびバイナリ型のコンストラクターにリフティングします。</target>
        </trans-unit>
        <trans-unit id="b9662e4165cf70bc0656fd852ce8badb4bccd421" translate="yes" xml:space="preserve">
          <source>Lifts an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; into any &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt;.</source>
          <target state="translated">リフト &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; いずれかに &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e98068ced479359302008df12305e0fa6226acf9" translate="yes" xml:space="preserve">
          <source>Lifts an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; into any &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt;.</source>
          <target state="translated">リフト &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; いずれかに &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="533e09a9bf33161ccd152904f791f9b0ccd0dfa2" translate="yes" xml:space="preserve">
          <source>Lifts an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; into any &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt;.</source>
          <target state="translated">Lifts an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; into any &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3f90827cfa26ca646d28cee985138fed19cc82be" translate="yes" xml:space="preserve">
          <source>Lifts an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; into any &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt;.</source>
          <target state="translated">Lifts an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; into any &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f5521b87bdd2b2ba0107fa6810e0f9218d24ee9b" translate="yes" xml:space="preserve">
          <source>Lifts an &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; into any &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt;.</source>
          <target state="translated">リフト &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; いずれかに &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7d1efb767ef813dfdeb09404aab44cab82ce1aa2" translate="yes" xml:space="preserve">
          <source>Lifts an &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; into any &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt;.</source>
          <target state="translated">リフト &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; いずれかに &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4ea5fc5a99bc5f43e32f54299e4add38a5941b11" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#ghci-cmd-:set&quot;&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/a&gt;, but options set with &lt;a href=&quot;#ghci-cmd-:seti&quot;&gt;&lt;code&gt;:seti&lt;/code&gt;&lt;/a&gt; affect only expressions and commands typed at the prompt, and not modules loaded with &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt; (in contrast, options set with &lt;a href=&quot;#ghci-cmd-:set&quot;&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/a&gt; apply everywhere). See &lt;a href=&quot;#ghci-interactive-options&quot;&gt;Setting options for interactive evaluation only&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:set&quot;&gt; &lt;code&gt;:set&lt;/code&gt; &lt;/a&gt;と同様ですが、&lt;a href=&quot;#ghci-cmd-:seti&quot;&gt; &lt;code&gt;:seti&lt;/code&gt; で&lt;/a&gt;設定されたオプションは、プロンプトで入力された式とコマンドにのみ影響し、&lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; で&lt;/a&gt;読み込まれたモジュールには影響しません（対照的に、&lt;a href=&quot;#ghci-cmd-:set&quot;&gt; &lt;code&gt;:set&lt;/code&gt; で設定された&lt;/a&gt;オプションはどこにでも適用されます）。&lt;a href=&quot;#ghci-interactive-options&quot;&gt;インタラクティブ評価のみのオプションの設定を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d3eb1542266aa6e78b551f4a66f99dca63eb84c5" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:replicateM&quot;&gt;replicateM&lt;/a&gt;&lt;/code&gt;, but discards the result.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:replicateM&quot;&gt;replicateM&lt;/a&gt;&lt;/code&gt; と同様ですが、結果を破棄します。</target>
        </trans-unit>
        <trans-unit id="3ee688d5e3686106a78a8c11143028e7c7c2d867" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:openTempFile&quot;&gt;openTempFile&lt;/a&gt;&lt;/code&gt;, but opens the file in binary mode. See &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; for more comments.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:openTempFile&quot;&gt;openTempFile&lt;/a&gt;&lt;/code&gt; と似ていますが、ファイルをバイナリモードで開きます。その他のコメントについては、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="171756990cca268601ff47e149f013f10d1f0b1d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:replicateM&quot;&gt;replicateM&lt;/a&gt;&lt;/code&gt;, but discards the result.</source>
          <target state="translated">Like &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:replicateM&quot;&gt;replicateM&lt;/a&gt;&lt;/code&gt; , but discards the result.</target>
        </trans-unit>
        <trans-unit id="3e5d1ae0b75edd09252cda3ae684b700669426cc" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:openTempFile&quot;&gt;openTempFile&lt;/a&gt;&lt;/code&gt;, but opens the file in binary mode. See &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; for more comments.</source>
          <target state="translated">Like &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:openTempFile&quot;&gt;openTempFile&lt;/a&gt;&lt;/code&gt; , but opens the file in binary mode. See &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; for more comments.</target>
        </trans-unit>
        <trans-unit id="1abb83e3fff00970acacf5a85cdb8ae50239c4a9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:replicateM&quot;&gt;replicateM&lt;/a&gt;&lt;/code&gt;, but discards the result.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:replicateM&quot;&gt;replicateM&lt;/a&gt;&lt;/code&gt; が、結果を破棄します。</target>
        </trans-unit>
        <trans-unit id="e3c101ba4a684aa998861e15a7cff4ed12d0d488" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:openTempFile&quot;&gt;openTempFile&lt;/a&gt;&lt;/code&gt;, but opens the file in binary mode. See &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-stdhandles#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; for more comments.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:openTempFile&quot;&gt;openTempFile&lt;/a&gt;&lt;/code&gt; と同様ですが、ファイルをバイナリモードで開きます。その他のコメントについては、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-stdhandles#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e95f6be3cd220d7c265e9ff2d6eb81b829a783d7" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;, but lets you specify on which capability the thread should run. Unlike a &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; thread, a thread created by &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; will stay on the same capability for its entire lifetime (&lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; threads can migrate between capabilities according to the scheduling policy). &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; is useful for overriding the scheduling policy when you know in advance how best to distribute the threads.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; ができますが、スレッドが実行すべき機能に指定することができます。 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; スレッドとは異なり、forkOnによって作成されたスレッドは、 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; 期間全体にわたって同じ機能を維持します（ &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; スレッドは、スケジューリングポリシーに従って機能間を移行できます）。 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; は、スレッドの最適な配布方法が事前にわかっている場合に、スケジューリングポリシーをオーバーライドするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="315f04774b37e903ccef1fd017cf5e6c8fb19cad" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;, but the child thread is passed a function that can be used to unmask asynchronous exceptions. This function is typically used in the following way</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; と同様ですが、子スレッドには非同期例外のマスクを解除するために使用できる関数が渡されます。この関数は通常、次のように使用されます</target>
        </trans-unit>
        <trans-unit id="26af205331dd385348a903a75489cae5ac1bc8a2" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;, this sparks off a new thread to run the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computation passed as the first argument, and returns the &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; of the newly created thread.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; と同様に、これは新しいスレッドを開始し、最初の引数として渡された &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 計算を実行し、新しく作成されたスレッドの &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e51a2d5c390f6fe2c3f06d7a141e356abf36b260" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt;, but the child thread is a bound thread, as with &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOS&quot;&gt;forkOS&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt; と似ていますが、子スレッドはforkOSと同様にバインドされたスレッド &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOS&quot;&gt;forkOS&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee5a0feb98209de5e446543c7ee38359b8a7b02e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt;, but the child thread is pinned to the given CPU, as with &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt; が、子スレッドがと同様に、特定のCPUに固定され &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="894deb520e4932d4ccd6a7678d392f4657ad389a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:modifyMVar&quot;&gt;modifyMVar&lt;/a&gt;&lt;/code&gt;, but the &lt;code&gt;IO&lt;/code&gt; action in the second argument is executed with asynchronous exceptions masked.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:modifyMVar&quot;&gt;modifyMVar&lt;/a&gt;&lt;/code&gt; と同様ですが、2番目の引数の &lt;code&gt;IO&lt;/code&gt; アクションは、非同期例外をマスクして実行されます。</target>
        </trans-unit>
        <trans-unit id="b23d745348276319c0475e801e641228506e2414" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:modifyMVar_&quot;&gt;modifyMVar_&lt;/a&gt;&lt;/code&gt;, but the &lt;code&gt;IO&lt;/code&gt; action in the second argument is executed with asynchronous exceptions masked.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:modifyMVar_&quot;&gt;modifyMVar_&lt;/a&gt;&lt;/code&gt; と同様ですが、2番目の引数の &lt;code&gt;IO&lt;/code&gt; アクションは、非同期例外をマスクして実行されます。</target>
        </trans-unit>
        <trans-unit id="cbaf69411b6e48d7f755fce6152d35bbf2f5117d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:withMVar&quot;&gt;withMVar&lt;/a&gt;&lt;/code&gt;, but the &lt;code&gt;IO&lt;/code&gt; action in the second argument is executed with asynchronous exceptions masked.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:withMVar&quot;&gt;withMVar&lt;/a&gt;&lt;/code&gt; と同様ですが、2番目の引数の &lt;code&gt;IO&lt;/code&gt; アクションは、非同期例外をマスクして実行されます。</target>
        </trans-unit>
        <trans-unit id="ddf1b2d2d7438a64e06e7288f0b784895fdb2d25" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#v:modifyTVar-39-&quot;&gt;modifyTVar'&lt;/a&gt;&lt;/code&gt; but the function is a simple state transition that can return a side value which is passed on as the result of the &lt;code&gt;&lt;a href=&quot;control-monad-stm#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#v:modifyTVar-39-&quot;&gt;modifyTVar'&lt;/a&gt;&lt;/code&gt; と同様ですが、関数は、 &lt;code&gt;&lt;a href=&quot;control-monad-stm#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; の結果として渡される副次的な値を返すことができる単純な状態遷移です。</target>
        </trans-unit>
        <trans-unit id="c85aa7d7cdb5b9edc279fc62b53487dd9aa084bc" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-exception#v:bracket&quot;&gt;bracket&lt;/a&gt;&lt;/code&gt;, but only performs the final action if there was an exception raised by the in-between computation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-exception#v:bracket&quot;&gt;bracket&lt;/a&gt;&lt;/code&gt; と同様ですが、中間の計算によって例外が発生した場合にのみ最終アクションを実行します。</target>
        </trans-unit>
        <trans-unit id="428edc72ad0acbe121d8494d1d65e4193ca597f0" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-exception#v:finally&quot;&gt;finally&lt;/a&gt;&lt;/code&gt;, but only performs the final action if there was an exception raised by the computation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-exception#v:finally&quot;&gt;finally&lt;/a&gt;&lt;/code&gt; と同様ですが、計算によって発生した例外があった場合にのみ最終アクションを実行します。</target>
        </trans-unit>
        <trans-unit id="58d823ae8a2d7d414c0d42e7b802e79575732ed8" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt;, but does not pass a &lt;code&gt;restore&lt;/code&gt; action to the argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; と似ていますが、引数に &lt;code&gt;restore&lt;/code&gt; アクションを渡しません。</target>
        </trans-unit>
        <trans-unit id="6caf66653eb22b299f52b1089ebb3605f273b200" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt;, but the masked computation is not interruptible (see &lt;a href=&quot;control-exception#interruptible&quot;&gt;Control.Exception&lt;/a&gt;). THIS SHOULD BE USED WITH GREAT CARE, because if a thread executing in &lt;code&gt;&lt;a href=&quot;control-exception#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; blocks for any reason, then the thread (and possibly the program, if this is the main thread) will be unresponsive and unkillable. This function should only be necessary if you need to mask exceptions around an interruptible operation, and you can guarantee that the interruptible operation will only block for a short period of time.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; と似ていますが、マスクされた計算は中断できません（&lt;a href=&quot;control-exception#interruptible&quot;&gt;Control.Exceptionを&lt;/a&gt;参照）。何らかの理由で &lt;code&gt;&lt;a href=&quot;control-exception#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; で実行されているスレッドがブロックすると、スレッド（およびこれがメインスレッドの場合はプログラム）が応答しなくなり、強制終了できないため、これは優れたケアで使用する必要があります。この関数は、割り込み可能な操作に関する例外をマスクする必要がある場合にのみ必要であり、割り込み可能な操作が短時間だけブロックすることを保証できます。</target>
        </trans-unit>
        <trans-unit id="c4d8e2c728be8dff68d64c2a9d4e55d7a3457b7d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-exception#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt;, but does not pass a &lt;code&gt;restore&lt;/code&gt; action to the argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-exception#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; と似ていますが、引数に &lt;code&gt;restore&lt;/code&gt; アクションを渡しません。</target>
        </trans-unit>
        <trans-unit id="d0c2cdb316924ad0cfcfbad4c5a54c0b89f7946f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-monad#v:foldM&quot;&gt;foldM&lt;/a&gt;&lt;/code&gt;, but discards the result.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#v:foldM&quot;&gt;foldM&lt;/a&gt;&lt;/code&gt; と同様ですが、結果を破棄します。</target>
        </trans-unit>
        <trans-unit id="b96efb08972b89ea81a161e65a91a252070d9475" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-monad#v:replicateM&quot;&gt;replicateM&lt;/a&gt;&lt;/code&gt;, but discards the result.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#v:replicateM&quot;&gt;replicateM&lt;/a&gt;&lt;/code&gt; と同様ですが、結果を破棄します。</target>
        </trans-unit>
        <trans-unit id="b6ab6604b14c9e57db46ecf0ddcd0256f914b9e9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:bracket&quot;&gt;bracket&lt;/a&gt;&lt;/code&gt;, but only performs the final action if an error is thrown by the in-between computation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-catch#v:bracket&quot;&gt;bracket&lt;/a&gt;&lt;/code&gt; と同様ですが、中間の計算によってエラーがスローされた場合にのみ最終アクションを実行します。</target>
        </trans-unit>
        <trans-unit id="b6a432005495b7136cfdf428a9a6ea3acfc5248a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt;, but does not pass a &lt;code&gt;restore&lt;/code&gt; action to the argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-catch#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; と同様ですが、引数に &lt;code&gt;restore&lt;/code&gt; アクションを渡しません。</target>
        </trans-unit>
        <trans-unit id="af33929c8b3cdd326c411d0878af278835603f2d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt;, but the masked computation is not interruptible (see &lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;'s &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt;. WARNING: Only use if you need to mask exceptions around an interruptible operation AND you can guarantee the interruptible operation will only block for a short period of time. Otherwise you render the program/thread unresponsive and/or unkillable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-catch#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; と同様ですが、マスクされた計算は割り込み可能ではありません（&lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;の &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; を参照してください。警告：割り込み可能な操作の周囲の例外をマスクする必要があり、割り込み可能な操作が短時間だけブロックされることを保証できる場合にのみ使用してください。そうしないと、プログラム/スレッドが応答しなくなったり、強制終了できなくなったりします。</target>
        </trans-unit>
        <trans-unit id="ed29ac9ba7c3e179a54bf2966ac9ac7af76e7d0a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt;, but the masked computation is not interruptible (see &lt;a href=&quot;../base-4.15.0.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;'s &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt;. WARNING: Only use if you need to mask exceptions around an interruptible operation AND you can guarantee the interruptible operation will only block for a short period of time. Otherwise you render the program/thread unresponsive and/or unkillable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-catch#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; と同様ですが、マスクされた計算は割り込み可能ではありません（&lt;a href=&quot;../base-4.15.0.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;の &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; を参照してください。警告：割り込み可能な操作の周囲の例外をマスクする必要があり、割り込み可能な操作が短時間だけブロックされることを保証できる場合にのみ使用してください。そうしないと、プログラム/スレッドが応答しなくなったり、強制終了できなくなったりします。</target>
        </trans-unit>
        <trans-unit id="a5f3eb839ad43d64884f153d8e4355f1395cdc6c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt;, but does not pass a &lt;code&gt;restore&lt;/code&gt; action to the argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-catch#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; と同様ですが、引数に &lt;code&gt;restore&lt;/code&gt; アクションを渡しません。</target>
        </trans-unit>
        <trans-unit id="78cdc9f7942398d4390de39bd760476640cca3cf" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;data-bytestring#v:hGet&quot;&gt;hGet&lt;/a&gt;&lt;/code&gt;, except that a shorter &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; may be returned if there are not enough bytes immediately available to satisfy the whole request. &lt;code&gt;&lt;a href=&quot;data-bytestring#v:hGetSome&quot;&gt;hGetSome&lt;/a&gt;&lt;/code&gt; only blocks if there is no data available, and EOF has not yet been reached.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#v:hGet&quot;&gt;hGet&lt;/a&gt;&lt;/code&gt; と同様ですが、リクエスト全体を満たすのに十分なバイトがすぐに利用できない場合、短い &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; が返されることがあります。 &lt;code&gt;&lt;a href=&quot;data-bytestring#v:hGetSome&quot;&gt;hGetSome&lt;/a&gt;&lt;/code&gt; は、利用可能なデータがなく、EOFにまだ到達していない場合にのみブロックします。</target>
        </trans-unit>
        <trans-unit id="22204fd64f738ebaf8d59795481095728e60cafd" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:hGet&quot;&gt;hGet&lt;/a&gt;&lt;/code&gt;, except that a shorter &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; may be returned if there are not enough bytes immediately available to satisfy the whole request. &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:hGetSome&quot;&gt;hGetSome&lt;/a&gt;&lt;/code&gt; only blocks if there is no data available, and EOF has not yet been reached.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:hGet&quot;&gt;hGet&lt;/a&gt;&lt;/code&gt; と同様ですが、リクエスト全体を満たすのに十分なバイトがすぐに利用できない場合、短い &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; が返されることがあります。 &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:hGetSome&quot;&gt;hGetSome&lt;/a&gt;&lt;/code&gt; は、利用可能なデータがなく、EOFにまだ到達していない場合にのみブロックします。</target>
        </trans-unit>
        <trans-unit id="88bc8146cfaa55c674a416c3250cf7fde75cab90" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;data-bytestring-internal#v:unsafeCreate&quot;&gt;unsafeCreate&lt;/a&gt;&lt;/code&gt; but instead of giving the final size of the ByteString, it is just an upper bound. The inner action returns the actual size. Unlike &lt;code&gt;&lt;a href=&quot;data-bytestring-internal#v:createAndTrim&quot;&gt;createAndTrim&lt;/a&gt;&lt;/code&gt; the ByteString is not reallocated if the final size is less than the estimated size.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-internal#v:unsafeCreate&quot;&gt;unsafeCreate&lt;/a&gt;&lt;/code&gt; と同様ですが、ByteStringの最終的なサイズを与えるのではなく、それは単なる上限です。内部アクションは実際のサイズを返します。 &lt;code&gt;&lt;a href=&quot;data-bytestring-internal#v:createAndTrim&quot;&gt;createAndTrim&lt;/a&gt;&lt;/code&gt; とは異なり、ByteStringは、最終サイズが推定サイズより小さい場合、再割り当てされません。</target>
        </trans-unit>
        <trans-unit id="f5d3796594fc3ab685a758f79230f2378e0d143a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; but returning unit in an arbitrary &lt;code&gt;&lt;a href=&quot;control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; context. Allows for convenient use in do-notation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; 似ていますが、任意の &lt;code&gt;&lt;a href=&quot;control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; コンテキストでユニットを返します。do表記での便利な使用を可能にします。</target>
        </trans-unit>
        <trans-unit id="d14b22297f44f3b23085789ee54f433e3be99756" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; but returns the message instead of a third value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; 似ていますが、3番目の値の代わりにメッセージを返します。</target>
        </trans-unit>
        <trans-unit id="94f249d85e854bd365a2caf558548ba6a48c90f7" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt;, but uses &lt;code&gt;&lt;a href=&quot;text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; on the argument to convert it to a &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; に似ていますが、引数に &lt;code&gt;&lt;a href=&quot;text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="bda17b6fe85f48913bc5a5c73b83bf25335feb15" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceM&quot;&gt;traceM&lt;/a&gt;&lt;/code&gt;, but uses &lt;code&gt;&lt;a href=&quot;text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; on the argument to convert it to a &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceM&quot;&gt;traceM&lt;/a&gt;&lt;/code&gt; が、用途は &lt;code&gt;&lt;a href=&quot;text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; に変換するために、引数に &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d4f7e6d83c6d859a27421bd667669770d5a90e1" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceShow&quot;&gt;traceShow&lt;/a&gt;&lt;/code&gt; but returns the shown value instead of a third value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:traceShow&quot;&gt;traceShow&lt;/a&gt;&lt;/code&gt; と同様ですが、3番目の値の代わりに表示された値を返します。</target>
        </trans-unit>
        <trans-unit id="3388029e6ebab6adb5dbdc535cdaa4a63773ee6d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:addForeignPtrFinalizer&quot;&gt;addForeignPtrFinalizer&lt;/a&gt;&lt;/code&gt; but the finalizer is passed an additional environment parameter.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:addForeignPtrFinalizer&quot;&gt;addForeignPtrFinalizer&lt;/a&gt;&lt;/code&gt; と同様ですが、ファイナライザーには追加の環境パラメーターが渡されます。</target>
        </trans-unit>
        <trans-unit id="6f7201461e77cbbffbf975483dea651ac9f115ae" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt; but allows the finalizer to be passed an additional environment parameter to be passed to the finalizer. The environment passed to the finalizer is fixed by the second argument to &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt; と同様ですが、ファイナライザに追加の環境パラメータを渡してファイナライザに渡すことができます。ファイナライザに渡される環境は、 &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt; の 2番目の引数によって修正されます。</target>
        </trans-unit>
        <trans-unit id="61b50bda211ddddaf8be8d611e3ac6aceb8f889d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#v:addForeignPtrFinalizer&quot;&gt;addForeignPtrFinalizer&lt;/a&gt;&lt;/code&gt; but the finalizer is passed an additional environment parameter.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#v:addForeignPtrFinalizer&quot;&gt;addForeignPtrFinalizer&lt;/a&gt;&lt;/code&gt; と同様ですが、ファイナライザーには追加の環境パラメーターが渡されます。</target>
        </trans-unit>
        <trans-unit id="7debe615da856622a94fda2ea5817fa207e70f78" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt; but allows the finalizer to be passed an additional environment parameter to be passed to the finalizer. The environment passed to the finalizer is fixed by the second argument to &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt; と同様ですが、ファイナライザに追加の環境パラメータを渡してファイナライザに渡すことができます。ファイナライザに渡される環境は、 &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt; の 2番目の引数によって修正されます。</target>
        </trans-unit>
        <trans-unit id="64ed7e2ac88ad404c757ebe2bf247c490e1bb7f8" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:malloc&quot;&gt;malloc&lt;/a&gt;&lt;/code&gt; but memory is filled with bytes of value zero.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:malloc&quot;&gt;malloc&lt;/a&gt;&lt;/code&gt; に似ていますが、メモリはゼロの値のバイトで満たされます。</target>
        </trans-unit>
        <trans-unit id="86170fb3c040fb17cc898e1ff2e2691ab6d6babd" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:allocaArray&quot;&gt;allocaArray&lt;/a&gt;&lt;/code&gt;, but add an extra position to hold a special termination element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:allocaArray&quot;&gt;allocaArray&lt;/a&gt;&lt;/code&gt; と同様ですが、特別な終了要素を保持するための位置を追加します。</target>
        </trans-unit>
        <trans-unit id="ac1ab9de75683278e54e5c08a09c39dc2659dca6" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:callocArray0&quot;&gt;callocArray0&lt;/a&gt;&lt;/code&gt;, but allocated memory is filled with bytes of value zero.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:callocArray0&quot;&gt;callocArray0&lt;/a&gt;&lt;/code&gt; と同様ですが、割り当てられたメモリは値0のバイトで埋められます。</target>
        </trans-unit>
        <trans-unit id="31e8f4f3a29d9ebfdb6b5dd33afab7987daa7fac" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:mallocArray&quot;&gt;mallocArray&lt;/a&gt;&lt;/code&gt;, but add an extra position to hold a special termination element.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:mallocArray&quot;&gt;mallocArray&lt;/a&gt;&lt;/code&gt; が、特別な終端要素を保持するための余分な位置を追加します。</target>
        </trans-unit>
        <trans-unit id="e8798d35982e07ff23b6d4dd4f9bdb7568df53ad" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:mallocArray&quot;&gt;mallocArray&lt;/a&gt;&lt;/code&gt;, but allocated memory is filled with bytes of value zero.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:mallocArray&quot;&gt;mallocArray&lt;/a&gt;&lt;/code&gt; と同様ですが、割り当てられたメモリは値がゼロのバイトで埋められます。</target>
        </trans-unit>
        <trans-unit id="56fea7f011d519c7d258e88b7f3d4ae54477fc85" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:withArray&quot;&gt;withArray&lt;/a&gt;&lt;/code&gt;, but a terminator indicates where the array ends</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:withArray&quot;&gt;withArray&lt;/a&gt;&lt;/code&gt; と似ていますが、ターミネータは配列の終了位置を示します</target>
        </trans-unit>
        <trans-unit id="5f5dc7b1ce9daa64f13a0b057b2f35119ac5cd95" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:withArray&quot;&gt;withArray&lt;/a&gt;&lt;/code&gt;, but the action gets the number of values as an additional parameter</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:withArray&quot;&gt;withArray&lt;/a&gt;&lt;/code&gt; と同様ですが、アクションは追加パラメーターとして値の数を取得します</target>
        </trans-unit>
        <trans-unit id="2e4b7f2fe78306ea129c2aaf255ab760c2af8b59" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:withArrayLen&quot;&gt;withArrayLen&lt;/a&gt;&lt;/code&gt;, but a terminator indicates where the array ends</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:withArrayLen&quot;&gt;withArrayLen&lt;/a&gt;&lt;/code&gt; と同様ですが、ターミネータは配列の終了位置を示します</target>
        </trans-unit>
        <trans-unit id="789fc518616c7bbb0baf7f9f6873e5ac8d47ec18" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-error#v:throwIf&quot;&gt;throwIf&lt;/a&gt;&lt;/code&gt;, but discarding the result</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-error#v:throwIf&quot;&gt;throwIf&lt;/a&gt;&lt;/code&gt; と同様ですが、結果を破棄します</target>
        </trans-unit>
        <trans-unit id="c8a36a8d0834f745b3ab8c875279421ca4121094" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-error#v:throwIfNeg&quot;&gt;throwIfNeg&lt;/a&gt;&lt;/code&gt;, but discarding the result</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-error#v:throwIfNeg&quot;&gt;throwIfNeg&lt;/a&gt;&lt;/code&gt; と同様ですが、結果を破棄します</target>
        </trans-unit>
        <trans-unit id="6a1b2b22a37fbf26bc19da6800d4f4f4c18e9196" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-arr#v:index&quot;&gt;index&lt;/a&gt;&lt;/code&gt;, but without checking that the value is in range.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-arr#v:index&quot;&gt;index&lt;/a&gt;&lt;/code&gt; と同様ですが、値が範囲内にあることを確認しません。</target>
        </trans-unit>
        <trans-unit id="fd6ed34fe3d856c29ed47ef21309ed222b27e308" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;, but lets you specify on which capability the thread should run. Unlike a &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; thread, a thread created by &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; will stay on the same capability for its entire lifetime (&lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; threads can migrate between capabilities according to the scheduling policy). &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; is useful for overriding the scheduling policy when you know in advance how best to distribute the threads.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; ができますが、スレッドが実行すべき機能に指定することができます。 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; スレッドとは異なり、forkOnによって作成されたスレッドは、 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; 期間全体にわたって同じ機能を維持します（ &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; スレッドは、スケジューリングポリシーに従って機能間を移行できます）。 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; は、スレッドの最適な配布方法が事前にわかっている場合に、スケジューリングポリシーをオーバーライドするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="8a1ab1b4c3fc6205f7cbc119a5029f50c82ecfa2" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;, but the child thread is passed a function that can be used to unmask asynchronous exceptions. This function is typically used in the following way</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; と同様ですが、子スレッドには非同期例外のマスクを解除するために使用できる関数が渡されます。この関数は通常、次のように使用されます</target>
        </trans-unit>
        <trans-unit id="36c33ff708aca6f019cd5e4f36eb986bb33a1c42" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt;, but the child thread is pinned to the given CPU, as with &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt; が、子スレッドがと同様に、特定のCPUに固定され &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7e718907739536fc11ccba60be322ece4a576f0" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;, but lets you specify on which capability the thread should run. Unlike a &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; thread, a thread created by &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; will stay on the same capability for its entire lifetime (&lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; threads can migrate between capabilities according to the scheduling policy). &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; is useful for overriding the scheduling policy when you know in advance how best to distribute the threads.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; ができますが、スレッドが実行すべき機能に指定することができます。 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; スレッドとは異なり、forkOnによって作成されたスレッドは、 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; 期間全体にわたって同じ機能を維持します（ &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; スレッドは、スケジューリングポリシーに従って機能間を移行できます）。 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; は、スレッドの最適な配布方法が事前にわかっている場合に、スケジューリングポリシーをオーバーライドするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="06b626d6d4d9cc23806065fb84e761850f571140" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;, but the child thread is passed a function that can be used to unmask asynchronous exceptions. This function is typically used in the following way</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; と同様ですが、子スレッドには非同期例外のマスクを解除するために使用できる関数が渡されます。この関数は通常、次のように使用されます</target>
        </trans-unit>
        <trans-unit id="2074e4e1e1d435d659723420ae5b7066c75304a9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt;, but the child thread is pinned to the given CPU, as with &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt; が、子スレッドがと同様に、特定のCPUに固定され &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="03378dafea3e612ebd75747dbec79dd54212c74e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:addForeignPtrFinalizer&quot;&gt;addForeignPtrFinalizer&lt;/a&gt;&lt;/code&gt; but the finalizer is passed an additional environment parameter.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:addForeignPtrFinalizer&quot;&gt;addForeignPtrFinalizer&lt;/a&gt;&lt;/code&gt; と同様ですが、ファイナライザーには追加の環境パラメーターが渡されます。</target>
        </trans-unit>
        <trans-unit id="7f3f4ecabff6e19ca899a6be2fc7069356485a28" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt; but allows the finalizer to be passed an additional environment parameter to be passed to the finalizer. The environment passed to the finalizer is fixed by the second argument to &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt; と同様ですが、ファイナライザに追加の環境パラメータを渡してファイナライザに渡すことができます。ファイナライザに渡される環境は、 &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt; の 2番目の引数によって修正されます。</target>
        </trans-unit>
        <trans-unit id="7ce27041c32b2c7b9dd00240cd18dbacb3f46271" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic&quot;&gt;Generic&lt;/a&gt;&lt;/code&gt;, there is a class &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; that defines a representation &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Rep1&quot;&gt;Rep1&lt;/a&gt;&lt;/code&gt; and conversion functions &lt;code&gt;&lt;a href=&quot;ghc-generics#v:from1&quot;&gt;from1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-generics#v:to1&quot;&gt;to1&lt;/a&gt;&lt;/code&gt;, only that &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; ranges over types of kind &lt;code&gt;* -&amp;gt; *&lt;/code&gt;. (More generally, it can range over types of kind &lt;code&gt;k -&amp;gt; *&lt;/code&gt;, for any kind &lt;code&gt;k&lt;/code&gt;, if the &lt;code&gt;PolyKinds&lt;/code&gt; extension is enabled. More on this later.) The &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; class is also derivable.</source>
          <target state="translated">以下のような &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic&quot;&gt;Generic&lt;/a&gt;&lt;/code&gt; 、クラスがある &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; 表現定義 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Rep1&quot;&gt;Rep1&lt;/a&gt;&lt;/code&gt; および変換機能は &lt;code&gt;&lt;a href=&quot;ghc-generics#v:from1&quot;&gt;from1&lt;/a&gt;&lt;/code&gt; はと &lt;code&gt;&lt;a href=&quot;ghc-generics#v:to1&quot;&gt;to1&lt;/a&gt;&lt;/code&gt; だけで、 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; は一種の種類上の範囲 &lt;code&gt;* -&amp;gt; *&lt;/code&gt; 。（より一般的には、 &lt;code&gt;PolyKinds&lt;/code&gt; 拡張機能が有効になっている場合、任意の種類の &lt;code&gt;k&lt;/code&gt; に対して、種類k- &lt;code&gt;k -&amp;gt; *&lt;/code&gt; 範囲に及ぶ可能性があります。これについては後で &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; ます。）Generic1クラスも派生可能です。</target>
        </trans-unit>
        <trans-unit id="c6bccda987e33fe0bbf298a851536cd1b5e84ab8" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-io#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt;, but does not pass a &lt;code&gt;restore&lt;/code&gt; action to the argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; と似ていますが、引数に &lt;code&gt;restore&lt;/code&gt; アクションを渡しません。</target>
        </trans-unit>
        <trans-unit id="aad2536126d6403f4616d23d084d88d2eb347131" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-io#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt;, but the masked computation is not interruptible (see &lt;a href=&quot;control-exception#interruptible&quot;&gt;Control.Exception&lt;/a&gt;). THIS SHOULD BE USED WITH GREAT CARE, because if a thread executing in &lt;code&gt;&lt;a href=&quot;ghc-io#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; blocks for any reason, then the thread (and possibly the program, if this is the main thread) will be unresponsive and unkillable. This function should only be necessary if you need to mask exceptions around an interruptible operation, and you can guarantee that the interruptible operation will only block for a short period of time.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; と似ていますが、マスクされた計算は中断できません（&lt;a href=&quot;control-exception#interruptible&quot;&gt;Control.Exceptionを&lt;/a&gt;参照）。何らかの理由で &lt;code&gt;&lt;a href=&quot;ghc-io#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; で実行されているスレッドがブロックすると、スレッド（およびこれがメインスレッドの場合はプログラム）が応答しなくなり、強制終了できないため、これは優れたケアで使用する必要があります。この関数は、割り込み可能な操作に関する例外をマスクする必要がある場合にのみ必要であり、割り込み可能な操作が短時間だけブロックすることを保証できます。</target>
        </trans-unit>
        <trans-unit id="8ad819e37fccd377f4f7ea98ffe39aaa59462a5e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-io#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt;, but does not pass a &lt;code&gt;restore&lt;/code&gt; action to the argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; と似ていますが、引数に &lt;code&gt;restore&lt;/code&gt; アクションを渡しません。</target>
        </trans-unit>
        <trans-unit id="8f34379fe53a8f49eef2d4d51e196bbfce89ed5a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt;, but open the file in binary mode. On Windows, reading a file in text mode (which is the default) will translate CRLF to LF, and writing will translate LF to CRLF. This is usually what you want with text files. With binary files this is undesirable; also, as usual under Microsoft operating systems, text mode treats control-Z as EOF. Binary mode turns off all special treatment of end-of-line and end-of-file characters. (See also &lt;code&gt;&lt;a href=&quot;system-io#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt; に似ていますが、ファイルをバイナリモードで開きます。Windowsでは、ファイルをテキストモード（デフォルト）で読み取るとCRLFがLFに変換され、書き込みを行うとLFがCRLFに変換されます。これは通常、テキストファイルで必要なものです。バイナリファイルでは、これは望ましくありません。また、Microsoftオペレーティングシステムでは通常どおり、テキストモードはcontrol-ZをEOFとして扱います。バイナリモードでは、行末文字とファイル終了文字のすべての特別な処理がオフになります。（ &lt;code&gt;&lt;a href=&quot;system-io#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt; も参照してください。）</target>
        </trans-unit>
        <trans-unit id="c6e447be1c8c5966385a7af2bdc9dacccc9d0191" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt;, but opens the file in ordinary blocking mode. This can be useful for opening a FIFO for writing: if we open in non-blocking mode then the open will fail if there are no readers, whereas a blocking open will block until a reader appear.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt; に似ていますが、通常のブロッキングモードでファイルを開きます。これは、FIFOを書き込み用に開く場合に役立ちます。非ブロッキングモードで開くと、リーダーがない場合は開くことができませんが、ブロッキングオープンは、リーダーが表示されるまでブロックされます。</target>
        </trans-unit>
        <trans-unit id="d11ed8ec1f7d4a4f76c34befc3bc8a8f2cef6d9c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-ix#v:index&quot;&gt;index&lt;/a&gt;&lt;/code&gt;, but without checking that the value is in range.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-ix#v:index&quot;&gt;index&lt;/a&gt;&lt;/code&gt; と同様ですが、値が範囲内にあることを確認しません。</target>
        </trans-unit>
        <trans-unit id="11412198fb2aebb6ae9a4f43a11db80ce5c58256" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-show#v:showLitString&quot;&gt;showLitString&lt;/a&gt;&lt;/code&gt; (expand escape characters using Haskell escape conventions), but * break the string into multiple lines * wrap the entire thing in double quotes Example: &lt;code&gt;showMultiLineString &quot;hellongoodbyenblah&quot;&lt;/code&gt; returns &lt;code&gt;[&quot;&quot;hello\n\&quot;, &quot;\goodbyen\&quot;, &quot;\blah&quot;&quot;]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-show#v:showLitString&quot;&gt;showLitString&lt;/a&gt;&lt;/code&gt; （Haskellエスケープ規則を使用してエスケープ文字を拡張する）に似ていますが、*文字列を複数行に分割します*全体を二重引用符で &lt;code&gt;showMultiLineString &quot;hellongoodbyenblah&quot;&lt;/code&gt; ます例：showMultiLineString &quot;hellongoodbyenblah&quot;は &lt;code&gt;[&quot;&quot;hello\n\&quot;, &quot;\goodbyen\&quot;, &quot;\blah&quot;&quot;]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c39ac872c5a458945a6a2759691e5bcbdb98387" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-tophandler#v:runIO&quot;&gt;runIO&lt;/a&gt;&lt;/code&gt;, but in the event of an exception that causes an exit, we don't shut down the system cleanly, we just exit. This is useful in some cases, because the safe exit version will give other threads a chance to clean up first, which might shut down the system in a different way. For example, try</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-tophandler#v:runIO&quot;&gt;runIO&lt;/a&gt;&lt;/code&gt; と同様ですが、終了の原因となる例外が発生した場合は、システムを完全にシャットダウンせずに終了します。安全な終了バージョンは、他のスレッドが最初にクリーンアップする機会を与え、システムを別の方法でシャットダウンする可能性があるため、これはいくつかの場合に役立ちます。たとえば、</target>
        </trans-unit>
        <trans-unit id="92a361d777b7468b2f4fc3ce94a02dd7971e288e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:finally&quot;&gt;finally&lt;/a&gt;&lt;/code&gt;, but only performs the final action if there was an exception raised by the computation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:finally&quot;&gt;finally&lt;/a&gt;&lt;/code&gt; と同様ですが、計算によって発生した例外があった場合にのみ最終アクションを実行します。</target>
        </trans-unit>
        <trans-unit id="d3dcb0071e2c488b5032fe8ef982a6ce42d875b4" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-environment#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt;, but can also read arguments supplied via response files.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-environment#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; と同様ですが、応答ファイルを介して提供される引数を読み取ることもできます。</target>
        </trans-unit>
        <trans-unit id="524c7a43bda4a60c5d96c8d591c7b926a8919edd" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-environment#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt;, but allows blank environment values and mimics the function signature of &lt;code&gt;&lt;a href=&quot;system-posix-env#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;unix&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-environment#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; と似ていますが、空白の環境値を &lt;code&gt;&lt;a href=&quot;system-posix-env#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; し、 &lt;code&gt;unix&lt;/code&gt; パッケージのsetEnvの関数シグネチャを模倣しています。</target>
        </trans-unit>
        <trans-unit id="b797f1a70d1f88521b8770e48825b66c385a7740" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-environment#v:unsetEnv&quot;&gt;unsetEnv&lt;/a&gt;&lt;/code&gt;, but allows for the removal of blank environment variables. May throw an exception if the underlying platform doesn't support unsetting of environment variables.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-environment#v:unsetEnv&quot;&gt;unsetEnv&lt;/a&gt;&lt;/code&gt; と似ていますが、空の環境変数を削除できます。基盤となるプラットフォームが環境変数の設定解除をサポートしていない場合、例外がスローされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8431a8f9693c397e4ecffa5b03a89b83f5c963c3" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-io#v:openBinaryTempFile&quot;&gt;openBinaryTempFile&lt;/a&gt;&lt;/code&gt;, but uses the default file permissions</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:openBinaryTempFile&quot;&gt;openBinaryTempFile&lt;/a&gt;&lt;/code&gt; と同様ですが、デフォルトのファイル権限を使用します</target>
        </trans-unit>
        <trans-unit id="ddc8a70da72ad8f7b98007cd07b86322fc708d18" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt;, but open the file in binary mode. On Windows, reading a file in text mode (which is the default) will translate CRLF to LF, and writing will translate LF to CRLF. This is usually what you want with text files. With binary files this is undesirable; also, as usual under Microsoft operating systems, text mode treats control-Z as EOF. Binary mode turns off all special treatment of end-of-line and end-of-file characters. (See also &lt;code&gt;&lt;a href=&quot;system-io#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt; に似ていますが、ファイルをバイナリモードで開きます。Windowsでは、ファイルをテキストモード（デフォルト）で読み取るとCRLFがLFに変換され、書き込みを行うとLFがCRLFに変換されます。これは通常、テキストファイルで必要なものです。バイナリファイルでは、これは望ましくありません。また、Microsoftオペレーティングシステムでは通常どおり、テキストモードはcontrol-ZをEOFとして扱います。バイナリモードでは、行末文字とファイル終了文字のすべての特別な処理がオフになります。（ &lt;code&gt;&lt;a href=&quot;system-io#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt; も参照してください。）</target>
        </trans-unit>
        <trans-unit id="445dbb3aac3b63578f83ae7ca3264f9470654614" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-io#v:openTempFile&quot;&gt;openTempFile&lt;/a&gt;&lt;/code&gt;, but opens the file in binary mode. See &lt;code&gt;&lt;a href=&quot;system-io#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; for more comments.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:openTempFile&quot;&gt;openTempFile&lt;/a&gt;&lt;/code&gt; と似ていますが、ファイルをバイナリモードで開きます。その他のコメントについては、 &lt;code&gt;&lt;a href=&quot;system-io#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="42d2371aba08fe3ad0e461bdd5e9243b5d4ff47c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-io#v:openTempFile&quot;&gt;openTempFile&lt;/a&gt;&lt;/code&gt;, but uses the default file permissions</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:openTempFile&quot;&gt;openTempFile&lt;/a&gt;&lt;/code&gt; と同様ですが、デフォルトのファイル権限を使用します</target>
        </trans-unit>
        <trans-unit id="68e487cc9bcc812ffdd024d2959aeef2edcaff91" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-posix-files#v:setFileTimes&quot;&gt;setFileTimes&lt;/a&gt;&lt;/code&gt; but timestamps can have sub-second resolution.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-files#v:setFileTimes&quot;&gt;setFileTimes&lt;/a&gt;&lt;/code&gt; と同様ですが、タイムスタンプは1秒未満の解像度を持つことができます。</target>
        </trans-unit>
        <trans-unit id="5fd41ba6952859aa302482f390cdfdfc026468ce" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-posix-files#v:setFileTimesHiRes&quot;&gt;setFileTimesHiRes&lt;/a&gt;&lt;/code&gt; but does not follow symbolic links. This operation is not supported on all platforms. On these platforms, this function will raise an exception.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;system-posix-files#v:setFileTimesHiRes&quot;&gt;setFileTimesHiRes&lt;/a&gt;&lt;/code&gt; が、シンボリックリンクをたどりません。この操作は、すべてのプラットフォームでサポートされているわけではありません。これらのプラットフォームでは、この関数は例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="bf41494a113002bf4517831272153ccf7cd29c3d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-posix-files#v:touchFile&quot;&gt;touchFile&lt;/a&gt;&lt;/code&gt; but does not follow symbolic links. This operation is not supported on all platforms. On these platforms, this function will raise an exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-files#v:touchFile&quot;&gt;touchFile&lt;/a&gt;&lt;/code&gt; と同様ですが、シンボリックリンクをたどりません。この操作は、すべてのプラットフォームでサポートされているわけではありません。これらのプラットフォームでは、この関数は例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="0b8c47891569804ad6ed4ae6fd8eda019375adc3" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:setFileTimes&quot;&gt;setFileTimes&lt;/a&gt;&lt;/code&gt; but timestamps can have sub-second resolution.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:setFileTimes&quot;&gt;setFileTimes&lt;/a&gt;&lt;/code&gt; と同様ですが、タイムスタンプは1秒未満の解像度を持つことができます。</target>
        </trans-unit>
        <trans-unit id="33961ae29501aef7bf09af455c8576676e24ac35" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:setFileTimesHiRes&quot;&gt;setFileTimesHiRes&lt;/a&gt;&lt;/code&gt; but does not follow symbolic links. This operation is not supported on all platforms. On these platforms, this function will raise an exception.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:setFileTimesHiRes&quot;&gt;setFileTimesHiRes&lt;/a&gt;&lt;/code&gt; が、シンボリックリンクをたどりません。この操作は、すべてのプラットフォームでサポートされているわけではありません。これらのプラットフォームでは、この関数は例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="5bbeb7f8e03e4906f3490fc206720d0eab71a223" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:touchFile&quot;&gt;touchFile&lt;/a&gt;&lt;/code&gt; but does not follow symbolic links. This operation is not supported on all platforms. On these platforms, this function will raise an exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:touchFile&quot;&gt;touchFile&lt;/a&gt;&lt;/code&gt; と同様ですが、シンボリックリンクをたどりません。この操作は、すべてのプラットフォームでサポートされているわけではありません。これらのプラットフォームでは、この関数は例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="662c747da0f04cde3ce2ca5a423c4b7f959d2f5f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#v:chainl&quot;&gt;chainl&lt;/a&gt;&lt;/code&gt;, but parses one or more occurrences of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#v:chainl&quot;&gt;chainl&lt;/a&gt;&lt;/code&gt; に似ていますが、1つ以上の &lt;code&gt;p&lt;/code&gt; の出現を解析します。</target>
        </trans-unit>
        <trans-unit id="f8ce7731553d62994a654a2d708daf3c75a28d74" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#v:chainr&quot;&gt;chainr&lt;/a&gt;&lt;/code&gt;, but parses one or more occurrences of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#v:chainr&quot;&gt;chainr&lt;/a&gt;&lt;/code&gt; に似ていますが、 &lt;code&gt;p&lt;/code&gt; の 1つ以上の出現を解析します。</target>
        </trans-unit>
        <trans-unit id="6fee7ff8239ed3fa9381ad7aca490952c09c187d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#v:many&quot;&gt;many&lt;/a&gt;&lt;/code&gt;, but discards the result.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#v:many&quot;&gt;many&lt;/a&gt;&lt;/code&gt; と同様ですが、結果は破棄されます。</target>
        </trans-unit>
        <trans-unit id="b3dabdc0b676ddd52428d8521d1cc42a6a7a8ded" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#v:many1&quot;&gt;many1&lt;/a&gt;&lt;/code&gt;, but discards the result.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#v:many1&quot;&gt;many1&lt;/a&gt;&lt;/code&gt; と同じですが、結果を破棄します。</target>
        </trans-unit>
        <trans-unit id="a81f5f54f0cb0d0d364aaedc68e2c63bc094834c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;INLINE&lt;/code&gt;, the &lt;code&gt;INLINABLE&lt;/code&gt; pragma retains a copy of the original RHS for inlining purposes, and persists it in the interface file, regardless of the size of the RHS.</source>
          <target state="translated">&lt;code&gt;INLINE&lt;/code&gt; と同様に、 &lt;code&gt;INLINABLE&lt;/code&gt; プラグマは、インライン化の目的で元のRHSのコピーを保持し、RHSのサイズに関係なく、それをインターフェースファイルに保持します。</target>
        </trans-unit>
        <trans-unit id="be5585db37b6a8bd5e1a92603fdbe92c2af65ed4" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;compactAdd#&lt;/code&gt;, but retains sharing and cycles during compaction.</source>
          <target state="translated">&lt;code&gt;compactAdd#&lt;/code&gt; と同様ですが、圧縮中に共有と循環を保持します。</target>
        </trans-unit>
        <trans-unit id="211af64297aca58574fb18700a2e7f33892effcf" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;createUpToN&lt;/code&gt;, but also returns an additional value created by the action.</source>
          <target state="translated">&lt;code&gt;createUpToN&lt;/code&gt; と同様ですが、アクションによって作成された追加の値も返します。</target>
        </trans-unit>
        <trans-unit id="ee95b6c97dc7c4bdba6a1af63ea6a5ab1b1b563e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;where&lt;/code&gt; bindings, name shadowing is not allowed within an &lt;code&gt;mdo&lt;/code&gt;-expression or a &lt;code&gt;rec&lt;/code&gt;-block; that is, all the names bound in a single &lt;code&gt;rec&lt;/code&gt; must be distinct. (GHC will complain if this is not the case.)</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; および &lt;code&gt;where&lt;/code&gt; バインディングと同様に、名前のシャドウイングは &lt;code&gt;mdo&lt;/code&gt; 式または &lt;code&gt;rec&lt;/code&gt; ブロック内では許可されません。つまり、1つの &lt;code&gt;rec&lt;/code&gt; にバインドされているすべての名前は異なっている必要があります。（そうでない場合、GHCは不平を言います。）</target>
        </trans-unit>
        <trans-unit id="a0a24c56e1b9f366848073186782d64a2635b134" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;seq&lt;/code&gt;, the argument of &lt;code&gt;&lt;a href=&quot;ghc-exts#v:lazy&quot;&gt;lazy&lt;/a&gt;&lt;/code&gt; can have an unboxed type.</source>
          <target state="translated">&lt;code&gt;seq&lt;/code&gt; と同様に、 &lt;code&gt;&lt;a href=&quot;ghc-exts#v:lazy&quot;&gt;lazy&lt;/a&gt;&lt;/code&gt; の引数はボックス化されていない型を持つことができます。</target>
        </trans-unit>
        <trans-unit id="e6cafc4e6a3f71e112837260dfb933a8b2509697" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;setFileTimesHiRes&lt;/code&gt; but uses a file descriptor instead of a path. This operation is not supported on all platforms. On these platforms, this function will raise an exception.</source>
          <target state="translated">&lt;code&gt;setFileTimesHiRes&lt;/code&gt; と同様ですが、パスの代わりにファイル記述子を使用します。この操作は、すべてのプラットフォームでサポートされているわけではありません。これらのプラットフォームでは、この関数は例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="e4c941a2f6f4373225d42fc487a0f7d303ff143f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;touchFile&lt;/code&gt; but uses a file descriptor instead of a path. This operation is not supported on all platforms. On these platforms, this function will raise an exception.</source>
          <target state="translated">&lt;code&gt;touchFile&lt;/code&gt; と似ていますが、パスの代わりにファイル記述子を使用します。この操作は、すべてのプラットフォームでサポートされているわけではありません。これらのプラットフォームでは、この関数は例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="99cd3e5d292b4b23332a6b2a47c1eadf4be20341" translate="yes" xml:space="preserve">
          <source>Like all other GHCi commands, the output is always displayed in the current GHCi scope (&lt;a href=&quot;#ghci-scope&quot;&gt;What&amp;rsquo;s really in scope at the prompt?&lt;/a&gt;).</source>
          <target state="translated">他のすべてのGHCiコマンドと同様に、出力は常に現在のGHCiスコープに表示されます（&lt;a href=&quot;#ghci-scope&quot;&gt;プロンプトのスコープには実際には何がありますか？&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="ef089d2aac5aa17ae2f559d2e25f348c4bd6fbfe" translate="yes" xml:space="preserve">
          <source>Like many other Haskell data structures, &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;s are lazy. This means that if you place an expensive unevaluated thunk inside an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;, it will be evaluated by the thread that consumes it, not the thread that produced it. Be sure to &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:evaluate&quot;&gt;evaluate&lt;/a&gt;&lt;/code&gt; values to be placed in an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; to the appropriate normal form, or utilize a strict MVar provided by the strict-concurrency package.</source>
          <target state="translated">他の多くのHaskellデータ構造と同様に、 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; は怠惰です。つまり、高価な未評価のサンクを &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 内に配置すると、それを生成したスレッドではなく、それを消費するスレッドによって評価されます。必ず &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:evaluate&quot;&gt;evaluate&lt;/a&gt;&lt;/code&gt; に配置される値 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 適切な正規形にする、または厳格な同時実行性のパッケージで提供される厳格なMVARを利用しています。</target>
        </trans-unit>
        <trans-unit id="bc84715575b0fa376556544c5d2ef3d4d3ec50fb" translate="yes" xml:space="preserve">
          <source>Like many other Haskell data structures, &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;s are lazy. This means that if you place an expensive unevaluated thunk inside an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;, it will be evaluated by the thread that consumes it, not the thread that produced it. Be sure to &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:evaluate&quot;&gt;evaluate&lt;/a&gt;&lt;/code&gt; values to be placed in an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; to the appropriate normal form, or utilize a strict MVar provided by the strict-concurrency package.</source>
          <target state="translated">他の多くのHaskellデータ構造と同様に、 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; は遅延します。これは、高価な未評価のサンクを &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 内に配置すると、それを生成したスレッドではなく、それを消費するスレッドによって評価されることを意味します。必ず &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:evaluate&quot;&gt;evaluate&lt;/a&gt;&lt;/code&gt; に配置される値 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 適切な正規形にする、または厳格な同時実行性のパッケージで提供される厳格なMVARを利用しています。</target>
        </trans-unit>
        <trans-unit id="9ac2766b2f81ed2520ff46eac0020d43ebcf3f72" translate="yes" xml:space="preserve">
          <source>Like many other Haskell data structures, &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;s are lazy. This means that if you place an expensive unevaluated thunk inside an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;, it will be evaluated by the thread that consumes it, not the thread that produced it. Be sure to &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:evaluate&quot;&gt;evaluate&lt;/a&gt;&lt;/code&gt; values to be placed in an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; to the appropriate normal form, or utilize a strict MVar provided by the strict-concurrency package.</source>
          <target state="translated">他の多くのHaskellデータ構造と同様に、 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; は怠惰です。つまり、高価な未評価のサンクを &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 内に配置すると、それを生成したスレッドではなく、それを消費するスレッドによって評価されます。必ず &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:evaluate&quot;&gt;evaluate&lt;/a&gt;&lt;/code&gt; に配置される値 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 適切な正規形にする、または厳格な同時実行性のパッケージで提供される厳格なMVARを利用しています。</target>
        </trans-unit>
        <trans-unit id="37c17ec186b7de612cb654acafdf92b9e7cdfb9b" translate="yes" xml:space="preserve">
          <source>Like other pragmas, &lt;a href=&quot;#pragma-RULES&quot;&gt;&lt;code&gt;RULES&lt;/code&gt;&lt;/a&gt; pragmas are always checked for scope errors, and are typechecked. Typechecking means that the LHS and RHS of a rule are typechecked, and must have the same type. However, rules are only &lt;em&gt;enabled&lt;/em&gt; if the &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt;&lt;code&gt;-fenable-rewrite-rules&lt;/code&gt;&lt;/a&gt; flag is on (see &lt;a href=&quot;#rule-semantics&quot;&gt;Semantics&lt;/a&gt;).</source>
          <target state="translated">Like other pragmas, &lt;a href=&quot;#pragma-RULES&quot;&gt; &lt;code&gt;RULES&lt;/code&gt; &lt;/a&gt; pragmas are always checked for scope errors, and are typechecked. Typechecking means that the LHS and RHS of a rule are typechecked, and must have the same type. However, rules are only &lt;em&gt;enabled&lt;/em&gt; if the &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt; &lt;code&gt;-fenable-rewrite-rules&lt;/code&gt; &lt;/a&gt; flag is on (see &lt;a href=&quot;#rule-semantics&quot;&gt;Semantics&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="3447df87a2c63f15a9f31c14cbaf487254b0da44" translate="yes" xml:space="preserve">
          <source>Like other pragmas, &lt;code&gt;RULE&lt;/code&gt; pragmas are always checked for scope errors, and are typechecked. Typechecking means that the LHS and RHS of a rule are typechecked, and must have the same type. However, rules are only &lt;em&gt;enabled&lt;/em&gt; if the &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt;&lt;code&gt;-fenable-rewrite-rules&lt;/code&gt;&lt;/a&gt; flag is on (see &lt;a href=&quot;#rule-semantics&quot;&gt;Semantics&lt;/a&gt;).</source>
          <target state="translated">他のプラグマと同様に、 &lt;code&gt;RULE&lt;/code&gt; プラグマは常にスコープエラーがチェックされ、型チェックされます。タイプチェックは、ルールのLHSとRHSがタイプチェックされ、同じタイプでなければならないことを意味します。ただし、ルールは&lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt; &lt;code&gt;-fenable-rewrite-rules&lt;/code&gt; &lt;/a&gt;フラグがオンの場合にのみ&lt;em&gt;有効になり&lt;/em&gt;ます（「&lt;a href=&quot;#rule-semantics&quot;&gt;セマンティクス&lt;/a&gt;」を参照）。</target>
        </trans-unit>
        <trans-unit id="8cd118e46b9ceb5fcb2a8499ea3916b27ce3f424" translate="yes" xml:space="preserve">
          <source>Like the function &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt;, but appends a stack trace to the error message if one is available.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; と同様ですが、スタックトレースが利用可能な場合は、エラーメッセージにスタックトレースを追加します。</target>
        </trans-unit>
        <trans-unit id="2b393f82e4729c2fe510cc4df3e3b9d2a29de00f" translate="yes" xml:space="preserve">
          <source>Like with &lt;a href=&quot;#assoc-inst&quot;&gt;Associated instances&lt;/a&gt;, it is possible to explicitly bind type and kind variables in default declarations with a &lt;code&gt;forall&lt;/code&gt; by using the &lt;a href=&quot;#extension-ExplicitForAll&quot;&gt;&lt;code&gt;ExplicitForAll&lt;/code&gt;&lt;/a&gt; language extension.</source>
          <target state="translated">Like with &lt;a href=&quot;#assoc-inst&quot;&gt;Associated instances&lt;/a&gt;, it is possible to explicitly bind type and kind variables in default declarations with a &lt;code&gt;forall&lt;/code&gt; by using the &lt;a href=&quot;#extension-ExplicitForAll&quot;&gt; &lt;code&gt;ExplicitForAll&lt;/code&gt; &lt;/a&gt; language extension.</target>
        </trans-unit>
        <trans-unit id="890d847e558aebfae92e81761cfeaf99e3ee4aed" translate="yes" xml:space="preserve">
          <source>Like with &lt;a href=&quot;#assoc-inst&quot;&gt;Associated instances&lt;/a&gt;, it is possible to explicitly bind type and kind variables in default declarations with a &lt;code&gt;forall&lt;/code&gt; by using the &lt;a href=&quot;explicit_forall#extension-ExplicitForAll&quot;&gt;&lt;code&gt;ExplicitForAll&lt;/code&gt;&lt;/a&gt; language extension.</source>
          <target state="translated">関連付けられた&lt;a href=&quot;#assoc-inst&quot;&gt;インスタンス&lt;/a&gt;と同様に、&lt;a href=&quot;explicit_forall#extension-ExplicitForAll&quot;&gt; &lt;code&gt;ExplicitForAll&lt;/code&gt; &lt;/a&gt;言語拡張を使用して、デフォルト宣言の型変数と種類変数を &lt;code&gt;forall&lt;/code&gt; に明示的にバインドすることができます。</target>
        </trans-unit>
        <trans-unit id="fe3d21a89ef91e153f239215fab5185af22cd639" translate="yes" xml:space="preserve">
          <source>Likewise, the &lt;code&gt;&lt;a href=&quot;control-applicative#v:-42--62-&quot;&gt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; operator in some &lt;code&gt;&lt;a href=&quot;control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; functors, and &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; in some monads are conditionally lazy and can &lt;em&gt;short-circuit&lt;/em&gt; a chain of computations. The below folds will terminate as early as possible, but even infinite loops can be productive here, when evaluated solely for their stream of IO side-effects. See &lt;a href=&quot;data-traversable#validation&quot;&gt;Data.Traversable&lt;/a&gt; for some additional discussion.</source>
          <target state="translated">同様に、一部の &lt;code&gt;&lt;a href=&quot;control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; ファンクターの &lt;code&gt;&lt;a href=&quot;control-applicative#v:-42--62-&quot;&gt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; 演算子、および一部のモナドの &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; 演算子は条件付きで遅延し、一連の計算を&lt;em&gt;短絡さ&lt;/em&gt;せる可能性があります。以下のフォールドは可能な限り早期に終了しますが、IOの副作用のストリームについてのみ評価すると、無限ループでさえここで生産的になる可能性があります。追加の説明については、&lt;a href=&quot;data-traversable#validation&quot;&gt;Data.Traversable&lt;/a&gt;を参照してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="24d948e4bdbe5b8224bbc0dfbab1923fab00b98e" translate="yes" xml:space="preserve">
          <source>Limit</source>
          <target state="translated">Limit</target>
        </trans-unit>
        <trans-unit id="70044be8751bf68d4de8b7945e5586e80acb7cb2" translate="yes" xml:space="preserve">
          <source>Limit the number of lines stored in the history.</source>
          <target state="translated">履歴に保存される行数を制限します。</target>
        </trans-unit>
        <trans-unit id="ea9676003762818513c636984faeaa0ae356839a" translate="yes" xml:space="preserve">
          <source>Line</source>
          <target state="translated">Line</target>
        </trans-unit>
        <trans-unit id="16fd51c8ab5fd356a1d23d48f4531237b879e504" translate="yes" xml:space="preserve">
          <source>Line and character position</source>
          <target state="translated">線と文字の位置</target>
        </trans-unit>
        <trans-unit id="702b953a8e73a9c6b4402eb231caf05c182af7f6" translate="yes" xml:space="preserve">
          <source>Line length.</source>
          <target state="translated">線の長さ。</target>
        </trans-unit>
        <trans-unit id="054f11de365cf7821b8d7f5863692c6cc9051ab6" translate="yes" xml:space="preserve">
          <source>Line number information necessary to map instruction addresses to line numbers in the source program.</source>
          <target state="translated">命令アドレスをソースプログラムの行番号に対応付けるために必要な行番号情報です。</target>
        </trans-unit>
        <trans-unit id="8087784b605286ef9ef2960647bad3300431de2b" translate="yes" xml:space="preserve">
          <source>LineBuffering</source>
          <target state="translated">LineBuffering</target>
        </trans-unit>
        <trans-unit id="281752024edc1ab9c1f92c79633d55bc44eacd94" translate="yes" xml:space="preserve">
          <source>LineSeparator</source>
          <target state="translated">LineSeparator</target>
        </trans-unit>
        <trans-unit id="37ab103648f9cbe2c3ec3bdbc19ef7d8e446b187" translate="yes" xml:space="preserve">
          <source>Linear and multiplicity-polymorphic arrows are &lt;em&gt;always declared&lt;/em&gt;, never inferred. That is, if you don&amp;rsquo;t give an appropriate type signature to a function, it will be inferred as being a regular function of type &lt;code&gt;a -&amp;gt; b&lt;/code&gt;.</source>
          <target state="translated">線形および多重度-多形矢印は&lt;em&gt;常に宣言され&lt;/em&gt;、推測されること&lt;em&gt;は&lt;/em&gt;ありません。つまり、関数に適切な型シグネチャを与えないと、型a- &lt;code&gt;a -&amp;gt; b&lt;/code&gt; 通常の関数であると推測されます。</target>
        </trans-unit>
        <trans-unit id="6426e1d3a720f52e0ea553a3684fcfe15d605bda" translate="yes" xml:space="preserve">
          <source>Linear types are still considered experimental and come with several limitations. If you have read the full design in the proposal (see &lt;a href=&quot;#linear-types-references&quot;&gt;Design and further reading&lt;/a&gt; below), here is a run down of the missing pieces.</source>
          <target state="translated">線形型はまだ実験的なものと見なされており、いくつかの制限があります。提案の完全なデザインを読んだ場合（&lt;a href=&quot;#linear-types-references&quot;&gt;デザインと&lt;/a&gt;以下の詳細を参照）、不足している部分の概要を以下に示します。</target>
        </trans-unit>
        <trans-unit id="d34b558f3fd7232f2c7a2fa63c6617836c82a559" translate="yes" xml:space="preserve">
          <source>LinearTypes</source>
          <target state="translated">LinearTypes</target>
        </trans-unit>
        <trans-unit id="e3b93cdf9997876ced65e2c007d6364b7d627da6" translate="yes" xml:space="preserve">
          <source>LinesAffected</source>
          <target state="translated">LinesAffected</target>
        </trans-unit>
        <trans-unit id="eb1cda622d5b91f2847faea4f7c037e360353e7a" translate="yes" xml:space="preserve">
          <source>Link all passed files into a static library suitable for linking. To control the name, use the &lt;code&gt;-o ⟨file⟩&lt;/code&gt; option as usual. The default name is &lt;code&gt;liba.a&lt;/code&gt;.</source>
          <target state="translated">渡されたすべてのファイルを、リンクに適した静的ライブラリにリンクします。名前を制御するには、通常どおり &lt;code&gt;-o ⟨file⟩&lt;/code&gt; オプションを使用します。デフォルト名は &lt;code&gt;liba.a&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1f4a6bdd90ed3ff452ae2e2964b9b2c357b03f32" translate="yes" xml:space="preserve">
          <source>Link in library ⟨lib⟩</source>
          <target state="translated">ライブラリ内のリンク ⟨lib⟩</target>
        </trans-unit>
        <trans-unit id="d9cd1bd51d029ba12d6908919f6358ef8b55fb4f" translate="yes" xml:space="preserve">
          <source>Link in the ⟨lib⟩ library. On Unix systems, this will be in a file called &lt;code&gt;lib&lt;em&gt;lib&lt;/em&gt;.a&lt;/code&gt; or &lt;code&gt;lib&lt;em&gt;lib&lt;/em&gt;.so&lt;/code&gt; which resides somewhere on the library directories path.</source>
          <target state="translated">「lib」ライブラリにリンクします。Unixシステムでは、これは、 &lt;code&gt;lib&lt;em&gt;lib&lt;/em&gt;.a&lt;/code&gt; または &lt;code&gt;lib&lt;em&gt;lib&lt;/em&gt;.so&lt;/code&gt; あり、ライブラリディレクトリパスのどこかに存在します。</target>
        </trans-unit>
        <trans-unit id="fcaae5f3f12bcb52dc5f90152a65e0bdbec2c943" translate="yes" xml:space="preserve">
          <source>Link the program with a debugging version of the runtime system. The debugging runtime turns on numerous assertions and sanity checks, and provides extra options for producing debugging output at runtime (run the program with &lt;code&gt;+RTS -?&lt;/code&gt; to see a list).</source>
          <target state="translated">プログラムをランタイムシステムのデバッグバージョンにリンクします。デバッグランタイムは多数のアサーションとサニティチェックをオンにし、実行時にデバッグ出力を生成するための追加オプションを提供します（ &lt;code&gt;+RTS -?&lt;/code&gt; プログラムを実行してリストを表示します）。</target>
        </trans-unit>
        <trans-unit id="aa02a71e52144b5208df7f7113d1f3bb6b6ff3a1" translate="yes" xml:space="preserve">
          <source>Link the program with the &amp;ldquo;eventlog&amp;rdquo; version of the runtime system. A program linked in this way can generate a runtime trace of events (such as thread start/stop) to a binary file &lt;code&gt;&lt;em&gt;program&lt;/em&gt;.eventlog&lt;/code&gt;, which can then be interpreted later by various tools. See &lt;a href=&quot;runtime_control#rts-eventlog&quot;&gt;Tracing&lt;/a&gt; for more information.</source>
          <target state="translated">プログラムをランタイムシステムの「イベントログ」バージョンにリンクします。このようにリンクされたプログラムは、イベントの実行時トレース（スレッドの開始/停止など）をバイナリファイル &lt;code&gt;&lt;em&gt;program&lt;/em&gt;.eventlog&lt;/code&gt; できます。これは、後でさまざまなツールで解釈できます。詳細については、&lt;a href=&quot;runtime_control#rts-eventlog&quot;&gt;トレース&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="74630b9250c4419175d9406e09096a825645aee9" translate="yes" xml:space="preserve">
          <source>Link the program with the &amp;ldquo;threaded&amp;rdquo; version of the runtime system. The threaded runtime system is so-called because it manages multiple OS threads, as opposed to the default runtime system which is purely single-threaded.</source>
          <target state="translated">プログラムを「スレッド化された」バージョンのランタイムシステムにリンクします。スレッド化されたランタイムシステムは、純粋に単一スレッドであるデフォルトのランタイムシステムとは対照的に、複数のOSスレッドを管理するため、いわゆるです。</target>
        </trans-unit>
        <trans-unit id="e83840f20750c680ebae2cc09ff4df519b21aac5" translate="yes" xml:space="preserve">
          <source>Link the runtime when generating a shared or static library</source>
          <target state="translated">共有ライブラリやスタティックライブラリの生成時にランタイムをリンクする</target>
        </trans-unit>
        <trans-unit id="a0ad1ef7b6972d54e70158733112a5d174213f28" translate="yes" xml:space="preserve">
          <source>LinkCount</source>
          <target state="translated">LinkCount</target>
        </trans-unit>
        <trans-unit id="05669bed092bbe0873ad6674e013a8667f68fe04" translate="yes" xml:space="preserve">
          <source>LinkLimit</source>
          <target state="translated">LinkLimit</target>
        </trans-unit>
        <trans-unit id="9fa999dc4d8eab9b8471e5d9aa06c5de2dbcdca7" translate="yes" xml:space="preserve">
          <source>Linking type and value level</source>
          <target state="translated">型と値のレベルを連動させる</target>
        </trans-unit>
        <trans-unit id="a1fffaaafb7cc996685bceb829c053cc4f7de43d" translate="yes" xml:space="preserve">
          <source>List</source>
          <target state="translated">List</target>
        </trans-unit>
        <trans-unit id="2be1eb803afe605ac5bf0ed36710e67b7cf3ad56" translate="yes" xml:space="preserve">
          <source>List all enabled language extensions.</source>
          <target state="translated">有効な言語拡張機能をすべてリストアップします。</target>
        </trans-unit>
        <trans-unit id="4ada7d3f43f0d02ac75493517b3e3afc1c377d07" translate="yes" xml:space="preserve">
          <source>List all of the files or folders beginning with this path.</source>
          <target state="translated">このパスで始まるすべてのファイルまたはフォルダをリストアップします。</target>
        </trans-unit>
        <trans-unit id="d5c60e0858274aa75bbb19a9a06cc630a1d46b1c" translate="yes" xml:space="preserve">
          <source>List all types collected for expressions and (local) bindings currently loaded (while &lt;a href=&quot;#ghci-cmd-:set%20+c&quot;&gt;&lt;code&gt;:set +c&lt;/code&gt;&lt;/a&gt; was active) with their respective source-code span, e.g.</source>
          <target state="translated">現在読み込まれている式と（ローカル）バインディングのために収集されたすべてのタイプをリストします（&lt;a href=&quot;#ghci-cmd-:set%20+c&quot;&gt; &lt;code&gt;:set +c&lt;/code&gt; &lt;/a&gt;がアクティブであった場合）、それぞれのソースコードスパンを使用して、たとえば</target>
        </trans-unit>
        <trans-unit id="ba8a89a77fc9557b8e8c8d251c8ead9fbdaeb7a1" translate="yes" xml:space="preserve">
          <source>List comprehensions</source>
          <target state="translated">一覧表の理解度</target>
        </trans-unit>
        <trans-unit id="3f051a8062e5fac28d61cc364f9f1acc708cd461" translate="yes" xml:space="preserve">
          <source>List index (subscript) operator, starting from 0. It is an instance of the more general &lt;code&gt;&lt;a href=&quot;data-list#v:genericIndex&quot;&gt;genericIndex&lt;/a&gt;&lt;/code&gt;, which takes an index of any integral type.</source>
          <target state="translated">リストインデックス（添字）演算子。0から始まります。これは、より一般的な &lt;code&gt;&lt;a href=&quot;data-list#v:genericIndex&quot;&gt;genericIndex&lt;/a&gt;&lt;/code&gt; のインスタンスであり、整数型のインデックスを取ります。</target>
        </trans-unit>
        <trans-unit id="754adb8bd3be1191610eae9f21f2c4cd71a1162d" translate="yes" xml:space="preserve">
          <source>List notation, such as &lt;code&gt;[x,y]&lt;/code&gt; or &lt;code&gt;[m..n]&lt;/code&gt; can also be treated via rebindable syntax if you use &lt;code&gt;-XOverloadedLists&lt;/code&gt;; see &lt;a href=&quot;#overloaded-lists&quot;&gt;Overloaded lists&lt;/a&gt;.</source>
          <target state="translated">などリスト表記、 &lt;code&gt;[x,y]&lt;/code&gt; または &lt;code&gt;[m..n]&lt;/code&gt; を使用する場合も、再束縛構文を介して処理することができる &lt;code&gt;-XOverloadedLists&lt;/code&gt; を、&lt;a href=&quot;#overloaded-lists&quot;&gt;オーバーロードされたリストを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f89f6b34299ebe78927d05ee13933db3f881f13b" translate="yes" xml:space="preserve">
          <source>List notation, such as &lt;code&gt;[x,y]&lt;/code&gt; or &lt;code&gt;[m..n]&lt;/code&gt; can also be treated via rebindable syntax if you use &lt;code&gt;-XOverloadedLists&lt;/code&gt;; see &lt;a href=&quot;overloaded_lists#overloaded-lists&quot;&gt;Overloaded lists&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;[x,y]&lt;/code&gt; や &lt;code&gt;[m..n]&lt;/code&gt; などのリスト表記も、-XOverloadedListsを使用すると、 &lt;code&gt;-XOverloadedLists&lt;/code&gt; 可能な構文で処理できます。&lt;a href=&quot;overloaded_lists#overloaded-lists&quot;&gt;オーバーロードされたリストを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="920d73e463b5cf5eed14ea6d6e2da4031afeaa2c" translate="yes" xml:space="preserve">
          <source>List of associations</source>
          <target state="translated">協会一覧</target>
        </trans-unit>
        <trans-unit id="6b46c2d4b10caadfeb5b6a9c62ffb97de0f2b1d4" translate="yes" xml:space="preserve">
          <source>List of elements of a structure, from left to right.</source>
          <target state="translated">構造体の要素を左から右へ一覧表示します。</target>
        </trans-unit>
        <trans-unit id="33a6deba502bb1454d149d3118ad9c84618f053e" translate="yes" xml:space="preserve">
          <source>List of elements of a structure, from left to right. If the entire list is intended to be reduced via a fold, just fold the structure directly bypassing the list.</source>
          <target state="translated">構造体の要素を左から右に並べたリスト。リスト全体が折り返しで縮小されることを意図している場合は、リストを迂回して構造体を直接折り返すだけです。</target>
        </trans-unit>
        <trans-unit id="2d083b1175ab43fb5ee46569148ded37582637a2" translate="yes" xml:space="preserve">
          <source>List of lazy functions</source>
          <target state="translated">遅延機能の一覧</target>
        </trans-unit>
        <trans-unit id="72682d906b86160d1433288b665aba1ecaebee43" translate="yes" xml:space="preserve">
          <source>List of short-circuit functions</source>
          <target state="translated">短絡の機能一覧</target>
        </trans-unit>
        <trans-unit id="09c9b0a56436b310fefac1b1b89437d88df5a11b" translate="yes" xml:space="preserve">
          <source>List of strict functions</source>
          <target state="translated">厳密な機能の一覧</target>
        </trans-unit>
        <trans-unit id="7094bd5e681efcce9038e6d995bf2d060fc85079" translate="yes" xml:space="preserve">
          <source>List operations</source>
          <target state="translated">リスト操作</target>
        </trans-unit>
        <trans-unit id="5f897200e3f1c653befd6edfbddc4172f95a6a57" translate="yes" xml:space="preserve">
          <source>List patterns are also overloaded. When the &lt;code&gt;OverloadedLists&lt;/code&gt; extension is turned on, these definitions are desugared as follows</source>
          <target state="translated">リストパターンもオーバーロードされます。 &lt;code&gt;OverloadedLists&lt;/code&gt; 拡張がオンの場合、これらの定義は次のように削除されます</target>
        </trans-unit>
        <trans-unit id="76603bea3fde9f607769b026d910df0dfc04acfc" translate="yes" xml:space="preserve">
          <source>List the active breakpoints.</source>
          <target state="translated">アクティブなブレークポイントをリストアップします。</target>
        </trans-unit>
        <trans-unit id="bb72cfc84c631772e908d5b0c3a4205d0c9649a0" translate="yes" xml:space="preserve">
          <source>List the active evaluations that are stopped at breakpoints.</source>
          <target state="translated">ブレークポイントで停止しているアクティブな評価を一覧表示します。</target>
        </trans-unit>
        <trans-unit id="d92d0a195ad4655dbddbf91fc436d0a6b999cd58" translate="yes" xml:space="preserve">
          <source>List the frames of a stack trace.</source>
          <target state="translated">スタックトレースのフレームを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="b46a3709f9c0d5af2b972568db4b210d8669456f" translate="yes" xml:space="preserve">
          <source>List transformations</source>
          <target state="translated">リスト変換</target>
        </trans-unit>
        <trans-unit id="105d6ef74784f6217af666c539a87096be10b1b3" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;language-haskell-th-pprlib#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-pprlib#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; のリストバージョン</target>
        </trans-unit>
        <trans-unit id="f8e9efe55b79317a3e563e7e8e801673f73f1521" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;language-haskell-th-pprlib#v:-60--43--62-&quot;&gt;&amp;lt;+&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-pprlib#v:-60--43--62-&quot;&gt;&amp;lt;+&amp;gt;&lt;/a&gt;&lt;/code&gt; のバージョンをリスト</target>
        </trans-unit>
        <trans-unit id="db73b7893f3af8f6c05605cf9251be842b275f8d" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;language-haskell-th-pprlib#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-pprlib#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt; のリストバージョン</target>
        </trans-unit>
        <trans-unit id="482dfe339c4f0977581fe5ee524fa53adc1e28ed" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; のバージョンをリストします。</target>
        </trans-unit>
        <trans-unit id="cfafdd602fb158738556497c46c51d6d60df9768" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:-60--43--62-&quot;&gt;&amp;lt;+&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:-60--43--62-&quot;&gt;&amp;lt;+&amp;gt;&lt;/a&gt;&lt;/code&gt; のバージョンを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="20bd5a0e4fabf718ca894fcb17f676efec0307ae" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt; のバージョンをリストします。</target>
        </trans-unit>
        <trans-unit id="6ceba6d840aab502457ce42ae3fbfeab1ecc2414" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; のバージョンをリストします。</target>
        </trans-unit>
        <trans-unit id="66e7277f4ef344564d58e60d6ea51d7adf033fef" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-60--43--62-&quot;&gt;&amp;lt;+&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-60--43--62-&quot;&gt;&amp;lt;+&amp;gt;&lt;/a&gt;&lt;/code&gt; のバージョンを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="b3158aef4933628130f67b89a618bc8b174d8978" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt; のバージョンをリストします。</target>
        </trans-unit>
        <trans-unit id="745ee4c2660329c820454e1ba2a47f402e1ce21f" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; のバージョンをリストします。</target>
        </trans-unit>
        <trans-unit id="5594bce20a5038736c0afcf0c55e2622caf81f60" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:-60--43--62-&quot;&gt;&amp;lt;+&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:-60--43--62-&quot;&gt;&amp;lt;+&amp;gt;&lt;/a&gt;&lt;/code&gt; のバージョンを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="7d0b7f90f7aacdb031c45cf80cdd404adafbe362" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt; のバージョンをリストします。</target>
        </trans-unit>
        <trans-unit id="33a93596bb8da89147bd59e3fe1b97c2d66a5038" translate="yes" xml:space="preserve">
          <source>ListT</source>
          <target state="translated">ListT</target>
        </trans-unit>
        <trans-unit id="c518fb067439705f3ff5fa5b4a62b9be3afa31ae" translate="yes" xml:space="preserve">
          <source>Listen</source>
          <target state="translated">Listen</target>
        </trans-unit>
        <trans-unit id="57c9502a7d7d48fd4a86b45fefb2b163491c3ae1" translate="yes" xml:space="preserve">
          <source>Lists</source>
          <target state="translated">Lists</target>
        </trans-unit>
        <trans-unit id="781623c2be49bc87bb9e5a34fe84e216baf4b8b9" translate="yes" xml:space="preserve">
          <source>Lists the source code around the definition of ⟨identifier⟩ or the current breakpoint if not given. This requires that the identifier be defined in an interpreted module. If your output device supports it, then GHCi will highlight the active subexpression in bold.</source>
          <target state="translated">⟨identifier⟩ の定義の周りのソースコードをリストアップします。これは、識別子がインタープリタモジュールで定義されている必要があります。出力デバイスがそれをサポートしている場合、GHCiはアクティブなサブ式を太字で強調表示します。</target>
        </trans-unit>
        <trans-unit id="808589d62b1e1bf49e41bd4b6a92d4dc1a0d0f3a" translate="yes" xml:space="preserve">
          <source>Lists the source code around the given line number of ⟨module⟩. This requires that the module be interpreted. If your output device supports it, then GHCi will highlight the active subexpression in bold.</source>
          <target state="translated">⟨module⟩ の指定された行番号周辺のソースコードを一覧表示します。これは、モジュールが解釈される必要があります。出力デバイスがそれをサポートしている場合、GHCi はアクティブな式を太字で強調表示します。</target>
        </trans-unit>
        <trans-unit id="d4a7facfa8bfb2e9078fe2cd6adc3a55c36788e6" translate="yes" xml:space="preserve">
          <source>Lists, but with an &lt;code&gt;&lt;a href=&quot;control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; functor based on zipping.</source>
          <target state="translated">リスト、ただし圧縮に基づく &lt;code&gt;&lt;a href=&quot;control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; ファンクタを使用。</target>
        </trans-unit>
        <trans-unit id="7c730a293f109c2c9fe03256794b5a680b2406f1" translate="yes" xml:space="preserve">
          <source>Lit</source>
          <target state="translated">Lit</target>
        </trans-unit>
        <trans-unit id="1d45d75d6a3cc51b4987b3781a45f5c1345a4a98" translate="yes" xml:space="preserve">
          <source>LitSort</source>
          <target state="translated">LitSort</target>
        </trans-unit>
        <trans-unit id="3c7167176c55c32edbdb72649b122c134066cd84" translate="yes" xml:space="preserve">
          <source>Little-endian</source>
          <target state="translated">Little-endian</target>
        </trans-unit>
        <trans-unit id="0877eccb7ffb8474ab69b0fcf579d9b84daccdd0" translate="yes" xml:space="preserve">
          <source>Little-endian decoding</source>
          <target state="translated">リトルエンディアン復号化</target>
        </trans-unit>
        <trans-unit id="c7273f034919f3ef6168c89cba26b3bce836ba9e" translate="yes" xml:space="preserve">
          <source>Little-endian primitives</source>
          <target state="translated">リトルエンディアンプリミティブ</target>
        </trans-unit>
        <trans-unit id="1c321830ed633cc94628e1e65216ff4ba6a6ed76" translate="yes" xml:space="preserve">
          <source>Little-endian writes</source>
          <target state="translated">リトルエンディアンの書き込み</target>
        </trans-unit>
        <trans-unit id="6fc67654e4796ae3f37595e79dd2e45c3625e5e5" translate="yes" xml:space="preserve">
          <source>LittleEndian</source>
          <target state="translated">LittleEndian</target>
        </trans-unit>
        <trans-unit id="2e67c31b2f3fdce36aeeb1f20caff4b304f70567" translate="yes" xml:space="preserve">
          <source>Ll: Letter, Lowercase</source>
          <target state="translated">Ll.文字、小文字</target>
        </trans-unit>
        <trans-unit id="58382029ac6f1e5383d7bade61f6a456488c6bbd" translate="yes" xml:space="preserve">
          <source>Llike &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:mallocBytes&quot;&gt;mallocBytes&lt;/a&gt;&lt;/code&gt; but memory is filled with bytes of value zero.</source>
          <target state="translated">LallocはmallocBytesに &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:mallocBytes&quot;&gt;mallocBytes&lt;/a&gt;&lt;/code&gt; いますが、メモリは値ゼロのバイトで満たされます。</target>
        </trans-unit>
        <trans-unit id="4288785885201e9bb76e1d0199483effb5fe9f71" translate="yes" xml:space="preserve">
          <source>Lm: Letter, Modifier</source>
          <target state="translated">Lm.文字、修飾子</target>
        </trans-unit>
        <trans-unit id="2fdaaab4868bf18d8a809e1f5f7e47a37f964d96" translate="yes" xml:space="preserve">
          <source>Lo: Letter, Other</source>
          <target state="translated">ロー:手紙、その他</target>
        </trans-unit>
        <trans-unit id="8accbc10b359e949cb147175bb580bf3e07dc786" translate="yes" xml:space="preserve">
          <source>Load a plugin exported by a given module</source>
          <target state="translated">与えられたモジュールでエクスポートされたプラグインをロードする</target>
        </trans-unit>
        <trans-unit id="51fa1bf18d44ef1d1248c602fa8dd72c62735eea" translate="yes" xml:space="preserve">
          <source>Load the plugin in the given module. The module must be a member of a package registered in GHC&amp;rsquo;s package database.</source>
          <target state="translated">指定されたモジュールにプラグインをロードします。モジュールはGHCのパッケージデータベースに登録されたパッケージのメンバーでなければなりません。</target>
        </trans-unit>
        <trans-unit id="19f77727de15c8eb41a9504fa18fee15c5c48b61" translate="yes" xml:space="preserve">
          <source>Load-balancing shares out the work of GC between the available cores. This is a good idea when the heap is large and we need to parallelise the GC work, however it is also pessimal for the short young-generation collections in a parallel program, because it can harm locality by moving data from the cache of the CPU where is it being used to the cache of another CPU. Hence the default is to do load-balancing only in the old-generation. In fact, for a parallel program it is sometimes beneficial to disable load-balancing entirely with &lt;code&gt;-qb&lt;/code&gt;.</source>
          <target state="translated">ロードバランシングは、利用可能なコア間でGCの作業を共有します。これは、ヒープが大きく、GC作業を並列化する必要がある場合に適していますが、CPUのキャッシュからデータを移動することによって局所性を損なう可能性があるため、並列プログラムの短い若い世代のコレクションにとっても悲惨です。別のCPUのキャッシュに使用されています。したがって、デフォルトでは、古い世代でのみ負荷分散が行われます。実際、並列プログラムの場合、 &lt;code&gt;-qb&lt;/code&gt; を使用して負荷分散を完全に無効にすることが有益な場合があります。</target>
        </trans-unit>
        <trans-unit id="5baeca2bd84e4324195dfc5aa4a5d2fe832d33c9" translate="yes" xml:space="preserve">
          <source>Loading a multi-module program is just as straightforward; just give the name of the &amp;ldquo;topmost&amp;rdquo; module to the &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt; command (hint: &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt; can be abbreviated to &lt;code&gt;:l&lt;/code&gt;). The topmost module will normally be &lt;code&gt;Main&lt;/code&gt;, but it doesn&amp;rsquo;t have to be. GHCi will discover which modules are required, directly or indirectly, by the topmost module, and load them all in dependency order.</source>
          <target state="translated">マルチモジュールプログラムのロードも同じくらい簡単です。&lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt;コマンドに「最上位」のモジュールの名前を指定するだけです（ヒント&lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;:l&lt;/code&gt; に短縮できます）。一番上のモジュールは通常 &lt;code&gt;Main&lt;/code&gt; ですが、そうである必要はありません。 GHCiは、最上位のモジュールによって直接または間接的に必要なモジュールを検出し、それらをすべて依存関係順にロードします。</target>
        </trans-unit>
        <trans-unit id="3ca542db8dd842ccea2e2f49600e491d4a676f0a" translate="yes" xml:space="preserve">
          <source>Loc</source>
          <target state="translated">Loc</target>
        </trans-unit>
        <trans-unit id="94637a234d4833c0a67b7a4f6b5d70bd1cdd5712" translate="yes" xml:space="preserve">
          <source>Local Time</source>
          <target state="translated">現地時間</target>
        </trans-unit>
        <trans-unit id="ab3cb665e2195c48dc51ad950c912c0fa2cb8e4a" translate="yes" xml:space="preserve">
          <source>Local allocation</source>
          <target state="translated">ローカル配分</target>
        </trans-unit>
        <trans-unit id="0478f8de1f3f270ad9e2bf09aa44262b4422de07" translate="yes" xml:space="preserve">
          <source>Local name bound outside of the TH AST</source>
          <target state="translated">TH ASTの外側にバインドされたローカル名</target>
        </trans-unit>
        <trans-unit id="93c22935b426d63080a636bc51d84b1a5c5cca31" translate="yes" xml:space="preserve">
          <source>Local, exclusive, left-biased choice: If left parser locally produces any result at all, then right parser is not used.</source>
          <target state="translated">ローカル、排他的、左に偏った選択:左パーサがローカルに結果を出す場合、右パーサは使用されません。</target>
        </trans-unit>
        <trans-unit id="478df254596a4a4a51b18fe7c43423e110e9c8b9" translate="yes" xml:space="preserve">
          <source>LocalMode</source>
          <target state="translated">LocalMode</target>
        </trans-unit>
        <trans-unit id="9cb40f7cd87e6348d6d2464d28eeaa1636f17835" translate="yes" xml:space="preserve">
          <source>LocalTime</source>
          <target state="translated">LocalTime</target>
        </trans-unit>
        <trans-unit id="8970f0e691a0a23a47517698017c997507efd496" translate="yes" xml:space="preserve">
          <source>Locale</source>
          <target state="translated">Locale</target>
        </trans-unit>
        <trans-unit id="c72c9f7a9c187a5da0f209dc188fa32ae35d17f4" translate="yes" xml:space="preserve">
          <source>Locale representing American usage.</source>
          <target state="translated">アメリカでの使用法を表すロケール。</target>
        </trans-unit>
        <trans-unit id="b7a9db328cdf327a87303972030f518b2e1143a4" translate="yes" xml:space="preserve">
          <source>Locale support</source>
          <target state="translated">現地でのサポート</target>
        </trans-unit>
        <trans-unit id="6f1b4ce09e502ee2cc257e3b65eb100b21e07dcd" translate="yes" xml:space="preserve">
          <source>LocaleTestFlags</source>
          <target state="translated">LocaleTestFlags</target>
        </trans-unit>
        <trans-unit id="d219c68101f532de10add2cf42fb9dbeca73d3be" translate="yes" xml:space="preserve">
          <source>Location</source>
          <target state="translated">Location</target>
        </trans-unit>
        <trans-unit id="04685f4c01bb7310cd3e866073d0858b658078ed" translate="yes" xml:space="preserve">
          <source>Location information about an address from a backtrace.</source>
          <target state="translated">バックトレースからの住所の位置情報。</target>
        </trans-unit>
        <trans-unit id="5131787646387f0d5f88f17ccb4880dde6ba21d3" translate="yes" xml:space="preserve">
          <source>Lock the semaphore, blocking until it becomes available. Since this is done through a system call, this will block the *entire runtime*, not just the current thread. If this is not the behaviour you want, use semThreadWait instead.</source>
          <target state="translated">セマフォをロックし、利用可能になるまでブロックします。これはシステムコールによって行われるので、現在のスレッドだけでなく、*ランタイム*全体をブロックします。もし、これが望まれる動作ではない場合は、代わりに semThreadWait を使用してください。</target>
        </trans-unit>
        <trans-unit id="79ad9e43cfdad7f13ded5dc73bb870eee73c9832" translate="yes" xml:space="preserve">
          <source>LockMode</source>
          <target state="translated">LockMode</target>
        </trans-unit>
        <trans-unit id="031e1faa819e43723677621db8e08752f93d196c" translate="yes" xml:space="preserve">
          <source>LockRequest</source>
          <target state="translated">LockRequest</target>
        </trans-unit>
        <trans-unit id="d1d6079f6b5f44c82f4e240cfc0156faa4fc5b60" translate="yes" xml:space="preserve">
          <source>Locking</source>
          <target state="translated">Locking</target>
        </trans-unit>
        <trans-unit id="f768a9742ff93e60b7bb02545b5b0dd507f52d9d" translate="yes" xml:space="preserve">
          <source>Locking mode</source>
          <target state="translated">ロッキングモード</target>
        </trans-unit>
        <trans-unit id="3c518a9153977589254df029f9697c14bdd187b6" translate="yes" xml:space="preserve">
          <source>Locks a given range in a file handle, To lock an entire file use 0xFFFFFFFFFFFFFFFF for size and 0 for offset.</source>
          <target state="translated">ファイルハンドルの指定した範囲をロックします。ファイル全体をロックするには、サイズに0xFFFFFFFF、オフセットに0を指定します。</target>
        </trans-unit>
        <trans-unit id="db36a6985ae81e7f06f9b77a678b760e42fb6c81" translate="yes" xml:space="preserve">
          <source>Log base 2 (round down) of natural numbers. &lt;code&gt;Log 0&lt;/code&gt; is undefined (i.e., it cannot be reduced).</source>
          <target state="translated">自然数の対数2（切り捨て）。 &lt;code&gt;Log 0&lt;/code&gt; は未定義です（つまり、削減できません）。</target>
        </trans-unit>
        <trans-unit id="705364a478cdab0540a4c25854746a42ccf2183f" translate="yes" xml:space="preserve">
          <source>Log events as text to standard output, instead of to the &lt;code&gt;.eventlog&lt;/code&gt; file. The ⟨flags⟩ are the same as for &lt;code&gt;-l&lt;/code&gt;, with the additional option &lt;code&gt;t&lt;/code&gt; which indicates that the each event printed should be preceded by a timestamp value (in the binary &lt;code&gt;.eventlog&lt;/code&gt; file, all events are automatically associated with a timestamp).</source>
          <target state="translated">イベントを &lt;code&gt;.eventlog&lt;/code&gt; ファイルではなく、テキストとして標準出力に記録します。「フラグ」は &lt;code&gt;-l&lt;/code&gt; の場合と同じですが、出力される各イベントの前にタイムスタンプ値が必要であることを示す追加オプション &lt;code&gt;t&lt;/code&gt; があります（バイナリ &lt;code&gt;.eventlog&lt;/code&gt; ファイルでは、すべてのイベントが自動的にタイムスタンプに関連付けられます）。</target>
        </trans-unit>
        <trans-unit id="8c0b83ca797348a57e601331a800396f17173e34" translate="yes" xml:space="preserve">
          <source>Log events in binary format. Without any ⟨flags⟩ specified, this logs a default set of events, suitable for use with tools like ThreadScope.</source>
          <target state="translated">バイナリ形式でイベントを記録します。⟨flags⟩ が指定されていない場合、ThreadScope のようなツールでの使用に適したデフォルトのイベントセットをログに記録します。</target>
        </trans-unit>
        <trans-unit id="6687db9bf747c384bcc8d36417e42b952196b766" translate="yes" xml:space="preserve">
          <source>Log2</source>
          <target state="translated">Log2</target>
        </trans-unit>
        <trans-unit id="f61cb07b41e23ab1a79f15c05c0f8ba5b477ab22" translate="yes" xml:space="preserve">
          <source>Logarithmic-time access to any element with &lt;code&gt;&lt;a href=&quot;data-sequence#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:-33--63-&quot;&gt;!?&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:index&quot;&gt;index&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:insertAt&quot;&gt;insertAt&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:deleteAt&quot;&gt;deleteAt&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:adjust-39-&quot;&gt;adjust'&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;data-sequence#v:update&quot;&gt;update&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-sequence#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; を使用した任意の要素への対数時間アクセス、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:-33--63-&quot;&gt;!?&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:index&quot;&gt;index&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:insertAt&quot;&gt;insertAt&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:deleteAt&quot;&gt;deleteAt&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:adjust-39-&quot;&gt;adjust'&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:update&quot;&gt;update&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d4382c3d779a065ce766f6771a0eda14473b0c8a" translate="yes" xml:space="preserve">
          <source>Logarithmic-time concatenation with &lt;code&gt;&lt;a href=&quot;data-sequence#v:-62--60-&quot;&gt;&amp;gt;&amp;lt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-sequence#v:-62--60-&quot;&gt;&amp;gt;&amp;lt;&lt;/a&gt;&lt;/code&gt; を使用した対数時間連結</target>
        </trans-unit>
        <trans-unit id="c70a3bed95e2afdacbd2edd9f3abf4bff06b5635" translate="yes" xml:space="preserve">
          <source>Logarithmic-time splitting with &lt;code&gt;&lt;a href=&quot;data-sequence#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-sequence#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-sequence#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; による対数時間分割、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; アンド &lt;code&gt;&lt;a href=&quot;data-sequence#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9cebebf8637724ae58cb90aacf5d8022fb2074f2" translate="yes" xml:space="preserve">
          <source>Look at the Core syntax!</source>
          <target state="translated">Coreの構文を見てください!</target>
        </trans-unit>
        <trans-unit id="4f44d0f99b2e9f9e75bd7d13f005f42ba7ac90d3" translate="yes" xml:space="preserve">
          <source>Look at the first three elements of a sequence</source>
          <target state="translated">シーケンスの最初の3つの要素を見る</target>
        </trans-unit>
        <trans-unit id="036e3fb15ef00e480fa4d3acf7a733a4ca5f5561" translate="yes" xml:space="preserve">
          <source>Look for the exact match on the name in the built-in command list.</source>
          <target state="translated">ビルトインコマンドリストの名前に完全に一致するものを探します。</target>
        </trans-unit>
        <trans-unit id="1c5a3aaf89cbcab1e2d9dd0a759cbcb475301525" translate="yes" xml:space="preserve">
          <source>Look for your function in the interface file, then for the third field in the pragma; it should say &lt;code&gt;Strictness: ⟨string⟩&lt;/code&gt;. The ⟨string⟩ gives the strictness of the function&amp;rsquo;s arguments: see &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/Commentary/Compiler/Demand&quot;&gt;the GHC Commentary&lt;/a&gt; for a description of the strictness notation.</source>
          <target state="translated">インターフェースファイルで関数を探し、次にプラグマの3番目のフィールドを探します。それは言うべき &lt;code&gt;Strictness: ⟨string⟩&lt;/code&gt; 。「文字列」は、関数の引数の厳密さを示します。厳密さの表記の説明については、&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/Commentary/Compiler/Demand&quot;&gt;GHC解説&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6a08e53663e845cc46457faaa8a00f1851876f2c" translate="yes" xml:space="preserve">
          <source>Look for your function in the interface file, then for the third field in the pragma; it should say &lt;code&gt;Strictness: ⟨string⟩&lt;/code&gt;. The ⟨string⟩ gives the strictness of the function&amp;rsquo;s arguments: see &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/commentary/compiler/demand&quot;&gt;the GHC Commentary&lt;/a&gt; for a description of the strictness notation.</source>
          <target state="translated">Look for your function in the interface file, then for the third field in the pragma; it should say &lt;code&gt;Strictness: ⟨string⟩&lt;/code&gt; . The ⟨string⟩ gives the strictness of the function&amp;rsquo;s arguments: see &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/commentary/compiler/demand&quot;&gt;the GHC Commentary&lt;/a&gt; for a description of the strictness notation.</target>
        </trans-unit>
        <trans-unit id="646113c2b824e740bba103f465367c553a9eb4ec" translate="yes" xml:space="preserve">
          <source>Look up a boolean capability in the terminfo database, and fail if it's not defined.</source>
          <target state="translated">terminfoデータベースのブール型ケイパビリティを検索し、定義されていない場合は失敗します。</target>
        </trans-unit>
        <trans-unit id="c4c0a18679ef62e4477ab6e7f74f367ea337ce4c" translate="yes" xml:space="preserve">
          <source>Look up a boolean capability in the terminfo database.</source>
          <target state="translated">terminfoデータベースのブール型ケイパビリティを検索します。</target>
        </trans-unit>
        <trans-unit id="7a72d8f66e8e9faaac46b9deb897bfc7808a27e2" translate="yes" xml:space="preserve">
          <source>Look up a constructor by its representation</source>
          <target state="translated">コンストラクタをその表現で検索する</target>
        </trans-unit>
        <trans-unit id="c01e8f2c42ad48d0b20e9f727f7dd206fb60685a" translate="yes" xml:space="preserve">
          <source>Look up a numeric capability in the terminfo database.</source>
          <target state="translated">terminfoデータベースの数値能力を検索する。</target>
        </trans-unit>
        <trans-unit id="586b4cdd798272f8e1ea61b1bc18f4217842421c" translate="yes" xml:space="preserve">
          <source>Look up a string capability in the terminfo database. NOTE: This function is deprecated; use &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#v:tiGetOutput1&quot;&gt;tiGetOutput1&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">terminfoデータベースで文字列機能を検索します。注：この関数は非推奨です。代わりに &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#v:tiGetOutput1&quot;&gt;tiGetOutput1&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="a9c5ab2d2d0139456f33ef943c0b402c0ecc56ca" translate="yes" xml:space="preserve">
          <source>Look up an output capability in the terminfo database.</source>
          <target state="translated">terminfoデータベースの出力能力を検索します。</target>
        </trans-unit>
        <trans-unit id="9021c22f55a1940644c0487372237fc2b4baba0e" translate="yes" xml:space="preserve">
          <source>Look up an output capability which takes a fixed number of parameters (for example, &lt;code&gt;Int -&amp;gt; Int -&amp;gt; TermOutput&lt;/code&gt;).</source>
          <target state="translated">固定数のパラメーターを取る出力機能を &lt;code&gt;Int -&amp;gt; Int -&amp;gt; TermOutput&lt;/code&gt; ます（例えば、Int-&amp;gt; Int-&amp;gt; TermOutput）。</target>
        </trans-unit>
        <trans-unit id="f90efbcd7f1eeff6426b782004bd5ca5f919386e" translate="yes" xml:space="preserve">
          <source>Look up the control sequence for a given function sequence. For example, &lt;code&gt;functionKey 12&lt;/code&gt; retrieves the &lt;code&gt;kf12&lt;/code&gt; capability.</source>
          <target state="translated">特定の関数シーケンスの制御シーケンスを検索します。たとえば、 &lt;code&gt;functionKey 12&lt;/code&gt; は &lt;code&gt;kf12&lt;/code&gt; 機能を取得します。</target>
        </trans-unit>
        <trans-unit id="fee394d0e5a9ad0f8eab2e63dc20d9771d2d9b1c" translate="yes" xml:space="preserve">
          <source>Look up the given name in the (type namespace of the) current splice's scope. See &lt;a href=&quot;language-haskell-th-syntax#namelookup&quot;&gt;Language.Haskell.TH.Syntax&lt;/a&gt; for more details.</source>
          <target state="translated">現在のスプライスのスコープ（の名前空間）で指定された名前を検索します。詳細については、&lt;a href=&quot;language-haskell-th-syntax#namelookup&quot;&gt;Language.Haskell.TH.Syntax&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e1a8bb741760af7e3cd92aaa2b183fc9d4090ffa" translate="yes" xml:space="preserve">
          <source>Look up the given name in the (value namespace of the) current splice's scope. See &lt;a href=&quot;language-haskell-th-syntax#namelookup&quot;&gt;Language.Haskell.TH.Syntax&lt;/a&gt; for more details.</source>
          <target state="translated">現在のスプライスのスコープ（の名前空間）で指定された名前を検索します。詳細については、&lt;a href=&quot;language-haskell-th-syntax#namelookup&quot;&gt;Language.Haskell.TH.Syntax&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2c27f2b60d886938ddc087b401729fa285ab4f28" translate="yes" xml:space="preserve">
          <source>Look up the named Unicode encoding. May fail with</source>
          <target state="translated">名前のついたUnicodeエンコーディングを調べてください。で失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ba28f2554c741d83cd517f5e544d7d36306b57bc" translate="yes" xml:space="preserve">
          <source>Look-ahead: returns the part of the input that is left, without consuming it.</source>
          <target state="translated">先読み:入力を消費せずに、入力の残っている部分を返します。</target>
        </trans-unit>
        <trans-unit id="5eb4c34799d13148c8206bca4c92597220f71e0b" translate="yes" xml:space="preserve">
          <source>Looks up a &lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticPtr&quot;&gt;StaticPtr&lt;/a&gt;&lt;/code&gt; by its &lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticKey&quot;&gt;StaticKey&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">見上げ &lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticPtr&quot;&gt;StaticPtr&lt;/a&gt;&lt;/code&gt; そのことによって &lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticKey&quot;&gt;StaticKey&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7015ab4fc4ea24735dbe884238cc1b54bf915eca" translate="yes" xml:space="preserve">
          <source>Lookup</source>
          <target state="translated">Lookup</target>
        </trans-unit>
        <trans-unit id="b233a4c41641797d29c66ebedda9a193a0f05643" translate="yes" xml:space="preserve">
          <source>Lookup a constructor via a string</source>
          <target state="translated">コンストラクタを文字列で検索する</target>
        </trans-unit>
        <trans-unit id="9b088da5659869d545bfc9a0cf4258116c580743" translate="yes" xml:space="preserve">
          <source>LossOfPrecision</source>
          <target state="translated">LossOfPrecision</target>
        </trans-unit>
        <trans-unit id="853c95f571d7fa18c42a8e831393f2dd7e6ab65b" translate="yes" xml:space="preserve">
          <source>Low level CString conversions</source>
          <target state="translated">低レベルのCString変換</target>
        </trans-unit>
        <trans-unit id="9a62bf48cdec4e2fa80fc92d8d939e62810d8f8d" translate="yes" xml:space="preserve">
          <source>Low level conversions</source>
          <target state="translated">低レベルの変換</target>
        </trans-unit>
        <trans-unit id="e5145ff9d1cf255f56081e2cfd62251c784c3336" translate="yes" xml:space="preserve">
          <source>Low level execution</source>
          <target state="translated">低レベルの実行</target>
        </trans-unit>
        <trans-unit id="163304e093070531fe3b7fc36d57bfbdbc31b649" translate="yes" xml:space="preserve">
          <source>Low level imperative construction</source>
          <target state="translated">低レベルの命令構造</target>
        </trans-unit>
        <trans-unit id="50d7d6709a31a0dba951b8a2031b80d349c3b9d0" translate="yes" xml:space="preserve">
          <source>Low level interaction with CStrings</source>
          <target state="translated">CStringsとの低レベルな相互作用</target>
        </trans-unit>
        <trans-unit id="6177301b8c0f30b2a86ceb3d0093fdce68f18734" translate="yes" xml:space="preserve">
          <source>Low level operations</source>
          <target state="translated">低レベルの操作</target>
        </trans-unit>
        <trans-unit id="972a48160fb1f24ef39460baab7e378aa636e944" translate="yes" xml:space="preserve">
          <source>Low word of signed integer multiply.</source>
          <target state="translated">符号付き整数倍のローワード。</target>
        </trans-unit>
        <trans-unit id="0cabfc67ff1de7a21583a2681ad3451d8a86cf31" translate="yes" xml:space="preserve">
          <source>Low-level action that performs the real close.</source>
          <target state="translated">リアルクローズを行う低レベルアクション。</target>
        </trans-unit>
        <trans-unit id="0b24e544fe7febd646c007e1db09a744758b8a8c" translate="yes" xml:space="preserve">
          <source>Low-level capabilities</source>
          <target state="translated">低レベルの能力</target>
        </trans-unit>
        <trans-unit id="f7ce8d6baf61dc38e2ccf714c9bc7f73b9b6975e" translate="yes" xml:space="preserve">
          <source>Low-level creation of the ParsecT type. You really shouldn't have to do this.</source>
          <target state="translated">ParsecT型の低レベル作成。これは本当にやめたほうがいいです。</target>
        </trans-unit>
        <trans-unit id="9ee648a6dd68992ea5cde1cd8d86b7c63d4484d6" translate="yes" xml:space="preserve">
          <source>Low-level manipulation</source>
          <target state="translated">低レベルの操作</target>
        </trans-unit>
        <trans-unit id="9a08a2849208613a25ed31a1dac45b5fb6adb67f" translate="yes" xml:space="preserve">
          <source>Low-level operations</source>
          <target state="translated">低レベルの操作</target>
        </trans-unit>
        <trans-unit id="13fab495e207628ea2444c309679bf776f4535b0" translate="yes" xml:space="preserve">
          <source>Low-level support for text I/O.</source>
          <target state="translated">テキストI/Oの低レベルサポート。</target>
        </trans-unit>
        <trans-unit id="f00047587dbdef15842bce850c4a2657569cb360" translate="yes" xml:space="preserve">
          <source>Low-level unpacking of the ParsecT type. To run your parser, please look to runPT, runP, runParserT, runParser and other such functions.</source>
          <target state="translated">ParsecT型の低レベルアンパックです。パーサーを実行するには、runPT,runP,runParserT,runParserなどを見てください。</target>
        </trans-unit>
        <trans-unit id="bf0c3ee8ad72ff8c9d2eb19ea3532abdb2e4b477" translate="yes" xml:space="preserve">
          <source>Lowercase pattern syntax functions</source>
          <target state="translated">小文字パターン構文関数</target>
        </trans-unit>
        <trans-unit id="a6b810d16a3b6d530ef202b4a2d4f83a9f2052b1" translate="yes" xml:space="preserve">
          <source>LowercaseLetter</source>
          <target state="translated">LowercaseLetter</target>
        </trans-unit>
        <trans-unit id="3f339b0acbc3595803d9353e1c9001e104dfb4d7" translate="yes" xml:space="preserve">
          <source>Lt: Letter, Titlecase</source>
          <target state="translated">中尉 手紙、タイトルケース</target>
        </trans-unit>
        <trans-unit id="fae8b46afcb632cf202e5b21df13474f2135a227" translate="yes" xml:space="preserve">
          <source>Lu: Letter, Uppercase</source>
          <target state="translated">Lu:文字、大文字</target>
        </trans-unit>
        <trans-unit id="76ecaf2a4852a8a6204487921c653426552025b4" translate="yes" xml:space="preserve">
          <source>Luckily, we know of a function that takes an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt; a&lt;/code&gt; and returns an &lt;code&gt;(m a)&lt;/code&gt;: &lt;code&gt;&lt;a href=&quot;control-monad-io-class#v:liftIO&quot;&gt;liftIO&lt;/a&gt;&lt;/code&gt;, enabling us to run the program and see the expected results:</source>
          <target state="translated">幸い、 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt; a&lt;/code&gt; を受け取り、 &lt;code&gt;(m a)&lt;/code&gt; ： &lt;code&gt;&lt;a href=&quot;control-monad-io-class#v:liftIO&quot;&gt;liftIO&lt;/a&gt;&lt;/code&gt; を返す関数を知っているので、プログラムを実行して期待される結果を確認できます。</target>
        </trans-unit>
        <trans-unit id="f6d00f67258bac7b9cebb726f8da4dc1bfbef425" translate="yes" xml:space="preserve">
          <source>M1</source>
          <target state="translated">M1</target>
        </trans-unit>
        <trans-unit id="b215a5a119a163d59cea8f190c2384c43d8ef927" translate="yes" xml:space="preserve">
          <source>MATHEMATICAL LEFT WHITE SQUARE BRACKET</source>
          <target state="translated">数学的左白四角ブラケット</target>
        </trans-unit>
        <trans-unit id="3040721941e3243f84460b3f75c97496f9d468d1" translate="yes" xml:space="preserve">
          <source>MATHEMATICAL RIGHT WHITE SQUARE BRACKET</source>
          <target state="translated">MATHEMATICAL RIGHT WHITE SQUARE BRACKET</target>
        </trans-unit>
        <trans-unit id="b4d743ca88772a1217c91cba52116bdb88ef5d73" translate="yes" xml:space="preserve">
          <source>MArray</source>
          <target state="translated">MArray</target>
        </trans-unit>
        <trans-unit id="4b3e60b5afe51211e63fc50f1522b81c9ed52c4b" translate="yes" xml:space="preserve">
          <source>MBlock size</source>
          <target state="translated">MBブロックサイズ</target>
        </trans-unit>
        <trans-unit id="66d7b21255c88198fbbcee4794e30cfb5de722f2" translate="yes" xml:space="preserve">
          <source>MOUSEINPUT</source>
          <target state="translated">MOUSEINPUT</target>
        </trans-unit>
        <trans-unit id="2dafde4ace7cf035bd8fac9346bb5f75c97c5928" translate="yes" xml:space="preserve">
          <source>MVar</source>
          <target state="translated">MVar</target>
        </trans-unit>
        <trans-unit id="fb09978b40c384ebd545f0a9a7fcdec83351ee76" translate="yes" xml:space="preserve">
          <source>MVar#</source>
          <target state="translated">MVar#</target>
        </trans-unit>
        <trans-unit id="46d2f54777058d8f461ec0e1349a0d4dfc5ea0e9" translate="yes" xml:space="preserve">
          <source>MVars</source>
          <target state="translated">MVars</target>
        </trans-unit>
        <trans-unit id="ff6912e2f0ea1f0a272acab877e81da5e3f73b0e" translate="yes" xml:space="preserve">
          <source>Magenta</source>
          <target state="translated">Magenta</target>
        </trans-unit>
        <trans-unit id="6c6f4a44e9e83aafaa5023b2c1c354521ec83aa4" translate="yes" xml:space="preserve">
          <source>MagicHash</source>
          <target state="translated">MagicHash</target>
        </trans-unit>
        <trans-unit id="597dbcc3afd445131f986826cdf6caa30f1f99dd" translate="yes" xml:space="preserve">
          <source>Maintainer</source>
          <target state="translated">Maintainer</target>
        </trans-unit>
        <trans-unit id="9ed930864a951ac93cbc26664a2297c407da9c9e" translate="yes" xml:space="preserve">
          <source>Maintaining variable bindings, or other shared environment.</source>
          <target state="translated">変数バインディングなどの共有環境の維持</target>
        </trans-unit>
        <trans-unit id="a8a516b79965afb8ee743e8779110117c528ae43" translate="yes" xml:space="preserve">
          <source>Make GHC be more precise about its treatment of bottom (but see also &lt;a href=&quot;#ghc-flag--fno-state-hack&quot;&gt;&lt;code&gt;-fno-state-hack&lt;/code&gt;&lt;/a&gt;). In particular, stop GHC eta-expanding through a case expression, which is good for performance, but bad if you are using &lt;code&gt;seq&lt;/code&gt; on partial applications.</source>
          <target state="translated">GHCの底部の扱いをより正確にします（ただし、&lt;a href=&quot;#ghc-flag--fno-state-hack&quot;&gt; &lt;code&gt;-fno-state-hack&lt;/code&gt; &lt;/a&gt;も参照してください）。特に、case式を使用してGHCのeta-expandingを停止します。これはパフォーマンスに優れていますが、部分的なアプリケーションで &lt;code&gt;seq&lt;/code&gt; を使用している場合は悪いです。</target>
        </trans-unit>
        <trans-unit id="d7420d41204c439a4f517471040fab645169f4e5" translate="yes" xml:space="preserve">
          <source>Make GHC be more precise about its treatment of bottom (but see also &lt;a href=&quot;using-optimisation#ghc-flag--fno-state-hack&quot;&gt;&lt;code&gt;-fno-state-hack&lt;/code&gt;&lt;/a&gt;). In particular, GHC will not eta-expand through a case expression.</source>
          <target state="translated">GHCの底部の扱いをより正確にします（ただし、&lt;a href=&quot;using-optimisation#ghc-flag--fno-state-hack&quot;&gt; &lt;code&gt;-fno-state-hack&lt;/code&gt; &lt;/a&gt;も参照してください）。特に、GHCはケース式を介してイータ展開しません。</target>
        </trans-unit>
        <trans-unit id="2fdef1410de7bb1f110ecf15d30ac3c953aad457" translate="yes" xml:space="preserve">
          <source>Make Strings an instance of &lt;code&gt;&lt;a href=&quot;text-parsec#t:Stream&quot;&gt;Stream&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; token type.</source>
          <target state="translated">文字 &lt;code&gt;&lt;a href=&quot;text-parsec#t:Stream&quot;&gt;Stream&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; トークンタイプのStreamのインスタンスにします。</target>
        </trans-unit>
        <trans-unit id="2d2d3352f83dfd1c05932c3401d3d788e9213d3c" translate="yes" xml:space="preserve">
          <source>Make Strings an instance of &lt;code&gt;&lt;a href=&quot;text-parsec#t:Stream&quot;&gt;Stream&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; token type.</source>
          <target state="translated">Make Strings an instance of &lt;code&gt;&lt;a href=&quot;text-parsec#t:Stream&quot;&gt;Stream&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; token type.</target>
        </trans-unit>
        <trans-unit id="d1084fe0dfb8f51c0fc8e30373108ff6994595e4" translate="yes" xml:space="preserve">
          <source>Make Strings an instance of &lt;code&gt;&lt;a href=&quot;text-parsec#t:Stream&quot;&gt;Stream&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; token type.</source>
          <target state="translated">Stringsを &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; トークンタイプの &lt;code&gt;&lt;a href=&quot;text-parsec#t:Stream&quot;&gt;Stream&lt;/a&gt;&lt;/code&gt; のインスタンスにします。</target>
        </trans-unit>
        <trans-unit id="c8574286f1db7f5674cdca2f0f347f3d37fbe842" translate="yes" xml:space="preserve">
          <source>Make a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; pointer to a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;, using the second argument as a finalizer to run when the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; is garbage-collected.</source>
          <target state="translated">作る &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; へのポインタ &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; をしたときに実行するファイナライザーとしての第二引数を使用して、 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; がガベージコレクションです。</target>
        </trans-unit>
        <trans-unit id="3c9caff43c15f5f5ce07d7d17ceba770b1aed418" translate="yes" xml:space="preserve">
          <source>Make a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; pointer to a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;, using the second argument as a finalizer to run when &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; is garbage-collected</source>
          <target state="translated">作る &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; へのポインタを &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; ときに実行するファイナライザーとしての第二引数を使用して、 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; がガベージコレクションであります</target>
        </trans-unit>
        <trans-unit id="59b220e362957ec29f398b074092e745f5e98507" translate="yes" xml:space="preserve">
          <source>Make a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; pointer to a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;, using the second argument as a finalizer to run when the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; is garbage-collected.</source>
          <target state="translated">Make a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; pointer to a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; , using the second argument as a finalizer to run when the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; is garbage-collected.</target>
        </trans-unit>
        <trans-unit id="43736e995d33c8137a44869b4d0d5452ba4e560a" translate="yes" xml:space="preserve">
          <source>Make a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; pointer to a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;, using the second argument as a finalizer to run when &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; is garbage-collected</source>
          <target state="translated">Make a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; pointer to a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; , using the second argument as a finalizer to run when &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; is garbage-collected</target>
        </trans-unit>
        <trans-unit id="172869b1cbc85f865a41d6b19398e157d00b6ffc" translate="yes" xml:space="preserve">
          <source>Make a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; pointer to a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;, using the second argument as a finalizer to run when the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; is garbage-collected.</source>
          <target state="translated">作る &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; へのポインタ &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; をしたときに実行するファイナライザーとしての第二引数を使用して、 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; がガベージコレクションです。</target>
        </trans-unit>
        <trans-unit id="1a8478949c5b16ca6a4c0c847407471a72f503c5" translate="yes" xml:space="preserve">
          <source>Make a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; pointer to a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;, using the second argument as a finalizer to run when &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; is garbage-collected</source>
          <target state="translated">作る &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; へのポインタを &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; ときに実行するファイナライザーとしての第二引数を使用して、 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; がガベージコレクションであります</target>
        </trans-unit>
        <trans-unit id="bb1e49e8f1341ae8024c59aa4dfd0a0ff98889ea" translate="yes" xml:space="preserve">
          <source>Make a &lt;code&gt;&lt;a href=&quot;ghc-io-fd#t:FD&quot;&gt;FD&lt;/a&gt;&lt;/code&gt; from an existing file descriptor. Fails if the FD refers to a directory. If the FD refers to a file, &lt;code&gt;&lt;a href=&quot;ghc-io-fd#v:mkFD&quot;&gt;mkFD&lt;/a&gt;&lt;/code&gt; locks the file according to the Haskell 2010 single writer/multiple reader locking semantics (this is why we need the &lt;code&gt;&lt;a href=&quot;system-io#t:IOMode&quot;&gt;IOMode&lt;/a&gt;&lt;/code&gt; argument too).</source>
          <target state="translated">作る &lt;code&gt;&lt;a href=&quot;ghc-io-fd#t:FD&quot;&gt;FD&lt;/a&gt;&lt;/code&gt; を既存のファイルディスクリプタから。FDがディレクトリを参照している場合は失敗します。FDがファイルを参照する場合、 &lt;code&gt;&lt;a href=&quot;ghc-io-fd#v:mkFD&quot;&gt;mkFD&lt;/a&gt;&lt;/code&gt; はHaskell 2010の単一ライター/複数リーダーロックセマンティクスに従ってファイルをロックします（これが &lt;code&gt;&lt;a href=&quot;system-io#t:IOMode&quot;&gt;IOMode&lt;/a&gt;&lt;/code&gt; 引数も必要な理由です）。</target>
        </trans-unit>
        <trans-unit id="c7f75d66c23f2c823051ed78b549c0dc321c99c1" translate="yes" xml:space="preserve">
          <source>Make a &lt;code&gt;&lt;a href=&quot;system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; pointer to an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;, using the second argument as a finalizer to run when &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is garbage-collected</source>
          <target state="translated">作る &lt;code&gt;&lt;a href=&quot;system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; へのポインタを &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; ときに実行するファイナライザーとしての第二引数を使用して、 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; ガベージコレクションであります</target>
        </trans-unit>
        <trans-unit id="90c73ab748e0e00da22596dbc5fd000f5f781ad2" translate="yes" xml:space="preserve">
          <source>Make a &lt;code&gt;&lt;a href=&quot;system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; pointer to an &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt;, using the second argument as a finalizer to run when &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; is garbage-collected</source>
          <target state="translated">作る &lt;code&gt;&lt;a href=&quot;system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; へのポインタ &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; をしたときに実行するファイナライザーとしての第二引数を使用して、 &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; がガベージコレクションであります</target>
        </trans-unit>
        <trans-unit id="68976173fa646f3a0550c955065f1d56dd3d0c9c" translate="yes" xml:space="preserve">
          <source>Make a StablePtr that can be passed to the C function &lt;code&gt;hs_try_putmvar()&lt;/code&gt;. The RTS wants a &lt;code&gt;&lt;a href=&quot;foreign-stableptr#t:StablePtr&quot;&gt;StablePtr&lt;/a&gt;&lt;/code&gt; to the underlying &lt;code&gt;&lt;a href=&quot;ghc-exts#t:MVar-35-&quot;&gt;MVar#&lt;/a&gt;&lt;/code&gt;, but a &lt;code&gt;&lt;a href=&quot;ghc-exts#t:StablePtr-35-&quot;&gt;StablePtr#&lt;/a&gt;&lt;/code&gt; can only refer to lifted types, so we have to cheat by coercing.</source>
          <target state="translated">C関数 &lt;code&gt;hs_try_putmvar()&lt;/code&gt; に渡すことができるStablePtrを作成します。RTSは、基になる &lt;code&gt;&lt;a href=&quot;ghc-exts#t:MVar-35-&quot;&gt;MVar#&lt;/a&gt;&lt;/code&gt; への &lt;code&gt;&lt;a href=&quot;foreign-stableptr#t:StablePtr&quot;&gt;StablePtr&lt;/a&gt;&lt;/code&gt; を必要としますが、 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:StablePtr-35-&quot;&gt;StablePtr#&lt;/a&gt;&lt;/code&gt; はリフトされた型のみを参照できるため、強制的にチートする必要があります。</target>
        </trans-unit>
        <trans-unit id="340793623e1a085d7b8da534d1c4b5daea514359" translate="yes" xml:space="preserve">
          <source>Make a mutable array immutable, without copying.</source>
          <target state="translated">変異可能な配列をコピーせずに不変のものにします。</target>
        </trans-unit>
        <trans-unit id="c7e012d6c09327d0dafcfeae27a661402dd25db0" translate="yes" xml:space="preserve">
          <source>Make a mutable array of arrays immutable, without copying.</source>
          <target state="translated">コピーせずに変更可能な配列を不変配列にします。</target>
        </trans-unit>
        <trans-unit id="698be6d083fa7f3ca40015a52bb017297e592080" translate="yes" xml:space="preserve">
          <source>Make a mutable byte array immutable, without copying.</source>
          <target state="translated">変形可能なバイト配列をコピーせずに不変のものにします。</target>
        </trans-unit>
        <trans-unit id="46fdb0fb8e4b555aaff57055206c3612f29ab2c3" translate="yes" xml:space="preserve">
          <source>Make a path absolute, normalize the path, and remove as many indirections from it as possible. Any trailing path separators are discarded via &lt;code&gt;&lt;a href=&quot;../filepath-1.4.2.1/system-filepath-posix#v:dropTrailingPathSeparator&quot;&gt;dropTrailingPathSeparator&lt;/a&gt;&lt;/code&gt;. Additionally, on Windows the letter case of the path is canonicalized.</source>
          <target state="translated">パスを絶対パスにし、パスを正規化し、可能な限り多くの間接参照を削除します。後続のパス区切り文字は、 &lt;code&gt;&lt;a href=&quot;../filepath-1.4.2.1/system-filepath-posix#v:dropTrailingPathSeparator&quot;&gt;dropTrailingPathSeparator&lt;/a&gt;&lt;/code&gt; によって破棄されます。さらに、Windowsでは、パスの大文字と小文字は正規化されます。</target>
        </trans-unit>
        <trans-unit id="186ec7bfc50eae0a8d365be8aba8bea7326758f0" translate="yes" xml:space="preserve">
          <source>Make a reference to a local value that we can send remotely. This reference will keep the value that it refers to alive until &lt;code&gt;&lt;a href=&quot;ghci-remotetypes#v:freeRemoteRef&quot;&gt;freeRemoteRef&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="translated">リモートで送信できるローカル値への参照を作成します。この参照は、 &lt;code&gt;&lt;a href=&quot;ghci-remotetypes#v:freeRemoteRef&quot;&gt;freeRemoteRef&lt;/a&gt;&lt;/code&gt; が呼び出されるまで、参照する値を保持します。</target>
        </trans-unit>
        <trans-unit id="3c87f88ba73344e1ab783a73a9a5979fecf885d2" translate="yes" xml:space="preserve">
          <source>Make a unique directory. The returned &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the path of the created directory, which is padded with 6 random characters. The argument is the desired prefix of the filepath of the temporary directory to be created.</source>
          <target state="translated">一意のディレクトリを作成します。返される &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; は作成されたディレクトリのパスで、6つのランダムな文字が埋め込まれています。引数は、作成する一時ディレクトリのファイルパスの目的の接頭辞です。</target>
        </trans-unit>
        <trans-unit id="8d3ca167e4c389a68d7893e4900b4c3fb3ba06a9" translate="yes" xml:space="preserve">
          <source>Make a unique directory. The returned &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the path of the created directory, which is padded with 6 random characters. The argument is the desired prefix of the filepath of the temporary directory to be created.</source>
          <target state="translated">Make a unique directory. The returned &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the path of the created directory, which is padded with 6 random characters. The argument is the desired prefix of the filepath of the temporary directory to be created.</target>
        </trans-unit>
        <trans-unit id="c74d346c4da5940c1912b0eac5540bbe7a580ada" translate="yes" xml:space="preserve">
          <source>Make a unique directory. The returned &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the path of the created directory, which is padded with 6 random characters. The argument is the desired prefix of the filepath of the temporary directory to be created.</source>
          <target state="translated">一意のディレクトリを作成します。返される &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; は、作成されたディレクトリのパスであり、6つのランダムな文字が埋め込まれます。引数は、作成する一時ディレクトリのファイルパスの目的のプレフィックスです。</target>
        </trans-unit>
        <trans-unit id="81daa0d04fc3934a4c048011fb03208252f865cf" translate="yes" xml:space="preserve">
          <source>Make a unique directory. The returned &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#t:RawFilePath&quot;&gt;RawFilePath&lt;/a&gt;&lt;/code&gt; is the path of the created directory, which is padded with 6 random characters. The argument is the desired prefix of the filepath of the temporary directory to be created.</source>
          <target state="translated">一意のディレクトリを作成します。返される &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#t:RawFilePath&quot;&gt;RawFilePath&lt;/a&gt;&lt;/code&gt; は、作成されたディレクトリのパスで、6つのランダムな文字が埋め込まれます。引数は、作成する一時ディレクトリのファイルパスの目的の接頭辞です。</target>
        </trans-unit>
        <trans-unit id="6a7af8c778c02a1f594bc3983b00324c16ab69b7" translate="yes" xml:space="preserve">
          <source>Make a unique filename and open it for reading/writing. The returned &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the (possibly relative) path of the created file, which is padded with 6 random characters. The argument is the desired prefix of the filepath of the temporary file to be created.</source>
          <target state="translated">一意のファイル名を作成し、読み取り/書き込み用に開きます。返される &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; は、作成されたファイルの（おそらく相対）パスで、6つのランダムな文字が埋め込まれます。引数は、作成する一時ファイルのファイルパスの希望の接頭辞です。</target>
        </trans-unit>
        <trans-unit id="330d0dcda662cdafbb50eaf0cfa0b95ff8c0f42d" translate="yes" xml:space="preserve">
          <source>Make a unique filename and open it for reading/writing. The returned &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the (possibly relative) path of the created file, which is padded with 6 random characters. The argument is the desired prefix of the filepath of the temporary file to be created.</source>
          <target state="translated">Make a unique filename and open it for reading/writing. The returned &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the (possibly relative) path of the created file, which is padded with 6 random characters. The argument is the desired prefix of the filepath of the temporary file to be created.</target>
        </trans-unit>
        <trans-unit id="510be01a4433f345cddd74c7e143b3b18d7042bb" translate="yes" xml:space="preserve">
          <source>Make a unique filename and open it for reading/writing. The returned &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the (possibly relative) path of the created file, which is padded with 6 random characters. The argument is the desired prefix of the filepath of the temporary file to be created.</source>
          <target state="translated">一意のファイル名を作成し、読み取り/書き込み用に開きます。返される &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; は、作成されたファイルの（おそらく相対的な）パスであり、6つのランダムな文字が埋め込まれます。引数は、作成する一時ファイルのファイルパスの目的のプレフィックスです。</target>
        </trans-unit>
        <trans-unit id="55c11d94c0f07317aebbc90457dbda2e57127b10" translate="yes" xml:space="preserve">
          <source>Make a unique filename and open it for reading/writing. The returned &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#t:RawFilePath&quot;&gt;RawFilePath&lt;/a&gt;&lt;/code&gt; is the (possibly relative) path of the created file, which is padded with 6 random characters. The argument is the desired prefix of the filepath of the temporary file to be created.</source>
          <target state="translated">一意のファイル名を作成し、読み取り/書き込み用に開きます。返される &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#t:RawFilePath&quot;&gt;RawFilePath&lt;/a&gt;&lt;/code&gt; は、作成されたファイルの（相対パスの可能性があります）パスで、6つのランダムな文字が埋め込まれます。引数は、作成する一時ファイルのファイルパスの希望の接頭辞です。</target>
        </trans-unit>
        <trans-unit id="f72f7ad8e05097abb6ee289f5eba19d0e1965f5c" translate="yes" xml:space="preserve">
          <source>Make a unique filename with a given prefix and suffix and open it for reading/writing. The returned &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the (possibly relative) path of the created file, which contains 6 random characters in between the prefix and suffix. The first argument is the desired prefix of the filepath of the temporary file to be created. The second argument is the suffix of the temporary file to be created.</source>
          <target state="translated">特定のプレフィックスとサフィックスを使用して一意のファイル名を作成し、読み取り/書き込み用に開きます。返される &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; は、作成されたファイルの（おそらく相対）パスで、プレフィックスとサフィックスの間にランダムな6文字が含まれています。最初の引数は、作成する一時ファイルのファイルパスの希望の接頭辞です。 2番目の引数は、作成する一時ファイルのサフィックスです。</target>
        </trans-unit>
        <trans-unit id="95866426633d8275aa8fda94a7e85fdc02e90eb7" translate="yes" xml:space="preserve">
          <source>Make a unique filename with a given prefix and suffix and open it for reading/writing. The returned &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the (possibly relative) path of the created file, which contains 6 random characters in between the prefix and suffix. The first argument is the desired prefix of the filepath of the temporary file to be created. The second argument is the suffix of the temporary file to be created.</source>
          <target state="translated">Make a unique filename with a given prefix and suffix and open it for reading/writing. The returned &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the (possibly relative) path of the created file, which contains 6 random characters in between the prefix and suffix. The first argument is the desired prefix of the filepath of the temporary file to be created. The second argument is the suffix of the temporary file to be created.</target>
        </trans-unit>
        <trans-unit id="1c2d72bf515d3058a7049dde45a964b650627ffb" translate="yes" xml:space="preserve">
          <source>Make a unique filename with a given prefix and suffix and open it for reading/writing. The returned &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the (possibly relative) path of the created file, which contains 6 random characters in between the prefix and suffix. The first argument is the desired prefix of the filepath of the temporary file to be created. The second argument is the suffix of the temporary file to be created.</source>
          <target state="translated">指定されたプレフィックスとサフィックスを使用して一意のファイル名を作成し、読み取り/書き込み用に開きます。返される &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; は、作成されたファイルの（おそらく相対的な）パスであり、プレフィックスとサフィックスの間に6つのランダムな文字が含まれています。最初の引数は、作成する一時ファイルのファイルパスの目的のプレフィックスです。2番目の引数は、作成される一時ファイルのサフィックスです。</target>
        </trans-unit>
        <trans-unit id="3855d0f70cdfe996ae50f55037d364c1d1456c5b" translate="yes" xml:space="preserve">
          <source>Make a weak pointer to a &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt;. It can be important to do this if you want to hold a reference to a &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; while still allowing the thread to receive the &lt;code&gt;BlockedIndefinitely&lt;/code&gt; family of exceptions (e.g. &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt;). Holding a normal &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; reference will prevent the delivery of &lt;code&gt;BlockedIndefinitely&lt;/code&gt; exceptions because the reference could be used as the target of &lt;code&gt;&lt;a href=&quot;control-concurrent#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; at any time, which would unblock the thread.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への弱ポインタ​​を作成します。スレッドが &lt;code&gt;BlockedIndefinitely&lt;/code&gt; ファミリーの例外（ &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt; など）を受信できるようにしながら、 &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への参照を保持する場合は、これを行うことが重要になる可能性があります。通常の &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 参照を保持すると、その参照がいつでも &lt;code&gt;&lt;a href=&quot;control-concurrent#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; のターゲットとして使用され、スレッドのブロックが解除される可能性があるため、 &lt;code&gt;BlockedIndefinitely&lt;/code&gt; 例外の配信が防止されます。</target>
        </trans-unit>
        <trans-unit id="393f21690a4ea611c6c45f302e4ee432d74df383" translate="yes" xml:space="preserve">
          <source>Make a weak pointer to a &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt;. It can be important to do this if you want to hold a reference to a &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; while still allowing the thread to receive the &lt;code&gt;BlockedIndefinitely&lt;/code&gt; family of exceptions (e.g. &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt;). Holding a normal &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; reference will prevent the delivery of &lt;code&gt;BlockedIndefinitely&lt;/code&gt; exceptions because the reference could be used as the target of &lt;code&gt;&lt;a href=&quot;control-concurrent#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; at any time, which would unblock the thread.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への弱いポインタを作成します。スレッドが例外の &lt;code&gt;BlockedIndefinitely&lt;/code&gt; ファミリーを受信できるようにしながら、 &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への参照を保持したい場合（たとえば、 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt; ）、これを行うことが重要になる場合があります。通常の &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 参照を保持すると、参照がいつでも &lt;code&gt;&lt;a href=&quot;control-concurrent#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; のターゲットとして使用され、スレッドのブロックが解除されるため、 &lt;code&gt;BlockedIndefinitely&lt;/code&gt; 例外の配信が防止されます。</target>
        </trans-unit>
        <trans-unit id="82f94594233f4381e0de2f863949173a4888fe87" translate="yes" xml:space="preserve">
          <source>Make a weak pointer to a &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt;. It can be important to do this if you want to hold a reference to a &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; while still allowing the thread to receive the &lt;code&gt;BlockedIndefinitely&lt;/code&gt; family of exceptions (e.g. &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt;). Holding a normal &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; reference will prevent the delivery of &lt;code&gt;BlockedIndefinitely&lt;/code&gt; exceptions because the reference could be used as the target of &lt;code&gt;&lt;a href=&quot;control-concurrent#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; at any time, which would unblock the thread.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への弱いポインタを作成します。スレッドが &lt;code&gt;BlockedIndefinitely&lt;/code&gt; ファミリーの例外（ &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt; など）を受信できるようにしながら、 &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への参照を保持する場合は、これを行うことが重要になる可能性があります。通常の &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 参照を保持すると、その参照がいつでも &lt;code&gt;&lt;a href=&quot;control-concurrent#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; のターゲットとして使用され、スレッドのブロックが解除される可能性があるため、 &lt;code&gt;BlockedIndefinitely&lt;/code&gt; 例外の配信が防止されます。</target>
        </trans-unit>
        <trans-unit id="6c15a521855fa1db7d583391896bbe67487efc38" translate="yes" xml:space="preserve">
          <source>Make a weak pointer to a &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt;. It can be important to do this if you want to hold a reference to a &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; while still allowing the thread to receive the &lt;code&gt;BlockedIndefinitely&lt;/code&gt; family of exceptions (e.g. &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt;). Holding a normal &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; reference will prevent the delivery of &lt;code&gt;BlockedIndefinitely&lt;/code&gt; exceptions because the reference could be used as the target of &lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; at any time, which would unblock the thread.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への弱ポインタ​​を作成します。スレッドが &lt;code&gt;BlockedIndefinitely&lt;/code&gt; ファミリーの例外（ &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt; など）を受信できるようにしながら、 &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への参照を保持する場合は、これを行うことが重要になる可能性があります。通常の &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 参照を保持すると、その参照がいつでも &lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; のターゲットとして使用され、スレッドのブロックが解除される可能性があるため、 &lt;code&gt;BlockedIndefinitely&lt;/code&gt; 例外の配信が防止されます。</target>
        </trans-unit>
        <trans-unit id="0efc78aad57ab0b135f7ad0c2ee2f1ea5372a73a" translate="yes" xml:space="preserve">
          <source>Make a weak pointer to a &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt;. It can be important to do this if you want to hold a reference to a &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; while still allowing the thread to receive the &lt;code&gt;BlockedIndefinitely&lt;/code&gt; family of exceptions (e.g. &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt;). Holding a normal &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; reference will prevent the delivery of &lt;code&gt;BlockedIndefinitely&lt;/code&gt; exceptions because the reference could be used as the target of &lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; at any time, which would unblock the thread.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への弱いポインタを作成します。スレッドが例外の &lt;code&gt;BlockedIndefinitely&lt;/code&gt; ファミリーを受信できるようにしながら、 &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への参照を保持したい場合（たとえば、 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt; ）、これを行うことが重要になる場合があります。通常の &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 参照を保持すると、参照がいつでも &lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; のターゲットとして使用され、スレッドのブロックが解除されるため、 &lt;code&gt;BlockedIndefinitely&lt;/code&gt; 例外の配信が防止されます。</target>
        </trans-unit>
        <trans-unit id="2d033fcc13dd280fccc1b69e179fcb458f3b3db2" translate="yes" xml:space="preserve">
          <source>Make a weak pointer to a &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt;. It can be important to do this if you want to hold a reference to a &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; while still allowing the thread to receive the &lt;code&gt;BlockedIndefinitely&lt;/code&gt; family of exceptions (e.g. &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt;). Holding a normal &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; reference will prevent the delivery of &lt;code&gt;BlockedIndefinitely&lt;/code&gt; exceptions because the reference could be used as the target of &lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; at any time, which would unblock the thread.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への弱いポインタを作成します。スレッドが &lt;code&gt;BlockedIndefinitely&lt;/code&gt; ファミリーの例外（ &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt; など）を受信できるようにしながら、 &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への参照を保持する場合は、これを行うことが重要になる可能性があります。通常の &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 参照を保持すると、その参照がいつでも &lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; のターゲットとして使用され、スレッドのブロックが解除される可能性があるため、 &lt;code&gt;BlockedIndefinitely&lt;/code&gt; 例外の配信が防止されます。</target>
        </trans-unit>
        <trans-unit id="86ec4e16e20a04abfbb1ac99cdbce02e8ced1057" translate="yes" xml:space="preserve">
          <source>Make a weak pointer to a &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt;. It can be important to do this if you want to hold a reference to a &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; while still allowing the thread to receive the &lt;code&gt;BlockedIndefinitely&lt;/code&gt; family of exceptions (e.g. &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt;). Holding a normal &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; reference will prevent the delivery of &lt;code&gt;BlockedIndefinitely&lt;/code&gt; exceptions because the reference could be used as the target of &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; at any time, which would unblock the thread.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への弱ポインタ​​を作成します。スレッドが &lt;code&gt;BlockedIndefinitely&lt;/code&gt; ファミリーの例外（ &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt; など）を受信できるようにしながら、 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への参照を保持する場合は、これを行うことが重要になる可能性があります。通常の &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 参照を保持すると、その参照がいつでも &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; のターゲットとして使用され、スレッドのブロックが解除される可能性があるため、 &lt;code&gt;BlockedIndefinitely&lt;/code&gt; 例外の配信が防止されます。</target>
        </trans-unit>
        <trans-unit id="a77491851c6d1ffca83dc5af796a06989b259ab9" translate="yes" xml:space="preserve">
          <source>Make a weak pointer to a &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt;. It can be important to do this if you want to hold a reference to a &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; while still allowing the thread to receive the &lt;code&gt;BlockedIndefinitely&lt;/code&gt; family of exceptions (e.g. &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt;). Holding a normal &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; reference will prevent the delivery of &lt;code&gt;BlockedIndefinitely&lt;/code&gt; exceptions because the reference could be used as the target of &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; at any time, which would unblock the thread.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への弱いポインタを作成します。スレッドが例外の &lt;code&gt;BlockedIndefinitely&lt;/code&gt; ファミリーを受信できるようにしながら、 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への参照を保持したい場合（たとえば、 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt; ）、これを行うことが重要になる場合があります。通常の &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 参照を保持すると、参照がいつでも &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; のターゲットとして使用され、スレッドのブロックが解除されるため、 &lt;code&gt;BlockedIndefinitely&lt;/code&gt; 例外の配信が防止されます。</target>
        </trans-unit>
        <trans-unit id="d654a324a0882e03ad1f59875092013e6ecc780a" translate="yes" xml:space="preserve">
          <source>Make a weak pointer to a &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt;. It can be important to do this if you want to hold a reference to a &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; while still allowing the thread to receive the &lt;code&gt;BlockedIndefinitely&lt;/code&gt; family of exceptions (e.g. &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt;). Holding a normal &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; reference will prevent the delivery of &lt;code&gt;BlockedIndefinitely&lt;/code&gt; exceptions because the reference could be used as the target of &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; at any time, which would unblock the thread.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への弱いポインタを作成します。スレッドが &lt;code&gt;BlockedIndefinitely&lt;/code&gt; ファミリーの例外（ &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt; など）を受信できるようにしながら、 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への参照を保持する場合は、これを行うことが重要になる可能性があります。通常の &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 参照を保持すると、その参照がいつでも &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; のターゲットとして使用され、スレッドのブロックが解除される可能性があるため、 &lt;code&gt;BlockedIndefinitely&lt;/code&gt; 例外の配信が防止されます。</target>
        </trans-unit>
        <trans-unit id="9f678ce0a5f94456a91a790fc3be2c2ec6925020" translate="yes" xml:space="preserve">
          <source>Make an immutable array mutable, without copying.</source>
          <target state="translated">コピーせずに不変の配列を変異可能にします。</target>
        </trans-unit>
        <trans-unit id="df39c3ecba9f1a1d5927f8873184709183484ed4" translate="yes" xml:space="preserve">
          <source>Make bindings in the current module strict by default.</source>
          <target state="translated">現在のモジュールのバインディングをデフォルトで厳密にします。</target>
        </trans-unit>
        <trans-unit id="b462570effd4237ee90c797f361ccb9ef392f0ca" translate="yes" xml:space="preserve">
          <source>Make dependencies that declare that files with suffix &lt;code&gt;.⟨suf⟩⟨osuf⟩&lt;/code&gt; depend on interface files with suffix &lt;code&gt;.⟨suf⟩hi&lt;/code&gt;</source>
          <target state="translated">接尾辞でそのファイルを宣言メイクの依存関係 &lt;code&gt;.⟨suf⟩⟨osuf⟩&lt;/code&gt; 接尾辞インタフェースファイルに依存 &lt;code&gt;.⟨suf⟩hi&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b9d645523fe749f3d314ba22eb6324344c7aca9" translate="yes" xml:space="preserve">
          <source>Make dependencies that declare that files with suffix &lt;code&gt;.⟨suf⟩⟨osuf⟩&lt;/code&gt; depend on interface files with suffix &lt;code&gt;.⟨suf⟩hi&lt;/code&gt;, or (for &lt;code&gt;{-# SOURCE #-}&lt;/code&gt; imports) on &lt;code&gt;.hi-boot&lt;/code&gt;. Multiple &lt;code&gt;-dep-suffix&lt;/code&gt; flags are permitted. For example, &lt;code&gt;-dep-suffix a_ -dep-suffix b_&lt;/code&gt; will make dependencies for &lt;code&gt;.hs&lt;/code&gt; on &lt;code&gt;.hi&lt;/code&gt;, &lt;code&gt;.a_hs&lt;/code&gt; on &lt;code&gt;.a_hi&lt;/code&gt;, and &lt;code&gt;.b_hs&lt;/code&gt; on &lt;code&gt;.b_hi&lt;/code&gt;. Note that you must provide at least one suffix; if you do not want a suffix then pass &lt;code&gt;-dep-suffix ''&lt;/code&gt;.</source>
          <target state="translated">メイクの依存関係と宣言しているサフィックスを持つファイル &lt;code&gt;.⟨suf⟩⟨osuf⟩&lt;/code&gt; 接尾辞インタフェースファイルに依存 &lt;code&gt;.⟨suf⟩hi&lt;/code&gt; 、または（のために &lt;code&gt;{-# SOURCE #-}&lt;/code&gt; 輸入）の &lt;code&gt;.hi-boot&lt;/code&gt; 。複数の &lt;code&gt;-dep-suffix&lt;/code&gt; フラグを使用できます。たとえば、 &lt;code&gt;-dep-suffix a_ -dep-suffix b_&lt;/code&gt; は、 &lt;code&gt;.hs&lt;/code&gt; を &lt;code&gt;.hi&lt;/code&gt; に、 &lt;code&gt;.a_hs&lt;/code&gt; を &lt;code&gt;.a_hi&lt;/code&gt; に、 &lt;code&gt;.b_hs&lt;/code&gt; を &lt;code&gt;.b_hi&lt;/code&gt; に依存させます。少なくとも1つのサフィックスを指定する必要があることに注意してください。サフィックスが必要ない場合は、 &lt;code&gt;-dep-suffix ''&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="4f58245b56849264d71b5f006aa40914e92e5165" translate="yes" xml:space="preserve">
          <source>Make dictionaries strict</source>
          <target state="translated">辞書を厳しくする</target>
        </trans-unit>
        <trans-unit id="f7e4637506fdb1c126cf33d58aefa19e41c7d250" translate="yes" xml:space="preserve">
          <source>Make dictionaries strict.</source>
          <target state="translated">辞書を厳しくする。</target>
        </trans-unit>
        <trans-unit id="5455661e420f1ccaf72cf9dabbbfecf771d7db4a" translate="yes" xml:space="preserve">
          <source>Make dictionary-valued expressions seem cheap to the optimiser.</source>
          <target state="translated">オプティマイザーには、辞書に値を付けた表現を安く見せるようにします。</target>
        </trans-unit>
        <trans-unit id="6f85a3e8f6df876856512758475047874462d99e" translate="yes" xml:space="preserve">
          <source>Make fields of data types defined in the current module strict by default.</source>
          <target state="translated">現在のモジュールで定義されているデータ型のフィールドをデフォルトで厳密にします。</target>
        </trans-unit>
        <trans-unit id="af0e48df1414b6d5a7855574141f6461c5ce4805" translate="yes" xml:space="preserve">
          <source>Make suggestions for mis-spelled names.</source>
          <target state="translated">誤ったスペルの名前を提案してください。</target>
        </trans-unit>
        <trans-unit id="88ce76b97dc5f41df8b9eb8175635106d378b209" translate="yes" xml:space="preserve">
          <source>Make sure that the either you switch off let-floating (&lt;code&gt;-fno-full-laziness&lt;/code&gt;), or that the call to &lt;code&gt;&lt;a href=&quot;ghc-io#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; cannot float outside a lambda. For example, if you say: &lt;code&gt;
           f x = unsafePerformIO (newIORef [])
        &lt;/code&gt; you may get only one reference cell shared between all calls to &lt;code&gt;f&lt;/code&gt;. Better would be &lt;code&gt;
           f x = unsafePerformIO (newIORef [x])
        &lt;/code&gt; because now it can't float outside the lambda.</source>
          <target state="translated">let-floatingをオフにするか（ &lt;code&gt;-fno-full-laziness&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;ghc-io#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; ）、またはunsafePerformIOの呼び出しがラムダの外でフロートできないことを確認してください。たとえば、 &lt;code&gt; f x = unsafePerformIO (newIORef []) &lt;/code&gt; とすると、 &lt;code&gt;f&lt;/code&gt; へのすべての呼び出し間で共有される参照セルが1つだけになる場合があります。 &lt;code&gt; f x = unsafePerformIO (newIORef [x]) &lt;/code&gt; 方が良いでしょう。ラムダの外側に浮かぶことができないからです。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
