<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="haskell">
    <body>
      <group id="haskell">
        <trans-unit id="b77b2a992aaa4c5d69ac5d9df4c739fffdace5ec" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.ReadP</source>
          <target state="translated">Text.ParserCombinators.ReadP</target>
        </trans-unit>
        <trans-unit id="bd62cb34823dd96a921d926b9390b7652930d50d" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.ReadPrec</source>
          <target state="translated">Text.ParserCombinators.ReadPrec</target>
        </trans-unit>
        <trans-unit id="841f953fb25d967de66bdc2bfa7b808a4902b9cc" translate="yes" xml:space="preserve">
          <source>Text.PrettyPrint.Annotated</source>
          <target state="translated">Text.PrettyPrint.Annotated</target>
        </trans-unit>
        <trans-unit id="933dae42a8460538e7deec160889c28236a5659e" translate="yes" xml:space="preserve">
          <source>Text.PrettyPrint.Annotated.HughesPJ</source>
          <target state="translated">Text.PrettyPrint.Annotated.HughesPJ</target>
        </trans-unit>
        <trans-unit id="6ba7533c729a21d883c35ea710a41810576fe3f9" translate="yes" xml:space="preserve">
          <source>Text.PrettyPrint.Annotated.HughesPJClass</source>
          <target state="translated">Text.PrettyPrint.Annotated.HughesPJClass</target>
        </trans-unit>
        <trans-unit id="75d296916408b85ed138aacae307021f81e9b105" translate="yes" xml:space="preserve">
          <source>Text.PrettyPrint.HughesPJ</source>
          <target state="translated">Text.PrettyPrint.HughesPJ</target>
        </trans-unit>
        <trans-unit id="070a1b0e3666fba02bf11cf21864f94454e18fee" translate="yes" xml:space="preserve">
          <source>Text.PrettyPrint.HughesPJClass</source>
          <target state="translated">Text.PrettyPrint.HughesPJClass</target>
        </trans-unit>
        <trans-unit id="852f9faf333892c8bfed010752077687bc710eb3" translate="yes" xml:space="preserve">
          <source>Text.Printf</source>
          <target state="translated">Text.Printf</target>
        </trans-unit>
        <trans-unit id="3e467eeda741670cee0544e799baf3bc68f8f6af" translate="yes" xml:space="preserve">
          <source>Text.Read</source>
          <target state="translated">Text.Read</target>
        </trans-unit>
        <trans-unit id="e7d2b433e6b1a5bfaf0e500258b53ab2699f6b40" translate="yes" xml:space="preserve">
          <source>Text.Read.Lex</source>
          <target state="translated">Text.Read.Lex</target>
        </trans-unit>
        <trans-unit id="82d6f31f8994e83ef79b1676df6acd06d40c0952" translate="yes" xml:space="preserve">
          <source>Text.Show</source>
          <target state="translated">Text.Show</target>
        </trans-unit>
        <trans-unit id="a8c2710c3553b8ef538c168f7f038d784360e352" translate="yes" xml:space="preserve">
          <source>Text.XHtml</source>
          <target state="translated">Text.XHtml</target>
        </trans-unit>
        <trans-unit id="1c794c577eeed3e827f3f4434b0b677541efc237" translate="yes" xml:space="preserve">
          <source>Text.XHtml.Frameset</source>
          <target state="translated">Text.XHtml.Frameset</target>
        </trans-unit>
        <trans-unit id="4e310429294785c3e4ed13f69b32d21e7e3c6e8a" translate="yes" xml:space="preserve">
          <source>Text.XHtml.Strict</source>
          <target state="translated">Text.XHtml.Strict</target>
        </trans-unit>
        <trans-unit id="eaaae80f3e09d76e5b52e5458697c3fd39663493" translate="yes" xml:space="preserve">
          <source>Text.XHtml.Table</source>
          <target state="translated">Text.XHtml.Table</target>
        </trans-unit>
        <trans-unit id="b60bd5c761b5c1a8480926f234df22b56fc27ec9" translate="yes" xml:space="preserve">
          <source>Text.XHtml.Transitional</source>
          <target state="translated">Text.XHtml.Transitional</target>
        </trans-unit>
        <trans-unit id="840c7e38544dbd613fa0b1f9a59f6f627ea3dd88" translate="yes" xml:space="preserve">
          <source>TextDecoder</source>
          <target state="translated">TextDecoder</target>
        </trans-unit>
        <trans-unit id="b1ec439dd8ac6da12ff0821c5bfa7393b4881faa" translate="yes" xml:space="preserve">
          <source>TextEncoder</source>
          <target state="translated">TextEncoder</target>
        </trans-unit>
        <trans-unit id="9195c9a1d76bd3421ac42c82a5d2ce786ab09b23" translate="yes" xml:space="preserve">
          <source>TextEncoding</source>
          <target state="translated">TextEncoding</target>
        </trans-unit>
        <trans-unit id="ef309892f2826f378147927737ca881b40420a37" translate="yes" xml:space="preserve">
          <source>Textual name of this user (pw_name)</source>
          <target state="translated">このユーザーのテキスト名 (pw_name)</target>
        </trans-unit>
        <trans-unit id="45b3ae04eef9762e57f97f506e36c837398301fc" translate="yes" xml:space="preserve">
          <source>Textual source positions.</source>
          <target state="translated">テキストのソースの位置。</target>
        </trans-unit>
        <trans-unit id="6a2ec719ddee27b8ee0018e15dcb0d3552659a4c" translate="yes" xml:space="preserve">
          <source>Th32SnapFlags</source>
          <target state="translated">Th32SnapFlags</target>
        </trans-unit>
        <trans-unit id="f1c71aeaa559503cb5c111582956f3709a70b40b" translate="yes" xml:space="preserve">
          <source>Th32SnapHandle</source>
          <target state="translated">Th32SnapHandle</target>
        </trans-unit>
        <trans-unit id="78e1c498231e4965c95cd3fcf27fb9a7f46b40a8" translate="yes" xml:space="preserve">
          <source>That being said, with the appropriate use of wrapper datatypes, the above limitations induce no loss of generality:</source>
          <target state="translated">つまり、ラッパーのデータ型を適切に使用すれば、上記の制限は一般性を損なうことはありません。</target>
        </trans-unit>
        <trans-unit id="58dcecccbdfb19a6c28d4e72b8694cf3a95079aa" translate="yes" xml:space="preserve">
          <source>That gives rise to a &lt;code&gt;(X [Bool] beta)&lt;/code&gt; constraint, and using the instance means we need &lt;code&gt;(D Bool beta)&lt;/code&gt; and that fixes &lt;code&gt;beta&lt;/code&gt; via &lt;code&gt;D&lt;/code&gt;&amp;lsquo;s fundep!</source>
          <target state="translated">これにより &lt;code&gt;(X [Bool] beta)&lt;/code&gt; 制約が発生し、インスタンスを使用すると &lt;code&gt;(D Bool beta)&lt;/code&gt; が必要になり、 &lt;code&gt;D&lt;/code&gt; のFundepを介して &lt;code&gt;beta&lt;/code&gt; が修正されます。</target>
        </trans-unit>
        <trans-unit id="6a7f123da8ed9434c97040e703694b356a4d2399" translate="yes" xml:space="preserve">
          <source>That gives rise to a &lt;code&gt;(X [Bool] beta)&lt;/code&gt; constraint, and using the instance means we need &lt;code&gt;(D Bool beta)&lt;/code&gt; and that fixes &lt;code&gt;beta&lt;/code&gt; via &lt;code&gt;D&lt;/code&gt;&amp;rsquo;s fundep!</source>
          <target state="translated">これにより、 &lt;code&gt;(X [Bool] beta)&lt;/code&gt; 制約が発生します。インスタンスを使用すると、 &lt;code&gt;(D Bool beta)&lt;/code&gt; が必要になり、 &lt;code&gt;D&lt;/code&gt; のfundepを介して &lt;code&gt;beta&lt;/code&gt; が修正されます。</target>
        </trans-unit>
        <trans-unit id="f2a29bc8dbb5ee0c4a1930b318abbbb60994a117" translate="yes" xml:space="preserve">
          <source>That is because we require an &lt;code&gt;Eq (Option a)&lt;/code&gt; instance from the default type signature for &lt;code&gt;(==#)&lt;/code&gt;, which in turn requires an &lt;code&gt;Eq a&lt;/code&gt; instance, which we don&amp;rsquo;t have in scope. But if you tweak the definition of &lt;code&gt;HigherEq&lt;/code&gt; slightly:</source>
          <target state="translated">これは、 &lt;code&gt;(==#)&lt;/code&gt; のデフォルトの型シグネチャから &lt;code&gt;Eq (Option a)&lt;/code&gt; インスタンスが必要なためです。これには、スコープ内にない &lt;code&gt;Eq a&lt;/code&gt; インスタンスが必要です。ただし、 &lt;code&gt;HigherEq&lt;/code&gt; の定義を少し調整すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="462366d2ca673f43337d58fb2f79b52eb40d828a" translate="yes" xml:space="preserve">
          <source>That is the same as the dynamic linking on other platforms, and it is described in &lt;a href=&quot;shared_libs#using-shared-libs&quot;&gt;Using shared libraries&lt;/a&gt;.</source>
          <target state="translated">これは他のプラットフォームでの動的リンクと同じであり、&lt;a href=&quot;shared_libs#using-shared-libs&quot;&gt;共有ライブラリの使用&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="5adb8f6d680643cb988e19cd9ebd95685b0e9084" translate="yes" xml:space="preserve">
          <source>That is, &lt;a href=&quot;#extension-DeriveFunctor&quot;&gt;&lt;code&gt;DeriveFunctor&lt;/code&gt;&lt;/a&gt; pattern-matches its way into tuples and maps over each type that constitutes the tuple. The generated code is reminiscent of what would be generated from &lt;code&gt;data Triple a = Triple a Int [a]&lt;/code&gt;, except with extra machinery to handle the tuple.</source>
          <target state="translated">つまり、&lt;a href=&quot;#extension-DeriveFunctor&quot;&gt; &lt;code&gt;DeriveFunctor&lt;/code&gt; &lt;/a&gt;は、その方法をタプルにパターンマッチングし、タプルを構成する各型にマップします。生成されたコードは、 &lt;code&gt;data Triple a = Triple a Int [a]&lt;/code&gt; から生成されるものを連想させます。</target>
        </trans-unit>
        <trans-unit id="4a82aebf2ff4e63f82086bf2da9eae4d7a61ab25" translate="yes" xml:space="preserve">
          <source>That is, &lt;code&gt;&lt;a href=&quot;ghc-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; parses the string produced by &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt;, and delivers the value that &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; started with.</source>
          <target state="translated">つまり、 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; はによって生成された文字列解析し &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; を、その価値提供 &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; が使用を開始します。</target>
        </trans-unit>
        <trans-unit id="9e481507876f41c367fe06e578b12b78a4e7b1ac" translate="yes" xml:space="preserve">
          <source>That is, &lt;code&gt;&lt;a href=&quot;prelude#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; parses the string produced by &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt;, and delivers the value that &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; started with.</source>
          <target state="translated">つまり、 &lt;code&gt;&lt;a href=&quot;prelude#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; はによって生成された文字列解析し &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; を、その価値提供 &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; が使用を開始します。</target>
        </trans-unit>
        <trans-unit id="49ebb42c3d6e117d12265da60c750a18218cde33" translate="yes" xml:space="preserve">
          <source>That is, &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; parses the string produced by &lt;code&gt;&lt;a href=&quot;ghc-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt;, and delivers the value that &lt;code&gt;&lt;a href=&quot;ghc-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; started with.</source>
          <target state="translated">つまり、 &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; はによって生成された文字列解析し &lt;code&gt;&lt;a href=&quot;ghc-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; を、その価値提供 &lt;code&gt;&lt;a href=&quot;ghc-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; が使用を開始します。</target>
        </trans-unit>
        <trans-unit id="924d09ba70f052db4b220a5f8dac59b3109fa413" translate="yes" xml:space="preserve">
          <source>That is, &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; parses the string produced by &lt;code&gt;&lt;a href=&quot;prelude#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt;, and delivers the value that &lt;code&gt;&lt;a href=&quot;prelude#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; started with.</source>
          <target state="translated">つまり、 &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; はによって生成された文字列解析し &lt;code&gt;&lt;a href=&quot;prelude#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; を、その価値提供 &lt;code&gt;&lt;a href=&quot;prelude#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; が使用を開始します。</target>
        </trans-unit>
        <trans-unit id="5981428896475a8992aaf356fb600c2886c3b975" translate="yes" xml:space="preserve">
          <source>That is, &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; parses the string produced by &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt;, and delivers the value that &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; started with.</source>
          <target state="translated">つまり、 &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; はによって生成された文字列解析し &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; を、その価値提供 &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; が使用を開始します。</target>
        </trans-unit>
        <trans-unit id="a0d56a2fcb64d6ff47305c969e3cc186106c4d12" translate="yes" xml:space="preserve">
          <source>That is, a quoter is a tuple of four parsers, one for each of the contexts in which a quasi-quote can occur.</source>
          <target state="translated">つまり、クォーターは4つのパーサーのタプルであり、準引用が発生する可能性のある文脈ごとに1つずつ用意されています。</target>
        </trans-unit>
        <trans-unit id="1ac21267c135501bf8d1d0d91f2b069a3782591d" translate="yes" xml:space="preserve">
          <source>That is, an &lt;code&gt;SPretty Foo&lt;/code&gt; instance will be created with empty implementations for all methods. Since we are using &lt;a href=&quot;#extension-DefaultSignatures&quot;&gt;&lt;code&gt;DefaultSignatures&lt;/code&gt;&lt;/a&gt; in this example, a default implementation of &lt;code&gt;sPpr&lt;/code&gt; is filled in automatically.</source>
          <target state="translated">つまり、 &lt;code&gt;SPretty Foo&lt;/code&gt; インスタンスは、すべてのメソッドに対して空の実装で作成されます。この例では&lt;a href=&quot;#extension-DefaultSignatures&quot;&gt; &lt;code&gt;DefaultSignatures&lt;/code&gt; &lt;/a&gt;を使用しているため、 &lt;code&gt;sPpr&lt;/code&gt; のデフォルト実装が自動的に入力されます。</target>
        </trans-unit>
        <trans-unit id="663aa2118010ecc8a1e027d6bf82ba72221ad60a" translate="yes" xml:space="preserve">
          <source>That is, an &lt;code&gt;SPretty Foo&lt;/code&gt; instance will be created with empty implementations for all methods. Since we are using &lt;a href=&quot;default_signatures#extension-DefaultSignatures&quot;&gt;&lt;code&gt;DefaultSignatures&lt;/code&gt;&lt;/a&gt; in this example, a default implementation of &lt;code&gt;sPpr&lt;/code&gt; is filled in automatically.</source>
          <target state="translated">つまり、 &lt;code&gt;SPretty Foo&lt;/code&gt; インスタンスは、すべてのメソッドの空の実装で作成されます。この例では&lt;a href=&quot;default_signatures#extension-DefaultSignatures&quot;&gt; &lt;code&gt;DefaultSignatures&lt;/code&gt; &lt;/a&gt;を使用しているため、 &lt;code&gt;sPpr&lt;/code&gt; のデフォルトの実装が自動的に入力されます。</target>
        </trans-unit>
        <trans-unit id="8b860dffaafb771638ee538e2b0ac1693cebe622" translate="yes" xml:space="preserve">
          <source>That is, since the type variable &lt;code&gt;a&lt;/code&gt; isn&amp;rsquo;t in scope, it&amp;rsquo;s implicitly universally quantified.</source>
          <target state="translated">つまり、型変数 &lt;code&gt;a&lt;/code&gt; はスコープ内にないため、暗黙的に普遍的に数量化されます。</target>
        </trans-unit>
        <trans-unit id="d7a4e9e2c0f64dd1b628ca2224d1a3e388241d4f" translate="yes" xml:space="preserve">
          <source>That is, the &lt;code&gt;&lt;a href=&quot;data-binary#v:get&quot;&gt;get&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-binary#v:put&quot;&gt;put&lt;/a&gt;&lt;/code&gt; methods should be the inverse of each other. A range of instances are provided for basic Haskell types.</source>
          <target state="translated">つまり、 &lt;code&gt;&lt;a href=&quot;data-binary#v:get&quot;&gt;get&lt;/a&gt;&lt;/code&gt; メソッドと &lt;code&gt;&lt;a href=&quot;data-binary#v:put&quot;&gt;put&lt;/a&gt;&lt;/code&gt; メソッドは互いに逆でなければなりません。基本的なHaskellタイプには、さまざまなインスタンスが用意されています。</target>
        </trans-unit>
        <trans-unit id="2de858dbd3f42f7a78dc46a1d661e4c45116e634" translate="yes" xml:space="preserve">
          <source>That is, the operator must be a function of two arguments. GHC allows it to take only one argument, and that in turn allows you to write the function postfix.</source>
          <target state="translated">つまり、演算子は2つの引数の関数でなければなりません。GHCでは引数を1つだけ取ることができますが、これによって関数postfixを書くことができます。</target>
        </trans-unit>
        <trans-unit id="de2666094f8dd3b89fcecfae7a344b137b1c390e" translate="yes" xml:space="preserve">
          <source>That is, the scoping is the same as it would be if the curried arguments were collected into a tuple.</source>
          <target state="translated">つまり、スコーピングは、カレー化された引数をタプルに集めた場合と同じです。</target>
        </trans-unit>
        <trans-unit id="a08280c0c335de4d817b47c060a3f4af660b030a" translate="yes" xml:space="preserve">
          <source>That is, to match a variable ⟨v⟩ against a pattern &lt;code&gt;(&lt;/code&gt; ⟨exp⟩ &lt;code&gt;-&amp;gt;&lt;/code&gt; ⟨pat⟩ &lt;code&gt;)&lt;/code&gt;, evaluate &lt;code&gt;(&lt;/code&gt; ⟨exp⟩ ⟨v⟩ &lt;code&gt;)&lt;/code&gt; and match the result against ⟨pat⟩.</source>
          <target state="translated">すなわち、パターンに対する変数⟨v⟩一致する &lt;code&gt;(&lt;/code&gt; ⟨exp⟩ &lt;code&gt;-&amp;gt;&lt;/code&gt; ⟨pat⟩ &lt;code&gt;)&lt;/code&gt; 、評価を &lt;code&gt;(&lt;/code&gt; ⟨exp⟩⟨v⟩ &lt;code&gt;)&lt;/code&gt; と⟨pat⟩に対する結果と一致。</target>
        </trans-unit>
        <trans-unit id="f81ae30760fa45f0027ed10944dbae9bf4a7947d" translate="yes" xml:space="preserve">
          <source>That is, we add a new form of pattern, written ⟨expression⟩ &lt;code&gt;-&amp;gt;&lt;/code&gt; ⟨pattern⟩ that means &amp;ldquo;apply the expression to whatever we&amp;rsquo;re trying to match against, and then match the result of that application against the pattern&amp;rdquo;. The expression can be any Haskell expression of function type, and view patterns can be used wherever patterns are used.</source>
          <target state="translated">つまり、「式」 &lt;code&gt;-&amp;gt;&lt;/code&gt; 「パターン」と書かれた新しいパターンのパターンを追加します。これは、「照合しようとしているものに式を適用し、そのパターンとアプリケーションの結果を照合する」ことを意味します。式は、関数タイプの任意のHaskell式にすることができ、ビューパターンは、パターンが使用されるところならどこでも使用できます。</target>
        </trans-unit>
        <trans-unit id="e4472bb74389d304d179494e5f818bbd3e2091fe" translate="yes" xml:space="preserve">
          <source>That is, we represent every functional dependency (FD) &lt;code&gt;a1 .. an -&amp;gt; b&lt;/code&gt; by an FD type family &lt;code&gt;F a1 .. an&lt;/code&gt; and a superclass context equality &lt;code&gt;F a1 .. an ~ b&lt;/code&gt;, essentially giving a name to the functional dependency. In class instances, we define the type instances of FD families in accordance with the class head. Method signatures are not affected by that process.</source>
          <target state="translated">つまり、すべての機能依存関係（FD） &lt;code&gt;a1 .. an -&amp;gt; b&lt;/code&gt; をFDタイプファミリー &lt;code&gt;F a1 .. an&lt;/code&gt; とスーパークラスコンテキスト等価 &lt;code&gt;F a1 .. an ~ b&lt;/code&gt; an〜bで表し、基本的に機能依存関係に名前を付けます。クラスインスタンスでは、クラスヘッドに従ってFDファミリのタイプインスタンスを定義します。メソッドシグネチャはそのプロセスの影響を受けません。</target>
        </trans-unit>
        <trans-unit id="087a1186066043015d53285a25aa834f074c4bb9" translate="yes" xml:space="preserve">
          <source>That last one deserves a special mention, however, since &lt;code&gt;a -&amp;gt; Int -&amp;gt; Int&lt;/code&gt; is a straightforward instantiation of &lt;code&gt;forall b. a -&amp;gt; b -&amp;gt; b&lt;/code&gt;. You can still write such a default type signature, but you now must use type equalities to do so:</source>
          <target state="translated">ただし、 &lt;code&gt;a -&amp;gt; Int -&amp;gt; Int&lt;/code&gt; は &lt;code&gt;forall b. a -&amp;gt; b -&amp;gt; b&lt;/code&gt; 簡単なインスタンス化であるため、最後の1つは特筆に値します。a-&amp;gt; b-&amp;gt; b。このようなデフォルトの型シグニチャーを作成することはできますが、そのためには型の等価性を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="7aa747ff9513051d2f3e0f63c5ab4677db5c86d5" translate="yes" xml:space="preserve">
          <source>That leaves let expressions, whose translation is given in &lt;a href=&quot;http://www.haskell.org/onlinereport/exps.html#sect3.12&quot;&gt;Section 3.12&lt;/a&gt; of the Haskell Report. Replace the &amp;ldquo;Translation&amp;rdquo; there with the following one. Given &lt;code&gt;let { bind1 ... bindn } in body&lt;/code&gt;:</source>
          <target state="translated">これはlet式を残し、その翻訳はHaskellレポートの&lt;a href=&quot;http://www.haskell.org/onlinereport/exps.html#sect3.12&quot;&gt;セクション3.12&lt;/a&gt;で与えられます。そこで「翻訳」を次のように置き換えます。与えられた &lt;code&gt;let { bind1 ... bindn } in body&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="cd50fc2b9c34278d98468c36da785c66b0803c5a" translate="yes" xml:space="preserve">
          <source>That leaves let expressions, whose translation is given in &lt;a href=&quot;https://www.haskell.org/onlinereport/exps.html#sect3.12&quot;&gt;Section 3.12&lt;/a&gt; of the Haskell Report. Replace the &amp;ldquo;Translation&amp;rdquo; there with the following one. Given &lt;code&gt;let { bind1 ... bindn } in body&lt;/code&gt;:</source>
          <target state="translated">それはlet式を残します、その翻訳はHaskellレポートの&lt;a href=&quot;https://www.haskell.org/onlinereport/exps.html#sect3.12&quot;&gt;セクション3.12&lt;/a&gt;で与えられます。そこでの「翻訳」を次のものに置き換えてください。与えられた &lt;code&gt;let { bind1 ... bindn } in body&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="9239200a2fcf1e520b700775bc66f764a197c669" translate="yes" xml:space="preserve">
          <source>That postpones the question of which instance to pick to the call site for &lt;code&gt;f&lt;/code&gt; by which time more is known about the type &lt;code&gt;b&lt;/code&gt;. You can write this type signature yourself if you use the &lt;a href=&quot;#extension-FlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt; extension.</source>
          <target state="translated">延期のための呼び出しサイトに迎えにインスタンスの疑問その &lt;code&gt;f&lt;/code&gt; より型について知られている時点で &lt;code&gt;b&lt;/code&gt; 。&lt;a href=&quot;#extension-FlexibleContexts&quot;&gt; &lt;code&gt;FlexibleContexts&lt;/code&gt; &lt;/a&gt;拡張機能を使用する場合は、この型シグネチャを自分で作成できます。</target>
        </trans-unit>
        <trans-unit id="d389a135a3109bdad0320beb8a57c6c2152f2179" translate="yes" xml:space="preserve">
          <source>That postpones the question of which instance to pick to the call site for &lt;code&gt;f&lt;/code&gt; by which time more is known about the type &lt;code&gt;b&lt;/code&gt;. You can write this type signature yourself if you use the &lt;a href=&quot;flexible_contexts#extension-FlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt; extension.</source>
          <target state="translated">これにより、どのインスタンスを &lt;code&gt;f&lt;/code&gt; の呼び出しサイトに選択するかという質問が延期され、その時点でタイプ &lt;code&gt;b&lt;/code&gt; についてより多くのことがわかります。&lt;a href=&quot;flexible_contexts#extension-FlexibleContexts&quot;&gt; &lt;code&gt;FlexibleContexts&lt;/code&gt; &lt;/a&gt;拡張機能を使用する場合は、このタイプの署名を自分で作成できます。</target>
        </trans-unit>
        <trans-unit id="0af663474763fbec92b5233bfe0db021c376fce2" translate="yes" xml:space="preserve">
          <source>That would make no sense if the expression to the left of &lt;code&gt;-&amp;lt;&lt;/code&gt; involves the bound variable &lt;code&gt;x&lt;/code&gt;. More generally, the expression to the left of &lt;code&gt;-&amp;lt;&lt;/code&gt; may not involve any local variable, i.e. a variable bound in the current arrow abstraction. For such a situation there is a variant &lt;code&gt;-&amp;lt;&amp;lt;&lt;/code&gt;, as in</source>
          <target state="translated">&lt;code&gt;-&amp;lt;&lt;/code&gt; の左側の式がバインドされた変数 &lt;code&gt;x&lt;/code&gt; を含む場合、これは意味がありません。より一般的には、 &lt;code&gt;-&amp;lt;&lt;/code&gt; の左側の式には、ローカル変数、つまり現在の矢印の抽象化でバインドされた変数を含めることができません。このような状況では、次のようなバリアント &lt;code&gt;-&amp;lt;&amp;lt;&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="8395997f12760883e7bd00deba567522fa0be628" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all a little confusing, so here&amp;rsquo;s a few examples. To start with, here&amp;rsquo;s a new GHCi command which doesn&amp;rsquo;t take any arguments or produce any results, it just outputs the current date and time:</source>
          <target state="translated">これは少しわかりにくいので、ここにいくつかの例を示します。まず、次の新しいGHCiコマンドは、引数を取らず、結果も生成せず、現在の日付と時刻を出力するだけです。</target>
        </trans-unit>
        <trans-unit id="3a5d327acf1cda84e99ba8c8418f8a6e3f1a6041" translate="yes" xml:space="preserve">
          <source>The &quot;%v&quot; specifier is provided for all built-in types, and should be provided for user-defined type formatters as well. It picks a &quot;best&quot; representation for the given type. For the built-in types the &quot;%v&quot; specifier is converted as follows:</source>
          <target state="translated">v&quot; 指定子は、すべての組み込み型に対して提供されており、ユーザ定義の型フォーマッタに対しても提供されるべきです。この指定子は、指定された型の &quot;最良の &quot;表現を選択します。組み込み型では、&quot;%v&quot; 指定子は以下のように変換されます。</target>
        </trans-unit>
        <trans-unit id="307d8dbf7393ba19bad8b70f752ec95aa046ce44" translate="yes" xml:space="preserve">
          <source>The &quot;&lt;code&gt;By&lt;/code&gt;&quot; operations</source>
          <target state="translated">「 &lt;code&gt;By&lt;/code&gt; 」操作</target>
        </trans-unit>
        <trans-unit id="599928469bbf0c1871f851f1ade723c44533fb25" translate="yes" xml:space="preserve">
          <source>The &quot;&lt;code&gt;generic&lt;/code&gt;&quot; operations</source>
          <target state="translated">「 &lt;code&gt;generic&lt;/code&gt; 」操作</target>
        </trans-unit>
        <trans-unit id="d6bed068edef8687960252343aec2dce4a6f9960" translate="yes" xml:space="preserve">
          <source>The &quot;alternate form&quot; for unsigned radix conversions is as in C &lt;code&gt;printf(3)&lt;/code&gt;:</source>
          <target state="translated">符号なし基数変換の「代替形式」は、Cの &lt;code&gt;printf(3)&lt;/code&gt; と同様です。</target>
        </trans-unit>
        <trans-unit id="594cda52526f7a4ced49e3f563eb6b3d2f24eeb4" translate="yes" xml:space="preserve">
          <source>The &quot;format parser&quot; walks over argument-type-specific modifier characters to find the primary format character. This is the type of its result.</source>
          <target state="translated">フォーマットパーサ」は、引数型固有の修飾文字の上を歩き、主なフォーマット文字を見つけます。これがその結果の型です。</target>
        </trans-unit>
        <trans-unit id="7723ee8b77a369d6247096077763bfcd23d475ce" translate="yes" xml:space="preserve">
          <source>The &quot;live&quot; elements of the buffer are those between the &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufL&quot;&gt;bufL&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufR&quot;&gt;bufR&lt;/a&gt;&lt;/code&gt; offsets. In an empty buffer, &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufL&quot;&gt;bufL&lt;/a&gt;&lt;/code&gt; is equal to &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufR&quot;&gt;bufR&lt;/a&gt;&lt;/code&gt;, but they might not be zero: for example, the buffer might correspond to a memory-mapped file and in which case &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufL&quot;&gt;bufL&lt;/a&gt;&lt;/code&gt; will point to the next location to be written, which is not necessarily the beginning of the file.</source>
          <target state="translated">バッファの「ライブ」の要素が間のものであり &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufL&quot;&gt;bufL&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufR&quot;&gt;bufR&lt;/a&gt;&lt;/code&gt; のオフセット。空のバッファでは、 &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufL&quot;&gt;bufL&lt;/a&gt;&lt;/code&gt; に等しい &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufR&quot;&gt;bufR&lt;/a&gt;&lt;/code&gt; 、それらはゼロではないかもしれません。例えば、バッファは、メモリマップドファイルに対応する可能性があり、その場合に &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufL&quot;&gt;bufL&lt;/a&gt;&lt;/code&gt; 必ずしもされていない、書き込まれる次の位置を指すことになりますファイルの始まり。</target>
        </trans-unit>
        <trans-unit id="2a8382d16990b13cd15a39a55ae784945d07894a" translate="yes" xml:space="preserve">
          <source>The &quot;normal&quot; (Level 0) of detail.</source>
          <target state="translated">詳細の「普通」(レベル0)。</target>
        </trans-unit>
        <trans-unit id="f72b6aeac8d85eeec70693b005224f9243157a76" translate="yes" xml:space="preserve">
          <source>The &quot;reflection trick&quot;, which takes advantanage of the fact that in &lt;code&gt;class C a where { op :: ty }&lt;/code&gt;, we can safely coerce between &lt;code&gt;C a&lt;/code&gt; and &lt;code&gt;ty&lt;/code&gt; (which have different kinds!) because it's really just a newtype. Note: there is &lt;em&gt;no guarantee, at all&lt;/em&gt; that this behavior will be supported into perpetuity.</source>
          <target state="translated">&lt;code&gt;class C a where { op :: ty }&lt;/code&gt; Caで{op :: ty}であるという事実を利用した「リフレクショントリック」は、実際には単なるニュータイプであるため、 &lt;code&gt;C a&lt;/code&gt; と &lt;code&gt;ty&lt;/code&gt; （種類が異なります！）の間で安全に強制できます。注：この動作が永続的にサポートされるという&lt;em&gt;保証&lt;/em&gt;はあり&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="c953365586bc5a5e627fb11bde8ec6bbd7800149" translate="yes" xml:space="preserve">
          <source>The &quot;value&quot; exposed via the &lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-foldable#t:Foldable&quot;&gt;Foldable&lt;/a&gt;&lt;/code&gt; etc. instances.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-foldable#t:Foldable&quot;&gt;Foldable&lt;/a&gt;&lt;/code&gt; などのインスタンスを介して公開される「値」。</target>
        </trans-unit>
        <trans-unit id="667c18fb4c63293a30cf0ae6252784353ac2d4c3" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;&lt;code&gt;forall a&lt;/code&gt;&amp;rdquo; brings &amp;ldquo;&lt;code&gt;a&lt;/code&gt;&amp;rdquo; into scope in the definition of &amp;ldquo;&lt;code&gt;f&lt;/code&gt;&amp;rdquo;.</source>
          <target state="translated">「 &lt;code&gt;forall a&lt;/code&gt; 」は、「 &lt;code&gt;a&lt;/code&gt; 」を「 &lt;code&gt;f&lt;/code&gt; 」の定義の範囲に含めます。</target>
        </trans-unit>
        <trans-unit id="c6c6c6b0c9636ffbfcb145dd52b6cf329767257a" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;bytes allocated in the heap&amp;rdquo; is the total bytes allocated by the program over the whole run.</source>
          <target state="translated">「ヒープに割り当てられたバイト」は、実行全体でプログラムによって割り当てられた合計バイトです。</target>
        </trans-unit>
        <trans-unit id="584d620fa2734b6b5eaa0370f4dc4f644b3e240e" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;bytes maximum slop&amp;rdquo; tells you the most space that is ever wasted due to the way GHC allocates memory in blocks. Slop is memory at the end of a block that was wasted. There&amp;rsquo;s no way to control this; we just like to see how much memory is being lost this way.</source>
          <target state="translated">「バイトの最大スロップ」は、GHCがメモリをブロックで割り当てる方法が原因でこれまでに無駄になっている最大のスペースを示します。Slopは、無駄になったブロックの最後のメモリです。これを制御する方法はありません。この方法で失われるメモリの量を確認したいだけです。</target>
        </trans-unit>
        <trans-unit id="45090aca257e8cf2e737992e0dab8be6af802dda" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;general principle&amp;rdquo; described here is meant to make all this more predictable for users. It would not be hard to extend GHC to relax this principle. If you should want a change here, consider writing a &lt;a href=&quot;https://github.com/ghc-proposals/ghc-proposals/&quot;&gt;proposal&lt;/a&gt; to do so.</source>
          <target state="translated">ここで説明する「一般原則」は、これらすべてをユーザーにとってより予測可能にすることを目的としています。この原則を緩和するためにGHCを拡張することは難しくありません。ここで変更が必要な場合は、変更を&lt;a href=&quot;https://github.com/ghc-proposals/ghc-proposals/&quot;&gt;提案&lt;/a&gt;することを検討してください。</target>
        </trans-unit>
        <trans-unit id="4fef8e475f005ce6d6f926436263775847cc3803" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;i&amp;rdquo; stands for &amp;ldquo;Interactive&amp;rdquo;</source>
          <target state="translated">「i」は「インタラクティブ」を意味します</target>
        </trans-unit>
        <trans-unit id="fc84efa3e37fb0d48e7458b75c4700965bef870a" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;total memory in use&amp;rdquo; tells you the peak memory the RTS has allocated from the OS.</source>
          <target state="translated">「使用中の合計メモリ」は、RTSがOSから割り当てたピークメモリを示します。</target>
        </trans-unit>
        <trans-unit id="c4ca1b8698b4c3c42a66add6d5685bab0dd89277" translate="yes" xml:space="preserve">
          <source>The (binary) &lt;code&gt;Tree&lt;/code&gt; instance example makes use of both, after defining the &lt;code&gt;Empty&lt;/code&gt; base case and the singleton &lt;code&gt;Leaf&lt;/code&gt; node case, non-empty internal nodes introduce both a prepended child node on the left and an appended child node on the right:</source>
          <target state="translated">（バイナリ） &lt;code&gt;Tree&lt;/code&gt; インスタンスの例では、両方を使用します。 &lt;code&gt;Empty&lt;/code&gt; ベースケースとシングルトン &lt;code&gt;Leaf&lt;/code&gt; ノードのケースを定義した後、空でない内部ノードは、左側に追加された子ノードと右側に追加された子ノードの両方を導入します。</target>
        </trans-unit>
        <trans-unit id="eb3433e82abbee6557ae4932640c2d8da6b781db" translate="yes" xml:space="preserve">
          <source>The (mono)type: &lt;code&gt;tau&lt;/code&gt;</source>
          <target state="translated">（モノ）タイプ： &lt;code&gt;tau&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="60b26e67d917cc3a857c71a7f8b8990a2841e52f" translate="yes" xml:space="preserve">
          <source>The 0 pointer. Used to indicate the empty Bytestring.</source>
          <target state="translated">0 ポインタ。空のバイト列を示すために使用されます。</target>
        </trans-unit>
        <trans-unit id="b0f2110e66ee660be4c8c2f43b8e22fc7b2ac364" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-BlockArguments&quot;&gt;&lt;code&gt;BlockArguments&lt;/code&gt;&lt;/a&gt; extension allows these constructs to be directly used as a function argument. For example:</source>
          <target state="translated">&lt;a href=&quot;#extension-BlockArguments&quot;&gt; &lt;code&gt;BlockArguments&lt;/code&gt; の&lt;/a&gt;延長は、これらの構築物が直接、関数の引数として使用することができます。例えば：</target>
        </trans-unit>
        <trans-unit id="64bdb3d073f079d531b8a96572945cc8af7548ae" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-BlockArguments&quot;&gt;&lt;code&gt;BlockArguments&lt;/code&gt;&lt;/a&gt; extension moves these production rules under &lt;code&gt;aexp&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;#extension-BlockArguments&quot;&gt; &lt;code&gt;BlockArguments&lt;/code&gt; の&lt;/a&gt;拡張子は、下のこれらの生成規則に移動 &lt;code&gt;aexp&lt;/code&gt; を</target>
        </trans-unit>
        <trans-unit id="7c6312d568cf2735ca75edec69b8ff484ecdbef9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-BlockArguments&quot;&gt;&lt;code&gt;BlockArguments&lt;/code&gt;&lt;/a&gt; extension moves these production rules under &lt;code&gt;aexp&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;#extension-BlockArguments&quot;&gt; &lt;code&gt;BlockArguments&lt;/code&gt; の&lt;/a&gt;拡張子は、下のこれらの生成規則を移動 &lt;code&gt;aexp&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="1c11e29052e1ea592c72c0d937dab2a12cd84eac" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-CPP&quot;&gt;&lt;code&gt;CPP&lt;/code&gt;&lt;/a&gt; language extension can also be enabled using the &lt;a href=&quot;exts/pragmas#language-pragma&quot;&gt;LANGUAGE&lt;/a&gt; pragma; For example:</source>
          <target state="translated">&lt;a href=&quot;#extension-CPP&quot;&gt; &lt;code&gt;CPP&lt;/code&gt; の&lt;/a&gt;言語拡張も使用して有効にすることができる&lt;a href=&quot;exts/pragmas#language-pragma&quot;&gt;言語&lt;/a&gt;プラグマを。例えば：</target>
        </trans-unit>
        <trans-unit id="35c65f0dc74f4931d91c01fa9c6d3700981ddac7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-CPP&quot;&gt;&lt;code&gt;CPP&lt;/code&gt;&lt;/a&gt; language extension can also be enabled using the &lt;a href=&quot;glasgow_exts#language-pragma&quot;&gt;LANGUAGE&lt;/a&gt; pragma; For example:</source>
          <target state="translated">&lt;a href=&quot;#extension-CPP&quot;&gt; &lt;code&gt;CPP&lt;/code&gt; の&lt;/a&gt;言語拡張も使用して有効にすることができる&lt;a href=&quot;glasgow_exts#language-pragma&quot;&gt;言語&lt;/a&gt;プラグマを。例えば：</target>
        </trans-unit>
        <trans-unit id="cb9ce911311ab5062d718c76033a5381bcc759c1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-CPP&quot;&gt;&lt;code&gt;CPP&lt;/code&gt;&lt;/a&gt; language extension enables the C pre-processor. This can be turned into a command-line flag by prefixing it with &lt;code&gt;-X&lt;/code&gt;; For example:</source>
          <target state="translated">&lt;a href=&quot;#extension-CPP&quot;&gt; &lt;code&gt;CPP&lt;/code&gt; の&lt;/a&gt;言語拡張は、Cプリプロセッサを可能にします。これは、接頭辞 &lt;code&gt;-X&lt;/code&gt; を付けることでコマンドラインフラグに変えることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="ae4cf567699873d6594767b8148b3283fe3e91e5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-EmptyCase&quot;&gt;&lt;code&gt;EmptyCase&lt;/code&gt;&lt;/a&gt; extension enables case expressions, or lambda-case expressions, that have no alternatives, thus:</source>
          <target state="translated">&lt;a href=&quot;#extension-EmptyCase&quot;&gt; &lt;code&gt;EmptyCase&lt;/code&gt; の&lt;/a&gt;拡張は、このように、何の選択肢を持っていない場合の表現、またはラムダの場合の式を、可能になります。</target>
        </trans-unit>
        <trans-unit id="abbd0ecca5ae43844dd2d11341709a7cbf2688b3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-EmptyDataDeriving&quot;&gt;&lt;code&gt;EmptyDataDeriving&lt;/code&gt;&lt;/a&gt; flag is only required to enable deriving of these four &amp;ldquo;standard&amp;rdquo; type classes (which are mentioned in the Haskell Report). Other extensions to the &lt;code&gt;deriving&lt;/code&gt; mechanism, which are explained below in greater detail, do not require &lt;a href=&quot;#extension-EmptyDataDeriving&quot;&gt;&lt;code&gt;EmptyDataDeriving&lt;/code&gt;&lt;/a&gt; to be used in conjunction with empty data types. These include:</source>
          <target state="translated">&lt;a href=&quot;#extension-EmptyDataDeriving&quot;&gt; &lt;code&gt;EmptyDataDeriving&lt;/code&gt; &lt;/a&gt;フラグのみ（Haskellレポートに記載されている）、これらの4つの「標準」タイプ・クラスの派生可能にするために必要とされます。以下で詳細に説明する &lt;code&gt;deriving&lt;/code&gt; メカニズムの他の拡張機能では、&lt;a href=&quot;#extension-EmptyDataDeriving&quot;&gt; &lt;code&gt;EmptyDataDeriving&lt;/code&gt; &lt;/a&gt;を空のデータ型と組み合わせて使用する必要はありません。これらが含まれます：</target>
        </trans-unit>
        <trans-unit id="012817880879ac3870d5610c6cda1f372d2afa1d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-ExplicitNamespaces&quot;&gt;&lt;code&gt;ExplicitNamespaces&lt;/code&gt;&lt;/a&gt; extension allows you to prefix the name of a type constructor in an import or export list with &amp;ldquo;&lt;code&gt;type&lt;/code&gt;&amp;rdquo; to disambiguate this case, thus:</source>
          <target state="translated">&lt;a href=&quot;#extension-ExplicitNamespaces&quot;&gt; &lt;code&gt;ExplicitNamespaces&lt;/code&gt; の&lt;/a&gt;拡張機能は、あなたが「でインポートまたはエクスポートリストで型コンストラクタの名前の前に付けることを可能にする &lt;code&gt;type&lt;/code&gt; ため、このケースを明確にするために」：</target>
        </trans-unit>
        <trans-unit id="5ba167f467ba97a573f10efce8b6b966cd314396" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-FlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt; extension lifts the Haskell 98 restriction that the type-class constraints in a type signature must have the form &lt;em&gt;(class type-variable)&lt;/em&gt; or &lt;em&gt;(class (type-variable type1 type2 &amp;hellip; typen))&lt;/em&gt;. With &lt;a href=&quot;#extension-FlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt; these type signatures are perfectly okay</source>
          <target state="translated">&lt;a href=&quot;#extension-FlexibleContexts&quot;&gt; &lt;code&gt;FlexibleContexts&lt;/code&gt; の&lt;/a&gt;拡張は、型シグネチャにおける型クラス制約が形状を有していなければならないことのHaskell 98制限リフト&lt;em&gt;（クラス型変数）&lt;/em&gt;または&lt;em&gt;（クラス（タイプ変数をTYPE1 TYPE2 ... typen）） &lt;/em&gt;。&lt;a href=&quot;#extension-FlexibleContexts&quot;&gt; &lt;code&gt;FlexibleContexts&lt;/code&gt; &lt;/a&gt;これらの型シグネチャは完全に大丈夫です</target>
        </trans-unit>
        <trans-unit id="1e42ac5c594dfd901f58792044e9a9041c4003be" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-FlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt; extension lifts the Haskell 98 restriction that the type-class constraints in a type signature must have the form &lt;em&gt;(class type-variable)&lt;/em&gt; or &lt;em&gt;(class (type-variable type1 type2 ... typen))&lt;/em&gt;. With &lt;a href=&quot;#extension-FlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt; these type signatures are perfectly okay</source>
          <target state="translated">&lt;a href=&quot;#extension-FlexibleContexts&quot;&gt; &lt;code&gt;FlexibleContexts&lt;/code&gt; の&lt;/a&gt;拡張は、型シグネチャにおける型クラス制約が形状を有していなければならないことのHaskell 98制限リフト&lt;em&gt;（クラス型変数）&lt;/em&gt;または&lt;em&gt;（クラス（タイプ変数をTYPE1 TYPE2 ... typen）） &lt;/em&gt;。&lt;a href=&quot;#extension-FlexibleContexts&quot;&gt; &lt;code&gt;FlexibleContexts&lt;/code&gt; &lt;/a&gt;これらの型シグネチャは完全に大丈夫です</target>
        </trans-unit>
        <trans-unit id="7a3b07e5c3b3f792ae9a2205da0ebe6f644dadb1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-FlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt; extension relaxes this rule, as well as relaxing the corresponding rule for type signatures (see &lt;a href=&quot;#flexible-contexts&quot;&gt;The context of a type signature&lt;/a&gt;). Specifically, &lt;a href=&quot;#extension-FlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt;, allows (well-kinded) class constraints of form &lt;code&gt;(C t1 ... tn)&lt;/code&gt; in the context of an instance declaration.</source>
          <target state="translated">&lt;a href=&quot;#extension-FlexibleContexts&quot;&gt; &lt;code&gt;FlexibleContexts&lt;/code&gt; の&lt;/a&gt;拡張は、（参照型署名に対応するルールを緩和、ならびに、このルールを緩和&lt;a href=&quot;#flexible-contexts&quot;&gt;型シグネチャのコンテキスト&lt;/a&gt;）。具体的には、&lt;a href=&quot;#extension-FlexibleContexts&quot;&gt; &lt;code&gt;FlexibleContexts&lt;/code&gt; &lt;/a&gt;は、インスタンス宣言のコンテキストで &lt;code&gt;(C t1 ... tn)&lt;/code&gt; 形式の（親切な）クラス制約を許可します。</target>
        </trans-unit>
        <trans-unit id="0562613b8f75a0cd91d39da3210ac809ea1b3a19" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-FlexibleInstances&quot;&gt;&lt;code&gt;FlexibleInstances&lt;/code&gt;&lt;/a&gt; extension allows the head of the instance declaration to mention arbitrary nested types. For example, this becomes a legal instance declaration</source>
          <target state="translated">&lt;a href=&quot;#extension-FlexibleInstances&quot;&gt; &lt;code&gt;FlexibleInstances&lt;/code&gt; の&lt;/a&gt;延長は、インスタンス宣言の頭部が任意のネストされた型に言及することができます。たとえば、これは正当なインスタンス宣言になります</target>
        </trans-unit>
        <trans-unit id="661ec8113ef99ccdd08a9cd1e3cdeaf21af63fa6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-FlexibleInstances&quot;&gt;&lt;code&gt;FlexibleInstances&lt;/code&gt;&lt;/a&gt; extension implies &lt;a href=&quot;#extension-TypeSynonymInstances&quot;&gt;&lt;code&gt;TypeSynonymInstances&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#extension-FlexibleInstances&quot;&gt; &lt;code&gt;FlexibleInstances&lt;/code&gt; の&lt;/a&gt;拡張子は意味&lt;a href=&quot;#extension-TypeSynonymInstances&quot;&gt; &lt;code&gt;TypeSynonymInstances&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bdcc91b25b9ed4cc5c0260c1f012c1a5f82d2927" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-LambdaCase&quot;&gt;&lt;code&gt;LambdaCase&lt;/code&gt;&lt;/a&gt; extension enables expressions of the form</source>
          <target state="translated">&lt;a href=&quot;#extension-LambdaCase&quot;&gt; &lt;code&gt;LambdaCase&lt;/code&gt; の&lt;/a&gt;拡張は、フォームの表現を可能にします</target>
        </trans-unit>
        <trans-unit id="ae186343574b4460d96f7f83aeb4d511026cbbfd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-MagicHash&quot;&gt;&lt;code&gt;MagicHash&lt;/code&gt;&lt;/a&gt; also enables some new forms of literals (see &lt;a href=&quot;#glasgow-unboxed&quot;&gt;Unboxed types&lt;/a&gt;):</source>
          <target state="translated">&lt;a href=&quot;#extension-MagicHash&quot;&gt; &lt;code&gt;MagicHash&lt;/code&gt; は&lt;/a&gt;また、リテラル（参照のいくつかの新しい形態を可能に&lt;a href=&quot;#glasgow-unboxed&quot;&gt;箱なしタイプを&lt;/a&gt;）：</target>
        </trans-unit>
        <trans-unit id="e3929c268c7ca8099bc7fccc912027c58685a7e0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-MagicHash&quot;&gt;&lt;code&gt;MagicHash&lt;/code&gt;&lt;/a&gt; also enables some new forms of literals (see &lt;a href=&quot;primitives#glasgow-unboxed&quot;&gt;Unboxed types&lt;/a&gt;):</source>
          <target state="translated">&lt;a href=&quot;#extension-MagicHash&quot;&gt; &lt;code&gt;MagicHash&lt;/code&gt; は&lt;/a&gt;また、リテラル（参照のいくつかの新しい形態を可能に&lt;a href=&quot;primitives#glasgow-unboxed&quot;&gt;箱なしタイプを&lt;/a&gt;）：</target>
        </trans-unit>
        <trans-unit id="f156d0b8de4e1a07b993f716b37564cac76a1370" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-PostfixOperators&quot;&gt;&lt;code&gt;PostfixOperators&lt;/code&gt;&lt;/a&gt; extension enables a small extension to the syntax of left operator sections, which allows you to define postfix operators. The extension is this: the left section</source>
          <target state="translated">&lt;a href=&quot;#extension-PostfixOperators&quot;&gt; &lt;code&gt;PostfixOperators&lt;/code&gt; の&lt;/a&gt;拡張機能を使用すると、後置演算子を定義することができます左オペレータセクションの構文に小さな拡張を可能にします。拡張はこれです：左側のセクション</target>
        </trans-unit>
        <trans-unit id="a89c98a9a3a672e6e0625684027419f38aef7f06" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-RankNTypes&quot;&gt;&lt;code&gt;RankNTypes&lt;/code&gt;&lt;/a&gt; option is also required for any type with a &lt;code&gt;forall&lt;/code&gt; or context to the right of an arrow (e.g. &lt;code&gt;f :: Int -&amp;gt; forall a. a-&amp;gt;a&lt;/code&gt;, or &lt;code&gt;g :: Int -&amp;gt; Ord a =&amp;gt; a -&amp;gt; a&lt;/code&gt;). Such types are technically rank 1, but are clearly not Haskell-98, and an extra extension did not seem worth the bother.</source>
          <target state="translated">&lt;a href=&quot;#extension-RankNTypes&quot;&gt; &lt;code&gt;RankNTypes&lt;/code&gt; の&lt;/a&gt;オプションも持つ任意のタイプのために必要とされる &lt;code&gt;forall&lt;/code&gt; （矢印の右側または文脈例えば &lt;code&gt;f :: Int -&amp;gt; forall a. a-&amp;gt;a&lt;/code&gt; 、または &lt;code&gt;g :: Int -&amp;gt; Ord a =&amp;gt; a -&amp;gt; a&lt;/code&gt; ）。そのような型は技術的にはランク1ですが、明らかにHaskell-98ではありません。追加の拡張機能を使用する価値はありませんでした。</target>
        </trans-unit>
        <trans-unit id="35fe223925e3329d9b396b0289c0f1edb80c5f64" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-TupleSections&quot;&gt;&lt;code&gt;TupleSections&lt;/code&gt;&lt;/a&gt; extension enables partially applied tuple constructors. For example, the following program</source>
          <target state="translated">&lt;a href=&quot;#extension-TupleSections&quot;&gt; &lt;code&gt;TupleSections&lt;/code&gt; の&lt;/a&gt;拡張は、部分的に適用されたタプルコンストラクタを可能にします。たとえば、次のプログラム</target>
        </trans-unit>
        <trans-unit id="b17d31417452ac7082cc9ac3c80a11f860e37344" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-TypeApplications&quot;&gt;&lt;code&gt;TypeApplications&lt;/code&gt;&lt;/a&gt; extension allows you to use &lt;em&gt;visible type application&lt;/em&gt; in expressions. Here is an example: &lt;code&gt;show (read @Int &quot;5&quot;)&lt;/code&gt;. The &lt;code&gt;@Int&lt;/code&gt; is the visible type application; it specifies the value of the type variable in &lt;code&gt;read&lt;/code&gt;&amp;lsquo;s type.</source>
          <target state="translated">&lt;a href=&quot;#extension-TypeApplications&quot;&gt; &lt;code&gt;TypeApplications&lt;/code&gt; の&lt;/a&gt;拡張機能を使用すると、使用することができます&lt;em&gt;目に見えるタイプのアプリケーションを&lt;/em&gt;式の中で。次に例を示します： &lt;code&gt;show (read @Int &quot;5&quot;)&lt;/code&gt; 。 &lt;code&gt;@Int&lt;/code&gt; は可視型アプリケーションです。 &lt;code&gt;read&lt;/code&gt; の型の型変数の値を指定します。</target>
        </trans-unit>
        <trans-unit id="815a49f2870c920071d25b5de51faa8078cb6a12" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-TypeApplications&quot;&gt;&lt;code&gt;TypeApplications&lt;/code&gt;&lt;/a&gt; extension allows you to use &lt;em&gt;visible type application&lt;/em&gt; in expressions. Here is an example: &lt;code&gt;show (read @Int &quot;5&quot;)&lt;/code&gt;. The &lt;code&gt;@Int&lt;/code&gt; is the visible type application; it specifies the value of the type variable in &lt;code&gt;read&lt;/code&gt;&amp;rsquo;s type.</source>
          <target state="translated">&lt;a href=&quot;#extension-TypeApplications&quot;&gt; &lt;code&gt;TypeApplications&lt;/code&gt; の&lt;/a&gt;拡張機能を使用すると、使用することができます&lt;em&gt;目に見えるタイプのアプリケーションを&lt;/em&gt;式の中で。次に例を示します： &lt;code&gt;show (read @Int &quot;5&quot;)&lt;/code&gt; 。 &lt;code&gt;@Int&lt;/code&gt; は可視型アプリケーションです。 &lt;code&gt;read&lt;/code&gt; の型の型変数の値を指定します。</target>
        </trans-unit>
        <trans-unit id="2ebe94937368bfa68f3a743d993e9e33b0ab16eb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-UndecidableInstances&quot;&gt;&lt;code&gt;UndecidableInstances&lt;/code&gt;&lt;/a&gt; extension is also used to lift some of the restrictions imposed on type family instances. See &lt;a href=&quot;#type-family-decidability&quot;&gt;Decidability of type synonym instances&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#extension-UndecidableInstances&quot;&gt; &lt;code&gt;UndecidableInstances&lt;/code&gt; の&lt;/a&gt;拡張子はまた、型族インスタンスに課せられた制限の一部を持ち上げるために使用されています。&lt;a href=&quot;#type-family-decidability&quot;&gt;タイプ同義語インスタンスの決定可能性を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0f4536f5d8a26219603d39e37690a74527cca915" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-UndecidableInstances&quot;&gt;&lt;code&gt;UndecidableInstances&lt;/code&gt;&lt;/a&gt; extension is also used to lift some of the restrictions imposed on type family instances. See &lt;a href=&quot;type_families#type-family-decidability&quot;&gt;Decidability of type synonym instances&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#extension-UndecidableInstances&quot;&gt; &lt;code&gt;UndecidableInstances&lt;/code&gt; の&lt;/a&gt;拡張子はまた、型族インスタンスに課せられた制限の一部を持ち上げるために使用されています。&lt;a href=&quot;type_families#type-family-decidability&quot;&gt;タイプシノニムインスタンスの決定可能性を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a40f430193c52ab9a3cf3f22af8fbf5bb4348a51" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghc-flag--Wmissing-export-lists&quot;&gt;&lt;code&gt;-Wmissing-export-lists&lt;/code&gt;&lt;/a&gt; flag will warn that &lt;code&gt;M&lt;/code&gt; does not declare an export list. Declaring an explicit export list for &lt;code&gt;M&lt;/code&gt; enables GHC dead code analysis, prevents accidental export of names and can ease optimizations like inlining.</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--Wmissing-export-lists&quot;&gt; &lt;code&gt;-Wmissing-export-lists&lt;/code&gt; &lt;/a&gt;フラグがあることを警告します &lt;code&gt;M&lt;/code&gt; は、エクスポートリストを宣言しません。 &lt;code&gt;M&lt;/code&gt; の明示的なエクスポートリストを宣言すると、GHCデッドコード分析が有効になり、名前の誤ったエクスポートが防止され、インライン化などの最適化が容易になります。</target>
        </trans-unit>
        <trans-unit id="2a474ac6ba444d90bd68f49cf89271d299c2d550" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghc-flag--Wmissing-import-lists&quot;&gt;&lt;code&gt;-Wmissing-import-lists&lt;/code&gt;&lt;/a&gt; flag will warn about the import of &lt;code&gt;Y&lt;/code&gt; but not &lt;code&gt;X&lt;/code&gt; If module &lt;code&gt;Y&lt;/code&gt; is later changed to export (say) &lt;code&gt;f&lt;/code&gt;, then the reference to &lt;code&gt;f&lt;/code&gt; in &lt;code&gt;M&lt;/code&gt; will become ambiguous. No warning is produced for the import of &lt;code&gt;Z&lt;/code&gt; because extending &lt;code&gt;Z&lt;/code&gt;&amp;lsquo;s exports would be unlikely to produce ambiguity in &lt;code&gt;M&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--Wmissing-import-lists&quot;&gt; &lt;code&gt;-Wmissing-import-lists&lt;/code&gt; &lt;/a&gt;フラグのインポートについて警告する &lt;code&gt;Y&lt;/code&gt; ではなく &lt;code&gt;X&lt;/code&gt; モジュール場合 &lt;code&gt;Y&lt;/code&gt; は、後輸出（例えば）に変更される &lt;code&gt;f&lt;/code&gt; 、その後に参照 &lt;code&gt;f&lt;/code&gt; で &lt;code&gt;M&lt;/code&gt; は曖昧となるであろう。 &lt;code&gt;Z&lt;/code&gt; のエクスポートを拡張しても &lt;code&gt;M&lt;/code&gt; に曖昧さが生じる可能性は低いため、 &lt;code&gt;Z&lt;/code&gt; のインポートについて警告は生成されません。</target>
        </trans-unit>
        <trans-unit id="0e9463d37bc7356ac89d64ece95dfb6664646492" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghc-flag--Wmissing-import-lists&quot;&gt;&lt;code&gt;-Wmissing-import-lists&lt;/code&gt;&lt;/a&gt; flag will warn about the import of &lt;code&gt;Y&lt;/code&gt; but not &lt;code&gt;X&lt;/code&gt; If module &lt;code&gt;Y&lt;/code&gt; is later changed to export (say) &lt;code&gt;f&lt;/code&gt;, then the reference to &lt;code&gt;f&lt;/code&gt; in &lt;code&gt;M&lt;/code&gt; will become ambiguous. No warning is produced for the import of &lt;code&gt;Z&lt;/code&gt; because extending &lt;code&gt;Z&lt;/code&gt;&amp;rsquo;s exports would be unlikely to produce ambiguity in &lt;code&gt;M&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--Wmissing-import-lists&quot;&gt; &lt;code&gt;-Wmissing-import-lists&lt;/code&gt; &lt;/a&gt;フラグのインポートについて警告する &lt;code&gt;Y&lt;/code&gt; ではなく &lt;code&gt;X&lt;/code&gt; モジュール場合 &lt;code&gt;Y&lt;/code&gt; は、後輸出（例えば）に変更される &lt;code&gt;f&lt;/code&gt; 、その後に参照 &lt;code&gt;f&lt;/code&gt; で &lt;code&gt;M&lt;/code&gt; は曖昧となるであろう。 &lt;code&gt;Z&lt;/code&gt; のエクスポートを拡張しても、 &lt;code&gt;M&lt;/code&gt; にあいまいさが生じる可能性は低いため、 &lt;code&gt;Z&lt;/code&gt; のインポートに関する警告は生成されません。</target>
        </trans-unit>
        <trans-unit id="e36bf4d5a27eab719495aba2d65180ff3cb627fe" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghc-flag--XEmptyDataDeriving&quot;&gt;&lt;code&gt;-XEmptyDataDeriving&lt;/code&gt;&lt;/a&gt; flag is only required to enable deriving of these four &amp;ldquo;standard&amp;rdquo; type classes (which are mentioned in the Haskell Report). Other extensions to the &lt;code&gt;deriving&lt;/code&gt; mechanism, which are explained below in greater detail, do not require &lt;a href=&quot;#ghc-flag--XEmptyDataDeriving&quot;&gt;&lt;code&gt;-XEmptyDataDeriving&lt;/code&gt;&lt;/a&gt; to be used in conjunction with empty data types. These include:</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--XEmptyDataDeriving&quot;&gt; &lt;code&gt;-XEmptyDataDeriving&lt;/code&gt; &lt;/a&gt;フラグのみ（Haskellレポートに記載されている）、これらの4つの「標準」タイプ・クラスの派生可能にするために必要とされます。以下で詳細に説明する &lt;code&gt;deriving&lt;/code&gt; メカニズムの他の拡張では、&lt;a href=&quot;#ghc-flag--XEmptyDataDeriving&quot;&gt; &lt;code&gt;-XEmptyDataDeriving&lt;/code&gt; &lt;/a&gt;を空のデータ型と組み合わせて使用する必要はありません。これらには以下が含まれます：</target>
        </trans-unit>
        <trans-unit id="db722c4293a180623ff6c051b1d85ff7e25c05ee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghc-flag--interactive-print%20%E2%9F%A8expr%E2%9F%A9&quot;&gt;&lt;code&gt;-interactive-print ⟨expr⟩&lt;/code&gt;&lt;/a&gt; flag allows to specify any function of type &lt;code&gt;C a =&amp;gt; a -&amp;gt; IO ()&lt;/code&gt;, for some constraint &lt;code&gt;C&lt;/code&gt;, as the function for printing evaluated expressions. The function can reside in any loaded module or any registered package, but only when it resides in a registered package will it survive a &lt;a href=&quot;#ghci-cmd-:cd&quot;&gt;&lt;code&gt;:cd&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:add&quot;&gt;&lt;code&gt;:add&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt;&lt;code&gt;:reload&lt;/code&gt;&lt;/a&gt; or, &lt;a href=&quot;#ghci-cmd-:set&quot;&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--interactive-print%20%E2%9F%A8expr%E2%9F%A9&quot;&gt; &lt;code&gt;-interactive-print ⟨expr⟩&lt;/code&gt; &lt;/a&gt;フラグタイプの任意の関数を指定することができ &lt;code&gt;C a =&amp;gt; a -&amp;gt; IO ()&lt;/code&gt; 一部の制約のために、 &lt;code&gt;C&lt;/code&gt; 評価式を印刷するための機能として、。関数は、読み込まれたモジュールまたは登録されたパッケージに常駐できますが、登録されたパッケージに常駐する場合にのみ、&lt;a href=&quot;#ghci-cmd-:cd&quot;&gt; &lt;code&gt;:cd&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ghci-cmd-:add&quot;&gt; &lt;code&gt;:add&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ghci-cmd-:reload&quot;&gt; &lt;code&gt;:reload&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#ghci-cmd-:set&quot;&gt; &lt;code&gt;:set&lt;/code&gt; を実行し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="630c44ffedd4dd17a812ef0191fcfe9f164168e6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghc-flag--interactive-print%20%E2%9F%A8expr%E2%9F%A9&quot;&gt;&lt;code&gt;-interactive-print ⟨expr⟩&lt;/code&gt;&lt;/a&gt; flag can also be used when running GHC in &lt;code&gt;-e mode&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--interactive-print%20%E2%9F%A8expr%E2%9F%A9&quot;&gt; &lt;code&gt;-interactive-print ⟨expr⟩&lt;/code&gt; &lt;/a&gt;でGHCを実行するときにフラグを使用することもできる &lt;code&gt;-e mode&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="78f35da957d4cd52b15e9fdc17483788082f1d5c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghc-flag--interactive-print%20%E2%9F%A8name%E2%9F%A9&quot;&gt;&lt;code&gt;-interactive-print ⟨name⟩&lt;/code&gt;&lt;/a&gt; flag allows to specify any function of type &lt;code&gt;C a =&amp;gt; a -&amp;gt; IO ()&lt;/code&gt;, for some constraint &lt;code&gt;C&lt;/code&gt;, as the function for printing evaluated expressions. The function can reside in any loaded module or any registered package, but only when it resides in a registered package will it survive a &lt;a href=&quot;#ghci-cmd-:cd&quot;&gt;&lt;code&gt;:cd&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:add&quot;&gt;&lt;code&gt;:add&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt;&lt;code&gt;:reload&lt;/code&gt;&lt;/a&gt; or, &lt;a href=&quot;#ghci-cmd-:set&quot;&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--interactive-print%20%E2%9F%A8name%E2%9F%A9&quot;&gt; &lt;code&gt;-interactive-print ⟨name⟩&lt;/code&gt; &lt;/a&gt;フラグタイプの任意の関数を指定することができ &lt;code&gt;C a =&amp;gt; a -&amp;gt; IO ()&lt;/code&gt; 一部の制約のために、 &lt;code&gt;C&lt;/code&gt; 評価式を印刷するための機能として、。この関数は、ロードされたモジュールまたは登録されたパッケージに存在できますが、登録されたパッケージに存在する場合にのみ、&lt;a href=&quot;#ghci-cmd-:cd&quot;&gt; &lt;code&gt;:cd&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ghci-cmd-:add&quot;&gt; &lt;code&gt;:add&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ghci-cmd-:reload&quot;&gt; &lt;code&gt;:reload&lt;/code&gt; 、&lt;/a&gt;または&lt;a href=&quot;#ghci-cmd-:set&quot;&gt; &lt;code&gt;:set&lt;/code&gt; &lt;/a&gt;に耐えられます。</target>
        </trans-unit>
        <trans-unit id="21b2b57c36c8c1575a9d46ca71c9857aa94c645d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghc-flag--interactive-print%20%E2%9F%A8name%E2%9F%A9&quot;&gt;&lt;code&gt;-interactive-print ⟨name⟩&lt;/code&gt;&lt;/a&gt; flag can also be used when running GHC in &lt;code&gt;-e mode&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--interactive-print%20%E2%9F%A8name%E2%9F%A9&quot;&gt; &lt;code&gt;-interactive-print ⟨name⟩&lt;/code&gt; &lt;/a&gt;でGHCを実行するときにフラグを使用することもできる &lt;code&gt;-e mode&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a9ee5aa0e4404a66caea5cfa0e31661321a8a071" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghc-flag--v&quot;&gt;&lt;code&gt;-v&lt;/code&gt;&lt;/a&gt; option makes GHC &lt;em&gt;verbose&lt;/em&gt;: it reports its version number and shows (on stderr) exactly how it invokes each phase of the compilation system. Moreover, it passes the &lt;code&gt;-v&lt;/code&gt; flag to most phases; each reports its version number (and possibly some other information).</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--v&quot;&gt; &lt;code&gt;-v&lt;/code&gt; &lt;/a&gt;オプションは、GHCを作る&lt;em&gt;冗長&lt;/em&gt;：それはコンパイルシステムの各フェーズを呼び出します正確にどのように（標準エラー出力に）そのバージョン番号やショーをレポートします。さらに、ほとんどのフェーズに &lt;code&gt;-v&lt;/code&gt; フラグを渡します。それぞれがバージョン番号（およびおそらく他の情報）を報告します。</target>
        </trans-unit>
        <trans-unit id="f2aaf666449f19ca504a747ac617450334ac0091" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:list&quot;&gt;&lt;code&gt;:list&lt;/code&gt;&lt;/a&gt; command is particularly useful when single-stepping, to see where you currently are:</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:list&quot;&gt; &lt;code&gt;:list&lt;/code&gt; &lt;/a&gt;あなたが現在いる場所を確認するために、シングルステップ実行コマンドは特に便利です。</target>
        </trans-unit>
        <trans-unit id="c742c2c7dca48891181fe9d4cdbd89257e05f404" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:list&quot;&gt;&lt;code&gt;:list&lt;/code&gt;&lt;/a&gt; command lists the source code around the current breakpoint. If your output device supports it, then GHCi will highlight the active subexpression in bold.</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:list&quot;&gt; &lt;code&gt;:list&lt;/code&gt; &lt;/a&gt;コマンドは、現在のブレークポイントの周りのソースコードを示しています。出力デバイスがサポートしている場合、GHCiはアクティブな部分式を太字で強調表示します。</target>
        </trans-unit>
        <trans-unit id="207cb516d01051ef8920382f50ac703484da325f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:add&quot;&gt;&lt;code&gt;:add&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt;&lt;code&gt;:reload&lt;/code&gt;&lt;/a&gt; commands (&lt;a href=&quot;#ghci-load-scope&quot;&gt;The effect of :load on what is in scope&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ghci-cmd-:add&quot;&gt; &lt;code&gt;:add&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#ghci-cmd-:reload&quot;&gt; &lt;code&gt;:reload&lt;/code&gt; &lt;/a&gt;コマンド（&lt;a href=&quot;#ghci-load-scope&quot;&gt;の効果：範囲内にあるものへの負荷を&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="8573f5c2fc7b5e00d88d28e04c98a9bc731777f4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:add&quot;&gt;&lt;code&gt;:add&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt;&lt;code&gt;:reload&lt;/code&gt;&lt;/a&gt; commands (&lt;a href=&quot;#loading-source-files&quot;&gt;Loading source files&lt;/a&gt; and &lt;a href=&quot;#ghci-compiled&quot;&gt;Loading compiled code&lt;/a&gt;) affect the top-level scope. Let&amp;rsquo;s start with the simple cases; when you start GHCi the prompt looks like this:</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ghci-cmd-:add&quot;&gt; &lt;code&gt;:add&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#ghci-cmd-:reload&quot;&gt; &lt;code&gt;:reload&lt;/code&gt; &lt;/a&gt;コマンド（&lt;a href=&quot;#loading-source-files&quot;&gt;ロードソースファイル&lt;/a&gt;と&lt;a href=&quot;#ghci-compiled&quot;&gt;ロードコンパイルされたコードは&lt;/a&gt;）トップレベルのスコープに影響を与えます。簡単なケースから始めましょう。GHCiを起動すると、プロンプトは次のようになります。</target>
        </trans-unit>
        <trans-unit id="37bb2b0da32b33f4372a12f64ecdf95d300dbf99" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:module&quot;&gt;&lt;code&gt;:module&lt;/code&gt;&lt;/a&gt; command (&lt;a href=&quot;#ghci-module-cmd&quot;&gt;Controlling what is in scope with the :module command&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:module&quot;&gt; &lt;code&gt;:module&lt;/code&gt; &lt;/a&gt;コマンド（&lt;a href=&quot;#ghci-module-cmd&quot;&gt;：モジュールのコマンドを使用して、スコープ内にあるものを制御します&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="f54887dc2345c58aa577bced9bca30f40c4398ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:module&quot;&gt;&lt;code&gt;:module&lt;/code&gt;&lt;/a&gt; command provides a way to do two things that cannot be done with ordinary &lt;code&gt;import&lt;/code&gt; declarations:</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:module&quot;&gt; &lt;code&gt;:module&lt;/code&gt; &lt;/a&gt;のコマンドは、通常で行うことができない二つのことを行うための方法を提供 &lt;code&gt;import&lt;/code&gt; 宣言を：</target>
        </trans-unit>
        <trans-unit id="18bed73a85898df39bbfb21bec72caa1d380f65e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:set&quot;&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/a&gt; command modifies both, but there is also a &lt;a href=&quot;#ghci-cmd-:seti&quot;&gt;&lt;code&gt;:seti&lt;/code&gt;&lt;/a&gt; command (for &amp;ldquo;set interactive&amp;rdquo;) that affects only the interactive options set.</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:set&quot;&gt; &lt;code&gt;:set&lt;/code&gt; &lt;/a&gt;コマンド修正の両方が、また、そこにある&lt;a href=&quot;#ghci-cmd-:seti&quot;&gt; &lt;code&gt;:seti&lt;/code&gt; &lt;/a&gt;のみインタラクティブオプションセットに影響を与え（「セットインタラクティブ」のための）コマンドが。</target>
        </trans-unit>
        <trans-unit id="93a4b5fbe24659bd6501066dacfcac63a656645a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:set&quot;&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/a&gt; command sets two types of options: GHCi options, which begin with &amp;ldquo;&lt;code&gt;+&lt;/code&gt;&amp;rdquo;, and &amp;ldquo;command-line&amp;rdquo; options, which begin with &amp;ldquo;&lt;code&gt;-&lt;/code&gt;&amp;ldquo;.</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:set&quot;&gt; &lt;code&gt;:set&lt;/code&gt; &lt;/a&gt;コマンドセットオプションの2種類：「で始まるGHCiのオプション、 &lt;code&gt;+&lt;/code&gt; 」、およびで始まる「コマンドライン」オプション、「 &lt;code&gt;-&lt;/code&gt; 「。</target>
        </trans-unit>
        <trans-unit id="09a5d114307bab84d24ded440bb5e92a7d6743f5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:set&quot;&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/a&gt; command sets two types of options: GHCi options, which begin with &amp;ldquo;&lt;code&gt;+&lt;/code&gt;&amp;rdquo;, and &amp;ldquo;command-line&amp;rdquo; options, which begin with &amp;ldquo;&lt;code&gt;-&lt;/code&gt;&amp;rdquo;.</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:set&quot;&gt; &lt;code&gt;:set&lt;/code&gt; &lt;/a&gt;コマンドセットオプションの2種類：「で始まるGHCiのオプション、 &lt;code&gt;+&lt;/code&gt; 」、およびで始まる「コマンドライン」オプション、「 &lt;code&gt;-&lt;/code&gt; 」。</target>
        </trans-unit>
        <trans-unit id="994ae649374ddd00dcbdb0398a07b789d70d3ee6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:trace&quot;&gt;&lt;code&gt;:trace&lt;/code&gt;&lt;/a&gt; command can be used with or without an expression. When used without an expression, tracing begins from the current breakpoint, just like &lt;a href=&quot;#ghci-cmd-:step&quot;&gt;&lt;code&gt;:step&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:trace&quot;&gt; &lt;code&gt;:trace&lt;/code&gt; &lt;/a&gt;コマンドはとか表現することなく使用することができます。式なしで使用すると、&lt;a href=&quot;#ghci-cmd-:step&quot;&gt; &lt;code&gt;:step&lt;/code&gt; &lt;/a&gt;と同様に、現在のブレークポイントからトレースが開始されます。</target>
        </trans-unit>
        <trans-unit id="d895b0d326a117dc38216e64627bcf0b504cc040" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:type-at&quot;&gt;&lt;code&gt;:type-at&lt;/code&gt;&lt;/a&gt; command requires &lt;a href=&quot;#ghci-cmd-:set%20+c&quot;&gt;&lt;code&gt;:set +c&lt;/code&gt;&lt;/a&gt; to be set.</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:type-at&quot;&gt; &lt;code&gt;:type-at&lt;/code&gt; &lt;/a&gt;コマンドが必要です&lt;a href=&quot;#ghci-cmd-:set%20+c&quot;&gt; &lt;code&gt;:set +c&lt;/code&gt; &lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="199a238337750e7292c80d8483aa164b1180ba95" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:uses&quot;&gt;&lt;code&gt;:uses&lt;/code&gt;&lt;/a&gt; command requires &lt;a href=&quot;#ghci-cmd-:set%20+c&quot;&gt;&lt;code&gt;:set +c&lt;/code&gt;&lt;/a&gt; to be set.</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:uses&quot;&gt; &lt;code&gt;:uses&lt;/code&gt; &lt;/a&gt;コマンドが必要です&lt;a href=&quot;#ghci-cmd-:set%20+c&quot;&gt; &lt;code&gt;:set +c&lt;/code&gt; &lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="aa13aae9cfabe1538d35b3d45ac31cfcc6173609" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#pragma-INLINE&quot;&gt;&lt;code&gt;INLINE&lt;/code&gt;&lt;/a&gt; pragma has the additional effect of making the function body look small, so that when inlining is allowed it is very likely to happen.</source>
          <target state="translated">&lt;a href=&quot;#pragma-INLINE&quot;&gt; &lt;code&gt;INLINE&lt;/code&gt; の&lt;/a&gt;プラグマは、インライン化が許可されているとき、それは非常に可能性が発生することになるように、関数本体の外観を小さくすることの追加的な効果があります。</target>
        </trans-unit>
        <trans-unit id="3f27181af99e9c0027aecbaabc8044d1c05e8049" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#pragma-NOINLINE&quot;&gt;&lt;code&gt;NOINLINE&lt;/code&gt;&lt;/a&gt; pragma does exactly what you&amp;rsquo;d expect: it stops the named function from being inlined by the compiler. You shouldn&amp;rsquo;t ever need to do this, unless you&amp;rsquo;re very cautious about code size.</source>
          <target state="translated">&lt;a href=&quot;#pragma-NOINLINE&quot;&gt; &lt;code&gt;NOINLINE&lt;/code&gt; の&lt;/a&gt;プラグマは、あなたが期待するものを正確に行います。それは、コンパイラによってインライン化されてからという名前の関数を停止します。コードサイズに非常に注意しない限り、これを行う必要はありません。</target>
        </trans-unit>
        <trans-unit id="c1a5fffbed9c12afd5da25081d7fe2ae31e2b1e9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#pragma-RULES&quot;&gt;&lt;code&gt;RULES&lt;/code&gt;&lt;/a&gt; pragma lets you specify rewrite rules. It is described in &lt;a href=&quot;#rewrite-rules&quot;&gt;Rewrite rules&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#pragma-RULES&quot;&gt; &lt;code&gt;RULES&lt;/code&gt; &lt;/a&gt;プラグマを使用すると、書き換え規則を指定することができます。これは、&lt;a href=&quot;#rewrite-rules&quot;&gt;書き換えルールで&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="bf0632a671131031d8937312a06897d2e45574c4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#rts-flag--F%20%E2%9F%A8factor%E2%9F%A9&quot;&gt;&lt;code&gt;-F ⟨factor⟩&lt;/code&gt;&lt;/a&gt; setting will be automatically reduced by the garbage collector when the maximum heap size (the &lt;a href=&quot;#rts-flag--M%20%E2%9F%A8size%E2%9F%A9&quot;&gt;&lt;code&gt;-M ⟨size⟩&lt;/code&gt;&lt;/a&gt; setting) is approaching.</source>
          <target state="translated">&lt;a href=&quot;#rts-flag--F%20%E2%9F%A8factor%E2%9F%A9&quot;&gt; &lt;code&gt;-F ⟨factor⟩&lt;/code&gt; &lt;/a&gt;設定が自動的に最大ヒープサイズ（ガベージコレクタによって減少する&lt;a href=&quot;#rts-flag--M%20%E2%9F%A8size%E2%9F%A9&quot;&gt; &lt;code&gt;-M ⟨size⟩&lt;/code&gt; &lt;/a&gt;設定）に近づいています。</target>
        </trans-unit>
        <trans-unit id="e8b0c5124d5ea3dd22ec93a4e1efaee8762c585c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#rts-flag--P&quot;&gt;&lt;code&gt;-P&lt;/code&gt;&lt;/a&gt; option produces a more detailed report containing the actual time and allocation data as well. (Not used much.)</source>
          <target state="translated">&lt;a href=&quot;#rts-flag--P&quot;&gt; &lt;code&gt;-P&lt;/code&gt; の&lt;/a&gt;オプションは、同様に実際の時間と割り当てデータを含む詳細なレポートを生成します。（あまり使用されていません。）</target>
        </trans-unit>
        <trans-unit id="1bd683aedc043a933d9975ed15640d3bb66f7a3a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#rts-flag--p&quot;&gt;&lt;code&gt;-p&lt;/code&gt;&lt;/a&gt; option produces a standard &lt;em&gt;time profile&lt;/em&gt; report. It is written into the file &lt;code&gt;&amp;lt;stem&amp;gt;.prof&lt;/code&gt;; the stem is taken to be the program name by default, but can be overridden by the &lt;a href=&quot;#rts-flag--po%20%E2%9F%A8stem%E2%9F%A9&quot;&gt;&lt;code&gt;-po
⟨stem⟩&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="translated">&lt;a href=&quot;#rts-flag--p&quot;&gt; &lt;code&gt;-p&lt;/code&gt; &lt;/a&gt;オプションは、標準生成&lt;em&gt;時間プロファイルの&lt;/em&gt;レポートを。ファイル &lt;code&gt;&amp;lt;stem&amp;gt;.prof&lt;/code&gt; に書き込まれます。ステムはデフォルトでプログラム名と見なされますが、&lt;a href=&quot;#rts-flag--po%20%E2%9F%A8stem%E2%9F%A9&quot;&gt; &lt;code&gt;-po ⟨stem⟩&lt;/code&gt; &lt;/a&gt;フラグでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="6f811997f5e52254e16a04cd53e244ebe3b6c6f7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#rts-flag--pa&quot;&gt;&lt;code&gt;-pa&lt;/code&gt;&lt;/a&gt; option produces the most detailed report containing all cost centres in addition to the actual time and allocation data.</source>
          <target state="translated">&lt;a href=&quot;#rts-flag--pa&quot;&gt; &lt;code&gt;-pa&lt;/code&gt; の&lt;/a&gt;オプションは、実際の時間と割り当てデータに加えて、すべてのコストセンターを含む最も詳細なレポートを生成します。</target>
        </trans-unit>
        <trans-unit id="7a84a3b7430c33f4f0db03022262f484fb7742f5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#rts-flag--pj&quot;&gt;&lt;code&gt;-pj&lt;/code&gt;&lt;/a&gt; option produces a time/allocation profile report in JSON format written into the file &lt;code&gt;&amp;lt;program&amp;gt;.prof&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#rts-flag--pj&quot;&gt; &lt;code&gt;-pj&lt;/code&gt; &lt;/a&gt;オプションは、ファイルに書き込まれたJSON形式の時間/配分プロファイルレポート生成 &lt;code&gt;&amp;lt;program&amp;gt;.prof&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="49e571794c298f99f38543a85d7967e52fd97375" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#rts-flag--po%20%E2%9F%A8stem%E2%9F%A9&quot;&gt;&lt;code&gt;-po ⟨stem⟩&lt;/code&gt;&lt;/a&gt; option overrides the stem used to form the output file paths for the cost-centre profiler (see &lt;a href=&quot;#rts-flag--p&quot;&gt;&lt;code&gt;-p&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#rts-flag--pj&quot;&gt;&lt;code&gt;-pj&lt;/code&gt;&lt;/a&gt; flags above) and heap profiler (see &lt;a href=&quot;runtime_control#rts-flag--h&quot;&gt;&lt;code&gt;-h&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;#rts-flag--po%20%E2%9F%A8stem%E2%9F%A9&quot;&gt; &lt;code&gt;-po ⟨stem⟩&lt;/code&gt; &lt;/a&gt;オプションは、コストセンタプロファイラの出力ファイルパスを形成する（参照するために使用される幹オーバーライド&lt;a href=&quot;#rts-flag--p&quot;&gt; &lt;code&gt;-p&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#rts-flag--pj&quot;&gt; &lt;code&gt;-pj&lt;/code&gt; &lt;/a&gt;フラグ上記）とヒーププロファイラを（参照&lt;a href=&quot;runtime_control#rts-flag--h&quot;&gt; &lt;code&gt;-h&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="b5635087d38bc262bde4371eac4de7d97f976c29" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../base-4.13.0.0/system-io&quot;&gt;System.IO&lt;/a&gt; input functions (e.g. &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt;) don't automatically convert to Unicode, so this function is provided to make the conversion from a multibyte string in the given code page to a proper Unicode string. To get the code page for the console, use &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../base-4.13.0.0/system-io&quot;&gt;System.IOの&lt;/a&gt;入力機能（例えば &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt; ）自動的にUnicodeに変換されませんので、この機能は、適切なUnicode文字列に指定されたコードページでマルチバイト文字列からの変換を行うために提供されます。コンソールのコードページを取得するには、 &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="9765ad4ea03f4950380592b31970ad8c5c5f3ec8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../base-4.13.0.0/system-io&quot;&gt;System.IO&lt;/a&gt; output functions (e.g. &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:putStr&quot;&gt;putStr&lt;/a&gt;&lt;/code&gt;) don't automatically convert to multibyte string on Windows, so this function is provided to make the conversion from a Unicode string in the given code page to a proper multibyte string. To get the code page for the console, use &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../base-4.13.0.0/system-io&quot;&gt;System.IOの&lt;/a&gt;出力機能（例えば &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:putStr&quot;&gt;putStr&lt;/a&gt;&lt;/code&gt; は）自動的にWindows上でマルチバイト文字列に変換していないので、この機能は、適切なマルチバイト文字列に指定されたコードページのUnicode文字列からの変換を行うために提供されます。コンソールのコードページを取得するには、 &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="3ce9122f50ea53be58cbd2cf028ecc8f4c1bc2e6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../base-4.14.1.0/system-io&quot;&gt;System.IO&lt;/a&gt; input functions (e.g. &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt;) don't automatically convert to Unicode, so this function is provided to make the conversion from a multibyte string in the given code page to a proper Unicode string. To get the code page for the console, use &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../base-4.14.1.0/system-io&quot;&gt;System.IOの&lt;/a&gt;入力機能（例えば &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt; ）自動的にUnicodeに変換されませんので、この機能は、適切なUnicode文字列に指定されたコードページでマルチバイト文字列からの変換を行うために提供されます。コンソールのコードページを取得するには、 &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="dcced739f4877615ca0b1d338f8fe3c56b49eea5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../base-4.14.1.0/system-io&quot;&gt;System.IO&lt;/a&gt; output functions (e.g. &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:putStr&quot;&gt;putStr&lt;/a&gt;&lt;/code&gt;) don't automatically convert to multibyte string on Windows, so this function is provided to make the conversion from a Unicode string in the given code page to a proper multibyte string. To get the code page for the console, use &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../base-4.14.1.0/system-io&quot;&gt;System.IOの&lt;/a&gt;出力機能（例えば &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:putStr&quot;&gt;putStr&lt;/a&gt;&lt;/code&gt; は）自動的にWindows上でマルチバイト文字列に変換していないので、この機能は、適切なマルチバイト文字列に指定されたコードページのUnicode文字列からの変換を行うために提供されます。コンソールのコードページを取得するには、 &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="7715095f5c8ef807cdbc23a84037a885e460b586" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../base/system-io&quot;&gt;System.IO&lt;/a&gt; input functions (e.g. &lt;code&gt;&lt;a href=&quot;../base/system-io#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt;) don't automatically convert to Unicode, so this function is provided to make the conversion from a multibyte string in the given code page to a proper Unicode string. To get the code page for the console, use &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../base/system-io&quot;&gt;System.IOの&lt;/a&gt;入力機能（例えば &lt;code&gt;&lt;a href=&quot;../base/system-io#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt; ）自動的にUnicodeに変換されませんので、この機能は、適切なUnicode文字列に指定されたコードページでマルチバイト文字列からの変換を行うために提供されます。コンソールのコードページを取得するには、 &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="cd8e728d7d3436bf9c9bfd3d9742877fbe0b85c6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../base/system-io&quot;&gt;System.IO&lt;/a&gt; output functions (e.g. &lt;code&gt;&lt;a href=&quot;../base/system-io#v:putStr&quot;&gt;putStr&lt;/a&gt;&lt;/code&gt;) don't automatically convert to multibyte string on Windows, so this function is provided to make the conversion from a Unicode string in the given code page to a proper multibyte string. To get the code page for the console, use &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../base/system-io&quot;&gt;System.IOの&lt;/a&gt;出力機能（例えば &lt;code&gt;&lt;a href=&quot;../base/system-io#v:putStr&quot;&gt;putStr&lt;/a&gt;&lt;/code&gt; は）自動的にWindows上でマルチバイト文字列に変換していないので、この機能は、適切なマルチバイト文字列に指定されたコードページのUnicode文字列からの変換を行うために提供されます。コンソールのコードページを取得するには、 &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="b352da45baeb9202cb7df82ff50b474eca2ca6d4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;codegens#llvm-code-gen&quot;&gt;LLVM code generator&lt;/a&gt; can sometimes do a far better job at producing fast code than the &lt;a href=&quot;codegens#native-code-gen&quot;&gt;native code generator&lt;/a&gt;. This is not universal and depends on the code. Numeric heavy code seems to show the best improvement when compiled via LLVM. You can also experiment with passing specific flags to LLVM with the &lt;code&gt;-optlo ⟨option⟩&lt;/code&gt; and &lt;code&gt;-optlc ⟨option⟩&lt;/code&gt; flags. Be careful though as setting these flags stops GHC from setting its usual flags for the LLVM optimiser and compiler.</source>
          <target state="translated">&lt;a href=&quot;codegens#llvm-code-gen&quot;&gt;LLVMのコードジェネレータは&lt;/a&gt;、時々より速いコードを生成するにはるかに良い仕事をすることができます&lt;a href=&quot;codegens#native-code-gen&quot;&gt;ネイティブコードジェネレータ&lt;/a&gt;。これは普遍的ではなく、コードに依存します。LLVMを介してコンパイルすると、数値の重いコードが最も改善されるようです。あなたはまたしてLLVMに特定のフラグを渡すことを試すことができ &lt;code&gt;-optlo ⟨option⟩&lt;/code&gt; と &lt;code&gt;-optlc ⟨option⟩&lt;/code&gt; フラグ。ただし、これらのフラグを設定すると、GHCがLLVMオプティマイザーとコンパイラーに通常のフラグを設定できなくなるので注意してください。</target>
        </trans-unit>
        <trans-unit id="23545e3e460bae073f6181734f7192afe90ccb39" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;exts/template_haskell#th-usage&quot;&gt;Template Haskell staging restrictions&lt;/a&gt; apply to the expression being annotated with, so for example you cannot run a function from the module being compiled.</source>
          <target state="translated">&lt;a href=&quot;exts/template_haskell#th-usage&quot;&gt;テンプレートHaskellのステージング制限は&lt;/a&gt;それほどたとえば、あなたがコンパイルされているモジュールから関数を実行することはできません、と注釈を付けされた式に適用されます。</target>
        </trans-unit>
        <trans-unit id="441b96de5f40c0b544a2b13e929cf0a32ab969bc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;flexible_contexts#extension-FlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt; extension lifts the Haskell 98 restriction that the type-class constraints in a type signature must have the form &lt;em&gt;(class type-variable)&lt;/em&gt; or &lt;em&gt;(class (type-variable type1 type2 ... typen))&lt;/em&gt;. With &lt;a href=&quot;flexible_contexts#extension-FlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt; these type signatures are perfectly okay</source>
          <target state="translated">&lt;a href=&quot;flexible_contexts#extension-FlexibleContexts&quot;&gt; &lt;code&gt;FlexibleContexts&lt;/code&gt; の&lt;/a&gt;拡張は、型シグネチャにおける型クラス制約が形状を有していなければならないことのHaskell 98制限リフト&lt;em&gt;（クラス型変数）&lt;/em&gt;または&lt;em&gt;（クラス（タイプ変数をTYPE1 TYPE2 ... typen）） &lt;/em&gt;。&lt;a href=&quot;flexible_contexts#extension-FlexibleContexts&quot;&gt; &lt;code&gt;FlexibleContexts&lt;/code&gt; &lt;/a&gt;これらの型シグネチャは完全に大丈夫です</target>
        </trans-unit>
        <trans-unit id="4a4611a6bd66536dd5d384f455f6f4187e13b84f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;flexible_contexts#extension-FlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt; extension relaxes this rule, as well as relaxing the corresponding rule for type signatures (see &lt;a href=&quot;flexible_contexts_signature#flexible-contexts&quot;&gt;The context of a type signature&lt;/a&gt;). Specifically, &lt;a href=&quot;flexible_contexts#extension-FlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt;, allows (well-kinded) class constraints of form &lt;code&gt;(C t1 ... tn)&lt;/code&gt; in the context of an instance declaration.</source>
          <target state="translated">&lt;a href=&quot;flexible_contexts#extension-FlexibleContexts&quot;&gt; &lt;code&gt;FlexibleContexts&lt;/code&gt; の&lt;/a&gt;拡張は、（参照型署名に対応するルールを緩和、ならびに、このルールを緩和&lt;a href=&quot;flexible_contexts_signature#flexible-contexts&quot;&gt;型シグネチャのコンテキスト&lt;/a&gt;）。具体的には、&lt;a href=&quot;flexible_contexts#extension-FlexibleContexts&quot;&gt; &lt;code&gt;FlexibleContexts&lt;/code&gt; &lt;/a&gt;は、インスタンス宣言のコンテキストでフォーム &lt;code&gt;(C t1 ... tn)&lt;/code&gt; 適切な）クラス制約を許可します。</target>
        </trans-unit>
        <trans-unit id="25f2f2f377d7a4d9d4c30076fac395670f976ba5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;ghc-err&quot;&gt;GHC.Err&lt;/a&gt; module defines the code for the wired-in error functions, which have a special type in the compiler (with &quot;open tyvars&quot;).</source>
          <target state="translated">&lt;a href=&quot;ghc-err&quot;&gt;GHC.Errの&lt;/a&gt;モジュールは有線で誤差関数（「オープンtyvars」で）コンパイラに特殊なタイプを有するためのコードを定義します。</target>
        </trans-unit>
        <trans-unit id="be2bac9dc3e1c4a106dab0bef04844b8cf103571" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glasgow_exts#th-usage&quot;&gt;Template Haskell staging restrictions&lt;/a&gt; apply to the expression being annotated with, so for example you cannot run a function from the module being compiled.</source>
          <target state="translated">&lt;a href=&quot;glasgow_exts#th-usage&quot;&gt;テンプレートHaskellのステージング制限は&lt;/a&gt;それほどたとえば、あなたがコンパイルされているモジュールから関数を実行することはできません、と注釈を付けされた式に適用されます。</target>
        </trans-unit>
        <trans-unit id="7bcd2aebd16cff6eded9cdf9d7624bc94b45657f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.haskell.org/haskellwiki/Template_Haskell&quot;&gt;Template Haskell&lt;/a&gt; page on the GHC Wiki has a wealth of information. You may also consult the Haddock reference documentation &amp;lt;Language.Haskell.TH.&amp;gt;. Many changes to the original design are described in &lt;a href=&quot;https://www.haskell.org/ghc/docs/papers/th2.ps&quot;&gt;Notes on Template Haskell version 2&lt;/a&gt;. Not all of these changes are in GHC, however.</source>
          <target state="translated">GHC Wiki の&lt;a href=&quot;http://www.haskell.org/haskellwiki/Template_Haskell&quot;&gt;テンプレートHaskell&lt;/a&gt;ページには、豊富な情報があります。Haddockリファレンスドキュメント&amp;lt;Language.Haskell.TH。&amp;gt;を参照することもできます。元のデザインに対する多くの変更点は、&lt;a href=&quot;https://www.haskell.org/ghc/docs/papers/th2.ps&quot;&gt;テンプレートHaskellバージョン2に関する注記に&lt;/a&gt;記載されています。ただし、これらの変更のすべてがGHCにあるわけではありません。</target>
        </trans-unit>
        <trans-unit id="813ef8b7c698943925b858288d022656cbf4c0e7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-compact-0.1.0.0/GHC-Compact.html&quot;&gt;GHC.Compact&lt;/a&gt; module provides a way to make garbage collection more efficient for long-lived data structures. Compacting a data structure collects the objects together in memory, where they are treated as a single object by the garbage collector and not traversed individually.</source>
          <target state="translated">&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-compact-0.1.0.0/GHC-Compact.html&quot;&gt;GHC.Compactの&lt;/a&gt;モジュールは、長寿命のデータ構造のためのガベージコレクションをより効率的にする方法を提供します。データ構造を圧縮すると、オブジェクトがメモリにまとめられ、ガベージコレクタによって単一のオブジェクトとして扱われ、個別にトラバースされることはありません。</target>
        </trans-unit>
        <trans-unit id="b007f5500c0bf2359ef4d7c48a45339585e270b2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-compact-0.1.0.0/GHC-Compact.html&quot;&gt;GHC.Compact&lt;/a&gt; module provides a way to make garbage collection more efficient for long-lived data structures. Compacting a data structure collects the objects together in memory, where they are treated as a single object by the garbage collector and not traversed individually.</source>
          <target state="translated">&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-compact-0.1.0.0/GHC-Compact.html&quot;&gt;GHC.Compactの&lt;/a&gt;モジュールは、長寿命のデータ構造のためのガベージコレクションをより効率的にする方法を提供します。データ構造を圧縮すると、オブジェクトがメモリにまとめられ、ガベージコレクターによって単一のオブジェクトとして扱われ、個別にトラバースされることはありません。</target>
        </trans-unit>
        <trans-unit id="846fd4cdbb42806031c1db4eb657c7e293898b2c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/ghc-compact-0.1.0.0/GHC-Compact.html&quot;&gt;GHC.Compact&lt;/a&gt; module provides a way to make garbage collection more efficient for long-lived data structures. Compacting a data structure collects the objects together in memory, where they are treated as a single object by the garbage collector and not traversed individually.</source>
          <target state="translated">&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/ghc-compact-0.1.0.0/GHC-Compact.html&quot;&gt;GHC.Compactの&lt;/a&gt;モジュールは、長寿命のデータ構造のためのガベージコレクションをより効率的にする方法を提供します。データ構造を圧縮すると、オブジェクトがメモリにまとめられ、ガベージコレクタによって単一のオブジェクトとして扱われ、個別にトラバースされることはありません。</target>
        </trans-unit>
        <trans-unit id="7f5f20ac4d1c46620e544e0b73094893e035e0db" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hackage.haskell.org/package/fmlist&quot;&gt;&lt;code&gt;fmlist&lt;/code&gt;&lt;/a&gt; package takes this approach, by representing a list via its &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldMap&quot;&gt;foldMap&lt;/a&gt;&lt;/code&gt; action.</source>
          <target state="translated">&lt;a href=&quot;https://hackage.haskell.org/package/fmlist&quot;&gt; &lt;code&gt;fmlist&lt;/code&gt; &lt;/a&gt;パッケージには、その経由リストを表すことによって、このアプローチを取る &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldMap&quot;&gt;foldMap&lt;/a&gt;&lt;/code&gt; のアクション。</target>
        </trans-unit>
        <trans-unit id="419b4e0aea1efdbf0b01d8b1d21faeb75cc776ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hackage.haskell.org/package/foldl&quot;&gt;&lt;code&gt;foldl&lt;/code&gt;&lt;/a&gt; package implements a robust general framework for dealing with this situation. If you choose to to do it yourself, with a bit of care, the simplest cases are not difficult to handle directly. You just need to accumulate the individual aggregates as &lt;strong&gt;strict&lt;/strong&gt; components of a single data type, and then apply a final transformation to it to extract the composite result. For example, computing an average requires computing both the &lt;code&gt;&lt;a href=&quot;data-foldable#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;data-foldable#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; of a (non-empty) structure and dividing the sum by the length:</source>
          <target state="translated">&lt;a href=&quot;https://hackage.haskell.org/package/foldl&quot;&gt; &lt;code&gt;foldl&lt;/code&gt; の&lt;/a&gt;パッケージには、このような状況に対処するための堅牢な一般的なフレームワークを実装します。少し注意して自分で行うことを選択した場合、最も単純なケースを直接処理することは難しくありません。個々の集計を単一のデータ型の&lt;strong&gt;厳密な&lt;/strong&gt;コンポーネントとして累積し、それに最終的な変換を適用して複合結果を抽出する必要があります。たとえば、平均を計算するには、（空でない）構造の &lt;code&gt;&lt;a href=&quot;data-foldable#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-foldable#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; 両方を計算し、合計を長さで割る必要があります。</target>
        </trans-unit>
        <trans-unit id="b627e268f4e5e65bb4d343165c72971cc53747cf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.haskell.org/haskellwiki/Template_Haskell&quot;&gt;Template Haskell&lt;/a&gt; page on the GHC Wiki has a wealth of information. You may also consult the Haddock reference documentation &lt;a href=&quot;../../libraries/template-haskell-2.17.0.0/language-haskell-th&quot;&gt;Language.Haskell.TH&lt;/a&gt;. Many changes to the original design are described in &lt;a href=&quot;https://www.haskell.org/ghc/docs/papers/th2.ps&quot;&gt;Notes on Template Haskell version 2&lt;/a&gt;. Not all of these changes are in GHC, however.</source>
          <target state="translated">&lt;a href=&quot;https://www.haskell.org/haskellwiki/Template_Haskell&quot;&gt;GHCWiki&lt;/a&gt;のTemplateHaskellページには豊富な情報があります。Haddockのリファレンスドキュメント&lt;a href=&quot;../../libraries/template-haskell-2.17.0.0/language-haskell-th&quot;&gt;Language.Haskell.THを&lt;/a&gt;参照することもできます。元のデザインに対する多くの変更は、&lt;a href=&quot;https://www.haskell.org/ghc/docs/papers/th2.ps&quot;&gt;テンプレートHaskellバージョン2に関する注記に&lt;/a&gt;記載されています。ただし、これらの変更のすべてがGHCにあるわけではありません。</target>
        </trans-unit>
        <trans-unit id="070dd57b8d8cd78717786ee303fe48951109a4cd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;phases#ghc-flag--fPIC&quot;&gt;&lt;code&gt;-fPIC&lt;/code&gt;&lt;/a&gt; flag is required for all code that will end up in a shared library. The &lt;a href=&quot;phases#ghc-flag--shared&quot;&gt;&lt;code&gt;-shared&lt;/code&gt;&lt;/a&gt; flag specifies to make a shared library rather than a program. To make this clearer we can break this down into separate compilation and link steps:</source>
          <target state="translated">&lt;a href=&quot;phases#ghc-flag--fPIC&quot;&gt; &lt;code&gt;-fPIC&lt;/code&gt; &lt;/a&gt;フラグは、共有ライブラリになってしまいますすべてのコードのために必要とされます。&lt;a href=&quot;phases#ghc-flag--shared&quot;&gt; &lt;code&gt;-shared&lt;/code&gt; &lt;/a&gt;フラグ指定は共有ライブラリではなく、プログラムを作成します。これを明確にするために、これを個別のコンパイルとリンクのステップに分解できます。</target>
        </trans-unit>
        <trans-unit id="92ecf85c887a15b246620bb154b24adf3249c4f6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;rewrite_rules#pragma-RULES&quot;&gt;&lt;code&gt;RULES&lt;/code&gt;&lt;/a&gt; pragma lets you specify rewrite rules. It is described in &lt;a href=&quot;rewrite_rules#rewrite-rules&quot;&gt;Rewrite rules&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;rewrite_rules#pragma-RULES&quot;&gt; &lt;code&gt;RULES&lt;/code&gt; &lt;/a&gt;プラグマを使用すると、書き換え規則を指定することができます。これについては、&lt;a href=&quot;rewrite_rules#rewrite-rules&quot;&gt;書き換えルールで&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="096f364a4638bd5a30481fff7cf63dd60a75f2bb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;system-io&quot;&gt;System.IO&lt;/a&gt; library manages multiplexing in its own way. On Windows systems it uses &lt;code&gt;safe&lt;/code&gt; foreign calls to ensure that threads doing I/O operations don't block the whole runtime, whereas on Unix systems all the currently blocked I/O requests are managed by a single thread (the &lt;em&gt;IO manager thread&lt;/em&gt;) using a mechanism such as &lt;code&gt;epoll&lt;/code&gt; or &lt;code&gt;kqueue&lt;/code&gt;, depending on what is provided by the host operating system.</source>
          <target state="translated">&lt;a href=&quot;system-io&quot;&gt;System.IOの&lt;/a&gt;ライブラリには、独自の方法で多重管理しています。 Windowsシステムでは、 &lt;code&gt;safe&lt;/code&gt; 外部呼び出しを使用して、I / O操作を実行するスレッドがランタイム全体をブロックしないようにします。一方、Unixシステムでは、現在ブロックされているすべてのI / O要求が単一のスレッド（&lt;em&gt;IOマネージャースレッド&lt;/em&gt;）によって管理され&lt;em&gt;ます。&lt;/em&gt;ホストオペレーティングシステムが提供するものに応じて、 &lt;code&gt;epoll&lt;/code&gt; や &lt;code&gt;kqueue&lt;/code&gt; などのメカニズム。</target>
        </trans-unit>
        <trans-unit id="ad73609e01e96153a93cfebddc86a915d6769a77" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;text-read&quot;&gt;Text.Read&lt;/a&gt; library is the canonical library to import for &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt;-class facilities. For GHC only, it offers an extended and much improved &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; class, which constitutes a proposed alternative to the Haskell 2010 &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt;. In particular, writing parsers is easier, and the parsers are much more efficient.</source>
          <target state="translated">&lt;a href=&quot;text-read&quot;&gt;Text.Readの&lt;/a&gt;ライブラリは、のためにインポートする標準的なライブラリです &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; 級の施設。GHCの場合のみ、拡張および大幅に改善された &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; クラスを提供します。これは、Haskell 2010 &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; の代替案として構成されています。特に、パーサーの作成が簡単になり、パーサーの効率が大幅に向上します。</target>
        </trans-unit>
        <trans-unit id="6049bb328d08178d103c9076445b562b087834cb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;using-optimisation#ghc-flag--fno-state-hack&quot;&gt;&lt;code&gt;state hack&lt;/code&gt;&lt;/a&gt; optimization can result in non-obvious changes in evaluation ordering which may hide exceptions, even with &lt;a href=&quot;using-optimisation#ghc-flag--fpedantic-bottoms&quot;&gt;&lt;code&gt;-fpedantic-bottoms&lt;/code&gt;&lt;/a&gt; (see, e.g., &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/7411&quot;&gt;#7411&lt;/a&gt;). For instance,</source>
          <target state="translated">&lt;a href=&quot;using-optimisation#ghc-flag--fno-state-hack&quot;&gt; &lt;code&gt;state hack&lt;/code&gt; &lt;/a&gt;最適化がさえて、例外を隠すことが評価の順序で非自明の変化をもたらすことが&lt;a href=&quot;using-optimisation#ghc-flag--fpedantic-bottoms&quot;&gt; &lt;code&gt;-fpedantic-bottoms&lt;/code&gt; &lt;/a&gt;（例えば参照、&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/7411&quot;&gt;＃7411&lt;/a&gt;）。例えば、</target>
        </trans-unit>
        <trans-unit id="f6bc8b6c64115e4a7c4698a00f5d0d1bc2ad89f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; operator adds the bound function into the continuation chain.</source>
          <target state="translated">&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 演算子は継続チェーンにバインドされた機能が追加されます。</target>
        </trans-unit>
        <trans-unit id="5c388ccd0a655842d446db681e2ea71ce5783acf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'MetaSel&lt;/code&gt; type is also an instance of the type class &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Selector&quot;&gt;Selector&lt;/a&gt;&lt;/code&gt;, which can be used to obtain information about the field at the value level.</source>
          <target state="translated">&lt;code&gt;'MetaSel&lt;/code&gt; タイプは、タイプクラスのインスタンスである &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Selector&quot;&gt;Selector&lt;/a&gt;&lt;/code&gt; 値レベルのフィールドに関する情報を取得するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="d0fc85998eb7929a8a09016834cb15b185c38b52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(!)&lt;/code&gt; operator, when written in prefix form (preceded by whitespace and not followed by whitespace, as in &lt;code&gt;f !x = ...&lt;/code&gt;), is interpreted as a bang pattern, contrary to the Haskell Report, which prescribes to treat &lt;code&gt;!&lt;/code&gt; as an operator regardless of surrounding whitespace. Note that this does not imply that GHC always enables &lt;a href=&quot;exts/strict#extension-BangPatterns&quot;&gt;&lt;code&gt;BangPatterns&lt;/code&gt;&lt;/a&gt;. Without the extension, GHC will issue a parse error on &lt;code&gt;f !x&lt;/code&gt;, asking to enable the extension.</source>
          <target state="translated">&lt;code&gt;(!)&lt;/code&gt; 接頭辞形式で記述演算子、（同様に空白が先行し、空白が続かない、 &lt;code&gt;f !x = ...&lt;/code&gt; ）、治療するためにその規定、Haskellの報告に反して、バングパターンとして解釈されます &lt;code&gt;!&lt;/code&gt; 周囲の空白に関係なく、演算子として。これは、GHCが常に&lt;a href=&quot;exts/strict#extension-BangPatterns&quot;&gt; &lt;code&gt;BangPatterns&lt;/code&gt; を&lt;/a&gt;有効にすることを意味するものではないことに注意してください。拡張機能がないと、GHCは &lt;code&gt;f !x&lt;/code&gt; で解析エラーを発行し、拡張機能を有効にするように求めます。</target>
        </trans-unit>
        <trans-unit id="866373df1d7e4a2d96c88db426b8a4e214a580f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(C t1..tj)&lt;/code&gt; is a partial applications of the class &lt;code&gt;C&lt;/code&gt;, where the arity of &lt;code&gt;C&lt;/code&gt; is exactly &lt;code&gt;j+1&lt;/code&gt;. That is, &lt;code&gt;C&lt;/code&gt; lacks exactly one type argument.</source>
          <target state="translated">&lt;code&gt;(C t1..tj)&lt;/code&gt; 、クラスの一部であるアプリケーション &lt;code&gt;C&lt;/code&gt; のアリティ、 &lt;code&gt;C&lt;/code&gt; が正確である &lt;code&gt;j+1&lt;/code&gt; 。つまり、 &lt;code&gt;C&lt;/code&gt; には型引数が1つしかありません。</target>
        </trans-unit>
        <trans-unit id="0e53d457109427ef5ddcdce2f9d16292b3ffd5e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;/code&gt;-form is only available for modules which are interpreted; for compiled modules (including modules from packages) only the non-&lt;code&gt;*&lt;/code&gt; form of &lt;a href=&quot;#ghci-cmd-:browse&quot;&gt;&lt;code&gt;:browse&lt;/code&gt;&lt;/a&gt; is available.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; -体は、解釈されたモジュールに対してのみ利用可能です。コンパイルされたモジュール（パッケージからのモジュールを含む）では、 &lt;code&gt;*&lt;/code&gt; 以外の形式の&lt;a href=&quot;#ghci-cmd-:browse&quot;&gt; &lt;code&gt;:browse&lt;/code&gt; &lt;/a&gt;のみを使用できます。</target>
        </trans-unit>
        <trans-unit id="b53e971ecc81a3e0c6bf1b64d28ddf52cdda1a1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-#include&lt;/code&gt; option is now deprecated, and the &lt;code&gt;include-files&lt;/code&gt; field in a Cabal package specification is ignored.</source>
          <target state="translated">&lt;code&gt;-#include&lt;/code&gt; オプションが廃止され、 &lt;code&gt;include-files&lt;/code&gt; カバルパッケージ仕様でのフィールドは無視されます。</target>
        </trans-unit>
        <trans-unit id="ab34545a3d0cf93b61e2311037778df3c80a23fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--numa&lt;/code&gt; flag is typically beneficial when a program is using all cores of a large multi-core NUMA system, with a large allocation area (&lt;code&gt;-A&lt;/code&gt;). All memory accesses to the allocation area will go to local memory, which can save a significant amount of remote memory access. A runtime speedup on the order of 10% is typical, but can vary a lot depending on the hardware and the memory behaviour of the program.</source>
          <target state="translated">&lt;code&gt;--numa&lt;/code&gt; のプログラムが大割当領域（と、大きなマルチコアNUMAシステムのすべてのコアを使用している場合、フラグは、典型的には有益である &lt;code&gt;-A&lt;/code&gt; ）。割り当て領域へのすべてのメモリアクセスはローカルメモリに移動するため、リモートメモリアクセスを大幅に節約できます。10％程度の実行時間の高速化は一般的ですが、ハードウェアとプログラムのメモリの動作によって大きく異なります。</target>
        </trans-unit>
        <trans-unit id="561f71da812b2bddee25afb3e6e2e25bcb2e2f87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--numa&lt;/code&gt; option tells the RTS to tune its memory usage to maximize local memory accesses. In particular, the RTS will:</source>
          <target state="translated">&lt;code&gt;--numa&lt;/code&gt; のオプションは、ローカル・メモリ・アクセスを最大化するためのチューニングそのメモリ使用量にRTSを伝えます。特に、RTSは次のことを行います。</target>
        </trans-unit>
        <trans-unit id="82790760e32203fbe3b3708f08a40fb1f26d4abb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-O*&lt;/code&gt; options specify convenient &amp;ldquo;packages&amp;rdquo; of optimisation flags; the &lt;code&gt;-f*&lt;/code&gt; options described later on specify &lt;em&gt;individual&lt;/em&gt; optimisations to be turned on/off; the &lt;code&gt;-m*&lt;/code&gt; options specify &lt;em&gt;machine-specific&lt;/em&gt; optimisations to be turned on/off.</source>
          <target state="translated">&lt;code&gt;-O*&lt;/code&gt; オプションが便利な最適化フラグの「詰め合わせ」を指定します。後で説明する &lt;code&gt;-f*&lt;/code&gt; オプションは、オン/オフする&lt;em&gt;個々の&lt;/em&gt;最適化を指定します。 &lt;code&gt;-m*&lt;/code&gt; オプションは、指定した&lt;em&gt;マシン固有の&lt;/em&gt;オン/オフするための最適化を。</target>
        </trans-unit>
        <trans-unit id="00acee18a5b40f8ae0cd328101fb51b5648ea410" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-S&lt;/code&gt; flag, as well as giving the same output as the &lt;code&gt;-s&lt;/code&gt; flag, prints information about each GC as it happens:</source>
          <target state="translated">&lt;code&gt;-S&lt;/code&gt; フラグ、ならびに同じ出力を与える &lt;code&gt;-s&lt;/code&gt; それが起こるようにフラグは、各GCに関する情報を出力します。</target>
        </trans-unit>
        <trans-unit id="5abe89944b59b5975a75aacf7b4842e37070b39c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-XMonadFailDesugaring&lt;/code&gt; extension switches the desugaring of &lt;code&gt;do&lt;/code&gt;-blocks to use &lt;code&gt;MonadFail.fail&lt;/code&gt; instead of &lt;code&gt;Monad.fail&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-XMonadFailDesugaring&lt;/code&gt; 延長はの脱糖スイッチ &lt;code&gt;do&lt;/code&gt; 使用する-blocks &lt;code&gt;MonadFail.fail&lt;/code&gt; の代わり &lt;code&gt;Monad.fail&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="97d0f469a862a380331313f906971c001e89be36" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-fno-gen-manifest&lt;/code&gt; disables generation of the manifest file. One reason to do this would be if you had a manifest file of your own, for example.</source>
          <target state="translated">&lt;code&gt;-fno-gen-manifest&lt;/code&gt; マニフェストファイルの無効世代。これを行う1つの理由は、たとえば、独自のマニフェストファイルがある場合です。</target>
        </trans-unit>
        <trans-unit id="f09316b31fc22fa8a933567bd8337abedb8c8a8c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-hiesuf&lt;/code&gt; ⟨suffix⟩ will change the &lt;code&gt;.hie&lt;/code&gt; file suffix for extended interface files to whatever you specify.</source>
          <target state="translated">&lt;code&gt;-hiesuf&lt;/code&gt; ⟨suffix⟩が変更されます &lt;code&gt;.hie&lt;/code&gt; の指定したものは何でもするように拡張インターフェースファイルのファイル接尾辞を。</target>
        </trans-unit>
        <trans-unit id="181c112c9b1448494d00b3a0eb2345692c427713" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-hisuf&lt;/code&gt;/&lt;code&gt;-osuf&lt;/code&gt; game is particularly useful if you want to compile a program both with and without profiling, in the same directory. You can say:</source>
          <target state="translated">&lt;code&gt;-hisuf&lt;/code&gt; / &lt;code&gt;-osuf&lt;/code&gt; あなたと同じディレクトリに、プロファイリングせずに両方のプログラムをコンパイルしたい場合はゲームは特に便利です。あなたは言うことができます：</target>
        </trans-unit>
        <trans-unit id="9cfd0028b8c4e48cc0b0a43a4c0d4e8fc3d08a43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-no-hs-main&lt;/code&gt; flag can also be used to persuade the compiler to do the link step in &lt;a href=&quot;using#ghc-flag---make&quot;&gt;&lt;code&gt;--make&lt;/code&gt;&lt;/a&gt; mode when there is no Haskell &lt;code&gt;Main&lt;/code&gt; module present (normally the compiler will not attempt linking when there is no &lt;code&gt;Main&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;-no-hs-main&lt;/code&gt; フラグも、リンクステップを行うには、コンパイラを説得するために使用することができ&lt;a href=&quot;using#ghc-flag---make&quot;&gt; &lt;code&gt;--make&lt;/code&gt; &lt;/a&gt;何ハスケルがないときモード &lt;code&gt;Main&lt;/code&gt; モジュールの存在は（何も存在しない場合に、通常はコンパイラがリンクをしようとしません &lt;code&gt;Main&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="cfb7b69d0673862e9ddfa0a4b5f54819de95e5d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-osuf&lt;/code&gt; ⟨suffix⟩ will change the &lt;code&gt;.o&lt;/code&gt; file suffix for object files to whatever you specify. We use this when compiling libraries, so that objects for the profiling versions of the libraries don&amp;rsquo;t clobber the normal ones.</source>
          <target state="translated">&lt;code&gt;-osuf&lt;/code&gt; ⟨suffix⟩が変更されます &lt;code&gt;.o&lt;/code&gt; の指定したものは何でもオブジェクトファイルのファイル拡張子を。ライブラリのコンパイル時にこれを使用して、ライブラリのプロファイリングバージョンのオブジェクトが通常のものを壊さないようにします。</target>
        </trans-unit>
        <trans-unit id="cf7cc663be7922fef0739796260273d9b72b496e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-outputdir&lt;/code&gt; option is shorthand for the combination of &lt;a href=&quot;#ghc-flag--odir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt;&lt;code&gt;-odir ⟨dir⟩&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghc-flag--hidir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt;&lt;code&gt;-hidir ⟨dir⟩&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghc-flag--hiedir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt;&lt;code&gt;-hiedir ⟨dir⟩&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghc-flag--stubdir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt;&lt;code&gt;-stubdir ⟨dir⟩&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ghc-flag--dumpdir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt;&lt;code&gt;-dumpdir ⟨dir⟩&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;-outputdir&lt;/code&gt; オプションは組み合わせの省略形です&lt;a href=&quot;#ghc-flag--odir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt; &lt;code&gt;-odir ⟨dir⟩&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ghc-flag--hidir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt; &lt;code&gt;-hidir ⟨dir⟩&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ghc-flag--hiedir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt; &lt;code&gt;-hiedir ⟨dir⟩&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ghc-flag--stubdir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt; &lt;code&gt;-stubdir ⟨dir⟩&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#ghc-flag--dumpdir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt; &lt;code&gt;-dumpdir ⟨dir⟩&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="58fc191cffb134d6d4bcb21e65f27ae26e638ff7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-outputdir&lt;/code&gt; option is shorthand for the combination of &lt;a href=&quot;#ghc-flag--odir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt;&lt;code&gt;-odir ⟨dir⟩&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghc-flag--hidir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt;&lt;code&gt;-hidir ⟨dir⟩&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghc-flag--stubdir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt;&lt;code&gt;-stubdir
⟨dir⟩&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ghc-flag--dumpdir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt;&lt;code&gt;-dumpdir ⟨dir⟩&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;-outputdir&lt;/code&gt; オプションは組み合わせの省略形です&lt;a href=&quot;#ghc-flag--odir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt; &lt;code&gt;-odir ⟨dir⟩&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ghc-flag--hidir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt; &lt;code&gt;-hidir ⟨dir⟩&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ghc-flag--stubdir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt; &lt;code&gt;-stubdir ⟨dir⟩&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#ghc-flag--dumpdir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt; &lt;code&gt;-dumpdir ⟨dir⟩&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9ae93959276ca239dd5463c43ee8f6f822a7abcd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-package ⟨pkg⟩&lt;/code&gt; option also causes package ⟨pkg⟩ to be linked into the resulting executable or shared object. Whether a packages&amp;rsquo; library is linked statically or dynamically is controlled by the flag pair &lt;a href=&quot;phases#ghc-flag--static&quot;&gt;&lt;code&gt;-static&lt;/code&gt;&lt;/a&gt;/ &lt;a href=&quot;phases#ghc-flag--dynamic&quot;&gt;&lt;code&gt;-dynamic&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;-package ⟨pkg⟩&lt;/code&gt; オプションは、パッケージ⟨pkg⟩が得られた実行可能ファイルまたは共有オブジェクトにリンクさせます。パッケージのライブラリが静的にリンクされるか動的にリンクされるかは、フラグのペア&lt;a href=&quot;phases#ghc-flag--static&quot;&gt; &lt;code&gt;-static&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;phases#ghc-flag--dynamic&quot;&gt; &lt;code&gt;-dynamic&lt;/code&gt; &lt;/a&gt;によって制御されます。</target>
        </trans-unit>
        <trans-unit id="712c183f0262639bdefc67f670ef5786d9f9839d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-qn&lt;/code&gt; flag may be useful when running with a large &lt;code&gt;-A&lt;/code&gt; value (so that GC is infrequent), and a large &lt;code&gt;-N&lt;/code&gt; value (so as to make use of hyperthreaded cores, for example). For example, on a 24-core machine with 2 hyperthreads per core, we might use &lt;code&gt;-N48 -qn24 -A128m&lt;/code&gt; to specify that the mutator should use hyperthreads but the GC should only use real cores. Note that this configuration would use 6GB for the allocation area.</source>
          <target state="translated">&lt;code&gt;-qn&lt;/code&gt; フラグが大で実行する場合に有用であり得る &lt;code&gt;-A&lt;/code&gt; の値（GCが稀であるように）、そして大 &lt;code&gt;-N&lt;/code&gt; する（例えばハイパースレッドコアの使用を作るように）値。たとえば、コアごとに2つのハイパースレッドを持つ24 &lt;code&gt;-N48 -qn24 -A128m&lt;/code&gt; は、-N48 -qn24 -A128mを使用して、ミューテーターがハイパースレッドを使用し、GCが実際のコアのみを使用するように指定できます。この構成では、割り当て領域に6GBが使用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b8f8cb8014da701a79e6b46cb3e225b86d226612" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;..&lt;/code&gt; is meant literally &amp;ndash; you should write two dots in your file. Note that the &lt;code&gt;where&lt;/code&gt; clause is still necessary to distinguish closed families from open ones. If you give any equations of a closed family, you must give all of them, in the same order as they appear in the accompanying Haskell file.</source>
          <target state="translated">&lt;code&gt;..&lt;/code&gt; .文字通り意味している-あなたはあなたのファイルに2個のドットを書き込む必要があります。 &lt;code&gt;where&lt;/code&gt; 句は、閉じたファミリと開いたファミリを区別するために依然として必要であることに注意してください。クローズドファミリーの方程式を与える場合は、付属のHaskellファイルに表示されるのと同じ順序で、それらすべてを与える必要があります。</target>
        </trans-unit>
        <trans-unit id="83164f5917a7372adba9f0624f17681c738f05e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;..&lt;/code&gt; is meant literally &amp;ndash; you should write two dots in your file. The &lt;code&gt;where&lt;/code&gt; clause distinguishes closed families from open ones.</source>
          <target state="translated">&lt;code&gt;..&lt;/code&gt; .文字通り意味している-あなたはあなたのファイルに2個のドットを書き込む必要があります。 &lt;code&gt;where&lt;/code&gt; 句の区別が開いているものから家族を閉じました。</target>
        </trans-unit>
        <trans-unit id="dcb0143d4440c731a3c677d373f63d932883b86d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.hp&lt;/code&gt; file is generated incrementally as your program runs. In principle, running &lt;strong&gt;hp2ps&lt;/strong&gt; on the incomplete file should produce a snapshot of your program&amp;rsquo;s heap usage. However, the last sample in the file may be incomplete, causing &lt;strong&gt;hp2ps&lt;/strong&gt; to fail. If you are using a machine with UNIX utilities installed, it&amp;rsquo;s not too hard to work around this problem (though the resulting command line looks rather Byzantine):</source>
          <target state="translated">&lt;code&gt;.hp&lt;/code&gt; ファイルはプログラムの実行としてインクリメンタルに生成されます。原則として、不完全なファイル&lt;strong&gt;に対してhp2ps&lt;/strong&gt;を実行すると、プログラムのヒープ使用量のスナップショットが生成されます。ただし、ファイルの最後のサンプルが不完全で、&lt;strong&gt;hp2ps&lt;/strong&gt;が失敗する可能性があります。UNIXユーティリティがインストールされたマシンを使用している場合、この問題を回避するのはそれほど難しくありません（結果のコマンドラインはビザンチンに見えますが）。</target>
        </trans-unit>
        <trans-unit id="cc7ae67c0b8544a12cdcfe050a8d2d65b4d2d666" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:loc-at&lt;/code&gt; command requires &lt;a href=&quot;#ghci-cmd-:set%20+c&quot;&gt;&lt;code&gt;:set +c&lt;/code&gt;&lt;/a&gt; to be set.</source>
          <target state="translated">&lt;code&gt;:loc-at&lt;/code&gt; コマンドが必要です&lt;a href=&quot;#ghci-cmd-:set%20+c&quot;&gt; &lt;code&gt;:set +c&lt;/code&gt; &lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="868acbe7a67a816021798517632096beabaa53fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; methods &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:-42--62-&quot;&gt;*&amp;gt;&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:-60--42-&quot;&gt;&amp;lt;*&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; のメソッド &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:-42--62-&quot;&gt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:-60--42-&quot;&gt;&amp;lt;*&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="245cbed390fbb3e5caa7e31d436f7995b13c904c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; 戦術の &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; インスタンスは、有効であるため含まれています。ただし、多くの場合非効率であり、通常は回避する必要があります。 &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; 戦術のインスタンスは、大きな効率の問題を引き起こすべきではありません。</target>
        </trans-unit>
        <trans-unit id="642ea10a7ef999e759dd2a8003076f1bb542bca1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; 戦術の &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; インスタンスは、有効であるため含まれています。ただし、多くの場合非効率であり、通常は回避する必要があります。 &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; 戦術のインスタンスは、大きな効率の問題を引き起こすべきではありません。</target>
        </trans-unit>
        <trans-unit id="a07f81de1f86161a74a26e3f56178d074bbb9cb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; 戦術の &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; インスタンスは、有効であるため含まれています。ただし、多くの場合非効率であり、通常は回避する必要があります。 &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; 戦術のインスタンスは、大きな効率の問題を引き起こすべきではありません。</target>
        </trans-unit>
        <trans-unit id="2d902fab64461e51ee2d74548c6c487fbabdaebf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; 戦術の &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; インスタンスは、有効であるため含まれています。ただし、多くの場合非効率であり、通常は回避する必要があります。 &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; 戦術のインスタンスは、大きな効率の問題を引き起こすべきではありません。</target>
        </trans-unit>
        <trans-unit id="3c17f4dbd13e6f82990bc913e1553422faf7c0d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function ignores the environment, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; passes the inherited environment to both subcomputations.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; ながら機能は、環境を無視 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; の両方subcomputationsに継承された環境を渡します。</target>
        </trans-unit>
        <trans-unit id="51a96013d171e823610e883b0dcca6ee8756149e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function leaves the state unchanged, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; uses the final state of the first computation as the initial state of the second.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; ながら機能は、変わらない状態を残す &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 第二の初期状態として、第1の演算の最終状態を使用します。</target>
        </trans-unit>
        <trans-unit id="d443b950974bb112ab951f3d2eeff5624ca7c870" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function produces the output &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt;, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; combines the outputs of the subcomputations using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 機能は、出力生成 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; をしながら、 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 使用subcomputationsの出力組み合わせ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="a5978bf75b4f58ddc37c3dcfcb955a35e4410f24" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function produces the output &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt;, while &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; combines the outputs of the subcomputations using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 機能は、出力生成 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; をしながら、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; 使用subcomputationsの出力組み合わせ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="eefac33165054643d0f820e7473410a1e3ca417e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function returns a normal value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; exits on the first exception. For a variant that continues after an error and collects all the errors, see &lt;code&gt;&lt;a href=&quot;../transformers-0.5.6.2/control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 機能は、一方、正常値を返し &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 最初の例外に出ます。エラーの後に続けて、すべてのエラーを収集バリアントについては、 &lt;code&gt;&lt;a href=&quot;../transformers-0.5.6.2/control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="197b7d8676ceb906c4004a1522862a02b89f5e72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function returns a normal value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; exits on the first exception. For a variant that continues after an error and collects all the errors, see &lt;code&gt;&lt;a href=&quot;control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 機能は、一方、正常値を返し &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 最初の例外に出ます。エラーの後に続けて、すべてのエラーを収集バリアントについては、 &lt;code&gt;&lt;a href=&quot;control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0e2a2bef52e7aaec2926a366a49ef4ff7f5dc015" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function yields a computation that produces that value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; sequences two subcomputations, exiting if either computation does.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; ながら関数は、その値を生成する計算をもたらす &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 配列2 subcomputationsいずれかの計算がない場合出ます。</target>
        </trans-unit>
        <trans-unit id="a772099ec423a1c20cd2f57c2352719bbfc68ad0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function yields a computation that produces the given value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; sequences two subcomputations, exiting on the first exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 機能は、一方、所定の値を生成する計算をもたらす &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 最初の例外の上に出る、配列2 subcomputations。</target>
        </trans-unit>
        <trans-unit id="0c02e3b1c74fff6be8fd138b7b81638f5520f137" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function yields a successful computation, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; sequences two subcomputations, failing on the first error.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 機能は、一方、成功した計算をもたらす &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 最初のエラーで失敗し、配列2 subcomputations。</target>
        </trans-unit>
        <trans-unit id="591c2084b78ba16832d7264b63d440c1c164a1fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; methods &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#v:-60--36-&quot;&gt;&amp;lt;$&lt;/a&gt;&lt;/code&gt;, along with &lt;code&gt;&lt;a href=&quot;data-sequence#v:mapWithIndex&quot;&gt;mapWithIndex&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; 方法は &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#v:-60--36-&quot;&gt;&amp;lt;$&lt;/a&gt;&lt;/code&gt; とともに、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:mapWithIndex&quot;&gt;mapWithIndex&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7fd5d1becb199aae7fcf8f5cddb1b46323f94938" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used for the same purposes as the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; ためのインスタンス &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; は、同じ目的で使用される &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; インスタンス。</target>
        </trans-unit>
        <trans-unit id="b9caf64cdefb09c64255eb7f22c88a16a5fc1ad7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used for the same purposes as the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; ためのインスタンス &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; は、同じ目的で使用される &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; インスタンス。</target>
        </trans-unit>
        <trans-unit id="d633291de962b83e64a4f5366d8780f130fabd29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; type supports about 16 decimal places of accuracy. For 94.2% of numbers, this function and &lt;code&gt;&lt;a href=&quot;data-text-lazy-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt; give identical results, but for the remaining 5.8%, this function loses precision around the 15th decimal place. For 0.001% of numbers, this function will lose precision at the 13th or 14th decimal place.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; 精度の16の小数点以下の桁数についてのタイプがサポート。数値の94.2％の場合、この関数と &lt;code&gt;&lt;a href=&quot;data-text-lazy-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt; は同じ結果になりますが、残りの5.8％の場合、この関数は小数点以下15桁で精度を失います。数値の0.001％の場合、この関数は小数点以下第13位または第14位で精度を失います。</target>
        </trans-unit>
        <trans-unit id="d703712be7881bd93cfd2bc01dfee32118d427e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; type supports about 16 decimal places of accuracy. For 94.2% of numbers, this function and &lt;code&gt;&lt;a href=&quot;data-text-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt; give identical results, but for the remaining 5.8%, this function loses precision around the 15th decimal place. For 0.001% of numbers, this function will lose precision at the 13th or 14th decimal place.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; 精度の16の小数点以下の桁数についてのタイプがサポート。数値の94.2％の場合、この関数と &lt;code&gt;&lt;a href=&quot;data-text-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt; は同じ結果になりますが、残りの5.8％の場合、この関数は小数点以下15桁で精度を失います。数値の0.001％の場合、この関数は小数点以下第13位または第14位で精度を失います。</target>
        </trans-unit>
        <trans-unit id="f8c0ff807ccff9eb26062cb229ca77b0ed057850" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used to append the result of several parsers, for example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; ためのインスタンス &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; は、例えば、いくつかのパーサーの結果を追加するために使用されます。</target>
        </trans-unit>
        <trans-unit id="9c784a6d7ab10d7763556a008a4766e1b2eda4a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used to append the result of several parsers, for example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; ためのインスタンス &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; は、例えば、いくつかのパーサーの結果を追加するために使用されます。</target>
        </trans-unit>
        <trans-unit id="8d81a3f4c85b4191151075e8c67e5bf6b30eb413" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; operation for &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt;, which prefers values from the left operand. If &lt;code&gt;m1&lt;/code&gt; maps a key &lt;code&gt;k&lt;/code&gt; to a value &lt;code&gt;a1&lt;/code&gt;, and &lt;code&gt;m2&lt;/code&gt; maps the same key to a different value &lt;code&gt;a2&lt;/code&gt;, then their union &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; maps &lt;code&gt;k&lt;/code&gt; to &lt;code&gt;a1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 演算は &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; で、左のオペランドの値を優先します。場合 &lt;code&gt;m1&lt;/code&gt; は、キーマップする &lt;code&gt;k&lt;/code&gt; 値に &lt;code&gt;a1&lt;/code&gt; 、および &lt;code&gt;m2&lt;/code&gt; は異なる値に同じキーマッピングさ &lt;code&gt;a2&lt;/code&gt; は、その後彼らの労働組合、 &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; にマッピング &lt;code&gt;k&lt;/code&gt; に &lt;code&gt;a1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="886078b2aaab08d590ba45d81857ef8f5563600b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; operation for &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt;, which prefers values from the left operand. If &lt;code&gt;m1&lt;/code&gt; maps a key &lt;code&gt;k&lt;/code&gt; to a value &lt;code&gt;a1&lt;/code&gt;, and &lt;code&gt;m2&lt;/code&gt; maps the same key to a different value &lt;code&gt;a2&lt;/code&gt;, then their union &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; maps &lt;code&gt;k&lt;/code&gt; to &lt;code&gt;a1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 演算は &lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; で、左のオペランドの値を優先します。場合 &lt;code&gt;m1&lt;/code&gt; は、キーマップする &lt;code&gt;k&lt;/code&gt; 値に &lt;code&gt;a1&lt;/code&gt; 、および &lt;code&gt;m2&lt;/code&gt; は異なる値に同じキーマッピングさ &lt;code&gt;a2&lt;/code&gt; は、その後彼らの労働組合、 &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; にマッピング &lt;code&gt;k&lt;/code&gt; に &lt;code&gt;a1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="519517bb832149c99d7d65f9e38c30f74e55d8c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; argument names the executable, and is interpreted according to the platform's standard policy for searching for executables. Specifically:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; 引数名実行ファイル、および実行ファイルを検索するためのプラットフォームの標準ポリシーに従って解釈されます。具体的には：</target>
        </trans-unit>
        <trans-unit id="9c0ad1ae490321b15fc5c17f80550d3243babef6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; methods &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:-42--62-&quot;&gt;*&amp;gt;&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:-60--42-&quot;&gt;&amp;lt;*&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; のメソッド &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:-42--62-&quot;&gt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:-60--42-&quot;&gt;&amp;lt;*&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dece6bc59608b974325c5124d02a6f75ef4c62d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; 戦術の &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; インスタンスは、有効であるため含まれています。ただし、多くの場合、非効率的であるため、通常は回避する必要があります。 &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; 戦術のインスタンスは、大きな効率の問題を引き起こしてはなりません。</target>
        </trans-unit>
        <trans-unit id="f7a9c0b4e24f513886a0fe3de6f9f53dadcdf0d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; 戦術の &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; インスタンスは、有効であるため含まれています。ただし、多くの場合、非効率的であるため、通常は回避する必要があります。 &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; 戦術のインスタンスは、大きな効率の問題を引き起こしてはなりません。</target>
        </trans-unit>
        <trans-unit id="1bc09e39326ac463b521633cc81f1ec225a8a20d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; 戦術の &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; インスタンスは、有効であるため含まれています。ただし、多くの場合、非効率的であるため、通常は回避する必要があります。 &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; 戦術のインスタンスは、大きな効率の問題を引き起こしてはなりません。</target>
        </trans-unit>
        <trans-unit id="68eed02a9714eb35cf81751d72df7caa308a61f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; 戦術の &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; インスタンスは、有効であるため含まれています。ただし、多くの場合、非効率的であるため、通常は回避する必要があります。 &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; 戦術のインスタンスは、大きな効率の問題を引き起こしてはなりません。</target>
        </trans-unit>
        <trans-unit id="7f2da1b81116404bb6e8b43cb3a0637a688bb46e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function ignores the environment, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; passes the inherited environment to both subcomputations.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; ながら機能は、環境を無視 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; の両方subcomputationsに継承された環境を渡します。</target>
        </trans-unit>
        <trans-unit id="260fcde2dc8277fbba23a670e261449948424309" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function leaves the state unchanged, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; uses the final state of the first computation as the initial state of the second.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; ながら機能は、変わらない状態を残す &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 第二の初期状態として、第1の演算の最終状態を使用します。</target>
        </trans-unit>
        <trans-unit id="dc6d56b3f6d2c5e6f40ede452ae79b597fe5912c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function produces the output &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt;, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; combines the outputs of the subcomputations using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 機能は、出力生成 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; をしながら、 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 使用subcomputationsの出力組み合わせ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="1c0f713409cb9cf5a1a1a5c72fd485b5db43eb31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function produces the output &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt;, while &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; combines the outputs of the subcomputations using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 機能は、出力生成 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; をしながら、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; 使用subcomputationsの出力組み合わせ &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="7de8acf7cc9bc186692daa7881912af0fc23a852" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function returns a normal value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; exits on the first exception. For a variant that continues after an error and collects all the errors, see &lt;code&gt;&lt;a href=&quot;../transformers-0.5.6.2/control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 機能は、一方、正常値を返し &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 最初の例外に出ます。エラーの後に継続し、すべてのエラーを収集するバリアントについては、「 &lt;code&gt;&lt;a href=&quot;../transformers-0.5.6.2/control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="1706a86dea612dae3883f17c7ddf1ff83583e970" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function returns a normal value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; exits on the first exception. For a variant that continues after an error and collects all the errors, see &lt;code&gt;&lt;a href=&quot;control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 機能は、一方、正常値を返し &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 最初の例外に出ます。エラーの後に継続し、すべてのエラーを収集するバリアントについては、「 &lt;code&gt;&lt;a href=&quot;control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="56aecaa933008307756b2efe20503802422650bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function yields a computation that produces that value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; sequences two subcomputations, exiting if either computation does.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; ながら関数は、その値を生成する計算をもたらす &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 配列2 subcomputationsいずれかの計算がない場合出ます。</target>
        </trans-unit>
        <trans-unit id="1cc201c4c6a6bfd3a1b5af7fbb6792cb6cd39609" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function yields a computation that produces the given value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; sequences two subcomputations, exiting on the first exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 機能は、一方、所定の値を生成する計算をもたらす &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 最初の例外の上に出る、配列2 subcomputations。</target>
        </trans-unit>
        <trans-unit id="d623297a7b53d6225cb0faf61fb94fa727435ae3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function yields a successful computation, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; sequences two subcomputations, failing on the first error.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 機能は、一方、成功した計算をもたらす &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 最初のエラーで失敗し、配列2 subcomputations。</target>
        </trans-unit>
        <trans-unit id="55ee7b9be2c0feeeaeb3c31adf4da82d6f854ddf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; methods &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#v:-60--36-&quot;&gt;&amp;lt;$&lt;/a&gt;&lt;/code&gt;, along with &lt;code&gt;&lt;a href=&quot;data-sequence#v:mapWithIndex&quot;&gt;mapWithIndex&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; 方法は &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#v:-60--36-&quot;&gt;&amp;lt;$&lt;/a&gt;&lt;/code&gt; とともに、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:mapWithIndex&quot;&gt;mapWithIndex&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="11e1aa3150c01618910f02e8bbc7bf355bd69cbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; is necessary for handling tuple sections.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; タプルのセクションを処理するために必要です。</target>
        </trans-unit>
        <trans-unit id="11b5bc40c86fffa7a6076174b1bffbac140f29df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used for the same purposes as the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; ためのインスタンス &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; は、同じ目的で使用される &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; インスタンス。</target>
        </trans-unit>
        <trans-unit id="f95780e47c020eeeda31a8c201eb535a8974578f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used for the same purposes as the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; ためのインスタンス &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; は、同じ目的で使用される &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; インスタンス。</target>
        </trans-unit>
        <trans-unit id="8a75b664a9646e6aa02764c34d0fe587f5a1dfbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; type supports about 16 decimal places of accuracy. For 94.2% of numbers, this function and &lt;code&gt;&lt;a href=&quot;data-text-lazy-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt; give identical results, but for the remaining 5.8%, this function loses precision around the 15th decimal place. For 0.001% of numbers, this function will lose precision at the 13th or 14th decimal place.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; 精度の16の小数点以下の桁数についてのタイプがサポート。数値の94.2％の場合、この関数と &lt;code&gt;&lt;a href=&quot;data-text-lazy-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt; は同じ結果になりますが、残りの5.8％の場合、この関数は小数点以下15桁付近で精度を失います。数値の0.001％の場合、この関数は小数点以下13桁または14桁で適合率を失います。</target>
        </trans-unit>
        <trans-unit id="1201c6da12de4aba1276a3d6388e0825a36aceda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; type supports about 16 decimal places of accuracy. For 94.2% of numbers, this function and &lt;code&gt;&lt;a href=&quot;data-text-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt; give identical results, but for the remaining 5.8%, this function loses precision around the 15th decimal place. For 0.001% of numbers, this function will lose precision at the 13th or 14th decimal place.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; 精度の16の小数点以下の桁数についてのタイプがサポート。数値の94.2％の場合、この関数と &lt;code&gt;&lt;a href=&quot;data-text-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt; は同じ結果になりますが、残りの5.8％の場合、この関数は小数点以下15桁付近で精度を失います。数値の0.001％の場合、この関数は小数点以下13桁または14桁で適合率を失います。</target>
        </trans-unit>
        <trans-unit id="2acb16e4a1657fdc3b4413dfd0838f6380ef5ab8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used to append the result of several parsers, for example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; ためのインスタンス &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; は、例えば、いくつかのパーサーの結果を追加するために使用されます。</target>
        </trans-unit>
        <trans-unit id="a9de1cc1416c3082400d8b6dfbf1289ad2cbe6d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used to append the result of several parsers, for example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; ためのインスタンス &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; は、例えば、いくつかのパーサーの結果を追加するために使用されます。</target>
        </trans-unit>
        <trans-unit id="d955c1b4b45545a54049a0a44af93865745803be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; operation for &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt;, which prefers values from the left operand. If &lt;code&gt;m1&lt;/code&gt; maps a key &lt;code&gt;k&lt;/code&gt; to a value &lt;code&gt;a1&lt;/code&gt;, and &lt;code&gt;m2&lt;/code&gt; maps the same key to a different value &lt;code&gt;a2&lt;/code&gt;, then their union &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; maps &lt;code&gt;k&lt;/code&gt; to &lt;code&gt;a1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 演算は &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; であり、左のオペランドからの値を優先します。場合 &lt;code&gt;m1&lt;/code&gt; は、キーマップする &lt;code&gt;k&lt;/code&gt; 値に &lt;code&gt;a1&lt;/code&gt; 、および &lt;code&gt;m2&lt;/code&gt; は異なる値に同じキーマッピングさ &lt;code&gt;a2&lt;/code&gt; は、その後彼らの労働組合、 &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; にマッピング &lt;code&gt;k&lt;/code&gt; に &lt;code&gt;a1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a1e8a62dc2c0577ea2e4fa388d91268432827035" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; operation for &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt;, which prefers values from the left operand. If &lt;code&gt;m1&lt;/code&gt; maps a key &lt;code&gt;k&lt;/code&gt; to a value &lt;code&gt;a1&lt;/code&gt;, and &lt;code&gt;m2&lt;/code&gt; maps the same key to a different value &lt;code&gt;a2&lt;/code&gt;, then their union &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; maps &lt;code&gt;k&lt;/code&gt; to &lt;code&gt;a1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 演算は &lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; であり、左のオペランドからの値を優先します。場合 &lt;code&gt;m1&lt;/code&gt; は、キーマップする &lt;code&gt;k&lt;/code&gt; 値に &lt;code&gt;a1&lt;/code&gt; 、および &lt;code&gt;m2&lt;/code&gt; は異なる値に同じキーマッピングさ &lt;code&gt;a2&lt;/code&gt; は、その後彼らの労働組合、 &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; にマッピング &lt;code&gt;k&lt;/code&gt; に &lt;code&gt;a1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c6e7c89abb8ca4cf07ac674bde1a74e6e1be7e25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; argument names the executable, and is interpreted according to the platform's standard policy for searching for executables. Specifically:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; 引数名実行ファイル、および実行ファイルを検索するためのプラットフォームの標準ポリシーに従って解釈されます。具体的には：</target>
        </trans-unit>
        <trans-unit id="f78ea894305fa2f92651eb848a796e984b4e4110" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; methods &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#v:-42--62-&quot;&gt;*&amp;gt;&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#v:-60--42-&quot;&gt;&amp;lt;*&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; のメソッド &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#v:-42--62-&quot;&gt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#v:-60--42-&quot;&gt;&amp;lt;*&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d405feb3a6b9895afaa0f318b7f28398f4bd6aee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; 戦術の &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; インスタンスは、有効であるため含まれています。ただし、多くの場合、非効率的であるため、通常は回避する必要があります。 &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; 戦術のインスタンスは、大きな効率の問題を引き起こしてはなりません。</target>
        </trans-unit>
        <trans-unit id="86f1266aae7ad8bdc0dba42358ae53d2bcc3771f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; 戦術の &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; インスタンスは、有効であるため含まれています。ただし、多くの場合、非効率的であるため、通常は回避する必要があります。 &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; 戦術のインスタンスは、大きな効率の問題を引き起こしてはなりません。</target>
        </trans-unit>
        <trans-unit id="458e0e129dcbdfa5cce87aefa9e19048a965d645" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; 戦術の &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; インスタンスは、有効であるため含まれています。ただし、多くの場合、非効率的であるため、通常は回避する必要があります。 &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; 戦術のインスタンスは、大きな効率の問題を引き起こしてはなりません。</target>
        </trans-unit>
        <trans-unit id="fc0c4cd9b9fd204bedd14ea51fb195630c8139d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; 戦術の &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; インスタンスは、有効であるため含まれています。ただし、多くの場合、非効率的であるため、通常は回避する必要があります。 &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; 戦術のインスタンスは、大きな効率の問題を引き起こしてはなりません。</target>
        </trans-unit>
        <trans-unit id="d72da00b002507603215122aff2a0c788a0b577d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function ignores the environment, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; passes the inherited environment to both subcomputations.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; ながら機能は、環境を無視 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; の両方subcomputationsに継承された環境を渡します。</target>
        </trans-unit>
        <trans-unit id="975265378d608c7754aeb46eef5e343d004094c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function leaves the state unchanged, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; uses the final state of the first computation as the initial state of the second.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; ながら機能は、変わらない状態を残す &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 第二の初期状態として、第1の演算の最終状態を使用します。</target>
        </trans-unit>
        <trans-unit id="046b9ec685e02d0b7255d415f7a53e51ece44c02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function produces the output &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt;, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; combines the outputs of the subcomputations using &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 機能は、出力生成 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; をしながら、 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 使用subcomputationsの出力組み合わせ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="1ce59aa9aa7770be720fe2f9ab4b78c390dafeca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function produces the output &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt;, while &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; combines the outputs of the subcomputations using &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 機能は、出力生成 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; をしながら、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; 使用subcomputationsの出力組み合わせ &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="ab2094e6381df03e75161328d5b93c89ad3d9048" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function returns a normal value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; exits on the first exception. For a variant that continues after an error and collects all the errors, see &lt;code&gt;&lt;a href=&quot;../transformers-0.5.6.2/control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 機能は、一方、正常値を返し &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 最初の例外に出ます。エラーの後に継続し、すべてのエラーを収集するバリアントについては、「 &lt;code&gt;&lt;a href=&quot;../transformers-0.5.6.2/control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="cc17f1fd4fad20e7ff547a572bbb918d61a43edc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function returns a normal value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; exits on the first exception. For a variant that continues after an error and collects all the errors, see &lt;code&gt;&lt;a href=&quot;control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 機能は、一方、正常値を返し &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 最初の例外に出ます。エラーの後に継続し、すべてのエラーを収集するバリアントについては、「 &lt;code&gt;&lt;a href=&quot;control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="3a9fbc9218ae7816a7764ba8f4b7ea997abf1ec4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function yields a computation that produces that value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; sequences two subcomputations, exiting if either computation does.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; ながら関数は、その値を生成する計算をもたらす &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 配列2 subcomputationsいずれかの計算がない場合出ます。</target>
        </trans-unit>
        <trans-unit id="dbde8b545bd4180a31e36b9eaf901736baf44dd8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function yields a computation that produces the given value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; sequences two subcomputations, exiting on the first exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 機能は、一方、所定の値を生成する計算をもたらす &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 最初の例外の上に出る、配列2 subcomputations。</target>
        </trans-unit>
        <trans-unit id="70d2fe74f9a13fe2abf46ab4a20202c52ca11c4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function yields a successful computation, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; sequences two subcomputations, failing on the first error.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 機能は、一方、成功した計算をもたらす &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 最初のエラーで失敗し、配列2 subcomputations。</target>
        </trans-unit>
        <trans-unit id="0392dbac15f5a29ace95ddc3854629ee10a2c673" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; methods &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-functor#v:-60--36-&quot;&gt;&amp;lt;$&lt;/a&gt;&lt;/code&gt;, along with &lt;code&gt;&lt;a href=&quot;data-sequence#v:mapWithIndex&quot;&gt;mapWithIndex&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; 方法は &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-functor#v:-60--36-&quot;&gt;&amp;lt;$&lt;/a&gt;&lt;/code&gt; とともに、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:mapWithIndex&quot;&gt;mapWithIndex&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a49a233b3aaeb66c434e12308ae79ebd04f8c90b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; is necessary for handling tuple sections.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; タプルのセクションを処理するために必要です。</target>
        </trans-unit>
        <trans-unit id="4a31b665a96aa687aea00989af736838ac7b1ad7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used for the same purposes as the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; ためのインスタンス &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; は、同じ目的で使用される &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; インスタンス。</target>
        </trans-unit>
        <trans-unit id="ba0b18140a235048175aac50f5fcbba208d418d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used for the same purposes as the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; ためのインスタンス &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; は、同じ目的で使用される &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; インスタンス。</target>
        </trans-unit>
        <trans-unit id="97ca3a40e1687acc199ba4ae4156a478a2153d5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; type supports about 16 decimal places of accuracy. For 94.2% of numbers, this function and &lt;code&gt;&lt;a href=&quot;data-text-lazy-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt; give identical results, but for the remaining 5.8%, this function loses precision around the 15th decimal place. For 0.001% of numbers, this function will lose precision at the 13th or 14th decimal place.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; 精度の16の小数点以下の桁数についてのタイプがサポート。数値の94.2％の場合、この関数と &lt;code&gt;&lt;a href=&quot;data-text-lazy-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt; は同じ結果になりますが、残りの5.8％の場合、この関数は小数点以下15桁付近で精度を失います。数値の0.001％の場合、この関数は小数点以下13桁または14桁で適合率を失います。</target>
        </trans-unit>
        <trans-unit id="28366f4f1cc4165989efbd16469d4c39f286fe41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; type supports about 16 decimal places of accuracy. For 94.2% of numbers, this function and &lt;code&gt;&lt;a href=&quot;data-text-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt; give identical results, but for the remaining 5.8%, this function loses precision around the 15th decimal place. For 0.001% of numbers, this function will lose precision at the 13th or 14th decimal place.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; 精度の16の小数点以下の桁数についてのタイプがサポート。数値の94.2％の場合、この関数と &lt;code&gt;&lt;a href=&quot;data-text-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt; は同じ結果になりますが、残りの5.8％の場合、この関数は小数点以下15桁付近で精度を失います。数値の0.001％の場合、この関数は小数点以下13桁または14桁で適合率を失います。</target>
        </trans-unit>
        <trans-unit id="54880289dd15dc1c7fcd477651a6537f2d2ab48b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used to append the result of several parsers, for example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; ためのインスタンス &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; は、例えば、いくつかのパーサーの結果を追加するために使用されます。</target>
        </trans-unit>
        <trans-unit id="dc53a4659b8ab96fd92904a1a6f76268c60e672b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used to append the result of several parsers, for example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; ためのインスタンス &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; は、例えば、いくつかのパーサーの結果を追加するために使用されます。</target>
        </trans-unit>
        <trans-unit id="89cddb92704acf6ee37cc5e18ac776492c7fd174" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; operation for &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt;, which prefers values from the left operand. If &lt;code&gt;m1&lt;/code&gt; maps a key &lt;code&gt;k&lt;/code&gt; to a value &lt;code&gt;a1&lt;/code&gt;, and &lt;code&gt;m2&lt;/code&gt; maps the same key to a different value &lt;code&gt;a2&lt;/code&gt;, then their union &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; maps &lt;code&gt;k&lt;/code&gt; to &lt;code&gt;a1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 演算は &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; であり、左のオペランドからの値を優先します。場合 &lt;code&gt;m1&lt;/code&gt; は、キーマップする &lt;code&gt;k&lt;/code&gt; 値に &lt;code&gt;a1&lt;/code&gt; 、および &lt;code&gt;m2&lt;/code&gt; は異なる値に同じキーマッピングさ &lt;code&gt;a2&lt;/code&gt; は、その後彼らの労働組合、 &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; にマッピング &lt;code&gt;k&lt;/code&gt; に &lt;code&gt;a1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ece285de7b69fb6ebec656427cb5d85fead59f94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; operation for &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt;, which prefers values from the left operand. If &lt;code&gt;m1&lt;/code&gt; maps a key &lt;code&gt;k&lt;/code&gt; to a value &lt;code&gt;a1&lt;/code&gt;, and &lt;code&gt;m2&lt;/code&gt; maps the same key to a different value &lt;code&gt;a2&lt;/code&gt;, then their union &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; maps &lt;code&gt;k&lt;/code&gt; to &lt;code&gt;a1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 演算は &lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; であり、左のオペランドからの値を優先します。場合 &lt;code&gt;m1&lt;/code&gt; は、キーマップする &lt;code&gt;k&lt;/code&gt; 値に &lt;code&gt;a1&lt;/code&gt; 、および &lt;code&gt;m2&lt;/code&gt; は異なる値に同じキーマッピングさ &lt;code&gt;a2&lt;/code&gt; は、その後彼らの労働組合、 &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; にマッピング &lt;code&gt;k&lt;/code&gt; に &lt;code&gt;a1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="161eb66f14a2659bb4450195c7fef766d0c5fa15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; argument names the executable, and is interpreted according to the platform's standard policy for searching for executables. Specifically:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; 引数名実行ファイル、および実行ファイルを検索するためのプラットフォームの標準ポリシーに従って解釈されます。具体的には：</target>
        </trans-unit>
        <trans-unit id="b8ec1a27d9645ead49a8fac70722d498afadafab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-applicative#t:Const&quot;&gt;Const&lt;/a&gt;&lt;/code&gt; functor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-applicative#t:Const&quot;&gt;Const&lt;/a&gt;&lt;/code&gt; ファンクタ。</target>
        </trans-unit>
        <trans-unit id="404d7369c3ed5cd7574fad867737a14afb444a12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-arrow#t:ArrowApply&quot;&gt;ArrowApply&lt;/a&gt;&lt;/code&gt; class is equivalent to &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt;: any monad gives rise to a &lt;code&gt;&lt;a href=&quot;control-arrow#t:Kleisli&quot;&gt;Kleisli&lt;/a&gt;&lt;/code&gt; arrow, and any instance of &lt;code&gt;&lt;a href=&quot;control-arrow#t:ArrowApply&quot;&gt;ArrowApply&lt;/a&gt;&lt;/code&gt; defines a monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-arrow#t:ArrowApply&quot;&gt;ArrowApply&lt;/a&gt;&lt;/code&gt; のクラスは、と等価である &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; ：任意のモナドは、を生じさせる &lt;code&gt;&lt;a href=&quot;control-arrow#t:Kleisli&quot;&gt;Kleisli&lt;/a&gt;&lt;/code&gt; の矢印、及び任意のインスタンス &lt;code&gt;&lt;a href=&quot;control-arrow#t:ArrowApply&quot;&gt;ArrowApply&lt;/a&gt;&lt;/code&gt; はモナドを定義します。</target>
        </trans-unit>
        <trans-unit id="712abe7e2f78e39742519eb3d9a6b4a2f4ce365d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-arrow#v:loop&quot;&gt;loop&lt;/a&gt;&lt;/code&gt; operator expresses computations in which an output value is fed back as input, although the computation occurs only once. It underlies the &lt;code&gt;rec&lt;/code&gt; value recursion construct in arrow notation. &lt;code&gt;&lt;a href=&quot;control-arrow#v:loop&quot;&gt;loop&lt;/a&gt;&lt;/code&gt; should satisfy the following laws:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-arrow#v:loop&quot;&gt;loop&lt;/a&gt;&lt;/code&gt; 計算は一度だけ発生するが、出力値は、入力としてフィードバックされたオペレータの表現の計算。これは、矢印表記の &lt;code&gt;rec&lt;/code&gt; 値の再帰構造の基礎となります。 &lt;code&gt;&lt;a href=&quot;control-arrow#v:loop&quot;&gt;loop&lt;/a&gt;&lt;/code&gt; は次の法則を満たしている必要があります。</target>
        </trans-unit>
        <trans-unit id="4d5ea08c77b20ca5949edb787e87c9bfc18d424c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-concurrent#v:yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; action allows (forces, in a co-operative multitasking implementation) a context-switch to any other currently runnable threads (if any), and is occasionally useful when implementing concurrency abstractions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent#v:yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; アクションは、他の現在実行可能なスレッド（もしあれば）に（協同マルチタスクの実装の力）コンテキストスイッチを可能にし、並行性の抽象化を実装する際に時折有用です。</target>
        </trans-unit>
        <trans-unit id="2aecf2fbfb3505dad21f83e912f2781f57633420" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad#t:MonadPlus&quot;&gt;MonadPlus&lt;/a&gt;&lt;/code&gt; classes, with some useful operations on monads.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;control-monad#t:MonadPlus&quot;&gt;MonadPlus&lt;/a&gt;&lt;/code&gt; のモナドにいくつかの便利な操作とクラス。</target>
        </trans-unit>
        <trans-unit id="e42cbe3850d6befefe426ee80a44a4c35d7e57b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class defines the basic operations over a &lt;em&gt;monad&lt;/em&gt;, a concept from a branch of mathematics known as &lt;em&gt;category theory&lt;/em&gt;. From the perspective of a Haskell programmer, however, it is best to think of a monad as an &lt;em&gt;abstract datatype&lt;/em&gt; of actions. Haskell's &lt;code&gt;do&lt;/code&gt; expressions provide a convenient syntax for writing monadic expressions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; クラスは、上の基本的な操作を定義&lt;em&gt;モナド&lt;/em&gt;として知られている数学の枝から、コンセプトを&lt;em&gt;カテゴリ理論&lt;/em&gt;。ただし、Haskellプログラマーの観点からは、モナドをアクションの&lt;em&gt;抽象的なデータ型&lt;/em&gt;と考えるのが最善です。Haskellの &lt;code&gt;do&lt;/code&gt; 式は、モナド式を記述するための便利な構文を提供します。</target>
        </trans-unit>
        <trans-unit id="4fc32a4cddc34ade233961b4012b777dbb17097e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; allows us to chain together multiple actions which may fail, and fail overall if any of the individual steps failed. First we'll write a function that can either parse an &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; from a &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;, or fail.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; インスタンスを使用すると、失敗する可能性のある複数のアクションを連鎖させ、個々のステップのいずれかが失敗した場合は全体的に失敗させることができます。最初に、 &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; を解析するか、失敗することができる関数を記述します。</target>
        </trans-unit>
        <trans-unit id="841e7fb83df459d53e389056b37c0fc15cd60e41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; operations are not strict in the state. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; 動作状態に厳密ではありません。例えば、</target>
        </trans-unit>
        <trans-unit id="8492deac48ede758cea8f52bc65fb3e2f9ba2826" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; operations are strict in the state (though not in values stored in the state). For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; 操作（状態で格納された値ではないが）状態に厳しいです。例えば、</target>
        </trans-unit>
        <trans-unit id="27d5a6c8ea1acb5010f2c9679c264fd5c989ebdc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad#v:foldM&quot;&gt;foldM&lt;/a&gt;&lt;/code&gt; function is analogous to &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, except that its result is encapsulated in a monad. Note that &lt;code&gt;&lt;a href=&quot;control-monad#v:foldM&quot;&gt;foldM&lt;/a&gt;&lt;/code&gt; works from left-to-right over the list arguments. This could be an issue where &lt;code&gt;(&lt;a href=&quot;control-monad#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;)&lt;/code&gt; and the `folded function' are not commutative.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#v:foldM&quot;&gt;foldM&lt;/a&gt;&lt;/code&gt; の関数はに類似している &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; のその結果はモナドにカプセル化されることを除いて、。 &lt;code&gt;&lt;a href=&quot;control-monad#v:foldM&quot;&gt;foldM&lt;/a&gt;&lt;/code&gt; はリストの引数に対して左から右に機能することに注意してください。これは、 &lt;code&gt;(&lt;a href=&quot;control-monad#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;)&lt;/code&gt; と「折りたたみ関数」が可換ではない問題である可能性があります。</target>
        </trans-unit>
        <trans-unit id="9ee235b387a6a14db33bdf2a6b2158fa66bc38c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad#v:join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; function is the conventional monad join operator. It is used to remove one level of monadic structure, projecting its bound argument into the outer level.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#v:join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; 機能は、従来のモナド演算子を結合です。これは、1つのレベルのモナド構造を削除するために使用され、バインドされた引数を外部レベルに投影します。</target>
        </trans-unit>
        <trans-unit id="b7e9731c305b0f549055c674d9ac68832bd130e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad#v:mapAndUnzipM&quot;&gt;mapAndUnzipM&lt;/a&gt;&lt;/code&gt; function maps its first argument over a list, returning the result as a pair of lists. This function is mainly used with complicated data structures or a state monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#v:mapAndUnzipM&quot;&gt;mapAndUnzipM&lt;/a&gt;&lt;/code&gt; の関数は、リストのペアとして結果を返す、リスト上の最初の引数をマップします。この関数は主に複雑なデータ構造または状態モナドで使用されます。</target>
        </trans-unit>
        <trans-unit id="adfaa2036ac4e96d2cf9b7c53ce9041b46c41b72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad#v:zipWithM&quot;&gt;zipWithM&lt;/a&gt;&lt;/code&gt; function generalizes &lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; to arbitrary applicative functors.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#v:zipWithM&quot;&gt;zipWithM&lt;/a&gt;&lt;/code&gt; の機能は、一般化 &lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; を任意の応用的ファンクタに。</target>
        </trans-unit>
        <trans-unit id="9e4c77f8896de4159de2b19d91214d29c830fc9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad-instances#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class defines the basic operations over a &lt;em&gt;monad&lt;/em&gt;, a concept from a branch of mathematics known as &lt;em&gt;category theory&lt;/em&gt;. From the perspective of a Haskell programmer, however, it is best to think of a monad as an &lt;em&gt;abstract datatype&lt;/em&gt; of actions. Haskell's &lt;code&gt;do&lt;/code&gt; expressions provide a convenient syntax for writing monadic expressions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-instances#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; クラスは、上の基本的な操作を定義&lt;em&gt;モナド&lt;/em&gt;として知られている数学の枝から、コンセプトを&lt;em&gt;カテゴリ理論&lt;/em&gt;。ただし、Haskellプログラマーの観点からは、モナドをアクションの&lt;em&gt;抽象的なデータ型&lt;/em&gt;と考えるのが最善です。Haskellの &lt;code&gt;do&lt;/code&gt; 式は、モナド式を記述するための便利な構文を提供します。</target>
        </trans-unit>
        <trans-unit id="680d557813d267dc8f3ee06e2da84590ab3ebc77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad-reader#t:Reader&quot;&gt;Reader&lt;/a&gt;&lt;/code&gt; monad (also called the Environment monad). Represents a computation, which can read values from a shared environment, pass values from function to function, and execute sub-computations in a modified environment. Using &lt;code&gt;&lt;a href=&quot;control-monad-reader#t:Reader&quot;&gt;Reader&lt;/a&gt;&lt;/code&gt; monad for such computations is often clearer and easier than using the &lt;code&gt;&lt;a href=&quot;control-monad-state#v:State&quot;&gt;State&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-reader#t:Reader&quot;&gt;Reader&lt;/a&gt;&lt;/code&gt; モナドは（も環境モナドと呼ばれます）。共有環境から値を読み取り、関数から関数に値を渡し、変更された環境でサブ計算を実行できる計算を表します。使用して &lt;code&gt;&lt;a href=&quot;control-monad-reader#t:Reader&quot;&gt;Reader&lt;/a&gt;&lt;/code&gt; ような計算のためのモナドは、使用するよりも、多くの場合、明確かつ容易である &lt;code&gt;&lt;a href=&quot;control-monad-state#v:State&quot;&gt;State&lt;/a&gt;&lt;/code&gt; モナドを。</target>
        </trans-unit>
        <trans-unit id="81283641c0b20f0b2748a09d602fde66cbffe272" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:catchE&quot;&gt;catchE&lt;/a&gt;&lt;/code&gt; operation has a more complex type, so we need to use the special-purpose lifting function &lt;code&gt;liftCatch&lt;/code&gt; provided by most monad transformers. Here we use the &lt;code&gt;&lt;a href=&quot;control-monad-trans-reader#v:ReaderT&quot;&gt;ReaderT&lt;/a&gt;&lt;/code&gt; version followed by the &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:StateT&quot;&gt;StateT&lt;/a&gt;&lt;/code&gt; version:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:catchE&quot;&gt;catchE&lt;/a&gt;&lt;/code&gt; の操作は、私たちは専用の昇降機能を使用する必要があり、より複雑な型を持つ &lt;code&gt;liftCatch&lt;/code&gt; が最もモナド変圧器によって提供されます。ここでは、 &lt;code&gt;&lt;a href=&quot;control-monad-trans-reader#v:ReaderT&quot;&gt;ReaderT&lt;/a&gt;&lt;/code&gt; バージョンの後に &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:StateT&quot;&gt;StateT&lt;/a&gt;&lt;/code&gt; バージョンを使用しています。</target>
        </trans-unit>
        <trans-unit id="545d7b475a316b28ef1da840a21adda70380c2c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad-trans-maybe#t:MaybeT&quot;&gt;MaybeT&lt;/a&gt;&lt;/code&gt; monad transformer extends a monad with the ability to exit the computation without returning a value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-trans-maybe#t:MaybeT&quot;&gt;MaybeT&lt;/a&gt;&lt;/code&gt; モナド変圧器は値を返さずに計算を終了する能力をモナドに延びています。</target>
        </trans-unit>
        <trans-unit id="a2118806ea587f5911ee90a60aa429d89bdcab96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-array#v:accumArray&quot;&gt;accumArray&lt;/a&gt;&lt;/code&gt; function deals with repeated indices in the association list using an &lt;em&gt;accumulating function&lt;/em&gt; which combines the values of associations with the same index.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-array#v:accumArray&quot;&gt;accumArray&lt;/a&gt;&lt;/code&gt; の機能は、使用関連リスト内の繰り返しのインデックスを扱う&lt;em&gt;蓄積機能&lt;/em&gt;同じインデックスとの関連の値を組み合わせ。</target>
        </trans-unit>
        <trans-unit id="0179248504c3fa08ab2a958c9b5147b68d6c33e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifind&quot;&gt;bifind&lt;/a&gt;&lt;/code&gt; function takes a predicate and a structure and returns the leftmost element of the structure matching the predicate, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifind&quot;&gt;bifind&lt;/a&gt;&lt;/code&gt; 関数は、述部および構造をとり、述語に一致する構造、又は左端の要素を返し &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; そのような要素が存在しない場合。</target>
        </trans-unit>
        <trans-unit id="87802a775d4245309a8eade317e7d18abe967e8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:biproduct&quot;&gt;biproduct&lt;/a&gt;&lt;/code&gt; function computes the product of the numbers of a structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bifoldable#v:biproduct&quot;&gt;biproduct&lt;/a&gt;&lt;/code&gt; 機能は、構造体の数との積を計算します。</target>
        </trans-unit>
        <trans-unit id="e6a2674d1a15617e9adc9ceb2614394b34abbb43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bisum&quot;&gt;bisum&lt;/a&gt;&lt;/code&gt; function computes the sum of the numbers of a structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bisum&quot;&gt;bisum&lt;/a&gt;&lt;/code&gt; 関数は、構造体の数の和を計算します。</target>
        </trans-unit>
        <trans-unit id="dc2ecd95ed8a8f0c6f2cf1d560aaa6d8aea4ed41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-binary#t:Binary&quot;&gt;Binary&lt;/a&gt;&lt;/code&gt; class provides &lt;code&gt;&lt;a href=&quot;data-binary#v:put&quot;&gt;put&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-binary#v:get&quot;&gt;get&lt;/a&gt;&lt;/code&gt;, methods to encode and decode a Haskell value to a lazy &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. It mirrors the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; classes for textual representation of Haskell types, and is suitable for serialising Haskell values to disk, over the network.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-binary#t:Binary&quot;&gt;Binary&lt;/a&gt;&lt;/code&gt; クラスが提供 &lt;code&gt;&lt;a href=&quot;data-binary#v:put&quot;&gt;put&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-binary#v:get&quot;&gt;get&lt;/a&gt;&lt;/code&gt; エンコードに、メソッドをして怠惰にHaskellの値をデコード &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 。Haskell型のテキスト表現の &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; クラスと &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; クラスをミラーリングし、ネットワークを介してディスクにHaskell値をシリアル化するのに適しています。</target>
        </trans-unit>
        <trans-unit id="ef67bb75d4cd691a3105fe1fbf4dfcaa9ea238dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-binary#t:Binary&quot;&gt;Binary&lt;/a&gt;&lt;/code&gt; class provides &lt;code&gt;&lt;a href=&quot;data-binary#v:put&quot;&gt;put&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-binary#v:get&quot;&gt;get&lt;/a&gt;&lt;/code&gt;, methods to encode and decode a Haskell value to a lazy &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. It mirrors the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; classes for textual representation of Haskell types, and is suitable for serialising Haskell values to disk, over the network.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-binary#t:Binary&quot;&gt;Binary&lt;/a&gt;&lt;/code&gt; クラスが提供 &lt;code&gt;&lt;a href=&quot;data-binary#v:put&quot;&gt;put&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-binary#v:get&quot;&gt;get&lt;/a&gt;&lt;/code&gt; エンコードに、メソッドをして怠惰にHaskellの値をデコード &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 。これは、Haskellタイプのテキスト表現用の &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; クラスと &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; クラスをミラーリングしており、ネットワークを介してHaskell値をディスクにシリアル化するのに適しています。</target>
        </trans-unit>
        <trans-unit id="359a7c862ec288bde5c781831027b2789d88d4e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-binary#t:Binary&quot;&gt;Binary&lt;/a&gt;&lt;/code&gt; class provides &lt;code&gt;&lt;a href=&quot;data-binary#v:put&quot;&gt;put&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-binary#v:get&quot;&gt;get&lt;/a&gt;&lt;/code&gt;, methods to encode and decode a Haskell value to a lazy &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.12.1/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. It mirrors the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; classes for textual representation of Haskell types, and is suitable for serialising Haskell values to disk, over the network.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-binary#t:Binary&quot;&gt;Binary&lt;/a&gt;&lt;/code&gt; クラスが提供 &lt;code&gt;&lt;a href=&quot;data-binary#v:put&quot;&gt;put&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-binary#v:get&quot;&gt;get&lt;/a&gt;&lt;/code&gt; エンコードに、メソッドをして怠惰にHaskellの値をデコード &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.12.1/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 。これは、Haskellタイプのテキスト表現用の &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; クラスと &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; クラスをミラーリングしており、ネットワークを介してHaskell値をディスクにシリアル化するのに適しています。</target>
        </trans-unit>
        <trans-unit id="fc3c4e321db0da5c60f5e57209330b5697cd8103" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-binary-get#t:Get&quot;&gt;Get&lt;/a&gt;&lt;/code&gt; monad. A monad for efficiently building structures from encoded lazy ByteStrings.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-binary-get#t:Get&quot;&gt;Get&lt;/a&gt;&lt;/code&gt; モナド。エンコードされた遅延ByteStringから構造を効率的に構築するためのモナド。</target>
        </trans-unit>
        <trans-unit id="4d3613093bfbb78cd7a2a16f8922cee7681b2bed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bitraversable#v:bimapAccumL&quot;&gt;bimapAccumL&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bifunctor#v:bimap&quot;&gt;bimap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifoldl&quot;&gt;bifoldl&lt;/a&gt;&lt;/code&gt;; it traverses a structure from left to right, threading a state of type &lt;code&gt;a&lt;/code&gt; and using the given actions to compute new elements for the structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bitraversable#v:bimapAccumL&quot;&gt;bimapAccumL&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;data-bifunctor#v:bimap&quot;&gt;bimap&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifoldl&quot;&gt;bifoldl&lt;/a&gt;&lt;/code&gt; 。構造体を左から右にトラバースし、タイプ &lt;code&gt;a&lt;/code&gt; の状態をスレッド化し、指定されたアクションを使用して構造体の新しい要素を計算します。</target>
        </trans-unit>
        <trans-unit id="9a87ec27622ff13e398e24344f3a64ac0e1395d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bitraversable#v:bimapAccumR&quot;&gt;bimapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bifunctor#v:bimap&quot;&gt;bimap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifoldl&quot;&gt;bifoldl&lt;/a&gt;&lt;/code&gt;; it traverses a structure from right to left, threading a state of type &lt;code&gt;a&lt;/code&gt; and using the given actions to compute new elements for the structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bitraversable#v:bimapAccumR&quot;&gt;bimapAccumR&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;data-bifunctor#v:bimap&quot;&gt;bimap&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifoldl&quot;&gt;bifoldl&lt;/a&gt;&lt;/code&gt; 。構造体を右から左にトラバースし、タイプ &lt;code&gt;a&lt;/code&gt; の状態をスレッド化し、指定されたアクションを使用して構造体の新しい要素を計算します。</target>
        </trans-unit>
        <trans-unit id="8fde160a7fc5705892a4e1ea87c284f4780166ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bitraversable#v:bimapAccumR&quot;&gt;bimapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bifunctor#v:bimap&quot;&gt;bimap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifoldr&quot;&gt;bifoldr&lt;/a&gt;&lt;/code&gt;; it traverses a structure from right to left, threading a state of type &lt;code&gt;a&lt;/code&gt; and using the given actions to compute new elements for the structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bitraversable#v:bimapAccumR&quot;&gt;bimapAccumR&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;data-bifunctor#v:bimap&quot;&gt;bimap&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifoldr&quot;&gt;bifoldr&lt;/a&gt;&lt;/code&gt; 。構造を右から左にトラバースし、タイプ &lt;code&gt;a&lt;/code&gt; の状態をスレッド化し、指定されたアクションを使用して構造の新しい要素を計算します。</target>
        </trans-unit>
        <trans-unit id="48db54c46d3aa624ae5d297b1ebeb1fa3977d71b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bits#t:Bits&quot;&gt;Bits&lt;/a&gt;&lt;/code&gt; class defines bitwise operations over integral types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bits#t:Bits&quot;&gt;Bits&lt;/a&gt;&lt;/code&gt; クラス定義は、一体型の上操作をビット単位。</target>
        </trans-unit>
        <trans-unit id="0ad9b411edb3c5e8c1b9471ab75ecc126a6721eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bits#t:FiniteBits&quot;&gt;FiniteBits&lt;/a&gt;&lt;/code&gt; class denotes types with a finite, fixed number of bits.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bits#t:FiniteBits&quot;&gt;FiniteBits&lt;/a&gt;&lt;/code&gt; のクラスは、有限とタイプ、固定ビット数を表します。</target>
        </trans-unit>
        <trans-unit id="20817eeecc682279fcdb27f8168c9dc5e0bd900f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bool#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; type and related functions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bool#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; 種類および関連機能。</target>
        </trans-unit>
        <trans-unit id="0ac698df5fa5f3ca66ad118ffad20bf3b266295d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; function takes a predicate and a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and returns the index of the first element in the ByteString satisfying the predicate.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; の関数は述語とかかり &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 述語を満たすバイト文字列内の最初の要素のインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="a88a45076c0dfb13c7596a49a77c0da26a873595" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;data-bytestring#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements satisfying the predicate, in ascending order.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; の関数が延び &lt;code&gt;&lt;a href=&quot;data-bytestring#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; を昇順に、述語を満たすすべての要素のインデックスを返すことによって、。</target>
        </trans-unit>
        <trans-unit id="d89ae35b30db39f44c3fe60d6b3d04049f068a4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; function takes a ByteString and returns a list of ByteStrings such that the concatenation of the result is equal to the argument. Moreover, each sublist in the result contains only equal elements. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 機能は、延ByteStringを取り、結果の連結が引数に等しくなるようにバイト文字列のリストを返します。さらに、結果の各サブリストには等しい要素のみが含まれます。例えば、</target>
        </trans-unit>
        <trans-unit id="4ee4acaf8e9d95a9f5ef4c31e80b5ce11a67d031" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;data-bytestring#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; 機能は、非オーバーロードされたバージョンである &lt;code&gt;&lt;a href=&quot;data-bytestring#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6e617691064b9b4b87d847163f54ff7d363170a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bytestring#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a ByteString, passing an accumulating parameter from left to right, and returning a final value of this accumulator together with the new list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;data-bytestring#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-bytestring#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; の。ByteStringの各要素に関数を適用し、累積パラメーターを左から右に渡して、このリストの最終値を新しいリストとともに返します。</target>
        </trans-unit>
        <trans-unit id="2ea34718a3c5162fce3eb666e6adf60a8a7d062c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bytestring#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a ByteString, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new ByteString.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;data-bytestring#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-bytestring#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; 。ByteStringの各要素に関数を適用し、累積パラメーターを右から左に渡し、新しいByteStringとともにこのアキュムレーターの最終値を返します。</target>
        </trans-unit>
        <trans-unit id="fd51442d30fe2b55d7fe46723f9d58913d2aa41f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; function transposes the rows and columns of its &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; 機能は、その行と列の転置 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 引数を。</target>
        </trans-unit>
        <trans-unit id="c1aa92f924157b1d391e0c5573f2c097c3b5ec16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-extra#t:BufferWriter&quot;&gt;BufferWriter&lt;/a&gt;&lt;/code&gt; itself is an IO action: you supply it with a buffer (as a pointer and length) and it will write data into the buffer. It returns a number indicating how many bytes were actually written (which can be &lt;code&gt;0&lt;/code&gt;). It also returns a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-extra#t:Next&quot;&gt;Next&lt;/a&gt;&lt;/code&gt; which describes what comes next.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-extra#t:BufferWriter&quot;&gt;BufferWriter&lt;/a&gt;&lt;/code&gt; 自体がIOアクションです：あなたは（ポインタや長さなど）のバッファでそれを供給し、それがバッファにデータを書き込みます。実際に書き込まれたバイト数を示す数値を返します（ &lt;code&gt;0&lt;/code&gt; の場合もあります）。また、 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-extra#t:Next&quot;&gt;Next&lt;/a&gt;&lt;/code&gt; 来るものを説明するNextも返します。</target>
        </trans-unit>
        <trans-unit id="ea2d270840cc8c9daa194a459da571d928cff274" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; denoting a zero-length sequence of bytes. This function is only exported for use in rewriting rules. Use &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; バイトの長さゼロの配列を表します。この関数は、ルールの書き換えで使用するためにのみエクスポートされます。それ以外の場合は &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="77e9d20b09fe3cb5d3e34c82f2d34d8c4d1fbd52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; denoting a zero-length sequence of bytes. This function is only exported for use in rewriting rules. Use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; バイトの長さゼロの配列を表します。この関数は、ルールの書き換えで使用するためにのみエクスポートされます。それ以外の場合は &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; 使用してください。</target>
        </trans-unit>
        <trans-unit id="93dd19fcd92601ecabd679db17cd19a75a81c1a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; denoting a zero-length sequence of bytes. This function is only exported for use in rewriting rules. Use &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; バイトの長さゼロの配列を表します。この関数は、ルールの書き換えで使用するためにのみエクスポートされます。それ以外の場合は &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; 使用してください。</target>
        </trans-unit>
        <trans-unit id="02c6b6ed74cc07d8a8ef6b6a51e39f07fbdde207" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; that always results in the zero-length sequence.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; 常に長さゼロのシーケンスになります。</target>
        </trans-unit>
        <trans-unit id="386c97767c9a0e690099a424827f366fbf618180" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; that always results in the zero-length sequence.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; 常に長さゼロのシーケンスになります。</target>
        </trans-unit>
        <trans-unit id="e4a29465a0ac4c8f6fffb025991665c12b63f1c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:-62--42--60-&quot;&gt;(&amp;gt;*&amp;lt;)&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:-62--36--60-&quot;&gt;(&amp;gt;$&amp;lt;)&lt;/a&gt;&lt;/code&gt; pairing and mapping operators can be used with &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:-62--42--60-&quot;&gt;(&amp;gt;*&amp;lt;)&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:-62--36--60-&quot;&gt;(&amp;gt;$&amp;lt;)&lt;/a&gt;&lt;/code&gt; ペアリングとマッピング演算子を一緒に使用することができます &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cdd16a4104dcd27da4c5d7c015155569458cf5d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; that always results in the zero-length sequence.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; 常に長さゼロのシーケンスになります。</target>
        </trans-unit>
        <trans-unit id="f5ca076d9cd96bbcd373168527623c2c7280cd67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; that always results in the zero-length sequence.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; 常に長さゼロのシーケンスになります。</target>
        </trans-unit>
        <trans-unit id="34fcdbaf6996fe7f65d389f0c0fdfc1f2f89c754" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; function takes a predicate and a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and returns the index of the first element in the ByteString satisfying the predicate.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; の関数は述語とかかり &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 述語を満たすバイト文字列内の最初の要素のインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="2808d77c990696b44b127af7d539f85921526158" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements satisfying the predicate, in ascending order.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; の関数が延び &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; を昇順に、述語を満たすすべての要素のインデックスを返すことによって、。</target>
        </trans-unit>
        <trans-unit id="3b2f3c13460a923ec70902424b286392ebcf4ee2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; function takes a ByteString and returns a list of ByteStrings such that the concatenation of the result is equal to the argument. Moreover, each sublist in the result contains only equal elements. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 機能は、延ByteStringを取り、結果の連結が引数に等しくなるようにバイト文字列のリストを返します。さらに、結果の各サブリストには等しい要素のみが含まれます。例えば、</target>
        </trans-unit>
        <trans-unit id="011ecd68a05489bd1b20ac9d77a9cea0655b8352" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; 機能は、非オーバーロードされたバージョンである &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="72cc5f08d56e30d247f072343ee4d0e1aa87e68f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a ByteString, passing an accumulating parameter from left to right, and returning a final value of this accumulator together with the new list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; の。ByteStringの各要素に関数を適用し、累積パラメーターを左から右に渡して、このリストの最終値を新しいリストとともに返します。</target>
        </trans-unit>
        <trans-unit id="c9e160c9ad7473babd1af40af00cbf0162bdef7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a ByteString, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new ByteString.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; 。ByteStringの各要素に関数を適用し、累積パラメーターを右から左に渡し、新しいByteStringとともにこのアキュムレーターの最終値を返します。</target>
        </trans-unit>
        <trans-unit id="83f55a6f846dc49344b68895528bedee225f9b95" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; function transposes the rows and columns of its &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; 機能は、その行と列の転置 &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 引数を。</target>
        </trans-unit>
        <trans-unit id="cfef4b206c70c32eec3092e778efb683d81d66b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; function is analogous to the &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; function, on words.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; 関数はに似ている &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; 言葉に、機能。</target>
        </trans-unit>
        <trans-unit id="1d758a0f563300419f025322f07bdf29baaf99ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; function takes a predicate and a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and returns the index of the first element in the ByteString satisfying the predicate.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; の関数は述語とかかり &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 述語を満たすバイト文字列内の最初の要素のインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="014ce90607c5489f1d18b6f1c446b9bba5ae0212" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:findIndexEnd&quot;&gt;findIndexEnd&lt;/a&gt;&lt;/code&gt; function takes a predicate and a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and returns the index of the last element in the ByteString satisfying the predicate.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:findIndexEnd&quot;&gt;findIndexEnd&lt;/a&gt;&lt;/code&gt; の関数は述語とかかり &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 述語を満たすバイト文字列の最後の要素のインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="bc3fedbb007a3889a87db49cdfcce211f6dec12f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements satisfying the predicate, in ascending order.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; の関数が延び &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; を昇順に、述語を満たすすべての要素のインデックスを返すことによって、。</target>
        </trans-unit>
        <trans-unit id="11978bfbf1d81f38393dc6440b94501585d47dc3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; function takes a ByteString and returns a list of ByteStrings such that the concatenation of the result is equal to the argument. Moreover, each sublist in the result contains only equal elements. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 機能は、延ByteStringを取り、結果の連結が引数に等しくなるようにバイト文字列のリストを返します。さらに、結果の各サブリストには等しい要素のみが含まれます。例えば、</target>
        </trans-unit>
        <trans-unit id="063223aebad86f89a99e6e89e5807a67aa057281" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; 機能は、非オーバーロードされたバージョンである &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de39eec2cad2fac68f9d8a352ebb2380e3936c42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; function takes a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and `intersperses' that byte between the elements of the &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. It is analogous to the intersperse function on Lists.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; 機能は取り &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; と`散在の要素間のそのバイト &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 。これは、リストの散在関数に類似しています。</target>
        </trans-unit>
        <trans-unit id="6625add11fa1e445312d92a0c6788839896adacf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; function takes a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and `intersperses' that byte between the elements of the &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. It is analogous to the intersperse function on Lists.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; 機能は取り &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; と`散在の要素間のそのバイト &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 。これは、リストの散在関数に類似しています。</target>
        </trans-unit>
        <trans-unit id="ca33e217cddf98a06cc4dd73bac5dae5740289e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; function takes a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and `intersperses' that byte between the elements of the &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. It is analogous to the intersperse function on Lists.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; 機能は取り &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; と`散在の要素間のそのバイト &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 。これは、リストの散在関数に類似しています。</target>
        </trans-unit>
        <trans-unit id="8b89a766d13b74128a8333abb002900f94b6b437" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a ByteString, passing an accumulating parameter from left to right, and returning a final value of this accumulator together with the new ByteString.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; の。ByteStringの各要素に関数を適用し、累積パラメーターを左から右に渡し、新しいByteStringとともにこのアキュムレーターの最終値を返します。</target>
        </trans-unit>
        <trans-unit id="c773ca1b34d782e061cf0d6996806a66376f97f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a ByteString, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new ByteString.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; 。ByteStringの各要素に関数を適用し、累積パラメーターを右から左に渡し、新しいByteStringとともにこのアキュムレーターの最終値を返します。</target>
        </trans-unit>
        <trans-unit id="612dd81abb27b510de3a02ab1ed120cd76a9a6a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; function transposes the rows and columns of its &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; 機能は、その行と列の転置 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 引数を。</target>
        </trans-unit>
        <trans-unit id="b02cc89d4861343dc4906429c0519e1e575b9b01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; function takes a predicate and a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and returns the index of the first element in the ByteString satisfying the predicate.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; の関数は述語とかかり &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 述語を満たすバイト文字列内の最初の要素のインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="89e6612f1c49c256bb1909e6d5ea7235d2f56477" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements satisfying the predicate, in ascending order.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; の関数が延び &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; を昇順に、述語を満たすすべての要素のインデックスを返すことによって、。</target>
        </trans-unit>
        <trans-unit id="0683ca6fb89db86c531b2e317168c1b2a68d2259" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; function takes a ByteString and returns a list of ByteStrings such that the concatenation of the result is equal to the argument. Moreover, each sublist in the result contains only equal elements. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 機能は、延ByteStringを取り、結果の連結が引数に等しくなるようにバイト文字列のリストを返します。さらに、結果の各サブリストには等しい要素のみが含まれます。例えば、</target>
        </trans-unit>
        <trans-unit id="7f63028123ecc27ee69e82bdcdeb63da564a6078" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; 機能は、非オーバーロードされたバージョンである &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e9318a5a01ea45d555a0875fa484d9ff476c3e0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a ByteString, passing an accumulating parameter from left to right, and returning a final value of this accumulator together with the new ByteString.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; の。ByteStringの各要素に関数を適用し、累積パラメーターを左から右に渡し、新しいByteStringとともにこのアキュムレーターの最終値を返します。</target>
        </trans-unit>
        <trans-unit id="e142671c8576be4ab4d32dbd1993a19bfee360ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a ByteString, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new ByteString.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; 。ByteStringの各要素に関数を適用し、累積パラメーターを右から左に渡し、新しいByteStringとともにこのアキュムレーターの最終値を返します。</target>
        </trans-unit>
        <trans-unit id="21e9a6162eb970619d9172486dd0b5106006c4bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; function transposes the rows and columns of its &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; 機能は、その行と列の転置 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 引数を。</target>
        </trans-unit>
        <trans-unit id="981ef85d841145750af6b8e72525229c75f0ae12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; function is analogous to the &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; function, on words.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; 関数はに似ている &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; 言葉に、機能。</target>
        </trans-unit>
        <trans-unit id="70b1e8ad66966b19620f6916e96d89ef82853d69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; class comprehends a fundamental primitive &lt;code&gt;&lt;a href=&quot;data-data#v:gfoldl&quot;&gt;gfoldl&lt;/a&gt;&lt;/code&gt; for folding over constructor applications, say terms. This primitive can be instantiated in several ways to map over the immediate subterms of a term; see the &lt;code&gt;gmap&lt;/code&gt; combinators later in this class. Indeed, a generic programmer does not necessarily need to use the ingenious gfoldl primitive but rather the intuitive &lt;code&gt;gmap&lt;/code&gt; combinators. The &lt;code&gt;&lt;a href=&quot;data-data#v:gfoldl&quot;&gt;gfoldl&lt;/a&gt;&lt;/code&gt; primitive is completed by means to query top-level constructors, to turn constructor representations into proper terms, and to list all possible datatype constructors. This completion allows us to serve generic programming scenarios like read, show, equality, term generation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; クラスは、基本的なプリミティブ把握 &lt;code&gt;&lt;a href=&quot;data-data#v:gfoldl&quot;&gt;gfoldl&lt;/a&gt;&lt;/code&gt; コンストラクタアプリケーション折り返すために、用語は言います。このプリミティブをいくつかの方法でインスタンス化して、用語の直接のサブ用語をマッピングできます。このクラスの後半の &lt;code&gt;gmap&lt;/code&gt; コンビネーターを参照してください。実際、一般的なプログラマーは、独創的なgfoldlプリミティブを必ずしも使用する必要はなく、直感的な &lt;code&gt;gmap&lt;/code&gt; コンビネーターを使用する必要があります。 &lt;code&gt;&lt;a href=&quot;data-data#v:gfoldl&quot;&gt;gfoldl&lt;/a&gt;&lt;/code&gt; プリミティブは、適切な用語にコンストラクタ表現をオンにすると、すべての可能なデータ型のコンストラクタを一覧表示するには、クエリトップレベルのコンストラクタへの手段によって完成されます。この完成により、読み取り、表示、平等、用語生成などの一般的なプログラミングシナリオに対応できます。</target>
        </trans-unit>
        <trans-unit id="2a4e313748880e797d1bcb646d76cb8547d19d57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; type is sometimes used to represent a value which is either correct or an error; by convention, the &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; constructor is used to hold an error value and the &lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; constructor is used to hold a correct value (mnemonic: &quot;right&quot; also means &quot;correct&quot;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; タイプは、しばしば正しいかエラーのいずれかである値を表すために使用されます。慣例により、 &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; コンストラクターはエラー値を保持するために使用され、 &lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; コンストラクターは正しい値を保持するために使用されます（覚え方：「右」は「正しい」も意味します）。</target>
        </trans-unit>
        <trans-unit id="f0e4baff05206c672300bb2b38395a9530159b34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; type represents values with two possibilities: a value of type &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt; a b&lt;/code&gt; is either &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt; a&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt; b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; タイプは、二つの可能性と値を表す：種類の値 &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt; a b&lt;/code&gt; いずれかである &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt; a&lt;/code&gt; 又は &lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt; b&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1c8bc066a25dbdc9345dc643976410a0121b2ada" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; class defines equality (&lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt;) and inequality (&lt;code&gt;&lt;a href=&quot;data-eq#v:-47--61-&quot;&gt;/=&lt;/a&gt;&lt;/code&gt;). All the basic datatypes exported by the &lt;a href=&quot;prelude&quot;&gt;Prelude&lt;/a&gt; are instances of &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; may be derived for any datatype whose constituents are also instances of &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; クラス定義の等価（ &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; ）及び式（ &lt;code&gt;&lt;a href=&quot;data-eq#v:-47--61-&quot;&gt;/=&lt;/a&gt;&lt;/code&gt; ）。&lt;a href=&quot;prelude&quot;&gt;Prelude&lt;/a&gt;によってエクスポートされるすべての基本的なデータ型は &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; のインスタンスであり、 &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; は、構成要素も &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; のインスタンスである任意のデータ型から導出できます。</target>
        </trans-unit>
        <trans-unit id="69af3900bc4a32d170db2d927f8de7596335e0e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-foldable#t:Foldable&quot;&gt;Foldable&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-traversable#t:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; instances traverse the real part first.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-foldable#t:Foldable&quot;&gt;Foldable&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-traversable#t:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; のインスタンスは、最初の実数部を横断します。</target>
        </trans-unit>
        <trans-unit id="5eff372cb874b6edeef6ee4a0a04355990bb5ac2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-foldable#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; function takes a predicate and a structure and returns the leftmost element of the structure matching the predicate, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-foldable#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; 機能は、述語と構造をとり、述語に一致する構造、又は左端の要素を返し &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; そのような要素が存在しない場合。</target>
        </trans-unit>
        <trans-unit id="1b7c06198a94e0e0bdce1efceb1fa1157608eeea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldMap&quot;&gt;foldMap&lt;/a&gt;&lt;/code&gt;` method is a special case of &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;`, in which the initial accumulator is &lt;code&gt;&lt;a href=&quot;data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; and the operator is &lt;code&gt;mappend . f&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; maps each input element into the &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; in question. Therefore, &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldMap&quot;&gt;foldMap&lt;/a&gt;&lt;/code&gt;` is an appropriate choice under essentially the same conditions as &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;`, and its implementation for a given &lt;code&gt;Foldable&lt;/code&gt; structure should also be a strict left-associative reduction.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-foldable#v:foldMap&quot;&gt;foldMap&lt;/a&gt;&lt;/code&gt; `方法は、特殊なケースである &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; の初期アキュムレータがである`、 &lt;code&gt;&lt;a href=&quot;data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; オペレータがある &lt;code&gt;mappend . f&lt;/code&gt; 、ここで &lt;code&gt;f&lt;/code&gt; は、各入力要素を問題の &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; にマップします。したがって、 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldMap&quot;&gt;foldMap&lt;/a&gt;&lt;/code&gt; は`と本質的に同じ条件下で適切な選択である &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; の`、および所与のためにその実装 &lt;code&gt;Foldable&lt;/code&gt; 構造も厳密左連想減少であるべきです。</target>
        </trans-unit>
        <trans-unit id="40cadb370f92894eea0177fbad74525b49368dd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-foldable#v:mapM_&quot;&gt;mapM_&lt;/a&gt;&lt;/code&gt; form works verbatim if the type of &lt;strong&gt;&lt;code&gt;mvalue&lt;/code&gt;&lt;/strong&gt; is later refactored from &lt;strong&gt;&lt;code&gt;Maybe a&lt;/code&gt;&lt;/strong&gt; to &lt;strong&gt;&lt;code&gt;Either e a&lt;/code&gt;&lt;/strong&gt; (assuming it remains OK to silently do nothing in the error case).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-foldable#v:mapM_&quot;&gt;mapM_&lt;/a&gt;&lt;/code&gt; のタイプの場合、フォームはそのまま動作します&lt;strong&gt; &lt;code&gt;mvalue&lt;/code&gt; が&lt;/strong&gt;、後からリファクタリングされる&lt;strong&gt; &lt;code&gt;Maybe a&lt;/code&gt; &lt;/strong&gt;の&lt;strong&gt; &lt;code&gt;Either e a&lt;/code&gt; &lt;/strong&gt;（静かにエラーのない場合、何もしないように、それはOKのままと仮定します）。</target>
        </trans-unit>
        <trans-unit id="168798718c8d67f564d095b7f2c27b1f23db19a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-foldable#v:product&quot;&gt;product&lt;/a&gt;&lt;/code&gt; function computes the product of the numbers of a structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-foldable#v:product&quot;&gt;product&lt;/a&gt;&lt;/code&gt; 機能は、構造体の数との積を計算します。</target>
        </trans-unit>
        <trans-unit id="7cca4119f8a53ddfe67d87125c91cc29b78f8689" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-foldable#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; function computes the sum of the numbers of a structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-foldable#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; 関数は、構造体の数の和を計算します。</target>
        </trans-unit>
        <trans-unit id="4e16e1b415ac8aa1d79a0e8941de4b3fd089e939" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; base class means that the container cannot impose any constraints on the element type, so containers that require elements to be comparable, or hashable, etc., cannot be instances of the &lt;code&gt;Traversable&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; 等、匹敵する、またはハッシュ可能であることの要素を必要とする容器は、のインスタンスできないように容器は、要素型に制約を課すことができないことを基本クラス手段 &lt;code&gt;Traversable&lt;/code&gt; のクラス。</target>
        </trans-unit>
        <trans-unit id="f9699a12c867a28d982d3293073c01ca1c9af29d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; from our &lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; instance will ignore &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; values, but will apply the supplied function to values contained in a &lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; インスタンスの &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; 値を無視しますが、指定された関数を &lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; に含まれる値に適用します：</target>
        </trans-unit>
        <trans-unit id="b77100b25e8a5a0820122925237280bb25f1620c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; function is also available as the infix operator &lt;code&gt;&lt;a href=&quot;data-functor#v:-60--36--62-&quot;&gt;&amp;lt;$&amp;gt;&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; 機能は、中置演算子としても使用可能です &lt;code&gt;&lt;a href=&quot;data-functor#v:-60--36--62-&quot;&gt;&amp;lt;$&amp;gt;&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="75d054c2f2cab23d848c32214fa7c03446c931b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-functor-const#t:Const&quot;&gt;Const&lt;/a&gt;&lt;/code&gt; functor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-functor-const#t:Const&quot;&gt;Const&lt;/a&gt;&lt;/code&gt; ファンクタ。</target>
        </trans-unit>
        <trans-unit id="91affd44c758dc656c5a465b34202e2474e6eec1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-graph#t:Graph&quot;&gt;Graph&lt;/a&gt;&lt;/code&gt; type is an adjacency list representation of a finite, directed graph with vertices of type &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-graph#t:Graph&quot;&gt;Graph&lt;/a&gt;&lt;/code&gt; タイプは有限の隣接リスト表現型の頂点を有する有向グラフで &lt;code&gt;Int&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="da965f8602a83550c13d9322bdab8f201adad863" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-graph#t:SCC&quot;&gt;SCC&lt;/a&gt;&lt;/code&gt; type represents a &lt;a href=&quot;https://en.wikipedia.org/wiki/Strongly_connected_component&quot;&gt;strongly-connected component&lt;/a&gt; of a graph.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-graph#t:SCC&quot;&gt;SCC&lt;/a&gt;&lt;/code&gt; のタイプが表す&lt;a href=&quot;https://en.wikipedia.org/wiki/Strongly_connected_component&quot;&gt;強連結成分&lt;/a&gt;グラフを。</target>
        </trans-unit>
        <trans-unit id="b13b673bb0340c3f60ad133cedd86aba2eebb7ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; argument specifies a &lt;em&gt;capability number&lt;/em&gt; (see &lt;code&gt;&lt;a href=&quot;control-concurrent#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt;). Typically capabilities correspond to physical processors, but the exact behaviour is implementation-dependent. The value passed to &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; is interpreted modulo the total number of capabilities as returned by &lt;code&gt;&lt;a href=&quot;control-concurrent#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; の引数が指定する&lt;em&gt;機能番号を&lt;/em&gt;（参照 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt; を）。通常、機能は物理プロセッサに対応しますが、正確な動作は実装に依存します。 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; に渡される値は、getNumCapabilitiesによって返される機能の総数を法として解釈され &lt;code&gt;&lt;a href=&quot;control-concurrent#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5f78d4fb8fef90bc420e0f272097151354016eb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; argument specifies a &lt;em&gt;capability number&lt;/em&gt; (see &lt;code&gt;&lt;a href=&quot;ghc-conc#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt;). Typically capabilities correspond to physical processors, but the exact behaviour is implementation-dependent. The value passed to &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; is interpreted modulo the total number of capabilities as returned by &lt;code&gt;&lt;a href=&quot;ghc-conc#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; の引数が指定する&lt;em&gt;機能番号を&lt;/em&gt;（参照 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt; を）。通常、機能は物理プロセッサに対応しますが、正確な動作は実装に依存します。 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; に渡される値は、getNumCapabilitiesによって返される機能の総数を法として解釈され &lt;code&gt;&lt;a href=&quot;ghc-conc#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="990e9e27ae850a84a5975a64be27bfdd1b9f5808" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; argument specifies a &lt;em&gt;capability number&lt;/em&gt; (see &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt;). Typically capabilities correspond to physical processors, but the exact behaviour is implementation-dependent. The value passed to &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; is interpreted modulo the total number of capabilities as returned by &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; の引数が指定する&lt;em&gt;機能番号を&lt;/em&gt;（参照 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt; を）。通常、機能は物理プロセッサに対応しますが、正確な動作は実装に依存します。 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; に渡される値は、getNumCapabilitiesによって返される機能の総数を法として解釈され &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="26c55fb3d34eb375b02ebba32fb7b2dd27c91fb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#t:IntMap&quot;&gt;IntMap&lt;/a&gt; v&lt;/code&gt; type represents a finite map (sometimes called a dictionary) from keys of type &lt;code&gt;Int&lt;/code&gt; to values of type &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#t:IntMap&quot;&gt;IntMap&lt;/a&gt; v&lt;/code&gt; 型は、型のキーから（時には辞書と呼ばれる）有限マップを表し &lt;code&gt;Int&lt;/code&gt; 型の値に &lt;code&gt;v&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9babf39e61d88f08afacef329c45b58b748886e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; functions are shared by the lazy and strict modules. Only the choice of merge tactics determines strictness. If you use &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;data-map-merge-strict&quot;&gt;Data.Map.Merge.Strict&lt;/a&gt; then the results will be forced before they are inserted. If you use &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; from this module then they will not.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; 機能は遅延と厳格なモジュールによって共有されています。マージ戦術の選択だけが厳密さを決定します。あなたが使用している場合は &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; から&lt;a href=&quot;data-map-merge-strict&quot;&gt;Data.Map.Merge.Strictを&lt;/a&gt;、それらが挿入される前に、結果が強制されます。このモジュールから &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; を使用すると、使用されなくなります。</target>
        </trans-unit>
        <trans-unit id="918fcfe1bbabd9b098a3357af6b4c10845874e4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; functions are shared by the lazy and strict modules. Only the choice of merge tactics determines strictness. If you use &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; from this module then the results will be forced before they are inserted. If you use &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;data-map-merge-lazy&quot;&gt;Data.Map.Merge.Lazy&lt;/a&gt; then they will not.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; 機能は遅延と厳格なモジュールによって共有されています。マージ戦術の選択だけが厳密さを決定します。このモジュールから &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; を使用すると、結果は挿入される前に強制されます。あなたが使用している場合は &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; から&lt;a href=&quot;data-map-merge-lazy&quot;&gt;Data.Map.Merge.Lazyを&lt;/a&gt;、彼らはしません。</target>
        </trans-unit>
        <trans-unit id="7e82dc1c0b8d264abe9b7b565b8cd539e1dbf5c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt; v&lt;/code&gt; type represents a finite map (sometimes called a dictionary) from key of type &lt;code&gt;Int&lt;/code&gt; to values of type &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt; v&lt;/code&gt; 型は、型のキーから（時には辞書と呼ばれる）有限マップを表し &lt;code&gt;Int&lt;/code&gt; 型の値に &lt;code&gt;v&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1641ed0171bfd491e6f0e6638191a7945a81dba8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; type is shared between the lazy and strict modules, meaning that the same &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; value can be passed to functions in both modules. This means that the &lt;code&gt;Functor&lt;/code&gt;, &lt;code&gt;Traversable&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances are the same as for the &lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt; module, so if they are used the resulting map may contain suspended values (thunks).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; のタイプは同じことを意味し、遅延と厳格なモジュール間で共有される &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; の値は、両方のモジュール内の関数に渡すことができます。つまり、 &lt;code&gt;Functor&lt;/code&gt; 、 &lt;code&gt;Traversable&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; インスタンスは&lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt;モジュールの場合と同じであるため、これらを使用すると、結果のマップに中断された値（サンク）が含まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="5d01cac285dd99db980e4e71910e5f17ef1269f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; type is shared between the lazy and strict modules, meaning that the same &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; value can be passed to functions in both modules. This means that the &lt;code&gt;Functor&lt;/code&gt;, &lt;code&gt;Traversable&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances are the same as for the &lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt; module, so if they are used the resulting map may contain suspended values (thunks).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; のタイプは同じことを意味し、遅延と厳格なモジュール間で共有される &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; の値は、両方のモジュール内の関数に渡すことができます。つまり、 &lt;code&gt;Functor&lt;/code&gt; 、 &lt;code&gt;Traversable&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; インスタンスは&lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt;モジュールの場合と同じであるため、これらを使用すると、結果のマップに中断された値（サンク）が含まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="de110598e79367090ddf9a9502e16c3db920c1a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; type is shared between the lazy and strict modules, meaning that the same &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; value can be passed to functions in both modules. This means that the &lt;code&gt;Functor&lt;/code&gt;, &lt;code&gt;Traversable&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances are the same as for the &lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt; module, so if they are used the resulting map may contain suspended values (thunks).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; のタイプは同じことを意味し、遅延と厳格なモジュール間で共有される &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; の値は、両方のモジュール内の関数に渡すことができます。つまり、 &lt;code&gt;Functor&lt;/code&gt; 、 &lt;code&gt;Traversable&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; インスタンスは&lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt;モジュールの場合と同じであるため、これらを使用すると、結果のマップに中断された値（サンク）が含まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="ca6e272f4b13fc32e4e87c18c5a09335a1d8e5ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt; v&lt;/code&gt; type represents a finite map (sometimes called a dictionary) from key of type &lt;code&gt;Int&lt;/code&gt; to values of type &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt; v&lt;/code&gt; 型は、型のキーから（時には辞書と呼ばれる）有限マップを表し &lt;code&gt;Int&lt;/code&gt; 型の値に &lt;code&gt;v&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="318814e0b6ddaa927c58b1267d22b77390f5ece2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; type is shared between the lazy and strict modules, meaning that the same &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; value can be passed to functions in both modules. This means that the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#t:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances are the same as for the &lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt; module, so if they are used the resulting map may contain suspended values (thunks).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; のタイプは同じことを意味し、遅延と厳格なモジュール間で共有される &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; の値は、両方のモジュール内の関数に渡すことができます。つまり、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#t:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; インスタンスは&lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt;モジュールの場合と同じであるため、これらを使用すると、結果のマップに中断された値（サンク）が含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="352aafc40cb132717ac79f053c1b34a159a6c7a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; type is shared between the lazy and strict modules, meaning that the same &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; value can be passed to functions in both modules. This means that the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#t:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances are the same as for the &lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt; module, so if they are used the resulting map may contain suspended values (thunks).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; のタイプは同じことを意味し、遅延と厳格なモジュール間で共有される &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; の値は、両方のモジュール内の関数に渡すことができます。つまり、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#t:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; インスタンスは&lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt;モジュールの場合と同じであるため、これらを使用すると、結果のマップに中断された値（サンク）が含まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="4df8970586f0c961dd4f430a41d51d650439ca67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; type is shared between the lazy and strict modules, meaning that the same &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; value can be passed to functions in both modules. This means that the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-traversable#t:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances are the same as for the &lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt; module, so if they are used the resulting map may contain suspended values (thunks).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; のタイプは同じことを意味し、遅延と厳格なモジュール間で共有される &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; の値は、両方のモジュール内の関数に渡すことができます。つまり、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-traversable#t:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; インスタンスは&lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt;モジュールの場合と同じであるため、これらを使用すると、結果のマップに中断された値（サンク）が含まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="89f7bb2231b7f0bb854265a80968d382d2ee4a72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intset#t:IntSet&quot;&gt;IntSet&lt;/a&gt;&lt;/code&gt; type represents a set of elements of type &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intset#t:IntSet&quot;&gt;IntSet&lt;/a&gt;&lt;/code&gt; タイプはタイプの要素の集合を表し &lt;code&gt;Int&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="235975fc327cbd37e2885a32990dd1d50e6ef2a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; class is used to map a contiguous subrange of values in a type onto integers. It is used primarily for array indexing (see the array package).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; クラスは整数上のタイプの値の連続した部分範囲をマッピングするために使用されます。これは主に配列のインデックス付けに使用されます（arrayパッケージを参照）。</target>
        </trans-unit>
        <trans-unit id="213033fe7d1bfa8957877f18a3b95df927b829f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; class is used to map a contiguous subrange of values in type onto integers. It is used primarily for array indexing (see the array package). &lt;code&gt;&lt;a href=&quot;data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; uses row-major order.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; クラスは整数上のタイプの値の連続した部分範囲をマッピングするために使用されます。これは主に配列のインデックス付けに使用されます（arrayパッケージを参照）。 &lt;code&gt;&lt;a href=&quot;data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; は行優先順を使用します。</target>
        </trans-unit>
        <trans-unit id="1c9726b499ba205a67e8661afa56b3f5e6610bf8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:-92--92-&quot;&gt;\\&lt;/a&gt;&lt;/code&gt; function is list difference (non-associative). In the result of &lt;code&gt;xs&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;data-list#v:-92--92-&quot;&gt;\\&lt;/a&gt;&lt;/code&gt;&lt;code&gt;ys&lt;/code&gt;, the first occurrence of each element of &lt;code&gt;ys&lt;/code&gt; in turn (if any) has been removed from &lt;code&gt;xs&lt;/code&gt;. Thus</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:-92--92-&quot;&gt;\\&lt;/a&gt;&lt;/code&gt; 関数は、リストの違い（非結合）です。 &lt;code&gt;xs&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;data-list#v:-92--92-&quot;&gt;\\&lt;/a&gt;&lt;/code&gt; &lt;code&gt;ys&lt;/code&gt; の結果では、 &lt;code&gt;ys&lt;/code&gt; の各要素の最初の出現（存在する場合）が &lt;code&gt;xs&lt;/code&gt; から削除されています。したがって</target>
        </trans-unit>
        <trans-unit id="d02a0fb924a1fb516ed51240226d0d6e5d964fd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:deleteFirstsBy&quot;&gt;deleteFirstsBy&lt;/a&gt;&lt;/code&gt; function takes a predicate and two lists and returns the first list with the first occurrence of each element of the second list removed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:deleteFirstsBy&quot;&gt;deleteFirstsBy&lt;/a&gt;&lt;/code&gt; の関数は述語と二つのリストを取り、除去第二のリストの各要素の最初の発生と最初のリストを返します。</target>
        </trans-unit>
        <trans-unit id="0d81ce03e6c4879c98e79164e27980ccd4245607" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:dropWhileEnd&quot;&gt;dropWhileEnd&lt;/a&gt;&lt;/code&gt; function drops the largest suffix of a list in which the given predicate holds for all elements. For example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:dropWhileEnd&quot;&gt;dropWhileEnd&lt;/a&gt;&lt;/code&gt; の機能は、与えられた述語がすべての要素のために保持しているリストの最大の接尾辞を削除します。例えば：</target>
        </trans-unit>
        <trans-unit id="8e6ebb6facf4e5e8507546d0730cd3d8aaa7cdbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; function returns the index of the first element in the given list which is equal (by &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt;) to the query element, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; の関数は、（によって等しく与えられたリストの最初の要素のインデックスを返し &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; クエリ要素に）、または &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; そのような要素が存在しない場合に。</target>
        </trans-unit>
        <trans-unit id="35376b9066c242bc547e361977a97acd67654b38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:elemIndices&quot;&gt;elemIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;data-list#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements equal to the query element, in ascending order.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:elemIndices&quot;&gt;elemIndices&lt;/a&gt;&lt;/code&gt; の関数が延び &lt;code&gt;&lt;a href=&quot;data-list#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; を昇順に、全ての要素のインデックスは、クエリ要素に等しい戻すことによって、。</target>
        </trans-unit>
        <trans-unit id="777c2200547e9739ba52a7633b954736b9823c38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; function is just &lt;code&gt;&lt;a href=&quot;control-monad#v:mfilter&quot;&gt;mfilter&lt;/a&gt;&lt;/code&gt; specialized to the list monad:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; 機能は、ちょうどされ &lt;code&gt;&lt;a href=&quot;control-monad#v:mfilter&quot;&gt;mfilter&lt;/a&gt;&lt;/code&gt; リストモナドに特化しました：</target>
        </trans-unit>
        <trans-unit id="a5d8b6f3eaba5030a68bf5d06e480657d33033a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; function takes a predicate and a structure and returns the leftmost element of the structure matching the predicate, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; 機能は、述語と構造をとり、述語に一致する構造、又は左端の要素を返し &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; そのような要素が存在しない場合。</target>
        </trans-unit>
        <trans-unit id="75b2422f251ce2039aaef3829d2dd5ca0ff38fd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; function takes a predicate and a list and returns the index of the first element in the list satisfying the predicate, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; の関数は述語とリストを取り、述語を満たすリストの最初の要素のインデックスを返すか、または &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; そのような要素が存在しない場合。</target>
        </trans-unit>
        <trans-unit id="9ea9c7c9c9ab7b6e747e9ebc107dbbfddd67c972" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;data-list#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements satisfying the predicate, in ascending order.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; の関数が延び &lt;code&gt;&lt;a href=&quot;data-list#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; を昇順に、述語を満たすすべての要素のインデックスを返すことによって、。</target>
        </trans-unit>
        <trans-unit id="be32822442735a04d54fa68d012d24ba5b89a668" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:genericDrop&quot;&gt;genericDrop&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;data-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the number of elements to drop.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:genericDrop&quot;&gt;genericDrop&lt;/a&gt;&lt;/code&gt; の機能は、オーバーロードされたバージョンである &lt;code&gt;&lt;a href=&quot;data-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; 任意受け付け、 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 削除する要素の数として値。</target>
        </trans-unit>
        <trans-unit id="2812d742b2328d1abd314aebeef9aa75d01e9698" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:genericIndex&quot;&gt;genericIndex&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;data-list#v:-33--33-&quot;&gt;!!&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the index.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:genericIndex&quot;&gt;genericIndex&lt;/a&gt;&lt;/code&gt; の機能はのオーバーロードバージョンです &lt;code&gt;&lt;a href=&quot;data-list#v:-33--33-&quot;&gt;!!&lt;/a&gt;&lt;/code&gt; 、任意の &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 値をインデックスとして受け入れます。</target>
        </trans-unit>
        <trans-unit id="737fc86009d880ef7008902e996d5561992367bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;data-list#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the number of repetitions to make.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt; の機能は、オーバーロードされたバージョンである &lt;code&gt;&lt;a href=&quot;data-list#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt; 任意受け付け、 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 繰り返し回数を作るように値。</target>
        </trans-unit>
        <trans-unit id="3402cafa3322e6ce9bc65e493a0acf1f2884672d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:genericSplitAt&quot;&gt;genericSplitAt&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;data-list#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the position at which to split.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:genericSplitAt&quot;&gt;genericSplitAt&lt;/a&gt;&lt;/code&gt; の機能は、オーバーロードされたバージョンである &lt;code&gt;&lt;a href=&quot;data-list#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; 任意受け付け、 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 分割する位置として値。</target>
        </trans-unit>
        <trans-unit id="f78c90a57d5cce824e07db93d2197f95aa21a155" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:genericTake&quot;&gt;genericTake&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;data-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the number of elements to take.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:genericTake&quot;&gt;genericTake&lt;/a&gt;&lt;/code&gt; の機能は、オーバーロードされたバージョンである &lt;code&gt;&lt;a href=&quot;data-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; 任意受け付け、 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 取るための要素の数として値。</target>
        </trans-unit>
        <trans-unit id="ca4d378c787c5b9b2a06ae77c402a921da5aae20" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; function takes a list and returns a list of lists such that the concatenation of the result is equal to the argument. Moreover, each sublist in the result contains only equal elements. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 機能は、リストを取り、結果の連結が引数に等しくなるようにリストのリストを返します。さらに、結果の各サブリストには等しい要素のみが含まれます。例えば、</target>
        </trans-unit>
        <trans-unit id="b33d3992fa75b8c5a7295f072191cef6471b5d58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;data-list#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; 機能は、非オーバーロードされたバージョンである &lt;code&gt;&lt;a href=&quot;data-list#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a2aa0c2fff9d0cd85f48ee4e5c547b1e24beae0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:inits&quot;&gt;inits&lt;/a&gt;&lt;/code&gt; function returns all initial segments of the argument, shortest first. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:inits&quot;&gt;inits&lt;/a&gt;&lt;/code&gt; 戻り引数の全ての初期セグメントを、最短の最初の機能します。例えば、</target>
        </trans-unit>
        <trans-unit id="e70f04ea60546783e780339c103b21d6a6b67467" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:intersect&quot;&gt;intersect&lt;/a&gt;&lt;/code&gt; function takes the list intersection of two lists. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:intersect&quot;&gt;intersect&lt;/a&gt;&lt;/code&gt; 機能は、二つのリストのリストの交差点を取ります。例えば、</target>
        </trans-unit>
        <trans-unit id="a6dc46001b61fa48ad57e1c564b945db378bd949" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:intersectBy&quot;&gt;intersectBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;data-list#v:intersect&quot;&gt;intersect&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:intersectBy&quot;&gt;intersectBy&lt;/a&gt;&lt;/code&gt; の機能は、非オーバーロードされたバージョンである &lt;code&gt;&lt;a href=&quot;data-list#v:intersect&quot;&gt;intersect&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1446aaefcfea8557eabaae6ea889f9011ff1bbe3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:isInfixOf&quot;&gt;isInfixOf&lt;/a&gt;&lt;/code&gt; function takes two lists and returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first list is contained, wholly and intact, anywhere within the second.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:isInfixOf&quot;&gt;isInfixOf&lt;/a&gt;&lt;/code&gt; の機能は二つのリストを返すとり &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; のどこ秒以内に、完全に無傷の、含まれている最初のリストIFFを。</target>
        </trans-unit>
        <trans-unit id="8577e2ac2954a5de0cd6238c09ea92a58c9fb7f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:isSubsequenceOf&quot;&gt;isSubsequenceOf&lt;/a&gt;&lt;/code&gt; function takes two lists and returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if all the elements of the first list occur, in order, in the second. The elements do not have to occur consecutively.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:isSubsequenceOf&quot;&gt;isSubsequenceOf&lt;/a&gt;&lt;/code&gt; の関数は二つのリストを受け取り、返す &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 最初のリストの要素が発生するすべての場合に、第2に、順番に、。要素は連続して発生する必要はありません。</target>
        </trans-unit>
        <trans-unit id="4a40ec49296ced12343a8fd18ca5c49b63aabe04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; function takes two lists and returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first list is a suffix of the second. The second list must be finite.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; の関数は二つのリストを受け取り、返す &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 最初のリストは、第二の接尾辞である場合に限っ。2番目のリストは有限でなければなりません。</target>
        </trans-unit>
        <trans-unit id="1b34469353a0b037b47cce6d230cb4cb71110874" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a structure, passing an accumulating parameter from left to right, and returning a final value of this accumulator together with the new structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; の。構造体の各要素に関数を適用し、累積パラメーターを左から右に渡し、新しい構造体とともにこのアキュムレーターの最終値を返します。</target>
        </trans-unit>
        <trans-unit id="8dd53e15a4486e163e923e5edcb16e98edcfede4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a structure, passing an accumulating parameter from left to right, and returning a final value of this accumulator together with the new structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; の。構造体の各要素に関数を適用し、アキュムレータパラメータを左から右に渡し、このアキュムレータの最終値を新しい構造体と一緒に返します。</target>
        </trans-unit>
        <trans-unit id="b6ebf56806d59584f196cd5d11b8904d0639b1d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a structure, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; 。構造体の各要素に関数を適用し、累積パラメーターを右から左に渡し、このアキュムレーターの最終値を新しい構造体とともに返します。</target>
        </trans-unit>
        <trans-unit id="58255312061a37b729a440f59df1d47f433cf4a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a structure, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; 。構造体の各要素に関数を適用し、アキュムレータパラメータを右から左に渡し、このアキュムレータの最終値を新しい構造体と一緒に返します。</target>
        </trans-unit>
        <trans-unit id="7eb6f6e78bb431c6ad213eb9d21c75fa95dc7ddf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:nubBy&quot;&gt;nubBy&lt;/a&gt;&lt;/code&gt; function behaves just like &lt;code&gt;&lt;a href=&quot;data-list#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt;, except it uses a user-supplied equality predicate instead of the overloaded &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:nubBy&quot;&gt;nubBy&lt;/a&gt;&lt;/code&gt; の機能は、ちょうど同じように動作し &lt;code&gt;&lt;a href=&quot;data-list#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; ではなく、オーバーロードのユーザ供給等価述語使用する以外、 &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; 機能を。</target>
        </trans-unit>
        <trans-unit id="fc7232b1ebffbebb739ba096d41e32596b9eedb1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; function takes a predicate a list and returns the pair of lists of elements which do and do not satisfy the predicate, respectively; i.e.,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; 関数は、リスト述語を取り、行うと、それぞれの述語を満たさない要素のリストのペアを返します。つまり、</target>
        </trans-unit>
        <trans-unit id="2b6ed649212daaa5b7d86c6ccef6bf66b085c1db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:permutations&quot;&gt;permutations&lt;/a&gt;&lt;/code&gt; function returns the list of all permutations of the argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:permutations&quot;&gt;permutations&lt;/a&gt;&lt;/code&gt; 関数は、引数のすべての順列のリストを返します。</target>
        </trans-unit>
        <trans-unit id="2f287658e3d55e31f32fe140091016332ce08537" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:product&quot;&gt;product&lt;/a&gt;&lt;/code&gt; function computes the product of the numbers of a structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:product&quot;&gt;product&lt;/a&gt;&lt;/code&gt; 機能は、構造体の数との積を計算します。</target>
        </trans-unit>
        <trans-unit id="a463a93b298d3088c6a486752b752d20e4b0de19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; function implements a stable sorting algorithm. It is a special case of &lt;code&gt;&lt;a href=&quot;data-list#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own comparison function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; 機能は、ソートアルゴリズムの安定を実現しています。これは &lt;code&gt;&lt;a href=&quot;data-list#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt; の特殊なケースで、プログラマーが独自の比較関数を提供できるようにします。</target>
        </trans-unit>
        <trans-unit id="095b73e07b36153b051dcf74ac3cefd56274581f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;data-list#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt; 機能は、非オーバーロードされたバージョンで &lt;code&gt;&lt;a href=&quot;data-list#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b88e9d47462c1b9615bcd7d7acc05eba51c65b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:subsequences&quot;&gt;subsequences&lt;/a&gt;&lt;/code&gt; function returns the list of all subsequences of the argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:subsequences&quot;&gt;subsequences&lt;/a&gt;&lt;/code&gt; 関数は、引数のすべてのサブシーケンスのリストを返します。</target>
        </trans-unit>
        <trans-unit id="eff98324d1a84c781b046e919d0b375a374d6a43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; function computes the sum of the numbers of a structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; 関数は、構造体の数の和を計算します。</target>
        </trans-unit>
        <trans-unit id="ac33ccd64dfa538162e29b5368275ac3dcab2e9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; function transposes the rows and columns of its argument. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; 関数は引数の行と列を転置します。例えば、</target>
        </trans-unit>
        <trans-unit id="21074974ba0da203fdbe3139596e6c3eb82eacd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; function is a `dual' to &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;: while &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; reduces a list to a summary value, &lt;code&gt;&lt;a href=&quot;data-list#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; builds a list from a seed value. The function takes the element and returns &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if it is done producing the list or returns &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;&lt;code&gt;(a,b)&lt;/code&gt;, in which case, &lt;code&gt;a&lt;/code&gt; is a prepended to the list and &lt;code&gt;b&lt;/code&gt; is used as the next element in a recursive call. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; 機能はする「`デュアルある &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; ：ながら、 &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; は要約値にリストを減らし、 &lt;code&gt;&lt;a href=&quot;data-list#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; はシード値からリストを作成します。関数は要素を受け取り、リストの生成が完了した場合は &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を返すか &lt;code&gt;(a,b)&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; （a、b）を返します。この場合、 &lt;code&gt;a&lt;/code&gt; はリストの先頭に付加され、 &lt;code&gt;b&lt;/code&gt; は再帰呼び出しの次の要素として使用されます。例えば、</target>
        </trans-unit>
        <trans-unit id="6f5fe84f2f6e359d0b958ffdfd50c5ad6c942d08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; function returns the list union of the two lists. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; 機能は、二つのリストのリストの和集合を返します。例えば、</target>
        </trans-unit>
        <trans-unit id="26aa6f38df9eac11f0ca7ea5149a65e6f035439a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:unionBy&quot;&gt;unionBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;data-list#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:unionBy&quot;&gt;unionBy&lt;/a&gt;&lt;/code&gt; の機能は、非オーバーロードされたバージョンである &lt;code&gt;&lt;a href=&quot;data-list#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3512932a90bda2966b9c4bde2bc99fdaee65977a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:unzip3&quot;&gt;unzip3&lt;/a&gt;&lt;/code&gt; function takes a list of triples and returns three lists, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:unzip3&quot;&gt;unzip3&lt;/a&gt;&lt;/code&gt; 機能はに類似した、トリプルとリターン3つのリストのリストを取り &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="465b134f0e0674fc306964e8911a4c8f5a23b544" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:unzip4&quot;&gt;unzip4&lt;/a&gt;&lt;/code&gt; function takes a list of quadruples and returns four lists, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:unzip4&quot;&gt;unzip4&lt;/a&gt;&lt;/code&gt; 機能はに類似し、四倍とリターン4つのリストのリストを取り &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eab7f028c5e43e9c371d7627b6af73045109e75d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:unzip5&quot;&gt;unzip5&lt;/a&gt;&lt;/code&gt; function takes a list of five-tuples and returns five lists, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:unzip5&quot;&gt;unzip5&lt;/a&gt;&lt;/code&gt; 機能はに類似し、5タプルとリターン5つのリストのリストを受け取り &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6934051d9d7b99ca14d42b993760a93edf9a7566" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:unzip6&quot;&gt;unzip6&lt;/a&gt;&lt;/code&gt; function takes a list of six-tuples and returns six lists, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:unzip6&quot;&gt;unzip6&lt;/a&gt;&lt;/code&gt; 機能は、6つのタプルのリストを受け取り、に似6つのリスト、返し &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="782bb3363a3945b001878329fde4ebb88dcb6fb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:unzip7&quot;&gt;unzip7&lt;/a&gt;&lt;/code&gt; function takes a list of seven-tuples and returns seven lists, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:unzip7&quot;&gt;unzip7&lt;/a&gt;&lt;/code&gt; 機能はに類似し、7タプルとリターン7つのリストのリストを受け取り &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="17802af283250b2eaa32a2ecb8cb86776774ec7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:zip4&quot;&gt;zip4&lt;/a&gt;&lt;/code&gt; function takes four lists and returns a list of quadruples, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:zip4&quot;&gt;zip4&lt;/a&gt;&lt;/code&gt; 機能は4つのリストを受け取り、に類似した四倍のリスト、返し &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; ファイルを。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="6bce1a1341ac4dd8d73f1e68a1710aec2a623827" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:zip5&quot;&gt;zip5&lt;/a&gt;&lt;/code&gt; function takes five lists and returns a list of five-tuples, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:zip5&quot;&gt;zip5&lt;/a&gt;&lt;/code&gt; 機能は、5つのリストを受け取り、に類似した5つのタプルのリストを返し &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; ファイルを。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="451d4d26a4f677865f2a3a707b38064fca9f4083" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:zip6&quot;&gt;zip6&lt;/a&gt;&lt;/code&gt; function takes six lists and returns a list of six-tuples, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:zip6&quot;&gt;zip6&lt;/a&gt;&lt;/code&gt; 機能は6個のリストを取り、に類似した6つのタプルのリストを返し &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; ファイルを。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="c305b363ee1ef77beb2a8edb13e3c0d40953e5c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:zip7&quot;&gt;zip7&lt;/a&gt;&lt;/code&gt; function takes seven lists and returns a list of seven-tuples, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:zip7&quot;&gt;zip7&lt;/a&gt;&lt;/code&gt; 機能は7個のリストを取り、に類似した7つのタプルのリスト、返し &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; ファイルを。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="808a6c884122f71311b11b7294556f8f16861f57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; function takes a function which combines three elements, as well as three lists and returns a list of the function applied to corresponding elements, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; の関数は、に類似し、対応する要素に適用される機能のリスト3つの要素を組み合わせた機能を取り、ならびに3つのリストを返す &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; 。リスト融合が可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="88779bb5c5d951c52ff0e703df09adaeddb2bdff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; function takes a function which combines three elements, as well as three lists and returns a list of their point-wise combination, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; の機能は3つの要素だけでなく、3つのリストを組み合わせて、に類似し、そのポイントごとの組み合わせのリスト、返す関数取る &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; を。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="60ff42280ef2fd04c5a52b0fb6c4ced9f80d259b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith4&quot;&gt;zipWith4&lt;/a&gt;&lt;/code&gt; function takes a function which combines four elements, as well as four lists and returns a list of their point-wise combination, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:zipWith4&quot;&gt;zipWith4&lt;/a&gt;&lt;/code&gt; の機能は四つの要素だけでなく、4つのリストを結合しに類似し、そのポイントごとの組み合わせのリスト、返す関数取る &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; を。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="9fb3b6d637e7bdf78afcd7364064abe2b747412a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith5&quot;&gt;zipWith5&lt;/a&gt;&lt;/code&gt; function takes a function which combines five elements, as well as five lists and returns a list of their point-wise combination, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:zipWith5&quot;&gt;zipWith5&lt;/a&gt;&lt;/code&gt; の機能は、5つの要素だけでなく、5つのリストを組み合わせ、に類似し、そのポイントごとの組み合わせのリスト、返す関数取る &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; を。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="76824cb1a5c46cd7971e7c2fd78abbe2f0690804" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith6&quot;&gt;zipWith6&lt;/a&gt;&lt;/code&gt; function takes a function which combines six elements, as well as six lists and returns a list of their point-wise combination, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:zipWith6&quot;&gt;zipWith6&lt;/a&gt;&lt;/code&gt; の機能は、6つの要素だけでなく、6つのリストを組み合わせ、に類似し、そのポイントごとの組み合わせのリスト、返す関数取る &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; を。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="c2eb2006a61b2e5916c9fa720bb30884f6a6a25d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith7&quot;&gt;zipWith7&lt;/a&gt;&lt;/code&gt; function takes a function which combines seven elements, as well as seven lists and returns a list of their point-wise combination, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:zipWith7&quot;&gt;zipWith7&lt;/a&gt;&lt;/code&gt; の機能は7つの要素だけでなく、7つのリストを組み合わせ、に類似し、そのポイントごとの組み合わせのリスト、返す関数取る &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; を。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="657b1604cfab08f6d70ddcd61991924e84fa776b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:break&quot;&gt;break&lt;/a&gt; p&lt;/code&gt; function is equivalent to &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:span&quot;&gt;span&lt;/a&gt; (not . p)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:break&quot;&gt;break&lt;/a&gt; p&lt;/code&gt; 機能は同等です &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:span&quot;&gt;span&lt;/a&gt; (not . p)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee5bf1dc8f489bf35d33f57749203f70974c1fd9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; function takes a stream and returns a list of streams such that flattening the resulting list is equal to the argument. Moreover, each stream in the resulting list contains only equal elements. For example, in list notation:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 機能は、ストリームを受け取り、結果のリストを平坦化すると、引数に等しくなるようにストリームのリストを返します。さらに、結果のリストの各ストリームには、等しい要素のみが含まれます。たとえば、リスト表記では：</target>
        </trans-unit>
        <trans-unit id="d4768abc565ec9f4747dd76eb1df6c5aed894777" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:inits&quot;&gt;inits&lt;/a&gt;&lt;/code&gt; function takes a stream &lt;code&gt;xs&lt;/code&gt; and returns all the finite prefixes of &lt;code&gt;xs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:inits&quot;&gt;inits&lt;/a&gt;&lt;/code&gt; 機能は、ストリーム取り &lt;code&gt;xs&lt;/code&gt; とリターンのすべての有限プレフィックス &lt;code&gt;xs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="37ce52036d19badb8eb3e19e52707cf238bc5e53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; function returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the first argument is a prefix of the second.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; の機能を返す &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 第一引数が第二の接頭辞である場合。</target>
        </trans-unit>
        <trans-unit id="bd9fc5f9beeabe2f81cfc9e7c5d9e742fa36f643" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; function removes duplicate elements from a list. In particular, it keeps only the first occurrence of each element. (The name &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; means 'essence'.) It is a special case of &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nubBy&quot;&gt;nubBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own inequality test.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; 関数は、リストから重複要素を削除します。特に、各要素の最初の出現のみを保持します。（名前 &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; は「本質」を意味します。）これは &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nubBy&quot;&gt;nubBy&lt;/a&gt;&lt;/code&gt; の特殊なケースで、プログラマーが独自の不等式テストを提供できるようにします。</target>
        </trans-unit>
        <trans-unit id="1fd2343fdb59771c84cb4f982c7246f3073f744d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nubBy&quot;&gt;nubBy&lt;/a&gt;&lt;/code&gt; function behaves just like &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt;, except it uses a user-supplied equality predicate instead of the overloaded &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nubBy&quot;&gt;nubBy&lt;/a&gt;&lt;/code&gt; の機能は、ちょうど同じように動作し &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; ではなく、オーバーロードのユーザ供給等価述語使用する以外、 &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; 機能を。</target>
        </trans-unit>
        <trans-unit id="3ca6a46f6f161da72b75fa2b96c21284bff63000" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; function takes a predicate &lt;code&gt;p&lt;/code&gt; and a stream &lt;code&gt;xs&lt;/code&gt;, and returns a pair of lists. The first list corresponds to the elements of &lt;code&gt;xs&lt;/code&gt; for which &lt;code&gt;p&lt;/code&gt; holds; the second corresponds to the elements of &lt;code&gt;xs&lt;/code&gt; for which &lt;code&gt;p&lt;/code&gt; does not hold.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; 関数は、述語とり &lt;code&gt;p&lt;/code&gt; およびストリーム &lt;code&gt;xs&lt;/code&gt; 、そしてリストのペアを返します。最初のリストは、の要素に対応 &lt;code&gt;xs&lt;/code&gt; れる &lt;code&gt;p&lt;/code&gt; が成り立ちます。要素に対応する第二 &lt;code&gt;xs&lt;/code&gt; 用 &lt;code&gt;p&lt;/code&gt; 保持していません。</target>
        </trans-unit>
        <trans-unit id="97f203f3e97c286860c77a16076e2c5ba5e804b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:tails&quot;&gt;tails&lt;/a&gt;&lt;/code&gt; function takes a stream &lt;code&gt;xs&lt;/code&gt; and returns all the suffixes of &lt;code&gt;xs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:tails&quot;&gt;tails&lt;/a&gt;&lt;/code&gt; 機能は、ストリーム取り &lt;code&gt;xs&lt;/code&gt; とリターンのすべてのサフィックス &lt;code&gt;xs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d4b73a8b2bef137b1be451c67193ea1b9dd5278a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; function is analogous to &lt;a href=&quot;data-list&quot;&gt;Data.List&lt;/a&gt;'s &lt;code&gt;&lt;a href=&quot;data-list#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; 関数はに似ている&lt;a href=&quot;data-list&quot;&gt;Data.List&lt;/a&gt;の &lt;code&gt;&lt;a href=&quot;data-list#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; 操作。</target>
        </trans-unit>
        <trans-unit id="2413c236691707253e811091fb05fcbb1bf0b562" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; function is the inverse of the &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; 機能は逆のある &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; 機能。</target>
        </trans-unit>
        <trans-unit id="ce09038022ed3cd501096c0d8a1d4d43ab363fc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; function takes two streams and returns a stream of corresponding pairs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; 機能は、2つのストリームを受け取り、対応する対のストリームを返します。</target>
        </trans-unit>
        <trans-unit id="f10666c8af44a76f18b1cbb206ccc5dbbcf92fdb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; function generalizes &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. Rather than tupling the elements, the elements are combined using the function passed as the first argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; の機能の一般化は &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; 。要素を重ね合わせるのではなく、要素は最初の引数として渡された関数を使用して結合されます。</target>
        </trans-unit>
        <trans-unit id="16a4e90fc05f7eb7703f8d38de0941aad54680ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt; k v&lt;/code&gt; type represents a finite map (sometimes called a dictionary) from keys of type &lt;code&gt;k&lt;/code&gt; to values of type &lt;code&gt;v&lt;/code&gt;. A &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; is strict in its keys but lazy in its values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt; k v&lt;/code&gt; 型は、型のキーから（時には辞書と呼ばれる）有限のマップを表し &lt;code&gt;k&lt;/code&gt; 型の値に &lt;code&gt;v&lt;/code&gt; 。A &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; その値でそのキーで厳しいが、怠惰です。</target>
        </trans-unit>
        <trans-unit id="4715b3b3e03f7ebfbfad3ed60bdf0126093bd7fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; functions are shared by the lazy and strict modules. Only the choice of merge tactics determines strictness. If you use &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;data-map-merge-strict&quot;&gt;Data.Map.Merge.Strict&lt;/a&gt; then the results will be forced before they are inserted. If you use &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; from this module then they will not.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; 機能は遅延と厳格なモジュールによって共有されています。マージ戦術の選択だけが厳密さを決定します。あなたが使用している場合は &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; から&lt;a href=&quot;data-map-merge-strict&quot;&gt;Data.Map.Merge.Strictを&lt;/a&gt;、それらが挿入される前に、結果が強制されます。このモジュールから &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; を使用すると、使用されなくなります。</target>
        </trans-unit>
        <trans-unit id="2b155238023fcafca6284b024ed0af65f6650208" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; functions are shared by the lazy and strict modules. Only the choice of merge tactics determines strictness. If you use &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; from this module then the results will be forced before they are inserted. If you use &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;data-map-merge-lazy&quot;&gt;Data.Map.Merge.Lazy&lt;/a&gt; then they will not.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; 機能は遅延と厳格なモジュールによって共有されています。マージ戦術の選択だけが厳密さを決定します。このモジュールから &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; を使用すると、結果は挿入される前に強制されます。あなたが使用している場合は &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; から&lt;a href=&quot;data-map-merge-lazy&quot;&gt;Data.Map.Merge.Lazyを&lt;/a&gt;、彼らはしません。</target>
        </trans-unit>
        <trans-unit id="662c04a7a17ee001eac580254bab8523defdb93a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt; k v&lt;/code&gt; type represents a finite map (sometimes called a dictionary) from keys of type &lt;code&gt;k&lt;/code&gt; to values of type &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt; k v&lt;/code&gt; 型は、型のキーから（時には辞書と呼ばれる）有限のマップを表し &lt;code&gt;k&lt;/code&gt; 型の値に &lt;code&gt;v&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12662a5070f04b0d43497ea05090a5128c804911" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; type is shared between the lazy and strict modules, meaning that the same &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; value can be passed to functions in both modules. This means that the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#v:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances are the same as for the &lt;a href=&quot;data-map-lazy&quot;&gt;Data.Map.Lazy&lt;/a&gt; module, so if they are used the resulting maps may contain suspended values (thunks).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; 種類が同じことを意味し、遅延と厳格なモジュール間で共有される &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; 値は、両方のモジュール内の関数に渡すことができます。つまり、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#v:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; インスタンスは&lt;a href=&quot;data-map-lazy&quot;&gt;Data.Map.Lazy&lt;/a&gt;モジュールの場合と同じであるため、これらを使用すると、結果のマップに中断された値（サンク）が含まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="80a0485ade9c643df5c2ea0bf0c47d55fb54166e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; type is shared between the lazy and strict modules, meaning that the same &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; value can be passed to functions in both modules. This means that the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#v:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#v:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances are the same as for the &lt;a href=&quot;data-map-lazy&quot;&gt;Data.Map.Lazy&lt;/a&gt; module, so if they are used the resulting maps may contain suspended values (thunks).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; 種類が同じことを意味し、遅延と厳格なモジュール間で共有される &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; 値は、両方のモジュール内の関数に渡すことができます。つまり、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#v:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#v:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; インスタンスは&lt;a href=&quot;data-map-lazy&quot;&gt;Data.Map.Lazy&lt;/a&gt;モジュールの場合と同じであるため、これらを使用すると、結果のマップに中断された値（サンク）が含まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="ff715be94759f4fe46e742d1184a2a615aa793fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; type is shared between the lazy and strict modules, meaning that the same &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; value can be passed to functions in both modules. This means that the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-functor#v:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-traversable#v:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances are the same as for the &lt;a href=&quot;data-map-lazy&quot;&gt;Data.Map.Lazy&lt;/a&gt; module, so if they are used the resulting maps may contain suspended values (thunks).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; 種類が同じことを意味し、遅延と厳格なモジュール間で共有される &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; 値は、両方のモジュール内の関数に渡すことができます。つまり、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-functor#v:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-traversable#v:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; インスタンスは&lt;a href=&quot;data-map-lazy&quot;&gt;Data.Map.Lazy&lt;/a&gt;モジュールの場合と同じであるため、これらを使用すると、結果のマップに中断された値（サンク）が含まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="7f52f3aa69ba900643917df0d514ebfe7065396f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; type encapsulates an optional value. A value of type &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt; a&lt;/code&gt; either contains a value of type &lt;code&gt;a&lt;/code&gt; (represented as &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt;), or it is empty (represented as &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;). Using &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; is a good way to deal with errors or exceptional cases without resorting to drastic measures such as &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; タイプは、任意の値をカプセル化します。型の値は、 &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt; a&lt;/code&gt; どちらのタイプの値が含まれている（ように表さ &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt; A）、またはそれは（のように表さ空で &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; ）。使用 &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; など、抜本的な対策に頼ることなく、エラーや例外的な場合に対処するための良い方法です &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f185e83cdbbc510aa029904011adfe83bd8b1220" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; type is also a monad. It is a simple kind of error monad, where all errors are represented by &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;. A richer error monad can be built using the &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; タイプもモナドです。これは単純な種類のエラーモナドであり、すべてのエラーは &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; で表されます。 &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; 型を使用すると、より豊富なエラーモナドを構築できます。</target>
        </trans-unit>
        <trans-unit id="e8aa4a4fc49f7638e33b52125beaf5389284d595" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#v:catMaybes&quot;&gt;catMaybes&lt;/a&gt;&lt;/code&gt; function takes a list of &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt;s and returns a list of all the &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:catMaybes&quot;&gt;catMaybes&lt;/a&gt;&lt;/code&gt; の関数は、リストかかる &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; のを、すべてのリストを返す &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 値を。</target>
        </trans-unit>
        <trans-unit id="8e3cc1728b8d32e7bd6e33d7191898329f389751" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#v:fromJust&quot;&gt;fromJust&lt;/a&gt;&lt;/code&gt; function extracts the element out of a &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; and throws an error if its argument is &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:fromJust&quot;&gt;fromJust&lt;/a&gt;&lt;/code&gt; の機能は、外の要素を抽出 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 、その引数がある場合は、エラーがスローされます &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b9e0e0ae5827a91039e8b0c00412d73abae7c014" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#v:fromMaybe&quot;&gt;fromMaybe&lt;/a&gt;&lt;/code&gt; function takes a default value and a &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; value. If the &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, it returns the default value; otherwise, it returns the value contained in the &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:fromMaybe&quot;&gt;fromMaybe&lt;/a&gt;&lt;/code&gt; の機能は、デフォルト値ととる &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 価値を。 &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; の場合、デフォルト値を返します。それ以外の場合は、 &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; に含まれている値を返します。</target>
        </trans-unit>
        <trans-unit id="de4cf2aa7df453c08de73e06681e00b3a9d47c30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#v:fromMaybe&quot;&gt;fromMaybe&lt;/a&gt;&lt;/code&gt; function takes a default value and and &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; value. If the &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, it returns the default values; otherwise, it returns the value contained in the &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:fromMaybe&quot;&gt;fromMaybe&lt;/a&gt;&lt;/code&gt; の機能はデフォルト値として取る &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 価値を。 &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; の場合、デフォルト値を返します。それ以外の場合は、 &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; に含まれている値を返します。</target>
        </trans-unit>
        <trans-unit id="7a5a7a323996766db88ca0c88884029bb8a6704d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#v:isJust&quot;&gt;isJust&lt;/a&gt;&lt;/code&gt; function returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff its argument is of the form &lt;code&gt;Just _&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:isJust&quot;&gt;isJust&lt;/a&gt;&lt;/code&gt; の機能を返す &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 引数が形式である場合に限っ &lt;code&gt;Just _&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="52483bf501d37712c976868bb9284af355744fac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#v:isNothing&quot;&gt;isNothing&lt;/a&gt;&lt;/code&gt; function returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff its argument is &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:isNothing&quot;&gt;isNothing&lt;/a&gt;&lt;/code&gt; の関数が返す &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 引数IFFがある &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eee25b35452f5d1cfc414313539edda0a7120764" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#v:listToMaybe&quot;&gt;listToMaybe&lt;/a&gt;&lt;/code&gt; function returns &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; on an empty list or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt; where &lt;code&gt;a&lt;/code&gt; is the first element of the list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:listToMaybe&quot;&gt;listToMaybe&lt;/a&gt;&lt;/code&gt; の関数が戻るの &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 空のリストまたは上 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt; リストの最初の要素です。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d9226f117113df71e3656c9e6013ce6d6bf13f04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#v:mapMaybe&quot;&gt;mapMaybe&lt;/a&gt;&lt;/code&gt; function is a version of &lt;code&gt;&lt;a href=&quot;ghc-list#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; which can throw out elements. In particular, the functional argument returns something of type &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt; b&lt;/code&gt;. If this is &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, no element is added on to the result list. If it is &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; b&lt;/code&gt;, then &lt;code&gt;b&lt;/code&gt; is included in the result list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:mapMaybe&quot;&gt;mapMaybe&lt;/a&gt;&lt;/code&gt; の機能はバージョンである &lt;code&gt;&lt;a href=&quot;ghc-list#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; 要素を捨てることができます。特に、関数の引数は、 &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt; b&lt;/code&gt; 型の何かを返します。これが &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; の場合、結果リストに要素は追加されません。それがある場合 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; b&lt;/code&gt; 、そして &lt;code&gt;b&lt;/code&gt; 結果リストに含まれています。</target>
        </trans-unit>
        <trans-unit id="85d0ce65a11dff7a785fa5be5465e4febfc6e9a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#v:maybe&quot;&gt;maybe&lt;/a&gt;&lt;/code&gt; function takes a default value, a function, and a &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; value. If the &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; value is &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the function returns the default value. Otherwise, it applies the function to the value inside the &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; and returns the result.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:maybe&quot;&gt;maybe&lt;/a&gt;&lt;/code&gt; 機能は、デフォルト値、機能、およびかかる &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 価値を。場合は &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 価値がある &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 、関数はデフォルト値を返します。それ以外の場合は、 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 内の値に関数を適用し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="5c611fd7648ec2451334092c9df4afb5e19ad5d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#v:maybeToList&quot;&gt;maybeToList&lt;/a&gt;&lt;/code&gt; function returns an empty list when given &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; or a singleton list when given &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:maybeToList&quot;&gt;maybeToList&lt;/a&gt;&lt;/code&gt; の与えられたとき、関数は空のリストを返す &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 与えられたとき、またはシングルトンリストを &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="795a9f9783333374a76593a231e073666138ebda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-monoid#t:Sum&quot;&gt;Sum&lt;/a&gt;&lt;/code&gt; monoid is defined by the numerical addition operator and `0` as neutral element:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-monoid#t:Sum&quot;&gt;Sum&lt;/a&gt;&lt;/code&gt; モノイドは、中性元素として数値加算演算子と'0'によって定義されます。</target>
        </trans-unit>
        <trans-unit id="7f108b74d9d0f499180865c6097577550b780ef6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt;&lt;/code&gt; type allows you to reverse sort order conveniently. A value of type &lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; contains a value of type &lt;code&gt;a&lt;/code&gt; (represented as &lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt;&lt;/code&gt; タイプを使用すると、便利なソート順序を逆にすることができます。タイプの値 &lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; 型の値が含まれている &lt;code&gt;a&lt;/code&gt; （として表さ &lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="9acde1593d8ad750d5ecbfa06d97960b56f05f43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt;&lt;/code&gt; type allows you to reverse sort order conveniently. A value of type &lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; contains a value of type &lt;code&gt;a&lt;/code&gt; (represented as &lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt;). If &lt;code&gt;a&lt;/code&gt; has an &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; instance associated with it then comparing two values thus wrapped will give you the opposite of their normal sort order. This is particularly useful when sorting in generalised list comprehensions, as in: &lt;code&gt;then sortWith by &lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt; x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt;&lt;/code&gt; タイプを使用すると、便利なソート順序を逆にすることができます。タイプ &lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; の値には、タイプ &lt;code&gt;a&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; として表される）の値が含まれます。 &lt;code&gt;a&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; インスタンスが関連付けられている場合、このようにラップされた2つの値を比較すると、通常のソート順とは逆になります。これは、次のように一般化されたリスト内包表記で並べ替える場合に特に便利です。 &lt;code&gt;then sortWith by &lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt; x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d480aba9ca8f558b9bab4a7470c617258413273" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; class is used for totally ordered datatypes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; クラスは全順序のデータ型に使用されます。</target>
        </trans-unit>
        <trans-unit id="9743e6ce1ccca02d84b310e0c03e3b64b006ece2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-semigroup#t:Min&quot;&gt;Min&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;data-semigroup#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; is defined to always pick the smaller number: &amp;gt;&amp;gt;&amp;gt; Min 1 &amp;lt;&amp;gt; Min 2 &amp;lt;&amp;gt; Min 3 &amp;lt;&amp;gt; Min 4 :: Min Int Min {getMin = 1}</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-semigroup#t:Min&quot;&gt;Min&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;data-semigroup#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; インスタンスは、常に小さい数を選択するように定義されています。&amp;gt;&amp;gt;&amp;gt; Min 1 &amp;lt;&amp;gt; Min 2 &amp;lt;&amp;gt; Min 3 &amp;lt;&amp;gt; Min 4 :: Min Int Min {getMin = 1}</target>
        </trans-unit>
        <trans-unit id="d415a40b49223b304b71b398a708eb25f07e68ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt; a&lt;/code&gt; type represents a finite sequence of values of type &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt; a&lt;/code&gt; タイプは、型の値の有限シーケンスを表す &lt;code&gt;a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13ce1c3f2600f3e2f50834c056ec8fa70e4eab37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt; e&lt;/code&gt; type represents a set of elements of type &lt;code&gt;e&lt;/code&gt;. Most operations require that &lt;code&gt;e&lt;/code&gt; be an instance of the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; class. A &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; is strict in its elements.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt; e&lt;/code&gt; タイプは、型の要素の集合を表す &lt;code&gt;e&lt;/code&gt; 。ほとんどの操作では、 &lt;code&gt;e&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; クラスのインスタンスである必要があります。A &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; その要素で厳しいです。</target>
        </trans-unit>
        <trans-unit id="1038dcfb90af9b5c0cfcdb7ab1311da4e5ed3150" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt; e&lt;/code&gt; type represents a set of elements of type &lt;code&gt;e&lt;/code&gt;. Most operations require that &lt;code&gt;e&lt;/code&gt; be an instance of the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; class. A &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; is strict in its elements.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt; e&lt;/code&gt; タイプは、型の要素の集合を表す &lt;code&gt;e&lt;/code&gt; 。ほとんどの操作では、 &lt;code&gt;e&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; クラスのインスタンスである必要があります。A &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; その要素で厳しいです。</target>
        </trans-unit>
        <trans-unit id="c9efbd927cc3f3d70bf87d84d4a730da30c040e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt; e&lt;/code&gt; type represents a set of elements of type &lt;code&gt;e&lt;/code&gt;. Most operations require that &lt;code&gt;e&lt;/code&gt; be an instance of the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; class. A &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; is strict in its elements.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt; e&lt;/code&gt; タイプは、型の要素の集合を表す &lt;code&gt;e&lt;/code&gt; 。ほとんどの操作では、 &lt;code&gt;e&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; クラスのインスタンスである必要があります。A &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; その要素で厳しいです。</target>
        </trans-unit>
        <trans-unit id="8881e3fb681798d7bf981e8e9d449509800437b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; type is implemented using arrays that are not guaranteed to have a fixed address in the Haskell heap. All communication with native code must thus occur by copying data back and forth.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; タイプは、Haskellのヒープ内の固定アドレスを持つことが保証されていないアレイを用いて実現されます。したがって、ネイティブコードとのすべての通信は、データを前後にコピーすることによって行われる必要があります。</target>
        </trans-unit>
        <trans-unit id="9d9c2733ed15ccf0d235e8a6b100f93fe8426bb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; type's internal representation is UTF-16, using the platform's native endianness. This makes copied data suitable for use with native libraries that use a similar representation, such as ICU. To interoperate with native libraries that use different internal representations, such as UTF-8 or UTF-32, consider using the functions in the &lt;code&gt;&lt;a href=&quot;data-text#v:Encoding&quot;&gt;Encoding&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; タイプの内部表現は、プラットフォームのネイティブエンディアンを使用して、UTF-16です。これにより、コピーされたデータは、ICUなどの同様の表現を使用するネイティブライブラリでの使用に適しています。UTF-8やUTF-32などの異なる内部表現を使用するネイティブライブラリと相互運用するには、 &lt;code&gt;&lt;a href=&quot;data-text#v:Encoding&quot;&gt;Encoding&lt;/a&gt;&lt;/code&gt; モジュールの関数の使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="161f7f591d2f56a095b5a6738fe11dc948f83c20" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-text#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and a strict &lt;code&gt;&lt;a href=&quot;data-text#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Performs replacement on invalid scalar values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;data-text#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; と厳密 &lt;code&gt;&lt;a href=&quot;data-text#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; の各要素に関数を適用し、累積パラメーターを右から左に渡し、このアキュムレーターの最終値を新しい &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; とともに返します。無効なスカラー値で置換を実行します。</target>
        </trans-unit>
        <trans-unit id="c5823a0c22eaaaf0e0d80ffbc2bbde448d239204" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-array#t:Array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; constructor is exposed since &lt;code&gt;text-1.1.1.3&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-array#t:Array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; コンストラクタは、以来、公開された &lt;code&gt;text-1.1.1.3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7d764c078d54b6747b82b1fb65bc90cbfdc33a9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-array#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; constructor is exposed since &lt;code&gt;text-1.1.1.3&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-array#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; コンストラクタは、以来、公開された &lt;code&gt;text-1.1.1.3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7e4b96f6778d5f3fbaa9eb0f8c186a8f261148c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-encoding#v:streamDecodeUtf8&quot;&gt;streamDecodeUtf8&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-text-encoding#v:streamDecodeUtf8With&quot;&gt;streamDecodeUtf8With&lt;/a&gt;&lt;/code&gt; functions accept a &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; that represents a possibly incomplete input (e.g. a packet from a network stream) that may not end on a UTF-8 boundary.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-encoding#v:streamDecodeUtf8&quot;&gt;streamDecodeUtf8&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-text-encoding#v:streamDecodeUtf8With&quot;&gt;streamDecodeUtf8With&lt;/a&gt;&lt;/code&gt; 機能が受け入れ &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; UTF-8境界で終了しないことがあり、おそらく、不完全な入力（ネットワークストリームから、例えばAパケット）を表します。</target>
        </trans-unit>
        <trans-unit id="651e438c6d91bc7b186512f8dad01a122ee5eab0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-encoding#v:streamDecodeUtf8&quot;&gt;streamDecodeUtf8&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-text-encoding#v:streamDecodeUtf8With&quot;&gt;streamDecodeUtf8With&lt;/a&gt;&lt;/code&gt; functions accept a &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.12.1/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; that represents a possibly incomplete input (e.g. a packet from a network stream) that may not end on a UTF-8 boundary.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-encoding#v:streamDecodeUtf8&quot;&gt;streamDecodeUtf8&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-text-encoding#v:streamDecodeUtf8With&quot;&gt;streamDecodeUtf8With&lt;/a&gt;&lt;/code&gt; 機能が受け入れ &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.12.1/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; UTF-8境界で終了しないことがあり、おそらく、不完全な入力（ネットワークストリームから、例えばAパケット）を表します。</target>
        </trans-unit>
        <trans-unit id="d8de0eaf04140ba7158dddc8d0be85ce0ccccc4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; function takes a predicate and a stream and returns the index of the first element in the stream satisfying the predicate.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-internal-fusion#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; の機能は、述語ストリームを取り、述語を満たすストリーム内の最初の要素のインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="bf384e38dd6fd9c82df77df8975246cdedc34701" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:findIndexI&quot;&gt;findIndexI&lt;/a&gt;&lt;/code&gt; function takes a predicate and a stream and returns the index of the first element in the stream satisfying the predicate.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:findIndexI&quot;&gt;findIndexI&lt;/a&gt;&lt;/code&gt; の機能は、述語ストリームを取り、述語を満たすストリーム内の最初の要素のインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="ee94ea37dfd7850ffc9a486e3dd92c091c5cbec7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-size#t:Size&quot;&gt;Size&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;n&lt;/code&gt; code points.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-size#t:Size&quot;&gt;Size&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;n&lt;/code&gt; 個のコードポイント。</target>
        </trans-unit>
        <trans-unit id="66da5760dab680492ae3a48dc3a35550be6dc4df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-size#t:Size&quot;&gt;Size&lt;/a&gt;&lt;/code&gt; of the given code point.</source>
          <target state="translated">指定されたコードポイントの &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-size#t:Size&quot;&gt;Size&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a75e1f66c9b008e7ba6ff420a20501b8af837a38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-io#v:interact&quot;&gt;interact&lt;/a&gt;&lt;/code&gt; function takes a function of type &lt;code&gt;Text -&amp;gt; Text&lt;/code&gt; as its argument. The entire input from the standard input device is passed to this function as its argument, and the resulting string is output on the standard output device.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-io#v:interact&quot;&gt;interact&lt;/a&gt;&lt;/code&gt; の機能は、型の機能取る &lt;code&gt;Text -&amp;gt; Text&lt;/code&gt; 引数として。標準入力デバイスからの入力全体が引数としてこの関数に渡され、結果の文字列が標準出力デバイスに出力されます。</target>
        </trans-unit>
        <trans-unit id="b417d4f678288b71d35accb0f99175761f3e1e07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; function reads a file and returns the contents of the file as a string. The entire file is read strictly, as with &lt;code&gt;&lt;a href=&quot;data-text-io#v:getContents&quot;&gt;getContents&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; 関数は、ファイルを読み込み、ファイルの内容を文字列として返します。 &lt;code&gt;&lt;a href=&quot;data-text-io#v:getContents&quot;&gt;getContents&lt;/a&gt;&lt;/code&gt; と同様に、ファイル全体が厳密に読み取られます。</target>
        </trans-unit>
        <trans-unit id="68615baf25b8a5dabb727f9a05e4f69c95e23d72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; function takes a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; and returns a list of &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s such that the concatenation of the result is equal to the argument. Moreover, each sublist in the result contains only equal elements. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 機能は、かかる &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; のリストを返し &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 結果の連結が引数に等しくなるように複数可。さらに、結果の各サブリストには等しい要素のみが含まれます。例えば、</target>
        </trans-unit>
        <trans-unit id="448dca813f1fb16bef7c7de2c7c5fae5b0a093ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; 機能は、非オーバーロードされたバージョンである &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bea18231a8f3d26a5fe0119fe32dfbafea55d681" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and a strict &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Performs replacement on invalid scalar values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; と厳密 &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; 。これは、 &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; の各要素に関数を適用し、右から左に累積パラメーターを渡し、新しい &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; とともにこのアキュムレーターの最終値を返します。無効なスカラー値で置換を実行します。</target>
        </trans-unit>
        <trans-unit id="1a76ea813e8c21de4f80acb76647bc2ec24349f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-lazy-io#v:interact&quot;&gt;interact&lt;/a&gt;&lt;/code&gt; function takes a function of type &lt;code&gt;Text -&amp;gt; Text&lt;/code&gt; as its argument. The entire input from the standard input device is passed (lazily) to this function as its argument, and the resulting string is output on the standard output device.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-lazy-io#v:interact&quot;&gt;interact&lt;/a&gt;&lt;/code&gt; の機能は、型の機能取る &lt;code&gt;Text -&amp;gt; Text&lt;/code&gt; 引数として。標準入力デバイスからの入力全体がこの関数に引数として（遅延して）渡され、結果の文字列が標準出力デバイスに出力されます。</target>
        </trans-unit>
        <trans-unit id="0f4eb06ba150dfea2048571ec4f24a657175124e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-traversable#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a structure, passing an accumulating parameter from left to right, and returning a final value of this accumulator together with the new structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-traversable#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; の。構造体の各要素に関数を適用し、累積パラメーターを左から右に渡し、新しい構造体とともにこのアキュムレーターの最終値を返します。</target>
        </trans-unit>
        <trans-unit id="7d943aed90068948d72a0d5858ba1b7944e9decb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-traversable#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a structure, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-traversable#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; 。構造体の各要素に関数を適用し、累積パラメーターを右から左に渡し、このアキュムレーターの最終値を新しい構造体とともに返します。</target>
        </trans-unit>
        <trans-unit id="37d7ebaf143b71c90e000c5e485da2fe61a5ea4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-traversable#v:sequenceA&quot;&gt;sequenceA&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-traversable#v:sequence&quot;&gt;sequence&lt;/a&gt;&lt;/code&gt; methods are useful when what you have is a container of applicative or, respectively, monadic actions, and you want to evaluate them left-to-right to obtain a container of the computed values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-traversable#v:sequenceA&quot;&gt;sequenceA&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-traversable#v:sequence&quot;&gt;sequence&lt;/a&gt;&lt;/code&gt; 何を持っていることは、それぞれ、応用的またはモナドのアクションのコンテナであるときの方法が有用であり、あなたはそれらを左から右に計算された値のコンテナを取得するために評価したいです。</target>
        </trans-unit>
        <trans-unit id="6a5f7c77832ccee5dc8f444bf10cb820686c5a90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-tree#t:Forest&quot;&gt;Forest&lt;/a&gt; a&lt;/code&gt; type represents a forest of &lt;code&gt;&lt;a href=&quot;data-tree#t:Tree&quot;&gt;Tree&lt;/a&gt; a&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-tree#t:Forest&quot;&gt;Forest&lt;/a&gt; a&lt;/code&gt; のタイプはの森を表す &lt;code&gt;&lt;a href=&quot;data-tree#t:Tree&quot;&gt;Tree&lt;/a&gt; a&lt;/code&gt; 秒。</target>
        </trans-unit>
        <trans-unit id="4dde0b10b0f433f8901cc6d31ae5f25b888075e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-tree#t:Tree&quot;&gt;Tree&lt;/a&gt; a&lt;/code&gt; type represents a lazy, possibly infinite, multi-way tree (also known as a &lt;em&gt;rose tree&lt;/em&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-tree#t:Tree&quot;&gt;Tree&lt;/a&gt; a&lt;/code&gt; タイプ（としても知られている遅延、おそらく無限、マルチウェイツリー表す&lt;em&gt;バラの木&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="8007180e7dc5a974039c84bcb837081428c5c9da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-typeable#t:Typeable&quot;&gt;Typeable&lt;/a&gt;&lt;/code&gt; class reifies types to some extent by associating type representations to types. These type representations can be compared, and one can in turn define a type-safe cast operation. To this end, an unsafe cast is guarded by a test for type (representation) equivalence. The module &lt;a href=&quot;data-dynamic&quot;&gt;Data.Dynamic&lt;/a&gt; uses Typeable for an implementation of dynamics. The module &lt;a href=&quot;data-data&quot;&gt;Data.Data&lt;/a&gt; uses Typeable and type-safe cast (but not dynamics) to support the &quot;Scrap your boilerplate&quot; style of generic programming.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-typeable#t:Typeable&quot;&gt;Typeable&lt;/a&gt;&lt;/code&gt; クラスは型に型表現を関連付けることにより、ある程度のタイプを具体化します。これらの型表現を比較して、型保証のキャスト演算を定義することができます。このため、安全でないキャストは型（表現）の等価性のテストによって保護されています。モジュール&lt;a href=&quot;data-dynamic&quot;&gt;Data.Dynamic&lt;/a&gt;は、ダイナミクスの実装にTypeableを使用します。モジュール&lt;a href=&quot;data-data&quot;&gt;Data.Data&lt;/a&gt;は、Typeableおよびtype-safeキャスト（ただし、ダイナミクスではない）を使用して、一般的なプログラミングの「定型句をスクラップする」スタイルをサポートします。</target>
        </trans-unit>
        <trans-unit id="d043229d0aba230c46b619f1751b3e8e83785014" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; function outputs the trace message given as its first argument, before returning the second argument as its result.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; 機能は、その結果として、第二の引数を返す前に、最初の引数として与えられたトレースメッセージを出力します。</target>
        </trans-unit>
        <trans-unit id="140721e416adc2345c2c2facce319e06db5e38ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; function should &lt;em&gt;only&lt;/em&gt; be used for debugging, or for monitoring execution. The function is not referentially transparent: its type indicates that it is a pure function but it has the side effect of outputting the trace message.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; 機能は、必要がある&lt;em&gt;だけで&lt;/em&gt;デバッグするための、または実行を監視するために使用されます。関数は参照透過的ではありません。そのタイプは、関数が純粋な関数であることを示しますが、トレースメッセージを出力するという副作用があります。</target>
        </trans-unit>
        <trans-unit id="605bec91baff60047b066d4e1ac30c1faa493023" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceShow&quot;&gt;traceShow&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceIO&quot;&gt;traceIO&lt;/a&gt;&lt;/code&gt; functions print messages to an output stream. They are intended for &quot;printf debugging&quot;, that is: tracing the flow of execution and printing interesting values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceShow&quot;&gt;traceShow&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceIO&quot;&gt;traceIO&lt;/a&gt;&lt;/code&gt; 機能は、出力ストリームにメッセージを印刷します。これらは、「printfデバッグ」、つまり、実行のフローを追跡して興味深い値を出力することを目的としています。</target>
        </trans-unit>
        <trans-unit id="a88df11e31fce4c7204e009946e93a681d719b46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEvent&quot;&gt;traceEvent&lt;/a&gt;&lt;/code&gt; function behaves like &lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; with the difference that the message is emitted to the eventlog, if eventlog profiling is available and enabled at runtime.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEvent&quot;&gt;traceEvent&lt;/a&gt;&lt;/code&gt; 関数は &lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; のように動作しますが、イベントログのプロファイリングが利用可能で実行時に有効になっている場合は、メッセージがイベントログに出力される点が異なります。</target>
        </trans-unit>
        <trans-unit id="49d4ea0d4504acbc4d1aca32b1293ddbe4063444" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEventIO&quot;&gt;traceEventIO&lt;/a&gt;&lt;/code&gt; function emits a message to the eventlog, if eventlog profiling is available and enabled at runtime.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEventIO&quot;&gt;traceEventIO&lt;/a&gt;&lt;/code&gt; のイベントログプロファイリングが利用可能であり、実行時に有効な場合、この関数は、イベントログにメッセージを発します。</target>
        </trans-unit>
        <trans-unit id="b3a4eae130c3225cefb9efb90d8be9b83b521fab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceIO&quot;&gt;traceIO&lt;/a&gt;&lt;/code&gt; function outputs the trace message from the IO monad. This sequences the output with respect to other IO actions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:traceIO&quot;&gt;traceIO&lt;/a&gt;&lt;/code&gt; の関数はIOモナドからのトレース・メッセージを出力します。これにより、他のIOアクションに関して出力が順序付けられます。</target>
        </trans-unit>
        <trans-unit id="d97ccf67a57dfd415eb74011cb7d1b6a77ff69bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceMarker&quot;&gt;traceMarker&lt;/a&gt;&lt;/code&gt; function emits a marker to the eventlog, if eventlog profiling is available and enabled at runtime. The &lt;code&gt;String&lt;/code&gt; is the name of the marker. The name is just used in the profiling tools to help you keep clear which marker is which.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:traceMarker&quot;&gt;traceMarker&lt;/a&gt;&lt;/code&gt; のイベントログプロファイリングが利用可能であり、実行時に有効な場合、この関数は、イベントログにマーカーを放出します。 &lt;code&gt;String&lt;/code&gt; マーカーの名前です。この名前は、どのマーカーがどのマーカーであるかを明確に保つためにプロファイリングツールで使用されるだけです。</target>
        </trans-unit>
        <trans-unit id="fa771e47c5e0835b60259fdc80c34fd55cfa3c38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceMarkerIO&quot;&gt;traceMarkerIO&lt;/a&gt;&lt;/code&gt; function emits a marker to the eventlog, if eventlog profiling is available and enabled at runtime.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:traceMarkerIO&quot;&gt;traceMarkerIO&lt;/a&gt;&lt;/code&gt; のイベントログプロファイリングが利用可能であり、実行時に有効な場合、この関数は、イベントログにマーカーを放出します。</target>
        </trans-unit>
        <trans-unit id="65a90e57ddce6b3095e1eb053172e0add59b8b87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; is parameterised in the same way as &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt;. The type argument of &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; should normally be an instance of class &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; は同じようにパラメータ化される &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; 。型引数 &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; は、通常、クラスのインスタンスである必要があり &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; が。</target>
        </trans-unit>
        <trans-unit id="47f829e4b12e19d9b1b9c867b798c3d41bfa7cc6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; type and operations. This module is part of the Foreign Function Interface (FFI) and will usually be imported via the &lt;a href=&quot;foreign&quot;&gt;Foreign&lt;/a&gt; module.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; の種類と操作。このモジュールは、Foreign Function Interface（FFI）の一部であり、通常は&lt;a href=&quot;foreign&quot;&gt;Foreign&lt;/a&gt;モジュールを介してインポートされます。</target>
        </trans-unit>
        <trans-unit id="4fea14f33688c221cc4b82a2e64457f2c1daf4c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; is parameterised in the same way as &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt;. The type argument of &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; should normally be an instance of class &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; は同じようにパラメータ化される &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; 。型引数 &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; は、通常、クラスのインスタンスである必要があり &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; が。</target>
        </trans-unit>
        <trans-unit id="46ba37e75544b376d91afd7d94cc178e3d4edd60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; type and operations. This module is part of the Foreign Function Interface (FFI) and will usually be imported via the &lt;a href=&quot;foreign&quot;&gt;Foreign&lt;/a&gt; module.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; の種類と操作。このモジュールは、Foreign Function Interface（FFI）の一部であり、通常は&lt;a href=&quot;foreign&quot;&gt;Foreign&lt;/a&gt;モジュールを介してインポートされます。</target>
        </trans-unit>
        <trans-unit id="05673b670d8de49659d7ca54ef48d3649d1c6cc9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;foreign-ptr#v:castPtr&quot;&gt;castPtr&lt;/a&gt;&lt;/code&gt; function casts a pointer from one type to another.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-ptr#v:castPtr&quot;&gt;castPtr&lt;/a&gt;&lt;/code&gt; の機能は、ある型から別の型のポインタをキャストします。</target>
        </trans-unit>
        <trans-unit id="f4a69e977af812c4c1901ff0ace0b2bb4a9d9dd0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-arr#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; class is used to map a contiguous subrange of values in a type onto integers. It is used primarily for array indexing (see the array package).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-arr#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; クラスは整数上のタイプの値の連続した部分範囲をマッピングするために使用されます。これは主に配列のインデックス付けに使用されます（arrayパッケージを参照）。</target>
        </trans-unit>
        <trans-unit id="e348453b816674bfaf92baa8a27076b87c3aa9bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-arr#v:accumArray&quot;&gt;accumArray&lt;/a&gt;&lt;/code&gt; function deals with repeated indices in the association list using an &lt;em&gt;accumulating function&lt;/em&gt; which combines the values of associations with the same index.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-arr#v:accumArray&quot;&gt;accumArray&lt;/a&gt;&lt;/code&gt; の機能は、使用関連リスト内の繰り返しのインデックスを扱う&lt;em&gt;蓄積機能&lt;/em&gt;同じインデックスとの関連の値を組み合わせ。</target>
        </trans-unit>
        <trans-unit id="7873c676664db92e7ab0f598d2d48e71762b5260" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-base#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class defines the basic operations over a &lt;em&gt;monad&lt;/em&gt;, a concept from a branch of mathematics known as &lt;em&gt;category theory&lt;/em&gt;. From the perspective of a Haskell programmer, however, it is best to think of a monad as an &lt;em&gt;abstract datatype&lt;/em&gt; of actions. Haskell's &lt;code&gt;do&lt;/code&gt; expressions provide a convenient syntax for writing monadic expressions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-base#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; クラスは、上の基本的な操作を定義&lt;em&gt;モナド&lt;/em&gt;として知られている数学の枝から、コンセプトを&lt;em&gt;カテゴリ理論&lt;/em&gt;。ただし、Haskellプログラマーの観点からは、モナドをアクションの&lt;em&gt;抽象的なデータ型&lt;/em&gt;と考えるのが最善です。Haskellの &lt;code&gt;do&lt;/code&gt; 式は、モナド式を記述するための便利な構文を提供します。</target>
        </trans-unit>
        <trans-unit id="ee50bbd3c67bae7f49e378336e2e433f6106ccf0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-base#v:join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; function is the conventional monad join operator. It is used to remove one level of monadic structure, projecting its bound argument into the outer level.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-base#v:join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; 機能は、従来のモナド演算子を結合です。これは、1つのレベルのモナド構造を削除するために使用され、バインドされた引数を外部レベルに投影します。</target>
        </trans-unit>
        <trans-unit id="27aabb232ca4b09ca8d220a432dd7f16df59a935" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-conc#v:yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; action allows (forces, in a co-operative multitasking implementation) a context-switch to any other currently runnable threads (if any), and is occasionally useful when implementing concurrency abstractions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc#v:yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; アクションは、他の現在実行可能なスレッド（もしあれば）に（協同マルチタスクの実装の力）コンテキストスイッチを可能にし、並行性の抽象化を実装する際に時折有用です。</target>
        </trans-unit>
        <trans-unit id="4a132846a2c0d7c2c3007c1d18b85a3d84e2a398" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; action allows (forces, in a co-operative multitasking implementation) a context-switch to any other currently runnable threads (if any), and is occasionally useful when implementing concurrency abstractions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; アクションは、他の現在実行可能なスレッド（もしあれば）に（協同マルチタスクの実装の力）コンテキストスイッチを可能にし、並行性の抽象化を実装する際に時折有用です。</target>
        </trans-unit>
        <trans-unit id="9dd95524ffc61573839150d5ca8d3bbeafd0b7a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; class is used to name the upper and lower limits of a type. &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; is not a superclass of &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; since types that are not totally ordered may also have upper and lower bounds.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; クラスタイプの上限値と下限値に名前を付けるために使用されます。 &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; のスーパークラスではありません。完全に順序付けられていない型にも上限と下限がある場合があるためです。</target>
        </trans-unit>
        <trans-unit id="3e4a35f48d43f24d53c5bb16b69fba56be493a94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; class may be derived for any enumeration type; &lt;code&gt;&lt;a href=&quot;ghc-enum#v:minBound&quot;&gt;minBound&lt;/a&gt;&lt;/code&gt; is the first constructor listed in the &lt;code&gt;data&lt;/code&gt; declaration and &lt;code&gt;&lt;a href=&quot;ghc-enum#v:maxBound&quot;&gt;maxBound&lt;/a&gt;&lt;/code&gt; is the last. &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; may also be derived for single-constructor datatypes whose constituent types are in &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; クラスは、任意の列挙型に対して導出されてもよいです。 &lt;code&gt;&lt;a href=&quot;ghc-enum#v:minBound&quot;&gt;minBound&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;data&lt;/code&gt; 宣言にリストされている最初のコンストラクタで、 &lt;code&gt;&lt;a href=&quot;ghc-enum#v:maxBound&quot;&gt;maxBound&lt;/a&gt;&lt;/code&gt; は最後です。 &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; は、構成要素の型が &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; にある単一コンストラクターのデータ型に対しても導出できます。</target>
        </trans-unit>
        <trans-unit id="674d2d4d75029f825bd270a8d08697ebd9b70ba6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; classes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-enum#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; クラス。</target>
        </trans-unit>
        <trans-unit id="5927fd518988da69d26cdf922ae3e2a15412bf75" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt;&lt;/code&gt; type allows you to reverse sort order conveniently. A value of type &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; contains a value of type &lt;code&gt;a&lt;/code&gt; (represented as &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt;&lt;/code&gt; タイプを使用すると、便利なソート順序を逆にすることができます。タイプの値 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; 型の値が含まれている &lt;code&gt;a&lt;/code&gt; （として表さ &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c5cd6d00d90b1e061059918ba18205b11c14c002" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt;&lt;/code&gt; type allows you to reverse sort order conveniently. A value of type &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; contains a value of type &lt;code&gt;a&lt;/code&gt; (represented as &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt;). If &lt;code&gt;a&lt;/code&gt; has an &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; instance associated with it then comparing two values thus wrapped will give you the opposite of their normal sort order. This is particularly useful when sorting in generalised list comprehensions, as in: &lt;code&gt;then sortWith by &lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt; x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt;&lt;/code&gt; タイプを使用すると、便利なソート順序を逆にすることができます。タイプ &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; の値には、タイプ &lt;code&gt;a&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; として表される）の値が含まれます。 &lt;code&gt;a&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; インスタンスが関連付けられている場合、このようにラップされた2つの値を比較すると、通常のソート順とは逆になります。これは、次のように一般化されたリスト内包表記でソートする場合に特に便利です。 &lt;code&gt;then sortWith by &lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt; x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf4c3fac24e8ca008ba612ac6b40c0fcd012f0f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#t:IsList&quot;&gt;IsList&lt;/a&gt;&lt;/code&gt; class and its methods are intended to be used in conjunction with the OverloadedLists extension.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#t:IsList&quot;&gt;IsList&lt;/a&gt;&lt;/code&gt; のクラス及びそのメソッドをOverloadedLists拡張と併せて使用されることが意図されます。</target>
        </trans-unit>
        <trans-unit id="d7ba5830092cef4d84647e79c69131dbc7adc059" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Item&quot;&gt;Item&lt;/a&gt;&lt;/code&gt; type function returns the type of items of the structure &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#t:Item&quot;&gt;Item&lt;/a&gt;&lt;/code&gt; タイプの機能は、構造の項目のタイプを返し &lt;code&gt;l&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0f84b47ee1d124d1ca79a226e83d25027b22134b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromList&quot;&gt;fromList&lt;/a&gt;&lt;/code&gt; function constructs the structure &lt;code&gt;l&lt;/code&gt; from the given list of &lt;code&gt;Item l&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromList&quot;&gt;fromList&lt;/a&gt;&lt;/code&gt; 関数は、構造構築 &lt;code&gt;l&lt;/code&gt; 所定のリストから &lt;code&gt;Item l&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="39677f8a87165f5afc7795359f53bb6627c8c811" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromListN&quot;&gt;fromListN&lt;/a&gt;&lt;/code&gt; function takes the input list's length and potentially uses it to construct the structure &lt;code&gt;l&lt;/code&gt; more efficiently compared to &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromList&quot;&gt;fromList&lt;/a&gt;&lt;/code&gt;. If the given number does not equal to the input list's length the behaviour of &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromListN&quot;&gt;fromListN&lt;/a&gt;&lt;/code&gt; is not specified.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromListN&quot;&gt;fromListN&lt;/a&gt;&lt;/code&gt; の機能は、入力リストの長さを取り、潜在構造構築するためにそれを使用 &lt;code&gt;l&lt;/code&gt; と比較して、より効率的に &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromList&quot;&gt;fromList&lt;/a&gt;&lt;/code&gt; 。指定された数が入力リストの長さと等しくない場合、 &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromListN&quot;&gt;fromListN&lt;/a&gt;&lt;/code&gt; の動作は指定されません。</target>
        </trans-unit>
        <trans-unit id="ceee73322b5e0bdd5f3091f55d6384a70d17944b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromListN&quot;&gt;fromListN&lt;/a&gt;&lt;/code&gt; function takes the input list's length as a hint. Its behaviour should be equivalent to &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromList&quot;&gt;fromList&lt;/a&gt;&lt;/code&gt;. The hint can be used to construct the structure &lt;code&gt;l&lt;/code&gt; more efficiently compared to &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromList&quot;&gt;fromList&lt;/a&gt;&lt;/code&gt;. If the given hint does not equal to the input list's length the behaviour of &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromListN&quot;&gt;fromListN&lt;/a&gt;&lt;/code&gt; is not specified.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromListN&quot;&gt;fromListN&lt;/a&gt;&lt;/code&gt; の機能がヒントとして入力リストの長さを取ります。その動作は &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromList&quot;&gt;fromList&lt;/a&gt;&lt;/code&gt; と同等でなければなりません。ヒントを使用すると、 &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromList&quot;&gt;fromList&lt;/a&gt;&lt;/code&gt; と比較してより効率的に構造 &lt;code&gt;l&lt;/code&gt; を構築できます。指定されたヒントが入力リストの長さに等しくない場合、 &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromListN&quot;&gt;fromListN&lt;/a&gt;&lt;/code&gt; の動作は指定されません。</target>
        </trans-unit>
        <trans-unit id="c5c04c12c048d0307d00092d987715f0d989db28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#v:groupWith&quot;&gt;groupWith&lt;/a&gt;&lt;/code&gt; function uses the user supplied function which projects an element out of every list element in order to first sort the input list and then to form groups by equality on these projected elements</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#v:groupWith&quot;&gt;groupWith&lt;/a&gt;&lt;/code&gt; の機能は、これらの突出要素に対して等価によりフォームグループに最初のソート入力リストするために、すべてのリストの要素のうち、要素を投影し、ユーザ提供の関数を使用し</target>
        </trans-unit>
        <trans-unit id="695facc226b98a2fdc94f961971c4ce121f69e9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#v:lazy&quot;&gt;lazy&lt;/a&gt;&lt;/code&gt; function restrains strictness analysis a little. The call &lt;code&gt;lazy e&lt;/code&gt; means the same as &lt;code&gt;e&lt;/code&gt;, but &lt;code&gt;&lt;a href=&quot;ghc-exts#v:lazy&quot;&gt;lazy&lt;/a&gt;&lt;/code&gt; has a magical property so far as strictness analysis is concerned: it is lazy in its first argument, even though its semantics is strict. After strictness analysis has run, calls to &lt;code&gt;&lt;a href=&quot;ghc-exts#v:lazy&quot;&gt;lazy&lt;/a&gt;&lt;/code&gt; are inlined to be the identity function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#v:lazy&quot;&gt;lazy&lt;/a&gt;&lt;/code&gt; 機能の拘束具厳し分析少し。コール &lt;code&gt;lazy e&lt;/code&gt; 同じ意味 &lt;code&gt;e&lt;/code&gt; 、しかし、 &lt;code&gt;&lt;a href=&quot;ghc-exts#v:lazy&quot;&gt;lazy&lt;/a&gt;&lt;/code&gt; 、これまで厳密解析に関しては不思議な性質を持っている：それはその意味が厳格であっても、その最初の引数で怠惰です。厳密性分析が実行された後、 &lt;code&gt;&lt;a href=&quot;ghc-exts#v:lazy&quot;&gt;lazy&lt;/a&gt;&lt;/code&gt; への呼び出しは恒等関数になるようにインライン化されます。</target>
        </trans-unit>
        <trans-unit id="c62e040021cb66d2ce6289579ad247f811fcaf97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#v:oneShot&quot;&gt;oneShot&lt;/a&gt;&lt;/code&gt; function can be used to give a hint to the compiler that its argument will be called at most once, which may (or may not) enable certain optimizations. It can be useful to improve the performance of code in continuation passing style.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#v:oneShot&quot;&gt;oneShot&lt;/a&gt;&lt;/code&gt; 機能は（またはしない場合があります）特定の最適化を可能にする、その引数を一度最大で呼び出されることをコンパイラにヒントを与えるために使用することができます。継続渡しスタイルでコードのパフォーマンスを改善すると便利です。</target>
        </trans-unit>
        <trans-unit id="738f70f90664f23041407e78e7481ca578a61fb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#v:sortWith&quot;&gt;sortWith&lt;/a&gt;&lt;/code&gt; function sorts a list of elements using the user supplied function to project something out of each element</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#v:sortWith&quot;&gt;sortWith&lt;/a&gt;&lt;/code&gt; の機能は、各要素のうち、プロジェクトの何かにユーザが指定した関数を使用して、要素のリストを並べ替え</target>
        </trans-unit>
        <trans-unit id="f8c0871b5b6f8b978adbdfa4a64b81796ab60e0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#v:toList&quot;&gt;toList&lt;/a&gt;&lt;/code&gt; function extracts a list of &lt;code&gt;Item l&lt;/code&gt; from the structure &lt;code&gt;l&lt;/code&gt;. It should satisfy fromList . toList = id.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#v:toList&quot;&gt;toList&lt;/a&gt;&lt;/code&gt; 機能は、リスト抽出 &lt;code&gt;Item l&lt;/code&gt; 構造から &lt;code&gt;l&lt;/code&gt; 。fromListを満たす必要があります。toList = id。</target>
        </trans-unit>
        <trans-unit id="b18ac779aba3ac796c0284e4d2cc3bb7c69a9f44" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; is parameterised in the same way as &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt;. The type argument of &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; should normally be an instance of class &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; は同じようにパラメータ化される &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; 。型引数 &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; は、通常、クラスのインスタンスである必要があり &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; が。</target>
        </trans-unit>
        <trans-unit id="c5c813e0c538449c8b967f68e862c925ce84f9ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-generics#t:C1&quot;&gt;C1&lt;/a&gt; ('MetaCons &quot;Leaf&quot; 'PrefixI 'False)&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-generics#t:C1&quot;&gt;C1&lt;/a&gt; ('MetaCons &quot;Node&quot; 'PrefixI 'False)&lt;/code&gt; invocations indicate that the enclosed part is the representation of the first and second constructor of datatype &lt;code&gt;Tree&lt;/code&gt;, respectively. Here, the meta-information regarding constructor names, fixity and whether it has named fields or not is encoded at the type level. The &lt;code&gt;'MetaCons&lt;/code&gt; type is also an instance of the type class &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Constructor&quot;&gt;Constructor&lt;/a&gt;&lt;/code&gt;. This type class can be used to obtain information about the constructor at the value level.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-generics#t:C1&quot;&gt;C1&lt;/a&gt; ('MetaCons &quot;Leaf&quot; 'PrefixI 'False)&lt;/code&gt; 及び &lt;code&gt;&lt;a href=&quot;ghc-generics#t:C1&quot;&gt;C1&lt;/a&gt; ('MetaCons &quot;Node&quot; 'PrefixI 'False)&lt;/code&gt; の呼び出しは、囲まれた部分は、データ型の第一及び第二のコンストラクタの表現であることを示す &lt;code&gt;Tree&lt;/code&gt; それぞれ。ここで、コンストラクター名、固定性、および名前付きフィールドがあるかどうかに関するメタ情報は、型レベルでエンコードされます。 &lt;code&gt;'MetaCons&lt;/code&gt; タイプは、型クラスのインスタンスである &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Constructor&quot;&gt;Constructor&lt;/a&gt;&lt;/code&gt; 。この型クラスを使用して、値レベルのコンストラクターに関する情報を取得できます。</target>
        </trans-unit>
        <trans-unit id="4b3758b0106cdc9eb50e8251878d12e347f33b9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-generics#t:D1&quot;&gt;D1&lt;/a&gt; ('MetaData &quot;Tree&quot; &quot;Main&quot; &quot;package-name&quot; 'False)&lt;/code&gt; tag indicates that the enclosed part is the representation of the datatype &lt;code&gt;Tree&lt;/code&gt;. Again, the meta-information is encoded at the type level. The &lt;code&gt;'MetaData&lt;/code&gt; type is an instance of class &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Datatype&quot;&gt;Datatype&lt;/a&gt;&lt;/code&gt;, which can be used to obtain the name of a datatype, the module it has been defined in, the package it is located under, and whether it has been defined using &lt;code&gt;data&lt;/code&gt; or &lt;code&gt;newtype&lt;/code&gt; at the value level.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-generics#t:D1&quot;&gt;D1&lt;/a&gt; ('MetaData &quot;Tree&quot; &quot;Main&quot; &quot;package-name&quot; 'False)&lt;/code&gt; タグは、囲まれた部分がデータ型の表現であることを示している &lt;code&gt;Tree&lt;/code&gt; 。この場合も、メタ情報はタイプレベルでエンコードされます。 &lt;code&gt;'MetaData&lt;/code&gt; タイプは、クラスのインスタンスであり、 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Datatype&quot;&gt;Datatype&lt;/a&gt;&lt;/code&gt; 、データ型の名前を取得するために使用することができ、それはで定義されているモジュール、それは下に配置されているパッケージ、およびそれが使用して定義されているかどうか &lt;code&gt;data&lt;/code&gt; または &lt;code&gt;newtype&lt;/code&gt; 時価値レベル。</target>
        </trans-unit>
        <trans-unit id="490133c0313c9ba8b7db7fbe7e0fe5b2bf18b53d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; class can be generalized to range over types of kind &lt;code&gt;k -&amp;gt; *&lt;/code&gt;, for any kind &lt;code&gt;k&lt;/code&gt;. To do so, derive a &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; instance with the &lt;code&gt;PolyKinds&lt;/code&gt; extension enabled. For example, the declaration</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; のクラスは一種の種類以上の範囲に一般化することができる &lt;code&gt;k -&amp;gt; *&lt;/code&gt; いずれかの種類のために、 &lt;code&gt;k&lt;/code&gt; 。そのためには、導出 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; を持つインスタンス &lt;code&gt;PolyKinds&lt;/code&gt; の拡張機能が有効になって。たとえば、宣言</target>
        </trans-unit>
        <trans-unit id="b51e7af78f64d86aed93f2c4d635092dabfbb762" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-generics#t:S1&quot;&gt;S1&lt;/a&gt; ('MetaSel 'Nothing 'NoSourceUnpackedness 'NoSourceStrictness
      'DecidedLazy)&lt;/code&gt; tag indicates several things. The &lt;code&gt;'Nothing&lt;/code&gt; indicates that there is no record field selector associated with this field of the constructor (if there were, it would have been marked &lt;code&gt;'Just
      &quot;recordName&quot;&lt;/code&gt; instead). The other types contain meta-information on the field's strictness:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-generics#t:S1&quot;&gt;S1&lt;/a&gt; ('MetaSel 'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)&lt;/code&gt; タグは、いくつかのことを示します。 &lt;code&gt;'Nothing&lt;/code&gt; コンストラクタのこのフィールドに関連付けられたレコードのフィールドセレクタが存在しないことを示している（があった場合、それがマークされていたであろう &lt;code&gt;'Just &quot;recordName&quot;&lt;/code&gt; ではなく）。他のタイプには、フィールドの厳密性に関するメタ情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="d0cdba7fd39b9182aef4d3fd8dd460a16d152145" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; タイプ。</target>
        </trans-unit>
        <trans-unit id="ccb84e64bf7ed15245460804350d5f1cb2e76cd3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-io-encoding-failure#t:CodingFailureMode&quot;&gt;CodingFailureMode&lt;/a&gt;&lt;/code&gt; is used to construct &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt;s, and specifies how they handle illegal sequences.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-encoding-failure#t:CodingFailureMode&quot;&gt;CodingFailureMode&lt;/a&gt;&lt;/code&gt; を構築するために使用され &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; S、そして、彼らは違法なシーケンスを処理する方法を指定します。</target>
        </trans-unit>
        <trans-unit id="71ec4fbd1cac8b401802c535c7f65214143acd87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetContents-39-&quot;&gt;hGetContents'&lt;/a&gt;&lt;/code&gt; operation reads all input on the given handle before returning it as a &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; and closing the handle.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetContents-39-&quot;&gt;hGetContents'&lt;/a&gt;&lt;/code&gt; 操作は、としてそれを返す前に与えられたハンドル上のすべての入力を読み取り &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; とハンドルを閉じます。</target>
        </trans-unit>
        <trans-unit id="787de66be7bec193d5479d5569e0c178f340123a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetContents-39-&quot;&gt;hGetContents'&lt;/a&gt;&lt;/code&gt; operation reads all input on the given handle before returning it as a &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; and closing the handle.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetContents-39-&quot;&gt;hGetContents'&lt;/a&gt;&lt;/code&gt; 操作は、としてそれを返す前に与えられたハンドル上のすべての入力を読み取り &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; とハンドルを閉じます。</target>
        </trans-unit>
        <trans-unit id="755de46cccecfaefa5e6388cdeaf72d6ecd06136" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; class is used to map a contiguous subrange of values in a type onto integers. It is used primarily for array indexing (see the array package).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; クラスは整数上のタイプの値の連続した部分範囲をマッピングするために使用されます。これは主に配列のインデックス作成に使用されます（配列パッケージを参照）。</target>
        </trans-unit>
        <trans-unit id="727269e258ca0cc1f5b84b187e061106f48b55ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-list#v:product&quot;&gt;product&lt;/a&gt;&lt;/code&gt; function computes the product of a finite list of numbers.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:product&quot;&gt;product&lt;/a&gt;&lt;/code&gt; 機能は、数字の有限リストの積を計算します。</target>
        </trans-unit>
        <trans-unit id="29f4142ef18f41223155d901b10e8d9efcecd6fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-list#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; function computes the sum of a finite list of numbers.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; 関数は、数値の有限リストの合計を計算します。</target>
        </trans-unit>
        <trans-unit id="791089d56d61f4d3b56178eb7352f6df80bab567" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-list#v:unzip3&quot;&gt;unzip3&lt;/a&gt;&lt;/code&gt; function takes a list of triples and returns three lists, analogous to &lt;code&gt;&lt;a href=&quot;ghc-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:unzip3&quot;&gt;unzip3&lt;/a&gt;&lt;/code&gt; 機能はに類似した、トリプルとリターン3つのリストのリストを取り &lt;code&gt;&lt;a href=&quot;ghc-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5514609ab8e7a4d1ade5d1bc201f6e65aae2801a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; function takes a function which combines three elements, as well as three lists and returns a list of the function applied to corresponding elements, analogous to &lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; の関数は、に類似し、対応する要素に適用される機能のリスト3つの要素を組み合わせた機能を取り、ならびに3つのリストを返す &lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; 。リスト融合が可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="7bb018b60fccf9ba007b71e9eb3d8a718941c0f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; function takes a function which combines three elements, as well as three lists and returns a list of their point-wise combination, analogous to &lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; の機能は3つの要素だけでなく、3つのリストを組み合わせて、に類似し、そのポイントごとの組み合わせのリスト、返す関数取る &lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; を。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="24f96e687e4620b9109ecaf114edba80a1baa66c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; type encapsulates an optional value. A value of type &lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt; a&lt;/code&gt; either contains a value of type &lt;code&gt;a&lt;/code&gt; (represented as &lt;code&gt;&lt;a href=&quot;ghc-maybe#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt;), or it is empty (represented as &lt;code&gt;&lt;a href=&quot;ghc-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;). Using &lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; is a good way to deal with errors or exceptional cases without resorting to drastic measures such as &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; タイプは、任意の値をカプセル化します。型の値は、 &lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt; a&lt;/code&gt; どちらのタイプの値が含まれている（ように表さ &lt;code&gt;&lt;a href=&quot;ghc-maybe#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt; A）、またはそれは（のように表さ空で &lt;code&gt;&lt;a href=&quot;ghc-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; ）。使用 &lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; など、抜本的な対策に頼ることなく、エラーや例外的な場合に対処するための良い方法です &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="266e593abd43191340f9b33fd8e15a10e0dc922a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; type is also a monad. It is a simple kind of error monad, where all errors are represented by &lt;code&gt;&lt;a href=&quot;ghc-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;. A richer error monad can be built using the &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; タイプもモナドです。これは単純な種類のエラーモナドであり、すべてのエラーは &lt;code&gt;&lt;a href=&quot;ghc-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; で表されます。 &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; 型を使用して、より豊富なエラーモナドを構築できます。</target>
        </trans-unit>
        <trans-unit id="b66270e05d2350973bd17982c61ae01a11e0a3f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-num#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; class and the &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-num#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; クラスと &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; タイプ。</target>
        </trans-unit>
        <trans-unit id="d90a8339ada736c69e4569a04518d30718bf0396" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:-92--92-&quot;&gt;\\&lt;/a&gt;&lt;/code&gt; function is list difference (non-associative). In the result of &lt;code&gt;xs&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:-92--92-&quot;&gt;\\&lt;/a&gt;&lt;/code&gt;&lt;code&gt;ys&lt;/code&gt;, the first occurrence of each element of &lt;code&gt;ys&lt;/code&gt; in turn (if any) has been removed from &lt;code&gt;xs&lt;/code&gt;. Thus</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:-92--92-&quot;&gt;\\&lt;/a&gt;&lt;/code&gt; 関数は、リストの違い（非結合）です。 &lt;code&gt;xs&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:-92--92-&quot;&gt;\\&lt;/a&gt;&lt;/code&gt; &lt;code&gt;ys&lt;/code&gt; の結果では、 &lt;code&gt;ys&lt;/code&gt; の各要素の最初の出現（存在する場合）が &lt;code&gt;xs&lt;/code&gt; から削除されています。したがって</target>
        </trans-unit>
        <trans-unit id="5f790bce52b575010739edf6cb02aa96c2885cb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:deleteFirstsBy&quot;&gt;deleteFirstsBy&lt;/a&gt;&lt;/code&gt; function takes a predicate and two lists and returns the first list with the first occurrence of each element of the second list removed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:deleteFirstsBy&quot;&gt;deleteFirstsBy&lt;/a&gt;&lt;/code&gt; の関数は述語と二つのリストを取り、除去第二のリストの各要素の最初の発生と最初のリストを返します。</target>
        </trans-unit>
        <trans-unit id="a978c3a6eaa51a8f531e3682bd2d367abf6607ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:dropWhileEnd&quot;&gt;dropWhileEnd&lt;/a&gt;&lt;/code&gt; function drops the largest suffix of a list in which the given predicate holds for all elements. For example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:dropWhileEnd&quot;&gt;dropWhileEnd&lt;/a&gt;&lt;/code&gt; の機能は、与えられた述語がすべての要素のために保持しているリストの最大の接尾辞を削除します。例えば：</target>
        </trans-unit>
        <trans-unit id="109bdc9435b830725cf189c556de56387a5634f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; function returns the index of the first element in the given list which is equal (by &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt;) to the query element, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; の関数は、（によって等しく与えられたリストの最初の要素のインデックスを返し &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; クエリ要素に）、または &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; そのような要素が存在しない場合に。</target>
        </trans-unit>
        <trans-unit id="fadb3e5498f5526f3f541154cc26a34805337369" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elemIndices&quot;&gt;elemIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements equal to the query element, in ascending order.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elemIndices&quot;&gt;elemIndices&lt;/a&gt;&lt;/code&gt; の関数が延び &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; を昇順に、全ての要素のインデックスは、クエリ要素に等しい戻すことによって、。</target>
        </trans-unit>
        <trans-unit id="6568db6f34d6f7a7bf8a446041bb3489740f3067" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; function takes a predicate and a list and returns the first element in the list matching the predicate, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; 機能は、述語とリストを受け取り、最初の述部に一致するリストの要素、または返し &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; そのような要素が存在しない場合。</target>
        </trans-unit>
        <trans-unit id="4275cc9b36aa0e4769199e754686defa1594e4b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; function takes a predicate and a list and returns the index of the first element in the list satisfying the predicate, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; の関数は述語とリストを取り、述語を満たすリストの最初の要素のインデックスを返すか、または &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; そのような要素が存在しない場合。</target>
        </trans-unit>
        <trans-unit id="2f76c76695266af5e321e89b84f46bb9a822c35f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements satisfying the predicate, in ascending order.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; の関数が延び &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; を昇順に、述語を満たすすべての要素のインデックスを返すことによって、。</target>
        </trans-unit>
        <trans-unit id="305fac941a1cc5c29fd70cdde5362cbcac036635" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericDrop&quot;&gt;genericDrop&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the number of elements to drop.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericDrop&quot;&gt;genericDrop&lt;/a&gt;&lt;/code&gt; の機能は、オーバーロードされたバージョンである &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; 任意受け付け、 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 削除する要素の数として値。</target>
        </trans-unit>
        <trans-unit id="acf544a13e18ba4358a78c184967bf2f876a1aec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericIndex&quot;&gt;genericIndex&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:-33--33-&quot;&gt;!!&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the index.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericIndex&quot;&gt;genericIndex&lt;/a&gt;&lt;/code&gt; の機能はのオーバーロードバージョンです &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:-33--33-&quot;&gt;!!&lt;/a&gt;&lt;/code&gt; 、任意の &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 値をインデックスとして受け入れます。</target>
        </trans-unit>
        <trans-unit id="813efa98177dcd58489481e0cb89e0133d9e87e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the number of repetitions to make.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt; の機能は、オーバーロードされたバージョンである &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt; 任意受け付け、 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 繰り返し回数を作るように値。</target>
        </trans-unit>
        <trans-unit id="d7d4ee3930a7434ca7c403b4565de9be9be21b9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericSplitAt&quot;&gt;genericSplitAt&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the position at which to split.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericSplitAt&quot;&gt;genericSplitAt&lt;/a&gt;&lt;/code&gt; の機能は、オーバーロードされたバージョンである &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; 任意受け付け、 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 分割する位置として値。</target>
        </trans-unit>
        <trans-unit id="e4afafa2336fcae4601a2eaca8e96fec05a60b92" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericTake&quot;&gt;genericTake&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the number of elements to take.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericTake&quot;&gt;genericTake&lt;/a&gt;&lt;/code&gt; の機能は、オーバーロードされたバージョンである &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; 任意受け付け、 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 取るための要素の数として値。</target>
        </trans-unit>
        <trans-unit id="f4f6a5e91131c42f6af8de505ab848b2b5f93891" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; function takes a list and returns a list of lists such that the concatenation of the result is equal to the argument. Moreover, each sublist in the result contains only equal elements. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 機能は、リストを取り、結果の連結が引数に等しくなるようにリストのリストを返します。さらに、結果の各サブリストには等しい要素のみが含まれます。例えば、</target>
        </trans-unit>
        <trans-unit id="d100c0bef6b2c8b32f44a08a7e7eacb8db8f8cbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; 機能は、非オーバーロードされたバージョンである &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="34b65659a51ccdb8baad87c00cd32d74ef9d403b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:inits&quot;&gt;inits&lt;/a&gt;&lt;/code&gt; function returns all initial segments of the argument, shortest first. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:inits&quot;&gt;inits&lt;/a&gt;&lt;/code&gt; 戻り引数の全ての初期セグメントを、最短の最初の機能します。例えば、</target>
        </trans-unit>
        <trans-unit id="144853d03169fd7769ada44b12eba567928f0591" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:intersect&quot;&gt;intersect&lt;/a&gt;&lt;/code&gt; function takes the list intersection of two lists. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:intersect&quot;&gt;intersect&lt;/a&gt;&lt;/code&gt; 機能は、二つのリストのリストの交差点を取ります。例えば、</target>
        </trans-unit>
        <trans-unit id="605c4315b576beab0a53cad6a48c3adba1b2f451" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:intersectBy&quot;&gt;intersectBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:intersect&quot;&gt;intersect&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:intersectBy&quot;&gt;intersectBy&lt;/a&gt;&lt;/code&gt; の機能は、非オーバーロードされたバージョンである &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:intersect&quot;&gt;intersect&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="abf262d8a1cc937359d5c3c8f6075d27f69eb8ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:isInfixOf&quot;&gt;isInfixOf&lt;/a&gt;&lt;/code&gt; function takes two lists and returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first list is contained, wholly and intact, anywhere within the second.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:isInfixOf&quot;&gt;isInfixOf&lt;/a&gt;&lt;/code&gt; の機能は二つのリストを返すとり &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; のどこ秒以内に、完全に無傷の、含まれている最初のリストIFFを。</target>
        </trans-unit>
        <trans-unit id="88d273a08a3e06000e98c2629e1e60ff60ea1336" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; function takes two lists and returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first list is a suffix of the second. The second list must be finite.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; の関数は二つのリストを受け取り、返す &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 最初のリストは、第二の接尾辞である場合に限っ。2番目のリストは有限でなければなりません。</target>
        </trans-unit>
        <trans-unit id="551caf48474039991548fe9ddb64d72b72493414" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a list, passing an accumulating parameter from left to right, and returning a final value of this accumulator together with the new list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; の。リストの各要素に関数を適用し、累積パラメーターを左から右に渡し、このアキュムレーターの最終値を新しいリストと共に返します。</target>
        </trans-unit>
        <trans-unit id="8de586ae79a455858fed3746ae4e38cd05c48c19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a list, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; の組み合わせのような機能の振る舞い &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; 。リストの各要素に関数を適用し、累積パラメーターを右から左に渡し、新しいリストと共にこのアキュムレーターの最終値を返します。</target>
        </trans-unit>
        <trans-unit id="2391074ba068c80233175c59983a54b8066a4878" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:maximumBy&quot;&gt;maximumBy&lt;/a&gt;&lt;/code&gt; function takes a comparison function and a list and returns the greatest element of the list by the comparison function. The list must be finite and non-empty.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:maximumBy&quot;&gt;maximumBy&lt;/a&gt;&lt;/code&gt; の機能は、比較関数とリストを取り、比較関数によってリストの最大の要素を返します。リストは有限で空でない必要があります。</target>
        </trans-unit>
        <trans-unit id="cef47277c570e470c285b99dbd14acd85cf932dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:minimumBy&quot;&gt;minimumBy&lt;/a&gt;&lt;/code&gt; function takes a comparison function and a list and returns the least element of the list by the comparison function. The list must be finite and non-empty.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:minimumBy&quot;&gt;minimumBy&lt;/a&gt;&lt;/code&gt; の機能は、比較機能とリストを受け取り、比較関数によってリストの最低要素を返します。リストは有限で空でない必要があります。</target>
        </trans-unit>
        <trans-unit id="057b661eee28e56248a47e5a122b7f8d64ae8148" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:nubBy&quot;&gt;nubBy&lt;/a&gt;&lt;/code&gt; function behaves just like &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt;, except it uses a user-supplied equality predicate instead of the overloaded &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:nubBy&quot;&gt;nubBy&lt;/a&gt;&lt;/code&gt; の機能は、ちょうど同じように動作し &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; ではなく、オーバーロードのユーザ供給等価述語使用する以外、 &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; 機能を。</target>
        </trans-unit>
        <trans-unit id="19f8893f6a607220120cf57b88c38b3c50e89e8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; function takes a predicate a list and returns the pair of lists of elements which do and do not satisfy the predicate, respectively; i.e.,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; 関数は、リスト述語を取り、行うと、それぞれの述語を満たさない要素のリストのペアを返します。つまり、</target>
        </trans-unit>
        <trans-unit id="2d853a061eb012af5ee71d94b4188db9e7e27bb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:permutations&quot;&gt;permutations&lt;/a&gt;&lt;/code&gt; function returns the list of all permutations of the argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:permutations&quot;&gt;permutations&lt;/a&gt;&lt;/code&gt; 関数は、引数のすべての順列のリストを返します。</target>
        </trans-unit>
        <trans-unit id="0d369bcd6ff7a16017fc81230836cb1e2c9c3d1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:product&quot;&gt;product&lt;/a&gt;&lt;/code&gt; function computes the product of a finite list of numbers.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:product&quot;&gt;product&lt;/a&gt;&lt;/code&gt; 機能は、数字の有限リストの積を計算します。</target>
        </trans-unit>
        <trans-unit id="7601896a58f38cef45cf3ec9dd3675ffa2b1f23a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; function implements a stable sorting algorithm. It is a special case of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own comparison function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; 機能は、ソートアルゴリズムの安定を実現しています。これは、プログラマーが独自の比較関数を提供できるようにする &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt; の特殊なケースです。</target>
        </trans-unit>
        <trans-unit id="c7da3570e28419be0578ffd1de4f0b1fde8e86aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt; 機能は、非オーバーロードされたバージョンで &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2f1f49bd6e008dde965696cc4f68b37f4c1c2ff6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:subsequences&quot;&gt;subsequences&lt;/a&gt;&lt;/code&gt; function returns the list of all subsequences of the argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:subsequences&quot;&gt;subsequences&lt;/a&gt;&lt;/code&gt; 関数は、引数のすべてのサブシーケンスのリストを返します。</target>
        </trans-unit>
        <trans-unit id="a6406e7e60d1afb305384d5af825ad223afd4d34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; function computes the sum of a finite list of numbers.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; 関数は、数値の有限リストの合計を計算します。</target>
        </trans-unit>
        <trans-unit id="26c98a67aa07a5febf23006c6463cf654a93d6a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; function transposes the rows and columns of its argument. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; 関数は引数の行と列を転置します。例えば、</target>
        </trans-unit>
        <trans-unit id="c88aa8ebb4d5e9ab3079fc636599897089099a45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; function is a `dual' to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;: while &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; reduces a list to a summary value, &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; builds a list from a seed value. The function takes the element and returns &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if it is done producing the list or returns &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;&lt;code&gt;(a,b)&lt;/code&gt;, in which case, &lt;code&gt;a&lt;/code&gt; is a prepended to the list and &lt;code&gt;b&lt;/code&gt; is used as the next element in a recursive call. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; 機能はする「`デュアルある &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; ：ながら、 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; は要約値にリストを減らし、 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; はシード値からリストを作成します。関数は要素を受け取り、リストの生成が完了した場合は &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を返すか &lt;code&gt;(a,b)&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; （a、b）を返します。この場合、 &lt;code&gt;a&lt;/code&gt; はリストの先頭に付加され、 &lt;code&gt;b&lt;/code&gt; は再帰呼び出しの次の要素として使用されます。例えば、</target>
        </trans-unit>
        <trans-unit id="27a85700d4b6c91457baf0366be6c72427d177b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; function returns the list union of the two lists. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; 機能は、二つのリストのリストの和集合を返します。例えば、</target>
        </trans-unit>
        <trans-unit id="897e5cd71a34240e2a452fc04aada2f8a3873766" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unionBy&quot;&gt;unionBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unionBy&quot;&gt;unionBy&lt;/a&gt;&lt;/code&gt; の機能は、非オーバーロードされたバージョンである &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8a213a220259b72a83d767902fd9b906a21d8991" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip3&quot;&gt;unzip3&lt;/a&gt;&lt;/code&gt; function takes a list of triples and returns three lists, analogous to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip3&quot;&gt;unzip3&lt;/a&gt;&lt;/code&gt; 機能はに類似した、トリプルとリターン3つのリストのリストを取り &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a9f131d892100da4fd025f7a8ecff18fd3436b21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip4&quot;&gt;unzip4&lt;/a&gt;&lt;/code&gt; function takes a list of quadruples and returns four lists, analogous to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip4&quot;&gt;unzip4&lt;/a&gt;&lt;/code&gt; 機能はに類似し、四倍とリターン4つのリストのリストを取り &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f19f192bc7bca3bb3b366a104a1495f29a2a94b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip5&quot;&gt;unzip5&lt;/a&gt;&lt;/code&gt; function takes a list of five-tuples and returns five lists, analogous to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip5&quot;&gt;unzip5&lt;/a&gt;&lt;/code&gt; 機能はに類似し、5タプルとリターン5つのリストのリストを受け取り &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12f0884943983f42126b4d7235d7fee19d6961ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip6&quot;&gt;unzip6&lt;/a&gt;&lt;/code&gt; function takes a list of six-tuples and returns six lists, analogous to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip6&quot;&gt;unzip6&lt;/a&gt;&lt;/code&gt; 機能は、6つのタプルのリストを受け取り、に似6つのリスト、返し &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd0ada4ba254397c7f2074cd7fe54881a14745ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip7&quot;&gt;unzip7&lt;/a&gt;&lt;/code&gt; function takes a list of seven-tuples and returns seven lists, analogous to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip7&quot;&gt;unzip7&lt;/a&gt;&lt;/code&gt; 機能はに類似し、7タプルとリターン7つのリストのリストを受け取り &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0a0bedc800fc663f9a45123739d0871e9842832" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip4&quot;&gt;zip4&lt;/a&gt;&lt;/code&gt; function takes four lists and returns a list of quadruples, analogous to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip4&quot;&gt;zip4&lt;/a&gt;&lt;/code&gt; 機能は4つのリストを受け取り、に類似した四倍のリスト、返し &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; ファイルを。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="b833eb65f6d996a715798ed453669aa9621f8431" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip5&quot;&gt;zip5&lt;/a&gt;&lt;/code&gt; function takes five lists and returns a list of five-tuples, analogous to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip5&quot;&gt;zip5&lt;/a&gt;&lt;/code&gt; 機能は、5つのリストを受け取り、に類似した5つのタプルのリストを返し &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; ファイルを。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="59728e29b809276b20b7cc9ae48caadda444d7f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip6&quot;&gt;zip6&lt;/a&gt;&lt;/code&gt; function takes six lists and returns a list of six-tuples, analogous to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip6&quot;&gt;zip6&lt;/a&gt;&lt;/code&gt; 機能は6個のリストを取り、に類似した6つのタプルのリストを返し &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; ファイルを。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="df3589322d209e15f6610db4bb0c1c54692646e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip7&quot;&gt;zip7&lt;/a&gt;&lt;/code&gt; function takes seven lists and returns a list of seven-tuples, analogous to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip7&quot;&gt;zip7&lt;/a&gt;&lt;/code&gt; 機能は7個のリストを取り、に類似した7つのタプルのリスト、返し &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; ファイルを。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="ebe2dcade01df40ba8567bc29c6d76d5179227b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; function takes a function which combines three elements, as well as three lists and returns a list of the function applied to corresponding elements, analogous to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; の関数は、に類似し、対応する要素に適用される機能のリスト3つの要素を組み合わせた機能を取り、ならびに3つのリストを返す &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; 。リスト融合が可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="7fb675c3384f90b4e5fdef7383e6b1b6d07309c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; function takes a function which combines three elements, as well as three lists and returns a list of their point-wise combination, analogous to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; の機能は3つの要素だけでなく、3つのリストを組み合わせて、に類似し、そのポイントごとの組み合わせのリスト、返す関数取る &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; を。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="4d9d273ee2479cdb2c6b8ef0f65b15d495db5a7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith4&quot;&gt;zipWith4&lt;/a&gt;&lt;/code&gt; function takes a function which combines four elements, as well as four lists and returns a list of their point-wise combination, analogous to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith4&quot;&gt;zipWith4&lt;/a&gt;&lt;/code&gt; の機能は四つの要素だけでなく、4つのリストを結合しに類似し、そのポイントごとの組み合わせのリスト、返す関数取る &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; を。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="6aa1fdb5c348373284d6b8cfbe31c2976333f351" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith5&quot;&gt;zipWith5&lt;/a&gt;&lt;/code&gt; function takes a function which combines five elements, as well as five lists and returns a list of their point-wise combination, analogous to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith5&quot;&gt;zipWith5&lt;/a&gt;&lt;/code&gt; の機能は、5つの要素だけでなく、5つのリストを組み合わせ、に類似し、そのポイントごとの組み合わせのリスト、返す関数取る &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; を。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="5fd0df64a913d6523d2c136a1cb0ba65ca9434f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith6&quot;&gt;zipWith6&lt;/a&gt;&lt;/code&gt; function takes a function which combines six elements, as well as six lists and returns a list of their point-wise combination, analogous to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith6&quot;&gt;zipWith6&lt;/a&gt;&lt;/code&gt; の機能は、6つの要素だけでなく、6つのリストを組み合わせ、に類似し、そのポイントごとの組み合わせのリスト、返す関数取る &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; を。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="57fc99e0dcfb0d585978688443e7472a5b1473e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith7&quot;&gt;zipWith7&lt;/a&gt;&lt;/code&gt; function takes a function which combines seven elements, as well as seven lists and returns a list of their point-wise combination, analogous to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith7&quot;&gt;zipWith7&lt;/a&gt;&lt;/code&gt; の機能は7つの要素だけでなく、7つのリストを組み合わせ、に類似し、そのポイントごとの組み合わせのリスト、返す関数取る &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; を。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="b1325d57361ccc732ebb070de994b0a2421219c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt;&lt;/code&gt; types and operations.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt;&lt;/code&gt; 型と操作。</target>
        </trans-unit>
        <trans-unit id="5763505508dac7b11615ee08a7acaba3fb632110" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-ptr#v:castPtr&quot;&gt;castPtr&lt;/a&gt;&lt;/code&gt; function casts a pointer from one type to another.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-ptr#v:castPtr&quot;&gt;castPtr&lt;/a&gt;&lt;/code&gt; の機能は、ある型から別の型のポインタをキャストします。</target>
        </trans-unit>
        <trans-unit id="a500ee9d80b7f54eb7f8c916b79c09da04687f2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; class and instances for basic data types.</source>
          <target state="translated">基本的なデータ型の &lt;code&gt;&lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; クラスとインスタンス。</target>
        </trans-unit>
        <trans-unit id="f5c958fd454a64dcb4c746fc275eb37dbbac1200" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-read#v:lex&quot;&gt;lex&lt;/a&gt;&lt;/code&gt; function reads a single lexeme from the input, discarding initial white space, and returning the characters that constitute the lexeme. If the input string contains only white space, &lt;code&gt;&lt;a href=&quot;ghc-read#v:lex&quot;&gt;lex&lt;/a&gt;&lt;/code&gt; returns a single successful `lexeme' consisting of the empty string. (Thus &lt;code&gt;&lt;a href=&quot;ghc-read#v:lex&quot;&gt;lex&lt;/a&gt; &quot;&quot; = [(&quot;&quot;,&quot;&quot;)]&lt;/code&gt;.) If there is no legal lexeme at the beginning of the input string, &lt;code&gt;&lt;a href=&quot;ghc-read#v:lex&quot;&gt;lex&lt;/a&gt;&lt;/code&gt; fails (i.e. returns &lt;code&gt;[]&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-read#v:lex&quot;&gt;lex&lt;/a&gt;&lt;/code&gt; 関数は、初期ホワイトスペースを破棄、入力から単一の語彙素を読み出し、語彙素を構成する文字を返します。入力文字列に空白のみが含まれている場合、 &lt;code&gt;&lt;a href=&quot;ghc-read#v:lex&quot;&gt;lex&lt;/a&gt;&lt;/code&gt; は空の文字列で構成される単一の成功した「語彙素」を返します。（したがって &lt;code&gt;&lt;a href=&quot;ghc-read#v:lex&quot;&gt;lex&lt;/a&gt; &quot;&quot; = [(&quot;&quot;,&quot;&quot;)]&lt;/code&gt; 。）入力文字列の先頭に有効な語彙素がない場合、 &lt;code&gt;&lt;a href=&quot;ghc-read#v:lex&quot;&gt;lex&lt;/a&gt;&lt;/code&gt; は失敗します（つまり、 &lt;code&gt;[]&lt;/code&gt; を返します）。</target>
        </trans-unit>
        <trans-unit id="86c3288ccf7776810d20b3731af2e3b40bfcb247" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; class, and related operations.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; クラス、および関連事業。</target>
        </trans-unit>
        <trans-unit id="9d5187961ae2687bea868b7eebea12a2b0fc9457" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; Monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; モナド。</target>
        </trans-unit>
        <trans-unit id="1a6e8251d60596b015e69b7b30aa3903c1d58def" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticKey&quot;&gt;StaticKey&lt;/a&gt;&lt;/code&gt; that can be used to look up the given &lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticPtr&quot;&gt;StaticPtr&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticKey&quot;&gt;StaticKey&lt;/a&gt;&lt;/code&gt; を検索するために使用できる &lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticPtr&quot;&gt;StaticPtr&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7476e9e0f102360787454857433b298127a63a2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Quote&quot;&gt;Quote&lt;/a&gt;&lt;/code&gt; class implements the minimal interface which is necessary for desugaring quotations.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Quote&quot;&gt;Quote&lt;/a&gt;&lt;/code&gt; クラスは引用を脱糖に必要な最小限のインタフェースを実装します。</target>
        </trans-unit>
        <trans-unit id="ed23a830eec8e95fb04719f3ba021e908eb49a47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:runIO&quot;&gt;runIO&lt;/a&gt;&lt;/code&gt; function lets you run an I/O computation in the &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Q&quot;&gt;Q&lt;/a&gt;&lt;/code&gt; monad. Take care: you are guaranteed the ordering of calls to &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:runIO&quot;&gt;runIO&lt;/a&gt;&lt;/code&gt; within a single &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Q&quot;&gt;Q&lt;/a&gt;&lt;/code&gt; computation, but not about the order in which splices are run.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:runIO&quot;&gt;runIO&lt;/a&gt;&lt;/code&gt; の機能を使用すると、中にI / Oの計算を実行することができます &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Q&quot;&gt;Q&lt;/a&gt;&lt;/code&gt; のモナド。注意：単一の &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Q&quot;&gt;Q&lt;/a&gt;&lt;/code&gt; 計算内での &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:runIO&quot;&gt;runIO&lt;/a&gt;&lt;/code&gt; の呼び出し順序は保証されますが、スプライスが実行される順序は保証されません。</target>
        </trans-unit>
        <trans-unit id="fa005a185e418ee86a0f14b966d5bed4334ff0bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#t:QuasiQuoter&quot;&gt;QuasiQuoter&lt;/a&gt;&lt;/code&gt; type, a value &lt;code&gt;q&lt;/code&gt; of this type can be used in the syntax &lt;code&gt;[q| ... string to parse ...|]&lt;/code&gt;. In fact, for convenience, a &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#t:QuasiQuoter&quot;&gt;QuasiQuoter&lt;/a&gt;&lt;/code&gt; actually defines multiple quasiquoters to be used in different splice contexts; if you are only interested in defining a quasiquoter to be used for expressions, you would define a &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#t:QuasiQuoter&quot;&gt;QuasiQuoter&lt;/a&gt;&lt;/code&gt; with only &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:quoteExp&quot;&gt;quoteExp&lt;/a&gt;&lt;/code&gt;, and leave the other fields stubbed out with errors.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#t:QuasiQuoter&quot;&gt;QuasiQuoter&lt;/a&gt;&lt;/code&gt; のタイプ、値 &lt;code&gt;q&lt;/code&gt; は、このタイプの構文で使用することができます &lt;code&gt;[q| ... string to parse ...|]&lt;/code&gt; 。実際、便宜上、 &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#t:QuasiQuoter&quot;&gt;QuasiQuoter&lt;/a&gt;&lt;/code&gt; は実際には、異なるスプライスコンテキストで使用される複数の準クォータを定義しています。あなただけの表現に使用するquasiquoterを定義するに興味があるなら、あなたは定義する &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#t:QuasiQuoter&quot;&gt;QuasiQuoter&lt;/a&gt;&lt;/code&gt; をだけで &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:quoteExp&quot;&gt;quoteExp&lt;/a&gt;&lt;/code&gt; 、およびエラーでアウトスタブ他のフィールドを残して。</target>
        </trans-unit>
        <trans-unit id="312071dde460138e1108547da6f4f1b6fb25ee33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Quote&quot;&gt;Quote&lt;/a&gt;&lt;/code&gt; class implements the minimal interface which is necessary for desugaring quotations.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Quote&quot;&gt;Quote&lt;/a&gt;&lt;/code&gt; クラスは引用を脱糖に必要な最小限のインタフェースを実装します。</target>
        </trans-unit>
        <trans-unit id="822f6a374e5da6792e8281daef5bc8cbc52436fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:runIO&quot;&gt;runIO&lt;/a&gt;&lt;/code&gt; function lets you run an I/O computation in the &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Q&quot;&gt;Q&lt;/a&gt;&lt;/code&gt; monad. Take care: you are guaranteed the ordering of calls to &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:runIO&quot;&gt;runIO&lt;/a&gt;&lt;/code&gt; within a single &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Q&quot;&gt;Q&lt;/a&gt;&lt;/code&gt; computation, but not about the order in which splices are run.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:runIO&quot;&gt;runIO&lt;/a&gt;&lt;/code&gt; の機能を使用すると、中にI / Oの計算を実行することができます &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Q&quot;&gt;Q&lt;/a&gt;&lt;/code&gt; のモナド。注意：単一の &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Q&quot;&gt;Q&lt;/a&gt;&lt;/code&gt; 計算内での &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:runIO&quot;&gt;runIO&lt;/a&gt;&lt;/code&gt; の呼び出し順序は保証されますが、スプライスが実行される順序は保証されません。</target>
        </trans-unit>
        <trans-unit id="8a0d53f38c6a950df5eadf21a9f9db4dfc69bf0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; class is used to name the upper and lower limits of a type. &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; is not a superclass of &lt;code&gt;&lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; since types that are not totally ordered may also have upper and lower bounds.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; クラスタイプの上限値と下限値に名前を付けるために使用されます。完全に順序付けられていない型には上限と下限がある場合があるため、 &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; のスーパークラスではありません。</target>
        </trans-unit>
        <trans-unit id="bf58cbc6033627535675be41f7c5c26c9a969514" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; class may be derived for any enumeration type; &lt;code&gt;&lt;a href=&quot;prelude#v:minBound&quot;&gt;minBound&lt;/a&gt;&lt;/code&gt; is the first constructor listed in the &lt;code&gt;data&lt;/code&gt; declaration and &lt;code&gt;&lt;a href=&quot;prelude#v:maxBound&quot;&gt;maxBound&lt;/a&gt;&lt;/code&gt; is the last. &lt;code&gt;&lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; may also be derived for single-constructor datatypes whose constituent types are in &lt;code&gt;&lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; クラスは、任意の列挙型に対して導出されてもよいです。 &lt;code&gt;&lt;a href=&quot;prelude#v:minBound&quot;&gt;minBound&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;data&lt;/code&gt; 宣言にリストされている最初のコンストラクタで、 &lt;code&gt;&lt;a href=&quot;prelude#v:maxBound&quot;&gt;maxBound&lt;/a&gt;&lt;/code&gt; は最後です。 &lt;code&gt;&lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; は、構成要素の型が &lt;code&gt;&lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; にある単一コンストラクターのデータ型に対しても導出できます。</target>
        </trans-unit>
        <trans-unit id="f24f4c3acddeb2d8485bbd7d048662ea4520e018" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; type is sometimes used to represent a value which is either correct or an error; by convention, the &lt;code&gt;&lt;a href=&quot;prelude#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; constructor is used to hold an error value and the &lt;code&gt;&lt;a href=&quot;prelude#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; constructor is used to hold a correct value (mnemonic: &quot;right&quot; also means &quot;correct&quot;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; タイプは、しばしば正しいかエラーのいずれかである値を表すために使用されます。慣例により、 &lt;code&gt;&lt;a href=&quot;prelude#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; コンストラクターはエラー値を保持するために使用され、 &lt;code&gt;&lt;a href=&quot;prelude#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; コンストラクターは正しい値を保持するために使用されます（ニーモニック：「右」は「正しい」も意味します）。</target>
        </trans-unit>
        <trans-unit id="9d02c060c8f45391329e1f6687a2f0b6730500f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; type represents values with two possibilities: a value of type &lt;code&gt;&lt;a href=&quot;prelude#t:Either&quot;&gt;Either&lt;/a&gt; a b&lt;/code&gt; is either &lt;code&gt;&lt;a href=&quot;prelude#v:Left&quot;&gt;Left&lt;/a&gt; a&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;prelude#v:Right&quot;&gt;Right&lt;/a&gt; b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; タイプは、二つの可能性と値を表す：種類の値 &lt;code&gt;&lt;a href=&quot;prelude#t:Either&quot;&gt;Either&lt;/a&gt; a b&lt;/code&gt; いずれかである &lt;code&gt;&lt;a href=&quot;prelude#v:Left&quot;&gt;Left&lt;/a&gt; a&lt;/code&gt; 又は &lt;code&gt;&lt;a href=&quot;prelude#v:Right&quot;&gt;Right&lt;/a&gt; b&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e44fd4d00d0795dea5f783f70db56faa6bffc024" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; class defines equality (&lt;code&gt;&lt;a href=&quot;prelude#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt;) and inequality (&lt;code&gt;&lt;a href=&quot;prelude#v:-47--61-&quot;&gt;/=&lt;/a&gt;&lt;/code&gt;). All the basic datatypes exported by the &lt;a href=&quot;prelude&quot;&gt;Prelude&lt;/a&gt; are instances of &lt;code&gt;&lt;a href=&quot;prelude#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;prelude#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; may be derived for any datatype whose constituents are also instances of &lt;code&gt;&lt;a href=&quot;prelude#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; クラス定義の等価（ &lt;code&gt;&lt;a href=&quot;prelude#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; ）及び式（ &lt;code&gt;&lt;a href=&quot;prelude#v:-47--61-&quot;&gt;/=&lt;/a&gt;&lt;/code&gt; ）。&lt;a href=&quot;prelude&quot;&gt;Prelude&lt;/a&gt;によってエクスポートされるすべての基本的なデータ型は &lt;code&gt;&lt;a href=&quot;prelude#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; のインスタンスであり、 &lt;code&gt;&lt;a href=&quot;prelude#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; は、構成要素も &lt;code&gt;&lt;a href=&quot;prelude#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; のインスタンスである任意のデータ型に対して導出できます。</target>
        </trans-unit>
        <trans-unit id="75fb7e193c14639f9f2c840b46b6b678ecc93443" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; type encapsulates an optional value. A value of type &lt;code&gt;&lt;a href=&quot;prelude#t:Maybe&quot;&gt;Maybe&lt;/a&gt; a&lt;/code&gt; either contains a value of type &lt;code&gt;a&lt;/code&gt; (represented as &lt;code&gt;&lt;a href=&quot;prelude#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt;), or it is empty (represented as &lt;code&gt;&lt;a href=&quot;prelude#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;). Using &lt;code&gt;&lt;a href=&quot;prelude#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; is a good way to deal with errors or exceptional cases without resorting to drastic measures such as &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; タイプは、任意の値をカプセル化します。型の値は、 &lt;code&gt;&lt;a href=&quot;prelude#t:Maybe&quot;&gt;Maybe&lt;/a&gt; a&lt;/code&gt; どちらのタイプの値が含まれている（ように表さ &lt;code&gt;&lt;a href=&quot;prelude#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt; A）、またはそれは（のように表さ空で &lt;code&gt;&lt;a href=&quot;prelude#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; ）。使用 &lt;code&gt;&lt;a href=&quot;prelude#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; など、抜本的な対策に頼ることなく、エラーや例外的な場合に対処するための良い方法です &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d4644834b747ca6136ef2aaff7f66c325592783" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; type is also a monad. It is a simple kind of error monad, where all errors are represented by &lt;code&gt;&lt;a href=&quot;prelude#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;. A richer error monad can be built using the &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; タイプもモナドです。これは単純な種類のエラーモナドであり、すべてのエラーは &lt;code&gt;&lt;a href=&quot;prelude#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; で表されます。 &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; 型を使用すると、より豊富なエラーモナドを構築できます。</target>
        </trans-unit>
        <trans-unit id="b2bc4ca3d8934e365fb80ceb2378eb5082b3a17f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class defines the basic operations over a &lt;em&gt;monad&lt;/em&gt;, a concept from a branch of mathematics known as &lt;em&gt;category theory&lt;/em&gt;. From the perspective of a Haskell programmer, however, it is best to think of a monad as an &lt;em&gt;abstract datatype&lt;/em&gt; of actions. Haskell's &lt;code&gt;do&lt;/code&gt; expressions provide a convenient syntax for writing monadic expressions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; クラスは、上の基本的な操作を定義&lt;em&gt;モナド&lt;/em&gt;として知られている数学の枝から、コンセプトを&lt;em&gt;カテゴリ理論&lt;/em&gt;。ただし、Haskellプログラマーの観点からは、モナドをアクションの&lt;em&gt;抽象的なデータ型&lt;/em&gt;と考えるのが最善です。Haskellの &lt;code&gt;do&lt;/code&gt; 式は、モナド式を記述するための便利な構文を提供します。</target>
        </trans-unit>
        <trans-unit id="7aaef56b80f737eb27df9b1e3d02aefbb49c126c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;prelude#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; allows us to chain together multiple actions which may fail, and fail overall if any of the individual steps failed. First we'll write a function that can either parse an &lt;code&gt;&lt;a href=&quot;prelude#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; from a &lt;code&gt;&lt;a href=&quot;prelude#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;, or fail.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; インスタンスを使用すると、失敗する可能性のある複数のアクションを連鎖させ、個々のステップのいずれかが失敗した場合は全体的に失敗させることができます。最初に、 &lt;code&gt;&lt;a href=&quot;prelude#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;prelude#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; を解析するか、失敗する関数を作成します。</target>
        </trans-unit>
        <trans-unit id="7b3a6ba7d1631eb7dffbc7a80d33a50655ec5cdd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; class is used for totally ordered datatypes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; クラスは全順序のデータ型に使用されます。</target>
        </trans-unit>
        <trans-unit id="7fb9b92b465e420832be5f52da24e03070664a5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; from our &lt;code&gt;&lt;a href=&quot;prelude#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; instance will ignore &lt;code&gt;&lt;a href=&quot;prelude#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; values, but will apply the supplied function to values contained in a &lt;code&gt;&lt;a href=&quot;prelude#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; インスタンスの &lt;code&gt;&lt;a href=&quot;prelude#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;prelude#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; 値を無視しますが、指定された関数を &lt;code&gt;&lt;a href=&quot;prelude#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; に含まれる値に適用します：</target>
        </trans-unit>
        <trans-unit id="bb778616987d1ec9e7af8ce5c3a0fe1ad6f720c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; method restricted to the type &lt;code&gt;&lt;a href=&quot;data-char#v:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; の方法は、型に限定 &lt;code&gt;&lt;a href=&quot;data-char#v:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fdbf4d018722d263569f1a254868963b4ff029df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#v:getContents&quot;&gt;getContents&lt;/a&gt;&lt;/code&gt; operation returns all user input as a single string, which is read lazily as it is needed (same as &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:stdin&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:getContents&quot;&gt;getContents&lt;/a&gt;&lt;/code&gt; の操作は、それが（同様に必要とされるように遅延して読み出された単一の文字列として、すべてのユーザー入力を返す &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:stdin&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="15b8f72cef1878abf7fe3c9117a25867af1d77b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#v:getContents&quot;&gt;getContents&lt;/a&gt;&lt;/code&gt; operation returns all user input as a single string, which is read lazily as it is needed (same as &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;ghc-io-stdhandles#v:stdin&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:getContents&quot;&gt;getContents&lt;/a&gt;&lt;/code&gt; の操作は、それが（同様に必要とされるように遅延して読み出された単一の文字列として、すべてのユーザー入力を返す &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;ghc-io-stdhandles#v:stdin&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="aa6a84a7de6790cd0de53c018c33b1487b75f830" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#v:interact&quot;&gt;interact&lt;/a&gt;&lt;/code&gt; function takes a function of type &lt;code&gt;String-&amp;gt;String&lt;/code&gt; as its argument. The entire input from the standard input device is passed to this function as its argument, and the resulting string is output on the standard output device.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:interact&quot;&gt;interact&lt;/a&gt;&lt;/code&gt; 機能は、タイプの機能とる &lt;code&gt;String-&amp;gt;String&lt;/code&gt; 引数として。標準入力デバイスからの入力全体が引数としてこの関数に渡され、結果の文字列が標準出力デバイスに出力されます。</target>
        </trans-unit>
        <trans-unit id="79b16f25ddf4b36594ea2e938465c9296ed38dc7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#v:lex&quot;&gt;lex&lt;/a&gt;&lt;/code&gt; function reads a single lexeme from the input, discarding initial white space, and returning the characters that constitute the lexeme. If the input string contains only white space, &lt;code&gt;&lt;a href=&quot;prelude#v:lex&quot;&gt;lex&lt;/a&gt;&lt;/code&gt; returns a single successful `lexeme' consisting of the empty string. (Thus &lt;code&gt;&lt;a href=&quot;prelude#v:lex&quot;&gt;lex&lt;/a&gt; &quot;&quot; = [(&quot;&quot;,&quot;&quot;)]&lt;/code&gt;.) If there is no legal lexeme at the beginning of the input string, &lt;code&gt;&lt;a href=&quot;prelude#v:lex&quot;&gt;lex&lt;/a&gt;&lt;/code&gt; fails (i.e. returns &lt;code&gt;[]&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:lex&quot;&gt;lex&lt;/a&gt;&lt;/code&gt; 関数は、初期ホワイトスペースを破棄、入力から単一の語彙素を読み出し、語彙素を構成する文字を返します。入力文字列に空白のみが含まれている場合、 &lt;code&gt;&lt;a href=&quot;prelude#v:lex&quot;&gt;lex&lt;/a&gt;&lt;/code&gt; は空の文字列で構成される単一の成功した「語彙素」を返します。（したがって &lt;code&gt;&lt;a href=&quot;prelude#v:lex&quot;&gt;lex&lt;/a&gt; &quot;&quot; = [(&quot;&quot;,&quot;&quot;)]&lt;/code&gt; 。）入力文字列の先頭に有効な語彙素がない場合、 &lt;code&gt;&lt;a href=&quot;prelude#v:lex&quot;&gt;lex&lt;/a&gt;&lt;/code&gt; は失敗します（つまり、 &lt;code&gt;[]&lt;/code&gt; を返します）。</target>
        </trans-unit>
        <trans-unit id="0e4582487867df9d645782b484418688a1f3f58c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#v:maybe&quot;&gt;maybe&lt;/a&gt;&lt;/code&gt; function takes a default value, a function, and a &lt;code&gt;&lt;a href=&quot;prelude#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; value. If the &lt;code&gt;&lt;a href=&quot;prelude#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; value is &lt;code&gt;&lt;a href=&quot;prelude#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the function returns the default value. Otherwise, it applies the function to the value inside the &lt;code&gt;&lt;a href=&quot;prelude#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; and returns the result.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:maybe&quot;&gt;maybe&lt;/a&gt;&lt;/code&gt; 機能は、デフォルト値、機能、およびかかる &lt;code&gt;&lt;a href=&quot;prelude#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 価値を。場合は &lt;code&gt;&lt;a href=&quot;prelude#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 価値がある &lt;code&gt;&lt;a href=&quot;prelude#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 、関数はデフォルト値を返します。それ以外の場合は、 &lt;code&gt;&lt;a href=&quot;prelude#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 内の値に関数を適用し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="c131692c2bade036458b0d1127914f219c7dd175" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#v:print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; function outputs a value of any printable type to the standard output device. Printable types are those that are instances of class &lt;code&gt;&lt;a href=&quot;prelude#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt;; &lt;code&gt;&lt;a href=&quot;prelude#v:print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; converts values to strings for output using the &lt;code&gt;&lt;a href=&quot;prelude#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; operation and adds a newline.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; 機能は、標準出力デバイスに印刷可能な任意のタイプの値を出力します。印刷可能なタイプは、 &lt;code&gt;&lt;a href=&quot;prelude#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; クラスのインスタンスであるタイプです。 &lt;code&gt;&lt;a href=&quot;prelude#v:print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;prelude#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; 操作を使用して出力用の値を文字列に変換し、改行を追加します。</target>
        </trans-unit>
        <trans-unit id="8c7fc1c52a42ce0024aec6c65a38a9e6dc8fb7ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#v:product&quot;&gt;product&lt;/a&gt;&lt;/code&gt; function computes the product of the numbers of a structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:product&quot;&gt;product&lt;/a&gt;&lt;/code&gt; 機能は、構造体の数との積を計算します。</target>
        </trans-unit>
        <trans-unit id="f99911d99a3ef08fe8f375dba1db41c4eecf08d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#v:read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; function reads input from a string, which must be completely consumed by the input process. &lt;code&gt;&lt;a href=&quot;prelude#v:read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; fails with an &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the parse is unsuccessful, and it is therefore discouraged from being used in real applications. Use &lt;code&gt;&lt;a href=&quot;text-read#v:readMaybe&quot;&gt;readMaybe&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;text-read#v:readEither&quot;&gt;readEither&lt;/a&gt;&lt;/code&gt; for safe alternatives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; 機能は、完全に入力処理によって消費されなければならない文字列からの入力を読み取ります。解析が失敗した場合、 &lt;code&gt;&lt;a href=&quot;prelude#v:read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; 失敗するため、実際のアプリケーションでの使用はお勧めしません。安全な代替手段として &lt;code&gt;&lt;a href=&quot;text-read#v:readMaybe&quot;&gt;readMaybe&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;text-read#v:readEither&quot;&gt;readEither&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="4ffdc3ac1e36da7a1438f94612f331c6323f073b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; function reads a file and returns the contents of the file as a string. The file is read lazily, on demand, as with &lt;code&gt;&lt;a href=&quot;prelude#v:getContents&quot;&gt;getContents&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; 関数は、ファイルを読み込み、ファイルの内容を文字列として返します。 &lt;code&gt;&lt;a href=&quot;prelude#v:getContents&quot;&gt;getContents&lt;/a&gt;&lt;/code&gt; と同様に、ファイルはオンデマンドで遅延読み取りされます。</target>
        </trans-unit>
        <trans-unit id="1edaaff10f2fbe79640944d7ec56cb49a4bed802" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#v:readIO&quot;&gt;readIO&lt;/a&gt;&lt;/code&gt; function is similar to &lt;code&gt;&lt;a href=&quot;prelude#v:read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; except that it signals parse failure to the &lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad instead of terminating the program.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:readIO&quot;&gt;readIO&lt;/a&gt;&lt;/code&gt; 関数はに似て &lt;code&gt;&lt;a href=&quot;prelude#v:read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; それが解析故障信号こと以外 &lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; はプログラムを終了するのではなく、モナド。</target>
        </trans-unit>
        <trans-unit id="9e25de194b180f1f5888a1fb8e989cb909435014" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#v:readLn&quot;&gt;readLn&lt;/a&gt;&lt;/code&gt; function combines &lt;code&gt;&lt;a href=&quot;prelude#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:readIO&quot;&gt;readIO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:readLn&quot;&gt;readLn&lt;/a&gt;&lt;/code&gt; の機能を兼ね備え &lt;code&gt;&lt;a href=&quot;prelude#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;prelude#v:readIO&quot;&gt;readIO&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="bfe43d67eb01eceb873ed3fd660e71f0f5174638" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; function computes the sum of the numbers of a structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; 関数は、構造体の数の和を計算します。</target>
        </trans-unit>
        <trans-unit id="bbb5313ec9e6c9e5650625c5d2da153e452b2504" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#v:toEnum&quot;&gt;toEnum&lt;/a&gt;&lt;/code&gt; method restricted to the type &lt;code&gt;&lt;a href=&quot;data-char#v:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:toEnum&quot;&gt;toEnum&lt;/a&gt;&lt;/code&gt; の方法は、型に限定 &lt;code&gt;&lt;a href=&quot;data-char#v:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2a04819fa78c89f5452b8780304a58025b2a647c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#v:unzip3&quot;&gt;unzip3&lt;/a&gt;&lt;/code&gt; function takes a list of triples and returns three lists, analogous to &lt;code&gt;&lt;a href=&quot;prelude#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:unzip3&quot;&gt;unzip3&lt;/a&gt;&lt;/code&gt; 機能はに類似した、トリプルとリターン3つのリストのリストを取り &lt;code&gt;&lt;a href=&quot;prelude#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="164c0899882615aec29723262627c2283ba64928" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; function takes a function which combines three elements, as well as three lists and returns a list of the function applied to corresponding elements, analogous to &lt;code&gt;&lt;a href=&quot;prelude#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; の関数は、に類似し、対応する要素に適用される機能のリスト3つの要素を組み合わせた機能を取り、ならびに3つのリストを返す &lt;code&gt;&lt;a href=&quot;prelude#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; 。リスト融合が可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="052c2b73f585f4387bcfea6e35542d389d49e8f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prelude#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; function takes a function which combines three elements, as well as three lists and returns a list of their point-wise combination, analogous to &lt;code&gt;&lt;a href=&quot;prelude#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; の機能は3つの要素だけでなく、3つのリストを組み合わせて、に類似し、そのポイントごとの組み合わせのリスト、返す関数取る &lt;code&gt;&lt;a href=&quot;prelude#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; を。リストの融合は可能ですが、最初のリスト引数とその結果のリストに制限されます。</target>
        </trans-unit>
        <trans-unit id="645f48f9edaa9bdfcdbd50f2978b6ca7c976e666" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system#v:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; input functions (e.g. &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt;) don't automatically convert to Unicode, so this function is provided to make the conversion from a multibyte string in the given code page to a proper Unicode string. To get the code page for the console, use &lt;code&gt;getConsoleCP&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system#v:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; の入力機能（例えば &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt; ）自動的にUnicodeに変換されませんので、この機能は、適切なUnicode文字列に指定されたコードページでマルチバイト文字列からの変換を行うために提供されます。コンソールのコードページを取得するには、 &lt;code&gt;getConsoleCP&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="1d9c12dfa8f43bbbd8a126756fa99035e9751842" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system#v:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; input functions (e.g. &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt;) don't automatically convert to Unicode, so this function is provided to make the conversion from a multibyte string in the given code page to a proper Unicode string. To get the code page for the console, use &lt;code&gt;getConsoleCP&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system#v:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; の入力機能（例えば &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt; ）自動的にUnicodeに変換されませんので、この機能は、適切なUnicode文字列に指定されたコードページでマルチバイト文字列からの変換を行うために提供されます。コンソールのコードページを取得するには、 &lt;code&gt;getConsoleCP&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="c4e61834da932da0adacdc02d3dfdbd2e02c1903" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system#v:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; input functions (e.g. &lt;code&gt;&lt;a href=&quot;../base/system-io#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt;) don't automatically convert to Unicode, so this function is provided to make the conversion from a multibyte string in the given code page to a proper Unicode string. To get the code page for the console, use &lt;code&gt;getConsoleCP&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system#v:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; の入力機能（例えば &lt;code&gt;&lt;a href=&quot;../base/system-io#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt; ）自動的にUnicodeに変換されませんので、この機能は、適切なUnicode文字列に指定されたコードページでマルチバイト文字列からの変換を行うために提供されます。コンソールのコードページを取得するには、 &lt;code&gt;getConsoleCP&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="b9915513312e5b9714f0fe4288381e0da0f72704" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-console-haskeline#t:InputT&quot;&gt;InputT&lt;/a&gt;&lt;/code&gt; monad transformer provides direct, low-level access to the user's line history state.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-console-haskeline#t:InputT&quot;&gt;InputT&lt;/a&gt;&lt;/code&gt; モナド変圧器、ユーザーのラインの履歴の状態に直接、低レベルのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="77b115021e101641ef1f81dd36bd9d5f8a21f7b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-console-haskeline-monadexception#v:controlIO&quot;&gt;controlIO&lt;/a&gt;&lt;/code&gt; method enables us to &quot;lift&quot; a function that manages IO actions (such as &lt;code&gt;&lt;a href=&quot;system-console-haskeline-monadexception#v:bracket&quot;&gt;bracket&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;system-console-haskeline-monadexception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt;) into a function that wraps arbitrary monadic actions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-console-haskeline-monadexception#v:controlIO&quot;&gt;controlIO&lt;/a&gt;&lt;/code&gt; の方法は、「リフト」に（のようなIOアクション管理機能私たちを可能に &lt;code&gt;&lt;a href=&quot;system-console-haskeline-monadexception#v:bracket&quot;&gt;bracket&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;system-console-haskeline-monadexception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; 任意のモナドアクションをラップ機能への）。</target>
        </trans-unit>
        <trans-unit id="d97760ad46f0a47182108cce3dd3552c71ffced8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:TermOutput&quot;&gt;TermOutput&lt;/a&gt;&lt;/code&gt; monoid abstracts away all padding and control sequence output. Unfortunately, that datatype is difficult to integrate into existing &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;-based APIs such as pretty-printers. Thus, as a workaround, &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#v:tiGetOutput1&quot;&gt;tiGetOutput1&lt;/a&gt;&lt;/code&gt; also lets us access the control sequences as &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;s. The one caveat is that it will not allow you to access padded control sequences as Strings. For example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:TermOutput&quot;&gt;TermOutput&lt;/a&gt;&lt;/code&gt; のモノイドは、すべてのパディングと制御シーケンスの出力を離れて抽象化します。残念ながら、そのデータ型をプリティプリンターなどの既存の &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; ベースのAPI に統合することは困難です。したがって、回避策として、 &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#v:tiGetOutput1&quot;&gt;tiGetOutput1&lt;/a&gt;&lt;/code&gt; を使用すると、制御シーケンスに &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; としてアクセスすることもできます。注意点の1つは、文字列としてパディングされた制御シーケンスにアクセスできないことです。例えば：</target>
        </trans-unit>
        <trans-unit id="aa804a6c1292fd02b3dfa80191cff02ea40114ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:TermOutput&quot;&gt;TermOutput&lt;/a&gt;&lt;/code&gt; monoid abstracts away all padding and control sequence output. Unfortunately, that datatype is difficult to integrate into existing &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;-based APIs such as pretty-printers. Thus, as a workaround, &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#v:tiGetOutput1&quot;&gt;tiGetOutput1&lt;/a&gt;&lt;/code&gt; also lets us access the control sequences as &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;s. The one caveat is that it will not allow you to access padded control sequences as Strings. For example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:TermOutput&quot;&gt;TermOutput&lt;/a&gt;&lt;/code&gt; のモノイドは、すべてのパディングと制御シーケンスの出力を離れて抽象化します。残念ながら、そのデータ型をプリティプリンターなどの既存の &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; ベースのAPIに統合することは困難です。したがって、回避策として、 &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#v:tiGetOutput1&quot;&gt;tiGetOutput1&lt;/a&gt;&lt;/code&gt; では &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 列として制御シーケンスにアクセスすることもできます。1つの注意点は、埋め込み制御シーケンスに文字列としてアクセスできないことです。例えば：</target>
        </trans-unit>
        <trans-unit id="9841931aa367ad9ec0fec011cdda76359ac86c24" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:TermOutput&quot;&gt;TermOutput&lt;/a&gt;&lt;/code&gt; monoid abstracts away all padding and control sequence output. Unfortunately, that datatype is difficult to integrate into existing &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;-based APIs such as pretty-printers. Thus, as a workaround, &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#v:tiGetOutput1&quot;&gt;tiGetOutput1&lt;/a&gt;&lt;/code&gt; also lets us access the control sequences as &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;s. The one caveat is that it will not allow you to access padded control sequences as Strings. For example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:TermOutput&quot;&gt;TermOutput&lt;/a&gt;&lt;/code&gt; のモノイドは、すべてのパディングと制御シーケンスの出力を離れて抽象化します。残念ながら、そのデータ型をプリティプリンターなどの既存の &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; ベースのAPIに統合することは困難です。したがって、回避策として、 &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#v:tiGetOutput1&quot;&gt;tiGetOutput1&lt;/a&gt;&lt;/code&gt; では &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 列として制御シーケンスにアクセスすることもできます。1つの注意点は、文字列としてパディングされた制御シーケンスにアクセスできないことです。例えば：</target>
        </trans-unit>
        <trans-unit id="7ff1172a4964334b38f0ed53fd5acdd80ad6655a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-cputime#v:cpuTimePrecision&quot;&gt;cpuTimePrecision&lt;/a&gt;&lt;/code&gt; constant is the smallest measurable difference in CPU time that the implementation can record, and is given as an integral number of picoseconds.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-cputime#v:cpuTimePrecision&quot;&gt;cpuTimePrecision&lt;/a&gt;&lt;/code&gt; の定数は、実装が記録できるCPU時間の最小測定可能な差異であり、ピコ秒の整数として与えられます。</target>
        </trans-unit>
        <trans-unit id="d42c1bb360791782c56c45d321fb837bc1ed609e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-directory#t:Permissions&quot;&gt;Permissions&lt;/a&gt;&lt;/code&gt; type is used to record whether certain operations are permissible on a file/directory. &lt;code&gt;&lt;a href=&quot;system-directory#v:getPermissions&quot;&gt;getPermissions&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-directory#v:setPermissions&quot;&gt;setPermissions&lt;/a&gt;&lt;/code&gt; get and set these permissions, respectively. Permissions apply both to files and directories. For directories, the executable field will be &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, and for files the searchable field will be &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;. Note that directories may be searchable without being readable, if permission has been given to use them as part of a path, but not to examine the directory contents.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#t:Permissions&quot;&gt;Permissions&lt;/a&gt;&lt;/code&gt; の種類は、特定の操作は、ファイル/ディレクトリ上許容されるかどうかを記録するために使用されます。 &lt;code&gt;&lt;a href=&quot;system-directory#v:getPermissions&quot;&gt;getPermissions&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;system-directory#v:setPermissions&quot;&gt;setPermissions&lt;/a&gt;&lt;/code&gt; は、これらの権限をそれぞれ取得および設定します。権限はファイルとディレクトリの両方に適用されます。ディレクトリの場合、実行可能フィールドは &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; になり、ファイルの場合、検索可能フィールドは &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; になります。パスの一部として使用する許可が与えられているが、ディレクトリの内容を調べることが許可されていない場合、ディレクトリは読み取り可能でなくても検索可能である可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4d69896f050cda9242fbd0b11650fb1d4798c283" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-directory#t:Permissions&quot;&gt;Permissions&lt;/a&gt;&lt;/code&gt; type is used to record whether certain operations are permissible on a file/directory. &lt;code&gt;&lt;a href=&quot;system-directory#v:getPermissions&quot;&gt;getPermissions&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-directory#v:setPermissions&quot;&gt;setPermissions&lt;/a&gt;&lt;/code&gt; get and set these permissions, respectively. Permissions apply both to files and directories. For directories, the executable field will be &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, and for files the searchable field will be &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;. Note that directories may be searchable without being readable, if permission has been given to use them as part of a path, but not to examine the directory contents.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#t:Permissions&quot;&gt;Permissions&lt;/a&gt;&lt;/code&gt; の種類は、特定の操作は、ファイル/ディレクトリ上許容されるかどうかを記録するために使用されます。 &lt;code&gt;&lt;a href=&quot;system-directory#v:getPermissions&quot;&gt;getPermissions&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;system-directory#v:setPermissions&quot;&gt;setPermissions&lt;/a&gt;&lt;/code&gt; は、それぞれこれらのアクセス許可を取得および設定します。権限はファイルとディレクトリの両方に適用されます。ディレクトリの場合、実行可能フィールドは &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; になり、ファイルの場合、検索可能フィールドは &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; になります。ディレクトリをパスの一部として使用することは許可されているが、ディレクトリの内容を調べることは許可されていない場合、ディレクトリは読み取り可能でなくても検索できる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="81b34c5c4fafcde21f795d5b394e5bb5a6d86701" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-directory#t:Permissions&quot;&gt;Permissions&lt;/a&gt;&lt;/code&gt; type is used to record whether certain operations are permissible on a file/directory. &lt;code&gt;&lt;a href=&quot;system-directory#v:getPermissions&quot;&gt;getPermissions&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-directory#v:setPermissions&quot;&gt;setPermissions&lt;/a&gt;&lt;/code&gt; get and set these permissions, respectively. Permissions apply both to files and directories. For directories, the executable field will be &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, and for files the searchable field will be &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;. Note that directories may be searchable without being readable, if permission has been given to use them as part of a path, but not to examine the directory contents.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#t:Permissions&quot;&gt;Permissions&lt;/a&gt;&lt;/code&gt; の種類は、特定の操作は、ファイル/ディレクトリ上許容されるかどうかを記録するために使用されます。 &lt;code&gt;&lt;a href=&quot;system-directory#v:getPermissions&quot;&gt;getPermissions&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;system-directory#v:setPermissions&quot;&gt;setPermissions&lt;/a&gt;&lt;/code&gt; は、それぞれこれらのアクセス許可を取得および設定します。権限はファイルとディレクトリの両方に適用されます。ディレクトリの場合、実行可能フィールドは &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; になり、ファイルの場合、検索可能フィールドは &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; になります。ディレクトリをパスの一部として使用することは許可されているが、ディレクトリの内容を調べることは許可されていない場合、ディレクトリは読み取り可能でなくても検索できる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a7fb38ca78261525df1464df4fb698278b8051df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:catMaybes&quot;&gt;catMaybes&lt;/a&gt;&lt;/code&gt; function takes a list of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt;s and returns a list of all the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:catMaybes&quot;&gt;catMaybes&lt;/a&gt;&lt;/code&gt; の関数は、リストかかる &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; のを、すべてのリストを返す &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 値を。</target>
        </trans-unit>
        <trans-unit id="6c024b37fca52e47d642918b547e5abf37fb3fa6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:catMaybes&quot;&gt;catMaybes&lt;/a&gt;&lt;/code&gt; function takes a list of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt;s and returns a list of all the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:catMaybes&quot;&gt;catMaybes&lt;/a&gt;&lt;/code&gt; の関数は、リストかかる &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; のを、すべてのリストを返す &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 値を。</target>
        </trans-unit>
        <trans-unit id="7508fdaba8c4fef16bb54aaa518032f06b07a40c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:catMaybes&quot;&gt;catMaybes&lt;/a&gt;&lt;/code&gt; function takes a list of &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt;s and returns a list of all the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:catMaybes&quot;&gt;catMaybes&lt;/a&gt;&lt;/code&gt; の関数は、リストかかる &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; のを、すべてのリストを返す &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 値を。</target>
        </trans-unit>
        <trans-unit id="b9dec7d9cce3f521b0de7412db5964162658ad1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:catchIOError&quot;&gt;catchIOError&lt;/a&gt;&lt;/code&gt; function establishes a handler that receives any &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; raised in the action protected by &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:catchIOError&quot;&gt;catchIOError&lt;/a&gt;&lt;/code&gt;. An &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; is caught by the most recent handler established by one of the exception handling functions. These handlers are not selective: all &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt;s are caught. Exception propagation must be explicitly provided in a handler by re-raising any unwanted exceptions. For example, in</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:catchIOError&quot;&gt;catchIOError&lt;/a&gt;&lt;/code&gt; の機能は、任意の受信ハンドラ確立 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; で保護されたアクションで育っ &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:catchIOError&quot;&gt;catchIOError&lt;/a&gt;&lt;/code&gt; を。アン &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 例外処理機能の一つによって確立された最新のハンドラによって捕捉されます。これらのハンドラーは選択的ではありません。すべての &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; がキャッチされます。例外の伝播は、不要な例外を再発生させることにより、ハンドラーで明示的に提供する必要があります。たとえば、</target>
        </trans-unit>
        <trans-unit id="6f3b229367a29bd9496f06fab85e58716c437cd5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:fromMaybe&quot;&gt;fromMaybe&lt;/a&gt;&lt;/code&gt; function takes a default value and a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; value. If the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, it returns the default value; otherwise, it returns the value contained in the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:fromMaybe&quot;&gt;fromMaybe&lt;/a&gt;&lt;/code&gt; の機能は、デフォルト値ととる &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 価値を。 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; の場合、デフォルト値を返します。それ以外の場合は、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; に含まれている値を返します。</target>
        </trans-unit>
        <trans-unit id="ff85ed75d901b4d2c7aa0d2761fd28a6697d0178" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:fromMaybe&quot;&gt;fromMaybe&lt;/a&gt;&lt;/code&gt; function takes a default value and and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; value. If the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, it returns the default values; otherwise, it returns the value contained in the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:fromMaybe&quot;&gt;fromMaybe&lt;/a&gt;&lt;/code&gt; の機能はデフォルト値として取る &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 価値を。 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; の場合、デフォルト値を返します。それ以外の場合は、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; に含まれている値を返します。</target>
        </trans-unit>
        <trans-unit id="9769cc1036b71fdb3662c8da0daae0ce7bf97a68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:fromMaybe&quot;&gt;fromMaybe&lt;/a&gt;&lt;/code&gt; function takes a default value and and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; value. If the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, it returns the default values; otherwise, it returns the value contained in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:fromMaybe&quot;&gt;fromMaybe&lt;/a&gt;&lt;/code&gt; の機能はデフォルト値として取る &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 価値を。 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; の場合、デフォルト値を返します。それ以外の場合は、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; に含まれている値を返します。</target>
        </trans-unit>
        <trans-unit id="2c7eae4b2c5061e05af7d962b180cd3821808d93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:maybeToList&quot;&gt;maybeToList&lt;/a&gt;&lt;/code&gt; function returns an empty list when given &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; or a singleton list when given &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:maybeToList&quot;&gt;maybeToList&lt;/a&gt;&lt;/code&gt; の与えられたとき、関数は空のリストを返す &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 与えられたとき、またはシングルトンリストを &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0fbaf05deefa3d41622751d07a352a608fb45d85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:maybeToList&quot;&gt;maybeToList&lt;/a&gt;&lt;/code&gt; function returns an empty list when given &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; or a singleton list when given &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:maybeToList&quot;&gt;maybeToList&lt;/a&gt;&lt;/code&gt; の与えられたとき、関数は空のリストを返す &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 与えられたとき、またはシングルトンリストを &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="98dbef89b986d97360e7b13124294962d761670e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:maybeToList&quot;&gt;maybeToList&lt;/a&gt;&lt;/code&gt; function returns an empty list when given &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; or a singleton list when given &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:maybeToList&quot;&gt;maybeToList&lt;/a&gt;&lt;/code&gt; の与えられたとき、関数は空のリストを返す &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 与えられたとき、またはシングルトンリストを &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c0aa3120b7fd0765f6ac196cefe19e035c54f08e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-io#v:getContents&quot;&gt;getContents&lt;/a&gt;&lt;/code&gt; operation returns all user input as a single string, which is read lazily as it is needed (same as &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;system-io#v:stdin&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:getContents&quot;&gt;getContents&lt;/a&gt;&lt;/code&gt; の操作は、それが（同様に必要とされるように遅延して読み出された単一の文字列として、すべてのユーザー入力を返す &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;system-io#v:stdin&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="9903da760704cfbe9ebaf26276c9f6d1fe29b948" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-io#v:getContents-39-&quot;&gt;getContents'&lt;/a&gt;&lt;/code&gt; operation returns all user input as a single string, which is fully read before being returned (same as &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents-39-&quot;&gt;hGetContents'&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;system-io#v:stdin&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:getContents-39-&quot;&gt;getContents'&lt;/a&gt;&lt;/code&gt; 操作は、すべてのユーザー入力を単一の文字列として返します。この文字列は、返される前に完全に読み取られます（ &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents-39-&quot;&gt;hGetContents'&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;system-io#v:stdin&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; と同じ）。</target>
        </trans-unit>
        <trans-unit id="e1624a7bf77b1533080ced7e88bbdc61480bcdf9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents-39-&quot;&gt;hGetContents'&lt;/a&gt;&lt;/code&gt; operation reads all input on the given handle before returning it as a &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; and closing the handle.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents-39-&quot;&gt;hGetContents'&lt;/a&gt;&lt;/code&gt; 操作は、としてそれを返す前に与えられたハンドル上のすべての入力を読み取り &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; とハンドルを閉じます。</target>
        </trans-unit>
        <trans-unit id="49101be718bf6fa482ea1ac280c8c3978edbdc76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-io#v:interact&quot;&gt;interact&lt;/a&gt;&lt;/code&gt; function takes a function of type &lt;code&gt;String-&amp;gt;String&lt;/code&gt; as its argument. The entire input from the standard input device is passed to this function as its argument, and the resulting string is output on the standard output device.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:interact&quot;&gt;interact&lt;/a&gt;&lt;/code&gt; 機能は、タイプの機能とる &lt;code&gt;String-&amp;gt;String&lt;/code&gt; 引数として。標準入力デバイスからの入力全体が引数としてこの関数に渡され、結果の文字列が標準出力デバイスに出力されます。</target>
        </trans-unit>
        <trans-unit id="c28c31ff8d6196f0cd154601474e1e3b9b58f9bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-io#v:print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; function outputs a value of any printable type to the standard output device. Printable types are those that are instances of class &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt;; &lt;code&gt;&lt;a href=&quot;system-io#v:print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; converts values to strings for output using the &lt;code&gt;&lt;a href=&quot;text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; operation and adds a newline.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; 機能は、標準出力デバイスに印刷可能な任意のタイプの値を出力します。印刷可能なタイプは、 &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; クラスのインスタンスであるタイプです。 &lt;code&gt;&lt;a href=&quot;system-io#v:print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; 操作を使用して出力用の値を文字列に変換し、改行を追加します。</target>
        </trans-unit>
        <trans-unit id="825ef90fdaca88a42de4c139d5e6c64085f34a5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; function reads a file and returns the contents of the file as a string. The file is read lazily, on demand, as with &lt;code&gt;&lt;a href=&quot;system-io#v:getContents&quot;&gt;getContents&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; 関数は、ファイルを読み込み、ファイルの内容を文字列として返します。 &lt;code&gt;&lt;a href=&quot;system-io#v:getContents&quot;&gt;getContents&lt;/a&gt;&lt;/code&gt; と同様に、ファイルはオンデマンドで遅延読み取りされます。</target>
        </trans-unit>
        <trans-unit id="a31c1b6bd7ac14eeefe46c3d60ed2cc1bc11f6d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-io#v:readFile-39-&quot;&gt;readFile'&lt;/a&gt;&lt;/code&gt; function reads a file and returns the contents of the file as a string. The file is fully read before being returned, as with &lt;code&gt;&lt;a href=&quot;system-io#v:getContents-39-&quot;&gt;getContents'&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:readFile-39-&quot;&gt;readFile'&lt;/a&gt;&lt;/code&gt; 機能は、ファイルを読み込み、ファイルの内容を文字列として返します。 &lt;code&gt;&lt;a href=&quot;system-io#v:getContents-39-&quot;&gt;getContents'&lt;/a&gt;&lt;/code&gt; と同様に、ファイルは返される前に完全に読み取られます。</target>
        </trans-unit>
        <trans-unit id="c55ec6a3320441e71baa3c7cddc99bb5586ab05b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-io#v:readIO&quot;&gt;readIO&lt;/a&gt;&lt;/code&gt; function is similar to &lt;code&gt;&lt;a href=&quot;text-read#v:read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; except that it signals parse failure to the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad instead of terminating the program.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:readIO&quot;&gt;readIO&lt;/a&gt;&lt;/code&gt; 関数はに似て &lt;code&gt;&lt;a href=&quot;text-read#v:read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; それが解析故障信号こと以外 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; はプログラムを終了するのではなく、モナド。</target>
        </trans-unit>
        <trans-unit id="892d5a8616ddf159523b449a487e6243305ef9c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-io#v:readLn&quot;&gt;readLn&lt;/a&gt;&lt;/code&gt; function combines &lt;code&gt;&lt;a href=&quot;system-io#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-io#v:readIO&quot;&gt;readIO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:readLn&quot;&gt;readLn&lt;/a&gt;&lt;/code&gt; の機能を兼ね備え &lt;code&gt;&lt;a href=&quot;system-io#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;system-io#v:readIO&quot;&gt;readIO&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="8f01cd96e2bf006a175917ef728b5ef21ad4ad33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-io-error#v:catchIOError&quot;&gt;catchIOError&lt;/a&gt;&lt;/code&gt; function establishes a handler that receives any &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; raised in the action protected by &lt;code&gt;&lt;a href=&quot;system-io-error#v:catchIOError&quot;&gt;catchIOError&lt;/a&gt;&lt;/code&gt;. An &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; is caught by the most recent handler established by one of the exception handling functions. These handlers are not selective: all &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt;s are caught. Exception propagation must be explicitly provided in a handler by re-raising any unwanted exceptions. For example, in</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:catchIOError&quot;&gt;catchIOError&lt;/a&gt;&lt;/code&gt; の機能は、任意の受信ハンドラ確立 &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; で保護されたアクションで育っ &lt;code&gt;&lt;a href=&quot;system-io-error#v:catchIOError&quot;&gt;catchIOError&lt;/a&gt;&lt;/code&gt; を。アン &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 例外処理機能の一つによって確立された最新のハンドラによって捕捉されます。これらのハンドラーは選択的ではありません。すべての &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; がキャッチされます。例外の伝播は、不要な例外を再発生させることにより、ハンドラーで明示的に提供する必要があります。たとえば、</target>
        </trans-unit>
        <trans-unit id="8e2935b648dbc65061463e0e0bc3ae9bc38731b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-posix-env#v:clearEnv&quot;&gt;clearEnv&lt;/a&gt;&lt;/code&gt; function clears the environment of all name-value pairs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env#v:clearEnv&quot;&gt;clearEnv&lt;/a&gt;&lt;/code&gt; の機能は、すべての名前と値のペアの環境をクリアします。</target>
        </trans-unit>
        <trans-unit id="369194824dad3c17becd69feafce80094511a779" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-posix-env#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; function inserts or resets the environment variable name in the current environment list. If the variable &lt;code&gt;name&lt;/code&gt; does not exist in the list, it is inserted with the given value. If the variable does exist, the argument &lt;code&gt;overwrite&lt;/code&gt; is tested; if &lt;code&gt;overwrite&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, the variable is not reset, otherwise it is reset to the given value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; 関数の挿入またはリセット現在の環境リスト中の環境変数名。変数 &lt;code&gt;name&lt;/code&gt; がリストに存在しない場合は、指定された値で挿入されます。変数が存在する場合、引数の &lt;code&gt;overwrite&lt;/code&gt; がテストされます。場合は &lt;code&gt;overwrite&lt;/code&gt; ある &lt;code&gt;False&lt;/code&gt; に、変数がリセットされず、それ以外の場合は、指定された値にリセットされます。</target>
        </trans-unit>
        <trans-unit id="e16fdd3c2060c8b0e7dcb0de6c67a978ff67d1fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-posix-env#v:unsetEnv&quot;&gt;unsetEnv&lt;/a&gt;&lt;/code&gt; function deletes all instances of the variable name from the environment.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env#v:unsetEnv&quot;&gt;unsetEnv&lt;/a&gt;&lt;/code&gt; 関数は、環境からの変数名のすべてのインスタンスを削除します。</target>
        </trans-unit>
        <trans-unit id="6390faf5740aef6b3fe69f665e1639661b490c68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; function inserts or resets the environment variable name in the current environment list. If the variable &lt;code&gt;name&lt;/code&gt; does not exist in the list, it is inserted with the given value. If the variable does exist, the argument &lt;code&gt;overwrite&lt;/code&gt; is tested; if &lt;code&gt;overwrite&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, the variable is not reset, otherwise it is reset to the given value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; 関数の挿入またはリセット現在の環境リスト中の環境変数名。変数 &lt;code&gt;name&lt;/code&gt; がリストに存在しない場合は、指定された値で挿入されます。変数が存在する場合、引数の &lt;code&gt;overwrite&lt;/code&gt; がテストされます。場合は &lt;code&gt;overwrite&lt;/code&gt; ある &lt;code&gt;False&lt;/code&gt; に、変数がリセットされず、それ以外の場合は、指定された値にリセットされます。</target>
        </trans-unit>
        <trans-unit id="908e9623e5b8e5381ae3293c89d2d6a40a5a4714" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:unsetEnv&quot;&gt;unsetEnv&lt;/a&gt;&lt;/code&gt; function deletes all instances of the variable name from the environment.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:unsetEnv&quot;&gt;unsetEnv&lt;/a&gt;&lt;/code&gt; 関数は、環境からの変数名のすべてのインスタンスを削除します。</target>
        </trans-unit>
        <trans-unit id="236f78121c4a2f2bf7b4a76db19e5a7170bc2449" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-posix-io#v:createPipe&quot;&gt;createPipe&lt;/a&gt;&lt;/code&gt; function creates a pair of connected file descriptors. The first component is the fd to read from, the second is the write end. Although pipes may be bidirectional, this behaviour is not portable and programmers should use two separate pipes for this purpose. May throw an exception if this is an invalid descriptor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-io#v:createPipe&quot;&gt;createPipe&lt;/a&gt;&lt;/code&gt; の機能は、接続されているファイルディスクリプタのペアを作成します。最初のコンポーネントは読み取り元のfdで、2番目のコンポーネントは書き込み側です。パイプは双方向である可能性がありますが、この動作は移植可能ではなく、プログラマーはこの目的のために2つの別個のパイプを使用する必要があります。これが無効な記述子の場合、例外がスローされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="d4b473f0667d5a6b55f733ab3a3194586555807c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system-posix-io-bytestring#v:createPipe&quot;&gt;createPipe&lt;/a&gt;&lt;/code&gt; function creates a pair of connected file descriptors. The first component is the fd to read from, the second is the write end. Although pipes may be bidirectional, this behaviour is not portable and programmers should use two separate pipes for this purpose. May throw an exception if this is an invalid descriptor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-io-bytestring#v:createPipe&quot;&gt;createPipe&lt;/a&gt;&lt;/code&gt; の機能は、接続されているファイルディスクリプタのペアを作成します。最初のコンポーネントは読み取り元のfdで、2番目のコンポーネントは書き込み側です。パイプは双方向である可能性がありますが、この動作は移植可能ではなく、プログラマーはこの目的のために2つの別個のパイプを使用する必要があります。これが無効な記述子の場合、例外がスローされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="50694ec6aab0913f0db1bc83f6e0ed0aed5dd7e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;text-printf#t:HPrintfType&quot;&gt;HPrintfType&lt;/a&gt;&lt;/code&gt; class provides the variable argument magic for &lt;code&gt;&lt;a href=&quot;text-printf#v:hPrintf&quot;&gt;hPrintf&lt;/a&gt;&lt;/code&gt;. Its implementation is intentionally not visible from this module.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-printf#t:HPrintfType&quot;&gt;HPrintfType&lt;/a&gt;&lt;/code&gt; のクラスはのための可変引数魔法提供 &lt;code&gt;&lt;a href=&quot;text-printf#v:hPrintf&quot;&gt;hPrintf&lt;/a&gt;&lt;/code&gt; を。その実装は、このモジュールから意図的に見えません。</target>
        </trans-unit>
        <trans-unit id="290847fe4ef7b4c780f17cc14317e4a804018f65" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;text-printf#t:PrintfType&quot;&gt;PrintfType&lt;/a&gt;&lt;/code&gt; class provides the variable argument magic for &lt;code&gt;&lt;a href=&quot;text-printf#v:printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt;. Its implementation is intentionally not visible from this module. If you attempt to pass an argument of a type which is not an instance of this class to &lt;code&gt;&lt;a href=&quot;text-printf#v:printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;text-printf#v:hPrintf&quot;&gt;hPrintf&lt;/a&gt;&lt;/code&gt;, then the compiler will report it as a missing instance of &lt;code&gt;&lt;a href=&quot;text-printf#t:PrintfArg&quot;&gt;PrintfArg&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-printf#t:PrintfType&quot;&gt;PrintfType&lt;/a&gt;&lt;/code&gt; のクラスはのための可変引数魔法提供 &lt;code&gt;&lt;a href=&quot;text-printf#v:printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; 。その実装は、このモジュールから意図的に見えません。このクラスのインスタンスではない型の引数を &lt;code&gt;&lt;a href=&quot;text-printf#v:printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;text-printf#v:hPrintf&quot;&gt;hPrintf&lt;/a&gt;&lt;/code&gt; に渡そうとすると、コンパイラーはそれを &lt;code&gt;&lt;a href=&quot;text-printf#t:PrintfArg&quot;&gt;PrintfArg&lt;/a&gt;&lt;/code&gt; の欠落したインスタンスとして報告します。</target>
        </trans-unit>
        <trans-unit id="6bde3b6deb5751130f8fa9aed7708139a05904e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;text-read#v:lex&quot;&gt;lex&lt;/a&gt;&lt;/code&gt; function reads a single lexeme from the input, discarding initial white space, and returning the characters that constitute the lexeme. If the input string contains only white space, &lt;code&gt;&lt;a href=&quot;text-read#v:lex&quot;&gt;lex&lt;/a&gt;&lt;/code&gt; returns a single successful `lexeme' consisting of the empty string. (Thus &lt;code&gt;&lt;a href=&quot;text-read#v:lex&quot;&gt;lex&lt;/a&gt; &quot;&quot; = [(&quot;&quot;,&quot;&quot;)]&lt;/code&gt;.) If there is no legal lexeme at the beginning of the input string, &lt;code&gt;&lt;a href=&quot;text-read#v:lex&quot;&gt;lex&lt;/a&gt;&lt;/code&gt; fails (i.e. returns &lt;code&gt;[]&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:lex&quot;&gt;lex&lt;/a&gt;&lt;/code&gt; 関数は、初期ホワイトスペースを破棄、入力から単一の語彙素を読み出し、語彙素を構成する文字を返します。入力文字列に空白のみが含まれている場合、 &lt;code&gt;&lt;a href=&quot;text-read#v:lex&quot;&gt;lex&lt;/a&gt;&lt;/code&gt; は空の文字列で構成される単一の成功した「語彙素」を返します。（したがって &lt;code&gt;&lt;a href=&quot;text-read#v:lex&quot;&gt;lex&lt;/a&gt; &quot;&quot; = [(&quot;&quot;,&quot;&quot;)]&lt;/code&gt; 。）入力文字列の先頭に有効な語彙素がない場合、 &lt;code&gt;&lt;a href=&quot;text-read#v:lex&quot;&gt;lex&lt;/a&gt;&lt;/code&gt; は失敗します（つまり、 &lt;code&gt;[]&lt;/code&gt; を返します）。</target>
        </trans-unit>
        <trans-unit id="1a9d5cf956b4aeb4977bd49b0f7c6321ffb9b927" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;text-read#v:read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; function reads input from a string, which must be completely consumed by the input process. &lt;code&gt;&lt;a href=&quot;text-read#v:read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; fails with an &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the parse is unsuccessful, and it is therefore discouraged from being used in real applications. Use &lt;code&gt;&lt;a href=&quot;text-read#v:readMaybe&quot;&gt;readMaybe&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;text-read#v:readEither&quot;&gt;readEither&lt;/a&gt;&lt;/code&gt; for safe alternatives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; 機能は、完全に入力処理によって消費されなければならない文字列からの入力を読み取ります。解析が失敗した場合、 &lt;code&gt;&lt;a href=&quot;text-read#v:read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; 失敗するため、実際のアプリケーションでの使用はお勧めしません。安全な代替手段として &lt;code&gt;&lt;a href=&quot;text-read#v:readMaybe&quot;&gt;readMaybe&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;text-read#v:readEither&quot;&gt;readEither&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="7c81f5117934d868bf2254238529c0a48b7fea08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;k&lt;/em&gt;&lt;/code&gt; argument controls how many test rounds are performed for determining a &lt;em&gt;probable prime&lt;/em&gt;. For more details, see &lt;a href=&quot;http://gmplib.org/manual/Number-Theoretic-Functions.html#index-mpz_005fprobab_005fprime_005fp-360&quot;&gt;GMP documentation for `mpz_probab_prime_p()`&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;k&lt;/em&gt;&lt;/code&gt; 引数は、&lt;em&gt;推定素数&lt;/em&gt;を決定するために実行されるテストラウンドの&lt;em&gt;数&lt;/em&gt;を制御します。詳しくは、&lt;a href=&quot;http://gmplib.org/manual/Number-Theoretic-Functions.html#index-mpz_005fprobab_005fprime_005fp-360&quot;&gt;`mpz_probab_prime_p（）`のGMPドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="bad337d10fc64d5b2ff3dbc6f2bf484df6cb613c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BigNat&lt;/code&gt; type</source>
          <target state="translated">&lt;code&gt;BigNat&lt;/code&gt; のタイプ</target>
        </trans-unit>
        <trans-unit id="b24b400b6bb089abd37b81edfb22c9c44a5b28fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Bits&lt;/code&gt; class does not have a &lt;code&gt;Num&lt;/code&gt; superclass. It therefore does not have default methods for the &lt;code&gt;bit&lt;/code&gt;, &lt;code&gt;testBit&lt;/code&gt; and &lt;code&gt;popCount&lt;/code&gt; methods.</source>
          <target state="translated">&lt;code&gt;Bits&lt;/code&gt; クラスではありません &lt;code&gt;Num&lt;/code&gt; スーパークラスを。したがって、 &lt;code&gt;bit&lt;/code&gt; 、 &lt;code&gt;testBit&lt;/code&gt; 、 &lt;code&gt;popCount&lt;/code&gt; メソッドのデフォルトメソッドはありません。</target>
        </trans-unit>
        <trans-unit id="7585bf1c302df16ed91051c8a55f49dac7f27c55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ByteString&lt;/code&gt; type</source>
          <target state="translated">&lt;code&gt;ByteString&lt;/code&gt; タイプ</target>
        </trans-unit>
        <trans-unit id="a4cb78819e2dcf3b038b0fa6fa29d124f961d0aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ByteString&lt;/code&gt; type and representation</source>
          <target state="translated">&lt;code&gt;ByteString&lt;/code&gt; タイプと表現</target>
        </trans-unit>
        <trans-unit id="005e2bda030ee8e32664f998432e3befbee14062" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CApiFFI&lt;/code&gt; extension allows a calling convention of &lt;code&gt;capi&lt;/code&gt; to be used in foreign declarations, e.g.</source>
          <target state="translated">&lt;code&gt;CApiFFI&lt;/code&gt; の延長はの呼び出し規約ことができます &lt;code&gt;capi&lt;/code&gt; 例えば、外国の宣言に使用されます</target>
        </trans-unit>
        <trans-unit id="13b7284405381c1e383cd0d0249cafb8eb623b0b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;COMPLETE&lt;/code&gt; pragma is used to inform the pattern match checker that a certain set of patterns is complete and that any function which matches on all the specified patterns is total.</source>
          <target state="translated">&lt;code&gt;COMPLETE&lt;/code&gt; プラグマは、パターンの特定のセットが完了したことをパターンマッチチェックを知らせるために使用され、すべての指定されたパターンに一致する任意の関数は、合計であること。</target>
        </trans-unit>
        <trans-unit id="97ba5a1df665f08e5746afd5258e9f9bc0483c65" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CallStack&lt;/code&gt; will only extend as far as the types allow it, for example</source>
          <target state="translated">&lt;code&gt;CallStack&lt;/code&gt; 単なる例のために、限り種類がそれを許すよう拡張されます</target>
        </trans-unit>
        <trans-unit id="b22faafc676f89394f33e91663ca60cabb6bc4b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Chan&lt;/code&gt; type</source>
          <target state="translated">&lt;code&gt;Chan&lt;/code&gt; タイプ</target>
        </trans-unit>
        <trans-unit id="d49e2d29e0d016b816ecb90ca81622c4424ea99a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Coercible&lt;/code&gt; machinery works with unlifted newtypes just like it does with lifted types. In either of the equivalent formulations of &lt;code&gt;A&lt;/code&gt; given above, users would additionally have access to a coercion between &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;Int#&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Coercible&lt;/code&gt; 機械がunlifted newtypesちょうどそれが持ち上げたタイプでないようで動作します。上記の &lt;code&gt;A&lt;/code&gt; の同等の定式化のいずれかで、ユーザーはさらに &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;Int#&lt;/code&gt; の間の強制にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="56868895505567b8dd6fa6c19b6bf5118c82d7d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DOCTYPE&lt;/code&gt; for XHTML 1.0 Strict.</source>
          <target state="translated">XHTML 1.0 Strict の &lt;code&gt;DOCTYPE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ffc2f173105c8fb1fcbdf98a1d298ce5e8bba858" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Dynamic&lt;/code&gt; type</source>
          <target state="translated">&lt;code&gt;Dynamic&lt;/code&gt; タイプ</target>
        </trans-unit>
        <trans-unit id="2f473b66e396d89af61f465962bc064a789e33d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ErrorT&lt;/code&gt; Monad structure is parameterized over two things:</source>
          <target state="translated">&lt;code&gt;ErrorT&lt;/code&gt; モナドの構造は、二つのものの上にパラメータ化されています。</target>
        </trans-unit>
        <trans-unit id="f105cba62162d63271c49af7cd9cd8361ee2895b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FOO.hp&lt;/code&gt; file produced when you ask for the heap profile of a program &lt;code&gt;FOO&lt;/code&gt; is a text file with a particularly simple structure. Here&amp;rsquo;s a representative example, with much of the actual data omitted:</source>
          <target state="translated">&lt;code&gt;FOO.hp&lt;/code&gt; のあなたがプログラムのヒーププロファイルを求める際に生成されたファイル &lt;code&gt;FOO&lt;/code&gt; は、特に単純な構造を持つテキストファイルです。以下は、実際のデータの多くを省略した代表的な例です。</target>
        </trans-unit>
        <trans-unit id="141ca8f382c40e251a5df604ac774ed0428d094e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FieldName&lt;/code&gt; is open-ended, but typically it should contain the producing package name, along with the actual field name. Then, the version number can either be attached to the serialised data for that field, or in cases where multiple versions of a field could exist in the same interface file, included in the field name.</source>
          <target state="translated">&lt;code&gt;FieldName&lt;/code&gt; オープンエンドであるが、一般的には、実際のフィールド名とともに、生産パッケージ名を含める必要があります。次に、バージョン番号をそのフィールドのシリアル化されたデータに添付するか、フィールド名に含まれる同じインターフェイスファイルに複数のバージョンのフィールドが存在する可能性がある場合に使用できます。</target>
        </trans-unit>
        <trans-unit id="04db3a4ce85cd545b2791b532c1d65a006beea18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Foldable&lt;/code&gt; class makes it possible to use idioms familiar from the List type with container structures that are better suited to the task at hand. This allows a user to substitute more appropriate &lt;code&gt;Foldable&lt;/code&gt; data types for Lists without requiring new idioms (see &lt;a href=&quot;#uselistsnot&quot;&gt;[1]&lt;/a&gt; for when not to use lists).</source>
          <target state="translated">&lt;code&gt;Foldable&lt;/code&gt; クラスでは、より良い手元の作業に適しているコンテナの構造を持つリストのタイプからお馴染みのイディオムを使用することが可能となります。これにより、ユーザーは新しいイディオムを必要とせずに、より適切な &lt;code&gt;Foldable&lt;/code&gt; データ型をリストに置き換えることができます（リストを使用しない場合については、&lt;a href=&quot;#uselistsnot&quot;&gt;[1]&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="46bbc9453d0aa157f0a481b32f1e12742cfde543" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Foldable&lt;/code&gt; instance should be defined in a manner that avoids construction of an unnecesary copy of the container.</source>
          <target state="translated">&lt;code&gt;Foldable&lt;/code&gt; インスタンスは、容器のunnecesaryコピーの構築を回避するように定義されるべきです。</target>
        </trans-unit>
        <trans-unit id="d3310324645be48c511e536603b07bcff55b712f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Foldable&lt;/code&gt; method &lt;code&gt;&lt;a href=&quot;data-foldable#v:mapM_&quot;&gt;mapM_&lt;/a&gt;&lt;/code&gt; and its flipped version &lt;code&gt;&lt;a href=&quot;data-foldable#v:forM_&quot;&gt;forM_&lt;/a&gt;&lt;/code&gt; can be used to sequence IO actions over all the elements of a &lt;code&gt;Traversable&lt;/code&gt; container (just for their side-effects, ignoring any results) . One special case is a &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; container that optionally holds a value. Given:</source>
          <target state="translated">&lt;code&gt;Foldable&lt;/code&gt; 方法 &lt;code&gt;&lt;a href=&quot;data-foldable#v:mapM_&quot;&gt;mapM_&lt;/a&gt;&lt;/code&gt; およびその反転バージョン &lt;code&gt;&lt;a href=&quot;data-foldable#v:forM_&quot;&gt;forM_&lt;/a&gt;&lt;/code&gt; は、すべての要素にわたる配列IOアクションに使用することができる &lt;code&gt;Traversable&lt;/code&gt; の容器（ちょうどその副作用のために、任意の結果を無視して）。1つの特殊なケースは、オプションで値を保持する &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; コンテナです。与えられた：</target>
        </trans-unit>
        <trans-unit id="48feef81fcfb630b464ad6ce416e6ee040c4f208" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Foo @k a = a&lt;/code&gt; equation would be represented as follows:</source>
          <target state="translated">&lt;code&gt;Foo @k a = a&lt;/code&gt; 以下のように式が表されることになります。</target>
        </trans-unit>
        <trans-unit id="4c4c7a176e62f2d3f87095896756c7aad5096548" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Foo_stub.h&lt;/code&gt; file can be redirected using the &lt;code&gt;-stubdir&lt;/code&gt; option; see &lt;a href=&quot;../separate_compilation#options-output&quot;&gt;Redirecting the compilation output(s)&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Foo_stub.h&lt;/code&gt; のファイルを使用してリダイレクトすることができ &lt;code&gt;-stubdir&lt;/code&gt; オプションを。&lt;a href=&quot;../separate_compilation#options-output&quot;&gt;コンパイル出力のリダイレクトを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c992f175532ed7a0887c33f484f4c4856a6f5c50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Foo_stub.h&lt;/code&gt; file can be redirected using the &lt;code&gt;-stubdir&lt;/code&gt; option; see &lt;a href=&quot;separate_compilation#options-output&quot;&gt;Redirecting the compilation output(s)&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Foo_stub.h&lt;/code&gt; のファイルを使用してリダイレクトすることができ &lt;code&gt;-stubdir&lt;/code&gt; オプションを。&lt;a href=&quot;separate_compilation#options-output&quot;&gt;コンパイル出力のリダイレクトを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fc9f316a3a267a4b9984d1222e0ad9feb74bf869" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GHC_PACKAGE_PATH&lt;/code&gt; environment variable may be set to a &lt;code&gt;:&lt;/code&gt;-separated (&lt;code&gt;;&lt;/code&gt;-separated on Windows) list of files containing package databases. This list of package databases, used by GHC and ghc-pkg, specifies a stack of package databases from top to bottom. This order was chosen to match the behaviour of the &lt;code id=&quot;index-5&quot;&gt;PATH&lt;/code&gt; environment variable where entries earlier in the PATH override ones that come later. See &lt;a href=&quot;#package-databases&quot;&gt;Package Databases&lt;/a&gt; for details on how the package database stack is used.</source>
          <target state="translated">&lt;code&gt;GHC_PACKAGE_PATH&lt;/code&gt; の環境変数を次のように設定することができる &lt;code&gt;:&lt;/code&gt; 区切られ（ &lt;code&gt;;&lt;/code&gt; Windows上で区切ら）パッケージデータベースを含むファイルのリスト。GHCとghc-pkgで使用されるこのパッケージデータベースのリストは、パッケージデータベースのスタックを上から下に指定します。この順序は、 &lt;code id=&quot;index-5&quot;&gt;PATH&lt;/code&gt; 環境変数の動作と一致するように選択され、PATHの前のエントリが後のエントリをオーバーライドします。参照&lt;a href=&quot;#package-databases&quot;&gt;パッケージデータベースを&lt;/a&gt;パッケージデータベースのスタックを使用する方法の詳細については。</target>
        </trans-unit>
        <trans-unit id="f21fc75056d50350516dd52ff5912c872b8b9460" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GenLanguageDef&lt;/code&gt; type is a record that contains all parameterizable features of the &lt;a href=&quot;text-parsec-token&quot;&gt;Text.Parsec.Token&lt;/a&gt; module. The module &lt;a href=&quot;text-parsec-language&quot;&gt;Text.Parsec.Language&lt;/a&gt; contains some default definitions.</source>
          <target state="translated">&lt;code&gt;GenLanguageDef&lt;/code&gt; のタイプは、すべてのパラメータ化機能を含むレコードである&lt;a href=&quot;text-parsec-token&quot;&gt;Text.Parsec.Tokenの&lt;/a&gt;モジュールを。モジュール&lt;a href=&quot;text-parsec-language&quot;&gt;Text.Parsec.Languageに&lt;/a&gt;は、いくつかのデフォルト定義が含まれています。</target>
        </trans-unit>
        <trans-unit id="c4e050756130eeb11c58b31896ace2ae245341ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Generic1&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;Generic1&lt;/code&gt; クラス</target>
        </trans-unit>
        <trans-unit id="b121f20d20404180364bfd43491c63f4245f97f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Generic&lt;/code&gt; and &lt;code&gt;Generic1&lt;/code&gt; classes mediate between user-defined datatypes and their internal representation as a sum-of-products:</source>
          <target state="translated">&lt;code&gt;Generic&lt;/code&gt; と &lt;code&gt;Generic1&lt;/code&gt; クラスは、ユーザ定義のデータ型との積和としてのそれらの内部表現との間で仲介します。</target>
        </trans-unit>
        <trans-unit id="7c04d22bf6198b566fefab29ee20c196be128ca5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HSfoo.o&lt;/code&gt; file is built by Cabal automatically; use &lt;code&gt;--disable-library-for-ghci&lt;/code&gt; to disable it. To build one manually, the following GNU &lt;code&gt;ld&lt;/code&gt; command can be used:</source>
          <target state="translated">&lt;code&gt;HSfoo.o&lt;/code&gt; のファイルが自動的にカバルによって構築されています。使用 &lt;code&gt;--disable-library-for-ghci&lt;/code&gt; 、それを無効にします。手動でビルドするには、次のGNU &lt;code&gt;ld&lt;/code&gt; コマンドを使用できます。</target>
        </trans-unit>
        <trans-unit id="4504a638df2b2b4639ba03e3b6d8a72cdcb6adda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;INCLUDE&lt;/code&gt; used to be necessary for specifying header files to be included when using the FFI and compiling via C. It is no longer required for GHC, but is accepted (and ignored) for compatibility with other compilers.</source>
          <target state="translated">&lt;code&gt;INCLUDE&lt;/code&gt; 他のコンパイラとの互換性のために、もはやGHCのために必要とされるが、受け入れ（無視）されるFFIを使用してC.それを介してコンパイル時に含まれるようにヘッダファイルを特定するために必要であるために使用。</target>
        </trans-unit>
        <trans-unit id="7e15878bd48bab3818efd590996e87053049c312" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;INLINABLE&lt;/code&gt; pragma also works with &lt;code&gt;SPECIALISE&lt;/code&gt;: if you mark function &lt;code&gt;f&lt;/code&gt; as &lt;code&gt;INLINABLE&lt;/code&gt;, then you can subsequently &lt;code&gt;SPECIALISE&lt;/code&gt; in another module (see &lt;a href=&quot;#specialize-pragma&quot;&gt;SPECIALIZE pragma&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;INLINABLE&lt;/code&gt; プラグマもで動作します &lt;code&gt;SPECIALISE&lt;/code&gt; ：あなたは、関数マークした場合 &lt;code&gt;f&lt;/code&gt; として &lt;code&gt;INLINABLE&lt;/code&gt; を、あなたは後ででき &lt;code&gt;SPECIALISE&lt;/code&gt; （参照別のモジュールに&lt;a href=&quot;#specialize-pragma&quot;&gt;SPECIALIZEプラグマを&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="b36c40931e360e8d5c5cef07a830cd7b25a1fd89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImportQualifiedPost&lt;/code&gt; extension allows &lt;code&gt;qualified&lt;/code&gt; to appear in postpositive position : &lt;code&gt;import M qualified&lt;/code&gt;. With this extension enabled, one can write:</source>
          <target state="translated">&lt;code&gt;ImportQualifiedPost&lt;/code&gt; の延長はできます &lt;code&gt;qualified&lt;/code&gt; postpositive位置に出現し： &lt;code&gt;import M qualified&lt;/code&gt; 。この拡張機能を有効にすると、次のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="011dae688b0bf1afe030126194f5bf145fe1f133" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Int&lt;/code&gt; may well fix &lt;code&gt;b&lt;/code&gt; at the call site, so that signature should not be rejected. Moreover, the dependencies might be hidden. Consider</source>
          <target state="translated">&lt;code&gt;Int&lt;/code&gt; がうまく固定してもよい &lt;code&gt;b&lt;/code&gt; その署名を拒否してはならないので、呼び出しサイトで。さらに、依存関係が隠されている可能性があります。検討する</target>
        </trans-unit>
        <trans-unit id="be48930496202a998883fb4cafb1527204c88628" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Integer&lt;/code&gt; type</source>
          <target state="translated">&lt;code&gt;Integer&lt;/code&gt; タイプ</target>
        </trans-unit>
        <trans-unit id="fd53ccf97b4fdfd6c001e2465d556a7f859dcf35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IsList&lt;/code&gt; class and its methods are intended to be used in conjunction with the &lt;code&gt;OverloadedLists&lt;/code&gt; extension.</source>
          <target state="translated">&lt;code&gt;IsList&lt;/code&gt; のクラス及びそのメソッドをと組み合わせて使用されることが意図される &lt;code&gt;OverloadedLists&lt;/code&gt; の拡張。</target>
        </trans-unit>
        <trans-unit id="8673f7079a0b5c433c928ec58cc5f380461b598a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Ix&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;Ix&lt;/code&gt; クラス</target>
        </trans-unit>
        <trans-unit id="ef3790360f91e6f1db9d6be90c644fd246da75d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Ix&lt;/code&gt; class and operations</source>
          <target state="translated">&lt;code&gt;Ix&lt;/code&gt; クラスと操作</target>
        </trans-unit>
        <trans-unit id="10c3ff8e25753aa68617bfab48822621de668249" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Just Refl&lt;/code&gt; case in &lt;code&gt;step2&lt;/code&gt; is inaccessible, because in order for &lt;code&gt;checkTEQ&lt;/code&gt; to be able to produce a &lt;code&gt;Just&lt;/code&gt;, &lt;code&gt;t ~ u&lt;/code&gt; must hold, but since we&amp;rsquo;re passing &lt;code&gt;Foo1&lt;/code&gt; and &lt;code&gt;Foo2&lt;/code&gt; here, it follows that &lt;code&gt;t ~
Char&lt;/code&gt;, and &lt;code&gt;u ~ Int&lt;/code&gt;, and thus &lt;code&gt;t ~ u&lt;/code&gt; cannot hold.</source>
          <target state="translated">&lt;code&gt;Just Refl&lt;/code&gt; 中ケース &lt;code&gt;step2&lt;/code&gt; ためにため、アクセスできません &lt;code&gt;checkTEQ&lt;/code&gt; が生成することができるようにする &lt;code&gt;Just&lt;/code&gt; 、 &lt;code&gt;t ~ u&lt;/code&gt; 保持しなければならないが、我々は渡しているので、 &lt;code&gt;Foo1&lt;/code&gt; と &lt;code&gt;Foo2&lt;/code&gt; 、ここで、その次の &lt;code&gt;t ~ Char&lt;/code&gt; 、そして &lt;code&gt;u ~ Int&lt;/code&gt; 、したがって &lt;code&gt;t ~ u&lt;/code&gt; は保持できません。</target>
        </trans-unit>
        <trans-unit id="50553a5059a245db41faab2319d240eba523fc59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LANGUAGE&lt;/code&gt; pragma allows language extensions to be enabled in a portable way. It is the intention that all Haskell compilers support the &lt;code&gt;LANGUAGE&lt;/code&gt; pragma with the same syntax, although not all extensions are supported by all compilers, of course. The &lt;code&gt;LANGUAGE&lt;/code&gt; pragma should be used instead of &lt;code&gt;OPTIONS_GHC&lt;/code&gt;, if possible.</source>
          <target state="translated">&lt;code&gt;LANGUAGE&lt;/code&gt; プラグマは、言語拡張は、ポータブルな方法で有効にすることができます。もちろん、すべての拡張機能がすべてのコンパイラーでサポートされているわけではありませんが、すべてのHaskellコンパイラーが同じ構文で &lt;code&gt;LANGUAGE&lt;/code&gt; プラグマをサポートすることを意図しています。 &lt;code&gt;LANGUAGE&lt;/code&gt; プラグマは、代わりに使用する必要があります &lt;code&gt;OPTIONS_GHC&lt;/code&gt; 可能であれば、。</target>
        </trans-unit>
        <trans-unit id="9db793d0713d9096493ec702152818be66ee6bd8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MArray&lt;/code&gt; class is parameterised over both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;e&lt;/code&gt; (so that instances specialised to certain element types can be defined, in the same way as for &lt;code&gt;&lt;a href=&quot;data-array-iarray#t:IArray&quot;&gt;IArray&lt;/a&gt;&lt;/code&gt;), and also over the type of the monad, &lt;code&gt;m&lt;/code&gt;, in which the mutable array will be manipulated.</source>
          <target state="translated">&lt;code&gt;MArray&lt;/code&gt; クラスは、 &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;e&lt;/code&gt; の両方（IArrayの場合と同じように、特定の要素タイプに特化したインスタンスを定義できるように）、およびモナドのタイプ &lt;code&gt;m&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;data-array-iarray#t:IArray&quot;&gt;IArray&lt;/a&gt;&lt;/code&gt; されます。操作。</target>
        </trans-unit>
        <trans-unit id="c2c38f8bb84f00cd772ad558cf0397e189ff32c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MINIMAL&lt;/code&gt; pragma can be used to change which combination of methods will be required for instances of a particular class. See &lt;a href=&quot;exts/pragmas#minimal-pragma&quot;&gt;MINIMAL pragma&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;MINIMAL&lt;/code&gt; プラグマは方法の組み合わせは、特定のクラスのインスタンスのために必要とされる変更に使用することができます。&lt;a href=&quot;exts/pragmas#minimal-pragma&quot;&gt;MINIMALプラグマを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d9cb8377e96ef4f0bbbfa46420220ebcc273c902" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MINIMAL&lt;/code&gt; pragma can be used to change which combination of methods will be required for instances of a particular class. See &lt;a href=&quot;glasgow_exts#minimal-pragma&quot;&gt;MINIMAL pragma&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;MINIMAL&lt;/code&gt; プラグマは方法の組み合わせは、特定のクラスのインスタンスのために必要とされる変更に使用することができます。&lt;a href=&quot;glasgow_exts#minimal-pragma&quot;&gt;MINIMALプラグマを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9b804211dca7a6234cc53da8eb6f7ab49bdfebd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MINIMAL&lt;/code&gt; pragma is used to specify the minimal complete definition of a class, i.e. specify which methods must be implemented by all instances. If an instance does not satisfy the minimal complete definition, then a warning is generated. This can be useful when a class has methods with circular defaults. For example</source>
          <target state="translated">&lt;code&gt;MINIMAL&lt;/code&gt; プラグマは、すべてのインスタンスで実装しなければならないメソッドを指定すなわち、クラス最小の完全な定義を指定するために使用されます。インスタンスが最小の完全な定義を満たさない場合、警告が生成されます。これは、クラスに循環デフォルトのメソッドがある場合に役立ちます。例えば</target>
        </trans-unit>
        <trans-unit id="179c9366f2492e385b72cb143e85887902e0ab4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Maybe Dec&lt;/code&gt; field contains &lt;code&gt;Just&lt;/code&gt; the declaration which defined the variable - including the RHS of the declaration - or else &lt;code&gt;Nothing&lt;/code&gt;, in the case where the RHS is unavailable to the compiler. At present, this value is &lt;em&gt;always&lt;/em&gt;&lt;code&gt;Nothing&lt;/code&gt;: returning the RHS has not yet been implemented because of lack of interest.</source>
          <target state="translated">&lt;code&gt;Maybe Dec&lt;/code&gt; フィールドが含まれている &lt;code&gt;Just&lt;/code&gt; 、宣言のRHSを含む- -または他の変数を定義した宣言 &lt;code&gt;Nothing&lt;/code&gt; 、RHSは、コンパイラに利用できない場合が。現在、この値は&lt;em&gt;常に&lt;/em&gt; &lt;code&gt;Nothing&lt;/code&gt; です。関心がないため、RHSを返すことはまだ実装されていません。</target>
        </trans-unit>
        <trans-unit id="833a3a82dcaf236e1a22c42275a11a48d6dd026d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Maybe String&lt;/code&gt; argument allows to supply an optional time specification. E.g.:</source>
          <target state="translated">&lt;code&gt;Maybe String&lt;/code&gt; 引数は、オプションの時間指定を供給することができます。例えば：</target>
        </trans-unit>
        <trans-unit id="1242be218ada359701dd67c2a646eb32b9e883ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MkG&lt;/code&gt; GADT constructor has two records, &lt;code&gt;unG1&lt;/code&gt; and &lt;code&gt;unG2&lt;/code&gt;. However, only &lt;code&gt;unG1&lt;/code&gt; can be used as a top-level field selector. &lt;code&gt;unG2&lt;/code&gt; cannot because it is a &amp;ldquo;hidden&amp;rdquo; selector (see &lt;a href=&quot;existential_quantification#existential-records&quot;&gt;Record Constructors&lt;/a&gt;); its type mentions a free variable &lt;code&gt;n&lt;/code&gt; that does not appear in the result type &lt;code&gt;G a (Maybe x)&lt;/code&gt;. On the other hand, the only free type variables in the type of &lt;code&gt;unG1&lt;/code&gt; are &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;, so &lt;code&gt;unG1&lt;/code&gt; is fine to use as a top-level function.</source>
          <target state="translated">&lt;code&gt;MkG&lt;/code&gt; GADTコンストラクタは二つのレコード、持ち &lt;code&gt;unG1&lt;/code&gt; と &lt;code&gt;unG2&lt;/code&gt; 。ただし、トップレベルのフィールドセレクターとして使用できるのは &lt;code&gt;unG1&lt;/code&gt; のみです。 &lt;code&gt;unG2&lt;/code&gt; は「非表示」セレクターであるため、できません（&lt;a href=&quot;existential_quantification#existential-records&quot;&gt;レコードコンストラクターを&lt;/a&gt;参照）。その型は、結果型 &lt;code&gt;G a (Maybe x)&lt;/code&gt; 現れない自由変数 &lt;code&gt;n&lt;/code&gt; に言及しています。一方、 &lt;code&gt;unG1&lt;/code&gt; の型の自由型変数は &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;x&lt;/code&gt; だけなので、 &lt;code&gt;unG1&lt;/code&gt; はトップレベルの関数として使用できます。</target>
        </trans-unit>
        <trans-unit id="7cc66baaebfeab0512a0b98ea32973ef95be01d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ModIface&lt;/code&gt; datatype also contains facilities for extending it with extra data, stored in a &lt;code&gt;Map&lt;/code&gt; of serialised fields, indexed by field names and using GHC&amp;rsquo;s internal &lt;code&gt;Binary&lt;/code&gt; class. The interface to work with these fields is:</source>
          <target state="translated">&lt;code&gt;ModIface&lt;/code&gt; のデータ型もに保存されている余分なデータ、でそれを拡張するための施設が含まれている &lt;code&gt;Map&lt;/code&gt; のフィールド名でインデックスさシリアライズされたフィールドの、とGHCの内部使用して &lt;code&gt;Binary&lt;/code&gt; クラスを。これらのフィールドを操作するためのインターフェースは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c4cf4ef2ad7be84020f5ab8d962e61d9c5230f48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ModSummary&lt;/code&gt; contains useful meta-information about the compiled module. The &lt;code&gt;HsParsedModule&lt;/code&gt; contains the lexical and syntactical information we mentioned before. The result that you return will change the result of the parsing. If you don&amp;rsquo;t want to change the result, just return the &lt;code&gt;HsParsedModule&lt;/code&gt; that you received as the argument.</source>
          <target state="translated">&lt;code&gt;ModSummary&lt;/code&gt; は、コンパイルされたモジュールに関する有用なメタ情報が含まれています。 &lt;code&gt;HsParsedModule&lt;/code&gt; は、我々は前に述べた字句と構文情報が含まれています。返す結果は、解析結果を変更します。結果を変更したくない場合は、引数として受け取った &lt;code&gt;HsParsedModule&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="48e5172db92414aea034dae74f377abfc598950a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Monad m&lt;/code&gt; superclass is needed to stitch together the different AST fragments.</source>
          <target state="translated">&lt;code&gt;Monad m&lt;/code&gt; スーパークラスは異なるASTの断片を一緒にステッチするために必要とされます。</target>
        </trans-unit>
        <trans-unit id="c2f1b3a94e8148014127a4f07b1372b7725a7bda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Monad&lt;/code&gt; class has an &lt;code&gt;Applicative&lt;/code&gt; superclass. You cannot write &lt;code&gt;Monad&lt;/code&gt; instances that work for GHC and also for a Haskell 2010 implementation that does not define &lt;code&gt;Applicative&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Monad&lt;/code&gt; クラスがあり &lt;code&gt;Applicative&lt;/code&gt; のスーパークラスを。GHCおよび &lt;code&gt;Applicative&lt;/code&gt; を定義しないHaskell 2010実装で機能する &lt;code&gt;Monad&lt;/code&gt; インスタンスを作成することはできません。</target>
        </trans-unit>
        <trans-unit id="b9a442b1b9dc364891e0d9b2233f04de798d1ec7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NOCLDSTOP&lt;/code&gt; flag</source>
          <target state="translated">&lt;code&gt;NOCLDSTOP&lt;/code&gt; フラグ</target>
        </trans-unit>
        <trans-unit id="4dd6a67adca1f0f6b2e2bb5d6f4f6be090147329" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NOINLINE&lt;/code&gt; pragma tells GHC not to inline &lt;code&gt;foo&lt;/code&gt; until Phase 0; and this property is inherited by the specialisation RULE, which will therefore only fire in Phase 0.</source>
          <target state="translated">&lt;code&gt;NOINLINE&lt;/code&gt; のプラグマはないインラインにGHCに指示します &lt;code&gt;foo&lt;/code&gt; のフェーズ0時まで。このプロパティは特殊化RULEによって継承され、フェーズ0でのみ発火します。</target>
        </trans-unit>
        <trans-unit id="41cd577171aa93daf4a59092425aec6f8da57085" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NOUNPACK&lt;/code&gt; pragma indicates to the compiler that it should not unpack the contents of a constructor field. Example:</source>
          <target state="translated">&lt;code&gt;NOUNPACK&lt;/code&gt; のプラグマは、コンストラクタフィールドの内容を解凍してはならないことをコンパイラに示します。例：</target>
        </trans-unit>
        <trans-unit id="02f6d5f3a66723750914b07b17b4152b831881eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Natural&lt;/code&gt; number type</source>
          <target state="translated">&lt;code&gt;Natural&lt;/code&gt; 番号タイプ</target>
        </trans-unit>
        <trans-unit id="8cad6ad0a7f69274a3358108b76be507fd692fa0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Node&lt;/code&gt; case is a right fold of the left subtree whose initial value is a right fold of the rest of the tree.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; 場合は、初期値ツリーの残りの部分の右側倍である左の部分木の右の倍です。</target>
        </trans-unit>
        <trans-unit id="e90151e467bb879239604777d1625aec0d519783" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Num&lt;/code&gt; class does not have &lt;code&gt;Show&lt;/code&gt; or &lt;code&gt;Eq&lt;/code&gt; superclasses.</source>
          <target state="translated">&lt;code&gt;Num&lt;/code&gt; クラスはありません &lt;code&gt;Show&lt;/code&gt; または &lt;code&gt;Eq&lt;/code&gt; スーパークラスを。</target>
        </trans-unit>
        <trans-unit id="47f8c2780da53550af283e3c4d79cd73d8a4eb47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OPTIONS_GHC&lt;/code&gt; pragma is used to specify additional options that are given to the compiler when compiling this source file. See &lt;a href=&quot;../using#source-file-options&quot;&gt;Command line options in source files&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;OPTIONS_GHC&lt;/code&gt; のプラグマは、このソースファイルをコンパイルするとき、コンパイラに与えられる追加のオプションを指定するために使用されます。詳細について&lt;a href=&quot;../using#source-file-options&quot;&gt;は、ソースファイルのコマンドラインオプション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="126dfab84b0966c6acff2a80c6f25e8566d4c2cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OPTIONS_GHC&lt;/code&gt; pragma is used to specify additional options that are given to the compiler when compiling this source file. See &lt;a href=&quot;using#source-file-options&quot;&gt;Command line options in source files&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;OPTIONS_GHC&lt;/code&gt; のプラグマは、このソースファイルをコンパイルするとき、コンパイラに与えられる追加のオプションを指定するために使用されます。詳細について&lt;a href=&quot;using#source-file-options&quot;&gt;は、ソースファイルのコマンドラインオプション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="88a0fae3e171286c99c8569a8b07482329213991" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Plugin&lt;/code&gt; type has a field &lt;code&gt;tcPlugin&lt;/code&gt; of type &lt;code&gt;[CommandLineOption] -&amp;gt; Maybe TcPlugin&lt;/code&gt;, where the &lt;code&gt;TcPlugin&lt;/code&gt; type is defined thus:</source>
          <target state="translated">&lt;code&gt;Plugin&lt;/code&gt; タイプは、フィールド有する &lt;code&gt;tcPlugin&lt;/code&gt; タイプの &lt;code&gt;[CommandLineOption] -&amp;gt; Maybe TcPlugin&lt;/code&gt; 、 &lt;code&gt;TcPlugin&lt;/code&gt; のタイプをこのように定義されます。</target>
        </trans-unit>
        <trans-unit id="fffe76b7bf3798c24838442d37709754d1c21fba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PluginRecompile&lt;/code&gt; data type is an enumeration determining how the plugin should affect recompilation.</source>
          <target state="translated">&lt;code&gt;PluginRecompile&lt;/code&gt; のデータ・タイプは、プラグインが再コンパイルに影響を与えるべきかを決定する列挙です。</target>
        </trans-unit>
        <trans-unit id="e585b3f2d187dee43075f1c6379003eb2f833f55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Pointer&lt;/code&gt; field is not used when tag says that it&amp;rsquo;s &lt;code&gt;Nothing&lt;/code&gt;. Otherwise &lt;code&gt;Pointer&lt;/code&gt; points to the value in &lt;code&gt;Just&lt;/code&gt;. As mentioned above, this type is lazy in its lifted field. Therefore, the type</source>
          <target state="translated">&lt;code&gt;Pointer&lt;/code&gt; タグはそのことだと言うとき、フィールドが使用されていない &lt;code&gt;Nothing&lt;/code&gt; 。それ以外の場合、 &lt;code&gt;Pointer&lt;/code&gt; は &lt;code&gt;Just&lt;/code&gt; の値を指します。先に述べたように、このタイプはその持ち上げられた分野では怠惰です。したがって、タイプ</target>
        </trans-unit>
        <trans-unit id="6e89ab13d6b3312a22f1cb7af0a4c7b83065d7ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Q&lt;/code&gt; monad is a monad defined in &lt;a href=&quot;../../libraries/template-haskell-2.17.0.0/language-haskell-th-syntax&quot;&gt;Language.Haskell.TH.Syntax&lt;/a&gt; which supports several useful operations during code generation such as reporting errors or looking up identifiers in the environment.</source>
          <target state="translated">&lt;code&gt;Q&lt;/code&gt; のモナドはモナドで定義されている&lt;a href=&quot;../../libraries/template-haskell-2.17.0.0/language-haskell-th-syntax&quot;&gt;Language.Haskell.TH.Syntax&lt;/a&gt;ようなエラーを報告したり、環境内の識別子を検索するなど、コード生成時にいくつかの便利な操作をサポートしています。</target>
        </trans-unit>
        <trans-unit id="06c6b11868285014da3646f38b0333396538986f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Quote&lt;/code&gt; type class (&lt;a href=&quot;../../libraries/template-haskell-2.17.0.0/language-haskell-th-syntax#t:Quote&quot;&gt;Language.Haskell.TH.Syntax.Quote&lt;/a&gt;) is the minimal interface necessary to implement the desugaring of quotations. The &lt;code&gt;Q&lt;/code&gt; monad is an instance of &lt;code&gt;Quote&lt;/code&gt; but contains many more operations which are not needed for defining quotations.</source>
          <target state="translated">&lt;code&gt;Quote&lt;/code&gt; 型クラス（&lt;a href=&quot;../../libraries/template-haskell-2.17.0.0/language-haskell-th-syntax#t:Quote&quot;&gt;Language.Haskell.TH.Syntax.Quoteは&lt;/a&gt;）引用の脱糖を実装するために必要な最小のインタフェースです。 &lt;code&gt;Q&lt;/code&gt; のモナドはのインスタンスである &lt;code&gt;Quote&lt;/code&gt; が、引用を定義するために必要とされていない多くのより多くの作業が含まれています。</target>
        </trans-unit>
        <trans-unit id="eb221db19183a2bbc482de37382d307415cceaa0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Read&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;Read&lt;/code&gt; クラス</target>
        </trans-unit>
        <trans-unit id="e93842ca545a852f968c15b8fc8e56550de74c3a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Read&lt;/code&gt; class has two extra methods, &lt;code&gt;readPrec&lt;/code&gt; and &lt;code&gt;readListPrec&lt;/code&gt;, that are not found in the Haskell 2010 since they rely on the &lt;code&gt;ReadPrec&lt;/code&gt; data type, which requires the &lt;a href=&quot;exts/rank_polymorphism#extension-RankNTypes&quot;&gt;&lt;code&gt;RankNTypes&lt;/code&gt;&lt;/a&gt; extension. GHC also derives &lt;code&gt;Read&lt;/code&gt; instances by implementing &lt;code&gt;readPrec&lt;/code&gt; instead of &lt;code&gt;readsPrec&lt;/code&gt;, and relies on a default implementation of &lt;code&gt;readsPrec&lt;/code&gt; that is defined in terms of &lt;code&gt;readPrec&lt;/code&gt;. GHC adds these two extra methods simply because &lt;code&gt;ReadPrec&lt;/code&gt; is more efficient than &lt;code&gt;ReadS&lt;/code&gt; (the type on which &lt;code&gt;readsPrec&lt;/code&gt; is based).</source>
          <target state="translated">&lt;code&gt;Read&lt;/code&gt; クラスには、2つの追加方法、あり &lt;code&gt;readPrec&lt;/code&gt; と &lt;code&gt;readListPrec&lt;/code&gt; 彼らはに依存しているので、Haskellの2010年に発見されていない、 &lt;code&gt;ReadPrec&lt;/code&gt; 必要とするデータの種類、&lt;a href=&quot;exts/rank_polymorphism#extension-RankNTypes&quot;&gt; &lt;code&gt;RankNTypes&lt;/code&gt; の&lt;/a&gt;拡張子を。 GHCはまた、派生 &lt;code&gt;Read&lt;/code&gt; 実装することで、インスタンスを &lt;code&gt;readPrec&lt;/code&gt; 代わりに &lt;code&gt;readsPrec&lt;/code&gt; を、とのデフォルトの実装に依存している &lt;code&gt;readsPrec&lt;/code&gt; で定義されて &lt;code&gt;readPrec&lt;/code&gt; 。 GHCは、 &lt;code&gt;ReadPrec&lt;/code&gt; が &lt;code&gt;ReadS&lt;/code&gt; （ &lt;code&gt;readsPrec&lt;/code&gt; のベースとなるタイプ）よりも効率的であるという理由だけで、これら2つの追加メソッドを追加します。</target>
        </trans-unit>
        <trans-unit id="c684523d6c7922654f7664f2f15207a387ba8fbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Read&lt;/code&gt; class has two extra methods, &lt;code&gt;readPrec&lt;/code&gt; and &lt;code&gt;readListPrec&lt;/code&gt;, that are not found in the Haskell 2010 since they rely on the &lt;code&gt;ReadPrec&lt;/code&gt; data type, which requires the &lt;a href=&quot;glasgow_exts#extension-RankNTypes&quot;&gt;&lt;code&gt;-XRankNTypes&lt;/code&gt;&lt;/a&gt; extension. GHC also derives &lt;code&gt;Read&lt;/code&gt; instances by implementing &lt;code&gt;readPrec&lt;/code&gt; instead of &lt;code&gt;readsPrec&lt;/code&gt;, and relies on a default implementation of &lt;code&gt;readsPrec&lt;/code&gt; that is defined in terms of &lt;code&gt;readPrec&lt;/code&gt;. GHC adds these two extra methods simply because &lt;code&gt;ReadPrec&lt;/code&gt; is more efficient than &lt;code&gt;ReadS&lt;/code&gt; (the type on which &lt;code&gt;readsPrec&lt;/code&gt; is based).</source>
          <target state="translated">&lt;code&gt;Read&lt;/code&gt; クラスには、2つの追加方法、あり &lt;code&gt;readPrec&lt;/code&gt; と &lt;code&gt;readListPrec&lt;/code&gt; 彼らはに依存しているので、Haskellの2010年に発見されていない、 &lt;code&gt;ReadPrec&lt;/code&gt; 必要とするデータの種類、&lt;a href=&quot;glasgow_exts#extension-RankNTypes&quot;&gt; &lt;code&gt;-XRankNTypes&lt;/code&gt; の&lt;/a&gt;拡張子を。GHCは、 &lt;code&gt;readPrec&lt;/code&gt; 代わりに &lt;code&gt;readsPrec&lt;/code&gt; 実装することによって &lt;code&gt;Read&lt;/code&gt; インスタンスを導出し、 &lt;code&gt;readPrec&lt;/code&gt; の観点から定義されている &lt;code&gt;readsPrec&lt;/code&gt; のデフォルト実装に依存しています。GHCは、 &lt;code&gt;ReadPrec&lt;/code&gt; が &lt;code&gt;ReadS&lt;/code&gt; （ &lt;code&gt;readsPrec&lt;/code&gt; の基礎となる型）よりも効率的であるという理由だけで、これら2つの追加メソッドを追加します。</target>
        </trans-unit>
        <trans-unit id="1bac9e36b9c420f9455517fb66bd240e808467c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Read&lt;/code&gt; class has two extra methods, &lt;code&gt;readPrec&lt;/code&gt; and &lt;code&gt;readListPrec&lt;/code&gt;, that are not found in the Haskell 2010 since they rely on the &lt;code&gt;ReadPrec&lt;/code&gt; data type, which requires the &lt;a href=&quot;glasgow_exts#extension-RankNTypes&quot;&gt;&lt;code&gt;RankNTypes&lt;/code&gt;&lt;/a&gt; extension. GHC also derives &lt;code&gt;Read&lt;/code&gt; instances by implementing &lt;code&gt;readPrec&lt;/code&gt; instead of &lt;code&gt;readsPrec&lt;/code&gt;, and relies on a default implementation of &lt;code&gt;readsPrec&lt;/code&gt; that is defined in terms of &lt;code&gt;readPrec&lt;/code&gt;. GHC adds these two extra methods simply because &lt;code&gt;ReadPrec&lt;/code&gt; is more efficient than &lt;code&gt;ReadS&lt;/code&gt; (the type on which &lt;code&gt;readsPrec&lt;/code&gt; is based).</source>
          <target state="translated">&lt;code&gt;Read&lt;/code&gt; クラスには、2つの追加方法、あり &lt;code&gt;readPrec&lt;/code&gt; と &lt;code&gt;readListPrec&lt;/code&gt; 彼らはに依存しているので、Haskellの2010年に発見されていない、 &lt;code&gt;ReadPrec&lt;/code&gt; 必要とするデータの種類、&lt;a href=&quot;glasgow_exts#extension-RankNTypes&quot;&gt; &lt;code&gt;RankNTypes&lt;/code&gt; の&lt;/a&gt;拡張子を。 GHCはまた、派生 &lt;code&gt;Read&lt;/code&gt; 実装することで、インスタンスを &lt;code&gt;readPrec&lt;/code&gt; 代わりに &lt;code&gt;readsPrec&lt;/code&gt; を、とのデフォルトの実装に依存している &lt;code&gt;readsPrec&lt;/code&gt; で定義されて &lt;code&gt;readPrec&lt;/code&gt; 。 GHCは、 &lt;code&gt;ReadPrec&lt;/code&gt; が &lt;code&gt;ReadS&lt;/code&gt; （ &lt;code&gt;readsPrec&lt;/code&gt; の基になるタイプ）よりも効率的であるという理由だけで、これら2つの追加メソッドを追加します。</target>
        </trans-unit>
        <trans-unit id="f5a639306682ee2392defbfaca8a0612ce62725a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ReadP&lt;/code&gt; type</source>
          <target state="translated">&lt;code&gt;ReadP&lt;/code&gt; タイプ</target>
        </trans-unit>
        <trans-unit id="55f87a9866a170596d8c12e14883de0375635cbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reader&lt;/code&gt; monad (also called the Environment monad). Represents a computation, which can read values from a shared environment, pass values from function to function, and execute sub-computations in a modified environment. Using &lt;code&gt;Reader&lt;/code&gt; monad for such computations is often clearer and easier than using the &lt;code&gt;&lt;a href=&quot;control-monad-state#v:State&quot;&gt;State&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;Reader&lt;/code&gt; モナドは（も環境モナドと呼ばれます）。共有環境から値を読み取り、関数から関数に値を渡し、変更された環境でサブ計算を実行できる計算を表します。使用して &lt;code&gt;Reader&lt;/code&gt; ような計算のためのモナドは、使用するよりも、多くの場合、明確かつ容易である &lt;code&gt;&lt;a href=&quot;control-monad-state#v:State&quot;&gt;State&lt;/a&gt;&lt;/code&gt; モナドを。</target>
        </trans-unit>
        <trans-unit id="138e28c8c2a47ed6154d76f22441ec8c21841137" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;R{..}&lt;/code&gt; expands to &lt;code&gt;R{a=a}&lt;/code&gt;, omitting &lt;code&gt;b&lt;/code&gt; since the record field is not in scope, and omitting &lt;code&gt;c&lt;/code&gt; since the variable &lt;code&gt;c&lt;/code&gt; is not in scope (apart from the binding of the record selector &lt;code&gt;c&lt;/code&gt;, of course).</source>
          <target state="translated">&lt;code&gt;R{..}&lt;/code&gt; に展開 &lt;code&gt;R{a=a}&lt;/code&gt; 省略、 &lt;code&gt;b&lt;/code&gt; レコードのフィールドがスコープ内にないため、と省略 &lt;code&gt;c&lt;/code&gt; 可変するので &lt;code&gt;c&lt;/code&gt; はレコードセレクタの結合から離れた（範囲内にない &lt;code&gt;c&lt;/code&gt; もちろん、 ）。</target>
        </trans-unit>
        <trans-unit id="c6082bbc59601d9a449fcc7ad9a4d5ed12a91d6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SPARKS&lt;/code&gt; statistic refers to the use of &lt;code&gt;Control.Parallel.par&lt;/code&gt; and related functionality in the program. Each spark represents a call to &lt;code&gt;par&lt;/code&gt;; a spark is &amp;ldquo;converted&amp;rdquo; when it is executed in parallel; and a spark is &amp;ldquo;pruned&amp;rdquo; when it is found to be already evaluated and is discarded from the pool by the garbage collector. Any remaining sparks are discarded at the end of execution, so &amp;ldquo;converted&amp;rdquo; plus &amp;ldquo;pruned&amp;rdquo; does not necessarily add up to the total.</source>
          <target state="translated">&lt;code&gt;SPARKS&lt;/code&gt; 統計はの使用を意味する &lt;code&gt;Control.Parallel.par&lt;/code&gt; プログラムと関連する機能。各スパークは &lt;code&gt;par&lt;/code&gt; への呼び出しを表します。スパークは、並列実行されると「変換」されます。火花は、すでに評価されていることが判明し、ガベージコレクターによってプールから破棄されたときに「剪定」されます。残りのスパークは実行の終了時に破棄されるため、「変換済み」と「剪定」の合計が必ずしも合計に加算されるわけではありません。</target>
        </trans-unit>
        <trans-unit id="0739f5ccb2bb880c7aac97c76af83b628f8a3a90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ST&lt;/code&gt; Monad</source>
          <target state="translated">&lt;code&gt;ST&lt;/code&gt; モナド</target>
        </trans-unit>
        <trans-unit id="f614e141f7715f6c62aa646fdfcc09ca9d7280e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ST&lt;/code&gt; monad</source>
          <target state="translated">&lt;code&gt;ST&lt;/code&gt; モナド</target>
        </trans-unit>
        <trans-unit id="95776d621e6e94b966ba5059c98ab385d9187b77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Semigroup&lt;/code&gt; operator &lt;code&gt;(&amp;lt;&amp;gt;)&lt;/code&gt; will be in &lt;code&gt;Prelude&lt;/code&gt;, which clashes with custom local definitions of such an operator</source>
          <target state="translated">&lt;code&gt;Semigroup&lt;/code&gt; 演算子は、 &lt;code&gt;(&amp;lt;&amp;gt;)&lt;/code&gt; であろう &lt;code&gt;Prelude&lt;/code&gt; 、オペレータのカスタムローカル定義と衝突します、</target>
        </trans-unit>
        <trans-unit id="8bd15c25ef057d5bb7b4b11090add4deb0ab7363" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ShortByteString&lt;/code&gt; type</source>
          <target state="translated">&lt;code&gt;ShortByteString&lt;/code&gt; のタイプ</target>
        </trans-unit>
        <trans-unit id="42f56d1b1cf13cb62004be77c95ea28a2e463b26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ShortByteString&lt;/code&gt; type and representation</source>
          <target state="translated">&lt;code&gt;ShortByteString&lt;/code&gt; のタイプと表現</target>
        </trans-unit>
        <trans-unit id="9c01c63bcea3f47012ef7cb8b53521ef2f599690" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SomeException&lt;/code&gt; type is the root of the exception type hierarchy. When an exception of type &lt;code&gt;e&lt;/code&gt; is thrown, behind the scenes it is encapsulated in a &lt;code&gt;SomeException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SomeException&lt;/code&gt; のタイプは、例外タイプ階層のルートです。タイプ &lt;code&gt;e&lt;/code&gt; の例外がスローされると、舞台裏で &lt;code&gt;SomeException&lt;/code&gt; にカプセル化されます。</target>
        </trans-unit>
        <trans-unit id="075869aa5abeccc3e82651f71cd0b49cf876a1ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StablePtr&lt;/code&gt; is freed by &lt;code&gt;hs_try_putmvar()&lt;/code&gt;. This is because it would otherwise be difficult to arrange to free the &lt;code&gt;StablePtr&lt;/code&gt; reliably: we can&amp;rsquo;t free it in Haskell, because if the &lt;code&gt;takeMVar&lt;/code&gt; is interrupted by an asynchronous exception, then the callback will fire at a later time. We can&amp;rsquo;t free it in C, because we don&amp;rsquo;t know when to free it (not when &lt;code&gt;hs_try_putmvar()&lt;/code&gt; returns, because that is an async call that uses the &lt;code&gt;StablePtr&lt;/code&gt; at some time in the future).</source>
          <target state="translated">&lt;code&gt;StablePtr&lt;/code&gt; はによって解放された &lt;code&gt;hs_try_putmvar()&lt;/code&gt; 。これは、そうしないと &lt;code&gt;StablePtr&lt;/code&gt; を確実に解放するように調整することが難しいためです &lt;code&gt;takeMVar&lt;/code&gt; では解放できません。なぜなら、takeMVarが非同期例外によって中断された場合、コールバックは後で発生するからです。Cで解放することはできません。解放するタイミングがわからないため &lt;code&gt;hs_try_putmvar()&lt;/code&gt; がいつ戻るかはわかりません。将来のある時点で &lt;code&gt;StablePtr&lt;/code&gt; を使用する非同期呼び出しだからです）。</target>
        </trans-unit>
        <trans-unit id="93f61b2e2afac0b4f71ea13ddcca5d653fa2b424" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StateT s m&lt;/code&gt; implementation of &lt;code&gt;generalBracket&lt;/code&gt; delegates to the &lt;code&gt;m&lt;/code&gt; implementation of &lt;code&gt;generalBracket&lt;/code&gt;. The &lt;code&gt;acquire&lt;/code&gt;, &lt;code&gt;use&lt;/code&gt;, and &lt;code&gt;release&lt;/code&gt; arguments given to &lt;code&gt;StateT&lt;/code&gt;'s implementation produce actions of type &lt;code&gt;StateT s m a&lt;/code&gt;, &lt;code&gt;StateT s m b&lt;/code&gt;, and &lt;code&gt;StateT s m c&lt;/code&gt;. In order to run those actions in the base monad, we need to call &lt;code&gt;runStateT&lt;/code&gt;, from which we obtain actions of type &lt;code&gt;m (a, s)&lt;/code&gt;, &lt;code&gt;m (b, s)&lt;/code&gt;, and &lt;code&gt;m (c, s)&lt;/code&gt;. Since each action produces the next state, it is important to feed the state produced by the previous action to the next action.</source>
          <target state="translated">&lt;code&gt;StateT s m&lt;/code&gt; の実装 &lt;code&gt;generalBracket&lt;/code&gt; のに委譲 &lt;code&gt;m&lt;/code&gt; 個の実装 &lt;code&gt;generalBracket&lt;/code&gt; 。 &lt;code&gt;acquire&lt;/code&gt; 、 &lt;code&gt;use&lt;/code&gt; 、および &lt;code&gt;release&lt;/code&gt; に与えられた引数 &lt;code&gt;StateT&lt;/code&gt; のタイプの実装プロデュースアクション &lt;code&gt;StateT s m a&lt;/code&gt; 、 &lt;code&gt;StateT s m b&lt;/code&gt; 、および &lt;code&gt;StateT s m c&lt;/code&gt; 。これらのアクションをベースモナドで実行するには、 &lt;code&gt;runStateT&lt;/code&gt; を呼び出す必要があります。この呼び出しから、タイプ &lt;code&gt;m (a, s)&lt;/code&gt; 、 &lt;code&gt;m (b, s)&lt;/code&gt; 、および &lt;code&gt;m (c, s)&lt;/code&gt; アクションを取得します。。各アクションは次の状態を生成するため、前のアクションによって生成された状態を次のアクションにフィードすることが重要です。</target>
        </trans-unit>
        <trans-unit id="22a2fd434898f0f6555b4c40eb04ba5061f4dac5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; type and associated operations.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 型と関連する操作。</target>
        </trans-unit>
        <trans-unit id="063a241ae6b100332789afebed90ca2f9db07517" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Traversable&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;Traversable&lt;/code&gt; のクラス</target>
        </trans-unit>
        <trans-unit id="f3eb004bc8ea181740ab9d964eca4039846cba0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Tree&lt;/code&gt; datatype has two constructors. The representation of individual constructors is combined using the binary type constructor &lt;code&gt;&lt;a href=&quot;ghc-generics#t::-43-:&quot;&gt;:+:&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Tree&lt;/code&gt; データ型は、2つのコンストラクタを持っています。個々のコンストラクタの表現は、バイナリ型コンストラクタ &lt;code&gt;&lt;a href=&quot;ghc-generics#t::-43-:&quot;&gt;:+:&lt;/a&gt;&lt;/code&gt; を使用して結合されます。</target>
        </trans-unit>
        <trans-unit id="ea0e01ff4b10acd1f300e041e7c7d24452a6bcef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Type&lt;/code&gt; field contains the type which underlies the variable. At present, this is always &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:VarT&quot;&gt;VarT&lt;/a&gt; theName&lt;/code&gt;, but future changes may permit refinement of this.</source>
          <target state="translated">「 &lt;code&gt;Type&lt;/code&gt; フィールドには、変数の基礎となるタイプが含まれています。現時点では、これは常にある &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:VarT&quot;&gt;VarT&lt;/a&gt; theName&lt;/code&gt; が、将来の変更は、この微細化を可能にすることができます。</target>
        </trans-unit>
        <trans-unit id="a1c62302915451aa80bfd9fc2cff479b2cf284ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Type&lt;/code&gt; field contains the type which underlies the variable. At present, this is always &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:VarT&quot;&gt;VarT&lt;/a&gt; theName&lt;/code&gt;, but future changes may permit refinement of this.</source>
          <target state="translated">「 &lt;code&gt;Type&lt;/code&gt; フィールドには、変数の基礎となるタイプが含まれています。現時点では、これは常にある &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:VarT&quot;&gt;VarT&lt;/a&gt; theName&lt;/code&gt; が、将来の変更は、この微細化を可能にすることができます。</target>
        </trans-unit>
        <trans-unit id="027d2a06d103d553d051280a74cf3845d60d411a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UNPACK&lt;/code&gt; indicates to the compiler that it should unpack the contents of a constructor field into the constructor itself, removing a level of indirection. For example:</source>
          <target state="translated">&lt;code&gt;UNPACK&lt;/code&gt; は、それが間接のレベルを除去し、コンストラクタ自体にコンストラクタのフィールドの内容を解凍する必要があることをコンパイラに示しています。例えば：</target>
        </trans-unit>
        <trans-unit id="33782bed5c646b932004c73abe54633b85489d8a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Version&lt;/code&gt; type</source>
          <target state="translated">&lt;code&gt;Version&lt;/code&gt; 種類</target>
        </trans-unit>
        <trans-unit id="5c935ef40843fda690b92bec23a2da13f0596d70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WARNING&lt;/code&gt; pragma allows you to attach an arbitrary warning to a particular function, class, or type.</source>
          <target state="translated">&lt;code&gt;WARNING&lt;/code&gt; プラグマを使用すると、特定の関数、クラス、または型に任意の警告を添付することができます。</target>
        </trans-unit>
        <trans-unit id="4b5cfd9e9013fd4cb9b04f939f4f7787609c1e73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Weak&lt;/code&gt; type</source>
          <target state="translated">&lt;code&gt;Weak&lt;/code&gt; タイプ</target>
        </trans-unit>
        <trans-unit id="f5d131550d29246afe295414037eda39ef3a4a79" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[2]&lt;/code&gt; means that the rule is active in Phase 2 and subsequent phases. The inverse notation &lt;code&gt;[~2]&lt;/code&gt; is also accepted, meaning that the rule is active up to, but not including, Phase 2.</source>
          <target state="translated">&lt;code&gt;[2]&lt;/code&gt; 規則は、フェーズ2以降のフェーズでアクティブであることを意味します。逆表記 &lt;code&gt;[~2]&lt;/code&gt; も受け入れられます。つまり、ルールはフェーズ2まではアクティブですが、フェーズ2は含みません。</target>
        </trans-unit>
        <trans-unit id="e762931e5ccd90930535b3ca5e55c6d8c0924233" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;binary&lt;/code&gt; package is notable in that it provides both pure, and high performance serialisation.</source>
          <target state="translated">&lt;code&gt;binary&lt;/code&gt; パッケージは、それが純粋で、そして高いパフォーマンスの両方のシリアル化を提供することを注目すべきです。</target>
        </trans-unit>
        <trans-unit id="4bd1285d74cbd2d2cbc3ca0932f6094c43b630ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buildExpressionParser&lt;/code&gt; takes care of all the complexity involved in building expression parser. Here is an example of an expression parser that handles prefix signs, postfix increment and basic arithmetic.</source>
          <target state="translated">&lt;code&gt;buildExpressionParser&lt;/code&gt; は表現パーサーの構築に関わるすべての複雑さの世話をします。これは、前置符号、後置インクリメント、および基本的な演算を処理する式パーサーの例です。</target>
        </trans-unit>
        <trans-unit id="9dc6c10898dec30b4e5dd6a9520ac4b310a891ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catch&lt;/code&gt; functions</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 機能</target>
        </trans-unit>
        <trans-unit id="ce3c62da909521366f0612be95d0d5abc18fd5df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cr&lt;/code&gt; capability, which moves the cursor to the first column of the current line.</source>
          <target state="translated">&lt;code&gt;cr&lt;/code&gt; 現在の行の最初の列にカーソルを移動させる能力。</target>
        </trans-unit>
        <trans-unit id="41cac9a191aeb661ca1ba5373f54957c5ae0927f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deriving( Sizable )&lt;/code&gt; is equivalent to saying</source>
          <target state="translated">&lt;code&gt;deriving( Sizable )&lt;/code&gt; 言うに相当します</target>
        </trans-unit>
        <trans-unit id="aecea50617c919f429665961c30499dbecafe248" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encode&lt;/code&gt; function translates elements of the buffer &lt;code&gt;from&lt;/code&gt; to the buffer &lt;code&gt;to&lt;/code&gt;. It should translate as many elements as possible given the sizes of the buffers, including translating zero elements if there is either not enough room in &lt;code&gt;to&lt;/code&gt;, or &lt;code&gt;from&lt;/code&gt; does not contain a complete multibyte sequence.</source>
          <target state="translated">&lt;code&gt;encode&lt;/code&gt; 関数は、バッファの要素を変換 &lt;code&gt;from&lt;/code&gt; バッファへ &lt;code&gt;to&lt;/code&gt; 。バッファーのサイズを考慮して、可能な限り多くの要素を変換する必要があります。0 &lt;code&gt;to&lt;/code&gt; 十分なスペースがない場合や、完全なマルチバイトシーケンスが含ま &lt;code&gt;from&lt;/code&gt; いない場合のゼロ要素の変換も含まれます。</target>
        </trans-unit>
        <trans-unit id="0a5aa4a69bcc42b7c89b78bde09cb33ccb0cfca5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enumFrom&lt;/code&gt;... methods are used in Haskell's translation of arithmetic sequences.</source>
          <target state="translated">&lt;code&gt;enumFrom&lt;/code&gt; は ...方法は、算術シーケンスのHaskellの翻訳に使用されています。</target>
        </trans-unit>
        <trans-unit id="ade300f4a813bcee47f07faaadabe78ba37c7979" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; function from the Prelude supports printing the call stack that led to the error in addition to the usual error message:</source>
          <target state="translated">Prelude の &lt;code&gt;error&lt;/code&gt; 関数は、通常のエラーメッセージに加えて、エラーの原因となった呼び出しスタックの出力をサポートしています。</target>
        </trans-unit>
        <trans-unit id="511af374fd1b5b479579f0c30542d54251504918" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;evaluate&lt;/code&gt; function</source>
          <target state="translated">&lt;code&gt;evaluate&lt;/code&gt; 機能</target>
        </trans-unit>
        <trans-unit id="2fbc5531096df720b55b588e7e44b2f7fb05c108" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forall&lt;/code&gt;-or-nothing rule takes effect in the following places:</source>
          <target state="translated">&lt;code&gt;forall&lt;/code&gt; は-or-何もルールは、次の場所で有効になります：</target>
        </trans-unit>
        <trans-unit id="597cda7e7f16a0e50cd5f0c4f0416902f5c0363f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fromInteger&lt;/code&gt; (and hence also &lt;code&gt;fromIntegral&lt;/code&gt;) is a special case when converting to &lt;code&gt;Int&lt;/code&gt;. The value of &lt;code&gt;fromIntegral x :: Int&lt;/code&gt; is given by taking the lower ⟨n⟩ bits of &lt;code&gt;(abs x)&lt;/code&gt;, multiplied by the sign of &lt;code&gt;x&lt;/code&gt; (in 2&amp;rsquo;s complement ⟨n⟩-bit arithmetic). This behaviour was chosen so that for example writing &lt;code&gt;0xffffffff :: Int&lt;/code&gt; preserves the bit-pattern in the resulting &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fromInteger&lt;/code&gt; （従っても &lt;code&gt;fromIntegral&lt;/code&gt; はに変換する場合）特殊なケースである &lt;code&gt;Int&lt;/code&gt; 。値 &lt;code&gt;fromIntegral x :: Int&lt;/code&gt; の下位⟨n⟩ビットとることによって与えられる &lt;code&gt;(abs x)&lt;/code&gt; の符号を乗じ、 &lt;code&gt;x&lt;/code&gt; （2の補数⟨n⟩ビット演算で）。この動作は、たとえば &lt;code&gt;0xffffffff :: Int&lt;/code&gt; 書き込むと、結果の &lt;code&gt;Int&lt;/code&gt; にビットパターンが保持されるように選択されました。</target>
        </trans-unit>
        <trans-unit id="ef0f4a35a1f6d1c258b22e6d87df758fac232791" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fromIntegral&lt;/code&gt; function also preserves bit-patterns when converting between the sized integral types (&lt;code&gt;Int8&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt; and the unsigned &lt;code&gt;Word&lt;/code&gt; variants), see the modules &lt;code&gt;Data.Int&lt;/code&gt; and &lt;code&gt;Data.Word&lt;/code&gt; in the library documentation.</source>
          <target state="translated">また、 &lt;code&gt;fromIntegral&lt;/code&gt; 関数は、サイズ指定された整数型（ &lt;code&gt;Int8&lt;/code&gt; 、 &lt;code&gt;Int16&lt;/code&gt; 、 &lt;code&gt;Int32&lt;/code&gt; 、 &lt;code&gt;Int64&lt;/code&gt; と符号なしの &lt;code&gt;Word&lt;/code&gt; バリアント）の間で変換するときにビットパターンを保持します。ライブラリのドキュメントのモジュール &lt;code&gt;Data.Int&lt;/code&gt; および &lt;code&gt;Data.Word&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="762b16a36e554904d87f2db331ab1542095ebd78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ghc-pkg&lt;/code&gt; program may be run in the ways listed below. Where a package name is required, the package can be named in full including the version number (e.g. &lt;code&gt;network-1.0&lt;/code&gt;), or without the version number. Naming a package without the version number matches all versions of the package; the specified action will be applied to all the matching packages. A package specifier that matches all version of the package can also be written &lt;code&gt;⟨pkg⟩ -*&lt;/code&gt;, to make it clearer that multiple packages are being matched. To match against the installed package ID instead of just package name and version, pass the &lt;code&gt;--ipid&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;ghc-pkg&lt;/code&gt; プログラムは、下記の方法で実行することができます。パッケージ名が必要な場合、バージョン番号を含む完全な名前（例： &lt;code&gt;network-1.0&lt;/code&gt; ）またはバージョン番号なしでパッケージに名前を付けることができます。バージョン番号なしでパッケージに名前を付けると、パッケージのすべてのバージョンに一致します。指定されたアクションは、一致するすべてのパッケージに適用されます。パッケージのすべてのバージョンに一致するパッケージ指定子を「 &lt;code&gt;⟨pkg⟩ -*&lt;/code&gt; と記述して、複数のパッケージが一致していることを明確にすることもできます。パッケージ名とバージョンだけでなく、インストール済みのパッケージIDと照合するには、 &lt;code&gt;--ipid&lt;/code&gt; フラグを渡します。</target>
        </trans-unit>
        <trans-unit id="70e170de84746b93a247accd0e8bc402d6a2ea08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ghc&lt;/code&gt; package exposes most of GHC&amp;rsquo;s frontend to users, and thus allows you to write programs that leverage it. This library is actually the same library used by GHC&amp;rsquo;s internal, frontend compilation driver, and thus allows you to write tools that programmatically compile source code and inspect it. Such functionality is useful in order to write things like IDE or refactoring tools. As a simple example, here&amp;rsquo;s a program which compiles a module, much like ghc itself does by default when invoked:</source>
          <target state="translated">&lt;code&gt;ghc&lt;/code&gt; ので、パッケージのユーザーに露出する最もGHCのフロントエンドのを、そしてあなたがそのテコにそれをするプログラムを書くことができます。このライブラリは、実際にはGHCの内部フロントエンドコンパイルドライバーで使用されるライブラリと同じであるため、ソースコードをプログラムでコンパイルして検査するツールを作成できます。このような機能は、IDEやリファクタリングツールなどを記述するために役立ちます。簡単な例として、モジュールをコンパイルするプログラムを次に示します。これは、ghc自体がデフォルトで呼び出されたときのように動作します。</target>
        </trans-unit>
        <trans-unit id="e102bed194230593a0e69925d95b61dfc6e1bb63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ghci.conf&lt;/code&gt; file is most useful for turning on favourite options (e.g. &lt;code&gt;:set +s&lt;/code&gt;), and defining useful macros.</source>
          <target state="translated">&lt;code&gt;ghci.conf&lt;/code&gt; のファイルは、好きなオプション（例えばオンするための最も有用である &lt;code&gt;:set +s&lt;/code&gt; 、と便利なマクロを定義します）。</target>
        </trans-unit>
        <trans-unit id="2d742d7f4cd29eb0f301c0d47b2cc254469da39b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handle&lt;/code&gt; functions</source>
          <target state="translated">&lt;code&gt;handle&lt;/code&gt; 機能</target>
        </trans-unit>
        <trans-unit id="34d765516635c10fcdf110fa543c8ace7e8ff1fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hi-boot&lt;/code&gt; generated by compiling a &lt;code&gt;hs-boot&lt;/code&gt; file is in the same machine-generated binary format as any other GHC-generated interface file (e.g. &lt;code&gt;B.hi&lt;/code&gt;). You can display its contents with &lt;code&gt;ghc --show-iface&lt;/code&gt;. If you specify a directory for interface files, the &lt;code&gt;-ohidir&lt;/code&gt; flag, then that affects &lt;code&gt;hi-boot&lt;/code&gt; files too.</source>
          <target state="translated">&lt;code&gt;hi-boot&lt;/code&gt; コンパイルによって生成された &lt;code&gt;hs-boot&lt;/code&gt; ファイルは、他のGHC-発生インタフェースファイル（例えば、同じ機械で生成されたバイナリ形式である &lt;code&gt;B.hi&lt;/code&gt; ）。その内容は &lt;code&gt;ghc --show-iface&lt;/code&gt; で表示できます。インターフェースファイルのディレクトリ、 &lt;code&gt;-ohidir&lt;/code&gt; フラグを指定すると、 &lt;code&gt;hi-boot&lt;/code&gt; ファイルにも影響します。</target>
        </trans-unit>
        <trans-unit id="355d829a4b676f5ca653b94b80c9807cda2a9d2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hsc2hs&lt;/code&gt; command can be used to automate some parts of the process of writing Haskell bindings to C code. It reads an almost-Haskell source with embedded special constructs, and outputs a real Haskell file with these constructs processed, based on information taken from some C headers. The extra constructs deal with accessing C data from Haskell.</source>
          <target state="translated">&lt;code&gt;hsc2hs&lt;/code&gt; のコマンドは、CコードにHaskellのバインディングを書き込む処理の一部を自動化するために使用することができます。特殊な構成要素が埋め込まれたほぼHaskellのソースを読み取り、いくつかのCヘッダーから取得した情報に基づいて、これらの構成要素が処理された実際のHaskellファイルを出力します。追加の構文は、HaskellからのCデータへのアクセスを扱います。</target>
        </trans-unit>
        <trans-unit id="e2823e69f2a65d7ce80b8fd7a101d62eed4e1c66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;i2d&lt;/code&gt; function is virtually one machine instruction; the default conversion&amp;mdash;via an intermediate &lt;code&gt;Rational&lt;/code&gt;-is obscenely expensive by comparison.</source>
          <target state="translated">&lt;code&gt;i2d&lt;/code&gt; 機能は、事実上、1つの機械命令です。中間の &lt;code&gt;Rational&lt;/code&gt; を介したデフォルトの変換は、比較すると非常に高価です。</target>
        </trans-unit>
        <trans-unit id="7c8dc7d7a696a83968e6e8dd5a58a6b1ef2a23b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id&lt;/code&gt; of a cost-centre listed in the &lt;code&gt;cost_centres&lt;/code&gt; list.</source>
          <target state="translated">&lt;code&gt;cost_centres&lt;/code&gt; リストにリストされているコストセンターの &lt;code&gt;id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0f33c5545ef78687d7ec80abf9761102bfc37c4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import A hiding( g )&lt;/code&gt; in module &lt;code&gt;B&lt;/code&gt; is technically an error (&lt;a href=&quot;http://www.haskell.org/onlinereport/haskell2010/haskellch5.html#x11-1020005.3.1&quot;&gt;Haskell Report, 5.3.1&lt;/a&gt;) because &lt;code&gt;A&lt;/code&gt; does not export &lt;code&gt;g&lt;/code&gt;. However GHC allows it, in the interests of supporting backward compatibility; for example, a newer version of &lt;code&gt;A&lt;/code&gt; might export &lt;code&gt;g&lt;/code&gt;, and you want &lt;code&gt;B&lt;/code&gt; to work in either case.</source>
          <target state="translated">モジュール &lt;code&gt;B&lt;/code&gt; の &lt;code&gt;import A hiding( g )&lt;/code&gt; は、 &lt;code&gt;A&lt;/code&gt; が &lt;code&gt;g&lt;/code&gt; をエクスポートしないため&lt;a href=&quot;http://www.haskell.org/onlinereport/haskell2010/haskellch5.html#x11-1020005.3.1&quot;&gt;、&lt;/a&gt;技術的にはエラー（Haskell Report、5.3.1）です。ただし、GHCでは、下位互換性をサポートするために許可しています。たとえば、新しいバージョンの &lt;code&gt;A&lt;/code&gt; は &lt;code&gt;g&lt;/code&gt; をエクスポートする可能性があり、どちらの場合でも &lt;code&gt;B&lt;/code&gt; を機能させたいとします。</target>
        </trans-unit>
        <trans-unit id="d6ee2a5c41770c7a1baf9d025dcbc42759f0fdd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import A hiding( g )&lt;/code&gt; in module &lt;code&gt;B&lt;/code&gt; is technically an error (&lt;a href=&quot;https://www.haskell.org/onlinereport/haskell2010/haskellch5.html#x11-1020005.3.1&quot;&gt;Haskell Report, 5.3.1&lt;/a&gt;) because &lt;code&gt;A&lt;/code&gt; does not export &lt;code&gt;g&lt;/code&gt;. However GHC allows it, in the interests of supporting backward compatibility; for example, a newer version of &lt;code&gt;A&lt;/code&gt; might export &lt;code&gt;g&lt;/code&gt;, and you want &lt;code&gt;B&lt;/code&gt; to work in either case.</source>
          <target state="translated">モジュール &lt;code&gt;B&lt;/code&gt; の &lt;code&gt;import A hiding( g )&lt;/code&gt; は、 &lt;code&gt;A&lt;/code&gt; が &lt;code&gt;g&lt;/code&gt; をエクスポートしないため&lt;a href=&quot;https://www.haskell.org/onlinereport/haskell2010/haskellch5.html#x11-1020005.3.1&quot;&gt;、&lt;/a&gt;技術的にはエラーです（Haskell Report、5.3.1）。ただし、GHCは、下位互換性をサポートするために、それを許可します。例えば、新しいバージョンの &lt;code&gt;A&lt;/code&gt; は、エクスポートする可能性がある &lt;code&gt;g&lt;/code&gt; 、あなたが欲しい &lt;code&gt;B&lt;/code&gt; のいずれの場合で動作するように。</target>
        </trans-unit>
        <trans-unit id="9f41076a0857a53fdc32d3736b60eb827f4f251e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import&lt;/code&gt; declaration (&lt;a href=&quot;#ghci-import-decl&quot;&gt;Controlling what is in scope with import&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; 申告（&lt;a href=&quot;#ghci-import-decl&quot;&gt;インポートと範囲にあるものの制御&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="5ad2ceafe50f168640b42ddfd5b779521b31a687" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;instance&lt;/code&gt; keyword is optional.</source>
          <target state="translated">&lt;code&gt;instance&lt;/code&gt; キーワードはオプションです。</target>
        </trans-unit>
        <trans-unit id="6290f04db0b506c583506333aeba21e56f7af2ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lazyIOExample&lt;/code&gt; uses lazy I/O to read the file from the disk, which is not suitable in all applications, and certainly not if you need to read from a socket which has higher likelihood to fail. To address these needs, use the incremental input method like in &lt;code&gt;incrementalExample&lt;/code&gt;. For an example of how to read incrementally from a Handle, see the implementation of &lt;code&gt;&lt;a href=&quot;data-binary#v:decodeFileOrFail&quot;&gt;decodeFileOrFail&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lazyIOExample&lt;/code&gt; は、あなたが失敗するより高い可能性を持ってソケットから読み取る必要がある場合は、すべてのアプリケーションに適していないディスクからファイルを、読んで、そして確かにしないように怠惰なI / Oを使用しています。これらのニーズに対処するには、incrementalExampleのような増分入力メソッドを使用し &lt;code&gt;incrementalExample&lt;/code&gt; 。Handleからインクリメンタルに読み取る方法の例については、 &lt;code&gt;&lt;a href=&quot;data-binary#v:decodeFileOrFail&quot;&gt;decodeFileOrFail&lt;/a&gt;&lt;/code&gt; の実装を参照してください。</target>
        </trans-unit>
        <trans-unit id="2176a754f25110a9917a6219e63404e3208eea44" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mapException&lt;/code&gt; function</source>
          <target state="translated">&lt;code&gt;mapException&lt;/code&gt; の機能</target>
        </trans-unit>
        <trans-unit id="c837f409d9c890ff0cf84a0f23501c248975f873" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mask_&lt;/code&gt; is to avoid asynchronous exceptions before the &lt;code&gt;scheduleCallback&lt;/code&gt; call, which would leak the &lt;code&gt;StablePtr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mask_&lt;/code&gt; 前に非同期の例外を避けるためにある &lt;code&gt;scheduleCallback&lt;/code&gt; のリークが発生しまし呼び出し、 &lt;code&gt;StablePtr&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="88156e7be9a84c3b32b21ca9033fb9b40a86fc7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mdo&lt;/code&gt; notation removes the burden of placing explicit &lt;code&gt;rec&lt;/code&gt; blocks in the code. Unlike an ordinary &lt;code&gt;do&lt;/code&gt; expression, in which variables bound by statements are only in scope for later statements, variables bound in an &lt;code&gt;mdo&lt;/code&gt; expression are in scope for all statements of the expression. The compiler then automatically identifies minimal mutually recursively dependent segments of statements, treating them as if the user had wrapped a &lt;code&gt;rec&lt;/code&gt; qualifier around them.</source>
          <target state="translated">&lt;code&gt;mdo&lt;/code&gt; 表記は、明示的な配置の負担削除 &lt;code&gt;rec&lt;/code&gt; コードのブロックを。ステートメントによってバインドされた変数が後のステートメントのスコープ内にのみある通常の &lt;code&gt;do&lt;/code&gt; 式とは異なり、 &lt;code&gt;mdo&lt;/code&gt; 式にバインドされた変数は、式のすべてのステートメントのスコープ内にあります。次に、コンパイラーは、相互に再帰的に依存する最小限のステートメントのセグメントを自動的に識別し、ユーザーがそれらの周りに &lt;code&gt;rec&lt;/code&gt; 修飾子をラップしたかのように扱います。</target>
        </trans-unit>
        <trans-unit id="f6a07857e87c25a69a2a85f3c6940b5d3da66364" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;needle&lt;/code&gt; parameter may not be empty.</source>
          <target state="translated">&lt;code&gt;needle&lt;/code&gt; パラメータが空でないかもしれません。</target>
        </trans-unit>
        <trans-unit id="03da503ca798d541eacd37351134d51c710473a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;nel&lt;/code&gt; capability, which moves the cursor to the first column of the next line. It behaves like a carriage return followed by a line feed.</source>
          <target state="translated">&lt;code&gt;nel&lt;/code&gt; 次の行の最初の列にカーソルを移動させる能力。復帰とそれに続く改行のように動作します。</target>
        </trans-unit>
        <trans-unit id="41854e5bb2dcfb535a78b10a713fbfca69450478" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;nubIntOn&lt;/code&gt; function behaves just like &lt;code&gt;&lt;a href=&quot;data-containers-listutils#v:nubInt&quot;&gt;nubInt&lt;/a&gt;&lt;/code&gt; except it performs comparisons not on the original datatype, but a user-specified projection from that datatype. For example, &lt;code&gt;nubIntOn &lt;a href=&quot;../base-4.13.0.0/prelude#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; can be used to nub characters and typical fixed-with numerical types efficiently.</source>
          <target state="translated">&lt;code&gt;nubIntOn&lt;/code&gt; の機能は同じように動作し &lt;code&gt;&lt;a href=&quot;data-containers-listutils#v:nubInt&quot;&gt;nubInt&lt;/a&gt;&lt;/code&gt; そうでない元のデータ型に比較が、そのデータ型からユーザ指定の投影を行う点が異なります。たとえば、 &lt;code&gt;nubIntOn &lt;a href=&quot;../base-4.13.0.0/prelude#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; を使用して、文字と一般的な数値固定型を効率的にナブすることができます。</target>
        </trans-unit>
        <trans-unit id="238764eaf45a1a62c1753a2837a1022054e829ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;nubIntOn&lt;/code&gt; function behaves just like &lt;code&gt;&lt;a href=&quot;data-containers-listutils#v:nubInt&quot;&gt;nubInt&lt;/a&gt;&lt;/code&gt; except it performs comparisons not on the original datatype, but a user-specified projection from that datatype. For example, &lt;code&gt;nubIntOn &lt;a href=&quot;../base-4.14.1.0/prelude#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; can be used to nub characters and typical fixed-with numerical types efficiently.</source>
          <target state="translated">&lt;code&gt;nubIntOn&lt;/code&gt; の機能は同じように動作し &lt;code&gt;&lt;a href=&quot;data-containers-listutils#v:nubInt&quot;&gt;nubInt&lt;/a&gt;&lt;/code&gt; そうでない元のデータ型に比較が、そのデータ型からユーザ指定の投影を行う点が異なります。たとえば、 &lt;code&gt;nubIntOn &lt;a href=&quot;../base-4.14.1.0/prelude#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; を使用すると、文字や一般的な固定数値タイプを効率的にナブできます。</target>
        </trans-unit>
        <trans-unit id="0766c52e5da98e96b097f0b2e8a0cc9028ac4ec7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;nubIntOn&lt;/code&gt; function behaves just like &lt;code&gt;&lt;a href=&quot;data-containers-listutils#v:nubInt&quot;&gt;nubInt&lt;/a&gt;&lt;/code&gt; except it performs comparisons not on the original datatype, but a user-specified projection from that datatype. For example, &lt;code&gt;nubIntOn &lt;a href=&quot;../base-4.15.0.0/prelude#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; can be used to nub characters and typical fixed-with numerical types efficiently.</source>
          <target state="translated">&lt;code&gt;nubIntOn&lt;/code&gt; の機能は同じように動作し &lt;code&gt;&lt;a href=&quot;data-containers-listutils#v:nubInt&quot;&gt;nubInt&lt;/a&gt;&lt;/code&gt; そうでない元のデータ型に比較が、そのデータ型からユーザ指定の投影を行う点が異なります。たとえば、 &lt;code&gt;nubIntOn &lt;a href=&quot;../base-4.15.0.0/prelude#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; を使用すると、文字や一般的な固定数値タイプを効率的にナブできます。</target>
        </trans-unit>
        <trans-unit id="d601cddbbd9d7126bc0e97c81bf6fdd7871c9080" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;nubOrdOn&lt;/code&gt; function behaves just like &lt;code&gt;&lt;a href=&quot;data-containers-listutils#v:nubOrd&quot;&gt;nubOrd&lt;/a&gt;&lt;/code&gt; except it performs comparisons not on the original datatype, but a user-specified projection from that datatype.</source>
          <target state="translated">&lt;code&gt;nubOrdOn&lt;/code&gt; の機能は同じように動作し &lt;code&gt;&lt;a href=&quot;data-containers-listutils#v:nubOrd&quot;&gt;nubOrd&lt;/a&gt;&lt;/code&gt; そうでない元のデータ型に比較が、そのデータ型からユーザ指定の投影を行う点が異なります。</target>
        </trans-unit>
        <trans-unit id="d367aba8a4bc7af80523df0833dbadc25b08592e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; methods &lt;em&gt;must return a map with a subset (possibly empty) of the keys of the given map&lt;/em&gt;. The values can be modified arbitrarily. Most common variants of &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-intmap-lazy#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, but for example &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; could be used for any &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; 方法は&lt;em&gt;、所与のマップのキーのサブセット（空）で地図を返さなければなりません&lt;/em&gt;。値は任意に変更できます。 &lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; の最も一般的なバリアントは &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-intmap-lazy#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; ですが、たとえば &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; は任意の &lt;code&gt;f&lt;/code&gt; に使用できます。</target>
        </trans-unit>
        <trans-unit id="87db766c3fcfe957880bc536c8055be89a67ca05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; methods &lt;em&gt;must return a map with a subset (possibly empty) of the keys of the given map&lt;/em&gt;. The values can be modified arbitrarily. Most common variants of &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-intmap-strict#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, but for example &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; could be used for any &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; 方法は&lt;em&gt;、所与のマップのキーのサブセット（空）で地図を返さなければなりません&lt;/em&gt;。値は任意に変更できます。 &lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; の最も一般的なバリアントは &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-intmap-strict#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; ですが、たとえば &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; は任意の &lt;code&gt;f&lt;/code&gt; に使用できます。</target>
        </trans-unit>
        <trans-unit id="7b3d76aa425b2c86fc5220b26c112435a53e249f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; methods &lt;em&gt;must return a map with a subset (possibly empty) of the keys of the given map&lt;/em&gt;. The values can be modified arbitrarily. Most common variants of &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-intmap-strict-internal#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, but for example &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; could be used for any &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; 方法は&lt;em&gt;、所与のマップのキーのサブセット（空）で地図を返さなければなりません&lt;/em&gt;。値は任意に変更できます。 &lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; の最も一般的なバリアントは &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-intmap-strict-internal#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; ですが、たとえば &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; は任意の &lt;code&gt;f&lt;/code&gt; に使用できます。</target>
        </trans-unit>
        <trans-unit id="fe60eae85d88c9490c48aade82bc12d2974b6022" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; methods &lt;em&gt;must return a map with a subset (possibly empty) of the keys of the given map&lt;/em&gt;. The values can be modified arbitrarily. Most common variants of &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-map-lazy#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, but for example &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:mapMaybeWithKey&quot;&gt;mapMaybeWithKey&lt;/a&gt; f&lt;/code&gt; could be used for any &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; 方法は&lt;em&gt;、所与のマップのキーのサブセット（空）で地図を返さなければなりません&lt;/em&gt;。値は任意に変更できます。 &lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; の最も一般的なバリアントは &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-map-lazy#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; ですが、たとえば &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:mapMaybeWithKey&quot;&gt;mapMaybeWithKey&lt;/a&gt; f&lt;/code&gt; はどの &lt;code&gt;f&lt;/code&gt; にも使用できます。</target>
        </trans-unit>
        <trans-unit id="48239e0c803c6ef0e5cd08862ca58810b64b5781" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; methods &lt;em&gt;must return a map with a subset (possibly empty) of the keys of the given map&lt;/em&gt;. The values can be modified arbitrarily. Most common variants of &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-map-strict#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, but for example &lt;code&gt;&lt;a href=&quot;data-map-strict#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-map-strict#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; could be used for any &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; 方法は&lt;em&gt;、所与のマップのキーのサブセット（空）で地図を返さなければなりません&lt;/em&gt;。値は任意に変更できます。 &lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; の最も一般的なバリアントは &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-map-strict#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; ですが、たとえば &lt;code&gt;&lt;a href=&quot;data-map-strict#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-map-strict#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; は任意の &lt;code&gt;f&lt;/code&gt; に使用できます。</target>
        </trans-unit>
        <trans-unit id="50f7df8b96731582ad5998e199bcd7caa6862256" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; methods &lt;em&gt;must return a map with a subset (possibly empty) of the keys of the given map&lt;/em&gt;. The values can be modified arbitrarily. Most common variants of &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-intmap-lazy#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, but for example &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; could be used for any &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; 方法は&lt;em&gt;、所与のマップのキーのサブセット（空）で地図を返さなければなりません&lt;/em&gt;。値は任意に変更できます。最も一般的なの変種 &lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; ある &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-intmap-lazy#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; が、例のために &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; は任意のために使用することができ &lt;code&gt;f&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8ef6fce0bb77b22860c0010c07608d5a890578fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; methods &lt;em&gt;must return a map with a subset (possibly empty) of the keys of the given map&lt;/em&gt;. The values can be modified arbitrarily. Most common variants of &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-intmap-strict#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, but for example &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; could be used for any &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; 方法は&lt;em&gt;、所与のマップのキーのサブセット（空）で地図を返さなければなりません&lt;/em&gt;。値は任意に変更できます。最も一般的なの変種 &lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; ある &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-intmap-strict#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; が、例のために &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; は任意のために使用することができ &lt;code&gt;f&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0bd6ba4c2792acbb3c2aab713f7ac895331441da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; methods &lt;em&gt;must return a map with a subset (possibly empty) of the keys of the given map&lt;/em&gt;. The values can be modified arbitrarily. Most common variants of &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-intmap-strict-internal#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, but for example &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; could be used for any &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; 方法は&lt;em&gt;、所与のマップのキーのサブセット（空）で地図を返さなければなりません&lt;/em&gt;。値は任意に変更できます。最も一般的なの変種 &lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; ある &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-intmap-strict-internal#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; が、例のために &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; は任意のために使用することができ &lt;code&gt;f&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="373d721989cc654150bbf0bfb255a4af1891905b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; methods &lt;em&gt;must return a map with a subset (possibly empty) of the keys of the given map&lt;/em&gt;. The values can be modified arbitrarily. Most common variants of &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-map-lazy#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, but for example &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:mapMaybeWithKey&quot;&gt;mapMaybeWithKey&lt;/a&gt; f&lt;/code&gt; could be used for any &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; 方法は&lt;em&gt;、所与のマップのキーのサブセット（空）で地図を返さなければなりません&lt;/em&gt;。値は任意に変更できます。最も一般的なの変種 &lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; があり &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-map-lazy#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; が、例のために &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:mapMaybeWithKey&quot;&gt;mapMaybeWithKey&lt;/a&gt; f&lt;/code&gt; いずれかのために使用することができ &lt;code&gt;f&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b92d866131bfc652b2f085c78ccedd7098e50a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; methods &lt;em&gt;must return a map with a subset (possibly empty) of the keys of the given map&lt;/em&gt;. The values can be modified arbitrarily. Most common variants of &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-map-strict#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, but for example &lt;code&gt;&lt;a href=&quot;data-map-strict#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-map-strict#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; could be used for any &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; 方法は&lt;em&gt;、所与のマップのキーのサブセット（空）で地図を返さなければなりません&lt;/em&gt;。値は任意に変更できます。最も一般的なの変種 &lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; ある &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-map-strict#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; が、例のために &lt;code&gt;&lt;a href=&quot;data-map-strict#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-map-strict#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; は任意のために使用することができ &lt;code&gt;f&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c77efcf307eb6a39e1b4f69936ca978bcecf7066" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; methods &lt;em&gt;must return a map with a subset (possibly empty) of the keys of the given map&lt;/em&gt;. The values can be modified arbitrarily. Most common variants of &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-intmap-lazy#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, but for example &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; could be used for any &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; 方法は&lt;em&gt;、所与のマップのキーのサブセット（空）で地図を返さなければなりません&lt;/em&gt;。値は任意に変更できます。最も一般的なの変種 &lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; ある &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-intmap-lazy#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; が、例のために &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; は任意のために使用することができ &lt;code&gt;f&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09ce2ccedbe6bd5ac1d94120db777fbb8337511f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; methods &lt;em&gt;must return a map with a subset (possibly empty) of the keys of the given map&lt;/em&gt;. The values can be modified arbitrarily. Most common variants of &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-intmap-strict#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, but for example &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; could be used for any &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; 方法は&lt;em&gt;、所与のマップのキーのサブセット（空）で地図を返さなければなりません&lt;/em&gt;。値は任意に変更できます。最も一般的なの変種 &lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; ある &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-intmap-strict#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; が、例のために &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; は任意のために使用することができ &lt;code&gt;f&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0d2e43e335cb4eb09e7735f3bdddf48bef57b356" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; methods &lt;em&gt;must return a map with a subset (possibly empty) of the keys of the given map&lt;/em&gt;. The values can be modified arbitrarily. Most common variants of &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-intmap-strict-internal#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, but for example &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; could be used for any &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; 方法は&lt;em&gt;、所与のマップのキーのサブセット（空）で地図を返さなければなりません&lt;/em&gt;。値は任意に変更できます。最も一般的なの変種 &lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; ある &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-intmap-strict-internal#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; が、例のために &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; は任意のために使用することができ &lt;code&gt;f&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="52a6515b2ab89354c9fee21d1ff0883f508eeed3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; methods &lt;em&gt;must return a map with a subset (possibly empty) of the keys of the given map&lt;/em&gt;. The values can be modified arbitrarily. Most common variants of &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-map-lazy#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, but for example &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:mapMaybeWithKey&quot;&gt;mapMaybeWithKey&lt;/a&gt; f&lt;/code&gt; could be used for any &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; 方法は&lt;em&gt;、所与のマップのキーのサブセット（空）で地図を返さなければなりません&lt;/em&gt;。値は任意に変更できます。最も一般的なの変種 &lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; があり &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-map-lazy#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; が、例のために &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:mapMaybeWithKey&quot;&gt;mapMaybeWithKey&lt;/a&gt; f&lt;/code&gt; いずれかのために使用することができ &lt;code&gt;f&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c215bc0ca5c8d4414abd0c0e1f3423af0982dbdf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; methods &lt;em&gt;must return a map with a subset (possibly empty) of the keys of the given map&lt;/em&gt;. The values can be modified arbitrarily. Most common variants of &lt;code&gt;only1&lt;/code&gt; and &lt;code&gt;only2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-map-strict#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, but for example &lt;code&gt;&lt;a href=&quot;data-map-strict#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-map-strict#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; could be used for any &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; 方法は&lt;em&gt;、所与のマップのキーのサブセット（空）で地図を返さなければなりません&lt;/em&gt;。値は任意に変更できます。最も一般的なの変種 &lt;code&gt;only1&lt;/code&gt; と &lt;code&gt;only2&lt;/code&gt; ある &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt; &lt;a href=&quot;data-map-strict#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; が、例のために &lt;code&gt;&lt;a href=&quot;data-map-strict#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-map-strict#v:filterWithKey&quot;&gt;filterWithKey&lt;/a&gt; f&lt;/code&gt; は任意のために使用することができ &lt;code&gt;f&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="46099596c66e9f01cbd3f7bcc5b5f08680659ccd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pat_lhs&lt;/code&gt; for explicitly bidirectional construction cannot use Record syntax. (Because the rhs &lt;em&gt;expr&lt;/em&gt; might be constructing different data constructors.) It can use guards with multiple equations.</source>
          <target state="translated">明示的な双方向構築の &lt;code&gt;pat_lhs&lt;/code&gt; はRecord構文を使用できません。（rhs &lt;em&gt;expr&lt;/em&gt;は異なるデータコンストラクターを構築している可能性があるためです。）複数の方程式でガードを使用できます。</target>
        </trans-unit>
        <trans-unit id="c77daba6d5e5a119d170e42d9dd4a10538222183" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;qq&lt;/code&gt; quasiquoter would be able to see the definition of &lt;code&gt;f&lt;/code&gt; from the preceding declaration group, but not the definitions of &lt;code&gt;h&lt;/code&gt; or &lt;code&gt;k&lt;/code&gt;, or any definitions from subsequent declaration groups.</source>
          <target state="translated">&lt;code&gt;qq&lt;/code&gt; quasiquoterは、の定義を参照することができるであろう &lt;code&gt;f&lt;/code&gt; の定義先行宣言群からではなく、 &lt;code&gt;h&lt;/code&gt; または &lt;code&gt;k&lt;/code&gt; 、または後続の宣言グループから任意の定義。</target>
        </trans-unit>
        <trans-unit id="c466f28061a085d0fe280fa263ce6f774fe3c68f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;recover&lt;/code&gt; function is used to continue decoding in the presence of invalid or unrepresentable sequences. This includes both those detected by &lt;code&gt;encode&lt;/code&gt; returning &lt;code&gt;InvalidSequence&lt;/code&gt; and those that occur because the input byte sequence appears to be truncated.</source>
          <target state="translated">&lt;code&gt;recover&lt;/code&gt; 機能が無効または表現不可能配列の存在下で、復号継続するために使用されます。これには、 &lt;code&gt;encode&lt;/code&gt; &lt;code&gt;InvalidSequence&lt;/code&gt; を返すことによって検出されたものと、入力バイトシーケンスが切り捨てられているように見えるために発生したものの両方が含まれます。</target>
        </trans-unit>
        <trans-unit id="a473a7ced8aa63a52d8a8ae70bef9c494ad7a2e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;return&lt;/code&gt; function simply creates a continuation which passes the value on.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; 機能は、単純に値を渡し継続を作成します。</target>
        </trans-unit>
        <trans-unit id="81379fa1503519747e0a096e84f164e14f442525" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;runghc&lt;/code&gt; command-line looks like:</source>
          <target state="translated">&lt;code&gt;runghc&lt;/code&gt; コマンドライン次のようになります。</target>
        </trans-unit>
        <trans-unit id="cebfe6013064a220b5cba39faaac05a83ca046c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;self&lt;/code&gt; type is hidden from the outside; any attempt to apply &lt;code&gt;_this&lt;/code&gt;, &lt;code&gt;_inc&lt;/code&gt; or &lt;code&gt;_display&lt;/code&gt; as functions will raise a compile-time error. In other words, &lt;em&gt;GHC defines a record selector function only for fields whose type does not mention the existentially-quantified variables&lt;/em&gt;. (This example used an underscore in the fields for which record selectors will not be defined, but that is only programming style; GHC ignores them.)</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; タイプは外部から隠されています。関数として &lt;code&gt;_this&lt;/code&gt; 、 &lt;code&gt;_inc&lt;/code&gt; 、または &lt;code&gt;_display&lt;/code&gt; を適用しようとすると、コンパイル時エラーが発生します。言い換えると、&lt;em&gt;GHCは、タイプが存在記号変数に言及していないフィールドに対してのみレコードセレクター関数を定義します&lt;/em&gt;。（この例では、レコードセレクターが定義されないフィールドにアンダースコアを使用しましたが、これはプログラミングスタイルのみであり、GHCはそれらを無視します。）</target>
        </trans-unit>
        <trans-unit id="51e3f0a426cb551b465e32dbdd47361e262cdb1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sequenceA&lt;/code&gt; and &lt;code&gt;sequence&lt;/code&gt; methods</source>
          <target state="translated">&lt;code&gt;sequenceA&lt;/code&gt; と &lt;code&gt;sequence&lt;/code&gt; メソッド</target>
        </trans-unit>
        <trans-unit id="aa8f29d0aba7b46039df62fe50f4c7d9ad9965c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shows&lt;/code&gt; functions return a function that prepends the output &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to an existing &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;. This allows constant-time concatenation of results using function composition.</source>
          <target state="translated">&lt;code&gt;shows&lt;/code&gt; 機能は、出力前に付加機能を返す &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 既存の &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 。これにより、関数構成を使用して結果を一定時間連結できます。</target>
        </trans-unit>
        <trans-unit id="2bfd895a0337bb9829478985b48c54b24e2e9ad9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shows&lt;/code&gt; functions return a function that prepends the output &lt;code&gt;&lt;a href=&quot;prelude#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to an existing &lt;code&gt;&lt;a href=&quot;prelude#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;. This allows constant-time concatenation of results using function composition.</source>
          <target state="translated">&lt;code&gt;shows&lt;/code&gt; 機能は、出力前に付加機能を返す &lt;code&gt;&lt;a href=&quot;prelude#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 既存の &lt;code&gt;&lt;a href=&quot;prelude#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 。これにより、関数構成を使用して結果を一定時間連結できます。</target>
        </trans-unit>
        <trans-unit id="8762c6cbedea04c42d6cbeebccb6250ad93ea53a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sprint&lt;/code&gt; function adds an exclamation mark at the end of any printed value. Running GHCi with the command:</source>
          <target state="translated">&lt;code&gt;sprint&lt;/code&gt; 機能は、任意の印刷された値の最後に感嘆符を追加します。次のコマンドでGHCiを実行します。</target>
        </trans-unit>
        <trans-unit id="b8ab09f95cb11cc6d3321f577cbb4de51fef8004" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;state hack&lt;/code&gt; optimization can result in non-obvious changes in evaluation ordering which may hide exceptions, even with &lt;a href=&quot;using-optimisation#ghc-flag--fpedantic-bottoms&quot;&gt;&lt;code&gt;-fpedantic-bottoms&lt;/code&gt;&lt;/a&gt; (see, e.g., &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/7411&quot;&gt;Issue #7411&lt;/a&gt;). For instance,</source>
          <target state="translated">&lt;code&gt;state hack&lt;/code&gt; 最適化がさえ持つ例外を隠すことが評価の順序で非明らかな変化をもたらすことができ&lt;a href=&quot;using-optimisation#ghc-flag--fpedantic-bottoms&quot;&gt; &lt;code&gt;-fpedantic-bottoms&lt;/code&gt; &lt;/a&gt;（例えば、&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/7411&quot;&gt;＃7411を発行します&lt;/a&gt;）。例えば、</target>
        </trans-unit>
        <trans-unit id="3fc26580a12c7237de8bc3feeef150e25e82b7eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;template-haskell&lt;/code&gt; library provides &lt;code&gt;Lift&lt;/code&gt; instances for many common data types. Furthermore, it is possible to derive &lt;code&gt;Lift&lt;/code&gt; instances automatically by using the &lt;a href=&quot;#extension-DeriveLift&quot;&gt;&lt;code&gt;DeriveLift&lt;/code&gt;&lt;/a&gt; language extension. See &lt;a href=&quot;#deriving-lift&quot;&gt;Deriving Lift instances&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;template-haskell&lt;/code&gt; ライブラリが提供して &lt;code&gt;Lift&lt;/code&gt; 多くの一般的なデータ型のインスタンスを。さらに、&lt;a href=&quot;#extension-DeriveLift&quot;&gt; &lt;code&gt;DeriveLift&lt;/code&gt; &lt;/a&gt;言語拡張を使用して、 &lt;code&gt;Lift&lt;/code&gt; インスタンスを自動的に派生させることができます。詳しくは、&lt;a href=&quot;#deriving-lift&quot;&gt;リフトインスタンスの導出&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="cc491cbafae8602aedcf7deb49e4b74f8a072567" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;template-haskell&lt;/code&gt; library provides &lt;code&gt;Lift&lt;/code&gt; instances for many common data types. Furthermore, it is possible to derive &lt;code&gt;Lift&lt;/code&gt; instances automatically by using the &lt;a href=&quot;deriving_extra#extension-DeriveLift&quot;&gt;&lt;code&gt;DeriveLift&lt;/code&gt;&lt;/a&gt; language extension. See &lt;a href=&quot;deriving_extra#deriving-lift&quot;&gt;Deriving Lift instances&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;template-haskell&lt;/code&gt; ライブラリが提供して &lt;code&gt;Lift&lt;/code&gt; 多くの一般的なデータ型のインスタンスを。さらに、&lt;a href=&quot;deriving_extra#extension-DeriveLift&quot;&gt; &lt;code&gt;DeriveLift&lt;/code&gt; &lt;/a&gt;言語拡張機能を使用して、 &lt;code&gt;Lift&lt;/code&gt; インスタンスを自動的に派生させることができます。詳細については、&lt;a href=&quot;deriving_extra#deriving-lift&quot;&gt;Liftインスタンスの派生を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="979881d56bf63876025a9e6ac559a5d09f689295" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toList&lt;/code&gt; function below lazily transforms a &lt;code&gt;Foldable&lt;/code&gt; structure to a List. Note that this transformation may be lossy, e.g. for a keyed container (&lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;HashMap&lt;/code&gt;, &amp;hellip;) the output stream holds only the values, not the keys. Lossless transformations to/from lists of &lt;code&gt;(key,
 value)&lt;/code&gt; pairs are typically available in the modules for the specific container types.</source>
          <target state="translated">&lt;code&gt;toList&lt;/code&gt; 以下の機能が遅延して変換 &lt;code&gt;Foldable&lt;/code&gt; リストに構造を。この変換は損失を伴う可能性があることに注意してください。たとえば、キー付きコンテナ（ &lt;code&gt;Map&lt;/code&gt; 、 &lt;code&gt;HashMap&lt;/code&gt; 、&amp;hellip;）の場合、出力ストリームは値のみを保持し、キーは保持しません。 &lt;code&gt;(key, value)&lt;/code&gt; ペアのリストとの間のロスレス変換は、通常、特定のコンテナータイプのモジュールで使用できます。</target>
        </trans-unit>
        <trans-unit id="8cedaf35635e98aff14e2be2770e441c0a4ccd4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transformers&lt;/code&gt;-style monad transfomer</source>
          <target state="translated">&lt;code&gt;transformers&lt;/code&gt; スタイルのモナドtransfomer</target>
        </trans-unit>
        <trans-unit id="4db916f09ae9ad82e1c17b85b42a3e324b1b316a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;traverse&lt;/code&gt; and &lt;code&gt;mapM&lt;/code&gt; methods</source>
          <target state="translated">&lt;code&gt;traverse&lt;/code&gt; と &lt;code&gt;mapM&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="adbf9d076f18bc800a1c0458fc70e137b98ee09f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try&lt;/code&gt; combinator can for example be used to distinguish identifiers and reserved words. Both reserved words and identifiers are a sequence of letters. Whenever we expect a certain reserved word where we can also expect an identifier we have to use the &lt;code&gt;try&lt;/code&gt; combinator. Suppose we write:</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; コンビネータは、例えば、識別子と予約語を区別するために使用することができます。予約語と識別子はどちらも一連の文字です。識別子も期待できる特定の予約語が必要な場合は常に、 &lt;code&gt;try&lt;/code&gt; コンビネータを使用する必要があります。次のように書いたとします。</target>
        </trans-unit>
        <trans-unit id="d03c88b23debcedbc11667e18141e6115f243880" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try&lt;/code&gt; functions</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; 機能</target>
        </trans-unit>
        <trans-unit id="9192255b8c683615d80a4ee64628e5e043860b7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type role&lt;/code&gt; (enabled with &lt;a href=&quot;#extension-RoleAnnotations&quot;&gt;&lt;code&gt;RoleAnnotations&lt;/code&gt;&lt;/a&gt;) declaration forces the parameter &lt;code&gt;a&lt;/code&gt; to be at role representational, not role phantom. GHC then checks the user-supplied roles to make sure they don&amp;rsquo;t break any promises. It would be bad, for example, if the user could make &lt;code&gt;BadIdea&lt;/code&gt;&amp;lsquo;s role be representational.</source>
          <target state="translated">&lt;code&gt;type role&lt;/code&gt; （と有効&lt;a href=&quot;#extension-RoleAnnotations&quot;&gt; &lt;code&gt;RoleAnnotations&lt;/code&gt; &lt;/a&gt;）宣言力パラメータ &lt;code&gt;a&lt;/code&gt; が役割具象的ではなく、役割ファントムであることを。次に、GHCはユーザー提供の役割をチェックして、約束を破らないことを確認します。たとえば、ユーザーが &lt;code&gt;BadIdea&lt;/code&gt; のロールを代表的なものにできるとしたら、それは悪いことです。</target>
        </trans-unit>
        <trans-unit id="3ab97fc80353826963fc8f16937897a7d19ff2bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type role&lt;/code&gt; (enabled with &lt;a href=&quot;#extension-RoleAnnotations&quot;&gt;&lt;code&gt;RoleAnnotations&lt;/code&gt;&lt;/a&gt;) declaration forces the parameter &lt;code&gt;a&lt;/code&gt; to be at role representational, not role phantom. GHC then checks the user-supplied roles to make sure they don&amp;rsquo;t break any promises. It would be bad, for example, if the user could make &lt;code&gt;BadIdea&lt;/code&gt;&amp;rsquo;s role be representational.</source>
          <target state="translated">&lt;code&gt;type role&lt;/code&gt; （と有効&lt;a href=&quot;#extension-RoleAnnotations&quot;&gt; &lt;code&gt;RoleAnnotations&lt;/code&gt; &lt;/a&gt;）宣言力パラメータ &lt;code&gt;a&lt;/code&gt; が役割具象的ではなく、役割ファントムであることを。次にGHCは、ユーザーが指定した役割をチェックして、約束に違反していないことを確認します。たとえば、ユーザーが &lt;code&gt;BadIdea&lt;/code&gt; の役割を代表的なものにできるとしたら、それは悪いことです。</target>
        </trans-unit>
        <trans-unit id="bbd3777e534f72ef4343d8ae216222c351c56937" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;u&lt;/code&gt; statement uses &lt;code&gt;(M.&amp;gt;&amp;gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; ステートメントの使用 &lt;code&gt;(M.&amp;gt;&amp;gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf4bd8ddd7070927041be90584a981f460d98709" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;x &amp;lt;- u&lt;/code&gt; statement uses &lt;code&gt;(M.&amp;gt;&amp;gt;=)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x &amp;lt;- u&lt;/code&gt; ステートメント用途 &lt;code&gt;(M.&amp;gt;&amp;gt;=)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="163ed70634e5daf67472449520f0d0d1c209a86f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{-# SOURCE #-}&lt;/code&gt; pragma is used only in &lt;code&gt;import&lt;/code&gt; declarations, to break a module loop. It is described in detail in &lt;a href=&quot;../separate_compilation#mutual-recursion&quot;&gt;How to compile mutually recursive modules&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;{-# SOURCE #-}&lt;/code&gt; プラグマのみで使用されている &lt;code&gt;import&lt;/code&gt; モジュールループを破るために、宣言。これについては、&lt;a href=&quot;../separate_compilation#mutual-recursion&quot;&gt;相互再帰モジュールをコンパイルする方法&lt;/a&gt;で詳しく説明されています。</target>
        </trans-unit>
        <trans-unit id="b020a7d468bfda2ff2309461d916b84feeabc338" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{-# SOURCE #-}&lt;/code&gt; pragma is used only in &lt;code&gt;import&lt;/code&gt; declarations, to break a module loop. It is described in detail in &lt;a href=&quot;separate_compilation#mutual-recursion&quot;&gt;How to compile mutually recursive modules&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;{-# SOURCE #-}&lt;/code&gt; プラグマのみで使用されている &lt;code&gt;import&lt;/code&gt; モジュールループを破るために、宣言。&lt;a href=&quot;separate_compilation#mutual-recursion&quot;&gt;相互再帰的なモジュールをコンパイルする方法&lt;/a&gt;で詳しく説明されています。</target>
        </trans-unit>
        <trans-unit id="1c4e367df2b1b94e86aa02176ef763523fb3307a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~&lt;/code&gt; annotation must be written in prefix form:</source>
          <target state="translated">&lt;code&gt;~&lt;/code&gt; 注釈は、プレフィックス形式で書かれている必要があります。</target>
        </trans-unit>
        <trans-unit id="0ee4634b8912c617cc4c956549ecbf5f2fbc8ae6" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;global package database&lt;/em&gt;, which comes with your GHC installation, e.g. &lt;code&gt;/usr/lib/ghc-6.12.1/package.conf.d&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;グローバルパッケージデータベース&lt;/em&gt;あなたのGHCのインストールが付属して、例えば、 &lt;code&gt;/usr/lib/ghc-6.12.1/package.conf.d&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4a81be10d439420dbf2ec989064392ad08ec7838" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;interactive options&lt;/em&gt; apply when evaluating expressions and commands typed at the GHCi prompt.</source>
          <target state="translated">&lt;em&gt;対話型のオプションは、&lt;/em&gt; GHCiのプロンプトで入力された表現とコマンドを評価するときに適用されます。</target>
        </trans-unit>
        <trans-unit id="7491cf46ec5e1fbb15f8b7eb9e41d24a24f00f6a" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;k&lt;/em&gt;th match, followed by the remainder of the string</source>
          <target state="translated">&lt;em&gt;k個&lt;/em&gt;の文字列の残りの部分に続く一致番目、</target>
        </trans-unit>
        <trans-unit id="bc4c2343b61995f2f1a5ec7cbe01528dd89e1ed3" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;loading options&lt;/em&gt; apply when loading modules</source>
          <target state="translated">&lt;em&gt;ロード・オプションは、&lt;/em&gt;モジュールをロードするときに適用されます</target>
        </trans-unit>
        <trans-unit id="80049228c8301318bfcd4d99de0d8c4f642d80d1" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;user package database&lt;/em&gt; private to each user. On Unix systems this will be &lt;code&gt;$HOME/.ghc/arch-os-version/package.conf.d&lt;/code&gt;, and on Windows it will be something like &lt;code&gt;C:\Documents&amp;nbsp;And&amp;nbsp;Settings\user\ghc\package.conf.d&lt;/code&gt;. The &lt;code&gt;ghc-pkg&lt;/code&gt; tool knows where this file should be located, and will create it if it doesn&amp;rsquo;t exist (see &lt;a href=&quot;#package-management&quot;&gt;Package management (the ghc-pkg command)&lt;/a&gt;).</source>
          <target state="translated">各ユーザー専用の&lt;em&gt;ユーザーパッケージデータベース&lt;/em&gt;。Unixシステムでは、これは &lt;code&gt;$HOME/.ghc/arch-os-version/package.conf.d&lt;/code&gt; であり、Windowsでは &lt;code&gt;C:\Documents&amp;nbsp;And&amp;nbsp;Settings\user\ghc\package.conf.d&lt;/code&gt; ます。 &lt;code&gt;ghc-pkg&lt;/code&gt; ツールは、このファイルが置かれるべき場所を知っている、それが存在しない場合（参照、それを作成する&lt;a href=&quot;#package-management&quot;&gt;パッケージ管理（GHC-pkgコマンドを）&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="4df33777d071258dc6c9c7cc4bf4b2806b728297" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;&lt;code&gt;FRList&lt;/code&gt;&lt;/strong&gt; type could be further extended with instances of &lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;control-applicative#t:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt;, etc., and could then provide a fully-featured list type, optimised for reuse without space-leaks. If, however, all that's required is space-efficient, re-use friendly iteration, less is perhaps more, and just &lt;code&gt;Foldable&lt;/code&gt; may be sufficient.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;FRList&lt;/code&gt; の&lt;/strong&gt;タイプは、さらにインスタンスを拡張することができ &lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; の、 &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;control-applicative#t:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt; など、その後、スペースリークせずに再利用するために最適化されたフル機能のリストの種類を、提供することができます。ただし、必要なのがスペース効率が高く、再利用しやすいイテレーションだけである場合は、おそらく少ないほうが多く、 &lt;code&gt;Foldable&lt;/code&gt; だけで十分な場合があります。</target>
        </trans-unit>
        <trans-unit id="941913194462867445681166d58a9caadf6e06c1" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/strong&gt; list structure works as an efficient iterator when used just once. When space-leaks via list reuse are not a concern, and/or memoisation is actually desirable, the regular list implementation is likely to be faster. This is not a suggestion to replace all your uses of &lt;strong&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/strong&gt; with a generative alternative.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;[]&lt;/code&gt; &lt;/strong&gt;一度だけ使用された場合、リスト構造は、効率的なイテレータとして動作します。リストの再利用によるスペースリークが問題にならない場合、および/またはメモ化が実際に望ましい場合は、通常のリストの実装が高速になる可能性があります。これは、&lt;strong&gt; &lt;code&gt;[]&lt;/code&gt; の&lt;/strong&gt;すべての使用を生成的な代替手段に置き換えることを提案するものではありません。</target>
        </trans-unit>
        <trans-unit id="c7e1c7ee8fcc39fc1932af678408736014433965" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;&lt;code&gt;unFR&lt;/code&gt;&lt;/strong&gt; field of this type is essentially its &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; method with the list as its first rather than last argument. Thus we immediately get a &lt;code&gt;Foldable&lt;/code&gt; instance (and a &lt;code&gt;&lt;a href=&quot;data-foldable#v:toList&quot;&gt;toList&lt;/a&gt;&lt;/code&gt; function mapping an &lt;strong&gt;&lt;code&gt;FRList&lt;/code&gt;&lt;/strong&gt; to a regular list).</source>
          <target state="translated">このタイプの&lt;strong&gt; &lt;code&gt;unFR&lt;/code&gt; &lt;/strong&gt;フィールドは、基本的に、最後の引数ではなく最初の引数としてリストを使用する &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; メソッドです。したがって、私たちはすぐに取得 &lt;code&gt;Foldable&lt;/code&gt; のインスタンス（と &lt;code&gt;&lt;a href=&quot;data-foldable#v:toList&quot;&gt;toList&lt;/a&gt;&lt;/code&gt; マッピング機能&lt;strong&gt; &lt;code&gt;FRList&lt;/code&gt; を&lt;/strong&gt;定期的にリストにします）。</target>
        </trans-unit>
        <trans-unit id="06291563b1a287d734cf4e445906b8935befc784" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;ghc-pkg&lt;/strong&gt; tool is for querying and modifying package databases. To see what package databases are in use, use &lt;code&gt;ghc-pkg list&lt;/code&gt;. The stack of databases that &lt;strong&gt;ghc-pkg&lt;/strong&gt; knows about can be modified using the &lt;a href=&quot;#envvar-GHC_PACKAGE_PATH&quot; id=&quot;index-10&quot;&gt;&lt;code&gt;GHC_PACKAGE_PATH&lt;/code&gt;&lt;/a&gt; environment variable (see &lt;a href=&quot;#ghc-package-path&quot;&gt;The GHC_PACKAGE_PATH environment variable&lt;/a&gt;, and using &lt;a href=&quot;#ghc-flag--package-db%20%E2%9F%A8file%E2%9F%A9&quot;&gt;&lt;code&gt;-package-db ⟨file⟩&lt;/code&gt;&lt;/a&gt; options on the &lt;strong&gt;ghc-pkg&lt;/strong&gt; command line.</source>
          <target state="translated">&lt;strong&gt;GHC-PKGの&lt;/strong&gt;ツールは、パッケージデータベースを照会し、修正するためのものです。使用中のパッケージデータベースを確認するには、 &lt;code&gt;ghc-pkg list&lt;/code&gt; を使用します。データベースのスタック&lt;strong&gt;GHC-PKGの&lt;/strong&gt;程度知っているが使用して変更することができ&lt;a href=&quot;#envvar-GHC_PACKAGE_PATH&quot; id=&quot;index-10&quot;&gt; &lt;code&gt;GHC_PACKAGE_PATH&lt;/code&gt; の&lt;/a&gt;環境変数（参照&lt;a href=&quot;#ghc-package-path&quot;&gt;GHC_PACKAGE_PATH環境変数を&lt;/a&gt;、そして使用して&lt;a href=&quot;#ghc-flag--package-db%20%E2%9F%A8file%E2%9F%A9&quot;&gt; &lt;code&gt;-package-db ⟨file⟩&lt;/code&gt; &lt;/a&gt;のオプション&lt;strong&gt;GHC-PKGの&lt;/strong&gt;コマンドラインを。</target>
        </trans-unit>
        <trans-unit id="21c02a6f4db72c82bb4b16489a1dc3d9f3dcd251" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;gv&lt;/strong&gt; and &lt;strong&gt;ghostview&lt;/strong&gt; programs have a &amp;ldquo;watch file&amp;rdquo; option can be used to view an up-to-date heap profile of your program as it runs. Simply generate an incremental heap profile as described in the previous section. Run &lt;strong&gt;gv&lt;/strong&gt; on your profile:</source>
          <target state="translated">&lt;strong&gt;GV&lt;/strong&gt;と&lt;strong&gt;ghostviewの&lt;/strong&gt;プログラムは、「ウォッチファイル」オプションは、それが実行されると、プログラムの最新のヒーププロファイルを表示するために使用することができますがあります。前のセクションで説明したように、増分ヒーププロファイルを生成するだけです。プロファイルで&lt;strong&gt;gv&lt;/strong&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="c2745da38f58a1f51bf9ab0d3486cc161c559b3b" translate="yes" xml:space="preserve">
          <source>The ASCII encoding is a 7-bit encoding. The &lt;em&gt;Char7&lt;/em&gt; encoding implemented here works by truncating the Unicode codepoint to 7-bits, prefixing it with a leading 0, and encoding the resulting 8-bits as a single byte. For the codepoints 0-127 this corresponds the ASCII encoding.</source>
          <target state="translated">ASCIIエンコーディングは7ビットエンコーディングです。&lt;em&gt;Char7を&lt;/em&gt;ここで実施エンコーディングは、7ビットのUnicodeコードポイントを切り捨てるリーディング0でそれをプレフィックス、及びシングルバイトとして得られた8ビットを符号化することによって動作します。コードポイント0〜127の場合、これはASCIIエンコーディングに対応します。</target>
        </trans-unit>
        <trans-unit id="3335871b5b9fc97a659ecaa26da1b75a25e4dbb8" translate="yes" xml:space="preserve">
          <source>The Accum monad</source>
          <target state="translated">アキュムモナド</target>
        </trans-unit>
        <trans-unit id="54a2a116adb6e3d511623890991b066600f4a837" translate="yes" xml:space="preserve">
          <source>The AccumT monad transformer</source>
          <target state="translated">アキュムTモナドトランス</target>
        </trans-unit>
        <trans-unit id="e322260aafb4a2f2a2ca6cdac3c65b6a2316bc3a" translate="yes" xml:space="preserve">
          <source>The Any type</source>
          <target state="translated">任意のタイプの</target>
        </trans-unit>
        <trans-unit id="77184a896c809c5987a275354391bcb9afa84715" translate="yes" xml:space="preserve">
          <source>The Binary class</source>
          <target state="translated">バイナリクラス</target>
        </trans-unit>
        <trans-unit id="f21b224c49e198997a984cc9f95eb312adc1246f" translate="yes" xml:space="preserve">
          <source>The Binary instance for ResolvedBCOs.</source>
          <target state="translated">ResolvedBCOs のバイナリインスタンス。</target>
        </trans-unit>
        <trans-unit id="1340d1532cd96c08b9077a17a6e5cf354440ec03" translate="yes" xml:space="preserve">
          <source>The Builder monoid</source>
          <target state="translated">ビルダーのモノイド</target>
        </trans-unit>
        <trans-unit id="66e06b4ddeb35c347cf81033820bf5237468d89f" translate="yes" xml:space="preserve">
          <source>The Builder type</source>
          <target state="translated">ビルダーの種類</target>
        </trans-unit>
        <trans-unit id="6f59e6c207b1a2a380dd7912a6b135a7a6ef6d7e" translate="yes" xml:space="preserve">
          <source>The C call &lt;code&gt;hs_try_putmvar(cap, mvar)&lt;/code&gt; is equivalent to the Haskell call &lt;code&gt;tryPutMVar mvar ()&lt;/code&gt;, except that it is</source>
          <target state="translated">C呼び出し &lt;code&gt;hs_try_putmvar(cap, mvar)&lt;/code&gt; は、Haskell呼び出し &lt;code&gt;tryPutMVar mvar ()&lt;/code&gt; と同等ですが、</target>
        </trans-unit>
        <trans-unit id="930ac2c5a6231d7b293cf2f4934390d97c5dceec" translate="yes" xml:space="preserve">
          <source>The C code generator is only supported when GHC is built in unregisterised mode, a mode where GHC produces &amp;ldquo;portable&amp;rdquo; C code as output to facilitate porting GHC itself to a new platform. This mode produces much slower code though so it&amp;rsquo;s unlikely your version of GHC was built this way. If it has then the native code generator probably won&amp;rsquo;t be available. You can check this information by calling &lt;code&gt;ghc --info&lt;/code&gt; (see &lt;a href=&quot;using#ghc-flag---info&quot;&gt;&lt;code&gt;--info&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Cコードジェネレーターは、GHCが未登録モード（GHCが新しいプラットフォームへの移植を容易にするために出力として「移植可能な」Cコードを生成するモード）で構築されている場合にのみサポートされます。ただし、このモードでははるかに遅いコードが生成されるため、GHCのバージョンがこの方法でビルドされた可能性は低いです。もしそうなら、ネイティブコードジェネレーターはおそらく利用できません。この情報を確認するには、 &lt;code&gt;ghc --info&lt;/code&gt; を呼び出します（&lt;a href=&quot;using#ghc-flag---info&quot;&gt; &lt;code&gt;--info&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a4478e58f6a72e43562ea06bc573417edc1f53b0" translate="yes" xml:space="preserve">
          <source>The C compiler to use (default: &lt;code&gt;gcc&lt;/code&gt;)</source>
          <target state="translated">使用するCコンパイラ（デフォルト： &lt;code&gt;gcc&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="e1af0dbad65022684bd70994a6b169612ac3f0f8" translate="yes" xml:space="preserve">
          <source>The C pre-processor &lt;strong&gt;cpp&lt;/strong&gt; is run over your Haskell code if the &lt;code&gt;-cpp&lt;/code&gt; option or &lt;code&gt;-XCPP&lt;/code&gt; extension are given. Unless you are building a large system with significant doses of conditional compilation, you really shouldn&amp;rsquo;t need it.</source>
          <target state="translated">&lt;code&gt;-cpp&lt;/code&gt; オプションまたは &lt;code&gt;-XCPP&lt;/code&gt; 拡張子が指定されている場合、Cプリプロセッサ&lt;strong&gt;cpp&lt;/strong&gt;はHaskellコード上で実行されます。大量の条件付きコンパイルを使用して大規模なシステムを構築しているのでない限り、実際には必要ありません。</target>
        </trans-unit>
        <trans-unit id="01130faef1141c2e4c47f77d4532a52f8115186a" translate="yes" xml:space="preserve">
          <source>The C pre-processor &lt;strong&gt;cpp&lt;/strong&gt; is run over your Haskell code only if the &lt;code&gt;-cpp&lt;/code&gt; option -cpp option is given. Unless you are building a large system with significant doses of conditional compilation, you really shouldn&amp;rsquo;t need it.</source>
          <target state="translated">Cプリプロセッサー&lt;strong&gt;cpp&lt;/strong&gt;は、 &lt;code&gt;-cpp&lt;/code&gt; オプション-cppオプションが指定されている場合にのみ、Haskellコード上で実行されます。大量の条件付きコンパイルを使用して大規模なシステムを構築しているのでない限り、実際には必要ありません。</target>
        </trans-unit>
        <trans-unit id="be8a30e9f725c587f4c42c5c2ac8a566321ce4b5" translate="yes" xml:space="preserve">
          <source>The C program is compiled using the Haskell compiler. This provides the include path to &lt;code&gt;HsFFI.h&lt;/code&gt; which is automatically included into the C program.</source>
          <target state="translated">Cプログラムは、Haskellコンパイラを使用してコンパイルされます。これにより、Cプログラムに自動的にインクルードされる &lt;code&gt;HsFFI.h&lt;/code&gt; へのインクルードパスが提供されます。</target>
        </trans-unit>
        <trans-unit id="e91fc210907e94074bed36ea19e87412c05ed8a0" translate="yes" xml:space="preserve">
          <source>The C-side interface</source>
          <target state="translated">C側のインターフェース</target>
        </trans-unit>
        <trans-unit id="7ff7e343e1c6696d97347c4a9cd5a3b43c6bba9e" translate="yes" xml:space="preserve">
          <source>The CPU time used during GC itself</source>
          <target state="translated">GC 自身が使用しているCPU時間</target>
        </trans-unit>
        <trans-unit id="9d849fe5e03e42e4cfc89679d13718f7c8ec55fb" translate="yes" xml:space="preserve">
          <source>The CPU time used during the post-mark pause phase of the concurrent nonmoving GC.</source>
          <target state="translated">並行不動GCのポストマークポーズフェーズで使用されるCPU時間。</target>
        </trans-unit>
        <trans-unit id="6bd9ffd9c0904c0c2f55fc70386db0a7ddaf3815" translate="yes" xml:space="preserve">
          <source>The Chapter &lt;em&gt;does&lt;/em&gt; allow for implementations to move objects around during &lt;code&gt;unsafe&lt;/code&gt; calls as well. So strictly Haskell 2010-conforming programs cannot pass heap-allocated references to &lt;code&gt;unsafe&lt;/code&gt; FFI calls either.</source>
          <target state="translated">この章で&lt;em&gt;は&lt;/em&gt;、 &lt;code&gt;unsafe&lt;/code&gt; 呼び出し中にも実装がオブジェクトを移動できるようにしています。したがって、厳密にはHaskell 2010準拠のプログラムは、ヒープに割り当てられた参照を &lt;code&gt;unsafe&lt;/code&gt; FFI呼び出しに渡すこともできません。</target>
        </trans-unit>
        <trans-unit id="9b0e04ec6361f33e0d68f7f33f77c1ab233452ad" translate="yes" xml:space="preserve">
          <source>The Chapter does &lt;em&gt;not&lt;/em&gt; require implementations to refrain from doing the same for &lt;code&gt;unsafe&lt;/code&gt; calls, so strictly Haskell 2010-conforming programs cannot pass heap-allocated references to &lt;code&gt;unsafe&lt;/code&gt; FFI calls either.</source>
          <target state="translated">この章では、実装が &lt;code&gt;unsafe&lt;/code&gt; 呼び出しに対して同じことを行わないようにする必要が&lt;em&gt;ない&lt;/em&gt;ため、厳密にHaskell 2010準拠のプログラムは、ヒープに割り当てられた参照を &lt;code&gt;unsafe&lt;/code&gt; FFI呼び出しに渡すことができません。</target>
        </trans-unit>
        <trans-unit id="7a6d8be9dffe246766e3012760ad26dc58ac76a9" translate="yes" xml:space="preserve">
          <source>The Char type and associated operations.</source>
          <target state="translated">Charの種類とそれに関連する操作。</target>
        </trans-unit>
        <trans-unit id="34ab3cac27f3b7905cb71f872510098e1f28d42c" translate="yes" xml:space="preserve">
          <source>The Char8 interface to bytestrings provides an instance of IsString for the ByteString type, enabling you to use string literals, and have them implicitly packed to ByteStrings. Use &lt;code&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/code&gt; to enable this.</source>
          <target state="translated">バイト文字列へのChar8インターフェイスは、ByteString型のIsStringのインスタンスを提供し、文字列リテラルを使用して、暗黙的にByteStringsにパックすることができます。これを有効にするには、 &lt;code&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="87a20786956ef56773cf03030aa4cf8ea1fe3cb5" translate="yes" xml:space="preserve">
          <source>The Constraint kind</source>
          <target state="translated">制約の種類</target>
        </trans-unit>
        <trans-unit id="09ab3e32936ccf9f3bb679b6e68a3e00b45ed452" translate="yes" xml:space="preserve">
          <source>The Cont monad</source>
          <target state="translated">コントモナド</target>
        </trans-unit>
        <trans-unit id="12f452e71f00e2687665dadf2d17184d0289a2e5" translate="yes" xml:space="preserve">
          <source>The ContT monad transformer</source>
          <target state="translated">ContTモナドトランス</target>
        </trans-unit>
        <trans-unit id="ca90c83f50ba973fabb4434d084cfad4acdcfc2a" translate="yes" xml:space="preserve">
          <source>The Continuation monad represents computations in continuation-passing style (CPS). In continuation-passing style function result is not returned, but instead is passed to another function, received as a parameter (continuation). Computations are built up from sequences of nested continuations, terminated by a final continuation (often &lt;code&gt;id&lt;/code&gt;) which produces the final result. Since continuations are functions which represent the future of a computation, manipulation of the continuation functions can achieve complex manipulations of the future of the computation, such as interrupting a computation in the middle, aborting a portion of a computation, restarting a computation, and interleaving execution of computations. The Continuation monad adapts CPS to the structure of a monad.</source>
          <target state="translated">Continuationモナドは、継続渡しスタイル（CPS）での計算を表します。継続渡しスタイルでは、関数の結果は返されませんが、代わりに別の関数に渡され、パラメーター（継続）として受け取られます。計算は、ネストされた継続のシーケンスから構築され、最終結果を生成する最終継続（しばしば &lt;code&gt;id&lt;/code&gt; ）で終了します。継続は計算の未来を表す関数であるため、継続関数の操作は、途中での計算の中断、計算の一部の中止、計算の再開、インターリーブなど、計算の未来の複雑な操作を実現できます。計算の実行。継続モナドはCPSをモナドの構造に適合させます。</target>
        </trans-unit>
        <trans-unit id="b6f5f2130ef6b7cf3dfc8eaaad4cc1b44fc47954" translate="yes" xml:space="preserve">
          <source>The Coverage Condition. For each functional dependency, ⟨tvs⟩&lt;sub&gt;left&lt;/sub&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt; ⟨tvs⟩&lt;sub&gt;right&lt;/sub&gt;, of the class, every type variable in S(⟨tvs⟩&lt;sub&gt;right&lt;/sub&gt;) must appear in S(⟨tvs⟩&lt;sub&gt;left&lt;/sub&gt;), where S is the substitution mapping each type variable in the class declaration to the corresponding type in the instance head.</source>
          <target state="translated">カバレッジ条件。各機能の依存関係のため、⟨tvs⟩は&lt;sub&gt;左&lt;/sub&gt; &lt;code&gt;-&amp;gt;&lt;/code&gt; ⟨tvs⟩ &lt;sub&gt;右&lt;/sub&gt;、クラスの、S（⟨tvs⟩内のすべての型変数&lt;sub&gt;右&lt;/sub&gt;）S（⟨tvs⟩に現れなければならない&lt;sub&gt;左&lt;/sub&gt; Sは、各タイプのマッピング置換です）、クラス宣言の変数をインスタンスヘッドの対応する型に変更します。</target>
        </trans-unit>
        <trans-unit id="312777d9f2d66605158d20bff22160d55dc26cef" translate="yes" xml:space="preserve">
          <source>The Cygwin tools aim to provide a Unix-style API on top of the windows libraries, to facilitate ports of Unix software to windows. To this end, they introduce a Unix-style directory hierarchy under some root directory (typically &lt;code&gt;/&lt;/code&gt; is &lt;code&gt;C:\cygwin\&lt;/code&gt;). Moreover, everything built against the Cygwin API (including the Cygwin tools and programs compiled with Cygwin&amp;rsquo;s GHC) will see &lt;code&gt;/&lt;/code&gt; as the root of their file system, happily pretending to work in a typical unix environment, and finding things like &lt;code&gt;/bin&lt;/code&gt; and &lt;code&gt;/usr/include&lt;/code&gt; without ever explicitly bothering with their actual location on the windows system (probably &lt;code&gt;C:\cygwin\bin&lt;/code&gt; and &lt;code&gt;C:\cygwin\usr\include&lt;/code&gt;).</source>
          <target state="translated">Cygwinツールは、ウィンドウズライブラリの上にUnixスタイルのAPIを提供し、ウィンドウズへのUnixソフトウェアの移植を容易にすることを目的としています。この目的のために、彼らはいくつかのルートディレクトリの下にUnixスタイルのディレクトリ階層を導入します（通常 &lt;code&gt;/&lt;/code&gt; は &lt;code&gt;C:\cygwin\&lt;/code&gt; ）。さらに、Cygwin API（CygwinのGHCでコンパイルされたCygwinツールおよびプログラムを含む）に対して構築されたすべてのものは、 &lt;code&gt;/&lt;/code&gt; をファイルシステムのルートとして認識し、通常のUNIX環境で動作するふりをして、 &lt;code&gt;/bin&lt;/code&gt; や &lt;code&gt;/usr/include&lt;/code&gt; などを見つけます。Windowsシステム上の実際の場所（おそらく &lt;code&gt;C:\cygwin\bin&lt;/code&gt; と &lt;code&gt;C:\cygwin\usr\include&lt;/code&gt; ）を明示的に煩わせずに/ includeします。</target>
        </trans-unit>
        <trans-unit id="86692a9d897be5d534ba24465eb9de8f931f4ef3" translate="yes" xml:space="preserve">
          <source>The Data class for processing constructor applications</source>
          <target state="translated">コンストラクタアプリケーションを処理するためのDataクラス</target>
        </trans-unit>
        <trans-unit id="1bf8237029872b5da672f6b7246e84175ba43046" translate="yes" xml:space="preserve">
          <source>The Dynamic interface provides basic support for dynamic types.</source>
          <target state="translated">ダイナミック・インターフェースは、ダイナミック型の基本的なサポートを提供します。</target>
        </trans-unit>
        <trans-unit id="42156dbee11df6db43f4c8b1cc0a248822a7d3cd" translate="yes" xml:space="preserve">
          <source>The Either type, and associated operations.</source>
          <target state="translated">Either 型とそれに付随する操作。</target>
        </trans-unit>
        <trans-unit id="807130fbb4274539dfd3c0eea747aff0499d3550" translate="yes" xml:space="preserve">
          <source>The Error monad (also called the Exception monad).</source>
          <target state="translated">エラーモナド(例外モナドとも呼ばれる)。</target>
        </trans-unit>
        <trans-unit id="8a5dc0df0c5ba4b15156469d46e722f494c0f012" translate="yes" xml:space="preserve">
          <source>The ErrorT monad transformer</source>
          <target state="translated">ErrorT モナド変換器</target>
        </trans-unit>
        <trans-unit id="9e8b0fd8b8d2403326182f44dc58f86de4db1bbe" translate="yes" xml:space="preserve">
          <source>The Except monad</source>
          <target state="translated">非モナドの場合</target>
        </trans-unit>
        <trans-unit id="0636fa085801d03d78d892f99e7194b6c4c5113a" translate="yes" xml:space="preserve">
          <source>The ExceptT monad transformer</source>
          <target state="translated">ExceptT モナド変換器</target>
        </trans-unit>
        <trans-unit id="28a34cf6c1c117fe3edc278dd4ce45f5bbb4e2ab" translate="yes" xml:space="preserve">
          <source>The Exception type</source>
          <target state="translated">例外の種類</target>
        </trans-unit>
        <trans-unit id="fbddbb39610322fadeb3679edecc1231a3f3fbc0" translate="yes" xml:space="preserve">
          <source>The FFI features that are described in this section are specific to GHC. Your code will not be portable to other compilers if you use them.</source>
          <target state="translated">このセクションで説明されている FFI 機能は GHC に特有のものです。これらを使用した場合、あなたのコードは他のコンパイラに移植されません。</target>
        </trans-unit>
        <trans-unit id="fa5c3008de574108a3fc529118d05f0ae264146f" translate="yes" xml:space="preserve">
          <source>The FFI libraries are documented in the accompanying library documentation; see for example the &lt;a href=&quot;../../libraries/base-4.15.0.0/foreign&quot;&gt;Foreign&lt;/a&gt; module.</source>
          <target state="translated">FFIライブラリは、付属のライブラリドキュメントに記載されています。たとえば、&lt;a href=&quot;../../libraries/base-4.15.0.0/foreign&quot;&gt;Foreign&lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="3efa5246016932362650667f0b2760b9317d9ba9" translate="yes" xml:space="preserve">
          <source>The FFI libraries are documented in the accompanying library documentation; see for example the &lt;a href=&quot;../libraries/base-4.13.0.0/foreign&quot;&gt;Foreign&lt;/a&gt; module.</source>
          <target state="translated">FFIライブラリは、付属のライブラリドキュメントに記載されています。たとえば、&lt;a href=&quot;../libraries/base-4.13.0.0/foreign&quot;&gt;Foreign&lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="5ed7160bf5541192af12531389c2d242c62248cf" translate="yes" xml:space="preserve">
          <source>The FFI libraries are documented in the accompanying library documentation; see for example the &lt;a href=&quot;../libraries/base-4.14.1.0/foreign&quot;&gt;Foreign&lt;/a&gt; module.</source>
          <target state="translated">FFIライブラリは、付属のライブラリドキュメントに記載されています。たとえば、&lt;a href=&quot;../libraries/base-4.14.1.0/foreign&quot;&gt;Foreign&lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="761c07d2fa3147d943f9914eb230698128638338" translate="yes" xml:space="preserve">
          <source>The FFI libraries provide several ways to allocate memory for use with the FFI, and it isn&amp;rsquo;t always clear which way is the best. This decision may be affected by how efficient a particular kind of allocation is on a given compiler/platform, so this section aims to shed some light on how the different kinds of allocation perform with GHC.</source>
          <target state="translated">FFIライブラリには、FFIで使用するメモリを割り当てる方法がいくつかありますが、どの方法が最適であるかが常に明確であるとは限りません。この決定は、特定の種類の割り当てが特定のコンパイラ/プラットフォームでどれほど効率的であるかによって影響を受ける可能性があるため、このセクションでは、GHCでさまざまな種類の割り当てがどのように実行されるかについて説明します。</target>
        </trans-unit>
        <trans-unit id="f6c805c7ce1959f9f4d5c3417b157ba30228b2de" translate="yes" xml:space="preserve">
          <source>The FFI spec requires the IO monad to appear in various places, but it can sometimes be convenient to wrap the IO monad in a &lt;code&gt;newtype&lt;/code&gt;, thus:</source>
          <target state="translated">FFI仕様では、さまざまな場所にIOモナドを表示する必要がありますが、IOモナドを &lt;code&gt;newtype&lt;/code&gt; でラップすると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="f1df7ad812566b24077279b5c70b3b3b84e28607" translate="yes" xml:space="preserve">
          <source>The FFI spec requires the implementation to support re-initialising itself after being shut down with &lt;code&gt;hs_exit()&lt;/code&gt;, but GHC does not currently support that. See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/13693&quot;&gt;#13693&lt;/a&gt;.</source>
          <target state="translated">FFI仕様では、 &lt;code&gt;hs_exit()&lt;/code&gt; でシャットダウンした後、それ自体の再初期化をサポートする実装が必要ですが、GHCは現在それをサポートしていません。&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/13693&quot;&gt;＃13693を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5f20794bdc28c9aee5608b0c0fc201d96d6b3994" translate="yes" xml:space="preserve">
          <source>The FFI spec requires the implementation to support re-initialising itself after being shut down with &lt;code&gt;hs_exit()&lt;/code&gt;, but GHC does not currently support that. See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/13693&quot;&gt;Issue #13693&lt;/a&gt;.</source>
          <target state="translated">FFI仕様では、 &lt;code&gt;hs_exit()&lt;/code&gt; でシャットダウンされた後の再初期化をサポートする実装が必要ですが、GHCは現在それをサポートしていません。&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/13693&quot;&gt;問題＃13693を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3d82e5c0000a3a4523ec1f2606c3f0201a3a2af5" translate="yes" xml:space="preserve">
          <source>The Foldable class represents data structures that can be reduced to a summary value one element at a time. Strict left-associative folds are a good fit for space-efficient reduction, while lazy right-associative folds are a good fit for corecursive iteration, or for folds that short-circuit after processing an initial subsequence of the structure's elements.</source>
          <target state="translated">Foldableクラスは、1要素ずつ要約値に還元できるデータ構造を表します。厳密な左結合フォールドはスペース効率の良い削減に適しており、遅延右結合フォールドは、コアカーシブな反復や、構造体の要素の最初の部分配列を処理した後に短絡するフォールドに適しています。</target>
        </trans-unit>
        <trans-unit id="c810fb3026eea84c07b1ddbb163add991beb6f3b" translate="yes" xml:space="preserve">
          <source>The GADT return type (&lt;code&gt;&amp;lt;...&amp;gt; G a (Maybe x) -&amp;gt; ...&lt;/code&gt;).</source>
          <target state="translated">GADTの戻り値の型（ &lt;code&gt;&amp;lt;...&amp;gt; G a (Maybe x) -&amp;gt; ...&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1d26ec709c2e5283538c1c653d1aa70ca0b33423" translate="yes" xml:space="preserve">
          <source>The GC sync time, along with other GC stats, are available by calling the &lt;code&gt;getRTSStats()&lt;/code&gt; function from C, or &lt;code&gt;GHC.Stats.getRTSStats&lt;/code&gt; from Haskell.</source>
          <target state="translated">GC同期時間は、他のGCの統計情報と共に、呼び出すことによって入手可能である &lt;code&gt;getRTSStats()&lt;/code&gt; Cから関数、または &lt;code&gt;GHC.Stats.getRTSStats&lt;/code&gt; ハスケルからです。</target>
        </trans-unit>
        <trans-unit id="b5021fe9fe3de702f6e9a5d53a92dd7d5114b557" translate="yes" xml:space="preserve">
          <source>The GHC API exposes functions for reading and writing these files.</source>
          <target state="translated">GHC APIは、これらのファイルを読み書きするための関数を公開しています。</target>
        </trans-unit>
        <trans-unit id="44e336f3335d4bce26ff1489887e65f02d167072" translate="yes" xml:space="preserve">
          <source>The GHC RTS currently can only recover from heap overflow if it detects that an explicit memory limit (set via RTS flags). has been exceeded. Currently, failure to allocate memory from the operating system results in immediate termination of the program.</source>
          <target state="translated">GHC RTS は現在、明示的なメモリ制限(RTS フラグで設定された)を超えたことを検出した場合にのみ、ヒープオーバーフローから回復することができます。現在、オペレーティングシステムからのメモリ割り当ての失敗は、プログラムの即時終了をもたらします。</target>
        </trans-unit>
        <trans-unit id="092d6db4a6acf8e0f020ffc8e891aef1e6ec0134" translate="yes" xml:space="preserve">
          <source>The GHC command line options that control packages are:</source>
          <target state="translated">パッケージを制御するGHCのコマンドラインオプションです。</target>
        </trans-unit>
        <trans-unit id="61df44498694cfca7ad6514a046e11ddd08beac9" translate="yes" xml:space="preserve">
          <source>The GHC developers hang out here. If you are working with the GHC API or have a question about GHC&amp;rsquo;s implementation, feel free to chime in.</source>
          <target state="translated">GHC開発者はここでたむろします。GHC APIを使用している場合、またはGHCの実装について質問がある場合は、遠慮なくご連絡ください。</target>
        </trans-unit>
        <trans-unit id="99d5e93b8c29504ff8cde4bfb2796cf7747d055b" translate="yes" xml:space="preserve">
          <source>The GHC driver pre-defines several macros when processing Haskell source code (&lt;code&gt;.hs&lt;/code&gt; or &lt;code&gt;.lhs&lt;/code&gt; files).</source>
          <target state="translated">GHCドライバーは、Haskellソースコード（ &lt;code&gt;.hs&lt;/code&gt; または &lt;code&gt;.lhs&lt;/code&gt; ファイル）を処理するときに、いくつかのマクロを事前定義します。</target>
        </trans-unit>
        <trans-unit id="87a5e3c32c7140b14331679393031a63e7e433b2" translate="yes" xml:space="preserve">
          <source>The GHC runtime treats program exit as a special case, to avoid the need to wait for blocked threads when a standalone executable exits. Since the program and all its threads are about to terminate at the same time that the code is removed from memory, it isn&amp;rsquo;t necessary to ensure that the threads have exited first. If you want this fast and loose version of &lt;code&gt;hs_exit()&lt;/code&gt;, you can call:</source>
          <target state="translated">GHCランタイムは、スタンドアロンの実行可能ファイルが終了するときにブロックされたスレッドを待つ必要を回避するために、プログラムの終了を特別なケースとして扱います。プログラムとそのすべてのスレッドは、コードがメモリから削除されると同時に終了しようとしているため、スレッドが最初に終了したことを確認する必要はありません。この高速でルーズなバージョンの &lt;code&gt;hs_exit()&lt;/code&gt; が必要な場合は、次を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="cf6aec65a614d7a8b43aacde5373b850e4763ef9" translate="yes" xml:space="preserve">
          <source>The GHCi &lt;a href=&quot;../ghci#ghci-cmd-:info&quot;&gt;&lt;code&gt;:info&lt;/code&gt;&lt;/a&gt; command shows pattern types in this format.</source>
          <target state="translated">GHCi &lt;a href=&quot;../ghci#ghci-cmd-:info&quot;&gt; &lt;code&gt;:info&lt;/code&gt; &lt;/a&gt;コマンドは、この形式でパターンタイプを表示します。</target>
        </trans-unit>
        <trans-unit id="657d0403b8cb260dd76b91b660bfb82ac7e59695" translate="yes" xml:space="preserve">
          <source>The GHCi &lt;a href=&quot;ghci#ghci-cmd-:info&quot;&gt;&lt;code&gt;:info&lt;/code&gt;&lt;/a&gt; command shows pattern types in this format.</source>
          <target state="translated">GHCi &lt;a href=&quot;ghci#ghci-cmd-:info&quot;&gt; &lt;code&gt;:info&lt;/code&gt; &lt;/a&gt;コマンドは、この形式でパターンタイプを表示します。</target>
        </trans-unit>
        <trans-unit id="b98fc3571126a85946312283e8cabf74b5c92953" translate="yes" xml:space="preserve">
          <source>The GHCi Monad lifting interface.</source>
          <target state="translated">GHCiモナドのリフティングインターフェース。</target>
        </trans-unit>
        <trans-unit id="ebe9d3dd8c4ab5bd81e3a57040f569e196489a32" translate="yes" xml:space="preserve">
          <source>The GHCi debugger offers a way to hopefully shed some light on these errors quickly and without modifying or recompiling the source code. One way would be to set a breakpoint on the location in the source code that throws the exception, and then use &lt;a href=&quot;#ghci-cmd-:trace&quot;&gt;&lt;code&gt;:trace&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ghci-cmd-:history&quot;&gt;&lt;code&gt;:history&lt;/code&gt;&lt;/a&gt; to establish the context. However, &lt;code&gt;head&lt;/code&gt; is in a library and we can&amp;rsquo;t set a breakpoint on it directly. For this reason, GHCi provides the flags &lt;a href=&quot;#ghc-flag--fbreak-on-exception&quot;&gt;&lt;code&gt;-fbreak-on-exception&lt;/code&gt;&lt;/a&gt; which causes the evaluator to stop when an exception is thrown, and &lt;a href=&quot;#ghc-flag--fbreak-on-error&quot;&gt;&lt;code&gt;-fbreak-on-error&lt;/code&gt;&lt;/a&gt;, which works similarly but stops only on uncaught exceptions. When stopping at an exception, GHCi will act just as it does when a breakpoint is hit, with the deviation that it will not show you any source code location. Due to this, these commands are only really useful in conjunction with &lt;a href=&quot;#ghci-cmd-:trace&quot;&gt;&lt;code&gt;:trace&lt;/code&gt;&lt;/a&gt;, in order to log the steps leading up to the exception. For example:</source>
          <target state="translated">GHCiデバッガーは、ソースコードを変更したり再コンパイルしたりせずに、これらのエラーにすばやく光を当てる方法を提供します。 1つの方法は、例外をスローするソースコードの場所にブレークポイントを設定し、&lt;a href=&quot;#ghci-cmd-:trace&quot;&gt; &lt;code&gt;:trace&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#ghci-cmd-:history&quot;&gt; &lt;code&gt;:history&lt;/code&gt; &lt;/a&gt;を使用してコンテキストを確立することです。ただし、 &lt;code&gt;head&lt;/code&gt; はライブラリにあり、ブレークポイントを直接設定することはできません。このため、GHCiにはフラグ&lt;a href=&quot;#ghc-flag--fbreak-on-exception&quot;&gt; &lt;code&gt;-fbreak-on-exception&lt;/code&gt; が&lt;/a&gt;あり、例外がスローされたときにエバリュエーターを停止させ、&lt;a href=&quot;#ghc-flag--fbreak-on-error&quot;&gt; &lt;code&gt;-fbreak-on-error&lt;/code&gt; &lt;/a&gt;、同様に機能しますが、キャッチされない例外でのみ停止します。例外で停止すると、GHCiはブレークポイントに達したときと同じように動作しますが、ソースコードの場所は表示されません。このため、これらのコマンドは、例外に至るまでの手順をログに記録するために、&lt;a href=&quot;#ghci-cmd-:trace&quot;&gt; &lt;code&gt;:trace&lt;/code&gt; &lt;/a&gt;と組み合わせた場合にのみ非常に役立ちます。例えば：</target>
        </trans-unit>
        <trans-unit id="0b891d2a1ce80a9fee00fa3b6d6737a43b10a747" translate="yes" xml:space="preserve">
          <source>The Get and Put monads</source>
          <target state="translated">モナドの取得と配置</target>
        </trans-unit>
        <trans-unit id="b776a2d45a7f2c193506de5827ffca159fdaaa31" translate="yes" xml:space="preserve">
          <source>The Get monad</source>
          <target state="translated">Get モナド</target>
        </trans-unit>
        <trans-unit id="881d557edd11af5e9c88e4e2caa565a9b7f16b2b" translate="yes" xml:space="preserve">
          <source>The Handle is closed once the contents have been read, or if an exception is thrown.</source>
          <target state="translated">ハンドルは、内容が読み込まれた後、または例外が発生した場合に閉じられます。</target>
        </trans-unit>
        <trans-unit id="7aa13d6fda768933256ad6bc36a2d66a70dfef90" translate="yes" xml:space="preserve">
          <source>The Haskell 2010 Report specifies that &lt;code&gt;safe&lt;/code&gt; FFI calls must allow foreign calls to safely call into Haskell code. In practice, this means that called functions also have to assume heap-allocated Haskell values may move around arbitrarily in order to allow for GC.</source>
          <target state="translated">Haskell 2010レポートは、 &lt;code&gt;safe&lt;/code&gt; FFI呼び出しにより、外部呼び出しがHaskellコードを安全に呼び出すことができるようにする必要があると指定しています。実際には、これは、呼び出された関数が、GCを可能にするために、ヒープに割り当てられたHaskell値が任意に移動する可能性があることも想定する必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="9fc6da9c66a23f0d4306adb850fbe34a26d020b4" translate="yes" xml:space="preserve">
          <source>The Haskell 2010 Report specifies that &lt;code&gt;safe&lt;/code&gt; FFI calls must allow foreign calls to safely call into Haskell code. In practice, this means that the garbage collector must be able to run while these calls are in progress, moving heap-allocated Haskell values around arbitrarily.</source>
          <target state="translated">Haskell 2010レポートは、 &lt;code&gt;safe&lt;/code&gt; FFI呼び出しが、外部呼び出しが安全にHaskellコードを呼び出すことを許可する必要があることを指定しています。実際には、これは、これらの呼び出しの進行中にガベージコレクターを実行できなければならず、ヒープに割り当てられたHaskell値を任意に移動できることを意味します。</target>
        </trans-unit>
        <trans-unit id="e4f4e3694b9cec057dc91d201d6594fcb8794184" translate="yes" xml:space="preserve">
          <source>The Haskell 2010 definition of &lt;code&gt;Show&lt;/code&gt; stipulates that the rendered string should only include parentheses which are necessary to unambiguously parse the result. For historical reasons, &lt;code&gt;Show&lt;/code&gt; instances derived by GHC include parentheses around records despite the fact that record syntax binds more tightly than function application; e.g.,</source>
          <target state="translated">Haskellの2010定義 &lt;code&gt;Show&lt;/code&gt; レンダリングされた文字列のみを明確に結果を解析するために必要な括弧を含めるべきであると規定しています。歴史的な理由により、レコードの構文は関数の適用よりも強く結合するという事実にもかかわらず、GHCによって導出された &lt;code&gt;Show&lt;/code&gt; インスタンスには、レコードの前後に括弧が含まれます。例えば、</target>
        </trans-unit>
        <trans-unit id="75b51a038a288722ea47d665ae6b1906f2f2ca30" translate="yes" xml:space="preserve">
          <source>The Haskell 2010 type for exceptions in the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. Any I/O operation may raise an &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; instead of returning a result. For a more general type of exception, including also those that arise in pure code, see &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-exception#v:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドの例外のHaskell 2010タイプ。入出力操作では、結果を返す代わりに &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; が発生する場合があります。純粋なコードで発生する例外も含め、より一般的なタイプの例外については、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-exception#v:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="c0ce36d06fc25e64c6b77302cc8e5115d7e36509" translate="yes" xml:space="preserve">
          <source>The Haskell 2010 type for exceptions in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. Any I/O operation may raise an &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; instead of returning a result. For a more general type of exception, including also those that arise in pure code, see &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-exception#v:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドの例外用のHaskell2010タイプ。I / O操作は、結果を返す代わりに &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; を発生させる可能性があります。純粋なコードで発生するものも含め、より一般的なタイプの例外については、「 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-exception#v:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="f9f5848499bd728182625d195bb7424161811e1c" translate="yes" xml:space="preserve">
          <source>The Haskell 2010 type for exceptions in the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. Any I/O operation may raise an &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; instead of returning a result. For a more general type of exception, including also those that arise in pure code, see &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-exception#v:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドの例外用のHaskell2010タイプ。I / O操作は、結果を返す代わりに &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; を発生させる可能性があります。純粋なコードで発生するものも含め、より一般的なタイプの例外については、「 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-exception#v:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="cb081bfa52eb8a4cbf05cd929cfffa397e641c26" translate="yes" xml:space="preserve">
          <source>The Haskell 2010 type for exceptions in the &lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. Any I/O operation may raise an &lt;code&gt;&lt;a href=&quot;prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; instead of returning a result. For a more general type of exception, including also those that arise in pure code, see &lt;code&gt;&lt;a href=&quot;control-exception#v:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドの例外のHaskell 2010タイプ。入出力操作では、結果を返す代わりに &lt;code&gt;&lt;a href=&quot;prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; が発生する場合があります。純粋なコードで発生する例外も含め、より一般的なタイプの例外については、 &lt;code&gt;&lt;a href=&quot;control-exception#v:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="a99410a64c91a4399b3bdd6ca6ecba63bbee421d" translate="yes" xml:space="preserve">
          <source>The Haskell 2010 type for exceptions in the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. Any I/O operation may raise an &lt;code&gt;&lt;a href=&quot;ghc-io-exception#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; instead of returning a result. For a more general type of exception, including also those that arise in pure code, see &lt;code&gt;&lt;a href=&quot;control-exception#v:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドの例外のHaskell 2010タイプ。入出力操作では、結果を返す代わりに &lt;code&gt;&lt;a href=&quot;ghc-io-exception#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; が発生する場合があります。純粋なコードで発生する例外も含め、より一般的なタイプの例外については、 &lt;code&gt;&lt;a href=&quot;control-exception#v:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="608a1f6c6546f6329017b0ba471b028aef303e51" translate="yes" xml:space="preserve">
          <source>The Haskell 2010 type for exceptions in the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. Any I/O operation may raise an &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; instead of returning a result. For a more general type of exception, including also those that arise in pure code, see &lt;code&gt;&lt;a href=&quot;control-exception#v:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドの例外のHaskell 2010タイプ。入出力操作では、結果を返す代わりに &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; が発生する場合があります。純粋なコードで発生する例外も含め、より一般的なタイプの例外については、 &lt;code&gt;&lt;a href=&quot;control-exception#v:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="cbd1a39cbde2acf402014630435be0c05fcd70ac" translate="yes" xml:space="preserve">
          <source>The Haskell 98 definition of &lt;code&gt;isAlpha&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;isAlpha&lt;/code&gt; のHaskell 98定義は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="bcc5878839ee58bc74d82cc3033b4e47a4421ec2" translate="yes" xml:space="preserve">
          <source>The Haskell FFI already specifies that arguments and results of foreign imports and exports will be automatically unwrapped if they are newtypes (Section 3.2 of the FFI addendum). GHC extends the FFI by automatically unwrapping any newtypes that wrap the IO monad itself. More precisely, wherever the FFI specification requires an &lt;code&gt;IO&lt;/code&gt; type, GHC will accept any newtype-wrapping of an &lt;code&gt;IO&lt;/code&gt; type. For example, these declarations are OK:</source>
          <target state="translated">Haskell FFIは、外国のインポートとエクスポートの引数と結果が新しいタイプの場合は自動的にアンラップされることをすでに指定しています（FFI補遺のセクション3.2）。 GHCは、IOモナド自体をラップするすべてのnewtypeを自動的にアンラップすることにより、FFIを拡張します。 FFIの仕様が必要とどこより正確には、 &lt;code&gt;IO&lt;/code&gt; の種類を、GHCは、のいずれかのnewtype-ラッピング受け入れる &lt;code&gt;IO&lt;/code&gt; のタイプを。たとえば、次の宣言は問題ありません。</target>
        </trans-unit>
        <trans-unit id="4680c4ac34e14b7370d55faae60bc019d40c3efc" translate="yes" xml:space="preserve">
          <source>The Haskell Report defines no laws for &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;. However, &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; is customarily expected to implement an equivalence relationship where two values comparing equal are indistinguishable by &quot;public&quot; functions, with a &quot;public&quot; function being one not allowing to see implementation details. For example, for a type representing non-normalised natural numbers modulo 100, a &quot;public&quot; function doesn't make the difference between 1 and 201. It is expected to have the following properties:</source>
          <target state="translated">Haskellレポートは &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; の法律を定義していません。ただし、 &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; は通常、等価を比較する2つの値が「パブリック」関数では区別できない等価関係を実装することが期待されており、「パブリック」関数は実装の詳細を確認できないものです。たとえば、100を法とする正規化されていない自然数を表す型の場合、「パブリック」関数は1と201の間に違いはありません。次のプロパティがあることが期待されます。</target>
        </trans-unit>
        <trans-unit id="b435dd60d544eb355fdb3b5a53612290c22abfda" translate="yes" xml:space="preserve">
          <source>The Haskell Report defines no laws for &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt;. However, &lt;code&gt;&lt;a href=&quot;data-ord#v:-60--61-&quot;&gt;&amp;lt;=&lt;/a&gt;&lt;/code&gt; is customarily expected to implement a non-strict partial order and have the following properties:</source>
          <target state="translated">Haskellレポートは &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; の法律を定義していません。ただし、 &lt;code&gt;&lt;a href=&quot;data-ord#v:-60--61-&quot;&gt;&amp;lt;=&lt;/a&gt;&lt;/code&gt; は通常、厳密でない半順序を実装し、次のプロパティを持つことが期待されています。</target>
        </trans-unit>
        <trans-unit id="88538894fe954a03ab344dde58ca70fb4af218ac" translate="yes" xml:space="preserve">
          <source>The Haskell Report defines no laws for &lt;code&gt;&lt;a href=&quot;ghc-float#t:Floating&quot;&gt;Floating&lt;/a&gt;&lt;/code&gt;. However, &lt;code&gt;(&lt;a href=&quot;prelude#v:-43-&quot;&gt;+&lt;/a&gt;)&lt;/code&gt;, &lt;code&gt;(&lt;a href=&quot;prelude#v:-42-&quot;&gt;*&lt;/a&gt;)&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-float#v:exp&quot;&gt;exp&lt;/a&gt;&lt;/code&gt; are customarily expected to define an exponential field and have the following properties:</source>
          <target state="translated">Haskellレポートでは、 &lt;code&gt;&lt;a href=&quot;ghc-float#t:Floating&quot;&gt;Floating&lt;/a&gt;&lt;/code&gt; に関する法律は定義されていません。ただし、 &lt;code&gt;(&lt;a href=&quot;prelude#v:-43-&quot;&gt;+&lt;/a&gt;)&lt;/code&gt; 、 &lt;code&gt;(&lt;a href=&quot;prelude#v:-42-&quot;&gt;*&lt;/a&gt;)&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;ghc-float#v:exp&quot;&gt;exp&lt;/a&gt;&lt;/code&gt; は通常、指数フィールドを定義し、次のプロパティを持つことが期待されています。</target>
        </trans-unit>
        <trans-unit id="3149c28629f6ab1e2da394471685318956b0ba8a" translate="yes" xml:space="preserve">
          <source>The Haskell Report defines no laws for &lt;code&gt;&lt;a href=&quot;ghc-num#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt;. However, &lt;code&gt;(&lt;a href=&quot;ghc-num#v:-43-&quot;&gt;+&lt;/a&gt;)&lt;/code&gt; and &lt;code&gt;(&lt;a href=&quot;ghc-num#v:-42-&quot;&gt;*&lt;/a&gt;)&lt;/code&gt; are customarily expected to define a ring and have the following properties:</source>
          <target state="translated">Haskellレポートは &lt;code&gt;&lt;a href=&quot;ghc-num#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; の法則を定義していません。ただし、 &lt;code&gt;(&lt;a href=&quot;ghc-num#v:-43-&quot;&gt;+&lt;/a&gt;)&lt;/code&gt; および &lt;code&gt;(&lt;a href=&quot;ghc-num#v:-42-&quot;&gt;*&lt;/a&gt;)&lt;/code&gt; は通常、リングを定義し、次のプロパティを持っていることが期待されます。</target>
        </trans-unit>
        <trans-unit id="8d88eda2762d9273ae973553c58bcc0bd71af620" translate="yes" xml:space="preserve">
          <source>The Haskell Report defines no laws for &lt;code&gt;&lt;a href=&quot;ghc-real#t:Fractional&quot;&gt;Fractional&lt;/a&gt;&lt;/code&gt;. However, &lt;code&gt;(&lt;a href=&quot;prelude#v:-43-&quot;&gt;+&lt;/a&gt;)&lt;/code&gt; and &lt;code&gt;(&lt;a href=&quot;prelude#v:-42-&quot;&gt;*&lt;/a&gt;)&lt;/code&gt; are customarily expected to define a division ring and have the following properties:</source>
          <target state="translated">Haskellレポートでは、 &lt;code&gt;&lt;a href=&quot;ghc-real#t:Fractional&quot;&gt;Fractional&lt;/a&gt;&lt;/code&gt; の法律は定義されていません。ただし、 &lt;code&gt;(&lt;a href=&quot;prelude#v:-43-&quot;&gt;+&lt;/a&gt;)&lt;/code&gt; と &lt;code&gt;(&lt;a href=&quot;prelude#v:-42-&quot;&gt;*&lt;/a&gt;)&lt;/code&gt; は通常、分割リングを定義し、次のプロパティを持っていると予想されます。</target>
        </trans-unit>
        <trans-unit id="e76164abdc0256cd6250a3085c5fb79d40aac6bd" translate="yes" xml:space="preserve">
          <source>The Haskell Report defines no laws for &lt;code&gt;&lt;a href=&quot;ghc-real#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt;. However, &lt;code&gt;&lt;a href=&quot;ghc-real#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; instances are customarily expected to define a Euclidean domain and have the following properties for the &lt;code&gt;&lt;a href=&quot;ghc-real#v:div&quot;&gt;div&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;ghc-real#v:mod&quot;&gt;mod&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-real#v:quot&quot;&gt;quot&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;ghc-real#v:rem&quot;&gt;rem&lt;/a&gt;&lt;/code&gt; pairs, given suitable Euclidean functions &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;:</source>
          <target state="translated">Haskellレポートは &lt;code&gt;&lt;a href=&quot;ghc-real#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; の法律を定義していません。ただし、 &lt;code&gt;&lt;a href=&quot;ghc-real#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; インスタンスは通常、ユークリッドドメインを定義し、適切なユークリッド関数 &lt;code&gt;f&lt;/code&gt; および &lt;code&gt;g&lt;/code&gt; が与えられた場合、 &lt;code&gt;&lt;a href=&quot;ghc-real#v:div&quot;&gt;div&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;ghc-real#v:mod&quot;&gt;mod&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;ghc-real#v:quot&quot;&gt;quot&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;ghc-real#v:rem&quot;&gt;rem&lt;/a&gt;&lt;/code&gt; ペアに対して次のプロパティを持つことが期待されています。</target>
        </trans-unit>
        <trans-unit id="9ce7650ff72472c9e39924a0365fbdbae6a3a423" translate="yes" xml:space="preserve">
          <source>The Haskell Report defines no laws for &lt;code&gt;&lt;a href=&quot;numeric#t:Floating&quot;&gt;Floating&lt;/a&gt;&lt;/code&gt;. However, &lt;code&gt;(&lt;a href=&quot;prelude#v:-43-&quot;&gt;+&lt;/a&gt;)&lt;/code&gt;, &lt;code&gt;(&lt;a href=&quot;prelude#v:-42-&quot;&gt;*&lt;/a&gt;)&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;numeric#v:exp&quot;&gt;exp&lt;/a&gt;&lt;/code&gt; are customarily expected to define an exponential field and have the following properties:</source>
          <target state="translated">Haskellレポートでは、 &lt;code&gt;&lt;a href=&quot;numeric#t:Floating&quot;&gt;Floating&lt;/a&gt;&lt;/code&gt; に関する法律は定義されていません。ただし、 &lt;code&gt;(&lt;a href=&quot;prelude#v:-43-&quot;&gt;+&lt;/a&gt;)&lt;/code&gt; 、 &lt;code&gt;(&lt;a href=&quot;prelude#v:-42-&quot;&gt;*&lt;/a&gt;)&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;numeric#v:exp&quot;&gt;exp&lt;/a&gt;&lt;/code&gt; は通常、指数フィールドを定義し、次のプロパティを持つことが期待されています。</target>
        </trans-unit>
        <trans-unit id="8323805ef3fcd8127cc342507191554f2e774a6e" translate="yes" xml:space="preserve">
          <source>The Haskell Report defines no laws for &lt;code&gt;&lt;a href=&quot;prelude#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;. However, &lt;code&gt;&lt;a href=&quot;prelude#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; is customarily expected to implement an equivalence relationship where two values comparing equal are indistinguishable by &quot;public&quot; functions, with a &quot;public&quot; function being one not allowing to see implementation details. For example, for a type representing non-normalised natural numbers modulo 100, a &quot;public&quot; function doesn't make the difference between 1 and 201. It is expected to have the following properties:</source>
          <target state="translated">Haskellレポートは &lt;code&gt;&lt;a href=&quot;prelude#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; の法律を定義していません。ただし、 &lt;code&gt;&lt;a href=&quot;prelude#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; は通常、等価を比較する2つの値が「パブリック」関数では区別できない等価関係を実装することが期待されており、「パブリック」関数は実装の詳細を確認できないものです。たとえば、100を法とする正規化されていない自然数を表す型の場合、「パブリック」関数は1と201の間に違いはありません。次のプロパティがあることが期待されます。</target>
        </trans-unit>
        <trans-unit id="b48c329c20a3981396eab2a99555375b78674fa9" translate="yes" xml:space="preserve">
          <source>The Haskell Report defines no laws for &lt;code&gt;&lt;a href=&quot;prelude#t:Floating&quot;&gt;Floating&lt;/a&gt;&lt;/code&gt;. However, &lt;code&gt;(&lt;a href=&quot;prelude#v:-43-&quot;&gt;+&lt;/a&gt;)&lt;/code&gt;, &lt;code&gt;(&lt;a href=&quot;prelude#v:-42-&quot;&gt;*&lt;/a&gt;)&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:exp&quot;&gt;exp&lt;/a&gt;&lt;/code&gt; are customarily expected to define an exponential field and have the following properties:</source>
          <target state="translated">Haskellレポートでは、 &lt;code&gt;&lt;a href=&quot;prelude#t:Floating&quot;&gt;Floating&lt;/a&gt;&lt;/code&gt; に関する法律は定義されていません。ただし、 &lt;code&gt;(&lt;a href=&quot;prelude#v:-43-&quot;&gt;+&lt;/a&gt;)&lt;/code&gt; 、 &lt;code&gt;(&lt;a href=&quot;prelude#v:-42-&quot;&gt;*&lt;/a&gt;)&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;prelude#v:exp&quot;&gt;exp&lt;/a&gt;&lt;/code&gt; は通常、指数フィールドを定義し、次のプロパティを持つことが期待されています。</target>
        </trans-unit>
        <trans-unit id="1c7fa25d86a0693f27eca0a0ad84f5518dec11cf" translate="yes" xml:space="preserve">
          <source>The Haskell Report defines no laws for &lt;code&gt;&lt;a href=&quot;prelude#t:Fractional&quot;&gt;Fractional&lt;/a&gt;&lt;/code&gt;. However, &lt;code&gt;(&lt;a href=&quot;prelude#v:-43-&quot;&gt;+&lt;/a&gt;)&lt;/code&gt; and &lt;code&gt;(&lt;a href=&quot;prelude#v:-42-&quot;&gt;*&lt;/a&gt;)&lt;/code&gt; are customarily expected to define a division ring and have the following properties:</source>
          <target state="translated">Haskellレポートでは、 &lt;code&gt;&lt;a href=&quot;prelude#t:Fractional&quot;&gt;Fractional&lt;/a&gt;&lt;/code&gt; の法律は定義されていません。ただし、 &lt;code&gt;(&lt;a href=&quot;prelude#v:-43-&quot;&gt;+&lt;/a&gt;)&lt;/code&gt; と &lt;code&gt;(&lt;a href=&quot;prelude#v:-42-&quot;&gt;*&lt;/a&gt;)&lt;/code&gt; は通常、分割リングを定義し、次のプロパティを持っていると予想されます。</target>
        </trans-unit>
        <trans-unit id="813c73ced84a637d883552041de27732ad7f49d9" translate="yes" xml:space="preserve">
          <source>The Haskell Report defines no laws for &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt;. However, &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; instances are customarily expected to define a Euclidean domain and have the following properties for the &lt;code&gt;&lt;a href=&quot;prelude#v:div&quot;&gt;div&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;prelude#v:mod&quot;&gt;mod&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:quot&quot;&gt;quot&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;prelude#v:rem&quot;&gt;rem&lt;/a&gt;&lt;/code&gt; pairs, given suitable Euclidean functions &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;:</source>
          <target state="translated">Haskellレポートは &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; の法律を定義していません。ただし、 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; インスタンスは通常、ユークリッドドメインを定義し、適切なユークリッド関数 &lt;code&gt;f&lt;/code&gt; および &lt;code&gt;g&lt;/code&gt; が与えられた場合、 &lt;code&gt;&lt;a href=&quot;prelude#v:div&quot;&gt;div&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;prelude#v:mod&quot;&gt;mod&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;prelude#v:quot&quot;&gt;quot&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;prelude#v:rem&quot;&gt;rem&lt;/a&gt;&lt;/code&gt; ペアに対して次のプロパティを持つことが期待されています。</target>
        </trans-unit>
        <trans-unit id="04a2d6720afe45625eeed33bd966e63b2869f306" translate="yes" xml:space="preserve">
          <source>The Haskell Report defines no laws for &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt;. However, &lt;code&gt;(&lt;a href=&quot;prelude#v:-43-&quot;&gt;+&lt;/a&gt;)&lt;/code&gt; and &lt;code&gt;(&lt;a href=&quot;prelude#v:-42-&quot;&gt;*&lt;/a&gt;)&lt;/code&gt; are customarily expected to define a ring and have the following properties:</source>
          <target state="translated">Haskellレポートは &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; の法則を定義していません。ただし、 &lt;code&gt;(&lt;a href=&quot;prelude#v:-43-&quot;&gt;+&lt;/a&gt;)&lt;/code&gt; および &lt;code&gt;(&lt;a href=&quot;prelude#v:-42-&quot;&gt;*&lt;/a&gt;)&lt;/code&gt; は通常、リングを定義し、次のプロパティを持っていることが期待されます。</target>
        </trans-unit>
        <trans-unit id="79c8c45566ea3ef649482a06f412a05df4a6acfa" translate="yes" xml:space="preserve">
          <source>The Haskell Report defines no laws for &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt;. However, &lt;code&gt;&lt;a href=&quot;prelude#v:-60--61-&quot;&gt;&amp;lt;=&lt;/a&gt;&lt;/code&gt; is customarily expected to implement a non-strict partial order and have the following properties:</source>
          <target state="translated">Haskellレポートは &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; の法律を定義していません。ただし、 &lt;code&gt;&lt;a href=&quot;prelude#v:-60--61-&quot;&gt;&amp;lt;=&lt;/a&gt;&lt;/code&gt; は通常、厳密でない半順序を実装し、次のプロパティを持つことが期待されています。</target>
        </trans-unit>
        <trans-unit id="d6f54f30ee874469ea4834b2c92a3bff6d9a4e7e" translate="yes" xml:space="preserve">
          <source>The Haskell Report demands that, for infix operators &lt;code&gt;%&lt;/code&gt;, the following identities hold:</source>
          <target state="translated">Haskellレポートは、中置演算子 &lt;code&gt;%&lt;/code&gt; について、次のIDが保持されることを要求しています。</target>
        </trans-unit>
        <trans-unit id="fda99c30e66a8cf02c9c342a9bf010a7836b92f1" translate="yes" xml:space="preserve">
          <source>The Haskell Report describes that &lt;code&gt;*&lt;/code&gt; (spelled &lt;code&gt;Type&lt;/code&gt; and imported from &lt;code&gt;Data.Kind&lt;/code&gt; in the GHC dialect of Haskell) is the kind of ordinary datatypes, such as &lt;code&gt;Int&lt;/code&gt;. Furthermore, type constructors can have kinds with arrows; for example, &lt;code&gt;Maybe&lt;/code&gt; has kind &lt;code&gt;Type -&amp;gt; Type&lt;/code&gt;. Unboxed types have a kind that specifies their runtime representation. For example, the type &lt;code&gt;Int#&lt;/code&gt; has kind &lt;code&gt;TYPE 'IntRep&lt;/code&gt; and &lt;code&gt;Double#&lt;/code&gt; has kind &lt;code&gt;TYPE 'DoubleRep&lt;/code&gt;. These kinds say that the runtime representation of an &lt;code&gt;Int#&lt;/code&gt; is a machine integer, and the runtime representation of a &lt;code&gt;Double#&lt;/code&gt; is a machine double-precision floating point. In contrast, the kind &lt;code&gt;Type&lt;/code&gt; is actually just a synonym for &lt;code&gt;TYPE
'LiftedRep&lt;/code&gt;. More details of the &lt;code&gt;TYPE&lt;/code&gt; mechanisms appear in the &lt;a href=&quot;#runtime-rep&quot;&gt;section on runtime representation polymorphism&lt;/a&gt;.</source>
          <target state="translated">Haskellレポートでは、 &lt;code&gt;*&lt;/code&gt; （つづられた &lt;code&gt;Type&lt;/code&gt; で、HaskellのGHC方言で &lt;code&gt;Data.Kind&lt;/code&gt; からインポートされたもの）が &lt;code&gt;Int&lt;/code&gt; などの通常のデータ型の一種であると説明されています。さらに、型コンストラクターは矢印付きの種類を持つことができます。例えば、 &lt;code&gt;Maybe&lt;/code&gt; 種類あり &lt;code&gt;Type -&amp;gt; Type&lt;/code&gt; 。ボックス化されていない型には、ランタイム表現を指定する種類があります。たとえば、タイプ &lt;code&gt;Int#&lt;/code&gt; には種類 &lt;code&gt;TYPE 'IntRep&lt;/code&gt; があり、 &lt;code&gt;Double#&lt;/code&gt; は種類 &lt;code&gt;TYPE 'DoubleRep&lt;/code&gt; ます。これらの種類は、 &lt;code&gt;Int#&lt;/code&gt; のランタイム表現はマシン整数であり、 &lt;code&gt;Double#&lt;/code&gt; のランタイム表現はマシンの倍精度浮動小数点です。対照的に、種類 &lt;code&gt;Type&lt;/code&gt; は、実際には &lt;code&gt;TYPE 'LiftedRep&lt;/code&gt; 同義語です。 &lt;code&gt;TYPE&lt;/code&gt; メカニズムの詳細については、&lt;a href=&quot;#runtime-rep&quot;&gt;実行時表現の多態性に関するセクションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5ffc08730dc1e1e7dc18e8e0b58ddcb43b8e6870" translate="yes" xml:space="preserve">
          <source>The Haskell Report is vague about exactly when a &lt;code&gt;deriving&lt;/code&gt; clause is legal. For example:</source>
          <target state="translated">Haskellレポートは、 &lt;code&gt;deriving&lt;/code&gt; 条項が合法である場合について正確に曖昧です。例えば：</target>
        </trans-unit>
        <trans-unit id="90561213a1b6d66157821a9e10425e8dc3a64c9d" translate="yes" xml:space="preserve">
          <source>The Haskell Report only requires implementations to provide tuple types and their accompanying standard instances up to size 15. GHC limits the size of tuple types to 62 and provides instances of &lt;code&gt;Eq&lt;/code&gt;, &lt;code&gt;Ord&lt;/code&gt;, &lt;code&gt;Bounded&lt;/code&gt;, &lt;code&gt;Read&lt;/code&gt;, &lt;code&gt;Show&lt;/code&gt;, and &lt;code&gt;Ix&lt;/code&gt; for tuples up to size 15.</source>
          <target state="translated">HaskellレポートはGHCが62にタプル型のサイズを制限し、のインスタンスを提供サイズ15にタプルの種類とそれに付随する標準のインスタンスを提供するために、実装を必要 &lt;code&gt;Eq&lt;/code&gt; 、 &lt;code&gt;Ord&lt;/code&gt; 、 &lt;code&gt;Bounded&lt;/code&gt; 、 &lt;code&gt;Read&lt;/code&gt; 、 &lt;code&gt;Show&lt;/code&gt; 、および &lt;code&gt;Ix&lt;/code&gt; サイズまでのタプルのために15.15。</target>
        </trans-unit>
        <trans-unit id="ac5deab8ae658158332cbfbbabb6e8e4c0757f95" translate="yes" xml:space="preserve">
          <source>The Haskell Report only requires implementations to provide tuple types and their accompanying standard instances up to size 15. GHC limits the size of tuple types to 62 and provides instances of &lt;code&gt;Eq&lt;/code&gt;, &lt;code&gt;Ord&lt;/code&gt;, &lt;code&gt;Bounded&lt;/code&gt;, &lt;code&gt;Read&lt;/code&gt;, and &lt;code&gt;Show&lt;/code&gt; for tuples up to size 15. However, &lt;code&gt;Ix&lt;/code&gt; instances are provided only for tuples up to size 5.</source>
          <target state="translated">Haskellレポートは、サイズ15までのタプルタイプとそれに付随する標準インスタンスを提供するための実装のみを必要とします。GHCはタプルタイプのサイズを62に制限し、サイズ15までのタプルに対して &lt;code&gt;Eq&lt;/code&gt; 、 &lt;code&gt;Ord&lt;/code&gt; 、 &lt;code&gt;Bounded&lt;/code&gt; 、 &lt;code&gt;Read&lt;/code&gt; 、および &lt;code&gt;Show&lt;/code&gt; のインスタンスを提供します。ただし、 &lt;code&gt;Ix&lt;/code&gt; インスタンスは、サイズ5までのタプルに対してのみ提供されます。</target>
        </trans-unit>
        <trans-unit id="5dd54d84f1861492e330313f2bf345ca47769e1b" translate="yes" xml:space="preserve">
          <source>The Haskell Report specifies that a group of bindings (at top level, or in a &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;where&lt;/code&gt;) should be sorted into strongly-connected components, and then type-checked in dependency order (&lt;a href=&quot;http://www.haskell.org/onlinereport/decls.html#sect4.5.1&quot;&gt;Haskell Report, Section 4.5.1&lt;/a&gt;). As each group is type-checked, any binders of the group that have an explicit type signature are put in the type environment with the specified polymorphic type, and all others are monomorphic until the group is generalised (&lt;a href=&quot;http://www.haskell.org/onlinereport/decls.html#sect4.5.2&quot;&gt;Haskell Report, Section 4.5.2&lt;/a&gt;).</source>
          <target state="translated">Haskellレポートは、バインディングのグループ（最上位、または &lt;code&gt;let&lt;/code&gt; または &lt;code&gt;where&lt;/code&gt; 内）を強く接続されたコンポーネントにソートし、依存関係順に型チェックするように指定しています（&lt;a href=&quot;http://www.haskell.org/onlinereport/decls.html#sect4.5.1&quot;&gt;Haskellレポート、セクション4.5.1&lt;/a&gt;）。各グループは型チェックされるので、明示的な型シグネチャを持つグループのすべてのバインダーは、指定されたポリモーフィック型を使用して型環境に配置され、グループが一般化されるまで他のすべてはモノモーフィックになります（&lt;a href=&quot;http://www.haskell.org/onlinereport/decls.html#sect4.5.2&quot;&gt;Haskellレポート、セクション4.5.2&lt;/a&gt;） 。</target>
        </trans-unit>
        <trans-unit id="8b75c250a4a929abcdfd7f96fd88dc38f5bfcd9e" translate="yes" xml:space="preserve">
          <source>The Haskell Report specifies that a group of bindings (at top level, or in a &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;where&lt;/code&gt;) should be sorted into strongly-connected components, and then type-checked in dependency order (&lt;a href=&quot;https://www.haskell.org/onlinereport/decls.html#sect4.5.1&quot;&gt;Haskell Report, Section 4.5.1&lt;/a&gt;). As each group is type-checked, any binders of the group that have an explicit type signature are put in the type environment with the specified polymorphic type, and all others are monomorphic until the group is generalised (&lt;a href=&quot;https://www.haskell.org/onlinereport/decls.html#sect4.5.2&quot;&gt;Haskell Report, Section 4.5.2&lt;/a&gt;).</source>
          <target state="translated">Haskellレポートは、バインディングのグループ（トップレベル、または &lt;code&gt;let&lt;/code&gt; または &lt;code&gt;where&lt;/code&gt; ）を強連結成分にソートしてから、依存関係の順序で型チェックする必要があることを指定しています（&lt;a href=&quot;https://www.haskell.org/onlinereport/decls.html#sect4.5.1&quot;&gt;Haskellレポート、セクション4.5.1&lt;/a&gt;）。各グループは型チェックされるので、明示的な型シグネチャを持つグループのバインダーは、指定されたポリモーフィック型の型環境に置かれ、他のすべてのバインダーは、グループが一般化されるまで単形です（&lt;a href=&quot;https://www.haskell.org/onlinereport/decls.html#sect4.5.2&quot;&gt;Haskell Report、セクション4.5.2&lt;/a&gt;） 。</target>
        </trans-unit>
        <trans-unit id="f79c4bbad9a41e128d187b8c2ef86a8f611b12b5" translate="yes" xml:space="preserve">
          <source>The Haskell code in a package may be built into one or more archive libraries (e.g. &lt;code&gt;libHSfoo.a&lt;/code&gt;), or a single shared object (e.g. &lt;code&gt;libHSfoo.dll/.so/.dylib&lt;/code&gt;). The restriction to a single shared object is because the package system is used to tell the compiler when it should make an inter-shared-object call rather than an intra-shared-object-call call (inter-shared-object calls require an extra indirection).</source>
          <target state="translated">パッケージ内のHaskellコードは、1つ以上のアーカイブライブラリ（ &lt;code&gt;libHSfoo.a&lt;/code&gt; など）、または単一の共有オブジェクト（ &lt;code&gt;libHSfoo.dll/.so/.dylib&lt;/code&gt; など）に組み込まれている場合があります。単一の共有オブジェクトに対する制限は、パッケージシステムを使用して、共有オブジェクト内呼び出しではなく共有オブジェクト間呼び出しを行う必要がある場合にコンパイラーに通知するためです（共有オブジェクト呼び出しには追加の呼び出しが必要です）間接）。</target>
        </trans-unit>
        <trans-unit id="0c75300a05da2e87e80a93270dd95d3e5ff6d9a5" translate="yes" xml:space="preserve">
          <source>The Haskell implementation with which the program was compiled or is being interpreted.</source>
          <target state="translated">プログラムがコンパイルされた、または解釈されているHaskellの実装。</target>
        </trans-unit>
        <trans-unit id="60ce9c55f4fa0cf40f27dcde7ee4087164650d58" translate="yes" xml:space="preserve">
          <source>The Haskell implementation with which the program was compiled or is being interpreted. On the GHC platform, the value is &quot;ghc&quot;.</source>
          <target state="translated">プログラムがコンパイルされた、あるいは解釈されているHaskellの実装である。GHCプラットフォームでは、&quot;ghc &quot;となります。</target>
        </trans-unit>
        <trans-unit id="3bcb6ef9eb76436588cc0d8da0bf323ce2da12ae" translate="yes" xml:space="preserve">
          <source>The Haskell report &lt;a href=&quot;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-220003&quot;&gt;defines&lt;/a&gt; the &lt;code&gt;lexp&lt;/code&gt; nonterminal thus (&lt;code&gt;*&lt;/code&gt; indicates a rule of interest)</source>
          <target state="translated">Haskellのレポートが&lt;a href=&quot;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-220003&quot;&gt;定義されて&lt;/a&gt; &lt;code&gt;lexp&lt;/code&gt; ので、非終端を（ &lt;code&gt;*&lt;/code&gt; 興味の規則を示します）</target>
        </trans-unit>
        <trans-unit id="29f87244b686c50c8127fd2dc9c33f53eb1c0ecb" translate="yes" xml:space="preserve">
          <source>The Haskell report &lt;a href=&quot;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-220003&quot;&gt;defines&lt;/a&gt; the &lt;code&gt;lexp&lt;/code&gt; nonterminal thus (&lt;code&gt;*&lt;/code&gt; indicates a rule of interest):</source>
          <target state="translated">Haskellのレポートが&lt;a href=&quot;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-220003&quot;&gt;定義されて&lt;/a&gt; &lt;code&gt;lexp&lt;/code&gt; ので、非終端を（ &lt;code&gt;*&lt;/code&gt; 興味の規則を示します）：</target>
        </trans-unit>
        <trans-unit id="75d99185af7621d262f47061ebc9fcce26c3d99a" translate="yes" xml:space="preserve">
          <source>The Haskell2010 Report specifies in &amp;lt;&lt;a href=&quot;https://www.haskell.org/onlinereport/haskell2010/haskellch5.html#x11-990005.1&quot;&gt;https://www.haskell.org/onlinereport/haskell2010/haskellch5.html#x11-990005.1&lt;/a&gt;&amp;gt; that</source>
          <target state="translated">Haskell2010レポートでは、&amp;lt; &lt;a href=&quot;https://www.haskell.org/onlinereport/haskell2010/haskellch5.html#x11-990005.1&quot;&gt;https://www.haskell.org/onlinereport/haskell2010/haskellch5.html#x11-990005.1&lt;/a&gt; &amp;gt;で次のように指定されています。</target>
        </trans-unit>
        <trans-unit id="85d12b1c3d53edaed978aecf46c9e3e3b26b841c" translate="yes" xml:space="preserve">
          <source>The I/O SubSystem to use in the program.</source>
          <target state="translated">プログラムで使用するI/Oサブシステムです。</target>
        </trans-unit>
        <trans-unit id="18dcf9c1fa4567e3d746274c7c15cc6b75881bbb" translate="yes" xml:space="preserve">
          <source>The IO monad</source>
          <target state="translated">IOモナド</target>
        </trans-unit>
        <trans-unit id="fc0f546679107f369d6f8715d864a3e34b5c091c" translate="yes" xml:space="preserve">
          <source>The IOArray type</source>
          <target state="translated">IOArray型</target>
        </trans-unit>
        <trans-unit id="737d5b10a286b500beaf74123af646266a400fbd" translate="yes" xml:space="preserve">
          <source>The IOMode type</source>
          <target state="translated">IOModeタイプ</target>
        </trans-unit>
        <trans-unit id="65b73403a619cdf0ecd51edadceb4eff94590c0c" translate="yes" xml:space="preserve">
          <source>The IORef type</source>
          <target state="translated">IORef型</target>
        </trans-unit>
        <trans-unit id="558e32d8065fb827c731043184d460a503306a06" translate="yes" xml:space="preserve">
          <source>The ISO/IEC 8859-1 encoding is an 8-bit encoding often known as Latin-1. The &lt;em&gt;Char8&lt;/em&gt; encoding implemented here works by truncating the Unicode codepoint to 8-bits and encoding them as a single byte. For the codepoints 0-255 this corresponds to the ISO/IEC 8859-1 encoding.</source>
          <target state="translated">ISO / IEC 8859-1エンコーディングは、しばしばLatin-1として知られる8ビットエンコーディングです。&lt;em&gt;Char8を&lt;/em&gt;ここで実装エンコードは、8ビットのUnicodeのコードポイントを切り捨て、シングルバイトとしてそれらを符号化することによって動作します。コードポイント0-255の場合、これはISO / IEC 8859-1エンコーディングに対応します。</target>
        </trans-unit>
        <trans-unit id="54ad98c5ffd0b94e42a9d57326f087c3d7345412" translate="yes" xml:space="preserve">
          <source>The ISO/IEC 8859-1 encoding is an 8-bit encoding often known as Latin-1. The &lt;em&gt;Char8&lt;/em&gt; encoding implemented here works by truncating the Unicode codepoint to 8-bits and encoding them as a single byte. For the codepoints 0-255 this corresponds to the ISO/IEC 8859-1 encoding. Note that the Char8 encoding is equivalent to the ASCII encoding on the Unicode codepoints 0-127. Hence, functions such as &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; can also be used for encoding &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;s as a decimal number with Char8 encoded characters.</source>
          <target state="translated">ISO / IEC 8859-1エンコーディングは、しばしばLatin-1として知られる8ビットエンコーディングです。&lt;em&gt;Char8を&lt;/em&gt;ここで実装エンコードは、8ビットのUnicodeのコードポイントを切り捨て、シングルバイトとしてそれらを符号化することによって動作します。コードポイント0-255の場合、これはISO / IEC 8859-1エンコーディングに対応します。 Char8エンコーディングは、Unicodeコードポイント0-127のASCIIエンコーディングと同等であることに注意してください。したがって、 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; などの関数を使用して、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; をChar8エンコード文字を含む10進数としてエンコードすることもできます。</target>
        </trans-unit>
        <trans-unit id="49fa9b80f4fa24e3bcc0042f7b61d0c844f15e6b" translate="yes" xml:space="preserve">
          <source>The ISO/IEC 8859-1 encoding is an 8-bit encoding often known as Latin-1. The &lt;em&gt;Char8&lt;/em&gt; encoding implemented here works by truncating the Unicode codepoint to 8-bits and encoding them as a single byte. For the codepoints 0-255 this corresponds to the ISO/IEC 8859-1 encoding. Note that the Char8 encoding is equivalent to the ASCII encoding on the Unicode codepoints 0-127. Hence, functions such as &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; can also be used for encoding &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;s as a decimal number with Char8 encoded characters.</source>
          <target state="translated">ISO / IEC 8859-1エンコーディングは、Latin-1としてよく知られている8ビットエンコーディングです。&lt;em&gt;Char8を&lt;/em&gt;ここで実装エンコードは、8ビットのUnicodeのコードポイントを切り捨て、シングルバイトとしてそれらを符号化することによって動作します。コードポイント0〜255の場合、これはISO / IEC8859-1エンコーディングに対応します。Char8エンコーディングは、Unicodeコードポイント0〜127のASCIIエンコーディングと同等であることに注意してください。したがって、 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; などの関数を使用して、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; をChar8でエンコードされた文字を使用して10進数としてエンコードすることもできます。</target>
        </trans-unit>
        <trans-unit id="6c77ebed88d6a61f3f19c1021d1825a839754219" translate="yes" xml:space="preserve">
          <source>The ISO/IEC 8859-1 encoding is an 8-bit encoding often known as Latin-1. The &lt;em&gt;Char8&lt;/em&gt; encoding implemented here works by truncating the Unicode codepoint to 8-bits and encoding them as a single byte. For the codepoints 0-255 this corresponds to the ISO/IEC 8859-1 encoding. Note that the Char8 encoding is equivalent to the ASCII encoding on the Unicode codepoints 0-127. Hence, functions such as &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; can also be used for encoding &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;s as a decimal number with Char8 encoded characters.</source>
          <target state="translated">ISO / IEC 8859-1エンコーディングは、Latin-1としてよく知られている8ビットエンコーディングです。&lt;em&gt;Char8を&lt;/em&gt;ここで実装エンコードは、8ビットのUnicodeのコードポイントを切り捨て、シングルバイトとしてそれらを符号化することによって動作します。コードポイント0〜255の場合、これはISO / IEC8859-1エンコーディングに対応します。Char8エンコーディングは、Unicodeコードポイント0〜127のASCIIエンコーディングと同等であることに注意してください。したがって、 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; などの関数を使用して、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; をChar8でエンコードされた文字を使用して10進数としてエンコードすることもできます。</target>
        </trans-unit>
        <trans-unit id="c479ee79f8f50aa3dcf64e97781e845a99daa98d" translate="yes" xml:space="preserve">
          <source>The InputT monad transformer</source>
          <target state="translated">InputTモナドトランス</target>
        </trans-unit>
        <trans-unit id="f02dbfae6923c5fae8b765773db367457b1cef47" translate="yes" xml:space="preserve">
          <source>The Latin1 (ISO8859-1) encoding. This encoding maps bytes directly to the first 256 Unicode code points, and is thus not a complete Unicode encoding. An attempt to write a character greater than &lt;code&gt;'\255'&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;system-io#v:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; using the &lt;code&gt;&lt;a href=&quot;ghc-io-encoding#v:latin1&quot;&gt;latin1&lt;/a&gt;&lt;/code&gt; encoding will result in an error.</source>
          <target state="translated">Latin1（ISO8859-1）エンコーディング。このエンコーディングは、バイトを最初の256個のUnicodeコードポイントに直接マップするため、完全なUnicodeエンコーディングではありません。 &lt;code&gt;&lt;a href=&quot;ghc-io-encoding#v:latin1&quot;&gt;latin1&lt;/a&gt;&lt;/code&gt; エンコーディングを使用して、 &lt;code&gt;&lt;a href=&quot;system-io#v:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; &lt;code&gt;'\255'&lt;/code&gt; より大きい文字を書き込もうとすると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="ddf2c2b44bf1b6f9d563c7f3800d62394c65a764" translate="yes" xml:space="preserve">
          <source>The Latin1 (ISO8859-1) encoding. This encoding maps bytes directly to the first 256 Unicode code points, and is thus not a complete Unicode encoding. An attempt to write a character greater than &lt;code&gt;'\255'&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;system-io#v:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; using the &lt;code&gt;&lt;a href=&quot;system-io#v:latin1&quot;&gt;latin1&lt;/a&gt;&lt;/code&gt; encoding will result in an error.</source>
          <target state="translated">Latin1（ISO8859-1）エンコーディング。このエンコーディングは、バイトを最初の256個のUnicodeコードポイントに直接マップするため、完全なUnicodeエンコーディングではありません。 &lt;code&gt;&lt;a href=&quot;system-io#v:latin1&quot;&gt;latin1&lt;/a&gt;&lt;/code&gt; エンコーディングを使用して、 &lt;code&gt;&lt;a href=&quot;system-io#v:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; &lt;code&gt;'\255'&lt;/code&gt; より大きい文字を書き込もうとすると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="680f8c637bf3c21d4334aa840c68f7b1c0426e80" translate="yes" xml:space="preserve">
          <source>The List data type and its operations</source>
          <target state="translated">リストデータ型とその操作</target>
        </trans-unit>
        <trans-unit id="527e8dadea35f6a4f5c4a4c4be123089c5e69c00" translate="yes" xml:space="preserve">
          <source>The List monad.</source>
          <target state="translated">リストモナド。</target>
        </trans-unit>
        <trans-unit id="8aba302b7e58fc590a9afdc1a01080baae6e6ec1" translate="yes" xml:space="preserve">
          <source>The ListT monad transformer</source>
          <target state="translated">ListT モナド変換器</target>
        </trans-unit>
        <trans-unit id="ba07cd406a34170d4f0ecfa83e506b98d6f30534" translate="yes" xml:space="preserve">
          <source>The ListT monad transformer, adding backtracking to a given monad, which must be commutative.</source>
          <target state="translated">ListTのモナド変換器で、整流的でなければならない与えられたモナドにバックトラックを追加します。</target>
        </trans-unit>
        <trans-unit id="e0495cc6e831dd99a09b6b22275801501a83fb2b" translate="yes" xml:space="preserve">
          <source>The MVar type</source>
          <target state="translated">MVar型</target>
        </trans-unit>
        <trans-unit id="46396b237f9d18bcd799cea896a2640dfd6df348" translate="yes" xml:space="preserve">
          <source>The Maybe type, and associated operations.</source>
          <target state="translated">Maybe型とそれに関連する操作。</target>
        </trans-unit>
        <trans-unit id="e744e9e0cfe46515ef9f5bb52e48c6c750bbb1e5" translate="yes" xml:space="preserve">
          <source>The MaybeT monad transformer</source>
          <target state="translated">MaybeTモナド変換器</target>
        </trans-unit>
        <trans-unit id="4126903c0c38cb737f94266782af2c525510b404" translate="yes" xml:space="preserve">
          <source>The Modified Julian Date is the day with the fraction of the day, measured from UT midnight. It's used to represent UT1, which is time as measured by the earth's rotation, adjusted for various wobbles.</source>
          <target state="translated">修正ユリウス日は、真夜中のUTから測定した1日の分数を持つ日です。これは、様々なぐらつきを調整した地球の自転によって測定された時間であるUT1を表すために使用されます。</target>
        </trans-unit>
        <trans-unit id="d4fd231b0228fbbb56527d9186f84060d50a59d7" translate="yes" xml:space="preserve">
          <source>The Modified Julian Day is a standard count of days, with zero being the day 1858-11-17.</source>
          <target state="translated">修正ユリウス日は、1858年11月17日を0日とする標準的な日数の数え方です。</target>
        </trans-unit>
        <trans-unit id="c771c28ba6943eb0fbd701bba8effdfe529aa2b4" translate="yes" xml:space="preserve">
          <source>The MonadException class</source>
          <target state="translated">MonadException クラス</target>
        </trans-unit>
        <trans-unit id="ad32074e930158647c5d3c0d66a82e352b9530f7" translate="yes" xml:space="preserve">
          <source>The MonadWriter class.</source>
          <target state="translated">MonadWriterクラスです。</target>
        </trans-unit>
        <trans-unit id="51acf2e9a1f450466332b8327436f6eceb7c3f17" translate="yes" xml:space="preserve">
          <source>The Monomorphism Restriction is disabled (see &lt;a href=&quot;exts/monomorphism#monomorphism&quot;&gt;Switching off the Monomorphism Restriction&lt;/a&gt;).</source>
          <target state="translated">単相制限が無効になっています（&lt;a href=&quot;exts/monomorphism#monomorphism&quot;&gt;単相制限をオフにするを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="b01bbf48e477c92aa3644550cb6f1cc37d1a0b1f" translate="yes" xml:space="preserve">
          <source>The Monomorphism Restriction is disabled (see &lt;a href=&quot;glasgow_exts#monomorphism&quot;&gt;Switching off the dreaded Monomorphism Restriction&lt;/a&gt;).</source>
          <target state="translated">単相性制限が無効になっています（&lt;a href=&quot;glasgow_exts#monomorphism&quot;&gt;恐ろしい単相性制限のスイッチオフを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="bfaad71abe81d69b989cc169fbd7881a4139c40a" translate="yes" xml:space="preserve">
          <source>The NT kernel however allows you ways to opt out of this path preprocessing by the Win32 APIs. This is done by explicitly using the desired namespace in the path.</source>
          <target state="translated">しかし、NT カーネルでは、Win32 API によるこのパスの前処理をオプトアウトする方法があります。これは、パスの中で希望する名前空間を明示的に使用することで行われます。</target>
        </trans-unit>
        <trans-unit id="c3d1ffc3dd3f40f1c222c841f95386202d3f7d9c" translate="yes" xml:space="preserve">
          <source>The Package Versioning Policy &lt;strong&gt;does not apply&lt;/strong&gt;.</source>
          <target state="translated">パッケージのバージョン管理ポリシー&lt;strong&gt;は適用されません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="7577997f2b7e95327e240c7fc768c6dc92772fe1" translate="yes" xml:space="preserve">
          <source>The Paterson Conditions: for each class constraint &lt;code&gt;(C t1 ... tn)&lt;/code&gt; in the context</source>
          <target state="translated">パターソン条件：コンテキスト内の各クラス制約 &lt;code&gt;(C t1 ... tn)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7329aa4547685d3c70bea0407e898afb0b679e44" translate="yes" xml:space="preserve">
          <source>The Prelude: a standard module. The Prelude is imported by default into all Haskell modules unless either there is an explicit import statement for it, or the NoImplicitPrelude extension is enabled.</source>
          <target state="translated">Prelude:標準モジュールです。Preludeは、明示的なインポートステートメントがあるか、NoImplicitPrelude拡張機能が有効になっていない限り、デフォルトですべてのHaskellモジュールにインポートされます。</target>
        </trans-unit>
        <trans-unit id="0aa2000b932cfb04e1a3bcd9c14b88cf13e1335d" translate="yes" xml:space="preserve">
          <source>The Put monad</source>
          <target state="translated">プットモナド</target>
        </trans-unit>
        <trans-unit id="e6d4dd4f8b3be3cd5b857fe2de8ff602061f0af6" translate="yes" xml:space="preserve">
          <source>The Put monad. A monad for efficiently constructing lazy bytestrings.</source>
          <target state="translated">Putモナド。遅延バイト列を効率的に構築するためのモナド。</target>
        </trans-unit>
        <trans-unit id="859037e4eda9b5b2f4fe55e78c68c20d023080cf" translate="yes" xml:space="preserve">
          <source>The Put type</source>
          <target state="translated">プット型</target>
        </trans-unit>
        <trans-unit id="ab5819377a02005c251c02732e301195c27a0049" translate="yes" xml:space="preserve">
          <source>The PutM type. A Writer monad over the efficient Builder monoid.</source>
          <target state="translated">PutM型です。効率的な Builder モノイドの上にある Writer モナド。</target>
        </trans-unit>
        <trans-unit id="2354aa5ff6e1c2d9885153e78ccf38e4f0365e83" translate="yes" xml:space="preserve">
          <source>The RTS has a lot of options to control its behaviour. For example, you can change the context-switch interval, the default size of the heap, and enable heap profiling. These options can be passed to the runtime system in a variety of different ways; the next section (&lt;a href=&quot;#setting-rts-options&quot;&gt;Setting RTS options&lt;/a&gt;) describes the various methods, and the following sections describe the RTS options themselves.</source>
          <target state="translated">RTSには、その動作を制御する多くのオプションがあります。たとえば、コンテキストスイッチの間隔、ヒープのデフォルトサイズを変更し、ヒーププロファイリングを有効にすることができます。これらのオプションは、さまざまな方法でランタイムシステムに渡すことができます。次のセクション（&lt;a href=&quot;#setting-rts-options&quot;&gt;RTSオプションの設定&lt;/a&gt;）では、さまざまな方法について説明します。次のセクションでは、RTSオプション自体について説明します。</target>
        </trans-unit>
        <trans-unit id="80255d167f12c27a3ea54ce8b0bd00039dbf82da" translate="yes" xml:space="preserve">
          <source>The RTS options related to concurrency are described in &lt;a href=&quot;using-concurrent#using-concurrent&quot;&gt;Using Concurrent Haskell&lt;/a&gt;, and those for parallelism in &lt;a href=&quot;using-concurrent#parallel-options&quot;&gt;RTS options for SMP parallelism&lt;/a&gt;.</source>
          <target state="translated">並行性に関連するRTSオプションについては、「&lt;a href=&quot;using-concurrent#using-concurrent&quot;&gt;同時Haskellの使用&lt;/a&gt;」および「&lt;a href=&quot;using-concurrent#parallel-options&quot;&gt;SMP並列処理のRTSオプションの&lt;/a&gt;並列処理に関するオプション」で説明しています。</target>
        </trans-unit>
        <trans-unit id="5bb8ad1fb09a839ecffde8ca34b94bdfdcd8b691" translate="yes" xml:space="preserve">
          <source>The RTS will snaffle &lt;code&gt;-H32m -S&lt;/code&gt; for itself, and the remaining arguments &lt;code&gt;-f -h foo bar&lt;/code&gt; will be available to your program if/when it calls &lt;code&gt;System.Environment.getArgs&lt;/code&gt;.</source>
          <target state="translated">RTSはそれ自体のために &lt;code&gt;-H32m -S&lt;/code&gt; を手抜きし、残りの引数 &lt;code&gt;-f -h foo bar&lt;/code&gt; は、プログラムが &lt;code&gt;System.Environment.getArgs&lt;/code&gt; を呼び出した場合にプログラムで使用できます。</target>
        </trans-unit>
        <trans-unit id="e88b8846d8fe73958229f97485a69a53155ce170" translate="yes" xml:space="preserve">
          <source>The RULES mechanism is used to implement fusion (deforestation) of common list functions. If a &amp;ldquo;good consumer&amp;rdquo; consumes an intermediate list constructed by a &amp;ldquo;good producer&amp;rdquo;, the intermediate list should be eliminated entirely.</source>
          <target state="translated">RULESメカニズムは、一般的なリスト関数の融合（森林破壊）を実装するために使用されます。「良い消費者」が「良い生産者」によって作成された中間リストを消費する場合、中間リストは完全に削除されるべきです。</target>
        </trans-unit>
        <trans-unit id="91cc01216a24ea0cf70d53ce6831cdfd22c4c1ae" translate="yes" xml:space="preserve">
          <source>The RWS monad</source>
          <target state="translated">RWSモナド</target>
        </trans-unit>
        <trans-unit id="3030e059d51b47652080afc1bf3e87a96b72964b" translate="yes" xml:space="preserve">
          <source>The RWST monad transformer</source>
          <target state="translated">RWSTモナドトランス</target>
        </trans-unit>
        <trans-unit id="17d69ac471ca747fe3aa42940b683d831a9ef452" translate="yes" xml:space="preserve">
          <source>The Reader monad</source>
          <target state="translated">リーダーのモナド</target>
        </trans-unit>
        <trans-unit id="3aea66391daa03b9cc14c2b409c118ef8792ac2b" translate="yes" xml:space="preserve">
          <source>The ReaderT monad transformer</source>
          <target state="translated">ReaderTモナド変換器</target>
        </trans-unit>
        <trans-unit id="7b28758084e7661741da61d05acfec540a63dcd6" translate="yes" xml:space="preserve">
          <source>The STM implementation will abort transactions that are known to be invalid and need to be restarted. This may happen in the middle of &lt;code&gt;&lt;a href=&quot;ghc-conc#v:unsafeIOToSTM&quot;&gt;unsafeIOToSTM&lt;/a&gt;&lt;/code&gt;, so make sure you don't acquire any resources that need releasing (exception handlers are ignored when aborting the transaction). That includes doing any IO using Handles, for example. Getting this wrong will probably lead to random deadlocks.</source>
          <target state="translated">STMの実装は、無効であることがわかっていて再起動が必要なトランザクションを中止します。これは &lt;code&gt;&lt;a href=&quot;ghc-conc#v:unsafeIOToSTM&quot;&gt;unsafeIOToSTM&lt;/a&gt;&lt;/code&gt; の途中で発生する可能性があるため、解放が必要なリソースを取得しないようにしてください（トランザクションを中止する場合、例外ハンドラーは無視されます）。たとえば、ハンドルを使用したIOの実行が含まれます。これを誤ると、おそらくランダムなデッドロックが発生します。</target>
        </trans-unit>
        <trans-unit id="a93c60619a7c26a3aaea050cc64323b106e6a10f" translate="yes" xml:space="preserve">
          <source>The STM implementation will abort transactions that are known to be invalid and need to be restarted. This may happen in the middle of &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:unsafeIOToSTM&quot;&gt;unsafeIOToSTM&lt;/a&gt;&lt;/code&gt;, so make sure you don't acquire any resources that need releasing (exception handlers are ignored when aborting the transaction). That includes doing any IO using Handles, for example. Getting this wrong will probably lead to random deadlocks.</source>
          <target state="translated">STMの実装は、無効であることがわかっていて再起動が必要なトランザクションを中止します。これは &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:unsafeIOToSTM&quot;&gt;unsafeIOToSTM&lt;/a&gt;&lt;/code&gt; の途中で発生する可能性があるため、解放が必要なリソースを取得しないようにしてください（トランザクションを中止する場合、例外ハンドラーは無視されます）。たとえば、ハンドルを使用したIOの実行が含まれます。これを誤ると、おそらくランダムなデッドロックが発生します。</target>
        </trans-unit>
        <trans-unit id="a466c95f7705b8667d496c8cad7e2978bbeba71b" translate="yes" xml:space="preserve">
          <source>The STM implementation will often run transactions multiple times, so you need to be prepared for this if your IO has any side effects.</source>
          <target state="translated">STMの実装では複数回トランザクションを実行することが多いので、IOに副作用がある場合は覚悟しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="d2c9be55e3be898cad081ed8cc787cc2dc0d8adc" translate="yes" xml:space="preserve">
          <source>The Safe Haskell &lt;em&gt;safe language&lt;/em&gt; (enabled by &lt;code&gt;-XSafe&lt;/code&gt;) guarantees the following properties:</source>
          <target state="translated">Safe Haskell &lt;em&gt;セーフ言語&lt;/em&gt;（ &lt;code&gt;-XSafe&lt;/code&gt; によって有効化）は、次のプロパティを保証します。</target>
        </trans-unit>
        <trans-unit id="7726729f19e0da000e83c79bcb8c28c6f385ffcb" translate="yes" xml:space="preserve">
          <source>The Safe Haskell checks can be disabled for a module by passing the &lt;a href=&quot;#ghc-flag--fno-safe-haskell&quot;&gt;&lt;code&gt;-fno-safe-haskell&lt;/code&gt;&lt;/a&gt; flag. This is useful in particular when compiling with source plugins as running a plugin marks the module as unsafe and can then cause downstream modules to fail the safety checks.</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--fno-safe-haskell&quot;&gt; &lt;code&gt;-fno-safe-haskell&lt;/code&gt; &lt;/a&gt;フラグを渡すことにより、モジュールのSafe Haskellチェックを無効にすることができます。これは、プラグインの実行時にモジュールを安全でないとマークし、ダウンストリームモジュールが安全性チェックに失敗する可能性があるため、ソースプラグインでコンパイルする場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="6da0062c345ab61160d26f605d07d936e53000f2" translate="yes" xml:space="preserve">
          <source>The Select monad</source>
          <target state="translated">セレクトモナド</target>
        </trans-unit>
        <trans-unit id="14b5bf3a399f4cac6f75470d51a3a0bae35be0f1" translate="yes" xml:space="preserve">
          <source>The SelectT monad transformer</source>
          <target state="translated">SelectTモナドトランス</target>
        </trans-unit>
        <trans-unit id="afb2b6e8a6ae40d8e5e247b3b17b072cba473176" translate="yes" xml:space="preserve">
          <source>The Signal type</source>
          <target state="translated">信号タイプ</target>
        </trans-unit>
        <trans-unit id="34ca6ab89d0a5929502c3b8fda82f9d7a6d4db86" translate="yes" xml:space="preserve">
          <source>The State monad</source>
          <target state="translated">国家モナド</target>
        </trans-unit>
        <trans-unit id="d1d93ac3a4f1be7a558b299c04132f8bd844f80f" translate="yes" xml:space="preserve">
          <source>The StateT monad transformer</source>
          <target state="translated">StateTモナドトランス</target>
        </trans-unit>
        <trans-unit id="19f67896d1f6937e580c15a10e0aa19b08a4f845" translate="yes" xml:space="preserve">
          <source>The SubSystem control interface. These methods can be used to disambiguate between the two operations.</source>
          <target state="translated">SubSystemの制御インターフェース。これらのメソッドは、2つの操作を曖昧にするために使用できます。</target>
        </trans-unit>
        <trans-unit id="38fd4995bb0200714fd098c99380c5ce19be4b0a" translate="yes" xml:space="preserve">
          <source>The TH state, created by &lt;code&gt;&lt;a href=&quot;ghci-th#v:startTH&quot;&gt;startTH&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghci-th#v:startTH&quot;&gt;startTH&lt;/a&gt;&lt;/code&gt; によって作成されたTH状態</target>
        </trans-unit>
        <trans-unit id="f2544b8736e584c3e40b611d6a80bea3cc2e2d77" translate="yes" xml:space="preserve">
          <source>The Typeable class</source>
          <target state="translated">Typeable クラス</target>
        </trans-unit>
        <trans-unit id="406c428a778ef7125e193987bbac0237ab0511cd" translate="yes" xml:space="preserve">
          <source>The UTC time zone.</source>
          <target state="translated">UTCタイムゾーン。</target>
        </trans-unit>
        <trans-unit id="38141e622e2458972c46a5896fe7f4e01687679d" translate="yes" xml:space="preserve">
          <source>The UTF-16 Unicode encoding (a byte-order-mark should be used to indicate endianness).</source>
          <target state="translated">UTF-16 Unicode エン コ ーデ ィ ン グ (エンデ ィ ア ン ス を示すためにバ イ ト 順序マー ク を用いる必要があ り ます)。</target>
        </trans-unit>
        <trans-unit id="0cf0e68f8c740d3f43a6e8c8dbc14773e82bf3fb" translate="yes" xml:space="preserve">
          <source>The UTF-16 Unicode encoding (big-endian)</source>
          <target state="translated">UTF-16 Unicode エンコーディング (ビッグエンディアン)</target>
        </trans-unit>
        <trans-unit id="0e56b9ac4542ba5321237f8287ad2bf793fc3af5" translate="yes" xml:space="preserve">
          <source>The UTF-16 Unicode encoding (litte-endian)</source>
          <target state="translated">UTF-16 Unicode エンコーディング (litte-endian)</target>
        </trans-unit>
        <trans-unit id="8c4b2968dfc559f607c84276e6deaa90e4bc09b8" translate="yes" xml:space="preserve">
          <source>The UTF-16 Unicode encoding (little-endian)</source>
          <target state="translated">UTF-16 Unicodeエンコーディング(リトルエンディアン)の場合</target>
        </trans-unit>
        <trans-unit id="d34bf7d79b70b504d63dce6b7b58a8119636ec3c" translate="yes" xml:space="preserve">
          <source>The UTF-32 Unicode encoding (a byte-order-mark should be used to indicate endianness).</source>
          <target state="translated">UTF-32 Unicode エン コ ーデ ィ ン グ (エンデ ィ ア ン ス を示すにはバ イ ト 順序マー ク を使用す る 必要があ り ます)。</target>
        </trans-unit>
        <trans-unit id="67dffc3f81adbd2d24a0516022167baf8bc86322" translate="yes" xml:space="preserve">
          <source>The UTF-32 Unicode encoding (big-endian)</source>
          <target state="translated">UTF-32 Unicode エンコーディング (ビッグエンディアン)</target>
        </trans-unit>
        <trans-unit id="e1d43f77fb169e84f01193e920df4b983c3368e9" translate="yes" xml:space="preserve">
          <source>The UTF-32 Unicode encoding (litte-endian)</source>
          <target state="translated">UTF-32 Unicode エンコーディング(リッテエンディアン)。</target>
        </trans-unit>
        <trans-unit id="7aac7a838ca04e2d0239351dada786d53acef1d2" translate="yes" xml:space="preserve">
          <source>The UTF-32 Unicode encoding (little-endian)</source>
          <target state="translated">UTF-32 Unicodeエンコーディング(リトルエンディアン)の場合</target>
        </trans-unit>
        <trans-unit id="52589abf36edd4349a64f7d5395f328f8a947920" translate="yes" xml:space="preserve">
          <source>The UTF-8 Unicode encoding</source>
          <target state="translated">UTF-8 Unicode エンコーディング</target>
        </trans-unit>
        <trans-unit id="a005af9557a056326c8b8d7c97a47bc28391bd3b" translate="yes" xml:space="preserve">
          <source>The UTF-8 Unicode encoding, with a byte-order-mark (BOM; the byte sequence 0xEF 0xBB 0xBF). This encoding behaves like &lt;code&gt;&lt;a href=&quot;ghc-io-encoding#v:utf8&quot;&gt;utf8&lt;/a&gt;&lt;/code&gt;, except that on input, the BOM sequence is ignored at the beginning of the stream, and on output, the BOM sequence is prepended.</source>
          <target state="translated">バイトオーダーマーク（BOM;バイトシーケンス0xEF 0xBB 0xBF）付きのUTF-8 Unicodeエンコーディング。このエンコーディングは &lt;code&gt;&lt;a href=&quot;ghc-io-encoding#v:utf8&quot;&gt;utf8&lt;/a&gt;&lt;/code&gt; のように動作しますが、入力ではBOMシーケンスはストリームの先頭で無視され、出力ではBOMシーケンスが先頭に追加されます。</target>
        </trans-unit>
        <trans-unit id="eaf74031b27da65f642c604ade4f47115637843c" translate="yes" xml:space="preserve">
          <source>The UTF-8 Unicode encoding, with a byte-order-mark (BOM; the byte sequence 0xEF 0xBB 0xBF). This encoding behaves like &lt;code&gt;&lt;a href=&quot;system-io#v:utf8&quot;&gt;utf8&lt;/a&gt;&lt;/code&gt;, except that on input, the BOM sequence is ignored at the beginning of the stream, and on output, the BOM sequence is prepended.</source>
          <target state="translated">バイトオーダーマーク（BOM;バイトシーケンス0xEF 0xBB 0xBF）付きのUTF-8 Unicodeエンコーディング。このエンコーディングは &lt;code&gt;&lt;a href=&quot;system-io#v:utf8&quot;&gt;utf8&lt;/a&gt;&lt;/code&gt; のように動作しますが、入力ではBOMシーケンスはストリームの先頭で無視され、出力ではBOMシーケンスが先頭に追加されます。</target>
        </trans-unit>
        <trans-unit id="48a72567fd36d1b77865bf4ea3a5534e90bd33c8" translate="yes" xml:space="preserve">
          <source>The UTF-8 encoding can encode &lt;em&gt;all&lt;/em&gt; Unicode codepoints. We recommend using it always for encoding &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;s and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;s unless an application really requires another encoding.</source>
          <target state="translated">UTF-8エンコーディングは、&lt;em&gt;すべての&lt;/em&gt; Unicodeコードポイントをエンコードできます。アプリケーションが実際に別のエンコーディングを必要としない限り、常に &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; のエンコーディングに使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ad5a08465846c2ed90f1e4740e5e95b9f0ebef47" translate="yes" xml:space="preserve">
          <source>The UTF-8 encoding can encode &lt;em&gt;all&lt;/em&gt; Unicode codepoints. We recommend using it always for encoding &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;s and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;s unless an application really requires another encoding.</source>
          <target state="translated">UTF-8エンコーディングは、&lt;em&gt;すべての&lt;/em&gt;Unicodeコードポイントをエンコードできます。アプリケーションが本当に別のエンコーディングを必要としない限り、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; のエンコーディングには常に使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="bd2c9a45b06c5bc52330c023a465b428ccfa7702" translate="yes" xml:space="preserve">
          <source>The UTF-8 encoding can encode &lt;em&gt;all&lt;/em&gt; Unicode codepoints. We recommend using it always for encoding &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;s and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;s unless an application really requires another encoding.</source>
          <target state="translated">UTF-8エンコーディングは、&lt;em&gt;すべての&lt;/em&gt;Unicodeコードポイントをエンコードできます。アプリケーションが本当に別のエンコーディングを必要としない限り、 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; のエンコーディングには常に使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="d524833742212d693f8a7a1356f8aab1e3718c22" translate="yes" xml:space="preserve">
          <source>The UTF-8 encoding can encode all Unicode codepoints. It is equivalent to the ASCII encoding on the Unicode codepoints 0-127. Hence, functions such as &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; can also be used for encoding &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;s as a decimal number with UTF-8 encoded characters.</source>
          <target state="translated">UTF-8エンコーディングは、すべてのUnicodeコードポイントをエンコードできます。これは、Unicodeコードポイント0-127のASCIIエンコーディングと同等です。したがって、 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; などの関数は、UTF-8エンコードされた文字を含む10進数として &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; をエンコードするためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="51b4cc22b8af376450ca69ff9b57ead5e922d46c" translate="yes" xml:space="preserve">
          <source>The UTF-8 encoding can encode all Unicode codepoints. It is equivalent to the ASCII encoding on the Unicode codepoints 0-127. Hence, functions such as &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; can also be used for encoding &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;s as a decimal number with UTF-8 encoded characters.</source>
          <target state="translated">UTF-8エンコーディングは、すべてのUnicodeコードポイントをエンコードできます。これは、Unicodeコードポイント0〜127のASCIIエンコーディングと同等です。したがって、 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; などの関数を使用して、UTF-8でエンコードされた文字を使用して &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; を10進数としてエンコードすることもできます。</target>
        </trans-unit>
        <trans-unit id="56e548216f1a033464f97b8c8251bc89165b536d" translate="yes" xml:space="preserve">
          <source>The UTF-8 encoding can encode all Unicode codepoints. It is equivalent to the ASCII encoding on the Unicode codepoints 0-127. Hence, functions such as &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; can also be used for encoding &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;s as a decimal number with UTF-8 encoded characters.</source>
          <target state="translated">UTF-8エンコーディングは、すべてのUnicodeコードポイントをエンコードできます。これは、Unicodeコードポイント0〜127のASCIIエンコーディングと同等です。したがって、 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; などの関数を使用して、UTF-8でエンコードされた文字を使用して &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; を10進数としてエンコードすることもできます。</target>
        </trans-unit>
        <trans-unit id="09093313f0f91c4b5737ad4a0fbe7d06eea9ee26" translate="yes" xml:space="preserve">
          <source>The Unicode encoding of the current locale</source>
          <target state="translated">現在のロケールの Unicode エンコーディング。</target>
        </trans-unit>
        <trans-unit id="3f137dd2773a7b21ca2a1977bcffe06a49397773" translate="yes" xml:space="preserve">
          <source>The Unicode encoding of the current locale, but allowing arbitrary undecodable bytes to be round-tripped through it.</source>
          <target state="translated">現在のロケールの Unicode エンコーディングですが、復号化できない任意のバイトをラウンドトリップさせることができます。</target>
        </trans-unit>
        <trans-unit id="939eaac913afcf37c06343e0dee5a39351f12362" translate="yes" xml:space="preserve">
          <source>The Unicode encoding of the current locale, but where undecodable bytes are replaced with their closest visual match. Used for the &lt;code&gt;&lt;a href=&quot;foreign-c-string#v:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; marshalling functions in &lt;a href=&quot;foreign-c-string&quot;&gt;Foreign.C.String&lt;/a&gt;</source>
          <target state="translated">現在のロケールのUnicodeエンコーディング。ただし、デコードできないバイトは、最も近い視覚的一致に置き換えられます。&lt;a href=&quot;foreign-c-string&quot;&gt;Foreign.C.Stringの&lt;/a&gt; &lt;code&gt;&lt;a href=&quot;foreign-c-string#v:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; マーシャリング関数に使用されます</target>
        </trans-unit>
        <trans-unit id="94c16bb05159c06fe3dc812d48c81e471e6e3efb" translate="yes" xml:space="preserve">
          <source>The Unicode general category of the character. This relies on the &lt;code&gt;&lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; instance of &lt;code&gt;&lt;a href=&quot;data-char#t:GeneralCategory&quot;&gt;GeneralCategory&lt;/a&gt;&lt;/code&gt;, which must remain in the same order as the categories are presented in the Unicode standard.</source>
          <target state="translated">文字のUnicode一般カテゴリ。これは &lt;code&gt;&lt;a href=&quot;data-char#t:GeneralCategory&quot;&gt;GeneralCategory&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; インスタンスに依存しています。これは、カテゴリがUnicode標準で提示されているのと同じ順序である必要があります。</target>
        </trans-unit>
        <trans-unit id="68e199523a1fa0fa41372e425d662a0ca937ad92" translate="yes" xml:space="preserve">
          <source>The Unicode general category of the character. This relies on the &lt;code&gt;&lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; instance of &lt;code&gt;&lt;a href=&quot;ghc-unicode#t:GeneralCategory&quot;&gt;GeneralCategory&lt;/a&gt;&lt;/code&gt;, which must remain in the same order as the categories are presented in the Unicode standard.</source>
          <target state="translated">文字のUnicode一般カテゴリ。これは &lt;code&gt;&lt;a href=&quot;ghc-unicode#t:GeneralCategory&quot;&gt;GeneralCategory&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; インスタンスに依存しています。これは、カテゴリがUnicode標準で提示されているのと同じ順序である必要があります。</target>
        </trans-unit>
        <trans-unit id="b3874853724a4d3f79b5cf848ac2f78cd971528d" translate="yes" xml:space="preserve">
          <source>The Weak Head Normal Form of an &lt;strong&gt;&lt;code&gt;FRList&lt;/code&gt;&lt;/strong&gt; is a lambda abstraction not a data value, and reuse does not lead to memoisation. Reuse of the iterator above is somewhat contrived, when computing multiple folds over a common list, you should generally traverse a list only &lt;a href=&quot;#multipass&quot;&gt;once&lt;/a&gt;. The goal is to demonstrate that the separate computations of the &lt;code&gt;&lt;a href=&quot;data-foldable#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-foldable#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; run efficiently in constant space, despite reuse. This would not be the case with the list &lt;code&gt;[1..10000000]&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;FRList&lt;/code&gt; のWeakHead&lt;/strong&gt; Normal形式は、データ値ではなくラムダ抽象化であり、再利用してもメモ化にはつながりません。上記のイテレータの再利用はやや不自然です。共通のリストに対して複数のフォールドを計算する場合、通常はリストを1&lt;a href=&quot;#multipass&quot;&gt;回&lt;/a&gt;だけトラバースする必要があります。目標は、 &lt;code&gt;&lt;a href=&quot;data-foldable#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-foldable#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; 個別の計算が、再利用にもかかわらず、一定の空間で効率的に実行されることを示すことです。これは、リスト &lt;code&gt;[1..10000000]&lt;/code&gt; には当てはまりません。</target>
        </trans-unit>
        <trans-unit id="461ca2fc00cd995c7e6980fa43df6ef7503d97ca" translate="yes" xml:space="preserve">
          <source>The Windows directory</source>
          <target state="translated">Windowsディレクトリ</target>
        </trans-unit>
        <trans-unit id="a88998b1d185995bfddbae32ddd00452270da2ae" translate="yes" xml:space="preserve">
          <source>The Writer monad</source>
          <target state="translated">ライターモナド</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
