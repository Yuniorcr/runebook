<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="haskell">
    <body>
      <group id="haskell">
        <trans-unit id="25799598a4e8c42a83738d367f796323e13b7b18" translate="yes" xml:space="preserve">
          <source>Lexeme</source>
          <target state="translated">Lexeme</target>
        </trans-unit>
        <trans-unit id="46ace3bdab1ce2e35c935ef17a0a57edf4886910" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;angles p&lt;/code&gt; parses &lt;code&gt;p&lt;/code&gt; enclosed in angle brackets ('&amp;lt;' and '&amp;gt;'), returning the value of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサ &lt;code&gt;angles p&lt;/code&gt; パース &lt;code&gt;p&lt;/code&gt; 密閉型の値戻り角括弧（「&amp;lt;」と「&amp;gt;」）に &lt;code&gt;p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4cc7d61ad991ca5dc420dbacf991b3321c23b4f3" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;braces p&lt;/code&gt; parses &lt;code&gt;p&lt;/code&gt; enclosed in braces ('{' and '}'), returning the value of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサ &lt;code&gt;braces p&lt;/code&gt; パース &lt;code&gt;p&lt;/code&gt; 括弧で囲まれた（「{」と「}」）の値戻り &lt;code&gt;p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b05508eef449259c3da847ba5b8908b337a57ef" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;brackets p&lt;/code&gt; parses &lt;code&gt;p&lt;/code&gt; enclosed in brackets ('[' and ']'), returning the value of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサ &lt;code&gt;brackets p&lt;/code&gt; パース &lt;code&gt;p&lt;/code&gt; 閉鎖性カッコ内（「[」と「]」）の値戻り &lt;code&gt;p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d6f01f6fd61a8c0bb200b1113e901859689cb574" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;colon&lt;/code&gt; parses the character ':' and skips any trailing white space. Returns the string &quot;:&quot;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;colon&lt;/code&gt; は文字「：」を解析し、末尾の空白をスキップします。文字列「：」を返します。</target>
        </trans-unit>
        <trans-unit id="906be22b3485d6af088c4586447a23867836a78c" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;comma&lt;/code&gt; parses the character ',' and skips any trailing white space. Returns the string &quot;,&quot;.</source>
          <target state="translated">語彙素パーサーの &lt;code&gt;comma&lt;/code&gt; は文字「、」を解析し、末尾の空白をスキップします。文字列「、」を返します。</target>
        </trans-unit>
        <trans-unit id="8fa5d226b4524a8f2606ab3fb7b4e7c3152035a2" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;commaSep p&lt;/code&gt; parses &lt;em&gt;zero&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt; separated by &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:comma&quot;&gt;comma&lt;/a&gt;&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;commaSep p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:comma&quot;&gt;comma&lt;/a&gt;&lt;/code&gt; 区切られた&lt;em&gt;0&lt;/em&gt;個以上の &lt;code&gt;p&lt;/code&gt; の出現を解析します。 &lt;code&gt;p&lt;/code&gt; が返す値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="8f0383ea5ef26d7b618c08586a182319e06433ed" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;commaSep p&lt;/code&gt; parses &lt;em&gt;zero&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt; separated by &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:comma&quot;&gt;comma&lt;/a&gt;&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;commaSep p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:comma&quot;&gt;comma&lt;/a&gt;&lt;/code&gt; 区切られた&lt;em&gt;0&lt;/em&gt;個以上の &lt;code&gt;p&lt;/code&gt; の出現を解析します。 &lt;code&gt;p&lt;/code&gt; が返す値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="3b0f682fe5ecece9ab074d848ae3efde0075785f" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;commaSep1 p&lt;/code&gt; parses &lt;em&gt;one&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt; separated by &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:comma&quot;&gt;comma&lt;/a&gt;&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;commaSep1 p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:comma&quot;&gt;comma&lt;/a&gt;&lt;/code&gt; 区切られた&lt;em&gt;1&lt;/em&gt;つ以上の &lt;code&gt;p&lt;/code&gt; の出現を解析します。 &lt;code&gt;p&lt;/code&gt; が返す値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="1527e1889e4d9db5a2a2a401431c80198a7ad8ed" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;commaSep1 p&lt;/code&gt; parses &lt;em&gt;one&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt; separated by &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:comma&quot;&gt;comma&lt;/a&gt;&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;commaSep1 p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:comma&quot;&gt;comma&lt;/a&gt;&lt;/code&gt; 区切られた&lt;em&gt;1&lt;/em&gt;つ以上の &lt;code&gt;p&lt;/code&gt; の出現を解析します。 &lt;code&gt;p&lt;/code&gt; が返す値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="a06e52077d648a539ce51fcce5464792168d2116" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;dot&lt;/code&gt; parses the character '.' and skips any trailing white space. Returns the string &quot;.&quot;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;dot&lt;/code&gt; は文字「。」を解析します 末尾の空白はスキップします。文字列「。」を返します。</target>
        </trans-unit>
        <trans-unit id="5c625c13a8a270d65b20ce25a79ef5d1e88e0c01" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;parens p&lt;/code&gt; parses &lt;code&gt;p&lt;/code&gt; enclosed in parenthesis, returning the value of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサ &lt;code&gt;parens p&lt;/code&gt; パース &lt;code&gt;p&lt;/code&gt; の値を返す、括弧で囲まれ &lt;code&gt;p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09775ca66fe1940d621ab83bb334774f062130fc" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;semiSep p&lt;/code&gt; parses &lt;em&gt;zero&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt; separated by &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:semi&quot;&gt;semi&lt;/a&gt;&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;semiSep p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:semi&quot;&gt;semi&lt;/a&gt;&lt;/code&gt; で区切られた &lt;code&gt;p&lt;/code&gt; 個の&lt;em&gt;0&lt;/em&gt;回以上の出現を解析し&lt;em&gt;ます&lt;/em&gt;。 &lt;code&gt;p&lt;/code&gt; が返す値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="1fde367cf1acc73ec6e48dd7f44d104f7a0066d3" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;semiSep p&lt;/code&gt; parses &lt;em&gt;zero&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt; separated by &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:semi&quot;&gt;semi&lt;/a&gt;&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;semiSep p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:semi&quot;&gt;semi&lt;/a&gt;&lt;/code&gt; で区切られた &lt;code&gt;p&lt;/code&gt; 個の&lt;em&gt;0&lt;/em&gt;回以上の出現を解析し&lt;em&gt;ます&lt;/em&gt;。 &lt;code&gt;p&lt;/code&gt; が返す値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="a56558ecec4b9b3865d84f3538f50974882790bc" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;semiSep1 p&lt;/code&gt; parses &lt;em&gt;one&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt; separated by &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:semi&quot;&gt;semi&lt;/a&gt;&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;semiSep1 p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:semi&quot;&gt;semi&lt;/a&gt;&lt;/code&gt; で区切られた &lt;code&gt;p&lt;/code&gt; の&lt;em&gt;1&lt;/em&gt;つ以上のオカレンスを解析します。 &lt;code&gt;p&lt;/code&gt; が返す値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="f226487b67eb839b478eae118624bbb75f343207" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;semiSep1 p&lt;/code&gt; parses &lt;em&gt;one&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt; separated by &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:semi&quot;&gt;semi&lt;/a&gt;&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;semiSep1 p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:semi&quot;&gt;semi&lt;/a&gt;&lt;/code&gt; で区切られた &lt;code&gt;p&lt;/code&gt; の&lt;em&gt;1&lt;/em&gt;つ以上のオカレンスを解析します。 &lt;code&gt;p&lt;/code&gt; が返す値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="71ba5db9cf8b9d035392754516d0f0d298c6b31e" translate="yes" xml:space="preserve">
          <source>Lexeme parser &lt;code&gt;symbol s&lt;/code&gt; parses &lt;code&gt;&lt;a href=&quot;text-parsec-char#v:string&quot;&gt;string&lt;/a&gt;&lt;/code&gt;&lt;code&gt;s&lt;/code&gt; and skips trailing white space.</source>
          <target state="translated">語彙素パーサー &lt;code&gt;symbol s&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;text-parsec-char#v:string&quot;&gt;string&lt;/a&gt;&lt;/code&gt; &lt;code&gt;s&lt;/code&gt; を解析し、末尾の空白をスキップします。</target>
        </trans-unit>
        <trans-unit id="1cae647ca5dc3e8507fd8b9a75e7e569807d779e" translate="yes" xml:space="preserve">
          <source>Lexeme parser |semi| parses the character ';' and skips any trailing white space. Returns the string &quot;;&quot;.</source>
          <target state="translated">Lexeme parser |semi| は ';' を解析し、末尾の空白をスキップします。文字列 &quot;;&quot; を返します。</target>
        </trans-unit>
        <trans-unit id="1a85bb6bdbe773df37163bd57f9f3cbce90e0583" translate="yes" xml:space="preserve">
          <source>Lexical type variables may be alpha-renamed freely, without changing the program.</source>
          <target state="translated">レキシカル型変数は、プログラムを変更することなく自由にアルファリネームすることができます。</target>
        </trans-unit>
        <trans-unit id="acfd3fae981ce83b9a78f156f575113d42a472b8" translate="yes" xml:space="preserve">
          <source>LiberalTypeSynonyms</source>
          <target state="translated">LiberalTypeSynonyms</target>
        </trans-unit>
        <trans-unit id="150017bb5be516efb13183274c04717c3913f12c" translate="yes" xml:space="preserve">
          <source>Library functions</source>
          <target state="translated">図書館機能</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">License</target>
        </trans-unit>
        <trans-unit id="8f40b70f72540e03b88378ef3507f6d84f38b8e2" translate="yes" xml:space="preserve">
          <source>Licensed under a BSD-style license (see top of the page).</source>
          <target state="translated">BSDスタイルのライセンスでライセンスされています(ページ上部参照)。</target>
        </trans-unit>
        <trans-unit id="7c040e16c5971eb5c4f65496f4403ed7de94405d" translate="yes" xml:space="preserve">
          <source>Licensed under the Glasgow Haskell Compiler License.</source>
          <target state="translated">Glasgow Haskellコンパイラライセンスの下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="8d33f31baff91c27917dcfcd7222cc394cee13fd" translate="yes" xml:space="preserve">
          <source>Lifetime</source>
          <target state="translated">Lifetime</target>
        </trans-unit>
        <trans-unit id="efd0976a0ad531b6453a3782b50f0f3ff5363b1e" translate="yes" xml:space="preserve">
          <source>Lift</source>
          <target state="translated">Lift</target>
        </trans-unit>
        <trans-unit id="69bd6ed6019d0841a40b7376c8be9d0e00a15a4a" translate="yes" xml:space="preserve">
          <source>Lift &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; functions through the type constructor.</source>
          <target state="translated">型コンストラクタを通じて &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="28a4c297cb17de5189cf531fb8cff2247893efd7" translate="yes" xml:space="preserve">
          <source>Lift a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">持ち上げ &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="b11a06f969ecc3525b7fd7eb5bd850c961745651" translate="yes" xml:space="preserve">
          <source>Lift a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">持ち上げ &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="77ad9a4be8766f89114fe4a089c39d2885ba04cb" translate="yes" xml:space="preserve">
          <source>Lift a &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; function through the type constructor.</source>
          <target state="translated">型コンストラクタを通じて &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="57350b28e0ae1579635d1c5f5bfee71f12dc8af6" translate="yes" xml:space="preserve">
          <source>Lift a &lt;code&gt;callCC&lt;/code&gt; operation to the new monad.</source>
          <target state="translated">&lt;code&gt;callCC&lt;/code&gt; 操作を新しいモナドに持ち上げます。</target>
        </trans-unit>
        <trans-unit id="e69559f09d367723fe7abf1f50e359886a0e8931" translate="yes" xml:space="preserve">
          <source>Lift a &lt;code&gt;catchE&lt;/code&gt; operation to the new monad.</source>
          <target state="translated">&lt;code&gt;catchE&lt;/code&gt; 操作を新しいモナドに持ち上げます。</target>
        </trans-unit>
        <trans-unit id="9c3605ce5319733a98246b58994a1c7a3b22a3dc" translate="yes" xml:space="preserve">
          <source>Lift a &lt;code&gt;listen&lt;/code&gt; operation to the new monad.</source>
          <target state="translated">新しいモナドへの &lt;code&gt;listen&lt;/code&gt; 操作を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="898de1bff1c29cda9790c0fed24117c87b00c641" translate="yes" xml:space="preserve">
          <source>Lift a &lt;code&gt;pass&lt;/code&gt; operation to the new monad.</source>
          <target state="translated">&lt;code&gt;pass&lt;/code&gt; 操作を新しいモナドに持ち上げます。</target>
        </trans-unit>
        <trans-unit id="0d0feda6a4614b667af6e9eb00a72f0992d75a5c" translate="yes" xml:space="preserve">
          <source>Lift a IO operation</source>
          <target state="translated">IO操作を解除する</target>
        </trans-unit>
        <trans-unit id="b9039d9d95aa49349189305fdf5c0f23de8d10bb" translate="yes" xml:space="preserve">
          <source>Lift a binary function to actions.</source>
          <target state="translated">2進関数をアクションにリフトします。</target>
        </trans-unit>
        <trans-unit id="4fdb7ea3c747b4ff83d8fd93dbad25981db51967" translate="yes" xml:space="preserve">
          <source>Lift a computation from the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドから計算を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="6fb4cfd1308d8bc1fc2b8075cc399da8778ef019" translate="yes" xml:space="preserve">
          <source>Lift a computation from the argument monad to the constructed monad.</source>
          <target state="translated">引数モナドから構築されたモナドへ計算をリフトします。</target>
        </trans-unit>
        <trans-unit id="755e2bbeb43333564e4df3721333f2c5cb05f108" translate="yes" xml:space="preserve">
          <source>Lift a function to actions. This function may be used as a value for &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; in a &lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">関数をアクションに持ち上げます。この関数は、 &lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; インスタンスの &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; の値として使用できます。</target>
        </trans-unit>
        <trans-unit id="65540f13b21961e922b1b042f1d167b1c9a2abf6" translate="yes" xml:space="preserve">
          <source>Lift a function to actions. This function may be used as a value for &lt;code&gt;&lt;a href=&quot;ghc-base#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; in a &lt;code&gt;&lt;a href=&quot;ghc-base#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">関数をアクションに持ち上げます。この関数は、 &lt;code&gt;&lt;a href=&quot;ghc-base#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; インスタンスの &lt;code&gt;&lt;a href=&quot;ghc-base#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; の値として使用できます。</target>
        </trans-unit>
        <trans-unit id="e3306c8d28d88915bd946a2603ec45578ecd138e" translate="yes" xml:space="preserve">
          <source>Lift a function to an arrow.</source>
          <target state="translated">機能を矢印に持ち上げる。</target>
        </trans-unit>
        <trans-unit id="34e1005428b4115e3bdc892cb79d78caeaad7d73" translate="yes" xml:space="preserve">
          <source>Lift a precedence-insensitive &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#t:ReadP&quot;&gt;ReadP&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readprec#t:ReadPrec&quot;&gt;ReadPrec&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">優先度に依存しない &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#t:ReadP&quot;&gt;ReadP&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readprec#t:ReadPrec&quot;&gt;ReadPrec&lt;/a&gt;&lt;/code&gt; に持ち上げます。</target>
        </trans-unit>
        <trans-unit id="5a927363c52ab42f8173b13c6038ee007ad8a17e" translate="yes" xml:space="preserve">
          <source>Lift a semigroup into &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; forming a &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; according to &lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;: &quot;Any semigroup &lt;code&gt;S&lt;/code&gt; may be turned into a monoid simply by adjoining an element &lt;code&gt;e&lt;/code&gt; not in &lt;code&gt;S&lt;/code&gt; and defining &lt;code&gt;e*e = e&lt;/code&gt; and &lt;code&gt;e*s = s = s*e&lt;/code&gt; for all &lt;code&gt;s &amp;isin; S&lt;/code&gt;.&quot;</source>
          <target state="translated">半群を持ち上げ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 形成 &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に従って&lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;：「任意の半群の &lt;code&gt;S&lt;/code&gt; は、単に要素の隣接によってモノイドに変えることができる &lt;code&gt;e&lt;/code&gt; していない &lt;code&gt;S&lt;/code&gt; と定義 &lt;code&gt;e*e = e&lt;/code&gt; そして、すべて &lt;code&gt;s &amp;isin; S&lt;/code&gt; &lt;code&gt;e*s = s = s*e&lt;/code&gt; です。」</target>
        </trans-unit>
        <trans-unit id="9bff245d149ddf1ae6d16d98ebd9221f1ea4340f" translate="yes" xml:space="preserve">
          <source>Lift a semigroup into &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; forming a &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; according to &lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;: &quot;Any semigroup &lt;code&gt;S&lt;/code&gt; may be turned into a monoid simply by adjoining an element &lt;code&gt;e&lt;/code&gt; not in &lt;code&gt;S&lt;/code&gt; and defining &lt;code&gt;e*e = e&lt;/code&gt; and &lt;code&gt;e*s = s = s*e&lt;/code&gt; for all &lt;code&gt;s &amp;isin; S&lt;/code&gt;.&quot;</source>
          <target state="translated">Lift a semigroup into &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; forming a &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; according to &lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;: &quot;Any semigroup &lt;code&gt;S&lt;/code&gt; may be turned into a monoid simply by adjoining an element &lt;code&gt;e&lt;/code&gt; not in &lt;code&gt;S&lt;/code&gt; and defining &lt;code&gt;e*e = e&lt;/code&gt; and &lt;code&gt;e*s = s = s*e&lt;/code&gt; for all &lt;code&gt;s &amp;isin; S&lt;/code&gt; .&quot;</target>
        </trans-unit>
        <trans-unit id="a1f4ae6d40699215f86ae7acc6dbd638b4d640c8" translate="yes" xml:space="preserve">
          <source>Lift a semigroup into &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; forming a &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; according to &lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;: &quot;Any semigroup &lt;code&gt;S&lt;/code&gt; may be turned into a monoid simply by adjoining an element &lt;code&gt;e&lt;/code&gt; not in &lt;code&gt;S&lt;/code&gt; and defining &lt;code&gt;e*e = e&lt;/code&gt; and &lt;code&gt;e*s = s = s*e&lt;/code&gt; for all &lt;code&gt;s &amp;isin; S&lt;/code&gt;.&quot;</source>
          <target state="translated">半群を持ち上げ &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 形成 &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に従って&lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;：「任意の半群の &lt;code&gt;S&lt;/code&gt; は、単に要素の隣接によってモノイドに変えることができる &lt;code&gt;e&lt;/code&gt; していない &lt;code&gt;S&lt;/code&gt; と定義 &lt;code&gt;e*e = e&lt;/code&gt; そして、すべて &lt;code&gt;s &amp;isin; S&lt;/code&gt; &lt;code&gt;e*s = s = s*e&lt;/code&gt; です。」</target>
        </trans-unit>
        <trans-unit id="ef6d5d2890f728fc0dec424db983bea6034793d1" translate="yes" xml:space="preserve">
          <source>Lift a semigroup into &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; forming a &lt;code&gt;&lt;a href=&quot;ghc-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; according to &lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;: &quot;Any semigroup &lt;code&gt;S&lt;/code&gt; may be turned into a monoid simply by adjoining an element &lt;code&gt;e&lt;/code&gt; not in &lt;code&gt;S&lt;/code&gt; and defining &lt;code&gt;e*e = e&lt;/code&gt; and &lt;code&gt;e*s = s = s*e&lt;/code&gt; for all &lt;code&gt;s &amp;isin; S&lt;/code&gt;.&quot;</source>
          <target state="translated">半群を持ち上げ &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 形成 &lt;code&gt;&lt;a href=&quot;ghc-base#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に従って&lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;：「任意の半群の &lt;code&gt;S&lt;/code&gt; は、単に要素の隣接によってモノイドに変えることができる &lt;code&gt;e&lt;/code&gt; していない &lt;code&gt;S&lt;/code&gt; と定義 &lt;code&gt;e*e = e&lt;/code&gt; そして、すべて &lt;code&gt;s &amp;isin; S&lt;/code&gt; &lt;code&gt;e*s = s = s*e&lt;/code&gt; です。」</target>
        </trans-unit>
        <trans-unit id="f3a10c09a2df5ee40736eca77b005327c3f502e1" translate="yes" xml:space="preserve">
          <source>Lift a semigroup into &lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; forming a &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; according to &lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;: &quot;Any semigroup &lt;code&gt;S&lt;/code&gt; may be turned into a monoid simply by adjoining an element &lt;code&gt;e&lt;/code&gt; not in &lt;code&gt;S&lt;/code&gt; and defining &lt;code&gt;e*e = e&lt;/code&gt; and &lt;code&gt;e*s = s = s*e&lt;/code&gt; for all &lt;code&gt;s &amp;isin; S&lt;/code&gt;.&quot;</source>
          <target state="translated">半群を持ち上げ &lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 形成 &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に従って&lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;：「任意の半群の &lt;code&gt;S&lt;/code&gt; は、単に要素の隣接によってモノイドに変えることができる &lt;code&gt;e&lt;/code&gt; していない &lt;code&gt;S&lt;/code&gt; と定義 &lt;code&gt;e*e = e&lt;/code&gt; そして、すべて &lt;code&gt;s &amp;isin; S&lt;/code&gt; &lt;code&gt;e*s = s = s*e&lt;/code&gt; です。」</target>
        </trans-unit>
        <trans-unit id="55317bb47900a6c531bb57912283090eb69391dc" translate="yes" xml:space="preserve">
          <source>Lift a semigroup into &lt;code&gt;&lt;a href=&quot;prelude#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; forming a &lt;code&gt;&lt;a href=&quot;prelude#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; according to &lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;: &quot;Any semigroup &lt;code&gt;S&lt;/code&gt; may be turned into a monoid simply by adjoining an element &lt;code&gt;e&lt;/code&gt; not in &lt;code&gt;S&lt;/code&gt; and defining &lt;code&gt;e*e = e&lt;/code&gt; and &lt;code&gt;e*s = s = s*e&lt;/code&gt; for all &lt;code&gt;s &amp;isin; S&lt;/code&gt;.&quot;</source>
          <target state="translated">半群を持ち上げ &lt;code&gt;&lt;a href=&quot;prelude#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 形成 &lt;code&gt;&lt;a href=&quot;prelude#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; に従って&lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;http://en.wikipedia.org/wiki/Monoid&lt;/a&gt;：「任意の半群の &lt;code&gt;S&lt;/code&gt; は、単に要素の隣接によってモノイドに変えることができる &lt;code&gt;e&lt;/code&gt; していない &lt;code&gt;S&lt;/code&gt; と定義 &lt;code&gt;e*e = e&lt;/code&gt; そして、すべて &lt;code&gt;s &amp;isin; S&lt;/code&gt; &lt;code&gt;e*s = s = s*e&lt;/code&gt; です。」</target>
        </trans-unit>
        <trans-unit id="b18efdb14898a61cd6bf3e53b88908b07c899338" translate="yes" xml:space="preserve">
          <source>Lift a ternary function to actions.</source>
          <target state="translated">三項関数をアクションに持ち上げる。</target>
        </trans-unit>
        <trans-unit id="1c6cfea669eba5bd426957f891847f721512f382" translate="yes" xml:space="preserve">
          <source>Lift a unary operation to the new monad.</source>
          <target state="translated">単項演算を新しいモナドに持ち上げる。</target>
        </trans-unit>
        <trans-unit id="46b3af654500c45d1bbe42552320fbf9acf7d7ab" translate="yes" xml:space="preserve">
          <source>Lift a value.</source>
          <target state="translated">値を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="1a088c3e62edefbbd612558fe95e26c16929b0cf" translate="yes" xml:space="preserve">
          <source>Lift an IO operation</source>
          <target state="translated">IO操作を解除する</target>
        </trans-unit>
        <trans-unit id="f3531bf1113fe8b33ad38c7a7731990c8b025668" translate="yes" xml:space="preserve">
          <source>Lift an equality test through the type constructor.</source>
          <target state="translated">型のコンストラクタを介して等質性テストを解除します。</target>
        </trans-unit>
        <trans-unit id="d59a4331fe2b228402b5f804879977d4d2bdbdf8" translate="yes" xml:space="preserve">
          <source>Lift equality tests through the type constructor.</source>
          <target state="translated">型のコンストラクタを使って等質性テストを解除します。</target>
        </trans-unit>
        <trans-unit id="ba141aacd2971ab64cd183f644499403aa27baf6" translate="yes" xml:space="preserve">
          <source>Lift the standard &lt;code&gt;(&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;)&lt;/code&gt; function through the type constructor.</source>
          <target state="translated">型コンストラクタを通じて標準 &lt;code&gt;(&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;)&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="2a5c11e919022ea17cf3e50538bb0b39ab267ca8" translate="yes" xml:space="preserve">
          <source>Lift the standard &lt;code&gt;&lt;a href=&quot;control-deepseq#v:rnf&quot;&gt;rnf&lt;/a&gt;&lt;/code&gt; function through the type constructor.</source>
          <target state="translated">型コンストラクタを通じて標準の &lt;code&gt;&lt;a href=&quot;control-deepseq#v:rnf&quot;&gt;rnf&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="a22f0b12039df26e38242ef4e1b27fd9a2aca7c5" translate="yes" xml:space="preserve">
          <source>Lift the standard &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; function through the type constructor.</source>
          <target state="translated">型コンストラクタを通じて標準の &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="cef4fc8589a89ebe3dab70e8896098b35542b102" translate="yes" xml:space="preserve">
          <source>Lift the standard &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; functions through the type constructor.</source>
          <target state="translated">型コンストラクタを使用して、標準の &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 関数と &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="81beb3415733b0127f91ccfbc68d75371f1bc17c" translate="yes" xml:space="preserve">
          <source>Lift the standard &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; function through the type constructor.</source>
          <target state="translated">型コンストラクターを通じて標準の &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="faeb2e4ce6194f3ee4155e1efd45893a2e939961" translate="yes" xml:space="preserve">
          <source>Lift the standard &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; functions through the type constructor.</source>
          <target state="translated">型コンストラクタを使用して、標準の &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="053aeb1412e2444b0b1a20409a35603dc721e057" translate="yes" xml:space="preserve">
          <source>Lift the standard &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; function through the type constructor.</source>
          <target state="translated">型コンストラクタを使用して、標準の &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="408cf02de66cc6b705154fd2c661de60e644f5b6" translate="yes" xml:space="preserve">
          <source>Lift the standard &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; functions through the type constructor.</source>
          <target state="translated">型コンストラクタを通じて標準の &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 関数と &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="3004afec47fb6a84cae4d9e49047dab3af9ecdbb" translate="yes" xml:space="preserve">
          <source>Lift the standard &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; function through the type constructor.</source>
          <target state="translated">型コンストラクタを通じて標準の &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 関数を持ち上げます。</target>
        </trans-unit>
        <trans-unit id="f4fbea4d9b31cd33d7694749c6476d3a1af9a3ab" translate="yes" xml:space="preserve">
          <source>Lifted product of functors.</source>
          <target state="translated">ファンクタのリフトド積。</target>
        </trans-unit>
        <trans-unit id="3b10925916ee44f531f851144318a3b5ce0f20aa" translate="yes" xml:space="preserve">
          <source>Lifted sum of functors.</source>
          <target state="translated">ファンクタの総和をリフトしたもの。</target>
        </trans-unit>
        <trans-unit id="babef654d32e20b79299fbdb4e3acce1da353228" translate="yes" xml:space="preserve">
          <source>Lifted, heterogeneous equality. By lifted, we mean that it can be bogus (deferred type error). By heterogeneous, the two types &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; might have different kinds. Because &lt;code&gt;~~&lt;/code&gt; can appear unexpectedly in error messages to users who do not care about the difference between heterogeneous equality &lt;code&gt;~~&lt;/code&gt; and homogeneous equality &lt;code&gt;~&lt;/code&gt;, this is printed as &lt;code&gt;~&lt;/code&gt; unless &lt;code&gt;-fprint-equality-relations&lt;/code&gt; is set.</source>
          <target state="translated">リフトされた異種の平等。持ち上げるとは、それが偽物（据え置き型エラー）になる可能性があることを意味します。異種混合により、2つのタイプ &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; は異なる種類を持つ場合があります。 &lt;code&gt;~~&lt;/code&gt; は、異種の等価性 &lt;code&gt;~~&lt;/code&gt; と均一の等価性 &lt;code&gt;~&lt;/code&gt; の違いを気にしないユーザーへのエラーメッセージに予期せず表示される可能性があるため、 &lt;code&gt;-fprint-equality-relations&lt;/code&gt; が設定されていない限り、これは &lt;code&gt;~&lt;/code&gt; として出力されます。</target>
        </trans-unit>
        <trans-unit id="f4bfbdd16cc189cc5129a0d8ec953d2317a224b0" translate="yes" xml:space="preserve">
          <source>LiftedRep</source>
          <target state="translated">LiftedRep</target>
        </trans-unit>
        <trans-unit id="12c2f75c3b26c4edac3b33e5c51db3b8e36394c9" translate="yes" xml:space="preserve">
          <source>Lifting an applicative</source>
          <target state="translated">アプリケータを持ち上げる</target>
        </trans-unit>
        <trans-unit id="e2c3b2b741daea57fdd436a0412a6ba2f18b6f68" translate="yes" xml:space="preserve">
          <source>Lifting of the &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; class to binary type constructors.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; クラスのバイナリ型コンストラクタへの引き上げ。</target>
        </trans-unit>
        <trans-unit id="44895603faea79f05cd37173f6a4597b6953146e" translate="yes" xml:space="preserve">
          <source>Lifting of the &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; class to unary type constructors.</source>
          <target state="translated">リフティング &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; 単項型コンストラクタへのクラス。</target>
        </trans-unit>
        <trans-unit id="e0a82371cc12bbf7738745a43b619731d3611950" translate="yes" xml:space="preserve">
          <source>Lifting of the &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; class to binary type constructors.</source>
          <target state="translated">リフティング &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; バイナリ型のコンストラクタへのクラス。</target>
        </trans-unit>
        <trans-unit id="7d9b6f54af0f5e9694ecfd7ee7add7a2cc652087" translate="yes" xml:space="preserve">
          <source>Lifting of the &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; class to unary type constructors.</source>
          <target state="translated">リフティング &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; 単項型コンストラクタへのクラス。</target>
        </trans-unit>
        <trans-unit id="ae55fc1bef97cadc36b9661bf1e25f7f4c7e352d" translate="yes" xml:space="preserve">
          <source>Lifting of the &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; class to binary type constructors.</source>
          <target state="translated">リフティング &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; バイナリ型のコンストラクタへのクラス。</target>
        </trans-unit>
        <trans-unit id="86c660f1a1c56586cead2935de6c64b3ef5324c5" translate="yes" xml:space="preserve">
          <source>Lifting of the &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; class to unary type constructors.</source>
          <target state="translated">リフティング &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; 単項型コンストラクタへのクラス。</target>
        </trans-unit>
        <trans-unit id="b2e9206d787342e53328d0f894bfa7fc5940af4a" translate="yes" xml:space="preserve">
          <source>Lifting of the &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; class to binary type constructors.</source>
          <target state="translated">リフティング &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; バイナリ型のコンストラクタへのクラス。</target>
        </trans-unit>
        <trans-unit id="d56ab180af5b8c6b67cd1de105953549f78976c7" translate="yes" xml:space="preserve">
          <source>Lifting of the &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; class to unary type constructors.</source>
          <target state="translated">リフティング &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; 単項型コンストラクタへのクラス。</target>
        </trans-unit>
        <trans-unit id="ef79daca18c86fc7acb004897eb034a72769183c" translate="yes" xml:space="preserve">
          <source>Lifting other operations</source>
          <target state="translated">リフティングその他の作業</target>
        </trans-unit>
        <trans-unit id="70b315b20d2f0763f381b07677fe5fcdd427769f" translate="yes" xml:space="preserve">
          <source>Liftings of Prelude classes</source>
          <target state="translated">プレリュードクラスのリフティング</target>
        </trans-unit>
        <trans-unit id="bbd32f90f691094d13a835f9d8bc070165c84480" translate="yes" xml:space="preserve">
          <source>Liftings of the &lt;code&gt;NFData&lt;/code&gt; class</source>
          <target state="translated">NFData クラスの &lt;code&gt;NFData&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf36ebf7919530abaa3b7a585d3a7f483fb9666d" translate="yes" xml:space="preserve">
          <source>Liftings of the Prelude classes &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; to unary and binary type constructors.</source>
          <target state="translated">Preludeクラスの &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; を単項およびバイナリ型のコンストラクターにリフティングします。</target>
        </trans-unit>
        <trans-unit id="b9662e4165cf70bc0656fd852ce8badb4bccd421" translate="yes" xml:space="preserve">
          <source>Lifts an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; into any &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt;.</source>
          <target state="translated">リフト &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; いずれかに &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e98068ced479359302008df12305e0fa6226acf9" translate="yes" xml:space="preserve">
          <source>Lifts an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; into any &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt;.</source>
          <target state="translated">リフト &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; いずれかに &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="533e09a9bf33161ccd152904f791f9b0ccd0dfa2" translate="yes" xml:space="preserve">
          <source>Lifts an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; into any &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt;.</source>
          <target state="translated">Lifts an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; into any &lt;code&gt;&lt;a href=&quot;control-monad-error-class#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3f90827cfa26ca646d28cee985138fed19cc82be" translate="yes" xml:space="preserve">
          <source>Lifts an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; into any &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt;.</source>
          <target state="translated">Lifts an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt; e&lt;/code&gt; into any &lt;code&gt;&lt;a href=&quot;control-monad-except#t:MonadError&quot;&gt;MonadError&lt;/a&gt; e&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4ea5fc5a99bc5f43e32f54299e4add38a5941b11" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#ghci-cmd-:set&quot;&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/a&gt;, but options set with &lt;a href=&quot;#ghci-cmd-:seti&quot;&gt;&lt;code&gt;:seti&lt;/code&gt;&lt;/a&gt; affect only expressions and commands typed at the prompt, and not modules loaded with &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt; (in contrast, options set with &lt;a href=&quot;#ghci-cmd-:set&quot;&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/a&gt; apply everywhere). See &lt;a href=&quot;#ghci-interactive-options&quot;&gt;Setting options for interactive evaluation only&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:set&quot;&gt; &lt;code&gt;:set&lt;/code&gt; &lt;/a&gt;と同様ですが、&lt;a href=&quot;#ghci-cmd-:seti&quot;&gt; &lt;code&gt;:seti&lt;/code&gt; で&lt;/a&gt;設定されたオプションは、プロンプトで入力された式とコマンドにのみ影響し、&lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; で&lt;/a&gt;読み込まれたモジュールには影響しません（対照的に、&lt;a href=&quot;#ghci-cmd-:set&quot;&gt; &lt;code&gt;:set&lt;/code&gt; で設定された&lt;/a&gt;オプションはどこにでも適用されます）。&lt;a href=&quot;#ghci-interactive-options&quot;&gt;インタラクティブ評価のみのオプションの設定を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d3eb1542266aa6e78b551f4a66f99dca63eb84c5" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:replicateM&quot;&gt;replicateM&lt;/a&gt;&lt;/code&gt;, but discards the result.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:replicateM&quot;&gt;replicateM&lt;/a&gt;&lt;/code&gt; と同様ですが、結果を破棄します。</target>
        </trans-unit>
        <trans-unit id="3ee688d5e3686106a78a8c11143028e7c7c2d867" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:openTempFile&quot;&gt;openTempFile&lt;/a&gt;&lt;/code&gt;, but opens the file in binary mode. See &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; for more comments.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:openTempFile&quot;&gt;openTempFile&lt;/a&gt;&lt;/code&gt; と似ていますが、ファイルをバイナリモードで開きます。その他のコメントについては、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="171756990cca268601ff47e149f013f10d1f0b1d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:replicateM&quot;&gt;replicateM&lt;/a&gt;&lt;/code&gt;, but discards the result.</source>
          <target state="translated">Like &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:replicateM&quot;&gt;replicateM&lt;/a&gt;&lt;/code&gt; , but discards the result.</target>
        </trans-unit>
        <trans-unit id="3e5d1ae0b75edd09252cda3ae684b700669426cc" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:openTempFile&quot;&gt;openTempFile&lt;/a&gt;&lt;/code&gt;, but opens the file in binary mode. See &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; for more comments.</source>
          <target state="translated">Like &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:openTempFile&quot;&gt;openTempFile&lt;/a&gt;&lt;/code&gt; , but opens the file in binary mode. See &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; for more comments.</target>
        </trans-unit>
        <trans-unit id="e95f6be3cd220d7c265e9ff2d6eb81b829a783d7" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;, but lets you specify on which capability the thread should run. Unlike a &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; thread, a thread created by &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; will stay on the same capability for its entire lifetime (&lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; threads can migrate between capabilities according to the scheduling policy). &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; is useful for overriding the scheduling policy when you know in advance how best to distribute the threads.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; ができますが、スレッドが実行すべき機能に指定することができます。 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; スレッドとは異なり、forkOnによって作成されたスレッドは、 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; 期間全体にわたって同じ機能を維持します（ &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; スレッドは、スケジューリングポリシーに従って機能間を移行できます）。 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; は、スレッドの最適な配布方法が事前にわかっている場合に、スケジューリングポリシーをオーバーライドするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="315f04774b37e903ccef1fd017cf5e6c8fb19cad" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;, but the child thread is passed a function that can be used to unmask asynchronous exceptions. This function is typically used in the following way</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; と同様ですが、子スレッドには非同期例外のマスクを解除するために使用できる関数が渡されます。この関数は通常、次のように使用されます</target>
        </trans-unit>
        <trans-unit id="26af205331dd385348a903a75489cae5ac1bc8a2" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;, this sparks off a new thread to run the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computation passed as the first argument, and returns the &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; of the newly created thread.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; と同様に、これは新しいスレッドを開始し、最初の引数として渡された &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 計算を実行し、新しく作成されたスレッドの &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e51a2d5c390f6fe2c3f06d7a141e356abf36b260" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt;, but the child thread is a bound thread, as with &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOS&quot;&gt;forkOS&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt; と似ていますが、子スレッドはforkOSと同様にバインドされたスレッド &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOS&quot;&gt;forkOS&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee5a0feb98209de5e446543c7ee38359b8a7b02e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt;, but the child thread is pinned to the given CPU, as with &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt; が、子スレッドがと同様に、特定のCPUに固定され &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="894deb520e4932d4ccd6a7678d392f4657ad389a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:modifyMVar&quot;&gt;modifyMVar&lt;/a&gt;&lt;/code&gt;, but the &lt;code&gt;IO&lt;/code&gt; action in the second argument is executed with asynchronous exceptions masked.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:modifyMVar&quot;&gt;modifyMVar&lt;/a&gt;&lt;/code&gt; と同様ですが、2番目の引数の &lt;code&gt;IO&lt;/code&gt; アクションは、非同期例外をマスクして実行されます。</target>
        </trans-unit>
        <trans-unit id="b23d745348276319c0475e801e641228506e2414" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:modifyMVar_&quot;&gt;modifyMVar_&lt;/a&gt;&lt;/code&gt;, but the &lt;code&gt;IO&lt;/code&gt; action in the second argument is executed with asynchronous exceptions masked.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:modifyMVar_&quot;&gt;modifyMVar_&lt;/a&gt;&lt;/code&gt; と同様ですが、2番目の引数の &lt;code&gt;IO&lt;/code&gt; アクションは、非同期例外をマスクして実行されます。</target>
        </trans-unit>
        <trans-unit id="cbaf69411b6e48d7f755fce6152d35bbf2f5117d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:withMVar&quot;&gt;withMVar&lt;/a&gt;&lt;/code&gt;, but the &lt;code&gt;IO&lt;/code&gt; action in the second argument is executed with asynchronous exceptions masked.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:withMVar&quot;&gt;withMVar&lt;/a&gt;&lt;/code&gt; と同様ですが、2番目の引数の &lt;code&gt;IO&lt;/code&gt; アクションは、非同期例外をマスクして実行されます。</target>
        </trans-unit>
        <trans-unit id="ddf1b2d2d7438a64e06e7288f0b784895fdb2d25" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#v:modifyTVar-39-&quot;&gt;modifyTVar'&lt;/a&gt;&lt;/code&gt; but the function is a simple state transition that can return a side value which is passed on as the result of the &lt;code&gt;&lt;a href=&quot;control-monad-stm#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#v:modifyTVar-39-&quot;&gt;modifyTVar'&lt;/a&gt;&lt;/code&gt; と同様ですが、関数は、 &lt;code&gt;&lt;a href=&quot;control-monad-stm#t:STM&quot;&gt;STM&lt;/a&gt;&lt;/code&gt; の結果として渡される副次的な値を返すことができる単純な状態遷移です。</target>
        </trans-unit>
        <trans-unit id="c85aa7d7cdb5b9edc279fc62b53487dd9aa084bc" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-exception#v:bracket&quot;&gt;bracket&lt;/a&gt;&lt;/code&gt;, but only performs the final action if there was an exception raised by the in-between computation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-exception#v:bracket&quot;&gt;bracket&lt;/a&gt;&lt;/code&gt; と同様ですが、中間の計算によって例外が発生した場合にのみ最終アクションを実行します。</target>
        </trans-unit>
        <trans-unit id="428edc72ad0acbe121d8494d1d65e4193ca597f0" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-exception#v:finally&quot;&gt;finally&lt;/a&gt;&lt;/code&gt;, but only performs the final action if there was an exception raised by the computation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-exception#v:finally&quot;&gt;finally&lt;/a&gt;&lt;/code&gt; と同様ですが、計算によって発生した例外があった場合にのみ最終アクションを実行します。</target>
        </trans-unit>
        <trans-unit id="58d823ae8a2d7d414c0d42e7b802e79575732ed8" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt;, but does not pass a &lt;code&gt;restore&lt;/code&gt; action to the argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; と似ていますが、引数に &lt;code&gt;restore&lt;/code&gt; アクションを渡しません。</target>
        </trans-unit>
        <trans-unit id="6caf66653eb22b299f52b1089ebb3605f273b200" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt;, but the masked computation is not interruptible (see &lt;a href=&quot;control-exception#interruptible&quot;&gt;Control.Exception&lt;/a&gt;). THIS SHOULD BE USED WITH GREAT CARE, because if a thread executing in &lt;code&gt;&lt;a href=&quot;control-exception#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; blocks for any reason, then the thread (and possibly the program, if this is the main thread) will be unresponsive and unkillable. This function should only be necessary if you need to mask exceptions around an interruptible operation, and you can guarantee that the interruptible operation will only block for a short period of time.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; と似ていますが、マスクされた計算は中断できません（&lt;a href=&quot;control-exception#interruptible&quot;&gt;Control.Exceptionを&lt;/a&gt;参照）。何らかの理由で &lt;code&gt;&lt;a href=&quot;control-exception#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; で実行されているスレッドがブロックすると、スレッド（およびこれがメインスレッドの場合はプログラム）が応答しなくなり、強制終了できないため、これは優れたケアで使用する必要があります。この関数は、割り込み可能な操作に関する例外をマスクする必要がある場合にのみ必要であり、割り込み可能な操作が短時間だけブロックすることを保証できます。</target>
        </trans-unit>
        <trans-unit id="c4d8e2c728be8dff68d64c2a9d4e55d7a3457b7d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-exception#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt;, but does not pass a &lt;code&gt;restore&lt;/code&gt; action to the argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-exception#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; と似ていますが、引数に &lt;code&gt;restore&lt;/code&gt; アクションを渡しません。</target>
        </trans-unit>
        <trans-unit id="d0c2cdb316924ad0cfcfbad4c5a54c0b89f7946f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-monad#v:foldM&quot;&gt;foldM&lt;/a&gt;&lt;/code&gt;, but discards the result.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#v:foldM&quot;&gt;foldM&lt;/a&gt;&lt;/code&gt; と同様ですが、結果を破棄します。</target>
        </trans-unit>
        <trans-unit id="b96efb08972b89ea81a161e65a91a252070d9475" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;control-monad#v:replicateM&quot;&gt;replicateM&lt;/a&gt;&lt;/code&gt;, but discards the result.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#v:replicateM&quot;&gt;replicateM&lt;/a&gt;&lt;/code&gt; と同様ですが、結果を破棄します。</target>
        </trans-unit>
        <trans-unit id="78cdc9f7942398d4390de39bd760476640cca3cf" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;data-bytestring#v:hGet&quot;&gt;hGet&lt;/a&gt;&lt;/code&gt;, except that a shorter &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; may be returned if there are not enough bytes immediately available to satisfy the whole request. &lt;code&gt;&lt;a href=&quot;data-bytestring#v:hGetSome&quot;&gt;hGetSome&lt;/a&gt;&lt;/code&gt; only blocks if there is no data available, and EOF has not yet been reached.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#v:hGet&quot;&gt;hGet&lt;/a&gt;&lt;/code&gt; と同様ですが、リクエスト全体を満たすのに十分なバイトがすぐに利用できない場合、短い &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; が返されることがあります。 &lt;code&gt;&lt;a href=&quot;data-bytestring#v:hGetSome&quot;&gt;hGetSome&lt;/a&gt;&lt;/code&gt; は、利用可能なデータがなく、EOFにまだ到達していない場合にのみブロックします。</target>
        </trans-unit>
        <trans-unit id="22204fd64f738ebaf8d59795481095728e60cafd" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:hGet&quot;&gt;hGet&lt;/a&gt;&lt;/code&gt;, except that a shorter &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; may be returned if there are not enough bytes immediately available to satisfy the whole request. &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:hGetSome&quot;&gt;hGetSome&lt;/a&gt;&lt;/code&gt; only blocks if there is no data available, and EOF has not yet been reached.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:hGet&quot;&gt;hGet&lt;/a&gt;&lt;/code&gt; と同様ですが、リクエスト全体を満たすのに十分なバイトがすぐに利用できない場合、短い &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; が返されることがあります。 &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:hGetSome&quot;&gt;hGetSome&lt;/a&gt;&lt;/code&gt; は、利用可能なデータがなく、EOFにまだ到達していない場合にのみブロックします。</target>
        </trans-unit>
        <trans-unit id="88bc8146cfaa55c674a416c3250cf7fde75cab90" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;data-bytestring-internal#v:unsafeCreate&quot;&gt;unsafeCreate&lt;/a&gt;&lt;/code&gt; but instead of giving the final size of the ByteString, it is just an upper bound. The inner action returns the actual size. Unlike &lt;code&gt;&lt;a href=&quot;data-bytestring-internal#v:createAndTrim&quot;&gt;createAndTrim&lt;/a&gt;&lt;/code&gt; the ByteString is not reallocated if the final size is less than the estimated size.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-internal#v:unsafeCreate&quot;&gt;unsafeCreate&lt;/a&gt;&lt;/code&gt; と同様ですが、ByteStringの最終的なサイズを与えるのではなく、それは単なる上限です。内部アクションは実際のサイズを返します。 &lt;code&gt;&lt;a href=&quot;data-bytestring-internal#v:createAndTrim&quot;&gt;createAndTrim&lt;/a&gt;&lt;/code&gt; とは異なり、ByteStringは、最終サイズが推定サイズより小さい場合、再割り当てされません。</target>
        </trans-unit>
        <trans-unit id="f5d3796594fc3ab685a758f79230f2378e0d143a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; but returning unit in an arbitrary &lt;code&gt;&lt;a href=&quot;control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; context. Allows for convenient use in do-notation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; 似ていますが、任意の &lt;code&gt;&lt;a href=&quot;control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; コンテキストでユニットを返します。do表記での便利な使用を可能にします。</target>
        </trans-unit>
        <trans-unit id="d14b22297f44f3b23085789ee54f433e3be99756" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; but returns the message instead of a third value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; 似ていますが、3番目の値の代わりにメッセージを返します。</target>
        </trans-unit>
        <trans-unit id="94f249d85e854bd365a2caf558548ba6a48c90f7" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt;, but uses &lt;code&gt;&lt;a href=&quot;text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; on the argument to convert it to a &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; に似ていますが、引数に &lt;code&gt;&lt;a href=&quot;text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="bda17b6fe85f48913bc5a5c73b83bf25335feb15" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceM&quot;&gt;traceM&lt;/a&gt;&lt;/code&gt;, but uses &lt;code&gt;&lt;a href=&quot;text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; on the argument to convert it to a &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceM&quot;&gt;traceM&lt;/a&gt;&lt;/code&gt; が、用途は &lt;code&gt;&lt;a href=&quot;text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; に変換するために、引数に &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d4f7e6d83c6d859a27421bd667669770d5a90e1" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceShow&quot;&gt;traceShow&lt;/a&gt;&lt;/code&gt; but returns the shown value instead of a third value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:traceShow&quot;&gt;traceShow&lt;/a&gt;&lt;/code&gt; と同様ですが、3番目の値の代わりに表示された値を返します。</target>
        </trans-unit>
        <trans-unit id="6f7201461e77cbbffbf975483dea651ac9f115ae" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt; but allows the finalizer to be passed an additional environment parameter to be passed to the finalizer. The environment passed to the finalizer is fixed by the second argument to &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt; と同様ですが、ファイナライザに追加の環境パラメータを渡してファイナライザに渡すことができます。ファイナライザに渡される環境は、 &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt; の 2番目の引数によって修正されます。</target>
        </trans-unit>
        <trans-unit id="7debe615da856622a94fda2ea5817fa207e70f78" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt; but allows the finalizer to be passed an additional environment parameter to be passed to the finalizer. The environment passed to the finalizer is fixed by the second argument to &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt; と同様ですが、ファイナライザに追加の環境パラメータを渡してファイナライザに渡すことができます。ファイナライザに渡される環境は、 &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt; の 2番目の引数によって修正されます。</target>
        </trans-unit>
        <trans-unit id="64ed7e2ac88ad404c757ebe2bf247c490e1bb7f8" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:malloc&quot;&gt;malloc&lt;/a&gt;&lt;/code&gt; but memory is filled with bytes of value zero.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:malloc&quot;&gt;malloc&lt;/a&gt;&lt;/code&gt; に似ていますが、メモリはゼロの値のバイトで満たされます。</target>
        </trans-unit>
        <trans-unit id="86170fb3c040fb17cc898e1ff2e2691ab6d6babd" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:allocaArray&quot;&gt;allocaArray&lt;/a&gt;&lt;/code&gt;, but add an extra position to hold a special termination element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:allocaArray&quot;&gt;allocaArray&lt;/a&gt;&lt;/code&gt; と同様ですが、特別な終了要素を保持するための位置を追加します。</target>
        </trans-unit>
        <trans-unit id="ac1ab9de75683278e54e5c08a09c39dc2659dca6" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:callocArray0&quot;&gt;callocArray0&lt;/a&gt;&lt;/code&gt;, but allocated memory is filled with bytes of value zero.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:callocArray0&quot;&gt;callocArray0&lt;/a&gt;&lt;/code&gt; と同様ですが、割り当てられたメモリは値0のバイトで埋められます。</target>
        </trans-unit>
        <trans-unit id="31e8f4f3a29d9ebfdb6b5dd33afab7987daa7fac" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:mallocArray&quot;&gt;mallocArray&lt;/a&gt;&lt;/code&gt;, but add an extra position to hold a special termination element.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:mallocArray&quot;&gt;mallocArray&lt;/a&gt;&lt;/code&gt; が、特別な終端要素を保持するための余分な位置を追加します。</target>
        </trans-unit>
        <trans-unit id="e8798d35982e07ff23b6d4dd4f9bdb7568df53ad" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:mallocArray&quot;&gt;mallocArray&lt;/a&gt;&lt;/code&gt;, but allocated memory is filled with bytes of value zero.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:mallocArray&quot;&gt;mallocArray&lt;/a&gt;&lt;/code&gt; と同様ですが、割り当てられたメモリは値がゼロのバイトで埋められます。</target>
        </trans-unit>
        <trans-unit id="56fea7f011d519c7d258e88b7f3d4ae54477fc85" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:withArray&quot;&gt;withArray&lt;/a&gt;&lt;/code&gt;, but a terminator indicates where the array ends</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:withArray&quot;&gt;withArray&lt;/a&gt;&lt;/code&gt; と似ていますが、ターミネータは配列の終了位置を示します</target>
        </trans-unit>
        <trans-unit id="5f5dc7b1ce9daa64f13a0b057b2f35119ac5cd95" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:withArray&quot;&gt;withArray&lt;/a&gt;&lt;/code&gt;, but the action gets the number of values as an additional parameter</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:withArray&quot;&gt;withArray&lt;/a&gt;&lt;/code&gt; と同様ですが、アクションは追加パラメーターとして値の数を取得します</target>
        </trans-unit>
        <trans-unit id="2e4b7f2fe78306ea129c2aaf255ab760c2af8b59" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:withArrayLen&quot;&gt;withArrayLen&lt;/a&gt;&lt;/code&gt;, but a terminator indicates where the array ends</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-array#v:withArrayLen&quot;&gt;withArrayLen&lt;/a&gt;&lt;/code&gt; と同様ですが、ターミネータは配列の終了位置を示します</target>
        </trans-unit>
        <trans-unit id="789fc518616c7bbb0baf7f9f6873e5ac8d47ec18" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-error#v:throwIf&quot;&gt;throwIf&lt;/a&gt;&lt;/code&gt;, but discarding the result</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-error#v:throwIf&quot;&gt;throwIf&lt;/a&gt;&lt;/code&gt; と同様ですが、結果を破棄します</target>
        </trans-unit>
        <trans-unit id="c8a36a8d0834f745b3ab8c875279421ca4121094" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;foreign-marshal-error#v:throwIfNeg&quot;&gt;throwIfNeg&lt;/a&gt;&lt;/code&gt;, but discarding the result</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-error#v:throwIfNeg&quot;&gt;throwIfNeg&lt;/a&gt;&lt;/code&gt; と同様ですが、結果を破棄します</target>
        </trans-unit>
        <trans-unit id="6a1b2b22a37fbf26bc19da6800d4f4f4c18e9196" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-arr#v:index&quot;&gt;index&lt;/a&gt;&lt;/code&gt;, but without checking that the value is in range.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-arr#v:index&quot;&gt;index&lt;/a&gt;&lt;/code&gt; と同様ですが、値が範囲内にあることを確認しません。</target>
        </trans-unit>
        <trans-unit id="fd6ed34fe3d856c29ed47ef21309ed222b27e308" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;, but lets you specify on which capability the thread should run. Unlike a &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; thread, a thread created by &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; will stay on the same capability for its entire lifetime (&lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; threads can migrate between capabilities according to the scheduling policy). &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; is useful for overriding the scheduling policy when you know in advance how best to distribute the threads.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; ができますが、スレッドが実行すべき機能に指定することができます。 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; スレッドとは異なり、forkOnによって作成されたスレッドは、 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; 期間全体にわたって同じ機能を維持します（ &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; スレッドは、スケジューリングポリシーに従って機能間を移行できます）。 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; は、スレッドの最適な配布方法が事前にわかっている場合に、スケジューリングポリシーをオーバーライドするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="8a1ab1b4c3fc6205f7cbc119a5029f50c82ecfa2" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;, but the child thread is passed a function that can be used to unmask asynchronous exceptions. This function is typically used in the following way</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; と同様ですが、子スレッドには非同期例外のマスクを解除するために使用できる関数が渡されます。この関数は通常、次のように使用されます</target>
        </trans-unit>
        <trans-unit id="36c33ff708aca6f019cd5e4f36eb986bb33a1c42" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt;, but the child thread is pinned to the given CPU, as with &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt; が、子スレッドがと同様に、特定のCPUに固定され &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7e718907739536fc11ccba60be322ece4a576f0" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;, but lets you specify on which capability the thread should run. Unlike a &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; thread, a thread created by &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; will stay on the same capability for its entire lifetime (&lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; threads can migrate between capabilities according to the scheduling policy). &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; is useful for overriding the scheduling policy when you know in advance how best to distribute the threads.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; ができますが、スレッドが実行すべき機能に指定することができます。 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; スレッドとは異なり、forkOnによって作成されたスレッドは、 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; 期間全体にわたって同じ機能を維持します（ &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; スレッドは、スケジューリングポリシーに従って機能間を移行できます）。 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; は、スレッドの最適な配布方法が事前にわかっている場合に、スケジューリングポリシーをオーバーライドするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="06b626d6d4d9cc23806065fb84e761850f571140" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;, but the child thread is passed a function that can be used to unmask asynchronous exceptions. This function is typically used in the following way</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; と同様ですが、子スレッドには非同期例外のマスクを解除するために使用できる関数が渡されます。この関数は通常、次のように使用されます</target>
        </trans-unit>
        <trans-unit id="2074e4e1e1d435d659723420ae5b7066c75304a9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt;, but the child thread is pinned to the given CPU, as with &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt; が、子スレッドがと同様に、特定のCPUに固定され &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7f3f4ecabff6e19ca899a6be2fc7069356485a28" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt; but allows the finalizer to be passed an additional environment parameter to be passed to the finalizer. The environment passed to the finalizer is fixed by the second argument to &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt; と同様ですが、ファイナライザに追加の環境パラメータを渡してファイナライザに渡すことができます。ファイナライザに渡される環境は、 &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:addForeignPtrFinalizerEnv&quot;&gt;addForeignPtrFinalizerEnv&lt;/a&gt;&lt;/code&gt; の 2番目の引数によって修正されます。</target>
        </trans-unit>
        <trans-unit id="7ce27041c32b2c7b9dd00240cd18dbacb3f46271" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic&quot;&gt;Generic&lt;/a&gt;&lt;/code&gt;, there is a class &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; that defines a representation &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Rep1&quot;&gt;Rep1&lt;/a&gt;&lt;/code&gt; and conversion functions &lt;code&gt;&lt;a href=&quot;ghc-generics#v:from1&quot;&gt;from1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-generics#v:to1&quot;&gt;to1&lt;/a&gt;&lt;/code&gt;, only that &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; ranges over types of kind &lt;code&gt;* -&amp;gt; *&lt;/code&gt;. (More generally, it can range over types of kind &lt;code&gt;k -&amp;gt; *&lt;/code&gt;, for any kind &lt;code&gt;k&lt;/code&gt;, if the &lt;code&gt;PolyKinds&lt;/code&gt; extension is enabled. More on this later.) The &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; class is also derivable.</source>
          <target state="translated">以下のような &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic&quot;&gt;Generic&lt;/a&gt;&lt;/code&gt; 、クラスがある &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; 表現定義 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Rep1&quot;&gt;Rep1&lt;/a&gt;&lt;/code&gt; および変換機能は &lt;code&gt;&lt;a href=&quot;ghc-generics#v:from1&quot;&gt;from1&lt;/a&gt;&lt;/code&gt; はと &lt;code&gt;&lt;a href=&quot;ghc-generics#v:to1&quot;&gt;to1&lt;/a&gt;&lt;/code&gt; だけで、 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; は一種の種類上の範囲 &lt;code&gt;* -&amp;gt; *&lt;/code&gt; 。（より一般的には、 &lt;code&gt;PolyKinds&lt;/code&gt; 拡張機能が有効になっている場合、任意の種類の &lt;code&gt;k&lt;/code&gt; に対して、種類k- &lt;code&gt;k -&amp;gt; *&lt;/code&gt; 範囲に及ぶ可能性があります。これについては後で &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; ます。）Generic1クラスも派生可能です。</target>
        </trans-unit>
        <trans-unit id="c6bccda987e33fe0bbf298a851536cd1b5e84ab8" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-io#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt;, but does not pass a &lt;code&gt;restore&lt;/code&gt; action to the argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; と似ていますが、引数に &lt;code&gt;restore&lt;/code&gt; アクションを渡しません。</target>
        </trans-unit>
        <trans-unit id="aad2536126d6403f4616d23d084d88d2eb347131" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-io#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt;, but the masked computation is not interruptible (see &lt;a href=&quot;control-exception#interruptible&quot;&gt;Control.Exception&lt;/a&gt;). THIS SHOULD BE USED WITH GREAT CARE, because if a thread executing in &lt;code&gt;&lt;a href=&quot;ghc-io#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; blocks for any reason, then the thread (and possibly the program, if this is the main thread) will be unresponsive and unkillable. This function should only be necessary if you need to mask exceptions around an interruptible operation, and you can guarantee that the interruptible operation will only block for a short period of time.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; と似ていますが、マスクされた計算は中断できません（&lt;a href=&quot;control-exception#interruptible&quot;&gt;Control.Exceptionを&lt;/a&gt;参照）。何らかの理由で &lt;code&gt;&lt;a href=&quot;ghc-io#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; で実行されているスレッドがブロックすると、スレッド（およびこれがメインスレッドの場合はプログラム）が応答しなくなり、強制終了できないため、これは優れたケアで使用する必要があります。この関数は、割り込み可能な操作に関する例外をマスクする必要がある場合にのみ必要であり、割り込み可能な操作が短時間だけブロックすることを保証できます。</target>
        </trans-unit>
        <trans-unit id="8ad819e37fccd377f4f7ea98ffe39aaa59462a5e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-io#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt;, but does not pass a &lt;code&gt;restore&lt;/code&gt; action to the argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; と似ていますが、引数に &lt;code&gt;restore&lt;/code&gt; アクションを渡しません。</target>
        </trans-unit>
        <trans-unit id="8f34379fe53a8f49eef2d4d51e196bbfce89ed5a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt;, but open the file in binary mode. On Windows, reading a file in text mode (which is the default) will translate CRLF to LF, and writing will translate LF to CRLF. This is usually what you want with text files. With binary files this is undesirable; also, as usual under Microsoft operating systems, text mode treats control-Z as EOF. Binary mode turns off all special treatment of end-of-line and end-of-file characters. (See also &lt;code&gt;&lt;a href=&quot;system-io#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt; に似ていますが、ファイルをバイナリモードで開きます。Windowsでは、ファイルをテキストモード（デフォルト）で読み取るとCRLFがLFに変換され、書き込みを行うとLFがCRLFに変換されます。これは通常、テキストファイルで必要なものです。バイナリファイルでは、これは望ましくありません。また、Microsoftオペレーティングシステムでは通常どおり、テキストモードはcontrol-ZをEOFとして扱います。バイナリモードでは、行末文字とファイル終了文字のすべての特別な処理がオフになります。（ &lt;code&gt;&lt;a href=&quot;system-io#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt; も参照してください。）</target>
        </trans-unit>
        <trans-unit id="c6e447be1c8c5966385a7af2bdc9dacccc9d0191" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt;, but opens the file in ordinary blocking mode. This can be useful for opening a FIFO for writing: if we open in non-blocking mode then the open will fail if there are no readers, whereas a blocking open will block until a reader appear.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt; に似ていますが、通常のブロッキングモードでファイルを開きます。これは、FIFOを書き込み用に開く場合に役立ちます。非ブロッキングモードで開くと、リーダーがない場合は開くことができませんが、ブロッキングオープンは、リーダーが表示されるまでブロックされます。</target>
        </trans-unit>
        <trans-unit id="11412198fb2aebb6ae9a4f43a11db80ce5c58256" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-show#v:showLitString&quot;&gt;showLitString&lt;/a&gt;&lt;/code&gt; (expand escape characters using Haskell escape conventions), but * break the string into multiple lines * wrap the entire thing in double quotes Example: &lt;code&gt;showMultiLineString &quot;hellongoodbyenblah&quot;&lt;/code&gt; returns &lt;code&gt;[&quot;&quot;hello\n\&quot;, &quot;\goodbyen\&quot;, &quot;\blah&quot;&quot;]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-show#v:showLitString&quot;&gt;showLitString&lt;/a&gt;&lt;/code&gt; （Haskellエスケープ規則を使用してエスケープ文字を拡張する）に似ていますが、*文字列を複数行に分割します*全体を二重引用符で &lt;code&gt;showMultiLineString &quot;hellongoodbyenblah&quot;&lt;/code&gt; ます例：showMultiLineString &quot;hellongoodbyenblah&quot;は &lt;code&gt;[&quot;&quot;hello\n\&quot;, &quot;\goodbyen\&quot;, &quot;\blah&quot;&quot;]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c39ac872c5a458945a6a2759691e5bcbdb98387" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;ghc-tophandler#v:runIO&quot;&gt;runIO&lt;/a&gt;&lt;/code&gt;, but in the event of an exception that causes an exit, we don't shut down the system cleanly, we just exit. This is useful in some cases, because the safe exit version will give other threads a chance to clean up first, which might shut down the system in a different way. For example, try</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-tophandler#v:runIO&quot;&gt;runIO&lt;/a&gt;&lt;/code&gt; と同様ですが、終了の原因となる例外が発生した場合は、システムを完全にシャットダウンせずに終了します。安全な終了バージョンは、他のスレッドが最初にクリーンアップする機会を与え、システムを別の方法でシャットダウンする可能性があるため、これはいくつかの場合に役立ちます。たとえば、</target>
        </trans-unit>
        <trans-unit id="92a361d777b7468b2f4fc3ce94a02dd7971e288e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:finally&quot;&gt;finally&lt;/a&gt;&lt;/code&gt;, but only performs the final action if there was an exception raised by the computation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:finally&quot;&gt;finally&lt;/a&gt;&lt;/code&gt; と同様ですが、計算によって発生した例外があった場合にのみ最終アクションを実行します。</target>
        </trans-unit>
        <trans-unit id="d3dcb0071e2c488b5032fe8ef982a6ce42d875b4" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-environment#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt;, but can also read arguments supplied via response files.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-environment#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; と同様ですが、応答ファイルを介して提供される引数を読み取ることもできます。</target>
        </trans-unit>
        <trans-unit id="524c7a43bda4a60c5d96c8d591c7b926a8919edd" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-environment#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt;, but allows blank environment values and mimics the function signature of &lt;code&gt;&lt;a href=&quot;system-posix-env#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;unix&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-environment#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; と似ていますが、空白の環境値を &lt;code&gt;&lt;a href=&quot;system-posix-env#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; し、 &lt;code&gt;unix&lt;/code&gt; パッケージのsetEnvの関数シグネチャを模倣しています。</target>
        </trans-unit>
        <trans-unit id="b797f1a70d1f88521b8770e48825b66c385a7740" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-environment#v:unsetEnv&quot;&gt;unsetEnv&lt;/a&gt;&lt;/code&gt;, but allows for the removal of blank environment variables. May throw an exception if the underlying platform doesn't support unsetting of environment variables.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-environment#v:unsetEnv&quot;&gt;unsetEnv&lt;/a&gt;&lt;/code&gt; と似ていますが、空の環境変数を削除できます。基盤となるプラットフォームが環境変数の設定解除をサポートしていない場合、例外がスローされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8431a8f9693c397e4ecffa5b03a89b83f5c963c3" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-io#v:openBinaryTempFile&quot;&gt;openBinaryTempFile&lt;/a&gt;&lt;/code&gt;, but uses the default file permissions</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:openBinaryTempFile&quot;&gt;openBinaryTempFile&lt;/a&gt;&lt;/code&gt; と同様ですが、デフォルトのファイル権限を使用します</target>
        </trans-unit>
        <trans-unit id="ddc8a70da72ad8f7b98007cd07b86322fc708d18" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt;, but open the file in binary mode. On Windows, reading a file in text mode (which is the default) will translate CRLF to LF, and writing will translate LF to CRLF. This is usually what you want with text files. With binary files this is undesirable; also, as usual under Microsoft operating systems, text mode treats control-Z as EOF. Binary mode turns off all special treatment of end-of-line and end-of-file characters. (See also &lt;code&gt;&lt;a href=&quot;system-io#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt; に似ていますが、ファイルをバイナリモードで開きます。Windowsでは、ファイルをテキストモード（デフォルト）で読み取るとCRLFがLFに変換され、書き込みを行うとLFがCRLFに変換されます。これは通常、テキストファイルで必要なものです。バイナリファイルでは、これは望ましくありません。また、Microsoftオペレーティングシステムでは通常どおり、テキストモードはcontrol-ZをEOFとして扱います。バイナリモードでは、行末文字とファイル終了文字のすべての特別な処理がオフになります。（ &lt;code&gt;&lt;a href=&quot;system-io#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt; も参照してください。）</target>
        </trans-unit>
        <trans-unit id="445dbb3aac3b63578f83ae7ca3264f9470654614" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-io#v:openTempFile&quot;&gt;openTempFile&lt;/a&gt;&lt;/code&gt;, but opens the file in binary mode. See &lt;code&gt;&lt;a href=&quot;system-io#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; for more comments.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:openTempFile&quot;&gt;openTempFile&lt;/a&gt;&lt;/code&gt; と似ていますが、ファイルをバイナリモードで開きます。その他のコメントについては、 &lt;code&gt;&lt;a href=&quot;system-io#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="42d2371aba08fe3ad0e461bdd5e9243b5d4ff47c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-io#v:openTempFile&quot;&gt;openTempFile&lt;/a&gt;&lt;/code&gt;, but uses the default file permissions</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:openTempFile&quot;&gt;openTempFile&lt;/a&gt;&lt;/code&gt; と同様ですが、デフォルトのファイル権限を使用します</target>
        </trans-unit>
        <trans-unit id="68e487cc9bcc812ffdd024d2959aeef2edcaff91" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-posix-files#v:setFileTimes&quot;&gt;setFileTimes&lt;/a&gt;&lt;/code&gt; but timestamps can have sub-second resolution.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-files#v:setFileTimes&quot;&gt;setFileTimes&lt;/a&gt;&lt;/code&gt; と同様ですが、タイムスタンプは1秒未満の解像度を持つことができます。</target>
        </trans-unit>
        <trans-unit id="5fd41ba6952859aa302482f390cdfdfc026468ce" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-posix-files#v:setFileTimesHiRes&quot;&gt;setFileTimesHiRes&lt;/a&gt;&lt;/code&gt; but does not follow symbolic links. This operation is not supported on all platforms. On these platforms, this function will raise an exception.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;system-posix-files#v:setFileTimesHiRes&quot;&gt;setFileTimesHiRes&lt;/a&gt;&lt;/code&gt; が、シンボリックリンクをたどりません。この操作は、すべてのプラットフォームでサポートされているわけではありません。これらのプラットフォームでは、この関数は例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="bf41494a113002bf4517831272153ccf7cd29c3d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-posix-files#v:touchFile&quot;&gt;touchFile&lt;/a&gt;&lt;/code&gt; but does not follow symbolic links. This operation is not supported on all platforms. On these platforms, this function will raise an exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-files#v:touchFile&quot;&gt;touchFile&lt;/a&gt;&lt;/code&gt; と同様ですが、シンボリックリンクをたどりません。この操作は、すべてのプラットフォームでサポートされているわけではありません。これらのプラットフォームでは、この関数は例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="0b8c47891569804ad6ed4ae6fd8eda019375adc3" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:setFileTimes&quot;&gt;setFileTimes&lt;/a&gt;&lt;/code&gt; but timestamps can have sub-second resolution.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:setFileTimes&quot;&gt;setFileTimes&lt;/a&gt;&lt;/code&gt; と同様ですが、タイムスタンプは1秒未満の解像度を持つことができます。</target>
        </trans-unit>
        <trans-unit id="33961ae29501aef7bf09af455c8576676e24ac35" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:setFileTimesHiRes&quot;&gt;setFileTimesHiRes&lt;/a&gt;&lt;/code&gt; but does not follow symbolic links. This operation is not supported on all platforms. On these platforms, this function will raise an exception.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:setFileTimesHiRes&quot;&gt;setFileTimesHiRes&lt;/a&gt;&lt;/code&gt; が、シンボリックリンクをたどりません。この操作は、すべてのプラットフォームでサポートされているわけではありません。これらのプラットフォームでは、この関数は例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="5bbeb7f8e03e4906f3490fc206720d0eab71a223" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:touchFile&quot;&gt;touchFile&lt;/a&gt;&lt;/code&gt; but does not follow symbolic links. This operation is not supported on all platforms. On these platforms, this function will raise an exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:touchFile&quot;&gt;touchFile&lt;/a&gt;&lt;/code&gt; と同様ですが、シンボリックリンクをたどりません。この操作は、すべてのプラットフォームでサポートされているわけではありません。これらのプラットフォームでは、この関数は例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="662c747da0f04cde3ce2ca5a423c4b7f959d2f5f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#v:chainl&quot;&gt;chainl&lt;/a&gt;&lt;/code&gt;, but parses one or more occurrences of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#v:chainl&quot;&gt;chainl&lt;/a&gt;&lt;/code&gt; に似ていますが、1つ以上の &lt;code&gt;p&lt;/code&gt; の出現を解析します。</target>
        </trans-unit>
        <trans-unit id="f8ce7731553d62994a654a2d708daf3c75a28d74" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#v:chainr&quot;&gt;chainr&lt;/a&gt;&lt;/code&gt;, but parses one or more occurrences of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#v:chainr&quot;&gt;chainr&lt;/a&gt;&lt;/code&gt; に似ていますが、 &lt;code&gt;p&lt;/code&gt; の 1つ以上の出現を解析します。</target>
        </trans-unit>
        <trans-unit id="6fee7ff8239ed3fa9381ad7aca490952c09c187d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#v:many&quot;&gt;many&lt;/a&gt;&lt;/code&gt;, but discards the result.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#v:many&quot;&gt;many&lt;/a&gt;&lt;/code&gt; と同様ですが、結果は破棄されます。</target>
        </trans-unit>
        <trans-unit id="b3dabdc0b676ddd52428d8521d1cc42a6a7a8ded" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#v:many1&quot;&gt;many1&lt;/a&gt;&lt;/code&gt;, but discards the result.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#v:many1&quot;&gt;many1&lt;/a&gt;&lt;/code&gt; と同じですが、結果を破棄します。</target>
        </trans-unit>
        <trans-unit id="a81f5f54f0cb0d0d364aaedc68e2c63bc094834c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;INLINE&lt;/code&gt;, the &lt;code&gt;INLINABLE&lt;/code&gt; pragma retains a copy of the original RHS for inlining purposes, and persists it in the interface file, regardless of the size of the RHS.</source>
          <target state="translated">&lt;code&gt;INLINE&lt;/code&gt; と同様に、 &lt;code&gt;INLINABLE&lt;/code&gt; プラグマは、インライン化の目的で元のRHSのコピーを保持し、RHSのサイズに関係なく、それをインターフェースファイルに保持します。</target>
        </trans-unit>
        <trans-unit id="be5585db37b6a8bd5e1a92603fdbe92c2af65ed4" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;compactAdd#&lt;/code&gt;, but retains sharing and cycles during compaction.</source>
          <target state="translated">&lt;code&gt;compactAdd#&lt;/code&gt; と同様ですが、圧縮中に共有と循環を保持します。</target>
        </trans-unit>
        <trans-unit id="ee95b6c97dc7c4bdba6a1af63ea6a5ab1b1b563e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;where&lt;/code&gt; bindings, name shadowing is not allowed within an &lt;code&gt;mdo&lt;/code&gt;-expression or a &lt;code&gt;rec&lt;/code&gt;-block; that is, all the names bound in a single &lt;code&gt;rec&lt;/code&gt; must be distinct. (GHC will complain if this is not the case.)</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; および &lt;code&gt;where&lt;/code&gt; バインディングと同様に、名前のシャドウイングは &lt;code&gt;mdo&lt;/code&gt; 式または &lt;code&gt;rec&lt;/code&gt; ブロック内では許可されません。つまり、1つの &lt;code&gt;rec&lt;/code&gt; にバインドされているすべての名前は異なっている必要があります。（そうでない場合、GHCは不平を言います。）</target>
        </trans-unit>
        <trans-unit id="a0a24c56e1b9f366848073186782d64a2635b134" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;seq&lt;/code&gt;, the argument of &lt;code&gt;&lt;a href=&quot;ghc-exts#v:lazy&quot;&gt;lazy&lt;/a&gt;&lt;/code&gt; can have an unboxed type.</source>
          <target state="translated">&lt;code&gt;seq&lt;/code&gt; と同様に、 &lt;code&gt;&lt;a href=&quot;ghc-exts#v:lazy&quot;&gt;lazy&lt;/a&gt;&lt;/code&gt; の引数はボックス化されていない型を持つことができます。</target>
        </trans-unit>
        <trans-unit id="e6cafc4e6a3f71e112837260dfb933a8b2509697" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;setFileTimesHiRes&lt;/code&gt; but uses a file descriptor instead of a path. This operation is not supported on all platforms. On these platforms, this function will raise an exception.</source>
          <target state="translated">&lt;code&gt;setFileTimesHiRes&lt;/code&gt; と同様ですが、パスの代わりにファイル記述子を使用します。この操作は、すべてのプラットフォームでサポートされているわけではありません。これらのプラットフォームでは、この関数は例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="e4c941a2f6f4373225d42fc487a0f7d303ff143f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;touchFile&lt;/code&gt; but uses a file descriptor instead of a path. This operation is not supported on all platforms. On these platforms, this function will raise an exception.</source>
          <target state="translated">&lt;code&gt;touchFile&lt;/code&gt; と似ていますが、パスの代わりにファイル記述子を使用します。この操作は、すべてのプラットフォームでサポートされているわけではありません。これらのプラットフォームでは、この関数は例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="99cd3e5d292b4b23332a6b2a47c1eadf4be20341" translate="yes" xml:space="preserve">
          <source>Like all other GHCi commands, the output is always displayed in the current GHCi scope (&lt;a href=&quot;#ghci-scope&quot;&gt;What&amp;rsquo;s really in scope at the prompt?&lt;/a&gt;).</source>
          <target state="translated">他のすべてのGHCiコマンドと同様に、出力は常に現在のGHCiスコープに表示されます（&lt;a href=&quot;#ghci-scope&quot;&gt;プロンプトのスコープには実際には何がありますか？&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="bc84715575b0fa376556544c5d2ef3d4d3ec50fb" translate="yes" xml:space="preserve">
          <source>Like many other Haskell data structures, &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;s are lazy. This means that if you place an expensive unevaluated thunk inside an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;, it will be evaluated by the thread that consumes it, not the thread that produced it. Be sure to &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:evaluate&quot;&gt;evaluate&lt;/a&gt;&lt;/code&gt; values to be placed in an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; to the appropriate normal form, or utilize a strict MVar provided by the strict-concurrency package.</source>
          <target state="translated">他の多くのHaskellデータ構造と同様に、 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; は遅延します。これは、高価な未評価のサンクを &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 内に配置すると、それを生成したスレッドではなく、それを消費するスレッドによって評価されることを意味します。必ず &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:evaluate&quot;&gt;evaluate&lt;/a&gt;&lt;/code&gt; に配置される値 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 適切な正規形にする、または厳格な同時実行性のパッケージで提供される厳格なMVARを利用しています。</target>
        </trans-unit>
        <trans-unit id="37c17ec186b7de612cb654acafdf92b9e7cdfb9b" translate="yes" xml:space="preserve">
          <source>Like other pragmas, &lt;a href=&quot;#pragma-RULES&quot;&gt;&lt;code&gt;RULES&lt;/code&gt;&lt;/a&gt; pragmas are always checked for scope errors, and are typechecked. Typechecking means that the LHS and RHS of a rule are typechecked, and must have the same type. However, rules are only &lt;em&gt;enabled&lt;/em&gt; if the &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt;&lt;code&gt;-fenable-rewrite-rules&lt;/code&gt;&lt;/a&gt; flag is on (see &lt;a href=&quot;#rule-semantics&quot;&gt;Semantics&lt;/a&gt;).</source>
          <target state="translated">Like other pragmas, &lt;a href=&quot;#pragma-RULES&quot;&gt; &lt;code&gt;RULES&lt;/code&gt; &lt;/a&gt; pragmas are always checked for scope errors, and are typechecked. Typechecking means that the LHS and RHS of a rule are typechecked, and must have the same type. However, rules are only &lt;em&gt;enabled&lt;/em&gt; if the &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt; &lt;code&gt;-fenable-rewrite-rules&lt;/code&gt; &lt;/a&gt; flag is on (see &lt;a href=&quot;#rule-semantics&quot;&gt;Semantics&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="3447df87a2c63f15a9f31c14cbaf487254b0da44" translate="yes" xml:space="preserve">
          <source>Like other pragmas, &lt;code&gt;RULE&lt;/code&gt; pragmas are always checked for scope errors, and are typechecked. Typechecking means that the LHS and RHS of a rule are typechecked, and must have the same type. However, rules are only &lt;em&gt;enabled&lt;/em&gt; if the &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt;&lt;code&gt;-fenable-rewrite-rules&lt;/code&gt;&lt;/a&gt; flag is on (see &lt;a href=&quot;#rule-semantics&quot;&gt;Semantics&lt;/a&gt;).</source>
          <target state="translated">他のプラグマと同様に、 &lt;code&gt;RULE&lt;/code&gt; プラグマは常にスコープエラーがチェックされ、型チェックされます。タイプチェックは、ルールのLHSとRHSがタイプチェックされ、同じタイプでなければならないことを意味します。ただし、ルールは&lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt; &lt;code&gt;-fenable-rewrite-rules&lt;/code&gt; &lt;/a&gt;フラグがオンの場合にのみ&lt;em&gt;有効になり&lt;/em&gt;ます（「&lt;a href=&quot;#rule-semantics&quot;&gt;セマンティクス&lt;/a&gt;」を参照）。</target>
        </trans-unit>
        <trans-unit id="8cd118e46b9ceb5fcb2a8499ea3916b27ce3f424" translate="yes" xml:space="preserve">
          <source>Like the function &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt;, but appends a stack trace to the error message if one is available.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; と同様ですが、スタックトレースが利用可能な場合は、エラーメッセージにスタックトレースを追加します。</target>
        </trans-unit>
        <trans-unit id="2b393f82e4729c2fe510cc4df3e3b9d2a29de00f" translate="yes" xml:space="preserve">
          <source>Like with &lt;a href=&quot;#assoc-inst&quot;&gt;Associated instances&lt;/a&gt;, it is possible to explicitly bind type and kind variables in default declarations with a &lt;code&gt;forall&lt;/code&gt; by using the &lt;a href=&quot;#extension-ExplicitForAll&quot;&gt;&lt;code&gt;ExplicitForAll&lt;/code&gt;&lt;/a&gt; language extension.</source>
          <target state="translated">Like with &lt;a href=&quot;#assoc-inst&quot;&gt;Associated instances&lt;/a&gt;, it is possible to explicitly bind type and kind variables in default declarations with a &lt;code&gt;forall&lt;/code&gt; by using the &lt;a href=&quot;#extension-ExplicitForAll&quot;&gt; &lt;code&gt;ExplicitForAll&lt;/code&gt; &lt;/a&gt; language extension.</target>
        </trans-unit>
        <trans-unit id="24d948e4bdbe5b8224bbc0dfbab1923fab00b98e" translate="yes" xml:space="preserve">
          <source>Limit</source>
          <target state="translated">Limit</target>
        </trans-unit>
        <trans-unit id="70044be8751bf68d4de8b7945e5586e80acb7cb2" translate="yes" xml:space="preserve">
          <source>Limit the number of lines stored in the history.</source>
          <target state="translated">履歴に保存される行数を制限します。</target>
        </trans-unit>
        <trans-unit id="ea9676003762818513c636984faeaa0ae356839a" translate="yes" xml:space="preserve">
          <source>Line</source>
          <target state="translated">Line</target>
        </trans-unit>
        <trans-unit id="16fd51c8ab5fd356a1d23d48f4531237b879e504" translate="yes" xml:space="preserve">
          <source>Line and character position</source>
          <target state="translated">線と文字の位置</target>
        </trans-unit>
        <trans-unit id="702b953a8e73a9c6b4402eb231caf05c182af7f6" translate="yes" xml:space="preserve">
          <source>Line length.</source>
          <target state="translated">線の長さ。</target>
        </trans-unit>
        <trans-unit id="054f11de365cf7821b8d7f5863692c6cc9051ab6" translate="yes" xml:space="preserve">
          <source>Line number information necessary to map instruction addresses to line numbers in the source program.</source>
          <target state="translated">命令アドレスをソースプログラムの行番号に対応付けるために必要な行番号情報です。</target>
        </trans-unit>
        <trans-unit id="8087784b605286ef9ef2960647bad3300431de2b" translate="yes" xml:space="preserve">
          <source>LineBuffering</source>
          <target state="translated">LineBuffering</target>
        </trans-unit>
        <trans-unit id="281752024edc1ab9c1f92c79633d55bc44eacd94" translate="yes" xml:space="preserve">
          <source>LineSeparator</source>
          <target state="translated">LineSeparator</target>
        </trans-unit>
        <trans-unit id="e3b93cdf9997876ced65e2c007d6364b7d627da6" translate="yes" xml:space="preserve">
          <source>LinesAffected</source>
          <target state="translated">LinesAffected</target>
        </trans-unit>
        <trans-unit id="eb1cda622d5b91f2847faea4f7c037e360353e7a" translate="yes" xml:space="preserve">
          <source>Link all passed files into a static library suitable for linking. To control the name, use the &lt;code&gt;-o ⟨file⟩&lt;/code&gt; option as usual. The default name is &lt;code&gt;liba.a&lt;/code&gt;.</source>
          <target state="translated">渡されたすべてのファイルを、リンクに適した静的ライブラリにリンクします。名前を制御するには、通常どおり &lt;code&gt;-o ⟨file⟩&lt;/code&gt; オプションを使用します。デフォルト名は &lt;code&gt;liba.a&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1f4a6bdd90ed3ff452ae2e2964b9b2c357b03f32" translate="yes" xml:space="preserve">
          <source>Link in library ⟨lib⟩</source>
          <target state="translated">ライブラリ内のリンク ⟨lib⟩</target>
        </trans-unit>
        <trans-unit id="d9cd1bd51d029ba12d6908919f6358ef8b55fb4f" translate="yes" xml:space="preserve">
          <source>Link in the ⟨lib⟩ library. On Unix systems, this will be in a file called &lt;code&gt;lib&lt;em&gt;lib&lt;/em&gt;.a&lt;/code&gt; or &lt;code&gt;lib&lt;em&gt;lib&lt;/em&gt;.so&lt;/code&gt; which resides somewhere on the library directories path.</source>
          <target state="translated">「lib」ライブラリにリンクします。Unixシステムでは、これは、 &lt;code&gt;lib&lt;em&gt;lib&lt;/em&gt;.a&lt;/code&gt; または &lt;code&gt;lib&lt;em&gt;lib&lt;/em&gt;.so&lt;/code&gt; あり、ライブラリディレクトリパスのどこかに存在します。</target>
        </trans-unit>
        <trans-unit id="fcaae5f3f12bcb52dc5f90152a65e0bdbec2c943" translate="yes" xml:space="preserve">
          <source>Link the program with a debugging version of the runtime system. The debugging runtime turns on numerous assertions and sanity checks, and provides extra options for producing debugging output at runtime (run the program with &lt;code&gt;+RTS -?&lt;/code&gt; to see a list).</source>
          <target state="translated">プログラムをランタイムシステムのデバッグバージョンにリンクします。デバッグランタイムは多数のアサーションとサニティチェックをオンにし、実行時にデバッグ出力を生成するための追加オプションを提供します（ &lt;code&gt;+RTS -?&lt;/code&gt; プログラムを実行してリストを表示します）。</target>
        </trans-unit>
        <trans-unit id="aa02a71e52144b5208df7f7113d1f3bb6b6ff3a1" translate="yes" xml:space="preserve">
          <source>Link the program with the &amp;ldquo;eventlog&amp;rdquo; version of the runtime system. A program linked in this way can generate a runtime trace of events (such as thread start/stop) to a binary file &lt;code&gt;&lt;em&gt;program&lt;/em&gt;.eventlog&lt;/code&gt;, which can then be interpreted later by various tools. See &lt;a href=&quot;runtime_control#rts-eventlog&quot;&gt;Tracing&lt;/a&gt; for more information.</source>
          <target state="translated">プログラムをランタイムシステムの「イベントログ」バージョンにリンクします。このようにリンクされたプログラムは、イベントの実行時トレース（スレッドの開始/停止など）をバイナリファイル &lt;code&gt;&lt;em&gt;program&lt;/em&gt;.eventlog&lt;/code&gt; できます。これは、後でさまざまなツールで解釈できます。詳細については、&lt;a href=&quot;runtime_control#rts-eventlog&quot;&gt;トレース&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="74630b9250c4419175d9406e09096a825645aee9" translate="yes" xml:space="preserve">
          <source>Link the program with the &amp;ldquo;threaded&amp;rdquo; version of the runtime system. The threaded runtime system is so-called because it manages multiple OS threads, as opposed to the default runtime system which is purely single-threaded.</source>
          <target state="translated">プログラムを「スレッド化された」バージョンのランタイムシステムにリンクします。スレッド化されたランタイムシステムは、純粋に単一スレッドであるデフォルトのランタイムシステムとは対照的に、複数のOSスレッドを管理するため、いわゆるです。</target>
        </trans-unit>
        <trans-unit id="a0ad1ef7b6972d54e70158733112a5d174213f28" translate="yes" xml:space="preserve">
          <source>LinkCount</source>
          <target state="translated">LinkCount</target>
        </trans-unit>
        <trans-unit id="05669bed092bbe0873ad6674e013a8667f68fe04" translate="yes" xml:space="preserve">
          <source>LinkLimit</source>
          <target state="translated">LinkLimit</target>
        </trans-unit>
        <trans-unit id="9fa999dc4d8eab9b8471e5d9aa06c5de2dbcdca7" translate="yes" xml:space="preserve">
          <source>Linking type and value level</source>
          <target state="translated">型と値のレベルを連動させる</target>
        </trans-unit>
        <trans-unit id="a1fffaaafb7cc996685bceb829c053cc4f7de43d" translate="yes" xml:space="preserve">
          <source>List</source>
          <target state="translated">List</target>
        </trans-unit>
        <trans-unit id="2be1eb803afe605ac5bf0ed36710e67b7cf3ad56" translate="yes" xml:space="preserve">
          <source>List all enabled language extensions.</source>
          <target state="translated">有効な言語拡張機能をすべてリストアップします。</target>
        </trans-unit>
        <trans-unit id="4ada7d3f43f0d02ac75493517b3e3afc1c377d07" translate="yes" xml:space="preserve">
          <source>List all of the files or folders beginning with this path.</source>
          <target state="translated">このパスで始まるすべてのファイルまたはフォルダをリストアップします。</target>
        </trans-unit>
        <trans-unit id="d5c60e0858274aa75bbb19a9a06cc630a1d46b1c" translate="yes" xml:space="preserve">
          <source>List all types collected for expressions and (local) bindings currently loaded (while &lt;a href=&quot;#ghci-cmd-:set%20+c&quot;&gt;&lt;code&gt;:set +c&lt;/code&gt;&lt;/a&gt; was active) with their respective source-code span, e.g.</source>
          <target state="translated">現在読み込まれている式と（ローカル）バインディングのために収集されたすべてのタイプをリストします（&lt;a href=&quot;#ghci-cmd-:set%20+c&quot;&gt; &lt;code&gt;:set +c&lt;/code&gt; &lt;/a&gt;がアクティブであった場合）、それぞれのソースコードスパンを使用して、たとえば</target>
        </trans-unit>
        <trans-unit id="ba8a89a77fc9557b8e8c8d251c8ead9fbdaeb7a1" translate="yes" xml:space="preserve">
          <source>List comprehensions</source>
          <target state="translated">一覧表の理解度</target>
        </trans-unit>
        <trans-unit id="3f051a8062e5fac28d61cc364f9f1acc708cd461" translate="yes" xml:space="preserve">
          <source>List index (subscript) operator, starting from 0. It is an instance of the more general &lt;code&gt;&lt;a href=&quot;data-list#v:genericIndex&quot;&gt;genericIndex&lt;/a&gt;&lt;/code&gt;, which takes an index of any integral type.</source>
          <target state="translated">リストインデックス（添字）演算子。0から始まります。これは、より一般的な &lt;code&gt;&lt;a href=&quot;data-list#v:genericIndex&quot;&gt;genericIndex&lt;/a&gt;&lt;/code&gt; のインスタンスであり、整数型のインデックスを取ります。</target>
        </trans-unit>
        <trans-unit id="754adb8bd3be1191610eae9f21f2c4cd71a1162d" translate="yes" xml:space="preserve">
          <source>List notation, such as &lt;code&gt;[x,y]&lt;/code&gt; or &lt;code&gt;[m..n]&lt;/code&gt; can also be treated via rebindable syntax if you use &lt;code&gt;-XOverloadedLists&lt;/code&gt;; see &lt;a href=&quot;#overloaded-lists&quot;&gt;Overloaded lists&lt;/a&gt;.</source>
          <target state="translated">などリスト表記、 &lt;code&gt;[x,y]&lt;/code&gt; または &lt;code&gt;[m..n]&lt;/code&gt; を使用する場合も、再束縛構文を介して処理することができる &lt;code&gt;-XOverloadedLists&lt;/code&gt; を、&lt;a href=&quot;#overloaded-lists&quot;&gt;オーバーロードされたリストを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="920d73e463b5cf5eed14ea6d6e2da4031afeaa2c" translate="yes" xml:space="preserve">
          <source>List of associations</source>
          <target state="translated">協会一覧</target>
        </trans-unit>
        <trans-unit id="6b46c2d4b10caadfeb5b6a9c62ffb97de0f2b1d4" translate="yes" xml:space="preserve">
          <source>List of elements of a structure, from left to right.</source>
          <target state="translated">構造体の要素を左から右へ一覧表示します。</target>
        </trans-unit>
        <trans-unit id="7094bd5e681efcce9038e6d995bf2d060fc85079" translate="yes" xml:space="preserve">
          <source>List operations</source>
          <target state="translated">リスト操作</target>
        </trans-unit>
        <trans-unit id="5f897200e3f1c653befd6edfbddc4172f95a6a57" translate="yes" xml:space="preserve">
          <source>List patterns are also overloaded. When the &lt;code&gt;OverloadedLists&lt;/code&gt; extension is turned on, these definitions are desugared as follows</source>
          <target state="translated">リストパターンもオーバーロードされます。 &lt;code&gt;OverloadedLists&lt;/code&gt; 拡張がオンの場合、これらの定義は次のように削除されます</target>
        </trans-unit>
        <trans-unit id="76603bea3fde9f607769b026d910df0dfc04acfc" translate="yes" xml:space="preserve">
          <source>List the active breakpoints.</source>
          <target state="translated">アクティブなブレークポイントをリストアップします。</target>
        </trans-unit>
        <trans-unit id="bb72cfc84c631772e908d5b0c3a4205d0c9649a0" translate="yes" xml:space="preserve">
          <source>List the active evaluations that are stopped at breakpoints.</source>
          <target state="translated">ブレークポイントで停止しているアクティブな評価を一覧表示します。</target>
        </trans-unit>
        <trans-unit id="d92d0a195ad4655dbddbf91fc436d0a6b999cd58" translate="yes" xml:space="preserve">
          <source>List the frames of a stack trace.</source>
          <target state="translated">スタックトレースのフレームを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="b46a3709f9c0d5af2b972568db4b210d8669456f" translate="yes" xml:space="preserve">
          <source>List transformations</source>
          <target state="translated">リスト変換</target>
        </trans-unit>
        <trans-unit id="105d6ef74784f6217af666c539a87096be10b1b3" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;language-haskell-th-pprlib#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-pprlib#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; のリストバージョン</target>
        </trans-unit>
        <trans-unit id="f8e9efe55b79317a3e563e7e8e801673f73f1521" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;language-haskell-th-pprlib#v:-60--43--62-&quot;&gt;&amp;lt;+&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-pprlib#v:-60--43--62-&quot;&gt;&amp;lt;+&amp;gt;&lt;/a&gt;&lt;/code&gt; のバージョンをリスト</target>
        </trans-unit>
        <trans-unit id="db73b7893f3af8f6c05605cf9251be842b275f8d" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;language-haskell-th-pprlib#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-pprlib#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt; のリストバージョン</target>
        </trans-unit>
        <trans-unit id="482dfe339c4f0977581fe5ee524fa53adc1e28ed" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; のバージョンをリストします。</target>
        </trans-unit>
        <trans-unit id="cfafdd602fb158738556497c46c51d6d60df9768" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:-60--43--62-&quot;&gt;&amp;lt;+&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:-60--43--62-&quot;&gt;&amp;lt;+&amp;gt;&lt;/a&gt;&lt;/code&gt; のバージョンを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="20bd5a0e4fabf718ca894fcb17f676efec0307ae" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt; のバージョンをリストします。</target>
        </trans-unit>
        <trans-unit id="6ceba6d840aab502457ce42ae3fbfeab1ecc2414" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; のバージョンをリストします。</target>
        </trans-unit>
        <trans-unit id="66e7277f4ef344564d58e60d6ea51d7adf033fef" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-60--43--62-&quot;&gt;&amp;lt;+&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-60--43--62-&quot;&gt;&amp;lt;+&amp;gt;&lt;/a&gt;&lt;/code&gt; のバージョンを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="b3158aef4933628130f67b89a618bc8b174d8978" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt; のバージョンをリストします。</target>
        </trans-unit>
        <trans-unit id="745ee4c2660329c820454e1ba2a47f402e1ce21f" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; のバージョンをリストします。</target>
        </trans-unit>
        <trans-unit id="5594bce20a5038736c0afcf0c55e2622caf81f60" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:-60--43--62-&quot;&gt;&amp;lt;+&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:-60--43--62-&quot;&gt;&amp;lt;+&amp;gt;&lt;/a&gt;&lt;/code&gt; のバージョンを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="7d0b7f90f7aacdb031c45cf80cdd404adafbe362" translate="yes" xml:space="preserve">
          <source>List version of &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt;&lt;/code&gt; のバージョンをリストします。</target>
        </trans-unit>
        <trans-unit id="33a93596bb8da89147bd59e3fe1b97c2d66a5038" translate="yes" xml:space="preserve">
          <source>ListT</source>
          <target state="translated">ListT</target>
        </trans-unit>
        <trans-unit id="c518fb067439705f3ff5fa5b4a62b9be3afa31ae" translate="yes" xml:space="preserve">
          <source>Listen</source>
          <target state="translated">Listen</target>
        </trans-unit>
        <trans-unit id="57c9502a7d7d48fd4a86b45fefb2b163491c3ae1" translate="yes" xml:space="preserve">
          <source>Lists</source>
          <target state="translated">Lists</target>
        </trans-unit>
        <trans-unit id="781623c2be49bc87bb9e5a34fe84e216baf4b8b9" translate="yes" xml:space="preserve">
          <source>Lists the source code around the definition of ⟨identifier⟩ or the current breakpoint if not given. This requires that the identifier be defined in an interpreted module. If your output device supports it, then GHCi will highlight the active subexpression in bold.</source>
          <target state="translated">⟨identifier⟩ の定義の周りのソースコードをリストアップします。これは、識別子がインタープリタモジュールで定義されている必要があります。出力デバイスがそれをサポートしている場合、GHCiはアクティブなサブ式を太字で強調表示します。</target>
        </trans-unit>
        <trans-unit id="808589d62b1e1bf49e41bd4b6a92d4dc1a0d0f3a" translate="yes" xml:space="preserve">
          <source>Lists the source code around the given line number of ⟨module⟩. This requires that the module be interpreted. If your output device supports it, then GHCi will highlight the active subexpression in bold.</source>
          <target state="translated">⟨module⟩ の指定された行番号周辺のソースコードを一覧表示します。これは、モジュールが解釈される必要があります。出力デバイスがそれをサポートしている場合、GHCi はアクティブな式を太字で強調表示します。</target>
        </trans-unit>
        <trans-unit id="d4a7facfa8bfb2e9078fe2cd6adc3a55c36788e6" translate="yes" xml:space="preserve">
          <source>Lists, but with an &lt;code&gt;&lt;a href=&quot;control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; functor based on zipping.</source>
          <target state="translated">リスト、ただし圧縮に基づく &lt;code&gt;&lt;a href=&quot;control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; ファンクタを使用。</target>
        </trans-unit>
        <trans-unit id="7c730a293f109c2c9fe03256794b5a680b2406f1" translate="yes" xml:space="preserve">
          <source>Lit</source>
          <target state="translated">Lit</target>
        </trans-unit>
        <trans-unit id="1d45d75d6a3cc51b4987b3781a45f5c1345a4a98" translate="yes" xml:space="preserve">
          <source>LitSort</source>
          <target state="translated">LitSort</target>
        </trans-unit>
        <trans-unit id="3c7167176c55c32edbdb72649b122c134066cd84" translate="yes" xml:space="preserve">
          <source>Little-endian</source>
          <target state="translated">Little-endian</target>
        </trans-unit>
        <trans-unit id="0877eccb7ffb8474ab69b0fcf579d9b84daccdd0" translate="yes" xml:space="preserve">
          <source>Little-endian decoding</source>
          <target state="translated">リトルエンディアン復号化</target>
        </trans-unit>
        <trans-unit id="c7273f034919f3ef6168c89cba26b3bce836ba9e" translate="yes" xml:space="preserve">
          <source>Little-endian primitives</source>
          <target state="translated">リトルエンディアンプリミティブ</target>
        </trans-unit>
        <trans-unit id="1c321830ed633cc94628e1e65216ff4ba6a6ed76" translate="yes" xml:space="preserve">
          <source>Little-endian writes</source>
          <target state="translated">リトルエンディアンの書き込み</target>
        </trans-unit>
        <trans-unit id="6fc67654e4796ae3f37595e79dd2e45c3625e5e5" translate="yes" xml:space="preserve">
          <source>LittleEndian</source>
          <target state="translated">LittleEndian</target>
        </trans-unit>
        <trans-unit id="2e67c31b2f3fdce36aeeb1f20caff4b304f70567" translate="yes" xml:space="preserve">
          <source>Ll: Letter, Lowercase</source>
          <target state="translated">Ll.文字、小文字</target>
        </trans-unit>
        <trans-unit id="58382029ac6f1e5383d7bade61f6a456488c6bbd" translate="yes" xml:space="preserve">
          <source>Llike &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:mallocBytes&quot;&gt;mallocBytes&lt;/a&gt;&lt;/code&gt; but memory is filled with bytes of value zero.</source>
          <target state="translated">LallocはmallocBytesに &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:mallocBytes&quot;&gt;mallocBytes&lt;/a&gt;&lt;/code&gt; いますが、メモリは値ゼロのバイトで満たされます。</target>
        </trans-unit>
        <trans-unit id="4288785885201e9bb76e1d0199483effb5fe9f71" translate="yes" xml:space="preserve">
          <source>Lm: Letter, Modifier</source>
          <target state="translated">Lm.文字、修飾子</target>
        </trans-unit>
        <trans-unit id="2fdaaab4868bf18d8a809e1f5f7e47a37f964d96" translate="yes" xml:space="preserve">
          <source>Lo: Letter, Other</source>
          <target state="translated">ロー:手紙、その他</target>
        </trans-unit>
        <trans-unit id="8accbc10b359e949cb147175bb580bf3e07dc786" translate="yes" xml:space="preserve">
          <source>Load a plugin exported by a given module</source>
          <target state="translated">与えられたモジュールでエクスポートされたプラグインをロードする</target>
        </trans-unit>
        <trans-unit id="51fa1bf18d44ef1d1248c602fa8dd72c62735eea" translate="yes" xml:space="preserve">
          <source>Load the plugin in the given module. The module must be a member of a package registered in GHC&amp;rsquo;s package database.</source>
          <target state="translated">指定されたモジュールにプラグインをロードします。モジュールはGHCのパッケージデータベースに登録されたパッケージのメンバーでなければなりません。</target>
        </trans-unit>
        <trans-unit id="19f77727de15c8eb41a9504fa18fee15c5c48b61" translate="yes" xml:space="preserve">
          <source>Load-balancing shares out the work of GC between the available cores. This is a good idea when the heap is large and we need to parallelise the GC work, however it is also pessimal for the short young-generation collections in a parallel program, because it can harm locality by moving data from the cache of the CPU where is it being used to the cache of another CPU. Hence the default is to do load-balancing only in the old-generation. In fact, for a parallel program it is sometimes beneficial to disable load-balancing entirely with &lt;code&gt;-qb&lt;/code&gt;.</source>
          <target state="translated">ロードバランシングは、利用可能なコア間でGCの作業を共有します。これは、ヒープが大きく、GC作業を並列化する必要がある場合に適していますが、CPUのキャッシュからデータを移動することによって局所性を損なう可能性があるため、並列プログラムの短い若い世代のコレクションにとっても悲惨です。別のCPUのキャッシュに使用されています。したがって、デフォルトでは、古い世代でのみ負荷分散が行われます。実際、並列プログラムの場合、 &lt;code&gt;-qb&lt;/code&gt; を使用して負荷分散を完全に無効にすることが有益な場合があります。</target>
        </trans-unit>
        <trans-unit id="5baeca2bd84e4324195dfc5aa4a5d2fe832d33c9" translate="yes" xml:space="preserve">
          <source>Loading a multi-module program is just as straightforward; just give the name of the &amp;ldquo;topmost&amp;rdquo; module to the &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt; command (hint: &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt; can be abbreviated to &lt;code&gt;:l&lt;/code&gt;). The topmost module will normally be &lt;code&gt;Main&lt;/code&gt;, but it doesn&amp;rsquo;t have to be. GHCi will discover which modules are required, directly or indirectly, by the topmost module, and load them all in dependency order.</source>
          <target state="translated">マルチモジュールプログラムのロードも同じくらい簡単です。&lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt;コマンドに「最上位」のモジュールの名前を指定するだけです（ヒント&lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;:l&lt;/code&gt; に短縮できます）。一番上のモジュールは通常 &lt;code&gt;Main&lt;/code&gt; ですが、そうである必要はありません。 GHCiは、最上位のモジュールによって直接または間接的に必要なモジュールを検出し、それらをすべて依存関係順にロードします。</target>
        </trans-unit>
        <trans-unit id="3ca542db8dd842ccea2e2f49600e491d4a676f0a" translate="yes" xml:space="preserve">
          <source>Loc</source>
          <target state="translated">Loc</target>
        </trans-unit>
        <trans-unit id="94637a234d4833c0a67b7a4f6b5d70bd1cdd5712" translate="yes" xml:space="preserve">
          <source>Local Time</source>
          <target state="translated">現地時間</target>
        </trans-unit>
        <trans-unit id="ab3cb665e2195c48dc51ad950c912c0fa2cb8e4a" translate="yes" xml:space="preserve">
          <source>Local allocation</source>
          <target state="translated">ローカル配分</target>
        </trans-unit>
        <trans-unit id="0478f8de1f3f270ad9e2bf09aa44262b4422de07" translate="yes" xml:space="preserve">
          <source>Local name bound outside of the TH AST</source>
          <target state="translated">TH ASTの外側にバインドされたローカル名</target>
        </trans-unit>
        <trans-unit id="93c22935b426d63080a636bc51d84b1a5c5cca31" translate="yes" xml:space="preserve">
          <source>Local, exclusive, left-biased choice: If left parser locally produces any result at all, then right parser is not used.</source>
          <target state="translated">ローカル、排他的、左に偏った選択:左パーサがローカルに結果を出す場合、右パーサは使用されません。</target>
        </trans-unit>
        <trans-unit id="478df254596a4a4a51b18fe7c43423e110e9c8b9" translate="yes" xml:space="preserve">
          <source>LocalMode</source>
          <target state="translated">LocalMode</target>
        </trans-unit>
        <trans-unit id="9cb40f7cd87e6348d6d2464d28eeaa1636f17835" translate="yes" xml:space="preserve">
          <source>LocalTime</source>
          <target state="translated">LocalTime</target>
        </trans-unit>
        <trans-unit id="8970f0e691a0a23a47517698017c997507efd496" translate="yes" xml:space="preserve">
          <source>Locale</source>
          <target state="translated">Locale</target>
        </trans-unit>
        <trans-unit id="c72c9f7a9c187a5da0f209dc188fa32ae35d17f4" translate="yes" xml:space="preserve">
          <source>Locale representing American usage.</source>
          <target state="translated">アメリカでの使用法を表すロケール。</target>
        </trans-unit>
        <trans-unit id="b7a9db328cdf327a87303972030f518b2e1143a4" translate="yes" xml:space="preserve">
          <source>Locale support</source>
          <target state="translated">現地でのサポート</target>
        </trans-unit>
        <trans-unit id="6f1b4ce09e502ee2cc257e3b65eb100b21e07dcd" translate="yes" xml:space="preserve">
          <source>LocaleTestFlags</source>
          <target state="translated">LocaleTestFlags</target>
        </trans-unit>
        <trans-unit id="d219c68101f532de10add2cf42fb9dbeca73d3be" translate="yes" xml:space="preserve">
          <source>Location</source>
          <target state="translated">Location</target>
        </trans-unit>
        <trans-unit id="04685f4c01bb7310cd3e866073d0858b658078ed" translate="yes" xml:space="preserve">
          <source>Location information about an address from a backtrace.</source>
          <target state="translated">バックトレースからの住所の位置情報。</target>
        </trans-unit>
        <trans-unit id="5131787646387f0d5f88f17ccb4880dde6ba21d3" translate="yes" xml:space="preserve">
          <source>Lock the semaphore, blocking until it becomes available. Since this is done through a system call, this will block the *entire runtime*, not just the current thread. If this is not the behaviour you want, use semThreadWait instead.</source>
          <target state="translated">セマフォをロックし、利用可能になるまでブロックします。これはシステムコールによって行われるので、現在のスレッドだけでなく、*ランタイム*全体をブロックします。もし、これが望まれる動作ではない場合は、代わりに semThreadWait を使用してください。</target>
        </trans-unit>
        <trans-unit id="79ad9e43cfdad7f13ded5dc73bb870eee73c9832" translate="yes" xml:space="preserve">
          <source>LockMode</source>
          <target state="translated">LockMode</target>
        </trans-unit>
        <trans-unit id="031e1faa819e43723677621db8e08752f93d196c" translate="yes" xml:space="preserve">
          <source>LockRequest</source>
          <target state="translated">LockRequest</target>
        </trans-unit>
        <trans-unit id="d1d6079f6b5f44c82f4e240cfc0156faa4fc5b60" translate="yes" xml:space="preserve">
          <source>Locking</source>
          <target state="translated">Locking</target>
        </trans-unit>
        <trans-unit id="db36a6985ae81e7f06f9b77a678b760e42fb6c81" translate="yes" xml:space="preserve">
          <source>Log base 2 (round down) of natural numbers. &lt;code&gt;Log 0&lt;/code&gt; is undefined (i.e., it cannot be reduced).</source>
          <target state="translated">自然数の対数2（切り捨て）。 &lt;code&gt;Log 0&lt;/code&gt; は未定義です（つまり、削減できません）。</target>
        </trans-unit>
        <trans-unit id="705364a478cdab0540a4c25854746a42ccf2183f" translate="yes" xml:space="preserve">
          <source>Log events as text to standard output, instead of to the &lt;code&gt;.eventlog&lt;/code&gt; file. The ⟨flags⟩ are the same as for &lt;code&gt;-l&lt;/code&gt;, with the additional option &lt;code&gt;t&lt;/code&gt; which indicates that the each event printed should be preceded by a timestamp value (in the binary &lt;code&gt;.eventlog&lt;/code&gt; file, all events are automatically associated with a timestamp).</source>
          <target state="translated">イベントを &lt;code&gt;.eventlog&lt;/code&gt; ファイルではなく、テキストとして標準出力に記録します。「フラグ」は &lt;code&gt;-l&lt;/code&gt; の場合と同じですが、出力される各イベントの前にタイムスタンプ値が必要であることを示す追加オプション &lt;code&gt;t&lt;/code&gt; があります（バイナリ &lt;code&gt;.eventlog&lt;/code&gt; ファイルでは、すべてのイベントが自動的にタイムスタンプに関連付けられます）。</target>
        </trans-unit>
        <trans-unit id="8c0b83ca797348a57e601331a800396f17173e34" translate="yes" xml:space="preserve">
          <source>Log events in binary format. Without any ⟨flags⟩ specified, this logs a default set of events, suitable for use with tools like ThreadScope.</source>
          <target state="translated">バイナリ形式でイベントを記録します。⟨flags⟩ が指定されていない場合、ThreadScope のようなツールでの使用に適したデフォルトのイベントセットをログに記録します。</target>
        </trans-unit>
        <trans-unit id="6687db9bf747c384bcc8d36417e42b952196b766" translate="yes" xml:space="preserve">
          <source>Log2</source>
          <target state="translated">Log2</target>
        </trans-unit>
        <trans-unit id="f61cb07b41e23ab1a79f15c05c0f8ba5b477ab22" translate="yes" xml:space="preserve">
          <source>Logarithmic-time access to any element with &lt;code&gt;&lt;a href=&quot;data-sequence#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:-33--63-&quot;&gt;!?&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:index&quot;&gt;index&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:insertAt&quot;&gt;insertAt&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:deleteAt&quot;&gt;deleteAt&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:adjust-39-&quot;&gt;adjust'&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;data-sequence#v:update&quot;&gt;update&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-sequence#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; を使用した任意の要素への対数時間アクセス、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:-33--63-&quot;&gt;!?&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:index&quot;&gt;index&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:insertAt&quot;&gt;insertAt&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:deleteAt&quot;&gt;deleteAt&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:adjust-39-&quot;&gt;adjust'&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:update&quot;&gt;update&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d4382c3d779a065ce766f6771a0eda14473b0c8a" translate="yes" xml:space="preserve">
          <source>Logarithmic-time concatenation with &lt;code&gt;&lt;a href=&quot;data-sequence#v:-62--60-&quot;&gt;&amp;gt;&amp;lt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-sequence#v:-62--60-&quot;&gt;&amp;gt;&amp;lt;&lt;/a&gt;&lt;/code&gt; を使用した対数時間連結</target>
        </trans-unit>
        <trans-unit id="c70a3bed95e2afdacbd2edd9f3abf4bff06b5635" translate="yes" xml:space="preserve">
          <source>Logarithmic-time splitting with &lt;code&gt;&lt;a href=&quot;data-sequence#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-sequence#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-sequence#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; による対数時間分割、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; アンド &lt;code&gt;&lt;a href=&quot;data-sequence#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9cebebf8637724ae58cb90aacf5d8022fb2074f2" translate="yes" xml:space="preserve">
          <source>Look at the Core syntax!</source>
          <target state="translated">Coreの構文を見てください!</target>
        </trans-unit>
        <trans-unit id="4f44d0f99b2e9f9e75bd7d13f005f42ba7ac90d3" translate="yes" xml:space="preserve">
          <source>Look at the first three elements of a sequence</source>
          <target state="translated">シーケンスの最初の3つの要素を見る</target>
        </trans-unit>
        <trans-unit id="036e3fb15ef00e480fa4d3acf7a733a4ca5f5561" translate="yes" xml:space="preserve">
          <source>Look for the exact match on the name in the built-in command list.</source>
          <target state="translated">ビルトインコマンドリストの名前に完全に一致するものを探します。</target>
        </trans-unit>
        <trans-unit id="1c5a3aaf89cbcab1e2d9dd0a759cbcb475301525" translate="yes" xml:space="preserve">
          <source>Look for your function in the interface file, then for the third field in the pragma; it should say &lt;code&gt;Strictness: ⟨string⟩&lt;/code&gt;. The ⟨string⟩ gives the strictness of the function&amp;rsquo;s arguments: see &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/Commentary/Compiler/Demand&quot;&gt;the GHC Commentary&lt;/a&gt; for a description of the strictness notation.</source>
          <target state="translated">インターフェースファイルで関数を探し、次にプラグマの3番目のフィールドを探します。それは言うべき &lt;code&gt;Strictness: ⟨string⟩&lt;/code&gt; 。「文字列」は、関数の引数の厳密さを示します。厳密さの表記の説明については、&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/Commentary/Compiler/Demand&quot;&gt;GHC解説&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6a08e53663e845cc46457faaa8a00f1851876f2c" translate="yes" xml:space="preserve">
          <source>Look for your function in the interface file, then for the third field in the pragma; it should say &lt;code&gt;Strictness: ⟨string⟩&lt;/code&gt;. The ⟨string⟩ gives the strictness of the function&amp;rsquo;s arguments: see &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/commentary/compiler/demand&quot;&gt;the GHC Commentary&lt;/a&gt; for a description of the strictness notation.</source>
          <target state="translated">Look for your function in the interface file, then for the third field in the pragma; it should say &lt;code&gt;Strictness: ⟨string⟩&lt;/code&gt; . The ⟨string⟩ gives the strictness of the function&amp;rsquo;s arguments: see &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/commentary/compiler/demand&quot;&gt;the GHC Commentary&lt;/a&gt; for a description of the strictness notation.</target>
        </trans-unit>
        <trans-unit id="646113c2b824e740bba103f465367c553a9eb4ec" translate="yes" xml:space="preserve">
          <source>Look up a boolean capability in the terminfo database, and fail if it's not defined.</source>
          <target state="translated">terminfoデータベースのブール型ケイパビリティを検索し、定義されていない場合は失敗します。</target>
        </trans-unit>
        <trans-unit id="c4c0a18679ef62e4477ab6e7f74f367ea337ce4c" translate="yes" xml:space="preserve">
          <source>Look up a boolean capability in the terminfo database.</source>
          <target state="translated">terminfoデータベースのブール型ケイパビリティを検索します。</target>
        </trans-unit>
        <trans-unit id="7a72d8f66e8e9faaac46b9deb897bfc7808a27e2" translate="yes" xml:space="preserve">
          <source>Look up a constructor by its representation</source>
          <target state="translated">コンストラクタをその表現で検索する</target>
        </trans-unit>
        <trans-unit id="c01e8f2c42ad48d0b20e9f727f7dd206fb60685a" translate="yes" xml:space="preserve">
          <source>Look up a numeric capability in the terminfo database.</source>
          <target state="translated">terminfoデータベースの数値能力を検索する。</target>
        </trans-unit>
        <trans-unit id="586b4cdd798272f8e1ea61b1bc18f4217842421c" translate="yes" xml:space="preserve">
          <source>Look up a string capability in the terminfo database. NOTE: This function is deprecated; use &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#v:tiGetOutput1&quot;&gt;tiGetOutput1&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">terminfoデータベースで文字列機能を検索します。注：この関数は非推奨です。代わりに &lt;code&gt;&lt;a href=&quot;system-console-terminfo-base#v:tiGetOutput1&quot;&gt;tiGetOutput1&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="a9c5ab2d2d0139456f33ef943c0b402c0ecc56ca" translate="yes" xml:space="preserve">
          <source>Look up an output capability in the terminfo database.</source>
          <target state="translated">terminfoデータベースの出力能力を検索します。</target>
        </trans-unit>
        <trans-unit id="9021c22f55a1940644c0487372237fc2b4baba0e" translate="yes" xml:space="preserve">
          <source>Look up an output capability which takes a fixed number of parameters (for example, &lt;code&gt;Int -&amp;gt; Int -&amp;gt; TermOutput&lt;/code&gt;).</source>
          <target state="translated">固定数のパラメーターを取る出力機能を &lt;code&gt;Int -&amp;gt; Int -&amp;gt; TermOutput&lt;/code&gt; ます（例えば、Int-&amp;gt; Int-&amp;gt; TermOutput）。</target>
        </trans-unit>
        <trans-unit id="f90efbcd7f1eeff6426b782004bd5ca5f919386e" translate="yes" xml:space="preserve">
          <source>Look up the control sequence for a given function sequence. For example, &lt;code&gt;functionKey 12&lt;/code&gt; retrieves the &lt;code&gt;kf12&lt;/code&gt; capability.</source>
          <target state="translated">特定の関数シーケンスの制御シーケンスを検索します。たとえば、 &lt;code&gt;functionKey 12&lt;/code&gt; は &lt;code&gt;kf12&lt;/code&gt; 機能を取得します。</target>
        </trans-unit>
        <trans-unit id="fee394d0e5a9ad0f8eab2e63dc20d9771d2d9b1c" translate="yes" xml:space="preserve">
          <source>Look up the given name in the (type namespace of the) current splice's scope. See &lt;a href=&quot;language-haskell-th-syntax#namelookup&quot;&gt;Language.Haskell.TH.Syntax&lt;/a&gt; for more details.</source>
          <target state="translated">現在のスプライスのスコープ（の名前空間）で指定された名前を検索します。詳細については、&lt;a href=&quot;language-haskell-th-syntax#namelookup&quot;&gt;Language.Haskell.TH.Syntax&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e1a8bb741760af7e3cd92aaa2b183fc9d4090ffa" translate="yes" xml:space="preserve">
          <source>Look up the given name in the (value namespace of the) current splice's scope. See &lt;a href=&quot;language-haskell-th-syntax#namelookup&quot;&gt;Language.Haskell.TH.Syntax&lt;/a&gt; for more details.</source>
          <target state="translated">現在のスプライスのスコープ（の名前空間）で指定された名前を検索します。詳細については、&lt;a href=&quot;language-haskell-th-syntax#namelookup&quot;&gt;Language.Haskell.TH.Syntax&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2c27f2b60d886938ddc087b401729fa285ab4f28" translate="yes" xml:space="preserve">
          <source>Look up the named Unicode encoding. May fail with</source>
          <target state="translated">名前のついたUnicodeエンコーディングを調べてください。で失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ba28f2554c741d83cd517f5e544d7d36306b57bc" translate="yes" xml:space="preserve">
          <source>Look-ahead: returns the part of the input that is left, without consuming it.</source>
          <target state="translated">先読み:入力を消費せずに、入力の残っている部分を返します。</target>
        </trans-unit>
        <trans-unit id="5eb4c34799d13148c8206bca4c92597220f71e0b" translate="yes" xml:space="preserve">
          <source>Looks up a &lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticPtr&quot;&gt;StaticPtr&lt;/a&gt;&lt;/code&gt; by its &lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticKey&quot;&gt;StaticKey&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">見上げ &lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticPtr&quot;&gt;StaticPtr&lt;/a&gt;&lt;/code&gt; そのことによって &lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticKey&quot;&gt;StaticKey&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7015ab4fc4ea24735dbe884238cc1b54bf915eca" translate="yes" xml:space="preserve">
          <source>Lookup</source>
          <target state="translated">Lookup</target>
        </trans-unit>
        <trans-unit id="b233a4c41641797d29c66ebedda9a193a0f05643" translate="yes" xml:space="preserve">
          <source>Lookup a constructor via a string</source>
          <target state="translated">コンストラクタを文字列で検索する</target>
        </trans-unit>
        <trans-unit id="9b088da5659869d545bfc9a0cf4258116c580743" translate="yes" xml:space="preserve">
          <source>LossOfPrecision</source>
          <target state="translated">LossOfPrecision</target>
        </trans-unit>
        <trans-unit id="853c95f571d7fa18c42a8e831393f2dd7e6ab65b" translate="yes" xml:space="preserve">
          <source>Low level CString conversions</source>
          <target state="translated">低レベルのCString変換</target>
        </trans-unit>
        <trans-unit id="9a62bf48cdec4e2fa80fc92d8d939e62810d8f8d" translate="yes" xml:space="preserve">
          <source>Low level conversions</source>
          <target state="translated">低レベルの変換</target>
        </trans-unit>
        <trans-unit id="e5145ff9d1cf255f56081e2cfd62251c784c3336" translate="yes" xml:space="preserve">
          <source>Low level execution</source>
          <target state="translated">低レベルの実行</target>
        </trans-unit>
        <trans-unit id="163304e093070531fe3b7fc36d57bfbdbc31b649" translate="yes" xml:space="preserve">
          <source>Low level imperative construction</source>
          <target state="translated">低レベルの命令構造</target>
        </trans-unit>
        <trans-unit id="50d7d6709a31a0dba951b8a2031b80d349c3b9d0" translate="yes" xml:space="preserve">
          <source>Low level interaction with CStrings</source>
          <target state="translated">CStringsとの低レベルな相互作用</target>
        </trans-unit>
        <trans-unit id="6177301b8c0f30b2a86ceb3d0093fdce68f18734" translate="yes" xml:space="preserve">
          <source>Low level operations</source>
          <target state="translated">低レベルの操作</target>
        </trans-unit>
        <trans-unit id="972a48160fb1f24ef39460baab7e378aa636e944" translate="yes" xml:space="preserve">
          <source>Low word of signed integer multiply.</source>
          <target state="translated">符号付き整数倍のローワード。</target>
        </trans-unit>
        <trans-unit id="0cabfc67ff1de7a21583a2681ad3451d8a86cf31" translate="yes" xml:space="preserve">
          <source>Low-level action that performs the real close.</source>
          <target state="translated">リアルクローズを行う低レベルアクション。</target>
        </trans-unit>
        <trans-unit id="0b24e544fe7febd646c007e1db09a744758b8a8c" translate="yes" xml:space="preserve">
          <source>Low-level capabilities</source>
          <target state="translated">低レベルの能力</target>
        </trans-unit>
        <trans-unit id="f7ce8d6baf61dc38e2ccf714c9bc7f73b9b6975e" translate="yes" xml:space="preserve">
          <source>Low-level creation of the ParsecT type. You really shouldn't have to do this.</source>
          <target state="translated">ParsecT型の低レベル作成。これは本当にやめたほうがいいです。</target>
        </trans-unit>
        <trans-unit id="9ee648a6dd68992ea5cde1cd8d86b7c63d4484d6" translate="yes" xml:space="preserve">
          <source>Low-level manipulation</source>
          <target state="translated">低レベルの操作</target>
        </trans-unit>
        <trans-unit id="9a08a2849208613a25ed31a1dac45b5fb6adb67f" translate="yes" xml:space="preserve">
          <source>Low-level operations</source>
          <target state="translated">低レベルの操作</target>
        </trans-unit>
        <trans-unit id="13fab495e207628ea2444c309679bf776f4535b0" translate="yes" xml:space="preserve">
          <source>Low-level support for text I/O.</source>
          <target state="translated">テキストI/Oの低レベルサポート。</target>
        </trans-unit>
        <trans-unit id="f00047587dbdef15842bce850c4a2657569cb360" translate="yes" xml:space="preserve">
          <source>Low-level unpacking of the ParsecT type. To run your parser, please look to runPT, runP, runParserT, runParser and other such functions.</source>
          <target state="translated">ParsecT型の低レベルアンパックです。パーサーを実行するには、runPT,runP,runParserT,runParserなどを見てください。</target>
        </trans-unit>
        <trans-unit id="bf0c3ee8ad72ff8c9d2eb19ea3532abdb2e4b477" translate="yes" xml:space="preserve">
          <source>Lowercase pattern syntax functions</source>
          <target state="translated">小文字パターン構文関数</target>
        </trans-unit>
        <trans-unit id="a6b810d16a3b6d530ef202b4a2d4f83a9f2052b1" translate="yes" xml:space="preserve">
          <source>LowercaseLetter</source>
          <target state="translated">LowercaseLetter</target>
        </trans-unit>
        <trans-unit id="3f339b0acbc3595803d9353e1c9001e104dfb4d7" translate="yes" xml:space="preserve">
          <source>Lt: Letter, Titlecase</source>
          <target state="translated">中尉 手紙、タイトルケース</target>
        </trans-unit>
        <trans-unit id="fae8b46afcb632cf202e5b21df13474f2135a227" translate="yes" xml:space="preserve">
          <source>Lu: Letter, Uppercase</source>
          <target state="translated">Lu:文字、大文字</target>
        </trans-unit>
        <trans-unit id="f6d00f67258bac7b9cebb726f8da4dc1bfbef425" translate="yes" xml:space="preserve">
          <source>M1</source>
          <target state="translated">M1</target>
        </trans-unit>
        <trans-unit id="b215a5a119a163d59cea8f190c2384c43d8ef927" translate="yes" xml:space="preserve">
          <source>MATHEMATICAL LEFT WHITE SQUARE BRACKET</source>
          <target state="translated">数学的左白四角ブラケット</target>
        </trans-unit>
        <trans-unit id="3040721941e3243f84460b3f75c97496f9d468d1" translate="yes" xml:space="preserve">
          <source>MATHEMATICAL RIGHT WHITE SQUARE BRACKET</source>
          <target state="translated">MATHEMATICAL RIGHT WHITE SQUARE BRACKET</target>
        </trans-unit>
        <trans-unit id="b4d743ca88772a1217c91cba52116bdb88ef5d73" translate="yes" xml:space="preserve">
          <source>MArray</source>
          <target state="translated">MArray</target>
        </trans-unit>
        <trans-unit id="4b3e60b5afe51211e63fc50f1522b81c9ed52c4b" translate="yes" xml:space="preserve">
          <source>MBlock size</source>
          <target state="translated">MBブロックサイズ</target>
        </trans-unit>
        <trans-unit id="66d7b21255c88198fbbcee4794e30cfb5de722f2" translate="yes" xml:space="preserve">
          <source>MOUSEINPUT</source>
          <target state="translated">MOUSEINPUT</target>
        </trans-unit>
        <trans-unit id="2dafde4ace7cf035bd8fac9346bb5f75c97c5928" translate="yes" xml:space="preserve">
          <source>MVar</source>
          <target state="translated">MVar</target>
        </trans-unit>
        <trans-unit id="fb09978b40c384ebd545f0a9a7fcdec83351ee76" translate="yes" xml:space="preserve">
          <source>MVar#</source>
          <target state="translated">MVar#</target>
        </trans-unit>
        <trans-unit id="46d2f54777058d8f461ec0e1349a0d4dfc5ea0e9" translate="yes" xml:space="preserve">
          <source>MVars</source>
          <target state="translated">MVars</target>
        </trans-unit>
        <trans-unit id="ff6912e2f0ea1f0a272acab877e81da5e3f73b0e" translate="yes" xml:space="preserve">
          <source>Magenta</source>
          <target state="translated">Magenta</target>
        </trans-unit>
        <trans-unit id="6c6f4a44e9e83aafaa5023b2c1c354521ec83aa4" translate="yes" xml:space="preserve">
          <source>MagicHash</source>
          <target state="translated">MagicHash</target>
        </trans-unit>
        <trans-unit id="597dbcc3afd445131f986826cdf6caa30f1f99dd" translate="yes" xml:space="preserve">
          <source>Maintainer</source>
          <target state="translated">Maintainer</target>
        </trans-unit>
        <trans-unit id="9ed930864a951ac93cbc26664a2297c407da9c9e" translate="yes" xml:space="preserve">
          <source>Maintaining variable bindings, or other shared environment.</source>
          <target state="translated">変数バインディングなどの共有環境の維持</target>
        </trans-unit>
        <trans-unit id="a8a516b79965afb8ee743e8779110117c528ae43" translate="yes" xml:space="preserve">
          <source>Make GHC be more precise about its treatment of bottom (but see also &lt;a href=&quot;#ghc-flag--fno-state-hack&quot;&gt;&lt;code&gt;-fno-state-hack&lt;/code&gt;&lt;/a&gt;). In particular, stop GHC eta-expanding through a case expression, which is good for performance, but bad if you are using &lt;code&gt;seq&lt;/code&gt; on partial applications.</source>
          <target state="translated">GHCの底部の扱いをより正確にします（ただし、&lt;a href=&quot;#ghc-flag--fno-state-hack&quot;&gt; &lt;code&gt;-fno-state-hack&lt;/code&gt; &lt;/a&gt;も参照してください）。特に、case式を使用してGHCのeta-expandingを停止します。これはパフォーマンスに優れていますが、部分的なアプリケーションで &lt;code&gt;seq&lt;/code&gt; を使用している場合は悪いです。</target>
        </trans-unit>
        <trans-unit id="d7420d41204c439a4f517471040fab645169f4e5" translate="yes" xml:space="preserve">
          <source>Make GHC be more precise about its treatment of bottom (but see also &lt;a href=&quot;using-optimisation#ghc-flag--fno-state-hack&quot;&gt;&lt;code&gt;-fno-state-hack&lt;/code&gt;&lt;/a&gt;). In particular, GHC will not eta-expand through a case expression.</source>
          <target state="translated">GHCの底部の扱いをより正確にします（ただし、&lt;a href=&quot;using-optimisation#ghc-flag--fno-state-hack&quot;&gt; &lt;code&gt;-fno-state-hack&lt;/code&gt; &lt;/a&gt;も参照してください）。特に、GHCはケース式を介してイータ展開しません。</target>
        </trans-unit>
        <trans-unit id="2fdef1410de7bb1f110ecf15d30ac3c953aad457" translate="yes" xml:space="preserve">
          <source>Make Strings an instance of &lt;code&gt;&lt;a href=&quot;text-parsec#t:Stream&quot;&gt;Stream&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; token type.</source>
          <target state="translated">文字 &lt;code&gt;&lt;a href=&quot;text-parsec#t:Stream&quot;&gt;Stream&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; トークンタイプのStreamのインスタンスにします。</target>
        </trans-unit>
        <trans-unit id="2d2d3352f83dfd1c05932c3401d3d788e9213d3c" translate="yes" xml:space="preserve">
          <source>Make Strings an instance of &lt;code&gt;&lt;a href=&quot;text-parsec#t:Stream&quot;&gt;Stream&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; token type.</source>
          <target state="translated">Make Strings an instance of &lt;code&gt;&lt;a href=&quot;text-parsec#t:Stream&quot;&gt;Stream&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; token type.</target>
        </trans-unit>
        <trans-unit id="c8574286f1db7f5674cdca2f0f347f3d37fbe842" translate="yes" xml:space="preserve">
          <source>Make a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; pointer to a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;, using the second argument as a finalizer to run when the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; is garbage-collected.</source>
          <target state="translated">作る &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; へのポインタ &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; をしたときに実行するファイナライザーとしての第二引数を使用して、 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; がガベージコレクションです。</target>
        </trans-unit>
        <trans-unit id="3c9caff43c15f5f5ce07d7d17ceba770b1aed418" translate="yes" xml:space="preserve">
          <source>Make a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; pointer to a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;, using the second argument as a finalizer to run when &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; is garbage-collected</source>
          <target state="translated">作る &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; へのポインタを &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; ときに実行するファイナライザーとしての第二引数を使用して、 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; がガベージコレクションであります</target>
        </trans-unit>
        <trans-unit id="59b220e362957ec29f398b074092e745f5e98507" translate="yes" xml:space="preserve">
          <source>Make a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; pointer to a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;, using the second argument as a finalizer to run when the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; is garbage-collected.</source>
          <target state="translated">Make a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; pointer to a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; , using the second argument as a finalizer to run when the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; is garbage-collected.</target>
        </trans-unit>
        <trans-unit id="43736e995d33c8137a44869b4d0d5452ba4e560a" translate="yes" xml:space="preserve">
          <source>Make a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; pointer to a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;, using the second argument as a finalizer to run when &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; is garbage-collected</source>
          <target state="translated">Make a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; pointer to a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; , using the second argument as a finalizer to run when &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; is garbage-collected</target>
        </trans-unit>
        <trans-unit id="bb1e49e8f1341ae8024c59aa4dfd0a0ff98889ea" translate="yes" xml:space="preserve">
          <source>Make a &lt;code&gt;&lt;a href=&quot;ghc-io-fd#t:FD&quot;&gt;FD&lt;/a&gt;&lt;/code&gt; from an existing file descriptor. Fails if the FD refers to a directory. If the FD refers to a file, &lt;code&gt;&lt;a href=&quot;ghc-io-fd#v:mkFD&quot;&gt;mkFD&lt;/a&gt;&lt;/code&gt; locks the file according to the Haskell 2010 single writer/multiple reader locking semantics (this is why we need the &lt;code&gt;&lt;a href=&quot;system-io#t:IOMode&quot;&gt;IOMode&lt;/a&gt;&lt;/code&gt; argument too).</source>
          <target state="translated">作る &lt;code&gt;&lt;a href=&quot;ghc-io-fd#t:FD&quot;&gt;FD&lt;/a&gt;&lt;/code&gt; を既存のファイルディスクリプタから。FDがディレクトリを参照している場合は失敗します。FDがファイルを参照する場合、 &lt;code&gt;&lt;a href=&quot;ghc-io-fd#v:mkFD&quot;&gt;mkFD&lt;/a&gt;&lt;/code&gt; はHaskell 2010の単一ライター/複数リーダーロックセマンティクスに従ってファイルをロックします（これが &lt;code&gt;&lt;a href=&quot;system-io#t:IOMode&quot;&gt;IOMode&lt;/a&gt;&lt;/code&gt; 引数も必要な理由です）。</target>
        </trans-unit>
        <trans-unit id="c7f75d66c23f2c823051ed78b549c0dc321c99c1" translate="yes" xml:space="preserve">
          <source>Make a &lt;code&gt;&lt;a href=&quot;system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; pointer to an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;, using the second argument as a finalizer to run when &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is garbage-collected</source>
          <target state="translated">作る &lt;code&gt;&lt;a href=&quot;system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; へのポインタを &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; ときに実行するファイナライザーとしての第二引数を使用して、 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; ガベージコレクションであります</target>
        </trans-unit>
        <trans-unit id="90c73ab748e0e00da22596dbc5fd000f5f781ad2" translate="yes" xml:space="preserve">
          <source>Make a &lt;code&gt;&lt;a href=&quot;system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; pointer to an &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt;, using the second argument as a finalizer to run when &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; is garbage-collected</source>
          <target state="translated">作る &lt;code&gt;&lt;a href=&quot;system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; へのポインタ &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; をしたときに実行するファイナライザーとしての第二引数を使用して、 &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; がガベージコレクションであります</target>
        </trans-unit>
        <trans-unit id="68976173fa646f3a0550c955065f1d56dd3d0c9c" translate="yes" xml:space="preserve">
          <source>Make a StablePtr that can be passed to the C function &lt;code&gt;hs_try_putmvar()&lt;/code&gt;. The RTS wants a &lt;code&gt;&lt;a href=&quot;foreign-stableptr#t:StablePtr&quot;&gt;StablePtr&lt;/a&gt;&lt;/code&gt; to the underlying &lt;code&gt;&lt;a href=&quot;ghc-exts#t:MVar-35-&quot;&gt;MVar#&lt;/a&gt;&lt;/code&gt;, but a &lt;code&gt;&lt;a href=&quot;ghc-exts#t:StablePtr-35-&quot;&gt;StablePtr#&lt;/a&gt;&lt;/code&gt; can only refer to lifted types, so we have to cheat by coercing.</source>
          <target state="translated">C関数 &lt;code&gt;hs_try_putmvar()&lt;/code&gt; に渡すことができるStablePtrを作成します。RTSは、基になる &lt;code&gt;&lt;a href=&quot;ghc-exts#t:MVar-35-&quot;&gt;MVar#&lt;/a&gt;&lt;/code&gt; への &lt;code&gt;&lt;a href=&quot;foreign-stableptr#t:StablePtr&quot;&gt;StablePtr&lt;/a&gt;&lt;/code&gt; を必要としますが、 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:StablePtr-35-&quot;&gt;StablePtr#&lt;/a&gt;&lt;/code&gt; はリフトされた型のみを参照できるため、強制的にチートする必要があります。</target>
        </trans-unit>
        <trans-unit id="340793623e1a085d7b8da534d1c4b5daea514359" translate="yes" xml:space="preserve">
          <source>Make a mutable array immutable, without copying.</source>
          <target state="translated">変異可能な配列をコピーせずに不変のものにします。</target>
        </trans-unit>
        <trans-unit id="c7e012d6c09327d0dafcfeae27a661402dd25db0" translate="yes" xml:space="preserve">
          <source>Make a mutable array of arrays immutable, without copying.</source>
          <target state="translated">コピーせずに変更可能な配列を不変配列にします。</target>
        </trans-unit>
        <trans-unit id="698be6d083fa7f3ca40015a52bb017297e592080" translate="yes" xml:space="preserve">
          <source>Make a mutable byte array immutable, without copying.</source>
          <target state="translated">変形可能なバイト配列をコピーせずに不変のものにします。</target>
        </trans-unit>
        <trans-unit id="46fdb0fb8e4b555aaff57055206c3612f29ab2c3" translate="yes" xml:space="preserve">
          <source>Make a path absolute, normalize the path, and remove as many indirections from it as possible. Any trailing path separators are discarded via &lt;code&gt;&lt;a href=&quot;../filepath-1.4.2.1/system-filepath-posix#v:dropTrailingPathSeparator&quot;&gt;dropTrailingPathSeparator&lt;/a&gt;&lt;/code&gt;. Additionally, on Windows the letter case of the path is canonicalized.</source>
          <target state="translated">パスを絶対パスにし、パスを正規化し、可能な限り多くの間接参照を削除します。後続のパス区切り文字は、 &lt;code&gt;&lt;a href=&quot;../filepath-1.4.2.1/system-filepath-posix#v:dropTrailingPathSeparator&quot;&gt;dropTrailingPathSeparator&lt;/a&gt;&lt;/code&gt; によって破棄されます。さらに、Windowsでは、パスの大文字と小文字は正規化されます。</target>
        </trans-unit>
        <trans-unit id="186ec7bfc50eae0a8d365be8aba8bea7326758f0" translate="yes" xml:space="preserve">
          <source>Make a reference to a local value that we can send remotely. This reference will keep the value that it refers to alive until &lt;code&gt;&lt;a href=&quot;ghci-remotetypes#v:freeRemoteRef&quot;&gt;freeRemoteRef&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="translated">リモートで送信できるローカル値への参照を作成します。この参照は、 &lt;code&gt;&lt;a href=&quot;ghci-remotetypes#v:freeRemoteRef&quot;&gt;freeRemoteRef&lt;/a&gt;&lt;/code&gt; が呼び出されるまで、参照する値を保持します。</target>
        </trans-unit>
        <trans-unit id="3c87f88ba73344e1ab783a73a9a5979fecf885d2" translate="yes" xml:space="preserve">
          <source>Make a unique directory. The returned &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the path of the created directory, which is padded with 6 random characters. The argument is the desired prefix of the filepath of the temporary directory to be created.</source>
          <target state="translated">一意のディレクトリを作成します。返される &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; は作成されたディレクトリのパスで、6つのランダムな文字が埋め込まれています。引数は、作成する一時ディレクトリのファイルパスの目的の接頭辞です。</target>
        </trans-unit>
        <trans-unit id="8d3ca167e4c389a68d7893e4900b4c3fb3ba06a9" translate="yes" xml:space="preserve">
          <source>Make a unique directory. The returned &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the path of the created directory, which is padded with 6 random characters. The argument is the desired prefix of the filepath of the temporary directory to be created.</source>
          <target state="translated">Make a unique directory. The returned &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the path of the created directory, which is padded with 6 random characters. The argument is the desired prefix of the filepath of the temporary directory to be created.</target>
        </trans-unit>
        <trans-unit id="81daa0d04fc3934a4c048011fb03208252f865cf" translate="yes" xml:space="preserve">
          <source>Make a unique directory. The returned &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#t:RawFilePath&quot;&gt;RawFilePath&lt;/a&gt;&lt;/code&gt; is the path of the created directory, which is padded with 6 random characters. The argument is the desired prefix of the filepath of the temporary directory to be created.</source>
          <target state="translated">一意のディレクトリを作成します。返される &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#t:RawFilePath&quot;&gt;RawFilePath&lt;/a&gt;&lt;/code&gt; は、作成されたディレクトリのパスで、6つのランダムな文字が埋め込まれます。引数は、作成する一時ディレクトリのファイルパスの目的の接頭辞です。</target>
        </trans-unit>
        <trans-unit id="6a7af8c778c02a1f594bc3983b00324c16ab69b7" translate="yes" xml:space="preserve">
          <source>Make a unique filename and open it for reading/writing. The returned &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the (possibly relative) path of the created file, which is padded with 6 random characters. The argument is the desired prefix of the filepath of the temporary file to be created.</source>
          <target state="translated">一意のファイル名を作成し、読み取り/書き込み用に開きます。返される &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; は、作成されたファイルの（おそらく相対）パスで、6つのランダムな文字が埋め込まれます。引数は、作成する一時ファイルのファイルパスの希望の接頭辞です。</target>
        </trans-unit>
        <trans-unit id="330d0dcda662cdafbb50eaf0cfa0b95ff8c0f42d" translate="yes" xml:space="preserve">
          <source>Make a unique filename and open it for reading/writing. The returned &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the (possibly relative) path of the created file, which is padded with 6 random characters. The argument is the desired prefix of the filepath of the temporary file to be created.</source>
          <target state="translated">Make a unique filename and open it for reading/writing. The returned &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the (possibly relative) path of the created file, which is padded with 6 random characters. The argument is the desired prefix of the filepath of the temporary file to be created.</target>
        </trans-unit>
        <trans-unit id="55c11d94c0f07317aebbc90457dbda2e57127b10" translate="yes" xml:space="preserve">
          <source>Make a unique filename and open it for reading/writing. The returned &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#t:RawFilePath&quot;&gt;RawFilePath&lt;/a&gt;&lt;/code&gt; is the (possibly relative) path of the created file, which is padded with 6 random characters. The argument is the desired prefix of the filepath of the temporary file to be created.</source>
          <target state="translated">一意のファイル名を作成し、読み取り/書き込み用に開きます。返される &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#t:RawFilePath&quot;&gt;RawFilePath&lt;/a&gt;&lt;/code&gt; は、作成されたファイルの（相対パスの可能性があります）パスで、6つのランダムな文字が埋め込まれます。引数は、作成する一時ファイルのファイルパスの希望の接頭辞です。</target>
        </trans-unit>
        <trans-unit id="f72f7ad8e05097abb6ee289f5eba19d0e1965f5c" translate="yes" xml:space="preserve">
          <source>Make a unique filename with a given prefix and suffix and open it for reading/writing. The returned &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the (possibly relative) path of the created file, which contains 6 random characters in between the prefix and suffix. The first argument is the desired prefix of the filepath of the temporary file to be created. The second argument is the suffix of the temporary file to be created.</source>
          <target state="translated">特定のプレフィックスとサフィックスを使用して一意のファイル名を作成し、読み取り/書き込み用に開きます。返される &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; は、作成されたファイルの（おそらく相対）パスで、プレフィックスとサフィックスの間にランダムな6文字が含まれています。最初の引数は、作成する一時ファイルのファイルパスの希望の接頭辞です。 2番目の引数は、作成する一時ファイルのサフィックスです。</target>
        </trans-unit>
        <trans-unit id="95866426633d8275aa8fda94a7e85fdc02e90eb7" translate="yes" xml:space="preserve">
          <source>Make a unique filename with a given prefix and suffix and open it for reading/writing. The returned &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the (possibly relative) path of the created file, which contains 6 random characters in between the prefix and suffix. The first argument is the desired prefix of the filepath of the temporary file to be created. The second argument is the suffix of the temporary file to be created.</source>
          <target state="translated">Make a unique filename with a given prefix and suffix and open it for reading/writing. The returned &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; is the (possibly relative) path of the created file, which contains 6 random characters in between the prefix and suffix. The first argument is the desired prefix of the filepath of the temporary file to be created. The second argument is the suffix of the temporary file to be created.</target>
        </trans-unit>
        <trans-unit id="393f21690a4ea611c6c45f302e4ee432d74df383" translate="yes" xml:space="preserve">
          <source>Make a weak pointer to a &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt;. It can be important to do this if you want to hold a reference to a &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; while still allowing the thread to receive the &lt;code&gt;BlockedIndefinitely&lt;/code&gt; family of exceptions (e.g. &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt;). Holding a normal &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; reference will prevent the delivery of &lt;code&gt;BlockedIndefinitely&lt;/code&gt; exceptions because the reference could be used as the target of &lt;code&gt;&lt;a href=&quot;control-concurrent#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; at any time, which would unblock the thread.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への弱いポインタを作成します。スレッドが例外の &lt;code&gt;BlockedIndefinitely&lt;/code&gt; ファミリーを受信できるようにしながら、 &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への参照を保持したい場合（たとえば、 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt; ）、これを行うことが重要になる場合があります。通常の &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 参照を保持すると、参照がいつでも &lt;code&gt;&lt;a href=&quot;control-concurrent#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; のターゲットとして使用され、スレッドのブロックが解除されるため、 &lt;code&gt;BlockedIndefinitely&lt;/code&gt; 例外の配信が防止されます。</target>
        </trans-unit>
        <trans-unit id="0efc78aad57ab0b135f7ad0c2ee2f1ea5372a73a" translate="yes" xml:space="preserve">
          <source>Make a weak pointer to a &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt;. It can be important to do this if you want to hold a reference to a &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; while still allowing the thread to receive the &lt;code&gt;BlockedIndefinitely&lt;/code&gt; family of exceptions (e.g. &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt;). Holding a normal &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; reference will prevent the delivery of &lt;code&gt;BlockedIndefinitely&lt;/code&gt; exceptions because the reference could be used as the target of &lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; at any time, which would unblock the thread.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への弱いポインタを作成します。スレッドが例外の &lt;code&gt;BlockedIndefinitely&lt;/code&gt; ファミリーを受信できるようにしながら、 &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への参照を保持したい場合（たとえば、 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt; ）、これを行うことが重要になる場合があります。通常の &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 参照を保持すると、参照がいつでも &lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; のターゲットとして使用され、スレッドのブロックが解除されるため、 &lt;code&gt;BlockedIndefinitely&lt;/code&gt; 例外の配信が防止されます。</target>
        </trans-unit>
        <trans-unit id="a77491851c6d1ffca83dc5af796a06989b259ab9" translate="yes" xml:space="preserve">
          <source>Make a weak pointer to a &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt;. It can be important to do this if you want to hold a reference to a &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; while still allowing the thread to receive the &lt;code&gt;BlockedIndefinitely&lt;/code&gt; family of exceptions (e.g. &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt;). Holding a normal &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; reference will prevent the delivery of &lt;code&gt;BlockedIndefinitely&lt;/code&gt; exceptions because the reference could be used as the target of &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; at any time, which would unblock the thread.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への弱いポインタを作成します。スレッドが例外の &lt;code&gt;BlockedIndefinitely&lt;/code&gt; ファミリーを受信できるようにしながら、 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; への参照を保持したい場合（たとえば、 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#t:BlockedIndefinitelyOnMVar&quot;&gt;BlockedIndefinitelyOnMVar&lt;/a&gt;&lt;/code&gt; ）、これを行うことが重要になる場合があります。通常の &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 参照を保持すると、参照がいつでも &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; のターゲットとして使用され、スレッドのブロックが解除されるため、 &lt;code&gt;BlockedIndefinitely&lt;/code&gt; 例外の配信が防止されます。</target>
        </trans-unit>
        <trans-unit id="9f678ce0a5f94456a91a790fc3be2c2ec6925020" translate="yes" xml:space="preserve">
          <source>Make an immutable array mutable, without copying.</source>
          <target state="translated">コピーせずに不変の配列を変異可能にします。</target>
        </trans-unit>
        <trans-unit id="df39c3ecba9f1a1d5927f8873184709183484ed4" translate="yes" xml:space="preserve">
          <source>Make bindings in the current module strict by default.</source>
          <target state="translated">現在のモジュールのバインディングをデフォルトで厳密にします。</target>
        </trans-unit>
        <trans-unit id="b462570effd4237ee90c797f361ccb9ef392f0ca" translate="yes" xml:space="preserve">
          <source>Make dependencies that declare that files with suffix &lt;code&gt;.⟨suf⟩⟨osuf⟩&lt;/code&gt; depend on interface files with suffix &lt;code&gt;.⟨suf⟩hi&lt;/code&gt;</source>
          <target state="translated">接尾辞でそのファイルを宣言メイクの依存関係 &lt;code&gt;.⟨suf⟩⟨osuf⟩&lt;/code&gt; 接尾辞インタフェースファイルに依存 &lt;code&gt;.⟨suf⟩hi&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b9d645523fe749f3d314ba22eb6324344c7aca9" translate="yes" xml:space="preserve">
          <source>Make dependencies that declare that files with suffix &lt;code&gt;.⟨suf⟩⟨osuf⟩&lt;/code&gt; depend on interface files with suffix &lt;code&gt;.⟨suf⟩hi&lt;/code&gt;, or (for &lt;code&gt;{-# SOURCE #-}&lt;/code&gt; imports) on &lt;code&gt;.hi-boot&lt;/code&gt;. Multiple &lt;code&gt;-dep-suffix&lt;/code&gt; flags are permitted. For example, &lt;code&gt;-dep-suffix a_ -dep-suffix b_&lt;/code&gt; will make dependencies for &lt;code&gt;.hs&lt;/code&gt; on &lt;code&gt;.hi&lt;/code&gt;, &lt;code&gt;.a_hs&lt;/code&gt; on &lt;code&gt;.a_hi&lt;/code&gt;, and &lt;code&gt;.b_hs&lt;/code&gt; on &lt;code&gt;.b_hi&lt;/code&gt;. Note that you must provide at least one suffix; if you do not want a suffix then pass &lt;code&gt;-dep-suffix ''&lt;/code&gt;.</source>
          <target state="translated">メイクの依存関係と宣言しているサフィックスを持つファイル &lt;code&gt;.⟨suf⟩⟨osuf⟩&lt;/code&gt; 接尾辞インタフェースファイルに依存 &lt;code&gt;.⟨suf⟩hi&lt;/code&gt; 、または（のために &lt;code&gt;{-# SOURCE #-}&lt;/code&gt; 輸入）の &lt;code&gt;.hi-boot&lt;/code&gt; 。複数の &lt;code&gt;-dep-suffix&lt;/code&gt; フラグを使用できます。たとえば、 &lt;code&gt;-dep-suffix a_ -dep-suffix b_&lt;/code&gt; は、 &lt;code&gt;.hs&lt;/code&gt; を &lt;code&gt;.hi&lt;/code&gt; に、 &lt;code&gt;.a_hs&lt;/code&gt; を &lt;code&gt;.a_hi&lt;/code&gt; に、 &lt;code&gt;.b_hs&lt;/code&gt; を &lt;code&gt;.b_hi&lt;/code&gt; に依存させます。少なくとも1つのサフィックスを指定する必要があることに注意してください。サフィックスが必要ない場合は、 &lt;code&gt;-dep-suffix ''&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="4f58245b56849264d71b5f006aa40914e92e5165" translate="yes" xml:space="preserve">
          <source>Make dictionaries strict</source>
          <target state="translated">辞書を厳しくする</target>
        </trans-unit>
        <trans-unit id="f7e4637506fdb1c126cf33d58aefa19e41c7d250" translate="yes" xml:space="preserve">
          <source>Make dictionaries strict.</source>
          <target state="translated">辞書を厳しくする。</target>
        </trans-unit>
        <trans-unit id="5455661e420f1ccaf72cf9dabbbfecf771d7db4a" translate="yes" xml:space="preserve">
          <source>Make dictionary-valued expressions seem cheap to the optimiser.</source>
          <target state="translated">オプティマイザーには、辞書に値を付けた表現を安く見せるようにします。</target>
        </trans-unit>
        <trans-unit id="6f85a3e8f6df876856512758475047874462d99e" translate="yes" xml:space="preserve">
          <source>Make fields of data types defined in the current module strict by default.</source>
          <target state="translated">現在のモジュールで定義されているデータ型のフィールドをデフォルトで厳密にします。</target>
        </trans-unit>
        <trans-unit id="af0e48df1414b6d5a7855574141f6461c5ce4805" translate="yes" xml:space="preserve">
          <source>Make suggestions for mis-spelled names.</source>
          <target state="translated">誤ったスペルの名前を提案してください。</target>
        </trans-unit>
        <trans-unit id="88ce76b97dc5f41df8b9eb8175635106d378b209" translate="yes" xml:space="preserve">
          <source>Make sure that the either you switch off let-floating (&lt;code&gt;-fno-full-laziness&lt;/code&gt;), or that the call to &lt;code&gt;&lt;a href=&quot;ghc-io#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; cannot float outside a lambda. For example, if you say: &lt;code&gt;
           f x = unsafePerformIO (newIORef [])
        &lt;/code&gt; you may get only one reference cell shared between all calls to &lt;code&gt;f&lt;/code&gt;. Better would be &lt;code&gt;
           f x = unsafePerformIO (newIORef [x])
        &lt;/code&gt; because now it can't float outside the lambda.</source>
          <target state="translated">let-floatingをオフにするか（ &lt;code&gt;-fno-full-laziness&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;ghc-io#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; ）、またはunsafePerformIOの呼び出しがラムダの外でフロートできないことを確認してください。たとえば、 &lt;code&gt; f x = unsafePerformIO (newIORef []) &lt;/code&gt; とすると、 &lt;code&gt;f&lt;/code&gt; へのすべての呼び出し間で共有される参照セルが1つだけになる場合があります。 &lt;code&gt; f x = unsafePerformIO (newIORef [x]) &lt;/code&gt; 方が良いでしょう。ラムダの外側に浮かぶことができないからです。</target>
        </trans-unit>
        <trans-unit id="d84ebfc6fbaa58496dbe73b158b5610e0f005524" translate="yes" xml:space="preserve">
          <source>Make sure that the either you switch off let-floating (&lt;code&gt;-fno-full-laziness&lt;/code&gt;), or that the call to &lt;code&gt;&lt;a href=&quot;ghc-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; cannot float outside a lambda. For example, if you say: &lt;code&gt;
           f x = unsafePerformIO (newIORef [])
        &lt;/code&gt; you may get only one reference cell shared between all calls to &lt;code&gt;f&lt;/code&gt;. Better would be &lt;code&gt;
           f x = unsafePerformIO (newIORef [x])
        &lt;/code&gt; because now it can't float outside the lambda.</source>
          <target state="translated">let-floatingをオフにするか（ &lt;code&gt;-fno-full-laziness&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;ghc-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; ）、またはunsafePerformIOの呼び出しがラムダの外でフロートできないことを確認してください。たとえば、 &lt;code&gt; f x = unsafePerformIO (newIORef []) &lt;/code&gt; とすると、 &lt;code&gt;f&lt;/code&gt; へのすべての呼び出し間で共有される参照セルが1つだけになる場合があります。 &lt;code&gt; f x = unsafePerformIO (newIORef [x]) &lt;/code&gt; 方が良いでしょう。ラムダの外側に浮かぶことができないからです。</target>
        </trans-unit>
        <trans-unit id="156fd7ebd73ad9d7d9ba6f146870be0be3263cef" translate="yes" xml:space="preserve">
          <source>Make sure that the either you switch off let-floating (&lt;code&gt;-fno-full-laziness&lt;/code&gt;), or that the call to &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; cannot float outside a lambda. For example, if you say: &lt;code&gt;
           f x = unsafePerformIO (newIORef [])
        &lt;/code&gt; you may get only one reference cell shared between all calls to &lt;code&gt;f&lt;/code&gt;. Better would be &lt;code&gt;
           f x = unsafePerformIO (newIORef [x])
        &lt;/code&gt; because now it can't float outside the lambda.</source>
          <target state="translated">let-floatingをオフにするか（ &lt;code&gt;-fno-full-laziness&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; ）、またはunsafePerformIOの呼び出しがラムダの外でフロートできないことを確認してください。たとえば、 &lt;code&gt; f x = unsafePerformIO (newIORef []) &lt;/code&gt; とすると、 &lt;code&gt;f&lt;/code&gt; へのすべての呼び出し間で共有される参照セルが1つだけになる場合があります。 &lt;code&gt; f x = unsafePerformIO (newIORef [x]) &lt;/code&gt; 方が良いでしょう。ラムダの外側に浮かぶことができないからです。</target>
        </trans-unit>
        <trans-unit id="4240c3ab8260bb583d13050ed2064bbaae7bc43b" translate="yes" xml:space="preserve">
          <source>Make the interface loader be &lt;em&gt;real&lt;/em&gt; chatty about what it is up to.</source>
          <target state="translated">インタフェースローダーが可能作る&lt;em&gt;本当の&lt;/em&gt;ことは、最大であるかについてのおしゃべり。</target>
        </trans-unit>
        <trans-unit id="4358699704291b8174b75e1e492414b400dba246" translate="yes" xml:space="preserve">
          <source>Make the pattern match exhaustiveness checker be &lt;em&gt;real&lt;/em&gt; chatty about what it is up to.</source>
          <target state="translated">パターンマッチ網羅チェッカーを作ること&lt;em&gt;本当&lt;/em&gt;それが最大であるかについてのおしゃべり。</target>
        </trans-unit>
        <trans-unit id="d42a1e2a4e6f039639430d0f8ec96b5efe794a51" translate="yes" xml:space="preserve">
          <source>Make the renamer be &lt;em&gt;real&lt;/em&gt; chatty about what it is up to.</source>
          <target state="translated">名前変更者が何をしているかについて、&lt;em&gt;本当の意味で&lt;/em&gt;おしゃべりにする。</target>
        </trans-unit>
        <trans-unit id="8cd12a9927ea510906e14322831e59cfe0a4baca" translate="yes" xml:space="preserve">
          <source>Make the type checker be &lt;em&gt;real&lt;/em&gt; chatty about what it is up to.</source>
          <target state="translated">型チェッカーが何をしているのかについて&lt;em&gt;本当の意味で&lt;/em&gt;おしゃべりにします。</target>
        </trans-unit>
        <trans-unit id="15d9abd622590033f2c411d33953dd776c5be50c" translate="yes" xml:space="preserve">
          <source>Makes a &lt;code&gt;&lt;a href=&quot;ghc-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt; for an arbitrary object. The object passed as the first argument is not evaluated by &lt;code&gt;&lt;a href=&quot;ghc-stablename#v:makeStableName&quot;&gt;makeStableName&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">なる &lt;code&gt;&lt;a href=&quot;ghc-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt; 任意のオブジェクトのために。最初の引数として渡されたオブジェクトは、 &lt;code&gt;&lt;a href=&quot;ghc-stablename#v:makeStableName&quot;&gt;makeStableName&lt;/a&gt;&lt;/code&gt; によって評価されません。</target>
        </trans-unit>
        <trans-unit id="c12968a0552ecdcf1b9de9b4f5c5bede7e5bbb53" translate="yes" xml:space="preserve">
          <source>Makes a &lt;code&gt;&lt;a href=&quot;system-mem-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt; for an arbitrary object. The object passed as the first argument is not evaluated by &lt;code&gt;&lt;a href=&quot;system-mem-stablename#v:makeStableName&quot;&gt;makeStableName&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">なる &lt;code&gt;&lt;a href=&quot;system-mem-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt; 任意のオブジェクトのために。最初の引数として渡されたオブジェクトは、 &lt;code&gt;&lt;a href=&quot;system-mem-stablename#v:makeStableName&quot;&gt;makeStableName&lt;/a&gt;&lt;/code&gt; によって評価されません。</target>
        </trans-unit>
        <trans-unit id="aa32c2b4fd707872dac37cc6dbc8a7e855f28d02" translate="yes" xml:space="preserve">
          <source>Makes a binary Handle. This is for historical reasons; it should probably be a text Handle with the default encoding and newline translation instead.</source>
          <target state="translated">バイナリハンドルを作成します。これは歴史的な理由から、デフォルトのエンコーディングと改行変換を持つテキストハンドルにすべきです。</target>
        </trans-unit>
        <trans-unit id="d4e61217ddb45f4a69f77fed47cefb695ba63354" translate="yes" xml:space="preserve">
          <source>Makes a constructor for &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; のコンストラクタを作成します。</target>
        </trans-unit>
        <trans-unit id="675f8bacbe562ad639f450df630ba3e1d4142613" translate="yes" xml:space="preserve">
          <source>Makes a pointer to a field struct. It will have the type &lt;code&gt;Ptr a -&amp;gt; Ptr b&lt;/code&gt;.</source>
          <target state="translated">フィールド構造体へのポインタを作成します。タイプは &lt;code&gt;Ptr a -&amp;gt; Ptr b&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="15d722c20f3a7b347acb5b13726b5fa9b1a3a525" translate="yes" xml:space="preserve">
          <source>Makes a specific warning into a fatal error. The warning will be enabled if it hasn&amp;rsquo;t been enabled yet. Can be reversed with &lt;code&gt;-Wwarn=&amp;lt;wflag&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">特定の警告を致命的なエラーにします。警告は、まだ有効になっていない場合に有効になります。 &lt;code&gt;-Wwarn=&amp;lt;wflag&amp;gt;&lt;/code&gt; で逆にすることができます。</target>
        </trans-unit>
        <trans-unit id="b11cc1ed06b4ae510e6c368934b3332b8443ad9c" translate="yes" xml:space="preserve">
          <source>Makes any warning into a fatal error. Useful so that you don&amp;rsquo;t miss warnings when doing batch compilation. To reverse &lt;code&gt;-Werror&lt;/code&gt; and stop treating any warnings as errors use &lt;code&gt;-Wwarn&lt;/code&gt;, or use &lt;code&gt;-Wwarn=&amp;lt;wflag&amp;gt;&lt;/code&gt; to stop treating specific warnings as errors.</source>
          <target state="translated">警告を致命的なエラーにします。バッチコンパイルを行うときに警告を見逃さないようにするのに役立ちます。 &lt;code&gt;-Werror&lt;/code&gt; を元に戻し、警告をエラーとして処理しないようにするには、 &lt;code&gt;-Wwarn&lt;/code&gt; を使用するか、 &lt;code&gt;-Wwarn=&amp;lt;wflag&amp;gt;&lt;/code&gt; を使用して特定の警告をエラーとして処理しないようにします。</target>
        </trans-unit>
        <trans-unit id="bbf1ed151ae759b693edba02d868a0ae08a8295e" translate="yes" xml:space="preserve">
          <source>Makes the second handle a duplicate of the first handle. The second handle will be closed first, if it is not already.</source>
          <target state="translated">2 番目のハンドルを 1 番目のハンドルの複製にします。2 番目のハンドルは、まだ閉じられていない場合は最初に閉じられます。</target>
        </trans-unit>
        <trans-unit id="610ca9a4f461051b57571e94ee46024ad1945482" translate="yes" xml:space="preserve">
          <source>Making functors whose elements are notionally in the reverse order from the original functor.</source>
          <target state="translated">元のファンクタとは概念的に逆順に要素を持つファンクタを作る。</target>
        </trans-unit>
        <trans-unit id="de10c11c39a04c2dd93935591757ad821f0de619" translate="yes" xml:space="preserve">
          <source>Making functors with an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; instance that performs actions in the reverse order.</source>
          <target state="translated">逆の順序でアクションを実行する &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; インスタンスでファンクタを作成します。</target>
        </trans-unit>
        <trans-unit id="289b3ce3f004eadb698cbe23952c8692f75647d6" translate="yes" xml:space="preserve">
          <source>Making functors with an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; instance that performs actions in the reverse order.</source>
          <target state="translated">Making functors with an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; instance that performs actions in the reverse order.</target>
        </trans-unit>
        <trans-unit id="155fd1571bb064a261bef3cb9235ad72ee317621" translate="yes" xml:space="preserve">
          <source>Malloc some data and return a &lt;code&gt;&lt;a href=&quot;ghci-remotetypes#t:RemotePtr&quot;&gt;RemotePtr&lt;/a&gt;&lt;/code&gt; to it</source>
          <target state="translated">データをmallocして &lt;code&gt;&lt;a href=&quot;ghci-remotetypes#t:RemotePtr&quot;&gt;RemotePtr&lt;/a&gt;&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="357e8ecf448ec27f6c58902a75153131236e9618" translate="yes" xml:space="preserve">
          <source>Manage separate memory pools for each node.</source>
          <target state="translated">各ノードの個別のメモリプールを管理します。</target>
        </trans-unit>
        <trans-unit id="27a837f8eed8146ea6300d174b2ba753bef518d3" translate="yes" xml:space="preserve">
          <source>Manipulate &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; operations. All Chars will be truncated to 8 bits. It can be expected that these functions will run at identical speeds to their &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; equivalents in &lt;a href=&quot;data-bytestring&quot;&gt;Data.ByteString&lt;/a&gt;.</source>
          <target state="translated">操作 &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; の使用 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 動作を制御します。すべての文字は8ビットに切り捨てられます。これらの機能は、彼らのと同じ速度で動作することが期待できます &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; のに相当&lt;a href=&quot;data-bytestring&quot;&gt;Data.ByteString&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e8d02698e3a7db40c93071ad0130d603170bdbf3" translate="yes" xml:space="preserve">
          <source>Manipulate &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; operations. All Chars will be truncated to 8 bits. It can be expected that these functions will run at identical speeds to their &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; equivalents in &lt;a href=&quot;data-bytestring&quot;&gt;Data.ByteString&lt;/a&gt;.</source>
          <target state="translated">Manipulate &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; s using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; operations. All Chars will be truncated to 8 bits. It can be expected that these functions will run at identical speeds to their &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; equivalents in &lt;a href=&quot;data-bytestring&quot;&gt;Data.ByteString&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="2f6f1aebfb4c2d76356eff64760ef8d083e1ea9b" translate="yes" xml:space="preserve">
          <source>Manipulate &lt;em&gt;lazy&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; operations. All Chars will be truncated to 8 bits. It can be expected that these functions will run at identical speeds to their &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#v:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; equivalents in &lt;a href=&quot;data-bytestring-lazy&quot;&gt;Data.ByteString.Lazy&lt;/a&gt;.</source>
          <target state="translated">操作&lt;em&gt;怠惰&lt;/em&gt; &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; の使用 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 動作を制御します。すべての文字は8ビットに切り捨てられます。これらの機能は、彼らのと同じ速度で動作することが期待できます &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#v:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; のに相当&lt;a href=&quot;data-bytestring-lazy&quot;&gt;Data.ByteString.Lazy&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0938573170c5ad64ab547628da8f4334a36723ce" translate="yes" xml:space="preserve">
          <source>Manipulate &lt;em&gt;lazy&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; operations. All Chars will be truncated to 8 bits. It can be expected that these functions will run at identical speeds to their &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#v:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; equivalents in &lt;a href=&quot;data-bytestring-lazy&quot;&gt;Data.ByteString.Lazy&lt;/a&gt;.</source>
          <target state="translated">Manipulate &lt;em&gt;lazy&lt;/em&gt; &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; s using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; operations. All Chars will be truncated to 8 bits. It can be expected that these functions will run at identical speeds to their &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#v:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; equivalents in &lt;a href=&quot;data-bytestring-lazy&quot;&gt;Data.ByteString.Lazy&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="21b2945c3b95e9ba030912e565f7997d2afceb6a" translate="yes" xml:space="preserve">
          <source>Many codecs are not stateful, and in these case the state can be represented as &lt;code&gt;()&lt;/code&gt;. Other codecs maintain a state. For example, UTF-16 recognises a BOM (byte-order-mark) character at the beginning of the input, and remembers thereafter whether to use big-endian or little-endian mode. In this case, the state of the codec would include two pieces of information: whether we are at the beginning of the stream (the BOM only occurs at the beginning), and if not, whether to use the big or little-endian encoding.</source>
          <target state="translated">多くのコーデックはステートフルではなく、これらの場合、状態は &lt;code&gt;()&lt;/code&gt; として表すことができます。他のコーデックは状態を維持します。たとえば、UTF-16は入力の先頭でBOM（バイトオーダーマーク）文字を認識し、その後ビッグエンディアンモードまたはリトルエンディアンモードのどちらを使用するかを記憶します。この場合、コーデックの状態には2つの情報が含まれます。ストリームの先頭にあるかどうか（BOMは最初にのみ発生します）と、そうでない場合は、ビッグエンディアンまたはリトルエンディアンエンコーディングのどちらを使用するかです。</target>
        </trans-unit>
        <trans-unit id="24d0ab19e4e99147773dbcbe9263cdf0c945a575" translate="yes" xml:space="preserve">
          <source>Many functions in this module have the same names as functions in the &lt;a href=&quot;../base-4.13.0.0/prelude&quot;&gt;Prelude&lt;/a&gt; or in &lt;a href=&quot;../base-4.13.0.0/data-list&quot;&gt;Data.List&lt;/a&gt;. In almost all cases, these functions behave analogously. For example, &lt;code&gt;&lt;a href=&quot;data-sequence#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; filters a sequence in exactly the same way that &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude&quot;&gt;Prelude&lt;/a&gt;.&lt;a href=&quot;../base-4.13.0.0/prelude#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; filters a list. The only major exception is the &lt;code&gt;&lt;a href=&quot;data-sequence#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; function, which is based on the function by that name in &lt;a href=&quot;data-intmap&quot;&gt;Data.IntMap&lt;/a&gt; rather than the one in &lt;a href=&quot;../base-4.13.0.0/prelude&quot;&gt;Prelude&lt;/a&gt;.</source>
          <target state="translated">このモジュールの多くの関数は、&lt;a href=&quot;../base-4.13.0.0/prelude&quot;&gt;Prelude&lt;/a&gt;または&lt;a href=&quot;../base-4.13.0.0/data-list&quot;&gt;Data.Listの&lt;/a&gt;関数と同じ名前を持っています。ほとんどすべての場合、これらの関数は同様に動作します。たとえば、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude&quot;&gt;Prelude&lt;/a&gt;.&lt;a href=&quot;../base-4.13.0.0/prelude#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; とまったく同じ方法でシーケンスをフィルタリングします。filterはリストをフィルタリングします。唯一の主な例外は &lt;code&gt;&lt;a href=&quot;data-sequence#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; 関数で、これは&lt;a href=&quot;../base-4.13.0.0/prelude&quot;&gt;Preludeの&lt;/a&gt;&lt;a href=&quot;data-intmap&quot;&gt;関数&lt;/a&gt;ではなく、Data.IntMapのその名前の関数に基づいています。</target>
        </trans-unit>
        <trans-unit id="c62b5fa473677017f2721ca5795d98e992c22e65" translate="yes" xml:space="preserve">
          <source>Many functions in this module have the same names as functions in the &lt;a href=&quot;../base-4.14.1.0/prelude&quot;&gt;Prelude&lt;/a&gt; or in &lt;a href=&quot;../base-4.14.1.0/data-list&quot;&gt;Data.List&lt;/a&gt;. In almost all cases, these functions behave analogously. For example, &lt;code&gt;&lt;a href=&quot;data-sequence#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; filters a sequence in exactly the same way that &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude&quot;&gt;Prelude&lt;/a&gt;.&lt;a href=&quot;../base-4.14.1.0/prelude#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; filters a list. The only major exception is the &lt;code&gt;&lt;a href=&quot;data-sequence#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; function, which is based on the function by that name in &lt;a href=&quot;data-intmap&quot;&gt;Data.IntMap&lt;/a&gt; rather than the one in &lt;a href=&quot;../base-4.14.1.0/prelude&quot;&gt;Prelude&lt;/a&gt;.</source>
          <target state="translated">Many functions in this module have the same names as functions in the &lt;a href=&quot;../base-4.14.1.0/prelude&quot;&gt;Prelude&lt;/a&gt; or in &lt;a href=&quot;../base-4.14.1.0/data-list&quot;&gt;Data.List&lt;/a&gt;. In almost all cases, these functions behave analogously. For example, &lt;code&gt;&lt;a href=&quot;data-sequence#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; filters a sequence in exactly the same way that &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude&quot;&gt;Prelude&lt;/a&gt;.&lt;a href=&quot;../base-4.14.1.0/prelude#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; filters a list. The only major exception is the &lt;code&gt;&lt;a href=&quot;data-sequence#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; function, which is based on the function by that name in &lt;a href=&quot;data-intmap&quot;&gt;Data.IntMap&lt;/a&gt; rather than the one in &lt;a href=&quot;../base-4.14.1.0/prelude&quot;&gt;Prelude&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a54ffbaf5c6091b870718ed3779391643593140a" translate="yes" xml:space="preserve">
          <source>Many operations have a worst-case complexity of O(min(n,W)). This means that the operation can become linear in the number of elements with a maximum of &lt;em&gt;W&lt;/em&gt; -- the number of bits in an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; (32 or 64).</source>
          <target state="translated">多くの演算はO（min（n、W））の最悪の場合の複雑さを持っています。これは、演算が最大で&lt;em&gt;Wの&lt;/em&gt;要素数（ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; のビット数（32または64））で線形になる可能性があることを意味します。</target>
        </trans-unit>
        <trans-unit id="98a01da62d47f087f540e76f8d5b26b5e49b62ce" translate="yes" xml:space="preserve">
          <source>Many operations have a worst-case complexity of O(min(n,W)). This means that the operation can become linear in the number of elements with a maximum of &lt;em&gt;W&lt;/em&gt; -- the number of bits in an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; (32 or 64).</source>
          <target state="translated">Many operations have a worst-case complexity of O(min(n,W)). This means that the operation can become linear in the number of elements with a maximum of &lt;em&gt;W&lt;/em&gt; -- the number of bits in an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; (32 or 64).</target>
        </trans-unit>
        <trans-unit id="ab478f3efc840eebab919dff1b9512286f70c10c" translate="yes" xml:space="preserve">
          <source>Map</source>
          <target state="translated">Map</target>
        </trans-unit>
        <trans-unit id="2b7b80f10f3a81cda5d3d90fed79ebb948d0265b" translate="yes" xml:space="preserve">
          <source>Map &lt;code&gt;'\r\n'&lt;/code&gt; into &lt;code&gt;'\n'&lt;/code&gt; on input, and &lt;code&gt;'\n'&lt;/code&gt; to the native newline represetnation on output. This mode can be used on any platform, and works with text files using any newline convention. The downside is that &lt;code&gt;readFile &amp;gt;&amp;gt;= writeFile&lt;/code&gt; might yield a different file.</source>
          <target state="translated">地図 &lt;code&gt;'\r\n'&lt;/code&gt; 中に &lt;code&gt;'\n'&lt;/code&gt; 入力に、そして &lt;code&gt;'\n'&lt;/code&gt; 出力のネイティブ改行represetnationへ。このモードは任意のプラットフォームで使用でき、任意の改行規則を使用してテキストファイルで機能します。欠点は、 &lt;code&gt;readFile &amp;gt;&amp;gt;= writeFile&lt;/code&gt; が別のファイルを生成する可能性があることです。</target>
        </trans-unit>
        <trans-unit id="6d55454f009aa8f95f75c772db0fb5ae0e9a9272" translate="yes" xml:space="preserve">
          <source>Map &lt;code&gt;m1&lt;/code&gt;</source>
          <target state="translated">マップ &lt;code&gt;m1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5d73f39524fe5ef1af56ec8e22806ecc515086be" translate="yes" xml:space="preserve">
          <source>Map &lt;code&gt;m2&lt;/code&gt;</source>
          <target state="translated">マップ &lt;code&gt;m2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9983700cca6f292aa903742f89b52d541c8d933e" translate="yes" xml:space="preserve">
          <source>Map a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;-safe value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; セーフな値にマップします。</target>
        </trans-unit>
        <trans-unit id="0766fa419be24fb2dc55e7497743d52826668e62" translate="yes" xml:space="preserve">
          <source>Map a function over a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and concatenate the results</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; に関数をマッピングし、結果を連結します</target>
        </trans-unit>
        <trans-unit id="15035b59f86fdfce06c5503b47c04b11e811e80d" translate="yes" xml:space="preserve">
          <source>Map a function over a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and concatenate the results</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; に関数をマッピングし、結果を連結します</target>
        </trans-unit>
        <trans-unit id="b46e7ebb5140a1447b3c89113a3d9ae22bb0b79b" translate="yes" xml:space="preserve">
          <source>Map a function over a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and concatenate the results</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; に関数をマッピングし、結果を連結します</target>
        </trans-unit>
        <trans-unit id="6903ae5c580a3f2ab80be5d8534af3c46567f965" translate="yes" xml:space="preserve">
          <source>Map a function over a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and concatenate the results</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; に関数をマッピングし、結果を連結します</target>
        </trans-unit>
        <trans-unit id="9f9558286be8174c824362eb946ace711872dbf8" translate="yes" xml:space="preserve">
          <source>Map a function over a &lt;code&gt;&lt;a href=&quot;data-list-nonempty#t:NonEmpty&quot;&gt;NonEmpty&lt;/a&gt;&lt;/code&gt; stream.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#t:NonEmpty&quot;&gt;NonEmpty&lt;/a&gt;&lt;/code&gt; ストリームに関数をマッピングします。</target>
        </trans-unit>
        <trans-unit id="21fd99a4595253dffd079844b719d83735a7905f" translate="yes" xml:space="preserve">
          <source>Map a function over a list and concatenate the results.</source>
          <target state="translated">リストに関数をマッピングし、結果を連結します。</target>
        </trans-unit>
        <trans-unit id="9800e72be66dc6c45d2ad289e20ef1a9a51d98ad" translate="yes" xml:space="preserve">
          <source>Map a function over a stream that results in a stream and concatenate the results.</source>
          <target state="translated">結果がストリームになる関数をストリーム上にマッピングし、その結果を連結します。</target>
        </trans-unit>
        <trans-unit id="ad689681c3a3649d48f9aaad672101632605a134" translate="yes" xml:space="preserve">
          <source>Map a function over all the elements of a container and concatenate the resulting lists.</source>
          <target state="translated">コンテナのすべての要素に関数をマッピングし、結果のリストを連結します。</target>
        </trans-unit>
        <trans-unit id="1a8247db8adfeefa619b1655afff9beae6787d09" translate="yes" xml:space="preserve">
          <source>Map a user interaction by modifying the base monad computation.</source>
          <target state="translated">ベースのモナド計算を変更することで、ユーザーインタラクションをマッピングします。</target>
        </trans-unit>
        <trans-unit id="7edbce9966aa6d05b4981154c3d88123653a0c5d" translate="yes" xml:space="preserve">
          <source>Map between &lt;code&gt;&lt;a href=&quot;control-monad-list#t:ListT&quot;&gt;ListT&lt;/a&gt;&lt;/code&gt; computations.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-list#t:ListT&quot;&gt;ListT&lt;/a&gt;&lt;/code&gt; 計算間のマッピング。</target>
        </trans-unit>
        <trans-unit id="712af23920428aa8ce829c6c9a926052d19c882a" translate="yes" xml:space="preserve">
          <source>Map between &lt;code&gt;&lt;a href=&quot;control-monad-trans-list#t:ListT&quot;&gt;ListT&lt;/a&gt;&lt;/code&gt; computations.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-trans-list#t:ListT&quot;&gt;ListT&lt;/a&gt;&lt;/code&gt; 計算間のマッピング。</target>
        </trans-unit>
        <trans-unit id="45e2cd283ebb4c611280d82cee74660fbe85bf94" translate="yes" xml:space="preserve">
          <source>Map both the return value and final state of a computation using the given function.</source>
          <target state="translated">与えられた関数を使用して、計算の戻り値と最終状態の両方をマッピングします。</target>
        </trans-unit>
        <trans-unit id="4273e77ff1728ba48d1f840696e743d1da1ee755" translate="yes" xml:space="preserve">
          <source>Map both the return value and output of a computation using the given function.</source>
          <target state="translated">与えられた関数を使用して計算の戻り値と出力の両方をマッピングします。</target>
        </trans-unit>
        <trans-unit id="803e1322fde156db8cc3128774fd2f8d4c99abec" translate="yes" xml:space="preserve">
          <source>Map capabilities to NUMA nodes. Capability C is mapped to NUMA node C mod N.</source>
          <target state="translated">能力をNUMAノードにマッピングします。能力Cは、NUMAノードC mod Nにマッピングされます。</target>
        </trans-unit>
        <trans-unit id="21de922b618d81f2e317aafc9cbebc99176766bc" translate="yes" xml:space="preserve">
          <source>Map contravariantly over a &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt; f _ y z&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt; f _ y z&lt;/code&gt; 反変的にマッピングします。</target>
        </trans-unit>
        <trans-unit id="aa119e405295642a5bcf3b77b05b9cefc544c124" translate="yes" xml:space="preserve">
          <source>Map contravariantly over a &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt; f x _ z&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt; f x _ z&lt;/code&gt; 反変的にマッピングします。</target>
        </trans-unit>
        <trans-unit id="7245e811517b83cae4b9adf19d8a5924072530a7" translate="yes" xml:space="preserve">
          <source>Map contravariantly over a &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt; f _ x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt; f _ x&lt;/code&gt; 反変的にマッピングします。</target>
        </trans-unit>
        <trans-unit id="09e23d7bb6cd983f23a248d179ee216a8f59e394" translate="yes" xml:space="preserve">
          <source>Map contravariantly over a &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt; f k _ y z&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt; f k _ y z&lt;/code&gt; 反変的にマッピングします。</target>
        </trans-unit>
        <trans-unit id="2569c1d7ccbe6013b4e6c78fb8e786a9a6095e76" translate="yes" xml:space="preserve">
          <source>Map contravariantly over a &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt; f k x _ z&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt; f k x _ z&lt;/code&gt; 反変的にマッピングします。</target>
        </trans-unit>
        <trans-unit id="a14103f7c1f26a2fcbb71bbe285a99bdcde54ff7" translate="yes" xml:space="preserve">
          <source>Map contravariantly over a &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt; f k _ x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt; f k _ x&lt;/code&gt; 反変的にマッピングします。</target>
        </trans-unit>
        <trans-unit id="a8eb552837e87415b9d4df127dcd174fef924114" translate="yes" xml:space="preserve">
          <source>Map covariantly over a &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt; f x y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt; f x y&lt;/code&gt; 共変的にマッピングします。</target>
        </trans-unit>
        <trans-unit id="46bcbb877a60019cf521e9ab67aa98b003657bfd" translate="yes" xml:space="preserve">
          <source>Map covariantly over a &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt; f x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt; f x&lt;/code&gt; 共変的にマッピングします。</target>
        </trans-unit>
        <trans-unit id="b9d6ab9d11a41a76d9162b3143fae97f6b16f455" translate="yes" xml:space="preserve">
          <source>Map covariantly over a &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt; f k x y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt; f k x y&lt;/code&gt; 共変的にマッピングします。</target>
        </trans-unit>
        <trans-unit id="3f706796547b811fccb9bd7e5484d305853862eb" translate="yes" xml:space="preserve">
          <source>Map covariantly over a &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt; f k x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt; f k x&lt;/code&gt; 共変的にマッピングします。</target>
        </trans-unit>
        <trans-unit id="80246f23eba01c63a2b57d2f1b0b002711c39d9f" translate="yes" xml:space="preserve">
          <source>Map covariantly over a &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt; f k x y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt; f k x y&lt;/code&gt; 共変的にマッピングします。</target>
        </trans-unit>
        <trans-unit id="a5cd585d64a0c1fc4c937dd0ee8ee4b052b09370" translate="yes" xml:space="preserve">
          <source>Map covariantly over a &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt; f k x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt; f k x&lt;/code&gt; 共変的にマッピングします。</target>
        </trans-unit>
        <trans-unit id="ce99df6d5a6c7da2f980fb998d55fe0e027d1fd2" translate="yes" xml:space="preserve">
          <source>Map covariantly over a &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt; f k x y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt; f k x y&lt;/code&gt; 共変的にマッピングします。</target>
        </trans-unit>
        <trans-unit id="2de75aa8ae3777dc3c106e78b70228d497cabfb4" translate="yes" xml:space="preserve">
          <source>Map covariantly over a &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt; f k x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt; f k x&lt;/code&gt; 共変的にマッピングします。</target>
        </trans-unit>
        <trans-unit id="1414775fb27f647a11edd9afbabc9f1f96d002c5" translate="yes" xml:space="preserve">
          <source>Map covariantly over the first argument.</source>
          <target state="translated">第一引数に共変的にマッピングします。</target>
        </trans-unit>
        <trans-unit id="d189acaf26502066081e31e150c1693816dae853" translate="yes" xml:space="preserve">
          <source>Map covariantly over the second argument.</source>
          <target state="translated">第二引数の上に共変的にマッピングします。</target>
        </trans-unit>
        <trans-unit id="a3b66d8ea2cb272c74911fcfbdc7cf4ca77953fb" translate="yes" xml:space="preserve">
          <source>Map each element of a structure to a monadic action, evaluate these actions from left to right, and collect the results. For a version that ignores the results see &lt;code&gt;&lt;a href=&quot;data-foldable#v:mapM_&quot;&gt;mapM_&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">構造の各要素をモナディックアクションにマップし、これらのアクションを左から右に評価して、結果を収集します。結果を無視するバージョンについては、 &lt;code&gt;&lt;a href=&quot;data-foldable#v:mapM_&quot;&gt;mapM_&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="02dfb7e92c38e4214d51e2b9595047ff1b8f9b31" translate="yes" xml:space="preserve">
          <source>Map each element of a structure to a monadic action, evaluate these actions from left to right, and ignore the results. For a version that doesn't ignore the results see &lt;code&gt;&lt;a href=&quot;data-traversable#v:mapM&quot;&gt;mapM&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">構造の各要素をモナドアクションにマップし、これらのアクションを左から右に評価し、結果を無視します。結果を無視しないバージョンについては、 &lt;code&gt;&lt;a href=&quot;data-traversable#v:mapM&quot;&gt;mapM&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="29efd3765dfabc72142232cb82d864034ee72729" translate="yes" xml:space="preserve">
          <source>Map each element of a structure to an action, evaluate these actions from left to right, and collect the results. For a version that ignores the results see &lt;code&gt;&lt;a href=&quot;data-foldable#v:traverse_&quot;&gt;traverse_&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">構造の各要素をアクションにマップし、これらのアクションを左から右に評価して、結果を収集します。結果を無視するバージョンについては、 &lt;code&gt;&lt;a href=&quot;data-foldable#v:traverse_&quot;&gt;traverse_&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="d22dd22b104dd621f77d9d5650ccd532318e02da" translate="yes" xml:space="preserve">
          <source>Map each element of a structure to an action, evaluate these actions from left to right, and ignore the results. For a version that doesn't ignore the results see &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">構造の各要素をアクションにマップし、これらのアクションを左から右に評価し、結果を無視します。結果を無視しないバージョンについては、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="43e6de6decbbed7c2a5b1c6751631f378ba334b2" translate="yes" xml:space="preserve">
          <source>Map each element of a structure to an action, evaluate these actions from left to right, and ignore the results. For a version that doesn't ignore the results see &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Map each element of a structure to an action, evaluate these actions from left to right, and ignore the results. For a version that doesn't ignore the results see &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4417d32b4f323c831d7b4ced61e67f600e01b3fb" translate="yes" xml:space="preserve">
          <source>Map each element of a structure to an action, evaluate these actions from left to right, and ignore the results. For a version that doesn't ignore the results see &lt;code&gt;&lt;a href=&quot;data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">構造の各要素をアクションにマップし、これらのアクションを左から右に評価し、結果を無視します。結果を無視しないバージョンについては、 &lt;code&gt;&lt;a href=&quot;data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="c124d6dfa5bddefa553c4516b6211d2cf0661762" translate="yes" xml:space="preserve">
          <source>Map each element of a structure using one of two actions, evaluate these actions from left to right, and ignore the results. For a version that doesn't ignore the results, see &lt;code&gt;&lt;a href=&quot;data-bitraversable#v:bitraverse&quot;&gt;bitraverse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">2つのアクションのいずれかを使用して構造の各要素をマップし、これらのアクションを左から右に評価し、結果を無視します。結果を無視しないバージョンについては、 &lt;code&gt;&lt;a href=&quot;data-bitraversable#v:bitraverse&quot;&gt;bitraverse&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="33e14cd9471b9b06b4f5f3069e4de360f95948a3" translate="yes" xml:space="preserve">
          <source>Map each element of the structure to a monoid, and combine the results.</source>
          <target state="translated">構造体の各要素をモノイドにマッピングし、その結果を組み合わせます。</target>
        </trans-unit>
        <trans-unit id="cb44df1644994b6e9bedbd4295f2ba757e01b134" translate="yes" xml:space="preserve">
          <source>Map leap-second values to the start of the following second. The resulting &lt;code&gt;&lt;a href=&quot;data-time-clock-system#v:systemNanoseconds&quot;&gt;systemNanoseconds&lt;/a&gt;&lt;/code&gt; will always be in the range 0 to 1E9-1.</source>
          <target state="translated">うるう秒の値を次の秒の開始にマップします。結果の &lt;code&gt;&lt;a href=&quot;data-time-clock-system#v:systemNanoseconds&quot;&gt;systemNanoseconds&lt;/a&gt;&lt;/code&gt; は常に0から1E9-1の範囲になります。</target>
        </trans-unit>
        <trans-unit id="f67b9485e617340983ccecc0a0a8ab8a5398d3f1" translate="yes" xml:space="preserve">
          <source>Map over both arguments at the same time.</source>
          <target state="translated">両方の引数を同時にマッピングします。</target>
        </trans-unit>
        <trans-unit id="820bfb2b876cadb7ba21577ea1191e745febb6e2" translate="yes" xml:space="preserve">
          <source>Map over the entries whose keys are missing from the other map, optionally removing some. This is the most powerful &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:SimpleWhenMissing&quot;&gt;SimpleWhenMissing&lt;/a&gt;&lt;/code&gt; tactic, but others are usually more efficient.</source>
          <target state="translated">他のマップからキーが欠落しているエントリーをマップし、オプションでいくつかを削除します。これは最も強力な &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:SimpleWhenMissing&quot;&gt;SimpleWhenMissing&lt;/a&gt;&lt;/code&gt; 戦術ですが、他の方が通常はより効率的です。</target>
        </trans-unit>
        <trans-unit id="042a8e608fdbf1be1815be0ba68d9d8129c0d45e" translate="yes" xml:space="preserve">
          <source>Map over the entries whose keys are missing from the other map, optionally removing some. This is the most powerful &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:SimpleWhenMissing&quot;&gt;SimpleWhenMissing&lt;/a&gt;&lt;/code&gt; tactic, but others are usually more efficient.</source>
          <target state="translated">他のマップからキーが欠落しているエントリーをマップし、オプションでいくつかを削除します。これは最も強力な &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:SimpleWhenMissing&quot;&gt;SimpleWhenMissing&lt;/a&gt;&lt;/code&gt; 戦術ですが、他の方が通常はより効率的です。</target>
        </trans-unit>
        <trans-unit id="7446b734119c67e4a15eea3901f43f333f1d45b7" translate="yes" xml:space="preserve">
          <source>Map over the entries whose keys are missing from the other map, optionally removing some. This is the most powerful &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:SimpleWhenMissing&quot;&gt;SimpleWhenMissing&lt;/a&gt;&lt;/code&gt; tactic, but others are usually more efficient.</source>
          <target state="translated">他のマップからキーが欠落しているエントリーをマップし、オプションでいくつかを削除します。これは最も強力な &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:SimpleWhenMissing&quot;&gt;SimpleWhenMissing&lt;/a&gt;&lt;/code&gt; 戦術ですが、他の方が通常はより効率的です。</target>
        </trans-unit>
        <trans-unit id="f20f45f5901d5da69a8a8bd25afdefdf94fb0463" translate="yes" xml:space="preserve">
          <source>Map over the entries whose keys are missing from the other map, optionally removing some. This is the most powerful &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:SimpleWhenMissing&quot;&gt;SimpleWhenMissing&lt;/a&gt;&lt;/code&gt; tactic, but others are usually more efficient.</source>
          <target state="translated">他のマップからキーが欠落しているエントリーをマップし、オプションでいくつかを削除します。これは最も強力な &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:SimpleWhenMissing&quot;&gt;SimpleWhenMissing&lt;/a&gt;&lt;/code&gt; 戦術ですが、他の方が通常はより効率的です。</target>
        </trans-unit>
        <trans-unit id="27b9407877fd74e4c60e5bb3f11429e5468cc32d" translate="yes" xml:space="preserve">
          <source>Map over the entries whose keys are missing from the other map.</source>
          <target state="translated">他のマップからキーが欠落しているエントリの上にマップを作成します。</target>
        </trans-unit>
        <trans-unit id="4972444ee92a42eeb10783a738cee55cc20ccb73" translate="yes" xml:space="preserve">
          <source>Map the inner computation using the given function.</source>
          <target state="translated">与えられた関数を使用して内部計算をマッピングします.</target>
        </trans-unit>
        <trans-unit id="f01bd56150a44e5c1e36c99b2ce32a4952f1afda" translate="yes" xml:space="preserve">
          <source>Map the return value, final state and output of a computation using the given function.</source>
          <target state="translated">与えられた関数を使用して計算の戻り値、最終状態、出力をマッピングします。</target>
        </trans-unit>
        <trans-unit id="611b5e106ea059979f2f1779bbc5d5819342b37e" translate="yes" xml:space="preserve">
          <source>Map the unwrapped computation using the given function.</source>
          <target state="translated">与えられた関数を用いて,ラップされていない計算をマッピングします.</target>
        </trans-unit>
        <trans-unit id="9a3aa11de5ca9a6bdbea1dfb4fae341156bcff0a" translate="yes" xml:space="preserve">
          <source>Map type</source>
          <target state="translated">地図の種類</target>
        </trans-unit>
        <trans-unit id="1810f098d7eac5bae7e2406903ecfc11787e8374" translate="yes" xml:space="preserve">
          <source>MapCRtoLF</source>
          <target state="translated">MapCRtoLF</target>
        </trans-unit>
        <trans-unit id="28b80a5d51a036d17e03dadde928449b953d85da" translate="yes" xml:space="preserve">
          <source>MapLFtoCR</source>
          <target state="translated">MapLFtoCR</target>
        </trans-unit>
        <trans-unit id="0f7287b611e3434635c4078dcc64979ba53c31bb" translate="yes" xml:space="preserve">
          <source>MapiFlag</source>
          <target state="translated">MapiFlag</target>
        </trans-unit>
        <trans-unit id="509e216767250bbf0cec7134cc87bd8db88ff863" translate="yes" xml:space="preserve">
          <source>MapiFreeBufferType</source>
          <target state="translated">MapiFreeBufferType</target>
        </trans-unit>
        <trans-unit id="f6693d804c9943e70a4a0323060d0df51aa65dfa" translate="yes" xml:space="preserve">
          <source>MapiFuncs</source>
          <target state="translated">MapiFuncs</target>
        </trans-unit>
        <trans-unit id="cd9c46f0be135a23d65b90dc10dbdb8e6bf7bb43" translate="yes" xml:space="preserve">
          <source>MapiLoaded</source>
          <target state="translated">MapiLoaded</target>
        </trans-unit>
        <trans-unit id="fa7f40372f1e4c545567caf67dc788efc58735dc" translate="yes" xml:space="preserve">
          <source>MapiLogoffType</source>
          <target state="translated">MapiLogoffType</target>
        </trans-unit>
        <trans-unit id="36cb3aec5c1c5fe73d8e8e0fc96d8a25e6742274" translate="yes" xml:space="preserve">
          <source>MapiLogonType</source>
          <target state="translated">MapiLogonType</target>
        </trans-unit>
        <trans-unit id="7a12682bc39d4a4b9b85256454d88deeb97151f5" translate="yes" xml:space="preserve">
          <source>MapiRecipDesc</source>
          <target state="translated">MapiRecipDesc</target>
        </trans-unit>
        <trans-unit id="dd6f6d1599d7119a2a1666a29fe8913e02817cc0" translate="yes" xml:space="preserve">
          <source>MapiResolveNameType</source>
          <target state="translated">MapiResolveNameType</target>
        </trans-unit>
        <trans-unit id="e806730edd68685562cf8c1233b6d49d37ab11ba" translate="yes" xml:space="preserve">
          <source>MapiSendMailType</source>
          <target state="translated">MapiSendMailType</target>
        </trans-unit>
        <trans-unit id="09e81b0440d9e7e7c46c283e70fc598be2643acd" translate="yes" xml:space="preserve">
          <source>Mapped object, from withMappedFile</source>
          <target state="translated">マップされたオブジェクト、withMappedFile から</target>
        </trans-unit>
        <trans-unit id="782e4fafad5e3beb16ef35319d6126950de58292" translate="yes" xml:space="preserve">
          <source>MappedObject</source>
          <target state="translated">MappedObject</target>
        </trans-unit>
        <trans-unit id="6f8944015d37918b217a17f41aec65c11bca6197" translate="yes" xml:space="preserve">
          <source>Mapping of C types to corresponding Haskell types.</source>
          <target state="translated">C型と対応するHaskell型のマッピング。</target>
        </trans-unit>
        <trans-unit id="bfccc2a90a967ca2c9726fa59c31448b51ea07bc" translate="yes" xml:space="preserve">
          <source>Maps an old state to a new state inside a state monad. The old state is thrown away.</source>
          <target state="translated">古い状態を状態モナド内の新しい状態にマップします。古い状態は捨てられます。</target>
        </trans-unit>
        <trans-unit id="0a1978af85dd59fcc87cee4e7808720188940a44" translate="yes" xml:space="preserve">
          <source>Maps area into memory.</source>
          <target state="translated">領域をメモリにマップします。</target>
        </trans-unit>
        <trans-unit id="12d3f218c041a3e94409cd521a65703707ec7d30" translate="yes" xml:space="preserve">
          <source>Maps file fully and returns ForeignPtr and length of the mapped area. The mapped file is opened read-only and shared reading.</source>
          <target state="translated">ファイルを完全にマップし、ForeignPtr とマップされた領域の長さを返します。マップされたファイルは読み込み専用で共有読み込みで開かれます。</target>
        </trans-unit>
        <trans-unit id="3936cc3f677a76a2eedb9a68dae98afcd381cc69" translate="yes" xml:space="preserve">
          <source>Mark a module as unsafe so that it can&amp;rsquo;t be imported by code compiled with &lt;a href=&quot;#extension-Safe&quot;&gt;&lt;code&gt;Safe&lt;/code&gt;&lt;/a&gt;. Also enable the Safe Import extension so that a module can require a dependency to be trusted.</source>
          <target state="translated">&lt;a href=&quot;#extension-Safe&quot;&gt; &lt;code&gt;Safe&lt;/code&gt; で&lt;/a&gt;コンパイルされたコードでインポートできないように、モジュールを安全でないものとしてマークします。また、モジュールが依存関係の信頼を要求できるように、Safe Import拡張機能を有効にします。</target>
        </trans-unit>
        <trans-unit id="b2469915cb8350f4b45d32b9fb09eae8014a2fd7" translate="yes" xml:space="preserve">
          <source>MarkParityErrors</source>
          <target state="translated">MarkParityErrors</target>
        </trans-unit>
        <trans-unit id="cbfae789a5691468edf927d3fcc545f317911943" translate="yes" xml:space="preserve">
          <source>Marks a capability flushing its local update remembered set accumulator.</source>
          <target state="translated">ローカル更新で記憶されたセット・アキュムレータをフラッシュするケイパビリティをマークします。</target>
        </trans-unit>
        <trans-unit id="749ef48ee39365b34972946cb74471d0eed9c084" translate="yes" xml:space="preserve">
          <source>Marks if the datatype is actually a newtype</source>
          <target state="translated">データ型が実際にニュータイプであるかどうかをマークします。</target>
        </trans-unit>
        <trans-unit id="2e31ff5a5bf802580a8893f8699ba55f6d3ac5b7" translate="yes" xml:space="preserve">
          <source>Marks if this constructor is a record</source>
          <target state="translated">このコンストラクタがレコードであるかどうかをマークします。</target>
        </trans-unit>
        <trans-unit id="c3400456e0dc9b11aa991afcb8dd85aa615efa2c" translate="yes" xml:space="preserve">
          <source>Marks the beginning of a heap profile sample.</source>
          <target state="translated">ヒーププロファイルサンプルの開始をマークします。</target>
        </trans-unit>
        <trans-unit id="dfdb9356e7d55128f5fe9e41f811cbba7086dbb4" translate="yes" xml:space="preserve">
          <source>Marks the beginning of a time profile.</source>
          <target state="translated">時間プロフィールの始まりをマークします。</target>
        </trans-unit>
        <trans-unit id="11481cc8464a72c6d603970383a2b8035b849cba" translate="yes" xml:space="preserve">
          <source>Marks the beginning of marking by the concurrent collector.</source>
          <target state="translated">同時開催のコレクターによるマーキングの開始をマークします。</target>
        </trans-unit>
        <trans-unit id="c5867d7dd9a19fc447a637c38b43c98746f7ab60" translate="yes" xml:space="preserve">
          <source>Marks the beginning of the concurrent garbage collector&amp;rsquo;s post-mark synchronization phase.</source>
          <target state="translated">Marks the beginning of the concurrent garbage collector&amp;rsquo;s post-mark synchronization phase.</target>
        </trans-unit>
        <trans-unit id="7e14a218bcc85c7d4dcb33742d978559eff47dc5" translate="yes" xml:space="preserve">
          <source>Marks the beginning of the concurrent garbage collector&amp;rsquo;s sweep phase.</source>
          <target state="translated">Marks the beginning of the concurrent garbage collector&amp;rsquo;s sweep phase.</target>
        </trans-unit>
        <trans-unit id="be5ce64099ae9eb2d5c99a4e160328562b3336ca" translate="yes" xml:space="preserve">
          <source>Marks the creation of a Haskell thread.</source>
          <target state="translated">Haskell スレッドの作成をマークします。</target>
        </trans-unit>
        <trans-unit id="06e940d86df5e1c669573ec00f380d2004c19a2e" translate="yes" xml:space="preserve">
          <source>Marks the creation of a task.</source>
          <target state="translated">タスクの作成をマークします。</target>
        </trans-unit>
        <trans-unit id="e3821a3cd57a76c02636f3ef5d01798bb2876d2d" translate="yes" xml:space="preserve">
          <source>Marks the end of a heap profile sample.</source>
          <target state="translated">ヒーププロファイルサンプルの終了をマークします。</target>
        </trans-unit>
        <trans-unit id="1e59b472cf539a835c888dd89568d8c7535aa244" translate="yes" xml:space="preserve">
          <source>Marks the end of concurrent scavenging.</source>
          <target state="translated">同時清掃の終了を示す。</target>
        </trans-unit>
        <trans-unit id="57bb2a224b54670e5e30b20bb4395fd09c0df40e" translate="yes" xml:space="preserve">
          <source>Marks the end of marking by the concurrent collector.</source>
          <target state="translated">コンカレントコレクターによるマーキングの終了をマークします。</target>
        </trans-unit>
        <trans-unit id="640deea39fa19db976a137734b54b69c77f77688" translate="yes" xml:space="preserve">
          <source>Marks the end of the concurrent garbage collector&amp;rsquo;s post-mark synchronization phase.</source>
          <target state="translated">Marks the end of the concurrent garbage collector&amp;rsquo;s post-mark synchronization phase.</target>
        </trans-unit>
        <trans-unit id="ff67171565b14a0ac19b21e97b897585fbd8895f" translate="yes" xml:space="preserve">
          <source>Marks the end of the concurrent garbage collector&amp;rsquo;s sweep phase.</source>
          <target state="translated">Marks the end of the concurrent garbage collector&amp;rsquo;s sweep phase.</target>
        </trans-unit>
        <trans-unit id="769d2819dbb6bff931272f20731d9d45442d5b36" translate="yes" xml:space="preserve">
          <source>Marks the migration of a task to a new capability.</source>
          <target state="translated">タスクの新しい能力への移行をマークします。</target>
        </trans-unit>
        <trans-unit id="2a1e650924ea24ab3b1b0f295ccf2fdea9b1307a" translate="yes" xml:space="preserve">
          <source>Marks the start of concurrent scavenging.</source>
          <target state="translated">同時清掃の開始を示す。</target>
        </trans-unit>
        <trans-unit id="7e626c3e7759a64e59e9a89ccd39a484ef5b02cf" translate="yes" xml:space="preserve">
          <source>Marshal a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; into a C string encoded as UTF-8 in temporary storage, with explicit length information. The encoded string may contain NUL bytes, and is not followed by a trailing NUL byte.</source>
          <target state="translated">一時的なストレージで、 &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; をUTF-8としてエンコードされたC文字列にマーシャリングし、明示的な長さ情報を付けます。エンコードされた文字列にはNULバイトが含まれる場合があり、後続のNULバイトは続きません。</target>
        </trans-unit>
        <trans-unit id="e194c0bfa99200c6de46b0a0dae4f141264ffb6b" translate="yes" xml:space="preserve">
          <source>Marshal a C string with explicit length into a Haskell string.</source>
          <target state="translated">明示的な長さの C 文字列を Haskell 文字列にマーシャルします。</target>
        </trans-unit>
        <trans-unit id="50198af1318b58c7e70f40d2d8b8dc415ec720f2" translate="yes" xml:space="preserve">
          <source>Marshal a C wide string with explicit length into a Haskell string.</source>
          <target state="translated">明示的な長さのC幅の文字列をHaskell文字列にマーシャルします。</target>
        </trans-unit>
        <trans-unit id="3c5b68516d82d4c37cb3d40678d4531758ba74e2" translate="yes" xml:space="preserve">
          <source>Marshal a Haskell string into a C string (ie, character array) in temporary storage, with explicit length information.</source>
          <target state="translated">Haskell 文字列を一時的なストレージ内の C 文字列 (文字配列など)に、明示的な長さの情報とともにマーシャリングします。</target>
        </trans-unit>
        <trans-unit id="062175c88aeda03668433b163d83cb6364af626e" translate="yes" xml:space="preserve">
          <source>Marshal a Haskell string into a C string (ie, character array) with explicit length information.</source>
          <target state="translated">Haskell の文字列を、明示的な長さ情報を持つ C 文字列 (文字配列など)にマーシャルします。</target>
        </trans-unit>
        <trans-unit id="912dd885ff9b0a2ea4a16995e74ae7cc0940d45e" translate="yes" xml:space="preserve">
          <source>Marshal a Haskell string into a C wide string (i.e. wide character array) in temporary storage, with explicit length information.</source>
          <target state="translated">Haskell 文字列を一時的なストレージ内の C 幅の文字列 (すなわち幅の広い文字配列)に、明示的な長さ情報とともにマーシャリングします。</target>
        </trans-unit>
        <trans-unit id="f77c471f3c7f74d5609487ca9b39a6878b13f8dd" translate="yes" xml:space="preserve">
          <source>Marshal a Haskell string into a C wide string (ie, wide character array) with explicit length information.</source>
          <target state="translated">Haskell 文字列を、明示的な長さ情報を持つ C の幅広文字列 (つまり幅広文字配列)にマーシャルします。</target>
        </trans-unit>
        <trans-unit id="c98ce6c5f02b8c9585848448e89dbd65dcaf47e3" translate="yes" xml:space="preserve">
          <source>Marshal a Haskell string into a NUL terminated C string using temporary storage.</source>
          <target state="translated">一時的なストレージを使用して、Haskell文字列をNUL終端のC文字列にマーシャルします。</target>
        </trans-unit>
        <trans-unit id="fdda91a4f111ed1a0fc6f2a8775b98e089fe921b" translate="yes" xml:space="preserve">
          <source>Marshal a Haskell string into a NUL terminated C string.</source>
          <target state="translated">Haskell文字列をNUL終端のC文字列にマーシャルします。</target>
        </trans-unit>
        <trans-unit id="4a04b9cb2051b02b522faee9650a0d495e9ac7e2" translate="yes" xml:space="preserve">
          <source>Marshal a Haskell string into a NUL terminated C wide string using temporary storage.</source>
          <target state="translated">一時的なストレージを使用して、Haskell文字列をNUL終端のC幅の文字列にマーシャルします。</target>
        </trans-unit>
        <trans-unit id="4054981272596d06fac239f84b099d399356e48b" translate="yes" xml:space="preserve">
          <source>Marshal a Haskell string into a NUL terminated C wide string.</source>
          <target state="translated">Haskell文字列をNUL終端のC幅の文字列にマーシャルします。</target>
        </trans-unit>
        <trans-unit id="09d48aea89cc33b11ec8033bc15b6483354cf103" translate="yes" xml:space="preserve">
          <source>Marshal a NUL terminated C string into a Haskell string.</source>
          <target state="translated">NUL終端のC文字列をHaskell文字列にマーシャルします。</target>
        </trans-unit>
        <trans-unit id="4311d7c39509b4fe039bef36ba55dfd320cecd73" translate="yes" xml:space="preserve">
          <source>Marshal a NUL terminated C wide string into a Haskell string.</source>
          <target state="translated">NUL終端のC幅文字列をHaskell文字列にマーシャルします。</target>
        </trans-unit>
        <trans-unit id="4c47a3a8839a6fd68ae9716c3fa1ce5197fbd8d4" translate="yes" xml:space="preserve">
          <source>Marshal a dummy Haskell string into a C wide string (i.e. wide character array) in temporary storage, with explicit length information.</source>
          <target state="translated">ダミーのHaskell文字列を、明示的な長さ情報を持つ一時的なストレージ内のC幅文字列(すなわち幅広文字配列)にマーシャルします。</target>
        </trans-unit>
        <trans-unit id="6d86041ec3d2e84d33ddd1dd6cfc24550f14836a" translate="yes" xml:space="preserve">
          <source>Marshal a dummy Haskell string into a NUL terminated C wide string using temporary storage.</source>
          <target state="translated">ダミーのHaskell文字列を一時的なストレージを使用してNUL終端のC幅文字列にマーシャルします。</target>
        </trans-unit>
        <trans-unit id="e0dade00c021cdaf9d0ee91f43d69115b6f80912" translate="yes" xml:space="preserve">
          <source>Marshal a list of Haskell strings into an array of NUL terminated C strings using temporary storage.</source>
          <target state="translated">Haskell文字列のリストを一時的なストレージを使用してNUL終端のC文字列の配列にマーシャルします。</target>
        </trans-unit>
        <trans-unit id="cc6b108a5f57dc6b9a05c1b127e58f7eca9629cd" translate="yes" xml:space="preserve">
          <source>Marshalling</source>
          <target state="translated">Marshalling</target>
        </trans-unit>
        <trans-unit id="f0ad063d68044737957ed0f797a2cae2aa208116" translate="yes" xml:space="preserve">
          <source>Marshalling arrays</source>
          <target state="translated">配列のマーシャル</target>
        </trans-unit>
        <trans-unit id="36c846ee62dfe999f6767389bfae195bd57e0465" translate="yes" xml:space="preserve">
          <source>Marshalling lists of storable objects</source>
          <target state="translated">収納可能なオブジェクトのリストをマーシャルする</target>
        </trans-unit>
        <trans-unit id="0dba1cb48010c84cd2d29279809f66a88be05516" translate="yes" xml:space="preserve">
          <source>Marshalling of Boolean values (non-zero corresponds to &lt;code&gt;True&lt;/code&gt;)</source>
          <target state="translated">ブール値のマーシャリング（ゼロ以外は &lt;code&gt;True&lt;/code&gt; に対応）</target>
        </trans-unit>
        <trans-unit id="ab71dfd4eb06d44348ff90d0b69db22a5328f47d" translate="yes" xml:space="preserve">
          <source>Marshalling of Maybe values</source>
          <target state="translated">Maybeの価値観のマーシャル</target>
        </trans-unit>
        <trans-unit id="239b1e2996122625ab9c3b095db2c1aaf212e151" translate="yes" xml:space="preserve">
          <source>Marshalling support</source>
          <target state="translated">マーシャルサポート</target>
        </trans-unit>
        <trans-unit id="2768b4d93d7521d0bb9c22088cc6e109b9cb0751" translate="yes" xml:space="preserve">
          <source>Marshalling support. Unsafe API.</source>
          <target state="translated">マーシャルのサポート。安全でないAPI。</target>
        </trans-unit>
        <trans-unit id="2ac6f66636ae68e7acfa888a200b00a6c8d691d3" translate="yes" xml:space="preserve">
          <source>Marshalling support: routines allocating, storing, and retrieving Haskell lists that are represented as arrays in the foreign language</source>
          <target state="translated">マーシャルサポート:外国語で配列として表現される Haskell リストの割り当て、格納、取得を行うルーチン</target>
        </trans-unit>
        <trans-unit id="2eec1eaadfce2f2343fb8a58e72120839ce594dd" translate="yes" xml:space="preserve">
          <source>Martin Escardo and Paulo Oliva. &quot;Selection functions, bar recursion and backward induction&quot;, &lt;em&gt;Mathematical Structures in Computer Science&lt;/em&gt; 20:2 (2010), pp. 127-168. &lt;a href=&quot;https://www.cs.bham.ac.uk/~mhe/papers/selection-escardo-oliva.pdf&quot;&gt;https://www.cs.bham.ac.uk/~mhe/papers/selection-escardo-oliva.pdf&lt;/a&gt;</source>
          <target state="translated">マーティン・エスカルドとパウロ・オリバ。「選択関数、バーの再帰と逆帰納」、&lt;em&gt;数理構造のコンピュータサイエンス&lt;/em&gt; 20：2（2010）、pp。127-168。&lt;a href=&quot;https://www.cs.bham.ac.uk/~mhe/papers/selection-escardo-oliva.pdf&quot;&gt;https://www.cs.bham.ac.uk/~mhe/papers/selection-escardo-oliva.pdf&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8aadf1657da58cb6e5ae063fb1322736bf6002e4" translate="yes" xml:space="preserve">
          <source>Mask</source>
          <target state="translated">Mask</target>
        </trans-unit>
        <trans-unit id="30b6cc635afcf7d59efbff7d871b3f85ca41ffeb" translate="yes" xml:space="preserve">
          <source>MaskedInterruptible</source>
          <target state="translated">MaskedInterruptible</target>
        </trans-unit>
        <trans-unit id="f8a86f7a0ad149ff28451b56d2a010763bd9ea96" translate="yes" xml:space="preserve">
          <source>MaskedUninterruptible</source>
          <target state="translated">MaskedUninterruptible</target>
        </trans-unit>
        <trans-unit id="55a3d416a9f5e2d65bbae417b235dd396b7e87d1" translate="yes" xml:space="preserve">
          <source>MaskingState</source>
          <target state="translated">MaskingState</target>
        </trans-unit>
        <trans-unit id="0335207f5e840d81afa158c6c2bb6e3fa02653b4" translate="yes" xml:space="preserve">
          <source>Match</source>
          <target state="translated">Match</target>
        </trans-unit>
        <trans-unit id="d8e65ef19404e901265ea66bdd78cf07c84d55f3" translate="yes" xml:space="preserve">
          <source>Match &lt;code&gt;v1&lt;/code&gt; against &lt;code&gt;p1&lt;/code&gt;, &lt;code&gt;v2&lt;/code&gt; against &lt;code&gt;p2&lt;/code&gt; and so on. If any of these matches fail or diverge, so does the whole match.</source>
          <target state="translated">マッチ &lt;code&gt;v1&lt;/code&gt; に対する &lt;code&gt;p1&lt;/code&gt; 、 &lt;code&gt;v2&lt;/code&gt; に対する &lt;code&gt;p2&lt;/code&gt; と上のようにします。これらの一致のいずれかが失敗または分岐すると、一致全体が失敗します。</target>
        </trans-unit>
        <trans-unit id="6ceb6ea323bd13a9e935c2eb466741cf2f979c72" translate="yes" xml:space="preserve">
          <source>Match and Clause</source>
          <target state="translated">マッチと節</target>
        </trans-unit>
        <trans-unit id="dd7924a1ec8896d061a233f605e42f91781e1add" translate="yes" xml:space="preserve">
          <source>Match the value &lt;code&gt;v&lt;/code&gt; against &lt;code&gt;p&lt;/code&gt;. If this match fails or diverges, so does the whole (pattern synonym) match. Otherwise the match against &lt;code&gt;p&lt;/code&gt; must bind the variables &lt;code&gt;x1 ... xn&lt;/code&gt;; let them be bound to values &lt;code&gt;v1 ... vn&lt;/code&gt;.</source>
          <target state="translated">値 &lt;code&gt;v&lt;/code&gt; を &lt;code&gt;p&lt;/code&gt; と照合します。この一致が失敗または発散する場合、全体（パターン同義語）も一致します。それ以外の場合、 &lt;code&gt;p&lt;/code&gt; に対する一致は変数 &lt;code&gt;x1 ... xn&lt;/code&gt; バインドする必要があります。それらを値 &lt;code&gt;v1 ... vn&lt;/code&gt; バインドします。</target>
        </trans-unit>
        <trans-unit id="6763e6cca4e80df18fa4d5f912665ef97a375c19" translate="yes" xml:space="preserve">
          <source>MatchQ</source>
          <target state="translated">MatchQ</target>
        </trans-unit>
        <trans-unit id="4895b24f6bce36c2cd9b44590b52713fb09b4922" translate="yes" xml:space="preserve">
          <source>Matching an expression &lt;code&gt;e&lt;/code&gt; against a pattern &lt;code&gt;!p&lt;/code&gt; is done by first evaluating &lt;code&gt;e&lt;/code&gt; (to WHNF) and then matching the result against &lt;code&gt;p&lt;/code&gt;. Example:</source>
          <target state="translated">式 &lt;code&gt;e&lt;/code&gt; をパターン &lt;code&gt;!p&lt;/code&gt; と照合するには、まず &lt;code&gt;e&lt;/code&gt; を（WHNFに対して）評価し、次に結果を &lt;code&gt;p&lt;/code&gt; と照合します。例：</target>
        </trans-unit>
        <trans-unit id="70016ff14223778abe33ce54933e1dcebf537bde" translate="yes" xml:space="preserve">
          <source>Matching function for the token to parse.</source>
          <target state="translated">解析するトークンのマッチング関数。</target>
        </trans-unit>
        <trans-unit id="469df59ba37712c09add7e5bdd4e7279148a045b" translate="yes" xml:space="preserve">
          <source>Matching is carried out on GHC&amp;rsquo;s intermediate language, which includes type abstractions and applications. So a rule only matches if the types match too. See &lt;a href=&quot;#rule-spec&quot;&gt;Specialisation&lt;/a&gt; below.</source>
          <target state="translated">マッチングは、型の抽象化とアプリケーションを含むGHCの中間言語で実行されます。したがって、ルールはタイプが一致する場合にのみ一致します。下記の&lt;a href=&quot;#rule-spec&quot;&gt;専門分野を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="78b96c127877ae96cfefda73d72a8baba84838aa" translate="yes" xml:space="preserve">
          <source>Matching on &lt;code&gt;App&lt;/code&gt; directly is both hard to read and error prone to write. And the situation is even worse when the matching is nested:</source>
          <target state="translated">&lt;code&gt;App&lt;/code&gt; 直接一致させることは、読みにくく、エラーを書き込む傾向があります。そして、マッチングがネストされている場合、状況はさらに悪化します。</target>
        </trans-unit>
        <trans-unit id="042bacca5d8f713d47eab01491aa815bdbd55203" translate="yes" xml:space="preserve">
          <source>Matching the pattern &lt;code&gt;!pat&lt;/code&gt; against a value &lt;code&gt;v&lt;/code&gt; behaves as follows:</source>
          <target state="translated">パターン &lt;code&gt;!pat&lt;/code&gt; を値 &lt;code&gt;v&lt;/code&gt; と照合すると、次のように動作します。</target>
        </trans-unit>
        <trans-unit id="3d675806f239e11d4b41b67aa65a5606104824d2" translate="yes" xml:space="preserve">
          <source>Matching: To the equations in Section 3.17.3 of the &lt;a href=&quot;http://www.haskell.org/onlinereport/&quot;&gt;Haskell 98 Report&lt;/a&gt;, add the following:</source>
          <target state="translated">マッチング：&lt;a href=&quot;http://www.haskell.org/onlinereport/&quot;&gt;Haskell 98レポートの&lt;/a&gt;セクション3.17.3の方程式に、以下を追加します。</target>
        </trans-unit>
        <trans-unit id="e2376240265e2ddbf31297cb5bda027216f1ebd9" translate="yes" xml:space="preserve">
          <source>MathSymbol</source>
          <target state="translated">MathSymbol</target>
        </trans-unit>
        <trans-unit id="a95e85aed56318093b024674e217cae0bd30241d" translate="yes" xml:space="preserve">
          <source>Max</source>
          <target state="translated">Max</target>
        </trans-unit>
        <trans-unit id="c189943b0e68bf52ade04ebce38ce6c7c78d6eea" translate="yes" xml:space="preserve">
          <source>Maximum length of a line, in characters.</source>
          <target state="translated">行の最大長を文字数で指定します。</target>
        </trans-unit>
        <trans-unit id="144a9206977b57448e4faf5e1062274633d6193e" translate="yes" xml:space="preserve">
          <source>Maximum live data (including large objects + compact regions) in the heap. Updated after a major GC.</source>
          <target state="translated">ヒープ内の最大ライブデータ(ラージオブジェクト+コンパクトリージョンを含む)。メジャーGC後に更新される。</target>
        </trans-unit>
        <trans-unit id="159b778d9454be206f67d4893bca54a49e9b8c77" translate="yes" xml:space="preserve">
          <source>Maximum live data in compact regions</source>
          <target state="translated">コンパクトな地域で最大のライブデータ</target>
        </trans-unit>
        <trans-unit id="a16695344254fdba02129e66db3ad3e63cb1016e" translate="yes" xml:space="preserve">
          <source>Maximum live data in large objects</source>
          <target state="translated">ラージオブジェクトでの最大ライブデータ</target>
        </trans-unit>
        <trans-unit id="240702bae0f29e273fb09ffdba7773ca8777719c" translate="yes" xml:space="preserve">
          <source>Maximum memory in use by the RTS</source>
          <target state="translated">RTSが使用する最大メモリ</target>
        </trans-unit>
        <trans-unit id="d8099e9d8479df145a140dbad71866cd985cafd7" translate="yes" xml:space="preserve">
          <source>Maximum number of bytes to read</source>
          <target state="translated">読み取る最大バイト数</target>
        </trans-unit>
        <trans-unit id="29145ea756091c42d8b8df72e4191a60b4a54c6e" translate="yes" xml:space="preserve">
          <source>Maximum number of bytes to write</source>
          <target state="translated">書き込み可能な最大バイト数</target>
        </trans-unit>
        <trans-unit id="9e69850923d54429a417c753e43ca53a7ffd31d5" translate="yes" xml:space="preserve">
          <source>Maximum number of unmatched patterns to be shown in warnings generated by &lt;a href=&quot;using-warnings#ghc-flag--Wincomplete-patterns&quot;&gt;&lt;code&gt;-Wincomplete-patterns&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;using-warnings#ghc-flag--Wincomplete-uni-patterns&quot;&gt;&lt;code&gt;-Wincomplete-uni-patterns&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;using-warnings#ghc-flag--Wincomplete-patterns&quot;&gt; &lt;code&gt;-Wincomplete-patterns&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;using-warnings#ghc-flag--Wincomplete-uni-patterns&quot;&gt; &lt;code&gt;-Wincomplete-uni-patterns&lt;/code&gt; &lt;/a&gt;によって生成される警告に表示される一致しないパターンの最大数。</target>
        </trans-unit>
        <trans-unit id="1f5b0947f46a97bb1ec7fe07a7eee8499d030c8e" translate="yes" xml:space="preserve">
          <source>Maximum of two size hints.</source>
          <target state="translated">最大2サイズのヒント。</target>
        </trans-unit>
        <trans-unit id="bdf18c00bb82701af0218115bcf257f5be6c13bb" translate="yes" xml:space="preserve">
          <source>Maximum slop</source>
          <target state="translated">最大スロープ</target>
        </trans-unit>
        <trans-unit id="15683050ba4f95be274c22da707d4d37cc680acd" translate="yes" xml:space="preserve">
          <source>May be overlapped by more specific instances</source>
          <target state="translated">より具体的なインスタンスによって重複する可能性があります。</target>
        </trans-unit>
        <trans-unit id="9d13a4f70e986c78366878d8a4b23da17275d3fb" translate="yes" xml:space="preserve">
          <source>May overlap a more general instance</source>
          <target state="translated">より一般的なインスタンスと重複する可能性があります</target>
        </trans-unit>
        <trans-unit id="bc53972d25b2dda7267fd09725c8dd41aac97859" translate="yes" xml:space="preserve">
          <source>May throw an exception if this is an invalid descriptor.</source>
          <target state="translated">これが無効な記述子である場合は例外を投げることがあります。</target>
        </trans-unit>
        <trans-unit id="56dd8d0bbe9dcb95403cd2c187064106af47af84" translate="yes" xml:space="preserve">
          <source>Maybe</source>
          <target state="translated">Maybe</target>
        </trans-unit>
        <trans-unit id="b92babb5409c0a6ec95584469ae7d91df0ca8969" translate="yes" xml:space="preserve">
          <source>Maybe monoid returning the leftmost non-Nothing value.</source>
          <target state="translated">一番左のNothingではない値を返すモノイドかもしれません。</target>
        </trans-unit>
        <trans-unit id="018b50df30620e3a51db9ef52260cf832edd1f4d" translate="yes" xml:space="preserve">
          <source>Maybe monoid returning the rightmost non-Nothing value.</source>
          <target state="translated">一番右端のNothingではない値を返すモノイドかもしれません。</target>
        </trans-unit>
        <trans-unit id="fc0be6aa40a87f2c34d21604241fc126b3d008fc" translate="yes" xml:space="preserve">
          <source>Maybe type</source>
          <target state="translated">たぶんタイプ</target>
        </trans-unit>
        <trans-unit id="aa7807fd2f555e6dc07cae0194859e7c01ce8cb6" translate="yes" xml:space="preserve">
          <source>Maybe values</source>
          <target state="translated">たぶん価値観</target>
        </trans-unit>
        <trans-unit id="e3265936ce333fe37c9404fe3bfe54fa2731aec4" translate="yes" xml:space="preserve">
          <source>MaybeT</source>
          <target state="translated">MaybeT</target>
        </trans-unit>
        <trans-unit id="3fbd96571113d60d1ec28c5fc4754c91f3088410" translate="yes" xml:space="preserve">
          <source>MbATOM</source>
          <target state="translated">MbATOM</target>
        </trans-unit>
        <trans-unit id="55d8534107e7b0b303e6aa4feb48079bd26d10e8" translate="yes" xml:space="preserve">
          <source>MbHANDLE</source>
          <target state="translated">MbHANDLE</target>
        </trans-unit>
        <trans-unit id="e5248b4829d90843e057bd4eca3e14ec6c01b898" translate="yes" xml:space="preserve">
          <source>MbHINSTANCE</source>
          <target state="translated">MbHINSTANCE</target>
        </trans-unit>
        <trans-unit id="863abdca342d4cbfd84104bbc0ff83f945b49e3b" translate="yes" xml:space="preserve">
          <source>MbHMODULE</source>
          <target state="translated">MbHMODULE</target>
        </trans-unit>
        <trans-unit id="3d9c03cdc0330cc84e5101070b081063867dbc28" translate="yes" xml:space="preserve">
          <source>MbINT</source>
          <target state="translated">MbINT</target>
        </trans-unit>
        <trans-unit id="ecea6b01153b85a30965344164775b06fbcb69a4" translate="yes" xml:space="preserve">
          <source>MbLPCSTR</source>
          <target state="translated">MbLPCSTR</target>
        </trans-unit>
        <trans-unit id="e5be102041dc49217c1540606dd21365b89afc4f" translate="yes" xml:space="preserve">
          <source>MbLPCTSTR</source>
          <target state="translated">MbLPCTSTR</target>
        </trans-unit>
        <trans-unit id="53d96f8a97cd2285858b07956c5ce9cae6040aba" translate="yes" xml:space="preserve">
          <source>MbLPOVERLAPPED</source>
          <target state="translated">MbLPOVERLAPPED</target>
        </trans-unit>
        <trans-unit id="1bab356846186170a8b4b1f5b81a7ad37bab46a7" translate="yes" xml:space="preserve">
          <source>MbLPSECURITY_ATTRIBUTES</source>
          <target state="translated">MbLPSECURITY_ATTRIBUTES</target>
        </trans-unit>
        <trans-unit id="48504feb90b785c6491d7d2c1926298c2bd30054" translate="yes" xml:space="preserve">
          <source>MbLPVOID</source>
          <target state="translated">MbLPVOID</target>
        </trans-unit>
        <trans-unit id="96d0adb31743d4f3821a0e34427fd9d3c6b05a6e" translate="yes" xml:space="preserve">
          <source>MbPos</source>
          <target state="translated">MbPos</target>
        </trans-unit>
        <trans-unit id="e4fd24ce7545ffe7c595a6b3e7a83dba23199af3" translate="yes" xml:space="preserve">
          <source>MbString</source>
          <target state="translated">MbString</target>
        </trans-unit>
        <trans-unit id="ce9329746fe501a099093f13e3edca7c47f40a51" translate="yes" xml:space="preserve">
          <source>Mc: Mark, Spacing Combining</source>
          <target state="translated">マック:マーク、スペーシングの組み合わせ</target>
        </trans-unit>
        <trans-unit id="e2c8f4a8900f070fa946c771890c8638e1827848" translate="yes" xml:space="preserve">
          <source>Me: Mark, Enclosing</source>
          <target state="translated">私:マーク、封入</target>
        </trans-unit>
        <trans-unit id="5613874632be97c00f6099463fe7f3e041473ea8" translate="yes" xml:space="preserve">
          <source>Meanings of specific keywords:</source>
          <target state="translated">特定のキーワードの意味</target>
        </trans-unit>
        <trans-unit id="1aedf6c2f14dc3df6a343ae9b734d4a0213e9822" translate="yes" xml:space="preserve">
          <source>Means &amp;ldquo;turn off all optimisation&amp;rdquo;, reverting to the same settings as if no &lt;code&gt;-O&lt;/code&gt; options had been specified. Saying &lt;code&gt;-O0&lt;/code&gt; can be useful if e.g. &lt;code&gt;make&lt;/code&gt; has inserted a &lt;code&gt;-O&lt;/code&gt; on the command line already.</source>
          <target state="translated">「すべての最適化をオフにする」ことを意味し、 &lt;code&gt;-O&lt;/code&gt; オプションが指定されていない場合と同じ設定に戻します。言って &lt;code&gt;-O0&lt;/code&gt; は例えば場合に役立ちます &lt;code&gt;make&lt;/code&gt; が挿入された &lt;code&gt;-O&lt;/code&gt; すでにコマンドライン上を。</target>
        </trans-unit>
        <trans-unit id="1b4aa9a4c3b5df0d65ca9349e71ddf30cd0d7394" translate="yes" xml:space="preserve">
          <source>Means: &amp;ldquo;Apply every non-dangerous optimisation, even if it means significantly longer compile times.&amp;rdquo;</source>
          <target state="translated">意味：「たとえコンパイル時間が大幅に長くなる場合でも、危険ではないすべての最適化を適用してください。」</target>
        </trans-unit>
        <trans-unit id="c3bbe6c8c39ed5248e3ca18003eb3d6900b1a45b" translate="yes" xml:space="preserve">
          <source>Means: &amp;ldquo;Generate good-quality code without taking too long about it.&amp;rdquo; Thus, for example: &lt;code&gt;ghc -c -O Main.lhs&lt;/code&gt;</source>
          <target state="translated">意味：「あまり時間をかけずに高品質のコードを生成する」したがって、例： &lt;code&gt;ghc -c -O Main.lhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe31d4f25bb8cbbdafdbd4fc62d7fc6cf17c7656" translate="yes" xml:space="preserve">
          <source>Mediate types and binary type constructors.</source>
          <target state="translated">型とバイナリ型のコンストラクタを仲介します。</target>
        </trans-unit>
        <trans-unit id="517ef4fa125305a5305a3a02844f3bb72b3175b5" translate="yes" xml:space="preserve">
          <source>Mediate types and unary type constructors.</source>
          <target state="translated">型と単項型のコンストラクタを仲介します。</target>
        </trans-unit>
        <trans-unit id="a1bf368dfa41af6966ac27794caf5006abecc398" translate="yes" xml:space="preserve">
          <source>Memory Model</source>
          <target state="translated">メモリモデル</target>
        </trans-unit>
        <trans-unit id="49364f57d947f17b4af9ef59269db84acaef977a" translate="yes" xml:space="preserve">
          <source>Memory addresses are represented as values of type &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt; a&lt;/code&gt;, for some &lt;code&gt;a&lt;/code&gt; which is an instance of class &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt;. The type argument to &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; helps provide some valuable type safety in FFI code (you can't mix pointers of different types without an explicit cast), while helping the Haskell type system figure out which marshalling method is needed for a given pointer.</source>
          <target state="translated">メモリー・アドレスは、クラス &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; のインスタンスである一部の &lt;code&gt;a&lt;/code&gt; については、タイプ &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt; a&lt;/code&gt; の値として表されます。 &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; への型引数は、FFIコードでいくつかの貴重な型の安全性を提供するのに役立ち（明示的なキャストなしに異なる型のポインターを混在させることはできません）、Haskell型システムが特定のポインターに必要なマーシャリングメソッドを特定できるようにします。</target>
        </trans-unit>
        <trans-unit id="8ccc7c7227622171674639dfab2d7182af83111c" translate="yes" xml:space="preserve">
          <source>Memory addresses are represented as values of type &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Ptr&quot;&gt;Ptr&lt;/a&gt; a&lt;/code&gt;, for some &lt;code&gt;a&lt;/code&gt; which is an instance of class &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt;. The type argument to &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; helps provide some valuable type safety in FFI code (you can't mix pointers of different types without an explicit cast), while helping the Haskell type system figure out which marshalling method is needed for a given pointer.</source>
          <target state="translated">メモリー・アドレスは、クラス &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; のインスタンスである一部の &lt;code&gt;a&lt;/code&gt; については、タイプ &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Ptr&quot;&gt;Ptr&lt;/a&gt; a&lt;/code&gt; の値として表されます。 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; への型引数は、FFIコードでいくつかの貴重な型の安全性を提供するのに役立ち（明示的なキャストなしに異なる型のポインターを混在させることはできません）、Haskell型システムが特定のポインターに必要なマーシャリングメソッドを特定できるようにします。</target>
        </trans-unit>
        <trans-unit id="b61b70edbe3a97caa2ecb5ac100b7aca209a1cba" translate="yes" xml:space="preserve">
          <source>Memory allocation</source>
          <target state="translated">メモリの割り当て</target>
        </trans-unit>
        <trans-unit id="403b42e453dae36d100f182dddf88973e094f006" translate="yes" xml:space="preserve">
          <source>Memory containing the data to write</source>
          <target state="translated">書き込むデータを格納したメモリ</target>
        </trans-unit>
        <trans-unit id="94713b6ce43e5b0b6c83500725c2f66aaf33bf20" translate="yes" xml:space="preserve">
          <source>Memory in which to put the data</source>
          <target state="translated">データを入れるメモリ</target>
        </trans-unit>
        <trans-unit id="6dc9de36a01521f350aa26cecadb8b40753a93e7" translate="yes" xml:space="preserve">
          <source>Memory occupied by threads and their stacks is labelled as &amp;ldquo;TSO&amp;rdquo; and &amp;ldquo;STACK&amp;rdquo; respectively when displaying the profile by closure description or type description.</source>
          <target state="translated">スレッドとそのスタックによって占有されているメモリは、クロージャの説明またはタイプの説明によってプロファイルを表示するときに、それぞれ「TSO」および「STACK」というラベルが付けられます。</target>
        </trans-unit>
        <trans-unit id="4c76fe9817202da64040fc649066dabc0e7eed8e" translate="yes" xml:space="preserve">
          <source>Memory overhead</source>
          <target state="translated">メモリオーバーヘッド</target>
        </trans-unit>
        <trans-unit id="76cf8b1754b778b2d89d0e21d90207ed29dcf08d" translate="yes" xml:space="preserve">
          <source>Memory-related system things.</source>
          <target state="translated">メモリ関連のシステム物。</target>
        </trans-unit>
        <trans-unit id="d10533e6a3289c9df349dcd02b8d8d7f9c80176b" translate="yes" xml:space="preserve">
          <source>Merge immediately-nested case expressions that scrutinise the same variable. For example,</source>
          <target state="translated">同じ変数を精査してすぐに入れ子になった大文字小文字の表現をマージします。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="5d3ef442f47f2ad90bddd19466398680ce25d8b8" translate="yes" xml:space="preserve">
          <source>Merge two maps.</source>
          <target state="translated">2 つのマップをマージします。</target>
        </trans-unit>
        <trans-unit id="01d28a50eda177ec75942bb24c131250cdadabfb" translate="yes" xml:space="preserve">
          <source>Merges</source>
          <target state="translated">Merges</target>
        </trans-unit>
        <trans-unit id="68f4145fee7dde76afceb910165924ad14cf0d00" translate="yes" xml:space="preserve">
          <source>Message</source>
          <target state="translated">Message</target>
        </trans-unit>
        <trans-unit id="024d721d7acc6f792bdb94402861b9353228512e" translate="yes" xml:space="preserve">
          <source>Messages sent back to GHC from GHCi.TH, to implement the methods of &lt;code&gt;Quasi&lt;/code&gt;. For an overview of how TH works with Remote GHCi, see Note [Remote Template Haskell] in GHCi.TH.</source>
          <target state="translated">&lt;code&gt;Quasi&lt;/code&gt; のメソッドを実装するために、GHCi.THからGHCに送り返されたメッセージ。THがリモートGHCiとどのように連携するかの概要については、GHCi.THの注[リモートテンプレートHaskell]を参照してください。</target>
        </trans-unit>
        <trans-unit id="8d546a6dea9ff90d517b51c25b35319931ae4e04" translate="yes" xml:space="preserve">
          <source>Meta</source>
          <target state="translated">Meta</target>
        </trans-unit>
        <trans-unit id="b4c38ae701ee7b9a08939eed835436caf60c6814" translate="yes" xml:space="preserve">
          <source>Meta information: &lt;code&gt;M1&lt;/code&gt;</source>
          <target state="translated">メタ情報： &lt;code&gt;M1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dbd5ac6aaff1e4e5e3680f3fcf71d0e95837cf76" translate="yes" xml:space="preserve">
          <source>Meta-information</source>
          <target state="translated">Meta-information</target>
        </trans-unit>
        <trans-unit id="1704ec077999acd78a98ea2ae7222e509894be96" translate="yes" xml:space="preserve">
          <source>Meta-information (constructor names, etc.)</source>
          <target state="translated">メタ情報(コンストラクタ名など</target>
        </trans-unit>
        <trans-unit id="251edc0eb5a820646bda4e103f0f007fd55321f3" translate="yes" xml:space="preserve">
          <source>Metadata</source>
          <target state="translated">Metadata</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="1ce80809f59fb3e44fb71f48daaa5004423cdbcf" translate="yes" xml:space="preserve">
          <source>Methods for the RealFrac instances for &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;, with specialised versions for &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; の RealFracインスタンスのメソッド、および &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 専用のバージョン。</target>
        </trans-unit>
        <trans-unit id="056ba157b3837c9d7e53cf9a40b8f90212f59c28" translate="yes" xml:space="preserve">
          <source>Micro</source>
          <target state="translated">Micro</target>
        </trans-unit>
        <trans-unit id="064b3c6c13a563b40aaf45097d6cc83685cba7e9" translate="yes" xml:space="preserve">
          <source>Milan Straka 2014</source>
          <target state="translated">ミラノ・ストラカ 2014</target>
        </trans-unit>
        <trans-unit id="90b5d11de357d4d026169517972bc20fb4c73559" translate="yes" xml:space="preserve">
          <source>Milli</source>
          <target state="translated">Milli</target>
        </trans-unit>
        <trans-unit id="7eb0cee888ab55b559592d38eec027e9118d7d35" translate="yes" xml:space="preserve">
          <source>Min</source>
          <target state="translated">Min</target>
        </trans-unit>
        <trans-unit id="2afa51042312a9e6905578605fd22a3a6cf486b0" translate="yes" xml:space="preserve">
          <source>Min/Max</source>
          <target state="translated">Min/Max</target>
        </trans-unit>
        <trans-unit id="e4a689975026b0f86f50d77f497034f70d01b4fa" translate="yes" xml:space="preserve">
          <source>Minimal complete definition</source>
          <target state="translated">最小限の完全定義</target>
        </trans-unit>
        <trans-unit id="ac6d77ddd397a6c5eefaab2dc1cbd2ec7a9c37eb" translate="yes" xml:space="preserve">
          <source>Minimal complete definition: &lt;code&gt;&lt;a href=&quot;control-monad-error#v:noMsg&quot;&gt;noMsg&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;control-monad-error#v:strMsg&quot;&gt;strMsg&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">最小限の完全な定義： &lt;code&gt;&lt;a href=&quot;control-monad-error#v:noMsg&quot;&gt;noMsg&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;control-monad-error#v:strMsg&quot;&gt;strMsg&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="665f3b3bb2b72327a6fd69442668299a386cb99c" translate="yes" xml:space="preserve">
          <source>Minimal complete definition: &lt;code&gt;&lt;a href=&quot;control-monad-error-class#v:noMsg&quot;&gt;noMsg&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;control-monad-error-class#v:strMsg&quot;&gt;strMsg&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">最小限の完全な定義： &lt;code&gt;&lt;a href=&quot;control-monad-error-class#v:noMsg&quot;&gt;noMsg&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;control-monad-error-class#v:strMsg&quot;&gt;strMsg&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ab7e52c60d681dae189f8720979ee422a3d05064" translate="yes" xml:space="preserve">
          <source>Minimal complete definition: &lt;code&gt;&lt;a href=&quot;control-monad-trans-error#v:noMsg&quot;&gt;noMsg&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;control-monad-trans-error#v:strMsg&quot;&gt;strMsg&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">最小限の完全な定義： &lt;code&gt;&lt;a href=&quot;control-monad-trans-error#v:noMsg&quot;&gt;noMsg&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;control-monad-trans-error#v:strMsg&quot;&gt;strMsg&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7fd6feae02a9278c6dea240fd40b8aeb536aa561" translate="yes" xml:space="preserve">
          <source>Minimal complete definition: either &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-eq#v:-47--61-&quot;&gt;/=&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">最小限の完全な定義： &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-eq#v:-47--61-&quot;&gt;/=&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f44945409c6023d19bee5e3d0ed6a60092084206" translate="yes" xml:space="preserve">
          <source>Minimal complete definition: either &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-ord#v:-60--61-&quot;&gt;&amp;lt;=&lt;/a&gt;&lt;/code&gt;. Using &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; can be more efficient for complex types.</source>
          <target state="translated">最小限の完全な定義： &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-ord#v:-60--61-&quot;&gt;&amp;lt;=&lt;/a&gt;&lt;/code&gt; 。複合型の場合、 &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; を使用するとより効率的です。</target>
        </trans-unit>
        <trans-unit id="af209dc37f96b74f9773c4c4d607b8e40fe1baaf" translate="yes" xml:space="preserve">
          <source>Minimal complete definition: either &lt;code&gt;&lt;a href=&quot;prelude#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;prelude#v:-47--61-&quot;&gt;/=&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">最小限の完全な定義： &lt;code&gt;&lt;a href=&quot;prelude#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;prelude#v:-47--61-&quot;&gt;/=&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7953d2f2689ba6cdd1d813d83ee82da633d40079" translate="yes" xml:space="preserve">
          <source>Minimal complete definition: either &lt;code&gt;&lt;a href=&quot;prelude#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;prelude#v:-60--61-&quot;&gt;&amp;lt;=&lt;/a&gt;&lt;/code&gt;. Using &lt;code&gt;&lt;a href=&quot;prelude#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; can be more efficient for complex types.</source>
          <target state="translated">最小限の完全な定義： &lt;code&gt;&lt;a href=&quot;prelude#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;prelude#v:-60--61-&quot;&gt;&amp;lt;=&lt;/a&gt;&lt;/code&gt; 。複合型の場合、 &lt;code&gt;&lt;a href=&quot;prelude#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; を使用するとより効率的です。</target>
        </trans-unit>
        <trans-unit id="8799ac72cc46a81952dd429d7c4af0260005305d" translate="yes" xml:space="preserve">
          <source>Minimal definition is either both of &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;put&lt;/code&gt; or just &lt;code&gt;state&lt;/code&gt;</source>
          <target state="translated">最小限の定義は、 &lt;code&gt;get&lt;/code&gt; と &lt;code&gt;put&lt;/code&gt; 両方、または単に &lt;code&gt;state&lt;/code&gt; いずれかです。</target>
        </trans-unit>
        <trans-unit id="af4f6aa56d4f948a03f18d3a1d4d1605a2212012" translate="yes" xml:space="preserve">
          <source>Minimal size of next &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BufferRange&quot;&gt;BufferRange&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">次の &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BufferRange&quot;&gt;BufferRange&lt;/a&gt;&lt;/code&gt; の最小サイズ。</target>
        </trans-unit>
        <trans-unit id="36461254172845cccb18d0bf80dba5e9c41d913e" translate="yes" xml:space="preserve">
          <source>Minimal verbosity: print one line per compilation (this is the default when &lt;a href=&quot;#ghc-flag---make&quot;&gt;&lt;code&gt;--make&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ghc-flag---interactive&quot;&gt;&lt;code&gt;--interactive&lt;/code&gt;&lt;/a&gt; is on).</source>
          <target state="translated">最小限の冗長性：コンパイルごとに1行を出力します（これは&lt;a href=&quot;#ghc-flag---make&quot;&gt; &lt;code&gt;--make&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#ghc-flag---interactive&quot;&gt; &lt;code&gt;--interactive&lt;/code&gt; &lt;/a&gt;がオンの場合のデフォルトです）。</target>
        </trans-unit>
        <trans-unit id="13dd082aed431f232c24aac55d18467c2b663e2e" translate="yes" xml:space="preserve">
          <source>Minimum % ⟨n⟩ of heap which must be available for allocation.</source>
          <target state="translated">割り当てに利用可能でなければならないヒープの最小 % ⟨n⟩。</target>
        </trans-unit>
        <trans-unit id="b2c5225f522390e3a01cad15518a7fad4845c00b" translate="yes" xml:space="preserve">
          <source>Minimum of two size hints.</source>
          <target state="translated">最小2サイズのヒント。</target>
        </trans-unit>
        <trans-unit id="6375390ec9f90418a19031fe946ea7c8b08c7ed6" translate="yes" xml:space="preserve">
          <source>Minor utilities for the HPC tools.</source>
          <target state="translated">HPCツールのためのマイナーなユーティリティ。</target>
        </trans-unit>
        <trans-unit id="0f40575a4f8fcd450cc8e24d023e408e6a539894" translate="yes" xml:space="preserve">
          <source>MiscFlags</source>
          <target state="translated">MiscFlags</target>
        </trans-unit>
        <trans-unit id="2aa593cd19b234155d3652986effbe2cabb181f4" translate="yes" xml:space="preserve">
          <source>Miscelaneous information available for debugging purposes.</source>
          <target state="translated">デバッグ目的で利用可能な情報があります。</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="6b75dbc2d8c884fa76ebd1fab5321c113f5bdcc6" translate="yes" xml:space="preserve">
          <source>Miscellaneous GMP-provided operations</source>
          <target state="translated">その他のGMP提供業務</target>
        </trans-unit>
        <trans-unit id="5e68c0546c69483d4d1cb26b8fe241467b0b0496" translate="yes" xml:space="preserve">
          <source>Miscellaneous backend dumps</source>
          <target state="translated">その他のバックエンドダンプ</target>
        </trans-unit>
        <trans-unit id="314bb4fc83d55b365225efaa4fc333e95057e960" translate="yes" xml:space="preserve">
          <source>Miscellaneous functions</source>
          <target state="translated">その他の機能</target>
        </trans-unit>
        <trans-unit id="766dde0dd177116968305ecf5af25276425044a7" translate="yes" xml:space="preserve">
          <source>Miscellaneous functions on tactics</source>
          <target state="translated">戦術に関する雑多な機能</target>
        </trans-unit>
        <trans-unit id="fc807e2d7976d257c9171d114a6eb3efc8cab20a" translate="yes" xml:space="preserve">
          <source>Miscellaneous information about the system environment.</source>
          <target state="translated">システム環境に関する雑多な情報。</target>
        </trans-unit>
        <trans-unit id="142e1b72c08ab742f64274e6c7d575bbcc8429f4" translate="yes" xml:space="preserve">
          <source>Miscellaneous parameters</source>
          <target state="translated">その他のパラメータ</target>
        </trans-unit>
        <trans-unit id="75614093589ee1a6ed1d6b3a9a321b001454bfa9" translate="yes" xml:space="preserve">
          <source>Miscellaneous tactic functions</source>
          <target state="translated">雑技機能</target>
        </trans-unit>
        <trans-unit id="120f9c9998409369934eaac96bbbad1e69990044" translate="yes" xml:space="preserve">
          <source>Mismatch between the argument types and the format string, as well as any other syntactic or semantic errors in the format string, will cause an exception to be thrown at runtime.</source>
          <target state="translated">引数の型とフォーマット文字列の間の不一致や、フォーマット文字列の他の構文エラーやセマンティックエラーは、実行時に例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="fd7391b6720b809c7c41ed50cf63fdc87dac6b9d" translate="yes" xml:space="preserve">
          <source>Mix</source>
          <target state="translated">Mix</target>
        </trans-unit>
        <trans-unit id="a5446b7cafd6f64fa36d064009daafea44ba609c" translate="yes" xml:space="preserve">
          <source>Mix DataStructure</source>
          <target state="translated">ミックスデータ構造</target>
        </trans-unit>
        <trans-unit id="832e98200646adcbff0ea6a3b2b8398b73caa5ed" translate="yes" xml:space="preserve">
          <source>MixEntry</source>
          <target state="translated">MixEntry</target>
        </trans-unit>
        <trans-unit id="517dcc2aab9ff981e3d03a30ce6935c8e5ebac7e" translate="yes" xml:space="preserve">
          <source>MixEntryDom</source>
          <target state="translated">MixEntryDom</target>
        </trans-unit>
        <trans-unit id="d6840928afb9e96dced0538038e4e1c1eac39e1f" translate="yes" xml:space="preserve">
          <source>MkSystemTime</source>
          <target state="translated">MkSystemTime</target>
        </trans-unit>
        <trans-unit id="30376c6ee888990666c554e49bebf998120a5703" translate="yes" xml:space="preserve">
          <source>Mn: Mark, Non-Spacing</source>
          <target state="translated">Mn.マーク、ノンスペーシング</target>
        </trans-unit>
        <trans-unit id="f388dbfb78ec3e8821ae0844a947cecd488dd5ff" translate="yes" xml:space="preserve">
          <source>Mod</source>
          <target state="translated">Mod</target>
        </trans-unit>
        <trans-unit id="f149e0b10681e7408d843a0239621f9345205680" translate="yes" xml:space="preserve">
          <source>ModJulianDate</source>
          <target state="translated">ModJulianDate</target>
        </trans-unit>
        <trans-unit id="7a6df6254eeab02c96836922ac0139d166dad965" translate="yes" xml:space="preserve">
          <source>ModName</source>
          <target state="translated">ModName</target>
        </trans-unit>
        <trans-unit id="a7b93d2128e820f861fc8dfccd9f5521e89ad21f" translate="yes" xml:space="preserve">
          <source>Mode</source>
          <target state="translated">Mode</target>
        </trans-unit>
        <trans-unit id="e6c089b7ef71ad84d0b5ea7857ddf7e884d95cec" translate="yes" xml:space="preserve">
          <source>Mode wrappers</source>
          <target state="translated">モードラッパー</target>
        </trans-unit>
        <trans-unit id="6fd961190d330e230cb25033021abb41924a952f" translate="yes" xml:space="preserve">
          <source>Mode: A mode may be used on the command line only. You can pass only one mode flag. For example, &lt;a href=&quot;#ghc-flag---make&quot;&gt;&lt;code&gt;--make&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ghc-flag--E&quot;&gt;&lt;code&gt;-E&lt;/code&gt;&lt;/a&gt;. The available modes are listed in &lt;a href=&quot;#modes&quot;&gt;Modes of operation&lt;/a&gt;.</source>
          <target state="translated">モード：モードはコマンドラインでのみ使用できます。渡すことができるモードフラグは1つだけです。たとえば、-- &lt;a href=&quot;#ghc-flag---make&quot;&gt; &lt;code&gt;--make&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#ghc-flag--E&quot;&gt; &lt;code&gt;-E&lt;/code&gt; です&lt;/a&gt;。使用可能なモードはにリストされている&lt;a href=&quot;#modes&quot;&gt;操作のモード&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b0b30babf16ffbe6c525df9ecff6598de4eeedcf" translate="yes" xml:space="preserve">
          <source>ModifiedJulianDay</source>
          <target state="translated">ModifiedJulianDay</target>
        </trans-unit>
        <trans-unit id="ad8932265b6513f8f4632598479d16d811295a0e" translate="yes" xml:space="preserve">
          <source>ModifierLetter</source>
          <target state="translated">ModifierLetter</target>
        </trans-unit>
        <trans-unit id="06e78e77af950abb3de1917e6c715f81fbe8971c" translate="yes" xml:space="preserve">
          <source>ModifierParser</source>
          <target state="translated">ModifierParser</target>
        </trans-unit>
        <trans-unit id="a6384fc88bd1c896276b41e4e1213a85a46e0ff7" translate="yes" xml:space="preserve">
          <source>ModifierSymbol</source>
          <target state="translated">ModifierSymbol</target>
        </trans-unit>
        <trans-unit id="6320257ec347ce7461b6559133a0cc26667c4e6d" translate="yes" xml:space="preserve">
          <source>Modify the contents of a &lt;code&gt;MutVar#&lt;/code&gt;, returning the previous contents and the result of applying the given function to the previous contents.</source>
          <target state="translated">&lt;code&gt;MutVar#&lt;/code&gt; のコンテンツを変更し、以前のコンテンツと、指定された関数を以前のコンテンツに適用した結果を返します。</target>
        </trans-unit>
        <trans-unit id="f0a2b227aefd779ece79d3f6ad8baef4e51ab448" translate="yes" xml:space="preserve">
          <source>Modify the contents of a &lt;code&gt;MutVar#&lt;/code&gt;, returning the previous contents and the result of applying the given function to the previous contents. Note that this isn't strictly speaking the correct type for this function; it should really be &lt;code&gt;MutVar# s a -&amp;gt; (a -&amp;gt; (a,b)) -&amp;gt; State# s -&amp;gt; (# State# s, a, (a, b) #)&lt;/code&gt;, but we don't know about pairs here.</source>
          <target state="translated">&lt;code&gt;MutVar#&lt;/code&gt; のコンテンツを変更し、以前のコンテンツと、指定された関数を以前のコンテンツに適用した結果を返します。これは厳密にはこの関数の正しい型ではないことに注意してください。それは実際には &lt;code&gt;MutVar# s a -&amp;gt; (a -&amp;gt; (a,b)) -&amp;gt; State# s -&amp;gt; (# State# s, a, (a, b) #)&lt;/code&gt; である必要がありますが、ペアについてはわかりませんここに。</target>
        </trans-unit>
        <trans-unit id="6ecabc24fa376f8bfdd5f9771659364d02446fee" translate="yes" xml:space="preserve">
          <source>Modify the depth of the evaluation history tracked by GHCi.</source>
          <target state="translated">GHCiで追跡した評価履歴の深さを変更します。</target>
        </trans-unit>
        <trans-unit id="18199c686f30decfd6449ba999c8002260a92575" translate="yes" xml:space="preserve">
          <source>Modify the value of an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; の値を変更します。</target>
        </trans-unit>
        <trans-unit id="34813144ec19f74db4ddda85d08e6849e3f1487f" translate="yes" xml:space="preserve">
          <source>Modifying the code slightly, however, produces code which will not compile:</source>
          <target state="translated">しかし、コードをわずかに変更すると、コンパイルできないコードが生成されます。</target>
        </trans-unit>
        <trans-unit id="4c32fd82ceb8daf13a6616a1ab5a958038171a59" translate="yes" xml:space="preserve">
          <source>Modifying the user environment</source>
          <target state="translated">ユーザー環境の変更</target>
        </trans-unit>
        <trans-unit id="e075617bae1ed6d213cacf5b4a1963cf2b558270" translate="yes" xml:space="preserve">
          <source>Modular arithmetic</source>
          <target state="translated">モジュラー演算</target>
        </trans-unit>
        <trans-unit id="b8ff02892916ff59f7fbd4e617fccd01f6bca576" translate="yes" xml:space="preserve">
          <source>Module</source>
          <target state="translated">Module</target>
        </trans-unit>
        <trans-unit id="40b31c77d57b0de63020f3b87cedcf39795f6b82" translate="yes" xml:space="preserve">
          <source>Module &lt;a href=&quot;data-array-marray&quot;&gt;Data.Array.MArray&lt;/a&gt; provides the interface of storable arrays. They are instances of class &lt;code&gt;&lt;a href=&quot;data-array-marray#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; (with the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad).</source>
          <target state="translated">モジュール&lt;a href=&quot;data-array-marray&quot;&gt;Data.Array.MArray&lt;/a&gt;は、格納可能な配列のインターフェースを提供します。これらはクラス &lt;code&gt;&lt;a href=&quot;data-array-marray#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドを含む）のインスタンスです。</target>
        </trans-unit>
        <trans-unit id="dfbffd6a6167f932043b8ceb3531f4ecd4669be4" translate="yes" xml:space="preserve">
          <source>Module &lt;a href=&quot;data-array-marray&quot;&gt;Data.Array.MArray&lt;/a&gt; provides the interface of storable arrays. They are instances of class &lt;code&gt;&lt;a href=&quot;data-array-marray#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; (with the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad).</source>
          <target state="translated">Module &lt;a href=&quot;data-array-marray&quot;&gt;Data.Array.MArray&lt;/a&gt; provides the interface of storable arrays. They are instances of class &lt;code&gt;&lt;a href=&quot;data-array-marray#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; (with the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad).</target>
        </trans-unit>
        <trans-unit id="59fc78cc7268113b6d14c7ba3a0c68ede04edd9f" translate="yes" xml:space="preserve">
          <source>Module &lt;code&gt;Y&lt;/code&gt; exports all the entities defined in &lt;code&gt;Y&lt;/code&gt;, namely the data constructors &lt;code&gt;D1&lt;/code&gt; and &lt;code&gt;D2&lt;/code&gt;, and &lt;em&gt;implicitly&lt;/em&gt; the data family &lt;code&gt;D&lt;/code&gt;, even though it&amp;rsquo;s defined in &lt;code&gt;X&lt;/code&gt;. This means you can write &lt;code&gt;import Y( D(D1,D2) )&lt;/code&gt;&lt;em&gt;without&lt;/em&gt; giving an explicit export list like this:</source>
          <target state="translated">モジュール &lt;code&gt;Y&lt;/code&gt; は、すべてで定義されたエンティティエクスポート &lt;code&gt;Y&lt;/code&gt; 、すなわちデータコンストラクタ &lt;code&gt;D1&lt;/code&gt; および &lt;code&gt;D2&lt;/code&gt; 、および&lt;em&gt;暗黙的&lt;/em&gt;データファミリ &lt;code&gt;D&lt;/code&gt; をそれがで定義されていたとしても、 &lt;code&gt;X&lt;/code&gt; 。つまり、次のような明示的なエクスポートリストを指定し&lt;em&gt;なくても&lt;/em&gt; &lt;code&gt;import Y( D(D1,D2) )&lt;/code&gt; &lt;em&gt;を&lt;/em&gt;記述できます。</target>
        </trans-unit>
        <trans-unit id="7ca5283a9401b368ad7082d2368aee85af976008" translate="yes" xml:space="preserve">
          <source>Module Data.Typeable re-exported for convenience</source>
          <target state="translated">モジュールData.Typeableは、便利なように再エキスポートされています。</target>
        </trans-unit>
        <trans-unit id="ec22b40d47f573ceb3764447b0fd39403f6d6c2d" translate="yes" xml:space="preserve">
          <source>Module authors using the &lt;a href=&quot;#extension-Trustworthy&quot;&gt;&lt;code&gt;Trustworthy&lt;/code&gt;&lt;/a&gt; language extension for a module &lt;code&gt;M&lt;/code&gt; should ensure that &lt;code&gt;M&lt;/code&gt;&amp;lsquo;s public API (the symbols exposed by its export list) can&amp;rsquo;t be used in an unsafe manner. This mean that symbols exported should respect type safety and referential transparency.</source>
          <target state="translated">モジュール &lt;code&gt;M&lt;/code&gt; に&lt;a href=&quot;#extension-Trustworthy&quot;&gt; &lt;code&gt;Trustworthy&lt;/code&gt; &lt;/a&gt;言語拡張機能を使用するモジュール作成者は、 &lt;code&gt;M&lt;/code&gt; のパブリックAPI（そのエクスポートリストによって公開されるシンボル）が安全でない方法で使用されないようにする必要があります。つまり、エクスポートされるシンボルは、タイプセーフと参照の透明性を尊重する必要があります。</target>
        </trans-unit>
        <trans-unit id="91ba4bca6673e09b576e66d35a05c3026f377972" translate="yes" xml:space="preserve">
          <source>Module authors using the &lt;a href=&quot;#extension-Trustworthy&quot;&gt;&lt;code&gt;Trustworthy&lt;/code&gt;&lt;/a&gt; language extension for a module &lt;code&gt;M&lt;/code&gt; should ensure that &lt;code&gt;M&lt;/code&gt;&amp;rsquo;s public API (the symbols exposed by its export list) can&amp;rsquo;t be used in an unsafe manner. This mean that symbols exported should respect type safety and referential transparency.</source>
          <target state="translated">Module authors using the &lt;a href=&quot;#extension-Trustworthy&quot;&gt; &lt;code&gt;Trustworthy&lt;/code&gt; &lt;/a&gt; language extension for a module &lt;code&gt;M&lt;/code&gt; should ensure that &lt;code&gt;M&lt;/code&gt; &amp;rsquo;s public API (the symbols exposed by its export list) can&amp;rsquo;t be used in an unsafe manner. This mean that symbols exported should respect type safety and referential transparency.</target>
        </trans-unit>
        <trans-unit id="58b8208bcfdac835bd589f0a0f394caee9130541" translate="yes" xml:space="preserve">
          <source>Module names</source>
          <target state="translated">モジュール名</target>
        </trans-unit>
        <trans-unit id="eb27714f2a03885159601b0fa4f8b118e5c3a120" translate="yes" xml:space="preserve">
          <source>Module prefix of a name, if it exists.</source>
          <target state="translated">モジュール名の接頭辞(存在する場合)。</target>
        </trans-unit>
        <trans-unit id="00d767e865b30777f85d5e023407cb4c65ee4110" translate="yes" xml:space="preserve">
          <source>Module signatures actually consist of two closely related features:</source>
          <target state="translated">モジュールのシグネチャは、実際には密接に関連した2つの機能で構成されています。</target>
        </trans-unit>
        <trans-unit id="80246c9711a49a29d3a5e03817c371dd6ae4cbfc" translate="yes" xml:space="preserve">
          <source>ModuleAnnotation</source>
          <target state="translated">ModuleAnnotation</target>
        </trans-unit>
        <trans-unit id="538831de95e10dc8de9dab5d4714b91d07aa6e76" translate="yes" xml:space="preserve">
          <source>ModuleInfo</source>
          <target state="translated">ModuleInfo</target>
        </trans-unit>
        <trans-unit id="17c49dd9a2601ed05a4293ce1094e4ae4f9be60b" translate="yes" xml:space="preserve">
          <source>Modules compiled with this option can be freely mixed with modules compiled without it; indeed, most libraries will typically be compiled without &lt;a href=&quot;#ghc-flag--fhpc&quot;&gt;&lt;code&gt;-fhpc&lt;/code&gt;&lt;/a&gt;. When the program is run, coverage data will only be generated for those modules that were compiled with &lt;a href=&quot;#ghc-flag--fhpc&quot;&gt;&lt;code&gt;-fhpc&lt;/code&gt;&lt;/a&gt;, and the &lt;strong&gt;hpc&lt;/strong&gt; tool will only show information about those modules.</source>
          <target state="translated">このオプションでコンパイルされたモジュールは、それなしでコンパイルされたモジュールと自由に組み合わせることができます。実際、ほとんどのライブラリは通常&lt;a href=&quot;#ghc-flag--fhpc&quot;&gt; &lt;code&gt;-fhpc&lt;/code&gt; &lt;/a&gt;なしでコンパイルされます。プログラムが実行されると、カバレッジデータは&lt;a href=&quot;#ghc-flag--fhpc&quot;&gt; &lt;code&gt;-fhpc&lt;/code&gt; &lt;/a&gt;でコンパイルされたモジュールに対してのみ生成され、&lt;strong&gt;hpc&lt;/strong&gt;ツールはそれらのモジュールに関する情報のみを表示します。</target>
        </trans-unit>
        <trans-unit id="7f34a515a9849c6d1d6359aa243ee958639d54b5" translate="yes" xml:space="preserve">
          <source>Modules reexported by this package. This list takes the form of &lt;code&gt;pkg:OldName as NewName (A@orig-pkg-0.1-HASH)&lt;/code&gt;: the first portion of the string is the user-written reexport specification (possibly omitting the package qualifier and the renaming), while the parenthetical is the original package which exposed the module under are particular name. Reexported modules have a relaxed overlap constraint: it&amp;rsquo;s permissible for two packages to reexport the same module as the same name if the reexported moduleis identical.</source>
          <target state="translated">このパッケージによって再エクスポートされたモジュール。このリストは、 &lt;code&gt;pkg:OldName as NewName (A@orig-pkg-0.1-HASH)&lt;/code&gt; の形式をとります。文字列の最初の部分は、ユーザー作成の再エクスポート指定です（パッケージ修飾子と名前の変更が省略されている可能性があります）。特定の名前でモジュールを公開した元のパッケージです。再エクスポートされたモジュールには、オーバーラップ制約が緩和されています。再エクスポートされたモジュールが同一である場合、2つのパッケージが同じモジュールを同じ名前で再エクスポートすることは許容されます。</target>
        </trans-unit>
        <trans-unit id="44309d68cfcd4f5d92e2cc5899604b23cc2ee7ad" translate="yes" xml:space="preserve">
          <source>Modules using unboxed tuples or sums will automatically enable &lt;a href=&quot;phases#ghc-flag--fobject-code&quot;&gt;&lt;code&gt;-fobject-code&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Modules using unboxed tuples or sums will automatically enable &lt;a href=&quot;phases#ghc-flag--fobject-code&quot;&gt; &lt;code&gt;-fobject-code&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e3bc4d952ccd3346da0175b0abdc685fcb3a3272" translate="yes" xml:space="preserve">
          <source>Modulus of natural numbers. &lt;code&gt;Mod x 0&lt;/code&gt; is undefined (i.e., it cannot be reduced).</source>
          <target state="translated">自然数の係数。 &lt;code&gt;Mod x 0&lt;/code&gt; は未定義です（つまり、縮小できません）。</target>
        </trans-unit>
        <trans-unit id="11531c3c6a7c6d49562c188b9bdc843a54288d30" translate="yes" xml:space="preserve">
          <source>Monad</source>
          <target state="translated">Monad</target>
        </trans-unit>
        <trans-unit id="f117e306f3bfe1ed114c24f6bd68d2322d3b742f" translate="yes" xml:space="preserve">
          <source>Monad comprehensions generalise the list comprehension notation, including parallel comprehensions (&lt;a href=&quot;#parallel-list-comprehensions&quot;&gt;Parallel List Comprehensions&lt;/a&gt;) and transform comprehensions (&lt;a href=&quot;#generalised-list-comprehensions&quot;&gt;Generalised (SQL-like) List Comprehensions&lt;/a&gt;) to work for any monad.</source>
          <target state="translated">モナド内包表記は、並列内包表記（&lt;a href=&quot;#parallel-list-comprehensions&quot;&gt;Parallel List Comprehensions&lt;/a&gt;）および変換内包表記（&lt;a href=&quot;#generalised-list-comprehensions&quot;&gt;Generalized（SQL-like）List Comprehensions&lt;/a&gt;）を含むリスト内包表記を一般化して、任意のモナドで機能します。</target>
        </trans-unit>
        <trans-unit id="2b154b6a867643b57ffe3e50fb7555800ae79d0a" translate="yes" xml:space="preserve">
          <source>Monad comprehensions support rebindable syntax (&lt;a href=&quot;#rebindable-syntax&quot;&gt;Rebindable syntax and the implicit Prelude import&lt;/a&gt;). Without rebindable syntax, the operators from the &amp;ldquo;standard binding&amp;rdquo; module are used; with rebindable syntax, the operators are looked up in the current lexical scope. For example, parallel comprehensions will be typechecked and desugared using whatever &amp;ldquo;&lt;code&gt;mzip&lt;/code&gt;&amp;rdquo; is in scope.</source>
          <target state="translated">モナド内包表記は、再バインド可能な構文（&lt;a href=&quot;#rebindable-syntax&quot;&gt;再バインド可能な構文と暗黙的なPreludeインポート&lt;/a&gt;）をサポートしています。再バインド可能な構文がない場合、「標準バインディング」モジュールの演算子が使用されます。再バインド可能な構文では、演算子は現在の字句スコープで検索されます。たとえば、並列内包表記は、スコープ内にある「 &lt;code&gt;mzip&lt;/code&gt; 」を使用してタイプチェックおよび脱糖化されます。</target>
        </trans-unit>
        <trans-unit id="9118814255c8cbff0f92707b31e2747bffbb4a14" translate="yes" xml:space="preserve">
          <source>Monad comprehensions support:</source>
          <target state="translated">モナドの理解力をサポートします。</target>
        </trans-unit>
        <trans-unit id="ccf5f31df2b47a5c8b3c7b4b8bec553c0e566b1a" translate="yes" xml:space="preserve">
          <source>Monad transformation</source>
          <target state="translated">モナド変換</target>
        </trans-unit>
        <trans-unit id="1c0fd921dbc28d4c0620875213e77e22d440c417" translate="yes" xml:space="preserve">
          <source>Monad transformations</source>
          <target state="translated">モナド変換</target>
        </trans-unit>
        <trans-unit id="b85021f1542ee4ad142b965dc1641cf10fd4260f" translate="yes" xml:space="preserve">
          <source>Monad values are functions from the environment to a value. The bound function is applied to the bound value, and both have access to the shared environment.</source>
          <target state="translated">モナド値は、環境から値への関数です。バインド関数はバウンド値に適用され、どちらも共有環境へのアクセス権を持っています。</target>
        </trans-unit>
        <trans-unit id="5a1aa98499a1d957e619f8fa4af2de6d1152500b" translate="yes" xml:space="preserve">
          <source>MonadComprehensions</source>
          <target state="translated">MonadComprehensions</target>
        </trans-unit>
        <trans-unit id="c6fb342904057550b8ef01f426ca92e465116ed4" translate="yes" xml:space="preserve">
          <source>MonadCont</source>
          <target state="translated">MonadCont</target>
        </trans-unit>
        <trans-unit id="89861c606303650c7e7f0d7c743da67de31d69c7" translate="yes" xml:space="preserve">
          <source>MonadCont class</source>
          <target state="translated">モナドコンクラス</target>
        </trans-unit>
        <trans-unit id="39a661caab336fa22d832d7beffd7388def93e46" translate="yes" xml:space="preserve">
          <source>MonadError</source>
          <target state="translated">MonadError</target>
        </trans-unit>
        <trans-unit id="6971cd3387fcb89462309d104896a63aacd3ef19" translate="yes" xml:space="preserve">
          <source>MonadException</source>
          <target state="translated">MonadException</target>
        </trans-unit>
        <trans-unit id="16fc28da849b4c8c2a56c99fe357bebb2ee341a7" translate="yes" xml:space="preserve">
          <source>MonadFail</source>
          <target state="translated">MonadFail</target>
        </trans-unit>
        <trans-unit id="7fdd52d0e4c29c94ae163aa3e69f06596bf4ebd0" translate="yes" xml:space="preserve">
          <source>MonadFailDesugaring</source>
          <target state="translated">MonadFailDesugaring</target>
        </trans-unit>
        <trans-unit id="8cd3e027e126ef51355bf4e476d5b9c913c5824c" translate="yes" xml:space="preserve">
          <source>MonadFix</source>
          <target state="translated">MonadFix</target>
        </trans-unit>
        <trans-unit id="464a90d352252a57d56693a4858884c98810e3a1" translate="yes" xml:space="preserve">
          <source>MonadIO</source>
          <target state="translated">MonadIO</target>
        </trans-unit>
        <trans-unit id="741fdf5e9791ce30c278a5afdbd3129dd2c1ead9" translate="yes" xml:space="preserve">
          <source>MonadPlus</source>
          <target state="translated">MonadPlus</target>
        </trans-unit>
        <trans-unit id="e59b4d8e1e1b084ca225560b46a86c3f02b6c3c8" translate="yes" xml:space="preserve">
          <source>MonadReader</source>
          <target state="translated">MonadReader</target>
        </trans-unit>
        <trans-unit id="a68c00a3ea80c75e5ccf937dfcb38fee6f14dbc7" translate="yes" xml:space="preserve">
          <source>MonadReader class</source>
          <target state="translated">モナドリーダークラス</target>
        </trans-unit>
        <trans-unit id="4dbbde36c5c41657a758435796e76b6fee9c0240" translate="yes" xml:space="preserve">
          <source>MonadState</source>
          <target state="translated">MonadState</target>
        </trans-unit>
        <trans-unit id="f176c139b4727308ec824a9344e742f670f0aa3b" translate="yes" xml:space="preserve">
          <source>MonadState class</source>
          <target state="translated">モナドステートクラス</target>
        </trans-unit>
        <trans-unit id="a2e64d3be4f20e02142a613432a291ee3dae4677" translate="yes" xml:space="preserve">
          <source>MonadState class.</source>
          <target state="translated">MonadStateクラスです。</target>
        </trans-unit>
        <trans-unit id="29e37501f89d2caf27053c9fb3f8913750d9897a" translate="yes" xml:space="preserve">
          <source>MonadTrans</source>
          <target state="translated">MonadTrans</target>
        </trans-unit>
        <trans-unit id="3f2f8d76eb3c2357f757275d57fffc9c8d4ee396" translate="yes" xml:space="preserve">
          <source>MonadTrans (&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt; s u)</source>
          <target state="translated">MonadTrans（&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt; su）</target>
        </trans-unit>
        <trans-unit id="60a504062889fae8b9e846460fc07b21f50fb371" translate="yes" xml:space="preserve">
          <source>MonadTrans (&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt; s u)</source>
          <target state="translated">MonadTrans（&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt; su）</target>
        </trans-unit>
        <trans-unit id="652f00fb36c1c38645bc9e90431a168567726128" translate="yes" xml:space="preserve">
          <source>MonadWriter</source>
          <target state="translated">MonadWriter</target>
        </trans-unit>
        <trans-unit id="f9be51da3714e0cf4aee03cf4cecccec8f06c1ad" translate="yes" xml:space="preserve">
          <source>MonadWriter class</source>
          <target state="translated">MonadWriter クラス</target>
        </trans-unit>
        <trans-unit id="52dae74b8add8e5bac5ef90f8e6def33af0626f8" translate="yes" xml:space="preserve">
          <source>MonadZip</source>
          <target state="translated">MonadZip</target>
        </trans-unit>
        <trans-unit id="37921d15310812cb15bb950e0e8c69478968709e" translate="yes" xml:space="preserve">
          <source>Monadic actions</source>
          <target state="translated">モナディックアクション</target>
        </trans-unit>
        <trans-unit id="be38a4e3e1a34b178a11a5fbcae21f0a5b3e86dc" translate="yes" xml:space="preserve">
          <source>Monadic fixpoints.</source>
          <target state="translated">モナディックフィックスポイント。</target>
        </trans-unit>
        <trans-unit id="79464d099a2a04a0be206b18bf0034c16bdc124c" translate="yes" xml:space="preserve">
          <source>Monadic fold over the elements of a structure, associating to the left, i.e. from left to right.</source>
          <target state="translated">構造体の要素の上に単月形の折り目があり、左に関連づけられています。</target>
        </trans-unit>
        <trans-unit id="0f4ba0ee1732f5a3212ba30683790be701be210c" translate="yes" xml:space="preserve">
          <source>Monadic fold over the elements of a structure, associating to the right, i.e. from right to left.</source>
          <target state="translated">構造体の要素の上に単月形の折り目があり、右に関連づけられている、すなわち右から左へ。</target>
        </trans-unit>
        <trans-unit id="5595a6b57f768b1b94cd5faeef182cec9288c190" translate="yes" xml:space="preserve">
          <source>Monadic forest builder, in breadth-first order</source>
          <target state="translated">モナディックフォレストビルダー、幅第一次で</target>
        </trans-unit>
        <trans-unit id="8b5e9251f6a7731c5728c4734b226c8f0fb9eb58" translate="yes" xml:space="preserve">
          <source>Monadic forest builder, in depth-first order</source>
          <target state="translated">モナディックフォレストビルダー、深層優先で</target>
        </trans-unit>
        <trans-unit id="92e8f6d8093ef19a3fbeb20205bdce42d7b88c0f" translate="yes" xml:space="preserve">
          <source>Monadic front-end to Text.PrettyPrint</source>
          <target state="translated">Text.PrettyPrintへのモナディックフロントエンド</target>
        </trans-unit>
        <trans-unit id="4700a1dc5dbcbeb872e70164fe9a3ec9d66a7714" translate="yes" xml:space="preserve">
          <source>Monadic lifting operators</source>
          <target state="translated">モナディックリフティングオペレーター</target>
        </trans-unit>
        <trans-unit id="cb3f1c0525f059418665af747bb13d9f2d7d0703" translate="yes" xml:space="preserve">
          <source>Monadic state transformer.</source>
          <target state="translated">モナディックステートトランス。</target>
        </trans-unit>
        <trans-unit id="afd12b25574336c915d17d02eed63bdd6790c29d" translate="yes" xml:space="preserve">
          <source>Monadic tree builder, in breadth-first order.</source>
          <target state="translated">モナディックツリービルダー、幅第一次で。</target>
        </trans-unit>
        <trans-unit id="1c0844a453139b42e240b3dbd8899eb7e45afa2d" translate="yes" xml:space="preserve">
          <source>Monadic tree builder, in depth-first order.</source>
          <target state="translated">モナディックツリービルダー、深層第一階層。</target>
        </trans-unit>
        <trans-unit id="751701098af9ceab4eca10e3e9e72843e8819c96" translate="yes" xml:space="preserve">
          <source>Monadic variation on &lt;code&gt;&lt;a href=&quot;data-data#v:fromConstrB&quot;&gt;fromConstrB&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-data#v:fromConstrB&quot;&gt;fromConstrB&lt;/a&gt;&lt;/code&gt; のモナディックバリエーション</target>
        </trans-unit>
        <trans-unit id="9159bd85753caa0996e8d4ad3b128a9014c50e05" translate="yes" xml:space="preserve">
          <source>Monadic zipping (used for monad comprehensions)</source>
          <target state="translated">モナドジッピング(モナド理解に使う</target>
        </trans-unit>
        <trans-unit id="250083fc6df0956d1673cca1cb1611bfc11ab137" translate="yes" xml:space="preserve">
          <source>Monads and functors</source>
          <target state="translated">モノッドとファンクタ</target>
        </trans-unit>
        <trans-unit id="9fade08cca7ae6ce3b29ed4f480ac77d554be713" translate="yes" xml:space="preserve">
          <source>Monads having fixed points with a 'knot-tying' semantics. Instances of &lt;code&gt;&lt;a href=&quot;control-monad-fix#t:MonadFix&quot;&gt;MonadFix&lt;/a&gt;&lt;/code&gt; should satisfy the following laws:</source>
          <target state="translated">「結び目を結ぶ」セマンティクスを持つ固定点を持つモナド。 &lt;code&gt;&lt;a href=&quot;control-monad-fix#t:MonadFix&quot;&gt;MonadFix&lt;/a&gt;&lt;/code&gt; のインスタンスは、次の法律を満たしている必要があります。</target>
        </trans-unit>
        <trans-unit id="3ab257a5f129af1981f621c8ddf84b2fd68c88ba" translate="yes" xml:space="preserve">
          <source>Monads in which &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computations may be embedded. Any monad built by applying a sequence of monad transformers to the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad will be an instance of this class.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 計算を埋め込むことができるモナド。モナド変換子のシーケンスを &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドに適用することによって構築されたモナドは、このクラスのインスタンスになります。</target>
        </trans-unit>
        <trans-unit id="bec921c5487ea6eaf795a69781d0904af33f534a" translate="yes" xml:space="preserve">
          <source>Monads that also support choice and failure.</source>
          <target state="translated">選択と失敗にも対応したモナド</target>
        </trans-unit>
        <trans-unit id="20f29bb326b4b655b5b0354aa1b0ff90343d0044" translate="yes" xml:space="preserve">
          <source>Monads with error handling</source>
          <target state="translated">エラー処理のあるモナド</target>
        </trans-unit>
        <trans-unit id="932eeb1076c85e522f02e15441fa371e3fd000ac" translate="yes" xml:space="preserve">
          <source>Monday</source>
          <target state="translated">Monday</target>
        </trans-unit>
        <trans-unit id="36181aae20a5a2ae5ba1584c42b3b9779dffec5e" translate="yes" xml:space="preserve">
          <source>Monday-starting week number (as &lt;code&gt;%W&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;data-time-format#v:formatTime&quot;&gt;formatTime&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">（月曜開始週数 &lt;code&gt;%W&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;data-time-format#v:formatTime&quot;&gt;formatTime&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b5307adf2da7c702cf60f2a0dad66c188a1c8b3b" translate="yes" xml:space="preserve">
          <source>MonoLocalBinds</source>
          <target state="translated">MonoLocalBinds</target>
        </trans-unit>
        <trans-unit id="db3026559eb3ab8db4d183918b45caef643c418f" translate="yes" xml:space="preserve">
          <source>MonoPatBinds</source>
          <target state="translated">MonoPatBinds</target>
        </trans-unit>
        <trans-unit id="9c5483b826379f2567e8ee89ca55b9c52e011529" translate="yes" xml:space="preserve">
          <source>Monoid</source>
          <target state="translated">Monoid</target>
        </trans-unit>
        <trans-unit id="0220c03411dbd64cddd0b0ccca5475f10ebe0331" translate="yes" xml:space="preserve">
          <source>Monoid functions</source>
          <target state="translated">モノイド関数</target>
        </trans-unit>
        <trans-unit id="e0ac9d688b93e0a5de738795a1f225343db79584" translate="yes" xml:space="preserve">
          <source>Monoid operations</source>
          <target state="translated">モノイド演算</target>
        </trans-unit>
        <trans-unit id="3a1b4f214513abdcdf27e4ab6401c3d176d9757e" translate="yes" xml:space="preserve">
          <source>Monoid under &lt;code&gt;&lt;a href=&quot;control-applicative#v:-60--124--62-&quot;&gt;&amp;lt;|&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-applicative#v:-60--124--62-&quot;&gt;&amp;lt;|&amp;gt;&lt;/a&gt;&lt;/code&gt; の下のモノイド。</target>
        </trans-unit>
        <trans-unit id="8f6543d6abb3998d23fb62d545057fa1ab18548a" translate="yes" xml:space="preserve">
          <source>Monoid under addition.</source>
          <target state="translated">足し算の下のモノイド。</target>
        </trans-unit>
        <trans-unit id="7029b0947bbd5af2e213d2e9bb3c221593a86f9d" translate="yes" xml:space="preserve">
          <source>Monoid under multiplication.</source>
          <target state="translated">乗算下のモノイド。</target>
        </trans-unit>
        <trans-unit id="3e61bbeed3f08fcc986f97d9c436530dd737834a" translate="yes" xml:space="preserve">
          <source>Monomorphic equality operators</source>
          <target state="translated">単相等式演算子</target>
        </trans-unit>
        <trans-unit id="129d16939021f97809d6e9d8b3a79a644e52d05b" translate="yes" xml:space="preserve">
          <source>MonomorphismRestriction</source>
          <target state="translated">MonomorphismRestriction</target>
        </trans-unit>
        <trans-unit id="b9bd340d94bbe1799fa2827ad776ca607d3614ba" translate="yes" xml:space="preserve">
          <source>Morally, builder primitives are like functions &lt;code&gt;a -&amp;gt; Builder&lt;/code&gt;, that is they take a value and encode it as a sequence of bytes, represented as a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;. Of course their implementation is a bit more specialised.</source>
          <target state="translated">道徳的に、ビルダープリミティブは関数a- &lt;code&gt;a -&amp;gt; Builder&lt;/code&gt; ようなものです。つまり、値を受け取り、それをバイトのシーケンスとしてエンコードし、 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; として表します。もちろん、それらの実装はもう少し専門的です。</target>
        </trans-unit>
        <trans-unit id="a9713777f0ffc9301f9aa702f90a88fc96cd4daa" translate="yes" xml:space="preserve">
          <source>More concretely, the input to a command consists of a pair of an environment and a stack. Each value on the stack is paired with the remainder of the stack, with an empty stack being &lt;code&gt;()&lt;/code&gt;. So operators like &lt;code&gt;handleA&lt;/code&gt; that pass extra inputs to their subcommands can be designed for use with the notation by placing the values on the stack paired with the environment in this way. More precisely, the type of each argument of the operator (and its result) should have the form</source>
          <target state="translated">より具体的には、コマンドへの入力は、環境とスタックのペアで構成されます。スタックの各値は残りのスタックとペアになり、空のスタックは &lt;code&gt;()&lt;/code&gt; になります。したがって、この方法で環境とペアになっているスタックに値を配置することにより、サブコマンドに追加の入力を渡す &lt;code&gt;handleA&lt;/code&gt; のような演算子を表記法で使用するように設計できます。より正確には、演算子の各引数の型（およびその結果）は次の形式でなければなりません。</target>
        </trans-unit>
        <trans-unit id="31b13373cbfa12cceaf613513d103c95459cbf88" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;debugging#options-debugging&quot;&gt;Debugging the compiler&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;debugging#options-debugging&quot;&gt;コンパイラーのデバッグの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="c0cecd44911066c36d923fdbe5a19b53168e3dcf" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;extending_ghc#compiler-plugins&quot;&gt;Compiler Plugins&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;extending_ghc#compiler-plugins&quot;&gt;コンパイラプラグインの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="17420796ed603dd509d02e3a8d1da517181cd7d5" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;ghci#ghci-dot-files&quot;&gt;The .ghci and .haskeline files&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ghci#ghci-dot-files&quot;&gt;.ghciおよび.haskelineファイルの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="37e9d2c958040b445e2912cfe73b6aa30dc6a6e6" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;packages#packages&quot;&gt;Packages&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;packages#packages&quot;&gt;パッケージの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="baf1294ef868c2abc05ce0421bd9b43c7f792cad" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;phases#c-pre-processor&quot;&gt;Options affecting the C pre-processor&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;phases#c-pre-processor&quot;&gt;Cプリプロセッサに影響するオプションの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="51d1ab0e22b2ab0d231fb2c5972d2be780b12e73" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;phases#forcing-options-through&quot;&gt;Forcing options to a particular phase&lt;/a&gt;</source>
          <target state="translated">詳細については&lt;a href=&quot;phases#forcing-options-through&quot;&gt;、特定のフェーズにオプションを強制する&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7983553fdee60c62d0851647dd220831bd52e4c8" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;phases#options-codegen&quot;&gt;Options affecting code generation&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;phases#options-codegen&quot;&gt;コード生成に影響&lt;/a&gt;するオプションの詳細</target>
        </trans-unit>
        <trans-unit id="a16863701609094692f0c3f835ccc3d878e7e100" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;phases#options-linker&quot;&gt;Options affecting linking&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;phases#options-linker&quot;&gt;リンクに影響&lt;/a&gt;するオプションの詳細</target>
        </trans-unit>
        <trans-unit id="8adac53d0127ee0d97906718b6336057dbda2f90" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;phases#replacing-phases&quot;&gt;Replacing the program for one or more phases&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;phases#replacing-phases&quot;&gt;1つ以上のフェーズでのプログラムの置き換えの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="31663a68122cfc30712ddae060ef7c0c26fb2a9b" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;profiling#hpc&quot;&gt;Observing Code Coverage&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;profiling#hpc&quot;&gt;コードカバレッジの監視の&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="e2f3306e90d0fd9056b2e721c5d6c4dbfb662ff2" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;profiling#profiling&quot;&gt;Profiling&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;profiling#profiling&quot;&gt;プロファイリングの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="57bc71d308e6ee5ef978190de473b462803d8a22" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;separate_compilation#hi-options&quot;&gt;Other options related to interface files&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;separate_compilation#hi-options&quot;&gt;インターフェースファイルに関連するその他のオプションの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="32f905a10099284e5b8eb48c14cea142a33e05ef" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;separate_compilation#keeping-intermediates&quot;&gt;Keeping Intermediate Files&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;separate_compilation#keeping-intermediates&quot;&gt;中間ファイルの保持の&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="01ef1b0434fb54d267252cfe67e63278a877ae6d" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;separate_compilation#options-output&quot;&gt;Redirecting the compilation output(s)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;separate_compilation#options-output&quot;&gt;コンパイル出力のリダイレクトの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="eac718647e3fed68fe7ca2678bdddded1bfb9bff" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;separate_compilation#recomp&quot;&gt;The recompilation checker&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;separate_compilation#recomp&quot;&gt;再コンパイルチェッカーの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="a74b1204653431c31312edd9978554b178635f3f" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;separate_compilation#search-path&quot;&gt;The search path&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;separate_compilation#search-path&quot;&gt;検索パスの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="9dc4a10a5929dae029a66e7ac4365b025fb671f9" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;separate_compilation#temp-files&quot;&gt;Redirecting temporary files&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;separate_compilation#temp-files&quot;&gt;一時ファイルのリダイレクトの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="0af5bfe303303a371ced3d780b07e43b27e4b3ba" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;using#modes&quot;&gt;Modes of operation&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;using#modes&quot;&gt;動作モードの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="1408534385bbc206247b2d0cacd5fc927e1376cf" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;using#options-help&quot;&gt;Verbosity options&lt;/a&gt;</source>
          <target state="translated">詳細は &lt;a href=&quot;using#options-help&quot;&gt;冗長性オプションの&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4561b34d24c52f31aefc4effb398748be0d2b234" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;using#options-order&quot;&gt;Batch compiler mode&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;using#options-order&quot;&gt;バッチコンパイラモードの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="968f4ed399272e126f045721eacf076df218221c" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;using#options-platform&quot;&gt;Platform-specific Flags&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;using#options-platform&quot;&gt;プラットフォーム固有のフラグの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="920c16a3909f0ffbf5534e62118ba2d6b6ff57fd" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;using-warnings#options-sanity&quot;&gt;Warnings and sanity-checking&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;using-warnings#options-sanity&quot;&gt;警告と健全性チェックの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="50fd034f800c349a7431cd23c8f6ce2a124f77fa" translate="yes" xml:space="preserve">
          <source>More details:</source>
          <target state="translated">詳細はこちら</target>
        </trans-unit>
        <trans-unit id="a5c3d993dce9c18048d2dd451f76a4bbd8fe5e29" translate="yes" xml:space="preserve">
          <source>More documentation can be found in the &lt;a href=&quot;https://wiki.haskell.org/Functional_dependencies&quot;&gt;Haskell Wiki&lt;/a&gt;.</source>
          <target state="translated">その他のドキュメントは&lt;a href=&quot;https://wiki.haskell.org/Functional_dependencies&quot;&gt;Haskell Wikiにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b6ff0bd29737185cd5b1918e0904197bf24a1392" translate="yes" xml:space="preserve">
          <source>More formally, the desugaring is as follows. We write &lt;code&gt;D[ e | Q]&lt;/code&gt; to mean the desugaring of the monad comprehension &lt;code&gt;[ e | Q]&lt;/code&gt;:</source>
          <target state="translated">より正式には、desugaringは次のとおりです。私たちは書く &lt;code&gt;D[ e | Q]&lt;/code&gt; モナド理解の脱糖を意味する &lt;code&gt;[ e | Q]&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="2085068fa8f84e11b2c779916cc311b96fc67d3f" translate="yes" xml:space="preserve">
          <source>More generally, dependencies take the form &lt;code&gt;x1 ... xn -&amp;gt; y1 ... ym&lt;/code&gt;, where &lt;code&gt;x1&lt;/code&gt;, &amp;hellip;, &lt;code&gt;xn&lt;/code&gt;, and &lt;code&gt;y1&lt;/code&gt;, &amp;hellip;, &lt;code&gt;yn&lt;/code&gt; are type variables with n&amp;gt;0 and m&amp;gt;=0, meaning that the &lt;code&gt;y&lt;/code&gt; parameters are uniquely determined by the &lt;code&gt;x&lt;/code&gt; parameters. Spaces can be used as separators if more than one variable appears on any single side of a dependency, as in &lt;code&gt;t -&amp;gt; a b&lt;/code&gt;. Note that a class may be annotated with multiple dependencies using commas as separators, as in the definition of &lt;code&gt;E&lt;/code&gt; above. Some dependencies that we can write in this notation are redundant, and will be rejected because they don&amp;rsquo;t serve any useful purpose, and may instead indicate an error in the program. Examples of dependencies like this include &lt;code&gt;a -&amp;gt; a&lt;/code&gt;, &lt;code&gt;a -&amp;gt; a a&lt;/code&gt;, &lt;code&gt;a -&amp;gt;&lt;/code&gt;, etc. There can also be some redundancy if multiple dependencies are given, as in &lt;code&gt;a-&amp;gt;b&lt;/code&gt;, &lt;code&gt;b-&amp;gt;c&lt;/code&gt;, &lt;code&gt;a-&amp;gt;c&lt;/code&gt;, and in which some subset implies the remaining dependencies. Examples like this are not treated as errors. Note that dependencies appear only in class declarations, and not in any other part of the language. In particular, the syntax for instance declarations, class constraints, and types is completely unchanged.</source>
          <target state="translated">More generally, dependencies take the form &lt;code&gt;x1 ... xn -&amp;gt; y1 ... ym&lt;/code&gt; , where &lt;code&gt;x1&lt;/code&gt; , &amp;hellip;, &lt;code&gt;xn&lt;/code&gt; , and &lt;code&gt;y1&lt;/code&gt; , &amp;hellip;, &lt;code&gt;yn&lt;/code&gt; are type variables with n&amp;gt;0 and m&amp;gt;=0, meaning that the &lt;code&gt;y&lt;/code&gt; parameters are uniquely determined by the &lt;code&gt;x&lt;/code&gt; parameters. Spaces can be used as separators if more than one variable appears on any single side of a dependency, as in &lt;code&gt;t -&amp;gt; a b&lt;/code&gt; . Note that a class may be annotated with multiple dependencies using commas as separators, as in the definition of &lt;code&gt;E&lt;/code&gt; above. Some dependencies that we can write in this notation are redundant, and will be rejected because they don&amp;rsquo;t serve any useful purpose, and may instead indicate an error in the program. Examples of dependencies like this include &lt;code&gt;a -&amp;gt; a&lt;/code&gt; , &lt;code&gt;a -&amp;gt; a a&lt;/code&gt; , &lt;code&gt;a -&amp;gt;&lt;/code&gt; , etc. There can also be some redundancy if multiple dependencies are given, as in &lt;code&gt;a-&amp;gt;b&lt;/code&gt; , &lt;code&gt;b-&amp;gt;c&lt;/code&gt; , &lt;code&gt;a-&amp;gt;c&lt;/code&gt; , and in which some subset implies the remaining dependencies. Examples like this are not treated as errors. Note that dependencies appear only in class declarations, and not in any other part of the language. In particular, the syntax for instance declarations, class constraints, and types is completely unchanged.</target>
        </trans-unit>
        <trans-unit id="2ce620eb436f6437f620c767d1f4df6c98830db2" translate="yes" xml:space="preserve">
          <source>More generally, dependencies take the form &lt;code&gt;x1 ... xn -&amp;gt; y1 ... ym&lt;/code&gt;, where &lt;code&gt;x1&lt;/code&gt;, ..., &lt;code&gt;xn&lt;/code&gt;, and &lt;code&gt;y1&lt;/code&gt;, ..., &lt;code&gt;yn&lt;/code&gt; are type variables with n&amp;gt;0 and m&amp;gt;=0, meaning that the &lt;code&gt;y&lt;/code&gt; parameters are uniquely determined by the &lt;code&gt;x&lt;/code&gt; parameters. Spaces can be used as separators if more than one variable appears on any single side of a dependency, as in &lt;code&gt;t -&amp;gt; a b&lt;/code&gt;. Note that a class may be annotated with multiple dependencies using commas as separators, as in the definition of &lt;code&gt;E&lt;/code&gt; above. Some dependencies that we can write in this notation are redundant, and will be rejected because they don&amp;rsquo;t serve any useful purpose, and may instead indicate an error in the program. Examples of dependencies like this include &lt;code&gt;a -&amp;gt; a&lt;/code&gt;, &lt;code&gt;a -&amp;gt; a a&lt;/code&gt;, &lt;code&gt;a -&amp;gt;&lt;/code&gt;, etc. There can also be some redundancy if multiple dependencies are given, as in &lt;code&gt;a-&amp;gt;b&lt;/code&gt;, &lt;code&gt;b-&amp;gt;c&lt;/code&gt;, &lt;code&gt;a-&amp;gt;c&lt;/code&gt;, and in which some subset implies the remaining dependencies. Examples like this are not treated as errors. Note that dependencies appear only in class declarations, and not in any other part of the language. In particular, the syntax for instance declarations, class constraints, and types is completely unchanged.</source>
          <target state="translated">より一般的には、依存関係は &lt;code&gt;x1 ... xn -&amp;gt; y1 ... ym&lt;/code&gt; の形式をとります。ここで、 &lt;code&gt;x1&lt;/code&gt; 、...、 &lt;code&gt;xn&lt;/code&gt; 、および &lt;code&gt;y1&lt;/code&gt; 、...、 &lt;code&gt;yn&lt;/code&gt; はn&amp;gt; 0およびm&amp;gt; = 0の型変数です。つまり、 &lt;code&gt;y&lt;/code&gt; パラメータは &lt;code&gt;x&lt;/code&gt; パラメータによって一意に決定されます。 &lt;code&gt;t -&amp;gt; a b&lt;/code&gt; ように、依存関係の片側に複数の変数が出現する場合、スペースをセパレーターとして使用できます。 &lt;code&gt;E&lt;/code&gt; の定義のように、クラスには、区切り文字としてコンマを使用して複数の依存関係で注釈を付けることができます。上記。この表記法で記述できるいくつかの依存関係は冗長であり、有用な目的を果たさないために拒否され、代わりにプログラムのエラーを示す可能性があります。このような依存関係の例としては、 &lt;code&gt;a -&amp;gt; a&lt;/code&gt; 、 &lt;code&gt;a -&amp;gt; a a&lt;/code&gt; 、 &lt;code&gt;a -&amp;gt;&lt;/code&gt; などの複数の依存関係が与えられている場合、いくつかの冗長性が存在することができ、同様に &lt;code&gt;a-&amp;gt;b&lt;/code&gt; 、 &lt;code&gt;b-&amp;gt;c&lt;/code&gt; 、 &lt;code&gt;a-&amp;gt;c&lt;/code&gt; 、そして一部のサブセットは残りの依存関係を意味します。このような例はエラーとして扱われません。依存関係はクラス宣言にのみ現れ、言語の他の部分には現れないことに注意してください。特に、インスタンス宣言、クラス制約、および型の構文は完全に変更されていません。</target>
        </trans-unit>
        <trans-unit id="174c1aad58978f69590dd72b60851d08b234e600" translate="yes" xml:space="preserve">
          <source>More in-depth information can be found on the &lt;a href=&quot;https://ghc.haskell.org/trac/ghc/wiki/Roles&quot;&gt;Roles wiki page&lt;/a&gt;</source>
          <target state="translated">より詳細な情報は&lt;a href=&quot;https://ghc.haskell.org/trac/ghc/wiki/Roles&quot;&gt;Roles wikiページにあります&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e14ab6cf4fdb8d4413797b405b5b9102d3c1bc86" translate="yes" xml:space="preserve">
          <source>More information is given for explicit holes (i.e. ones that start with an underscore), than for out-of-scope variables, because the latter are often unintended typos, so the extra information is distracting. If you want the detailed information, use a leading underscore to make explicit your intent to use a hole.</source>
          <target state="translated">明示的な穴(アンダースコアで始まるもの)については、スコープ外の変数よりも多くの情報が与えられています。詳細な情報が必要な場合は、最初のアンダースコアを使用して、穴を使用する意図を明確にしてください。</target>
        </trans-unit>
        <trans-unit id="cdb9413519e4acd2573608f8f06f43a109139ea4" translate="yes" xml:space="preserve">
          <source>More precisely, the scoping rules are:</source>
          <target state="translated">より正確には、スコーピングルールです。</target>
        </trans-unit>
        <trans-unit id="1f08e1cae5fd42d45181559f708b9f948ac50f46" translate="yes" xml:space="preserve">
          <source>More precisely, the semantics of pattern matching is given in &lt;a href=&quot;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-580003.17&quot;&gt;Section 3.17 of the Haskell 2010 report&lt;/a&gt;. To the informal semantics in Section 3.17.2 we add this extra rule:</source>
          <target state="translated">より正確には、パターンマッチングのセマンティクス&lt;a href=&quot;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-580003.17&quot;&gt;は、Haskell 2010レポートのセクション3.17に記載されてい&lt;/a&gt;ます。セクション3.17.2の非公式なセマンティクスに、次の追加ルールを追加します。</target>
        </trans-unit>
        <trans-unit id="e4c589fb3b275a240038aa72aafa4cfbf0c4831b" translate="yes" xml:space="preserve">
          <source>More precisely, warn if a binding brings into scope a variable that is not used, except if the variable&amp;rsquo;s name starts with an underscore. The &amp;ldquo;starts-with-underscore&amp;rdquo; condition provides a way to selectively disable the warning.</source>
          <target state="translated">より正確には、変数の名前がアンダースコアで始まる場合を除いて、バインディングが使用されていない変数をスコープに入れる場合に警告します。「starts-with-underscore」条件は、警告を選択的に無効にする方法を提供します。</target>
        </trans-unit>
        <trans-unit id="4e142cf9dbc576682f7db5f9767bc39f19e16ad2" translate="yes" xml:space="preserve">
          <source>More sophisticated combinators for expressing parallelism are available from the &lt;code&gt;Control.Parallel.Strategies&lt;/code&gt; module in the &lt;a href=&quot;http://hackage.haskell.org/package/parallel&quot;&gt;parallel package&lt;/a&gt;. This module builds functionality around &lt;code&gt;par&lt;/code&gt;, expressing more elaborate patterns of parallel computation, such as parallel &lt;code&gt;map&lt;/code&gt;.</source>
          <target state="translated">並列処理を表現するためのより洗練されたコンビネータは、&lt;a href=&quot;http://hackage.haskell.org/package/parallel&quot;&gt;並列パッケージの&lt;/a&gt; &lt;code&gt;Control.Parallel.Strategies&lt;/code&gt; モジュールから利用できます。このモジュールは、 &lt;code&gt;par&lt;/code&gt; を中心に機能を構築し、並列 &lt;code&gt;map&lt;/code&gt; などの並列計算のより精巧なパターンを表現します。</target>
        </trans-unit>
        <trans-unit id="7efbe8954f7d8bb33318735e14097d00de7a9a64" translate="yes" xml:space="preserve">
          <source>More specifically these byte strings are taken to be in the subset of Unicode covered by code points 0-255. This covers Unicode Basic Latin, Latin-1 Supplement and C0+C1 Controls.</source>
          <target state="translated">よ り 具体的には、 こ れ ら のバ イ ト 文字列は、 コ ー ド ポ イ ン ト 0 ~ 255 でカバー さ れてい る Unicode のサブセ ッ ト 内にあ る と 見な さ れます。これは Unicode Basic Latin、Latin-1 Supplement、C0+C1 Controls をカバーしています。</target>
        </trans-unit>
        <trans-unit id="86749f35327922682f80058567d622a5b5a74e48" translate="yes" xml:space="preserve">
          <source>More specifically, consider the following modules:</source>
          <target state="translated">具体的には、以下のモジュールを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="49ae26a58091afd7797c7d608cef98d9b3bd88ed" translate="yes" xml:space="preserve">
          <source>More substantially, an anonymous records library could provide &lt;code&gt;HasField&lt;/code&gt; instances for its anonymous records, and thus be compatible with the polymorphic record selectors introduced by this proposal. For example, something like this makes it possible to use &lt;code&gt;getField&lt;/code&gt; to access &lt;code&gt;Record&lt;/code&gt; values with the appropriate string in the type-level list of fields:</source>
          <target state="translated">より実質的には、匿名レコードライブラリは、匿名レコードの &lt;code&gt;HasField&lt;/code&gt; インスタンスを提供できるため、この提案で導入された多態性レコードセレクターと互換性があります。たとえば、次のようなものにより、 &lt;code&gt;getField&lt;/code&gt; を使用して、タイプレベルのフィールドリスト内の適切な文字列で &lt;code&gt;Record&lt;/code&gt; 値にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="48fbf1fc9f3d27864af0185af07555a2ed71738b" translate="yes" xml:space="preserve">
          <source>Moreover genuninely-recursive superclasses are sometimes useful. Here&amp;rsquo;s a real-life example (#10318)</source>
          <target state="translated">Moreover genuninely-recursive superclasses are sometimes useful. Here&amp;rsquo;s a real-life example (#10318)</target>
        </trans-unit>
        <trans-unit id="aee6d8add66d57251c294e797e38ba98f856c59e" translate="yes" xml:space="preserve">
          <source>Moreover genuninely-recursive superclasses are sometimes useful. Here&amp;rsquo;s a real-life example (Trac #10318)</source>
          <target state="translated">さらに、正規再帰的なスーパークラスが役立つこともあります。これが実際の例です（Trac＃10318）</target>
        </trans-unit>
        <trans-unit id="2b9d1405f104daf49ed40d4d63a24458c96232a6" translate="yes" xml:space="preserve">
          <source>Moreover you often don&amp;rsquo;t even need the &lt;a href=&quot;#pragma-SPECIALIZE&quot;&gt;&lt;code&gt;SPECIALIZE&lt;/code&gt;&lt;/a&gt; pragma in the first place. When compiling a module &lt;code&gt;M&lt;/code&gt;, GHC&amp;rsquo;s optimiser (when given the &lt;a href=&quot;using-optimisation#ghc-flag--O&quot;&gt;&lt;code&gt;-O&lt;/code&gt;&lt;/a&gt; flag) automatically considers each top-level overloaded function declared in &lt;code&gt;M&lt;/code&gt;, and specialises it for the different types at which it is called in &lt;code&gt;M&lt;/code&gt;. The optimiser &lt;em&gt;also&lt;/em&gt; considers each &lt;em&gt;imported&lt;/em&gt;&lt;a href=&quot;#pragma-INLINABLE&quot;&gt;&lt;code&gt;INLINABLE&lt;/code&gt;&lt;/a&gt; overloaded function, and specialises it for the different types at which it is called in &lt;code&gt;M&lt;/code&gt;. So in our example, it would be enough for &lt;code&gt;lookup&lt;/code&gt; to be called at type &lt;code&gt;T&lt;/code&gt;:</source>
          <target state="translated">さらに、そもそも&lt;a href=&quot;#pragma-SPECIALIZE&quot;&gt; &lt;code&gt;SPECIALIZE&lt;/code&gt; &lt;/a&gt;プラグマさえ必要としないことがよくあります。モジュールのコンパイル時に &lt;code&gt;M&lt;/code&gt; を、（所与GHCのオプティマイザ&lt;a href=&quot;using-optimisation#ghc-flag--O&quot;&gt; &lt;code&gt;-O&lt;/code&gt; の&lt;/a&gt;フラグ）が自動的に宣言された各トップレベルの多重定義関数考慮 &lt;code&gt;M&lt;/code&gt; を、それが中に呼び出された時に、異なるタイプのためにそれを専門 &lt;code&gt;M&lt;/code&gt; 。オプティマイザは&lt;em&gt;また、&lt;/em&gt;各考慮&lt;em&gt;インポート&lt;/em&gt;&lt;a href=&quot;#pragma-INLINABLE&quot;&gt; &lt;code&gt;INLINABLE&lt;/code&gt; &lt;/a&gt;オーバーロードされた関数を、それが中に呼び出された時に、異なるタイプのためにそれを専門 &lt;code&gt;M&lt;/code&gt; 。したがって、この例では、タイプ &lt;code&gt;T&lt;/code&gt; で &lt;code&gt;lookup&lt;/code&gt; を呼び出すだけで十分です。</target>
        </trans-unit>
        <trans-unit id="1b09c524376f62eb132cfc4d87068c7c414ce987" translate="yes" xml:space="preserve">
          <source>Moreover, GHC will only inline the function if it is &lt;em&gt;fully applied&lt;/em&gt;, where &amp;ldquo;fully applied&amp;rdquo; means applied to as many arguments as appear (syntactically) on the LHS of the function definition. For example:</source>
          <target state="translated">さらに、GHCは関数が&lt;em&gt;完全に適用された&lt;/em&gt;場合にのみ関数をインライン化します。「完全に適用された」とは、関数定義のLHSに現れる（構文的に）できるだけ多くの引数に適用されることを意味します。例えば：</target>
        </trans-unit>
        <trans-unit id="6284ba052c710bcfe1b333b0499c004a62fd7cbd" translate="yes" xml:space="preserve">
          <source>Moreover, a local fixity declaration &lt;em&gt;must&lt;/em&gt; accompany a local binding of that name: it is not possible to revise the fixity of name bound elsewhere, as in</source>
          <target state="translated">さらに、ローカルの固定性宣言はその名前のローカルバインディングを伴う&lt;em&gt;必要があり&lt;/em&gt;ます。次のように、他の場所にバインドされた名前の固定性を変更することはできません。</target>
        </trans-unit>
        <trans-unit id="435226f4fb8d01545e71ad9e8e0b16ea37149391" translate="yes" xml:space="preserve">
          <source>Moreover, every module that imports &lt;code&gt;Client&lt;/code&gt; (or imports a module that imports &lt;code&gt;Client&lt;/code&gt;, transitively) will &amp;ldquo;see&amp;rdquo;, and make use of, the specialised version of &lt;code&gt;lookup&lt;/code&gt;. You don&amp;rsquo;t need to put a &lt;a href=&quot;#pragma-SPECIALIZE&quot;&gt;&lt;code&gt;SPECIALIZE&lt;/code&gt;&lt;/a&gt; pragma in every module.</source>
          <target state="translated">また、すべてのモジュールをインポートしている &lt;code&gt;Client&lt;/code&gt; （輸入というか、輸入モジュール &lt;code&gt;Client&lt;/code&gt; 「を参照してください」、との使用を作り、専用バージョンのでしょう推移は、） &lt;code&gt;lookup&lt;/code&gt; 。すべてのモジュールに&lt;a href=&quot;#pragma-SPECIALIZE&quot;&gt; &lt;code&gt;SPECIALIZE&lt;/code&gt; &lt;/a&gt;プラグマを置く必要はありません。</target>
        </trans-unit>
        <trans-unit id="641bceca79503a5b46c154c94304a197aa140c0b" translate="yes" xml:space="preserve">
          <source>Moreover, in &lt;code&gt;Applicative&lt;/code&gt; instance declarations:</source>
          <target state="translated">さらに、 &lt;code&gt;Applicative&lt;/code&gt; インスタンス宣言では：</target>
        </trans-unit>
        <trans-unit id="97508f66cdde54922c388601bbdb4ef006e66daf" translate="yes" xml:space="preserve">
          <source>Moreover, in &lt;code&gt;MonadFail&lt;/code&gt; instance declarations:</source>
          <target state="translated">さらに、 &lt;code&gt;MonadFail&lt;/code&gt; インスタンス宣言では：</target>
        </trans-unit>
        <trans-unit id="667b008ae7d33f2434031b95fad3289972f0f759" translate="yes" xml:space="preserve">
          <source>Moreover, in &lt;code&gt;Semigroup&lt;/code&gt; instance declarations:</source>
          <target state="translated">さらに、 &lt;code&gt;Semigroup&lt;/code&gt; インスタンス宣言では：</target>
        </trans-unit>
        <trans-unit id="9b463d35e3037a7b25fba6436d573b43c738063f" translate="yes" xml:space="preserve">
          <source>Moreover, we can ask &lt;code&gt;gdb&lt;/code&gt; to tell us the flow of execution that lead us to this point in the program,</source>
          <target state="translated">さらに、プログラムのこの時点に至るまでの実行フローを &lt;code&gt;gdb&lt;/code&gt; に要求することができます。</target>
        </trans-unit>
        <trans-unit id="8feac72447d42dc6b03b07306f6ad6196a53f4dd" translate="yes" xml:space="preserve">
          <source>Most GHC users will not need to worry about levity polymorphism or unboxed types. For these users, seeing the levity polymorphism in the type of &lt;code&gt;$&lt;/code&gt; is unhelpful. And thus, by default, it is suppressed, by supposing all type variables of type &lt;code&gt;RuntimeRep&lt;/code&gt; to be &lt;code&gt;'LiftedRep&lt;/code&gt; when printing, and printing &lt;code&gt;TYPE 'LiftedRep&lt;/code&gt; as &lt;code&gt;Type&lt;/code&gt; (or &lt;code&gt;*&lt;/code&gt; when &lt;a href=&quot;#extension-StarIsType&quot;&gt;&lt;code&gt;StarIsType&lt;/code&gt;&lt;/a&gt; is on).</source>
          <target state="translated">ほとんどのGHCユーザーは、レビティポリモーフィズムやボックス化されていない型について心配する必要はありません。これらのユーザーにとって、 &lt;code&gt;$&lt;/code&gt; のタイプで軽度のポリモーフィズムを見ることは役に立ちません。したがって、デフォルトでは、タイプ &lt;code&gt;RuntimeRep&lt;/code&gt; のすべてのタイプ変数が印刷時に &lt;code&gt;'LiftedRep&lt;/code&gt; であり、 &lt;code&gt;TYPE 'LiftedRep&lt;/code&gt; を &lt;code&gt;Type&lt;/code&gt; として印刷する（または &lt;code&gt;*&lt;/code&gt; &lt;a href=&quot;#extension-StarIsType&quot;&gt; &lt;code&gt;StarIsType&lt;/code&gt; &lt;/a&gt;がオンの場合）と仮定することにより、抑制されます。</target>
        </trans-unit>
        <trans-unit id="a9bfd07736bd17bc98ea30aef5ff00a2993638a7" translate="yes" xml:space="preserve">
          <source>Most handles will also have a current I/O position indicating where the next input or output operation will occur. A handle is &lt;em&gt;readable&lt;/em&gt; if it manages only input or both input and output; likewise, it is &lt;em&gt;writable&lt;/em&gt; if it manages only output or both input and output. A handle is &lt;em&gt;open&lt;/em&gt; when first allocated. Once it is closed it can no longer be used for either input or output, though an implementation cannot re-use its storage while references remain to it. Handles are in the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; classes. The string produced by showing a handle is system dependent; it should include enough information to identify the handle for debugging. A handle is equal according to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; only to itself; no attempt is made to compare the internal state of different handles for equality.</source>
          <target state="translated">ほとんどのハンドルには、次の入力または出力操作が発生する場所を示す現在のI / O位置もあります。ハンドルは、入力のみ、または入力と出力の両方を管理する場合は&lt;em&gt;読み取り可能&lt;/em&gt;です。同様に、出力のみ、または入力と出力の両方を管理する場合は、&lt;em&gt;書き込み可能です&lt;/em&gt;。ハンドルは、最初に割り当てられたときに&lt;em&gt;開いてい&lt;/em&gt;ます。いったん閉じると、入力または出力のどちらにも使用できなくなりますが、参照はそのままで、実装はストレージを再利用できません。ハンドルは &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; クラスと &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; クラスにあります。ハンドルを表示することによって生成される文字列はシステムに依存します。デバッグ用のハンドルを識別するのに十分な情報が含まれている必要があります。ハンドルは次のように等しい &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; 自分自身にのみ;異なるハンドルの内部状態が等しいかどうかを比較する試みは行われません。</target>
        </trans-unit>
        <trans-unit id="56a261d402c64f03bfdfa4dbbe6dc5df89e9511b" translate="yes" xml:space="preserve">
          <source>Most handles will also have a current I/O position indicating where the next input or output operation will occur. A handle is &lt;em&gt;readable&lt;/em&gt; if it manages only input or both input and output; likewise, it is &lt;em&gt;writable&lt;/em&gt; if it manages only output or both input and output. A handle is &lt;em&gt;open&lt;/em&gt; when first allocated. Once it is closed it can no longer be used for either input or output, though an implementation cannot re-use its storage while references remain to it. Handles are in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; classes. The string produced by showing a handle is system dependent; it should include enough information to identify the handle for debugging. A handle is equal according to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; only to itself; no attempt is made to compare the internal state of different handles for equality.</source>
          <target state="translated">Most handles will also have a current I/O position indicating where the next input or output operation will occur. A handle is &lt;em&gt;readable&lt;/em&gt; if it manages only input or both input and output; likewise, it is &lt;em&gt;writable&lt;/em&gt; if it manages only output or both input and output. A handle is &lt;em&gt;open&lt;/em&gt; when first allocated. Once it is closed it can no longer be used for either input or output, though an implementation cannot re-use its storage while references remain to it. Handles are in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; classes. The string produced by showing a handle is system dependent; it should include enough information to identify the handle for debugging. A handle is equal according to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; only to itself; no attempt is made to compare the internal state of different handles for equality.</target>
        </trans-unit>
        <trans-unit id="d2995cc8024bf7aa8ba13dcae171563836b90420" translate="yes" xml:space="preserve">
          <source>Most handles will also have a current I/O position indicating where the next input or output operation will occur. A handle is &lt;em&gt;readable&lt;/em&gt; if it manages only input or both input and output; likewise, it is &lt;em&gt;writable&lt;/em&gt; if it manages only output or both input and output. A handle is &lt;em&gt;open&lt;/em&gt; when first allocated. Once it is closed it can no longer be used for either input or output, though an implementation cannot re-use its storage while references remain to it. Handles are in the &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; classes. The string produced by showing a handle is system dependent; it should include enough information to identify the handle for debugging. A handle is equal according to &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; only to itself; no attempt is made to compare the internal state of different handles for equality.</source>
          <target state="translated">ほとんどのハンドルには、次の入力または出力操作が発生する場所を示す現在のI / O位置もあります。ハンドルは、入力のみ、または入力と出力の両方を管理する場合は&lt;em&gt;読み取り可能&lt;/em&gt;です。同様に、出力のみ、または入力と出力の両方を管理する場合は、&lt;em&gt;書き込み可能です&lt;/em&gt;。ハンドルは、最初に割り当てられたときに&lt;em&gt;開いてい&lt;/em&gt;ます。いったん閉じると、入力または出力のどちらにも使用できなくなりますが、参照はそのままで、実装はストレージを再利用できません。ハンドルは &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; クラスと &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; クラスにあります。ハンドルを表示することによって生成される文字列はシステムに依存します。デバッグ用のハンドルを識別するのに十分な情報が含まれている必要があります。ハンドルは &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; に従って等しい自分自身にのみ;異なるハンドルの内部状態が等しいかどうかを比較する試みは行われません。</target>
        </trans-unit>
        <trans-unit id="9be69b82ce264090f2137a15a7648633cb206f8e" translate="yes" xml:space="preserve">
          <source>Most monad transformer modules include the special case of applying the transformer to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor-identity#v:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt;. For example, &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:State&quot;&gt;State&lt;/a&gt; s&lt;/code&gt; is an abbreviation for &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:StateT&quot;&gt;StateT&lt;/a&gt; s &lt;a href=&quot;../base-4.13.0.0/data-functor-identity#v:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどのモナド変換モジュールには、変換を &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor-identity#v:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt; に適用する特別なケースが含まれています。たとえば、 &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:State&quot;&gt;State&lt;/a&gt; s&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:StateT&quot;&gt;StateT&lt;/a&gt; s &lt;a href=&quot;../base-4.13.0.0/data-functor-identity#v:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt; の省略形です。</target>
        </trans-unit>
        <trans-unit id="f0c60abd2cf0ff60dc7be795cfcb03f696cc8115" translate="yes" xml:space="preserve">
          <source>Most monad transformer modules include the special case of applying the transformer to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor-identity#v:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt;. For example, &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:State&quot;&gt;State&lt;/a&gt; s&lt;/code&gt; is an abbreviation for &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:StateT&quot;&gt;StateT&lt;/a&gt; s &lt;a href=&quot;../base-4.14.1.0/data-functor-identity#v:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Most monad transformer modules include the special case of applying the transformer to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor-identity#v:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt; . For example, &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:State&quot;&gt;State&lt;/a&gt; s&lt;/code&gt; is an abbreviation for &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:StateT&quot;&gt;StateT&lt;/a&gt; s &lt;a href=&quot;../base-4.14.1.0/data-functor-identity#v:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1446d57bbc11269458b5fff18c4a2fbea47e1423" translate="yes" xml:space="preserve">
          <source>Most of the command-line options accepted by GHC (see &lt;a href=&quot;using#using-ghc&quot;&gt;Using GHC&lt;/a&gt;) also make sense in interactive mode. The ones that don&amp;rsquo;t make sense are mostly obvious.</source>
          <target state="translated">GHC（&lt;a href=&quot;using#using-ghc&quot;&gt;GHCの使用を&lt;/a&gt;参照）で受け入れられるコマンドラインオプションのほとんどは、インタラクティブモードでも有効です。意味をなさないものはほとんど明らかです。</target>
        </trans-unit>
        <trans-unit id="d49b83194eaa0ec88c028d8df0d8eb5797ada48a" translate="yes" xml:space="preserve">
          <source>Most of the conventions GHC expects when using packages are described in &lt;a href=&quot;packages#building-packages&quot;&gt;Building a package from Haskell source&lt;/a&gt;. In addition note that GHC expects the &lt;code&gt;.hi&lt;/code&gt; files to use the extension &lt;code&gt;.dyn_hi&lt;/code&gt;. The other requirements are the same as for C libraries and are described below, in particular the use of the flags &lt;a href=&quot;phases#ghc-flag--dynamic&quot;&gt;&lt;code&gt;-dynamic&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;phases#ghc-flag--fPIC&quot;&gt;&lt;code&gt;-fPIC&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;phases#ghc-flag--shared&quot;&gt;&lt;code&gt;-shared&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パッケージの使用時にGHCが期待するほとんどの規則は、&lt;a href=&quot;packages#building-packages&quot;&gt;Haskellソースからのパッケージのビルドで&lt;/a&gt;説明されています。さらに、GHCは &lt;code&gt;.hi&lt;/code&gt; ファイルが拡張子 &lt;code&gt;.dyn_hi&lt;/code&gt; を使用することを期待していることに注意してください。その他の要件はCライブラリの場合と同じであり、以下で説明します。特に、フラグ&lt;a href=&quot;phases#ghc-flag--dynamic&quot;&gt; &lt;code&gt;-dynamic&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;phases#ghc-flag--fPIC&quot;&gt; &lt;code&gt;-fPIC&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;phases#ghc-flag--shared&quot;&gt; &lt;code&gt;-shared&lt;/code&gt; の&lt;/a&gt;使用について説明します。</target>
        </trans-unit>
        <trans-unit id="c17ee9cdb3b8c7cbc538d3e35bb5401d0f3d8af1" translate="yes" xml:space="preserve">
          <source>Most of the functions in this module are subject to &lt;em&gt;fusion&lt;/em&gt;, meaning that a pipeline of such functions will usually allocate at most one &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="translated">このモジュールの関数のほとんどはの対象と&lt;em&gt;融合&lt;/em&gt;、このような機能のパイプラインは通常、ほとんど1つのに割り当てることを意味、 &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="cff6fb1dc40bd9bd236bb1c241939a66f53cfba3" translate="yes" xml:space="preserve">
          <source>Most of the functions in this module are subject to &lt;em&gt;fusion&lt;/em&gt;, meaning that a pipeline of such functions will usually allocate at most one &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="translated">このモジュールの関数のほとんどはの対象と&lt;em&gt;融合&lt;/em&gt;、このような機能のパイプラインは通常、ほとんど1つのに割り当てることを意味、 &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="3b644a39e26dfc78bdc3acb69da17cabd5dd58c1" translate="yes" xml:space="preserve">
          <source>Most of the performance gain stems from using &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:primMapListBounded&quot;&gt;primMapListBounded&lt;/a&gt;&lt;/code&gt;, which encodes a list of values from left-to-right with a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;. It exploits the &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; internals to avoid unnecessary function compositions (i.e., concatenations). In the future, we might expect the compiler to perform the optimizations implemented in &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:primMapListBounded&quot;&gt;primMapListBounded&lt;/a&gt;&lt;/code&gt;. However, it seems that the code is currently to complicated for the compiler to see through. Therefore, we provide the &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; escape hatch, which allows data structures to provide very efficient encoding traversals, like &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:primMapListBounded&quot;&gt;primMapListBounded&lt;/a&gt;&lt;/code&gt; for lists.</source>
          <target state="translated">パフォーマンスの向上のほとんどは、値のリストを &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:primMapListBounded&quot;&gt;primMapListBounded&lt;/a&gt;&lt;/code&gt; で左から右にエンコードするprimMapListBoundedを使用することから &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; ます。 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 内部構造を利用して、不要な関数構成（つまり、連結）を回避します。将来的には、コンパイラーが &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:primMapListBounded&quot;&gt;primMapListBounded&lt;/a&gt;&lt;/code&gt; に実装された最適化を実行することを期待するかもしれません。ただし、コンパイラが完全に見通せるように、コードは現在複雑すぎるようです。したがって、 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; エスケープハッチを提供します。これにより、リストの &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:primMapListBounded&quot;&gt;primMapListBounded&lt;/a&gt;&lt;/code&gt; のように、データ構造で非常に効率的なエンコーディングトラバーサルを提供できます。</target>
        </trans-unit>
        <trans-unit id="93a85b72f189888c0727de2215a65f643a090a37" translate="yes" xml:space="preserve">
          <source>Most of these options are boolean and have options to turn them both &amp;ldquo;on&amp;rdquo; and &amp;ldquo;off&amp;rdquo; (beginning with the prefix &lt;code&gt;no-&lt;/code&gt;). For instance, while &lt;code&gt;-fspecialise&lt;/code&gt; enables specialisation, &lt;code&gt;-fno-specialise&lt;/code&gt; disables it. When multiple flags for the same option appear in the command-line they are evaluated from left to right. For instance, &lt;code&gt;-fno-specialise -fspecialise&lt;/code&gt; will enable specialisation.</source>
          <target state="translated">これらのオプションのほとんどはブール値であり、「オン」と「オフ」の両方をオンにするオプションがあります（先頭は &lt;code&gt;no-&lt;/code&gt; で始まります）。たとえば、 &lt;code&gt;-fspecialise&lt;/code&gt; は特殊化を有効にしますが、 &lt;code&gt;-fno-specialise&lt;/code&gt; はそれを無効にします。同じオプションの複数のフラグがコマンドラインに表示される場合、それらは左から右に評価されます。たとえば、 &lt;code&gt;-fno-specialise -fspecialise&lt;/code&gt; は特殊化を有効にします。</target>
        </trans-unit>
        <trans-unit id="b4872c5b9a708f91ab972a558b461f19d44ba677" translate="yes" xml:space="preserve">
          <source>Most packages (see &lt;a href=&quot;packages#using-packages&quot;&gt;Using Packages&lt;/a&gt;) are available without needing to specify any extra flags at all: they will be automatically loaded the first time they are needed.</source>
          <target state="translated">ほとんどのパッケージ（「&lt;a href=&quot;packages#using-packages&quot;&gt;パッケージの使用&lt;/a&gt;」を参照）は、追加のフラグをまったく指定する必要なく使用できます。それらは、最初に必要になったときに自動的にロードされます。</target>
        </trans-unit>
        <trans-unit id="f17588b3f000b1c04f72f8264ac2012d913333ca" translate="yes" xml:space="preserve">
          <source>Most profiling runtime options are only available when you compile your program for profiling (see &lt;a href=&quot;profiling#prof-compiler-options&quot;&gt;Compiler options for profiling&lt;/a&gt;, and &lt;a href=&quot;profiling#rts-options-heap-prof&quot;&gt;RTS options for heap profiling&lt;/a&gt; for the runtime options). However, there is one profiling option that is available for ordinary non-profiled executables:</source>
          <target state="translated">ほとんどのプロファイリングランタイムオプションは、プロファイリング用にプログラムをコンパイルする場合にのみ使用できます（プロファイリング用の&lt;a href=&quot;profiling#prof-compiler-options&quot;&gt;コンパイラオプション&lt;/a&gt;およびランタイムオプション&lt;a href=&quot;profiling#rts-options-heap-prof&quot;&gt;用のヒーププロファイリング&lt;/a&gt;用のRTSオプションを参照）。ただし、通常のプロファイルされていない実行可能ファイルで使用できるプロファイリングオプションが1つあります。</target>
        </trans-unit>
        <trans-unit id="7dd31ae39f49dd0f0c21b3aa4545a982531a6c6b" translate="yes" xml:space="preserve">
          <source>Most programs should not worry about the canonicity of a path. In particular, despite the name, the function does not truly guarantee canonicity of the returned path due to the presence of hard links, mount points, etc.</source>
          <target state="translated">ほとんどのプログラムでは、パスのカノニシティを気にする必要はありません。特に、この関数は名前にもかかわらず、ハードリンクやマウントポイントなどが存在するため、返されるパスの正統性を真に保証するものではありません。</target>
        </trans-unit>
        <trans-unit id="f735bd28bb08e83da41ac3d34e730c92c26193d9" translate="yes" xml:space="preserve">
          <source>Most specific instance, &lt;code&gt;Ix&lt;/code&gt;, defined in an &lt;code&gt;-XSafe&lt;/code&gt; compiled module.</source>
          <target state="translated">&lt;code&gt;-XSafe&lt;/code&gt; コンパイル済みモジュールで定義されている最も具体的なインスタンス、 &lt;code&gt;Ix&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="16ea8e72c52685784f78037d3d05d2240b22d1c7" translate="yes" xml:space="preserve">
          <source>Most types in GHC are boxed, which means that values of that type are represented by a pointer to a heap object. The representation of a Haskell &lt;code&gt;Int&lt;/code&gt;, for example, is a two-word heap object. An unboxed type, however, is represented by the value itself, no pointers or heap allocation are involved.</source>
          <target state="translated">GHCのほとんどの型はボックス化されています。つまり、その型の値はヒープオブジェクトへのポインターによって表されます。たとえば、Haskell &lt;code&gt;Int&lt;/code&gt; の表現は、2ワードのヒープオブジェクトです。ただし、ボックス化されていないタイプは値自体によって表され、ポインターやヒープの割り当ては関係しません。</target>
        </trans-unit>
        <trans-unit id="26a91b89d1f0afee1a3b838d3e07c9dda8c7019a" translate="yes" xml:space="preserve">
          <source>Most users don&amp;rsquo;t need to worry about the details described in this section. This discussion is primarily targeted at tooling authors who need to interpret the GHC-specific DWARF annotations contained in compiled binaries.</source>
          <target state="translated">ほとんどのユーザーは、このセクションで説明されている詳細について心配する必要はありません。この議論は主に、コンパイルされたバイナリに含まれるGHC固有のDWARFアノテーションを解釈する必要があるツール作成者を対象としています。</target>
        </trans-unit>
        <trans-unit id="50978952002c3f3475a398ad4c47f7515dcb5f8c" translate="yes" xml:space="preserve">
          <source>Move forward ⟨n⟩ steps in the history. ⟨n⟩ is one if omitted. See &lt;a href=&quot;#tracing&quot;&gt;Tracing and history&lt;/a&gt; for more about GHCi&amp;rsquo;s debugging facilities. See also: &lt;a href=&quot;#ghci-cmd-:trace&quot;&gt;&lt;code&gt;:trace&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:history&quot;&gt;&lt;code&gt;:history&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:back&quot;&gt;&lt;code&gt;:back&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">履歴の「n」ステップ先に進みます。省略した場合、「n」は1です。GHCiのデバッグ機能の詳細については、&lt;a href=&quot;#tracing&quot;&gt;トレースと履歴&lt;/a&gt;を参照してください。&lt;a href=&quot;#ghci-cmd-:trace&quot;&gt; &lt;code&gt;:trace&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ghci-cmd-:history&quot;&gt; &lt;code&gt;:history&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ghci-cmd-:back&quot;&gt; &lt;code&gt;:back&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="0ba04ac0c40eac8685578c04462bb11965eb4878" translate="yes" xml:space="preserve">
          <source>Move the last two elements from the end of the first list onto the beginning of the second one.</source>
          <target state="translated">最初のリストの最後の2つの要素を2番目のリストの最初に移動します。</target>
        </trans-unit>
        <trans-unit id="2bb8ee2f3add85c2116c7a3a51024dad403c385b" translate="yes" xml:space="preserve">
          <source>MoveFileFlag</source>
          <target state="translated">MoveFileFlag</target>
        </trans-unit>
        <trans-unit id="5a8dfd20d44353d4ab01bf308e18462987143fb9" translate="yes" xml:space="preserve">
          <source>Moved to their own module to not bloat GHC.Float further.</source>
          <target state="translated">さらにGHC.Floatを肥大化させないために、独自のモジュールに移動しました。</target>
        </trans-unit>
        <trans-unit id="14766b11b99f48495ad4c21d250367a73f20edac" translate="yes" xml:space="preserve">
          <source>Msg</source>
          <target state="translated">Msg</target>
        </trans-unit>
        <trans-unit id="d136009ea859ae789c419997ed8d15cac71cf2c5" translate="yes" xml:space="preserve">
          <source>Much like lists can be constructed and matched using the &lt;code&gt;:&lt;/code&gt; and &lt;code&gt;[]&lt;/code&gt; constructors, sequences can be constructed and matched using the &lt;code&gt;&lt;a href=&quot;data-sequence#v:Empty&quot;&gt;Empty&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v::-60--124-&quot;&gt;:&amp;lt;|&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;data-sequence#v::-124--62-&quot;&gt;:|&amp;gt;&lt;/a&gt;&lt;/code&gt; pattern synonyms.</source>
          <target state="translated">&lt;code&gt;:&lt;/code&gt; および &lt;code&gt;[]&lt;/code&gt; コンストラクタを使用してリストを作成および照合できるように、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:Empty&quot;&gt;Empty&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-sequence#v::-60--124-&quot;&gt;:&amp;lt;|&lt;/a&gt;&lt;/code&gt; を使用してシーケンスを作成および照合できます。、および &lt;code&gt;&lt;a href=&quot;data-sequence#v::-124--62-&quot;&gt;:|&amp;gt;&lt;/a&gt;&lt;/code&gt; パターンの同義語。</target>
        </trans-unit>
        <trans-unit id="3985ab0ae942e14710d14c6d2571f7087252a32c" translate="yes" xml:space="preserve">
          <source>Much of &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt;s interface can be implemented with &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:alter&quot;&gt;alter&lt;/a&gt;&lt;/code&gt;. Some of the rest can be implemented with a new &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; function and either &lt;code&gt;&lt;a href=&quot;data-monoid#t:First&quot;&gt;First&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-monoid#t:Last&quot;&gt;Last&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; のインタフェースの多くは、 &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:alter&quot;&gt;alter&lt;/a&gt;&lt;/code&gt; を使用して実装できます。残りの一部は、新しい &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; 関数と &lt;code&gt;&lt;a href=&quot;data-monoid#t:First&quot;&gt;First&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-monoid#t:Last&quot;&gt;Last&lt;/a&gt;&lt;/code&gt; のいずれかで実装できます。</target>
        </trans-unit>
        <trans-unit id="5cc6d803a39452a5550042d0878f9a4d2b3338ea" translate="yes" xml:space="preserve">
          <source>Multi-parameter type classes are permitted, with extension &lt;a href=&quot;#extension-MultiParamTypeClasses&quot;&gt;&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">&lt;a href=&quot;#extension-MultiParamTypeClasses&quot;&gt; &lt;code&gt;MultiParamTypeClasses&lt;/code&gt; という&lt;/a&gt;拡張子を持つ、マルチパラメータータイプのクラスが許可されます。例えば：</target>
        </trans-unit>
        <trans-unit id="791ab6cd505e26e3db8530867157bb7dff3226cc" translate="yes" xml:space="preserve">
          <source>Multi-signal a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#t:TSem&quot;&gt;TSem&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#t:TSem&quot;&gt;TSem&lt;/a&gt;&lt;/code&gt; のマルチシグナル</target>
        </trans-unit>
        <trans-unit id="cb0ebb79c7eefbdf0b5b3cf945169c1e60647b5a" translate="yes" xml:space="preserve">
          <source>Multi-way Trees and Forests</source>
          <target state="translated">多方向の樹木と森林</target>
        </trans-unit>
        <trans-unit id="639132eb39afa461a8de30e021cb71678c2bd9f6" translate="yes" xml:space="preserve">
          <source>Multi-way if expressions introduce a new layout context. So the example above is equivalent to:</source>
          <target state="translated">多元的な if 式は新しいレイアウトコンテキストを導入します。つまり、上の例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="9be2f47cbdcfe4a4ba58091a84da2eccde0463fc" translate="yes" xml:space="preserve">
          <source>MultiParamTypeClasses</source>
          <target state="translated">MultiParamTypeClasses</target>
        </trans-unit>
        <trans-unit id="16bfc155ed662e5fdfa3b7a44cb917e2896838df" translate="yes" xml:space="preserve">
          <source>MultiShot</source>
          <target state="translated">MultiShot</target>
        </trans-unit>
        <trans-unit id="7081cd2ce6a6f92ebb8e5d3af341d3d4335873da" translate="yes" xml:space="preserve">
          <source>MultiWayIf</source>
          <target state="translated">MultiWayIf</target>
        </trans-unit>
        <trans-unit id="0393d78dbbfc9e70fdf48e5344e361858dbe507c" translate="yes" xml:space="preserve">
          <source>Multiline mode is useful when entering monadic &lt;code&gt;do&lt;/code&gt; statements:</source>
          <target state="translated">複数行モードは、モナドの &lt;code&gt;do&lt;/code&gt; ステートメントを入力するときに便利です。</target>
        </trans-unit>
        <trans-unit id="2e295ccb8d7c53c8f3ea7ba9cfb2f93b20c6dd1d" translate="yes" xml:space="preserve">
          <source>Multiplication of type-level naturals.</source>
          <target state="translated">型レベルの自然数の乗算。</target>
        </trans-unit>
        <trans-unit id="abaf136782049164460366f9afe2dee04f6b2e91" translate="yes" xml:space="preserve">
          <source>Multiply two &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;s</source>
          <target state="translated">乗算2 &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; の</target>
        </trans-unit>
        <trans-unit id="909b32ffe66a26d38ff55c0ae1de2d5a81a56aaf" translate="yes" xml:space="preserve">
          <source>Multiply two vectors element-wise.</source>
          <target state="translated">2つのベクトルを要素ごとに乗算します。</target>
        </trans-unit>
        <trans-unit id="05a69b1ec67732f09635ef86734c3b1a99517a9c" translate="yes" xml:space="preserve">
          <source>Multiply-defined array elements not checked</source>
          <target state="translated">多重定義された配列要素をチェックしない</target>
        </trans-unit>
        <trans-unit id="5848ccab6e8123c4df2d4c1561fe81cd64b56b8f" translate="yes" xml:space="preserve">
          <source>MutVar#</source>
          <target state="translated">MutVar#</target>
        </trans-unit>
        <trans-unit id="52b9d6898e795eda124f4c552cab7ce01664480c" translate="yes" xml:space="preserve">
          <source>Mutable array type, for use in the ST monad.</source>
          <target state="translated">STモナドで使用するためのミューータブル配列型。</target>
        </trans-unit>
        <trans-unit id="215e56b349d3105e5186b842d419bb7207c023b0" translate="yes" xml:space="preserve">
          <source>Mutable boxed and unboxed arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st#v:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st#v:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; モナドの可変のボックス化およびボックス化解除された配列。</target>
        </trans-unit>
        <trans-unit id="515636c71d60349203d8732bedde03c1e6d4b604" translate="yes" xml:space="preserve">
          <source>Mutable boxed and unboxed arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; モナドの可変のボックス化およびボックス化解除された配列。</target>
        </trans-unit>
        <trans-unit id="2c7c15d19968866fe48793de76acdf671dc080e3" translate="yes" xml:space="preserve">
          <source>Mutable boxed and unboxed arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-st#v:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">Mutable boxed and unboxed arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-st#v:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad.</target>
        </trans-unit>
        <trans-unit id="31247b9a8722b87ffd65d7883ea3909ce04233ac" translate="yes" xml:space="preserve">
          <source>Mutable boxed and unboxed arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">Mutable boxed and unboxed arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad.</target>
        </trans-unit>
        <trans-unit id="3bcf35d6b49f587009acea897dbec9a7205cd79b" translate="yes" xml:space="preserve">
          <source>Mutable boxed and unboxed arrays in the IO monad.</source>
          <target state="translated">IOモナドの箱付き配列と箱なし配列のミューティアブル配列。</target>
        </trans-unit>
        <trans-unit id="440cc7a8eb8ee990439d9b0c275e863e6bd50dfb" translate="yes" xml:space="preserve">
          <source>Mutable boxed and unboxed arrays in the IO monad. . Safe API only of &lt;a href=&quot;data-array-io&quot;&gt;Data.Array.IO&lt;/a&gt;.</source>
          <target state="translated">IOモナドの可変ボックス化および非ボックス化配列。。&lt;a href=&quot;data-array-io&quot;&gt;Data.Array.IO&lt;/a&gt;のみの安全なAPI 。</target>
        </trans-unit>
        <trans-unit id="3fb3ae51bcbb4d7a420b0ebdc8a4c6115c91d585" translate="yes" xml:space="preserve">
          <source>Mutable references in the (strict) ST monad.</source>
          <target state="translated">(厳密な)STモナドでの相互参照。</target>
        </trans-unit>
        <trans-unit id="42749e4461b51d539ec768df8df05dca87a2bacc" translate="yes" xml:space="preserve">
          <source>Mutable references in the IO monad.</source>
          <target state="translated">IOモナドでのミューータブル参照。</target>
        </trans-unit>
        <trans-unit id="1f817ca4b49a2a2210c658ea8fd1e259ead274d2" translate="yes" xml:space="preserve">
          <source>Mutable references in the lazy ST monad.</source>
          <target state="translated">怠惰なSTモナドでの相互参照。</target>
        </trans-unit>
        <trans-unit id="04916e4ec1fe3dc428e8538332487b612dc2bd11" translate="yes" xml:space="preserve">
          <source>Mutable, boxed, non-strict arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; モナドの可変でボックス化された非厳密な配列。型引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="211618f366b0b487ea1225369f9859d9b05e4ebf" translate="yes" xml:space="preserve">
          <source>Mutable, boxed, non-strict arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</source>
          <target state="translated">Mutable, boxed, non-strict arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</target>
        </trans-unit>
        <trans-unit id="48f88ae9ac44602611ed4f45283d41180f01bbf0" translate="yes" xml:space="preserve">
          <source>Mutable, boxed, non-strict arrays in the &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; モナドの可変でボックス化された非厳密な配列。型引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="6cb43316285255ffc42363e8387f0053efdb7cd7" translate="yes" xml:space="preserve">
          <source>Mutable, unboxed, strict arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドの可変でボックス化されていない厳密な配列。型引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a301c7b2f899d4e9c83b2d431bcea04bd569480b" translate="yes" xml:space="preserve">
          <source>Mutable, unboxed, strict arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</source>
          <target state="translated">Mutable, unboxed, strict arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</target>
        </trans-unit>
        <trans-unit id="9925971623b1ac9311a057c1e6621841f8a448f7" translate="yes" xml:space="preserve">
          <source>MutableArray#</source>
          <target state="translated">MutableArray#</target>
        </trans-unit>
        <trans-unit id="40bb1cc17c060c6bd43dbf016d618af652f8c837" translate="yes" xml:space="preserve">
          <source>MutableArrayArray#</source>
          <target state="translated">MutableArrayArray#</target>
        </trans-unit>
        <trans-unit id="68b676eacbb0a7843cf46324a527ccbb0beed645" translate="yes" xml:space="preserve">
          <source>MutableByteArray#</source>
          <target state="translated">MutableByteArray#</target>
        </trans-unit>
        <trans-unit id="ddc210a400b5481a3abcf1bcd6083f807abd8b39" translate="yes" xml:space="preserve">
          <source>Mutate the contents of a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;. &lt;em&gt;N.B.&lt;/em&gt;, this version is non-strict.</source>
          <target state="translated">TVarの内容を &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; ます。&lt;em&gt;注&lt;/em&gt;：このバージョンは厳密ではありません。</target>
        </trans-unit>
        <trans-unit id="29f6dd6604a4083b037e5b08c77d32e780b2deac" translate="yes" xml:space="preserve">
          <source>Mutate the contents of an &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">IORefの内容を &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="65a480fe4d2e3102f2ecc2852d563e994ffa8ae8" translate="yes" xml:space="preserve">
          <source>Mutate the contents of an &lt;code&gt;&lt;a href=&quot;data-stref#t:STRef&quot;&gt;STRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">STRefの内容を &lt;code&gt;&lt;a href=&quot;data-stref#t:STRef&quot;&gt;STRef&lt;/a&gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="beef505a6a01c0417026ebb4ed6aa4fbdd93ebfe" translate="yes" xml:space="preserve">
          <source>Mutation: In both &lt;code&gt;foreign import unsafe&lt;/code&gt; and &lt;code&gt;foreign import safe&lt;/code&gt; FFI calls, it is safe to mutate a &lt;code&gt;MutableByteArray&lt;/code&gt;. Mutating any other type of array leads to undefined behavior. Reason: Mutable arrays of heap objects record writes for the purpose of garbage collection. An array of heap objects is passed to a foreign C function, the runtime does not record any writes. Consequently, it is not safe to write to an array of heap objects in a foreign function. Since the runtime has no facilities for tracking mutation of a &lt;code&gt;MutableByteArray#&lt;/code&gt;, these can be safely mutated in any foreign function.</source>
          <target state="translated">Mutation: In both &lt;code&gt;foreign import unsafe&lt;/code&gt; and &lt;code&gt;foreign import safe&lt;/code&gt; FFI calls, it is safe to mutate a &lt;code&gt;MutableByteArray&lt;/code&gt; . Mutating any other type of array leads to undefined behavior. Reason: Mutable arrays of heap objects record writes for the purpose of garbage collection. An array of heap objects is passed to a foreign C function, the runtime does not record any writes. Consequently, it is not safe to write to an array of heap objects in a foreign function. Since the runtime has no facilities for tracking mutation of a &lt;code&gt;MutableByteArray#&lt;/code&gt; , these can be safely mutated in any foreign function.</target>
        </trans-unit>
        <trans-unit id="18d35073b15c0f266e315c4a406057c1c9e30791" translate="yes" xml:space="preserve">
          <source>NB! This is a legacy feature, see &lt;a href=&quot;#extension-StandaloneKindSignatures&quot;&gt;&lt;code&gt;StandaloneKindSignatures&lt;/code&gt;&lt;/a&gt; for the modern replacement.</source>
          <target state="translated">NB! This is a legacy feature, see &lt;a href=&quot;#extension-StandaloneKindSignatures&quot;&gt; &lt;code&gt;StandaloneKindSignatures&lt;/code&gt; &lt;/a&gt; for the modern replacement.</target>
        </trans-unit>
        <trans-unit id="6d4bc7da7f8019e6ba579c7168ed8ef8e123de9f" translate="yes" xml:space="preserve">
          <source>NB. Be very careful with these finalizers. One common trap is that if a finalizer references another finalized value, it does not prevent that value from being finalized. In particular, &lt;code&gt;&lt;a href=&quot;system-io#v:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;s are finalized objects, so a finalizer should not refer to a &lt;code&gt;&lt;a href=&quot;system-io#v:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; (including &lt;code&gt;&lt;a href=&quot;system-io#v:stdout&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;system-io#v:stdin&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;system-io#v:stderr&quot;&gt;stderr&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">NB。これらのファイナライザには十分注意してください。よくある落とし穴の1つは、ファイナライザが別のファイナライズされた値を参照しても、その値がファイナライズされるのを妨げないことです。特に、 &lt;code&gt;&lt;a href=&quot;system-io#v:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; はファイナライズされたオブジェクトであるため、ファイナライザは &lt;code&gt;&lt;a href=&quot;system-io#v:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;system-io#v:stdout&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;system-io#v:stdin&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;system-io#v:stderr&quot;&gt;stderr&lt;/a&gt;&lt;/code&gt; を含む）を参照しないでください。</target>
        </trans-unit>
        <trans-unit id="374a0e14aef11d696ae0e12a6af249af24d04c07" translate="yes" xml:space="preserve">
          <source>NB. This macro is set when pre-processing both Haskell source and C source, including the C source generated from a Haskell module (i.e. &lt;code&gt;.hs&lt;/code&gt;, &lt;code&gt;.lhs&lt;/code&gt;, &lt;code&gt;.c&lt;/code&gt; and &lt;code&gt;.hc&lt;/code&gt; files).</source>
          <target state="translated">NB。このマクロは、Haskellモジュールから生成されたCソース（つまり、 &lt;code&gt;.hs&lt;/code&gt; 、 &lt;code&gt;.lhs&lt;/code&gt; 、 &lt;code&gt;.c&lt;/code&gt; 、および &lt;code&gt;.hc&lt;/code&gt; ファイル）を含む、HaskellソースとCソースの両方を前処理するときに設定されます。</target>
        </trans-unit>
        <trans-unit id="ef6198823084d192389d02aee66353f70e110347" translate="yes" xml:space="preserve">
          <source>NB: &lt;code&gt;isValidBigNat# nullBigNat&lt;/code&gt; is false</source>
          <target state="translated">注意： &lt;code&gt;isValidBigNat# nullBigNat&lt;/code&gt; はfalseです</target>
        </trans-unit>
        <trans-unit id="ccbbb1b26af40cc778cde005c4f658b4a6d44e97" translate="yes" xml:space="preserve">
          <source>NB: This treatment of superclasses goes beyond &lt;a href=&quot;http://i.cs.hku.hk/~bruno//papers/hs2017.pdf&quot;&gt;the paper&lt;/a&gt;, but is specifically desired by users.</source>
          <target state="translated">注意：このスーパークラスの扱いは&lt;a href=&quot;http://i.cs.hku.hk/~bruno//papers/hs2017.pdf&quot;&gt;紙&lt;/a&gt;を超えていますが、ユーザーが特に望んでいます。</target>
        </trans-unit>
        <trans-unit id="5cfb84a3255f99b3a5dc5c0b199025e1ab8a956d" translate="yes" xml:space="preserve">
          <source>NFData</source>
          <target state="translated">NFData</target>
        </trans-unit>
        <trans-unit id="8bef8898d5726a9645ab52735e823a1b3b2a58ed" translate="yes" xml:space="preserve">
          <source>NFData1</source>
          <target state="translated">NFData1</target>
        </trans-unit>
        <trans-unit id="418a51c8aef1b7b43f9f69603188a3fc934fb298" translate="yes" xml:space="preserve">
          <source>NFData2</source>
          <target state="translated">NFData2</target>
        </trans-unit>
        <trans-unit id="a74c32096f555276472737ff5840787516207d4d" translate="yes" xml:space="preserve">
          <source>NOTE for GHC users: unless you use the &lt;code&gt;-threaded&lt;/code&gt; flag, &lt;code&gt;hWaitForInput hdl t&lt;/code&gt; where &lt;code&gt;t &amp;gt;= 0&lt;/code&gt; will block all other Haskell threads for the duration of the call. It behaves like a &lt;code&gt;safe&lt;/code&gt; foreign call in this respect.</source>
          <target state="translated">GHCユーザーへの注意： &lt;code&gt;-threaded&lt;/code&gt; フラグを使用しない限り、 &lt;code&gt;hWaitForInput hdl t&lt;/code&gt; （ &lt;code&gt;t &amp;gt;= 0&lt;/code&gt; は、呼び出しの間、他のすべてのHaskellスレッドをブロックします。これは、この点で &lt;code&gt;safe&lt;/code&gt; 外部呼び出しのように動作します。</target>
        </trans-unit>
        <trans-unit id="f8bec3400a00d95de2aca056e95477c68ba1eb54" translate="yes" xml:space="preserve">
          <source>NOTE: &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hIsEOF&quot;&gt;hIsEOF&lt;/a&gt;&lt;/code&gt; may block, because it has to attempt to read from the stream to determine whether there is any more data to be read.</source>
          <target state="translated">注： &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hIsEOF&quot;&gt;hIsEOF&lt;/a&gt;&lt;/code&gt; は、ストリームから読み取って、読み取るデータがまだあるかどうかを判断する必要があるため、ブロックされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="e177a44ba2f2969ccf14799a97fd335989430f30" translate="yes" xml:space="preserve">
          <source>NOTE: &lt;code&gt;&lt;a href=&quot;system-io#v:hIsEOF&quot;&gt;hIsEOF&lt;/a&gt;&lt;/code&gt; may block, because it has to attempt to read from the stream to determine whether there is any more data to be read.</source>
          <target state="translated">注： &lt;code&gt;&lt;a href=&quot;system-io#v:hIsEOF&quot;&gt;hIsEOF&lt;/a&gt;&lt;/code&gt; は、ストリームから読み取って、読み取るデータがまだあるかどうかを判断する必要があるため、ブロックされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b1bbe2aede4f3fac96050d9ca6e8622d57dc7d43" translate="yes" xml:space="preserve">
          <source>NOTE: Since this library is built on top of the curses interface, it is not thread-safe.</source>
          <target state="translated">注意:このライブラリは curses インタフェースの上に構築されているため、スレッドセーフではありません。</target>
        </trans-unit>
        <trans-unit id="63561186ffbbc0f2e4ac1c402f5b46d5450d885c" translate="yes" xml:space="preserve">
          <source>NOTE: The implicit parameter &lt;code&gt;?callStack :: CallStack&lt;/code&gt; is an implementation detail and &lt;strong&gt;should not&lt;/strong&gt; be considered part of the &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; API, we may decide to change the implementation in the future.</source>
          <target state="translated">注：暗黙的なパラメータ &lt;code&gt;?callStack :: CallStack&lt;/code&gt; は実装の詳細であり、 &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; APIの一部と見なす&lt;strong&gt;べきでは&lt;/strong&gt;あり&lt;strong&gt;ません&lt;/strong&gt;。将来、実装を変更する可能性があります。</target>
        </trans-unit>
        <trans-unit id="73283dfca92bcfe835f52a5a26a21a5f2a2e5acc" translate="yes" xml:space="preserve">
          <source>NOTE: The implicit parameter &lt;code&gt;?callStack :: CallStack&lt;/code&gt; is an implementation detail and &lt;strong&gt;should not&lt;/strong&gt; be considered part of the &lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; API, we may decide to change the implementation in the future.</source>
          <target state="translated">注：暗黙的なパラメータ &lt;code&gt;?callStack :: CallStack&lt;/code&gt; は実装の詳細であり、 &lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; APIの一部と見なす&lt;strong&gt;べきでは&lt;/strong&gt;あり&lt;strong&gt;ません&lt;/strong&gt;。将来、実装を変更する可能性があります。</target>
        </trans-unit>
        <trans-unit id="98b32b5a6dce9bba2f73fac9f444388673ea544d" translate="yes" xml:space="preserve">
          <source>NOTE: The intrepid user may notice that &lt;code&gt;&lt;a href=&quot;ghc-stack#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; is just an alias for an implicit parameter &lt;code&gt;?callStack :: CallStack&lt;/code&gt;. This is an implementation detail and &lt;strong&gt;should not&lt;/strong&gt; be considered part of the &lt;code&gt;&lt;a href=&quot;ghc-exception#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; API, we may decide to change the implementation in the future.</source>
          <target state="translated">注：勇敢なユーザーは、 &lt;code&gt;&lt;a href=&quot;ghc-stack#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; が暗黙的なパラメーター &lt;code&gt;?callStack :: CallStack&lt;/code&gt; 単なるエイリアスであることに気付く場合があります。これは実装の詳細であり、 &lt;code&gt;&lt;a href=&quot;ghc-exception#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; APIの一部と見なす&lt;strong&gt;べきでは&lt;/strong&gt;あり&lt;strong&gt;ません&lt;/strong&gt;。将来、実装を変更する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d4652f803bbd5a4299b501fa174c8494ddc7084c" translate="yes" xml:space="preserve">
          <source>NOTE: The intrepid user may notice that &lt;code&gt;&lt;a href=&quot;ghc-stack#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; is just an alias for an implicit parameter &lt;code&gt;?callStack :: CallStack&lt;/code&gt;. This is an implementation detail and &lt;strong&gt;should not&lt;/strong&gt; be considered part of the &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; API, we may decide to change the implementation in the future.</source>
          <target state="translated">注：勇敢なユーザーは、 &lt;code&gt;&lt;a href=&quot;ghc-stack#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; が暗黙的なパラメーター &lt;code&gt;?callStack :: CallStack&lt;/code&gt; 単なるエイリアスであることに気付く場合があります。これは実装の詳細であり、 &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; APIの一部と見なす&lt;strong&gt;べきでは&lt;/strong&gt;あり&lt;strong&gt;ません&lt;/strong&gt;。将来、実装を変更する可能性があります。</target>
        </trans-unit>
        <trans-unit id="04964a8b393aeb4c81203022d841d735724a3657" translate="yes" xml:space="preserve">
          <source>NOTE: The intrepid user may notice that &lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; is just an alias for an implicit parameter &lt;code&gt;?callStack :: CallStack&lt;/code&gt;. This is an implementation detail and &lt;strong&gt;should not&lt;/strong&gt; be considered part of the &lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; API, we may decide to change the implementation in the future.</source>
          <target state="translated">注：勇敢なユーザーは、 &lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; が暗黙的なパラメーター &lt;code&gt;?callStack :: CallStack&lt;/code&gt; 単なるエイリアスであることに気付く場合があります。これは実装の詳細であり、 &lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; APIの一部と見なす&lt;strong&gt;べきでは&lt;/strong&gt;あり&lt;strong&gt;ません&lt;/strong&gt;。将来、実装を変更する可能性があります。</target>
        </trans-unit>
        <trans-unit id="173f40eb49608b0a9f5c7dfe7826130ac61ad0f2" translate="yes" xml:space="preserve">
          <source>NOTE: createHardLink is &lt;em&gt;flipped arguments&lt;/em&gt; to provide compatiblity for Unix.</source>
          <target state="translated">注：createHardLinkは、UNIXとの互換性を提供するために&lt;em&gt;反転された引数&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="65538d1f35d9ff80cfc7afb1ba3058d20b90d2b2" translate="yes" xml:space="preserve">
          <source>NOTE: createSymbolicLink* functions are &lt;em&gt;flipped arguments&lt;/em&gt; to provide compatiblity for Unix, except &lt;code&gt;&lt;a href=&quot;system-win32-symboliclink#v:createSymbolicLink-39-&quot;&gt;createSymbolicLink'&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：createSymbolicLink *関数は、 &lt;code&gt;&lt;a href=&quot;system-win32-symboliclink#v:createSymbolicLink-39-&quot;&gt;createSymbolicLink'&lt;/a&gt;&lt;/code&gt; を除き、Unixとの互換性を提供するために&lt;em&gt;反転された引数&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="9a289febc0a62ac0fd3ddf47889458ad201b28af" translate="yes" xml:space="preserve">
          <source>NOTE: on Windows, this function does not work correctly; it behaves identically to &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：Windowsでは、この機能は正しく機能しません。 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="27648f423ffb7efa59e5c0832d0545992c2e7a71" translate="yes" xml:space="preserve">
          <source>NOTE: on Windows, this function does not work correctly; it behaves identically to &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：Windowsでは、この機能は正しく機能しません。 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="a2f5862ab04e7d70c9d237cade16ad082f1f892f" translate="yes" xml:space="preserve">
          <source>NOTE: on Windows, this function does not work correctly; it behaves identically to &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：Windowsでは、この機能は正しく機能しません。 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="217551d8f091b6742427b78f8d4d21b8576d5bcf" translate="yes" xml:space="preserve">
          <source>NPlusKPatterns</source>
          <target state="translated">NPlusKPatterns</target>
        </trans-unit>
        <trans-unit id="16011665a1d6a1793f7af5691f78690f7db8e797" translate="yes" xml:space="preserve">
          <source>NT namespace: &lt;code&gt;\&lt;/code&gt;</source>
          <target state="translated">NTネームスペース： &lt;code&gt;\&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="09b181fc210e2f1a3662ae262c26a3cf3bb2036d" translate="yes" xml:space="preserve">
          <source>NTFS only supprts this functionality.</source>
          <target state="translated">NTFSはこの機能をサポートするだけです。</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="e11bc388c83c1b8b82ae73a235837ab0ef1b8869" translate="yes" xml:space="preserve">
          <source>Name lookup</source>
          <target state="translated">名前検索</target>
        </trans-unit>
        <trans-unit id="c1dd5c5a3c784d1dc660322bd2d8b0aadd9447a3" translate="yes" xml:space="preserve">
          <source>Name of the Haskell file.</source>
          <target state="translated">Haskellファイルの名前。</target>
        </trans-unit>
        <trans-unit id="d34370b884a4e0c6661e9211124b058e6efe6336" translate="yes" xml:space="preserve">
          <source>Name of the module where the static pointer is defined</source>
          <target state="translated">静的ポインタが定義されているモジュール名</target>
        </trans-unit>
        <trans-unit id="241f55c9dbd4332d828c31c2528891c3f79c4291" translate="yes" xml:space="preserve">
          <source>NameFlavour</source>
          <target state="translated">NameFlavour</target>
        </trans-unit>
        <trans-unit id="43bd2e139f7efc3fb707f38288858777f7d29f55" translate="yes" xml:space="preserve">
          <source>NameIs</source>
          <target state="translated">NameIs</target>
        </trans-unit>
        <trans-unit id="e784a5acc01d14b30b1b161e2114eac0f9da4a44" translate="yes" xml:space="preserve">
          <source>NameS</source>
          <target state="translated">NameS</target>
        </trans-unit>
        <trans-unit id="285f33209f1413ce6482de704071ed860f4ee1f7" translate="yes" xml:space="preserve">
          <source>NameSpace</source>
          <target state="translated">NameSpace</target>
        </trans-unit>
        <trans-unit id="af5f97c76eceeda41176655ffdf797f38db674a9" translate="yes" xml:space="preserve">
          <source>Named arguments can also be given explicit kind signatures if needed. Just as with &lt;a href=&quot;#gadt&quot;&gt;GADT declarations&lt;/a&gt; named arguments are entirely optional, so that we can declare &lt;code&gt;Array&lt;/code&gt; alternatively with</source>
          <target state="translated">名前付き引数には、必要に応じて明示的な種類のシグネチャを与えることもできます。ちょうどのように&lt;a href=&quot;#gadt&quot;&gt;GADT宣言&lt;/a&gt;名前付き引数は、私たちが宣言することができ、完全にオプションである &lt;code&gt;Array&lt;/code&gt; と交互に</target>
        </trans-unit>
        <trans-unit id="453d20a6d115195746f780ef6b881f77130889c3" translate="yes" xml:space="preserve">
          <source>Named wildcards &lt;em&gt;should not be confused with type variables&lt;/em&gt;. Even though syntactically similar, named wildcards can unify with monotypes as well as be generalised over (and behave as type variables).</source>
          <target state="translated">名前付きのワイルドカード&lt;em&gt;をタイプ変数と混同しないでください&lt;/em&gt;。構文的には類似していますが、名前付きワイルドカードは、モノタイプと統合することができ、一般化することができます（型変数として動作します）。</target>
        </trans-unit>
        <trans-unit id="efd83b1022b74e5c3478447290339e566cb15ae5" translate="yes" xml:space="preserve">
          <source>NamedWildCards</source>
          <target state="translated">NamedWildCards</target>
        </trans-unit>
        <trans-unit id="2b7c08c3ab75f37e2da656c1aab228f5f3a793b1" translate="yes" xml:space="preserve">
          <source>Names</source>
          <target state="translated">Names</target>
        </trans-unit>
        <trans-unit id="b2390be51f0839e05354a4edc7bfb9b402fb9775" translate="yes" xml:space="preserve">
          <source>Names constructed using &lt;code&gt;newName&lt;/code&gt; and &lt;code&gt;mkName&lt;/code&gt; may be used in bindings (such as &lt;code&gt;let x = ...&lt;/code&gt; or &lt;code&gt;x -&amp;gt; ...&lt;/code&gt;), but names constructed using &lt;code&gt;lookupValueName&lt;/code&gt;, &lt;code&gt;lookupTypeName&lt;/code&gt;, &lt;code&gt;'f&lt;/code&gt;, &lt;code&gt;''T&lt;/code&gt; may not.</source>
          <target state="translated">&lt;code&gt;newName&lt;/code&gt; と &lt;code&gt;mkName&lt;/code&gt; を使用して作成された名前はバインディング（ &lt;code&gt;let x = ...&lt;/code&gt; または &lt;code&gt;x -&amp;gt; ...&lt;/code&gt; ）で使用 &lt;code&gt;lookupValueName&lt;/code&gt; 、 &lt;code&gt;lookupTypeName&lt;/code&gt; 、lookupTypeName、 &lt;code&gt;'f&lt;/code&gt; 、 &lt;code&gt;''T&lt;/code&gt; を使用して作成された名前は使用できません。</target>
        </trans-unit>
        <trans-unit id="34803b64f16548b242233b7132d75f6e5f8fe8e6" translate="yes" xml:space="preserve">
          <source>Naming conventions</source>
          <target state="translated">命名規則</target>
        </trans-unit>
        <trans-unit id="9f71fd1007f8c4abc458163409fae654630b9e86" translate="yes" xml:space="preserve">
          <source>Nano</source>
          <target state="translated">Nano</target>
        </trans-unit>
        <trans-unit id="2e3e963e975a60a6a8a003da6ed817e4d4499a19" translate="yes" xml:space="preserve">
          <source>Nat</source>
          <target state="translated">Nat</target>
        </trans-unit>
        <trans-unit id="fcc28bb1503dac338f555a7ce7320bdbab52e7c3" translate="yes" xml:space="preserve">
          <source>Nat Kind</source>
          <target state="translated">ナットカインド</target>
        </trans-unit>
        <trans-unit id="7322348943287d68f8c176b2c1566795ccc03b7e" translate="yes" xml:space="preserve">
          <source>Native code generator</source>
          <target state="translated">ネイティブコードジェネレータ</target>
        </trans-unit>
        <trans-unit id="ea26876daa9a0a0caf49391472053413ac06277e" translate="yes" xml:space="preserve">
          <source>Natural</source>
          <target state="translated">Natural</target>
        </trans-unit>
        <trans-unit id="6dfc30c819c79fca570a6d67601933511b292394" translate="yes" xml:space="preserve">
          <source>Naturality</source>
          <target state="translated">Naturality</target>
        </trans-unit>
        <trans-unit id="a6a233fd10e66b739809092ee7ea7beda5f628ec" translate="yes" xml:space="preserve">
          <source>Nd: Number, Decimal</source>
          <target state="translated">Nd:数、10進数</target>
        </trans-unit>
        <trans-unit id="ee52746bd96005ef182ba2d9b60655a4e0ac20d1" translate="yes" xml:space="preserve">
          <source>Negate &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 否定</target>
        </trans-unit>
        <trans-unit id="06b8058bc282e46c01399ffa04dcfaf5551d96ef" translate="yes" xml:space="preserve">
          <source>Negate element-wise.</source>
          <target state="translated">要素ごとに否定する。</target>
        </trans-unit>
        <trans-unit id="1c22f0963e34858feada46efcb0a5e32c38f2754" translate="yes" xml:space="preserve">
          <source>Negation (e.g. &amp;ldquo;&lt;code&gt;- (f x)&lt;/code&gt;&amp;rdquo;) means &amp;ldquo;&lt;code&gt;negate (f x)&lt;/code&gt;&amp;rdquo;, both in numeric patterns, and expressions.</source>
          <target state="translated">否定（「 &lt;code&gt;- (f x)&lt;/code&gt; 」など）は、数値パターンと式の両方で「 &lt;code&gt;negate (f x)&lt;/code&gt; 」を意味します。</target>
        </trans-unit>
        <trans-unit id="dd048e1f91db2495004257dbd5282e263424faee" translate="yes" xml:space="preserve">
          <source>Negative exponents are supported if an inverse modulo &lt;code&gt;&lt;em&gt;m&lt;/em&gt;&lt;/code&gt; exists.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;m&lt;/em&gt;&lt;/code&gt; を法とする逆数が存在する場合、負の指数がサポートされます。</target>
        </trans-unit>
        <trans-unit id="f4f4481fb4d6d71c0fcfc0047e37c0bbb90861f5" translate="yes" xml:space="preserve">
          <source>Negative literals, such as &lt;code&gt;-3&lt;/code&gt;, are specified by (a careful reading of) the Haskell Report as meaning &lt;code&gt;Prelude.negate (Prelude.fromInteger 3)&lt;/code&gt;. So &lt;code&gt;-2147483648&lt;/code&gt; means &lt;code&gt;negate (fromInteger 2147483648)&lt;/code&gt;. Since &lt;code&gt;fromInteger&lt;/code&gt; takes the lower 32 bits of the representation, &lt;code&gt;fromInteger (2147483648::Integer)&lt;/code&gt;, computed at type &lt;code&gt;Int&lt;/code&gt; is &lt;code&gt;-2147483648::Int&lt;/code&gt;. The &lt;code&gt;negate&lt;/code&gt; operation then overflows, but it is unchecked, so &lt;code&gt;negate (-2147483648::Int)&lt;/code&gt; is just &lt;code&gt;-2147483648&lt;/code&gt;. In short, one can write &lt;code&gt;minBound::Int&lt;/code&gt; as a literal with the expected meaning (but that is not in general guaranteed).</source>
          <target state="translated">&lt;code&gt;-3&lt;/code&gt; などの負のリテラルは、Haskellレポート（を注意深く読む）によって &lt;code&gt;Prelude.negate (Prelude.fromInteger 3)&lt;/code&gt; を意味するものとして指定されます。したがって、 &lt;code&gt;-2147483648&lt;/code&gt; は &lt;code&gt;negate (fromInteger 2147483648)&lt;/code&gt; 意味します。以来 &lt;code&gt;fromInteger&lt;/code&gt; は表現の下位32ビットを取り、 &lt;code&gt;fromInteger (2147483648::Integer)&lt;/code&gt; 型で計算、 &lt;code&gt;Int&lt;/code&gt; がある &lt;code&gt;-2147483648::Int&lt;/code&gt; 。 &lt;code&gt;negate&lt;/code&gt; 操作は、オーバーフローし、それがオフになっているので、 &lt;code&gt;negate (-2147483648::Int)&lt;/code&gt; だけです &lt;code&gt;-2147483648&lt;/code&gt; 。つまり、 &lt;code&gt;minBound::Int&lt;/code&gt; 書くことができます。 期待される意味を持つリテラルとして（ただし、一般的には保証されません）。</target>
        </trans-unit>
        <trans-unit id="d52baec47edee13dda9979236d74b3a6e53bb526" translate="yes" xml:space="preserve">
          <source>Negative precision is taken as 0. The meaning of the precision depends on the conversion type.</source>
          <target state="translated">負の精度は0として扱われます。 精度の意味は変換タイプによって異なります。</target>
        </trans-unit>
        <trans-unit id="f622cbbe6dc0bf9f80a40c77e1e302b16367df00" translate="yes" xml:space="preserve">
          <source>NegativeLiterals</source>
          <target state="translated">NegativeLiterals</target>
        </trans-unit>
        <trans-unit id="522182dd21569f6be17220e3cac4e333aa5e69ba" translate="yes" xml:space="preserve">
          <source>Nest (or indent) a document by a given number of positions (which may also be negative). &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:nest&quot;&gt;nest&lt;/a&gt;&lt;/code&gt; satisfies the laws:</source>
          <target state="translated">ドキュメントを特定の数の位置でネスト（またはインデント）します（負の場合もあります）。 &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:nest&quot;&gt;nest&lt;/a&gt;&lt;/code&gt; は法律を満たします：</target>
        </trans-unit>
        <trans-unit id="949a22e40a67eb32fd127980e8bf7757812da720" translate="yes" xml:space="preserve">
          <source>Nest (or indent) a document by a given number of positions (which may also be negative). &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:nest&quot;&gt;nest&lt;/a&gt;&lt;/code&gt; satisfies the laws:</source>
          <target state="translated">ドキュメントを特定の数の位置でネスト（またはインデント）します（負の場合もあります）。 &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:nest&quot;&gt;nest&lt;/a&gt;&lt;/code&gt; は法律を満たします：</target>
        </trans-unit>
        <trans-unit id="2fd44f8ebe0a7e3b2bea5c918f154b8513f223e1" translate="yes" xml:space="preserve">
          <source>Nest (or indent) a document by a given number of positions (which may also be negative). &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:nest&quot;&gt;nest&lt;/a&gt;&lt;/code&gt; satisfies the laws:</source>
          <target state="translated">ドキュメントを特定の数の位置でネスト（またはインデント）します（負の場合もあります）。 &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:nest&quot;&gt;nest&lt;/a&gt;&lt;/code&gt; は法律を満たします：</target>
        </trans-unit>
        <trans-unit id="2344677d8f01e8e2fca317a5c561cc80f092e37c" translate="yes" xml:space="preserve">
          <source>Nested</source>
          <target state="translated">Nested</target>
        </trans-unit>
        <trans-unit id="d67a4e0cdcad34714be98100536800680402b530" translate="yes" xml:space="preserve">
          <source>NestedAtomically</source>
          <target state="translated">NestedAtomically</target>
        </trans-unit>
        <trans-unit id="f06563daf6842a8e082fd4615e320fc869bb69d9" translate="yes" xml:space="preserve">
          <source>Nesting</source>
          <target state="translated">Nesting</target>
        </trans-unit>
        <trans-unit id="a2577c561d86f6ba3c73b6eefeafce792f6e11cc" translate="yes" xml:space="preserve">
          <source>Nevertheless one can pretend that the following three kinds of instances exist. First, as a trivial base-case:</source>
          <target state="translated">それにもかかわらず、以下の3種類のインスタンスが存在すると仮定することができます。第一に、些細なベースケースとして。</target>
        </trans-unit>
        <trans-unit id="cfe594798e5ee5a9536eb68772725a21269ab358" translate="yes" xml:space="preserve">
          <source>New parsing functions</source>
          <target state="translated">新しい解析関数</target>
        </trans-unit>
        <trans-unit id="1523c8acdb2ee4d7786ae768261d0c785a7a6dd4" translate="yes" xml:space="preserve">
          <source>New path</source>
          <target state="translated">新しいパス</target>
        </trans-unit>
        <trans-unit id="2f086c7950ef417a974e200114c1f6896effacb4" translate="yes" xml:space="preserve">
          <source>New reserved words and symbols: character sequences which are no longer available for use as identifiers in the program.</source>
          <target state="translated">新しい予約語と記号:プログラム内で識別子として使用できなくなった文字列。</target>
        </trans-unit>
        <trans-unit id="d706a7f27906e3a8bf4f4fed0f9c3d7edc4a240a" translate="yes" xml:space="preserve">
          <source>Newline</source>
          <target state="translated">Newline</target>
        </trans-unit>
        <trans-unit id="08342fdb7e4d5979ac614e4583b9d664b9d3d88c" translate="yes" xml:space="preserve">
          <source>Newline conversion</source>
          <target state="translated">改行変換</target>
        </trans-unit>
        <trans-unit id="ada069b2de824a0d3a8b152fde78626a8e8b8ade" translate="yes" xml:space="preserve">
          <source>NewlineMode</source>
          <target state="translated">NewlineMode</target>
        </trans-unit>
        <trans-unit id="9d70c1effde2f8c015bfb84f7838e84613e007f3" translate="yes" xml:space="preserve">
          <source>NewtypeStrategy</source>
          <target state="translated">NewtypeStrategy</target>
        </trans-unit>
        <trans-unit id="ca33c65ffa7a8e2e461597acbdf8adbf2c6312c3" translate="yes" xml:space="preserve">
          <source>Newtypes are better than datatypes:</source>
          <target state="translated">ニュータイプはデータ型よりも優れています。</target>
        </trans-unit>
        <trans-unit id="bc981983e7f547dc62e19a1e383acfe00782a6d5" translate="yes" xml:space="preserve">
          <source>Next</source>
          <target state="translated">Next</target>
        </trans-unit>
        <trans-unit id="bb1a13dad76ab6476212d16d134ffcbc89390074" translate="yes" xml:space="preserve">
          <source>Next free byte in current &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BufferRange&quot;&gt;BufferRange&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">現在の &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BufferRange&quot;&gt;BufferRange&lt;/a&gt;&lt;/code&gt; の次の空きバイト</target>
        </trans-unit>
        <trans-unit id="4ae9c52b894383b8025369fa03e4f1485c55d887" translate="yes" xml:space="preserve">
          <source>Next free byte in current &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BufferRange&quot;&gt;BufferRange&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">現在の &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BufferRange&quot;&gt;BufferRange&lt;/a&gt;&lt;/code&gt; の次の空きバイト。</target>
        </trans-unit>
        <trans-unit id="6ae27512f7d04b93e6ab0f5a142fdb6a159a3a6d" translate="yes" xml:space="preserve">
          <source>Next position calculating function.</source>
          <target state="translated">次の位置計算機能。</target>
        </trans-unit>
        <trans-unit id="499df2c9156f9e7492c202932262c12764a363a7" translate="yes" xml:space="preserve">
          <source>Next there is information about the garbage collections done. For each generation it says how many garbage collections were done, how many of those collections were done in parallel, the total CPU time used for garbage collecting that generation, and the total wall clock time elapsed while garbage collecting that generation.</source>
          <target state="translated">次に行われたガベージコレクションに関する情報があります。各世代について、何個のガベージコレクションが行われたか、何個のガベージコレクションが並列に行われたか、その世代のガベージコレクションに使用された総CPU時間、その世代のガベージコレクション中に経過した総ウォールクロック時間が記載されています。</target>
        </trans-unit>
        <trans-unit id="833ff1d27fbdf158e7b505b01c19b8b1b95cec80" translate="yes" xml:space="preserve">
          <source>Next there is the CPU time and wall clock time elapsed broken down by what the runtime system was doing at the time. INIT is the runtime system initialisation. MUT is the mutator time, i.e. the time spent actually running your code. GC is the time spent doing garbage collection. RP is the time spent doing retainer profiling. PROF is the time spent doing other profiling. EXIT is the runtime system shutdown time. And finally, Total is, of course, the total.</source>
          <target state="translated">次に、CPU時間とウォールクロック時間の経過時間を、ランタイムシステムがその時点で何をしていたかに分解して表示します。INITはランタイムシステムの初期化です。MUTはミューテータ時間、つまり実際にコードを実行している時間です。GCはガベージコレクションに費やした時間です。RPはリテイナープロファイリングに費やした時間です。PROF は、他のプロファイリングに費やした時間です。EXIT はランタイムシステムのシャットダウン時間です。そして最後にTotalはもちろん合計です。</target>
        </trans-unit>
        <trans-unit id="6e08ae4fe787b1e828f2d0c8f144343e2fec4132" translate="yes" xml:space="preserve">
          <source>Next to &lt;code&gt;&lt;a href=&quot;ghc-generics#t:K1&quot;&gt;K1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-generics#t:M1&quot;&gt;M1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-generics#t::-43-:&quot;&gt;:+:&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-generics#t::-42-:&quot;&gt;:*:&lt;/a&gt;&lt;/code&gt; there are a few more type constructors that occur in the representations of other datatypes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-generics#t:K1&quot;&gt;K1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:M1&quot;&gt;M1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ghc-generics#t::-43-:&quot;&gt;:+:&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;ghc-generics#t::-42-:&quot;&gt;:*:&lt;/a&gt;&lt;/code&gt; の隣には、他のデータ型の表現で発生する型コンストラクタがさらにいくつかあります。</target>
        </trans-unit>
        <trans-unit id="64a331e6f60cb1a7ad554cbc5ac1d707fce97281" translate="yes" xml:space="preserve">
          <source>Next, it will perform the actions in the &lt;code&gt;actions&lt;/code&gt; list in order from left to right.</source>
          <target state="translated">次に、 &lt;code&gt;actions&lt;/code&gt; リストのアクションを左から右に実行します。</target>
        </trans-unit>
        <trans-unit id="c916da70cd4a32512ca71d70e5cc765d00357df4" translate="yes" xml:space="preserve">
          <source>Nil</source>
          <target state="translated">Nil</target>
        </trans-unit>
        <trans-unit id="01254dc62ba02c8f98ce116687b65348bfae9d10" translate="yes" xml:space="preserve">
          <source>Nils Anders Danielsson 2006</source>
          <target state="translated">ニルス・アンダース・ダニエルソン 2006</target>
        </trans-unit>
        <trans-unit id="c6b76279a253069e49509991acb2a0fc6c0289e6" translate="yes" xml:space="preserve">
          <source>Nl: Number, Letter</source>
          <target state="translated">Nl.数字、文字</target>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="e18dd77372be6a1409a708e6d14bcd9b7f68a5f9" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;-RTS&lt;/code&gt; option is required if the runtime-system options extend to the end of the command line, as in this example:</source>
          <target state="translated">次の例のように、ランタイムシステムオプションがコマンドラインの最後まで拡張されている場合、 &lt;code&gt;-RTS&lt;/code&gt; オプションは必要ありません。</target>
        </trans-unit>
        <trans-unit id="899c963a8035b8eff10bff6d0639741ad4e409cb" translate="yes" xml:space="preserve">
          <source>No guarantee is made as to the sizes of the pieces; an internal, but deterministic process determines this. However, it is guaranteed that the pieces returned will be in ascending order (all elements in the first submap less than all elements in the second, and so on).</source>
          <target state="translated">ピースのサイズは、内部の決定論的なプロセスによって決定されます。しかし、返されるピースは昇順になることは保証されています(最初のサブマップのすべての要素は、2番目のサブマップのすべての要素よりも小さい、というように)。</target>
        </trans-unit>
        <trans-unit id="5b4acda8d542358f213b8f3e4e1650164df9bfe7" translate="yes" xml:space="preserve">
          <source>No guarantee is made as to the sizes of the pieces; an internal, but deterministic process determines this. However, it is guaranteed that the pieces returned will be in ascending order (all elements in the first subset less than all elements in the second, and so on).</source>
          <target state="translated">これは,内部的な,しかし決定論的なプロセスによって決定されます.しかし,返される駒は昇順になることが保証されています(最初のサブセットのすべての要素は,2番目のサブセットのすべての要素よりも小さい,というように)。</target>
        </trans-unit>
        <trans-unit id="77c3849165d91154401b080a528c1f07258f9117" translate="yes" xml:space="preserve">
          <source>No indentation, infinitely long lines (&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; ignored), but explicit new lines, i.e., &lt;code&gt;text &quot;one&quot; $$ text &quot;two&quot;&lt;/code&gt;, are respected.</source>
          <target state="translated">インデントはなく、無限に長い行（ &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; は無視されます）ですが、明示的な &lt;code&gt;text &quot;one&quot; $$ text &quot;two&quot;&lt;/code&gt; 、つまり、テキスト &quot;one&quot; $$ text &quot;two&quot;は順守されます。</target>
        </trans-unit>
        <trans-unit id="d21eb7c7dc916ac561e541148784eed9a679e1bb" translate="yes" xml:space="preserve">
          <source>No indentation, infinitely long lines (&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; ignored), but explicit new lines, i.e., &lt;code&gt;text &quot;one&quot; $$ text &quot;two&quot;&lt;/code&gt;, are respected.</source>
          <target state="translated">インデントはなく、無限に長い行（ &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; は無視されます）ですが、明示的な &lt;code&gt;text &quot;one&quot; $$ text &quot;two&quot;&lt;/code&gt; 、つまり、テキスト &quot;one&quot; $$ text &quot;two&quot;は順守されます。</target>
        </trans-unit>
        <trans-unit id="538a5adae1b6b87754931f19e7d8936b73a4e244" translate="yes" xml:space="preserve">
          <source>No indentation, infinitely long lines (&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; ignored), but explicit new lines, i.e., &lt;code&gt;text &quot;one&quot; $$ text &quot;two&quot;&lt;/code&gt;, are respected.</source>
          <target state="translated">インデントはなく、無限に長い行（ &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; は無視されます）ですが、明示的な &lt;code&gt;text &quot;one&quot; $$ text &quot;two&quot;&lt;/code&gt; 、つまり、テキスト &quot;one&quot; $$ text &quot;two&quot;は順守されます。</target>
        </trans-unit>
        <trans-unit id="cbe83843190c4d65bded786e194509b323e2b4b6" translate="yes" xml:space="preserve">
          <source>No language extension is required to use typed holes. The lexeme &amp;ldquo;&lt;code&gt;_&lt;/code&gt;&amp;rdquo; was previously illegal in Haskell, but now has a more informative error message. The lexeme &amp;ldquo;&lt;code&gt;_x&lt;/code&gt;&amp;rdquo; is a perfectly legal variable, and its behaviour is unchanged when it is in scope. For example</source>
          <target state="translated">型付きホールを使用するために言語拡張は必要ありません。語彙素「 &lt;code&gt;_&lt;/code&gt; 」は以前はHaskellでは違法でしたが、現在はより有益なエラーメッセージが含まれています。語彙素「 &lt;code&gt;_x&lt;/code&gt; 」は完全に正当な変数であり、スコープ内にあるときの動作は変わりません。例えば</target>
        </trans-unit>
        <trans-unit id="e9413c2cb6cce1148a677bc74e708c4b678606be" translate="yes" xml:space="preserve">
          <source>No longer set the special variable &lt;code&gt;it&lt;/code&gt;.</source>
          <target state="translated">特殊変数 &lt;code&gt;it&lt;/code&gt; を設定しなくなりました。</target>
        </trans-unit>
        <trans-unit id="ba52b26fd5e250674e73b63230f34aa9f35b6cbc" translate="yes" xml:space="preserve">
          <source>No permissions.</source>
          <target state="translated">パーミッションはありません。</target>
        </trans-unit>
        <trans-unit id="ed1a8e9d366a2d42a52953aa766c21a8b8f47167" translate="yes" xml:space="preserve">
          <source>No thread can be blocked indefinitely on an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; unless another thread holds that &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; indefinitely. One usual implementation of this fairness guarantee is that threads blocked on an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; are served in a first-in-first-out fashion, but this is not guaranteed in the semantics.</source>
          <target state="translated">別のスレッドが &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; を無期限に保持しない限り、 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; でスレッドを無期限にブロックすることはできません。この公平性の保証の通常の実装の1つは、 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; でブロックされたスレッドが先入れ先出し方式で提供されることですが、これはセマンティクスでは保証されません。</target>
        </trans-unit>
        <trans-unit id="e89a24f8be4016dc5286a75b757316d4b7da6b5e" translate="yes" xml:space="preserve">
          <source>No type variable has more occurrences in the constraint than in the head</source>
          <target state="translated">制約の中では、型変数が先頭よりも多く出現することはありません。</target>
        </trans-unit>
        <trans-unit id="55d4b4e7dd7bd572505570594fa8970268f4ed9d" translate="yes" xml:space="preserve">
          <source>No variable may have a levity-polymorphic type.</source>
          <target state="translated">どの変数もレヴィティポリモーフィック型を持つことはできません。</target>
        </trans-unit>
        <trans-unit id="8537ab3e90e8c51e2b9081150af774e31041f634" translate="yes" xml:space="preserve">
          <source>No: Number, Other</source>
          <target state="translated">いいえ:番号、その他</target>
        </trans-unit>
        <trans-unit id="fa97e7279198646152703496467a958452203e8b" translate="yes" xml:space="preserve">
          <source>NoBuffering</source>
          <target state="translated">NoBuffering</target>
        </trans-unit>
        <trans-unit id="187e10d0186766ac8ef38b6b2737dbcd0a0167a3" translate="yes" xml:space="preserve">
          <source>NoFlushOnInterrupt</source>
          <target state="translated">NoFlushOnInterrupt</target>
        </trans-unit>
        <trans-unit id="70c98d57d8ada0b33fa9e5d439c03bb6aa7f0530" translate="yes" xml:space="preserve">
          <source>NoGCStats</source>
          <target state="translated">NoGCStats</target>
        </trans-unit>
        <trans-unit id="e97b63987d7eba398a31aaf58656483d162d92ad" translate="yes" xml:space="preserve">
          <source>NoHeapProfiling</source>
          <target state="translated">NoHeapProfiling</target>
        </trans-unit>
        <trans-unit id="c0bb723db37af9d0e89d2d4da6bdcdd3458e352e" translate="yes" xml:space="preserve">
          <source>NoIO</source>
          <target state="translated">NoIO</target>
        </trans-unit>
        <trans-unit id="6ded8bea31740baa2d151730d57c270b35577c09" translate="yes" xml:space="preserve">
          <source>NoInline</source>
          <target state="translated">NoInline</target>
        </trans-unit>
        <trans-unit id="444ea91c7df550f94f3d747738c1f1a3466e0cc6" translate="yes" xml:space="preserve">
          <source>NoMethodError</source>
          <target state="translated">NoMethodError</target>
        </trans-unit>
        <trans-unit id="0574b23b4939ce65f86fe9caa145b7ac867f74b5" translate="yes" xml:space="preserve">
          <source>NoRep</source>
          <target state="translated">NoRep</target>
        </trans-unit>
        <trans-unit id="1f05476b651d40952a09c240ebf9fac1ee2f0ecf" translate="yes" xml:space="preserve">
          <source>NoSig</source>
          <target state="translated">NoSig</target>
        </trans-unit>
        <trans-unit id="4f1a01f2c1623f4835ba19bede7f20adf4398de2" translate="yes" xml:space="preserve">
          <source>NoSignalSpecificInfo</source>
          <target state="translated">NoSignalSpecificInfo</target>
        </trans-unit>
        <trans-unit id="3d74bf1957091d8e6ef1871b6be8c6329c5dc42a" translate="yes" xml:space="preserve">
          <source>NoSourceStrictness</source>
          <target state="translated">NoSourceStrictness</target>
        </trans-unit>
        <trans-unit id="0c2a4e95086b0b409bb4f59152de8186a4620e2e" translate="yes" xml:space="preserve">
          <source>NoSourceUnpackedness</source>
          <target state="translated">NoSourceUnpackedness</target>
        </trans-unit>
        <trans-unit id="2c12d214fa2aec0228a5d637aa7ea65cc010993a" translate="yes" xml:space="preserve">
          <source>NoSpecConstr</source>
          <target state="translated">NoSpecConstr</target>
        </trans-unit>
        <trans-unit id="c87682f274a125492ffb6e8e300878ad8dfd10c4" translate="yes" xml:space="preserve">
          <source>NoStream</source>
          <target state="translated">NoStream</target>
        </trans-unit>
        <trans-unit id="a07ff5298c0951a2189ecc18db227733a60fe41f" translate="yes" xml:space="preserve">
          <source>NoSuchThing</source>
          <target state="translated">NoSuchThing</target>
        </trans-unit>
        <trans-unit id="260f7a8cd4f6938b3cc185a619847cb83d670219" translate="yes" xml:space="preserve">
          <source>Node</source>
          <target state="translated">Node</target>
        </trans-unit>
        <trans-unit id="7b31028629115aecb301b21cc97f7edef2c73b0d" translate="yes" xml:space="preserve">
          <source>Noindex:</source>
          <target state="translated">Noindex:</target>
        </trans-unit>
        <trans-unit id="80e02bcdfb29620da030c45545609a5abf4202d6" translate="yes" xml:space="preserve">
          <source>NominalDiffTime</source>
          <target state="translated">NominalDiffTime</target>
        </trans-unit>
        <trans-unit id="abf94255694225d9e3e43eaf362134e8526f6ae7" translate="yes" xml:space="preserve">
          <source>NominalR</source>
          <target state="translated">NominalR</target>
        </trans-unit>
        <trans-unit id="037918d2c5120c9cbb587548e13bc313033ab3b2" translate="yes" xml:space="preserve">
          <source>Non-I/O exceptions are not caught by this variant; to catch all exceptions, use &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;../base-4.13.0.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;.</source>
          <target state="translated">非I / O例外は、このバリアントではキャッチされません。すべての例外を &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; 、&lt;a href=&quot;../base-4.13.0.0/control-exception&quot;&gt;Control.Exceptionの&lt;/a&gt;catchを使用します。</target>
        </trans-unit>
        <trans-unit id="20d74269687af42f4b4b46a0d3082a85e712f116" translate="yes" xml:space="preserve">
          <source>Non-I/O exceptions are not caught by this variant; to catch all exceptions, use &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;../base-4.13.0.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;.</source>
          <target state="translated">非I / O例外は、このバリアントではキャッチされません。すべての例外をキャッチするには、&lt;a href=&quot;../base-4.13.0.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;から &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="807536be49abd7e4ede9ecfbdfd745c107cf953a" translate="yes" xml:space="preserve">
          <source>Non-I/O exceptions are not caught by this variant; to catch all exceptions, use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;.</source>
          <target state="translated">Non-I/O exceptions are not caught by this variant; to catch all exceptions, use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="25418d52199dc7c513f4cee3f73d6d7310cf1f5c" translate="yes" xml:space="preserve">
          <source>Non-I/O exceptions are not caught by this variant; to catch all exceptions, use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;.</source>
          <target state="translated">Non-I/O exceptions are not caught by this variant; to catch all exceptions, use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="170135375b67e03b02c70f49ab98d2f0cdc114a4" translate="yes" xml:space="preserve">
          <source>Non-I/O exceptions are not caught by this variant; to catch all exceptions, use &lt;code&gt;&lt;a href=&quot;control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;control-exception&quot;&gt;Control.Exception&lt;/a&gt;.</source>
          <target state="translated">非I / O例外は、このバリアントではキャッチされません。すべての例外を &lt;code&gt;&lt;a href=&quot;control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; 、&lt;a href=&quot;control-exception&quot;&gt;Control.Exceptionの&lt;/a&gt;catchを使用します。</target>
        </trans-unit>
        <trans-unit id="07172365937f11c692e2378e135c9de0a6c4fc1d" translate="yes" xml:space="preserve">
          <source>Non-I/O exceptions are not caught by this variant; to catch all exceptions, use &lt;code&gt;&lt;a href=&quot;control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;control-exception&quot;&gt;Control.Exception&lt;/a&gt;.</source>
          <target state="translated">非I / O例外は、このバリアントではキャッチされません。すべての例外をキャッチするには、&lt;a href=&quot;control-exception&quot;&gt;Control.Exception&lt;/a&gt;から &lt;code&gt;&lt;a href=&quot;control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="8a175d95577964fb56cb4711f1d7a40794f1985b" translate="yes" xml:space="preserve">
          <source>Non-blocking version of &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hLock&quot;&gt;hLock&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hLock&quot;&gt;hLock&lt;/a&gt;&lt;/code&gt; の非ブロッキングバージョン。</target>
        </trans-unit>
        <trans-unit id="25aed430b07f146833188f2c98703c7e3ef2511c" translate="yes" xml:space="preserve">
          <source>Non-blocking version of &lt;code&gt;&lt;a href=&quot;ghc-io-handle-lock#v:hLock&quot;&gt;hLock&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle-lock#v:hLock&quot;&gt;hLock&lt;/a&gt;&lt;/code&gt; の非ブロッキングバージョン。</target>
        </trans-unit>
        <trans-unit id="15bf21e487b389622890a596e34f6fc7e8f358bf" translate="yes" xml:space="preserve">
          <source>Non-breaking space.</source>
          <target state="translated">壊れない空間。</target>
        </trans-unit>
        <trans-unit id="657f262735772874a296a8f71e1b1c62bf07d9a2" translate="yes" xml:space="preserve">
          <source>Non-empty (and non-strict) list type.</source>
          <target state="translated">空ではない(厳密ではない)リスト型。</target>
        </trans-unit>
        <trans-unit id="b5705ef9b6ed9ffaa0586c5a035fc344b83d2dc7" translate="yes" xml:space="preserve">
          <source>Non-empty stream transformations</source>
          <target state="translated">空でないストリーム変換</target>
        </trans-unit>
        <trans-unit id="66475509406517f2fea398ae5c038a688074d402" translate="yes" xml:space="preserve">
          <source>Non-empty, possibly infinite, multi-way trees; also known as &lt;em&gt;rose trees&lt;/em&gt;.</source>
          <target state="translated">空ではない、おそらく無限の多方向ツリー。&lt;em&gt;バラの木と&lt;/em&gt;も呼ばれ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="118fcb6b47ea6e15234cae7f675b98f3c5573c53" translate="yes" xml:space="preserve">
          <source>Non-orphan &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance only defined for &lt;code&gt;base-4.9.0.0&lt;/code&gt; and later; orphan instances for older GHCs are provided by the &lt;a href=&quot;http://hackage.haskell.org/package/semigroups&quot;&gt;semigroups&lt;/a&gt; package</source>
          <target state="translated">孤立していない &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; インスタンスは &lt;code&gt;base-4.9.0.0&lt;/code&gt; 以降でのみ定義されています。古いGHCの孤立インスタンスは、&lt;a href=&quot;http://hackage.haskell.org/package/semigroups&quot;&gt;semigroups&lt;/a&gt;パッケージによって提供されます</target>
        </trans-unit>
        <trans-unit id="32a62670f2797b774ced2a5536c4d0d7d1acb628" translate="yes" xml:space="preserve">
          <source>Non-portable (Win32 API)</source>
          <target state="translated">非移植型(Win32 API)</target>
        </trans-unit>
        <trans-unit id="de79a7eacd9c8f0b77168b00c602dc91ea05f6b2" translate="yes" xml:space="preserve">
          <source>Non-portable, host-dependent</source>
          <target state="translated">ホストに依存した非携帯型</target>
        </trans-unit>
        <trans-unit id="92677a20e8a5fd94c0d5c1b4a2da0341122cf84c" translate="yes" xml:space="preserve">
          <source>NonBlockingRead</source>
          <target state="translated">NonBlockingRead</target>
        </trans-unit>
        <trans-unit id="5b969d02f949f3f49405f19ebd47eac2c53d5a3b" translate="yes" xml:space="preserve">
          <source>NonEmpty</source>
          <target state="translated">NonEmpty</target>
        </trans-unit>
        <trans-unit id="40c6def45ece9471c76046198d964195df309603" translate="yes" xml:space="preserve">
          <source>NonSpacingMark</source>
          <target state="translated">NonSpacingMark</target>
        </trans-unit>
        <trans-unit id="b990552d62e10bbd5a741b4ac2ab3d4c18f945d9" translate="yes" xml:space="preserve">
          <source>NonTermination</source>
          <target state="translated">NonTermination</target>
        </trans-unit>
        <trans-unit id="3784bca2cdaf835e7f86ca7f9511c965f0a8c209" translate="yes" xml:space="preserve">
          <source>NondecreasingIndentation</source>
          <target state="translated">NondecreasingIndentation</target>
        </trans-unit>
        <trans-unit id="6eef6648406c333a4035cd5e60d0bf2ecf2606d7" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">None</target>
        </trans-unit>
        <trans-unit id="c599027fb1d35ffa00b3e30d51774d4325f6d3cd" translate="yes" xml:space="preserve">
          <source>None of the process-creation functions in this library wait for termination: they all return a &lt;code&gt;&lt;a href=&quot;system-process-internals#t:ProcessHandle&quot;&gt;ProcessHandle&lt;/a&gt;&lt;/code&gt; which may be used to wait for the process later.</source>
          <target state="translated">このライブラリのプロセス作成関数はどれも終了を待機しません。これらはすべて、 &lt;code&gt;&lt;a href=&quot;system-process-internals#t:ProcessHandle&quot;&gt;ProcessHandle&lt;/a&gt;&lt;/code&gt; プロセスを待機するために使用できるProcessHandleを返します。</target>
        </trans-unit>
        <trans-unit id="64d718b604b802439e898076aa4d8e2656afd5eb" translate="yes" xml:space="preserve">
          <source>None of these restrictions are enforced at compile time. Failure to heed these restrictions will lead to runtime errors that can be very difficult to track down. (The errors likely will not manifest until garbage collection happens.) In tabular form, these restrictions are:</source>
          <target state="translated">これらの制限はいずれもコンパイル時には適用されません。これらの制限を守らないと、実行時エラーが発生し、追跡するのが非常に困難になります。(エラーはガベージコレクションが発生するまで顕在化しない可能性が高いです。)表形式では、これらの制限は以下のようになっています。</target>
        </trans-unit>
        <trans-unit id="179bfbb77ce151401fc8902ad181e29e5aa72b44" translate="yes" xml:space="preserve">
          <source>None of these scenarios gives rise to an error on its own &lt;a href=&quot;#id6&quot; id=&quot;id3&quot;&gt;1&lt;/a&gt;, but they may have some interesting consequences. For instance, if you have a type &lt;code&gt;M.T&lt;/code&gt; from version 1 of package &lt;code&gt;P&lt;/code&gt;, then this is &lt;em&gt;not&lt;/em&gt; the same as the type &lt;code&gt;M.T&lt;/code&gt; from version 2 of package &lt;code&gt;P&lt;/code&gt;, and GHC will report an error if you try to use one where the other is expected.</source>
          <target state="translated">None of these scenarios gives rise to an error on its own &lt;a href=&quot;#id6&quot; id=&quot;id3&quot;&gt;1&lt;/a&gt;, but they may have some interesting consequences. For instance, if you have a type &lt;code&gt;M.T&lt;/code&gt; from version 1 of package &lt;code&gt;P&lt;/code&gt; , then this is &lt;em&gt;not&lt;/em&gt; the same as the type &lt;code&gt;M.T&lt;/code&gt; from version 2 of package &lt;code&gt;P&lt;/code&gt; , and GHC will report an error if you try to use one where the other is expected.</target>
        </trans-unit>
        <trans-unit id="7a74eb719911afcf06b21975147c785a0bc25d01" translate="yes" xml:space="preserve">
          <source>None of these scenarios gives rise to an error on its own &lt;a href=&quot;#id6&quot; id=&quot;id3&quot;&gt;[1]&lt;/a&gt;, but they may have some interesting consequences. For instance, if you have a type &lt;code&gt;M.T&lt;/code&gt; from version 1 of package &lt;code&gt;P&lt;/code&gt;, then this is &lt;em&gt;not&lt;/em&gt; the same as the type &lt;code&gt;M.T&lt;/code&gt; from version 2 of package &lt;code&gt;P&lt;/code&gt;, and GHC will report an error if you try to use one where the other is expected.</source>
          <target state="translated">これらのシナリオは、それ自体でエラーを引き起こすことはありませんが&lt;a href=&quot;#id6&quot; id=&quot;id3&quot;&gt;[1]&lt;/a&gt;、興味深い結果をもたらす可能性があります。たとえば、パッケージ &lt;code&gt;P&lt;/code&gt; のバージョン1のタイプ &lt;code&gt;M.T&lt;/code&gt; がある場合、これはパッケージ &lt;code&gt;P&lt;/code&gt; のバージョン2のタイプ &lt;code&gt;M.T&lt;/code&gt; と同じではあり&lt;em&gt;ません。&lt;/em&gt;一方が期待されている場所で一方を使用しようとすると、GHCはエラーを報告します。 。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="69de0eaa26a62ea07b1802cfb77025b19669e630" translate="yes" xml:space="preserve">
          <source>None, one or many flags: FORCE_DOWNLOAD, NEW_SESSION, LOGON_UI, PASSWORD_UI</source>
          <target state="translated">なし、1つまたは複数のフラグ。FORCE_DOWNLOAD、NEW_SESSION、LOGON_UI、PASSWORD_UI</target>
        </trans-unit>
        <trans-unit id="9a9707be07da6862114abd49d2570046d4810ca5" translate="yes" xml:space="preserve">
          <source>None.</source>
          <target state="translated">None.</target>
        </trans-unit>
        <trans-unit id="3956b2dc6672b7a8aeba865f33ebd6d3f65e6bf3" translate="yes" xml:space="preserve">
          <source>Nor this, since we can&amp;rsquo;t match the type variable &lt;code&gt;b&lt;/code&gt; with the concrete type &lt;code&gt;Int&lt;/code&gt;:</source>
          <target state="translated">これも、型変数 &lt;code&gt;b&lt;/code&gt; を具象型 &lt;code&gt;Int&lt;/code&gt; と一致させることができないためです。</target>
        </trans-unit>
        <trans-unit id="d20bdaf69fe8a19867cb42c9cdb8f5cb996bbe72" translate="yes" xml:space="preserve">
          <source>Normal GHC command-line options may also be set using &lt;a href=&quot;#ghci-cmd-:set&quot;&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/a&gt;. For example, to turn on &lt;a href=&quot;using-warnings#ghc-flag--Wmissing-signatures&quot;&gt;&lt;code&gt;-Wmissing-signatures&lt;/code&gt;&lt;/a&gt;, you would say:</source>
          <target state="translated">通常のGHCコマンドラインオプションは&lt;a href=&quot;#ghci-cmd-:set&quot;&gt; &lt;code&gt;:set&lt;/code&gt; &lt;/a&gt;を使用して設定することもできます。たとえば、&lt;a href=&quot;using-warnings#ghc-flag--Wmissing-signatures&quot;&gt; &lt;code&gt;-Wmissing-signatures&lt;/code&gt; &lt;/a&gt;をオンにするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="513df9742a975687401c53473a16fb97236fc768" translate="yes" xml:space="preserve">
          <source>Normal rendering (&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:ribbonsPerLine&quot;&gt;ribbonsPerLine&lt;/a&gt;&lt;/code&gt; respected').</source>
          <target state="translated">通常のレンダリング（ &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:ribbonsPerLine&quot;&gt;ribbonsPerLine&lt;/a&gt;&lt;/code&gt; が尊重される）。</target>
        </trans-unit>
        <trans-unit id="8783461cc620ec6206ab159d2917107156d93ac4" translate="yes" xml:space="preserve">
          <source>Normal rendering (&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:ribbonsPerLine&quot;&gt;ribbonsPerLine&lt;/a&gt;&lt;/code&gt; respected').</source>
          <target state="translated">通常のレンダリング（ &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:ribbonsPerLine&quot;&gt;ribbonsPerLine&lt;/a&gt;&lt;/code&gt; が尊重される）。</target>
        </trans-unit>
        <trans-unit id="1141a9ad4c5428e5700498684f4c71b8dcf76603" translate="yes" xml:space="preserve">
          <source>Normal rendering (&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:ribbonsPerLine&quot;&gt;ribbonsPerLine&lt;/a&gt;&lt;/code&gt; respected').</source>
          <target state="translated">通常のレンダリング（ &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:ribbonsPerLine&quot;&gt;ribbonsPerLine&lt;/a&gt;&lt;/code&gt; が尊重される）。</target>
        </trans-unit>
        <trans-unit id="22f3e78d5abb68171706a8fafe82f673d997000a" translate="yes" xml:space="preserve">
          <source>Normalise a file</source>
          <target state="translated">ファイルの正規化</target>
        </trans-unit>
        <trans-unit id="611ffe5a187425b7883a55311ee06c6a7a49d00e" translate="yes" xml:space="preserve">
          <source>Normally &lt;code&gt;GHC_PACKAGE_PATH&lt;/code&gt; replaces the default package stack. For example, all of the following commands are equivalent, creating a stack with db1 at the top followed by db2 (use &lt;code&gt;;&lt;/code&gt; instead of &lt;code&gt;:&lt;/code&gt; on Windows):</source>
          <target state="translated">通常、 &lt;code&gt;GHC_PACKAGE_PATH&lt;/code&gt; はデフォルトのパッケージスタックを置き換えます。たとえば、次のコマンドはすべて同等で、上部にdb1があり、その後にdb2が続くスタックを作成します（Windowsでは &lt;code&gt;:&lt;/code&gt; の代わりに &lt;code&gt;;&lt;/code&gt; を使用）。</target>
        </trans-unit>
        <trans-unit id="c4d28ac1c5fe75c0d62d49db7673ea2ff1f98808" translate="yes" xml:space="preserve">
          <source>Normally GHC will do a reasonable job of deciding by itself when it is a good idea to inline a function. However, sometimes you might want to override the default behaviour. For example, if you have a key function that is important to inline because it leads to further optimisations, but GHC judges it to be too big to inline.</source>
          <target state="translated">通常、GHCは関数をインライン化した方が良いかどうかを自分で判断するための合理的な仕事をしてくれます。しかし、時にはデフォルトの動作をオーバーライドしたくなることもあるでしょう。例えば、さらなる最適化につながるためインライン化することが重要な重要な関数があるが、GHCはそれをインライン化するには大きすぎると判断したとします。</target>
        </trans-unit>
        <trans-unit id="eded18b2562ae6d637501fe2701b0cdec14061a3" translate="yes" xml:space="preserve">
          <source>Normally GHCi runs the interpreted code in the same process as GHC itself, on top of the same RTS and sharing the same heap. However, if the flag &lt;a href=&quot;#ghc-flag--fexternal-interpreter&quot;&gt;&lt;code&gt;-fexternal-interpreter&lt;/code&gt;&lt;/a&gt; is given, then GHC will spawn a separate process for running interpreted code, and communicate with it using messages over a pipe.</source>
          <target state="translated">通常、GHCiは、GHC自体と同じプロセスで、同じRTSの上で同じヒープを共有して、インタープリターコードを実行します。ただし、フラグ&lt;a href=&quot;#ghc-flag--fexternal-interpreter&quot;&gt; &lt;code&gt;-fexternal-interpreter&lt;/code&gt; &lt;/a&gt;が指定されている場合、GHCはインタープリターコードを実行するための個別のプロセスを生成し、パイプを介したメッセージを使用してそれと通信します。</target>
        </trans-unit>
        <trans-unit id="c241ae0454c5e6b2d8549ed450bb4a03abf609b0" translate="yes" xml:space="preserve">
          <source>Normally a profile is limited to 20 bands with additional identifiers being grouped into an &lt;code&gt;OTHER&lt;/code&gt; band. The &lt;code&gt;-l&lt;/code&gt; flag removes this 20 band and limit, producing as many bands as necessary. No key is produced as it won&amp;rsquo;t fit!. It is useful for creation time profiles with many bands.</source>
          <target state="translated">通常、プロファイルは20バンドに制限され、追加の識別子が &lt;code&gt;OTHER&lt;/code&gt; バンドにグループ化されます。 &lt;code&gt;-l&lt;/code&gt; フラグは、必要な数のバンドとして生成し、この20バンドと制限を取り除きます。適合しないため、キーは生成されません！。多くのバンドを持つ時間プロファイルの作成に役立ちます。</target>
        </trans-unit>
        <trans-unit id="64c59b3d2432ce6c3b8d68909de92442ecb84597" translate="yes" xml:space="preserve">
          <source>Normally a profile is limited to 20 bands with additional identifiers being grouped into an &lt;code&gt;OTHER&lt;/code&gt; band. The &lt;code&gt;-m&lt;/code&gt; flag specifies an alternative band limit (the maximum is 20).</source>
          <target state="translated">通常、プロファイルは20バンドに制限され、追加の識別子が &lt;code&gt;OTHER&lt;/code&gt; バンドにグループ化されます。 &lt;code&gt;-m&lt;/code&gt; フラグは、別の帯域制限を（最大20）を指定します。</target>
        </trans-unit>
        <trans-unit id="558fdf57db5511e0c5ebfaa119295e9295b0c4b3" translate="yes" xml:space="preserve">
          <source>Normally pre-compiled code for a module will be loaded if available, or otherwise the module will be compiled to byte-code. Using the &lt;code&gt;*&lt;/code&gt; prefix forces a module to be loaded as byte-code.</source>
          <target state="translated">通常、モジュールの事前にコンパイルされたコードが利用可能な場合は読み込まれます。そうでない場合、モジュールはバイトコードにコンパイルされます。 &lt;code&gt;*&lt;/code&gt; 接頭辞を使用すると、モジュールがバイトコードとしてロードされます。</target>
        </trans-unit>
        <trans-unit id="ecdcacb1582613bd12eb621f5b461a7931c33bbc" translate="yes" xml:space="preserve">
          <source>Normally there is no fixed relationship between Haskell threads and OS threads. This means that when you make a foreign call, that call may take place in an unspecified OS thread. Furthermore, there is no guarantee that multiple calls made by one Haskell thread will be made by the same OS thread.</source>
          <target state="translated">通常、HaskellスレッドとOSスレッドの間には固定の関係はありません。つまり、外部からの呼び出しを行うと、その呼び出しは不特定のOSスレッドで行われる可能性があるということです。さらに、1つのHaskellスレッドで行われた複数の呼び出しが、同じOSスレッドで行われるという保証はありません。</target>
        </trans-unit>
        <trans-unit id="937628f8a7dc9eb81b2263a9e21be33c5aea1828" translate="yes" xml:space="preserve">
          <source>Normally trace elements which sum to a total of less than 1% of the profile are removed from the profile. The &lt;code&gt;-t&lt;/code&gt; option allows this percentage to be modified (maximum 5%).</source>
          <target state="translated">通常、合計でプロファイルの1％未満になる微量元素はプロファイルから削除されます。 &lt;code&gt;-t&lt;/code&gt; オプションは、（最大5％）は、この割合は変更することを可能にします。</target>
        </trans-unit>
        <trans-unit id="4d52c3563db7da009beb065365791027b03554cf" translate="yes" xml:space="preserve">
          <source>Normally ⟨x⟩ should be chosen to match the number of CPU cores on the machine &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;. For example, on a dual-core machine we would probably use &lt;code&gt;+RTS -N2 -RTS&lt;/code&gt;.</source>
          <target state="translated">Normally ⟨x⟩ should be chosen to match the number of CPU cores on the machine &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;. For example, on a dual-core machine we would probably use &lt;code&gt;+RTS -N2 -RTS&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d1424cc5421e827770c2528e2d213a27497f17fe" translate="yes" xml:space="preserve">
          <source>Normally ⟨x⟩ should be chosen to match the number of CPU cores on the machine &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;. For example, on a dual-core machine we would probably use &lt;code&gt;+RTS -N2 -RTS&lt;/code&gt;.</source>
          <target state="translated">通常、「x」は、マシンのCPUコアの数と一致するように選択する必要があります&lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;。たとえば、デュアル &lt;code&gt;+RTS -N2 -RTS&lt;/code&gt; は、おそらく+ RTS -N2 -RTSを使用します。</target>
        </trans-unit>
        <trans-unit id="adae5b8f3d2301963310d04fce57a7e110596baf" translate="yes" xml:space="preserve">
          <source>Normally, &lt;code&gt;hp2ps&lt;/code&gt; puts the title of the graph in a small box at the top of the page. However, if the JOB string is too long to fit in a small box (more than 35 characters), then &lt;code&gt;hp2ps&lt;/code&gt; will choose to use a big box instead. The &lt;code&gt;-b&lt;/code&gt; option forces &lt;code&gt;hp2ps&lt;/code&gt; to use a big box.</source>
          <target state="translated">通常、 &lt;code&gt;hp2ps&lt;/code&gt; はグラフのタイトルをページ上部の小さなボックスに配置します。ただし、JOB文字列が長すぎて小さなボックス（35文字を超える）に収まらない場合、 &lt;code&gt;hp2ps&lt;/code&gt; は代わりに大きなボックスを使用することを選択します。 &lt;code&gt;-b&lt;/code&gt; オプション軍 &lt;code&gt;hp2ps&lt;/code&gt; 大きな箱を使用します。</target>
        </trans-unit>
        <trans-unit id="c386c8961f160187b7f41a883437a0e96c21de44" translate="yes" xml:space="preserve">
          <source>Normally, &lt;em&gt;constraints&lt;/em&gt; (which appear in types to the left of the &lt;code&gt;=&amp;gt;&lt;/code&gt; arrow) have a very restricted syntax. They can only be:</source>
          <target state="translated">通常、&lt;em&gt;制約&lt;/em&gt;（ &lt;code&gt;=&amp;gt;&lt;/code&gt; 矢印の左側にあるタイプで表示されます）の構文は非常に制限されています。次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="5f3b656a0be36fb8e60655756fc57d49ccf589ac" translate="yes" xml:space="preserve">
          <source>Normally, GHC&amp;rsquo;s runtime system provides a &lt;code&gt;main()&lt;/code&gt;, which arranges to invoke &lt;code&gt;Main.main&lt;/code&gt; in the Haskell program. However, you might want to link some Haskell code into a program which has a main function written in another language, say C. In order to do this, you have to initialize the Haskell runtime system explicitly.</source>
          <target state="translated">通常、GHCのランタイムシステムは、Haskellプログラムで &lt;code&gt;Main.main&lt;/code&gt; を呼び出すように調整する &lt;code&gt;main()&lt;/code&gt; を提供します。ただし、一部のHaskellコードを、メイン関数が別の言語（Cなど）で記述されたプログラムにリンクしたい場合があります。これを行うには、Haskellランタイムシステムを明示的に初期化する必要があります。</target>
        </trans-unit>
        <trans-unit id="b5878d2676aa27f57a51768346833740d2d73c3e" translate="yes" xml:space="preserve">
          <source>Normally, a permutation parser is first build with special operators like (&lt;code&gt;&lt;a href=&quot;text-parsec-perm#v:-60--124--124--62-&quot;&gt;&amp;lt;||&amp;gt;&lt;/a&gt;&lt;/code&gt;) and than transformed into a normal parser using &lt;code&gt;&lt;a href=&quot;text-parsec-perm#v:permute&quot;&gt;permute&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">通常、順列パーサーはまず（ &lt;code&gt;&lt;a href=&quot;text-parsec-perm#v:-60--124--124--62-&quot;&gt;&amp;lt;||&amp;gt;&lt;/a&gt;&lt;/code&gt; ）のような特別な演算子で構築され、 &lt;code&gt;&lt;a href=&quot;text-parsec-perm#v:permute&quot;&gt;permute&lt;/a&gt;&lt;/code&gt; を使用して通常のパーサーに変換されます。</target>
        </trans-unit>
        <trans-unit id="be63fc241b13b25bbbfbb8119202738448bc7f25" translate="yes" xml:space="preserve">
          <source>Normally, any evaluation of top-level expressions (otherwise known as CAFs or Constant Applicative Forms) in loaded modules is retained between evaluations. Turning on &lt;code&gt;+r&lt;/code&gt; causes all evaluation of top-level expressions to be discarded after each evaluation (they are still retained &lt;em&gt;during&lt;/em&gt; a single evaluation).</source>
          <target state="translated">通常、ロードされたモジュール内のトップレベル式（別名CAFまたは定数アプリケーションフォーム）の評価は、評価間で保持されます。 &lt;code&gt;+r&lt;/code&gt; をオンにすると、トップレベルの式のすべての評価が、各評価の後に破棄されます（それらは、単一の評価&lt;em&gt;中&lt;/em&gt;も保持さ&lt;em&gt;れ&lt;/em&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="cd32d0c154484c3ec18509a839994848298d2636" translate="yes" xml:space="preserve">
          <source>Normally, setting the &lt;a href=&quot;#rts-flag--V%20%E2%9F%A8secs%E2%9F%A9&quot;&gt;&lt;code&gt;-V ⟨secs⟩&lt;/code&gt;&lt;/a&gt; option directly is not necessary: the resolution of the RTS timer is adjusted automatically if a short interval is requested with the &lt;code&gt;-C ⟨s⟩&lt;/code&gt; or &lt;a href=&quot;#rts-flag--i%20%E2%9F%A8secs%E2%9F%A9&quot;&gt;&lt;code&gt;-i
⟨secs⟩&lt;/code&gt;&lt;/a&gt; options. However, setting &lt;a href=&quot;#rts-flag--V%20%E2%9F%A8secs%E2%9F%A9&quot;&gt;&lt;code&gt;-V ⟨secs⟩&lt;/code&gt;&lt;/a&gt; is required in order to increase the resolution of the time profiler.</source>
          <target state="translated">通常、&lt;a href=&quot;#rts-flag--V%20%E2%9F%A8secs%E2%9F%A9&quot;&gt; &lt;code&gt;-V ⟨secs⟩&lt;/code&gt; &lt;/a&gt;オプションを直接設定する必要はありません。RTSタイマーの分解能は、 &lt;code&gt;-C ⟨s⟩&lt;/code&gt; または&lt;a href=&quot;#rts-flag--i%20%E2%9F%A8secs%E2%9F%A9&quot;&gt; &lt;code&gt;-i ⟨secs⟩&lt;/code&gt; &lt;/a&gt;オプションで短い間隔が要求された場合に自動的に調整されます。ただし、時間プロファイラーの分解能を上げるには、&lt;a href=&quot;#rts-flag--V%20%E2%9F%A8secs%E2%9F%A9&quot;&gt; &lt;code&gt;-V ⟨secs⟩&lt;/code&gt; &lt;/a&gt;」を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="ca1dd39379254ab3f3c73dbffb0d03d628b27d20" translate="yes" xml:space="preserve">
          <source>Not</source>
          <target state="translated">Not</target>
        </trans-unit>
        <trans-unit id="78ccb4fb66097bf7ec98982f1e04cc05bbdcec21" translate="yes" xml:space="preserve">
          <source>Not all subexpressions are potential breakpoint locations. Single variables are typically not considered to be breakpoint locations (unless the variable is the right-hand-side of a function definition, lambda, or case alternative). The rule of thumb is that all redexes are breakpoint locations, together with the bodies of functions, lambdas, case alternatives and binding statements. There is normally no breakpoint on a let expression, but there will always be a breakpoint on its body, because we are usually interested in inspecting the values of the variables bound by the let.</source>
          <target state="translated">すべての式がブレークポイントの位置になるわけではありません。単一の変数は通常、ブレークポイントの場所とはみなされません(変数が関数定義、ラムダ、大文字小文字の代替の右側にある場合を除く)。経験則としては、すべての redexes は、関数本体、ラムダ、大文字小文字の代替、バインディング文とともに、ブレークポイントの位置となります。通常、let式にはブレークポイントはありませんが、その本体には常にブレークポイントがあります。</target>
        </trans-unit>
        <trans-unit id="4ab7fbf9aa0be7d87015cd3b43f6141b9208bf3f" translate="yes" xml:space="preserve">
          <source>Not all systems support &lt;code&gt;utimensat&lt;/code&gt;, in which case the function can only emulate the behavior by reading the access time and then setting both the access and modification times together. On systems where &lt;code&gt;utimensat&lt;/code&gt; is supported, the modification time is set atomically with nanosecond precision.</source>
          <target state="translated">すべてのシステムが &lt;code&gt;utimensat&lt;/code&gt; をサポートしているわけではありません。その場合、関数はアクセス時間を読み取り、アクセス時間と変更時間の両方を一緒に設定することによってのみ動作をエミュレートできます。 &lt;code&gt;utimensat&lt;/code&gt; がサポートされているシステムでは、変更時刻はナノ秒の精度でアトミックに設定されます。</target>
        </trans-unit>
        <trans-unit id="fa0085970940cf874c9d2594cf9d4dd7a8d8194f" translate="yes" xml:space="preserve">
          <source>Not all systems support &lt;code&gt;utimensat&lt;/code&gt;, in which case the function can only emulate the behavior by reading the modification time and then setting both the access and modification times together. On systems where &lt;code&gt;utimensat&lt;/code&gt; is supported, the access time is set atomically with nanosecond precision.</source>
          <target state="translated">すべてのシステムが &lt;code&gt;utimensat&lt;/code&gt; をサポートしているわけではありません。その場合、関数は変更時間を読み取り、アクセス時間と変更時間の両方を一緒に設定することによってのみ動作をエミュレートできます。 &lt;code&gt;utimensat&lt;/code&gt; がサポートされているシステムでは、アクセス時間はナノ秒の精度でアトミックに設定されます。</target>
        </trans-unit>
        <trans-unit id="b2afb94fa1ad8b2117ab0fcdb5aa0be0a87a1018" translate="yes" xml:space="preserve">
          <source>Not combined (tricky):</source>
          <target state="translated">合体していない(トリッキー)。</target>
        </trans-unit>
        <trans-unit id="c0dd126e18fca943161e0d20a36b21e212c3c99b" translate="yes" xml:space="preserve">
          <source>Not combined:</source>
          <target state="translated">合体していない。</target>
        </trans-unit>
        <trans-unit id="78133acc4cfff50b8f073295fd4a15e10edaae9e" translate="yes" xml:space="preserve">
          <source>Not every index within the bounds of the array need appear in the association list, but the values associated with indices that do not appear will be undefined (i.e. bottom).</source>
          <target state="translated">配列の範囲内のすべてのインデックスがアソシエーションリストに表示される必要はありませんが、表示されないインデックスに関連付けられた値は未定義になります(つまり、ボトム)。</target>
        </trans-unit>
        <trans-unit id="a5c24f03828759592657815b91d4e8eac318fcb9" translate="yes" xml:space="preserve">
          <source>Not every index within the bounds of the array need appear in the association list, but the values associated with indices that do not appear will be undefined.</source>
          <target state="translated">配列の範囲内のすべてのインデックスがアソシエーションリストに表示される必要はありませんが、表示されないインデックスに関連付けられた値は未定義になります。</target>
        </trans-unit>
        <trans-unit id="b8634acd7e6ee3c03ecde3208f3a307f2f045508" translate="yes" xml:space="preserve">
          <source>Not only do we now know the type of &lt;code&gt;left&lt;/code&gt;, but all the other partial types have also been resolved. So we can ask for the value of &lt;code&gt;a&lt;/code&gt;, for example:</source>
          <target state="translated">これで、 &lt;code&gt;left&lt;/code&gt; のタイプがわかっただけでなく、他のすべての部分タイプも解決されました。だから我々は、の値を求めることができますたとえば、： &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4035b9c2b5847ce2b4b7d233cc698ae5fa143ff0" translate="yes" xml:space="preserve">
          <source>Not-equal predicate.</source>
          <target state="translated">非等価な述語。</target>
        </trans-unit>
        <trans-unit id="122fe604627a6b3c6c7479e2e3d9b217a06c8a81" translate="yes" xml:space="preserve">
          <source>NotAssigned</source>
          <target state="translated">NotAssigned</target>
        </trans-unit>
        <trans-unit id="029164befa1985fe4c7c950daf75d5070657a309" translate="yes" xml:space="preserve">
          <source>NotAssociative</source>
          <target state="translated">NotAssociative</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="54ab9353b38cfd8cfc741410b64bcd8b4ace3d86" translate="yes" xml:space="preserve">
          <source>Note also that the following declaration is not allowed, even by itself:</source>
          <target state="translated">また、以下のような宣言は、それ自体であっても許されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="e14be39fd5d5beacf8aca731e7b645e488e01620" translate="yes" xml:space="preserve">
          <source>Note also the following points</source>
          <target state="translated">また、以下の点にも注意してください。</target>
        </trans-unit>
        <trans-unit id="e391e16c3d6dadad7a54ff544e2321aabfc38d3d" translate="yes" xml:space="preserve">
          <source>Note also the inter-module dependencies at the end of the Makefile, which take the form</source>
          <target state="translated">Makefile の最後にあるモジュール間の依存関係にも注意してください。</target>
        </trans-unit>
        <trans-unit id="0f69bf791521771e7eed4606436969fb2e27e8cf" translate="yes" xml:space="preserve">
          <source>Note how this operator resembles function composition &lt;code&gt;(&lt;a href=&quot;../base-4.13.0.0/data-function#v:.&quot;&gt;.&lt;/a&gt;)&lt;/code&gt;:</source>
          <target state="translated">この演算子は関数合成に似ている方法に注意してください &lt;code&gt;(&lt;a href=&quot;../base-4.13.0.0/data-function#v:.&quot;&gt;.&lt;/a&gt;)&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c5d2df4cb0a27c46da53e1c8dd36d7ee084e8ccd" translate="yes" xml:space="preserve">
          <source>Note how this operator resembles function composition &lt;code&gt;(&lt;a href=&quot;../base-4.14.1.0/data-function#v:.&quot;&gt;.&lt;/a&gt;)&lt;/code&gt;:</source>
          <target state="translated">Note how this operator resembles function composition &lt;code&gt;(&lt;a href=&quot;../base-4.14.1.0/data-function#v:.&quot;&gt;.&lt;/a&gt;)&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="58c74ad1a011259a6e943fb74b3e3c3c2695a3b0" translate="yes" xml:space="preserve">
          <source>Note how this operator resembles function composition &lt;code&gt;(&lt;a href=&quot;data-function#v:.&quot;&gt;.&lt;/a&gt;)&lt;/code&gt;:</source>
          <target state="translated">この演算子は関数合成に似ている方法に注意してください &lt;code&gt;(&lt;a href=&quot;data-function#v:.&quot;&gt;.&lt;/a&gt;)&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="9feb1e502abb28d277cb1a7670feb6125b53c153" translate="yes" xml:space="preserve">
          <source>Note how we can define a uniform instance for &lt;code&gt;&lt;a href=&quot;ghc-generics#t:M1&quot;&gt;M1&lt;/a&gt;&lt;/code&gt;, because we completely disregard all meta-information:</source>
          <target state="translated">すべてのメタ情報を完全に無視するため、 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:M1&quot;&gt;M1&lt;/a&gt;&lt;/code&gt; の統一インスタンスをどのように定義できるかに注意してください。</target>
        </trans-unit>
        <trans-unit id="45519c1953b86b55e65ecc080a301283fb324351" translate="yes" xml:space="preserve">
          <source>Note how we write an initial tag byte to indicate each variant of the data type.</source>
          <target state="translated">データ型の各バリアントを示すために、初期タグバイトをどのように書くかに注意してください。</target>
        </trans-unit>
        <trans-unit id="c9cb756c35baef541318a2fa53e969cf959a31f5" translate="yes" xml:space="preserve">
          <source>Note in particular that the main program thread (the thread running &lt;code&gt;Main.main&lt;/code&gt;) is always a bound thread, so for good concurrency performance you should ensure that the main thread is not doing repeated communication with other threads in the system. Typically this means forking subthreads to do the work using &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;, and waiting for the results in the main thread.</source>
          <target state="translated">特に、メインプログラムスレッド（ &lt;code&gt;Main.main&lt;/code&gt; を実行しているスレッド）は常にバインドされたスレッドであるため、同時実行性を高めるには、メインスレッドがシステム内の他のスレッドと繰り返し通信しないようにする必要があります。通常、この手段が使用して仕事をするためにサブスレッドをフォーク &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; を、メインスレッドで結果を待っています。</target>
        </trans-unit>
        <trans-unit id="31f3f6f5adc996e06ed48014b2b93cc6d3ecc2dc" translate="yes" xml:space="preserve">
          <source>Note in particular that the translation for a &lt;code&gt;rec&lt;/code&gt; block only involves wrapping a call to &lt;code&gt;mfix&lt;/code&gt;: it performs no other analysis on the bindings. The latter is the task for the &lt;code&gt;mdo&lt;/code&gt; notation, which is described next.</source>
          <target state="translated">特に、 &lt;code&gt;rec&lt;/code&gt; ブロックの変換には &lt;code&gt;mfix&lt;/code&gt; の呼び出しのラップのみが含まれることに注意してください。これは、バインディングに対して他の分析を実行しません。後者は、次に説明する &lt;code&gt;mdo&lt;/code&gt; 表記のタスクです。</target>
        </trans-unit>
        <trans-unit id="3639d52b7d40ee212b47bb683d401fdb19f2b8d7" translate="yes" xml:space="preserve">
          <source>Note on rewrite rules:</source>
          <target state="translated">書き換えルールについての注意点</target>
        </trans-unit>
        <trans-unit id="da7038b6159ab37164aeb7442907c881108aff7e" translate="yes" xml:space="preserve">
          <source>Note that</source>
          <target state="translated">以下のことに注意してください。</target>
        </trans-unit>
        <trans-unit id="041e17d2804b0af5a76a5a97a0bba4a277288826" translate="yes" xml:space="preserve">
          <source>Note that 0 &amp;lt;= &lt;code&gt;&lt;a href=&quot;data-time-localtime#v:todSec&quot;&gt;todSec&lt;/a&gt;&lt;/code&gt; &amp;lt; 61, accomodating leap seconds. Any local minute may have a leap second, since leap seconds happen in all zones simultaneously</source>
          <target state="translated">うるう秒に &lt;code&gt;&lt;a href=&quot;data-time-localtime#v:todSec&quot;&gt;todSec&lt;/a&gt;&lt;/code&gt; する0 &amp;lt;= todSec &amp;lt;61であることに注意してください。うるう秒はすべてのゾーンで同時に発生するため、ローカルの分にはうるう秒がある場合があります。</target>
        </trans-unit>
        <trans-unit id="4fc3cfabe43b8bcfa1705a3dbc018667744dc410" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#extension-DerivingVia&quot;&gt;&lt;code&gt;DerivingVia&lt;/code&gt;&lt;/a&gt; (see &lt;a href=&quot;#deriving-via&quot;&gt;Deriving via&lt;/a&gt;) uses essentially the same specification to derive instances of associated type families as well (except that it uses the &lt;code&gt;via&lt;/code&gt; type instead of the underlying &lt;code&gt;rep-type&lt;/code&gt; of a newtype).</source>
          <target state="translated">&lt;a href=&quot;#extension-DerivingVia&quot;&gt; &lt;code&gt;DerivingVia&lt;/code&gt; &lt;/a&gt;（「&lt;a href=&quot;#deriving-via&quot;&gt;Deriving via&lt;/a&gt;」を参照）は、基本的に同じ仕様を使用して、関連するタイプファミリーのインスタンスも派生させることに注意してください（ただし、newtypeの基になる &lt;code&gt;rep-type&lt;/code&gt; の代わりに &lt;code&gt;via&lt;/code&gt; タイプを使用します）。</target>
        </trans-unit>
        <trans-unit id="20cfa8d6154c21f756b99008f5e887fb998ca694" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#ghc-flag--Wunused-matches&quot;&gt;&lt;code&gt;-Wunused-matches&lt;/code&gt;&lt;/a&gt; does not warn about variables which arise from type-level patterns, as found in type family and data family instances. This must be enabled separately through the &lt;a href=&quot;#ghc-flag--Wunused-type-patterns&quot;&gt;&lt;code&gt;-Wunused-type-patterns&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--Wunused-matches&quot;&gt; &lt;code&gt;-Wunused-matches&lt;/code&gt; &lt;/a&gt;は、タイプファミリーおよびデータファミリーのインスタンスに見られるような、タイプレベルのパターンから生じる変数について警告しないことに注意してください。これは、&lt;a href=&quot;#ghc-flag--Wunused-type-patterns&quot;&gt; &lt;code&gt;-Wunused-type-patterns&lt;/code&gt; &lt;/a&gt;フラグを使用して個別に有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="a0394f5adfc4a1a13e3b86c72f2c51c040f42596" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#rts-flag---nonmoving-gc&quot;&gt;&lt;code&gt;--nonmoving-gc&lt;/code&gt;&lt;/a&gt; cannot be used with &lt;code&gt;-G1&lt;/code&gt;, &lt;a href=&quot;profiling#rts-flag--hc&quot;&gt;&lt;code&gt;profiling&lt;/code&gt;&lt;/a&gt; nor &lt;a href=&quot;#rts-flag--c&quot;&gt;&lt;code&gt;-c&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Note that &lt;a href=&quot;#rts-flag---nonmoving-gc&quot;&gt; &lt;code&gt;--nonmoving-gc&lt;/code&gt; &lt;/a&gt; cannot be used with &lt;code&gt;-G1&lt;/code&gt; , &lt;a href=&quot;profiling#rts-flag--hc&quot;&gt; &lt;code&gt;profiling&lt;/code&gt; &lt;/a&gt; nor &lt;a href=&quot;#rts-flag--c&quot;&gt; &lt;code&gt;-c&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="bf7f360a57aee7e3f0b50c89a317cf8b42dfa6db" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;(&lt;a href=&quot;data-function#v:-36-&quot;&gt;$&lt;/a&gt;)&lt;/code&gt; is levity-polymorphic in its result type, so that &lt;code&gt;foo &lt;a href=&quot;data-function#v:-36-&quot;&gt;$&lt;/a&gt; True&lt;/code&gt; where &lt;code&gt;foo :: Bool -&amp;gt; Int#&lt;/code&gt; is well-typed.</source>
          <target state="translated">&lt;code&gt;(&lt;a href=&quot;data-function#v:-36-&quot;&gt;$&lt;/a&gt;)&lt;/code&gt; は、その結果の型がlevity-polymorphicであるため、 &lt;code&gt;foo &lt;a href=&quot;data-function#v:-36-&quot;&gt;$&lt;/a&gt; True&lt;/code&gt; where &lt;code&gt;foo :: Bool -&amp;gt; Int#&lt;/code&gt; Bool- &amp;gt; Int＃が適切に型指定されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="50352b9744490cab4f40a77337fe0f29b0ce0106" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;(&lt;a href=&quot;ghc-base#v:-36-&quot;&gt;$&lt;/a&gt;)&lt;/code&gt; is levity-polymorphic in its result type, so that &lt;code&gt;foo &lt;a href=&quot;ghc-base#v:-36-&quot;&gt;$&lt;/a&gt; True&lt;/code&gt; where &lt;code&gt;foo :: Bool -&amp;gt; Int#&lt;/code&gt; is well-typed.</source>
          <target state="translated">&lt;code&gt;(&lt;a href=&quot;ghc-base#v:-36-&quot;&gt;$&lt;/a&gt;)&lt;/code&gt; は、その結果の型がlevity-polymorphicであるため、 &lt;code&gt;foo &lt;a href=&quot;ghc-base#v:-36-&quot;&gt;$&lt;/a&gt; True&lt;/code&gt; where &lt;code&gt;foo :: Bool -&amp;gt; Int#&lt;/code&gt; Bool- &amp;gt; Int＃が適切に型指定されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e8b2b6839b756e03ca674d6cc20259793fba403d" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;(&lt;a href=&quot;prelude#v:-36-&quot;&gt;$&lt;/a&gt;)&lt;/code&gt; is levity-polymorphic in its result type, so that &lt;code&gt;foo &lt;a href=&quot;prelude#v:-36-&quot;&gt;$&lt;/a&gt; True&lt;/code&gt; where &lt;code&gt;foo :: Bool -&amp;gt; Int#&lt;/code&gt; is well-typed.</source>
          <target state="translated">&lt;code&gt;(&lt;a href=&quot;prelude#v:-36-&quot;&gt;$&lt;/a&gt;)&lt;/code&gt; は、その結果の型がlevity-polymorphicであるため、 &lt;code&gt;foo &lt;a href=&quot;prelude#v:-36-&quot;&gt;$&lt;/a&gt; True&lt;/code&gt; where &lt;code&gt;foo :: Bool -&amp;gt; Int#&lt;/code&gt; Bool- &amp;gt; Int＃が適切に型指定されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="123d4fdb08ddd5f13ffc17d9c9b8108ebcc613a2" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;(RunIO return)&lt;/code&gt; is an incorrect implementation, since it does not separate the pure and impure parts of the monadic action. This module defines implementations for several common monad transformers.</source>
          <target state="translated">&lt;code&gt;(RunIO return)&lt;/code&gt; はモナディックアクションの純粋な部分と不純な部分を分離しないため、不正な実装であることに注意してください。このモジュールは、いくつかの一般的なモナド変換子の実装を定義します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
