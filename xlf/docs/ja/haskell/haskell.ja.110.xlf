<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="haskell">
    <body>
      <group id="haskell">
        <trans-unit id="90b5d11de357d4d026169517972bc20fb4c73559" translate="yes" xml:space="preserve">
          <source>Milli</source>
          <target state="translated">Milli</target>
        </trans-unit>
        <trans-unit id="7eb0cee888ab55b559592d38eec027e9118d7d35" translate="yes" xml:space="preserve">
          <source>Min</source>
          <target state="translated">Min</target>
        </trans-unit>
        <trans-unit id="2afa51042312a9e6905578605fd22a3a6cf486b0" translate="yes" xml:space="preserve">
          <source>Min/Max</source>
          <target state="translated">Min/Max</target>
        </trans-unit>
        <trans-unit id="e4a689975026b0f86f50d77f497034f70d01b4fa" translate="yes" xml:space="preserve">
          <source>Minimal complete definition</source>
          <target state="translated">最小限の完全定義</target>
        </trans-unit>
        <trans-unit id="ac6d77ddd397a6c5eefaab2dc1cbd2ec7a9c37eb" translate="yes" xml:space="preserve">
          <source>Minimal complete definition: &lt;code&gt;&lt;a href=&quot;control-monad-error#v:noMsg&quot;&gt;noMsg&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;control-monad-error#v:strMsg&quot;&gt;strMsg&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">最小限の完全な定義： &lt;code&gt;&lt;a href=&quot;control-monad-error#v:noMsg&quot;&gt;noMsg&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;control-monad-error#v:strMsg&quot;&gt;strMsg&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="665f3b3bb2b72327a6fd69442668299a386cb99c" translate="yes" xml:space="preserve">
          <source>Minimal complete definition: &lt;code&gt;&lt;a href=&quot;control-monad-error-class#v:noMsg&quot;&gt;noMsg&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;control-monad-error-class#v:strMsg&quot;&gt;strMsg&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">最小限の完全な定義： &lt;code&gt;&lt;a href=&quot;control-monad-error-class#v:noMsg&quot;&gt;noMsg&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;control-monad-error-class#v:strMsg&quot;&gt;strMsg&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ab7e52c60d681dae189f8720979ee422a3d05064" translate="yes" xml:space="preserve">
          <source>Minimal complete definition: &lt;code&gt;&lt;a href=&quot;control-monad-trans-error#v:noMsg&quot;&gt;noMsg&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;control-monad-trans-error#v:strMsg&quot;&gt;strMsg&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">最小限の完全な定義： &lt;code&gt;&lt;a href=&quot;control-monad-trans-error#v:noMsg&quot;&gt;noMsg&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;control-monad-trans-error#v:strMsg&quot;&gt;strMsg&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7fd6feae02a9278c6dea240fd40b8aeb536aa561" translate="yes" xml:space="preserve">
          <source>Minimal complete definition: either &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-eq#v:-47--61-&quot;&gt;/=&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">最小限の完全な定義： &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-eq#v:-47--61-&quot;&gt;/=&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f44945409c6023d19bee5e3d0ed6a60092084206" translate="yes" xml:space="preserve">
          <source>Minimal complete definition: either &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-ord#v:-60--61-&quot;&gt;&amp;lt;=&lt;/a&gt;&lt;/code&gt;. Using &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; can be more efficient for complex types.</source>
          <target state="translated">最小限の完全な定義： &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-ord#v:-60--61-&quot;&gt;&amp;lt;=&lt;/a&gt;&lt;/code&gt; 。複合型の場合、 &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; を使用するとより効率的です。</target>
        </trans-unit>
        <trans-unit id="af209dc37f96b74f9773c4c4d607b8e40fe1baaf" translate="yes" xml:space="preserve">
          <source>Minimal complete definition: either &lt;code&gt;&lt;a href=&quot;prelude#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;prelude#v:-47--61-&quot;&gt;/=&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">最小限の完全な定義： &lt;code&gt;&lt;a href=&quot;prelude#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;prelude#v:-47--61-&quot;&gt;/=&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7953d2f2689ba6cdd1d813d83ee82da633d40079" translate="yes" xml:space="preserve">
          <source>Minimal complete definition: either &lt;code&gt;&lt;a href=&quot;prelude#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;prelude#v:-60--61-&quot;&gt;&amp;lt;=&lt;/a&gt;&lt;/code&gt;. Using &lt;code&gt;&lt;a href=&quot;prelude#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; can be more efficient for complex types.</source>
          <target state="translated">最小限の完全な定義： &lt;code&gt;&lt;a href=&quot;prelude#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;prelude#v:-60--61-&quot;&gt;&amp;lt;=&lt;/a&gt;&lt;/code&gt; 。複合型の場合、 &lt;code&gt;&lt;a href=&quot;prelude#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; を使用するとより効率的です。</target>
        </trans-unit>
        <trans-unit id="8799ac72cc46a81952dd429d7c4af0260005305d" translate="yes" xml:space="preserve">
          <source>Minimal definition is either both of &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;put&lt;/code&gt; or just &lt;code&gt;state&lt;/code&gt;</source>
          <target state="translated">最小限の定義は、 &lt;code&gt;get&lt;/code&gt; と &lt;code&gt;put&lt;/code&gt; 両方、または単に &lt;code&gt;state&lt;/code&gt; いずれかです。</target>
        </trans-unit>
        <trans-unit id="af4f6aa56d4f948a03f18d3a1d4d1605a2212012" translate="yes" xml:space="preserve">
          <source>Minimal size of next &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BufferRange&quot;&gt;BufferRange&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">次の &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BufferRange&quot;&gt;BufferRange&lt;/a&gt;&lt;/code&gt; の最小サイズ。</target>
        </trans-unit>
        <trans-unit id="36461254172845cccb18d0bf80dba5e9c41d913e" translate="yes" xml:space="preserve">
          <source>Minimal verbosity: print one line per compilation (this is the default when &lt;a href=&quot;#ghc-flag---make&quot;&gt;&lt;code&gt;--make&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ghc-flag---interactive&quot;&gt;&lt;code&gt;--interactive&lt;/code&gt;&lt;/a&gt; is on).</source>
          <target state="translated">最小限の冗長性：コンパイルごとに1行を出力します（これは&lt;a href=&quot;#ghc-flag---make&quot;&gt; &lt;code&gt;--make&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#ghc-flag---interactive&quot;&gt; &lt;code&gt;--interactive&lt;/code&gt; &lt;/a&gt;がオンの場合のデフォルトです）。</target>
        </trans-unit>
        <trans-unit id="13dd082aed431f232c24aac55d18467c2b663e2e" translate="yes" xml:space="preserve">
          <source>Minimum % ⟨n⟩ of heap which must be available for allocation.</source>
          <target state="translated">割り当てに利用可能でなければならないヒープの最小 % ⟨n⟩。</target>
        </trans-unit>
        <trans-unit id="b2c5225f522390e3a01cad15518a7fad4845c00b" translate="yes" xml:space="preserve">
          <source>Minimum of two size hints.</source>
          <target state="translated">最小2サイズのヒント。</target>
        </trans-unit>
        <trans-unit id="6375390ec9f90418a19031fe946ea7c8b08c7ed6" translate="yes" xml:space="preserve">
          <source>Minor utilities for the HPC tools.</source>
          <target state="translated">HPCツールのためのマイナーなユーティリティ。</target>
        </trans-unit>
        <trans-unit id="0f40575a4f8fcd450cc8e24d023e408e6a539894" translate="yes" xml:space="preserve">
          <source>MiscFlags</source>
          <target state="translated">MiscFlags</target>
        </trans-unit>
        <trans-unit id="2aa593cd19b234155d3652986effbe2cabb181f4" translate="yes" xml:space="preserve">
          <source>Miscelaneous information available for debugging purposes.</source>
          <target state="translated">デバッグ目的で利用可能な情報があります。</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="6b75dbc2d8c884fa76ebd1fab5321c113f5bdcc6" translate="yes" xml:space="preserve">
          <source>Miscellaneous GMP-provided operations</source>
          <target state="translated">その他のGMP提供業務</target>
        </trans-unit>
        <trans-unit id="5e68c0546c69483d4d1cb26b8fe241467b0b0496" translate="yes" xml:space="preserve">
          <source>Miscellaneous backend dumps</source>
          <target state="translated">その他のバックエンドダンプ</target>
        </trans-unit>
        <trans-unit id="314bb4fc83d55b365225efaa4fc333e95057e960" translate="yes" xml:space="preserve">
          <source>Miscellaneous functions</source>
          <target state="translated">その他の機能</target>
        </trans-unit>
        <trans-unit id="766dde0dd177116968305ecf5af25276425044a7" translate="yes" xml:space="preserve">
          <source>Miscellaneous functions on tactics</source>
          <target state="translated">戦術に関する雑多な機能</target>
        </trans-unit>
        <trans-unit id="fc807e2d7976d257c9171d114a6eb3efc8cab20a" translate="yes" xml:space="preserve">
          <source>Miscellaneous information about the system environment.</source>
          <target state="translated">システム環境に関する雑多な情報。</target>
        </trans-unit>
        <trans-unit id="142e1b72c08ab742f64274e6c7d575bbcc8429f4" translate="yes" xml:space="preserve">
          <source>Miscellaneous parameters</source>
          <target state="translated">その他のパラメータ</target>
        </trans-unit>
        <trans-unit id="75614093589ee1a6ed1d6b3a9a321b001454bfa9" translate="yes" xml:space="preserve">
          <source>Miscellaneous tactic functions</source>
          <target state="translated">雑技機能</target>
        </trans-unit>
        <trans-unit id="120f9c9998409369934eaac96bbbad1e69990044" translate="yes" xml:space="preserve">
          <source>Mismatch between the argument types and the format string, as well as any other syntactic or semantic errors in the format string, will cause an exception to be thrown at runtime.</source>
          <target state="translated">引数の型とフォーマット文字列の間の不一致や、フォーマット文字列の他の構文エラーやセマンティックエラーは、実行時に例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="fd7391b6720b809c7c41ed50cf63fdc87dac6b9d" translate="yes" xml:space="preserve">
          <source>Mix</source>
          <target state="translated">Mix</target>
        </trans-unit>
        <trans-unit id="a5446b7cafd6f64fa36d064009daafea44ba609c" translate="yes" xml:space="preserve">
          <source>Mix DataStructure</source>
          <target state="translated">ミックスデータ構造</target>
        </trans-unit>
        <trans-unit id="832e98200646adcbff0ea6a3b2b8398b73caa5ed" translate="yes" xml:space="preserve">
          <source>MixEntry</source>
          <target state="translated">MixEntry</target>
        </trans-unit>
        <trans-unit id="517dcc2aab9ff981e3d03a30ce6935c8e5ebac7e" translate="yes" xml:space="preserve">
          <source>MixEntryDom</source>
          <target state="translated">MixEntryDom</target>
        </trans-unit>
        <trans-unit id="d6840928afb9e96dced0538038e4e1c1eac39e1f" translate="yes" xml:space="preserve">
          <source>MkSystemTime</source>
          <target state="translated">MkSystemTime</target>
        </trans-unit>
        <trans-unit id="30376c6ee888990666c554e49bebf998120a5703" translate="yes" xml:space="preserve">
          <source>Mn: Mark, Non-Spacing</source>
          <target state="translated">Mn.マーク、ノンスペーシング</target>
        </trans-unit>
        <trans-unit id="f388dbfb78ec3e8821ae0844a947cecd488dd5ff" translate="yes" xml:space="preserve">
          <source>Mod</source>
          <target state="translated">Mod</target>
        </trans-unit>
        <trans-unit id="f149e0b10681e7408d843a0239621f9345205680" translate="yes" xml:space="preserve">
          <source>ModJulianDate</source>
          <target state="translated">ModJulianDate</target>
        </trans-unit>
        <trans-unit id="7a6df6254eeab02c96836922ac0139d166dad965" translate="yes" xml:space="preserve">
          <source>ModName</source>
          <target state="translated">ModName</target>
        </trans-unit>
        <trans-unit id="a7b93d2128e820f861fc8dfccd9f5521e89ad21f" translate="yes" xml:space="preserve">
          <source>Mode</source>
          <target state="translated">Mode</target>
        </trans-unit>
        <trans-unit id="e6c089b7ef71ad84d0b5ea7857ddf7e884d95cec" translate="yes" xml:space="preserve">
          <source>Mode wrappers</source>
          <target state="translated">モードラッパー</target>
        </trans-unit>
        <trans-unit id="6fd961190d330e230cb25033021abb41924a952f" translate="yes" xml:space="preserve">
          <source>Mode: A mode may be used on the command line only. You can pass only one mode flag. For example, &lt;a href=&quot;#ghc-flag---make&quot;&gt;&lt;code&gt;--make&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ghc-flag--E&quot;&gt;&lt;code&gt;-E&lt;/code&gt;&lt;/a&gt;. The available modes are listed in &lt;a href=&quot;#modes&quot;&gt;Modes of operation&lt;/a&gt;.</source>
          <target state="translated">モード：モードはコマンドラインでのみ使用できます。渡すことができるモードフラグは1つだけです。たとえば、-- &lt;a href=&quot;#ghc-flag---make&quot;&gt; &lt;code&gt;--make&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#ghc-flag--E&quot;&gt; &lt;code&gt;-E&lt;/code&gt; です&lt;/a&gt;。使用可能なモードはにリストされている&lt;a href=&quot;#modes&quot;&gt;操作のモード&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b0b30babf16ffbe6c525df9ecff6598de4eeedcf" translate="yes" xml:space="preserve">
          <source>ModifiedJulianDay</source>
          <target state="translated">ModifiedJulianDay</target>
        </trans-unit>
        <trans-unit id="ad8932265b6513f8f4632598479d16d811295a0e" translate="yes" xml:space="preserve">
          <source>ModifierLetter</source>
          <target state="translated">ModifierLetter</target>
        </trans-unit>
        <trans-unit id="06e78e77af950abb3de1917e6c715f81fbe8971c" translate="yes" xml:space="preserve">
          <source>ModifierParser</source>
          <target state="translated">ModifierParser</target>
        </trans-unit>
        <trans-unit id="a6384fc88bd1c896276b41e4e1213a85a46e0ff7" translate="yes" xml:space="preserve">
          <source>ModifierSymbol</source>
          <target state="translated">ModifierSymbol</target>
        </trans-unit>
        <trans-unit id="6320257ec347ce7461b6559133a0cc26667c4e6d" translate="yes" xml:space="preserve">
          <source>Modify the contents of a &lt;code&gt;MutVar#&lt;/code&gt;, returning the previous contents and the result of applying the given function to the previous contents.</source>
          <target state="translated">&lt;code&gt;MutVar#&lt;/code&gt; のコンテンツを変更し、以前のコンテンツと、指定された関数を以前のコンテンツに適用した結果を返します。</target>
        </trans-unit>
        <trans-unit id="f0a2b227aefd779ece79d3f6ad8baef4e51ab448" translate="yes" xml:space="preserve">
          <source>Modify the contents of a &lt;code&gt;MutVar#&lt;/code&gt;, returning the previous contents and the result of applying the given function to the previous contents. Note that this isn't strictly speaking the correct type for this function; it should really be &lt;code&gt;MutVar# s a -&amp;gt; (a -&amp;gt; (a,b)) -&amp;gt; State# s -&amp;gt; (# State# s, a, (a, b) #)&lt;/code&gt;, but we don't know about pairs here.</source>
          <target state="translated">&lt;code&gt;MutVar#&lt;/code&gt; のコンテンツを変更し、以前のコンテンツと、指定された関数を以前のコンテンツに適用した結果を返します。これは厳密にはこの関数の正しい型ではないことに注意してください。それは実際には &lt;code&gt;MutVar# s a -&amp;gt; (a -&amp;gt; (a,b)) -&amp;gt; State# s -&amp;gt; (# State# s, a, (a, b) #)&lt;/code&gt; である必要がありますが、ペアについてはわかりませんここに。</target>
        </trans-unit>
        <trans-unit id="6ecabc24fa376f8bfdd5f9771659364d02446fee" translate="yes" xml:space="preserve">
          <source>Modify the depth of the evaluation history tracked by GHCi.</source>
          <target state="translated">GHCiで追跡した評価履歴の深さを変更します。</target>
        </trans-unit>
        <trans-unit id="18199c686f30decfd6449ba999c8002260a92575" translate="yes" xml:space="preserve">
          <source>Modify the value of an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; の値を変更します。</target>
        </trans-unit>
        <trans-unit id="34813144ec19f74db4ddda85d08e6849e3f1487f" translate="yes" xml:space="preserve">
          <source>Modifying the code slightly, however, produces code which will not compile:</source>
          <target state="translated">しかし、コードをわずかに変更すると、コンパイルできないコードが生成されます。</target>
        </trans-unit>
        <trans-unit id="4c32fd82ceb8daf13a6616a1ab5a958038171a59" translate="yes" xml:space="preserve">
          <source>Modifying the user environment</source>
          <target state="translated">ユーザー環境の変更</target>
        </trans-unit>
        <trans-unit id="e075617bae1ed6d213cacf5b4a1963cf2b558270" translate="yes" xml:space="preserve">
          <source>Modular arithmetic</source>
          <target state="translated">モジュラー演算</target>
        </trans-unit>
        <trans-unit id="b8ff02892916ff59f7fbd4e617fccd01f6bca576" translate="yes" xml:space="preserve">
          <source>Module</source>
          <target state="translated">Module</target>
        </trans-unit>
        <trans-unit id="40b31c77d57b0de63020f3b87cedcf39795f6b82" translate="yes" xml:space="preserve">
          <source>Module &lt;a href=&quot;data-array-marray&quot;&gt;Data.Array.MArray&lt;/a&gt; provides the interface of storable arrays. They are instances of class &lt;code&gt;&lt;a href=&quot;data-array-marray#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; (with the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad).</source>
          <target state="translated">モジュール&lt;a href=&quot;data-array-marray&quot;&gt;Data.Array.MArray&lt;/a&gt;は、格納可能な配列のインターフェースを提供します。これらはクラス &lt;code&gt;&lt;a href=&quot;data-array-marray#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドを含む）のインスタンスです。</target>
        </trans-unit>
        <trans-unit id="dfbffd6a6167f932043b8ceb3531f4ecd4669be4" translate="yes" xml:space="preserve">
          <source>Module &lt;a href=&quot;data-array-marray&quot;&gt;Data.Array.MArray&lt;/a&gt; provides the interface of storable arrays. They are instances of class &lt;code&gt;&lt;a href=&quot;data-array-marray#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; (with the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad).</source>
          <target state="translated">Module &lt;a href=&quot;data-array-marray&quot;&gt;Data.Array.MArray&lt;/a&gt; provides the interface of storable arrays. They are instances of class &lt;code&gt;&lt;a href=&quot;data-array-marray#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; (with the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad).</target>
        </trans-unit>
        <trans-unit id="59fc78cc7268113b6d14c7ba3a0c68ede04edd9f" translate="yes" xml:space="preserve">
          <source>Module &lt;code&gt;Y&lt;/code&gt; exports all the entities defined in &lt;code&gt;Y&lt;/code&gt;, namely the data constructors &lt;code&gt;D1&lt;/code&gt; and &lt;code&gt;D2&lt;/code&gt;, and &lt;em&gt;implicitly&lt;/em&gt; the data family &lt;code&gt;D&lt;/code&gt;, even though it&amp;rsquo;s defined in &lt;code&gt;X&lt;/code&gt;. This means you can write &lt;code&gt;import Y( D(D1,D2) )&lt;/code&gt;&lt;em&gt;without&lt;/em&gt; giving an explicit export list like this:</source>
          <target state="translated">モジュール &lt;code&gt;Y&lt;/code&gt; は、すべてで定義されたエンティティエクスポート &lt;code&gt;Y&lt;/code&gt; 、すなわちデータコンストラクタ &lt;code&gt;D1&lt;/code&gt; および &lt;code&gt;D2&lt;/code&gt; 、および&lt;em&gt;暗黙的&lt;/em&gt;データファミリ &lt;code&gt;D&lt;/code&gt; をそれがで定義されていたとしても、 &lt;code&gt;X&lt;/code&gt; 。つまり、次のような明示的なエクスポートリストを指定し&lt;em&gt;なくても&lt;/em&gt; &lt;code&gt;import Y( D(D1,D2) )&lt;/code&gt; &lt;em&gt;を&lt;/em&gt;記述できます。</target>
        </trans-unit>
        <trans-unit id="7ca5283a9401b368ad7082d2368aee85af976008" translate="yes" xml:space="preserve">
          <source>Module Data.Typeable re-exported for convenience</source>
          <target state="translated">モジュールData.Typeableは、便利なように再エキスポートされています。</target>
        </trans-unit>
        <trans-unit id="ec22b40d47f573ceb3764447b0fd39403f6d6c2d" translate="yes" xml:space="preserve">
          <source>Module authors using the &lt;a href=&quot;#extension-Trustworthy&quot;&gt;&lt;code&gt;Trustworthy&lt;/code&gt;&lt;/a&gt; language extension for a module &lt;code&gt;M&lt;/code&gt; should ensure that &lt;code&gt;M&lt;/code&gt;&amp;lsquo;s public API (the symbols exposed by its export list) can&amp;rsquo;t be used in an unsafe manner. This mean that symbols exported should respect type safety and referential transparency.</source>
          <target state="translated">モジュール &lt;code&gt;M&lt;/code&gt; に&lt;a href=&quot;#extension-Trustworthy&quot;&gt; &lt;code&gt;Trustworthy&lt;/code&gt; &lt;/a&gt;言語拡張機能を使用するモジュール作成者は、 &lt;code&gt;M&lt;/code&gt; のパブリックAPI（そのエクスポートリストによって公開されるシンボル）が安全でない方法で使用されないようにする必要があります。つまり、エクスポートされるシンボルは、タイプセーフと参照の透明性を尊重する必要があります。</target>
        </trans-unit>
        <trans-unit id="91ba4bca6673e09b576e66d35a05c3026f377972" translate="yes" xml:space="preserve">
          <source>Module authors using the &lt;a href=&quot;#extension-Trustworthy&quot;&gt;&lt;code&gt;Trustworthy&lt;/code&gt;&lt;/a&gt; language extension for a module &lt;code&gt;M&lt;/code&gt; should ensure that &lt;code&gt;M&lt;/code&gt;&amp;rsquo;s public API (the symbols exposed by its export list) can&amp;rsquo;t be used in an unsafe manner. This mean that symbols exported should respect type safety and referential transparency.</source>
          <target state="translated">Module authors using the &lt;a href=&quot;#extension-Trustworthy&quot;&gt; &lt;code&gt;Trustworthy&lt;/code&gt; &lt;/a&gt; language extension for a module &lt;code&gt;M&lt;/code&gt; should ensure that &lt;code&gt;M&lt;/code&gt; &amp;rsquo;s public API (the symbols exposed by its export list) can&amp;rsquo;t be used in an unsafe manner. This mean that symbols exported should respect type safety and referential transparency.</target>
        </trans-unit>
        <trans-unit id="58b8208bcfdac835bd589f0a0f394caee9130541" translate="yes" xml:space="preserve">
          <source>Module names</source>
          <target state="translated">モジュール名</target>
        </trans-unit>
        <trans-unit id="eb27714f2a03885159601b0fa4f8b118e5c3a120" translate="yes" xml:space="preserve">
          <source>Module prefix of a name, if it exists.</source>
          <target state="translated">モジュール名の接頭辞(存在する場合)。</target>
        </trans-unit>
        <trans-unit id="00d767e865b30777f85d5e023407cb4c65ee4110" translate="yes" xml:space="preserve">
          <source>Module signatures actually consist of two closely related features:</source>
          <target state="translated">モジュールのシグネチャは、実際には密接に関連した2つの機能で構成されています。</target>
        </trans-unit>
        <trans-unit id="80246c9711a49a29d3a5e03817c371dd6ae4cbfc" translate="yes" xml:space="preserve">
          <source>ModuleAnnotation</source>
          <target state="translated">ModuleAnnotation</target>
        </trans-unit>
        <trans-unit id="538831de95e10dc8de9dab5d4714b91d07aa6e76" translate="yes" xml:space="preserve">
          <source>ModuleInfo</source>
          <target state="translated">ModuleInfo</target>
        </trans-unit>
        <trans-unit id="17c49dd9a2601ed05a4293ce1094e4ae4f9be60b" translate="yes" xml:space="preserve">
          <source>Modules compiled with this option can be freely mixed with modules compiled without it; indeed, most libraries will typically be compiled without &lt;a href=&quot;#ghc-flag--fhpc&quot;&gt;&lt;code&gt;-fhpc&lt;/code&gt;&lt;/a&gt;. When the program is run, coverage data will only be generated for those modules that were compiled with &lt;a href=&quot;#ghc-flag--fhpc&quot;&gt;&lt;code&gt;-fhpc&lt;/code&gt;&lt;/a&gt;, and the &lt;strong&gt;hpc&lt;/strong&gt; tool will only show information about those modules.</source>
          <target state="translated">このオプションでコンパイルされたモジュールは、それなしでコンパイルされたモジュールと自由に組み合わせることができます。実際、ほとんどのライブラリは通常&lt;a href=&quot;#ghc-flag--fhpc&quot;&gt; &lt;code&gt;-fhpc&lt;/code&gt; &lt;/a&gt;なしでコンパイルされます。プログラムが実行されると、カバレッジデータは&lt;a href=&quot;#ghc-flag--fhpc&quot;&gt; &lt;code&gt;-fhpc&lt;/code&gt; &lt;/a&gt;でコンパイルされたモジュールに対してのみ生成され、&lt;strong&gt;hpc&lt;/strong&gt;ツールはそれらのモジュールに関する情報のみを表示します。</target>
        </trans-unit>
        <trans-unit id="7f34a515a9849c6d1d6359aa243ee958639d54b5" translate="yes" xml:space="preserve">
          <source>Modules reexported by this package. This list takes the form of &lt;code&gt;pkg:OldName as NewName (A@orig-pkg-0.1-HASH)&lt;/code&gt;: the first portion of the string is the user-written reexport specification (possibly omitting the package qualifier and the renaming), while the parenthetical is the original package which exposed the module under are particular name. Reexported modules have a relaxed overlap constraint: it&amp;rsquo;s permissible for two packages to reexport the same module as the same name if the reexported moduleis identical.</source>
          <target state="translated">このパッケージによって再エクスポートされたモジュール。このリストは、 &lt;code&gt;pkg:OldName as NewName (A@orig-pkg-0.1-HASH)&lt;/code&gt; の形式をとります。文字列の最初の部分は、ユーザー作成の再エクスポート指定です（パッケージ修飾子と名前の変更が省略されている可能性があります）。特定の名前でモジュールを公開した元のパッケージです。再エクスポートされたモジュールには、オーバーラップ制約が緩和されています。再エクスポートされたモジュールが同一である場合、2つのパッケージが同じモジュールを同じ名前で再エクスポートすることは許容されます。</target>
        </trans-unit>
        <trans-unit id="44309d68cfcd4f5d92e2cc5899604b23cc2ee7ad" translate="yes" xml:space="preserve">
          <source>Modules using unboxed tuples or sums will automatically enable &lt;a href=&quot;phases#ghc-flag--fobject-code&quot;&gt;&lt;code&gt;-fobject-code&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Modules using unboxed tuples or sums will automatically enable &lt;a href=&quot;phases#ghc-flag--fobject-code&quot;&gt; &lt;code&gt;-fobject-code&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e3bc4d952ccd3346da0175b0abdc685fcb3a3272" translate="yes" xml:space="preserve">
          <source>Modulus of natural numbers. &lt;code&gt;Mod x 0&lt;/code&gt; is undefined (i.e., it cannot be reduced).</source>
          <target state="translated">自然数の係数。 &lt;code&gt;Mod x 0&lt;/code&gt; は未定義です（つまり、縮小できません）。</target>
        </trans-unit>
        <trans-unit id="11531c3c6a7c6d49562c188b9bdc843a54288d30" translate="yes" xml:space="preserve">
          <source>Monad</source>
          <target state="translated">Monad</target>
        </trans-unit>
        <trans-unit id="f117e306f3bfe1ed114c24f6bd68d2322d3b742f" translate="yes" xml:space="preserve">
          <source>Monad comprehensions generalise the list comprehension notation, including parallel comprehensions (&lt;a href=&quot;#parallel-list-comprehensions&quot;&gt;Parallel List Comprehensions&lt;/a&gt;) and transform comprehensions (&lt;a href=&quot;#generalised-list-comprehensions&quot;&gt;Generalised (SQL-like) List Comprehensions&lt;/a&gt;) to work for any monad.</source>
          <target state="translated">モナド内包表記は、並列内包表記（&lt;a href=&quot;#parallel-list-comprehensions&quot;&gt;Parallel List Comprehensions&lt;/a&gt;）および変換内包表記（&lt;a href=&quot;#generalised-list-comprehensions&quot;&gt;Generalized（SQL-like）List Comprehensions&lt;/a&gt;）を含むリスト内包表記を一般化して、任意のモナドで機能します。</target>
        </trans-unit>
        <trans-unit id="2b154b6a867643b57ffe3e50fb7555800ae79d0a" translate="yes" xml:space="preserve">
          <source>Monad comprehensions support rebindable syntax (&lt;a href=&quot;#rebindable-syntax&quot;&gt;Rebindable syntax and the implicit Prelude import&lt;/a&gt;). Without rebindable syntax, the operators from the &amp;ldquo;standard binding&amp;rdquo; module are used; with rebindable syntax, the operators are looked up in the current lexical scope. For example, parallel comprehensions will be typechecked and desugared using whatever &amp;ldquo;&lt;code&gt;mzip&lt;/code&gt;&amp;rdquo; is in scope.</source>
          <target state="translated">モナド内包表記は、再バインド可能な構文（&lt;a href=&quot;#rebindable-syntax&quot;&gt;再バインド可能な構文と暗黙的なPreludeインポート&lt;/a&gt;）をサポートしています。再バインド可能な構文がない場合、「標準バインディング」モジュールの演算子が使用されます。再バインド可能な構文では、演算子は現在の字句スコープで検索されます。たとえば、並列内包表記は、スコープ内にある「 &lt;code&gt;mzip&lt;/code&gt; 」を使用してタイプチェックおよび脱糖化されます。</target>
        </trans-unit>
        <trans-unit id="9118814255c8cbff0f92707b31e2747bffbb4a14" translate="yes" xml:space="preserve">
          <source>Monad comprehensions support:</source>
          <target state="translated">モナドの理解力をサポートします。</target>
        </trans-unit>
        <trans-unit id="ccf5f31df2b47a5c8b3c7b4b8bec553c0e566b1a" translate="yes" xml:space="preserve">
          <source>Monad transformation</source>
          <target state="translated">モナド変換</target>
        </trans-unit>
        <trans-unit id="1c0fd921dbc28d4c0620875213e77e22d440c417" translate="yes" xml:space="preserve">
          <source>Monad transformations</source>
          <target state="translated">モナド変換</target>
        </trans-unit>
        <trans-unit id="b85021f1542ee4ad142b965dc1641cf10fd4260f" translate="yes" xml:space="preserve">
          <source>Monad values are functions from the environment to a value. The bound function is applied to the bound value, and both have access to the shared environment.</source>
          <target state="translated">モナド値は、環境から値への関数です。バインド関数はバウンド値に適用され、どちらも共有環境へのアクセス権を持っています。</target>
        </trans-unit>
        <trans-unit id="5a1aa98499a1d957e619f8fa4af2de6d1152500b" translate="yes" xml:space="preserve">
          <source>MonadComprehensions</source>
          <target state="translated">MonadComprehensions</target>
        </trans-unit>
        <trans-unit id="c6fb342904057550b8ef01f426ca92e465116ed4" translate="yes" xml:space="preserve">
          <source>MonadCont</source>
          <target state="translated">MonadCont</target>
        </trans-unit>
        <trans-unit id="89861c606303650c7e7f0d7c743da67de31d69c7" translate="yes" xml:space="preserve">
          <source>MonadCont class</source>
          <target state="translated">モナドコンクラス</target>
        </trans-unit>
        <trans-unit id="39a661caab336fa22d832d7beffd7388def93e46" translate="yes" xml:space="preserve">
          <source>MonadError</source>
          <target state="translated">MonadError</target>
        </trans-unit>
        <trans-unit id="6971cd3387fcb89462309d104896a63aacd3ef19" translate="yes" xml:space="preserve">
          <source>MonadException</source>
          <target state="translated">MonadException</target>
        </trans-unit>
        <trans-unit id="16fc28da849b4c8c2a56c99fe357bebb2ee341a7" translate="yes" xml:space="preserve">
          <source>MonadFail</source>
          <target state="translated">MonadFail</target>
        </trans-unit>
        <trans-unit id="7fdd52d0e4c29c94ae163aa3e69f06596bf4ebd0" translate="yes" xml:space="preserve">
          <source>MonadFailDesugaring</source>
          <target state="translated">MonadFailDesugaring</target>
        </trans-unit>
        <trans-unit id="8cd3e027e126ef51355bf4e476d5b9c913c5824c" translate="yes" xml:space="preserve">
          <source>MonadFix</source>
          <target state="translated">MonadFix</target>
        </trans-unit>
        <trans-unit id="464a90d352252a57d56693a4858884c98810e3a1" translate="yes" xml:space="preserve">
          <source>MonadIO</source>
          <target state="translated">MonadIO</target>
        </trans-unit>
        <trans-unit id="741fdf5e9791ce30c278a5afdbd3129dd2c1ead9" translate="yes" xml:space="preserve">
          <source>MonadPlus</source>
          <target state="translated">MonadPlus</target>
        </trans-unit>
        <trans-unit id="e59b4d8e1e1b084ca225560b46a86c3f02b6c3c8" translate="yes" xml:space="preserve">
          <source>MonadReader</source>
          <target state="translated">MonadReader</target>
        </trans-unit>
        <trans-unit id="a68c00a3ea80c75e5ccf937dfcb38fee6f14dbc7" translate="yes" xml:space="preserve">
          <source>MonadReader class</source>
          <target state="translated">モナドリーダークラス</target>
        </trans-unit>
        <trans-unit id="4dbbde36c5c41657a758435796e76b6fee9c0240" translate="yes" xml:space="preserve">
          <source>MonadState</source>
          <target state="translated">MonadState</target>
        </trans-unit>
        <trans-unit id="f176c139b4727308ec824a9344e742f670f0aa3b" translate="yes" xml:space="preserve">
          <source>MonadState class</source>
          <target state="translated">モナドステートクラス</target>
        </trans-unit>
        <trans-unit id="a2e64d3be4f20e02142a613432a291ee3dae4677" translate="yes" xml:space="preserve">
          <source>MonadState class.</source>
          <target state="translated">MonadStateクラスです。</target>
        </trans-unit>
        <trans-unit id="29e37501f89d2caf27053c9fb3f8913750d9897a" translate="yes" xml:space="preserve">
          <source>MonadTrans</source>
          <target state="translated">MonadTrans</target>
        </trans-unit>
        <trans-unit id="3f2f8d76eb3c2357f757275d57fffc9c8d4ee396" translate="yes" xml:space="preserve">
          <source>MonadTrans (&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt; s u)</source>
          <target state="translated">MonadTrans（&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt; su）</target>
        </trans-unit>
        <trans-unit id="60a504062889fae8b9e846460fc07b21f50fb371" translate="yes" xml:space="preserve">
          <source>MonadTrans (&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt; s u)</source>
          <target state="translated">MonadTrans（&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt; su）</target>
        </trans-unit>
        <trans-unit id="652f00fb36c1c38645bc9e90431a168567726128" translate="yes" xml:space="preserve">
          <source>MonadWriter</source>
          <target state="translated">MonadWriter</target>
        </trans-unit>
        <trans-unit id="f9be51da3714e0cf4aee03cf4cecccec8f06c1ad" translate="yes" xml:space="preserve">
          <source>MonadWriter class</source>
          <target state="translated">MonadWriter クラス</target>
        </trans-unit>
        <trans-unit id="52dae74b8add8e5bac5ef90f8e6def33af0626f8" translate="yes" xml:space="preserve">
          <source>MonadZip</source>
          <target state="translated">MonadZip</target>
        </trans-unit>
        <trans-unit id="37921d15310812cb15bb950e0e8c69478968709e" translate="yes" xml:space="preserve">
          <source>Monadic actions</source>
          <target state="translated">モナディックアクション</target>
        </trans-unit>
        <trans-unit id="be38a4e3e1a34b178a11a5fbcae21f0a5b3e86dc" translate="yes" xml:space="preserve">
          <source>Monadic fixpoints.</source>
          <target state="translated">モナディックフィックスポイント。</target>
        </trans-unit>
        <trans-unit id="79464d099a2a04a0be206b18bf0034c16bdc124c" translate="yes" xml:space="preserve">
          <source>Monadic fold over the elements of a structure, associating to the left, i.e. from left to right.</source>
          <target state="translated">構造体の要素の上に単月形の折り目があり、左に関連づけられています。</target>
        </trans-unit>
        <trans-unit id="0f4ba0ee1732f5a3212ba30683790be701be210c" translate="yes" xml:space="preserve">
          <source>Monadic fold over the elements of a structure, associating to the right, i.e. from right to left.</source>
          <target state="translated">構造体の要素の上に単月形の折り目があり、右に関連づけられている、すなわち右から左へ。</target>
        </trans-unit>
        <trans-unit id="5595a6b57f768b1b94cd5faeef182cec9288c190" translate="yes" xml:space="preserve">
          <source>Monadic forest builder, in breadth-first order</source>
          <target state="translated">モナディックフォレストビルダー、幅第一次で</target>
        </trans-unit>
        <trans-unit id="8b5e9251f6a7731c5728c4734b226c8f0fb9eb58" translate="yes" xml:space="preserve">
          <source>Monadic forest builder, in depth-first order</source>
          <target state="translated">モナディックフォレストビルダー、深層優先で</target>
        </trans-unit>
        <trans-unit id="92e8f6d8093ef19a3fbeb20205bdce42d7b88c0f" translate="yes" xml:space="preserve">
          <source>Monadic front-end to Text.PrettyPrint</source>
          <target state="translated">Text.PrettyPrintへのモナディックフロントエンド</target>
        </trans-unit>
        <trans-unit id="4700a1dc5dbcbeb872e70164fe9a3ec9d66a7714" translate="yes" xml:space="preserve">
          <source>Monadic lifting operators</source>
          <target state="translated">モナディックリフティングオペレーター</target>
        </trans-unit>
        <trans-unit id="cb3f1c0525f059418665af747bb13d9f2d7d0703" translate="yes" xml:space="preserve">
          <source>Monadic state transformer.</source>
          <target state="translated">モナディックステートトランス。</target>
        </trans-unit>
        <trans-unit id="afd12b25574336c915d17d02eed63bdd6790c29d" translate="yes" xml:space="preserve">
          <source>Monadic tree builder, in breadth-first order.</source>
          <target state="translated">モナディックツリービルダー、幅第一次で。</target>
        </trans-unit>
        <trans-unit id="1c0844a453139b42e240b3dbd8899eb7e45afa2d" translate="yes" xml:space="preserve">
          <source>Monadic tree builder, in depth-first order.</source>
          <target state="translated">モナディックツリービルダー、深層第一階層。</target>
        </trans-unit>
        <trans-unit id="751701098af9ceab4eca10e3e9e72843e8819c96" translate="yes" xml:space="preserve">
          <source>Monadic variation on &lt;code&gt;&lt;a href=&quot;data-data#v:fromConstrB&quot;&gt;fromConstrB&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-data#v:fromConstrB&quot;&gt;fromConstrB&lt;/a&gt;&lt;/code&gt; のモナディックバリエーション</target>
        </trans-unit>
        <trans-unit id="9159bd85753caa0996e8d4ad3b128a9014c50e05" translate="yes" xml:space="preserve">
          <source>Monadic zipping (used for monad comprehensions)</source>
          <target state="translated">モナドジッピング(モナド理解に使う</target>
        </trans-unit>
        <trans-unit id="250083fc6df0956d1673cca1cb1611bfc11ab137" translate="yes" xml:space="preserve">
          <source>Monads and functors</source>
          <target state="translated">モノッドとファンクタ</target>
        </trans-unit>
        <trans-unit id="9fade08cca7ae6ce3b29ed4f480ac77d554be713" translate="yes" xml:space="preserve">
          <source>Monads having fixed points with a 'knot-tying' semantics. Instances of &lt;code&gt;&lt;a href=&quot;control-monad-fix#t:MonadFix&quot;&gt;MonadFix&lt;/a&gt;&lt;/code&gt; should satisfy the following laws:</source>
          <target state="translated">「結び目を結ぶ」セマンティクスを持つ固定点を持つモナド。 &lt;code&gt;&lt;a href=&quot;control-monad-fix#t:MonadFix&quot;&gt;MonadFix&lt;/a&gt;&lt;/code&gt; のインスタンスは、次の法律を満たしている必要があります。</target>
        </trans-unit>
        <trans-unit id="3ab257a5f129af1981f621c8ddf84b2fd68c88ba" translate="yes" xml:space="preserve">
          <source>Monads in which &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computations may be embedded. Any monad built by applying a sequence of monad transformers to the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad will be an instance of this class.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 計算を埋め込むことができるモナド。モナド変換子のシーケンスを &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドに適用することによって構築されたモナドは、このクラスのインスタンスになります。</target>
        </trans-unit>
        <trans-unit id="bec921c5487ea6eaf795a69781d0904af33f534a" translate="yes" xml:space="preserve">
          <source>Monads that also support choice and failure.</source>
          <target state="translated">選択と失敗にも対応したモナド</target>
        </trans-unit>
        <trans-unit id="20f29bb326b4b655b5b0354aa1b0ff90343d0044" translate="yes" xml:space="preserve">
          <source>Monads with error handling</source>
          <target state="translated">エラー処理のあるモナド</target>
        </trans-unit>
        <trans-unit id="932eeb1076c85e522f02e15441fa371e3fd000ac" translate="yes" xml:space="preserve">
          <source>Monday</source>
          <target state="translated">Monday</target>
        </trans-unit>
        <trans-unit id="36181aae20a5a2ae5ba1584c42b3b9779dffec5e" translate="yes" xml:space="preserve">
          <source>Monday-starting week number (as &lt;code&gt;%W&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;data-time-format#v:formatTime&quot;&gt;formatTime&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">（月曜開始週数 &lt;code&gt;%W&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;data-time-format#v:formatTime&quot;&gt;formatTime&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b5307adf2da7c702cf60f2a0dad66c188a1c8b3b" translate="yes" xml:space="preserve">
          <source>MonoLocalBinds</source>
          <target state="translated">MonoLocalBinds</target>
        </trans-unit>
        <trans-unit id="db3026559eb3ab8db4d183918b45caef643c418f" translate="yes" xml:space="preserve">
          <source>MonoPatBinds</source>
          <target state="translated">MonoPatBinds</target>
        </trans-unit>
        <trans-unit id="9c5483b826379f2567e8ee89ca55b9c52e011529" translate="yes" xml:space="preserve">
          <source>Monoid</source>
          <target state="translated">Monoid</target>
        </trans-unit>
        <trans-unit id="0220c03411dbd64cddd0b0ccca5475f10ebe0331" translate="yes" xml:space="preserve">
          <source>Monoid functions</source>
          <target state="translated">モノイド関数</target>
        </trans-unit>
        <trans-unit id="e0ac9d688b93e0a5de738795a1f225343db79584" translate="yes" xml:space="preserve">
          <source>Monoid operations</source>
          <target state="translated">モノイド演算</target>
        </trans-unit>
        <trans-unit id="3a1b4f214513abdcdf27e4ab6401c3d176d9757e" translate="yes" xml:space="preserve">
          <source>Monoid under &lt;code&gt;&lt;a href=&quot;control-applicative#v:-60--124--62-&quot;&gt;&amp;lt;|&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-applicative#v:-60--124--62-&quot;&gt;&amp;lt;|&amp;gt;&lt;/a&gt;&lt;/code&gt; の下のモノイド。</target>
        </trans-unit>
        <trans-unit id="8f6543d6abb3998d23fb62d545057fa1ab18548a" translate="yes" xml:space="preserve">
          <source>Monoid under addition.</source>
          <target state="translated">足し算の下のモノイド。</target>
        </trans-unit>
        <trans-unit id="7029b0947bbd5af2e213d2e9bb3c221593a86f9d" translate="yes" xml:space="preserve">
          <source>Monoid under multiplication.</source>
          <target state="translated">乗算下のモノイド。</target>
        </trans-unit>
        <trans-unit id="3e61bbeed3f08fcc986f97d9c436530dd737834a" translate="yes" xml:space="preserve">
          <source>Monomorphic equality operators</source>
          <target state="translated">単相等式演算子</target>
        </trans-unit>
        <trans-unit id="129d16939021f97809d6e9d8b3a79a644e52d05b" translate="yes" xml:space="preserve">
          <source>MonomorphismRestriction</source>
          <target state="translated">MonomorphismRestriction</target>
        </trans-unit>
        <trans-unit id="b9bd340d94bbe1799fa2827ad776ca607d3614ba" translate="yes" xml:space="preserve">
          <source>Morally, builder primitives are like functions &lt;code&gt;a -&amp;gt; Builder&lt;/code&gt;, that is they take a value and encode it as a sequence of bytes, represented as a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;. Of course their implementation is a bit more specialised.</source>
          <target state="translated">道徳的に、ビルダープリミティブは関数a- &lt;code&gt;a -&amp;gt; Builder&lt;/code&gt; ようなものです。つまり、値を受け取り、それをバイトのシーケンスとしてエンコードし、 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; として表します。もちろん、それらの実装はもう少し専門的です。</target>
        </trans-unit>
        <trans-unit id="a9713777f0ffc9301f9aa702f90a88fc96cd4daa" translate="yes" xml:space="preserve">
          <source>More concretely, the input to a command consists of a pair of an environment and a stack. Each value on the stack is paired with the remainder of the stack, with an empty stack being &lt;code&gt;()&lt;/code&gt;. So operators like &lt;code&gt;handleA&lt;/code&gt; that pass extra inputs to their subcommands can be designed for use with the notation by placing the values on the stack paired with the environment in this way. More precisely, the type of each argument of the operator (and its result) should have the form</source>
          <target state="translated">より具体的には、コマンドへの入力は、環境とスタックのペアで構成されます。スタックの各値は残りのスタックとペアになり、空のスタックは &lt;code&gt;()&lt;/code&gt; になります。したがって、この方法で環境とペアになっているスタックに値を配置することにより、サブコマンドに追加の入力を渡す &lt;code&gt;handleA&lt;/code&gt; のような演算子を表記法で使用するように設計できます。より正確には、演算子の各引数の型（およびその結果）は次の形式でなければなりません。</target>
        </trans-unit>
        <trans-unit id="31b13373cbfa12cceaf613513d103c95459cbf88" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;debugging#options-debugging&quot;&gt;Debugging the compiler&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;debugging#options-debugging&quot;&gt;コンパイラーのデバッグの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="c0cecd44911066c36d923fdbe5a19b53168e3dcf" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;extending_ghc#compiler-plugins&quot;&gt;Compiler Plugins&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;extending_ghc#compiler-plugins&quot;&gt;コンパイラプラグインの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="17420796ed603dd509d02e3a8d1da517181cd7d5" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;ghci#ghci-dot-files&quot;&gt;The .ghci and .haskeline files&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ghci#ghci-dot-files&quot;&gt;.ghciおよび.haskelineファイルの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="37e9d2c958040b445e2912cfe73b6aa30dc6a6e6" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;packages#packages&quot;&gt;Packages&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;packages#packages&quot;&gt;パッケージの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="baf1294ef868c2abc05ce0421bd9b43c7f792cad" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;phases#c-pre-processor&quot;&gt;Options affecting the C pre-processor&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;phases#c-pre-processor&quot;&gt;Cプリプロセッサに影響するオプションの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="51d1ab0e22b2ab0d231fb2c5972d2be780b12e73" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;phases#forcing-options-through&quot;&gt;Forcing options to a particular phase&lt;/a&gt;</source>
          <target state="translated">詳細については&lt;a href=&quot;phases#forcing-options-through&quot;&gt;、特定のフェーズにオプションを強制する&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7983553fdee60c62d0851647dd220831bd52e4c8" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;phases#options-codegen&quot;&gt;Options affecting code generation&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;phases#options-codegen&quot;&gt;コード生成に影響&lt;/a&gt;するオプションの詳細</target>
        </trans-unit>
        <trans-unit id="a16863701609094692f0c3f835ccc3d878e7e100" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;phases#options-linker&quot;&gt;Options affecting linking&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;phases#options-linker&quot;&gt;リンクに影響&lt;/a&gt;するオプションの詳細</target>
        </trans-unit>
        <trans-unit id="8adac53d0127ee0d97906718b6336057dbda2f90" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;phases#replacing-phases&quot;&gt;Replacing the program for one or more phases&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;phases#replacing-phases&quot;&gt;1つ以上のフェーズでのプログラムの置き換えの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="31663a68122cfc30712ddae060ef7c0c26fb2a9b" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;profiling#hpc&quot;&gt;Observing Code Coverage&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;profiling#hpc&quot;&gt;コードカバレッジの監視の&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="e2f3306e90d0fd9056b2e721c5d6c4dbfb662ff2" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;profiling#profiling&quot;&gt;Profiling&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;profiling#profiling&quot;&gt;プロファイリングの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="57bc71d308e6ee5ef978190de473b462803d8a22" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;separate_compilation#hi-options&quot;&gt;Other options related to interface files&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;separate_compilation#hi-options&quot;&gt;インターフェースファイルに関連するその他のオプションの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="32f905a10099284e5b8eb48c14cea142a33e05ef" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;separate_compilation#keeping-intermediates&quot;&gt;Keeping Intermediate Files&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;separate_compilation#keeping-intermediates&quot;&gt;中間ファイルの保持の&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="01ef1b0434fb54d267252cfe67e63278a877ae6d" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;separate_compilation#options-output&quot;&gt;Redirecting the compilation output(s)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;separate_compilation#options-output&quot;&gt;コンパイル出力のリダイレクトの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="eac718647e3fed68fe7ca2678bdddded1bfb9bff" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;separate_compilation#recomp&quot;&gt;The recompilation checker&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;separate_compilation#recomp&quot;&gt;再コンパイルチェッカーの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="a74b1204653431c31312edd9978554b178635f3f" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;separate_compilation#search-path&quot;&gt;The search path&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;separate_compilation#search-path&quot;&gt;検索パスの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="9dc4a10a5929dae029a66e7ac4365b025fb671f9" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;separate_compilation#temp-files&quot;&gt;Redirecting temporary files&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;separate_compilation#temp-files&quot;&gt;一時ファイルのリダイレクトの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="0af5bfe303303a371ced3d780b07e43b27e4b3ba" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;using#modes&quot;&gt;Modes of operation&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;using#modes&quot;&gt;動作モードの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="1408534385bbc206247b2d0cacd5fc927e1376cf" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;using#options-help&quot;&gt;Verbosity options&lt;/a&gt;</source>
          <target state="translated">詳細は &lt;a href=&quot;using#options-help&quot;&gt;冗長性オプションの&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4561b34d24c52f31aefc4effb398748be0d2b234" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;using#options-order&quot;&gt;Batch compiler mode&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;using#options-order&quot;&gt;バッチコンパイラモードの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="968f4ed399272e126f045721eacf076df218221c" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;using#options-platform&quot;&gt;Platform-specific Flags&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;using#options-platform&quot;&gt;プラットフォーム固有のフラグの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="920c16a3909f0ffbf5534e62118ba2d6b6ff57fd" translate="yes" xml:space="preserve">
          <source>More details in &lt;a href=&quot;using-warnings#options-sanity&quot;&gt;Warnings and sanity-checking&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;using-warnings#options-sanity&quot;&gt;警告と健全性チェックの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="50fd034f800c349a7431cd23c8f6ce2a124f77fa" translate="yes" xml:space="preserve">
          <source>More details:</source>
          <target state="translated">詳細はこちら</target>
        </trans-unit>
        <trans-unit id="a5c3d993dce9c18048d2dd451f76a4bbd8fe5e29" translate="yes" xml:space="preserve">
          <source>More documentation can be found in the &lt;a href=&quot;https://wiki.haskell.org/Functional_dependencies&quot;&gt;Haskell Wiki&lt;/a&gt;.</source>
          <target state="translated">その他のドキュメントは&lt;a href=&quot;https://wiki.haskell.org/Functional_dependencies&quot;&gt;Haskell Wikiにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b6ff0bd29737185cd5b1918e0904197bf24a1392" translate="yes" xml:space="preserve">
          <source>More formally, the desugaring is as follows. We write &lt;code&gt;D[ e | Q]&lt;/code&gt; to mean the desugaring of the monad comprehension &lt;code&gt;[ e | Q]&lt;/code&gt;:</source>
          <target state="translated">より正式には、desugaringは次のとおりです。私たちは書く &lt;code&gt;D[ e | Q]&lt;/code&gt; モナド理解の脱糖を意味する &lt;code&gt;[ e | Q]&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="2085068fa8f84e11b2c779916cc311b96fc67d3f" translate="yes" xml:space="preserve">
          <source>More generally, dependencies take the form &lt;code&gt;x1 ... xn -&amp;gt; y1 ... ym&lt;/code&gt;, where &lt;code&gt;x1&lt;/code&gt;, &amp;hellip;, &lt;code&gt;xn&lt;/code&gt;, and &lt;code&gt;y1&lt;/code&gt;, &amp;hellip;, &lt;code&gt;yn&lt;/code&gt; are type variables with n&amp;gt;0 and m&amp;gt;=0, meaning that the &lt;code&gt;y&lt;/code&gt; parameters are uniquely determined by the &lt;code&gt;x&lt;/code&gt; parameters. Spaces can be used as separators if more than one variable appears on any single side of a dependency, as in &lt;code&gt;t -&amp;gt; a b&lt;/code&gt;. Note that a class may be annotated with multiple dependencies using commas as separators, as in the definition of &lt;code&gt;E&lt;/code&gt; above. Some dependencies that we can write in this notation are redundant, and will be rejected because they don&amp;rsquo;t serve any useful purpose, and may instead indicate an error in the program. Examples of dependencies like this include &lt;code&gt;a -&amp;gt; a&lt;/code&gt;, &lt;code&gt;a -&amp;gt; a a&lt;/code&gt;, &lt;code&gt;a -&amp;gt;&lt;/code&gt;, etc. There can also be some redundancy if multiple dependencies are given, as in &lt;code&gt;a-&amp;gt;b&lt;/code&gt;, &lt;code&gt;b-&amp;gt;c&lt;/code&gt;, &lt;code&gt;a-&amp;gt;c&lt;/code&gt;, and in which some subset implies the remaining dependencies. Examples like this are not treated as errors. Note that dependencies appear only in class declarations, and not in any other part of the language. In particular, the syntax for instance declarations, class constraints, and types is completely unchanged.</source>
          <target state="translated">More generally, dependencies take the form &lt;code&gt;x1 ... xn -&amp;gt; y1 ... ym&lt;/code&gt; , where &lt;code&gt;x1&lt;/code&gt; , &amp;hellip;, &lt;code&gt;xn&lt;/code&gt; , and &lt;code&gt;y1&lt;/code&gt; , &amp;hellip;, &lt;code&gt;yn&lt;/code&gt; are type variables with n&amp;gt;0 and m&amp;gt;=0, meaning that the &lt;code&gt;y&lt;/code&gt; parameters are uniquely determined by the &lt;code&gt;x&lt;/code&gt; parameters. Spaces can be used as separators if more than one variable appears on any single side of a dependency, as in &lt;code&gt;t -&amp;gt; a b&lt;/code&gt; . Note that a class may be annotated with multiple dependencies using commas as separators, as in the definition of &lt;code&gt;E&lt;/code&gt; above. Some dependencies that we can write in this notation are redundant, and will be rejected because they don&amp;rsquo;t serve any useful purpose, and may instead indicate an error in the program. Examples of dependencies like this include &lt;code&gt;a -&amp;gt; a&lt;/code&gt; , &lt;code&gt;a -&amp;gt; a a&lt;/code&gt; , &lt;code&gt;a -&amp;gt;&lt;/code&gt; , etc. There can also be some redundancy if multiple dependencies are given, as in &lt;code&gt;a-&amp;gt;b&lt;/code&gt; , &lt;code&gt;b-&amp;gt;c&lt;/code&gt; , &lt;code&gt;a-&amp;gt;c&lt;/code&gt; , and in which some subset implies the remaining dependencies. Examples like this are not treated as errors. Note that dependencies appear only in class declarations, and not in any other part of the language. In particular, the syntax for instance declarations, class constraints, and types is completely unchanged.</target>
        </trans-unit>
        <trans-unit id="2ce620eb436f6437f620c767d1f4df6c98830db2" translate="yes" xml:space="preserve">
          <source>More generally, dependencies take the form &lt;code&gt;x1 ... xn -&amp;gt; y1 ... ym&lt;/code&gt;, where &lt;code&gt;x1&lt;/code&gt;, ..., &lt;code&gt;xn&lt;/code&gt;, and &lt;code&gt;y1&lt;/code&gt;, ..., &lt;code&gt;yn&lt;/code&gt; are type variables with n&amp;gt;0 and m&amp;gt;=0, meaning that the &lt;code&gt;y&lt;/code&gt; parameters are uniquely determined by the &lt;code&gt;x&lt;/code&gt; parameters. Spaces can be used as separators if more than one variable appears on any single side of a dependency, as in &lt;code&gt;t -&amp;gt; a b&lt;/code&gt;. Note that a class may be annotated with multiple dependencies using commas as separators, as in the definition of &lt;code&gt;E&lt;/code&gt; above. Some dependencies that we can write in this notation are redundant, and will be rejected because they don&amp;rsquo;t serve any useful purpose, and may instead indicate an error in the program. Examples of dependencies like this include &lt;code&gt;a -&amp;gt; a&lt;/code&gt;, &lt;code&gt;a -&amp;gt; a a&lt;/code&gt;, &lt;code&gt;a -&amp;gt;&lt;/code&gt;, etc. There can also be some redundancy if multiple dependencies are given, as in &lt;code&gt;a-&amp;gt;b&lt;/code&gt;, &lt;code&gt;b-&amp;gt;c&lt;/code&gt;, &lt;code&gt;a-&amp;gt;c&lt;/code&gt;, and in which some subset implies the remaining dependencies. Examples like this are not treated as errors. Note that dependencies appear only in class declarations, and not in any other part of the language. In particular, the syntax for instance declarations, class constraints, and types is completely unchanged.</source>
          <target state="translated">より一般的には、依存関係は &lt;code&gt;x1 ... xn -&amp;gt; y1 ... ym&lt;/code&gt; の形式をとります。ここで、 &lt;code&gt;x1&lt;/code&gt; 、...、 &lt;code&gt;xn&lt;/code&gt; 、および &lt;code&gt;y1&lt;/code&gt; 、...、 &lt;code&gt;yn&lt;/code&gt; はn&amp;gt; 0およびm&amp;gt; = 0の型変数です。つまり、 &lt;code&gt;y&lt;/code&gt; パラメータは &lt;code&gt;x&lt;/code&gt; パラメータによって一意に決定されます。 &lt;code&gt;t -&amp;gt; a b&lt;/code&gt; ように、依存関係の片側に複数の変数が出現する場合、スペースをセパレーターとして使用できます。 &lt;code&gt;E&lt;/code&gt; の定義のように、クラスには、区切り文字としてコンマを使用して複数の依存関係で注釈を付けることができます。上記。この表記法で記述できるいくつかの依存関係は冗長であり、有用な目的を果たさないために拒否され、代わりにプログラムのエラーを示す可能性があります。このような依存関係の例としては、 &lt;code&gt;a -&amp;gt; a&lt;/code&gt; 、 &lt;code&gt;a -&amp;gt; a a&lt;/code&gt; 、 &lt;code&gt;a -&amp;gt;&lt;/code&gt; などの複数の依存関係が与えられている場合、いくつかの冗長性が存在することができ、同様に &lt;code&gt;a-&amp;gt;b&lt;/code&gt; 、 &lt;code&gt;b-&amp;gt;c&lt;/code&gt; 、 &lt;code&gt;a-&amp;gt;c&lt;/code&gt; 、そして一部のサブセットは残りの依存関係を意味します。このような例はエラーとして扱われません。依存関係はクラス宣言にのみ現れ、言語の他の部分には現れないことに注意してください。特に、インスタンス宣言、クラス制約、および型の構文は完全に変更されていません。</target>
        </trans-unit>
        <trans-unit id="174c1aad58978f69590dd72b60851d08b234e600" translate="yes" xml:space="preserve">
          <source>More in-depth information can be found on the &lt;a href=&quot;https://ghc.haskell.org/trac/ghc/wiki/Roles&quot;&gt;Roles wiki page&lt;/a&gt;</source>
          <target state="translated">より詳細な情報は&lt;a href=&quot;https://ghc.haskell.org/trac/ghc/wiki/Roles&quot;&gt;Roles wikiページにあります&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f30bdf45636fdc98dcf55a5628219c150e7f67cd" translate="yes" xml:space="preserve">
          <source>More in-depth information can be found on the &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/roles&quot;&gt;Roles wiki page&lt;/a&gt;</source>
          <target state="translated">より詳細な情報は、&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/roles&quot;&gt;Roleswikiページにあります。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e14ab6cf4fdb8d4413797b405b5b9102d3c1bc86" translate="yes" xml:space="preserve">
          <source>More information is given for explicit holes (i.e. ones that start with an underscore), than for out-of-scope variables, because the latter are often unintended typos, so the extra information is distracting. If you want the detailed information, use a leading underscore to make explicit your intent to use a hole.</source>
          <target state="translated">明示的な穴(アンダースコアで始まるもの)については、スコープ外の変数よりも多くの情報が与えられています。詳細な情報が必要な場合は、最初のアンダースコアを使用して、穴を使用する意図を明確にしてください。</target>
        </trans-unit>
        <trans-unit id="cdb9413519e4acd2573608f8f06f43a109139ea4" translate="yes" xml:space="preserve">
          <source>More precisely, the scoping rules are:</source>
          <target state="translated">より正確には、スコーピングルールです。</target>
        </trans-unit>
        <trans-unit id="1f08e1cae5fd42d45181559f708b9f948ac50f46" translate="yes" xml:space="preserve">
          <source>More precisely, the semantics of pattern matching is given in &lt;a href=&quot;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-580003.17&quot;&gt;Section 3.17 of the Haskell 2010 report&lt;/a&gt;. To the informal semantics in Section 3.17.2 we add this extra rule:</source>
          <target state="translated">より正確には、パターンマッチングのセマンティクス&lt;a href=&quot;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-580003.17&quot;&gt;は、Haskell 2010レポートのセクション3.17に記載されてい&lt;/a&gt;ます。セクション3.17.2の非公式なセマンティクスに、次の追加ルールを追加します。</target>
        </trans-unit>
        <trans-unit id="e4c589fb3b275a240038aa72aafa4cfbf0c4831b" translate="yes" xml:space="preserve">
          <source>More precisely, warn if a binding brings into scope a variable that is not used, except if the variable&amp;rsquo;s name starts with an underscore. The &amp;ldquo;starts-with-underscore&amp;rdquo; condition provides a way to selectively disable the warning.</source>
          <target state="translated">より正確には、変数の名前がアンダースコアで始まる場合を除いて、バインディングが使用されていない変数をスコープに入れる場合に警告します。「starts-with-underscore」条件は、警告を選択的に無効にする方法を提供します。</target>
        </trans-unit>
        <trans-unit id="4e142cf9dbc576682f7db5f9767bc39f19e16ad2" translate="yes" xml:space="preserve">
          <source>More sophisticated combinators for expressing parallelism are available from the &lt;code&gt;Control.Parallel.Strategies&lt;/code&gt; module in the &lt;a href=&quot;http://hackage.haskell.org/package/parallel&quot;&gt;parallel package&lt;/a&gt;. This module builds functionality around &lt;code&gt;par&lt;/code&gt;, expressing more elaborate patterns of parallel computation, such as parallel &lt;code&gt;map&lt;/code&gt;.</source>
          <target state="translated">並列処理を表現するためのより洗練されたコンビネータは、&lt;a href=&quot;http://hackage.haskell.org/package/parallel&quot;&gt;並列パッケージの&lt;/a&gt; &lt;code&gt;Control.Parallel.Strategies&lt;/code&gt; モジュールから利用できます。このモジュールは、 &lt;code&gt;par&lt;/code&gt; を中心に機能を構築し、並列 &lt;code&gt;map&lt;/code&gt; などの並列計算のより精巧なパターンを表現します。</target>
        </trans-unit>
        <trans-unit id="7efbe8954f7d8bb33318735e14097d00de7a9a64" translate="yes" xml:space="preserve">
          <source>More specifically these byte strings are taken to be in the subset of Unicode covered by code points 0-255. This covers Unicode Basic Latin, Latin-1 Supplement and C0+C1 Controls.</source>
          <target state="translated">よ り 具体的には、 こ れ ら のバ イ ト 文字列は、 コ ー ド ポ イ ン ト 0 ~ 255 でカバー さ れてい る Unicode のサブセ ッ ト 内にあ る と 見な さ れます。これは Unicode Basic Latin、Latin-1 Supplement、C0+C1 Controls をカバーしています。</target>
        </trans-unit>
        <trans-unit id="86749f35327922682f80058567d622a5b5a74e48" translate="yes" xml:space="preserve">
          <source>More specifically, consider the following modules:</source>
          <target state="translated">具体的には、以下のモジュールを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="49ae26a58091afd7797c7d608cef98d9b3bd88ed" translate="yes" xml:space="preserve">
          <source>More substantially, an anonymous records library could provide &lt;code&gt;HasField&lt;/code&gt; instances for its anonymous records, and thus be compatible with the polymorphic record selectors introduced by this proposal. For example, something like this makes it possible to use &lt;code&gt;getField&lt;/code&gt; to access &lt;code&gt;Record&lt;/code&gt; values with the appropriate string in the type-level list of fields:</source>
          <target state="translated">より実質的には、匿名レコードライブラリは、匿名レコードの &lt;code&gt;HasField&lt;/code&gt; インスタンスを提供できるため、この提案で導入された多態性レコードセレクターと互換性があります。たとえば、次のようなものにより、 &lt;code&gt;getField&lt;/code&gt; を使用して、タイプレベルのフィールドリスト内の適切な文字列で &lt;code&gt;Record&lt;/code&gt; 値にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="48fbf1fc9f3d27864af0185af07555a2ed71738b" translate="yes" xml:space="preserve">
          <source>Moreover genuninely-recursive superclasses are sometimes useful. Here&amp;rsquo;s a real-life example (#10318)</source>
          <target state="translated">Moreover genuninely-recursive superclasses are sometimes useful. Here&amp;rsquo;s a real-life example (#10318)</target>
        </trans-unit>
        <trans-unit id="aee6d8add66d57251c294e797e38ba98f856c59e" translate="yes" xml:space="preserve">
          <source>Moreover genuninely-recursive superclasses are sometimes useful. Here&amp;rsquo;s a real-life example (Trac #10318)</source>
          <target state="translated">さらに、正規再帰的なスーパークラスが役立つこともあります。これが実際の例です（Trac＃10318）</target>
        </trans-unit>
        <trans-unit id="2b9d1405f104daf49ed40d4d63a24458c96232a6" translate="yes" xml:space="preserve">
          <source>Moreover you often don&amp;rsquo;t even need the &lt;a href=&quot;#pragma-SPECIALIZE&quot;&gt;&lt;code&gt;SPECIALIZE&lt;/code&gt;&lt;/a&gt; pragma in the first place. When compiling a module &lt;code&gt;M&lt;/code&gt;, GHC&amp;rsquo;s optimiser (when given the &lt;a href=&quot;using-optimisation#ghc-flag--O&quot;&gt;&lt;code&gt;-O&lt;/code&gt;&lt;/a&gt; flag) automatically considers each top-level overloaded function declared in &lt;code&gt;M&lt;/code&gt;, and specialises it for the different types at which it is called in &lt;code&gt;M&lt;/code&gt;. The optimiser &lt;em&gt;also&lt;/em&gt; considers each &lt;em&gt;imported&lt;/em&gt;&lt;a href=&quot;#pragma-INLINABLE&quot;&gt;&lt;code&gt;INLINABLE&lt;/code&gt;&lt;/a&gt; overloaded function, and specialises it for the different types at which it is called in &lt;code&gt;M&lt;/code&gt;. So in our example, it would be enough for &lt;code&gt;lookup&lt;/code&gt; to be called at type &lt;code&gt;T&lt;/code&gt;:</source>
          <target state="translated">さらに、そもそも&lt;a href=&quot;#pragma-SPECIALIZE&quot;&gt; &lt;code&gt;SPECIALIZE&lt;/code&gt; &lt;/a&gt;プラグマさえ必要としないことがよくあります。モジュールのコンパイル時に &lt;code&gt;M&lt;/code&gt; を、（所与GHCのオプティマイザ&lt;a href=&quot;using-optimisation#ghc-flag--O&quot;&gt; &lt;code&gt;-O&lt;/code&gt; の&lt;/a&gt;フラグ）が自動的に宣言された各トップレベルの多重定義関数考慮 &lt;code&gt;M&lt;/code&gt; を、それが中に呼び出された時に、異なるタイプのためにそれを専門 &lt;code&gt;M&lt;/code&gt; 。オプティマイザは&lt;em&gt;また、&lt;/em&gt;各考慮&lt;em&gt;インポート&lt;/em&gt;&lt;a href=&quot;#pragma-INLINABLE&quot;&gt; &lt;code&gt;INLINABLE&lt;/code&gt; &lt;/a&gt;オーバーロードされた関数を、それが中に呼び出された時に、異なるタイプのためにそれを専門 &lt;code&gt;M&lt;/code&gt; 。したがって、この例では、タイプ &lt;code&gt;T&lt;/code&gt; で &lt;code&gt;lookup&lt;/code&gt; を呼び出すだけで十分です。</target>
        </trans-unit>
        <trans-unit id="1b09c524376f62eb132cfc4d87068c7c414ce987" translate="yes" xml:space="preserve">
          <source>Moreover, GHC will only inline the function if it is &lt;em&gt;fully applied&lt;/em&gt;, where &amp;ldquo;fully applied&amp;rdquo; means applied to as many arguments as appear (syntactically) on the LHS of the function definition. For example:</source>
          <target state="translated">さらに、GHCは関数が&lt;em&gt;完全に適用された&lt;/em&gt;場合にのみ関数をインライン化します。「完全に適用された」とは、関数定義のLHSに現れる（構文的に）できるだけ多くの引数に適用されることを意味します。例えば：</target>
        </trans-unit>
        <trans-unit id="6284ba052c710bcfe1b333b0499c004a62fd7cbd" translate="yes" xml:space="preserve">
          <source>Moreover, a local fixity declaration &lt;em&gt;must&lt;/em&gt; accompany a local binding of that name: it is not possible to revise the fixity of name bound elsewhere, as in</source>
          <target state="translated">さらに、ローカルの固定性宣言はその名前のローカルバインディングを伴う&lt;em&gt;必要があり&lt;/em&gt;ます。次のように、他の場所にバインドされた名前の固定性を変更することはできません。</target>
        </trans-unit>
        <trans-unit id="435226f4fb8d01545e71ad9e8e0b16ea37149391" translate="yes" xml:space="preserve">
          <source>Moreover, every module that imports &lt;code&gt;Client&lt;/code&gt; (or imports a module that imports &lt;code&gt;Client&lt;/code&gt;, transitively) will &amp;ldquo;see&amp;rdquo;, and make use of, the specialised version of &lt;code&gt;lookup&lt;/code&gt;. You don&amp;rsquo;t need to put a &lt;a href=&quot;#pragma-SPECIALIZE&quot;&gt;&lt;code&gt;SPECIALIZE&lt;/code&gt;&lt;/a&gt; pragma in every module.</source>
          <target state="translated">また、すべてのモジュールをインポートしている &lt;code&gt;Client&lt;/code&gt; （輸入というか、輸入モジュール &lt;code&gt;Client&lt;/code&gt; 「を参照してください」、との使用を作り、専用バージョンのでしょう推移は、） &lt;code&gt;lookup&lt;/code&gt; 。すべてのモジュールに&lt;a href=&quot;#pragma-SPECIALIZE&quot;&gt; &lt;code&gt;SPECIALIZE&lt;/code&gt; &lt;/a&gt;プラグマを置く必要はありません。</target>
        </trans-unit>
        <trans-unit id="641bceca79503a5b46c154c94304a197aa140c0b" translate="yes" xml:space="preserve">
          <source>Moreover, in &lt;code&gt;Applicative&lt;/code&gt; instance declarations:</source>
          <target state="translated">さらに、 &lt;code&gt;Applicative&lt;/code&gt; インスタンス宣言では：</target>
        </trans-unit>
        <trans-unit id="97508f66cdde54922c388601bbdb4ef006e66daf" translate="yes" xml:space="preserve">
          <source>Moreover, in &lt;code&gt;MonadFail&lt;/code&gt; instance declarations:</source>
          <target state="translated">さらに、 &lt;code&gt;MonadFail&lt;/code&gt; インスタンス宣言では：</target>
        </trans-unit>
        <trans-unit id="667b008ae7d33f2434031b95fad3289972f0f759" translate="yes" xml:space="preserve">
          <source>Moreover, in &lt;code&gt;Semigroup&lt;/code&gt; instance declarations:</source>
          <target state="translated">さらに、 &lt;code&gt;Semigroup&lt;/code&gt; インスタンス宣言では：</target>
        </trans-unit>
        <trans-unit id="9b463d35e3037a7b25fba6436d573b43c738063f" translate="yes" xml:space="preserve">
          <source>Moreover, we can ask &lt;code&gt;gdb&lt;/code&gt; to tell us the flow of execution that lead us to this point in the program,</source>
          <target state="translated">さらに、プログラムのこの時点に至るまでの実行フローを &lt;code&gt;gdb&lt;/code&gt; に要求することができます。</target>
        </trans-unit>
        <trans-unit id="8feac72447d42dc6b03b07306f6ad6196a53f4dd" translate="yes" xml:space="preserve">
          <source>Most GHC users will not need to worry about levity polymorphism or unboxed types. For these users, seeing the levity polymorphism in the type of &lt;code&gt;$&lt;/code&gt; is unhelpful. And thus, by default, it is suppressed, by supposing all type variables of type &lt;code&gt;RuntimeRep&lt;/code&gt; to be &lt;code&gt;'LiftedRep&lt;/code&gt; when printing, and printing &lt;code&gt;TYPE 'LiftedRep&lt;/code&gt; as &lt;code&gt;Type&lt;/code&gt; (or &lt;code&gt;*&lt;/code&gt; when &lt;a href=&quot;#extension-StarIsType&quot;&gt;&lt;code&gt;StarIsType&lt;/code&gt;&lt;/a&gt; is on).</source>
          <target state="translated">ほとんどのGHCユーザーは、レビティポリモーフィズムやボックス化されていない型について心配する必要はありません。これらのユーザーにとって、 &lt;code&gt;$&lt;/code&gt; のタイプで軽度のポリモーフィズムを見ることは役に立ちません。したがって、デフォルトでは、タイプ &lt;code&gt;RuntimeRep&lt;/code&gt; のすべてのタイプ変数が印刷時に &lt;code&gt;'LiftedRep&lt;/code&gt; であり、 &lt;code&gt;TYPE 'LiftedRep&lt;/code&gt; を &lt;code&gt;Type&lt;/code&gt; として印刷する（または &lt;code&gt;*&lt;/code&gt; &lt;a href=&quot;#extension-StarIsType&quot;&gt; &lt;code&gt;StarIsType&lt;/code&gt; &lt;/a&gt;がオンの場合）と仮定することにより、抑制されます。</target>
        </trans-unit>
        <trans-unit id="a9bfd07736bd17bc98ea30aef5ff00a2993638a7" translate="yes" xml:space="preserve">
          <source>Most handles will also have a current I/O position indicating where the next input or output operation will occur. A handle is &lt;em&gt;readable&lt;/em&gt; if it manages only input or both input and output; likewise, it is &lt;em&gt;writable&lt;/em&gt; if it manages only output or both input and output. A handle is &lt;em&gt;open&lt;/em&gt; when first allocated. Once it is closed it can no longer be used for either input or output, though an implementation cannot re-use its storage while references remain to it. Handles are in the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; classes. The string produced by showing a handle is system dependent; it should include enough information to identify the handle for debugging. A handle is equal according to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; only to itself; no attempt is made to compare the internal state of different handles for equality.</source>
          <target state="translated">ほとんどのハンドルには、次の入力または出力操作が発生する場所を示す現在のI / O位置もあります。ハンドルは、入力のみ、または入力と出力の両方を管理する場合は&lt;em&gt;読み取り可能&lt;/em&gt;です。同様に、出力のみ、または入力と出力の両方を管理する場合は、&lt;em&gt;書き込み可能です&lt;/em&gt;。ハンドルは、最初に割り当てられたときに&lt;em&gt;開いてい&lt;/em&gt;ます。いったん閉じると、入力または出力のどちらにも使用できなくなりますが、参照はそのままで、実装はストレージを再利用できません。ハンドルは &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; クラスと &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; クラスにあります。ハンドルを表示することによって生成される文字列はシステムに依存します。デバッグ用のハンドルを識別するのに十分な情報が含まれている必要があります。ハンドルは次のように等しい &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; 自分自身にのみ;異なるハンドルの内部状態が等しいかどうかを比較する試みは行われません。</target>
        </trans-unit>
        <trans-unit id="56a261d402c64f03bfdfa4dbbe6dc5df89e9511b" translate="yes" xml:space="preserve">
          <source>Most handles will also have a current I/O position indicating where the next input or output operation will occur. A handle is &lt;em&gt;readable&lt;/em&gt; if it manages only input or both input and output; likewise, it is &lt;em&gt;writable&lt;/em&gt; if it manages only output or both input and output. A handle is &lt;em&gt;open&lt;/em&gt; when first allocated. Once it is closed it can no longer be used for either input or output, though an implementation cannot re-use its storage while references remain to it. Handles are in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; classes. The string produced by showing a handle is system dependent; it should include enough information to identify the handle for debugging. A handle is equal according to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; only to itself; no attempt is made to compare the internal state of different handles for equality.</source>
          <target state="translated">Most handles will also have a current I/O position indicating where the next input or output operation will occur. A handle is &lt;em&gt;readable&lt;/em&gt; if it manages only input or both input and output; likewise, it is &lt;em&gt;writable&lt;/em&gt; if it manages only output or both input and output. A handle is &lt;em&gt;open&lt;/em&gt; when first allocated. Once it is closed it can no longer be used for either input or output, though an implementation cannot re-use its storage while references remain to it. Handles are in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; classes. The string produced by showing a handle is system dependent; it should include enough information to identify the handle for debugging. A handle is equal according to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; only to itself; no attempt is made to compare the internal state of different handles for equality.</target>
        </trans-unit>
        <trans-unit id="d2995cc8024bf7aa8ba13dcae171563836b90420" translate="yes" xml:space="preserve">
          <source>Most handles will also have a current I/O position indicating where the next input or output operation will occur. A handle is &lt;em&gt;readable&lt;/em&gt; if it manages only input or both input and output; likewise, it is &lt;em&gt;writable&lt;/em&gt; if it manages only output or both input and output. A handle is &lt;em&gt;open&lt;/em&gt; when first allocated. Once it is closed it can no longer be used for either input or output, though an implementation cannot re-use its storage while references remain to it. Handles are in the &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; classes. The string produced by showing a handle is system dependent; it should include enough information to identify the handle for debugging. A handle is equal according to &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; only to itself; no attempt is made to compare the internal state of different handles for equality.</source>
          <target state="translated">ほとんどのハンドルには、次の入力または出力操作が発生する場所を示す現在のI / O位置もあります。ハンドルは、入力のみ、または入力と出力の両方を管理する場合は&lt;em&gt;読み取り可能&lt;/em&gt;です。同様に、出力のみ、または入力と出力の両方を管理する場合は、&lt;em&gt;書き込み可能です&lt;/em&gt;。ハンドルは、最初に割り当てられたときに&lt;em&gt;開いてい&lt;/em&gt;ます。いったん閉じると、入力または出力のどちらにも使用できなくなりますが、参照はそのままで、実装はストレージを再利用できません。ハンドルは &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; クラスと &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; クラスにあります。ハンドルを表示することによって生成される文字列はシステムに依存します。デバッグ用のハンドルを識別するのに十分な情報が含まれている必要があります。ハンドルは &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; に従って等しい自分自身にのみ;異なるハンドルの内部状態が等しいかどうかを比較する試みは行われません。</target>
        </trans-unit>
        <trans-unit id="9be69b82ce264090f2137a15a7648633cb206f8e" translate="yes" xml:space="preserve">
          <source>Most monad transformer modules include the special case of applying the transformer to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor-identity#v:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt;. For example, &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:State&quot;&gt;State&lt;/a&gt; s&lt;/code&gt; is an abbreviation for &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:StateT&quot;&gt;StateT&lt;/a&gt; s &lt;a href=&quot;../base-4.13.0.0/data-functor-identity#v:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどのモナド変換モジュールには、変換を &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor-identity#v:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt; に適用する特別なケースが含まれています。たとえば、 &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:State&quot;&gt;State&lt;/a&gt; s&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:StateT&quot;&gt;StateT&lt;/a&gt; s &lt;a href=&quot;../base-4.13.0.0/data-functor-identity#v:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt; の省略形です。</target>
        </trans-unit>
        <trans-unit id="f0c60abd2cf0ff60dc7be795cfcb03f696cc8115" translate="yes" xml:space="preserve">
          <source>Most monad transformer modules include the special case of applying the transformer to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor-identity#v:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt;. For example, &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:State&quot;&gt;State&lt;/a&gt; s&lt;/code&gt; is an abbreviation for &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:StateT&quot;&gt;StateT&lt;/a&gt; s &lt;a href=&quot;../base-4.14.1.0/data-functor-identity#v:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Most monad transformer modules include the special case of applying the transformer to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor-identity#v:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt; . For example, &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:State&quot;&gt;State&lt;/a&gt; s&lt;/code&gt; is an abbreviation for &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:StateT&quot;&gt;StateT&lt;/a&gt; s &lt;a href=&quot;../base-4.14.1.0/data-functor-identity#v:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1446d57bbc11269458b5fff18c4a2fbea47e1423" translate="yes" xml:space="preserve">
          <source>Most of the command-line options accepted by GHC (see &lt;a href=&quot;using#using-ghc&quot;&gt;Using GHC&lt;/a&gt;) also make sense in interactive mode. The ones that don&amp;rsquo;t make sense are mostly obvious.</source>
          <target state="translated">GHC（&lt;a href=&quot;using#using-ghc&quot;&gt;GHCの使用を&lt;/a&gt;参照）で受け入れられるコマンドラインオプションのほとんどは、インタラクティブモードでも有効です。意味をなさないものはほとんど明らかです。</target>
        </trans-unit>
        <trans-unit id="d49b83194eaa0ec88c028d8df0d8eb5797ada48a" translate="yes" xml:space="preserve">
          <source>Most of the conventions GHC expects when using packages are described in &lt;a href=&quot;packages#building-packages&quot;&gt;Building a package from Haskell source&lt;/a&gt;. In addition note that GHC expects the &lt;code&gt;.hi&lt;/code&gt; files to use the extension &lt;code&gt;.dyn_hi&lt;/code&gt;. The other requirements are the same as for C libraries and are described below, in particular the use of the flags &lt;a href=&quot;phases#ghc-flag--dynamic&quot;&gt;&lt;code&gt;-dynamic&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;phases#ghc-flag--fPIC&quot;&gt;&lt;code&gt;-fPIC&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;phases#ghc-flag--shared&quot;&gt;&lt;code&gt;-shared&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パッケージの使用時にGHCが期待するほとんどの規則は、&lt;a href=&quot;packages#building-packages&quot;&gt;Haskellソースからのパッケージのビルドで&lt;/a&gt;説明されています。さらに、GHCは &lt;code&gt;.hi&lt;/code&gt; ファイルが拡張子 &lt;code&gt;.dyn_hi&lt;/code&gt; を使用することを期待していることに注意してください。その他の要件はCライブラリの場合と同じであり、以下で説明します。特に、フラグ&lt;a href=&quot;phases#ghc-flag--dynamic&quot;&gt; &lt;code&gt;-dynamic&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;phases#ghc-flag--fPIC&quot;&gt; &lt;code&gt;-fPIC&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;phases#ghc-flag--shared&quot;&gt; &lt;code&gt;-shared&lt;/code&gt; の&lt;/a&gt;使用について説明します。</target>
        </trans-unit>
        <trans-unit id="c17ee9cdb3b8c7cbc538d3e35bb5401d0f3d8af1" translate="yes" xml:space="preserve">
          <source>Most of the functions in this module are subject to &lt;em&gt;fusion&lt;/em&gt;, meaning that a pipeline of such functions will usually allocate at most one &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="translated">このモジュールの関数のほとんどはの対象と&lt;em&gt;融合&lt;/em&gt;、このような機能のパイプラインは通常、ほとんど1つのに割り当てることを意味、 &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="cff6fb1dc40bd9bd236bb1c241939a66f53cfba3" translate="yes" xml:space="preserve">
          <source>Most of the functions in this module are subject to &lt;em&gt;fusion&lt;/em&gt;, meaning that a pipeline of such functions will usually allocate at most one &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="translated">このモジュールの関数のほとんどはの対象と&lt;em&gt;融合&lt;/em&gt;、このような機能のパイプラインは通常、ほとんど1つのに割り当てることを意味、 &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="3b644a39e26dfc78bdc3acb69da17cabd5dd58c1" translate="yes" xml:space="preserve">
          <source>Most of the performance gain stems from using &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:primMapListBounded&quot;&gt;primMapListBounded&lt;/a&gt;&lt;/code&gt;, which encodes a list of values from left-to-right with a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;. It exploits the &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; internals to avoid unnecessary function compositions (i.e., concatenations). In the future, we might expect the compiler to perform the optimizations implemented in &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:primMapListBounded&quot;&gt;primMapListBounded&lt;/a&gt;&lt;/code&gt;. However, it seems that the code is currently to complicated for the compiler to see through. Therefore, we provide the &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; escape hatch, which allows data structures to provide very efficient encoding traversals, like &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:primMapListBounded&quot;&gt;primMapListBounded&lt;/a&gt;&lt;/code&gt; for lists.</source>
          <target state="translated">パフォーマンスの向上のほとんどは、値のリストを &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:primMapListBounded&quot;&gt;primMapListBounded&lt;/a&gt;&lt;/code&gt; で左から右にエンコードするprimMapListBoundedを使用することから &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; ます。 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 内部構造を利用して、不要な関数構成（つまり、連結）を回避します。将来的には、コンパイラーが &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:primMapListBounded&quot;&gt;primMapListBounded&lt;/a&gt;&lt;/code&gt; に実装された最適化を実行することを期待するかもしれません。ただし、コンパイラが完全に見通せるように、コードは現在複雑すぎるようです。したがって、 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; エスケープハッチを提供します。これにより、リストの &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:primMapListBounded&quot;&gt;primMapListBounded&lt;/a&gt;&lt;/code&gt; のように、データ構造で非常に効率的なエンコーディングトラバーサルを提供できます。</target>
        </trans-unit>
        <trans-unit id="93a85b72f189888c0727de2215a65f643a090a37" translate="yes" xml:space="preserve">
          <source>Most of these options are boolean and have options to turn them both &amp;ldquo;on&amp;rdquo; and &amp;ldquo;off&amp;rdquo; (beginning with the prefix &lt;code&gt;no-&lt;/code&gt;). For instance, while &lt;code&gt;-fspecialise&lt;/code&gt; enables specialisation, &lt;code&gt;-fno-specialise&lt;/code&gt; disables it. When multiple flags for the same option appear in the command-line they are evaluated from left to right. For instance, &lt;code&gt;-fno-specialise -fspecialise&lt;/code&gt; will enable specialisation.</source>
          <target state="translated">これらのオプションのほとんどはブール値であり、「オン」と「オフ」の両方をオンにするオプションがあります（先頭は &lt;code&gt;no-&lt;/code&gt; で始まります）。たとえば、 &lt;code&gt;-fspecialise&lt;/code&gt; は特殊化を有効にしますが、 &lt;code&gt;-fno-specialise&lt;/code&gt; はそれを無効にします。同じオプションの複数のフラグがコマンドラインに表示される場合、それらは左から右に評価されます。たとえば、 &lt;code&gt;-fno-specialise -fspecialise&lt;/code&gt; は特殊化を有効にします。</target>
        </trans-unit>
        <trans-unit id="b4872c5b9a708f91ab972a558b461f19d44ba677" translate="yes" xml:space="preserve">
          <source>Most packages (see &lt;a href=&quot;packages#using-packages&quot;&gt;Using Packages&lt;/a&gt;) are available without needing to specify any extra flags at all: they will be automatically loaded the first time they are needed.</source>
          <target state="translated">ほとんどのパッケージ（「&lt;a href=&quot;packages#using-packages&quot;&gt;パッケージの使用&lt;/a&gt;」を参照）は、追加のフラグをまったく指定する必要なく使用できます。それらは、最初に必要になったときに自動的にロードされます。</target>
        </trans-unit>
        <trans-unit id="f17588b3f000b1c04f72f8264ac2012d913333ca" translate="yes" xml:space="preserve">
          <source>Most profiling runtime options are only available when you compile your program for profiling (see &lt;a href=&quot;profiling#prof-compiler-options&quot;&gt;Compiler options for profiling&lt;/a&gt;, and &lt;a href=&quot;profiling#rts-options-heap-prof&quot;&gt;RTS options for heap profiling&lt;/a&gt; for the runtime options). However, there is one profiling option that is available for ordinary non-profiled executables:</source>
          <target state="translated">ほとんどのプロファイリングランタイムオプションは、プロファイリング用にプログラムをコンパイルする場合にのみ使用できます（プロファイリング用の&lt;a href=&quot;profiling#prof-compiler-options&quot;&gt;コンパイラオプション&lt;/a&gt;およびランタイムオプション&lt;a href=&quot;profiling#rts-options-heap-prof&quot;&gt;用のヒーププロファイリング&lt;/a&gt;用のRTSオプションを参照）。ただし、通常のプロファイルされていない実行可能ファイルで使用できるプロファイリングオプションが1つあります。</target>
        </trans-unit>
        <trans-unit id="7dd31ae39f49dd0f0c21b3aa4545a982531a6c6b" translate="yes" xml:space="preserve">
          <source>Most programs should not worry about the canonicity of a path. In particular, despite the name, the function does not truly guarantee canonicity of the returned path due to the presence of hard links, mount points, etc.</source>
          <target state="translated">ほとんどのプログラムでは、パスのカノニシティを気にする必要はありません。特に、この関数は名前にもかかわらず、ハードリンクやマウントポイントなどが存在するため、返されるパスの正統性を真に保証するものではありません。</target>
        </trans-unit>
        <trans-unit id="f735bd28bb08e83da41ac3d34e730c92c26193d9" translate="yes" xml:space="preserve">
          <source>Most specific instance, &lt;code&gt;Ix&lt;/code&gt;, defined in an &lt;code&gt;-XSafe&lt;/code&gt; compiled module.</source>
          <target state="translated">&lt;code&gt;-XSafe&lt;/code&gt; コンパイル済みモジュールで定義されている最も具体的なインスタンス、 &lt;code&gt;Ix&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="16ea8e72c52685784f78037d3d05d2240b22d1c7" translate="yes" xml:space="preserve">
          <source>Most types in GHC are boxed, which means that values of that type are represented by a pointer to a heap object. The representation of a Haskell &lt;code&gt;Int&lt;/code&gt;, for example, is a two-word heap object. An unboxed type, however, is represented by the value itself, no pointers or heap allocation are involved.</source>
          <target state="translated">GHCのほとんどの型はボックス化されています。つまり、その型の値はヒープオブジェクトへのポインターによって表されます。たとえば、Haskell &lt;code&gt;Int&lt;/code&gt; の表現は、2ワードのヒープオブジェクトです。ただし、ボックス化されていないタイプは値自体によって表され、ポインターやヒープの割り当ては関係しません。</target>
        </trans-unit>
        <trans-unit id="26a91b89d1f0afee1a3b838d3e07c9dda8c7019a" translate="yes" xml:space="preserve">
          <source>Most users don&amp;rsquo;t need to worry about the details described in this section. This discussion is primarily targeted at tooling authors who need to interpret the GHC-specific DWARF annotations contained in compiled binaries.</source>
          <target state="translated">ほとんどのユーザーは、このセクションで説明されている詳細について心配する必要はありません。この議論は主に、コンパイルされたバイナリに含まれるGHC固有のDWARFアノテーションを解釈する必要があるツール作成者を対象としています。</target>
        </trans-unit>
        <trans-unit id="50978952002c3f3475a398ad4c47f7515dcb5f8c" translate="yes" xml:space="preserve">
          <source>Move forward ⟨n⟩ steps in the history. ⟨n⟩ is one if omitted. See &lt;a href=&quot;#tracing&quot;&gt;Tracing and history&lt;/a&gt; for more about GHCi&amp;rsquo;s debugging facilities. See also: &lt;a href=&quot;#ghci-cmd-:trace&quot;&gt;&lt;code&gt;:trace&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:history&quot;&gt;&lt;code&gt;:history&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:back&quot;&gt;&lt;code&gt;:back&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">履歴の「n」ステップ先に進みます。省略した場合、「n」は1です。GHCiのデバッグ機能の詳細については、&lt;a href=&quot;#tracing&quot;&gt;トレースと履歴&lt;/a&gt;を参照してください。&lt;a href=&quot;#ghci-cmd-:trace&quot;&gt; &lt;code&gt;:trace&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ghci-cmd-:history&quot;&gt; &lt;code&gt;:history&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ghci-cmd-:back&quot;&gt; &lt;code&gt;:back&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="0ba04ac0c40eac8685578c04462bb11965eb4878" translate="yes" xml:space="preserve">
          <source>Move the last two elements from the end of the first list onto the beginning of the second one.</source>
          <target state="translated">最初のリストの最後の2つの要素を2番目のリストの最初に移動します。</target>
        </trans-unit>
        <trans-unit id="2bb8ee2f3add85c2116c7a3a51024dad403c385b" translate="yes" xml:space="preserve">
          <source>MoveFileFlag</source>
          <target state="translated">MoveFileFlag</target>
        </trans-unit>
        <trans-unit id="5a8dfd20d44353d4ab01bf308e18462987143fb9" translate="yes" xml:space="preserve">
          <source>Moved to their own module to not bloat GHC.Float further.</source>
          <target state="translated">さらにGHC.Floatを肥大化させないために、独自のモジュールに移動しました。</target>
        </trans-unit>
        <trans-unit id="14766b11b99f48495ad4c21d250367a73f20edac" translate="yes" xml:space="preserve">
          <source>Msg</source>
          <target state="translated">Msg</target>
        </trans-unit>
        <trans-unit id="d136009ea859ae789c419997ed8d15cac71cf2c5" translate="yes" xml:space="preserve">
          <source>Much like lists can be constructed and matched using the &lt;code&gt;:&lt;/code&gt; and &lt;code&gt;[]&lt;/code&gt; constructors, sequences can be constructed and matched using the &lt;code&gt;&lt;a href=&quot;data-sequence#v:Empty&quot;&gt;Empty&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v::-60--124-&quot;&gt;:&amp;lt;|&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;data-sequence#v::-124--62-&quot;&gt;:|&amp;gt;&lt;/a&gt;&lt;/code&gt; pattern synonyms.</source>
          <target state="translated">&lt;code&gt;:&lt;/code&gt; および &lt;code&gt;[]&lt;/code&gt; コンストラクタを使用してリストを作成および照合できるように、 &lt;code&gt;&lt;a href=&quot;data-sequence#v:Empty&quot;&gt;Empty&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-sequence#v::-60--124-&quot;&gt;:&amp;lt;|&lt;/a&gt;&lt;/code&gt; を使用してシーケンスを作成および照合できます。、および &lt;code&gt;&lt;a href=&quot;data-sequence#v::-124--62-&quot;&gt;:|&amp;gt;&lt;/a&gt;&lt;/code&gt; パターンの同義語。</target>
        </trans-unit>
        <trans-unit id="3985ab0ae942e14710d14c6d2571f7087252a32c" translate="yes" xml:space="preserve">
          <source>Much of &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt;s interface can be implemented with &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:alter&quot;&gt;alter&lt;/a&gt;&lt;/code&gt;. Some of the rest can be implemented with a new &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; function and either &lt;code&gt;&lt;a href=&quot;data-monoid#t:First&quot;&gt;First&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-monoid#t:Last&quot;&gt;Last&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; のインタフェースの多くは、 &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:alter&quot;&gt;alter&lt;/a&gt;&lt;/code&gt; を使用して実装できます。残りの一部は、新しい &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; 関数と &lt;code&gt;&lt;a href=&quot;data-monoid#t:First&quot;&gt;First&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-monoid#t:Last&quot;&gt;Last&lt;/a&gt;&lt;/code&gt; のいずれかで実装できます。</target>
        </trans-unit>
        <trans-unit id="5cc6d803a39452a5550042d0878f9a4d2b3338ea" translate="yes" xml:space="preserve">
          <source>Multi-parameter type classes are permitted, with extension &lt;a href=&quot;#extension-MultiParamTypeClasses&quot;&gt;&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">&lt;a href=&quot;#extension-MultiParamTypeClasses&quot;&gt; &lt;code&gt;MultiParamTypeClasses&lt;/code&gt; という&lt;/a&gt;拡張子を持つ、マルチパラメータータイプのクラスが許可されます。例えば：</target>
        </trans-unit>
        <trans-unit id="791ab6cd505e26e3db8530867157bb7dff3226cc" translate="yes" xml:space="preserve">
          <source>Multi-signal a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#t:TSem&quot;&gt;TSem&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#t:TSem&quot;&gt;TSem&lt;/a&gt;&lt;/code&gt; のマルチシグナル</target>
        </trans-unit>
        <trans-unit id="cb0ebb79c7eefbdf0b5b3cf945169c1e60647b5a" translate="yes" xml:space="preserve">
          <source>Multi-way Trees and Forests</source>
          <target state="translated">多方向の樹木と森林</target>
        </trans-unit>
        <trans-unit id="639132eb39afa461a8de30e021cb71678c2bd9f6" translate="yes" xml:space="preserve">
          <source>Multi-way if expressions introduce a new layout context. So the example above is equivalent to:</source>
          <target state="translated">多元的な if 式は新しいレイアウトコンテキストを導入します。つまり、上の例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="9be2f47cbdcfe4a4ba58091a84da2eccde0463fc" translate="yes" xml:space="preserve">
          <source>MultiParamTypeClasses</source>
          <target state="translated">MultiParamTypeClasses</target>
        </trans-unit>
        <trans-unit id="16bfc155ed662e5fdfa3b7a44cb917e2896838df" translate="yes" xml:space="preserve">
          <source>MultiShot</source>
          <target state="translated">MultiShot</target>
        </trans-unit>
        <trans-unit id="7081cd2ce6a6f92ebb8e5d3af341d3d4335873da" translate="yes" xml:space="preserve">
          <source>MultiWayIf</source>
          <target state="translated">MultiWayIf</target>
        </trans-unit>
        <trans-unit id="0393d78dbbfc9e70fdf48e5344e361858dbe507c" translate="yes" xml:space="preserve">
          <source>Multiline mode is useful when entering monadic &lt;code&gt;do&lt;/code&gt; statements:</source>
          <target state="translated">複数行モードは、モナドの &lt;code&gt;do&lt;/code&gt; ステートメントを入力するときに便利です。</target>
        </trans-unit>
        <trans-unit id="2e295ccb8d7c53c8f3ea7ba9cfb2f93b20c6dd1d" translate="yes" xml:space="preserve">
          <source>Multiplication of type-level naturals.</source>
          <target state="translated">型レベルの自然数の乗算。</target>
        </trans-unit>
        <trans-unit id="abaf136782049164460366f9afe2dee04f6b2e91" translate="yes" xml:space="preserve">
          <source>Multiply two &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;s</source>
          <target state="translated">乗算2 &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; の</target>
        </trans-unit>
        <trans-unit id="909b32ffe66a26d38ff55c0ae1de2d5a81a56aaf" translate="yes" xml:space="preserve">
          <source>Multiply two vectors element-wise.</source>
          <target state="translated">2つのベクトルを要素ごとに乗算します。</target>
        </trans-unit>
        <trans-unit id="05a69b1ec67732f09635ef86734c3b1a99517a9c" translate="yes" xml:space="preserve">
          <source>Multiply-defined array elements not checked</source>
          <target state="translated">多重定義された配列要素をチェックしない</target>
        </trans-unit>
        <trans-unit id="5848ccab6e8123c4df2d4c1561fe81cd64b56b8f" translate="yes" xml:space="preserve">
          <source>MutVar#</source>
          <target state="translated">MutVar#</target>
        </trans-unit>
        <trans-unit id="52b9d6898e795eda124f4c552cab7ce01664480c" translate="yes" xml:space="preserve">
          <source>Mutable array type, for use in the ST monad.</source>
          <target state="translated">STモナドで使用するためのミューータブル配列型。</target>
        </trans-unit>
        <trans-unit id="215e56b349d3105e5186b842d419bb7207c023b0" translate="yes" xml:space="preserve">
          <source>Mutable boxed and unboxed arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st#v:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st#v:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; モナドの可変のボックス化およびボックス化解除された配列。</target>
        </trans-unit>
        <trans-unit id="515636c71d60349203d8732bedde03c1e6d4b604" translate="yes" xml:space="preserve">
          <source>Mutable boxed and unboxed arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; モナドの可変のボックス化およびボックス化解除された配列。</target>
        </trans-unit>
        <trans-unit id="2c7c15d19968866fe48793de76acdf671dc080e3" translate="yes" xml:space="preserve">
          <source>Mutable boxed and unboxed arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-st#v:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">Mutable boxed and unboxed arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-st#v:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad.</target>
        </trans-unit>
        <trans-unit id="31247b9a8722b87ffd65d7883ea3909ce04233ac" translate="yes" xml:space="preserve">
          <source>Mutable boxed and unboxed arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">Mutable boxed and unboxed arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad.</target>
        </trans-unit>
        <trans-unit id="3bcf35d6b49f587009acea897dbec9a7205cd79b" translate="yes" xml:space="preserve">
          <source>Mutable boxed and unboxed arrays in the IO monad.</source>
          <target state="translated">IOモナドの箱付き配列と箱なし配列のミューティアブル配列。</target>
        </trans-unit>
        <trans-unit id="440cc7a8eb8ee990439d9b0c275e863e6bd50dfb" translate="yes" xml:space="preserve">
          <source>Mutable boxed and unboxed arrays in the IO monad. . Safe API only of &lt;a href=&quot;data-array-io&quot;&gt;Data.Array.IO&lt;/a&gt;.</source>
          <target state="translated">IOモナドの可変ボックス化および非ボックス化配列。。&lt;a href=&quot;data-array-io&quot;&gt;Data.Array.IO&lt;/a&gt;のみの安全なAPI 。</target>
        </trans-unit>
        <trans-unit id="3fb3ae51bcbb4d7a420b0ebdc8a4c6115c91d585" translate="yes" xml:space="preserve">
          <source>Mutable references in the (strict) ST monad.</source>
          <target state="translated">(厳密な)STモナドでの相互参照。</target>
        </trans-unit>
        <trans-unit id="42749e4461b51d539ec768df8df05dca87a2bacc" translate="yes" xml:space="preserve">
          <source>Mutable references in the IO monad.</source>
          <target state="translated">IOモナドでのミューータブル参照。</target>
        </trans-unit>
        <trans-unit id="1f817ca4b49a2a2210c658ea8fd1e259ead274d2" translate="yes" xml:space="preserve">
          <source>Mutable references in the lazy ST monad.</source>
          <target state="translated">怠惰なSTモナドでの相互参照。</target>
        </trans-unit>
        <trans-unit id="04916e4ec1fe3dc428e8538332487b612dc2bd11" translate="yes" xml:space="preserve">
          <source>Mutable, boxed, non-strict arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; モナドの可変でボックス化された非厳密な配列。型引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="211618f366b0b487ea1225369f9859d9b05e4ebf" translate="yes" xml:space="preserve">
          <source>Mutable, boxed, non-strict arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</source>
          <target state="translated">Mutable, boxed, non-strict arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</target>
        </trans-unit>
        <trans-unit id="48f88ae9ac44602611ed4f45283d41180f01bbf0" translate="yes" xml:space="preserve">
          <source>Mutable, boxed, non-strict arrays in the &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; モナドの可変でボックス化された非厳密な配列。型引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="6cb43316285255ffc42363e8387f0053efdb7cd7" translate="yes" xml:space="preserve">
          <source>Mutable, unboxed, strict arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドの可変でボックス化されていない厳密な配列。型引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a301c7b2f899d4e9c83b2d431bcea04bd569480b" translate="yes" xml:space="preserve">
          <source>Mutable, unboxed, strict arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</source>
          <target state="translated">Mutable, unboxed, strict arrays in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad. The type arguments are as follows:</target>
        </trans-unit>
        <trans-unit id="9925971623b1ac9311a057c1e6621841f8a448f7" translate="yes" xml:space="preserve">
          <source>MutableArray#</source>
          <target state="translated">MutableArray#</target>
        </trans-unit>
        <trans-unit id="40bb1cc17c060c6bd43dbf016d618af652f8c837" translate="yes" xml:space="preserve">
          <source>MutableArrayArray#</source>
          <target state="translated">MutableArrayArray#</target>
        </trans-unit>
        <trans-unit id="68b676eacbb0a7843cf46324a527ccbb0beed645" translate="yes" xml:space="preserve">
          <source>MutableByteArray#</source>
          <target state="translated">MutableByteArray#</target>
        </trans-unit>
        <trans-unit id="ddc210a400b5481a3abcf1bcd6083f807abd8b39" translate="yes" xml:space="preserve">
          <source>Mutate the contents of a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;. &lt;em&gt;N.B.&lt;/em&gt;, this version is non-strict.</source>
          <target state="translated">TVarの内容を &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; ます。&lt;em&gt;注&lt;/em&gt;：このバージョンは厳密ではありません。</target>
        </trans-unit>
        <trans-unit id="29f6dd6604a4083b037e5b08c77d32e780b2deac" translate="yes" xml:space="preserve">
          <source>Mutate the contents of an &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">IORefの内容を &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="65a480fe4d2e3102f2ecc2852d563e994ffa8ae8" translate="yes" xml:space="preserve">
          <source>Mutate the contents of an &lt;code&gt;&lt;a href=&quot;data-stref#t:STRef&quot;&gt;STRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">STRefの内容を &lt;code&gt;&lt;a href=&quot;data-stref#t:STRef&quot;&gt;STRef&lt;/a&gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="beef505a6a01c0417026ebb4ed6aa4fbdd93ebfe" translate="yes" xml:space="preserve">
          <source>Mutation: In both &lt;code&gt;foreign import unsafe&lt;/code&gt; and &lt;code&gt;foreign import safe&lt;/code&gt; FFI calls, it is safe to mutate a &lt;code&gt;MutableByteArray&lt;/code&gt;. Mutating any other type of array leads to undefined behavior. Reason: Mutable arrays of heap objects record writes for the purpose of garbage collection. An array of heap objects is passed to a foreign C function, the runtime does not record any writes. Consequently, it is not safe to write to an array of heap objects in a foreign function. Since the runtime has no facilities for tracking mutation of a &lt;code&gt;MutableByteArray#&lt;/code&gt;, these can be safely mutated in any foreign function.</source>
          <target state="translated">Mutation: In both &lt;code&gt;foreign import unsafe&lt;/code&gt; and &lt;code&gt;foreign import safe&lt;/code&gt; FFI calls, it is safe to mutate a &lt;code&gt;MutableByteArray&lt;/code&gt; . Mutating any other type of array leads to undefined behavior. Reason: Mutable arrays of heap objects record writes for the purpose of garbage collection. An array of heap objects is passed to a foreign C function, the runtime does not record any writes. Consequently, it is not safe to write to an array of heap objects in a foreign function. Since the runtime has no facilities for tracking mutation of a &lt;code&gt;MutableByteArray#&lt;/code&gt; , these can be safely mutated in any foreign function.</target>
        </trans-unit>
        <trans-unit id="18d35073b15c0f266e315c4a406057c1c9e30791" translate="yes" xml:space="preserve">
          <source>NB! This is a legacy feature, see &lt;a href=&quot;#extension-StandaloneKindSignatures&quot;&gt;&lt;code&gt;StandaloneKindSignatures&lt;/code&gt;&lt;/a&gt; for the modern replacement.</source>
          <target state="translated">NB! This is a legacy feature, see &lt;a href=&quot;#extension-StandaloneKindSignatures&quot;&gt; &lt;code&gt;StandaloneKindSignatures&lt;/code&gt; &lt;/a&gt; for the modern replacement.</target>
        </trans-unit>
        <trans-unit id="6d4bc7da7f8019e6ba579c7168ed8ef8e123de9f" translate="yes" xml:space="preserve">
          <source>NB. Be very careful with these finalizers. One common trap is that if a finalizer references another finalized value, it does not prevent that value from being finalized. In particular, &lt;code&gt;&lt;a href=&quot;system-io#v:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;s are finalized objects, so a finalizer should not refer to a &lt;code&gt;&lt;a href=&quot;system-io#v:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; (including &lt;code&gt;&lt;a href=&quot;system-io#v:stdout&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;system-io#v:stdin&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;system-io#v:stderr&quot;&gt;stderr&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">NB。これらのファイナライザには十分注意してください。よくある落とし穴の1つは、ファイナライザが別のファイナライズされた値を参照しても、その値がファイナライズされるのを妨げないことです。特に、 &lt;code&gt;&lt;a href=&quot;system-io#v:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; はファイナライズされたオブジェクトであるため、ファイナライザは &lt;code&gt;&lt;a href=&quot;system-io#v:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;system-io#v:stdout&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;system-io#v:stdin&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;system-io#v:stderr&quot;&gt;stderr&lt;/a&gt;&lt;/code&gt; を含む）を参照しないでください。</target>
        </trans-unit>
        <trans-unit id="374a0e14aef11d696ae0e12a6af249af24d04c07" translate="yes" xml:space="preserve">
          <source>NB. This macro is set when pre-processing both Haskell source and C source, including the C source generated from a Haskell module (i.e. &lt;code&gt;.hs&lt;/code&gt;, &lt;code&gt;.lhs&lt;/code&gt;, &lt;code&gt;.c&lt;/code&gt; and &lt;code&gt;.hc&lt;/code&gt; files).</source>
          <target state="translated">NB。このマクロは、Haskellモジュールから生成されたCソース（つまり、 &lt;code&gt;.hs&lt;/code&gt; 、 &lt;code&gt;.lhs&lt;/code&gt; 、 &lt;code&gt;.c&lt;/code&gt; 、および &lt;code&gt;.hc&lt;/code&gt; ファイル）を含む、HaskellソースとCソースの両方を前処理するときに設定されます。</target>
        </trans-unit>
        <trans-unit id="ef6198823084d192389d02aee66353f70e110347" translate="yes" xml:space="preserve">
          <source>NB: &lt;code&gt;isValidBigNat# nullBigNat&lt;/code&gt; is false</source>
          <target state="translated">注意： &lt;code&gt;isValidBigNat# nullBigNat&lt;/code&gt; はfalseです</target>
        </trans-unit>
        <trans-unit id="ccbbb1b26af40cc778cde005c4f658b4a6d44e97" translate="yes" xml:space="preserve">
          <source>NB: This treatment of superclasses goes beyond &lt;a href=&quot;http://i.cs.hku.hk/~bruno//papers/hs2017.pdf&quot;&gt;the paper&lt;/a&gt;, but is specifically desired by users.</source>
          <target state="translated">注意：このスーパークラスの扱いは&lt;a href=&quot;http://i.cs.hku.hk/~bruno//papers/hs2017.pdf&quot;&gt;紙&lt;/a&gt;を超えていますが、ユーザーが特に望んでいます。</target>
        </trans-unit>
        <trans-unit id="5cfb84a3255f99b3a5dc5c0b199025e1ab8a956d" translate="yes" xml:space="preserve">
          <source>NFData</source>
          <target state="translated">NFData</target>
        </trans-unit>
        <trans-unit id="8bef8898d5726a9645ab52735e823a1b3b2a58ed" translate="yes" xml:space="preserve">
          <source>NFData1</source>
          <target state="translated">NFData1</target>
        </trans-unit>
        <trans-unit id="418a51c8aef1b7b43f9f69603188a3fc934fb298" translate="yes" xml:space="preserve">
          <source>NFData2</source>
          <target state="translated">NFData2</target>
        </trans-unit>
        <trans-unit id="a74c32096f555276472737ff5840787516207d4d" translate="yes" xml:space="preserve">
          <source>NOTE for GHC users: unless you use the &lt;code&gt;-threaded&lt;/code&gt; flag, &lt;code&gt;hWaitForInput hdl t&lt;/code&gt; where &lt;code&gt;t &amp;gt;= 0&lt;/code&gt; will block all other Haskell threads for the duration of the call. It behaves like a &lt;code&gt;safe&lt;/code&gt; foreign call in this respect.</source>
          <target state="translated">GHCユーザーへの注意： &lt;code&gt;-threaded&lt;/code&gt; フラグを使用しない限り、 &lt;code&gt;hWaitForInput hdl t&lt;/code&gt; （ &lt;code&gt;t &amp;gt;= 0&lt;/code&gt; は、呼び出しの間、他のすべてのHaskellスレッドをブロックします。これは、この点で &lt;code&gt;safe&lt;/code&gt; 外部呼び出しのように動作します。</target>
        </trans-unit>
        <trans-unit id="f8bec3400a00d95de2aca056e95477c68ba1eb54" translate="yes" xml:space="preserve">
          <source>NOTE: &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hIsEOF&quot;&gt;hIsEOF&lt;/a&gt;&lt;/code&gt; may block, because it has to attempt to read from the stream to determine whether there is any more data to be read.</source>
          <target state="translated">注： &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hIsEOF&quot;&gt;hIsEOF&lt;/a&gt;&lt;/code&gt; は、ストリームから読み取って、読み取るデータがまだあるかどうかを判断する必要があるため、ブロックされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="e177a44ba2f2969ccf14799a97fd335989430f30" translate="yes" xml:space="preserve">
          <source>NOTE: &lt;code&gt;&lt;a href=&quot;system-io#v:hIsEOF&quot;&gt;hIsEOF&lt;/a&gt;&lt;/code&gt; may block, because it has to attempt to read from the stream to determine whether there is any more data to be read.</source>
          <target state="translated">注： &lt;code&gt;&lt;a href=&quot;system-io#v:hIsEOF&quot;&gt;hIsEOF&lt;/a&gt;&lt;/code&gt; は、ストリームから読み取って、読み取るデータがまだあるかどうかを判断する必要があるため、ブロックされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b1bbe2aede4f3fac96050d9ca6e8622d57dc7d43" translate="yes" xml:space="preserve">
          <source>NOTE: Since this library is built on top of the curses interface, it is not thread-safe.</source>
          <target state="translated">注意:このライブラリは curses インタフェースの上に構築されているため、スレッドセーフではありません。</target>
        </trans-unit>
        <trans-unit id="63561186ffbbc0f2e4ac1c402f5b46d5450d885c" translate="yes" xml:space="preserve">
          <source>NOTE: The implicit parameter &lt;code&gt;?callStack :: CallStack&lt;/code&gt; is an implementation detail and &lt;strong&gt;should not&lt;/strong&gt; be considered part of the &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; API, we may decide to change the implementation in the future.</source>
          <target state="translated">注：暗黙的なパラメータ &lt;code&gt;?callStack :: CallStack&lt;/code&gt; は実装の詳細であり、 &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; APIの一部と見なす&lt;strong&gt;べきでは&lt;/strong&gt;あり&lt;strong&gt;ません&lt;/strong&gt;。将来、実装を変更する可能性があります。</target>
        </trans-unit>
        <trans-unit id="73283dfca92bcfe835f52a5a26a21a5f2a2e5acc" translate="yes" xml:space="preserve">
          <source>NOTE: The implicit parameter &lt;code&gt;?callStack :: CallStack&lt;/code&gt; is an implementation detail and &lt;strong&gt;should not&lt;/strong&gt; be considered part of the &lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; API, we may decide to change the implementation in the future.</source>
          <target state="translated">注：暗黙的なパラメータ &lt;code&gt;?callStack :: CallStack&lt;/code&gt; は実装の詳細であり、 &lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; APIの一部と見なす&lt;strong&gt;べきでは&lt;/strong&gt;あり&lt;strong&gt;ません&lt;/strong&gt;。将来、実装を変更する可能性があります。</target>
        </trans-unit>
        <trans-unit id="98b32b5a6dce9bba2f73fac9f444388673ea544d" translate="yes" xml:space="preserve">
          <source>NOTE: The intrepid user may notice that &lt;code&gt;&lt;a href=&quot;ghc-stack#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; is just an alias for an implicit parameter &lt;code&gt;?callStack :: CallStack&lt;/code&gt;. This is an implementation detail and &lt;strong&gt;should not&lt;/strong&gt; be considered part of the &lt;code&gt;&lt;a href=&quot;ghc-exception#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; API, we may decide to change the implementation in the future.</source>
          <target state="translated">注：勇敢なユーザーは、 &lt;code&gt;&lt;a href=&quot;ghc-stack#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; が暗黙的なパラメーター &lt;code&gt;?callStack :: CallStack&lt;/code&gt; 単なるエイリアスであることに気付く場合があります。これは実装の詳細であり、 &lt;code&gt;&lt;a href=&quot;ghc-exception#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; APIの一部と見なす&lt;strong&gt;べきでは&lt;/strong&gt;あり&lt;strong&gt;ません&lt;/strong&gt;。将来、実装を変更する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d4652f803bbd5a4299b501fa174c8494ddc7084c" translate="yes" xml:space="preserve">
          <source>NOTE: The intrepid user may notice that &lt;code&gt;&lt;a href=&quot;ghc-stack#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; is just an alias for an implicit parameter &lt;code&gt;?callStack :: CallStack&lt;/code&gt;. This is an implementation detail and &lt;strong&gt;should not&lt;/strong&gt; be considered part of the &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; API, we may decide to change the implementation in the future.</source>
          <target state="translated">注：勇敢なユーザーは、 &lt;code&gt;&lt;a href=&quot;ghc-stack#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; が暗黙的なパラメーター &lt;code&gt;?callStack :: CallStack&lt;/code&gt; 単なるエイリアスであることに気付く場合があります。これは実装の詳細であり、 &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; APIの一部と見なす&lt;strong&gt;べきでは&lt;/strong&gt;あり&lt;strong&gt;ません&lt;/strong&gt;。将来、実装を変更する可能性があります。</target>
        </trans-unit>
        <trans-unit id="04964a8b393aeb4c81203022d841d735724a3657" translate="yes" xml:space="preserve">
          <source>NOTE: The intrepid user may notice that &lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; is just an alias for an implicit parameter &lt;code&gt;?callStack :: CallStack&lt;/code&gt;. This is an implementation detail and &lt;strong&gt;should not&lt;/strong&gt; be considered part of the &lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; API, we may decide to change the implementation in the future.</source>
          <target state="translated">注：勇敢なユーザーは、 &lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; が暗黙的なパラメーター &lt;code&gt;?callStack :: CallStack&lt;/code&gt; 単なるエイリアスであることに気付く場合があります。これは実装の詳細であり、 &lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; APIの一部と見なす&lt;strong&gt;べきでは&lt;/strong&gt;あり&lt;strong&gt;ません&lt;/strong&gt;。将来、実装を変更する可能性があります。</target>
        </trans-unit>
        <trans-unit id="173f40eb49608b0a9f5c7dfe7826130ac61ad0f2" translate="yes" xml:space="preserve">
          <source>NOTE: createHardLink is &lt;em&gt;flipped arguments&lt;/em&gt; to provide compatiblity for Unix.</source>
          <target state="translated">注：createHardLinkは、UNIXとの互換性を提供するために&lt;em&gt;反転された引数&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="65538d1f35d9ff80cfc7afb1ba3058d20b90d2b2" translate="yes" xml:space="preserve">
          <source>NOTE: createSymbolicLink* functions are &lt;em&gt;flipped arguments&lt;/em&gt; to provide compatiblity for Unix, except &lt;code&gt;&lt;a href=&quot;system-win32-symboliclink#v:createSymbolicLink-39-&quot;&gt;createSymbolicLink'&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：createSymbolicLink *関数は、 &lt;code&gt;&lt;a href=&quot;system-win32-symboliclink#v:createSymbolicLink-39-&quot;&gt;createSymbolicLink'&lt;/a&gt;&lt;/code&gt; を除き、Unixとの互換性を提供するために&lt;em&gt;反転された引数&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="9a289febc0a62ac0fd3ddf47889458ad201b28af" translate="yes" xml:space="preserve">
          <source>NOTE: on Windows, this function does not work correctly; it behaves identically to &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：Windowsでは、この機能は正しく機能しません。 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="27648f423ffb7efa59e5c0832d0545992c2e7a71" translate="yes" xml:space="preserve">
          <source>NOTE: on Windows, this function does not work correctly; it behaves identically to &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：Windowsでは、この機能は正しく機能しません。 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="a2f5862ab04e7d70c9d237cade16ad082f1f892f" translate="yes" xml:space="preserve">
          <source>NOTE: on Windows, this function does not work correctly; it behaves identically to &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：Windowsでは、この機能は正しく機能しません。 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="217551d8f091b6742427b78f8d4d21b8576d5bcf" translate="yes" xml:space="preserve">
          <source>NPlusKPatterns</source>
          <target state="translated">NPlusKPatterns</target>
        </trans-unit>
        <trans-unit id="16011665a1d6a1793f7af5691f78690f7db8e797" translate="yes" xml:space="preserve">
          <source>NT namespace: &lt;code&gt;\&lt;/code&gt;</source>
          <target state="translated">NTネームスペース： &lt;code&gt;\&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="09b181fc210e2f1a3662ae262c26a3cf3bb2036d" translate="yes" xml:space="preserve">
          <source>NTFS only supprts this functionality.</source>
          <target state="translated">NTFSはこの機能をサポートするだけです。</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="e11bc388c83c1b8b82ae73a235837ab0ef1b8869" translate="yes" xml:space="preserve">
          <source>Name lookup</source>
          <target state="translated">名前検索</target>
        </trans-unit>
        <trans-unit id="c1dd5c5a3c784d1dc660322bd2d8b0aadd9447a3" translate="yes" xml:space="preserve">
          <source>Name of the Haskell file.</source>
          <target state="translated">Haskellファイルの名前。</target>
        </trans-unit>
        <trans-unit id="d34370b884a4e0c6661e9211124b058e6efe6336" translate="yes" xml:space="preserve">
          <source>Name of the module where the static pointer is defined</source>
          <target state="translated">静的ポインタが定義されているモジュール名</target>
        </trans-unit>
        <trans-unit id="241f55c9dbd4332d828c31c2528891c3f79c4291" translate="yes" xml:space="preserve">
          <source>NameFlavour</source>
          <target state="translated">NameFlavour</target>
        </trans-unit>
        <trans-unit id="43bd2e139f7efc3fb707f38288858777f7d29f55" translate="yes" xml:space="preserve">
          <source>NameIs</source>
          <target state="translated">NameIs</target>
        </trans-unit>
        <trans-unit id="e784a5acc01d14b30b1b161e2114eac0f9da4a44" translate="yes" xml:space="preserve">
          <source>NameS</source>
          <target state="translated">NameS</target>
        </trans-unit>
        <trans-unit id="285f33209f1413ce6482de704071ed860f4ee1f7" translate="yes" xml:space="preserve">
          <source>NameSpace</source>
          <target state="translated">NameSpace</target>
        </trans-unit>
        <trans-unit id="af5f97c76eceeda41176655ffdf797f38db674a9" translate="yes" xml:space="preserve">
          <source>Named arguments can also be given explicit kind signatures if needed. Just as with &lt;a href=&quot;#gadt&quot;&gt;GADT declarations&lt;/a&gt; named arguments are entirely optional, so that we can declare &lt;code&gt;Array&lt;/code&gt; alternatively with</source>
          <target state="translated">名前付き引数には、必要に応じて明示的な種類のシグネチャを与えることもできます。ちょうどのように&lt;a href=&quot;#gadt&quot;&gt;GADT宣言&lt;/a&gt;名前付き引数は、私たちが宣言することができ、完全にオプションである &lt;code&gt;Array&lt;/code&gt; と交互に</target>
        </trans-unit>
        <trans-unit id="453d20a6d115195746f780ef6b881f77130889c3" translate="yes" xml:space="preserve">
          <source>Named wildcards &lt;em&gt;should not be confused with type variables&lt;/em&gt;. Even though syntactically similar, named wildcards can unify with monotypes as well as be generalised over (and behave as type variables).</source>
          <target state="translated">名前付きのワイルドカード&lt;em&gt;をタイプ変数と混同しないでください&lt;/em&gt;。構文的には類似していますが、名前付きワイルドカードは、モノタイプと統合することができ、一般化することができます（型変数として動作します）。</target>
        </trans-unit>
        <trans-unit id="efd83b1022b74e5c3478447290339e566cb15ae5" translate="yes" xml:space="preserve">
          <source>NamedWildCards</source>
          <target state="translated">NamedWildCards</target>
        </trans-unit>
        <trans-unit id="2b7c08c3ab75f37e2da656c1aab228f5f3a793b1" translate="yes" xml:space="preserve">
          <source>Names</source>
          <target state="translated">Names</target>
        </trans-unit>
        <trans-unit id="b2390be51f0839e05354a4edc7bfb9b402fb9775" translate="yes" xml:space="preserve">
          <source>Names constructed using &lt;code&gt;newName&lt;/code&gt; and &lt;code&gt;mkName&lt;/code&gt; may be used in bindings (such as &lt;code&gt;let x = ...&lt;/code&gt; or &lt;code&gt;x -&amp;gt; ...&lt;/code&gt;), but names constructed using &lt;code&gt;lookupValueName&lt;/code&gt;, &lt;code&gt;lookupTypeName&lt;/code&gt;, &lt;code&gt;'f&lt;/code&gt;, &lt;code&gt;''T&lt;/code&gt; may not.</source>
          <target state="translated">&lt;code&gt;newName&lt;/code&gt; と &lt;code&gt;mkName&lt;/code&gt; を使用して作成された名前はバインディング（ &lt;code&gt;let x = ...&lt;/code&gt; または &lt;code&gt;x -&amp;gt; ...&lt;/code&gt; ）で使用 &lt;code&gt;lookupValueName&lt;/code&gt; 、 &lt;code&gt;lookupTypeName&lt;/code&gt; 、lookupTypeName、 &lt;code&gt;'f&lt;/code&gt; 、 &lt;code&gt;''T&lt;/code&gt; を使用して作成された名前は使用できません。</target>
        </trans-unit>
        <trans-unit id="34803b64f16548b242233b7132d75f6e5f8fe8e6" translate="yes" xml:space="preserve">
          <source>Naming conventions</source>
          <target state="translated">命名規則</target>
        </trans-unit>
        <trans-unit id="9f71fd1007f8c4abc458163409fae654630b9e86" translate="yes" xml:space="preserve">
          <source>Nano</source>
          <target state="translated">Nano</target>
        </trans-unit>
        <trans-unit id="2e3e963e975a60a6a8a003da6ed817e4d4499a19" translate="yes" xml:space="preserve">
          <source>Nat</source>
          <target state="translated">Nat</target>
        </trans-unit>
        <trans-unit id="fcc28bb1503dac338f555a7ce7320bdbab52e7c3" translate="yes" xml:space="preserve">
          <source>Nat Kind</source>
          <target state="translated">ナットカインド</target>
        </trans-unit>
        <trans-unit id="7322348943287d68f8c176b2c1566795ccc03b7e" translate="yes" xml:space="preserve">
          <source>Native code generator</source>
          <target state="translated">ネイティブコードジェネレータ</target>
        </trans-unit>
        <trans-unit id="ea26876daa9a0a0caf49391472053413ac06277e" translate="yes" xml:space="preserve">
          <source>Natural</source>
          <target state="translated">Natural</target>
        </trans-unit>
        <trans-unit id="6dfc30c819c79fca570a6d67601933511b292394" translate="yes" xml:space="preserve">
          <source>Naturality</source>
          <target state="translated">Naturality</target>
        </trans-unit>
        <trans-unit id="a6a233fd10e66b739809092ee7ea7beda5f628ec" translate="yes" xml:space="preserve">
          <source>Nd: Number, Decimal</source>
          <target state="translated">Nd:数、10進数</target>
        </trans-unit>
        <trans-unit id="ee52746bd96005ef182ba2d9b60655a4e0ac20d1" translate="yes" xml:space="preserve">
          <source>Negate &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 否定</target>
        </trans-unit>
        <trans-unit id="06b8058bc282e46c01399ffa04dcfaf5551d96ef" translate="yes" xml:space="preserve">
          <source>Negate element-wise.</source>
          <target state="translated">要素ごとに否定する。</target>
        </trans-unit>
        <trans-unit id="1c22f0963e34858feada46efcb0a5e32c38f2754" translate="yes" xml:space="preserve">
          <source>Negation (e.g. &amp;ldquo;&lt;code&gt;- (f x)&lt;/code&gt;&amp;rdquo;) means &amp;ldquo;&lt;code&gt;negate (f x)&lt;/code&gt;&amp;rdquo;, both in numeric patterns, and expressions.</source>
          <target state="translated">否定（「 &lt;code&gt;- (f x)&lt;/code&gt; 」など）は、数値パターンと式の両方で「 &lt;code&gt;negate (f x)&lt;/code&gt; 」を意味します。</target>
        </trans-unit>
        <trans-unit id="dd048e1f91db2495004257dbd5282e263424faee" translate="yes" xml:space="preserve">
          <source>Negative exponents are supported if an inverse modulo &lt;code&gt;&lt;em&gt;m&lt;/em&gt;&lt;/code&gt; exists.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;m&lt;/em&gt;&lt;/code&gt; を法とする逆数が存在する場合、負の指数がサポートされます。</target>
        </trans-unit>
        <trans-unit id="f4f4481fb4d6d71c0fcfc0047e37c0bbb90861f5" translate="yes" xml:space="preserve">
          <source>Negative literals, such as &lt;code&gt;-3&lt;/code&gt;, are specified by (a careful reading of) the Haskell Report as meaning &lt;code&gt;Prelude.negate (Prelude.fromInteger 3)&lt;/code&gt;. So &lt;code&gt;-2147483648&lt;/code&gt; means &lt;code&gt;negate (fromInteger 2147483648)&lt;/code&gt;. Since &lt;code&gt;fromInteger&lt;/code&gt; takes the lower 32 bits of the representation, &lt;code&gt;fromInteger (2147483648::Integer)&lt;/code&gt;, computed at type &lt;code&gt;Int&lt;/code&gt; is &lt;code&gt;-2147483648::Int&lt;/code&gt;. The &lt;code&gt;negate&lt;/code&gt; operation then overflows, but it is unchecked, so &lt;code&gt;negate (-2147483648::Int)&lt;/code&gt; is just &lt;code&gt;-2147483648&lt;/code&gt;. In short, one can write &lt;code&gt;minBound::Int&lt;/code&gt; as a literal with the expected meaning (but that is not in general guaranteed).</source>
          <target state="translated">&lt;code&gt;-3&lt;/code&gt; などの負のリテラルは、Haskellレポート（を注意深く読む）によって &lt;code&gt;Prelude.negate (Prelude.fromInteger 3)&lt;/code&gt; を意味するものとして指定されます。したがって、 &lt;code&gt;-2147483648&lt;/code&gt; は &lt;code&gt;negate (fromInteger 2147483648)&lt;/code&gt; 意味します。以来 &lt;code&gt;fromInteger&lt;/code&gt; は表現の下位32ビットを取り、 &lt;code&gt;fromInteger (2147483648::Integer)&lt;/code&gt; 型で計算、 &lt;code&gt;Int&lt;/code&gt; がある &lt;code&gt;-2147483648::Int&lt;/code&gt; 。 &lt;code&gt;negate&lt;/code&gt; 操作は、オーバーフローし、それがオフになっているので、 &lt;code&gt;negate (-2147483648::Int)&lt;/code&gt; だけです &lt;code&gt;-2147483648&lt;/code&gt; 。つまり、 &lt;code&gt;minBound::Int&lt;/code&gt; 書くことができます。 期待される意味を持つリテラルとして（ただし、一般的には保証されません）。</target>
        </trans-unit>
        <trans-unit id="d52baec47edee13dda9979236d74b3a6e53bb526" translate="yes" xml:space="preserve">
          <source>Negative precision is taken as 0. The meaning of the precision depends on the conversion type.</source>
          <target state="translated">負の精度は0として扱われます。 精度の意味は変換タイプによって異なります。</target>
        </trans-unit>
        <trans-unit id="f622cbbe6dc0bf9f80a40c77e1e302b16367df00" translate="yes" xml:space="preserve">
          <source>NegativeLiterals</source>
          <target state="translated">NegativeLiterals</target>
        </trans-unit>
        <trans-unit id="522182dd21569f6be17220e3cac4e333aa5e69ba" translate="yes" xml:space="preserve">
          <source>Nest (or indent) a document by a given number of positions (which may also be negative). &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:nest&quot;&gt;nest&lt;/a&gt;&lt;/code&gt; satisfies the laws:</source>
          <target state="translated">ドキュメントを特定の数の位置でネスト（またはインデント）します（負の場合もあります）。 &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:nest&quot;&gt;nest&lt;/a&gt;&lt;/code&gt; は法律を満たします：</target>
        </trans-unit>
        <trans-unit id="949a22e40a67eb32fd127980e8bf7757812da720" translate="yes" xml:space="preserve">
          <source>Nest (or indent) a document by a given number of positions (which may also be negative). &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:nest&quot;&gt;nest&lt;/a&gt;&lt;/code&gt; satisfies the laws:</source>
          <target state="translated">ドキュメントを特定の数の位置でネスト（またはインデント）します（負の場合もあります）。 &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:nest&quot;&gt;nest&lt;/a&gt;&lt;/code&gt; は法律を満たします：</target>
        </trans-unit>
        <trans-unit id="2fd44f8ebe0a7e3b2bea5c918f154b8513f223e1" translate="yes" xml:space="preserve">
          <source>Nest (or indent) a document by a given number of positions (which may also be negative). &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:nest&quot;&gt;nest&lt;/a&gt;&lt;/code&gt; satisfies the laws:</source>
          <target state="translated">ドキュメントを特定の数の位置でネスト（またはインデント）します（負の場合もあります）。 &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:nest&quot;&gt;nest&lt;/a&gt;&lt;/code&gt; は法律を満たします：</target>
        </trans-unit>
        <trans-unit id="2344677d8f01e8e2fca317a5c561cc80f092e37c" translate="yes" xml:space="preserve">
          <source>Nested</source>
          <target state="translated">Nested</target>
        </trans-unit>
        <trans-unit id="d67a4e0cdcad34714be98100536800680402b530" translate="yes" xml:space="preserve">
          <source>NestedAtomically</source>
          <target state="translated">NestedAtomically</target>
        </trans-unit>
        <trans-unit id="f06563daf6842a8e082fd4615e320fc869bb69d9" translate="yes" xml:space="preserve">
          <source>Nesting</source>
          <target state="translated">Nesting</target>
        </trans-unit>
        <trans-unit id="a2577c561d86f6ba3c73b6eefeafce792f6e11cc" translate="yes" xml:space="preserve">
          <source>Nevertheless one can pretend that the following three kinds of instances exist. First, as a trivial base-case:</source>
          <target state="translated">それにもかかわらず、以下の3種類のインスタンスが存在すると仮定することができます。第一に、些細なベースケースとして。</target>
        </trans-unit>
        <trans-unit id="cfe594798e5ee5a9536eb68772725a21269ab358" translate="yes" xml:space="preserve">
          <source>New parsing functions</source>
          <target state="translated">新しい解析関数</target>
        </trans-unit>
        <trans-unit id="1523c8acdb2ee4d7786ae768261d0c785a7a6dd4" translate="yes" xml:space="preserve">
          <source>New path</source>
          <target state="translated">新しいパス</target>
        </trans-unit>
        <trans-unit id="2f086c7950ef417a974e200114c1f6896effacb4" translate="yes" xml:space="preserve">
          <source>New reserved words and symbols: character sequences which are no longer available for use as identifiers in the program.</source>
          <target state="translated">新しい予約語と記号:プログラム内で識別子として使用できなくなった文字列。</target>
        </trans-unit>
        <trans-unit id="2b86793d71ec22bae7c09d67603a4b5ca57fee12" translate="yes" xml:space="preserve">
          <source>New size of array</source>
          <target state="translated">配列の新しいサイズ</target>
        </trans-unit>
        <trans-unit id="d706a7f27906e3a8bf4f4fed0f9c3d7edc4a240a" translate="yes" xml:space="preserve">
          <source>Newline</source>
          <target state="translated">Newline</target>
        </trans-unit>
        <trans-unit id="08342fdb7e4d5979ac614e4583b9d664b9d3d88c" translate="yes" xml:space="preserve">
          <source>Newline conversion</source>
          <target state="translated">改行変換</target>
        </trans-unit>
        <trans-unit id="ada069b2de824a0d3a8b152fde78626a8e8b8ade" translate="yes" xml:space="preserve">
          <source>NewlineMode</source>
          <target state="translated">NewlineMode</target>
        </trans-unit>
        <trans-unit id="9b709dfae84cfac1c978bbe397d4df6e001163d1" translate="yes" xml:space="preserve">
          <source>Newly created slots initialized to this element. Only used when array is grown.</source>
          <target state="translated">新しく作成されたスロットは、この要素に初期化されます。配列が成長しているときにのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="9d70c1effde2f8c015bfb84f7838e84613e007f3" translate="yes" xml:space="preserve">
          <source>NewtypeStrategy</source>
          <target state="translated">NewtypeStrategy</target>
        </trans-unit>
        <trans-unit id="ca33c65ffa7a8e2e461597acbdf8adbf2c6312c3" translate="yes" xml:space="preserve">
          <source>Newtypes are better than datatypes:</source>
          <target state="translated">ニュータイプはデータ型よりも優れています。</target>
        </trans-unit>
        <trans-unit id="bc981983e7f547dc62e19a1e383acfe00782a6d5" translate="yes" xml:space="preserve">
          <source>Next</source>
          <target state="translated">Next</target>
        </trans-unit>
        <trans-unit id="bb1a13dad76ab6476212d16d134ffcbc89390074" translate="yes" xml:space="preserve">
          <source>Next free byte in current &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BufferRange&quot;&gt;BufferRange&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">現在の &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BufferRange&quot;&gt;BufferRange&lt;/a&gt;&lt;/code&gt; の次の空きバイト</target>
        </trans-unit>
        <trans-unit id="4ae9c52b894383b8025369fa03e4f1485c55d887" translate="yes" xml:space="preserve">
          <source>Next free byte in current &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BufferRange&quot;&gt;BufferRange&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">現在の &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BufferRange&quot;&gt;BufferRange&lt;/a&gt;&lt;/code&gt; の次の空きバイト。</target>
        </trans-unit>
        <trans-unit id="6ae27512f7d04b93e6ab0f5a142fdb6a159a3a6d" translate="yes" xml:space="preserve">
          <source>Next position calculating function.</source>
          <target state="translated">次の位置計算機能。</target>
        </trans-unit>
        <trans-unit id="499df2c9156f9e7492c202932262c12764a363a7" translate="yes" xml:space="preserve">
          <source>Next there is information about the garbage collections done. For each generation it says how many garbage collections were done, how many of those collections were done in parallel, the total CPU time used for garbage collecting that generation, and the total wall clock time elapsed while garbage collecting that generation.</source>
          <target state="translated">次に行われたガベージコレクションに関する情報があります。各世代について、何個のガベージコレクションが行われたか、何個のガベージコレクションが並列に行われたか、その世代のガベージコレクションに使用された総CPU時間、その世代のガベージコレクション中に経過した総ウォールクロック時間が記載されています。</target>
        </trans-unit>
        <trans-unit id="833ff1d27fbdf158e7b505b01c19b8b1b95cec80" translate="yes" xml:space="preserve">
          <source>Next there is the CPU time and wall clock time elapsed broken down by what the runtime system was doing at the time. INIT is the runtime system initialisation. MUT is the mutator time, i.e. the time spent actually running your code. GC is the time spent doing garbage collection. RP is the time spent doing retainer profiling. PROF is the time spent doing other profiling. EXIT is the runtime system shutdown time. And finally, Total is, of course, the total.</source>
          <target state="translated">次に、CPU時間とウォールクロック時間の経過時間を、ランタイムシステムがその時点で何をしていたかに分解して表示します。INITはランタイムシステムの初期化です。MUTはミューテータ時間、つまり実際にコードを実行している時間です。GCはガベージコレクションに費やした時間です。RPはリテイナープロファイリングに費やした時間です。PROF は、他のプロファイリングに費やした時間です。EXIT はランタイムシステムのシャットダウン時間です。そして最後にTotalはもちろん合計です。</target>
        </trans-unit>
        <trans-unit id="6e08ae4fe787b1e828f2d0c8f144343e2fec4132" translate="yes" xml:space="preserve">
          <source>Next to &lt;code&gt;&lt;a href=&quot;ghc-generics#t:K1&quot;&gt;K1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-generics#t:M1&quot;&gt;M1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-generics#t::-43-:&quot;&gt;:+:&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-generics#t::-42-:&quot;&gt;:*:&lt;/a&gt;&lt;/code&gt; there are a few more type constructors that occur in the representations of other datatypes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-generics#t:K1&quot;&gt;K1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:M1&quot;&gt;M1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ghc-generics#t::-43-:&quot;&gt;:+:&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;ghc-generics#t::-42-:&quot;&gt;:*:&lt;/a&gt;&lt;/code&gt; の隣には、他のデータ型の表現で発生する型コンストラクタがさらにいくつかあります。</target>
        </trans-unit>
        <trans-unit id="64a331e6f60cb1a7ad554cbc5ac1d707fce97281" translate="yes" xml:space="preserve">
          <source>Next, it will perform the actions in the &lt;code&gt;actions&lt;/code&gt; list in order from left to right.</source>
          <target state="translated">次に、 &lt;code&gt;actions&lt;/code&gt; リストのアクションを左から右に実行します。</target>
        </trans-unit>
        <trans-unit id="c916da70cd4a32512ca71d70e5cc765d00357df4" translate="yes" xml:space="preserve">
          <source>Nil</source>
          <target state="translated">Nil</target>
        </trans-unit>
        <trans-unit id="01254dc62ba02c8f98ce116687b65348bfae9d10" translate="yes" xml:space="preserve">
          <source>Nils Anders Danielsson 2006</source>
          <target state="translated">ニルス・アンダース・ダニエルソン 2006</target>
        </trans-unit>
        <trans-unit id="c6b76279a253069e49509991acb2a0fc6c0289e6" translate="yes" xml:space="preserve">
          <source>Nl: Number, Letter</source>
          <target state="translated">Nl.数字、文字</target>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="e18dd77372be6a1409a708e6d14bcd9b7f68a5f9" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;-RTS&lt;/code&gt; option is required if the runtime-system options extend to the end of the command line, as in this example:</source>
          <target state="translated">次の例のように、ランタイムシステムオプションがコマンドラインの最後まで拡張されている場合、 &lt;code&gt;-RTS&lt;/code&gt; オプションは必要ありません。</target>
        </trans-unit>
        <trans-unit id="899c963a8035b8eff10bff6d0639741ad4e409cb" translate="yes" xml:space="preserve">
          <source>No guarantee is made as to the sizes of the pieces; an internal, but deterministic process determines this. However, it is guaranteed that the pieces returned will be in ascending order (all elements in the first submap less than all elements in the second, and so on).</source>
          <target state="translated">ピースのサイズは、内部の決定論的なプロセスによって決定されます。しかし、返されるピースは昇順になることは保証されています(最初のサブマップのすべての要素は、2番目のサブマップのすべての要素よりも小さい、というように)。</target>
        </trans-unit>
        <trans-unit id="5b4acda8d542358f213b8f3e4e1650164df9bfe7" translate="yes" xml:space="preserve">
          <source>No guarantee is made as to the sizes of the pieces; an internal, but deterministic process determines this. However, it is guaranteed that the pieces returned will be in ascending order (all elements in the first subset less than all elements in the second, and so on).</source>
          <target state="translated">これは,内部的な,しかし決定論的なプロセスによって決定されます.しかし,返される駒は昇順になることが保証されています(最初のサブセットのすべての要素は,2番目のサブセットのすべての要素よりも小さい,というように)。</target>
        </trans-unit>
        <trans-unit id="77c3849165d91154401b080a528c1f07258f9117" translate="yes" xml:space="preserve">
          <source>No indentation, infinitely long lines (&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; ignored), but explicit new lines, i.e., &lt;code&gt;text &quot;one&quot; $$ text &quot;two&quot;&lt;/code&gt;, are respected.</source>
          <target state="translated">インデントはなく、無限に長い行（ &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; は無視されます）ですが、明示的な &lt;code&gt;text &quot;one&quot; $$ text &quot;two&quot;&lt;/code&gt; 、つまり、テキスト &quot;one&quot; $$ text &quot;two&quot;は順守されます。</target>
        </trans-unit>
        <trans-unit id="d21eb7c7dc916ac561e541148784eed9a679e1bb" translate="yes" xml:space="preserve">
          <source>No indentation, infinitely long lines (&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; ignored), but explicit new lines, i.e., &lt;code&gt;text &quot;one&quot; $$ text &quot;two&quot;&lt;/code&gt;, are respected.</source>
          <target state="translated">インデントはなく、無限に長い行（ &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; は無視されます）ですが、明示的な &lt;code&gt;text &quot;one&quot; $$ text &quot;two&quot;&lt;/code&gt; 、つまり、テキスト &quot;one&quot; $$ text &quot;two&quot;は順守されます。</target>
        </trans-unit>
        <trans-unit id="538a5adae1b6b87754931f19e7d8936b73a4e244" translate="yes" xml:space="preserve">
          <source>No indentation, infinitely long lines (&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; ignored), but explicit new lines, i.e., &lt;code&gt;text &quot;one&quot; $$ text &quot;two&quot;&lt;/code&gt;, are respected.</source>
          <target state="translated">インデントはなく、無限に長い行（ &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; は無視されます）ですが、明示的な &lt;code&gt;text &quot;one&quot; $$ text &quot;two&quot;&lt;/code&gt; 、つまり、テキスト &quot;one&quot; $$ text &quot;two&quot;は順守されます。</target>
        </trans-unit>
        <trans-unit id="cbe83843190c4d65bded786e194509b323e2b4b6" translate="yes" xml:space="preserve">
          <source>No language extension is required to use typed holes. The lexeme &amp;ldquo;&lt;code&gt;_&lt;/code&gt;&amp;rdquo; was previously illegal in Haskell, but now has a more informative error message. The lexeme &amp;ldquo;&lt;code&gt;_x&lt;/code&gt;&amp;rdquo; is a perfectly legal variable, and its behaviour is unchanged when it is in scope. For example</source>
          <target state="translated">型付きホールを使用するために言語拡張は必要ありません。語彙素「 &lt;code&gt;_&lt;/code&gt; 」は以前はHaskellでは違法でしたが、現在はより有益なエラーメッセージが含まれています。語彙素「 &lt;code&gt;_x&lt;/code&gt; 」は完全に正当な変数であり、スコープ内にあるときの動作は変わりません。例えば</target>
        </trans-unit>
        <trans-unit id="e9413c2cb6cce1148a677bc74e708c4b678606be" translate="yes" xml:space="preserve">
          <source>No longer set the special variable &lt;code&gt;it&lt;/code&gt;.</source>
          <target state="translated">特殊変数 &lt;code&gt;it&lt;/code&gt; を設定しなくなりました。</target>
        </trans-unit>
        <trans-unit id="ba52b26fd5e250674e73b63230f34aa9f35b6cbc" translate="yes" xml:space="preserve">
          <source>No permissions.</source>
          <target state="translated">パーミッションはありません。</target>
        </trans-unit>
        <trans-unit id="ed1a8e9d366a2d42a52953aa766c21a8b8f47167" translate="yes" xml:space="preserve">
          <source>No thread can be blocked indefinitely on an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; unless another thread holds that &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; indefinitely. One usual implementation of this fairness guarantee is that threads blocked on an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; are served in a first-in-first-out fashion, but this is not guaranteed in the semantics.</source>
          <target state="translated">別のスレッドが &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; を無期限に保持しない限り、 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; でスレッドを無期限にブロックすることはできません。この公平性の保証の通常の実装の1つは、 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; でブロックされたスレッドが先入れ先出し方式で提供されることですが、これはセマンティクスでは保証されません。</target>
        </trans-unit>
        <trans-unit id="e89a24f8be4016dc5286a75b757316d4b7da6b5e" translate="yes" xml:space="preserve">
          <source>No type variable has more occurrences in the constraint than in the head</source>
          <target state="translated">制約の中では、型変数が先頭よりも多く出現することはありません。</target>
        </trans-unit>
        <trans-unit id="55d4b4e7dd7bd572505570594fa8970268f4ed9d" translate="yes" xml:space="preserve">
          <source>No variable may have a levity-polymorphic type.</source>
          <target state="translated">どの変数もレヴィティポリモーフィック型を持つことはできません。</target>
        </trans-unit>
        <trans-unit id="8537ab3e90e8c51e2b9081150af774e31041f634" translate="yes" xml:space="preserve">
          <source>No: Number, Other</source>
          <target state="translated">いいえ:番号、その他</target>
        </trans-unit>
        <trans-unit id="fa97e7279198646152703496467a958452203e8b" translate="yes" xml:space="preserve">
          <source>NoBuffering</source>
          <target state="translated">NoBuffering</target>
        </trans-unit>
        <trans-unit id="0d317c9df796aacafead371d325df7dc06bab899" translate="yes" xml:space="preserve">
          <source>NoFinalizers</source>
          <target state="translated">NoFinalizers</target>
        </trans-unit>
        <trans-unit id="187e10d0186766ac8ef38b6b2737dbcd0a0167a3" translate="yes" xml:space="preserve">
          <source>NoFlushOnInterrupt</source>
          <target state="translated">NoFlushOnInterrupt</target>
        </trans-unit>
        <trans-unit id="70c98d57d8ada0b33fa9e5d439c03bb6aa7f0530" translate="yes" xml:space="preserve">
          <source>NoGCStats</source>
          <target state="translated">NoGCStats</target>
        </trans-unit>
        <trans-unit id="e97b63987d7eba398a31aaf58656483d162d92ad" translate="yes" xml:space="preserve">
          <source>NoHeapProfiling</source>
          <target state="translated">NoHeapProfiling</target>
        </trans-unit>
        <trans-unit id="c0bb723db37af9d0e89d2d4da6bdcdd3458e352e" translate="yes" xml:space="preserve">
          <source>NoIO</source>
          <target state="translated">NoIO</target>
        </trans-unit>
        <trans-unit id="6ded8bea31740baa2d151730d57c270b35577c09" translate="yes" xml:space="preserve">
          <source>NoInline</source>
          <target state="translated">NoInline</target>
        </trans-unit>
        <trans-unit id="444ea91c7df550f94f3d747738c1f1a3466e0cc6" translate="yes" xml:space="preserve">
          <source>NoMethodError</source>
          <target state="translated">NoMethodError</target>
        </trans-unit>
        <trans-unit id="0574b23b4939ce65f86fe9caa145b7ac867f74b5" translate="yes" xml:space="preserve">
          <source>NoRep</source>
          <target state="translated">NoRep</target>
        </trans-unit>
        <trans-unit id="1f05476b651d40952a09c240ebf9fac1ee2f0ecf" translate="yes" xml:space="preserve">
          <source>NoSig</source>
          <target state="translated">NoSig</target>
        </trans-unit>
        <trans-unit id="4f1a01f2c1623f4835ba19bede7f20adf4398de2" translate="yes" xml:space="preserve">
          <source>NoSignalSpecificInfo</source>
          <target state="translated">NoSignalSpecificInfo</target>
        </trans-unit>
        <trans-unit id="3d74bf1957091d8e6ef1871b6be8c6329c5dc42a" translate="yes" xml:space="preserve">
          <source>NoSourceStrictness</source>
          <target state="translated">NoSourceStrictness</target>
        </trans-unit>
        <trans-unit id="0c2a4e95086b0b409bb4f59152de8186a4620e2e" translate="yes" xml:space="preserve">
          <source>NoSourceUnpackedness</source>
          <target state="translated">NoSourceUnpackedness</target>
        </trans-unit>
        <trans-unit id="2c12d214fa2aec0228a5d637aa7ea65cc010993a" translate="yes" xml:space="preserve">
          <source>NoSpecConstr</source>
          <target state="translated">NoSpecConstr</target>
        </trans-unit>
        <trans-unit id="c87682f274a125492ffb6e8e300878ad8dfd10c4" translate="yes" xml:space="preserve">
          <source>NoStream</source>
          <target state="translated">NoStream</target>
        </trans-unit>
        <trans-unit id="a07ff5298c0951a2189ecc18db227733a60fe41f" translate="yes" xml:space="preserve">
          <source>NoSuchThing</source>
          <target state="translated">NoSuchThing</target>
        </trans-unit>
        <trans-unit id="260f7a8cd4f6938b3cc185a619847cb83d670219" translate="yes" xml:space="preserve">
          <source>Node</source>
          <target state="translated">Node</target>
        </trans-unit>
        <trans-unit id="7b31028629115aecb301b21cc97f7edef2c73b0d" translate="yes" xml:space="preserve">
          <source>Noindex:</source>
          <target state="translated">Noindex:</target>
        </trans-unit>
        <trans-unit id="80e02bcdfb29620da030c45545609a5abf4202d6" translate="yes" xml:space="preserve">
          <source>NominalDiffTime</source>
          <target state="translated">NominalDiffTime</target>
        </trans-unit>
        <trans-unit id="abf94255694225d9e3e43eaf362134e8526f6ae7" translate="yes" xml:space="preserve">
          <source>NominalR</source>
          <target state="translated">NominalR</target>
        </trans-unit>
        <trans-unit id="037918d2c5120c9cbb587548e13bc313033ab3b2" translate="yes" xml:space="preserve">
          <source>Non-I/O exceptions are not caught by this variant; to catch all exceptions, use &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;../base-4.13.0.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;.</source>
          <target state="translated">非I / O例外は、このバリアントではキャッチされません。すべての例外を &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; 、&lt;a href=&quot;../base-4.13.0.0/control-exception&quot;&gt;Control.Exceptionの&lt;/a&gt;catchを使用します。</target>
        </trans-unit>
        <trans-unit id="20d74269687af42f4b4b46a0d3082a85e712f116" translate="yes" xml:space="preserve">
          <source>Non-I/O exceptions are not caught by this variant; to catch all exceptions, use &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;../base-4.13.0.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;.</source>
          <target state="translated">非I / O例外は、このバリアントではキャッチされません。すべての例外をキャッチするには、&lt;a href=&quot;../base-4.13.0.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;から &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="807536be49abd7e4ede9ecfbdfd745c107cf953a" translate="yes" xml:space="preserve">
          <source>Non-I/O exceptions are not caught by this variant; to catch all exceptions, use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;.</source>
          <target state="translated">Non-I/O exceptions are not caught by this variant; to catch all exceptions, use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="25418d52199dc7c513f4cee3f73d6d7310cf1f5c" translate="yes" xml:space="preserve">
          <source>Non-I/O exceptions are not caught by this variant; to catch all exceptions, use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;.</source>
          <target state="translated">Non-I/O exceptions are not caught by this variant; to catch all exceptions, use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="170135375b67e03b02c70f49ab98d2f0cdc114a4" translate="yes" xml:space="preserve">
          <source>Non-I/O exceptions are not caught by this variant; to catch all exceptions, use &lt;code&gt;&lt;a href=&quot;control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;control-exception&quot;&gt;Control.Exception&lt;/a&gt;.</source>
          <target state="translated">非I / O例外は、このバリアントではキャッチされません。すべての例外を &lt;code&gt;&lt;a href=&quot;control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; 、&lt;a href=&quot;control-exception&quot;&gt;Control.Exceptionの&lt;/a&gt;catchを使用します。</target>
        </trans-unit>
        <trans-unit id="07172365937f11c692e2378e135c9de0a6c4fc1d" translate="yes" xml:space="preserve">
          <source>Non-I/O exceptions are not caught by this variant; to catch all exceptions, use &lt;code&gt;&lt;a href=&quot;control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;control-exception&quot;&gt;Control.Exception&lt;/a&gt;.</source>
          <target state="translated">非I / O例外は、このバリアントではキャッチされません。すべての例外をキャッチするには、&lt;a href=&quot;control-exception&quot;&gt;Control.Exception&lt;/a&gt;から &lt;code&gt;&lt;a href=&quot;control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="8a175d95577964fb56cb4711f1d7a40794f1985b" translate="yes" xml:space="preserve">
          <source>Non-blocking version of &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hLock&quot;&gt;hLock&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hLock&quot;&gt;hLock&lt;/a&gt;&lt;/code&gt; の非ブロッキングバージョン。</target>
        </trans-unit>
        <trans-unit id="25aed430b07f146833188f2c98703c7e3ef2511c" translate="yes" xml:space="preserve">
          <source>Non-blocking version of &lt;code&gt;&lt;a href=&quot;ghc-io-handle-lock#v:hLock&quot;&gt;hLock&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle-lock#v:hLock&quot;&gt;hLock&lt;/a&gt;&lt;/code&gt; の非ブロッキングバージョン。</target>
        </trans-unit>
        <trans-unit id="15bf21e487b389622890a596e34f6fc7e8f358bf" translate="yes" xml:space="preserve">
          <source>Non-breaking space.</source>
          <target state="translated">壊れない空間。</target>
        </trans-unit>
        <trans-unit id="657f262735772874a296a8f71e1b1c62bf07d9a2" translate="yes" xml:space="preserve">
          <source>Non-empty (and non-strict) list type.</source>
          <target state="translated">空ではない(厳密ではない)リスト型。</target>
        </trans-unit>
        <trans-unit id="b5705ef9b6ed9ffaa0586c5a035fc344b83d2dc7" translate="yes" xml:space="preserve">
          <source>Non-empty stream transformations</source>
          <target state="translated">空でないストリーム変換</target>
        </trans-unit>
        <trans-unit id="66475509406517f2fea398ae5c038a688074d402" translate="yes" xml:space="preserve">
          <source>Non-empty, possibly infinite, multi-way trees; also known as &lt;em&gt;rose trees&lt;/em&gt;.</source>
          <target state="translated">空ではない、おそらく無限の多方向ツリー。&lt;em&gt;バラの木と&lt;/em&gt;も呼ばれ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="118fcb6b47ea6e15234cae7f675b98f3c5573c53" translate="yes" xml:space="preserve">
          <source>Non-orphan &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance only defined for &lt;code&gt;base-4.9.0.0&lt;/code&gt; and later; orphan instances for older GHCs are provided by the &lt;a href=&quot;http://hackage.haskell.org/package/semigroups&quot;&gt;semigroups&lt;/a&gt; package</source>
          <target state="translated">孤立していない &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; インスタンスは &lt;code&gt;base-4.9.0.0&lt;/code&gt; 以降でのみ定義されています。古いGHCの孤立インスタンスは、&lt;a href=&quot;http://hackage.haskell.org/package/semigroups&quot;&gt;semigroups&lt;/a&gt;パッケージによって提供されます</target>
        </trans-unit>
        <trans-unit id="ecdd09903f2088ad3dbc8beaa6ad86be3ab5df1c" translate="yes" xml:space="preserve">
          <source>Non-orphan &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance only defined for &lt;code&gt;base-4.9.0.0&lt;/code&gt; and later; orphan instances for older GHCs are provided by the &lt;a href=&quot;http://hackage.haskell.org/package/semigroups&quot;&gt;semigroups&lt;/a&gt; package</source>
          <target state="translated">孤立していない &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; インスタンスは、 &lt;code&gt;base-4.9.0.0&lt;/code&gt; 以降でのみ定義されています。古いGHCの孤立したインスタンスは、&lt;a href=&quot;http://hackage.haskell.org/package/semigroups&quot;&gt;semigroups&lt;/a&gt;パッケージによって提供されます</target>
        </trans-unit>
        <trans-unit id="32a62670f2797b774ced2a5536c4d0d7d1acb628" translate="yes" xml:space="preserve">
          <source>Non-portable (Win32 API)</source>
          <target state="translated">非移植型(Win32 API)</target>
        </trans-unit>
        <trans-unit id="de79a7eacd9c8f0b77168b00c602dc91ea05f6b2" translate="yes" xml:space="preserve">
          <source>Non-portable, host-dependent</source>
          <target state="translated">ホストに依存した非携帯型</target>
        </trans-unit>
        <trans-unit id="92677a20e8a5fd94c0d5c1b4a2da0341122cf84c" translate="yes" xml:space="preserve">
          <source>NonBlockingRead</source>
          <target state="translated">NonBlockingRead</target>
        </trans-unit>
        <trans-unit id="5b969d02f949f3f49405f19ebd47eac2c53d5a3b" translate="yes" xml:space="preserve">
          <source>NonEmpty</source>
          <target state="translated">NonEmpty</target>
        </trans-unit>
        <trans-unit id="40c6def45ece9471c76046198d964195df309603" translate="yes" xml:space="preserve">
          <source>NonSpacingMark</source>
          <target state="translated">NonSpacingMark</target>
        </trans-unit>
        <trans-unit id="b990552d62e10bbd5a741b4ac2ab3d4c18f945d9" translate="yes" xml:space="preserve">
          <source>NonTermination</source>
          <target state="translated">NonTermination</target>
        </trans-unit>
        <trans-unit id="3784bca2cdaf835e7f86ca7f9511c965f0a8c209" translate="yes" xml:space="preserve">
          <source>NondecreasingIndentation</source>
          <target state="translated">NondecreasingIndentation</target>
        </trans-unit>
        <trans-unit id="6eef6648406c333a4035cd5e60d0bf2ecf2606d7" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">None</target>
        </trans-unit>
        <trans-unit id="c599027fb1d35ffa00b3e30d51774d4325f6d3cd" translate="yes" xml:space="preserve">
          <source>None of the process-creation functions in this library wait for termination: they all return a &lt;code&gt;&lt;a href=&quot;system-process-internals#t:ProcessHandle&quot;&gt;ProcessHandle&lt;/a&gt;&lt;/code&gt; which may be used to wait for the process later.</source>
          <target state="translated">このライブラリのプロセス作成関数はどれも終了を待機しません。これらはすべて、 &lt;code&gt;&lt;a href=&quot;system-process-internals#t:ProcessHandle&quot;&gt;ProcessHandle&lt;/a&gt;&lt;/code&gt; プロセスを待機するために使用できるProcessHandleを返します。</target>
        </trans-unit>
        <trans-unit id="64d718b604b802439e898076aa4d8e2656afd5eb" translate="yes" xml:space="preserve">
          <source>None of these restrictions are enforced at compile time. Failure to heed these restrictions will lead to runtime errors that can be very difficult to track down. (The errors likely will not manifest until garbage collection happens.) In tabular form, these restrictions are:</source>
          <target state="translated">これらの制限はいずれもコンパイル時には適用されません。これらの制限を守らないと、実行時エラーが発生し、追跡するのが非常に困難になります。(エラーはガベージコレクションが発生するまで顕在化しない可能性が高いです。)表形式では、これらの制限は以下のようになっています。</target>
        </trans-unit>
        <trans-unit id="179bfbb77ce151401fc8902ad181e29e5aa72b44" translate="yes" xml:space="preserve">
          <source>None of these scenarios gives rise to an error on its own &lt;a href=&quot;#id6&quot; id=&quot;id3&quot;&gt;1&lt;/a&gt;, but they may have some interesting consequences. For instance, if you have a type &lt;code&gt;M.T&lt;/code&gt; from version 1 of package &lt;code&gt;P&lt;/code&gt;, then this is &lt;em&gt;not&lt;/em&gt; the same as the type &lt;code&gt;M.T&lt;/code&gt; from version 2 of package &lt;code&gt;P&lt;/code&gt;, and GHC will report an error if you try to use one where the other is expected.</source>
          <target state="translated">None of these scenarios gives rise to an error on its own &lt;a href=&quot;#id6&quot; id=&quot;id3&quot;&gt;1&lt;/a&gt;, but they may have some interesting consequences. For instance, if you have a type &lt;code&gt;M.T&lt;/code&gt; from version 1 of package &lt;code&gt;P&lt;/code&gt; , then this is &lt;em&gt;not&lt;/em&gt; the same as the type &lt;code&gt;M.T&lt;/code&gt; from version 2 of package &lt;code&gt;P&lt;/code&gt; , and GHC will report an error if you try to use one where the other is expected.</target>
        </trans-unit>
        <trans-unit id="7a74eb719911afcf06b21975147c785a0bc25d01" translate="yes" xml:space="preserve">
          <source>None of these scenarios gives rise to an error on its own &lt;a href=&quot;#id6&quot; id=&quot;id3&quot;&gt;[1]&lt;/a&gt;, but they may have some interesting consequences. For instance, if you have a type &lt;code&gt;M.T&lt;/code&gt; from version 1 of package &lt;code&gt;P&lt;/code&gt;, then this is &lt;em&gt;not&lt;/em&gt; the same as the type &lt;code&gt;M.T&lt;/code&gt; from version 2 of package &lt;code&gt;P&lt;/code&gt;, and GHC will report an error if you try to use one where the other is expected.</source>
          <target state="translated">これらのシナリオは、それ自体でエラーを引き起こすことはありませんが&lt;a href=&quot;#id6&quot; id=&quot;id3&quot;&gt;[1]&lt;/a&gt;、興味深い結果をもたらす可能性があります。たとえば、パッケージ &lt;code&gt;P&lt;/code&gt; のバージョン1のタイプ &lt;code&gt;M.T&lt;/code&gt; がある場合、これはパッケージ &lt;code&gt;P&lt;/code&gt; のバージョン2のタイプ &lt;code&gt;M.T&lt;/code&gt; と同じではあり&lt;em&gt;ません。&lt;/em&gt;一方が期待されている場所で一方を使用しようとすると、GHCはエラーを報告します。 。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="69de0eaa26a62ea07b1802cfb77025b19669e630" translate="yes" xml:space="preserve">
          <source>None, one or many flags: FORCE_DOWNLOAD, NEW_SESSION, LOGON_UI, PASSWORD_UI</source>
          <target state="translated">なし、1つまたは複数のフラグ。FORCE_DOWNLOAD、NEW_SESSION、LOGON_UI、PASSWORD_UI</target>
        </trans-unit>
        <trans-unit id="9a9707be07da6862114abd49d2570046d4810ca5" translate="yes" xml:space="preserve">
          <source>None.</source>
          <target state="translated">None.</target>
        </trans-unit>
        <trans-unit id="3956b2dc6672b7a8aeba865f33ebd6d3f65e6bf3" translate="yes" xml:space="preserve">
          <source>Nor this, since we can&amp;rsquo;t match the type variable &lt;code&gt;b&lt;/code&gt; with the concrete type &lt;code&gt;Int&lt;/code&gt;:</source>
          <target state="translated">これも、型変数 &lt;code&gt;b&lt;/code&gt; を具象型 &lt;code&gt;Int&lt;/code&gt; と一致させることができないためです。</target>
        </trans-unit>
        <trans-unit id="d20bdaf69fe8a19867cb42c9cdb8f5cb996bbe72" translate="yes" xml:space="preserve">
          <source>Normal GHC command-line options may also be set using &lt;a href=&quot;#ghci-cmd-:set&quot;&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/a&gt;. For example, to turn on &lt;a href=&quot;using-warnings#ghc-flag--Wmissing-signatures&quot;&gt;&lt;code&gt;-Wmissing-signatures&lt;/code&gt;&lt;/a&gt;, you would say:</source>
          <target state="translated">通常のGHCコマンドラインオプションは&lt;a href=&quot;#ghci-cmd-:set&quot;&gt; &lt;code&gt;:set&lt;/code&gt; &lt;/a&gt;を使用して設定することもできます。たとえば、&lt;a href=&quot;using-warnings#ghc-flag--Wmissing-signatures&quot;&gt; &lt;code&gt;-Wmissing-signatures&lt;/code&gt; &lt;/a&gt;をオンにするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="513df9742a975687401c53473a16fb97236fc768" translate="yes" xml:space="preserve">
          <source>Normal rendering (&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:ribbonsPerLine&quot;&gt;ribbonsPerLine&lt;/a&gt;&lt;/code&gt; respected').</source>
          <target state="translated">通常のレンダリング（ &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:ribbonsPerLine&quot;&gt;ribbonsPerLine&lt;/a&gt;&lt;/code&gt; が尊重される）。</target>
        </trans-unit>
        <trans-unit id="8783461cc620ec6206ab159d2917107156d93ac4" translate="yes" xml:space="preserve">
          <source>Normal rendering (&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:ribbonsPerLine&quot;&gt;ribbonsPerLine&lt;/a&gt;&lt;/code&gt; respected').</source>
          <target state="translated">通常のレンダリング（ &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:ribbonsPerLine&quot;&gt;ribbonsPerLine&lt;/a&gt;&lt;/code&gt; が尊重される）。</target>
        </trans-unit>
        <trans-unit id="1141a9ad4c5428e5700498684f4c71b8dcf76603" translate="yes" xml:space="preserve">
          <source>Normal rendering (&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:ribbonsPerLine&quot;&gt;ribbonsPerLine&lt;/a&gt;&lt;/code&gt; respected').</source>
          <target state="translated">通常のレンダリング（ &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:ribbonsPerLine&quot;&gt;ribbonsPerLine&lt;/a&gt;&lt;/code&gt; が尊重される）。</target>
        </trans-unit>
        <trans-unit id="22f3e78d5abb68171706a8fafe82f673d997000a" translate="yes" xml:space="preserve">
          <source>Normalise a file</source>
          <target state="translated">ファイルの正規化</target>
        </trans-unit>
        <trans-unit id="611ffe5a187425b7883a55311ee06c6a7a49d00e" translate="yes" xml:space="preserve">
          <source>Normally &lt;code&gt;GHC_PACKAGE_PATH&lt;/code&gt; replaces the default package stack. For example, all of the following commands are equivalent, creating a stack with db1 at the top followed by db2 (use &lt;code&gt;;&lt;/code&gt; instead of &lt;code&gt;:&lt;/code&gt; on Windows):</source>
          <target state="translated">通常、 &lt;code&gt;GHC_PACKAGE_PATH&lt;/code&gt; はデフォルトのパッケージスタックを置き換えます。たとえば、次のコマンドはすべて同等で、上部にdb1があり、その後にdb2が続くスタックを作成します（Windowsでは &lt;code&gt;:&lt;/code&gt; の代わりに &lt;code&gt;;&lt;/code&gt; を使用）。</target>
        </trans-unit>
        <trans-unit id="c4d28ac1c5fe75c0d62d49db7673ea2ff1f98808" translate="yes" xml:space="preserve">
          <source>Normally GHC will do a reasonable job of deciding by itself when it is a good idea to inline a function. However, sometimes you might want to override the default behaviour. For example, if you have a key function that is important to inline because it leads to further optimisations, but GHC judges it to be too big to inline.</source>
          <target state="translated">通常、GHCは関数をインライン化した方が良いかどうかを自分で判断するための合理的な仕事をしてくれます。しかし、時にはデフォルトの動作をオーバーライドしたくなることもあるでしょう。例えば、さらなる最適化につながるためインライン化することが重要な重要な関数があるが、GHCはそれをインライン化するには大きすぎると判断したとします。</target>
        </trans-unit>
        <trans-unit id="eded18b2562ae6d637501fe2701b0cdec14061a3" translate="yes" xml:space="preserve">
          <source>Normally GHCi runs the interpreted code in the same process as GHC itself, on top of the same RTS and sharing the same heap. However, if the flag &lt;a href=&quot;#ghc-flag--fexternal-interpreter&quot;&gt;&lt;code&gt;-fexternal-interpreter&lt;/code&gt;&lt;/a&gt; is given, then GHC will spawn a separate process for running interpreted code, and communicate with it using messages over a pipe.</source>
          <target state="translated">通常、GHCiは、GHC自体と同じプロセスで、同じRTSの上で同じヒープを共有して、インタープリターコードを実行します。ただし、フラグ&lt;a href=&quot;#ghc-flag--fexternal-interpreter&quot;&gt; &lt;code&gt;-fexternal-interpreter&lt;/code&gt; &lt;/a&gt;が指定されている場合、GHCはインタープリターコードを実行するための個別のプロセスを生成し、パイプを介したメッセージを使用してそれと通信します。</target>
        </trans-unit>
        <trans-unit id="c241ae0454c5e6b2d8549ed450bb4a03abf609b0" translate="yes" xml:space="preserve">
          <source>Normally a profile is limited to 20 bands with additional identifiers being grouped into an &lt;code&gt;OTHER&lt;/code&gt; band. The &lt;code&gt;-l&lt;/code&gt; flag removes this 20 band and limit, producing as many bands as necessary. No key is produced as it won&amp;rsquo;t fit!. It is useful for creation time profiles with many bands.</source>
          <target state="translated">通常、プロファイルは20バンドに制限され、追加の識別子が &lt;code&gt;OTHER&lt;/code&gt; バンドにグループ化されます。 &lt;code&gt;-l&lt;/code&gt; フラグは、必要な数のバンドとして生成し、この20バンドと制限を取り除きます。適合しないため、キーは生成されません！。多くのバンドを持つ時間プロファイルの作成に役立ちます。</target>
        </trans-unit>
        <trans-unit id="64c59b3d2432ce6c3b8d68909de92442ecb84597" translate="yes" xml:space="preserve">
          <source>Normally a profile is limited to 20 bands with additional identifiers being grouped into an &lt;code&gt;OTHER&lt;/code&gt; band. The &lt;code&gt;-m&lt;/code&gt; flag specifies an alternative band limit (the maximum is 20).</source>
          <target state="translated">通常、プロファイルは20バンドに制限され、追加の識別子が &lt;code&gt;OTHER&lt;/code&gt; バンドにグループ化されます。 &lt;code&gt;-m&lt;/code&gt; フラグは、別の帯域制限を（最大20）を指定します。</target>
        </trans-unit>
        <trans-unit id="558fdf57db5511e0c5ebfaa119295e9295b0c4b3" translate="yes" xml:space="preserve">
          <source>Normally pre-compiled code for a module will be loaded if available, or otherwise the module will be compiled to byte-code. Using the &lt;code&gt;*&lt;/code&gt; prefix forces a module to be loaded as byte-code.</source>
          <target state="translated">通常、モジュールの事前にコンパイルされたコードが利用可能な場合は読み込まれます。そうでない場合、モジュールはバイトコードにコンパイルされます。 &lt;code&gt;*&lt;/code&gt; 接頭辞を使用すると、モジュールがバイトコードとしてロードされます。</target>
        </trans-unit>
        <trans-unit id="ecdcacb1582613bd12eb621f5b461a7931c33bbc" translate="yes" xml:space="preserve">
          <source>Normally there is no fixed relationship between Haskell threads and OS threads. This means that when you make a foreign call, that call may take place in an unspecified OS thread. Furthermore, there is no guarantee that multiple calls made by one Haskell thread will be made by the same OS thread.</source>
          <target state="translated">通常、HaskellスレッドとOSスレッドの間には固定の関係はありません。つまり、外部からの呼び出しを行うと、その呼び出しは不特定のOSスレッドで行われる可能性があるということです。さらに、1つのHaskellスレッドで行われた複数の呼び出しが、同じOSスレッドで行われるという保証はありません。</target>
        </trans-unit>
        <trans-unit id="937628f8a7dc9eb81b2263a9e21be33c5aea1828" translate="yes" xml:space="preserve">
          <source>Normally trace elements which sum to a total of less than 1% of the profile are removed from the profile. The &lt;code&gt;-t&lt;/code&gt; option allows this percentage to be modified (maximum 5%).</source>
          <target state="translated">通常、合計でプロファイルの1％未満になる微量元素はプロファイルから削除されます。 &lt;code&gt;-t&lt;/code&gt; オプションは、（最大5％）は、この割合は変更することを可能にします。</target>
        </trans-unit>
        <trans-unit id="4d52c3563db7da009beb065365791027b03554cf" translate="yes" xml:space="preserve">
          <source>Normally ⟨x⟩ should be chosen to match the number of CPU cores on the machine &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;. For example, on a dual-core machine we would probably use &lt;code&gt;+RTS -N2 -RTS&lt;/code&gt;.</source>
          <target state="translated">Normally ⟨x⟩ should be chosen to match the number of CPU cores on the machine &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;. For example, on a dual-core machine we would probably use &lt;code&gt;+RTS -N2 -RTS&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d1424cc5421e827770c2528e2d213a27497f17fe" translate="yes" xml:space="preserve">
          <source>Normally ⟨x⟩ should be chosen to match the number of CPU cores on the machine &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;. For example, on a dual-core machine we would probably use &lt;code&gt;+RTS -N2 -RTS&lt;/code&gt;.</source>
          <target state="translated">通常、「x」は、マシンのCPUコアの数と一致するように選択する必要があります&lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;。たとえば、デュアル &lt;code&gt;+RTS -N2 -RTS&lt;/code&gt; は、おそらく+ RTS -N2 -RTSを使用します。</target>
        </trans-unit>
        <trans-unit id="adae5b8f3d2301963310d04fce57a7e110596baf" translate="yes" xml:space="preserve">
          <source>Normally, &lt;code&gt;hp2ps&lt;/code&gt; puts the title of the graph in a small box at the top of the page. However, if the JOB string is too long to fit in a small box (more than 35 characters), then &lt;code&gt;hp2ps&lt;/code&gt; will choose to use a big box instead. The &lt;code&gt;-b&lt;/code&gt; option forces &lt;code&gt;hp2ps&lt;/code&gt; to use a big box.</source>
          <target state="translated">通常、 &lt;code&gt;hp2ps&lt;/code&gt; はグラフのタイトルをページ上部の小さなボックスに配置します。ただし、JOB文字列が長すぎて小さなボックス（35文字を超える）に収まらない場合、 &lt;code&gt;hp2ps&lt;/code&gt; は代わりに大きなボックスを使用することを選択します。 &lt;code&gt;-b&lt;/code&gt; オプション軍 &lt;code&gt;hp2ps&lt;/code&gt; 大きな箱を使用します。</target>
        </trans-unit>
        <trans-unit id="c386c8961f160187b7f41a883437a0e96c21de44" translate="yes" xml:space="preserve">
          <source>Normally, &lt;em&gt;constraints&lt;/em&gt; (which appear in types to the left of the &lt;code&gt;=&amp;gt;&lt;/code&gt; arrow) have a very restricted syntax. They can only be:</source>
          <target state="translated">通常、&lt;em&gt;制約&lt;/em&gt;（ &lt;code&gt;=&amp;gt;&lt;/code&gt; 矢印の左側にあるタイプで表示されます）の構文は非常に制限されています。次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="5f3b656a0be36fb8e60655756fc57d49ccf589ac" translate="yes" xml:space="preserve">
          <source>Normally, GHC&amp;rsquo;s runtime system provides a &lt;code&gt;main()&lt;/code&gt;, which arranges to invoke &lt;code&gt;Main.main&lt;/code&gt; in the Haskell program. However, you might want to link some Haskell code into a program which has a main function written in another language, say C. In order to do this, you have to initialize the Haskell runtime system explicitly.</source>
          <target state="translated">通常、GHCのランタイムシステムは、Haskellプログラムで &lt;code&gt;Main.main&lt;/code&gt; を呼び出すように調整する &lt;code&gt;main()&lt;/code&gt; を提供します。ただし、一部のHaskellコードを、メイン関数が別の言語（Cなど）で記述されたプログラムにリンクしたい場合があります。これを行うには、Haskellランタイムシステムを明示的に初期化する必要があります。</target>
        </trans-unit>
        <trans-unit id="b5878d2676aa27f57a51768346833740d2d73c3e" translate="yes" xml:space="preserve">
          <source>Normally, a permutation parser is first build with special operators like (&lt;code&gt;&lt;a href=&quot;text-parsec-perm#v:-60--124--124--62-&quot;&gt;&amp;lt;||&amp;gt;&lt;/a&gt;&lt;/code&gt;) and than transformed into a normal parser using &lt;code&gt;&lt;a href=&quot;text-parsec-perm#v:permute&quot;&gt;permute&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">通常、順列パーサーはまず（ &lt;code&gt;&lt;a href=&quot;text-parsec-perm#v:-60--124--124--62-&quot;&gt;&amp;lt;||&amp;gt;&lt;/a&gt;&lt;/code&gt; ）のような特別な演算子で構築され、 &lt;code&gt;&lt;a href=&quot;text-parsec-perm#v:permute&quot;&gt;permute&lt;/a&gt;&lt;/code&gt; を使用して通常のパーサーに変換されます。</target>
        </trans-unit>
        <trans-unit id="be63fc241b13b25bbbfbb8119202738448bc7f25" translate="yes" xml:space="preserve">
          <source>Normally, any evaluation of top-level expressions (otherwise known as CAFs or Constant Applicative Forms) in loaded modules is retained between evaluations. Turning on &lt;code&gt;+r&lt;/code&gt; causes all evaluation of top-level expressions to be discarded after each evaluation (they are still retained &lt;em&gt;during&lt;/em&gt; a single evaluation).</source>
          <target state="translated">通常、ロードされたモジュール内のトップレベル式（別名CAFまたは定数アプリケーションフォーム）の評価は、評価間で保持されます。 &lt;code&gt;+r&lt;/code&gt; をオンにすると、トップレベルの式のすべての評価が、各評価の後に破棄されます（それらは、単一の評価&lt;em&gt;中&lt;/em&gt;も保持さ&lt;em&gt;れ&lt;/em&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="cd32d0c154484c3ec18509a839994848298d2636" translate="yes" xml:space="preserve">
          <source>Normally, setting the &lt;a href=&quot;#rts-flag--V%20%E2%9F%A8secs%E2%9F%A9&quot;&gt;&lt;code&gt;-V ⟨secs⟩&lt;/code&gt;&lt;/a&gt; option directly is not necessary: the resolution of the RTS timer is adjusted automatically if a short interval is requested with the &lt;code&gt;-C ⟨s⟩&lt;/code&gt; or &lt;a href=&quot;#rts-flag--i%20%E2%9F%A8secs%E2%9F%A9&quot;&gt;&lt;code&gt;-i
⟨secs⟩&lt;/code&gt;&lt;/a&gt; options. However, setting &lt;a href=&quot;#rts-flag--V%20%E2%9F%A8secs%E2%9F%A9&quot;&gt;&lt;code&gt;-V ⟨secs⟩&lt;/code&gt;&lt;/a&gt; is required in order to increase the resolution of the time profiler.</source>
          <target state="translated">通常、&lt;a href=&quot;#rts-flag--V%20%E2%9F%A8secs%E2%9F%A9&quot;&gt; &lt;code&gt;-V ⟨secs⟩&lt;/code&gt; &lt;/a&gt;オプションを直接設定する必要はありません。RTSタイマーの分解能は、 &lt;code&gt;-C ⟨s⟩&lt;/code&gt; または&lt;a href=&quot;#rts-flag--i%20%E2%9F%A8secs%E2%9F%A9&quot;&gt; &lt;code&gt;-i ⟨secs⟩&lt;/code&gt; &lt;/a&gt;オプションで短い間隔が要求された場合に自動的に調整されます。ただし、時間プロファイラーの分解能を上げるには、&lt;a href=&quot;#rts-flag--V%20%E2%9F%A8secs%E2%9F%A9&quot;&gt; &lt;code&gt;-V ⟨secs⟩&lt;/code&gt; &lt;/a&gt;」を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="ca1dd39379254ab3f3c73dbffb0d03d628b27d20" translate="yes" xml:space="preserve">
          <source>Not</source>
          <target state="translated">Not</target>
        </trans-unit>
        <trans-unit id="78ccb4fb66097bf7ec98982f1e04cc05bbdcec21" translate="yes" xml:space="preserve">
          <source>Not all subexpressions are potential breakpoint locations. Single variables are typically not considered to be breakpoint locations (unless the variable is the right-hand-side of a function definition, lambda, or case alternative). The rule of thumb is that all redexes are breakpoint locations, together with the bodies of functions, lambdas, case alternatives and binding statements. There is normally no breakpoint on a let expression, but there will always be a breakpoint on its body, because we are usually interested in inspecting the values of the variables bound by the let.</source>
          <target state="translated">すべての式がブレークポイントの位置になるわけではありません。単一の変数は通常、ブレークポイントの場所とはみなされません(変数が関数定義、ラムダ、大文字小文字の代替の右側にある場合を除く)。経験則としては、すべての redexes は、関数本体、ラムダ、大文字小文字の代替、バインディング文とともに、ブレークポイントの位置となります。通常、let式にはブレークポイントはありませんが、その本体には常にブレークポイントがあります。</target>
        </trans-unit>
        <trans-unit id="4ab7fbf9aa0be7d87015cd3b43f6141b9208bf3f" translate="yes" xml:space="preserve">
          <source>Not all systems support &lt;code&gt;utimensat&lt;/code&gt;, in which case the function can only emulate the behavior by reading the access time and then setting both the access and modification times together. On systems where &lt;code&gt;utimensat&lt;/code&gt; is supported, the modification time is set atomically with nanosecond precision.</source>
          <target state="translated">すべてのシステムが &lt;code&gt;utimensat&lt;/code&gt; をサポートしているわけではありません。その場合、関数はアクセス時間を読み取り、アクセス時間と変更時間の両方を一緒に設定することによってのみ動作をエミュレートできます。 &lt;code&gt;utimensat&lt;/code&gt; がサポートされているシステムでは、変更時刻はナノ秒の精度でアトミックに設定されます。</target>
        </trans-unit>
        <trans-unit id="fa0085970940cf874c9d2594cf9d4dd7a8d8194f" translate="yes" xml:space="preserve">
          <source>Not all systems support &lt;code&gt;utimensat&lt;/code&gt;, in which case the function can only emulate the behavior by reading the modification time and then setting both the access and modification times together. On systems where &lt;code&gt;utimensat&lt;/code&gt; is supported, the access time is set atomically with nanosecond precision.</source>
          <target state="translated">すべてのシステムが &lt;code&gt;utimensat&lt;/code&gt; をサポートしているわけではありません。その場合、関数は変更時間を読み取り、アクセス時間と変更時間の両方を一緒に設定することによってのみ動作をエミュレートできます。 &lt;code&gt;utimensat&lt;/code&gt; がサポートされているシステムでは、アクセス時間はナノ秒の精度でアトミックに設定されます。</target>
        </trans-unit>
        <trans-unit id="b2afb94fa1ad8b2117ab0fcdb5aa0be0a87a1018" translate="yes" xml:space="preserve">
          <source>Not combined (tricky):</source>
          <target state="translated">合体していない(トリッキー)。</target>
        </trans-unit>
        <trans-unit id="c0dd126e18fca943161e0d20a36b21e212c3c99b" translate="yes" xml:space="preserve">
          <source>Not combined:</source>
          <target state="translated">合体していない。</target>
        </trans-unit>
        <trans-unit id="78133acc4cfff50b8f073295fd4a15e10edaae9e" translate="yes" xml:space="preserve">
          <source>Not every index within the bounds of the array need appear in the association list, but the values associated with indices that do not appear will be undefined (i.e. bottom).</source>
          <target state="translated">配列の範囲内のすべてのインデックスがアソシエーションリストに表示される必要はありませんが、表示されないインデックスに関連付けられた値は未定義になります(つまり、ボトム)。</target>
        </trans-unit>
        <trans-unit id="a5c24f03828759592657815b91d4e8eac318fcb9" translate="yes" xml:space="preserve">
          <source>Not every index within the bounds of the array need appear in the association list, but the values associated with indices that do not appear will be undefined.</source>
          <target state="translated">配列の範囲内のすべてのインデックスがアソシエーションリストに表示される必要はありませんが、表示されないインデックスに関連付けられた値は未定義になります。</target>
        </trans-unit>
        <trans-unit id="b8634acd7e6ee3c03ecde3208f3a307f2f045508" translate="yes" xml:space="preserve">
          <source>Not only do we now know the type of &lt;code&gt;left&lt;/code&gt;, but all the other partial types have also been resolved. So we can ask for the value of &lt;code&gt;a&lt;/code&gt;, for example:</source>
          <target state="translated">これで、 &lt;code&gt;left&lt;/code&gt; のタイプがわかっただけでなく、他のすべての部分タイプも解決されました。だから我々は、の値を求めることができますたとえば、： &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4035b9c2b5847ce2b4b7d233cc698ae5fa143ff0" translate="yes" xml:space="preserve">
          <source>Not-equal predicate.</source>
          <target state="translated">非等価な述語。</target>
        </trans-unit>
        <trans-unit id="122fe604627a6b3c6c7479e2e3d9b217a06c8a81" translate="yes" xml:space="preserve">
          <source>NotAssigned</source>
          <target state="translated">NotAssigned</target>
        </trans-unit>
        <trans-unit id="029164befa1985fe4c7c950daf75d5070657a309" translate="yes" xml:space="preserve">
          <source>NotAssociative</source>
          <target state="translated">NotAssociative</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="54ab9353b38cfd8cfc741410b64bcd8b4ace3d86" translate="yes" xml:space="preserve">
          <source>Note also that the following declaration is not allowed, even by itself:</source>
          <target state="translated">また、以下のような宣言は、それ自体であっても許されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="e14be39fd5d5beacf8aca731e7b645e488e01620" translate="yes" xml:space="preserve">
          <source>Note also the following points</source>
          <target state="translated">また、以下の点にも注意してください。</target>
        </trans-unit>
        <trans-unit id="e391e16c3d6dadad7a54ff544e2321aabfc38d3d" translate="yes" xml:space="preserve">
          <source>Note also the inter-module dependencies at the end of the Makefile, which take the form</source>
          <target state="translated">Makefile の最後にあるモジュール間の依存関係にも注意してください。</target>
        </trans-unit>
        <trans-unit id="0f69bf791521771e7eed4606436969fb2e27e8cf" translate="yes" xml:space="preserve">
          <source>Note how this operator resembles function composition &lt;code&gt;(&lt;a href=&quot;../base-4.13.0.0/data-function#v:.&quot;&gt;.&lt;/a&gt;)&lt;/code&gt;:</source>
          <target state="translated">この演算子は関数合成に似ている方法に注意してください &lt;code&gt;(&lt;a href=&quot;../base-4.13.0.0/data-function#v:.&quot;&gt;.&lt;/a&gt;)&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c5d2df4cb0a27c46da53e1c8dd36d7ee084e8ccd" translate="yes" xml:space="preserve">
          <source>Note how this operator resembles function composition &lt;code&gt;(&lt;a href=&quot;../base-4.14.1.0/data-function#v:.&quot;&gt;.&lt;/a&gt;)&lt;/code&gt;:</source>
          <target state="translated">Note how this operator resembles function composition &lt;code&gt;(&lt;a href=&quot;../base-4.14.1.0/data-function#v:.&quot;&gt;.&lt;/a&gt;)&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="58c74ad1a011259a6e943fb74b3e3c3c2695a3b0" translate="yes" xml:space="preserve">
          <source>Note how this operator resembles function composition &lt;code&gt;(&lt;a href=&quot;data-function#v:.&quot;&gt;.&lt;/a&gt;)&lt;/code&gt;:</source>
          <target state="translated">この演算子は関数合成に似ている方法に注意してください &lt;code&gt;(&lt;a href=&quot;data-function#v:.&quot;&gt;.&lt;/a&gt;)&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="9feb1e502abb28d277cb1a7670feb6125b53c153" translate="yes" xml:space="preserve">
          <source>Note how we can define a uniform instance for &lt;code&gt;&lt;a href=&quot;ghc-generics#t:M1&quot;&gt;M1&lt;/a&gt;&lt;/code&gt;, because we completely disregard all meta-information:</source>
          <target state="translated">すべてのメタ情報を完全に無視するため、 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:M1&quot;&gt;M1&lt;/a&gt;&lt;/code&gt; の統一インスタンスをどのように定義できるかに注意してください。</target>
        </trans-unit>
        <trans-unit id="45519c1953b86b55e65ecc080a301283fb324351" translate="yes" xml:space="preserve">
          <source>Note how we write an initial tag byte to indicate each variant of the data type.</source>
          <target state="translated">データ型の各バリアントを示すために、初期タグバイトをどのように書くかに注意してください。</target>
        </trans-unit>
        <trans-unit id="c9cb756c35baef541318a2fa53e969cf959a31f5" translate="yes" xml:space="preserve">
          <source>Note in particular that the main program thread (the thread running &lt;code&gt;Main.main&lt;/code&gt;) is always a bound thread, so for good concurrency performance you should ensure that the main thread is not doing repeated communication with other threads in the system. Typically this means forking subthreads to do the work using &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;, and waiting for the results in the main thread.</source>
          <target state="translated">特に、メインプログラムスレッド（ &lt;code&gt;Main.main&lt;/code&gt; を実行しているスレッド）は常にバインドされたスレッドであるため、同時実行性を高めるには、メインスレッドがシステム内の他のスレッドと繰り返し通信しないようにする必要があります。通常、この手段が使用して仕事をするためにサブスレッドをフォーク &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; を、メインスレッドで結果を待っています。</target>
        </trans-unit>
        <trans-unit id="31f3f6f5adc996e06ed48014b2b93cc6d3ecc2dc" translate="yes" xml:space="preserve">
          <source>Note in particular that the translation for a &lt;code&gt;rec&lt;/code&gt; block only involves wrapping a call to &lt;code&gt;mfix&lt;/code&gt;: it performs no other analysis on the bindings. The latter is the task for the &lt;code&gt;mdo&lt;/code&gt; notation, which is described next.</source>
          <target state="translated">特に、 &lt;code&gt;rec&lt;/code&gt; ブロックの変換には &lt;code&gt;mfix&lt;/code&gt; の呼び出しのラップのみが含まれることに注意してください。これは、バインディングに対して他の分析を実行しません。後者は、次に説明する &lt;code&gt;mdo&lt;/code&gt; 表記のタスクです。</target>
        </trans-unit>
        <trans-unit id="3639d52b7d40ee212b47bb683d401fdb19f2b8d7" translate="yes" xml:space="preserve">
          <source>Note on rewrite rules:</source>
          <target state="translated">書き換えルールについての注意点</target>
        </trans-unit>
        <trans-unit id="da7038b6159ab37164aeb7442907c881108aff7e" translate="yes" xml:space="preserve">
          <source>Note that</source>
          <target state="translated">以下のことに注意してください。</target>
        </trans-unit>
        <trans-unit id="2bbeb687e1b7425b59bec3bcf47cccd24fd58a0f" translate="yes" xml:space="preserve">
          <source>Note that (7.) and (8.) do &lt;em&gt;not&lt;/em&gt; require &lt;code&gt;&lt;a href=&quot;data-ord#v:min&quot;&gt;min&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-ord#v:max&quot;&gt;max&lt;/a&gt;&lt;/code&gt; to return either of their arguments. The result is merely required to &lt;em&gt;equal&lt;/em&gt; one of the arguments in terms of &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;(==)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">（7.）と（8.）は、どちらの引数も返すために &lt;code&gt;&lt;a href=&quot;data-ord#v:min&quot;&gt;min&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-ord#v:max&quot;&gt;max&lt;/a&gt;&lt;/code&gt; を必要とし&lt;em&gt;ない&lt;/em&gt;ことに注意してください。結果は、 &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;(==)&lt;/a&gt;&lt;/code&gt; に関して引数の1つに&lt;em&gt;等しい&lt;/em&gt;必要があるだけです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3e828fd5138d7798acc9021c701b389b03f3b726" translate="yes" xml:space="preserve">
          <source>Note that (7.) and (8.) do &lt;em&gt;not&lt;/em&gt; require &lt;code&gt;&lt;a href=&quot;prelude#v:min&quot;&gt;min&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:max&quot;&gt;max&lt;/a&gt;&lt;/code&gt; to return either of their arguments. The result is merely required to &lt;em&gt;equal&lt;/em&gt; one of the arguments in terms of &lt;code&gt;&lt;a href=&quot;prelude#v:-61--61-&quot;&gt;(==)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">（7.）と（8.）は、どちらの引数も返すために &lt;code&gt;&lt;a href=&quot;prelude#v:min&quot;&gt;min&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;prelude#v:max&quot;&gt;max&lt;/a&gt;&lt;/code&gt; を必要とし&lt;em&gt;ない&lt;/em&gt;ことに注意してください。結果は、 &lt;code&gt;&lt;a href=&quot;prelude#v:-61--61-&quot;&gt;(==)&lt;/a&gt;&lt;/code&gt; に関して引数の1つに&lt;em&gt;等しい&lt;/em&gt;必要があるだけです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="041e17d2804b0af5a76a5a97a0bba4a277288826" translate="yes" xml:space="preserve">
          <source>Note that 0 &amp;lt;= &lt;code&gt;&lt;a href=&quot;data-time-localtime#v:todSec&quot;&gt;todSec&lt;/a&gt;&lt;/code&gt; &amp;lt; 61, accomodating leap seconds. Any local minute may have a leap second, since leap seconds happen in all zones simultaneously</source>
          <target state="translated">うるう秒に &lt;code&gt;&lt;a href=&quot;data-time-localtime#v:todSec&quot;&gt;todSec&lt;/a&gt;&lt;/code&gt; する0 &amp;lt;= todSec &amp;lt;61であることに注意してください。うるう秒はすべてのゾーンで同時に発生するため、ローカルの分にはうるう秒がある場合があります。</target>
        </trans-unit>
        <trans-unit id="4fc3cfabe43b8bcfa1705a3dbc018667744dc410" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#extension-DerivingVia&quot;&gt;&lt;code&gt;DerivingVia&lt;/code&gt;&lt;/a&gt; (see &lt;a href=&quot;#deriving-via&quot;&gt;Deriving via&lt;/a&gt;) uses essentially the same specification to derive instances of associated type families as well (except that it uses the &lt;code&gt;via&lt;/code&gt; type instead of the underlying &lt;code&gt;rep-type&lt;/code&gt; of a newtype).</source>
          <target state="translated">&lt;a href=&quot;#extension-DerivingVia&quot;&gt; &lt;code&gt;DerivingVia&lt;/code&gt; &lt;/a&gt;（「&lt;a href=&quot;#deriving-via&quot;&gt;Deriving via&lt;/a&gt;」を参照）は、基本的に同じ仕様を使用して、関連するタイプファミリーのインスタンスも派生させることに注意してください（ただし、newtypeの基になる &lt;code&gt;rep-type&lt;/code&gt; の代わりに &lt;code&gt;via&lt;/code&gt; タイプを使用します）。</target>
        </trans-unit>
        <trans-unit id="20cfa8d6154c21f756b99008f5e887fb998ca694" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#ghc-flag--Wunused-matches&quot;&gt;&lt;code&gt;-Wunused-matches&lt;/code&gt;&lt;/a&gt; does not warn about variables which arise from type-level patterns, as found in type family and data family instances. This must be enabled separately through the &lt;a href=&quot;#ghc-flag--Wunused-type-patterns&quot;&gt;&lt;code&gt;-Wunused-type-patterns&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--Wunused-matches&quot;&gt; &lt;code&gt;-Wunused-matches&lt;/code&gt; &lt;/a&gt;は、タイプファミリーおよびデータファミリーのインスタンスに見られるような、タイプレベルのパターンから生じる変数について警告しないことに注意してください。これは、&lt;a href=&quot;#ghc-flag--Wunused-type-patterns&quot;&gt; &lt;code&gt;-Wunused-type-patterns&lt;/code&gt; &lt;/a&gt;フラグを使用して個別に有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="a0394f5adfc4a1a13e3b86c72f2c51c040f42596" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#rts-flag---nonmoving-gc&quot;&gt;&lt;code&gt;--nonmoving-gc&lt;/code&gt;&lt;/a&gt; cannot be used with &lt;code&gt;-G1&lt;/code&gt;, &lt;a href=&quot;profiling#rts-flag--hc&quot;&gt;&lt;code&gt;profiling&lt;/code&gt;&lt;/a&gt; nor &lt;a href=&quot;#rts-flag--c&quot;&gt;&lt;code&gt;-c&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Note that &lt;a href=&quot;#rts-flag---nonmoving-gc&quot;&gt; &lt;code&gt;--nonmoving-gc&lt;/code&gt; &lt;/a&gt; cannot be used with &lt;code&gt;-G1&lt;/code&gt; , &lt;a href=&quot;profiling#rts-flag--hc&quot;&gt; &lt;code&gt;profiling&lt;/code&gt; &lt;/a&gt; nor &lt;a href=&quot;#rts-flag--c&quot;&gt; &lt;code&gt;-c&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="bf7f360a57aee7e3f0b50c89a317cf8b42dfa6db" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;(&lt;a href=&quot;data-function#v:-36-&quot;&gt;$&lt;/a&gt;)&lt;/code&gt; is levity-polymorphic in its result type, so that &lt;code&gt;foo &lt;a href=&quot;data-function#v:-36-&quot;&gt;$&lt;/a&gt; True&lt;/code&gt; where &lt;code&gt;foo :: Bool -&amp;gt; Int#&lt;/code&gt; is well-typed.</source>
          <target state="translated">&lt;code&gt;(&lt;a href=&quot;data-function#v:-36-&quot;&gt;$&lt;/a&gt;)&lt;/code&gt; は、その結果の型がlevity-polymorphicであるため、 &lt;code&gt;foo &lt;a href=&quot;data-function#v:-36-&quot;&gt;$&lt;/a&gt; True&lt;/code&gt; where &lt;code&gt;foo :: Bool -&amp;gt; Int#&lt;/code&gt; Bool- &amp;gt; Int＃が適切に型指定されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="50352b9744490cab4f40a77337fe0f29b0ce0106" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;(&lt;a href=&quot;ghc-base#v:-36-&quot;&gt;$&lt;/a&gt;)&lt;/code&gt; is levity-polymorphic in its result type, so that &lt;code&gt;foo &lt;a href=&quot;ghc-base#v:-36-&quot;&gt;$&lt;/a&gt; True&lt;/code&gt; where &lt;code&gt;foo :: Bool -&amp;gt; Int#&lt;/code&gt; is well-typed.</source>
          <target state="translated">&lt;code&gt;(&lt;a href=&quot;ghc-base#v:-36-&quot;&gt;$&lt;/a&gt;)&lt;/code&gt; は、その結果の型がlevity-polymorphicであるため、 &lt;code&gt;foo &lt;a href=&quot;ghc-base#v:-36-&quot;&gt;$&lt;/a&gt; True&lt;/code&gt; where &lt;code&gt;foo :: Bool -&amp;gt; Int#&lt;/code&gt; Bool- &amp;gt; Int＃が適切に型指定されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e8b2b6839b756e03ca674d6cc20259793fba403d" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;(&lt;a href=&quot;prelude#v:-36-&quot;&gt;$&lt;/a&gt;)&lt;/code&gt; is levity-polymorphic in its result type, so that &lt;code&gt;foo &lt;a href=&quot;prelude#v:-36-&quot;&gt;$&lt;/a&gt; True&lt;/code&gt; where &lt;code&gt;foo :: Bool -&amp;gt; Int#&lt;/code&gt; is well-typed.</source>
          <target state="translated">&lt;code&gt;(&lt;a href=&quot;prelude#v:-36-&quot;&gt;$&lt;/a&gt;)&lt;/code&gt; は、その結果の型がlevity-polymorphicであるため、 &lt;code&gt;foo &lt;a href=&quot;prelude#v:-36-&quot;&gt;$&lt;/a&gt; True&lt;/code&gt; where &lt;code&gt;foo :: Bool -&amp;gt; Int#&lt;/code&gt; Bool- &amp;gt; Int＃が適切に型指定されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="123d4fdb08ddd5f13ffc17d9c9b8108ebcc613a2" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;(RunIO return)&lt;/code&gt; is an incorrect implementation, since it does not separate the pure and impure parts of the monadic action. This module defines implementations for several common monad transformers.</source>
          <target state="translated">&lt;code&gt;(RunIO return)&lt;/code&gt; はモナディックアクションの純粋な部分と不純な部分を分離しないため、不正な実装であることに注意してください。このモジュールは、いくつかの一般的なモナド変換子の実装を定義します。</target>
        </trans-unit>
        <trans-unit id="59f5f5ff16e9a38088c4dc6203d56f4f8fc6a9aa" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;-rtsopts&lt;/code&gt; has no effect when used with &lt;a href=&quot;#ghc-flag--no-hs-main&quot;&gt;&lt;code&gt;-no-hs-main&lt;/code&gt;&lt;/a&gt;; see &lt;a href=&quot;ffi-chap#using-own-main&quot;&gt;Using your own main()&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;-rtsopts&lt;/code&gt; は&lt;a href=&quot;#ghc-flag--no-hs-main&quot;&gt; &lt;code&gt;-no-hs-main&lt;/code&gt; &lt;/a&gt;と一緒に使用しても効果がないことに注意してください。詳細については&lt;a href=&quot;ffi-chap#using-own-main&quot;&gt;、独自のmain（）の使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ce579c6f316db1c83cacd820fffea2c995a62db3" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;-with-rtsopts&lt;/code&gt; has no effect when used with &lt;code&gt;-no-hs-main&lt;/code&gt;; see &lt;a href=&quot;ffi-chap#using-own-main&quot;&gt;Using your own main()&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;-with-rtsopts&lt;/code&gt; は、 &lt;code&gt;-no-hs-main&lt;/code&gt; と一緒に使用しても効果がないことに注意してください。詳細については&lt;a href=&quot;ffi-chap#using-own-main&quot;&gt;、独自のmain（）の使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3251b2749b31476313c89aa83d9865be6457e1bf" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#t:TSem&quot;&gt;TSem&lt;/a&gt;&lt;/code&gt; has no concept of fairness, and there is no guarantee that threads blocked in &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#v:waitTSem&quot;&gt;waitTSem&lt;/a&gt;&lt;/code&gt; will be unblocked in the same order; in fact they will all be unblocked at the same time and will fight over the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#t:TSem&quot;&gt;TSem&lt;/a&gt;&lt;/code&gt;. Hence &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#t:TSem&quot;&gt;TSem&lt;/a&gt;&lt;/code&gt; is not suitable if you expect there to be a high number of threads contending for the resource. However, like other STM abstractions, &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#t:TSem&quot;&gt;TSem&lt;/a&gt;&lt;/code&gt; is composable.</source>
          <target state="translated">注意 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#t:TSem&quot;&gt;TSem&lt;/a&gt;&lt;/code&gt; 、公平性の概念がない、とにブロックされたスレッドという保証はありません &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#v:waitTSem&quot;&gt;waitTSem&lt;/a&gt;&lt;/code&gt; が同じ順序でブロックを解除しますが。実際、それらはすべて同時にブロック解除され、 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#t:TSem&quot;&gt;TSem&lt;/a&gt;&lt;/code&gt; をめぐって戦います。したがって、 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#t:TSem&quot;&gt;TSem&lt;/a&gt;&lt;/code&gt; 競合するスレッドの数が多いことが予想される場合、TSemは適していません。ただし、他のSTM抽象化と同様に、 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#t:TSem&quot;&gt;TSem&lt;/a&gt;&lt;/code&gt; は構成可能です。</target>
        </trans-unit>
        <trans-unit id="23d023ee2a96a8f414c4d59de19543cf5936dac9" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; and friends &lt;em&gt;do not&lt;/em&gt; have a similar default, because there is no exception handler in this case. Don't use &lt;code&gt;&lt;a href=&quot;control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; for recovering from an asynchronous exception.</source>
          <target state="translated">この場合は例外ハンドラがないため、 &lt;code&gt;&lt;a href=&quot;control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; や友人に&lt;em&gt;は&lt;/em&gt;同様のデフォルト&lt;em&gt;がない&lt;/em&gt;ことに注意してください。非同期例外からの回復に &lt;code&gt;&lt;a href=&quot;control-exception#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="2718dae009fe5e3d1238b1c135ae52c90ac37837" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;s are a bit verbose, but quite versatile. Here is an example of a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; for combined HTML escaping and UTF-8 encoding. It exploits that the escaped character with the maximal Unicode codepoint is '&amp;gt;'.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; は少し冗長ですが、非常に用途が広いことに注意してください。これは、HTMLエスケープとUTF-8エンコーディングを組み合わせた &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; の例です。最大のUnicodeコードポイントを持つエスケープ文字が '&amp;gt;'であることを利用しています。</target>
        </trans-unit>
        <trans-unit id="cde3b09d583614c69aacef3bde117f6bdd3d0e24" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;s are &lt;code&gt;Contrafunctors&lt;/code&gt;&lt;a href=&quot;http://hackage.haskell.org/package/contravariant&quot;&gt;http://hackage.haskell.org/package/contravariant&lt;/a&gt;. Hence, the following laws hold.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;Contrafunctors&lt;/code&gt; &lt;a href=&quot;http://hackage.haskell.org/package/contravariant&quot;&gt;http://hackage.haskell.org/package/contravariantで&lt;/a&gt;あることに注意してください。したがって、以下の法律が成立します。</target>
        </trans-unit>
        <trans-unit id="2ee6deeaabf24f4412e1e49868879a0b5b1aa1c9" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;data-complex#t:Complex&quot;&gt;Complex&lt;/a&gt;&lt;/code&gt;'s instances inherit the deficiencies from the type parameter's. For example, &lt;code&gt;Complex Float&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; instance has similar problems to &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-complex#t:Complex&quot;&gt;Complex&lt;/a&gt;&lt;/code&gt; のインスタンスはタイプパラメータの欠陥を継承することに注意してください。たとえば、 &lt;code&gt;Complex Float&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; インスタンスには、 &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; と同様の問題があります。</target>
        </trans-unit>
        <trans-unit id="3e1f90e9e322b989e73d82fdede82115af771f84" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;data-list#v:inits&quot;&gt;inits&lt;/a&gt;&lt;/code&gt; has the following strictness property: &lt;code&gt;inits (xs ++ _|_) = inits xs ++ _|_&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:inits&quot;&gt;inits&lt;/a&gt;&lt;/code&gt; には次の厳格なプロパティがあることに注意してください： &lt;code&gt;inits (xs ++ _|_) = inits xs ++ _|_&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4dced2e98ed0e357e8b533e5a5a89a9d764b8df7" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;data-list#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt; is lazy, potentially leading to thunk build-up if the consumer doesn't force each iterate. See &lt;code&gt;&lt;a href=&quot;data-list#v:iterate-39-&quot;&gt;iterate'&lt;/a&gt;&lt;/code&gt; for a strict variant of this function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt; はレイジーであり、コンシューマが各イテレートを強制しない場合、サンクのビルドアップにつながる可能性があることに注意してください。この関数の厳密な変形については、 &lt;code&gt;&lt;a href=&quot;data-list#v:iterate-39-&quot;&gt;iterate'&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="2dedd1659c7efcc5ad810d0e5c4b39237ba9eb03" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;data-list#v:tails&quot;&gt;tails&lt;/a&gt;&lt;/code&gt; has the following strictness property: &lt;code&gt;tails _|_ = _|_ : _|_&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:tails&quot;&gt;tails&lt;/a&gt;&lt;/code&gt; には次の厳格なプロパティがあることに注意してください： &lt;code&gt;tails _|_ = _|_ : _|_&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="60f7565d417c50efc94986aa99cb5f4a947f5ff6" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;data-ratio#t:Ratio&quot;&gt;Ratio&lt;/a&gt;&lt;/code&gt;'s instances inherit the deficiencies from the type parameter's. For example, &lt;code&gt;Ratio Natural&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; instance has similar problems to &lt;code&gt;&lt;a href=&quot;numeric-natural#v:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt;'s.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-ratio#t:Ratio&quot;&gt;Ratio&lt;/a&gt;&lt;/code&gt; のインスタンスはtypeパラメータの欠陥を継承していることに注意してください。たとえば、 &lt;code&gt;Ratio Natural&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; インスタンスには、 &lt;code&gt;&lt;a href=&quot;numeric-natural#v:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; と同様の問題があります。</target>
        </trans-unit>
        <trans-unit id="7cefd424b19607d5edc1403e68699fc8f6d2f620" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;ghc-generics#t:K1&quot;&gt;K1&lt;/a&gt;&lt;/code&gt; (in the guise of &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Rec0&quot;&gt;Rec0&lt;/a&gt;&lt;/code&gt;) can still occur in a &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Rep1&quot;&gt;Rep1&lt;/a&gt;&lt;/code&gt; representation, namely when the datatype has a field that does not mention the parameter.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-generics#t:K1&quot;&gt;K1&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Rec0&quot;&gt;Rec0&lt;/a&gt;&lt;/code&gt; を装って）は依然として &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Rep1&quot;&gt;Rep1&lt;/a&gt;&lt;/code&gt; 表現で発生する可能性があることに注意してください。つまり、データ型にパラメータを記述しないフィールドがある場合です。</target>
        </trans-unit>
        <trans-unit id="281ca52e047c00d45cb2f86224fe53a9a4fae794" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;ghc-list#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt; is lazy, potentially leading to thunk build-up if the consumer doesn't force each iterate. See &lt;code&gt;&lt;a href=&quot;ghc-list#v:iterate-39-&quot;&gt;iterate'&lt;/a&gt;&lt;/code&gt; for a strict variant of this function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt; はレイジーであり、コンシューマが各イテレートを強制しない場合、サンクのビルドアップにつながる可能性があることに注意してください。この関数の厳密な変形については、 &lt;code&gt;&lt;a href=&quot;ghc-list#v:iterate-39-&quot;&gt;iterate'&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="1a858cff92b21869646f30a2b371df6ee5495052" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;ghc-num#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; instance isn't a ring: no element but 0 has an additive inverse. It is a semiring though.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;ghc-num#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; インスタンスはリングではないことに注意してください。要素はありませんが、0は加法的な逆になります。セミリングですけどね。</target>
        </trans-unit>
        <trans-unit id="fc2f4f0bfb855f7375943aa12d1fb8ac219a3580" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; instance isn't a ring: no element but 0 has an additive inverse. It is a semiring though.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; インスタンスはリングではないことに注意してください。要素はありませんが、0は加法的な逆になります。セミリングですけどね。</target>
        </trans-unit>
        <trans-unit id="6dbd9a25c551eff23fa22c53698220086818ffcf" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:inits&quot;&gt;inits&lt;/a&gt;&lt;/code&gt; has the following strictness property: &lt;code&gt;inits (xs ++ _|_) = inits xs ++ _|_&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:inits&quot;&gt;inits&lt;/a&gt;&lt;/code&gt; には次の厳格なプロパティがあることに注意してください： &lt;code&gt;inits (xs ++ _|_) = inits xs ++ _|_&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fd1e7ed5d4e140984d3791f7195f3b569e53a3a5" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt; is lazy, potentially leading to thunk build-up if the consumer doesn't force each iterate. See &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:iterate-39-&quot;&gt;iterate'&lt;/a&gt;&lt;/code&gt; for a strict variant of this function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt; はレイジーであり、コンシューマが各イテレートを強制しない場合、サンクのビルドアップにつながる可能性があることに注意してください。この関数の厳密な変形については、 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:iterate-39-&quot;&gt;iterate'&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="3220254f0cec09ffeb96b93db4b6d62483e447b2" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:tails&quot;&gt;tails&lt;/a&gt;&lt;/code&gt; has the following strictness property: &lt;code&gt;tails _|_ = _|_ : _|_&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:tails&quot;&gt;tails&lt;/a&gt;&lt;/code&gt; には次の厳格なプロパティがあることに注意してください： &lt;code&gt;tails _|_ = _|_ : _|_&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b6e52e647e2604f5fb2a960fb656ed98c28cb82a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;ghc-read#v:readField&quot;&gt;readField&lt;/a&gt;&lt;/code&gt; does not suffice for this purpose due to &lt;a href=&quot;https://ghc.haskell.org/trac/ghc/ticket/5041&quot;&gt;Trac #5041&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://ghc.haskell.org/trac/ghc/ticket/5041&quot;&gt;Trac＃5041の&lt;/a&gt;ため、 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readField&quot;&gt;readField&lt;/a&gt;&lt;/code&gt; はこの目的には十分ではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4590a66ec7900e5ee4d377de0bdd011b81fe11e5" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;ghc-read#v:readField&quot;&gt;readField&lt;/a&gt;&lt;/code&gt; does not suffice for this purpose due to &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/5041&quot;&gt;#5041&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/5041&quot;&gt;＃5041の&lt;/a&gt;ため、 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readField&quot;&gt;readField&lt;/a&gt;&lt;/code&gt; はこの目的には不十分であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="08f4018cb49ca32078d9a1bef08f427eb4907a21" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;ghc-real#t:Ratio&quot;&gt;Ratio&lt;/a&gt;&lt;/code&gt;'s instances inherit the deficiencies from the type parameter's. For example, &lt;code&gt;Ratio Natural&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; instance has similar problems to &lt;code&gt;&lt;a href=&quot;numeric-natural#v:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt;'s.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-real#t:Ratio&quot;&gt;Ratio&lt;/a&gt;&lt;/code&gt; のインスタンスはtypeパラメータの欠陥を継承していることに注意してください。たとえば、 &lt;code&gt;Ratio Natural&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; インスタンスには、 &lt;code&gt;&lt;a href=&quot;numeric-natural#v:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; と同様の問題があります。</target>
        </trans-unit>
        <trans-unit id="e88d411cc968059e325ae13439252f0afd371b01" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;numeric-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; instance isn't a ring: no element but 0 has an additive inverse. It is a semiring though.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;numeric-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; インスタンスはリングではないことに注意してください。要素はありませんが、0は加法的な逆になります。セミリングですけどね。</target>
        </trans-unit>
        <trans-unit id="1e81757f506803c58656ee3360e5e3fcdb790671" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;prelude#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt; is lazy, potentially leading to thunk build-up if the consumer doesn't force each iterate. See &lt;code&gt;&lt;a href=&quot;ghc-list#v:iterate-39-&quot;&gt;iterate'&lt;/a&gt;&lt;/code&gt; for a strict variant of this function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt; はレイジーであり、コンシューマが各イテレートを強制しない場合、サンクのビルドアップにつながる可能性があることに注意してください。この関数の厳密な変形については、 &lt;code&gt;&lt;a href=&quot;ghc-list#v:iterate-39-&quot;&gt;iterate'&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="692875f553a19ed51b447480be26cc2da0a377bb" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;prelude#v:writeFile&quot;&gt;writeFile&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:appendFile&quot;&gt;appendFile&lt;/a&gt;&lt;/code&gt; write a literal string to a file. To write a value of any printable type, as with &lt;code&gt;&lt;a href=&quot;prelude#v:print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, use the &lt;code&gt;&lt;a href=&quot;prelude#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; function to convert the value to a string first.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:writeFile&quot;&gt;writeFile&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;prelude#v:appendFile&quot;&gt;appendFile&lt;/a&gt;&lt;/code&gt; はリテラル文字列をファイルに書き込むことに注意してください。 &lt;code&gt;&lt;a href=&quot;prelude#v:print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; と同様に、印刷可能なタイプの値を書き込むには、まず &lt;code&gt;&lt;a href=&quot;prelude#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; 関数を使用して値を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="82ee7c2d72b3eb91473ef9443731d0f34073a559" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;system-io#v:writeFile&quot;&gt;writeFile&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-io#v:appendFile&quot;&gt;appendFile&lt;/a&gt;&lt;/code&gt; write a literal string to a file. To write a value of any printable type, as with &lt;code&gt;&lt;a href=&quot;system-io#v:print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, use the &lt;code&gt;&lt;a href=&quot;text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; function to convert the value to a string first.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:writeFile&quot;&gt;writeFile&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;system-io#v:appendFile&quot;&gt;appendFile&lt;/a&gt;&lt;/code&gt; はリテラル文字列をファイルに書き込むことに注意してください。 &lt;code&gt;&lt;a href=&quot;system-io#v:print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; と同様に、印刷可能なタイプの値を書き込むには、まず &lt;code&gt;&lt;a href=&quot;text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; 関数を使用して値を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="b7939772f8f7e35e3f9e1df2549a55f3569ee2cb" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;F0&lt;/code&gt;, &lt;code&gt;F1&lt;/code&gt;, &lt;code&gt;F2&lt;/code&gt;, &lt;code&gt;FD1&lt;/code&gt;, and &lt;code&gt;FD2&lt;/code&gt; all have identical standalone kind signatures. The arity is inferred from the type family header.</source>
          <target state="translated">Note that &lt;code&gt;F0&lt;/code&gt; , &lt;code&gt;F1&lt;/code&gt; , &lt;code&gt;F2&lt;/code&gt; , &lt;code&gt;FD1&lt;/code&gt; , and &lt;code&gt;FD2&lt;/code&gt; all have identical standalone kind signatures. The arity is inferred from the type family header.</target>
        </trans-unit>
        <trans-unit id="5a5d841ba3035a60d47bde6683188e551f1ba64a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;Handle&lt;/code&gt;s provided for &lt;code&gt;std_in&lt;/code&gt; or &lt;code&gt;std_out&lt;/code&gt; via the CreateProcess record will be ignored.</source>
          <target state="translated">CreateProcessレコードを介して &lt;code&gt;std_in&lt;/code&gt; または &lt;code&gt;std_out&lt;/code&gt; に提供された &lt;code&gt;Handle&lt;/code&gt; は無視されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="146678c0e776f2ff851c7e2c8dcebc022186f041" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;Handle&lt;/code&gt;s provided for &lt;code&gt;std_in&lt;/code&gt;, &lt;code&gt;std_out&lt;/code&gt;, or &lt;code&gt;std_err&lt;/code&gt; via the &lt;code&gt;UseHandle&lt;/code&gt; constructor will be closed by calling this function. This is not always the desired behavior. In cases where you would like to leave the &lt;code&gt;Handle&lt;/code&gt; open after spawning the child process, please use &lt;code&gt;&lt;a href=&quot;system-process#v:createProcess_&quot;&gt;createProcess_&lt;/a&gt;&lt;/code&gt; instead. All created &lt;code&gt;Handle&lt;/code&gt;s are initially in text mode; if you need them to be in binary mode then use &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ことを注意 &lt;code&gt;Handle&lt;/code&gt; sがために提供 &lt;code&gt;std_in&lt;/code&gt; 、 &lt;code&gt;std_out&lt;/code&gt; 、または &lt;code&gt;std_err&lt;/code&gt; 経由 &lt;code&gt;UseHandle&lt;/code&gt; コンストラクタは、この関数を呼び出すことによってクローズされます。これは常に望ましい動作とは限りません。子プロセスを生成した後、 &lt;code&gt;Handle&lt;/code&gt; 開いたままにする場合は、代わりに &lt;code&gt;&lt;a href=&quot;system-process#v:createProcess_&quot;&gt;createProcess_&lt;/a&gt;&lt;/code&gt; を使用してください。作成されたすべての &lt;code&gt;Handle&lt;/code&gt; は、最初はテキストモードです。バイナリモードにする必要がある場合は、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="8ff010b0f63ecc96eaf9bd3fa189d17e640c8eb8" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;Handle&lt;/code&gt;s provided for &lt;code&gt;std_in&lt;/code&gt;, &lt;code&gt;std_out&lt;/code&gt;, or &lt;code&gt;std_err&lt;/code&gt; via the &lt;code&gt;UseHandle&lt;/code&gt; constructor will be closed by calling this function. This is not always the desired behavior. In cases where you would like to leave the &lt;code&gt;Handle&lt;/code&gt; open after spawning the child process, please use &lt;code&gt;&lt;a href=&quot;system-process#v:createProcess_&quot;&gt;createProcess_&lt;/a&gt;&lt;/code&gt; instead. All created &lt;code&gt;Handle&lt;/code&gt;s are initially in text mode; if you need them to be in binary mode then use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ことを注意 &lt;code&gt;Handle&lt;/code&gt; sがために提供 &lt;code&gt;std_in&lt;/code&gt; 、 &lt;code&gt;std_out&lt;/code&gt; 、または &lt;code&gt;std_err&lt;/code&gt; 経由 &lt;code&gt;UseHandle&lt;/code&gt; コンストラクタは、この関数を呼び出すことによってクローズされます。これは必ずしも望ましい動作ではありません。子プロセスを生成した後に &lt;code&gt;Handle&lt;/code&gt; 開いたままにしておきたい場合は、代わりに &lt;code&gt;&lt;a href=&quot;system-process#v:createProcess_&quot;&gt;createProcess_&lt;/a&gt;&lt;/code&gt; を使用してください。作成されたすべての &lt;code&gt;Handle&lt;/code&gt; は、最初はテキストモードです。それらをバイナリモードにする必要がある場合は、 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="e0bc50405f92753187a855ca32c150ffebfb1ca1" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;Handle&lt;/code&gt;s provided for &lt;code&gt;std_in&lt;/code&gt;, &lt;code&gt;std_out&lt;/code&gt;, or &lt;code&gt;std_err&lt;/code&gt; via the CreateProcess record will be ignored.</source>
          <target state="translated">ことを注意 &lt;code&gt;Handle&lt;/code&gt; sがために提供 &lt;code&gt;std_in&lt;/code&gt; 、 &lt;code&gt;std_out&lt;/code&gt; 、または &lt;code&gt;std_err&lt;/code&gt; のCreateProcessレコードを経由しては無視されます。</target>
        </trans-unit>
        <trans-unit id="fb75a50ee8a25d92207e02df9efd12ab2bbd9b08" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;\case&lt;/code&gt; starts a layout, so you can write</source>
          <target state="translated">注こと &lt;code&gt;\case&lt;/code&gt; あなたが書くことができますので、レイアウトを開始します</target>
        </trans-unit>
        <trans-unit id="ef8c98fb1e9ccb919f4d179a7222663f9bc06990" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;f&lt;/code&gt; is not overloaded; the &lt;code&gt;Eq&lt;/code&gt; constraint arising from the use of &lt;code&gt;==&lt;/code&gt; is discharged by the pattern match on &lt;code&gt;T1&lt;/code&gt; and similarly the &lt;code&gt;Show&lt;/code&gt; constraint arising from the use of &lt;code&gt;show&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; はオーバーロードされないことに注意してください。 &lt;code&gt;Eq&lt;/code&gt; の使用に起因する制約 &lt;code&gt;==&lt;/code&gt; は、上のパターンマッチにより排出さ &lt;code&gt;T1&lt;/code&gt; と同様に &lt;code&gt;Show&lt;/code&gt; の使用に起因する制約 &lt;code&gt;show&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01a09441c6e85b11dd8ac3855c0f8d219030d13a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;ghc -M&lt;/code&gt; needs to find a &lt;em&gt;source file&lt;/em&gt; for each module in the dependency graph, so that it can parse the import declarations and follow dependencies. Any pre-compiled modules without source files must therefore belong to a package &lt;a href=&quot;#id5&quot; id=&quot;id4&quot;&gt;1&lt;/a&gt;.</source>
          <target state="translated">Note that &lt;code&gt;ghc -M&lt;/code&gt; needs to find a &lt;em&gt;source file&lt;/em&gt; for each module in the dependency graph, so that it can parse the import declarations and follow dependencies. Any pre-compiled modules without source files must therefore belong to a package &lt;a href=&quot;#id5&quot; id=&quot;id4&quot;&gt;1&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="f5d5971cd304a24fd7e0c3cb761f12d88c0c5300" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;ghc -M&lt;/code&gt; needs to find a &lt;em&gt;source file&lt;/em&gt; for each module in the dependency graph, so that it can parse the import declarations and follow dependencies. Any pre-compiled modules without source files must therefore belong to a package &lt;a href=&quot;#id5&quot; id=&quot;id4&quot;&gt;[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ghc -M&lt;/code&gt; は、依存関係グラフで各モジュールの&lt;em&gt;ソースファイル&lt;/em&gt;を見つける必要があることに注意してください。これにより、インポート宣言を解析して依存関係を追跡できます。したがって、ソースファイルのないコンパイル済みモジュールは、パッケージ&lt;a href=&quot;#id5&quot; id=&quot;id4&quot;&gt;[1]に&lt;/a&gt;属している必要があります。</target>
        </trans-unit>
        <trans-unit id="b9ad10b105a7bebae4f8165fa8685e319e4cd138" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;hTestEquality&lt;/code&gt; takes two arguments where the type variable &lt;code&gt;t&lt;/code&gt; is applied to types of different kinds. That type variable must then be polykinded. Accordingly, the kind of &lt;code&gt;HTestEquality&lt;/code&gt; (the class) is &lt;code&gt;(forall k. k -&amp;gt; Type) -&amp;gt; Constraint&lt;/code&gt;, a higher-rank kind.</source>
          <target state="translated">&lt;code&gt;hTestEquality&lt;/code&gt; は2つの引数を取り、型変数 &lt;code&gt;t&lt;/code&gt; が異なる種類の型に適用されることに注意してください。次に、その型変数は多種多様でなければなりません。したがって、 &lt;code&gt;HTestEquality&lt;/code&gt; （クラス）の種類は（すべてのk。k- &lt;code&gt;(forall k. k -&amp;gt; Type) -&amp;gt; Constraint&lt;/code&gt; であり、上位の種類です。</target>
        </trans-unit>
        <trans-unit id="d49f48cab2336da3b33335456da6ac1c62fd042c" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;isSubmapOfBy (_ _ -&amp;gt; True) m1 m2&lt;/code&gt; tests whether all the keys in &lt;code&gt;m1&lt;/code&gt; are also keys in &lt;code&gt;m2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;isSubmapOfBy (_ _ -&amp;gt; True) m1 m2&lt;/code&gt; は、 &lt;code&gt;m1&lt;/code&gt; のすべてのキーが &lt;code&gt;m2&lt;/code&gt; のキーでもあるかどうかをテストすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8d87919fed4910f020e65cc52017097a20305800" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;it&lt;/code&gt; is shadowed by the new value each time you evaluate a new expression, and the old value of &lt;code&gt;it&lt;/code&gt; is lost.</source>
          <target state="translated">ことに注意してください &lt;code&gt;it&lt;/code&gt; 新しい値で新しい式を評価するたびにシャドーイングされ、古い値 &lt;code&gt;it&lt;/code&gt; 失われます。</target>
        </trans-unit>
        <trans-unit id="8965b5ad7e3a3d0f07f953f01997900513413179" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;k2&lt;/code&gt; is placed &lt;em&gt;before&lt;/em&gt;&lt;code&gt;k&lt;/code&gt;, and that &lt;code&gt;k&lt;/code&gt; is placed &lt;em&gt;before&lt;/em&gt;&lt;code&gt;a&lt;/code&gt;. Also, note that &lt;code&gt;k2&lt;/code&gt; is written here in braces. As explained with &lt;a href=&quot;#extension-TypeApplications&quot;&gt;&lt;code&gt;TypeApplications&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;#inferred-vs-specified&quot;&gt;Inferred vs. specified type variables&lt;/a&gt;), type and kind variables that GHC generalises over, but not written in the original program, are not available for visible type application. (These are called &lt;em&gt;inferred&lt;/em&gt; variables.) Such variables are written in braces with &lt;a href=&quot;using#ghc-flag--fprint-explicit-foralls&quot;&gt;&lt;code&gt;-fprint-explicit-foralls&lt;/code&gt;&lt;/a&gt; enabled.</source>
          <target state="translated">なお、 &lt;code&gt;k2&lt;/code&gt; が配置される&lt;em&gt;前に&lt;/em&gt; &lt;code&gt;k&lt;/code&gt; 、およびその &lt;code&gt;k&lt;/code&gt; が配置される&lt;em&gt;前に&lt;/em&gt;。また、 &lt;code&gt;k2&lt;/code&gt; はここでは中括弧で書かれていることに注意してください。&lt;a href=&quot;#extension-TypeApplications&quot;&gt; &lt;code&gt;TypeApplications&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;#inferred-vs-specified&quot;&gt;推定型変数と指定された型変数&lt;/a&gt;）で説明したように、GHCが一般化する型変数と種類変数は、元のプログラムでは記述されていませんが、可視型アプリケーションでは使用できません。（これらは&lt;em&gt;推定&lt;/em&gt;変数と呼ば&lt;em&gt;れ&lt;/em&gt;ます。）そのような変数は、&lt;a href=&quot;using#ghc-flag--fprint-explicit-foralls&quot;&gt; &lt;code&gt;-fprint-explicit-foralls&lt;/code&gt; を&lt;/a&gt;有効にして中括弧で記述されます。 &lt;code&gt;a&lt;/code&gt; &lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6a55de5915599f1590abb3356c8fe6ece583ed02" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;let&lt;/code&gt; bindings do not automatically print the value bound, unlike monadic bindings.</source>
          <target state="translated">注意 &lt;code&gt;let&lt;/code&gt; バインディングが自動的にモナドのバインディングとは異なり、バインドされた値を、印刷されません。</target>
        </trans-unit>
        <trans-unit id="5f999ecaeb1e7a69b4163c053a67ca1cf1c9ff63" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;mkName&lt;/code&gt; may be used with qualified names:</source>
          <target state="translated">&lt;code&gt;mkName&lt;/code&gt; は修飾名で使用できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="01c07aa245695205a32a04f4daab1815beac9b5c" translate="yes" xml:space="preserve">
          <source>Note that GHC can only follow dependencies if it has the source file available, so if your program includes a module for which there is no source file, even if you have an object and an interface file for the module, then GHC will complain. The exception to this rule is for package modules, which may or may not have source files.</source>
          <target state="translated">GHC はソースファイルが利用可能な場合にのみ依存関係を追跡できることに注意してください。そのため、あなたのプログラムにソースファイルがないモジュールが含まれている場合、たとえそのモジュールのオブジェクトとインタフェースファイルがあったとしても、GHC は文句を言います。このルールの例外はパッケージモジュールで、ソースファイルを持っている場合と持っていない場合があります。</target>
        </trans-unit>
        <trans-unit id="628959edf33f1bf4af75378e5117a34fc0ac8086" translate="yes" xml:space="preserve">
          <source>Note that a &quot;minute&quot; of &lt;code&gt;DiffTime&lt;/code&gt; is simply 60 SI seconds, rather than a minute of civil time. Use &lt;code&gt;NominalDiffTime&lt;/code&gt; to work with civil time, ignoring any leap seconds.</source>
          <target state="translated">&lt;code&gt;DiffTime&lt;/code&gt; の「分」は、常用時間の1分ではなく、単に60 SI秒であることに注意してください。 &lt;code&gt;NominalDiffTime&lt;/code&gt; を使用して、うるう秒を無視して、常用時で処理します。</target>
        </trans-unit>
        <trans-unit id="db63214ed45116be549d0295c81ce0bf585bc000" translate="yes" xml:space="preserve">
          <source>Note that a given &lt;code&gt;mdo&lt;/code&gt; expression can cause the creation of multiple &lt;code&gt;rec&lt;/code&gt; blocks. If there are no recursive dependencies, &lt;code&gt;mdo&lt;/code&gt; will introduce no &lt;code&gt;rec&lt;/code&gt; blocks. In this latter case an &lt;code&gt;mdo&lt;/code&gt; expression is precisely the same as a &lt;code&gt;do&lt;/code&gt; expression, as one would expect.</source>
          <target state="translated">指定された &lt;code&gt;mdo&lt;/code&gt; 式により、複数の &lt;code&gt;rec&lt;/code&gt; ブロックが作成される可能性があることに注意してください。再帰的な依存関係がない場合、 &lt;code&gt;mdo&lt;/code&gt; は &lt;code&gt;rec&lt;/code&gt; ブロックを導入しません。この後者の場合、予想されるように、 &lt;code&gt;mdo&lt;/code&gt; 式は &lt;code&gt;do&lt;/code&gt; 式とまったく同じです。</target>
        </trans-unit>
        <trans-unit id="edb8824abf3adc676b8fc9d4d2a15be4648aabba" translate="yes" xml:space="preserve">
          <source>Note that after splitting the string at newline characters, the last part of the string is considered a line even if it doesn't end with a newline. For example,</source>
          <target state="translated">文字列を改行で分割した後は、文字列の最後の部分が改行で終わっていなくても行とみなされることに注意してください。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="e48d232edc1ec00a99a6fd6c27346f29f36049ef" translate="yes" xml:space="preserve">
          <source>Note that after the closing brace, GHCi knows that the current statement is finished, so no empty line is required.</source>
          <target state="translated">閉じ波括弧の後、GHCiは現在の文が終了したことを知っているので、空行は必要ないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="629c79c2f8b660ab85b6013a5e3159a0a225a4a6" translate="yes" xml:space="preserve">
          <source>Note that although the above translation suggests that &lt;code&gt;let&lt;/code&gt;-bound variables like &lt;code&gt;z&lt;/code&gt; must be monomorphic, the actual translation produces Core, so polymorphic variables are allowed.</source>
          <target state="translated">上記の変換は、 &lt;code&gt;z&lt;/code&gt; などの &lt;code&gt;let&lt;/code&gt; バインド変数が単相でなければならないことを示唆していますが、実際の変換ではCoreが生成されるため、多相変数が許可されます。</target>
        </trans-unit>
        <trans-unit id="629818198328cd462665ec73736ee33ba93fceb4" translate="yes" xml:space="preserve">
          <source>Note that an explicit &lt;code&gt;forall&lt;/code&gt; is often absolutely essential. Consider the rose-tree example</source>
          <target state="translated">多くの場合、明示的な &lt;code&gt;forall&lt;/code&gt; は絶対に不可欠です。バラの木の例を考えてみましょう</target>
        </trans-unit>
        <trans-unit id="92e28e232c8219184dccc4e81df68cd45a16bf4c" translate="yes" xml:space="preserve">
          <source>Note that an explicit &lt;code&gt;forall&lt;/code&gt; must appear at the front of the type signature and is not permitted to appear nested within the type, as in the following (erroneous) examples:</source>
          <target state="translated">Note that an explicit &lt;code&gt;forall&lt;/code&gt; must appear at the front of the type signature and is not permitted to appear nested within the type, as in the following (erroneous) examples:</target>
        </trans-unit>
        <trans-unit id="1fedd4b9525d691022adec17bbc58c0482f1424f" translate="yes" xml:space="preserve">
          <source>Note that any multi-parameter constraints &lt;code&gt;(D a b)&lt;/code&gt; or &lt;code&gt;(D [a] Int)&lt;/code&gt; do not participate in the process (either to help or to hinder); but they must of course be soluble once the defaulting process is complete.</source>
          <target state="translated">マルチパラメーター制約 &lt;code&gt;(D a b)&lt;/code&gt; または &lt;code&gt;(D [a] Int)&lt;/code&gt; はプロセスに関与しないことに注意してください（助けるためにも妨害するためにも）。もちろん、デフォルトのプロセスが完了したら、それらはもちろん溶解する必要があります。</target>
        </trans-unit>
        <trans-unit id="c67cc7b453618af847cc15ad44d064d4550a5b4a" translate="yes" xml:space="preserve">
          <source>Note that any non-flag arguments are never passed to GHC. An unused non-flag argument will be considered as the name of the program to run. If a GHC flag takes an argument use &lt;code&gt;--ghc-arg=&amp;lt;arg&amp;gt;&lt;/code&gt; to pass the argument to GHC. For example, if you want to pass &lt;code&gt;-package foo&lt;/code&gt; to GHC use any of the following:</source>
          <target state="translated">フラグ以外の引数はGHCに渡されないことに注意してください。未使用の非フラグ引数は、実行するプログラムの名前と見なされます。 GHCフラグが引数をとる場合、 &lt;code&gt;--ghc-arg=&amp;lt;arg&amp;gt;&lt;/code&gt; を使用してGHCに引数を渡します。たとえば、 &lt;code&gt;-package foo&lt;/code&gt; をGHC に渡したい場合は、次のいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="1d2d4c489f4d5c10bf98bfdb6c95992494ea1737" translate="yes" xml:space="preserve">
          <source>Note that because constraints are just handled as types of a particular kind, this extension allows type constraint synonyms:</source>
          <target state="translated">制約は特定の種類の型として扱われるだけなので、この拡張機能では型制約の同義語を許可していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1e70909e8298e18a428bd14a078ccbac8a33b1c3" translate="yes" xml:space="preserve">
          <source>Note that because the array is possibly not copied, any subsequent modifications made to the mutable version of the array may be shared with the immutable version. It is only safe to use, therefore, if the immutable array is never referenced again in this thread, and there is no possibility that it can be also referenced in another thread. If you use an unsafeThaw&lt;em&gt;write&lt;/em&gt;unsafeFreeze sequence in a multi-threaded setting, then you must ensure that this sequence is atomic with respect to other threads, or a garbage collector crash may result (because the write may be writing to a frozen array).</source>
          <target state="translated">配列はコピーされない可能性があるため、配列の変更可能なバージョンに加えられた変更は不変のバージョンと共有される可能性があることに注意してください。したがって、不変の配列がこのスレッドで再び参照されることがなく、別のスレッドでも参照される可能性がない場合にのみ、安全に使用できます。 unsafeThaw &lt;em&gt;書き込み&lt;/em&gt; unsafeFreezeシーケンスをマルチスレッド設定で使用する場合、このシーケンスが他のスレッドに対してアトミックであることを確認する必要があります。そうしないと、ガベージコレクターのクラッシュが発生する可能性があります（書き込みがフリーズされた配列に書き込みを行うため）。</target>
        </trans-unit>
        <trans-unit id="312ce308d507158c0dbd1448754583dfb49275af" translate="yes" xml:space="preserve">
          <source>Note that because the array is possibly not copied, any subsequent modifications made to the mutable version of the array may be shared with the immutable version. It is safe to use, therefore, if the mutable version is never modified after the freeze operation.</source>
          <target state="translated">配列はコピーされない可能性があるため、配列の突然変異版に加えられた変更は不変版と共有される可能性があることに注意してください。したがって、フリーズ操作後に変更可能なバージョンが変更されないようにしておけば安全に使用できます。</target>
        </trans-unit>
        <trans-unit id="cf2145147a60ace311fa33d22d382ca44077b49d" translate="yes" xml:space="preserve">
          <source>Note that calling `breakSubstring x` does some preprocessing work, so you should avoid unnecessarily duplicating breakSubstring calls with the same pattern.</source>
          <target state="translated">breakSubstring x` の呼び出しは前処理を行うので、同じパターンの breakSubstring 呼び出しが不必要に重複しないようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="fc9763765bf9b4fd333d384e2c7f6d48a5f90bb7" translate="yes" xml:space="preserve">
          <source>Note that class instances are always for particular &lt;em&gt;instances&lt;/em&gt; of a data family and never for an entire family as a whole. This is for essentially the same reasons that we cannot define a toplevel function that performs pattern matching on the data constructors of &lt;em&gt;different&lt;/em&gt; instances of a single type family. It would require a form of extensible case construct.</source>
          <target state="translated">クラスインスタンスは常にデータファミリの特定の&lt;em&gt;インスタンス&lt;/em&gt;用であり、ファミリ全体ではありません。これは、単一のタイプファミリーの&lt;em&gt;異なる&lt;/em&gt;インスタンスのデータコンストラクターでパターンマッチングを実行するトップレベル関数を定義できないのと本質的に同じ理由でです。これには、拡張可能なケースコンストラクトの形式が必要です。</target>
        </trans-unit>
        <trans-unit id="3fd26db2c5a937cd006a71ef434cb9a6ac571280" translate="yes" xml:space="preserve">
          <source>Note that command-line options are &lt;em&gt;order-dependent&lt;/em&gt;, with arguments being evaluated from left-to-right. This can have seemingly strange effects in the presence of flag implication. For instance, consider &lt;a href=&quot;using-optimisation#ghc-flag--fspecialise&quot;&gt;&lt;code&gt;-fno-specialise&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;using-optimisation#ghc-flag--O1&quot;&gt;&lt;code&gt;-O1&lt;/code&gt;&lt;/a&gt; (which implies &lt;a href=&quot;using-optimisation#ghc-flag--fspecialise&quot;&gt;&lt;code&gt;-fspecialise&lt;/code&gt;&lt;/a&gt;). These two command lines mean very different things:</source>
          <target state="translated">コマンドラインオプションは&lt;em&gt;順序に依存し&lt;/em&gt;、引数は左から右に評価されることに注意してください。これは、フラグの影響が存在する場合に、奇妙に見える効果をもたらす可能性があります。たとえば、&lt;a href=&quot;using-optimisation#ghc-flag--fspecialise&quot;&gt; &lt;code&gt;-fno-specialise&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;using-optimisation#ghc-flag--O1&quot;&gt; &lt;code&gt;-O1&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;using-optimisation#ghc-flag--fspecialise&quot;&gt; &lt;code&gt;-fspecialise&lt;/code&gt; &lt;/a&gt;を意味する）を検討してください。これらの2つのコマンドラインは、非常に異なる意味を持っています。</target>
        </trans-unit>
        <trans-unit id="76091aaf5e35a41319f5ec500de56fcd89951658" translate="yes" xml:space="preserve">
          <source>Note that deriving &lt;code&gt;Eq&lt;/code&gt; is necessary for the pattern matching to work since it gets translated into an equality comparison.</source>
          <target state="translated">&lt;code&gt;Eq&lt;/code&gt; の導出は、等価比較に変換されるため、パターンマッチングが機能するために必要です。</target>
        </trans-unit>
        <trans-unit id="5e66a3c265c4c5b432263a07a725a136b6324e29" translate="yes" xml:space="preserve">
          <source>Note that due to Haskell's unspecified evaluation order, an expression may throw one of several possible exceptions: consider the expression &lt;code&gt;(error &quot;urk&quot;) + (1 `div` 0)&lt;/code&gt;. Does the expression throw &lt;code&gt;ErrorCall &quot;urk&quot;&lt;/code&gt;, or &lt;code&gt;DivideByZero&lt;/code&gt;?</source>
          <target state="translated">Haskellの評価順序が指定されていないため、式はいくつかの可能な例外の1つをスローする可能性があることに注意してください。式 &lt;code&gt;(error &quot;urk&quot;) + (1 `div` 0)&lt;/code&gt; 。式は &lt;code&gt;ErrorCall &quot;urk&quot;&lt;/code&gt; または &lt;code&gt;DivideByZero&lt;/code&gt; をスローしますか？</target>
        </trans-unit>
        <trans-unit id="a38e6766cff20e461dc54ded66126b634b012173" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; instance does not satisfy reflexivity.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; インスタンスは反射性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="0ef6487a6a1f23d9e6d0eab035203c36999e612c" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; instance does not satisfy reflexivity.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; インスタンスは反射性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="718b6ec1eedc7b0e6b0505f3537b21d4d5090824" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; instance does not satisfy reflexivity.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; インスタンスは反射性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b2e8c03bc2025303c4c75357649bb45ee1572579" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; instance does not satisfy reflexivity.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; インスタンスは反射性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="8bb133570167aeb8235fd7aa64e771323ce317b8" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-float#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; instance does not satisfy reflexivity.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;ghc-float#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; インスタンスは反射性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b8c80f9a804d45f8387d652852d3f1b319e89bab" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-float#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; instance does not satisfy reflexivity.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;ghc-float#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; インスタンスは反射性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="abaa8283c8c82c454b3f39dc4e8b3b95dea832bf" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-float#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; instance does not satisfy reflexivity.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;ghc-float#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; インスタンスは反射性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="efa258be8dec869f272beb6b3b0719e9c9136d95" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-float#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; instance does not satisfy reflexivity.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;ghc-float#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; インスタンスは反射性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="cc8602ae6c9f5374c5b3e2f4892e8ddead96cf59" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; instance does not satisfy reflexivity.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; インスタンスは反射性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="434b11a6a2c5a23f490c3dca6b67c53a554a0d1b" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; instance does not satisfy reflexivity.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; インスタンスは反射性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="6077357d3de95b1c68b9540f7bddf5fc70a526b4" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;prelude#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; instance does not satisfy reflexivity.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; インスタンスは反射性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="2043553ccd4d376d49787321f94def08da904851" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; instance does not satisfy reflexivity.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; インスタンスは反射性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="194e7c783a359ef09d66938c7b166d817c622581" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; instance does not satisfy reflexivity.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; インスタンスは反射性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="9890f34bd7580f2b47b85fe9349066eb034aa874" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; instance does not satisfy reflexivity.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; インスタンスは反射性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="9dcbc1e84d812484382f7054b4ea09eece714d9c" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;prelude#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; instance does not satisfy reflexivity.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; インスタンスは反射性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="20c322bafd53e5e4ac584f0f4c7683ecf396fc66" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; instance does not satisfy reflexivity.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; インスタンスは反射性を満たさないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="e775258fb33a9c99aae311b322919c0b7003500f" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, not all elements of &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; have an additive inverse.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; のすべての要素が加法逆行列を持つわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="1f89c3ca9731aeeb8476c132b53e6e61c23b4594" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, not all elements of &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; have an multiplicative inverse.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; のすべての要素が乗法的逆数を持つわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="24ad6371739df6cce2c9d49e41a79e67a4549c98" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, not all elements of &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; have an additive inverse.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; のすべての要素が追加の逆行列を持つわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="59b02bd4bf7fdf2cce1cbde77a7195b31de26236" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, not all elements of &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; have an multiplicative inverse.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; のすべての要素が乗法的逆数を持つわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="5b8a7de16c8d613620813c9851308e5845856e62" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, not all elements of &lt;code&gt;&lt;a href=&quot;ghc-float#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; have an additive inverse.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;ghc-float#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; のすべての要素が加法逆行列を持つわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c868d72c8e906befa9b0e16299d79ca57971708c" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, not all elements of &lt;code&gt;&lt;a href=&quot;ghc-float#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; have an multiplicative inverse.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; の存在により、 &lt;code&gt;&lt;a href=&quot;ghc-float#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; のすべての要素が乗法的逆数を持つわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="da59b4a14361d344a87c211c8c8c17fcca4de300" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, not all elements of &lt;code&gt;&lt;a href=&quot;ghc-float#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; have an additive inverse.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;ghc-float#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; のすべての要素が追加の逆行列を持つわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="96f2507b88b419212359ae0a529d1957a3da8fe1" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, not all elements of &lt;code&gt;&lt;a href=&quot;ghc-float#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; have an multiplicative inverse.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;ghc-float#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; のすべての要素が乗法的逆数を持つわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="6105c208b7c6f44c6b239700c54851ff6acd9f7c" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, not all elements of &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; have an additive inverse.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; のすべての要素が加法逆行列を持つわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="9187cd519377bc44a76fe47963badb1dfb10c1de" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, not all elements of &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; have an multiplicative inverse.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; の存在により、 &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; のすべての要素が乗法的逆数を持つわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="0dc5c80ae44926709a883abad455c22674f3d607" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, not all elements of &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; have an additive inverse.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; のすべての要素が追加の逆行列を持つわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="7935bc741f62235ae7bf01a48ecac728f0a179e3" translate="yes" xml:space="preserve">
          <source>Note that due to the presence of &lt;code&gt;NaN&lt;/code&gt;, not all elements of &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; have an multiplicative inverse.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; が存在するため、 &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; のすべての要素が乗法的逆数を持つわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="646e8b4539cacf2e9e9d3ae0b8e3c032a0312c22" translate="yes" xml:space="preserve">
          <source>Note that even with &lt;code&gt;--install-signal-handlers=no&lt;/code&gt;, the RTS interval timer signal is still enabled. The timer signal is either SIGVTALRM or SIGALRM, depending on the RTS configuration and OS capabilities. To disable the timer signal, use the &lt;code&gt;-V0&lt;/code&gt; RTS option (see &lt;code&gt;-V ⟨secs⟩&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;--install-signal-handlers=no&lt;/code&gt; を指定した場合でも、RTSインターバルタイマー信号は引き続き有効です。タイマー信号は、RTS構成とOS機能に応じて、SIGVTALRMまたはSIGALRMのいずれかです。タイマー信号を無効にするには、 &lt;code&gt;-V0&lt;/code&gt; RTSオプションを使用します（ &lt;code&gt;-V ⟨secs⟩&lt;/code&gt; 」を参照）。</target>
        </trans-unit>
        <trans-unit id="4432323376182dfbdca3fdc7130f34b9170ab0c0" translate="yes" xml:space="preserve">
          <source>Note that exceptions which are thrown to the current thread are thrown in turn to the thread that is executing the given computation. This ensures there's always a way of killing the forked thread.</source>
          <target state="translated">現在のスレッドに投げられた例外は、与えられた計算を実行しているスレッドに順番に投げられることに注意してください。これにより、フォークされたスレッドを殺す方法が常にあることを保証します。</target>
        </trans-unit>
        <trans-unit id="4e7cb7371c58bd222ab2560f3a7d99af3af20d16" translate="yes" xml:space="preserve">
          <source>Note that fixed primitives can be considered as a special case of bounded primitives, and we can lift from fixed to bounded.</source>
          <target state="translated">固定プリミティブは有界プリミティブの特殊なケースと考えることができ、固定プリミティブから有界プリミティブに持ち上げることができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="56b0f705789ec7ac7e04637b1063cafb79dc672b" translate="yes" xml:space="preserve">
          <source>Note that for consistency &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Word64&lt;/code&gt;, and &lt;code&gt;Int64&lt;/code&gt; constructor fields are unpacked on 32-bit platforms, even though they are technically larger than a pointer on those platforms.</source>
          <target state="translated">一貫性を &lt;code&gt;Word64&lt;/code&gt; 、 &lt;code&gt;Double&lt;/code&gt; 、Word64、および &lt;code&gt;Int64&lt;/code&gt; コンストラクタフィールドは、32ビットプラットフォームではアンパックされますが、これらのプラットフォームでは、技術的にはポインタよりも大きいことに注意してください。</target>
        </trans-unit>
        <trans-unit id="6128c2afaa4b4099fa2f7f80159c3c3eb7d037da" translate="yes" xml:space="preserve">
          <source>Note that for non-C languages (for example C++) &lt;code&gt;extern &lt;a href=&quot;c&quot;&gt;C&lt;/a&gt;&lt;/code&gt; directives must be used to get symbols that we can access from Haskell.</source>
          <target state="translated">C以外の言語（C ++など）の場合、Haskellからアクセスできるシンボルを取得するには、 &lt;code&gt;extern &lt;a href=&quot;c&quot;&gt;C&lt;/a&gt;&lt;/code&gt; ディレクティブを使用する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="250d6d584d95f50004937c03dc209e45f1572a99" translate="yes" xml:space="preserve">
          <source>Note that for scripts and interactive sessions, this is the path to the interpreter (e.g. ghci.)</source>
          <target state="translated">スクリプトや対話型セッションでは、これがインタプリタへのパスになることに注意してください (例:ghci.)。</target>
        </trans-unit>
        <trans-unit id="2a64a1dfeaac3f04e05a2dfa765d6f00da1d204a" translate="yes" xml:space="preserve">
          <source>Note that for the &lt;code&gt;package-db&lt;/code&gt; directive, if a relative path is given it must be relative to the location of the package environment file.</source>
          <target state="translated">&lt;code&gt;package-db&lt;/code&gt; ディレクティブの場合、相対パスを指定する場合は、パッケージ環境ファイルの場所を基準にする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="96e9f8d44f9309d061a4735a30dbfcf393329303" translate="yes" xml:space="preserve">
          <source>Note that for the purpose of injectivity check in bullets (4) and (5) GHC uses a special variant of unification algorithm that treats type family applications as possibly unifying with anything.</source>
          <target state="translated">箇条書き(4)と(5)の注入性チェックのために、GHCは型ファミリーアプリケーションを何かと統一する可能性があるものとして扱う、特別な変形の統一アルゴリズムを使用していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ffa639807aa32c333508357828c548fb4190cf20" translate="yes" xml:space="preserve">
          <source>Note that foreign calls made by different Haskell threads may execute in &lt;em&gt;parallel&lt;/em&gt;, even when the &lt;code&gt;+RTS -N&lt;/code&gt; flag is not being used (&lt;a href=&quot;using-concurrent#parallel-options&quot;&gt;RTS options for SMP parallelism&lt;/a&gt;). The &lt;code&gt;-N ⟨x⟩&lt;/code&gt; flag controls parallel execution of Haskell threads, but there may be an arbitrary number of foreign calls in progress at any one time, regardless of the &lt;code&gt;+RTS -N&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;+RTS -N&lt;/code&gt; フラグが使用されていない場合でも（&lt;a href=&quot;using-concurrent#parallel-options&quot;&gt;SMP並列処理のRTSオプション&lt;/a&gt;）、異なるHaskellスレッドによって行われた外部呼び出しが&lt;em&gt;並列&lt;/em&gt;に実行される場合があることに注意してください。 &lt;code&gt;-N ⟨x⟩&lt;/code&gt; フラグ制御並列Haskellのスレッドの実行が、関係なく、任意の時点で進行中の外来コールの任意の数が存在してもよい &lt;code&gt;+RTS -N&lt;/code&gt; の値。</target>
        </trans-unit>
        <trans-unit id="e12827f70b05908494f598eac9c4f60068827e87" translate="yes" xml:space="preserve">
          <source>Note that functions marked with &quot;&lt;em&gt;Heavy inlining.&lt;/em&gt;&quot; are forced to be inlined because they must be specialized for concrete encodings, but are rather heavy in terms of code size. We recommend to define a top-level function for every concrete instantiation of such a function in order to share its code. A typical example is the function &lt;code&gt;byteStringHex&lt;/code&gt; from &lt;a href=&quot;data-bytestring-builder-ascii&quot;&gt;Data.ByteString.Builder.ASCII&lt;/a&gt;, which is implemented as follows.</source>
          <target state="translated">「&lt;em&gt;ヘビーインライン化&lt;/em&gt;」とマークされた関数は、具体的なエンコーディングに特化する必要があるため、インライン化を強制されますが、コードサイズの点でかなり重いことに注意してください。コードを共有するために、そのような関数の具体的なインスタンス化ごとにトップレベル関数を定義することをお勧めします。典型的な例は、関数である &lt;code&gt;byteStringHex&lt;/code&gt; から&lt;a href=&quot;data-bytestring-builder-ascii&quot;&gt;Data.ByteString.Builder.ASCII&lt;/a&gt;次のように実装され、。</target>
        </trans-unit>
        <trans-unit id="2216bc2850d8b97233a3efc13f854171f19bee87" translate="yes" xml:space="preserve">
          <source>Note that higher optimisation levels cause more cross-module optimisation to be performed, which can have an impact on how much of your program needs to be recompiled when you change something. This is one reason to stick to no-optimisation when developing code.</source>
          <target state="translated">最適化レベルが高くなると、実行されるクロスモジュール最適化が多くなり、何かを変更したときにプログラムの再コンパイルが必要な量に影響を与える可能性があることに注意してください。これが、コードを開発する際に最適化なしにこだわる理由の一つです。</target>
        </trans-unit>
        <trans-unit id="30a1f39225163748211fd926207dd09b8855fbec" translate="yes" xml:space="preserve">
          <source>Note that if &lt;code&gt;&lt;a href=&quot;control-concurrent#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; is called with the current thread as the target, the exception will be thrown even if the thread is currently inside &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">現在のスレッドをターゲットとして &lt;code&gt;&lt;a href=&quot;control-concurrent#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; が呼び出されると、スレッドが現在 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; 内にある場合でも、例外がスローされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c4c0dcced941ac54917c55caf21e22d4636d250c" translate="yes" xml:space="preserve">
          <source>Note that if &lt;code&gt;&lt;a href=&quot;control-concurrent#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; is called with the current thread as the target, the exception will be thrown even if the thread is currently inside &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">現在のスレッドをターゲットとして &lt;code&gt;&lt;a href=&quot;control-concurrent#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; を呼び出すと、スレッドが現在 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; 内にある場合でも、例外がスローされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="11abb5f8d9b5fba3f33fa0b7e155694cf82d23ad" translate="yes" xml:space="preserve">
          <source>Note that if &lt;code&gt;&lt;a href=&quot;control-exception#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; is called with the current thread as the target, the exception will be thrown even if the thread is currently inside &lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;control-exception#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">現在のスレッドをターゲットとして &lt;code&gt;&lt;a href=&quot;control-exception#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; を呼び出すと、スレッドが現在 &lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;control-exception#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; 内にある場合でも、例外がスローされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="620ca9a9df68bf26044f5d872190781472e76ff1" translate="yes" xml:space="preserve">
          <source>Note that if &lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; is called with the current thread as the target, the exception will be thrown even if the thread is currently inside &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">現在のスレッドをターゲットとして &lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; が呼び出されると、スレッドが現在 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; 内にある場合でも、例外がスローされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="55ba0c9a076ac9b515d71482f78bc92a96d264e8" translate="yes" xml:space="preserve">
          <source>Note that if &lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; is called with the current thread as the target, the exception will be thrown even if the thread is currently inside &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">現在のスレッドをターゲットとして &lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; を呼び出すと、スレッドが現在 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; 内にある場合でも、例外がスローされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d66210fda4350eaec16e5b09b559810cf819baea" translate="yes" xml:space="preserve">
          <source>Note that if &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; is called with the current thread as the target, the exception will be thrown even if the thread is currently inside &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">現在のスレッドをターゲットとして &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; が呼び出されると、スレッドが現在 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; 内にある場合でも、例外がスローされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="53bdddcd649e7c0b18af6cbb0a2342c2614754df" translate="yes" xml:space="preserve">
          <source>Note that if &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; is called with the current thread as the target, the exception will be thrown even if the thread is currently inside &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">現在のスレッドをターゲットとして &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; を呼び出すと、スレッドが現在 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:uninterruptibleMask&quot;&gt;uninterruptibleMask&lt;/a&gt;&lt;/code&gt; 内にある場合でも、例外がスローされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0cd84aceb1741c1097100af32525f39087b79c2c" translate="yes" xml:space="preserve">
          <source>Note that if &lt;code&gt;C&lt;/code&gt; does not contain any class methods, the instance context is wholly unnecessary, and as such GHC will instead generate:</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; にクラスメソッドが含まれていない場合、インスタンスコンテキストは完全に不要であり、GHCは代わりに以下を生成します。</target>
        </trans-unit>
        <trans-unit id="28c37978b95dd575e513b0b23b8deb28631dd7fb" translate="yes" xml:space="preserve">
          <source>Note that if &lt;code&gt;f&lt;/code&gt; is strict, &lt;code&gt;&lt;a href=&quot;control-monad-st#v:fixST&quot;&gt;fixST&lt;/a&gt; f = _|_&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; が厳密な場合、 &lt;code&gt;&lt;a href=&quot;control-monad-st#v:fixST&quot;&gt;fixST&lt;/a&gt; f = _|_&lt;/code&gt; ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="288715920cc43c37cbcf03237a6afbc9e9f1ca44" translate="yes" xml:space="preserve">
          <source>Note that if &lt;code&gt;f&lt;/code&gt; is strict, &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#v:fixST&quot;&gt;fixST&lt;/a&gt; f = _|_&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; が厳密な場合、 &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#v:fixST&quot;&gt;fixST&lt;/a&gt; f = _|_&lt;/code&gt; ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="23075918281a3d4a9a4393210ab00757f30add13" translate="yes" xml:space="preserve">
          <source>Note that if Haskeline is built against a version of the &lt;code&gt;Win32&lt;/code&gt; library earlier than 2.5, &lt;code&gt;&lt;a href=&quot;system-console-haskeline#v:getPassword&quot;&gt;getPassword&lt;/a&gt;&lt;/code&gt; will incorrectly echo back input on MinTTY consoles (such as Cygwin or MSYS).</source>
          <target state="translated">Haskelineが2.5より前のバージョンの &lt;code&gt;Win32&lt;/code&gt; ライブラリに対してビルドされている場合、 &lt;code&gt;&lt;a href=&quot;system-console-haskeline#v:getPassword&quot;&gt;getPassword&lt;/a&gt;&lt;/code&gt; はMinTTYコンソール（CygwinやMSYSなど）の入力を誤ってエコーバックすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="748b314274792a265ed7c2434a739a0777fcbd47" translate="yes" xml:space="preserve">
          <source>Note that if the expression can&amp;rsquo;t be translated into uses of &lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; only, then it will incur a &lt;code&gt;Monad&lt;/code&gt; constraint as usual. This happens when there is a dependency on a value produced by an earlier statement in the &lt;code&gt;do&lt;/code&gt;-block:</source>
          <target state="translated">式が &lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; のみの使用に変換できない場合、通常どおり &lt;code&gt;Monad&lt;/code&gt; 制約が発生することに注意してください。これは、 &lt;code&gt;do&lt;/code&gt; ブロックの前のステートメントによって生成された値に依存している場合に発生します。</target>
        </trans-unit>
        <trans-unit id="3cbb7152b808b31e2c0cac825f8fb2dae7c7b28d" translate="yes" xml:space="preserve">
          <source>Note that if you do need to interpret file paths or environment strings as text, then some Unicode encoding or decoding should be applied first.</source>
          <target state="translated">ファイルパスや環境文字列をテキストとして解釈する必要がある場合は、最初に何らかの Unicode エンコーディングやデコーディングを適用しなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="727e91ac7cf7235ceb01512e066f5fa194d7f879" translate="yes" xml:space="preserve">
          <source>Note that if you want an efficient left-fold, you probably want to use &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifoldl-39-&quot;&gt;bifoldl'&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifoldl&quot;&gt;bifoldl&lt;/a&gt;&lt;/code&gt;. The reason is that the latter does not force the &quot;inner&quot; results, resulting in a thunk chain which then must be evaluated from the outside-in.</source>
          <target state="translated">効率的な左折りが必要な場合は、 &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifoldl-39-&quot;&gt;bifoldl'&lt;/a&gt;&lt;/code&gt; 代わりに &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifoldl&quot;&gt;bifoldl&lt;/a&gt;&lt;/code&gt; 'を使用することをお勧めします。その理由は、後者は「内部」の結果を強制せず、その結果、サンクチェーンが発生し、それを外部から評価する必要があるためです。</target>
        </trans-unit>
        <trans-unit id="3f920b899f0a93de7b234be63afb284d817b0204" translate="yes" xml:space="preserve">
          <source>Note that in &lt;code&gt;S2&lt;/code&gt; and &lt;code&gt;S3&lt;/code&gt;, the kind of the right-hand side is rather apparent, but it is still not considered to have a complete signature &amp;ndash; no inference can be done before detecting the signature.</source>
          <target state="translated">なお、はで &lt;code&gt;S2&lt;/code&gt; と &lt;code&gt;S3&lt;/code&gt; 、右側の種類はかなり明らかであるが、まだ完全な署名を有するとみなされていない-ない推論は、署名を検出する前に行うことができません。</target>
        </trans-unit>
        <trans-unit id="1ed65ace60cec8fe502a481f05e3dda7d603ff35" translate="yes" xml:space="preserve">
          <source>Note that in GHCi, and &lt;a href=&quot;using#ghc-flag---make&quot;&gt;&lt;code&gt;--make&lt;/code&gt;&lt;/a&gt; mode, the &lt;a href=&quot;separate_compilation#ghc-flag--i&quot;&gt;&lt;code&gt;-i&lt;/code&gt;&lt;/a&gt; option is used to specify the search path for &lt;em&gt;source&lt;/em&gt; files, whereas in standard batch-compilation mode the &lt;a href=&quot;separate_compilation#ghc-flag--i&quot;&gt;&lt;code&gt;-i&lt;/code&gt;&lt;/a&gt; option is used to specify the search path for interface files, see &lt;a href=&quot;separate_compilation#search-path&quot;&gt;The search path&lt;/a&gt;.</source>
          <target state="translated">GHCiおよび&lt;a href=&quot;using#ghc-flag---make&quot;&gt; &lt;code&gt;--make&lt;/code&gt; &lt;/a&gt;モードでは、&lt;a href=&quot;separate_compilation#ghc-flag--i&quot;&gt; &lt;code&gt;-i&lt;/code&gt; &lt;/a&gt;オプションを使用して&lt;em&gt;ソース&lt;/em&gt;ファイルの検索パスを指定しますが、標準のバッチコンパイルモードでは、&lt;a href=&quot;separate_compilation#ghc-flag--i&quot;&gt; &lt;code&gt;-i&lt;/code&gt; &lt;/a&gt;オプションを使用してインターフェースファイルの検索パスを指定します&lt;a href=&quot;separate_compilation#search-path&quot;&gt;。検索パス&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f74e9b413c970241bf9e71c360a313d3c98064d3" translate="yes" xml:space="preserve">
          <source>Note that in the last example, it&amp;rsquo;s impossible to learn that &lt;code&gt;a&lt;/code&gt; depends on &lt;code&gt;k&lt;/code&gt; in the body of the &lt;code&gt;forall&lt;/code&gt; (that is, the &lt;code&gt;Sing k -&amp;gt; Sing a -&amp;gt; ()&lt;/code&gt;). And so GHC rejects the program.</source>
          <target state="translated">最後の例では、 &lt;code&gt;a&lt;/code&gt; が &lt;code&gt;forall&lt;/code&gt; の本体の &lt;code&gt;k&lt;/code&gt; に依存していることを学習できないことに注意してください（つまり、 &lt;code&gt;Sing k -&amp;gt; Sing a -&amp;gt; ()&lt;/code&gt; ）。そしてGHCはプログラムを拒否します。</target>
        </trans-unit>
        <trans-unit id="3c3f39847ba19e77a6a582f15278eee9d18590bf" translate="yes" xml:space="preserve">
          <source>Note that invariant checking (namely the &lt;code&gt;always&lt;/code&gt; and &lt;code&gt;alwaysSucceeds&lt;/code&gt; functions) has been removed. See ticket &lt;a href=&quot;https://ghc.haskell.org/trac/ghc/ticket/14324&quot;&gt;#14324&lt;/a&gt; and the &lt;a href=&quot;https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0011-deprecate-stm-invariants.rst&quot;&gt;removal proposal&lt;/a&gt;. Existing users are encouraged to encapsulate their STM operations in safe abstractions which can perform the invariant checking without help from the runtime system.</source>
          <target state="translated">不変式のチェック（ &lt;code&gt;always&lt;/code&gt; および &lt;code&gt;alwaysSucceeds&lt;/code&gt; 関数）が削除されていることに注意してください。チケット&lt;a href=&quot;https://ghc.haskell.org/trac/ghc/ticket/14324&quot;&gt;＃14324&lt;/a&gt;と&lt;a href=&quot;https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0011-deprecate-stm-invariants.rst&quot;&gt;削除の提案を&lt;/a&gt;ご覧ください。既存のユーザーは、ランタイムシステムの助けなしに不変のチェックを実行できる安全な抽象化でSTM操作をカプセル化することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="bfd5ca80319611f2ad6a6d58665d93fcbb3c156f" translate="yes" xml:space="preserve">
          <source>Note that it &lt;em&gt;isn't&lt;/em&gt; customarily expected that a type instance of &lt;code&gt;&lt;a href=&quot;ghc-real#t:Fractional&quot;&gt;Fractional&lt;/a&gt;&lt;/code&gt; implement a field. However, all instances in &lt;code&gt;base&lt;/code&gt; do.</source>
          <target state="translated">通常、 &lt;code&gt;&lt;a href=&quot;ghc-real#t:Fractional&quot;&gt;Fractional&lt;/a&gt;&lt;/code&gt; の型インスタンスがフィールドを実装すること&lt;em&gt;は&lt;/em&gt;期待されて&lt;em&gt;いない&lt;/em&gt;ことに注意してください。ただし、 &lt;code&gt;base&lt;/code&gt; 内のすべてのインスタンスが実行します。</target>
        </trans-unit>
        <trans-unit id="525bc9621da46140b66110bf09981d8c0a2b7083" translate="yes" xml:space="preserve">
          <source>Note that it &lt;em&gt;isn't&lt;/em&gt; customarily expected that a type instance of &lt;code&gt;&lt;a href=&quot;prelude#t:Fractional&quot;&gt;Fractional&lt;/a&gt;&lt;/code&gt; implement a field. However, all instances in &lt;code&gt;base&lt;/code&gt; do.</source>
          <target state="translated">通常、 &lt;code&gt;&lt;a href=&quot;prelude#t:Fractional&quot;&gt;Fractional&lt;/a&gt;&lt;/code&gt; の型インスタンスがフィールドを実装すること&lt;em&gt;は&lt;/em&gt;期待されて&lt;em&gt;いない&lt;/em&gt;ことに注意してください。ただし、 &lt;code&gt;base&lt;/code&gt; 内のすべてのインスタンスが実行します。</target>
        </trans-unit>
        <trans-unit id="ccaf9ee57d711da801bed84dfadd525a75d70df7" translate="yes" xml:space="preserve">
          <source>Note that it &lt;em&gt;isn't&lt;/em&gt; customarily expected that a type instance of both &lt;code&gt;&lt;a href=&quot;ghc-num#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; implement an ordered ring. Indeed, in &lt;code&gt;base&lt;/code&gt; only &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-ratio#v:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; do.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-num#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; の両方の型インスタンスが順序付けられたリングを実装すること&lt;em&gt;は&lt;/em&gt;通常予期されて&lt;em&gt;いない&lt;/em&gt;ことに注意してください。実際、 &lt;code&gt;base&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;data-ratio#v:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; とRationalだけが行います。</target>
        </trans-unit>
        <trans-unit id="0b0ebefaf6a8fd7841a426ebbf90075219fca0d8" translate="yes" xml:space="preserve">
          <source>Note that it &lt;em&gt;isn't&lt;/em&gt; customarily expected that a type instance of both &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; implement an ordered ring. Indeed, in &lt;code&gt;base&lt;/code&gt; only &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-ratio#v:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; do.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;prelude#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; の両方の型インスタンスが順序付けられたリングを実装すること&lt;em&gt;は&lt;/em&gt;通常予期されて&lt;em&gt;いない&lt;/em&gt;ことに注意してください。実際、 &lt;code&gt;base&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;data-ratio#v:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; とRationalだけが行います。</target>
        </trans-unit>
        <trans-unit id="b265c3aed4a0fae4215ed6797047f0fad0de3ff1" translate="yes" xml:space="preserve">
          <source>Note that it doesn&amp;rsquo;t fully negate the effects of &lt;code&gt;-Werror=&amp;lt;wflag&amp;gt;&lt;/code&gt; - the warning will still be enabled.</source>
          <target state="translated">&lt;code&gt;-Werror=&amp;lt;wflag&amp;gt;&lt;/code&gt; の効果を完全に無効にするわけではないことに注意してください。警告は引き続き有効です。</target>
        </trans-unit>
        <trans-unit id="7005610565a4c7898f3b659dd8d96fce7be60db0" translate="yes" xml:space="preserve">
          <source>Note that line numbers start counting at one, but column numbers start at zero. This choice was made to follow existing convention (i.e. this is how Emacs does it).</source>
          <target state="translated">行番号は1から数え始めますが、列番号は0から始まることに注意してください。この選択は、既存の慣習に従うために行われました (すなわち、Emacsではこのように行われています)。</target>
        </trans-unit>
        <trans-unit id="b58c5082533c6ce920a238e2630b3a0a649c4aa4" translate="yes" xml:space="preserve">
          <source>Note that memory allocation is unrelated to &lt;em&gt;live memory&lt;/em&gt;, also known as &lt;em&gt;heap residency&lt;/em&gt;. A thread can allocate a large amount of memory and retain anything between none and all of it. It is better to think of the allocation limit as a limit on &lt;em&gt;CPU time&lt;/em&gt;, rather than a limit on memory.</source>
          <target state="translated">メモリの割り当ては、&lt;em&gt;ヒープ常駐&lt;/em&gt;とも呼ばれる&lt;em&gt;ライブメモリ&lt;/em&gt;とは関係がないことに注意してください。スレッドは大量のメモリを割り当てて、メモリをまったく使用しないか、すべて使用することができます。割り当て制限は、メモリの制限ではなく、&lt;em&gt;CPU時間の&lt;/em&gt;制限と考える方が適切です。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="273d41914c5c6dac58d5704a8903f640ae883fcf" translate="yes" xml:space="preserve">
          <source>Note that module &lt;code&gt;D&lt;/code&gt; was compiled, but in this instance because its source hadn&amp;rsquo;t really changed, its interface remained the same, and the recompilation checker determined that &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; didn&amp;rsquo;t need to be recompiled.</source>
          <target state="translated">モジュール &lt;code&gt;D&lt;/code&gt; はコンパイルされましたが、この例ではソースが実際には変更されていなかったため、そのインターフェースは同じままであり、再コンパイルチェッカーは &lt;code&gt;A&lt;/code&gt; 、 &lt;code&gt;B&lt;/code&gt; 、 &lt;code&gt;C&lt;/code&gt; を再コンパイルする必要がないと判断しました。</target>
        </trans-unit>
        <trans-unit id="aa9b10733e365e8f6145122de16aa95fd734e161" translate="yes" xml:space="preserve">
          <source>Note that no assumptions may be made about the values representing stable pointers. In fact, they need not even be valid memory addresses. The only guarantee provided is that if they are passed back to Haskell land, the function &lt;code&gt;&lt;a href=&quot;foreign-stableptr#v:deRefStablePtr&quot;&gt;deRefStablePtr&lt;/a&gt;&lt;/code&gt; will be able to reconstruct the Haskell value referred to by the stable pointer.</source>
          <target state="translated">安定したポインタを表す値について、仮定を行うことはできません。実際、それらは有効なメモリアドレスである必要さえありません。提供される唯一の保証は、それらがHaskellランドに戻された場合、関数 &lt;code&gt;&lt;a href=&quot;foreign-stableptr#v:deRefStablePtr&quot;&gt;deRefStablePtr&lt;/a&gt;&lt;/code&gt; は、ステーブルポインターによって参照されるHaskell値を再構築できることです。</target>
        </trans-unit>
        <trans-unit id="cc4fefad8cc30b2189f543b2c01f22060d9ca1a7" translate="yes" xml:space="preserve">
          <source>Note that no warning is given for syntax that implicitly refers to the Prelude, even if &lt;a href=&quot;glasgow_exts#extension-NoImplicitPrelude&quot;&gt;&lt;code&gt;-XNoImplicitPrelude&lt;/code&gt;&lt;/a&gt; would change whether it refers to the Prelude. For example, no warning is given when &lt;code&gt;368&lt;/code&gt; means &lt;code&gt;Prelude.fromInteger (368::Prelude.Integer)&lt;/code&gt; (where &lt;code&gt;Prelude&lt;/code&gt; refers to the actual Prelude module, regardless of the imports of the module being compiled).</source>
          <target state="translated">&lt;a href=&quot;glasgow_exts#extension-NoImplicitPrelude&quot;&gt; &lt;code&gt;-XNoImplicitPrelude&lt;/code&gt; &lt;/a&gt;がPreludeを参照するかどうかを変更する場合でも、暗黙的にPreludeを参照する構文については警告が表示されないことに注意してください。たとえば、 &lt;code&gt;368&lt;/code&gt; が &lt;code&gt;Prelude.fromInteger (368::Prelude.Integer)&lt;/code&gt; 意味する場合、警告は表示されません（ &lt;code&gt;Prelude&lt;/code&gt; は、コンパイルされるモジュールのインポートに関係なく、実際のP​​reludeモジュールを指します）。</target>
        </trans-unit>
        <trans-unit id="49a7cd2da732a498264fe69cdc55ccc2e5f59d22" translate="yes" xml:space="preserve">
          <source>Note that no warning is given for syntax that implicitly refers to the Prelude, even if &lt;a href=&quot;glasgow_exts#extension-NoImplicitPrelude&quot;&gt;&lt;code&gt;NoImplicitPrelude&lt;/code&gt;&lt;/a&gt; would change whether it refers to the Prelude. For example, no warning is given when &lt;code&gt;368&lt;/code&gt; means &lt;code&gt;Prelude.fromInteger (368::Prelude.Integer)&lt;/code&gt; (where &lt;code&gt;Prelude&lt;/code&gt; refers to the actual Prelude module, regardless of the imports of the module being compiled).</source>
          <target state="translated">Note that no warning is given for syntax that implicitly refers to the Prelude, even if &lt;a href=&quot;glasgow_exts#extension-NoImplicitPrelude&quot;&gt; &lt;code&gt;NoImplicitPrelude&lt;/code&gt; &lt;/a&gt; would change whether it refers to the Prelude. For example, no warning is given when &lt;code&gt;368&lt;/code&gt; means &lt;code&gt;Prelude.fromInteger (368::Prelude.Integer)&lt;/code&gt; (where &lt;code&gt;Prelude&lt;/code&gt; refers to the actual Prelude module, regardless of the imports of the module being compiled).</target>
        </trans-unit>
        <trans-unit id="b3961e6b1d44470d139a066bd7e5e99b36cc380d" translate="yes" xml:space="preserve">
          <source>Note that numeric digits outside the ASCII range (such as arabic-indic digits like e.g. &quot;٤&quot; or &lt;code&gt;U+0664&lt;/code&gt;), as well as numeric characters which aren't digits, are parsed by this function but not by &lt;code&gt;&lt;a href=&quot;text-parsec-char#v:digit&quot;&gt;digit&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">（例えばアラビアインドなどのような数字「4」またはASCII範囲外の数字ことに留意されたい &lt;code&gt;U+0664&lt;/code&gt; 、ならびにない数字である数字）は、によってこの機能により解析されていないが、 &lt;code&gt;&lt;a href=&quot;text-parsec-char#v:digit&quot;&gt;digit&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a7ed51f37ef06c30fed9104ea5ecb01d29f66f7e" translate="yes" xml:space="preserve">
          <source>Note that numeric digits outside the ASCII range (such as arabic-indic digits like e.g. &quot;٤&quot; or &lt;code&gt;U+0664&lt;/code&gt;), as well as numeric characters which aren't digits, are parsed by this function but not by &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-char#v:digit&quot;&gt;digit&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">（例えばアラビアインドなどのような数字「4」またはASCII範囲外の数字ことに留意されたい &lt;code&gt;U+0664&lt;/code&gt; 、ならびにない数字である数字）は、によってこの機能により解析されていないが、 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-char#v:digit&quot;&gt;digit&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3aca93abfde5ec064588876b85a983dba2e1d897" translate="yes" xml:space="preserve">
          <source>Note that numeric digits outside the ASCII range, as well as numeric characters which aren't digits, are selected by this function but not by &lt;code&gt;&lt;a href=&quot;data-char#v:isDigit&quot;&gt;isDigit&lt;/a&gt;&lt;/code&gt;. Such characters may be part of identifiers but are not used by the printer and reader to represent numbers.</source>
          <target state="translated">ASCII範囲外の数字、および数字ではない数字は、この関数によって選択されますが、 &lt;code&gt;&lt;a href=&quot;data-char#v:isDigit&quot;&gt;isDigit&lt;/a&gt;&lt;/code&gt; では選択されないことに注意してください。このような文字は識別子の一部である場合がありますが、プリンターとリーダーでは数値を表すために使用されません。</target>
        </trans-unit>
        <trans-unit id="f6ca479e6c19d19f7cbdf53fa1975eb3bf201fe0" translate="yes" xml:space="preserve">
          <source>Note that numeric digits outside the ASCII range, as well as numeric characters which aren't digits, are selected by this function but not by &lt;code&gt;&lt;a href=&quot;ghc-unicode#v:isDigit&quot;&gt;isDigit&lt;/a&gt;&lt;/code&gt;. Such characters may be part of identifiers but are not used by the printer and reader to represent numbers.</source>
          <target state="translated">ASCII範囲外の数字、および数字ではない数字は、この関数によって選択されますが、 &lt;code&gt;&lt;a href=&quot;ghc-unicode#v:isDigit&quot;&gt;isDigit&lt;/a&gt;&lt;/code&gt; では選択されないことに注意してください。このような文字は識別子の一部である場合がありますが、プリンターとリーダーでは数値を表すために使用されません。</target>
        </trans-unit>
        <trans-unit id="00198523cbc0082fb3428e68e1d61ecf58a45ae8" translate="yes" xml:space="preserve">
          <source>Note that on Windows parent directories &lt;code&gt;..&lt;/code&gt; are always fully expanded before the symbolic links, as consistent with the rest of the Windows API (such as &lt;code&gt;GetFullPathName&lt;/code&gt;). In contrast, on POSIX systems parent directories &lt;code&gt;..&lt;/code&gt; are expanded alongside symbolic links from left to right. To put this more concretely: if &lt;code&gt;L&lt;/code&gt; is a symbolic link for &lt;code&gt;R/P&lt;/code&gt;, then on Windows &lt;code&gt;L\..&lt;/code&gt; refers to &lt;code&gt;.&lt;/code&gt;, whereas on other operating systems &lt;code&gt;L/..&lt;/code&gt; refers to &lt;code&gt;R&lt;/code&gt;.</source>
          <target state="translated">Windowsの親ディレクトリにいることを注意 &lt;code&gt;..&lt;/code&gt; 常に完全に（などのWindows APIの残りの部分と一致して、シンボリックリンクの前に展開され &lt;code&gt;GetFullPathName&lt;/code&gt; ）。対照的に、POSIXシステムでは、親ディレクトリ &lt;code&gt;..&lt;/code&gt; はシンボリックリンクと共に左から右に展開されます。これをより具体的に説明すると、 &lt;code&gt;L&lt;/code&gt; が &lt;code&gt;R/P&lt;/code&gt; のシンボリックリンクの場合、Windowsでは &lt;code&gt;L\..&lt;/code&gt; はを参照し &lt;code&gt;.&lt;/code&gt; 一方、他のオペレーティングシステムでは、 &lt;code&gt;L/..&lt;/code&gt; は &lt;code&gt;R&lt;/code&gt; を指します。</target>
        </trans-unit>
        <trans-unit id="cce57e0602bd626d4114bc65f1120819b7a872c0" translate="yes" xml:space="preserve">
          <source>Note that packages only contain compiled code, so debugging a package requires finding its source and loading that directly.</source>
          <target state="translated">パッケージにはコンパイルされたコードしか含まれていないので、パッケージをデバッグするにはソースを見つけて直接読み込む必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="92c2203dfd5a194d5612dfeec8df42a4f09f5338" translate="yes" xml:space="preserve">
          <source>Note that primitives are &lt;code&gt;Contrafunctors&lt;/code&gt;&lt;a href=&quot;http://hackage.haskell.org/package/contravariant&quot;&gt;http://hackage.haskell.org/package/contravariant&lt;/a&gt;. Hence, the following laws hold.</source>
          <target state="translated">プリミティブは &lt;code&gt;Contrafunctors&lt;/code&gt; &lt;a href=&quot;http://hackage.haskell.org/package/contravariant&quot;&gt;http://hackage.haskell.org/package/contravariantで&lt;/a&gt;あることに注意してください。したがって、以下の法律が成立します。</target>
        </trans-unit>
        <trans-unit id="b038144c16c5927ecb1a6490213329a05b30c08f" translate="yes" xml:space="preserve">
          <source>Note that processes which use the POSIX &lt;code&gt;exec&lt;/code&gt; system call (e.g. &lt;code&gt;gcc&lt;/code&gt;) require special care on Windows. Specifically, the &lt;code&gt;msvcrt&lt;/code&gt; C runtime used frequently on Windows emulates &lt;code&gt;exec&lt;/code&gt; in a non-POSIX compliant manner, where the caller will be terminated (with exit code 0) and execution will continue in a new process. As a result, on Windows it will appear as though a child process which has called &lt;code&gt;exec&lt;/code&gt; has terminated despite the fact that the process would still be running on a POSIX-compliant platform.</source>
          <target state="translated">Windowsでは、POSIX &lt;code&gt;exec&lt;/code&gt; システムコール（ &lt;code&gt;gcc&lt;/code&gt; など）を使用するプロセスには特別な注意が必要です。具体的には、Windowsで頻繁に使用される &lt;code&gt;msvcrt&lt;/code&gt; Cランタイムは、非POSIX準拠の方法で &lt;code&gt;exec&lt;/code&gt; をエミュレートします。この場合、呼び出し元は終了し（終了コード0で）、実行は新しいプロセスで続行されます。その結果、Windowsでは、 &lt;code&gt;exec&lt;/code&gt; を呼び出した子プロセスがPOSIX準拠のプラットフォームで実行されているにもかかわらず、終了したように見えます。</target>
        </trans-unit>
        <trans-unit id="5e2096ed561c2bf3900c21383006ef3f61805855" translate="yes" xml:space="preserve">
          <source>Note that references from a finalizer do not necessarily prevent another object from being finalized. If A's finalizer refers to B (perhaps using &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt;, then the only guarantee is that B's finalizer will never be started before A's. If both A and B are unreachable, then both finalizers will start together. See &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt; for more on finalizer ordering.</source>
          <target state="translated">ファイナライザからの参照が、別のオブジェクトのファイナライズを必ずしも妨げないことに注意してください。Aのファイナライザは、おそらく使用して（Bを参照している場合 &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt; を、そして唯一の保証はBのファイナライザは、Aの前に開始されることがないということである。AとBの両方が到達不能である場合、両方のファイナライザが一緒に起動します。を参照してください &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt; ファイナライザの順序の詳細については。</target>
        </trans-unit>
        <trans-unit id="e1e90d7572d19320cf7344ae3b1d0ce896d5029a" translate="yes" xml:space="preserve">
          <source>Note that references from a finalizer do not necessarily prevent another object from being finalized. If A's finalizer refers to B (perhaps using &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt;, then the only guarantee is that B's finalizer will never be started before A's. If both A and B are unreachable, then both finalizers will start together. See &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt; for more on finalizer ordering.</source>
          <target state="translated">ファイナライザからの参照が、別のオブジェクトのファイナライズを必ずしも妨げないことに注意してください。Aのファイナライザは、おそらく使用して（Bを参照している場合 &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt; を、そして唯一の保証はBのファイナライザは、Aの前に開始されることがないということである。AとBの両方が到達不能である場合、両方のファイナライザが一緒に起動します。を参照してください &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt; ファイナライザの順序の詳細については。</target>
        </trans-unit>
        <trans-unit id="cc356b8793bb083a67ad53425e549e6eaf817f79" translate="yes" xml:space="preserve">
          <source>Note that right-associativity of &lt;code&gt;:^:&lt;/code&gt; is ignored. For example,</source>
          <target state="translated">&lt;code&gt;:^:&lt;/code&gt; の右結合性は無視されることに注意してください。例えば、</target>
        </trans-unit>
        <trans-unit id="ea16129864c9bc69b1267cd317e60b8e1cd54033" translate="yes" xml:space="preserve">
          <source>Note that right-associativity of &lt;code&gt;:^:&lt;/code&gt; is unused.</source>
          <target state="translated">&lt;code&gt;:^:&lt;/code&gt; の右結合は使用されていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="cb25fb232eaa8d92d1074e6f26210af239a4d814" translate="yes" xml:space="preserve">
          <source>Note that sequences are typically &lt;em&gt;slower&lt;/em&gt; than lists when using only operations for which they have the same big-(O) complexity: sequences make rather mediocre stacks!</source>
          <target state="translated">シーケンスは、同じbig-（O）の複雑さを持つ操作のみを使用する場合、通常はリスト&lt;em&gt;より&lt;/em&gt;も&lt;em&gt;遅い&lt;/em&gt;ことに注意してください。シーケンスはかなり平凡なスタックを作成します。</target>
        </trans-unit>
        <trans-unit id="c723aeed4af9dd83a9b82069c07b9c3ccbc5da99" translate="yes" xml:space="preserve">
          <source>Note that signature matching does check if &lt;em&gt;fixity&lt;/em&gt; matches, so be sure specify fixity of ordinary identifiers if you intend to use them with backticks.</source>
          <target state="translated">シグネチャマッチングでは、&lt;em&gt;固定性が&lt;/em&gt;一致するかどうかがチェックされるため、バッククォートで使用する場合は、通常の識別子の固定性を指定してください。</target>
        </trans-unit>
        <trans-unit id="f095c03ad06a310fd52b2a6d717b98f26776e7da" translate="yes" xml:space="preserve">
          <source>Note that since &lt;code&gt;integer-gmp&lt;/code&gt; does not depend on &lt;code&gt;base&lt;/code&gt;, error reporting via exceptions, &lt;code&gt;error&lt;/code&gt;, or &lt;code&gt;undefined&lt;/code&gt; is not available. Instead, the low-level functions will crash the runtime if called with invalid arguments.</source>
          <target state="translated">&lt;code&gt;integer-gmp&lt;/code&gt; は &lt;code&gt;base&lt;/code&gt; に依存しないため、exceptions、 &lt;code&gt;error&lt;/code&gt; 、または &lt;code&gt;undefined&lt;/code&gt; によるエラーレポートは利用できないことに注意してください。代わりに、低レベル関数は、無効な引数で呼び出されるとランタイムをクラッシュさせます。</target>
        </trans-unit>
        <trans-unit id="9b83514c0ce414a47b834dc48f510e88bcd807c9" translate="yes" xml:space="preserve">
          <source>Note that since an expression splice is unable to refer to declarations in the same declaration group, we can introduce a top-level (empty) splice to break up the declaration group</source>
          <target state="translated">式のスプライスは同じ宣言グループ内の宣言を参照することができないので、宣言グループを分割するためにトップレベルの (空の)スプライスを導入することができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a74f896437a88c7d014238b3770a7c1c62b51099" translate="yes" xml:space="preserve">
          <source>Note that the 32-bit x86 native code generator only supports excess-precision mode, so neither &lt;code&gt;-fexcess-precision&lt;/code&gt; nor &lt;code&gt;-fno-excess-precision&lt;/code&gt; has any effect. This is a known bug, see &lt;a href=&quot;bugs#bugs-ghc&quot;&gt;Bugs in GHC&lt;/a&gt;.</source>
          <target state="translated">32ビットx86ネイティブコードジェネレーターは超過精度モードのみをサポートしているため、 &lt;code&gt;-fexcess-precision&lt;/code&gt; も &lt;code&gt;-fno-excess-precision&lt;/code&gt; も効果がないことに注意してください。これは既知のバグです、見&lt;a href=&quot;bugs#bugs-ghc&quot;&gt;GHCのバグを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="330613fe18f73ee23466f7511d7b202676e5cd38" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;-odir&lt;/code&gt; option does &lt;em&gt;not&lt;/em&gt; affect where the interface files are put; use the &lt;code&gt;-hidir&lt;/code&gt; option for that. In the above example, they would still be put in &lt;code&gt;parse/Foo.hi&lt;/code&gt;, &lt;code&gt;parse/Bar.hi&lt;/code&gt;, and &lt;code&gt;gurgle/Bumble.hi&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-odir&lt;/code&gt; オプションは、インターフェースファイルの配置場所には影響し&lt;em&gt;ない&lt;/em&gt;ことに注意してください。そのために &lt;code&gt;-hidir&lt;/code&gt; オプションを使用します。上記の例では、これらは引き続き &lt;code&gt;parse/Foo.hi&lt;/code&gt; 、 &lt;code&gt;parse/Bar.hi&lt;/code&gt; 、および &lt;code&gt;gurgle/Bumble.hi&lt;/code&gt; に配置されます。</target>
        </trans-unit>
        <trans-unit id="309a5bb3e84ee602253ec738970608aecfccc201" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; method, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt;, is not particularly lazy. It will take time proportional to the sum of the logarithms of the individual result sequences to produce anything whatsoever.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; メソッド &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; は特に怠惰ではないことに注意してください。何でも生成するためには、個々の結果シーケンスの対​​数の合計に比例して時間がかかります。</target>
        </trans-unit>
        <trans-unit id="ecf7bfd1b411f608d1147e0ef0a9518d1e3597b7" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; method, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt;, is not particularly lazy. It will take time proportional to the sum of the logarithms of the individual result sequences to produce anything whatsoever.</source>
          <target state="translated">Note that the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; method, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; , is not particularly lazy. It will take time proportional to the sum of the logarithms of the individual result sequences to produce anything whatsoever.</target>
        </trans-unit>
        <trans-unit id="5e6f2cf53da86d8f316c7d0c0ffc6df711b35a02" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/GHC-IO-Encoding-Types.html#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; remembers nothing about the state of the encoder/decoder in use on this &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;. For example, if the encoding in use is UTF-16, then using &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetEncoding&quot;&gt;hGetEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSetEncoding&quot;&gt;hSetEncoding&lt;/a&gt;&lt;/code&gt; to save and restore the encoding may result in an extra byte-order-mark being written to the file.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/GHC-IO-Encoding-Types.html#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; は、この &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; で使用されているエンコーダー/デコーダーの状態について何も記憶していないことに注意してください。たとえば、使用中のエンコーディングがUTF-16の場合、 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetEncoding&quot;&gt;hGetEncoding&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSetEncoding&quot;&gt;hSetEncoding&lt;/a&gt;&lt;/code&gt; を使用してエンコーディングを保存および復元すると、ファイルに余分なバイト順マークが書き込まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="532a96aa546fe516b65f4c317f8d98964d1adb0b" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/GHC-IO-Encoding-Types.html#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; remembers nothing about the state of the encoder/decoder in use on this &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;. For example, if the encoding in use is UTF-16, then using &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetEncoding&quot;&gt;hGetEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSetEncoding&quot;&gt;hSetEncoding&lt;/a&gt;&lt;/code&gt; to save and restore the encoding may result in an extra byte-order-mark being written to the file.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/GHC-IO-Encoding-Types.html#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; は、この &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; で使用されているエンコーダー/デコーダーの状態については何も記憶しないことに注意してください。たとえば、使用中のエンコードがUTF-16の場合、 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetEncoding&quot;&gt;hGetEncoding&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSetEncoding&quot;&gt;hSetEncoding&lt;/a&gt;&lt;/code&gt; を使用してエンコードを保存および復元すると、余分なバイトオーダーマークがファイルに書き込まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="2204063e4c34f1c3a4a4b15d40a00171735eecd7" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;&lt;a href=&quot;system-io#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; remembers nothing about the state of the encoder/decoder in use on this &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;. For example, if the encoding in use is UTF-16, then using &lt;code&gt;&lt;a href=&quot;system-io#v:hGetEncoding&quot;&gt;hGetEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-io#v:hSetEncoding&quot;&gt;hSetEncoding&lt;/a&gt;&lt;/code&gt; to save and restore the encoding may result in an extra byte-order-mark being written to the file.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; は、この &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; で使用されているエンコーダー/デコーダーの状態については何も記憶しないことに注意してください。たとえば、使用中のエンコードがUTF-16の場合、 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetEncoding&quot;&gt;hGetEncoding&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;system-io#v:hSetEncoding&quot;&gt;hSetEncoding&lt;/a&gt;&lt;/code&gt; を使用してエンコードを保存および復元すると、余分なバイトオーダーマークがファイルに書き込まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="2b693c1b448bc94cf66607a78730b10d509a368a" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;Lift&lt;/code&gt; typeclass takes advantage of &lt;a href=&quot;#runtime-rep&quot;&gt;Levity polymorphism&lt;/a&gt; in order to support instances involving unboxed types. This means &lt;a href=&quot;#extension-DeriveLift&quot;&gt;&lt;code&gt;DeriveLift&lt;/code&gt;&lt;/a&gt; also works for these types:</source>
          <target state="translated">Note that the &lt;code&gt;Lift&lt;/code&gt; typeclass takes advantage of &lt;a href=&quot;#runtime-rep&quot;&gt;Levity polymorphism&lt;/a&gt; in order to support instances involving unboxed types. This means &lt;a href=&quot;#extension-DeriveLift&quot;&gt; &lt;code&gt;DeriveLift&lt;/code&gt; &lt;/a&gt; also works for these types:</target>
        </trans-unit>
        <trans-unit id="9f1e65aa301e4b1be82f664f9499398a1e7e1f92" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;Prelude&lt;/code&gt; import is marked as implicit. It can be overridden with an explicit &lt;code&gt;Prelude&lt;/code&gt; import, just like in a Haskell module.</source>
          <target state="translated">&lt;code&gt;Prelude&lt;/code&gt; インポートは暗黙的としてマークされていることに注意してください。Haskellモジュールと同様に、明示的な &lt;code&gt;Prelude&lt;/code&gt; インポートでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="502132d21d5978b3a8ec6cd6de231a4d98125ce2" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;nominal&lt;/code&gt; type arguments are equal, the &lt;code&gt;representational&lt;/code&gt; type arguments can differ, but need to have a &lt;code&gt;Coercible&lt;/code&gt; instance themself, and the &lt;code&gt;phantom&lt;/code&gt; type arguments can be changed arbitrarily.</source>
          <target state="translated">そのノート &lt;code&gt;nominal&lt;/code&gt; 型引数が等しい、 &lt;code&gt;representational&lt;/code&gt; 型引数は異なるが、持たせる必要ができる &lt;code&gt;Coercible&lt;/code&gt; インスタンス人自身を、そして &lt;code&gt;phantom&lt;/code&gt; 型引数は任意に変更することができます。</target>
        </trans-unit>
        <trans-unit id="e840ae12e6ff09c359b921347e60a8e6a051ed31" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;restore&lt;/code&gt; action passed to the argument to &lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; does not necessarily unmask asynchronous exceptions, it just restores the masking state to that of the enclosing context. Thus if asynchronous exceptions are already masked, &lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; cannot be used to unmask exceptions again. This is so that if you call a library function with exceptions masked, you can be sure that the library call will not be able to unmask exceptions again. If you are writing library code and need to use asynchronous exceptions, the only way is to create a new thread; see &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; の引数に渡された &lt;code&gt;restore&lt;/code&gt; アクションは、非同期例外のマスクを必ずしも解除するのではなく、マスキング状態をそれを含むコンテキストの状態に復元するだけであることに注意してください。したがって、非同期例外がすでにマスクされている場合、 &lt;code&gt;&lt;a href=&quot;control-exception#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; を使用して例外を再びマスク解除することはできません。これは、例外をマスクしてライブラリ関数を呼び出す場合、ライブラリ呼び出しで例外を再びマスク解除できないようにするためです。ライブラリコードを記述していて、非同期例外を使用する必要がある場合、唯一の方法は新しいスレッドを作成することです。 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="87a7979be5edffeddb07b20613db6dbe774e135f" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;restore&lt;/code&gt; action passed to the argument to &lt;code&gt;&lt;a href=&quot;ghc-io#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; does not necessarily unmask asynchronous exceptions, it just restores the masking state to that of the enclosing context. Thus if asynchronous exceptions are already masked, &lt;code&gt;&lt;a href=&quot;ghc-io#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; cannot be used to unmask exceptions again. This is so that if you call a library function with exceptions masked, you can be sure that the library call will not be able to unmask exceptions again. If you are writing library code and need to use asynchronous exceptions, the only way is to create a new thread; see &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; の引数に渡された &lt;code&gt;restore&lt;/code&gt; アクションは、非同期例外のマスクを必ずしも解除するのではなく、マスキング状態をそれを含むコンテキストの状態に復元するだけであることに注意してください。したがって、非同期例外がすでにマスクされている場合、 &lt;code&gt;&lt;a href=&quot;ghc-io#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; を使用して例外を再びマスク解除することはできません。これは、例外をマスクしてライブラリ関数を呼び出す場合、ライブラリ呼び出しで例外を再びマスク解除できないようにするためです。ライブラリコードを記述していて、非同期例外を使用する必要がある場合、唯一の方法は新しいスレッドを作成することです。 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="454010dcf1120ceeb3132c227f791c724eec83d9" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;restore&lt;/code&gt; action passed to the argument to &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; does not necessarily unmask asynchronous exceptions, it just restores the masking state to that of the enclosing context. Thus if asynchronous exceptions are already masked, &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; cannot be used to unmask exceptions again. This is so that if you call a library function with exceptions masked, you can be sure that the library call will not be able to unmask exceptions again. If you are writing library code and need to use asynchronous exceptions, the only way is to create a new thread; see &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; の引数に渡された &lt;code&gt;restore&lt;/code&gt; アクションは、非同期例外のマスクを必ずしも解除するのではなく、マスキング状態をそれを含むコンテキストの状態に復元するだけであることに注意してください。したがって、非同期例外がすでにマスクされている場合、 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; を使用して例外を再びマスク解除することはできません。これは、例外をマスクしてライブラリ関数を呼び出す場合、ライブラリ呼び出しで例外を再びマスク解除できないようにするためです。ライブラリコードを記述していて、非同期例外を使用する必要がある場合、唯一の方法は新しいスレッドを作成することです。 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="170a4ee31f2d0f202d220168ec1fdc8ad29400b0" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;restore&lt;/code&gt; action passed to the argument to &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; does not necessarily unmask asynchronous exceptions, it just restores the masking state to that of the enclosing context. Thus if asynchronous exceptions are already masked, &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; cannot be used to unmask exceptions again. This is so that if you call a library function with exceptions masked, you can be sure that the library call will not be able to unmask exceptions again. If you are writing library code and need to use asynchronous exceptions, the only way is to create a new thread; see &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Note that the &lt;code&gt;restore&lt;/code&gt; action passed to the argument to &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; does not necessarily unmask asynchronous exceptions, it just restores the masking state to that of the enclosing context. Thus if asynchronous exceptions are already masked, &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; cannot be used to unmask exceptions again. This is so that if you call a library function with exceptions masked, you can be sure that the library call will not be able to unmask exceptions again. If you are writing library code and need to use asynchronous exceptions, the only way is to create a new thread; see &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent#v:forkIOWithUnmask&quot;&gt;forkIOWithUnmask&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e60d714ad07dfbcb448ae9178edf63b83c268312" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;via&lt;/code&gt; type does not have to be a &lt;code&gt;newtype&lt;/code&gt;. The only restriction is that it is coercible with the original data type. This means there can be arbitrary nesting of newtypes, as in the following example:</source>
          <target state="translated">&lt;code&gt;via&lt;/code&gt; タイプは &lt;code&gt;newtype&lt;/code&gt; である必要はないことに注意してください。唯一の制限は、元のデータ型と強制できることです。これは、次の例のように、newtypeの任意の入れ子が存在する可能性があることを意味します。</target>
        </trans-unit>
        <trans-unit id="49a9ad3bbf35b1a32c2be7eda4a33ddd430bcebb" translate="yes" xml:space="preserve">
          <source>Note that the ASCII encoding is a subset of the UTF-8 encoding, which is why we can use the optimized function &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; to encode an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; as a decimal number with UTF-8 encoded digits. Using &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; is more efficient than &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#v:stringUtf8&quot;&gt;stringUtf8&lt;/a&gt; . &lt;a href=&quot;../base-4.13.0.0/text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt;, as it avoids constructing an intermediate &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;. Avoiding this intermediate data structure significantly improves performance because encoding &lt;code&gt;Cell&lt;/code&gt;s is the core operation for rendering CSV-tables. See &lt;a href=&quot;data-bytestring-builder-prim&quot;&gt;Data.ByteString.Builder.Prim&lt;/a&gt; for further information on how to improve the performance of &lt;code&gt;renderString&lt;/code&gt;.</source>
          <target state="translated">ASCIIエンコードはUTF-8エンコードのサブセットであるため、最適化された関数 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; を使用して、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; を10進数としてUTF-8エンコードされた数字でエンコードできることに注意してください。 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; の使用はstringUtf8よりも効率的 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#v:stringUtf8&quot;&gt;stringUtf8&lt;/a&gt; . &lt;a href=&quot;../base-4.13.0.0/text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; は、中間の &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; の構築を回避します。 &lt;code&gt;Cell&lt;/code&gt; のエンコードはCSVテーブルをレンダリングするためのコア操作であるため、この中間データ構造を回避すると、パフォーマンスが大幅に向上します。参照&lt;a href=&quot;data-bytestring-builder-prim&quot;&gt;Data.ByteString.Builder.Primを&lt;/a&gt;性能向上させる方法の詳細については &lt;code&gt;renderString&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="c0dbdccc6b0227bdbf0bac2e7e966328224fe997" translate="yes" xml:space="preserve">
          <source>Note that the ASCII encoding is a subset of the UTF-8 encoding, which is why we can use the optimized function &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; to encode an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; as a decimal number with UTF-8 encoded digits. Using &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; is more efficient than &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#v:stringUtf8&quot;&gt;stringUtf8&lt;/a&gt; . &lt;a href=&quot;../base-4.14.1.0/text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt;, as it avoids constructing an intermediate &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;. Avoiding this intermediate data structure significantly improves performance because encoding &lt;code&gt;Cell&lt;/code&gt;s is the core operation for rendering CSV-tables. See &lt;a href=&quot;data-bytestring-builder-prim&quot;&gt;Data.ByteString.Builder.Prim&lt;/a&gt; for further information on how to improve the performance of &lt;code&gt;renderString&lt;/code&gt;.</source>
          <target state="translated">Note that the ASCII encoding is a subset of the UTF-8 encoding, which is why we can use the optimized function &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; to encode an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; as a decimal number with UTF-8 encoded digits. Using &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#v:intDec&quot;&gt;intDec&lt;/a&gt;&lt;/code&gt; is more efficient than &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#v:stringUtf8&quot;&gt;stringUtf8&lt;/a&gt; . &lt;a href=&quot;../base-4.14.1.0/text-show#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; , as it avoids constructing an intermediate &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; . Avoiding this intermediate data structure significantly improves performance because encoding &lt;code&gt;Cell&lt;/code&gt; s is the core operation for rendering CSV-tables. See &lt;a href=&quot;data-bytestring-builder-prim&quot;&gt;Data.ByteString.Builder.Prim&lt;/a&gt; for further information on how to improve the performance of &lt;code&gt;renderString&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="72f06bfc55bfbd403475823742e13e429c0ca2e0" translate="yes" xml:space="preserve">
          <source>Note that the RTS will not set CPU affinity for bound threads and threads entering Haskell from C/C++, so if your program uses bound threads you should ensure that each bound thread calls the RTS API &lt;code&gt;rts_setInCallCapability(c,1)&lt;/code&gt; from C/C++ before calling into Haskell. Otherwise there could be a mismatch between the CPU that the thread is running on and the memory it is using while running Haskell code, which will negate any benefits of &lt;code&gt;--numa&lt;/code&gt;.</source>
          <target state="translated">RTSはバインドされたスレッドとC / C ++からHaskellに入るスレッドのCPUアフィニティを設定しないことに注意してください。プログラムがバインドされたスレッドを使用する場合、各バインドされたスレッドがC / C ++からRTS API &lt;code&gt;rts_setInCallCapability(c,1)&lt;/code&gt; を呼び出すことを確認してください。Haskellを呼び出します。そうしないと、スレッドが実行されているCPUとHaskellコードの実行中にスレッドが使用しているメモリの間に不一致が生じる可能性があり、-- &lt;code&gt;--numa&lt;/code&gt; 利点がすべてなくなります。</target>
        </trans-unit>
        <trans-unit id="33e79ebf6a7ee502ff6ae1da2ae2588427c0bcf7" translate="yes" xml:space="preserve">
          <source>Note that the ability to catch an exception does &lt;em&gt;not&lt;/em&gt; guarantee that we can deal with all possible exit points from a computation. Some monads, such as continuation-based stacks, allow for more than just a success/failure strategy, and therefore &lt;code&gt;catch&lt;/code&gt;&lt;em&gt;cannot&lt;/em&gt; be used by those monads to properly implement a function such as &lt;code&gt;finally&lt;/code&gt;. For more information, see &lt;code&gt;&lt;a href=&quot;control-monad-catch#t:MonadMask&quot;&gt;MonadMask&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">例外をキャッチする機能は、計算からのすべての可能な出口点を処理できることを保証するものでは&lt;em&gt;ない&lt;/em&gt;ことに注意してください。継続ベースのスタックなどの一部のモナドでは、成功/失敗の戦略以上のものが許可されているため、これらのモナドで &lt;code&gt;catch&lt;/code&gt; &lt;em&gt;を&lt;/em&gt;使用して、 &lt;code&gt;finally&lt;/code&gt; などの関数を適切に実装する&lt;em&gt;ことはできません&lt;/em&gt;。詳細については、 &lt;code&gt;&lt;a href=&quot;control-monad-catch#t:MonadMask&quot;&gt;MonadMask&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="58d5dd0ddd0336b419dba13d539e292846c264a2" translate="yes" xml:space="preserve">
          <source>Note that the application of &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceM&quot;&gt;traceM&lt;/a&gt;&lt;/code&gt; is not an action in the &lt;code&gt;&lt;a href=&quot;control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; context, as &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceIO&quot;&gt;traceIO&lt;/a&gt;&lt;/code&gt; is in the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; type. While the fresh bindings in the following example will force the &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceM&quot;&gt;traceM&lt;/a&gt;&lt;/code&gt; expressions to be reduced every time the &lt;code&gt;do&lt;/code&gt;-block is executed, &lt;code&gt;traceM &quot;not crashed&quot;&lt;/code&gt; would only be reduced once, and the message would only be printed once. If your monad is in &lt;code&gt;&lt;a href=&quot;control-monad-io-class#v:MonadIO&quot;&gt;MonadIO&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;control-monad-io-class#v:liftIO&quot;&gt;liftIO&lt;/a&gt; . &lt;a href=&quot;debug-trace#v:traceIO&quot;&gt;traceIO&lt;/a&gt;&lt;/code&gt; may be a better option.</source>
          <target state="translated">アプリケーションことノート &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceM&quot;&gt;traceM&lt;/a&gt;&lt;/code&gt; がで動作ない &lt;code&gt;&lt;a href=&quot;control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; のように、コンテキスト &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceIO&quot;&gt;traceIO&lt;/a&gt;&lt;/code&gt; がである &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; のタイプ。次の例の新しいバインディングでは、 &lt;code&gt;do&lt;/code&gt; &lt;code&gt;traceM &quot;not crashed&quot;&lt;/code&gt; が実行されるたびに &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceM&quot;&gt;traceM&lt;/a&gt;&lt;/code&gt; 式が強制的に削減されますが、traceM &quot;not crashed&quot;は1回だけ削減され、メッセージは1回だけ出力されます。モナドが &lt;code&gt;&lt;a href=&quot;control-monad-io-class#v:MonadIO&quot;&gt;MonadIO&lt;/a&gt;&lt;/code&gt; にある場合、 &lt;code&gt;&lt;a href=&quot;control-monad-io-class#v:liftIO&quot;&gt;liftIO&lt;/a&gt; . &lt;a href=&quot;debug-trace#v:traceIO&quot;&gt;traceIO&lt;/a&gt;&lt;/code&gt; 。&lt;a href=&quot;debug-trace#v:traceIO&quot;&gt;traceIOの方&lt;/a&gt;が適している場合があります。</target>
        </trans-unit>
        <trans-unit id="84f82e7fb65a174913c30b1e72c6c8b2742829f2" translate="yes" xml:space="preserve">
          <source>Note that the bang has no effect at all in this case</source>
          <target state="translated">この場合、バングは全く効果がないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b4b32cd6cbf824718f0bdfb9b704b062cdf90b8a" translate="yes" xml:space="preserve">
          <source>Note that the current implementation does not return more than three submaps, but you should not depend on this behaviour because it can change in the future without notice.</source>
          <target state="translated">現在の実装では3つ以上のサブマップを返さないことに注意してくださいが、将来的には予告なく変更される可能性があるので、この挙動に依存すべきではありません。</target>
        </trans-unit>
        <trans-unit id="68d7fa1f654e15d8602e5a0f9e4ae840941c5c24" translate="yes" xml:space="preserve">
          <source>Note that the current implementation does not return more than three subsets, but you should not depend on this behaviour because it can change in the future without notice.</source>
          <target state="translated">現在の実装では3つ以上のサブセットを返さないことに注意してくださいが、将来的には予告なく変更される可能性があるので、この動作に依存すべきではありません。</target>
        </trans-unit>
        <trans-unit id="adfda92db68ba407dc5fdfba24f554547fcbb251" translate="yes" xml:space="preserve">
          <source>Note that the current implementation does not return more than two submaps, but you should not depend on this behaviour because it can change in the future without notice.</source>
          <target state="translated">現在の実装では2つ以上のサブマップを返さないことに注意してくださいが、将来的には予告なく変更される可能性があるので、この挙動に依存すべきではありません。</target>
        </trans-unit>
        <trans-unit id="a8b5ab808606c44886a770fd7971f5bf90a9f368" translate="yes" xml:space="preserve">
          <source>Note that the current implementation does not return more than two subsets, but you should not depend on this behaviour because it can change in the future without notice. Also, the current version does not continue splitting all the way to individual singleton sets -- it stops at some point.</source>
          <target state="translated">現在の実装では2つ以上のサブセットを返さないことに注意してくださいが、将来予告なしに変更される可能性があるので、この動作に依存すべきではありません。また、現在のバージョンでは、個々のシングルトン集合まで分割を続けることはありません --ある時点で停止します。</target>
        </trans-unit>
        <trans-unit id="086a1162aacfb2236087d8ed35712ce6942f14ad" translate="yes" xml:space="preserve">
          <source>Note that the datatype &lt;code&gt;G&lt;/code&gt; is used at different kinds in its body, and therefore that kind-indexed GADTs use a form of polymorphic recursion. It is thus only possible to use this feature if you have provided a complete user-supplied kind signature for the datatype (&lt;a href=&quot;#complete-kind-signatures&quot;&gt;Complete user-supplied kind signatures and polymorphic recursion&lt;/a&gt;).</source>
          <target state="translated">データ型 &lt;code&gt;G&lt;/code&gt; はその本体でさまざまな種類で使用されているため、その種類インデックスのGADTは多態的な再帰の形式を使用しています。したがって、この機能を使用できるのは、データ型に完全なユーザー指定の種類シグネチャを提供した場合のみです（&lt;a href=&quot;#complete-kind-signatures&quot;&gt;完全なユーザー指定の種類シグネチャとポリモーフィック再帰&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="442f6f35f8b2e112d5cfdda0a46fff2deeaa6cc5" translate="yes" xml:space="preserve">
          <source>Note that the following operator interactions are expected to hold:</source>
          <target state="translated">以下の演算子の相互作用が保持されると予想されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c120d45347ef3551abdd412d6c3c744d162a17b6" translate="yes" xml:space="preserve">
          <source>Note that the foreign function &lt;em&gt;must&lt;/em&gt; use the &lt;code&gt;ccall&lt;/code&gt; calling convention.</source>
          <target state="translated">外部関数は &lt;code&gt;ccall&lt;/code&gt; 呼び出し規約を使用する&lt;em&gt;必要がある&lt;/em&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="2b614124ab834b2d7b11895f2dcc340c5cee01ee" translate="yes" xml:space="preserve">
          <source>Note that the formatting for &lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; types is currently a bit different from that of C &lt;code&gt;printf(3)&lt;/code&gt;, conforming instead to &lt;code&gt;&lt;a href=&quot;numeric#v:showEFloat&quot;&gt;showEFloat&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;numeric#v:showFFloat&quot;&gt;showFFloat&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;numeric#v:showGFloat&quot;&gt;showGFloat&lt;/a&gt;&lt;/code&gt; (and their alternate versions &lt;code&gt;&lt;a href=&quot;numeric#v:showFFloatAlt&quot;&gt;showFFloatAlt&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;numeric#v:showGFloatAlt&quot;&gt;showGFloatAlt&lt;/a&gt;&lt;/code&gt;). This is hard to fix: the fixed versions would format in a backward-incompatible way. In any case the Haskell behavior is generally more sensible than the C behavior. A brief summary of some key differences:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; 型のフォーマットは現在、Cの &lt;code&gt;printf(3)&lt;/code&gt; のフォーマットとは少し異なり、代わりに &lt;code&gt;&lt;a href=&quot;numeric#v:showEFloat&quot;&gt;showEFloat&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;numeric#v:showFFloat&quot;&gt;showFFloat&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;numeric#v:showGFloat&quot;&gt;showGFloat&lt;/a&gt;&lt;/code&gt; （およびそれらの代替バージョン &lt;code&gt;&lt;a href=&quot;numeric#v:showFFloatAlt&quot;&gt;showFFloatAlt&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;numeric#v:showGFloatAlt&quot;&gt;showGFloatAlt&lt;/a&gt;&lt;/code&gt; ）に準拠しています。これを修正するのは困難です。修正されたバージョンは、下位互換性のない方法でフォーマットされます。いずれにせよ、Haskellの動作は一般にCの動作よりも賢明です。主な違いの概要：</target>
        </trans-unit>
        <trans-unit id="6333d0cd3c8a1c9277e720de89a814eceeaca59c" translate="yes" xml:space="preserve">
          <source>Note that the functions &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:eitherB&quot;&gt;eitherB&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#v:pairB&quot;&gt;pairB&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#v:contramapB&quot;&gt;contramapB&lt;/a&gt;&lt;/code&gt; (written below using &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:-62--36--60-&quot;&gt;&amp;gt;$&amp;lt;&lt;/a&gt;&lt;/code&gt;) suffice to construct &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;s for all non-recursive algebraic datatypes. For example,</source>
          <target state="translated">すべての非再帰代数データ型の &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; を構築するには、関数 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:eitherB&quot;&gt;eitherB&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#v:pairB&quot;&gt;pairB&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#v:contramapB&quot;&gt;contramapB&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:-62--36--60-&quot;&gt;&amp;gt;$&amp;lt;&lt;/a&gt;&lt;/code&gt; を使用して以下に記述）で十分であることに注意してください。例えば、</target>
        </trans-unit>
        <trans-unit id="e5834f94034f4c9c7099a4fe839728a49c4d2727" translate="yes" xml:space="preserve">
          <source>Note that the functions &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#v:eitherB&quot;&gt;eitherB&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#v:pairB&quot;&gt;pairB&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#v:contramapB&quot;&gt;contramapB&lt;/a&gt;&lt;/code&gt; (written below using &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#v:-62--36--60-&quot;&gt;&amp;gt;$&amp;lt;&lt;/a&gt;&lt;/code&gt;) suffice to construct &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;s for all non-recursive algebraic datatypes. For example,</source>
          <target state="translated">すべての非再帰代数データ型の &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; を構築するには、関数 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#v:eitherB&quot;&gt;eitherB&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#v:pairB&quot;&gt;pairB&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#v:contramapB&quot;&gt;contramapB&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#v:-62--36--60-&quot;&gt;&amp;gt;$&amp;lt;&lt;/a&gt;&lt;/code&gt; を使用して以下に記述）で十分であることに注意してください。例えば、</target>
        </trans-unit>
        <trans-unit id="8f8de4b46e9fc5311e12637212df5e73b817991a" translate="yes" xml:space="preserve">
          <source>Note that the graph colouring allocator is a bit experimental and may fail when faced with code with high register pressure &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/8657&quot;&gt;#8657&lt;/a&gt;.</source>
          <target state="translated">Note that the graph colouring allocator is a bit experimental and may fail when faced with code with high register pressure &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/8657&quot;&gt;#8657&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="45346d36f74c21a2830e97a59a45b659f59ada4b" translate="yes" xml:space="preserve">
          <source>Note that the graph colouring allocator is a bit experimental and may fail when faced with code with high register pressure &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/8657&quot;&gt;Issue #8657&lt;/a&gt;.</source>
          <target state="translated">グラフの色付けアロケータは少し実験的なものであり、レジスター圧力の高いコード&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/8657&quot;&gt;＃8657&lt;/a&gt;に直面すると失敗する可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="96e6fa4ccd6707887b270260302a346013c42cc4" translate="yes" xml:space="preserve">
          <source>Note that the implementation is &lt;em&gt;left-biased&lt;/em&gt; -- the elements of a first argument are always preferred to the second, for example in &lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">実装は&lt;em&gt;左バイアス&lt;/em&gt;されていることに注意してください。たとえば、 &lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt; の場合、最初の引数の要素は常に2番目の引数よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="26e0c734ac95701d148351fdd4b47d9138fb0c9b" translate="yes" xml:space="preserve">
          <source>Note that the implementation is generally &lt;em&gt;left-biased&lt;/em&gt;. Functions that take two maps as arguments and combine them, such as &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt;, prefer the values in the first argument to those in the second.</source>
          <target state="translated">通常、実装は&lt;em&gt;左バイアス&lt;/em&gt;です。2つのマップを引数として取り、それらを結合する関数（ &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; など）では、最初の引数の値が2番目の引数の値よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="259d0e9c405d160a835af61c7ce39b23637e93f5" translate="yes" xml:space="preserve">
          <source>Note that the implementation is generally &lt;em&gt;left-biased&lt;/em&gt;. Functions that take two maps as arguments and combine them, such as &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt;, prefer the values in the first argument to those in the second.</source>
          <target state="translated">通常、実装は&lt;em&gt;左バイアス&lt;/em&gt;です。2つのマップを引数として取り、それらを結合する関数（ &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; など）では、最初の引数の値が2番目の引数の値よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="70bb8bafe9d5794e15a6e0a9bc59a3fd519eaaca" translate="yes" xml:space="preserve">
          <source>Note that the implementation is generally &lt;em&gt;left-biased&lt;/em&gt;. Functions that take two maps as arguments and combine them, such as &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt;, prefer the values in the first argument to those in the second.</source>
          <target state="translated">通常、実装は&lt;em&gt;左バイアス&lt;/em&gt;です。2つのマップを引数として取り、それらを結合する関数（ &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; など）では、最初の引数の値が2番目の引数の値よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="f2ac01eed48e680198fa41a99d8fed147ac41510" translate="yes" xml:space="preserve">
          <source>Note that the implementation is generally &lt;em&gt;left-biased&lt;/em&gt;. Functions that take two maps as arguments and combine them, such as &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt;, prefer the values in the first argument to those in the second.</source>
          <target state="translated">通常、実装は&lt;em&gt;左バイアス&lt;/em&gt;です。2つのマップを引数として取り、それらを結合する関数（ &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; など）では、最初の引数の値が2番目の引数の値よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="38d11ff08ef387c96608bffa08a777dba57a2a33" translate="yes" xml:space="preserve">
          <source>Note that the implementation is generally &lt;em&gt;left-biased&lt;/em&gt;. Functions that take two maps as arguments and combine them, such as &lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-map-strict#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt;, prefer the values in the first argument to those in the second.</source>
          <target state="translated">通常、実装は&lt;em&gt;左バイアス&lt;/em&gt;です。2つのマップを引数として取り、それらを結合する関数（ &lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;data-map-strict#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; など）では、最初の引数の値が2番目の引数の値よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="cb352c04cf593932ccc7109649ee4df971ea1e0e" translate="yes" xml:space="preserve">
          <source>Note that the implementation is generally &lt;em&gt;left-biased&lt;/em&gt;. Functions that take two sets as arguments and combine them, such as &lt;code&gt;&lt;a href=&quot;data-set#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-set#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt;, prefer the entries in the first argument to those in the second. Of course, this bias can only be observed when equality is an equivalence relation instead of structural equality.</source>
          <target state="translated">通常、実装は&lt;em&gt;左バイアス&lt;/em&gt;です。2つのセットを引数として取り、それらを結合する関数（ &lt;code&gt;&lt;a href=&quot;data-set#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;data-set#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; など）では、最初の引数のエントリが2番目の引数のエントリよりも優先されます。もちろん、このバイアスは、等価性が構造的等価性ではなく等価関係である場合にのみ観察できます。</target>
        </trans-unit>
        <trans-unit id="42a24a4ea20d65f2df9e64aaf0077349c30737f9" translate="yes" xml:space="preserve">
          <source>Note that the kind of &lt;code&gt;a&lt;/code&gt; is specified in the kind of &lt;code&gt;C&lt;/code&gt; but inferred in the kind of &lt;code&gt;F&lt;/code&gt;.</source>
          <target state="translated">Note that the kind of &lt;code&gt;a&lt;/code&gt; is specified in the kind of &lt;code&gt;C&lt;/code&gt; but inferred in the kind of &lt;code&gt;F&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b863c9095848a793815119dcb80b73aa065664bb" translate="yes" xml:space="preserve">
          <source>Note that the line information in this section is not nearly as rich as the information provided in &lt;code&gt;.debug_info&lt;/code&gt;. Whereas &lt;code&gt;.debug_line&lt;/code&gt; requires that each instruction is assigned exactly one source location, the DIEs in &lt;code&gt;.debug_info&lt;/code&gt; can be used to identify all relevant sources locations.</source>
          <target state="translated">このセクションの行情報は、 &lt;code&gt;.debug_info&lt;/code&gt; で提供される情報ほど豊富ではないことに注意してください。一方 &lt;code&gt;.debug_line&lt;/code&gt; は各命令は、ちょうど1つのソース位置が割り当てられていることを必要とし、内ダイ &lt;code&gt;.debug_info&lt;/code&gt; は、関連するすべてのソースの位置を識別するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="cf810684fcb41725f6886705bdc64d801b1f9b52" translate="yes" xml:space="preserve">
          <source>Note that the local variables at each step in the history have been preserved, and can be examined as usual. Also note that the prompt has changed to indicate that we&amp;rsquo;re currently examining the first step in the history: &lt;code&gt;-1&lt;/code&gt;. The command &lt;a href=&quot;#ghci-cmd-:forward&quot;&gt;&lt;code&gt;:forward&lt;/code&gt;&lt;/a&gt; can be used to traverse forward in the history.</source>
          <target state="translated">履歴の各ステップのローカル変数は保持されており、通常どおりに調べることができます。また、プロンプトが変更され、現在、履歴の最初のステップ &lt;code&gt;-1&lt;/code&gt; を調べていることを示しています。コマンド&lt;a href=&quot;#ghci-cmd-:forward&quot;&gt; &lt;code&gt;:forward&lt;/code&gt; &lt;/a&gt;を使用して、履歴を順方向にたどることができます。</target>
        </trans-unit>
        <trans-unit id="34cdea8f3371da06ac1a345345c3c5002304f5fa" translate="yes" xml:space="preserve">
          <source>Note that the package might still end up being linked into the final program, if it is a dependency (direct or indirect) of another exposed package.</source>
          <target state="translated">他の公開されたパッケージの依存関係 (直接または間接)であれば、そのパッケージは最終的なプログラムにリンクされている可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="654350bad2f19f9da14ea79da18d4e92d82c3375" translate="yes" xml:space="preserve">
          <source>Note that the peek and poke functions might require properly aligned addresses to function correctly. This is architecture dependent; thus, portable code should ensure that when peeking or poking values of some type &lt;code&gt;a&lt;/code&gt;, the alignment constraint for &lt;code&gt;a&lt;/code&gt;, as given by the function &lt;code&gt;&lt;a href=&quot;foreign-storable#v:alignment&quot;&gt;alignment&lt;/a&gt;&lt;/code&gt; is fulfilled.</source>
          <target state="translated">ピーク関数とポーク関数が正しく機能するためには、正しく整列されたアドレスが必要になる場合があることに注意してください。これはアーキテクチャに依存します。したがって、移植可能なコードは、ある型 &lt;code&gt;a&lt;/code&gt; の値をピークまたはポークするときに、関数の &lt;code&gt;&lt;a href=&quot;foreign-storable#v:alignment&quot;&gt;alignment&lt;/a&gt;&lt;/code&gt; によって与えられる &lt;code&gt;a&lt;/code&gt; の配置制約が満たされるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="3e394d38fdeaac337578117a43906351c1d79b5f" translate="yes" xml:space="preserve">
          <source>Note that the peek and poke functions might require properly aligned addresses to function correctly. This is architecture dependent; thus, portable code should ensure that when peeking or poking values of some type &lt;code&gt;a&lt;/code&gt;, the alignment constraint for &lt;code&gt;a&lt;/code&gt;, as given by the function &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:alignment&quot;&gt;alignment&lt;/a&gt;&lt;/code&gt; is fulfilled.</source>
          <target state="translated">ピーク関数とポーク関数が正しく機能するためには、正しく整列されたアドレスが必要になる場合があることに注意してください。これはアーキテクチャに依存します。したがって、移植可能なコードは、ある型 &lt;code&gt;a&lt;/code&gt; の値をピークまたはポークするときに、関数の &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:alignment&quot;&gt;alignment&lt;/a&gt;&lt;/code&gt; によって与えられる &lt;code&gt;a&lt;/code&gt; の配置制約が満たされるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="e73723a6b46c23d5ed4a216d4c7a2b7c6b5806fa" translate="yes" xml:space="preserve">
          <source>Note that the precedence level is a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; so there is an unlimited number of levels. This module re-exports &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/pretty-1.1.3.6/Text-PrettyPrint.html#v:HughesPJ&quot;&gt;HughesPJ&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">優先レベルは &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; ため、無制限のレベルがあることに注意してください。このモジュールは &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/pretty-1.1.3.6/Text-PrettyPrint.html#v:HughesPJ&quot;&gt;HughesPJ&lt;/a&gt;&lt;/code&gt; を再エクスポートします。</target>
        </trans-unit>
        <trans-unit id="d82712c12c8cee5b77f4ba6fbc419e98e702525b" translate="yes" xml:space="preserve">
          <source>Note that the precedence level is a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; so there is an unlimited number of levels. This module re-exports &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:HughesPJ&quot;&gt;HughesPJ&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">優先レベルは &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; ため、無制限のレベルがあることに注意してください。このモジュールは &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:HughesPJ&quot;&gt;HughesPJ&lt;/a&gt;&lt;/code&gt; を再エクスポートします。</target>
        </trans-unit>
        <trans-unit id="22e279d3458c2e34319e6e20c6829368879e2a50" translate="yes" xml:space="preserve">
          <source>Note that the precedence level is a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; so there is an unlimited number of levels. This module re-exports &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/pretty-1.1.3.6/Text-PrettyPrint.html#v:HughesPJ&quot;&gt;HughesPJ&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Note that the precedence level is a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; so there is an unlimited number of levels. This module re-exports &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/pretty-1.1.3.6/Text-PrettyPrint.html#v:HughesPJ&quot;&gt;HughesPJ&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1166a95e8823cf3e0d0bc99a95c0278ded704bed" translate="yes" xml:space="preserve">
          <source>Note that the precedence level is a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; so there is an unlimited number of levels. This module re-exports &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:HughesPJ&quot;&gt;HughesPJ&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Note that the precedence level is a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; so there is an unlimited number of levels. This module re-exports &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:HughesPJ&quot;&gt;HughesPJ&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3f8de5a86d574b2ca399eee3e30f64be312fc9bc" translate="yes" xml:space="preserve">
          <source>Note that the rather verbose syntax for composition stems from the requirement to be able to compute the size / size bound at compile time.</source>
          <target state="translated">コンパイル時にサイズ/サイズ境界を計算できるようにするという要件に由来していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="54b1d4f1be10b0845077542d67e90448dc344e0a" translate="yes" xml:space="preserve">
          <source>Note that the second example has a &lt;code&gt;forall&lt;/code&gt; that binds both a kind &lt;code&gt;k&lt;/code&gt; and a type variable &lt;code&gt;a&lt;/code&gt; of kind &lt;code&gt;k&lt;/code&gt;. In general, there is no limit to how deeply nested this sort of dependency can work. However, the dependency must be well-scoped: &lt;code&gt;forall (a :: k) k. ...&lt;/code&gt; is an error.</source>
          <target state="translated">第二の例があることに注意 &lt;code&gt;forall&lt;/code&gt; 結合は一種の両方こと &lt;code&gt;k&lt;/code&gt; と型変数 &lt;code&gt;a&lt;/code&gt; 種類の &lt;code&gt;k&lt;/code&gt; 。一般に、この種の依存関係がどの程度深くネストできるかには制限がありません。ただし、依存関係は適切な範囲である必要があります： &lt;code&gt;forall (a :: k) k. ...&lt;/code&gt; はエラーです。</target>
        </trans-unit>
        <trans-unit id="1b1310d229e7aede634064e0ec7e66e799d19c89" translate="yes" xml:space="preserve">
          <source>Note that the second item only at the &lt;em&gt;head&lt;/em&gt; of the quantified constraint, not its context. Reason: the head is the new goal that has to be solved if we use the instance declaration.</source>
          <target state="translated">2番目の項目は、数量化された制約の&lt;em&gt;先頭&lt;/em&gt;ではなく、そのコンテキストではないことに注意してください。理由：頭は、インスタンス宣言を使用する場合に解決する必要がある新しい目標です。</target>
        </trans-unit>
        <trans-unit id="3c8c63d3b44c41dfd3ecc9855ec677afa1387569" translate="yes" xml:space="preserve">
          <source>Note that the strictness of &lt;code&gt;f&lt;/code&gt; differs from that of &lt;code&gt;g&lt;/code&gt; defined below:</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; の厳密性は、以下で定義される &lt;code&gt;g&lt;/code&gt; の厳密性とは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b0d67f48c00a6048890cd9462dc5217e24546eeb" translate="yes" xml:space="preserve">
          <source>Note that the suffix rules are all repeated twice, once for normal Haskell source files, and once for &lt;code&gt;hs-boot&lt;/code&gt; files (see &lt;a href=&quot;#mutual-recursion&quot;&gt;How to compile mutually recursive modules&lt;/a&gt;).</source>
          <target state="translated">サフィックスルールはすべて2回繰り返されることに注意してください。1回は通常のHaskellソースファイル用で、もう1回は &lt;code&gt;hs-boot&lt;/code&gt; ファイル用です（&lt;a href=&quot;#mutual-recursion&quot;&gt;相互再帰モジュールをコンパイルする方法を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="ca6ebf983fc1a2fd926f4a83f66b04b8d23d1437" translate="yes" xml:space="preserve">
          <source>Note that the unmask function passed to the child thread should only be used in that thread; the behaviour is undefined if it is invoked in a different thread.</source>
          <target state="translated">子スレッドに渡された unmask 関数は、そのスレッドでのみ使用されるべきであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c1c671757e9a3af40d5bdde86bfebfd0651c0310" translate="yes" xml:space="preserve">
          <source>Note that the use of &lt;code&gt;(&amp;lt;&amp;gt;)&lt;/code&gt; in this module conflicts with an operator with the same name that is being exported by &lt;a href=&quot;data-monoid&quot;&gt;Data.Monoid&lt;/a&gt;. However, this package re-exports (most of) the contents of Data.Monoid, so to use semigroups and monoids in the same package just</source>
          <target state="translated">このモジュールでの &lt;code&gt;(&amp;lt;&amp;gt;)&lt;/code&gt; の使用は、&lt;a href=&quot;data-monoid&quot;&gt;Data.Monoid&lt;/a&gt;によってエクスポートされている同じ名前の演算子と競合することに注意してください。ただし、このパッケージはData.Monoidのコンテンツ（の大部分）を再エクスポートするため、同じパッケージでセミグループとモノイドを使用するだけです。</target>
        </trans-unit>
        <trans-unit id="da3869327f08d21fab9f4a7548818e33dbc49531" translate="yes" xml:space="preserve">
          <source>Note that there is an orphan &lt;code&gt;Binary&lt;/code&gt; instance for this type supplied by the &lt;a href=&quot;ghc-languageextensions&quot;&gt;GHC.LanguageExtensions&lt;/a&gt; module provided by &lt;code&gt;ghc-boot&lt;/code&gt;. We can't provide here as this would require adding transitive dependencies to the &lt;code&gt;template-haskell&lt;/code&gt; package, which must have a minimal dependency set.</source>
          <target state="translated">&lt;code&gt;ghc-boot&lt;/code&gt; によって提供される&lt;a href=&quot;ghc-languageextensions&quot;&gt;GHC.LanguageExtensions&lt;/a&gt;モジュールによって提供されるこのタイプの孤立した &lt;code&gt;Binary&lt;/code&gt; インスタンスがあることに注意してください。最小限の依存関係セットが必要な &lt;code&gt;template-haskell&lt;/code&gt; パッケージに推移的な依存関係を追加する必要があるため、ここでは提供できません。</target>
        </trans-unit>
        <trans-unit id="25f165099a7186900fe29f29d734746be66f7ff0" translate="yes" xml:space="preserve">
          <source>Note that there is no support for using upper-case characters. Please contact the maintainer if your application cannot work without hexadecimal encodings that use upper-case characters.</source>
          <target state="translated">大文字の使用には対応していませんのでご注意ください。大文字を使用する16進数エンコーディングを使用しないとアプリケーションが動作しない場合は、メンテナに連絡してください。</target>
        </trans-unit>
        <trans-unit id="42fd927f1ef5d9b3a3e3d4ec201b36298d76dcdc" translate="yes" xml:space="preserve">
          <source>Note that there is no support for using upper-case characters. Please contact the maintainer, if your application cannot work without hexadecimal encodings that use upper-case characters.</source>
          <target state="translated">大文字の使用には対応していませんのでご注意ください。大文字を使用する16進数エンコーディングを使用しないとアプリケーションが動作しない場合は、メンテナに連絡してください。</target>
        </trans-unit>
        <trans-unit id="815e86136be57ff7983e8867a1653ca3748062a4" translate="yes" xml:space="preserve">
          <source>Note that this GHC release expects an LLVM version in the 7 release series.</source>
          <target state="translated">このGHCリリースは、7リリースシリーズのLLVM版を期待していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="054fc5bfe46fd252b25912f49de7b42d063bf60e" translate="yes" xml:space="preserve">
          <source>Note that this GHC release expects an LLVM version in the 9 release series.</source>
          <target state="translated">このGHCリリースは、9リリースシリーズのLLVM版を期待していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="140a5a874045474c447887a9c7534e65797715b8" translate="yes" xml:space="preserve">
          <source>Note that this change relies on an existing meta-rule to resolve ambiguities:</source>
          <target state="translated">この変更は、曖昧さを解決するために既存のメタルールに依存していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6daa68880e86cbbf8117c1ecf2aaa1d59b601a6d" translate="yes" xml:space="preserve">
          <source>Note that this compatibility condition is independent of whether the type family is associated or not, and it is not only a matter of consistency, but one of type safety.</source>
          <target state="translated">この互換性の条件は、型ファミリが関連付けられているかどうかに依存せず、整合性の問題だけでなく、型の安全性の問題でもあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6a49b31c7b3933e096f19de10387ce395bfc388b" translate="yes" xml:space="preserve">
          <source>Note that this feature is intended for debugging, and should not be relied on for the correct operation of your program. There is no guarantee that the garbage collector will be accurate enough to detect your deadlock, and no guarantee that the garbage collector will run in a timely enough manner. Basically, the same caveats as for finalizers apply to deadlock detection.</source>
          <target state="translated">この機能はデバッグを目的としたものであり、プログラムの正しい動作に依存すべきではないことに注意してください。ガベージコレクタがデッドロックを検出するのに十分に正確であるという保証はありませんし、 ガベージコレクタが十分にタイムリーに実行されるという保証もありません。基本的に、ファイナライザと同じ注意事項がデッドロックの検出にも適用されます。</target>
        </trans-unit>
        <trans-unit id="f93e105b95e71dad1e256717f21218ff603f0e60" translate="yes" xml:space="preserve">
          <source>Note that this function is &lt;em&gt;strict&lt;/em&gt; in the action. That is, &lt;code&gt;catchAny undefined b == _|_&lt;/code&gt;. See  for details.</source>
          <target state="translated">この関数はアクションで&lt;em&gt;厳密&lt;/em&gt;であることに注意してください。つまり、 &lt;code&gt;catchAny undefined b == _|_&lt;/code&gt; です。詳細については、を参照してください。</target>
        </trans-unit>
        <trans-unit id="4a3f1beae872eb8d0767738fe954a7102092701f" translate="yes" xml:space="preserve">
          <source>Note that this function is &lt;em&gt;strict&lt;/em&gt; in the action. That is, &lt;code&gt;catchException undefined b == _|_&lt;/code&gt;. See  for details.</source>
          <target state="translated">この関数はアクションで&lt;em&gt;厳密&lt;/em&gt;であることに注意してください。つまり、 &lt;code&gt;catchException undefined b == _|_&lt;/code&gt; です。詳細については、を参照してください。</target>
        </trans-unit>
        <trans-unit id="be14bcfbfa87beefee836b26fb76d5e01c5bceae" translate="yes" xml:space="preserve">
          <source>Note that this function should not be used to express dependencies between finalizers on &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;s. For example, if the finalizer for a &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;F1&lt;/code&gt; calls &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt; on a second &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;F2&lt;/code&gt;, then the only guarantee is that the finalizer for &lt;code&gt;F2&lt;/code&gt; is never started before the finalizer for &lt;code&gt;F1&lt;/code&gt;. They might be started together if for example both &lt;code&gt;F1&lt;/code&gt; and &lt;code&gt;F2&lt;/code&gt; are otherwise unreachable, and in that case the scheduler might end up running the finalizer for &lt;code&gt;F2&lt;/code&gt; first.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; のファイナライザ間の依存関係を表すために使用しないでください。たとえば、 &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;F1&lt;/code&gt; のファイナライザが2番目の &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;F2&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt; を呼び出す場合、唯一の保証は、 &lt;code&gt;F2&lt;/code&gt; のファイナライザが &lt;code&gt;F1&lt;/code&gt; のファイナライザの前に開始されないことです。たとえば、 &lt;code&gt;F1&lt;/code&gt; と &lt;code&gt;F2&lt;/code&gt; の両方が他の方法で到達できない場合、それらは一緒に開始される可能性があり、その場合、スケジューラは最終的に &lt;code&gt;F2&lt;/code&gt; のファイナライザを実行する可能性があります。</target>
        </trans-unit>
        <trans-unit id="4677b22a99bb8480062aaee7c99a3069c99501b0" translate="yes" xml:space="preserve">
          <source>Note that this function should not be used to express dependencies between finalizers on &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;s. For example, if the finalizer for a &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;F1&lt;/code&gt; calls &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt; on a second &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;F2&lt;/code&gt;, then the only guarantee is that the finalizer for &lt;code&gt;F2&lt;/code&gt; is never started before the finalizer for &lt;code&gt;F1&lt;/code&gt;. They might be started together if for example both &lt;code&gt;F1&lt;/code&gt; and &lt;code&gt;F2&lt;/code&gt; are otherwise unreachable, and in that case the scheduler might end up running the finalizer for &lt;code&gt;F2&lt;/code&gt; first.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; のファイナライザ間の依存関係を表すために使用しないでください。たとえば、 &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;F1&lt;/code&gt; のファイナライザが2番目の &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;F2&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt; を呼び出す場合、唯一の保証は、 &lt;code&gt;F2&lt;/code&gt; のファイナライザが &lt;code&gt;F1&lt;/code&gt; のファイナライザの前に開始されないことです。たとえば、 &lt;code&gt;F1&lt;/code&gt; と &lt;code&gt;F2&lt;/code&gt; の両方が他の方法で到達できない場合、それらは一緒に開始される可能性があり、その場合、スケジューラは最終的に &lt;code&gt;F2&lt;/code&gt; のファイナライザを実行する可能性があります。</target>
        </trans-unit>
        <trans-unit id="204ab198814021ed6627310d82463388c4393515" translate="yes" xml:space="preserve">
          <source>Note that this function should not be used to express dependencies between finalizers on &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;s. For example, if the finalizer for a &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;F1&lt;/code&gt; calls &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt; on a second &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;F2&lt;/code&gt;, then the only guarantee is that the finalizer for &lt;code&gt;F2&lt;/code&gt; is never started before the finalizer for &lt;code&gt;F1&lt;/code&gt;. They might be started together if for example both &lt;code&gt;F1&lt;/code&gt; and &lt;code&gt;F2&lt;/code&gt; are otherwise unreachable, and in that case the scheduler might end up running the finalizer for &lt;code&gt;F2&lt;/code&gt; first.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; のファイナライザ間の依存関係を表すために使用しないでください。たとえば、 &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;F1&lt;/code&gt; のファイナライザが2番目の &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;F2&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:touchForeignPtr&quot;&gt;touchForeignPtr&lt;/a&gt;&lt;/code&gt; を呼び出す場合、唯一の保証は、 &lt;code&gt;F2&lt;/code&gt; のファイナライザが &lt;code&gt;F1&lt;/code&gt; のファイナライザの前に開始されないことです。たとえば、 &lt;code&gt;F1&lt;/code&gt; と &lt;code&gt;F2&lt;/code&gt; の両方が他の方法で到達できない場合、それらは一緒に開始される可能性があり、その場合、スケジューラは最終的に &lt;code&gt;F2&lt;/code&gt; のファイナライザを実行する可能性があります。</target>
        </trans-unit>
        <trans-unit id="6e3ecf4648736200d9ff929266ddf8cefc397759" translate="yes" xml:space="preserve">
          <source>Note that this is a &quot;shallow&quot; test; the declarations returned merely have instance heads which unify with &lt;code&gt;nm tys&lt;/code&gt;, they need not actually be satisfiable.</source>
          <target state="translated">これは「浅い」テストであることに注意してください。返された宣言は &lt;code&gt;nm tys&lt;/code&gt; と統合するインスタンスヘッドを持っているだけで、実際に満足できる必要はありません。</target>
        </trans-unit>
        <trans-unit id="439905505d9474fed9ffc65381b6ac6111a52311" translate="yes" xml:space="preserve">
          <source>Note that this is a change of behaviour for consistency with &lt;code&gt;&lt;a href=&quot;data-map#v:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; &amp;ndash; versions prior to 0.5 threw an error if the &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; was already empty.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;data-map#v:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; との一貫性のための動作の変更であることに注意してください &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; が既に空の場合、0.5より前のバージョンではエラーがスローされました。</target>
        </trans-unit>
        <trans-unit id="a0ff55b445dc3b8027838fa247f8b759ea676ef6" translate="yes" xml:space="preserve">
          <source>Note that this is a change of behaviour for consistency with &lt;code&gt;&lt;a href=&quot;data-map#v:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; &amp;ndash; versions prior to 0.5 threw an error if the &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; was already empty.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;data-map#v:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; との一貫性のための動作の変更であることに注意してください &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; が既に空の場合、0.5より前のバージョンではエラーがスローされました。</target>
        </trans-unit>
        <trans-unit id="159781685c28a0f652ef7a2657affedee9b597c8" translate="yes" xml:space="preserve">
          <source>Note that this is a change of behaviour for consistency with &lt;code&gt;&lt;a href=&quot;data-map#v:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; &amp;ndash; versions prior to 0.5 threw an error if the &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; was already empty.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;data-map#v:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; との一貫性のための動作の変更であることに注意してください &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; が既に空の場合、0.5より前のバージョンではエラーがスローされました。</target>
        </trans-unit>
        <trans-unit id="ade4eadc51bb90be35da5528bf329479e583e59a" translate="yes" xml:space="preserve">
          <source>Note that this is a change of behaviour for consistency with &lt;code&gt;&lt;a href=&quot;data-set#v:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; &amp;ndash; versions prior to 0.5 threw an error if the &lt;code&gt;&lt;a href=&quot;data-intset#t:IntSet&quot;&gt;IntSet&lt;/a&gt;&lt;/code&gt; was already empty.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;data-set#v:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; との一貫性のための動作の変更であることに注意してください &lt;code&gt;&lt;a href=&quot;data-intset#t:IntSet&quot;&gt;IntSet&lt;/a&gt;&lt;/code&gt; がすでに空の場合、0.5より前のバージョンではエラーがスローされました。</target>
        </trans-unit>
        <trans-unit id="191887df22eeccf7c1081143dfdd938d7b2699e9" translate="yes" xml:space="preserve">
          <source>Note that this is a change of behaviour for consistency with &lt;code&gt;&lt;a href=&quot;data-set#v:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; &amp;ndash; versions prior to 0.5 threw an error if the &lt;code&gt;&lt;a href=&quot;data-intset-internal#t:IntSet&quot;&gt;IntSet&lt;/a&gt;&lt;/code&gt; was already empty.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;data-set#v:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; との一貫性のための動作の変更であることに注意してください &lt;code&gt;&lt;a href=&quot;data-intset-internal#t:IntSet&quot;&gt;IntSet&lt;/a&gt;&lt;/code&gt; がすでに空の場合、0.5より前のバージョンではエラーがスローされました。</target>
        </trans-unit>
        <trans-unit id="b569264b0537b82b52a587dd6185d1e70e6667fe" translate="yes" xml:space="preserve">
          <source>Note that this is an &lt;em&gt;expensive&lt;/em&gt; operation that forces the whole lazy ByteString into memory and then copies all the data. If possible, try to avoid converting back and forth between strict and lazy bytestrings.</source>
          <target state="translated">これは&lt;em&gt;コストのかかる&lt;/em&gt;操作であり、遅延したByteString全体を強制的にメモリに格納してから、すべてのデータをコピーすることに注意してください。可能であれば、厳密なバイト文字列と遅延バイト文字列の間で相互に変換しないようにしてください。</target>
        </trans-unit>
        <trans-unit id="94e1d743d6549fd6c8f8a3e5156f86de80dc015d" translate="yes" xml:space="preserve">
          <source>Note that this is essentially a type-specialized version of &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:generalBracket&quot;&gt;generalBracket&lt;/a&gt;&lt;/code&gt;. This function has a more common signature (matching the signature from &lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;), and is often more convenient to use. By contrast, &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:generalBracket&quot;&gt;generalBracket&lt;/a&gt;&lt;/code&gt; is more expressive, allowing us to implement other functions like &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:bracketOnError&quot;&gt;bracketOnError&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは基本的に、 &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:generalBracket&quot;&gt;generalBracket&lt;/a&gt;&lt;/code&gt; のタイプに特化したバージョンであることに注意してください。この関数には、より一般的な署名（&lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;からの署名と一致する）があり、多くの場合、より便利に使用できます。対照的に、 &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:generalBracket&quot;&gt;generalBracket&lt;/a&gt;&lt;/code&gt; はより表現力があり、 &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:bracketOnError&quot;&gt;bracketOnError&lt;/a&gt;&lt;/code&gt; のような他の関数を実装できます。</target>
        </trans-unit>
        <trans-unit id="b6aebbc89aa137801ec2b9b8db93a16d46e98c00" translate="yes" xml:space="preserve">
          <source>Note that this is not the same thing as a grapheme (e.g. a composition of code points that form one visual symbol). For instance, consider the grapheme &quot;&amp;auml;&quot;. This symbol has two Unicode representations: a single code-point representation &lt;code&gt;U+00E4&lt;/code&gt; (the &lt;code&gt;LATIN SMALL LETTER A WITH DIAERESIS&lt;/code&gt; code point), and a two code point representation &lt;code&gt;U+0061&lt;/code&gt; (the &quot;&lt;code&gt;A&lt;/code&gt;&quot; code point) and &lt;code&gt;U+0308&lt;/code&gt; (the &lt;code&gt;COMBINING DIAERESIS&lt;/code&gt; code point).</source>
          <target state="translated">これは書記素と同じではないことに注意してください（たとえば、1つの視覚的シンボルを形成するコードポイントの構成）。たとえば、書記素「&amp;auml;」を考えてみましょう。このシンボルには2つのUnicode表現があります。単一のコードポイント表現 &lt;code&gt;U+00E4&lt;/code&gt; （ &lt;code&gt;LATIN SMALL LETTER A WITH DIAERESIS&lt;/code&gt; 符号付き）、および2つのコードポイント表現 &lt;code&gt;U+0061&lt;/code&gt; （「 &lt;code&gt;A&lt;/code&gt; 」コードポイント）と &lt;code&gt;U+0308&lt;/code&gt; （ &lt;code&gt;COMBINING DIAERESIS&lt;/code&gt; コードポイント）。</target>
        </trans-unit>
        <trans-unit id="f1fb7a0e32b7e5f879759dbeacfe592b9604fb63" translate="yes" xml:space="preserve">
          <source>Note that this is only a specification, not necessarily the concrete implementation of the function.</source>
          <target state="translated">これはあくまでも仕様であり、必ずしも関数の具体的な実装ではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="669d9533b1634ff933892e992fae9bef3085f70e" translate="yes" xml:space="preserve">
          <source>Note that this is unsafe as it allows you to construct ill-kinded types.</source>
          <target state="translated">気の弱い型を作ることができるので、これは安全ではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="d02571c77536bd22aa42f3d92c1dd568dc209d06" translate="yes" xml:space="preserve">
          <source>Note that this kind of backtracking parser is very inefficient; reading a large structure may be quite slow (cf &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#t:ReadP&quot;&gt;ReadP&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">この種のバックトラッキングパーサーは非常に非効率的です。大きな構造の読み取りは非常に遅い場合があります（ &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#t:ReadP&quot;&gt;ReadP&lt;/a&gt;&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="436febebad9716edb3813b0bdb233588fd016eb7" translate="yes" xml:space="preserve">
          <source>Note that this option also has an effect on code generation (see above).</source>
          <target state="translated">このオプションはコード生成にも影響することに注意してください(上記参照)。</target>
        </trans-unit>
        <trans-unit id="a6b15405a93ed10e85a7b3a620cdf673c82ced0d" translate="yes" xml:space="preserve">
          <source>Note that this policy has changed slightly in GHC 7.4.1 relative to earlier versions, and may yet change further, feedback is welcome.</source>
          <target state="translated">このポリシーは、GHC 7.4.1で以前のバージョンと比較して若干変更されており、さらに変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="b69c87ebe8336d7ccf7274b115a1b224456d8a37" translate="yes" xml:space="preserve">
          <source>Note that this warning will not throw errors if used with &lt;a href=&quot;#ghc-flag--Werror&quot;&gt;&lt;code&gt;-Werror&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この警告が&lt;a href=&quot;#ghc-flag--Werror&quot;&gt; &lt;code&gt;-Werror&lt;/code&gt; &lt;/a&gt;と共に使用された場合、エラーをスローしないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="371339dae687a1a51a3fb07f036275ab96d4f0aa" translate="yes" xml:space="preserve">
          <source>Note that this warning will not throw errors if used with &lt;a href=&quot;#ghc-flag--Wwarn&quot;&gt;&lt;code&gt;-Werror&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Note that this warning will not throw errors if used with &lt;a href=&quot;#ghc-flag--Wwarn&quot;&gt; &lt;code&gt;-Werror&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="690fcd2d09231ef4b1eb51f1d47ac594a9ff2305" translate="yes" xml:space="preserve">
          <source>Note that this will also match a function type,</source>
          <target state="translated">これは関数型にもマッチすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="38577a39855d6c49037bc139ad505bfea55af18e" translate="yes" xml:space="preserve">
          <source>Note that to avoid wasting space, this value should typically be less than 10% of the size of a stack chunk (&lt;a href=&quot;#rts-flag--kc%20%E2%9F%A8size%E2%9F%A9&quot;&gt;&lt;code&gt;-kc ⟨size⟩&lt;/code&gt;&lt;/a&gt;), because in a chain of stack chunks, each chunk will have a gap of unused space of this size.</source>
          <target state="translated">スペースの浪費を避けるために、この値は通常、スタックチャンクのサイズの10％未満である必要があります（&lt;a href=&quot;#rts-flag--kc%20%E2%9F%A8size%E2%9F%A9&quot;&gt; &lt;code&gt;-kc ⟨size⟩&lt;/code&gt; &lt;/a&gt;）。これは、スタックチャンクのチェーンでは、各チャンクにこの未使用のスペースのギャップがあるためです。サイズ。</target>
        </trans-unit>
        <trans-unit id="50c38f07d65fbe728d13e67127cf7478adb9040c" translate="yes" xml:space="preserve">
          <source>Note that to change some, but not all permissions, a construct on the following lines must be used.</source>
          <target state="translated">一部のパーミッションを変更するには、以下の行のコンストラクタを使用しなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="948767acfa623815c2e53deacab04e0b2b72ef49" translate="yes" xml:space="preserve">
          <source>Note that to produce the outermost application of the operator the entire input list must be traversed. This means that &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; will diverge if given an infinite list.</source>
          <target state="translated">オペレーターの最も外側のアプリケーションを生成するには、入力リスト全体をトラバースする必要があることに注意してください。これは、無限リストを指定した場合、 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; が発散することを意味します。</target>
        </trans-unit>
        <trans-unit id="1c06bd2a9205927068bd825ef9aa825d38908e90" translate="yes" xml:space="preserve">
          <source>Note that to produce the outermost application of the operator the entire input list must be traversed. This means that &lt;code&gt;&lt;a href=&quot;data-list#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; will diverge if given an infinite list.</source>
          <target state="translated">オペレーターの最も外側のアプリケーションを生成するには、入力リスト全体をトラバースする必要があることに注意してください。これは、無限リストを指定した場合、 &lt;code&gt;&lt;a href=&quot;data-list#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; が発散することを意味します。</target>
        </trans-unit>
        <trans-unit id="639bcb4a8a84771a9594ddef615c26a4482fa193" translate="yes" xml:space="preserve">
          <source>Note that using this option when linking causes GHC to link against shared libraries.</source>
          <target state="translated">リンク時にこのオプションを使用すると、GHCは共有ライブラリに対してリンクすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="15c08fdbeb90f2cad5ab816623c21e3981596c4c" translate="yes" xml:space="preserve">
          <source>Note that variables not used later in the composition are projected out. After simplification using rewrite rules (see &lt;a href=&quot;#rewrite-rules&quot;&gt;Rewrite rules&lt;/a&gt;) defined in the &lt;a href=&quot;../libraries/base-4.13.0.0/control-arrow&quot;&gt;Control.Arrow&lt;/a&gt; module, this reduces to</source>
          <target state="translated">コンポジションで後で使用されない変数は予測されることに注意してください。&lt;a href=&quot;../libraries/base-4.13.0.0/control-arrow&quot;&gt;Control.Arrow&lt;/a&gt;モジュールで定義された書き換えルール（「&lt;a href=&quot;#rewrite-rules&quot;&gt;書き換えルール&lt;/a&gt;」を参照）を使用して簡略化すると、これは次のようになります。</target>
        </trans-unit>
        <trans-unit id="d081dca768500d8bfebb68333b03740fb45995ab" translate="yes" xml:space="preserve">
          <source>Note that variables not used later in the composition are projected out. After simplification using rewrite rules (see &lt;a href=&quot;#rewrite-rules&quot;&gt;Rewrite rules&lt;/a&gt;) defined in the &lt;a href=&quot;../libraries/base-4.14.1.0/control-arrow&quot;&gt;Control.Arrow&lt;/a&gt; module, this reduces to</source>
          <target state="translated">Note that variables not used later in the composition are projected out. After simplification using rewrite rules (see &lt;a href=&quot;#rewrite-rules&quot;&gt;Rewrite rules&lt;/a&gt;) defined in the &lt;a href=&quot;../libraries/base-4.14.1.0/control-arrow&quot;&gt;Control.Arrow&lt;/a&gt; module, this reduces to</target>
        </trans-unit>
        <trans-unit id="e5449f9493cc87f80694124b3b78a072657bfaa5" translate="yes" xml:space="preserve">
          <source>Note that we do promote existential data constructors that are otherwise suitable. For example, consider the following:</source>
          <target state="translated">そうでなければ適切な実存データのコンストラクタを推奨していることに注意してください。例えば、次のように考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="314ff3aa2a3753338a78c5d3b1a3ae5cc49a2871" translate="yes" xml:space="preserve">
          <source>Note that we have to give a type signature to &lt;code&gt;e&lt;/code&gt;, or the program will not typecheck as the type is ambiguous. While it is possible to catch exceptions of any type, see the section &quot;Catching all exceptions&quot; (in &lt;a href=&quot;../base-4.13.0.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;) for an explanation of the problems with doing so.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; に型シグネチャを与える必要があることに注意してください。そうしないと、型があいまいなのでプログラムは型チェックを行いません。任意のタイプの例外をキャッチすることは可能ですが、それを行う際の問題の説明については、「&lt;a href=&quot;../base-4.13.0.0/control-exception&quot;&gt;Control.Exceptionの&lt;/a&gt;」セクション「すべての例外のキャッチ」を参照してください。</target>
        </trans-unit>
        <trans-unit id="7e4fcbcc185ba6453250d12b73264bd5a24e8c57" translate="yes" xml:space="preserve">
          <source>Note that we have to give a type signature to &lt;code&gt;e&lt;/code&gt;, or the program will not typecheck as the type is ambiguous. While it is possible to catch exceptions of any type, see the section &quot;Catching all exceptions&quot; (in &lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;) for an explanation of the problems with doing so.</source>
          <target state="translated">Note that we have to give a type signature to &lt;code&gt;e&lt;/code&gt; , or the program will not typecheck as the type is ambiguous. While it is possible to catch exceptions of any type, see the section &quot;Catching all exceptions&quot; (in &lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;) for an explanation of the problems with doing so.</target>
        </trans-unit>
        <trans-unit id="6902ece8b4b4299511f807fb9055377eab6a78df" translate="yes" xml:space="preserve">
          <source>Note that we have to give a type signature to &lt;code&gt;e&lt;/code&gt;, or the program will not typecheck as the type is ambiguous. While it is possible to catch exceptions of any type, see the section &quot;Catching all exceptions&quot; (in &lt;a href=&quot;control-exception&quot;&gt;Control.Exception&lt;/a&gt;) for an explanation of the problems with doing so.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; に型シグネチャを与える必要があることに注意してください。そうしないと、型があいまいなのでプログラムは型チェックを行いません。任意のタイプの例外をキャッチすることは可能ですが、それを行う際の問題の説明については、「&lt;a href=&quot;control-exception&quot;&gt;Control.Exceptionの&lt;/a&gt;」セクション「すべての例外のキャッチ」を参照してください。</target>
        </trans-unit>
        <trans-unit id="76ca0561afaae4f1d2c8c729d8d1d3d8826d06c9" translate="yes" xml:space="preserve">
          <source>Note that we have used the &lt;code&gt;the&lt;/code&gt; function to change the type of x from a list to its original numeric type. The variable y, in contrast, is left unchanged from the list form introduced by the grouping.</source>
          <target state="translated">&lt;code&gt;the&lt;/code&gt; 関数を使用して、 xのタイプをリストから元の数値タイプに変更したことに注意してください。対照的に、変数yは、グループ化によって導入されたリスト形式から変更されません。</target>
        </trans-unit>
        <trans-unit id="09f377418ad5f99dc0f5a64da80f0713a40b3490" translate="yes" xml:space="preserve">
          <source>Note that we only look at the &lt;em&gt;outermost&lt;/em&gt; kind signature to decide which variables to quantify implicitly. As a counter-example, consider &lt;code&gt;M1&lt;/code&gt;:</source>
          <target state="translated">Note that we only look at the &lt;em&gt;outermost&lt;/em&gt; kind signature to decide which variables to quantify implicitly. As a counter-example, consider &lt;code&gt;M1&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="fd74d100bc4c918985dc8c45e18282ca70173e38" translate="yes" xml:space="preserve">
          <source>Note that we use &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkFinally&quot;&gt;forkFinally&lt;/a&gt;&lt;/code&gt; to make sure that the &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is written to even if the thread dies or is killed for some reason.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkFinally&quot;&gt;forkFinally&lt;/a&gt;&lt;/code&gt; を使用して、何らかの理由でスレッドが &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; れた場合でも、MVarが確実に書き込まれることに注意してください。</target>
        </trans-unit>
        <trans-unit id="195b4f7b39fa15cf5686437b038f8e2c25374532" translate="yes" xml:space="preserve">
          <source>Note that we use &lt;code&gt;pseq&lt;/code&gt; rather than &lt;code&gt;seq&lt;/code&gt;. The two are almost equivalent, but differ in their runtime behaviour in a subtle way: &lt;code&gt;seq&lt;/code&gt; can evaluate its arguments in either order, but &lt;code&gt;pseq&lt;/code&gt; is required to evaluate its first argument before its second, which makes it more suitable for controlling the evaluation order in conjunction with &lt;code&gt;par&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;seq&lt;/code&gt; ではなく &lt;code&gt;pseq&lt;/code&gt; を使用していることに注意してください。2はほぼ同等ですが、微妙な方法で彼らの実行時の動作が異なります。 &lt;code&gt;seq&lt;/code&gt; はどちらかのために、その引数を評価することができますが、 &lt;code&gt;pseq&lt;/code&gt; で評価順序を制御することがより適切にするその第二の前に、最初の引数を評価するために必要とされます &lt;code&gt;par&lt;/code&gt; と組み合わせて。</target>
        </trans-unit>
        <trans-unit id="a24e29de02329dd8b134e0305ad760b6bb59db9d" translate="yes" xml:space="preserve">
          <source>Note that when unboxed tuples are enabled, &lt;code&gt;(#&lt;/code&gt; is a single lexeme, so for example when using operators like &lt;code&gt;#&lt;/code&gt; and &lt;code&gt;#-&lt;/code&gt; you need to write &lt;code&gt;( # )&lt;/code&gt; and &lt;code&gt;( #- )&lt;/code&gt; rather than &lt;code&gt;(#)&lt;/code&gt; and &lt;code&gt;(#-)&lt;/code&gt;.</source>
          <target state="translated">注際箱なしタプルは、有効になっていること &lt;code&gt;(#&lt;/code&gt; はのような演算子を使用している場合、たとえばので、一つの語彙素で &lt;code&gt;#&lt;/code&gt; と &lt;code&gt;#-&lt;/code&gt; あなたが書く必要があり &lt;code&gt;( # )&lt;/code&gt; と &lt;code&gt;( #- )&lt;/code&gt; ではなく &lt;code&gt;(#)&lt;/code&gt; と &lt;code&gt;(#-)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="96155a3a07c05ad3d25b4166aba72ebd8c6ede42" translate="yes" xml:space="preserve">
          <source>Note that when using GHC's SMP runtime, it is possible (but rare) to get duplicate events emitted if two CPUs simultaneously evaluate the same thunk that uses &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEvent&quot;&gt;traceEvent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">GHCのSMPランタイムを使用する場合、2つのCPUが &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEvent&quot;&gt;traceEvent&lt;/a&gt;&lt;/code&gt; を使用する同じサンクを同時に評価すると、重複イベントが発生する可能性があります（まれです）。</target>
        </trans-unit>
        <trans-unit id="97cde920f55fa2c8be2a7fd409625538b54c2e49" translate="yes" xml:space="preserve">
          <source>Note that when using GHC's SMP runtime, it is possible (but rare) to get duplicate events emitted if two CPUs simultaneously evaluate the same thunk that uses &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceMarker&quot;&gt;traceMarker&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">GHCのSMPランタイムを使用する場合、2つのCPUが &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceMarker&quot;&gt;traceMarker&lt;/a&gt;&lt;/code&gt; を使用する同じサンクを同時に評価すると、重複したイベントが発生する可能性があります（まれです）。</target>
        </trans-unit>
        <trans-unit id="975f537ecdcf165602ed63ca3707c22b645f30bf" translate="yes" xml:space="preserve">
          <source>Note that you can also use these functions for the ISO/IEC 8859-1 and UTF-8 encodings, as the ASCII encoding is equivalent on the codepoints 0-127.</source>
          <target state="translated">これらの関数は、ISO/IEC 8859-1 および UTF-8 エンコーディングにも使用できることに注意してください。ASCII エンコーディングはコードポイント 0-127 と同等であるためです。</target>
        </trans-unit>
        <trans-unit id="988a10d31fdf9259d05bf72a071142f1a3add4ac" translate="yes" xml:space="preserve">
          <source>Note that you do &lt;em&gt;not&lt;/em&gt; need &lt;code&gt;-threaded&lt;/code&gt; in order to use concurrency; the single-threaded runtime supports concurrency between Haskell threads just fine.</source>
          <target state="translated">並行性を使用するために &lt;code&gt;-threaded&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;必要&lt;em&gt;ない&lt;/em&gt;ことに注意してください。シングルスレッドランタイムは、Haskellスレッド間の並行性を適切にサポートします。</target>
        </trans-unit>
        <trans-unit id="e343daabdfa1eb15ae112b3e958a780cd1f3cc0a" translate="yes" xml:space="preserve">
          <source>Note that your command shell does not get to the source file options, they are just included literally in the array of command-line arguments the compiler maintains internally, so you&amp;rsquo;ll be desperately disappointed if you try to glob etc. inside &lt;code&gt;OPTIONS_GHC&lt;/code&gt;.</source>
          <target state="translated">コマンドシェルはソースファイルオプションを取得しないことに注意してください。これらは、コンパイラーが内部で維持するコマンドライン引数の配列に文字どおり含まれているだけなので、 &lt;code&gt;OPTIONS_GHC&lt;/code&gt; 内でglobなどをしようとすると、がっかりします。</target>
        </trans-unit>
        <trans-unit id="95fcdb5b17d3eb800495015f3365bb861935deea" translate="yes" xml:space="preserve">
          <source>Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; can produce a terminating expression from an infinite list.</source>
          <target state="translated">結果の式の先頭は、リストの最初の要素への演算子の適用によって生成されるため、 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; は無限リストから終了式を生成できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e5d3c4a356999277e59f3b00c955748086b00edd" translate="yes" xml:space="preserve">
          <source>Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &lt;code&gt;&lt;a href=&quot;data-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; can produce a terminating expression from an infinite list.</source>
          <target state="translated">結果の式の先頭は、リストの最初の要素への演算子の適用によって生成されるため、 &lt;code&gt;&lt;a href=&quot;data-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; は無限リストから終了式を生成できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5f4a6ca2c168bc2286ac44e91edbb190b8b9b499" translate="yes" xml:space="preserve">
          <source>Note that, since the head of the resulting expression is produced by an application of the operator to the first element of the list, &lt;code&gt;&lt;a href=&quot;prelude#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; can produce a terminating expression from an infinite list.</source>
          <target state="translated">結果の式の先頭は、リストの最初の要素への演算子の適用によって生成されるため、 &lt;code&gt;&lt;a href=&quot;prelude#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; は無限リストから終了式を生成できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="285f98e8d01e4962eff6724b78a3c6724d0931e6" translate="yes" xml:space="preserve">
          <source>Note that:</source>
          <target state="translated">そのことに注意してください。</target>
        </trans-unit>
        <trans-unit id="62ef7150065e1034031843436cbbc944bc66ec36" translate="yes" xml:space="preserve">
          <source>Note that: &lt;code&gt;bitDefault i = 1 &lt;a href=&quot;data-bits#v:shiftL&quot;&gt;shiftL&lt;/a&gt; i&lt;/code&gt;</source>
          <target state="translated">注意： &lt;code&gt;bitDefault i = 1 &lt;a href=&quot;data-bits#v:shiftL&quot;&gt;shiftL&lt;/a&gt; i&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="714e1b5dc8ebf117db4aacd3e2ff65c6f7e92a87" translate="yes" xml:space="preserve">
          <source>Note that: &lt;code&gt;testBitDefault x i = (x .&amp;amp;. bit i) /= 0&lt;/code&gt;</source>
          <target state="translated">注： &lt;code&gt;testBitDefault x i = (x .&amp;amp;. bit i) /= 0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b868e5fb2332b1924118dd162a57200ec6c0d6b" translate="yes" xml:space="preserve">
          <source>Note the &lt;a href=&quot;phases#ghc-flag--dynamic&quot;&gt;&lt;code&gt;-dynamic&lt;/code&gt;&lt;/a&gt; flag to GHC: GHCi uses dynamically-linked object code (if you are on a platform that supports it), and so in order to use compiled code with GHCi it must be compiled for dynamic linking.</source>
          <target state="translated">GHCへの&lt;a href=&quot;phases#ghc-flag--dynamic&quot;&gt; &lt;code&gt;-dynamic&lt;/code&gt; &lt;/a&gt;フラグに注意してください：GHCiは動的にリンクされたオブジェクトコードを使用します（サポートしているプラ​​ットフォームを使用している場合）。したがって、GHCiでコンパイルされたコードを使用するには、動的リンク用にコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="96629ff534cfde4f9bfe8c44a0cfcf544a2f9737" translate="yes" xml:space="preserve">
          <source>Note the &lt;code&gt;Applicative&lt;/code&gt; constraint.</source>
          <target state="translated">&lt;code&gt;Applicative&lt;/code&gt; 制約に注意してください。</target>
        </trans-unit>
        <trans-unit id="6c97a0dc4b9e5fe99b99872bdf8a5aa064c5f01f" translate="yes" xml:space="preserve">
          <source>Note the cheesy &lt;code&gt;.o.hi&lt;/code&gt; rule: It records the dependency of the interface (&lt;code&gt;.hi&lt;/code&gt;) file on the source. The rule says a &lt;code&gt;.hi&lt;/code&gt; file can be made from a &lt;code&gt;.o&lt;/code&gt; file by doing&amp;hellip;nothing. Which is true.</source>
          <target state="translated">安っぽい &lt;code&gt;.o.hi&lt;/code&gt; ルールに注意してください。これは、ソース上のインターフェース（ &lt;code&gt;.hi&lt;/code&gt; ）ファイルの依存関係を記録します。このルールは、 &lt;code&gt;.hi&lt;/code&gt; ファイルは &lt;code&gt;.o&lt;/code&gt; ファイルから何もしないで作成できると述べています。それは本当です。</target>
        </trans-unit>
        <trans-unit id="9f4b885566e702dc04158890b1f14eb9a9f8dc99" translate="yes" xml:space="preserve">
          <source>Note the following details</source>
          <target state="translated">以下の内容に注意してください。</target>
        </trans-unit>
        <trans-unit id="d60984d1f4be6b4151fa96c42997242fb5bf515f" translate="yes" xml:space="preserve">
          <source>Note the following points:</source>
          <target state="translated">以下の点に注意してください。</target>
        </trans-unit>
        <trans-unit id="579e1fdfe10d47e8222286724942854a900c815f" translate="yes" xml:space="preserve">
          <source>Note the implicit &lt;a href=&quot;#ghc-flag--hide-all-packages&quot;&gt;&lt;code&gt;-hide-all-packages&lt;/code&gt;&lt;/a&gt; and the fact that it is &lt;a href=&quot;#ghc-flag--package-id%20%E2%9F%A8unit-id%E2%9F%A9&quot;&gt;&lt;code&gt;-package-id ⟨unit-id⟩&lt;/code&gt;&lt;/a&gt;, not &lt;a href=&quot;#ghc-flag--package%20%E2%9F%A8pkg%E2%9F%A9&quot;&gt;&lt;code&gt;-package ⟨pkg⟩&lt;/code&gt;&lt;/a&gt;. This is because the environment specifies precisely which packages should be visible.</source>
          <target state="translated">暗黙的な&lt;a href=&quot;#ghc-flag--hide-all-packages&quot;&gt; &lt;code&gt;-hide-all-packages&lt;/code&gt; &lt;/a&gt;と、&lt;a href=&quot;#ghc-flag--package-id%20%E2%9F%A8unit-id%E2%9F%A9&quot;&gt; &lt;code&gt;-package-id ⟨unit-id⟩&lt;/code&gt; &lt;/a&gt;ではなく&lt;a href=&quot;#ghc-flag--package%20%E2%9F%A8pkg%E2%9F%A9&quot;&gt; &lt;code&gt;-package ⟨pkg⟩&lt;/code&gt; &lt;/a&gt;-id⟨unit-id⟩であることに注意してください。これは、表示するパッケージを環境が正確に指定しているためです。</target>
        </trans-unit>
        <trans-unit id="7e9d0f9e3600e2466d48b494d5298e939e029788" translate="yes" xml:space="preserve">
          <source>Note the lower-case &lt;code&gt;proxy&lt;/code&gt; in the definition. This allows any type constructor with just one argument to be passed to the function, for example we could also write</source>
          <target state="translated">定義の小文字の &lt;code&gt;proxy&lt;/code&gt; に注意してください。これにより、引数が1つだけの型コンストラクターを関数に渡すことができます。たとえば、次のように書くこともできます。</target>
        </trans-unit>
        <trans-unit id="aaf1c1fd4ff534ae111ecae892bf2bcd7993217c" translate="yes" xml:space="preserve">
          <source>Note the overlapping parsers &lt;code&gt;anyChar&lt;/code&gt; and &lt;code&gt;string &quot;--&amp;gt;&quot;&lt;/code&gt;, and therefore the use of the &lt;code&gt;&lt;a href=&quot;text-parsec#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; combinator.</source>
          <target state="translated">パーサー &lt;code&gt;anyChar&lt;/code&gt; と &lt;code&gt;string &quot;--&amp;gt;&quot;&lt;/code&gt; が重複しているため、 &lt;code&gt;&lt;a href=&quot;text-parsec#v:try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; コンビネーターが使用されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="441c0cba9bf13da30347945fe457f85eb0f55a4b" translate="yes" xml:space="preserve">
          <source>Note this also won't work if your &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; has embedded &lt;code&gt;'\0'&lt;/code&gt; characters in the string, as &lt;code&gt;strlen&lt;/code&gt; will return too short a length.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; が文字列に &lt;code&gt;'\0'&lt;/code&gt; 文字を埋め込んでいる場合も機能しません &lt;code&gt;strlen&lt;/code&gt; は長さが短すぎるためです。</target>
        </trans-unit>
        <trans-unit id="2cc1aaf9aea823467359b53973ba731a918d34af" translate="yes" xml:space="preserve">
          <source>Note this also won't work if your &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; has embedded &lt;code&gt;'\0'&lt;/code&gt; characters in the string, as &lt;code&gt;strlen&lt;/code&gt; will return too short a length.</source>
          <target state="translated">Note this also won't work if your &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; has embedded &lt;code&gt;'\0'&lt;/code&gt; characters in the string, as &lt;code&gt;strlen&lt;/code&gt; will return too short a length.</target>
        </trans-unit>
        <trans-unit id="331df034b2e5e385eb588956cf1683ff013c17c6" translate="yes" xml:space="preserve">
          <source>Note two changes: we included &lt;code&gt;Rts.h&lt;/code&gt;, which defines the GHC-specific external RTS interface, and we called &lt;code&gt;hs_init_ghc()&lt;/code&gt; instead of &lt;code&gt;hs_init()&lt;/code&gt;, passing an argument of type &lt;code&gt;RtsConfig&lt;/code&gt;. &lt;code&gt;RtsConfig&lt;/code&gt; is a struct with various fields that affect the behaviour of the runtime system. Its definition is:</source>
          <target state="translated">2つの変更点に注意してください &lt;code&gt;Rts.h&lt;/code&gt; 固有の外部RTSインターフェースを定義するRts.hをインクルードし、タイプ &lt;code&gt;RtsConfig&lt;/code&gt; の引数を渡して、 &lt;code&gt;hs_init()&lt;/code&gt; の代わりに &lt;code&gt;hs_init_ghc()&lt;/code&gt; を呼び出しました。 &lt;code&gt;RtsConfig&lt;/code&gt; は、ランタイムシステムの動作に影響を与えるさまざまなフィールドを持つ構造体です。その定義は：</target>
        </trans-unit>
        <trans-unit id="dbd0d840fffa0b06839b501dbe88b8d7f54d53d9" translate="yes" xml:space="preserve">
          <source>Note, all arrays are zero-indexed (we assume this when serializing/deserializing)</source>
          <target state="translated">すべての配列はインデックスがゼロであることに注意してください(シリアライズ/デシリアライズ時にこれを想定しています)。</target>
        </trans-unit>
        <trans-unit id="730b394c0c10758545e9a2ade5e0de83b2629e8b" translate="yes" xml:space="preserve">
          <source>Note, however, that, because of platform limitations, the exit code returned by &lt;code&gt;waitForProcess&lt;/code&gt; and &lt;code&gt;getProcessExitCode&lt;/code&gt; cannot not be relied upon when the child uses &lt;code&gt;exec&lt;/code&gt;, even when &lt;code&gt;&lt;a href=&quot;system-process#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; is used. Specifically, these functions will return the exit code of the *original child* (which always exits with code 0, since it called &lt;code&gt;exec&lt;/code&gt;), not the exit code of the process which carried on with execution after &lt;code&gt;exec&lt;/code&gt;. This is different from the behavior prescribed by POSIX but is the best approximation that can be realised under the restrictions of the Windows process model.</source>
          <target state="translated">注意は、しかし、その理由は、プラットフォームの制限により、終了コードが返さにより &lt;code&gt;waitForProcess&lt;/code&gt; と &lt;code&gt;getProcessExitCode&lt;/code&gt; 子供が使用する場合に依拠できないことはできません &lt;code&gt;exec&lt;/code&gt; 場合でも、 &lt;code&gt;&lt;a href=&quot;system-process#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; が使用されています。具体的には、これらの関数は、元の子の終了コード（ &lt;code&gt;exec&lt;/code&gt; を呼び出したため、常にコード0で終了します）を返します &lt;code&gt;exec&lt;/code&gt; 後に実行を続けたプロセスの終了コードではありません。これは、POSIXで規定されている動作とは異なりますが、Windowsプロセスモデルの制限の下で実現できる最良の近似です。</target>
        </trans-unit>
        <trans-unit id="d0a01347d8f201b4f6b2c57fd3b7e47719124dc8" translate="yes" xml:space="preserve">
          <source>Note, that the second law follows from the free theorem of the type &lt;code&gt;&lt;a href=&quot;control-monad#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and the first law, so you need only check that the former condition holds.</source>
          <target state="translated">第二法則はタイプ &lt;code&gt;&lt;a href=&quot;control-monad#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; の自由定理と第一法則に従うため、前者の条件が満たされていることを確認するだけでよいことに注意してください。</target>
        </trans-unit>
        <trans-unit id="2830183e18899d4e372b719af094ff5e6b7a9c72" translate="yes" xml:space="preserve">
          <source>Note, that the second law follows from the free theorem of the type &lt;code&gt;&lt;a href=&quot;control-monad-instances#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and the first law, so you need only check that the former condition holds.</source>
          <target state="translated">第二法則はタイプ &lt;code&gt;&lt;a href=&quot;control-monad-instances#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; の自由定理と第一法則に従うため、前者の条件が満たされていることを確認するだけでよいことに注意してください。</target>
        </trans-unit>
        <trans-unit id="f0748b6f628eb029f122017d46cd14b10952446d" translate="yes" xml:space="preserve">
          <source>Note, that the second law follows from the free theorem of the type &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and the first law, so you need only check that the former condition holds.</source>
          <target state="translated">第二法則はタイプ &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; の自由定理と第一法則に従うため、前者の条件が満たされていることを確認するだけでよいことに注意してください。</target>
        </trans-unit>
        <trans-unit id="52fc4b01facd5a339b73681c8694af51bc082a62" translate="yes" xml:space="preserve">
          <source>Note, that the second law follows from the free theorem of the type &lt;code&gt;&lt;a href=&quot;ghc-base#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and the first law, so you need only check that the former condition holds.</source>
          <target state="translated">第二法則はタイプ &lt;code&gt;&lt;a href=&quot;ghc-base#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; の自由定理と第一法則に従うため、前者の条件が満たされていることを確認するだけでよいことに注意してください。</target>
        </trans-unit>
        <trans-unit id="96706d72d094cc01d3673e8248f1d0035eb63985" translate="yes" xml:space="preserve">
          <source>Note, that the second law follows from the free theorem of the type &lt;code&gt;&lt;a href=&quot;prelude#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and the first law, so you need only check that the former condition holds.</source>
          <target state="translated">第二法則はタイプ &lt;code&gt;&lt;a href=&quot;prelude#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; の自由定理と第一法則に従うため、前者の条件が満たされていることを確認するだけでよいことに注意してください。</target>
        </trans-unit>
        <trans-unit id="ce105fc66c680b733cba29b7608ec8bace0b2002" translate="yes" xml:space="preserve">
          <source>Note, that the second law follows from the free theorem of the type of &lt;code&gt;&lt;a href=&quot;data-functor-contravariant#v:contramap&quot;&gt;contramap&lt;/a&gt;&lt;/code&gt; and the first law, so you need only check that the former condition holds.</source>
          <target state="translated">第二法則は &lt;code&gt;&lt;a href=&quot;data-functor-contravariant#v:contramap&quot;&gt;contramap&lt;/a&gt;&lt;/code&gt; のタイプの自由定理と第一法則に従うため、前者の条件が満たされていることを確認するだけでよいことに注意してください。</target>
        </trans-unit>
        <trans-unit id="ef5e0408b764fbf7ba59484a3e0107c8420f818d" translate="yes" xml:space="preserve">
          <source>Note, that we do encode the endianness, however there is no support for mixed endianness setups. This is primarily to ensure that ghc and iserv share the same endianness.</source>
          <target state="translated">注意:エンディアンをエンコードしていますが、エンディアンが混在する設定はサポートされていません。これは主に ghc と iserv が同じエンディアンを共有することを保証するためです。</target>
        </trans-unit>
        <trans-unit id="06b6e80f1bb81b50259a4ccf958ae5b7adb76332" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; can be auto-derived starting with GHC 7.4</source>
          <target state="translated">注： &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; はGHC 7.4から自動派生させることができます</target>
        </trans-unit>
        <trans-unit id="77d1c837a68cd0e75c8157f56af3d19189468e1c" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; can be auto-derived starting with GHC 7.4</source>
          <target state="translated">Note: &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; can be auto-derived starting with GHC 7.4</target>
        </trans-unit>
        <trans-unit id="85b6adb414c47fdecbbaaba70b7564a885e8ef88" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;&lt;a href=&quot;control-monad#v:foldM&quot;&gt;foldM&lt;/a&gt;&lt;/code&gt; is the same as &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldlM&quot;&gt;foldlM&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">注： &lt;code&gt;&lt;a href=&quot;control-monad#v:foldM&quot;&gt;foldM&lt;/a&gt;&lt;/code&gt; はfoldlMと同じ &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldlM&quot;&gt;foldlM&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cbd96635b83b79b85b8f4e1016e5730892c3d233" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; is a flipped version of the &lt;code&gt;at&lt;/code&gt; combinator from &lt;code&gt;Control.Lens.At&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;Control.Lens.At&lt;/code&gt; の &lt;code&gt;at&lt;/code&gt; コンビネーターの反転バージョンです。</target>
        </trans-unit>
        <trans-unit id="81c735af3f404441fa9d816ccdae0f40e4b55edc" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; is a flipped version of the &lt;code&gt;at&lt;/code&gt; combinator from &lt;code&gt;Control.Lens.At&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;Control.Lens.At&lt;/code&gt; の &lt;code&gt;at&lt;/code&gt; コンビネーターの反転バージョンです。</target>
        </trans-unit>
        <trans-unit id="a687870c3a920d75af69fd721da0de7905df07fc" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;&lt;a href=&quot;data-map-strict#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; is a flipped version of the &lt;code&gt;at&lt;/code&gt; combinator from &lt;code&gt;Control.Lens.At&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;&lt;a href=&quot;data-map-strict#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;Control.Lens.At&lt;/code&gt; の &lt;code&gt;at&lt;/code&gt; コンビネーターの反転バージョンです。</target>
        </trans-unit>
        <trans-unit id="2964ec6af20f2b601e448fae11c342d7b0eed6a4" translate="yes" xml:space="preserve">
          <source>Note: Internally uses &lt;code&gt;&lt;a href=&quot;ghc-integer-logarithms#v:integerLog2-35-&quot;&gt;integerLog2#&lt;/a&gt;&lt;/code&gt; for base 2</source>
          <target state="translated">注：内部的には &lt;code&gt;&lt;a href=&quot;ghc-integer-logarithms#v:integerLog2-35-&quot;&gt;integerLog2#&lt;/a&gt;&lt;/code&gt; を使用します</target>
        </trans-unit>
        <trans-unit id="80e57873e1dc630e8dde69cfc4bc558e5a2fe2bb" translate="yes" xml:space="preserve">
          <source>Note: On Windows, &lt;code&gt;&lt;a href=&quot;system-directory#v:XdgData&quot;&gt;XdgData&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-directory#v:XdgConfig&quot;&gt;XdgConfig&lt;/a&gt;&lt;/code&gt; usually map to the same directory.</source>
          <target state="translated">注：Windowsでは、 &lt;code&gt;&lt;a href=&quot;system-directory#v:XdgData&quot;&gt;XdgData&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;system-directory#v:XdgConfig&quot;&gt;XdgConfig&lt;/a&gt;&lt;/code&gt; は通常、同じディレクトリにマッピングされます。</target>
        </trans-unit>
        <trans-unit id="bbcae614a4a4c25c65679edf7ec5e7b1565fefc7" translate="yes" xml:space="preserve">
          <source>Note: On Windows, &lt;code&gt;&lt;a href=&quot;system-directory#v:XdgDataDirs&quot;&gt;XdgDataDirs&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-directory#v:XdgConfigDirs&quot;&gt;XdgConfigDirs&lt;/a&gt;&lt;/code&gt; usually yield the same result.</source>
          <target state="translated">注：Windowsでは、 &lt;code&gt;&lt;a href=&quot;system-directory#v:XdgDataDirs&quot;&gt;XdgDataDirs&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;system-directory#v:XdgConfigDirs&quot;&gt;XdgConfigDirs&lt;/a&gt;&lt;/code&gt; は通常同じ結果になります。</target>
        </trans-unit>
        <trans-unit id="0333eb6df18590b545c284ef499ea274c56d9557" translate="yes" xml:space="preserve">
          <source>Note: On Windows, &lt;code&gt;&lt;a href=&quot;system-directory-internal#v:XdgData&quot;&gt;XdgData&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-directory-internal#v:XdgConfig&quot;&gt;XdgConfig&lt;/a&gt;&lt;/code&gt; usually map to the same directory.</source>
          <target state="translated">注：Windowsでは、 &lt;code&gt;&lt;a href=&quot;system-directory-internal#v:XdgData&quot;&gt;XdgData&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;system-directory-internal#v:XdgConfig&quot;&gt;XdgConfig&lt;/a&gt;&lt;/code&gt; は通常、同じディレクトリにマッピングされます。</target>
        </trans-unit>
        <trans-unit id="319f1c37ffa7be2cb2ae10b3aadb89c55a7e270e" translate="yes" xml:space="preserve">
          <source>Note: On Windows, &lt;code&gt;&lt;a href=&quot;system-directory-internal#v:XdgDataDirs&quot;&gt;XdgDataDirs&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-directory-internal#v:XdgConfigDirs&quot;&gt;XdgConfigDirs&lt;/a&gt;&lt;/code&gt; usually yield the same result.</source>
          <target state="translated">注：Windowsでは、 &lt;code&gt;&lt;a href=&quot;system-directory-internal#v:XdgDataDirs&quot;&gt;XdgDataDirs&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;system-directory-internal#v:XdgConfigDirs&quot;&gt;XdgConfigDirs&lt;/a&gt;&lt;/code&gt; は通常同じ結果になります。</target>
        </trans-unit>
        <trans-unit id="2d06096a22bf57ecce3b66e194accc6d77193dc1" translate="yes" xml:space="preserve">
          <source>Note: Result of div/0 undefined</source>
          <target state="translated">注:div/0 の結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="cbd627c4c16ef632d3fa099449c00647abd8ea5f" translate="yes" xml:space="preserve">
          <source>Note: Since for signed fixed-width integer types, &lt;code&gt;&lt;a href=&quot;prelude#v:abs&quot;&gt;abs&lt;/a&gt; &lt;a href=&quot;prelude#v:minBound&quot;&gt;minBound&lt;/a&gt; &amp;lt; 0&lt;/code&gt;, the result may be negative if one of the arguments is &lt;code&gt;&lt;a href=&quot;prelude#v:minBound&quot;&gt;minBound&lt;/a&gt;&lt;/code&gt; (and necessarily is if the other is &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;prelude#v:minBound&quot;&gt;minBound&lt;/a&gt;&lt;/code&gt;) for such types.</source>
          <target state="translated">注：符号付き固定幅整数型の場合、 &lt;code&gt;&lt;a href=&quot;prelude#v:abs&quot;&gt;abs&lt;/a&gt; &lt;a href=&quot;prelude#v:minBound&quot;&gt;minBound&lt;/a&gt; &amp;lt; 0&lt;/code&gt; であるため、そのような型の引数の1つが &lt;code&gt;&lt;a href=&quot;prelude#v:minBound&quot;&gt;minBound&lt;/a&gt;&lt;/code&gt; である場合（そして、もう &lt;code&gt;0&lt;/code&gt; つが0または &lt;code&gt;&lt;a href=&quot;prelude#v:minBound&quot;&gt;minBound&lt;/a&gt;&lt;/code&gt; である場合は必然的に）、結果は負になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="674e78f56244223095d66376333e081f352405fa" translate="yes" xml:space="preserve">
          <source>Note: The default implementation for this method is intentionally naive. However, the instances provided for the primitive integral types are implemented using CPU specific machine instructions.</source>
          <target state="translated">注意:このメソッドのデフォルトの実装は、意図的にナイーブです。しかし、原始的な積分型に提供されるインスタンスは、CPU固有のマシン命令を使用して実装されています。</target>
        </trans-unit>
        <trans-unit id="7818d870c76cf216b00e434a150dca33f7df98b2" translate="yes" xml:space="preserve">
          <source>Note: The directory may not actually exist, in which case you would need to create it with file mode &lt;code&gt;700&lt;/code&gt; (i.e. only accessible by the owner).</source>
          <target state="translated">注：ディレクトリは実際には存在しない場合があります。その場合は、ファイルモード &lt;code&gt;700&lt;/code&gt; で作成する必要があります（つまり、所有者のみがアクセスできます）。</target>
        </trans-unit>
        <trans-unit id="0cd8a114aa9321f1d0d10c53fc749989dbf8e3df" translate="yes" xml:space="preserve">
          <source>Note: The instances for &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; violate reflexivity for &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;&lt;a href=&quot;prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; のインスタンスは &lt;code&gt;NaN&lt;/code&gt; の反射性に違反します。</target>
        </trans-unit>
        <trans-unit id="02742f900a83eee688841797767d74d57b9a3632" translate="yes" xml:space="preserve">
          <source>Note: The out-list may contain keys that don't correspond to nodes of the graph; they are ignored.</source>
          <target state="translated">注意:アウトリストには、グラフのノードに対応しないキーが含まれている場合がありますが、それらは無視されます。</target>
        </trans-unit>
        <trans-unit id="e38f2e80b32086e27bef2b0266717c504d1d9973" translate="yes" xml:space="preserve">
          <source>Note: This function will overflow the Int for large integers.</source>
          <target state="translated">注意:この関数は、大きな整数の場合はIntをオーバーフローします。</target>
        </trans-unit>
        <trans-unit id="599498301ed0923479b1af9630c51c253cacd886" translate="yes" xml:space="preserve">
          <source>Note: This instance is only valid if the underlying monad has a single exit point!</source>
          <target state="translated">注意:このインスタンスは、基礎となるモナドが単一の終了点を持つ場合にのみ有効です。</target>
        </trans-unit>
        <trans-unit id="9c37eef5d6056fc160330417f3bea3c9d7af78c9" translate="yes" xml:space="preserve">
          <source>Note: You should worry about UAC (User Account Control) when use this module's function in your application:</source>
          <target state="translated">注意:アプリケーションでこのモジュールの機能を使用する場合、UAC (User Account Control)を心配する必要があります。</target>
        </trans-unit>
        <trans-unit id="ac778c93d19c8f9b9b2156b24f137765a286116d" translate="yes" xml:space="preserve">
          <source>Note: You should worry about file system type when use this module's function in your application:</source>
          <target state="translated">注意:アプリケーションでこのモジュールの機能を使用する場合は、ファイルシステムの種類を気にする必要があります。</target>
        </trans-unit>
        <trans-unit id="a935c141a1282c40c4d13949ec0910ffa24a0fce" translate="yes" xml:space="preserve">
          <source>Note: adding a finalizer to a &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;system-mem-weak#v:addFinalizer&quot;&gt;addFinalizer&lt;/a&gt;&lt;/code&gt; won't work; use the specialised version &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:addForeignPtrFinalizer&quot;&gt;addForeignPtrFinalizer&lt;/a&gt;&lt;/code&gt; instead. For discussion see the &lt;code&gt;&lt;a href=&quot;system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; type. .</source>
          <target state="translated">注：にファイナライザを追加する &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; 使用 &lt;code&gt;&lt;a href=&quot;system-mem-weak#v:addFinalizer&quot;&gt;addFinalizer&lt;/a&gt;&lt;/code&gt; が動作しません。代わりに、専用バージョンの &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:addForeignPtrFinalizer&quot;&gt;addForeignPtrFinalizer&lt;/a&gt;&lt;/code&gt; を使用してください。議論については、 &lt;code&gt;&lt;a href=&quot;system-mem-weak#t:Weak&quot;&gt;Weak&lt;/a&gt;&lt;/code&gt; タイプを参照してください。。</target>
        </trans-unit>
        <trans-unit id="2097d2502bf72066e6338b00241515b264646719" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;access&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;access&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="47a5ce04e50da050a609249923f505414a2b6c3a" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;chmod&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;chmod&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="d4d725c5c43aa8cc0a4915dd3466f0457eca94a8" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;chown&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;chown&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="81ad88f149f3063c197001795818b6823154dc14" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;fchmod&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;fchmod&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="6030cb951c6f266563f54a519db1f69cbabc10d8" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;fchown&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;fchown&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="7dd9f0dc0d1c8559fbb770086e670ffe8174b556" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;fpathconf&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;fpathconf&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="3c784018b1764520d2f3f72bfaf80d9f4a298c67" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;fstat&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;fstat&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="3b3f3b1b22a3530df7e0c4f2e3bac4484512a52f" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;ftruncate&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;ftruncate&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="eebdf5750908ee142920fee74c1caeed35366551" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;futimens&lt;/code&gt; or &lt;code&gt;futimes&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;futimens&lt;/code&gt; または &lt;code&gt;futimes&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="90f9647756a74661a9bdc0a9c20d4908f0e7a503" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;futimes&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;futimes&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="23c23e7db83b3608ec2d06f627e484942cc29d18" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;lchown&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;lchown&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="c155b2e5620e073cb17c1c7c209997815551141a" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;link&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;link&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="bd88efd3faf02cea25b3fced565fc1318e09889c" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;lstat&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;lstat&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="0c4b9527d6aeade9b87f9ffcf35e25c0e1d6597e" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;lutimes&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;lutimes&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="641e26b8beeb20f2884975f28668f2c405e6b0b0" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;mkfifo&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;mkfifo&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="37c59507b9516717f0afe20d3d052ddf9908362d" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;mknod&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;mknod&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="81ed673abd5a82dc7e99410acf38ec2277555bfb" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;pathconf&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;pathconf&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="039d8fa52ca80812eb645d692ce3ef11b0cb3ca7" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;readlink&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;readlink&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="1366a63986732619d6beabc26255cf1b662685a6" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;rename&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;rename&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="5782d43e3522ff7210266c96575bbd5b68e34826" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;stat&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;stat&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="65ff4e6ead5e4f29f97706aaac05101e76a8ac86" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;symlink&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;symlink&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="c207e69e9ae7e528e940038ec03e5d5bc0aa3f34" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;truncate&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;truncate&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="9e464692da7e94ff8a1d77187f87ac0f6f3b8682" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;umask&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;umask&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="c12b05171f72e9faf61a3e799d01d78f9ed72bd7" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;unlink&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;unlink&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="bcb5b167f7c968ad10d575603b69054a4b118017" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;utime&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;utime&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="4dffccc96b86fbac0369ca9ed5019ac9f7f5061d" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;utimensat&lt;/code&gt; or &lt;code&gt;lutimes&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;utimensat&lt;/code&gt; または &lt;code&gt;lutimes&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="3369755b47d8acc74ee74f75c779638972380854" translate="yes" xml:space="preserve">
          <source>Note: calls &lt;code&gt;utimensat&lt;/code&gt; or &lt;code&gt;utimes&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;utimensat&lt;/code&gt; または &lt;code&gt;utimes&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="22fedcf56957f2b61dfd1fe752153d0eddeba4cd" translate="yes" xml:space="preserve">
          <source>Note: changing directories causes all currently loaded modules to be unloaded. This is because the search path is usually expressed using relative directories, and changing the search path in the middle of a session is not supported.</source>
          <target state="translated">注意:ディレクトリを変更すると、現在ロードされているモジュールはすべてアンロードされます。これは、検索パスは通常相対ディレクトリを使って表現され、セッションの途中で検索パスを変更することはサポートされていないからです。</target>
        </trans-unit>
        <trans-unit id="0baa49f63d6662a3ea39a54e91e2f9bf0dd4e3c3" translate="yes" xml:space="preserve">
          <source>Note: consider using the more general &lt;code&gt;&lt;a href=&quot;system-process#v:createProcess&quot;&gt;createProcess&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;system-process#v:runProcess&quot;&gt;runProcess&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：より一般的な使用を検討して &lt;code&gt;&lt;a href=&quot;system-process#v:createProcess&quot;&gt;createProcess&lt;/a&gt;&lt;/code&gt; の代わり &lt;code&gt;&lt;a href=&quot;system-process#v:runProcess&quot;&gt;runProcess&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="c493553c9e68ae21e1845f6961a2d86f0cd1b1a7" translate="yes" xml:space="preserve">
          <source>Note: for various murky reasons, stdout and stderr handles are not necessarily flushed when the compiler finishes running, so you should flush them yourself.</source>
          <target state="translated">注意:様々な不明瞭な理由により、stdout と stderr ハンドルはコンパイラの実行終了時に必ずしもフラッシュされるわけではないので、自分でフラッシュする必要があります。</target>
        </trans-unit>
        <trans-unit id="b613c731654056bb4ffa8acaf76928a12a8fe432" translate="yes" xml:space="preserve">
          <source>Note: if &lt;code&gt;p&lt;/code&gt; is not actually antitone, then &lt;code&gt;spanAntitone&lt;/code&gt; will split the map at some &lt;em&gt;unspecified&lt;/em&gt; point where the predicate switches from holding to not holding (where the predicate is seen to hold before the first key and to fail after the last key).</source>
          <target state="translated">注： &lt;code&gt;p&lt;/code&gt; が実際には &lt;code&gt;spanAntitone&lt;/code&gt; はない場合、spanAntitoneは、述語が保持から非保持に切り替わる&lt;em&gt;未指定の&lt;/em&gt;ポイントでマップを分割します（述語は最初のキーの前に保持され、最後のキーの後に失敗するように見えます）。</target>
        </trans-unit>
        <trans-unit id="ae4388084290b5d7a3bdeb27693194ba96d9e296" translate="yes" xml:space="preserve">
          <source>Note: if &lt;code&gt;p&lt;/code&gt; is not actually antitone, then &lt;code&gt;spanAntitone&lt;/code&gt; will split the set at some &lt;em&gt;unspecified&lt;/em&gt; point where the predicate switches from holding to not holding (where the predicate is seen to hold before the first element and to fail after the last element).</source>
          <target state="translated">注： &lt;code&gt;p&lt;/code&gt; が実際に &lt;code&gt;spanAntitone&lt;/code&gt; はない場合、spanAntitoneは、述語が保持から非保持に切り替わる&lt;em&gt;特定&lt;/em&gt;されてい&lt;em&gt;ない&lt;/em&gt;ポイントでセットを分割します（述語は、最初の要素の前に保持され、最後の要素の後に失敗するように見えます）。</target>
        </trans-unit>
        <trans-unit id="ee69151d314995840dfa893a521205cf26ed2e2f" translate="yes" xml:space="preserve">
          <source>Note: if you will be working with files containing binary data, you'll want to be using &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：バイナリデータを含むファイルを操作する場合は、 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ea2673c5a22c74869057def36152984def9b63f0" translate="yes" xml:space="preserve">
          <source>Note: if you will be working with files containing binary data, you'll want to be using &lt;code&gt;&lt;a href=&quot;system-io#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：バイナリデータを含むファイルを操作する場合は、 &lt;code&gt;&lt;a href=&quot;system-io#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0a07912622d0b837b6fccc970a6e823a1ae01ea0" translate="yes" xml:space="preserve">
          <source>Note: in GHC, &lt;code&gt;&lt;a href=&quot;system-exit#v:exitWith&quot;&gt;exitWith&lt;/a&gt;&lt;/code&gt; should be called from the main program thread in order to exit the process. When called from another thread, &lt;code&gt;&lt;a href=&quot;system-exit#v:exitWith&quot;&gt;exitWith&lt;/a&gt;&lt;/code&gt; will throw an &lt;code&gt;ExitException&lt;/code&gt; as normal, but the exception will not cause the process itself to exit.</source>
          <target state="translated">注：GHCでは、プロセスを終了するためにメインプログラムスレッドから &lt;code&gt;&lt;a href=&quot;system-exit#v:exitWith&quot;&gt;exitWith&lt;/a&gt;&lt;/code&gt; を呼び出す必要があります。別のスレッドから呼び出されると、 &lt;code&gt;&lt;a href=&quot;system-exit#v:exitWith&quot;&gt;exitWith&lt;/a&gt;&lt;/code&gt; は通常 &lt;code&gt;ExitException&lt;/code&gt; ExitExceptionをスローしますが、例外によってプロセス自体が終了することはありません。</target>
        </trans-unit>
        <trans-unit id="bb017a16224e898b6ffb988ed0bbe310767a5f54" translate="yes" xml:space="preserve">
          <source>Note: no other base module should import this module.</source>
          <target state="translated">注意:他のベースモジュールはこのモジュールをインポートしてはいけません。</target>
        </trans-unit>
        <trans-unit id="d0e9855cc09c89d974c2cb2617285413cf098e03" translate="yes" xml:space="preserve">
          <source>Note: on Windows and with Haskell implementation other than GHC, this function does not work correctly; it behaves identically to &lt;code&gt;&lt;a href=&quot;data-bytestring#v:hGet&quot;&gt;hGet&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：WindowsおよびGHC以外のHaskell実装では、この関数は正しく機能しません。これは &lt;code&gt;&lt;a href=&quot;data-bytestring#v:hGet&quot;&gt;hGet&lt;/a&gt;&lt;/code&gt; と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="2c3066659d43a1497598449b3caf33fb26732423" translate="yes" xml:space="preserve">
          <source>Note: on Windows and with Haskell implementation other than GHC, this function does not work correctly; it behaves identically to &lt;code&gt;&lt;a href=&quot;data-bytestring#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：WindowsおよびGHC以外のHaskell実装では、この関数は正しく機能しません。 &lt;code&gt;&lt;a href=&quot;data-bytestring#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt; と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="470bf041c378cc926d1b7954cf1cf709d99bc3b9" translate="yes" xml:space="preserve">
          <source>Note: on Windows and with Haskell implementation other than GHC, this function does not work correctly; it behaves identically to &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:hGet&quot;&gt;hGet&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：WindowsおよびGHC以外のHaskell実装では、この関数は正しく機能しません。これは &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:hGet&quot;&gt;hGet&lt;/a&gt;&lt;/code&gt; と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="45c32ee5b6384c005264d7901f76bb36e623444b" translate="yes" xml:space="preserve">
          <source>Note: on Windows and with Haskell implementation other than GHC, this function does not work correctly; it behaves identically to &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：WindowsおよびGHC以外のHaskell実装では、この関数は正しく機能しません。 &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt; と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="aa7fe119dd59f69aad0b1fc189959fe661bfb05d" translate="yes" xml:space="preserve">
          <source>Note: on Windows and with Haskell implementation other than GHC, this function does not work correctly; it behaves identically to &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:hGet&quot;&gt;hGet&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：WindowsおよびGHC以外のHaskell実装では、この関数は正しく機能しません。これは &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:hGet&quot;&gt;hGet&lt;/a&gt;&lt;/code&gt; と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="efb202994ee3d3218df857fdac6cb270273fad26" translate="yes" xml:space="preserve">
          <source>Note: on Windows and with Haskell implementation other than GHC, this function does not work correctly; it behaves identically to &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：WindowsおよびGHC以外のHaskell実装では、この関数は正しく機能しません。 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt; と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="e8574c06639a12a57d5964a738e28ef433d4381c" translate="yes" xml:space="preserve">
          <source>Note: on Windows and with Haskell implementation other than GHC, this function does not work correctly; it behaves identically to &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:hGet&quot;&gt;hGet&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：WindowsおよびGHC以外のHaskell実装では、この関数は正しく機能しません。これは &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:hGet&quot;&gt;hGet&lt;/a&gt;&lt;/code&gt; と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="b6afd996aff4ed599e852d040ffe628aecd7c3f1" translate="yes" xml:space="preserve">
          <source>Note: on Windows and with Haskell implementation other than GHC, this function does not work correctly; it behaves identically to &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：WindowsおよびGHC以外のHaskell実装では、この関数は正しく機能しません。 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt; と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="c084ddabd74d6b6909e8ec15589cb5a744e9692b" translate="yes" xml:space="preserve">
          <source>Note: on Windows, if the process was a shell command created by &lt;code&gt;&lt;a href=&quot;system-process#v:createProcess&quot;&gt;createProcess&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;system-process#v:shell&quot;&gt;shell&lt;/a&gt;&lt;/code&gt;, or created by &lt;code&gt;&lt;a href=&quot;system-process#v:runCommand&quot;&gt;runCommand&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;system-process#v:runInteractiveCommand&quot;&gt;runInteractiveCommand&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;&lt;a href=&quot;system-process#v:terminateProcess&quot;&gt;terminateProcess&lt;/a&gt;&lt;/code&gt; will only terminate the shell, not the command itself. On Unix systems, both processes are in a process group and will be terminated together.</source>
          <target state="translated">注：プロセスにより作成シェルコマンドだった場合は、Windows上で、 &lt;code&gt;&lt;a href=&quot;system-process#v:createProcess&quot;&gt;createProcess&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;system-process#v:shell&quot;&gt;shell&lt;/a&gt;&lt;/code&gt; 、またはによって作成された &lt;code&gt;&lt;a href=&quot;system-process#v:runCommand&quot;&gt;runCommand&lt;/a&gt;&lt;/code&gt; 関数または &lt;code&gt;&lt;a href=&quot;system-process#v:runInteractiveCommand&quot;&gt;runInteractiveCommand&lt;/a&gt;&lt;/code&gt; 、その後 &lt;code&gt;&lt;a href=&quot;system-process#v:terminateProcess&quot;&gt;terminateProcess&lt;/a&gt;&lt;/code&gt; シェルだけではなく、コマンド自体を終了します。Unixシステムでは、両方のプロセスがプロセスグループに属しており、一緒に終了します。</target>
        </trans-unit>
        <trans-unit id="2f6dbfc9a1fde96f341be1c1077f8b56e055e450" translate="yes" xml:space="preserve">
          <source>Note: on Windows, if the result is an executable file, the extension &amp;ldquo;&lt;code&gt;.exe&lt;/code&gt;&amp;rdquo; is added if the specified filename does not already have an extension. Thus</source>
          <target state="translated">注：Windowsでは、結果が実行可能ファイルの場合、指定したファイル名に拡張子がない場合は、拡張子「 &lt;code&gt;.exe&lt;/code&gt; 」が追加されます。したがって</target>
        </trans-unit>
        <trans-unit id="f64cdc1c8388b25ba0abb5fc5d63de4643c82376" translate="yes" xml:space="preserve">
          <source>Note: see &lt;code&gt;chmod&lt;/code&gt;.</source>
          <target state="translated">注： &lt;code&gt;chmod&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="c34d69fc36307bbe2927cc3d38af66939f8b916e" translate="yes" xml:space="preserve">
          <source>Note: size parameter (times &lt;code&gt;sizeof(GmpLimb)&lt;/code&gt;) must be less or equal to its &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-prim-0.6.1/GHC-Prim.html#v:sizeofByteArray-35-&quot;&gt;sizeofByteArray#&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：サイズパラメーター（ &lt;code&gt;sizeof(GmpLimb)&lt;/code&gt; の倍数)は、その &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-prim-0.6.1/GHC-Prim.html#v:sizeofByteArray-35-&quot;&gt;sizeofByteArray#&lt;/a&gt;&lt;/code&gt; 以下である必要があります。</target>
        </trans-unit>
        <trans-unit id="be040b0811689aa8aa9d5c45cb215e66188077b4" translate="yes" xml:space="preserve">
          <source>Note: size parameter (times &lt;code&gt;sizeof(GmpLimb)&lt;/code&gt;) must be less or equal to its &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#v:sizeofByteArray-35-&quot;&gt;sizeofByteArray#&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注：サイズパラメーター（ &lt;code&gt;sizeof(GmpLimb)&lt;/code&gt; の倍数)は、その &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#v:sizeofByteArray-35-&quot;&gt;sizeofByteArray#&lt;/a&gt;&lt;/code&gt; 以下でなければなりません。</target>
        </trans-unit>
        <trans-unit id="fb831c2656a8ecc829f473952ab9c3227a74fb90" translate="yes" xml:space="preserve">
          <source>Note: that &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad has these abilities already, so stacking &lt;code&gt;&lt;a href=&quot;control-monad-catch-pure#t:CatchT&quot;&gt;CatchT&lt;/a&gt;&lt;/code&gt; on top of it does not add any value and can possibly be confusing:</source>
          <target state="translated">注： &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; モナドにはすでにこれらの機能があるため、 &lt;code&gt;&lt;a href=&quot;control-monad-catch-pure#t:CatchT&quot;&gt;CatchT&lt;/a&gt;&lt;/code&gt; をその上にスタックしても値は追加されず、混乱を招く可能性があります。</target>
        </trans-unit>
        <trans-unit id="dab465ac8e9035afbcd775312d9253baee0527e0" translate="yes" xml:space="preserve">
          <source>Note: the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; should be placed in binary mode with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; to work correctly.</source>
          <target state="translated">注： &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; が正しく機能するには、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt; を使用してバイナリモードに配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="e744fc2c55c810e55221c484fe135e425eeecdb6" translate="yes" xml:space="preserve">
          <source>Note: the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; should be placed in binary mode with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; to work correctly.</source>
          <target state="translated">注： &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; が正しく機能するには、 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt; を使用してバイナリモードに配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="d9b30040f4397b2f911a65307971bd5711cb73a0" translate="yes" xml:space="preserve">
          <source>Note: the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; should be placed in binary mode with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; to work correctly.</source>
          <target state="translated">Note: the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; should be placed in binary mode with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; to work correctly.</target>
        </trans-unit>
        <trans-unit id="16b7e1e2845c3bc077710b5f8ff529e652a30481" translate="yes" xml:space="preserve">
          <source>Note: the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; should be placed in binary mode with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; to work correctly.</source>
          <target state="translated">Note: the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; should be placed in binary mode with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:hSetBinaryMode&quot;&gt;hSetBinaryMode&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; to work correctly.</target>
        </trans-unit>
        <trans-unit id="ffd72112ea2f921d76ec2535fa06bb9c0d5ee66a" translate="yes" xml:space="preserve">
          <source>Note: the directory may not actually exist, in which case you would need to create it. It is expected that the parent directory exists and is writable.</source>
          <target state="translated">注意:ディレクトリは実際には存在しないかもしれません。親ディレクトリが存在し、書き込み可能であることが期待されます。</target>
        </trans-unit>
        <trans-unit id="905ee1ed0e8a9a4a64475bdb86e9e45b5fa215dd" translate="yes" xml:space="preserve">
          <source>Note: the final statement must match one of these patterns exactly:</source>
          <target state="translated">注意:最終的な文は、これらのパターンのいずれかと正確に一致していなければなりません。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="82ff0a7b103c8f1f65e9521f63650d629b1a809b" translate="yes" xml:space="preserve">
          <source>Notes about &lt;code&gt;exec&lt;/code&gt; on Windows</source>
          <target state="translated">Windowsでの &lt;code&gt;exec&lt;/code&gt; に関する注意</target>
        </trans-unit>
        <trans-unit id="9c3befe7e22c8667bc957541f49b0ee79970b588" translate="yes" xml:space="preserve">
          <source>Notes:</source>
          <target state="translated">Notes:</target>
        </trans-unit>
        <trans-unit id="4481948392a8846400c954e77f58d76cdaa73963" translate="yes" xml:space="preserve">
          <source>Nothing</source>
          <target state="translated">Nothing</target>
        </trans-unit>
        <trans-unit id="964b5c5b84d75722d090e7870f65fb2d7ea468f5" translate="yes" xml:space="preserve">
          <source>Nothing happened! Here&amp;rsquo;s another lesson: newly compiled modules aren&amp;rsquo;t picked up by &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt;&lt;code&gt;:reload&lt;/code&gt;&lt;/a&gt;, only &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">何も起こらなかった！もう1つのレッスンがあります。新しくコンパイルされたモジュールは、&lt;a href=&quot;#ghci-cmd-:reload&quot;&gt; &lt;code&gt;:reload&lt;/code&gt; &lt;/a&gt;ではなく、&lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt;だけで取得されます。</target>
        </trans-unit>
        <trans-unit id="53e0c13486116b5f437ae0c07f239ea24aca4e1a" translate="yes" xml:space="preserve">
          <source>Notice also that the &lt;em&gt;order&lt;/em&gt; of class parameters becomes important, since we can only derive instances for the last one. If the &lt;code&gt;StateMonad&lt;/code&gt; class above were instead defined as</source>
          <target state="translated">最後のインスタンスしか導出できない&lt;em&gt;ため&lt;/em&gt;、クラスパラメータの&lt;em&gt;順序&lt;/em&gt;が重要になることにも注意してください。上記の &lt;code&gt;StateMonad&lt;/code&gt; クラスが代わりに次のように定義された場合</target>
        </trans-unit>
        <trans-unit id="00c9b29a34f5499d2e9bea194ad83800538a2e0c" translate="yes" xml:space="preserve">
          <source>Notice here that the &lt;code&gt;Maybe&lt;/code&gt; type is parameterised by the &lt;em&gt;polymorphic&lt;/em&gt; type &lt;code&gt;(forall a. [a] -&amp;gt; [a])&lt;/code&gt;. However &lt;em&gt;the extension should be considered highly experimental, and certainly un-supported&lt;/em&gt;. You are welcome to try it, but please don&amp;rsquo;t rely on it working consistently, or working the same in subsequent releases. See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/ImpredicativePolymorphism&quot;&gt;this wiki page&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;Maybe&lt;/code&gt; 型が&lt;em&gt;多態&lt;/em&gt;型 &lt;code&gt;(forall a. [a] -&amp;gt; [a])&lt;/code&gt; によってパラメーター化されていることに注意してください。ただし&lt;em&gt;、拡張機能は非常に実験的なものであり、サポートされていないことは確か&lt;/em&gt;です。あなたはそれを試すことを歓迎しますが、それが一貫して機能すること、または後続のリリースで同じように機能することに依存しないでください。詳細については、&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/ImpredicativePolymorphism&quot;&gt;このWikiページ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="cc6a18bab0d3bb67ccb79f1e6008765fc4f48e2b" translate="yes" xml:space="preserve">
          <source>Notice here that the &lt;code&gt;Maybe&lt;/code&gt; type is parameterised by the &lt;em&gt;polymorphic&lt;/em&gt; type &lt;code&gt;(forall a. [a] -&amp;gt; [a])&lt;/code&gt;. However &lt;em&gt;the extension should be considered highly experimental, and certainly un-supported&lt;/em&gt;. You are welcome to try it, but please don&amp;rsquo;t rely on it working consistently, or working the same in subsequent releases. See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/impredicative-polymorphism&quot;&gt;this wiki page&lt;/a&gt; for more details.</source>
          <target state="translated">Notice here that the &lt;code&gt;Maybe&lt;/code&gt; type is parameterised by the &lt;em&gt;polymorphic&lt;/em&gt; type &lt;code&gt;(forall a. [a] -&amp;gt; [a])&lt;/code&gt; . However &lt;em&gt;the extension should be considered highly experimental, and certainly un-supported&lt;/em&gt;. You are welcome to try it, but please don&amp;rsquo;t rely on it working consistently, or working the same in subsequent releases. See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/impredicative-polymorphism&quot;&gt;this wiki page&lt;/a&gt; for more details.</target>
        </trans-unit>
        <trans-unit id="db5de621f10f81f3f42fbb7d8765349ac0e858fc" translate="yes" xml:space="preserve">
          <source>Notice how every constructor of &lt;code&gt;E&lt;/code&gt; utilizes some sort of existential quantification, but only the argument of &lt;code&gt;E1&lt;/code&gt; is actually &amp;ldquo;folded over&amp;rdquo;. This is because we make a deliberate choice to only fold over universally polymorphic types that are syntactically equivalent to the last type parameter. In particular:</source>
          <target state="translated">&lt;code&gt;E&lt;/code&gt; のすべてのコンストラクターがある種の実存定量化をどのように利用しているかに注意してください。ただし、実際には &lt;code&gt;E1&lt;/code&gt; の引数のみが「フォールドオーバー」されます。これは、構文的に最後の型パラメーターと同等である普遍的な多相型のみを折りたたむように意図的に選択しているためです。特に：</target>
        </trans-unit>
        <trans-unit id="6f333808bd82420a615128b3e13ffe515c8a7857" translate="yes" xml:space="preserve">
          <source>Notice that</source>
          <target state="translated">そのことに気づく</target>
        </trans-unit>
        <trans-unit id="93b754f4099d6d9a61c017edf4751f109c263ebd" translate="yes" xml:space="preserve">
          <source>Notice that C didn&amp;rsquo;t need to trust package Wuggle; the machine checking is enough. C only needs to trust packages that contain &lt;a href=&quot;#extension-Trustworthy&quot;&gt;&lt;code&gt;Trustworthy&lt;/code&gt;&lt;/a&gt; modules.</source>
          <target state="translated">CはパッケージWuggleを信頼する必要がないことに注意してください。マシンチェックで十分です。Cは、信頼&lt;a href=&quot;#extension-Trustworthy&quot;&gt; &lt;code&gt;Trustworthy&lt;/code&gt; &lt;/a&gt;モジュールを含むパッケージのみを信頼する必要があります。</target>
        </trans-unit>
        <trans-unit id="bff9e3af9d3e69ccca8ea13acc452ca2fd25796c" translate="yes" xml:space="preserve">
          <source>Notice that GADT-style syntax generalises existential types (&lt;a href=&quot;#existential-quantification&quot;&gt;Existentially quantified data constructors&lt;/a&gt;). For example, these two declarations are equivalent:</source>
          <target state="translated">GADTスタイルの構文は存在型（&lt;a href=&quot;#existential-quantification&quot;&gt;Existentially quantified data constructors&lt;/a&gt;）を一般化していることに注意してください。たとえば、次の2つの宣言は同等です。</target>
        </trans-unit>
        <trans-unit id="553b556eabe0c77570a3bf578e47d4e277ab246a" translate="yes" xml:space="preserve">
          <source>Notice that GHC always adds implicit quantifiers &lt;em&gt;at the outermost level&lt;/em&gt; of a user-written type; it does &lt;em&gt;not&lt;/em&gt; find the inner-most possible quantification point. For example:</source>
          <target state="translated">GHCは常に、ユーザー記述型の&lt;em&gt;最外部レベル&lt;/em&gt;に暗黙の数量詞&lt;em&gt;を&lt;/em&gt;追加することに注意してください。最も内側の可能な定量化ポイント&lt;em&gt;は&lt;/em&gt;検出されませ&lt;em&gt;ん&lt;/em&gt;。例えば：</target>
        </trans-unit>
        <trans-unit id="6c6aa2291aadd5f99fafa11b2ff64b43b4b4001b" translate="yes" xml:space="preserve">
          <source>Notice that a top-level binding that is affected by the monomorphism restriction is not closed, and hence may in turn prevent generalisation of bindings that mention it.</source>
          <target state="translated">モノモーフィズム制限の影響を受けるトップレベルバインディングは閉じていないので、それに言及したバインディングの一般化を妨げる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="106f2542b9ad1a1791ff62a736a20934f1332297" translate="yes" xml:space="preserve">
          <source>Notice that since &lt;code&gt;myLength1&lt;/code&gt; was defined with an explicit type signature, &lt;a href=&quot;ghci#ghci-cmd-:type%20+v&quot;&gt;&lt;code&gt;:type +v&lt;/code&gt;&lt;/a&gt; reports that all of its type variables are available for type application. On the other hand, &lt;code&gt;myLength2&lt;/code&gt; was not given a type signature. As a result, all of its type variables are surrounded with braces, and trying to use visible type application with &lt;code&gt;myLength2&lt;/code&gt; fails.</source>
          <target state="translated">&lt;code&gt;myLength1&lt;/code&gt; は明示的な型シグネチャで定義されているため、&lt;a href=&quot;ghci#ghci-cmd-:type%20+v&quot;&gt; &lt;code&gt;:type +v&lt;/code&gt; &lt;/a&gt;は、その型変数のすべてが型アプリケーションで使用できることを報告することに注意してください。一方、 &lt;code&gt;myLength2&lt;/code&gt; には型シグネチャが与えられていません。その結果、すべての型変数が中括弧で囲まれ、 &lt;code&gt;myLength2&lt;/code&gt; で可視型アプリケーションを使用しようとすると失敗します。</target>
        </trans-unit>
        <trans-unit id="3afaa45a394da4b41eb772316597dd6a43b099f4" translate="yes" xml:space="preserve">
          <source>Notice that since the command-line passed to the linker is rather involved, you probably want to use &lt;code&gt;ghc&lt;/code&gt; to do the final link of your `mixed-language&amp;rsquo; application. This is not a requirement though, just try linking once with &lt;a href=&quot;using#ghc-flag--v&quot;&gt;&lt;code&gt;-v&lt;/code&gt;&lt;/a&gt; on to see what options the driver passes through to the linker.</source>
          <target state="translated">リンカに渡されたコマンドラインはかなり複雑であるため、おそらく &lt;code&gt;ghc&lt;/code&gt; を使用して「混合言語」アプリケーションの最終リンクを作成する必要があります。ただし、これは必須ではありません。- &lt;a href=&quot;using#ghc-flag--v&quot;&gt; &lt;code&gt;-v&lt;/code&gt; &lt;/a&gt;オンにしてリンクを1回試し、ドライバーがリンカーに渡すオプションを確認してください。</target>
        </trans-unit>
        <trans-unit id="0cdaf211f37e5b03ee9118a3708a26c5977a2cbc" translate="yes" xml:space="preserve">
          <source>Notice that the &lt;code&gt;seq&lt;/code&gt; is added only in the translation to Core If we did it in Haskell source, thus</source>
          <target state="translated">&lt;code&gt;seq&lt;/code&gt; がCoreへの変換でのみ追加されることに注意してください。Haskellソースで追加した場合、</target>
        </trans-unit>
        <trans-unit id="ad31586b6779a56318944b9ce1f29dd7560ef27a" translate="yes" xml:space="preserve">
          <source>Notice that the boolean value returned is just a snapshot of the state of the MVar. By the time you get to react on its result, the MVar may have been filled (or emptied) - so be extremely careful when using this operation. Use &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:tryTakeMVar&quot;&gt;tryTakeMVar&lt;/a&gt;&lt;/code&gt; instead if possible.</source>
          <target state="translated">返されるブール値は、MVarの状態の単なるスナップショットであることに注意してください。結果に反応するまでに、MVarが満たされている（または空になっている）可能性があるため、この操作を使用するときは十分に注意してください。 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:tryTakeMVar&quot;&gt;tryTakeMVar&lt;/a&gt;&lt;/code&gt; 代わりにtryTakeMVarを使用してください。</target>
        </trans-unit>
        <trans-unit id="47e1ecc3fd950dbbe0cc120eb2c026af385ef2b1" translate="yes" xml:space="preserve">
          <source>Notice that the boolean value returned is just a snapshot of the state of the MVar. By the time you get to react on its result, the MVar may have been filled (or emptied) - so be extremely careful when using this operation. Use &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:tryTakeMVar&quot;&gt;tryTakeMVar&lt;/a&gt;&lt;/code&gt; instead if possible.</source>
          <target state="translated">返されるブール値は、MVarの状態の単なるスナップショットであることに注意してください。結果に反応するまでに、MVarが満たされている（または空になっている）可能性があるため、この操作を使用するときは十分に注意してください。 &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:tryTakeMVar&quot;&gt;tryTakeMVar&lt;/a&gt;&lt;/code&gt; 代わりにtryTakeMVarを使用してください。</target>
        </trans-unit>
        <trans-unit id="a38f193ac7cf511a7d9b66a274ed6b21ec714e3f" translate="yes" xml:space="preserve">
          <source>Notice that the extension does not affect equality constraints in an instance context; they are permitted by &lt;a href=&quot;#extension-TypeFamilies&quot;&gt;&lt;code&gt;TypeFamilies&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#extension-GADTs&quot;&gt;&lt;code&gt;GADTs&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">拡張はインスタンスコンテキストの等価制約に影響しないことに注意してください。&lt;a href=&quot;#extension-TypeFamilies&quot;&gt; &lt;code&gt;TypeFamilies&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#extension-GADTs&quot;&gt; &lt;code&gt;GADTs&lt;/code&gt; &lt;/a&gt;許可されています。</target>
        </trans-unit>
        <trans-unit id="68d3d7ffa432ffbf89c1390ad1ba459abda3d14c" translate="yes" xml:space="preserve">
          <source>Notice that the return type of the constructors is not always &lt;code&gt;Term a&lt;/code&gt;, as is the case with ordinary data types. This generality allows us to write a well-typed &lt;code&gt;eval&lt;/code&gt; function for these &lt;code&gt;Terms&lt;/code&gt;:</source>
          <target state="translated">コンストラクタの戻り値の型は、通常のデータ型の場合のように、必ずしも &lt;code&gt;Term a&lt;/code&gt; であるとは限らないことに注意してください。この一般性により、これらの &lt;code&gt;Terms&lt;/code&gt; に対して適切に型指定された &lt;code&gt;eval&lt;/code&gt; 関数を記述できます。</target>
        </trans-unit>
        <trans-unit id="54ceac8f09d6cd564081b0cfb5c886543152f775" translate="yes" xml:space="preserve">
          <source>Notice that the type for &lt;code&gt;f&lt;/code&gt; allows the two parameters &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; to be assigned different types, even though it attempts to insert each of the two values, one after the other, into the same collection. If we&amp;rsquo;re trying to model collections that contain only one type of value, then this is clearly an inaccurate type. Worse still, the definition for g is accepted, without causing a type error. As a result, the error in this code will not be flagged at the point where it appears. Instead, it will show up only when we try to use &lt;code&gt;g&lt;/code&gt;, which might even be in a different module.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; の型により、2つのパラメーター &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; に異なる型を割り当てることができることに注意してください。2つの値のそれぞれを次々と同じコレクションに挿入しようとします。 1つのタイプの値のみを含むコレクションをモデル化しようとしている場合、これは明らかに不正確なタイプです。さらに悪いことに、gの定義は、型エラーを引き起こさずに受け入れられます。その結果、このコードのエラーは、それが発生した時点ではフラグが立てられません。代わりに、別のモジュールにある可能性がある &lt;code&gt;g&lt;/code&gt; を使用しようとしたときにのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="5f1d96bc469648f83d30d647d11b32d3f6914897" translate="yes" xml:space="preserve">
          <source>Notice that the type variable &lt;code&gt;a&lt;/code&gt; in the type of &lt;code&gt;MkFoo&lt;/code&gt; does not appear in the data type itself, which is plain &lt;code&gt;Foo&lt;/code&gt;. For example, the following expression is fine:</source>
          <target state="translated">&lt;code&gt;MkFoo&lt;/code&gt; の型の型変数 &lt;code&gt;a&lt;/code&gt; は、データ型自体には表示されないことに注意してください。これは、単純な &lt;code&gt;Foo&lt;/code&gt; です。たとえば、次の式は問題ありません。</target>
        </trans-unit>
        <trans-unit id="c2cacddb0032e02b56801b19bb25767c6b4b2aa5" translate="yes" xml:space="preserve">
          <source>Notice that these rules are not influenced by flag settings in the client module, where the instances are &lt;em&gt;used&lt;/em&gt;. These rules make it possible for a library author to design a library that relies on overlapping instances without the client having to know.</source>
          <target state="translated">これらのルールは、インスタンスが&lt;em&gt;使用される&lt;/em&gt;クライアントモジュールのフラグ設定の影響を受けないことに注意してください。これらのルールにより、ライブラリの作成者は、クライアントが知らなくても、重複するインスタンスに依存するライブラリを設計できます。</target>
        </trans-unit>
        <trans-unit id="f517de781679d2f59e7171cbc1b0d4c1a9102403" translate="yes" xml:space="preserve">
          <source>Notice that this is a tiny bit more restrictive than the expression &lt;code&gt;MkT 42 x&lt;/code&gt; which would not require &lt;code&gt;(Eq a)&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;(Eq a)&lt;/code&gt; 必要としない式 &lt;code&gt;MkT 42 x&lt;/code&gt; よりも少し制限が厳しいことに注意してください。</target>
        </trans-unit>
        <trans-unit id="003f05d1557b084246e0ee7d6debdcbfd568cdc0" translate="yes" xml:space="preserve">
          <source>Notice that we do &lt;em&gt;not&lt;/em&gt; put bangs on nested patterns. For example</source>
          <target state="translated">ネストされたパターンに前髪を付け&lt;em&gt;ない&lt;/em&gt;ことに注意してください。例えば</target>
        </trans-unit>
        <trans-unit id="9bdcc186dbf6e6f1c8fa171c8965b88ff5dc5e8b" translate="yes" xml:space="preserve">
          <source>Notice that we gave a type signature to &lt;code&gt;f&lt;/code&gt;, so GHC had to &lt;em&gt;check&lt;/em&gt; that &lt;code&gt;f&lt;/code&gt; has the specified type. Suppose instead we do not give a type signature, asking GHC to &lt;em&gt;infer&lt;/em&gt; it instead. In this case, GHC will refrain from simplifying the constraint &lt;code&gt;C Int [b]&lt;/code&gt; (for the same reason as before) but, rather than rejecting the program, it will infer the type</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; に型シグネチャを与えたので、GHCは &lt;code&gt;f&lt;/code&gt; が指定された型であることを&lt;em&gt;確認&lt;/em&gt;する&lt;em&gt;必要がある&lt;/em&gt;ことに注意して&lt;em&gt;ください&lt;/em&gt;。代わりに、型シグネチャを与えず、GHCに代わりにそれを&lt;em&gt;推測する&lt;/em&gt;ように要求&lt;em&gt;する&lt;/em&gt;とします。この場合、GHCは（以前と同じ理由で）制約 &lt;code&gt;C Int [b]&lt;/code&gt; の簡略化を控えますが、プログラムを拒否するのではなく、型を推測します&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="15c7b54b4dfbcc9256d5d4ff6fc20f5ba1def337" translate="yes" xml:space="preserve">
          <source>Notice that we named the command &lt;code&gt;:.&lt;/code&gt;, by analogy with the &amp;ldquo;&lt;code&gt;.&lt;/code&gt;&amp;rdquo; Unix shell command that does the same thing.</source>
          <target state="translated">コマンドに名前を付けたことに注意して &lt;code&gt;:.&lt;/code&gt; 、「 &lt;code&gt;.&lt;/code&gt; &amp;rdquo;同じことを行うUnixシェルコマンド。</target>
        </trans-unit>
        <trans-unit id="f58c38490fd1aa839924248ed27f036d2894c6f4" translate="yes" xml:space="preserve">
          <source>Notice that, since &lt;code&gt;Monad&lt;/code&gt; is a constructor class, the instance is a &lt;em&gt;partial application&lt;/em&gt; of the newtype, not the entire left hand side. We can imagine that the type declaration is &amp;ldquo;eta-converted&amp;rdquo; to generate the context of the instance declaration.</source>
          <target state="translated">&lt;code&gt;Monad&lt;/code&gt; はコンストラクタクラスであるため、インスタンスは左側全体ではなく、newtypeの&lt;em&gt;部分的なアプリケーション&lt;/em&gt;であることに注意してください。型宣言が「eta変換」されてインスタンス宣言のコンテキストが生成されると想像できます。</target>
        </trans-unit>
        <trans-unit id="5a032b6c9e39feada9a5daefc6215d234b296f13" translate="yes" xml:space="preserve">
          <source>Notice that, unlike the situation when declaring an existential, there is no &lt;code&gt;forall&lt;/code&gt;, because the &lt;code&gt;Num&lt;/code&gt; constrains the data type&amp;rsquo;s universally quantified type variable &lt;code&gt;a&lt;/code&gt;. A constructor may have both universal and existential type variables: for example, the following two declarations are equivalent:</source>
          <target state="translated">&lt;code&gt;Num&lt;/code&gt; はデータ型の普遍的に数量化された型変数 &lt;code&gt;a&lt;/code&gt; を制約するため、存在を宣言するときの状況とは異なり、 &lt;code&gt;forall&lt;/code&gt; はありません。コンストラクターは、ユニバーサル型変数と存在型変数の両方を持つことができます。たとえば、次の2つの宣言は同等です。</target>
        </trans-unit>
        <trans-unit id="5a05411fd54d44b0e8b85296aa89e70109d6f8ae" translate="yes" xml:space="preserve">
          <source>Notice the &lt;a href=&quot;#pragma-INLINE&quot;&gt;&lt;code&gt;INLINE&lt;/code&gt;&lt;/a&gt;! That prevents &lt;code&gt;(:)&lt;/code&gt; from being inlined when compiling &lt;code&gt;PrelBase&lt;/code&gt;, so that an importing module will &amp;ldquo;see&amp;rdquo; the &lt;code&gt;(:)&lt;/code&gt;, and can match it on the LHS of a rule. &lt;code&gt;INLINE&lt;/code&gt; prevents any inlining happening in the RHS of the &lt;code&gt;INLINE&lt;/code&gt; thing. I regret the delicacy of this.</source>
          <target state="translated">&lt;a href=&quot;#pragma-INLINE&quot;&gt; &lt;code&gt;INLINE&lt;/code&gt; &lt;/a&gt;注意してください！これにより、 &lt;code&gt;PrelBase&lt;/code&gt; のコンパイル時に &lt;code&gt;(:)&lt;/code&gt; がインライン化されないため、インポートモジュールは &lt;code&gt;(:)&lt;/code&gt; を「参照」し、ルールのLHSに一致させることができます。 &lt;code&gt;INLINE&lt;/code&gt; は、 &lt;code&gt;INLINE&lt;/code&gt; のRHSで発生するインライン化を防止します。この繊細さを後悔しています。</target>
        </trans-unit>
        <trans-unit id="dfc12e02833bfccc09f794f1f49ea08204cd679e" translate="yes" xml:space="preserve">
          <source>Notice the two different types reported for the two different occurrences of &lt;code&gt;_x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;_x&lt;/code&gt; の 2つの異なる発生について報告された2つの異なるタイプに注意してください。</target>
        </trans-unit>
        <trans-unit id="6604e09c0f282b92ddefa954435f8ea32da60f44" translate="yes" xml:space="preserve">
          <source>Now &lt;code&gt;g&lt;/code&gt; is inlined into &lt;code&gt;h&lt;/code&gt;, but &lt;code&gt;f&lt;/code&gt;&amp;lsquo;s &lt;code&gt;RULE&lt;/code&gt; has no chance to fire. If instead GHC had first inlined &lt;code&gt;g&lt;/code&gt; into &lt;code&gt;h&lt;/code&gt; then there would have been a better chance that &lt;code&gt;f&lt;/code&gt;&amp;lsquo;s &lt;code&gt;RULE&lt;/code&gt; might fire.</source>
          <target state="translated">ここで &lt;code&gt;g&lt;/code&gt; は &lt;code&gt;h&lt;/code&gt; にインライン化されますが、 &lt;code&gt;f&lt;/code&gt; の &lt;code&gt;RULE&lt;/code&gt; は起動する機会がありません。代わりにGHCが最初に &lt;code&gt;g&lt;/code&gt; を &lt;code&gt;h&lt;/code&gt; にインライン化した場合、 &lt;code&gt;f&lt;/code&gt; の &lt;code&gt;RULE&lt;/code&gt; が起動する可能性が高くなります。</target>
        </trans-unit>
        <trans-unit id="c1fc5a6daa0c6ffe63bac8e9b2d756cf37c94575" translate="yes" xml:space="preserve">
          <source>Now &lt;code&gt;g&lt;/code&gt; is inlined into &lt;code&gt;h&lt;/code&gt;, but &lt;code&gt;f&lt;/code&gt;&amp;rsquo;s RULE has no chance to fire. If instead GHC had first inlined &lt;code&gt;g&lt;/code&gt; into &lt;code&gt;h&lt;/code&gt; then there would have been a better chance that &lt;code&gt;f&lt;/code&gt;&amp;rsquo;s &lt;a href=&quot;#pragma-RULES&quot;&gt;&lt;code&gt;RULES&lt;/code&gt;&lt;/a&gt; might fire.</source>
          <target state="translated">Now &lt;code&gt;g&lt;/code&gt; is inlined into &lt;code&gt;h&lt;/code&gt; , but &lt;code&gt;f&lt;/code&gt; &amp;rsquo;s RULE has no chance to fire. If instead GHC had first inlined &lt;code&gt;g&lt;/code&gt; into &lt;code&gt;h&lt;/code&gt; then there would have been a better chance that &lt;code&gt;f&lt;/code&gt; &amp;rsquo;s &lt;a href=&quot;#pragma-RULES&quot;&gt; &lt;code&gt;RULES&lt;/code&gt; &lt;/a&gt; might fire.</target>
        </trans-unit>
        <trans-unit id="b78c84c1ba9965d82f3eb5258f04e3357ef661af" translate="yes" xml:space="preserve">
          <source>Now a constraint &lt;code&gt;(C (F Bool))&lt;/code&gt; would match both instances. The situation is especially bad because the type instance for &lt;code&gt;F Bool&lt;/code&gt; might be in another module, or even in a module that is not yet written.</source>
          <target state="translated">これで、制約 &lt;code&gt;(C (F Bool))&lt;/code&gt; は両方のインスタンスに一致します。 &lt;code&gt;F Bool&lt;/code&gt; の型インスタンスが別のモジュール、またはまだ作成されていないモジュールにある可能性があるため、状況は特に悪いです。</target>
        </trans-unit>
        <trans-unit id="bc776dd529df85cf6ec0f1c7cad2c546f9d262d6" translate="yes" xml:space="preserve">
          <source>Now although we had two calls to &lt;code&gt;fib&lt;/code&gt; in the program, it is immediately clear that it was the call from &lt;code&gt;f&lt;/code&gt; which took all the time. The functions &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; which are defined in the &lt;code&gt;where&lt;/code&gt; clause in &lt;code&gt;main&lt;/code&gt; are given their own cost centres, &lt;code&gt;main.f&lt;/code&gt; and &lt;code&gt;main.g&lt;/code&gt; respectively.</source>
          <target state="translated">プログラムで &lt;code&gt;fib&lt;/code&gt; への呼び出しが2 回ありましたが、常にかかっていたのは &lt;code&gt;f&lt;/code&gt; からの呼び出しだったことがすぐにわかります。 &lt;code&gt;main&lt;/code&gt; の &lt;code&gt;where&lt;/code&gt; 句で定義されている関数 &lt;code&gt;f&lt;/code&gt; と &lt;code&gt;g&lt;/code&gt; には、それぞれ独自のコストセンター &lt;code&gt;main.f&lt;/code&gt; と &lt;code&gt;main.g&lt;/code&gt; が与えられます。</target>
        </trans-unit>
        <trans-unit id="2dc613132cc81aeb40d770a7a8834847fb2f6b7d" translate="yes" xml:space="preserve">
          <source>Now consider a splice using &lt;code&gt;add1&lt;/code&gt; in a separate module:</source>
          <target state="translated">ここで、別のモジュールで &lt;code&gt;add1&lt;/code&gt; を使用するスプライスを考えます。</target>
        </trans-unit>
        <trans-unit id="89991c287b92501854086e6fe84a0eb23ce3a9d6" translate="yes" xml:space="preserve">
          <source>Now find all instances, or in-scope given constraints, that &lt;em&gt;unify&lt;/em&gt; with the target constraint, but do not &lt;em&gt;match&lt;/em&gt; it. Such non-candidate instances might match when the target constraint is further instantiated. If all of them are incoherent top-level instances, the search succeeds, returning the prime candidate. Otherwise the search fails.</source>
          <target state="translated">ここで、すべてのインスタンス、またはスコープ内の指定された制約を見つけます。これらは、ターゲット制約と&lt;em&gt;統合さ&lt;/em&gt;れますが、&lt;em&gt;一致&lt;/em&gt;しません。このような非候補インスタンスは、ターゲット制約がさらにインスタンス化されるときに一致する可能性があります。それらすべてが一貫性のないトップレベルのインスタンスである場合、検索は成功し、最有力候補が返されます。そうでない場合、検索は失敗します。</target>
        </trans-unit>
        <trans-unit id="ffef5ee2ac0281452ebd5c434b1c32bedfee55fe" translate="yes" xml:space="preserve">
          <source>Now let us explain the additional tags being used in the complete representation:</source>
          <target state="translated">ここで、完全な表現で使用されている追加のタグについて説明します。</target>
        </trans-unit>
        <trans-unit id="7c396d7bbb8219cdfd5349a4df1d272a2d0f39e0" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s have a look at the flow of control. For this we can just start our program under &lt;code&gt;gdb&lt;/code&gt; (or an equivalent debugger) as we would any other native executable,</source>
          <target state="translated">それでは、制御の流れを見てみましょう。このため、他のネイティブ実行可能ファイルと同じように、プログラムを &lt;code&gt;gdb&lt;/code&gt; （または同等のデバッガー）で起動できます。</target>
        </trans-unit>
        <trans-unit id="680befe83eacad29ed4ff9bcb2bacba7e8ba5512" translate="yes" xml:space="preserve">
          <source>Now run the compiler,</source>
          <target state="translated">ここでコンパイラを実行します。</target>
        </trans-unit>
        <trans-unit id="625396a0dc9892499ed6a922372b939b5ec972d5" translate="yes" xml:space="preserve">
          <source>Now run the compiler:</source>
          <target state="translated">ここでコンパイラを実行します。</target>
        </trans-unit>
        <trans-unit id="b4b47a22e45bcc87c6e8f7f606395485b312ab48" translate="yes" xml:space="preserve">
          <source>Now suppose that the type inference engine needs to solve the constraint &lt;code&gt;C Int [Int]&lt;/code&gt;. This constraint matches instances (A), (C) and (D), but the last is more specific, and hence is chosen.</source>
          <target state="translated">次に、型推論エンジンが制約 &lt;code&gt;C Int [Int]&lt;/code&gt; を解決する必要があると仮定します。この制約はインスタンス（A）、（C）、（D）に一致しますが、最後の方がより具体的であるため、選択されます。</target>
        </trans-unit>
        <trans-unit id="b25ed4e4bb0e4d9e8025db5ceef110bd5f3b12df" translate="yes" xml:space="preserve">
          <source>Now suppose that we receive this encoded string as 3 packets that are split up on untidy boundaries: &lt;code&gt;[&quot;hi \xe2&quot;, &quot;\x98&quot;,
 &quot;\x83&quot;]&lt;/code&gt;. We cannot decode the entire Unicode string until we have received all three packets, but we would like to make progress as we receive each one.</source>
          <target state="translated">ここで、このエンコードされた文字列を &lt;code&gt;[&quot;hi \xe2&quot;, &quot;\x98&quot;, &quot;\x83&quot;]&lt;/code&gt; 境界で分割された3つのパケットとして受信するとします：[&quot;hi \ xe2&quot;、 &quot;\ x98&quot;、 &quot;\ x83&quot;]。3つのパケットをすべて受信するまで、Unicode文字列全体をデコードすることはできませんが、それぞれを受信しながら、進行を進めたいと考えています。</target>
        </trans-unit>
        <trans-unit id="2861b41b3f54722c42e97b0121b6f6de624fa90c" translate="yes" xml:space="preserve">
          <source>Now suppose that, in some client module, we are searching for an instance of the &lt;em&gt;target constraint&lt;/em&gt;&lt;code&gt;(C ty1 .. tyn)&lt;/code&gt;. The search works like this:</source>
          <target state="translated">ここで、いくつかのクライアントモジュールで、&lt;em&gt;ターゲット制約&lt;/em&gt; &lt;code&gt;(C ty1 .. tyn)&lt;/code&gt; インスタンスを検索しているとします。検索は次のように機能します。</target>
        </trans-unit>
        <trans-unit id="438cc1997bb44ad791fefe6807da64e3c6115b37" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;lexp&lt;/code&gt; nonterminal is redundant and can be dropped from the grammar.</source>
          <target state="translated">現在、 &lt;code&gt;lexp&lt;/code&gt; 非終端は冗長であり、文法から削除できます。</target>
        </trans-unit>
        <trans-unit id="f816c3eab864d3f8e7a4de157e0cfdc0f3fc8b6c" translate="yes" xml:space="preserve">
          <source>Now the file &lt;code&gt;Adder.dll&lt;/code&gt; can be used from other programming languages. Before calling any functions in Adder it is necessary to call &lt;code&gt;HsStart&lt;/code&gt;, and at the very end call &lt;code&gt;HsEnd&lt;/code&gt;.</source>
          <target state="translated">これで、ファイル &lt;code&gt;Adder.dll&lt;/code&gt; を他のプログラミング言語から使用できます。加算器内の任意の関数を呼び出す前に、呼び出す必要があり &lt;code&gt;HsStart&lt;/code&gt; を、非常に最後のコールで &lt;code&gt;HsEnd&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a42eb01f5e40d8a6ba95b33cb3730256cdc03814" translate="yes" xml:space="preserve">
          <source>Now the inlining of &lt;code&gt;op&lt;/code&gt; is delayed until the rule has a chance to fire. The down-side is that instance declarations must define &lt;code&gt;op_c&lt;/code&gt;, but all other uses should go via &lt;code&gt;op&lt;/code&gt;.</source>
          <target state="translated">今度は、ルールが発動する機会があるまで、 &lt;code&gt;op&lt;/code&gt; のインライン化が遅延します。 &lt;code&gt;op_c&lt;/code&gt; は、インスタンス宣言がop_cを定義する必要があることですが、他のすべての使用は &lt;code&gt;op&lt;/code&gt; を経由する必要があります。</target>
        </trans-unit>
        <trans-unit id="0e94329f358c7c7c6ea83c351b1bf77d44f13a9b" translate="yes" xml:space="preserve">
          <source>Now we can define counters with different underlying implementations:</source>
          <target state="translated">これで、異なる基礎となる実装でカウンタを定義することができるようになりました。</target>
        </trans-unit>
        <trans-unit id="13f588bad21ffa379b7da21f8421e46de69a5837" translate="yes" xml:space="preserve">
          <source>Now we must infer a type for &lt;code&gt;z&lt;/code&gt;. To do so without generalising over kind variables, we must default the kind variables of &lt;code&gt;'MkCompose&lt;/code&gt;. We can easily default &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; to &lt;code&gt;Type&lt;/code&gt;, but &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; would be ill-kinded if defaulted. The definition for &lt;code&gt;z&lt;/code&gt; is thus an error.</source>
          <target state="translated">次に、 &lt;code&gt;z&lt;/code&gt; の型を推測する必要があります。種類変数を一般化せずにこれを行うには、 &lt;code&gt;'MkCompose&lt;/code&gt; の種類変数をデフォルトにする必要があります。 &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; を簡単に &lt;code&gt;Type&lt;/code&gt; にデフォルト設定できますが、 &lt;code&gt;f&lt;/code&gt; と &lt;code&gt;g&lt;/code&gt; をデフォルト設定すると、種類が正しくありません。したがって、 &lt;code&gt;z&lt;/code&gt; の定義はエラーです。</target>
        </trans-unit>
        <trans-unit id="c0f6faa70067f8acaf63ef4e77013da4181317f2" translate="yes" xml:space="preserve">
          <source>Now we would like to be able to use the operations associated with each of those monad transformers on &lt;code&gt;InterpM&lt;/code&gt; actions. Since the uppermost monad transformer of &lt;code&gt;InterpM&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:StateT&quot;&gt;StateT&lt;/a&gt;&lt;/code&gt;, it already has the state operations &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="translated">次に、 &lt;code&gt;InterpM&lt;/code&gt; アクションでこれらのモナド変換子のそれぞれに関連付けられている操作を使用できるようにしたいと思います。 &lt;code&gt;InterpM&lt;/code&gt; の最上位のモナド変換子は &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:StateT&quot;&gt;StateT&lt;/a&gt;&lt;/code&gt; であるため、すでに状態演算 &lt;code&gt;get&lt;/code&gt; および &lt;code&gt;set&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="e6583d556a077c92ce007ce319f478a614b82c53" translate="yes" xml:space="preserve">
          <source>Now we&amp;rsquo;re stuck, since we have no way to refer to &lt;code&gt;a&lt;/code&gt; on the right-hand side of the &lt;code&gt;B&lt;/code&gt; family instance, so this instance doesn&amp;rsquo;t really make sense in a &lt;a href=&quot;#extension-GeneralizedNewtypeDeriving&quot;&gt;&lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">&lt;code&gt;B&lt;/code&gt; ファミリインスタンスの右側に &lt;code&gt;a&lt;/code&gt; を参照する方法がないため、このままでは&lt;a href=&quot;#extension-GeneralizedNewtypeDeriving&quot;&gt; &lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt; &lt;/a&gt;ます。このインスタンスは、GeneralizedNewtypeDeriving設定では実際には意味がありません。</target>
        </trans-unit>
        <trans-unit id="2a56b6491f7450e6b6cbf461a479f7b983410abe" translate="yes" xml:space="preserve">
          <source>Now you are thinking: 'Wow, what a great monad! I wish I could use Reader functionality in MyFavoriteComplexMonad!'. Don't worry. This can be easily done with the &lt;code&gt;&lt;a href=&quot;control-monad-reader#t:ReaderT&quot;&gt;ReaderT&lt;/a&gt;&lt;/code&gt; monad transformer. This example shows how to combine &lt;code&gt;ReaderT&lt;/code&gt; with the IO monad.</source>
          <target state="translated">今、あなたは考えています： 'うわー、なんと素晴らしいモナド！MyFavoriteComplexMonad！でリーダー機能を使用できるといいのですが。心配しないで。これは、 &lt;code&gt;&lt;a href=&quot;control-monad-reader#t:ReaderT&quot;&gt;ReaderT&lt;/a&gt;&lt;/code&gt; モナドトランスフォーマーで簡単に実行できます。この例は、 &lt;code&gt;ReaderT&lt;/code&gt; とIOモナドを組み合わせる方法を示しています。</target>
        </trans-unit>
        <trans-unit id="c30331621c70c268fbe2b12a4ae43098403e94bc" translate="yes" xml:space="preserve">
          <source>Now, before you start compiling, and any time you change the &lt;code&gt;imports&lt;/code&gt; in your program, do &lt;code&gt;make depend&lt;/code&gt; before you do &lt;code&gt;make cool_pgm&lt;/code&gt;. The command &lt;code&gt;ghc -M&lt;/code&gt; will append the needed dependencies to your &lt;code&gt;Makefile&lt;/code&gt;.</source>
          <target state="translated">ここで、コンパイルを開始する前、およびプログラムで &lt;code&gt;imports&lt;/code&gt; を変更するときは &lt;code&gt;make cool_pgm&lt;/code&gt; を &lt;code&gt;make depend&lt;/code&gt; 前に、依存関係を作成してください。コマンド &lt;code&gt;ghc -M&lt;/code&gt; は、必要な依存関係を &lt;code&gt;Makefile&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="bd187ce0a311638f4b81ef33c620a2408b095c6a" translate="yes" xml:space="preserve">
          <source>Now, for each remaining group G, try each type &lt;code&gt;ty&lt;/code&gt; from the default-type list in turn; if setting &lt;code&gt;a = ty&lt;/code&gt; would allow the constraints in G to be completely solved. If so, default &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;ty&lt;/code&gt;.</source>
          <target state="translated">次に、残りの各グループGについて、default-typeリストの各タイプ &lt;code&gt;ty&lt;/code&gt; を順番に試します。 &lt;code&gt;a = ty&lt;/code&gt; を設定すると、Gの制約が完全に解決されます。その場合、デフォルトの &lt;code&gt;a&lt;/code&gt; から &lt;code&gt;ty&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b7ce07c7b8c1ce96092cb2c45e25b07d0cb48d20" translate="yes" xml:space="preserve">
          <source>Now, let&amp;rsquo;s set a breakpoint on the right-hand-side of the second equation of qsort:</source>
          <target state="translated">次に、qsortの2番目の方程式の右辺にブレークポイントを設定します。</target>
        </trans-unit>
        <trans-unit id="0e3828de0ce28186da70eb335d21ada4d2bedf92" translate="yes" xml:space="preserve">
          <source>Now, let's have a look at a decoder for this format.</source>
          <target state="translated">では、このフォーマットのデコーダを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="370b8fafd1f82580290fa5780a4f150c9bfec2a3" translate="yes" xml:space="preserve">
          <source>Now, since &lt;a href=&quot;#ghci-cmd-:force&quot;&gt;&lt;code&gt;:force&lt;/code&gt;&lt;/a&gt; has inspected the runtime value of &lt;code&gt;left&lt;/code&gt;, it has reconstructed its type. We can see the results of this type reconstruction:</source>
          <target state="translated">これで、&lt;a href=&quot;#ghci-cmd-:force&quot;&gt; &lt;code&gt;:force&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;left&lt;/code&gt; のランタイム値を検査したので、型を再構築しました。このタイプの再構成の結果を見ることができます：</target>
        </trans-unit>
        <trans-unit id="088c477373df4be46b91600c2f869d8a58285c64" translate="yes" xml:space="preserve">
          <source>Now, the definition for &lt;code&gt;f&lt;/code&gt; is typechecked, with this type for &lt;code&gt;g&lt;/code&gt; in the type environment.</source>
          <target state="translated">これで、 &lt;code&gt;f&lt;/code&gt; の定義は型チェックされ、型環境では &lt;code&gt;g&lt;/code&gt; のこの型が使用されます。</target>
        </trans-unit>
        <trans-unit id="ccd704ba50674817b795271869557981d0858cb5" translate="yes" xml:space="preserve">
          <source>Now, we run the program:</source>
          <target state="translated">さて、プログラムを実行します。</target>
        </trans-unit>
        <trans-unit id="109085beaaa80ac89858b283a64f7c75d7e5bb12" translate="yes" xml:space="preserve">
          <source>Null</source>
          <target state="translated">Null</target>
        </trans-unit>
        <trans-unit id="d3a26805a2b067d93448f180e6e182bcbb75712c" translate="yes" xml:space="preserve">
          <source>Nullary (no parameter) type classes are enabled with &lt;a href=&quot;#extension-MultiParamTypeClasses&quot;&gt;&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;&lt;/a&gt;; historically, they were enabled with the (now deprecated) &lt;a href=&quot;#extension-NullaryTypeClasses&quot;&gt;&lt;code&gt;NullaryTypeClasses&lt;/code&gt;&lt;/a&gt;. Since there are no available parameters, there can be at most one instance of a nullary class. A nullary type class might be used to document some assumption in a type signature (such as reliance on the Riemann hypothesis) or add some globally configurable settings in a program. For example,</source>
          <target state="translated">Nullary（パラメーターなし）タイプのクラスは&lt;a href=&quot;#extension-MultiParamTypeClasses&quot;&gt; &lt;code&gt;MultiParamTypeClasses&lt;/code&gt; で&lt;/a&gt;有効になります。歴史的に、それらは（現在非推奨の）&lt;a href=&quot;#extension-NullaryTypeClasses&quot;&gt; &lt;code&gt;NullaryTypeClasses&lt;/code&gt; で&lt;/a&gt;有効にされていました。使用可能なパラメーターがないため、nullaryクラスのインスタンスは最大1つです。nullary型クラスを使用して、型シグネチャの一部の仮定（リーマン仮説への依存など）を文書化したり、プログラムでグローバルに構成可能な設定を追加したりできます。例えば、</target>
        </trans-unit>
        <trans-unit id="133e3871ba59491ac637914e2f6d552d2543837b" translate="yes" xml:space="preserve">
          <source>NullaryTypeClasses</source>
          <target state="translated">NullaryTypeClasses</target>
        </trans-unit>
        <trans-unit id="8a24e40402207b8b70cc14eba1867548ac1b09e9" translate="yes" xml:space="preserve">
          <source>Num</source>
          <target state="translated">Num</target>
        </trans-unit>
        <trans-unit id="7207a8516803af416f88657a270437f29009c516" translate="yes" xml:space="preserve">
          <source>NumDecimals</source>
          <target state="translated">NumDecimals</target>
        </trans-unit>
        <trans-unit id="b7baa1d40c4ea29afc9098732bffee2a861a6c44" translate="yes" xml:space="preserve">
          <source>Number</source>
          <target state="translated">Number</target>
        </trans-unit>
        <trans-unit id="6078e33a463c3fc4bf018c6d4892757dd06fd1c8" translate="yes" xml:space="preserve">
          <source>Number of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt;s to read</source>
          <target state="translated">読み取る &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; の数</target>
        </trans-unit>
        <trans-unit id="8d2ec22cff354083eb5de7939c8c294986b55f23" translate="yes" xml:space="preserve">
          <source>Number of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt;s to write</source>
          <target state="translated">書き込む &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; の数</target>
        </trans-unit>
        <trans-unit id="556c2737e8c3dcbc1fd0849ca5c6a723df3e391e" translate="yes" xml:space="preserve">
          <source>Number of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt;s to read</source>
          <target state="translated">Number of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; s to read</target>
        </trans-unit>
        <trans-unit id="7b2587022bb40a8ae81a89efee9f69c81acb8ba8" translate="yes" xml:space="preserve">
          <source>Number of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt;s to write</source>
          <target state="translated">Number of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; s to write</target>
        </trans-unit>
        <trans-unit id="28eceef247b0264d8fe82cd7b701be39bb0b201b" translate="yes" xml:space="preserve">
          <source>Number of bytes Maybe someday: , bytesAlignement :: Word -- ^ Alignement constraint , bytesReadOnly :: Bool -- ^ Shall we embed into a read-only -- section or not , bytesInitialized :: Bool -- ^ False: only use &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:bytesSize&quot;&gt;bytesSize&lt;/a&gt;&lt;/code&gt; to allocate -- an uninitialized region</source>
          <target state="translated">バイト数多分いつか：、bytesAlignement :: Word- ^ Alignement制約、bytesReadOnly :: Bool- ^読み取り専用-セクションに埋め込むかどうか、bytesInitialized :: Bool- ^ False： &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:bytesSize&quot;&gt;bytesSize&lt;/a&gt;&lt;/code&gt; のみを使用割り当てる-初期化されていない領域</target>
        </trans-unit>
        <trans-unit id="8c7e7b8e10141a983d3dd9d9f8df7f5e50f8a877" translate="yes" xml:space="preserve">
          <source>Number of bytes allocated in the heap while in this cost-centre; again, this is the raw number from which we get the &lt;code&gt;%alloc&lt;/code&gt; figure mentioned above.</source>
          <target state="translated">このコストセンター内でヒープに割り当てられたバイト数。繰り返しますが、これは上記の &lt;code&gt;%alloc&lt;/code&gt; の数値を取得する生の数値です。</target>
        </trans-unit>
        <trans-unit id="b7c1e6aab2f730e67e60e3f3630fd512b37f7fd9" translate="yes" xml:space="preserve">
          <source>Number of bytes allocated since the previous GC</source>
          <target state="translated">前回のGCから割り当てられたバイト数</target>
        </trans-unit>
        <trans-unit id="226ebfaaed57810b266577456986b00eeea443ef" translate="yes" xml:space="preserve">
          <source>Number of bytes read (zero for EOF)</source>
          <target state="translated">読み込んだバイト数(EOFの場合はゼロ</target>
        </trans-unit>
        <trans-unit id="a5ef9af163a69873ba44e8fbcba5f8084ad42ee2" translate="yes" xml:space="preserve">
          <source>Number of bytes written</source>
          <target state="translated">書き込まれたバイト数</target>
        </trans-unit>
        <trans-unit id="37d9add7b22f84b749fc0bb781a0c319aa35911b" translate="yes" xml:space="preserve">
          <source>Number of decimal places to render.</source>
          <target state="translated">レンダリングする小数点以下の桁数。</target>
        </trans-unit>
        <trans-unit id="2d0276fde8b8bccf3967e13465adad04dcd3fb55" translate="yes" xml:space="preserve">
          <source>Number of elements in &lt;code&gt;&lt;a href=&quot;data-list-nonempty#t:NonEmpty&quot;&gt;NonEmpty&lt;/a&gt;&lt;/code&gt; list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#t:NonEmpty&quot;&gt;NonEmpty&lt;/a&gt;&lt;/code&gt; リスト内の要素の数。</target>
        </trans-unit>
        <trans-unit id="bfae1057272c15097d6afebcd7248cb367ca7b45" translate="yes" xml:space="preserve">
          <source>Number of hard links to this file.</source>
          <target state="translated">このファイルへのハードリンクの数</target>
        </trans-unit>
        <trans-unit id="219521647d9d3d4445e681b40b5e2a5607f91d09" translate="yes" xml:space="preserve">
          <source>Number of threads used in this GC</source>
          <target state="translated">今回のGCで使用したスレッド数</target>
        </trans-unit>
        <trans-unit id="7e53821f70ae16079c4a6a64c52a91fae645bc5f" translate="yes" xml:space="preserve">
          <source>Numbers</source>
          <target state="translated">Numbers</target>
        </trans-unit>
        <trans-unit id="30a62380404b3b267a5c4e21b5e111455d09031e" translate="yes" xml:space="preserve">
          <source>Numeric</source>
          <target state="translated">Numeric</target>
        </trans-unit>
        <trans-unit id="48663ea04658b1300d2330bd05e7f63994e32176" translate="yes" xml:space="preserve">
          <source>Numeric ID for this user (pw_uid)</source>
          <target state="translated">このユーザの数値 ID (pw_uid)</target>
        </trans-unit>
        <trans-unit id="231f4ec720e19f9416599261f4322593a7b1d213" translate="yes" xml:space="preserve">
          <source>Numeric functions</source>
          <target state="translated">数値関数</target>
        </trans-unit>
        <trans-unit id="f0f578ffa8300a7d47627f52c99db9d0bc7e728b" translate="yes" xml:space="preserve">
          <source>Numeric representations</source>
          <target state="translated">数値表現</target>
        </trans-unit>
        <trans-unit id="7e059a90d732985fd4e5da7181d4f1a4f4554ef6" translate="yes" xml:space="preserve">
          <source>Numeric type classes</source>
          <target state="translated">数値型クラス</target>
        </trans-unit>
        <trans-unit id="d74de684582cb87f5abe203c6987280191b1e915" translate="yes" xml:space="preserve">
          <source>Numeric types</source>
          <target state="translated">数値型</target>
        </trans-unit>
        <trans-unit id="50c7d8c8437705640951d4fdbcb3597372fedc84" translate="yes" xml:space="preserve">
          <source>Numeric.Natural</source>
          <target state="translated">Numeric.Natural</target>
        </trans-unit>
        <trans-unit id="adb496574c9de2fe1e7a86803e148d10ff98d0cb" translate="yes" xml:space="preserve">
          <source>NumericUnderscores</source>
          <target state="translated">NumericUnderscores</target>
        </trans-unit>
        <trans-unit id="4f59093c4c5b281154dbfc53d826d3b6bf440eb2" translate="yes" xml:space="preserve">
          <source>O(1) A variant of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:head&quot;&gt;head&lt;/a&gt;&lt;/code&gt; for non-empty &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;data-text-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt; omits the check for the empty case, so there is an obligation on the programmer to provide a proof that the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; is non-empty.</source>
          <target state="translated">O（1）空でない &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:head&quot;&gt;head&lt;/a&gt;&lt;/code&gt; の変形。 &lt;code&gt;&lt;a href=&quot;data-text-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt; は空のケースのチェックを省略しているため、プログラマーは &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; が空でないことの証明を提供する義務があります。</target>
        </trans-unit>
        <trans-unit id="63618ec7a7277a575e924f0d0594778e294019a2" translate="yes" xml:space="preserve">
          <source>O(1) A variant of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:tail&quot;&gt;tail&lt;/a&gt;&lt;/code&gt; for non-empty &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;data-text-unsafe#v:unsafeTail&quot;&gt;unsafeTail&lt;/a&gt;&lt;/code&gt; omits the check for the empty case, so there is an obligation on the programmer to provide a proof that the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; is non-empty.</source>
          <target state="translated">O（1）空でない &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-list#v:tail&quot;&gt;tail&lt;/a&gt;&lt;/code&gt; のバリアント。 &lt;code&gt;&lt;a href=&quot;data-text-unsafe#v:unsafeTail&quot;&gt;unsafeTail&lt;/a&gt;&lt;/code&gt; は空のケースのチェックを省略しているため、プログラマーは &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; が空でないことの証明を提供する義務があります。</target>
        </trans-unit>
        <trans-unit id="c8953ede0c92282d9907c3f554076613d54579d3" translate="yes" xml:space="preserve">
          <source>O(1) A variant of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:head&quot;&gt;head&lt;/a&gt;&lt;/code&gt; for non-empty &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;data-text-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt; omits the check for the empty case, so there is an obligation on the programmer to provide a proof that the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; is non-empty.</source>
          <target state="translated">O（1）空でない &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:head&quot;&gt;head&lt;/a&gt;&lt;/code&gt; の変形。 &lt;code&gt;&lt;a href=&quot;data-text-unsafe#v:unsafeHead&quot;&gt;unsafeHead&lt;/a&gt;&lt;/code&gt; は空のケースのチェックを省略しているため、プログラマーには &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; が空でないことの証明を提供する義務があります。</target>
        </trans-unit>
        <trans-unit id="79649d853fbbf678201cbb70a910c4cc86a954a3" translate="yes" xml:space="preserve">
          <source>O(1) A variant of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:tail&quot;&gt;tail&lt;/a&gt;&lt;/code&gt; for non-empty &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;data-text-unsafe#v:unsafeTail&quot;&gt;unsafeTail&lt;/a&gt;&lt;/code&gt; omits the check for the empty case, so there is an obligation on the programmer to provide a proof that the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; is non-empty.</source>
          <target state="translated">O（1）空でない &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-list#v:tail&quot;&gt;tail&lt;/a&gt;&lt;/code&gt; のバリアント。 &lt;code&gt;&lt;a href=&quot;data-text-unsafe#v:unsafeTail&quot;&gt;unsafeTail&lt;/a&gt;&lt;/code&gt; は空のケースのチェックを省略しているため、プログラマーには &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; が空でないことの証明を提供する義務があります。</target>
        </trans-unit>
        <trans-unit id="a80a8b2cc5a997d9f243eb68838aa2dff6075584" translate="yes" xml:space="preserve">
          <source>O(1) Adds a character to the front of a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Subject to fusion.</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; の前に文字を追加します。融合する可能性があります。</target>
        </trans-unit>
        <trans-unit id="4205ee874ea222c9bfd093dacb8a59f0c949bce2" translate="yes" xml:space="preserve">
          <source>O(1) Build a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; from a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt;. This value will have &lt;em&gt;no&lt;/em&gt; finalizer associated with it, and will not be garbage collected by Haskell. This operation has O(1) complexity as we already know the final size, so no &lt;em&gt;strlen(3)&lt;/em&gt; is required.</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; ます。この値は持たないだろう&lt;em&gt;何&lt;/em&gt;、それに関連したファイナライザを、そしてゴミはハスケルによって収集されることはありません。最終的なサイズはすでにわかっているため、この操作はO（1）の複雑さであり、&lt;em&gt;strlen（3）&lt;/em&gt;は必要ありません。</target>
        </trans-unit>
        <trans-unit id="3c6e5c48dee8cd2bc0ceaff2d8837913ec349a43" translate="yes" xml:space="preserve">
          <source>O(1) Build a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; from a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt;. This value will have &lt;em&gt;no&lt;/em&gt; finalizer associated with it, and will not be garbage collected by Haskell. This operation has O(1) complexity as we already know the final size, so no &lt;em&gt;strlen(3)&lt;/em&gt; is required.</source>
          <target state="translated">O(1) Build a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; from a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; . This value will have &lt;em&gt;no&lt;/em&gt; finalizer associated with it, and will not be garbage collected by Haskell. This operation has O(1) complexity as we already know the final size, so no &lt;em&gt;strlen(3)&lt;/em&gt; is required.</target>
        </trans-unit>
        <trans-unit id="3f2852686ecf17dc62ec862c9ea8960726fe4924" translate="yes" xml:space="preserve">
          <source>O(1) Build a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; from a malloced &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt;. This value will have a &lt;code&gt;free(3)&lt;/code&gt; finalizer associated to it.</source>
          <target state="translated">O（1）ビルドの &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; mallocで割り当てられから &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; を。この値には、それに関連付けられた &lt;code&gt;free(3)&lt;/code&gt; ファイナライザがあります。</target>
        </trans-unit>
        <trans-unit id="e683e781924b9b59e4e489f06a7297c19c5a65de" translate="yes" xml:space="preserve">
          <source>O(1) Build a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; from a malloced &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt;. This value will have a &lt;code&gt;free(3)&lt;/code&gt; finalizer associated to it.</source>
          <target state="translated">O(1) Build a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; from a malloced &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; . This value will have a &lt;code&gt;free(3)&lt;/code&gt; finalizer associated to it.</target>
        </trans-unit>
        <trans-unit id="e2ab1c87418f21e22791b9f74f9f938ded3ec112" translate="yes" xml:space="preserve">
          <source>O(1) Build a ByteString from a ForeignPtr.</source>
          <target state="translated">O(1)ForeignPtr から ByteString を構築する。</target>
        </trans-unit>
        <trans-unit id="54a20a665c28555de9ad492062514aa96fa4ad77" translate="yes" xml:space="preserve">
          <source>O(1) Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; given a Ptr Word8 to a buffer, a length, and an IO action representing a finalizer. This function is not available on Hugs.</source>
          <target state="translated">O（1）を構築 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; バッファ、長さ、及びファイナライザを表すIOアクションにPtrをWord8与えられています。この機能はHugsでは使用できません。</target>
        </trans-unit>
        <trans-unit id="de476cec8ba99d6fd4661fdd8846b9d97390fcc2" translate="yes" xml:space="preserve">
          <source>O(1) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; に変換します</target>
        </trans-unit>
        <trans-unit id="70b2781938bd0493d75c600f419b4c9160251630" translate="yes" xml:space="preserve">
          <source>O(1) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; に変換します</target>
        </trans-unit>
        <trans-unit id="48defe8058b03923064d67548a2b775944ea08a9" translate="yes" xml:space="preserve">
          <source>O(1) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; をByteStringに変換し &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1135130e054d969e933893cb0c9b0a905884452e" translate="yes" xml:space="preserve">
          <source>O(1) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; をByteStringに変換し &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fcf4ae8a1fb788d406f9d60d282bee6bda3de541" translate="yes" xml:space="preserve">
          <source>O(1) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O(1) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3ef7bf63c625a651be5fd187d2bb2df7563ff2a6" translate="yes" xml:space="preserve">
          <source>O(1) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O(1) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="93a56dcd06fedebb15f1d4c7aafead11af2e67b8" translate="yes" xml:space="preserve">
          <source>O(1) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O(1) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4f0e1171a57671034ff3e2e1e31b9e1dd33fcd53" translate="yes" xml:space="preserve">
          <source>O(1) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O(1) Convert a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ca86ad277b497891880219a763e14c2e60e44f86" translate="yes" xml:space="preserve">
          <source>O(1) Convert a character into a Text. Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="translated">O(1)文字をTextに変換する。融合の対象となります。無効なスカラ値に対して置換を行う。</target>
        </trans-unit>
        <trans-unit id="2d2c9063126a95a29a04dd0bcdd2c4149b975983" translate="yes" xml:space="preserve">
          <source>O(1) Convert a strict &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O（1）厳密な &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; を遅延 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="2784eb6b77a9790550f7d3343addfb99e8ffb8f2" translate="yes" xml:space="preserve">
          <source>O(1) Convert a strict &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; into a lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O（1）厳密な &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; を遅延 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="c54de2b2bb93392704d2290b65ff8789bf48fadf" translate="yes" xml:space="preserve">
          <source>O(1) Deconstruct a ForeignPtr from a ByteString</source>
          <target state="translated">O(1)ByteString から ForeignPtr をデコンストラクトする</target>
        </trans-unit>
        <trans-unit id="e4c550276392b862d05e2ec6841167619ba5e98b" translate="yes" xml:space="preserve">
          <source>O(1) Extract the &lt;code&gt;&lt;a href=&quot;data-bytestring#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; of a ByteString, returning Nothing if it is empty.</source>
          <target state="translated">O（1）ByteStringの &lt;code&gt;&lt;a href=&quot;data-bytestring#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;data-bytestring#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; を抽出し、空の場合はNothingを返します。</target>
        </trans-unit>
        <trans-unit id="f218019d72ba8f90ea322b3f2b6e1aba698a3e17" translate="yes" xml:space="preserve">
          <source>O(1) Extract the &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; of a ByteString, returning Nothing if it is empty.</source>
          <target state="translated">O（1）ByteStringの &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; を抽出し、空の場合はNothingを返します。</target>
        </trans-unit>
        <trans-unit id="21fbbb3d55222802fa13dd27566010dcacacbb85" translate="yes" xml:space="preserve">
          <source>O(1) Extract the elements after the head of a ByteString, which must be non-empty.</source>
          <target state="translated">O(1)空でない必要があるByteStringの先頭の後の要素を抽出します。</target>
        </trans-unit>
        <trans-unit id="5378fc0faa39743c85aac4b42ce79db1e5ef3957" translate="yes" xml:space="preserve">
          <source>O(1) Extract the elements after the head of a ByteString, which must be non-empty. An exception will be thrown in the case of an empty ByteString.</source>
          <target state="translated">O(1)ByteString の先頭以降の要素を抽出します。空の ByteString の場合は例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="f7bb822a81bb37fffbf9ab64b08353c32fd00381" translate="yes" xml:space="preserve">
          <source>O(1) Extract the first element of a ByteString, which must be non-empty.</source>
          <target state="translated">O(1)空でない必要があるByteStringの最初の要素を抽出します。</target>
        </trans-unit>
        <trans-unit id="91fefa55c7e6570a93d3b82592f091c9c1da1c43" translate="yes" xml:space="preserve">
          <source>O(1) Extract the first element of a ByteString, which must be non-empty. An exception will be thrown in the case of an empty ByteString.</source>
          <target state="translated">O(1)ByteString の最初の要素を抽出します。空の ByteString の場合は例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="48adec6ba5891d93d8739199d579814f571004f9" translate="yes" xml:space="preserve">
          <source>O(1) Extract the head and tail of a ByteString, returning Nothing if it is empty.</source>
          <target state="translated">O(1)ByteString の先頭と末尾を抽出し、空の場合は何も返さない。</target>
        </trans-unit>
        <trans-unit id="2a9b4b8518197ecf8a0a278a8275e54c235ada18" translate="yes" xml:space="preserve">
          <source>O(1) Extract the last element of a ByteString, which must be finite and non-empty. An exception will be thrown in the case of an empty ByteString.</source>
          <target state="translated">O(1)ByteString の最後の要素を抽出します。空の ByteString の場合は例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="cd893e262e0101eff2ce68ac9e7922d9a1211337" translate="yes" xml:space="preserve">
          <source>O(1) Extract the last element of a packed string, which must be non-empty.</source>
          <target state="translated">O(1)パックされた文字列の最後の要素を抽出します。</target>
        </trans-unit>
        <trans-unit id="dc52c26904640a5efaa0703c692f739516d37935" translate="yes" xml:space="preserve">
          <source>O(1) Iterate (unsafely) one step forwards through a UTF-16 array, returning the current character and the delta to add to give the next offset to iterate at.</source>
          <target state="translated">O(1)UTF-16 配列を用いて(安全ではないが)一歩前進させ、 カ レ ン ト キ ャ ラ ク タ と 、 次のオ フ セ ッ ト を与え る ために追加す る デ ル タ を返 し て、 次のオ フ セ ッ ト を イ テ ラ ー ト し ます。</target>
        </trans-unit>
        <trans-unit id="0dbb0d476e90cf0bcc5354f708c5afd3b311d028" translate="yes" xml:space="preserve">
          <source>O(1) Iterate one step backwards through a UTF-16 array, returning the current character and the delta to add (i.e. a negative number) to give the next offset to iterate at.</source>
          <target state="translated">O(1)UTF-16 配列を 1 ステップずつ逆算して、 カ レ ン ト キ ャ ラ ク タ と 加算す る デ ル タ (すなわち負の数)を返 し て、 次のオ フ セ ッ ト を与え る ために反復処理を行います。</target>
        </trans-unit>
        <trans-unit id="59362dccb79763a625b4941a41931672d368a885" translate="yes" xml:space="preserve">
          <source>O(1) Iterate one step backwards through a UTF-16 array, returning the delta to add (i.e. a negative number) to give the next offset to iterate at.</source>
          <target state="translated">O(1)UTF-16 配列を 1 ステップずつ逆算して、加算すべきデルタ (すなわち負の数)を返して、次のオフセットを与えます。</target>
        </trans-unit>
        <trans-unit id="8fac424387f182f658cffd67afe9158309c43db4" translate="yes" xml:space="preserve">
          <source>O(1) Iterate one step through a UTF-16 array, returning the delta to add to give the next offset to iterate at.</source>
          <target state="translated">O(1)UTF-16 配列を 1 ステップ繰り返して、次のオフセットを与えるために追加するデルタを返します。</target>
        </trans-unit>
        <trans-unit id="65a9d66f3e8e0dfb5e1e8438073c9c97711420a0" translate="yes" xml:space="preserve">
          <source>O(1) Return all the elements of a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; except the last one. An exception will be thrown in the case of an empty ByteString.</source>
          <target state="translated">O（1）最後のものを除く &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; のすべての要素を返します。ByteStringが空の場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="5d0d1f833e469cba787b59254669273bd03367fb" translate="yes" xml:space="preserve">
          <source>O(1) Return all the elements of a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; except the last one. An exception will be thrown in the case of an empty ByteString.</source>
          <target state="translated">O（1）最後のものを除く &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; のすべての要素を返します。ByteStringが空の場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="e25e541eee9e6dc19f8f7877304db9fdc8b56771" translate="yes" xml:space="preserve">
          <source>O(1) Return the length of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; in units of &lt;code&gt;Word16&lt;/code&gt;. This is useful for sizing a target array appropriately before using &lt;code&gt;unsafeCopyToPtr&lt;/code&gt;.</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; の長さを &lt;code&gt;Word16&lt;/code&gt; の単位で返します。これは、 &lt;code&gt;unsafeCopyToPtr&lt;/code&gt; を使用する前にターゲット配列のサイズを適切に設定するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="198814e3d54d147837c8bc788d2df5104fc80457" translate="yes" xml:space="preserve">
          <source>O(1) Return the prefix of the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;n&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; units in length.</source>
          <target state="translated">O（1）長さが &lt;code&gt;n&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; ユニットの &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; のプレフィックスを返します。</target>
        </trans-unit>
        <trans-unit id="44e581cbb73ca533d5a5e9860a138112dab4675f" translate="yes" xml:space="preserve">
          <source>O(1) Return the prefix of the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;n&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; units in length.</source>
          <target state="translated">O（1）に戻るの接頭 &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;n&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; の長さの単位。</target>
        </trans-unit>
        <trans-unit id="ed973df02b8dc1d8689230668a7fcb34cbaa2b14" translate="yes" xml:space="preserve">
          <source>O(1) Return the suffix of the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, with &lt;code&gt;n&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; units dropped from its beginning.</source>
          <target state="translated">O（1）に戻るの接尾 &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; と、 &lt;code&gt;n&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; の単位はその最初から低下しました。</target>
        </trans-unit>
        <trans-unit id="0f73c293b9765d696b96c79a9f89f07d517cc94e" translate="yes" xml:space="preserve">
          <source>O(1) Return the suffix of the &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, with &lt;code&gt;n&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; units dropped from its beginning.</source>
          <target state="translated">O（1）に戻るの接尾 &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; と、 &lt;code&gt;n&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; の単位はその最初から低下しました。</target>
        </trans-unit>
        <trans-unit id="ee12bce996f9dd611dc521eecfba44efbf2bf08d" translate="yes" xml:space="preserve">
          <source>O(1) Returns all but the last character and the last character of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if empty.</source>
          <target state="translated">O（1）すべてを返しますが、最後の文字との最後の文字 &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 場合は、空。</target>
        </trans-unit>
        <trans-unit id="b000fcc29d0eb5c9e3ab46a4161a3e2dbf9c449d" translate="yes" xml:space="preserve">
          <source>O(1) Returns all but the last character and the last character of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if empty.</source>
          <target state="translated">O（1）すべてを返しますが、最後の文字との最後の文字 &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 場合は、空。</target>
        </trans-unit>
        <trans-unit id="30c5ea714b31776c0c939e953673ed65c738da77" translate="yes" xml:space="preserve">
          <source>O(1) Returns all but the last character of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, which must be non-empty. Subject to fusion.</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; の最後の文字を除くすべてを返します。これは空でない必要があります。融合する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ffc9094d4df7eb7305b9b46fcb8befe4e1d077b5" translate="yes" xml:space="preserve">
          <source>O(1) Returns all but the last character of a Stream Char, which must be non-empty.</source>
          <target state="translated">O(1)Stream Char の最後の文字以外をすべて返します。</target>
        </trans-unit>
        <trans-unit id="d733a5834ddb55e9edc61780b9b4253209d0011f" translate="yes" xml:space="preserve">
          <source>O(1) Returns all characters after the head of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, which must be non-empty. Subject to fusion.</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; の先頭の後のすべての文字を返します。これは空であってはなりません。融合する可能性があります。</target>
        </trans-unit>
        <trans-unit id="c390386103a1f898875da0a1381da3b4f899972c" translate="yes" xml:space="preserve">
          <source>O(1) Returns all characters after the head of a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, which must be non-empty. Subject to fusion.</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; の先頭の後のすべての文字を返します。これは空であってはなりません。融合する可能性があります。</target>
        </trans-unit>
        <trans-unit id="f824be4a587faf7b9a075e83a7d8449d662355c4" translate="yes" xml:space="preserve">
          <source>O(1) Returns all characters after the head of a Stream Char, which must be non-empty.</source>
          <target state="translated">O(1)Stream Char の先頭以降のすべての文字を返します。</target>
        </trans-unit>
        <trans-unit id="5f47a226cede2eb3313a8e93512ec2f3ea9253f9" translate="yes" xml:space="preserve">
          <source>O(1) Returns the first character and remainder of a 'Stream Char', or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if empty. Subject to array fusion.</source>
          <target state="translated">O（1）「ストリーム文字」の最初の文字と残りの部分、または空の場合は &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を返します。アレイフュージョンが必要です。</target>
        </trans-unit>
        <trans-unit id="dd012d16aaa27977d0a8f1becef2a3fd39e9ca06" translate="yes" xml:space="preserve">
          <source>O(1) Returns the first character and remainder of a 'Stream Char', or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if empty. Subject to array fusion.</source>
          <target state="translated">O（1）「StreamChar」の最初の文字と残りを返します。空の場合は &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を返します。アレイフュージョンの対象。</target>
        </trans-unit>
        <trans-unit id="fb95a8c303e35a104867be5f73d3a2e519e841d9" translate="yes" xml:space="preserve">
          <source>O(1) Returns the first character and rest of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if empty. Subject to fusion.</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; の最初の文字と残り、または空の場合は &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を返します。融合する可能性があります。</target>
        </trans-unit>
        <trans-unit id="fba04f0239a7ccecdfe4bb655bf69751ce791569" translate="yes" xml:space="preserve">
          <source>O(1) Returns the first character and rest of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if empty. Subject to fusion.</source>
          <target state="translated">O（1）は、最初の文字と、残りの返し &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 空の場合。融合の対象。</target>
        </trans-unit>
        <trans-unit id="c3de350e1a1bf61a7c0c878585e608e897b9465a" translate="yes" xml:space="preserve">
          <source>O(1) Returns the first character and rest of a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if empty. Subject to fusion.</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; の最初の文字と残り、または空の場合は &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を返します。融合する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ff729b4014cad1c71e442aafb47a38b4d0518749" translate="yes" xml:space="preserve">
          <source>O(1) Returns the first character and rest of a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if empty. Subject to fusion.</source>
          <target state="translated">O（1）は、最初の文字と、残りの返し &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 空の場合。融合の対象。</target>
        </trans-unit>
        <trans-unit id="abd745bbc1f2d744bc4216344ce23057b41261ea" translate="yes" xml:space="preserve">
          <source>O(1) Returns the first character of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, which must be non-empty. Subject to fusion.</source>
          <target state="translated">O（1）空でない必要がある &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; の最初の文字を返します。融合する可能性があります。</target>
        </trans-unit>
        <trans-unit id="0df8ce1324f5fac4bc8e5c75e37600890d277cf3" translate="yes" xml:space="preserve">
          <source>O(1) Returns the first character of a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, which must be non-empty. Subject to fusion.</source>
          <target state="translated">O（1）空でない必要がある &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; の最初の文字を返します。融合する可能性があります。</target>
        </trans-unit>
        <trans-unit id="e7dcd793666506b8a22379fc7f221c60e6a42e20" translate="yes" xml:space="preserve">
          <source>O(1) Returns the first character of a Text, which must be non-empty. Subject to array fusion.</source>
          <target state="translated">O(1)テキス ト の最初の文字を返します。配列の融合の対象となります。</target>
        </trans-unit>
        <trans-unit id="2f58d3fa40d2d24aa915ae0115e301a8e95734bc" translate="yes" xml:space="preserve">
          <source>O(1) Returns the last character of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, which must be non-empty. Subject to fusion.</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; の最後の文字を返します。これは空でない必要があります。融合する可能性があります。</target>
        </trans-unit>
        <trans-unit id="6524f7d79973c429a0db52bab5bb86132b85dc05" translate="yes" xml:space="preserve">
          <source>O(1) Test whether a &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; is empty.</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; が空かどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="7697b61777e432d35abde8141f9ed33264f561d7" translate="yes" xml:space="preserve">
          <source>O(1) Test whether a &lt;code&gt;&lt;a href=&quot;data-bytestring-short-internal#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; is empty.</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;data-bytestring-short-internal#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; が空かどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="c79a107bde05d928aa937a571e1d002de46c859b" translate="yes" xml:space="preserve">
          <source>O(1) Test whether a ByteString is empty.</source>
          <target state="translated">O(1)ByteStringが空かどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="8d9f0edce381f99c9f7942893218a73d880843b7" translate="yes" xml:space="preserve">
          <source>O(1) Tests whether a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; is empty or not. Subject to fusion.</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; が空かどうかをテストします。融合する可能性があります。</target>
        </trans-unit>
        <trans-unit id="c5acba2c60ed95b9b64c17300fc1b52ac0ebb02f" translate="yes" xml:space="preserve">
          <source>O(1) Tests whether a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; is empty or not. Subject to fusion.</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; が空かどうかをテストします。融合する可能性があります。</target>
        </trans-unit>
        <trans-unit id="53b6f63204a6bc565ef947657aecf518015139e0" translate="yes" xml:space="preserve">
          <source>O(1) Tests whether a Stream Char is empty or not.</source>
          <target state="translated">O(1)Stream Char が空であるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="4d91225346f00dbbf19a6af59479e1a0a2cb483b" translate="yes" xml:space="preserve">
          <source>O(1) The empty &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O（1）空の &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9a9d1350802d1b65b3e735520268cfa9d6988d30" translate="yes" xml:space="preserve">
          <source>O(1) The empty &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O（1）空の &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c1faf35ade730014da64f04df752187b12fb2d9a" translate="yes" xml:space="preserve">
          <source>O(1) The empty &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O（1）空の &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c47e1f1ac4b7d54ed000c7f35d97cb1376363515" translate="yes" xml:space="preserve">
          <source>O(1) The empty &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O（1）空の &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="22716aa315ed9621c399cfdccf30a747e639f849" translate="yes" xml:space="preserve">
          <source>O(1) The empty &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O（1）空の &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1fa46a3722601b21767162610c552d11526774af" translate="yes" xml:space="preserve">
          <source>O(1) The empty &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O（1）空の &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="54c2c7f30c834f781e980d0899ac5fb1417351de" translate="yes" xml:space="preserve">
          <source>O(1) The length of a &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; の長さ。</target>
        </trans-unit>
        <trans-unit id="eba9e6f5ca714056e0093cd12bc2aa2b10b4357b" translate="yes" xml:space="preserve">
          <source>O(1) The length of a &lt;code&gt;&lt;a href=&quot;data-bytestring-short-internal#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;data-bytestring-short-internal#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; の長さ。</target>
        </trans-unit>
        <trans-unit id="08bc6b2be18b6d8f73561c3c144fb9857d11bb8f" translate="yes" xml:space="preserve">
          <source>O(1) Unchecked drop of &lt;code&gt;k&lt;/code&gt;&lt;code&gt;Word16&lt;/code&gt;s from the front of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; の前から &lt;code&gt;k&lt;/code&gt; 個の &lt;code&gt;Word16&lt;/code&gt; のチェックされていないドロップ。</target>
        </trans-unit>
        <trans-unit id="d2a475db7c49f1740baff7d13c09a38d90b4368c" translate="yes" xml:space="preserve">
          <source>O(1) Unchecked take of &lt;code&gt;k&lt;/code&gt;&lt;code&gt;Word16&lt;/code&gt;s from the front of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; の前から &lt;code&gt;k&lt;/code&gt; 個の &lt;code&gt;Word16&lt;/code&gt; のチェックされていないテイク。</target>
        </trans-unit>
        <trans-unit id="3ad3b6a808c1165f1cfa2f2b7075eabe2e5fba3b" translate="yes" xml:space="preserve">
          <source>O(1) Unlike &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:cons-39-&quot;&gt;cons'&lt;/a&gt;&lt;/code&gt; is strict in the ByteString that we are consing onto. More precisely, it forces the head and the first chunk. It does this because, for space efficiency, it may coalesce the new byte onto the first 'chunk' rather than starting a new 'chunk'.</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt; とは異なり、 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:cons-39-&quot;&gt;cons'&lt;/a&gt;&lt;/code&gt; は、対象となるByteStringで厳密です。より正確には、ヘッドと最初のチャンクを強制します。これは、スペース効率のために、新しい「チャンク」を開始するのではなく、新しいバイトを最初の「チャンク」に合体させる可能性があるためです。</target>
        </trans-unit>
        <trans-unit id="01126982fe868007a0fc66a14b7386a86df6ae65" translate="yes" xml:space="preserve">
          <source>O(1) Unlike &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:cons-39-&quot;&gt;cons'&lt;/a&gt;&lt;/code&gt; is strict in the ByteString that we are consing onto. More precisely, it forces the head and the first chunk. It does this because, for space efficiency, it may coalesce the new byte onto the first 'chunk' rather than starting a new 'chunk'.</source>
          <target state="translated">O（1） &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt; とは異なり、 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:cons-39-&quot;&gt;cons'&lt;/a&gt;&lt;/code&gt; は、対象となるByteStringで厳密です。より正確には、ヘッドと最初のチャンクを強制します。これは、スペース効率のために、新しい「チャンク」を開始するのではなく、新しいバイトを最初の「チャンク」に合体させる可能性があるためです。</target>
        </trans-unit>
        <trans-unit id="8342f5c1dd2f444af3ebb6236b7a8c8f2bf0d312" translate="yes" xml:space="preserve">
          <source>O(1) construction Use a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; with a function requiring a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O（1）構築 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; を必要とする関数で &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="e4838c340b4983dfa1e7c3816b7f90e67b9654b3" translate="yes" xml:space="preserve">
          <source>O(1) construction Use a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; with a function requiring a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O（1）建設使用 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 要求機能付き &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="37270b96253d8fa8318e6f70f0c87998dddcbcf0" translate="yes" xml:space="preserve">
          <source>O(1) construction Use a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; with a function requiring a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O(1) construction Use a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; with a function requiring a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CString&quot;&gt;CString&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fbe1e53d0405b41a76d441caeef68d8a2d36f9d7" translate="yes" xml:space="preserve">
          <source>O(1) construction Use a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; with a function requiring a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O(1) construction Use a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; with a function requiring a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-string#t:CStringLen&quot;&gt;CStringLen&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a70abeb09e0439b25147d1a32ea87000cb8df126" translate="yes" xml:space="preserve">
          <source>O(1). A &lt;code&gt;Builder&lt;/code&gt; taking a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, satisfying</source>
          <target state="translated">O（1）。A &lt;code&gt;Builder&lt;/code&gt; 取って &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 満たします、</target>
        </trans-unit>
        <trans-unit id="efc4c4f8c38e1bbb82d36caba0cebf4f4ae6de30" translate="yes" xml:space="preserve">
          <source>O(1). A &lt;code&gt;Builder&lt;/code&gt; taking a lazy &lt;code&gt;Text&lt;/code&gt;, satisfying</source>
          <target state="translated">O（1）。怠惰な &lt;code&gt;Text&lt;/code&gt; を取り、満足する &lt;code&gt;Builder&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a71659c80a2aef85809ebd1b024235a1c0c8f814" translate="yes" xml:space="preserve">
          <source>O(1). A &lt;code&gt;Builder&lt;/code&gt; taking a single character, satisfying</source>
          <target state="translated">O（1）。単一の文字を取り、満足する &lt;code&gt;Builder&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c8aac3a51370414a6d1d529198ef3822c42b8755" translate="yes" xml:space="preserve">
          <source>O(1). A Builder taking a &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;, satisfying</source>
          <target state="translated">O（1）。A Builderは取って &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 満たします、</target>
        </trans-unit>
        <trans-unit id="a78b2c60e3d71431683d0a38d58908db6b3e5436" translate="yes" xml:space="preserve">
          <source>O(1). A Builder taking a &lt;code&gt;String&lt;/code&gt;, satisfying</source>
          <target state="translated">O（1）。 &lt;code&gt;String&lt;/code&gt; を取り、満足するビルダー</target>
        </trans-unit>
        <trans-unit id="258f07c76f01be46264e4d02c8cd9928b57a6564" translate="yes" xml:space="preserve">
          <source>O(1). A Builder taking a lazy &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;, satisfying</source>
          <target state="translated">O（1）。怠惰な &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; を取るビルダー、満足</target>
        </trans-unit>
        <trans-unit id="70b3cc0d5f228216be66eec65f6b57e3d525c69e" translate="yes" xml:space="preserve">
          <source>O(1). A Builder taking a single byte, satisfying</source>
          <target state="translated">O(1).を満たす、1 バイトのビルダ。</target>
        </trans-unit>
        <trans-unit id="4a8e367a67805a009ff18cfa3ad1ac144bcf2b63" translate="yes" xml:space="preserve">
          <source>O(1). A Builder taking a single native machine word. The word is written in host order, host endian form, for the machine you're on. On a 64 bit machine the Int is an 8 byte value, on a 32 bit machine, 4 bytes. Values written this way are not portable to different endian or word sized machines, without conversion.</source>
          <target state="translated">O(1).ビルダーは、単一のネイティブマシンの単語を受け取ります。この単語は、あなたが使用しているマシンのホスト順、ホストエンディアン形式で書かれます。64 ビットマシンでは Int は 8 バイト、32 ビットマシンでは 4 バイトの値です。このように書かれた値は、変換なしでは、異なるエンディアンやワードサイズのマシンに移植することはできません。</target>
        </trans-unit>
        <trans-unit id="f047d2d9931d48fdb616d3df74b9eaff92d21452" translate="yes" xml:space="preserve">
          <source>O(1). A Builder taking a single native machine word. The word is written in host order, host endian form, for the machine you're on. On a 64 bit machine the Word is an 8 byte value, on a 32 bit machine, 4 bytes. Values written this way are not portable to different endian or word sized machines, without conversion.</source>
          <target state="translated">O(1).ビルダーは、単一のネイティブマシンの単語を受け取ります。このワードは、あなたが使用しているマシンのホスト順(ホストエンディアン形式)で書かれます。64 ビットマシンでは、ワードは 8 バイト、32 ビットマシンでは 4 バイトの値となります。このように書かれた値は、変換なしでは、異なるエンディアンやワードサイズのマシンに移植することはできません。</target>
        </trans-unit>
        <trans-unit id="2bdbae62296f9dc8c3ecfc46770a3acc9d5025a9" translate="yes" xml:space="preserve">
          <source>O(1). A map of one element.</source>
          <target state="translated">O(1).つの要素のマップ。</target>
        </trans-unit>
        <trans-unit id="6209b5f8471f6cbf7bb350bbdb3f8d270167bd41" translate="yes" xml:space="preserve">
          <source>O(1). A map with a single element.</source>
          <target state="translated">O(1).単一の要素を持つマップ。</target>
        </trans-unit>
        <trans-unit id="9232d201c5916a3136d98f2d2cc954b7d3457758" translate="yes" xml:space="preserve">
          <source>O(1). A set of one element.</source>
          <target state="translated">O(1).つの要素の集合。</target>
        </trans-unit>
        <trans-unit id="dace43eb5a7b150d785e0956aa9b9e6ce114b151" translate="yes" xml:space="preserve">
          <source>O(1). Create a singleton set.</source>
          <target state="translated">O(1).シングルトンセットを作成します。</target>
        </trans-unit>
        <trans-unit id="cedf37f6d0fba366d4f35d73bd4f7c4e3810f0e6" translate="yes" xml:space="preserve">
          <source>O(1). Decompose a list into its head and tail. If the list is empty, returns &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;. If the list is non-empty, returns &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (x, xs)&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is the head of the list and &lt;code&gt;xs&lt;/code&gt; its tail.</source>
          <target state="translated">O（1）。リストを先頭と末尾に分解します。リストが空の場合、 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; を返します。リストが空でない場合、返す &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (x, xs)&lt;/code&gt; 、 &lt;code&gt;x&lt;/code&gt; がリストの先頭で、 &lt;code&gt;xs&lt;/code&gt; 尾を。</target>
        </trans-unit>
        <trans-unit id="acd62fb62d85ccbd3e873eb07f9bf62980e87634" translate="yes" xml:space="preserve">
          <source>O(1). Decompose a map into pieces based on the structure of the underlying tree. This function is useful for consuming a map in parallel.</source>
          <target state="translated">O(1).基底木の構造に基づいてマップを断片に分解します。この関数は、マップを並行して消費するのに便利です。</target>
        </trans-unit>
        <trans-unit id="aaaef29c2922406e0eb9d12c5cb013161ee19ec8" translate="yes" xml:space="preserve">
          <source>O(1). Decompose a set into pieces based on the structure of the underlying tree. This function is useful for consuming a set in parallel.</source>
          <target state="translated">O(1).集合を,基礎となる木の構造に基づいて断片に分解します.この関数は,集合を並列に消費するのに便利です.</target>
        </trans-unit>
        <trans-unit id="f86a0da08a5d4c84252d7184c00eb64c6f9cb7e3" translate="yes" xml:space="preserve">
          <source>O(1). Extract the elements after the head of a list, which must be non-empty.</source>
          <target state="translated">O(1).リストの先頭の後の要素を抽出します。</target>
        </trans-unit>
        <trans-unit id="4632274a52ddc7483885829fac2748ba06921f35" translate="yes" xml:space="preserve">
          <source>O(1). Extract the first element of a list, which must be non-empty.</source>
          <target state="translated">O(1).リストの最初の要素を抽出します。</target>
        </trans-unit>
        <trans-unit id="9f9451fc8b110267f6c8b81ec942700c786fa2d5" translate="yes" xml:space="preserve">
          <source>O(1). Is the map empty?</source>
          <target state="translated">O(1).マップは空ですか?</target>
        </trans-unit>
        <trans-unit id="ee63439003724255f7dba160c74924c248455c3f" translate="yes" xml:space="preserve">
          <source>O(1). Is the set empty?</source>
          <target state="translated">O(1).集合は空ですか?</target>
        </trans-unit>
        <trans-unit id="28bf79774ccbece345be850fd9860024b7d4638d" translate="yes" xml:space="preserve">
          <source>O(1). Is this the empty set?</source>
          <target state="translated">O(1).これは空の集合ですか?</target>
        </trans-unit>
        <trans-unit id="2c5e8173ef50b843bba5a876065a0360b1842abd" translate="yes" xml:space="preserve">
          <source>O(1). Pop the strict &lt;code&gt;Text&lt;/code&gt; we have constructed so far, if any, yielding a new chunk in the result lazy &lt;code&gt;Text&lt;/code&gt;.</source>
          <target state="translated">O（1）。これまでに構築した厳密な &lt;code&gt;Text&lt;/code&gt; がある場合は、ポップして、結果のレイジーな &lt;code&gt;Text&lt;/code&gt; 新しいチャンクを生成します。</target>
        </trans-unit>
        <trans-unit id="982337e8280c6ac9255cf5a12cb1f3c67eab903a" translate="yes" xml:space="preserve">
          <source>O(1). Read a 2 byte Int16 in native host order and host endianness.</source>
          <target state="translated">O(1).2バイトのInt16をネイティブホスト順、ホストエンディアンで読み込みます。</target>
        </trans-unit>
        <trans-unit id="349fd90c038d1d072ecb6fcbb4b74516b5c2e647" translate="yes" xml:space="preserve">
          <source>O(1). Read a 2 byte Word16 in native host order and host endianness.</source>
          <target state="translated">O(1).2 バイトの Word16 をネイティブホスト順、ホストエンディアンで読み取る。</target>
        </trans-unit>
        <trans-unit id="ecdc1757de2dba66b8360f8bde4c845b1aa02fdd" translate="yes" xml:space="preserve">
          <source>O(1). Read a Word32 in native host order and host endianness.</source>
          <target state="translated">O(1).Word32をネイティブホスト順とホストエンディアンで読む。</target>
        </trans-unit>
        <trans-unit id="3e1ef563725a39ca83cb55ef4e772382c9d1bec2" translate="yes" xml:space="preserve">
          <source>O(1). Read a Word64 in native host order and host endianess.</source>
          <target state="translated">O(1).Word64をネイティブホスト順、ホストエンディアンで読む。</target>
        </trans-unit>
        <trans-unit id="1875c222b5c00ce430aed929213073e836f0d3cd" translate="yes" xml:space="preserve">
          <source>O(1). Read a single native machine word in native host order. It works in the same way as &lt;code&gt;&lt;a href=&quot;data-binary-get#v:getWordhost&quot;&gt;getWordhost&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O（1）。ネイティブホストの順序で1つのネイティブマシンワードを読み取ります。 &lt;code&gt;&lt;a href=&quot;data-binary-get#v:getWordhost&quot;&gt;getWordhost&lt;/a&gt;&lt;/code&gt; と同じように機能します。</target>
        </trans-unit>
        <trans-unit id="d1f3e0a204289e7b7025cf4aabe934218e5f2842" translate="yes" xml:space="preserve">
          <source>O(1). Read a single native machine word. The word is read in host order, host endian form, for the machine you're on. On a 64 bit machine the Word is an 8 byte value, on a 32 bit machine, 4 bytes.</source>
          <target state="translated">O(1).単一のネイティブマシンの単語を読み込みます。ワードは、あなたが使用しているマシンのホスト順、ホストエンディアン形式で読み込まれます。64 ビットマシンでは、ワードは 8 バイトの値で、32 ビットマシンでは 4 バイトです。</target>
        </trans-unit>
        <trans-unit id="92857427e318885ee7caede05c631d6ae3b25b9e" translate="yes" xml:space="preserve">
          <source>O(1). Read an Int32 in native host order and host endianness.</source>
          <target state="translated">O(1).Int32をネイティブホスト順とホストエンディアンで読み込む。</target>
        </trans-unit>
        <trans-unit id="a0cddbff751d108cb0cfd4b75e17a5b12bd1f579" translate="yes" xml:space="preserve">
          <source>O(1). Read an Int64 in native host order and host endianess.</source>
          <target state="translated">O(1).Int64をネイティブホストの順番とホストのエンディアンで読み込む。</target>
        </trans-unit>
        <trans-unit id="aac1672ab4255d16440eeecf74a29e257eaa22b2" translate="yes" xml:space="preserve">
          <source>O(1). Test whether a list is empty.</source>
          <target state="translated">O(1).リストが空かどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="e7cb47e9f9b73b3679b0c1295f9026c8631d0fe3" translate="yes" xml:space="preserve">
          <source>O(1). The concatenation of two Builders, an associative operation with identity &lt;code&gt;&lt;a href=&quot;data-binary-builder#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, satisfying</source>
          <target state="translated">O（1）。2つのビルダーの連結、IDが &lt;code&gt;&lt;a href=&quot;data-binary-builder#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; の連想操作、</target>
        </trans-unit>
        <trans-unit id="28ec62e6018014118ef7768573b333a75dfa498f" translate="yes" xml:space="preserve">
          <source>O(1). The empty &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O（1）。空の &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ae24273afe362c721440f979994739048f543806" translate="yes" xml:space="preserve">
          <source>O(1). The empty &lt;code&gt;&lt;a href=&quot;data-bytestring-short-internal#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O（1）。空の &lt;code&gt;&lt;a href=&quot;data-bytestring-short-internal#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3f5c72989966a0e1b490a1c6397635d9efd1c730" translate="yes" xml:space="preserve">
          <source>O(1). The empty Builder, satisfying</source>
          <target state="translated">O(1).を満たす空の Builder は</target>
        </trans-unit>
        <trans-unit id="7be26a840457d7a9cb16b70698725b4acf3c37ca" translate="yes" xml:space="preserve">
          <source>O(1). The empty map.</source>
          <target state="translated">O(1).空の地図です。</target>
        </trans-unit>
        <trans-unit id="bad934cde2e4a22144be650ff0165b94ae35b737" translate="yes" xml:space="preserve">
          <source>O(1). The empty set.</source>
          <target state="translated">O(1).空の集合です。</target>
        </trans-unit>
        <trans-unit id="2ba61cc4f7911b923b0328ff3dc657e0cf1a0c42" translate="yes" xml:space="preserve">
          <source>O(1). The number of elements in the map.</source>
          <target state="translated">O(1).マップの要素数です。</target>
        </trans-unit>
        <trans-unit id="8130a572981e2a1ede611a465660141584ffe399" translate="yes" xml:space="preserve">
          <source>O(1). The number of elements in the set.</source>
          <target state="translated">O(1).集合の要素数です。</target>
        </trans-unit>
        <trans-unit id="08e64bd0db1d1fbedd0a299664b7a171dfd128cd" translate="yes" xml:space="preserve">
          <source>O(1). Write a Word16 in native host order and host endianness. For portability issues see &lt;code&gt;putWordhost&lt;/code&gt;.</source>
          <target state="translated">O（1）。Word16をネイティブホスト順およびホストエンディアンで記述します。移植性の問題については、 &lt;code&gt;putWordhost&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="5fa15d05114ccf3a54a292d7dab956acfddbd619" translate="yes" xml:space="preserve">
          <source>O(1). Write a Word32 in native host order and host endianness. For portability issues see &lt;code&gt;putWordhost&lt;/code&gt;.</source>
          <target state="translated">O（1）。Word32をネイティブホスト順およびホストエンディアンで記述します。移植性の問題については、 &lt;code&gt;putWordhost&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="8a11e780f1a61bda1ac70d54f20308bc95083c79" translate="yes" xml:space="preserve">
          <source>O(1). Write a Word64 in native host order On a 32 bit machine we write two host order Word32s, in big endian form. For portability issues see &lt;code&gt;putWordhost&lt;/code&gt;.</source>
          <target state="translated">O（1）。Word64をネイティブホスト順序で書き込む32ビットマシンでは、2つのホスト順序Word32をビッグエンディアン形式で書き込みます。移植性の問題については、 &lt;code&gt;putWordhost&lt;/code&gt; を参照してください。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
