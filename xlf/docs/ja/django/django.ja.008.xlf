<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="45e66663fc9c49156a42c4c815d1ca9ece7337cd" translate="yes" xml:space="preserve">
          <source>Hour, 24-hour format.</source>
          <target state="translated">時間、24時間形式。</target>
        </trans-unit>
        <trans-unit id="834defb49795704bb66671584938734ef31149af" translate="yes" xml:space="preserve">
          <source>How Django determines the lookups and transforms which are used</source>
          <target state="translated">Django が使用するルックアップとトランスフォームを決定する方法</target>
        </trans-unit>
        <trans-unit id="c430bfd8ea64f441a6249a4392b781c211b8181a" translate="yes" xml:space="preserve">
          <source>How Django discovers language preference</source>
          <target state="translated">Django が言語の好みを発見する方法</target>
        </trans-unit>
        <trans-unit id="332c02dc1e8a1ada0eb887a1ba1863a66b86b9f3" translate="yes" xml:space="preserve">
          <source>How Django discovers translations</source>
          <target state="translated">Django が翻訳を発見する方法</target>
        </trans-unit>
        <trans-unit id="e16df067ba88e72bf0641a55551a8b9e61d360f6" translate="yes" xml:space="preserve">
          <source>How Django knows to UPDATE vs. INSERT</source>
          <target state="translated">Django はどのようにして UPDATE 対 INSERT を知っているのでしょうか?</target>
        </trans-unit>
        <trans-unit id="342461abdfba0eb8d205c5faef1083bcee625984" translate="yes" xml:space="preserve">
          <source>How Django processes a request</source>
          <target state="translated">Django がリクエストを処理する方法</target>
        </trans-unit>
        <trans-unit id="a965dc33e4b23fff03edc6677ddd4a5db2a68137" translate="yes" xml:space="preserve">
          <source>How Django stores passwords</source>
          <target state="translated">Django がパスワードを保存する方法</target>
        </trans-unit>
        <trans-unit id="84049f5f6d42de61077b821036f8551841f5c062" translate="yes" xml:space="preserve">
          <source>How Django uses the sites framework</source>
          <target state="translated">Django がサイトフレームワークを使う方法</target>
        </trans-unit>
        <trans-unit id="58bcd029adac356fe636f2a688e8a3911920d656" translate="yes" xml:space="preserve">
          <source>How applications are loaded</source>
          <target state="translated">アプリケーションのロード方法</target>
        </trans-unit>
        <trans-unit id="ba680964ddbb43280ef340243ccbc0d61802f176" translate="yes" xml:space="preserve">
          <source>How are the backward relationships possible?</source>
          <target state="translated">後方関係はどのようにして可能なのでしょうか?</target>
        </trans-unit>
        <trans-unit id="d26502dd842d87ee4ca401cd3ff22a727c99c3bd" translate="yes" xml:space="preserve">
          <source>How did &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt; know which field of &lt;code&gt;Photo&lt;/code&gt; was the &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt;? By default, &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt; looks for a either a &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; called &lt;code&gt;site&lt;/code&gt; or a &lt;a href=&quot;../models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; called &lt;code&gt;sites&lt;/code&gt; to filter on. If you use a field named something other than &lt;code&gt;site&lt;/code&gt; or &lt;code&gt;sites&lt;/code&gt; to identify which &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; objects your object is related to, then you need to explicitly pass the custom field name as a parameter to &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt; on your model. The following model, which has a field called &lt;code&gt;publish_on&lt;/code&gt;, demonstrates this:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;Photo&lt;/code&gt; フィールドをどのようにして知りましたか？デフォルトでは、&lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt;は、 &lt;code&gt;site&lt;/code&gt; と呼ばれる&lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;または &lt;code&gt;sites&lt;/code&gt; と呼ばれる&lt;a href=&quot;../models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; の&lt;/a&gt;いずれかを検索してフィルタリングします。あなたが以外のものという名前のフィールドを使用する場合 &lt;code&gt;site&lt;/code&gt; または &lt;code&gt;sites&lt;/code&gt; を識別するための&lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt;あなたのオブジェクトが関連するオブジェクトを、あなたは明示的にパラメータとしてカスタムフィールド名を渡す必要があり&lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt;お使いのモデルに。 &lt;code&gt;publish_on&lt;/code&gt; というフィールドを持つ次のモデルは、これを示しています。</target>
        </trans-unit>
        <trans-unit id="418b80ab08e7d31c1d6197daae3222c122081927" translate="yes" xml:space="preserve">
          <source>How errors are displayed</source>
          <target state="translated">エラーの表示方法</target>
        </trans-unit>
        <trans-unit id="4484a6c1ccb775145808167aab3a7812e6a5f96b" translate="yes" xml:space="preserve">
          <source>How invalid variables are handled</source>
          <target state="translated">無効な変数の処理方法</target>
        </trans-unit>
        <trans-unit id="1dd6a17cb4033f4f74df1bb6912b8a28a8074084" translate="yes" xml:space="preserve">
          <source>How it works</source>
          <target state="translated">どのように動作するか</target>
        </trans-unit>
        <trans-unit id="ee4e87f06982bb7102fed5603132079aa0ee2fde" translate="yes" xml:space="preserve">
          <source>How templates are searched and loaded depends on each engine&amp;rsquo;s backend and configuration.</source>
          <target state="translated">テンプレートの検索と読み込みの方法は、各エンジンのバックエンドと構成によって異なります。</target>
        </trans-unit>
        <trans-unit id="e8fc0e3bb00051cc499978898e8d78a09f57c0f8" translate="yes" xml:space="preserve">
          <source>How the documentation is organized</source>
          <target state="translated">ドキュメントはどのように構成されているか</target>
        </trans-unit>
        <trans-unit id="2808360f60d17c835d1d64fb4002b0966b4ab333" translate="yes" xml:space="preserve">
          <source>How this is possible</source>
          <target state="translated">これはどのようにして可能になるのか</target>
        </trans-unit>
        <trans-unit id="0618f72382628efcfa82e8777ab385d847babe02" translate="yes" xml:space="preserve">
          <source>How to add, change and delete flatpages</source>
          <target state="translated">フラットページの追加・変更・削除方法</target>
        </trans-unit>
        <trans-unit id="26a3d16f713fda9a3eb2c25d96fe6ed5d051ad38" translate="yes" xml:space="preserve">
          <source>How to add, change and delete redirects</source>
          <target state="translated">リダイレクトの追加・変更・削除方法</target>
        </trans-unit>
        <trans-unit id="b7425528758ba98909653aaf21600d6df07eeb8c" translate="yes" xml:space="preserve">
          <source>How to deploy with ASGI</source>
          <target state="translated">ASGIでのデプロイ方法</target>
        </trans-unit>
        <trans-unit id="105c9c1c914097c69fddc962d12692f35139f7e7" translate="yes" xml:space="preserve">
          <source>How to deploy with WSGI</source>
          <target state="translated">WSGIでのデプロイ方法</target>
        </trans-unit>
        <trans-unit id="1dc657f6557483d50a954592bea11c5f8db24590" translate="yes" xml:space="preserve">
          <source>How to install Django</source>
          <target state="translated">Djangoのインストール方法</target>
        </trans-unit>
        <trans-unit id="ccdbd153262df55417375bdee52f2912645d9a0e" translate="yes" xml:space="preserve">
          <source>How to install Django on Windows</source>
          <target state="translated">WindowsにDjangoをインストールする方法</target>
        </trans-unit>
        <trans-unit id="4eb1317232cb4cb37edcf659f49ccd3f48d075d1" translate="yes" xml:space="preserve">
          <source>How to log a user in</source>
          <target state="translated">ユーザーのログイン方法</target>
        </trans-unit>
        <trans-unit id="8e97372fd46b1a4c793b964fe51a2e05af8b5bfa" translate="yes" xml:space="preserve">
          <source>How to log a user out</source>
          <target state="translated">ユーザーをログアウトする方法</target>
        </trans-unit>
        <trans-unit id="36c0f9a912898ba68eb09309256b126031c47a47" translate="yes" xml:space="preserve">
          <source>How to raise field-specific validation errors if those fields don&amp;rsquo;t appear in a &lt;code&gt;ModelForm&lt;/code&gt;</source>
          <target state="translated">それらのフィールドが &lt;code&gt;ModelForm&lt;/code&gt; に表示されない場合にフィールド固有の検証エラーを発生させる方法</target>
        </trans-unit>
        <trans-unit id="da4447c72cfc8dee8d3c6513aecab850e658f572" translate="yes" xml:space="preserve">
          <source>How to turn it off</source>
          <target state="translated">消し方</target>
        </trans-unit>
        <trans-unit id="cdb68c618ea1c60ef6ccf6356cdc7abd1131bf29" translate="yes" xml:space="preserve">
          <source>How to use Django with Apache and &lt;code&gt;mod_wsgi&lt;/code&gt;</source>
          <target state="translated">Apacheと &lt;code&gt;mod_wsgi&lt;/code&gt; で Djangoを使用する方法</target>
        </trans-unit>
        <trans-unit id="45a42a0292be71eae6fb17276c919e0ef9a60e58" translate="yes" xml:space="preserve">
          <source>How to use Django with Apache and mod_wsgi</source>
          <target state="translated">Apacheとmod_wsgiでDjangoを使う方法</target>
        </trans-unit>
        <trans-unit id="1c87ea425ad7ce70954526d9a78e6316cc80cb84" translate="yes" xml:space="preserve">
          <source>How to use Django with Daphne</source>
          <target state="translated">ダフネを使ったDjangoの使い方</target>
        </trans-unit>
        <trans-unit id="401f4f18ef241d7a8c42c42c8411a233ec281835" translate="yes" xml:space="preserve">
          <source>How to use Django with Gunicorn</source>
          <target state="translated">Gunicornを使ったDjangoの使い方</target>
        </trans-unit>
        <trans-unit id="303751e55a377e501b33bdf4fa3b46da0f945c83" translate="yes" xml:space="preserve">
          <source>How to use Django with Hypercorn</source>
          <target state="translated">Hypercornを使ったDjangoの使い方</target>
        </trans-unit>
        <trans-unit id="9b88c226e2c4beb580e0f1ed219560527cff4f1e" translate="yes" xml:space="preserve">
          <source>How to use Django with Uvicorn</source>
          <target state="translated">Uvicornを使ったDjangoの使い方</target>
        </trans-unit>
        <trans-unit id="1ccc858c03c14705b686e0bc855cd2943676fefe" translate="yes" xml:space="preserve">
          <source>How to use Django with uWSGI</source>
          <target state="translated">uWSGIを使ったDjangoの使い方</target>
        </trans-unit>
        <trans-unit id="e13e18f3a4a56aeb9973b0c1bdfe43af2d3c3e20" translate="yes" xml:space="preserve">
          <source>How to use it</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="a030b8f9f596ae923525bf1136808679544d64f7" translate="yes" xml:space="preserve">
          <source>How to use sessions</source>
          <target state="translated">セッションの使い方</target>
        </trans-unit>
        <trans-unit id="38ba2a640e385eee2f46de3c7f8be0042cdb0349" translate="yes" xml:space="preserve">
          <source>How validators are run</source>
          <target state="translated">バリデータの実行方法</target>
        </trans-unit>
        <trans-unit id="eb3e14332ead8dd346a65a6a6e145c7ed3afb46a" translate="yes" xml:space="preserve">
          <source>How you use this is up to you, but Django uses it in a couple of ways automatically via a couple of conventions.</source>
          <target state="translated">これをどう使うかはあなた次第ですが、Django はいくつかの規約を介して自動的にいくつかの方法でこれを使います。</target>
        </trans-unit>
        <trans-unit id="a7eed64119997a9da981184d1d2f258373c91e6c" translate="yes" xml:space="preserve">
          <source>However there&amp;rsquo;s a slight shortcut for the above by letting the formset itself deal with the management form:</source>
          <target state="translated">ただし、フォームセット自体に管理フォームを処理させることにより、上記の簡単なショートカットがあります。</target>
        </trans-unit>
        <trans-unit id="6d0edf5671214ffb733ad2d740f03aefdd689c4e" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;Media&lt;/code&gt; objects have some other interesting properties.</source>
          <target state="translated">ただし、 &lt;code&gt;Media&lt;/code&gt; オブジェクトには他にも興味深いプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="1b75e60d0429c5a33209819138b456eab429c1af" translate="yes" xml:space="preserve">
          <source>However, Django can only upgrade passwords that use algorithms mentioned in &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt;, so as you upgrade to new systems you should make sure never to &lt;em&gt;remove&lt;/em&gt; entries from this list. If you do, users using unmentioned algorithms won&amp;rsquo;t be able to upgrade. Hashed passwords will be updated when increasing (or decreasing) the number of PBKDF2 iterations or bcrypt rounds.</source>
          <target state="translated">ただし、Djangoは&lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt;で言及されているアルゴリズムを使用するパスワードのみをアップグレードできるため、新しいシステムにアップグレードするときは、このリストからエントリを&lt;em&gt;削除&lt;/em&gt;しないようにしてください。その場合、言及されていないアルゴリズムを使用しているユーザーはアップグレードできません。ハッシュされたパスワードは、PBKDF2の反復数またはbcryptラウンド数を増やす（または減らす）ときに更新されます。</target>
        </trans-unit>
        <trans-unit id="7dae5e00844414b926a308fba7f2ac67ecafebc1" translate="yes" xml:space="preserve">
          <source>However, Django can only upgrade passwords that use algorithms mentioned in &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt;, so as you upgrade to new systems you should make sure never to &lt;em&gt;remove&lt;/em&gt; entries from this list. If you do, users using unmentioned algorithms won&amp;rsquo;t be able to upgrade. Hashed passwords will be updated when increasing (or decreasing) the number of PBKDF2 iterations, bcrypt rounds, or argon2 attributes.</source>
          <target state="translated">ただし、Djangoは&lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt;に記載されているアルゴリズムを使用するパスワードしかアップグレードできないため、新しいシステムにアップグレードするときは、このリストからエントリを&lt;em&gt;削除&lt;/em&gt;しないようにする必要があります。そうした場合、言及されていないアルゴリズムを使用しているユーザーはアップグレードできなくなります。ハッシュされたパスワードは、PBKDF2の反復、bcryptラウンド、またはargon2属性の数を増やす（または減らす）ときに更新されます。</target>
        </trans-unit>
        <trans-unit id="fee2b1cd4765dc45441956cd26d5a725bff1a79c" translate="yes" xml:space="preserve">
          <source>However, Django provides ways to write custom &lt;a href=&quot;#file-storage&quot;&gt;file storage systems&lt;/a&gt; that allow you to completely customize where and how Django stores files. The second half of this document describes how these storage systems work.</source>
          <target state="translated">ただし、Djangoは、Djangoが&lt;a href=&quot;#file-storage&quot;&gt;ファイルを保存&lt;/a&gt;する場所と方法を完全にカスタマイズできるカスタムファイルストレージシステムを作成する方法を提供します。このドキュメントの後半では、これらのストレージシステムの仕組みについて説明します。</target>
        </trans-unit>
        <trans-unit id="8eb7e9563d786a695961474efff12ea48136b44e" translate="yes" xml:space="preserve">
          <source>However, a big part of the time taken to run a Django &lt;code&gt;TestCase&lt;/code&gt; is consumed by the call to &lt;code&gt;flush&lt;/code&gt; that ensures that you have a clean database at the start of each test run. If you have multiple databases, multiple flushes are required (one for each database), which can be a time consuming activity &amp;ndash; especially if your tests don&amp;rsquo;t need to test multi-database activity.</source>
          <target state="translated">ただし、Django &lt;code&gt;TestCase&lt;/code&gt; の実行にかかる時間の大部分は、 &lt;code&gt;flush&lt;/code&gt; の呼び出しによって消費されます。これにより、各テスト実行の開始時にクリーンなデータベースが確保されます。複数のデータベースがある場合、複数のフラッシュが必要です（データベースごとに1つ）。これは特に、テストでマルチデータベースアクティビティをテストする必要がない場合、時間のかかるアクティビティになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="1e4fa7259e12f87e861c3168d81edd38bb151356" translate="yes" xml:space="preserve">
          <source>However, depending on your requirements, you may choose a different algorithm, or even use a custom algorithm to match your specific security situation. Again, most users shouldn&amp;rsquo;t need to do this &amp;ndash; if you&amp;rsquo;re not sure, you probably don&amp;rsquo;t. If you do, please read on:</source>
          <target state="translated">ただし、要件に応じて、別のアルゴリズムを選択するか、カスタムアルゴリズムを使用して特定のセキュリティ状況に一致させることもできます。繰り返しになりますが、ほとんどのユーザーはこれを行う必要はありません。わからない場合は、おそらく必要ありません。もしそうなら、読んでください：</target>
        </trans-unit>
        <trans-unit id="9fac3d9102b0dac6aef0721b096d54bbdccf3e96" translate="yes" xml:space="preserve">
          <source>However, here it gets slightly complicated. The objects returned by the &lt;code&gt;deserialize&lt;/code&gt; iterator &lt;em&gt;aren&amp;rsquo;t&lt;/em&gt; regular Django objects. Instead, they are special &lt;code&gt;DeserializedObject&lt;/code&gt; instances that wrap a created &amp;ndash; but unsaved &amp;ndash; object and any associated relationship data.</source>
          <target state="translated">ただし、ここでは少し複雑になります。 &lt;code&gt;deserialize&lt;/code&gt; イテレーターによって返されるオブジェクトは、通常のDjangoオブジェクトで&lt;em&gt;はありません&lt;/em&gt;。代わりに、作成された（ただし保存されていない）オブジェクトと関連する関係データをラップする特別な &lt;code&gt;DeserializedObject&lt;/code&gt; インスタンスです。</target>
        </trans-unit>
        <trans-unit id="c081ae39f8041417e994469fcd2bf0623ae3ac98" translate="yes" xml:space="preserve">
          <source>However, if &lt;code&gt;p&lt;/code&gt; in the above example was &lt;em&gt;not&lt;/em&gt; a &lt;code&gt;Restaurant&lt;/code&gt; (it had been created directly as a &lt;code&gt;Place&lt;/code&gt; object or was the parent of some other class), referring to &lt;code&gt;p.restaurant&lt;/code&gt; would raise a &lt;code&gt;Restaurant.DoesNotExist&lt;/code&gt; exception.</source>
          <target state="translated">ただし、上記の例の &lt;code&gt;p&lt;/code&gt; が &lt;code&gt;Restaurant&lt;/code&gt; &lt;em&gt;ではなかっ&lt;/em&gt;た場合（ &lt;code&gt;Place&lt;/code&gt; オブジェクトとして直接作成されたか、他のクラスの親であった場合）、 &lt;code&gt;p.restaurant&lt;/code&gt; を参照すると &lt;code&gt;Restaurant.DoesNotExist&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="2344053661dea4c49a4bf5f3fa14735765590c54" translate="yes" xml:space="preserve">
          <source>However, if an element of &lt;code&gt;list_display&lt;/code&gt; represents a certain database field, you can indicate this fact by setting the &lt;code&gt;admin_order_field&lt;/code&gt; attribute of the item.</source>
          <target state="translated">ただし、 &lt;code&gt;list_display&lt;/code&gt; の要素が特定のデータベースフィールドを表す場合は、アイテムの &lt;code&gt;admin_order_field&lt;/code&gt; 属性を設定することでこの事実を示すことができます。</target>
        </trans-unit>
        <trans-unit id="41eb48668d3b5ceb1113bcdd82344815a9a6c016" translate="yes" xml:space="preserve">
          <source>However, if an uploaded file is too large, Django will write the uploaded file to a temporary file stored in your system&amp;rsquo;s temporary directory. On a Unix-like platform this means you can expect Django to generate a file called something like &lt;code&gt;/tmp/tmpzfp6I6.upload&lt;/code&gt;. If an upload is large enough, you can watch this file grow in size as Django streams the data onto disk.</source>
          <target state="translated">ただし、アップロードされたファイルが大きすぎる場合、Djangoはアップロードされたファイルをシステムの一時ディレクトリに保存されている一時ファイルに書き込みます。Unixライクなプラットフォームでは、これはDjangoが &lt;code&gt;/tmp/tmpzfp6I6.upload&lt;/code&gt; のようなファイルを生成することを期待できることを意味します。アップロードが十分に大きければ、Djangoがデータをディスクにストリーミングするときにこのファイルのサイズが大きくなるのを見ることができます。</target>
        </trans-unit>
        <trans-unit id="a0fbd7284b4e1524d1854eb5de380f1d3cf243f6" translate="yes" xml:space="preserve">
          <source>However, if the &lt;code&gt;annotate()&lt;/code&gt; clause precedes the &lt;code&gt;values()&lt;/code&gt; clause, the annotations will be generated over the entire query set. In this case, the &lt;code&gt;values()&lt;/code&gt; clause only constrains the fields that are generated on output.</source>
          <target state="translated">ただし、 &lt;code&gt;annotate()&lt;/code&gt; 句が &lt;code&gt;values()&lt;/code&gt; （）句の前にある場合、アノテーションはクエリセット全体に生成されます。この場合、 &lt;code&gt;values()&lt;/code&gt; 句は、出力時に生成されるフィールドのみを制約します。</target>
        </trans-unit>
        <trans-unit id="6578d295eb15a87e1a1078a730cb3b542371e4d0" translate="yes" xml:space="preserve">
          <source>However, if the entire queryset has already been evaluated, the cache will be checked instead:</source>
          <target state="translated">ただし、クエリセット全体がすでに評価されている場合は、代わりにキャッシュがチェックされます。</target>
        </trans-unit>
        <trans-unit id="fbe9a3149e46d75becca6ac25b6ad60602731de4" translate="yes" xml:space="preserve">
          <source>However, if the feed format is a spin-off of RSS or Atom (i.e. &lt;a href=&quot;http://georss.org/&quot;&gt;GeoRSS&lt;/a&gt;, Apple&amp;rsquo;s &lt;a href=&quot;https://help.apple.com/itc/podcasts_connect/#/itcb54353390&quot;&gt;iTunes podcast format&lt;/a&gt;, etc.), you&amp;rsquo;ve got a better choice. These types of feeds typically add extra elements and/or attributes to the underlying format, and there are a set of methods that &lt;code&gt;SyndicationFeed&lt;/code&gt; calls to get these extra attributes. Thus, you can subclass the appropriate feed generator class (&lt;code&gt;Atom1Feed&lt;/code&gt; or &lt;code&gt;Rss201rev2Feed&lt;/code&gt;) and extend these callbacks. They are:</source>
          <target state="translated">ただし、フィード形式がRSSまたはAtomのスピンオフである場合（つまり、&lt;a href=&quot;http://georss.org/&quot;&gt;GeoRSS&lt;/a&gt;、Appleの&lt;a href=&quot;https://help.apple.com/itc/podcasts_connect/#/itcb54353390&quot;&gt;iTunesポッドキャスト形式&lt;/a&gt;など）、より適切な選択肢があります。これらのタイプのフィードは通常、基になるフォーマットに追加の要素や属性を追加し、 &lt;code&gt;SyndicationFeed&lt;/code&gt; がこれらの追加の属性を取得するために呼び出す一連のメソッドがあります。したがって、適切なフィードジェネレータクラス（ &lt;code&gt;Atom1Feed&lt;/code&gt; または &lt;code&gt;Rss201rev2Feed&lt;/code&gt; ）をサブクラス化し、これらのコールバックを拡張できます。彼らです：</target>
        </trans-unit>
        <trans-unit id="42ab22e0bac3843886f0c1daf3e0597991c18711" translate="yes" xml:space="preserve">
          <source>However, if the feed format is a spin-off of RSS or Atom (i.e. &lt;a href=&quot;http://georss.org/&quot;&gt;GeoRSS&lt;/a&gt;, Apple&amp;rsquo;s &lt;a href=&quot;https://www.apple.com/itunes/podcasts/specs.html&quot;&gt;iTunes podcast format&lt;/a&gt;, etc.), you&amp;rsquo;ve got a better choice. These types of feeds typically add extra elements and/or attributes to the underlying format, and there are a set of methods that &lt;code&gt;SyndicationFeed&lt;/code&gt; calls to get these extra attributes. Thus, you can subclass the appropriate feed generator class (&lt;code&gt;Atom1Feed&lt;/code&gt; or &lt;code&gt;Rss201rev2Feed&lt;/code&gt;) and extend these callbacks. They are:</source>
          <target state="translated">ただし、フィード形式がRSSまたはAtomから&lt;a href=&quot;http://georss.org/&quot;&gt;派生したもの&lt;/a&gt;（つまり、GeoRSS、Appleの&lt;a href=&quot;https://www.apple.com/itunes/podcasts/specs.html&quot;&gt;iTunesポッドキャスト形式&lt;/a&gt;など）の場合は、より適切な選択肢があります。これらのタイプのフィードは通常、基礎となるフォーマットに追加の要素や属性を追加し、 &lt;code&gt;SyndicationFeed&lt;/code&gt; がこれらの追加の属性を取得するために呼び出すメソッドのセットがあります。したがって、適切なフィードジェネレータクラス（ &lt;code&gt;Atom1Feed&lt;/code&gt; または &lt;code&gt;Rss201rev2Feed&lt;/code&gt; ）をサブクラス化して、これらのコールバックを拡張できます。彼らです：</target>
        </trans-unit>
        <trans-unit id="a498b0269f9b28570de87c0de9c651cc95df7a39" translate="yes" xml:space="preserve">
          <source>However, if the primary key of &lt;code&gt;p&lt;/code&gt; is already in use on the &lt;code&gt;second&lt;/code&gt; database, the existing object in the &lt;code&gt;second&lt;/code&gt; database will be overridden when &lt;code&gt;p&lt;/code&gt; is saved.</source>
          <target state="translated">ただし、 &lt;code&gt;p&lt;/code&gt; の主キーがすでに &lt;code&gt;second&lt;/code&gt; データベースで使用されている場合、 &lt;code&gt;p&lt;/code&gt; を保存すると、 &lt;code&gt;second&lt;/code&gt; データベースの既存のオブジェクトが上書きされます。</target>
        </trans-unit>
        <trans-unit id="0f8b6e26d41ac062816981cbdb05f3e271c08d87" translate="yes" xml:space="preserve">
          <source>However, if we add natural key handling to Person, the fixture becomes much more humane. To add natural key handling, you define a default Manager for Person with a &lt;code&gt;get_by_natural_key()&lt;/code&gt; method. In the case of a Person, a good natural key might be the pair of first and last name:</source>
          <target state="translated">ただし、Personに自然なキー処理を追加すると、フィクスチャはより人道的になります。自然なキー処理を追加するには、 &lt;code&gt;get_by_natural_key()&lt;/code&gt; メソッドでPersonのデフォルトのManagerを定義します。Personの場合、適切な自然キーは、姓と名のペアです。</target>
        </trans-unit>
        <trans-unit id="4eb21e18a9f005242b43b8b964308b3ae898644d" translate="yes" xml:space="preserve">
          <source>However, if you have a model that uses &lt;a href=&quot;db/models#multi-table-inheritance&quot;&gt;multi-table inheritance&lt;/a&gt;, you also need to serialize all of the base classes for the model. This is because only the fields that are locally defined on the model will be serialized. For example, consider the following models:</source>
          <target state="translated">ただし、&lt;a href=&quot;db/models#multi-table-inheritance&quot;&gt;マルチテーブル継承&lt;/a&gt;を使用するモデルがある場合は、モデルのすべての基本クラスをシリアル化する必要もあります。これは、モデルでローカルに定義されているフィールドのみがシリアル化されるためです。たとえば、次のモデルを考えます。</target>
        </trans-unit>
        <trans-unit id="cd236b305b5929c0eefa9d1f880696309cfb3535" translate="yes" xml:space="preserve">
          <source>However, if you put synchronous middleware between an ASGI server and an asynchronous view, it will have to switch into sync mode for the middleware and then back to async mode for the view. Django will also hold the sync thread open for middleware exception propagation. This may not be noticeable at first, but adding this penalty of one thread per request can remove any async performance advantage.</source>
          <target state="translated">しかし、ASGI サーバと非同期ビューの間に同期ミドルウェアを置いた場合、ミドルウェアは同期モードに切り替え、ビューは非同期モードに戻さなければなりません。また、Django はミドルウェアの例外伝播のために同期スレッドをオープンにしておきます。これは最初は目立たないかもしれませんが、1 リクエストあたり 1 スレッドのペナルティを追加することで、非同期のパフォーマンスの利点を取り除くことができます。</target>
        </trans-unit>
        <trans-unit id="96cd9777ad909b92b73d8ba9adcf21e6feb2539e" translate="yes" xml:space="preserve">
          <source>However, if you use cache decorators on individual views, the CSRF middleware will not yet have been able to set the Vary header or the CSRF cookie, and the response will be cached without either one. In this case, on any views that will require a CSRF token to be inserted you should use the &lt;a href=&quot;#django.views.decorators.csrf.csrf_protect&quot;&gt;&lt;code&gt;django.views.decorators.csrf.csrf_protect()&lt;/code&gt;&lt;/a&gt; decorator first:</source>
          <target state="translated">ただし、個々のビューでキャッシュデコレーターを使用する場合、CSRFミドルウェアはまだVaryヘッダーまたはCSRF Coo​​kieを設定できず、応答はどちらかがなければキャッシュされます。この場合、CSRFトークンを挿入する必要があるビューでは、&lt;a href=&quot;#django.views.decorators.csrf.csrf_protect&quot;&gt; &lt;code&gt;django.views.decorators.csrf.csrf_protect()&lt;/code&gt; &lt;/a&gt;デコレーターを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="2789f39b8e2c7846604c30d7ad18b293d2ccdb5b" translate="yes" xml:space="preserve">
          <source>However, if you want to use a different widget for a field, you can use the &lt;a href=&quot;fields#django.forms.Field.widget&quot;&gt;&lt;code&gt;widget&lt;/code&gt;&lt;/a&gt; argument on the field definition. For example:</source>
          <target state="translated">ただし、フィールドに別のウィジェットを使用する場合は、フィールド定義で&lt;a href=&quot;fields#django.forms.Field.widget&quot;&gt; &lt;code&gt;widget&lt;/code&gt; &lt;/a&gt;引数を使用できます。例えば：</target>
        </trans-unit>
        <trans-unit id="9080c7a129504fb41e106fa867a1842a2d8ca3e7" translate="yes" xml:space="preserve">
          <source>However, if you want to write fully-asynchronous tests for a Django project, you will need to take several things into account.</source>
          <target state="translated">しかし、Django プロジェクトのために完全に非同期のテストを書きたい場合、いくつかのことを考慮に入れる必要があります。</target>
        </trans-unit>
        <trans-unit id="ca0193672aea0bbf1dc1e95a90a928b931d3a8af" translate="yes" xml:space="preserve">
          <source>However, if you&amp;rsquo;re using SQLite or MySQL with MyISAM tables, there is no enforced referential integrity; as a result, you may be able to &amp;lsquo;fake&amp;rsquo; cross database foreign keys. However, this configuration is not officially supported by Django.</source>
          <target state="translated">ただし、MyISAMテーブルでSQLiteまたはMySQLを使用している場合、強制的な参照整合性はありません。その結果、データベース間の外部キーを「偽造」できる可能性があります。ただし、この設定はDjangoによって正式にサポートされていません。</target>
        </trans-unit>
        <trans-unit id="27aa3c10d7ffcec8e1fa56d52af589198f2988d2" translate="yes" xml:space="preserve">
          <source>However, if you&amp;rsquo;re using a decorator, the same opportunities do not exist. Any behavior defined in a decorator is handled immediately.</source>
          <target state="translated">ただし、デコレータを使用している場合、同じ機会は存在しません。デコレータで定義された動作はすべてすぐに処理されます。</target>
        </trans-unit>
        <trans-unit id="2319f17aafcae6e92434d5e3bae08aafd1a79a99" translate="yes" xml:space="preserve">
          <source>However, it can sometimes be beneficial to allow decorators or middleware to modify a response &lt;em&gt;after&lt;/em&gt; it has been constructed by the view. For example, you may want to change the template that is used, or put additional data into the context.</source>
          <target state="translated">ただし、ビューによって構築された&lt;em&gt;後&lt;/em&gt;、デコレータまたはミドルウェアが応答を変更できるようにすると、有益な場合があります。たとえば、使用するテンプレートを変更したり、コンテキストに追加のデータを入れたりすることができます。</target>
        </trans-unit>
        <trans-unit id="b4fe8063e2e1e12bacb424e98275f1830bf5cfe7" translate="yes" xml:space="preserve">
          <source>However, it may not always be appropriate to use localized values &amp;ndash; for example, if you&amp;rsquo;re outputting JavaScript or XML that is designed to be machine-readable, you will always want unlocalized values. You may also want to use localization in selected templates, rather than using localization everywhere.</source>
          <target state="translated">ただし、ローカライズされた値を使用することが常に適切であるとは限りません。たとえば、機械可読に設計されたJavaScriptまたはXMLを出力する場合、ローカライズされていない値が常に必要になります。すべての場所でローカリゼーションを使用するのではなく、選択したテンプレートでローカリゼーションを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="2c21caaedc7a94be4767a92a207cc019af5c1e0f" translate="yes" xml:space="preserve">
          <source>However, it will almost always be faster to do this work at lower rather than higher levels. At higher levels the system has to deal with objects through multiple levels of abstraction and layers of machinery.</source>
          <target state="translated">しかし、ほとんどの場合、この作業は高レベルではなく低レベルで行った方が速くなります。より高いレベルでは、システムは複数の抽象化レベルと機械の層を介してオブジェクトを処理しなければなりません。</target>
        </trans-unit>
        <trans-unit id="1b669d8e47b653ff4d42be16c51c4790d279903e" translate="yes" xml:space="preserve">
          <source>However, pluralization is not this simple in all languages. If the language does not support pluralization, an empty value is provided.</source>
          <target state="translated">しかし、すべての言語で複数化はこのように単純ではありません。その言語が複数化をサポートしていない場合は、空の値が与えられます。</target>
        </trans-unit>
        <trans-unit id="9f3bfc1533fbc7360133c35d3f551767f73e5bf9" translate="yes" xml:space="preserve">
          <source>However, running with &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;False&lt;/code&gt; means you&amp;rsquo;ll never see errors generated by your site &amp;ndash; everyone will instead see your public error pages. You need to keep track of errors that occur in deployed sites, so Django can be configured to create reports with details about those errors.</source>
          <target state="translated">ただし、&lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;False&lt;/code&gt; に設定して実行すると、サイトによって生成されたエラーは表示されなくなります。代わりに、公開エラーページが全員に表示されます。デプロイされたサイトで発生するエラーを追跡する必要があるため、Djangoはこれらのエラーの詳細を含むレポートを作成するように構成できます。</target>
        </trans-unit>
        <trans-unit id="a75d2a7d5098c093e2c9517e3afbe9ca4b271de9" translate="yes" xml:space="preserve">
          <source>However, some databases are more capable than others when it comes to schema migrations; some of the caveats are covered below.</source>
          <target state="translated">しかし、データベースの中には、スキーマの移行に関しては他のデータベースよりも能力が高いものもあります。</target>
        </trans-unit>
        <trans-unit id="e47de287b75e3011e426c42a0e9ee087f660cd19" translate="yes" xml:space="preserve">
          <source>However, sometimes certain types of information may be too sensitive and thus may not be appropriate to be kept track of, for example a user&amp;rsquo;s password or credit card number. So in addition to filtering out settings that appear to be sensitive as described in the &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; documentation, Django offers a set of function decorators to help you control which information should be filtered out of error reports in a production environment (that is, where &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;False&lt;/code&gt;): &lt;a href=&quot;#django.views.decorators.debug.sensitive_variables&quot;&gt;&lt;code&gt;sensitive_variables()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.views.decorators.debug.sensitive_post_parameters&quot;&gt;&lt;code&gt;sensitive_post_parameters()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ただし、特定の種類の情報は機密性が高すぎるため、ユーザーのパスワードやクレジットカード番号などを追跡するのに適さない場合があります。したがって、&lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;ドキュメントで説明されているように、機密と思われる設定を除外することに加えて、Djangoは一連の関数デコレータを提供して、本番環境（つまり、&lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;がある場所）でエラーレポートから除外する情報を制御するのに役立ちます &lt;code&gt;False&lt;/code&gt; に設定）：&lt;a href=&quot;#django.views.decorators.debug.sensitive_variables&quot;&gt; &lt;code&gt;sensitive_variables()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#django.views.decorators.debug.sensitive_post_parameters&quot;&gt; &lt;code&gt;sensitive_post_parameters()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e4b608e0433096c6cd9a3edf695ce8e00e708ffc" translate="yes" xml:space="preserve">
          <source>However, the &lt;code&gt;self.my_view&lt;/code&gt; function registered above suffers from two problems:</source>
          <target state="translated">ただし、上記で登録された &lt;code&gt;self.my_view&lt;/code&gt; 関数には2つの問題があります。</target>
        </trans-unit>
        <trans-unit id="fd1a9bdffd29bc1f50c4d99a898040993ccd7d60" translate="yes" xml:space="preserve">
          <source>However, the indexing and slicing are not performed at the database level. If you have a large number of &lt;code&gt;Person&lt;/code&gt; objects in your database, it is more efficient to limit the query at the SQL level:</source>
          <target state="translated">ただし、インデックス作成とスライスはデータベースレベルでは実行されません。データベースに多数の &lt;code&gt;Person&lt;/code&gt; オブジェクトがある場合、SQLレベルでクエリを制限する方が効率的です。</target>
        </trans-unit>
        <trans-unit id="e7a99e7174b52626783c113021c1e91d1c0c4176" translate="yes" xml:space="preserve">
          <source>However, the result will be slightly different if you use a &lt;code&gt;values()&lt;/code&gt; clause:</source>
          <target state="translated">ただし、 &lt;code&gt;values()&lt;/code&gt; 句を使用した場合、結果は少し異なります。</target>
        </trans-unit>
        <trans-unit id="c00b388280770d80bee839b88012bad935795d5a" translate="yes" xml:space="preserve">
          <source>However, the task of writing tests is a lot more fulfilling than spending hours testing your application manually or trying to identify the cause of a newly-introduced problem.</source>
          <target state="translated">しかし、テストを書く作業は、アプリケーションを手動でテストしたり、新たに導入された問題の原因を特定しようとしたりして何時間も費やすよりも、ずっと充実しています。</target>
        </trans-unit>
        <trans-unit id="2e4d9a12485243a42b040d170ce31a6c9a19eb8a" translate="yes" xml:space="preserve">
          <source>However, these conversions may fail around DST transitions, which means you aren&amp;rsquo;t getting the full benefits of time zone support yet. Also, you&amp;rsquo;re likely to run into a few problems because it&amp;rsquo;s impossible to compare a naive datetime with an aware datetime. Since Django now gives you aware datetimes, you&amp;rsquo;ll get exceptions wherever you compare a datetime that comes from a model or a form with a naive datetime that you&amp;rsquo;ve created in your code.</source>
          <target state="translated">ただし、これらの変換はDSTの移行の前後で失敗する可能性があります。つまり、タイムゾーンサポートのメリットをまだ十分に活用できていません。また、単純な日時と認識されている日時を比較することは不可能であるため、いくつかの問題が発生する可能性があります。Djangoは日付時刻を認識できるようになったため、モデルまたはフォームからの日付時刻を、コードで作成した単純な日付時刻と比較すると、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="954cc1f0e6626e70ed6d7f67879580da584dd1bb" translate="yes" xml:space="preserve">
          <source>However, they are not magic solutions to performance problems, and they&amp;rsquo;re unlikely to bring better than marginal gains to sites that don&amp;rsquo;t already do the more basic things the right way.</source>
          <target state="translated">ただし、これらはパフォーマンスの問題に対する魔法の解決策ではなく、基本的なことを正しく行っていないサイトに限界以上の利益をもたらす可能性はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="d45f028bb66fb35103d15fb2e1d90e37b946acf8" translate="yes" xml:space="preserve">
          <source>However, this has a downside: receiving all datetimes in local time makes datetime arithmetic more tricky &amp;mdash; you must call the &lt;code&gt;normalize()&lt;/code&gt; method provided by pytz after each operation.</source>
          <target state="translated">ただし、これには欠点があります。すべての日時を現地時間で受け取ると、日時の計算が難しくなります。各操作の後にpytzが提供する &lt;code&gt;normalize()&lt;/code&gt; メソッドを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="cd4a35aff4244b3ade1041850c6b940cdf2cb682" translate="yes" xml:space="preserve">
          <source>However, this may not always be enough. If your natural key refers to another object (by using a foreign key or natural key to another object as part of a natural key), then you need to be able to ensure that the objects on which a natural key depends occur in the serialized data before the natural key requires them.</source>
          <target state="translated">しかし、これだけでは必ずしも十分とは限りません。ナチュラルキーが別のオブジェクトを参照している場合(外部キーやナチュラルキーをナチュラルキーの一部として別のオブジェクトに使用することで)、ナチュラルキーが依存しているオブジェクトがナチュラルキーが必要とする前に、シリアル化されたデータの中で確実に出現するようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="e20cedbaff2d50e62555f245162f273796811893" translate="yes" xml:space="preserve">
          <source>However, unlike &lt;code&gt;F()&lt;/code&gt; objects in filter and exclude clauses, you can&amp;rsquo;t introduce joins when you use &lt;code&gt;F()&lt;/code&gt; objects in an update &amp;ndash; you can only reference fields local to the model being updated. If you attempt to introduce a join with an &lt;code&gt;F()&lt;/code&gt; object, a &lt;code&gt;FieldError&lt;/code&gt; will be raised:</source>
          <target state="translated">ただし、filterおよびexclude句の &lt;code&gt;F()&lt;/code&gt; オブジェクトとは異なり、更新で &lt;code&gt;F()&lt;/code&gt; オブジェクトを使用する場合、結合を導入することはできません。更新されるモデルにローカルなフィールドのみを参照できます。 &lt;code&gt;F()&lt;/code&gt; を使用して結合を導入しようとした場合オブジェクト &lt;code&gt;FieldError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="57c558202ab0e7f96381e51def5567b27e8e2ed7" translate="yes" xml:space="preserve">
          <source>However, unlike the behavior when using &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, this will not limit blogs based on entries that satisfy both conditions. In order to do that, i.e. to select all blogs that do not contain entries published with &lt;em&gt;&amp;ldquo;Lennon&amp;rdquo;&lt;/em&gt; that were published in 2008, you need to make two queries:</source>
          <target state="translated">ただし、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;を使用するときの動作とは異なります、これは両方の条件を満たすエントリに基づいてブログを制限しません。これを行うには、つまり2008年に公開された&lt;em&gt;「Lennon」&lt;/em&gt;で公開されたエントリを含まないすべてのブログを選択するには、2つのクエリを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="cffd2486ef5b313d7c0ee7a40894b44641c0e923" translate="yes" xml:space="preserve">
          <source>However, we still want to be able to edit that information inline. Fortunately, we can do this with inline admin models. Suppose we have the following models:</source>
          <target state="translated">しかし、その情報をインラインで編集できるようにしたいと思います。幸いなことに、インラインの管理モデルでこれを行うことができます。以下のようなモデルがあるとします。</target>
        </trans-unit>
        <trans-unit id="4d2345457eacc290db828ae02019e1d391f9b0f2" translate="yes" xml:space="preserve">
          <source>However, when &lt;code&gt;response.content&lt;/code&gt; is explicitly assigned, the change is always applied. If you want to force the content to be re-rendered, you can re-evaluate the rendered content, and assign the content of the response manually:</source>
          <target state="translated">ただし、 &lt;code&gt;response.content&lt;/code&gt; が明示的に割り当てられている場合、変更は常に適用されます。コンテンツを強制的に再レン​​ダリングする場合は、レンダリングされたコンテンツを再評価し、応答のコンテンツを手動で割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="563ee1f5cb30a896660eb595ed931c48292c849a" translate="yes" xml:space="preserve">
          <source>However, you are free to add formatting as desired.</source>
          <target state="translated">ただし、ご希望に応じて書式を追加することは自由です。</target>
        </trans-unit>
        <trans-unit id="bb1050a497060724f2e4bb1267868c2c5ca9662d" translate="yes" xml:space="preserve">
          <source>However: most performance problems in well-written Django sites aren&amp;rsquo;t at the Python execution level, but rather in inefficient database querying, caching, and templates. If you&amp;rsquo;re relying on poorly-written Python code, your performance problems are unlikely to be solved by having it execute faster.</source>
          <target state="translated">ただし、適切に作成されたDjangoサイトのパフォーマンスの問題のほとんどは、Pythonの実行レベルではなく、非効率的なデータベースのクエリ、キャッシュ、およびテンプレートにあります。不十分に記述されたPythonコードに依存している場合、パフォーマンスの問題は、それをより高速に実行することで解決されることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="fbe171dafe9c16da54051f873de0dd176076dec0" translate="yes" xml:space="preserve">
          <source>Http Exceptions</source>
          <target state="translated">Http の例外</target>
        </trans-unit>
        <trans-unit id="bfae5a87387f6ccc29bb86e5cf99488568c3f161" translate="yes" xml:space="preserve">
          <source>Http exceptions may be imported from &lt;code&gt;django.http&lt;/code&gt;.</source>
          <target state="translated">HTTP例外は &lt;code&gt;django.http&lt;/code&gt; からインポートできます。</target>
        </trans-unit>
        <trans-unit id="ba3f61701a1352c8a25e806229e289b816663a55" translate="yes" xml:space="preserve">
          <source>Human-readable name for the application, e.g. &amp;ldquo;Administration&amp;rdquo;.</source>
          <target state="translated">人間が読める形式のアプリケーション名（「管理」など）。</target>
        </trans-unit>
        <trans-unit id="1670a10ac92535b3c3aa89fbe1fbd927e9f3218c" translate="yes" xml:space="preserve">
          <source>I/O Objects</source>
          <target state="translated">I/O オブジェクト</target>
        </trans-unit>
        <trans-unit id="03f41aebc1232a365cd0a70260db5df54cdcea1b" translate="yes" xml:space="preserve">
          <source>IBM DB2</source>
          <target state="translated">アイビーエムディービーツー</target>
        </trans-unit>
        <trans-unit id="89f89c02cf47e091e726a4e07b88af0966806897" translate="yes" xml:space="preserve">
          <source>ID</source>
          <target state="translated">ID</target>
        </trans-unit>
        <trans-unit id="e0909302700b3b64d7f8176c0468bec2141f5da0" translate="yes" xml:space="preserve">
          <source>INSERT &amp;hellip; RETURNING INTO</source>
          <target state="translated">挿入&amp;hellip;に戻す</target>
        </trans-unit>
        <trans-unit id="8e0e55878c270900ad89521f5554b562f91414b5" translate="yes" xml:space="preserve">
          <source>IP-based geolocation library</source>
          <target state="translated">IPベースのジオロケーションライブラリ</target>
        </trans-unit>
        <trans-unit id="c9d47b90bea2a79c48f8bc0c4b05f5ee7f8119e8" translate="yes" xml:space="preserve">
          <source>IPython:</source>
          <target state="translated">IPython:</target>
        </trans-unit>
        <trans-unit id="ff8948a3034b01513c9fad7bf57cab26fc2d374d" translate="yes" xml:space="preserve">
          <source>ISO 8601 format. (Note: unlike others formatters, such as &amp;ldquo;Z&amp;rdquo;, &amp;ldquo;O&amp;rdquo; or &amp;ldquo;r&amp;rdquo;, the &amp;ldquo;c&amp;rdquo; formatter will not add timezone offset if value is a naive datetime (see &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.tzinfo&quot;&gt;&lt;code&gt;datetime.tzinfo&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">ISO 8601形式。（注：「Z」、「O」、「r」などの他のフォーマッターとは異なり、「c」フォーマッターは、値が単純な日時の場合、タイムゾーンオフセットを追加しません（&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.tzinfo&quot;&gt; &lt;code&gt;datetime.tzinfo&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="ab28365811365736a9b9bbd91ab0f2453872ba5a" translate="yes" xml:space="preserve">
          <source>ISO-8601 week number of year, with weeks starting on Monday.</source>
          <target state="translated">ISO-8601 年の週数、月曜日から始まる週数。</target>
        </trans-unit>
        <trans-unit id="046d47251e666624c71c74ab2e6343cf76c6ffbf" translate="yes" xml:space="preserve">
          <source>ISO-8601 week-numbering year, corresponding to the ISO-8601 week number (W) which uses leap weeks. See Y for the more common year format.</source>
          <target state="translated">ISO-8601 週番の年で、うるう週を使用する ISO-8601 週番(W)に対応します。より一般的な年の形式については Y を参照してください。</target>
        </trans-unit>
        <trans-unit id="ad3e1f0404afde783b8e43b5e5054c4f169eed2b" translate="yes" xml:space="preserve">
          <source>Ideas for more tests</source>
          <target state="translated">より多くのテストのためのアイデア</target>
        </trans-unit>
        <trans-unit id="06b6ace8ca3f18249e8ba4ea9090c0f34564ce1c" translate="yes" xml:space="preserve">
          <source>Identifier</source>
          <target state="translated">Identifier</target>
        </trans-unit>
        <trans-unit id="843c1f75bd65a80cb5c2fdec7a4a54902f306b86" translate="yes" xml:space="preserve">
          <source>Identifies the configuration as being in &amp;lsquo;dictConfig version 1&amp;rsquo; format. At present, this is the only dictConfig format version.</source>
          <target state="translated">設定が「dictConfigバージョン1」形式であることを識別します。現在、これがdictConfig形式のバージョンのみです。</target>
        </trans-unit>
        <trans-unit id="576390ace0227af3d18d31582357c5b35faa2fd7" translate="yes" xml:space="preserve">
          <source>If (and only if) value is &lt;code&gt;None&lt;/code&gt;, uses the given default. Otherwise, uses the value.</source>
          <target state="translated">値が &lt;code&gt;None&lt;/code&gt; の場合（およびその場合のみ）、指定されたデフォルトを使用します。それ以外の場合は、値を使用します。</target>
        </trans-unit>
        <trans-unit id="bf8ac1c479377e8adc8f407b952b011265a5a70a" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.location&quot;&gt;&lt;code&gt;location&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t provided, the framework will call the &lt;code&gt;get_absolute_url()&lt;/code&gt; method on each object as returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合&lt;a href=&quot;#django.contrib.sitemaps.Sitemap.location&quot;&gt; &lt;code&gt;location&lt;/code&gt; &lt;/a&gt;設けられておらず、フレームワークが呼び出す &lt;code&gt;get_absolute_url()&lt;/code&gt; によって返される各オブジェクトのメソッドを&lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4b556c7fec42ccdcf771962a8bd01295c1377c73" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; plays a key role in your application, consider using the helpful &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt; in your model(s). It&amp;rsquo;s a model &lt;a href=&quot;../../topics/db/managers&quot;&gt;manager&lt;/a&gt; that automatically filters its queries to include only objects associated with the current &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt;がアプリケーションで重要な役割を果たす場合は、モデルで役立つ&lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; の&lt;/a&gt;使用を検討してください。これは、現在の&lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; に&lt;/a&gt;関連付けられているオブジェクトのみを含めるようにクエリを自動的にフィルターするモデル&lt;a href=&quot;../../topics/db/managers&quot;&gt;マネージャー&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="b04805301e02d6cc5edc0bd4cec0b660c5b5b1f8" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#django.views.generic.base.RedirectView.url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; is not set, &lt;code&gt;get_redirect_url()&lt;/code&gt; tries to reverse the &lt;a href=&quot;#django.views.generic.base.RedirectView.pattern_name&quot;&gt;&lt;code&gt;pattern_name&lt;/code&gt;&lt;/a&gt; using what was captured in the URL (both named and unnamed groups are used).</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.base.RedirectView.url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt;が設定されていない場合、 &lt;code&gt;get_redirect_url()&lt;/code&gt; は、URLでキャプチャされたものを使用して&lt;a href=&quot;#django.views.generic.base.RedirectView.pattern_name&quot;&gt; &lt;code&gt;pattern_name&lt;/code&gt; &lt;/a&gt;を反転しようとします（名前付きグループと名前なしグループの両方が使用されます）。</target>
        </trans-unit>
        <trans-unit id="a441ed946a92b14760f245476b5f2337f5733bf1" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; is specified, the default implementation will return a list containing &lt;a href=&quot;#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; (if it is specified).</source>
          <target state="translated">場合&lt;a href=&quot;#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; を&lt;/a&gt;指定すると、デフォルトの実装が含まれているリストを返します&lt;a href=&quot;#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; &lt;/a&gt;（それが指定されている場合）。</target>
        </trans-unit>
        <trans-unit id="0dab78e3424972f994b4a41eeedb0e58507bc1ec" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#std:setting-EMAIL_USE_SSL&quot;&gt;&lt;code&gt;EMAIL_USE_SSL&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#std:setting-EMAIL_USE_TLS&quot;&gt;&lt;code&gt;EMAIL_USE_TLS&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, you can optionally specify the path to a PEM-formatted certificate chain file to use for the SSL connection.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-EMAIL_USE_SSL&quot;&gt; &lt;code&gt;EMAIL_USE_SSL&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#std:setting-EMAIL_USE_TLS&quot;&gt; &lt;code&gt;EMAIL_USE_TLS&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; の場合、オプションで、SSL接続に使用するPEM形式の証明書チェーンファイルへのパスを指定できます。</target>
        </trans-unit>
        <trans-unit id="e41632ac93e09334dacaf028209efd8f874dffad" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#std:setting-EMAIL_USE_SSL&quot;&gt;&lt;code&gt;EMAIL_USE_SSL&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#std:setting-EMAIL_USE_TLS&quot;&gt;&lt;code&gt;EMAIL_USE_TLS&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, you can optionally specify the path to a PEM-formatted private key file to use for the SSL connection.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-EMAIL_USE_SSL&quot;&gt; &lt;code&gt;EMAIL_USE_SSL&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#std:setting-EMAIL_USE_TLS&quot;&gt; &lt;code&gt;EMAIL_USE_TLS&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; の場合、オプションで、SSL接続に使用するPEM形式の秘密鍵ファイルへのパスを指定できます。</target>
        </trans-unit>
        <trans-unit id="3c5d39002274831c8031219e7011bd4dfb4b8787" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; is a relative path, then it will be prefixed by the server-provided value of &lt;code&gt;SCRIPT_NAME&lt;/code&gt; (or &lt;code&gt;/&lt;/code&gt; if not set). This makes it easier to serve a Django application in a subpath without adding an extra configuration to the settings.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt;が相対パスの場合、サーバーが提供する &lt;code&gt;SCRIPT_NAME&lt;/code&gt; の値（または設定されていない場合は &lt;code&gt;/&lt;/code&gt; ）がプレフィックスとして付けられます。これにより、設定に追加の構成を追加することなく、サブパスでDjangoアプリケーションを簡単に提供できます。</target>
        </trans-unit>
        <trans-unit id="c76407c010fc18e5e064ae0cd1ef3a947244b3e5" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; is a relative path, then it will be prefixed by the server-provided value of &lt;code&gt;SCRIPT_NAME&lt;/code&gt; (or &lt;code&gt;/&lt;/code&gt; if not set). This makes it easier to serve a Django application in a subpath without adding an extra configuration to the settings.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt;が相対パスの場合、サーバーが提供する &lt;code&gt;SCRIPT_NAME&lt;/code&gt; の値（または設定されていない場合は &lt;code&gt;/&lt;/code&gt; ）がプレフィックスとして付けられます。これにより、設定に追加の構成を追加することなく、サブパスでDjangoアプリケーションを簡単に提供できます。</target>
        </trans-unit>
        <trans-unit id="fca761e106de55e55d1a4f9984fbd1d1dedb5812" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt;&lt;code&gt;get_object()&lt;/code&gt;&lt;/a&gt; returns an object, the class of that object will be used.</source>
          <target state="translated">&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt; &lt;code&gt;get_object()&lt;/code&gt; の&lt;/a&gt;場合がオブジェクトを返す、そのオブジェクトのクラスが使用されます。</target>
        </trans-unit>
        <trans-unit id="2bcc933a78db34c13e04edfc78d73b3aa0cfda0d" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.db_tablespace&quot;&gt;&lt;code&gt;db_tablespace&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t specified and you didn&amp;rsquo;t set &lt;a href=&quot;../../ref/settings#std:setting-DEFAULT_INDEX_TABLESPACE&quot;&gt;&lt;code&gt;DEFAULT_INDEX_TABLESPACE&lt;/code&gt;&lt;/a&gt;, the index is created in the same tablespace as the tables.</source>
          <target state="translated">場合&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.db_tablespace&quot;&gt; &lt;code&gt;db_tablespace&lt;/code&gt; が&lt;/a&gt;指定されていないとあなたが設定されていなかった&lt;a href=&quot;../../ref/settings#std:setting-DEFAULT_INDEX_TABLESPACE&quot;&gt; &lt;code&gt;DEFAULT_INDEX_TABLESPACE&lt;/code&gt; を&lt;/a&gt;、インデックスが表と同じ表領域に作成されます。</target>
        </trans-unit>
        <trans-unit id="b734be08a43e058aa1a95c259b8e56f1c154ceee" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../../ref/settings#std:setting-SESSION_EXPIRE_AT_BROWSER_CLOSE&quot;&gt;&lt;code&gt;SESSION_EXPIRE_AT_BROWSER_CLOSE&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, Django will use browser-length cookies &amp;ndash; cookies that expire as soon as the user closes their browser. Use this if you want people to have to log in every time they open a browser.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-SESSION_EXPIRE_AT_BROWSER_CLOSE&quot;&gt; &lt;code&gt;SESSION_EXPIRE_AT_BROWSER_CLOSE&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; に設定されている場合、Djangoはブラウザ長のCookieを使用します。Cookieは、ユーザーがブラウザを閉じるとすぐに期限切れになります。ブラウザーを開くたびにログインする必要がある場合は、これを使用します。</target>
        </trans-unit>
        <trans-unit id="302e4e8af81e0f64710dc3d22131d1a4420080dd" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_internal_type&quot;&gt;&lt;code&gt;get_internal_type()&lt;/code&gt;&lt;/a&gt; returns a string that is not known to Django for the database backend you are using &amp;ndash; that is, it doesn&amp;rsquo;t appear in &lt;code&gt;django.db.backends.&amp;lt;db_name&amp;gt;.base.DatabaseWrapper.data_types&lt;/code&gt; &amp;ndash; the string will still be used by the serializer, but the default &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt; method will return &lt;code&gt;None&lt;/code&gt;. See the documentation of &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt; for reasons why this might be useful. Putting a descriptive string in as the type of the field for the serializer is a useful idea if you&amp;rsquo;re ever going to be using the serializer output in some other place, outside of Django.</source>
          <target state="translated">&lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_internal_type&quot;&gt; &lt;code&gt;get_internal_type()&lt;/code&gt; &lt;/a&gt;が、使用しているデータベースバックエンドについてDjangoに認識されていない文字列を返す場合、つまり、 &lt;code&gt;django.db.backends.&amp;lt;db_name&amp;gt;.base.DatabaseWrapper.data_types&lt;/code&gt; 表示されません&amp;ndash;文字列は引き続きシリアライザによって使用されますが、デフォルトの&lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt; &lt;code&gt;db_type()&lt;/code&gt; &lt;/a&gt;メソッドは &lt;code&gt;None&lt;/code&gt; を返します。これが役立つ理由については、&lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt; &lt;code&gt;db_type()&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。 Django以外の場所でシリアライザの出力を使用する場合は、シリアライザのフィールドのタイプとして説明的な文字列を入れると便利です。</target>
        </trans-unit>
        <trans-unit id="9e0fc6708169160a661ce0c5e2e5e51df935ab4d" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../ref/settings#std:setting-USE_I18N&quot;&gt;&lt;code&gt;USE_I18N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt; the per-site middleware cache will &lt;a href=&quot;#i18n-cache-key&quot;&gt;respect the active language&lt;/a&gt;. For the &lt;code&gt;cache&lt;/code&gt; template tag you could use one of the &lt;a href=&quot;i18n/translation#template-translation-vars&quot;&gt;translation-specific variables&lt;/a&gt; available in templates to achieve the same result:</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-USE_I18N&quot;&gt; &lt;code&gt;USE_I18N&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; に設定されている場合、サイトごとのミドルウェアキャッシュは&lt;a href=&quot;#i18n-cache-key&quot;&gt;アクティブな言語&lt;/a&gt;を尊重します。以下のために &lt;code&gt;cache&lt;/code&gt; テンプレートタグあなたは、のいずれかを使用でき&lt;a href=&quot;i18n/translation#template-translation-vars&quot;&gt;、翻訳固有の変数&lt;/a&gt;に同じ結果を達成するために、テンプレートで利用可能に：</target>
        </trans-unit>
        <trans-unit id="1dec9c1c2d78ca0739125f223e56a616974c3604" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../ref/settings#std:setting-USE_I18N&quot;&gt;&lt;code&gt;USE_I18N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt; then the generated cache key will include the name of the active &lt;a href=&quot;i18n/index#term-language-code&quot;&gt;language&lt;/a&gt; &amp;ndash; see also &lt;a href=&quot;i18n/translation#how-django-discovers-language-preference&quot;&gt;How Django discovers language preference&lt;/a&gt;). This allows you to easily cache multilingual sites without having to create the cache key yourself.</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-USE_I18N&quot;&gt; &lt;code&gt;USE_I18N&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; に設定されている場合、生成されたキャッシュキーにはアクティブな&lt;a href=&quot;i18n/index#term-language-code&quot;&gt;言語の&lt;/a&gt;名前が含まれます &amp;ndash; &lt;a href=&quot;i18n/translation#how-django-discovers-language-preference&quot;&gt;Djangoが言語設定を検出する方法&lt;/a&gt;も参照してください）。これにより、自分でキャッシュキーを作成しなくても、多言語サイトを簡単にキャッシュできます。</target>
        </trans-unit>
        <trans-unit id="ba088c9c367fa9bed0d2638a14b58c651b3e8138" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, returns an aware &lt;code&gt;datetime&lt;/code&gt;, otherwise returns a naive &lt;code&gt;datetime&lt;/code&gt; in the local timezone.</source>
          <target state="translated">場合&lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; が&lt;/a&gt;ある &lt;code&gt;True&lt;/code&gt; 、意識を返し &lt;code&gt;datetime&lt;/code&gt; それ以外の場合はナイーブ返し、 &lt;code&gt;datetime&lt;/code&gt; ローカルタイムゾーンで。</target>
        </trans-unit>
        <trans-unit id="a5717ee542a44db43b337277360e76d5d90d2062" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;fields#django.db.models.Field.db_tablespace&quot;&gt;&lt;code&gt;Field.db_tablespace&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t specified (or if the index uses multiple fields), the index is created in tablespace specified in the &lt;a href=&quot;options#django.db.models.Options.db_tablespace&quot;&gt;&lt;code&gt;db_tablespace&lt;/code&gt;&lt;/a&gt; option inside the model&amp;rsquo;s &lt;code&gt;class Meta&lt;/code&gt;. If neither of those tablespaces are set, the index is created in the same tablespace as the table.</source>
          <target state="translated">&lt;a href=&quot;fields#django.db.models.Field.db_tablespace&quot;&gt; &lt;code&gt;Field.db_tablespace&lt;/code&gt; &lt;/a&gt;が指定されていない場合（またはインデックスが複数のフィールドを使用している場合）、インデックスはモデルの &lt;code&gt;class Meta&lt;/code&gt; 内の&lt;a href=&quot;options#django.db.models.Options.db_tablespace&quot;&gt; &lt;code&gt;db_tablespace&lt;/code&gt; &lt;/a&gt;オプションで指定されたテーブルスペースに作成されます。これらのテーブルスペースのどちらも設定されていない場合、インデックスはテーブルと同じテーブルスペースに作成されます。</target>
        </trans-unit>
        <trans-unit id="bbd815722eda15f33dbfb7a5326a66902a84cfa1" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;settings#std:setting-APPEND_SLASH&quot;&gt;&lt;code&gt;APPEND_SLASH&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt; and the initial URL doesn&amp;rsquo;t end with a slash, and it is not found in the URLconf, then a new URL is formed by appending a slash at the end. If this new URL is found in the URLconf, then Django redirects the request to this new URL. Otherwise, the initial URL is processed as usual.</source>
          <target state="translated">場合&lt;a href=&quot;settings#std:setting-APPEND_SLASH&quot;&gt; &lt;code&gt;APPEND_SLASH&lt;/code&gt; が&lt;/a&gt;ある &lt;code&gt;True&lt;/code&gt; 、初期URLがスラッシュで終わっていない、そしてそれはのURLconfで発見されていない場合、新しいURLは、末尾にスラッシュを追加することによって形成されます。この新しいURLがURLconfで見つかった場合、Djangoはリクエストをこの新しいURLにリダイレクトします。それ以外の場合、初期URLは通常どおり処理されます。</target>
        </trans-unit>
        <trans-unit id="703b7a5f7e217bd910de90ae15cc8cecb3bfbb50" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt; (in your settings module), then your 404 view will never be used, and your URLconf will be displayed instead, with some debug information.</source>
          <target state="translated">（設定モジュールで）&lt;a href=&quot;settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; に設定されている場合、404ビューは使用されず、代わりにURLconfがいくつかのデバッグ情報とともに表示されます。</target>
        </trans-unit>
        <trans-unit id="5eedf5297f17474dc2270509f5e5de780a61e4f2" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt; (in your settings module), then your 500 view will never be used, and the traceback will be displayed instead, with some debug information.</source>
          <target state="translated">（設定モジュールで）&lt;a href=&quot;settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; に設定されている場合、500ビューは使用されず、代わりにトレースバックが表示され、いくつかのデバッグ情報が表示されます。</target>
        </trans-unit>
        <trans-unit id="28f55ac704b0b514f68d7f33bfed23d6d400294d" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;settings#std:setting-PREPEND_WWW&quot;&gt;&lt;code&gt;PREPEND_WWW&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, URLs that lack a leading &amp;ldquo;www.&amp;rdquo; will be redirected to the same URL with a leading &amp;ldquo;www.&amp;rdquo;</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-PREPEND_WWW&quot;&gt; &lt;code&gt;PREPEND_WWW&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; の場合、先頭に「www」がないURL。先頭に「www」が付いた同じURLにリダイレクトされます。</target>
        </trans-unit>
        <trans-unit id="9268883f3a170c41786d2f41528ad09a08f1df14" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, this will be a &lt;a href=&quot;../topics/i18n/timezones#naive-vs-aware-datetimes&quot;&gt;naive&lt;/a&gt; datetime (i.e. a datetime without an associated timezone) that represents the current time in the system&amp;rsquo;s local timezone.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;False&lt;/code&gt; の場合、これはシステムのローカルタイムゾーンの現在の時刻を表す&lt;a href=&quot;../topics/i18n/timezones#naive-vs-aware-datetimes&quot;&gt;単純な&lt;/a&gt;日時（つまり、タイムゾーンが関連付けられていない日時）になります。</target>
        </trans-unit>
        <trans-unit id="c2de81b367dd71f5c015e5f41f8afee04e06b3cf" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, this will be an &lt;a href=&quot;../topics/i18n/timezones#naive-vs-aware-datetimes&quot;&gt;aware&lt;/a&gt; datetime representing the current time in UTC. Note that &lt;a href=&quot;#django.utils.timezone.now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; will always return times in UTC regardless of the value of &lt;a href=&quot;settings#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt;; you can use &lt;a href=&quot;#django.utils.timezone.localtime&quot;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; to get the time in the current time zone.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; の場合、これはUTCでの現在時刻を表す&lt;a href=&quot;../topics/i18n/timezones#naive-vs-aware-datetimes&quot;&gt;認識&lt;/a&gt;日時になります。&lt;a href=&quot;#django.utils.timezone.now&quot;&gt; &lt;code&gt;now()&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;settings#std:setting-TIME_ZONE&quot;&gt; &lt;code&gt;TIME_ZONE&lt;/code&gt; &lt;/a&gt;の値に関係なく、常にUTCで時刻を返すことに注意してください。&lt;a href=&quot;#django.utils.timezone.localtime&quot;&gt; &lt;code&gt;localtime()&lt;/code&gt; &lt;/a&gt;を使用して、現在のタイムゾーンの時刻を取得できます。</target>
        </trans-unit>
        <trans-unit id="d132c69aa17f397b9e7aeef1bf23acca8692c78b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; is empty and &lt;code&gt;DEBUG=True&lt;/code&gt;, subdomains of localhost were allowed.</source>
          <target state="translated">場合 &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; は空で、 &lt;code&gt;DEBUG=True&lt;/code&gt; が、ローカルホストのサブドメインを許可されました。</target>
        </trans-unit>
        <trans-unit id="57215ad4aec3fe8e542fb77429da4ec0f6b316a2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Blog&lt;/code&gt; had &lt;code&gt;ordering = ['name']&lt;/code&gt;, then the first queryset would be identical to:</source>
          <target state="translated">場合は &lt;code&gt;Blog&lt;/code&gt; 持っていた &lt;code&gt;ordering = ['name']&lt;/code&gt; 、その後、最初のクエリセットは同一のようになります。</target>
        </trans-unit>
        <trans-unit id="915ff9d1a4c7c8ff8163f55e3d64c8bec0860f25" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Client.raise_request_exception&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, the test client will return a 500 response as would be returned to a browser. The response has the attribute &lt;a href=&quot;#django.test.Response.exc_info&quot;&gt;&lt;code&gt;exc_info&lt;/code&gt;&lt;/a&gt; to provide information about the unhandled exception.</source>
          <target state="translated">場合 &lt;code&gt;Client.raise_request_exception&lt;/code&gt; がある &lt;code&gt;False&lt;/code&gt; のブラウザに返されると、テストクライアントは500応答を返します。応答には、未処理の例外に関する情報を提供する属性&lt;a href=&quot;#django.test.Response.exc_info&quot;&gt; &lt;code&gt;exc_info&lt;/code&gt; &lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="abf361655e63d0be9b5f070d1dac967ddae52b37" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;EntryManager&lt;/code&gt; performed default filtering in its &lt;code&gt;get_queryset()&lt;/code&gt; method, that filtering would apply to the &lt;code&gt;all()&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;EntryManager&lt;/code&gt; が &lt;code&gt;get_queryset()&lt;/code&gt; メソッドでデフォルトのフィルタリングを実行した場合、そのフィルタリングは &lt;code&gt;all()&lt;/code&gt; 呼び出しに適用されます。</target>
        </trans-unit>
        <trans-unit id="93630d6eedd2025ff2ec8981f5e933b31e83e1d4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt; (default), the upper bound is exclusive &lt;code&gt;')'&lt;/code&gt;, otherwise it&amp;rsquo;s inclusive &lt;code&gt;']'&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;False&lt;/code&gt; （デフォルト）、上限は排他的である &lt;code&gt;')'&lt;/code&gt; 、それ以外の場合は、包括的です &lt;code&gt;']'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="18778cefe298f546baad10095627a522a85d4d98" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt; (the default) only the direct contents of &lt;code&gt;path&lt;/code&gt; will be offered as choices. If &lt;code&gt;True&lt;/code&gt;, the directory will be descended into recursively and all descendants will be listed as choices.</source>
          <target state="translated">&lt;code&gt;False&lt;/code&gt; （デフォルト）の場合、 &lt;code&gt;path&lt;/code&gt; の直接のコンテンツのみが選択肢として提供されます。場合は &lt;code&gt;True&lt;/code&gt; 、ディレクトリを再帰的に降りされ、すべての子孫が選択肢として表示されます。</target>
        </trans-unit>
        <trans-unit id="8580bd511e1e56fc6a57ce10bc1a3957d3e92eef" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt;, no database table creation or deletion operations will be performed for this model. This is useful if the model represents an existing table or a database view that has been created by some other means. This is the &lt;em&gt;only&lt;/em&gt; difference when &lt;code&gt;managed=False&lt;/code&gt;. All other aspects of model handling are exactly the same as normal. This includes</source>
          <target state="translated">&lt;code&gt;False&lt;/code&gt; の場合、このモデルに対してデータベーステーブルの作成または削除操作は実行されません。これは、モデルが他の方法で作成された既存のテーブルまたはデータベースビューを表す場合に役立ちます。 &lt;code&gt;managed=False&lt;/code&gt; の場合、これが&lt;em&gt;唯一の&lt;/em&gt;違いです。モデル処理の他のすべての側面は、通常とまったく同じです。これも</target>
        </trans-unit>
        <trans-unit id="1196f2e1c99c84b45ad9ac3e676f34a8c3e7b1e3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt;, no database table creation, modification, or deletion operations will be performed for this model. This is useful if the model represents an existing table or a database view that has been created by some other means. This is the &lt;em&gt;only&lt;/em&gt; difference when &lt;code&gt;managed=False&lt;/code&gt;. All other aspects of model handling are exactly the same as normal. This includes</source>
          <target state="translated">&lt;code&gt;False&lt;/code&gt; の場合、このモデルに対してデータベーステーブルの作成、変更、または削除操作は実行されません。これは、モデルが他の方法で作成された既存のテーブルまたはデータベースビューを表す場合に役立ちます。これは、 &lt;code&gt;managed=False&lt;/code&gt; の場合の&lt;em&gt;唯一の&lt;/em&gt;違いです。モデル処理の他のすべての側面は、通常とまったく同じです。これも</target>
        </trans-unit>
        <trans-unit id="b5afc96ec010c7587fe847918d3f0b1cbd618c34" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt;, the field will be able to reference proxy models. Default is &lt;code&gt;True&lt;/code&gt;. This mirrors the &lt;code&gt;for_concrete_model&lt;/code&gt; argument to &lt;a href=&quot;#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt;&lt;code&gt;get_for_model()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合は &lt;code&gt;False&lt;/code&gt; を、フィールドには、プロキシのモデルを参照することができるようになります。デフォルトは &lt;code&gt;True&lt;/code&gt; です。これは、 &lt;code&gt;for_concrete_model&lt;/code&gt; &lt;a href=&quot;#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt; &lt;code&gt;get_for_model()&lt;/code&gt; &lt;/a&gt; for_concrete_model引数をミラーリングします。</target>
        </trans-unit>
        <trans-unit id="8ecc7857237fad6548c3573566a3dff629cc4ca4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt;, the field will not be displayed in the admin or any other &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;. They are also skipped during &lt;a href=&quot;instances#validating-objects&quot;&gt;model validation&lt;/a&gt;. Default is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;False&lt;/code&gt; を、フィールドには管理者またはその他では表示されません&lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt;。また、&lt;a href=&quot;instances#validating-objects&quot;&gt;モデルの検証&lt;/a&gt;中にもスキップされます。デフォルトは &lt;code&gt;True&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9a394bcde334572fe03593b3cb90dfa9215df0e6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;None&lt;/code&gt;, no redirect will be performed and the logout view will be rendered.</source>
          <target state="translated">&lt;code&gt;None&lt;/code&gt; の場合、リダイレクトは実行されず、ログアウトビューがレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="967733181a22434f2b539a31845b38708e94e3fa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;None&lt;/code&gt;, you&amp;rsquo;ll get operating-system dependent behavior. On most platforms, temporary files will have a mode of &lt;code&gt;0o600&lt;/code&gt;, and files saved from memory will be saved using the system&amp;rsquo;s standard umask.</source>
          <target state="translated">&lt;code&gt;None&lt;/code&gt; の場合、オペレーティングシステムに依存する動作が発生します。ほとんどのプラットフォームでは、一時ファイルのモードは &lt;code&gt;0o600&lt;/code&gt; であり、メモリから保存されたファイルは、システムの標準umaskを使用して保存されます。</target>
        </trans-unit>
        <trans-unit id="1ea11f1dd3469689c6da4beae549200413dad0f6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;TestMixin1&lt;/code&gt; would call &lt;code&gt;super()&lt;/code&gt; and take that result into account, &lt;code&gt;TestMixin1&lt;/code&gt; wouldn&amp;rsquo;t work standalone anymore.</source>
          <target state="translated">場合 &lt;code&gt;TestMixin1&lt;/code&gt; を呼び出します &lt;code&gt;super()&lt;/code&gt; や口座にその結果を取り、 &lt;code&gt;TestMixin1&lt;/code&gt; はもはやスタンドアロンで動作しないでしょう。</target>
        </trans-unit>
        <trans-unit id="6769b5f470623bf5a1a01f00daddb8704bd14842" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt; (default), the lower bound is inclusive &lt;code&gt;'['&lt;/code&gt;, otherwise it&amp;rsquo;s exclusive &lt;code&gt;'('&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;True&lt;/code&gt; （デフォルト）は、下限が含まれており &lt;code&gt;'['&lt;/code&gt; 、それ以外の場合は、排他的です &lt;code&gt;'('&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ac0108b91dd39d35eec7c74542b910976de59f38" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt; (default), the value will be stripped of leading and trailing whitespace.</source>
          <target state="translated">場合 &lt;code&gt;True&lt;/code&gt; （デフォルト）、値は先頭と末尾の空白を剥奪されます。</target>
        </trans-unit>
        <trans-unit id="0889dcaa5531b627194e2e75f61b16d17c01c4c1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, Django will store empty values as &lt;code&gt;NULL&lt;/code&gt; in the database. Default is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; の場合、Djangoはデータベースに空の値を &lt;code&gt;NULL&lt;/code&gt; として格納します。デフォルトは &lt;code&gt;False&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b5ac068b66f4ddfe5eb27d866c030ede7da7d0d3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, a database index will be created for this field.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; の場合、このフィールドにデータベースインデックスが作成されます。</target>
        </trans-unit>
        <trans-unit id="f9534fba934e74f7ef1a7dd6e9bc77488b38aafe" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, causes &lt;a href=&quot;#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt;&lt;code&gt;get_object()&lt;/code&gt;&lt;/a&gt; to perform its lookup using both the primary key and the slug. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; の場合、&lt;a href=&quot;#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt; &lt;code&gt;get_object()&lt;/code&gt; &lt;/a&gt;は主キーとスラッグの両方を使用して検索を実行します。デフォルトは &lt;code&gt;False&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="758c3834bb8ce6505681916f3fb282790c5a617b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; adds the &lt;code&gt;includeSubDomains&lt;/code&gt; directive to the &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt; header. It has no effect unless &lt;a href=&quot;#std:setting-SECURE_HSTS_SECONDS&quot;&gt;&lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt;&lt;/a&gt; is set to a non-zero value.</source>
          <target state="translated">場合は &lt;code&gt;True&lt;/code&gt; 、&lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; が&lt;/a&gt;追加されます &lt;code&gt;includeSubDomains&lt;/code&gt; にディレクティブを&lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP厳格なトランスポート・セキュリティ&lt;/a&gt;ヘッダー。&lt;a href=&quot;#std:setting-SECURE_HSTS_SECONDS&quot;&gt; &lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt; &lt;/a&gt;がゼロ以外の値に設定されていない限り、効果はありません。</target>
        </trans-unit>
        <trans-unit id="bf5376ee839b91d8f49b195845182cc96ba96ad8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; adds the &lt;code&gt;preload&lt;/code&gt; directive to the &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt; header. It has no effect unless &lt;a href=&quot;#std:setting-SECURE_HSTS_SECONDS&quot;&gt;&lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt;&lt;/a&gt; is set to a non-zero value.</source>
          <target state="translated">場合は &lt;code&gt;True&lt;/code&gt; 、&lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; は&lt;/a&gt;追加 &lt;code&gt;preload&lt;/code&gt; にディレクティブを&lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP厳格なトランスポート・セキュリティ&lt;/a&gt;ヘッダー。&lt;a href=&quot;#std:setting-SECURE_HSTS_SECONDS&quot;&gt; &lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt; &lt;/a&gt;がゼロ以外の値に設定されていない限り、効果はありません。</target>
        </trans-unit>
        <trans-unit id="7269473ae0ab0fa0cde96c635f4c57333c8000c0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; sets the &lt;a href=&quot;middleware#x-content-type-options&quot;&gt;X-Content-Type-Options: nosniff&lt;/a&gt; header on all responses that do not already have it.</source>
          <target state="translated">場合は &lt;code&gt;True&lt;/code&gt; 、&lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; は&lt;/a&gt;セット&lt;a href=&quot;middleware#x-content-type-options&quot;&gt;X-Content-Typeの-オプション：nosniff&lt;/a&gt;すでにそれを持っていないすべての応答にヘッダー。</target>
        </trans-unit>
        <trans-unit id="06532e19f603440c20d409e3e0783241dddf0594" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; sets the &lt;a href=&quot;middleware#x-xss-protection&quot;&gt;X-XSS-Protection: 1; mode=block&lt;/a&gt; header on all responses that do not already have it.</source>
          <target state="translated">場合は &lt;code&gt;True&lt;/code&gt; 、&lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; は&lt;/a&gt;セット&lt;a href=&quot;middleware#x-xss-protection&quot;&gt;X-XSS-保護：1; mode = block&lt;/a&gt;ヘッダー（まだヘッダーがない場合）。</target>
        </trans-unit>
        <trans-unit id="3aa67e9c195274834b1514184f81665a3681157f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;middleware#ssl-redirect&quot;&gt;redirects&lt;/a&gt; all non-HTTPS requests to HTTPS (except for those URLs matching a regular expression listed in &lt;a href=&quot;#std:setting-SECURE_REDIRECT_EXEMPT&quot;&gt;&lt;code&gt;SECURE_REDIRECT_EXEMPT&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">場合は &lt;code&gt;True&lt;/code&gt; 、&lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; は&lt;/a&gt;&lt;a href=&quot;middleware#ssl-redirect&quot;&gt;リダイレクト&lt;/a&gt;（に記載された正規表現に一致するそれらのURLを除き、HTTPSにすべての非HTTPSリクエスト&lt;a href=&quot;#std:setting-SECURE_REDIRECT_EXEMPT&quot;&gt; &lt;code&gt;SECURE_REDIRECT_EXEMPT&lt;/code&gt; を&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="1fe34d7fa424adbe99975f44452f0cb8c9b26460" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the field accepts Unicode letters in addition to ASCII letters. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;True&lt;/code&gt; 、フィールドにはASCII文字に加えて、Unicodeの文字を受け入れます。デフォルトは &lt;code&gt;False&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="94ca19b3ecb3f8bbe3f1a9bff2249de7c42b4ee0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the field is allowed to be blank. Default is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;True&lt;/code&gt; 、フィールドが空白に許可されています。デフォルトは &lt;code&gt;False&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9e99788f392fe32220f3399732e6992bdae5fd30" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, this field is the primary key for the model.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; の場合、このフィールドはモデルの主キーです。</target>
        </trans-unit>
        <trans-unit id="b0a8661c8043a78d79876d7e0eed097ed9a770fd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, this field must be unique throughout the table.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; の場合、このフィールドはテーブル全体で一意である必要があります。</target>
        </trans-unit>
        <trans-unit id="a121385ed8cbdd359e3d02312aea0ad306878456" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;abstract = True&lt;/code&gt;, this model will be an &lt;a href=&quot;../../topics/db/models#abstract-base-classes&quot;&gt;abstract base class&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;abstract = True&lt;/code&gt; 場合、このモデルは&lt;a href=&quot;../../topics/db/models#abstract-base-classes&quot;&gt;抽象基本クラスになり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="c0bcccb8df0544ee276445e6621dc3c3b97509cb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;allowed_permissions&lt;/code&gt; has more than one permission, the action will be available as long as the user passes at least one of the checks.</source>
          <target state="translated">場合 &lt;code&gt;allowed_permissions&lt;/code&gt; が複数の権限を持つユーザーは、チェックの少なくとも一つを通過すると、アクションは限り利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="ac69109cdc61dd101b981bea9a5dba1484d0b872" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;app_configs&lt;/code&gt; and &lt;code&gt;tags&lt;/code&gt; are both &lt;code&gt;None&lt;/code&gt;, all system checks are performed. &lt;code&gt;tags&lt;/code&gt; can be a list of check tags, like &lt;code&gt;compatibility&lt;/code&gt; or &lt;code&gt;models&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;app_configs&lt;/code&gt; と &lt;code&gt;tags&lt;/code&gt; 両方あるん &lt;code&gt;None&lt;/code&gt; 、すべてのシステムチェックが実行されます。 &lt;code&gt;tags&lt;/code&gt; は、 &lt;code&gt;compatibility&lt;/code&gt; や &lt;code&gt;models&lt;/code&gt; などのチェックタグのリストにすることができます。</target>
        </trans-unit>
        <trans-unit id="6615ec052ef5b32e9a7ddc0191176c4b5da7db9c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;as_attachment=True&lt;/code&gt;, the &lt;code&gt;Content-Disposition&lt;/code&gt; header is set to &lt;code&gt;attachment&lt;/code&gt;, which asks the browser to offer the file to the user as a download. Otherwise, a &lt;code&gt;Content-Disposition&lt;/code&gt; header with a value of &lt;code&gt;inline&lt;/code&gt; (the browser default) will be set only if a filename is available.</source>
          <target state="translated">場合 &lt;code&gt;as_attachment=True&lt;/code&gt; 、 &lt;code&gt;Content-Disposition&lt;/code&gt; ヘッダーがに設定されている &lt;code&gt;attachment&lt;/code&gt; のダウンロードとしてユーザーにファイルを提供するために、ブラウザを要求します。それ以外の場合、値が &lt;code&gt;inline&lt;/code&gt; （ブラウザのデフォルト）の &lt;code&gt;Content-Disposition&lt;/code&gt; ヘッダーは、ファイル名が使用可能な場合にのみ設定されます。</target>
        </trans-unit>
        <trans-unit id="d6efdd4d6808763901e2a4ef79dd40c79a07e12c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;auto_id&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, then the form output will not include &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags nor &lt;code&gt;id&lt;/code&gt; attributes:</source>
          <target state="translated">&lt;code&gt;auto_id&lt;/code&gt; が &lt;code&gt;False&lt;/code&gt; の場合、フォーム出力には &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; タグも &lt;code&gt;id&lt;/code&gt; 属性も含まれません。</target>
        </trans-unit>
        <trans-unit id="3cc984f7eb8796fb1fd928f2b24d9c6845248e58" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;auto_id&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the form output &lt;em&gt;will&lt;/em&gt; include &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags and will use the field name as its &lt;code&gt;id&lt;/code&gt; for each form field:</source>
          <target state="translated">&lt;code&gt;auto_id&lt;/code&gt; が &lt;code&gt;True&lt;/code&gt; に設定されている場合、フォーム出力&lt;em&gt;に&lt;/em&gt;は &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; タグ&lt;em&gt;が&lt;/em&gt;含まれ、各フォームフィールドの &lt;code&gt;id&lt;/code&gt; としてフィールド名が使用されます。</target>
        </trans-unit>
        <trans-unit id="c915e73a9f6e71c73afac26838e8f2e10b0b4b57" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;auto_id&lt;/code&gt; is set to a string containing the format character &lt;code&gt;'%s'&lt;/code&gt;, then the form output will include &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags, and will generate &lt;code&gt;id&lt;/code&gt; attributes based on the format string. For example, for a format string &lt;code&gt;'field_%s'&lt;/code&gt;, a field named &lt;code&gt;subject&lt;/code&gt; will get the &lt;code&gt;id&lt;/code&gt; value &lt;code&gt;'field_subject'&lt;/code&gt;. Continuing our example:</source>
          <target state="translated">&lt;code&gt;auto_id&lt;/code&gt; がフォーマット文字 &lt;code&gt;'%s'&lt;/code&gt; を含む文字列に設定されている場合、フォーム出力には &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; タグが含まれ、フォーマット文字列に基づいて &lt;code&gt;id&lt;/code&gt; 属性が生成されます。たとえば、フォーマット文字列 &lt;code&gt;'field_%s'&lt;/code&gt; の場合、 &lt;code&gt;subject&lt;/code&gt; という名前のフィールドは &lt;code&gt;id&lt;/code&gt; 値 &lt;code&gt;'field_subject'&lt;/code&gt; を取得します。私たちの例を続ける：</target>
        </trans-unit>
        <trans-unit id="3264738ae83ae7d0a0ed8e3fb36220d1bd14caff" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;auto_id&lt;/code&gt; is set to any other true value &amp;ndash; such as a string that doesn&amp;rsquo;t include &lt;code&gt;%s&lt;/code&gt; &amp;ndash; then the library will act as if &lt;code&gt;auto_id&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;auto_id&lt;/code&gt; が他のtrue値（ &lt;code&gt;%s&lt;/code&gt; を含まない文字列など）に設定されている場合、ライブラリは &lt;code&gt;auto_id&lt;/code&gt; が &lt;code&gt;True&lt;/code&gt; であるかのように動作します。</target>
        </trans-unit>
        <trans-unit id="3e0883ecf28d02e1a38399c6f3915b7fcc7015ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;autoclobber&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, the user will be asked to approve destroying the existing database. &lt;code&gt;sys.exit&lt;/code&gt; is called if the user does not approve.</source>
          <target state="translated">場合 &lt;code&gt;autoclobber&lt;/code&gt; がある &lt;code&gt;False&lt;/code&gt; を、ユーザーが既存のデータベースを破壊し承認するように求められます。 &lt;code&gt;sys.exit&lt;/code&gt; は、ユーザーが承認しない場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="98e4a76b7e84d38f335e28bca3305209202dca5b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;backend&lt;/code&gt; is passed in and it&amp;rsquo;s defined in &lt;a href=&quot;../settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt;, then this method will use it. Otherwise, it will use the &lt;code&gt;backend&lt;/code&gt; in &lt;a href=&quot;../settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt;, if there is only one, or raise an exception.</source>
          <target state="translated">場合は &lt;code&gt;backend&lt;/code&gt; 渡され、それがで定義されています&lt;a href=&quot;../settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt;、このメソッドはそれを使用します。それ以外の場合は、&lt;a href=&quot;../settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;backend&lt;/code&gt; が1つしかない場合はそれを使用するか、例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="375cd7296bfab6553a96bb4023ab0d2f1474319f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;books&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;books&lt;/code&gt; がある場合：</target>
        </trans-unit>
        <trans-unit id="c362f4eb9d4fc883dad853b368e887b80e39db88" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;buffer&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, outputs from passing tests will be discarded.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; が &lt;code&gt;True&lt;/code&gt; の場合、合格したテストからの出力は破棄されます。</target>
        </trans-unit>
        <trans-unit id="1a7c8aa34e3c2c04547138e30fa08eb1d3557164" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;check_path&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, the function first checks the requested URL for whether its path begins with a language code listed in the &lt;a href=&quot;settings#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">場合 &lt;code&gt;check_path&lt;/code&gt; がある &lt;code&gt;True&lt;/code&gt; 、機能を最初にチェックそのパスがに記載されている言語コードで始まるかどうかのために要求されたURL &lt;a href=&quot;settings#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="c8ec35a2ea23587d9fe9a54f0ca32995bf582faf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;context&lt;/code&gt; is provided, it must be a &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;. If it isn&amp;rsquo;t provided, the engine will render the template with an empty context.</source>
          <target state="translated">&lt;code&gt;context&lt;/code&gt; が提供される場合、それは&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt;でなければなりません。指定しない場合、エンジンは空のコンテキストでテンプレートをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="17d141a9754d51166d4f3a44118b415f530a4910" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;debug&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, these loaders are wrapped in &lt;a href=&quot;#django.template.loaders.cached.Loader&quot;&gt;&lt;code&gt;django.template.loaders.cached.Loader&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;debug&lt;/code&gt; が &lt;code&gt;False&lt;/code&gt; の場合、これらのローダーは&lt;a href=&quot;#django.template.loaders.cached.Loader&quot;&gt; &lt;code&gt;django.template.loaders.cached.Loader&lt;/code&gt; で&lt;/a&gt;ラップされます。</target>
        </trans-unit>
        <trans-unit id="0f4c76818b3f8b7eae0f4fc29ad7ccd7c54fd6d2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;debug&lt;/code&gt; isn&amp;rsquo;t &lt;code&gt;None&lt;/code&gt;, the &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; setting is updated to its value.</source>
          <target state="translated">&lt;code&gt;debug&lt;/code&gt; が &lt;code&gt;None&lt;/code&gt; でない場合、&lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;設定はその値に更新されます。</target>
        </trans-unit>
        <trans-unit id="fd405748877e5e65871815a667f3253dfbbccc4b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;debug_sql&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, failing test cases will output SQL queries logged to the &lt;a href=&quot;../logging#django-db-logger&quot;&gt;django.db.backends logger&lt;/a&gt; as well as the traceback. If &lt;code&gt;verbosity&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;, then queries in all tests are output.</source>
          <target state="translated">&lt;code&gt;debug_sql&lt;/code&gt; が &lt;code&gt;True&lt;/code&gt; の場合、テストケースが失敗すると、&lt;a href=&quot;../logging#django-db-logger&quot;&gt;django.db.backendsロガーに&lt;/a&gt;記録されたSQLクエリとトレースバックが出力されます。 &lt;code&gt;verbosity&lt;/code&gt; が &lt;code&gt;2&lt;/code&gt; の場合、すべてのテストのクエリが出力されます。</target>
        </trans-unit>
        <trans-unit id="3b7f214abcf2191401e59d4b6763d7f1cc638a5b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;distinct=True&lt;/code&gt;, &lt;code&gt;Avg&lt;/code&gt; returns the mean value of unique values. This is the SQL equivalent of &lt;code&gt;AVG(DISTINCT &amp;lt;field&amp;gt;)&lt;/code&gt;. The default value is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;distinct=True&lt;/code&gt; の場合、 &lt;code&gt;Avg&lt;/code&gt; は一意の値の平均値を返します。これは、 &lt;code&gt;AVG(DISTINCT &amp;lt;field&amp;gt;)&lt;/code&gt; に相当するSQL です。デフォルト値は &lt;code&gt;False&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a3bcdf7ed01d6c4e579221df819cdfdb4ec55a4a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;distinct=True&lt;/code&gt;, &lt;code&gt;Sum&lt;/code&gt; returns the sum of unique values. This is the SQL equivalent of &lt;code&gt;SUM(DISTINCT &amp;lt;field&amp;gt;)&lt;/code&gt;. The default value is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;distinct=True&lt;/code&gt; の場合、 &lt;code&gt;Sum&lt;/code&gt; は一意の値の合計を返します。これは、 &lt;code&gt;SUM(DISTINCT &amp;lt;field&amp;gt;)&lt;/code&gt; に相当するSQL です。デフォルト値は &lt;code&gt;False&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e396e16bde5b9f0db7d59755293462c7fa1e84b0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;distinct=True&lt;/code&gt;, the count will only include unique instances. This is the SQL equivalent of &lt;code&gt;COUNT(DISTINCT &amp;lt;field&amp;gt;)&lt;/code&gt;. The default value is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;distinct=True&lt;/code&gt; 、カウントは一意なインスタンスのみが含まれます。これは、 &lt;code&gt;COUNT(DISTINCT &amp;lt;field&amp;gt;)&lt;/code&gt; に相当するSQL です。デフォルト値は &lt;code&gt;False&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e9f695c5cdafd569ee51fc695279eb0e6f896f6f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;django-admin&lt;/code&gt; only displays the help text no matter what arguments it is given, there is probably a problem with the file association in Windows. Check if there is more than one environment variable set for running Python scripts in &lt;code&gt;PATH&lt;/code&gt;. This usually occurs when there is more than one Python version installed.</source>
          <target state="translated">&lt;code&gt;django-admin&lt;/code&gt; が、与えられた引数に関係なくヘルプテキストのみを表示する場合、Windowsでのファイルの関連付けに問題がある可能性があります。 &lt;code&gt;PATH&lt;/code&gt; で Pythonスクリプトを実行するために設定されている環境変数が複数あるかどうかを確認します。これは通常、複数のPythonバージョンがインストールされている場合に発生します。</target>
        </trans-unit>
        <trans-unit id="361315ebe5ec678bf8ab55ad6dc27bfd903864d3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;failfast&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, the test suite will stop running after the first test failure is detected.</source>
          <target state="translated">&lt;code&gt;failfast&lt;/code&gt; が &lt;code&gt;True&lt;/code&gt; の場合、最初のテストの失敗が検出されると、テストスイートは実行を停止します。</target>
        </trans-unit>
        <trans-unit id="553d84602f7d657ca01d69ac24fa1a843b57d59e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fetch_redirect_response&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, the final page won&amp;rsquo;t be loaded. Since the test client can&amp;rsquo;t fetch external URLs, this is particularly useful if &lt;code&gt;expected_url&lt;/code&gt; isn&amp;rsquo;t part of your Django app.</source>
          <target state="translated">場合 &lt;code&gt;fetch_redirect_response&lt;/code&gt; がある &lt;code&gt;False&lt;/code&gt; を、最終ページがロードされません。テストクライアントは外部URLを取得できないため、 &lt;code&gt;expected_url&lt;/code&gt; がDjangoアプリに含まれていない場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="aa845bb6d3fc5ac41cd79bc147d6aec3b05b0f54" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;get()&lt;/code&gt; doesn&amp;rsquo;t find any object, it raises a &lt;a href=&quot;class#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;Model.DoesNotExist&lt;/code&gt;&lt;/a&gt; exception:</source>
          <target state="translated">場合 &lt;code&gt;get()&lt;/code&gt; 任意のオブジェクトを見つけることができません、それが提起&lt;a href=&quot;class#django.db.models.Model.DoesNotExist&quot;&gt; &lt;code&gt;Model.DoesNotExist&lt;/code&gt; の&lt;/a&gt;例外を：</target>
        </trans-unit>
        <trans-unit id="d0b969b258b0b680f2a5e4e2993f89a44307e3bf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;get()&lt;/code&gt; finds more than one object, it raises a &lt;a href=&quot;class#django.db.models.Model.MultipleObjectsReturned&quot;&gt;&lt;code&gt;Model.MultipleObjectsReturned&lt;/code&gt;&lt;/a&gt; exception:</source>
          <target state="translated">場合 &lt;code&gt;get()&lt;/code&gt; 複数のオブジェクトを見つけ、それが提起&lt;a href=&quot;class#django.db.models.Model.MultipleObjectsReturned&quot;&gt; &lt;code&gt;Model.MultipleObjectsReturned&lt;/code&gt; の&lt;/a&gt;例外を：</target>
        </trans-unit>
        <trans-unit id="9b9986686bc1debc8466f09df6e013f28b9ad282" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;html_message&lt;/code&gt; is provided, the resulting email will be a &lt;em&gt;multipart/alternative&lt;/em&gt; email with &lt;code&gt;message&lt;/code&gt; as the &lt;em&gt;text/plain&lt;/em&gt; content type and &lt;code&gt;html_message&lt;/code&gt; as the &lt;em&gt;text/html&lt;/em&gt; content type.</source>
          <target state="translated">場合 &lt;code&gt;html_message&lt;/code&gt; が提供され、得られた電子メールになります&lt;em&gt;マルチパート/代替&lt;/em&gt;た電子メール &lt;code&gt;message&lt;/code&gt; として&lt;em&gt;text / plainの&lt;/em&gt;コンテンツタイプ及び &lt;code&gt;html_message&lt;/code&gt; として&lt;em&gt;text / htmlの&lt;/em&gt;コンテンツタイプ。</target>
        </trans-unit>
        <trans-unit id="941ffb3faea2e8e3929fbee655ba7559bab0a4f8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;include_superusers&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; (default), the result will include superusers.</source>
          <target state="translated">場合 &lt;code&gt;include_superusers&lt;/code&gt; がある &lt;code&gt;True&lt;/code&gt; （デフォルト）、その結果は、スーパーユーザが含まれます。</target>
        </trans-unit>
        <trans-unit id="949941ab38e1b5f16c207535d23d3aea1d5f9972" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;inspectdb&lt;/code&gt; cannot map a column&amp;rsquo;s type to a model field type, it&amp;rsquo;ll use &lt;code&gt;TextField&lt;/code&gt; and will insert the Python comment &lt;code&gt;'This field type is a guess.'&lt;/code&gt; next to the field in the generated model. The recognized fields may depend on apps listed in &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;. For example, &lt;a href=&quot;contrib/postgres/index#module-django.contrib.postgres&quot;&gt;&lt;code&gt;django.contrib.postgres&lt;/code&gt;&lt;/a&gt; adds recognition for several PostgreSQL-specific field types.</source>
          <target state="translated">&lt;code&gt;inspectdb&lt;/code&gt; が列のタイプをモデルフィールドタイプにマップできない場合、 &lt;code&gt;TextField&lt;/code&gt; が使用され、Pythonコメント &lt;code&gt;'This field type is a guess.'&lt;/code&gt; が挿入されます。生成されたモデルのフィールドの横。認識されるフィールドは、&lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; に&lt;/a&gt;リストされているアプリに依存する場合があります。たとえば、&lt;a href=&quot;contrib/postgres/index#module-django.contrib.postgres&quot;&gt; &lt;code&gt;django.contrib.postgres&lt;/code&gt; &lt;/a&gt;は、いくつかのPostgreSQL固有のフィールドタイプの認識を追加します。</target>
        </trans-unit>
        <trans-unit id="858f3c43f659ce4cbaef07711c393bd1533ced3f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;interactive&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, it&amp;rsquo;s safe to prompt the user to input things on the command line. If &lt;code&gt;interactive&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, functions which listen for this signal should not try to prompt for anything.</source>
          <target state="translated">&lt;code&gt;interactive&lt;/code&gt; が &lt;code&gt;True&lt;/code&gt; の場合、ユーザーにコマンドラインでの入力を促すのは安全です。 &lt;code&gt;interactive&lt;/code&gt; が &lt;code&gt;False&lt;/code&gt; の場合、このシグナルをリッスンする関数は何も要求しないでください。</target>
        </trans-unit>
        <trans-unit id="626b4c25c6b37295fc6b45206394744f58a53eb8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;interactive&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, the test suite has permission to ask the user for instructions when the test suite is executed. An example of this behavior would be asking for permission to delete an existing test database. If &lt;code&gt;interactive&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, the test suite must be able to run without any manual intervention.</source>
          <target state="translated">場合は &lt;code&gt;interactive&lt;/code&gt; ある &lt;code&gt;True&lt;/code&gt; 、テストスイートは、テストスイートを実行したときに指示をユーザーに依頼する権限を持っています。この動作の例は、既存のテストデータベースを削除する許可を求めることです。場合は &lt;code&gt;interactive&lt;/code&gt; ある &lt;code&gt;False&lt;/code&gt; を、テストスイートには、任意の手動の介入なしで実行できなければなりません。</target>
        </trans-unit>
        <trans-unit id="1c57c8f9832ea1f2b2611e0f586e4b53e5bc935e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;is_active&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; (default), returns only active users, or if &lt;code&gt;False&lt;/code&gt;, returns only inactive users. Use &lt;code&gt;None&lt;/code&gt; to return all users irrespective of active state.</source>
          <target state="translated">場合 &lt;code&gt;is_active&lt;/code&gt; はある &lt;code&gt;True&lt;/code&gt; （デフォルト）、リターンのみアクティブユーザー、または場合は &lt;code&gt;False&lt;/code&gt; を、リターンのみ非アクティブなユーザー。 &lt;code&gt;None&lt;/code&gt; を使用すると、アクティブな状態に関係なくすべてのユーザーが返されます。</target>
        </trans-unit>
        <trans-unit id="9d60554d1eba08cd3217b974a171c4e2851e3e70" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;is_valid()&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, we&amp;rsquo;ll now be able to find all the validated form data in its &lt;code&gt;cleaned_data&lt;/code&gt; attribute. We can use this data to update the database or do other processing before sending an HTTP redirect to the browser telling it where to go next.</source>
          <target state="translated">&lt;code&gt;is_valid()&lt;/code&gt; が &lt;code&gt;True&lt;/code&gt; の場合、検証済みのすべてのフォームデータを &lt;code&gt;cleaned_data&lt;/code&gt; 属性で見つけることができます。このデータを使用して、データベースの更新や他の処理を行ってから、HTTPリダイレクトをブラウザーに送信して、次に進むべき場所を指示することができます。</target>
        </trans-unit>
        <trans-unit id="fc0ce8e242c0def881ec84e3bdcf44bc32faa981" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;keepdb&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, the test suite will use the existing database, or create one if necessary. If &lt;code&gt;False&lt;/code&gt;, a new database will be created, prompting the user to remove the existing one, if present.</source>
          <target state="translated">場合 &lt;code&gt;keepdb&lt;/code&gt; がある &lt;code&gt;True&lt;/code&gt; 、テストスイートは、既存のデータベースを使用するか、必要であれば1を作成します。場合 &lt;code&gt;False&lt;/code&gt; 、新しいデータベースが存在する場合、既存のものを削除するようにユーザに促す、作成されます。</target>
        </trans-unit>
        <trans-unit id="b705770333b7f75454b455c7c40f3bee6b13e433" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; is in the context, returns its value. Otherwise inserts &lt;code&gt;key&lt;/code&gt; with a value of &lt;code&gt;default&lt;/code&gt; and returns &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;key&lt;/code&gt; コンテキストにある、その値を返します。それ以外の場合は、 &lt;code&gt;default&lt;/code&gt; 値で &lt;code&gt;key&lt;/code&gt; を挿入し、デフォルトを返し &lt;code&gt;default&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="06130c8d19c7ce438bfdc76c100ec76ef0f594dd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;limit_choices_to&lt;/code&gt; is or returns a &lt;a href=&quot;querysets#django.db.models.Q&quot;&gt;&lt;code&gt;Q object&lt;/code&gt;&lt;/a&gt;, which is useful for &lt;a href=&quot;../../topics/db/queries#complex-lookups-with-q&quot;&gt;complex queries&lt;/a&gt;, then it will only have an effect on the choices available in the admin when the field is not listed in &lt;a href=&quot;../contrib/admin/index#django.contrib.admin.ModelAdmin.raw_id_fields&quot;&gt;&lt;code&gt;raw_id_fields&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;ModelAdmin&lt;/code&gt; for the model.</source>
          <target state="translated">場合 &lt;code&gt;limit_choices_to&lt;/code&gt; があるかを返す&lt;a href=&quot;querysets#django.db.models.Q&quot;&gt; &lt;code&gt;Q object&lt;/code&gt; &lt;/a&gt;のために有用である、&lt;a href=&quot;../../topics/db/queries#complex-lookups-with-q&quot;&gt;複雑なクエリを&lt;/a&gt;フィールドがに表示されていないとき、それは唯一の管理者で利用可能な選択肢に影響を持つことになります&lt;a href=&quot;../contrib/admin/index#django.contrib.admin.ModelAdmin.raw_id_fields&quot;&gt; &lt;code&gt;raw_id_fields&lt;/code&gt; &lt;/a&gt;に &lt;code&gt;ModelAdmin&lt;/code&gt; のモデルについて。</target>
        </trans-unit>
        <trans-unit id="a69ba9ab042b6955c7b8a5885ebdc5353d04f0cb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;localized_fields&lt;/code&gt; is set to the special value &lt;code&gt;'__all__'&lt;/code&gt;, all fields will be localized.</source>
          <target state="translated">&lt;code&gt;localized_fields&lt;/code&gt; が特別な値 &lt;code&gt;'__all__'&lt;/code&gt; に設定されている場合、すべてのフィールドがローカライズされます。</target>
        </trans-unit>
        <trans-unit id="12496495cc140a23f1470913ca850c949acc7c56" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;num_messages&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, the output will be &lt;code&gt;You have 1 message.&lt;/code&gt; If &lt;code&gt;num_messages&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt; the output will be &lt;code&gt;You have 2 messages.&lt;/code&gt;</source>
          <target state="translated">場合 &lt;code&gt;num_messages&lt;/code&gt; ある &lt;code&gt;1&lt;/code&gt; 、出力は次のようになります &lt;code&gt;You have 1 message.&lt;/code&gt; &lt;code&gt;num_messages&lt;/code&gt; が &lt;code&gt;2&lt;/code&gt; の場合、出力は次のようになり &lt;code&gt;You have 2 messages.&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="745547a13ff3b07b7f0df9814180894ed3cbd790" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;obj&lt;/code&gt; is passed in, only returns the group permissions for this specific object.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; が渡された場合、この特定のオブジェクトのグループ権限のみを返します。</target>
        </trans-unit>
        <trans-unit id="03ed81e92e7e7194280c4f660b2b67fb25464e6b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;obj&lt;/code&gt; is passed in, only returns the permissions for this specific object.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; が渡された場合、この特定のオブジェクトの権限のみを返します。</target>
        </trans-unit>
        <trans-unit id="85ee7993fd53cf5084822b1e8f85e878a5981909" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;obj&lt;/code&gt; is passed in, only returns the user permissions for this specific object.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; が渡された場合、この特定のオブジェクトのユーザー権限のみを返します。</target>
        </trans-unit>
        <trans-unit id="0bd47472a1197cd85102dd3aa290ee04f5235bcb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;obj&lt;/code&gt; is passed in, this method won&amp;rsquo;t check for a permission for the model, but for this specific object.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; が渡された場合、このメソッドはモデルの権限ではなく、この特定のオブジェクトの権限をチェックします。</target>
        </trans-unit>
        <trans-unit id="b51a1e97f03cbd18b3eb07528ca1ad579116eda4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;obj&lt;/code&gt; is passed in, this method won&amp;rsquo;t check for permissions for the model, but for the specific object.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; が渡された場合、このメソッドはモデルのアクセス許可をチェックしませんが、特定のオブジェクトをチェックします。</target>
        </trans-unit>
        <trans-unit id="2940740f5602aae91149f88fbd7e5e938152bb95" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;objs&lt;/code&gt; contains duplicates, only the first one is updated.</source>
          <target state="translated">&lt;code&gt;objs&lt;/code&gt; に重複が含まれている場合、最初の1つだけが更新されます。</target>
        </trans-unit>
        <trans-unit id="cfd0587006a5ebe13f169804da937daa1dc6170e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;open_file&lt;/code&gt; doesn&amp;rsquo;t have a name or if the name of &lt;code&gt;open_file&lt;/code&gt; isn&amp;rsquo;t appropriate, provide a custom file name using the &lt;code&gt;filename&lt;/code&gt; parameter. Note that if you pass a file-like object like &lt;code&gt;io.BytesIO&lt;/code&gt;, it&amp;rsquo;s your task to &lt;code&gt;seek()&lt;/code&gt; it before passing it to &lt;code&gt;FileResponse&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;open_file&lt;/code&gt; は名前を持っているかの名前があればしない &lt;code&gt;open_file&lt;/code&gt; が適切ではない、使用してカスタムファイル名を指定する &lt;code&gt;filename&lt;/code&gt; パラメータを。 &lt;code&gt;io.BytesIO&lt;/code&gt; のようなファイルのようなオブジェクトを渡す場合、それを &lt;code&gt;FileResponse&lt;/code&gt; に渡す前に &lt;code&gt;seek()&lt;/code&gt; するのがあなたの仕事です。</target>
        </trans-unit>
        <trans-unit id="a0a54a895818665a80021bf42884336a44240094" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;paginate_by&lt;/code&gt; is specified, Django will paginate the results returned by this. You can specify the page number in the URL in one of two ways:</source>
          <target state="translated">&lt;code&gt;paginate_by&lt;/code&gt; が指定されている場合、Djangoはこれによって返される結果にページ番号を付けます。URLのページ番号は、次の2つの方法のいずれかで指定できます。</target>
        </trans-unit>
        <trans-unit id="36d395ac24cbc55eaca1c775ab13e6698f248794" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;pdb&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, a debugger (&lt;code&gt;pdb&lt;/code&gt; or &lt;code&gt;ipdb&lt;/code&gt;) will be spawned at each test error or failure.</source>
          <target state="translated">&lt;code&gt;pdb&lt;/code&gt; が &lt;code&gt;True&lt;/code&gt; の場合、テストエラーまたは失敗のたびにデバッガー（ &lt;code&gt;pdb&lt;/code&gt; または &lt;code&gt;ipdb&lt;/code&gt; ）が生成されます。</target>
        </trans-unit>
        <trans-unit id="58fb18994a7a795b3456196c38bd884554ce674e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;proxy = True&lt;/code&gt;, a model which subclasses another model will be treated as a &lt;a href=&quot;../../topics/db/models#proxy-models&quot;&gt;proxy model&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;proxy = True&lt;/code&gt; 場合、別のモデルをサブクラス化するモデルは&lt;a href=&quot;../../topics/db/models#proxy-models&quot;&gt;プロキシモデル&lt;/a&gt;として扱われます。</target>
        </trans-unit>
        <trans-unit id="3c2ace2686aec54c72ff11eb64de5cdd2c225de9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;query_string&lt;/code&gt; is not passed in, the resulting &lt;code&gt;QueryDict&lt;/code&gt; will be empty (it will have no keys or values).</source>
          <target state="translated">&lt;code&gt;query_string&lt;/code&gt; が渡されない場合、結果の &lt;code&gt;QueryDict&lt;/code&gt; は空になります（キーや値はありません）。</target>
        </trans-unit>
        <trans-unit id="f8ceb4db235a057ec15ab959aa814110f84beb5a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;readonly_fields&lt;/code&gt; is used without defining explicit ordering through &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt;&lt;code&gt;ModelAdmin.fields&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt;&lt;code&gt;ModelAdmin.fieldsets&lt;/code&gt;&lt;/a&gt; they will be added last after all editable fields.</source>
          <target state="translated">場合 &lt;code&gt;readonly_fields&lt;/code&gt; はを通じて明示的な順序付けを定義せずに使用されている&lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt; &lt;code&gt;ModelAdmin.fields&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt; &lt;code&gt;ModelAdmin.fieldsets&lt;/code&gt; &lt;/a&gt;彼らはすべての編集可能フィールドの後、最後に追加されます。</target>
        </trans-unit>
        <trans-unit id="fa30400306a5da4bcdce4253036865b4f3bc0524" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;request&lt;/code&gt; is provided, it must be an &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt;. Then the engine must make it, as well as the CSRF token, available in the template. How this is achieved is up to each backend.</source>
          <target state="translated">&lt;code&gt;request&lt;/code&gt; が提供される場合、それは&lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;でなければなりません。次に、エンジンはそれをCSRFトークンと同様にテンプレートで使用できるようにする必要があります。これがどのように達成されるかは、各バックエンド次第です。</target>
        </trans-unit>
        <trans-unit id="528ada93743e93ff057cf83a95ad5d5fef5392e1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;reverse&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, test cases will be executed in the opposite order. This could be useful to debug tests that aren&amp;rsquo;t properly isolated and have side effects. &lt;a href=&quot;overview#order-of-tests&quot;&gt;Grouping by test class&lt;/a&gt; is preserved when using this option.</source>
          <target state="translated">&lt;code&gt;reverse&lt;/code&gt; が &lt;code&gt;True&lt;/code&gt; の場合、テストケースは逆の順序で実行されます。これは、適切に分離されておらず、副作用があるテストをデバッグするのに役立ちます。このオプションを使用すると&lt;a href=&quot;overview#order-of-tests&quot;&gt;、テストクラスによるグループ化&lt;/a&gt;が保持されます。</target>
        </trans-unit>
        <trans-unit id="ad20bc0c784c2f029f4a98645d65c0f300592e27" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;reverse_sql&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; (the default), the &lt;code&gt;RunSQL&lt;/code&gt; operation is irreversible.</source>
          <target state="translated">場合 &lt;code&gt;reverse_sql&lt;/code&gt; はありません &lt;code&gt;None&lt;/code&gt; （デフォルト）、 &lt;code&gt;RunSQL&lt;/code&gt; 操作が不可逆的です。</target>
        </trans-unit>
        <trans-unit id="43523508781181e89cf0252c143efbdcfd606d84" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;save()&lt;/code&gt; is passed a list of field names in keyword argument &lt;code&gt;update_fields&lt;/code&gt;, only the fields named in that list will be updated. This may be desirable if you want to update just one or a few fields on an object. There will be a slight performance benefit from preventing all of the model fields from being updated in the database. For example:</source>
          <target state="translated">場合は &lt;code&gt;save()&lt;/code&gt; キーワード引数のフィールド名のリストを渡され &lt;code&gt;update_fields&lt;/code&gt; を、そのリストに名前のフィールドのみが更新されます。これは、オブジェクトの1つまたはいくつかのフィールドのみを更新する場合に適しています。すべてのモデルフィールドがデータベースで更新されないようにすることで、パフォーマンスがわずかに向上します。例えば：</target>
        </trans-unit>
        <trans-unit id="f0b514748e158fcb5e55ffe9236c490c2c794096" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'plain'&lt;/code&gt;, which is the default, the terms are treated as separate keywords. If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'phrase'&lt;/code&gt;, the terms are treated as a single phrase. If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'raw'&lt;/code&gt;, then you can provide a formatted search query with terms and operators. If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'websearch'&lt;/code&gt;, then you can provide a formatted search query, similar to the one used by web search engines. &lt;code&gt;'websearch'&lt;/code&gt; requires PostgreSQL &amp;ge; 11. Read PostgreSQL&amp;rsquo;s &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES&quot;&gt;Full Text Search docs&lt;/a&gt; to learn about differences and syntax. Examples:</source>
          <target state="translated">場合 &lt;code&gt;search_type&lt;/code&gt; ある &lt;code&gt;'plain'&lt;/code&gt; デフォルトで、条件は、個別のキーワードとして扱われます。場合 &lt;code&gt;search_type&lt;/code&gt; ある &lt;code&gt;'phrase'&lt;/code&gt; 、用語は、単一の句として扱われます。 &lt;code&gt;search_type&lt;/code&gt; が &lt;code&gt;'raw'&lt;/code&gt; の場合、用語と演算子を使用してフォーマットされた検索クエリを提供できます。 &lt;code&gt;search_type&lt;/code&gt; が &lt;code&gt;'websearch'&lt;/code&gt; websearch 'の場合、Web検索エンジンで使用されるものと同様のフォーマットされた検索クエリを提供できます。 &lt;code&gt;'websearch'&lt;/code&gt; はPostgreSQL&amp;ge;11が必要です。違いと構文については、PostgreSQLの&lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES&quot;&gt;全文検索ドキュメント&lt;/a&gt;をお読みください。例：</target>
        </trans-unit>
        <trans-unit id="758b7e8b01a01d0cf6d9accbc0e30c1dde12bb08" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'plain'&lt;/code&gt;, which is the default, the terms are treated as separate keywords. If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'phrase'&lt;/code&gt;, the terms are treated as a single phrase. If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'raw'&lt;/code&gt;, then you can provide a formatted search query with terms and operators. Read PostgreSQL&amp;rsquo;s &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES&quot;&gt;Full Text Search docs&lt;/a&gt; to learn about differences and syntax. Examples:</source>
          <target state="translated">場合 &lt;code&gt;search_type&lt;/code&gt; ある &lt;code&gt;'plain'&lt;/code&gt; デフォルトで、条件は、個別のキーワードとして扱われます。場合 &lt;code&gt;search_type&lt;/code&gt; ある &lt;code&gt;'phrase'&lt;/code&gt; 、用語は、単一の句として扱われます。 &lt;code&gt;search_type&lt;/code&gt; が &lt;code&gt;'raw'&lt;/code&gt; の場合、フォーマットされた検索クエリに用語と演算子を指定できます。PostgreSQLの&lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES&quot;&gt;全文検索ドキュメント&lt;/a&gt;を読んで、違いと構文について学んでください。例：</target>
        </trans-unit>
        <trans-unit id="eb44119253673674de8eae9f7f13c0327406af38" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;self.name&lt;/code&gt; is &lt;code&gt;'/example.com'&lt;/code&gt; this returns &lt;code&gt;'//example.com/'&lt;/code&gt; which, in turn, is a valid schema relative URL but not the expected &lt;code&gt;'/%2Fexample.com/'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self.name&lt;/code&gt; が &lt;code&gt;'/example.com'&lt;/code&gt; の場合、これは &lt;code&gt;'//example.com/'&lt;/code&gt; を返します。これは、有効なスキーマ相対URLですが、予期される &lt;code&gt;'/%2Fexample.com/'&lt;/code&gt; ではありません。</target>
        </trans-unit>
        <trans-unit id="4149f6c59a8a8f994df534f92c186cd9332cad77" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;set_prefix&lt;/code&gt; is True, setting the URL resolver script prefix to &lt;a href=&quot;settings#std:setting-FORCE_SCRIPT_NAME&quot;&gt;&lt;code&gt;FORCE_SCRIPT_NAME&lt;/code&gt;&lt;/a&gt; if defined, or &lt;code&gt;/&lt;/code&gt; otherwise.</source>
          <target state="translated">場合 &lt;code&gt;set_prefix&lt;/code&gt; が真である、にURLリゾルバスクリプトプレフィックスを設定&lt;a href=&quot;settings#std:setting-FORCE_SCRIPT_NAME&quot;&gt; &lt;code&gt;FORCE_SCRIPT_NAME&lt;/code&gt; &lt;/a&gt;定義されている場合、または &lt;code&gt;/&lt;/code&gt; そう。</target>
        </trans-unit>
        <trans-unit id="ab1cb60769ca7f5a89497ce33a2ae60ab8a9d4bd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;some_list&lt;/code&gt; is &lt;code&gt;['a', 'b', 'c']&lt;/code&gt;, the output will be &lt;code&gt;['a', 'b']&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;some_list&lt;/code&gt; がある &lt;code&gt;['a', 'b', 'c']&lt;/code&gt; 、出力があろう &lt;code&gt;['a', 'b']&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3c918e03d3cc6b09be1e254bf14b4ced98312a29" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;strict&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; (the default), a country-specific variant may be returned when neither the language code nor its generic variant is found. For example, if only &lt;code&gt;'es-co'&lt;/code&gt; is in &lt;a href=&quot;settings#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt;, that&amp;rsquo;s returned for &lt;code&gt;lang_code&lt;/code&gt;s like &lt;code&gt;'es'&lt;/code&gt; and &lt;code&gt;'es-ar'&lt;/code&gt;. Those matches aren&amp;rsquo;t returned if &lt;code&gt;strict=True&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;strict&lt;/code&gt; ある &lt;code&gt;False&lt;/code&gt; （デフォルト）言語コードもその一般的な変種でもないが発見された場合、国別のバリアントが返されることがあります。たとえば、 &lt;code&gt;'es-co'&lt;/code&gt; だけが&lt;a href=&quot;settings#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; にある&lt;/a&gt;場合、それは &lt;code&gt;'es'&lt;/code&gt; や &lt;code&gt;'es-ar'&lt;/code&gt; のような &lt;code&gt;lang_code&lt;/code&gt; に対して返されます。 &lt;code&gt;strict=True&lt;/code&gt; の場合、これらの一致は返されません。</target>
        </trans-unit>
        <trans-unit id="2ce60c41b82f95787b4d8ede724ae3aeb165c150" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;string_if_invalid&lt;/code&gt; contains a &lt;code&gt;'%s'&lt;/code&gt;, the format marker will be replaced with the name of the invalid variable.</source>
          <target state="translated">&lt;code&gt;string_if_invalid&lt;/code&gt; に &lt;code&gt;'%s'&lt;/code&gt; が含まれている場合、フォーマットマーカーは無効な変数の名前に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="d4e2d7c9cc527a004f01055080d5e8c772cbe415" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;strings_only&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, don&amp;rsquo;t convert (some) non-string-like objects.</source>
          <target state="translated">&lt;code&gt;strings_only&lt;/code&gt; が &lt;code&gt;True&lt;/code&gt; の場合、（一部の）文字列以外のオブジェクトを変換しません。</target>
        </trans-unit>
        <trans-unit id="02948597a9796eed77f937b00717f14fc87c09e4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;test_labels&lt;/code&gt; has a value of &lt;code&gt;None&lt;/code&gt;, the test runner will search for tests in all files below the current directory whose names match its &lt;code&gt;pattern&lt;/code&gt; (see above).</source>
          <target state="translated">場合 &lt;code&gt;test_labels&lt;/code&gt; は値がある &lt;code&gt;None&lt;/code&gt; 、テストランナーは、名前の一致、現在のディレクトリの下にあるすべてのファイルでテストを検索する &lt;code&gt;pattern&lt;/code&gt; （上記参照します）。</target>
        </trans-unit>
        <trans-unit id="ffc18a42277d2f23ae1db5f8a3d415914924bb24" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;this_value&lt;/code&gt; is 175, &lt;code&gt;max_value&lt;/code&gt; is 200, and &lt;code&gt;max_width&lt;/code&gt; is 100, the image in the above example will be 88 pixels wide (because 175/200 = .875; .875 * 100 = 87.5 which is rounded up to 88).</source>
          <target state="translated">場合 &lt;code&gt;this_value&lt;/code&gt; は 175であり、 &lt;code&gt;max_value&lt;/code&gt; 200であり、そして &lt;code&gt;max_width&lt;/code&gt; 上記の例では、画像は、ワイド88個の画素となり、100（= .875 200分の175なぜなら、0.875 * 100 88に切り上げられ= 87.5）。</target>
        </trans-unit>
        <trans-unit id="4137df6686025784e6f4bd6dbe64263ec732c01b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;urlize&lt;/code&gt; is applied to text that already contains HTML markup, or to email addresses that contain single quotes (&lt;code&gt;'&lt;/code&gt;), things won&amp;rsquo;t work as expected. Apply this filter only to plain text.</source>
          <target state="translated">&lt;code&gt;urlize&lt;/code&gt; が既にHTMLマークアップを含むテキストに適用されている場合、または単一引用符（ &lt;code&gt;'&lt;/code&gt; ）を含むメールアドレスに適用されている場合、期待どおりに動作しません。このフィルターはプレーンテキストにのみ適用します。</target>
        </trans-unit>
        <trans-unit id="755d325efa931044c84d8862e2bdd301da420af5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;validate_max=True&lt;/code&gt; is passed to &lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt;&lt;code&gt;formset_factory()&lt;/code&gt;&lt;/a&gt;, validation will also check that the number of forms in the data set, minus those marked for deletion, is less than or equal to &lt;code&gt;max_num&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;validate_max=True&lt;/code&gt; が&lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt; &lt;code&gt;formset_factory()&lt;/code&gt; に&lt;/a&gt;渡される場合、検証では、データセット内のフォームの数から、削除用にマークされたものを差し引いた数が &lt;code&gt;max_num&lt;/code&gt; 以下であることも確認します。</target>
        </trans-unit>
        <trans-unit id="0c7a70e9a93e3c5c85204a071c7a02b943a478cc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;validate_min=True&lt;/code&gt; is passed to &lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt;&lt;code&gt;formset_factory()&lt;/code&gt;&lt;/a&gt;, validation will also check that the number of forms in the data set, minus those marked for deletion, is greater than or equal to &lt;code&gt;min_num&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;validate_min=True&lt;/code&gt; 渡される&lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt; &lt;code&gt;formset_factory()&lt;/code&gt; &lt;/a&gt;、検証は、データセット内のフォーム、マイナス削除のマークを付けたものの数が、より大きいことを確認するかに等しくなります &lt;code&gt;min_num&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8c6735bdaa6045f1ec97e336418abe747d7949ed" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is 123456789, the output would be &lt;code&gt;117.7 MB&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;value&lt;/code&gt; 123456789で、出力は次のようになり &lt;code&gt;117.7 MB&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4f3f2f373b391d75ad0829ab7341020c580a64d9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;&quot;&lt;/code&gt; (the empty string), the output will be &lt;code&gt;nothing&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;&quot;&lt;/code&gt; （空の文字列）、出力ができなくなります &lt;code&gt;nothing&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="362ec1cf5c026a9ec9908c69ec686dfa7658cd06" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;&amp;lt;b&amp;gt;Joel&amp;lt;/b&amp;gt; &amp;lt;button&amp;gt;is&amp;lt;/button&amp;gt; a &amp;lt;span&amp;gt;slug&amp;lt;/span&amp;gt;&quot;&lt;/code&gt; the return value will be &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;&amp;lt;b&amp;gt;Joel&amp;lt;/b&amp;gt; &amp;lt;button&amp;gt;is&amp;lt;/button&amp;gt; a &amp;lt;span&amp;gt;slug&amp;lt;/span&amp;gt;&quot;&lt;/code&gt; 戻り値は次のようになります &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e691b98f5c994a59981e42ad33e040c5b50a1e37" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;&amp;lt;b&amp;gt;Joel&amp;lt;/b&amp;gt; &amp;lt;button&amp;gt;is&amp;lt;/button&amp;gt; a &amp;lt;span&amp;gt;slug&amp;lt;/span&amp;gt;&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;&amp;lt;b&amp;gt;Joel&amp;lt;/b&amp;gt; &amp;lt;button&amp;gt;is&amp;lt;/button&amp;gt; a &amp;lt;span&amp;gt;slug&amp;lt;/span&amp;gt;&quot;&lt;/code&gt; 、出力は次のようになります &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3f8e9ee502ff5012d2ebcd6a7cefdc7edffdf62b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel is a slug&amp;lt;/p&amp;gt;&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel i&amp;hellip;&amp;lt;/p&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel is a slug&amp;lt;/p&amp;gt;&quot;&lt;/code&gt; 、出力はされます &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel i&amp;hellip;&amp;lt;/p&amp;gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d5e14c0338556cf8d588b052d7020856a9e0d085" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel is a slug&amp;lt;/p&amp;gt;&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel is &amp;hellip;&amp;lt;/p&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel is a slug&amp;lt;/p&amp;gt;&quot;&lt;/code&gt; 、出力は次のようになります &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel is &amp;hellip;&amp;lt;/p&amp;gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09787e815cb703f7bdecda5fd0867ef3e441c8b5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;?test=1&amp;amp;me=2&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;?test=1&amp;amp;amp;me=2&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;?test=1&amp;amp;me=2&quot;&lt;/code&gt; 、出力は次のようになります &lt;code&gt;&quot;?test=1&amp;amp;amp;me=2&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="769218d7736e8cea14dbbebb7c1aca16fb56ff9e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Check out www.djangoproject.com&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Check out &amp;lt;a href=&quot;http://www.djangoproject.com&quot;
rel=&quot;nofollow&quot;&amp;gt;www.djangoproject.com&amp;lt;/a&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;Check out www.djangoproject.com&quot;&lt;/code&gt; 、出力は次のようになります &lt;code&gt;&quot;Check out &amp;lt;a href=&quot;http://www.djangoproject.com&quot; rel=&quot;nofollow&quot;&amp;gt;www.djangoproject.com&amp;lt;/a&amp;gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="740ff784b31d6ec0305563ffa7d9222904379a81" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Check out www.djangoproject.com&quot;&lt;/code&gt;, the output would be &lt;code&gt;'Check out &amp;lt;a href=&quot;http://www.djangoproject.com&quot;
rel=&quot;nofollow&quot;&amp;gt;www.djangoproj&amp;hellip;&amp;lt;/a&amp;gt;'&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;Check out www.djangoproject.com&quot;&lt;/code&gt; 、出力は以下のようになり &lt;code&gt;'Check out &amp;lt;a href=&quot;http://www.djangoproject.com&quot; rel=&quot;nofollow&quot;&amp;gt;www.djangoproj&amp;hellip;&amp;lt;/a&amp;gt;'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="767db1d4011700144ef49c99462e47c02a6c2278" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Django&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Django&amp;nbsp;&amp;nbsp;&amp;nbsp; &quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;Django&quot;&lt;/code&gt; 、出力は次のようになります &lt;code&gt;&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Django&amp;nbsp;&amp;nbsp;&amp;nbsp; &quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="88d4c2db75d2d463013aff515a4e539aaecba50a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;I'm using Django&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;I\'m using Django&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;I'm using Django&quot;&lt;/code&gt; と、出力は次のようになります &lt;code&gt;&quot;I\'m using Django&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3b1301998ce64c5e4b7385eb5a9c1ed65276d48e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;JOEL IS A SLUG&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; 、出力は次のようになります &lt;code&gt;&quot;JOEL IS A SLUG&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dfa84605a1f0d197bce09323aca3dc32fb281b29" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Joel i&amp;hellip;&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; 、出力は次のようになります &lt;code&gt;&quot;Joel i&amp;hellip;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="76a39aa993601030e66d46ab03d548fbf5f2434f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Joel is &amp;hellip;&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; 、出力は次のようになります &lt;code&gt;&quot;Joel is &amp;hellip;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="698cbda96e629b682048b0c4d5991a17b4894cea" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;joel-is-a-slug&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; 、出力は次のようになります &lt;code&gt;&quot;joel-is-a-slug&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc76eaef5a37e6719179bb1b819008595736dfb2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;, the output will be &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; 、出力は次のようになります &lt;code&gt;4&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="410449c9d652bd564e1760e072d78e9e87b32302" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;String with spaces&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Stringwithspaces&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;String with spaces&quot;&lt;/code&gt; 、出力は次のようになります &lt;code&gt;&quot;Stringwithspaces&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d91bcc161c250f9c6d522fa815ad28f244f63f29" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;django&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Django&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;django&quot;&lt;/code&gt; 、出力は次のようになります &lt;code&gt;&quot;Django&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b898df2bd8f9782ff2ac117ad19c1990ad06b75e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;https://www.example.org/&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;https%3A%2F%2Fwww.example.org%2F&quot;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;value&lt;/code&gt; である &lt;code&gt;&quot;https://www.example.org/&quot;&lt;/code&gt; 、出力があろう &lt;code&gt;&quot;https%3A%2F%2Fwww.example.org%2F&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="03a8dfb79e75755980218848dff7e849b6a16325" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;https://www.example.org/foo?a=b&amp;amp;c=d&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;https%3A//www.example.org/foo%3Fa%3Db%26c%3Dd&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;https://www.example.org/foo?a=b&amp;amp;c=d&quot;&lt;/code&gt; 、出力は次のようになります &lt;code&gt;&quot;https%3A//www.example.org/foo%3Fa%3Db%26c%3Dd&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e8dcb3a8c75858398ed0fa2c246e7342a5a9ba89" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;my FIRST post&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;My First Post&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;&quot;my FIRST post&quot;&lt;/code&gt; 、出力は次のようになります &lt;code&gt;&quot;My First Post&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d8d3d329491303a39279635854b2c96c2d0a0a56" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;testing\r\njavascript 'string\&quot; &amp;lt;b&amp;gt;escaping&amp;lt;/b&amp;gt;&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;testing\\u000D\\u000Ajavascript \\u0027string\\u0022 \\u003Cb\\u003Eescaping\\u003C/b\\u003E&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; された &lt;code&gt;&quot;testing\r\njavascript 'string\&quot; &amp;lt;b&amp;gt;escaping&amp;lt;/b&amp;gt;&quot;&lt;/code&gt; 、出力は次のようになります &lt;code&gt;&quot;testing\\u000D\\u000Ajavascript \\u0027string\\u0022 \\u003Cb\\u003Eescaping\\u003C/b\\u003E&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b41984a04577beda8d7ddaa541cd5c8bfe22183b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;testing\r\njavascript \'string&quot; &amp;lt;b&amp;gt;escaping&amp;lt;/b&amp;gt;&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;testing\\u000D\\u000Ajavascript \\u0027string\\u0022 \\u003Cb\\u003Eescaping\\u003C/b\\u003E&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; された &lt;code&gt;&quot;testing\r\njavascript \'string&quot; &amp;lt;b&amp;gt;escaping&amp;lt;/b&amp;gt;&quot;&lt;/code&gt; 、出力は次のようになります &lt;code&gt;&quot;testing\\u000D\\u000Ajavascript \\u0027string\\u0022 \\u003Cb\\u003Eescaping\\u003C/b\\u003E&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7889dd48460a146383ae914001047479ef55de85" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, the user&amp;rsquo;s session cookie will expire when the user&amp;rsquo;s Web browser is closed.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;0&lt;/code&gt; ユーザーのWebブラウザを閉じたときに、ユーザのセッションクッキーの有効期限が切れます。</target>
        </trans-unit>
        <trans-unit id="3c553dfd78a3f0de982d32c7b5033452e8746ba1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;10&lt;/code&gt;, the output will be &lt;code&gt;1.000000E+01&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;10&lt;/code&gt; 、出力は次のようになります &lt;code&gt;1.000000E+01&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d24c684374af1d1c25ab9b268e805e2a2d4c3a21" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;123456789&lt;/code&gt;, the output will be &lt;code&gt;8&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;123456789&lt;/code&gt; 、出力は次のようになります &lt;code&gt;8&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c286f249c65363c49d41fb5d1e8d5d182f5584b3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;21&lt;/code&gt;, the output would be &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;21&lt;/code&gt; 、出力は次のようになり &lt;code&gt;True&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="94d30195d6ca92c8171cecacb58be30e535aa470" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;4&lt;/code&gt;, then the output will be &lt;code&gt;6&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が &lt;code&gt;4&lt;/code&gt; の場合、出力は &lt;code&gt;6&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="a692698093e8de528f1a1cbd97383f7022734827" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;800-COLLECT&lt;/code&gt;, the output will be &lt;code&gt;800-2655328&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;800-COLLECT&lt;/code&gt; 、出力は次のようになります &lt;code&gt;800-2655328&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="39b16f1b864fe3ace79d15160dae5c90ca2baf33" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;Django&lt;/code&gt;, the output will be &lt;code&gt;&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp; Django&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;Django&lt;/code&gt; 、出力は次のようになります &lt;code&gt;&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp; Django&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1b3e719615b2ce65d002b3a522862acf99a04139" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;Django&lt;/code&gt;, the output will be &lt;code&gt;&quot;Django&amp;nbsp;&amp;nbsp;&amp;nbsp; &quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;Django&lt;/code&gt; 、出力は次のようになります &lt;code&gt;&quot;Django&amp;nbsp;&amp;nbsp;&amp;nbsp; &quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="78a703a23fba3f90c70f851ca663092d08fdd36a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;Joel is a slug&lt;/code&gt;, the output would be:</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;Joel is a slug&lt;/code&gt; 、出力は次のようになります。</target>
        </trans-unit>
        <trans-unit id="bbabf0348a25f576ca3e535b2d97041ed032a179" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;Joel\nis a slug&lt;/code&gt;, the output will be &lt;code&gt;&amp;lt;p&amp;gt;Joel&amp;lt;br&amp;gt;is a
slug&amp;lt;/p&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;Joel\nis a slug&lt;/code&gt; 、出力されます &lt;code&gt;&amp;lt;p&amp;gt;Joel&amp;lt;br&amp;gt;is a slug&amp;lt;/p&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1d0e1ab9aefbde6cb30a949c02a255d7270744a8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;Joel\nis a slug&lt;/code&gt;, the output will be &lt;code&gt;Joel&amp;lt;br&amp;gt;is a
slug&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;Joel\nis a slug&lt;/code&gt; 、出力は次のようになります &lt;code&gt;Joel&amp;lt;br&amp;gt;is a slug&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3e38dc6e53ea0e75a764b87ee8c019666da2345e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, the output will be &lt;code&gt;nothing&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; されていない &lt;code&gt;None&lt;/code&gt; 、出力ができなくなります &lt;code&gt;nothing&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="001b566bffd4b80501ba95ca798e628579b0ab7b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, the session reverts to using the global session expiry policy.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; されていない &lt;code&gt;None&lt;/code&gt; 、セッションがグローバルセッションの有効期限ポリシーを使用するようになります。</target>
        </trans-unit>
        <trans-unit id="5dedd9c095b41ac7753da699bb1e880646273b4a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;Totally LOVING this Album!&lt;/code&gt;, the output will be &lt;code&gt;totally loving this album!&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が &lt;code&gt;Totally LOVING this Album!&lt;/code&gt; 場合！、出力は &lt;code&gt;totally loving this album!&lt;/code&gt; でしょう！。</target>
        </trans-unit>
        <trans-unit id="61c4e59683ff8d7dd92dbe8e1b3b2066f63beab0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; or &lt;code&gt;&quot;abcd&quot;&lt;/code&gt;, the output will be &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;value&lt;/code&gt; である &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; 又は &lt;code&gt;&quot;abcd&quot;&lt;/code&gt; 、出力があろう &lt;code&gt;4&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53bca12a161e9dd5d7b927148faebf050de63371" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; or &lt;code&gt;&quot;abcd&quot;&lt;/code&gt;, the output will be &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;value&lt;/code&gt; である &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; 又は &lt;code&gt;&quot;abcd&quot;&lt;/code&gt; 、出力があろう &lt;code&gt;True&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d149d18212e0e86edab9f7f00ad13bcc30cd131c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt;, the output will be &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;value&lt;/code&gt; である &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; 、出力があろう &lt;code&gt;4&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="64fc5562b8f34bb2258acd150773d8d63506b010" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; object (e.g., the result of &lt;code&gt;datetime.datetime.now()&lt;/code&gt;), the output will be the string &lt;code&gt;'Wed 09 Jan 2008'&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;オブジェクト（の例えば、結果 &lt;code&gt;datetime.datetime.now()&lt;/code&gt; ）、出力は文字列になります &lt;code&gt;'Wed 09 Jan 2008'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0395d03d9197ccb31dfcace99ff8aeebe3ca82cf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is a &lt;code&gt;datetime&lt;/code&gt; or &lt;code&gt;timedelta&lt;/code&gt; object, the session will expire at that specific date/time. Note that &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;timedelta&lt;/code&gt; values are only serializable if you are using the &lt;a href=&quot;#django.contrib.sessions.serializers.PickleSerializer&quot;&gt;&lt;code&gt;PickleSerializer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; ある &lt;code&gt;datetime&lt;/code&gt; や &lt;code&gt;timedelta&lt;/code&gt; オブジェクト、セッションは、その特定の日付/時刻に期限切れになります。 &lt;code&gt;datetime&lt;/code&gt; と &lt;code&gt;timedelta&lt;/code&gt; の値は、&lt;a href=&quot;#django.contrib.sessions.serializers.PickleSerializer&quot;&gt; &lt;code&gt;PickleSerializer&lt;/code&gt; &lt;/a&gt;を使用している場合にのみシリアル化できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0b5d654bfc7f582442d4ec52b97710fc6f52860f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is an integer, the session will expire after that many seconds of inactivity. For example, calling &lt;code&gt;request.session.set_expiry(300)&lt;/code&gt; would make the session expire in 5 minutes.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; 整数で、セッションが非アクティブのその何秒後に期限切れになります。たとえば、 &lt;code&gt;request.session.set_expiry(300)&lt;/code&gt; を呼び出すと、セッションが5分で期限切れになります。</target>
        </trans-unit>
        <trans-unit id="e742281c4c6418f5b4ad30c98a1be96235d497aa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is equivalent to &lt;code&gt;datetime.datetime.now()&lt;/code&gt;, the output will be the string &lt;code&gt;&quot;01:23&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が &lt;code&gt;datetime.datetime.now()&lt;/code&gt; と等しい場合、出力は文字列 &lt;code&gt;&quot;01:23&quot;&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="fcb3b78b97e6fee24b4a40ac3d2e8f3ce6ba8572" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is the dictionary &lt;code&gt;{'hello': 'world'}&lt;/code&gt;, the output will be:</source>
          <target state="translated">場合 &lt;code&gt;value&lt;/code&gt; 辞書である &lt;code&gt;{'hello': 'world'}&lt;/code&gt; 、出力は次のようになります。</target>
        </trans-unit>
        <trans-unit id="11f959b07996e38ca116ea1d82c203bfc00d8e34" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is the list &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt;, the output could be &lt;code&gt;&quot;b&quot;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;value&lt;/code&gt; リストである &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; 、出力することができ &lt;code&gt;&quot;b&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c3473a8e4f8140a0e16b67b255243a22fb2f528" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is the list &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt;, the output will be the string &lt;code&gt;&quot;d&quot;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;value&lt;/code&gt; リストである &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; 、出力文字列になり &lt;code&gt;&quot;d&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8d8d8a7505600a0d6f9c35b9d459454fa1379e79" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is the list &lt;code&gt;['a', 'b', 'c']&lt;/code&gt;, the output will be &lt;code&gt;'a'&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;value&lt;/code&gt; リストである &lt;code&gt;['a', 'b', 'c']&lt;/code&gt; 、出力があろう &lt;code&gt;'a'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="29580353d7769d46a2677481abfdaba1144ef6ed" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is the list &lt;code&gt;['a', 'b', 'c']&lt;/code&gt;, the output will be the string &lt;code&gt;&quot;a // b // c&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;value&lt;/code&gt; リストである &lt;code&gt;['a', 'b', 'c']&lt;/code&gt; 、出力は文字列になります &lt;code&gt;&quot;a // b // c&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7fe07b5b9c67f950be5a22ac0321698d6f5f8d94" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is the string &lt;code&gt;&quot;Joel&quot;&lt;/code&gt;, the output would be the list &lt;code&gt;['J', 'o', 'e', 'l']&lt;/code&gt;. If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;123&lt;/code&gt;, the output will be the list &lt;code&gt;['1', '2', '3']&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;value&lt;/code&gt; 文字列である &lt;code&gt;&quot;Joel&quot;&lt;/code&gt; 、出力リストであろう &lt;code&gt;['J', 'o', 'e', 'l']&lt;/code&gt; 。場合 &lt;code&gt;value&lt;/code&gt; である &lt;code&gt;123&lt;/code&gt; 、出力リストであろう &lt;code&gt;['1', '2', '3']&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fdd0402e2118e34facbcfab001befd8ad7443b87" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が次の場合：</target>
        </trans-unit>
        <trans-unit id="d11b28c45cbb035e65f1544fc9f37f977239d634" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; isn&amp;rsquo;t provided or is empty, the above will display &amp;ldquo;&lt;code&gt;nothing&lt;/code&gt;&amp;rdquo;.</source>
          <target state="translated">場合 &lt;code&gt;value&lt;/code&gt; 提供されるか、または空ではないが、上記の「表示されません &lt;code&gt;nothing&lt;/code&gt; 」。</target>
        </trans-unit>
        <trans-unit id="817a7abcfb83a78664a778e654e31a8f9e0d2826" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;var&lt;/code&gt; is set to &lt;code&gt;'class1 onmouseover=javascript:func()'&lt;/code&gt;, this can result in unauthorized JavaScript execution, depending on how the browser renders imperfect HTML. (Quoting the attribute value would fix this case.)</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; が &lt;code&gt;'class1 onmouseover=javascript:func()'&lt;/code&gt; に設定されている場合、ブラウザが不完全なHTMLをレンダリングする方法によっては、JavaScriptが不正に実行される可能性があります。（属性値を引用すると、このケースが修正されます。）</target>
        </trans-unit>
        <trans-unit id="f933e059630c72c200d25c5fdd28a82f3d46a177" translate="yes" xml:space="preserve">
          <source>If Django created two independent test databases, this would break any tests that expected replication to occur. However, the &lt;code&gt;replica&lt;/code&gt; database has been configured as a test mirror (using the &lt;a href=&quot;../../ref/settings#std:setting-TEST_MIRROR&quot;&gt;&lt;code&gt;MIRROR&lt;/code&gt;&lt;/a&gt; test setting), indicating that under testing, &lt;code&gt;replica&lt;/code&gt; should be treated as a mirror of &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">Djangoが2つの独立したテストデータベースを作成した場合、これにより、レプリケーションの発生が予期されていたすべてのテストが中断されます。ただし、 &lt;code&gt;replica&lt;/code&gt; データベースは（&lt;a href=&quot;../../ref/settings#std:setting-TEST_MIRROR&quot;&gt; &lt;code&gt;MIRROR&lt;/code&gt; &lt;/a&gt;テスト設定を使用して）テストミラーとして構成されているため、テスト中は &lt;code&gt;replica&lt;/code&gt; を &lt;code&gt;default&lt;/code&gt; のミラーとして扱う必要があります。</target>
        </trans-unit>
        <trans-unit id="9036d692b9906336f90c7855a3028c2226003914" translate="yes" xml:space="preserve">
          <source>If Django is installed, you should see the version of your installation. If it isn&amp;rsquo;t, you&amp;rsquo;ll get an error telling &amp;ldquo;No module named django&amp;rdquo;.</source>
          <target state="translated">Djangoがインストールされている場合は、インストールのバージョンが表示されます。そうでない場合、「djangoという名前のモジュールはありません」というエラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="be236e6ac5bd748d1f22e3cf4100a89925204a13" translate="yes" xml:space="preserve">
          <source>If Django manages the database and you don&amp;rsquo;t have a strong reason to do otherwise, you should leave this option unset. It&amp;rsquo;s best to store datetimes in UTC because it avoids ambiguous or nonexistent datetimes during daylight saving time changes. Also, receiving datetimes in UTC keeps datetime arithmetic simple &amp;mdash; there&amp;rsquo;s no need for the &lt;code&gt;normalize()&lt;/code&gt; method provided by pytz.</source>
          <target state="translated">Djangoがデータベースを管理していて、それ以外の理由がない場合は、このオプションを未設定のままにしておく必要があります。夏時間の変更中にあいまいな、または存在しない日時を回避するため、UTCで日時を保存することをお勧めします。また、UTCで日時を受信すると、日時の計算が簡単になります。pytzが提供する &lt;code&gt;normalize()&lt;/code&gt; メソッドは必要ありません。</target>
        </trans-unit>
        <trans-unit id="eb49e9ea4d2a972ace1883451b923566c522dc81" translate="yes" xml:space="preserve">
          <source>If Django&amp;rsquo;s built-in validators are not sufficient, you can write your own password validators. Validators have a fairly small interface. They must implement two methods:</source>
          <target state="translated">Djangoの組み込みバリデーターでは不十分な場合は、独自のパスワードバリデーターを作成できます。バリデーターのインターフェースはかなり小さいです。2つのメソッドを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="5aaa5cbe96b1f59dab0cb77d8d9c394e298d33d7" translate="yes" xml:space="preserve">
          <source>If NumPy is available, the data is returned as NumPy array. For performance reasons, it is highly recommended to use NumPy.</source>
          <target state="translated">NumPyが利用可能な場合、データはNumPy配列として返されます。パフォーマンス上の理由から、NumPyを使用することを強く推奨します。</target>
        </trans-unit>
        <trans-unit id="4f35abfa4df178cd3d5446f3665622a0713685e7" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.queryset&quot;&gt;&lt;code&gt;queryset&lt;/code&gt;&lt;/a&gt; is given, the model for that queryset will be used.</source>
          <target state="translated">&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.queryset&quot;&gt; &lt;code&gt;queryset&lt;/code&gt; &lt;/a&gt;が指定されている場合、そのクエリセットのモデルが使用されます。</target>
        </trans-unit>
        <trans-unit id="5a0e09204d58d9f6314a4467ac19b26072f6cdbf" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; field has &lt;code&gt;null=True&lt;/code&gt; set (i.e., it allows &lt;code&gt;NULL&lt;/code&gt; values), you can assign &lt;code&gt;None&lt;/code&gt; to remove the relation. Example:</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;フィールドに &lt;code&gt;null=True&lt;/code&gt; が設定されている場合（つまり、 &lt;code&gt;NULL&lt;/code&gt; 値が許可されている場合）、 &lt;code&gt;None&lt;/code&gt; を割り当てて関係を削除できます。例：</target>
        </trans-unit>
        <trans-unit id="dd1b92eec1467f8420d4b8fea716bef4edcfbc98" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; defines &lt;a href=&quot;fields#django.forms.Field.initial&quot;&gt;&lt;code&gt;initial&lt;/code&gt;&lt;/a&gt;&lt;em&gt;and&lt;/em&gt; you include &lt;a href=&quot;#django.forms.Form.initial&quot;&gt;&lt;code&gt;initial&lt;/code&gt;&lt;/a&gt; when instantiating the &lt;code&gt;Form&lt;/code&gt;, then the latter &lt;code&gt;initial&lt;/code&gt; will have precedence. In this example, &lt;code&gt;initial&lt;/code&gt; is provided both at the field level and at the form instance level, and the latter gets precedence:</source>
          <target state="translated">場合は&lt;a href=&quot;fields#django.forms.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;定義されて&lt;a href=&quot;fields#django.forms.Field.initial&quot;&gt; &lt;code&gt;initial&lt;/code&gt; &lt;/a&gt;&lt;em&gt;と&lt;/em&gt;あなたには、&lt;a href=&quot;#django.forms.Form.initial&quot;&gt; &lt;code&gt;initial&lt;/code&gt; &lt;/a&gt;インスタンス化するとき &lt;code&gt;Form&lt;/code&gt; 、そして後者の &lt;code&gt;initial&lt;/code&gt; 優先されます。この例では、 &lt;code&gt;initial&lt;/code&gt; はフィールドレベルとフォームインスタンスレベルの両方で提供され、後者が優先されます。</target>
        </trans-unit>
        <trans-unit id="23297be1ec8de83f5e39f061355f1a7e31301819" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; object is used, it may be expressed in any units (the SQL generated will use units converted to those of the field); otherwise, numeric parameters are assumed to be in the units of the field.</source>
          <target state="translated">場合&lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt; &lt;code&gt;Distance&lt;/code&gt; &lt;/a&gt;オブジェクトが使用され、それは（生成されたSQLは、フィールドのものに変換単位を使用する）任意の単位で表すことができます。それ以外の場合、数値パラメーターはフィールドの単位であると想定されます。</target>
        </trans-unit>
        <trans-unit id="0953444ca96ddeaf1b7959fbef6cb9995213c823" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&quot;using&quot;&lt;/code&gt; key is present in &lt;code&gt;kwargs&lt;/code&gt; it is used as the database alias for which to check the number of queries:</source>
          <target state="translated">場合は &lt;code&gt;&quot;using&quot;&lt;/code&gt; キーがで存在している &lt;code&gt;kwargs&lt;/code&gt; からそれはクエリの数を確認するためのデータベース別名として使用されます。</target>
        </trans-unit>
        <trans-unit id="ec4e6b65d87815d29d8a2d46ec2b00f298d5d66e" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;Field&lt;/code&gt; has &lt;code&gt;required=False&lt;/code&gt; and you pass &lt;code&gt;clean()&lt;/code&gt; an empty value, then &lt;code&gt;clean()&lt;/code&gt; will return a &lt;em&gt;normalized&lt;/em&gt; empty value rather than raising &lt;code&gt;ValidationError&lt;/code&gt;. For &lt;code&gt;CharField&lt;/code&gt;, this will be an empty string. For other &lt;code&gt;Field&lt;/code&gt; classes, it might be &lt;code&gt;None&lt;/code&gt;. (This varies from field to field.)</source>
          <target state="translated">場合 &lt;code&gt;Field&lt;/code&gt; いる &lt;code&gt;required=False&lt;/code&gt; とあなたが合格 &lt;code&gt;clean()&lt;/code&gt; 空の値を、そして &lt;code&gt;clean()&lt;/code&gt; が返されます&lt;em&gt;正規化&lt;/em&gt;引き上げるのではなく、空の値を &lt;code&gt;ValidationError&lt;/code&gt; をします。 &lt;code&gt;CharField&lt;/code&gt; です、これは空の文字列になります。他の &lt;code&gt;Field&lt;/code&gt; クラスの場合、 &lt;code&gt;None&lt;/code&gt; になる場合があります。（これはフィールドごとに異なります。）</target>
        </trans-unit>
        <trans-unit id="d24b9c32e214ef3ab0246d149a23453ae0ffe403" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;Field&lt;/code&gt; has &lt;code&gt;required=False&lt;/code&gt; and you pass &lt;code&gt;clean()&lt;/code&gt; an empty value, then &lt;code&gt;clean()&lt;/code&gt; will return a &lt;em&gt;normalized&lt;/em&gt; empty value rather than raising &lt;code&gt;ValidationError&lt;/code&gt;. For &lt;code&gt;CharField&lt;/code&gt;, this will return &lt;a href=&quot;#django.forms.CharField.empty_value&quot;&gt;&lt;code&gt;empty_value&lt;/code&gt;&lt;/a&gt; which defaults to an empty string. For other &lt;code&gt;Field&lt;/code&gt; classes, it might be &lt;code&gt;None&lt;/code&gt;. (This varies from field to field.)</source>
          <target state="translated">場合 &lt;code&gt;Field&lt;/code&gt; いる &lt;code&gt;required=False&lt;/code&gt; とあなたが合格 &lt;code&gt;clean()&lt;/code&gt; 空の値を、そして &lt;code&gt;clean()&lt;/code&gt; が返されます&lt;em&gt;正規化&lt;/em&gt;引き上げるのではなく、空の値を &lt;code&gt;ValidationError&lt;/code&gt; をします。 &lt;code&gt;CharField&lt;/code&gt; です、これは戻ります&lt;a href=&quot;#django.forms.CharField.empty_value&quot;&gt; &lt;code&gt;empty_value&lt;/code&gt; &lt;/a&gt;空の文字列にそのデフォルト値を。他の &lt;code&gt;Field&lt;/code&gt; クラスの場合、 &lt;code&gt;None&lt;/code&gt; の場合があります。（これはフィールドごとに異なります。）</target>
        </trans-unit>
        <trans-unit id="a088e001be99ce0f05ecba2e8beb695059c4f795" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;SuspiciousOperation&lt;/code&gt; exception reaches the ASGI/WSGI handler level it is logged at the &lt;code&gt;Error&lt;/code&gt; level and results in a &lt;a href=&quot;request-response#django.http.HttpResponseBadRequest&quot;&gt;&lt;code&gt;HttpResponseBadRequest&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;../topics/logging&quot;&gt;logging documentation&lt;/a&gt; for more information.</source>
          <target state="translated">場合 &lt;code&gt;SuspiciousOperation&lt;/code&gt; の例外はASGI / WSGIハンドラのレベルに達することがで記録された &lt;code&gt;Error&lt;/code&gt; レベルとAで結果&lt;a href=&quot;request-response#django.http.HttpResponseBadRequest&quot;&gt; &lt;code&gt;HttpResponseBadRequest&lt;/code&gt; &lt;/a&gt;。詳細については、&lt;a href=&quot;../topics/logging&quot;&gt;ロギングのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="95ebbce5c79519d1d18da9be429b333faaaf5fc6" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;SuspiciousOperation&lt;/code&gt; exception reaches the WSGI handler level it is logged at the &lt;code&gt;Error&lt;/code&gt; level and results in a &lt;a href=&quot;request-response#django.http.HttpResponseBadRequest&quot;&gt;&lt;code&gt;HttpResponseBadRequest&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;../topics/logging&quot;&gt;logging documentation&lt;/a&gt; for more information.</source>
          <target state="translated">場合 &lt;code&gt;SuspiciousOperation&lt;/code&gt; の例外はWSGIハンドラのレベルに達することがで記録された &lt;code&gt;Error&lt;/code&gt; レベルとAで結果&lt;a href=&quot;request-response#django.http.HttpResponseBadRequest&quot;&gt; &lt;code&gt;HttpResponseBadRequest&lt;/code&gt; &lt;/a&gt;。詳細については、&lt;a href=&quot;../topics/logging&quot;&gt;ログのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f5bcb830a3b55a5db496eeac9f63848db38b4358" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;message&lt;/code&gt; contains headers at the start of the string, the headers will be printed as the first bit of the email message.</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; の文字列の先頭にヘッダーが含まれている場合、ヘッダーは電子メールメッセージの最初のビットとして印刷されます。</target>
        </trans-unit>
        <trans-unit id="786de74a26ea3015865d33eda29d9247850de3ff" translate="yes" xml:space="preserve">
          <source>If a URL path matches a regular expression in this list, the request will not be redirected to HTTPS. The &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; strips leading slashes from URL paths, so patterns shouldn&amp;rsquo;t include them, e.g. &lt;code&gt;SECURE_REDIRECT_EXEMPT = [r'^no-ssl/$', &amp;hellip;]&lt;/code&gt;. If &lt;a href=&quot;#std:setting-SECURE_SSL_REDIRECT&quot;&gt;&lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, this setting has no effect.</source>
          <target state="translated">URLパスがこのリストの正規表現に一致する場合、リクエストはHTTPSにリダイレクトされません。&lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; は、&lt;/a&gt;パターンはそれらを含めるべきではありませんので、例えば、URLパスから先頭のスラッシュを取り除き &lt;code&gt;SECURE_REDIRECT_EXEMPT = [r'^no-ssl/$', &amp;hellip;]&lt;/code&gt; 。&lt;a href=&quot;#std:setting-SECURE_SSL_REDIRECT&quot;&gt; &lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;False&lt;/code&gt; の場合、この設定は効果がありません。</target>
        </trans-unit>
        <trans-unit id="ba03fe98598ff554e940b398aa3215f04de4ffcf" translate="yes" xml:space="preserve">
          <source>If a backend raises a &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt; exception in &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt;&lt;code&gt;has_perm()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_module_perms&quot;&gt;&lt;code&gt;has_module_perms()&lt;/code&gt;&lt;/a&gt;, the authorization will immediately fail and Django won&amp;rsquo;t check the backends that follow.</source>
          <target state="translated">バックエンドが&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt; &lt;code&gt;has_perm()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_module_perms&quot;&gt; &lt;code&gt;has_module_perms()&lt;/code&gt; &lt;/a&gt;で&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; &lt;/a&gt;例外を発生させると、認証はすぐに失敗し、Djangoは後続のバックエンドをチェックしません。</target>
        </trans-unit>
        <trans-unit id="2fa2ce59c7328dc011fd86b6fee3bba58a56ca18" translate="yes" xml:space="preserve">
          <source>If a backend raises a &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt; exception, authentication will immediately fail. Django won&amp;rsquo;t check the backends that follow.</source>
          <target state="translated">バックエンドが&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; &lt;/a&gt;例外を発生させると、認証はすぐに失敗します。Djangoはその後のバックエンドをチェックしません。</target>
        </trans-unit>
        <trans-unit id="9d41c8331ab7adddfc4b833cf0b2041ce7dd29ef" translate="yes" xml:space="preserve">
          <source>If a base language is available but the sublanguage specified is not, Django uses the base language. For example, if a user specifies &lt;code&gt;de-at&lt;/code&gt; (Austrian German) but Django only has &lt;code&gt;de&lt;/code&gt; available, Django uses &lt;code&gt;de&lt;/code&gt;.</source>
          <target state="translated">ベース言語が利用可能で、指定されたサブ言語が利用できない場合、Djangoはベース言語を使用します。たとえば、ユーザーが &lt;code&gt;de-at&lt;/code&gt; （オーストリアドイツ語）を指定したが、Djangoは &lt;code&gt;de&lt;/code&gt; しか利用できない場合、Djangoは &lt;code&gt;de&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="376b43b9cb329d49e19ff49c7e26326c21be0070" translate="yes" xml:space="preserve">
          <source>If a browser connects initially via HTTP, which is the default for most browsers, it is possible for existing cookies to be leaked. For this reason, you should set your &lt;a href=&quot;../ref/settings#std:setting-SESSION_COOKIE_SECURE&quot;&gt;&lt;code&gt;SESSION_COOKIE_SECURE&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-CSRF_COOKIE_SECURE&quot;&gt;&lt;code&gt;CSRF_COOKIE_SECURE&lt;/code&gt;&lt;/a&gt; settings to &lt;code&gt;True&lt;/code&gt;. This instructs the browser to only send these cookies over HTTPS connections. Note that this will mean that sessions will not work over HTTP, and the CSRF protection will prevent any POST data being accepted over HTTP (which will be fine if you are redirecting all HTTP traffic to HTTPS).</source>
          <target state="translated">ブラウザが最初にほとんどのブラウザのデフォルトであるHTTP経由で接続する場合、既存のCookieが漏洩する可能性があります。このため、&lt;a href=&quot;../ref/settings#std:setting-SESSION_COOKIE_SECURE&quot;&gt; &lt;code&gt;SESSION_COOKIE_SECURE&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../ref/settings#std:setting-CSRF_COOKIE_SECURE&quot;&gt; &lt;code&gt;CSRF_COOKIE_SECURE&lt;/code&gt; &lt;/a&gt;設定を &lt;code&gt;True&lt;/code&gt; に設定する必要があります。これは、これらのCookieをHTTPS接続でのみ送信するようにブラウザに指示します。これは、セッションがHTTP経由で機能しないことを意味し、CSRF保護により、POSTデータがHTTP経由で受け入れられないことに注意してください（すべてのHTTPトラフィックをHTTPSにリダイレクトする場合は問題ありません）。</target>
        </trans-unit>
        <trans-unit id="c740b7603394883b2b965eca28364f7c9247ff89" translate="yes" xml:space="preserve">
          <source>If a callable is used for &lt;code&gt;limit_choices_to&lt;/code&gt;, it will be invoked every time a new form is instantiated. It may also be invoked when a model is validated, for example by management commands or the admin. The admin constructs querysets to validate its form inputs in various edge cases multiple times, so there is a possibility your callable may be invoked several times.</source>
          <target state="translated">callableが &lt;code&gt;limit_choices_to&lt;/code&gt; に使用されている場合、新しいフォームがインスタンス化されるたびに呼び出されます。また、管理コマンドや管理者などによってモデルが検証されたときにも呼び出されます。管理者は、さまざまなエッジケースでフォーム入力を検証するクエリセットを複数回構築するため、callableが複数回呼び出される可能性があります。</target>
        </trans-unit>
        <trans-unit id="ca3b6246fdb9dbc1b936cc3e8ac2b8da1438d4d3" translate="yes" xml:space="preserve">
          <source>If a custom subclass of &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; implements a &lt;code&gt;render&lt;/code&gt; method, Django will treat it as emulating a &lt;a href=&quot;template-response#django.template.response.SimpleTemplateResponse&quot;&gt;&lt;code&gt;SimpleTemplateResponse&lt;/code&gt;&lt;/a&gt;, and the &lt;code&gt;render&lt;/code&gt; method must itself return a valid response object.</source>
          <target state="translated">&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; の&lt;/a&gt;カスタムサブクラスが &lt;code&gt;render&lt;/code&gt; メソッドを実装する場合、Djangoはそれを&lt;a href=&quot;template-response#django.template.response.SimpleTemplateResponse&quot;&gt; &lt;code&gt;SimpleTemplateResponse&lt;/code&gt; &lt;/a&gt;をエミュレートするものとして扱い、 &lt;code&gt;render&lt;/code&gt; メソッド自体が有効な応答オブジェクトを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="e32b11f77650a5dfa1ba5024c565f112473c21f5" translate="yes" xml:space="preserve">
          <source>If a database operation is able to provide any additional information that might assist in selecting a database, it will be provided in the &lt;code&gt;hints&lt;/code&gt; dictionary. Details on valid hints are provided &lt;a href=&quot;#topics-db-multi-db-hints&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">データベース操作で、データベースの選択に役立つ可能性のある追加情報を提供できる場合は、 &lt;code&gt;hints&lt;/code&gt; ディクショナリで提供されます。有効なヒントの詳細を&lt;a href=&quot;#topics-db-multi-db-hints&quot;&gt;以下に示します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="57e35454b09ff691f569bed0b6a01f70be68bb53" translate="yes" xml:space="preserve">
          <source>If a different timezone like &lt;code&gt;Australia/Melbourne&lt;/code&gt; is active in Django, then the datetime is converted to the new timezone before the value is truncated. The timezone offset for Melbourne in the example date above is +10:00. The values returned when this timezone is active will be:</source>
          <target state="translated">&lt;code&gt;Australia/Melbourne&lt;/code&gt; ような別のタイムゾーンがDjangoでアクティブな場合、日付時刻は値が切り捨てられる前に新しいタイムゾーンに変換されます。上記の日付例におけるメルボルンのタイムゾーンオフセットは+10：00です。このタイムゾーンがアクティブなときに返される値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="40ead0c16c096714986873e5ca8d59648a2731a1" translate="yes" xml:space="preserve">
          <source>If a different timezone like &lt;code&gt;Australia/Melbourne&lt;/code&gt; is active in Django, then the datetime is converted to the timezone before the value is extracted. The timezone offset for Melbourne in the example date above is +10:00. The values returned when this timezone is active will be the same as above except for:</source>
          <target state="translated">&lt;code&gt;Australia/Melbourne&lt;/code&gt; ような別のタイムゾーンがDjangoでアクティブな場合、日付時刻は値が抽出される前にタイムゾーンに変換されます。上記の日付例におけるメルボルンのタイムゾーンオフセットは+10：00です。このタイムゾーンがアクティブなときに返される値は、以下を除いて上記と同じです。</target>
        </trans-unit>
        <trans-unit id="9dd612fed9477c0abbcabff974c2e3681b9057f6" translate="yes" xml:space="preserve">
          <source>If a field with the given name is not found a &lt;a href=&quot;../exceptions#django.core.exceptions.FieldDoesNotExist&quot;&gt;&lt;code&gt;FieldDoesNotExist&lt;/code&gt;&lt;/a&gt; exception will be raised.</source>
          <target state="translated">指定された名前のフィールドが見つからない場合、&lt;a href=&quot;../exceptions#django.core.exceptions.FieldDoesNotExist&quot;&gt; &lt;code&gt;FieldDoesNotExist&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="36f5c6d42b4b693d43fb0565ac08c49881a8cc16" translate="yes" xml:space="preserve">
          <source>If a file isn&amp;rsquo;t found in the &lt;code&gt;staticfiles.json&lt;/code&gt; manifest at runtime, a &lt;code&gt;ValueError&lt;/code&gt; is raised. This behavior can be disabled by subclassing &lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt; and setting the &lt;code&gt;manifest_strict&lt;/code&gt; attribute to &lt;code&gt;False&lt;/code&gt; &amp;ndash; nonexistent paths will remain unchanged.</source>
          <target state="translated">実行時に &lt;code&gt;staticfiles.json&lt;/code&gt; マニフェストにファイルが見つからない場合、 &lt;code&gt;ValueError&lt;/code&gt; が発生します。この動作は、 &lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt; をサブクラス &lt;code&gt;manifest_strict&lt;/code&gt; 、manifest_strict属性を &lt;code&gt;False&lt;/code&gt; に設定することで無効にできます。存在しないパスは変更されません。</target>
        </trans-unit>
        <trans-unit id="d64815254ec043cc9f487e75e480e0b7d7744f44" translate="yes" xml:space="preserve">
          <source>If a file with &lt;code&gt;name&lt;/code&gt; already exists, &lt;a href=&quot;../../howto/custom-file-storage#django.core.files.storage.get_alternative_name&quot;&gt;&lt;code&gt;get_alternative_name()&lt;/code&gt;&lt;/a&gt; is called to obtain an alternative name.</source>
          <target state="translated">&lt;a href=&quot;../../howto/custom-file-storage#django.core.files.storage.get_alternative_name&quot;&gt; &lt;code&gt;get_alternative_name()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;name&lt;/code&gt; ファイルがすでに存在する場合は、get_alternative_name（）を呼び出して代替名を取得します。</target>
        </trans-unit>
        <trans-unit id="4878c82df117e894b2c83734529f13460689ef4f" translate="yes" xml:space="preserve">
          <source>If a file with &lt;code&gt;name&lt;/code&gt; already exists, &lt;code&gt;get_alternative_name()&lt;/code&gt; is called to obtain an alternative name.</source>
          <target state="translated">&lt;code&gt;get_alternative_name()&lt;/code&gt; &lt;code&gt;name&lt;/code&gt; ファイルがすでに存在する場合は、get_alternative_name（）を呼び出して代替名を取得します。</target>
        </trans-unit>
        <trans-unit id="1db0a6d60d804a7f072aeecfe4f0e2fd449487ea" translate="yes" xml:space="preserve">
          <source>If a function (either a view or any regular callback) in your code uses local variables susceptible to contain sensitive information, you may prevent the values of those variables from being included in error reports using the &lt;code&gt;sensitive_variables&lt;/code&gt; decorator:</source>
          <target state="translated">コード内の関数（ビューまたは通常のコールバック）が機密情報を含む可能性のあるローカル変数を使用している場合、 &lt;code&gt;sensitive_variables&lt;/code&gt; デコレーターを使用して、これらの変数の値がエラーレポートに含まれないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="a908979b10b7cbe092ab501a90dbcc59af970e03" translate="yes" xml:space="preserve">
          <source>If a group of CSS files are appropriate for multiple output media types, the dictionary key can be a comma separated list of output media types. In the following example, TV&amp;rsquo;s and projectors will have the same media requirements:</source>
          <target state="translated">CSSファイルのグループが複数の出力メディアタイプに適している場合、ディクショナリキーは、出力メディアタイプのコンマ区切りのリストにすることができます。次の例では、テレビとプロジェクターのメディア要件は同じです。</target>
        </trans-unit>
        <trans-unit id="0969faa22edce6893747f90fdcf0cc7c56f629be" translate="yes" xml:space="preserve">
          <source>If a management command is called from code through &lt;a href=&quot;../ref/django-admin#django.core.management.call_command&quot;&gt;&lt;code&gt;call_command()&lt;/code&gt;&lt;/a&gt;, it&amp;rsquo;s up to you to catch the exception when needed.</source>
          <target state="translated">管理コマンドが&lt;a href=&quot;../ref/django-admin#django.core.management.call_command&quot;&gt; &lt;code&gt;call_command()&lt;/code&gt; &lt;/a&gt;を介してコードから呼び出された場合、必要なときに例外をキャッチするのはあなた次第です。</target>
        </trans-unit>
        <trans-unit id="b69c1f15f7880ce6a608e37a3d0c0885c68c3db2" translate="yes" xml:space="preserve">
          <source>If a model has a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, instances of that model will have access to the related (foreign) object via an attribute of the model.</source>
          <target state="translated">モデルに&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;がある場合、そのモデルのインスタンスは、モデルの属性を介して関連（外部）オブジェクトにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="eb15c806fa95b1c1cac44107cdbd6729a430458b" translate="yes" xml:space="preserve">
          <source>If a model has a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, instances of the foreign-key model will have access to a &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; that returns all instances of the first model. By default, this &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; is named &lt;code&gt;FOO_set&lt;/code&gt;, where &lt;code&gt;FOO&lt;/code&gt; is the source model name, lowercased. This &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;QuerySets&lt;/code&gt;, which can be filtered and manipulated as described in the &amp;ldquo;Retrieving objects&amp;rdquo; section above.</source>
          <target state="translated">モデルに&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;がある場合、外部キーモデルのインスタンスは、最初のモデルのすべてのインスタンスを返す&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; に&lt;/a&gt;アクセスできます。デフォルトでは、この&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;名前は &lt;code&gt;FOO_set&lt;/code&gt; です &lt;code&gt;FOO&lt;/code&gt; はソースモデル名を小文字にしたものです。この&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;QuerySets&lt;/code&gt; 返します。これは、上記の「オブジェクトの取得」セクションで説明されているように、フィルタリングおよび操作できます。</target>
        </trans-unit>
        <trans-unit id="60ba79a890d9e5b777dce6459bc7d4e3596736cc" translate="yes" xml:space="preserve">
          <source>If a model has an &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; &amp;mdash; an auto-incrementing primary key &amp;mdash; then that auto-incremented value will be calculated and saved as an attribute on your object the first time you call &lt;code&gt;save()&lt;/code&gt;:</source>
          <target state="translated">モデルに&lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt;（自動インクリメントの主キー）がある場合、その自動インクリメントされた値が計算され、最初に &lt;code&gt;save()&lt;/code&gt; を呼び出したときにオブジェクトの属性として保存されます。</target>
        </trans-unit>
        <trans-unit id="8867ea227fede80f2b653fda4e88d79e719938b1" translate="yes" xml:space="preserve">
          <source>If a model has an &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; but you want to define a new object&amp;rsquo;s ID explicitly when saving, define it explicitly before saving, rather than relying on the auto-assignment of the ID:</source>
          <target state="translated">モデルに&lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt;があるが、保存時に新しいオブジェクトのIDを明示的に定義する場合は、IDの自動割り当てに依存するのではなく、保存する前に明示的に定義します。</target>
        </trans-unit>
        <trans-unit id="836ea517ddae0d98a98be3d92fb098c1716467c1" translate="yes" xml:space="preserve">
          <source>If a model is defined outside of an application in &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, it must declare which app it belongs to:</source>
          <target state="translated">アプリケーションの外部で&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;でモデルが定義されている場合は、それが属するアプリを宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="b1b1b8a914c46d91f06259e7e2f6393532703abd" translate="yes" xml:space="preserve">
          <source>If a model with &lt;code&gt;managed=False&lt;/code&gt; contains a &lt;a href=&quot;fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; that points to another unmanaged model, then the intermediate table for the many-to-many join will also not be created. However, the intermediary table between one managed and one unmanaged model &lt;em&gt;will&lt;/em&gt; be created.</source>
          <target state="translated">モデルの場合は &lt;code&gt;managed=False&lt;/code&gt; 含まれている&lt;a href=&quot;fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;別の管理対象外のモデルへのポイントは、その後、多対多の参加のための中間テーブルも作成されないこと。しかし、管理1つずつ管理されていないモデルとの間の仲介の表は、&lt;em&gt;されます&lt;/em&gt;作成すること。</target>
        </trans-unit>
        <trans-unit id="412ddfb7b344d2bfd06795c612194f73c03d1d0a" translate="yes" xml:space="preserve">
          <source>If a model&amp;rsquo;s primary key isn&amp;rsquo;t called &lt;code&gt;id&lt;/code&gt;, no problem. Comparisons will always use the primary key, whatever it&amp;rsquo;s called. For example, if a model&amp;rsquo;s primary key field is called &lt;code&gt;name&lt;/code&gt;, these two statements are equivalent:</source>
          <target state="translated">モデルの主キーが &lt;code&gt;id&lt;/code&gt; と呼ばれていなくても問題ありません。比較は、それが何であれ、常に主キーを使用します。たとえば、モデルの主キーフィールドが &lt;code&gt;name&lt;/code&gt; と呼ばれる場合、次の2つのステートメントは同等です。</target>
        </trans-unit>
        <trans-unit id="fa59d497e1dda34138c57d1907906c6ac5378b51" translate="yes" xml:space="preserve">
          <source>If a movie&amp;rsquo;s &amp;ldquo;peers&amp;rdquo; are described as movies released by the same studio in the same genre in the same year, this &lt;code&gt;RowRange&lt;/code&gt; example annotates each movie with the average rating of a movie&amp;rsquo;s two prior and two following peers:</source>
          <target state="translated">映画の「ピア」が同じ年に同じジャンルの同じスタジオでリリースされた映画である場合、この &lt;code&gt;RowRange&lt;/code&gt; の例では、各映画に、映画の2つ前と2つ後の映画の平均評価を注釈します。</target>
        </trans-unit>
        <trans-unit id="02dc34c15c815e6e708c5523691c3b4a85610564" translate="yes" xml:space="preserve">
          <source>If a persistent cache value is found, that value is returned. For raster formats using Persistent Auxiliary Metadata (PAM) services, the statistics might be cached in an auxiliary file. In some cases this metadata might be out of sync with the pixel values or cause values from a previous call to be returned which don&amp;rsquo;t reflect the value of the &lt;code&gt;approximate&lt;/code&gt; argument. In such cases, use the &lt;code&gt;refresh&lt;/code&gt; argument to get updated values and store them in the cache.</source>
          <target state="translated">永続的なキャッシュ値が見つかると、その値が返されます。Persistent Auxiliary Metadata（PAM）サービスを使用するラスター形式の場合、統計は補助ファイルにキャッシュされる場合があります。場合によっては、このメタデータがピクセル値と同期していないか、 &lt;code&gt;approximate&lt;/code&gt; 引数の値を反映していない前の呼び出しからの値が返される可能性があります。そのような場合、 &lt;code&gt;refresh&lt;/code&gt; 引数を使用して更新された値を取得し、それらをキャッシュに保存します。</target>
        </trans-unit>
        <trans-unit id="8e2f7c830b30646acb1129766828116985345dda" translate="yes" xml:space="preserve">
          <source>If a query doesn&amp;rsquo;t have an ordering specified, results are returned from the database in an unspecified order. A particular ordering is guaranteed only when ordering by a set of fields that uniquely identify each object in the results. For example, if a &lt;code&gt;name&lt;/code&gt; field isn&amp;rsquo;t unique, ordering by it won&amp;rsquo;t guarantee objects with the same name always appear in the same order.</source>
          <target state="translated">クエリに順序が指定されていない場合、結果は不特定の順序でデータベースから返されます。特定の順序付けが保証されるのは、結果の各オブジェクトを一意に識別する一連のフィールドで順序付けした場合のみです。たとえば、 &lt;code&gt;name&lt;/code&gt; フィールドが一意でない場合、それによる順序付けでは、同じ名前のオブジェクトが常に同じ順序で表示されるとは限りません。</target>
        </trans-unit>
        <trans-unit id="276f40ee2ff4debb8de8e2a78fbc889d76bec708" translate="yes" xml:space="preserve">
          <source>If a response varies depending on the content of the &lt;code&gt;Accept&lt;/code&gt; header and you are using some form of caching like Django&amp;rsquo;s &lt;a href=&quot;middleware#module-django.middleware.cache&quot;&gt;&lt;code&gt;cache middleware&lt;/code&gt;&lt;/a&gt;, you should decorate the view with &lt;a href=&quot;../topics/http/decorators#django.views.decorators.vary.vary_on_headers&quot;&gt;&lt;code&gt;vary_on_headers('Accept')&lt;/code&gt;&lt;/a&gt; so that the responses are properly cached.</source>
          <target state="translated">&lt;code&gt;Accept&lt;/code&gt; ヘッダーのコンテンツによって応答が異なり、Djangoの&lt;a href=&quot;middleware#module-django.middleware.cache&quot;&gt; &lt;code&gt;cache middleware&lt;/code&gt; &lt;/a&gt;などの何らかの形式のキャッシュを使用している場合は、応答が適切にキャッシュされるように、ビューを&lt;a href=&quot;../topics/http/decorators#django.views.decorators.vary.vary_on_headers&quot;&gt; &lt;code&gt;vary_on_headers('Accept')&lt;/code&gt; で&lt;/a&gt;装飾する必要があります。</target>
        </trans-unit>
        <trans-unit id="419fbfe6388d6c8dcc573315271dbda24cc24890" translate="yes" xml:space="preserve">
          <source>If a response varies on whether or not it&amp;rsquo;s requested via AJAX and you are using some form of caching like Django&amp;rsquo;s &lt;a href=&quot;middleware#module-django.middleware.cache&quot;&gt;&lt;code&gt;cache middleware&lt;/code&gt;&lt;/a&gt;, you should decorate the view with &lt;a href=&quot;../topics/http/decorators#django.views.decorators.vary.vary_on_headers&quot;&gt;&lt;code&gt;vary_on_headers('X-Requested-With')&lt;/code&gt;&lt;/a&gt; so that the responses are properly cached.</source>
          <target state="translated">AJAX経由でリクエストされたかどうかによって応答が異なり、Djangoの&lt;a href=&quot;middleware#module-django.middleware.cache&quot;&gt; &lt;code&gt;cache middleware&lt;/code&gt; &lt;/a&gt;などの何らかの形式のキャッシングを使用している場合は、ビューを&lt;a href=&quot;../topics/http/decorators#django.views.decorators.vary.vary_on_headers&quot;&gt; &lt;code&gt;vary_on_headers('X-Requested-With')&lt;/code&gt; で&lt;/a&gt;装飾して、応答が適切にキャッシュされるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="7f467ff0e02bba6e43affce86c588503c3a97097" translate="yes" xml:space="preserve">
          <source>If a string (e.g. &lt;code&gt;secure.example.com&lt;/code&gt;), all SSL redirects will be directed to this host rather than the originally-requested host (e.g. &lt;code&gt;www.example.com&lt;/code&gt;). If &lt;a href=&quot;#std:setting-SECURE_SSL_REDIRECT&quot;&gt;&lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, this setting has no effect.</source>
          <target state="translated">文字列（例： &lt;code&gt;secure.example.com&lt;/code&gt; ）の場合、すべてのSSLリダイレクトは、最初に要求されたホスト（例： &lt;code&gt;www.example.com&lt;/code&gt; ）ではなく、このホストに送信されます。&lt;a href=&quot;#std:setting-SECURE_SSL_REDIRECT&quot;&gt; &lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;False&lt;/code&gt; の場合、この設定は効果がありません。</target>
        </trans-unit>
        <trans-unit id="819af35e8e5b0b423576e67f3d4a85e07e4a5780" translate="yes" xml:space="preserve">
          <source>If a variable is false or empty, use given default. Otherwise, use the value of the variable. For example:</source>
          <target state="translated">変数が false または空の場合は、与えられたデフォルト値を使用します。それ以外の場合は、その変数の値を使用します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="65519194e6da2e5393e5193ef34a21784e4c9145" translate="yes" xml:space="preserve">
          <source>If a variable resolves to a callable, the template system will call it with no arguments and use its result instead of the callable.</source>
          <target state="translated">変数がcallableに解決された場合、テンプレートシステムは引数なしでそれを呼び出し、その結果をcallableの代わりに使用します。</target>
        </trans-unit>
        <trans-unit id="116d86f8db0d1afc35e7e30a7f2315cb0ba50f4a" translate="yes" xml:space="preserve">
          <source>If a view is using this mixin, all requests by non-authenticated users will be redirected to the login page or shown an HTTP 403 Forbidden error, depending on the &lt;a href=&quot;#django.contrib.auth.mixins.AccessMixin.raise_exception&quot;&gt;&lt;code&gt;raise_exception&lt;/code&gt;&lt;/a&gt; parameter.</source>
          <target state="translated">ビューがこのミックスインを使用している場合、非認証ユーザーによるすべてのリクエストは、&lt;a href=&quot;#django.contrib.auth.mixins.AccessMixin.raise_exception&quot;&gt; &lt;code&gt;raise_exception&lt;/code&gt; &lt;/a&gt;パラメーターに応じて、ログインページにリダイレクトされるか、HTTP 403 Forbiddenエラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="2472a23c9704c8c58addf4a481db8096770e5e94" translate="yes" xml:space="preserve">
          <source>If a view sets its own cache expiry time (i.e. it has a &lt;code&gt;max-age&lt;/code&gt; section in its &lt;code&gt;Cache-Control&lt;/code&gt; header) then the page will be cached until the expiry time, rather than &lt;a href=&quot;../ref/settings#std:setting-CACHE_MIDDLEWARE_SECONDS&quot;&gt;&lt;code&gt;CACHE_MIDDLEWARE_SECONDS&lt;/code&gt;&lt;/a&gt;. Using the decorators in &lt;code&gt;django.views.decorators.cache&lt;/code&gt; you can easily set a view&amp;rsquo;s expiry time (using the &lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt;&lt;code&gt;cache_control()&lt;/code&gt;&lt;/a&gt; decorator) or disable caching for a view (using the &lt;a href=&quot;http/decorators#django.views.decorators.cache.never_cache&quot;&gt;&lt;code&gt;never_cache()&lt;/code&gt;&lt;/a&gt; decorator). See the &lt;a href=&quot;#controlling-cache-using-other-headers&quot;&gt;using other headers&lt;/a&gt; section for more on these decorators.</source>
          <target state="translated">ビューが独自のキャッシュの有効期限を設定している場合（つまり、 &lt;code&gt;Cache-Control&lt;/code&gt; ヘッダーに &lt;code&gt;max-age&lt;/code&gt; セクションがある場合）、ページは&lt;a href=&quot;../ref/settings#std:setting-CACHE_MIDDLEWARE_SECONDS&quot;&gt; &lt;code&gt;CACHE_MIDDLEWARE_SECONDS&lt;/code&gt; &lt;/a&gt;ではなく、有効期限までキャッシュされます。 &lt;code&gt;django.views.decorators.cache&lt;/code&gt; のデコレーターを使用すると、ビューの有効期限を簡単に設定し&lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt; &lt;code&gt;cache_control()&lt;/code&gt; &lt;/a&gt;デコレーターを使用）、ビューのキャッシュを無効にしたり（&lt;a href=&quot;http/decorators#django.views.decorators.cache.never_cache&quot;&gt; &lt;code&gt;never_cache()&lt;/code&gt; &lt;/a&gt;デコレーターを使用）できます。これらのデコレーターについて詳しくは&lt;a href=&quot;#controlling-cache-using-other-headers&quot;&gt;、他のヘッダー&lt;/a&gt;の使用セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="bd0e4e15cb1a129fa5304adb9ab881ae3476ced9" translate="yes" xml:space="preserve">
          <source>If additional escaping is not desired, you will need to use &lt;a href=&quot;../ref/utils#django.utils.safestring.mark_safe&quot;&gt;&lt;code&gt;mark_safe()&lt;/code&gt;&lt;/a&gt; if you are absolutely sure that your code does not contain XSS vulnerabilities. For building small HTML snippets, use of &lt;a href=&quot;../ref/utils#django.utils.html.format_html&quot;&gt;&lt;code&gt;format_html()&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;mark_safe()&lt;/code&gt; is strongly recommended.</source>
          <target state="translated">追加のエスケープが不要な場合、コードにXSSの脆弱性が含まれていないことが確実である場合は、&lt;a href=&quot;../ref/utils#django.utils.safestring.mark_safe&quot;&gt; &lt;code&gt;mark_safe()&lt;/code&gt; &lt;/a&gt;を使用する必要があります。小さなHTMLスニペットを構築するには、&lt;a href=&quot;../ref/utils#django.utils.html.format_html&quot;&gt; &lt;code&gt;format_html()&lt;/code&gt; &lt;/a&gt;代わりに &lt;code&gt;mark_safe()&lt;/code&gt; 使用することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="d018009d896660351337e8c7652155ea49ee64a9" translate="yes" xml:space="preserve">
          <source>If all items in a sitemap have a &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.lastmod&quot;&gt;&lt;code&gt;lastmod&lt;/code&gt;&lt;/a&gt;, the sitemap generated by &lt;a href=&quot;#django.contrib.sitemaps.views.sitemap&quot;&gt;&lt;code&gt;views.sitemap()&lt;/code&gt;&lt;/a&gt; will have a &lt;code&gt;Last-Modified&lt;/code&gt; header equal to the latest &lt;code&gt;lastmod&lt;/code&gt;. You can activate the &lt;a href=&quot;../middleware#django.middleware.http.ConditionalGetMiddleware&quot;&gt;&lt;code&gt;ConditionalGetMiddleware&lt;/code&gt;&lt;/a&gt; to make Django respond appropriately to requests with an &lt;code&gt;If-Modified-Since&lt;/code&gt; header which will prevent sending the sitemap if it hasn&amp;rsquo;t changed.</source>
          <target state="translated">サイトマップ内のすべての項目がありましたら&lt;a href=&quot;#django.contrib.sitemaps.Sitemap.lastmod&quot;&gt; &lt;code&gt;lastmod&lt;/code&gt; &lt;/a&gt;、によって生成されたサイトマップ&lt;a href=&quot;#django.contrib.sitemaps.views.sitemap&quot;&gt; &lt;code&gt;views.sitemap()&lt;/code&gt; が&lt;/a&gt;あります &lt;code&gt;Last-Modified&lt;/code&gt; ヘッダが最新に等しい &lt;code&gt;lastmod&lt;/code&gt; 。&lt;a href=&quot;../middleware#django.middleware.http.ConditionalGetMiddleware&quot;&gt; &lt;code&gt;ConditionalGetMiddleware&lt;/code&gt; &lt;/a&gt;をアクティブにして、Djangoが &lt;code&gt;If-Modified-Since&lt;/code&gt; ヘッダーを持つリクエストに適切に応答するようにすることができます。これにより、サイトマップが変更されていない場合は送信されなくなります。</target>
        </trans-unit>
        <trans-unit id="4efc199d481916c1801fd9d031e671d91e418ff5" translate="yes" xml:space="preserve">
          <source>If all of the tests passed, then you&amp;rsquo;ll want to make sure that you added the new test shown above to the appropriate folder and file name.</source>
          <target state="translated">すべてのテストに合格した場合は、上記の新しいテストを適切なフォルダーとファイル名に追加したことを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="af2d81f3186a97fe69044083ccf1ae5c5bacc347" translate="yes" xml:space="preserve">
          <source>If all you want is to run Django with your native language all you need to do is set &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt;&lt;code&gt;LANGUAGE_CODE&lt;/code&gt;&lt;/a&gt; and make sure the corresponding &lt;a href=&quot;index#term-message-file&quot;&gt;message files&lt;/a&gt; and their compiled versions (&lt;code&gt;.mo&lt;/code&gt;) exist.</source>
          <target state="translated">Djangoを母国語で実行したい場合は、&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt; &lt;code&gt;LANGUAGE_CODE&lt;/code&gt; &lt;/a&gt;を設定し、対応する&lt;a href=&quot;index#term-message-file&quot;&gt;メッセージファイル&lt;/a&gt;とそのコンパイル済みバージョン（ &lt;code&gt;.mo&lt;/code&gt; ）が存在することを確認するだけです。</target>
        </trans-unit>
        <trans-unit id="5d55df844cd1e592f6c1063624dbce8afbbd7354" translate="yes" xml:space="preserve">
          <source>If an error happens during template parsing or rendering, Django can display the line the error happened on. For example:</source>
          <target state="translated">テンプレートの解析やレンダリング中にエラーが発生した場合、Django はエラーが発生した行を表示することができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="004a42cd451fd1f1d6e009a950c33e7582c724d1" translate="yes" xml:space="preserve">
          <source>If an optional field doesn&amp;rsquo;t appear in the form&amp;rsquo;s data, the resulting model instance uses the model field &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;, if there is one, for that field. This behavior doesn&amp;rsquo;t apply to fields that use &lt;a href=&quot;../../ref/forms/widgets#django.forms.CheckboxInput&quot;&gt;&lt;code&gt;CheckboxInput&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/forms/widgets#django.forms.CheckboxSelectMultiple&quot;&gt;&lt;code&gt;CheckboxSelectMultiple&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../../ref/forms/widgets#django.forms.SelectMultiple&quot;&gt;&lt;code&gt;SelectMultiple&lt;/code&gt;&lt;/a&gt; (or any custom widget whose &lt;a href=&quot;../../ref/forms/widgets#django.forms.Widget.value_omitted_from_data&quot;&gt;&lt;code&gt;value_omitted_from_data()&lt;/code&gt;&lt;/a&gt; method always returns &lt;code&gt;False&lt;/code&gt;) since an unchecked checkbox and unselected &lt;code&gt;&amp;lt;select multiple&amp;gt;&lt;/code&gt; don&amp;rsquo;t appear in the data of an HTML form submission. Use a custom form field or widget if you&amp;rsquo;re designing an API and want the default fallback behavior for a field that uses one of these widgets.</source>
          <target state="translated">オプションのフィールドがフォームのデータに表示されない場合、結果のモデルインスタンスは、そのフィールドに対してモデルフィールド&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;がある場合はそれを使用します。&lt;a href=&quot;../../ref/forms/widgets#django.forms.CheckboxInput&quot;&gt; &lt;code&gt;CheckboxInput&lt;/code&gt; &lt;/a&gt;されていないチェックボックスと選択されていない &lt;code&gt;&amp;lt;select multiple&amp;gt;&lt;/code&gt; はHTMLのデータに表示されないため、この動作は、CheckboxInput、&lt;a href=&quot;../../ref/forms/widgets#django.forms.CheckboxSelectMultiple&quot;&gt; &lt;code&gt;CheckboxSelectMultiple&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../../ref/forms/widgets#django.forms.SelectMultiple&quot;&gt; &lt;code&gt;SelectMultiple&lt;/code&gt; &lt;/a&gt;（または&lt;a href=&quot;../../ref/forms/widgets#django.forms.Widget.value_omitted_from_data&quot;&gt; &lt;code&gt;value_omitted_from_data()&lt;/code&gt; &lt;/a&gt;メソッドが常に &lt;code&gt;False&lt;/code&gt; を返すカスタムウィジェット）を使用するフィールドには適用されません。フォーム送信。 APIを設計していて、これらのウィジェットのいずれかを使用するフィールドのデフォルトのフォールバック動作が必要な場合は、カスタムフォームフィールドまたはウィジェットを使用します。</target>
        </trans-unit>
        <trans-unit id="9cb04eee8e4707359752c37d935aef72b38a85f2" translate="yes" xml:space="preserve">
          <source>If any keyword arguments are provided, they will be passed to the constructor of the response class.</source>
          <target state="translated">キーワード引数が指定された場合は、それがレスポンスクラスのコンストラクタに渡されます。</target>
        </trans-unit>
        <trans-unit id="3ca0ba8a01e4bba76fac0f283df438a0e32e99ce" translate="yes" xml:space="preserve">
          <source>If any of those are not true, you should keep this setting set to &lt;code&gt;None&lt;/code&gt; and find another way of determining HTTPS, perhaps via custom middleware.</source>
          <target state="translated">それらのいずれかが当てはまらない場合は、この設定を[ &lt;code&gt;None&lt;/code&gt; 設定したままにし、おそらくカスタムミドルウェアを介してHTTPSを決定する別の方法を見つける必要があります。</target>
        </trans-unit>
        <trans-unit id="b7d9b6ada1db10c808758db904b1e245c1501d93" translate="yes" xml:space="preserve">
          <source>If any of your Django views send email using &lt;a href=&quot;../email&quot;&gt;Django&amp;rsquo;s email functionality&lt;/a&gt;, you probably don&amp;rsquo;t want to send email each time you run a test using that view. For this reason, Django&amp;rsquo;s test runner automatically redirects all Django-sent email to a dummy outbox. This lets you test every aspect of sending email &amp;ndash; from the number of messages sent to the contents of each message &amp;ndash; without actually sending the messages.</source>
          <target state="translated">Djangoビューのいずれかが&lt;a href=&quot;../email&quot;&gt;Djangoの電子メール機能&lt;/a&gt;を使用して電子メールを送信する場合、そのビューを使用してテストを実行するたびに電子メールを送信することは望ましくないでしょう。このため、Djangoのテストランナーは、Djangoから送信されたすべてのメールをダミーの送信トレイに自動的にリダイレクトします。これにより、実際にメッセージを送信せずに、送信されたメッセージの数から各メッセージのコンテンツまで、電子メール送信のあらゆる側面をテストできます。</target>
        </trans-unit>
        <trans-unit id="f7cd992185606a1b60bac1b5887d3305c1d38a0f" translate="yes" xml:space="preserve">
          <source>If any part of the variable is callable, the template system will try calling it. Example:</source>
          <target state="translated">変数のいずれかの部分が呼び出し可能な場合、テンプレートシステムはそれを呼び出してみます。例を示します。</target>
        </trans-unit>
        <trans-unit id="98c3f82d22ad3b1b1d268b1281f2a82a22a7f832" translate="yes" xml:space="preserve">
          <source>If autoclobber is &lt;code&gt;True&lt;/code&gt;, the database will be destroyed without consulting the user.</source>
          <target state="translated">autoclobberが &lt;code&gt;True&lt;/code&gt; の場合、データベースはユーザーに問い合わせることなく破棄されます。</target>
        </trans-unit>
        <trans-unit id="5b22c30791d93745f5516c055e57528793230347" translate="yes" xml:space="preserve">
          <source>If called via &lt;code&gt;GET&lt;/code&gt;, it displays a login form that POSTs to the same URL. More on this in a bit.</source>
          <target state="translated">&lt;code&gt;GET&lt;/code&gt; を介して呼び出されると、同じURLにPOSTするログインフォームが表示されます。これについては少し詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="46678a34b8334aafed964864dd1e40fe87ccd539" translate="yes" xml:space="preserve">
          <source>If called via &lt;code&gt;POST&lt;/code&gt; with user submitted credentials, it tries to log the user in. If login is successful, the view redirects to the URL specified in &lt;code&gt;next&lt;/code&gt;. If &lt;code&gt;next&lt;/code&gt; isn&amp;rsquo;t provided, it redirects to &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_REDIRECT_URL&quot;&gt;&lt;code&gt;settings.LOGIN_REDIRECT_URL&lt;/code&gt;&lt;/a&gt; (which defaults to &lt;code&gt;/accounts/profile/&lt;/code&gt;). If login isn&amp;rsquo;t successful, it redisplays the login form.</source>
          <target state="translated">ユーザーが送信した資格情報を使用して &lt;code&gt;POST&lt;/code&gt; 経由で呼び出された場合、ユーザーのログインを試みます。ログインが成功すると、ビューは &lt;code&gt;next&lt;/code&gt; で指定されたURLにリダイレクトされます。 &lt;code&gt;next&lt;/code&gt; が指定されていない場合は、&lt;a href=&quot;../../ref/settings#std:setting-LOGIN_REDIRECT_URL&quot;&gt; &lt;code&gt;settings.LOGIN_REDIRECT_URL&lt;/code&gt; &lt;/a&gt;（デフォルトは &lt;code&gt;/accounts/profile/&lt;/code&gt; ）にリダイレクトされます。ログインに失敗すると、ログインフォームが再表示されます。</target>
        </trans-unit>
        <trans-unit id="750d2305bb14a5c3b5333c9c7a05dbb98c87224d" translate="yes" xml:space="preserve">
          <source>If configured, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; sets the &lt;a href=&quot;middleware#referrer-policy&quot;&gt;Referrer Policy&lt;/a&gt; header on all responses that do not already have it to the value provided.</source>
          <target state="translated">構成されている場合、&lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; &lt;/a&gt;は、まだ提供されていない値を持つすべての応答に&lt;a href=&quot;middleware#referrer-policy&quot;&gt;リファラーポリシー&lt;/a&gt;ヘッダーを設定します。</target>
        </trans-unit>
        <trans-unit id="3b24098ce265e59d2d9391447879b5bbc4795b4b" translate="yes" xml:space="preserve">
          <source>If desired, you may specify the numeric values for the constants directly according to the values in the above &lt;a href=&quot;contrib/messages#message-level-constants&quot;&gt;constants table&lt;/a&gt;.</source>
          <target state="translated">必要に応じて、上記の&lt;a href=&quot;contrib/messages#message-level-constants&quot;&gt;定数表の&lt;/a&gt;値に従って、定数の数値を直接指定できます。</target>
        </trans-unit>
        <trans-unit id="60f37a761df5744dd22f17c7944ea423a1fae999" translate="yes" xml:space="preserve">
          <source>If either geometry is empty, returns &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">どちらかのジオメトリが空の場合、 &lt;code&gt;False&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2dc033f0f3207c5001559cb4fc79bafb686f8940" translate="yes" xml:space="preserve">
          <source>If either of these are used, the order the fields appear in the form will be the order the fields are defined in the model, with &lt;code&gt;ManyToManyField&lt;/code&gt; instances appearing last.</source>
          <target state="translated">これらのいずれかが使用される場合、フィールドがフォームに表示される順序は、フィールドがモデルで定義された順序となり、 &lt;code&gt;ManyToManyField&lt;/code&gt; インスタンスが最後に表示されます。</target>
        </trans-unit>
        <trans-unit id="89dd600a41a8a4a339d00aba9150edcc8a920468" translate="yes" xml:space="preserve">
          <source>If for any reason you want to force a database query, you can tell Django to clear the cache using &lt;code&gt;Site.objects.clear_cache()&lt;/code&gt;:</source>
          <target state="translated">何らかの理由でデータベースクエリを強制したい場合は、Djangoに &lt;code&gt;Site.objects.clear_cache()&lt;/code&gt; を使用してキャッシュをクリアするように指示できます。</target>
        </trans-unit>
        <trans-unit id="881be6681a0240125f9df0391268603aa0a52905" translate="yes" xml:space="preserve">
          <source>If for some reason you don&amp;rsquo;t want to use client-side escaping, you can also set &lt;code&gt;escape_html=True&lt;/code&gt; and error messages will be escaped so you can use them directly in HTML.</source>
          <target state="translated">何らかの理由でクライアント側のエスケープを使用したくない場合は、 &lt;code&gt;escape_html=True&lt;/code&gt; を設定することもできます。エラーメッセージはエスケープされ、HTMLで直接使用できます。</target>
        </trans-unit>
        <trans-unit id="7d58ec0c689655b5bf0b89270f0419bdf232624f" translate="yes" xml:space="preserve">
          <source>If given one or more variables, check whether any variable has changed. For example, the following shows the date every time it changes, while showing the hour if either the hour or the date has changed:</source>
          <target state="translated">1つ以上の変数が与えられた場合、いずれかの変数が変更されたかどうかをチェックします。例えば、以下の例では、日付が変わるたびに日付を表示し、時間または日付が変わった場合は時間を表示します。</target>
        </trans-unit>
        <trans-unit id="a75480c4dd65b1596a43ef88e502e15a63301456" translate="yes" xml:space="preserve">
          <source>If in doubt, inspect the SQL query!</source>
          <target state="translated">疑問がある場合は、SQLクエリを検査してください。</target>
        </trans-unit>
        <trans-unit id="95d8c3ff1cc126a9b4a3bff2c74afae11dd80cd5" translate="yes" xml:space="preserve">
          <source>If in doubt, it&amp;rsquo;s often better to back off and base your work on &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt;, perhaps with &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt;&lt;code&gt;MultipleObjectMixin&lt;/code&gt;&lt;/a&gt;. Although you will probably end up writing more code, it is more likely to be clearly understandable to someone else coming to it later, and with fewer interactions to worry about you will save yourself some thinking. (Of course, you can always dip into Django&amp;rsquo;s implementation of the generic class-based views for inspiration on how to tackle problems.)</source>
          <target state="translated">よく&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt;ない場合は、おそらくSingleObjectMixinと&lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt; &lt;code&gt;MultipleObjectMixin&lt;/code&gt; &lt;/a&gt;を使用して、作業を取り消し、&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt;に基づいた方が良いでしょう。あなたはおそらくより多くのコードを書くことになるでしょうが、それは後で他の人に来て誰かに明確に理解される可能性が高くなり、あなたのことを心配するための相互作用が少ないので、あなた自身の考えを救います。（もちろん、Djangoの一般的なクラスベースのビューの実装にいつでも浸ることができ、問題への取り組み方のヒントになります。）</target>
        </trans-unit>
        <trans-unit id="b5a0af3361c3b012a91fa944affd5c900cdcd944" translate="yes" xml:space="preserve">
          <source>If in doubt, it&amp;rsquo;s often better to back off and base your work on &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt;, perhaps with &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt;&lt;code&gt;MultipleObjectMixin&lt;/code&gt;&lt;/a&gt;. Although you will probably end up writing more code, it is more likely to be clearly understandable to someone else coming to it later, and with fewer interactions to worry about you will save yourself some thinking. (Of course, you can always dip into Django&amp;rsquo;s implementation of the generic class-based views for inspiration on how to tackle problems.)</source>
          <target state="translated">疑わしい場合は、おそらく&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt; &lt;code&gt;MultipleObjectMixin&lt;/code&gt; &lt;/a&gt;を使用して、作業を取り消して&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt;に基づいて行う方がよい場合がよくあります。おそらくより多くのコードを書くことになりますが、後で他の誰かがコードに来ることを明確に理解できる可能性が高く、心配するインタラクションが少なくなると、思考を節約できます。 （もちろん、問題に取り組む方法についてのインスピレーションを得るために、Djangoの汎用クラスベースビューの実装にいつでも浸ることができます。）</target>
        </trans-unit>
        <trans-unit id="e0befa3f1898d2d464922616bfef2029b094f045" translate="yes" xml:space="preserve">
          <source>If in doubt, leave it to its default of &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">疑わしい場合は、デフォルトの &lt;code&gt;True&lt;/code&gt; のままにしてください。</target>
        </trans-unit>
        <trans-unit id="ff31f3d5d18a022f12eef24cbd3a8fdb28ad8cd1" translate="yes" xml:space="preserve">
          <source>If installed successfully, the PostgreSQL server will run in the background each time the system as started as a Windows service. A PostgreSQL 12 start menu group will created and contains shortcuts for the Application Stack Builder (ASB) as well as the &amp;lsquo;SQL Shell&amp;rsquo;, which will launch a &lt;code&gt;psql&lt;/code&gt; command window.</source>
          <target state="translated">正常にインストールされると、システムがWindowsサービスとして開始されるたびに、PostgreSQLサーバーがバックグラウンドで実行されます。PostgreSQL 12のスタートメニューグループが作成され、Application Stack Builder（ASB）のショートカットと、 &lt;code&gt;psql&lt;/code&gt; コマンドウィンドウを起動する「SQLシェル」が含まれます。</target>
        </trans-unit>
        <trans-unit id="ee64183f66a72c6ae780b05e928a3e9c5cf48b84" translate="yes" xml:space="preserve">
          <source>If installed successfully, the PostgreSQL server will run in the background each time the system as started as a Windows service. A PostgreSQL 9.x start menu group will created and contains shortcuts for the ASB as well as the &amp;lsquo;SQL Shell&amp;rsquo;, which will launch a &lt;code&gt;psql&lt;/code&gt; command window.</source>
          <target state="translated">インストールに成功すると、PostgreSQLサーバーは、システムがWindowsサービスとして起動するたびにバックグラウンドで実行されます。PostgreSQL 9.xスタートメニューグループが作成され、ASBのショートカットと、 &lt;code&gt;psql&lt;/code&gt; コマンドウィンドウを起動する「SQLシェル」が含まれます。</target>
        </trans-unit>
        <trans-unit id="9982be845bcf21d3518f4d7ad7b68561577502c0" translate="yes" xml:space="preserve">
          <source>If instead you&amp;rsquo;re getting a &lt;code&gt;NameError&lt;/code&gt; here, you may have missed a step in &lt;a href=&quot;tutorial02#tutorial02-import-timezone&quot;&gt;Part 2&lt;/a&gt; where we added imports of &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;timezone&lt;/code&gt; to &lt;code&gt;polls/models.py&lt;/code&gt;. Copy the imports from that section, and try running your tests again.</source>
          <target state="translated">代わりにここで &lt;code&gt;NameError&lt;/code&gt; が発生する場合は、&lt;a href=&quot;tutorial02#tutorial02-import-timezone&quot;&gt;パート2の&lt;/a&gt;手順で、 &lt;code&gt;datetime&lt;/code&gt; と &lt;code&gt;timezone&lt;/code&gt; インポートを &lt;code&gt;polls/models.py&lt;/code&gt; に追加していない可能性があります。そのセクションからインポートをコピーして、もう一度テストを実行してみてください。</target>
        </trans-unit>
        <trans-unit id="b0529f7dc039ac957b0f3d20411828b42bb5e1fe" translate="yes" xml:space="preserve">
          <source>If irregular shapes are required, then the underlying field should be made nullable and the values padded with &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">不規則な形状が必要な場合は、基になるフィールドをnull可能にし、値に &lt;code&gt;None&lt;/code&gt; を埋め込む必要があります。</target>
        </trans-unit>
        <trans-unit id="9c00a72ebe457e881bb58234002ab6b32b6b66b1" translate="yes" xml:space="preserve">
          <source>If it doesn&amp;rsquo;t find a match, the request continues to be processed as usual.</source>
          <target state="translated">一致が見つからない場合、リクエストは引き続き通常どおり処理されます。</target>
        </trans-unit>
        <trans-unit id="e0e735de01fd61ae5f7f9a6e0d1a273b2c4436c9" translate="yes" xml:space="preserve">
          <source>If it finds a match, and &lt;code&gt;new_path&lt;/code&gt; is empty, it sends a 410 (&amp;ldquo;Gone&amp;rdquo;) HTTP header and empty (content-less) response.</source>
          <target state="translated">一致が見つかり、 &lt;code&gt;new_path&lt;/code&gt; が空の場合、410（「Gone」）HTTPヘッダーと空（コンテンツなし）応答を送信します。</target>
        </trans-unit>
        <trans-unit id="73c4530195aba3cc21c592ffcd6b9c8e4ef6a369" translate="yes" xml:space="preserve">
          <source>If it finds a match, and &lt;code&gt;new_path&lt;/code&gt; is not empty, it redirects to &lt;code&gt;new_path&lt;/code&gt; using a 301 (&amp;ldquo;Moved Permanently&amp;rdquo;) redirect. You can subclass &lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware&quot;&gt;&lt;code&gt;RedirectFallbackMiddleware&lt;/code&gt;&lt;/a&gt; and set &lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware.response_redirect_class&quot;&gt;&lt;code&gt;response_redirect_class&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../request-response#django.http.HttpResponseRedirect&quot;&gt;&lt;code&gt;django.http.HttpResponseRedirect&lt;/code&gt;&lt;/a&gt; to use a &lt;code&gt;302 Moved Temporarily&lt;/code&gt; redirect instead.</source>
          <target state="translated">一致が見つかり、 &lt;code&gt;new_path&lt;/code&gt; が空でない場合は、301（「永久に移動」）リダイレクトを使用して &lt;code&gt;new_path&lt;/code&gt; にリダイレクトします。&lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware&quot;&gt; &lt;code&gt;RedirectFallbackMiddleware&lt;/code&gt; &lt;/a&gt;をサブクラス化し、&lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware.response_redirect_class&quot;&gt; &lt;code&gt;response_redirect_class&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;../request-response#django.http.HttpResponseRedirect&quot;&gt; &lt;code&gt;django.http.HttpResponseRedirect&lt;/code&gt; &lt;/a&gt;に設定して、代わりに &lt;code&gt;302 Moved Temporarily&lt;/code&gt; リダイレクトを使用できます。</target>
        </trans-unit>
        <trans-unit id="5b218da7489aa0db49911f5e0a7d7d9f83acf412" translate="yes" xml:space="preserve">
          <source>If it finds a match, it follows this algorithm:</source>
          <target state="translated">一致するものが見つかった場合、このアルゴリズムに従います。</target>
        </trans-unit>
        <trans-unit id="f8555e4e9f54c1af70c38896405428aee1b63eb8" translate="yes" xml:space="preserve">
          <source>If it is set to &lt;code&gt;False&lt;/code&gt;, the test tablespaces won&amp;rsquo;t be automatically created at the beginning of the tests or dropped at the end.</source>
          <target state="translated">&lt;code&gt;False&lt;/code&gt; に設定されている場合、テストのテーブルスペースは、テストの最初に自動的に作成されることも、最後に削除されることもありません。</target>
        </trans-unit>
        <trans-unit id="9ff28be548c2e6e62ad9addaad106ce48d9e3524" translate="yes" xml:space="preserve">
          <source>If it is set to &lt;code&gt;False&lt;/code&gt;, the test user won&amp;rsquo;t be automatically created at the beginning of the tests and dropped at the end.</source>
          <target state="translated">&lt;code&gt;False&lt;/code&gt; に設定されている場合、テストユーザーはテストの最初に自動的に作成されず、最後に削除されません。</target>
        </trans-unit>
        <trans-unit id="086e529324c77f10019deb2293586e1f5eb037d3" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s &lt;strong&gt;bound&lt;/strong&gt; to a set of data, it&amp;rsquo;s capable of validating that data and rendering the form as HTML with the data displayed in the HTML.</source>
          <target state="translated">それがいた場合は&lt;strong&gt;バインドされ&lt;/strong&gt;たデータのセットに、そのデータを検証し、データをHTMLで表示してHTMLとしてフォームをレンダリングすることができるのです。</target>
        </trans-unit>
        <trans-unit id="762f1bc2f06cdbc47d6d0f309454113e33598057" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s &lt;strong&gt;unbound&lt;/strong&gt;, it cannot do validation (because there&amp;rsquo;s no data to validate!), but it can still render the blank form as HTML.</source>
          <target state="translated">&lt;strong&gt;unboundの&lt;/strong&gt;場合、検証することはできません（検証するデータがないためです）が、空白のフォームをHTMLとしてレンダリングできます。</target>
        </trans-unit>
        <trans-unit id="7234acef7c65e2c9323271fc3c9d4ad9eb4b1e7c" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s a method, it should return the absolute path for a given object as returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">メソッドの場合は、&lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; から&lt;/a&gt;返された特定のオブジェクトの絶対パスを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="143031e8953811a9c3a88c79798b24e0a425cc95" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s a method, it should take one argument &amp;ndash; an object as returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt; &amp;ndash; and return that object&amp;rsquo;s change frequency as a string.</source>
          <target state="translated">メソッドの場合は、1つの引数&lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt;によって返されるオブジェクト）を受け取り、そのオブジェクトの変更頻度を文字列として返す必要があります。</target>
        </trans-unit>
        <trans-unit id="7bff00a78b519ed7c413fef5001b2e654dfd2b69" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s a method, it should take one argument &amp;ndash; an object as returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt; &amp;ndash; and return that object&amp;rsquo;s last-modified date/time as a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">それがメソッドの場合、1つの引数&lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt;によって返されるオブジェクト）を取り、そのオブジェクトの最終変更日時を&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;として返す必要があります。</target>
        </trans-unit>
        <trans-unit id="32fb347ef452af06b7d9684d9471b5bc24024f2b" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s a method, it should take one argument &amp;ndash; an object as returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt; &amp;ndash; and return that object&amp;rsquo;s priority as either a string or float.</source>
          <target state="translated">メソッドの場合は、1つの引数&lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt;によって返されるオブジェクト）を受け取り、そのオブジェクトの優先順位を文字列または浮動小数点のいずれかとして返します。</target>
        </trans-unit>
        <trans-unit id="15ba45a5043f7358b844c8ea9113c7ba3ec3b8db" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s an application configuration class, Django imports the root package of the application, defined by its &lt;a href=&quot;#django.apps.AppConfig.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; attribute. If it&amp;rsquo;s a Python package, Django creates a default application configuration.</source>
          <target state="translated">アプリケーション構成クラスの場合、Djangoは、その&lt;a href=&quot;#django.apps.AppConfig.name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;属性で定義されたアプリケーションのルートパッケージをインポートします。Pythonパッケージの場合、Djangoはデフォルトのアプリケーション構成を作成します。</target>
        </trans-unit>
        <trans-unit id="739a813bcb6932652d7c4c0f099220e51e22f92e" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s an attribute, its value should be a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; representing the last-modified date/time for &lt;em&gt;every&lt;/em&gt; object returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">属性の場合、その値は&lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt;によって返される&lt;em&gt;すべての&lt;/em&gt;オブジェクトの最終変更&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;表す日時でなければなりません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="15ad29af32202e8f80e7637ce9fea9eb2c04bb2b" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s an attribute, its value should be a string representing an absolute path to use for &lt;em&gt;every&lt;/em&gt; object returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">属性の場合、その値は&lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt;によって返される&lt;em&gt;すべての&lt;/em&gt;オブジェクトに使用する絶対パスを表す文字列である必要があります。</target>
        </trans-unit>
        <trans-unit id="1ddf41b0a9d07a449a358d682fe7947578779914" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s an attribute, its value should be a string representing the change frequency of &lt;em&gt;every&lt;/em&gt; object returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">属性の場合、その値は&lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt;によって返される&lt;em&gt;すべての&lt;/em&gt;オブジェクトの変更頻度を表す文字列である必要があります。</target>
        </trans-unit>
        <trans-unit id="7ee4f35fc601d54876905bd051b2469f621200e6" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s an attribute, its value should be either a string or float representing the priority of &lt;em&gt;every&lt;/em&gt; object returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">属性の場合、その値は、&lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt;によって返される&lt;em&gt;すべての&lt;/em&gt;オブジェクトの優先順位を表す文字列または浮動小数点のいずれかである必要があります。</target>
        </trans-unit>
        <trans-unit id="45346a65597fa89f0720e560f69fecf7ee17793a" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s defined, it&amp;rsquo;s the dotted path to the &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; subclass for that application.</source>
          <target state="translated">定義されている場合は、そのアプリケーションの&lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt;サブクラスへのドットパスです。</target>
        </trans-unit>
        <trans-unit id="586dfd2621f54a7ad40e50477dfcdfaa75815200" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s your first time doing an upgrade, it is useful to read the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/release-process/&quot;&gt;guide on the different release processes&lt;/a&gt;.</source>
          <target state="translated">初めてアップグレードする場合は&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/release-process/&quot;&gt;、さまざまなリリースプロセスに関するガイド&lt;/a&gt;を読むと便利です。</target>
        </trans-unit>
        <trans-unit id="e13b8f81222ab1aac3ae1278eea9ad8e5f0607b1" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s your first time doing an upgrade, it is useful to read the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/release-process/&quot;&gt;guide on the different release processes&lt;/a&gt;.</source>
          <target state="translated">アップグレードを初めて行う場合は&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/release-process/&quot;&gt;、さまざまなリリースプロセスに関するガイド&lt;/a&gt;を読むと便利です。</target>
        </trans-unit>
        <trans-unit id="48ee40c99146090e779f852245b5afb888e00a5e" translate="yes" xml:space="preserve">
          <source>If loading a template fails, the following two exceptions, defined in &lt;code&gt;django.template&lt;/code&gt;, may be raised:</source>
          <target state="translated">テンプレートの読み込みに失敗した場合、 &lt;code&gt;django.template&lt;/code&gt; で定義されている次の2つの例外が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d4d46c7886d2254cf93d3e3fcccd7a0f4bcf2dcc" translate="yes" xml:space="preserve">
          <source>If localized URLs get reversed in templates they always use the current language. To link to a URL in another language use the &lt;a href=&quot;#std:templatetag-language&quot;&gt;&lt;code&gt;language&lt;/code&gt;&lt;/a&gt; template tag. It enables the given language in the enclosed template section:</source>
          <target state="translated">テンプレートでローカライズされたURLが逆転した場合、常に現在の言語が使用されます。別の言語のURLにリンクするには、&lt;a href=&quot;#std:templatetag-language&quot;&gt; &lt;code&gt;language&lt;/code&gt; &lt;/a&gt;テンプレートタグを使用します。囲まれたテンプレートセクションで特定の言語を有効にします。</target>
        </trans-unit>
        <trans-unit id="5b07bb0f1712469af9863f3a275491ca48434fc9" translate="yes" xml:space="preserve">
          <source>If many fields need to be duplicated in the unmanaged model, it may be best to create an abstract model with the shared fields and then have the unmanaged and managed models inherit from the abstract model.</source>
          <target state="translated">非管理モデルで多くのフィールドを複製する必要がある場合は、共有フィールドを持つ抽象モデルを作成し、非管理モデルと管理モデルに抽象モデルを継承させるのがベストかもしれません。</target>
        </trans-unit>
        <trans-unit id="5117892f8f0300c66daa9628a86ea40e1e0c377f" translate="yes" xml:space="preserve">
          <source>If multiple Django sites are run in a single mod_wsgi process, all of them will use the settings of whichever one happens to run first. This can be solved by changing:</source>
          <target state="translated">複数の Django サイトが一つの mod_wsgi プロセスで実行されている場合、すべての Django サイトが最初に実行された方の設定を使用します。これは</target>
        </trans-unit>
        <trans-unit id="fea1c8c9bb79ccbb6aa26063b6ab36dc99df0518" translate="yes" xml:space="preserve">
          <source>If multiple objects are found, &lt;code&gt;get_or_create()&lt;/code&gt; raises &lt;a href=&quot;../exceptions#django.core.exceptions.MultipleObjectsReturned&quot;&gt;&lt;code&gt;MultipleObjectsReturned&lt;/code&gt;&lt;/a&gt;. If an object is &lt;em&gt;not&lt;/em&gt; found, &lt;code&gt;get_or_create()&lt;/code&gt; will instantiate and save a new object, returning a tuple of the new object and &lt;code&gt;True&lt;/code&gt;. The new object will be created roughly according to this algorithm:</source>
          <target state="translated">複数のオブジェクトが見つかった場合、 &lt;code&gt;get_or_create()&lt;/code&gt; は&lt;a href=&quot;../exceptions#django.core.exceptions.MultipleObjectsReturned&quot;&gt; &lt;code&gt;MultipleObjectsReturned&lt;/code&gt; を発生させ&lt;/a&gt;ます。オブジェクトが見つから&lt;em&gt;ない&lt;/em&gt;場合、 &lt;code&gt;get_or_create()&lt;/code&gt; は新しいオブジェクトをインスタンス化して保存し、新しいオブジェクトと &lt;code&gt;True&lt;/code&gt; のタプルを返します。新しいオブジェクトは、おおよそこのアルゴリズムに従って作成されます。</target>
        </trans-unit>
        <trans-unit id="1e71877ad6a5d25c689b1f2de0070e7265bd4937" translate="yes" xml:space="preserve">
          <source>If necessary, set &lt;a href=&quot;../ref/settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt;&lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt;&lt;/a&gt;, ensuring that you have understood the warnings there thoroughly. Failure to do this can result in CSRF vulnerabilities, and failure to do it correctly can also be dangerous!</source>
          <target state="translated">必要に応じて&lt;a href=&quot;../ref/settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt; &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; を&lt;/a&gt;設定し、警告を完全に理解したことを確認してください。これを実行しないと、CSRFの脆弱性が発生する可能性があり、正しく実行できない場合も危険です。</target>
        </trans-unit>
        <trans-unit id="03ba143e9f631d05f6ba22f0590ce7f747ce8328" translate="yes" xml:space="preserve">
          <source>If neither &lt;code&gt;fields&lt;/code&gt; nor &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt;&lt;code&gt;fieldsets&lt;/code&gt;&lt;/a&gt; options are present, Django will default to displaying each field that isn&amp;rsquo;t an &lt;code&gt;AutoField&lt;/code&gt; and has &lt;code&gt;editable=True&lt;/code&gt;, in a single fieldset, in the same order as the fields are defined in the model.</source>
          <target state="translated">&lt;code&gt;fields&lt;/code&gt; もフィールド&lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt; &lt;code&gt;fieldsets&lt;/code&gt; &lt;/a&gt;オプションも存在しない場合、Djangoはデフォルトで、 &lt;code&gt;AutoField&lt;/code&gt; フィールドではなく、単一のフィールドセットに &lt;code&gt;editable=True&lt;/code&gt; を持つ各フィールドを、モデルで定義されているフィールドと同じ順序で表示します。</target>
        </trans-unit>
        <trans-unit id="d162507e2b28cb230355fa270db138b42135ea87" translate="yes" xml:space="preserve">
          <source>If neither &lt;code&gt;fieldsets&lt;/code&gt; nor &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt;&lt;code&gt;fields&lt;/code&gt;&lt;/a&gt; options are present, Django will default to displaying each field that isn&amp;rsquo;t an &lt;code&gt;AutoField&lt;/code&gt; and has &lt;code&gt;editable=True&lt;/code&gt;, in a single fieldset, in the same order as the fields are defined in the model.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt; &lt;code&gt;fields&lt;/code&gt; &lt;/a&gt; &lt;code&gt;fieldsets&lt;/code&gt; もフィールドオプションも存在しない場合、Djangoはデフォルトで、 &lt;code&gt;AutoField&lt;/code&gt; フィールドではなく、単一のフィールドセットに &lt;code&gt;editable=True&lt;/code&gt; を持つ各フィールドを、モデルで定義されているフィールドと同じ順序で表示します。</target>
        </trans-unit>
        <trans-unit id="e9c8ddd198190a9c557ddc6bb9c2aea2a2e1d698" translate="yes" xml:space="preserve">
          <source>If neither of these conditions is met, Django will raise &lt;a href=&quot;exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらの条件のどちらも満たされない場合、Djangoは&lt;a href=&quot;exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;ImproperlyConfigured&lt;/code&gt; を発生させ&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="22236fab6abdd3c57ac49f8258f85828d58d41a1" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;format&lt;/code&gt; argument is provided, the default format is the first format found in &lt;a href=&quot;../settings#std:setting-DATETIME_INPUT_FORMATS&quot;&gt;&lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; and respects &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;Format localization&lt;/a&gt;.</source>
          <target state="translated">いいえの場合 &lt;code&gt;format&lt;/code&gt; 引数が指定されていない、デフォルトの形式はで最初に見つかった形式です&lt;a href=&quot;../settings#std:setting-DATETIME_INPUT_FORMATS&quot;&gt; &lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt; &lt;/a&gt;と点&lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;フォーマットのローカライズは&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="69f074f3a84e1657dd8a12d9aa961a2df4985580" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;format&lt;/code&gt; argument is provided, the default format is the first format found in &lt;a href=&quot;../settings#std:setting-DATE_INPUT_FORMATS&quot;&gt;&lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; and respects &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;Format localization&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 引数が指定されていない場合、デフォルトのフォーマットは&lt;a href=&quot;../settings#std:setting-DATE_INPUT_FORMATS&quot;&gt; &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; で&lt;/a&gt;最初に見つかったフォーマットであり、&lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;フォーマットのローカライズ&lt;/a&gt;を尊重します。</target>
        </trans-unit>
        <trans-unit id="651012be4ff2b148ba9354acdae062b14fd3c0d9" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;format&lt;/code&gt; argument is provided, the default format is the first format found in &lt;a href=&quot;../settings#std:setting-TIME_INPUT_FORMATS&quot;&gt;&lt;code&gt;TIME_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; and respects &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;Format localization&lt;/a&gt;.</source>
          <target state="translated">いいえの場合 &lt;code&gt;format&lt;/code&gt; 引数が指定されていない、デフォルトの形式はで最初に見つかった形式です&lt;a href=&quot;../settings#std:setting-TIME_INPUT_FORMATS&quot;&gt; &lt;code&gt;TIME_INPUT_FORMATS&lt;/code&gt; &lt;/a&gt;と点&lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;フォーマットのローカライズ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="880370f7f114c5c060d3bd42e86cd83d71f53766" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;input_date_formats&lt;/code&gt; argument is provided, the default input formats for &lt;a href=&quot;#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; are used.</source>
          <target state="translated">&lt;code&gt;input_date_formats&lt;/code&gt; 引数が指定されていない場合、&lt;a href=&quot;#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; の&lt;/a&gt;デフォルトの入力形式が使用されます。</target>
        </trans-unit>
        <trans-unit id="5e0a4ac71f22fa55f33f4c53815cc761110373fd" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;input_formats&lt;/code&gt; argument is provided, the default input formats are taken from &lt;a href=&quot;../settings#std:setting-DATETIME_INPUT_FORMATS&quot;&gt;&lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../settings#std:setting-DATE_INPUT_FORMATS&quot;&gt;&lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, or from the active locale format &lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt; and &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; keys if localization is enabled. See also &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;format localization&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;input_formats&lt;/code&gt; 引数が指定されていない場合、デフォルトの入力形式は、&lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;False&lt;/code&gt; の場合は&lt;a href=&quot;../settings#std:setting-DATETIME_INPUT_FORMATS&quot;&gt; &lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../settings#std:setting-DATE_INPUT_FORMATS&quot;&gt; &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; &lt;/a&gt;から、ローカリゼーションが有効な場合はアクティブなロケール形式の &lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt; および &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; キーから取得されます。&lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;フォーマットのローカリゼーション&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="53192b0b6262194bcbc96fe1b2f7da606c0cca2b" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;input_formats&lt;/code&gt; argument is provided, the default input formats are taken from &lt;a href=&quot;../settings#std:setting-DATETIME_INPUT_FORMATS&quot;&gt;&lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, or from the active locale format &lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt; key if localization is enabled. See also &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;format localization&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;input_formats&lt;/code&gt; 引数が指定されていない場合、デフォルトの入力形式は、&lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;False&lt;/code&gt; の場合は&lt;a href=&quot;../settings#std:setting-DATETIME_INPUT_FORMATS&quot;&gt; &lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt; &lt;/a&gt;から、ローカリゼーションが有効な場合はアクティブなロケール形式の &lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt; キーから取得されます。&lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;format localization&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="e218ec7444929cf5f907333d683042a1a250dec0" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;input_formats&lt;/code&gt; argument is provided, the default input formats are taken from &lt;a href=&quot;../settings#std:setting-DATE_INPUT_FORMATS&quot;&gt;&lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, or from the active locale format &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; key if localization is enabled. See also &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;format localization&lt;/a&gt;.</source>
          <target state="translated">いいえの場合 &lt;code&gt;input_formats&lt;/code&gt; の引数が指定されていない、デフォルトの入力フォーマットはから取られ&lt;a href=&quot;../settings#std:setting-DATE_INPUT_FORMATS&quot;&gt; &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; &lt;/a&gt;場合&lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; が&lt;/a&gt;ある &lt;code&gt;False&lt;/code&gt; 、またはアクティブなロケールのフォーマットから &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; のキーローカリゼーションが有効になっている場合。&lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;format localization&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="00ca1bfa89502aeb4be2cb7334f19db2fd371a1f" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;input_formats&lt;/code&gt; argument is provided, the default input formats are taken from &lt;a href=&quot;../settings#std:setting-TIME_INPUT_FORMATS&quot;&gt;&lt;code&gt;TIME_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, or from the active locale format &lt;code&gt;TIME_INPUT_FORMATS&lt;/code&gt; key if localization is enabled. See also &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;format localization&lt;/a&gt;.</source>
          <target state="translated">いいえの場合 &lt;code&gt;input_formats&lt;/code&gt; の引数が指定されていない、デフォルトの入力フォーマットはから取られ&lt;a href=&quot;../settings#std:setting-TIME_INPUT_FORMATS&quot;&gt; &lt;code&gt;TIME_INPUT_FORMATS&lt;/code&gt; &lt;/a&gt;場合&lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; が&lt;/a&gt;ある &lt;code&gt;False&lt;/code&gt; 、またはアクティブなロケール形式から &lt;code&gt;TIME_INPUT_FORMATS&lt;/code&gt; ローカリゼーションが有効になっている場合は、キーを。&lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;format localization&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="deb75c2ac702a4b0a40f6bcf697ba548571a7947" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;input_time_formats&lt;/code&gt; argument is provided, the default input formats for &lt;a href=&quot;#django.forms.TimeField&quot;&gt;&lt;code&gt;TimeField&lt;/code&gt;&lt;/a&gt; are used.</source>
          <target state="translated">&lt;code&gt;input_time_formats&lt;/code&gt; 引数が指定されていない場合、&lt;a href=&quot;#django.forms.TimeField&quot;&gt; &lt;code&gt;TimeField&lt;/code&gt; の&lt;/a&gt;デフォルトの入力形式が使用されます。</target>
        </trans-unit>
        <trans-unit id="e2eabcd7b412af2312e2abb94cd9bbfac179ea3d" translate="yes" xml:space="preserve">
          <source>If no URL pattern matches, or if an exception is raised during any point in this process, Django invokes an appropriate error-handling view. See &lt;a href=&quot;#error-handling&quot;&gt;Error handling&lt;/a&gt; below.</source>
          <target state="translated">一致するURLパターンがない場合、またはこのプロセスのいずれかの時点で例外が発生した場合、Djangoは適切なエラー処理ビューを呼び出します。以下の&lt;a href=&quot;#error-handling&quot;&gt;エラー処理を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b48d608444a7be435d54c631af2c36c0e71eb05b" translate="yes" xml:space="preserve">
          <source>If no application name is provided, all installed applications will be dumped.</source>
          <target state="translated">アプリケーション名が指定されていない場合は、インストールされているすべてのアプリケーションがダンプされます。</target>
        </trans-unit>
        <trans-unit id="3be3b978e15bd33854b5175c0738a463b9bbdadd" translate="yes" xml:space="preserve">
          <source>If no exception occurred, then &lt;code&gt;exc_info&lt;/code&gt; will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">例外が発生しなかった場合、 &lt;code&gt;exc_info&lt;/code&gt; は &lt;code&gt;None&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="230449ebf8fd8f983b73d29fe0abb4963a58e26e" translate="yes" xml:space="preserve">
          <source>If no managers are declared on a model and/or its parents, Django automatically creates the &lt;code&gt;objects&lt;/code&gt; manager.</source>
          <target state="translated">モデルやその親でマネージャーが宣言されていない場合、Djangoは自動的に &lt;code&gt;objects&lt;/code&gt; マネージャーを作成します。</target>
        </trans-unit>
        <trans-unit id="90268d13885a180cdb68972e2680aa7e5ca9a536" translate="yes" xml:space="preserve">
          <source>If no match can be made, &lt;code&gt;reverse()&lt;/code&gt; raises a &lt;a href=&quot;exceptions#django.urls.NoReverseMatch&quot;&gt;&lt;code&gt;NoReverseMatch&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">一致するものがない場合、 &lt;code&gt;reverse()&lt;/code&gt; は&lt;a href=&quot;exceptions#django.urls.NoReverseMatch&quot;&gt; &lt;code&gt;NoReverseMatch&lt;/code&gt; &lt;/a&gt;例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="fd524aa004b3f27870b580c048596af0b132e7e1" translate="yes" xml:space="preserve">
          <source>If no object has been assigned to this relationship, Django will raise a &lt;code&gt;DoesNotExist&lt;/code&gt; exception.</source>
          <target state="translated">この関係にオブジェクトが割り当てられていない場合、Djangoは &lt;code&gt;DoesNotExist&lt;/code&gt; 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="e5e7bac3ef346bb21109fb7f48b276715fbf7e3b" translate="yes" xml:space="preserve">
          <source>If no password is provided, &lt;a href=&quot;#django.contrib.auth.models.User.set_unusable_password&quot;&gt;&lt;code&gt;set_unusable_password()&lt;/code&gt;&lt;/a&gt; will be called.</source>
          <target state="translated">パスワードが提供されない場合、&lt;a href=&quot;#django.contrib.auth.models.User.set_unusable_password&quot;&gt; &lt;code&gt;set_unusable_password()&lt;/code&gt; &lt;/a&gt;が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f2a94519d41f60e01c2bb67dfbc966d83d787abe" translate="yes" xml:space="preserve">
          <source>If no router has an opinion (i.e. all routers return &lt;code&gt;None&lt;/code&gt;), only relations within the same database are allowed.</source>
          <target state="translated">どの意見にも意見がない場合（つまり、すべてのルーターが &lt;code&gt;None&lt;/code&gt; を返す場合）、同じデータベース内の関係のみが許可されます。</target>
        </trans-unit>
        <trans-unit id="8d6ba29a42ab8732ea2bac1f574258bf97584d1c" translate="yes" xml:space="preserve">
          <source>If not &lt;code&gt;None&lt;/code&gt;, this will be used as the base path for &lt;a href=&quot;../topics/forms/media#form-asset-paths&quot;&gt;asset definitions&lt;/a&gt; (the &lt;code&gt;Media&lt;/code&gt; class) and the &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles app&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;None&lt;/code&gt; でない場合、これは&lt;a href=&quot;../topics/forms/media#form-asset-paths&quot;&gt;アセット定義&lt;/a&gt;（ &lt;code&gt;Media&lt;/code&gt; クラス）と&lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfilesアプリ&lt;/a&gt;の基本パスとして使用されます。</target>
        </trans-unit>
        <trans-unit id="61421a068661ad515ad52948781a5d81bcd78c50" translate="yes" xml:space="preserve">
          <source>If not &lt;code&gt;None&lt;/code&gt;, this will be used as the value of the &lt;code&gt;SCRIPT_NAME&lt;/code&gt; environment variable in any HTTP request. This setting can be used to override the server-provided value of &lt;code&gt;SCRIPT_NAME&lt;/code&gt;, which may be a rewritten version of the preferred value or not supplied at all. It is also used by &lt;a href=&quot;applications#django.setup&quot;&gt;&lt;code&gt;django.setup()&lt;/code&gt;&lt;/a&gt; to set the URL resolver script prefix outside of the request/response cycle (e.g. in management commands and standalone scripts) to generate correct URLs when &lt;code&gt;SCRIPT_NAME&lt;/code&gt; is not &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;None&lt;/code&gt; でない場合、これはHTTPリクエストで &lt;code&gt;SCRIPT_NAME&lt;/code&gt; 環境変数の値として使用されます。この設定を使用して、サーバーが提供する &lt;code&gt;SCRIPT_NAME&lt;/code&gt; の値を上書きできます。これは、優先値の書き換えられたバージョンであるか、まったく提供されていない可能性があります。また、&lt;a href=&quot;applications#django.setup&quot;&gt; &lt;code&gt;django.setup()&lt;/code&gt; &lt;/a&gt;によって使用され、リクエスト/レスポンスサイクルの外側（管理コマンドやスタンドアロンスクリプトなど）の外でURLリゾルバースクリプトプレフィックスを設定して、 &lt;code&gt;SCRIPT_NAME&lt;/code&gt; が &lt;code&gt;/&lt;/code&gt; でない場合に正しいURLを生成します。</target>
        </trans-unit>
        <trans-unit id="29ae695d6cfe529eb5e8578f78625de3958c1363" translate="yes" xml:space="preserve">
          <source>If not provided, the &amp;lsquo;/&amp;rsquo; character is assumed safe. An empty string can be provided when &lt;em&gt;all&lt;/em&gt; characters should be escaped. For example:</source>
          <target state="translated">指定しない場合、「/」文字は安全であると見なされます。&lt;em&gt;すべての&lt;/em&gt;文字をエスケープする必要がある場合は、空の文字列を指定できます。例えば：</target>
        </trans-unit>
        <trans-unit id="048ec96d38efe8c12dfb083658d8404651c7e75b" translate="yes" xml:space="preserve">
          <source>If not set, the return value of &lt;code&gt;django.core.wsgi.get_wsgi_application()&lt;/code&gt; will be used. In this case, the behavior of &lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; will be identical to previous Django versions.</source>
          <target state="translated">設定されていない場合、 &lt;code&gt;django.core.wsgi.get_wsgi_application()&lt;/code&gt; の戻り値が使用されます。この場合、&lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt;の動作は以前のDjangoバージョンと同じになります。</target>
        </trans-unit>
        <trans-unit id="0bcd2319885f70c975b7765a16711af57eab9baa" translate="yes" xml:space="preserve">
          <source>If one of the existing model fields cannot be used to fit your purposes, or if you wish to take advantage of some less common database column types, you can create your own field class. Full coverage of creating your own fields is provided in &lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;Writing custom model fields&lt;/a&gt;.</source>
          <target state="translated">既存のモデルフィールドの1つを使用して目的に合わせることができない場合、またはあまり一般的でないデータベース列タイプを利用したい場合は、独自のフィールドクラスを作成できます。独自のフィールドを作成する方法については、&lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;カスタムモデルフィールド&lt;/a&gt;の作成で詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="ec78108394b7b984ffd4c8ac9c00c3ab09c32865" translate="yes" xml:space="preserve">
          <source>If one of the instances is current - say, if we were rendering the detail page in the instance &lt;code&gt;'author-polls'&lt;/code&gt; - &lt;code&gt;'polls:index'&lt;/code&gt; will resolve to the index page of the &lt;code&gt;'author-polls'&lt;/code&gt; instance; i.e. both of the following will result in &lt;code&gt;&quot;/author-polls/&quot;&lt;/code&gt;.</source>
          <target state="translated">インスタンスの1つが最新の場合-たとえば、インスタンス &lt;code&gt;'author-polls'&lt;/code&gt; 詳細ページをレンダリングしていた場合- &lt;code&gt;'polls:index'&lt;/code&gt; は &lt;code&gt;'author-polls'&lt;/code&gt; インスタンスのインデックスページに解決されます。つまり、次の両方が &lt;code&gt;&quot;/author-polls/&quot;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="6a7628010548cc467431f476a0dd2aede2b28e62" translate="yes" xml:space="preserve">
          <source>If one of the layers decides to short-circuit and return a response without ever calling its &lt;code&gt;get_response&lt;/code&gt;, none of the layers of the onion inside that layer (including the view) will see the request or the response. The response will only return through the same layers that the request passed in through.</source>
          <target state="translated">レイヤーの1 &lt;code&gt;get_response&lt;/code&gt; 呼び出さずに短絡して応答を返すことを決定した場合、そのレイヤー（ビューを含む）内のタマネギのどのレイヤーも要求または応答を認識しません。応答は、要求が通過したのと同じレイヤーを介してのみ返されます。</target>
        </trans-unit>
        <trans-unit id="5f7fc56d57619fe006603eedffe2bc29e42343d8" translate="yes" xml:space="preserve">
          <source>If one of your views receives an &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object with &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.POST&quot;&gt;&lt;code&gt;POST parameters&lt;/code&gt;&lt;/a&gt; susceptible to contain sensitive information, you may prevent the values of those parameters from being included in the error reports using the &lt;code&gt;sensitive_post_parameters&lt;/code&gt; decorator:</source>
          <target state="translated">ビューの1つが機密情報を含む可能性のある&lt;a href=&quot;../ref/request-response#django.http.HttpRequest.POST&quot;&gt; &lt;code&gt;POST parameters&lt;/code&gt; &lt;/a&gt;を含む&lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;オブジェクトを受け取った場合、 &lt;code&gt;sensitive_post_parameters&lt;/code&gt; デコレーターを使用して、これらのパラメーターの値がエラーレポートに含まれないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="b6842ad1704a4bfe27e663a65a75745b7e53e8d7" translate="yes" xml:space="preserve">
          <source>If one on-commit function within a given transaction raises an uncaught exception, no later registered functions in that same transaction will run. This is the same behavior as if you&amp;rsquo;d executed the functions sequentially yourself without &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">特定のトランザクション内の1つのオンコミット関数でキャッチされない例外が発生した場合、その同じトランザクションで後で登録された関数は実行されません。これは、&lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt; &lt;code&gt;on_commit()&lt;/code&gt; を使用&lt;/a&gt;せずに自分で関数を順番に実行した場合と同じ動作です。</target>
        </trans-unit>
        <trans-unit id="fcff0878219423167c0e066e172d3008301e3e9b" translate="yes" xml:space="preserve">
          <source>If one on-commit function within a given transaction raises an uncaught exception, no later registered functions in that same transaction will run. This is, of course, the same behavior as if you&amp;rsquo;d executed the functions sequentially yourself without &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">特定のトランザクション内の1つのコミット時関数がキャッチされない例外を発生させた場合、その同じトランザクションで後で登録された関数は実行されません。もちろん、これは&lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt; &lt;code&gt;on_commit()&lt;/code&gt; &lt;/a&gt;なしで関数を自分で順番に実行した場合と同じ動作です。</target>
        </trans-unit>
        <trans-unit id="9c159979e36f022ea0dfa4ec34adbe09e0fd50d6" translate="yes" xml:space="preserve">
          <source>If only one key or index is used, the SQL operator &lt;code&gt;-&amp;gt;&lt;/code&gt; is used. If multiple operators are used then the &lt;code&gt;#&amp;gt;&lt;/code&gt; operator is used.</source>
          <target state="translated">キーまたはインデックスを1つだけ使用する場合、SQL演算子 &lt;code&gt;-&amp;gt;&lt;/code&gt; が使用されます。複数の演算子を使用する場合は、 &lt;code&gt;#&amp;gt;&lt;/code&gt; 演算子を使用します。</target>
        </trans-unit>
        <trans-unit id="099c20d00ec2098bbaf3e804c844660386fd2250" translate="yes" xml:space="preserve">
          <source>If only the &lt;code&gt;expected_exception&lt;/code&gt; and &lt;code&gt;expected_message&lt;/code&gt; parameters are given, returns a context manager so that the code being tested can be written inline rather than as a function:</source>
          <target state="translated">&lt;code&gt;expected_exception&lt;/code&gt; および &lt;code&gt;expected_message&lt;/code&gt; パラメータのみが指定されている場合、テストされるコードを関数としてではなくインラインで記述できるように、コンテキストマネージャを返します。</target>
        </trans-unit>
        <trans-unit id="35d8f324adb880bcc55735740ccdb17428c2eda0" translate="yes" xml:space="preserve">
          <source>If only the project name is given, both the project directory and project package will be named &lt;code&gt;&amp;lt;projectname&amp;gt;&lt;/code&gt; and the project directory will be created in the current working directory.</source>
          <target state="translated">プロジェクト名のみを指定した場合、プロジェクトディレクトリとプロジェクトパッケージの両方に &lt;code&gt;&amp;lt;projectname&amp;gt;&lt;/code&gt; という名前が付けられ、プロジェクトディレクトリが現在の作業ディレクトリに作成されます。</target>
        </trans-unit>
        <trans-unit id="d699f3837e773c72f65299756ba17f8a6868e5e3" translate="yes" xml:space="preserve">
          <source>If overriding this method, you must call &lt;code&gt;super()&lt;/code&gt;.</source>
          <target state="translated">このメソッドをオーバーライドする場合は、 &lt;code&gt;super()&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="9a92c12dfd56bfbe7079f0230ba9f2be3d91cfd1" translate="yes" xml:space="preserve">
          <source>If passed, the array will have a maximum size as specified. This will be passed to the database, although PostgreSQL at present does not enforce the restriction.</source>
          <target state="translated">渡された場合、配列は指定された最大サイズを持ちます。これはデータベースに渡されますが、現在のところPostgreSQLはこの制限を強制していません。</target>
        </trans-unit>
        <trans-unit id="bbbac6dbe1f627e4d81d10293f0c6b4eac1b8f3e" translate="yes" xml:space="preserve">
          <source>If present for the field subclass, &lt;code&gt;from_db_value()&lt;/code&gt; will be called in all circumstances when the data is loaded from the database, including in aggregates and &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; calls.</source>
          <target state="translated">フィールドサブクラスに存在する場合は、データがデータベースから読み込まれるときに、集約や&lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt;呼び出しを含め、あらゆる状況で &lt;code&gt;from_db_value()&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5d46fb88e8ed76c60d72db1c27bf5a8f7b838cfa" translate="yes" xml:space="preserve">
          <source>If provided, these arguments ensure that the string is at most or at least the given length.</source>
          <target state="translated">与えられた場合、これらの引数は、文字列が最大でも、少なくとも指定された長さであることを保証します。</target>
        </trans-unit>
        <trans-unit id="d4ce7026faaa634fc0b96ac52163aab44216566a" translate="yes" xml:space="preserve">
          <source>If requested by &lt;a href=&quot;#django.views.generic.base.RedirectView.query_string&quot;&gt;&lt;code&gt;query_string&lt;/code&gt;&lt;/a&gt;, it will also append the query string to the generated URL. Subclasses may implement any behavior they wish, as long as the method returns a redirect-ready URL string.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.base.RedirectView.query_string&quot;&gt; &lt;code&gt;query_string&lt;/code&gt; &lt;/a&gt;によって要求された場合は、生成されたURLにクエリ文字列も追加します。メソッドがリダイレクト可能なURL文字列を返す限り、サブクラスは希望する動作を実装できます。</target>
        </trans-unit>
        <trans-unit id="faf19452a1ebae56ddadfb9b942ecd374ffb45ac" translate="yes" xml:space="preserve">
          <source>If resolving one of the block arguments fails, &lt;code&gt;blocktrans&lt;/code&gt; will fall back to the default language by deactivating the currently active language temporarily with the &lt;a href=&quot;../../ref/utils#django.utils.translation.deactivate_all&quot;&gt;&lt;code&gt;deactivate_all()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">ブロック引数の1つを解決できない場合、 &lt;code&gt;blocktrans&lt;/code&gt; は、&lt;a href=&quot;../../ref/utils#django.utils.translation.deactivate_all&quot;&gt; &lt;code&gt;deactivate_all()&lt;/code&gt; &lt;/a&gt;関数を使用して現在アクティブな言語を一時的に非アクティブ化することにより、デフォルトの言語にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="f03e776f8eb8cc5fcc0396d21e707a58bc675d8b" translate="yes" xml:space="preserve">
          <source>If resolving one of the block arguments fails, &lt;code&gt;blocktranslate&lt;/code&gt; will fall back to the default language by deactivating the currently active language temporarily with the &lt;a href=&quot;../../ref/utils#django.utils.translation.deactivate_all&quot;&gt;&lt;code&gt;deactivate_all()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">ブロック引数の1つが解決に失敗した場合、 &lt;code&gt;blocktranslate&lt;/code&gt; は、&lt;a href=&quot;../../ref/utils#django.utils.translation.deactivate_all&quot;&gt; &lt;code&gt;deactivate_all()&lt;/code&gt; &lt;/a&gt;関数を使用して現在アクティブな言語を一時的に非アクティブ化することにより、デフォルト言語にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="e3b2b458927a860df9d6045447f0d0faf0b56f59" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt;, Django&amp;rsquo;s exception handling of view functions (&lt;a href=&quot;urls#django.conf.urls.handler500&quot;&gt;&lt;code&gt;handler500&lt;/code&gt;&lt;/a&gt;, or the debug view if &lt;a href=&quot;#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;) and logging of 500 responses (&lt;a href=&quot;../topics/logging#django-request-logger&quot;&gt;django.request&lt;/a&gt;) is skipped and exceptions propagate upwards.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; に設定すると、Djangoのビュー関数の例外処理（&lt;a href=&quot;urls#django.conf.urls.handler500&quot;&gt; &lt;code&gt;handler500&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; の場合はデバッグビュー）と500応答のロギング（&lt;a href=&quot;../topics/logging#django-request-logger&quot;&gt;django.request&lt;/a&gt;）がスキップされ、例外が上方に伝播します。</target>
        </trans-unit>
        <trans-unit id="1e3988cd635b524ad4c3e4bb0d792a1a3fb38586" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt;, Oracle Managed Files (OMF) tablespaces will be used. &lt;a href=&quot;#std:setting-DATAFILE&quot;&gt;&lt;code&gt;DATAFILE&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#std:setting-DATAFILE_TMP&quot;&gt;&lt;code&gt;DATAFILE_TMP&lt;/code&gt;&lt;/a&gt; will be ignored.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; に設定すると、Oracle Managed Files（OMF）テーブルスペースが使用されます。&lt;a href=&quot;#std:setting-DATAFILE&quot;&gt; &lt;code&gt;DATAFILE&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#std:setting-DATAFILE_TMP&quot;&gt; &lt;code&gt;DATAFILE_TMP&lt;/code&gt; &lt;/a&gt;は無視されます。</target>
        </trans-unit>
        <trans-unit id="0701521850d9a195a77571e1f1a78268d2492816" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt;, the path data will be implemented in terms of relative moves. Defaults to &lt;code&gt;False&lt;/code&gt;, meaning that absolute moves are used instead.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; に設定されている場合、パスデータは相対移動に関して実装されます。デフォルトは &lt;code&gt;False&lt;/code&gt; で、絶対移動が代わりに使用されることを意味します。</target>
        </trans-unit>
        <trans-unit id="b3b374206c1d9d7963bc92da925a698f9a26de10" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt;, this option will create a database column of type geography, rather than geometry. Please refer to the &lt;a href=&quot;#geography-type&quot;&gt;geography type&lt;/a&gt; section below for more details.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; に設定すると、このオプションは、ジオメトリではなく、geographyタイプのデータベース列を作成します。詳細については、以下の&lt;a href=&quot;#geography-type&quot;&gt;地理タイプの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="27d12549976cfe6d3d621899eab318195533bf4e" translate="yes" xml:space="preserve">
          <source>If set to a non-zero integer value, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; sets the &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt; header on all responses that do not already have it.</source>
          <target state="translated">ゼロ以外の整数値に設定されている場合、&lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt;ヘッダーをまだ持っていないすべての応答に設定します。</target>
        </trans-unit>
        <trans-unit id="a50b195fbd06b17894ee9502ef4702bb971ad749" translate="yes" xml:space="preserve">
          <source>If set with an integer, transactions will occur at every step interval. For example, if &lt;code&gt;step=1000&lt;/code&gt;, a commit would occur after the 1,000th feature, the 2,000th feature etc.</source>
          <target state="translated">整数を設定すると、ステップ間隔ごとにトランザクションが発生します。たとえば、 &lt;code&gt;step=1000&lt;/code&gt; の場合、1,000番目のフィーチャー、2,000番目のフィーチャーなどの後にコミットが発生します。</target>
        </trans-unit>
        <trans-unit id="d8380b522d46fe516758e3f692cac2c3f0d5ddf0" translate="yes" xml:space="preserve">
          <source>If set, information will be printed subsequent to each model save executed on the database.</source>
          <target state="translated">設定されている場合、データベース上で実行される各モデル保存の後に情報が印刷されます。</target>
        </trans-unit>
        <trans-unit id="c30cf6e77ab684eba085d96ac7acc4917b027312" translate="yes" xml:space="preserve">
          <source>If that command doesn&amp;rsquo;t raise any errors, the installation worked.</source>
          <target state="translated">そのコマンドでエラーが発生しなければ、インストールは成功しています。</target>
        </trans-unit>
        <trans-unit id="f98d28bcb8810cfb8ae43b4092760e1122f40b81" translate="yes" xml:space="preserve">
          <source>If that hypothetical database write is instead rolled back (typically when an unhandled exception is raised in an &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; block), your function will be discarded and never called.</source>
          <target state="translated">その架空のデータベース書き込みが代わりにロールバックされた場合（通常、未処理の例外が&lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt;ブロックで発生した場合）、関数は破棄され、呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="e85862c30325f5a99e9a50173133105b8ad0fe04" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#django.contrib.gis.gdal.Layer&quot;&gt;&lt;code&gt;Layer&lt;/code&gt;&lt;/a&gt; has no spatial reference information associated with it, &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.Layer&quot;&gt; &lt;code&gt;Layer&lt;/code&gt; &lt;/a&gt;関連付けられた空間参照情報がない場合、 &lt;code&gt;None&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="b51b9193a32e07b19adea10866b60d16f80af212" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#django.template.response.SimpleTemplateResponse&quot;&gt;&lt;code&gt;SimpleTemplateResponse&lt;/code&gt;&lt;/a&gt; has already been rendered, the callback will be invoked immediately.</source>
          <target state="translated">&lt;a href=&quot;#django.template.response.SimpleTemplateResponse&quot;&gt; &lt;code&gt;SimpleTemplateResponse&lt;/code&gt; &lt;/a&gt;が既にレンダリングされている場合、コールバックはすぐに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="10740bab3147ec45ec0f050fa0c6500025482a05" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.model&quot;&gt;&lt;code&gt;model&lt;/code&gt;&lt;/a&gt; attribute is given, that model class will be used.</source>
          <target state="translated">&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.model&quot;&gt; &lt;code&gt;model&lt;/code&gt; &lt;/a&gt;属性が指定されている場合、そのモデルクラスが使用されます。</target>
        </trans-unit>
        <trans-unit id="8f5c4ba24e8b583b133b407fb7b8a2c07d70e77c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles&lt;/a&gt; contrib app is enabled (as in the default project template), the &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command will collect static files into this directory. See the how-to on &lt;a href=&quot;../howto/static-files/index&quot;&gt;managing static files&lt;/a&gt; for more details about usage.</source>
          <target state="translated">場合&lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles&lt;/a&gt;のcontribアプリは（デフォルトのプロジェクトテンプレートのように）有効になっている、&lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt;管理コマンドは、このディレクトリに静的なファイルを収集します。使用方法の詳細については、&lt;a href=&quot;../howto/static-files/index&quot;&gt;静的ファイルの管理&lt;/a&gt;方法をご覧ください。</target>
        </trans-unit>
        <trans-unit id="934af602cfac6348740d242482f234edb0625730" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles&lt;/a&gt; contrib app is enabled (default in new projects) the &lt;a href=&quot;#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; command will be overridden with its own &lt;a href=&quot;contrib/staticfiles#staticfiles-runserver&quot;&gt;runserver&lt;/a&gt; command.</source>
          <target state="translated">場合&lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles&lt;/a&gt;（新規プロジェクトのデフォルト）が有効になっているのcontribアプリ&lt;a href=&quot;#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt;コマンドは、独自で上書きされる&lt;a href=&quot;contrib/staticfiles#staticfiles-runserver&quot;&gt;のrunserver&lt;/a&gt;コマンド。</target>
        </trans-unit>
        <trans-unit id="8afc9a7ac5ef4d7727722e324647e67d5a1458d6" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; is not required, &lt;a href=&quot;#django.forms.SelectDateWidget&quot;&gt;&lt;code&gt;SelectDateWidget&lt;/code&gt;&lt;/a&gt; will have an empty choice at the top of the list (which is &lt;code&gt;---&lt;/code&gt; by default). You can change the text of this label with the &lt;code&gt;empty_label&lt;/code&gt; attribute. &lt;code&gt;empty_label&lt;/code&gt; can be a &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;tuple&lt;/code&gt;. When a string is used, all select boxes will each have an empty choice with this label. If &lt;code&gt;empty_label&lt;/code&gt; is a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; of 3 string elements, the select boxes will have their own custom label. The labels should be in this order &lt;code&gt;('year_label', 'month_label', 'day_label')&lt;/code&gt;.</source>
          <target state="translated">場合&lt;a href=&quot;fields#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt;必要とされていない、&lt;a href=&quot;#django.forms.SelectDateWidget&quot;&gt; &lt;code&gt;SelectDateWidget&lt;/code&gt; は&lt;/a&gt;（あるリストのトップに空の選択肢を持つことになります &lt;code&gt;---&lt;/code&gt; デフォルトでは）。 &lt;code&gt;empty_label&lt;/code&gt; 属性を使用して、このラベルのテキストを変更できます。 &lt;code&gt;empty_label&lt;/code&gt; には、 &lt;code&gt;string&lt;/code&gt; 、 &lt;code&gt;list&lt;/code&gt; 、または &lt;code&gt;tuple&lt;/code&gt; ます。文字列が使用される場合、すべての選択ボックスはそれぞれこのラベルを持つ空の選択肢を持ちます。場合 &lt;code&gt;empty_label&lt;/code&gt; がある &lt;code&gt;list&lt;/code&gt; や &lt;code&gt;tuple&lt;/code&gt; 3つの文字列要素の、選択ボックスは、独自のカスタムラベルを持つことになります。ラベルはこの順序である必要があります &lt;code&gt;('year_label', 'month_label', 'day_label')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa835231e8a9a83481dbf82598e20e9d33a8a3a3" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_DOMAIN&quot;&gt;&lt;code&gt;CSRF_COOKIE_DOMAIN&lt;/code&gt;&lt;/a&gt; setting is set, the referer is compared against it. This setting supports subdomains. For example, &lt;code&gt;CSRF_COOKIE_DOMAIN = '.example.com'&lt;/code&gt; will allow POST requests from &lt;code&gt;www.example.com&lt;/code&gt; and &lt;code&gt;api.example.com&lt;/code&gt;. If the setting is not set, then the referer must match the HTTP &lt;code&gt;Host&lt;/code&gt; header.</source>
          <target state="translated">場合&lt;a href=&quot;settings#std:setting-CSRF_COOKIE_DOMAIN&quot;&gt; &lt;code&gt;CSRF_COOKIE_DOMAIN&lt;/code&gt; の&lt;/a&gt;設定が設定されている、リファラがそれに対して比較されます。この設定はサブドメインをサポートします。たとえば、 &lt;code&gt;CSRF_COOKIE_DOMAIN = '.example.com'&lt;/code&gt; は、 &lt;code&gt;www.example.com&lt;/code&gt; および &lt;code&gt;api.example.com&lt;/code&gt; からのPOSTリクエストを許可します。設定が設定されていない場合、リファラーはHTTP &lt;code&gt;Host&lt;/code&gt; ヘッダーと一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="e6b97c7b65c9462ac600fe6db085a62642ec3eea" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_DOMAIN&quot;&gt;&lt;code&gt;CSRF_COOKIE_DOMAIN&lt;/code&gt;&lt;/a&gt; setting is set, the referer is compared against it. You can allow cross-subdomain requests by including a leading dot. For example, &lt;code&gt;CSRF_COOKIE_DOMAIN = '.example.com'&lt;/code&gt; will allow POST requests from &lt;code&gt;www.example.com&lt;/code&gt; and &lt;code&gt;api.example.com&lt;/code&gt;. If the setting is not set, then the referer must match the HTTP &lt;code&gt;Host&lt;/code&gt; header.</source>
          <target state="translated">場合&lt;a href=&quot;settings#std:setting-CSRF_COOKIE_DOMAIN&quot;&gt; &lt;code&gt;CSRF_COOKIE_DOMAIN&lt;/code&gt; の&lt;/a&gt;設定が設定されている、リファラがそれに対して比較されます。先頭にドットを含めることで、サブドメイン間のリクエストを許可できます。たとえば、 &lt;code&gt;CSRF_COOKIE_DOMAIN = '.example.com'&lt;/code&gt; は、 &lt;code&gt;www.example.com&lt;/code&gt; および &lt;code&gt;api.example.com&lt;/code&gt; からのPOSTリクエストを許可します。設定が設定されていない場合、リファラーはHTTP &lt;code&gt;Host&lt;/code&gt; ヘッダーと一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="d84c6d34373dc24879682691c703f3d7f2efc49b" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;settings#std:setting-SECURE_SSL_HOST&quot;&gt;&lt;code&gt;SECURE_SSL_HOST&lt;/code&gt;&lt;/a&gt; setting has a value, all redirects will be sent to that host instead of the originally-requested host.</source>
          <target state="translated">場合&lt;a href=&quot;settings#std:setting-SECURE_SSL_HOST&quot;&gt; &lt;code&gt;SECURE_SSL_HOST&lt;/code&gt; の&lt;/a&gt;設定が値を持っている、すべてのリダイレクトではなく、元々 、要求されたホストのホストに送信されます。</target>
        </trans-unit>
        <trans-unit id="5615de50081621591758a391687a80e665e2ccbd" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; template tag is used by a template (or the &lt;code&gt;get_token&lt;/code&gt; function is called some other way), &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; will add a cookie and a &lt;code&gt;Vary: Cookie&lt;/code&gt; header to the response. This means that the middleware will play well with the cache middleware if it is used as instructed (&lt;code&gt;UpdateCacheMiddleware&lt;/code&gt; goes before all other middleware).</source>
          <target state="translated">テンプレートで&lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt; &lt;code&gt;csrf_token&lt;/code&gt; &lt;/a&gt;テンプレートタグが使用されている場合（または &lt;code&gt;get_token&lt;/code&gt; 関数が別の方法で呼び出されている場合）、 &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; は応答に &lt;code&gt;Vary: Cookie&lt;/code&gt; とVary：Cookieヘッダーを追加します。つまり、ミドルウェアは、指示 &lt;code&gt;UpdateCacheMiddleware&lt;/code&gt; 使用された場合、キャッシュミドルウェアとうまく連携します（UpdateCacheMiddlewareは、他のすべてのミドルウェアよりも前に移動します）。</target>
        </trans-unit>
        <trans-unit id="26bd8d1320630840541b8d7d651b43b729598b95" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Content-Type&lt;/code&gt; header is not &lt;code&gt;&quot;application/json&quot;&lt;/code&gt;, then a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; will be raised when trying to parse the response.</source>
          <target state="translated">場合 &lt;code&gt;Content-Type&lt;/code&gt; ヘッダがない &lt;code&gt;&quot;application/json&quot;&lt;/code&gt; 、そして&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; をは&lt;/a&gt;応答を解析しようとしたときに発生します。</target>
        </trans-unit>
        <trans-unit id="2acff23ea5a5ddc3c288d900245bf1fb2834f32f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Host&lt;/code&gt; header (or &lt;code&gt;X-Forwarded-Host&lt;/code&gt; if &lt;a href=&quot;#std:setting-USE_X_FORWARDED_HOST&quot;&gt;&lt;code&gt;USE_X_FORWARDED_HOST&lt;/code&gt;&lt;/a&gt; is enabled) does not match any value in this list, the &lt;a href=&quot;request-response#django.http.HttpRequest.get_host&quot;&gt;&lt;code&gt;django.http.HttpRequest.get_host()&lt;/code&gt;&lt;/a&gt; method will raise &lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">もし &lt;code&gt;Host&lt;/code&gt; （またはヘッダ &lt;code&gt;X-Forwarded-Host&lt;/code&gt; 場合&lt;a href=&quot;#std:setting-USE_X_FORWARDED_HOST&quot;&gt; &lt;code&gt;USE_X_FORWARDED_HOST&lt;/code&gt; が&lt;/a&gt;有効になっている）、このリスト内の任意の値と一致しない、&lt;a href=&quot;request-response#django.http.HttpRequest.get_host&quot;&gt; &lt;code&gt;django.http.HttpRequest.get_host()&lt;/code&gt; &lt;/a&gt;メソッドが発生します&lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousOperation&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3c585a191597195f24d023a685c724097e584557" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ManyToManyField&lt;/code&gt; points from and to the same model, the following fields are generated:</source>
          <target state="translated">&lt;code&gt;ManyToManyField&lt;/code&gt; が同じモデルとの間を指している場合、次のフィールドが生成されます。</target>
        </trans-unit>
        <trans-unit id="7111fc374211946c06667dfde5bc62beeaef76cf" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ModelForm&lt;/code&gt; is only going to be used for the admin, the easiest solution is to omit the &lt;code&gt;Meta.model&lt;/code&gt; attribute, since &lt;code&gt;ModelAdmin&lt;/code&gt; will provide the correct model to use. Alternatively, you can set &lt;code&gt;fields = []&lt;/code&gt; in the &lt;code&gt;Meta&lt;/code&gt; class to satisfy the validation on the &lt;code&gt;ModelForm&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;ModelForm&lt;/code&gt; 唯一の管理のために使用されようとしている、最も簡単な解決策は省略してある &lt;code&gt;Meta.model&lt;/code&gt; のため、属性を &lt;code&gt;ModelAdmin&lt;/code&gt; のは、使用する正しいモデルを提供します。また、あなたが設定することができます &lt;code&gt;fields = []&lt;/code&gt; に &lt;code&gt;Meta&lt;/code&gt; の検証満たすためにクラス &lt;code&gt;ModelForm&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="94e7c57e585e52b8e93039b8fb19e79e14bdd3e1" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;RunPython&lt;/code&gt; operation is part of a &lt;a href=&quot;../howto/writing-migrations#non-atomic-migrations&quot;&gt;non-atomic migration&lt;/a&gt;, the operation will only be executed in a transaction if &lt;code&gt;atomic=True&lt;/code&gt; is passed to the &lt;code&gt;RunPython&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;RunPython&lt;/code&gt; 操作が&lt;a href=&quot;../howto/writing-migrations#non-atomic-migrations&quot;&gt;非アトミックマイグレーションの&lt;/a&gt;一部である場合、操作は、 &lt;code&gt;atomic=True&lt;/code&gt; が &lt;code&gt;RunPython&lt;/code&gt; 操作に渡された場合にのみトランザクションで実行されます。</target>
        </trans-unit>
        <trans-unit id="31d01216ada1a5804e326038cd6eae0f674c8905" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;approximate&lt;/code&gt; argument is set to &lt;code&gt;True&lt;/code&gt;, the statistics may be computed based on overviews or a subset of image tiles.</source>
          <target state="translated">場合は &lt;code&gt;approximate&lt;/code&gt; 引数に設定されて &lt;code&gt;True&lt;/code&gt; 、統計情報は概要やイメージタイルのサブセットに基づいて計算することができます。</target>
        </trans-unit>
        <trans-unit id="92d7232ff3bb4953caa004d3cafc9ee9c491c11a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;clear()&lt;/code&gt; method is available, any pre-existing objects will be removed from the &lt;code&gt;entry_set&lt;/code&gt; before all objects in the iterable (in this case, a list) are added to the set. If the &lt;code&gt;clear()&lt;/code&gt; method is &lt;em&gt;not&lt;/em&gt; available, all objects in the iterable will be added without removing any existing elements.</source>
          <target state="translated">場合に &lt;code&gt;clear()&lt;/code&gt; メソッドが利用可能である、任意の既存のオブジェクトから削除されます &lt;code&gt;entry_set&lt;/code&gt; 反復可能ですべてのオブジェクトの前に（この場合、リストは）セットに追加されます。場合に &lt;code&gt;clear()&lt;/code&gt; メソッドが&lt;em&gt;ない&lt;/em&gt;利用可能な、反復可能のすべてのオブジェクトは、任意の既存の要素を削除せずに追加されます。</target>
        </trans-unit>
        <trans-unit id="2297ffae582b0075c91fa434df47e635fa35db94" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;count&lt;/code&gt; integer argument is specified, then additionally the number of &lt;code&gt;needle&lt;/code&gt; occurrences will be strictly verified.</source>
          <target state="translated">場合は &lt;code&gt;count&lt;/code&gt; 引数の整数が指定され、その後、さらに多数の &lt;code&gt;needle&lt;/code&gt; 発生は厳密に検証されます。</target>
        </trans-unit>
        <trans-unit id="a2e468dac67b430f87f8897eb4897a2b9f527f58" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;disable_existing_loggers&lt;/code&gt; key in the &lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt;&lt;code&gt;LOGGING&lt;/code&gt;&lt;/a&gt; dictConfig is set to &lt;code&gt;True&lt;/code&gt; (which is the &lt;code&gt;dictConfig&lt;/code&gt; default if the key is missing) then all loggers from the default configuration will be disabled. Disabled loggers are not the same as removed; the logger will still exist, but will silently discard anything logged to it, not even propagating entries to a parent logger. Thus you should be very careful using &lt;code&gt;'disable_existing_loggers': True&lt;/code&gt;; it&amp;rsquo;s probably not what you want. Instead, you can set &lt;code&gt;disable_existing_loggers&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; and redefine some or all of the default loggers; or you can set &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt;&lt;code&gt;LOGGING_CONFIG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt; and &lt;a href=&quot;#disabling-logging-configuration&quot;&gt;handle logging config yourself&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt; &lt;code&gt;LOGGING&lt;/code&gt; &lt;/a&gt; dictConfig の &lt;code&gt;disable_existing_loggers&lt;/code&gt; キーが &lt;code&gt;True&lt;/code&gt; （キーが欠落している場合の &lt;code&gt;dictConfig&lt;/code&gt; のデフォルト）に設定されている場合、デフォルト構成のすべてのロガーが無効になります。無効化されたロガーは削除されたものと同じではありません。ロガーは引き続き存在しますが、ログに記録されたものは何も表示せずに破棄し、エントリを親ロガーに伝達することもしません。したがって、 &lt;code&gt;'disable_existing_loggers': True&lt;/code&gt; を使用する場合は注意が必要です。True ;それはおそらくあなたが望むものではありません。代わりに、 &lt;code&gt;disable_existing_loggers&lt;/code&gt; を &lt;code&gt;False&lt;/code&gt; に設定して、デフォルトロガーの一部またはすべてを再定義できます。または、&lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt; &lt;code&gt;LOGGING_CONFIG&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;None&lt;/code&gt; に設定できますそして&lt;a href=&quot;#disabling-logging-configuration&quot;&gt;ハンドルロギングは自分をconfigコン&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="05b08f75ebf13d1d83b41dad6945c5f27a8d81f7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;keepdb&lt;/code&gt; argument is &lt;code&gt;True&lt;/code&gt;, then the connection to the database will be closed, but the database will not be destroyed.</source>
          <target state="translated">&lt;code&gt;keepdb&lt;/code&gt; 引数が &lt;code&gt;True&lt;/code&gt; の場合、データベースへの接続は閉じられますが、データベースは破棄されません。</target>
        </trans-unit>
        <trans-unit id="08a666c5a8da8f429a409a1267d3838029509ea0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;noop&lt;/code&gt; option is present, variable lookup still takes place but the translation is skipped. This is useful when &amp;ldquo;stubbing out&amp;rdquo; content that will require translation in the future:</source>
          <target state="translated">&lt;code&gt;noop&lt;/code&gt; オプションが存在する場合、変数のルックアップは引き続き行われますが、変換はスキップされます。これは、将来翻訳が必要になるコンテンツを「スタブアウト」するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="2ee97327ba18c15399455629ba03a6de34dcb1f6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;pk&lt;/code&gt; attribute in the serialized data doesn&amp;rsquo;t exist or is null, a new instance will be saved to the database.</source>
          <target state="translated">シリアル化されたデータの &lt;code&gt;pk&lt;/code&gt; 属性が存在しないかnullの場合、新しいインスタンスがデータベースに保存されます。</target>
        </trans-unit>
        <trans-unit id="b2735b2310885870e75d0ff6691c6be8a18b8799" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;raise_exception&lt;/code&gt; parameter is given, the decorator will raise &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt;, prompting &lt;a href=&quot;../../ref/views#http-forbidden-view&quot;&gt;the 403 (HTTP Forbidden) view&lt;/a&gt; instead of redirecting to the login page.</source>
          <target state="translated">場合 &lt;code&gt;raise_exception&lt;/code&gt; パラメータが与えられ、デコレータが発生します&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; を&lt;/a&gt;促し、&lt;a href=&quot;../../ref/views#http-forbidden-view&quot;&gt;403（HTTP禁止）ビュー&lt;/a&gt;の代わりにログインページにリダイレクトするのを。</target>
        </trans-unit>
        <trans-unit id="8394c12ff09c1a5f8f90c7ba9e59af4e1bad9b1d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;refresh&lt;/code&gt; argument is set to &lt;code&gt;True&lt;/code&gt;, the statistics will be computed from the data directly, and the cache will be updated with the result.</source>
          <target state="translated">場合は &lt;code&gt;refresh&lt;/code&gt; 引数に設定されて &lt;code&gt;True&lt;/code&gt; 、統計は、直接データから計算され、キャッシュが結果で更新されます。</target>
        </trans-unit>
        <trans-unit id="33693d4d2aaa6f581909a8eddc7f106b165a2f88" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;render()&lt;/code&gt; method of your template tag stores the result in a context variable (rather than returning the result in a string), it should take care to call &lt;code&gt;mark_safe()&lt;/code&gt; if appropriate. When the variable is ultimately rendered, it will be affected by the auto-escape setting in effect at the time, so content that should be safe from further escaping needs to be marked as such.</source>
          <target state="translated">テンプレートタグの &lt;code&gt;render()&lt;/code&gt; メソッドが結果を（文字列で結果を返すのではなく）コンテキスト変数に格納する場合は、必要に応じて &lt;code&gt;mark_safe()&lt;/code&gt; を呼び出すように注意する必要があります。変数が最終的にレンダリングされると、その時点で有効な自動エスケープ設定の影響を受けるため、それ以上エスケープされないようにする必要があるコンテンツは、そのようにマークする必要があります。</target>
        </trans-unit>
        <trans-unit id="c2101e6671e6072ad4bba4baf10eea4a340d6815" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;source&lt;/code&gt; command is not available, you can try using a dot instead:</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; コマンドを使用できない場合は、代わりにドットを使用してみてください。</target>
        </trans-unit>
        <trans-unit id="6fe133ba83ae0e8070bb7d71584bd37302738487" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;values()&lt;/code&gt; clause precedes the &lt;code&gt;annotate()&lt;/code&gt; clause, any annotations will be automatically added to the result set. However, if the &lt;code&gt;values()&lt;/code&gt; clause is applied after the &lt;code&gt;annotate()&lt;/code&gt; clause, you need to explicitly include the aggregate column.</source>
          <target state="translated">場合 &lt;code&gt;values()&lt;/code&gt; 句は、先行する &lt;code&gt;annotate()&lt;/code&gt; 句を、任意の注釈は自動的に結果セットに追加されます。ただし、 &lt;code&gt;values()&lt;/code&gt; 句が &lt;code&gt;annotate()&lt;/code&gt; 句の後に適用される場合は、集計列を明示的に含める必要があります。</target>
        </trans-unit>
        <trans-unit id="5040996a29b439b21cdb418aa42738cf3b6d145f" translate="yes" xml:space="preserve">
          <source>If the URL accepts arguments, you may pass them in &lt;code&gt;args&lt;/code&gt;. For example:</source>
          <target state="translated">URLが引数を受け入れる場合、それらを &lt;code&gt;args&lt;/code&gt; で渡すことができます。例えば：</target>
        </trans-unit>
        <trans-unit id="7e0c98ab05f016b5dde972280549bc4e7e4e4ca7" translate="yes" xml:space="preserve">
          <source>If the URL does not resolve, the function raises a &lt;a href=&quot;exceptions#django.urls.Resolver404&quot;&gt;&lt;code&gt;Resolver404&lt;/code&gt;&lt;/a&gt; exception (a subclass of &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt;) .</source>
          <target state="translated">URLが解決されない場合、関数は&lt;a href=&quot;exceptions#django.urls.Resolver404&quot;&gt; &lt;code&gt;Resolver404&lt;/code&gt; &lt;/a&gt;例外（&lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; の&lt;/a&gt;サブクラス）を発生させます。</target>
        </trans-unit>
        <trans-unit id="a05f5f3d9b9ee23fb6009484d0a452e7752eff69" translate="yes" xml:space="preserve">
          <source>If the URL you request with a POST contains encoded parameters, these parameters will be made available in the request.GET data. For example, if you were to make the request:</source>
          <target state="translated">POSTでリクエストしたURLにエンコードされたパラメータが含まれている場合、これらのパラメータはrequest.GETデータで利用可能になります。例えば、request.GETでリクエストしたとします。</target>
        </trans-unit>
        <trans-unit id="81e578b176fe7d9a3ae3e7b6b5fa7a60a79d1ac7" translate="yes" xml:space="preserve">
          <source>If the actual state of the database and Django&amp;rsquo;s view of the state get out of sync, this can break the migration framework, even leading to data loss. It&amp;rsquo;s worth exercising caution and checking your database and state operations carefully. You can use &lt;a href=&quot;django-admin#django-admin-sqlmigrate&quot;&gt;&lt;code&gt;sqlmigrate&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;django-admin#django-admin-dbshell&quot;&gt;&lt;code&gt;dbshell&lt;/code&gt;&lt;/a&gt; to check your database operations. You can use &lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt;, especially with &lt;a href=&quot;django-admin#cmdoption-makemigrations-dry-run&quot;&gt;&lt;code&gt;--dry-run&lt;/code&gt;&lt;/a&gt;, to check your state operations.</source>
          <target state="translated">データベースの実際の状態とDjangoの状態のビューが同期しなくなると、移行フレームワークが壊れ、データが失われる可能性があります。注意を払い、データベースと状態の操作を注意深くチェックすることは価値があります。あなたは使用することができます&lt;a href=&quot;django-admin#django-admin-sqlmigrate&quot;&gt; &lt;code&gt;sqlmigrate&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;django-admin#django-admin-dbshell&quot;&gt; &lt;code&gt;dbshell&lt;/code&gt; &lt;/a&gt;お使いのデータベース操作を確認すること。&lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt;を使用して、特に&lt;a href=&quot;django-admin#cmdoption-makemigrations-dry-run&quot;&gt; &lt;code&gt;--dry-run&lt;/code&gt; &lt;/a&gt;を使用して、状態の操作を確認できます。</target>
        </trans-unit>
        <trans-unit id="7bfe6092e2dbc4af99eae5987a2b05f2af49e616" translate="yes" xml:space="preserve">
          <source>If the argument passed to &lt;code&gt;floatformat&lt;/code&gt; is negative, it will round a number to that many decimal places &amp;ndash; but only if there&amp;rsquo;s a decimal part to be displayed. For example:</source>
          <target state="translated">&lt;code&gt;floatformat&lt;/code&gt; に渡される引数が負の場合、小数点以下の桁数に丸められます。ただし、表示される小数部がある場合のみです。例えば：</target>
        </trans-unit>
        <trans-unit id="37eef821508b28230557eff0648d464c18e05688" translate="yes" xml:space="preserve">
          <source>If the argument was a template variable, our function is passed the current value of the variable, not the variable itself.</source>
          <target state="translated">引数がテンプレート変数であった場合、関数は変数自体ではなく変数の現在の値を渡します。</target>
        </trans-unit>
        <trans-unit id="0cd46f87317e9cbe83ccd768d1ca1f980a06f428" translate="yes" xml:space="preserve">
          <source>If the built-in &lt;code&gt;Field&lt;/code&gt; classes don&amp;rsquo;t meet your needs, you can create custom &lt;code&gt;Field&lt;/code&gt; classes. To do this, create a subclass of &lt;code&gt;django.forms.Field&lt;/code&gt;. Its only requirements are that it implement a &lt;code&gt;clean()&lt;/code&gt; method and that its &lt;code&gt;__init__()&lt;/code&gt; method accept the core arguments mentioned above (&lt;code&gt;required&lt;/code&gt;, &lt;code&gt;label&lt;/code&gt;, &lt;code&gt;initial&lt;/code&gt;, &lt;code&gt;widget&lt;/code&gt;, &lt;code&gt;help_text&lt;/code&gt;).</source>
          <target state="translated">組み込みの &lt;code&gt;Field&lt;/code&gt; クラスがニーズを満たさない場合は、カスタム &lt;code&gt;Field&lt;/code&gt; クラスを作成できます。これを行うには、 &lt;code&gt;django.forms.Field&lt;/code&gt; のサブクラスを作成します。その唯一の要件は、 &lt;code&gt;clean()&lt;/code&gt; メソッドを実装し、その &lt;code&gt;__init__()&lt;/code&gt; メソッドが上記のコア引数（ &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;label&lt;/code&gt; 、 &lt;code&gt;initial&lt;/code&gt; 、 &lt;code&gt;widget&lt;/code&gt; 、 &lt;code&gt;help_text&lt;/code&gt; ）を受け入れることです。</target>
        </trans-unit>
        <trans-unit id="0881e54800250d1cf05f08cf67b32a0f19ebd6b4" translate="yes" xml:space="preserve">
          <source>If the built-in fields don&amp;rsquo;t do the trick, you can try &lt;a href=&quot;https://github.com/django/django-localflavor&quot;&gt;django-localflavor&lt;/a&gt; (&lt;a href=&quot;https://django-localflavor.readthedocs.io/&quot;&gt;documentation&lt;/a&gt;), which contains assorted pieces of code that are useful for particular countries and cultures.</source>
          <target state="translated">組み込みのフィールドでうまくいかない場合は、&lt;a href=&quot;https://github.com/django/django-localflavor&quot;&gt;django-localflavor&lt;/a&gt;（&lt;a href=&quot;https://django-localflavor.readthedocs.io/&quot;&gt;documentation&lt;/a&gt;）を試すことができます。これには、特定の国や文化に役立つさまざまなコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="f55edd29f245a56eb902d9c4815f789400cb13c8" translate="yes" xml:space="preserve">
          <source>If the callback returns a value that is not &lt;code&gt;None&lt;/code&gt;, this will be used as the response instead of the original response object (and will be passed to the next post rendering callback etc.)</source>
          <target state="translated">コールバックが &lt;code&gt;None&lt;/code&gt; ではない値を返す場合、元の応答オブジェクトの代わりにこれが応答として使用されます（そして、次のポストレンダリングコールバックなどに渡されます）。</target>
        </trans-unit>
        <trans-unit id="68cb408f8b62b8a0532f41e57994c10be485c369" translate="yes" xml:space="preserve">
          <source>If the computation time for using this method is too expensive, consider using &lt;a href=&quot;#django.contrib.gis.db.models.Collect&quot;&gt;&lt;code&gt;Collect&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">この方法を使用するための計算時間が高すぎる場合は、代わりに&lt;a href=&quot;#django.contrib.gis.db.models.Collect&quot;&gt; &lt;code&gt;Collect&lt;/code&gt; &lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="47b5d1532c2916d14a586f84ef6f39d88cc4cdda" translate="yes" xml:space="preserve">
          <source>If the concept of a &lt;code&gt;default&lt;/code&gt; database doesn&amp;rsquo;t make sense in the context of your project, you need to be careful to always specify the database that you want to use. Django requires that a &lt;code&gt;default&lt;/code&gt; database entry be defined, but the parameters dictionary can be left blank if it will not be used. To do this, you must set up &lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt;&lt;code&gt;DATABASE_ROUTERS&lt;/code&gt;&lt;/a&gt; for all of your apps&amp;rsquo; models, including those in any contrib and third-party apps you&amp;rsquo;re using, so that no queries are routed to the default database. The following is an example &lt;code&gt;settings.py&lt;/code&gt; snippet defining two non-default databases, with the &lt;code&gt;default&lt;/code&gt; entry intentionally left empty:</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; データベースの概念がプロジェクトのコンテキストで意味をなさない場合は、常に使用するデータベースを指定するように注意する必要があります。 Djangoでは、 &lt;code&gt;default&lt;/code&gt; データベースエントリを定義する必要がありますが、パラメータディクショナリを使用しない場合は空白のままにしておくことができます。これを行うには、使用しているcontribやサードパーティのアプリのモデルを含め、すべてのアプリのモデルに&lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt; &lt;code&gt;DATABASE_ROUTERS&lt;/code&gt; &lt;/a&gt;を設定して、クエリがデフォルトのデータベースにルーティングされないようにする必要があります。以下は、デフォルト以外の2つのデータベースを定義する &lt;code&gt;settings.py&lt;/code&gt; スニペットの例 &lt;code&gt;default&lt;/code&gt; エントリは意図的に空のままにしています。</target>
        </trans-unit>
        <trans-unit id="eeb6db1ade98b249e264e62c08a05f0b6e4af339" translate="yes" xml:space="preserve">
          <source>If the content to be serialized contains control characters that are not accepted in the XML 1.0 standard, the serialization will fail with a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; exception. Read also the W3C&amp;rsquo;s explanation of &lt;a href=&quot;https://www.w3.org/International/questions/qa-controls&quot;&gt;HTML, XHTML, XML and Control Codes&lt;/a&gt;.</source>
          <target state="translated">シリアル化するコンテンツにXML 1.0標準で受け入れられない制御文字が含まれている&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;、シリアル化はValueError例外で失敗します。W3Cによる&lt;a href=&quot;https://www.w3.org/International/questions/qa-controls&quot;&gt;HTML、XHTML、XML、制御コード&lt;/a&gt;の説明もご覧ください。</target>
        </trans-unit>
        <trans-unit id="4525ae9d6cf2854a6fcb0608be8b93a3f3c30647" translate="yes" xml:space="preserve">
          <source>If the current time zone raises an exception for datetimes that don&amp;rsquo;t exist or are ambiguous because they fall in a DST transition (the timezones provided by &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt; do this), such datetimes will be reported as invalid values.</source>
          <target state="translated">現在のタイムゾーンが存在しないか、DST遷移に該当するためにあいまいな日時の例外を発生させる場合（&lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt;によって提供されるタイムゾーンがこれを行う）、そのような日時は無効な値として報告されます。</target>
        </trans-unit>
        <trans-unit id="f4e60e6c3027fafd4a1a2f98a5fa17785a3288ae" translate="yes" xml:space="preserve">
          <source>If the custom through table defined by the intermediate model does not enforce uniqueness on the &lt;code&gt;(model1, model2)&lt;/code&gt; pair, allowing multiple values, the &lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.remove&quot;&gt;&lt;code&gt;remove()&lt;/code&gt;&lt;/a&gt; call will remove all intermediate model instances:</source>
          <target state="translated">中間モデルによって定義されたカスタムスルーテーブルが &lt;code&gt;(model1, model2)&lt;/code&gt; ペアに一意性を適用せず、複数の値を許可する場合、&lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.remove&quot;&gt; &lt;code&gt;remove()&lt;/code&gt; &lt;/a&gt;呼び出しはすべての中間モデルインスタンスを削除します。</target>
        </trans-unit>
        <trans-unit id="60b168a79b98017c44ac1a37fd2d1555ab25d04d" translate="yes" xml:space="preserve">
          <source>If the database backend doesn&amp;rsquo;t support time zones (e.g. SQLite, MySQL, Oracle), Django reads and writes datetimes in local time according to this option if it is set and in UTC if it isn&amp;rsquo;t.</source>
          <target state="translated">データベースバックエンドがタイムゾーン（SQLite、MySQL、Oracleなど）をサポートしていない場合、Djangoは、設定されている場合はこのオプションに従って現地時間で、設定されていない場合はUTCで日時を読み書きします。</target>
        </trans-unit>
        <trans-unit id="a2ba213c7e47c95e2f4c72c230a8d86ca3174f13" translate="yes" xml:space="preserve">
          <source>If the database backend supports time zones (e.g. PostgreSQL), the &lt;code&gt;TIME_ZONE&lt;/code&gt; option is very rarely needed. It can be changed at any time; the database takes care of converting datetimes to the desired time zone.</source>
          <target state="translated">データベースバックエンドがタイムゾーン（PostgreSQLなど）をサポートしている場合、 &lt;code&gt;TIME_ZONE&lt;/code&gt; オプションが必要になることはめったにありません。いつでも変更できます。データベースは、日時を目的のタイムゾーンに変換します。</target>
        </trans-unit>
        <trans-unit id="24e26eeaf3ed6a6240170bc7969a0916fee521c8" translate="yes" xml:space="preserve">
          <source>If the database column name is a Python reserved word (such as &lt;code&gt;'pass'&lt;/code&gt;, &lt;code&gt;'class'&lt;/code&gt; or &lt;code&gt;'for'&lt;/code&gt;), &lt;code&gt;inspectdb&lt;/code&gt; will append &lt;code&gt;'_field'&lt;/code&gt; to the attribute name. For example, if a table has a column &lt;code&gt;'for'&lt;/code&gt;, the generated model will have a field &lt;code&gt;'for_field'&lt;/code&gt;, with the &lt;code&gt;db_column&lt;/code&gt; attribute set to &lt;code&gt;'for'&lt;/code&gt;. &lt;code&gt;inspectdb&lt;/code&gt; will insert the Python comment &lt;code&gt;'Field renamed because it was a Python reserved word.'&lt;/code&gt; next to the field.</source>
          <target state="translated">データベースの列名がPythonの予約語（ &lt;code&gt;'pass'&lt;/code&gt; 、 &lt;code&gt;'class'&lt;/code&gt; 、 &lt;code&gt;'for'&lt;/code&gt; など）の場合、 &lt;code&gt;inspectdb&lt;/code&gt; は属性名に &lt;code&gt;'_field'&lt;/code&gt; を追加します。たとえば、テーブルに列 &lt;code&gt;'for'&lt;/code&gt; がある場合、生成されたモデルにはフィールド &lt;code&gt;'for_field'&lt;/code&gt; があり、 &lt;code&gt;db_column&lt;/code&gt; 属性が &lt;code&gt;'for'&lt;/code&gt; に設定されます。 &lt;code&gt;inspectdb&lt;/code&gt; は、Pythonコメント &lt;code&gt;'Field renamed because it was a Python reserved word.'&lt;/code&gt; を挿入します。フィールドの横。</target>
        </trans-unit>
        <trans-unit id="b433adee0cff9f7e77689b285a176f694c2dfe64" translate="yes" xml:space="preserve">
          <source>If the database has the &lt;code&gt;supports_combined_alters&lt;/code&gt;, Django will try and do as many of these in a single database call as possible; otherwise, it will issue a separate ALTER statement for each change, but will not issue ALTERs where no change is required (as South often did).</source>
          <target state="translated">データベースに &lt;code&gt;supports_combined_alters&lt;/code&gt; がある場合、Djangoはこれらを可能な限り1回のデータベース呼び出しで実行しようとします。それ以外の場合は、変更ごとに個別のALTERステートメントを発行しますが、（Southが頻繁に行っていたように）変更が不要な場所ではALTERを発行しません。</target>
        </trans-unit>
        <trans-unit id="db2ceac90336d5ce8d16f9adb539f3c2b5279cfd" translate="yes" xml:space="preserve">
          <source>If the database has the &lt;code&gt;supports_combined_alters&lt;/code&gt;, Django will try and do as many of these in a single database call as possible; otherwise, it will issue a separate ALTER statement for each change, but will not issue ALTERs where no change is required.</source>
          <target state="translated">データベースに &lt;code&gt;supports_combined_alters&lt;/code&gt; がある場合、Djangoは1回のデータベース呼び出しでこれらをできるだけ多く実行しようとします。それ以外の場合は、変更ごとに個別のALTERステートメントを発行しますが、変更が不要な場合はALTERを発行しません。</target>
        </trans-unit>
        <trans-unit id="2b6214efcbb5905b7ba74c2ae487377c68437bf4" translate="yes" xml:space="preserve">
          <source>If the database is responsible for updating the field, the process is more robust: it will only ever update the field based on the value of the field in the database when the &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;update()&lt;/code&gt; is executed, rather than based on its value when the instance was retrieved.</source>
          <target state="translated">データベースがフィールドの更新を担当している場合、プロセスはより堅牢になります&lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;または &lt;code&gt;update()&lt;/code&gt; が実行されるときに、データベースのフィールドの値ではなく、データベースのフィールドの値に基づいてフィールドを更新しますインスタンスが取得されたときの値。</target>
        </trans-unit>
        <trans-unit id="75e620c38af1daa6c954718d3fb54518ed7eaca8" translate="yes" xml:space="preserve">
          <source>If the database supports it, you can specify the start and end points based on values of an expression in the partition. If the &lt;code&gt;released&lt;/code&gt; field of the &lt;code&gt;Movie&lt;/code&gt; model stores the release month of each movies, this &lt;code&gt;ValueRange&lt;/code&gt; example annotates each movie with the average rating of a movie&amp;rsquo;s peers released between twelve months before and twelve months after the each movie.</source>
          <target state="translated">データベースでサポートされている場合は、パーティション内の式の値に基づいて開始点と終了点を指定できます。 &lt;code&gt;Movie&lt;/code&gt; モデルの &lt;code&gt;released&lt;/code&gt; フィールドに各映画のリリース月が格納されている場合、この &lt;code&gt;ValueRange&lt;/code&gt; の例は、各映画に、各映画の12か月前から12か月前にリリースされた映画のピアの平均評価で注釈を付けます。</target>
        </trans-unit>
        <trans-unit id="de682c7bb318e9e4b8081e3ba95e6e42e73b0668" translate="yes" xml:space="preserve">
          <source>If the default value (&lt;code&gt;None&lt;/code&gt;) is used with the SQLite database engine, the tests will use a memory resident database. For all other database engines the test database will use the name &lt;code&gt;'test_' + DATABASE_NAME&lt;/code&gt;.</source>
          <target state="translated">SQLiteデータベースエンジンでデフォルト値（ &lt;code&gt;None&lt;/code&gt; ）が使用されている場合、テストではメモリ常駐データベースが使用されます。他のすべてのデータベースエンジンでは、テストデータベースは &lt;code&gt;'test_' + DATABASE_NAME&lt;/code&gt; という名前を使用します。</target>
        </trans-unit>
        <trans-unit id="31d7e870cfce92781ed62069a8d06aed8bd6f166" translate="yes" xml:space="preserve">
          <source>If the email address provided does not exist in the system, the user is inactive, or has an unusable password, the user will still be redirected to this view but no email will be sent.</source>
          <target state="translated">提供された電子メールアドレスがシステムに存在しない場合、ユーザーがアクティブでない場合、または使用不可能なパスワードを使用している場合、ユーザーはこのビューにリダイレクトされますが、電子メールは送信されません。</target>
        </trans-unit>
        <trans-unit id="db3ee4ff45ccc9f4fcd4236a06eb867d73a8a85f" translate="yes" xml:space="preserve">
          <source>If the email address provided does not exist in the system, this view won&amp;rsquo;t send an email, but the user won&amp;rsquo;t receive any error message either. This prevents information leaking to potential attackers. If you want to provide an error message in this case, you can subclass &lt;a href=&quot;#django.contrib.auth.forms.PasswordResetForm&quot;&gt;&lt;code&gt;PasswordResetForm&lt;/code&gt;&lt;/a&gt; and use the &lt;code&gt;form_class&lt;/code&gt; attribute.</source>
          <target state="translated">提供された電子メールアドレスがシステムに存在しない場合、このビューは電子メールを送信しませんが、ユーザーもエラーメッセージを受け取りません。これにより、潜在的な攻撃者への情報漏えいを防ぎます。この場合にエラーメッセージを提供する場合は、&lt;a href=&quot;#django.contrib.auth.forms.PasswordResetForm&quot;&gt; &lt;code&gt;PasswordResetForm&lt;/code&gt; &lt;/a&gt;をサブクラス化して &lt;code&gt;form_class&lt;/code&gt; 属性を使用できます。</target>
        </trans-unit>
        <trans-unit id="c99e2655adb8e99185dcdfcf065a8bd817fd52d8" translate="yes" xml:space="preserve">
          <source>If the feed format is totally custom, you&amp;rsquo;ll want to subclass &lt;code&gt;SyndicationFeed&lt;/code&gt; and completely replace the &lt;code&gt;write()&lt;/code&gt; and &lt;code&gt;writeString()&lt;/code&gt; methods.</source>
          <target state="translated">フィード形式が完全にカスタムの場合は、 &lt;code&gt;SyndicationFeed&lt;/code&gt; をサブクラス化して、 &lt;code&gt;write()&lt;/code&gt; &lt;code&gt;writeString()&lt;/code&gt; メソッドとwriteString（）メソッドを完全に置き換えます。</target>
        </trans-unit>
        <trans-unit id="e7368b6434626ac779365385ae08f94dbbeb6a28" translate="yes" xml:space="preserve">
          <source>If the field is a &lt;code&gt;BooleanField&lt;/code&gt;, Django will display a pretty &amp;ldquo;on&amp;rdquo; or &amp;ldquo;off&amp;rdquo; icon instead of &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">フィールドが &lt;code&gt;BooleanField&lt;/code&gt; の場合、Djangoは &lt;code&gt;True&lt;/code&gt; または &lt;code&gt;False&lt;/code&gt; ではなく、かなり「オン」または「オフ」のアイコンを表示します。</target>
        </trans-unit>
        <trans-unit id="93a5e61f0fff2318c8177651d57e9f9df8232f8d" translate="yes" xml:space="preserve">
          <source>If the field is a &lt;code&gt;ForeignKey&lt;/code&gt;, Django will display the &lt;code&gt;__str__()&lt;/code&gt; of the related object.</source>
          <target state="translated">フィールドが &lt;code&gt;ForeignKey&lt;/code&gt; の場合、Djangoは関連オブジェクトの &lt;code&gt;__str__()&lt;/code&gt; を表示します。</target>
        </trans-unit>
        <trans-unit id="187bb90cacedf45099edc0ce8a570d93fd2dd2d0" translate="yes" xml:space="preserve">
          <source>If the field is a &lt;code&gt;ForeignKey&lt;/code&gt;, this will also add the foreign key constraint to the column.</source>
          <target state="translated">フィールドが &lt;code&gt;ForeignKey&lt;/code&gt; の場合、これにより、列に外部キー制約も追加されます。</target>
        </trans-unit>
        <trans-unit id="7fc4678d8fbbd49c904395e0d20c16a282bf2e32" translate="yes" xml:space="preserve">
          <source>If the field is a &lt;code&gt;ManyToManyField&lt;/code&gt; without a value for &lt;code&gt;through&lt;/code&gt;, instead of creating a column, it will make a table to represent the relationship. If &lt;code&gt;through&lt;/code&gt; is provided, it is a no-op.</source>
          <target state="translated">フィールドがある場合 &lt;code&gt;ManyToManyField&lt;/code&gt; の値なし &lt;code&gt;through&lt;/code&gt; 代わりに列を作成するのではなく、それは関係を表すためにテーブルを作成します。 &lt;code&gt;through&lt;/code&gt; が指定されている場合、何も行われません。</target>
        </trans-unit>
        <trans-unit id="c3e41a9270c1726202619f246ad8066eeba76c80" translate="yes" xml:space="preserve">
          <source>If the field is a ManyToManyField without a value for &lt;code&gt;through&lt;/code&gt;, it will remove the table created to track the relationship. If &lt;code&gt;through&lt;/code&gt; is provided, it is a no-op.</source>
          <target state="translated">フィールドには値なしのManyToManyFieldであれば &lt;code&gt;through&lt;/code&gt; 、それは関係を追跡するために作成されたテーブルを削除します。 &lt;code&gt;through&lt;/code&gt; が指定されている場合、何も行われません。</target>
        </trans-unit>
        <trans-unit id="2eb25c25d3d9375ffc539e7ad5b8fd3b1ac65ecc" translate="yes" xml:space="preserve">
          <source>If the fields that you&amp;rsquo;re combining are of different types you&amp;rsquo;ll need to tell Django what kind of field will be returned. Since &lt;code&gt;F()&lt;/code&gt; does not directly support &lt;code&gt;output_field&lt;/code&gt; you will need to wrap the expression with &lt;a href=&quot;#django.db.models.ExpressionWrapper&quot;&gt;&lt;code&gt;ExpressionWrapper&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">組み合わせるフィールドのタイプが異なる場合は、返されるフィールドの種類をDjangoに通知する必要があります。以来 &lt;code&gt;F()&lt;/code&gt; を直接サポートしていない &lt;code&gt;output_field&lt;/code&gt; あなたが表現をラップする必要があります&lt;a href=&quot;#django.db.models.ExpressionWrapper&quot;&gt; &lt;code&gt;ExpressionWrapper&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="920dc62d10b6075521a8826f302508a777dbe1bd" translate="yes" xml:space="preserve">
          <source>If the flatpage has a custom template, it loads that template. Otherwise, it loads the template &lt;code&gt;flatpages/default.html&lt;/code&gt;.</source>
          <target state="translated">フラットページにカスタムテンプレートがある場合は、そのテンプレートを読み込みます。それ以外の場合は、テンプレート &lt;code&gt;flatpages/default.html&lt;/code&gt; をロードします。</target>
        </trans-unit>
        <trans-unit id="14fdac3e377218b7cc6f1824107094f6dfcc7132" translate="yes" xml:space="preserve">
          <source>If the form is bound to data, the HTML output will include that data appropriately. For example, if a field is represented by an &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt;, the data will be in the &lt;code&gt;value&lt;/code&gt; attribute. If a field is represented by an &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt;, then that HTML will include &lt;code&gt;checked&lt;/code&gt; if appropriate:</source>
          <target state="translated">フォームがデータにバインドされている場合、HTML出力にはそのデータが適切に含まれます。たとえば、フィールドが &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; で表されている場合、データは &lt;code&gt;value&lt;/code&gt; 属性に含まれます。フィールドが &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt; で表されている場合、該当する場合、そのHTMLには &lt;code&gt;checked&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="2347bbb524d905c24374a2f0eed006de697e76e6" translate="yes" xml:space="preserve">
          <source>If the form is submitted using a &lt;code&gt;POST&lt;/code&gt; request, the view will once again create a form instance and populate it with data from the request: &lt;code&gt;form =
NameForm(request.POST)&lt;/code&gt; This is called &amp;ldquo;binding data to the form&amp;rdquo; (it is now a &lt;em&gt;bound&lt;/em&gt; form).</source>
          <target state="translated">&lt;code&gt;POST&lt;/code&gt; リクエストを使用してフォームが送信されると、ビューはもう一度フォームインスタンスを作成し、リクエストからのデータを入力します &lt;code&gt;form = NameForm(request.POST)&lt;/code&gt; これは「フォームへのデータのバインド」と呼ばれます（現在は&lt;em&gt;バウンド&lt;/em&gt;形式）。</target>
        </trans-unit>
        <trans-unit id="a9757191fc0fc873cf4bf622fc86ad210c659471" translate="yes" xml:space="preserve">
          <source>If the form object passed to a template has a different name within the context, you can alias it using the &lt;code&gt;with&lt;/code&gt; argument of the &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-include&quot;&gt;&lt;code&gt;include&lt;/code&gt;&lt;/a&gt; tag:</source>
          <target state="translated">テンプレートに渡されたフォームオブジェクトの名前がコンテキスト内で異なる場合は、&lt;a href=&quot;../../ref/templates/builtins#std:templatetag-include&quot;&gt; &lt;code&gt;include&lt;/code&gt; &lt;/a&gt;タグの &lt;code&gt;with&lt;/code&gt; 引数を使用してエイリアスを作成できます。</target>
        </trans-unit>
        <trans-unit id="d04738f31fd24193f9e0dc204f8a74807516e46f" translate="yes" xml:space="preserve">
          <source>If the front page, displaying the latest blog entries, only changes when you add a new blog entry, you can compute the last modified time very quickly. You need the latest &lt;code&gt;published&lt;/code&gt; date for every entry associated with that blog. One way to do this would be:</source>
          <target state="translated">最新のブログエントリを表示しているフロントページが、新しいブログエントリを追加したときにのみ変更される場合、最終変更時刻を非常に迅速に計算できます。そのブログに関連付けられているすべてのエントリの最新の &lt;code&gt;published&lt;/code&gt; 日が必要です。これを行う1つの方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a34161a59a4f0d30905cb9967f322b4a368ff736" translate="yes" xml:space="preserve">
          <source>If the given URL is &lt;code&gt;None&lt;/code&gt;, Django will return an &lt;code&gt;HttpResponseGone&lt;/code&gt; (410).</source>
          <target state="translated">指定されたURLが &lt;code&gt;None&lt;/code&gt; の場合、Djangoは &lt;code&gt;HttpResponseGone&lt;/code&gt; （410）を返します。</target>
        </trans-unit>
        <trans-unit id="1a04dcff64887ebdbc5f16a342619a164a3cd7da" translate="yes" xml:space="preserve">
          <source>If the given URL is not found, accessing this attribute will raise a &lt;a href=&quot;../../ref/exceptions#django.urls.Resolver404&quot;&gt;&lt;code&gt;Resolver404&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">指定されたURLが見つからない場合、この属性にアクセスすると&lt;a href=&quot;../../ref/exceptions#django.urls.Resolver404&quot;&gt; &lt;code&gt;Resolver404&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="f77d4aed574a50b3060efbb746c1d73ca1c67d9a" translate="yes" xml:space="preserve">
          <source>If the input is a file path, the raster is opened from there. If the input is raw data in a dictionary, the parameters &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, and &lt;code&gt;srid&lt;/code&gt; are required. If the input is a bytes object, it will be opened using a GDAL virtual filesystem.</source>
          <target state="translated">入力がファイルパスの場合、ラスターはそこから開かれます。入力がディクショナリ内の生データの場合、パラメーター &lt;code&gt;width&lt;/code&gt; 、 &lt;code&gt;height&lt;/code&gt; 、および &lt;code&gt;srid&lt;/code&gt; が必要です。入力がバイトオブジェクトの場合、GDAL仮想ファイルシステムを使用して開かれます。</target>
        </trans-unit>
        <trans-unit id="00448ece8c00dea5fb14fcecd674a9b61b65198b" translate="yes" xml:space="preserve">
          <source>If the key is an integer, it will be interpreted as an index lookup in an array:</source>
          <target state="translated">キーが整数の場合は、配列のインデックス検索として解釈されます。</target>
        </trans-unit>
        <trans-unit id="d8a46612976fac7698199bc967b79f7c4caed3a7" translate="yes" xml:space="preserve">
          <source>If the key is an integer, it will be interpreted as an index transform in an array:</source>
          <target state="translated">キーが整数の場合は、配列のインデックス変換として解釈されます。</target>
        </trans-unit>
        <trans-unit id="48c43cb455f861107b84dacb63c723b0238df4a6" translate="yes" xml:space="preserve">
          <source>If the key you wish to query by clashes with the name of another lookup, use the &lt;a href=&quot;#std:fieldlookup-jsonfield.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; lookup instead.</source>
          <target state="translated">クエリするキーが別のルックアップの名前と衝突する場合は、代わりに&lt;a href=&quot;#std:fieldlookup-jsonfield.contains&quot;&gt; &lt;code&gt;contains&lt;/code&gt; &lt;/a&gt;ルックアップを使用してください。</target>
        </trans-unit>
        <trans-unit id="ac79a02ca9d1e219d3a805f08c37df80bb98035e" translate="yes" xml:space="preserve">
          <source>If the key you wish to query by clashes with the name of another lookup, use the &lt;a href=&quot;#std:fieldlookup-jsonfield.contains&quot;&gt;&lt;code&gt;jsonfield.contains&lt;/code&gt;&lt;/a&gt; lookup instead.</source>
          <target state="translated">別のルックアップの名前と衝突するクエリのキーが必要な場合は、代わりに&lt;a href=&quot;#std:fieldlookup-jsonfield.contains&quot;&gt; &lt;code&gt;jsonfield.contains&lt;/code&gt; &lt;/a&gt;ルックアップを使用してください。</target>
        </trans-unit>
        <trans-unit id="407cc2b75a43efab538c3808b42253f8c6a41dce" translate="yes" xml:space="preserve">
          <source>If the key you wish to query by clashes with the name of another lookup, you need to use the &lt;a href=&quot;#std:fieldlookup-hstorefield.contains&quot;&gt;&lt;code&gt;hstorefield.contains&lt;/code&gt;&lt;/a&gt; lookup instead.</source>
          <target state="translated">別のルックアップの名前と衝突するクエリのキーが必要な場合は、代わりに&lt;a href=&quot;#std:fieldlookup-hstorefield.contains&quot;&gt; &lt;code&gt;hstorefield.contains&lt;/code&gt; &lt;/a&gt;ルックアップを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="5ebd9152465f3666cabb8bf46cfee56114d51e1f" translate="yes" xml:space="preserve">
          <source>If the locale middleware is active, it provides a fallback language in case the user&amp;rsquo;s preferred language can&amp;rsquo;t be determined or is not supported by the website. It also provides the fallback translation when a translation for a given literal doesn&amp;rsquo;t exist for the user&amp;rsquo;s preferred language.</source>
          <target state="translated">ロケールミドルウェアがアクティブな場合、ユーザーの優先言語を決定できない場合や、Webサイトでサポートされていない場合に備えて、フォールバック言語が提供されます。また、特定のリテラルの翻訳がユーザーの優先言語に存在しない場合のフォールバック翻訳も提供します。</target>
        </trans-unit>
        <trans-unit id="b655b28cf85b0e9ab6424f2bae76d62937214d02" translate="yes" xml:space="preserve">
          <source>If the locale middleware isn&amp;rsquo;t in use, it decides which translation is served to all users.</source>
          <target state="translated">ロケールミドルウェアが使用されていない場合は、すべてのユーザーに提供する翻訳を決定します。</target>
        </trans-unit>
        <trans-unit id="8c593d7145885e16ebab0576dd01ea5edc8eb619" translate="yes" xml:space="preserve">
          <source>If the location is already an absolute URI, it will not be altered. Otherwise the absolute URI is built using the server variables available in this request. For example:</source>
          <target state="translated">ロケーションがすでに絶対URIである場合、それは変更されない。そうでなければ、絶対 URI はこのリクエストで利用可能なサーバ変数を使用して構築される。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="d3264db38633da128d75c5eb268e476d4a3b951a" translate="yes" xml:space="preserve">
          <source>If the log record contains a &lt;code&gt;request&lt;/code&gt; attribute, the full details of the request will be included in the email. The email subject will include the phrase &amp;ldquo;internal IP&amp;rdquo; if the client&amp;rsquo;s IP address is in the &lt;a href=&quot;../ref/settings#std:setting-INTERNAL_IPS&quot;&gt;&lt;code&gt;INTERNAL_IPS&lt;/code&gt;&lt;/a&gt; setting; if not, it will include &amp;ldquo;EXTERNAL IP&amp;rdquo;.</source>
          <target state="translated">ログレコードに &lt;code&gt;request&lt;/code&gt; 属性が含まれている場合、リクエストの完全な詳細が電子メールに含まれます。クライアントのIPアドレスが&lt;a href=&quot;../ref/settings#std:setting-INTERNAL_IPS&quot;&gt; &lt;code&gt;INTERNAL_IPS&lt;/code&gt; &lt;/a&gt;設定にある場合、電子メールの件名には「内部IP」というフレーズが含まれます。そうでない場合は、「外部IP」が含まれます。</target>
        </trans-unit>
        <trans-unit id="558c854eeaec5a7ab6be858905f8f23539e7a64a" translate="yes" xml:space="preserve">
          <source>If the log record contains stack trace information, that stack trace will be included in the email.</source>
          <target state="translated">ログレコードにスタックトレース情報が含まれている場合、そのスタックトレースはメールに含まれます。</target>
        </trans-unit>
        <trans-unit id="8d11f19d1f78b5ab369ba0f054bb8ddefd7d18dc" translate="yes" xml:space="preserve">
          <source>If the matched URL pattern contained no named groups, then the matches from the regular expression are provided as positional arguments.</source>
          <target state="translated">マッチしたURLパターンに名前付きグループが含まれていない場合、正規表現からのマッチは位置引数として提供されます。</target>
        </trans-unit>
        <trans-unit id="f27bc33c579e0ba1b671f20cb2b969680090aa80" translate="yes" xml:space="preserve">
          <source>If the middleware is enabled, the language can be set by creating a cookie with a name of &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt;&lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt;&lt;/a&gt; and a value of the language code:</source>
          <target state="translated">ミドルウェアが有効になっている場合は、&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt; &lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt; &lt;/a&gt;という名前と言語コードの値でCookieを作成することにより、言語を設定できます。</target>
        </trans-unit>
        <trans-unit id="f8b3db4161aa1f1d9ef7d96ed438167b2a06057a" translate="yes" xml:space="preserve">
          <source>If the middleware isn&amp;rsquo;t enabled, the active language may be set using &lt;a href=&quot;../../ref/utils#django.utils.translation.override&quot;&gt;&lt;code&gt;translation.override()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">ミドルウェアが有効になっていない場合、アクティブな言語は&lt;a href=&quot;../../ref/utils#django.utils.translation.override&quot;&gt; &lt;code&gt;translation.override()&lt;/code&gt; &lt;/a&gt;を使用して設定できます。</target>
        </trans-unit>
        <trans-unit id="77e0e8d1467be7a2d6e9f0484b05652c14f7c823" translate="yes" xml:space="preserve">
          <source>If the model field has &lt;code&gt;blank=True&lt;/code&gt;, then &lt;code&gt;required&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt; on the form field. Otherwise, &lt;code&gt;required=True&lt;/code&gt;.</source>
          <target state="translated">モデルフィールドがある場合は &lt;code&gt;blank=True&lt;/code&gt; 場合、 &lt;code&gt;required&lt;/code&gt; に設定されている &lt;code&gt;False&lt;/code&gt; フォームフィールドに。それ以外の場合は、 &lt;code&gt;required=True&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b6ce905c045e003d848e1a4bfebb8367398b55a5" translate="yes" xml:space="preserve">
          <source>If the model field has &lt;code&gt;choices&lt;/code&gt; set, then the form field&amp;rsquo;s &lt;code&gt;widget&lt;/code&gt; will be set to &lt;code&gt;Select&lt;/code&gt;, with choices coming from the model field&amp;rsquo;s &lt;code&gt;choices&lt;/code&gt;. The choices will normally include the blank choice which is selected by default. If the field is required, this forces the user to make a selection. The blank choice will not be included if the model field has &lt;code&gt;blank=False&lt;/code&gt; and an explicit &lt;code&gt;default&lt;/code&gt; value (the &lt;code&gt;default&lt;/code&gt; value will be initially selected instead).</source>
          <target state="translated">モデルフィールドに &lt;code&gt;choices&lt;/code&gt; 設定されている場合、フォームフィールドの &lt;code&gt;widget&lt;/code&gt; は &lt;code&gt;Select&lt;/code&gt; に設定され、選択肢はモデルフィールドの &lt;code&gt;choices&lt;/code&gt; から取得されます。選択肢には通常、デフォルトで選択されている空白の選択肢が含まれます。フィールドが必須の場合、これによりユーザーは選択を強制されます。モデルフィールドに &lt;code&gt;blank=False&lt;/code&gt; と明示的な &lt;code&gt;default&lt;/code&gt; がある場合、空白の選択肢は含まれません値（ &lt;code&gt;default&lt;/code&gt; 値が最初に選択されます）。</target>
        </trans-unit>
        <trans-unit id="f96a82c6715c5a715a0e01211ac8adf4e12046a4" translate="yes" xml:space="preserve">
          <source>If the model&amp;rsquo;s primary key is an &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; it does not retrieve and set the primary key attribute, as &lt;code&gt;save()&lt;/code&gt; does, unless the database backend supports it (currently PostgreSQL).</source>
          <target state="translated">モデルの主キーが&lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt;である場合、データベースのバックエンドでサポートされていない限り（現在のPostgreSQL）、 &lt;code&gt;save()&lt;/code&gt; のように主キー属性を取得および設定しません。</target>
        </trans-unit>
        <trans-unit id="9d4c86c05a2b9809fc32d1cacacc1d67cbcfb128" translate="yes" xml:space="preserve">
          <source>If the model&amp;rsquo;s primary key is an &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt;, the primary key attribute can only be retrieved on certain databases (currently PostgreSQL and MariaDB 10.5+). On other databases, it will not be set.</source>
          <target state="translated">モデルの主キーが&lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; の&lt;/a&gt;場合、主キー属性は特定のデータベース（現在はPostgreSQLおよびMariaDB 10.5以降）でのみ取得できます。他のデータベースでは設定されません。</target>
        </trans-unit>
        <trans-unit id="b759c75b1b279d612802ffa84e3c983524d1b418" translate="yes" xml:space="preserve">
          <source>If the named fixture has a file extension, only fixtures of that type will be loaded. For example:</source>
          <target state="translated">名前のついたフィクスチャがファイル拡張子を持っている場合、そのタイプのフィクスチャのみがロードされます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="362d07b2752f99df71674036aec9a530c5efa750" translate="yes" xml:space="preserve">
          <source>If the named key does not exist, &lt;code&gt;InvalidCacheBackendError&lt;/code&gt; will be raised.</source>
          <target state="translated">名前付きキーが存在しない場合、 &lt;code&gt;InvalidCacheBackendError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="a668f34f8121048f3d4b44ccf50ee64fbbfdbd16" translate="yes" xml:space="preserve">
          <source>If the normal base manager class (&lt;a href=&quot;#django.db.models.Manager&quot;&gt;&lt;code&gt;django.db.models.Manager&lt;/code&gt;&lt;/a&gt;) isn&amp;rsquo;t appropriate for your circumstances, you can tell Django which class to use by setting &lt;a href=&quot;../../ref/models/options#django.db.models.Options.base_manager_name&quot;&gt;&lt;code&gt;Meta.base_manager_name&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通常のベースマネージャークラス（&lt;a href=&quot;#django.db.models.Manager&quot;&gt; &lt;code&gt;django.db.models.Manager&lt;/code&gt; &lt;/a&gt;）が状況に&lt;a href=&quot;../../ref/models/options#django.db.models.Options.base_manager_name&quot;&gt; &lt;code&gt;Meta.base_manager_name&lt;/code&gt; &lt;/a&gt;ない場合は、Meta.base_manager_nameを設定することにより、使用するクラスをDjangoに指示できます。</target>
        </trans-unit>
        <trans-unit id="826ea8b39c2adb284a994b3ac295d22a4f3c7746" translate="yes" xml:space="preserve">
          <source>If the number of items in the initial data exceeds &lt;code&gt;max_num&lt;/code&gt;, all initial data forms will be displayed regardless of the value of &lt;code&gt;max_num&lt;/code&gt; and no extra forms will be displayed. For example, if &lt;code&gt;extra=3&lt;/code&gt; and &lt;code&gt;max_num=1&lt;/code&gt; and the formset is initialized with two initial items, two forms with the initial data will be displayed.</source>
          <target state="translated">初期データの項目数を超えた場合は &lt;code&gt;max_num&lt;/code&gt; 、すべての初期データの形式は、の値に関係なく表示されます &lt;code&gt;max_num&lt;/code&gt; と余分なフォームは表示されません。たとえば、 &lt;code&gt;extra=3&lt;/code&gt; および &lt;code&gt;max_num=1&lt;/code&gt; で、フォームセットが2つの初期アイテムで初期化されている場合、初期データを持つ2つのフォームが表示されます。</target>
        </trans-unit>
        <trans-unit id="9a54427017bdff00314afd5156803ed55090ab15" translate="yes" xml:space="preserve">
          <source>If the number of items in the input is different from the target pixel block, the &lt;code&gt;shape&lt;/code&gt; parameter must be specified. The shape is a tuple that specifies the width and height of the input data in pixels. The data is then replicated to update the pixel values of the selected block. This is useful to fill an entire band with a single value, for instance.</source>
          <target state="translated">入力のアイテム数がターゲットピクセルブロックと異なる場合は、 &lt;code&gt;shape&lt;/code&gt; パラメーターを指定する必要があります。形状は、入力データの幅と高さをピクセル単位で指定するタプルです。次に、データが複製され、選択されたブロックのピクセル値が更新されます。これは、たとえば、バンド全体を単一の値で埋めるために役立ちます。</target>
        </trans-unit>
        <trans-unit id="a6a6749b0e99cb6050db9cf3716874b3e4ced2ec" translate="yes" xml:space="preserve">
          <source>If the object doesn&amp;rsquo;t exist in the cache, &lt;code&gt;cache.get()&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">オブジェクトがキャッシュに存在しない場合、 &lt;code&gt;cache.get()&lt;/code&gt; は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="646d736dabdd25c732e89d37d9d4201115c381b3" translate="yes" xml:space="preserve">
          <source>If the object&amp;rsquo;s primary key attribute defines a &lt;a href=&quot;fields#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt; then Django executes an &lt;code&gt;UPDATE&lt;/code&gt; if it is an existing model instance and primary key is set to a value that exists in the database. Otherwise, Django executes an &lt;code&gt;INSERT&lt;/code&gt;.</source>
          <target state="translated">オブジェクトの主キー属性が&lt;a href=&quot;fields#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;定義している場合、それが既存のモデルインスタンスであり、主キーがデータベースに存在する値に設定されている場合、Djangoは &lt;code&gt;UPDATE&lt;/code&gt; を実行します。それ以外の場合、Djangoは &lt;code&gt;INSERT&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="c671ef226635a52b529ee6c4d9e1022741a8176d" translate="yes" xml:space="preserve">
          <source>If the object&amp;rsquo;s primary key attribute is &lt;em&gt;not&lt;/em&gt; set or if the &lt;code&gt;UPDATE&lt;/code&gt; didn&amp;rsquo;t update anything (e.g. if primary key is set to a value that doesn&amp;rsquo;t exist in the database), Django executes an &lt;code&gt;INSERT&lt;/code&gt;.</source>
          <target state="translated">オブジェクトの主キー属性がされている場合&lt;em&gt;ではない&lt;/em&gt;設定または場合 &lt;code&gt;UPDATE&lt;/code&gt; は何も更新されませんでした（主キーがデータベースに存在しない値に設定されている場合など）、Djangoは実行します &lt;code&gt;INSERT&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="6e28fb5ae884b5520d6c8a7cdb6b70dbd48ca7eb" translate="yes" xml:space="preserve">
          <source>If the object&amp;rsquo;s primary key attribute is set to a value that evaluates to &lt;code&gt;True&lt;/code&gt; (i.e., a value other than &lt;code&gt;None&lt;/code&gt; or the empty string), Django executes an &lt;code&gt;UPDATE&lt;/code&gt;.</source>
          <target state="translated">オブジェクトの主キー属性が &lt;code&gt;True&lt;/code&gt; と評価される値（つまり、 &lt;code&gt;None&lt;/code&gt; または空の文字列以外の値）に設定されている場合、Djangoは &lt;code&gt;UPDATE&lt;/code&gt; を実行しますます。</target>
        </trans-unit>
        <trans-unit id="34a7e5104e15b8b6de4d5070431c0318f28a763a" translate="yes" xml:space="preserve">
          <source>If the old &lt;code&gt;number_sold&lt;/code&gt; value retrieved from the database was 10, then the value of 11 will be written back to the database.</source>
          <target state="translated">古い &lt;code&gt;number_sold&lt;/code&gt; の場合データベースから取得され値が10の場合、値11がデータベースに書き戻されます。</target>
        </trans-unit>
        <trans-unit id="aca412a3a96d6dc532c6fed74ff3abb6bb8b6222" translate="yes" xml:space="preserve">
          <source>If the optional destination is provided, Django will use that existing directory as the project directory, and create &lt;code&gt;manage.py&lt;/code&gt; and the project package within it. Use &amp;lsquo;.&amp;rsquo; to denote the current working directory.</source>
          <target state="translated">オプションの宛先が指定されている場合、Djangoはその既存のディレクトリをプロジェクトディレクトリとして使用し、その中に &lt;code&gt;manage.py&lt;/code&gt; とプロジェクトパッケージを作成します。使用する '。' 現在の作業ディレクトリを示します。</target>
        </trans-unit>
        <trans-unit id="96bd866396bdc1707e3fb218d60c9174cbfa1187" translate="yes" xml:space="preserve">
          <source>If the optional destination is provided, Django will use that existing directory rather than creating a new one. You can use &amp;lsquo;.&amp;rsquo; to denote the current working directory.</source>
          <target state="translated">オプションの宛先が指定されている場合、Djangoは新しいディレクトリを作成するのではなく、既存のディレクトリを使用します。「。」を使用できます。現在の作業ディレクトリを示します。</target>
        </trans-unit>
        <trans-unit id="d65b4b8040f37069c8c493e01d172fe82c59186d" translate="yes" xml:space="preserve">
          <source>If the page is cacheable, but you still want the permission check to be performed, you can pass a &lt;code&gt;cacheable=True&lt;/code&gt; argument to &lt;code&gt;AdminSite.admin_view()&lt;/code&gt;:</source>
          <target state="translated">ページがキャッシュ可能であるが、権限チェックを実行したい場合は、 &lt;code&gt;AdminSite.admin_view()&lt;/code&gt; &lt;code&gt;cacheable=True&lt;/code&gt; 引数をAdminSite.admin_view（）に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="2d63af43bcd959831a177ff5a58c265ebe73ad08" translate="yes" xml:space="preserve">
          <source>If the page isn&amp;rsquo;t a number, it returns the first page. If the page number is negative or greater than the number of pages, it returns the last page.</source>
          <target state="translated">ページが数値でない場合は、最初のページを返します。ページ番号が負の場合、またはページ数より大きい場合は、最後のページを返します。</target>
        </trans-unit>
        <trans-unit id="449c71074274cb7cb8ca111a6688e519d349913f" translate="yes" xml:space="preserve">
          <source>If the parent has an ordering and you don&amp;rsquo;t want the child to have any natural ordering, you can explicitly disable it:</source>
          <target state="translated">親に順序があり、子に自然な順序を持たせたくない場合は、明示的に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="7e8326d7c2e2af22b7076e60b8fae585d509c641" translate="yes" xml:space="preserve">
          <source>If the paths and converters syntax isn&amp;rsquo;t sufficient for defining your URL patterns, you can also use regular expressions. To do so, use &lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt;&lt;code&gt;re_path()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パスとコンバーターの構文がURLパターンを定義するのに十分でない場合は、正規表現を使用することもできます。これを行うには、使用&lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt; &lt;code&gt;re_path()&lt;/code&gt; &lt;/a&gt;の代わりに、&lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt; &lt;code&gt;path()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8ba3b655a98f41927c3df59507ec695765575a46" translate="yes" xml:space="preserve">
          <source>If the provided namespace doesn&amp;rsquo;t match an &lt;a href=&quot;#term-application-namespace&quot;&gt;application namespace&lt;/a&gt; in step 1, Django will attempt a direct lookup of the namespace as an &lt;a href=&quot;#term-instance-namespace&quot;&gt;instance namespace&lt;/a&gt;.</source>
          <target state="translated">提供された名前&lt;a href=&quot;#term-application-namespace&quot;&gt;空間&lt;/a&gt;がステップ1のアプリケーション名前空間と一致しない場合、Djangoは名前空間を&lt;a href=&quot;#term-instance-namespace&quot;&gt;インスタンス名前&lt;/a&gt;空間として直接検索しようとします。</target>
        </trans-unit>
        <trans-unit id="e61e6192fb272635702649e3754a886729bd48dc" translate="yes" xml:space="preserve">
          <source>If the related object is deleted, the &lt;code&gt;content_type&lt;/code&gt; and &lt;code&gt;object_id&lt;/code&gt; fields remain set to their original values and the &lt;code&gt;GenericForeignKey&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">関連オブジェクトが削除された場合、 &lt;code&gt;content_type&lt;/code&gt; および &lt;code&gt;object_id&lt;/code&gt; フィールドは元の値に設定されたままで、 &lt;code&gt;GenericForeignKey&lt;/code&gt; は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ffcc219aa1c4e4ac018419462ed9e9a642409200" translate="yes" xml:space="preserve">
          <source>If the rendered page used multiple templates, then &lt;code&gt;context&lt;/code&gt; will be a list of &lt;code&gt;Context&lt;/code&gt; objects, in the order in which they were rendered.</source>
          <target state="translated">レンダリングされたページは、複数のテンプレートを使用した場合、 &lt;code&gt;context&lt;/code&gt; のリストになります &lt;code&gt;Context&lt;/code&gt; それらがレンダリングされた順序で、オブジェクト。</target>
        </trans-unit>
        <trans-unit id="aa69dd5e6ef529351a5374ba7d6e3f33a54a2e85" translate="yes" xml:space="preserve">
          <source>If the request accepts HTML content (based on its &lt;code&gt;Accept&lt;/code&gt; HTTP header), the fallback will always be performed.</source>
          <target state="translated">リクエストが（ &lt;code&gt;Accept&lt;/code&gt; HTTPヘッダーに基づいて）HTMLコンテンツを受け入れる場合、フォールバックは常に実行されます。</target>
        </trans-unit>
        <trans-unit id="7f10b33a7cd6abc8421d75725477d27d01ae4077" translate="yes" xml:space="preserve">
          <source>If the request doesn&amp;rsquo;t accept HTML, the fallback will be performed only if the &lt;code&gt;next&lt;/code&gt; parameter was set. Otherwise a 204 status code (No Content) will be returned.</source>
          <target state="translated">リクエストがHTMLを受け入れない場合、フォールバックは &lt;code&gt;next&lt;/code&gt; パラメータが設定されている場合にのみ実行されます。それ以外の場合は、204ステータスコード（コンテンツなし）が返されます。</target>
        </trans-unit>
        <trans-unit id="453aeb3c1ca5c2eb5a8bb6d078fe6dcf9b73c42d" translate="yes" xml:space="preserve">
          <source>If the response has an &lt;code&gt;ETag&lt;/code&gt; header, the ETag is made weak to comply with &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7232#section-2.1&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">応答に &lt;code&gt;ETag&lt;/code&gt; ヘッダーが含まれている場合、&lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7232＃section-2.1&lt;/strong&gt;&lt;/a&gt;に準拠するようにETagが脆弱になります。</target>
        </trans-unit>
        <trans-unit id="704a6e7c4c31475b433de2a9afeccf1e10be5b91" translate="yes" xml:space="preserve">
          <source>If the resulting value is callable, it is called with no arguments. The result of the call becomes the template value.</source>
          <target state="translated">結果の値が呼び出し可能な場合は、引数なしで呼び出されます。呼び出しの結果がテンプレート値になります。</target>
        </trans-unit>
        <trans-unit id="89fff7515bba7259d533e340af1d28df5122f23c" translate="yes" xml:space="preserve">
          <source>If the server is not running start it like so:</source>
          <target state="translated">サーバーが起動していない場合は、このように起動します。</target>
        </trans-unit>
        <trans-unit id="d395fb88fed3efa1c3c52eced6fa03546c8e9385" translate="yes" xml:space="preserve">
          <source>If the signature or value have been altered in any way, a &lt;code&gt;django.core.signing.BadSignature&lt;/code&gt; exception will be raised:</source>
          <target state="translated">署名または値が何らかの方法で変更された場合、 &lt;code&gt;django.core.signing.BadSignature&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="68d86086636afed31f5e8b83119b391c11676938" translate="yes" xml:space="preserve">
          <source>If the source and target models differ, the following fields are generated:</source>
          <target state="translated">ソースモデルとターゲットモデルが異なる場合、以下のフィールドが生成されます。</target>
        </trans-unit>
        <trans-unit id="633ef4f9d4e293110218b0b09a566215a2bdf55e" translate="yes" xml:space="preserve">
          <source>If the string contains exactly one unnamed placeholder, you can interpolate directly with the &lt;code&gt;number&lt;/code&gt; argument:</source>
          <target state="translated">文字列に名前のないプレースホルダーが1つだけ含まれている場合は、 &lt;code&gt;number&lt;/code&gt; 直接補間できます引数を使用ます。</target>
        </trans-unit>
        <trans-unit id="77f538b0c255912dbe9364dbf7280961b4996b22" translate="yes" xml:space="preserve">
          <source>If the string given is a method of the model, &lt;code&gt;ModelAdmin&lt;/code&gt; or a callable that returns True or False Django will display a pretty &amp;ldquo;on&amp;rdquo; or &amp;ldquo;off&amp;rdquo; icon if you give the method a &lt;code&gt;boolean&lt;/code&gt; attribute whose value is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">指定された文字列がモデルのメソッドである場合、TrueまたはFalseを返す &lt;code&gt;ModelAdmin&lt;/code&gt; またはcallableは、メソッドに値が &lt;code&gt;True&lt;/code&gt; の &lt;code&gt;boolean&lt;/code&gt; 属性を与えると、かなり「オン」または「オフ」のアイコンを表示します。</target>
        </trans-unit>
        <trans-unit id="d24a764d1bded8d74681dd2025af0d5bc9819ce3" translate="yes" xml:space="preserve">
          <source>If the string given is a method of the model, &lt;code&gt;ModelAdmin&lt;/code&gt; or a callable, Django will HTML-escape the output by default. To escape user input and allow your own unescaped tags, use &lt;a href=&quot;../../utils#django.utils.html.format_html&quot;&gt;&lt;code&gt;format_html()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定された文字列がモデルのメソッド、 &lt;code&gt;ModelAdmin&lt;/code&gt; 、または呼び出し可能である場合、Djangoはデフォルトで出力をHTMLエスケープします。ユーザー入力をエスケープし、エスケープされていない独自のタグを許可するには、&lt;a href=&quot;../../utils#django.utils.html.format_html&quot;&gt; &lt;code&gt;format_html()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="105660f9c8d885576c4d75b90c9c72dcdf558e17" translate="yes" xml:space="preserve">
          <source>If the table is very large and your queries mostly target a subset of rows, it may be useful to restrict an index to that subset. Specify a condition as a &lt;a href=&quot;querysets#django.db.models.Q&quot;&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/a&gt;. For example, &lt;code&gt;condition=Q(pages__gt=400)&lt;/code&gt; indexes records with more than 400 pages.</source>
          <target state="translated">テーブルが非常に大きく、クエリのほとんどが行のサブセットを対象としている場合は、インデックスをそのサブセットに制限すると便利です。条件を&lt;a href=&quot;querysets#django.db.models.Q&quot;&gt; &lt;code&gt;Q&lt;/code&gt; &lt;/a&gt;として指定します。例： &lt;code&gt;condition=Q(pages__gt=400)&lt;/code&gt; は、400ページを超えるレコードにインデックスを付けます。</target>
        </trans-unit>
        <trans-unit id="daab90a7c3bc9cf977eae52e7797b86c2df0f84b" translate="yes" xml:space="preserve">
          <source>If the template has already been rendered, the callback will be invoked immediately.</source>
          <target state="translated">テンプレートが既にレンダリングされている場合は、コールバックが直ちに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="335267b2f6f5eff3146781e1f8c7c684e000fea5" translate="yes" xml:space="preserve">
          <source>If the template is instantiated directly rather than through a template loader, this is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">テンプレートがテンプレートローダーではなく直接インスタンス化される場合、これは &lt;code&gt;None&lt;/code&gt; です。です。</target>
        </trans-unit>
        <trans-unit id="390b626866eea7efc24acb7e8d97d6da5d385595" translate="yes" xml:space="preserve">
          <source>If the template is instantiated directly rather than through a template loader, this is a string value of &lt;code&gt;&amp;lt;unknown_source&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">テンプレートがテンプレートローダーではなく直接インスタンス化される場合、これは &lt;code&gt;&amp;lt;unknown_source&amp;gt;&lt;/code&gt; の文字列値です。</target>
        </trans-unit>
        <trans-unit id="f97ee8abfbc218db701614dc037ecbee79227cd2" translate="yes" xml:space="preserve">
          <source>If the tests ran correctly, you should see one failure corresponding to the test method we added, with this error:</source>
          <target state="translated">テストが正しく実行された場合、追加したテストメソッドに対応する1つの失敗が、このエラーとともに表示されるはずです。</target>
        </trans-unit>
        <trans-unit id="7c48045bec5e6654cb74a0ee34255333da0859d4" translate="yes" xml:space="preserve">
          <source>If the user is logged in, execute the view normally. The view code is free to assume the user is logged in.</source>
          <target state="translated">ユーザーがログインしている場合は、ビューを正常に実行します。ビューのコードは、ユーザーがログインしていると仮定して自由に実行できます。</target>
        </trans-unit>
        <trans-unit id="d79847842ff72b1b58e1003ad0d867e4b7832fce" translate="yes" xml:space="preserve">
          <source>If the user is logged in, is a staff member (&lt;code&gt;User.is_staff=True&lt;/code&gt;), and is active (&lt;code&gt;User.is_active=True&lt;/code&gt;), execute the view normally.</source>
          <target state="translated">ユーザーがログインしていて、スタッフであり（ &lt;code&gt;User.is_staff=True&lt;/code&gt; ）、アクティブである（ &lt;code&gt;User.is_active=True&lt;/code&gt; ）場合、ビューを通常どおり実行します。</target>
        </trans-unit>
        <trans-unit id="a84a442ecadb3f93afb7b132ac6a3edff540cf78" translate="yes" xml:space="preserve">
          <source>If the user isn&amp;rsquo;t logged in, redirect to &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt;&lt;code&gt;settings.LOGIN_URL&lt;/code&gt;&lt;/a&gt;, passing the current absolute path in the query string. Example: &lt;code&gt;/accounts/login/?next=/polls/3/&lt;/code&gt;.</source>
          <target state="translated">ユーザーがログインしていない場合は、&lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt; &lt;code&gt;settings.LOGIN_URL&lt;/code&gt; &lt;/a&gt;にリダイレクトし、クエリ文字列で現在の絶対パスを渡します。例： &lt;code&gt;/accounts/login/?next=/polls/3/&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1dae3ed09b6ca9b76e7ec5b0d3c3054584ffd95a" translate="yes" xml:space="preserve">
          <source>If the value of &amp;ldquo;Date published&amp;rdquo; doesn&amp;rsquo;t match the time when you created the question in &lt;a href=&quot;tutorial01&quot;&gt;Tutorial 1&lt;/a&gt;, it probably means you forgot to set the correct value for the &lt;a href=&quot;../ref/settings#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt; setting. Change it, reload the page and check that the correct value appears.</source>
          <target state="translated">「公開日」の値が、&lt;a href=&quot;tutorial01&quot;&gt;チュートリアル1&lt;/a&gt;で質問を作成した時刻と一致しない場合は、おそらく&lt;a href=&quot;../ref/settings#std:setting-TIME_ZONE&quot;&gt; &lt;code&gt;TIME_ZONE&lt;/code&gt; に&lt;/a&gt;正しい値を設定するのを忘れていることを意味します設定に。それを変更し、ページをリロードして、正しい値が表示されることを確認してください。</target>
        </trans-unit>
        <trans-unit id="6ec7d3427ae03d948878d8a5e1e5725c95509eed" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;max_num&lt;/code&gt; is greater than the number of existing items in the initial data, up to &lt;code&gt;extra&lt;/code&gt; additional blank forms will be added to the formset, so long as the total number of forms does not exceed &lt;code&gt;max_num&lt;/code&gt;. For example, if &lt;code&gt;extra=2&lt;/code&gt; and &lt;code&gt;max_num=2&lt;/code&gt; and the formset is initialized with one &lt;code&gt;initial&lt;/code&gt; item, a form for the initial item and one blank form will be displayed.</source>
          <target state="translated">値場合 &lt;code&gt;max_num&lt;/code&gt; 初期データ内の既存の項目の数よりも大きい、最大 &lt;code&gt;extra&lt;/code&gt; 追加のブランクフォームがあればフォームの合計数を超えないように、フォームセットに追加される &lt;code&gt;max_num&lt;/code&gt; 。たとえば、 &lt;code&gt;extra=2&lt;/code&gt; および &lt;code&gt;max_num=2&lt;/code&gt; で、フォームセットが1つの &lt;code&gt;initial&lt;/code&gt; アイテムで初期化されている場合、初期アイテムのフォームと1つの空白のフォームが表示されます。</target>
        </trans-unit>
        <trans-unit id="1e45aed9df9aac2846d0bcfef80483bef9bd6ac8" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;max_num&lt;/code&gt; is greater than the number of existing related objects, up to &lt;code&gt;extra&lt;/code&gt; additional blank forms will be added to the formset, so long as the total number of forms does not exceed &lt;code&gt;max_num&lt;/code&gt;:</source>
          <target state="translated">値場合 &lt;code&gt;max_num&lt;/code&gt; 既存の関連するオブジェクトの数よりも大きい場合、最大 &lt;code&gt;extra&lt;/code&gt; 追加のブランクフォームがあればフォームの総数を超えないように、フォームセットに追加される &lt;code&gt;max_num&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dda283897bebb404083b05a40ab1c2c6cb7b8001" translate="yes" xml:space="preserve">
          <source>If the value of a field is &lt;code&gt;None&lt;/code&gt;, an empty string, or an iterable without elements, Django will display &lt;code&gt;-&lt;/code&gt; (a dash). You can override this with &lt;a href=&quot;#django.contrib.admin.AdminSite.empty_value_display&quot;&gt;&lt;code&gt;AdminSite.empty_value_display&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">フィールドの値が &lt;code&gt;None&lt;/code&gt; 、空の文字列、または要素なしのイテラブルである場合、Djangoは &lt;code&gt;-&lt;/code&gt; （ダッシュ）を表示します。これは&lt;a href=&quot;#django.contrib.admin.AdminSite.empty_value_display&quot;&gt; &lt;code&gt;AdminSite.empty_value_display&lt;/code&gt; で&lt;/a&gt;上書きできます：</target>
        </trans-unit>
        <trans-unit id="2a6040be557d2f8f3ea8136a3c4eb78cc78f35eb" translate="yes" xml:space="preserve">
          <source>If the value of a parameter is &lt;code&gt;True&lt;/code&gt; (exactly &lt;code&gt;True&lt;/code&gt;, not just a true value), only the parameter name is added to the header.</source>
          <target state="translated">パラメータの値が &lt;code&gt;True&lt;/code&gt; （正確に &lt;code&gt;True&lt;/code&gt; の場合)真の値だけではなく、）の場合、パラメータ名のみがヘッダーに追加されます。</target>
        </trans-unit>
        <trans-unit id="5382b4646a0aea7fd71c163665e2667aa6200bdb" translate="yes" xml:space="preserve">
          <source>If the variable raises an exception when called, the exception will be propagated, unless the exception has an attribute &lt;code&gt;silent_variable_failure&lt;/code&gt; whose value is &lt;code&gt;True&lt;/code&gt;. If the exception &lt;em&gt;does&lt;/em&gt; have a &lt;code&gt;silent_variable_failure&lt;/code&gt; attribute whose value is &lt;code&gt;True&lt;/code&gt;, the variable will render as the value of the engine&amp;rsquo;s &lt;code&gt;string_if_invalid&lt;/code&gt; configuration option (an empty string, by default). Example:</source>
          <target state="translated">変数が呼び出されたときに例外を発生させた場合、例外に値が &lt;code&gt;True&lt;/code&gt; の属性 &lt;code&gt;silent_variable_failure&lt;/code&gt; がない限り、例外は伝播されます。例外がいる場合&lt;em&gt;し&lt;/em&gt;てい &lt;code&gt;silent_variable_failure&lt;/code&gt; の値がある属性 &lt;code&gt;True&lt;/code&gt; 、変数には、エンジンのの値としてレンダリングされます &lt;code&gt;string_if_invalid&lt;/code&gt; 設定オプション（デフォルトでは空の文字列）。例：</target>
        </trans-unit>
        <trans-unit id="1312957734ba11c680e8012938eacebc58dee1ff" translate="yes" xml:space="preserve">
          <source>If the variable you want to hide is also a function argument (e.g. &amp;lsquo;&lt;code&gt;user&lt;/code&gt;&amp;rsquo; in the following example), and if the decorated function has multiple decorators, then make sure to place &lt;code&gt;@sensitive_variables&lt;/code&gt; at the top of the decorator chain. This way it will also hide the function argument as it gets passed through the other decorators:</source>
          <target state="translated">非表示にする変数も関数の引数である場合（例：次の例では' &lt;code&gt;user&lt;/code&gt; '）、装飾された関数に複数の装飾子がある場合は、必ず &lt;code&gt;@sensitive_variables&lt;/code&gt; を装飾子チェーンの先頭に配置してください。このように、他のデコレータを通過するときに関数の引数も非表示にします。</target>
        </trans-unit>
        <trans-unit id="d4cc6c88236085ea8a9c1a17ca851862c50d53fd" translate="yes" xml:space="preserve">
          <source>If the view is accessed from a &lt;code&gt;GET&lt;/code&gt; request, an object list is returned in the response (using the &lt;code&gt;book_list.html&lt;/code&gt; template). But if the client issues a &lt;code&gt;HEAD&lt;/code&gt; request, the response has an empty body and the &lt;code&gt;Last-Modified&lt;/code&gt; header indicates when the most recent book was published. Based on this information, the client may or may not download the full object list.</source>
          <target state="translated">ビューが &lt;code&gt;GET&lt;/code&gt; リクエストからアクセスされる場合、オブジェクトリストがレスポンスで返されます（ &lt;code&gt;book_list.html&lt;/code&gt; テンプレートを使用）。ただし、クライアントが &lt;code&gt;HEAD&lt;/code&gt; リクエストを発行した場合、レスポンスの本文は空になり、 &lt;code&gt;Last-Modified&lt;/code&gt; ヘッダーは最新の書籍がいつ発行されたかを示します。この情報に基づいて、クライアントはオブジェクトリスト全体をダウンロードする場合としない場合があります。</target>
        </trans-unit>
        <trans-unit id="525749ea81e916d0079819f9669b95d8583c62ff" translate="yes" xml:space="preserve">
          <source>If the view was called with a HTTP method it doesn&amp;rsquo;t support, this method is called instead.</source>
          <target state="translated">サポートされていないHTTPメソッドでビューが呼び出された場合は、代わりにこのメソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="fe60eb379813b7555e5b0588046322369833bdf6" translate="yes" xml:space="preserve">
          <source>If there are a few pages on your site that should be available over HTTP, and not redirected to HTTPS, you can list regular expressions to match those URLs in the &lt;a href=&quot;settings#std:setting-SECURE_REDIRECT_EXEMPT&quot;&gt;&lt;code&gt;SECURE_REDIRECT_EXEMPT&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">サイトにHTTP経由で利用可能で、HTTPSにリダイレクトされないページがいくつかある場合は、&lt;a href=&quot;settings#std:setting-SECURE_REDIRECT_EXEMPT&quot;&gt; &lt;code&gt;SECURE_REDIRECT_EXEMPT&lt;/code&gt; &lt;/a&gt;設定でそれらのURLと一致する正規表現をリストできます。</target>
        </trans-unit>
        <trans-unit id="a06f663d9a920b6dd71a5fd7a5b30d2f53179a52" translate="yes" xml:space="preserve">
          <source>If there are a large number of pizzas, this queryset performs better than:</source>
          <target state="translated">ピザの数が多い場合は、このクエリセットの方がパフォーマンスが良いです。</target>
        </trans-unit>
        <trans-unit id="58361dc72d9b28ac6f97a44739dee9fe240ef3e8" translate="yes" xml:space="preserve">
          <source>If there are any circular dependencies in the &lt;a href=&quot;../../ref/settings#std:setting-TEST_DEPENDENCIES&quot;&gt;&lt;code&gt;DEPENDENCIES&lt;/code&gt;&lt;/a&gt; definition, an &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception will be raised.</source>
          <target state="translated">に循環依存がある場合 &lt;a href=&quot;../../ref/settings#std:setting-TEST_DEPENDENCIES&quot;&gt; &lt;code&gt;DEPENDENCIES&lt;/code&gt; &lt;/a&gt;定義に、&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;ImproperlyConfigured&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="c15c84390ee375a9adefe2ee02e23a4311d73646" translate="yes" xml:space="preserve">
          <source>If there are any rings within this geometry that have not been closed, this routine will do so by adding the starting point to the end:</source>
          <target state="translated">このジオメトリ内に閉じられていないリングがある場合、このルーチンは始点を終点に追加して閉じます。</target>
        </trans-unit>
        <trans-unit id="036865303d893103f1a82fb50cc8915eb290e5a5" translate="yes" xml:space="preserve">
          <source>If there are foreseeable error conditions that may occur while running your action, you should gracefully inform the user of the problem. This means handling exceptions and using &lt;a href=&quot;index#django.contrib.admin.ModelAdmin.message_user&quot;&gt;&lt;code&gt;django.contrib.admin.ModelAdmin.message_user()&lt;/code&gt;&lt;/a&gt; to display a user friendly description of the problem in the response.</source>
          <target state="translated">アクションの実行中に発生する可能性のある予測可能なエラー条件がある場合は、問題をユーザーに適切に通知する必要があります。これは、例外を処理し、&lt;a href=&quot;index#django.contrib.admin.ModelAdmin.message_user&quot;&gt; &lt;code&gt;django.contrib.admin.ModelAdmin.message_user()&lt;/code&gt; &lt;/a&gt;を使用して、応答に問題のわかりやすい説明を表示することを意味します。</target>
        </trans-unit>
        <trans-unit id="951293bc34387f5cb268cf92d7536a2c32d0ad81" translate="yes" xml:space="preserve">
          <source>If there are nested namespaces, these steps are repeated for each part of the namespace until only the view name is unresolved. The view name will then be resolved into a URL in the namespace that has been found.</source>
          <target state="translated">ネストされた名前空間がある場合、これらの手順は、ビュー名だけが解決されなくなるまで、名前空間の各部分に対して繰り返されます。ビュー名は、見つかったネームスペースの URL に解決されます。</target>
        </trans-unit>
        <trans-unit id="018686731469965487e7387f2655be540539d013" translate="yes" xml:space="preserve">
          <source>If there are test failures, however, you&amp;rsquo;ll see full details about which tests failed:</source>
          <target state="translated">ただし、テストが失敗した場合は、失敗したテストの詳細が表示されます。</target>
        </trans-unit>
        <trans-unit id="33090b22c578cdbfc10a5466d23820158dc57c7e" translate="yes" xml:space="preserve">
          <source>If there is a current application defined, Django finds and returns the URL resolver for that instance. The current application can be specified with the &lt;code&gt;current_app&lt;/code&gt; argument to the &lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">現在のアプリケーションが定義されている場合、DjangoはそのインスタンスのURLリゾルバーを見つけて返します。現在のアプリケーションは、 &lt;code&gt;current_app&lt;/code&gt; 引数を使用して指定できます。&lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt;関数の。</target>
        </trans-unit>
        <trans-unit id="cad92f90be1997903d0e603c48aaadf781898139" translate="yes" xml:space="preserve">
          <source>If there is no &lt;code&gt;default_app_config&lt;/code&gt;, Django uses the base &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;code&gt;default_app_config&lt;/code&gt; がない場合、Djangoはベースを使用します&lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt;クラスをます。</target>
        </trans-unit>
        <trans-unit id="b29aa4916d0907d63149e49df881a7730b345911" translate="yes" xml:space="preserve">
          <source>If there is no current application, Django looks for a default application instance. The default application instance is the instance that has an &lt;a href=&quot;#term-instance-namespace&quot;&gt;instance namespace&lt;/a&gt; matching the &lt;a href=&quot;#term-application-namespace&quot;&gt;application namespace&lt;/a&gt; (in this example, an instance of &lt;code&gt;polls&lt;/code&gt; called &lt;code&gt;'polls'&lt;/code&gt;).</source>
          <target state="translated">現在のアプリケーションがない場合、Djangoはデフォルトのアプリケーションインスタンスを探します。デフォルトのアプリケーションインスタンスは、&lt;a href=&quot;#term-application-namespace&quot;&gt;アプリケーションの名前&lt;/a&gt;&lt;a href=&quot;#term-instance-namespace&quot;&gt;空間と&lt;/a&gt;一致するインスタンス名前空間を持つインスタンスです（この例では、 &lt;code&gt;polls&lt;/code&gt; インスタンス） &lt;code&gt;'polls'&lt;/code&gt; と呼ばれる）。</target>
        </trans-unit>
        <trans-unit id="3196de7f2aa2fe23e2168314d2dfd5664d611802" translate="yes" xml:space="preserve">
          <source>If there is no current instance - say, if we were rendering a page somewhere else on the site - &lt;code&gt;'polls:index'&lt;/code&gt; will resolve to the last registered instance of &lt;code&gt;polls&lt;/code&gt;. Since there is no default instance (instance namespace of &lt;code&gt;'polls'&lt;/code&gt;), the last instance of &lt;code&gt;polls&lt;/code&gt; that is registered will be used. This would be &lt;code&gt;'publisher-polls'&lt;/code&gt; since it&amp;rsquo;s declared last in the &lt;code&gt;urlpatterns&lt;/code&gt;.</source>
          <target state="translated">現在のインスタンスがない場合、たとえば、サイトの他の場所にページをレンダリングしていた場合、 &lt;code&gt;'polls:index'&lt;/code&gt; は最後に登録された &lt;code&gt;polls&lt;/code&gt; インスタンスに解決されます。デフォルトのインスタンス（ &lt;code&gt;'polls'&lt;/code&gt; のインスタンス名前空間）がないため、登録されている最後の &lt;code&gt;polls&lt;/code&gt; インスタンスが使用されます。これは &lt;code&gt;urlpatterns&lt;/code&gt; で最後に宣言されているため、 &lt;code&gt;'publisher-polls'&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="756f0b4c6a33908e3c22386f366fc70b18420a5b" translate="yes" xml:space="preserve">
          <source>If there is no default application instance, Django will pick the last deployed instance of the application, whatever its instance name may be.</source>
          <target state="translated">デフォルトのアプリケーションインスタンスがない場合、Django はそのインスタンス名が何であれ、最後にデプロイされたアプリケーションのインスタンスを選択します。</target>
        </trans-unit>
        <trans-unit id="a6bc41190ec33fed228db9ca9e2271ec22fd151d" translate="yes" xml:space="preserve">
          <source>If there is no headerlist stored, the page needs to be rebuilt, so this function returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">headerlistが保存されていない場合、ページを再構築する必要があるため、この関数は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b205d7e5d58e03b8f42ec69b13b892b65de8d30c" translate="yes" xml:space="preserve">
          <source>If there were also a default instance - i.e., an instance named &lt;code&gt;'polls'&lt;/code&gt; - the only change from above would be in the case where there is no current instance (the second item in the list above). In this case &lt;code&gt;'polls:index'&lt;/code&gt; would resolve to the index page of the default instance instead of the instance declared last in &lt;code&gt;urlpatterns&lt;/code&gt;.</source>
          <target state="translated">デフォルトのインスタンス（つまり、 &lt;code&gt;'polls'&lt;/code&gt; という名前のインスタンス）もある場合、上からの唯一の変更は、現在のインスタンス（上記のリストの2番目の項目）がない場合です。この場合、 &lt;code&gt;'polls:index'&lt;/code&gt; は、 &lt;code&gt;urlpatterns&lt;/code&gt; で最後に宣言されたインスタンスではなく、デフォルトインスタンスのインデックスページに解決されます。</target>
        </trans-unit>
        <trans-unit id="1bc101bd73deeb1cf516281ef037ef748d979a37" translate="yes" xml:space="preserve">
          <source>If these aren&amp;rsquo;t enough to generate the SQL you need:</source>
          <target state="translated">これらが必要なSQLを生成するのに十分でない場合：</target>
        </trans-unit>
        <trans-unit id="5e71fd6c24627701d76d95f4ee851ac2352deca4" translate="yes" xml:space="preserve">
          <source>If these parameters already have the correct values, Django won&amp;rsquo;t set them for every new connection, which improves performance slightly. You can configure them directly in &lt;code&gt;postgresql.conf&lt;/code&gt; or more conveniently per database user with &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-alterrole.html&quot;&gt;ALTER ROLE&lt;/a&gt;.</source>
          <target state="translated">これらのパラメータがすでに正しい値を持っている場合、Djangoは新しい接続ごとにそれらを設定しないため、パフォーマンスがわずかに向上します。それらは &lt;code&gt;postgresql.conf&lt;/code&gt; で直接構成するか、&lt;a href=&quot;https://www.postgresql.org/docs/current/sql-alterrole.html&quot;&gt;ALTER ROLEを&lt;/a&gt;使用してデータベースユーザーごとにさらに便利に構成できます。</target>
        </trans-unit>
        <trans-unit id="8d05d3185d1dac94d8dadaa8fa6fec4ba26f14ae" translate="yes" xml:space="preserve">
          <source>If this app&amp;rsquo;s URLconf is included into the project&amp;rsquo;s URLconf under a path such as this:</source>
          <target state="translated">このアプリのURLconfが次のようなパスでプロジェクトのURLconfに含まれている場合：</target>
        </trans-unit>
        <trans-unit id="db3b489bf675bc83e9e833fb2c11bf0ec0e3584a" translate="yes" xml:space="preserve">
          <source>If this approach becomes too slow, you can add a &lt;code&gt;SearchVectorField&lt;/code&gt; to your model. You&amp;rsquo;ll need to keep it populated with triggers, for example, as described in the &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-features.html#TEXTSEARCH-UPDATE-TRIGGERS&quot;&gt;PostgreSQL documentation&lt;/a&gt;. You can then query the field as if it were an annotated &lt;code&gt;SearchVector&lt;/code&gt;:</source>
          <target state="translated">このアプローチが遅くなりすぎた場合は、モデルに &lt;code&gt;SearchVectorField&lt;/code&gt; を追加できます。たとえば、&lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-features.html#TEXTSEARCH-UPDATE-TRIGGERS&quot;&gt;PostgreSQLのドキュメントで&lt;/a&gt;説明されているように、トリガーを設定しておく必要があります。次に、注釈付きの &lt;code&gt;SearchVector&lt;/code&gt; であるかのようにフィールドをクエリできます。。</target>
        </trans-unit>
        <trans-unit id="a0a2e48175c412228e4e7ff2cbf177425c036e1a" translate="yes" xml:space="preserve">
          <source>If this attribute is set to &lt;code&gt;True&lt;/code&gt;, a &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt; exception is raised when the conditions are not met. When &lt;code&gt;False&lt;/code&gt; (the default), anonymous users are redirected to the login page.</source>
          <target state="translated">この属性が &lt;code&gt;True&lt;/code&gt; に設定されている場合、条件が満たされないときに&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; &lt;/a&gt;例外が発生します。とき &lt;code&gt;False&lt;/code&gt; （デフォルト）、匿名ユーザーは、ログインページにリダイレクトされます。</target>
        </trans-unit>
        <trans-unit id="ea6a57da3a6226d105def8abb17cde5efd3edbc8" translate="yes" xml:space="preserve">
          <source>If this behavior is problematic (such as when using signals to send an email whenever a model is saved), pass a unique identifier as the &lt;code&gt;dispatch_uid&lt;/code&gt; argument to identify your receiver function. This identifier will usually be a string, although any hashable object will suffice. The end result is that your receiver function will only be bound to the signal once for each unique &lt;code&gt;dispatch_uid&lt;/code&gt; value:</source>
          <target state="translated">この動作に問題がある場合（モデルを保存するときに信号を使用してメールを送信する場合など）は、 &lt;code&gt;dispatch_uid&lt;/code&gt; _uid引数として一意の識別子を渡して、レシーバー関数を識別します。この識別子は通常は文字列ですが、ハッシュ可能なオブジェクトであれば十分です。その結果、レシーバー関数は、一意の &lt;code&gt;dispatch_uid&lt;/code&gt; 値ごとに1回だけシグナルにバインドされます。</target>
        </trans-unit>
        <trans-unit id="168754e6d80f99f11f4410d20c99b6a0e1c4fca4" translate="yes" xml:space="preserve">
          <source>If this exception is raised during the execution of a management command from a command line console, it will be caught and turned into a nicely-printed error message to the appropriate output stream (i.e., stderr); as a result, raising this exception (with a sensible description of the error) is the preferred way to indicate that something has gone wrong in the execution of a command.</source>
          <target state="translated">コマンドラインコンソールから管理コマンドを実行中にこの例外が発生した場合、この例外は捕捉され、適切な出力ストリーム (すなわち stderr)にきれいに印刷されたエラーメッセージに変換されます。</target>
        </trans-unit>
        <trans-unit id="798fc22e4b1c1c4ae674a16bd8671bd98591463c" translate="yes" xml:space="preserve">
          <source>If this exception is raised during the execution of a management command from a command line console, it will be caught and turned into a nicely-printed error message to the appropriate output stream (i.e., stderr); as a result, raising this exception (with a sensible description of the error) is the preferred way to indicate that something has gone wrong in the execution of a command. It accepts the optional &lt;code&gt;returncode&lt;/code&gt; argument to customize the exit status for the management command to exit with, using &lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.exit&quot;&gt;&lt;code&gt;sys.exit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コマンドラインコンソールからの管理コマンドの実行中にこの例外が発生した場合、この例外はキャッチされ、適切な出力ストリーム（stderrなど）に適切に出力されたエラーメッセージに変換されます。結果として、この例外を（エラーの適切な説明とともに）発生させることは、コマンドの実行で問題が発生したことを示すための好ましい方法です。オプションの &lt;code&gt;returncode&lt;/code&gt; 引数を受け入れて、&lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.exit&quot;&gt; &lt;code&gt;sys.exit()&lt;/code&gt; &lt;/a&gt;を使用して、終了する管理コマンドの終了ステータスをカスタマイズします。</target>
        </trans-unit>
        <trans-unit id="5121ccc468599203cdf2f41680528f512f5238b0" translate="yes" xml:space="preserve">
          <source>If this is set to &lt;code&gt;False&lt;/code&gt;, accessing a related object that doesn&amp;rsquo;t exist will raise its &lt;code&gt;DoesNotExist&lt;/code&gt; exception.</source>
          <target state="translated">これが &lt;code&gt;False&lt;/code&gt; に設定されている場合、存在しない関連オブジェクトにアクセスすると、 &lt;code&gt;DoesNotExist&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="2d8f6dac00928c49d28b754a31e0c9229145c79e" translate="yes" xml:space="preserve">
          <source>If this is your first time using Django, you&amp;rsquo;ll have to take care of some initial setup. Namely, you&amp;rsquo;ll need to auto-generate some code that establishes a Django &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/glossary/#term-project&quot;&gt;project&lt;/a&gt; &amp;ndash; a collection of settings for an instance of Django, including database configuration, Django-specific options and application-specific settings.</source>
          <target state="translated">Djangoを初めて使用する場合は、いくつかの初期設定を行う必要があります。つまり、Django &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/glossary/#term-project&quot;&gt;プロジェクト（&lt;/a&gt;データベース構成、Django固有のオプション、アプリケーション固有の設定など、Djangoのインスタンスの設定のコレクション）を確立するコードを自動生成する必要があります。</target>
        </trans-unit>
        <trans-unit id="1154664032050539d3d00f427dd841fb2ced2f41" translate="yes" xml:space="preserve">
          <source>If this is your first time using Django, you&amp;rsquo;ll have to take care of some initial setup. Namely, you&amp;rsquo;ll need to auto-generate some code that establishes a Django &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/glossary/#term-project&quot;&gt;project&lt;/a&gt; &amp;ndash; a collection of settings for an instance of Django, including database configuration, Django-specific options and application-specific settings.</source>
          <target state="translated">Djangoを初めて使用する場合は、初期設定を行う必要があります。つまり、Django&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/glossary/#term-project&quot;&gt;プロジェクト&lt;/a&gt;を確立するコードを自動生成する必要があります。これは、データベース構成、Django固有のオプション、アプリケーション固有の設定など、Djangoのインスタンスの設定のコレクションです。</target>
        </trans-unit>
        <trans-unit id="be1b7e4acd8d0cb9dde67da29afd40808b1e50d6" translate="yes" xml:space="preserve">
          <source>If this isn&amp;rsquo;t given or is &lt;code&gt;None&lt;/code&gt;, you&amp;rsquo;ll get operating-system dependent behavior. On most platforms, temporary files will have a mode of &lt;code&gt;0o600&lt;/code&gt;, and files saved from memory will be saved using the system&amp;rsquo;s standard umask.</source>
          <target state="translated">これが指定されていないか &lt;code&gt;None&lt;/code&gt; の場合、オペレーティングシステムに依存する動作が発生します。ほとんどのプラットフォームでは、一時ファイルのモードは &lt;code&gt;0o600&lt;/code&gt; で、メモリから保存されたファイルはシステムの標準のumaskを使用して保存されます。</target>
        </trans-unit>
        <trans-unit id="f463269eb88c1b3ee3a234d7c03dfce4134a153f" translate="yes" xml:space="preserve">
          <source>If this isn&amp;rsquo;t given, Django will use &lt;a href=&quot;#django.db.models.Options.verbose_name&quot;&gt;&lt;code&gt;verbose_name&lt;/code&gt;&lt;/a&gt; + &lt;code&gt;&quot;s&quot;&lt;/code&gt;.</source>
          <target state="translated">これを指定しない場合、Djangoは&lt;a href=&quot;#django.db.models.Options.verbose_name&quot;&gt; &lt;code&gt;verbose_name&lt;/code&gt; &lt;/a&gt; + &lt;code&gt;&quot;s&quot;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="73b98905cd565580c0b7cdd5b5b3c194b7edc1e0" translate="yes" xml:space="preserve">
          <source>If this isn&amp;rsquo;t given, Django will use a munged version of the class name: &lt;code&gt;CamelCase&lt;/code&gt; becomes &lt;code&gt;camel case&lt;/code&gt;.</source>
          <target state="translated">これを指定しない場合、Djangoはクラス名のマングドバージョンを使用します： &lt;code&gt;CamelCase&lt;/code&gt; なった &lt;code&gt;camel case&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee5e3c28a977fe38b4bf893b8d5bd1cfcc581da9" translate="yes" xml:space="preserve">
          <source>If this isn&amp;rsquo;t provided, the Django admin will use the model&amp;rsquo;s default ordering.</source>
          <target state="translated">これが提供されない場合、Django管理者はモデルのデフォルトの順序を使用します。</target>
        </trans-unit>
        <trans-unit id="204cd62fbe95eddcc429e1cf499ecc20b6269794" translate="yes" xml:space="preserve">
          <source>If this last CSS definition were to be rendered, it would become the following HTML:</source>
          <target state="translated">この最後のCSS定義をレンダリングすると、以下のようなHTMLになります。</target>
        </trans-unit>
        <trans-unit id="03956128530b9f0fcadffe8423761387cbfdf376" translate="yes" xml:space="preserve">
          <source>If this looks correct, run &lt;a href=&quot;../../django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; to create this table in the database:</source>
          <target state="translated">これが正しい場合は、&lt;a href=&quot;../../django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;を実行して、データベースにこのテーブルを作成します。</target>
        </trans-unit>
        <trans-unit id="214efc0b3c62bb58b19ca86ac2cf1be69388e8d4" translate="yes" xml:space="preserve">
          <source>If this method is defined on a storage, it&amp;rsquo;s called by the &lt;a href=&quot;#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command after each run and gets passed the local storages and paths of found files as a dictionary, as well as the command line options. It yields tuples of three values: &lt;code&gt;original_path, processed_path, processed&lt;/code&gt;. The path values are strings and &lt;code&gt;processed&lt;/code&gt; is a boolean indicating whether or not the value was post-processed, or an exception if post-processing failed.</source>
          <target state="translated">このメソッドがストレージで定義されている場合、各実行後に&lt;a href=&quot;#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt;管理コマンドによって呼び出され、ローカルストレージと検出されたファイルのパス、およびコマンドラインオプションが渡されます。3つの値のタプルが生成されます： &lt;code&gt;original_path, processed_path, processed&lt;/code&gt; 。パス値は文字列であり、 &lt;code&gt;processed&lt;/code&gt; は、値が後処理されたかどうかを示すブール値、または後処理が失敗した場合の例外です。</target>
        </trans-unit>
        <trans-unit id="78f9e31a35c14f187c486666943c82fca263c677" translate="yes" xml:space="preserve">
          <source>If this option is provided, models are also created for database views.</source>
          <target state="translated">このオプションを指定すると、データベースビューのモデルも作成されます。</target>
        </trans-unit>
        <trans-unit id="d949b49e534243e5950667398078494f92cad676" translate="yes" xml:space="preserve">
          <source>If this option is provided, models are also created for partitions.</source>
          <target state="translated">このオプションを指定すると、パーティション用のモデルも作成されます。</target>
        </trans-unit>
        <trans-unit id="cf5933056c3c4a4bab36f59eaaa0e7ba423fd575" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain a variable &lt;code&gt;MEDIA_URL&lt;/code&gt;, providing the value of the &lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">このプロセッサが有効になっている場合は、すべての &lt;code&gt;RequestContext&lt;/code&gt; には変数が含まれます &lt;code&gt;MEDIA_URL&lt;/code&gt; をの価値提供、&lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; の&lt;/a&gt;設定を。</target>
        </trans-unit>
        <trans-unit id="c3f669b44318076a8ac745b45b0e2b57ced4c0dd" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain a variable &lt;code&gt;STATIC_URL&lt;/code&gt;, providing the value of the &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">このプロセッサが有効になっている場合は、すべての &lt;code&gt;RequestContext&lt;/code&gt; には変数が含まれます &lt;code&gt;STATIC_URL&lt;/code&gt; をの価値提供、&lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; の&lt;/a&gt;設定を。</target>
        </trans-unit>
        <trans-unit id="b3627ab80c4912ed55e04ec73d8095f9410c0c92" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain a variable &lt;code&gt;TIME_ZONE&lt;/code&gt;, providing the name of the currently active time zone.</source>
          <target state="translated">このプロセッサが有効な場合、すべての &lt;code&gt;RequestContext&lt;/code&gt; には変数 &lt;code&gt;TIME_ZONE&lt;/code&gt; が含まれ、現在アクティブなタイムゾーンの名前が提供されます。</target>
        </trans-unit>
        <trans-unit id="e14c9efdfe0e83e3c1193bc7da7c91988d833298" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain a variable &lt;code&gt;request&lt;/code&gt;, which is the current &lt;a href=&quot;../request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このプロセッサが有効になっている場合は、すべての &lt;code&gt;RequestContext&lt;/code&gt; には変数が含まれます &lt;code&gt;request&lt;/code&gt; 電流であり、&lt;a href=&quot;../request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; のを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dfffb710a2c53706e240b5d6768b0976050feb4c" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain these two variables &amp;ndash; but only if your &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; setting is set to &lt;code&gt;True&lt;/code&gt; and the request&amp;rsquo;s IP address (&lt;code&gt;request.META['REMOTE_ADDR']&lt;/code&gt;) is in the &lt;a href=&quot;../settings#std:setting-INTERNAL_IPS&quot;&gt;&lt;code&gt;INTERNAL_IPS&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">このプロセッサが有効になっている場合、すべての &lt;code&gt;RequestContext&lt;/code&gt; にこれらの2つの変数が含まれます。ただし、&lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;設定が &lt;code&gt;True&lt;/code&gt; に設定され、リクエストのIPアドレス（ &lt;code&gt;request.META['REMOTE_ADDR']&lt;/code&gt; ）が&lt;a href=&quot;../settings#std:setting-INTERNAL_IPS&quot;&gt; &lt;code&gt;INTERNAL_IPS&lt;/code&gt; &lt;/a&gt;設定にある場合のみ：</target>
        </trans-unit>
        <trans-unit id="5f1b3b594560029b6edef85f4752d5ee49a66bb6" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain these two variables:</source>
          <target state="translated">このプロセッサが有効になっている場合、すべての &lt;code&gt;RequestContext&lt;/code&gt; には次の2つの変数が含まれます。</target>
        </trans-unit>
        <trans-unit id="6c99cf696c7be10586d5d490d5e348ad6994d715" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain these variables:</source>
          <target state="translated">このプロセッサが有効になっている場合、すべての &lt;code&gt;RequestContext&lt;/code&gt; には次の変数が含まれます。</target>
        </trans-unit>
        <trans-unit id="74bf18d2eb713de82935d180fe41cd27d0c61d5c" translate="yes" xml:space="preserve">
          <source>If this still isn&amp;rsquo;t a good match, you can manually set the name of the context variable. The &lt;code&gt;context_object_name&lt;/code&gt; attribute on a generic view specifies the context variable to use:</source>
          <target state="translated">これでもうまく一致しない場合は、コンテキスト変数の名前を手動で設定できます。汎用ビューの &lt;code&gt;context_object_name&lt;/code&gt; 属性は、使用するコンテキスト変数を指定します。</target>
        </trans-unit>
        <trans-unit id="111885105b9365941fb05a9bc35108884dfcc593" translate="yes" xml:space="preserve">
          <source>If this value starts with a forward slash (&lt;code&gt;'/'&lt;/code&gt;) and you&amp;rsquo;re using MySQL, MySQL will connect via a Unix socket to the specified socket. For example:</source>
          <target state="translated">この値がスラッシュ（ &lt;code&gt;'/'&lt;/code&gt; ）で始まり、MySQLを使用している場合、MySQLはUnixソケットを介して指定されたソケットに接続します。例えば：</target>
        </trans-unit>
        <trans-unit id="687f9e38edf81cd2d25145c7b1294f723a108558" translate="yes" xml:space="preserve">
          <source>If this variable isn&amp;rsquo;t set, the default &lt;code&gt;asgi.py&lt;/code&gt; sets it to &lt;code&gt;mysite.settings&lt;/code&gt;, where &lt;code&gt;mysite&lt;/code&gt; is the name of your project.</source>
          <target state="translated">この変数が設定されていない場合、デフォルトの &lt;code&gt;asgi.py&lt;/code&gt; はそれを設定し &lt;code&gt;mysite.settings&lt;/code&gt; 、 &lt;code&gt;mysite&lt;/code&gt; 、プロジェクトの名前です。</target>
        </trans-unit>
        <trans-unit id="7763646c9a13213d2e42106763a322d405a3bd97" translate="yes" xml:space="preserve">
          <source>If this variable isn&amp;rsquo;t set, the default &lt;code&gt;wsgi.py&lt;/code&gt; sets it to &lt;code&gt;mysite.settings&lt;/code&gt;, where &lt;code&gt;mysite&lt;/code&gt; is the name of your project. That&amp;rsquo;s how &lt;a href=&quot;../../../ref/django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; discovers the default settings file by default.</source>
          <target state="translated">この変数が設定されていない場合、デフォルトの &lt;code&gt;wsgi.py&lt;/code&gt; はそれを設定し &lt;code&gt;mysite.settings&lt;/code&gt; 、 &lt;code&gt;mysite&lt;/code&gt; 、プロジェクトの名前です。これが、&lt;a href=&quot;../../../ref/django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt;がデフォルトでデフォルト設定ファイルを検出する方法です。</target>
        </trans-unit>
        <trans-unit id="f5989aedec02f4ad2eba63dbf7a594f3d1537d24" translate="yes" xml:space="preserve">
          <source>If those conditions are met, Django will email the users listed in the &lt;a href=&quot;../ref/settings#std:setting-MANAGERS&quot;&gt;&lt;code&gt;MANAGERS&lt;/code&gt;&lt;/a&gt; setting whenever your code raises a 404 and the request has a referer. It doesn&amp;rsquo;t bother to email for 404s that don&amp;rsquo;t have a referer &amp;ndash; those are usually people typing in broken URLs or broken Web bots. It also ignores 404s when the referer is equal to the requested URL, since this behavior is from broken Web bots too.</source>
          <target state="translated">これらの条件が満たされている場合、Djangoは、コードで404が発生し、リクエストにリファラーがある場合は常に、&lt;a href=&quot;../ref/settings#std:setting-MANAGERS&quot;&gt; &lt;code&gt;MANAGERS&lt;/code&gt; &lt;/a&gt;設定にリストされているユーザーにメールを送信します。リファラーのない404をメールで送信する必要はありません。これらは通常、壊れたURLまたは壊れたWebボットを入力する人々です。また、リファラーがリクエストされたURLと等しい場合、この動作は壊れたWebボットからのものであるため、404も無視します。</target>
        </trans-unit>
        <trans-unit id="a73c5cb2486718bdc78ebe8a3caef6b14a81e74a" translate="yes" xml:space="preserve">
          <source>If turning this to &lt;code&gt;True&lt;/code&gt; causes infinite redirects, it probably means your site is running behind a proxy and can&amp;rsquo;t tell which requests are secure and which are not. Your proxy likely sets a header to indicate secure requests; you can correct the problem by finding out what that header is and configuring the &lt;a href=&quot;#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt;&lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt;&lt;/a&gt; setting accordingly.</source>
          <target state="translated">これを &lt;code&gt;True&lt;/code&gt; にすると無限リダイレクトが発生する場合は、サイトがプロキシの背後で実行されており、安全なリクエストと安全でないリクエストを区別できないことを意味します。プロキシは、ヘッダーを設定して安全な要求を示す可能性があります。そのヘッダーが何であるかを見つけ、それに応じて&lt;a href=&quot;#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt; &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; &lt;/a&gt;設定を構成することで、問題を修正できます。</target>
        </trans-unit>
        <trans-unit id="6481e6950ed002a13f7a54255de0e49329f79ddf" translate="yes" xml:space="preserve">
          <source>If two Python threads execute the code in the first example above, one thread could retrieve, increment, and save a field&amp;rsquo;s value after the other has retrieved it from the database. The value that the second thread saves will be based on the original value; the work of the first thread will be lost.</source>
          <target state="translated">2つのPythonスレッドが上記の最初の例のコードを実行する場合、一方のスレッドがデータベースからフィールドの値を取得した後、一方のスレッドがフィールドの値を取得、増分、および保存できます。2番目のスレッドが保存する値は、元の値に基づいています。最初のスレッドの作業は失われます。</target>
        </trans-unit>
        <trans-unit id="5e64204f76516c2278e4b64d558fec189d6cf43f" translate="yes" xml:space="preserve">
          <source>If unspecified, the default &lt;code&gt;timeout&lt;/code&gt; will be the one provided by &lt;a href=&quot;https://docs.python.org/3/library/socket.html#socket.getdefaulttimeout&quot;&gt;&lt;code&gt;socket.getdefaulttimeout()&lt;/code&gt;&lt;/a&gt;, which defaults to &lt;code&gt;None&lt;/code&gt; (no timeout).</source>
          <target state="translated">指定しない場合、デフォルトの &lt;code&gt;timeout&lt;/code&gt; は&lt;a href=&quot;https://docs.python.org/3/library/socket.html#socket.getdefaulttimeout&quot;&gt; &lt;code&gt;socket.getdefaulttimeout()&lt;/code&gt; &lt;/a&gt;によって提供されるタイムアウトになります。デフォルトは &lt;code&gt;None&lt;/code&gt; （タイムアウトなし）です。</target>
        </trans-unit>
        <trans-unit id="60e13a5dc7aa8445a725b41528f2e1f91c6d315c" translate="yes" xml:space="preserve">
          <source>If updating a large number of columns in a large number of rows, the SQL generated can be very large. Avoid this by specifying a suitable &lt;code&gt;batch_size&lt;/code&gt;.</source>
          <target state="translated">多数の行で多数の列を更新する場合、生成されるSQLは非常に大きくなる可能性があります。適切な &lt;code&gt;batch_size&lt;/code&gt; を指定して、これを回避してください。</target>
        </trans-unit>
        <trans-unit id="9de1d7c145e3bfbd1da3b57f9e69810dee560a48" translate="yes" xml:space="preserve">
          <source>If used with &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt;, the &lt;code&gt;__call__()&lt;/code&gt; method will never be used; Django calls &lt;code&gt;process_request()&lt;/code&gt; and &lt;code&gt;process_response()&lt;/code&gt; directly.</source>
          <target state="translated">&lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt; と共に使用すると、 &lt;code&gt;__call__()&lt;/code&gt; メソッドは使用されません。Djangoは &lt;code&gt;process_request()&lt;/code&gt; と &lt;code&gt;process_response()&lt;/code&gt; を直接呼び出します。</target>
        </trans-unit>
        <trans-unit id="e3318f562b136e880f0fe72349d17ab0bbe42fba" translate="yes" xml:space="preserve">
          <source>If used with a numeric integer argument, &lt;code&gt;floatformat&lt;/code&gt; rounds a number to that many decimal places. For example:</source>
          <target state="translated">数値整数引数とともに使用した場合、 &lt;code&gt;floatformat&lt;/code&gt; は数値をその小数点以下の桁数に丸めます。例えば：</target>
        </trans-unit>
        <trans-unit id="b36b4a6b3834f5db697a34dce30549b123363b8c" translate="yes" xml:space="preserve">
          <source>If using a binary package of GEOS (e.g., on Ubuntu), you may need to &lt;a href=&quot;index#binutils&quot;&gt;Install binutils&lt;/a&gt;.</source>
          <target state="translated">GEOSのバイナリパッケージを使用している場合（Ubuntuなど）、&lt;a href=&quot;index#binutils&quot;&gt;binutils&lt;/a&gt;をインストールする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="77e5c9f7d7653d5f758d827f9f9d8be93ef993b1" translate="yes" xml:space="preserve">
          <source>If using an SQLite in-memory database with SQLite, &lt;a href=&quot;https://www.sqlite.org/sharedcache.html&quot;&gt;shared cache&lt;/a&gt; is enabled, so you can write tests with ability to share the database between threads.</source>
          <target state="translated">SQLiteでSQLiteインメモリデータベースを使用する場合、&lt;a href=&quot;https://www.sqlite.org/sharedcache.html&quot;&gt;共有キャッシュ&lt;/a&gt;が有効になっているため、スレッド間でデータベースを共有する機能を備えたテストを作成できます。</target>
        </trans-unit>
        <trans-unit id="a39821e0ea752a2e9e4388107ced28792f496f36" translate="yes" xml:space="preserve">
          <source>If using database-backed sessions, regularly &lt;a href=&quot;../../topics/http/sessions#clearing-the-session-store&quot;&gt;clear old sessions&lt;/a&gt; to avoid storing unnecessary data.</source>
          <target state="translated">データベースに基づくセッションを使用する場合は、不要なデータが保存されないように、定期的に&lt;a href=&quot;../../topics/http/sessions#clearing-the-session-store&quot;&gt;古いセッション&lt;/a&gt;をクリアしてください。</target>
        </trans-unit>
        <trans-unit id="71eff97e42ab86eb5151370fe1181333a128682b" translate="yes" xml:space="preserve">
          <source>If value evaluates to &lt;code&gt;False&lt;/code&gt;, uses the given default. Otherwise, uses the value.</source>
          <target state="translated">値が &lt;code&gt;False&lt;/code&gt; に評価される場合、指定されたデフォルトを使用します。それ以外の場合は、値を使用します。</target>
        </trans-unit>
        <trans-unit id="f611765f2d320e927111295d6c9695093483fb31" translate="yes" xml:space="preserve">
          <source>If we arrive at this view with a &lt;code&gt;GET&lt;/code&gt; request, it will create an empty form instance and place it in the template context to be rendered. This is what we can expect to happen the first time we visit the URL.</source>
          <target state="translated">&lt;code&gt;GET&lt;/code&gt; リクエストでこのビューに到達すると、空のフォームインスタンスが作成され、レンダリングされるテンプレートコンテキストに配置されます。これは、URLに初めてアクセスしたときに発生することが予想されることです。</target>
        </trans-unit>
        <trans-unit id="0a8a851d0367ffe29323b90c503c215f8aa8f5d9" translate="yes" xml:space="preserve">
          <source>If we connected a handler like this:</source>
          <target state="translated">こんな感じでハンドラを繋げたら</target>
        </trans-unit>
        <trans-unit id="406383748435b9b983e4fe62090c8c234445f370" translate="yes" xml:space="preserve">
          <source>If we delete a &lt;code&gt;Publication&lt;/code&gt;, its &lt;code&gt;Articles&lt;/code&gt; won&amp;rsquo;t be able to access it:</source>
          <target state="translated">&lt;code&gt;Publication&lt;/code&gt; を削除すると、その &lt;code&gt;Articles&lt;/code&gt; はそれにアクセスできなくなります。</target>
        </trans-unit>
        <trans-unit id="3d341e594a575849b6069ae86fb05e49f3983a60" translate="yes" xml:space="preserve">
          <source>If we delete an &lt;code&gt;Article&lt;/code&gt;, its &lt;code&gt;Publications&lt;/code&gt; won&amp;rsquo;t be able to access it:</source>
          <target state="translated">&lt;code&gt;Article&lt;/code&gt; を削除すると、その &lt;code&gt;Publications&lt;/code&gt; はそれにアクセスできなくなります。</target>
        </trans-unit>
        <trans-unit id="c2e7f5f3fb7b52337975a488b9c8164eab92ebfb" translate="yes" xml:space="preserve">
          <source>If we had neglected to pass in the current &lt;code&gt;context.autoescape&lt;/code&gt; value to our new &lt;code&gt;Context&lt;/code&gt; in this example, the results would have &lt;em&gt;always&lt;/em&gt; been automatically escaped, which may not be the desired behavior if the template tag is used inside a &lt;a href=&quot;../ref/templates/builtins#std:templatetag-autoescape&quot;&gt;&lt;code&gt;{% autoescape off %}&lt;/code&gt;&lt;/a&gt; block.</source>
          <target state="translated">この例で、現在の &lt;code&gt;context.autoescape&lt;/code&gt; 値を新しい &lt;code&gt;Context&lt;/code&gt; に渡すことを怠っていた場合、結果は&lt;em&gt;常に&lt;/em&gt;自動的にエスケープされます。テンプレートタグが&lt;a href=&quot;../ref/templates/builtins#std:templatetag-autoescape&quot;&gt; &lt;code&gt;{% autoescape off %}&lt;/code&gt; &lt;/a&gt;内で使用されている場合、これは望ましい動作ではない可能性があります。}ブロック。</target>
        </trans-unit>
        <trans-unit id="ffb90e72c570b70af963c6da1122122d334c0352" translate="yes" xml:space="preserve">
          <source>If we want to write a class-based view that responds only to &lt;code&gt;POST&lt;/code&gt;, we&amp;rsquo;ll subclass &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; and write a &lt;code&gt;post()&lt;/code&gt; method in the subclass. However if we want our processing to work on a particular object, identified from the URL, we&amp;rsquo;ll want the functionality provided by &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;POST&lt;/code&gt; にのみ応答するクラスベースのビューを作成する場合は、&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;をサブクラス化し、サブクラスで &lt;code&gt;post()&lt;/code&gt; メソッドを作成します。ただし、URLで識別される特定のオブジェクトで処理を実行する場合は、&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; が&lt;/a&gt;提供する機能が必要です。</target>
        </trans-unit>
        <trans-unit id="f9670d8eca365c2fbb8bf2e17c3f35929328311b" translate="yes" xml:space="preserve">
          <source>If we wanted to add a tool to the change list view for only a specific model named &amp;lsquo;Page&amp;rsquo;, we would copy that same file to the &lt;code&gt;templates/admin/my_app/page&lt;/code&gt; directory of our project.</source>
          <target state="translated">「ページ」という名前の特定のモデルのみの変更リストビューにツールを追加する場合は、同じファイルをプロジェクトの &lt;code&gt;templates/admin/my_app/page&lt;/code&gt; ディレクトリにコピーします。</target>
        </trans-unit>
        <trans-unit id="6bd7027efcdd2746450164bec58ed7a7c2bb113c" translate="yes" xml:space="preserve">
          <source>If we wanted to change our previous query to get the discount based on how long the &lt;code&gt;Client&lt;/code&gt; has been with us, we could do so using lookups:</source>
          <target state="translated">以前のクエリを変更して、 &lt;code&gt;Client&lt;/code&gt; 滞在時間に基づいて割引を取得したい場合は、ルックアップを使用して行うことができます。</target>
        </trans-unit>
        <trans-unit id="424f525a9d69de5a035589bbd0105ee23eb2ed5c" translate="yes" xml:space="preserve">
          <source>If you &lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; a &lt;code&gt;QuerySet&lt;/code&gt;, this will force all the results to be loaded into memory prior to pickling. Pickling is usually used as a precursor to caching and when the cached queryset is reloaded, you want the results to already be present and ready for use (reading from the database can take some time, defeating the purpose of caching). This means that when you unpickle a &lt;code&gt;QuerySet&lt;/code&gt;, it contains the results at the moment it was pickled, rather than the results that are currently in the database.</source>
          <target state="translated">&lt;code&gt;QuerySet&lt;/code&gt; を&lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;する場合、ピクルする前にすべての結果がメモリに強制的にロードされます。通常、酸洗いはキャッシングの前段階として使用され、キャッシュされたクエリセットがリロードされると、結果がすでに存在し、使用可能な状態になっている必要があります（データベースからの読み取りには時間がかかり、キャッシングの目的が無効になる場合があります）。あなたがunpickle化するとき、この手段 &lt;code&gt;QuerySet&lt;/code&gt; 、それが現時点での結果が含まれていますが、それはむしろ、データベースに現在ある結果より、漬けました。</target>
        </trans-unit>
        <trans-unit id="50f8dcfebb421839cfac4619ff97003f8219dfe8" translate="yes" xml:space="preserve">
          <source>If you accidentally try to call a part of Django that is still synchronous-only from an async view, you will trigger Django&amp;rsquo;s &lt;a href=&quot;#async-safety&quot;&gt;asynchronous safety protection&lt;/a&gt; to protect your data from corruption.</source>
          <target state="translated">非同期ビューからのみ同期しているDjangoの一部を誤って呼び出そうとした場合、データを破損から&lt;a href=&quot;#async-safety&quot;&gt;保護&lt;/a&gt;するためにDjangoの非同期安全保護をトリガーします。</target>
        </trans-unit>
        <trans-unit id="c976c50b35c8e39b12378828f30c9e059d209f63" translate="yes" xml:space="preserve">
          <source>If you activate &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt;&lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_HTTPONLY&quot;&gt;&lt;code&gt;CSRF_COOKIE_HTTPONLY&lt;/code&gt;&lt;/a&gt;, you must include the CSRF token in your HTML and read the token from the DOM with JavaScript:</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt; &lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;settings#std:setting-CSRF_COOKIE_HTTPONLY&quot;&gt; &lt;code&gt;CSRF_COOKIE_HTTPONLY&lt;/code&gt; &lt;/a&gt;をアクティブにする場合、HTMLにCSRFトークンを含め、JavaScriptを使用してDOMからトークンを読み取る必要があります。</target>
        </trans-unit>
        <trans-unit id="ab46e0097159c03d8a60d09a7d1250eee53c6b4a" translate="yes" xml:space="preserve">
          <source>If you add a new keyword argument, you need to write code in &lt;code&gt;deconstruct()&lt;/code&gt; that puts its value into &lt;code&gt;kwargs&lt;/code&gt; yourself. You should also omit the value from &lt;code&gt;kwargs&lt;/code&gt; when it isn&amp;rsquo;t necessary to reconstruct the state of the field, such as when the default value is being used:</source>
          <target state="translated">新しいキーワード引数を追加する場合は、その値を自分で &lt;code&gt;kwargs&lt;/code&gt; に入れるコードを &lt;code&gt;deconstruct()&lt;/code&gt; で記述する必要があります。また、デフォルト値が使用されている場合など、フィールドの状態を再構築する必要がない場合は、 &lt;code&gt;kwargs&lt;/code&gt; から値を省略する必要があります。</target>
        </trans-unit>
        <trans-unit id="9290e813a0bf97db9d008f3c672105ad13a270f2" translate="yes" xml:space="preserve">
          <source>If you add or modify flatpages via your own code, you will likely want to check for duplicate flatpage URLs within the same site. The flatpage form used in the admin performs this validation check, and can be imported from &lt;code&gt;django.contrib.flatpages.forms.FlatpageForm&lt;/code&gt; and used in your own views.</source>
          <target state="translated">独自のコードを使用してフラットページを追加または変更する場合は、同じサイト内でフラットページのURLが重複していないか確認する必要があります。管理に使用されるフラットページのフォームは、この検証チェックを行い、そしてからインポートすることができ &lt;code&gt;django.contrib.flatpages.forms.FlatpageForm&lt;/code&gt; と独自のビューで使用されます。</target>
        </trans-unit>
        <trans-unit id="19279f2745faa7fa825b809dfd65333ca02e57b9" translate="yes" xml:space="preserve">
          <source>If you add the name of a callable to &lt;code&gt;fields&lt;/code&gt;, the same rule applies as with the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt;&lt;code&gt;fields&lt;/code&gt;&lt;/a&gt; option: the callable must be listed in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt;&lt;code&gt;readonly_fields&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">callableの名前を &lt;code&gt;fields&lt;/code&gt; に追加する場合、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt; &lt;code&gt;fields&lt;/code&gt; &lt;/a&gt;オプションの場合と同じルールが適用されます：callableは&lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt; &lt;code&gt;readonly_fields&lt;/code&gt; &lt;/a&gt;にリストされる必要があります。</target>
        </trans-unit>
        <trans-unit id="4828b14d37ca4d41be7823693b8a8c011f2c2552" translate="yes" xml:space="preserve">
          <source>If you aim to build a database-agnostic application, you should account for differences in database column types. For example, the date/time column type in PostgreSQL is called &lt;code&gt;timestamp&lt;/code&gt;, while the same column in MySQL is called &lt;code&gt;datetime&lt;/code&gt;. You can handle this in a &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt; method by checking the &lt;code&gt;connection.settings_dict['ENGINE']&lt;/code&gt; attribute.</source>
          <target state="translated">データベースに依存しないアプリケーションを構築する場合は、データベースの列タイプの違いを考慮する必要があります。たとえば、PostgreSQLの日付/時刻列タイプは &lt;code&gt;timestamp&lt;/code&gt; と呼ばれ、MySQLの同じ列は &lt;code&gt;datetime&lt;/code&gt; と呼ばれます。 &lt;code&gt;connection.settings_dict['ENGINE']&lt;/code&gt; 属性を確認することで、&lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt; &lt;code&gt;db_type()&lt;/code&gt; &lt;/a&gt;メソッドでこれを処理できます。</target>
        </trans-unit>
        <trans-unit id="d866003e34d19497e6a39513c19080fca9667425" translate="yes" xml:space="preserve">
          <source>If you allow for blank values, you have to allow for null values since blank values are stored as null.</source>
          <target state="translated">空白値を許容する場合は、空の値がnullとして格納されるので、null値を許容する必要があります。</target>
        </trans-unit>
        <trans-unit id="5dfbcb1590644f47fc6c2a97a5c0c0679f9f8edd" translate="yes" xml:space="preserve">
          <source>If you already have the GET arguments in URL-encoded form, you can use that encoding instead of using the data argument. For example, the previous GET request could also be posed as:</source>
          <target state="translated">すでにURLエンコードされた形でGET引数を持っている場合は、データ引数を使用する代わりにそのエンコードを使用することができます。例えば、前のGETリクエストは次のようなポーズをとることもできます。</target>
        </trans-unit>
        <trans-unit id="9f8f087d060b362f136ee6b97e34ff5646abcd8a" translate="yes" xml:space="preserve">
          <source>If you already know a few other languages and want to get up to speed with Python quickly, we recommend &lt;a href=&quot;https://diveinto.org/python3/table-of-contents.html&quot;&gt;Dive Into Python&lt;/a&gt;. If that&amp;rsquo;s not quite your style, there are many other &lt;a href=&quot;https://wiki.python.org/moin/PythonBooks&quot;&gt;books about Python&lt;/a&gt;.</source>
          <target state="translated">他のいくつかの言語をすでに知っていて、Pythonをすぐに習得したい場合は、&lt;a href=&quot;https://diveinto.org/python3/table-of-contents.html&quot;&gt;Dive Into Python&lt;/a&gt;をお勧めします。それがあなたのスタイルではないなら、&lt;a href=&quot;https://wiki.python.org/moin/PythonBooks&quot;&gt;Pythonに関する&lt;/a&gt;他の多くの本があります。</target>
        </trans-unit>
        <trans-unit id="037b16c87c42ef82ec961a3ac3d843c26b02994c" translate="yes" xml:space="preserve">
          <source>If you are &lt;em&gt;absolutely&lt;/em&gt; in dire need to run this code from an asynchronous context - for example, it is being forced on you by an external environment, and you are sure there is no chance of it being run concurrently (e.g. you are in a &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter&lt;/a&gt; notebook), then you can disable the warning with the &lt;code&gt;DJANGO_ALLOW_ASYNC_UNSAFE&lt;/code&gt; environment variable.</source>
          <target state="translated">あなたがいる場合は&lt;em&gt;、絶対に&lt;/em&gt;非同期コンテキストからこのコードを実行するために緊急に必要に-例えば、それは外部環境によってあなたに強制されている、とあなたがあることを確認し、それが同時に実行されているの見込みはありません（例えば、あなたがしている&lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter&lt;/a&gt;ノートブック）、 &lt;code&gt;DJANGO_ALLOW_ASYNC_UNSAFE&lt;/code&gt; 環境変数で警告を無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="cabfbe868e7cb75abcebb7e76b56c06e811c5257" translate="yes" xml:space="preserve">
          <source>If you are chaining filters, a filter applied after &lt;code&gt;safe&lt;/code&gt; can make the contents unsafe again. For example, the following code prints the variable as is, unescaped:</source>
          <target state="translated">フィルターをチェーンしている場合、 &lt;code&gt;safe&lt;/code&gt; 後にフィルターを適用すると、コンテンツが再び安全でなくなる可能性があります。たとえば、次のコードは変数をそのままエスケープせずに出力します。</target>
        </trans-unit>
        <trans-unit id="2655962c0a4f53510466dd490c637f462974c542" translate="yes" xml:space="preserve">
          <source>If you are connecting to the internet behind a proxy, there might be problems in running the command &lt;code&gt;py -m pip install Django&lt;/code&gt;. Set the environment variables for proxy configuration in the command prompt as follows:</source>
          <target state="translated">プロキシの背後でインターネットに接続している場合、コマンド &lt;code&gt;py -m pip install Django&lt;/code&gt; を実行すると問題が発生する可能性があります。コマンドプロンプトで、プロキシ構成の環境変数を次のように設定します。</target>
        </trans-unit>
        <trans-unit id="3f2135c10c9c1fcecec78e1b0692c6109124ccab" translate="yes" xml:space="preserve">
          <source>If you are constructing an object manually, you can assign the file object from &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt;&lt;code&gt;request.FILES&lt;/code&gt;&lt;/a&gt; to the file field in the model:</source>
          <target state="translated">オブジェクトを手動で作成している場合は、&lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt; &lt;code&gt;request.FILES&lt;/code&gt; &lt;/a&gt;のファイルオブジェクトをモデルのファイルフィールドに割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="92ab820f72ae9c99d7def5b0452724d8bd608be6" translate="yes" xml:space="preserve">
          <source>If you are creating a reusable application, it is recommended to use only the built-in &lt;a href=&quot;#message-levels&quot;&gt;message levels&lt;/a&gt; and not rely on any custom levels.</source>
          <target state="translated">再利用可能なアプリケーションを作成する場合は、組み込み&lt;a href=&quot;#message-levels&quot;&gt;メッセージレベル&lt;/a&gt;のみを使用し、カスタムレベルに依存しないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ffa521388bfefc73cf3b041673a0e7a8595c90d3" translate="yes" xml:space="preserve">
          <source>If you are deployed behind a load-balancer or reverse-proxy server and Django can&amp;rsquo;t seem to tell when a request actually is already secure, you may need to set the &lt;a href=&quot;settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt;&lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">ロードバランサーまたはリバースプロキシサーバーの背後にデプロイされており、Djangoがリクエストが実際に安全かどうかを判断できない場合は、&lt;a href=&quot;settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt; &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; &lt;/a&gt;設定を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="41e9a421371bfb5a50b98c32edd7081296c13f7c" translate="yes" xml:space="preserve">
          <source>If you are deployed behind a load-balancer or reverse-proxy server, and the &lt;code&gt;Strict-Transport-Security&lt;/code&gt; header is not being added to your responses, it may be because Django doesn&amp;rsquo;t realize that it&amp;rsquo;s on a secure connection; you may need to set the &lt;a href=&quot;settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt;&lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">ロードバランサーまたはリバースプロキシサーバーの背後にデプロイされていて、 &lt;code&gt;Strict-Transport-Security&lt;/code&gt; ヘッダーが応答に追加されていない場合は、Djangoが安全な接続上にあることを認識していない可能性があります。&lt;a href=&quot;settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt; &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; の&lt;/a&gt;設定が必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="2c691ad6ca02fef297ccdbc9e5c26db8508ebcf4" translate="yes" xml:space="preserve">
          <source>If you are developing a small project or something you don&amp;rsquo;t plan to deploy in a production environment, SQLite is generally the best option as it doesn&amp;rsquo;t require running a separate server. However, SQLite has many differences from other databases, so if you are working on something substantial, it&amp;rsquo;s recommended to develop with the same database that you plan on using in production.</source>
          <target state="translated">小規模なプロジェクトや、運用環境に展開する予定のないプロジェクトを開発している場合は、個別のサーバーを実行する必要がないため、SQLiteが一般的に最良のオプションです。ただし、SQLiteは他のデータベースと多くの違いがあるため、重要な作業を行っている場合は、本番環境で使用する予定の同じデータベースを使用して開発することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="426463c8a09b71f7c823f03996117348698ae262" translate="yes" xml:space="preserve">
          <source>If you are familiar with Python packaging and interested in learning how to turn polls into a &amp;ldquo;reusable app&amp;rdquo;, check out &lt;a href=&quot;reusable-apps&quot;&gt;Advanced tutorial: How to write reusable apps&lt;/a&gt;.</source>
          <target state="translated">Pythonのパッケージングに精通していて、投票を「再利用可能なアプリ」にする方法に興味がある場合は、&lt;a href=&quot;reusable-apps&quot;&gt;高度なチュートリアル：再利用可能なアプリを作成する方法をご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6df1a07d3d4b877dffccc3304d0749b9a9a63bcf" translate="yes" xml:space="preserve">
          <source>If you are filtering across multiple relationships and one of the intermediate models doesn&amp;rsquo;t have a value that meets the filter condition, Django will treat it as if there is an empty (all values are &lt;code&gt;NULL&lt;/code&gt;), but valid, object there. All this means is that no error will be raised. For example, in this filter:</source>
          <target state="translated">複数の関係をフィルタリングしていて、中間モデルの1つがフィルター条件を満たす値を持たない場合、Djangoはそれを空（すべての値が &lt;code&gt;NULL&lt;/code&gt; ）であるが有効なオブジェクトがあるかのように扱います。つまり、エラーが発生することはありません。たとえば、このフィルターでは：</target>
        </trans-unit>
        <trans-unit id="54d3dc0d5d9a07f09c0b925c9b0c98d70db0dd97" translate="yes" xml:space="preserve">
          <source>If you are going to need other data from the QuerySet, evaluate it immediately.</source>
          <target state="translated">QuerySetから他のデータが必要になる場合は、すぐに評価してください。</target>
        </trans-unit>
        <trans-unit id="0a6f484ecf97ba11c41c19b92638b2e691e251cf" translate="yes" xml:space="preserve">
          <source>If you are just starting with Django and using Windows, you may find &lt;a href=&quot;../howto/windows&quot;&gt;How to install Django on Windows&lt;/a&gt; useful.</source>
          <target state="translated">Djangoから始めてWindowsを使用している場合は&lt;a href=&quot;../howto/windows&quot;&gt;、WindowsにDjangoをインストールする方法が&lt;/a&gt;役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="f8022aedc2f24dbfc32c1645a06e23557556b40d" translate="yes" xml:space="preserve">
          <source>If you are looking for a more robust solution, take a look at the &lt;a href=&quot;https://pypi.org/project/bleach/&quot;&gt;bleach&lt;/a&gt; Python library.</source>
          <target state="translated">より堅牢なソリューションを探している場合は、&lt;a href=&quot;https://pypi.org/project/bleach/&quot;&gt;漂白&lt;/a&gt; Pythonライブラリをご覧ください。</target>
        </trans-unit>
        <trans-unit id="5679be2b89b6ad12b1cb13d77be5c899c643d272" translate="yes" xml:space="preserve">
          <source>If you are looking for a reference on how to submit patches, see the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/submitting-patches/&quot;&gt;Submitting patches&lt;/a&gt; documentation.</source>
          <target state="translated">パッチの提出方法に関するリファレンスを探している場合は、&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/submitting-patches/&quot;&gt;パッチ&lt;/a&gt;の提出に関するドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="49ef38e282be1a0ceabdc271e0e19b9b3902d0fd" translate="yes" xml:space="preserve">
          <source>If you are looking for a reference on how to submit patches, see the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/writing-code/submitting-patches/&quot;&gt;Submitting patches&lt;/a&gt; documentation.</source>
          <target state="translated">あなたがパッチを提出する方法についての参照を探しているなら、見&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/writing-code/submitting-patches/&quot;&gt;提出パッチの&lt;/a&gt;ドキュメントを。</target>
        </trans-unit>
        <trans-unit id="b51f6b7ffd84766e0e10e46ee09ef3d2cd522fad" translate="yes" xml:space="preserve">
          <source>If you are migrating from the Django&amp;rsquo;s built-in &lt;code&gt;cached_db&lt;/code&gt; session store to a custom one based on &lt;code&gt;cached_db&lt;/code&gt;, you should override the cache key prefix in order to prevent a namespace clash:</source>
          <target state="translated">Djangoの組み込み &lt;code&gt;cached_db&lt;/code&gt; セッションストアから &lt;code&gt;cached_db&lt;/code&gt; に基づくカスタムストアに移行する場合は、名前空間の衝突を防ぐためにキャッシュキーのプレフィックスをオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="3f20d2e0ed1b7dfe99fe7b1b15afc7ea12f08c4e" translate="yes" xml:space="preserve">
          <source>If you are mirroring an existing model or database table and don&amp;rsquo;t want all the original database table columns, use &lt;code&gt;Meta.managed=False&lt;/code&gt;. That option is normally useful for modeling database views and tables not under the control of Django.</source>
          <target state="translated">既存のモデルまたはデータベーステーブルをミラーリングしていて、元のデータベーステーブルの列をすべて必要としない場合は、 &lt;code&gt;Meta.managed=False&lt;/code&gt; を使用します。このオプションは通常、Djangoの制御下にないデータベースビューとテーブルのモデリングに役立ちます。</target>
        </trans-unit>
        <trans-unit id="2c77013a5d33bed9ff8aeb9b8d8bccb978ee3d8e" translate="yes" xml:space="preserve">
          <source>If you are not using SQLite as your database, additional settings such as &lt;a href=&quot;../ref/settings#std:setting-USER&quot;&gt;&lt;code&gt;USER&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/settings#std:setting-PASSWORD&quot;&gt;&lt;code&gt;PASSWORD&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../ref/settings#std:setting-HOST&quot;&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/a&gt; must be added. For more details, see the reference documentation for &lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">データベースとしてSQLiteを使用していない場合は、&lt;a href=&quot;../ref/settings#std:setting-USER&quot;&gt; &lt;code&gt;USER&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../ref/settings#std:setting-PASSWORD&quot;&gt; &lt;code&gt;PASSWORD&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../ref/settings#std:setting-HOST&quot;&gt; &lt;code&gt;HOST&lt;/code&gt; &lt;/a&gt;などの追加設定を追加する必要があります。詳細については、&lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;のリファレンスドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="2dff9fa6f2943dcffcb71466072c87506f22903b" translate="yes" xml:space="preserve">
          <source>If you are performing queries on MySQL, note that MySQL&amp;rsquo;s silent type coercion may cause unexpected results when mixing types. If you query on a string type column, but with an integer value, MySQL will coerce the types of all values in the table to an integer before performing the comparison. For example, if your table contains the values &lt;code&gt;'abc'&lt;/code&gt;, &lt;code&gt;'def'&lt;/code&gt; and you query for &lt;code&gt;WHERE mycolumn=0&lt;/code&gt;, both rows will match. To prevent this, perform the correct typecasting before using the value in a query.</source>
          <target state="translated">MySQLでクエリを実行している場合は、MySQLのサイレント型強制が型の混合時に予期しない結果を引き起こす可能性があることに注意してください。文字列型の列に対してクエリを実行したが、整数値を使用している場合、MySQLは比較を実行する前に、テーブル内のすべての値の型を整数に強制変換します。たとえば、テーブルに値 &lt;code&gt;'abc'&lt;/code&gt; 、 &lt;code&gt;'def'&lt;/code&gt; が含まれていて、 &lt;code&gt;WHERE mycolumn=0&lt;/code&gt; をクエリすると、両方の行が一致します。これを防ぐには、クエリで値を使用する前に正しい型キャストを実行します。</target>
        </trans-unit>
        <trans-unit id="a947d6cabd99493fc7e983c79f42f4923da04a9e" translate="yes" xml:space="preserve">
          <source>If you are serving your own static files, be sure that handlers like Apache&amp;rsquo;s &lt;code&gt;mod_php&lt;/code&gt;, which would execute static files as code, are disabled. You don&amp;rsquo;t want users to be able to execute arbitrary code by uploading and requesting a specially crafted file.</source>
          <target state="translated">独自の静的ファイルを提供する場合は、静的ファイルをコードとして実行するApacheの &lt;code&gt;mod_php&lt;/code&gt; などのハンドラーが無効になっていることを確認してください。ユーザーが特別に細工されたファイルをアップロードしてリクエストすることにより、ユーザーが任意のコードを実行できるようにしたくない。</target>
        </trans-unit>
        <trans-unit id="3e266d9fb9806995f7ae92d1d0321cc13f004066" translate="yes" xml:space="preserve">
          <source>If you are sharing a cache instance between servers, or between your production and development environments, it&amp;rsquo;s possible for data cached by one server to be used by another server. If the format of cached data is different between servers, this can lead to some very hard to diagnose problems.</source>
          <target state="translated">サーバー間、または本番環境と開発環境間でキャッシュインスタンスを共有している場合、あるサーバーでキャッシュされたデータが別のサーバーで使用される可能性があります。キャッシュされたデータのフォーマットがサーバー間で異なる場合、問題の診断が非常に困難になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="11740fd9f726066aa1c21ea9b74be5776e21a750" translate="yes" xml:space="preserve">
          <source>If you are testing from an asynchronous function, you must also use the asynchronous test client. This is available as &lt;code&gt;django.test.AsyncClient&lt;/code&gt;, or as &lt;code&gt;self.async_client&lt;/code&gt; on any test.</source>
          <target state="translated">非同期関数からテストする場合は、非同期テストクライアントも使用する必要があります。これは、 &lt;code&gt;django.test.AsyncClient&lt;/code&gt; として、または任意のテストで &lt;code&gt;self.async_client&lt;/code&gt; として利用できます。</target>
        </trans-unit>
        <trans-unit id="5df3afa0c3b43eec8bd8d9f748fb63ae435ac643" translate="yes" xml:space="preserve">
          <source>If you are the maintainer of a third-party app with models, you may need to ship migrations that support multiple Django versions. In this case, you should always run &lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;with the lowest Django version you wish to support&lt;/strong&gt;.</source>
          <target state="translated">モデルを使用するサードパーティアプリのメンテナーである場合は、複数のDjangoバージョンをサポートする移行を出荷する必要がある場合があります。この場合、常に&lt;strong&gt;サポートしたい最低のDjangoバージョンで&lt;/strong&gt;&lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt;&lt;strong&gt;を&lt;/strong&gt;実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="29f132b30359fb7a3ec8ec8ec098562f51231719" translate="yes" xml:space="preserve">
          <source>If you are trying to call code that is synchronous-only from an asynchronous thread, then create a synchronous thread and call it in that. You can accomplish this is with &lt;a href=&quot;../topics/async#asgiref.sync.sync_to_async&quot;&gt;&lt;code&gt;asgiref.sync.sync_to_async()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">非同期スレッドから同期のみのコードを呼び出そうとしている場合は、同期スレッドを作成してその中で呼び出します。これは、&lt;a href=&quot;../topics/async#asgiref.sync.sync_to_async&quot;&gt; &lt;code&gt;asgiref.sync.sync_to_async()&lt;/code&gt; &lt;/a&gt;を使用して実行できます。</target>
        </trans-unit>
        <trans-unit id="c58efff062a8aaaaa34e19e97693ce558ec61bc5" translate="yes" xml:space="preserve">
          <source>If you are trying to call code that is synchronous-only from an asynchronous thread, then create a synchronous thread and call it in that. You can accomplish this is with &lt;code&gt;asgiref.sync.sync_to_async&lt;/code&gt;.</source>
          <target state="translated">非同期スレッドから同期のみのコードを呼び出そうとしている場合は、同期スレッドを作成し、その中で呼び出します。これは &lt;code&gt;asgiref.sync.sync_to_async&lt;/code&gt; で実現できます。</target>
        </trans-unit>
        <trans-unit id="e8e0bd3010ac7dd8cec899905c900e89f1f7d84a" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_query_name&quot;&gt;&lt;code&gt;related_query_name&lt;/code&gt;&lt;/a&gt; on a &lt;code&gt;ForeignKey&lt;/code&gt; or &lt;code&gt;ManyToManyField&lt;/code&gt;, you must always specify a &lt;em&gt;unique&lt;/em&gt; reverse name and query name for the field. This would normally cause a problem in abstract base classes, since the fields on this class are included into each of the child classes, with exactly the same values for the attributes (including &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_query_name&quot;&gt;&lt;code&gt;related_query_name&lt;/code&gt;&lt;/a&gt;) each time.</source>
          <target state="translated">あなたが使用している場合は&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_query_name&quot;&gt; &lt;code&gt;related_query_name&lt;/code&gt; &lt;/a&gt;上 &lt;code&gt;ForeignKey&lt;/code&gt; や &lt;code&gt;ManyToManyField&lt;/code&gt; 、あなたは常に指定する必要があります&lt;em&gt;ユニークな&lt;/em&gt;フィールドの逆名とクエリ名を。このクラスのフィールドは各子クラスに含まれ、そのたびに属性（&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_query_name&quot;&gt; &lt;code&gt;related_query_name&lt;/code&gt; &lt;/a&gt;を含む）の値がまったく同じになるため、これは通常、抽象基本クラスで問題を引き起こします。</target>
        </trans-unit>
        <trans-unit id="13ff923ff59501ab414c4be102a84827b6e517bb" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata&lt;/code&gt;&lt;/a&gt; to generate serialized data, use the &lt;a href=&quot;../ref/django-admin#cmdoption-dumpdata-natural-foreign&quot;&gt;&lt;code&gt;dumpdata --natural-foreign&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/django-admin#cmdoption-dumpdata-natural-primary&quot;&gt;&lt;code&gt;dumpdata --natural-primary&lt;/code&gt;&lt;/a&gt; command line flags to generate natural keys.</source>
          <target state="translated">&lt;a href=&quot;../ref/django-admin#django-admin-dumpdata&quot;&gt; &lt;code&gt;dumpdata&lt;/code&gt; &lt;/a&gt;を使用して&lt;a href=&quot;../ref/django-admin#cmdoption-dumpdata-natural-foreign&quot;&gt; &lt;code&gt;dumpdata --natural-foreign&lt;/code&gt; &lt;/a&gt;化されたデータを生成している場合は、dumpdata --natural-foreignおよび&lt;a href=&quot;../ref/django-admin#cmdoption-dumpdata-natural-primary&quot;&gt; &lt;code&gt;dumpdata --natural-primary&lt;/code&gt; &lt;/a&gt;コマンドラインフラグを使用して、ナチュラルキーを生成します。</target>
        </trans-unit>
        <trans-unit id="59359e0377bcc9039f07ed70ee0fda67ef2ccade" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;multi-db&quot;&gt;more than one database&lt;/a&gt;, you can use &lt;code&gt;django.db.connections&lt;/code&gt; to obtain the connection (and cursor) for a specific database. &lt;code&gt;django.db.connections&lt;/code&gt; is a dictionary-like object that allows you to retrieve a specific connection using its alias:</source>
          <target state="translated">あなたが使用している場合は&lt;a href=&quot;multi-db&quot;&gt;、複数のデータベースを&lt;/a&gt;、あなたが使用することができます &lt;code&gt;django.db.connections&lt;/code&gt; を、特定のデータベースへの接続（カーソル）を得ました。 &lt;code&gt;django.db.connections&lt;/code&gt; は辞書のようなオブジェクトで、エイリアスを使用して特定の接続を取得できます。</target>
        </trans-unit>
        <trans-unit id="f9a935f64b3c7b8ef812c793ab72169e068de5c7" translate="yes" xml:space="preserve">
          <source>If you are using MySQL, see the &lt;a href=&quot;../../ref/databases#mysql-time-zone-definitions&quot;&gt;Time zone definitions&lt;/a&gt; section of the MySQL notes for instructions on loading time zone definitions.</source>
          <target state="translated">MySQLを使用している場合、&lt;a href=&quot;../../ref/databases#mysql-time-zone-definitions&quot;&gt;タイムゾーン定義の&lt;/a&gt;ロード手順については、MySQLノートのタイムゾーン定義セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="20d3a84d61e53af28e187e5423ab3c6daba100cb" translate="yes" xml:space="preserve">
          <source>If you are using a &lt;a href=&quot;modelforms#django.forms.models.BaseModelFormSet&quot;&gt;&lt;code&gt;ModelFormSet&lt;/code&gt;&lt;/a&gt;, model instances for deleted forms will be deleted when you call &lt;code&gt;formset.save()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;modelforms#django.forms.models.BaseModelFormSet&quot;&gt; &lt;code&gt;ModelFormSet&lt;/code&gt; &lt;/a&gt;を使用している場合、 &lt;code&gt;formset.save()&lt;/code&gt; を呼び出すと、削除されたフォームのモデルインスタンスが削除されます。</target>
        </trans-unit>
        <trans-unit id="4a32235de5fa9b7f6d1fb4ceb0c0a90fb7c8b7a7" translate="yes" xml:space="preserve">
          <source>If you are using a custom &lt;code&gt;AdminSite&lt;/code&gt;, it is common to import all of the &lt;code&gt;ModelAdmin&lt;/code&gt; subclasses into your code and register them to the custom &lt;code&gt;AdminSite&lt;/code&gt;. In that case, in order to disable auto-discovery, you should put &lt;code&gt;'django.contrib.admin.apps.SimpleAdminConfig'&lt;/code&gt; instead of &lt;code&gt;'django.contrib.admin'&lt;/code&gt; in your &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">カスタムの &lt;code&gt;AdminSite&lt;/code&gt; を使用している場合、すべての &lt;code&gt;ModelAdmin&lt;/code&gt; サブクラスをコードにインポートして、それらをカスタムの &lt;code&gt;AdminSite&lt;/code&gt; に登録するのが一般的です。その場合、自動検出を無効にするには、&lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;設定に &lt;code&gt;'django.contrib.admin.apps.SimpleAdminConfig'&lt;/code&gt; 代わりに &lt;code&gt;'django.contrib.admin'&lt;/code&gt; を配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="3e5ad72d051f2c508d3660b55413bfd83991c9d5" translate="yes" xml:space="preserve">
          <source>If you are using a custom &lt;code&gt;ModelAdmin&lt;/code&gt; which is a subclass of &lt;code&gt;django.contrib.auth.admin.UserAdmin&lt;/code&gt;, then you need to add your custom fields to &lt;code&gt;fieldsets&lt;/code&gt; (for fields to be used in editing users) and to &lt;code&gt;add_fieldsets&lt;/code&gt; (for fields to be used when creating a user). For example:</source>
          <target state="translated">カスタム使用している場合は &lt;code&gt;ModelAdmin&lt;/code&gt; のサブクラスである &lt;code&gt;django.contrib.auth.admin.UserAdmin&lt;/code&gt; を、あなたはあなたにカスタムフィールドを追加する必要があり &lt;code&gt;fieldsets&lt;/code&gt; （ユーザーの編集に使用するフィールドの場合）とに &lt;code&gt;add_fieldsets&lt;/code&gt; フィールドがあるために（ユーザーの作成時に使用されます）。例えば：</target>
        </trans-unit>
        <trans-unit id="55299cb11d5a4d1a27e95db83e96e73588d11d45" translate="yes" xml:space="preserve">
          <source>If you are using a legacy database that contains &lt;code&gt;TIMESTAMP&lt;/code&gt; columns, you must set &lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ = False&lt;/code&gt;&lt;/a&gt; to avoid data corruption. &lt;a href=&quot;django-admin#django-admin-inspectdb&quot;&gt;&lt;code&gt;inspectdb&lt;/code&gt;&lt;/a&gt; maps these columns to &lt;a href=&quot;models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; and if you enable timezone support, both MySQL and Django will attempt to convert the values from UTC to local time.</source>
          <target state="translated">&lt;code&gt;TIMESTAMP&lt;/code&gt; 列を含むレガシーデータベースを使用している場合は、&lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ = False&lt;/code&gt; &lt;/a&gt;に設定して、データの破損を回避する必要があります。&lt;a href=&quot;django-admin#django-admin-inspectdb&quot;&gt; &lt;code&gt;inspectdb&lt;/code&gt; &lt;/a&gt;はこれらの列を&lt;a href=&quot;models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; に&lt;/a&gt;マップし、タイムゾーンサポートを有効にすると、MySQLとDjangoの両方が値をUTCから現地時間に変換しようとします。</target>
        </trans-unit>
        <trans-unit id="9b9eb482ea04b91f418d3f207e5896276fab27cb" translate="yes" xml:space="preserve">
          <source>If you are using a production backend that can accept a wider range of keys (a custom backend, or one of the non-memcached built-in backends), and want to use this wider range without warnings, you can silence &lt;code&gt;CacheKeyWarning&lt;/code&gt; with this code in the &lt;code&gt;management&lt;/code&gt; module of one of your &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">幅広いキー（カスタムバックエンド、または非memcached組み込みのバックエンドの1つ）を受け入れることができるプロダクションバックエンドを使用していて、警告なしにこの広い範囲を使用したい場合は、このコードで &lt;code&gt;CacheKeyWarning&lt;/code&gt; をサイレントにできます。いずれかの&lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;management&lt;/code&gt; モジュールで：</target>
        </trans-unit>
        <trans-unit id="400ddbb0cf2f8ce72e355d92bebfc1e26ffa4aab" translate="yes" xml:space="preserve">
          <source>If you are using a version of Apache older than 2.4, replace &lt;code&gt;Require all granted&lt;/code&gt; with &lt;code&gt;Allow from all&lt;/code&gt; and also add the line &lt;code&gt;Order deny,allow&lt;/code&gt; above it.</source>
          <target state="translated">あなたが2.4よりも古いバージョンのApacheを使用している場合は、交換してください &lt;code&gt;Require all granted&lt;/code&gt; に &lt;code&gt;Allow from all&lt;/code&gt; の行を追加します。またと &lt;code&gt;Order deny,allow&lt;/code&gt; 、それを超えます。</target>
        </trans-unit>
        <trans-unit id="e9b1ff813f22a4d98b3e0ec7f8d1a70dfb440c12" translate="yes" xml:space="preserve">
          <source>If you are using caching provided by Django, you should consider clearing your cache after upgrading. Otherwise you may run into problems, for example, if you are caching pickled objects as these objects are not guaranteed to be pickle-compatible across Django versions. A past instance of incompatibility was caching pickled &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; objects, either directly or indirectly via the &lt;a href=&quot;../topics/cache#django.views.decorators.cache.cache_page&quot;&gt;&lt;code&gt;cache_page()&lt;/code&gt;&lt;/a&gt; decorator.</source>
          <target state="translated">Djangoが提供するキャッシュを使用している場合は、アップグレード後にキャッシュをクリアすることを検討してください。そうしないと、ピクルされたオブジェクトがDjangoのバージョン間でピクル互換であることが保証されていないため、ピクルされたオブジェクトをキャッシュしている場合など、問題が発生する可能性があります。非互換性の過去のインスタンスは、&lt;a href=&quot;../topics/cache#django.views.decorators.cache.cache_page&quot;&gt; &lt;code&gt;cache_page()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;オブジェクトを、直接またはcache_page（）デコレータを介して間接的にキャッシュしていました。</target>
        </trans-unit>
        <trans-unit id="31c81067457a54fed13944b98da35401d7bcbd26" translate="yes" xml:space="preserve">
          <source>If you are using class-based views, you can refer to &lt;a href=&quot;../topics/class-based-views/intro#id1&quot;&gt;Decorating class-based views&lt;/a&gt;.</source>
          <target state="translated">クラスベースのビューを使用している場合は、「&lt;a href=&quot;../topics/class-based-views/intro#id1&quot;&gt;クラスベースのビューの装飾&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="74bc5b3d8a5fb005230ddd51971a6b250b4753ac" translate="yes" xml:space="preserve">
          <source>If you are using more than one database you can use &lt;code&gt;django.db.connections&lt;/code&gt; to obtain the connection (and cursor) for a specific database. &lt;code&gt;django.db.connections&lt;/code&gt; is a dictionary-like object that allows you to retrieve a specific connection using its alias:</source>
          <target state="translated">複数のデータベースを使用している場合は、 &lt;code&gt;django.db.connections&lt;/code&gt; を使用して、特定のデータベースの接続（およびカーソル）を取得できます。 &lt;code&gt;django.db.connections&lt;/code&gt; は辞書のようなオブジェクトで、エイリアスを使用して特定の接続を取得できます。</target>
        </trans-unit>
        <trans-unit id="0ecf06722ffb34ee4a0fedfb0511c983d4a713e0" translate="yes" xml:space="preserve">
          <source>If you are using multiple database caches, &lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt;&lt;code&gt;createcachetable&lt;/code&gt;&lt;/a&gt; creates one table for each cache.</source>
          <target state="translated">複数のデータベースキャッシュを使用している場合、&lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt; &lt;code&gt;createcachetable&lt;/code&gt; &lt;/a&gt;はキャッシュごとに1つのテーブルを作成します。</target>
        </trans-unit>
        <trans-unit id="c1f1afe7956d536875c96cebe4354cfc56b04593" translate="yes" xml:space="preserve">
          <source>If you are using multiple databases, &lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt;&lt;code&gt;createcachetable&lt;/code&gt;&lt;/a&gt; observes the &lt;code&gt;allow_migrate()&lt;/code&gt; method of your database routers (see below).</source>
          <target state="translated">複数のデータベースを使用している場合、&lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt; &lt;code&gt;createcachetable&lt;/code&gt; &lt;/a&gt;はデータベースルーターの &lt;code&gt;allow_migrate()&lt;/code&gt; メソッドを監視します（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="df924b4a3089f458dd4a26a99d7de10d2a275ae2" translate="yes" xml:space="preserve">
          <source>If you are using test decorators, they must be async-compatible to ensure they work correctly. Django&amp;rsquo;s built-in decorators will behave correctly, but third-party ones may appear to not execute (they will &amp;ldquo;wrap&amp;rdquo; the wrong part of the execution flow and not your test).</source>
          <target state="translated">テストデコレータを使用している場合、正しく機能するようにするには、非同期互換である必要があります。Djangoの組み込みデコレータは正しく動作しますが、サードパーティのデコレータは実行されないように見える場合があります（テストではなく実行フローの間違った部分を「ラップ」します）。</target>
        </trans-unit>
        <trans-unit id="d8e86b0dcae3d153f97ecddffbaca181d07969ec" translate="yes" xml:space="preserve">
          <source>If you are using the &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; backend, this probably isn&amp;rsquo;t the documentation you&amp;rsquo;re looking for. An instance of the &lt;code&gt;Engine&lt;/code&gt; class described below is accessible using the &lt;code&gt;engine&lt;/code&gt; attribute of that backend and any attribute defaults mentioned below are overridden by what&amp;rsquo;s passed by &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt;バックエンドを使用している場合、これはおそらく探しているドキュメントではありません。以下で説明する &lt;code&gt;Engine&lt;/code&gt; クラスのインスタンスには、そのバックエンドの &lt;code&gt;engine&lt;/code&gt; 属性を使用してアクセスできます。以下で説明する属性のデフォルトは、&lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt;によって渡されるものによってオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="98aa047d8bc9dd103405d4da35377acc8117f24d" translate="yes" xml:space="preserve">
          <source>If you are using the &lt;a href=&quot;db/managers#django.db.models.from_queryset&quot;&gt;&lt;code&gt;from_queryset()&lt;/code&gt;&lt;/a&gt; function to dynamically generate a manager class, you need to inherit from the generated class to make it importable:</source>
          <target state="translated">あなたが使用している場合は&lt;a href=&quot;db/managers#django.db.models.from_queryset&quot;&gt; &lt;code&gt;from_queryset()&lt;/code&gt; &lt;/a&gt;動的マネージャクラスを生成する機能を、あなたはそれがインポート可能にするために生成されたクラスから継承する必要があります。</target>
        </trans-unit>
        <trans-unit id="b152ab1851b4b76c1b0fadc99e24633039333bc3" translate="yes" xml:space="preserve">
          <source>If you are using the default &lt;a href=&quot;../files/storage#django.core.files.storage.FileSystemStorage&quot;&gt;&lt;code&gt;FileSystemStorage&lt;/code&gt;&lt;/a&gt;, the string value will be appended to your &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; path to form the location on the local filesystem where uploaded files will be stored. If you are using a different storage, check that storage&amp;rsquo;s documentation to see how it handles &lt;code&gt;upload_to&lt;/code&gt;.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;../files/storage#django.core.files.storage.FileSystemStorage&quot;&gt; &lt;code&gt;FileSystemStorage&lt;/code&gt; &lt;/a&gt;を使用している場合、文字列値が&lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt;パスに追加され、アップロードされたファイルが保存されるローカルファイルシステム上の場所を形成します。別のストレージを使用している場合は、そのストレージのドキュメントで、 &lt;code&gt;upload_to&lt;/code&gt; の処理方法を確認してください。</target>
        </trans-unit>
        <trans-unit id="9d24da33ace038770df53fb75680d36c64adccce" translate="yes" xml:space="preserve">
          <source>If you are using the default test runner, you can control this with the the &lt;a href=&quot;../../ref/settings#std:setting-TEST_SERIALIZE&quot;&gt;&lt;code&gt;SERIALIZE&lt;/code&gt;&lt;/a&gt; entry in the &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt;&lt;code&gt;TEST&lt;/code&gt;&lt;/a&gt; dictionary.</source>
          <target state="translated">デフォルトのテストランナーを使用している場合は、&lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt; &lt;code&gt;TEST&lt;/code&gt; &lt;/a&gt;辞書の&lt;a href=&quot;../../ref/settings#std:setting-TEST_SERIALIZE&quot;&gt; &lt;code&gt;SERIALIZE&lt;/code&gt; &lt;/a&gt;エントリでこれを制御できます。</target>
        </trans-unit>
        <trans-unit id="3b67e56408c732a18c6ba1adae555cdf257848ab" translate="yes" xml:space="preserve">
          <source>If you are wanting to change the Python-only behavior of a model, but keep all the same fields as in the original, use &lt;code&gt;Meta.proxy=True&lt;/code&gt;. This sets things up so that the proxy model is an exact copy of the storage structure of the original model when data is saved.</source>
          <target state="translated">モデルのPythonのみの動作を変更したいが、元と同じフィールドをすべて保持したい場合は、 &lt;code&gt;Meta.proxy=True&lt;/code&gt; を使用してください。これにより、データが保存されるときにプロキシモデルが元のモデルのストレージ構造の正確なコピーになるように設定されます。</target>
        </trans-unit>
        <trans-unit id="f2bd0fdb6a5a5ac5aa3b6f2e67b4ab2cda67e9ec" translate="yes" xml:space="preserve">
          <source>If you are writing a &lt;a href=&quot;../../intro/reusable-apps&quot;&gt;reusable application&lt;/a&gt; you may want to use the Django test runner to run your own test suite and thus benefit from the Django testing infrastructure.</source>
          <target state="translated">あなたが書いている場合は&lt;a href=&quot;../../intro/reusable-apps&quot;&gt;、再利用可能なアプリケーションを&lt;/a&gt;独自のテストスイートを実行するため、Djangoのテストインフラストラクチャの恩恵を受けるためにDjangoのテストランナーを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="63f4345566a629d77c36a5b719a36c80b1781cf7" translate="yes" xml:space="preserve">
          <source>If you are writing an application that must be portable to multiple database backends, you should be aware that there are restrictions on &lt;code&gt;max_length&lt;/code&gt; for some backends. Refer to the &lt;a href=&quot;../databases&quot;&gt;database backend notes&lt;/a&gt; for details.</source>
          <target state="translated">複数のデータベースバックエンドに移植可能でなければならないアプリケーションを作成している場合は、一部のバックエンドの &lt;code&gt;max_length&lt;/code&gt; に制限があることに注意してください。詳細については、&lt;a href=&quot;../databases&quot;&gt;データベースのバックエンドノート&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3ec3b03a16835f16337bac3782d93796fddb90be" translate="yes" xml:space="preserve">
          <source>If you are writing custom views for Django&amp;rsquo;s admin (or need the same authorization check that the built-in views use), you may find the &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.views.decorators.staff_member_required&quot;&gt;&lt;code&gt;django.contrib.admin.views.decorators.staff_member_required()&lt;/code&gt;&lt;/a&gt; decorator a useful alternative to &lt;code&gt;login_required()&lt;/code&gt;.</source>
          <target state="translated">Djangoの管理者向けにカスタムビューを作成している場合（または組み込みのビューで使用するのと同じ承認チェックが必要な場合）、&lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.views.decorators.staff_member_required&quot;&gt; &lt;code&gt;django.contrib.admin.views.decorators.staff_member_required()&lt;/code&gt; &lt;/a&gt;デコレータが &lt;code&gt;login_required()&lt;/code&gt; の便利な代替手段であることがわかります。</target>
        </trans-unit>
        <trans-unit id="9260861ea3c89683f0065f3584c6348bda3c70e8" translate="yes" xml:space="preserve">
          <source>If you are writing or maintaining a third-party database backend for Django, you will need to provide a &lt;code&gt;SchemaEditor&lt;/code&gt; implementation in order to work with 1.7&amp;rsquo;s migration functionality - however, as long as your database is relatively standard in its use of SQL and relational design, you should be able to subclass one of the built-in Django &lt;code&gt;SchemaEditor&lt;/code&gt; classes and tweak the syntax a little. Also note that there are a few new database features that migrations will look for: &lt;code&gt;can_rollback_ddl&lt;/code&gt; and &lt;code&gt;supports_combined_alters&lt;/code&gt; are the most important.</source>
          <target state="translated">Djangoのサードパーティデータベースバックエンドを作成または維持している場合、1.7の移行機能を使用するには、 &lt;code&gt;SchemaEditor&lt;/code&gt; 実装を提供する必要があります。ただし、データベースのSQLの使用が比較的標準的であり、リレーショナルデザインでは、組み込みのDjango &lt;code&gt;SchemaEditor&lt;/code&gt; クラスの1つをサブクラス化し、構文を少し調整できるはずです。また、マイグレーションが探す新しいデータベース機能がいくつかあることに注意してください &lt;code&gt;can_rollback_ddl&lt;/code&gt; と &lt;code&gt;supports_combined_alters&lt;/code&gt; が最も重要です。</target>
        </trans-unit>
        <trans-unit id="b0f8725f4059061d6c5d765e52cefa75411612d2" translate="yes" xml:space="preserve">
          <source>If you are writing or maintaining a third-party database backend for Django, you will need to provide a &lt;code&gt;SchemaEditor&lt;/code&gt; implementation in order to work with Django&amp;rsquo;s migration functionality - however, as long as your database is relatively standard in its use of SQL and relational design, you should be able to subclass one of the built-in Django &lt;code&gt;SchemaEditor&lt;/code&gt; classes and tweak the syntax a little.</source>
          <target state="translated">Djangoのサードパーティデータベースバックエンドを作成または保守している場合、Djangoの移行機能を使用するには、 &lt;code&gt;SchemaEditor&lt;/code&gt; 実装を提供する必要があります。ただし、データベースがSQLとリレーショナル設計の使用において比較的標準的である限り、 、組み込みのDjango &lt;code&gt;SchemaEditor&lt;/code&gt; クラスの1つをサブクラス化し、構文を少し調整できるはずです。</target>
        </trans-unit>
        <trans-unit id="6e12212c9814a4d33e32e4d9464358cf6356b217" translate="yes" xml:space="preserve">
          <source>If you assign a value of &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; to an attribute, it will be rendered as an HTML5 boolean attribute:</source>
          <target state="translated">属性に &lt;code&gt;True&lt;/code&gt; または &lt;code&gt;False&lt;/code&gt; の値を割り当てると、HTML5ブール属性としてレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="32c8444bd1418d1e80bc0e62c5a90e8f82286fbe" translate="yes" xml:space="preserve">
          <source>If you assign auto-primary-key values manually, make sure not to use an already-existing primary-key value! If you create a new object with an explicit primary-key value that already exists in the database, Django will assume you&amp;rsquo;re changing the existing record rather than creating a new one.</source>
          <target state="translated">自動主キー値を手動で割り当てる場合は、既存の主キー値を使用しないようにしてください。データベースにすでに存在する明示的な主キー値を使用して新しいオブジェクトを作成すると、Djangoは、新しいレコードを作成するのではなく、既存のレコードを変更すると想定します。</target>
        </trans-unit>
        <trans-unit id="49a2f3768ca62045d71dd6c07b469ec6cd3d26bc" translate="yes" xml:space="preserve">
          <source>If you attempt to access a database that you haven&amp;rsquo;t defined in your &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; setting, Django will raise a &lt;code&gt;django.db.utils.ConnectionDoesNotExist&lt;/code&gt; exception.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;設定で定義していないデータベースにアクセスしようとすると、Djangoは &lt;code&gt;django.db.utils.ConnectionDoesNotExist&lt;/code&gt; 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="094a5a53db7e5fc234781db19fdb93e284cd8498" translate="yes" xml:space="preserve">
          <source>If you attempt to insert a new row that conflicts with an existing row, an &lt;a href=&quot;../../exceptions#django.db.IntegrityError&quot;&gt;&lt;code&gt;IntegrityError&lt;/code&gt;&lt;/a&gt; is raised. Similarly, when update conflicts with an existing row.</source>
          <target state="translated">既存の行と競合する新しい行を挿入しようとすると、&lt;a href=&quot;../../exceptions#django.db.IntegrityError&quot;&gt; &lt;code&gt;IntegrityError&lt;/code&gt; &lt;/a&gt;が発生します。同様に、更新が既存の行と競合する場合。</target>
        </trans-unit>
        <trans-unit id="b554a2162422140f6059440c8b501ad2c5a78b5b" translate="yes" xml:space="preserve">
          <source>If you attempt to use &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt; and pass a field name that doesn&amp;rsquo;t exist, Django will raise a &lt;code&gt;ValueError&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt;を使用して、存在しないフィールド名を渡そうとすると、Djangoは &lt;code&gt;ValueError&lt;/code&gt; を送出します。</target>
        </trans-unit>
        <trans-unit id="4e5abf4e7be3fc5b817d5e64f617996405c68b1a" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;formset.save(commit=False)&lt;/code&gt;, objects will not be deleted automatically. You&amp;rsquo;ll need to call &lt;code&gt;delete()&lt;/code&gt; on each of the &lt;a href=&quot;modelforms#django.forms.models.BaseModelFormSet.deleted_objects&quot;&gt;&lt;code&gt;formset.deleted_objects&lt;/code&gt;&lt;/a&gt; to actually delete them:</source>
          <target state="translated">&lt;code&gt;formset.save(commit=False)&lt;/code&gt; を呼び出しても、オブジェクトは自動的に削除されません。それらを実際に削除するには、各&lt;a href=&quot;modelforms#django.forms.models.BaseModelFormSet.deleted_objects&quot;&gt; &lt;code&gt;formset.deleted_objects&lt;/code&gt; &lt;/a&gt;で &lt;code&gt;delete()&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="77f2d3ee05bddf46e62d79be0db43fed60754a7d" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;get_template('story_detail.html')&lt;/code&gt;, here are the files Django will look for, in order:</source>
          <target state="translated">&lt;code&gt;get_template('story_detail.html')&lt;/code&gt; を呼び出すと、Djangoが探すファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="81d2651eaffa16d0fff33c40f11a5412ce1b24bb" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;on_commit()&lt;/code&gt; while there isn&amp;rsquo;t an active transaction, the callback will be executed immediately.</source>
          <target state="translated">アクティブなトランザクションがないときに &lt;code&gt;on_commit()&lt;/code&gt; を呼び出すと、コールバックがすぐに実行されます。</target>
        </trans-unit>
        <trans-unit id="fd4a96e10fe18bc75c5654babe72785efc64e7dd" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;select_template(['story_253_detail.html', 'story_detail.html'])&lt;/code&gt;, here&amp;rsquo;s what Django will look for:</source>
          <target state="translated">&lt;code&gt;select_template(['story_253_detail.html', 'story_detail.html'])&lt;/code&gt; を呼び出すと、Djangoは次のように検索します。</target>
        </trans-unit>
        <trans-unit id="b2232cc0a9efa6073693abc788397e1cd49fb07c" translate="yes" xml:space="preserve">
          <source>If you can&amp;rsquo;t find the solution to your problem here then participate in the community! You can:</source>
          <target state="translated">ここで問題の解決策が見つからない場合は、コミュニティに参加してください！あなたはできる：</target>
        </trans-unit>
        <trans-unit id="f9c5827d1b1d34ede00df19d4fc1cff6b7b1859a" translate="yes" xml:space="preserve">
          <source>If you can&amp;rsquo;t use mod_wsgi for some reason, fear not: Django supports many other deployment options. One is &lt;a href=&quot;../howto/deployment/wsgi/uwsgi&quot;&gt;uWSGI&lt;/a&gt;; it works very well with &lt;a href=&quot;https://nginx.org/&quot;&gt;nginx&lt;/a&gt;. Additionally, Django follows the WSGI spec (&lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt;), which allows it to run on a variety of server platforms.</source>
          <target state="translated">なんらかの理由でmod_wsgiを使用できない場合は、恐れる必要はありません。Djangoは他の多くの展開オプションをサポートしています。1つは&lt;a href=&quot;../howto/deployment/wsgi/uwsgi&quot;&gt;uWSGI&lt;/a&gt;です。&lt;a href=&quot;https://nginx.org/&quot;&gt;nginxで&lt;/a&gt;非常にうまく機能します。さらに、DjangoはWSGI仕様（&lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt;）に&lt;strong&gt;準拠し&lt;/strong&gt;ているため、さまざまなサーバープラットフォームで実行できます。</target>
        </trans-unit>
        <trans-unit id="714e0fc374856568ae969db6c05be8f214cc209c" translate="yes" xml:space="preserve">
          <source>If you catch exceptions raised by raw SQL queries, Django&amp;rsquo;s behavior is unspecified and database-dependent.</source>
          <target state="translated">生のSQLクエリによって発生した例外をキャッチする場合、Djangoの動作は指定されておらず、データベースに依存しています。</target>
        </trans-unit>
        <trans-unit id="46398ea388c4a399cca78d1e3fb2ac07fe7b2c36" translate="yes" xml:space="preserve">
          <source>If you change a &lt;a href=&quot;../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; to use a &lt;code&gt;through&lt;/code&gt; model, the default migration will delete the existing table and create a new one, losing the existing relations. To avoid this, you can use &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.SeparateDatabaseAndState&quot;&gt;&lt;code&gt;SeparateDatabaseAndState&lt;/code&gt;&lt;/a&gt; to rename the existing table to the new table name whilst telling the migration autodetector that the new model has been created. You can check the existing table name through &lt;a href=&quot;../ref/django-admin#django-admin-sqlmigrate&quot;&gt;&lt;code&gt;sqlmigrate&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../ref/django-admin#django-admin-dbshell&quot;&gt;&lt;code&gt;dbshell&lt;/code&gt;&lt;/a&gt;. You can check the new table name with the through model&amp;rsquo;s &lt;code&gt;_meta.db_table&lt;/code&gt; property. Your new &lt;code&gt;through&lt;/code&gt; model should use the same names for the &lt;code&gt;ForeignKey&lt;/code&gt;s as Django did. Also if it needs any extra fields, they should be added in operations after &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.SeparateDatabaseAndState&quot;&gt;&lt;code&gt;SeparateDatabaseAndState&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;through&lt;/code&gt; モデルを使用するように&lt;a href=&quot;../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;を変更すると、デフォルトの移行では既存のテーブルが削除されて新しいテーブルが作成され、既存のリレーションが失われます。これを回避するには、&lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.SeparateDatabaseAndState&quot;&gt; &lt;code&gt;SeparateDatabaseAndState&lt;/code&gt; &lt;/a&gt;を使用して、既存のテーブルの名前を新しいテーブル名に変更し、移行自動検出器に新しいモデルが作成されたことを通知します。&lt;a href=&quot;../ref/django-admin#django-admin-sqlmigrate&quot;&gt; &lt;code&gt;sqlmigrate&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../ref/django-admin#django-admin-dbshell&quot;&gt; &lt;code&gt;dbshell&lt;/code&gt; &lt;/a&gt;介して既存のテーブル名を確認できます。 throughモデルの &lt;code&gt;_meta.db_table&lt;/code&gt; プロパティを使用して、新しいテーブル名を確認できます。新しい &lt;code&gt;through&lt;/code&gt; モデルでは、 &lt;code&gt;ForeignKey&lt;/code&gt; に同じ名前を使用する必要がありますsDjangoがしたように。また、追加のフィールドが必要な場合は、&lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.SeparateDatabaseAndState&quot;&gt; &lt;code&gt;SeparateDatabaseAndState&lt;/code&gt; の&lt;/a&gt;後の操作に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="812b7dd3005f0d1c3f0522730a119cabfc50f94f" translate="yes" xml:space="preserve">
          <source>If you customized the OSGeo4W installation directories, then you will need to modify the &lt;code&gt;OSGEO4W_ROOT&lt;/code&gt; variables accordingly.</source>
          <target state="translated">OSGeo4Wインストールディレクトリをカスタマイズした場合は、それに応じて &lt;code&gt;OSGEO4W_ROOT&lt;/code&gt; 変数を変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="94e38667622f6c2c7156cdc76fe9c7801210a45e" translate="yes" xml:space="preserve">
          <source>If you customized the Python or OSGeo4W installation directories, then you will need to modify the &lt;code&gt;OSGEO4W_ROOT&lt;/code&gt; and/or &lt;code&gt;PYTHON_ROOT&lt;/code&gt; variables accordingly.</source>
          <target state="translated">あなたはPythonやOSGeo4Wインストールディレクトリをカスタマイズした場合は、変更する必要があります &lt;code&gt;OSGEO4W_ROOT&lt;/code&gt; および/または &lt;code&gt;PYTHON_ROOT&lt;/code&gt; のに応じて変数を。</target>
        </trans-unit>
        <trans-unit id="daa850f3332eec5c502db816abab6725f3877956" translate="yes" xml:space="preserve">
          <source>If you decide not to loop over the radio buttons &amp;ndash; e.g., if your template includes &lt;code&gt;{{ myform.beatles }}&lt;/code&gt; &amp;ndash; they&amp;rsquo;ll be output in a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tags, as above.</source>
          <target state="translated">テンプレートに &lt;code&gt;{{ myform.beatles }}&lt;/code&gt; 含まれている場合など、ラジオボタンをループしない場合は、上記のように、 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; に &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; タグを付けて出力されます。</target>
        </trans-unit>
        <trans-unit id="6e464f5ba0eea9891fc2679642fe2eb1b677c058" translate="yes" xml:space="preserve">
          <source>If you decide to use the latest development version of Django, you&amp;rsquo;ll want to pay close attention to &lt;a href=&quot;https://code.djangoproject.com/timeline&quot;&gt;the development timeline&lt;/a&gt;, and you&amp;rsquo;ll want to keep an eye on the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/releases/index/#development-release-notes&quot;&gt;release notes for the upcoming release&lt;/a&gt;. This will help you stay on top of any new features you might want to use, as well as any changes you&amp;rsquo;ll need to make to your code when updating your copy of Django. (For stable releases, any necessary changes are documented in the release notes.)</source>
          <target state="translated">Djangoの最新の開発バージョンを使用する場合は&lt;a href=&quot;https://code.djangoproject.com/timeline&quot;&gt;、開発のタイムラインに&lt;/a&gt;細心の注意を払い&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/releases/index/#development-release-notes&quot;&gt;、次のリリースのリリースノートに注意&lt;/a&gt;する必要があります。これにより、使用したい新機能や、Djangoのコピーを更新するときにコードに加える必要がある変更を常に把握できます。（安定版リリースの場合、必要な変更はリリースノートに記載されています。）</target>
        </trans-unit>
        <trans-unit id="f6211d5ac8fb417dfa2dabd5bde70687e0d4cb0f" translate="yes" xml:space="preserve">
          <source>If you decide to use the latest development version of Django, you&amp;rsquo;ll want to pay close attention to &lt;a href=&quot;https://code.djangoproject.com/timeline&quot;&gt;the development timeline&lt;/a&gt;, and you&amp;rsquo;ll want to keep an eye on the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/releases/index/#development-release-notes&quot;&gt;release notes for the upcoming release&lt;/a&gt;. This will help you stay on top of any new features you might want to use, as well as any changes you&amp;rsquo;ll need to make to your code when updating your copy of Django. (For stable releases, any necessary changes are documented in the release notes.)</source>
          <target state="translated">Djangoの最新の開発バージョンを使用する場合は&lt;a href=&quot;https://code.djangoproject.com/timeline&quot;&gt;、開発のタイムラインに&lt;/a&gt;細心の注意を払い&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/releases/index/#development-release-notes&quot;&gt;、次のリリースのリリースノート&lt;/a&gt;に注意を払う必要があります。これにより、Djangoのコピーを更新するときに、使用する可能性のある新機能や、コードに加える必要のある変更を把握することができます。（安定したリリースの場合、必要な変更はリリースノートに記載されています。）</target>
        </trans-unit>
        <trans-unit id="367511bd4ccbdd57657dc6f20fe5383038baa533" translate="yes" xml:space="preserve">
          <source>If you declare a hybrid middleware that supports both synchronous and asynchronous calls, the kind of call you get may not match the underlying view. Django will optimize the middleware call stack to have as few sync/async transitions as possible.</source>
          <target state="translated">同期と非同期の両方をサポートするハイブリッドミドルウェアを宣言した場合、得られるコールの種類は、基礎となるビューと一致しない可能性があります。Django はミドルウェアのコールスタックを最適化して、同期/非同期の遷移をできるだけ少なくするようにします。</target>
        </trans-unit>
        <trans-unit id="ad704302a2e0f4e5bbd68ed3a827973dea658d2e" translate="yes" xml:space="preserve">
          <source>If you define a custom &lt;a href=&quot;#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; setting, you can mark the language names as translation strings using the &lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;gettext_lazy()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">カスタムの&lt;a href=&quot;#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt;設定を定義すると、&lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt; &lt;code&gt;gettext_lazy()&lt;/code&gt; &lt;/a&gt;関数を使用して言語名を翻訳文字列としてマークできます。</target>
        </trans-unit>
        <trans-unit id="b08ee922d63ba491bb2cdb4cdfbeae244906b41e" translate="yes" xml:space="preserve">
          <source>If you define a custom &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; setting, as explained in the previous bullet, you can mark the language names as translation strings &amp;ndash; but use &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;gettext_lazy()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt; to avoid a circular import.</source>
          <target state="translated">前の箇条書きで説明したように、カスタム&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt;設定を定義すると、言語名を翻訳文字列としてマークできます。&lt;a href=&quot;../../ref/utils#django.utils.translation.gettext_lazy&quot;&gt; &lt;code&gt;gettext_lazy()&lt;/code&gt; &lt;/a&gt;、循環インポートを回避するには、&lt;a href=&quot;../../ref/utils#django.utils.translation.gettext&quot;&gt; &lt;code&gt;gettext()&lt;/code&gt; &lt;/a&gt;ではなくgettext_lazy（）を使用します。</target>
        </trans-unit>
        <trans-unit id="fcb6c3e1edc1b97b11ed2b6af3ff6371f63271e0" translate="yes" xml:space="preserve">
          <source>If you define the &lt;code&gt;Meta.model&lt;/code&gt; attribute on a &lt;a href=&quot;../../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;, you must also define the &lt;code&gt;Meta.fields&lt;/code&gt; attribute (or the &lt;code&gt;Meta.exclude&lt;/code&gt; attribute). However, &lt;code&gt;ModelAdmin&lt;/code&gt; ignores this value, overriding it with the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_editable&quot;&gt;&lt;code&gt;ModelAdmin.list_editable&lt;/code&gt;&lt;/a&gt; attribute. The easiest solution is to omit the &lt;code&gt;Meta.model&lt;/code&gt; attribute, since &lt;code&gt;ModelAdmin&lt;/code&gt; will provide the correct model to use.</source>
          <target state="translated">&lt;a href=&quot;../../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt;で &lt;code&gt;Meta.model&lt;/code&gt; 属性を定義する場合は、 &lt;code&gt;Meta.fields&lt;/code&gt; 属性（または &lt;code&gt;Meta.exclude&lt;/code&gt; 属性）も定義する必要があります。ただし、 &lt;code&gt;ModelAdmin&lt;/code&gt; はこの値を無視し、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_editable&quot;&gt; &lt;code&gt;ModelAdmin.list_editable&lt;/code&gt; &lt;/a&gt;属性で上書きします。 &lt;code&gt;ModelAdmin&lt;/code&gt; が使用する正しいモデルを提供するため、最も簡単な解決策は &lt;code&gt;Meta.model&lt;/code&gt; 属性を省略することです。</target>
        </trans-unit>
        <trans-unit id="485fe478429ed2c9c1a4f227e8e46539022690b8" translate="yes" xml:space="preserve">
          <source>If you define the &lt;code&gt;Meta.model&lt;/code&gt; attribute on a &lt;a href=&quot;../../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;, you must also define the &lt;code&gt;Meta.fields&lt;/code&gt; attribute (or the &lt;code&gt;Meta.exclude&lt;/code&gt; attribute). However, since the admin has its own way of defining fields, the &lt;code&gt;Meta.fields&lt;/code&gt; attribute will be ignored.</source>
          <target state="translated">&lt;a href=&quot;../../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt;で &lt;code&gt;Meta.model&lt;/code&gt; 属性を定義する場合は、 &lt;code&gt;Meta.fields&lt;/code&gt; 属性（または &lt;code&gt;Meta.exclude&lt;/code&gt; 属性）も定義する必要があります。ただし、管理者には独自のフィールド定義方法があるため、 &lt;code&gt;Meta.fields&lt;/code&gt; 属性は無視されます。</target>
        </trans-unit>
        <trans-unit id="45386bfd1f22aa5a94eb25eb7ab85058786a5cc9" translate="yes" xml:space="preserve">
          <source>If you define your own test runner class and point &lt;a href=&quot;../../ref/settings#std:setting-TEST_RUNNER&quot;&gt;&lt;code&gt;TEST_RUNNER&lt;/code&gt;&lt;/a&gt; at that class, Django will execute your test runner whenever you run &lt;code&gt;./manage.py test&lt;/code&gt;. In this way, it is possible to use any test framework that can be executed from Python code, or to modify the Django test execution process to satisfy whatever testing requirements you may have.</source>
          <target state="translated">独自のテストランナークラスを定義し、そのクラスで&lt;a href=&quot;../../ref/settings#std:setting-TEST_RUNNER&quot;&gt; &lt;code&gt;TEST_RUNNER&lt;/code&gt; &lt;/a&gt;をポイントすると、Djangoは &lt;code&gt;./manage.py test&lt;/code&gt; を実行するたびにテストランナーを実行します。このようにして、Pythonコードから実行できるテストフレームワークを使用したり、Djangoテスト実行プロセスを変更して、必要なテスト要件を満たすことができます。</target>
        </trans-unit>
        <trans-unit id="ea90d73bc6981a1948260ffdf5034a68bee6dab3" translate="yes" xml:space="preserve">
          <source>If you delete a field from a model instance, accessing it again reloads the value from the database:</source>
          <target state="translated">モデル・インスタンスからフィールドを削除すると、そのフィールドに再度アクセスすると、データベースから値がリロードされます。</target>
        </trans-unit>
        <trans-unit id="cff220c390a9ab95545f838c9087be24651f1351" translate="yes" xml:space="preserve">
          <source>If you delete a reporter, his articles will be deleted (assuming that the ForeignKey was defined with &lt;a href=&quot;../../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;django.db.models.ForeignKey.on_delete&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;CASCADE&lt;/code&gt;, which is the default):</source>
          <target state="translated">レポーターを削除すると、彼の記事は削除されます（ForeignKeyが&lt;a href=&quot;../../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt; &lt;code&gt;django.db.models.ForeignKey.on_delete&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;CASCADE&lt;/code&gt; （デフォルト）に設定して定義されていると仮定します）：</target>
        </trans-unit>
        <trans-unit id="3e5714dd7ed956c18562b5fc034b352464e8a7d4" translate="yes" xml:space="preserve">
          <source>If you delete a reporter, their articles will be deleted (assuming that the ForeignKey was defined with &lt;a href=&quot;../../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;django.db.models.ForeignKey.on_delete&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;CASCADE&lt;/code&gt;, which is the default):</source>
          <target state="translated">レポーターを削除すると、その記事は削除されます（ForeignKeyが&lt;a href=&quot;../../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt; &lt;code&gt;django.db.models.ForeignKey.on_delete&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;CASCADE&lt;/code&gt; に設定して定義されていると仮定します。これがデフォルトです）。</target>
        </trans-unit>
        <trans-unit id="d6c2e53ecc92c0f84dc913ba54c33563aaf304cc" translate="yes" xml:space="preserve">
          <source>If you detect errors in multiple fields during &lt;code&gt;Model.clean()&lt;/code&gt;, you can also pass a dictionary mapping field names to errors:</source>
          <target state="translated">&lt;code&gt;Model.clean()&lt;/code&gt; の実行中に複数のフィールドでエラーを検出した場合は、ディクショナリマッピングフィールド名をエラーに渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="48e44cf0802dee16054df73fe1871ad99f86e145" translate="yes" xml:space="preserve">
          <source>If you detect multiple errors during a cleaning method and wish to signal all of them to the form submitter, it is possible to pass a list of errors to the &lt;code&gt;ValidationError&lt;/code&gt; constructor.</source>
          <target state="translated">クリーニングメソッド中に複数のエラーを検出し、それらすべてをフォームサブミッターに通知する場合は、エラーのリストを &lt;code&gt;ValidationError&lt;/code&gt; コンストラクターに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="4cb2bdf9479ffe7ea003c7007bb350d20e0ee892" translate="yes" xml:space="preserve">
          <source>If you disabled it, which is not recommended, you can use &lt;a href=&quot;#django.views.decorators.csrf.csrf_protect&quot;&gt;&lt;code&gt;csrf_protect()&lt;/code&gt;&lt;/a&gt; on particular views you want to protect (see below).</source>
          <target state="translated">無効にした場合&lt;a href=&quot;#django.views.decorators.csrf.csrf_protect&quot;&gt; &lt;code&gt;csrf_protect()&lt;/code&gt; &lt;/a&gt;推奨されません）、保護したい特定のビューでcsrf_protect（）を使用できます（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="2479d1d20a26faec2996d634b0774780be84066c" translate="yes" xml:space="preserve">
          <source>If you do either of the first two steps, keep an eye out for parts of the documentation marked &lt;strong&gt;new in development version&lt;/strong&gt;. That phrase flags features that are only available in development versions of Django, and they likely won&amp;rsquo;t work with an official release.</source>
          <target state="translated">最初の2つのステップのいずれかを実行する場合は、&lt;strong&gt;開発バージョンで新規と&lt;/strong&gt;マークされたドキュメントの部分に注意してください。このフレーズは、Djangoの開発バージョンでのみ利用できる機能にフラグを立て、公式リリースでは機能しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="2aaa0c487bb4c6a6eabbf43dd80c991c63a022d7" translate="yes" xml:space="preserve">
          <source>If you do not specify any app, all apps will be checked.</source>
          <target state="translated">アプリを指定しない場合は、すべてのアプリにチェックが入ります。</target>
        </trans-unit>
        <trans-unit id="4141223977e7c136210c586bc61b2fd0accffd3c" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; argument for the &lt;code&gt;OneToOneField&lt;/code&gt;, Django will use the lowercase name of the current model as default value.</source>
          <target state="translated">&lt;code&gt;OneToOneField&lt;/code&gt; の&lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt;引数を指定しない場合、Djangoは現在のモデルの小文字の名前をデフォルト値として使用します。</target>
        </trans-unit>
        <trans-unit id="d8109cdfe40c6ccae39110a25cad8a7f109000c4" translate="yes" xml:space="preserve">
          <source>If you do not want symmetry in many-to-many relationships with &lt;code&gt;self&lt;/code&gt;, set &lt;a href=&quot;#django.db.models.ManyToManyField.symmetrical&quot;&gt;&lt;code&gt;symmetrical&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt;. This will force Django to add the descriptor for the reverse relationship, allowing &lt;a href=&quot;#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; relationships to be non-symmetrical.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; との多対多の関係で対称性を必要としない場合は、&lt;a href=&quot;#django.db.models.ManyToManyField.symmetrical&quot;&gt; &lt;code&gt;symmetrical&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;False&lt;/code&gt; に設定します。これにより、Djangoは逆の関係の記述子を強制的に追加し、&lt;a href=&quot;#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; の&lt;/a&gt;関係を非対称にすることができます。</target>
        </trans-unit>
        <trans-unit id="d7c82087cc8221fab70b35945b3651dea07d149a" translate="yes" xml:space="preserve">
          <source>If you do not want to wait for the currently running test to finish, you can press &lt;code&gt;Ctrl-C&lt;/code&gt; a second time and the test run will halt immediately, but not gracefully. No details of the tests run before the interruption will be reported, and any test databases created by the run will not be destroyed.</source>
          <target state="translated">現在実行中のテストが完了するのを待たない場合は、 &lt;code&gt;Ctrl-C&lt;/code&gt; と、テストの実行がすぐに停止しますが、正常に停止しません。中断前に実行されたテストの詳細は報告されず、実行によって作成されたテストデータベースは破棄されません。</target>
        </trans-unit>
        <trans-unit id="18efad3241b2dca59f5e6839d85c3fd25968e685" translate="yes" xml:space="preserve">
          <source>If you do not wish for every occurrence of a particular string to have the same signature hash, you can use the optional &lt;code&gt;salt&lt;/code&gt; argument to the &lt;code&gt;Signer&lt;/code&gt; class. Using a salt will seed the signing hash function with both the salt and your &lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">特定の文字列のすべての出現に同じ署名ハッシュを持たせたくない場合は、 &lt;code&gt;Signer&lt;/code&gt; クラスにオプションの &lt;code&gt;salt&lt;/code&gt; 引数を使用できます。ソルトを使用すると、ソルトと&lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; の&lt;/a&gt;両方が署名ハッシュ関数にシードされます。</target>
        </trans-unit>
        <trans-unit id="0bfd8f75b46ff74579ca2af7a7939f691c4a818d" translate="yes" xml:space="preserve">
          <source>If you do override this method, you must return the value of the attribute at the end. You should also update the model&amp;rsquo;s attribute if you make any changes to the value so that code holding references to the model will always see the correct value.</source>
          <target state="translated">このメソッドをオーバーライドする場合は、最後に属性の値を返す必要があります。また、値を変更する場合はモデルの属性を更新して、モデルへの参照を保持するコードが常に正しい値を参照できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="3bc531fc3e6fe0dda101c4233233899fb5df0175" translate="yes" xml:space="preserve">
          <source>If you do want to allow Django to manage the table&amp;rsquo;s lifecycle, you&amp;rsquo;ll need to change the &lt;a href=&quot;../ref/models/options#django.db.models.Options.managed&quot;&gt;&lt;code&gt;managed&lt;/code&gt;&lt;/a&gt; option above to &lt;code&gt;True&lt;/code&gt; (or remove it because &lt;code&gt;True&lt;/code&gt; is its default value).</source>
          <target state="translated">Djangoがテーブルのライフサイクルを管理することを許可する場合は、上記の&lt;a href=&quot;../ref/models/options#django.db.models.Options.managed&quot;&gt; &lt;code&gt;managed&lt;/code&gt; &lt;/a&gt;オプションを &lt;code&gt;True&lt;/code&gt; に変更する必要があります（または、 &lt;code&gt;True&lt;/code&gt; がデフォルト値なので削除します）。</target>
        </trans-unit>
        <trans-unit id="1c3cd8e2ea1d7324cd1b2bd74b7c1b2da10ad473" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t add the &lt;code&gt;related_query_name&lt;/code&gt;, you can do the same types of lookups manually:</source>
          <target state="translated">&lt;code&gt;related_query_name&lt;/code&gt; を追加しない場合は、同じタイプのルックアップを手動で実行できます。</target>
        </trans-unit>
        <trans-unit id="94bbf9a3b61ed7ba431cfe4c7c55a2f5b58d406a" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t have &lt;code&gt;pip&lt;/code&gt;, follow the &lt;a href=&quot;../../../../topics/install#installing-official-release&quot;&gt;installation instructions&lt;/a&gt; to install it.</source>
          <target state="translated">&lt;code&gt;pip&lt;/code&gt; がない場合は、&lt;a href=&quot;../../../../topics/install#installing-official-release&quot;&gt;インストール手順に従って&lt;/a&gt;インストールしてください。</target>
        </trans-unit>
        <trans-unit id="83b4541d75cf80e630fb9cb0eae0f6dcce396113" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t have access to the request object, you can use the &lt;code&gt;get_current()&lt;/code&gt; method of the &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; model&amp;rsquo;s manager. You should then ensure that your settings file does contain the &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; setting. This example is equivalent to the previous one:</source>
          <target state="translated">リクエストオブジェクトにアクセスできない場合は、&lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt;モデルのマネージャーの &lt;code&gt;get_current()&lt;/code&gt; メソッドを使用できます。次に、設定ファイルに&lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt; &lt;code&gt;SITE_ID&lt;/code&gt; &lt;/a&gt;設定が含まれていることを確認する必要があります。この例は、前の例と同等です。</target>
        </trans-unit>
        <trans-unit id="6e6f1ebd340eb9d605be9c4db45ebb236fd2e050" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t have the &lt;code&gt;gettext&lt;/code&gt; utilities installed, &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;makemessages&lt;/code&gt;&lt;/a&gt; will create empty files. If that&amp;rsquo;s the case, either install the &lt;code&gt;gettext&lt;/code&gt; utilities or copy the English message file (&lt;code&gt;locale/en/LC_MESSAGES/django.po&lt;/code&gt;) if available and use it as a starting point, which is an empty translation file.</source>
          <target state="translated">&lt;code&gt;gettext&lt;/code&gt; ユーティリティがインストールされていない場合、&lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;makemessages&lt;/code&gt; &lt;/a&gt;は空のファイルを作成します。その場合は、 &lt;code&gt;gettext&lt;/code&gt; ユーティリティをインストールするか、利用可能な場合は英語のメッセージファイル（ &lt;code&gt;locale/en/LC_MESSAGES/django.po&lt;/code&gt; ）をコピーして、空の翻訳ファイルである開始点として使用してください。</target>
        </trans-unit>
        <trans-unit id="4f1d2a7a739cbcb4a30351e90054953707bb1564" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t include the &lt;a href=&quot;#django.contrib.auth.models.PermissionsMixin&quot;&gt;&lt;code&gt;PermissionsMixin&lt;/code&gt;&lt;/a&gt;, you must ensure you don&amp;rsquo;t invoke the permissions methods on &lt;code&gt;ModelBackend&lt;/code&gt;. &lt;code&gt;ModelBackend&lt;/code&gt; assumes that certain fields are available on your user model. If your user model doesn&amp;rsquo;t provide those fields, you&amp;rsquo;ll receive database errors when you check permissions.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.models.PermissionsMixin&quot;&gt; &lt;code&gt;PermissionsMixin&lt;/code&gt; を&lt;/a&gt;含めない場合は、 &lt;code&gt;ModelBackend&lt;/code&gt; で権限メソッドを呼び出さないようにする必要があります。 &lt;code&gt;ModelBackend&lt;/code&gt; は、ユーザーモデルで特定のフィールドが使用可能であることを前提としています。ユーザーモデルにこれらのフィールドが提供されていない場合、権限を確認するとデータベースエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="35899ce1414f3555035a9788cf172f76ca6773ef" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t like the long &lt;code&gt;gettext_lazy&lt;/code&gt; name, you can alias it as &lt;code&gt;_&lt;/code&gt; (underscore), like so:</source>
          <target state="translated">&lt;code&gt;gettext_lazy&lt;/code&gt; の長い名前が気に入らない場合は、次のように &lt;code&gt;_&lt;/code&gt; （アンダースコア）としてエイリアスできます。</target>
        </trans-unit>
        <trans-unit id="e7c2f2ae002997f7ed67a2217c27f8708bf96ef6" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t need to have the human-readable names translated, you can have them inferred from the member name (replacing underscores with spaces and using title-case):</source>
          <target state="translated">人間が読める形式の名前を翻訳する必要がない場合は、メンバー名から推測することができます（アンダースコアをスペースに置き換え、タイトルケースを使用）：</target>
        </trans-unit>
        <trans-unit id="8611658ee88ea0ad3dcc2ed7a1a97af6dae4a361" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t pass any values to &lt;code&gt;values_list()&lt;/code&gt;, it will return all the fields in the model, in the order they were declared.</source>
          <target state="translated">&lt;code&gt;values_list()&lt;/code&gt; に値を渡さない場合、モデル内のすべてのフィールドが宣言された順序で返されます。</target>
        </trans-unit>
        <trans-unit id="857e12793ad461caf04fff1ba581da785c3a5bcb" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t provide a lookup type &amp;ndash; that is, if your keyword argument doesn&amp;rsquo;t contain a double underscore &amp;ndash; the lookup type is assumed to be &lt;code&gt;exact&lt;/code&gt;.</source>
          <target state="translated">ルックアップタイプを指定しない場合、つまり、キーワード引数に二重の下線が含まれていない場合、ルックアップタイプは &lt;code&gt;exact&lt;/code&gt; と見なされます。</target>
        </trans-unit>
        <trans-unit id="b49754202789d5dcf7dd5093a036116cfc0b7e7b" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t provide a value for &lt;code&gt;content_type&lt;/code&gt;, the values in &lt;code&gt;data&lt;/code&gt; will be transmitted with a content type of &lt;em&gt;multipart/form-data&lt;/em&gt;. In this case, the key-value pairs in &lt;code&gt;data&lt;/code&gt; will be encoded as a multipart message and used to create the POST data payload.</source>
          <target state="translated">&lt;code&gt;content_type&lt;/code&gt; に値を指定しない場合、 &lt;code&gt;data&lt;/code&gt; の値はコンテンツタイプ&lt;em&gt;multipart / form-dataで送信されます&lt;/em&gt;。この場合、 &lt;code&gt;data&lt;/code&gt; キーと値のペアはマルチパートメッセージとしてエンコードされ、POSTデータペイロードの作成に使用されます。</target>
        </trans-unit>
        <trans-unit id="7e2bf3116cfcd8bcac568c28322326cd296119eb" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t set &lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-6&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; and don&amp;rsquo;t call &lt;code&gt;configure()&lt;/code&gt;, Django will raise an &lt;code&gt;ImportError&lt;/code&gt; exception the first time a setting is accessed.</source>
          <target state="translated">&lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-6&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt;を設定せず、 &lt;code&gt;configure()&lt;/code&gt; を呼び出さない場合、Djangoは設定に最初にアクセスしたときに &lt;code&gt;ImportError&lt;/code&gt; 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="dd179816ea4797c0c27e26002186e53c76cd44e3" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t set &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; and don&amp;rsquo;t call &lt;code&gt;configure()&lt;/code&gt;, Django will raise an &lt;code&gt;ImportError&lt;/code&gt; exception the first time a setting is accessed.</source>
          <target state="translated">&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; を設定せず、 &lt;code&gt;configure()&lt;/code&gt; を呼び出さない場合、Djangoは設定に初めてアクセスしたときに &lt;code&gt;ImportError&lt;/code&gt; 例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="6d28696ece852d234602878e925455bc5844a029" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t set &lt;code&gt;list_display&lt;/code&gt;, the admin site will display a single column that displays the &lt;code&gt;__str__()&lt;/code&gt; representation of each object.</source>
          <target state="translated">&lt;code&gt;list_display&lt;/code&gt; を設定しない場合、管理サイトは各オブジェクトの &lt;code&gt;__str__()&lt;/code&gt; 表現を表示する単一の列を表示します。</target>
        </trans-unit>
        <trans-unit id="a163d2bcd9e6db7c5ea4d04d3672fd598949d73a" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;primary_key=True&lt;/code&gt;&lt;/a&gt; for any fields in your model, Django will automatically add an &lt;a href=&quot;../../ref/models/fields#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt; to hold the primary key, so you don&amp;rsquo;t need to set &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;primary_key=True&lt;/code&gt;&lt;/a&gt; on any of your fields unless you want to override the default primary-key behavior. For more, see &lt;a href=&quot;#automatic-primary-key-fields&quot;&gt;Automatic primary key fields&lt;/a&gt;.</source>
          <target state="translated">あなたが指定しない場合&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;primary_key=True&lt;/code&gt; &lt;/a&gt;モデル内のすべてのフィールドのために、Djangoは自動的に追加されます&lt;a href=&quot;../../ref/models/fields#django.db.models.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; とを&lt;/a&gt;あなたが設定する必要はありませんので、主キーを保持するために&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;primary_key=True&lt;/code&gt; &lt;/a&gt;上書きする場合を除き、あなたのフィールドのいずれかにデフォルトの主キー動作。詳しくは、&lt;a href=&quot;#automatic-primary-key-fields&quot;&gt;自動主キーフィールドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="590c6fe5a79ddb6a0fb543209eff8fe3de9cd579" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify &lt;code&gt;primary_key=True&lt;/code&gt; for any field in your model, Django will automatically add an &lt;a href=&quot;#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; to hold the primary key, so you don&amp;rsquo;t need to set &lt;code&gt;primary_key=True&lt;/code&gt; on any of your fields unless you want to override the default primary-key behavior. For more, see &lt;a href=&quot;../../topics/db/models#automatic-primary-key-fields&quot;&gt;Automatic primary key fields&lt;/a&gt;.</source>
          <target state="translated">あなたが指定しない場合 &lt;code&gt;primary_key=True&lt;/code&gt; モデルの任意のフィールドについては、Djangoは自動的に追加されます&lt;a href=&quot;#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt;あなたが設定する必要はありませんので、主キーを保持するために &lt;code&gt;primary_key=True&lt;/code&gt; 上書きする場合を除き、あなたのフィールドのいずれかにデフォルトの主キー動作。詳しくは、&lt;a href=&quot;../../topics/db/models#automatic-primary-key-fields&quot;&gt;自動主キーフィールドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="04c0cebe040a5a95be05e16a67b332d448a4cdf2" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify &lt;code&gt;using&lt;/code&gt;, the &lt;code&gt;save()&lt;/code&gt; method will save into the default database allocated by the routers.</source>
          <target state="translated">&lt;code&gt;using&lt;/code&gt; を指定しない場合、 &lt;code&gt;save()&lt;/code&gt; メソッドはルーターによって割り当てられたデフォルトのデータベースに保存します。</target>
        </trans-unit>
        <trans-unit id="538f16b988998147ff60490597be28bc48eafdda" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; attribute for a field in an abstract base class, the default reverse name will be the name of the child class followed by &lt;code&gt;'_set'&lt;/code&gt;, just as it normally would be if you&amp;rsquo;d declared the field directly on the child class. For example, in the above code, if the &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; attribute was omitted, the reverse name for the &lt;code&gt;m2m&lt;/code&gt; field would be &lt;code&gt;childa_set&lt;/code&gt; in the &lt;code&gt;ChildA&lt;/code&gt; case and &lt;code&gt;childb_set&lt;/code&gt; for the &lt;code&gt;ChildB&lt;/code&gt; field.</source>
          <target state="translated">抽象基本クラスのフィールドに&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt;属性を指定しない場合、フィールドを直接宣言した場合と同じように、デフォルトの逆の名前は、子クラスの名前の後に &lt;code&gt;'_set'&lt;/code&gt; が続きます。子クラスで。たとえば、上記のコードでは、&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; の&lt;/a&gt;属性を省略した、逆流名 &lt;code&gt;m2m&lt;/code&gt; フィールドは次のようになり &lt;code&gt;childa_set&lt;/code&gt; で &lt;code&gt;ChildA&lt;/code&gt; の場合と &lt;code&gt;childb_set&lt;/code&gt; ため &lt;code&gt;ChildB&lt;/code&gt; のフィールド。</target>
        </trans-unit>
        <trans-unit id="d339100c909e90a9e5e2bd7aa909352403fa7c4f" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify an explicit &lt;code&gt;through&lt;/code&gt; model, there is still an implicit &lt;code&gt;through&lt;/code&gt; model class you can use to directly access the table created to hold the association. It has three fields to link the models.</source>
          <target state="translated">明示的な &lt;code&gt;through&lt;/code&gt; モデルを指定しない場合でも、関連付けを保持するために作成されたテーブルに直接アクセスするために使用できる暗黙の &lt;code&gt;through&lt;/code&gt; モデルクラスがまだあります。モデルをリンクする3つのフィールドがあります。</target>
        </trans-unit>
        <trans-unit id="666775cf1efa55d8c53fada8a23701a9987dd988" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify any model managers on a proxy model, it inherits the managers from its model parents. If you define a manager on the proxy model, it will become the default, although any managers defined on the parent classes will still be available.</source>
          <target state="translated">プロキシモデルでモデルマネージャを指定しない場合、モデルの親からマネージャを継承します。プロキシモデルでマネージャを定義すると、それがデフォルトになりますが、親クラスで定義されたマネージャは引き続き使用できます。</target>
        </trans-unit>
        <trans-unit id="2831dc2c926cb081c9cc4a7a2bc6243fa61db6a9" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify routing directions for the database cache model, the cache backend will use the &lt;code&gt;default&lt;/code&gt; database.</source>
          <target state="translated">データベースキャッシュモデルのルーティング方向を指定しない場合、キャッシュバックエンドは &lt;code&gt;default&lt;/code&gt; データベースを使用します。</target>
        </trans-unit>
        <trans-unit id="fd4f5afea03a0462ac45abaffd1965ddce74ce84" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want any ordering to be applied to a query, not even the default ordering, call &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt; with no parameters.</source>
          <target state="translated">クエリに順序付けを適用したくない場合、デフォルトの順序付けも&lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt;ない場合は、パラメーターなしでorder_by（）を呼び出します。</target>
        </trans-unit>
        <trans-unit id="02f361b8fc537e98dc07890f9bf542dd0f12b07f" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want data to be auto-escaped, on a per-site, per-template level or per-variable level, you can turn it off in several ways.</source>
          <target state="translated">サイトごと、テンプレートごと、または変数ごとのレベルでデータを自動エスケープしたくない場合は、いくつかの方法でオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="10b519cb1d07a83a7e8a3c4a687450cc5ea4bc3e" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want every application to be synchronized onto a particular database, you can define a &lt;a href=&quot;#topics-db-multi-db-routing&quot;&gt;database router&lt;/a&gt; that implements a policy constraining the availability of particular models.</source>
          <target state="translated">すべてのアプリケーションを特定のデータベースに同期させたくない場合は、特定のモデルの可用性を制限するポリシーを実装する&lt;a href=&quot;#topics-db-multi-db-routing&quot;&gt;データベースルーター&lt;/a&gt;を定義できます。</target>
        </trans-unit>
        <trans-unit id="d81b301e8e3d1ffb784a67d2c862ad60178d6c04" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want multiple associations between the same instances, add a &lt;a href=&quot;constraints#django.db.models.UniqueConstraint&quot;&gt;&lt;code&gt;UniqueConstraint&lt;/code&gt;&lt;/a&gt; including the from and to fields. Django&amp;rsquo;s automatically generated many-to-many tables include such a constraint.</source>
          <target state="translated">同じインスタンス間で複数の関連付けが必要ない場合は、fromフィールドとtoフィールドを含む&lt;a href=&quot;constraints#django.db.models.UniqueConstraint&quot;&gt; &lt;code&gt;UniqueConstraint&lt;/code&gt; &lt;/a&gt;を追加します。Djangoの自動生成された多対多のテーブルには、このような制約が含まれています。</target>
        </trans-unit>
        <trans-unit id="fe1aecbe271aa338db0d87a905bab0dff7f004a6" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to configure logging at all (or you want to manually configure logging using your own approach), you can set &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt;&lt;code&gt;LOGGING_CONFIG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt;. This will disable the configuration process for &lt;a href=&quot;#default-logging-configuration&quot;&gt;Django&amp;rsquo;s default logging&lt;/a&gt;.</source>
          <target state="translated">ロギングをまったく構成したくない場合（または独自のアプローチを使用して手動でロギングを構成したい場合）、&lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt; &lt;code&gt;LOGGING_CONFIG&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;None&lt;/code&gt; に設定できます。これにより、&lt;a href=&quot;#default-logging-configuration&quot;&gt;Djangoのデフォルトのログの&lt;/a&gt;構成プロセスが無効になります。</target>
        </trans-unit>
        <trans-unit id="35c4fdb0cd2c686ba39701ab3494c7c292bcb631" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to configure logging at all (or you want to manually configure logging using your own approach), you can set &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt;&lt;code&gt;LOGGING_CONFIG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt;. This will disable the configuration process for &lt;a href=&quot;#default-logging-configuration&quot;&gt;Django&amp;rsquo;s default logging&lt;/a&gt;. Here&amp;rsquo;s an example that disables Django&amp;rsquo;s logging configuration and then manually configures logging:</source>
          <target state="translated">ロギングをまったく構成しない場合（または独自のアプローチを使用して手動でロギングを構成する場合）、&lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt; &lt;code&gt;LOGGING_CONFIG&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;None&lt;/code&gt; に設定できます。これにより、&lt;a href=&quot;#default-logging-configuration&quot;&gt;Djangoのデフォルトのロギングの&lt;/a&gt;設定プロセスが無効になります。Djangoのログ設定を無効にしてから、手動でログを設定する例を次に示します。</target>
        </trans-unit>
        <trans-unit id="77c86f64e5416c16d57ada9152596773e6ea1cc7" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use &lt;code&gt;icontains&lt;/code&gt; as the lookup, you can use any lookup by appending it the field. For example, you could use &lt;a href=&quot;../../models/querysets#std:fieldlookup-exact&quot;&gt;&lt;code&gt;exact&lt;/code&gt;&lt;/a&gt; by setting &lt;code&gt;search_fields&lt;/code&gt; to &lt;code&gt;['first_name__exact']&lt;/code&gt;.</source>
          <target state="translated">ルックアップとして &lt;code&gt;icontains&lt;/code&gt; を使用したくない場合は、フィールドを追加することで任意のルックアップを使用できます。たとえば、 &lt;code&gt;search_fields&lt;/code&gt; を &lt;code&gt;['first_name__exact']&lt;/code&gt; に設定することにより、&lt;a href=&quot;../../models/querysets#std:fieldlookup-exact&quot;&gt; &lt;code&gt;exact&lt;/code&gt; &lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="31395295db9a85690ee46840f48259811129865d" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use Python&amp;rsquo;s dictConfig format to configure your logger, you can specify your own configuration scheme.</source>
          <target state="translated">PythonのdictConfig形式を使用してロガーを構成したくない場合は、独自の構成スキームを指定できます。</target>
        </trans-unit>
        <trans-unit id="515cdb51845c22c1192ff3cb9088b0aae43b5f38" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use messages, you can remove &lt;code&gt;'django.contrib.messages'&lt;/code&gt; from your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;MessageMiddleware&lt;/code&gt; line from &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;, and the &lt;code&gt;messages&lt;/code&gt; context processor from &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">あなたがメッセージを使用したくない場合は、削除することができます &lt;code&gt;'django.contrib.messages'&lt;/code&gt; あなたから&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;MessageMiddleware&lt;/code&gt; のからのライン&lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;、および &lt;code&gt;messages&lt;/code&gt; からコンテキストプロセッサ&lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9f7e47131b63bc56e18f6396512e77f9352c9650" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use sessions, you might as well remove the &lt;code&gt;SessionMiddleware&lt;/code&gt; line from &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;'django.contrib.sessions'&lt;/code&gt; from your &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;. It&amp;rsquo;ll save you a small bit of overhead.</source>
          <target state="translated">あなたがセッションを使用したくない場合は、同様に除去することがあります &lt;code&gt;SessionMiddleware&lt;/code&gt; ののからのラインを&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;および &lt;code&gt;'django.contrib.sessions'&lt;/code&gt; あなたから&lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;。それはあなたに少しのオーバーヘッドを節約します。</target>
        </trans-unit>
        <trans-unit id="9b1a1786e7b1cf25c6aacb2f5b78f4da284e5c48" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use the built-in views, but want the convenience of not having to write forms for this functionality, the authentication system provides several built-in forms located in &lt;a href=&quot;#module-django.contrib.auth.forms&quot;&gt;&lt;code&gt;django.contrib.auth.forms&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">組み込みのビューを使用したくないが、この機能のフォームを作成する必要がないという利便性が必要な場合、認証システムは&lt;a href=&quot;#module-django.contrib.auth.forms&quot;&gt; &lt;code&gt;django.contrib.auth.forms&lt;/code&gt; に&lt;/a&gt;あるいくつかの組み込みのフォームを提供します。</target>
        </trans-unit>
        <trans-unit id="4b45b7b54dc69e9c451ecaac2c9aed0cb4634c14" translate="yes" xml:space="preserve">
          <source>If you downloaded the &lt;a href=&quot;#worldborders&quot;&gt;World Borders&lt;/a&gt; data earlier in the tutorial, then you can determine its path using Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt;&lt;code&gt;pathlib.Path&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">あなたがダウンロードした場合&lt;a href=&quot;#worldborders&quot;&gt;世界の国境の&lt;/a&gt;以前のチュートリアル内のデータを、あなたはPythonの使用して、そのパスを決定することができ&lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt; &lt;code&gt;pathlib.Path&lt;/code&gt; を&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="5c568e3de4c1c7c6a2712e65c1fa4112cf06d36a" translate="yes" xml:space="preserve">
          <source>If you downloaded the &lt;a href=&quot;#worldborders&quot;&gt;World Borders&lt;/a&gt; data earlier in the tutorial, then you can determine its path using Python&amp;rsquo;s built-in &lt;code&gt;os&lt;/code&gt; module:</source>
          <target state="translated">チュートリアルの前半で&lt;a href=&quot;#worldborders&quot;&gt;World Borders&lt;/a&gt;データをダウンロードした場合、Pythonの組み込み &lt;code&gt;os&lt;/code&gt; モジュールを使用してそのパスを決定できます。</target>
        </trans-unit>
        <trans-unit id="455d07668f86b3453aef324fdb20b370ef36fb11" translate="yes" xml:space="preserve">
          <source>If you enable &lt;code&gt;redirect_authenticated_user&lt;/code&gt;, other websites will be able to determine if their visitors are authenticated on your site by requesting redirect URLs to image files on your website. To avoid this &amp;ldquo;&lt;a href=&quot;https://robinlinus.github.io/socialmedia-leak/&quot;&gt;social media fingerprinting&lt;/a&gt;&amp;rdquo; information leakage, host all images and your favicon on a separate domain.</source>
          <target state="translated">&lt;code&gt;redirect_authenticated_user&lt;/code&gt; を有効にすると、他のWebサイトは、Webサイト上の画像ファイルへのリダイレクトURLを要求することにより、訪問者がサイトで認証されているかどうかを判断できます。この「&lt;a href=&quot;https://robinlinus.github.io/socialmedia-leak/&quot;&gt;ソーシャルメディアのフィンガープリント&lt;/a&gt;」情報の漏洩を回避するには、すべての画像とファビコンを別のドメインでホストします。</target>
        </trans-unit>
        <trans-unit id="6de81e981c118fcef157137194f59e4a18089f15" translate="yes" xml:space="preserve">
          <source>If you enable the &lt;a href=&quot;../../ref/templates/api#django.template.context_processors.i18n&quot;&gt;&lt;code&gt;django.template.context_processors.i18n&lt;/code&gt;&lt;/a&gt; context processor, then each &lt;code&gt;RequestContext&lt;/code&gt; will have access to &lt;code&gt;LANGUAGES&lt;/code&gt;, &lt;code&gt;LANGUAGE_CODE&lt;/code&gt;, and &lt;code&gt;LANGUAGE_BIDI&lt;/code&gt; as defined above.</source>
          <target state="translated">&lt;a href=&quot;../../ref/templates/api#django.template.context_processors.i18n&quot;&gt; &lt;code&gt;django.template.context_processors.i18n&lt;/code&gt; &lt;/a&gt;コンテキストプロセッサを有効にすると、各 &lt;code&gt;RequestContext&lt;/code&gt; は、上で定義した &lt;code&gt;LANGUAGES&lt;/code&gt; 、 &lt;code&gt;LANGUAGE_CODE&lt;/code&gt; 、および &lt;code&gt;LANGUAGE_BIDI&lt;/code&gt; にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="729e00760630570ad607e0e6587465fb4412384e" translate="yes" xml:space="preserve">
          <source>If you enable this and need to send the value of the CSRF token with an AJAX request, your JavaScript must pull the value &lt;a href=&quot;csrf#acquiring-csrf-token-from-html&quot;&gt;from a hidden CSRF token form input&lt;/a&gt; instead of &lt;a href=&quot;csrf#acquiring-csrf-token-from-cookie&quot;&gt;from the cookie&lt;/a&gt;.</source>
          <target state="translated">これを有効にし、AJAXリクエストでCSRFトークンの値を送信する必要がある場合、JavaScript &lt;a href=&quot;csrf#acquiring-csrf-token-from-cookie&quot;&gt;はCookieからでは&lt;/a&gt;なく&lt;a href=&quot;csrf#acquiring-csrf-token-from-html&quot;&gt;、非表示のCSRFトークンフォーム入力から&lt;/a&gt;値をプルする必要があります。</target>
        </trans-unit>
        <trans-unit id="eecda653f4341e8484e3844f08cb3debaa15b75a" translate="yes" xml:space="preserve">
          <source>If you enable this option and there is concurrent access to the async-unsafe parts of Django, you may suffer data loss or corruption. Be very careful and do not use this in production environments.</source>
          <target state="translated">このオプションを有効にして、Django の非同期で安全でない部分への同時アクセスがある場合、データの損失や破損が発生する可能性があります。十分に注意して、本番環境では使用しないでください。</target>
        </trans-unit>
        <trans-unit id="690f4bcf8a157bd61ea9244f015553c0c9c48320" translate="yes" xml:space="preserve">
          <source>If you encounter an error during the installation, your system might be missing a dependency for one or more of the Python packages. Consult the failing package&amp;rsquo;s documentation or search the Web with the error message that you encounter.</source>
          <target state="translated">インストール中にエラーが発生した場合は、システムに1つ以上のPythonパッケージの依存関係がない可能性があります。失敗したパッケージのドキュメントを参照するか、発生したエラーメッセージでWebを検索してください。</target>
        </trans-unit>
        <trans-unit id="a6da4243a036aa29469a63cceb377bd8e3d4c0cc" translate="yes" xml:space="preserve">
          <source>If you encounter the following error when using &lt;code&gt;LayerMapping&lt;/code&gt; and MySQL:</source>
          <target state="translated">&lt;code&gt;LayerMapping&lt;/code&gt; とMySQL を使用しているときに次のエラーが発生した場合：</target>
        </trans-unit>
        <trans-unit id="388118dd7f5efca0821c54391ac838c186b2e0db" translate="yes" xml:space="preserve">
          <source>If you encounter this error, most likely your code is comparing these two things:</source>
          <target state="translated">このエラーが発生した場合、ほとんどの場合、あなたのコードがこれらの2つを比較している可能性があります。</target>
        </trans-unit>
        <trans-unit id="453875e39942a1ebb0f9d4262e3a3da68e8a4e2c" translate="yes" xml:space="preserve">
          <source>If you encounter this error, you should fix your code to not call the offending code from an async context. Instead, write your code that talks to async-unsafe functions in its own, sync function, and call that using &lt;a href=&quot;#asgiref.sync.sync_to_async&quot;&gt;&lt;code&gt;asgiref.sync.sync_to_async()&lt;/code&gt;&lt;/a&gt; (or any other way of running sync code in its own thread).</source>
          <target state="translated">このエラーが発生した場合は、非同期コンテキストから問題のあるコードを呼び出さないようにコードを修正する必要があります。代わりに、async-unsafe関数と&lt;a href=&quot;#asgiref.sync.sync_to_async&quot;&gt; &lt;code&gt;asgiref.sync.sync_to_async()&lt;/code&gt; &lt;/a&gt;するコードを独自のsync関数で記述し、asgiref.sync.sync_to_async（）（または独自のスレッドで同期コードを実行する他の方法）を使用して呼び出します。</target>
        </trans-unit>
        <trans-unit id="9980a2e684bd447360258377b3fadc41c30bff5f" translate="yes" xml:space="preserve">
          <source>If you encounter this error, you should fix your code to not call the offending code from an async context; instead, write your code that talks to async-unsafe in its own, synchronous function, and call that using &lt;code&gt;asgiref.sync.async_to_sync&lt;/code&gt;, or any other preferred way of running synchronous code in its own thread.</source>
          <target state="translated">このエラーが発生した場合は、非同期コンテキストから問題のコードを呼び出さないようにコードを修正する必要があります。代わりに、独自の同期関数でasync-unsafeと &lt;code&gt;asgiref.sync.async_to_sync&lt;/code&gt; コードを記述し、asgiref.sync.async_to_syncまたは独自のスレッドで同期コードを実行するその他の推奨される方法を使用して呼び出します。</target>
        </trans-unit>
        <trans-unit id="d44bb95904902ba04b1303875f334e1056e1ab60" translate="yes" xml:space="preserve">
          <source>If you expect a queryset to already return one row, you can use &lt;code&gt;get()&lt;/code&gt; without any arguments to return the object for that row:</source>
          <target state="translated">クエリセットがすでに1つの行を返すことが予想される場合は、引数なしで &lt;code&gt;get()&lt;/code&gt; を使用して、その行のオブジェクトを返すことができます。</target>
        </trans-unit>
        <trans-unit id="c318da5e64838ab0635a2445fb6173a140f25b28" translate="yes" xml:space="preserve">
          <source>If you expect a queryset to return one row, you can use &lt;code&gt;get()&lt;/code&gt; without any arguments to return the object for that row:</source>
          <target state="translated">クエリセットが1つの行を返すことが予想される場合は、引数なしで &lt;code&gt;get()&lt;/code&gt; を使用して、その行のオブジェクトを返すことができます。</target>
        </trans-unit>
        <trans-unit id="b49a74a0b115f2bc1bddecbe1ff4268a349bfe46" translate="yes" xml:space="preserve">
          <source>If you find yourself doing this often, you might consider creating a custom &lt;a href=&quot;../../howto/custom-template-tags#howto-custom-template-tags-inclusion-tags&quot;&gt;inclusion tag&lt;/a&gt;.</source>
          <target state="translated">これを頻繁に行う場合は、カスタムの&lt;a href=&quot;../../howto/custom-template-tags#howto-custom-template-tags-inclusion-tags&quot;&gt;包含タグを&lt;/a&gt;作成することを検討してください。</target>
        </trans-unit>
        <trans-unit id="08b548542180a05ddc30c78ed125af341d51e6c9" translate="yes" xml:space="preserve">
          <source>If you find yourself duplicating content in a number of templates, it probably means you should move that content to a &lt;code&gt;{% block %}&lt;/code&gt; in a parent template.</source>
          <target state="translated">複数のテンプレートでコンテンツを複製している場合は、そのコンテンツを親テンプレートの &lt;code&gt;{% block %}&lt;/code&gt; に移動する必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="ed5f5b63170617e447bc7e02390a27114c2912d5" translate="yes" xml:space="preserve">
          <source>If you find yourself needing a response class that Django doesn&amp;rsquo;t provide, you can create it with the help of &lt;a href=&quot;https://docs.python.org/3/library/http.html#http.HTTPStatus&quot;&gt;&lt;code&gt;http.HTTPStatus&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">Djangoが提供していない応答クラスが必要な場合は、&lt;a href=&quot;https://docs.python.org/3/library/http.html#http.HTTPStatus&quot;&gt; &lt;code&gt;http.HTTPStatus&lt;/code&gt; を&lt;/a&gt;使用して作成できます。例えば：</target>
        </trans-unit>
        <trans-unit id="a6acad9064fdbc3ea2b22b0bcfca87cc4ffc3ec7" translate="yes" xml:space="preserve">
          <source>If you find yourself needing to write an SQL query that is too complex for Django&amp;rsquo;s database-mapper to handle, you can fall back on writing SQL by hand. Django has a couple of options for writing raw SQL queries; see &lt;a href=&quot;sql&quot;&gt;Performing raw SQL queries&lt;/a&gt;.</source>
          <target state="translated">Djangoのデータベースマッパーで処理するには複雑すぎるSQLクエリを作成する必要がある場合は、手動でSQLを作成する必要があります。Djangoには生のSQLクエリを書くためのオプションがいくつかあります。&lt;a href=&quot;sql&quot;&gt;生のSQLクエリの実行を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2ad1e5c64873a39591bff334fe500d215c29ad49" translate="yes" xml:space="preserve">
          <source>If you get a 404 when requesting &lt;code&gt;/books/acme/&lt;/code&gt;, check to ensure you actually have a Publisher with the name &amp;lsquo;ACME Publishing&amp;rsquo;. Generic views have an &lt;code&gt;allow_empty&lt;/code&gt; parameter for this case. See the &lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;class-based-views reference&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;/books/acme/&lt;/code&gt; をリクエストするときに404を取得した場合は、「ACME Publishing」という名前のパブリッシャーが実際にあることを確認してください。この場合、汎用ビューには &lt;code&gt;allow_empty&lt;/code&gt; パラメーターがあります。詳細については、&lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;クラスベースビューのリファレンス&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="7f7742ad36754cc74a4903fa526fb289e4d0d2b4" translate="yes" xml:space="preserve">
          <source>If you get a &lt;code&gt;UnicodeEncodeError&lt;/code&gt; when uploading files with file names that contain non-ASCII characters, make sure Apache is configured to accept non-ASCII file names:</source>
          <target state="translated">非ASCII文字を含むファイル名のファイルをアップロードするときに &lt;code&gt;UnicodeEncodeError&lt;/code&gt; が発生する場合は、ASPが非ASCIIファイル名を受け入れるように構成されていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="7616ac6b8d7c3639812f35a6bc31e6c215afa7ae" translate="yes" xml:space="preserve">
          <source>If you get a &lt;code&gt;UnicodeEncodeError&lt;/code&gt; when uploading files with file names that contain non-ASCII characters, make sure uWSGI is configured to accept non-ASCII file names by adding this to your &lt;code&gt;uwsgi.ini&lt;/code&gt;:</source>
          <target state="translated">非ASCII文字を含むファイル名のファイルをアップロードするときに &lt;code&gt;UnicodeEncodeError&lt;/code&gt; が発生した場合は、 &lt;code&gt;uwsgi.ini&lt;/code&gt; にこれを追加して、非ASCIIファイル名を受け入れるようにuWSGIが構成されていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="b3df4479a6ed3992aa239152c3ea200360f998d8" translate="yes" xml:space="preserve">
          <source>If you get an error page here, check that you&amp;rsquo;re going to &lt;a href=&quot;http://localhost:8000/polls/&quot;&gt;http://localhost:8000/polls/&lt;/a&gt; and not &lt;a href=&quot;http://localhost:8000/&quot;&gt;http://localhost:8000/&lt;/a&gt;.</source>
          <target state="translated">ここでエラーページが表示される場合は、&lt;a href=&quot;http://localhost:8000/polls/&quot;&gt;http：// localhost：8000 /&lt;/a&gt;ではなく&lt;a href=&quot;http://localhost:8000/&quot;&gt;http：// localhost：8000 / &lt;/a&gt;polls /にアクセスすることを確認してください。</target>
        </trans-unit>
        <trans-unit id="824450c24cc06cc488eedd8f4d3692a22b966d5a" translate="yes" xml:space="preserve">
          <source>If you give the field a &lt;a href=&quot;#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;, ensure it&amp;rsquo;s an immutable object, such as a &lt;code&gt;str&lt;/code&gt;, or a callable object that returns a fresh mutable object each time, such as &lt;code&gt;dict&lt;/code&gt; or a function. Providing a mutable default object like &lt;code&gt;default={}&lt;/code&gt; or &lt;code&gt;default=[]&lt;/code&gt; shares the one object between all model instances.</source>
          <target state="translated">フィールドに&lt;a href=&quot;#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;する場合は、 &lt;code&gt;str&lt;/code&gt; などの不変オブジェクト、または &lt;code&gt;dict&lt;/code&gt; や関数などの毎回新しい可変オブジェクトを返す呼び出し可能オブジェクトであることを確認してください。 &lt;code&gt;default={}&lt;/code&gt; や &lt;code&gt;default=[]&lt;/code&gt; のような変更可能なデフォルトオブジェクトを提供すると、すべてのモデルインスタンス間で1つのオブジェクトが共有されます。</target>
        </trans-unit>
        <trans-unit id="069b129e53ef4f85715fcc43dda8a29afa775b23" translate="yes" xml:space="preserve">
          <source>If you give the field a &lt;a href=&quot;../../models/fields#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;, ensure it&amp;rsquo;s a callable such as &lt;code&gt;dict&lt;/code&gt; (for an empty default) or a callable that returns a dict (such as a function). Incorrectly using &lt;code&gt;default={}&lt;/code&gt; creates a mutable default that is shared between all instances of &lt;code&gt;JSONField&lt;/code&gt;.</source>
          <target state="translated">フィールドに&lt;a href=&quot;../../models/fields#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; を指定&lt;/a&gt;する場合、それが &lt;code&gt;dict&lt;/code&gt; （空のデフォルトの場合）などの呼び出し可能オブジェクト、またはdict（関数など）を返す呼び出し可能オブジェクトであることを確認してください。 &lt;code&gt;default={}&lt;/code&gt; を誤って使用すると、 &lt;code&gt;JSONField&lt;/code&gt; のすべてのインスタンス間で共有される変更可能なデフォルトが作成されます。</target>
        </trans-unit>
        <trans-unit id="27410732e928525d8c647604e8926b8d0498bdf6" translate="yes" xml:space="preserve">
          <source>If you give the field a &lt;a href=&quot;../../models/fields#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;, ensure it&amp;rsquo;s a callable such as &lt;code&gt;list&lt;/code&gt; (for an empty default) or a callable that returns a list (such as a function). Incorrectly using &lt;code&gt;default=[]&lt;/code&gt; creates a mutable default that is shared between all instances of &lt;code&gt;ArrayField&lt;/code&gt;.</source>
          <target state="translated">フィールドに&lt;a href=&quot;../../models/fields#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; を指定&lt;/a&gt;する場合は、それが &lt;code&gt;list&lt;/code&gt; などの呼び出し可能オブジェクト（空のデフォルトの場合）またはリストを返す呼び出し可能オブジェクト（関数など）であることを確認してください。 &lt;code&gt;default=[]&lt;/code&gt; を誤って使用すると、 &lt;code&gt;ArrayField&lt;/code&gt; のすべてのインスタンス間で共有される変更可能なデフォルトが作成されます。</target>
        </trans-unit>
        <trans-unit id="e341d486c0a6527afd40afba3bbf387252d13451" translate="yes" xml:space="preserve">
          <source>If you had a URL &lt;code&gt;/redirect_me/&lt;/code&gt; that redirected to &lt;code&gt;/next/&lt;/code&gt;, that redirected to &lt;code&gt;/final/&lt;/code&gt;, this is what you&amp;rsquo;d see:</source>
          <target state="translated">あなたが持っていた場合は、URL &lt;code&gt;/redirect_me/&lt;/code&gt; そのリダイレクトへ &lt;code&gt;/next/&lt;/code&gt; にリダイレクトすることを &lt;code&gt;/final/&lt;/code&gt; 、これはあなたが見たいものです。</target>
        </trans-unit>
        <trans-unit id="e18323392212f10a65b2daa3a1a10c84409a9d06" translate="yes" xml:space="preserve">
          <source>If you have a &amp;ldquo;rich&amp;rdquo; shell installed but want to force use of the &amp;ldquo;plain&amp;rdquo; Python interpreter, use &lt;code&gt;python&lt;/code&gt; as the interface name, like so:</source>
          <target state="translated">「リッチ」シェルがインストールされているが、「プレーン」なPythonインタープリターを強制的に使用したい場合は、次のようにインターフェース名として &lt;code&gt;python&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="5d8adf9ea9a8d83fd0e8e6616d3cb139fe7ee8e2" translate="yes" xml:space="preserve">
          <source>If you have a &lt;code&gt;GPSCoordinatesField&lt;/code&gt;, for example, and want to be able to access additional information about the coordinates in a template, this could be implemented as follows:</source>
          <target state="translated">あなたが持っている場合は &lt;code&gt;GPSCoordinatesField&lt;/code&gt; を、例えば、テンプレートの座標に関する追加情報にアクセスできるようにしたい、次のように、これを実施することができます。</target>
        </trans-unit>
        <trans-unit id="d61d684a756350ad6251ad220974916e91d79976" translate="yes" xml:space="preserve">
          <source>If you have a &lt;code&gt;Place&lt;/code&gt; that is also a &lt;code&gt;Restaurant&lt;/code&gt;, you can get from the &lt;code&gt;Place&lt;/code&gt; object to the &lt;code&gt;Restaurant&lt;/code&gt; object by using the lowercase version of the model name:</source>
          <target state="translated">あなたが持っている場合は &lt;code&gt;Place&lt;/code&gt; もある &lt;code&gt;Restaurant&lt;/code&gt; 、あなたから得ることができる &lt;code&gt;Place&lt;/code&gt; にオブジェクト &lt;code&gt;Restaurant&lt;/code&gt; モデル名の小文字バージョンを使用して、オブジェクト：</target>
        </trans-unit>
        <trans-unit id="e101b1692181a5bd9c21e9a4901c5f705625b68f" translate="yes" xml:space="preserve">
          <source>If you have a background in programming, or if you&amp;rsquo;re used to languages which mix programming code directly into HTML, you&amp;rsquo;ll want to bear in mind that the Django template system is not simply Python embedded into HTML. This is by design: the template system is meant to express presentation, not program logic.</source>
          <target state="translated">プログラミングのバックグラウンドがある場合、またはプログラミングコードを直接HTMLに混在させる言語に慣れている場合は、Djangoテンプレートシステムは単にHTMLに埋め込まれたPythonではないことに注意してください。これは設計によるものです。テンプレートシステムは、プレゼンテーションを表現するためのものであり、プログラムロジックではありません。</target>
        </trans-unit>
        <trans-unit id="59e1b17500d931bbf50d9ce94988d17d56a10749" translate="yes" xml:space="preserve">
          <source>If you have a bound &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance and want to change the data somehow, or if you want to bind an unbound &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance to some data, create another &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance. There is no way to change data in a &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance. Once a &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance has been created, you should consider its data immutable, whether it has data or not.</source>
          <target state="translated">バインドされた&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;インスタンスがあり、何らかの方法でデータを変更する場合、またはバインドされていない&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;インスタンスをデータにバインドする場合は、別の&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;インスタンスを作成します。&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;インスタンスのデータを変更する方法はありません。一度&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;インスタンスが作成されている、あなたはそれがデータを持っているかどうかにかかわらず、そのデータの不変を検討すべきです。</target>
        </trans-unit>
        <trans-unit id="978ffd4b507205bec211ecb6fb44da5a6411e504" translate="yes" xml:space="preserve">
          <source>If you have a complex application, you may want to run tests automatically with every commit for the purposes of &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;continuous integration&lt;/a&gt;, so that quality control is itself - at least partially - automated.</source>
          <target state="translated">複雑なアプリケーションがある場合、&lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;継続的インテグレーション&lt;/a&gt;の目的で、コミットごとにテストを自動的に実行して、品質管理自体を（少なくとも部分的に）自動化することができます。</target>
        </trans-unit>
        <trans-unit id="e8cd69861c19aec280ff4c3da106598eae268983" translate="yes" xml:space="preserve">
          <source>If you have a different database and aren&amp;rsquo;t sure if it supports DDL transactions, check the &lt;code&gt;django.db.connection.features.can_rollback_ddl&lt;/code&gt; attribute.</source>
          <target state="translated">別のデータベースがあり、DDLトランザクションをサポートしているかどうかが不明な場合は、 &lt;code&gt;django.db.connection.features.can_rollback_ddl&lt;/code&gt; 属性を確認してください。</target>
        </trans-unit>
        <trans-unit id="5b7fdb666d2c7387f8e88756c3572339b99b1480" translate="yes" xml:space="preserve">
          <source>If you have a field called &lt;code&gt;foo&lt;/code&gt; that is a &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, the default &lt;code&gt;values()&lt;/code&gt; call will return a dictionary key called &lt;code&gt;foo_id&lt;/code&gt;, since this is the name of the hidden model attribute that stores the actual value (the &lt;code&gt;foo&lt;/code&gt; attribute refers to the related model). When you are calling &lt;code&gt;values()&lt;/code&gt; and passing in field names, you can pass in either &lt;code&gt;foo&lt;/code&gt; or &lt;code&gt;foo_id&lt;/code&gt; and you will get back the same thing (the dictionary key will match the field name you passed in).</source>
          <target state="translated">&lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;である &lt;code&gt;foo&lt;/code&gt; と呼ばれるフィールドがある場合、これは実際の値を格納する非表示モデル属性の名前であるため、デフォルトの &lt;code&gt;values()&lt;/code&gt; 呼び出しは &lt;code&gt;foo_id&lt;/code&gt; と呼ばれる辞書キーを返します（ &lt;code&gt;foo&lt;/code&gt; 属性は関連するモデルを参照します） ）。 &lt;code&gt;values()&lt;/code&gt; を呼び出してフィールド名を渡す場合、 &lt;code&gt;foo&lt;/code&gt; または &lt;code&gt;foo_id&lt;/code&gt; のいずれかを渡すと、同じものが返されます（辞書キーは、渡したフィールド名と一致します）。</target>
        </trans-unit>
        <trans-unit id="16711bcb9d7d51d98a29ea22696d824133aa4a4b" translate="yes" xml:space="preserve">
          <source>If you have a field named &lt;code&gt;defaults&lt;/code&gt; and want to use it as an exact lookup in &lt;code&gt;get_or_create()&lt;/code&gt;, use &lt;code&gt;'defaults__exact'&lt;/code&gt;, like so:</source>
          <target state="translated">&lt;code&gt;defaults&lt;/code&gt; という名前のフィールドがあり、 &lt;code&gt;get_or_create()&lt;/code&gt; での正確なルックアップとして使用したい &lt;code&gt;'defaults__exact'&lt;/code&gt; 、次のように'defaults__exact'を使用します。</target>
        </trans-unit>
        <trans-unit id="d37c7ca73612e3f18e551c6e6e5ec5e6e3aab068" translate="yes" xml:space="preserve">
          <source>If you have a function that returns text and you want to be able to take lazy arguments while delaying their evaluation, you can use this decorator:</source>
          <target state="translated">テキストを返す関数があって、その評価を遅らせながら遅延引数を取れるようにしたい場合は、このデコレータを使うことができます。</target>
        </trans-unit>
        <trans-unit id="e0d31ad051cee43c03199fe35d1cfc46041814b9" translate="yes" xml:space="preserve">
          <source>If you have a model that is defined using an &lt;a href=&quot;db/models#abstract-base-classes&quot;&gt;abstract base class&lt;/a&gt;, you don&amp;rsquo;t have to do anything special to serialize that model. Call the serializer on the object (or objects) that you want to serialize, and the output will be a complete representation of the serialized object.</source>
          <target state="translated">&lt;a href=&quot;db/models#abstract-base-classes&quot;&gt;抽象基本クラス&lt;/a&gt;を使用して定義されたモデルがある場合、そのモデルをシリアル化するために特別なことを行う必要はありません。シリアル化するオブジェクト（1つまたは複数）でシリアライザを呼び出すと、出力はシリアル化されたオブジェクトの完全な表現になります。</target>
        </trans-unit>
        <trans-unit id="e6770af4d44284b72b625f55e0971a26874c906c" translate="yes" xml:space="preserve">
          <source>If you have a set of common decorators used in several places, you can define a list or tuple of decorators and use this instead of invoking &lt;code&gt;method_decorator()&lt;/code&gt; multiple times. These two classes are equivalent:</source>
          <target state="translated">複数の場所で使用される共通のデコレータのセットがある場合、デコレータのリストまたはタプルを定義し、 &lt;code&gt;method_decorator()&lt;/code&gt; を複数回呼び出す代わりにこれを使用できます。これら2つのクラスは同等です。</target>
        </trans-unit>
        <trans-unit id="79b825e9cb0e34e49d16acfbe8a24478320f86a0" translate="yes" xml:space="preserve">
          <source>If you have an authenticated user you want to attach to the current session - this is done with a &lt;a href=&quot;#django.contrib.auth.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">現在のセッションに接続したい認証済みユーザーがいる場合、これは&lt;a href=&quot;#django.contrib.auth.login&quot;&gt; &lt;code&gt;login()&lt;/code&gt; &lt;/a&gt;関数で行われます。</target>
        </trans-unit>
        <trans-unit id="026d9fcdfc9b1f7521fa03bbe9b4114c2b909148" translate="yes" xml:space="preserve">
          <source>If you have an existing database with an older, weak hash such as MD5 or SHA1, you might want to upgrade those hashes yourself instead of waiting for the upgrade to happen when a user logs in (which may never happen if a user doesn&amp;rsquo;t return to your site). In this case, you can use a &amp;ldquo;wrapped&amp;rdquo; password hasher.</source>
          <target state="translated">MD5やSHA1などの古くて弱いハッシュを持つ既存のデータベースがある場合は、ユーザーがログインしたときにアップグレードが行われるのを待つのではなく、自分でそれらのハッシュをアップグレードすることをお勧めします（ユーザーがログインしない場合は決して起こりません）。サイトに戻ります）。この場合、「ラップされた」パスワードハッシャーを使用できます。</target>
        </trans-unit>
        <trans-unit id="b86b91ddb2f98a42f4900d8c7c7782b7b091a39b" translate="yes" xml:space="preserve">
          <source>If you have an idea for functionality to include in &lt;code&gt;contrib&lt;/code&gt;, let us know! Code it up, and post it to the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/mailing-lists/#django-users-mailing-list&quot;&gt;django-users&lt;/a&gt; mailing list.</source>
          <target state="translated">&lt;code&gt;contrib&lt;/code&gt; に含める機能のアイデアがある場合は、お知らせください！コーディングして、&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/mailing-lists/#django-users-mailing-list&quot;&gt;django-users&lt;/a&gt;メーリングリストに投稿してください。</target>
        </trans-unit>
        <trans-unit id="83d150fd871b3c780160a5e729ba2cd5515b0ee6" translate="yes" xml:space="preserve">
          <source>If you have an idea for functionality to include in &lt;code&gt;contrib&lt;/code&gt;, let us know! Code it up, and post it to the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/mailing-lists/#django-users-mailing-list&quot;&gt;django-users&lt;/a&gt; mailing list.</source>
          <target state="translated">&lt;code&gt;contrib&lt;/code&gt; に含める機能についてのアイデアがあれば、お知らせください。コードを&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/mailing-lists/#django-users-mailing-list&quot;&gt;記述&lt;/a&gt;して、django-usersメーリングリストに投稿してください。</target>
        </trans-unit>
        <trans-unit id="19c3b5495362847755cae62d7b220043549d25b3" translate="yes" xml:space="preserve">
          <source>If you have an iterable of model instances, you can prefetch related attributes on those instances using the &lt;a href=&quot;#django.db.models.prefetch_related_objects&quot;&gt;&lt;code&gt;prefetch_related_objects()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">モデルインスタンスの反復可能オブジェクトがある場合は、&lt;a href=&quot;#django.db.models.prefetch_related_objects&quot;&gt; &lt;code&gt;prefetch_related_objects()&lt;/code&gt; &lt;/a&gt;関数を使用して、それらのインスタンスの関連属性をプリフェッチできます。</target>
        </trans-unit>
        <trans-unit id="37904d083a93c2edd3d70d07fdce8e8357fcda8e" translate="yes" xml:space="preserve">
          <source>If you have any problems, please see the troubleshooting section below for suggestions and solutions.</source>
          <target state="translated">何か問題がある場合は、以下のトラブルシューティングのセクションを参照して、提案と解決策を確認してください。</target>
        </trans-unit>
        <trans-unit id="ec0d4ee5c753dc222b01df5bf0c69c8624af1347" translate="yes" xml:space="preserve">
          <source>If you have app and project templates directories that both contain overrides, the default Django template loader will try to load the template from the project-level directory first. In other words, &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; is searched before &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt;&lt;code&gt;APP_DIRS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">アプリテンプレートとプロジェクトテンプレートディレクトリの両方にオーバーライドが含まれている場合、デフォルトのDjangoテンプレートローダーは、最初にプロジェクトレベルのディレクトリからテンプレートをロードしようとします。つまり、&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt; &lt;code&gt;APP_DIRS&lt;/code&gt; の&lt;/a&gt;前に検索されます。</target>
        </trans-unit>
        <trans-unit id="08d9347c3a2e9dd49fb8cc1c6728cc1b9165b3fb" translate="yes" xml:space="preserve">
          <source>If you have created a &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt; method, you don&amp;rsquo;t need to worry about &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_internal_type&quot;&gt;&lt;code&gt;get_internal_type()&lt;/code&gt;&lt;/a&gt; &amp;ndash; it won&amp;rsquo;t be used much. Sometimes, though, your database storage is similar in type to some other field, so you can use that other field&amp;rsquo;s logic to create the right column.</source>
          <target state="translated">あなたが作成している場合&lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt; &lt;code&gt;db_type()&lt;/code&gt; &lt;/a&gt;メソッドを、あなたが心配する必要はありません&lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_internal_type&quot;&gt; &lt;code&gt;get_internal_type()&lt;/code&gt; &lt;/a&gt; -それはあまり使用されません。ただし、データベースストレージのタイプが他のフィールドと似ている場合があるので、他のフィールドのロジックを使用して正しい列を作成できます。</target>
        </trans-unit>
        <trans-unit id="b5976cd51ea3df04ddca3661787303e1989a9bdd" translate="yes" xml:space="preserve">
          <source>If you have customized authentication (see &lt;a href=&quot;customizing&quot;&gt;Customizing Authentication&lt;/a&gt;) you can use a custom authentication form by setting the &lt;code&gt;authentication_form&lt;/code&gt; attribute. This form must accept a &lt;code&gt;request&lt;/code&gt; keyword argument in its &lt;code&gt;__init__()&lt;/code&gt; method and provide a &lt;code&gt;get_user()&lt;/code&gt; method which returns the authenticated user object (this method is only ever called after successful form validation).</source>
          <target state="translated">認証をカスタマイズした場合（「&lt;a href=&quot;customizing&quot;&gt;認証のカスタマイズ&lt;/a&gt;」を参照）、 &lt;code&gt;authentication_form&lt;/code&gt; 属性を設定することにより、カスタム認証フォームを使用できます。このフォームは、 &lt;code&gt;__init__()&lt;/code&gt; &lt;code&gt;get_user()&lt;/code&gt; __（）メソッドで &lt;code&gt;request&lt;/code&gt; キーワード引数を受け入れ、認証されたユーザーオブジェクトを返すget_user（）メソッドを提供する必要があります（このメソッドは、フォームの検証が成功した後にのみ呼び出されます）。</target>
        </trans-unit>
        <trans-unit id="e49e350f7aca08322a1d5e22652de39cfc978ac8" translate="yes" xml:space="preserve">
          <source>If you have difficulty finding where the Django source files are located on your system, run the following command:</source>
          <target state="translated">Django のソースファイルがシステム上のどこにあるかわからない場合は、以下のコマンドを実行してください。</target>
        </trans-unit>
        <trans-unit id="2ed6656727786d8c5a9c10718cdb288f20ac8eaf" translate="yes" xml:space="preserve">
          <source>If you have installed a &lt;a href=&quot;../../../topics/auth/customizing#auth-custom-user&quot;&gt;custom user model&lt;/a&gt; and want to use this default auth handler, it must support an &lt;code&gt;is_active&lt;/code&gt; attribute. If you want to use group based authorization, your custom user must have a relation named &amp;lsquo;groups&amp;rsquo;, referring to a related object that has a &amp;lsquo;name&amp;rsquo; field. You can also specify your own custom mod_wsgi auth handler if your custom cannot conform to these requirements.</source>
          <target state="translated">あなたがインストールしている場合は&lt;a href=&quot;../../../topics/auth/customizing#auth-custom-user&quot;&gt;、カスタム・ユーザー・モデルを&lt;/a&gt;して、このデフォルト認証ハンドラを使用したい、それがサポートしている必要があります &lt;code&gt;is_active&lt;/code&gt; 属性を。グループベースの承認を使用する場合、カスタムユーザーは、「名前」フィールドを持つ関連オブジェクトを参照する「グループ」という名前の関係を持っている必要があります。カスタムがこれらの要件に準拠できない場合は、独自のカスタムmod_wsgi認証ハンドラーを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="2f1712a605e1df12222b17db97359a92359d57b3" translate="yes" xml:space="preserve">
          <source>If you have multiple &lt;code&gt;Form&lt;/code&gt; classes that share fields, you can use subclassing to remove redundancy.</source>
          <target state="translated">フィールドを共有する複数の &lt;code&gt;Form&lt;/code&gt; クラスがある場合、サブクラス化を使用して冗長性を削除できます。</target>
        </trans-unit>
        <trans-unit id="c6aa2d211b2f44d42c468cde0eb6bc8be637e6dd" translate="yes" xml:space="preserve">
          <source>If you have multiple caches defined in &lt;a href=&quot;../../ref/settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt;, Django will use the default cache. To use another cache, set &lt;a href=&quot;../../ref/settings#std:setting-SESSION_CACHE_ALIAS&quot;&gt;&lt;code&gt;SESSION_CACHE_ALIAS&lt;/code&gt;&lt;/a&gt; to the name of that cache.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; &lt;/a&gt;で複数のキャッシュが定義されている場合、Djangoはデフォルトのキャッシュを使用します。別のキャッシュを使用するには、&lt;a href=&quot;../../ref/settings#std:setting-SESSION_CACHE_ALIAS&quot;&gt; &lt;code&gt;SESSION_CACHE_ALIAS&lt;/code&gt; &lt;/a&gt;をそのキャッシュの名前に設定します。</target>
        </trans-unit>
        <trans-unit id="0daeb88e4409e7fba4cbaee7d1c51bff9fbbe585" translate="yes" xml:space="preserve">
          <source>If you have test classes that cannot be run in parallel (e.g. because they share a common resource), you can use &lt;code&gt;django.test.testcases.SerializeMixin&lt;/code&gt; to run them sequentially. This mixin uses a filesystem &lt;code&gt;lockfile&lt;/code&gt;.</source>
          <target state="translated">並行して実行できないテストクラスがある場合（たとえば、共通のリソースを共有しているため）、 &lt;code&gt;django.test.testcases.SerializeMixin&lt;/code&gt; を使用して、それらを順次実行できます。このミックスインはファイルシステムの &lt;code&gt;lockfile&lt;/code&gt; ファイルを使用します。</target>
        </trans-unit>
        <trans-unit id="69e118594fe6d021ccddfba860e486fc346e2e24" translate="yes" xml:space="preserve">
          <source>If you have test classes that cannot be run in parallel, you can use &lt;code&gt;SerializeMixin&lt;/code&gt; to run them sequentially. See &lt;a href=&quot;../topics/testing/advanced#topics-testing-enforce-run-sequentially&quot;&gt;Enforce running test classes sequentially&lt;/a&gt;.</source>
          <target state="translated">並行して実行できないテストクラスがある場合は、 &lt;code&gt;SerializeMixin&lt;/code&gt; を使用してそれらを順次実行できます。&lt;a href=&quot;../topics/testing/advanced#topics-testing-enforce-run-sequentially&quot;&gt;テストクラスを順次実行するを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="db6b634100bf984485aba1e1d164f951a1225a84" translate="yes" xml:space="preserve">
          <source>If you have the Django admin installed, you can also &lt;a href=&quot;#auth-admin&quot;&gt;create users interactively&lt;/a&gt;.</source>
          <target state="translated">Django adminがインストールされている場合は、&lt;a href=&quot;#auth-admin&quot;&gt;対話的にユーザーを作成&lt;/a&gt;することもできます。</target>
        </trans-unit>
        <trans-unit id="2000ff382760e480cb9b499a00548bfca0c2d7fe" translate="yes" xml:space="preserve">
          <source>If you have the Django admin installed, you can also change user&amp;rsquo;s passwords on the &lt;a href=&quot;#auth-admin&quot;&gt;authentication system&amp;rsquo;s admin pages&lt;/a&gt;.</source>
          <target state="translated">Django管理者がインストールされている場合は、&lt;a href=&quot;#auth-admin&quot;&gt;認証システムの管理者ページで&lt;/a&gt;ユーザーのパスワードを変更することもできます。</target>
        </trans-unit>
        <trans-unit id="59e6b390f0fb4a292f006284bfad36ce56a1c450" translate="yes" xml:space="preserve">
          <source>If you have tried function based generic views in the past and found them lacking, you should not think of class-based generic views as a class-based equivalent, but rather as a fresh approach to solving the original problems that generic views were meant to solve.</source>
          <target state="translated">過去に関数ベースのジェネリック・ビューを試してみて、それが不足していることに気づいた場合、クラスベースのジェネリック・ビューをクラスベースの等価物と考えるのではなく、ジェネリック・ビューが解決しようとしていた本来の問題を解決するための新鮮なアプローチとして考えるべきです。</target>
        </trans-unit>
        <trans-unit id="efd9aa9b8fc35677ff19eb12feae61a2f1dd1243" translate="yes" xml:space="preserve">
          <source>If you haven&amp;rsquo;t added any extra options on top of the field you inherited from, then there&amp;rsquo;s no need to write a new &lt;code&gt;deconstruct()&lt;/code&gt; method. If, however, you&amp;rsquo;re changing the arguments passed in &lt;code&gt;__init__()&lt;/code&gt; (like we are in &lt;code&gt;HandField&lt;/code&gt;), you&amp;rsquo;ll need to supplement the values being passed.</source>
          <target state="translated">継承元のフィールドの上に追加のオプションを追加していない場合は、新しい &lt;code&gt;deconstruct()&lt;/code&gt; メソッドを作成する必要はありません。ただし、 &lt;code&gt;__init__()&lt;/code&gt; &lt;code&gt;HandField&lt;/code&gt; __（）で渡される引数を変更する場合（HandFieldの場合と同様）、渡される値を補足する必要があります。</target>
        </trans-unit>
        <trans-unit id="4ea2ba3519701ee1ea3735aa6135ecb00e08b0a0" translate="yes" xml:space="preserve">
          <source>If you haven&amp;rsquo;t recently completed Tutorials 1&amp;ndash;7, we encourage you to review these so that your example project matches the one described below.</source>
          <target state="translated">チュートリアル1〜7を最近完了していない場合は、これらを確認して、サンプルプロジェクトが下記のプロジェクトと一致するようにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b16b0bccf0c08600a1fbaec81d987234f8ac3c71" translate="yes" xml:space="preserve">
          <source>If you haven&amp;rsquo;t set up backups for your database, do it right now!</source>
          <target state="translated">データベースのバックアップを設定していない場合は、今すぐ設定してください！</target>
        </trans-unit>
        <trans-unit id="3abc3fddfa394c8f2c33c40961d7aa2e45568252" translate="yes" xml:space="preserve">
          <source>If you implement &lt;code&gt;__init__&lt;/code&gt; in your subclass of &lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt;&lt;code&gt;BaseCommand&lt;/code&gt;&lt;/a&gt;, you must call &lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt;&lt;code&gt;BaseCommand&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;code&gt;__init__&lt;/code&gt;:</source>
          <target state="translated">あなたが実装する場合 &lt;code&gt;__init__&lt;/code&gt; のサブクラスで&lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt; &lt;code&gt;BaseCommand&lt;/code&gt; &lt;/a&gt;、あなたが呼び出す必要があり&lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt; &lt;code&gt;BaseCommand&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;__init__&lt;/code&gt; を：</target>
        </trans-unit>
        <trans-unit id="a3b78e197955bcb146a1c23c5d00f08fdb545c8d" translate="yes" xml:space="preserve">
          <source>If you implement custom model fields that inherit from &lt;a href=&quot;models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; directly, are overriding &lt;a href=&quot;models/fields#django.db.models.Field.get_prep_value&quot;&gt;&lt;code&gt;get_prep_value()&lt;/code&gt;&lt;/a&gt;, or use &lt;a href=&quot;models/expressions#django.db.models.expressions.RawSQL&quot;&gt;&lt;code&gt;RawSQL&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.extra&quot;&gt;&lt;code&gt;extra()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../topics/db/sql#django.db.models.Manager.raw&quot;&gt;&lt;code&gt;raw()&lt;/code&gt;&lt;/a&gt;, you should ensure that you perform appropriate typecasting.</source>
          <target state="translated">&lt;a href=&quot;models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;から直接継承するカスタムモデルフィールドを実装する場合、&lt;a href=&quot;models/fields#django.db.models.Field.get_prep_value&quot;&gt; &lt;code&gt;get_prep_value()&lt;/code&gt; を&lt;/a&gt;オーバーライドする場合、または&lt;a href=&quot;models/expressions#django.db.models.expressions.RawSQL&quot;&gt; &lt;code&gt;RawSQL&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.extra&quot;&gt; &lt;code&gt;extra()&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../topics/db/sql#django.db.models.Manager.raw&quot;&gt; &lt;code&gt;raw()&lt;/code&gt; &lt;/a&gt;を使用する場合は、適切な型キャストを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="4d14c28506b4a41e79a0a531c1100009cf8a5877" translate="yes" xml:space="preserve">
          <source>If you import models directly rather than using the historical models, your migrations &lt;em&gt;may work initially&lt;/em&gt; but will fail in the future when you try to re-run old migrations (commonly, when you set up a new installation and run through all the migrations to set up the database).</source>
          <target state="translated">履歴モデルを使用するのではなく直接モデルをインポートする場合、移行&lt;em&gt;は最初&lt;/em&gt;は機能する&lt;em&gt;かもしれ&lt;/em&gt;ませんが、古い移行を再実行しようとすると失敗する&lt;em&gt;可能性があり&lt;/em&gt;ます（通常、新しいインストールをセットアップし、すべての移行を実行して設定する場合）データベースをアップします）。</target>
        </trans-unit>
        <trans-unit id="4dcf54cc839f3636de3833bb33a943b51d4b3e83" translate="yes" xml:space="preserve">
          <source>If you install your project&amp;rsquo;s Python dependencies inside a &lt;a href=&quot;https://docs.python.org/3/library/venv.html#module-venv&quot;&gt;&lt;code&gt;virtual
environment&lt;/code&gt;&lt;/a&gt;, add the path using &lt;code&gt;WSGIPythonHome&lt;/code&gt;. See the &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html&quot;&gt;mod_wsgi virtual environment guide&lt;/a&gt; for more details.</source>
          <target state="translated">プロジェクトのPython依存関係を&lt;a href=&quot;https://docs.python.org/3/library/venv.html#module-venv&quot;&gt; &lt;code&gt;virtual environment&lt;/code&gt; &lt;/a&gt;内にインストールする場合は、 &lt;code&gt;WSGIPythonHome&lt;/code&gt; を使用してパスを追加します。詳細については、&lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html&quot;&gt;mod_wsgi仮想環境ガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="44070fbe89941700ca164927fd2839d802124e64" translate="yes" xml:space="preserve">
          <source>If you install your project&amp;rsquo;s Python dependencies inside a &lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt;, add the path to the virtualenv using &lt;code&gt;WSGIPythonHome&lt;/code&gt;. See the &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html&quot;&gt;mod_wsgi virtualenv guide&lt;/a&gt; for more details.</source>
          <target state="translated">あなたが内部のプロジェクトのPythonの依存関係をインストールした場合&lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenvを&lt;/a&gt;使用して、virtualenvののパスを追加し &lt;code&gt;WSGIPythonHome&lt;/code&gt; を。詳細については、&lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html&quot;&gt;mod_wsgi virtualenvガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a74cb3689863414b53e2cc2ad45826c27f81e941" translate="yes" xml:space="preserve">
          <source>If you installed Django with &lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt;, you can use the &lt;code&gt;--upgrade&lt;/code&gt; or &lt;code&gt;-U&lt;/code&gt; flag:</source>
          <target state="translated">Djangoを&lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt;でインストールした場合は、-- &lt;code&gt;--upgrade&lt;/code&gt; または &lt;code&gt;-U&lt;/code&gt; フラグを使用できます。</target>
        </trans-unit>
        <trans-unit id="0e1355dc1d54e62ec3be4d96bc279fa717ea1aa3" translate="yes" xml:space="preserve">
          <source>If you intend to allow users to upload files, you must ensure that the environment used to run Django is configured to work with non-ASCII file names. If your environment isn&amp;rsquo;t configured correctly, you&amp;rsquo;ll encounter &lt;code&gt;UnicodeEncodeError&lt;/code&gt; exceptions when saving files with file names that contain non-ASCII characters.</source>
          <target state="translated">ユーザーにファイルのアップロードを許可する場合は、Djangoの実行に使用される環境が非ASCIIファイル名で機能するように構成されていることを確認する必要があります。環境が正しく構成されていない場合、非ASCII文字を含むファイル名でファイルを保存すると、 &lt;code&gt;UnicodeEncodeError&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="4acb8b00d983476c1c0fae9d2bcb2eb3c71e63d5" translate="yes" xml:space="preserve">
          <source>If you just want to experiment with Django, skip ahead to the next section; Django includes a lightweight web server you can use for testing, so you won&amp;rsquo;t need to set up Apache until you&amp;rsquo;re ready to deploy Django in production.</source>
          <target state="translated">Djangoを試してみたいだけの場合は、次のセクションに進んでください。Djangoには、テストに使用できる軽量のWebサーバーが含まれているため、Djangoを本番環境にデプロイする準備ができるまで、Apacheを設定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="3568f1bdadbf483dacd6fb9b4be3a20a4b3cc65b" translate="yes" xml:space="preserve">
          <source>If you just want to get some data from your tables into a serialized form, you could use the &lt;a href=&quot;../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata&lt;/code&gt;&lt;/a&gt; management command.</source>
          <target state="translated">テーブルからシリアル化された形式にデータを取得するだけの場合は、&lt;a href=&quot;../ref/django-admin#django-admin-dumpdata&quot;&gt; &lt;code&gt;dumpdata&lt;/code&gt; &lt;/a&gt;管理コマンドを使用できます。</target>
        </trans-unit>
        <trans-unit id="4e09fa0bd8a3a147ea439259f86c751ca2fbfc03" translate="yes" xml:space="preserve">
          <source>If you just want to get started already (and nobody would blame you!), try taking a look at the list of &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;has_patch=0&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;easy tickets that need patches&lt;/a&gt; and the &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_better_patch=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;easy tickets that have patches which need improvement&lt;/a&gt;. If you&amp;rsquo;re familiar with writing tests, you can also look at the list of &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_tests=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;easy tickets that need tests&lt;/a&gt;. Remember to follow the guidelines about claiming tickets that were mentioned in the link to Django&amp;rsquo;s documentation on &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/submitting-patches/&quot;&gt;claiming tickets and submitting patches&lt;/a&gt;.</source>
          <target state="translated">すでに始めたいだけの場合（そして誰もあなたを責めることはないでしょう！）、&lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_better_patch=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;パッチが必要なイージーチケット&lt;/a&gt;と、改善が&lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;has_patch=0&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;必要なパッチ&lt;/a&gt;があるイージーチケットのリストを見てみてください。テストの作成に慣れている場合は、&lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_tests=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;テストが必要な簡単なチケット&lt;/a&gt;のリストも確認できます。チケットの&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/submitting-patches/&quot;&gt;請求とパッチの提出&lt;/a&gt;に関するDjangoのドキュメントへのリンクに記載されているチケットの請求に関するガイドラインに従ってください。</target>
        </trans-unit>
        <trans-unit id="e71f753d1a94701cabfdc64cd8592ac2d4550327" translate="yes" xml:space="preserve">
          <source>If you just want to get started already (and nobody would blame you!), try taking a look at the list of &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;has_patch=0&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;easy tickets that need patches&lt;/a&gt; and the &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_better_patch=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;easy tickets that have patches which need improvement&lt;/a&gt;. If you&amp;rsquo;re familiar with writing tests, you can also look at the list of &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_tests=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;easy tickets that need tests&lt;/a&gt;. Remember to follow the guidelines about claiming tickets that were mentioned in the link to Django&amp;rsquo;s documentation on &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/writing-code/submitting-patches/&quot;&gt;claiming tickets and submitting patches&lt;/a&gt;.</source>
          <target state="translated">あなただけ（と誰もあなたを責めないだろう！）すでに始めたい場合は、リストを見てとってみてください&lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;has_patch=0&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;簡単なチケットその必要性パッチ&lt;/a&gt;と&lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_better_patch=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;その必要性の改善パッチが簡単にチケット&lt;/a&gt;。テストの作成に精通して&lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_tests=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;いる場合は、テストが必要な簡単なチケット&lt;/a&gt;のリストも確認できます。チケットの&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/writing-code/submitting-patches/&quot;&gt;請求とパッチの送信&lt;/a&gt;に関するDjangoのドキュメントへのリンクに記載されているチケットの請求に関するガイドラインに従うことを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="c50512e5b7b4d2917fd0ded7753af940b02ac0a6" translate="yes" xml:space="preserve">
          <source>If you know there is only one object that matches your query, you can use the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; method on a &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; which returns the object directly:</source>
          <target state="translated">クエリに一致するオブジェクトが1つしかないことがわかっている場合は、&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;で&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、オブジェクトを直接返します。</target>
        </trans-unit>
        <trans-unit id="a4d46c64f50d662db0e36989441c746c4eb15547" translate="yes" xml:space="preserve">
          <source>If you know which models you&amp;rsquo;ll be using most often, you can also add a &amp;ldquo;reverse&amp;rdquo; generic relationship to enable an additional API. For example:</source>
          <target state="translated">最も頻繁に使用するモデルがわかっている場合は、「リバース」の一般的な関係を追加して、追加のAPIを有効にすることもできます。例えば：</target>
        </trans-unit>
        <trans-unit id="c191fd40bd25e99c36f57ceff24ea08151258536" translate="yes" xml:space="preserve">
          <source>If you leave off the &lt;code&gt;name&lt;/code&gt; argument, as in the second example above, Django will use the function&amp;rsquo;s name as the filter name.</source>
          <target state="translated">あなたがオフのままにしておくと &lt;code&gt;name&lt;/code&gt; 引数を、上述の第2の例のように、Djangoはフィルタ名と関数名を使用します。</target>
        </trans-unit>
        <trans-unit id="e8bf004d14c563eb22c00ca8e5526f83bb38a104" translate="yes" xml:space="preserve">
          <source>If you leave off the &lt;code&gt;name&lt;/code&gt; argument, as in the second example above, Django will use the function&amp;rsquo;s name as the tag name.</source>
          <target state="translated">あなたがオフのままにしておくと &lt;code&gt;name&lt;/code&gt; 引数を、上述の第2の例のように、Djangoは、タグ名として関数名を使用します。</target>
        </trans-unit>
        <trans-unit id="950469d51b06aaa88a367dde3845db6577c50567" translate="yes" xml:space="preserve">
          <source>If you like the widgets that the Django Admin application uses, feel free to use them in your own application! They&amp;rsquo;re all stored in &lt;code&gt;django.contrib.admin.widgets&lt;/code&gt;.</source>
          <target state="translated">Django管理アプリケーションが使用するウィジェットが気に入ったら、自分のアプリケーションで自由に使用してください！それらはすべて &lt;code&gt;django.contrib.admin.widgets&lt;/code&gt; に保存されています。</target>
        </trans-unit>
        <trans-unit id="338ebae0cd2defb4e2b46e3293b08157abaa3c2b" translate="yes" xml:space="preserve">
          <source>If you look at any change list in the admin, you&amp;rsquo;ll see this feature in action; Django ships with a &amp;ldquo;delete selected objects&amp;rdquo; action available to all models. For example, here&amp;rsquo;s the user module from Django&amp;rsquo;s built-in &lt;a href=&quot;../../../topics/auth/index#module-django.contrib.auth&quot;&gt;&lt;code&gt;django.contrib.auth&lt;/code&gt;&lt;/a&gt; app:</source>
          <target state="translated">管理者の変更リストを見ると、この機能が動作していることがわかります。Djangoには、すべてのモデルで利用可能な「選択したオブジェクトの削除」アクションが付属しています。たとえば、次はDjangoの組み込み&lt;a href=&quot;../../../topics/auth/index#module-django.contrib.auth&quot;&gt; &lt;code&gt;django.contrib.auth&lt;/code&gt; &lt;/a&gt;アプリのユーザーモジュールです。</target>
        </trans-unit>
        <trans-unit id="563d1c2d9d163e085568958c9f2b6d9c96629a36" translate="yes" xml:space="preserve">
          <source>If you look carefully, you can see that the portion that was generated by &lt;code&gt;quote()&lt;/code&gt; in the second example was not double-quoted when passed to &lt;code&gt;iri_to_uri()&lt;/code&gt;. This is a very important and useful feature. It means that you can construct your IRI without worrying about whether it contains non-ASCII characters and then, right at the end, call &lt;code&gt;iri_to_uri()&lt;/code&gt; on the result.</source>
          <target state="translated">注意深く見ると、2番目の例で &lt;code&gt;quote()&lt;/code&gt; によって生成された部分が &lt;code&gt;iri_to_uri()&lt;/code&gt; に渡されたときに二重引用符で囲まれていないことがわかります。これは非常に重要で便利な機能です。つまり、ASCII以外の文字が含まれているかどうかを気にすることなくIRIを構築し、最後に、結果 &lt;code&gt;iri_to_uri()&lt;/code&gt; を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="fae37143701969595b56a1de835f003e68a717b5" translate="yes" xml:space="preserve">
          <source>If you manually render fields in the template, you can render &lt;code&gt;can_delete&lt;/code&gt; parameter with &lt;code&gt;{{ form.DELETE }}&lt;/code&gt;:</source>
          <target state="translated">テンプレートのフィールドを手動でレンダリングする場合は、 &lt;code&gt;{{ form.DELETE }}&lt;/code&gt; を使用して &lt;code&gt;can_delete&lt;/code&gt; パラメータをレンダリングできます。</target>
        </trans-unit>
        <trans-unit id="f75b2bb9e0e1faedcbcaf93a8d2cb2f193a634dc" translate="yes" xml:space="preserve">
          <source>If you meet this requirement, then substitute the &lt;code&gt;OSMGeoAdmin&lt;/code&gt; option class in your &lt;code&gt;admin.py&lt;/code&gt; file:</source>
          <target state="translated">この要件を満たしている場合は、 &lt;code&gt;admin.py&lt;/code&gt; ファイルの &lt;code&gt;OSMGeoAdmin&lt;/code&gt; オプションクラスを置き換えます。</target>
        </trans-unit>
        <trans-unit id="cb77b3727fe1f39422116c93df21b4f10b4b7b3e" translate="yes" xml:space="preserve">
          <source>If you merely want to test the output of your asynchronous views, the standard test client will run them inside their own asynchronous loop without any extra work needed on your part.</source>
          <target state="translated">単に非同期ビューの出力をテストしたいだけなら、標準のテストクライアントが非同期ループの中で実行してくれます。</target>
        </trans-unit>
        <trans-unit id="225bae64392f765fd429b21ea8ac02f57f4afb72" translate="yes" xml:space="preserve">
          <source>If you need an empty migration file to write your own &lt;code&gt;Operation&lt;/code&gt; objects into, use &lt;code&gt;python manage.py makemigrations --empty yourappname&lt;/code&gt;, but be aware that manually adding schema-altering operations can confuse the migration autodetector and make resulting runs of &lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; output incorrect code.</source>
          <target state="translated">独自の &lt;code&gt;Operation&lt;/code&gt; オブジェクトを書き込むために空の移行ファイルが必要な場合は、 &lt;code&gt;python manage.py makemigrations --empty yourappname&lt;/code&gt; を使用します。ただし、スキーマ変更操作を手動で追加すると、移行自動検出機能が混乱し、結果として&lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; の&lt;/a&gt;実行が誤ったコードを出力する可能性があります。 。</target>
        </trans-unit>
        <trans-unit id="c26240f024c2f3e478948f8f7fec8bbb42d821c0" translate="yes" xml:space="preserve">
          <source>If you need custom template loading or custom context object instantiation, create a &lt;code&gt;TemplateResponse&lt;/code&gt; subclass and assign it to &lt;code&gt;response_class&lt;/code&gt;.</source>
          <target state="translated">カスタムテンプレートの読み込みまたはカスタムコンテキストオブジェクトのインスタンス化が必要な場合は、 &lt;code&gt;TemplateResponse&lt;/code&gt; サブクラスを作成し、それを &lt;code&gt;response_class&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="d33ecf64697d7de63f58f86dbfaa4f84e060248a" translate="yes" xml:space="preserve">
          <source>If you need different precedence, you will need to use nested &lt;a href=&quot;#std:templatetag-if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; tags. Sometimes that is better for clarity anyway, for the sake of those who do not know the precedence rules.</source>
          <target state="translated">別の優先順位が必要な場合は、ネストされた&lt;a href=&quot;#std:templatetag-if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;タグを使用する必要があります。優先順位のルールを知らない人のために、それはとにかく明確にするために時々それはより良いです。</target>
        </trans-unit>
        <trans-unit id="94aa71aa505c6a16108b61bb062ab6ada6bf5751" translate="yes" xml:space="preserve">
          <source>If you need more control, you can create your own authentication backend that inherits from &lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend&quot;&gt;&lt;code&gt;RemoteUserBackend&lt;/code&gt;&lt;/a&gt; and override one or more of its attributes and methods.</source>
          <target state="translated">さらに制御が必要な場合は、&lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend&quot;&gt; &lt;code&gt;RemoteUserBackend&lt;/code&gt; &lt;/a&gt;から継承する独自の認証バックエンドを作成し、その1つ以上の属性とメソッドをオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="758aabbe668d354fb6f337c8ed3f754bf52e0550" translate="yes" xml:space="preserve">
          <source>If you need more control, you can create your own authentication backend that inherits from this class and override these attributes or methods:</source>
          <target state="translated">より多くの制御が必要な場合は、このクラスを継承した独自の認証バックエンドを作成し、これらの属性やメソッドをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="0e28d0fde6b118d6feed4accf2b47a636af43e24" translate="yes" xml:space="preserve">
          <source>If you need more fine-grained control, use a tuple (or list) as value for &lt;code&gt;list_select_related&lt;/code&gt;. Empty tuple will prevent Django from calling &lt;code&gt;select_related&lt;/code&gt; at all. Any other tuple will be passed directly to &lt;code&gt;select_related&lt;/code&gt; as parameters. For example:</source>
          <target state="translated">さらに細かい制御が必要な場合は、 &lt;code&gt;list_select_related&lt;/code&gt; の値としてタプル（またはリスト）を使用します。空のタプルは、Djangoが &lt;code&gt;select_related&lt;/code&gt; を呼び出せないようにします。その他のタプルは、 &lt;code&gt;select_related&lt;/code&gt; にパラメーターとして直接渡されます。例えば：</target>
        </trans-unit>
        <trans-unit id="d8cb56dde557370f78a7f18c4a395b3fd0b21ee4" translate="yes" xml:space="preserve">
          <source>If you need more flexibility, you could also add a new argument to your custom &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;makemessages&lt;/code&gt;&lt;/a&gt; command:</source>
          <target state="translated">さらに柔軟性が必要な場合は、カスタム&lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;makemessages&lt;/code&gt; &lt;/a&gt;コマンドに新しい引数を追加することもできます。</target>
        </trans-unit>
        <trans-unit id="aff7c703e8b54ba634b913901864d3aa00cffcf1" translate="yes" xml:space="preserve">
          <source>If you need the response to be streamed from the iterator to the client, you must use the &lt;a href=&quot;#django.http.StreamingHttpResponse&quot;&gt;&lt;code&gt;StreamingHttpResponse&lt;/code&gt;&lt;/a&gt; class instead.</source>
          <target state="translated">イテレータからクライアントにストリーミングする応答が必要な場合は、代わりに&lt;a href=&quot;#django.http.StreamingHttpResponse&quot;&gt; &lt;code&gt;StreamingHttpResponse&lt;/code&gt; &lt;/a&gt;クラスを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="9cf5c4ff845a5d20e57ce99fe95fc4dfe26d3a0d" translate="yes" xml:space="preserve">
          <source>If you need to access a membership&amp;rsquo;s information you may do so by directly querying the &lt;code&gt;Membership&lt;/code&gt; model:</source>
          <target state="translated">メンバーシップの情報にアクセスする必要がある場合は、 &lt;code&gt;Membership&lt;/code&gt; モデルを直接クエリしてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="29d093239d80818b0b1e33570e4407bb058ea195" translate="yes" xml:space="preserve">
          <source>If you need to access some additional information about a form field in a template and using a subclass of &lt;a href=&quot;fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t sufficient, consider also customizing &lt;a href=&quot;#django.forms.BoundField&quot;&gt;&lt;code&gt;BoundField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テンプレートのフォームフィールドに関する追加情報にアクセスする必要があり、&lt;a href=&quot;fields#django.forms.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; の&lt;/a&gt;サブクラスを使用するだけでは不十分な場合は、&lt;a href=&quot;#django.forms.BoundField&quot;&gt; &lt;code&gt;BoundField&lt;/code&gt; の&lt;/a&gt;カスタマイズも検討してください。</target>
        </trans-unit>
        <trans-unit id="ecb3aea88ed07bec970c7d28d05fa46d621b0e09" translate="yes" xml:space="preserve">
          <source>If you need to add a PostgreSQL extension (like &lt;code&gt;hstore&lt;/code&gt;, &lt;code&gt;postgis&lt;/code&gt;, etc.) using a migration, use the &lt;a href=&quot;contrib/postgres/operations#django.contrib.postgres.operations.CreateExtension&quot;&gt;&lt;code&gt;CreateExtension&lt;/code&gt;&lt;/a&gt; operation.</source>
          <target state="translated">あなたは（のようなPostgreSQLの拡張を追加する必要がある場合 &lt;code&gt;hstore&lt;/code&gt; の、 &lt;code&gt;postgis&lt;/code&gt; 移行を使用してなど、）、使用&lt;a href=&quot;contrib/postgres/operations#django.contrib.postgres.operations.CreateExtension&quot;&gt; &lt;code&gt;CreateExtension&lt;/code&gt; の&lt;/a&gt;操作を。</target>
        </trans-unit>
        <trans-unit id="e450e893ae7afe1bc2e22ffb0c5a0a76816766d3" translate="yes" xml:space="preserve">
          <source>If you need to add additional fields to the formset this can be easily accomplished. The formset base class provides an &lt;code&gt;add_fields&lt;/code&gt; method. You can override this method to add your own fields or even redefine the default fields/attributes of the order and deletion fields:</source>
          <target state="translated">formsetにフィールドを追加する必要がある場合、これは簡単に実行できます。formset基本クラスは &lt;code&gt;add_fields&lt;/code&gt; メソッドを提供します。このメソッドをオーバーライドして、独自のフィールドを追加したり、注文および削除フィールドのデフォルトのフィールド/属性を再定義したりすることもできます。</target>
        </trans-unit>
        <trans-unit id="a49d29d22712c0f8cc4a9ef3a3f1dc48cf130bea" translate="yes" xml:space="preserve">
          <source>If you need to change how emails are sent you can write your own email backend. The &lt;a href=&quot;../ref/settings#std:setting-EMAIL_BACKEND&quot;&gt;&lt;code&gt;EMAIL_BACKEND&lt;/code&gt;&lt;/a&gt; setting in your settings file is then the Python import path for your backend class.</source>
          <target state="translated">メールの送信方法を変更する必要がある場合は、独自のメールバックエンドを作成できます。設定ファイルの&lt;a href=&quot;../ref/settings#std:setting-EMAIL_BACKEND&quot;&gt; &lt;code&gt;EMAIL_BACKEND&lt;/code&gt; &lt;/a&gt;設定は、バックエンドクラスのPythonインポートパスになります。</target>
        </trans-unit>
        <trans-unit id="e5fa605cf3f76c4428e51ca9506d8d5da266d92c" translate="yes" xml:space="preserve">
          <source>If you need to change this default behavior, create the intermediary table as an explicit model (with &lt;code&gt;managed&lt;/code&gt; set as needed) and use the &lt;a href=&quot;fields#django.db.models.ManyToManyField.through&quot;&gt;&lt;code&gt;ManyToManyField.through&lt;/code&gt;&lt;/a&gt; attribute to make the relation use your custom model.</source>
          <target state="translated">このデフォルトの動作を変更する必要がある場合は、中間テーブルを明示的なモデルとして作成し（必要に応じて &lt;code&gt;managed&lt;/code&gt; セットを使用）、&lt;a href=&quot;fields#django.db.models.ManyToManyField.through&quot;&gt; &lt;code&gt;ManyToManyField.through&lt;/code&gt; &lt;/a&gt;属性を使用してリレーションでカスタムモデルを使用します。</target>
        </trans-unit>
        <trans-unit id="417131b19902519fe0b468a60926a5bf16770559" translate="yes" xml:space="preserve">
          <source>If you need to clear the list of related fields added by past calls of &lt;code&gt;select_related&lt;/code&gt; on a &lt;code&gt;QuerySet&lt;/code&gt;, you can pass &lt;code&gt;None&lt;/code&gt; as a parameter:</source>
          <target state="translated">あなたは過去の呼び出しによって追加の関連分野の一覧クリアする必要がある場合は &lt;code&gt;select_related&lt;/code&gt; に &lt;code&gt;QuerySet&lt;/code&gt; 、あなたが渡すことはできません &lt;code&gt;None&lt;/code&gt; パラメータとしては：</target>
        </trans-unit>
        <trans-unit id="16b5139d25521e92cae75d82c00fd807f514ef86" translate="yes" xml:space="preserve">
          <source>If you need to construct a &lt;code&gt;File&lt;/code&gt; yourself, the easiest way is to create one using a Python built-in &lt;code&gt;file&lt;/code&gt; object:</source>
          <target state="translated">自分で &lt;code&gt;File&lt;/code&gt; を作成する必要がある場合、最も簡単な方法は、Pythonの組み込み &lt;code&gt;file&lt;/code&gt; オブジェクトを使用してファイルを作成することです。</target>
        </trans-unit>
        <trans-unit id="3c6d8d98e29f39567c45f015a91e483e346b4e97" translate="yes" xml:space="preserve">
          <source>If you need to create a relationship on a model that has not yet been defined, you can use the name of the model, rather than the model object itself:</source>
          <target state="translated">まだ定義されていないモデルにリレーションシップを作成する必要がある場合は、モデルオブジェクト自体ではなくモデルの名前を使用することができます。</target>
        </trans-unit>
        <trans-unit id="65d871b7088c66feacdac17c59f3a01772b1f023" translate="yes" xml:space="preserve">
          <source>If you need to create a user to login with, use the &lt;a href=&quot;../../django-admin#django-admin-createsuperuser&quot;&gt;&lt;code&gt;createsuperuser&lt;/code&gt;&lt;/a&gt; command. By default, logging in to the admin requires that the user has the &lt;a href=&quot;../auth#django.contrib.auth.models.User.is_superuser&quot;&gt;&lt;code&gt;is_superuser&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../auth#django.contrib.auth.models.User.is_staff&quot;&gt;&lt;code&gt;is_staff&lt;/code&gt;&lt;/a&gt; attribute set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">ログインに使用するユーザーを作成する必要がある場合は、&lt;a href=&quot;../../django-admin#django-admin-createsuperuser&quot;&gt; &lt;code&gt;createsuperuser&lt;/code&gt; &lt;/a&gt;コマンドを使用します。デフォルトでは、管理者にログインするには、ユーザーが&lt;a href=&quot;../auth#django.contrib.auth.models.User.is_superuser&quot;&gt; &lt;code&gt;is_superuser&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../auth#django.contrib.auth.models.User.is_staff&quot;&gt; &lt;code&gt;is_staff&lt;/code&gt; &lt;/a&gt;属性を &lt;code&gt;True&lt;/code&gt; に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="a8c2e6ded6b51f5db806ed60abec233f32b0b1f1" translate="yes" xml:space="preserve">
          <source>If you need to customize error reports beyond filtering you may specify a custom error reporter class by defining the &lt;a href=&quot;../ref/settings#std:setting-DEFAULT_EXCEPTION_REPORTER&quot;&gt;&lt;code&gt;DEFAULT_EXCEPTION_REPORTER&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">フィルタリング以外のエラーレポートをカスタマイズする必要がある場合は、&lt;a href=&quot;../ref/settings#std:setting-DEFAULT_EXCEPTION_REPORTER&quot;&gt; &lt;code&gt;DEFAULT_EXCEPTION_REPORTER&lt;/code&gt; &lt;/a&gt;設定を定義して、カスタムエラーレポータークラスを指定できます。</target>
        </trans-unit>
        <trans-unit id="d65af76fc2fae362276614f23f186268a8063338" translate="yes" xml:space="preserve">
          <source>If you need to customize search you can use &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_search_results&quot;&gt;&lt;code&gt;ModelAdmin.get_search_results()&lt;/code&gt;&lt;/a&gt; to provide additional or alternate search behavior.</source>
          <target state="translated">検索をカスタマイズする必要がある場合は、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_search_results&quot;&gt; &lt;code&gt;ModelAdmin.get_search_results()&lt;/code&gt; &lt;/a&gt;を使用して、追加または代替の検索動作を提供できます。</target>
        </trans-unit>
        <trans-unit id="268d1539953ae22ff11a5330553a90257431d684" translate="yes" xml:space="preserve">
          <source>If you need to customize the SQL mode, you can set the &lt;code&gt;sql_mode&lt;/code&gt; variable like other MySQL options: either in a config file or with the entry &lt;code&gt;'init_command': &quot;SET sql_mode='STRICT_TRANS_TABLES'&quot;&lt;/code&gt; in the &lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/a&gt; part of your database configuration in &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">SQLモードをカスタマイズする必要がある場合は、他のMySQLオプションと同様に &lt;code&gt;sql_mode&lt;/code&gt; 変数を設定できます：構成ファイルまたはエントリ &lt;code&gt;'init_command': &quot;SET sql_mode='STRICT_TRANS_TABLES'&quot;&lt;/code&gt; で、データベース構成の&lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt; &lt;code&gt;OPTIONS&lt;/code&gt; &lt;/a&gt;部分に&lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5590b9cc3e5a4f06eb74e308901af7ab377968ea" translate="yes" xml:space="preserve">
          <source>If you need to disable a &lt;a href=&quot;#adminsite-actions&quot;&gt;site-wide action&lt;/a&gt; you can call &lt;a href=&quot;#django.contrib.admin.AdminSite.disable_action&quot;&gt;&lt;code&gt;AdminSite.disable_action()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#adminsite-actions&quot;&gt;サイト全体のアクション&lt;/a&gt;を無効にする必要がある場合は、&lt;a href=&quot;#django.contrib.admin.AdminSite.disable_action&quot;&gt; &lt;code&gt;AdminSite.disable_action()&lt;/code&gt; を&lt;/a&gt;呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="3188dcbcf55e21ddcef8ee90b69dccce7ee89480" translate="yes" xml:space="preserve">
          <source>If you need to distinguish between bound and unbound form instances at runtime, check the value of the form&amp;rsquo;s &lt;a href=&quot;#django.forms.Form.is_bound&quot;&gt;&lt;code&gt;is_bound&lt;/code&gt;&lt;/a&gt; attribute:</source>
          <target state="translated">実行時にバインドされたフォームインスタンスとバインドされていないフォームインスタンスを区別する必要がある場合は、フォームの&lt;a href=&quot;#django.forms.Form.is_bound&quot;&gt; &lt;code&gt;is_bound&lt;/code&gt; &lt;/a&gt;属性の値を確認します。</target>
        </trans-unit>
        <trans-unit id="271b48b10c2eaee15e6c01af5201ecab45c59f1b" translate="yes" xml:space="preserve">
          <source>If you need to do this from within Python, do that with &lt;code&gt;os.environ&lt;/code&gt;:</source>
          <target state="translated">Python内からこれを行う必要がある場合は、 &lt;code&gt;os.environ&lt;/code&gt; を使用して行います。</target>
        </trans-unit>
        <trans-unit id="05047b6375db39f11bb955e3562cff830f8ce275" translate="yes" xml:space="preserve">
          <source>If you need to execute more complex queries (for example, queries with &lt;code&gt;OR&lt;/code&gt; statements), you can use &lt;a href=&quot;#django.db.models.Q&quot;&gt;&lt;code&gt;Q objects&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">より複雑なクエリ（たとえば、 &lt;code&gt;OR&lt;/code&gt; ステートメントを使用したクエリ）を実行する必要がある場合は、&lt;a href=&quot;#django.db.models.Q&quot;&gt; &lt;code&gt;Q objects&lt;/code&gt; &lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="382397a2d5889617644e1747a1ec56a1cb186983" translate="yes" xml:space="preserve">
          <source>If you need to get the content of the block from the parent template, the &lt;code&gt;{{ block.super }}&lt;/code&gt; variable will do the trick. This is useful if you want to add to the contents of a parent block instead of completely overriding it. Data inserted using &lt;code&gt;{{ block.super }}&lt;/code&gt; will not be automatically escaped (see the &lt;a href=&quot;#automatic-html-escaping&quot;&gt;next section&lt;/a&gt;), since it was already escaped, if necessary, in the parent template.</source>
          <target state="translated">親テンプレートからブロックのコンテンツを取得する必要がある場合は、 &lt;code&gt;{{ block.super }}&lt;/code&gt; 変数が役立ちます。これは、完全にオーバーライドするのではなく、親ブロックのコンテンツに追加する場合に便利です。 &lt;code&gt;{{ block.super }}&lt;/code&gt; を使用して挿入されたデータは、必要に応じて親テンプレートで既にエスケープされているため、自動的にエスケープされません（&lt;a href=&quot;#automatic-html-escaping&quot;&gt;次のセクションを参照&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="7ebc26c78fa9c356f90a7f72742c57e3cd52c72f" translate="yes" xml:space="preserve">
          <source>If you need to identify the custom levels in your HTML or CSS, you need to provide a mapping via the &lt;a href=&quot;../settings#std:setting-MESSAGE_TAGS&quot;&gt;&lt;code&gt;MESSAGE_TAGS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">HTMLまたはCSSでカスタムレベルを識別する必要がある場合は、&lt;a href=&quot;../settings#std:setting-MESSAGE_TAGS&quot;&gt; &lt;code&gt;MESSAGE_TAGS&lt;/code&gt; &lt;/a&gt;設定を介してマッピングを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="43d0b36b5694d463b889f6b0ba10b3bc8033471f" translate="yes" xml:space="preserve">
          <source>If you need to know whether &lt;code&gt;add()&lt;/code&gt; stored a value in the cache, you can check the return value. It will return &lt;code&gt;True&lt;/code&gt; if the value was stored, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;add()&lt;/code&gt; がキャッシュに値を格納したかどうかを知る必要がある場合は、戻り値を確認できます。値が保存されている場合は &lt;code&gt;True&lt;/code&gt; を返し、そうでない場合は &lt;code&gt;False&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d830c73c6c6c1f7e7b98469dce63d2206baf4296" translate="yes" xml:space="preserve">
          <source>If you need to loop over a list of lists, you can unpack the values in each sublist into individual variables. For example, if your context contains a list of (x,y) coordinates called &lt;code&gt;points&lt;/code&gt;, you could use the following to output the list of points:</source>
          <target state="translated">リストのリストをループする必要がある場合は、各サブリストの値を個別の変数にアンパックできます。たとえば、コンテキストに &lt;code&gt;points&lt;/code&gt; と呼ばれる（x、y）座標のリストが含まれている場合、次を使用してポイントのリストを出力できます。</target>
        </trans-unit>
        <trans-unit id="e4875586a1526cd06344d2126b39a51bf67bf624" translate="yes" xml:space="preserve">
          <source>If you need to order the resulting queryset using some of the new fields or tables you have included via &lt;code&gt;extra()&lt;/code&gt; use the &lt;code&gt;order_by&lt;/code&gt; parameter to &lt;code&gt;extra()&lt;/code&gt; and pass in a sequence of strings. These strings should either be model fields (as in the normal &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt; method on querysets), of the form &lt;code&gt;table_name.column_name&lt;/code&gt; or an alias for a column that you specified in the &lt;code&gt;select&lt;/code&gt; parameter to &lt;code&gt;extra()&lt;/code&gt;.</source>
          <target state="translated">あなたは新しいフィールドやテーブルの一部を使用したクエリセットを注文する必要がある場合は、経由含まれています &lt;code&gt;extra()&lt;/code&gt; を使用 &lt;code&gt;order_by&lt;/code&gt; にパラメータを &lt;code&gt;extra()&lt;/code&gt; と一連の文字列を渡します。これらの文字列は、（&lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt;の通常のorder_by（）メソッドのように） &lt;code&gt;table_name.column_name&lt;/code&gt; の形式のモデルフィールドか、 &lt;code&gt;extra()&lt;/code&gt; の &lt;code&gt;select&lt;/code&gt; パラメーターで指定した列のエイリアスのいずれかである必要があります。</target>
        </trans-unit>
        <trans-unit id="29512c055a4bbedadcf50ac81bc12aa696fefce6" translate="yes" xml:space="preserve">
          <source>If you need to perform parameterized queries, you can use the &lt;code&gt;params&lt;/code&gt; argument to &lt;code&gt;raw()&lt;/code&gt;:</source>
          <target state="translated">パラメータ化されたクエリを実行する必要がある場合は、 &lt;code&gt;params&lt;/code&gt; 引数を &lt;code&gt;raw()&lt;/code&gt; に使用できます。</target>
        </trans-unit>
        <trans-unit id="85d94e84caa03cb9aa1eba7c8a2edd2887aceacb" translate="yes" xml:space="preserve">
          <source>If you need to perform some more sophisticated manipulation of asset requirements, you can define the &lt;code&gt;media&lt;/code&gt; property directly. This is done by defining a widget property that returns an instance of &lt;code&gt;forms.Media&lt;/code&gt;. The constructor for &lt;code&gt;forms.Media&lt;/code&gt; accepts &lt;code&gt;css&lt;/code&gt; and &lt;code&gt;js&lt;/code&gt; keyword arguments in the same format as that used in a static media definition.</source>
          <target state="translated">アセット要件のより高度な操作を実行する必要がある場合は、 &lt;code&gt;media&lt;/code&gt; プロパティを直接定義できます。これは、 &lt;code&gt;forms.Media&lt;/code&gt; のインスタンスを返すウィジェットプロパティを定義することによって行われます。 &lt;code&gt;forms.Media&lt;/code&gt; のコンストラクターは、静的メディア定義で使用されるのと同じ形式の &lt;code&gt;css&lt;/code&gt; および &lt;code&gt;js&lt;/code&gt; キーワード引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="03077957c82f83770cda4245c00130142e0728ea" translate="yes" xml:space="preserve">
          <source>If you need to produce a custom feed format, you&amp;rsquo;ve got a couple of options.</source>
          <target state="translated">カスタムフィード形式を作成する必要がある場合は、いくつかのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="dce169f28d5a3a0a8217378654a731a6091f2895" translate="yes" xml:space="preserve">
          <source>If you need to provide custom file storage &amp;ndash; a common example is storing files on some remote system &amp;ndash; you can do so by defining a custom storage class. You&amp;rsquo;ll need to follow these steps:</source>
          <target state="translated">カスタムファイルストレージを提供する必要がある場合（一般的な例は、一部のリモートシステムでのファイルの保存です）、カスタムストレージクラスを定義することでそれを行うことができます。次の手順を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="21318dce302488db7fe1be9c8f91e7d9398db2d0" translate="yes" xml:space="preserve">
          <source>If you need to reload a model&amp;rsquo;s values from the database, you can use the &lt;code&gt;refresh_from_db()&lt;/code&gt; method. When this method is called without arguments the following is done:</source>
          <target state="translated">データベースからモデルの値を再 &lt;code&gt;refresh_from_db()&lt;/code&gt; する必要がある場合は、refresh_from_db（）メソッドを使用できます。このメソッドが引数なしで呼び出されると、次のことが行われます。</target>
        </trans-unit>
        <trans-unit id="9f60d676b2ff26e717c98cf757ee77b4169d2c79" translate="yes" xml:space="preserve">
          <source>If you need to rename your tag, you can provide a custom name for it:</source>
          <target state="translated">タグの名前を変更する必要がある場合は、カスタム名を指定することができます。</target>
        </trans-unit>
        <trans-unit id="70ce7ed4a5fd90c845431eb06c0ba9bf7b77d4be" translate="yes" xml:space="preserve">
          <source>If you need to specify a dynamic order (for example depending on user or language) you can implement a &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_ordering&quot;&gt;&lt;code&gt;get_ordering()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">動的な順序を指定する必要がある場合（ユーザーや言語に応じて）、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_ordering&quot;&gt; &lt;code&gt;get_ordering()&lt;/code&gt; &lt;/a&gt;メソッドを実装できます。</target>
        </trans-unit>
        <trans-unit id="54934551f16cb178c17684aaa62b9b0ce737160b" translate="yes" xml:space="preserve">
          <source>If you need to specify a dynamic value based on the request, you can implement a &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_list_select_related&quot;&gt;&lt;code&gt;get_list_select_related()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">リクエストに基づいて動的な値を指定する必要がある場合は、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_list_select_related&quot;&gt; &lt;code&gt;get_list_select_related()&lt;/code&gt; &lt;/a&gt;メソッドを実装できます。</target>
        </trans-unit>
        <trans-unit id="d7afe7febaba1ec3c478e01c27fcfae0fcae482f" translate="yes" xml:space="preserve">
          <source>If you need to specify such values, reset the sequence afterwards to avoid reusing a value that&amp;rsquo;s already in the table. The &lt;a href=&quot;django-admin#django-admin-sqlsequencereset&quot;&gt;&lt;code&gt;sqlsequencereset&lt;/code&gt;&lt;/a&gt; management command generates the SQL statements to do that.</source>
          <target state="translated">そのような値を指定する必要がある場合は、シーケンスを後でリセットして、すでにテーブルにある値を再利用しないようにします。&lt;a href=&quot;django-admin#django-admin-sqlsequencereset&quot;&gt; &lt;code&gt;sqlsequencereset&lt;/code&gt; の&lt;/a&gt;管理コマンドは、それを行うためにSQL文を生成します。</target>
        </trans-unit>
        <trans-unit id="42afbcfd63e453f7b679ed0c58b5d3f86138dbfa" translate="yes" xml:space="preserve">
          <source>If you need to specify this list dynamically, implement a &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_sortable_by&quot;&gt;&lt;code&gt;get_sortable_by()&lt;/code&gt;&lt;/a&gt; method instead.</source>
          <target state="translated">このリストを動的に指定する必要がある場合は、代わりに&lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_sortable_by&quot;&gt; &lt;code&gt;get_sortable_by()&lt;/code&gt; &lt;/a&gt;メソッドを実装してください。</target>
        </trans-unit>
        <trans-unit id="385e9bf858c9d8171227212211f5666543e0edbb" translate="yes" xml:space="preserve">
          <source>If you need to use a different JSON encoder class you can pass the &lt;code&gt;encoder&lt;/code&gt; parameter to the constructor method:</source>
          <target state="translated">別のJSONエンコーダークラスを使用する必要がある場合は、 &lt;code&gt;encoder&lt;/code&gt; パラメーターをコンストラクターメソッドに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="52403383dcd3d11592773e83b934a1caeec7695e" translate="yes" xml:space="preserve">
          <source>If you need to use a literal &lt;code&gt;%s&lt;/code&gt; inside your select string, use the sequence &lt;code&gt;%%s&lt;/code&gt;.</source>
          <target state="translated">選択文字列内でリテラル &lt;code&gt;%s&lt;/code&gt; を使用する必要がある場合は、シーケンス &lt;code&gt;%%s&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="e62765ab69b86199c0c670e1b19ddf6f4572d8af" translate="yes" xml:space="preserve">
          <source>If you need to use a spatial lookup or aggregate that doesn&amp;rsquo;t support the geography type as input, you can use the &lt;a href=&quot;../../models/database-functions#django.db.models.functions.Cast&quot;&gt;&lt;code&gt;Cast&lt;/code&gt;&lt;/a&gt; database function to convert the geography column to a geometry type in the query:</source>
          <target state="translated">入力として地理タイプをサポートしない空間ルックアップまたは集約を使用する必要がある場合は、&lt;a href=&quot;../../models/database-functions#django.db.models.functions.Cast&quot;&gt; &lt;code&gt;Cast&lt;/code&gt; &lt;/a&gt;データベース関数を使用して、クエリで地理列をジオメトリタイプに変換できます。</target>
        </trans-unit>
        <trans-unit id="7261e018cbf8f2bbdd8cb56b7d0debc25633a8f3" translate="yes" xml:space="preserve">
          <source>If you need to use something similar to the &lt;a href=&quot;templates/builtins#std:templatetag-url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; template tag in your code, Django provides the following function:</source>
          <target state="translated">コードで&lt;a href=&quot;templates/builtins#std:templatetag-url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt;テンプレートタグと同様のものを使用する必要がある場合、Djangoは次の関数を提供します。</target>
        </trans-unit>
        <trans-unit id="65a8bbb933c1c4d11d662bcf552b38b0767fd8e4" translate="yes" xml:space="preserve">
          <source>If you need to use strings with these sequences, store them in template variables or use a custom template tag or filter to workaround the limitation.</source>
          <target state="translated">これらのシーケンスで文字列を使用する必要がある場合は、テンプレート変数に格納するか、カスタムテンプレートタグやフィルタを使用して制限を回避します。</target>
        </trans-unit>
        <trans-unit id="2378beb626084b4cc95382cdb283eb570e4777a7" translate="yes" xml:space="preserve">
          <source>If you need to use these decorators, then you should decorate your test methods with &lt;a href=&quot;../async#asgiref.sync.async_to_sync&quot;&gt;&lt;code&gt;async_to_sync()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;inside&lt;/em&gt; of them instead:</source>
          <target state="translated">あなたはこれらのデコレータを使用する必要がある場合は、を使用してテストメソッド飾るはずです&lt;a href=&quot;../async#asgiref.sync.async_to_sync&quot;&gt; &lt;code&gt;async_to_sync()&lt;/code&gt; &lt;/a&gt;&lt;em&gt;内の&lt;/em&gt;代わりに、それらのを：</target>
        </trans-unit>
        <trans-unit id="fcc7733e03c7800262e0a10bde85e2867cb41401" translate="yes" xml:space="preserve">
          <source>If you need two annotations with two separate filters you can use the &lt;code&gt;filter&lt;/code&gt; argument with any aggregate. For example, to generate a list of authors with a count of highly rated books:</source>
          <target state="translated">2つの別個のフィルターを持つ2つの注釈が必要な場合は、任意の集約で &lt;code&gt;filter&lt;/code&gt; 引数を使用できます。たとえば、評価の高い本の数を含む著者のリストを生成するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="c897784a3f3666e7ffa637c1500a855cd1d427d9" translate="yes" xml:space="preserve">
          <source>If you obtain an error, you will have to recompile SQLite from source. Otherwise, skip this section.</source>
          <target state="translated">エラーが発生した場合は、ソースからSQLiteを再コンパイルする必要があります。それ以外の場合は、このセクションをスキップしてください。</target>
        </trans-unit>
        <trans-unit id="741f58ec7bbe2e730412e151c54ddb2163fa4a4f" translate="yes" xml:space="preserve">
          <source>If you often use this pattern:</source>
          <target state="translated">このパターンをよく使う方は</target>
        </trans-unit>
        <trans-unit id="2f212d93748c23a6b8f8df2fb8bdf19695fec4c9" translate="yes" xml:space="preserve">
          <source>If you omit the extensions, Django will search all available fixture types for a matching fixture. For example:</source>
          <target state="translated">拡張子を省略した場合、Django は利用可能なすべてのフィクスチャタイプを検索して一致するフィクスチャを探します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="b7281fcbaa809c600b8793d4f53e33c8473eac8d" translate="yes" xml:space="preserve">
          <source>If you only need a foreign key value, use the foreign key value that is already on the object you&amp;rsquo;ve got, rather than getting the whole related object and taking its primary key. i.e. do:</source>
          <target state="translated">外部キー値だけが必要な場合は、関連するオブジェクト全体を取得してその主キーを取得するのではなく、取得したオブジェクトにすでに存在する外部キー値を使用します。つまり、</target>
        </trans-unit>
        <trans-unit id="800fadfa713dccf394aba70d45e9d4112ae330ee" translate="yes" xml:space="preserve">
          <source>If you only pass in a single field, you can also pass in the &lt;code&gt;flat&lt;/code&gt; parameter. If &lt;code&gt;True&lt;/code&gt;, this will mean the returned results are single values, rather than one-tuples. An example should make the difference clearer:</source>
          <target state="translated">1つのフィールドのみを渡す場合は、 &lt;code&gt;flat&lt;/code&gt; パラメータも渡すことができます。 &lt;code&gt;True&lt;/code&gt; の場合、これは、返される結果が1つのタプルではなく単一の値であることを意味します。例では、違いをより明確にする必要があります。</target>
        </trans-unit>
        <trans-unit id="21a02b2eee96e24a49f04e13b9eb6b72eba93d67" translate="yes" xml:space="preserve">
          <source>If you only serialize the Restaurant model:</source>
          <target state="translated">レストランのモデルを連載するだけなら</target>
        </trans-unit>
        <trans-unit id="09d4a126b134831de63cd4bb62765a50804cd5f0" translate="yes" xml:space="preserve">
          <source>If you only want a subset of fields to be serialized, you can specify a &lt;code&gt;fields&lt;/code&gt; argument to the serializer:</source>
          <target state="translated">フィールドのサブセットのみをシリアル化する場合は、シリアライザに &lt;code&gt;fields&lt;/code&gt; 引数を指定できます。</target>
        </trans-unit>
        <trans-unit id="4364377f218dbdb6f693a8ac230e516ce29b7d3f" translate="yes" xml:space="preserve">
          <source>If you only want files of a particular type, you can use the subscript operator to filter out a medium of interest. For example:</source>
          <target state="translated">特定のタイプのファイルのみが必要な場合は、添え字演算子を使用して、関心のある媒体をフィルタリングできます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="b7761bd9d1203f2151ef4f8ccf146d8e1530f6c1" translate="yes" xml:space="preserve">
          <source>If you only want to pickle the necessary information to recreate the &lt;code&gt;QuerySet&lt;/code&gt; from the database at a later time, pickle the &lt;code&gt;query&lt;/code&gt; attribute of the &lt;code&gt;QuerySet&lt;/code&gt;. You can then recreate the original &lt;code&gt;QuerySet&lt;/code&gt; (without any results loaded) using some code like this:</source>
          <target state="translated">後でデータベースから &lt;code&gt;QuerySet&lt;/code&gt; を再作成するために必要な情報のみをピクルする場合は、 &lt;code&gt;QuerySet&lt;/code&gt; の &lt;code&gt;query&lt;/code&gt; 属性をピクルします。次に、次のようなコードを使用して、（結果をロードせずに）元の &lt;code&gt;QuerySet&lt;/code&gt; を再作成できます。</target>
        </trans-unit>
        <trans-unit id="57e21af0c1526d4117f7cb3d0a6e6b7c87ae870c" translate="yes" xml:space="preserve">
          <source>If you opt to use this third method and you don&amp;rsquo;t iterate over the fields with a &lt;code&gt;{% for %}&lt;/code&gt; loop, you&amp;rsquo;ll need to render the primary key field. For example, if you were rendering the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt; fields of a model:</source>
          <target state="translated">この3番目の方法を使用することを選択し、 &lt;code&gt;{% for %}&lt;/code&gt; ループでフィールドを反復処理しない場合は、主キーフィールドをレンダリングする必要があります。たとえば、モデルの &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;age&lt;/code&gt; フィールドをレンダリングしている場合：</target>
        </trans-unit>
        <trans-unit id="f4b5a3ee8156aeb994b28c82b8a75b4aeb508550" translate="yes" xml:space="preserve">
          <source>If you override &lt;code&gt;MESSAGE_LEVEL&lt;/code&gt; in your settings file and rely on any of the built-in constants, you must import the constants module directly to avoid the potential for circular imports, e.g.:</source>
          <target state="translated">設定ファイルで &lt;code&gt;MESSAGE_LEVEL&lt;/code&gt; をオーバーライドし、組み込み定数に依存している場合、循環インポートの可能性を回避するために、定数モジュールを直接インポートする必要があります。例：</target>
        </trans-unit>
        <trans-unit id="7a02510672f31144e2b0955819bddaf9315a3389" translate="yes" xml:space="preserve">
          <source>If you override &lt;code&gt;MESSAGE_TAGS&lt;/code&gt; in your settings file and rely on any of the built-in constants, you must import the &lt;code&gt;constants&lt;/code&gt; module directly to avoid the potential for circular imports, e.g.:</source>
          <target state="translated">設定ファイルで &lt;code&gt;MESSAGE_TAGS&lt;/code&gt; をオーバーライドし、組み込み定数のいずれかに依存している場合、循環インポートの可能性を回避するために、 &lt;code&gt;constants&lt;/code&gt; モジュールを直接インポートする必要があります。例：</target>
        </trans-unit>
        <trans-unit id="8b48af8079716221e4c0051117d47bfd44a4b260" translate="yes" xml:space="preserve">
          <source>If you override any of these methods, be sure to call the superclass methods since they add the required elements for each feed format.</source>
          <target state="translated">これらのメソッドをオーバーライドする場合は、各フィードフォーマットに必要な要素を追加するので、必ずスーパークラスのメソッドを呼び出すようにしてください。</target>
        </trans-unit>
        <trans-unit id="bdf1c5dfe752c4d781780083470ca6f0e40af894" translate="yes" xml:space="preserve">
          <source>If you override the &lt;code&gt;get_queryset()&lt;/code&gt; method and filter out any rows, Django will return incorrect results. Don&amp;rsquo;t do that. A manager that filters results in &lt;code&gt;get_queryset()&lt;/code&gt; is not appropriate for use as a base manager.</source>
          <target state="translated">&lt;code&gt;get_queryset()&lt;/code&gt; メソッドをオーバーライドして行を除外すると、Djangoは誤った結果を返します。それをしないでください。 &lt;code&gt;get_queryset()&lt;/code&gt; で結果をフィルタリングするマネージャーは、基本マネージャーとしての使用には適していません。</target>
        </trans-unit>
        <trans-unit id="efa7906aab8c824e5c384fdd3e0c6fb2aa3af44d" translate="yes" xml:space="preserve">
          <source>If you override these methods on your model, you must call the parent class&amp;rsquo; methods for these signals to be sent.</source>
          <target state="translated">モデルでこれらのメソッドをオーバーライドする場合、これらの信号を送信するには、親クラスのメソッドを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="139f65047f08d0c31df99bf777b749aac8b06810" translate="yes" xml:space="preserve">
          <source>If you override this method, make sure that the returned inlines are instances of the classes defined in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.inlines&quot;&gt;&lt;code&gt;inlines&lt;/code&gt;&lt;/a&gt; or you might encounter a &amp;ldquo;Bad Request&amp;rdquo; error when adding related objects.</source>
          <target state="translated">このメソッドをオーバーライドする場合は、返されるインラインが&lt;a href=&quot;#django.contrib.admin.ModelAdmin.inlines&quot;&gt; &lt;code&gt;inlines&lt;/code&gt; &lt;/a&gt;定義されたクラスのインスタンスであることを確認してください。そうしないと、関連オブジェクトを追加するときに「Bad Request」エラーが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="cd49ed7d9ce6425ca491d84c25250c4b7a60d8ad" translate="yes" xml:space="preserve">
          <source>If you pass &lt;code&gt;in_bulk()&lt;/code&gt; an empty list, you&amp;rsquo;ll get an empty dictionary.</source>
          <target state="translated">&lt;code&gt;in_bulk()&lt;/code&gt; に空のリストを渡すと、空の辞書が取得されます。</target>
        </trans-unit>
        <trans-unit id="738c5872b2d80eca3eabca4443294a67bf3373b0" translate="yes" xml:space="preserve">
          <source>If you pass a non-string value to &lt;code&gt;sign&lt;/code&gt;, the value will be forced to string before being signed, and the &lt;code&gt;unsign&lt;/code&gt; result will give you that string value:</source>
          <target state="translated">文字列以外の値を &lt;code&gt;sign&lt;/code&gt; に渡すと、値は署名される前に文字列に強制され、 &lt;code&gt;unsign&lt;/code&gt; の結果はその文字列値を提供します。</target>
        </trans-unit>
        <trans-unit id="01b4c8798ac8d3c2ee64f1b7afb638cce29f856f" translate="yes" xml:space="preserve">
          <source>If you pass a string to Django that has been encoded in some other format, things will go wrong in interesting ways. Usually, Django will raise a &lt;code&gt;UnicodeDecodeError&lt;/code&gt; at some point.</source>
          <target state="translated">他の形式でエンコードされた文字列をDjangoに渡すと、興味深い方法で問題が発生します。通常、Djangoはある時点で &lt;code&gt;UnicodeDecodeError&lt;/code&gt; を送出します。</target>
        </trans-unit>
        <trans-unit id="f875b90b3600dbb8929f4dd6aae0773f46d238bd" translate="yes" xml:space="preserve">
          <source>If you pass an invalid keyword argument, a lookup function will raise &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="translated">無効なキーワード引数を渡すと、検索関数は &lt;code&gt;TypeError&lt;/code&gt; を送出します。</target>
        </trans-unit>
        <trans-unit id="2a3d957dd878c573465d3ad6cc8518f32e53e656" translate="yes" xml:space="preserve">
          <source>If you pass in a &lt;code&gt;QuerySet&lt;/code&gt; resulting from &lt;code&gt;values()&lt;/code&gt; or &lt;code&gt;values_list()&lt;/code&gt; as the value to an &lt;code&gt;__in&lt;/code&gt; lookup, you need to ensure you are only extracting one field in the result. For example, this will work (filtering on the blog names):</source>
          <target state="translated">あなたが渡すと &lt;code&gt;QuerySet&lt;/code&gt; から生じた &lt;code&gt;values()&lt;/code&gt; または &lt;code&gt;values_list()&lt;/code&gt; の値として &lt;code&gt;__in&lt;/code&gt; 引き、あなたは結果だけで一つのフィールドを抽出していることを確認する必要があります。たとえば、これは機能します（ブログ名でフィルタリング）：</target>
        </trans-unit>
        <trans-unit id="55a3e9f28be7d4fb14de4ec185385e4a1a973d4f" translate="yes" xml:space="preserve">
          <source>If you pass the &lt;a href=&quot;../ref/django-admin#cmdoption-no-color&quot;&gt;&lt;code&gt;--no-color&lt;/code&gt;&lt;/a&gt; option when running your command, all &lt;code&gt;self.style()&lt;/code&gt; calls will return the original string uncolored.</source>
          <target state="translated">コマンドの実行時に&lt;a href=&quot;../ref/django-admin#cmdoption-no-color&quot;&gt; &lt;code&gt;--no-color&lt;/code&gt; &lt;/a&gt;オプションを渡すと、すべての &lt;code&gt;self.style()&lt;/code&gt; 呼び出しは元の文字列を色なしで返します。</target>
        </trans-unit>
        <trans-unit id="b79b1f32de698ec64ae613eae6bcf15970d7b876" translate="yes" xml:space="preserve">
          <source>If you plan on using Django&amp;rsquo;s &lt;a href=&quot;../topics/i18n/timezones&quot;&gt;timezone support&lt;/a&gt;, use &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/mysql-tzinfo-to-sql.html&quot;&gt;mysql_tzinfo_to_sql&lt;/a&gt; to load time zone tables into the MySQL database. This needs to be done just once for your MySQL server, not per database.</source>
          <target state="translated">Djangoの&lt;a href=&quot;../topics/i18n/timezones&quot;&gt;タイムゾーンサポート&lt;/a&gt;を使用する予定の場合は、&lt;a href=&quot;https://dev.mysql.com/doc/refman/en/mysql-tzinfo-to-sql.html&quot;&gt;mysql_tzinfo_to_sql&lt;/a&gt;を使用してタイムゾーンテーブルをMySQLデータベースにロードします。これは、データベースごとではなく、MySQLサーバーに対して1回だけ実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="3d07ba410dfae393dcd5dd3868653a7b65add33c" translate="yes" xml:space="preserve">
          <source>If you plan to remove the old app later, you&amp;rsquo;ll need to set the &lt;code&gt;dependencies&lt;/code&gt; property based on whether or not the old app is installed. Otherwise, you&amp;rsquo;ll have missing dependencies once you uninstall the old app. Similarly, you&amp;rsquo;ll need to catch &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#LookupError&quot;&gt;&lt;code&gt;LookupError&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;apps.get_model()&lt;/code&gt; call that retrieves models from the old app. This approach allows you to deploy your project anywhere without first installing and then uninstalling the old app.</source>
          <target state="translated">後で古いアプリを削除する予定の場合は、古いアプリがインストールされているかどうかに基づいて &lt;code&gt;dependencies&lt;/code&gt; プロパティを設定する必要があります。そうしないと、古いアプリをアンインストールすると、依存関係が失われます。同様に、古いアプリからモデルを取得する &lt;code&gt;apps.get_model()&lt;/code&gt; 呼び出しで&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#LookupError&quot;&gt; &lt;code&gt;LookupError&lt;/code&gt; &lt;/a&gt;をキャッチする必要があります。このアプローチでは、最初に古いアプリをインストールしてからアンインストールすることなく、プロジェクトをどこにでもデプロイできます。</target>
        </trans-unit>
        <trans-unit id="9073c8632746695fe881c718b8ef04b35fa192e4" translate="yes" xml:space="preserve">
          <source>If you plan to run Django in a multithreaded environment (e.g. Apache using the default MPM module on any modern operating system), then you &lt;strong&gt;must&lt;/strong&gt; set the &lt;code&gt;threaded&lt;/code&gt; option of your Oracle database configuration to &lt;code&gt;True&lt;/code&gt;:</source>
          <target state="translated">あなたは（たとえばApacheは任意の最新のオペレーティングシステムのデフォルトのMPMモジュールを使用して）マルチスレッド環境ではDjangoを実行する予定の場合は、&lt;strong&gt;しなければならない&lt;/strong&gt;設定 &lt;code&gt;threaded&lt;/code&gt; にOracleデータベース構成のオプション &lt;code&gt;True&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8d225f0abfbc3c7de48d5bc9786ca2d1091b6fe9" translate="yes" xml:space="preserve">
          <source>If you plan to use Django&amp;rsquo;s &lt;code&gt;manage.py migrate&lt;/code&gt; command to automatically create database tables for your models (after first installing Django and creating a project), you&amp;rsquo;ll need to ensure that Django has permission to create and alter tables in the database you&amp;rsquo;re using; if you plan to manually create the tables, you can grant Django &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; permissions. After creating a database user with these permissions, you&amp;rsquo;ll specify the details in your project&amp;rsquo;s settings file, see &lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">Djangoの &lt;code&gt;manage.py migrate&lt;/code&gt; コマンドを使用してモデルのデータベーステーブルを自動的に作成する場合（最初にDjangoをインストールしてプロジェクトを作成した後）、データベースにテーブルを作成および変更する権限がDjangoにあることを確認する必要があります。再使用;テーブルを手動で作成する場合は、Djangoの &lt;code&gt;SELECT&lt;/code&gt; 、 &lt;code&gt;INSERT&lt;/code&gt; 、 &lt;code&gt;UPDATE&lt;/code&gt; 、および &lt;code&gt;DELETE&lt;/code&gt; 権限を付与できます。これらの権限を持つデータベースユーザーを作成した後、あなたが見る、あなたのプロジェクトの設定ファイルに詳細を指定します&lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;詳細については、を。</target>
        </trans-unit>
        <trans-unit id="1cf8ce09ee94ba97497f8c75ae9497949e7ca9e6" translate="yes" xml:space="preserve">
          <source>If you plan to use Django&amp;rsquo;s database API functionality, you&amp;rsquo;ll need to make sure a database server is running. Django supports many different database servers and is officially supported with &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;, &lt;a href=&quot;https://mariadb.org/&quot;&gt;MariaDB&lt;/a&gt;, &lt;a href=&quot;https://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt;, &lt;a href=&quot;https://www.oracle.com/&quot;&gt;Oracle&lt;/a&gt; and &lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt;.</source>
          <target state="translated">DjangoのデータベースAPI機能を使用する場合は、データベースサーバーが実行されていることを確認する必要があります。Djangoは多くの異なるデータベースサーバーをサポートしており、&lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;、&lt;a href=&quot;https://mariadb.org/&quot;&gt;MariaDB&lt;/a&gt;、&lt;a href=&quot;https://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt;、&lt;a href=&quot;https://www.oracle.com/&quot;&gt;Oracle&lt;/a&gt;、&lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLiteで&lt;/a&gt;正式にサポートされています。</target>
        </trans-unit>
        <trans-unit id="f9ffb321598eac539d278bb929456e302d26fb2d" translate="yes" xml:space="preserve">
          <source>If you plan to use PostGIS raster functionality on PostGIS 3+, you should also activate the &lt;code&gt;postgis_raster&lt;/code&gt; extension. You can install the extension using the &lt;a href=&quot;../../postgres/operations#django.contrib.postgres.operations.CreateExtension&quot;&gt;&lt;code&gt;CreateExtension&lt;/code&gt;&lt;/a&gt; migration operation, or directly by running &lt;code&gt;CREATE EXTENSION postgis_raster;&lt;/code&gt;.</source>
          <target state="translated">PostGIS 3以降でPostGISラスター機能を使用する場合は、 &lt;code&gt;postgis_raster&lt;/code&gt; 拡張機能もアクティブ化する必要があります。&lt;a href=&quot;../../postgres/operations#django.contrib.postgres.operations.CreateExtension&quot;&gt; &lt;code&gt;CreateExtension&lt;/code&gt; &lt;/a&gt;移行操作を使用して、または &lt;code&gt;CREATE EXTENSION postgis_raster;&lt;/code&gt; 実行して直接拡張機能をインストールできます。。</target>
        </trans-unit>
        <trans-unit id="2d29104b9899b9d86e33356f84568767e51c25b0" translate="yes" xml:space="preserve">
          <source>If you point the test client at a view that raises an exception and &lt;code&gt;Client.raise_request_exception&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, that exception will be visible in the test case. You can then use a standard &lt;code&gt;try ... except&lt;/code&gt; block or &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises&quot;&gt;&lt;code&gt;assertRaises()&lt;/code&gt;&lt;/a&gt; to test for exceptions.</source>
          <target state="translated">例外を発生させるビューにテストクライアントを向け、 &lt;code&gt;Client.raise_request_exception&lt;/code&gt; が &lt;code&gt;True&lt;/code&gt; の場合、その例外はテストケースに表示されます。次に、標準の &lt;code&gt;try ... except&lt;/code&gt; ブロックまたは&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises&quot;&gt; &lt;code&gt;assertRaises()&lt;/code&gt; &lt;/a&gt;を使用して、例外をテストできます。</target>
        </trans-unit>
        <trans-unit id="9a1ee774d1d6b71e65f51c9761d622d272f3e630" translate="yes" xml:space="preserve">
          <source>If you press &lt;code&gt;Ctrl-C&lt;/code&gt; while the tests are running, the test runner will wait for the currently running test to complete and then exit gracefully. During a graceful exit the test runner will output details of any test failures, report on how many tests were run and how many errors and failures were encountered, and destroy any test databases as usual. Thus pressing &lt;code&gt;Ctrl-C&lt;/code&gt; can be very useful if you forget to pass the &lt;a href=&quot;../../ref/django-admin#cmdoption-test-failfast&quot;&gt;&lt;code&gt;--failfast&lt;/code&gt;&lt;/a&gt; option, notice that some tests are unexpectedly failing and want to get details on the failures without waiting for the full test run to complete.</source>
          <target state="translated">あなたが押した場合 &lt;code&gt;Ctrl-C&lt;/code&gt; 、テストの実行中に、テストランナーは完全に現在実行中のテストを待ってから、正常に終了します。正常な終了時に、テストランナーはテストの失敗の詳細を出力し、実行されたテストの数と発生したエラーと失敗の数をレポートし、通常どおりテストデータベースを破棄します。したがって、&lt;a href=&quot;../../ref/django-admin#cmdoption-test-failfast&quot;&gt; &lt;code&gt;--failfast&lt;/code&gt; &lt;/a&gt;オプションを渡すのを忘れた場合、 &lt;code&gt;Ctrl-C&lt;/code&gt; を押すと非常に便利です。一部のテストが予期せず失敗し、完全なテストの実行が完了するのを待たずに失敗の詳細を取得したいことに注意してください。</target>
        </trans-unit>
        <trans-unit id="9fd3c524d495f19aa19c27cdbbee5399534aacb6" translate="yes" xml:space="preserve">
          <source>If you provide &lt;code&gt;content_type&lt;/code&gt; as &lt;em&gt;application/json&lt;/em&gt;, the &lt;code&gt;data&lt;/code&gt; is serialized using &lt;a href=&quot;https://docs.python.org/3/library/json.html#json.dumps&quot;&gt;&lt;code&gt;json.dumps()&lt;/code&gt;&lt;/a&gt; if it&amp;rsquo;s a dict, list, or tuple. Serialization is performed with &lt;a href=&quot;../serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt;&lt;code&gt;DjangoJSONEncoder&lt;/code&gt;&lt;/a&gt; by default, and can be overridden by providing a &lt;code&gt;json_encoder&lt;/code&gt; argument to &lt;a href=&quot;#django.test.Client&quot;&gt;&lt;code&gt;Client&lt;/code&gt;&lt;/a&gt;. This serialization also happens for &lt;a href=&quot;#django.test.Client.put&quot;&gt;&lt;code&gt;put()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.test.Client.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.test.Client.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; requests.</source>
          <target state="translated">&lt;code&gt;content_type&lt;/code&gt; を&lt;em&gt;application / json&lt;/em&gt;として指定すると、 &lt;code&gt;data&lt;/code&gt; がdict、リスト、またはタプルの場合、データは&lt;a href=&quot;https://docs.python.org/3/library/json.html#json.dumps&quot;&gt; &lt;code&gt;json.dumps()&lt;/code&gt; &lt;/a&gt;を使用してシリアル化されます。&lt;a href=&quot;../serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt; &lt;code&gt;DjangoJSONEncoder&lt;/code&gt; &lt;/a&gt;化はデフォルトでDjangoJSONEncoderで実行され、 &lt;code&gt;json_encoder&lt;/code&gt; 引数を&lt;a href=&quot;#django.test.Client&quot;&gt; &lt;code&gt;Client&lt;/code&gt; に&lt;/a&gt;提供することでオーバーライドできます。このシリアル化は、&lt;a href=&quot;#django.test.Client.put&quot;&gt; &lt;code&gt;put()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#django.test.Client.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#django.test.Client.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt;リクエストでも発生します。</target>
        </trans-unit>
        <trans-unit id="d70400506fc271afc5226a9156b79bd7b0a3892e" translate="yes" xml:space="preserve">
          <source>If you provide a &lt;code&gt;description&lt;/code&gt; in your &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class, Django will &lt;em&gt;not&lt;/em&gt; automatically put that into the &lt;code&gt;subtitle&lt;/code&gt; element, because a subtitle and description are not necessarily the same thing. Instead, you should define a &lt;code&gt;subtitle&lt;/code&gt; attribute.</source>
          <target state="translated">あなたが提供した場合 &lt;code&gt;description&lt;/code&gt; 、あなたの中に&lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt;クラス、Djangoはなり&lt;em&gt;ません&lt;/em&gt;自動的にそれを置く &lt;code&gt;subtitle&lt;/code&gt; 字幕と説明が必ずしも同じものではありませんので、要素。代わりに、 &lt;code&gt;subtitle&lt;/code&gt; 属性を定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="aa823e0a0041a6947816c68759b373adb5e9f2ff" translate="yes" xml:space="preserve">
          <source>If you provide a URL with both an encoded GET data and a data argument, the data argument will take precedence.</source>
          <target state="translated">URLにエンコードされたGETデータとデータ引数の両方を指定した場合、データ引数が優先されます。</target>
        </trans-unit>
        <trans-unit id="10f0311a7904a5e576592cc2026a0cba559e4f85" translate="yes" xml:space="preserve">
          <source>If you provide an &lt;a href=&quot;applications#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; instance as the sender argument, please ensure that the signal is registered in &lt;a href=&quot;applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;AppConfig&lt;/code&gt;s are recreated for tests that run with a modified set of &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; (such as when settings are overridden) and such signals should be connected for each new &lt;code&gt;AppConfig&lt;/code&gt; instance.</source>
          <target state="translated">送信者の引数として&lt;a href=&quot;applications#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt;インスタンスを提供する場合は、シグナルが&lt;a href=&quot;applications#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; に&lt;/a&gt;登録されていることを確認してください。 &lt;code&gt;AppConfig&lt;/code&gt; は、&lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; の&lt;/a&gt;変更されたセットで実行されるテスト用に再作成され（設定がオーバーライドされた場合など）、そのような信号は新しい &lt;code&gt;AppConfig&lt;/code&gt; インスタンスごとに接続する必要があります。</target>
        </trans-unit>
        <trans-unit id="b4f73da389b543957cd3a9484131a18f37edca2b" translate="yes" xml:space="preserve">
          <source>If you provide an anonymous user, &lt;a href=&quot;#std:templatetag-get_flatpages&quot;&gt;&lt;code&gt;get_flatpages&lt;/code&gt;&lt;/a&gt; will behave the same as if you hadn&amp;rsquo;t provided a user &amp;ndash; i.e., it will only show you public flatpages.</source>
          <target state="translated">匿名ユーザーを&lt;a href=&quot;#std:templatetag-get_flatpages&quot;&gt; &lt;code&gt;get_flatpages&lt;/code&gt; &lt;/a&gt;場合、get_flatpagesはユーザーを指定しなかった場合と同じように動作します。つまり、公開フラットページのみが表示されます。</target>
        </trans-unit>
        <trans-unit id="9045948db59d0563c0a89ef13a497ad48bb714a4" translate="yes" xml:space="preserve">
          <source>If you provide any other &lt;code&gt;content_type&lt;/code&gt; (e.g. &lt;em&gt;text/xml&lt;/em&gt; for an XML payload), the contents of &lt;code&gt;data&lt;/code&gt; are sent as-is in the POST request, using &lt;code&gt;content_type&lt;/code&gt; in the HTTP &lt;code&gt;Content-Type&lt;/code&gt; header.</source>
          <target state="translated">他の &lt;code&gt;content_type&lt;/code&gt; （XMLペイロードの&lt;em&gt;text / xmlなど&lt;/em&gt;）を指定した場合、 &lt;code&gt;data&lt;/code&gt; &lt;code&gt;Content-Type&lt;/code&gt; は、HTTP Content-Typeヘッダーの &lt;code&gt;content_type&lt;/code&gt; を使用して、POSTリクエストでそのまま送信されます。</target>
        </trans-unit>
        <trans-unit id="910309a8687236b4eef1cb1fc342a8ae2c903a62" translate="yes" xml:space="preserve">
          <source>If you provide the &lt;code&gt;app_label&lt;/code&gt; argument, &lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; will automatically create the package if it doesn&amp;rsquo;t already exist.</source>
          <target state="translated">あなたが提供する場合は &lt;code&gt;app_label&lt;/code&gt; 引数を、&lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; は、&lt;/a&gt;それがまだ存在しない場合、自動的にパッケージを作成します。</target>
        </trans-unit>
        <trans-unit id="6a321433ae0fb44c3dba2485b43003a37dcff291" translate="yes" xml:space="preserve">
          <source>If you raise a &lt;code&gt;StopUpload&lt;/code&gt; or a &lt;code&gt;SkipFile&lt;/code&gt; exception, the upload will abort or the file will be completely skipped.</source>
          <target state="translated">あなたが提起した場合 &lt;code&gt;StopUpload&lt;/code&gt; または &lt;code&gt;SkipFile&lt;/code&gt; 例外を、アップロードが中止されたり、ファイルが完全にスキップされます。</target>
        </trans-unit>
        <trans-unit id="f5c930b9d9ff449d37bc58a058280baf8e9d25ba" translate="yes" xml:space="preserve">
          <source>If you really need to do the conversion yourself, you must ensure the datetime is converted to the appropriate time zone first. Usually, this will be the current timezone:</source>
          <target state="translated">もし自分で変換する必要がある場合は、まず日付を適切なタイムゾーンに変換する必要があります。通常、これは現在のタイムゾーンになります。</target>
        </trans-unit>
        <trans-unit id="aba032f0055b3ba362cd40902bc9f74174f0f582" translate="yes" xml:space="preserve">
          <source>If you reference &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; directly (for example, by referring to it in a foreign key), your code will not work in projects where the &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; setting has been changed to a different user model.</source>
          <target state="translated">&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; を&lt;/a&gt;直接参照する場合（たとえば、外部キーで参照する場合）、コードは、&lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt;設定が別のユーザーモデルに変更されているプロジェクトでは機能しません。</target>
        </trans-unit>
        <trans-unit id="0e1ecb9bcfed717dbcef9591ae9c8802ed73bd90" translate="yes" xml:space="preserve">
          <source>If you render a bound &lt;code&gt;Form&lt;/code&gt; object, the act of rendering will automatically run the form&amp;rsquo;s validation if it hasn&amp;rsquo;t already happened, and the HTML output will include the validation errors as a &lt;code&gt;&amp;lt;ul class=&quot;errorlist&quot;&amp;gt;&lt;/code&gt; near the field. The particular positioning of the error messages depends on the output method you&amp;rsquo;re using:</source>
          <target state="translated">バインドされた &lt;code&gt;Form&lt;/code&gt; オブジェクトをレンダリングする場合、フォームの検証がまだ行われていない場合はレンダリングの動作によって自動的に検証が実行され、HTML出力にはフィールドの近くに &lt;code&gt;&amp;lt;ul class=&quot;errorlist&quot;&amp;gt;&lt;/code&gt; として検証エラーが含まれます。エラーメッセージの特定の位置は、使用している出力方法によって異なります。</target>
        </trans-unit>
        <trans-unit id="07459c1428179836772ae027ec5297d2da1c0fb6" translate="yes" xml:space="preserve">
          <source>If you require even more control over inheritance, define your assets using a &lt;a href=&quot;#dynamic-property&quot;&gt;dynamic property&lt;/a&gt;. Dynamic properties give you complete control over which files are inherited, and which are not.</source>
          <target state="translated">継承をさらに制御する必要がある場合は、&lt;a href=&quot;#dynamic-property&quot;&gt;動的プロパティ&lt;/a&gt;を使用してアセットを定義します。動的プロパティを使用すると、継承するファイルと継承しないファイルを完全に制御できます。</target>
        </trans-unit>
        <trans-unit id="6b05712d776517317396db80b42d65e9ba95c552" translate="yes" xml:space="preserve">
          <source>If you require support for a concrete data type other than &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;str&lt;/code&gt;, you can subclass &lt;code&gt;Choices&lt;/code&gt; and the required concrete data type, e.g. &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; for use with &lt;a href=&quot;#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; または &lt;code&gt;str&lt;/code&gt; 以外の具象データ型のサポートが必要な場合は、 &lt;code&gt;Choices&lt;/code&gt; と必要な具象データ型をサブクラス化できます。たとえば、&lt;a href=&quot;#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt;で使用する&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="db9d39b35fe6f2b0b25e26ce3e859ec9c161c377" translate="yes" xml:space="preserve">
          <source>If you rotate your secret key, all of the above will be invalidated. Secret keys are not used for passwords of users and key rotation will not affect them.</source>
          <target state="translated">秘密鍵を回転させると、上記の全てが無効になります。秘密鍵は利用者のパスワードには使用されませんので、キーローテーションを行っても影響はありません。</target>
        </trans-unit>
        <trans-unit id="ce316f0b6ed1ed42439817ae8b4f2b1e4a6893ce" translate="yes" xml:space="preserve">
          <source>If you run this script as a user with normal privileges (recommended), you might not have access to start a port on a low port number. Low port numbers are reserved for the superuser (root).</source>
          <target state="translated">このスクリプトを通常の権限を持つユーザとして実行した場合 (推奨)、低いポート番号のポートを起動するためのアクセス権がない場合があります。低いポート番号はスーパーユーザ (root)のために予約されています。</target>
        </trans-unit>
        <trans-unit id="e41cf1bc99b54789424ebdb54c86380a8a4bc54f" translate="yes" xml:space="preserve">
          <source>If you set &lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-7&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt;, access settings values somehow, &lt;em&gt;then&lt;/em&gt; call &lt;code&gt;configure()&lt;/code&gt;, Django will raise a &lt;code&gt;RuntimeError&lt;/code&gt; indicating that settings have already been configured. There is a property for this purpose:</source>
          <target state="translated">あなたが設定されている場合&lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-7&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt;何とか、アクセス設定値を、&lt;em&gt;その後、&lt;/em&gt;呼び出し &lt;code&gt;configure()&lt;/code&gt; 、Djangoは引き上げる &lt;code&gt;RuntimeError&lt;/code&gt; 設定がすでに設定されていることを示しています。この目的のためのプロパティがあります：</target>
        </trans-unit>
        <trans-unit id="581d2693ba51ca9c6d74a9c3aec8c1d2ed991658" translate="yes" xml:space="preserve">
          <source>If you set &lt;a href=&quot;#std:setting-LOGGING_CONFIG&quot;&gt;&lt;code&gt;LOGGING_CONFIG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt;, the logging configuration process will be skipped.</source>
          <target state="translated">あなたが設定した場合&lt;a href=&quot;#std:setting-LOGGING_CONFIG&quot;&gt; &lt;code&gt;LOGGING_CONFIG&lt;/code&gt; を&lt;/a&gt;する &lt;code&gt;None&lt;/code&gt; 、ロギング構成プロセスはスキップされます。</target>
        </trans-unit>
        <trans-unit id="6c3c4b3192dde41e8664985f2f99b630a848a1da" translate="yes" xml:space="preserve">
          <source>If you set &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt;, you also need to properly set the &lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">あなたが設定した場合は&lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; を&lt;/a&gt;する &lt;code&gt;False&lt;/code&gt; 、あなたも適切に設定する必要が&lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt; &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; を&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="912981cf3b9022683052e38d66b9a92981f3bcd3" translate="yes" xml:space="preserve">
          <source>If you set &lt;a href=&quot;../settings#std:setting-APPEND_SLASH&quot;&gt;&lt;code&gt;APPEND_SLASH&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt;, you must remove the slash in the catchall pattern or flatpages without a trailing slash will not be matched.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-APPEND_SLASH&quot;&gt; &lt;code&gt;APPEND_SLASH&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;False&lt;/code&gt; に設定した場合、キャッチオールパターンのスラッシュを削除する必要があります。そうしないと、末尾のスラッシュが一致しないフラットページが一致しなくなります。</target>
        </trans-unit>
        <trans-unit id="395ad5010523ffc1e4b670f7488f023e63a22e17" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;, access settings values somehow, &lt;em&gt;then&lt;/em&gt; call &lt;code&gt;configure()&lt;/code&gt;, Django will raise a &lt;code&gt;RuntimeError&lt;/code&gt; indicating that settings have already been configured. There is a property for this purpose:</source>
          <target state="translated">あなたが設定されている場合 &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 何とか、アクセス設定値を、&lt;em&gt;その後、&lt;/em&gt;呼び出し &lt;code&gt;configure()&lt;/code&gt; 、Djangoは引き上げる &lt;code&gt;RuntimeError&lt;/code&gt; 設定がすでに設定されていることを示しています。この目的のためのプロパティがあります：</target>
        </trans-unit>
        <trans-unit id="fe70b07e6ecfbabb2180c75d50c0a38a0f922032" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;follow&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; the client will follow any redirects and a &lt;code&gt;redirect_chain&lt;/code&gt; attribute will be set in the response object containing tuples of the intermediate urls and status codes.</source>
          <target state="translated">&lt;code&gt;follow&lt;/code&gt; を &lt;code&gt;True&lt;/code&gt; に設定すると、クライアントはすべてのリダイレクトに従い、 &lt;code&gt;redirect_chain&lt;/code&gt; 属性は、中間URLとステータスコードのタプルを含む応答オブジェクトに設定されます。</target>
        </trans-unit>
        <trans-unit id="3b6d0e5b836e0ffb759b558f1953cb5c40ecbc36" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;secure&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; the client will emulate an HTTPS request.</source>
          <target state="translated">&lt;code&gt;secure&lt;/code&gt; を &lt;code&gt;True&lt;/code&gt; に設定すると、クライアントはHTTPSリクエストをエミュレートします。</target>
        </trans-unit>
        <trans-unit id="ed87f4fbcb2623f91b4272494cedf3618bd43220" translate="yes" xml:space="preserve">
          <source>If you set the &lt;a href=&quot;settings#std:setting-SECURE_SSL_REDIRECT&quot;&gt;&lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt;&lt;/a&gt; setting to True, &lt;code&gt;SecurityMiddleware&lt;/code&gt; will permanently (HTTP 301) redirect all HTTP connections to HTTPS.</source>
          <target state="translated">あなたが設定した場合&lt;a href=&quot;settings#std:setting-SECURE_SSL_REDIRECT&quot;&gt; &lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt; の&lt;/a&gt; Trueに設定し、 &lt;code&gt;SecurityMiddleware&lt;/code&gt; は永久に（HTTP 301）HTTPSへのすべてのHTTP接続をリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="804dd8b3f2f0998b19444a70dea6c4f275857e45" translate="yes" xml:space="preserve">
          <source>If you specify a &lt;code&gt;max_length&lt;/code&gt; attribute, it will be reflected in the &lt;a href=&quot;../forms/widgets#django.forms.Textarea&quot;&gt;&lt;code&gt;Textarea&lt;/code&gt;&lt;/a&gt; widget of the auto-generated form field. However it is not enforced at the model or database level. Use a &lt;a href=&quot;#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; for that.</source>
          <target state="translated">&lt;code&gt;max_length&lt;/code&gt; 属性を指定すると、自動生成されたフォームフィールドの&lt;a href=&quot;../forms/widgets#django.forms.Textarea&quot;&gt; &lt;code&gt;Textarea&lt;/code&gt; &lt;/a&gt;ウィジェットに反映されます。ただし、モデルまたはデータベースレベルでは適用されません。そのために&lt;a href=&quot;#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="9247f5ac3aa9a42d00715df98ff9b7c3141c9780" translate="yes" xml:space="preserve">
          <source>If you specify a &lt;code&gt;mimetype&lt;/code&gt; of &lt;code&gt;message/rfc822&lt;/code&gt;, it will also accept &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;django.core.mail.EmailMessage&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/email.compat32-message.html#email.message.Message&quot;&gt;&lt;code&gt;email.message.Message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">あなたが指定した場合は &lt;code&gt;mimetype&lt;/code&gt; の &lt;code&gt;message/rfc822&lt;/code&gt; 、それも受け入れます&lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;django.core.mail.EmailMessage&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://docs.python.org/3/library/email.compat32-message.html#email.message.Message&quot;&gt; &lt;code&gt;email.message.Message&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4020c7114522e13a4b27d1776830d993a345f52a" translate="yes" xml:space="preserve">
          <source>If you specify a &lt;code&gt;mimetype&lt;/code&gt; of &lt;em&gt;message/rfc822&lt;/em&gt;, it will also accept &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;django.core.mail.EmailMessage&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/email.compat32-message.html#email.message.Message&quot;&gt;&lt;code&gt;email.message.Message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">あなたが指定した場合は &lt;code&gt;mimetype&lt;/code&gt; の&lt;em&gt;メッセージ/ RFC822を&lt;/em&gt;、それも受け入れます&lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;django.core.mail.EmailMessage&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://docs.python.org/3/library/email.compat32-message.html#email.message.Message&quot;&gt; &lt;code&gt;email.message.Message&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="305c89bb0d6f74a15dce564b912bcda21f76247e" translate="yes" xml:space="preserve">
          <source>If you specify a string value or a &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;, it may contain &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; formatting, which will be replaced by the date/time of the file upload (so that uploaded files don&amp;rsquo;t fill up the given directory). For example:</source>
          <target state="translated">文字列値または&lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;を指定する場合、それは&lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt;フォーマットを含む場合があります。これは、ファイルアップロードの日付/時刻に置き換えられます（そのため、アップロードされたファイルが指定されたディレクトリをいっぱいにしないようにします）。例えば：</target>
        </trans-unit>
        <trans-unit id="614fc3b6599f9800b8c0df59893296044168cf2c" translate="yes" xml:space="preserve">
          <source>If you specify both the &lt;a href=&quot;#django.views.generic.edit.ModelFormMixin.fields&quot;&gt;&lt;code&gt;fields&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.views.generic.edit.FormMixin.form_class&quot;&gt;&lt;code&gt;form_class&lt;/code&gt;&lt;/a&gt; attributes, an &lt;a href=&quot;../exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception will be raised.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.edit.ModelFormMixin.fields&quot;&gt; &lt;code&gt;fields&lt;/code&gt; &lt;/a&gt;属性と&lt;a href=&quot;#django.views.generic.edit.FormMixin.form_class&quot;&gt; &lt;code&gt;form_class&lt;/code&gt; &lt;/a&gt;属性の両方を指定すると、&lt;a href=&quot;../exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;ImproperlyConfigured&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="58aa7a9ed4ab489b04c05563f7b555c7cbfda0ee" translate="yes" xml:space="preserve">
          <source>If you specify both the &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.fields&quot;&gt;&lt;code&gt;fields&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_class&quot;&gt;&lt;code&gt;form_class&lt;/code&gt;&lt;/a&gt; attributes, an &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception will be raised.</source>
          <target state="translated">&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.fields&quot;&gt; &lt;code&gt;fields&lt;/code&gt; &lt;/a&gt;属性と&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_class&quot;&gt; &lt;code&gt;form_class&lt;/code&gt; &lt;/a&gt;属性の両方を指定すると、&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;ImproperlyConfigured&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="e42f6fe4a1eafc9cbe0fe1ed0eb44c26cf3abac5" translate="yes" xml:space="preserve">
          <source>If you try to compile message files with incorrectly flagged strings, you&amp;rsquo;ll get an error message like &lt;code&gt;number of format specifications in 'msgid' and
'msgstr' does not match&lt;/code&gt; or &lt;code&gt;'msgstr' is not a valid Python format string,
unlike 'msgid'&lt;/code&gt;.</source>
          <target state="translated">フラグが正しく設定されていない文字列でメッセージファイルをコンパイルしようとすると &lt;code&gt;number of format specifications in 'msgid' and 'msgstr' does not match&lt;/code&gt; または &lt;code&gt;'msgstr' is not a valid Python format string, unlike 'msgid'&lt;/code&gt; などのエラーメッセージが表示されます。'。</target>
        </trans-unit>
        <trans-unit id="f5f573bc4c6fc46c2deb1fdead6cdb73bb482a8e" translate="yes" xml:space="preserve">
          <source>If you try to order by a field that is a relation to another model, Django will use the default ordering on the related model, or order by the related model&amp;rsquo;s primary key if there is no &lt;a href=&quot;options#django.db.models.Options.ordering&quot;&gt;&lt;code&gt;Meta.ordering&lt;/code&gt;&lt;/a&gt; specified. For example, since the &lt;code&gt;Blog&lt;/code&gt; model has no default ordering specified:</source>
          <target state="translated">別のモデルとの関係であるフィールドで順序付けしようとすると、Djangoは関連モデルのデフォルトの順序を使用するか、&lt;a href=&quot;options#django.db.models.Options.ordering&quot;&gt; &lt;code&gt;Meta.ordering&lt;/code&gt; が&lt;/a&gt;指定されていない場合は関連モデルの主キーで順序付けします。たとえば、 &lt;code&gt;Blog&lt;/code&gt; モデルにはデフォルトの順序が指定されていないため、次のようになります。</target>
        </trans-unit>
        <trans-unit id="4b74e6d17d477f89b500f2530d4cf1bb7e54270d" translate="yes" xml:space="preserve">
          <source>If you try to run any of these parts from a thread where there is a &lt;em&gt;running event loop&lt;/em&gt;, you will get a &lt;a href=&quot;../ref/exceptions#django.core.exceptions.SynchronousOnlyOperation&quot;&gt;&lt;code&gt;SynchronousOnlyOperation&lt;/code&gt;&lt;/a&gt; error. Note that you don&amp;rsquo;t have to be inside an async function directly to have this error occur. If you have called a sync function directly from an async function, without using &lt;a href=&quot;#asgiref.sync.sync_to_async&quot;&gt;&lt;code&gt;sync_to_async()&lt;/code&gt;&lt;/a&gt; or similar, then it can also occur. This is because your code is still running in a thread with an active event loop, even though it may not be declared as async code.</source>
          <target state="translated">&lt;em&gt;実行中のイベントループ&lt;/em&gt;があるスレッドからこれらの部分のいずれかを実行しようとすると、&lt;a href=&quot;../ref/exceptions#django.core.exceptions.SynchronousOnlyOperation&quot;&gt; &lt;code&gt;SynchronousOnlyOperation&lt;/code&gt; &lt;/a&gt;エラーが発生します。このエラーが発生するために、非同期関数内に直接いる必要はないことに注意してください。&lt;a href=&quot;#asgiref.sync.sync_to_async&quot;&gt; &lt;code&gt;sync_to_async()&lt;/code&gt; &lt;/a&gt;などを使用せずに、非同期関数から直接同期関数を呼び出した場合も発生する可能性があります。これは、非同期コードとして宣言されていない場合でも、コードがアクティブなイベントループを持つスレッドで実行されているためです。</target>
        </trans-unit>
        <trans-unit id="2949a48f95fe7e8506fdc6f5701b10f53659defb" translate="yes" xml:space="preserve">
          <source>If you try to run any of these parts from a thread where there is a &lt;em&gt;running event loop&lt;/em&gt;, you will get a &lt;a href=&quot;../ref/exceptions#django.core.exceptions.SynchronousOnlyOperation&quot;&gt;&lt;code&gt;SynchronousOnlyOperation&lt;/code&gt;&lt;/a&gt; error. Note that you don&amp;rsquo;t have to be inside an async function directly to have this error occur. If you have called a synchronous function directly from an asynchronous function without going through something like &lt;code&gt;sync_to_async&lt;/code&gt; or a threadpool, then it can also occur, as your code is still running in an asynchronous context.</source>
          <target state="translated">&lt;em&gt;実行中のイベントループ&lt;/em&gt;があるスレッドからこれらのパーツを実行しようとすると、&lt;a href=&quot;../ref/exceptions#django.core.exceptions.SynchronousOnlyOperation&quot;&gt; &lt;code&gt;SynchronousOnlyOperation&lt;/code&gt; &lt;/a&gt;エラーが発生します。このエラーを発生させるために、非同期関数内に直接いる必要はないことに注意してください。 &lt;code&gt;sync_to_async&lt;/code&gt; やスレッドプールなどを経由せずに非同期関数から同期関数を直接呼び出した場合も、コードが非同期コンテキストで実行されているため、同期関数が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="c6693a4c5d595d8b5d83b35a6ac98c4c846239c9" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt; as explained above, &lt;a href=&quot;../../ref/django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; will do this automatically when &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;. If you don&amp;rsquo;t have &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; in &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, you can still manually serve static files using the &lt;a href=&quot;../../ref/views#django.views.static.serve&quot;&gt;&lt;code&gt;django.views.static.serve()&lt;/code&gt;&lt;/a&gt; view.</source>
          <target state="translated">あなたが使用している場合は&lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; を&lt;/a&gt;上記で説明したように、&lt;a href=&quot;../../ref/django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt;ときに自動的にこれを行います&lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; が&lt;/a&gt;に設定されている &lt;code&gt;True&lt;/code&gt; 。あなたが持っていない場合は &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; で&lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; を&lt;/a&gt;、あなたはまだ手動で使用して静的ファイルを提供することができます&lt;a href=&quot;../../ref/views#django.views.static.serve&quot;&gt; &lt;code&gt;django.views.static.serve()&lt;/code&gt; &lt;/a&gt;ビューを。</target>
        </trans-unit>
        <trans-unit id="8418102b1538f4a4f474193f2874d5390e66e014" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;builtins#std:templatetag-extends&quot;&gt;&lt;code&gt;{% extends %}&lt;/code&gt;&lt;/a&gt; in a template, it must be the first template tag in that template. Template inheritance won&amp;rsquo;t work, otherwise.</source>
          <target state="translated">テンプレートで&lt;a href=&quot;builtins#std:templatetag-extends&quot;&gt; &lt;code&gt;{% extends %}&lt;/code&gt; &lt;/a&gt;を使用する場合、それはそのテンプレートの最初のテンプレートタグである必要があります。それ以外の場合、テンプレートの継承は機能しません。</target>
        </trans-unit>
        <trans-unit id="3afccef5fe1cf8e14fa9070553ef6dbbc3b09b80" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;querysets#django.db.models.query.QuerySet.prefetch_related&quot;&gt;&lt;code&gt;prefetch_related()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;add()&lt;/code&gt;, &lt;code&gt;remove()&lt;/code&gt;, &lt;code&gt;clear()&lt;/code&gt;, and &lt;code&gt;set()&lt;/code&gt; methods clear the prefetched cache.</source>
          <target state="translated">あなたが使用している場合は&lt;a href=&quot;querysets#django.db.models.query.QuerySet.prefetch_related&quot;&gt; &lt;code&gt;prefetch_related()&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;add()&lt;/code&gt; 、 &lt;code&gt;remove()&lt;/code&gt; 、 &lt;code&gt;clear()&lt;/code&gt; 、および &lt;code&gt;set()&lt;/code&gt; メソッドは、プリフェッチされたキャッシュをクリア。</target>
        </trans-unit>
        <trans-unit id="f71c7943193c59ecd27d1e4581a08197f0907309" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;CacheMiddleware&lt;/code&gt;, put &lt;code&gt;LocaleMiddleware&lt;/code&gt; after it.</source>
          <target state="translated">&lt;code&gt;CacheMiddleware&lt;/code&gt; を使用する場合は、 &lt;code&gt;LocaleMiddleware&lt;/code&gt; を後に置きます。</target>
        </trans-unit>
        <trans-unit id="f04e933cf73bf9a9662d42e68375fa7d7c6d1dc5" translate="yes" xml:space="preserve">
          <source>If you use a &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;encoder&lt;/code&gt; and &lt;code&gt;decoder&lt;/code&gt; from &lt;a href=&quot;../models/fields#django.db.models.JSONField&quot;&gt;&lt;code&gt;JSONField&lt;/code&gt;&lt;/a&gt; will be used.</source>
          <target state="translated">あなたが使用している場合&lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;encoder&lt;/code&gt; および &lt;code&gt;decoder&lt;/code&gt; から&lt;a href=&quot;../models/fields#django.db.models.JSONField&quot;&gt; &lt;code&gt;JSONField&lt;/code&gt; が&lt;/a&gt;使用されます。</target>
        </trans-unit>
        <trans-unit id="fc8b56cb887dca8be941443856060957b865139d" translate="yes" xml:space="preserve">
          <source>If you use a &lt;code&gt;values()&lt;/code&gt; clause after an &lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt;&lt;code&gt;extra()&lt;/code&gt;&lt;/a&gt; call, any fields defined by a &lt;code&gt;select&lt;/code&gt; argument in the &lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt;&lt;code&gt;extra()&lt;/code&gt;&lt;/a&gt; must be explicitly included in the &lt;code&gt;values()&lt;/code&gt; call. Any &lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt;&lt;code&gt;extra()&lt;/code&gt;&lt;/a&gt; call made after a &lt;code&gt;values()&lt;/code&gt; call will have its extra selected fields ignored.</source>
          <target state="translated">あなたが使用している場合は &lt;code&gt;values()&lt;/code&gt; 句の後&lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt; &lt;code&gt;extra()&lt;/code&gt; &lt;/a&gt;の呼び出しによって定義されたすべてのフィールド &lt;code&gt;select&lt;/code&gt; における引数&lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt; &lt;code&gt;extra()&lt;/code&gt; &lt;/a&gt;を明示的に含める必要があります &lt;code&gt;values()&lt;/code&gt; 呼び出し。任意の&lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt; &lt;code&gt;extra()&lt;/code&gt; &lt;/a&gt;の後に作られたコール &lt;code&gt;values()&lt;/code&gt; の呼び出しは、その余分選択したフィールドは無視されます。</target>
        </trans-unit>
        <trans-unit id="5138658165170713fe8921c287483c369dd879d1" translate="yes" xml:space="preserve">
          <source>If you use a variable that doesn&amp;rsquo;t exist, the template system will insert the value of the &lt;code&gt;string_if_invalid&lt;/code&gt; option, which is set to &lt;code&gt;''&lt;/code&gt; (the empty string) by default.</source>
          <target state="translated">存在しない変数を使用すると、テンプレートシステムは &lt;code&gt;string_if_invalid&lt;/code&gt; オプションの値を挿入します。これは、デフォルトで &lt;code&gt;''&lt;/code&gt; （空の文字列）に設定されています。</target>
        </trans-unit>
        <trans-unit id="d3110291b387e92d09039d47bcce85bc592e4fda" translate="yes" xml:space="preserve">
          <source>If you use an &lt;code&gt;initial&lt;/code&gt; for displaying a formset, you should pass the same &lt;code&gt;initial&lt;/code&gt; when processing that formset&amp;rsquo;s submission so that the formset can detect which forms were changed by the user. For example, you might have something like: &lt;code&gt;ArticleFormSet(request.POST, initial=[...])&lt;/code&gt;.</source>
          <target state="translated">formsetを表示するために &lt;code&gt;initial&lt;/code&gt; を使用する場合、formsetがユーザーによって変更されたフォームを検出できるように、formsetの送信を処理するときに同じ &lt;code&gt;initial&lt;/code&gt; を渡す必要があります。たとえば、 &lt;code&gt;ArticleFormSet(request.POST, initial=[...])&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="7ab4496b070493e1cbd88967385539fa01b3ea78" translate="yes" xml:space="preserve">
          <source>If you use any of Django&amp;rsquo;s custom &lt;code&gt;TestCase&lt;/code&gt; classes, the test runner will clear the contents of the test email outbox at the start of each test case.</source>
          <target state="translated">Djangoのカスタム &lt;code&gt;TestCase&lt;/code&gt; クラスのいずれかを使用する場合、テストランナーは、各テストケースの開始時にテストメール送信ボックスの内容をクリアします。</target>
        </trans-unit>
        <trans-unit id="af63582f03bb6e4c9e15c7b92a57d1ba5b4b0680" translate="yes" xml:space="preserve">
          <source>If you use caching middleware, it&amp;rsquo;s important to put each half in the right place within the &lt;a href=&quot;../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting. That&amp;rsquo;s because the cache middleware needs to know which headers by which to vary the cache storage. Middleware always adds something to the &lt;code&gt;Vary&lt;/code&gt; response header when it can.</source>
          <target state="translated">キャッシュミドルウェアを使用する場合は、&lt;a href=&quot;../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;設定内の適切な場所に各半分を配置することが重要です。これは、キャッシュミドルウェアが、キャッシュストレージを変更するヘッダーを認識する必要があるためです。ミドルウェアは、可能な場合は常に &lt;code&gt;Vary&lt;/code&gt; 応答ヘッダーに何かを追加します。</target>
        </trans-unit>
        <trans-unit id="eb3ba9d9638be9dba67498258cd53f1f8d8c441d" translate="yes" xml:space="preserve">
          <source>If you use cookie-based sessions, pay extra care that your secret key is always kept completely secret, for any system which might be remotely accessible.</source>
          <target state="translated">クッキーベースのセッションを使用している場合は、リモートからアクセスできる可能性のあるシステムのために、秘密鍵が常に完全に秘密にされていることに特に注意してください。</target>
        </trans-unit>
        <trans-unit id="ac9946ee9d075e84bfbeea0cd48def7c04248d87" translate="yes" xml:space="preserve">
          <source>If you use custom &lt;code&gt;Manager&lt;/code&gt; objects, take note that the first &lt;code&gt;Manager&lt;/code&gt; Django encounters (in the order in which they&amp;rsquo;re defined in the model) has a special status. Django interprets the first &lt;code&gt;Manager&lt;/code&gt; defined in a class as the &amp;ldquo;default&amp;rdquo; &lt;code&gt;Manager&lt;/code&gt;, and several parts of Django (including &lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata&lt;/code&gt;&lt;/a&gt;) will use that &lt;code&gt;Manager&lt;/code&gt; exclusively for that model. As a result, it&amp;rsquo;s a good idea to be careful in your choice of default manager in order to avoid a situation where overriding &lt;code&gt;get_queryset()&lt;/code&gt; results in an inability to retrieve objects you&amp;rsquo;d like to work with.</source>
          <target state="translated">カスタムの &lt;code&gt;Manager&lt;/code&gt; オブジェクトを使用する場合、Djangoが最初に遭遇する（モデルで定義されている順序で） &lt;code&gt;Manager&lt;/code&gt; には特別なステータスがあることに注意してください。 Django はクラスで定義された最初の &lt;code&gt;Manager&lt;/code&gt; を「デフォルト」の &lt;code&gt;Manager&lt;/code&gt; と解釈し、Djangoのいくつかの部分（&lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt; &lt;code&gt;dumpdata&lt;/code&gt; &lt;/a&gt;を含む）はその &lt;code&gt;Manager&lt;/code&gt; をそのモデル専用に使用します。結果として、 &lt;code&gt;get_queryset()&lt;/code&gt; をオーバーライドすると、操作したいオブジェクトを取得できなくなる状況を回避するために、デフォルトマネージャーの選択には注意することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3354dc763efee5cbb2a050e1c410a3261d6d6efb" translate="yes" xml:space="preserve">
          <source>If you use database caching with multiple databases, you&amp;rsquo;ll also need to set up routing instructions for your database cache table. For the purposes of routing, the database cache table appears as a model named &lt;code&gt;CacheEntry&lt;/code&gt;, in an application named &lt;code&gt;django_cache&lt;/code&gt;. This model won&amp;rsquo;t appear in the models cache, but the model details can be used for routing purposes.</source>
          <target state="translated">複数のデータベースでデータベースキャッシングを使用する場合は、データベースキャッシュテーブルのルーティング手順も設定する必要があります。ルーティングの目的のために、データベースキャッシュテーブルは、名前のモデルとして表示されます &lt;code&gt;CacheEntry&lt;/code&gt; というアプリケーションで、 &lt;code&gt;django_cache&lt;/code&gt; 。このモデルはモデルキャッシュに表示されませんが、モデルの詳細はルーティングの目的で使用できます。</target>
        </trans-unit>
        <trans-unit id="17cfa5ced8dcbb7e597664d335ed9ae258277518" translate="yes" xml:space="preserve">
          <source>If you use more than one &lt;code&gt;JavaScriptCatalog&lt;/code&gt; view on a site and some of them define the same strings, the strings in the catalog that was loaded last take precedence.</source>
          <target state="translated">サイトで複数の &lt;code&gt;JavaScriptCatalog&lt;/code&gt; ビューを使用し、それらのいくつかが同じ文字列を定義している場合、最後に読み込まれたカタログの文字列が優先されます。</target>
        </trans-unit>
        <trans-unit id="e46850bb8ec958f8fdf1580dc6739aff53945b19" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;cached_db&lt;/code&gt; session backend, you also need to follow the configuration instructions for the &lt;a href=&quot;#using-database-backed-sessions&quot;&gt;using database-backed sessions&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cached_db&lt;/code&gt; セッションバックエンドを使用する場合は、データベースを使用するセッションを使用するための構成手順にも従う必要があり&lt;a href=&quot;#using-database-backed-sessions&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6cf187a7f4b8a72e3eca21b8c45ef8b3ee2725a2" translate="yes" xml:space="preserve">
          <source>If you use the Bash shell, consider installing the Django bash completion script, which lives in &lt;code&gt;extras/django_bash_completion&lt;/code&gt; in the Django source distribution. It enables tab-completion of &lt;code&gt;django-admin&lt;/code&gt; and &lt;code&gt;manage.py&lt;/code&gt; commands, so you can, for instance&amp;hellip;</source>
          <target state="translated">Bashシェルを使用する場合は、Djangoソース配布の &lt;code&gt;extras/django_bash_completion&lt;/code&gt; にあるDjango bash完了スクリプトのインストールを検討してください。 &lt;code&gt;django-admin&lt;/code&gt; と &lt;code&gt;manage.py&lt;/code&gt; コマンドのタブ補完を可能にするので、例えば&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="544a332c4cb22ae2768b4c0f6f7c943861e6344b" translate="yes" xml:space="preserve">
          <source>If you use the MyISAM storage engine please be aware of the fact that you will receive database-generated errors if you try to use the &lt;a href=&quot;../topics/db/transactions#topics-db-transactions-savepoints&quot;&gt;savepoint-related methods of the transactions API&lt;/a&gt;. The reason for this is that detecting the storage engine of a MySQL database/table is an expensive operation so it was decided it isn&amp;rsquo;t worth to dynamically convert these methods in no-op&amp;rsquo;s based in the results of such detection.</source>
          <target state="translated">MyISAMストレージエンジンを使用している場合&lt;a href=&quot;../topics/db/transactions#topics-db-transactions-savepoints&quot;&gt;、トランザクションAPIのセーブポイント関連のメソッド&lt;/a&gt;を使用しようとすると、データベースで生成されたエラーが発生することに注意してください。この理由は、MySQLデータベース/テーブルのストレージエンジンの検出はコストのかかる操作であるため、そのような検出の結果に基づいてこれらのメソッドを何もしないで動的に変換することは価値がないと判断されたためです。</target>
        </trans-unit>
        <trans-unit id="612e62c7aaac6d3ed93e17cc5eb89853c3216591" translate="yes" xml:space="preserve">
          <source>If you use the default authentication backend, then your model must have a single unique field that can be used for identification purposes. This can be a username, an email address, or any other unique attribute. A non-unique username field is allowed if you use a custom authentication backend that can support it.</source>
          <target state="translated">デフォルトの認証バックエンドを使用している場合、モデルには識別目的で使用できる単一の一意のフィールドが必要です。これには、ユーザ名、電子メールアドレス、またはその他のユニークな属性を使用できます。一意ではないユーザ名フィールドは、それをサポートできるカスタム認証バックエンドを使用している場合に許可されます。</target>
        </trans-unit>
        <trans-unit id="632cae7f626396f49915f6528bfd124915502643" translate="yes" xml:space="preserve">
          <source>If you use this directly in a subclass, &lt;code&gt;objects&lt;/code&gt; will be the default manager if you declare no managers in the base class:</source>
          <target state="translated">これをサブクラスで直接使用する場合、基本クラスでマネージャーを宣言しないと、 &lt;code&gt;objects&lt;/code&gt; がデフォルトのマネージャーになります。</target>
        </trans-unit>
        <trans-unit id="0be2ddd3771f7e5301d04d44291e1551fbddd667" translate="yes" xml:space="preserve">
          <source>If you use this example, be sure to change the &lt;code&gt;'filename'&lt;/code&gt; path to a location that&amp;rsquo;s writable by the user that&amp;rsquo;s running the Django application.</source>
          <target state="translated">この例を使用する場合は、 &lt;code&gt;'filename'&lt;/code&gt; パスを、Djangoアプリケーションを実行しているユーザーが書き込み可能な場所に変更してください。</target>
        </trans-unit>
        <trans-unit id="5390e72ce357a7eabd5449a3955b90282d9e0e6d" translate="yes" xml:space="preserve">
          <source>If you want &lt;em&gt;no&lt;/em&gt; bulk actions available for a given &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;, set &lt;a href=&quot;index#django.contrib.admin.ModelAdmin.actions&quot;&gt;&lt;code&gt;ModelAdmin.actions&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">必要に応じて&lt;em&gt;いない&lt;/em&gt;特定のためのバルクアクションが利用可能&lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; の&lt;/a&gt;、セット&lt;a href=&quot;index#django.contrib.admin.ModelAdmin.actions&quot;&gt; &lt;code&gt;ModelAdmin.actions&lt;/code&gt; &lt;/a&gt;に &lt;code&gt;None&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3aec3757f7c2abfc3d404eaea0295a8443022fe5" translate="yes" xml:space="preserve">
          <source>If you want a form for the &lt;code&gt;Author&lt;/code&gt; model that includes only the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; fields, you would specify &lt;code&gt;fields&lt;/code&gt; or &lt;code&gt;exclude&lt;/code&gt; like this:</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; フィールドと &lt;code&gt;title&lt;/code&gt; フィールドのみを含む &lt;code&gt;Author&lt;/code&gt; モデルのフォームが必要な場合は、 &lt;code&gt;fields&lt;/code&gt; を指定するか &lt;code&gt;exclude&lt;/code&gt; ように除外します。</target>
        </trans-unit>
        <trans-unit id="dac386a15e0c8bb88ff7bb297d68523406916892" translate="yes" xml:space="preserve">
          <source>If you want context data to take priority over context processors, use the following pattern:</source>
          <target state="translated">コンテキストデータをコンテキストプロセッサよりも優先させたい場合は、以下のパターンを使用します。</target>
        </trans-unit>
        <trans-unit id="7e20d9f91dd7be41dd2b75340fb5ad46d7aff9dd" translate="yes" xml:space="preserve">
          <source>If you want customized deletion behavior, you can override the &lt;code&gt;delete()&lt;/code&gt; method. See &lt;a href=&quot;../../topics/db/models#overriding-model-methods&quot;&gt;Overriding predefined model methods&lt;/a&gt; for more details.</source>
          <target state="translated">カスタマイズされた削除動作が必要な場合は、 &lt;code&gt;delete()&lt;/code&gt; メソッドをオーバーライドできます。詳細については、&lt;a href=&quot;../../topics/db/models#overriding-model-methods&quot;&gt;事前定義されたモデルメソッドのオーバーライドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="93acdd6e4c8eae4615be0fc45ec00696af259471" translate="yes" xml:space="preserve">
          <source>If you want customized saving behavior, you can override this &lt;code&gt;save()&lt;/code&gt; method. See &lt;a href=&quot;../../topics/db/models#overriding-model-methods&quot;&gt;Overriding predefined model methods&lt;/a&gt; for more details.</source>
          <target state="translated">保存動作をカスタマイズしたい場合は、この &lt;code&gt;save()&lt;/code&gt; メソッドをオーバーライドできます。詳細については、&lt;a href=&quot;../../topics/db/models#overriding-model-methods&quot;&gt;事前定義されたモデルメソッドのオーバーライドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="be8f02ec9aac915643a3af8cb57319e744527c0c" translate="yes" xml:space="preserve">
          <source>If you want more control over your URLs, you can reference a specific view in your URLconf:</source>
          <target state="translated">URL をよりコントロールしたい場合は、URLconf で特定のビューを参照することができます。</target>
        </trans-unit>
        <trans-unit id="f457998a8d8d75ab48817a88d807beddf2f50846" translate="yes" xml:space="preserve">
          <source>If you want the protection that HTTPS provides, and have enabled it on your server, there are some additional steps you may need:</source>
          <target state="translated">HTTPS が提供する保護を希望し、サーバ上で HTTPS を有効にしている場合は、いくつかの追加の手順が必要になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="a14d621828e626147519d733f8c184b1c0c37ab4" translate="yes" xml:space="preserve">
          <source>If you want to add a check to a model class, the approach is &lt;em&gt;almost&lt;/em&gt; the same: the only difference is that the check is a classmethod, not an instance method:</source>
          <target state="translated">チェックをモデルクラスに追加する場合のアプローチは&lt;em&gt;ほとんど&lt;/em&gt;同じです。唯一の違いは、チェックがインスタンスメソッドではなくクラスメソッドであることです。</target>
        </trans-unit>
        <trans-unit id="56b33aa10e58145097aa338a7bdcf35a9f1eab1d" translate="yes" xml:space="preserve">
          <source>If you want to allow Unicode characters, pass &lt;code&gt;allow_unicode=True&lt;/code&gt;. For example:</source>
          <target state="translated">Unicode文字を許可する場合は、 &lt;code&gt;allow_unicode=True&lt;/code&gt; を渡します。例えば：</target>
        </trans-unit>
        <trans-unit id="89e6786d70f17235ea0a07bab1827e495e61aad1" translate="yes" xml:space="preserve">
          <source>If you want to allow editing and creating an &lt;code&gt;Image&lt;/code&gt; instance on the &lt;code&gt;Product&lt;/code&gt;, add/change views you can use &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericTabularInline&quot;&gt;&lt;code&gt;GenericTabularInline&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericStackedInline&quot;&gt;&lt;code&gt;GenericStackedInline&lt;/code&gt;&lt;/a&gt; (both subclasses of &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt;&lt;code&gt;GenericInlineModelAdmin&lt;/code&gt;&lt;/a&gt;) provided by &lt;a href=&quot;../contenttypes#module-django.contrib.contenttypes.admin&quot;&gt;&lt;code&gt;admin&lt;/code&gt;&lt;/a&gt;. They implement tabular and stacked visual layouts for the forms representing the inline objects, respectively, just like their non-generic counterparts. They behave just like any other inline. In your &lt;code&gt;admin.py&lt;/code&gt; for this example app:</source>
          <target state="translated">&lt;code&gt;Product&lt;/code&gt; で &lt;code&gt;Image&lt;/code&gt; インスタンスの編集と作成を許可する場合は、&lt;a href=&quot;../contenttypes#module-django.contrib.contenttypes.admin&quot;&gt; &lt;code&gt;admin&lt;/code&gt; &lt;/a&gt;によって提供される&lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericTabularInline&quot;&gt; &lt;code&gt;GenericTabularInline&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericStackedInline&quot;&gt; &lt;code&gt;GenericStackedInline&lt;/code&gt; &lt;/a&gt;（どちらも&lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt; &lt;code&gt;GenericInlineModelAdmin&lt;/code&gt; の&lt;/a&gt;サブクラス）を使用してビューを追加/変更できます。それらは、非ジェネリック版と同様に、インラインオブジェクトを表すフォームの表形式およびスタック形式のビジュアルレイアウトをそれぞれ実装します。他のインラインと同じように動作します。あなたに &lt;code&gt;admin.py&lt;/code&gt; この例のアプリのために：</target>
        </trans-unit>
        <trans-unit id="dc86f9ac38476957adf53db6078bb6b2f39a0899" translate="yes" xml:space="preserve">
          <source>If you want to associate additional assets with a form &amp;ndash; for example, CSS for form layout &amp;ndash; add a &lt;code&gt;Media&lt;/code&gt; declaration to the form:</source>
          <target state="translated">追加のアセットをフォーム（たとえば、フォームレイアウトのCSS）に関連付ける場合は、 &lt;code&gt;Media&lt;/code&gt; 宣言をフォームに追加します。</target>
        </trans-unit>
        <trans-unit id="ca5663445451e733c438680c0b1cdbdb78de064c" translate="yes" xml:space="preserve">
          <source>If you want to automatically load initial data for an app, create a &lt;a href=&quot;../topics/migrations#data-migrations&quot;&gt;data migration&lt;/a&gt;. Migrations are run when setting up the test database, so the data will be available there, subject to &lt;a href=&quot;../topics/testing/overview#test-case-serialized-rollback&quot;&gt;some limitations&lt;/a&gt;.</source>
          <target state="translated">アプリの初期データを自動的に読み込む場合は、&lt;a href=&quot;../topics/migrations#data-migrations&quot;&gt;データ移行を&lt;/a&gt;作成します。移行はテストデータベースの設定時に実行されるため、データはそこで利用できますが、&lt;a href=&quot;../topics/testing/overview#test-case-serialized-rollback&quot;&gt;いくつかの制限があり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="7f619ca80296d2ab8fb9d0ccf4cddacae4955198" translate="yes" xml:space="preserve">
          <source>If you want to be really adventurous, you could even mix a &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; subclass that is able to return &lt;em&gt;both&lt;/em&gt; HTML and JSON content, depending on some property of the HTTP request, such as a query argument or a HTTP header. Mix in both the &lt;code&gt;JSONResponseMixin&lt;/code&gt; and a &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin&quot;&gt;&lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt;&lt;/a&gt;, and override the implementation of &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt;&lt;code&gt;render_to_response()&lt;/code&gt;&lt;/a&gt; to defer to the appropriate rendering method depending on the type of response that the user requested:</source>
          <target state="translated">冒険したい場合は、クエリ引数やHTTPヘッダーなどのHTTPリクエストのプロパティに応じて、HTMLコンテンツとJSONコンテンツの&lt;em&gt;両方&lt;/em&gt;を返すことができる&lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt;サブクラスを混在させることもできます。 &lt;code&gt;JSONResponseMixin&lt;/code&gt; とSingleObjectTemplateResponseMixinの両方を混合し、&lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt; &lt;code&gt;render_to_response()&lt;/code&gt; の&lt;/a&gt;実装をオーバーライドして、ユーザーが要求した応答のタイプに応じて適切なレンダリングメソッドに&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin&quot;&gt; &lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt; &lt;/a&gt;にします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e48997e946b1d861be1ec919d53b25bf8cf15a1f" translate="yes" xml:space="preserve">
          <source>If you want to call a part of Django that is still synchronous, like the ORM, you will need to wrap it in a &lt;a href=&quot;#asgiref.sync.sync_to_async&quot;&gt;&lt;code&gt;sync_to_async()&lt;/code&gt;&lt;/a&gt; call. For example:</source>
          <target state="translated">ORMのように、まだ同期しているDjangoの一部を呼び出したい場合は、&lt;a href=&quot;#asgiref.sync.sync_to_async&quot;&gt; &lt;code&gt;sync_to_async()&lt;/code&gt; &lt;/a&gt;呼び出しでラップする必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="b286b7423a58f0cdbf8dc79961083cfa7e97f673" translate="yes" xml:space="preserve">
          <source>If you want to call the group something else, you can set &lt;code&gt;pk_url_kwarg&lt;/code&gt; on the view. More details can be found in the reference for &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">グループに別の &lt;code&gt;pk_url_kwarg&lt;/code&gt; 付けたい場合は、ビューにpk_url_kwargを設定できます。詳細については、&lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt;のリファレンスをご覧ください。</target>
        </trans-unit>
        <trans-unit id="73609264d7cce96ce235888ee071c9ba08110d63" translate="yes" xml:space="preserve">
          <source>If you want to change an unmanaged model (&lt;a href=&quot;../ref/models/options#django.db.models.Options.managed&quot;&gt;&lt;code&gt;managed=False&lt;/code&gt;&lt;/a&gt;) to managed, you must remove &lt;code&gt;managed=False&lt;/code&gt; and generate a migration before making other schema-related changes to the model, since schema changes that appear in the migration that contains the operation to change &lt;code&gt;Meta.managed&lt;/code&gt; may not be applied.</source>
          <target state="translated">非&lt;a href=&quot;../ref/models/options#django.db.models.Options.managed&quot;&gt; &lt;code&gt;managed=False&lt;/code&gt; &lt;/a&gt;モデル（managed = False）をmanaged に変更する場合は、 &lt;code&gt;managed=False&lt;/code&gt; を削除して、モデルに他のスキーマ関連の変更を加える前に移行を生成する必要があります。変更 &lt;code&gt;Meta.managed&lt;/code&gt; は適用されない場合があります。</target>
        </trans-unit>
        <trans-unit id="5a36c203fa50ee87df5fef8091b5a765a085602e" translate="yes" xml:space="preserve">
          <source>If you want to change the URL of the polls detail view to something else, perhaps to something like &lt;code&gt;polls/specifics/12/&lt;/code&gt; instead of doing it in the template (or templates) you would change it in &lt;code&gt;polls/urls.py&lt;/code&gt;:</source>
          <target state="translated">アンケートの詳細ビューのURLをテンプレート（または複数のテンプレート）ではなく、 &lt;code&gt;polls/specifics/12/&lt;/code&gt; に変更する場合は、 &lt;code&gt;polls/urls.py&lt;/code&gt; で変更します。</target>
        </trans-unit>
        <trans-unit id="cd1a5725d6fa059579a40d41f2adb758f0ec7936" translate="yes" xml:space="preserve">
          <source>If you want to change the server&amp;rsquo;s IP, pass it along with the port. For example, to listen on all available public IPs (which is useful if you are running Vagrant or want to show off your work on other computers on the network), use:</source>
          <target state="translated">サーバーのIPを変更する場合は、ポートと一緒に渡します。たとえば、使用可能なすべてのパブリックIPをリッスンするには（これは、Vagrantを実行している場合、またはネットワーク上の他のコンピューターでの作業を自慢したい場合に便利です）、次を使用します。</target>
        </trans-unit>
        <trans-unit id="7ac7bf138057c02102b254cb4eb4bc5c8cedeaa4" translate="yes" xml:space="preserve">
          <source>If you want to change the server&amp;rsquo;s port, pass it as a command-line argument. For instance, this command starts the server on port 8080:</source>
          <target state="translated">サーバーのポートを変更する場合は、コマンドライン引数として渡します。たとえば、次のコマンドはサーバーをポート8080で起動します。</target>
        </trans-unit>
        <trans-unit id="5a92e0eac7cf91c4cf108e75a7e4cb1c79be68f3" translate="yes" xml:space="preserve">
          <source>If you want to clear a bunch of keys at once, &lt;code&gt;delete_many()&lt;/code&gt; can take a list of keys to be cleared:</source>
          <target state="translated">&lt;code&gt;delete_many()&lt;/code&gt; キーを一度にクリアしたい場合、delete_many（）はクリアするキーのリストを取得できます。</target>
        </trans-unit>
        <trans-unit id="1a4bfa95187de8542d04a8bb8ab8cdef55f56bbf" translate="yes" xml:space="preserve">
          <source>If you want to clear the set of deferred fields, pass &lt;code&gt;None&lt;/code&gt; as a parameter to &lt;code&gt;defer()&lt;/code&gt;:</source>
          <target state="translated">据え置きフィールドのセットをクリアしたい場合は、パラメーターとして &lt;code&gt;None&lt;/code&gt; を &lt;code&gt;defer()&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="b6383cfa56650e6cabffa9d626bc1f48a0ac3ae1" translate="yes" xml:space="preserve">
          <source>If you want to combine the parts in different ways, or apply other processing to the final key (e.g., taking a hash digest of the key parts), you can provide a custom key function.</source>
          <target state="translated">異なる方法でパーツを組み合わせたり、最終的なキーに他の処理を適用したりしたい場合(キーパーツのハッシュダイジェストを取るなど)、カスタムキー機能を提供することができます。</target>
        </trans-unit>
        <trans-unit id="b365d93078a708fa2af27d965ccfe68bed9e884a" translate="yes" xml:space="preserve">
          <source>If you want to create &lt;a href=&quot;#proxy-models-permissions-topic&quot;&gt;permissions for a proxy model&lt;/a&gt;, pass &lt;code&gt;for_concrete_model=False&lt;/code&gt; to &lt;a href=&quot;../../ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt;&lt;code&gt;ContentTypeManager.get_for_model()&lt;/code&gt;&lt;/a&gt; to get the appropriate &lt;code&gt;ContentType&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;#proxy-models-permissions-topic&quot;&gt;プロキシモデルの権限&lt;/a&gt;を作成する場合は、 &lt;code&gt;for_concrete_model=False&lt;/code&gt; を&lt;a href=&quot;../../ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt; &lt;code&gt;ContentTypeManager.get_for_model()&lt;/code&gt; &lt;/a&gt;に渡して、適切な &lt;code&gt;ContentType&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="baafb11630a741f29de95c236634c1933ad61e35" translate="yes" xml:space="preserve">
          <source>If you want to create a formset that allows you to edit books belonging to a particular author, you could do this:</source>
          <target state="translated">特定の著者に属する本を編集できるようなフォームセットを作成したい場合は、このようにするとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="d22c7f47483da249cee231a92c3ccfc41e9f41cc" translate="yes" xml:space="preserve">
          <source>If you want to customize the default admin site, you can &lt;a href=&quot;#overriding-default-admin-site&quot;&gt;override it&lt;/a&gt;.</source>
          <target state="translated">デフォルトの管理サイトをカスタマイズしたい場合は、それを&lt;a href=&quot;#overriding-default-admin-site&quot;&gt;上書き&lt;/a&gt;できます。</target>
        </trans-unit>
        <trans-unit id="c29543c5a12e486f79959dd0c7c612e7d05d854c" translate="yes" xml:space="preserve">
          <source>If you want to disable sorting for some columns, set &lt;code&gt;sortable_by&lt;/code&gt; to a collection (e.g. &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, or &lt;code&gt;set&lt;/code&gt;) of the subset of &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display&quot;&gt;&lt;code&gt;list_display&lt;/code&gt;&lt;/a&gt; that you want to be sortable. An empty collection disables sorting for all columns.</source>
          <target state="translated">あなたは無効に設定され、いくつかの列、ソートのためにしたい場合は &lt;code&gt;sortable_by&lt;/code&gt; コレクションに（例えば &lt;code&gt;list&lt;/code&gt; 、 &lt;code&gt;tuple&lt;/code&gt; 、または &lt;code&gt;set&lt;/code&gt; のサブセットの）&lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display&quot;&gt; &lt;code&gt;list_display&lt;/code&gt; &lt;/a&gt;あなたはソート可能になりたいということ。空のコレクションは、すべての列のソートを無効にします。</target>
        </trans-unit>
        <trans-unit id="819a05f247100e1405566f18b1980253c4ad662e" translate="yes" xml:space="preserve">
          <source>If you want to display many-to-many relations using an inline, you can do so by defining an &lt;code&gt;InlineModelAdmin&lt;/code&gt; object for the relationship:</source>
          <target state="translated">インラインを使用して多対多のリレーションを表示する場合は、リレーションの &lt;code&gt;InlineModelAdmin&lt;/code&gt; オブジェクトを定義することで表示できます。</target>
        </trans-unit>
        <trans-unit id="4f2c2b260acd4e58d5f685e485d85b0eafeeb6b4" translate="yes" xml:space="preserve">
          <source>If you want to do any special formatting for either the title or description, &lt;a href=&quot;../templates/language&quot;&gt;Django templates&lt;/a&gt; can be used instead. Their paths can be specified with the &lt;code&gt;title_template&lt;/code&gt; and &lt;code&gt;description_template&lt;/code&gt; attributes on the &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class. The templates are rendered for each item and are passed two template context variables:</source>
          <target state="translated">タイトルまたは説明のいずれかに特別な書式を設定する場合は、代わりに&lt;a href=&quot;../templates/language&quot;&gt;Djangoテンプレート&lt;/a&gt;を使用できます。それらのパスは、&lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt;クラスの &lt;code&gt;title_template&lt;/code&gt; 属性と &lt;code&gt;description_template&lt;/code&gt; 属性で指定できます。テンプレートはアイテムごとにレンダリングされ、2つのテンプレートコンテキスト変数が渡されます。</target>
        </trans-unit>
        <trans-unit id="9a2a9d97c3bcdcc33735186ed18274e012b287d6" translate="yes" xml:space="preserve">
          <source>If you want to exclude multiple applications, pass &lt;code&gt;--exclude&lt;/code&gt; more than once:</source>
          <target state="translated">複数のアプリケーションを除外する場合は、 &lt;code&gt;--exclude&lt;/code&gt; を2回以上渡します。</target>
        </trans-unit>
        <trans-unit id="47dc3f16d887ad06159fa3d81469f66328dc09f5" translate="yes" xml:space="preserve">
          <source>If you want to find a URL in a specific admin instance, provide the name of that instance as a &lt;code&gt;current_app&lt;/code&gt; hint to the reverse call. For example, if you specifically wanted the admin view from the admin instance named &lt;code&gt;custom&lt;/code&gt;, you would need to call:</source>
          <target state="translated">特定の管理インスタンスでURLを検索する場合は、そのインスタンスの名前を &lt;code&gt;current_app&lt;/code&gt; ヒントとしてリバースコールに提供します。たとえば、特に &lt;code&gt;custom&lt;/code&gt; という名前の管理インスタンスから管理ビューが必要な場合は、次を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="bdd8542fd2cea7b2e24bbfa472ae38020dc7bf81" translate="yes" xml:space="preserve">
          <source>If you want to generate more than one aggregate, you add another argument to the &lt;code&gt;aggregate()&lt;/code&gt; clause. So, if we also wanted to know the maximum and minimum price of all books, we would issue the query:</source>
          <target state="translated">複数の集計を生成する場合は、 &lt;code&gt;aggregate()&lt;/code&gt; 句に別の引数を追加します。したがって、すべての書籍の最大価格と最小価格も知りたい場合は、次のクエリを発行します。</target>
        </trans-unit>
        <trans-unit id="e5ea26ccc56d69b0c9654b4277fee5e12990d99b" translate="yes" xml:space="preserve">
          <source>If you want to get a key&amp;rsquo;s value or set a value if the key isn&amp;rsquo;t in the cache, there is the &lt;code&gt;get_or_set()&lt;/code&gt; method. It takes the same parameters as &lt;code&gt;get()&lt;/code&gt; but the default is set as the new cache value for that key, rather than returned:</source>
          <target state="translated">キーの値を取得する場合、またはキーがキャッシュにない場合に値を設定する場合は、 &lt;code&gt;get_or_set()&lt;/code&gt; メソッドがあります。 &lt;code&gt;get()&lt;/code&gt; と同じパラメーターを受け取りますが、デフォルトでは、返されるのではなく、そのキーの新しいキャッシュ値として設定されます。</target>
        </trans-unit>
        <trans-unit id="e511661d588f548844ad43177d187a8b8e72782e" translate="yes" xml:space="preserve">
          <source>If you want to give the migration(s) a meaningful name instead of a generated one, you can use the &lt;a href=&quot;../ref/django-admin#cmdoption-makemigrations-name&quot;&gt;&lt;code&gt;makemigrations --name&lt;/code&gt;&lt;/a&gt; option:</source>
          <target state="translated">マイグレーションに、生成された名前ではなく意味のある名前を付けたい場合は、&lt;a href=&quot;../ref/django-admin#cmdoption-makemigrations-name&quot;&gt; &lt;code&gt;makemigrations --name&lt;/code&gt; &lt;/a&gt;オプションを使用できます。</target>
        </trans-unit>
        <trans-unit id="bb3d67e91b95e1098c276074de20f2c056d12673" translate="yes" xml:space="preserve">
          <source>If you want to include literal percent signs in the query, you have to double them if you are passing parameters.</source>
          <target state="translated">リテラルなパーセント記号をクエリに含めたい場合は、パラメータを渡す場合は2倍にしなければなりません。</target>
        </trans-unit>
        <trans-unit id="9211860caf6395f0b137a8be9dc6cdd28adf359b" translate="yes" xml:space="preserve">
          <source>If you want to inherit from &lt;code&gt;AbstractBase&lt;/code&gt;, but provide a different default manager, you can provide the default manager on the child class:</source>
          <target state="translated">&lt;code&gt;AbstractBase&lt;/code&gt; から継承したいが、別のデフォルトマネージャーを提供する場合は、子クラスでデフォルトマネージャーを提供できます。</target>
        </trans-unit>
        <trans-unit id="3a2a9c4986e8f5e6654175d1d77008d474dcec7c" translate="yes" xml:space="preserve">
          <source>If you want to instead provide custom key validation logic for one of the built-in backends, you can subclass it, override just the &lt;code&gt;validate_key&lt;/code&gt; method, and follow the instructions for &lt;a href=&quot;#using-a-custom-cache-backend&quot;&gt;using a custom cache backend&lt;/a&gt;. For instance, to do this for the &lt;code&gt;locmem&lt;/code&gt; backend, put this code in a module:</source>
          <target state="translated">代わりに、組み込みバックエンドの1つにカスタムキー検証ロジックを提供する場合は、それをサブクラス化して、 &lt;code&gt;validate_key&lt;/code&gt; メソッドのみをオーバーライド&lt;a href=&quot;#using-a-custom-cache-backend&quot;&gt;し、カスタムキャッシュバックエンド&lt;/a&gt;を使用するための手順に従います。たとえば、 &lt;code&gt;locmem&lt;/code&gt; バックエンドに対してこれを行うには、次のコードをモジュールに配置します。</target>
        </trans-unit>
        <trans-unit id="6c92f47c8dd63980980d8036fb8b746fc5307c13" translate="yes" xml:space="preserve">
          <source>If you want to let each individual user specify which language they prefer, then you also need to use the &lt;code&gt;LocaleMiddleware&lt;/code&gt;. &lt;code&gt;LocaleMiddleware&lt;/code&gt; enables language selection based on data from the request. It customizes content for each user.</source>
          <target state="translated">個々のユーザーに好みの言語を指定させる場合は、 &lt;code&gt;LocaleMiddleware&lt;/code&gt; も使用する必要があります。 &lt;code&gt;LocaleMiddleware&lt;/code&gt; は、リクエストからのデータに基づいて言語を選択できるようにします。ユーザーごとにコンテンツをカスタマイズします。</target>
        </trans-unit>
        <trans-unit id="187ea719ed80062b93104d8f62e4ca6ba48d9ded" translate="yes" xml:space="preserve">
          <source>If you want to lock parents models when using &lt;a href=&quot;../../topics/db/models#multi-table-inheritance&quot;&gt;multi-table inheritance&lt;/a&gt;, you must specify parent link fields (by default &lt;code&gt;&amp;lt;parent_model_name&amp;gt;_ptr&lt;/code&gt;) in the &lt;code&gt;of&lt;/code&gt; argument. For example:</source>
          <target state="translated">&lt;a href=&quot;../../topics/db/models#multi-table-inheritance&quot;&gt;マルチテーブル継承&lt;/a&gt;を使用しているときに親モデルをロックする場合は、 &lt;code&gt;of&lt;/code&gt; 引数で親リンクフィールド（デフォルトでは &lt;code&gt;&amp;lt;parent_model_name&amp;gt;_ptr&lt;/code&gt; ）を指定する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="1bc0322e1dee230846f920ac1858bed59fef0294" translate="yes" xml:space="preserve">
          <source>If you want to make one widget instance look different from another, you will need to specify additional attributes at the time when the widget object is instantiated and assigned to a form field (and perhaps add some rules to your CSS files).</source>
          <target state="translated">1つのウィジェットインスタンスを別のウィジェットインスタンスと異なる外観にしたい場合、ウィジェットオブジェクトがインスタンス化され、フォームフィールドに割り当てられる際に、追加の属性を指定する必要があります(そして、CSSファイルにいくつかのルールを追加する必要があるかもしれません)。</target>
        </trans-unit>
        <trans-unit id="358714f5af82b779858f9cc401582af9b516624f" translate="yes" xml:space="preserve">
          <source>If you want to obtain the cache key used for a cached fragment, you can use &lt;code&gt;make_template_fragment_key&lt;/code&gt;. &lt;code&gt;fragment_name&lt;/code&gt; is the same as second argument to the &lt;code&gt;cache&lt;/code&gt; template tag; &lt;code&gt;vary_on&lt;/code&gt; is a list of all additional arguments passed to the tag. This function can be useful for invalidating or overwriting a cached item, for example:</source>
          <target state="translated">キャッシュされたフラグメントに使用されるキャッシュキーを取得する場合は、 &lt;code&gt;make_template_fragment_key&lt;/code&gt; を使用できます。 &lt;code&gt;fragment_name&lt;/code&gt; は、 &lt;code&gt;cache&lt;/code&gt; テンプレートタグの2番目の引数と同じです。 &lt;code&gt;vary_on&lt;/code&gt; は、タグに渡されるすべての追加の引数のリストです。この関数は、キャッシュされたアイテムを無効化または上書きする場合に役立ちます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="ba4ffba3fdbb584b8cac1266ddb0e4fc416423c1" translate="yes" xml:space="preserve">
          <source>If you want to override certain options of the cache backend the storage uses, specify a custom entry in the &lt;a href=&quot;../settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; setting named &lt;code&gt;'staticfiles'&lt;/code&gt;. It falls back to using the &lt;code&gt;'default'&lt;/code&gt; cache backend.</source>
          <target state="translated">あなたがキャッシュバックエンドストレージ用途の特定のオプションを無効にしたい場合は、カスタム項目を指定&lt;a href=&quot;../settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; &lt;/a&gt;という名前の設定を &lt;code&gt;'staticfiles'&lt;/code&gt; 。 &lt;code&gt;'default'&lt;/code&gt; キャッシュバックエンドの使用にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="08bf32a6e2fd3850e1313d6ddcddcbe5d0693024" translate="yes" xml:space="preserve">
          <source>If you want to pass additional parameters to &lt;code&gt;xgettext&lt;/code&gt;, you need to create a custom &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;makemessages&lt;/code&gt;&lt;/a&gt; command and override its &lt;code&gt;xgettext_options&lt;/code&gt; attribute:</source>
          <target state="translated">追加のパラメーターを &lt;code&gt;xgettext&lt;/code&gt; に渡したい場合は、カスタムの&lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;makemessages&lt;/code&gt; &lt;/a&gt;コマンドを作成し、その &lt;code&gt;xgettext_options&lt;/code&gt; 属性をオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="0fcbbd1a64b93e2ce60b3ae36a4546b17d7404e5" translate="yes" xml:space="preserve">
          <source>If you want to preprocess the value just before saving, you can use &lt;a href=&quot;../ref/models/fields#django.db.models.Field.pre_save&quot;&gt;&lt;code&gt;pre_save()&lt;/code&gt;&lt;/a&gt;. For example, Django&amp;rsquo;s &lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; uses this method to set the attribute correctly in the case of &lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt;&lt;code&gt;auto_now&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now_add&quot;&gt;&lt;code&gt;auto_now_add&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">保存する直前に値を前処理する場合は、&lt;a href=&quot;../ref/models/fields#django.db.models.Field.pre_save&quot;&gt; &lt;code&gt;pre_save()&lt;/code&gt; を&lt;/a&gt;使用できます。たとえば、Djangoの&lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt;はこのメソッドを使用して、&lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt; &lt;code&gt;auto_now&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now_add&quot;&gt; &lt;code&gt;auto_now_add&lt;/code&gt; の&lt;/a&gt;場合に属性を正しく設定します。</target>
        </trans-unit>
        <trans-unit id="82aeed39d2f4a0fb067ad666d1bfbc02c9469e46" translate="yes" xml:space="preserve">
          <source>If you want to provide some additional classes in addition to the error and required classes that may be required, you can provide those classes as an argument:</source>
          <target state="translated">エラークラスや必須クラスに加えて、いくつかの追加クラスを提供したい場合は、それらのクラスを引数として提供することができます。</target>
        </trans-unit>
        <trans-unit id="d347d884e0e4a232836473d57e45545a254b5f95" translate="yes" xml:space="preserve">
          <source>If you want to put the template overrides in an app called &lt;code&gt;myapp&lt;/code&gt; and the templates to override are named &lt;code&gt;blog/list.html&lt;/code&gt; and &lt;code&gt;blog/post.html&lt;/code&gt;, then your directory structure will look like:</source>
          <target state="translated">テンプレートオーバーライドを &lt;code&gt;myapp&lt;/code&gt; というアプリに配置し、オーバーライドするテンプレートの名前が &lt;code&gt;blog/list.html&lt;/code&gt; および &lt;code&gt;blog/post.html&lt;/code&gt; である場合、ディレクトリ構造は次のようになります。</target>
        </trans-unit>
        <trans-unit id="8675cd01d369192cb8585e183346b84ac04d8fa3" translate="yes" xml:space="preserve">
          <source>If you want to render templates with customizations from your &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting, such as context processors for example, use the &lt;a href=&quot;#django.forms.renderers.TemplatesSetting&quot;&gt;&lt;code&gt;TemplatesSetting&lt;/code&gt;&lt;/a&gt; renderer.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt;設定からのカスタマイズを使用してテンプレートをレンダリングする場合（例えば、コンテキストプロセッサーなど）、&lt;a href=&quot;#django.forms.renderers.TemplatesSetting&quot;&gt; &lt;code&gt;TemplatesSetting&lt;/code&gt; &lt;/a&gt;レンダラーを使用します。</target>
        </trans-unit>
        <trans-unit id="a54cf1350fd260fcc8471b214783924c0962b9d7" translate="yes" xml:space="preserve">
          <source>If you want to render the context only with the variables provided (or even no variables at all), use the &lt;code&gt;only&lt;/code&gt; option. No other variables are available to the included template:</source>
          <target state="translated">提供された変数のみを使用して（または変数をまったく使用し &lt;code&gt;only&lt;/code&gt; ）コンテキストをレンダリングする場合は、onlyオプションを使用します。含まれているテンプレートで使用できる他の変数はありません。</target>
        </trans-unit>
        <trans-unit id="1299f323e280c4314aecc4bf363b73686a188120" translate="yes" xml:space="preserve">
          <source>If you want to replace the upload handlers completely, you can assign a new list:</source>
          <target state="translated">アップロードハンドラを完全に置き換えたい場合は、新しいリストを割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="3b1eb52947855dd8e6837d854ad3dbc97c8dfac6" translate="yes" xml:space="preserve">
          <source>If you want to represent a model with the format &lt;code&gt;app_label.object_name&lt;/code&gt; or &lt;code&gt;app_label.model_name&lt;/code&gt; you can use &lt;code&gt;model._meta.label&lt;/code&gt; or &lt;code&gt;model._meta.label_lower&lt;/code&gt; respectively.</source>
          <target state="translated">&lt;code&gt;app_label.object_name&lt;/code&gt; または &lt;code&gt;app_label.model_name&lt;/code&gt; の形式でモデルを表現する場合は、それぞれ &lt;code&gt;model._meta.label&lt;/code&gt; または &lt;code&gt;model._meta.label_lower&lt;/code&gt; を使用できます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
