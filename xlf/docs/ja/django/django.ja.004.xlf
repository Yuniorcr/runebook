<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="651990921909d5750a9b110f7087b0c6ff565c6e" translate="yes" xml:space="preserve">
          <source>Accepts a list of at least two text fields or expressions and returns the concatenated text. Each argument must be of a text or char type. If you want to concatenate a &lt;code&gt;TextField()&lt;/code&gt; with a &lt;code&gt;CharField()&lt;/code&gt;, then be sure to tell Django that the &lt;code&gt;output_field&lt;/code&gt; should be a &lt;code&gt;TextField()&lt;/code&gt;. Specifying an &lt;code&gt;output_field&lt;/code&gt; is also required when concatenating a &lt;code&gt;Value&lt;/code&gt; as in the example below.</source>
          <target state="translated">少なくとも2つのテキストフィールドまたは式のリストを受け入れ、連結されたテキストを返します。各引数は、テキストまたは文字型でなければなりません。 &lt;code&gt;TextField()&lt;/code&gt; を &lt;code&gt;CharField()&lt;/code&gt; （）と連結したい場合は、Djangoに &lt;code&gt;output_field&lt;/code&gt; が &lt;code&gt;TextField()&lt;/code&gt; であることを伝えてください。以下の例のように &lt;code&gt;Value&lt;/code&gt; を連結する場合も、 &lt;code&gt;output_field&lt;/code&gt; を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="cbc82473a8e0bd0fe72439d5e4d84775a91a5e4a" translate="yes" xml:space="preserve">
          <source>Accepts a numeric field or expression and returns the text representation of the expression as a single character. It works the same as Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/functions.html#chr&quot;&gt;&lt;code&gt;chr()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">数値フィールドまたは式を受け入れ、式のテキスト表現を単一の文字として返します。Pythonの&lt;a href=&quot;https://docs.python.org/3/library/functions.html#chr&quot;&gt; &lt;code&gt;chr()&lt;/code&gt; &lt;/a&gt;関数と同じように機能します。</target>
        </trans-unit>
        <trans-unit id="0a82ee117f4ab7b34cf69b9f475422a38f72ec13" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns a &lt;a href=&quot;https://developers.google.com/kml/documentation/&quot;&gt;Keyhole Markup Language (KML)&lt;/a&gt; representation of the geometry.</source>
          <target state="translated">単一の地理フィールドまたは式を受け入れ、ジオメトリの&lt;a href=&quot;https://developers.google.com/kml/documentation/&quot;&gt;キーホールマークアップ言語（KML）&lt;/a&gt;表現を返します。</target>
        </trans-unit>
        <trans-unit id="95f21af24d82a0d743fb2b1ae13bade9e937af0c" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns a &lt;a href=&quot;https://en.wikipedia.org/wiki/Geography_Markup_Language&quot;&gt;Geographic Markup Language (GML)&lt;/a&gt; representation of the geometry.</source>
          <target state="translated">単一の地理フィールドまたは式を受け入れ、ジオメトリの&lt;a href=&quot;https://en.wikipedia.org/wiki/Geography_Markup_Language&quot;&gt;地理的マークアップ言語（GML）&lt;/a&gt;表現を返します。</target>
        </trans-unit>
        <trans-unit id="56950137bc79c1fe91b955af4f24e5c6499122ec" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns a &lt;a href=&quot;https://en.wikipedia.org/wiki/Geohash&quot;&gt;GeoHash&lt;/a&gt; representation of the geometry.</source>
          <target state="translated">単一の地理フィールドまたは式を受け入れ、ジオメトリの&lt;a href=&quot;https://en.wikipedia.org/wiki/Geohash&quot;&gt;GeoHash&lt;/a&gt;表現を返します。</target>
        </trans-unit>
        <trans-unit id="2edd8558ead8c0c41c8046c981a7b5ed180637f0" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns a &lt;a href=&quot;https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry&quot;&gt;Well-known text (WKT)&lt;/a&gt; representation of the geometry.</source>
          <target state="translated">Accepts a single geographic field or expression and returns a &lt;a href=&quot;https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry&quot;&gt;Well-known text (WKT)&lt;/a&gt; representation of the geometry.</target>
        </trans-unit>
        <trans-unit id="3571125a5f8d9978dd538b50f30c66266728eb8e" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns a &lt;a href=&quot;https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry#Well-known_binary&quot;&gt;Well-known binary (WKB)&lt;/a&gt; representation of the geometry.</source>
          <target state="translated">Accepts a single geographic field or expression and returns a &lt;a href=&quot;https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry#Well-known_binary&quot;&gt;Well-known binary (WKB)&lt;/a&gt; representation of the geometry.</target>
        </trans-unit>
        <trans-unit id="657e11eb33f01b69f5e33eeb949a91f6fd40ee0a" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns a &lt;a href=&quot;https://geojson.org/&quot;&gt;GeoJSON&lt;/a&gt; representation of the geometry. Note that the result is not a complete GeoJSON structure but only the &lt;code&gt;geometry&lt;/code&gt; key content of a GeoJSON structure. See also &lt;a href=&quot;serializers&quot;&gt;GeoJSON Serializer&lt;/a&gt;.</source>
          <target state="translated">単一の地理フィールドまたは式を受け入れ、ジオメトリの&lt;a href=&quot;https://geojson.org/&quot;&gt;GeoJSON&lt;/a&gt;表現を返します。結果は完全なGeoJSON構造ではなく、GeoJSON構造の &lt;code&gt;geometry&lt;/code&gt; キーコンテンツのみであることに注意してください。&lt;a href=&quot;serializers&quot;&gt;GeoJSON Serializer&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="14bfeffca9ca818d49288a07690181434cb7c29d" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns a &lt;a href=&quot;https://www.w3.org/Graphics/SVG/&quot;&gt;Scalable Vector Graphics (SVG)&lt;/a&gt; representation of the geometry.</source>
          <target state="translated">単一の地理フィールドまたは式を受け入れ、ジオメトリの&lt;a href=&quot;https://www.w3.org/Graphics/SVG/&quot;&gt;Scalable Vector Graphics（SVG）&lt;/a&gt;表現を返します。</target>
        </trans-unit>
        <trans-unit id="9eaceb8f73c655f3cc6a68da79e3d30ea6e56980" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns a &lt;code&gt;Point&lt;/code&gt; geometry guaranteed to lie on the surface of the field; otherwise returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">単一の地理フィールドまたは式を受け入れ、フィールドの表面にあることが保証された &lt;code&gt;Point&lt;/code&gt; ジオメトリを返します。それ以外の場合は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2e84009ac9a234b365e6fe51fbebd50d36c375d3" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns a geometry with all points snapped to the given grid. How the geometry is snapped to the grid depends on how many numeric (either float, integer, or long) arguments are given.</source>
          <target state="translated">単一の地理的フィールドまたは式を受け取り、指定されたグリッドにスナップされたすべてのポイントを含むジオメトリを返します。ジオメトリがどのようにグリッドにスナップされるかは、数値(float、integer、またはlong)引数の数に依存します。</target>
        </trans-unit>
        <trans-unit id="1d75b7405eb2f866cf68e396014013bf7002cf93" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns a geometry with its coordinates offset by the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and optionally &lt;code&gt;z&lt;/code&gt; numeric parameters.</source>
          <target state="translated">単一の地理フィールドまたは式を受け入れ、その座標が &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;y&lt;/code&gt; 、およびオプションで &lt;code&gt;z&lt;/code&gt; 数値パラメーターによってオフセットされた形状を返します。</target>
        </trans-unit>
        <trans-unit id="11726a810332e7e30ca7913f37c322116b5e114f" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns a geometry with reversed coordinates.</source>
          <target state="translated">単一の地理的フィールドまたは式を受け取り、逆座標を持つジオメトリを返します。</target>
        </trans-unit>
        <trans-unit id="19f890c9c0859a45cf1fdbe2e69ff88d46456dc9" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns a geometry with scaled coordinates by multiplying them with the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and optionally &lt;code&gt;z&lt;/code&gt; parameters.</source>
          <target state="translated">単一の地理フィールドまたは式を受け入れ、それらに &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;y&lt;/code&gt; 、およびオプションで &lt;code&gt;z&lt;/code&gt; パラメータを乗算することにより、スケーリングされた座標を持つジオメトリを返します。</target>
        </trans-unit>
        <trans-unit id="50ed891d166b4c3b41549d228485aaff67d3e2b4" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns a modified version of the polygon/multipolygon in which all exterior rings are oriented clockwise and all interior rings are oriented counterclockwise. Non-polygonal geometries are returned unchanged.</source>
          <target state="translated">単一の地理的フィールドまたは式を受け取り,外側のリングがすべて時計回り,内側のリングがすべて反時計回りの方向を向いている多角形/多角形の修正版を返します.多角形以外の幾何学は,変更されずに返されます.</target>
        </trans-unit>
        <trans-unit id="3f683d3ed41ea8f15ff7f4b8fd69947814c3d503" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns the &lt;code&gt;centroid&lt;/code&gt; value of the geometry.</source>
          <target state="translated">単一の地理フィールドまたは式を受け入れ、ジオメトリの &lt;code&gt;centroid&lt;/code&gt; 値を返します。</target>
        </trans-unit>
        <trans-unit id="a16fb807e556b8168c52b4c02df11039d3c22778" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns the area of the field as an &lt;a href=&quot;measure#django.contrib.gis.measure.Area&quot;&gt;&lt;code&gt;Area&lt;/code&gt;&lt;/a&gt; measure.</source>
          <target state="translated">単一の地理フィールドまたは式を受け入れ、フィールドの面積を&lt;a href=&quot;measure#django.contrib.gis.measure.Area&quot;&gt; &lt;code&gt;Area&lt;/code&gt; &lt;/a&gt;メジャーとして返します。</target>
        </trans-unit>
        <trans-unit id="894baa74f10f984cb42ee3542530dcac1030b236" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns the geometry representing the bounding box of the geometry.</source>
          <target state="translated">単一のジオメトリフィールドまたは式を受け取り、ジオメトリのバウンディングボックスを表すジオメトリを返します。</target>
        </trans-unit>
        <trans-unit id="b9a576062e78c1c62c2d11552d4116e25853b0ec" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns the memory size (number of bytes) that the geometry field takes.</source>
          <target state="translated">単一のジオメトリフィールドまたは式を受け取り、ジオメトリフィールドが取るメモリサイズ(バイト数)を返します。</target>
        </trans-unit>
        <trans-unit id="1405cab29ed4f82b8153fbc0581c26e14c0bc05a" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns the number of geometries if the geometry field is a collection (e.g., a &lt;code&gt;GEOMETRYCOLLECTION&lt;/code&gt; or &lt;code&gt;MULTI*&lt;/code&gt; field). Returns 1 for single geometries.</source>
          <target state="translated">単一の地理フィールドまたは式を受け入れ、ジオメトリフィールドがコレクション（たとえば、 &lt;code&gt;GEOMETRYCOLLECTION&lt;/code&gt; または &lt;code&gt;MULTI*&lt;/code&gt; フィールド）の場合、ジオメトリの数を返します。単一ジオメトリの場合は1を返します。</target>
        </trans-unit>
        <trans-unit id="4bafcd90cee37aa8bf66b2eb68ddf7dda0f2f16d" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns the number of points in a geometry.</source>
          <target state="translated">単一の地理的フィールドまたは式を受け取り、ジオメトリ内の点の数を返します。</target>
        </trans-unit>
        <trans-unit id="e1a3b53570fa1619e85009fc2e43afc948df7def" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns the perimeter of the geometry field as a &lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">単一の地理フィールドまたは式を受け入れ、ジオメトリフィールドの周囲を&lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt; &lt;code&gt;Distance&lt;/code&gt; &lt;/a&gt;オブジェクトとして返します。</target>
        </trans-unit>
        <trans-unit id="9f87d11cff69a70303d5e7c77cbfef1fc27494e1" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic field or expression and returns the smallest circle polygon that can fully contain the geometry.</source>
          <target state="translated">単一の地理的フィールドまたは式を受け取り、ジオメトリを完全に含むことができる最小の円の多角形を返します。</target>
        </trans-unit>
        <trans-unit id="9b263a6957772a42280da039db9e98bbe33bd417" translate="yes" xml:space="preserve">
          <source>Accepts a single geographic linestring or multilinestring field or expression and returns its length as a &lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; measure.</source>
          <target state="translated">単一の地理的折れ線または複数折れ線フィールドまたは式を受け入れ、その長さを&lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt; &lt;code&gt;Distance&lt;/code&gt; &lt;/a&gt;メジャーとして返します。</target>
        </trans-unit>
        <trans-unit id="0f0f937f22036d4da21aaf24afbf52a9eb9d0201" translate="yes" xml:space="preserve">
          <source>Accepts a single text field or an expression, a query, a config, and a set of options. Returns highlighted search results.</source>
          <target state="translated">単一のテキストフィールドまたは式、クエリ、設定、オプションのセットを受け取ります。ハイライトされた検索結果を返します。</target>
        </trans-unit>
        <trans-unit id="e94bb56a17617d1d457d56e9cbbcda0a2fff3aed" translate="yes" xml:space="preserve">
          <source>Accepts a single text field or expression and returns the MD5 hash of the string.</source>
          <target state="translated">単一のテキストフィールドまたは式を受け取り、文字列のMD5ハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="9ae8765b2acec59844a12c8e2e495aa22aec2438" translate="yes" xml:space="preserve">
          <source>Accepts a single text field or expression and returns the Unicode code point value for the first character of that expression. It works similar to Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/functions.html#ord&quot;&gt;&lt;code&gt;ord()&lt;/code&gt;&lt;/a&gt; function, but an exception isn&amp;rsquo;t raised if the expression is more than one character long.</source>
          <target state="translated">単一のテキストフィールドまたは式を受け入れ、その式の最初の文字のUnicodeコードポイント値を返します。Pythonの&lt;a href=&quot;https://docs.python.org/3/library/functions.html#ord&quot;&gt; &lt;code&gt;ord()&lt;/code&gt; &lt;/a&gt;関数と同様に機能しますが、式が1文字を超える場合でも例外は発生しません。</target>
        </trans-unit>
        <trans-unit id="549c3fd3fc223077dcaadcf7f13534cf15c32595" translate="yes" xml:space="preserve">
          <source>Accepts a single text field or expression and returns the characters of that expression in reverse order.</source>
          <target state="translated">単一のテキストフィールドまたは式を受け取り、その式の文字を逆順に返します。</target>
        </trans-unit>
        <trans-unit id="74229dcf98653374b869555ef5f0abe75fcf68bb" translate="yes" xml:space="preserve">
          <source>Accepts a single text field or expression and returns the lowercase representation.</source>
          <target state="translated">単一のテキストフィールドまたは式を受け取り、小文字の表現を返します。</target>
        </trans-unit>
        <trans-unit id="e06db45cb0075a89734c8009693479cd720e1d83" translate="yes" xml:space="preserve">
          <source>Accepts a single text field or expression and returns the number of characters the value has. If the expression is null, then the length will also be null.</source>
          <target state="translated">単一のテキストフィールドまたは式を受け取り、値が持つ文字数を返します。式が null の場合、長さも null になります。</target>
        </trans-unit>
        <trans-unit id="71f22e95c98dffd3a8ec5fc5c82730d47889766d" translate="yes" xml:space="preserve">
          <source>Accepts a single text field or expression and returns the particular hash of the string.</source>
          <target state="translated">単一のテキストフィールドまたは式を受け取り、文字列の特定のハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="4b2b5833bcf18880c991919c7207a6a57cbabf44" translate="yes" xml:space="preserve">
          <source>Accepts a single text field or expression and returns the uppercase representation.</source>
          <target state="translated">単一のテキストフィールドまたは式を受け取り、大文字表現を返します。</target>
        </trans-unit>
        <trans-unit id="ea58a83f52f471ce437448da8c01634ab701fee5" translate="yes" xml:space="preserve">
          <source>Accepts any format understood by &lt;a href=&quot;../utils#django.utils.dateparse.parse_duration&quot;&gt;&lt;code&gt;parse_duration()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../utils#django.utils.dateparse.parse_duration&quot;&gt; &lt;code&gt;parse_duration()&lt;/code&gt; が&lt;/a&gt;理解できる任意のフォーマットを受け入れます。</target>
        </trans-unit>
        <trans-unit id="9e4915db3019ce7f68f5dd7ee8090bc81c9101b1" translate="yes" xml:space="preserve">
          <source>Accepts two expressions and returns &lt;code&gt;None&lt;/code&gt; if they are equal, otherwise returns &lt;code&gt;expression1&lt;/code&gt;.</source>
          <target state="translated">2つの式を受け入れ、等しい場合は &lt;code&gt;None&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;expression1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ee7856f2001d93e76e9b8af8270479d621a210cd" translate="yes" xml:space="preserve">
          <source>Accepts two geographic fields or expressions and returns the distance between them, as a &lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; object. On MySQL, a raw float value is returned when the coordinates are geodetic.</source>
          <target state="translated">2つの地理フィールドまたは式を受け入れ、それらの間の&lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt; &lt;code&gt;Distance&lt;/code&gt; &lt;/a&gt;オブジェクトとして返します。MySQLでは、座標が測地的である場合、未加工のfloat値が返されます。</target>
        </trans-unit>
        <trans-unit id="958327c3e5327273cc2f3161e66e45020fff9c66" translate="yes" xml:space="preserve">
          <source>Accepts two geographic fields or expressions and returns the distance between them. When used in an &lt;a href=&quot;../../models/querysets#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt; clause, it provides index-assisted nearest-neighbor result sets.</source>
          <target state="translated">2つの地理フィールドまたは式を受け入れ、それらの間の距離を返します。&lt;a href=&quot;../../models/querysets#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt;句で使用すると、インデックス支援の最近傍結果セットが提供されます。</target>
        </trans-unit>
        <trans-unit id="d806ff458db000b20381bf0310c3d85777aca1a9" translate="yes" xml:space="preserve">
          <source>Accepts two geographic fields or expressions and returns the geometric difference, that is the part of geometry A that does not intersect with geometry B.</source>
          <target state="translated">2つの地理的なフィールドまたは式を受け取り、幾何学的な差、つまり幾何学的なAのうち幾何学的なBと交差しない部分を返します。</target>
        </trans-unit>
        <trans-unit id="5f8e0479b490fd8a5168039d9c00a12fcb470f1a" translate="yes" xml:space="preserve">
          <source>Accepts two geographic fields or expressions and returns the geometric intersection between them.</source>
          <target state="translated">2つの地理的なフィールドまたは式を受け取り,それらの間の幾何学的な交点を返します.</target>
        </trans-unit>
        <trans-unit id="03cd71f01f6f1f5993554ef614bcf4862e65af76" translate="yes" xml:space="preserve">
          <source>Accepts two geographic fields or expressions and returns the geometric symmetric difference (union without the intersection) between the given parameters.</source>
          <target state="translated">2つの地理的なフィールドまたは式を受け取り,与えられたパラメータ間の幾何学的対称差(交点のない和)を返します.</target>
        </trans-unit>
        <trans-unit id="d74f7c7cef82abfe45344bcbeb4804272efaa5c8" translate="yes" xml:space="preserve">
          <source>Accepts two geographic fields or expressions and returns the union of both geometries.</source>
          <target state="translated">2つの地理的なフィールドまたは式を受け取り、両方の幾何学の和を返します。</target>
        </trans-unit>
        <trans-unit id="fe506cac1179895dadcf2a28dd9fc43f361e3104" translate="yes" xml:space="preserve">
          <source>Accepts two numeric fields or expressions and returns the logarithm of the first to base of the second.</source>
          <target state="translated">2つの数値フィールドまたは式を受け取り、1つ目の対数を2つ目の基底に返します。</target>
        </trans-unit>
        <trans-unit id="439402aace1e8ee2628b4527313d1b3db278c384" translate="yes" xml:space="preserve">
          <source>Accepts two numeric fields or expressions and returns the remainder of the first divided by the second (modulo operation).</source>
          <target state="translated">2つの数値フィールドまたは式を受け取り、1つ目のフィールドを2つ目で割った残りを返します(モジュロ演算)。</target>
        </trans-unit>
        <trans-unit id="3682b37ac52be11c06f4185d23eb9ef0443a03f0" translate="yes" xml:space="preserve">
          <source>Accepts two numeric fields or expressions and returns the value of the first raised to the power of the second.</source>
          <target state="translated">2つの数値フィールドまたは式を受け取り、最初に上げられた値を2の累乗で返します。</target>
        </trans-unit>
        <trans-unit id="27fa97d87729019951db2d8a6aebd5731fee67d6" translate="yes" xml:space="preserve">
          <source>Access the &lt;a href=&quot;#django.forms.Form.errors&quot;&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/a&gt; attribute to get a dictionary of error messages:</source>
          <target state="translated">&lt;a href=&quot;#django.forms.Form.errors&quot;&gt; &lt;code&gt;errors&lt;/code&gt; &lt;/a&gt;属性にアクセスして、エラーメッセージの辞書を取得します。</target>
        </trans-unit>
        <trans-unit id="70844f99b01c9887bd3cd6ac918267f64ac095d5" translate="yes" xml:space="preserve">
          <source>Access to delete an object is limited to users with the &amp;ldquo;delete&amp;rdquo; permission for that type of object.</source>
          <target state="translated">オブジェクトを削除するためのアクセスは、そのタイプのオブジェクトの「削除」権限を持つユーザーに制限されています。</target>
        </trans-unit>
        <trans-unit id="366a11d335f02df3f29598095bfe942fd23dae76" translate="yes" xml:space="preserve">
          <source>Access to view objects is limited to users with the &amp;ldquo;view&amp;rdquo; or &amp;ldquo;change&amp;rdquo; permission for that type of object.</source>
          <target state="translated">オブジェクトの表示へのアクセスは、そのタイプのオブジェクトの「表示」または「変更」権限を持つユーザーに制限されています。</target>
        </trans-unit>
        <trans-unit id="38e06500cb4d92bb119465a50fb9b86093a6009c" translate="yes" xml:space="preserve">
          <source>Access to view the &amp;ldquo;add&amp;rdquo; form and add an object is limited to users with the &amp;ldquo;add&amp;rdquo; permission for that type of object.</source>
          <target state="translated">「追加」フォームを表示してオブジェクトを追加するためのアクセスは、そのタイプのオブジェクトの「追加」権限を持つユーザーに制限されています。</target>
        </trans-unit>
        <trans-unit id="93db48fd1dde234b588b1a45da085aa25579c603" translate="yes" xml:space="preserve">
          <source>Access to view the change list, view the &amp;ldquo;change&amp;rdquo; form and change an object is limited to users with the &amp;ldquo;change&amp;rdquo; permission for that type of object.</source>
          <target state="translated">変更リストの表示、「変更」フォームの表示、およびオブジェクトの変更へのアクセスは、そのタイプのオブジェクトの「変更」権限を持つユーザーに制限されています。</target>
        </trans-unit>
        <trans-unit id="2813c4129c2938f226f74f0d6397ea87e54eeead" translate="yes" xml:space="preserve">
          <source>Accessing &amp;ldquo;clean&amp;rdquo; data</source>
          <target state="translated">「クリーンな」データへのアクセス</target>
        </trans-unit>
        <trans-unit id="4fbacb7119cba6d5d1991036814bdceefb24b0f5" translate="yes" xml:space="preserve">
          <source>Accessing &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.POST&quot;&gt;&lt;code&gt;request.POST&lt;/code&gt;&lt;/a&gt; inside middleware before the view runs or in &lt;code&gt;process_view()&lt;/code&gt; will prevent any view running after the middleware from being able to &lt;a href=&quot;file-uploads#modifying-upload-handlers-on-the-fly&quot;&gt;modify the upload handlers for the request&lt;/a&gt;, and should normally be avoided.</source>
          <target state="translated">ビューが実行される前または &lt;code&gt;process_view()&lt;/code&gt; でミドルウェア内の&lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.POST&quot;&gt; &lt;code&gt;request.POST&lt;/code&gt; &lt;/a&gt;にアクセスすると、ミドルウェアの後に実行されるビュー&lt;a href=&quot;file-uploads#modifying-upload-handlers-on-the-fly&quot;&gt;がリクエストのアップロードハンドラー&lt;/a&gt;を変更できなくなり、通常は回避する必要があります。</target>
        </trans-unit>
        <trans-unit id="dba8c55facde2fcbf3afa09a373e3e68108704d8" translate="yes" xml:space="preserve">
          <source>Accessing method calls</source>
          <target state="translated">メソッド呼び出しへのアクセス</target>
        </trans-unit>
        <trans-unit id="9e9865ef8d15c01595b6b655ad850c74bce1812a" translate="yes" xml:space="preserve">
          <source>Accessing models from other apps</source>
          <target state="translated">他のアプリからモデルにアクセスする</target>
        </trans-unit>
        <trans-unit id="bbc0ef11767ffcb6245d3a45e892639cc25a7bb1" translate="yes" xml:space="preserve">
          <source>Accessing the cache</source>
          <target state="translated">キャッシュへのアクセス</target>
        </trans-unit>
        <trans-unit id="f2275e202f6f5545a5e5a268c8877e7f21562068" translate="yes" xml:space="preserve">
          <source>Accessing the fields from the form</source>
          <target state="translated">フォームからフィールドにアクセスする</target>
        </trans-unit>
        <trans-unit id="8bd4b1d305d7be0f627fb7f8c1aa2a94b62c4214" translate="yes" xml:space="preserve">
          <source>According to this design, the URL for the archive corresponding to year &lt;em&gt;nnnn&lt;/em&gt; is &lt;code&gt;/articles/&amp;lt;nnnn&amp;gt;/&lt;/code&gt;.</source>
          <target state="translated">この設計によると、年&lt;em&gt;nnnnに&lt;/em&gt;対応するアーカイブのURL は &lt;code&gt;/articles/&amp;lt;nnnn&amp;gt;/&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="daabc7b465ab7ca34a13943237cf2f1d8a517b51" translate="yes" xml:space="preserve">
          <source>Acquiring the token if &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt;&lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_HTTPONLY&quot;&gt;&lt;code&gt;CSRF_COOKIE_HTTPONLY&lt;/code&gt;&lt;/a&gt; are &lt;code&gt;False&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt; &lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;settings#std:setting-CSRF_COOKIE_HTTPONLY&quot;&gt; &lt;code&gt;CSRF_COOKIE_HTTPONLY&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;False&lt;/code&gt; の場合のトークンの取得</target>
        </trans-unit>
        <trans-unit id="e04b42ab7f6e52405f0521b9742bf7a1cd0f86c4" translate="yes" xml:space="preserve">
          <source>Acquiring the token if &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt;&lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_HTTPONLY&quot;&gt;&lt;code&gt;CSRF_COOKIE_HTTPONLY&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt; &lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;settings#std:setting-CSRF_COOKIE_HTTPONLY&quot;&gt; &lt;code&gt;CSRF_COOKIE_HTTPONLY&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; の場合のトークンの取得</target>
        </trans-unit>
        <trans-unit id="efc107784283b34b7f7958205ac5438711b20983" translate="yes" xml:space="preserve">
          <source>Actions as &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; methods</source>
          <target state="translated">&lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt;メソッドとしてのアクション</target>
        </trans-unit>
        <trans-unit id="eb816f654713bed5c74865320bee81f41e3ccd80" translate="yes" xml:space="preserve">
          <source>Actions may limit their availability to users with specific permissions by setting an &lt;code&gt;allowed_permissions&lt;/code&gt; attribute on the action function:</source>
          <target state="translated">アクションは、アクション関数に &lt;code&gt;allowed_permissions&lt;/code&gt; 属性を設定することにより、特定の権限を持つユーザーのみが利用できるように制限します。</target>
        </trans-unit>
        <trans-unit id="f9e1795879dfbc37215933b8cc56a60f6f0fbf82" translate="yes" xml:space="preserve">
          <source>Actions that provide intermediate pages</source>
          <target state="translated">中間ページを提供するアクション</target>
        </trans-unit>
        <trans-unit id="9951a92b331c9d8caf130eb6889f831dc049a60e" translate="yes" xml:space="preserve">
          <source>Activate this view by adding the following line to your URLconf:</source>
          <target state="translated">このビューを有効にするには、以下の行を URLconf に追加します。</target>
        </trans-unit>
        <trans-unit id="0aa4c06f0fcad75c97ecc22ca28a7b36d66d0f5d" translate="yes" xml:space="preserve">
          <source>Activates some additional checks that are only relevant in a deployment setting.</source>
          <target state="translated">配置設定でのみ関連するいくつかの追加チェックを有効にします。</target>
        </trans-unit>
        <trans-unit id="4b4f7663e482a79242a94ee26cd46a50169934e7" translate="yes" xml:space="preserve">
          <source>Activating middleware</source>
          <target state="translated">ミドルウェアのアクティベーション</target>
        </trans-unit>
        <trans-unit id="c7f5b8c15f3e67199af71c91865179df3a82c15f" translate="yes" xml:space="preserve">
          <source>Activating models</source>
          <target state="translated">モデルの活性化</target>
        </trans-unit>
        <trans-unit id="6425bc77fc2311d432f3c6dadc948ecec41755af" translate="yes" xml:space="preserve">
          <source>Acts just like &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; but uses a 400 status code.</source>
          <target state="translated">&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;と同様に機能しますが、400ステータスコードを使用します。</target>
        </trans-unit>
        <trans-unit id="1ad023f335ce1f4a613b48dd7e19ffe903630c0d" translate="yes" xml:space="preserve">
          <source>Acts just like &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; but uses a 403 status code.</source>
          <target state="translated">&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;と同様に機能しますが、403ステータスコードを使用します。</target>
        </trans-unit>
        <trans-unit id="19f379d64f80d0caaf87d4defa31809099a865ce" translate="yes" xml:space="preserve">
          <source>Acts just like &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; but uses a 404 status code.</source>
          <target state="translated">&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;と同様に機能しますが、404ステータスコードを使用します。</target>
        </trans-unit>
        <trans-unit id="387a1008617d77a04b9deccff0a2d5bfaa3553a1" translate="yes" xml:space="preserve">
          <source>Acts just like &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; but uses a 410 status code.</source>
          <target state="translated">&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;と同様に機能しますが、410ステータスコードを使用します。</target>
        </trans-unit>
        <trans-unit id="35155d5f679b570e59ff0ecc8dbdfe14fd4aaea6" translate="yes" xml:space="preserve">
          <source>Acts just like &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; but uses a 500 status code.</source>
          <target state="translated">&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;と同様に機能しますが、500ステータスコードを使用します。</target>
        </trans-unit>
        <trans-unit id="251ce9dca3225b5cb410dc91fa95b1a8c4234fa1" translate="yes" xml:space="preserve">
          <source>Acts like &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.items&quot;&gt;&lt;code&gt;dict.items()&lt;/code&gt;&lt;/a&gt; for HTTP headers on the response.</source>
          <target state="translated">Acts like &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict.items&quot;&gt; &lt;code&gt;dict.items()&lt;/code&gt; &lt;/a&gt; for HTTP headers on the response.</target>
        </trans-unit>
        <trans-unit id="61cc55aa0453184734c3fa0b621eda6fa874bd83" translate="yes" xml:space="preserve">
          <source>Add</source>
          <target state="translated">Add</target>
        </trans-unit>
        <trans-unit id="1781f1983893889bfb4e2f805c1c4ac45e575a3d" translate="yes" xml:space="preserve">
          <source>Add &lt;a href=&quot;#module-django.contrib.admindocs&quot;&gt;&lt;code&gt;django.contrib.admindocs&lt;/code&gt;&lt;/a&gt; to your &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#module-django.contrib.admindocs&quot;&gt; &lt;code&gt;django.contrib.admindocs&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="aee32ce5a37fb08ca19c3c059f786253013a8558" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;'django.contrib.admin'&lt;/code&gt; and its dependencies - &lt;a href=&quot;../../../topics/auth/index#module-django.contrib.auth&quot;&gt;&lt;code&gt;django.contrib.auth&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../contenttypes#module-django.contrib.contenttypes&quot;&gt;&lt;code&gt;django.contrib.contenttypes&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../messages#module-django.contrib.messages&quot;&gt;&lt;code&gt;django.contrib.messages&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../../topics/http/sessions#module-django.contrib.sessions&quot;&gt;&lt;code&gt;django.contrib.sessions&lt;/code&gt;&lt;/a&gt; - to your &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">&lt;code&gt;'django.contrib.admin'&lt;/code&gt; とその依存関係&lt;a href=&quot;../../../topics/auth/index#module-django.contrib.auth&quot;&gt; &lt;code&gt;django.contrib.auth&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../contenttypes#module-django.contrib.contenttypes&quot;&gt; &lt;code&gt;django.contrib.contenttypes&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../messages#module-django.contrib.messages&quot;&gt; &lt;code&gt;django.contrib.messages&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../../../topics/http/sessions#module-django.contrib.sessions&quot;&gt; &lt;code&gt;django.contrib.sessions&lt;/code&gt; -&lt;/a&gt;を&lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;設定に追加します。</target>
        </trans-unit>
        <trans-unit id="8e18e6aa0b565d8aa03bcbedee7dbaa75a0dca49" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;'django.contrib.flatpages'&lt;/code&gt; to your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">&lt;code&gt;'django.contrib.flatpages'&lt;/code&gt; を&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;設定に追加します。</target>
        </trans-unit>
        <trans-unit id="08f59dc4b59961edb6f73a3a7b17606a7b566d9e" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'&lt;/code&gt; to your &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;設定に &lt;code&gt;'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="0397db5067511c5655f72ed2eeb2c56c8e0f042a" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;'django.contrib.postgres'&lt;/code&gt; in your &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;に &lt;code&gt;'django.contrib.postgres'&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="174d52a78c97ad32e9199eded7fb3ff59db50471" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;'django.contrib.redirects'&lt;/code&gt; to your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">&lt;code&gt;'django.contrib.redirects'&lt;/code&gt; を&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;設定に追加します。</target>
        </trans-unit>
        <trans-unit id="143d4d686f2f6b2ecc4271019cc19e1a5e24cb8f" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;'django.contrib.redirects.middleware.RedirectFallbackMiddleware'&lt;/code&gt; to your &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;設定に &lt;code&gt;'django.contrib.redirects.middleware.RedirectFallbackMiddleware'&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="45606432fd93c03462735cd98f148a73fdb9d96b" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;'django.contrib.sitemaps'&lt;/code&gt; to your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">&lt;code&gt;'django.contrib.sitemaps'&lt;/code&gt; を&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;設定に追加します。</target>
        </trans-unit>
        <trans-unit id="7ad2903b96cc7c2efcfa526b8b0aa8ac2eb3c98b" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;'django.contrib.sites'&lt;/code&gt; to your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">&lt;code&gt;'django.contrib.sites'&lt;/code&gt; を&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;設定に追加します。</target>
        </trans-unit>
        <trans-unit id="2d94ca7b85226ff148b3305333826d511bd6f89c" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;django.contrib.gis&lt;/code&gt; to &lt;a href=&quot;../../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;django.contrib.gis&lt;/code&gt; を&lt;a href=&quot;../../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; に&lt;/a&gt;追加します</target>
        </trans-unit>
        <trans-unit id="9222fafb5ea216f3ae56e452996c046dd3381b66" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;path('admin/doc/', include('django.contrib.admindocs.urls'))&lt;/code&gt; to your &lt;code&gt;urlpatterns&lt;/code&gt;. Make sure it&amp;rsquo;s included &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;'admin/'&lt;/code&gt; entry, so that requests to &lt;code&gt;/admin/doc/&lt;/code&gt; don&amp;rsquo;t get handled by the latter entry.</source>
          <target state="translated">追加 &lt;code&gt;path('admin/doc/', include('django.contrib.admindocs.urls'))&lt;/code&gt; あなたに &lt;code&gt;urlpatterns&lt;/code&gt; 。 &lt;code&gt;/admin/doc/&lt;/code&gt; へのリクエストが後者のエントリで処理されないよう&lt;em&gt;に&lt;/em&gt;、 &lt;code&gt;'admin/'&lt;/code&gt; エントリの&lt;em&gt;前&lt;/em&gt;に含まれていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="542cc9c2b819f97521525dba6aaade88bad47f25" translate="yes" xml:space="preserve">
          <source>Add a Waiter to the Restaurant:</source>
          <target state="translated">レストランにウェイターを追加します。</target>
        </trans-unit>
        <trans-unit id="84da544896ff6b09ffc33abb5a1e8af7c965d705" translate="yes" xml:space="preserve">
          <source>Add a callback that will be invoked after rendering has taken place. This hook can be used to defer certain processing operations (such as caching) until after rendering has occurred.</source>
          <target state="translated">レンダリングが行われた後に呼び出されるコールバックを追加します。このフックを使用すると、レンダリングが行われた後まで特定の処理操作 (キャッシュなど)を延期することができます。</target>
        </trans-unit>
        <trans-unit id="312ff4feee6ea5004410a1e36dd7a51cbd167d9f" translate="yes" xml:space="preserve">
          <source>Add a classmethod on the model class:</source>
          <target state="translated">モデルクラスにクラスメソッドを追加します。</target>
        </trans-unit>
        <trans-unit id="c56cd0b17a6484404450cbece72765986670d747" translate="yes" xml:space="preserve">
          <source>Add a method on a custom manager (usually preferred):</source>
          <target state="translated">カスタムマネージャにメソッドを追加します(通常は優先されます)。</target>
        </trans-unit>
        <trans-unit id="7eea3ddaf55306731e16d78033c237bd4b6b9a17" translate="yes" xml:space="preserve">
          <source>Add an entry in your URLconf. For example:</source>
          <target state="translated">URLconf にエントリを追加します。例えば</target>
        </trans-unit>
        <trans-unit id="7c5c60eeeda06a7cbea23a2031ee90e364746f1e" translate="yes" xml:space="preserve">
          <source>Add an item to the feed with the given parameters.</source>
          <target state="translated">与えられたパラメータでフィードにアイテムを追加します。</target>
        </trans-unit>
        <trans-unit id="9c967c762729f4dcb287ed7d1527256f1992f670" translate="yes" xml:space="preserve">
          <source>Add elements in the root (i.e. feed/channel) element. Called from &lt;code&gt;write()&lt;/code&gt;.</source>
          <target state="translated">ルート（フィード/チャネル）要素に要素を追加します。 &lt;code&gt;write()&lt;/code&gt; から呼び出されます。</target>
        </trans-unit>
        <trans-unit id="064def1c016a4c0f855806eea4b737660d8b6c5e" translate="yes" xml:space="preserve">
          <source>Add elements on each item (i.e. item/entry) element.</source>
          <target state="translated">各項目(つまり項目/エントリ)要素に要素を追加します。</target>
        </trans-unit>
        <trans-unit id="d332082a7d97d7c4d3b54712a6248ddea608f173" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.db.models.ImageField&quot;&gt;&lt;code&gt;ImageField&lt;/code&gt;&lt;/a&gt; to your model, defining the &lt;a href=&quot;#django.db.models.FileField.upload_to&quot;&gt;&lt;code&gt;upload_to&lt;/code&gt;&lt;/a&gt; option to specify a subdirectory of &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; to use for uploaded files.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.FileField&quot;&gt; &lt;code&gt;FileField&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#django.db.models.ImageField&quot;&gt; &lt;code&gt;ImageField&lt;/code&gt; &lt;/a&gt;をモデルに追加し、&lt;a href=&quot;#django.db.models.FileField.upload_to&quot;&gt; &lt;code&gt;upload_to&lt;/code&gt; &lt;/a&gt;オプションを定義して、アップロードされたファイルに使用する&lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; の&lt;/a&gt;サブディレクトリを指定します。</target>
        </trans-unit>
        <trans-unit id="7ce97b976111d12dea30ef369832a81b6f8c5c88" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;system_check_deprecated_details&lt;/code&gt; attribute to your model field similar to the following:</source>
          <target state="translated">次のように、 &lt;code&gt;system_check_deprecated_details&lt;/code&gt; 属性をモデルフィールドに追加します。</target>
        </trans-unit>
        <trans-unit id="c775d2405227f64cfab31b8ebb0bd2e958a68989" translate="yes" xml:space="preserve">
          <source>Add the current instance (&lt;code&gt;self.object&lt;/code&gt;) to the standard &lt;a href=&quot;#django.views.generic.edit.FormMixin.get_form_kwargs&quot;&gt;&lt;code&gt;get_form_kwargs()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在のインスタンス（ &lt;code&gt;self.object&lt;/code&gt; ）を標準の&lt;a href=&quot;#django.views.generic.edit.FormMixin.get_form_kwargs&quot;&gt; &lt;code&gt;get_form_kwargs()&lt;/code&gt; に&lt;/a&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="23d9164c11ffee165ad5824e194a73e3c5b602a6" translate="yes" xml:space="preserve">
          <source>Add the default value to your field and run the &lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; command. This should generate a migration with an &lt;code&gt;AlterField&lt;/code&gt; operation.</source>
          <target state="translated">フィールドにデフォルト値を追加して、&lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt;コマンドを実行します。これにより、 &lt;code&gt;AlterField&lt;/code&gt; 操作で移行が生成されます。</target>
        </trans-unit>
        <trans-unit id="b6681e3e9d5f8f7e8e7120280f1f2a7979086c58" translate="yes" xml:space="preserve">
          <source>Add the field on your model with &lt;code&gt;default=uuid.uuid4&lt;/code&gt; and &lt;code&gt;unique=True&lt;/code&gt; arguments (choose an appropriate default for the type of the field you&amp;rsquo;re adding).</source>
          <target state="translated">&lt;code&gt;default=uuid.uuid4&lt;/code&gt; および &lt;code&gt;unique=True&lt;/code&gt; 引数を使用してモデルにフィールドを追加します（追加するフィールドのタイプに適切なデフォルトを選択します）。</target>
        </trans-unit>
        <trans-unit id="02e1da9ced0fc993734740c21f17ae2a87c975ef" translate="yes" xml:space="preserve">
          <source>Add the following middleware to &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; に&lt;/a&gt;次のミドルウェアを追加します。</target>
        </trans-unit>
        <trans-unit id="81e22044472d5af6216bb40b88cc70aa51aa6e2e" translate="yes" xml:space="preserve">
          <source>Add the following to &lt;code&gt;polls/tests.py&lt;/code&gt;:</source>
          <target state="translated">以下を &lt;code&gt;polls/tests.py&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="5c39e16b32deb2f096fa3a5cb2d52f59ee8c1559" translate="yes" xml:space="preserve">
          <source>Add the nullable field without the default value and run the &lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; command. This should generate a migration with an &lt;code&gt;AddField&lt;/code&gt; operation.</source>
          <target state="translated">デフォルト値なしでNULL可能フィールドを追加し、&lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt;コマンドを実行します。これにより、 &lt;code&gt;AddField&lt;/code&gt; 操作で移行が生成されます。</target>
        </trans-unit>
        <trans-unit id="897846243edef3b03fde13f648c9bf56469bd194" translate="yes" xml:space="preserve">
          <source>Add the same article to a different article set - check that it moves:</source>
          <target state="translated">同じ記事を別の記事セットに追加する-動くことを確認する</target>
        </trans-unit>
        <trans-unit id="da7de644f515ca77678230d2a489c2a0f1a496f0" translate="yes" xml:space="preserve">
          <source>Add two more test methods to the same class, to test the behavior of the method more comprehensively:</source>
          <target state="translated">同じクラスにさらに2つのテストメソッドを追加して、メソッドの動作をより包括的にテストします。</target>
        </trans-unit>
        <trans-unit id="b98dc98fe9e447d835aef4277affce64c01dd401" translate="yes" xml:space="preserve">
          <source>Add your new hasher as the first entry in &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt;の最初のエントリとして新しいハッシュを追加します。</target>
        </trans-unit>
        <trans-unit id="c4f919a2b3ad49ac11fcd9dcc041e6e2629763b4" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;related_name&lt;/code&gt; to the &lt;code&gt;customers&lt;/code&gt; field as follows would resolve the error: &lt;code&gt;models.ManyToManyField(Place, related_name='provider')&lt;/code&gt;.</source>
          <target state="translated">次のように &lt;code&gt;customers&lt;/code&gt; フィールドに &lt;code&gt;related_name&lt;/code&gt; を追加すると、エラーが解決します： &lt;code&gt;models.ManyToManyField(Place, related_name='provider')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd68975af9ff6bf42b31e25093a9ca4bc04db184" translate="yes" xml:space="preserve">
          <source>Adding a &lt;code&gt;deconstruct()&lt;/code&gt; method</source>
          <target state="translated">&lt;code&gt;deconstruct()&lt;/code&gt; メソッドを追加する</target>
        </trans-unit>
        <trans-unit id="7e2866da8913b39ced8f2ec66b3247474f2ebdaf" translate="yes" xml:space="preserve">
          <source>Adding a background-image</source>
          <target state="translated">背景画像を追加する</target>
        </trans-unit>
        <trans-unit id="0d892178c15bd974d128fa41f9821824862b1564" translate="yes" xml:space="preserve">
          <source>Adding a foreign key from one of your own models to &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; allows your model to effectively tie itself to another model class, as in the example of the &lt;a href=&quot;auth#django.contrib.auth.models.Permission&quot;&gt;&lt;code&gt;Permission&lt;/code&gt;&lt;/a&gt; model above. But it&amp;rsquo;s possible to go one step further and use &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; to enable truly generic (sometimes called &amp;ldquo;polymorphic&amp;rdquo;) relationships between models.</source>
          <target state="translated">独自のモデルの1つから&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; に&lt;/a&gt;外部キーを追加すると、上記の&lt;a href=&quot;auth#django.contrib.auth.models.Permission&quot;&gt; &lt;code&gt;Permission&lt;/code&gt; &lt;/a&gt;モデルの例のように、モデルを別のモデルクラスに効果的に結び付けることができます。しかし、さらに一歩進んで&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt;を使用して、モデル間の真に一般的な（「ポリモーフィック」と呼ばれることもある）リレーションシップを有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="f32d42966426915a684928a50a3f91eefcb2668c" translate="yes" xml:space="preserve">
          <source>Adding a message</source>
          <target state="translated">メッセージの追加</target>
        </trans-unit>
        <trans-unit id="9647b442f7b65a49aa241643ed53e216f831e273" translate="yes" xml:space="preserve">
          <source>Adding a password reset feature</source>
          <target state="translated">パスワードリセット機能の追加</target>
        </trans-unit>
        <trans-unit id="737275ab3224f8851da2d9bbb1a5a7c02b448f55" translate="yes" xml:space="preserve">
          <source>Adding a second time is OK, it will not duplicate the relation:</source>
          <target state="translated">2回目の追加はOKですが、リレーションが重複することはありません。</target>
        </trans-unit>
        <trans-unit id="b717fb8e46bbd80f84d44a868651e9774677833a" translate="yes" xml:space="preserve">
          <source>Adding actions to the &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt;へのアクションの追加</target>
        </trans-unit>
        <trans-unit id="7fb6dd5ea495cc9b3ab9a76c1b753884aba14e9b" translate="yes" xml:space="preserve">
          <source>Adding additional fields to a formset</source>
          <target state="translated">フォームセットにフィールドを追加する</target>
        </trans-unit>
        <trans-unit id="f9e4c9a8b7d7bdf21d02d1603728d6f080e21fd5" translate="yes" xml:space="preserve">
          <source>Adding an automatic primary key field to the model if you don&amp;rsquo;t declare it. To avoid confusion for later code readers, it&amp;rsquo;s recommended to specify all the columns from the database table you are modeling when using unmanaged models.</source>
          <target state="translated">宣言していない場合は、自動主キーフィールドをモデルに追加します。後のコードリーダーの混乱を避けるため、アンマネージモデルを使用する場合は、モデル化するデータベーステーブルからすべての列を指定することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a677f2d3d7d36704d5ef8fe9f52670fb7004e7da" translate="yes" xml:space="preserve">
          <source>Adding an index to your database may help to improve ordering performance.</source>
          <target state="translated">データベースにインデックスを追加することで、注文のパフォーマンスを向上させることができます。</target>
        </trans-unit>
        <trans-unit id="4b94c475955db5b6e3e02bf21b87eea5874a2a38" translate="yes" xml:space="preserve">
          <source>Adding an object of the wrong type raises &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">間違ったタイプのオブジェクトを追加すると、&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="2480784cdec9378029855e4634deeb18753830ae" translate="yes" xml:space="preserve">
          <source>Adding an object of the wrong type raises TypeError:</source>
          <target state="translated">間違った型のオブジェクトを追加すると TypeError が発生します。</target>
        </trans-unit>
        <trans-unit id="75ac589a7c74b921108f817dbc58cc312b033a74" translate="yes" xml:space="preserve">
          <source>Adding annotations</source>
          <target state="translated">注釈の追加</target>
        </trans-unit>
        <trans-unit id="6f3fb504cadea63bb79c2a9f67921972335a2ab4" translate="yes" xml:space="preserve">
          <source>Adding custom validation to the admin</source>
          <target state="translated">管理者にカスタムバリデーションを追加する</target>
        </trans-unit>
        <trans-unit id="21c3a8a053ec2e21cb223570d2501da48845f4b6" translate="yes" xml:space="preserve">
          <source>Adding extra &lt;code&gt;Manager&lt;/code&gt; methods is the preferred way to add &amp;ldquo;table-level&amp;rdquo; functionality to your models. (For &amp;ldquo;row-level&amp;rdquo; functionality &amp;ndash; i.e., functions that act on a single instance of a model object &amp;ndash; use &lt;a href=&quot;models#model-methods&quot;&gt;Model methods&lt;/a&gt;, not custom &lt;code&gt;Manager&lt;/code&gt; methods.)</source>
          <target state="translated">追加の &lt;code&gt;Manager&lt;/code&gt; メソッドを追加することは、モデルに「テーブルレベル」の機能を追加するための好ましい方法です。（「行レベル」の機能（つまり、モデルオブジェクトの単一のインスタンスに作用する機能）の場合、カスタムの &lt;code&gt;Manager&lt;/code&gt; メソッドではなく、&lt;a href=&quot;models#model-methods&quot;&gt;Modelメソッドを&lt;/a&gt;使用します。）</target>
        </trans-unit>
        <trans-unit id="49a457ad4a4fb40029dfeb98bf770d419b6ed80e" translate="yes" xml:space="preserve">
          <source>Adding extra context</source>
          <target state="translated">追加のコンテキストの追加</target>
        </trans-unit>
        <trans-unit id="7d6b19de730f99e44e54a6e2f60d6fba5e949606" translate="yes" xml:space="preserve">
          <source>Adding extra manager methods</source>
          <target state="translated">マネージャーメソッドの追加</target>
        </trans-unit>
        <trans-unit id="05c9b92bf3c6992f2275d32eb1bb9a5f874cbe2a" translate="yes" xml:space="preserve">
          <source>Adding extra message tags</source>
          <target state="translated">メッセージタグの追加</target>
        </trans-unit>
        <trans-unit id="065d8edc35a41c3e1c7f7106fb0ce5eebe146add" translate="yes" xml:space="preserve">
          <source>Adding messages in class-based views</source>
          <target state="translated">クラスベースのビューにメッセージを追加する</target>
        </trans-unit>
        <trans-unit id="dde5351483f81b0be2720e29f44edb20496f0b3c" translate="yes" xml:space="preserve">
          <source>Adding migrations to apps</source>
          <target state="translated">アプリへの移行を追加する</target>
        </trans-unit>
        <trans-unit id="cd9492e64e9db0d1444a09b5329d3bce5e245f07" translate="yes" xml:space="preserve">
          <source>Adding related objects</source>
          <target state="translated">関連オブジェクトの追加</target>
        </trans-unit>
        <trans-unit id="80f31e3c892ed2c3d9284ce59d6e189757bbb332" translate="yes" xml:space="preserve">
          <source>Adding support in third-party database backends</source>
          <target state="translated">サードパーティのデータベースバックエンドでのサポートの追加</target>
        </trans-unit>
        <trans-unit id="8f942de47430dca18f13c33d368bb70c332460c2" translate="yes" xml:space="preserve">
          <source>Adding the built-in widgets templates directory in &lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; of one of your template engines. To generate that path:</source>
          <target state="translated">テンプレートエンジンの1つの&lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; に組み込み&lt;/a&gt;ウィジェットテンプレートディレクトリを追加します。そのパスを生成するには：</target>
        </trans-unit>
        <trans-unit id="199984b1c4df9b28def33449c0f29df2d3cea020" translate="yes" xml:space="preserve">
          <source>Adding the language prefix to the root of the URL patterns to make it possible for &lt;a href=&quot;../../ref/middleware#django.middleware.locale.LocaleMiddleware&quot;&gt;&lt;code&gt;LocaleMiddleware&lt;/code&gt;&lt;/a&gt; to detect the language to activate from the requested URL.</source>
          <target state="translated">言語プレフィックスをURLパターンのルートに追加して、&lt;a href=&quot;../../ref/middleware#django.middleware.locale.LocaleMiddleware&quot;&gt; &lt;code&gt;LocaleMiddleware&lt;/code&gt; &lt;/a&gt;が要求されたURLからアクティブにする言語を検出できるようにします。</target>
        </trans-unit>
        <trans-unit id="8bbdf001f85301d5c4caf9cad678d83599003252" translate="yes" xml:space="preserve">
          <source>Adding translations to JavaScript poses some problems:</source>
          <target state="translated">JavaScriptに翻訳を追加すると、いくつかの問題が発生します。</target>
        </trans-unit>
        <trans-unit id="9b2bc4970a121d42083d328ea38dfa708de484df" translate="yes" xml:space="preserve">
          <source>Adding via the &amp;lsquo;other&amp;rsquo; end of an m2m:</source>
          <target state="translated">m2mの「その他」の端を介して追加：</target>
        </trans-unit>
        <trans-unit id="58981ac9ab470f289e179674aec179db087b8177" translate="yes" xml:space="preserve">
          <source>Adding via the other end using keywords:</source>
          <target state="translated">キーワードを使ってもう片方の端を経由して追加します。</target>
        </trans-unit>
        <trans-unit id="3726f6959d53012c980dc6e6514bf9f49e25f7f8" translate="yes" xml:space="preserve">
          <source>Adding views to admin sites</source>
          <target state="translated">管理サイトにビューを追加する</target>
        </trans-unit>
        <trans-unit id="eeb2928b085f70ed3eefe2ebfb553f92ebbeb1d4" translate="yes" xml:space="preserve">
          <source>Additional Resources:</source>
          <target state="translated">追加リソース。</target>
        </trans-unit>
        <trans-unit id="20e967d50fd03923d186da10f984c24954c279bc" translate="yes" xml:space="preserve">
          <source>Additional form template furniture</source>
          <target state="translated">追加フォームテンプレート家具</target>
        </trans-unit>
        <trans-unit id="0639dbfaee6711fafef42bd5e3a8bb2d5b4d6b0d" translate="yes" xml:space="preserve">
          <source>Additional methods on files attached to objects</source>
          <target state="translated">オブジェクトにアタッチされたファイルに対する追加メソッド</target>
        </trans-unit>
        <trans-unit id="a3bd37141e3db51c93a974f72b5ed99fd4be069a" translate="yes" xml:space="preserve">
          <source>Additional methods to handle related objects</source>
          <target state="translated">関連オブジェクトを扱うための追加メソッド</target>
        </trans-unit>
        <trans-unit id="af004711cc4f84f9b7f7e5f37159b9933b2615c7" translate="yes" xml:space="preserve">
          <source>Additional security topics</source>
          <target state="translated">その他のセキュリティに関するトピック</target>
        </trans-unit>
        <trans-unit id="f51f11764f8ab3f8650e43b07eec550d435e9d07" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;OneToOneField&lt;/code&gt; accepts all of the extra arguments accepted by &lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, plus one extra argument:</source>
          <target state="translated">さらに、 &lt;code&gt;OneToOneField&lt;/code&gt; は、&lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;によって受け入れられるすべての追加の引数と、1つの追加の引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="f18c9828e81de90a123e4ab9f3d1248d2eaa355f" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;UpdateCacheMiddleware&lt;/code&gt; automatically sets a few headers in each &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; which affect &lt;a href=&quot;#downstream-caches&quot;&gt;downstream caches&lt;/a&gt;:</source>
          <target state="translated">Additionally, &lt;code&gt;UpdateCacheMiddleware&lt;/code&gt; automatically sets a few headers in each &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; which affect &lt;a href=&quot;#downstream-caches&quot;&gt;downstream caches&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="3bb4297691e2586f5e087e3bc7b4b49164fe1279" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;UpdateCacheMiddleware&lt;/code&gt; automatically sets a few headers in each &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">さらに、 &lt;code&gt;UpdateCacheMiddleware&lt;/code&gt; は、各&lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; に&lt;/a&gt;いくつかのヘッダーを自動的に設定します。</target>
        </trans-unit>
        <trans-unit id="d9c3eb7a943d408e9ef3eff367c07a9bdf0b504f" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;UploadedFile.content_type&lt;/code&gt; will be updated with the image&amp;rsquo;s content type if Pillow can determine it, otherwise it will be set to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">さらに、Pillowが判別できる場合、 &lt;code&gt;UploadedFile.content_type&lt;/code&gt; は画像のコンテンツタイプで更新されます。それ以外の場合は、 &lt;code&gt;None&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="cf5f3789a249b86a962e868dcf5a537068b47abe" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;cache_page&lt;/code&gt; automatically sets &lt;code&gt;Cache-Control&lt;/code&gt; and &lt;code&gt;Expires&lt;/code&gt; headers in the response which affect &lt;a href=&quot;#downstream-caches&quot;&gt;downstream caches&lt;/a&gt;.</source>
          <target state="translated">Additionally, &lt;code&gt;cache_page&lt;/code&gt; automatically sets &lt;code&gt;Cache-Control&lt;/code&gt; and &lt;code&gt;Expires&lt;/code&gt; headers in the response which affect &lt;a href=&quot;#downstream-caches&quot;&gt;downstream caches&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="59f091ea1fdfee35fafef8f5beec4d2ea7795fb3" translate="yes" xml:space="preserve">
          <source>Additionally, Django requires you to explicitly enable support for the &lt;code&gt;X-Forwarded-Host&lt;/code&gt; header (via the &lt;a href=&quot;../ref/settings#std:setting-USE_X_FORWARDED_HOST&quot;&gt;&lt;code&gt;USE_X_FORWARDED_HOST&lt;/code&gt;&lt;/a&gt; setting) if your configuration requires it.</source>
          <target state="translated">さらに、Djangoでは、構成で必要な場合は（&lt;a href=&quot;../ref/settings#std:setting-USE_X_FORWARDED_HOST&quot;&gt; &lt;code&gt;USE_X_FORWARDED_HOST&lt;/code&gt; &lt;/a&gt;設定を介して） &lt;code&gt;X-Forwarded-Host&lt;/code&gt; ヘッダーのサポートを明示的に有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="8c1950c86ec7cad350a1882f9069c6111aa2bc35" translate="yes" xml:space="preserve">
          <source>Additionally, if a &lt;code&gt;some_queryset&lt;/code&gt; has not yet been evaluated, but you know that it will be at some point, then using &lt;code&gt;some_queryset.exists()&lt;/code&gt; will do more overall work (one query for the existence check plus an extra one to later retrieve the results) than using &lt;code&gt;bool(some_queryset)&lt;/code&gt;, which retrieves the results and then checks if any were returned.</source>
          <target state="translated">さらに、 &lt;code&gt;some_queryset&lt;/code&gt; がまだ評価されていないが、ある時点でそれがわかっている場合、 &lt;code&gt;some_queryset.exists()&lt;/code&gt; を使用すると、より全体的な作業が行われます（存在チェック用の1つのクエリと、後で結果を取得するための追加のクエリ） ） &lt;code&gt;bool(some_queryset)&lt;/code&gt; を使用するよりも、結果を取得してから、結果が返されたかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="5cd413f4862375205f2c9c8f5fb743ea9ac00da3" translate="yes" xml:space="preserve">
          <source>Additionally, if there are complex rules around pluralization, the catalog view will render a conditional expression. This will evaluate to either a &lt;code&gt;true&lt;/code&gt; (should pluralize) or &lt;code&gt;false&lt;/code&gt; (should &lt;strong&gt;not&lt;/strong&gt; pluralize) value.</source>
          <target state="translated">さらに、複数化に関する複雑なルールがある場合、カタログビューは条件式をレンダリングします。これは、 &lt;code&gt;true&lt;/code&gt; （複数形にする必要が&lt;strong&gt;あり&lt;/strong&gt; &lt;code&gt;false&lt;/code&gt; ）またはfalse（複数形にすることは&lt;strong&gt;できません&lt;/strong&gt;）の値に評価されます。</target>
        </trans-unit>
        <trans-unit id="155b9da3a7f3110c995a2609d26841c5c24dd1fd" translate="yes" xml:space="preserve">
          <source>Additionally, if you set the &lt;a href=&quot;settings#std:setting-SECURE_HSTS_INCLUDE_SUBDOMAINS&quot;&gt;&lt;code&gt;SECURE_HSTS_INCLUDE_SUBDOMAINS&lt;/code&gt;&lt;/a&gt; setting to &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;SecurityMiddleware&lt;/code&gt; will add the &lt;code&gt;includeSubDomains&lt;/code&gt; directive to the &lt;code&gt;Strict-Transport-Security&lt;/code&gt; header. This is recommended (assuming all subdomains are served exclusively using HTTPS), otherwise your site may still be vulnerable via an insecure connection to a subdomain.</source>
          <target state="translated">さらに、&lt;a href=&quot;settings#std:setting-SECURE_HSTS_INCLUDE_SUBDOMAINS&quot;&gt; &lt;code&gt;SECURE_HSTS_INCLUDE_SUBDOMAINS&lt;/code&gt; &lt;/a&gt;設定を &lt;code&gt;True&lt;/code&gt; に設定すると、 &lt;code&gt;SecurityMiddleware&lt;/code&gt; は &lt;code&gt;includeSubDomains&lt;/code&gt; ディレクティブを &lt;code&gt;Strict-Transport-Security&lt;/code&gt; ヘッダーに追加します。これが推奨されます（すべてのサブドメインがHTTPSのみを使用して提供されると想定）。そうしないと、サイトがサブドメインへの安全でない接続を介して依然として脆弱になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="796ba10f1ad831c76eb8c34a0b7761256ed12335" translate="yes" xml:space="preserve">
          <source>Additionally, it is recommended to install the &lt;a href=&quot;https://github.com/maxmind/libmaxminddb&quot;&gt;libmaxminddb C library&lt;/a&gt;, so that &lt;code&gt;geoip2&lt;/code&gt; can leverage the C library&amp;rsquo;s faster speed.</source>
          <target state="translated">さらに、 &lt;code&gt;geoip2&lt;/code&gt; がCライブラリの高速を活用できるように、&lt;a href=&quot;https://github.com/maxmind/libmaxminddb&quot;&gt;libmaxminddb Cライブラリ&lt;/a&gt;をインストールすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="7b5fcf69c665bf56f6d133b6aa0ec9e54e765756" translate="yes" xml:space="preserve">
          <source>Additionally, the following property is available:</source>
          <target state="translated">さらに、以下のような物件があります。</target>
        </trans-unit>
        <trans-unit id="58aadc8b0bc2556a2416983dd97e11e2dca317e2" translate="yes" xml:space="preserve">
          <source>Additionally, the variable may be an iterable of template names, in which case the first that can be loaded will be used, as per &lt;a href=&quot;../../topics/templates#django.template.loader.select_template&quot;&gt;&lt;code&gt;select_template()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Additionally, the variable may be an iterable of template names, in which case the first that can be loaded will be used, as per &lt;a href=&quot;../../topics/templates#django.template.loader.select_template&quot;&gt; &lt;code&gt;select_template()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="065186d003b68ca80e33b415f720adf82fb1f37e" translate="yes" xml:space="preserve">
          <source>Adds (or updates) the &lt;code&gt;Vary&lt;/code&gt; header in the given &lt;code&gt;HttpResponse&lt;/code&gt; object. &lt;code&gt;newheaders&lt;/code&gt; is a list of header names that should be in &lt;code&gt;Vary&lt;/code&gt;. If headers contains an asterisk, then &lt;code&gt;Vary&lt;/code&gt; header will consist of a single asterisk &lt;code&gt;'*'&lt;/code&gt;. Otherwise, existing headers in &lt;code&gt;Vary&lt;/code&gt; aren&amp;rsquo;t removed.</source>
          <target state="translated">指定された &lt;code&gt;HttpResponse&lt;/code&gt; オブジェクトに &lt;code&gt;Vary&lt;/code&gt; ヘッダーを追加（または更新）します。 &lt;code&gt;newheaders&lt;/code&gt; は、 &lt;code&gt;Vary&lt;/code&gt; に含める必要があるヘッダー名のリストです。ヘッダーにアスタリスクが含まれている場合、 &lt;code&gt;Vary&lt;/code&gt; ヘッダーは単一のアスタリスク &lt;code&gt;'*'&lt;/code&gt; で構成されます。それ以外の場合、 &lt;code&gt;Vary&lt;/code&gt; の既存のヘッダーは削除されません。</target>
        </trans-unit>
        <trans-unit id="1e90b62d665048ec0284ccfaa223ced853188c83" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;constraint&lt;/code&gt; to &lt;code&gt;model&lt;/code&gt;&amp;rsquo;s table.</source>
          <target state="translated">&lt;code&gt;model&lt;/code&gt; のテーブルに &lt;code&gt;constraint&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="189c0dc50c29d58c3f168feb673c8841534b5c85" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;index&lt;/code&gt; to &lt;code&gt;model&lt;/code&gt;&amp;rsquo;s table.</source>
          <target state="translated">&lt;code&gt;model&lt;/code&gt; のテーブルに &lt;code&gt;index&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="9b8cfac95da60494037975ba4ec543ba3fe273f3" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;object_list&lt;/code&gt; to the context. If &lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.allow_empty&quot;&gt;&lt;code&gt;allow_empty&lt;/code&gt;&lt;/a&gt; is True then display an empty list. If &lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.allow_empty&quot;&gt;&lt;code&gt;allow_empty&lt;/code&gt;&lt;/a&gt; is False then raise a 404 error.</source>
          <target state="translated">コンテキストに &lt;code&gt;object_list&lt;/code&gt; を追加します。&lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.allow_empty&quot;&gt; &lt;code&gt;allow_empty&lt;/code&gt; &lt;/a&gt;がTrueの場合、空のリストを表示します。&lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.allow_empty&quot;&gt; &lt;code&gt;allow_empty&lt;/code&gt; &lt;/a&gt;がFalseの場合、404エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="514fb7f40df63dff563c3c7ad7a9ae3f9e685565" translate="yes" xml:space="preserve">
          <source>Adds a &lt;code&gt;Cache-Control: max-age=0, no-cache, no-store, must-revalidate,
private&lt;/code&gt; header to a response to indicate that a page should never be cached.</source>
          <target state="translated">追加 &lt;code&gt;Cache-Control: max-age=0, no-cache, no-store, must-revalidate, private&lt;/code&gt; ヘッダページをキャッシュしてはならないことを示すために応答します。</target>
        </trans-unit>
        <trans-unit id="ff7383298422a0675008a255cc33c19c23220b7a" translate="yes" xml:space="preserve">
          <source>Adds a column (or sometimes multiple) to the model&amp;rsquo;s table to represent the field. This will also add indexes or a unique constraint if the field has &lt;code&gt;db_index=True&lt;/code&gt; or &lt;code&gt;unique=True&lt;/code&gt;.</source>
          <target state="translated">フィールドを表すためにモデルのテーブルに列（または場合によっては複数）を追加します。これにより、フィールドに &lt;code&gt;db_index=True&lt;/code&gt; または &lt;code&gt;unique=True&lt;/code&gt; がある場合は、インデックスまたは一意の制約も追加されます。</target>
        </trans-unit>
        <trans-unit id="e56f8bda02f55055ccc1af79a5faec7f5d76e619" translate="yes" xml:space="preserve">
          <source>Adds a few conveniences for perfectionists:</source>
          <target state="translated">完璧主義者のためのいくつかの便利な機能を追加しました。</target>
        </trans-unit>
        <trans-unit id="3bc2c30ca18e7b58b0c427c2bd1065d3d8e2da65" translate="yes" xml:space="preserve">
          <source>Adds a field to a model. &lt;code&gt;model_name&lt;/code&gt; is the model&amp;rsquo;s name, &lt;code&gt;name&lt;/code&gt; is the field&amp;rsquo;s name, and &lt;code&gt;field&lt;/code&gt; is an unbound Field instance (the thing you would put in the field declaration in &lt;code&gt;models.py&lt;/code&gt; - for example, &lt;code&gt;models.IntegerField(null=True)&lt;/code&gt;.</source>
          <target state="translated">モデルにフィールドを追加します。 &lt;code&gt;model_name&lt;/code&gt; はモデルの名前、 &lt;code&gt;name&lt;/code&gt; はフィールドの名前、 &lt;code&gt;field&lt;/code&gt; はバインドされていないFieldインスタンスです（ &lt;code&gt;models.py&lt;/code&gt; のフィールド宣言に配置するもの -たとえば、 &lt;code&gt;models.IntegerField(null=True)&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="bd25b00fce5148ea823ee8b2f9f6663ac9a6299b" translate="yes" xml:space="preserve">
          <source>Adds a geometry to this geometry collection. Not applicable to other geometry types.</source>
          <target state="translated">このジオメトリ コレクションにジオメトリを追加します。他のジオメトリタイプには適用されません。</target>
        </trans-unit>
        <trans-unit id="40b2d7c6759c3aa4f4958c39ef024b8c9802838b" translate="yes" xml:space="preserve">
          <source>Adds a success message attribute to &lt;a href=&quot;../class-based-views/generic-editing#django.views.generic.edit.FormView&quot;&gt;&lt;code&gt;FormView&lt;/code&gt;&lt;/a&gt; based classes</source>
          <target state="translated">&lt;a href=&quot;../class-based-views/generic-editing#django.views.generic.edit.FormView&quot;&gt; &lt;code&gt;FormView&lt;/code&gt; &lt;/a&gt;ベースのクラスに成功メッセージ属性を追加します</target>
        </trans-unit>
        <trans-unit id="9443cc483fc4f79eee63f7b91ff9b63be753eaf3" translate="yes" xml:space="preserve">
          <source>Adds an item to the feed. All args are expected to be strings except &lt;code&gt;pubdate&lt;/code&gt; and &lt;code&gt;updateddate&lt;/code&gt;, which are &lt;code&gt;datetime.datetime&lt;/code&gt; objects, and &lt;code&gt;enclosures&lt;/code&gt;, which is a list of &lt;code&gt;Enclosure&lt;/code&gt; instances.</source>
          <target state="translated">フィードにアイテムを追加します。すべての引数を除いて、文字列であることが予想される &lt;code&gt;pubdate&lt;/code&gt; と &lt;code&gt;updateddate&lt;/code&gt; あり、 &lt;code&gt;datetime.datetime&lt;/code&gt; のオブジェクト、および &lt;code&gt;enclosures&lt;/code&gt; のリストで、 &lt;code&gt;Enclosure&lt;/code&gt; インスタンス。</target>
        </trans-unit>
        <trans-unit id="3215cc38c2b33036efd88026a859c0cf5388f402" translate="yes" xml:space="preserve">
          <source>Adds protection against Cross Site Request Forgeries by adding hidden form fields to POST forms and checking requests for the correct value. See the &lt;a href=&quot;csrf&quot;&gt;Cross Site Request Forgery protection documentation&lt;/a&gt;.</source>
          <target state="translated">非表示のフォームフィールドをPOSTフォームに追加し、正しい値のリクエストをチェックすることにより、クロスサイトリクエストフォージェリに対する保護を追加します。&lt;a href=&quot;csrf&quot;&gt;Cross Site Request Forgery保護のドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="248f884a6debb66d33bb542947c6b5a70ec29527" translate="yes" xml:space="preserve">
          <source>Adds slashes before quotes. Useful for escaping strings in CSV, for example.</source>
          <target state="translated">引用符の前にスラッシュを追加します。例えばCSVで文字列をエスケープするのに便利です。</target>
        </trans-unit>
        <trans-unit id="9fe6973ff05e99c675a4730464539f2a5309cce2" translate="yes" xml:space="preserve">
          <source>Adds some useful headers to the given &lt;code&gt;HttpResponse&lt;/code&gt; object:</source>
          <target state="translated">指定された &lt;code&gt;HttpResponse&lt;/code&gt; オブジェクトにいくつかの有用なヘッダーを追加します。</target>
        </trans-unit>
        <trans-unit id="a032013929920ba96d6f65e3ffe00d36c0baef9d" translate="yes" xml:space="preserve">
          <source>Adds support for modern browsers to conditionally GET responses based on the &lt;code&gt;ETag&lt;/code&gt; and &lt;code&gt;Last-Modified&lt;/code&gt; headers. It also calculates and sets an ETag if needed.</source>
          <target state="translated">&lt;code&gt;ETag&lt;/code&gt; および &lt;code&gt;Last-Modified&lt;/code&gt; ヘッダーに基づいて条件付きでGET応答に最新のブラウザーのサポートを追加します。また、必要に応じてETagを計算して設定します。</target>
        </trans-unit>
        <trans-unit id="c356b3798142f51ac749e338cf5674b7a71f9400" translate="yes" xml:space="preserve">
          <source>Adds the &lt;code&gt;site&lt;/code&gt; attribute representing the current site to every incoming &lt;code&gt;HttpRequest&lt;/code&gt; object. See the &lt;a href=&quot;contrib/sites#site-middleware&quot;&gt;sites documentation&lt;/a&gt;.</source>
          <target state="translated">現在のサイトを表す &lt;code&gt;site&lt;/code&gt; 属性をすべての着信 &lt;code&gt;HttpRequest&lt;/code&gt; オブジェクトに追加します。&lt;a href=&quot;contrib/sites#site-middleware&quot;&gt;サイトのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="664b30fbbf82f2c9316ffc7123a36e6ed05f431e" translate="yes" xml:space="preserve">
          <source>Adds the &lt;code&gt;user&lt;/code&gt; attribute, representing the currently-logged-in user, to every incoming &lt;code&gt;HttpRequest&lt;/code&gt; object. See &lt;a href=&quot;../topics/auth/default#auth-web-requests&quot;&gt;Authentication in Web requests&lt;/a&gt;.</source>
          <target state="translated">現在ログインしているユーザーを表す &lt;code&gt;user&lt;/code&gt; 属性を、すべての着信 &lt;code&gt;HttpRequest&lt;/code&gt; オブジェクトに追加します。&lt;a href=&quot;../topics/auth/default#auth-web-requests&quot;&gt;Webリクエストでの認証を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="82b26bb2b7e0b4dedd5abbf9499cb1f58e215b32" translate="yes" xml:space="preserve">
          <source>Adds the argument to the value.</source>
          <target state="translated">引数を値に追加します。</target>
        </trans-unit>
        <trans-unit id="e1db2693361f92fab5512898e218f1eb6734dbaf" translate="yes" xml:space="preserve">
          <source>Adds the given filesystem path to the Python &lt;a href=&quot;https://www.diveinto.org/python3/your-first-python-program.html#importsearchpath&quot;&gt;import search path&lt;/a&gt;. If this isn&amp;rsquo;t provided, &lt;code&gt;django-admin&lt;/code&gt; will use the &lt;a href=&quot;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH&quot; id=&quot;index-8&quot;&gt;&lt;code&gt;PYTHONPATH&lt;/code&gt;&lt;/a&gt; environment variable.</source>
          <target state="translated">Adds the given filesystem path to the Python &lt;a href=&quot;https://www.diveinto.org/python3/your-first-python-program.html#importsearchpath&quot;&gt;import search path&lt;/a&gt;. If this isn&amp;rsquo;t provided, &lt;code&gt;django-admin&lt;/code&gt; will use the &lt;a href=&quot;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH&quot; id=&quot;index-8&quot;&gt; &lt;code&gt;PYTHONPATH&lt;/code&gt; &lt;/a&gt; environment variable.</target>
        </trans-unit>
        <trans-unit id="903c089d1a56e44c804837cfb1c84f16e81440b8" translate="yes" xml:space="preserve">
          <source>Adds the given filesystem path to the Python &lt;a href=&quot;https://www.diveinto.org/python3/your-first-python-program.html#importsearchpath&quot;&gt;import search path&lt;/a&gt;. If this isn&amp;rsquo;t provided, &lt;code&gt;django-admin&lt;/code&gt; will use the &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable.</source>
          <target state="translated">指定されたファイルシステムパスをPython &lt;a href=&quot;https://www.diveinto.org/python3/your-first-python-program.html#importsearchpath&quot;&gt;インポート検索パスに&lt;/a&gt;追加します。これが提供されない場合、 &lt;code&gt;django-admin&lt;/code&gt; は &lt;code&gt;PYTHONPATH&lt;/code&gt; 環境変数を使用します。</target>
        </trans-unit>
        <trans-unit id="be0a5949d228cfa91cfd2972bb3ffb858416c326" translate="yes" xml:space="preserve">
          <source>Adds the specified model objects to the related object set.</source>
          <target state="translated">指定されたモデルオブジェクトを関連オブジェクトセットに追加します。</target>
        </trans-unit>
        <trans-unit id="df614a098659ffdff10d271df37bd396baae86e3" translate="yes" xml:space="preserve">
          <source>Adjust &lt;code&gt;time_cost&lt;/code&gt; and measure the time hashing a password takes. Pick a &lt;code&gt;time_cost&lt;/code&gt; that takes an acceptable time for you. If &lt;code&gt;time_cost&lt;/code&gt; set to 1 is unacceptably slow, lower &lt;code&gt;memory_cost&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;time_cost&lt;/code&gt; を調整し、パスワードのハッシュにかかる時間を測定します。許容できる時間がかかる &lt;code&gt;time_cost&lt;/code&gt; を選択してください。もし &lt;code&gt;time_cost&lt;/code&gt; 1のセットは、下の許容できないほど遅いです &lt;code&gt;memory_cost&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa81c61f91756873608f1f7af2602b2f7fc03a81" translate="yes" xml:space="preserve">
          <source>Admin actions</source>
          <target state="translated">管理者のアクション</target>
        </trans-unit>
        <trans-unit id="f535d8e7c9b9ab3a3dfb3ab83bec8e5535ab79e9" translate="yes" xml:space="preserve">
          <source>Admin checks are all performed as part of the &lt;code&gt;admin&lt;/code&gt; tag.</source>
          <target state="translated">管理チェックはすべて &lt;code&gt;admin&lt;/code&gt; タグの一部として実行されます。</target>
        </trans-unit>
        <trans-unit id="7a9d7b247e2f49f891dbb48cdd1ab3b6f10c4c23" translate="yes" xml:space="preserve">
          <source>Admin documentation generator</source>
          <target state="translated">管理者文書生成器</target>
        </trans-unit>
        <trans-unit id="3aee1adc5c2281168d92436481848549843930c8" translate="yes" xml:space="preserve">
          <source>Admin site</source>
          <target state="translated">管理者サイト</target>
        </trans-unit>
        <trans-unit id="ea4395545ea1af3a57cb72e9912004568a18a70f" translate="yes" xml:space="preserve">
          <source>Administrator privileges are required to execute these commands. To do this, create a &lt;code&gt;bat&lt;/code&gt; script with the commands, right-click it, and select Run as administrator. You need to log out and log back in again for the settings to take effect.</source>
          <target state="translated">これらのコマンドを実行するには、管理者権限が必要です。これを行うには、コマンドを使用して &lt;code&gt;bat&lt;/code&gt; スクリプトを作成し、右クリックして、[管理者として実行]を選択します。設定を有効にするには、ログアウトしてから再度ログインする必要があります。</target>
        </trans-unit>
        <trans-unit id="dc254ff09ad8edb5e90daec2acf4e090e64a2a3c" translate="yes" xml:space="preserve">
          <source>Administrator privileges are required to execute these commands. To do this, run command prompt as administrator and enter the commands above. You need to log out and log back in again for the settings to take effect.</source>
          <target state="translated">これらのコマンドを実行するには、管理者権限が必要です。そのためには、管理者としてコマンドプロンプトを実行し、上記のコマンドを入力してください。設定を有効にするには、ログアウトして再度ログインする必要があります。</target>
        </trans-unit>
        <trans-unit id="e6be539fb22a5b9d1b2dbc3f3efee91842482592" translate="yes" xml:space="preserve">
          <source>Advanced action techniques</source>
          <target state="translated">高度なアクションテクニック</target>
        </trans-unit>
        <trans-unit id="7d11fcc75baee8b3a5e324b547b893ebb063f2ea" translate="yes" xml:space="preserve">
          <source>Advanced custom template tags</source>
          <target state="translated">高度なカスタムテンプレートタグ</target>
        </trans-unit>
        <trans-unit id="2ea5de740ecde63e7278f9c6f1ad4f38244713cc" translate="yes" xml:space="preserve">
          <source>Advanced features of &lt;code&gt;TransactionTestCase&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;TransactionTestCase&lt;/code&gt; の高度な機能</target>
        </trans-unit>
        <trans-unit id="2bfe0e3b7c302688acc1807007e8d8b521dfe939" translate="yes" xml:space="preserve">
          <source>Advanced queries</source>
          <target state="translated">高度なクエリ</target>
        </trans-unit>
        <trans-unit id="6013e5a6b54a406e23e302755962d51289372466" translate="yes" xml:space="preserve">
          <source>Advanced testing topics</source>
          <target state="translated">高度なテストのトピック</target>
        </trans-unit>
        <trans-unit id="8176f171fd2c2a51f8e7eeff9ab6630a3285d740" translate="yes" xml:space="preserve">
          <source>Advanced tutorial: How to write reusable apps</source>
          <target state="translated">高度なチュートリアル。再利用可能なアプリの書き方</target>
        </trans-unit>
        <trans-unit id="3f2484833c357305a71ba8f10aa625e55a1a6622" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;GZipMiddleware&lt;/code&gt; so it won&amp;rsquo;t calculate an &lt;code&gt;ETag&lt;/code&gt; header on gzipped contents.</source>
          <target state="translated">&lt;code&gt;GZipMiddleware&lt;/code&gt; の後、gzip圧縮されたコンテンツの &lt;code&gt;ETag&lt;/code&gt; ヘッダーを計算しません。</target>
        </trans-unit>
        <trans-unit id="86f00443055d740ee3c3763e61aeea16472d09ef" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;SessionMiddleware&lt;/code&gt; if you&amp;rsquo;re using &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt;&lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt; &lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt; &lt;/a&gt;を使用している場合は、 &lt;code&gt;SessionMiddleware&lt;/code&gt; の後。</target>
        </trans-unit>
        <trans-unit id="9289f81e58cb8e19e5576059e58ac92f6f4ba14b" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;SessionMiddleware&lt;/code&gt;: can use session-based storage.</source>
          <target state="translated">&lt;code&gt;SessionMiddleware&lt;/code&gt; の後：セッションベースのストレージを使用できます。</target>
        </trans-unit>
        <trans-unit id="d726b0a1292337eaaae0815a0c2fa33faa692651" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;SessionMiddleware&lt;/code&gt;: uses session storage.</source>
          <target state="translated">&lt;code&gt;SessionMiddleware&lt;/code&gt; の後：セッションストレージを使用します。</target>
        </trans-unit>
        <trans-unit id="4a5f057391aa6585b79fd3da631b77f7f1c42b44" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;UpdateCacheMiddleware&lt;/code&gt;: Modifies &lt;code&gt;Vary&lt;/code&gt; header.</source>
          <target state="translated">&lt;code&gt;UpdateCacheMiddleware&lt;/code&gt; の後： &lt;code&gt;Vary&lt;/code&gt; ヘッダーを変更します。</target>
        </trans-unit>
        <trans-unit id="2681fdd75b468f221993a3699c1f8d91d4bbbffc" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;parser.parse()&lt;/code&gt; is called, the parser hasn&amp;rsquo;t yet &amp;ldquo;consumed&amp;rdquo; the &lt;code&gt;{% endcomment %}&lt;/code&gt; tag, so the code needs to explicitly call &lt;code&gt;parser.delete_first_token()&lt;/code&gt;.</source>
          <target state="translated">後 &lt;code&gt;parser.parse()&lt;/code&gt; が呼び出され、パーサーはまだ「消費」していない &lt;code&gt;{% endcomment %}&lt;/code&gt; タグを明示的に呼び出すコードニーズので &lt;code&gt;parser.delete_first_token()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="281a78946c958de801c852d816af4adf36943168" translate="yes" xml:space="preserve">
          <source>After a deprecation period of your choosing (two or three feature releases for fields in Django itself), change the &lt;code&gt;system_check_deprecated_details&lt;/code&gt; attribute to &lt;code&gt;system_check_removed_details&lt;/code&gt; and update the dictionary similar to:</source>
          <target state="translated">選択した非推奨期間（Django自体のフィールドの2つまたは3つの機能リリース）の後、 &lt;code&gt;system_check_deprecated_details&lt;/code&gt; 属性を &lt;code&gt;system_check_removed_details&lt;/code&gt; に変更し、次のように辞書を更新します。</target>
        </trans-unit>
        <trans-unit id="6accf2533a2ff16ba36e8ad20774b9e6ba4a6eb7" translate="yes" xml:space="preserve">
          <source>After a ticket has a patch, it needs to be reviewed by a second set of eyes. After submitting a pull request, update the ticket metadata by setting the flags on the ticket to say &amp;ldquo;has patch&amp;rdquo;, &amp;ldquo;doesn&amp;rsquo;t need tests&amp;rdquo;, etc, so others can find it for review. Contributing doesn&amp;rsquo;t necessarily always mean writing a patch from scratch. Reviewing existing patches is also a very helpful contribution. See &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/triaging-tickets/&quot;&gt;Triaging tickets&lt;/a&gt; for details.</source>
          <target state="translated">チケットにパッチが適用された後、2番目の目でレビューする必要があります。プルリクエストを送信した後、チケットのフラグを「パッチあり」、「テストは不要」などに設定してチケットメタデータを更新し、他の人がレビューのためにそれを見つけられるようにします。貢献とは、必ずしも最初からパッチを作成することを意味するわけではありません。既存のパッチを確認することも非常に役立ちます。詳細&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/triaging-tickets/&quot;&gt;については、チケットのトリアージ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6abcb2ff248ea2f61984947bf36856668333da73" translate="yes" xml:space="preserve">
          <source>After a ticket has a patch, it needs to be reviewed by a second set of eyes. After submitting a pull request, update the ticket metadata by setting the flags on the ticket to say &amp;ldquo;has patch&amp;rdquo;, &amp;ldquo;doesn&amp;rsquo;t need tests&amp;rdquo;, etc, so others can find it for review. Contributing doesn&amp;rsquo;t necessarily always mean writing a patch from scratch. Reviewing existing patches is also a very helpful contribution. See &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/triaging-tickets/&quot;&gt;Triaging tickets&lt;/a&gt; for details.</source>
          <target state="translated">After a ticket has a patch, it needs to be reviewed by a second set of eyes. After submitting a pull request, update the ticket metadata by setting the flags on the ticket to say &amp;ldquo;has patch&amp;rdquo;, &amp;ldquo;doesn&amp;rsquo;t need tests&amp;rdquo;, etc, so others can find it for review. Contributing doesn&amp;rsquo;t necessarily always mean writing a patch from scratch. Reviewing existing patches is also a very helpful contribution. See &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/triaging-tickets/&quot;&gt;Triaging tickets&lt;/a&gt; for details.</target>
        </trans-unit>
        <trans-unit id="e32c6f7dcad4ecb9998b074a7cc11c519c1f8bd3" translate="yes" xml:space="preserve">
          <source>After adding the &lt;code&gt;templatetags&lt;/code&gt; module, you will need to restart your server before you can use the tags or filters in templates.</source>
          <target state="translated">&lt;code&gt;templatetags&lt;/code&gt; モジュールを追加した後、テンプレートでタグまたはフィルターを使用するには、サーバーを再起動する必要があります。</target>
        </trans-unit>
        <trans-unit id="1f9942a37c8cd58111bc08a610226302ee82774c" translate="yes" xml:space="preserve">
          <source>After any middleware that modifies the &lt;code&gt;Vary&lt;/code&gt; header: that header is used to pick a value for the cache hash-key.</source>
          <target state="translated">&lt;code&gt;Vary&lt;/code&gt; ヘッダーを変更するミドルウェアの後：そのヘッダーは、キャッシュハッシュキーの値を選択するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1f06aea5ce8261b350616986ce317de50c27042d" translate="yes" xml:space="preserve">
          <source>After calling &lt;code&gt;save()&lt;/code&gt;, your model formset will have three new attributes containing the formset&amp;rsquo;s changes:</source>
          <target state="translated">&lt;code&gt;save()&lt;/code&gt; を呼び出した後、モデルのフォームセットには、フォームセットの変更を含む3つの新しい属性があります。</target>
        </trans-unit>
        <trans-unit id="c58ac7107e455c654ba47c150a89bf6b48e736fc" translate="yes" xml:space="preserve">
          <source>After clicking next, you will be prompted to confirm the selected package and &amp;ldquo;Download directory&amp;rdquo;. Click next again, this will download PostGIS and you will be asked to click next to begin the PostGIS installer. Select the default options during install. The install process includes three Yes/No dialog boxes, the default option for all three is &amp;ldquo;No&amp;rdquo;.</source>
          <target state="translated">After clicking next, you will be prompted to confirm the selected package and &amp;ldquo;Download directory&amp;rdquo;. Click next again, this will download PostGIS and you will be asked to click next to begin the PostGIS installer. Select the default options during install. The install process includes three Yes/No dialog boxes, the default option for all three is &amp;ldquo;No&amp;rdquo;.</target>
        </trans-unit>
        <trans-unit id="4d390de24fb64624d4aff4859d91742174ae6775" translate="yes" xml:space="preserve">
          <source>After clicking next, you will be prompted to select your mirror, PostGIS will be downloaded, and the PostGIS installer will begin. Select only the default options during install (e.g., do not uncheck the option to create a default PostGIS database).</source>
          <target state="translated">次へ]をクリックすると、ミラーを選択するように促され、PostGIS がダウンロードされ、PostGIS インストーラが開始されます。インストール中はデフォルトのオプションのみを選択してください(例:デフォルトの PostGIS データベースを作成するオプションのチェックを外さないでください)。</target>
        </trans-unit>
        <trans-unit id="7e357a5e8113a5b7fddea0de2d89e752e5b16ef5" translate="yes" xml:space="preserve">
          <source>After committing the patch, send it to your fork on GitHub (substitute &amp;ldquo;ticket_99999&amp;rdquo; with the name of your branch if it&amp;rsquo;s different):</source>
          <target state="translated">パッチをコミットした後、それをGitHubのフォークに送信します（「ticket_99999」をブランチの名前と置き換えます（異なる場合）。</target>
        </trans-unit>
        <trans-unit id="2aed56fcb855399b7f515c0d75a3f8bfa74e730b" translate="yes" xml:space="preserve">
          <source>After defining these URL patterns, Django will automatically add the language prefix to the URL patterns that were added by the &lt;code&gt;i18n_patterns&lt;/code&gt; function. Example:</source>
          <target state="translated">これらのURLパターンを定義した後、Djangoは &lt;code&gt;i18n_patterns&lt;/code&gt; 関数によって追加されたURLパターンに言語プレフィックスを自動的に追加します。例：</target>
        </trans-unit>
        <trans-unit id="7d008e64d4a0475b85406cccc8318f86e3da9019" translate="yes" xml:space="preserve">
          <source>After defining your model, you need to sync it with the database. First, create a database migration:</source>
          <target state="translated">モデルを定義したら、データベースと同期させる必要があります。まず、データベースの移行を作成します。</target>
        </trans-unit>
        <trans-unit id="8e6930a6c173b07b683b82da9d1f296b3dcb130c" translate="yes" xml:space="preserve">
          <source>After each test, Django empties only tables corresponding to models in available apps. However, at the database level, truncation may cascade to related models in unavailable apps. Furthermore &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_migrate&quot;&gt;&lt;code&gt;post_migrate&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t fired; it will be fired by the next &lt;code&gt;TransactionTestCase&lt;/code&gt;, after the correct set of applications is selected.</source>
          <target state="translated">各テストの後、Djangoは利用可能なアプリのモデルに対応するテーブルのみを空にします。ただし、データベースレベルでは、利用できないアプリの関連モデルに切り捨てがカスケードする場合があります。さらに、&lt;a href=&quot;../../ref/signals#django.db.models.signals.post_migrate&quot;&gt; &lt;code&gt;post_migrate&lt;/code&gt; &lt;/a&gt;は実行されません。アプリケーションの正しいセットが選択された後、次の &lt;code&gt;TransactionTestCase&lt;/code&gt; によって起動されます。</target>
        </trans-unit>
        <trans-unit id="b85411d44bdeb415c99e270e325cf620c6f3d48c" translate="yes" xml:space="preserve">
          <source>After identifying a bug, we wrote a test that exposes it and corrected the bug in the code so our test passes.</source>
          <target state="translated">バグを特定した後、それを公開するテストを書き、コード内のバグを修正したので、テストは合格しました。</target>
        </trans-unit>
        <trans-unit id="9ca69a5e2e9e85d442e5087cec08c6e01b338c19" translate="yes" xml:space="preserve">
          <source>After incrementing the choice count, the code returns an &lt;a href=&quot;../ref/request-response#django.http.HttpResponseRedirect&quot;&gt;&lt;code&gt;HttpResponseRedirect&lt;/code&gt;&lt;/a&gt; rather than a normal &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../ref/request-response#django.http.HttpResponseRedirect&quot;&gt;&lt;code&gt;HttpResponseRedirect&lt;/code&gt;&lt;/a&gt; takes a single argument: the URL to which the user will be redirected (see the following point for how we construct the URL in this case).</source>
          <target state="translated">選択カウントを増やした後、コードは通常の&lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;ではなく&lt;a href=&quot;../ref/request-response#django.http.HttpResponseRedirect&quot;&gt; &lt;code&gt;HttpResponseRedirect&lt;/code&gt; を&lt;/a&gt;返します。&lt;a href=&quot;../ref/request-response#django.http.HttpResponseRedirect&quot;&gt; &lt;code&gt;HttpResponseRedirect&lt;/code&gt; &lt;/a&gt;は、ユーザーがリダイレクトされるURLの1つの引数を取ります（この場合のURLの作成方法については、次のポイントを参照してください）。</target>
        </trans-unit>
        <trans-unit id="774c302b2329f500a54a6b1f4edb804e0b750ee4" translate="yes" xml:space="preserve">
          <source>After installation, open the command prompt and check that the Python version matches the version you installed by executing:</source>
          <target state="translated">インストール後、コマンドプロンプトを開き、実行してPythonのバージョンがインストールしたバージョンと一致していることを確認します。</target>
        </trans-unit>
        <trans-unit id="71a6e296bbb95376e2919538a9365dbb8734ff32" translate="yes" xml:space="preserve">
          <source>After installing Memcached itself, you&amp;rsquo;ll need to install a Memcached binding. There are several Python Memcached bindings available; the two most common are &lt;a href=&quot;https://pypi.org/project/python-memcached/&quot;&gt;python-memcached&lt;/a&gt; and &lt;a href=&quot;https://pypi.org/project/pylibmc/&quot;&gt;pylibmc&lt;/a&gt;.</source>
          <target state="translated">Memcached自体をインストールした後、Memcachedバインディングをインストールする必要があります。いくつかのPython Memcachedバインディングが利用可能です。最も一般的な2つは&lt;a href=&quot;https://pypi.org/project/python-memcached/&quot;&gt;python-memcached&lt;/a&gt;と&lt;a href=&quot;https://pypi.org/project/pylibmc/&quot;&gt;pylibmc&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="7aa4b22c12e8c71bdc31e0284bc1ee8ce0c4ac6c" translate="yes" xml:space="preserve">
          <source>After installing Postgres.app, add the following to your &lt;code&gt;.bash_profile&lt;/code&gt; so you can run the package&amp;rsquo;s programs from the command-line. Replace &lt;code&gt;X.Y&lt;/code&gt; with the version of PostgreSQL in the Postgres.app you installed:</source>
          <target state="translated">Postgres.appをインストールした後、以下を &lt;code&gt;.bash_profile&lt;/code&gt; に追加して、コマンドラインからパッケージのプログラムを実行できるようにします。 &lt;code&gt;X.Y&lt;/code&gt; を、インストールしたPostgres.appのPostgreSQLのバージョンに置き換えます。</target>
        </trans-unit>
        <trans-unit id="b736f158d630c0182bc11671267f8e1b4815968a" translate="yes" xml:space="preserve">
          <source>After installing the binary packages, you&amp;rsquo;ll want to add the following to your &lt;code&gt;.profile&lt;/code&gt; to be able to run the package programs from the command-line:</source>
          <target state="translated">バイナリパッケージをインストールした後、コマンドラインからパッケージプログラムを実行できるように、次のものを &lt;code&gt;.profile&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="a60de7d58c77244f0cf00d8e784d29a1e7247f48" translate="yes" xml:space="preserve">
          <source>After passing through template response middleware, but before passing through response middleware.</source>
          <target state="translated">テンプレートレスポンスミドルウェアを通過した後、レスポンスミドルウェアを通過する前に</target>
        </trans-unit>
        <trans-unit id="5bee1621e895ebf9bd0640dd87cf6d184eec12d4" translate="yes" xml:space="preserve">
          <source>After reading those, if you want something a little meatier to sink your teeth into, there&amp;rsquo;s always the Python &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">あなたが何かにあなたの歯をシンクするために少しmeatierたい場合は、それらを、読んだ後、いつものPythonあります&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; の&lt;/a&gt;マニュアルを参照してください。</target>
        </trans-unit>
        <trans-unit id="7dc0c875063a5da44991572aecb9756257b690a4" translate="yes" xml:space="preserve">
          <source>After setting the language choice, Django looks for a &lt;code&gt;next&lt;/code&gt; parameter in the &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;GET&lt;/code&gt; data. If that is found and Django considers it to be a safe URL (i.e. it doesn&amp;rsquo;t point to a different host and uses a safe scheme), a redirect to that URL will be performed. Otherwise, Django may fall back to redirecting the user to the URL from the &lt;code&gt;Referer&lt;/code&gt; header or, if it is not set, to &lt;code&gt;/&lt;/code&gt;, depending on the nature of the request:</source>
          <target state="translated">言語の選択を設定した後、Django は &lt;code&gt;POST&lt;/code&gt; または &lt;code&gt;GET&lt;/code&gt; データで &lt;code&gt;next&lt;/code&gt; パラメータを探します。それが見つかり、Djangoがそれを安全なURLであると見なした場合（つまり、別のホストを指さず、安全なスキームを使用する場合）、そのURLへのリダイレクトが実行されます。そうでない場合、Django は、リクエストの性質に応じて、 &lt;code&gt;Referer&lt;/code&gt; ヘッダーからURLにユーザーをリダイレクトするか、設定されていない場合は &lt;code&gt;/&lt;/code&gt; にフォールバックする可能性があります。</target>
        </trans-unit>
        <trans-unit id="3e1436ef5379ce0f1a30ea3cae55047febc6a4e9" translate="yes" xml:space="preserve">
          <source>After setting up and activating the virtual environment, run the following command:</source>
          <target state="translated">仮想環境を設定してアクティベートした後、以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="c7620c7b76f9f6f83e5a60670049dd6c754d2eb5" translate="yes" xml:space="preserve">
          <source>After setting up and activating the virtualenv, run the following command:</source>
          <target state="translated">virtualenv を設定してアクティブにしたら、以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="749f4fb21ac06aa715512fb023e5e4518d514613" translate="yes" xml:space="preserve">
          <source>After somebody votes in a question, the &lt;code&gt;vote()&lt;/code&gt; view redirects to the results page for the question. Let&amp;rsquo;s write that view:</source>
          <target state="translated">誰かが質問に投票した後、 &lt;code&gt;vote()&lt;/code&gt; ビューは質問の結果ページにリダイレクトします。そのビューを書いてみましょう：</target>
        </trans-unit>
        <trans-unit id="a217c47f5d8014faf6fc30b3753dfee60b8d8123" translate="yes" xml:space="preserve">
          <source>After the &lt;a href=&quot;../../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;../../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; cache needs to be cleared, and the referenced objects should be gone:</source>
          <target state="translated">&lt;a href=&quot;../../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; の&lt;/a&gt;後で、&lt;a href=&quot;../../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;キャッシュをクリアする必要があり、参照されたオブジェクトを削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="4fcd69199df456b7ec6054b8a08e330f73536452" translate="yes" xml:space="preserve">
          <source>After the field has been cleaned and validated, the &lt;code&gt;UploadedFile&lt;/code&gt; object will have an additional &lt;code&gt;image&lt;/code&gt; attribute containing the Pillow &lt;a href=&quot;https://pillow.readthedocs.io/en/latest/reference/Image.html&quot;&gt;Image&lt;/a&gt; instance used to check if the file was a valid image. Pillow closes the underlying file descriptor after verifying an image, so whilst non-image data attributes, such as &lt;code&gt;format&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, and &lt;code&gt;width&lt;/code&gt;, are available, methods that access the underlying image data, such as &lt;code&gt;getdata()&lt;/code&gt; or &lt;code&gt;getpixel()&lt;/code&gt;, cannot be used without reopening the file. For example:</source>
          <target state="translated">フィールドが消去および検証された後、 &lt;code&gt;UploadedFile&lt;/code&gt; オブジェクトには、ファイルが有効な画像であるかどうかを確認するために使用されるPillow &lt;a href=&quot;https://pillow.readthedocs.io/en/latest/reference/Image.html&quot;&gt;Image&lt;/a&gt;インスタンスを含む追加の &lt;code&gt;image&lt;/code&gt; 属性があります。枕は、画像を確認した後、下層のファイル記述子を閉じるように、そのような非画像データ属性、一方 &lt;code&gt;format&lt;/code&gt; 、 &lt;code&gt;height&lt;/code&gt; 、及び &lt;code&gt;width&lt;/code&gt; 、利用可能である、方法アクセス基礎となる画像などのデータ、その &lt;code&gt;getdata()&lt;/code&gt; または &lt;code&gt;getpixel()&lt;/code&gt; 、することができませんファイルを再度開かずに使用できます。例えば：</target>
        </trans-unit>
        <trans-unit id="14ee9b4c42739ebdc299c256addfef73b7b4d50d" translate="yes" xml:space="preserve">
          <source>After the installation has completed, you can verify your Django installation by executing &lt;code&gt;django-admin --version&lt;/code&gt; in the command prompt.</source>
          <target state="translated">インストールが完了したら、コマンドプロンプトで &lt;code&gt;django-admin --version&lt;/code&gt; を実行して、Djangoのインストールを確認できます。</target>
        </trans-unit>
        <trans-unit id="81017b450bb562125665785f46775a28051421ac" translate="yes" xml:space="preserve">
          <source>After the previous tutorials, our project should look like this:</source>
          <target state="translated">これまでのチュートリアルの後、プロジェクトは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="ac7e3cfe6d36fcc8800548c504c913db5ea08bda" translate="yes" xml:space="preserve">
          <source>After the tables are created, execute an &lt;code&gt;ALTER TABLE&lt;/code&gt; statement to convert a table to a new storage engine (such as InnoDB):</source>
          <target state="translated">テーブルが作成されたら、 &lt;code&gt;ALTER TABLE&lt;/code&gt; ステートメントを実行してテーブルを新しいストレージエンジン（InnoDBなど）に変換します。</target>
        </trans-unit>
        <trans-unit id="833c95b13093b5d748d6f17ddb4f86d50a0bd954" translate="yes" xml:space="preserve">
          <source>After those, if you&amp;rsquo;re still hungry for more information about contributing, you can always browse through the rest of &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/index/&quot;&gt;Django&amp;rsquo;s documentation on contributing&lt;/a&gt;. It contains a ton of useful information and should be your first source for answering any questions you might have.</source>
          <target state="translated">その後、コントリビューションに関する詳細情報がまだ必要な場合は、&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/index/&quot;&gt;Djangoのコントリビューションに関する&lt;/a&gt;残りのドキュメントをいつでも閲覧できます。それはたくさんの有用な情報を含んでおり、あなたが持つかもしれない質問に答えるためのあなたの最初の情報源であるべきです。</target>
        </trans-unit>
        <trans-unit id="4392b74ce8f91504a3283e7e6876633a2885864e" translate="yes" xml:space="preserve">
          <source>After those, if you&amp;rsquo;re still hungry for more information about contributing, you can always browse through the rest of &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/index/&quot;&gt;Django&amp;rsquo;s documentation on contributing&lt;/a&gt;. It contains a ton of useful information and should be your first source for answering any questions you might have.</source>
          <target state="translated">After those, if you&amp;rsquo;re still hungry for more information about contributing, you can always browse through the rest of &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/contributing/index/&quot;&gt;Django&amp;rsquo;s documentation on contributing&lt;/a&gt;. It contains a ton of useful information and should be your first source for answering any questions you might have.</target>
        </trans-unit>
        <trans-unit id="454dbfd1138b5db0a027bc12c3fb8a7dd0e23f9f" translate="yes" xml:space="preserve">
          <source>After you call this method, the test client will have all the cookies and session data cleared to defaults. Subsequent requests will appear to come from an &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt;&lt;code&gt;AnonymousUser&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドを呼び出すと、テストクライアントはすべてのCookieとセッションデータをデフォルトにクリアします。以降のリクエストは&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt; &lt;code&gt;AnonymousUser&lt;/code&gt; &lt;/a&gt;から送信されたように見えます。</target>
        </trans-unit>
        <trans-unit id="cb6524b580510278d19c4826bcc1d86bb9822378" translate="yes" xml:space="preserve">
          <source>After you call this method, the test client will have all the cookies and session data required to pass any login-based tests that may form part of a view.</source>
          <target state="translated">このメソッドを呼び出すと、テストクライアントは、ビューの一部を形成する可能性のあるログインベースのテストに合格するために必要なすべての Cookie とセッションデータを持つようになります。</target>
        </trans-unit>
        <trans-unit id="8ccf916013f6746ea045fc6d05d7dcf32415b07c" translate="yes" xml:space="preserve">
          <source>After you create your message file &amp;ndash; and each time you make changes to it &amp;ndash; you&amp;rsquo;ll need to compile it into a more efficient form, for use by &lt;code&gt;gettext&lt;/code&gt;. Do this with the &lt;a href=&quot;../../ref/django-admin#django-admin-compilemessages&quot;&gt;&lt;code&gt;django-admin compilemessages&lt;/code&gt;&lt;/a&gt; utility.</source>
          <target state="translated">メッセージファイルを作成した後、それに変更を加えるたびに、 &lt;code&gt;gettext&lt;/code&gt; で使用するために、より効率的な形式にコンパイルする必要があります。これは、&lt;a href=&quot;../../ref/django-admin#django-admin-compilemessages&quot;&gt; &lt;code&gt;django-admin compilemessages&lt;/code&gt; &lt;/a&gt;ユーティリティで行います。</target>
        </trans-unit>
        <trans-unit id="9f142d8357e94c93bff8e02e5c80a67c40758627" translate="yes" xml:space="preserve">
          <source>After you have run the tests, fix any failures. While you have the release notes fresh in your mind, it may also be a good time to take advantage of new features in Django by refactoring your code to eliminate any deprecation warnings.</source>
          <target state="translated">テストを実行した後、失敗があれば修正してください。リリースノートが記憶に新しいうちに、コードをリファクタリングして deprecation の警告を排除することで Django の新機能を利用するのも良い機会かもしれません。</target>
        </trans-unit>
        <trans-unit id="75948cd661d2774dc7b4af27c50f524b8ec48d16" translate="yes" xml:space="preserve">
          <source>After you&amp;rsquo;ve created and activated a virtual environment, enter the command:</source>
          <target state="translated">仮想環境を作成してアクティブ化したら、次のコマンドを入力します。</target>
        </trans-unit>
        <trans-unit id="6c00f9f95d692f9f5d52dc64a0c910df8598d94d" translate="yes" xml:space="preserve">
          <source>After you&amp;rsquo;ve created the translations, the &lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; function will return the URL in the active language. Example:</source>
          <target state="translated">翻訳を作成すると、&lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt;関数はアクティブな言語でURLを返します。例：</target>
        </trans-unit>
        <trans-unit id="a83bf81fa68c7adb95861b4267776fda80bfd431" translate="yes" xml:space="preserve">
          <source>After you&amp;rsquo;ve either set &lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; or called &lt;code&gt;configure()&lt;/code&gt;, you&amp;rsquo;ll need to call &lt;a href=&quot;../ref/applications#django.setup&quot;&gt;&lt;code&gt;django.setup()&lt;/code&gt;&lt;/a&gt; to load your settings and populate Django&amp;rsquo;s application registry. For example:</source>
          <target state="translated">&lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; を&lt;/a&gt;設定するか、 &lt;code&gt;configure()&lt;/code&gt; を呼び出した&lt;a href=&quot;../ref/applications#django.setup&quot;&gt; &lt;code&gt;django.setup()&lt;/code&gt; &lt;/a&gt;を呼び出して設定をロードし、Djangoのアプリケーションレジストリにデータを入力する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="c00c09156a5af6e5afc0c9ffaf58bed13a5f856f" translate="yes" xml:space="preserve">
          <source>After you&amp;rsquo;ve either set &lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-9&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; or called &lt;code&gt;configure()&lt;/code&gt;, you&amp;rsquo;ll need to call &lt;a href=&quot;../ref/applications#django.setup&quot;&gt;&lt;code&gt;django.setup()&lt;/code&gt;&lt;/a&gt; to load your settings and populate Django&amp;rsquo;s application registry. For example:</source>
          <target state="translated">After you&amp;rsquo;ve either set &lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-9&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt; or called &lt;code&gt;configure()&lt;/code&gt; , you&amp;rsquo;ll need to call &lt;a href=&quot;../ref/applications#django.setup&quot;&gt; &lt;code&gt;django.setup()&lt;/code&gt; &lt;/a&gt; to load your settings and populate Django&amp;rsquo;s application registry. For example:</target>
        </trans-unit>
        <trans-unit id="6eb54cbde4f24bf5c6af4e6dd0b7a585b18eb988" translate="yes" xml:space="preserve">
          <source>After you&amp;rsquo;ve installed the KyngChaos binaries and modified your &lt;code&gt;PATH&lt;/code&gt;, as described above, &lt;code&gt;psycopg2&lt;/code&gt; may be installed using the following command:</source>
          <target state="translated">上記のように、 &lt;code&gt;psycopg2&lt;/code&gt; バイナリをインストールして &lt;code&gt;PATH&lt;/code&gt; を変更した後、次のコマンドを使用してpsycopg2をインストールできます。</target>
        </trans-unit>
        <trans-unit id="88b1186bb9c94ec6c9603db091e796a247ecb17d" translate="yes" xml:space="preserve">
          <source>After you&amp;rsquo;ve taken these steps, you&amp;rsquo;ll be able to use the admin site by visiting the URL you hooked it into (&lt;code&gt;/admin/&lt;/code&gt;, by default).</source>
          <target state="translated">これらの手順を完了すると、フックしたURL（デフォルトでは &lt;code&gt;/admin/&lt;/code&gt; ）にアクセスして管理サイトを使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="84768878fd67444cf6aeb2b9f70fb7f8c46001a3" translate="yes" xml:space="preserve">
          <source>Afterwards, invoke the Django shell from the &lt;code&gt;geodjango&lt;/code&gt; project directory:</source>
          <target state="translated">その後、 &lt;code&gt;geodjango&lt;/code&gt; プロジェクトディレクトリからDjangoシェルを呼び出します。</target>
        </trans-unit>
        <trans-unit id="b0c1764bcde7adb7e9f9737f8f18137d064ad3a9" translate="yes" xml:space="preserve">
          <source>Afterwards, you can also install the KyngChaos binary packages for &lt;a href=&quot;https://www.kyngchaos.com/software/postgres&quot;&gt;PostgreSQL and PostGIS&lt;/a&gt;.</source>
          <target state="translated">その後、&lt;a href=&quot;https://www.kyngchaos.com/software/postgres&quot;&gt;PostgreSQLとPostGISの&lt;/a&gt; KyngChaosバイナリパッケージをインストールすることもできます。</target>
        </trans-unit>
        <trans-unit id="609ae4a2b711e9851698f5c7ccad2895c556ca86" translate="yes" xml:space="preserve">
          <source>Afterwards, you should familiarize yourself with the changes that were made in the new Django version(s):</source>
          <target state="translated">その後、新しいDjangoのバージョン(s)で行われた変更点に慣れておく必要があります。</target>
        </trans-unit>
        <trans-unit id="76d9eb1aa30256965c27105fa5717d6b2a4ac66b" translate="yes" xml:space="preserve">
          <source>Again, &lt;code&gt;polls&lt;/code&gt; is a minimal application, but however complex it grows in the future and whatever other code it interacts with, we now have some guarantee that the method we have written tests for will behave in expected ways.</source>
          <target state="translated">繰り返しになりますが、 &lt;code&gt;polls&lt;/code&gt; は最小限のアプリケーションですが、将来的に複雑になり、他のコードとやり取りする場合でも、テストを記述したメソッドが期待どおりに動作することが保証されます。</target>
        </trans-unit>
        <trans-unit id="76edc27b78551b9907274be664d0d529b149a682" translate="yes" xml:space="preserve">
          <source>Again, defining project-specific configuration classes in a submodule called &lt;code&gt;apps&lt;/code&gt; is a convention, not a requirement.</source>
          <target state="translated">この場合も、 &lt;code&gt;apps&lt;/code&gt; というサブモジュールでプロジェクト固有の構成クラスを定義することは、慣例であり、要件ではありません。</target>
        </trans-unit>
        <trans-unit id="4800e0bd8f8bf2f1ef78d7b6e6b1e6c25da9510a" translate="yes" xml:space="preserve">
          <source>Again, middleware are run in reverse order during the response phase, which includes &lt;code&gt;process_exception&lt;/code&gt;. If an exception middleware returns a response, the &lt;code&gt;process_exception&lt;/code&gt; methods of the middleware classes above that middleware won&amp;rsquo;t be called at all.</source>
          <target state="translated">繰り返しになりますが、ミドルウェアは、 &lt;code&gt;process_exception&lt;/code&gt; を含む応答フェーズ中に逆の順序で実行されます。例外ミドルウェアが応答を返す場合、そのミドルウェアより上のミドルウェアクラスの &lt;code&gt;process_exception&lt;/code&gt; メソッドはまったく呼び出されません。</target>
        </trans-unit>
        <trans-unit id="07f00b688ea0b766303ecee7f61a1a4a6d54efd8" translate="yes" xml:space="preserve">
          <source>Again, the above is only a selection of the whole list; see the &lt;a href=&quot;builtins#ref-templates-builtins-tags&quot;&gt;built-in tag reference&lt;/a&gt; for the complete list.</source>
          <target state="translated">繰り返しますが、上記はリスト全体の選択にすぎません。完全なリストについては、&lt;a href=&quot;builtins#ref-templates-builtins-tags&quot;&gt;組み込みタグリファレンス&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="72d90458b1cb9acc91a52abbd86072d9d2f737ca" translate="yes" xml:space="preserve">
          <source>Again, these are just a few examples; see the &lt;a href=&quot;builtins#ref-templates-builtins-filters&quot;&gt;built-in filter reference&lt;/a&gt; for the complete list.</source>
          <target state="translated">繰り返しますが、これらはほんの数例です。完全なリストについては、&lt;a href=&quot;builtins#ref-templates-builtins-filters&quot;&gt;組み込みのフィルターリファレンス&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="f2a7af272e8491c8ef8998c146668b3190e291a3" translate="yes" xml:space="preserve">
          <source>Again, these are just short descriptions of the most common field options. Full details can be found in the &lt;a href=&quot;../../ref/models/fields#common-model-field-options&quot;&gt;common model field option reference&lt;/a&gt;.</source>
          <target state="translated">繰り返しますが、これらは最も一般的なフィールドオプションの簡単な説明です。詳細については、&lt;a href=&quot;../../ref/models/fields#common-model-field-options&quot;&gt;一般的なモデルフィールドオプションのリファレンスを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="4ad6465156415426b3b441f0d6cb9831006c7d96" translate="yes" xml:space="preserve">
          <source>Again, this is a minimal example; your tests may require additional settings to run.</source>
          <target state="translated">繰り返しになりますが、これは最小限の例であり、テストを実行するために追加の設定が必要な場合があります。</target>
        </trans-unit>
        <trans-unit id="22f87c4755a2a72211f05d455242c68a7b90af59" translate="yes" xml:space="preserve">
          <source>Again, this only scratches the surface. A complete reference can be found in the &lt;a href=&quot;../../ref/models/querysets#field-lookups&quot;&gt;field lookup reference&lt;/a&gt;.</source>
          <target state="translated">繰り返しになりますが、これは表面を傷つけるだけです。完全なリファレンスは、&lt;a href=&quot;../../ref/models/querysets#field-lookups&quot;&gt;フィールドルックアップリファレンスにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4f6e5271c1968addea0910c36407cb68adbcc2a4" translate="yes" xml:space="preserve">
          <source>Again, we stress that this behavior is on by default. If you&amp;rsquo;re using Django&amp;rsquo;s template system, you&amp;rsquo;re protected.</source>
          <target state="translated">繰り返しますが、この動作はデフォルトでオンになっています。Djangoのテンプレートシステムを使用している場合は、保護されています。</target>
        </trans-unit>
        <trans-unit id="6a8e8189f1313ddd69a6c196be4e792c160e8ade" translate="yes" xml:space="preserve">
          <source>Aggregate</source>
          <target state="translated">Aggregate</target>
        </trans-unit>
        <trans-unit id="558d7aad6e94b62a3c3d222979b260b60b6db7d2" translate="yes" xml:space="preserve">
          <source>Aggregate Functions</source>
          <target state="translated">集計機能</target>
        </trans-unit>
        <trans-unit id="58db3b6eabf8f4ca517fda205de7d76143146986" translate="yes" xml:space="preserve">
          <source>Aggregate functions for statistics</source>
          <target state="translated">統計のための集約関数</target>
        </trans-unit>
        <trans-unit id="e592a786dfbb7bba39abe800dc70d129c6dce799" translate="yes" xml:space="preserve">
          <source>Aggregates can also participate in filters. Any &lt;code&gt;filter()&lt;/code&gt; (or &lt;code&gt;exclude()&lt;/code&gt;) applied to normal model fields will have the effect of constraining the objects that are considered for aggregation.</source>
          <target state="translated">アグリゲートはフィルターにも参加できます。任意の &lt;code&gt;filter()&lt;/code&gt; （または &lt;code&gt;exclude()&lt;/code&gt; ）集約のために考慮されたオブジェクトを制約する効果を持つことになり、通常のモデルフィールドに適用されます。</target>
        </trans-unit>
        <trans-unit id="0c1907fa8ba92171ecd5a41aa1138a68fd39e6c3" translate="yes" xml:space="preserve">
          <source>Aggregates may be used within a &lt;code&gt;Subquery&lt;/code&gt;, but they require a specific combination of &lt;a href=&quot;querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;querysets#django.db.models.query.QuerySet.values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;querysets#django.db.models.query.QuerySet.annotate&quot;&gt;&lt;code&gt;annotate()&lt;/code&gt;&lt;/a&gt; to get the subquery grouping correct.</source>
          <target state="translated">凝集物内で使用することができる &lt;code&gt;Subquery&lt;/code&gt; が、彼らは、特定の組合せが必要&lt;a href=&quot;querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;querysets#django.db.models.query.QuerySet.values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;querysets#django.db.models.query.QuerySet.annotate&quot;&gt; &lt;code&gt;annotate()&lt;/code&gt; &lt;/a&gt;正しいグループ化サブクエリを取得します。</target>
        </trans-unit>
        <trans-unit id="c3046a0b95ce675e13e620164db3548ddbeed47d" translate="yes" xml:space="preserve">
          <source>Aggregates specified using keyword arguments will use the keyword as the name for the annotation. Anonymous arguments will have a name generated for them based upon the name of the aggregate function and the model field that is being aggregated. Complex aggregates cannot use anonymous arguments and must specify a keyword argument as an alias.</source>
          <target state="translated">キーワード引数を使用して指定された集約は、注釈の名前としてキーワードを使用します。匿名引数は、集約関数の名前と集約されるモデル・フィールドに基づいて生成された名前を持ちます。複雑な集約は匿名引数を使用できず、キーワード引数をエイリアスとして指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="4c54474caf51a4cfcf55ae1aeaad92afdaea6ae2" translate="yes" xml:space="preserve">
          <source>Aggregates the logic of multiple fields that together produce a single value.</source>
          <target state="translated">複数のフィールドのロジックを集約し、1つの値を生成します。</target>
        </trans-unit>
        <trans-unit id="c5224068860504ef288a954b021f18be1d0eca82" translate="yes" xml:space="preserve">
          <source>Aggregating annotations</source>
          <target state="translated">アノテーションの集約</target>
        </trans-unit>
        <trans-unit id="b9ba037c0e4c06d192c83e08070b15787f07daaa" translate="yes" xml:space="preserve">
          <source>Aggregation</source>
          <target state="translated">Aggregation</target>
        </trans-unit>
        <trans-unit id="8744763c19352d1e7e8a834af21ab845a14c6d4a" translate="yes" xml:space="preserve">
          <source>Aggregation functions</source>
          <target state="translated">集計機能</target>
        </trans-unit>
        <trans-unit id="db05f7da09b2a0260f41b164da50f58bf58d7db4" translate="yes" xml:space="preserve">
          <source>Aggregation functions return &lt;code&gt;None&lt;/code&gt; when used with an empty &lt;code&gt;QuerySet&lt;/code&gt;. For example, the &lt;code&gt;Sum&lt;/code&gt; aggregation function returns &lt;code&gt;None&lt;/code&gt; instead of &lt;code&gt;0&lt;/code&gt; if the &lt;code&gt;QuerySet&lt;/code&gt; contains no entries. An exception is &lt;code&gt;Count&lt;/code&gt;, which does return &lt;code&gt;0&lt;/code&gt; if the &lt;code&gt;QuerySet&lt;/code&gt; is empty.</source>
          <target state="translated">空の &lt;code&gt;QuerySet&lt;/code&gt; で使用すると、集計関数は &lt;code&gt;None&lt;/code&gt; を返します。たとえば、 &lt;code&gt;Sum&lt;/code&gt; 集計関数は、 &lt;code&gt;QuerySet&lt;/code&gt; にエントリが含まれていない場合、 &lt;code&gt;0&lt;/code&gt; ではなく &lt;code&gt;None&lt;/code&gt; を返します。例外は &lt;code&gt;Count&lt;/code&gt; で、 &lt;code&gt;QuerySet&lt;/code&gt; が空の場合は &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="28526bd2f39d981e3a8e47d55d1edc91059ed733" translate="yes" xml:space="preserve">
          <source>Aggregations and other &lt;code&gt;QuerySet&lt;/code&gt; clauses</source>
          <target state="translated">集計とその他の &lt;code&gt;QuerySet&lt;/code&gt; 句</target>
        </trans-unit>
        <trans-unit id="03401c7929a3c8c6e403e43f42554e9b39a016bc" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#django.contrib.gis.gdal.OGRGeometry.point_count&quot;&gt;&lt;code&gt;point_count&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.OGRGeometry.point_count&quot;&gt; &lt;code&gt;point_count&lt;/code&gt; の&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="89a10a12a5bd894bfe79c45dad116ea940883dff" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference.proj&quot;&gt;&lt;code&gt;SpatialReference.proj&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference.proj&quot;&gt; &lt;code&gt;SpatialReference.proj&lt;/code&gt; の&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="311340d0f664404d0e32bcc705f7f5a3f899a664" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.json&quot;&gt;&lt;code&gt;GEOSGeometry.json&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.json&quot;&gt; &lt;code&gt;GEOSGeometry.json&lt;/code&gt; の&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="eea85015493bafd873240e2440370250d63e355a" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#django.contrib.gis.measure.Area&quot;&gt;&lt;code&gt;Area&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.measure.Area&quot;&gt; &lt;code&gt;Area&lt;/code&gt; &lt;/a&gt;クラスのエイリアス。</target>
        </trans-unit>
        <trans-unit id="3139c96ef36bdd16b025d9f6b3f8b24e7ab6c197" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#django.contrib.gis.measure.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.measure.Distance&quot;&gt; &lt;code&gt;Distance&lt;/code&gt; &lt;/a&gt;クラスのエイリアス。</target>
        </trans-unit>
        <trans-unit id="d3596c0273800b5bfe61283f267b07dcfe497e68" translate="yes" xml:space="preserve">
          <source>Alias of &lt;a href=&quot;#django.utils.encoding.force_str&quot;&gt;&lt;code&gt;force_str()&lt;/code&gt;&lt;/a&gt; for backwards compatibility, especially in code that supports Python 2.</source>
          <target state="translated">特にPython 2をサポートするコードでの下位互換性のための&lt;a href=&quot;#django.utils.encoding.force_str&quot;&gt; &lt;code&gt;force_str()&lt;/code&gt; の&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="e367d79c8df65fe0d42fc97a7d15eb1a67e28fd5" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;#django.views.decorators.debug.sensitive_variables&quot;&gt;&lt;code&gt;sensitive_variables()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.views.decorators.debug.sensitive_post_parameters&quot;&gt;&lt;code&gt;sensitive_post_parameters()&lt;/code&gt;&lt;/a&gt; do is, respectively, annotate the decorated function with the names of sensitive variables and annotate the &lt;code&gt;HttpRequest&lt;/code&gt; object with the names of sensitive POST parameters, so that this sensitive information can later be filtered out of reports when an error occurs. The actual filtering is done by Django&amp;rsquo;s default error reporter filter: &lt;a href=&quot;#django.views.debug.SafeExceptionReporterFilter&quot;&gt;&lt;code&gt;django.views.debug.SafeExceptionReporterFilter&lt;/code&gt;&lt;/a&gt;. This filter uses the decorators&amp;rsquo; annotations to replace the corresponding values with stars (&lt;code&gt;**********&lt;/code&gt;) when the error reports are produced. If you wish to override or customize this default behavior for your entire site, you need to define your own filter class and tell Django to use it via the &lt;a href=&quot;../ref/settings#std:setting-DEFAULT_EXCEPTION_REPORTER_FILTER&quot;&gt;&lt;code&gt;DEFAULT_EXCEPTION_REPORTER_FILTER&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">すべての&lt;a href=&quot;#django.views.decorators.debug.sensitive_variables&quot;&gt; &lt;code&gt;sensitive_variables()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#django.views.decorators.debug.sensitive_post_parameters&quot;&gt; &lt;code&gt;sensitive_post_parameters()&lt;/code&gt; &lt;/a&gt;は、それぞれ、修飾された関数に機密変数の名前で注釈を付け、 &lt;code&gt;HttpRequest&lt;/code&gt; オブジェクトに機密POSTパラメータの名前で注釈を付けます。これにより、この機密情報は後でレポートから除外できます。エラーが発生します。実際のフィルタリングは、Djangoのデフォルトのエラーレポーターフィルター&lt;a href=&quot;#django.views.debug.SafeExceptionReporterFilter&quot;&gt; &lt;code&gt;django.views.debug.SafeExceptionReporterFilter&lt;/code&gt; &lt;/a&gt;によって行われます。このフィルターは、デコレーターの注釈を使用して、対応する値を星（ &lt;code&gt;**********&lt;/code&gt; ）エラー報告が作成されたとき。サイト全体に対してこのデフォルトの動作をオーバーライドまたはカスタマイズする場合は、独自のフィルタークラスを定義し、&lt;a href=&quot;../ref/settings#std:setting-DEFAULT_EXCEPTION_REPORTER_FILTER&quot;&gt; &lt;code&gt;DEFAULT_EXCEPTION_REPORTER_FILTER&lt;/code&gt; &lt;/a&gt;設定を介してDjangoにそれを使用するように指示する必要があります。</target>
        </trans-unit>
        <trans-unit id="a8039f9e6b2179f06189ad75d841b92549f36262" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../topics/auth/default#django.contrib.auth.views.PasswordResetView&quot;&gt;&lt;code&gt;PasswordResetView&lt;/code&gt;&lt;/a&gt; tokens.</source>
          <target state="translated">すべての&lt;a href=&quot;../topics/auth/default#django.contrib.auth.views.PasswordResetView&quot;&gt; &lt;code&gt;PasswordResetView&lt;/code&gt; &lt;/a&gt;トークン。</target>
        </trans-unit>
        <trans-unit id="83ad2f51e4998821b250c8647a84c6d07b6ed7e4" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../topics/http/sessions&quot;&gt;sessions&lt;/a&gt; if you are using any other session backend than &lt;code&gt;django.contrib.sessions.backends.cache&lt;/code&gt;, or are using the default &lt;a href=&quot;../topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash&quot;&gt;&lt;code&gt;get_session_auth_hash()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべて&lt;a href=&quot;../topics/http/sessions&quot;&gt;のセッション&lt;/a&gt;あなたがより他のセッションバックエンドを使用している場合 &lt;code&gt;django.contrib.sessions.backends.cache&lt;/code&gt; 、またはデフォルトを使用している&lt;a href=&quot;../topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash&quot;&gt; &lt;code&gt;get_session_auth_hash()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="04ac9d489c3dc8f1a010bfe9b454bb3b904669e8" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;contrib/messages&quot;&gt;messages&lt;/a&gt; if you are using &lt;a href=&quot;contrib/messages#django.contrib.messages.storage.cookie.CookieStorage&quot;&gt;&lt;code&gt;CookieStorage&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;contrib/messages#django.contrib.messages.storage.fallback.FallbackStorage&quot;&gt;&lt;code&gt;FallbackStorage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;contrib/messages#django.contrib.messages.storage.cookie.CookieStorage&quot;&gt; &lt;code&gt;CookieStorage&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;contrib/messages#django.contrib.messages.storage.fallback.FallbackStorage&quot;&gt; &lt;code&gt;FallbackStorage&lt;/code&gt; &lt;/a&gt;を使用している場合のすべての&lt;a href=&quot;contrib/messages&quot;&gt;メッセージ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0384f79740400bf6124e127c5152b7d8fa1cdbc2" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;tools#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; subclasses are run first.</source>
          <target state="translated">すべての&lt;a href=&quot;tools#django.test.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;サブクラスが最初に実行されます。</target>
        </trans-unit>
        <trans-unit id="31517b0b1c71d2abf5c73d7d73dc156598e93d51" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;SessionStore&lt;/code&gt; classes available in Django inherit from &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase&quot;&gt;&lt;code&gt;SessionBase&lt;/code&gt;&lt;/a&gt; and implement data manipulation methods, namely:</source>
          <target state="translated">Djangoで利用可能なすべての &lt;code&gt;SessionStore&lt;/code&gt; クラスは、&lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase&quot;&gt; &lt;code&gt;SessionBase&lt;/code&gt; &lt;/a&gt;を継承し、次のようなデータ操作メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="c9f1617e377da8269575590aa14bf2bce27cdb91" translate="yes" xml:space="preserve">
          <source>All Django wants is that &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;. Or an exception.</source>
          <target state="translated">Djangoが望んでいるのは、その&lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; だけです&lt;/a&gt;。または例外。</target>
        </trans-unit>
        <trans-unit id="9dd77df42cbf9e4375aa2cccefdd1a4331364ccb" translate="yes" xml:space="preserve">
          <source>All POST parameters are systematically filtered out of error reports for certain &lt;a href=&quot;../topics/auth/default#module-django.contrib.auth.views&quot;&gt;&lt;code&gt;django.contrib.auth.views&lt;/code&gt;&lt;/a&gt; views (&lt;code&gt;login&lt;/code&gt;, &lt;code&gt;password_reset_confirm&lt;/code&gt;, &lt;code&gt;password_change&lt;/code&gt;, and &lt;code&gt;add_view&lt;/code&gt; and &lt;code&gt;user_change_password&lt;/code&gt; in the &lt;code&gt;auth&lt;/code&gt; admin) to prevent the leaking of sensitive information such as user passwords.</source>
          <target state="translated">すべてのPOSTパラメータを系統的に特定のエラー報告の除外され&lt;a href=&quot;../topics/auth/default#module-django.contrib.auth.views&quot;&gt; &lt;code&gt;django.contrib.auth.views&lt;/code&gt; の&lt;/a&gt;ビュー（ &lt;code&gt;login&lt;/code&gt; 、 &lt;code&gt;password_reset_confirm&lt;/code&gt; 、 &lt;code&gt;password_change&lt;/code&gt; 、および &lt;code&gt;add_view&lt;/code&gt; と &lt;code&gt;user_change_password&lt;/code&gt; での &lt;code&gt;auth&lt;/code&gt; 、ユーザーパスワードなどの機密情報の漏洩を防止するための管理者）。</target>
        </trans-unit>
        <trans-unit id="0b711e4e0c0aa1b459af24f49b004fe6a8f8910a" translate="yes" xml:space="preserve">
          <source>All aggregates have the &lt;a href=&quot;../../models/querysets#aggregate-filter&quot;&gt;filter&lt;/a&gt; keyword argument.</source>
          <target state="translated">すべての集計には、&lt;a href=&quot;../../models/querysets#aggregate-filter&quot;&gt;filter&lt;/a&gt;キーワード引数があります。</target>
        </trans-unit>
        <trans-unit id="f8d288bc11de64752d70a611e5d42fa8b3b32332" translate="yes" xml:space="preserve">
          <source>All aggregates have the following parameters in common:</source>
          <target state="translated">すべてのアグリゲートには共通して以下のパラメータがあります。</target>
        </trans-unit>
        <trans-unit id="7a23a0a248b43bbcfef231f9bbc931de01093aed" translate="yes" xml:space="preserve">
          <source>All arguments passed to &lt;code&gt;push()&lt;/code&gt; will be passed to the &lt;code&gt;dict&lt;/code&gt; constructor used to build the new context level.</source>
          <target state="translated">&lt;code&gt;push()&lt;/code&gt; に渡されるすべての引数は、新しいコンテキストレベルの構築に使用される &lt;code&gt;dict&lt;/code&gt; コンストラクターに渡されます。</target>
        </trans-unit>
        <trans-unit id="fe5fd9064b79f1bef279924828a3bad888755038" translate="yes" xml:space="preserve">
          <source>All attributes can be set in your derived class and can be used in &lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt;&lt;code&gt;BaseCommand&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;#ref-basecommand-subclasses&quot;&gt;subclasses&lt;/a&gt;.</source>
          <target state="translated">すべての属性は派生クラスで設定でき、&lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt; &lt;code&gt;BaseCommand&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;#ref-basecommand-subclasses&quot;&gt;サブクラスで&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="0a9a5ca4be05a737b99621754bef89baa865d53b" translate="yes" xml:space="preserve">
          <source>All attributes should be considered read-only unless stated otherwise.</source>
          <target state="translated">特に指定がない限り、すべての属性は読み取り専用とみなされるべきです。</target>
        </trans-unit>
        <trans-unit id="3654cf136b268bf0a4f4bf5e1314d277651c1fe1" translate="yes" xml:space="preserve">
          <source>All attributes should be considered read-only, unless stated otherwise.</source>
          <target state="translated">特に明記されていない限り、すべての属性は読み取り専用とみなされるべきです。</target>
        </trans-unit>
        <trans-unit id="6c4a691f96ada2abf291b5d01a2c703144bc487d" translate="yes" xml:space="preserve">
          <source>All authentication views</source>
          <target state="translated">すべての認証ビュー</target>
        </trans-unit>
        <trans-unit id="799abb870d053e1b0e49a20db77bfd8d0926901c" translate="yes" xml:space="preserve">
          <source>All data is now dumped with Unicode. If you need the previous behavior, pass &lt;code&gt;allow_unicode=False&lt;/code&gt; to the &lt;code&gt;serializers.serialize()&lt;/code&gt; function.</source>
          <target state="translated">All data is now dumped with Unicode. If you need the previous behavior, pass &lt;code&gt;allow_unicode=False&lt;/code&gt; to the &lt;code&gt;serializers.serialize()&lt;/code&gt; function.</target>
        </trans-unit>
        <trans-unit id="78dad26e1457753d4c81a5622a385195e1ed4091" translate="yes" xml:space="preserve">
          <source>All data is now dumped with Unicode. If you need the previous behavior, pass &lt;code&gt;ensure_ascii=True&lt;/code&gt; to the &lt;code&gt;serializers.serialize()&lt;/code&gt; function.</source>
          <target state="translated">All data is now dumped with Unicode. If you need the previous behavior, pass &lt;code&gt;ensure_ascii=True&lt;/code&gt; to the &lt;code&gt;serializers.serialize()&lt;/code&gt; function.</target>
        </trans-unit>
        <trans-unit id="9d2cc8e4b1a53e5ff26f7c2253d15ca956b99f0e" translate="yes" xml:space="preserve">
          <source>All examples in the reference below are given for geometry fields and inputs, but the lookups can be used the same way with rasters on both sides. Whenever a lookup doesn&amp;rsquo;t support raster input, the input is automatically converted to a geometry where necessary using the &lt;a href=&quot;https://postgis.net/docs/RT_ST_Polygon.html&quot;&gt;ST_Polygon&lt;/a&gt; function. See also the &lt;a href=&quot;db-api#spatial-lookup-raster&quot;&gt;introduction to raster lookups&lt;/a&gt;.</source>
          <target state="translated">以下のリファレンスのすべての例は、ジオメトリフィールドと入力について提供されていますが、ルックアップは両側のラスターで同じように使用できます。ルックアップがラスター入力をサポートしていない場合は&lt;a href=&quot;https://postgis.net/docs/RT_ST_Polygon.html&quot;&gt;常に&lt;/a&gt;、ST_Polygon関数を使用して、必要に応じて入力が自動的にジオメトリに変換されます。&lt;a href=&quot;db-api#spatial-lookup-raster&quot;&gt;ラスタルックアップの概要&lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="1164b8ae07415e94da9b058be21f6bb9956deb5c" translate="yes" xml:space="preserve">
          <source>All examples in this section use the sample &lt;code&gt;Blog&lt;/code&gt;, &lt;code&gt;Author&lt;/code&gt; and &lt;code&gt;Entry&lt;/code&gt; models defined at the top of this page.</source>
          <target state="translated">このセクションのすべての例では、このページの上部で定義されているサンプルの &lt;code&gt;Blog&lt;/code&gt; 、 &lt;code&gt;Author&lt;/code&gt; 、および &lt;code&gt;Entry&lt;/code&gt; モデルを使用しています。</target>
        </trans-unit>
        <trans-unit id="02c9e7a76c652166d38ab264750ff35c60dc4b46" translate="yes" xml:space="preserve">
          <source>All file upload handlers should be subclasses of &lt;code&gt;django.core.files.uploadhandler.FileUploadHandler&lt;/code&gt;. You can define upload handlers wherever you wish.</source>
          <target state="translated">すべてのファイルアップロードハンドラーは、 &lt;code&gt;django.core.files.uploadhandler.FileUploadHandler&lt;/code&gt; のサブクラスである必要があります。アップロードハンドラはどこにでも定義できます。</target>
        </trans-unit>
        <trans-unit id="19a5a27019567030d2cbca69e09abcfb4975cafd" translate="yes" xml:space="preserve">
          <source>All form classes are created as subclasses of either &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;django.forms.Form&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;django.forms.ModelForm&lt;/code&gt;&lt;/a&gt;. You can think of &lt;code&gt;ModelForm&lt;/code&gt; as a subclass of &lt;code&gt;Form&lt;/code&gt;. &lt;code&gt;Form&lt;/code&gt; and &lt;code&gt;ModelForm&lt;/code&gt; actually inherit common functionality from a (private) &lt;code&gt;BaseForm&lt;/code&gt; class, but this implementation detail is rarely important.</source>
          <target state="translated">すべてのフォームクラスは、&lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt; &lt;code&gt;django.forms.Form&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;django.forms.ModelForm&lt;/code&gt; の&lt;/a&gt;サブクラスとして作成されます。 &lt;code&gt;ModelForm&lt;/code&gt; は &lt;code&gt;Form&lt;/code&gt; のサブクラスと考えることができます。 &lt;code&gt;Form&lt;/code&gt; と &lt;code&gt;ModelForm&lt;/code&gt; は実際には（プライベート） &lt;code&gt;BaseForm&lt;/code&gt; クラスから共通の機能を継承しますが、この実装の詳細が重要になることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="9082a9d4ed7be6ac91a3858cfc8e0d456bc7434e" translate="yes" xml:space="preserve">
          <source>All functions come without default aliases, so you must explicitly provide one. For example:</source>
          <target state="translated">すべての関数はデフォルトのエイリアスを持たないので、明示的にエイリアスを指定する必要があります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="eb8c277929e720d58493dcd7faeaed7ee077a3e1" translate="yes" xml:space="preserve">
          <source>All keyword parameter names are turned to lowercase, and underscores are converted to hyphens.</source>
          <target state="translated">キーワード・パラメータ名はすべて小文字になり、アンダースコアはハイフンに変換されます。</target>
        </trans-unit>
        <trans-unit id="544970aea4074b488ba69731db1254ed617836c1" translate="yes" xml:space="preserve">
          <source>All loggers except &lt;a href=&quot;#django-server-logger&quot;&gt;django.server&lt;/a&gt; propagate logging to their parents, up to the root &lt;code&gt;django&lt;/code&gt; logger. The &lt;code&gt;console&lt;/code&gt; and &lt;code&gt;mail_admins&lt;/code&gt; handlers are attached to the root logger to provide the behavior described above.</source>
          <target state="translated">&lt;a href=&quot;#django-server-logger&quot;&gt;django.server&lt;/a&gt;を除くすべてのロガーは、ルート &lt;code&gt;django&lt;/code&gt; ロガーまで、親にロギングを伝達します。 &lt;code&gt;console&lt;/code&gt; と &lt;code&gt;mail_admins&lt;/code&gt; ハンドラは、上述した動作を提供するためにルートロガーに取り付けられています。</target>
        </trans-unit>
        <trans-unit id="9016f8182d2fe2c55bef97c4e79cb1bf3e62947b" translate="yes" xml:space="preserve">
          <source>All message file repositories are structured the same way. They are:</source>
          <target state="translated">すべてのメッセージファイルリポジトリは同じように構成されています。それらは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="a2a722a87c436c67f4c4024376ede8cce074d719" translate="yes" xml:space="preserve">
          <source>All methods on &lt;code&gt;PreparedGeometry&lt;/code&gt; take an &lt;code&gt;other&lt;/code&gt; argument, which must be a &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">上のすべてのメソッド &lt;code&gt;PreparedGeometry&lt;/code&gt; がかかり &lt;code&gt;other&lt;/code&gt; でなければならない引数、&lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; の&lt;/a&gt;インスタンスを。</target>
        </trans-unit>
        <trans-unit id="dd9bfa9ebbc4d39a8057cc0688dd6cd8bba7bfc3" translate="yes" xml:space="preserve">
          <source>All non-deferred fields of the model are updated to the values currently present in the database.</source>
          <target state="translated">モデルのすべての非参照フィールドは、データベースに現在存在する値に更新されます。</target>
        </trans-unit>
        <trans-unit id="52bd8839678fd66e4de579c13c97026b52a41c70" translate="yes" xml:space="preserve">
          <source>All numeric values are now translated as plural, except &lt;code&gt;1.0&lt;/code&gt; which is translated as a singular phrase. This may be incorrect for some languages.</source>
          <target state="translated">単数のフレーズとして翻訳される &lt;code&gt;1.0&lt;/code&gt; を除いて、すべての数値が複数として翻訳されるようになりました。これは一部の言語では正しくない場合があります。</target>
        </trans-unit>
        <trans-unit id="43879c25ad1f9ff0dbd0dee3407939e60e2d2d88" translate="yes" xml:space="preserve">
          <source>All of Django&amp;rsquo;s built-in fields, such as &lt;a href=&quot;#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;, are particular implementations of &lt;code&gt;Field&lt;/code&gt;. If you need a custom field, you can either subclass any of the built-in fields or write a &lt;code&gt;Field&lt;/code&gt; from scratch. In either case, see &lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;Writing custom model fields&lt;/a&gt;.</source>
          <target state="translated">Djangoのすべての組み込みフィールド（&lt;a href=&quot;#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;など）は、 &lt;code&gt;Field&lt;/code&gt; の特定の実装です。カスタムフィールドが必要な場合は、組み込みフィールドをサブクラス化するか、 &lt;code&gt;Field&lt;/code&gt; を最初から作成できます。どちらの場合でも、&lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;カスタムモデルフィールドの記述を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="4e0d672fbdfd3bd2fd3b9fdc94cd770c410f30ef" translate="yes" xml:space="preserve">
          <source>All of Django&amp;rsquo;s database backends automatically convert strings into the appropriate encoding for talking to the database. They also automatically convert strings retrieved from the database into strings. You don&amp;rsquo;t even need to tell Django what encoding your database uses: that is handled transparently.</source>
          <target state="translated">Djangoのデータベースバックエンドはすべて、文字列をデータベースと通信するための適切なエンコーディングに自動的に変換します。また、データベースから取得した文字列を自動的に文字列に変換します。データベースが使用するエンコーディングをDjangoに通知する必要さえありません。それは透過的に処理されます。</target>
        </trans-unit>
        <trans-unit id="25d8c074531237860e80f6129a0d529bf6a881f2" translate="yes" xml:space="preserve">
          <source>All of Django&amp;rsquo;s fields (and when we say &lt;em&gt;fields&lt;/em&gt; in this document, we always mean model fields and not &lt;a href=&quot;../ref/forms/fields&quot;&gt;form fields&lt;/a&gt;) are subclasses of &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;django.db.models.Field&lt;/code&gt;&lt;/a&gt;. Most of the information that Django records about a field is common to all fields &amp;ndash; name, help text, uniqueness and so forth. Storing all that information is handled by &lt;code&gt;Field&lt;/code&gt;. We&amp;rsquo;ll get into the precise details of what &lt;code&gt;Field&lt;/code&gt; can do later on; for now, suffice it to say that everything descends from &lt;code&gt;Field&lt;/code&gt; and then customizes key pieces of the class behavior.</source>
          <target state="translated">Djangoのすべてのフィールド（このドキュメントで&lt;em&gt;フィールド&lt;/em&gt;と言うときは、常に&lt;a href=&quot;../ref/forms/fields&quot;&gt;フォームフィールド&lt;/a&gt;ではなくモデルフィールドを意味します）は&lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;django.db.models.Field&lt;/code&gt; の&lt;/a&gt;サブクラスです。 Djangoがフィールドについて記録する情報のほとんどは、名前、ヘルプテキスト、一意性など、すべてのフィールドに共通です。そのすべての情報の保存は &lt;code&gt;Field&lt;/code&gt; によって処理されます。 &lt;code&gt;Field&lt;/code&gt; が後でできることの詳細については、後で説明します。ここでは、すべてが &lt;code&gt;Field&lt;/code&gt; から派生し、クラスの動作の主要部分をカスタマイズすると言っておくだけで十分です。</target>
        </trans-unit>
        <trans-unit id="fd788ae21f1d7d0fcd8ae323dc21ea5bbe95d8f5" translate="yes" xml:space="preserve">
          <source>All of the &lt;code&gt;kwargs&lt;/code&gt; dictionary is passed directly to the form field&amp;rsquo;s &lt;code&gt;__init__()&lt;/code&gt; method. Normally, all you need to do is set up a good default for the &lt;code&gt;form_class&lt;/code&gt; (and maybe &lt;code&gt;choices_form_class&lt;/code&gt;) argument and then delegate further handling to the parent class. This might require you to write a custom form field (and even a form widget). See the &lt;a href=&quot;../topics/forms/index&quot;&gt;forms documentation&lt;/a&gt; for information about this.</source>
          <target state="translated">すべての &lt;code&gt;kwargs&lt;/code&gt; 辞書は、フォームフィールドの &lt;code&gt;__init__()&lt;/code&gt; メソッドに直接渡されます。通常、行う必要があるのは、 &lt;code&gt;form_class&lt;/code&gt; （および多分 &lt;code&gt;choices_form_class&lt;/code&gt; ）引数の適切なデフォルトを設定し、その後の処理を親クラスに委任することです。これには、カスタムフォームフィールド（およびフォームウィジェット）の記述が必要になる場合があります。これについては、&lt;a href=&quot;../topics/forms/index&quot;&gt;フォームのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="db95fd1155b2734442bf4a034c402f65a5fac4d4" translate="yes" xml:space="preserve">
          <source>All of the above can be combined to form complex expressions. For such expressions, it can be important to know how the operators are grouped when the expression is evaluated - that is, the precedence rules. The precedence of the operators, from lowest to highest, is as follows:</source>
          <target state="translated">上記のすべてを組み合わせて複雑な式を形成することができます。このような式では、式が評価されるときに演算子がどのようにグループ化されるか、つまり優先順位のルールを知っておくことが重要になります。演算子の優先順位は、低いものから高いものまで、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="90e2cc10b0a5ed4093dc1410275ea6c4e9a947e4" translate="yes" xml:space="preserve">
          <source>All of the built-in Django template tags are safe to use with the cached loader, but if you&amp;rsquo;re using custom template tags that come from third party packages, or that you wrote yourself, you should ensure that the &lt;code&gt;Node&lt;/code&gt; implementation for each tag is thread-safe. For more information, see &lt;a href=&quot;../../howto/custom-template-tags#template-tag-thread-safety&quot;&gt;template tag thread safety considerations&lt;/a&gt;.</source>
          <target state="translated">すべての組み込みDjangoテンプレートタグは、キャッシュされたローダーで安全に使用できますが、サードパーティのパッケージに由来するカスタムテンプレートタグを使用している場合、または独自に作成した場合は、各タグの &lt;code&gt;Node&lt;/code&gt; 実装を確認する必要がありますスレッドセーフです。詳細については、「&lt;a href=&quot;../../howto/custom-template-tags#template-tag-thread-safety&quot;&gt;テンプレートタグのスレッドの安全性に関する考慮事項&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="09975dacc6609e21c13e0ae24e664fb6e20c2dfd" translate="yes" xml:space="preserve">
          <source>All of the cautions in the note for the &lt;a href=&quot;#django.db.models.query.QuerySet.defer&quot;&gt;&lt;code&gt;defer()&lt;/code&gt;&lt;/a&gt; documentation apply to &lt;code&gt;only()&lt;/code&gt; as well. Use it cautiously and only after exhausting your other options.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.query.QuerySet.defer&quot;&gt; &lt;code&gt;defer()&lt;/code&gt; &lt;/a&gt;ドキュメントに関する注意事項のすべての注意は、 &lt;code&gt;only()&lt;/code&gt; にも適用されます。他のオプションを使い果たした後にのみ、慎重に使用してください。</target>
        </trans-unit>
        <trans-unit id="842bb58d8d3fde08f19712960e865ccc82a3b6a4" translate="yes" xml:space="preserve">
          <source>All of the core Django operations are available from the &lt;code&gt;django.db.migrations.operations&lt;/code&gt; module.</source>
          <target state="translated">すべてのコアDjango操作は、 &lt;code&gt;django.db.migrations.operations&lt;/code&gt; モジュールから利用できます。</target>
        </trans-unit>
        <trans-unit id="9fe0461c1dc8f2290a9c15cc547f9e3d24400d21" translate="yes" xml:space="preserve">
          <source>All of the fields of &lt;code&gt;Place&lt;/code&gt; will also be available in &lt;code&gt;Restaurant&lt;/code&gt;, although the data will reside in a different database table. So these are both possible:</source>
          <target state="translated">&lt;code&gt;Place&lt;/code&gt; のすべてのフィールドは &lt;code&gt;Restaurant&lt;/code&gt; でも使用できますが、データは別のデータベーステーブルに存在します。したがって、これらは両方とも可能です。</target>
        </trans-unit>
        <trans-unit id="b101a05b6664afc950679820eed8500bf36c445e" translate="yes" xml:space="preserve">
          <source>All of the following spatial predicate methods take another &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; instance (&lt;code&gt;other&lt;/code&gt;) as a parameter, and return a boolean.</source>
          <target state="translated">以下のすべての空間述語メソッドは、パラメーターとして別の&lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt;インスタンス（ &lt;code&gt;other&lt;/code&gt; ）を取り、ブール値を返します。</target>
        </trans-unit>
        <trans-unit id="f7d8fdc618c1fcb75c91fd91936783ef99cfc1e4" translate="yes" xml:space="preserve">
          <source>All of the generic views listed above have matching &lt;code&gt;Base&lt;/code&gt; views that only differ in that they do not include the &lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectTemplateResponseMixin&quot;&gt;&lt;code&gt;MultipleObjectTemplateResponseMixin&lt;/code&gt;&lt;/a&gt; (for the archive views) or &lt;a href=&quot;mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin&quot;&gt;&lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt;&lt;/a&gt; (for the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DateDetailView&quot;&gt;&lt;code&gt;DateDetailView&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">上記のすべての汎用ビューには、&lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectTemplateResponseMixin&quot;&gt; &lt;code&gt;MultipleObjectTemplateResponseMixin&lt;/code&gt; &lt;/a&gt;（アーカイブビューの場合）または&lt;a href=&quot;mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin&quot;&gt; &lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DateDetailView&quot;&gt; &lt;code&gt;DateDetailView&lt;/code&gt; の場合&lt;/a&gt;）が含まれていないという点でのみ、一致する &lt;code&gt;Base&lt;/code&gt; ビューがあります。</target>
        </trans-unit>
        <trans-unit id="ec3968d8dd3e9c20b69be73031342bec269e973b" translate="yes" xml:space="preserve">
          <source>All of the generic views listed above have matching &lt;code&gt;Base&lt;/code&gt; views that only differ in that they do not include the &lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectTemplateResponseMixin&quot;&gt;&lt;code&gt;MultipleObjectTemplateResponseMixin&lt;/code&gt;&lt;/a&gt; (for the archive views) or &lt;a href=&quot;mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin&quot;&gt;&lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt;&lt;/a&gt; (for the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#DateDetailView&quot;&gt;&lt;code&gt;DateDetailView&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">All of the generic views listed above have matching &lt;code&gt;Base&lt;/code&gt; views that only differ in that they do not include the &lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectTemplateResponseMixin&quot;&gt; &lt;code&gt;MultipleObjectTemplateResponseMixin&lt;/code&gt; &lt;/a&gt; (for the archive views) or &lt;a href=&quot;mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin&quot;&gt; &lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt; &lt;/a&gt; (for the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#DateDetailView&quot;&gt; &lt;code&gt;DateDetailView&lt;/code&gt; &lt;/a&gt;):</target>
        </trans-unit>
        <trans-unit id="993f88424c9eb90136110e3989777865daf81d23" translate="yes" xml:space="preserve">
          <source>All of the options without an explanation in the above list have the same meaning they do for normal Django fields. See the &lt;a href=&quot;../ref/models/fields&quot;&gt;field documentation&lt;/a&gt; for examples and details.</source>
          <target state="translated">上記のリストで説明のないオプションはすべて、通常のDjangoフィールドと同じ意味です。例と詳細については、&lt;a href=&quot;../ref/models/fields&quot;&gt;フィールドのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e9186a35fc6e3bff19ebd7c9ee446a905473d50a" translate="yes" xml:space="preserve">
          <source>All of the range fields translate to &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#adapt-range&quot;&gt;psycopg2 Range objects&lt;/a&gt; in Python, but also accept tuples as input if no bounds information is necessary. The default is lower bound included, upper bound excluded, that is &lt;code&gt;[)&lt;/code&gt; (see the PostgreSQL documentation for details about &lt;a href=&quot;https://www.postgresql.org/docs/current/rangetypes.html#RANGETYPES-IO&quot;&gt;different bounds&lt;/a&gt;).</source>
          <target state="translated">All of the range fields translate to &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#adapt-range&quot;&gt;psycopg2 Range objects&lt;/a&gt; in Python, but also accept tuples as input if no bounds information is necessary. The default is lower bound included, upper bound excluded, that is &lt;code&gt;[)&lt;/code&gt; (see the PostgreSQL documentation for details about &lt;a href=&quot;https://www.postgresql.org/docs/current/rangetypes.html#RANGETYPES-IO&quot;&gt;different bounds&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="624a5a8d10c60270d031b529a547369c7fd64845" translate="yes" xml:space="preserve">
          <source>All of the range fields translate to &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#adapt-range&quot;&gt;psycopg2 Range objects&lt;/a&gt; in Python, but also accept tuples as input if no bounds information is necessary. The default is lower bound included, upper bound excluded; that is, &lt;code&gt;[)&lt;/code&gt;.</source>
          <target state="translated">すべての範囲フィールドは、Pythonでは&lt;a href=&quot;https://www.psycopg.org/docs/extras.html#adapt-range&quot;&gt;psycopg2 Rangeオブジェクト&lt;/a&gt;に変換されますが、境界情報が必要ない場合は、タプルを入力として受け入れます。デフォルトは下限が含まれ、上限が除外されます。つまり、 &lt;code&gt;[)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2902724522b24a6a9baf75157913e5df50ff81cf" translate="yes" xml:space="preserve">
          <source>All of the searching tools provided by &lt;a href=&quot;../../ref/contrib/postgres/index#module-django.contrib.postgres&quot;&gt;&lt;code&gt;django.contrib.postgres&lt;/code&gt;&lt;/a&gt; are constructed entirely on public APIs such as &lt;a href=&quot;../../ref/models/lookups&quot;&gt;custom lookups&lt;/a&gt; and &lt;a href=&quot;../../ref/models/database-functions&quot;&gt;database functions&lt;/a&gt;. Depending on your database, you should be able to construct queries to allow similar APIs. If there are specific things which cannot be achieved this way, please open a ticket.</source>
          <target state="translated">&lt;a href=&quot;../../ref/contrib/postgres/index#module-django.contrib.postgres&quot;&gt; &lt;code&gt;django.contrib.postgres&lt;/code&gt; &lt;/a&gt;が提供するすべての検索ツールは、&lt;a href=&quot;../../ref/models/lookups&quot;&gt;カスタムルックアップ&lt;/a&gt;や&lt;a href=&quot;../../ref/models/database-functions&quot;&gt;データベース関数&lt;/a&gt;などのパブリックAPIで完全に構築されています。データベースによっては、同様のAPIを許可するクエリを作成できる必要があります。この方法で達成できない特定の事項がある場合は、チケットを開いてください。</target>
        </trans-unit>
        <trans-unit id="c98396e0c2b9f2c7ef436c4e1cf9e5f31888c1be" translate="yes" xml:space="preserve">
          <source>All of these &lt;a href=&quot;../../migration-operations&quot;&gt;operations&lt;/a&gt; are available from the &lt;code&gt;django.contrib.postgres.operations&lt;/code&gt; module.</source>
          <target state="translated">これらの&lt;a href=&quot;../../migration-operations&quot;&gt;操作&lt;/a&gt;はすべて、 &lt;code&gt;django.contrib.postgres.operations&lt;/code&gt; モジュールから利用できます。</target>
        </trans-unit>
        <trans-unit id="bf69fe6ddacfc94447bb1654591dc2ef5e20fd2e" translate="yes" xml:space="preserve">
          <source>All of these fields and widgets are available from the &lt;code&gt;django.contrib.postgres.forms&lt;/code&gt; module.</source>
          <target state="translated">これらのフィールドとウィジェットはすべて、 &lt;code&gt;django.contrib.postgres.forms&lt;/code&gt; モジュールから利用できます。</target>
        </trans-unit>
        <trans-unit id="e6c91b1cb74c4317aa449a6be37db052e8b533e8" translate="yes" xml:space="preserve">
          <source>All of these fields are available from the &lt;code&gt;django.contrib.postgres.fields&lt;/code&gt; module.</source>
          <target state="translated">これらのフィールドはすべて、 &lt;code&gt;django.contrib.postgres.fields&lt;/code&gt; モジュールから利用できます。</target>
        </trans-unit>
        <trans-unit id="2acb772d997846489b2b26ab0c755d6580d4b4f6" translate="yes" xml:space="preserve">
          <source>All of these functions are available from the &lt;code&gt;django.contrib.postgres.functions&lt;/code&gt; module.</source>
          <target state="translated">これらの関数はすべて &lt;code&gt;django.contrib.postgres.functions&lt;/code&gt; モジュールから利用できます。</target>
        </trans-unit>
        <trans-unit id="856c715c58d67f1194ee039629e537842d2c1e4d" translate="yes" xml:space="preserve">
          <source>All of these privileges are included in the DBA role, which is appropriate for use on a private developer&amp;rsquo;s database.</source>
          <target state="translated">これらの権限はすべてDBAロールに含まれています。これは、プライベート開発者のデータベースでの使用に適しています。</target>
        </trans-unit>
        <trans-unit id="dbf98850f8f06d736b8ca5f7baec9fbb0a05444b" translate="yes" xml:space="preserve">
          <source>All open tags are closed implicitly, e.g. when a surrounding tag is closed or the HTML document ends.</source>
          <target state="translated">開いているタグはすべて暗黙のうちに閉じられ、例えば、周囲のタグが閉じられたり、HTMLドキュメントが終了したりします。</target>
        </trans-unit>
        <trans-unit id="a0f69135e80ea5c60940b72ac5f763b58088a197" translate="yes" xml:space="preserve">
          <source>All other arguments are passed directly to the constructor of the email backend.</source>
          <target state="translated">他のすべての引数は、メールバックエンドのコンストラクタに直接渡されます。</target>
        </trans-unit>
        <trans-unit id="50e8cd16153274bc54b4af97b232706269c58a27" translate="yes" xml:space="preserve">
          <source>All other parameters are added with their value, after applying &lt;code&gt;str()&lt;/code&gt; to it.</source>
          <target state="translated">他のすべてのパラメータは、それに &lt;code&gt;str()&lt;/code&gt; を適用した後、それらの値とともに追加されます。</target>
        </trans-unit>
        <trans-unit id="4f4fdbbc35fbb9ea3542dc3763d600cc60c72446" translate="yes" xml:space="preserve">
          <source>All parameters should be strings, except &lt;code&gt;categories&lt;/code&gt;, which should be a sequence of strings.</source>
          <target state="translated">すべてのパラメータは除いて、文字列でなければなりません &lt;code&gt;categories&lt;/code&gt; の文字列の順序でなければなりません。</target>
        </trans-unit>
        <trans-unit id="c7f29b7d19514ab25d12772fb55a815025e66f61" translate="yes" xml:space="preserve">
          <source>All parameters should be strings, except &lt;code&gt;categories&lt;/code&gt;, which should be a sequence of strings. Beware that some control characters are &lt;a href=&quot;https://www.w3.org/International/questions/qa-controls&quot;&gt;not allowed&lt;/a&gt; in XML documents. If your content has some of them, you might encounter a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; when producing the feed.</source>
          <target state="translated">すべてのパラメータは除いて、文字列でなければなりません &lt;code&gt;categories&lt;/code&gt; の文字列の順序でなければなりません。XML文書では一部の制御文字が&lt;a href=&quot;https://www.w3.org/International/questions/qa-controls&quot;&gt;許可さ&lt;/a&gt;れないことに注意してください。コンテンツにいくつかある&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;、フィードの作成時にValueErrorが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="4af4dad26ab178c09537c563b2a0614380b4b23a" translate="yes" xml:space="preserve">
          <source>All parameters, if given, should be strings, except:</source>
          <target state="translated">すべてのパラメータは、与えられた場合は文字列でなければなりません。</target>
        </trans-unit>
        <trans-unit id="4a271b4683a28a9fc5a2fc552854a0d231daccb3" translate="yes" xml:space="preserve">
          <source>All paths listed in &lt;a href=&quot;../../ref/settings#std:setting-LOCALE_PATHS&quot;&gt;&lt;code&gt;LOCALE_PATHS&lt;/code&gt;&lt;/a&gt; in your settings file are searched for &lt;code&gt;&amp;lt;language&amp;gt;/LC_MESSAGES/django.(po|mo)&lt;/code&gt;</source>
          <target state="translated">設定ファイルの&lt;a href=&quot;../../ref/settings#std:setting-LOCALE_PATHS&quot;&gt; &lt;code&gt;LOCALE_PATHS&lt;/code&gt; &lt;/a&gt;にリストされているすべてのパスが &lt;code&gt;&amp;lt;language&amp;gt;/LC_MESSAGES/django.(po|mo)&lt;/code&gt; 検索されます</target>
        </trans-unit>
        <trans-unit id="cfc16dbd3530c3abe3050ff2730113eba38dad65" translate="yes" xml:space="preserve">
          <source>All signals are &lt;a href=&quot;#django.dispatch.Signal&quot;&gt;&lt;code&gt;django.dispatch.Signal&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">All signals are &lt;a href=&quot;#django.dispatch.Signal&quot;&gt; &lt;code&gt;django.dispatch.Signal&lt;/code&gt; &lt;/a&gt; instances.</target>
        </trans-unit>
        <trans-unit id="5db8c4111c1c2d8f37d711c7a4555c41dfb63b67" translate="yes" xml:space="preserve">
          <source>All signals are &lt;a href=&quot;#django.dispatch.Signal&quot;&gt;&lt;code&gt;django.dispatch.Signal&lt;/code&gt;&lt;/a&gt; instances. The &lt;code&gt;providing_args&lt;/code&gt; is a list of the names of arguments the signal will provide to listeners. This is purely documentational, however, as there is nothing that checks that the signal actually provides these arguments to its listeners.</source>
          <target state="translated">すべてのシグナルは&lt;a href=&quot;#django.dispatch.Signal&quot;&gt; &lt;code&gt;django.dispatch.Signal&lt;/code&gt; &lt;/a&gt;インスタンスです。 &lt;code&gt;providing_args&lt;/code&gt; は信号がリスナーに提供する引数の名前のリストです。ただし、信号が実際にこれらの引数をリスナーに提供していることを確認するものは何もないため、これは純粋に文書化されています。</target>
        </trans-unit>
        <trans-unit id="c5600e5832db9d352453e1ae0c944a0cb30304f5" translate="yes" xml:space="preserve">
          <source>All string literals are inserted &lt;strong&gt;without&lt;/strong&gt; any automatic escaping into the template &amp;ndash; they act as if they were all passed through the &lt;a href=&quot;builtins#std:templatefilter-safe&quot;&gt;&lt;code&gt;safe&lt;/code&gt;&lt;/a&gt; filter. The reasoning behind this is that the template author is in control of what goes into the string literal, so they can make sure the text is correctly escaped when the template is written.</source>
          <target state="translated">すべての文字列リテラルは、テンプレートへの自動エスケープ&lt;strong&gt;なしに&lt;/strong&gt;挿入されます。これらはすべて、すべて&lt;a href=&quot;builtins#std:templatefilter-safe&quot;&gt; &lt;code&gt;safe&lt;/code&gt; &lt;/a&gt;フィルターを通過したかのように機能します。これの背後にある理由は、テンプレートの作成者が文字列リテラルの内容を制御できるため、テンプレートの作成時にテキストが正しくエスケープされるようにするためです。</target>
        </trans-unit>
        <trans-unit id="eef9606bdef9ac250cca6fae75b8370dda710764" translate="yes" xml:space="preserve">
          <source>All that will be stored in your database is a path to the file (relative to &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt;). You&amp;rsquo;ll most likely want to use the convenience &lt;a href=&quot;#django.db.models.fields.files.FieldFile.url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; attribute provided by Django. For example, if your &lt;a href=&quot;#django.db.models.ImageField&quot;&gt;&lt;code&gt;ImageField&lt;/code&gt;&lt;/a&gt; is called &lt;code&gt;mug_shot&lt;/code&gt;, you can get the absolute path to your image in a template with &lt;code&gt;{{ object.mug_shot.url }}&lt;/code&gt;.</source>
          <target state="translated">データベースに保存されるのは、ファイルへのパス（&lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt;からの相対パス）だけです。ほとんどの場合、Djangoが提供する便利な&lt;a href=&quot;#django.db.models.fields.files.FieldFile.url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt;属性を使用します。あなたの場合たとえば、&lt;a href=&quot;#django.db.models.ImageField&quot;&gt; &lt;code&gt;ImageField&lt;/code&gt; &lt;/a&gt;呼ばれ &lt;code&gt;mug_shot&lt;/code&gt; 、あなたがテンプレートに自分の画像への絶対パスを取得することができます &lt;code&gt;{{ object.mug_shot.url }}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6f2f6ea665148cbc04152358949c5beb998e57ea" translate="yes" xml:space="preserve">
          <source>All the date formatting attributes in these mixins use &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; format characters. Do not try to use the format characters from the &lt;a href=&quot;../templates/builtins#std:templatetag-now&quot;&gt;&lt;code&gt;now&lt;/code&gt;&lt;/a&gt; template tag as they are not compatible.</source>
          <target state="translated">これらのミックスインのすべての日付フォーマット属性は&lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt;フォーマット文字を使用します。&lt;a href=&quot;../templates/builtins#std:templatetag-now&quot;&gt; &lt;code&gt;now&lt;/code&gt; &lt;/a&gt;テンプレートタグのフォーマット文字は互換性がないため、使用しないでください。</target>
        </trans-unit>
        <trans-unit id="8d411a1915cf1d79692f0ecc7eab33f4df58268f" translate="yes" xml:space="preserve">
          <source>All the following querying routines may take either a string IP address or a fully qualified domain name (FQDN). For example, both &lt;code&gt;'205.186.163.125'&lt;/code&gt; and &lt;code&gt;'djangoproject.com'&lt;/code&gt; would be valid query parameters.</source>
          <target state="translated">次のすべてのクエリルーチンは、文字列IPアドレスまたは完全修飾ドメイン名（FQDN）のいずれかを取ります。たとえば、 &lt;code&gt;'205.186.163.125'&lt;/code&gt; と &lt;code&gt;'djangoproject.com'&lt;/code&gt; はどちらも有効なクエリパラメータです。</target>
        </trans-unit>
        <trans-unit id="a23111386f47d33144e97c201e8b2819947440dd" translate="yes" xml:space="preserve">
          <source>All the form&amp;rsquo;s fields and their attributes will be unpacked into HTML markup from that &lt;code&gt;{{ form }}&lt;/code&gt; by Django&amp;rsquo;s template language.</source>
          <target state="translated">フォームのすべてのフィールドとその属性は、Djangoのテンプレート言語によって、その &lt;code&gt;{{ form }}&lt;/code&gt; からHTMLマークアップにアンパックされます。</target>
        </trans-unit>
        <trans-unit id="70f425fb82934c9c3f6ad3e0e4651384ac86ae46" translate="yes" xml:space="preserve">
          <source>All these constructors take the keyword argument &lt;code&gt;srid&lt;/code&gt;. For example:</source>
          <target state="translated">これらのコンストラクタはすべて、キーワード引数 &lt;code&gt;srid&lt;/code&gt; を取ります。例えば：</target>
        </trans-unit>
        <trans-unit id="d93916726c30a4bd59a342267e7e13db2348de5f" translate="yes" xml:space="preserve">
          <source>All three steps are performed when you call a model&amp;rsquo;s &lt;a href=&quot;#django.db.models.Model.full_clean&quot;&gt;&lt;code&gt;full_clean()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">モデルの&lt;a href=&quot;#django.db.models.Model.full_clean&quot;&gt; &lt;code&gt;full_clean()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すと、3つのステップすべてが実行されます。</target>
        </trans-unit>
        <trans-unit id="1f5d1da75bdef06070e1dc5cbe9e56db56806493" translate="yes" xml:space="preserve">
          <source>All types of whitespace are considered equivalent.</source>
          <target state="translated">すべてのタイプのホワイトスペースは同等とみなされます。</target>
        </trans-unit>
        <trans-unit id="960e29b6390375b2975735a4f48891f3bc5ac228" translate="yes" xml:space="preserve">
          <source>All views are &lt;a href=&quot;../class-based-views/index&quot;&gt;class-based&lt;/a&gt;, which allows you to easily customize them by subclassing.</source>
          <target state="translated">すべてのビューは&lt;a href=&quot;../class-based-views/index&quot;&gt;クラスベース&lt;/a&gt;であり、サブクラス化することで簡単にカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="511c46e961182dd1e2188c3056c3fd8298dc280a" translate="yes" xml:space="preserve">
          <source>All writer objects have a &lt;code&gt;write(geom)&lt;/code&gt; method that returns either the WKB or WKT of the given geometry. In addition, &lt;a href=&quot;#django.contrib.gis.geos.WKBWriter&quot;&gt;&lt;code&gt;WKBWriter&lt;/code&gt;&lt;/a&gt; objects also have properties that may be used to change the byte order, and or include the SRID value (in other words, EWKB).</source>
          <target state="translated">すべてのライターオブジェクトには、 &lt;code&gt;write(geom)&lt;/code&gt; れたジオメトリのWKBまたはWKTを返すwrite（geom）メソッドがあります。さらに、&lt;a href=&quot;#django.contrib.gis.geos.WKBWriter&quot;&gt; &lt;code&gt;WKBWriter&lt;/code&gt; &lt;/a&gt;オブジェクトには、バイトオーダーを変更したり、SRID値（つまり、EWKB）を含めたりするために使用できるプロパティもあります。</target>
        </trans-unit>
        <trans-unit id="976206a5e39fc2cd6f46f9358ce379242cf92f7c" translate="yes" xml:space="preserve">
          <source>All you need to do to get your form into a template is to place the form instance into the template context. So if your form is called &lt;code&gt;form&lt;/code&gt; in the context, &lt;code&gt;{{ form }}&lt;/code&gt; will render its &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements appropriately.</source>
          <target state="translated">フォームをテンプレートにするために必要なのは、フォームインスタンスをテンプレートコンテキストに配置することだけです。フォームが呼び出されたのであれば &lt;code&gt;form&lt;/code&gt; のコンテキストで、 &lt;code&gt;{{ form }}&lt;/code&gt; そのレンダリングされます &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; と &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 適切要素を。</target>
        </trans-unit>
        <trans-unit id="42b60e0ae235388663637de3e921a7ed4445dd82" translate="yes" xml:space="preserve">
          <source>Allow certain users to connect to a WebDAV share created with &lt;a href=&quot;https://httpd.apache.org/docs/2.2/mod/mod_dav.html&quot;&gt;mod_dav&lt;/a&gt;.</source>
          <target state="translated">特定のユーザーが&lt;a href=&quot;https://httpd.apache.org/docs/2.2/mod/mod_dav.html&quot;&gt;mod_davで&lt;/a&gt;作成されたWebDAV共有に接続できるようにします。</target>
        </trans-unit>
        <trans-unit id="190d3b06294b0737593e33b2a763d1fcd1eea641" translate="yes" xml:space="preserve">
          <source>Allow the &lt;a href=&quot;templates/api#django.template.context_processors.debug&quot;&gt;&lt;code&gt;debug()&lt;/code&gt;&lt;/a&gt; context processor to add some variables to the template context.</source>
          <target state="translated">許可&lt;a href=&quot;templates/api#django.template.context_processors.debug&quot;&gt; &lt;code&gt;debug()&lt;/code&gt; &lt;/a&gt;コンテキストプロセッサは、テンプレートコンテキストにいくつかの変数を追加します。</target>
        </trans-unit>
        <trans-unit id="66b7cc1827e806b544424c0ff618a3255503780d" translate="yes" xml:space="preserve">
          <source>Allow users to create, update, and delete objects &amp;ndash; with or without authorization.</source>
          <target state="translated">ユーザーがオブジェクトを作成、更新、および削除できるようにします（許可ありまたはなし）。</target>
        </trans-unit>
        <trans-unit id="71a13e3c339e6985292477c95ec07f081b0e242e" translate="yes" xml:space="preserve">
          <source>Allowed HTTP methods</source>
          <target state="translated">許可されている HTTP メソッド</target>
        </trans-unit>
        <trans-unit id="ec83abe710d81428cfbbb0caa76901503f7932b0" translate="yes" xml:space="preserve">
          <source>Allows Django to skip an app&amp;rsquo;s initial migration if all database tables with the names of all models created by all &lt;a href=&quot;migration-operations#django.db.migrations.operations.CreateModel&quot;&gt;&lt;code&gt;CreateModel&lt;/code&gt;&lt;/a&gt; operations in that migration already exist. This option is intended for use when first running migrations against a database that preexisted the use of migrations. This option does not, however, check for matching database schema beyond matching table names and so is only safe to use if you are confident that your existing schema matches what is recorded in your initial migration.</source>
          <target state="translated">その移行のすべての&lt;a href=&quot;migration-operations#django.db.migrations.operations.CreateModel&quot;&gt; &lt;code&gt;CreateModel&lt;/code&gt; &lt;/a&gt;オペレーションによって作成されたすべてのモデルの名前を持つすべてのデータベーステーブルがすでに存在する場合、Djangoがアプリの初期移行をスキップできるようにします。このオプションは、マイグレーションを以前から使用していたデータベースに対してマイグレーションを最初に実行するときに使用することを目的としています。ただし、このオプションは、一致するテーブル名以外の一致するデータベーススキーマをチェックしないため、既存のスキーマが最初の移行で記録されたものと一致することが確実である場合にのみ安全に使用できます。</target>
        </trans-unit>
        <trans-unit id="8f1aa13a48b42ff100decd5fc5ded1a58aa81a1a" translate="yes" xml:space="preserve">
          <source>Allows a user to change their password.</source>
          <target state="translated">ユーザーがパスワードを変更できるようにします。</target>
        </trans-unit>
        <trans-unit id="b6c4b72fea14639d13b981ac1ddbff185022a039" translate="yes" xml:space="preserve">
          <source>Allows a user to reset their password by generating a one-time use link that can be used to reset the password, and sending that link to the user&amp;rsquo;s registered email address.</source>
          <target state="translated">パスワードのリセットに使用できる1回限りのリンクを生成し、そのリンクをユーザーの登録済みメールアドレスに送信することで、ユーザーがパスワードをリセットできるようにします。</target>
        </trans-unit>
        <trans-unit id="9b5db4acef816cc020ffda17473160d626d24626" translate="yes" xml:space="preserve">
          <source>Allows changing a user&amp;rsquo;s password. It prompts you to enter a new password twice for the given user. If the entries are identical, this immediately becomes the new password. If you do not supply a user, the command will attempt to change the password whose username matches the current user.</source>
          <target state="translated">ユーザーのパスワードを変更できます。指定されたユーザーの新しいパスワードを2回入力するように求められます。エントリが同一の場合、これがすぐに新しいパスワードになります。ユーザーを指定しない場合、コマンドはユーザー名が現在のユーザーと一致するパスワードを変更しようとします。</target>
        </trans-unit>
        <trans-unit id="945c742eac538b55929d9c2519561e805d8de9f1" translate="yes" xml:space="preserve">
          <source>Allows creating tables for apps without migrations. While this isn&amp;rsquo;t recommended, the migrations framework is sometimes too slow on large projects with hundreds of models.</source>
          <target state="translated">移行せずにアプリのテーブルを作成できます。これはお勧めできませんが、数百のモデルを持つ大規模なプロジェクトでは、移行フレームワークが遅くなることがあります。</target>
        </trans-unit>
        <trans-unit id="775e744db0d361ad243681079679c9dfe7619701" translate="yes" xml:space="preserve">
          <source>Allows naming the generated migration(s) instead of using a generated name. The name must be a valid Python &lt;a href=&quot;https://docs.python.org/3/reference/lexical_analysis.html#identifiers&quot;&gt;identifier&lt;/a&gt;.</source>
          <target state="translated">生成された名前を使用する代わりに、生成されたマイグレーションに名前を付けることができます。名前は有効なPython &lt;a href=&quot;https://docs.python.org/3/reference/lexical_analysis.html#identifiers&quot;&gt;識別子&lt;/a&gt;である必要があります。</target>
        </trans-unit>
        <trans-unit id="5c5d7a1ae635e28e0843f83610edbf2c00760416" translate="yes" xml:space="preserve">
          <source>Allows running of arbitrary SQL on the database - useful for more advanced features of database backends that Django doesn&amp;rsquo;t support directly, like partial indexes.</source>
          <target state="translated">データベースで任意のSQLを実行できるようにします-部分インデックスのように、Djangoが直接サポートしていないデータベースバックエンドのより高度な機能に役立ちます。</target>
        </trans-unit>
        <trans-unit id="b02cf5fa9d1c920264f9951fc16d8a6144d1a292" translate="yes" xml:space="preserve">
          <source>Allows running of arbitrary SQL on the database - useful for more advanced features of database backends that Django doesn&amp;rsquo;t support directly.</source>
          <target state="translated">Allows running of arbitrary SQL on the database - useful for more advanced features of database backends that Django doesn&amp;rsquo;t support directly.</target>
        </trans-unit>
        <trans-unit id="b3fc80d31ea31c921a37c65daf34995b592e35ee" translate="yes" xml:space="preserve">
          <source>Allows the handler to completely override the parsing of the raw HTTP input.</source>
          <target state="translated">ハンドラが生の HTTP 入力の解析を完全に上書きできるようにします。</target>
        </trans-unit>
        <trans-unit id="eccb9b87175b88b821a7bc4e489d2465a78cb3b9" translate="yes" xml:space="preserve">
          <source>Allows the selection of a single model object, suitable for representing a foreign key. Note that the default widget for &lt;code&gt;ModelChoiceField&lt;/code&gt; becomes impractical when the number of entries increases. You should avoid using it for more than 100 items.</source>
          <target state="translated">外部キーを表すのに適した単一のモデルオブジェクトを選択できます。エントリ数が増えると、 &lt;code&gt;ModelChoiceField&lt;/code&gt; のデフォルトウィジェットが非実用的になることに注意してください。100を超えるアイテムには使用しないでください。</target>
        </trans-unit>
        <trans-unit id="29acfb43849ab9b0daf20cd41edafb3f9243b2d6" translate="yes" xml:space="preserve">
          <source>Allows the selection of one or more model objects, suitable for representing a many-to-many relation. As with &lt;a href=&quot;#django.forms.ModelChoiceField&quot;&gt;&lt;code&gt;ModelChoiceField&lt;/code&gt;&lt;/a&gt;, you can use &lt;code&gt;label_from_instance&lt;/code&gt; to customize the object representations.</source>
          <target state="translated">多対多の関係を表すのに適した、1つ以上のモデルオブジェクトを選択できます。同じように&lt;a href=&quot;#django.forms.ModelChoiceField&quot;&gt; &lt;code&gt;ModelChoiceField&lt;/code&gt; &lt;/a&gt;は、使用することができます &lt;code&gt;label_from_instance&lt;/code&gt; をオブジェクト表現をカスタマイズします。</target>
        </trans-unit>
        <trans-unit id="cc224d0743f2b3f1729cd3289e77a06a12ab78e8" translate="yes" xml:space="preserve">
          <source>Along with another app &lt;code&gt;rare/models.py&lt;/code&gt;:</source>
          <target state="translated">別のアプリ &lt;code&gt;rare/models.py&lt;/code&gt; とともに：</target>
        </trans-unit>
        <trans-unit id="74c6032e98af391fe7bf85d75bccec29ac396723" translate="yes" xml:space="preserve">
          <source>Also as a convenience, the &lt;code&gt;ModelAdmin&lt;/code&gt; object is passed to the &lt;code&gt;lookups&lt;/code&gt; method, for example if you want to base the lookups on the available data:</source>
          <target state="translated">また、便宜上、 &lt;code&gt;ModelAdmin&lt;/code&gt; オブジェクトはlookupsメソッドに渡され &lt;code&gt;lookups&lt;/code&gt; たとえば、使用可能なデータに基づいて検索を行う場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="dccc91e2b5b7283cd7d78d2ca5a8c6c83cdc4461" translate="yes" xml:space="preserve">
          <source>Also consider what you want to happen when the migration is unapplied. You could either do nothing (as in the example above) or remove some or all of the data from the new application. Adjust the second argument of the &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt; operation accordingly.</source>
          <target state="translated">また、移行が適用されていないときに何をしたいかを検討してください。（上記の例のように）何もしないか、新しいアプリケーションから一部またはすべてのデータを削除します。&lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt; &lt;code&gt;RunPython&lt;/code&gt; &lt;/a&gt;操作の2番目の引数を適宜調整します。</target>
        </trans-unit>
        <trans-unit id="079db1f37aab1427fb72df3b03673a8a53beed4e" translate="yes" xml:space="preserve">
          <source>Also make sure that the database user provided in &lt;code&gt;mysite/settings.py&lt;/code&gt; has &amp;ldquo;create database&amp;rdquo; privileges. This allows automatic creation of a &lt;a href=&quot;../topics/testing/overview#the-test-database&quot;&gt;test database&lt;/a&gt; which will be needed in a later tutorial.</source>
          <target state="translated">また、 &lt;code&gt;mysite/settings.py&lt;/code&gt; で提供されているデータベースユーザーに「データベースの作成」権限があることを確認してください。これにより、後のチュートリアルで必要になる&lt;a href=&quot;../topics/testing/overview#the-test-database&quot;&gt;テストデータベース&lt;/a&gt;を自動的に作成できます。</target>
        </trans-unit>
        <trans-unit id="430d3e806bb33f656af3862b5015413135ec86e7" translate="yes" xml:space="preserve">
          <source>Also make sure you&amp;rsquo;ve correctly set &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; to the ID of the site the settings file represents. This will usually be &lt;code&gt;1&lt;/code&gt; (i.e. &lt;code&gt;SITE_ID = 1&lt;/code&gt;, but if you&amp;rsquo;re using the sites framework to manage multiple sites, it could be the ID of a different site.</source>
          <target state="translated">また、&lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt; &lt;code&gt;SITE_ID&lt;/code&gt; &lt;/a&gt;が設定ファイルが表すサイトのIDに正しく設定されていることを確認してください。これは通常 &lt;code&gt;1&lt;/code&gt; です（つまり &lt;code&gt;SITE_ID = 1&lt;/code&gt; ですが、サイトフレームワークを使用して複数のサイトを管理している場合は、別のサイトのIDになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="c8b0b0c45501b28f9ae6548c508388d04ebd9a13" translate="yes" xml:space="preserve">
          <source>Also note that &lt;code&gt;initial&lt;/code&gt; values are &lt;em&gt;not&lt;/em&gt; used as &amp;ldquo;fallback&amp;rdquo; data in validation if a particular field&amp;rsquo;s value is not given. &lt;code&gt;initial&lt;/code&gt; values are &lt;em&gt;only&lt;/em&gt; intended for initial form display:</source>
          <target state="translated">また、特定のフィールドの値が指定されて&lt;em&gt;いない&lt;/em&gt;場合、 &lt;code&gt;initial&lt;/code&gt; 値は検証の「フォールバック」データとして使用され&lt;em&gt;ない&lt;/em&gt;ことにも注意してください。 &lt;code&gt;initial&lt;/code&gt; 値は、初期フォーム表示&lt;em&gt;のみを&lt;/em&gt;目的としています。</target>
        </trans-unit>
        <trans-unit id="be520e4bab7c72fb552c6243756860e284bb3687" translate="yes" xml:space="preserve">
          <source>Also note that &lt;code&gt;items()&lt;/code&gt; also follows the same algorithm &amp;ndash; first, it tries &lt;code&gt;items(obj)&lt;/code&gt;, then &lt;code&gt;items()&lt;/code&gt;, then finally an &lt;code&gt;items&lt;/code&gt; class attribute (which should be a list).</source>
          <target state="translated">また、 &lt;code&gt;items()&lt;/code&gt; も同じアルゴリズムに従います。最初に &lt;code&gt;items(obj)&lt;/code&gt; を試行し、次に &lt;code&gt;items()&lt;/code&gt; を試行し、最後に &lt;code&gt;items&lt;/code&gt; クラス属性（リストでなければなりません）を試行します。</target>
        </trans-unit>
        <trans-unit id="ddd7d3643d00b0897475d780a3c9e83ac347bcfc" translate="yes" xml:space="preserve">
          <source>Also note that Django expects the &lt;code&gt;&quot;%s&quot;&lt;/code&gt; placeholder, &lt;em&gt;not&lt;/em&gt; the &lt;code&gt;&quot;?&quot;&lt;/code&gt; placeholder, which is used by the SQLite Python bindings. This is for the sake of consistency and sanity.</source>
          <target state="translated">また、Djangoは期待していることに注意してください &lt;code&gt;&quot;%s&quot;&lt;/code&gt; 、プレースホルダ&lt;em&gt;ではありません&lt;/em&gt; &lt;code&gt;&quot;?&quot;&lt;/code&gt; SQLite Pythonバインディングで使用されるプレースホルダー。これは一貫性と健全性のためです。</target>
        </trans-unit>
        <trans-unit id="e2634049a3f74c53b08c8960283181a1d277b605" translate="yes" xml:space="preserve">
          <source>Also note that GeoDjango provides a &lt;a href=&quot;../ref/contrib/gis/serializers&quot;&gt;customized GeoJSON serializer&lt;/a&gt;.</source>
          <target state="translated">また、GeoDjangoには&lt;a href=&quot;../ref/contrib/gis/serializers&quot;&gt;カスタマイズされたGeoJSON&lt;/a&gt;シリアライザーが用意されています。</target>
        </trans-unit>
        <trans-unit id="09c5f604de33bd5f14c0e2b803d418d64e00922c" translate="yes" xml:space="preserve">
          <source>Also note that by the time you reach this step, individual model instances have already been created for each &lt;code&gt;Form&lt;/code&gt;. Modifying a value in &lt;code&gt;form.cleaned_data&lt;/code&gt; is not sufficient to affect the saved value. If you wish to modify a value in &lt;code&gt;ModelFormSet.clean()&lt;/code&gt; you must modify &lt;code&gt;form.instance&lt;/code&gt;:</source>
          <target state="translated">また、このステップに到達するまでに、個々のモデルインスタンスが各 &lt;code&gt;Form&lt;/code&gt; に対してすでに作成されていることに注意してください。保存された値に影響を与えるには、 &lt;code&gt;form.cleaned_data&lt;/code&gt; の値を変更するだけでは不十分です。 &lt;code&gt;ModelFormSet.clean()&lt;/code&gt; の値を変更する場合は、 &lt;code&gt;form.instance&lt;/code&gt; を変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="0b6f701f2b5f4527d2271459ed75e2410e4d7a1b" translate="yes" xml:space="preserve">
          <source>Also note that even an uploaded HTML file, since it can be executed by the browser (though not by the server), can pose security threats that are equivalent to XSS or CSRF attacks.</source>
          <target state="translated">また、アップロードされたHTMLファイルであっても、ブラウザによって実行される(サーバによっては実行されない)ため、XSSやCSRF攻撃と同等のセキュリティ上の脅威をもたらす可能性があることにも注意してください。</target>
        </trans-unit>
        <trans-unit id="1f8ddc74def1b0eb285056b958bc6feae34a8858" translate="yes" xml:space="preserve">
          <source>Also note that even though slicing an unevaluated &lt;code&gt;QuerySet&lt;/code&gt; returns another unevaluated &lt;code&gt;QuerySet&lt;/code&gt;, modifying it further (e.g., adding more filters, or modifying ordering) is not allowed, since that does not translate well into SQL and it would not have a clear meaning either.</source>
          <target state="translated">またしても未評価のスライスかかわらず、それを注意して &lt;code&gt;QuerySet&lt;/code&gt; を返す別の未評価の &lt;code&gt;QuerySet&lt;/code&gt; さらにそれを修正する、（例えば、複数のフィルタを追加する、または順序を変更する）ことがSQLにうまく変換されないことから、許可されていません、それはどちらかの明確な意味を持っていないでしょう。</target>
        </trans-unit>
        <trans-unit id="eb1d889432b542300870c076033a0c500c3f32c9" translate="yes" xml:space="preserve">
          <source>Also note that there are special considerations when overriding the &lt;code&gt;clean()&lt;/code&gt; method of a &lt;code&gt;ModelForm&lt;/code&gt; subclass. (see the &lt;a href=&quot;../../topics/forms/modelforms#overriding-modelform-clean-method&quot;&gt;ModelForm documentation&lt;/a&gt; for more information)</source>
          <target state="translated">また、 &lt;code&gt;ModelForm&lt;/code&gt; サブクラスの &lt;code&gt;clean()&lt;/code&gt; メソッドをオーバーライドする場合は、特別な考慮事項があることに注意してください。（詳細については、&lt;a href=&quot;../../topics/forms/modelforms#overriding-modelform-clean-method&quot;&gt;ModelFormのドキュメント&lt;/a&gt;を参照してください）</target>
        </trans-unit>
        <trans-unit id="b337869beeb43597783a966bea73e9d052f4736d" translate="yes" xml:space="preserve">
          <source>Also note that your code should &lt;em&gt;not&lt;/em&gt; import from either &lt;code&gt;global_settings&lt;/code&gt; or your own settings file. &lt;code&gt;django.conf.settings&lt;/code&gt; abstracts the concepts of default settings and site-specific settings; it presents a single interface. It also decouples the code that uses settings from the location of your settings.</source>
          <target state="translated">また、コードは &lt;code&gt;global_settings&lt;/code&gt; または独自の設定ファイルからインポートし&lt;em&gt;ない&lt;/em&gt;でください。 &lt;code&gt;django.conf.settings&lt;/code&gt; はデフォルト設定とサイト固有の設定の概念を抽象化します。単一のインターフェースを提供します。また、設定を使用するコードを、設定の場所から切り離します。</target>
        </trans-unit>
        <trans-unit id="8b29efb6291c296b502920b310ea73c4228fffac" translate="yes" xml:space="preserve">
          <source>Also note the &amp;ldquo;Add Another&amp;rdquo; link next to &amp;ldquo;Question.&amp;rdquo; Every object with a &lt;code&gt;ForeignKey&lt;/code&gt; relationship to another gets this for free. When you click &amp;ldquo;Add Another&amp;rdquo;, you&amp;rsquo;ll get a popup window with the &amp;ldquo;Add question&amp;rdquo; form. If you add a question in that window and click &amp;ldquo;Save&amp;rdquo;, Django will save the question to the database and dynamically add it as the selected choice on the &amp;ldquo;Add choice&amp;rdquo; form you&amp;rsquo;re looking at.</source>
          <target state="translated">また、「質問」の横にある「もう1つ追加」リンクにも注意してください。他のオブジェクトとの &lt;code&gt;ForeignKey&lt;/code&gt; 関係を持つすべてのオブジェクトは、これを無料で取得します。 「別のものを追加」をクリックすると、「質問を追加」フォームのポップアップウィンドウが表示されます。そのウィンドウで質問を追加して[保存]をクリックすると、Djangoは質問をデータベースに保存し、表示している[選択肢を追加]フォームで選択した選択肢として動的に追加します。</target>
        </trans-unit>
        <trans-unit id="bf024fe79e32a8702c4c93dfb2506ad81ad9987b" translate="yes" xml:space="preserve">
          <source>Also note: if you want a user account to be able to create users using the Django admin site, you&amp;rsquo;ll need to give them permission to add users &lt;em&gt;and&lt;/em&gt; change users (i.e., the &amp;ldquo;Add user&amp;rdquo; and &amp;ldquo;Change user&amp;rdquo; permissions). If an account has permission to add users but not to change them, that account won&amp;rsquo;t be able to add users. Why? Because if you have permission to add users, you have the power to create superusers, which can then, in turn, change other users. So Django requires add &lt;em&gt;and&lt;/em&gt; change permissions as a slight security measure.</source>
          <target state="translated">また、ユーザーアカウントでDjango管理サイトを使用してユーザーを作成できるようにしたい場合は、ユーザーを追加したりユーザー&lt;em&gt;を&lt;/em&gt;変更したりするための権限を付与する必要があります（「ユーザーの追加」および「ユーザーの変更」権限など）。 。アカウントにユーザーを追加する権限はあるが変更はできない場合、そのアカウントはユーザーを追加できません。どうして？ユーザーを追加する権限がある場合、スーパーユーザーを作成する権限があり、スーパーユーザーを作成すると、他のユーザーを変更できます。そのため、Djangoでは、わずかなセキュリティ対策として、アクセス許可の追加&lt;em&gt;と&lt;/em&gt;変更が必要です。</target>
        </trans-unit>
        <trans-unit id="696e086368362c2d09106b35b57c47867e028a93" translate="yes" xml:space="preserve">
          <source>Also notice that this isn&amp;rsquo;t a very elegant way of doing publisher-specific books. If we want to add another publisher page, we&amp;rsquo;d need another handful of lines in the URLconf, and more than a few publishers would get unreasonable. We&amp;rsquo;ll deal with this problem in the next section.</source>
          <target state="translated">また、これは出版社固有の本を作成するための非常にエレガントな方法ではないことに注意してください。別のパブリッシャーページを追加する場合は、URLconfに別の数行が必要であり、数を超えるパブリッシャーが不合理になる可能性があります。この問題は次のセクションで扱います。</target>
        </trans-unit>
        <trans-unit id="274f94a8731614b29d48ec0b7318f1b3988943f8" translate="yes" xml:space="preserve">
          <source>Also takes &lt;code&gt;max_length&lt;/code&gt;, &lt;code&gt;min_length&lt;/code&gt;, &lt;code&gt;strip&lt;/code&gt;, and &lt;code&gt;empty_value&lt;/code&gt; which work just as they do for &lt;a href=&quot;#django.forms.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Also takes &lt;code&gt;max_length&lt;/code&gt; , &lt;code&gt;min_length&lt;/code&gt; , &lt;code&gt;strip&lt;/code&gt; , and &lt;code&gt;empty_value&lt;/code&gt; which work just as they do for &lt;a href=&quot;#django.forms.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b9b4efe342a799ea29ae37efd1b65b2539fe6c99" translate="yes" xml:space="preserve">
          <source>Also takes &lt;code&gt;max_length&lt;/code&gt;, &lt;code&gt;min_length&lt;/code&gt;, and &lt;code&gt;strip&lt;/code&gt;, which work just as they do for &lt;a href=&quot;#django.forms.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;max_length&lt;/code&gt; 、 &lt;code&gt;min_length&lt;/code&gt; 、および &lt;code&gt;strip&lt;/code&gt; も取り、これらは&lt;a href=&quot;#django.forms.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; と&lt;/a&gt;同じように機能します。</target>
        </trans-unit>
        <trans-unit id="43d3f0dec8708afadcd4301e960c1f9ba74f008b" translate="yes" xml:space="preserve">
          <source>Also takes some optional arguments:</source>
          <target state="translated">また、いくつかのオプションの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="41e4d1d7bc570080f714dde302cfe63771621c32" translate="yes" xml:space="preserve">
          <source>Also this helper function only serves the actual &lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt; folder; it doesn&amp;rsquo;t perform static files discovery like &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">また、このヘルパー関数は実際の&lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt; &lt;code&gt;STATIC_ROOT&lt;/code&gt; &lt;/a&gt;フォルダーのみを提供します。&lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; の&lt;/a&gt;ような静的ファイルの検出は行いません。</target>
        </trans-unit>
        <trans-unit id="953ccdb4013747658e82aad06c56f0c154c9caf2" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;extra=0&lt;/code&gt; doesn&amp;rsquo;t prevent creation of new model instances as you can &lt;a href=&quot;formsets#understanding-the-managementform&quot;&gt;add additional forms with JavaScript&lt;/a&gt; or send additional POST data. Formsets &lt;a href=&quot;https://code.djangoproject.com/ticket/26142&quot;&gt;don&amp;rsquo;t yet provide functionality&lt;/a&gt; for an &amp;ldquo;edit only&amp;rdquo; view that prevents creation of new instances.</source>
          <target state="translated">また、 &lt;code&gt;extra=0&lt;/code&gt; を指定しても&lt;a href=&quot;formsets#understanding-the-managementform&quot;&gt;、JavaScriptでフォームを追加し&lt;/a&gt;たり、POSTデータを送信したりできるため、新しいモデルインスタンスの作成が妨げられることはありません。フォームセット&lt;a href=&quot;https://code.djangoproject.com/ticket/26142&quot;&gt;は&lt;/a&gt;、新しいインスタンスの作成を防ぐ「編集専用」ビューの機能をまだ提供していません。</target>
        </trans-unit>
        <trans-unit id="a2bd6e68e9d37a21829d8762c978cf7a2c012cf0" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;request.POST&lt;/code&gt; is accessed by &lt;a href=&quot;../../ref/middleware#django.middleware.csrf.CsrfViewMiddleware&quot;&gt;&lt;code&gt;CsrfViewMiddleware&lt;/code&gt;&lt;/a&gt; which is enabled by default. This means you will need to use &lt;a href=&quot;../../ref/csrf#django.views.decorators.csrf.csrf_exempt&quot;&gt;&lt;code&gt;csrf_exempt()&lt;/code&gt;&lt;/a&gt; on your view to allow you to change the upload handlers. You will then need to use &lt;a href=&quot;../../ref/csrf#django.views.decorators.csrf.csrf_protect&quot;&gt;&lt;code&gt;csrf_protect()&lt;/code&gt;&lt;/a&gt; on the function that actually processes the request. Note that this means that the handlers may start receiving the file upload before the CSRF checks have been done. Example code:</source>
          <target state="translated">また、 &lt;code&gt;request.POST&lt;/code&gt; は、デフォルトで有効になっている&lt;a href=&quot;../../ref/middleware#django.middleware.csrf.CsrfViewMiddleware&quot;&gt; &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; &lt;/a&gt;によってアクセスされます。つまり、ビューで&lt;a href=&quot;../../ref/csrf#django.views.decorators.csrf.csrf_exempt&quot;&gt; &lt;code&gt;csrf_exempt()&lt;/code&gt; &lt;/a&gt;を使用して、アップロードハンドラを変更できるようにする必要があります。次に、実際に要求を処理する関数で&lt;a href=&quot;../../ref/csrf#django.views.decorators.csrf.csrf_protect&quot;&gt; &lt;code&gt;csrf_protect()&lt;/code&gt; &lt;/a&gt;を使用する必要があります。これは、CSRFチェックが完了する前にハンドラがファイルのアップロードの受信を開始する可能性があることを意味することに注意してください。コード例：</target>
        </trans-unit>
        <trans-unit id="92a75a0b0baf789cfb6ccc150f550b1442b059a0" translate="yes" xml:space="preserve">
          <source>Also, if you call the database-altering methods &lt;a href=&quot;relations#django.db.models.fields.related.RelatedManager.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;relations#django.db.models.fields.related.RelatedManager.remove&quot;&gt;&lt;code&gt;remove()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;relations#django.db.models.fields.related.RelatedManager.clear&quot;&gt;&lt;code&gt;clear()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;relations#django.db.models.fields.related.RelatedManager.set&quot;&gt;&lt;code&gt;set()&lt;/code&gt;&lt;/a&gt;, on &lt;a href=&quot;relations#django.db.models.fields.related.RelatedManager&quot;&gt;&lt;code&gt;related managers&lt;/code&gt;&lt;/a&gt;, any prefetched cache for the relation will be cleared.</source>
          <target state="translated">お電話の場合も、データベース・変更方法が&lt;a href=&quot;relations#django.db.models.fields.related.RelatedManager.add&quot;&gt; &lt;code&gt;add()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;relations#django.db.models.fields.related.RelatedManager.remove&quot;&gt; &lt;code&gt;remove()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;relations#django.db.models.fields.related.RelatedManager.clear&quot;&gt; &lt;code&gt;clear()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;relations#django.db.models.fields.related.RelatedManager.set&quot;&gt; &lt;code&gt;set()&lt;/code&gt; &lt;/a&gt;、に&lt;a href=&quot;relations#django.db.models.fields.related.RelatedManager&quot;&gt; &lt;code&gt;related managers&lt;/code&gt; &lt;/a&gt;、関係のための任意のプリフェッチされたキャッシュがクリアされます。</target>
        </trans-unit>
        <trans-unit id="698ca776869738d41eaf7a155f51f0e5da884fdc" translate="yes" xml:space="preserve">
          <source>Also, if your search fields include fields that aren&amp;rsquo;t indexed by the database, you might encounter poor performance on extremely large tables.</source>
          <target state="translated">また、検索フィールドにデータベースによってインデックスが作成されていないフィールドが含まれている場合、非常に大きなテーブルではパフォーマンスが低下する可能性があります。</target>
        </trans-unit>
        <trans-unit id="0825e6acbf0d587052cfc960fc478bc68675d460" translate="yes" xml:space="preserve">
          <source>Also, if your template tag creates a new context for performing some sub-rendering, set the auto-escape attribute to the current context&amp;rsquo;s value. The &lt;code&gt;__init__&lt;/code&gt; method for the &lt;code&gt;Context&lt;/code&gt; class takes a parameter called &lt;code&gt;autoescape&lt;/code&gt; that you can use for this purpose. For example:</source>
          <target state="translated">また、テンプレートタグがサブレンダリングを実行するための新しいコンテキストを作成する場合は、auto-escape属性を現在のコンテキストの値に設定します。 &lt;code&gt;Context&lt;/code&gt; クラスの &lt;code&gt;__init__&lt;/code&gt; メソッドは、この目的で使用できる &lt;code&gt;autoescape&lt;/code&gt; というパラメーターを受け取ります。例えば：</target>
        </trans-unit>
        <trans-unit id="92abe54f4e4095755881b3d83e2ca157117e1f06" translate="yes" xml:space="preserve">
          <source>Also, it&amp;rsquo;s an error to call &lt;code&gt;configure()&lt;/code&gt; more than once, or to call &lt;code&gt;configure()&lt;/code&gt; after any setting has been accessed.</source>
          <target state="translated">また、 &lt;code&gt;configure()&lt;/code&gt; を複数回呼び出すか、設定にアクセスした後で &lt;code&gt;configure()&lt;/code&gt; を呼び出すとエラーになります。</target>
        </trans-unit>
        <trans-unit id="de338795c2b16c294f7a41b095d17ca5ed1c7c66" translate="yes" xml:space="preserve">
          <source>Also, note that &lt;code&gt;reverse()&lt;/code&gt; should generally only be called on a &lt;code&gt;QuerySet&lt;/code&gt; which has a defined ordering (e.g., when querying against a model which defines a default ordering, or when using &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt;). If no such ordering is defined for a given &lt;code&gt;QuerySet&lt;/code&gt;, calling &lt;code&gt;reverse()&lt;/code&gt; on it has no real effect (the ordering was undefined prior to calling &lt;code&gt;reverse()&lt;/code&gt;, and will remain undefined afterward).</source>
          <target state="translated">また、 &lt;code&gt;reverse()&lt;/code&gt; は通常、順序が定義されている &lt;code&gt;QuerySet&lt;/code&gt; でのみ呼び出す必要があることに注意してください（たとえば、デフォルトの順序を定義するモデルに対してクエリを実行するとき、または&lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt;を使用するとき）。特定の &lt;code&gt;QuerySet&lt;/code&gt; にそのような順序が定義されていない場合、それに対して &lt;code&gt;reverse()&lt;/code&gt; を呼び出しても実際の効果はありません（順序は &lt;code&gt;reverse()&lt;/code&gt; を呼び出す前は未定義であり、その後は未定義のままになります）。</target>
        </trans-unit>
        <trans-unit id="6564a059141b793de7c4015d115111e5700aa878" translate="yes" xml:space="preserve">
          <source>Also, note the &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting at the top of the file. That holds the names of all Django applications that are activated in this Django instance. Apps can be used in multiple projects, and you can package and distribute them for use by others in their projects.</source>
          <target state="translated">また、ファイルの上部にある&lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;設定に注意してください。これは、このDjangoインスタンスでアクティブ化されるすべてのDjangoアプリケーションの名前を保持します。アプリは複数のプロジェクトで使用でき、他のユーザーがプロジェクトで使用するためにパッケージ化して配布できます。</target>
        </trans-unit>
        <trans-unit id="32fad38c70d331f28b8993769e786f5f8acf6480" translate="yes" xml:space="preserve">
          <source>Also, register the model in the app&amp;rsquo;s &lt;code&gt;admin.py&lt;/code&gt;:</source>
          <target state="translated">また、アプリの &lt;code&gt;admin.py&lt;/code&gt; にモデルを登録します。</target>
        </trans-unit>
        <trans-unit id="47fd7628205150d42e8bf244b355fc6770d7aa52" translate="yes" xml:space="preserve">
          <source>Also, use of &lt;code&gt;iterator()&lt;/code&gt; causes previous &lt;code&gt;prefetch_related()&lt;/code&gt; calls to be ignored since these two optimizations do not make sense together.</source>
          <target state="translated">また、 &lt;code&gt;iterator()&lt;/code&gt; を使用すると、これら2つの最適化は一緒に意味をなさないため、以前の &lt;code&gt;prefetch_related()&lt;/code&gt; 呼び出しは無視されます。</target>
        </trans-unit>
        <trans-unit id="c24b47c5852869dcfdc94dc268593f79c8801929" translate="yes" xml:space="preserve">
          <source>Also, you can easily &lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;write your own custom model fields&lt;/a&gt;.</source>
          <target state="translated">また、&lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;独自のカスタムモデルフィールドを&lt;/a&gt;簡単に作成できます。</target>
        </trans-unit>
        <trans-unit id="fe2f959782b3ac938753e3a5cc6f8e44788d56e9" translate="yes" xml:space="preserve">
          <source>Also, you can give &lt;a href=&quot;#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt; a list of additional processors, using the optional, third positional argument, &lt;code&gt;processors&lt;/code&gt;. In this example, the &lt;a href=&quot;#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt; instance gets an &lt;code&gt;ip_address&lt;/code&gt; variable:</source>
          <target state="translated">また、オプションの3番目の位置引数である &lt;code&gt;processors&lt;/code&gt; を使用して、&lt;a href=&quot;#django.template.RequestContext&quot;&gt; &lt;code&gt;RequestContext&lt;/code&gt; &lt;/a&gt;に追加のプロセッサのリストを与えることができます。この例では、&lt;a href=&quot;#django.template.RequestContext&quot;&gt; &lt;code&gt;RequestContext&lt;/code&gt; &lt;/a&gt;インスタンスが &lt;code&gt;ip_address&lt;/code&gt; 変数を取得します。</target>
        </trans-unit>
        <trans-unit id="d068b3f2fe4f8285a438bec72113e6d9cc12d56b" translate="yes" xml:space="preserve">
          <source>Altering settings at runtime</source>
          <target state="translated">実行時の設定変更</target>
        </trans-unit>
        <trans-unit id="71a869542b89c60e80814055a00906889f48491c" translate="yes" xml:space="preserve">
          <source>Alternative software implementations</source>
          <target state="translated">代替ソフトウェアの実装</target>
        </trans-unit>
        <trans-unit id="6e522f9a7cffe2ed0c63f89a3004cfe45ca65f35" translate="yes" xml:space="preserve">
          <source>Alternative template systems vary in the extent to which they share Django&amp;rsquo;s templating language.</source>
          <target state="translated">代替テンプレートシステムは、Djangoのテンプレート言語を共有する範囲が異なります。</target>
        </trans-unit>
        <trans-unit id="33dcb6032eefd2804d531b416d323ccba2ea1014" translate="yes" xml:space="preserve">
          <source>Alternatively it is possible to register the inclusion tag using a &lt;a href=&quot;../ref/templates/api#django.template.Template&quot;&gt;&lt;code&gt;django.template.Template&lt;/code&gt;&lt;/a&gt; instance:</source>
          <target state="translated">あるいは、&lt;a href=&quot;../ref/templates/api#django.template.Template&quot;&gt; &lt;code&gt;django.template.Template&lt;/code&gt; &lt;/a&gt;インスタンスを使用して、包含タグを登録することもできます。</target>
        </trans-unit>
        <trans-unit id="a7cdd84aa7f928d9cff82ebbc61a89788dc1bc59" translate="yes" xml:space="preserve">
          <source>Alternatively you can use plain text and &lt;a href=&quot;../utils#django.utils.html.escape&quot;&gt;&lt;code&gt;django.utils.html.escape()&lt;/code&gt;&lt;/a&gt; to escape any HTML special characters. Ensure that you escape any help text that may come from untrusted users to avoid a cross-site scripting attack.</source>
          <target state="translated">または、プレーンテキストと&lt;a href=&quot;../utils#django.utils.html.escape&quot;&gt; &lt;code&gt;django.utils.html.escape()&lt;/code&gt; &lt;/a&gt;を使用して、HTMLの特殊文字をエスケープすることもできます。クロスサイトスクリプティング攻撃を回避するために、信頼できないユーザーからのヘルプテキストは必ずエスケープしてください。</target>
        </trans-unit>
        <trans-unit id="2624e15c47d1ca23eaf50d436bb985d27e5220ab" translate="yes" xml:space="preserve">
          <source>Alternatively, it would still be less work than the above approach to have a separate view for processing the form, which could use &lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.FormView&quot;&gt;&lt;code&gt;FormView&lt;/code&gt;&lt;/a&gt; distinct from &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; without concerns.</source>
          <target state="translated">あるいは、フォームを処理するための個別のビューを用意することは、上記のアプローチよりも作業が少なく、&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; とは&lt;/a&gt;異なる&lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.FormView&quot;&gt; &lt;code&gt;FormView&lt;/code&gt; &lt;/a&gt;を問題なく使用できます。</target>
        </trans-unit>
        <trans-unit id="bf935409335b0819ad31fff64ab28b7ddb6d2009" translate="yes" xml:space="preserve">
          <source>Alternatively, it would still be less work than the above approach to have a separate view for processing the form, which could use &lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.FormView&quot;&gt;&lt;code&gt;FormView&lt;/code&gt;&lt;/a&gt; distinct from &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; without concerns.</source>
          <target state="translated">Alternatively, it would still be less work than the above approach to have a separate view for processing the form, which could use &lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.FormView&quot;&gt; &lt;code&gt;FormView&lt;/code&gt; &lt;/a&gt; distinct from &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt; without concerns.</target>
        </trans-unit>
        <trans-unit id="6ceea1051ad37e03b252c47ef8b593e57b8c022b" translate="yes" xml:space="preserve">
          <source>Alternatively, template tag modules can be registered through the &lt;code&gt;'libraries'&lt;/code&gt; argument to &lt;a href=&quot;../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt;. This is useful if you want to use a different label from the template tag module name when loading template tags. It also enables you to register tags without installing an application.</source>
          <target state="translated">または、テンプレートタグモジュールは、&lt;a href=&quot;../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;'libraries'&lt;/code&gt; 引数を介して登録できます。これは、テンプレートタグを読み込むときにテンプレートタグモジュール名とは異なるラベルを使用する場合に便利です。また、アプリケーションをインストールせずにタグを登録することもできます。</target>
        </trans-unit>
        <trans-unit id="ad074627882cec434ab6881802c7f64d46ab69ee" translate="yes" xml:space="preserve">
          <source>Alternatively, you can activate the &lt;a href=&quot;../../ref/templates/api#django.template.context_processors.tz&quot;&gt;&lt;code&gt;tz()&lt;/code&gt;&lt;/a&gt; context processor and use the &lt;code&gt;TIME_ZONE&lt;/code&gt; context variable.</source>
          <target state="translated">または、&lt;a href=&quot;../../ref/templates/api#django.template.context_processors.tz&quot;&gt; &lt;code&gt;tz()&lt;/code&gt; &lt;/a&gt;コンテキストプロセッサをアクティブにして、 &lt;code&gt;TIME_ZONE&lt;/code&gt; コンテキスト変数を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="7d7e1d285de0e8c723c915766ec923e21dec62b3" translate="yes" xml:space="preserve">
          <source>Alternatively, you can create a subclass that sets &lt;code&gt;self.queryset&lt;/code&gt; in &lt;code&gt;__init__&lt;/code&gt;:</source>
          <target state="translated">また、あなたはセットがあること、サブクラスを作成することができます &lt;code&gt;self.queryset&lt;/code&gt; に &lt;code&gt;__init__&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="b9aa58af8effd4d680ef6010538b711b78b68f52" translate="yes" xml:space="preserve">
          <source>Alternatively, you can map fields in the query to model fields using the &lt;code&gt;translations&lt;/code&gt; argument to &lt;code&gt;raw()&lt;/code&gt;. This is a dictionary mapping names of fields in the query to names of fields on the model. For example, the above query could also be written:</source>
          <target state="translated">または、 &lt;code&gt;raw()&lt;/code&gt; の &lt;code&gt;translations&lt;/code&gt; 引数を使用して、クエリのフィールドをモデルフィールドにマップできます。これは、クエリのフィールドの名前をモデルのフィールドの名前にマッピングする辞書です。たとえば、上記のクエリは次のように書くこともできます。</target>
        </trans-unit>
        <trans-unit id="588bd3c0e8ac048379d18ae614bd814abd203833" translate="yes" xml:space="preserve">
          <source>Alternatively, you can pass &lt;code&gt;attach()&lt;/code&gt; three arguments: &lt;code&gt;filename&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt; and &lt;code&gt;mimetype&lt;/code&gt;. &lt;code&gt;filename&lt;/code&gt; is the name of the file attachment as it will appear in the email, &lt;code&gt;content&lt;/code&gt; is the data that will be contained inside the attachment and &lt;code&gt;mimetype&lt;/code&gt; is the optional MIME type for the attachment. If you omit &lt;code&gt;mimetype&lt;/code&gt;, the MIME content type will be guessed from the filename of the attachment.</source>
          <target state="translated">あるいは、 &lt;code&gt;attach()&lt;/code&gt; に 3つの引数を渡すことができます： &lt;code&gt;filename&lt;/code&gt; 、 &lt;code&gt;content&lt;/code&gt; 、 &lt;code&gt;mimetype&lt;/code&gt; 。 &lt;code&gt;filename&lt;/code&gt; は電子メールに表示される添付ファイルの名前、 &lt;code&gt;content&lt;/code&gt; は添付ファイル内に含まれるデータ、 &lt;code&gt;mimetype&lt;/code&gt; は添付ファイルのオプションのMIMEタイプです。 &lt;code&gt;mimetype&lt;/code&gt; を省略すると、MIMEコンテンツタイプは添付ファイルのファイル名から推測されます。</target>
        </trans-unit>
        <trans-unit id="56baacf75a7d1dd4e8e5a5ae7bb58b76cd961ea0" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use &lt;code&gt;save(commit=False)&lt;/code&gt; and manually set any extra required fields:</source>
          <target state="translated">または、 &lt;code&gt;save(commit=False)&lt;/code&gt; を使用して、追加の必須フィールドを手動で設定することもできます。</target>
        </trans-unit>
        <trans-unit id="85fbfeef40e52114cb18912e3180133fb64b164e" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use a &lt;a href=&quot;#django.dispatch.receiver&quot;&gt;&lt;code&gt;receiver()&lt;/code&gt;&lt;/a&gt; decorator:</source>
          <target state="translated">あるいは、&lt;a href=&quot;#django.dispatch.receiver&quot;&gt; &lt;code&gt;receiver()&lt;/code&gt; &lt;/a&gt;デコレーターを使用できます。</target>
        </trans-unit>
        <trans-unit id="d2ab6c8b2d0a505ac8a240c953a735296c8dd0ef" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the &lt;a href=&quot;../topics/templates&quot;&gt;Django template system&lt;/a&gt; to generate CSV. This is lower-level than using the convenient Python &lt;a href=&quot;https://docs.python.org/3/library/csv.html#module-csv&quot;&gt;&lt;code&gt;csv&lt;/code&gt;&lt;/a&gt; module, but the solution is presented here for completeness.</source>
          <target state="translated">または、&lt;a href=&quot;../topics/templates&quot;&gt;Djangoテンプレートシステム&lt;/a&gt;を使用してCSVを生成することもできます。これは、便利なPython &lt;a href=&quot;https://docs.python.org/3/library/csv.html#module-csv&quot;&gt; &lt;code&gt;csv&lt;/code&gt; &lt;/a&gt;モジュールを使用するよりもレベルが低くなりますが、完全を期すためにここにソリューションを示します。</target>
        </trans-unit>
        <trans-unit id="27e398202050801cd681b4055b573026e175814f" translate="yes" xml:space="preserve">
          <source>Alternatively, you may alter an existing user&amp;rsquo;s role from the SQL shell (assuming this is done from an existing superuser account):</source>
          <target state="translated">または、SQLシェルから既存のユーザーのロールを変更することもできます（これが既存のスーパーユーザーアカウントから行われると想定）。</target>
        </trans-unit>
        <trans-unit id="0abe152a51938c05079be6a7f31d395c658aeab4" translate="yes" xml:space="preserve">
          <source>Alternatively, you may have a complex Python object that can somehow be serialized to fit into a standard database column type. This is another case where a &lt;code&gt;Field&lt;/code&gt; subclass will help you use your object with your models.</source>
          <target state="translated">または、標準のデータベース列タイプに適合するようにシリアル化できる複雑なPythonオブジェクトがある場合があります。これは、 &lt;code&gt;Field&lt;/code&gt; サブクラスがモデルでオブジェクトを使用するのに役立つ別のケースです。</target>
        </trans-unit>
        <trans-unit id="d22e73a36ee72142b9710c6f598b2fa17ad341ae" translate="yes" xml:space="preserve">
          <source>Alternatively, your filter code can manually take care of any necessary escaping. This is necessary when you&amp;rsquo;re introducing new HTML markup into the result. You want to mark the output as safe from further escaping so that your HTML markup isn&amp;rsquo;t escaped further, so you&amp;rsquo;ll need to handle the input yourself.</source>
          <target state="translated">または、フィルターコードは、必要なエスケープを手動で処理できます。これは、結果に新しいHTMLマークアップを導入するときに必要です。HTMLマークアップがそれ以上エスケープされないように、さらにエスケープしないように出力にマークを付けたいので、自分で入力を処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="ea10ad892df4bcea34e41f944c0cec79f52baaf9" translate="yes" xml:space="preserve">
          <source>Alternatives to Django&amp;rsquo;s template language</source>
          <target state="translated">Djangoのテンプレート言語の代替</target>
        </trans-unit>
        <trans-unit id="ae3e5f3db33e272b63b1b64732ee7fcd4f54eb4b" translate="yes" xml:space="preserve">
          <source>Alters a field&amp;rsquo;s definition, including changes to its type, &lt;a href=&quot;models/fields#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;models/fields#django.db.models.Field.unique&quot;&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;models/fields#django.db.models.Field.db_column&quot;&gt;&lt;code&gt;db_column&lt;/code&gt;&lt;/a&gt; and other field attributes.</source>
          <target state="translated">タイプの変更、&lt;a href=&quot;models/fields#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;models/fields#django.db.models.Field.unique&quot;&gt; &lt;code&gt;unique&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;models/fields#django.db.models.Field.db_column&quot;&gt; &lt;code&gt;db_column&lt;/code&gt; &lt;/a&gt;およびその他のフィールド属性を含む、フィールドの定義を変更します。</target>
        </trans-unit>
        <trans-unit id="e5910625172e9af95bdd7fc7ab84528f5d87198e" translate="yes" xml:space="preserve">
          <source>Alters the managers that are available during migrations.</source>
          <target state="translated">移行中に利用できるマネージャーを変更します。</target>
        </trans-unit>
        <trans-unit id="36a270dcb3503dfb775409cd7f97e05895cb28d0" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; output is the default output style when you &lt;code&gt;print&lt;/code&gt; a form, other output styles are available. Each style is available as a method on a form object, and each rendering method returns a string.</source>
          <target state="translated">が &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 、出力はデフォルトの出力形式で &lt;code&gt;print&lt;/code&gt; フォームは、他の出力のスタイルが用意されています。各スタイルはフォームオブジェクトのメソッドとして使用でき、各レンダリングメソッドは文字列を返します。</target>
        </trans-unit>
        <trans-unit id="f1d6bdab964b21813432d1c5afef320356d65640" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;reporter.stories_filed = F('stories_filed') + 1&lt;/code&gt; looks like a normal Python assignment of value to an instance attribute, in fact it&amp;rsquo;s an SQL construct describing an operation on the database.</source>
          <target state="translated">が &lt;code&gt;reporter.stories_filed = F('stories_filed') + 1&lt;/code&gt; インスタンスの属性に値を通常のPythonの割り当てのように見え、実際にはデータベース上の動作を説明するSQL構文です。</target>
        </trans-unit>
        <trans-unit id="eb73c88f5f50706eae03b23bf2627359294c5bf9" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;select_for_update()&lt;/code&gt; normally fails in autocommit mode, since &lt;a href=&quot;../../topics/testing/tools#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; automatically wraps each test in a transaction, calling &lt;code&gt;select_for_update()&lt;/code&gt; in a &lt;code&gt;TestCase&lt;/code&gt; even outside an &lt;a href=&quot;../../topics/db/transactions#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; block will (perhaps unexpectedly) pass without raising a &lt;code&gt;TransactionManagementError&lt;/code&gt;. To properly test &lt;code&gt;select_for_update()&lt;/code&gt; you should use &lt;a href=&quot;../../topics/testing/tools#django.test.TransactionTestCase&quot;&gt;&lt;code&gt;TransactionTestCase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">が &lt;code&gt;select_for_update()&lt;/code&gt; ので、通常、自動コミット・モードで失敗した&lt;a href=&quot;../../topics/testing/tools#django.test.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;自動的に呼び出して、トランザクション内の各テストをラップ &lt;code&gt;select_for_update()&lt;/code&gt; で &lt;code&gt;TestCase&lt;/code&gt; も外側&lt;a href=&quot;../../topics/db/transactions#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt;おそらく予想外に）上昇させることなく通過するブロックを &lt;code&gt;TransactionManagementError&lt;/code&gt; を。 &lt;code&gt;select_for_update()&lt;/code&gt; を適切にテストするには、&lt;a href=&quot;../../topics/testing/tools#django.test.TransactionTestCase&quot;&gt; &lt;code&gt;TransactionTestCase&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="17d2e7a0d393b7d56d8a593921880b94e217792b" translate="yes" xml:space="preserve">
          <source>Although Python provides a mail sending interface via the &lt;a href=&quot;https://docs.python.org/3/library/smtplib.html#module-smtplib&quot;&gt;&lt;code&gt;smtplib&lt;/code&gt;&lt;/a&gt; module, Django provides a couple of light wrappers over it. These wrappers are provided to make sending email extra quick, to help test email sending during development, and to provide support for platforms that can&amp;rsquo;t use SMTP.</source>
          <target state="translated">Pythonは&lt;a href=&quot;https://docs.python.org/3/library/smtplib.html#module-smtplib&quot;&gt; &lt;code&gt;smtplib&lt;/code&gt; &lt;/a&gt;モジュールを介してメール送信インターフェイスを提供しますが、Djangoはその上にいくつかの簡単なラッパーを提供します。これらのラッパーは、電子メールの送信を迅速に行うため、開発中の電子メール送信のテストを支援するため、およびSMTPを使用できないプラットフォームのサポートを提供するために提供されています。</target>
        </trans-unit>
        <trans-unit id="ad28848e7e3de4d9e1c1d1e1c78fd615e37e0584" translate="yes" xml:space="preserve">
          <source>Although it&amp;rsquo;s not required that you use the sites framework, it&amp;rsquo;s strongly encouraged, because Django takes advantage of it in a few places. Even if your Django installation is powering only a single site, you should take the two seconds to create the site object with your &lt;code&gt;domain&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;, and point to its ID in your &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">サイトフレームワークを使用する必要はありませんが、Djangoはいくつかの場所でそれを利用しているため、強くお勧めします。インストールされているDjangoが単一のサイトのみに電力を供給している場合でも、 &lt;code&gt;domain&lt;/code&gt; と &lt;code&gt;name&lt;/code&gt; でサイトオブジェクトを作成し、&lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt; &lt;code&gt;SITE_ID&lt;/code&gt; &lt;/a&gt;設定でそのIDをポイントするのに2秒かかります。</target>
        </trans-unit>
        <trans-unit id="194869c1637c7a1a85b3692422964d84722a7385" translate="yes" xml:space="preserve">
          <source>Although macOS comes with Python installed, users can use &lt;a href=&quot;https://www.python.org/ftp/python/&quot;&gt;framework installers&lt;/a&gt; provided by the Python Software Foundation. An advantage to using the installer is that macOS&amp;rsquo;s Python will remain &amp;ldquo;pristine&amp;rdquo; for internal operating system use.</source>
          <target state="translated">macOSにはPythonがインストールされていますが、ユーザーはPython Software Foundationが提供する&lt;a href=&quot;https://www.python.org/ftp/python/&quot;&gt;フレームワークインストーラー&lt;/a&gt;を使用できます。インストーラーを使用する利点は、macOSのPythonが内部オペレーティングシステムで使用するために「元の状態」のままであることです。</target>
        </trans-unit>
        <trans-unit id="df04fcbdb047e55419855b5e1f2c6a44d972baa7" translate="yes" xml:space="preserve">
          <source>Although some commands may allow their own custom options, every command allows for the following options:</source>
          <target state="translated">いくつかのコマンドは独自のカスタムオプションを許可していますが、すべてのコマンドは以下のオプションを許可しています。</target>
        </trans-unit>
        <trans-unit id="25e537bbf3b1fe34054d4a0be78f060d686c2d47" translate="yes" xml:space="preserve">
          <source>Although the above example would work in the Python interactive interpreter, some of the test client&amp;rsquo;s functionality, notably the template-related functionality, is only available &lt;em&gt;while tests are running&lt;/em&gt;.</source>
          <target state="translated">上記の例はPythonインタラクティブインタープリターで機能しますが、テストクライアントの機能の一部、特にテンプレート関連の機能は、&lt;em&gt;テストの実行中に&lt;/em&gt;のみ使用できます。</target>
        </trans-unit>
        <trans-unit id="642aada3b4dd7550553bdd48221f14037a9e70d5" translate="yes" xml:space="preserve">
          <source>Although the module is named &lt;code&gt;gdal&lt;/code&gt;, GeoDjango only supports some of the capabilities of OGR and GDAL&amp;rsquo;s raster features at this time.</source>
          <target state="translated">モジュールの名前は &lt;code&gt;gdal&lt;/code&gt; ですが、現時点では、GeoDjangoはOGRおよびGDALのラスター機能の一部のみをサポートしています。</target>
        </trans-unit>
        <trans-unit id="83f5a70b7b65e453c2f6735c339756076fead2b2" translate="yes" xml:space="preserve">
          <source>Although the primary way you&amp;rsquo;ll use &lt;code&gt;Field&lt;/code&gt; classes is in &lt;code&gt;Form&lt;/code&gt; classes, you can also instantiate them and use them directly to get a better idea of how they work. Each &lt;code&gt;Field&lt;/code&gt; instance has a &lt;code&gt;clean()&lt;/code&gt; method, which takes a single argument and either raises a &lt;code&gt;django.core.exceptions.ValidationError&lt;/code&gt; exception or returns the clean value:</source>
          <target state="translated">Although the primary way you&amp;rsquo;ll use &lt;code&gt;Field&lt;/code&gt; classes is in &lt;code&gt;Form&lt;/code&gt; classes, you can also instantiate them and use them directly to get a better idea of how they work. Each &lt;code&gt;Field&lt;/code&gt; instance has a &lt;code&gt;clean()&lt;/code&gt; method, which takes a single argument and either raises a &lt;code&gt;django.core.exceptions.ValidationError&lt;/code&gt; exception or returns the clean value:</target>
        </trans-unit>
        <trans-unit id="bee4b6c86d4b5ab7cb7d3c1c53cb24d37af0da9f" translate="yes" xml:space="preserve">
          <source>Although the primary way you&amp;rsquo;ll use &lt;code&gt;Field&lt;/code&gt; classes is in &lt;code&gt;Form&lt;/code&gt; classes, you can also instantiate them and use them directly to get a better idea of how they work. Each &lt;code&gt;Field&lt;/code&gt; instance has a &lt;code&gt;clean()&lt;/code&gt; method, which takes a single argument and either raises a &lt;code&gt;django.forms.ValidationError&lt;/code&gt; exception or returns the clean value:</source>
          <target state="translated">&lt;code&gt;Field&lt;/code&gt; クラスを使用する主な方法は &lt;code&gt;Form&lt;/code&gt; クラス内ですが、インスタンス化して直接使用して、それらがどのように機能するかをよりよく理解することもできます。各 &lt;code&gt;Field&lt;/code&gt; インスタンスには &lt;code&gt;clean()&lt;/code&gt; メソッドがあり、単一の引数を取り、 &lt;code&gt;django.forms.ValidationError&lt;/code&gt; 例外を発生させるか、クリーンな値を返します。</target>
        </trans-unit>
        <trans-unit id="6226386795c943c9b1edd5627cd66bae7276a870" translate="yes" xml:space="preserve">
          <source>Although the setting offers little practical benefit, it&amp;rsquo;s sometimes required by security auditors.</source>
          <target state="translated">この設定では実用的なメリットはほとんどありませんが、セキュリティ監査人が必要とする場合があります。</target>
        </trans-unit>
        <trans-unit id="7668db2531ca50b0b25171433eb3dcb36b9e4815" translate="yes" xml:space="preserve">
          <source>Although there is no built-in method for copying model instances, it is possible to easily create new instance with all fields&amp;rsquo; values copied. In the simplest case, you can set &lt;code&gt;pk&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt;. Using our blog example:</source>
          <target state="translated">モデルインスタンスをコピーするための組み込みメソッドはありませんが、すべてのフィールドの値がコピーされた新しいインスタンスを簡単に作成できます。最も単純なケースでは、 &lt;code&gt;pk&lt;/code&gt; を &lt;code&gt;None&lt;/code&gt; に設定できます。ブログの例を使用：</target>
        </trans-unit>
        <trans-unit id="e224421f07b0d6dcb4559fde5db93254f751573e" translate="yes" xml:space="preserve">
          <source>Although you can access model classes as described above, avoid interacting with the database in your &lt;a href=&quot;#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt; implementation. This includes model methods that execute queries (&lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;models/instances#django.db.models.Model.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt;, manager methods etc.), and also raw SQL queries via &lt;code&gt;django.db.connection&lt;/code&gt;. Your &lt;a href=&quot;#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt; method will run during startup of every management command. For example, even though the test database configuration is separate from the production settings, &lt;code&gt;manage.py test&lt;/code&gt; would still execute some queries against your &lt;strong&gt;production&lt;/strong&gt; database!</source>
          <target state="translated">上記のようにモデルクラスにアクセスできますが、&lt;a href=&quot;#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt;実装でデータベースと対話することは避けてください。これには、クエリを実行するモデルメソッド（&lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;models/instances#django.db.models.Model.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt;、マネージャーメソッドなど）、および &lt;code&gt;django.db.connection&lt;/code&gt; を介した生のSQLクエリが含まれます。あなたの&lt;a href=&quot;#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt;メソッドは、すべての管理コマンドの起動時に実行されます。たとえば、テストデータベースの設定が本番設定とは別であっても、 &lt;code&gt;manage.py test&lt;/code&gt; は&lt;strong&gt;本番&lt;/strong&gt;データベースに対していくつかのクエリを実行します。</target>
        </trans-unit>
        <trans-unit id="61b75b8d0b36d72cb541a55f1994f7c38a8ead9d" translate="yes" xml:space="preserve">
          <source>Although you can pass any number of arguments to a template tag using &lt;code&gt;token.split_contents()&lt;/code&gt;, the arguments are all unpacked as string literals. A little more work is required in order to pass dynamic content (a template variable) to a template tag as an argument.</source>
          <target state="translated">&lt;code&gt;token.split_contents()&lt;/code&gt; を使用してテンプレートタグに任意の数の引数を渡すことができますが、引数はすべて文字列リテラルとしてアンパックされます。動的コンテンツ（テンプレート変数）を引数としてテンプレートタグに渡すには、もう少し作業が必要です。</target>
        </trans-unit>
        <trans-unit id="a1a76598ce45e214be02b0c1dad6e5cccdb65e6a" translate="yes" xml:space="preserve">
          <source>Although you can use Django without a database, it comes with an &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;object-relational mapper&lt;/a&gt; in which you describe your database layout in Python code.</source>
          <target state="translated">データベースなしでDjangoを使用することもできますが、Pythonコードでデータベースレイアウトを記述する&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;オブジェクトリレーショナルマッパー&lt;/a&gt;が付属しています。</target>
        </trans-unit>
        <trans-unit id="3f2946c2a1c3d3fb758114cb91b72f1c7ecc85a0" translate="yes" xml:space="preserve">
          <source>Although you can&amp;rsquo;t import models at the module-level where &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; classes are defined, you can import them in &lt;code&gt;ready()&lt;/code&gt;, using either an &lt;code&gt;import&lt;/code&gt; statement or &lt;a href=&quot;#django.apps.AppConfig.get_model&quot;&gt;&lt;code&gt;get_model()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt;クラスが定義されているモジュールレベルではモデルをインポートできませんが、 &lt;code&gt;import&lt;/code&gt; ステートメントまたは&lt;a href=&quot;#django.apps.AppConfig.get_model&quot;&gt; &lt;code&gt;get_model()&lt;/code&gt; &lt;/a&gt;を使用して、それらを &lt;code&gt;ready()&lt;/code&gt; でインポートできます。</target>
        </trans-unit>
        <trans-unit id="2c9d48b83bada6a5ee76fb5e0fea2eab96528d7e" translate="yes" xml:space="preserve">
          <source>Although you might think about storing files in the database, consider that it is bad design in 99% of the cases. This field is &lt;em&gt;not&lt;/em&gt; a replacement for proper &lt;a href=&quot;../../howto/static-files/index&quot;&gt;static files&lt;/a&gt; handling.</source>
          <target state="translated">データベースにファイルを保存することを考えるかもしれませんが、99％のケースでは設計が悪いと考えてください。このフィールドは、適切な&lt;a href=&quot;../../howto/static-files/index&quot;&gt;静的ファイル&lt;/a&gt;処理の代わりにはなり&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="67df2de3326ef19fc04ce801e27ed4b4b8fad0ec" translate="yes" xml:space="preserve">
          <source>Always &lt;code&gt;False&lt;/code&gt;. This method makes an &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; instance a stream-like object.</source>
          <target state="translated">常に &lt;code&gt;False&lt;/code&gt; です。このメソッドは、&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;インスタンスをストリームのようなオブジェクトにします。</target>
        </trans-unit>
        <trans-unit id="4686e5206fe2cbfcf5605c9202da330b22ccc178" translate="yes" xml:space="preserve">
          <source>Always &lt;code&gt;True&lt;/code&gt;. This method makes an &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; instance a stream-like object.</source>
          <target state="translated">常に &lt;code&gt;True&lt;/code&gt; です。このメソッドは、&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;インスタンスをストリームのようなオブジェクトにします。</target>
        </trans-unit>
        <trans-unit id="125a4148526d3132ede8f973cff78ac6a82e0dff" translate="yes" xml:space="preserve">
          <source>Always prefer &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; if possible at all. It accounts for the idiosyncrasies of each database and prevents invalid operations.</source>
          <target state="translated">可能であれば、常に&lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; を&lt;/a&gt;優先してください。各データベースの特異性を考慮し、無効な操作を防止します。</target>
        </trans-unit>
        <trans-unit id="92aeab1f6ae301136883fbf61b508354c6a1d03b" translate="yes" xml:space="preserve">
          <source>Always refer to the documentation that corresponds to the version of Django you&amp;rsquo;re using!</source>
          <target state="translated">常に、使用しているDjangoのバージョンに対応するドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="5e36151c5431caa487785143303f4667f6105373" translate="yes" xml:space="preserve">
          <source>Always return strings from a template tag&amp;rsquo;s &lt;code&gt;render()&lt;/code&gt; method and from template filters.</source>
          <target state="translated">テンプレートタグの &lt;code&gt;render()&lt;/code&gt; メソッドおよびテンプレートフィルターから常に文字列を返します。</target>
        </trans-unit>
        <trans-unit id="e129e2c256cac5a202052b90d6f48444141571d0" translate="yes" xml:space="preserve">
          <source>Always use &lt;code&gt;params&lt;/code&gt; instead of embedding values directly into &lt;code&gt;where&lt;/code&gt; because &lt;code&gt;params&lt;/code&gt; will ensure values are quoted correctly according to your particular backend. For example, quotes will be escaped correctly.</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; は特定のバックエンドに応じて値が正しく引用されるようにするため、値を直接 &lt;code&gt;where&lt;/code&gt; に埋め込むのではなく、常に &lt;code&gt;params&lt;/code&gt; を使用します。たとえば、引用符は正しくエスケープされます。</target>
        </trans-unit>
        <trans-unit id="1509c95c0c093c1fb332475c1de5de599eb6a97d" translate="yes" xml:space="preserve">
          <source>Amend URLconf</source>
          <target state="translated">URLconf を修正します。</target>
        </trans-unit>
        <trans-unit id="d0797826ea1aa534137aa2c3b4982212038f9bbc" translate="yes" xml:space="preserve">
          <source>Amend views</source>
          <target state="translated">ビューを変更する</target>
        </trans-unit>
        <trans-unit id="98cb3586308743cf6fabda4d4ef48767bd8f9376" translate="yes" xml:space="preserve">
          <source>Among Django&amp;rsquo;s built-in database backends, MySQL 8.0.2+, PostgreSQL, and Oracle support window expressions. Support for different window expression features varies among the different databases. For example, the options in &lt;a href=&quot;#django.db.models.Expression.asc&quot;&gt;&lt;code&gt;asc()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.Expression.desc&quot;&gt;&lt;code&gt;desc()&lt;/code&gt;&lt;/a&gt; may not be supported. Consult the documentation for your database as needed.</source>
          <target state="translated">Djangoの組み込みデータベースバックエンドの中で、MySQL 8.0.2 +、PostgreSQL、Oracleはウィンドウ式をサポートしています。さまざまなウィンドウ式機能のサポートは、データベースによって異なります。たとえば、&lt;a href=&quot;#django.db.models.Expression.asc&quot;&gt; &lt;code&gt;asc()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#django.db.models.Expression.desc&quot;&gt; &lt;code&gt;desc()&lt;/code&gt; &lt;/a&gt;のオプションはサポートされない場合があります。必要に応じて、データベースのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="dc2ba95fda99894557e8f895c4b9ab687f5bc290" translate="yes" xml:space="preserve">
          <source>Among other things, the default logging configuration passes HTTP 500 server errors to an email log handler when &lt;a href=&quot;#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;. See also &lt;a href=&quot;../topics/logging#configuring-logging&quot;&gt;Configuring logging&lt;/a&gt;.</source>
          <target state="translated">特に、デフォルトのログ設定では、&lt;a href=&quot;#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;False&lt;/code&gt; の場合、HTTP 500サーバーエラーがメールログハンドラーに渡されます。&lt;a href=&quot;../topics/logging#configuring-logging&quot;&gt;ロギングの設定&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="f5dfcb63505f909d2e384679116d111c4e9c2d49" translate="yes" xml:space="preserve">
          <source>An &amp;ldquo;exact&amp;rdquo; match. For example:</source>
          <target state="translated">「完全な」一致。例えば：</target>
        </trans-unit>
        <trans-unit id="6f863f157d9803f99f181e74a12c7d7d120b7259" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#django.core.validators.EmailValidator&quot;&gt;&lt;code&gt;EmailValidator&lt;/code&gt;&lt;/a&gt; instance without any customizations.</source>
          <target state="translated">アン&lt;a href=&quot;#django.core.validators.EmailValidator&quot;&gt; &lt;code&gt;EmailValidator&lt;/code&gt; の&lt;/a&gt;すべてのカスタマイズなしのインスタンス。</target>
        </trans-unit>
        <trans-unit id="2c68635b466c4a39a19dd05df8c021ee90a24ffd" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt; that automatically increments according to available IDs. You usually won&amp;rsquo;t need to use this directly; a primary key field will automatically be added to your model if you don&amp;rsquo;t specify otherwise. See &lt;a href=&quot;../../topics/db/models#automatic-primary-key-fields&quot;&gt;Automatic primary key fields&lt;/a&gt;.</source>
          <target state="translated">使用可能なIDに従って自動的に増分する&lt;a href=&quot;#django.db.models.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; &lt;/a&gt;。通常、これを直接使用する必要はありません。特に指定しない場合は、主キーフィールドが自動的にモデルに追加されます。&lt;a href=&quot;../../topics/db/models#automatic-primary-key-fields&quot;&gt;自動主キーフィールドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="faddb2573c4c67040a191c29d77ac165c4bfede9" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; subclass that helps to create a JSON-encoded response. It inherits most behavior from its superclass with a couple differences:</source>
          <target state="translated">&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; JSONエンコードされた応答を作成するのに役立ちますそのサブクラス。いくつかの違いはありますが、スーパークラスからほとんどの動作を継承しています。</target>
        </trans-unit>
        <trans-unit id="c0d33f2c22b5dcd80cd0b425eda25b332db008db" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../../request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; representing the current request,</source>
          <target state="translated">&lt;a href=&quot;../../request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; の&lt;/a&gt;現在の要求を表します、</target>
        </trans-unit>
        <trans-unit id="186111add1c13054b5e366f4d7b79674600a0885" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;applications#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; instance for the application about to be migrated/synced.</source>
          <target state="translated">移行または同期されるアプリケーションの&lt;a href=&quot;applications#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt;インスタンス。</target>
        </trans-unit>
        <trans-unit id="da3b88811bdac19d13bfca669b77a38651837b81" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;applications#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; instance for the application that was just installed.</source>
          <target state="translated">インストールされたばかりのアプリケーションの&lt;a href=&quot;applications#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt;インスタンス。</target>
        </trans-unit>
        <trans-unit id="4106e26619049b03071241b0425bb837c58c7e97" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; の&lt;/a&gt;インスタンス。</target>
        </trans-unit>
        <trans-unit id="cfa7d765cd5e7151478725f3460053f18691d841" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;F()&lt;/code&gt; object represents the value of a model field or annotated column. It makes it possible to refer to model field values and perform database operations using them without actually having to pull them out of the database into Python memory.</source>
          <target state="translated">&lt;code&gt;F()&lt;/code&gt; オブジェクトは、モデルフィールドまたは注釈された列の値を表します。これにより、実際にデータベースからPythonメモリに引き出す必要なく、モデルフィールド値を参照し、それらを使用してデータベース操作を実行できます。</target>
        </trans-unit>
        <trans-unit id="9f6969cbb4292c3086f7c958ae19344bb5aaa421" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Operation&lt;/code&gt; subclass which installs PostgreSQL extensions.</source>
          <target state="translated">PostgreSQL拡張機能をインストールする &lt;code&gt;Operation&lt;/code&gt; サブクラス。</target>
        </trans-unit>
        <trans-unit id="b4204a2187e660eb7e65f9b02da09772bc3ffaf7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Operation&lt;/code&gt; subclass which installs a PostgreSQL extension. For common extensions, use one of the more specific subclasses below.</source>
          <target state="translated">An &lt;code&gt;Operation&lt;/code&gt; subclass which installs a PostgreSQL extension. For common extensions, use one of the more specific subclasses below.</target>
        </trans-unit>
        <trans-unit id="98724fe973995dab889727509346ca4f9510047d" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;id&lt;/code&gt; field is added automatically, but this behavior can be overridden. See &lt;a href=&quot;#automatic-primary-key-fields&quot;&gt;Automatic primary key fields&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; フィールドが自動的に追加されますが、この動作は上書きすることができます。&lt;a href=&quot;#automatic-primary-key-fields&quot;&gt;自動主キーフィールドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="59a2100a48bb74ca3c223e06a67c881b76a9b9c4" translate="yes" xml:space="preserve">
          <source>An API is available to manipulate session data outside of a view:</source>
          <target state="translated">ビューの外でセッションデータを操作するためのAPIが用意されています。</target>
        </trans-unit>
        <trans-unit id="65dffa4497ac4db1209b15a06c360f65a3812e50" translate="yes" xml:space="preserve">
          <source>An IPv4 or IPv6 address, in string format (e.g. &lt;code&gt;192.0.2.30&lt;/code&gt; or &lt;code&gt;2a02:42fe::4&lt;/code&gt;). The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">文字列形式のIPv4またはIPv6アドレス（例： &lt;code&gt;192.0.2.30&lt;/code&gt; または &lt;code&gt;2a02:42fe::4&lt;/code&gt; ）。このフィールドのデフォルトのフォームウィジェットは&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="18e6d94a1f45fbaae76dc484c2c64added263e27" translate="yes" xml:space="preserve">
          <source>An absolute or relative URL, which will be used as-is for the redirect location.</source>
          <target state="translated">リダイレクト先にそのまま使用される絶対URLまたは相対URL。</target>
        </trans-unit>
        <trans-unit id="e3925ec179972ff07fb76189661269abc5b99a88" translate="yes" xml:space="preserve">
          <source>An action was &lt;strong&gt;not&lt;/strong&gt; successful or some other failure occurred</source>
          <target state="translated">アクションが成功し&lt;strong&gt;なかっ&lt;/strong&gt;たか、その他の障害が発生しました</target>
        </trans-unit>
        <trans-unit id="e3a6647bd061a5c968c8eaf481deb4759e5f2412" translate="yes" xml:space="preserve">
          <source>An action was successful, e.g. &amp;ldquo;Your profile was updated successfully&amp;rdquo;</source>
          <target state="translated">「プロファイルが正常に更新されました」などのアクションが成功した</target>
        </trans-unit>
        <trans-unit id="4435bfb73984e94fc86de917153522bf1df0a5d7" translate="yes" xml:space="preserve">
          <source>An admin site that lets you add, change, and delete polls.</source>
          <target state="translated">ポールの追加・変更・削除ができる管理サイト。</target>
        </trans-unit>
        <trans-unit id="9c68c75bc4729d236beed0fc44e1ac416abbfd61" translate="yes" xml:space="preserve">
          <source>An aggregate expression is a special case of a &lt;a href=&quot;#func-expressions&quot;&gt;Func() expression&lt;/a&gt; that informs the query that a &lt;code&gt;GROUP BY&lt;/code&gt; clause is required. All of the &lt;a href=&quot;querysets#aggregation-functions&quot;&gt;aggregate functions&lt;/a&gt;, like &lt;code&gt;Sum()&lt;/code&gt; and &lt;code&gt;Count()&lt;/code&gt;, inherit from &lt;code&gt;Aggregate()&lt;/code&gt;.</source>
          <target state="translated">集計式は、 &lt;code&gt;GROUP BY&lt;/code&gt; 句が必要であることをクエリに通知する&lt;a href=&quot;#func-expressions&quot;&gt;Func（）式の&lt;/a&gt;特殊なケースです。 &lt;code&gt;Sum()&lt;/code&gt; や &lt;code&gt;Count()&lt;/code&gt; などのすべての&lt;a href=&quot;querysets#aggregation-functions&quot;&gt;集計関数は&lt;/a&gt;、 &lt;code&gt;Aggregate()&lt;/code&gt; から継承します。</target>
        </trans-unit>
        <trans-unit id="6dac8c4d87a8e94f377a297147a7ed6a8deb0b20" translate="yes" xml:space="preserve">
          <source>An aggregate within a &lt;code&gt;values()&lt;/code&gt; clause is applied before other arguments within the same &lt;code&gt;values()&lt;/code&gt; clause. If you need to group by another value, add it to an earlier &lt;code&gt;values()&lt;/code&gt; clause instead. For example:</source>
          <target state="translated">&lt;code&gt;values()&lt;/code&gt; 句内の集計は、同じ &lt;code&gt;values()&lt;/code&gt; 句内の他の引数の前に適用されます。別の値でグループ化する必要がある場合は、代わりに以前の &lt;code&gt;values()&lt;/code&gt; 句に追加します。例えば：</target>
        </trans-unit>
        <trans-unit id="33d2fc7e42e04914b254e4159f933abde947704f" translate="yes" xml:space="preserve">
          <source>An alias for &lt;a href=&quot;#django.contrib.gis.gdal.OGRGeometry.tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.OGRGeometry.tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;/a&gt;のエイリアス。</target>
        </trans-unit>
        <trans-unit id="3aff51db3da0e7b64fab96d99fc5c327a215a3e4" translate="yes" xml:space="preserve">
          <source>An alias for &lt;a href=&quot;#django.contrib.gis.gdal.Polygon.shell&quot;&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.Polygon.shell&quot;&gt; &lt;code&gt;shell&lt;/code&gt; &lt;/a&gt;のエイリアス。</target>
        </trans-unit>
        <trans-unit id="61d19c8e07f4c913c49aeae377f8f1d9b469aa9c" translate="yes" xml:space="preserve">
          <source>An alternative better solution</source>
          <target state="translated">代替のより良い解決策</target>
        </trans-unit>
        <trans-unit id="1deb6430deb14f32cdaa8501e3f8aec60b594ea3" translate="yes" xml:space="preserve">
          <source>An anonymous user is one that is not authenticated i.e. they have provided no valid authentication details. However, that does not necessarily mean they are not authorized to do anything. At the most basic level, most websites authorize anonymous users to browse most of the site, and many allow anonymous posting of comments etc.</source>
          <target state="translated">匿名ユーザとは、認証されていないユーザ、つまり有効な認証情報を提供していないユーザのことです。しかし、それは必ずしも彼らが何かをすることを許可されていないことを意味するものではありません。最も基本的なレベルでは、ほとんどのウェブサイトでは、サイトのほとんどを閲覧する匿名ユーザーを許可し、多くはコメントなどの匿名投稿を許可しています。</target>
        </trans-unit>
        <trans-unit id="4b08a99e915ba9c989b651c61303f82ad2208c1e" translate="yes" xml:space="preserve">
          <source>An attacker in possession of the &lt;a href=&quot;../../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; can not only generate falsified session data, which your site will trust, but also remotely execute arbitrary code, as the data is serialized using pickle.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; &lt;/a&gt;を所持する攻撃者は、サイトが信頼する偽のセッションデータを生成できるだけでなく、pickleを使用してデータがシリアル化されるため、リモートで任意のコードを実行することもできます。</target>
        </trans-unit>
        <trans-unit id="bb2dca9b7402e3038c29ea2d17d64957926209e9" translate="yes" xml:space="preserve">
          <source>An attribute that defaults to &lt;code&gt;True&lt;/code&gt;. If set to &lt;code&gt;False&lt;/code&gt;, the microseconds part of &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; values will be set to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">デフォルトが &lt;code&gt;True&lt;/code&gt; の属性。 &lt;code&gt;False&lt;/code&gt; に設定されている場合、&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;値のマイクロ秒部分は &lt;code&gt;0&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="cd268500a89a883b70edb57f72986316598ae3d7" translate="yes" xml:space="preserve">
          <source>An authentication backend is a class that implements two required methods: &lt;code&gt;get_user(user_id)&lt;/code&gt; and &lt;code&gt;authenticate(request, **credentials)&lt;/code&gt;, as well as a set of optional permission related &lt;a href=&quot;#authorization-methods&quot;&gt;authorization methods&lt;/a&gt;.</source>
          <target state="translated">認証バックエンドは、 &lt;code&gt;get_user(user_id)&lt;/code&gt; と &lt;code&gt;authenticate(request, **credentials)&lt;/code&gt; 2つの必須メソッド、およびオプションの権限関連の&lt;a href=&quot;#authorization-methods&quot;&gt;承認メソッドの&lt;/a&gt;セットを実装するクラスです。</target>
        </trans-unit>
        <trans-unit id="de073d9defd676ec7471fad3bbfe1a2dc52b507b" translate="yes" xml:space="preserve">
          <source>An available formatting that can be used for displaying date fields on templates. Note that if &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the corresponding locale-dictated format has higher precedence and will be applied. See &lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;allowed date format strings&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テンプレートで日付フィールドを表示するために使用できるフォーマット。&lt;a href=&quot;#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; に設定されている場合、対応するロケール指定のフォーマットが優先され、適用されることに注意してください。&lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;allowed date format strings&lt;/code&gt; &lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="96ebe49d47555429233b3848f332b38958349db3" translate="yes" xml:space="preserve">
          <source>An available formatting that can be used for displaying datetime fields on templates. Note that if &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the corresponding locale-dictated format has higher precedence and will be applied. See &lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;allowed date format strings&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テンプレートに日時フィールドを表示するために使用できるフォーマット。&lt;a href=&quot;#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; に設定されている場合、対応するロケール指定のフォーマットが優先され、適用されることに注意してください。&lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;allowed date format strings&lt;/code&gt; &lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="9ea26de5566952ec524cedbb60ee90bf6c1be0e2" translate="yes" xml:space="preserve">
          <source>An example</source>
          <target state="translated">一例</target>
        </trans-unit>
        <trans-unit id="44dc5e773df10840021031d5567151fd83c15331" translate="yes" xml:space="preserve">
          <source>An example makes this easier to understand:</source>
          <target state="translated">例を挙げるとわかりやすくなります。</target>
        </trans-unit>
        <trans-unit id="9c7cf5762a90e14bf9c1f5ef6f288bc6ceef0b2a" translate="yes" xml:space="preserve">
          <source>An example might clarify things here:</source>
          <target state="translated">例を挙げれば、ここでは明確になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="b994f90ff92f4e93c073288c79a6cd02bfc15ab0" translate="yes" xml:space="preserve">
          <source>An example of clickjacking</source>
          <target state="translated">クリックジャッキングの例</target>
        </trans-unit>
        <trans-unit id="9e5daf695560715d43805edc8de2766a29f586db" translate="yes" xml:space="preserve">
          <source>An example of this is how &lt;a href=&quot;#django.forms.SplitDateTimeWidget&quot;&gt;&lt;code&gt;SplitDateTimeWidget&lt;/code&gt;&lt;/a&gt; turns a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; value into a list with date and time split into two separate values:</source>
          <target state="translated">この例は、&lt;a href=&quot;#django.forms.SplitDateTimeWidget&quot;&gt; &lt;code&gt;SplitDateTimeWidget&lt;/code&gt; &lt;/a&gt;が&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;値を2つの異なる値に分割された日付と時刻のリストに変換する方法です。</target>
        </trans-unit>
        <trans-unit id="e35ab3d53b689526afb17ba5bf93be01898a48f4" translate="yes" xml:space="preserve">
          <source>An example to demonstrate:</source>
          <target state="translated">実証するための例。</target>
        </trans-unit>
        <trans-unit id="f481ad49809e7c27b79d2e6d830283b22c04c1f7" translate="yes" xml:space="preserve">
          <source>An example:</source>
          <target state="translated">一例です。</target>
        </trans-unit>
        <trans-unit id="fb43ae8a2d9729a801eac153bba3110e42b5e9c8" translate="yes" xml:space="preserve">
          <source>An exception raised when an error occurs when constructing or using a spatial reference system object.</source>
          <target state="translated">空間参照システム・オブジェクトの構築時または使用時にエラーが発生した場合に発生する例外。</target>
        </trans-unit>
        <trans-unit id="e5be9941c1dfa47b6a4a02b39ea4053fdb6457e4" translate="yes" xml:space="preserve">
          <source>An exception to this rule is the &lt;a href=&quot;../../ref/django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; command. It validates the migration history in the databases to catch problems with the existing migration files (which could be caused by editing them) before creating new migrations. By default, it checks only the &lt;code&gt;default&lt;/code&gt; database, but it consults the &lt;a href=&quot;#allow_migrate&quot;&gt;&lt;code&gt;allow_migrate()&lt;/code&gt;&lt;/a&gt; method of &lt;a href=&quot;#topics-db-multi-db-routing&quot;&gt;routers&lt;/a&gt; if any are installed.</source>
          <target state="translated">このルールの例外は、&lt;a href=&quot;../../ref/django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt;コマンドです。新しい移行を作成する前に、データベースの移行履歴を検証して、既存の移行ファイル（ファイルの編集が原因である可能性があります）の問題を検出します。デフォルトでは、 &lt;code&gt;default&lt;/code&gt; データベースのみをチェックしますが、&lt;a href=&quot;#topics-db-multi-db-routing&quot;&gt;ルーター&lt;/a&gt;がインストールされている場合は、ルーターの&lt;a href=&quot;#allow_migrate&quot;&gt; &lt;code&gt;allow_migrate()&lt;/code&gt; &lt;/a&gt;メソッドを調べます。</target>
        </trans-unit>
        <trans-unit id="ed175ed81f980812bd97abba4555214c4575fb8d" translate="yes" xml:space="preserve">
          <source>An in-memory raster is created through the following example:</source>
          <target state="translated">以下の例では、インメモリラスタを作成しています。</target>
        </trans-unit>
        <trans-unit id="c3a0de81244b1acb46976eba51d4d245458bc3eb" translate="yes" xml:space="preserve">
          <source>An inactive user is one that has its &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.is_active&quot;&gt;&lt;code&gt;is_active&lt;/code&gt;&lt;/a&gt; field set to &lt;code&gt;False&lt;/code&gt;. The &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.backends.ModelBackend&quot;&gt;&lt;code&gt;ModelBackend&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend&quot;&gt;&lt;code&gt;RemoteUserBackend&lt;/code&gt;&lt;/a&gt; authentication backends prohibits these users from authenticating. If a custom user model doesn&amp;rsquo;t have an &lt;a href=&quot;#django.contrib.auth.models.CustomUser.is_active&quot;&gt;&lt;code&gt;is_active&lt;/code&gt;&lt;/a&gt; field, all users will be allowed to authenticate.</source>
          <target state="translated">非アクティブなユーザーとは、&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.is_active&quot;&gt; &lt;code&gt;is_active&lt;/code&gt; &lt;/a&gt;フィールドが &lt;code&gt;False&lt;/code&gt; に設定されているユーザーです。&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.backends.ModelBackend&quot;&gt; &lt;code&gt;ModelBackend&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend&quot;&gt; &lt;code&gt;RemoteUserBackend&lt;/code&gt; &lt;/a&gt;認証バックエンドは、認証からこれらのユーザーを禁止します。カスタムユーザーモデルに&lt;a href=&quot;#django.contrib.auth.models.CustomUser.is_active&quot;&gt; &lt;code&gt;is_active&lt;/code&gt; &lt;/a&gt;フィールドがない場合、すべてのユーザーが認証を許可されます。</target>
        </trans-unit>
        <trans-unit id="274d404b49cf7865c14ab687e838802e41ea0186" translate="yes" xml:space="preserve">
          <source>An included URLconf receives any captured parameters from parent URLconfs, so the following example is valid:</source>
          <target state="translated">インクルードされた URLconf は親 URLconf からキャプチャされたパラメータを受け取るので、以下の例が有効です。</target>
        </trans-unit>
        <trans-unit id="79f65afd7426a1dc2bc9545fd8cbde0c68685dda" translate="yes" xml:space="preserve">
          <source>An included template is rendered within the context of the template that includes it. This example produces the output &lt;code&gt;&quot;Hello, John!&quot;&lt;/code&gt;:</source>
          <target state="translated">含まれるテンプレートは、それを含むテンプレートのコンテキスト内でレンダリングされます。この例では、 &lt;code&gt;&quot;Hello, John!&quot;&lt;/code&gt; という出力が生成されます。：</target>
        </trans-unit>
        <trans-unit id="4168fcd2b3e8ad3adb04bc480ef91ac9dc32ac30" translate="yes" xml:space="preserve">
          <source>An infinite loop is caused by ordering</source>
          <target state="translated">無限ループが発生するのは</target>
        </trans-unit>
        <trans-unit id="c342f5dc50caf73da0bd431eb33d447655a8bc38" translate="yes" xml:space="preserve">
          <source>An instance attribute that helps create colored output when writing to &lt;code&gt;stdout&lt;/code&gt; or &lt;code&gt;stderr&lt;/code&gt;. For example:</source>
          <target state="translated">&lt;code&gt;stdout&lt;/code&gt; または &lt;code&gt;stderr&lt;/code&gt; に書き込むときにカラー出力を作成するのに役立つインスタンス属性。例えば：</target>
        </trans-unit>
        <trans-unit id="9f2451f5257ef2ded26bcd890212ab4d9e0f0273" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;のインスタンス。</target>
        </trans-unit>
        <trans-unit id="b677133dba37f8a0d05b9f531f292924134b17ce" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;../../ref/urlresolvers#django.urls.ResolverMatch&quot;&gt;&lt;code&gt;ResolverMatch&lt;/code&gt;&lt;/a&gt; for the response. You can use the &lt;a href=&quot;../../ref/urlresolvers#django.urls.ResolverMatch.func&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/a&gt; attribute, for example, to verify the view that served the response:</source>
          <target state="translated">応答の&lt;a href=&quot;../../ref/urlresolvers#django.urls.ResolverMatch&quot;&gt; &lt;code&gt;ResolverMatch&lt;/code&gt; &lt;/a&gt;のインスタンス。たとえば、&lt;a href=&quot;../../ref/urlresolvers#django.urls.ResolverMatch.func&quot;&gt; &lt;code&gt;func&lt;/code&gt; &lt;/a&gt;属性を使用して、応答を提供したビューを確認できます。</target>
        </trans-unit>
        <trans-unit id="7151476a634aadae82a4558d217d3768bb129a09" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;applications#django.apps.apps&quot;&gt;&lt;code&gt;Apps&lt;/code&gt;&lt;/a&gt; containing the state of the project after the migration run. It should be used instead of the global &lt;a href=&quot;applications#django.apps.apps&quot;&gt;&lt;code&gt;apps&lt;/code&gt;&lt;/a&gt; registry to retrieve the models you want to perform operations on.</source>
          <target state="translated">移行実行後のプロジェクトの状態を含む&lt;a href=&quot;applications#django.apps.apps&quot;&gt; &lt;code&gt;Apps&lt;/code&gt; &lt;/a&gt;のインスタンス。操作を実行するモデルを取得するには、グローバル&lt;a href=&quot;applications#django.apps.apps&quot;&gt; &lt;code&gt;apps&lt;/code&gt; &lt;/a&gt;レジストリの代わりに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="cee580ae302ae948e23c6225b6c391017760b3a8" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;applications#module-django.apps&quot;&gt;&lt;code&gt;Apps&lt;/code&gt;&lt;/a&gt; containing the state of the project before the migration run. It should be used instead of the global &lt;a href=&quot;applications#django.apps.apps&quot;&gt;&lt;code&gt;apps&lt;/code&gt;&lt;/a&gt; registry to retrieve the models you want to perform operations on.</source>
          <target state="translated">移行実行前のプロジェクトの状態を含む&lt;a href=&quot;applications#module-django.apps&quot;&gt; &lt;code&gt;Apps&lt;/code&gt; &lt;/a&gt;のインスタンス。操作を実行するモデルを取得するには、グローバル&lt;a href=&quot;applications#django.apps.apps&quot;&gt; &lt;code&gt;apps&lt;/code&gt; &lt;/a&gt;レジストリの代わりに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e82dde0c45c38efd74e624d73450580c79f107d0" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;urlresolvers#django.urls.ResolverMatch&quot;&gt;&lt;code&gt;ResolverMatch&lt;/code&gt;&lt;/a&gt; representing the resolved URL. This attribute is only set after URL resolving took place, which means it&amp;rsquo;s available in all views but not in middleware which are executed before URL resolving takes place (you can use it in &lt;a href=&quot;../topics/http/middleware#process_view&quot;&gt;&lt;code&gt;process_view()&lt;/code&gt;&lt;/a&gt; though).</source>
          <target state="translated">解決されたURLを表す&lt;a href=&quot;urlresolvers#django.urls.ResolverMatch&quot;&gt; &lt;code&gt;ResolverMatch&lt;/code&gt; &lt;/a&gt;のインスタンス。この属性は、URL解決が行われた後にのみ設定されます。つまり、すべてのビューで使用できますが、URL解決が行われる前に実行されるミドルウェアでは使用できません&lt;a href=&quot;../topics/http/middleware#process_view&quot;&gt; &lt;code&gt;process_view()&lt;/code&gt; &lt;/a&gt;ただし、process_view（）で使用できます）。</target>
        </trans-unit>
        <trans-unit id="62ebe3e92736407b7884afd74c06e451815b6cb6" translate="yes" xml:space="preserve">
          <source>An instance of the correct type (e.g., &lt;code&gt;Hand&lt;/code&gt; in our ongoing example).</source>
          <target state="translated">正しいタイプのインスタンス（たとえば、進行中の例では &lt;code&gt;Hand&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3c52b4b7dae7b1e7ef9416b4cfb7f0b060d5fcc5" translate="yes" xml:space="preserve">
          <source>An instance of the model where the &lt;code&gt;FileField&lt;/code&gt; is defined. More specifically, this is the particular instance where the current file is being attached.</source>
          <target state="translated">&lt;code&gt;FileField&lt;/code&gt; が定義されているモデルのインスタンス。より具体的には、これは現在のファイルが添付されている特定のインスタンスです。</target>
        </trans-unit>
        <trans-unit id="246472979f1a8942a4358ead771333c2b2a02c0e" translate="yes" xml:space="preserve">
          <source>An integer specifying how many objects should be displayed per page. If this is given, the view will paginate objects with &lt;code&gt;paginate_by&lt;/code&gt; objects per page. The view will expect either a &lt;code&gt;page&lt;/code&gt; query string parameter (via &lt;code&gt;request.GET&lt;/code&gt;) or a &lt;code&gt;page&lt;/code&gt; variable specified in the URLconf.</source>
          <target state="translated">1ページに表示するオブジェクトの数を指定する整数。これが指定されている場合、ビューはページごとにpaginate_byオブジェクトを &lt;code&gt;paginate_by&lt;/code&gt; オブジェクトをページ分割します。ビューは、 &lt;code&gt;page&lt;/code&gt; クエリ文字列パラメーター（ &lt;code&gt;request.GET&lt;/code&gt; を介して）またはURLconfで指定された &lt;code&gt;page&lt;/code&gt; 変数のいずれかを予期します。</target>
        </trans-unit>
        <trans-unit id="3cf3b0caba7b39ed0e3bdd29ce7b2c628df21356" translate="yes" xml:space="preserve">
          <source>An integer specifying the number of &amp;ldquo;overflow&amp;rdquo; objects the last page can contain. By default this returns the value of &lt;a href=&quot;#django.views.generic.list.MultipleObjectMixin.paginate_orphans&quot;&gt;&lt;code&gt;paginate_orphans&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">最後のページに含めることができる「オーバーフロー」オブジェクトの数を指定する整数。デフォルトでは、これは&lt;a href=&quot;#django.views.generic.list.MultipleObjectMixin.paginate_orphans&quot;&gt; &lt;code&gt;paginate_orphans&lt;/code&gt; &lt;/a&gt;の値を返します。</target>
        </trans-unit>
        <trans-unit id="b4ecc6422927cd0e8e9f3314e294f6a80faeaf21" translate="yes" xml:space="preserve">
          <source>An integer specifying the number of &amp;ldquo;overflow&amp;rdquo; objects the last page can contain. This extends the &lt;a href=&quot;#django.views.generic.list.MultipleObjectMixin.paginate_by&quot;&gt;&lt;code&gt;paginate_by&lt;/code&gt;&lt;/a&gt; limit on the last page by up to &lt;code&gt;paginate_orphans&lt;/code&gt;, in order to keep the last page from having a very small number of objects.</source>
          <target state="translated">最後のページに含めることができる「オーバーフロー」オブジェクトの数を指定する整数。これは、拡張&lt;a href=&quot;#django.views.generic.list.MultipleObjectMixin.paginate_by&quot;&gt; &lt;code&gt;paginate_by&lt;/code&gt; の&lt;/a&gt;までのことで、最後のページには制限 &lt;code&gt;paginate_orphans&lt;/code&gt; をオブジェクトの非常に数が少ないから最後のページを維持するために、。</target>
        </trans-unit>
        <trans-unit id="30bb341a7bdb22e3ad1a0e3a492d93a67005d6ea" translate="yes" xml:space="preserve">
          <source>An integer. Values from &lt;code&gt;-2147483648&lt;/code&gt; to &lt;code&gt;2147483647&lt;/code&gt; are safe in all databases supported by Django.</source>
          <target state="translated">整数。 &lt;code&gt;-2147483648&lt;/code&gt; から &lt;code&gt;2147483647&lt;/code&gt; までの値は、Djangoがサポートするすべてのデータベースで安全です。</target>
        </trans-unit>
        <trans-unit id="e411d51eaf1718afd2228051f6d13a61f2e26282" translate="yes" xml:space="preserve">
          <source>An iterable containing the widgets needed.</source>
          <target state="translated">必要なウィジェットを含むイテレータブル。</target>
        </trans-unit>
        <trans-unit id="1b68325a327361fc33c0b282ee4b1f9f41e3138d" translate="yes" xml:space="preserve">
          <source>An iterable containing the widgets needed. For example:</source>
          <target state="translated">必要なウィジェットを含むイテレータブル。例えば</target>
        </trans-unit>
        <trans-unit id="782cb10126cecb403d126e1d894a7815f6715df8" translate="yes" xml:space="preserve">
          <source>An iterable of 2-tuples. The first element is an expression or string. The second element is a SQL operator represented as a string. To avoid typos, you may use &lt;a href=&quot;fields#django.contrib.postgres.fields.RangeOperators&quot;&gt;&lt;code&gt;RangeOperators&lt;/code&gt;&lt;/a&gt; which maps the operators with strings. For example:</source>
          <target state="translated">2タプルの反復可能オブジェクト。最初の要素は式または文字列です。2番目の要素は、文字列として表されるSQL演算子です。タイプミスを回避するために、演算子を文字列にマップする&lt;a href=&quot;fields#django.contrib.postgres.fields.RangeOperators&quot;&gt; &lt;code&gt;RangeOperators&lt;/code&gt; &lt;/a&gt;を使用できます。例えば：</target>
        </trans-unit>
        <trans-unit id="3890cb41c06b9fab006f1af94416b413635cd836" translate="yes" xml:space="preserve">
          <source>An iterable of 2-tuples. The first element is an expression or string. The second element is an SQL operator represented as a string. To avoid typos, you may use &lt;a href=&quot;fields#django.contrib.postgres.fields.RangeOperators&quot;&gt;&lt;code&gt;RangeOperators&lt;/code&gt;&lt;/a&gt; which maps the operators with strings. For example:</source>
          <target state="translated">An iterable of 2-tuples. The first element is an expression or string. The second element is an SQL operator represented as a string. To avoid typos, you may use &lt;a href=&quot;fields#django.contrib.postgres.fields.RangeOperators&quot;&gt; &lt;code&gt;RangeOperators&lt;/code&gt; &lt;/a&gt; which maps the operators with strings. For example:</target>
        </trans-unit>
        <trans-unit id="1557e7d813a443c6e97ac8e302948f8a2a92ddc6" translate="yes" xml:space="preserve">
          <source>An iterator of the response content, bytestring encoded according to &lt;a href=&quot;#django.http.HttpResponse.charset&quot;&gt;&lt;code&gt;HttpResponse.charset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">応答コンテンツのイテレータ、&lt;a href=&quot;#django.http.HttpResponse.charset&quot;&gt; &lt;code&gt;HttpResponse.charset&lt;/code&gt; &lt;/a&gt;に従ってエンコードされたバイト文字列。</target>
        </trans-unit>
        <trans-unit id="764c42b91212f12a629a423f0f0afc1d1031be0b" translate="yes" xml:space="preserve">
          <source>An optional &lt;a href=&quot;#django.db.models.Q&quot;&gt;&lt;code&gt;Q object&lt;/code&gt;&lt;/a&gt; that&amp;rsquo;s used to filter the rows that are aggregated.</source>
          <target state="translated">集計される行のフィルタリングに使用されるオプションの&lt;a href=&quot;#django.db.models.Q&quot;&gt; &lt;code&gt;Q object&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="76ce46abaa60ff7cf50fa9f088ed9542f78f2bd9" translate="yes" xml:space="preserve">
          <source>An optional &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; that will be available during the template&amp;rsquo;s rendering process.</source>
          <target state="translated">テンプレートのレンダリングプロセス中に使用できるオプションの&lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f191d1f3bf0b579d3a02e71f79987b16c358797b" translate="yes" xml:space="preserve">
          <source>An optional &lt;a href=&quot;https://docs.python.org/3/library/json.html#json.JSONDecoder&quot;&gt;&lt;code&gt;json.JSONDecoder&lt;/code&gt;&lt;/a&gt; subclass to deserialize the value retrieved from the database. The value will be in the format chosen by the custom encoder (most often a string). Your deserialization may need to account for the fact that you can&amp;rsquo;t be certain of the input type. For example, you run the risk of returning a &lt;code&gt;datetime&lt;/code&gt; that was actually a string that just happened to be in the same format chosen for &lt;code&gt;datetime&lt;/code&gt;s.</source>
          <target state="translated">An optional &lt;a href=&quot;https://docs.python.org/3/library/json.html#json.JSONDecoder&quot;&gt; &lt;code&gt;json.JSONDecoder&lt;/code&gt; &lt;/a&gt; subclass to deserialize the value retrieved from the database. The value will be in the format chosen by the custom encoder (most often a string). Your deserialization may need to account for the fact that you can&amp;rsquo;t be certain of the input type. For example, you run the risk of returning a &lt;code&gt;datetime&lt;/code&gt; that was actually a string that just happened to be in the same format chosen for &lt;code&gt;datetime&lt;/code&gt; s.</target>
        </trans-unit>
        <trans-unit id="a23afb57c393244f57d98b21627322991047b000" translate="yes" xml:space="preserve">
          <source>An optional &lt;a href=&quot;https://docs.python.org/3/library/json.html#json.JSONEncoder&quot;&gt;&lt;code&gt;json.JSONEncoder&lt;/code&gt;&lt;/a&gt; subclass to serialize data types not supported by the standard JSON serializer (e.g. &lt;code&gt;datetime.datetime&lt;/code&gt; or &lt;a href=&quot;https://docs.python.org/3/library/uuid.html#uuid.UUID&quot;&gt;&lt;code&gt;UUID&lt;/code&gt;&lt;/a&gt;). For example, you can use the &lt;a href=&quot;../../topics/serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt;&lt;code&gt;DjangoJSONEncoder&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">An optional &lt;a href=&quot;https://docs.python.org/3/library/json.html#json.JSONEncoder&quot;&gt; &lt;code&gt;json.JSONEncoder&lt;/code&gt; &lt;/a&gt; subclass to serialize data types not supported by the standard JSON serializer (e.g. &lt;code&gt;datetime.datetime&lt;/code&gt; or &lt;a href=&quot;https://docs.python.org/3/library/uuid.html#uuid.UUID&quot;&gt; &lt;code&gt;UUID&lt;/code&gt; &lt;/a&gt;). For example, you can use the &lt;a href=&quot;../../topics/serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt; &lt;code&gt;DjangoJSONEncoder&lt;/code&gt; &lt;/a&gt; class.</target>
        </trans-unit>
        <trans-unit id="51eabca0c49f8538626e416027ab8362de298d12" translate="yes" xml:space="preserve">
          <source>An optional JSON-encoding class to serialize data types not supported by the standard JSON serializer (&lt;code&gt;datetime&lt;/code&gt;, &lt;code&gt;uuid&lt;/code&gt;, etc.). For example, you can use the &lt;a href=&quot;../../../topics/serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt;&lt;code&gt;DjangoJSONEncoder&lt;/code&gt;&lt;/a&gt; class or any other &lt;a href=&quot;https://docs.python.org/3/library/json.html#json.JSONEncoder&quot;&gt;&lt;code&gt;json.JSONEncoder&lt;/code&gt;&lt;/a&gt; subclass.</source>
          <target state="translated">標準のJSON &lt;code&gt;uuid&lt;/code&gt; （ &lt;code&gt;datetime&lt;/code&gt; 、uuidなど）でサポートされていないデータ型をシリアル化するオプションのJSONエンコードクラス。たとえば、&lt;a href=&quot;../../../topics/serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt; &lt;code&gt;DjangoJSONEncoder&lt;/code&gt; &lt;/a&gt;クラスまたはその他の&lt;a href=&quot;https://docs.python.org/3/library/json.html#json.JSONEncoder&quot;&gt; &lt;code&gt;json.JSONEncoder&lt;/code&gt; &lt;/a&gt;サブクラスを使用できます。</target>
        </trans-unit>
        <trans-unit id="cf302c0ed6a7c8a745f8c8a389e92f3899cfc20e" translate="yes" xml:space="preserve">
          <source>An optional argument containing the characters which should not be escaped can be provided.</source>
          <target state="translated">エスケープしてはいけない文字を含むオプションの引数を指定することができます。</target>
        </trans-unit>
        <trans-unit id="37ddfbc6f10b5cbdd9c7a438e7bb14fa1cb94502" translate="yes" xml:space="preserve">
          <source>An optional argument that represents the &lt;a href=&quot;fields&quot;&gt;model field&lt;/a&gt; of the return value</source>
          <target state="translated">戻り値の&lt;a href=&quot;fields&quot;&gt;モデルフィールド&lt;/a&gt;を表すオプションの引数</target>
        </trans-unit>
        <trans-unit id="176299013af047e8122133ec1910bd95756256bf" translate="yes" xml:space="preserve">
          <source>An optional argument, &lt;code&gt;starts_with&lt;/code&gt;, can be applied to limit the returned pages to those beginning with a particular base URL. This argument may be passed as a string, or as a variable to be resolved from the context.</source>
          <target state="translated">オプションの引数 &lt;code&gt;starts_with&lt;/code&gt; を適用して、返されるページを特定のベースURLで始まるページに制限できます。この引数は、文字列として、またはコンテキストから解決される変数として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="90bbb5879cc4d952fc776e24ebf8fbe1815ea83c" translate="yes" xml:space="preserve">
          <source>An optional boolean argument that determines if array values will be distinct. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">配列値が区別されるかどうかを決定するオプションのブール引数。デフォルトは &lt;code&gt;False&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2d7f719647ab51bd56cc6adc7bb2ef3848a3d37a" translate="yes" xml:space="preserve">
          <source>An optional boolean argument that determines if concatenated values will be distinct. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">連結された値が区別されるかどうかを決定するオプションのブール引数。デフォルトは &lt;code&gt;False&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b0965bf17b8eef60057dfda1be8bca2a9a5b070a" translate="yes" xml:space="preserve">
          <source>An optional dict of months to use in the &amp;ldquo;months&amp;rdquo; select box.</source>
          <target state="translated">「月」選択ボックスで使用する月のオプションの辞書。</target>
        </trans-unit>
        <trans-unit id="04946ca43c81da1014a5b10d04e67a735be7869b" translate="yes" xml:space="preserve">
          <source>An optional list/tuple of years to use in the &amp;ldquo;year&amp;rdquo; select box. The default is a list containing the current year and the next 9 years.</source>
          <target state="translated">「年」選択ボックスで使用するオプションのリスト/年のタプル。デフォルトは、現在の年と次の9年を含むリストです。</target>
        </trans-unit>
        <trans-unit id="b15bc30576b82accc7ddd0cd521ab74377a57926" translate="yes" xml:space="preserve">
          <source>An optional string of a field name (with an optional &lt;code&gt;&quot;-&quot;&lt;/code&gt; prefix which indicates descending order) or an expression (or a tuple or list of strings and/or expressions) that specifies the ordering of the elements in the result list.</source>
          <target state="translated">結果リスト内の要素の順序を指定するフィールド名のオプションの文字列（降順を示すオプションの &lt;code&gt;&quot;-&quot;&lt;/code&gt; プレフィックス付き）または式（または文字列や式のタプルまたはリスト）。</target>
        </trans-unit>
        <trans-unit id="310bd87082e4e4832de44c97dbfa3ba94bc08f0d" translate="yes" xml:space="preserve">
          <source>An optional string of a field name (with an optional &lt;code&gt;&quot;-&quot;&lt;/code&gt; prefix which indicates descending order) or an expression (or a tuple or list of strings and/or expressions) that specifies the ordering of the elements in the result string.</source>
          <target state="translated">結果の文字列の要素の順序を指定するフィールド名のオプションの文字列（降順を示すオプションの &lt;code&gt;&quot;-&quot;&lt;/code&gt; プレフィックス付き）または式（または文字列や式のタプルまたはリスト）。</target>
        </trans-unit>
        <trans-unit id="6f4edaf62b1dfdf8cb719bee64a43ebbceef00a2" translate="yes" xml:space="preserve">
          <source>An optional template engine &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt;. The search for the template will be restricted to that engine.</source>
          <target state="translated">オプションのテンプレートエンジン&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt;。テンプレートの検索はそのエンジンに限定されます。</target>
        </trans-unit>
        <trans-unit id="611aeb7acdb34b543451330642fcd3627d71cd8a" translate="yes" xml:space="preserve">
          <source>An override to the &lt;code&gt;verbose_name&lt;/code&gt; found in the model&amp;rsquo;s inner &lt;code&gt;Meta&lt;/code&gt; class.</source>
          <target state="translated">モデルの内部 &lt;code&gt;Meta&lt;/code&gt; クラスにある &lt;code&gt;verbose_name&lt;/code&gt; のオーバーライド。</target>
        </trans-unit>
        <trans-unit id="ffcf163174409718ffabbf89f4d0f36fb79d14f9" translate="yes" xml:space="preserve">
          <source>An override to the &lt;code&gt;verbose_name_plural&lt;/code&gt; found in the model&amp;rsquo;s inner &lt;code&gt;Meta&lt;/code&gt; class.</source>
          <target state="translated">モデルの内部 &lt;code&gt;Meta&lt;/code&gt; クラスにある &lt;code&gt;verbose_name_plural&lt;/code&gt; のオーバーライド。</target>
        </trans-unit>
        <trans-unit id="355d8688f4f9696453a0994cdc549492d8510967" translate="yes" xml:space="preserve">
          <source>An unbound form has no data associated with it. When rendered to the user, it will be empty or will contain default values.</source>
          <target state="translated">束縛されていないフォームはそれに関連したデータを持ちません。ユーザーにレンダリングされるとき、それは空かデフォルト値を含みます。</target>
        </trans-unit>
        <trans-unit id="b1a32456d35755cee8d21b9e4b77c13ccc1b84b8" translate="yes" xml:space="preserve">
          <source>Analogous to &lt;a href=&quot;#django.test.SimpleTestCase.assertRaisesMessage&quot;&gt;&lt;code&gt;SimpleTestCase.assertRaisesMessage()&lt;/code&gt;&lt;/a&gt; but for &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertWarnsRegex&quot;&gt;&lt;code&gt;assertWarnsRegex()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaisesRegex&quot;&gt;&lt;code&gt;assertRaisesRegex()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.test.SimpleTestCase.assertRaisesMessage&quot;&gt; &lt;code&gt;SimpleTestCase.assertRaisesMessage()&lt;/code&gt; に&lt;/a&gt;似ていますが、&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertWarnsRegex&quot;&gt; &lt;code&gt;assertWarnsRegex()&lt;/code&gt; &lt;/a&gt;ではなく&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaisesRegex&quot;&gt; &lt;code&gt;assertRaisesRegex()&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ba957c88b3cfd199216b4fefecb0aef4a43c8fb5" translate="yes" xml:space="preserve">
          <source>Analyzes the request to find what language the user wants the system to show. Only languages listed in settings.LANGUAGES are taken into account. If the user requests a sublanguage where we have a main language, we send out the main language.</source>
          <target state="translated">リクエストを分析して、ユーザがシステムに表示させたい言語を見つけます。settings.LANGUAGESにリストされている言語のみが考慮されます。ユーザがメイン言語を持つサブ言語を要求した場合は、メイン言語を送信します。</target>
        </trans-unit>
        <trans-unit id="7fd715a6a77af890a531d36685a0c3f6488bc441" translate="yes" xml:space="preserve">
          <source>And from the other end:</source>
          <target state="translated">反対側からも</target>
        </trans-unit>
        <trans-unit id="1696dfe29429eaa7aa951e64f0a5a0adc2a6a84e" translate="yes" xml:space="preserve">
          <source>And here is a custom error message:</source>
          <target state="translated">そして、ここにカスタムエラーメッセージがあります。</target>
        </trans-unit>
        <trans-unit id="9cca8f3e51662b018d26f9c47a0d2d61b45340e4" translate="yes" xml:space="preserve">
          <source>And here&amp;rsquo;s &lt;code&gt;select_related&lt;/code&gt; lookup:</source>
          <target state="translated">そして、 &lt;code&gt;select_related&lt;/code&gt; lookupは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="69a494ceeb088d95a44de3a13081c4a6afeb1751" translate="yes" xml:space="preserve">
          <source>And here&amp;rsquo;s an example of how that filter would be used:</source>
          <target state="translated">そして、これはそのフィルターがどのように使用されるかの例です：</target>
        </trans-unit>
        <trans-unit id="03bff843633202076259ba7c810194e187aa4c2d" translate="yes" xml:space="preserve">
          <source>And here&amp;rsquo;s that same fixture as YAML:</source>
          <target state="translated">そして、これはYAMLと同じフィクスチャです：</target>
        </trans-unit>
        <trans-unit id="06b5a16628fc09b1a5c529ccdfe782e3493039ed" translate="yes" xml:space="preserve">
          <source>And if we would then do something like this:</source>
          <target state="translated">そして、その時にこんなことをするとします。</target>
        </trans-unit>
        <trans-unit id="1ae632778b90d26ed88e99ef0026a9d9d566d012" translate="yes" xml:space="preserve">
          <source>And if you don&amp;rsquo;t use the database cache backend, you don&amp;rsquo;t need to worry about providing routing instructions for the database cache model.</source>
          <target state="translated">And if you don&amp;rsquo;t use the database cache backend, you don&amp;rsquo;t need to worry about providing routing instructions for the database cache model.</target>
        </trans-unit>
        <trans-unit id="33563f4b623edbd67004711fb92d511f217ed694" translate="yes" xml:space="preserve">
          <source>And in the template you would have:</source>
          <target state="translated">そして、あなたが持っているであろうテンプレートの中に</target>
        </trans-unit>
        <trans-unit id="87cd8b6594bb03456295bc34593a83a34adf0007" translate="yes" xml:space="preserve">
          <source>And in your template you would use the following:</source>
          <target state="translated">そして、あなたのテンプレートでは以下のようにします。</target>
        </trans-unit>
        <trans-unit id="51a020ab2b01733bf5f33cb4a326e7e4db7ea093" translate="yes" xml:space="preserve">
          <source>And individual features may be retrieved by their feature ID:</source>
          <target state="translated">そして、個々の特徴は、その特徴IDによって検索することができます。</target>
        </trans-unit>
        <trans-unit id="90cfe1c3ebdd87032c4d116041779adeb21eb6ac" translate="yes" xml:space="preserve">
          <source>And it would be used in a view to block queries from the template like so:</source>
          <target state="translated">そして、このようにテンプレートからのクエリをブロックするためにビューで使用されます。</target>
        </trans-unit>
        <trans-unit id="2f1888caae39ce8f393771e448ad036616a00801" translate="yes" xml:space="preserve">
          <source>And now we have three tests that confirm that &lt;code&gt;Question.was_published_recently()&lt;/code&gt; returns sensible values for past, recent, and future questions.</source>
          <target state="translated">そして今、 &lt;code&gt;Question.was_published_recently()&lt;/code&gt; が過去、最近、および未来の質問に対して適切な値を返すことを確認する3つのテストがあります。</target>
        </trans-unit>
        <trans-unit id="516c9f6b5c81b8fee9261467ab6cdf478025ee22" translate="yes" xml:space="preserve">
          <source>And of course you can easily access methods you&amp;rsquo;ve explicitly defined on your own models:</source>
          <target state="translated">もちろん、独自のモデルで明示的に定義したメソッドに簡単にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="dac469ad58c399cc88277f4ad145c4c7733aab27" translate="yes" xml:space="preserve">
          <source>And of course, we will add some tests, to check that a &lt;code&gt;Question&lt;/code&gt; whose &lt;code&gt;pub_date&lt;/code&gt; is in the past can be displayed, and that one with a &lt;code&gt;pub_date&lt;/code&gt; in the future is not:</source>
          <target state="translated">そしてもちろん、いくつかのテストを追加して、 &lt;code&gt;pub_date&lt;/code&gt; が過去の &lt;code&gt;Question&lt;/code&gt; を表示できること、および &lt;code&gt;pub_date&lt;/code&gt; が将来の質問を表示できないことを確認します。</target>
        </trans-unit>
        <trans-unit id="ff7ec6ce2edd2d93bc624030dca48c59e112bf65" translate="yes" xml:space="preserve">
          <source>And on databases that support distinct on fields (such as PostgreSQL), &lt;code&gt;Experiment.objects.distinct('change__abs')&lt;/code&gt; generates:</source>
          <target state="translated">また、（PostgreSQLなどの）個別フィールドをサポートするデータベースでは、 &lt;code&gt;Experiment.objects.distinct('change__abs')&lt;/code&gt; は以下を生成します。</target>
        </trans-unit>
        <trans-unit id="69e0e14986a207d85dd815a22886b945871f3a0c" translate="yes" xml:space="preserve">
          <source>And one required method:</source>
          <target state="translated">そして、必要な方法が一つ。</target>
        </trans-unit>
        <trans-unit id="8939b75db788e776e0ebb67584800991f6f44cb3" translate="yes" xml:space="preserve">
          <source>And so on. In effect, we are using the tests to tell a story of admin input and user experience on the site, and checking that at every state and for every new change in the state of the system, the expected results are published.</source>
          <target state="translated">といった具合です。実質的には、サイト上での管理者入力やユーザー体験を伝えるためにテストを利用し、状態ごとに、また新たに変更があるごとに、期待した結果が公開されることを確認しています。</target>
        </trans-unit>
        <trans-unit id="116552834b156417c58cbe981b1c02c3e334ad4f" translate="yes" xml:space="preserve">
          <source>And speaking of forms with dozens of fields, you might want to split the form up into fieldsets:</source>
          <target state="translated">また、何十ものフィールドを持つフォームといえば、フォームをフィールドセットに分割したいと思うかもしれません。</target>
        </trans-unit>
        <trans-unit id="d2afd6d3f3b296fe1c08c8b4bd7068fb7e83d7b2" translate="yes" xml:space="preserve">
          <source>And that&amp;rsquo;s it! Every time the &lt;code&gt;bad_mojo&lt;/code&gt; condition is activated, an error log record will be written.</source>
          <target state="translated">以上です！ &lt;code&gt;bad_mojo&lt;/code&gt; 条件がアクティブになるたびに、エラーログレコードが書き込まれます。</target>
        </trans-unit>
        <trans-unit id="bcfe3c0f395badbeb6a1fad7612c3793afe4eb8a" translate="yes" xml:space="preserve">
          <source>And that&amp;rsquo;s it! If we placed this file in the &lt;code&gt;templates/admin/my_app&lt;/code&gt; directory, our link would appear on the change form for all models within my_app.</source>
          <target state="translated">以上です！このファイルを &lt;code&gt;templates/admin/my_app&lt;/code&gt; ディレクトリに配置すると、my_app内のすべてのモデルの変更フォームにリンクが表示されます。</target>
        </trans-unit>
        <trans-unit id="07e887c0940acf021ebba5ade747fc8fbec51123" translate="yes" xml:space="preserve">
          <source>And the accompanying URLconf:</source>
          <target state="translated">そして、それに付随するURLconf。</target>
        </trans-unit>
        <trans-unit id="eab402753ae334de81ac60191919efb50b4bc242" translate="yes" xml:space="preserve">
          <source>And the template:</source>
          <target state="translated">そしてテンプレート。</target>
        </trans-unit>
        <trans-unit id="9b52dd3016f5a17d966f982881e55520530da65e" translate="yes" xml:space="preserve">
          <source>And the view:</source>
          <target state="translated">景色も。</target>
        </trans-unit>
        <trans-unit id="a697ce9cc8667c8e9256c8d32cb413cc810723e1" translate="yes" xml:space="preserve">
          <source>And then later:</source>
          <target state="translated">そして、後になって</target>
        </trans-unit>
        <trans-unit id="ee6c7a92a558879bf024246e43dd7ff7bd50e6b3" translate="yes" xml:space="preserve">
          <source>And then use it to query for a particular &lt;a href=&quot;auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt;, or to get access to the &lt;code&gt;User&lt;/code&gt; model class:</source>
          <target state="translated">次に、それを使用して特定の&lt;a href=&quot;auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt;を照会するか、 &lt;code&gt;User&lt;/code&gt; モデルクラスにアクセスします。</target>
        </trans-unit>
        <trans-unit id="1098706171a72ea5de650d6dada38e6c6afa8002" translate="yes" xml:space="preserve">
          <source>And to find whether a queryset contains any items:</source>
          <target state="translated">また、クエリセットに項目が含まれているかどうかを調べることもできます。</target>
        </trans-unit>
        <trans-unit id="869524675f01329a247aa1f09e51825df4ec11fc" translate="yes" xml:space="preserve">
          <source>And to store numbers up to approximately one billion with a resolution of 10 decimal places:</source>
          <target state="translated">また、約10億までの数字を10進数10桁の分解能で格納することができます。</target>
        </trans-unit>
        <trans-unit id="122dc325cc02b859f8d88f5588295d211a44e206" translate="yes" xml:space="preserve">
          <source>And we also want a router that sends all other apps to the primary/replica configuration, and randomly chooses a replica to read from:</source>
          <target state="translated">また、他のすべてのアプリをプライマリ/レプリカの設定に送り、ランダムにレプリカを選んで読み込ませるルータも欲しいところです。</target>
        </trans-unit>
        <trans-unit id="8e49b4c10f64ab640d69b1da323441187a6908f6" translate="yes" xml:space="preserve">
          <source>And you can clear from the other end:</source>
          <target state="translated">反対側からもクリアできる</target>
        </trans-unit>
        <trans-unit id="82df6ae1054c31cec6c0f243a78e94fb29b9663d" translate="yes" xml:space="preserve">
          <source>Annotated values can also be filtered. The alias for the annotation can be used in &lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;exclude()&lt;/code&gt; clauses in the same way as any other model field.</source>
          <target state="translated">注釈付きの値もフィルタリングできます。アノテーションのエイリアスは、他のモデルフィールドと同じように、 &lt;code&gt;filter()&lt;/code&gt; および &lt;code&gt;exclude()&lt;/code&gt; 句で使用できます。</target>
        </trans-unit>
        <trans-unit id="b554aee820c7e57ad49dd7b64f3173f5d178236d" translate="yes" xml:space="preserve">
          <source>Annotates each object in the &lt;code&gt;QuerySet&lt;/code&gt; with the provided list of &lt;a href=&quot;expressions&quot;&gt;query expressions&lt;/a&gt;. An expression may be a simple value, a reference to a field on the model (or any related models), or an aggregate expression (averages, sums, etc.) that has been computed over the objects that are related to the objects in the &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="translated">提供された&lt;a href=&quot;expressions&quot;&gt;クエリ式の&lt;/a&gt;リストを使用して、 &lt;code&gt;QuerySet&lt;/code&gt; の各オブジェクトに注釈を付けます。式には、単純な値、モデル（または関連するモデル）のフィールドへの参照、または &lt;code&gt;QuerySet&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="829792c80022a8daeaba47c149334e000c254d65" translate="yes" xml:space="preserve">
          <source>Annotations can be used as a basis for ordering. When you define an &lt;code&gt;order_by()&lt;/code&gt; clause, the aggregates you provide can reference any alias defined as part of an &lt;code&gt;annotate()&lt;/code&gt; clause in the query.</source>
          <target state="translated">注釈は、注文の基礎として使用できます。 &lt;code&gt;order_by()&lt;/code&gt; 句を定義すると、提供する集計は、クエリの &lt;code&gt;annotate()&lt;/code&gt; 句の一部として定義された任意のエイリアスを参照できます。</target>
        </trans-unit>
        <trans-unit id="3e92b3487e05d5f47d7725bc0a904c803488d603" translate="yes" xml:space="preserve">
          <source>Annotations specified using keyword arguments will use the keyword as the alias for the annotation. Anonymous arguments will have an alias generated for them based upon the name of the aggregate function and the model field that is being aggregated. Only aggregate expressions that reference a single field can be anonymous arguments. Everything else must be a keyword argument.</source>
          <target state="translated">キーワード引数を使用して指定されたアノテーションは、そのキーワードをアノテーションのエイリアスとして使用します。匿名引数は、集約関数の名前と集約されるモデル・フィールドに基づいて生成されたエイリアスを持ちます。単一フィールドを参照する集約式だけが匿名引数になることができます。それ以外はすべてキーワード引数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="88461f63d604b59172c0ff0ab1c649468d205b75" translate="yes" xml:space="preserve">
          <source>Another approach is to use a &amp;ldquo;dumb&amp;rdquo; SMTP server that receives the emails locally and displays them to the terminal, but does not actually send anything. Python has a built-in way to accomplish this with a single command:</source>
          <target state="translated">別のアプローチは、ローカルで電子メールを受信して​​端末に表示するが、実際には何も送信しない「ダム」SMTPサーバーを使用することです。Pythonには、単一のコマンドでこれを実現する組み込みの方法があります。</target>
        </trans-unit>
        <trans-unit id="ba396ad6193b9ca5749ed17aafe362419ec415c8" translate="yes" xml:space="preserve">
          <source>Another approach to searching is trigram similarity. A trigram is a group of three consecutive characters. In addition to the &lt;a href=&quot;lookups#std:fieldlookup-trigram_similar&quot;&gt;&lt;code&gt;trigram_similar&lt;/code&gt;&lt;/a&gt; lookup, you can use a couple of other expressions.</source>
          <target state="translated">検索の別のアプローチは、トリグラムの類似性です。トライグラムは、3つの連続した文字のグループです。&lt;a href=&quot;lookups#std:fieldlookup-trigram_similar&quot;&gt; &lt;code&gt;trigram_similar&lt;/code&gt; &lt;/a&gt;ルックアップに加えて、他のいくつかの式を使用できます。</target>
        </trans-unit>
        <trans-unit id="21ba367c9e3496589a56140d591b0ffe544a18b6" translate="yes" xml:space="preserve">
          <source>Another common need is to filter down the objects given in a list page by some key in the URL. Earlier we hard-coded the publisher&amp;rsquo;s name in the URLconf, but what if we wanted to write a view that displayed all the books by some arbitrary publisher?</source>
          <target state="translated">もう1つの一般的なニーズは、リストページで指定されたオブジェクトを、URLのキーでフィルタリングすることです。以前、URLconfに出版社の名前をハードコーディングしましたが、任意の出版社のすべての書籍を表示するビューを記述したい場合はどうでしょうか。</target>
        </trans-unit>
        <trans-unit id="45940903ef290c6607fb9dc48fca66f59422159d" translate="yes" xml:space="preserve">
          <source>Another common pattern is writing custom SQL statements in model methods and module-level methods. For more details on using raw SQL, see the documentation on &lt;a href=&quot;sql&quot;&gt;using raw SQL&lt;/a&gt;.</source>
          <target state="translated">別の一般的なパターンは、カスタムSQLステートメントをモデルメソッドとモジュールレベルのメソッドで記述することです。生SQLの使用の詳細については、生SQLの&lt;a href=&quot;sql&quot;&gt;使用&lt;/a&gt;に関するドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="8a290b2c69d35adb6da1a5bfba443ced0c880483" translate="yes" xml:space="preserve">
          <source>Another common setup is to use flat pages for a limited set of known pages and to hard code the urls, so you can reference them with the &lt;a href=&quot;../templates/builtins#std:templatetag-url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; template tag:</source>
          <target state="translated">もう1つの一般的な設定は、既知のページの限定されたセットにフラットページを使用し、URLをハードコーディングして、&lt;a href=&quot;../templates/builtins#std:templatetag-url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt;テンプレートタグで参照できるようにすることです。</target>
        </trans-unit>
        <trans-unit id="a1577f6aa21d88594318532f249d8835a0c12d0e" translate="yes" xml:space="preserve">
          <source>Another common tactic is to serve static files from a cloud storage provider like Amazon&amp;rsquo;s S3 and/or a CDN (content delivery network). This lets you ignore the problems of serving static files and can often make for faster-loading Web pages (especially when using a CDN).</source>
          <target state="translated">別の一般的な戦術は、AmazonのS3やCDN（コンテンツ配信ネットワーク）などのクラウドストレージプロバイダーから静的ファイルを提供することです。これにより、静的ファイルの提供に関する問題を無視することができ、多くの場合（特にCDNを使用する場合）Webページの読み込みが速くなります。</target>
        </trans-unit>
        <trans-unit id="87f01f544f559b7fee6f441175ba35e7b16c744c" translate="yes" xml:space="preserve">
          <source>Another common type of template tag is the type that displays some data by rendering &lt;em&gt;another&lt;/em&gt; template. For example, Django&amp;rsquo;s admin interface uses custom template tags to display the buttons along the bottom of the &amp;ldquo;add/change&amp;rdquo; form pages. Those buttons always look the same, but the link targets change depending on the object being edited &amp;ndash; so they&amp;rsquo;re a perfect case for using a small template that is filled with details from the current object. (In the admin&amp;rsquo;s case, this is the &lt;code&gt;submit_row&lt;/code&gt; tag.)</source>
          <target state="translated">テンプレートタグのもう1つの一般的なタイプは、&lt;em&gt;別の&lt;/em&gt;テンプレートをレンダリングすることによって一部のデータを表示するタイプです。たとえば、Djangoの管理インターフェースはカスタムテンプレートタグを使用して、「追加/変更」フォームページの下部に沿ってボタンを表示します。これらのボタンは常に同じように見えますが、リンクターゲットは編集中のオブジェクトに応じて変化するため、現在のオブジェクトの詳細で満たされた小さなテンプレートを使用する場合に最適です。（管理者の場合、これは &lt;code&gt;submit_row&lt;/code&gt; タグです。）</target>
        </trans-unit>
        <trans-unit id="f0f51871d5071d412fc32544909d6747215d5a77" translate="yes" xml:space="preserve">
          <source>Another consideration is that the context data from class-based generic views will override data provided by context processors; see &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.get_context_data&quot;&gt;&lt;code&gt;get_context_data()&lt;/code&gt;&lt;/a&gt; for an example.</source>
          <target state="translated">別の考慮事項は、クラスベースの汎用ビューからのコンテキストデータが、コンテキストプロセッサによって提供されるデータをオーバーライドすることです。例については、&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.get_context_data&quot;&gt; &lt;code&gt;get_context_data()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3b24e12dd9fad842cfca1849299590204ccaf993" translate="yes" xml:space="preserve">
          <source>Another difference from one-to-many relationships is that in addition to model instances, the &lt;code&gt;add()&lt;/code&gt;, &lt;code&gt;set()&lt;/code&gt;, and &lt;code&gt;remove()&lt;/code&gt; methods on many-to-many relationships accept primary key values. For example, if &lt;code&gt;e1&lt;/code&gt; and &lt;code&gt;e2&lt;/code&gt; are &lt;code&gt;Entry&lt;/code&gt; instances, then these &lt;code&gt;set()&lt;/code&gt; calls work identically:</source>
          <target state="translated">1対多の関係とのもう1つの違いは、モデルインスタンスに加えて、多対多の関係の &lt;code&gt;add()&lt;/code&gt; 、 &lt;code&gt;set()&lt;/code&gt; 、および &lt;code&gt;remove()&lt;/code&gt; メソッドが主キー値を受け入れることです。たとえば、 &lt;code&gt;e1&lt;/code&gt; と &lt;code&gt;e2&lt;/code&gt; が &lt;code&gt;Entry&lt;/code&gt; インスタンスの場合、これらの &lt;code&gt;set()&lt;/code&gt; 呼び出しは同じように機能します。</target>
        </trans-unit>
        <trans-unit id="b9a69673a48bf9c65937988bc581b8dc380dd048" translate="yes" xml:space="preserve">
          <source>Another example would be a backend that only handles writing to files. In this case, you would not need to implement any of the above methods.</source>
          <target state="translated">別の例として、ファイルへの書き込みのみを処理するバックエンドがあります。この場合、上記のメソッドを実装する必要はありません。</target>
        </trans-unit>
        <trans-unit id="dedf5ccdeb6bf446ef7cfb01d8db4c4b042b2078" translate="yes" xml:space="preserve">
          <source>Another example:</source>
          <target state="translated">別の例です。</target>
        </trans-unit>
        <trans-unit id="4986e55d85710f6d524794428b573b2ea0944346" translate="yes" xml:space="preserve">
          <source>Another feature &lt;code&gt;{% blocktrans %}&lt;/code&gt; supports is the &lt;code&gt;trimmed&lt;/code&gt; option. This option will remove newline characters from the beginning and the end of the content of the &lt;code&gt;{% blocktrans %}&lt;/code&gt; tag, replace any whitespace at the beginning and end of a line and merge all lines into one using a space character to separate them. This is quite useful for indenting the content of a &lt;code&gt;{%
blocktrans %}&lt;/code&gt; tag without having the indentation characters end up in the corresponding entry in the PO file, which makes the translation process easier.</source>
          <target state="translated">&lt;code&gt;{% blocktrans %}&lt;/code&gt; サポートするもう1つの機能は、 &lt;code&gt;trimmed&lt;/code&gt; オプションです。このオプションは、 &lt;code&gt;{% blocktrans %}&lt;/code&gt; タグのコンテンツの最初と最後から改行文字を削除し、行の最初と最後にある空白を置き換え、スペース文字を使用してすべての行を1つに結合して区切ります。これは、インデント文字がPOファイルの対応するエントリで終了することなく、 &lt;code&gt;{% blocktrans %}&lt;/code&gt; タグのコンテンツをインデントするのに非常に役立ちます。これにより、変換プロセスが容易になります。</target>
        </trans-unit>
        <trans-unit id="42720cdbeb26755545dc879495f797069e58d4ab" translate="yes" xml:space="preserve">
          <source>Another feature &lt;code&gt;{% blocktranslate %}&lt;/code&gt; supports is the &lt;code&gt;trimmed&lt;/code&gt; option. This option will remove newline characters from the beginning and the end of the content of the &lt;code&gt;{% blocktranslate %}&lt;/code&gt; tag, replace any whitespace at the beginning and end of a line and merge all lines into one using a space character to separate them. This is quite useful for indenting the content of a &lt;code&gt;{% blocktranslate %}&lt;/code&gt; tag without having the indentation characters end up in the corresponding entry in the PO file, which makes the translation process easier.</source>
          <target state="translated">Another feature &lt;code&gt;{% blocktranslate %}&lt;/code&gt; supports is the &lt;code&gt;trimmed&lt;/code&gt; option. This option will remove newline characters from the beginning and the end of the content of the &lt;code&gt;{% blocktranslate %}&lt;/code&gt; tag, replace any whitespace at the beginning and end of a line and merge all lines into one using a space character to separate them. This is quite useful for indenting the content of a &lt;code&gt;{% blocktranslate %}&lt;/code&gt; tag without having the indentation characters end up in the corresponding entry in the PO file, which makes the translation process easier.</target>
        </trans-unit>
        <trans-unit id="f6f38b8bf22ce33d0915eebda059aeb43f57443f" translate="yes" xml:space="preserve">
          <source>Another option is to add the required hosts to &lt;a href=&quot;../../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;tools#django.test.override_settings&quot;&gt;&lt;code&gt;override_settings()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;tools#django.test.SimpleTestCase.modify_settings&quot;&gt;&lt;code&gt;modify_settings()&lt;/code&gt;&lt;/a&gt;. This option may be preferable in standalone apps that can&amp;rsquo;t package their own settings file or for projects where the list of domains is not static (e.g., subdomains for multitenancy). For example, you could write a test for the domain &lt;code&gt;http://otherserver/&lt;/code&gt; as follows:</source>
          <target state="translated">別のオプションは、&lt;a href=&quot;tools#django.test.override_settings&quot;&gt; &lt;code&gt;override_settings()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;tools#django.test.SimpleTestCase.modify_settings&quot;&gt; &lt;code&gt;modify_settings()&lt;/code&gt; &lt;/a&gt;を使用して、必要なホストを&lt;a href=&quot;../../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt; &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; &lt;/a&gt;に追加することです。このオプションは、独自の設定ファイルをパッケージ化できないスタンドアロンアプリや、ドメインのリストが静的ではないプロジェクト（マルチテナンシーのサブドメインなど）に適しています。たとえば、次のようにドメイン &lt;code&gt;http://otherserver/&lt;/code&gt; テストを作成できます。</target>
        </trans-unit>
        <trans-unit id="86cbfa1018d17aad7dbbe0a2952b209be21563af" translate="yes" xml:space="preserve">
          <source>Another option is to configure class attributes as keyword arguments to the &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; call in the URLconf:</source>
          <target state="translated">別のオプションは、&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt; &lt;code&gt;as_view()&lt;/code&gt; &lt;/a&gt;呼び出しのキーワード引数としてクラス属性を構成することです。</target>
        </trans-unit>
        <trans-unit id="0e2072ae951398dc6d033749ffe3f4ec2a9529ef" translate="yes" xml:space="preserve">
          <source>Another option is to use &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.namedtuple&quot;&gt;&lt;code&gt;collections.namedtuple()&lt;/code&gt;&lt;/a&gt; from the Python standard library. A &lt;code&gt;namedtuple&lt;/code&gt; is a tuple-like object that has fields accessible by attribute lookup; it&amp;rsquo;s also indexable and iterable. Results are immutable and accessible by field names or indices, which might be useful:</source>
          <target state="translated">別のオプションは、Python標準ライブラリの&lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.namedtuple&quot;&gt; &lt;code&gt;collections.namedtuple()&lt;/code&gt; &lt;/a&gt;を使用することです。 &lt;code&gt;namedtuple&lt;/code&gt; は、属性検索でアクセスフィールドを持つタプルのようなオブジェクトです。また、索引付けおよび反復可能です。結果は不変であり、フィールド名またはインデックスによってアクセスできます。これは役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="b600586952a903b98a1e51daa4f184b2a654da9b" translate="yes" xml:space="preserve">
          <source>Another option is to use the &lt;code&gt;init_command&lt;/code&gt; option for MySQLdb prior to creating your tables:</source>
          <target state="translated">別のオプションは、テーブルを作成する前に &lt;code&gt;init_command&lt;/code&gt; オプションを使用することです。</target>
        </trans-unit>
        <trans-unit id="4c3275efd45f8519667225b74be1bee3394ee839" translate="yes" xml:space="preserve">
          <source>Another option is to use the constructor for the specific geometry type that you wish to create. For example, a &lt;a href=&quot;#django.contrib.gis.geos.Point&quot;&gt;&lt;code&gt;Point&lt;/code&gt;&lt;/a&gt; object may be created by passing in the X and Y coordinates into its constructor:</source>
          <target state="translated">別のオプションは、作成する特定のジオメトリタイプのコンストラクタを使用することです。たとえば、&lt;a href=&quot;#django.contrib.gis.geos.Point&quot;&gt; &lt;code&gt;Point&lt;/code&gt; &lt;/a&gt;オブジェクトは、X座標とY座標をコンストラクターに渡すことで作成できます。</target>
        </trans-unit>
        <trans-unit id="5712178c1bd67ebd8b516f654132f1288bddf9c3" translate="yes" xml:space="preserve">
          <source>Another option is to wrap each &lt;code&gt;QuerySet&lt;/code&gt; using server-side cursors in an &lt;a href=&quot;../topics/db/transactions#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; block, because it disables &lt;code&gt;autocommit&lt;/code&gt; for the duration of the transaction. This way, the server-side cursor will only live for the duration of the transaction.</source>
          <target state="translated">別のオプションは、サーバーサイドカーソルを使用して各 &lt;code&gt;QuerySet&lt;/code&gt; を&lt;a href=&quot;../topics/db/transactions#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt;ブロックでラップすることです。これにより、トランザクションの期間中は &lt;code&gt;autocommit&lt;/code&gt; が無効になります。このようにして、サーバー側カーソルはトランザクションの間だけ存続します。</target>
        </trans-unit>
        <trans-unit id="5a4aa7df42c54947c30745a80b3d8f27cb3b16d7" translate="yes" xml:space="preserve">
          <source>Another possibility is to include additional URL patterns by using a list of &lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt; instances. For example, consider this URLconf:</source>
          <target state="translated">別の可能性は、&lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt; &lt;code&gt;path()&lt;/code&gt; &lt;/a&gt;インスタンスのリストを使用して、追加のURLパターンを含めることです。たとえば、次のURLconfについて考えてみます。</target>
        </trans-unit>
        <trans-unit id="8351180c3ac17f96e32412d210d1d3655c0a4ab4" translate="yes" xml:space="preserve">
          <source>Another possible attack would be if &lt;code&gt;good.example.com&lt;/code&gt; sets its &lt;a href=&quot;../../ref/settings#std:setting-SESSION_COOKIE_DOMAIN&quot;&gt;&lt;code&gt;SESSION_COOKIE_DOMAIN&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; which would cause session cookies from that site to be sent to &lt;code&gt;bad.example.com&lt;/code&gt;.</source>
          <target state="translated">別の可能性のある攻撃は、 &lt;code&gt;good.example.com&lt;/code&gt; が&lt;a href=&quot;../../ref/settings#std:setting-SESSION_COOKIE_DOMAIN&quot;&gt; &lt;code&gt;SESSION_COOKIE_DOMAIN&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; に設定すると、そのサイトのセッションCookieが &lt;code&gt;bad.example.com&lt;/code&gt; に送信されます。</target>
        </trans-unit>
        <trans-unit id="634ae931c8918bb787c1ab614abd3ba33818e955" translate="yes" xml:space="preserve">
          <source>Another side effect of using &lt;code&gt;commit=False&lt;/code&gt; is seen when your model has a many-to-many relation with another model. If your model has a many-to-many relation and you specify &lt;code&gt;commit=False&lt;/code&gt; when you save a form, Django cannot immediately save the form data for the many-to-many relation. This is because it isn&amp;rsquo;t possible to save many-to-many data for an instance until the instance exists in the database.</source>
          <target state="translated">&lt;code&gt;commit=False&lt;/code&gt; を使用するもう1つの副作用は、モデルが別のモデルと多対多の関係にある場合です。モデルに &lt;code&gt;commit=False&lt;/code&gt; 多の関係があり、フォームを保存するときにcommit = Falseを指定した場合、Djangoは多対多の関係のフォームデータをすぐには保存できません。これは、インスタンスがデータベースに存在するまで、インスタンスの多対多のデー​​タを保存できないためです。</target>
        </trans-unit>
        <trans-unit id="19a769a5876c833200ddb5a61c4aac99cdd61a35" translate="yes" xml:space="preserve">
          <source>Another solution is to sort the data in the template using the &lt;a href=&quot;#std:templatefilter-dictsort&quot;&gt;&lt;code&gt;dictsort&lt;/code&gt;&lt;/a&gt; filter, if your data is in a list of dictionaries:</source>
          <target state="translated">別の解決策は、データが辞書のリストにある場合、&lt;a href=&quot;#std:templatefilter-dictsort&quot;&gt; &lt;code&gt;dictsort&lt;/code&gt; &lt;/a&gt;フィルターを使用してテンプレートのデータをソートすることです。</target>
        </trans-unit>
        <trans-unit id="e2bcb7bd2a2294b9fd69bcc472db817498190e7c" translate="yes" xml:space="preserve">
          <source>Another thing to note about this example is that &lt;code&gt;Manager&lt;/code&gt; methods can access &lt;code&gt;self.model&lt;/code&gt; to get the model class to which they&amp;rsquo;re attached.</source>
          <target state="translated">この例についてもう1つ注意する点は、 &lt;code&gt;Manager&lt;/code&gt; メソッドが &lt;code&gt;self.model&lt;/code&gt; にアクセスして、アタッチされているモデルクラスを取得できることです。</target>
        </trans-unit>
        <trans-unit id="c24ed1973db71e4a285cbe24ded0d0a7d1fac1f2" translate="yes" xml:space="preserve">
          <source>Another useful benefit of &lt;code&gt;F()&lt;/code&gt; is that having the database - rather than Python - update a field&amp;rsquo;s value avoids a &lt;em&gt;race condition&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;F()&lt;/code&gt; のもう1つの便利な利点は、Pythonではなくデータベースにフィールドの値を更新させることで、&lt;em&gt;競合状態を&lt;/em&gt;回避できる&lt;em&gt;こと&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="350b06198d36b009231e64363f3cd68696d2c3fb" translate="yes" xml:space="preserve">
          <source>Another way to access the same information is by querying the &lt;a href=&quot;queries#m2m-reverse-relationships&quot;&gt;many-to-many reverse relationship&lt;/a&gt; from a &lt;code&gt;Person&lt;/code&gt; object:</source>
          <target state="translated">同じ情報にアクセスするもう1つの方法は、 &lt;code&gt;Person&lt;/code&gt; オブジェクトから&lt;a href=&quot;queries#m2m-reverse-relationships&quot;&gt;多対多の逆リレーションシップを&lt;/a&gt;クエリすることです。</target>
        </trans-unit>
        <trans-unit id="c6720499a689b825b3931c9adad686693b94d7ca" translate="yes" xml:space="preserve">
          <source>Any &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; that is associated with an object (as with &lt;code&gt;Car.photo&lt;/code&gt;, below) will also have a couple of extra methods:</source>
          <target state="translated">オブジェクトに関連付けられているすべての&lt;a href=&quot;#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;（以下の &lt;code&gt;Car.photo&lt;/code&gt; と同様）にも、いくつかの追加メソッドがあります。</target>
        </trans-unit>
        <trans-unit id="259f07ccd997e3ebbc7533171ea4ac71a43f828b" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;Car&lt;/code&gt; instance will have a &lt;code&gt;photo&lt;/code&gt; attribute that you can use to get at the details of the attached photo:</source>
          <target state="translated">どれでも &lt;code&gt;Car&lt;/code&gt; インスタンスがあります &lt;code&gt;photo&lt;/code&gt; 使用すると、添付写真の詳細を取得するために使用できる属性を：</target>
        </trans-unit>
        <trans-unit id="82f12e18262dfa08be2fd8dc34797d2dadcfa0eb" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;choices&lt;/code&gt; attribute set on the formfield will be limited to the form field only. If the corresponding field on the model has choices set, the choices provided to the form must be a valid subset of those choices, otherwise the form submission will fail with a &lt;a href=&quot;../../exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; when the model itself is validated before saving.</source>
          <target state="translated">いずれの &lt;code&gt;choices&lt;/code&gt; フォームフィールドに設定された属性は、フォームフィールドに制限されます。モデルの対応するフィールドに選択肢が設定されている場合、フォームに提供される選択肢はそれらの選択肢の有効なサブセットである必要があります。そうでない場合、モデルの保存が完了する前にモデル自体が検証されると、フォームの送信は&lt;a href=&quot;../../exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; で&lt;/a&gt;失敗します。</target>
        </trans-unit>
        <trans-unit id="3cfcbfb5e16e8c8b294fbb366355136915411066" translate="yes" xml:space="preserve">
          <source>Any Django field</source>
          <target state="translated">任意の Django フィールド</target>
        </trans-unit>
        <trans-unit id="f52c2bd963740dcc4cc74100e5cb34b31d2ff1f6" translate="yes" xml:space="preserve">
          <source>Any arguments following a &lt;code&gt;--&lt;/code&gt; divider will be passed on to the underlying command-line client. For example, with PostgreSQL you can use the &lt;code&gt;psql&lt;/code&gt; command&amp;rsquo;s &lt;code&gt;-c&lt;/code&gt; flag to execute a raw SQL query directly:</source>
          <target state="translated">Any arguments following a &lt;code&gt;--&lt;/code&gt; divider will be passed on to the underlying command-line client. For example, with PostgreSQL you can use the &lt;code&gt;psql&lt;/code&gt; command&amp;rsquo;s &lt;code&gt;-c&lt;/code&gt; flag to execute a raw SQL query directly:</target>
        </trans-unit>
        <trans-unit id="0943bcec768321ce586e2262a98b924049a43318" translate="yes" xml:space="preserve">
          <source>Any arguments passed to &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; will override attributes set on the class. In this example, we set &lt;code&gt;template_name&lt;/code&gt; on the &lt;code&gt;TemplateView&lt;/code&gt;. A similar overriding pattern can be used for the &lt;code&gt;url&lt;/code&gt; attribute on &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.RedirectView&quot;&gt;&lt;code&gt;RedirectView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt; &lt;code&gt;as_view()&lt;/code&gt; に&lt;/a&gt;渡された引数は、クラスに設定された属性をオーバーライドします。この例では、 &lt;code&gt;TemplateView&lt;/code&gt; に &lt;code&gt;template_name&lt;/code&gt; を設定します。同様のオーバーライドパターンを&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.RedirectView&quot;&gt; &lt;code&gt;RedirectView&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;url&lt;/code&gt; 属性に使用できます。</target>
        </trans-unit>
        <trans-unit id="2b95e74b82f7912fd5a57b4159d009906620dcdd" translate="yes" xml:space="preserve">
          <source>Any cached relations are cleared from the reloaded instance.</source>
          <target state="translated">キャッシュされたリレーションは、リロードされたインスタンスからクリアされます。</target>
        </trans-unit>
        <trans-unit id="87ad20ba32653e2c8263b7d56b8e2b1f508d28d2" translate="yes" xml:space="preserve">
          <source>Any class reference (must be in module&amp;rsquo;s top-level scope)</source>
          <target state="translated">任意のクラス参照（モジュールの最上位スコープにある必要があります）</target>
        </trans-unit>
        <trans-unit id="d7cfbb9e6237b5e4d9536ebf29c5cc594bad4538" translate="yes" xml:space="preserve">
          <source>Any extra keyword arguments you pass to &lt;code&gt;__init__&lt;/code&gt; will be stored in &lt;code&gt;self.feed&lt;/code&gt; for use with &lt;a href=&quot;#custom-feed-generators&quot;&gt;custom feed generators&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;__init__&lt;/code&gt; に渡す追加のキーワード引数は、&lt;a href=&quot;#custom-feed-generators&quot;&gt;カスタムフィードジェネレーター&lt;/a&gt;で使用するために &lt;code&gt;self.feed&lt;/code&gt; に保存されます。</target>
        </trans-unit>
        <trans-unit id="5e8de9d3cf5f05073aa258263f2473c8604fc0dd" translate="yes" xml:space="preserve">
          <source>Any extra keyword arguments you pass to &lt;code&gt;__init__&lt;/code&gt; will be stored in &lt;code&gt;self.feed&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__init__&lt;/code&gt; に渡す追加のキーワード引数はすべて &lt;code&gt;self.feed&lt;/code&gt; に格納されます。</target>
        </trans-unit>
        <trans-unit id="eaa1bdee468ee233f3d4bef58a335623ca9709d4" translate="yes" xml:space="preserve">
          <source>Any field in &lt;code&gt;list_editable&lt;/code&gt; must also be in &lt;code&gt;list_display&lt;/code&gt;. You can&amp;rsquo;t edit a field that&amp;rsquo;s not displayed!</source>
          <target state="translated">内の任意のフィールド &lt;code&gt;list_editable&lt;/code&gt; はまた、でなければなりません &lt;code&gt;list_display&lt;/code&gt; 。表示されていないフィールドは編集できません！</target>
        </trans-unit>
        <trans-unit id="bc2c1f8f4f91fd73109d4df0901557ed01d4acba" translate="yes" xml:space="preserve">
          <source>Any fields not included in a form by the above logic will not be set by the form&amp;rsquo;s &lt;code&gt;save()&lt;/code&gt; method. Also, if you manually add the excluded fields back to the form, they will not be initialized from the model instance.</source>
          <target state="translated">上記のロジックによってフォームに含まれていないフィールドは、フォームの &lt;code&gt;save()&lt;/code&gt; メソッドによって設定されません。また、除外されたフィールドをフォームに手動で追加した場合、それらはモデルインスタンスから初期化されません。</target>
        </trans-unit>
        <trans-unit id="d0f265b427e58215ab20a4d836d7f8c516eb4a51" translate="yes" xml:space="preserve">
          <source>Any fields that are stored with &lt;code&gt;VARCHAR&lt;/code&gt; column types have their &lt;code&gt;max_length&lt;/code&gt; restricted to 255 characters if you are using &lt;code&gt;unique=True&lt;/code&gt; for the field. This affects &lt;a href=&quot;models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;models/fields#django.db.models.SlugField&quot;&gt;&lt;code&gt;SlugField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">フィールドに &lt;code&gt;unique=True&lt;/code&gt; を使用している場合、 &lt;code&gt;VARCHAR&lt;/code&gt; 列タイプで保管されるフィールドの &lt;code&gt;max_length&lt;/code&gt; は255文字に制限されます。これは&lt;a href=&quot;models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;models/fields#django.db.models.SlugField&quot;&gt; &lt;code&gt;SlugField&lt;/code&gt; に&lt;/a&gt;影響します。</target>
        </trans-unit>
        <trans-unit id="361ed15fdbee1edcf82d9d0eaab3f6d9d5c09eb3" translate="yes" xml:space="preserve">
          <source>Any fields that are stored with &lt;code&gt;VARCHAR&lt;/code&gt; column types may have their &lt;code&gt;max_length&lt;/code&gt; restricted to 255 characters if you are using &lt;code&gt;unique=True&lt;/code&gt; for the field. This affects &lt;a href=&quot;models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;models/fields#django.db.models.SlugField&quot;&gt;&lt;code&gt;SlugField&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/create-index.html#create-index-column-prefixes&quot;&gt;the MySQL documentation&lt;/a&gt; for more details.</source>
          <target state="translated">Any fields that are stored with &lt;code&gt;VARCHAR&lt;/code&gt; column types may have their &lt;code&gt;max_length&lt;/code&gt; restricted to 255 characters if you are using &lt;code&gt;unique=True&lt;/code&gt; for the field. This affects &lt;a href=&quot;models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;models/fields#django.db.models.SlugField&quot;&gt; &lt;code&gt;SlugField&lt;/code&gt; &lt;/a&gt;. See &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/create-index.html#create-index-column-prefixes&quot;&gt;the MySQL documentation&lt;/a&gt; for more details.</target>
        </trans-unit>
        <trans-unit id="23d9acd68c46ec11121d32d169fe6c012befed6e" translate="yes" xml:space="preserve">
          <source>Any fields used in an &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt; call are included in the SQL &lt;code&gt;SELECT&lt;/code&gt; columns. This can sometimes lead to unexpected results when used in conjunction with &lt;code&gt;distinct()&lt;/code&gt;. If you order by fields from a related model, those fields will be added to the selected columns and they may make otherwise duplicate rows appear to be distinct. Since the extra columns don&amp;rsquo;t appear in the returned results (they are only there to support ordering), it sometimes looks like non-distinct results are being returned.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt;呼び出しで使用されるフィールドは、SQL &lt;code&gt;SELECT&lt;/code&gt; 列に含まれます。これは、 &lt;code&gt;distinct()&lt;/code&gt; と組み合わせて使用​​すると、予期しない結果になることがあります。関連モデルのフィールドで並べ替えると、それらのフィールドが選択した列に追加され、重複した行が区別されるように見える場合があります。追加の列は返された結果に表示されないため（順序付けをサポートするためにのみ存在するため）、不明確でない結果が返されているように見えることがあります。</target>
        </trans-unit>
        <trans-unit id="389de725feff980095e919bb4630a4b7aa4cbedb" translate="yes" xml:space="preserve">
          <source>Any function or method reference (e.g. &lt;code&gt;datetime.datetime.today&lt;/code&gt;) (must be in module&amp;rsquo;s top-level scope)</source>
          <target state="translated">関数またはメソッドの参照（例： &lt;code&gt;datetime.datetime.today&lt;/code&gt; ）（モジュールのトップレベルスコープ内にある必要があります）</target>
        </trans-unit>
        <trans-unit id="340f6cd4cdae6a9fe26ccc2c1321f21a7a65b64b" translate="yes" xml:space="preserve">
          <source>Any help text that has been associated with the field.</source>
          <target state="translated">フィールドに関連付けられた任意のヘルプテキスト。</target>
        </trans-unit>
        <trans-unit id="a4d976c10e6d33bf9091130ca4635d6f2a79ca77" translate="yes" xml:space="preserve">
          <source>Any initial data loaded in migrations will only be available in &lt;code&gt;TestCase&lt;/code&gt; tests and not in &lt;code&gt;TransactionTestCase&lt;/code&gt; tests, and additionally only on backends where transactions are supported (the most important exception being MyISAM). This is also true for tests which rely on &lt;code&gt;TransactionTestCase&lt;/code&gt; such as &lt;a href=&quot;tools#django.test.LiveServerTestCase&quot;&gt;&lt;code&gt;LiveServerTestCase&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.testing.StaticLiveServerTestCase&quot;&gt;&lt;code&gt;StaticLiveServerTestCase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">移行で読み込まれる初期データは、 &lt;code&gt;TestCase&lt;/code&gt; テストでのみ利用可能であり、 &lt;code&gt;TransactionTestCase&lt;/code&gt; テストでは利用できません。さらに、トランザクションがサポートされているバックエンドでのみ利用できます（最も重要な例外はMyISAMです）。これは、&lt;a href=&quot;tools#django.test.LiveServerTestCase&quot;&gt; &lt;code&gt;LiveServerTestCase&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.testing.StaticLiveServerTestCase&quot;&gt; &lt;code&gt;StaticLiveServerTestCase&lt;/code&gt; &lt;/a&gt;などの &lt;code&gt;TransactionTestCase&lt;/code&gt; に依存するテストにも当てはまります。</target>
        </trans-unit>
        <trans-unit id="9f7538d5b082eb7ff86214f434df9e9db4b7599c" translate="yes" xml:space="preserve">
          <source>Any items in the &lt;code&gt;OPTIONS&lt;/code&gt; in &lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt;&lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt;&lt;/a&gt; for your validator will be passed to the constructor. All constructor arguments should have a default value.</source>
          <target state="translated">バリデーターの&lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt; &lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;OPTIONS&lt;/code&gt; にある項目は、コンストラクターに渡されます。すべてのコンストラクター引数にはデフォルト値が必要です。</target>
        </trans-unit>
        <trans-unit id="269822aff3cab02690efcc28e3a2fadd4d2d5a67" translate="yes" xml:space="preserve">
          <source>Any keyword arguments passed to &lt;code&gt;get_or_create()&lt;/code&gt; &amp;mdash; &lt;em&gt;except&lt;/em&gt; an optional one called &lt;code&gt;defaults&lt;/code&gt; &amp;mdash; will be used in a &lt;a href=&quot;#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; call. If an object is found, &lt;code&gt;get_or_create()&lt;/code&gt; returns a tuple of that object and &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">渡された任意のキーワード引数 &lt;code&gt;get_or_create()&lt;/code&gt; - &lt;em&gt;除いて&lt;/em&gt;、オプション1と呼ばれる &lt;code&gt;defaults&lt;/code&gt; -に使用される&lt;a href=&quot;#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;の呼び出し。オブジェクトが見つかった場合、 &lt;code&gt;get_or_create()&lt;/code&gt; はそのオブジェクトのタプルと &lt;code&gt;False&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="aa00f3f233bd76654fd4c34e32d4e0293431a21f" translate="yes" xml:space="preserve">
          <source>Any migration can be reverted with &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; by using the number of previous migrations:</source>
          <target state="translated">任意の移行はして元に戻すことが可能&lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;前の移行の数を使用することにより：</target>
        </trans-unit>
        <trans-unit id="206cfa10cfb7598b7f46150d0b397fbd96ad0e5a" translate="yes" xml:space="preserve">
          <source>Any object that has a URL that uniquely identifies it should define this method.</source>
          <target state="translated">それを一意に識別する URL を持つオブジェクトはすべて、このメソッドを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="bff4e22bfefe56190b6103de76226c38c3154301" translate="yes" xml:space="preserve">
          <source>Any option passed to the &lt;code&gt;startapp&lt;/code&gt; command (among the command&amp;rsquo;s supported options)</source>
          <target state="translated">&lt;code&gt;startapp&lt;/code&gt; コマンドに渡されたオプション（コマンドでサポートされているオプションの中で）</target>
        </trans-unit>
        <trans-unit id="9e138beee32bdd3845314ecab39ac8b6f36c0256" translate="yes" xml:space="preserve">
          <source>Any option passed to the &lt;code&gt;startproject&lt;/code&gt; command (among the command&amp;rsquo;s supported options)</source>
          <target state="translated">&lt;code&gt;startproject&lt;/code&gt; コマンドに渡されたオプション（コマンドでサポートされているオプションの中で）</target>
        </trans-unit>
        <trans-unit id="5723036376b87299a4b70f4866a921fb58935b0c" translate="yes" xml:space="preserve">
          <source>Any other day is formatted according to given argument or the &lt;a href=&quot;../settings#std:setting-DATE_FORMAT&quot;&gt;&lt;code&gt;DATE_FORMAT&lt;/code&gt;&lt;/a&gt; setting if no argument is given.</source>
          <target state="translated">その他の日は、指定された引数、または引数が指定されていない場合は&lt;a href=&quot;../settings#std:setting-DATE_FORMAT&quot;&gt; &lt;code&gt;DATE_FORMAT&lt;/code&gt; &lt;/a&gt;設定に従ってフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="ab61e75123334a3ff03ee2353a6d3605bcdc00e5" translate="yes" xml:space="preserve">
          <source>Any request that could be used to change the state of the system - for example, a request that makes changes in the database - should use &lt;code&gt;POST&lt;/code&gt;. &lt;code&gt;GET&lt;/code&gt; should be used only for requests that do not affect the state of the system.</source>
          <target state="translated">システムの状態を変更するために使用できるすべての要求（たとえば、データベースを変更する要求）は、 &lt;code&gt;POST&lt;/code&gt; を使用する必要があります。 &lt;code&gt;GET&lt;/code&gt; は、システムの状態に影響を与えない要求に対してのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="016a35f4da2b589350ad00d87184ff46d26ee10f" translate="yes" xml:space="preserve">
          <source>Any usage of &lt;a href=&quot;../topics/signing&quot;&gt;cryptographic signing&lt;/a&gt;, unless a different key is provided.</source>
          <target state="translated">別のキーが提供されない限り、&lt;a href=&quot;../topics/signing&quot;&gt;暗号化署名の&lt;/a&gt;使用。</target>
        </trans-unit>
        <trans-unit id="1cef5f901bb8067b01d106ba21a0409d9d05625a" translate="yes" xml:space="preserve">
          <source>Any valid &lt;code&gt;Cache-Control&lt;/code&gt; response directive is valid in &lt;code&gt;cache_control()&lt;/code&gt;. Here are some more examples:</source>
          <target state="translated">有効な &lt;code&gt;Cache-Control&lt;/code&gt; 応答ディレクティブは、 &lt;code&gt;cache_control()&lt;/code&gt; で有効です。以下にいくつかの例を示します。</target>
        </trans-unit>
        <trans-unit id="08019805145fd9728fd9fa82951bfad51124fe4e" translate="yes" xml:space="preserve">
          <source>Any valid template lookup is a legal grouping attribute for the regroup tag, including methods, attributes, dictionary keys and list items. For example, if the &amp;ldquo;country&amp;rdquo; field is a foreign key to a class with an attribute &amp;ldquo;description,&amp;rdquo; you could use:</source>
          <target state="translated">有効なテンプレートルックアップは、メソッド、属性、辞書キー、リストアイテムなど、再グループ化タグの有効なグループ化属性です。たとえば、「country」フィールドが「description」属性を持つクラスへの外部キーである場合、次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="a547bb66aef536c1758d075687b8c3c012333d15" translate="yes" xml:space="preserve">
          <source>Any variable set in the context will only be available in the same &lt;code&gt;block&lt;/code&gt; of the template in which it was assigned. This behavior is intentional; it provides a scope for variables so that they don&amp;rsquo;t conflict with context in other blocks.</source>
          <target state="translated">コンテキストで設定された変数は、それが割り当てられたテンプレートの同じ &lt;code&gt;block&lt;/code&gt; でのみ使用できます。この動作は意図的なものです。他のブロックのコンテキストと競合しないように変数のスコープを提供します。</target>
        </trans-unit>
        <trans-unit id="b921f6c9cdbfc0bbe655c78b4cff9c39227a8ad1" translate="yes" xml:space="preserve">
          <source>Any variables from &lt;a href=&quot;#django.views.generic.detail.SingleObjectMixin.get_context_data&quot;&gt;&lt;code&gt;get_context_data()&lt;/code&gt;&lt;/a&gt; take precedence over context variables from &lt;a href=&quot;../templates/api#subclassing-context-requestcontext&quot;&gt;context processors&lt;/a&gt;. For example, if your view sets the &lt;a href=&quot;#django.views.generic.detail.SingleObjectMixin.model&quot;&gt;&lt;code&gt;model&lt;/code&gt;&lt;/a&gt; attribute to &lt;a href=&quot;../contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt;, the default context object name of &lt;code&gt;user&lt;/code&gt; would override the &lt;code&gt;user&lt;/code&gt; variable from the &lt;a href=&quot;../templates/api#django.contrib.auth.context_processors.auth&quot;&gt;&lt;code&gt;django.contrib.auth.context_processors.auth()&lt;/code&gt;&lt;/a&gt; context processor. Use &lt;a href=&quot;#django.views.generic.detail.SingleObjectMixin.get_context_object_name&quot;&gt;&lt;code&gt;get_context_object_name()&lt;/code&gt;&lt;/a&gt; to avoid a clash.</source>
          <target state="translated">すべての変数&lt;a href=&quot;#django.views.generic.detail.SingleObjectMixin.get_context_data&quot;&gt; &lt;code&gt;get_context_data()&lt;/code&gt; &lt;/a&gt;からのコンテキスト変数よりも優先&lt;a href=&quot;../templates/api#subclassing-context-requestcontext&quot;&gt;コンテキストプロセッサ&lt;/a&gt;。あなたのビューは設定した場合たとえば、&lt;a href=&quot;#django.views.generic.detail.SingleObjectMixin.model&quot;&gt; &lt;code&gt;model&lt;/code&gt; &lt;/a&gt;に属性&lt;a href=&quot;../contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt;、デフォルトのコンテキスト・オブジェクト名 &lt;code&gt;user&lt;/code&gt; オーバーライドします &lt;code&gt;user&lt;/code&gt; からの変数&lt;a href=&quot;../templates/api#django.contrib.auth.context_processors.auth&quot;&gt; &lt;code&gt;django.contrib.auth.context_processors.auth()&lt;/code&gt; &lt;/a&gt;コンテキストプロセッサを。衝突を回避するには、&lt;a href=&quot;#django.views.generic.detail.SingleObjectMixin.get_context_object_name&quot;&gt; &lt;code&gt;get_context_object_name()&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="b3a7f61859d620559f076dde253a47afc056d542" translate="yes" xml:space="preserve">
          <source>Any view can be declared async by making the callable part of it return a coroutine - commonly, this is done using &lt;code&gt;async def&lt;/code&gt;. For a function-based view, this means declaring the whole view using &lt;code&gt;async def&lt;/code&gt;. For a class-based view, this means making its &lt;code&gt;__call__()&lt;/code&gt; method an &lt;code&gt;async def&lt;/code&gt; (not its &lt;code&gt;__init__()&lt;/code&gt; or &lt;code&gt;as_view()&lt;/code&gt;).</source>
          <target state="translated">Any view can be declared async by making the callable part of it return a coroutine - commonly, this is done using &lt;code&gt;async def&lt;/code&gt; . For a function-based view, this means declaring the whole view using &lt;code&gt;async def&lt;/code&gt; . For a class-based view, this means making its &lt;code&gt;__call__()&lt;/code&gt; method an &lt;code&gt;async def&lt;/code&gt; (not its &lt;code&gt;__init__()&lt;/code&gt; or &lt;code&gt;as_view()&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="33fdeb58433575a49dc08ea16ba42eea7ffe5d40" translate="yes" xml:space="preserve">
          <source>Any view you render that uses the admin templates, or extends the base admin template, should set &lt;code&gt;request.current_app&lt;/code&gt; before rendering the template. It should be set to either &lt;code&gt;self.name&lt;/code&gt; if your view is on an &lt;code&gt;AdminSite&lt;/code&gt; or &lt;code&gt;self.admin_site.name&lt;/code&gt; if your view is on a &lt;code&gt;ModelAdmin&lt;/code&gt;.</source>
          <target state="translated">レンダリングする管理テンプレートを使用するビュー、または基本管理テンプレートを拡張するビューでは、テンプレートをレンダリングする前に &lt;code&gt;request.current_app&lt;/code&gt; を設定する必要があります。これは、どちらかに設定する必要があります &lt;code&gt;self.name&lt;/code&gt; あなたのビューが上にある場合 &lt;code&gt;AdminSite&lt;/code&gt; か &lt;code&gt;self.admin_site.name&lt;/code&gt; あなたのビューが上にある場合 &lt;code&gt;ModelAdmin&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="c61ae39f874e4c3fea92eacfe4842fbe9d061b82" translate="yes" xml:space="preserve">
          <source>Any website which allows users to log in should enforce site-wide HTTPS to avoid transmitting access tokens in clear. In Django, access tokens include the login/password, the session cookie, and password reset tokens. (You can&amp;rsquo;t do much to protect password reset tokens if you&amp;rsquo;re sending them by email.)</source>
          <target state="translated">ユーザーがログインできるWebサイトでは、サイト全体にHTTPSを適用して、アクセストークンが明確に送信されないようにする必要があります。Djangoでは、アクセストークンには、ログイン/パスワード、セッションCookie、およびパスワードリセットトークンが含まれます。（電子メールで送信する場合、パスワードリセットトークンを保護することはできません。）</target>
        </trans-unit>
        <trans-unit id="482767877854b0eb1336580862dfd1a6bcdc6520" translate="yes" xml:space="preserve">
          <source>Anything with a custom &lt;code&gt;deconstruct()&lt;/code&gt; method (&lt;a href=&quot;#custom-deconstruct-method&quot;&gt;see below&lt;/a&gt;)</source>
          <target state="translated">カスタムの &lt;code&gt;deconstruct()&lt;/code&gt; メソッドを使用したもの（&lt;a href=&quot;#custom-deconstruct-method&quot;&gt;以下を参照&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="63593d0d5d435dfe384aa50d6b9d31230859491f" translate="yes" xml:space="preserve">
          <source>App names</source>
          <target state="translated">アプリ名</target>
        </trans-unit>
        <trans-unit id="bd830f06d5852ef2c9dc8bcccf701902da95053b" translate="yes" xml:space="preserve">
          <source>Appends an item to the internal list associated with key.</source>
          <target state="translated">キーに関連付けられた内部リストに項目を追加します。</target>
        </trans-unit>
        <trans-unit id="aa63e6b9e38d910d3df41e7a8cac3f1bb7e475e3" translate="yes" xml:space="preserve">
          <source>Application &lt;a href=&quot;applications#django.apps.AppConfig.label&quot;&gt;&lt;code&gt;labels&lt;/code&gt;&lt;/a&gt; &amp;mdash; by default the final part of the name &amp;mdash; must be unique too. For example, you can&amp;rsquo;t include both &lt;code&gt;django.contrib.auth&lt;/code&gt; and &lt;code&gt;myproject.auth&lt;/code&gt;. However, you can relabel an application with a custom configuration that defines a different &lt;a href=&quot;applications#django.apps.AppConfig.label&quot;&gt;&lt;code&gt;label&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">アプリケーション&lt;a href=&quot;applications#django.apps.AppConfig.label&quot;&gt; &lt;code&gt;labels&lt;/code&gt; &lt;/a&gt;（デフォルトでは名前の最後の部分）も一意である必要があります。たとえば、 &lt;code&gt;django.contrib.auth&lt;/code&gt; と &lt;code&gt;myproject.auth&lt;/code&gt; の両方を含めることはできません。ただし、別の&lt;a href=&quot;applications#django.apps.AppConfig.label&quot;&gt; &lt;code&gt;label&lt;/code&gt; &lt;/a&gt;を定義するカスタム構成でアプリケーションのラベルを変更できます。</target>
        </trans-unit>
        <trans-unit id="cce177b4ed99f13272552802e5efb7cd98ca52c8" translate="yes" xml:space="preserve">
          <source>Application &lt;a href=&quot;applications#django.apps.AppConfig.name&quot;&gt;&lt;code&gt;names&lt;/code&gt;&lt;/a&gt; &amp;mdash; the dotted Python path to the application package &amp;mdash; must be unique. There is no way to include the same application twice, short of duplicating its code under another name.</source>
          <target state="translated">アプリケーション&lt;a href=&quot;applications#django.apps.AppConfig.name&quot;&gt; &lt;code&gt;names&lt;/code&gt; &lt;/a&gt; &amp;mdash;アプリケーションパッケージへのドット付きPythonパス&amp;mdash;は一意である必要があります。同じアプリケーションを2回インクルードする方法はありません。別の名前でコードを複製することです。</target>
        </trans-unit>
        <trans-unit id="1ce84d4d04cdd60bd8ab75207bda952026831b49" translate="yes" xml:space="preserve">
          <source>Application configuration</source>
          <target state="translated">アプリケーションの設定</target>
        </trans-unit>
        <trans-unit id="2d00cf03fc5959163a7822755887dc62e3a89d38" translate="yes" xml:space="preserve">
          <source>Application configuration objects store metadata for an application. Some attributes can be configured in &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; subclasses. Others are set by Django and read-only.</source>
          <target state="translated">アプリケーション構成オブジェクトは、アプリケーションのメタデータを格納します。一部の属性は、&lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt;サブクラスで構成できます。その他はDjangoによって設定され、読み取り専用です。</target>
        </trans-unit>
        <trans-unit id="02814f34a196dfe9c70486833f53df2ac42d4ff8" translate="yes" xml:space="preserve">
          <source>Application index page</source>
          <target state="translated">アプリケーションインデックスページ</target>
        </trans-unit>
        <trans-unit id="1fba94f3256e26835d76c00860685efd830812bb" translate="yes" xml:space="preserve">
          <source>Application labels (that is, the final part of the dotted path to application packages) &lt;em&gt;must&lt;/em&gt; be unique in &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;. Avoid using the same label as any of the Django &lt;a href=&quot;../ref/contrib/index&quot;&gt;contrib packages&lt;/a&gt;, for example &lt;code&gt;auth&lt;/code&gt;, &lt;code&gt;admin&lt;/code&gt;, or &lt;code&gt;messages&lt;/code&gt;.</source>
          <target state="translated">アプリケーションラベル（つまり、アプリケーションパッケージへの点線のパスの最後の部分）&lt;em&gt;は&lt;/em&gt;、&lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;で一意である&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。Djangoのいずれかと同じラベルを使用しないでください&lt;a href=&quot;../ref/contrib/index&quot;&gt;contribのパッケージ&lt;/a&gt;例のために、 &lt;code&gt;auth&lt;/code&gt; 、 &lt;code&gt;admin&lt;/code&gt; 、または &lt;code&gt;messages&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bb450da0c07754aedf67cd45c88b1558ac1cd645" translate="yes" xml:space="preserve">
          <source>Application names and labels must be unique in &lt;a href=&quot;#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">アプリケーション名とラベルは&lt;a href=&quot;#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;で一意である必要があります</target>
        </trans-unit>
        <trans-unit id="07f619ff555df81b21d8f81b05235ca1997f69ce" translate="yes" xml:space="preserve">
          <source>Application namespaces of included URLconfs can be specified in two ways.</source>
          <target state="translated">インクルードされたURLconfsのアプリケーション名前空間は、2つの方法で指定することができます。</target>
        </trans-unit>
        <trans-unit id="751084ce854ca0846d5944c04c858023f5b8c71c" translate="yes" xml:space="preserve">
          <source>Application registry</source>
          <target state="translated">アプリケーションレジストリ</target>
        </trans-unit>
        <trans-unit id="76c74bd071dd73f01696fddbbffc77712a479faf" translate="yes" xml:space="preserve">
          <source>Applications</source>
          <target state="translated">Applications</target>
        </trans-unit>
        <trans-unit id="2d95a17e385a3c2fb23081cac8c9295e5d6e462d" translate="yes" xml:space="preserve">
          <source>Applications can register their own actions with &lt;code&gt;manage.py&lt;/code&gt;. For example, you might want to add a &lt;code&gt;manage.py&lt;/code&gt; action for a Django app that you&amp;rsquo;re distributing. In this document, we will be building a custom &lt;code&gt;closepoll&lt;/code&gt; command for the &lt;code&gt;polls&lt;/code&gt; application from the &lt;a href=&quot;../intro/tutorial01&quot;&gt;tutorial&lt;/a&gt;.</source>
          <target state="translated">アプリケーションは独自のアクションを &lt;code&gt;manage.py&lt;/code&gt; に登録できます。たとえば、配布しているDjangoアプリに &lt;code&gt;manage.py&lt;/code&gt; アクションを追加したい場合があります。このドキュメントでは、&lt;a href=&quot;../intro/tutorial01&quot;&gt;チュートリアル&lt;/a&gt;から &lt;code&gt;polls&lt;/code&gt; アプリケーションのカスタム &lt;code&gt;closepoll&lt;/code&gt; コマンドを作成します。</target>
        </trans-unit>
        <trans-unit id="b33e5c91a312fb3c95a81e0182e2a5529ab4d2d6" translate="yes" xml:space="preserve">
          <source>Applications include some combination of models, views, templates, template tags, static files, URLs, middleware, etc. They&amp;rsquo;re generally wired into projects with the &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting and optionally with other mechanisms such as URLconfs, the &lt;a href=&quot;settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting, or template inheritance.</source>
          <target state="translated">アプリケーションには、モデル、ビュー、テンプレート、テンプレートタグ、静的ファイル、URL、ミドルウェアなどの組み合わせが含まれます。これらは通常、&lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;設定を使用してプロジェクトに関連付けられ、オプションでURLconf、&lt;a href=&quot;settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;設定、テンプレート継承などの他のメカニズムを使用して接続されます。。</target>
        </trans-unit>
        <trans-unit id="fcf5bca7c1c28b2d4896a4ad439584b5047d4594" translate="yes" xml:space="preserve">
          <source>Applies HTML escaping to a string (see the &lt;a href=&quot;#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filter for details). This filter is applied &lt;em&gt;immediately&lt;/em&gt; and returns a new, escaped string. This is useful in the rare cases where you need multiple escaping or want to apply other filters to the escaped results. Normally, you want to use the &lt;a href=&quot;#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filter.</source>
          <target state="translated">文字列にHTMLエスケープを適用します（詳細については、&lt;a href=&quot;#std:templatefilter-escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; &lt;/a&gt;フィルターを参照してください）。このフィルターは&lt;em&gt;すぐに&lt;/em&gt;適用され、エスケープされた新しい文字列を返します。これは、複数のエスケープが必要になったり、エスケープされた結果に他のフィルターを適用したりするまれなケースで役立ちます。通常は、&lt;a href=&quot;#std:templatefilter-escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; &lt;/a&gt;フィルターを使用します。</target>
        </trans-unit>
        <trans-unit id="84df2e98f0fb6b4a2a7a0e18e64e0533759512be" translate="yes" xml:space="preserve">
          <source>Applies NFKC Unicode normalization to usernames so that visually identical characters with different Unicode code points are considered identical.</source>
          <target state="translated">NFKC Unicode 正規化をユーザ名に適用して、Unicode コ ー ド ポ イ ン ト が異な る 視覚的に同一のキ ャ ラ ク タ が同一であ る と 認識 さ れ る よ う に し ます。</target>
        </trans-unit>
        <trans-unit id="97651a1b0d977cf8ff25a459e82fee2dcd0fc103" translate="yes" xml:space="preserve">
          <source>Applies the &lt;a href=&quot;#std:templatefilter-safe&quot;&gt;&lt;code&gt;safe&lt;/code&gt;&lt;/a&gt; filter to each element of a sequence. Useful in conjunction with other filters that operate on sequences, such as &lt;a href=&quot;#std:templatefilter-join&quot;&gt;&lt;code&gt;join&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">シーケンスの各要素に&lt;a href=&quot;#std:templatefilter-safe&quot;&gt; &lt;code&gt;safe&lt;/code&gt; &lt;/a&gt;フィルターを適用します。&lt;a href=&quot;#std:templatefilter-join&quot;&gt; &lt;code&gt;join&lt;/code&gt; &lt;/a&gt;などのシーケンスを操作する他のフィルターと組み合わせて使用​​すると便利です。例えば：</target>
        </trans-unit>
        <trans-unit id="1e90ac2f737d779a01b5c20e7cefbbc501e3d3c1" translate="yes" xml:space="preserve">
          <source>Applying &lt;code&gt;escape&lt;/code&gt; to a variable that would normally have auto-escaping applied to the result will only result in one round of escaping being done. So it is safe to use this function even in auto-escaping environments. If you want multiple escaping passes to be applied, use the &lt;a href=&quot;#std:templatefilter-force_escape&quot;&gt;&lt;code&gt;force_escape&lt;/code&gt;&lt;/a&gt; filter.</source>
          <target state="translated">適用 &lt;code&gt;escape&lt;/code&gt; 正常に自動エスケープ結果に適用されるだけで行われているエスケープの1回目になりますだろう変数に。したがって、自動エスケープ環境でもこの関数を使用しても安全です。複数のエスケープパスを適用する場合は、&lt;a href=&quot;#std:templatefilter-force_escape&quot;&gt; &lt;code&gt;force_escape&lt;/code&gt; &lt;/a&gt;フィルターを使用します。</target>
        </trans-unit>
        <trans-unit id="71fb7e3800ea4bff489d57465f1ad69f7ab2a7ce" translate="yes" xml:space="preserve">
          <source>Applying ASGI middleware</source>
          <target state="translated">ASGIミドルウェアの適用</target>
        </trans-unit>
        <trans-unit id="0ae8ad953facfec96824ae104e86374b11f31f03" translate="yes" xml:space="preserve">
          <source>Applying WSGI middleware</source>
          <target state="translated">WSGIミドルウェアの適用</target>
        </trans-unit>
        <trans-unit id="9bab876cb9ceac2f91928039efab65ebe5cbf56f" translate="yes" xml:space="preserve">
          <source>Applying a &amp;ldquo;plain&amp;rdquo; migration that adds a unique non-nullable field to a table with existing rows will raise an error because the value used to populate existing rows is generated only once, thus breaking the unique constraint.</source>
          <target state="translated">既存の行を含むテーブルにnull不可の一意のフィールドを追加する「プレーン」移行を適用すると、既存の行の入力に使用される値が1回だけ生成され、一意の制約が破られるため、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="4fb043dc44486291dc3527759033c8e5b635a5ce" translate="yes" xml:space="preserve">
          <source>Applying further encoding (such as &lt;a href=&quot;https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote&quot;&gt;&lt;code&gt;urllib.parse.quote()&lt;/code&gt;&lt;/a&gt;) to the output of &lt;code&gt;reverse()&lt;/code&gt; may produce undesirable results.</source>
          <target state="translated">さらにエンコーディング（&lt;a href=&quot;https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote&quot;&gt; &lt;code&gt;urllib.parse.quote()&lt;/code&gt; など&lt;/a&gt;）を &lt;code&gt;reverse()&lt;/code&gt; の出力に適用すると、望ましくない結果が生じる可能性があります。</target>
        </trans-unit>
        <trans-unit id="1fb0e010e8f9e5d7e29b766c8e457da1478cbaa4" translate="yes" xml:space="preserve">
          <source>Appropriate use of field types.</source>
          <target state="translated">フィールドタイプの適切な使用</target>
        </trans-unit>
        <trans-unit id="ab3c3c1852b7964fa4b3a4d4233e6676835a9dae" translate="yes" xml:space="preserve">
          <source>Apps &lt;a href=&quot;overview#test-case-serialized-rollback&quot;&gt;will not see their data reloaded&lt;/a&gt;; if you need this functionality (for example, third-party apps should enable this) you can set &lt;code&gt;serialized_rollback = True&lt;/code&gt; inside the &lt;code&gt;TestCase&lt;/code&gt; body.</source>
          <target state="translated">アプリ&lt;a href=&quot;overview#test-case-serialized-rollback&quot;&gt;はデータがリロードされたことを認識しません&lt;/a&gt;。この機能が必要な場合（たとえば、サードパーティのアプリがこれを有効にする必要がある場合）、 &lt;code&gt;TestCase&lt;/code&gt; 本文内で &lt;code&gt;serialized_rollback = True&lt;/code&gt; 設定できます。</target>
        </trans-unit>
        <trans-unit id="a272d52149333fb6693bfc9f661e41c2ea99cab6" translate="yes" xml:space="preserve">
          <source>Apps without migrations are also listed, but have &lt;code&gt;(no migrations)&lt;/code&gt; printed under them.</source>
          <target state="translated">移行のないアプリもリストされますが、その下に &lt;code&gt;(no migrations)&lt;/code&gt; 印刷されています。</target>
        </trans-unit>
        <trans-unit id="40df94333b003783fd4708f6c30ce7e977931fb2" translate="yes" xml:space="preserve">
          <source>Apps without migrations must not have relations (&lt;code&gt;ForeignKey&lt;/code&gt;, &lt;code&gt;ManyToManyField&lt;/code&gt;, etc.) to apps with migrations. Sometimes it may work, but it&amp;rsquo;s not supported.</source>
          <target state="translated">移行のないアプリは、移行のあるアプリとの関係（ &lt;code&gt;ForeignKey&lt;/code&gt; 、 &lt;code&gt;ManyToManyField&lt;/code&gt; など）を持っていてはなりません。動作する場合もありますが、サポートされていません。</target>
        </trans-unit>
        <trans-unit id="3a448e7c70834c89c84d512849750974b243b0c1" translate="yes" xml:space="preserve">
          <source>Arbitrary class instances (e.g. &lt;code&gt;MyClass(4.3, 5.7)&lt;/code&gt;)</source>
          <target state="translated">任意のクラスインスタンス（例： &lt;code&gt;MyClass(4.3, 5.7)&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b7921b5d129746e8520dbca543895e37d9e3c2ad" translate="yes" xml:space="preserve">
          <source>Arbitrary keyword arguments can be passed in a dictionary to the target view. We aren&amp;rsquo;t going to use this feature of Django in the tutorial.</source>
          <target state="translated">辞書で任意のキーワード引数をターゲットビューに渡すことができます。このチュートリアルでは、Djangoのこの機能を使用しません。</target>
        </trans-unit>
        <trans-unit id="4538085594fa71765ec146351dc02cd2a62a49b6" translate="yes" xml:space="preserve">
          <source>Are marked as &amp;ldquo;internal&amp;rdquo; (as opposed to &amp;ldquo;EXTERNAL&amp;rdquo;) in &lt;a href=&quot;../topics/logging#django.utils.log.AdminEmailHandler&quot;&gt;&lt;code&gt;AdminEmailHandler&lt;/code&gt;&lt;/a&gt; emails.</source>
          <target state="translated">&lt;a href=&quot;../topics/logging#django.utils.log.AdminEmailHandler&quot;&gt; &lt;code&gt;AdminEmailHandler&lt;/code&gt; &lt;/a&gt;電子メールで（「外部」ではなく）「内部」としてマークされます。</target>
        </trans-unit>
        <trans-unit id="0a712e2d33d70b1022cfdcb9a2ae180418d15103" translate="yes" xml:space="preserve">
          <source>Are you new to Django or to programming? This is the place to start!</source>
          <target state="translated">あなたはDjangoやプログラミングが初めてですか?ここから始めましょう!</target>
        </trans-unit>
        <trans-unit id="3ede565cc656a4a577574a466fa3c9ef2c776096" translate="yes" xml:space="preserve">
          <source>Argon2</source>
          <target state="translated">Argon2</target>
        </trans-unit>
        <trans-unit id="2b8852ca2366a97e55c0d2d71ee2669e30845b41" translate="yes" xml:space="preserve">
          <source>Argon2 has three attributes that can be customized:</source>
          <target state="translated">アルゴン2には3つの属性があり、カスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="ce5e5792e97fe5c7861d6ae9b29cf5a25cc0e70a" translate="yes" xml:space="preserve">
          <source>Argument</source>
          <target state="translated">Argument</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="67c7d44f963dd2bd2d457a711009398a73deb55b" translate="yes" xml:space="preserve">
          <source>Arguments &lt;code&gt;formset&lt;/code&gt;, &lt;code&gt;extra&lt;/code&gt;, &lt;code&gt;can_delete&lt;/code&gt;, &lt;code&gt;can_order&lt;/code&gt;, &lt;code&gt;max_num&lt;/code&gt;, &lt;code&gt;validate_max&lt;/code&gt;, &lt;code&gt;min_num&lt;/code&gt;, and &lt;code&gt;validate_min&lt;/code&gt; are passed through to &lt;a href=&quot;formsets#django.forms.formsets.formset_factory&quot;&gt;&lt;code&gt;formset_factory()&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;../../topics/forms/formsets&quot;&gt;formsets&lt;/a&gt; for details.</source>
          <target state="translated">引数 &lt;code&gt;formset&lt;/code&gt; 、 &lt;code&gt;extra&lt;/code&gt; 、 &lt;code&gt;can_delete&lt;/code&gt; 、 &lt;code&gt;can_order&lt;/code&gt; 、 &lt;code&gt;max_num&lt;/code&gt; 、 &lt;code&gt;validate_max&lt;/code&gt; 、 &lt;code&gt;min_num&lt;/code&gt; 、および &lt;code&gt;validate_min&lt;/code&gt; は&lt;a href=&quot;formsets#django.forms.formsets.formset_factory&quot;&gt; &lt;code&gt;formset_factory()&lt;/code&gt; に&lt;/a&gt;渡されます。詳細については、&lt;a href=&quot;../../topics/forms/formsets&quot;&gt;フォームセット&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="58197fa61986afbdda62ef537066c9d7d284ce51" translate="yes" xml:space="preserve">
          <source>Arguments &lt;code&gt;formset&lt;/code&gt;, &lt;code&gt;extra&lt;/code&gt;, &lt;code&gt;max_num&lt;/code&gt;, &lt;code&gt;can_order&lt;/code&gt;, &lt;code&gt;can_delete&lt;/code&gt; and &lt;code&gt;validate_max&lt;/code&gt; are passed through to &lt;a href=&quot;formsets#django.forms.formsets.formset_factory&quot;&gt;&lt;code&gt;formset_factory()&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;../../topics/forms/formsets&quot;&gt;formsets&lt;/a&gt; for details.</source>
          <target state="translated">引数 &lt;code&gt;formset&lt;/code&gt; 、 &lt;code&gt;extra&lt;/code&gt; 、 &lt;code&gt;max_num&lt;/code&gt; 、 &lt;code&gt;can_order&lt;/code&gt; 、 &lt;code&gt;can_delete&lt;/code&gt; 、および &lt;code&gt;validate_max&lt;/code&gt; は&lt;a href=&quot;formsets#django.forms.formsets.formset_factory&quot;&gt; &lt;code&gt;formset_factory()&lt;/code&gt; に&lt;/a&gt;渡されます。詳細については、&lt;a href=&quot;../../topics/forms/formsets&quot;&gt;フォームセット&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8034fbe6240dce8c15d34b6c1adfb6d842f7d740" translate="yes" xml:space="preserve">
          <source>Arguments &lt;code&gt;model&lt;/code&gt;, &lt;code&gt;form&lt;/code&gt;, &lt;code&gt;fields&lt;/code&gt;, &lt;code&gt;exclude&lt;/code&gt;, &lt;code&gt;formfield_callback&lt;/code&gt;, &lt;code&gt;widgets&lt;/code&gt;, &lt;code&gt;localized_fields&lt;/code&gt;, &lt;code&gt;labels&lt;/code&gt;, &lt;code&gt;help_texts&lt;/code&gt;, &lt;code&gt;error_messages&lt;/code&gt;, and &lt;code&gt;field_classes&lt;/code&gt; are all passed through to &lt;a href=&quot;#django.forms.models.modelform_factory&quot;&gt;&lt;code&gt;modelform_factory()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数 &lt;code&gt;model&lt;/code&gt; 、 &lt;code&gt;form&lt;/code&gt; 、 &lt;code&gt;fields&lt;/code&gt; 、 &lt;code&gt;exclude&lt;/code&gt; 、 &lt;code&gt;formfield_callback&lt;/code&gt; 、 &lt;code&gt;widgets&lt;/code&gt; 、 &lt;code&gt;localized_fields&lt;/code&gt; 、 &lt;code&gt;labels&lt;/code&gt; 、 &lt;code&gt;help_texts&lt;/code&gt; 、 &lt;code&gt;error_messages&lt;/code&gt; 、および &lt;code&gt;field_classes&lt;/code&gt; はすべて&lt;a href=&quot;#django.forms.models.modelform_factory&quot;&gt; &lt;code&gt;modelform_factory()&lt;/code&gt; に&lt;/a&gt;渡されます。</target>
        </trans-unit>
        <trans-unit id="2d1cff7b9a2f029cdb3903bd7fc9052c131b2a51" translate="yes" xml:space="preserve">
          <source>Arguments passed into &lt;a href=&quot;base#django.views.generic.base.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; will be assigned onto the instance that is used to service a request. Using the previous example, this means that every request on &lt;code&gt;MyView&lt;/code&gt; is able to use &lt;code&gt;self.size&lt;/code&gt;. Arguments must correspond to attributes that already exist on the class (return &lt;code&gt;True&lt;/code&gt; on a &lt;code&gt;hasattr&lt;/code&gt; check).</source>
          <target state="translated">&lt;a href=&quot;base#django.views.generic.base.View.as_view&quot;&gt; &lt;code&gt;as_view()&lt;/code&gt; に&lt;/a&gt;渡された引数は、リクエストの処理に使用されるインスタンスに割り当てられます。前の例を使用すると、これは &lt;code&gt;MyView&lt;/code&gt; のすべてのリクエストがself.sizeを使用できることを &lt;code&gt;self.size&lt;/code&gt; ます。引数は、クラスにすでに存在する属性に対応している必要があります（ &lt;code&gt;hasattr&lt;/code&gt; チェックで &lt;code&gt;True&lt;/code&gt; を返します）。</target>
        </trans-unit>
        <trans-unit id="f078c1fdd22e76807380df315056c024853f7857" translate="yes" xml:space="preserve">
          <source>Arguments passed to a view are shared between every instance of a view. This means that you shouldn&amp;rsquo;t use a list, dictionary, or any other mutable object as an argument to a view. If you do and the shared object is modified, the actions of one user visiting your view could have an effect on subsequent users visiting the same view.</source>
          <target state="translated">ビューに渡される引数は、ビューのすべてのインスタンス間で共有されます。つまり、ビューへの引数としてリスト、辞書、またはその他の変更可能なオブジェクトを使用しないでください。これを行い、共有オブジェクトが変更された場合、ビューにアクセスする1人のユーザーのアクションが、同じビューにアクセスする後続のユーザーに影響を与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="b605e3fad4f4e7cae16a126b8f64ee64d9e62bd8" translate="yes" xml:space="preserve">
          <source>Arguments sent with this signal:</source>
          <target state="translated">この信号で送信される引数。</target>
        </trans-unit>
        <trans-unit id="88fea68375f653adcd5dce7d298e6094ef9a8491" translate="yes" xml:space="preserve">
          <source>Arguments that are sent with this signal:</source>
          <target state="translated">このシグナルと一緒に送信される引数。</target>
        </trans-unit>
        <trans-unit id="77a319939251fa1d350565160d40ce342e3a2bdc" translate="yes" xml:space="preserve">
          <source>Arithmetic with &lt;code&gt;DurationField&lt;/code&gt; works in most cases. However on all databases other than PostgreSQL, comparing the value of a &lt;code&gt;DurationField&lt;/code&gt; to arithmetic on &lt;code&gt;DateTimeField&lt;/code&gt; instances will not work as expected.</source>
          <target state="translated">ほとんどの場合、 &lt;code&gt;DurationField&lt;/code&gt; を使用した算術が機能します。ただし、PostgreSQL以外のすべてのデータベースでは、 &lt;code&gt;DurationField&lt;/code&gt; の値と &lt;code&gt;DateTimeField&lt;/code&gt; インスタンスの算術との比較は期待どおりに機能しません。</target>
        </trans-unit>
        <trans-unit id="fd9b41cfd3e7dff29518994e0b9851065abeabf4" translate="yes" xml:space="preserve">
          <source>Article objects have access to their related Reporter objects:</source>
          <target state="translated">Articleオブジェクトは、関連するReporterオブジェクトにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="803ebeca0014020157039a56b7c955bf6bab52e0" translate="yes" xml:space="preserve">
          <source>As Python&amp;rsquo;s normal &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt; class implements assertion methods such as &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTrue&quot;&gt;&lt;code&gt;assertTrue()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual&quot;&gt;&lt;code&gt;assertEqual()&lt;/code&gt;&lt;/a&gt;, Django&amp;rsquo;s custom &lt;a href=&quot;#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; class provides a number of custom assertion methods that are useful for testing Web applications:</source>
          <target state="translated">Pythonの通常どおり&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt;などのクラスが実装アサーション方法&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTrue&quot;&gt; &lt;code&gt;assertTrue()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual&quot;&gt; &lt;code&gt;assertEqual()&lt;/code&gt; &lt;/a&gt;、Djangoの独自の&lt;a href=&quot;#django.test.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;クラスは、Webアプリケーションをテストするのに有用であるカスタム・アサーション多数の方法を提供します。</target>
        </trans-unit>
        <trans-unit id="a91d2631645bc3353f670fdb4233c68c7ae8c704" translate="yes" xml:space="preserve">
          <source>As a consequence, if you&amp;rsquo;re using PostgreSQL, you can switch between &lt;code&gt;USE_TZ
= False&lt;/code&gt; and &lt;code&gt;USE_TZ = True&lt;/code&gt; freely. The database connection&amp;rsquo;s time zone will be set to &lt;a href=&quot;../../ref/settings#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;UTC&lt;/code&gt; respectively, so that Django obtains correct datetimes in all cases. You don&amp;rsquo;t need to perform any data conversions.</source>
          <target state="translated">その結果、PostgreSQLを使用している場合は、 &lt;code&gt;USE_TZ = False&lt;/code&gt; と &lt;code&gt;USE_TZ = True&lt;/code&gt; 自由に切り替えることができます。データベース接続のタイムゾーンはそれぞれ&lt;a href=&quot;../../ref/settings#std:setting-TIME_ZONE&quot;&gt; &lt;code&gt;TIME_ZONE&lt;/code&gt; &lt;/a&gt;または &lt;code&gt;UTC&lt;/code&gt; に設定されるため、Djangoはすべての場合に正しい日時を取得します。データ変換を実行する必要はありません。</target>
        </trans-unit>
        <trans-unit id="4cb03d8e9a6467edf4c13eac5fd28360a8fcfcb1" translate="yes" xml:space="preserve">
          <source>As a contributor, you can help us keep the Django community open and inclusive. Please read and follow our &lt;a href=&quot;https://www.djangoproject.com/conduct/&quot;&gt;Code of Conduct&lt;/a&gt;.</source>
          <target state="translated">貢献者として、あなたは私たちがDjangoコミュニティをオープンで包括的なものに保つのを助けることができます。&lt;a href=&quot;https://www.djangoproject.com/conduct/&quot;&gt;行動規範を&lt;/a&gt;読み、それに従ってください。</target>
        </trans-unit>
        <trans-unit id="bd4ac7c4d6c742fe78034f36f942a1b187ad4bf2" translate="yes" xml:space="preserve">
          <source>As a convenience when no lookup type is provided (like in &lt;code&gt;Entry.objects.get(id=14)&lt;/code&gt;) the lookup type is assumed to be &lt;a href=&quot;#std:fieldlookup-exact&quot;&gt;&lt;code&gt;exact&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">（ &lt;code&gt;Entry.objects.get(id=14)&lt;/code&gt; のように）検索タイプが指定されていない場合の便宜上、検索タイプは&lt;a href=&quot;#std:fieldlookup-exact&quot;&gt; &lt;code&gt;exact&lt;/code&gt; &lt;/a&gt;と想定されます。</target>
        </trans-unit>
        <trans-unit id="d5d3a6963dda7727f66b10430d291ec5d9a69966" translate="yes" xml:space="preserve">
          <source>As a convenience, Django comes with a view, &lt;a href=&quot;#django.views.i18n.set_language&quot;&gt;&lt;code&gt;django.views.i18n.set_language()&lt;/code&gt;&lt;/a&gt;, that sets a user&amp;rsquo;s language preference and redirects to a given URL or, by default, back to the previous page.</source>
          <target state="translated">便宜上、Djangoには&lt;a href=&quot;#django.views.i18n.set_language&quot;&gt; &lt;code&gt;django.views.i18n.set_language()&lt;/code&gt; &lt;/a&gt;というビューが付属しています。このビューは、ユーザーの言語設定を設定し、指定されたURLにリダイレクトするか、デフォルトで前のページにリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="a148d3a8c6ce021a1fb375d505172fcf07511531" translate="yes" xml:space="preserve">
          <source>As a convenience, Django provides a way to test whether the user&amp;rsquo;s browser accepts cookies. Call the &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.set_test_cookie&quot;&gt;&lt;code&gt;set_test_cookie()&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;request.session&lt;/code&gt; in a view, and call &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.test_cookie_worked&quot;&gt;&lt;code&gt;test_cookie_worked()&lt;/code&gt;&lt;/a&gt; in a subsequent view &amp;ndash; not in the same view call.</source>
          <target state="translated">便宜上、DjangoはユーザーのブラウザがCookieを受け入れるかどうかをテストする方法を提供します。ビューで &lt;code&gt;request.session&lt;/code&gt; の&lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.set_test_cookie&quot;&gt; &lt;code&gt;set_test_cookie()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出し、同じビューの呼び出しではなく、後続のビューで&lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.test_cookie_worked&quot;&gt; &lt;code&gt;test_cookie_worked()&lt;/code&gt; &lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="f2fac89610d998a78384559c126919b128271b4f" translate="yes" xml:space="preserve">
          <source>As a convenience, each message includes, in the form of a comment line prefixed with &lt;code&gt;#&lt;/code&gt; and located above the &lt;code&gt;msgid&lt;/code&gt; line, the filename and line number from which the translation string was gleaned.</source>
          <target state="translated">便宜上、各メッセージには、 &lt;code&gt;#&lt;/code&gt; で始まるコメント行の形式で &lt;code&gt;msgid&lt;/code&gt; 行の上にあり、翻訳文字列を収集したファイル名と行番号が含まれています。</target>
        </trans-unit>
        <trans-unit id="64031d0a37856a43f293b7ae4f2de01aeeaebdd4" translate="yes" xml:space="preserve">
          <source>As a convenience, the &lt;code&gt;HttpRequest&lt;/code&gt; object is passed to the &lt;code&gt;lookups&lt;/code&gt; and &lt;code&gt;queryset&lt;/code&gt; methods, for example:</source>
          <target state="translated">便宜上、 &lt;code&gt;HttpRequest&lt;/code&gt; オブジェクトは &lt;code&gt;lookups&lt;/code&gt; および &lt;code&gt;queryset&lt;/code&gt; メソッドに渡されます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="55ecd310b00d3a2bedf330c88278908e0dba94f8" translate="yes" xml:space="preserve">
          <source>As a custom field author, you don&amp;rsquo;t need to care about the first two values; the base &lt;code&gt;Field&lt;/code&gt; class has all the code to work out the field&amp;rsquo;s attribute name and import path. You do, however, have to care about the positional and keyword arguments, as these are likely the things you are changing.</source>
          <target state="translated">カスタムフィールドの作成者は、最初の2つの値を気にする必要はありません。基本の &lt;code&gt;Field&lt;/code&gt; クラスには、フィールドの属性名とインポートパスを計算するためのすべてのコードがあります。ただし、位置引数とキーワード引数は変更する可能性が高いため、注意が必要です。</target>
        </trans-unit>
        <trans-unit id="d5d0254c52feffc267681ce4c32d47c81002ce3c" translate="yes" xml:space="preserve">
          <source>As a general rule, &lt;code&gt;to_python()&lt;/code&gt; should deal gracefully with any of the following arguments:</source>
          <target state="translated">一般的なルールとして、 &lt;code&gt;to_python()&lt;/code&gt; は次の引数のいずれかを適切に処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="162f6d794632acfbba6013b0fb22a35fd35d7af3" translate="yes" xml:space="preserve">
          <source>As a general rule, if you can provide functions to compute &lt;em&gt;both&lt;/em&gt; the ETag and the last modified time, you should do so. You don&amp;rsquo;t know which headers any given HTTP client will send you, so be prepared to handle both. However, sometimes only one value is easy to compute and Django provides decorators that handle only ETag or only last-modified computations.</source>
          <target state="translated">原則として、ETagと最終変更時間の&lt;em&gt;両方&lt;/em&gt;を計算する関数を提供できる場合は、そうする必要があります。特定のHTTPクライアントが送信するヘッダーがわからないので、両方を処理する準備をしてください。ただし、計算が簡単な値が1つしかない場合があり、DjangoはETagのみ、または最後に変更された計算のみを処理するデコレータを提供しています。</target>
        </trans-unit>
        <trans-unit id="b4c7b21bf36c481e9159296ec7557ce258ac1e99" translate="yes" xml:space="preserve">
          <source>As a result, each &lt;code&gt;Entry&lt;/code&gt; object will have an extra attribute, &lt;code&gt;is_recent&lt;/code&gt;, a boolean representing whether the entry&amp;rsquo;s &lt;code&gt;pub_date&lt;/code&gt; is greater than Jan. 1, 2006.</source>
          <target state="translated">その結果、各 &lt;code&gt;Entry&lt;/code&gt; オブジェクトは追加属性、あります &lt;code&gt;is_recent&lt;/code&gt; 、エントリのかどうかを示すブール値 &lt;code&gt;pub_date&lt;/code&gt; 2006年1月1日よりも大きいが。</target>
        </trans-unit>
        <trans-unit id="e8b143dadf99761dc7a79ebf9d0877018fc623ba" translate="yes" xml:space="preserve">
          <source>As a rule of thumb, only capture the values the view needs to work with and use non-capturing arguments when the regular expression needs an argument but the view ignores it.</source>
          <target state="translated">経験則として、正規表現が引数を必要とするがビューがそれを無視する場合には、ビューが作業する必要のある値のみをキャプチャし、キャプチャしない引数を使用します。</target>
        </trans-unit>
        <trans-unit id="f9c9f4b6a6f224e6e33f22feaf9223aac12b41e7" translate="yes" xml:space="preserve">
          <source>As a security measure, Django will &lt;em&gt;not&lt;/em&gt; include settings that might be sensitive, such as &lt;a href=&quot;#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt;. Specifically, it will exclude any setting whose name includes any of the following:</source>
          <target state="translated">セキュリティ対策として、Djangoには&lt;a href=&quot;#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; &lt;/a&gt;などの機密性の高い設定&lt;em&gt;は&lt;/em&gt;含まれません。具体的には、名前に次のいずれかが含まれる設定は除外されます。</target>
        </trans-unit>
        <trans-unit id="84cae640195b75a5b531e4722d3e827ad162687b" translate="yes" xml:space="preserve">
          <source>As a shortcut, the default cache is available as &lt;code&gt;django.core.cache.cache&lt;/code&gt;:</source>
          <target state="translated">ショートカットとして、デフォルトのキャッシュは &lt;code&gt;django.core.cache.cache&lt;/code&gt; として利用できます：</target>
        </trans-unit>
        <trans-unit id="d14d8992d9e997382b4e9e188ab3c54a0fe914b1" translate="yes" xml:space="preserve">
          <source>As a shortcut, you can use the convenient &lt;a href=&quot;#django.contrib.auth.decorators.login_required&quot;&gt;&lt;code&gt;login_required()&lt;/code&gt;&lt;/a&gt; decorator:</source>
          <target state="translated">ショートカットとして、便利な&lt;a href=&quot;#django.contrib.auth.decorators.login_required&quot;&gt; &lt;code&gt;login_required()&lt;/code&gt; &lt;/a&gt;デコレータを使用できます。</target>
        </trans-unit>
        <trans-unit id="65dec2b26adfff7621033fdea8385bf825f6f9f8" translate="yes" xml:space="preserve">
          <source>As a shortcut, you can use the convenient &lt;code&gt;user_passes_test&lt;/code&gt; decorator which performs a redirect when the callable returns &lt;code&gt;False&lt;/code&gt;:</source>
          <target state="translated">ショートカットとして、callableが &lt;code&gt;False&lt;/code&gt; を返したときにリダイレクトを実行する便利な &lt;code&gt;user_passes_test&lt;/code&gt; デコレータを使用できます。</target>
        </trans-unit>
        <trans-unit id="3282f21de03e9905c2d09d969f11529dd59351e4" translate="yes" xml:space="preserve">
          <source>As a special case, you are also permitted to use &lt;code&gt;last&lt;/code&gt; as a value for &lt;code&gt;page&lt;/code&gt;:</source>
          <target state="translated">特別な場合として、 &lt;code&gt;page&lt;/code&gt; 値として &lt;code&gt;last&lt;/code&gt; を使用することもできます：</target>
        </trans-unit>
        <trans-unit id="060ec047b1ef0821812a28018949722fd546d7a8" translate="yes" xml:space="preserve">
          <source>As above, it is recommended to pass a list of &lt;code&gt;ValidationError&lt;/code&gt; instances with &lt;code&gt;code&lt;/code&gt;s and &lt;code&gt;params&lt;/code&gt; but a list of strings will also work:</source>
          <target state="translated">上記のように、 &lt;code&gt;code&lt;/code&gt; sと &lt;code&gt;params&lt;/code&gt; を持つ &lt;code&gt;ValidationError&lt;/code&gt; インスタンスのリストを渡すことをお勧めしますが、文字列のリストも機能します。</target>
        </trans-unit>
        <trans-unit id="1f50ad2b65a9d524066daa50cc71bac67fe4f013" translate="yes" xml:space="preserve">
          <source>As above: the class of the user that just logged out or &lt;code&gt;None&lt;/code&gt; if the user was not authenticated.</source>
          <target state="translated">上記のとおり：ログアウトしたばかりのユーザーのクラス、またはユーザーが認証されていない場合は &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8bb130c31241b060e083cd4e48479a7cdb3daa85" translate="yes" xml:space="preserve">
          <source>As above: the model class that just had an instance created.</source>
          <target state="translated">上記のように、インスタンスを作成したばかりのモデルクラス。</target>
        </trans-unit>
        <trans-unit id="e9b3807dca5d7355faf6db7cfede8eab86a99e6a" translate="yes" xml:space="preserve">
          <source>As always, you should document your field type, so users will know what it is. In addition to providing a docstring for it, which is useful for developers, you can also allow users of the admin app to see a short description of the field type via the &lt;a href=&quot;../ref/contrib/admin/admindocs&quot;&gt;django.contrib.admindocs&lt;/a&gt; application. To do this provide descriptive text in a &lt;a href=&quot;../ref/models/fields#django.db.models.Field.description&quot;&gt;&lt;code&gt;description&lt;/code&gt;&lt;/a&gt; class attribute of your custom field. In the above example, the description displayed by the &lt;code&gt;admindocs&lt;/code&gt; application for a &lt;code&gt;HandField&lt;/code&gt; will be &amp;lsquo;A hand of cards (bridge style)&amp;rsquo;.</source>
          <target state="translated">いつものように、フィールドタイプを文書化して、ユーザーがそれを理解できるようにする必要があります。開発者にとって便利なdocstringを提供するだけでなく、管理アプリのユーザーが&lt;a href=&quot;../ref/contrib/admin/admindocs&quot;&gt;django.contrib.admindocs&lt;/a&gt;アプリケーションを介してフィールドタイプの短い説明を表示できるようにすることもできます。これを行うには、カスタムフィールドの&lt;a href=&quot;../ref/models/fields#django.db.models.Field.description&quot;&gt; &lt;code&gt;description&lt;/code&gt; &lt;/a&gt;クラス属性に説明テキストを提供します。上記の例では、説明がで表示 &lt;code&gt;admindocs&lt;/code&gt; のためのアプリケーション &lt;code&gt;HandField&lt;/code&gt; 「カード（ブリッジスタイル）の手」であろう。</target>
        </trans-unit>
        <trans-unit id="4483ceedafba3827803d0c6b7e6be9eb9bd58787" translate="yes" xml:space="preserve">
          <source>As an example, let&amp;rsquo;s make an operation that loads PostgreSQL extensions (which contain some of PostgreSQL&amp;rsquo;s more exciting features). Since there&amp;rsquo;s no model state changes, all it does is run one command:</source>
          <target state="translated">例として、PostgreSQL拡張機能（PostgreSQLのよりエキサイティングな機能のいくつかを含む）をロードする操作を実行してみましょう。モデルの状態は変化しないため、1つのコマンドを実行するだけです。</target>
        </trans-unit>
        <trans-unit id="a2f0ca9775bd19abb637e2e3b74d35f61538732e" translate="yes" xml:space="preserve">
          <source>As an example, the login form for the Django admin contains several &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements: one of &lt;code&gt;type=&quot;text&quot;&lt;/code&gt; for the username, one of &lt;code&gt;type=&quot;password&quot;&lt;/code&gt; for the password, and one of &lt;code&gt;type=&quot;submit&quot;&lt;/code&gt; for the &amp;ldquo;Log in&amp;rdquo; button. It also contains some hidden text fields that the user doesn&amp;rsquo;t see, which Django uses to determine what to do next.</source>
          <target state="translated">例として、Djangoのadminのログインフォームがいくつか含まれている &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素：の1 &lt;code&gt;type=&quot;text&quot;&lt;/code&gt; 名のために、のいずれかの &lt;code&gt;type=&quot;password&quot;&lt;/code&gt; パスワードのため、との1 &lt;code&gt;type=&quot;submit&quot;&lt;/code&gt; のために「ログイン」ボタン。また、ユーザーには表示されない非表示のテキストフィールドもいくつか含まれています。Djangoはこれを使用して、次に何をするかを決定します。</target>
        </trans-unit>
        <trans-unit id="7bbf58fa832a1ed4496f565aefc0d8b472ea5042" translate="yes" xml:space="preserve">
          <source>As an example, though, here&amp;rsquo;s what a fixture for a &lt;code&gt;Person&lt;/code&gt; model might look like in JSON:</source>
          <target state="translated">ただし、例として、 &lt;code&gt;Person&lt;/code&gt; モデルのフィクスチャがJSONでどのように見えるかを次に示します。</target>
        </trans-unit>
        <trans-unit id="5c2023817dac1207534202df5e2018211834ce8f" translate="yes" xml:space="preserve">
          <source>As an optimization, Django only flushes the &lt;code&gt;default&lt;/code&gt; database at the start of each test run. If your setup contains multiple databases, and you have a test that requires every database to be clean, you can use the &lt;code&gt;databases&lt;/code&gt; attribute on the test suite to request extra databases to be flushed.</source>
          <target state="translated">最適化として、Django は各テスト実行の開始時に &lt;code&gt;default&lt;/code&gt; データベースのみをフラッシュします。セットアップに複数のデータベースが含まれていて、すべてのデータベースをクリーンにする必要があるテストがある場合は、テストスイートの &lt;code&gt;databases&lt;/code&gt; 属性を使用して、追加のデータベースのフラッシュを要求できます。</target>
        </trans-unit>
        <trans-unit id="cc354dd23505586b5af6774ee796c5ecb636150c" translate="yes" xml:space="preserve">
          <source>As currently implemented, setting &lt;code&gt;auto_now&lt;/code&gt; or &lt;code&gt;auto_now_add&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; will cause the field to have &lt;code&gt;editable=False&lt;/code&gt; and &lt;code&gt;blank=True&lt;/code&gt; set.</source>
          <target state="translated">現在実装されているように、 &lt;code&gt;auto_now&lt;/code&gt; または &lt;code&gt;auto_now_add&lt;/code&gt; を &lt;code&gt;True&lt;/code&gt; に設定すると、フィールドに &lt;code&gt;editable=False&lt;/code&gt; および &lt;code&gt;blank=True&lt;/code&gt; が設定されます。</target>
        </trans-unit>
        <trans-unit id="65a69528a8ff360aa751b0174a6a42ab5e776f10" translate="yes" xml:space="preserve">
          <source>As described above in &lt;a href=&quot;#django.db.models.query.QuerySet.get_or_create&quot;&gt;&lt;code&gt;get_or_create()&lt;/code&gt;&lt;/a&gt;, this method is prone to a race-condition which can result in multiple rows being inserted simultaneously if uniqueness is not enforced at the database level.</source>
          <target state="translated">上記の&lt;a href=&quot;#django.db.models.query.QuerySet.get_or_create&quot;&gt; &lt;code&gt;get_or_create()&lt;/code&gt; &lt;/a&gt;で説明したように、このメソッドは競合状態になる傾向があり、データベースレベルで一意性が強制されていない場合、複数の行が同時に挿入される可能性があります。</target>
        </trans-unit>
        <trans-unit id="c71ae107d635a60941fd857f322a439c4135e3ff" translate="yes" xml:space="preserve">
          <source>As described in the previous section, if a test run is forcefully interrupted, the test database may not be destroyed. On the next run, you&amp;rsquo;ll be asked whether you want to reuse or destroy the database. Use the &lt;a href=&quot;../../ref/django-admin#cmdoption-test-noinput&quot;&gt;&lt;code&gt;test
--noinput&lt;/code&gt;&lt;/a&gt; option to suppress that prompt and automatically destroy the database. This can be useful when running tests on a continuous integration server where tests may be interrupted by a timeout, for example.</source>
          <target state="translated">前のセクションで説明したように、テストの実行が強制的に中断された場合、テストデータベースは破壊されない可能性があります。次回の実行時に、データベースを再利用するか破棄するかを尋ねられます。&lt;a href=&quot;../../ref/django-admin#cmdoption-test-noinput&quot;&gt; &lt;code&gt;test --noinput&lt;/code&gt; &lt;/a&gt;オプションを使用して、そのプロンプトを抑制し、データベースを自動的に破棄します。これは、たとえば、タイムアウトによってテストが中断される可能性のある継続的インテグレーションサーバーでテストを実行する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="797408375ed7da94f4e17bb1cfa01a5cf8e7ef8d" translate="yes" xml:space="preserve">
          <source>As described in the previous two sections, the cache key provided by a user is not used verbatim &amp;ndash; it is combined with the cache prefix and key version to provide a final cache key. By default, the three parts are joined using colons to produce a final string:</source>
          <target state="translated">前の2つのセクションで説明したように、ユーザーが提供するキャッシュキーはそのまま使用されません。キャッシュプレフィックスとキーバージョンと組み合わせて、最終的なキャッシュキーを提供します。デフォルトでは、3つの部分はコロンを使用して結合され、最終的な文字列が生成されます。</target>
        </trans-unit>
        <trans-unit id="4b7ec2ed3acca43c13049b422fb538687f6f7ecb" translate="yes" xml:space="preserve">
          <source>As discussed in &lt;a href=&quot;../security#sql-injection-protection&quot;&gt;SQL injection protection&lt;/a&gt;, using the &lt;code&gt;params&lt;/code&gt; argument and leaving the placeholders unquoted protects you from &lt;a href=&quot;https://en.wikipedia.org/wiki/SQL_injection&quot;&gt;SQL injection attacks&lt;/a&gt;, a common exploit where attackers inject arbitrary SQL into your database. If you use string interpolation or quote the placeholder, you&amp;rsquo;re at risk for SQL injection.</source>
          <target state="translated">&lt;a href=&quot;../security#sql-injection-protection&quot;&gt;SQLインジェクション保護&lt;/a&gt;で説明したように、 &lt;code&gt;params&lt;/code&gt; 引数を使用してプレースホルダーを引用符で囲まないままにすると、&lt;a href=&quot;https://en.wikipedia.org/wiki/SQL_injection&quot;&gt;SQLインジェクション攻撃&lt;/a&gt;から保護されます。これは、攻撃者が任意のSQLをデータベースに挿入する一般的な悪用です。文字列補間を使用するか、プレースホルダーを引用すると、SQLインジェクションの危険にさらされます。</target>
        </trans-unit>
        <trans-unit id="20b88726251efae057f2600361cd15353b9aefaf" translate="yes" xml:space="preserve">
          <source>As discussed in &lt;a href=&quot;../topics/migrations#migrations-removing-model-fields&quot;&gt;removing fields&lt;/a&gt;, you must retain the original &lt;code&gt;CustomCharField&lt;/code&gt; class as long as you have migrations that reference it.</source>
          <target state="translated">&lt;a href=&quot;../topics/migrations#migrations-removing-model-fields&quot;&gt;フィールドの削除で&lt;/a&gt;説明したように、元の &lt;code&gt;CustomCharField&lt;/code&gt; クラスは、それを参照する移行がある限り保持する必要があります。</target>
        </trans-unit>
        <trans-unit id="41bf8726ebe535d8ba58d750aa07cec91ebd0cc7" translate="yes" xml:space="preserve">
          <source>As explained in &amp;ldquo;Outputting forms as HTML&amp;rdquo; above, the default label for a &lt;code&gt;Field&lt;/code&gt; is generated from the field name by converting all underscores to spaces and upper-casing the first letter. Specify &lt;code&gt;label&lt;/code&gt; if that default behavior doesn&amp;rsquo;t result in an adequate label.</source>
          <target state="translated">上記の「フォームをHTMLとして出力する」で説明したように、 &lt;code&gt;Field&lt;/code&gt; デフォルトラベルは、フィールド名からすべての下線をスペースに変換し、最初の文字を大文字にすることによって生成されます。デフォルトの動作では適切なラベルにならない場合は、 &lt;code&gt;label&lt;/code&gt; を指定します。</target>
        </trans-unit>
        <trans-unit id="8befa0db1dba58966a2414b9768c2deffe876e03" translate="yes" xml:space="preserve">
          <source>As explained in the documentation of &lt;a href=&quot;../../ref/settings#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt;, Django sets environment variables so that its process runs in the default time zone. This happens regardless of the value of &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; and of the current time zone.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-TIME_ZONE&quot;&gt; &lt;code&gt;TIME_ZONE&lt;/code&gt; &lt;/a&gt;のドキュメントで説明されているように、Djangoはプロセスがデフォルトのタイムゾーンで実行されるように環境変数を設定します。これは、&lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;の値と現在のタイムゾーンに関係なく発生します。</target>
        </trans-unit>
        <trans-unit id="5ed84b5ba0ead8c1fa04f36e7e7bc74c3791dacc" translate="yes" xml:space="preserve">
          <source>As general programming practice, this goes without saying. Find out &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/models/#faq-see-raw-sql-queries&quot;&gt;what queries you are doing and what they are costing you&lt;/a&gt;. Use &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.explain&quot;&gt;&lt;code&gt;QuerySet.explain()&lt;/code&gt;&lt;/a&gt; to understand how specific &lt;code&gt;QuerySet&lt;/code&gt;s are executed by your database. You may also want to use an external project like &lt;a href=&quot;https://github.com/jazzband/django-debug-toolbar/&quot;&gt;django-debug-toolbar&lt;/a&gt;, or a tool that monitors your database directly.</source>
          <target state="translated">一般的なプログラミングの慣例として、これは言うまでもありません。&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/models/#faq-see-raw-sql-queries&quot;&gt;あなたがしているクエリと、それらがあなたにコストをかけているもの&lt;/a&gt;を見つけてください。&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.explain&quot;&gt; &lt;code&gt;QuerySet.explain()&lt;/code&gt; &lt;/a&gt;を使用して、特定の &lt;code&gt;QuerySet&lt;/code&gt; がデータベースによってどのように実行されるかを理解します。&lt;a href=&quot;https://github.com/jazzband/django-debug-toolbar/&quot;&gt;django-debug-toolbar&lt;/a&gt;などの外部プロジェクト、またはデータベースを直接監視するツールを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="20b8321f6b1815504a56e2446d229dc3a5cdf1c5" translate="yes" xml:space="preserve">
          <source>As general programming practice, this goes without saying. Find out &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/faq/models/#faq-see-raw-sql-queries&quot;&gt;what queries you are doing and what they are costing you&lt;/a&gt;. Use &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.explain&quot;&gt;&lt;code&gt;QuerySet.explain()&lt;/code&gt;&lt;/a&gt; to understand how specific &lt;code&gt;QuerySet&lt;/code&gt;s are executed by your database. You may also want to use an external project like &lt;a href=&quot;https://github.com/jazzband/django-debug-toolbar/&quot;&gt;django-debug-toolbar&lt;/a&gt;, or a tool that monitors your database directly.</source>
          <target state="translated">一般的なプログラミング手法として、これは言うまでもありません。見つける&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/faq/models/#faq-see-raw-sql-queries&quot;&gt;あなたがやっていると、彼らはあなたの原価計算されているものを照会するもの&lt;/a&gt;。&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.explain&quot;&gt; &lt;code&gt;QuerySet.explain()&lt;/code&gt; &lt;/a&gt;を使用して、特定の &lt;code&gt;QuerySet&lt;/code&gt; がデータベースによってどのように実行されるかを理解します。&lt;a href=&quot;https://github.com/jazzband/django-debug-toolbar/&quot;&gt;django-debug-toolbarの&lt;/a&gt;ような外部プロジェクト、またはデータベースを直接監視するツールを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="96991b8ac8856522132d360631369f91573de2f0" translate="yes" xml:space="preserve">
          <source>As in the &lt;a href=&quot;#django.contrib.auth.decorators.login_required&quot;&gt;&lt;code&gt;login_required()&lt;/code&gt;&lt;/a&gt; decorator, &lt;code&gt;login_url&lt;/code&gt; defaults to &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt;&lt;code&gt;settings.LOGIN_URL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以下のよう&lt;a href=&quot;#django.contrib.auth.decorators.login_required&quot;&gt; &lt;code&gt;login_required()&lt;/code&gt; &lt;/a&gt;デコレータ、 &lt;code&gt;login_url&lt;/code&gt; デフォルト&lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt; &lt;code&gt;settings.LOGIN_URL&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="da9fe3df0ac51ceac9db719eba0178803cb06518" translate="yes" xml:space="preserve">
          <source>As in the previous example, we&amp;rsquo;ll use &lt;code&gt;parser.parse()&lt;/code&gt;. But this time, we pass the resulting &lt;code&gt;nodelist&lt;/code&gt; to the &lt;code&gt;Node&lt;/code&gt;:</source>
          <target state="translated">前の例と同様に、 &lt;code&gt;parser.parse()&lt;/code&gt; を使用します。今回は、結果の &lt;code&gt;nodelist&lt;/code&gt; を &lt;code&gt;Node&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="fd1a31b1b353515241d23397568df73c392b1bb5" translate="yes" xml:space="preserve">
          <source>As long as all of the arguments to your class&amp;rsquo; constructor are themselves serializable, you can use the &lt;code&gt;@deconstructible&lt;/code&gt; class decorator from &lt;code&gt;django.utils.deconstruct&lt;/code&gt; to add the &lt;code&gt;deconstruct()&lt;/code&gt; method:</source>
          <target state="translated">クラスのコンストラクターへのすべての引数自体がシリアライズ可能である &lt;code&gt;@deconstructible&lt;/code&gt; 、django.utils.deconstructの@deconstructibleクラスデコレーターを &lt;code&gt;django.utils.deconstruct&lt;/code&gt; して &lt;code&gt;deconstruct()&lt;/code&gt; メソッドを追加できます。</target>
        </trans-unit>
        <trans-unit id="e600596bc5c873450b656d74b175877787ab3b6f" translate="yes" xml:space="preserve">
          <source>As long as the names match, the model instances will be created correctly.</source>
          <target state="translated">名前が一致する限り、モデルインスタンスは正しく作成されます。</target>
        </trans-unit>
        <trans-unit id="0fde90f7d4164594d56ad64de71511cd1675ba34" translate="yes" xml:space="preserve">
          <source>As long as your tests are properly isolated, you can run them in parallel to gain a speed up on multi-core hardware. See &lt;a href=&quot;../../ref/django-admin#cmdoption-test-parallel&quot;&gt;&lt;code&gt;test --parallel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テストが適切に分離されている限り、テストを並行して実行して、マルチコアハードウェアの速度を上げることができます。&lt;a href=&quot;../../ref/django-admin#cmdoption-test-parallel&quot;&gt; &lt;code&gt;test --parallel&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d3c70acb93c6e5c1218f6c1395e14e58b7f5c205" translate="yes" xml:space="preserve">
          <source>As long as your tests are sensibly arranged, they won&amp;rsquo;t become unmanageable. Good rules-of-thumb include having:</source>
          <target state="translated">テストが適切に配置されている限り、管理できなくなりません。経験則には、次のものが含まれます。</target>
        </trans-unit>
        <trans-unit id="ff98741fa13b2a84ea85722bce2d6ba0fe6eb0c8" translate="yes" xml:space="preserve">
          <source>As mentioned above, an example of a wrapper is a query execution blocker. It could look like this:</source>
          <target state="translated">前述したように、ラッパーの例としては、クエリ実行ブロッカーがあります。これは次のようなものが考えられます。</target>
        </trans-unit>
        <trans-unit id="1b370539c468c4dfb8aa0c2d9330c6f649435a7a" translate="yes" xml:space="preserve">
          <source>As mentioned in &lt;a href=&quot;tutorial03&quot;&gt;Tutorial 3&lt;/a&gt;, &lt;code&gt;request&lt;/code&gt; is an &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object. For more on &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; objects, see the &lt;a href=&quot;../ref/request-response&quot;&gt;request and response documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;tutorial03&quot;&gt;チュートリアル3&lt;/a&gt;で述べたように、 &lt;code&gt;request&lt;/code&gt; は&lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;オブジェクトです。より多くのについて&lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;オブジェクト、参照&lt;a href=&quot;../ref/request-response&quot;&gt;要求および応答のドキュメントを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4d95c5bf0cefa9c9545e31ef3d2005a5c070fd4d" translate="yes" xml:space="preserve">
          <source>As mentioned, Django will automatically create a &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt; linking your child class back to any non-abstract parent models. If you want to control the name of the attribute linking back to the parent, you can create your own &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt; and set &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField.parent_link&quot;&gt;&lt;code&gt;parent_link=True&lt;/code&gt;&lt;/a&gt; to indicate that your field is the link back to the parent class.</source>
          <target state="translated">前述のように、Djangoは子クラスを非抽象親モデルにリンクする&lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt;を自動的に作成します。親にリンクしている属性の名前を制御する場合は、独自の&lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt;を作成し、&lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField.parent_link&quot;&gt; &lt;code&gt;parent_link=True&lt;/code&gt; &lt;/a&gt;を設定して、フィールドが親クラスに戻るリンクであることを示すことができます。</target>
        </trans-unit>
        <trans-unit id="d4b79767de4ca41245f3982197bcd1108401cb20" translate="yes" xml:space="preserve">
          <source>As mentioned, any of these methods can raise a &lt;code&gt;ValidationError&lt;/code&gt;. For any field, if the &lt;code&gt;Field.clean()&lt;/code&gt; method raises a &lt;code&gt;ValidationError&lt;/code&gt;, any field-specific cleaning method is not called. However, the cleaning methods for all remaining fields are still executed.</source>
          <target state="translated">前述のように、これらのメソッドはいずれも &lt;code&gt;ValidationError&lt;/code&gt; を発生させる可能性があります。どのフィールドでも、 &lt;code&gt;Field.clean()&lt;/code&gt; メソッドで &lt;code&gt;ValidationError&lt;/code&gt; が発生した場合、フィールド固有のクリーニングメソッドは呼び出されません。ただし、残りのすべてのフィールドのクリーニングメソッドは引き続き実行されます。</target>
        </trans-unit>
        <trans-unit id="c5537608bf329c234a50e1e6bf69edb69274b89a" translate="yes" xml:space="preserve">
          <source>As noted &lt;a href=&quot;#emptying-test-outbox&quot;&gt;previously&lt;/a&gt;, the test outbox is emptied at the start of every test in a Django &lt;code&gt;*TestCase&lt;/code&gt;. To empty the outbox manually, assign the empty list to &lt;code&gt;mail.outbox&lt;/code&gt;:</source>
          <target state="translated">述べたように&lt;a href=&quot;#emptying-test-outbox&quot;&gt;、以前に&lt;/a&gt;、テスト送信トレイは、Djangoの内のすべてのテストの開始時に空にされる &lt;code&gt;*TestCase&lt;/code&gt; 。 &lt;code&gt;mail.outbox&lt;/code&gt; 手動で空にするには、空のリストをmail.outboxに割り当てます。</target>
        </trans-unit>
        <trans-unit id="11567f9b2cb4749058f2ee08859ac819cbb887ba" translate="yes" xml:space="preserve">
          <source>As noted in the warning at the top of this section, Django stores all SQL queries when &lt;code&gt;DEBUG=True&lt;/code&gt;. Set &lt;code&gt;DEBUG=False&lt;/code&gt; in your settings, and this should stop excessive memory use when running &lt;code&gt;LayerMapping&lt;/code&gt; scripts.</source>
          <target state="translated">このセクションの上部の警告で述べたように、 &lt;code&gt;DEBUG=True&lt;/code&gt; の場合、DjangoはすべてのSQLクエリを保存します。設定で &lt;code&gt;DEBUG=False&lt;/code&gt; を設定します。これにより、 &lt;code&gt;LayerMapping&lt;/code&gt; スクリプトを実行する際の過度のメモリ使用が停止します。</target>
        </trans-unit>
        <trans-unit id="b24969d3792077ea0404a1157efaffa2850972af" translate="yes" xml:space="preserve">
          <source>As part of the validation process, &lt;code&gt;ModelForm&lt;/code&gt; will call the &lt;code&gt;clean()&lt;/code&gt; method of each field on your model that has a corresponding field on your form. If you have excluded any model fields, validation will not be run on those fields. See the &lt;a href=&quot;../../ref/forms/validation&quot;&gt;form validation&lt;/a&gt; documentation for more on how field cleaning and validation work.</source>
          <target state="translated">検証プロセスの一部として、 &lt;code&gt;ModelForm&lt;/code&gt; は、フォームに対応するフィールドを持つモデルの各フィールドの &lt;code&gt;clean()&lt;/code&gt; メソッドを呼び出します。モデルフィールドを除外した場合、それらのフィールドに対して検証は実行されません。フィールドのクリーニングと検証の仕組みの詳細については、&lt;a href=&quot;../../ref/forms/validation&quot;&gt;フォーム検証の&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="6f8ea1ba8d0d9e453e5627c48418ee9fcf732126" translate="yes" xml:space="preserve">
          <source>As per &lt;a href=&quot;https://www.python.org/dev/peps/pep-3134&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 3134&lt;/strong&gt;&lt;/a&gt;, a &lt;code&gt;__cause__&lt;/code&gt; attribute is set with the original (underlying) database exception, allowing access to any additional information provided.</source>
          <target state="translated">&lt;a href=&quot;https://www.python.org/dev/peps/pep-3134&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 3134&lt;/strong&gt;&lt;/a&gt;に従って、 &lt;code&gt;__cause__&lt;/code&gt; 属性は元の（基礎となる）データベース例外で設定され、提供される追加情報へのアクセスを許可します。</target>
        </trans-unit>
        <trans-unit id="4a975be9a69e196fd48d57d72a02baaad0186cb2" translate="yes" xml:space="preserve">
          <source>As previously discussed, you may need to linearize migrations manually when two development branches are joined. While editing migration dependencies, you can inadvertently create an inconsistent history state where a migration has been applied but some of its dependencies haven&amp;rsquo;t. This is a strong indication that the dependencies are incorrect, so Django will refuse to run migrations or make new migrations until it&amp;rsquo;s fixed. When using multiple databases, you can use the &lt;a href=&quot;db/multi-db#allow_migrate&quot;&gt;&lt;code&gt;allow_migrate()&lt;/code&gt;&lt;/a&gt; method of &lt;a href=&quot;db/multi-db#topics-db-multi-db-routing&quot;&gt;database routers&lt;/a&gt; to control which databases &lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; checks for consistent history.</source>
          <target state="translated">前に説明したように、2つの開発ブランチを結合するときは、移行を手動で線形化する必要がある場合があります。移行の依存関係を編集しているときに、移行が適用されていても一部の依存関係が適用されていない、不整合な履歴状態を誤って作成する可能性があります。これは依存関係が正しくないことを強く示しているため、Djangoは修正されるまで、移行の実行や新しい移行を拒否します。複数のデータベースを使用する場合、&lt;a href=&quot;db/multi-db#topics-db-multi-db-routing&quot;&gt;データベースルーターの&lt;/a&gt;&lt;a href=&quot;db/multi-db#allow_migrate&quot;&gt; &lt;code&gt;allow_migrate()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、どのデータベースが&lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt;一貫性のある履歴をチェックするかを制御できます。</target>
        </trans-unit>
        <trans-unit id="34fd3226d75f12bed342a63f13cbfb1d23154cae" translate="yes" xml:space="preserve">
          <source>As some examples have already demonstrated, when using a callable, a model method, or a &lt;code&gt;ModelAdmin&lt;/code&gt; method, you can customize the column&amp;rsquo;s title by adding a &lt;code&gt;short_description&lt;/code&gt; attribute to the callable.</source>
          <target state="translated">いくつかの例ですでに示したように、callable、modelメソッド、または &lt;code&gt;ModelAdmin&lt;/code&gt; メソッドを使用する場合、 &lt;code&gt;short_description&lt;/code&gt; 属性をcallableに追加することにより、列のタイトルをカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="2561f19164b49d25174c86ee7483f65e053b31b2" translate="yes" xml:space="preserve">
          <source>As stated earlier, you can override the default queryset used by the model formset:</source>
          <target state="translated">前述したように、モデルフォームセットで使用されるデフォルトのクエリセットをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="e45703de797a79b14a59e52d99d9dea8a4938b96" translate="yes" xml:space="preserve">
          <source>As the Python comment above points out, you should always return an &lt;a href=&quot;../ref/request-response#django.http.HttpResponseRedirect&quot;&gt;&lt;code&gt;HttpResponseRedirect&lt;/code&gt;&lt;/a&gt; after successfully dealing with POST data. This tip isn&amp;rsquo;t specific to Django; it&amp;rsquo;s good Web development practice in general.</source>
          <target state="translated">上記のPythonコメントが指摘しているように、POSTデータを正常に処理した後は、常に&lt;a href=&quot;../ref/request-response#django.http.HttpResponseRedirect&quot;&gt; &lt;code&gt;HttpResponseRedirect&lt;/code&gt; を&lt;/a&gt;返す必要があります。このヒントはDjangoに固有のものではありません。それは一般的に良いWeb開発の実践です。</target>
        </trans-unit>
        <trans-unit id="8a4e0f05200f4e3bd790c9fcec0b86c5782a9738" translate="yes" xml:space="preserve">
          <source>As the current site is stored in the database, each call to &lt;code&gt;Site.objects.get_current()&lt;/code&gt; could result in a database query. But Django is a little cleverer than that: on the first request, the current site is cached, and any subsequent call returns the cached data instead of hitting the database.</source>
          <target state="translated">現在のサイトはデータベースに格納されているため、 &lt;code&gt;Site.objects.get_current()&lt;/code&gt; を呼び出すたびにデータベースクエリが発生する可能性があります。しかし、Djangoはそれより少し賢いです。最初のリクエストでは、現在のサイトがキャッシュされ、その後の呼び出しはデータベースにヒットするのではなく、キャッシュされたデータを返します。</target>
        </trans-unit>
        <trans-unit id="1f4099ae5355f2d5fb266cbbd62c197aa3fbf97a" translate="yes" xml:space="preserve">
          <source>As the name suggests the dummy backend does nothing with your messages. To specify this backend, put the following in your settings:</source>
          <target state="translated">その名が示すように、ダミーのバックエンドはあなたのメッセージには何もしません。このバックエンドを指定するには、以下のように設定します。</target>
        </trans-unit>
        <trans-unit id="b2d24c8e355d23d5cc3828d2e2775a8d9e8611a3" translate="yes" xml:space="preserve">
          <source>As the reverse name for a field should be unique, be careful if you intend to subclass your model. To work around name collisions, part of the name should contain &lt;code&gt;'%(app_label)s'&lt;/code&gt; and &lt;code&gt;'%(model_name)s'&lt;/code&gt;, which are replaced respectively by the name of the application the model is in, and the name of the model, both lowercased. See the paragraph on &lt;a href=&quot;../../topics/db/models#abstract-related-name&quot;&gt;related names for abstract models&lt;/a&gt;.</source>
          <target state="translated">フィールドのリバース名は一意である必要があるため、モデルをサブクラス化する場合は注意してください。名前の衝突を回避するには、名前の一部に &lt;code&gt;'%(app_label)s'&lt;/code&gt; と &lt;code&gt;'%(model_name)s'&lt;/code&gt; を含める必要があります。これらはそれぞれ、モデルが存在するアプリケーションの名前とモデルの名前に置き換えられます。両方小文字。&lt;a href=&quot;../../topics/db/models#abstract-related-name&quot;&gt;抽象モデルの関連する名前&lt;/a&gt;の段落を参照してください。</target>
        </trans-unit>
        <trans-unit id="4f01c1b15fa03baf75efdacb0fbf90b5fd8345d1" translate="yes" xml:space="preserve">
          <source>As this example shows, the same datetime has a different date, depending on the time zone in which it is represented. But the real problem is more fundamental.</source>
          <target state="translated">この例が示すように、同じ日付の時刻でも、表現されている時間帯によって日付が異なります。しかし、本当の問題はもっと根本的なものです。</target>
        </trans-unit>
        <trans-unit id="a4703cede843d60da3b461a023a621276dff45e4" translate="yes" xml:space="preserve">
          <source>As this example suggests, you can instantiate &lt;code&gt;Client&lt;/code&gt; from within a session of the Python interactive interpreter.</source>
          <target state="translated">この例が示すように、Pythonインタラクティブインタープリターのセッション内から &lt;code&gt;Client&lt;/code&gt; をインスタンス化できます。</target>
        </trans-unit>
        <trans-unit id="502899b59d7f16acbbec8754d2d17b6c9dfe74f9" translate="yes" xml:space="preserve">
          <source>As users create new sessions on your website, session data can accumulate in your session store. If you&amp;rsquo;re using the database backend, the &lt;code&gt;django_session&lt;/code&gt; database table will grow. If you&amp;rsquo;re using the file backend, your temporary directory will contain an increasing number of files.</source>
          <target state="translated">ユーザーがWebサイトで新しいセッションを作成すると、セッションデータがセッションストアに蓄積されます。データベースバックエンドを使用している場合は、 &lt;code&gt;django_session&lt;/code&gt; データベーステーブルが大きくなります。ファイルバックエンドを使用している場合、一時ディレクトリに含まれるファイルの数が増えます。</target>
        </trans-unit>
        <trans-unit id="83a34f76469cc0136158fd2b4197ba5b321cd9c2" translate="yes" xml:space="preserve">
          <source>As we can see, &lt;code&gt;formset.errors&lt;/code&gt; is a list whose entries correspond to the forms in the formset. Validation was performed for each of the two forms, and the expected error message appears for the second item.</source>
          <target state="translated">ご覧のとおり、 &lt;code&gt;formset.errors&lt;/code&gt; は、フォームセット内のフォームに対応するエントリを持つリストです。2つのフォームのそれぞれに対して検証が実行され、2番目のアイテムに対して予期されるエラーメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="536eb63644b98260775a8d5bdac6172bde9f8ea8" translate="yes" xml:space="preserve">
          <source>As we mentioned earlier, filter arguments can be strings:</source>
          <target state="translated">先ほども述べたように、フィルタの引数には文字列を指定することができます。</target>
        </trans-unit>
        <trans-unit id="d97e9a7198203ff3683051dde6ca2dc19c4acf85" translate="yes" xml:space="preserve">
          <source>As well as WSGI, Django also supports deploying on &lt;a href=&quot;https://asgi.readthedocs.io/en/latest/&quot;&gt;ASGI&lt;/a&gt;, the emerging Python standard for asynchronous web servers and applications.</source>
          <target state="translated">Djangoは、WSGIだけでなく、非同期Webサーバーおよびアプリケーションの新しいPython標準である&lt;a href=&quot;https://asgi.readthedocs.io/en/latest/&quot;&gt;ASGI&lt;/a&gt;へのデプロイもサポートしています。</target>
        </trans-unit>
        <trans-unit id="e2585fab4aa7d69fceb35ff4ec7ebeb9b8c671c6" translate="yes" xml:space="preserve">
          <source>As well as being synchronous functions, views can also be asynchronous (&amp;ldquo;async&amp;rdquo;) functions, normally defined using Python&amp;rsquo;s &lt;code&gt;async def&lt;/code&gt; syntax. Django will automatically detect these and run them in an async context. However, you will need to use an async server based on ASGI to get their performance benefits.</source>
          <target state="translated">ビューは同期関数であるだけでなく、非同期（「非同期」）関数でもあり、通常はPythonの &lt;code&gt;async def&lt;/code&gt; 構文を使用して定義されます。Djangoはこれらを自動的に検出し、非同期コンテキストで実行します。ただし、パフォーマンスを向上させるには、ASGIに基づく非同期サーバーを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3389aa26160872fdc1ff800062f3da9f89662bf3" translate="yes" xml:space="preserve">
          <source>As well as being used in operations on single instances as above, &lt;code&gt;F()&lt;/code&gt; can be used on &lt;code&gt;QuerySets&lt;/code&gt; of object instances, with &lt;code&gt;update()&lt;/code&gt;. This reduces the two queries we were using above - the &lt;code&gt;get()&lt;/code&gt; and the &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; - to just one:</source>
          <target state="translated">&lt;code&gt;F()&lt;/code&gt; は、上記のように単一インスタンスの操作で使用されるだけでなく、 &lt;code&gt;update()&lt;/code&gt; を使用してオブジェクトインスタンスの &lt;code&gt;QuerySets&lt;/code&gt; で使用できます。これにより、上記で使用していた2つのクエリ &lt;code&gt;get()&lt;/code&gt; と&lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; )が&lt;/a&gt; 1つに削減されます。</target>
        </trans-unit>
        <trans-unit id="4b32c9168863a30b185a6576d29e12334bee3290" translate="yes" xml:space="preserve">
          <source>As well as caching of the whole &lt;code&gt;QuerySet&lt;/code&gt;, there is caching of the result of attributes on ORM objects. In general, attributes that are not callable will be cached. For example, assuming the &lt;a href=&quot;queries#queryset-model-example&quot;&gt;example Weblog models&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;QuerySet&lt;/code&gt; 全体のキャッシュだけでなく、ORMオブジェクトの属性の結果のキャッシュもあります。一般に、呼び出し可能でない属性はキャッシュされます。たとえば、&lt;a href=&quot;queries#queryset-model-example&quot;&gt;ウェブログモデルの&lt;/a&gt;例を想定します。</target>
        </trans-unit>
        <trans-unit id="f07fcd9b4fddeadcbcc6d4ab96f71f5ab157dc76" translate="yes" xml:space="preserve">
          <source>As well as changing the database schema, you can also use migrations to change the data in the database itself, in conjunction with the schema if you want.</source>
          <target state="translated">データベースのスキーマを変更するだけでなく、必要に応じてスキーマと連動してデータベース自体のデータを変更するためにマイグレーションを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="fb9aab9ad8871c655982b7b13ec479d3f5d6959c" translate="yes" xml:space="preserve">
          <source>As well as its &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements, a form must specify two things:</source>
          <target state="translated">同様にそのよう &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素、フォームの2つを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="a6abd1f01d13e5e8325182af83c6feb5563a04b9" translate="yes" xml:space="preserve">
          <source>As well as offering potential performance advantages, &lt;code&gt;@cached_property&lt;/code&gt; can ensure that an attribute&amp;rsquo;s value does not change unexpectedly over the life of an instance. This could occur with a method whose computation is based on &lt;code&gt;datetime.now()&lt;/code&gt;, or if a change were saved to the database by some other process in the brief interval between subsequent invocations of a method on the same instance.</source>
          <target state="translated">潜在的なパフォーマンス上の利点を提供するだけでなく、 &lt;code&gt;@cached_property&lt;/code&gt; は、インスタンスの存続期間にわたって属性の値が予期せず変更されないようにすることができます。これは、計算が &lt;code&gt;datetime.now()&lt;/code&gt; に基づくメソッドの場合、または同じインスタンスでのメソッドの後続の呼び出しの間の短い間隔で他のプロセスによって変更がデータベースに保存された場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ebe8b7ef5f360037fb3404468afcd52377e7e74f" translate="yes" xml:space="preserve">
          <source>As well as the named group syntax, e.g. &lt;code&gt;(?P&amp;lt;year&amp;gt;[0-9]{4})&lt;/code&gt;, you can also use the shorter unnamed group, e.g. &lt;code&gt;([0-9]{4})&lt;/code&gt;.</source>
          <target state="translated">例えばだけでなく、指定されたグループの構文として &lt;code&gt;(?P&amp;lt;year&amp;gt;[0-9]{4})&lt;/code&gt; 、あなたも短い無名のグループを使用することができ、例えば &lt;code&gt;([0-9]{4})&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9e6561daa7eafe8b31858f977bd4b5a102fd1e7c" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;#urlize&quot;&gt;urlize&lt;/a&gt;, this filter should only be applied to plain text.</source>
          <target state="translated">&lt;a href=&quot;#urlize&quot;&gt;urlize&lt;/a&gt;と同様に、このフィルターはプレーンテキストにのみ適用する必要があります。</target>
        </trans-unit>
        <trans-unit id="195bc7afc75bee63d50df5ca12d3cc6ac1d43324" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;../../ref/models/fields#recursive-relationships&quot;&gt;recursive relationship&lt;/a&gt; can be defined and &lt;a href=&quot;../../ref/models/fields#lazy-relationships&quot;&gt;references to as-yet undefined models&lt;/a&gt; can be made.</source>
          <target state="translated">同様&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/models/fields#recursive-relationships&quot;&gt;再帰的な関係を&lt;/a&gt;定義することができ、&lt;a href=&quot;../../ref/models/fields#lazy-relationships&quot;&gt;未定義のモデルとして、未だに参照&lt;/a&gt;することができます。</target>
        </trans-unit>
        <trans-unit id="d12d0262217934e05bda9cb843bd23a7b0971aca" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, you can also create &lt;a href=&quot;../../ref/models/fields#recursive-relationships&quot;&gt;recursive relationships&lt;/a&gt; (an object with a many-to-many relationship to itself) and &lt;a href=&quot;../../ref/models/fields#lazy-relationships&quot;&gt;relationships to models not yet defined&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;と同様に、&lt;a href=&quot;../../ref/models/fields#recursive-relationships&quot;&gt;再帰的な関係&lt;/a&gt;（それ自体に対して多対多の関係を持つオブジェクト）および&lt;a href=&quot;../../ref/models/fields#lazy-relationships&quot;&gt;まだ定義されていないモデル&lt;/a&gt;との関係を作成することもできます。</target>
        </trans-unit>
        <trans-unit id="e8c6e392099eca6c7e281f29671628ef8d61549b" translate="yes" xml:space="preserve">
          <source>As with &lt;code&gt;aggregate()&lt;/code&gt;, the name for the annotation is automatically derived from the name of the aggregate function and the name of the field being aggregated. You can override this default name by providing an alias when you specify the annotation:</source>
          <target state="translated">&lt;code&gt;aggregate()&lt;/code&gt; と同様に、アノテーションの名前は、集約関数の名前と集約されるフィールドの名前から自動的に導出されます。アノテーションを指定するときにエイリアスを指定することで、このデフォルト名を上書きできます。</target>
        </trans-unit>
        <trans-unit id="5d5177c681d3236422cff8cca56cf926bb1d7cc5" translate="yes" xml:space="preserve">
          <source>As with a &lt;code&gt;ModelForm&lt;/code&gt;, you can save the data as a model object. This is done with the formset&amp;rsquo;s &lt;code&gt;save()&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;ModelForm&lt;/code&gt; と同様に、データをモデルオブジェクトとして保存できます。これはフォームセットの &lt;code&gt;save()&lt;/code&gt; メソッドで行われます：</target>
        </trans-unit>
        <trans-unit id="f72eeb211b45f63562fd3611d19742bd0f2e3757" translate="yes" xml:space="preserve">
          <source>As with all deployment tasks, the devil&amp;rsquo;s in the details. Every production setup will be a bit different, so you&amp;rsquo;ll need to adapt the basic outline to fit your needs. Below are a few common patterns that might help.</source>
          <target state="translated">すべての展開タスクと同様に、詳細には悪魔がいます。すべての制作セットアップは少し異なるため、ニーズに合わせて基本的なアウトラインを調整する必要があります。以下は、役立つ可能性のあるいくつかの一般的なパターンです。</target>
        </trans-unit>
        <trans-unit id="d344166e704cbb21a3a3d2b39d35983e33095843" translate="yes" xml:space="preserve">
          <source>As with basic forms, you can extend and reuse &lt;code&gt;ModelForms&lt;/code&gt; by inheriting them. This is useful if you need to declare extra fields or extra methods on a parent class for use in a number of forms derived from models. For example, using the previous &lt;code&gt;ArticleForm&lt;/code&gt; class:</source>
          <target state="translated">基本的なフォームと同様に、 &lt;code&gt;ModelForms&lt;/code&gt; を継承することで拡張および再利用できます。これは、モデルから派生した多数のフォームで使用するために、親クラスで追加のフィールドまたは追加のメソッドを宣言する必要がある場合に役立ちます。たとえば、前の &lt;code&gt;ArticleForm&lt;/code&gt; クラスを使用します。</target>
        </trans-unit>
        <trans-unit id="b8a6cb2344f9d9208fd7d7b21b208a1b9b466d30" translate="yes" xml:space="preserve">
          <source>As with filter registration, it is also possible to use this as a decorator:</source>
          <target state="translated">フィルタ登録と同様、デコレータとしても使用できます。</target>
        </trans-unit>
        <trans-unit id="7f84614669e2fdbcc38582abe3003d63a2433a52" translate="yes" xml:space="preserve">
          <source>As with other HTTP headers in &lt;code&gt;request.META&lt;/code&gt;, the header name received from the server is normalized by converting all characters to uppercase, replacing any hyphens with underscores, and adding an &lt;code&gt;'HTTP_'&lt;/code&gt; prefix to the name. For example, if your client sends a &lt;code&gt;'X-XSRF-TOKEN'&lt;/code&gt; header, the setting should be &lt;code&gt;'HTTP_X_XSRF_TOKEN'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;request.META&lt;/code&gt; の他のHTTPヘッダーと同様に、サーバーから受信したヘッダー名は、すべての文字を大文字に変換し、ハイフンをアンダースコアに置き換え、名前に &lt;code&gt;'HTTP_'&lt;/code&gt; プレフィックスを追加することで正規化されます。たとえば、クライアントが &lt;code&gt;'X-XSRF-TOKEN'&lt;/code&gt; ヘッダーを送信する場合、設定は &lt;code&gt;'HTTP_X_XSRF_TOKEN'&lt;/code&gt; にする必要があります。</target>
        </trans-unit>
        <trans-unit id="6d5eeeb534d86f8c229f540d1e439534abcf6637" translate="yes" xml:space="preserve">
          <source>As with other PostgreSQL fields, there are three standard containment operators: &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;contained_by&lt;/code&gt; and &lt;code&gt;overlap&lt;/code&gt;, using the SQL operators &lt;code&gt;@&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;@&lt;/code&gt;, and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; respectively.</source>
          <target state="translated">他のPostgreSQLフィールドと同様に、SQL演算子 &lt;code&gt;@&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;@&lt;/code&gt; 、および &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; をそれぞれ使用して、 &lt;code&gt;contains&lt;/code&gt; 、 &lt;code&gt;contained_by&lt;/code&gt; 、 &lt;code&gt;overlap&lt;/code&gt; の 3つの標準的な包含演算子があります。</target>
        </trans-unit>
        <trans-unit id="ba0b4d8b02f8406aeb52d3f8ee5150ce47d68b9e" translate="yes" xml:space="preserve">
          <source>As with other fields, storing &lt;code&gt;None&lt;/code&gt; as the field&amp;rsquo;s value will store it as SQL &lt;code&gt;NULL&lt;/code&gt;. While not recommended, it is possible to store JSON scalar &lt;code&gt;null&lt;/code&gt; instead of SQL &lt;code&gt;NULL&lt;/code&gt; by using &lt;a href=&quot;../../ref/models/expressions#django.db.models.Value&quot;&gt;&lt;code&gt;Value('null')&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">他のフィールドと同様に、フィールドの値として &lt;code&gt;None&lt;/code&gt; を格納すると、SQLNULLとして格納され &lt;code&gt;NULL&lt;/code&gt; 。推奨されていませんが、&lt;a href=&quot;../../ref/models/expressions#django.db.models.Value&quot;&gt; &lt;code&gt;Value('null')&lt;/code&gt; &lt;/a&gt;を使用して、 &lt;code&gt;null&lt;/code&gt; 代わりにJSONスカラーnullを格納することができ &lt;code&gt;NULL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3e64144e886b411ea54b8b392eef0caf07cb6cef" translate="yes" xml:space="preserve">
          <source>As with regular forms, it&amp;rsquo;s possible to specify initial data for forms by specifying an &lt;code&gt;initial&lt;/code&gt; parameter when instantiating the form. Initial values provided this way will override both initial values from the form field and values from an attached model instance. For example:</source>
          <target state="translated">通常のフォームと同様に、フォームをインスタンス化するときに &lt;code&gt;initial&lt;/code&gt; パラメーターを指定することで、フォームの初期データを指定できます。この方法で提供される初期値は、フォームフィールドの初期値と、アタッチされたモデルインスタンスの値の両方をオーバーライドします。例えば：</target>
        </trans-unit>
        <trans-unit id="ffe99c485c3dc0ce533f1043d34823610c27123f" translate="yes" xml:space="preserve">
          <source>As with regular formsets, it&amp;rsquo;s possible to &lt;a href=&quot;formsets#formsets-initial-data&quot;&gt;specify initial data&lt;/a&gt; for forms in the formset by specifying an &lt;code&gt;initial&lt;/code&gt; parameter when instantiating the model formset class returned by &lt;a href=&quot;../../ref/forms/models#django.forms.models.modelformset_factory&quot;&gt;&lt;code&gt;modelformset_factory()&lt;/code&gt;&lt;/a&gt;. However, with model formsets, the initial values only apply to extra forms, those that aren&amp;rsquo;t attached to an existing model instance. If the length of &lt;code&gt;initial&lt;/code&gt; exceeds the number of extra forms, the excess initial data is ignored. If the extra forms with initial data aren&amp;rsquo;t changed by the user, they won&amp;rsquo;t be validated or saved.</source>
          <target state="translated">通常のフォームセットと同様に、&lt;a href=&quot;../../ref/forms/models#django.forms.models.modelformset_factory&quot;&gt; &lt;code&gt;modelformset_factory()&lt;/code&gt; &lt;/a&gt;によって返されたモデルフォームセットクラスをインスタンス化するときに &lt;code&gt;initial&lt;/code&gt; パラメーターを指定することにより、フォームセットのフォームの&lt;a href=&quot;formsets#formsets-initial-data&quot;&gt;初期データ&lt;/a&gt;を指定できます。ただし、モデルフォームセットでは、初期値は既存のモデルインスタンスにアタッチされていない追加のフォームにのみ適用されます。 &lt;code&gt;initial&lt;/code&gt; の長さが追加のフォームの数を超える場合、超過した初期データは無視されます。初期データを含む追加のフォームがユーザーによって変更されない場合、それらは検証または保存されません。</target>
        </trans-unit>
        <trans-unit id="527f8cf0e286007c370fc877419357e189a4595a" translate="yes" xml:space="preserve">
          <source>As with regular formsets, you can use the &lt;code&gt;max_num&lt;/code&gt; and &lt;code&gt;extra&lt;/code&gt; parameters to &lt;a href=&quot;../../ref/forms/models#django.forms.models.modelformset_factory&quot;&gt;&lt;code&gt;modelformset_factory()&lt;/code&gt;&lt;/a&gt; to limit the number of extra forms displayed.</source>
          <target state="translated">通常のフォームセットと同様に、 &lt;code&gt;max_num&lt;/code&gt; および &lt;code&gt;extra&lt;/code&gt; パラメーターを&lt;a href=&quot;../../ref/forms/models#django.forms.models.modelformset_factory&quot;&gt; &lt;code&gt;modelformset_factory()&lt;/code&gt; &lt;/a&gt;に使用して、表示される追加のフォームの数を制限できます。</target>
        </trans-unit>
        <trans-unit id="1d5de867c1639776d4da6c2f4f2d7cb718667f07" translate="yes" xml:space="preserve">
          <source>As with the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt;&lt;code&gt;fields&lt;/code&gt;&lt;/a&gt; option, to display multiple fields on the same line, wrap those fields in their own tuple. In this example, the &lt;code&gt;first_name&lt;/code&gt; and &lt;code&gt;last_name&lt;/code&gt; fields will display on the same line:</source>
          <target state="translated">同じように&lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt; &lt;code&gt;fields&lt;/code&gt; &lt;/a&gt;同じ行に複数のフィールドを表示するオプション、自分のタプルでそれらのフィールドを包みます。この例では、 &lt;code&gt;first_name&lt;/code&gt; フィールドと &lt;code&gt;last_name&lt;/code&gt; フィールドが同じ行に表示されます。</target>
        </trans-unit>
        <trans-unit id="2234be373123e78349407666595d653e39152ca6" translate="yes" xml:space="preserve">
          <source>As with the &lt;code&gt;filter()&lt;/code&gt; clause, the order in which &lt;code&gt;annotate()&lt;/code&gt; and &lt;code&gt;values()&lt;/code&gt; clauses are applied to a query is significant. If the &lt;code&gt;values()&lt;/code&gt; clause precedes the &lt;code&gt;annotate()&lt;/code&gt;, the annotation will be computed using the grouping described by the &lt;code&gt;values()&lt;/code&gt; clause.</source>
          <target state="translated">同様に &lt;code&gt;filter()&lt;/code&gt; 句、順番に &lt;code&gt;annotate()&lt;/code&gt; と &lt;code&gt;values()&lt;/code&gt; 句は、クエリに適用される重要です。 &lt;code&gt;values()&lt;/code&gt; 句が &lt;code&gt;annotate()&lt;/code&gt; の前にある場合、注釈は、 &lt;code&gt;values()&lt;/code&gt; 句で記述されたグループ化を使用して計算されます。</target>
        </trans-unit>
        <trans-unit id="9d604729c5ccc31017088443f69517e4b2a49494" translate="yes" xml:space="preserve">
          <source>As with the filter class, you may control which exception reporter class to use within any given view by setting the &lt;code&gt;HttpRequest&lt;/code&gt;&amp;rsquo;s &lt;code&gt;exception_reporter_class&lt;/code&gt; attribute:</source>
          <target state="translated">フィルタクラスと同様に、 &lt;code&gt;HttpRequest&lt;/code&gt; の &lt;code&gt;exception_reporter_class&lt;/code&gt; 属性を設定することで、特定のビュー内で使用する例外レポータークラスを制御できます。</target>
        </trans-unit>
        <trans-unit id="9fba9371114d62d3639b4d42414a8a9aa5814a71" translate="yes" xml:space="preserve">
          <source>As you are using an intermediate model, you can also query on its attributes:</source>
          <target state="translated">中間モデルを使用しているので、その属性について問い合わせることもできます。</target>
        </trans-unit>
        <trans-unit id="cc048712e6598211018ab15fc4c4e5d7705ea164" translate="yes" xml:space="preserve">
          <source>As you can see it only displayed one empty form. The number of empty forms that is displayed is controlled by the &lt;code&gt;extra&lt;/code&gt; parameter. By default, &lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt;&lt;code&gt;formset_factory()&lt;/code&gt;&lt;/a&gt; defines one extra form; the following example will create a formset class to display two blank forms:</source>
          <target state="translated">ご覧のとおり、空のフォームが1つだけ表示されています。表示される空のフォームの数は、 &lt;code&gt;extra&lt;/code&gt; パラメーターによって制御されます。デフォルトでは、&lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt; &lt;code&gt;formset_factory()&lt;/code&gt; &lt;/a&gt;は1つの追加フォームを定義します。次の例では、2つの空白のフォームを表示するformsetクラスを作成します。</target>
        </trans-unit>
        <trans-unit id="879c04f43647cd15cb5b4809e41772fd4186faf1" translate="yes" xml:space="preserve">
          <source>As you can see, &lt;code&gt;SlugField&lt;/code&gt; is a &lt;code&gt;CharField&lt;/code&gt; with a customized validator that validates that submitted text obeys to some character rules. This can also be done on field definition so:</source>
          <target state="translated">ご覧のとおり、 &lt;code&gt;SlugField&lt;/code&gt; は、送信されたテキストがいくつかの文字ルールに従っていることを検証するカスタマイズされたバリデーターを持つ &lt;code&gt;CharField&lt;/code&gt; です。これはフィールド定義でも実行できるため、次のようになります。</target>
        </trans-unit>
        <trans-unit id="67c02b659fb85b72e2371888efd652ce146dfaa7" translate="yes" xml:space="preserve">
          <source>As you can see, the &lt;code&gt;deserialize&lt;/code&gt; function takes the same format argument as &lt;code&gt;serialize&lt;/code&gt;, a string or stream of data, and returns an iterator.</source>
          <target state="translated">ご覧のとおり、 &lt;code&gt;deserialize&lt;/code&gt; 関数は、データの文字列またはストリームである &lt;code&gt;serialize&lt;/code&gt; と同じ形式の引数を取り、イテレータを返します。</target>
        </trans-unit>
        <trans-unit id="71345e5bba220323ebb78dd2c42b60e93d3002a3" translate="yes" xml:space="preserve">
          <source>As you can see, the &lt;code&gt;if&lt;/code&gt; tag may take one or several &lt;code&gt;{% elif %}&lt;/code&gt; clauses, as well as an &lt;code&gt;{% else %}&lt;/code&gt; clause that will be displayed if all previous conditions fail. These clauses are optional.</source>
          <target state="translated">ご覧のとおり、 &lt;code&gt;if&lt;/code&gt; タグは1つまたは複数の &lt;code&gt;{% elif %}&lt;/code&gt; 句、および以前のすべての条件が失敗した場合に表示される &lt;code&gt;{% else %}&lt;/code&gt; 句を取る場合があります。これらの句はオプションです。</target>
        </trans-unit>
        <trans-unit id="f8915f71d46f96a37ab702d1b08b5f5deda8900e" translate="yes" xml:space="preserve">
          <source>As you can see, the action is rather short; all the complex logic would belong in your export view. This would need to deal with objects of any type, hence the business with the &lt;code&gt;ContentType&lt;/code&gt;.</source>
          <target state="translated">ご覧のとおり、アクションはかなり短いです。すべての複雑なロジックはエクスポートビューに属します。これは、任意のタイプのオブジェクトを処理する必要があるため、 &lt;code&gt;ContentType&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="0ba5fb948174a296eee1bc5ce8a1d74a772bd21b" translate="yes" xml:space="preserve">
          <source>As you can see, the view logic of a model formset isn&amp;rsquo;t drastically different than that of a &amp;ldquo;normal&amp;rdquo; formset. The only difference is that we call &lt;code&gt;formset.save()&lt;/code&gt; to save the data into the database. (This was described above, in &lt;a href=&quot;#saving-objects-in-the-formset&quot;&gt;Saving objects in the formset&lt;/a&gt;.)</source>
          <target state="translated">ご覧のとおり、モデルフォームセットのビューロジックは、「通常の」フォームセットのビューロジックと大きく異なりません。唯一の違いは、 &lt;code&gt;formset.save()&lt;/code&gt; を呼び出してデータをデータベースに保存することです。（これについて&lt;a href=&quot;#saving-objects-in-the-formset&quot;&gt;は、フォームセットへのオブジェクトの保存で&lt;/a&gt;説明しています。）</target>
        </trans-unit>
        <trans-unit id="de0f25a2104a49777d9ee597d14852fc1ff51dce" translate="yes" xml:space="preserve">
          <source>As you might expect, the &lt;code&gt;ForeignKey&lt;/code&gt; and &lt;code&gt;ManyToManyField&lt;/code&gt; model field types are special cases:</source>
          <target state="translated">ご &lt;code&gt;ManyToManyField&lt;/code&gt; 、 &lt;code&gt;ForeignKey&lt;/code&gt; およびManyToManyFieldモデルのフィールドタイプは特殊なケースです。</target>
        </trans-unit>
        <trans-unit id="cbdc9cb77dc9cc6e2126127526db5ead30982a19" translate="yes" xml:space="preserve">
          <source>As you might expect, the created models will have an attribute for every field in the table. Note that &lt;code&gt;inspectdb&lt;/code&gt; has a few special cases in its field-name output:</source>
          <target state="translated">ご想像のとおり、作成されたモデルには、テーブル内のすべてのフィールドの属性があります。 &lt;code&gt;inspectdb&lt;/code&gt; のフィールド名の出力には、いくつかの特殊なケースがあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b982efad890175e01516b81e3f537fb6d8014461" translate="yes" xml:space="preserve">
          <source>Aside from strings and bytestrings, there&amp;rsquo;s a third type of string-like object you may encounter when using Django. The framework&amp;rsquo;s internationalization features introduce the concept of a &amp;ldquo;lazy translation&amp;rdquo; &amp;ndash; a string that has been marked as translated but whose actual translation result isn&amp;rsquo;t determined until the object is used in a string. This feature is useful in cases where the translation locale is unknown until the string is used, even though the string might have originally been created when the code was first imported.</source>
          <target state="translated">文字列とバイト文字列以外に、Djangoを使用するときに遭遇する可能性のある3番目のタイプの文字列のようなオブジェクトがあります。フレームワークの国際化機能は、「遅延翻訳」の概念を導入します。これは、翻訳済みとしてマークされているが、実際の翻訳結果は、オブジェクトが文字列で使用されるまで決定されません。この機能は、コードが最初にインポートされたときに文字列が最初に作成されていたとしても、文字列が使用されるまで翻訳ロケールが不明な場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="73bf916809eadb87e354ae61d91f8d7fada6f240" translate="yes" xml:space="preserve">
          <source>Aside from the HTML generated by the server, web applications generally need to serve additional files &amp;mdash; such as images, JavaScript, or CSS &amp;mdash; necessary to render the complete web page. In Django, we refer to these files as &amp;ldquo;static files&amp;rdquo;.</source>
          <target state="translated">サーバーによって生成されたHTMLの他に、Webアプリケーションは通常、完全なWebページをレンダリングするために必要な追加のファイル（画像、JavaScript、CSSなど）を提供する必要があります。Djangoでは、これらのファイルを「静的ファイル」と呼びます。</target>
        </trans-unit>
        <trans-unit id="801335ff891c76c3f61153e82fc7e76f405d1de3" translate="yes" xml:space="preserve">
          <source>Aside from using a separate database, the test runner will otherwise use all of the same database settings you have in your settings file: &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-ENGINE&quot;&gt;&lt;code&gt;ENGINE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/settings#std:setting-USER&quot;&gt;&lt;code&gt;USER&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/settings#std:setting-HOST&quot;&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/a&gt;, etc. The test database is created by the user specified by &lt;a href=&quot;../../ref/settings#std:setting-USER&quot;&gt;&lt;code&gt;USER&lt;/code&gt;&lt;/a&gt;, so you&amp;rsquo;ll need to make sure that the given user account has sufficient privileges to create a new database on the system.</source>
          <target state="translated">別のデータベースを使用する以外に、テストランナーは設定ファイルにある同じデータベース設定（&lt;a href=&quot;../../ref/settings#std:setting-DATABASE-ENGINE&quot;&gt; &lt;code&gt;ENGINE&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/settings#std:setting-USER&quot;&gt; &lt;code&gt;USER&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/settings#std:setting-HOST&quot;&gt; &lt;code&gt;HOST&lt;/code&gt; &lt;/a&gt;など）をすべて使用します。テストデータベースは、&lt;a href=&quot;../../ref/settings#std:setting-USER&quot;&gt; &lt;code&gt;USER&lt;/code&gt; &lt;/a&gt;で指定されたユーザーによって作成されるため、指定されたユーザーアカウントに、システム上に新しいデータベースを作成するための十分な権限があることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="a3e68cd197fc11a427c01118c11dbb487de2b2c1" translate="yes" xml:space="preserve">
          <source>Ask a question in the &lt;a href=&quot;irc://irc.freenode.net/django&quot;&gt;#django IRC channel&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;irc://irc.freenode.net/django&quot;&gt;#django IRCチャンネルで&lt;/a&gt;質問してください。</target>
        </trans-unit>
        <trans-unit id="7eb1f68e967a33147b40021bee5c44bbf8c067e4" translate="yes" xml:space="preserve">
          <source>Ask your question on the &lt;a href=&quot;https://groups.google.com/d/forum/geodjango&quot;&gt;GeoDjango&lt;/a&gt; mailing list.</source>
          <target state="translated">&lt;a href=&quot;https://groups.google.com/d/forum/geodjango&quot;&gt;GeoDjango&lt;/a&gt;メーリングリストで質問してください。</target>
        </trans-unit>
        <trans-unit id="49bf55dc112eb3597726ba8ecf785a4fae4cbce0" translate="yes" xml:space="preserve">
          <source>Assertions</source>
          <target state="translated">Assertions</target>
        </trans-unit>
        <trans-unit id="3c3ab385220f6b65aa5032ebca76349ce0988bbe" translate="yes" xml:space="preserve">
          <source>Asserts that a &lt;code&gt;Response&lt;/code&gt; instance produced the given &lt;code&gt;status_code&lt;/code&gt; and that &lt;code&gt;text&lt;/code&gt; appears in the content of the response. If &lt;code&gt;count&lt;/code&gt; is provided, &lt;code&gt;text&lt;/code&gt; must occur exactly &lt;code&gt;count&lt;/code&gt; times in the response.</source>
          <target state="translated">&lt;code&gt;Response&lt;/code&gt; インスタンスが特定の &lt;code&gt;status_code&lt;/code&gt; を生成し、その &lt;code&gt;text&lt;/code&gt; が応答のコンテンツに表示されることをアサートします。 &lt;code&gt;count&lt;/code&gt; が指定されている場合、 &lt;code&gt;text&lt;/code&gt; は応答で正確に &lt;code&gt;count&lt;/code&gt; 回発生する必要があります。</target>
        </trans-unit>
        <trans-unit id="463c066a0ef6fd410a35e951dd7b3b5877e69f1f" translate="yes" xml:space="preserve">
          <source>Asserts that a &lt;code&gt;Response&lt;/code&gt; instance produced the given &lt;code&gt;status_code&lt;/code&gt; and that &lt;code&gt;text&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; appear in the content of the response.</source>
          <target state="translated">主張している &lt;code&gt;Response&lt;/code&gt; インスタンスが与えられた生産 &lt;code&gt;status_code&lt;/code&gt; し、その &lt;code&gt;text&lt;/code&gt; ない&lt;em&gt;ではない&lt;/em&gt;応答の内容で表示されます。</target>
        </trans-unit>
        <trans-unit id="0fd5de239fdc9bd26df8c09eab928a6817abad4f" translate="yes" xml:space="preserve">
          <source>Asserts that a field on a form raises the provided list of errors when rendered on the form.</source>
          <target state="translated">フォーム上のフィールドがフォーム上でレンダリングされたときに、指定されたエラーのリストを発生させることをアサートします。</target>
        </trans-unit>
        <trans-unit id="42c441e6d48fad10619b9628fd6668cb1e216b3a" translate="yes" xml:space="preserve">
          <source>Asserts that a form field behaves correctly with various inputs.</source>
          <target state="translated">フォームフィールドが様々な入力に対して正しく動作することを保証します。</target>
        </trans-unit>
        <trans-unit id="c16ebaf667ff8d9be17b8441be73f7c3b07fcbff" translate="yes" xml:space="preserve">
          <source>Asserts that a queryset &lt;code&gt;qs&lt;/code&gt; returns a particular list of values &lt;code&gt;values&lt;/code&gt;.</source>
          <target state="translated">queryset &lt;code&gt;qs&lt;/code&gt; が特定の値のリストの値を返すことを表明し &lt;code&gt;values&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7d04d0343979b42c4abb311c3aa9e3d89b870915" translate="yes" xml:space="preserve">
          <source>Asserts that execution of &lt;code&gt;callable&lt;/code&gt; raises &lt;code&gt;expected_exception&lt;/code&gt; and that &lt;code&gt;expected_message&lt;/code&gt; is found in the exception&amp;rsquo;s message. Any other outcome is reported as a failure. It&amp;rsquo;s a simpler version of &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaisesRegex&quot;&gt;&lt;code&gt;unittest.TestCase.assertRaisesRegex()&lt;/code&gt;&lt;/a&gt; with the difference that &lt;code&gt;expected_message&lt;/code&gt; isn&amp;rsquo;t treated as a regular expression.</source>
          <target state="translated">&lt;code&gt;callable&lt;/code&gt; の実行が &lt;code&gt;expected_exception&lt;/code&gt; を発生させ、 &lt;code&gt;expected_message&lt;/code&gt; が例外のメッセージにあることを表明します。その他の結果は失敗として報告されます。これは&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaisesRegex&quot;&gt; &lt;code&gt;unittest.TestCase.assertRaisesRegex()&lt;/code&gt; の&lt;/a&gt;より単純なバージョンですが、 &lt;code&gt;expected_message&lt;/code&gt; が正規表現として扱われないという違いがあります。</target>
        </trans-unit>
        <trans-unit id="d6161ea697a7c27f8a9591827bd5e9b9c1efba2e" translate="yes" xml:space="preserve">
          <source>Asserts that the &lt;code&gt;formset&lt;/code&gt; raises the provided list of errors when rendered.</source>
          <target state="translated">レンダリング時に &lt;code&gt;formset&lt;/code&gt; が提供されたエラーのリストを生成することを表明します。</target>
        </trans-unit>
        <trans-unit id="ff59a197649a85d7611947dbf66400822fd3fd57" translate="yes" xml:space="preserve">
          <source>Asserts that the HTML fragment &lt;code&gt;needle&lt;/code&gt; is contained in the &lt;code&gt;haystack&lt;/code&gt; one.</source>
          <target state="translated">HTMLフラグメント &lt;code&gt;needle&lt;/code&gt; が &lt;code&gt;haystack&lt;/code&gt; 1に含まれていることを表明します。</target>
        </trans-unit>
        <trans-unit id="72cfd60eeafd9e065c5cb6d7c2c4205bb79b91ee" translate="yes" xml:space="preserve">
          <source>Asserts that the JSON fragments &lt;code&gt;raw&lt;/code&gt; and &lt;code&gt;expected_data&lt;/code&gt; are &lt;em&gt;not&lt;/em&gt; equal. See &lt;a href=&quot;#django.test.SimpleTestCase.assertJSONEqual&quot;&gt;&lt;code&gt;assertJSONEqual()&lt;/code&gt;&lt;/a&gt; for further details.</source>
          <target state="translated">JSONフラグメント &lt;code&gt;raw&lt;/code&gt; と &lt;code&gt;expected_data&lt;/code&gt; が等しく&lt;em&gt;ない&lt;/em&gt;ことを表明します。詳細については、&lt;a href=&quot;#django.test.SimpleTestCase.assertJSONEqual&quot;&gt; &lt;code&gt;assertJSONEqual()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="85e70bc6e665bfcc530f2833752ea8a330e09608" translate="yes" xml:space="preserve">
          <source>Asserts that the JSON fragments &lt;code&gt;raw&lt;/code&gt; and &lt;code&gt;expected_data&lt;/code&gt; are equal. Usual JSON non-significant whitespace rules apply as the heavyweight is delegated to the &lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt; library.</source>
          <target state="translated">JSONフラグメント &lt;code&gt;raw&lt;/code&gt; と &lt;code&gt;expected_data&lt;/code&gt; が等しいことを表明します。ヘビー級は&lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt; &lt;code&gt;json&lt;/code&gt; &lt;/a&gt;ライブラリに委任されるため、通常のJSONの重要でない空白ルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="04e2a1c4987747529f25e1ccd3d7e5bcbf9496bb" translate="yes" xml:space="preserve">
          <source>Asserts that the response returned a &lt;code&gt;status_code&lt;/code&gt; redirect status, redirected to &lt;code&gt;expected_url&lt;/code&gt; (including any &lt;code&gt;GET&lt;/code&gt; data), and that the final page was received with &lt;code&gt;target_status_code&lt;/code&gt;.</source>
          <target state="translated">応答が &lt;code&gt;status_code&lt;/code&gt; リダイレクトステータスを返し、 &lt;code&gt;expected_url&lt;/code&gt; （ &lt;code&gt;GET&lt;/code&gt; データを含む）にリダイレクトされ、最終ページが &lt;code&gt;target_status_code&lt;/code&gt; で受信されたことをアサートします。</target>
        </trans-unit>
        <trans-unit id="10ab43696f727131a6cc76c15936e9e996766dfb" translate="yes" xml:space="preserve">
          <source>Asserts that the strings &lt;code&gt;html1&lt;/code&gt; and &lt;code&gt;html2&lt;/code&gt; are &lt;em&gt;not&lt;/em&gt; equal. The comparison is based on HTML semantics. See &lt;a href=&quot;#django.test.SimpleTestCase.assertHTMLEqual&quot;&gt;&lt;code&gt;assertHTMLEqual()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">文字列 &lt;code&gt;html1&lt;/code&gt; と &lt;code&gt;html2&lt;/code&gt; が等しく&lt;em&gt;ない&lt;/em&gt;ことを表明します。比較はHTMLセマンティクスに基づいています。詳細については、&lt;a href=&quot;#django.test.SimpleTestCase.assertHTMLEqual&quot;&gt; &lt;code&gt;assertHTMLEqual()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="62ddcb768dff0ff64abf8e34d084b990dac6d090" translate="yes" xml:space="preserve">
          <source>Asserts that the strings &lt;code&gt;html1&lt;/code&gt; and &lt;code&gt;html2&lt;/code&gt; are equal. The comparison is based on HTML semantics. The comparison takes following things into account:</source>
          <target state="translated">文字列 &lt;code&gt;html1&lt;/code&gt; と &lt;code&gt;html2&lt;/code&gt; が等しいことを表明します。比較はHTMLセマンティクスに基づいています。比較では、次のことが考慮されます。</target>
        </trans-unit>
        <trans-unit id="09bb4880b10bf0be7916cea611cb80f9ba9d0a6f" translate="yes" xml:space="preserve">
          <source>Asserts that the strings &lt;code&gt;xml1&lt;/code&gt; and &lt;code&gt;xml2&lt;/code&gt; are &lt;em&gt;not&lt;/em&gt; equal. The comparison is based on XML semantics. See &lt;a href=&quot;#django.test.SimpleTestCase.assertXMLEqual&quot;&gt;&lt;code&gt;assertXMLEqual()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">文字列 &lt;code&gt;xml1&lt;/code&gt; と &lt;code&gt;xml2&lt;/code&gt; が等しく&lt;em&gt;ない&lt;/em&gt;ことを表明します。比較はXMLセマンティクスに基づいています。詳細については、&lt;a href=&quot;#django.test.SimpleTestCase.assertXMLEqual&quot;&gt; &lt;code&gt;assertXMLEqual()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0f3ac14ce90af9e23f5ed205d1f3feb60e5cb4d4" translate="yes" xml:space="preserve">
          <source>Asserts that the strings &lt;code&gt;xml1&lt;/code&gt; and &lt;code&gt;xml2&lt;/code&gt; are equal. The comparison is based on XML semantics. Similarly to &lt;a href=&quot;#django.test.SimpleTestCase.assertHTMLEqual&quot;&gt;&lt;code&gt;assertHTMLEqual()&lt;/code&gt;&lt;/a&gt;, the comparison is made on parsed content, hence only semantic differences are considered, not syntax differences. When invalid XML is passed in any parameter, an &lt;code&gt;AssertionError&lt;/code&gt; is always raised, even if both string are identical.</source>
          <target state="translated">文字列 &lt;code&gt;xml1&lt;/code&gt; と &lt;code&gt;xml2&lt;/code&gt; が等しいことを表明します。比較はXMLセマンティクスに基づいています。&lt;a href=&quot;#django.test.SimpleTestCase.assertHTMLEqual&quot;&gt; &lt;code&gt;assertHTMLEqual()&lt;/code&gt; &lt;/a&gt;と同様に、比較は解析されたコンテンツに対して行われるため、構文の違いではなく、意味の違いのみが考慮されます。いずれかのパラメーターで無効なXMLが渡されると、両方の文字列が同一であっても、常に &lt;code&gt;AssertionError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="5856790d3201ec10ff0abec0598ba4b7d6ac3315" translate="yes" xml:space="preserve">
          <source>Asserts that the strings &lt;code&gt;xml1&lt;/code&gt; and &lt;code&gt;xml2&lt;/code&gt; are equal. The comparison is based on XML semantics. Similarly to &lt;a href=&quot;#django.test.SimpleTestCase.assertHTMLEqual&quot;&gt;&lt;code&gt;assertHTMLEqual()&lt;/code&gt;&lt;/a&gt;, the comparison is made on parsed content, hence only semantic differences are considered, not syntax differences. When invalid XML is passed in any parameter, an &lt;code&gt;AssertionError&lt;/code&gt; is always raised, even if both strings are identical.</source>
          <target state="translated">文字列 &lt;code&gt;xml1&lt;/code&gt; と &lt;code&gt;xml2&lt;/code&gt; が等しいことを表明します。比較はXMLセマンティクスに基づいています。&lt;a href=&quot;#django.test.SimpleTestCase.assertHTMLEqual&quot;&gt; &lt;code&gt;assertHTMLEqual()&lt;/code&gt; &lt;/a&gt;と同様に、解析されたコンテンツに対して比較が行われるため、構文の違いではなく、セマンティックの違いのみが考慮されます。無効なXMLがいずれかのパラメーターに渡されると、両方の文字列が同一であっても、 &lt;code&gt;AssertionError&lt;/code&gt; が常に発生します。</target>
        </trans-unit>
        <trans-unit id="2f1524535e73d36ad269e12fefb6d8f92b80612e" translate="yes" xml:space="preserve">
          <source>Asserts that the template with the given name was &lt;em&gt;not&lt;/em&gt; used in rendering the response.</source>
          <target state="translated">指定された名前のテンプレートが応答のレンダリングに使用され&lt;em&gt;なかっ&lt;/em&gt;たことを表明します。</target>
        </trans-unit>
        <trans-unit id="0bcd878feb16c89a31efac7d1f686961eb4e9018" translate="yes" xml:space="preserve">
          <source>Asserts that the template with the given name was used in rendering the response.</source>
          <target state="translated">レスポンスをレンダリングする際に、指定された名前のテンプレートが使用されたことを保証します。</target>
        </trans-unit>
        <trans-unit id="af9f8e52fffda162a5c29828d54ce8db12a7288f" translate="yes" xml:space="preserve">
          <source>Asserts that two URLs are the same, ignoring the order of query string parameters except for parameters with the same name. For example, &lt;code&gt;/path/?x=1&amp;amp;y=2&lt;/code&gt; is equal to &lt;code&gt;/path/?y=2&amp;amp;x=1&lt;/code&gt;, but &lt;code&gt;/path/?a=1&amp;amp;a=2&lt;/code&gt; isn&amp;rsquo;t equal to &lt;code&gt;/path/?a=2&amp;amp;a=1&lt;/code&gt;.</source>
          <target state="translated">2つのURLが同じであることをアサートし、同じ名前のパラメーターを除いて、クエリ文字列パラメーターの順序を無視します。たとえば、 &lt;code&gt;/path/?x=1&amp;amp;y=2&lt;/code&gt; は &lt;code&gt;/path/?y=2&amp;amp;x=1&lt;/code&gt; と同じですが、 &lt;code&gt;/path/?a=1&amp;amp;a=2&lt;/code&gt; は &lt;code&gt;/path/?a=2&amp;amp;a=1&lt;/code&gt; と等しくありません。</target>
        </trans-unit>
        <trans-unit id="236be22124ed0d7fa04be050a132e368d177a148" translate="yes" xml:space="preserve">
          <source>Asserts that when &lt;code&gt;func&lt;/code&gt; is called with &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; that &lt;code&gt;num&lt;/code&gt; database queries are executed.</source>
          <target state="translated">ときと主張 &lt;code&gt;func&lt;/code&gt; 使って呼び出される &lt;code&gt;*args&lt;/code&gt; と &lt;code&gt;**kwargs&lt;/code&gt; からという &lt;code&gt;num&lt;/code&gt; 個のデータベースクエリが実行されています。</target>
        </trans-unit>
        <trans-unit id="ba1117e518e5f60b947e1eb3cbc96a3a0de81d79" translate="yes" xml:space="preserve">
          <source>Assets and Django Admin</source>
          <target state="translated">資産と Django 管理者</target>
        </trans-unit>
        <trans-unit id="ee7a87f125429d68fd6a5d90f091a081608f015c" translate="yes" xml:space="preserve">
          <source>Assets as a static definition</source>
          <target state="translated">静的定義としての資産</target>
        </trans-unit>
        <trans-unit id="3f461fa34176c4b47a012aabf643fc1615d7d901" translate="yes" xml:space="preserve">
          <source>Associate the &lt;code&gt;Article&lt;/code&gt; with a &lt;code&gt;Publication&lt;/code&gt;:</source>
          <target state="translated">関連付け &lt;code&gt;Article&lt;/code&gt; で &lt;code&gt;Publication&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="604f2861391a4966f134874defeeccf87347ea1b" translate="yes" xml:space="preserve">
          <source>Associating content with a single site</source>
          <target state="translated">1つのサイトにコンテンツを関連付ける</target>
        </trans-unit>
        <trans-unit id="160af382fad84f01ed5831a3e803426a07248982" translate="yes" xml:space="preserve">
          <source>Associating content with multiple sites</source>
          <target state="translated">複数のサイトにコンテンツを関連付ける</target>
        </trans-unit>
        <trans-unit id="596ea1966975c3b5e427a0286ede76cada93b872" translate="yes" xml:space="preserve">
          <source>Assuming &lt;code&gt;author&lt;/code&gt; is a &lt;code&gt;ForeignKey&lt;/code&gt; to a &lt;code&gt;User&lt;/code&gt; model, this will limit the &lt;code&gt;list_filter&lt;/code&gt; choices to the users who have written a book instead of listing all users.</source>
          <target state="translated">仮定すると、 &lt;code&gt;author&lt;/code&gt; ある &lt;code&gt;ForeignKey&lt;/code&gt; に &lt;code&gt;User&lt;/code&gt; モデル、これは制限されます &lt;code&gt;list_filter&lt;/code&gt; の代わりに、すべてのユーザーをリストの本を書いたユーザーに選択肢を。</target>
        </trans-unit>
        <trans-unit id="67cb6d59d5bd23a55c32da92b2e5f481aaf089de" translate="yes" xml:space="preserve">
          <source>Assuming an existing Employee Fred Smith who has both a User and Employee model, you can access the related information using Django&amp;rsquo;s standard related model conventions:</source>
          <target state="translated">ユーザーモデルと従業員モデルの両方が存在する既存の従業員フレッドスミスを想定すると、Djangoの標準関連モデル規則を使用して関連情報にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="185a5c0fe2f8a27d76d5b4ea8cbea1d6724b2c74" translate="yes" xml:space="preserve">
          <source>Assuming both models have a &lt;code&gt;length&lt;/code&gt; field, to find posts where the post length is greater than the total length of all combined comments:</source>
          <target state="translated">両方のモデルに &lt;code&gt;length&lt;/code&gt; フィールドがあり、投稿の長さが結合されたすべてのコメントの合計長よりも長い投稿を検索するとします。</target>
        </trans-unit>
        <trans-unit id="e9fe69b31f449015f041b355315b24ddf7359871" translate="yes" xml:space="preserve">
          <source>Assuming models live in a file &lt;code&gt;mysite/blog/models.py&lt;/code&gt;, here&amp;rsquo;s an example:</source>
          <target state="translated">モデルがファイル &lt;code&gt;mysite/blog/models.py&lt;/code&gt; にあるとすると、例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a43372f88213dad295044509b366e98b21109371" translate="yes" xml:space="preserve">
          <source>Assuming rows of 10-20 columns with a mix of textual and numeric data, 2000 is going to fetch less than 100KB of data, which seems a good compromise between the number of rows transferred and the data discarded if the loop is exited early.</source>
          <target state="translated">テキストデータと数値データが混在した10~20列の行を想定すると、2000は100KB以下のデータを取得することになりますが、これは転送される行数とループが早期に終了した場合に破棄されるデータとの間の良い妥協点のように思えます。</target>
        </trans-unit>
        <trans-unit id="6365343a740bba2824b80576a3bf0941694912be" translate="yes" xml:space="preserve">
          <source>Assuming that &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt; and &lt;a href=&quot;../settings#std:setting-LANGUAGE_CODE&quot;&gt;&lt;code&gt;LANGUAGE_CODE&lt;/code&gt;&lt;/a&gt; is, for example, &lt;code&gt;&quot;de&quot;&lt;/code&gt;, then for:</source>
          <target state="translated">仮定すると&lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; が&lt;/a&gt;ある &lt;code&gt;True&lt;/code&gt; と&lt;a href=&quot;../settings#std:setting-LANGUAGE_CODE&quot;&gt; &lt;code&gt;LANGUAGE_CODE&lt;/code&gt; が&lt;/a&gt;あり、例えば、 &lt;code&gt;&quot;de&quot;&lt;/code&gt; 、その後のために：</target>
        </trans-unit>
        <trans-unit id="7a9b104a6162d8533d6966d8db536a2936bbdb5f" translate="yes" xml:space="preserve">
          <source>Assuming that &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt; and &lt;a href=&quot;../settings#std:setting-LANGUAGE_CODE&quot;&gt;&lt;code&gt;LANGUAGE_CODE&lt;/code&gt;&lt;/a&gt; is, for example, &lt;code&gt;&quot;es&quot;&lt;/code&gt;, then for:</source>
          <target state="translated">仮定すると&lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; が&lt;/a&gt;ある &lt;code&gt;True&lt;/code&gt; と&lt;a href=&quot;../settings#std:setting-LANGUAGE_CODE&quot;&gt; &lt;code&gt;LANGUAGE_CODE&lt;/code&gt; は、&lt;/a&gt;例えば、ある &lt;code&gt;&quot;es&quot;&lt;/code&gt; 、その後のために：</target>
        </trans-unit>
        <trans-unit id="e859c14e91e44380de99cb3733de849b3d0bf3ca" translate="yes" xml:space="preserve">
          <source>Assuming the settings above were in a &lt;code&gt;postgis.py&lt;/code&gt; file in the same directory as &lt;code&gt;runtests.py&lt;/code&gt;, then all Django and GeoDjango tests would be performed when executing the command:</source>
          <target state="translated">上記の設定と仮定するとしていた &lt;code&gt;postgis.py&lt;/code&gt; と同じディレクトリ内のファイル &lt;code&gt;runtests.py&lt;/code&gt; コマンドを実行するときに、すべてのジャンゴとGeoDjangoテストが実行されるであろう：</target>
        </trans-unit>
        <trans-unit id="15d9d44a1a13ae4c3c09865d41e5911a0d169d65" translate="yes" xml:space="preserve">
          <source>Assuming you have an application with an &lt;a href=&quot;../../ref/models/options#django.db.models.Options.app_label&quot;&gt;&lt;code&gt;app_label&lt;/code&gt;&lt;/a&gt;&lt;code&gt;foo&lt;/code&gt; and a model named &lt;code&gt;Bar&lt;/code&gt;, to test for basic permissions you should use:</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/options#django.db.models.Options.app_label&quot;&gt; &lt;code&gt;app_label&lt;/code&gt; &lt;/a&gt; &lt;code&gt;foo&lt;/code&gt; を備えたアプリケーションと &lt;code&gt;Bar&lt;/code&gt; という名前のモデルがあると仮定して、基本的な権限をテストするには、以下を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="24ffd2b9ba150c77f60a52bfae4dd953b7b74828" translate="yes" xml:space="preserve">
          <source>Astute readers will ask: But if &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; was empty by default, how was Django finding the default admin templates? The answer is that, since &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt;&lt;code&gt;APP_DIRS&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, Django automatically looks for a &lt;code&gt;templates/&lt;/code&gt; subdirectory within each application package, for use as a fallback (don&amp;rsquo;t forget that &lt;code&gt;django.contrib.admin&lt;/code&gt; is an application).</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt;読者は尋ねます：しかし、デフォルトでDIRSが空の場合、Djangoはどのようにしてデフォルトの管理テンプレートを見つけましたか？答えは以来、つまり&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt; &lt;code&gt;APP_DIRS&lt;/code&gt; が&lt;/a&gt;に設定されている &lt;code&gt;True&lt;/code&gt; 、Djangoは自動的に探し &lt;code&gt;templates/&lt;/code&gt; フォールバックとして使用するために、各アプリケーションパッケージ内のサブディレクトリ、（それを忘れないでください &lt;code&gt;django.contrib.admin&lt;/code&gt; がアプリケーションです）。</target>
        </trans-unit>
        <trans-unit id="d51be43ea19d89d11eab90783eb916d16ff1ec98" translate="yes" xml:space="preserve">
          <source>Async adapter functions</source>
          <target state="translated">非同期アダプタ機能</target>
        </trans-unit>
        <trans-unit id="081067c393edf8e5b59a8477f8ccf9941c80fd91" translate="yes" xml:space="preserve">
          <source>Async safety</source>
          <target state="translated">非同期の安全性</target>
        </trans-unit>
        <trans-unit id="247f00368a6e34b379015dfe32b1cba6c325ba87" translate="yes" xml:space="preserve">
          <source>Async views</source>
          <target state="translated">非同期ビュー</target>
        </trans-unit>
        <trans-unit id="ce6652834c4009b903e89f99e020f920dd5b16ab" translate="yes" xml:space="preserve">
          <source>Async-safety</source>
          <target state="translated">Async-safety</target>
        </trans-unit>
        <trans-unit id="c05a9d33e7b51e553fd3606ad1076a07a3f0e7b8" translate="yes" xml:space="preserve">
          <source>AsyncRequestFactory</source>
          <target state="translated">AsyncRequestFactory</target>
        </trans-unit>
        <trans-unit id="a3e3a088b1b429408c27d37377c0f5fbb7e78544" translate="yes" xml:space="preserve">
          <source>Asynchronous support</source>
          <target state="translated">非同期サポート</target>
        </trans-unit>
        <trans-unit id="becc4b8b4fde1f67917d72e71ac9f0397a752159" translate="yes" xml:space="preserve">
          <source>At a certain point you are bound to look at your tests and wonder whether your code is suffering from test bloat, which brings us to:</source>
          <target state="translated">ある時点でテストを見て、自分のコードがテストの肥大化に悩まされているのではないかと疑うことになるでしょう。</target>
        </trans-unit>
        <trans-unit id="b07648c0929cd0231e4f9c7354122d36df0feb38" translate="yes" xml:space="preserve">
          <source>At any point, your &lt;code&gt;urlpatterns&lt;/code&gt; can &amp;ldquo;include&amp;rdquo; other URLconf modules. This essentially &amp;ldquo;roots&amp;rdquo; a set of URLs below other ones.</source>
          <target state="translated">いつでも、 &lt;code&gt;urlpatterns&lt;/code&gt; は他のURLconfモジュールを「含める」ことができます。これは基本的に、一連のURLを他のURLの下に「ルート化」します。</target>
        </trans-unit>
        <trans-unit id="4fb6bc9538b157b5311479759837c5d348f05677" translate="yes" xml:space="preserve">
          <source>At first, this seems like a harmless way to display a user&amp;rsquo;s name, but consider what would happen if the user entered their name as this:</source>
          <target state="translated">最初は、これはユーザーの名前を表示する無害な方法のように見えますが、ユーザーが次のように名前を入力した場合はどうなるかを考えてください。</target>
        </trans-unit>
        <trans-unit id="5c7e592441c168f09fb7eebbe767a10d6bcec63c" translate="yes" xml:space="preserve">
          <source>At its core, a class-based view allows you to respond to different HTTP request methods with different class instance methods, instead of with conditionally branching code inside a single view function.</source>
          <target state="translated">クラスベースのビューでは、単一のビュー関数内で条件付きで分岐するコードを使用するのではなく、異なるクラスのインスタンスメソッドを使用して異なる HTTP リクエストメソッドに応答することができます。</target>
        </trans-unit>
        <trans-unit id="9c3be719804e367e8aea431959dce605a3f6cb0b" translate="yes" xml:space="preserve">
          <source>At present, the only hint that will be provided is &lt;code&gt;instance&lt;/code&gt;, an object instance that is related to the read or write operation that is underway. This might be the instance that is being saved, or it might be an instance that is being added in a many-to-many relation. In some cases, no instance hint will be provided at all. The router checks for the existence of an instance hint, and determine if that hint should be used to alter routing behavior.</source>
          <target state="translated">現時点では、提供される唯一のヒントは &lt;code&gt;instance&lt;/code&gt; 、進行中であり、読み取りまたは書き込み動作に関連するオブジェクトインスタンス。これは、保存されているインスタンスの場合もあれば、多対多の関係で追加されているインスタンスの場合もあります。場合によっては、インスタンスのヒントはまったく提供されません。ルーターはインスタンスヒントの存在を確認し、そのヒントを使用してルーティング動作を変更する必要があるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="829ecd1b52e49d4303ad554db77d3eafc6207a1a" translate="yes" xml:space="preserve">
          <source>At runtime, Django builds an in-memory unified catalog of literals-translations. To achieve this it looks for translations by following this algorithm regarding the order in which it examines the different file paths to load the compiled &lt;a href=&quot;index#term-message-file&quot;&gt;message files&lt;/a&gt; (&lt;code&gt;.mo&lt;/code&gt;) and the precedence of multiple translations for the same literal:</source>
          <target state="translated">実行時に、Djangoはリテラル翻訳のメモリ内統合カタログを構築します。これを達成するために、コンパイルされた&lt;a href=&quot;index#term-message-file&quot;&gt;メッセージファイル&lt;/a&gt;（ &lt;code&gt;.mo&lt;/code&gt; ）をロードするためにさまざまなファイルパスを調べる順序と、同じリテラルに対する複数の翻訳の優先順位に関して、このアルゴリズムに従って翻訳を探します。</target>
        </trans-unit>
        <trans-unit id="8a89ebae1007e121e4006edfa5c170f6cee641b3" translate="yes" xml:space="preserve">
          <source>At that point, the template engine will notice the three &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/a&gt; tags in &lt;code&gt;base.html&lt;/code&gt; and replace those blocks with the contents of the child template. Depending on the value of &lt;code&gt;blog_entries&lt;/code&gt;, the output might look like:</source>
          <target state="translated">その時点で、テンプレートエンジンは &lt;code&gt;base.html&lt;/code&gt; の 3つの&lt;a href=&quot;builtins#std:templatetag-block&quot;&gt; &lt;code&gt;block&lt;/code&gt; &lt;/a&gt;タグに気づき、それらのブロックを子テンプレートのコンテンツに置き換えます。 &lt;code&gt;blog_entries&lt;/code&gt; の値に応じて、出力は次のようになります。</target>
        </trans-unit>
        <trans-unit id="77cfb22bf021959ce50588c2fc80c01976cdb6a4" translate="yes" xml:space="preserve">
          <source>At the beginning of each request, Django closes the connection if it has reached its maximum age. If your database terminates idle connections after some time, you should set &lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt;&lt;code&gt;CONN_MAX_AGE&lt;/code&gt;&lt;/a&gt; to a lower value, so that Django doesn&amp;rsquo;t attempt to use a connection that has been terminated by the database server. (This problem may only affect very low traffic sites.)</source>
          <target state="translated">各リクエストの最初に、Djangoは、最大エージングに達した場合に接続を閉じます。データベースがしばらくしてアイドル接続を終了する場合は、&lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt; &lt;code&gt;CONN_MAX_AGE&lt;/code&gt; &lt;/a&gt;を低い値に設定して、Djangoがデータベースサーバーによって終了された接続を使用しないようにする必要があります。（この問題は、非常にトラフィックの少ないサイトにのみ影響する可能性があります。）</target>
        </trans-unit>
        <trans-unit id="7585cf05112053b01eb73497ef6e6dfe3dfa8b5a" translate="yes" xml:space="preserve">
          <source>At the end of each request, Django closes the connection if it has reached its maximum age or if it is in an unrecoverable error state. If any database errors have occurred while processing the requests, Django checks whether the connection still works, and closes it if it doesn&amp;rsquo;t. Thus, database errors affect at most one request; if the connection becomes unusable, the next request gets a fresh connection.</source>
          <target state="translated">各リクエストの最後に、Djangoは、最大エージングに達した場合、または回復不可能なエラー状態にある場合、接続を閉じます。リクエストの処理中にデータベースエラーが発生した場合、Djangoは接続がまだ機能しているかどうかを確認し、機能していない場合は接続を閉じます。したがって、データベースエラーは最大で1つのリクエストに影響します。接続が使用できなくなった場合、次の要求は新しい接続を取得します。</target>
        </trans-unit>
        <trans-unit id="5d1991088e173e325b34bee658329e011aaa91e8" translate="yes" xml:space="preserve">
          <source>At the end of the three current slots you will find an &amp;ldquo;Add another Choice&amp;rdquo; link. If you click on it, a new slot will be added. If you want to remove the added slot, you can click on the X to the top right of the added slot. Note that you can&amp;rsquo;t remove the original three slots. This image shows an added slot:</source>
          <target state="translated">現在の3つのスロットの最後に、「別の選択肢を追加」リンクがあります。それをクリックすると、新しいスロットが追加されます。追加したスロットを削除する場合は、追加したスロットの右上にあるXをクリックします。元の3つのスロットは削除できないことに注意してください。この画像は、追加されたスロットを示しています。</target>
        </trans-unit>
        <trans-unit id="189124accca7c04c0f44767f105be012dfc11d09" translate="yes" xml:space="preserve">
          <source>At the heart of the contenttypes application is the &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; model, which lives at &lt;code&gt;django.contrib.contenttypes.models.ContentType&lt;/code&gt;. Instances of &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; represent and store information about the models installed in your project, and new instances of &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; are automatically created whenever new models are installed.</source>
          <target state="translated">contenttypesのアプリケーションの心臓部である&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt;に住んでモデル、 &lt;code&gt;django.contrib.contenttypes.models.ContentType&lt;/code&gt; 。&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; の&lt;/a&gt;インスタンスは、プロジェクトにインストールされているモデルに関する情報を表し、格納します。新しいモデルがインストールされると、&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; の&lt;/a&gt;新しいインスタンスが自動的に作成されます。</target>
        </trans-unit>
        <trans-unit id="eb21848242712cb52d07267f0c869a17ef5ee284" translate="yes" xml:space="preserve">
          <source>At the heart of this system of components is Django&amp;rsquo;s &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; class. In much the same way that a Django model describes the logical structure of an object, its behavior, and the way its parts are represented to us, a &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; class describes a form and determines how it works and appears.</source>
          <target state="translated">このコンポーネントシステムの中心は、Djangoの&lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;クラスです。Djangoモデルがオブジェクトの論理構造、その動作、およびそのパーツの表現方法を説明するのとほぼ同じように、&lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;クラスはフォームを説明し、その動作と外観を決定します。</target>
        </trans-unit>
        <trans-unit id="c74271cae7a8a63a2cd5fb403d3d02546e9dd5b6" translate="yes" xml:space="preserve">
          <source>At the highest level, you can serialize data like this:</source>
          <target state="translated">最高レベルでは、このようにデータをシリアライズすることができます。</target>
        </trans-unit>
        <trans-unit id="1644e5cc2b98ba7a4722587d8f99ea04893a79ef" translate="yes" xml:space="preserve">
          <source>At the most basic level, use &lt;a href=&quot;../../ref/models/querysets#queryset-api&quot;&gt;filter and exclude&lt;/a&gt; to do filtering in the database.</source>
          <target state="translated">最も基本的なレベルでは、&lt;a href=&quot;../../ref/models/querysets#queryset-api&quot;&gt;filterとexclude&lt;/a&gt;を使用して、データベースでフィルタリングを行います。</target>
        </trans-unit>
        <trans-unit id="d1ca0bd847e379e96f7fd3a9732e92c9726b4d7c" translate="yes" xml:space="preserve">
          <source>At the start of each test, before &lt;code&gt;setUp()&lt;/code&gt; is run, Django will flush the database, returning the database to the state it was in directly after &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; was called.</source>
          <target state="translated">各テストの開始時に、 &lt;code&gt;setUp()&lt;/code&gt; が実行される前に、Djangoはデータベースをフラッシュし、データベースが&lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;が呼び出された直後の状態に戻します。</target>
        </trans-unit>
        <trans-unit id="d5ea45b8b50778db88aebff1341f87e398f338dd" translate="yes" xml:space="preserve">
          <source>At this point it&amp;rsquo;s much easier to get Django to do most of this work for us.</source>
          <target state="translated">この時点で、Djangoにこの作業のほとんどを実行させるほうがはるかに簡単です。</target>
        </trans-unit>
        <trans-unit id="1d3d271c0b51bfb091b47dcdc7750c2825e9b7ea" translate="yes" xml:space="preserve">
          <source>At this point it&amp;rsquo;s natural to reach for a &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; to encapsulate the information sent from the user&amp;rsquo;s browser to Django. Say also that we&amp;rsquo;re heavily invested in &lt;a href=&quot;https://en.wikipedia.org/wiki/Representational_state_transfer&quot;&gt;REST&lt;/a&gt;, so we want to use the same URL for displaying the author as for capturing the message from the user. Let&amp;rsquo;s rewrite our &lt;code&gt;AuthorDetailView&lt;/code&gt; to do that.</source>
          <target state="translated">この時点で、ユーザーのブラウザからDjangoに送信された情報をカプセル化する&lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;に到達するのは自然なことです。また、&lt;a href=&quot;https://en.wikipedia.org/wiki/Representational_state_transfer&quot;&gt;REST&lt;/a&gt;に多額の投資を行っているため、作成者の表示とユーザーからのメッセージの取得に同じURLを使用したいとします。 &lt;code&gt;AuthorDetailView&lt;/code&gt; を行うためにAuthorDetailViewを書き換えましょう。</target>
        </trans-unit>
        <trans-unit id="90c41d5fe4f42710c126fb73e78fd7dfc79715aa" translate="yes" xml:space="preserve">
          <source>At this time 3D support is limited to the PostGIS and SpatiaLite backends.</source>
          <target state="translated">現時点では、3D のサポートは PostGIS と SpatiaLite バックエンドに限定されています。</target>
        </trans-unit>
        <trans-unit id="ba6166c252b5f3de38513da17ca78e12d2d37fbe" translate="yes" xml:space="preserve">
          <source>At worst, as you continue developing, you might find that you have some tests that are now redundant. Even that&amp;rsquo;s not a problem; in testing redundancy is a &lt;em&gt;good&lt;/em&gt; thing.</source>
          <target state="translated">最悪の場合、開発を続けると、いくつかのテストが冗長になっていることがあります。それでも問題ありません。冗長性をテストすることは&lt;em&gt;良い&lt;/em&gt;ことです。</target>
        </trans-unit>
        <trans-unit id="9be5bc386eecce030df49a1fa6668e0b4cbebbaf" translate="yes" xml:space="preserve">
          <source>Atom feeds require a &lt;code&gt;&amp;lt;link rel=&quot;self&quot;&amp;gt;&lt;/code&gt; that defines the feed&amp;rsquo;s current location. The syndication framework populates this automatically, using the domain of the current site according to the &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">Atomフィードには、フィードの現在の場所を定義する &lt;code&gt;&amp;lt;link rel=&quot;self&quot;&amp;gt;&lt;/code&gt; が必要です。シンジケーションフレームワークは、&lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt; &lt;code&gt;SITE_ID&lt;/code&gt; &lt;/a&gt;設定に従って現在のサイトのドメインを使用して、これを自動的に入力します。</target>
        </trans-unit>
        <trans-unit id="b90ff34b6a9489024350085d4eb6b735977a0a57" translate="yes" xml:space="preserve">
          <source>Atomicity is the defining property of database transactions. &lt;code&gt;atomic&lt;/code&gt; allows us to create a block of code within which the atomicity on the database is guaranteed. If the block of code is successfully completed, the changes are committed to the database. If there is an exception, the changes are rolled back.</source>
          <target state="translated">原子性は、データベーストランザクションの定義プロパティです。 &lt;code&gt;atomic&lt;/code&gt; を使用すると、データベースの原子性が保証されているコードのブロックを作成できます。コードのブロックが正常に完了すると、変更がデータベースにコミットされます。例外がある場合、変更はロールバックされます。</target>
        </trans-unit>
        <trans-unit id="6dcbf3ddd9b69ace301044258cc096b7ab7406f4" translate="yes" xml:space="preserve">
          <source>Attribute lookup. Example: &lt;code&gt;foo.bar&lt;/code&gt;</source>
          <target state="translated">属性ルックアップ。例： &lt;code&gt;foo.bar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c55f8f4ff4b77e0b477555d903221859914f758b" translate="yes" xml:space="preserve">
          <source>Attribute or method lookup</source>
          <target state="translated">属性またはメソッドのルックアップ</target>
        </trans-unit>
        <trans-unit id="a6652617f2c799eb11ee727b16c5646c48af6905" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Attributes</target>
        </trans-unit>
        <trans-unit id="edc8a446f5933031f7f093676869a8b07a4eb854" translate="yes" xml:space="preserve">
          <source>Attributes for fields</source>
          <target state="translated">フィールドの属性</target>
        </trans-unit>
        <trans-unit id="3c0023632c2c11e1b27921f86d99a10bac174095" translate="yes" xml:space="preserve">
          <source>Attributes for fields with relations</source>
          <target state="translated">関係を持つフィールドの属性</target>
        </trans-unit>
        <trans-unit id="dd6d67bb1ba246f3e978a406d1c86519dde7af4e" translate="yes" xml:space="preserve">
          <source>Attributes of &lt;code&gt;BoundField&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;BoundField&lt;/code&gt; の属性</target>
        </trans-unit>
        <trans-unit id="993fe975317384740fde5b696d0e0475c75b8515" translate="yes" xml:space="preserve">
          <source>Attributes set by application code</source>
          <target state="translated">アプリケーションコードで設定された属性</target>
        </trans-unit>
        <trans-unit id="d0a488eccef6df802ff85932b4c6929619c28d72" translate="yes" xml:space="preserve">
          <source>Attributes set by middleware</source>
          <target state="translated">ミドルウェアが設定した属性</target>
        </trans-unit>
        <trans-unit id="6f04a43b920a1e48fb45a6c179cdc2084ecebf1a" translate="yes" xml:space="preserve">
          <source>Attributes without an argument are equal to attributes that equal in name and value (see the examples).</source>
          <target state="translated">引数を持たない属性は、名前と値が等しい属性と等しくなります(例を参照)。</target>
        </trans-unit>
        <trans-unit id="35d0f5fbca4b84a0ac3992970ff0119954a9281f" translate="yes" xml:space="preserve">
          <source>Auth</source>
          <target state="translated">Auth</target>
        </trans-unit>
        <trans-unit id="fd9c4ff0e3b6b88e4e4dc570b6c34789d2a1e482" translate="yes" xml:space="preserve">
          <source>Authenticate access to a &lt;a href=&quot;https://subversion.apache.org/&quot;&gt;Subversion&lt;/a&gt; repository against Django users with a certain permission.</source>
          <target state="translated">特定の権限を持つDjangoユーザーに対して&lt;a href=&quot;https://subversion.apache.org/&quot;&gt;Subversion&lt;/a&gt;リポジトリへのアクセスを認証します。</target>
        </trans-unit>
        <trans-unit id="6337477691f18524a224e218ab6eaa20e4031637" translate="yes" xml:space="preserve">
          <source>Authenticating against Django&amp;rsquo;s user database from Apache</source>
          <target state="translated">ApacheからのDjangoのユーザーデータベースに対する認証</target>
        </trans-unit>
        <trans-unit id="0ac3a9f2d16fbe183a3d2e9a6f8ff0841176ff51" translate="yes" xml:space="preserve">
          <source>Authenticating against Django’s user database from Apache</source>
          <target state="translated">Apache から Django のユーザーデータベースに対して認証を行う</target>
        </trans-unit>
        <trans-unit id="e97f1991db31b26ac8a9363240aa4d3ec0615f5c" translate="yes" xml:space="preserve">
          <source>Authenticating users</source>
          <target state="translated">ユーザーの認証</target>
        </trans-unit>
        <trans-unit id="ed14dcd0fbc726381cb35622dd153753cdb041ca" translate="yes" xml:space="preserve">
          <source>Authentication Views</source>
          <target state="translated">認証ビュー</target>
        </trans-unit>
        <trans-unit id="c4983997c1873796ebbede4e16561236e028f0a9" translate="yes" xml:space="preserve">
          <source>Authentication against third-parties (OAuth, for example)</source>
          <target state="translated">サードパーティ(OAuth など)に対する認証</target>
        </trans-unit>
        <trans-unit id="c38992e4692a0d7975f058861174b5e44159613e" translate="yes" xml:space="preserve">
          <source>Authentication backends</source>
          <target state="translated">認証バックエンド</target>
        </trans-unit>
        <trans-unit id="f0da0e5cb0ab6921e6b41fbc41b1d18be2795467" translate="yes" xml:space="preserve">
          <source>Authentication data in templates</source>
          <target state="translated">テンプレート内の認証データ</target>
        </trans-unit>
        <trans-unit id="f9e0ae3d7a1f59d5610b13b4e0795fe4f6eeae90" translate="yes" xml:space="preserve">
          <source>Authentication in Web requests</source>
          <target state="translated">ウェブリクエストでの認証</target>
        </trans-unit>
        <trans-unit id="dbf83e500df5ca166953c47d5fd41f5df535f927" translate="yes" xml:space="preserve">
          <source>Authentication in web requests</source>
          <target state="translated">ウェブリクエストでの認証</target>
        </trans-unit>
        <trans-unit id="8fd5affdb2596beda05dcf367629948f7af5fdac" translate="yes" xml:space="preserve">
          <source>Authentication middleware</source>
          <target state="translated">認証ミドルウェア</target>
        </trans-unit>
        <trans-unit id="4dfefff9469de419af848d00af520745ea8a4c6b" translate="yes" xml:space="preserve">
          <source>Authentication support is bundled as a Django contrib module in &lt;code&gt;django.contrib.auth&lt;/code&gt;. By default, the required configuration is already included in the &lt;code&gt;settings.py&lt;/code&gt; generated by &lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt;, these consist of two items listed in your &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">認証のサポートはDjangoの中のcontribモジュールとしてバンドルされて &lt;code&gt;django.contrib.auth&lt;/code&gt; 。デフォルトでは、必要な構成は&lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;によって生成された &lt;code&gt;settings.py&lt;/code&gt; にすでに含まれており、これらは&lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;設定にリストされている2つの項目で構成されています。</target>
        </trans-unit>
        <trans-unit id="28abf6b352445a849a8ed1ac4abaedc6f68a13c8" translate="yes" xml:space="preserve">
          <source>Authentication using &lt;code&gt;REMOTE_USER&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;REMOTE_USER&lt;/code&gt; を使用した認証</target>
        </trans-unit>
        <trans-unit id="da5b697f1b93b20c027315397a08a6d47e1b7a2a" translate="yes" xml:space="preserve">
          <source>Authentication using REMOTE_USER</source>
          <target state="translated">REMOTE_USERによる認証</target>
        </trans-unit>
        <trans-unit id="9cb23f99177d8d154483c5dea174d94d6eb5ca7b" translate="yes" xml:space="preserve">
          <source>Authentication with &lt;code&gt;mod_wsgi&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mod_wsgi&lt;/code&gt; による認証</target>
        </trans-unit>
        <trans-unit id="212ec648f9cab319ad23c113e8368944db9a13b4" translate="yes" xml:space="preserve">
          <source>Authorization for anonymous users</source>
          <target state="translated">匿名ユーザーへの権限付与</target>
        </trans-unit>
        <trans-unit id="deebdf5e7d673f1085d509c1b58594d399c3632d" translate="yes" xml:space="preserve">
          <source>Authorization for inactive users</source>
          <target state="translated">非アクティブなユーザーへの権限付与</target>
        </trans-unit>
        <trans-unit id="c3c77cf7e085536fe4f642640a0a0f676bb2d395" translate="yes" xml:space="preserve">
          <source>Authorization with &lt;code&gt;mod_wsgi&lt;/code&gt; and Django groups</source>
          <target state="translated">&lt;code&gt;mod_wsgi&lt;/code&gt; およびDjangoグループによる承認</target>
        </trans-unit>
        <trans-unit id="a5d0ea80bfa024e6d10cf0c5e2149c9e5030bdd7" translate="yes" xml:space="preserve">
          <source>Authors with multiple entries appear multiple times and authors without any entries have &lt;code&gt;None&lt;/code&gt; for the entry headline.</source>
          <target state="translated">複数のエントリを持つ著者は複数回表示され、エントリのない著者はエントリの見出しに[ &lt;code&gt;None&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="55f9e784343673164bbb195a41119d309f4c90e6" translate="yes" xml:space="preserve">
          <source>Auto-escaping considerations</source>
          <target state="translated">オートエスケープの考慮事項</target>
        </trans-unit>
        <trans-unit id="ade49e65aa2d499a314989d73b7a5087ffe5df44" translate="yes" xml:space="preserve">
          <source>Auto-generate the models</source>
          <target state="translated">モデルの自動生成</target>
        </trans-unit>
        <trans-unit id="960a275624ec1eca722f7e66870b2a9f99cfac4d" translate="yes" xml:space="preserve">
          <source>Auto-incrementing primary keys</source>
          <target state="translated">主キーの自動インクリメント</target>
        </trans-unit>
        <trans-unit id="8453dfc709bd717007fa35256ab12791696925f8" translate="yes" xml:space="preserve">
          <source>Autocommit</source>
          <target state="translated">Autocommit</target>
        </trans-unit>
        <trans-unit id="84cf5f8413204d40a8f95216ba5d5526d11ffeaf" translate="yes" xml:space="preserve">
          <source>Autocommit is initially turned on. If you turn it off, it&amp;rsquo;s your responsibility to restore it.</source>
          <target state="translated">自動コミットは最初はオンになっています。オフにした場合、復元するのはあなたの責任です。</target>
        </trans-unit>
        <trans-unit id="a943f8638c8dcc1ad157c95e08768cc1250e25d7" translate="yes" xml:space="preserve">
          <source>Automated testing is an extremely useful bug-killing tool for the modern Web developer. You can use a collection of tests &amp;ndash; a &lt;strong&gt;test suite&lt;/strong&gt; &amp;ndash; to solve, or avoid, a number of problems:</source>
          <target state="translated">自動テストは、現代のWeb開発者にとって非常に便利なバグキリングツールです。テストのコレクション（&lt;strong&gt;テストスイート）&lt;/strong&gt;を使用して、いくつかの問題を解決または回避できます。</target>
        </trans-unit>
        <trans-unit id="27e49177e9807d73541f916f6c05979f97b85ba4" translate="yes" xml:space="preserve">
          <source>Automatic HTML escaping</source>
          <target state="translated">自動HTMLエスケープ</target>
        </trans-unit>
        <trans-unit id="61fa92d56d11b7919bb8da95ce33a7ad7110c3eb" translate="yes" xml:space="preserve">
          <source>Automatic Spatial Transformations</source>
          <target state="translated">自動空間変換</target>
        </trans-unit>
        <trans-unit id="c0ca671cba6e070d7b0566fe1ba785b6645d5a0c" translate="yes" xml:space="preserve">
          <source>Automatic database routing</source>
          <target state="translated">データベースの自動ルーティング</target>
        </trans-unit>
        <trans-unit id="2daa6540a46502f028c3d359454675fd27347edd" translate="yes" xml:space="preserve">
          <source>Automatic primary key fields</source>
          <target state="translated">自動主キーフィールド</target>
        </trans-unit>
        <trans-unit id="7d8ad18befa397a93cf4e3a8b465b236689355f7" translate="yes" xml:space="preserve">
          <source>Automatic reloading of &lt;a href=&quot;../ref/django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../ref/django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; の&lt;/a&gt;自動リロード</target>
        </trans-unit>
        <trans-unit id="1394ea568cf8a61e49123ff400b9295452be4554" translate="yes" xml:space="preserve">
          <source>Automatic typecasting can cause unexpected results</source>
          <target state="translated">自動タイプキャスティングは予期せぬ結果を引き起こす可能性があります</target>
        </trans-unit>
        <trans-unit id="8a5b7c843454a5b2b1e845bfbf336ce8a6a2428f" translate="yes" xml:space="preserve">
          <source>Automatically generate a mapping dictionary for use with &lt;a href=&quot;layermapping#django.contrib.gis.utils.LayerMapping&quot;&gt;&lt;code&gt;LayerMapping&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;layermapping#django.contrib.gis.utils.LayerMapping&quot;&gt; &lt;code&gt;LayerMapping&lt;/code&gt; &lt;/a&gt;で使用するマッピングディクショナリを自動的に生成します。</target>
        </trans-unit>
        <trans-unit id="348a1bbe32f1a6d151804e3d0e2a998d171cfd50" translate="yes" xml:space="preserve">
          <source>Automatically set the field to now every time the object is saved. Useful for &amp;ldquo;last-modified&amp;rdquo; timestamps. Note that the current date is &lt;em&gt;always&lt;/em&gt; used; it&amp;rsquo;s not just a default value that you can override.</source>
          <target state="translated">オブジェクトが保存されるたびに、フィールドを自動的に今に設定します。「最後に変更された」タイムスタンプに役立ちます。現在の日付が&lt;em&gt;常に&lt;/em&gt;使用されることに注意してください。オーバーライドできるのは単なるデフォルト値ではありません。</target>
        </trans-unit>
        <trans-unit id="e1eb3738429a66a56ba42aade58f3873fec71c49" translate="yes" xml:space="preserve">
          <source>Automatically set the field to now when the object is first created. Useful for creation of timestamps. Note that the current date is &lt;em&gt;always&lt;/em&gt; used; it&amp;rsquo;s not just a default value that you can override. So even if you set a value for this field when creating the object, it will be ignored. If you want to be able to modify this field, set the following instead of &lt;code&gt;auto_now_add=True&lt;/code&gt;:</source>
          <target state="translated">オブジェクトが最初に作成されたときに、フィールドを自動的に今に設定します。タイムスタンプの作成に役立ちます。現在の日付が&lt;em&gt;常に&lt;/em&gt;使用されることに注意してください。オーバーライドできるのは単なるデフォルト値ではありません。そのため、オブジェクトの作成時にこのフィールドに値を設定しても、無視されます。このフィールドを変更できるようにするには、 &lt;code&gt;auto_now_add=True&lt;/code&gt; の代わりに次のように設定します。</target>
        </trans-unit>
        <trans-unit id="0c56f5d1cbaa3e3798d943d9e0c7e14536b2ace4" translate="yes" xml:space="preserve">
          <source>Available &lt;code&gt;Meta&lt;/code&gt; options</source>
          <target state="translated">利用可能な &lt;code&gt;Meta&lt;/code&gt; オプション</target>
        </trans-unit>
        <trans-unit id="749dcc6931e997fce0e6000d53dab329edee9e45" translate="yes" xml:space="preserve">
          <source>Available authentication backends</source>
          <target state="translated">利用可能な認証バックエンド</target>
        </trans-unit>
        <trans-unit id="8022dbeab0ead822466c6e95e26e7dc7892483ad" translate="yes" xml:space="preserve">
          <source>Available commands</source>
          <target state="translated">利用可能なコマンド</target>
        </trans-unit>
        <trans-unit id="005b1caaecf7a5e7e239831f844db54f7fb44385" translate="yes" xml:space="preserve">
          <source>Available format strings:</source>
          <target state="translated">利用可能なフォーマット文字列。</target>
        </trans-unit>
        <trans-unit id="66149627d8cbb08e48e77e67a8c900cf6f8e757f" translate="yes" xml:space="preserve">
          <source>Available formats are:</source>
          <target state="translated">利用可能なフォーマットは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="9329e10e25582241a54c6a10908254870af37224" translate="yes" xml:space="preserve">
          <source>Available middleware</source>
          <target state="translated">利用可能なミドルウェア</target>
        </trans-unit>
        <trans-unit id="277a0831ffa6dd7df99804a3bbb855b456ec1f81" translate="yes" xml:space="preserve">
          <source>Available settings</source>
          <target state="translated">利用可能な設定</target>
        </trans-unit>
        <trans-unit id="feb8fbc77cb1d6f4edc7d323a43667ba938321aa" translate="yes" xml:space="preserve">
          <source>Available values for &lt;code&gt;allowed_permissions&lt;/code&gt; and the corresponding method checks are:</source>
          <target state="translated">&lt;code&gt;allowed_permissions&lt;/code&gt; および対応するメソッドチェックに使用できる値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1e196c09ba87bfb3b1ca68e7701b13e4fdceeae7" translate="yes" xml:space="preserve">
          <source>Avoid anything more complex</source>
          <target state="translated">複雑なものは避ける</target>
        </trans-unit>
        <trans-unit id="f080a09173571088fa9d223a4573d550fffb2f30" translate="yes" xml:space="preserve">
          <source>Avoid catching exceptions inside &lt;code&gt;atomic&lt;/code&gt;!</source>
          <target state="translated">&lt;code&gt;atomic&lt;/code&gt; 内で例外をキャッチしないでください！</target>
        </trans-unit>
        <trans-unit id="6e0e214b2855516f39cd3567c046d6d06b5c7dad" translate="yes" xml:space="preserve">
          <source>Avoid using &lt;a href=&quot;#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; on string-based fields such as &lt;a href=&quot;#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.TextField&quot;&gt;&lt;code&gt;TextField&lt;/code&gt;&lt;/a&gt;. If a string-based field has &lt;code&gt;null=True&lt;/code&gt;, that means it has two possible values for &amp;ldquo;no data&amp;rdquo;: &lt;code&gt;NULL&lt;/code&gt;, and the empty string. In most cases, it&amp;rsquo;s redundant to have two possible values for &amp;ldquo;no data;&amp;rdquo; the Django convention is to use the empty string, not &lt;code&gt;NULL&lt;/code&gt;. One exception is when a &lt;a href=&quot;#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; has both &lt;code&gt;unique=True&lt;/code&gt; and &lt;code&gt;blank=True&lt;/code&gt; set. In this situation, &lt;code&gt;null=True&lt;/code&gt; is required to avoid unique constraint violations when saving multiple objects with blank values.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#django.db.models.TextField&quot;&gt; &lt;code&gt;TextField&lt;/code&gt; &lt;/a&gt;などの文字列ベースのフィールドでは&lt;a href=&quot;#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;を使用しないでください。文字列ベースのフィールドに &lt;code&gt;null=True&lt;/code&gt; がある場合、それは「データなし」に2つの可能な値があることを意味し &lt;code&gt;NULL&lt;/code&gt; と空の文字列です。ほとんどの場合、「データなし」の2つの可能な値を持つことは冗長です。Djangoの規約では、 &lt;code&gt;NULL&lt;/code&gt; ではなく空の文字列を使用します。1つの例外は、&lt;a href=&quot;#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;に &lt;code&gt;unique=True&lt;/code&gt; と &lt;code&gt;blank=True&lt;/code&gt; の両方がある場合です。設定されている場合です。この状況では、空白の値を持つ複数のオブジェクトを保存するときに一意の制約違反を回避するために &lt;code&gt;null=True&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="c2c4addd555a2578588f134a04c414a8bfc5cd8d" translate="yes" xml:space="preserve">
          <source>Avoid using the &lt;code&gt;filter&lt;/code&gt; argument with a single annotation or aggregation. It&amp;rsquo;s more efficient to use &lt;code&gt;QuerySet.filter()&lt;/code&gt; to exclude rows. The aggregation &lt;code&gt;filter&lt;/code&gt; argument is only useful when using two or more aggregations over the same relations with different conditionals.</source>
          <target state="translated">単一の注釈または集約で &lt;code&gt;filter&lt;/code&gt; 引数を使用することは避けてください。 &lt;code&gt;QuerySet.filter()&lt;/code&gt; を使用して行を除外する方が効率的です。集約 &lt;code&gt;filter&lt;/code&gt; 引数は、異なる関係を持つ同じ関係に対して2つ以上の集約を使用する場合にのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="94d7b19f9decbb77a74552061d2a7e28ff16c911" translate="yes" xml:space="preserve">
          <source>Avoiding SQL injection</source>
          <target state="translated">SQLインジェクションの回避</target>
        </trans-unit>
        <trans-unit id="9410dc97d2c72692ef59e83fd28566db94c67883" translate="yes" xml:space="preserve">
          <source>Avoiding XSS vulnerabilities when reusing built-in filters</source>
          <target state="translated">組み込みフィルタを再利用する際のXSS脆弱性の回避</target>
        </trans-unit>
        <trans-unit id="65a8d185f4de4fa2986100dd5bc5fd9f71b4dd53" translate="yes" xml:space="preserve">
          <source>Avoiding race conditions using &lt;code&gt;F()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;F()&lt;/code&gt; を使用して競合状態を回避する</target>
        </trans-unit>
        <trans-unit id="ae4f281df5a5d0ff3cad6371f76d5c29b6d953ec" translate="yes" xml:space="preserve">
          <source>B</source>
          <target state="translated">B</target>
        </trans-unit>
        <trans-unit id="d3995b2b37b0a9d72d4c1f4df49540d8b2f1d7ac" translate="yes" xml:space="preserve">
          <source>B, C</source>
          <target state="translated">B,C</target>
        </trans-unit>
        <trans-unit id="49d16c123e63cae0aa2ecdd12be80bdb56763577" translate="yes" xml:space="preserve">
          <source>Babel provides similar features to &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;makemessages&lt;/code&gt;&lt;/a&gt;, can replace it in general, and doesn&amp;rsquo;t depend on &lt;code&gt;gettext&lt;/code&gt;. For more information, read its documentation about &lt;a href=&quot;http://babel.pocoo.org/en/latest/messages.html&quot;&gt;working with message catalogs&lt;/a&gt;.</source>
          <target state="translated">Babelは&lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;makemessages&lt;/code&gt; &lt;/a&gt;と同様の機能を提供し、一般的にそれを置き換えることができ、 &lt;code&gt;gettext&lt;/code&gt; に依存しません。詳細については&lt;a href=&quot;http://babel.pocoo.org/en/latest/messages.html&quot;&gt;、メッセージカタログの操作&lt;/a&gt;に関するドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="022a7f167d95521de1acf21e27e11c487396593f" translate="yes" xml:space="preserve">
          <source>Back to the &lt;code&gt;detail()&lt;/code&gt; view for our poll application. Given the context variable &lt;code&gt;question&lt;/code&gt;, here&amp;rsquo;s what the &lt;code&gt;polls/detail.html&lt;/code&gt; template might look like:</source>
          <target state="translated">投票アプリケーションの &lt;code&gt;detail()&lt;/code&gt; ビューに戻ります。コンテキスト変数の &lt;code&gt;question&lt;/code&gt; 考えると、これは &lt;code&gt;polls/detail.html&lt;/code&gt; テンプレートは次のようになります。</target>
        </trans-unit>
        <trans-unit id="e758ca64563fdd62965a2b97b76d555b1a70d938" translate="yes" xml:space="preserve">
          <source>Backend</source>
          <target state="translated">Backend</target>
        </trans-unit>
        <trans-unit id="907a75668b7e03c4659947b3193d65847d1a8f35" translate="yes" xml:space="preserve">
          <source>Backend Support</source>
          <target state="translated">バックエンドサポート</target>
        </trans-unit>
        <trans-unit id="64dd60fe1a049fe6db3eb1369dec2e42bf428e21" translate="yes" xml:space="preserve">
          <source>Background</source>
          <target state="translated">Background</target>
        </trans-unit>
        <trans-unit id="138b85f239e58f9bda1316136aa82c90e7878d7f" translate="yes" xml:space="preserve">
          <source>Background theory</source>
          <target state="translated">背景理論</target>
        </trans-unit>
        <trans-unit id="8fd78925dba59eef91afba0cdabe923520e5ee69" translate="yes" xml:space="preserve">
          <source>Backwards compatibility</source>
          <target state="translated">下位互換性</target>
        </trans-unit>
        <trans-unit id="b1ff57d696aa3ec09bd76c88944e1a7097ee37a3" translate="yes" xml:space="preserve">
          <source>Bad:</source>
          <target state="translated">Bad:</target>
        </trans-unit>
        <trans-unit id="02fb997b61900c1aeca6956107b15ab95765ea07" translate="yes" xml:space="preserve">
          <source>Bad: &lt;code&gt;'example.com/foo/bar/'&lt;/code&gt;</source>
          <target state="translated">悪い： &lt;code&gt;'example.com/foo/bar/'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bc163b02e6955ecbd0ac6fa7a6c224b77e0f614b" translate="yes" xml:space="preserve">
          <source>Bad: &lt;code&gt;'https://example.com/foo/bar/'&lt;/code&gt;</source>
          <target state="translated">悪い： &lt;code&gt;'https://example.com/foo/bar/'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5400b30a122881d47fdeb120840f94c91748df48" translate="yes" xml:space="preserve">
          <source>Base class for all syndication feeds. Subclasses should provide write().</source>
          <target state="translated">すべてのシンジケーションフィードの基底クラス。サブクラスは write()を提供しなければなりません。</target>
        </trans-unit>
        <trans-unit id="5a98533d4533777678a2826b595332b97d370e7d" translate="yes" xml:space="preserve">
          <source>Base class for form range fields.</source>
          <target state="translated">フォーム範囲フィールドの基底クラス。</target>
        </trans-unit>
        <trans-unit id="694691a2cdd7f3264022193ea43da2dc86d47851" translate="yes" xml:space="preserve">
          <source>Base class for model range fields.</source>
          <target state="translated">モデル範囲フィールドの基底クラス。</target>
        </trans-unit>
        <trans-unit id="33498e9763de95f98078b83846fb61dc566837f8" translate="yes" xml:space="preserve">
          <source>Base class restrictions</source>
          <target state="translated">基底クラスの制限</target>
        </trans-unit>
        <trans-unit id="1327df53c1a32ce9abfbbd3212f5272b0617455c" translate="yes" xml:space="preserve">
          <source>Base class-based views can be thought of as &lt;em&gt;parent&lt;/em&gt; views, which can be used by themselves or inherited from. They may not provide all the capabilities required for projects, in which case there are Mixins which extend what base views can do.</source>
          <target state="translated">基本クラスベースのビューは&lt;em&gt;親&lt;/em&gt;と考えることができます&lt;em&gt;&lt;/em&gt;、それ自体で使用することも継承することもできるビューできます。それらはプロジェクトに必要なすべての機能を提供しない場合があります。その場合、ベースビューで実行できることを拡張するMixinsがあります。</target>
        </trans-unit>
        <trans-unit id="22ad5eb083aa4a8059d54f5bd8ea8049a7a5258c" translate="yes" xml:space="preserve">
          <source>Base directory to where GeoIP data is located or the full path to where the city or country data files (&lt;code&gt;.mmdb&lt;/code&gt;) are located. Assumes that both the city and country datasets are located in this directory; overrides the &lt;a href=&quot;#std:setting-GEOIP_PATH&quot;&gt;&lt;code&gt;GEOIP_PATH&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">GeoIPデータが置かれているベースディレクトリ、または都市または国のデータファイル（ &lt;code&gt;.mmdb&lt;/code&gt; ）が置かれている場所への絶対パス。都市と国の両方のデータセットがこのディレクトリにあると想定しています。&lt;a href=&quot;#std:setting-GEOIP_PATH&quot;&gt; &lt;code&gt;GEOIP_PATH&lt;/code&gt; を&lt;/a&gt;オーバーライドします設定を。</target>
        </trans-unit>
        <trans-unit id="49f6341ab3962fe35e78e061dffd867a40acb8d9" translate="yes" xml:space="preserve">
          <source>Base managers</source>
          <target state="translated">ベースマネージャー</target>
        </trans-unit>
        <trans-unit id="524becf4956384aaf9401753f12a515f39814fae" translate="yes" xml:space="preserve">
          <source>Base managers aren&amp;rsquo;t used when querying on related models, or when &lt;a href=&quot;queries#backwards-related-objects&quot;&gt;accessing a one-to-many or many-to-many relationship&lt;/a&gt;. For example, if the &lt;code&gt;Question&lt;/code&gt; model &lt;a href=&quot;../../intro/tutorial02#creating-models&quot;&gt;from the tutorial&lt;/a&gt; had a &lt;code&gt;deleted&lt;/code&gt; field and a base manager that filters out instances with &lt;code&gt;deleted=True&lt;/code&gt;, a queryset like &lt;code&gt;Choice.objects.filter(question__name__startswith='What')&lt;/code&gt; would include choices related to deleted questions.</source>
          <target state="translated">ベースマネージャーは、関連するモデルでクエリを実行する場合、または&lt;a href=&quot;queries#backwards-related-objects&quot;&gt;1対多または多&lt;/a&gt;対多の関係にアクセスする場合には使用されません。例えば、場合 &lt;code&gt;Question&lt;/code&gt; モデル&lt;a href=&quot;../../intro/tutorial02#creating-models&quot;&gt;チュートリアルからは、&lt;/a&gt;持っていた &lt;code&gt;deleted&lt;/code&gt; との事例アウトフィルタというフィールドとベースマネージャを &lt;code&gt;deleted=True&lt;/code&gt; 、のようなクエリセット &lt;code&gt;Choice.objects.filter(question__name__startswith='What')&lt;/code&gt; 削除された質問に関連する選択肢が含まれます。</target>
        </trans-unit>
        <trans-unit id="27eb3e111fe45536ce06e4e05df628d6121d667c" translate="yes" xml:space="preserve">
          <source>Base managers aren&amp;rsquo;t used when querying on related models. For example, if the &lt;code&gt;Question&lt;/code&gt; model &lt;a href=&quot;../../intro/tutorial02#creating-models&quot;&gt;from the tutorial&lt;/a&gt; had a &lt;code&gt;deleted&lt;/code&gt; field and a base manager that filters out instances with &lt;code&gt;deleted=True&lt;/code&gt;, a queryset like &lt;code&gt;Choice.objects.filter(question__name__startswith='What')&lt;/code&gt; would include choices related to deleted questions.</source>
          <target state="translated">関連モデルでクエリを実行する場合、ベースマネージャーは使用されません。例えば、場合 &lt;code&gt;Question&lt;/code&gt; モデル&lt;a href=&quot;../../intro/tutorial02#creating-models&quot;&gt;チュートリアルからは、&lt;/a&gt;持っていた &lt;code&gt;deleted&lt;/code&gt; との事例アウトフィルタというフィールドとベースマネージャを &lt;code&gt;deleted=True&lt;/code&gt; 、のようなクエリセット &lt;code&gt;Choice.objects.filter(question__name__startswith='What')&lt;/code&gt; 削除された質問に関連する選択肢が含まれます。</target>
        </trans-unit>
        <trans-unit id="a5ed205aa5fd703bcc3d50fb6437d7138a8d1c26" translate="yes" xml:space="preserve">
          <source>Base views</source>
          <target state="translated">ベースビュー</target>
        </trans-unit>
        <trans-unit id="13b83badb163e89e1591cbc1c77011d952c1640b" translate="yes" xml:space="preserve">
          <source>Base vs Generic views</source>
          <target state="translated">ベースビューとジェネリックビュー</target>
        </trans-unit>
        <trans-unit id="a0ce6714ceb84d23825af929df33051d80afd8c9" translate="yes" xml:space="preserve">
          <source>Base widget classes</source>
          <target state="translated">基本ウィジェットクラス</target>
        </trans-unit>
        <trans-unit id="cc1e70bb062910be7a643ca6e26ad21dd094cf82" translate="yes" xml:space="preserve">
          <source>Base widget classes &lt;a href=&quot;#django.forms.Widget&quot;&gt;&lt;code&gt;Widget&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.forms.MultiWidget&quot;&gt;&lt;code&gt;MultiWidget&lt;/code&gt;&lt;/a&gt; are subclassed by all the &lt;a href=&quot;#built-in-widgets&quot;&gt;built-in widgets&lt;/a&gt; and may serve as a foundation for custom widgets.</source>
          <target state="translated">基本ウィジェットクラス&lt;a href=&quot;#django.forms.Widget&quot;&gt; &lt;code&gt;Widget&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#django.forms.MultiWidget&quot;&gt; &lt;code&gt;MultiWidget&lt;/code&gt; &lt;/a&gt;は、すべての&lt;a href=&quot;#built-in-widgets&quot;&gt;組み込みウィジェット&lt;/a&gt;によってサブクラス化されています、カスタムウィジェットの基盤として機能する場合があります。</target>
        </trans-unit>
        <trans-unit id="023ccd9b632124d69f29133e19fa531effbe1c65" translate="yes" xml:space="preserve">
          <source>Based on &lt;a href=&quot;../../forms/fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; and translates its input into &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.DateRange&quot;&gt;&lt;code&gt;DateRange&lt;/code&gt;&lt;/a&gt;. Default for &lt;a href=&quot;fields#django.contrib.postgres.fields.DateRangeField&quot;&gt;&lt;code&gt;DateRangeField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../forms/fields#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; に&lt;/a&gt;基づいており、その入力を&lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.DateRange&quot;&gt; &lt;code&gt;DateRange&lt;/code&gt; に&lt;/a&gt;変換します。&lt;a href=&quot;fields#django.contrib.postgres.fields.DateRangeField&quot;&gt; &lt;code&gt;DateRangeField&lt;/code&gt; の&lt;/a&gt;デフォルト。</target>
        </trans-unit>
        <trans-unit id="91cf6094cf7e99756e3d52b512c1ed523b74be07" translate="yes" xml:space="preserve">
          <source>Based on &lt;a href=&quot;../../forms/fields#django.forms.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; and translates its input into &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.DateTimeTZRange&quot;&gt;&lt;code&gt;DateTimeTZRange&lt;/code&gt;&lt;/a&gt;. Default for &lt;a href=&quot;fields#django.contrib.postgres.fields.DateTimeRangeField&quot;&gt;&lt;code&gt;DateTimeRangeField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../forms/fields#django.forms.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; に&lt;/a&gt;基づいており、その入力を&lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.DateTimeTZRange&quot;&gt; &lt;code&gt;DateTimeTZRange&lt;/code&gt; に&lt;/a&gt;変換します。&lt;a href=&quot;fields#django.contrib.postgres.fields.DateTimeRangeField&quot;&gt; &lt;code&gt;DateTimeRangeField&lt;/code&gt; の&lt;/a&gt;デフォルト。</target>
        </trans-unit>
        <trans-unit id="1d4dac139c2acb993f0cfb3295d29cf679450b8b" translate="yes" xml:space="preserve">
          <source>Based on &lt;a href=&quot;../../forms/fields#django.forms.DecimalField&quot;&gt;&lt;code&gt;DecimalField&lt;/code&gt;&lt;/a&gt; and translates its input into &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.NumericRange&quot;&gt;&lt;code&gt;NumericRange&lt;/code&gt;&lt;/a&gt;. Default for &lt;a href=&quot;fields#django.contrib.postgres.fields.DecimalRangeField&quot;&gt;&lt;code&gt;DecimalRangeField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../forms/fields#django.forms.DecimalField&quot;&gt; &lt;code&gt;DecimalField&lt;/code&gt; に&lt;/a&gt;基づいており、その入力を&lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.NumericRange&quot;&gt; &lt;code&gt;NumericRange&lt;/code&gt; に&lt;/a&gt;変換します。&lt;a href=&quot;fields#django.contrib.postgres.fields.DecimalRangeField&quot;&gt; &lt;code&gt;DecimalRangeField&lt;/code&gt; の&lt;/a&gt;デフォルト。</target>
        </trans-unit>
        <trans-unit id="a2d5fc68b0e87ce589e5a7786b34368ef0034a1e" translate="yes" xml:space="preserve">
          <source>Based on &lt;a href=&quot;../../forms/fields#django.forms.FloatField&quot;&gt;&lt;code&gt;FloatField&lt;/code&gt;&lt;/a&gt; and translates its input into &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.NumericRange&quot;&gt;&lt;code&gt;NumericRange&lt;/code&gt;&lt;/a&gt;. Default for &lt;a href=&quot;fields#django.contrib.postgres.fields.FloatRangeField&quot;&gt;&lt;code&gt;FloatRangeField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../forms/fields#django.forms.FloatField&quot;&gt; &lt;code&gt;FloatField&lt;/code&gt; に&lt;/a&gt;基づいており、その入力を&lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.NumericRange&quot;&gt; &lt;code&gt;NumericRange&lt;/code&gt; に&lt;/a&gt;変換します。&lt;a href=&quot;fields#django.contrib.postgres.fields.FloatRangeField&quot;&gt; &lt;code&gt;FloatRangeField&lt;/code&gt; の&lt;/a&gt;デフォルト。</target>
        </trans-unit>
        <trans-unit id="593a52dc3c5e2722090dcbfa0ed8460ebad0bdd8" translate="yes" xml:space="preserve">
          <source>Based on &lt;a href=&quot;../../forms/fields#django.forms.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt; and translates its input into &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.NumericRange&quot;&gt;&lt;code&gt;NumericRange&lt;/code&gt;&lt;/a&gt;. Default for &lt;a href=&quot;fields#django.contrib.postgres.fields.IntegerRangeField&quot;&gt;&lt;code&gt;IntegerRangeField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fields#django.contrib.postgres.fields.BigIntegerRangeField&quot;&gt;&lt;code&gt;BigIntegerRangeField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../forms/fields#django.forms.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; に&lt;/a&gt;基づいており、その入力を&lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.NumericRange&quot;&gt; &lt;code&gt;NumericRange&lt;/code&gt; に&lt;/a&gt;変換します。&lt;a href=&quot;fields#django.contrib.postgres.fields.IntegerRangeField&quot;&gt; &lt;code&gt;IntegerRangeField&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;fields#django.contrib.postgres.fields.BigIntegerRangeField&quot;&gt; &lt;code&gt;BigIntegerRangeField&lt;/code&gt; の&lt;/a&gt;デフォルト。</target>
        </trans-unit>
        <trans-unit id="e63f51f7e5afad0c831b1acc1916d16e437f5b4a" translate="yes" xml:space="preserve">
          <source>Bash completion</source>
          <target state="translated">バッシュ完了</target>
        </trans-unit>
        <trans-unit id="36c41688b96ebca8546b978b079367e1aa359e74" translate="yes" xml:space="preserve">
          <source>Basic configuration</source>
          <target state="translated">基本的な設定</target>
        </trans-unit>
        <trans-unit id="4c8d5fdc5db9950cf7bea592d196bad4f803b3fb" translate="yes" xml:space="preserve">
          <source>Basic examples</source>
          <target state="translated">基本的な例</target>
        </trans-unit>
        <trans-unit id="b5fbde77a176de1b8104d736377f8f9f6c7c45c5" translate="yes" xml:space="preserve">
          <source>Basic file uploads</source>
          <target state="translated">基本的なファイルアップロード</target>
        </trans-unit>
        <trans-unit id="2c171ef65e06890e2659b070f8e8e3e962cb28bc" translate="yes" xml:space="preserve">
          <source>Basic forms</source>
          <target state="translated">基本フォーム</target>
        </trans-unit>
        <trans-unit id="d5f25c152bb6bc0e7fa0c6d19f0fd9ee0aaac6f7" translate="yes" xml:space="preserve">
          <source>Basic lookups keyword arguments take the form &lt;code&gt;field__lookuptype=value&lt;/code&gt;. (That&amp;rsquo;s a double-underscore). For example:</source>
          <target state="translated">基本的な検索キーワード引数の形式は、 &lt;code&gt;field__lookuptype=value&lt;/code&gt; です。（それは二重下線です）。例えば：</target>
        </trans-unit>
        <trans-unit id="f5f6d1eff70850fa7cf94c4c89bc731b91ecc609" translate="yes" xml:space="preserve">
          <source>Basic testing strategies</source>
          <target state="translated">テストの基本戦略</target>
        </trans-unit>
        <trans-unit id="cb3a8802da5b3164771a468d78ff7995a249f08a" translate="yes" xml:space="preserve">
          <source>Basic usage</source>
          <target state="translated">基本的な使い方</target>
        </trans-unit>
        <trans-unit id="722f99933cbd1a6d2ea10a0e75995a9b288cb431" translate="yes" xml:space="preserve">
          <source>Basically, the deployment of a GeoDjango application is not different from the deployment of a normal Django application. Please consult Django&amp;rsquo;s &lt;a href=&quot;../../../howto/deployment/index&quot;&gt;deployment documentation&lt;/a&gt;.</source>
          <target state="translated">基本的に、GeoDjangoアプリケーションのデプロイは、通常のDjangoアプリケーションのデプロイと同じです。Djangoの&lt;a href=&quot;../../../howto/deployment/index&quot;&gt;デプロイメントドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5fcebeefad3cdbbf8733aa928160dec7dc90c1a1" translate="yes" xml:space="preserve">
          <source>Basics</source>
          <target state="translated">Basics</target>
        </trans-unit>
        <trans-unit id="517dbf0b4b497174beda382d4dbff241d4173d30" translate="yes" xml:space="preserve">
          <source>Be aware that files created in this way are not automatically closed. The following approach may be used to close files automatically:</source>
          <target state="translated">この方法で作成されたファイルは自動的には閉じられないことに注意してください。ファイルを自動的に閉じるには、以下のような方法があります。</target>
        </trans-unit>
        <trans-unit id="3ec8a16f0562ac16bec7f7eba4ff2610dedf37d0" translate="yes" xml:space="preserve">
          <source>Be aware that if all the passwords in your database aren&amp;rsquo;t encoded in the default hasher&amp;rsquo;s algorithm, you may be vulnerable to a user enumeration timing attack due to a difference between the duration of a login request for a user with a password encoded in a non-default algorithm and the duration of a login request for a nonexistent user (which runs the default hasher). You may be able to mitigate this by &lt;a href=&quot;#wrapping-password-hashers&quot;&gt;upgrading older password hashes&lt;/a&gt;.</source>
          <target state="translated">データベース内のすべてのパスワードがデフォルトのハッシャーのアルゴリズムでエンコードされていない場合、パスワードがエンコードされたユーザーのログイン要求の持続時間の違いにより、ユーザー列挙タイミング攻撃に対して脆弱になる可能性があることに注意してくださいデフォルト以外のアルゴリズムと、存在しないユーザー（デフォルトのハッシュを実行する）のログイン要求の期間。&lt;a href=&quot;#wrapping-password-hashers&quot;&gt;古いパスワードハッシュをアップグレード&lt;/a&gt;すると、これを軽減できる場合があります。</target>
        </trans-unit>
        <trans-unit id="894fadfef402ddaec33f2601f2a9a2e3348e30d3" translate="yes" xml:space="preserve">
          <source>Be aware that not all Django output can be passed unmodified to &lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt;. For example, if you have some custom type in an object to be serialized, you&amp;rsquo;ll have to write a custom &lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt; encoder for it. Something like this will work:</source>
          <target state="translated">すべてのDjango出力を変更せずに&lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt; &lt;code&gt;json&lt;/code&gt; に&lt;/a&gt;渡すことができるわけではないことに注意してください。たとえば、シリアル化するオブジェクトにカスタムタイプがある場合、そのためのカスタム&lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt; &lt;code&gt;json&lt;/code&gt; &lt;/a&gt;エンコーダーを作成する必要があります。このようなものはうまくいきます：</target>
        </trans-unit>
        <trans-unit id="77345e4d4278d00200e1ee0b3d2293aa945623d3" translate="yes" xml:space="preserve">
          <source>Be aware that not all options set in the &lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/a&gt; part of your database configuration in &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; are passed to the command-line client, e.g. &lt;code&gt;'isolation_level'&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; の&lt;/a&gt;データベース構成の&lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt; &lt;code&gt;OPTIONS&lt;/code&gt; &lt;/a&gt;部分で設定されたすべてのオプションがコマンドラインクライアントに渡されるわけではないことに注意してください（例： &lt;code&gt;'isolation_level'&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="36e711b8e76ffd6eb7723f59093585eedc6d6a56" translate="yes" xml:space="preserve">
          <source>Be aware that sending an email costs extra time, hence you may be vulnerable to an email address enumeration timing attack due to a difference between the duration of a reset request for an existing email address and the duration of a reset request for a nonexistent email address. To reduce the overhead, you can use a 3rd party package that allows to send emails asynchronously, e.g. &lt;a href=&quot;https://pypi.org/project/django-mailer/&quot;&gt;django-mailer&lt;/a&gt;.</source>
          <target state="translated">電子メールの送信には余分な時間がかかるため、既存の電子メールアドレスのリセット要求の期間と存在しない電子メールアドレスのリセット要求の期間が異なるため、電子メールアドレスの列挙タイミング攻撃に対して脆弱になる可能性があることに注意してください。オーバーヘッドを減らすために、電子メールを非同期で送信できるサードパーティのパッケージを使用できます（例：&lt;a href=&quot;https://pypi.org/project/django-mailer/&quot;&gt;django-mailer）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="79e3498394e017162e5dbcbada25f0d715476bfd" translate="yes" xml:space="preserve">
          <source>Be aware that the &lt;code&gt;update()&lt;/code&gt; method is converted directly to an SQL statement. It is a bulk operation for direct updates. It doesn&amp;rsquo;t run any &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; methods on your models, or emit the &lt;code&gt;pre_save&lt;/code&gt; or &lt;code&gt;post_save&lt;/code&gt; signals (which are a consequence of calling &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;), or honor the &lt;a href=&quot;../../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt;&lt;code&gt;auto_now&lt;/code&gt;&lt;/a&gt; field option. If you want to save every item in a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; and make sure that the &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method is called on each instance, you don&amp;rsquo;t need any special function to handle that. Loop over them and call &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;update()&lt;/code&gt; メソッドは直接SQLステートメントに変換されることに注意してください。これは直接更新の一括操作です。モデルで&lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;メソッドを実行したり、 &lt;code&gt;pre_save&lt;/code&gt; または &lt;code&gt;post_save&lt;/code&gt; シグナル（&lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;を呼び出した結果）を&lt;a href=&quot;../../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt; &lt;code&gt;auto_now&lt;/code&gt; &lt;/a&gt;たり、auto_nowフィールドオプションを受け入れたりしません。あなたは内のすべてのアイテムを保存したい場合は&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;とすることを確認して&lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;メソッドは、各インスタンスに対して呼び出され、あなたはそれを処理するために、特別な機能を必要としません。それらをループして&lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;を呼び出します：</target>
        </trans-unit>
        <trans-unit id="8e728258ab818b7ff5c26154c9afe0d25d494d28" translate="yes" xml:space="preserve">
          <source>Be aware that this migration will take on the order of several minutes for several thousand users, depending on the speed of your hardware.</source>
          <target state="translated">この移行は、ハードウェアの速度に応じて、数千人のユーザーに対して数分単位で行われることに注意してください。</target>
        </trans-unit>
        <trans-unit id="bf4d63f2b9cfcfa220a03e6a26d997aa9e14d6d2" translate="yes" xml:space="preserve">
          <source>Be aware that this particular setup disables authentication with the default &lt;code&gt;ModelBackend&lt;/code&gt;. This means that if the &lt;code&gt;REMOTE_USER&lt;/code&gt; value is not set then the user is unable to log in, even using Django&amp;rsquo;s admin interface. Adding &lt;code&gt;'django.contrib.auth.backends.ModelBackend'&lt;/code&gt; to the &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; list will use &lt;code&gt;ModelBackend&lt;/code&gt; as a fallback if &lt;code&gt;REMOTE_USER&lt;/code&gt; is absent, which will solve these issues.</source>
          <target state="translated">この特定の設定では、デフォルトの &lt;code&gt;ModelBackend&lt;/code&gt; での認証が無効になることに注意してください。つまり、 &lt;code&gt;REMOTE_USER&lt;/code&gt; 値が設定されていない場合、Djangoの管理インターフェースを使用していても、ユーザーはログインできません。 &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; リストに &lt;code&gt;'django.contrib.auth.backends.ModelBackend'&lt;/code&gt; &lt;code&gt;ModelBackend&lt;/code&gt; 」を追加すると、 &lt;code&gt;REMOTE_USER&lt;/code&gt; が存在しない場合、ModelBackendがフォールバックとして使用され、これらの問題が解決されます。</target>
        </trans-unit>
        <trans-unit id="8c45bcc820afa9ec7f09ab5e262d83093e9f5054" translate="yes" xml:space="preserve">
          <source>Be careful not to modify any objects created in &lt;code&gt;setUpTestData()&lt;/code&gt; in your test methods. Modifications to in-memory objects from setup work done at the class level will persist between test methods. If you do need to modify them, you could reload them in the &lt;code&gt;setUp()&lt;/code&gt; method with &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.refresh_from_db&quot;&gt;&lt;code&gt;refresh_from_db()&lt;/code&gt;&lt;/a&gt;, for example.</source>
          <target state="translated">テストメソッドの &lt;code&gt;setUpTestData()&lt;/code&gt; で作成されたオブジェクトを変更しないように注意してください。クラスレベルで行われたセットアップ作業からのメモリ内オブジェクトへの変更は、テストメソッド間で保持されます。それらを変更する必要がある場合は、たとえば、&lt;a href=&quot;../../ref/models/instances#django.db.models.Model.refresh_from_db&quot;&gt; &lt;code&gt;refresh_from_db()&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;setUp()&lt;/code&gt; メソッドで再ロードできます。</target>
        </trans-unit>
        <trans-unit id="4b6c803cd4cd7fb715766d27118b3711aba748cc" translate="yes" xml:space="preserve">
          <source>Be careful when deciding if your filter really does leave safe strings as safe. If you&amp;rsquo;re &lt;em&gt;removing&lt;/em&gt; characters, you might inadvertently leave unbalanced HTML tags or entities in the result. For example, removing a &lt;code&gt;&amp;gt;&lt;/code&gt; from the input might turn &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; into &lt;code&gt;&amp;lt;a&lt;/code&gt;, which would need to be escaped on output to avoid causing problems. Similarly, removing a semicolon (&lt;code&gt;;&lt;/code&gt;) can turn &lt;code&gt;&amp;amp;amp;&lt;/code&gt; into &lt;code&gt;&amp;amp;amp&lt;/code&gt;, which is no longer a valid entity and thus needs further escaping. Most cases won&amp;rsquo;t be nearly this tricky, but keep an eye out for any problems like that when reviewing your code.</source>
          <target state="translated">フィルターが本当に安全な文字列を安全に残すかどうかを決定するときは注意してください。文字を&lt;em&gt;削除する&lt;/em&gt;場合、結果に不均衡なHTMLタグまたはエンティティを誤って残す可能性があります。たとえば、入力から &lt;code&gt;&amp;gt;&lt;/code&gt; を削除すると、 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; が &lt;code&gt;&amp;lt;a&lt;/code&gt; に変わり、問題の発生を回避するために出力でエスケープする必要があります。同様に、セミコロン（ &lt;code&gt;;&lt;/code&gt; ）を削除すると、 &lt;code&gt;&amp;amp;amp;&lt;/code&gt; &lt;code&gt;&amp;amp;amp&lt;/code&gt; に入れます。これは有効なエンティティではなくなったため、さらにエスケープする必要があります。ほとんどの場合、これほどトリッキーではありませんが、コードを確認するときは、そのような問題に注意してください。</target>
        </trans-unit>
        <trans-unit id="eba0553e37be2c52b9440df03c21c723bfad622f" translate="yes" xml:space="preserve">
          <source>Be careful when reading template code - the template system does not allow use of parentheses, but will call callables automatically, hiding the above distinction.</source>
          <target state="translated">テンプレートコードを読むときは注意してください-テンプレートシステムは括弧の使用を許可していませんが、上記の区別を隠して自動的にcallablesを呼び出します。</target>
        </trans-unit>
        <trans-unit id="69691257ffe84235eced0129d9f45dba26cd9e72" translate="yes" xml:space="preserve">
          <source>Be careful when using the &lt;code&gt;tables&lt;/code&gt; parameter if you&amp;rsquo;re specifying tables that are already used in the query. When you add extra tables via the &lt;code&gt;tables&lt;/code&gt; parameter, Django assumes you want that table included an extra time, if it is already included. That creates a problem, since the table name will then be given an alias. If a table appears multiple times in an SQL statement, the second and subsequent occurrences must use aliases so the database can tell them apart. If you&amp;rsquo;re referring to the extra table you added in the extra &lt;code&gt;where&lt;/code&gt; parameter this is going to cause errors.</source>
          <target state="translated">クエリで既に使用されているテーブルを指定する場合は、 &lt;code&gt;tables&lt;/code&gt; パラメータを使用するときに注意してください。 &lt;code&gt;tables&lt;/code&gt; パラメータを介して追加のテーブルを追加すると、Djangoは、そのテーブルがすでに含まれている場合は、追加の時間を含めたいと想定します。テーブル名にはエイリアスが与えられるため、これは問題を引き起こします。 SQLステートメントでテーブルが複数回出現する場合、2番目以降のオカレンスではエイリアスを使用して、データベースで区別できるようにする必要があります。追加の &lt;code&gt;where&lt;/code&gt; パラメーターで追加した追加のテーブルを参照している場合、これによりエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="2bccc52da60358d2d264adb4897908ef269c5f82" translate="yes" xml:space="preserve">
          <source>Be careful when you override settings, especially when the default value is a non-empty list or dictionary, such as &lt;a href=&quot;#std:setting-STATICFILES_FINDERS&quot;&gt;&lt;code&gt;STATICFILES_FINDERS&lt;/code&gt;&lt;/a&gt;. Make sure you keep the components required by the features of Django you wish to use.</source>
          <target state="translated">特にデフォルト値が&lt;a href=&quot;#std:setting-STATICFILES_FINDERS&quot;&gt; &lt;code&gt;STATICFILES_FINDERS&lt;/code&gt; &lt;/a&gt;などの空でないリストまたは辞書である場合は、設定を上書きするときに注意してください。使用したいDjangoの機能に必要なコンポーネントを必ず保持してください。</target>
        </trans-unit>
        <trans-unit id="cd1ed2ef21e62a68037633065cc360f961c4e002" translate="yes" xml:space="preserve">
          <source>Be careful with &lt;code&gt;related_name&lt;/code&gt; and &lt;code&gt;related_query_name&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;related_name&lt;/code&gt; と &lt;code&gt;related_query_name&lt;/code&gt; に注意してください</target>
        </trans-unit>
        <trans-unit id="c5bdad25aa14bf675ac1781f25c4b227f57b0179" translate="yes" xml:space="preserve">
          <source>Be careful with the order of decorators</source>
          <target state="translated">飾り付けの順番に注意</target>
        </trans-unit>
        <trans-unit id="6d3f850c6cb2bd3b2b49588b50efb20bdb7e6cf3" translate="yes" xml:space="preserve">
          <source>Be careful with this attribute in subclasses.</source>
          <target state="translated">サブクラスではこの属性に注意してください。</target>
        </trans-unit>
        <trans-unit id="9bd60f39da97cb517c583ecc7dc05525327c66e5" translate="yes" xml:space="preserve">
          <source>Be careful with your own custom properties - it is up to you to implement caching when required, for example using the &lt;a href=&quot;../../ref/utils#django.utils.functional.cached_property&quot;&gt;&lt;code&gt;cached_property&lt;/code&gt;&lt;/a&gt; decorator.</source>
          <target state="translated">独自のカスタムプロパティに注意してください。たとえば、&lt;a href=&quot;../../ref/utils#django.utils.functional.cached_property&quot;&gt; &lt;code&gt;cached_property&lt;/code&gt; &lt;/a&gt;デコレータを使用するなど、必要に応じてキャッシュを実装するかどうかはあなた次第です。</target>
        </trans-unit>
        <trans-unit id="cae78767c33d88536b3f71df5c5467f045e15884" translate="yes" xml:space="preserve">
          <source>Be careful, though. You need to do more than just mark the output as safe. You need to ensure it really &lt;em&gt;is&lt;/em&gt; safe, and what you do depends on whether auto-escaping is in effect. The idea is to write filters that can operate in templates where auto-escaping is either on or off in order to make things easier for your template authors.</source>
          <target state="translated">ただし、注意してください。出力を安全であるとマークするだけではありません。あなた&lt;em&gt;は&lt;/em&gt;それが本当に安全であることを保証する必要が&lt;em&gt;あり&lt;/em&gt;ます、そしてあなたがすることは自動エスケープが有効であるかどうかに依存します。アイデアは、テンプレートの作成者にとって物事をより簡単にするために、自動エスケープがオンまたはオフのいずれかであるテンプレートで動作できるフィルターを作成することです。</target>
        </trans-unit>
        <trans-unit id="9843c5e6a04319a8b29711d8e625e85b3a246449" translate="yes" xml:space="preserve">
          <source>Be cautious about using nested queries and understand your database server&amp;rsquo;s performance characteristics (if in doubt, benchmark!). Some database backends, most notably MySQL, don&amp;rsquo;t optimize nested queries very well. It is more efficient, in those cases, to extract a list of values and then pass that into the second query. That is, execute two queries instead of one:</source>
          <target state="translated">ネストされたクエリの使用には注意し、データベースサーバーのパフォーマンス特性を理解してください（疑わしい場合はベンチマーク！）。一部のデータベースバックエンド、特にMySQLは、ネストされたクエリを最適化しません。このような場合は、値のリストを抽出してから2番目のクエリに渡す方が効率的です。つまり、1つではなく2つのクエリを実行します。</target>
        </trans-unit>
        <trans-unit id="cfeddad7d119eee7c62f567d08fe9d6b52683e9c" translate="yes" xml:space="preserve">
          <source>Be cautious when ordering by fields in related models if you are also using &lt;a href=&quot;#django.db.models.query.QuerySet.distinct&quot;&gt;&lt;code&gt;distinct()&lt;/code&gt;&lt;/a&gt;. See the note in &lt;a href=&quot;#django.db.models.query.QuerySet.distinct&quot;&gt;&lt;code&gt;distinct()&lt;/code&gt;&lt;/a&gt; for an explanation of how related model ordering can change the expected results.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.query.QuerySet.distinct&quot;&gt; &lt;code&gt;distinct()&lt;/code&gt; &lt;/a&gt;も使用している場合、関連するモデルのフィールドで順序を付けるときは注意してください。関連するモデルの順序が予想される結果をどのように変更できるかについては、&lt;a href=&quot;#django.db.models.query.QuerySet.distinct&quot;&gt; &lt;code&gt;distinct()&lt;/code&gt; の&lt;/a&gt;注記を参照してください。</target>
        </trans-unit>
        <trans-unit id="1016c4e42e4fadf15e517758fc4068d8d542bdce" translate="yes" xml:space="preserve">
          <source>Be cautious when updating this setting on a production site. If you update this setting to enable cross-domain cookies on a site that previously used standard domain cookies, existing user cookies that have the old domain will not be updated. This will result in site users being unable to switch the language as long as these cookies persist. The only safe and reliable option to perform the switch is to change the language cookie name permanently (via the &lt;a href=&quot;#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt;&lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt;&lt;/a&gt; setting) and to add a middleware that copies the value from the old cookie to a new one and then deletes the old one.</source>
          <target state="translated">本番サイトでこの設定を更新する場合は注意が必要です。この設定を更新して、以前に標準ドメインCookieを使用していたサイトでクロスドメインCookieを有効にした場合、古いドメインを持つ既存のユーザーCookieは更新されません。これにより、サイトのユーザーは、これらのCookieが存続している限り、言語を切り替えることができなくなります。切り替えを実行する安全で信頼できる唯一のオプションは、言語Cookie名を永続的に変更し（&lt;a href=&quot;#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt; &lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt; &lt;/a&gt;設定を介して）、古いCookieから新しいCookieに値をコピーしてから古いCookieを削除するミドルウェアを追加することです。</target>
        </trans-unit>
        <trans-unit id="917d17d58fe2ef61dc24fb00cc8fb801f576cedc" translate="yes" xml:space="preserve">
          <source>Be cautious when updating this setting on a production site. If you update this setting to enable cross-domain cookies on a site that previously used standard domain cookies, existing user cookies will be set to the old domain. This may result in them being unable to log in as long as these cookies persist.</source>
          <target state="translated">本番サイトでこの設定を更新する場合は注意が必要です。以前に標準ドメインのクッキーを使用していたサイトでクロスドメインクッキーを有効にするためにこの設定を更新すると、既存のユーザークッキーが古いドメインに設定されます。これにより、これらのクッキーが持続する限り、ユーザーはログインできなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="61b4a3d60b793cba756caf46f3fdd82b2777e45d" translate="yes" xml:space="preserve">
          <source>Be cautious when updating this setting on a production site. If you update this setting to use a deeper path than it previously used, existing user cookies that have the old path will not be updated. This will result in site users being unable to switch the language as long as these cookies persist. The only safe and reliable option to perform the switch is to change the language cookie name permanently (via the &lt;a href=&quot;#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt;&lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt;&lt;/a&gt; setting), and to add a middleware that copies the value from the old cookie to a new one and then deletes the one.</source>
          <target state="translated">本番サイトでこの設定を更新する場合は注意が必要です。以前に使用したよりも深いパスを使用するようにこの設定を更新した場合、古いパスを持つ既存のユーザーCookieは更新されません。これにより、サイトのユーザーは、これらのCookieが存続している限り、言語を切り替えることができなくなります。切り替えを実行する安全で信頼できる唯一のオプションは、言語Cookie名を永続的に変更し（&lt;a href=&quot;#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt; &lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt; &lt;/a&gt;設定を介して）、古いCookieから新しいCookieに値をコピーしてから削除するミドルウェアを追加することです。</target>
        </trans-unit>
        <trans-unit id="040e8be262282dccbf78f864cd1c6985021f4421" translate="yes" xml:space="preserve">
          <source>Be sure to account for Python&amp;rsquo;s behavior if an exception is raised during &lt;code&gt;setUpClass()&lt;/code&gt;. If that happens, neither the tests in the class nor &lt;code&gt;tearDownClass()&lt;/code&gt; are run. In the case of &lt;a href=&quot;#django.test.TestCase&quot;&gt;&lt;code&gt;django.test.TestCase&lt;/code&gt;&lt;/a&gt;, this will leak the transaction created in &lt;code&gt;super()&lt;/code&gt; which results in various symptoms including a segmentation fault on some platforms (reported on macOS). If you want to intentionally raise an exception such as &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.SkipTest&quot;&gt;&lt;code&gt;unittest.SkipTest&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;setUpClass()&lt;/code&gt;, be sure to do it before calling &lt;code&gt;super()&lt;/code&gt; to avoid this.</source>
          <target state="translated">&lt;code&gt;setUpClass()&lt;/code&gt; の実行中に例外が発生した場合は、Pythonの動作を必ず考慮してください。その場合、クラスのテストも &lt;code&gt;tearDownClass()&lt;/code&gt; も実行されません。&lt;a href=&quot;#django.test.TestCase&quot;&gt; &lt;code&gt;django.test.TestCase&lt;/code&gt; &lt;/a&gt;の場合、これは &lt;code&gt;super()&lt;/code&gt; で作成されたトランザクションをリークし、一部のプラットフォームでのセグメンテーション違反（macOSで報告）を含むさまざまな症状を引き起こします。あなたが意図的のような例外上げたい場合&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.SkipTest&quot;&gt; &lt;code&gt;unittest.SkipTest&lt;/code&gt; &lt;/a&gt;で &lt;code&gt;setUpClass()&lt;/code&gt; を呼び出す前にそれを行うには必ず &lt;code&gt;super()&lt;/code&gt; これを避けるために。</target>
        </trans-unit>
        <trans-unit id="ef293d4c285cf086b316ae959351a0cccfa79be9" translate="yes" xml:space="preserve">
          <source>Be thoughtful about how you allow users to manage permissions. If you give a non-superuser the ability to edit users, this is ultimately the same as giving them superuser status because they will be able to elevate permissions of users including themselves!</source>
          <target state="translated">ユーザーに権限の管理を許可する方法については、よく考えてください。スーパーユーザーではない人にユーザーを編集する能力を与えた場合、これは最終的にはスーパーユーザーのステータスを与えるのと同じことになります。</target>
        </trans-unit>
        <trans-unit id="beddae976d47ce08353a7d3f7a198e04d440ec69" translate="yes" xml:space="preserve">
          <source>Be very careful if using a &lt;code&gt;RemoteUserMiddleware&lt;/code&gt; subclass with a custom HTTP header. You must be sure that your front-end web server always sets or strips that header based on the appropriate authentication checks, never permitting an end-user to submit a fake (or &amp;ldquo;spoofed&amp;rdquo;) header value. Since the HTTP headers &lt;code&gt;X-Auth-User&lt;/code&gt; and &lt;code&gt;X-Auth_User&lt;/code&gt; (for example) both normalize to the &lt;code&gt;HTTP_X_AUTH_USER&lt;/code&gt; key in &lt;code&gt;request.META&lt;/code&gt;, you must also check that your web server doesn&amp;rsquo;t allow a spoofed header using underscores in place of dashes.</source>
          <target state="translated">カスタムHTTPヘッダーで &lt;code&gt;RemoteUserMiddleware&lt;/code&gt; サブクラスを使用する場合は、十分に注意してください。フロントエンドWebサーバーは、適切な認証チェックに基づいて常にヘッダーを設定または削除し、エンドユーザーが偽の（または「なりすまし」された）ヘッダー値を送信することを決して許可しないようにする必要があります。HTTPヘッダー &lt;code&gt;X-Auth-User&lt;/code&gt; と &lt;code&gt;X-Auth_User&lt;/code&gt; （たとえば）は両方とも &lt;code&gt;request.META&lt;/code&gt; の &lt;code&gt;HTTP_X_AUTH_USER&lt;/code&gt; キーに正規化するため、ダッシュの代わりにアンダースコアを使用してスプーフィングされたヘッダーがWebサーバーで許可されていないことも確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="67405c085c36ff7bf9e47c05c6ca9a8add17cdbf" translate="yes" xml:space="preserve">
          <source>Be very careful with marking views with the &lt;code&gt;csrf_exempt&lt;/code&gt; decorator unless it is absolutely necessary.</source>
          <target state="translated">絶対に必要な場合を除いて、 &lt;code&gt;csrf_exempt&lt;/code&gt; デコレータを使用してビューをマークする際は十分に注意してください。</target>
        </trans-unit>
        <trans-unit id="436ebc6dd66c840a88bd7f4d5979b3039fbfbefe" translate="yes" xml:space="preserve">
          <source>Bear in mind that when reversed, this is actually adding a field to a model. The operation is reversible (apart from any data loss, which is irreversible) if the field is nullable or if it has a default value that can be used to populate the recreated column. If the field is not nullable and does not have a default value, the operation is irreversible.</source>
          <target state="translated">逆の場合、これは実際にモデルにフィールドを追加していることに注意してください。この操作は、フィールドがnullableであるか、または再作成された列に入力するために使用できるデフォルト値を持っている場合には可逆的です(データの損失は別として、不可逆的です)。フィールドがnullableではなく、デフォルト値を持たない場合、操作は不可逆的です。</target>
        </trans-unit>
        <trans-unit id="463ef2f89f1e249a7b9be4618cd7fcd06a48a5af" translate="yes" xml:space="preserve">
          <source>Bear in mind that when reversed, this is actually adding a field to a model. The operation is reversible (apart from any data loss, which of course is irreversible) if the field is nullable or if it has a default value that can be used to populate the recreated column. If the field is not nullable and does not have a default value, the operation is irreversible.</source>
          <target state="translated">逆の場合、これは実際にモデルにフィールドを追加していることに注意してください。この操作は、フィールドがnullableであるか、または再作成された列に入力するために使用できるデフォルト値を持っている場合には、(データの損失を除いて、もちろん不可逆的ですが)可逆的に行われます。フィールドがnullableではなく、デフォルト値を持たない場合、操作は不可逆的です。</target>
        </trans-unit>
        <trans-unit id="042ea8e5fddce26815628fa17044ba5d24eb96ab" translate="yes" xml:space="preserve">
          <source>Because 404 errors are by far the most common HTTP error, there&amp;rsquo;s an easier way to handle those errors.</source>
          <target state="translated">404エラーは最も一般的なHTTPエラーであるため、これらのエラーを処理する簡単な方法があります。</target>
        </trans-unit>
        <trans-unit id="d5c2d2c9e70508835a73ca5b22f9ada7d96afd08" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; attributes and reverse relations can have multiple related rows, including these can have a multiplier effect on the size of your result set. This will be especially pronounced if you include multiple such fields in your &lt;code&gt;values()&lt;/code&gt; query, in which case all possible combinations will be returned.</source>
          <target state="translated">そのため&lt;a href=&quot;fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;属性と逆の関係が、これらは結果セットのサイズに乗数効果を持つことができるなど、複数の関連する行を持つことができます。 &lt;code&gt;values()&lt;/code&gt; クエリにそのようなフィールドを複数含めると、これは特に顕著になります。その場合、考えられるすべての組み合わせが返されます。</target>
        </trans-unit>
        <trans-unit id="d592166bd1deeeac277c740bfdfad7f1cfc9799b" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;get_queryset()&lt;/code&gt; returns a &lt;code&gt;QuerySet&lt;/code&gt; object, you can use &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;exclude()&lt;/code&gt; and all the other &lt;code&gt;QuerySet&lt;/code&gt; methods on it. So these statements are all legal:</source>
          <target state="translated">ので &lt;code&gt;get_queryset()&lt;/code&gt; を返す &lt;code&gt;QuerySet&lt;/code&gt; オブジェクトを、あなたが使用することができます &lt;code&gt;filter()&lt;/code&gt; 、 &lt;code&gt;exclude()&lt;/code&gt; および他のすべての &lt;code&gt;QuerySet&lt;/code&gt; それのメソッド。したがって、これらのステートメントはすべて合法です。</target>
        </trans-unit>
        <trans-unit id="732623fe54e2e13e287f4b043b432d7f9c00f9ec" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;order_with_respect_to&lt;/code&gt; adds a new database column, be sure to make and apply the appropriate migrations if you add or change &lt;code&gt;order_with_respect_to&lt;/code&gt; after your initial &lt;a href=&quot;../django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;order_with_respect_to&lt;/code&gt; は新しいデータベース列を追加するため、最初の&lt;a href=&quot;../django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;後に &lt;code&gt;order_with_respect_to&lt;/code&gt; を追加または変更する場合は、適切な移行を行って適用してください。</target>
        </trans-unit>
        <trans-unit id="b3f6262139a989927fabc6f1997f91059c06e8ee" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;{% regroup %}&lt;/code&gt; produces &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.namedtuple&quot;&gt;&lt;code&gt;namedtuple()&lt;/code&gt;&lt;/a&gt; objects, you can also write the previous example as:</source>
          <target state="translated">ので、 &lt;code&gt;{% regroup %}&lt;/code&gt; 生成&lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.namedtuple&quot;&gt; &lt;code&gt;namedtuple()&lt;/code&gt; &lt;/a&gt;：オブジェクトを、あなたはまた、前述の例を書くことができ</target>
        </trans-unit>
        <trans-unit id="f3c27e564d0e5f570e887ae09cb356cf5b1a7d16" translate="yes" xml:space="preserve">
          <source>Because Django intentionally limits the amount of logic processing available in the template language, it is not possible to pass arguments to method calls accessed from within templates. Data should be calculated in views, then passed to templates for display.</source>
          <target state="translated">Django は意図的にテンプレート言語で利用できるロジック処理の量を制限しているため、テンプレート内からアクセスするメソッド呼び出しに引数を渡すことはできません。データはビューで計算してからテンプレートに渡して表示させるべきです。</target>
        </trans-unit>
        <trans-unit id="fc9cbe0ffd1fa8524ae9029257a68071ccaddc76" translate="yes" xml:space="preserve">
          <source>Because Django was developed in a fast-paced newsroom environment, it was designed to make common Web-development tasks fast and easy. Here&amp;rsquo;s an informal overview of how to write a database-driven Web app with Django.</source>
          <target state="translated">Djangoはテンポの速いニュースルーム環境で開発されたため、一般的なWeb開発タスクをすばやく簡単に行えるように設計されています。Djangoでデータベース駆動型のWebアプリを作成する方法の非公式な概要を以下に示します。</target>
        </trans-unit>
        <trans-unit id="7073f6e15877a9af2f4c64844b792af6a94b35a7" translate="yes" xml:space="preserve">
          <source>Because Django&amp;rsquo;s URL resolver expects to send the request and associated arguments to a callable function, not a class, class-based views have an &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; class method which returns a function that can be called when a request arrives for a URL matching the associated pattern. The function creates an instance of the class, calls &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.setup&quot;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt; to initialize its attributes, and then calls its &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; method. &lt;code&gt;dispatch&lt;/code&gt; looks at the request to determine whether it is a &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, etc, and relays the request to a matching method if one is defined, or raises &lt;a href=&quot;../../ref/request-response#django.http.HttpResponseNotAllowed&quot;&gt;&lt;code&gt;HttpResponseNotAllowed&lt;/code&gt;&lt;/a&gt; if not:</source>
          <target state="translated">DjangoのURLリゾルバーは、リクエストと関連する引数をクラスではなく呼び出し可能な関数に送信することを期待しているため、クラスベースのビューには、関連するURLにリクエストが到着したときに呼び出すことができる関数を返す&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt; &lt;code&gt;as_view()&lt;/code&gt; &lt;/a&gt;クラスメソッドがありますパターン。この関数は、クラスのインスタンスを作成し、&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.setup&quot;&gt; &lt;code&gt;setup()&lt;/code&gt; &lt;/a&gt;を呼び出してその属性を初期化してから、その&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.dispatch&quot;&gt; &lt;code&gt;dispatch()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出します。 &lt;code&gt;dispatch&lt;/code&gt; はリクエストを調べて、それが &lt;code&gt;GET&lt;/code&gt; 、 &lt;code&gt;POST&lt;/code&gt; などであるかどうかを判断し、一致するメソッドが定義されている場合はそのメソッドにリクエストをリレーし、そうでない場合は&lt;a href=&quot;../../ref/request-response#django.http.HttpResponseNotAllowed&quot;&gt; &lt;code&gt;HttpResponseNotAllowed&lt;/code&gt; を&lt;/a&gt;発生させます。</target>
        </trans-unit>
        <trans-unit id="d4114dc9d50278d2b36039acfff453d545e54801" translate="yes" xml:space="preserve">
          <source>Because GeoDjango has its own Python interface, the preceding instructions do not build GDAL&amp;rsquo;s own Python bindings. The bindings may be built by adding the &lt;code&gt;--with-python&lt;/code&gt; flag when running &lt;code&gt;configure&lt;/code&gt;. See &lt;a href=&quot;https://trac.osgeo.org/gdal/wiki/GdalOgrInPython&quot;&gt;GDAL/OGR In Python&lt;/a&gt; for more information on GDAL&amp;rsquo;s bindings.</source>
          <target state="translated">GeoDjangoには独自のPythonインターフェースがあるため、前述の手順ではGDAL自体のPythonバインディングを構築しません。バインディングは、 &lt;code&gt;--with-python&lt;/code&gt; 実行時に--with-pythonフラグを追加することで構築 &lt;code&gt;configure&lt;/code&gt; 。GDALのバインディングの詳細については、&lt;a href=&quot;https://trac.osgeo.org/gdal/wiki/GdalOgrInPython&quot;&gt;PythonのGDAL / OGRを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="eec5abbbc5a08b4bc4c34df5374fe6e6dfcdca67" translate="yes" xml:space="preserve">
          <source>Because GeoDjango is included with Django, please refer to Django&amp;rsquo;s &lt;a href=&quot;../../../../topics/install#installing-official-release&quot;&gt;installation instructions&lt;/a&gt; for details on how to install.</source>
          <target state="translated">GeoDjangoはDjangoに含まれているため、&lt;a href=&quot;../../../../topics/install#installing-official-release&quot;&gt;インストール方法&lt;/a&gt;の詳細については、Djangoのインストール手順を参照してください。</target>
        </trans-unit>
        <trans-unit id="6dbdfdb0d36449d54e4c454f3616ebdb6e2b91d5" translate="yes" xml:space="preserve">
          <source>Because GeoDjango takes advantage of the latest in the open source geospatial software technology, recent versions of the libraries are necessary. If binary packages aren&amp;rsquo;t available for your platform, installation from source may be required. When compiling the libraries from source, please follow the directions closely, especially if you&amp;rsquo;re a beginner.</source>
          <target state="translated">GeoDjangoは最新のオープンソースの地理空間ソフトウェア技術を利用しているため、ライブラリの最新バージョンが必要です。ご使用のプラットフォームでバイナリパッケージを使用できない場合は、ソースからのインストールが必要になることがあります。ソースからライブラリをコンパイルするときは、特に初心者の場合は、指示に厳密に従ってください。</target>
        </trans-unit>
        <trans-unit id="ba346e04a85337ab290c6223a629db6764aa3818" translate="yes" xml:space="preserve">
          <source>Because a settings file contains sensitive information, such as the database password, you should make every attempt to limit access to it. For example, change its file permissions so that only you and your Web server&amp;rsquo;s user can read it. This is especially important in a shared-hosting environment.</source>
          <target state="translated">設定ファイルにはデータベースのパスワードなどの機密情報が含まれているため、アクセスを制限するためのあらゆる試みを行う必要があります。たとえば、自分とWebサーバーのユーザーだけがファイルを読み取れるように、ファイルのアクセス許可を変更します。これは、共有ホスティング環境では特に重要です。</target>
        </trans-unit>
        <trans-unit id="0191f795bb5a539693858d5221eca789bfb06b55" translate="yes" xml:space="preserve">
          <source>Because a settings file is a Python module, the following apply:</source>
          <target state="translated">設定ファイルはPythonモジュールなので、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="aa97793ffa48e7799626ae1a3b81b880bdd406f6" translate="yes" xml:space="preserve">
          <source>Because all strings are returned from the database as &lt;code&gt;str&lt;/code&gt; objects, model fields that are character based (CharField, TextField, URLField, etc.) will contain Unicode values when Django retrieves data from the database. This is &lt;em&gt;always&lt;/em&gt; the case, even if the data could fit into an ASCII bytestring.</source>
          <target state="translated">すべての文字列はデータベースから &lt;code&gt;str&lt;/code&gt; オブジェクトとして返されるため、Djangoがデータベースからデータを取得するとき、文字ベースのモデルフィールド（CharField、TextField、URLFieldなど）にはUnicode値が含まれます。データがASCIIバイト文字列に収まる場合&lt;em&gt;でも&lt;/em&gt;、これは&lt;em&gt;常に&lt;/em&gt;当てはまります。</target>
        </trans-unit>
        <trans-unit id="27968fb82192cc6e4d325a0225a156067b99db0c" translate="yes" xml:space="preserve">
          <source>Because an enumeration with a concrete data type requires all values to match the type, overriding the &lt;a href=&quot;#field-choices-blank-label&quot;&gt;blank label&lt;/a&gt; cannot be achieved by creating a member with a value of &lt;code&gt;None&lt;/code&gt;. Instead, set the &lt;code&gt;__empty__&lt;/code&gt; attribute on the class:</source>
          <target state="translated">具象データ型の列挙では、すべての値が型と一致する必要があるため、値 &lt;code&gt;None&lt;/code&gt; のメンバーを作成して&lt;a href=&quot;#field-choices-blank-label&quot;&gt;空白のラベルを&lt;/a&gt;上書きすることはできません。代わりに、クラスに &lt;code&gt;__empty__&lt;/code&gt; 属性を設定します。</target>
        </trans-unit>
        <trans-unit id="ebc3024b77f785efa1d4b0fbb10d4ee925ba8acb" translate="yes" xml:space="preserve">
          <source>Because auto-escaping is turned off in the base template, it will also be turned off in the child template, resulting in the following rendered HTML when the &lt;code&gt;greeting&lt;/code&gt; variable contains the string &lt;code&gt;&amp;lt;b&amp;gt;Hello!&amp;lt;/b&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">基本テンプレートでは自動エスケープがオフになっているため、子テンプレートでも自動エスケープがオフになり、結果として、 &lt;code&gt;greeting&lt;/code&gt; 変数にストリング &lt;code&gt;&amp;lt;b&amp;gt;Hello!&amp;lt;/b&amp;gt;&lt;/code&gt; が含まれていると、次のHTMLがレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="aa7b97b187e5272ee175067b7632a5cafe8eec2c" translate="yes" xml:space="preserve">
          <source>Because dictionary lookup happens first, that behavior kicks in and provides a default value instead of using the intended &lt;code&gt;.items()&lt;/code&gt; method. In this case, consider converting to a dictionary first.</source>
          <target state="translated">辞書のルックアップが最初に発生するため、意図した &lt;code&gt;.items()&lt;/code&gt; メソッドを使用する代わりに、その動作が開始され、デフォルト値が提供されます。この場合、最初に辞書に変換することを検討してください。</target>
        </trans-unit>
        <trans-unit id="da72b29a6853c54fa30cdfd4198cbc4c6dd11319" translate="yes" xml:space="preserve">
          <source>Because even seemingly-secure web server configurations are susceptible to fake &lt;code&gt;Host&lt;/code&gt; headers, Django validates &lt;code&gt;Host&lt;/code&gt; headers against the &lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt; setting in the &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.get_host&quot;&gt;&lt;code&gt;django.http.HttpRequest.get_host()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">安全なように見えるWebサーバー構成でも偽の &lt;code&gt;Host&lt;/code&gt; ヘッダーの影響を受けやすいため、Django は&lt;a href=&quot;../ref/request-response#django.http.HttpRequest.get_host&quot;&gt; &lt;code&gt;django.http.HttpRequest.get_host()&lt;/code&gt; &lt;/a&gt;メソッドの&lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt; &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; &lt;/a&gt;設定に対して &lt;code&gt;Host&lt;/code&gt; ヘッダーを検証します。</target>
        </trans-unit>
        <trans-unit id="b14c385e9c068c17518da9eb24b790c994df9ab7" translate="yes" xml:space="preserve">
          <source>Because geography calculations involve more mathematics, only a subset of the PostGIS spatial lookups are available for the geography type. Practically, this means that in addition to the &lt;a href=&quot;geoquerysets#distance-lookups&quot;&gt;distance lookups&lt;/a&gt; only the following additional &lt;a href=&quot;geoquerysets#spatial-lookups&quot;&gt;spatial lookups&lt;/a&gt; are available for geography columns:</source>
          <target state="translated">地理計算にはより多くの数学が含まれるため、地理タイプにはPostGIS空間ルックアップのサブセットしか使用できません。実際には、これは、&lt;a href=&quot;geoquerysets#distance-lookups&quot;&gt;距離ルックアップ&lt;/a&gt;に加えて、以下の追加の&lt;a href=&quot;geoquerysets#spatial-lookups&quot;&gt;空間ルック&lt;/a&gt;アップのみがgeography列で使用できることを意味します。</target>
        </trans-unit>
        <trans-unit id="595a309749b3a496f49826a3190012c59dc15e12" translate="yes" xml:space="preserve">
          <source>Because it is possible for the developer to turn off the &lt;code&gt;CsrfViewMiddleware&lt;/code&gt;, all relevant views in contrib apps use the &lt;code&gt;csrf_protect&lt;/code&gt; decorator to ensure the security of these applications against CSRF. It is recommended that the developers of other reusable apps that want the same guarantees also use the &lt;code&gt;csrf_protect&lt;/code&gt; decorator on their views.</source>
          <target state="translated">開発者は &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; をオフにすることができるため、contribアプリのすべての関連ビューは &lt;code&gt;csrf_protect&lt;/code&gt; デコレーターを使用して、これらのアプリケーションのCSRFに対するセキュリティを確保します。同じ保証が必要な他の再利用可能なアプリの開発者も、ビューで &lt;code&gt;csrf_protect&lt;/code&gt; デコレーターを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="cbaffa73d9aa8e66279a76ef371ab49ef8c024dd" translate="yes" xml:space="preserve">
          <source>Because it&amp;rsquo;s convenient, let&amp;rsquo;s use Django&amp;rsquo;s own database API, which we covered in &lt;a href=&quot;tutorial02&quot;&gt;Tutorial 2&lt;/a&gt;. Here&amp;rsquo;s one stab at a new &lt;code&gt;index()&lt;/code&gt; view, which displays the latest 5 poll questions in the system, separated by commas, according to publication date:</source>
          <target state="translated">便利なので、&lt;a href=&quot;tutorial02&quot;&gt;チュートリアル2で説明した&lt;/a&gt; Django独自のデータベースAPIを使用してみましょう。以下は、新しい &lt;code&gt;index()&lt;/code&gt; ビューの1つのスタブです。これは、システム内の最新の5つの投票質問を、公開日に従ってコンマで区切って表示します。</target>
        </trans-unit>
        <trans-unit id="db170df6f33cedcfecf70802e14df5bcdf21d2f3" translate="yes" xml:space="preserve">
          <source>Because it&amp;rsquo;s impossible to serialize arbitrary Python code, these historical models will not have any custom methods that you have defined. They will, however, have the same fields, relationships, managers (limited to those with &lt;code&gt;use_in_migrations = True&lt;/code&gt;) and &lt;code&gt;Meta&lt;/code&gt; options (also versioned, so they may be different from your current ones).</source>
          <target state="translated">任意のPythonコードをシリアル化することは不可能であるため、これらの履歴モデルには、定義したカスタムメソッドはありません。ただし、フィールド、リレーションシップ、マネージャー（ &lt;code&gt;use_in_migrations = True&lt;/code&gt; オプションに限定）、 &lt;code&gt;Meta&lt;/code&gt; オプション（バージョンも付けられているため、現在のオプションとは異なる場合があります）は同じです。</target>
        </trans-unit>
        <trans-unit id="a576b7b74156d956bbdf99772743cf4d2872e210" translate="yes" xml:space="preserve">
          <source>Because migrations are stored in version control, you&amp;rsquo;ll occasionally come across situations where you and another developer have both committed a migration to the same app at the same time, resulting in two migrations with the same number.</source>
          <target state="translated">移行はバージョン管理に保存されるため、あなたと他の開発者の両方が同じアプリへの移行を同時にコミットした結果、同じ番号の2つの移行が発生する場合があります。</target>
        </trans-unit>
        <trans-unit id="ecf48349c2e18001cd26b4d210fff49794438a69" translate="yes" xml:space="preserve">
          <source>Because multi-table inheritance uses an implicit &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt; to link the child and the parent, it&amp;rsquo;s possible to move from the parent down to the child, as in the above example. However, this uses up the name that is the default &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; value for &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; relations. If you are putting those types of relations on a subclass of the parent model, you &lt;strong&gt;must&lt;/strong&gt; specify the &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; attribute on each such field. If you forget, Django will raise a validation error.</source>
          <target state="translated">マルチテーブルの継承では暗黙的な&lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt;を使用して子と親をリンクするため、上記の例のように、親から子に移動することができます。ただし、これは、&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;リレーションのデフォルトの&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt;値である名前を使い果たします。これらのタイプの関係を親モデルのサブクラスに配置する場合&lt;strong&gt;は&lt;/strong&gt;、そのような各フィールドに&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt;属性を指定する&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。忘れた場合、Djangoは検証エラーを発生させます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="07db482e681450eaf30c5a9a75feed11bd8fc0ec" translate="yes" xml:space="preserve">
          <source>Because of how &lt;code&gt;xgettext&lt;/code&gt; (used by &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;makemessages&lt;/code&gt;&lt;/a&gt;) works, only functions that take a single string argument can be imported as &lt;code&gt;_&lt;/code&gt;:</source>
          <target state="translated">そのための方法 &lt;code&gt;xgettext&lt;/code&gt; （で使用&lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;makemessages&lt;/code&gt; の節&lt;/a&gt;）単一の文字列引数は次のようにインポートすることができ取り、関数のみ動作します &lt;code&gt;_&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="08b376685af40f9d58e48e32fc32aee5deed6a38" translate="yes" xml:space="preserve">
          <source>Because of the modular design of the admin templates, it is usually neither necessary nor advisable to replace an entire template. It is almost always better to override only the section of the template which you need to change.</source>
          <target state="translated">管理者テンプレートのモジュラーデザインのため、通常はテンプレート全体を置き換える必要はありませんし、お勧めでもありません。ほとんどの場合、変更する必要のあるテンプレートのセクションだけをオーバーライドする方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="713b60fca0bbcd7b6e58185e3d1bda5280526dde" translate="yes" xml:space="preserve">
          <source>Because of the nature of JSON (there is no native distinction between lists and tuples) if you pass in a tuple, you will get a list from &lt;code&gt;signing.loads(object)&lt;/code&gt;:</source>
          <target state="translated">JSONの性質上（リストとタプルの間にはネイティブの区別はありません）、タプルを渡すと、 &lt;code&gt;signing.loads(object)&lt;/code&gt; からリストを取得します。</target>
        </trans-unit>
        <trans-unit id="bba94ca23cad5e9236d4fe8e0f33ecc7d7ba1816" translate="yes" xml:space="preserve">
          <source>Because of the variety of packaging systems available for macOS, users have several different options for installing GeoDjango. These options are:</source>
          <target state="translated">macOS には様々なパッケージングシステムがあるため、ユーザーは GeoDjango をインストールするためにいくつかの異なるオプションを用意しています。これらのオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="4b50530b574b77078f31f6b85ffe2cb4b3381b5f" translate="yes" xml:space="preserve">
          <source>Because of the way that Python resolves method overloading, the call to &lt;code&gt;super().render_to_response(context)&lt;/code&gt; ends up calling the &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt;&lt;code&gt;render_to_response()&lt;/code&gt;&lt;/a&gt; implementation of &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt;&lt;code&gt;TemplateResponseMixin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Pythonがメソッドのオーバーロードを解決する方法のため、 &lt;code&gt;super().render_to_response(context)&lt;/code&gt; 呼び出しは、&lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt; &lt;code&gt;render_to_response()&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt; &lt;code&gt;TemplateResponseMixin&lt;/code&gt; の&lt;/a&gt;render_to_response（）実装を呼び出します。</target>
        </trans-unit>
        <trans-unit id="2f7e10f96940de25853d507df6c9e0fad8db0d5e" translate="yes" xml:space="preserve">
          <source>Because of the way the &lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#descriptor-invocation&quot;&gt;descriptor protocol&lt;/a&gt; works, using &lt;code&gt;del&lt;/code&gt; (or &lt;code&gt;delattr&lt;/code&gt;) on a &lt;code&gt;cached_property&lt;/code&gt; that hasn&amp;rsquo;t been accessed raises &lt;code&gt;AttributeError&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#descriptor-invocation&quot;&gt;記述子プロトコルが&lt;/a&gt;機能する方法のため、アクセスされていない &lt;code&gt;cached_property&lt;/code&gt; で &lt;code&gt;del&lt;/code&gt; （または &lt;code&gt;delattr&lt;/code&gt; ）を使用すると、 &lt;code&gt;AttributeError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="a4edf1c60b9c9146737fc713b35918c556d71ae4" translate="yes" xml:space="preserve">
          <source>Because of this, &lt;code&gt;staticfiles&lt;/code&gt; ships its own &lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.testing.StaticLiveServerTestCase&quot;&gt;&lt;code&gt;django.contrib.staticfiles.testing.StaticLiveServerTestCase&lt;/code&gt;&lt;/a&gt;, a subclass of the built-in one that has the ability to transparently serve all the assets during execution of these tests in a way very similar to what we get at development time with &lt;code&gt;DEBUG = True&lt;/code&gt;, i.e. without having to collect them using &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; first.</source>
          <target state="translated">このため、 &lt;code&gt;staticfiles&lt;/code&gt; の船独自の&lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.testing.StaticLiveServerTestCase&quot;&gt; &lt;code&gt;django.contrib.staticfiles.testing.StaticLiveServerTestCase&lt;/code&gt; &lt;/a&gt;、内蔵のトランスペアレント私たち取得するために非常によく似た方法で、これらのテストの実行中にすべての資産を提供する能力を持って1のサブクラス開発時に &lt;code&gt;DEBUG = True&lt;/code&gt; を使用&lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt;ます。つまり、最初にcollectstaticを使用して収集する必要はありません。</target>
        </trans-unit>
        <trans-unit id="25ea53ad057f59936b93761f6edb3a935113ee48" translate="yes" xml:space="preserve">
          <source>Because some string operations come up again and again, Django ships with a few useful functions that should make working with string and bytestring objects a bit easier.</source>
          <target state="translated">いくつかの文字列操作は何度も出てくるので、Django にはいくつかの便利な関数が同梱されており、文字列やバイト文字列オブジェクトを扱うのが少し楽になるはずです。</target>
        </trans-unit>
        <trans-unit id="506105669e8434900f8152c16f863fa603dac585" translate="yes" xml:space="preserve">
          <source>Because that would couple the model layer to the view layer. One of the foremost design goals of Django is to maintain loose coupling. Some controlled coupling is introduced in the &lt;a href=&quot;../topics/http/shortcuts#module-django.shortcuts&quot;&gt;&lt;code&gt;django.shortcuts&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">モデルレイヤーをビューレイヤーに結合するからです。Djangoの最も重要な設計目標の1つは、疎結合を維持することです。いくつかの制御されたカップリングが&lt;a href=&quot;../topics/http/shortcuts#module-django.shortcuts&quot;&gt; &lt;code&gt;django.shortcuts&lt;/code&gt; &lt;/a&gt;モジュールで導入されました。</target>
        </trans-unit>
        <trans-unit id="cb2c9a0cdf89cda842c176d6dfe984045f57cf93" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt; is applied only after URL resolution has failed and produced a 404, the response it returns will not apply any &lt;a href=&quot;../../topics/http/middleware#view-middleware&quot;&gt;view middleware&lt;/a&gt; methods. Only requests which are successfully routed to a view via normal URL resolution apply view middleware.</source>
          <target state="translated">&lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt; は、URL解決が失敗して404が生成された後にのみ適用されるため、返される応答には&lt;a href=&quot;../../topics/http/middleware#view-middleware&quot;&gt;ビューミドルウェア&lt;/a&gt;メソッドは適用されません。通常のURL解決を介して正常にビューにルーティングされたリクエストのみがビューミドルウェアを適用します。</target>
        </trans-unit>
        <trans-unit id="28be2cf935e455cb809f1b408c0f959b8443b8cb" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;distance&lt;/code&gt; attribute is a &lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; object, you can easily express the value in the units of your choice. For example, &lt;code&gt;city.distance.mi&lt;/code&gt; is the distance value in miles and &lt;code&gt;city.distance.km&lt;/code&gt; is the distance value in kilometers. See &lt;a href=&quot;measure&quot;&gt;Measurement Objects&lt;/a&gt; for usage details and the list of &lt;a href=&quot;measure#supported-units&quot;&gt;Supported units&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;distance&lt;/code&gt; 属性は&lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt; &lt;code&gt;Distance&lt;/code&gt; &lt;/a&gt;オブジェクトなので、選択した単位で値を簡単に表現できます。たとえば、 &lt;code&gt;city.distance.mi&lt;/code&gt; はマイル単位の距離値で、 &lt;code&gt;city.distance.km&lt;/code&gt; はキロメートル単位の距離値です。使用法の詳細と&lt;a href=&quot;measure#supported-units&quot;&gt;サポートされる単位の&lt;/a&gt;リストについては、&lt;a href=&quot;measure&quot;&gt;測定オブジェクト&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e5b3e63b0f71b204654b3d2115213f5de20d372b" translate="yes" xml:space="preserve">
          <source>Because values are converted to Python before validators are run, you can even use the same validator with forms:</source>
          <target state="translated">バリデータを実行する前に値をPythonに変換するので、フォームでも同じバリデータを使うことができます。</target>
        </trans-unit>
        <trans-unit id="00e9ab899d3bca12dd35ac7aa67ab15be3a15c95" translate="yes" xml:space="preserve">
          <source>Because varying on cookie is so common, there&amp;rsquo;s a &lt;a href=&quot;http/decorators#django.views.decorators.vary.vary_on_cookie&quot;&gt;&lt;code&gt;django.views.decorators.vary.vary_on_cookie()&lt;/code&gt;&lt;/a&gt; decorator. These two views are equivalent:</source>
          <target state="translated">Cookieの&lt;a href=&quot;http/decorators#django.views.decorators.vary.vary_on_cookie&quot;&gt; &lt;code&gt;django.views.decorators.vary.vary_on_cookie()&lt;/code&gt; &lt;/a&gt;が非常に一般的であるため、django.views.decorators.vary.vary_on_cookie（）デコレーターがあります。これら2つのビューは同等です。</target>
        </trans-unit>
        <trans-unit id="af28755edcf5980a22b136cdea6613753af2c890" translate="yes" xml:space="preserve">
          <source>Before &lt;a href=&quot;#django.contrib.auth.middleware.RemoteUserMiddleware&quot;&gt;&lt;code&gt;RemoteUserMiddleware&lt;/code&gt;&lt;/a&gt;, or any other authentication middleware that may perform a login, and hence rotate the CSRF token, before calling down the middleware chain.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.middleware.RemoteUserMiddleware&quot;&gt; &lt;code&gt;RemoteUserMiddleware&lt;/code&gt; の&lt;/a&gt;前、またはログインを実行し、ミドルウェアチェーンを呼び出す前にCSRFトークンをローテーションする可能性があるその他の認証ミドルウェア。</target>
        </trans-unit>
        <trans-unit id="30a79da2b8b5a03591499e3e59e4ae9b57b131b8" translate="yes" xml:space="preserve">
          <source>Before MySQL 5.6.1, spatial extensions only support bounding box operations (what MySQL calls minimum bounding rectangles, or MBR). Specifically, MySQL did not conform to the OGC standard. Django supports spatial functions operating on real geometries available in modern MySQL versions. However, the spatial functions are not as rich as other backends like PostGIS.</source>
          <target state="translated">MySQL 5.6.1以前の空間拡張機能は、バウンディングボックス操作(MySQLでは最小バウンディング矩形(MBR)と呼んでいます)のみをサポートしていました。具体的には、MySQL は OGC 標準に準拠していませんでした。Django は、最新の MySQL バージョンで利用可能な実際の幾何学上で動作する空間関数をサポートしています。しかし、空間関数は PostGIS のような他のバックエンドほど豊富ではありません。</target>
        </trans-unit>
        <trans-unit id="e747f4b68ab596bd8ab1b7359d47a91efe16e3f6" translate="yes" xml:space="preserve">
          <source>Before a &lt;a href=&quot;#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; instance can be returned to the client, it must be rendered. The rendering process takes the intermediate representation of template and context, and turns it into the final byte stream that can be served to the client.</source>
          <target state="translated">&lt;a href=&quot;#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt;インスタンスをクライアントに返す前に、それをレンダリングする必要があります。レンダリングプロセスは、テンプレートとコンテキストの中間表現を取得し、クライアントに提供できる最終的なバイトストリームに変換します。</target>
        </trans-unit>
        <trans-unit id="39a8ed35440f50154028026a9bd0d7bdf0ccc46f" translate="yes" xml:space="preserve">
          <source>Before any middleware that may change or use the response body.</source>
          <target state="translated">レスポンスボディを変更したり、使用したりする可能性のあるミドルウェアの前に。</target>
        </trans-unit>
        <trans-unit id="2b8caca6ca0dc3464c58f73d8b04f82a19d5e4a8" translate="yes" xml:space="preserve">
          <source>Before any middleware that may change the response (it sets the &lt;code&gt;Content-Length&lt;/code&gt; header). A middleware that appears before &lt;code&gt;CommonMiddleware&lt;/code&gt; and changes the response must reset &lt;code&gt;Content-Length&lt;/code&gt;.</source>
          <target state="translated">応答を変更する可能性のあるミドルウェアの前（ &lt;code&gt;Content-Length&lt;/code&gt; ヘッダーを設定）。 &lt;code&gt;CommonMiddleware&lt;/code&gt; の前に表示され、応答を変更するミドルウェアは、 &lt;code&gt;Content-Length&lt;/code&gt; をリセットする必要があります。</target>
        </trans-unit>
        <trans-unit id="335b3daca29ecf4cc845518aaab15798bfbefa79" translate="yes" xml:space="preserve">
          <source>Before any middleware that may change the response (it sets the &lt;code&gt;ETag&lt;/code&gt; header).</source>
          <target state="translated">応答を変更する可能性のあるミドルウェアの前（ &lt;code&gt;ETag&lt;/code&gt; ヘッダーを設定します）。</target>
        </trans-unit>
        <trans-unit id="ddc0fe43c53abb991ec3aef5669c18586af6055c" translate="yes" xml:space="preserve">
          <source>Before any middleware that may raise an an exception to trigger an error view (such as &lt;a href=&quot;exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt;) if you&amp;rsquo;re using &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt;&lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt; &lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt; &lt;/a&gt;を使用している場合、例外を発生させてエラービュー（&lt;a href=&quot;exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; &lt;/a&gt;など）をトリガーする可能性のあるミドルウェアの前。</target>
        </trans-unit>
        <trans-unit id="7b74f7147071597a78ab4aeb9e480f9503dbf00e" translate="yes" xml:space="preserve">
          <source>Before any middleware that may raise an exception to trigger an error view (such as &lt;a href=&quot;exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt;) if you&amp;rsquo;re using &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt;&lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt; &lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt; &lt;/a&gt;を使用している場合に、エラービュー（&lt;a href=&quot;exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; &lt;/a&gt;など）をトリガーする例外を発生させる可能性のあるミドルウェアの前。</target>
        </trans-unit>
        <trans-unit id="83e652eda1f9c39025a7134ac1e5f7d6f6ca91de" translate="yes" xml:space="preserve">
          <source>Before any view middleware that assumes that CSRF attacks have been dealt with.</source>
          <target state="translated">CSRF攻撃に対処したことを前提としたビューミドルウェアの前に</target>
        </trans-unit>
        <trans-unit id="3bb8531e29d8b0d7e4de297fcbd58b12c5e7175c" translate="yes" xml:space="preserve">
          <source>Before making any changes, create a new branch for the ticket:</source>
          <target state="translated">変更を行う前に、チケットの新しいブランチを作成してください。</target>
        </trans-unit>
        <trans-unit id="87c61853de29443906cf113351b191d8c3eceae6" translate="yes" xml:space="preserve">
          <source>Before running the test suite, install its dependencies by &lt;code&gt;cd&lt;/code&gt;-ing into the Django &lt;code&gt;tests/&lt;/code&gt; directory and then running:</source>
          <target state="translated">テストスイートを実行する前に、Djangoの &lt;code&gt;tests/&lt;/code&gt; ディレクトリに &lt;code&gt;cd&lt;/code&gt; -ingして依存関係をインストールし、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="46ff700820e6c9290efec4b221a3887fe7db92ef" translate="yes" xml:space="preserve">
          <source>Before the &lt;a href=&quot;https://www.ecma-international.org/ecma-262/5.1/index.html#sec-11.1.4&quot;&gt;5th edition of ECMAScript&lt;/a&gt; it was possible to poison the JavaScript &lt;code&gt;Array&lt;/code&gt; constructor. For this reason, Django does not allow passing non-dict objects to the &lt;a href=&quot;#django.http.JsonResponse&quot;&gt;&lt;code&gt;JsonResponse&lt;/code&gt;&lt;/a&gt; constructor by default. However, most modern browsers implement EcmaScript 5 which removes this attack vector. Therefore it is possible to disable this security precaution.</source>
          <target state="translated">&lt;a href=&quot;https://www.ecma-international.org/ecma-262/5.1/index.html#sec-11.1.4&quot;&gt;ECMAScript&lt;/a&gt;の第5版より前は、JavaScript &lt;code&gt;Array&lt;/code&gt; コンストラクターを汚染することが可能でした。このため、Djangoはデフォルトでdict以外のオブジェクトを&lt;a href=&quot;#django.http.JsonResponse&quot;&gt; &lt;code&gt;JsonResponse&lt;/code&gt; &lt;/a&gt;コンストラクターに渡すことを許可していません。ただし、最新のブラウザのほとんどは、この攻撃ベクトルを排除するEcmaScript 5を実装しています。したがって、このセキュリティ対策を無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="3482fc661487a504b5ead4f883ceae1521f0e887" translate="yes" xml:space="preserve">
          <source>Before those that modify the &lt;code&gt;Vary&lt;/code&gt; header (&lt;code&gt;SessionMiddleware&lt;/code&gt;, &lt;code&gt;GZipMiddleware&lt;/code&gt;, &lt;code&gt;LocaleMiddleware&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Vary&lt;/code&gt; ヘッダーを変更する前（ &lt;code&gt;SessionMiddleware&lt;/code&gt; 、 &lt;code&gt;GZipMiddleware&lt;/code&gt; 、 &lt;code&gt;LocaleMiddleware&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c312fbdec5708b04fa2e14447f26928bb7d1ca25" translate="yes" xml:space="preserve">
          <source>Before upgrading, it&amp;rsquo;s a good idea to resolve any deprecation warnings raised by your project while using your current version of Django. Fixing these warnings before upgrading ensures that you&amp;rsquo;re informed about areas of the code that need altering.</source>
          <target state="translated">アップグレードする前に、現在のバージョンのDjangoを使用しているときにプロジェクトによって発生した非推奨の警告を解決することをお勧めします。アップグレードの前にこれらの警告を修正すると、変更が必要なコードの領域について確実に通知されます。</target>
        </trans-unit>
        <trans-unit id="b150695e7cea893935dbf9808598af414c22465e" translate="yes" xml:space="preserve">
          <source>Before using raw SQL, explore &lt;a href=&quot;index&quot;&gt;the ORM&lt;/a&gt;. Ask on &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/mailing-lists/#django-users-mailing-list&quot;&gt;django-users&lt;/a&gt; or the &lt;a href=&quot;irc://irc.freenode.net/django&quot;&gt;#django IRC channel&lt;/a&gt; to see if the ORM supports your use case.</source>
          <target state="translated">生のSQLを使用する前に&lt;a href=&quot;index&quot;&gt;、ORMを&lt;/a&gt;調べてください。掲載し&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/mailing-lists/#django-users-mailing-list&quot;&gt;ジャンゴ・ユーザー&lt;/a&gt;または&lt;a href=&quot;irc://irc.freenode.net/django&quot;&gt;#djangoのIRCチャンネル&lt;/a&gt; ORMはあなたのユースケースをサポートしているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="10b0118703b6a2c0d78d5018c0196cd5c4017486" translate="yes" xml:space="preserve">
          <source>Before using raw SQL, explore &lt;a href=&quot;index&quot;&gt;the ORM&lt;/a&gt;. Ask on &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/mailing-lists/#django-users-mailing-list&quot;&gt;django-users&lt;/a&gt; or the &lt;a href=&quot;https://webchat.freenode.net/#django&quot;&gt;#django IRC channel&lt;/a&gt; to see if the ORM supports your use case.</source>
          <target state="translated">生のSQLを使用する前に&lt;a href=&quot;index&quot;&gt;、ORMを&lt;/a&gt;調べてください。掲載し&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/internals/mailing-lists/#django-users-mailing-list&quot;&gt;ジャンゴ・ユーザー&lt;/a&gt;または&lt;a href=&quot;https://webchat.freenode.net/#django&quot;&gt;#djangoのIRCチャンネル&lt;/a&gt;ORMはあなたのユースケースをサポートしているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="cf36f7df8cb66d43c619f2dbc972675dbd7510b7" translate="yes" xml:space="preserve">
          <source>Before using the database cache, you must create the cache table with this command:</source>
          <target state="translated">データベースキャッシュを使用する前に、このコマンドでキャッシュテーブルを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="35936ffe9025a0f37c58cf19bdffd8c3833f7b58" translate="yes" xml:space="preserve">
          <source>Before we try to fix anything, let&amp;rsquo;s have a look at the tools at our disposal.</source>
          <target state="translated">何かを修正しようとする前に、自由に使えるツールを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="96e4edc0e1a30c2aee339e20d6a65cd6e9caa561" translate="yes" xml:space="preserve">
          <source>Before you can use Django, you&amp;rsquo;ll need to get it installed. We have a &lt;a href=&quot;../topics/install&quot;&gt;complete installation guide&lt;/a&gt; that covers all the possibilities; this guide will guide you to a minimal installation that&amp;rsquo;ll work while you walk through the introduction.</source>
          <target state="translated">Djangoを使用する前に、Djangoをインストールする必要があります。すべての可能性をカバーする&lt;a href=&quot;../topics/install&quot;&gt;完全なインストールガイド&lt;/a&gt;があります。このガイドでは、概要を説明しながら機能する最小限のインストールについて説明します。</target>
        </trans-unit>
        <trans-unit id="3319c838b49b9a8ad0454acd5932ea7e7a286b87" translate="yes" xml:space="preserve">
          <source>Before you get too into writing patches for Django, there&amp;rsquo;s a little more information on contributing that you should probably take a look at:</source>
          <target state="translated">Djangoのパッチを書き始める前に、コントリビューションについてもう少し情報があります。</target>
        </trans-unit>
        <trans-unit id="5116dedc7de53fc4f4989aaba0cf94dc321d797e" translate="yes" xml:space="preserve">
          <source>Before you save uploaded files, the data needs to be stored somewhere.</source>
          <target state="translated">アップロードされたファイルを保存する前に、データをどこかに保存する必要があります。</target>
        </trans-unit>
        <trans-unit id="17aef405ad4670f8dce2fd1c4684c6d92449e710" translate="yes" xml:space="preserve">
          <source>Behaves like the standard Python &lt;code&gt;file.close()&lt;/code&gt; method and closes the file associated with this instance.</source>
          <target state="translated">標準のPython &lt;code&gt;file.close()&lt;/code&gt; メソッドのように動作し、このインスタンスに関連付けられているファイルを閉じます。</target>
        </trans-unit>
        <trans-unit id="058c0a12a9e6a73336cf169899bbd67b58a2696e" translate="yes" xml:space="preserve">
          <source>Behaves the same way as &lt;a href=&quot;#django.db.models.Lookup.process_lhs&quot;&gt;&lt;code&gt;process_lhs()&lt;/code&gt;&lt;/a&gt;, for the right-hand side.</source>
          <target state="translated">右側については、&lt;a href=&quot;#django.db.models.Lookup.process_lhs&quot;&gt; &lt;code&gt;process_lhs()&lt;/code&gt; &lt;/a&gt;と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="bb28c8b66f1ee877886160ca0f703455045690d5" translate="yes" xml:space="preserve">
          <source>Behavior of contrib apps</source>
          <target state="translated">contribアプリの挙動</target>
        </trans-unit>
        <trans-unit id="60b5147242d1edb8f92a770b1ec638025b54631a" translate="yes" xml:space="preserve">
          <source>Behavior of parallel requests</source>
          <target state="translated">並列リクエストの挙動</target>
        </trans-unit>
        <trans-unit id="1334bd3587d4348b9da90cad653f4e01715be733" translate="yes" xml:space="preserve">
          <source>Behavior of unbound forms</source>
          <target state="translated">束縛されていない形態の挙動</target>
        </trans-unit>
        <trans-unit id="5bbe3ddff5d188e8a248228bc2152ed147d1b379" translate="yes" xml:space="preserve">
          <source>Behind the scenes</source>
          <target state="translated">舞台裏</target>
        </trans-unit>
        <trans-unit id="2e0fdab6cf6d41997c57faa8163f6751db7574ee" translate="yes" xml:space="preserve">
          <source>Behind the scenes, Django appends &lt;code&gt;&quot;_id&quot;&lt;/code&gt; to the field name to create its database column name. In the above example, the database table for the &lt;code&gt;Car&lt;/code&gt; model will have a &lt;code&gt;manufacturer_id&lt;/code&gt; column. (You can change this explicitly by specifying &lt;a href=&quot;#django.db.models.Field.db_column&quot;&gt;&lt;code&gt;db_column&lt;/code&gt;&lt;/a&gt;) However, your code should never have to deal with the database column name, unless you write custom SQL. You&amp;rsquo;ll always deal with the field names of your model object.</source>
          <target state="translated">Djangoは背後でフィールド名に &lt;code&gt;&quot;_id&quot;&lt;/code&gt; を追加して、データベースの列名を作成します。上記の例では、 &lt;code&gt;Car&lt;/code&gt; モデルのデータベーステーブルに &lt;code&gt;manufacturer_id&lt;/code&gt; 列があります。 （&lt;a href=&quot;#django.db.models.Field.db_column&quot;&gt; &lt;code&gt;db_column&lt;/code&gt; &lt;/a&gt;を指定することでこれを明示的に変更できます）ただし、カスタムSQLを作成しない限り、コードでデータベースの列名を処理する必要はありません。モデルオブジェクトのフィールド名は常に扱います。</target>
        </trans-unit>
        <trans-unit id="67735357870cd4968ee69d9e4658542d8718d889" translate="yes" xml:space="preserve">
          <source>Behind the scenes, Django creates an intermediary join table to represent the many-to-many relationship. By default, this table name is generated using the name of the many-to-many field and the name of the table for the model that contains it. Since some databases don&amp;rsquo;t support table names above a certain length, these table names will be automatically truncated and a uniqueness hash will be used, e.g. &lt;code&gt;author_books_9cdf&lt;/code&gt;. You can manually provide the name of the join table using the &lt;a href=&quot;#django.db.models.ManyToManyField.db_table&quot;&gt;&lt;code&gt;db_table&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">Djangoはバックグラウンドで、多対多の関係を表す中間結合テーブルを作成します。デフォルトでは、このテーブル名は多対多フィールドの名前とそれを含むモデルのテーブルの名前を使用して生成されます。一部のデータベースは特定の長さを超えるテーブル名をサポートしないため、これらのテーブル名は自動的に切り捨てられ、一意性ハッシュが使用されます（例： &lt;code&gt;author_books_9cdf&lt;/code&gt; )。&lt;a href=&quot;#django.db.models.ManyToManyField.db_table&quot;&gt; &lt;code&gt;db_table&lt;/code&gt; &lt;/a&gt;オプションを使用して、結合テーブルの名前を手動で指定できます。</target>
        </trans-unit>
        <trans-unit id="847ed7171a03f4ee94168580b2643b171022fd15" translate="yes" xml:space="preserve">
          <source>Behind the scenes, Django delegates decisions about how and where to store files to a file storage system. This is the object that actually understands things like file systems, opening and reading files, etc.</source>
          <target state="translated">裏では、Django はファイルをどこにどのように保存するかの決定をファイルストレージシステムに委ねています。これは、ファイルシステム、ファイルを開いたり読んだりすることなどを実際に理解しているオブジェクトです。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
