<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="583c83c1cdf33703c4ff871f465e82072c61716f" translate="yes" xml:space="preserve">
          <source>The form field to use.</source>
          <target state="translated">使用するフォームフィールドです。</target>
        </trans-unit>
        <trans-unit id="99b3e54d8c3f892d70c3092d0e22b4adc50df480" translate="yes" xml:space="preserve">
          <source>The form field&amp;rsquo;s &lt;code&gt;help_text&lt;/code&gt; is set to the &lt;code&gt;help_text&lt;/code&gt; of the model field.</source>
          <target state="translated">フォームフィールドの &lt;code&gt;help_text&lt;/code&gt; は、モデルフィールドの &lt;code&gt;help_text&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="3831999900df601e13b4cc2b4d2801cb5e7b6676" translate="yes" xml:space="preserve">
          <source>The form field&amp;rsquo;s &lt;code&gt;label&lt;/code&gt; is set to the &lt;code&gt;verbose_name&lt;/code&gt; of the model field, with the first character capitalized.</source>
          <target state="translated">フォームフィールドの &lt;code&gt;label&lt;/code&gt; は、モデルフィールドの &lt;code&gt;verbose_name&lt;/code&gt; に設定され、最初の文字が大文字になります。</target>
        </trans-unit>
        <trans-unit id="61e26b1e4a05cc19e5e8fffbd68fa4a669f5a318" translate="yes" xml:space="preserve">
          <source>The form is automatically generated from the &lt;code&gt;Question&lt;/code&gt; model.</source>
          <target state="translated">フォームは &lt;code&gt;Question&lt;/code&gt; モデルから自動的に生成されます。</target>
        </trans-unit>
        <trans-unit id="b0384cc268ee77b3dff51bad13c22bf1aa965a02" translate="yes" xml:space="preserve">
          <source>The form rendering API</source>
          <target state="translated">フォームレンダリングAPI</target>
        </trans-unit>
        <trans-unit id="f574edc6f8e7cec3302c146e9cbb412039ad54eb" translate="yes" xml:space="preserve">
          <source>The form rendering process can be customized at several levels:</source>
          <target state="translated">フォームレンダリングプロセスは、いくつかのレベルでカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="a672d2e53a1a3d13a6ab486384ed5366c7b44352" translate="yes" xml:space="preserve">
          <source>The form subclass&amp;rsquo;s &lt;code&gt;clean()&lt;/code&gt; method can perform validation that requires access to multiple form fields. This is where you might put in checks such as &amp;ldquo;if field &lt;code&gt;A&lt;/code&gt; is supplied, field &lt;code&gt;B&lt;/code&gt; must contain a valid email address&amp;rdquo;. This method can return a completely different dictionary if it wishes, which will be used as the &lt;code&gt;cleaned_data&lt;/code&gt;.</source>
          <target state="translated">フォームサブクラスの &lt;code&gt;clean()&lt;/code&gt; メソッドは、複数のフォームフィールドへのアクセスを必要とする検証を実行できます。ここで、「フィールド &lt;code&gt;A&lt;/code&gt; が指定されている場合、フィールド &lt;code&gt;B&lt;/code&gt; には有効なメールアドレスが含まれている必要がある」などのチェックを行うことができます。このメソッドは、必要に応じて完全に異なるディクショナリを返すことができます。これは、 &lt;code&gt;cleaned_data&lt;/code&gt; として使用されます。</target>
        </trans-unit>
        <trans-unit id="f5b4becd0d7d40a52a4b429db7292b68ea7f044f" translate="yes" xml:space="preserve">
          <source>The form&amp;rsquo;s &lt;a href=&quot;../../ref/forms/api#django.forms.Form.is_bound&quot;&gt;&lt;code&gt;is_bound&lt;/code&gt;&lt;/a&gt; attribute will tell you whether a form has data bound to it or not.</source>
          <target state="translated">フォームの&lt;a href=&quot;../../ref/forms/api#django.forms.Form.is_bound&quot;&gt; &lt;code&gt;is_bound&lt;/code&gt; &lt;/a&gt;属性は、フォームにデータがバインドされているかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="e950b68fbdaf523aa7382e18b51c8a8cef51b3e5" translate="yes" xml:space="preserve">
          <source>The format in which this field&amp;rsquo;s initial value will be displayed.</source>
          <target state="translated">このフィールドの初期値が表示される形式。</target>
        </trans-unit>
        <trans-unit id="8b91cfbe0bdb4e0fd3f4c62f0a068f0cc91d0411" translate="yes" xml:space="preserve">
          <source>The format of the &lt;code&gt;credentials&lt;/code&gt; argument depends on which &lt;a href=&quot;../auth/customizing#authentication-backends&quot;&gt;authentication backend&lt;/a&gt; you&amp;rsquo;re using (which is configured by your &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt; setting). If you&amp;rsquo;re using the standard authentication backend provided by Django (&lt;code&gt;ModelBackend&lt;/code&gt;), &lt;code&gt;credentials&lt;/code&gt; should be the user&amp;rsquo;s username and password, provided as keyword arguments:</source>
          <target state="translated">&lt;code&gt;credentials&lt;/code&gt; 引数の形式は、使用している&lt;a href=&quot;../auth/customizing#authentication-backends&quot;&gt;認証バックエンド&lt;/a&gt;（&lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt;設定で構成されている）によって異なります。Djangoが提供する標準の認証バックエンド（ &lt;code&gt;ModelBackend&lt;/code&gt; ）を使用している場合、 &lt;code&gt;credentials&lt;/code&gt; は、ユーザーのユーザー名とパスワードであり、キーワード引数として指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="807e401f2ad8a08cbbac05cb7a265a5161065192" translate="yes" xml:space="preserve">
          <source>The format passed can also be one of the predefined ones &lt;a href=&quot;../settings#std:setting-DATE_FORMAT&quot;&gt;&lt;code&gt;DATE_FORMAT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../settings#std:setting-DATETIME_FORMAT&quot;&gt;&lt;code&gt;DATETIME_FORMAT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../settings#std:setting-SHORT_DATE_FORMAT&quot;&gt;&lt;code&gt;SHORT_DATE_FORMAT&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../settings#std:setting-SHORT_DATETIME_FORMAT&quot;&gt;&lt;code&gt;SHORT_DATETIME_FORMAT&lt;/code&gt;&lt;/a&gt;. The predefined formats may vary depending on the current locale and if &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;Format localization&lt;/a&gt; is enabled, e.g.:</source>
          <target state="translated">渡されるフォーマットは、事前定義された&lt;a href=&quot;../settings#std:setting-DATE_FORMAT&quot;&gt; &lt;code&gt;DATE_FORMAT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../settings#std:setting-DATETIME_FORMAT&quot;&gt; &lt;code&gt;DATETIME_FORMAT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../settings#std:setting-SHORT_DATE_FORMAT&quot;&gt; &lt;code&gt;SHORT_DATE_FORMAT&lt;/code&gt; 、&lt;/a&gt;または&lt;a href=&quot;../settings#std:setting-SHORT_DATETIME_FORMAT&quot;&gt; &lt;code&gt;SHORT_DATETIME_FORMAT&lt;/code&gt; の&lt;/a&gt;いずれかです。事前定義されたフォーマットは、現在のロケールによって、および&lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;フォーマットのローカリゼーション&lt;/a&gt;が有効になっているかどうかによって異なる場合があります。例：</target>
        </trans-unit>
        <trans-unit id="951d43a269abf1da9010e4a3a479d4e95cf3e53a" translate="yes" xml:space="preserve">
          <source>The format passed can be one of the predefined ones &lt;a href=&quot;../settings#std:setting-DATE_FORMAT&quot;&gt;&lt;code&gt;DATE_FORMAT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../settings#std:setting-DATETIME_FORMAT&quot;&gt;&lt;code&gt;DATETIME_FORMAT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../settings#std:setting-SHORT_DATE_FORMAT&quot;&gt;&lt;code&gt;SHORT_DATE_FORMAT&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../settings#std:setting-SHORT_DATETIME_FORMAT&quot;&gt;&lt;code&gt;SHORT_DATETIME_FORMAT&lt;/code&gt;&lt;/a&gt;, or a custom format that uses the format specifiers shown in the table above. Note that predefined formats may vary depending on the current locale.</source>
          <target state="translated">渡されるフォーマットは、事前定義された&lt;a href=&quot;../settings#std:setting-DATE_FORMAT&quot;&gt; &lt;code&gt;DATE_FORMAT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../settings#std:setting-DATETIME_FORMAT&quot;&gt; &lt;code&gt;DATETIME_FORMAT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../settings#std:setting-SHORT_DATETIME_FORMAT&quot;&gt; &lt;code&gt;SHORT_DATETIME_FORMAT&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../settings#std:setting-SHORT_DATE_FORMAT&quot;&gt; &lt;code&gt;SHORT_DATE_FORMAT&lt;/code&gt; &lt;/a&gt;いずれか、または上の表に示されているフォーマット指定子を使用するカスタムフォーマットです。事前定義されたフォーマットは、現在のロケールによって異なる場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f066dbb865224cf294eed21302203dfe4cfd60fd" translate="yes" xml:space="preserve">
          <source>The formatting here is a bit simpler than with XML. The whole collection is just represented as an array and the objects are represented by JSON objects with three properties: &amp;ldquo;pk&amp;rdquo;, &amp;ldquo;model&amp;rdquo; and &amp;ldquo;fields&amp;rdquo;. &amp;ldquo;fields&amp;rdquo; is again an object containing each field&amp;rsquo;s name and value as property and property-value respectively.</source>
          <target state="translated">ここでのフォーマットは、XMLよりも少し単純です。コレクション全体は配列として表され、オブジェクトは「pk」、「model」、「fields」という3つのプロパティを持つJSONオブジェクトで表されます。&amp;ldquo; fields&amp;rdquo;も、各フィールドの名前と値をそれぞれプロパティとプロパティ値として含むオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="9d586c1fb6a5074b5116ac82f29c5ec23f4cd5ce" translate="yes" xml:space="preserve">
          <source>The formatting string &lt;code&gt;'&quot;%Y-%m-%d %I:%M %p&quot;'&lt;/code&gt;. The return value from &lt;code&gt;split_contents()&lt;/code&gt; will include the leading and trailing quotes for string literals like this.</source>
          <target state="translated">フォーマット文字列 &lt;code&gt;'&quot;%Y-%m-%d %I:%M %p&quot;'&lt;/code&gt; 。 &lt;code&gt;split_contents()&lt;/code&gt; からの戻り値には、このような文字列リテラルの前後の引用符が含まれます。</target>
        </trans-unit>
        <trans-unit id="091f61dfdc46efca63677e49711c3d2d58217566" translate="yes" xml:space="preserve">
          <source>The formatting system is disabled by default. To enable it, it&amp;rsquo;s necessary to set &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N = True&lt;/code&gt;&lt;/a&gt; in your settings file.</source>
          <target state="translated">デフォルトでは、フォーマットシステムは無効になっています。これを有効にするには、設定ファイルで&lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N = True&lt;/code&gt; &lt;/a&gt;を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="ef40a81d231b49fec1bb734bf46666ee33684758" translate="yes" xml:space="preserve">
          <source>The formset &lt;code&gt;clean&lt;/code&gt; method is called after all the &lt;code&gt;Form.clean&lt;/code&gt; methods have been called. The errors will be found using the &lt;code&gt;non_form_errors()&lt;/code&gt; method on the formset.</source>
          <target state="translated">formset &lt;code&gt;clean&lt;/code&gt; メソッドは、すべての &lt;code&gt;Form.clean&lt;/code&gt; メソッドが呼び出された後に呼び出されます。エラーは &lt;code&gt;non_form_errors()&lt;/code&gt; メソッドを使用して検出されます。</target>
        </trans-unit>
        <trans-unit id="4f08dd43eaf586c981739bb266dbdd204bdb5c7b" translate="yes" xml:space="preserve">
          <source>The framework also supports more complex feeds, via arguments.</source>
          <target state="translated">フレームワークは引数を介して、より複雑なフィードもサポートしています。</target>
        </trans-unit>
        <trans-unit id="bd84135d1e1d25338f18a04a1803130b52cbc283" translate="yes" xml:space="preserve">
          <source>The framework is flexible and allows you to write functions that perform any other kind of check you may require. The following is an example stub check function:</source>
          <target state="translated">このフレームワークは柔軟性があり、必要に応じて他の種類のチェックを行う関数を書くことができます。以下はスタブチェック関数の例です。</target>
        </trans-unit>
        <trans-unit id="d7eca4abbb429fc35f394aa077d5c08f35e91bc2" translate="yes" xml:space="preserve">
          <source>The full Python path of the WSGI application object that Django&amp;rsquo;s built-in servers (e.g. &lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt;) will use. The &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; management command will create a standard &lt;code&gt;wsgi.py&lt;/code&gt; file with an &lt;code&gt;application&lt;/code&gt; callable in it, and point this setting to that &lt;code&gt;application&lt;/code&gt;.</source>
          <target state="translated">Djangoの組み込みサーバー（&lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; など&lt;/a&gt;）が使用するWSGIアプリケーションオブジェクトの完全なPythonパス。&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;管理コマンドは、標準が作成されます &lt;code&gt;wsgi.py&lt;/code&gt; を持つファイル &lt;code&gt;application&lt;/code&gt; 、それで呼び出し可能にし、それにこの設定を指し &lt;code&gt;application&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="588b867bdf3639f979cc4fb9e70120dbc5a2e050" translate="yes" xml:space="preserve">
          <source>The full documentation for &lt;a href=&quot;https://docs.python.org/3/library/logging.config.html#logging-config-dictschema&quot;&gt;dictConfig format&lt;/a&gt; is the best source of information about logging configuration dictionaries. However, to give you a taste of what is possible, here are several examples.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/logging.config.html#logging-config-dictschema&quot;&gt;dictConfig形式&lt;/a&gt;の完全なドキュメントは、構成辞書のロギングに関する情報の最良のソースです。ただし、可能なことを味わうために、いくつかの例を示します。</target>
        </trans-unit>
        <trans-unit id="ecb568036e6cb6bf57a247e9a736a4031dccbe19" translate="yes" xml:space="preserve">
          <source>The full list of hashers included in Django is:</source>
          <target state="translated">Django に含まれるハッシャーの完全なリストは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="9564ebd548a987b4d37c857948ea4148889346c2" translate="yes" xml:space="preserve">
          <source>The full list of known directives can be found in the &lt;a href=&quot;https://www.iana.org/assignments/http-cache-directives/http-cache-directives.xhtml&quot;&gt;IANA registry&lt;/a&gt; (note that not all of them apply to responses).</source>
          <target state="translated">既知のディレクティブの完全なリストは、&lt;a href=&quot;https://www.iana.org/assignments/http-cache-directives/http-cache-directives.xhtml&quot;&gt;IANAレジストリにあります&lt;/a&gt;（それらすべてが応答に適用されるわけではないことに注意してください）。</target>
        </trans-unit>
        <trans-unit id="74fc1b13507793faaecffa2677ac4fb4d3c020f2" translate="yes" xml:space="preserve">
          <source>The full name of a template to use as defined by a string. Not defining a &lt;code&gt;template_name&lt;/code&gt; will raise a &lt;a href=&quot;../exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;django.core.exceptions.ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">文字列で定義された、使用するテンプレートの完全な名前。 &lt;code&gt;template_name&lt;/code&gt; を定義しないと、&lt;a href=&quot;../exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;django.core.exceptions.ImproperlyConfigured&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="282a1cace02e8551ef4b6aa7ed546a316ad9259c" translate="yes" xml:space="preserve">
          <source>The full name of a template to use or sequence of template names. If a sequence is given, the first template that exists will be used. See the &lt;a href=&quot;../templates#template-loading&quot;&gt;template loading documentation&lt;/a&gt; for more information on how templates are found.</source>
          <target state="translated">使用するテンプレートの完全な名前またはテンプレート名のシーケンス。シーケンスが指定されている場合、存在する最初のテンプレートが使用されます。&lt;a href=&quot;../templates#template-loading&quot;&gt;テンプレートの&lt;/a&gt;検索方法の詳細については、テンプレートの読み込みに関するドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="be2f6fa485a5cbe314811ad48f8b60866792a2c8" translate="yes" xml:space="preserve">
          <source>The fully qualified domain name associated with the website. For example, &lt;code&gt;www.example.com&lt;/code&gt;.</source>
          <target state="translated">Webサイトに関連付けられた完全修飾ドメイン名。たとえば、 &lt;code&gt;www.example.com&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f59c338fdbc478e21de6ac9b4ae49b88ce0d6dcf" translate="yes" xml:space="preserve">
          <source>The function for registering a converter for use in &lt;a href=&quot;#django.urls.path&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;route&lt;/code&gt;s.</source>
          <target state="translated">&lt;a href=&quot;#django.urls.path&quot;&gt; &lt;code&gt;path()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;route&lt;/code&gt; で使用するコンバーターを登録するための関数。</target>
        </trans-unit>
        <trans-unit id="fb7eb0e34047e0db0288d374417d8af377ec403d" translate="yes" xml:space="preserve">
          <source>The function must return a list of messages. If no problems are found as a result of the check, the check function must return an empty list.</source>
          <target state="translated">この関数はメッセージのリストを返さなければなりません。チェックの結果、問題が見つからなかった場合、チェック関数は空のリストを返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="c90057f940a2f81ee80c2b8670ebe400cb6cec2e" translate="yes" xml:space="preserve">
          <source>The function returns a &lt;code&gt;CurrentTimeNode&lt;/code&gt; with everything the node needs to know about this tag. In this case, it passes the argument &amp;ndash; &lt;code&gt;&quot;%Y-%m-%d %I:%M %p&quot;&lt;/code&gt;. The leading and trailing quotes from the template tag are removed in &lt;code&gt;format_string[1:-1]&lt;/code&gt;.</source>
          <target state="translated">この関数は、ノードがこのタグについて知る必要があるすべてのものを含む &lt;code&gt;CurrentTimeNode&lt;/code&gt; を返します。この場合、引数 &lt;code&gt;&quot;%Y-%m-%d %I:%M %p&quot;&lt;/code&gt; 渡します。テンプレートタグの &lt;code&gt;format_string[1:-1]&lt;/code&gt; 引用符は、format_string [1：-1]で削除されます。</target>
        </trans-unit>
        <trans-unit id="eb7f14311c6859368ceb4f35ff9b61602e4345d0" translate="yes" xml:space="preserve">
          <source>The function you pass in will be called immediately after a hypothetical database write made where &lt;code&gt;on_commit()&lt;/code&gt; is called would be successfully committed.</source>
          <target state="translated">渡した関数は、 &lt;code&gt;on_commit()&lt;/code&gt; が呼び出された仮想データベース書き込みが正常にコミットされた直後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c6b98e770683bc89d9ec646af0f2c97a7347e16e" translate="yes" xml:space="preserve">
          <source>The functions defined in this module share the following properties:</source>
          <target state="translated">このモジュールで定義されている関数は、以下のプロパティを共有しています。</target>
        </trans-unit>
        <trans-unit id="c2710636be401ecc13a26e3bd4fbc1f235086f82" translate="yes" xml:space="preserve">
          <source>The functions documented on this page allow users to access geographic database functions to be used in annotations, aggregations, or filters in Django.</source>
          <target state="translated">このページに記載されている機能は、Django のアノテーション、集計、フィルタで使用する地理データベースの機能にアクセスするためのものです。</target>
        </trans-unit>
        <trans-unit id="af9082b19280b9d875a00f016656f474042e54b7" translate="yes" xml:space="preserve">
          <source>The general rules are:</source>
          <target state="translated">一般的なルールは</target>
        </trans-unit>
        <trans-unit id="c4b513220803b7b0034ba6c52e1af721f2fb5098" translate="yes" xml:space="preserve">
          <source>The general structure of geographic lookups is described below. A complete reference can be found in the &lt;a href=&quot;geoquerysets#spatial-lookups&quot;&gt;spatial lookup reference&lt;/a&gt;.</source>
          <target state="translated">地理的ルックアップの一般的な構造を以下に説明します。完全な参照は、&lt;a href=&quot;geoquerysets#spatial-lookups&quot;&gt;空間ルックアップ参照にあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6c670a462552b45fbf82a4cda1f203ea59d36eac" translate="yes" xml:space="preserve">
          <source>The general usage of the command goes as follows:</source>
          <target state="translated">コマンドの一般的な使い方は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="1b87d14170e903819192aed3d30ac0f90d04374c" translate="yes" xml:space="preserve">
          <source>The generated &lt;code&gt;Form&lt;/code&gt; class will have a form field for every model field specified, in the order specified in the &lt;code&gt;fields&lt;/code&gt; attribute.</source>
          <target state="translated">生成された &lt;code&gt;Form&lt;/code&gt; クラスには、 &lt;code&gt;fields&lt;/code&gt; 属性で指定された順序で、指定されたすべてのモデルフィールドのフォームフィールドがあります。</target>
        </trans-unit>
        <trans-unit id="5a56a4c22a7ea6167290860ba252cc91f0eea4d7" translate="yes" xml:space="preserve">
          <source>The generic &lt;code&gt;DetailView&lt;/code&gt; class wouldn&amp;rsquo;t know anything about this field, but once again we could write a custom view to keep that field updated.</source>
          <target state="translated">汎用の &lt;code&gt;DetailView&lt;/code&gt; クラスはこのフィールドについて何も知りませんが、このフィールドを最新の状態に保つためのカスタムビューをもう一度作成できます。</target>
        </trans-unit>
        <trans-unit id="ebf227c2c996952dff43f13dd885130cdc09b054" translate="yes" xml:space="preserve">
          <source>The generic &lt;code&gt;DetailView&lt;/code&gt; class, of course, wouldn&amp;rsquo;t know anything about this field, but once again we could easily write a custom view to keep that field updated.</source>
          <target state="translated">もちろん、汎用の &lt;code&gt;DetailView&lt;/code&gt; クラスはこのフィールドについて何も知りませんが、このフィールドを更新し続けるカスタムビューを簡単に作成できます。</target>
        </trans-unit>
        <trans-unit id="e41332eadaef4d72de9aa71ff598ebf6d3d1eeab" translate="yes" xml:space="preserve">
          <source>The geographic model, &lt;em&gt;not&lt;/em&gt; an instance.</source>
          <target state="translated">インスタンスで&lt;em&gt;はなく&lt;/em&gt;地理モデル。</target>
        </trans-unit>
        <trans-unit id="f5ab5d582c0f5f70e87126bf15fc71ebc8ece26d" translate="yes" xml:space="preserve">
          <source>The geography type provides native support for spatial features represented with geographic coordinates (e.g., WGS84 longitude/latitude). &lt;a href=&quot;#fngeography&quot; id=&quot;id17&quot;&gt;[6]&lt;/a&gt; Unlike the plane used by a geometry type, the geography type uses a spherical representation of its data. Distance and measurement operations performed on a geography column automatically employ great circle arc calculations and return linear units. In other words, when &lt;code&gt;ST_Distance&lt;/code&gt; is called on two geographies, a value in meters is returned (as opposed to degrees if called on a geometry column in WGS84).</source>
          <target state="translated">geographyタイプは、地理座標（例：WGS84経度/緯度）で表される空間フィーチャをネイティブでサポートします。&lt;a href=&quot;#fngeography&quot; id=&quot;id17&quot;&gt;[6]&lt;/a&gt;ジオメトリタイプで使用される平面とは異なり、ジオグラフィタイプはデータの球形表現を使用します。 geography列で実行される距離および測定操作は、自動的に大円弧計算を使用し、線形単位を返します。つまり、 &lt;code&gt;ST_Distance&lt;/code&gt; が2つの地域で呼び出されると、メートル単位の値が返されます（WGS84の形状列で呼び出された場合の度数とは異なります）。</target>
        </trans-unit>
        <trans-unit id="c57f23c04b673000485170d8d9bbff6823bba98c" translate="yes" xml:space="preserve">
          <source>The geospatial libraries required for a GeoDjango installation depends on the spatial database used. The following lists the library requirements, supported versions, and any notes for each of the supported database backends:</source>
          <target state="translated">GeoDjango のインストールに必要な地理空間ライブラリは、使用する空間データベースによって異なります。以下に、ライブラリの要件、サポートされているバージョン、サポートされているデータベースのバックエンドごとの注意事項を示します。</target>
        </trans-unit>
        <trans-unit id="1c9844a4155b9b448b9a51486d7b6f2807a8360e" translate="yes" xml:space="preserve">
          <source>The given URL may contain dictionary-style string formatting, which will be interpolated against the parameters captured in the URL. Because keyword interpolation is &lt;em&gt;always&lt;/em&gt; done (even if no arguments are passed in), any &lt;code&gt;&quot;%&quot;&lt;/code&gt; characters in the URL must be written as &lt;code&gt;&quot;%%&quot;&lt;/code&gt; so that Python will convert them to a single percent sign on output.</source>
          <target state="translated">指定されたURLには、辞書形式の文字列フォーマットが含まれる場合があり、URLでキャプチャされたパラメータに対して補間されます。キーワードの補間は&lt;em&gt;常に&lt;/em&gt;行われるため（引数が渡されない場合でも）、URLの &lt;code&gt;&quot;%&quot;&lt;/code&gt; 文字は &lt;code&gt;&quot;%%&quot;&lt;/code&gt; として記述し、Pythonがそれらを出力の単一のパーセント記号に変換するようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="fc191bf0febd09414996d702a9c62c8f107ede80" translate="yes" xml:space="preserve">
          <source>The goal of internationalization and localization is to allow a single Web application to offer its content in languages and formats tailored to the audience.</source>
          <target state="translated">国際化とローカリゼーションの目標は、単一のウェブアプリケーションがオーディエンスに合わせた言語とフォーマットでコンテンツを提供できるようにすることです。</target>
        </trans-unit>
        <trans-unit id="3048dc287034bf6cbc1205d1df0a759f2123e8cf" translate="yes" xml:space="preserve">
          <source>The goal of this document is to give you enough technical specifics to understand how Django works, but this isn&amp;rsquo;t intended to be a tutorial or reference &amp;ndash; but we&amp;rsquo;ve got both! When you&amp;rsquo;re ready to start a project, you can &lt;a href=&quot;tutorial01&quot;&gt;start with the tutorial&lt;/a&gt; or &lt;a href=&quot;../topics/index&quot;&gt;dive right into more detailed documentation&lt;/a&gt;.</source>
          <target state="translated">このドキュメントの目的は、Djangoがどのように機能するかを理解するのに十分な技術的詳細を提供することですが、これはチュートリアルやリファレンスを意図したものではありませんが、両方を備えています！プロジェクトを開始する準備ができたら&lt;a href=&quot;tutorial01&quot;&gt;、チュートリアルから始める&lt;/a&gt;か&lt;a href=&quot;../topics/index&quot;&gt;、より詳細なドキュメントに飛び込む&lt;/a&gt;ことができます。</target>
        </trans-unit>
        <trans-unit id="959e340bc8a6ce504a6fa2603d39631b162d857f" translate="yes" xml:space="preserve">
          <source>The golden rule of Web application security is to never trust data from untrusted sources. Sometimes it can be useful to pass data through an untrusted medium. Cryptographically signed values can be passed through an untrusted channel safe in the knowledge that any tampering will be detected.</source>
          <target state="translated">ウェブアプリケーションのセキュリティの黄金律は、信頼されていないソースからのデータを決して信用しないことです。時には、信頼されていない媒体にデータを渡すことが有用な場合もあります。暗号署名された値を信頼されていないチャネルに渡すことで、改ざんが検出されるという安全性を確保することができます。</target>
        </trans-unit>
        <trans-unit id="2822ec0cce63f0494fd71f05e6618c21dc97532e" translate="yes" xml:space="preserve">
          <source>The handler class &amp;ndash; e.g. &lt;code&gt;django.core.handlers.wsgi.WsgiHandler&lt;/code&gt; &amp;ndash; that handled the request.</source>
          <target state="translated">リクエストを処理したハンドラクラス（例： &lt;code&gt;django.core.handlers.wsgi.WsgiHandler&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="06f81b72f6c93ee4ace28197d9b6617d49e82e8b" translate="yes" xml:space="preserve">
          <source>The handler class, as above.</source>
          <target state="translated">上記のようなハンドラクラスです。</target>
        </trans-unit>
        <trans-unit id="488883d229389a6aee790c55f7009e741dbfe9a7" translate="yes" xml:space="preserve">
          <source>The handler is the engine that determines what happens to each message in a logger. It describes a particular logging behavior, such as writing a message to the screen, to a file, or to a network socket.</source>
          <target state="translated">ハンドラは、ロガーの各メッセージに何が起こるかを決定するエンジンです。画面へのメッセージの書き込み、ファイルへの書き込み、ネットワークソケットへの書き込みなど、特定のロギング動作を記述します。</target>
        </trans-unit>
        <trans-unit id="14fa348067bababa21e545f935d5b8a24c49bb5e" translate="yes" xml:space="preserve">
          <source>The handler should return an &lt;code&gt;UploadedFile&lt;/code&gt; object that will be stored in &lt;code&gt;request.FILES&lt;/code&gt;. Handlers may also return &lt;code&gt;None&lt;/code&gt; to indicate that the &lt;code&gt;UploadedFile&lt;/code&gt; object should come from subsequent upload handlers.</source>
          <target state="translated">ハンドラーは、 &lt;code&gt;request.FILES&lt;/code&gt; に格納される &lt;code&gt;UploadedFile&lt;/code&gt; オブジェクトを返す必要があります。ハンドラーは &lt;code&gt;None&lt;/code&gt; を返し、 &lt;code&gt;UploadedFile&lt;/code&gt; オブジェクトが後続のアップロードハンドラーから取得されることを示す場合もあります。</target>
        </trans-unit>
        <trans-unit id="6b94a0fcdb894cacb15a9c96501a0e78ba8cdec0" translate="yes" xml:space="preserve">
          <source>The hashing algorithm was changed to the SHA-256.</source>
          <target state="translated">ハッシュアルゴリズムをSHA-256に変更しました。</target>
        </trans-unit>
        <trans-unit id="1b3fd8a933d2fa2497aaa96bb37795dd4c3f6cff" translate="yes" xml:space="preserve">
          <source>The headers sent via &lt;code&gt;**extra&lt;/code&gt; should follow &lt;a href=&quot;https://www.w3.org/CGI/&quot;&gt;CGI&lt;/a&gt; specification. For example, emulating a different &amp;ldquo;Host&amp;rdquo; header as sent in the HTTP request from the browser to the server should be passed as &lt;code&gt;HTTP_HOST&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;**extra&lt;/code&gt; を介して送信されるヘッダーは、&lt;a href=&quot;https://www.w3.org/CGI/&quot;&gt;CGI&lt;/a&gt;仕様に従う必要があります。たとえば、ブラウザーからサーバーへのHTTPリクエストで送信される別の「Host」ヘッダーをエミュレートするには、 &lt;code&gt;HTTP_HOST&lt;/code&gt; として渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="e6413e6097f1a28ecc70877c02a1bcacdde6b6a6" translate="yes" xml:space="preserve">
          <source>The headers you pass to &lt;code&gt;vary_on_headers&lt;/code&gt; are not case sensitive; &lt;code&gt;&quot;User-Agent&quot;&lt;/code&gt; is the same thing as &lt;code&gt;&quot;user-agent&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;vary_on_headers&lt;/code&gt; に渡すヘッダーは大文字と小文字を区別しません。 &lt;code&gt;&quot;User-Agent&quot;&lt;/code&gt; は &lt;code&gt;&quot;user-agent&quot;&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="279004f79673f28183163fa42dab5e85a0b670aa" translate="yes" xml:space="preserve">
          <source>The height of the band in pixels (Y-axis).</source>
          <target state="translated">バンドの高さをピクセル単位(Y軸)で表示します。</target>
        </trans-unit>
        <trans-unit id="df9d7b5469e23f9d6713c72b23f1eeec489b3c5f" translate="yes" xml:space="preserve">
          <source>The height of the source in pixels (Y-axis).</source>
          <target state="translated">ピクセル単位のソースの高さ(Y軸)。</target>
        </trans-unit>
        <trans-unit id="38b2861a27cfa38862983e658978a491a364c2ae" translate="yes" xml:space="preserve">
          <source>The help texts and any errors from password validators are always returned in the order they are listed in &lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt;&lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ヘルプテキストとパスワードバリデータからのエラーは常に、&lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt; &lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt; に&lt;/a&gt;リストされている順序で返されます。</target>
        </trans-unit>
        <trans-unit id="4bc95354bdedb2bcc92a4ff72aa7b2c44670198e" translate="yes" xml:space="preserve">
          <source>The high-level feed-generating framework is supplied by the &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class. To create a feed, write a &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class and point to an instance of it in your &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt;.</source>
          <target state="translated">高レベルのフィード生成フレームワークは&lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt;クラスによって提供されます。フィードを作成するには、&lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt;クラスを記述し、&lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt;でそのインスタンスをポイントします。</target>
        </trans-unit>
        <trans-unit id="526b72f11a55f7c9d3fc861332686ce93c3ede70" translate="yes" xml:space="preserve">
          <source>The high-level framework</source>
          <target state="translated">高レベルフレームワーク</target>
        </trans-unit>
        <trans-unit id="906f6ac47d9f1e1dac6594aed6295ab440c7f48d" translate="yes" xml:space="preserve">
          <source>The hints received by the database router can be used to decide which database should receive a given request.</source>
          <target state="translated">データベースルータが受信したヒントは、与えられたリクエストをどのデータベースが受信すべきかを決定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="cd46fe4bd9ca3bc6fa098435eab462a49cd92f51" translate="yes" xml:space="preserve">
          <source>The host to use for sending email.</source>
          <target state="translated">メール送信に使用するホスト。</target>
        </trans-unit>
        <trans-unit id="79af06a2f9e9099fc33866f54328f8b8a35bd6d6" translate="yes" xml:space="preserve">
          <source>The human-readable name of the content type. This is taken from the &lt;a href=&quot;../models/fields#django.db.models.Field.verbose_name&quot;&gt;&lt;code&gt;verbose_name&lt;/code&gt;&lt;/a&gt; attribute of the model.</source>
          <target state="translated">人間が読めるコンテンツタイプの名前。これは、モデルの&lt;a href=&quot;../models/fields#django.db.models.Field.verbose_name&quot;&gt; &lt;code&gt;verbose_name&lt;/code&gt; &lt;/a&gt;属性から取得されます。</target>
        </trans-unit>
        <trans-unit id="a12444918c81a571d3935f2f92a06c2901301347" translate="yes" xml:space="preserve">
          <source>The idea behind &lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt; is to make it easy to plug-and-play URLs. Since polls are in their own URLconf (&lt;code&gt;polls/urls.py&lt;/code&gt;), they can be placed under &amp;ldquo;/polls/&amp;rdquo;, or under &amp;ldquo;/fun_polls/&amp;rdquo;, or under &amp;ldquo;/content/polls/&amp;rdquo;, or any other path root, and the app will still work.</source>
          <target state="translated">&lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; の&lt;/a&gt;背後にある考え方は、URLのプラグアンドプレイを簡単にすることです。投票は独自のURLconf（ &lt;code&gt;polls/urls.py&lt;/code&gt; ）にあるため、「/ polls /」、「/ fun_polls /」、「/ content / polls /」、またはその他のパスルートの下に配置できます。アプリは引き続き機能します。</target>
        </trans-unit>
        <trans-unit id="827f5d73a940731ae9ae899cc29fe8b76a857dcf" translate="yes" xml:space="preserve">
          <source>The idea here is to pass a list of items to your template, and have the template output the commas in a &lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; loop.</source>
          <target state="translated">ここでの考え方は、アイテムのリストをテンプレートに渡し、テンプレートに&lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt; &lt;code&gt;for&lt;/code&gt; &lt;/a&gt;ループでコンマを出力させることです。</target>
        </trans-unit>
        <trans-unit id="686b249314782c8f2e3e69ba4fac0bc6cf47e3c1" translate="yes" xml:space="preserve">
          <source>The implementation is:</source>
          <target state="translated">実装されています。</target>
        </trans-unit>
        <trans-unit id="1ce6a8179ec02fab89045ffdb995d78cf0aa55a7" translate="yes" xml:space="preserve">
          <source>The implementation provided here implements a multi-database strategy where all objects of a given type are stored on a specific database (e.g., all &lt;code&gt;User&lt;/code&gt; objects are in the &lt;code&gt;other&lt;/code&gt; database). If your usage of multiple databases is more complex, your &lt;code&gt;ModelAdmin&lt;/code&gt; will need to reflect that strategy.</source>
          <target state="translated">ここで提供される実装は、指定されたタイプのすべてのオブジェクトが特定のデータベースに格納されるマルチデータベース戦略を実装します（たとえば、すべての &lt;code&gt;User&lt;/code&gt; オブジェクトは &lt;code&gt;other&lt;/code&gt; データベースにあります）。複数のデータベースの使用がより複雑な場合、 &lt;code&gt;ModelAdmin&lt;/code&gt; はその戦略を反映する必要があります。</target>
        </trans-unit>
        <trans-unit id="dfbef63857d84ecfe1d5db5997858631f5311bba" translate="yes" xml:space="preserve">
          <source>The import path of the field (e.g. &lt;code&gt;&quot;django.db.models.IntegerField&quot;&lt;/code&gt;). This should be the most portable version, so less specific may be better.</source>
          <target state="translated">フィールドのインポートパス（例： &lt;code&gt;&quot;django.db.models.IntegerField&quot;&lt;/code&gt; ）。これは最も移植性の高いバージョンであるため、具体性を低くする方が良い場合があります。</target>
        </trans-unit>
        <trans-unit id="903c7ec940f2bdc805e28cb4d1ce4a26a3cb1692" translate="yes" xml:space="preserve">
          <source>The important part here is the default ordering on the &lt;code&gt;name&lt;/code&gt; field. If you want to count how many times each distinct &lt;code&gt;data&lt;/code&gt; value appears, you might try this:</source>
          <target state="translated">ここで重要な部分は、 &lt;code&gt;name&lt;/code&gt; フィールドのデフォルトの順序です。個別の &lt;code&gt;data&lt;/code&gt; 値が出現する回数を数えたい場合は、次のようにしてみてください。</target>
        </trans-unit>
        <trans-unit id="f1dd0d68e1e337919314bda6d0e58cab51e8e98a" translate="yes" xml:space="preserve">
          <source>The important thing this example shows is that the same functions can be used to compute the ETag and last modification values in all situations. In fact, you &lt;strong&gt;should&lt;/strong&gt; use the same functions, so that the same values are returned every time.</source>
          <target state="translated">この例が示す重要なことは、すべての状況で同じ関数を使用してETagと最終変更値を計算できることです。実際、同じ関数&lt;strong&gt;を&lt;/strong&gt;使用して、毎回同じ値が返されるようにする&lt;strong&gt;必要があり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="27651fe7a7b1b9a60be00d387e3d436d308ffeab" translate="yes" xml:space="preserve">
          <source>The index of the layer to use from the Data Source (defaults to 0)</source>
          <target state="translated">データソースから使用するレイヤーのインデックス (デフォルトは 0)</target>
        </trans-unit>
        <trans-unit id="0505f906184c235c944c51abdcad4e4eee24921f" translate="yes" xml:space="preserve">
          <source>The index type of the constraint. Accepted values are &lt;code&gt;GIST&lt;/code&gt; or &lt;code&gt;SPGIST&lt;/code&gt;. Matching is case insensitive. If not provided, the default index type is &lt;code&gt;GIST&lt;/code&gt;.</source>
          <target state="translated">制約のインデックスタイプ。受け入れられる値は &lt;code&gt;GIST&lt;/code&gt; または &lt;code&gt;SPGIST&lt;/code&gt; です。マッチングでは大文字と小文字は区別されません。指定しない場合、デフォルトのインデックスタイプは &lt;code&gt;GIST&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="70e18b0c6e76404c1a43fa1188b2263602d7d0d7" translate="yes" xml:space="preserve">
          <source>The initial &lt;code&gt;filter(...)&lt;/code&gt; limits the subquery to the relevant parameters. &lt;code&gt;order_by()&lt;/code&gt; removes the default &lt;a href=&quot;options#django.db.models.Options.ordering&quot;&gt;&lt;code&gt;ordering&lt;/code&gt;&lt;/a&gt; (if any) on the &lt;code&gt;Comment&lt;/code&gt; model. &lt;code&gt;values('post')&lt;/code&gt; aggregates comments by &lt;code&gt;Post&lt;/code&gt;. Finally, &lt;code&gt;annotate(...)&lt;/code&gt; performs the aggregation. The order in which these queryset methods are applied is important. In this case, since the subquery must be limited to a single column, &lt;code&gt;values('total')&lt;/code&gt; is required.</source>
          <target state="translated">最初の &lt;code&gt;filter(...)&lt;/code&gt; は、サブクエリを関連するパラメーターに制限します。 &lt;code&gt;order_by()&lt;/code&gt; は、 &lt;code&gt;Comment&lt;/code&gt; モデルのデフォルトの&lt;a href=&quot;options#django.db.models.Options.ordering&quot;&gt; &lt;code&gt;ordering&lt;/code&gt; &lt;/a&gt;（存在する場合）を削除します。 &lt;code&gt;values('post')&lt;/code&gt; は、 &lt;code&gt;Post&lt;/code&gt; によってコメントを集約します。最後に、 &lt;code&gt;annotate(...)&lt;/code&gt; が集計を実行します。これらのクエリセットメソッドが適用される順序は重要です。この場合、サブクエリは単一の列に制限する必要があるため、 &lt;code&gt;values('total')&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="4ae99aa0813c630c9763127e39bb49d8fbf92833" translate="yes" xml:space="preserve">
          <source>The initial serialization is usually very quick, but if you wish to exclude some apps from this process (and speed up test runs slightly), you may add those apps to &lt;a href=&quot;../../ref/settings#std:setting-TEST_NON_SERIALIZED_APPS&quot;&gt;&lt;code&gt;TEST_NON_SERIALIZED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通常、最初のシリアル化は非常に高速ですが、このプロセスから一部のアプリを除外する場合（およびテストの実行をわずかに高速化する場合）、それらのアプリを&lt;a href=&quot;../../ref/settings#std:setting-TEST_NON_SERIALIZED_APPS&quot;&gt; &lt;code&gt;TEST_NON_SERIALIZED_APPS&lt;/code&gt; に&lt;/a&gt;追加できます。</target>
        </trans-unit>
        <trans-unit id="13f07b685c2d3fff938a316a1d8464961248d48e" translate="yes" xml:space="preserve">
          <source>The initial size of the DATAFILE.</source>
          <target state="translated">DATAFILEの初期サイズ。</target>
        </trans-unit>
        <trans-unit id="c7d913fd12d44256d53ae890b7cac955386e9677" translate="yes" xml:space="preserve">
          <source>The initial size of the DATAFILE_TMP.</source>
          <target state="translated">DATAFILE_TMPの初期サイズ。</target>
        </trans-unit>
        <trans-unit id="3fc11f804e222ff16131d5dcfe4115f55181b7d4" translate="yes" xml:space="preserve">
          <source>The inner &lt;code&gt;mysite/&lt;/code&gt; directory is the actual Python package for your project. Its name is the Python package name you&amp;rsquo;ll need to use to import anything inside it (e.g. &lt;code&gt;mysite.urls&lt;/code&gt;).</source>
          <target state="translated">内部の &lt;code&gt;mysite/&lt;/code&gt; ディレクトリは、プロジェクトの実際のPythonパッケージです。その名前は、その中にあるものをインポートするために使用する必要があるPythonパッケージ名です（例： &lt;code&gt;mysite.urls&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c3bd6a8f3a4add21ea334f3824942aa42870857c" translate="yes" xml:space="preserve">
          <source>The input doesn&amp;rsquo;t have to be a valid phone number. This will happily convert any string.</source>
          <target state="translated">入力は有効な電話番号である必要はありません。これはどんな文字列でも喜んで変換します。</target>
        </trans-unit>
        <trans-unit id="cc7d3dfc213be45fd0dda91957def3ef413d4078" translate="yes" xml:space="preserve">
          <source>The installed version of Django is now pointing at your local copy by installing in editable mode. You will immediately see any changes you make to it, which is of great help when writing your first patch.</source>
          <target state="translated">インストールされたバージョンの Django は、編集可能モードでインストールすることで、ローカルコピーを指すようになりました。これは最初のパッチを書くときに非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="3a54b2fb77ad1e2ace8e7aaa85c67e06d561a039" translate="yes" xml:space="preserve">
          <source>The instance namespace can be specified using the &lt;code&gt;namespace&lt;/code&gt; argument to &lt;a href=&quot;../../ref/urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt;. If the instance namespace is not specified, it will default to the included URLconf&amp;rsquo;s application namespace. This means it will also be the default instance for that namespace.</source>
          <target state="translated">インスタンスの名前空間は、&lt;a href=&quot;../../ref/urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;namespace&lt;/code&gt; 引数を使用して指定できます。インスタンスの名前空間が指定されていない場合は、デフォルトで、含まれているURLconfのアプリケーションの名前空間になります。つまり、その名前空間のデフォルトのインスタンスにもなります。</target>
        </trans-unit>
        <trans-unit id="327fc239e67b05332c729a1a6dcff3532f21a85b" translate="yes" xml:space="preserve">
          <source>The instance namespace for the URL pattern that matches the URL.</source>
          <target state="translated">URL に一致する URL パターンのインスタンス名前空間。</target>
        </trans-unit>
        <trans-unit id="348f2c102e3f48d76dc93c84612bf250b990e921" translate="yes" xml:space="preserve">
          <source>The instance of &lt;code&gt;ModelChoiceField&lt;/code&gt; or &lt;code&gt;ModelMultipleChoiceField&lt;/code&gt; to iterate and yield choices.</source>
          <target state="translated">&lt;code&gt;ModelChoiceField&lt;/code&gt; または &lt;code&gt;ModelMultipleChoiceField&lt;/code&gt; のインスタンスで、選択肢を繰り返して生成します。</target>
        </trans-unit>
        <trans-unit id="b2396f9d13fca925ee1620e3dd75069cd1233334" translate="yes" xml:space="preserve">
          <source>The instance whose many-to-many relation is updated. This can be an instance of the &lt;code&gt;sender&lt;/code&gt;, or of the class the &lt;a href=&quot;models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; is related to.</source>
          <target state="translated">多対多の関係が更新されるインスタンス。これは、 &lt;code&gt;sender&lt;/code&gt; のインスタンス、または&lt;a href=&quot;models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;が関連するクラスのインスタンスにすることができます。</target>
        </trans-unit>
        <trans-unit id="a8c670fd72acff36aba31ee0e3d8973bff0bb2ea" translate="yes" xml:space="preserve">
          <source>The intermediate model class describing the &lt;a href=&quot;models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;. This class is automatically created when a many-to-many field is defined; you can access it using the &lt;code&gt;through&lt;/code&gt; attribute on the many-to-many field.</source>
          <target state="translated">&lt;a href=&quot;models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;を説明する中間モデルクラス。このクラスは、多対多フィールドが定義されると自動的に作成されます。多対多フィールドの &lt;code&gt;through&lt;/code&gt; 属性を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="4ae0654f391ba778db9c5f08f5723bc92372633b" translate="yes" xml:space="preserve">
          <source>The iterator class used to generate field choices from &lt;code&gt;queryset&lt;/code&gt;. By default, &lt;a href=&quot;#django.forms.ModelChoiceIterator&quot;&gt;&lt;code&gt;ModelChoiceIterator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;queryset&lt;/code&gt; からフィールド選択を生成するために使用されるイテレータクラス。デフォルトでは、&lt;a href=&quot;#django.forms.ModelChoiceIterator&quot;&gt; &lt;code&gt;ModelChoiceIterator&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="a71d4f70fe7354d87df60818a9458133da88cbae" translate="yes" xml:space="preserve">
          <source>The key &lt;code&gt;mpoly&lt;/code&gt; for the geometry field is &lt;code&gt;MULTIPOLYGON&lt;/code&gt;, the geometry type GeoDjango will import the field as. Even simple polygons in the shapefile will automatically be converted into collections prior to insertion into the database.</source>
          <target state="translated">ジオメトリフィールドの主要な &lt;code&gt;mpoly&lt;/code&gt; は &lt;code&gt;MULTIPOLYGON&lt;/code&gt; です。ジオメトリタイプGeoDjangoはフィールドをインポートします。シェープファイル内の単純なポリゴンであっても、データベースに挿入する前に自動的にコレクションに変換されます。</target>
        </trans-unit>
        <trans-unit id="0d253cebe603f112f3f895dbf0509c3a56678625" translate="yes" xml:space="preserve">
          <source>The key concept of deploying with WSGI is the &lt;code&gt;application&lt;/code&gt; callable which the application server uses to communicate with your code. It&amp;rsquo;s commonly provided as an object named &lt;code&gt;application&lt;/code&gt; in a Python module accessible to the server.</source>
          <target state="translated">WSGIを使用したデプロイの主要な概念は、アプリケーションサーバーがコードとの通信に使用する &lt;code&gt;application&lt;/code&gt; 呼び出し可能です。一般に、サーバーからアクセス可能なPythonモジュールの &lt;code&gt;application&lt;/code&gt; というオブジェクトとして提供されます。</target>
        </trans-unit>
        <trans-unit id="15d36ae477bf2ee387a5946d0eaa1e5e135fd1f7" translate="yes" xml:space="preserve">
          <source>The key for specifying which layer in the OGR &lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt;&lt;code&gt;DataSource&lt;/code&gt;&lt;/a&gt; source to use. Defaults to 0 (the first layer). May be an integer or a string identifier for the &lt;a href=&quot;gdal#django.contrib.gis.gdal.Layer&quot;&gt;&lt;code&gt;Layer&lt;/code&gt;&lt;/a&gt;. When inspecting databases, &lt;code&gt;layer&lt;/code&gt; is generally the table name you want to inspect.</source>
          <target state="translated">OGR &lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt; &lt;code&gt;DataSource&lt;/code&gt; &lt;/a&gt;ソースで使用するレイヤーを指定するためのキー。デフォルトは0（最初のレイヤー）です。&lt;a href=&quot;gdal#django.contrib.gis.gdal.Layer&quot;&gt; &lt;code&gt;Layer&lt;/code&gt; の&lt;/a&gt;整数または文字列識別子の場合があります。データベースを検査する場合、 &lt;code&gt;layer&lt;/code&gt; は通常、検査するテーブル名です。</target>
        </trans-unit>
        <trans-unit id="a1cd4510ad3a9d41263e923beb980ac31840cbb5" translate="yes" xml:space="preserve">
          <source>The key part to making this work is that when class-based views are called, various useful things are stored on &lt;code&gt;self&lt;/code&gt;; as well as the request (&lt;code&gt;self.request&lt;/code&gt;) this includes the positional (&lt;code&gt;self.args&lt;/code&gt;) and name-based (&lt;code&gt;self.kwargs&lt;/code&gt;) arguments captured according to the URLconf.</source>
          <target state="translated">この作業を行うための重要な部分は、クラスベースのビューが呼び出されると、さまざまな便利なものが &lt;code&gt;self&lt;/code&gt; に格納されることです。リクエスト（ &lt;code&gt;self.request&lt;/code&gt; ）だけでなく、URLconfに従ってキャプチャされた位置（ &lt;code&gt;self.args&lt;/code&gt; ）および名前ベース（ &lt;code&gt;self.kwargs&lt;/code&gt; ）の引数も含まれます。</target>
        </trans-unit>
        <trans-unit id="a3d2fd9865dee37e77f38260ea4a731c3c0639fe" translate="yes" xml:space="preserve">
          <source>The key to generating PDFs dynamically with Django is that the ReportLab API acts on file-like objects, and Django&amp;rsquo;s &lt;a href=&quot;../ref/request-response#django.http.FileResponse&quot;&gt;&lt;code&gt;FileResponse&lt;/code&gt;&lt;/a&gt; objects accept file-like objects.</source>
          <target state="translated">DjangoでPDFを動的に生成するための鍵は、ReportLab APIがファイルのようなオブジェクトに作用し、Djangoの&lt;a href=&quot;../ref/request-response#django.http.FileResponse&quot;&gt; &lt;code&gt;FileResponse&lt;/code&gt; &lt;/a&gt;オブジェクトがファイルのようなオブジェクトを受け入れることです。</target>
        </trans-unit>
        <trans-unit id="3b9a1387c8bd1a7371a4b2f433f8d17fd0bce075" translate="yes" xml:space="preserve">
          <source>The key-value pairs in the &lt;code&gt;data&lt;/code&gt; dictionary are used to create a GET data payload. For example:</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; ディクショナリのキーと値のペアは、GETデータペイロードの作成に使用されます。例えば：</target>
        </trans-unit>
        <trans-unit id="c4929a8af44414d79cea8a1d7d30194782aa3382" translate="yes" xml:space="preserve">
          <source>The key-value pairs in the &lt;code&gt;data&lt;/code&gt; dictionary are used to submit POST data. For example:</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; ディクショナリのキーと値のペアは、POSTデータの送信に使用されます。例えば：</target>
        </trans-unit>
        <trans-unit id="c9e59d34409d92156ac5184a2597b2e4eef66a0a" translate="yes" xml:space="preserve">
          <source>The keys in the dictionary are the output media types. These are the same types accepted by CSS files in media declarations: &amp;lsquo;all&amp;rsquo;, &amp;lsquo;aural&amp;rsquo;, &amp;lsquo;braille&amp;rsquo;, &amp;lsquo;embossed&amp;rsquo;, &amp;lsquo;handheld&amp;rsquo;, &amp;lsquo;print&amp;rsquo;, &amp;lsquo;projection&amp;rsquo;, &amp;lsquo;screen&amp;rsquo;, &amp;lsquo;tty&amp;rsquo; and &amp;lsquo;tv&amp;rsquo;. If you need to have different stylesheets for different media types, provide a list of CSS files for each output medium. The following example would provide two CSS options &amp;ndash; one for the screen, and one for print:</source>
          <target state="translated">辞書のキーは出力メディアタイプです。これらは、メディア宣言のCSSファイルで受け入れられるものと同じタイプです：「all」、「aural」、「braille」、「embossed」、「handheld」、「print」、「projection」、「screen」、「tty」、「テレビ'。メディアタイプごとに異なるスタイルシートが必要な場合は、出力メディアごとにCSSファイルのリストを提供します。次の例では、2つのCSSオプションを提供します。1つは画面用で、もう1つは印刷用です。</target>
        </trans-unit>
        <trans-unit id="d723eb23edab6a34537328903d64215a5b5e7e57" translate="yes" xml:space="preserve">
          <source>The keys of the dict correspond to the month number (1-indexed) and the values are the displayed months:</source>
          <target state="translated">dictのキーは月番号(1インデックス)に対応し、値は表示されている月になります。</target>
        </trans-unit>
        <trans-unit id="dca7ffd65cac777a2f1f4df5638eef586c3cc716" translate="yes" xml:space="preserve">
          <source>The keyword arguments are made up of any named parts matched by the path expression that are provided, overridden by any arguments specified in the optional &lt;code&gt;kwargs&lt;/code&gt; argument to &lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;django.urls.path()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt;&lt;code&gt;django.urls.re_path()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">キーワード引数は、提供されたパス式と一致する名前付き部分で構成され、&lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt; &lt;code&gt;django.urls.path()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt; &lt;code&gt;django.urls.re_path()&lt;/code&gt; &lt;/a&gt;のオプションの &lt;code&gt;kwargs&lt;/code&gt; 引数で指定された引数によってオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="57f5e78e547c562b097f2832efdfa9bae4d73fe8" translate="yes" xml:space="preserve">
          <source>The keyword arguments are the names of the fields you&amp;rsquo;ve defined on your model. Note that instantiating a model in no way touches your database; for that, you need to &lt;a href=&quot;#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">キーワード引数は、モデルで定義したフィールドの名前です。モデルをインスタンス化してもデータベースには影響しません。そのためには、&lt;a href=&quot;#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;する必要があります。</target>
        </trans-unit>
        <trans-unit id="a2e4838421587a20985c74aae54a1df8aff83e90" translate="yes" xml:space="preserve">
          <source>The keyword arguments that would be passed to the view function, as parsed from the URL.</source>
          <target state="translated">ビュー関数に渡されるキーワード引数。</target>
        </trans-unit>
        <trans-unit id="397a7d054950e21b2c7e46349a34bdf7f4e621ef" translate="yes" xml:space="preserve">
          <source>The label of the field, e.g. &lt;code&gt;Email address&lt;/code&gt;.</source>
          <target state="translated">フィールドのラベル（例： &lt;code&gt;Email address&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="23a2270c0c4fc0cd596055a1c5939ce8d8462b41" translate="yes" xml:space="preserve">
          <source>The last common pattern we&amp;rsquo;ll look at involves doing some extra work before or after calling the generic view.</source>
          <target state="translated">私たちが見る最後の一般的なパターンは、ジェネリックビューを呼び出す前または後に追加の作業を行うことを含みます。</target>
        </trans-unit>
        <trans-unit id="cd1af09749ab1a2fb64ffdab10d00f5c2ac04360" translate="yes" xml:space="preserve">
          <source>The last method in this example is a &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/glossary/#term-property&quot;&gt;property&lt;/a&gt;.</source>
          <target state="translated">この例の最後のメソッドは&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/glossary/#term-property&quot;&gt;プロパティ&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="097ff7d6aaab9a70a0b6a885fd2f62782c4fc606" translate="yes" xml:space="preserve">
          <source>The last method in this example is a &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/glossary/#term-property&quot;&gt;property&lt;/a&gt;.</source>
          <target state="translated">この例の最後のメソッドは&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/glossary/#term-property&quot;&gt;プロパティ&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="ee094e288a920d1ee6d1e8f907851b28dc57dc5f" translate="yes" xml:space="preserve">
          <source>The last of these cases is the most interesting, because it&amp;rsquo;s what makes it possible for users not just to read a website, but to send information back to it too.</source>
          <target state="translated">これらの最後のケースは、ユーザーがWebサイトを読むだけでなく、Webサイトに情報を送信することも可能にするため、最も興味深いものです。</target>
        </trans-unit>
        <trans-unit id="3c9a607eff5b49e4627ffebd90e96258eb1f5054" translate="yes" xml:space="preserve">
          <source>The last step in setting up the Django admin is to hook your &lt;code&gt;AdminSite&lt;/code&gt; instance into your URLconf. Do this by pointing a given URL at the &lt;code&gt;AdminSite.urls&lt;/code&gt; method. It is not necessary to use &lt;a href=&quot;../../urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django管理者を設定する最後のステップは、 &lt;code&gt;AdminSite&lt;/code&gt; インスタンスをURLconfにフックすることです。これを行うには、 &lt;code&gt;AdminSite.urls&lt;/code&gt; メソッドで特定のURLをポイントします。&lt;a href=&quot;../../urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; &lt;/a&gt;を使用する必要はありません。</target>
        </trans-unit>
        <trans-unit id="d2b39229a26808356444c79fae35166f8fac202c" translate="yes" xml:space="preserve">
          <source>The left-hand side - what is being looked up. The object must follow the &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt;.</source>
          <target state="translated">左側-調べているもの。オブジェクトは&lt;a href=&quot;#query-expression&quot;&gt;クエリ式APIに&lt;/a&gt;従う必要があります。</target>
        </trans-unit>
        <trans-unit id="d0b77bd202a2e7aa818b9d2498b8971016e1fea3" translate="yes" xml:space="preserve">
          <source>The left-hand side - what is being transformed. It must follow the &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt;.</source>
          <target state="translated">左側-変換されているもの。&lt;a href=&quot;#query-expression&quot;&gt;クエリ式APIに&lt;/a&gt;従う必要があります。</target>
        </trans-unit>
        <trans-unit id="2e3e8209a61aabc0a2a2ada2ecd908ce92ea854c" translate="yes" xml:space="preserve">
          <source>The length of the filename will not exceed &lt;code&gt;max_length&lt;/code&gt;, if provided. If a free unique filename cannot be found, a &lt;a href=&quot;../exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousFileOperation&lt;/code&gt;&lt;/a&gt; exception will be raised.</source>
          <target state="translated">ファイル名の長さが指定されている場合、 &lt;code&gt;max_length&lt;/code&gt; を超えることはありません。一意のファイル名が見つからない場合は、&lt;a href=&quot;../exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousFileOperation&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="8b61eb79e635aa3b16fc954aa02d7e91c66a6f94" translate="yes" xml:space="preserve">
          <source>The length of the filename will not exceed &lt;code&gt;max_length&lt;/code&gt;, if provided. If a free unique filename cannot be found, a &lt;a href=&quot;../ref/exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousFileOperation&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">ファイル名の長さが指定されている場合、 &lt;code&gt;max_length&lt;/code&gt; を超えることはありません。無料の一意のファイル名が見つからない場合、&lt;a href=&quot;../ref/exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousFileOperation&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="908aa121bf4ba25e0ae31f7de7a9b299472d5a30" translate="yes" xml:space="preserve">
          <source>The lifetime of a database connection, as an integer of seconds. Use &lt;code&gt;0&lt;/code&gt; to close database connections at the end of each request &amp;mdash; Django&amp;rsquo;s historical behavior &amp;mdash; and &lt;code&gt;None&lt;/code&gt; for unlimited persistent connections.</source>
          <target state="translated">秒の整数としてのデータベース接続の存続期間。各リクエストの最後にデータベース接続を閉じるには &lt;code&gt;0&lt;/code&gt; を使用し（Djangoの履歴動作）、無制限の持続的接続には &lt;code&gt;None&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="29278f4b394cdd3103ff91f8f8824b4ed2e41d8c" translate="yes" xml:space="preserve">
          <source>The lifetime of a database connection, in seconds. Use &lt;code&gt;0&lt;/code&gt; to close database connections at the end of each request &amp;mdash; Django&amp;rsquo;s historical behavior &amp;mdash; and &lt;code&gt;None&lt;/code&gt; for unlimited persistent connections.</source>
          <target state="translated">データベース接続の存続時間（秒単位）。各リクエストの最後でデータベース接続を閉じるには &lt;code&gt;0&lt;/code&gt; を使用し（Djangoのこれまでの動作）、無制限の永続的な接続では &lt;code&gt;None&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="8002094dcdaed13967e206ea6c596a8581f87cef" translate="yes" xml:space="preserve">
          <source>The line &lt;code&gt;{% if emails %}&lt;/code&gt; causes &lt;code&gt;QuerySet.__bool__()&lt;/code&gt; to be called, which causes the &lt;code&gt;user.emails.all()&lt;/code&gt; query to be run on the database, and at the least the first line to be turned into an ORM object. If there aren&amp;rsquo;t any results, it will return False, otherwise True.</source>
          <target state="translated">ライン &lt;code&gt;{% if emails %}&lt;/code&gt; せる &lt;code&gt;QuerySet.__bool__()&lt;/code&gt; 原因となる、と呼ばれて &lt;code&gt;user.emails.all()&lt;/code&gt; データベース上で実行されるクエリ、およびORMオブジェクトに点灯する少なくとも最初の行を。結果がない場合はFalseを返し、それ以外の場合はTrueを返します。</target>
        </trans-unit>
        <trans-unit id="1c0db0e2def9d1c60a37ee6be71cd32841316f4f" translate="yes" xml:space="preserve">
          <source>The list contains &lt;a href=&quot;../topics/i18n/index#term-language-code&quot;&gt;language codes&lt;/a&gt; for languages that are written right-to-left.</source>
          <target state="translated">リストには、右から左に書かれる言語の&lt;a href=&quot;../topics/i18n/index#term-language-code&quot;&gt;言語コード&lt;/a&gt;が含まれています。</target>
        </trans-unit>
        <trans-unit id="3cba6b90fba80dd32a8751dcf84005a9eb6cb044" translate="yes" xml:space="preserve">
          <source>The list has a CSS class of &lt;code&gt;errorlist&lt;/code&gt; to allow you to style its appearance. If you wish to further customize the display of errors you can do so by looping over them:</source>
          <target state="translated">リストには、 &lt;code&gt;errorlist&lt;/code&gt; リストのCSSクラスがあり、外観をスタイル設定できます。エラーの表示をさらにカスタマイズしたい場合は、それらをループすることで実行できます。</target>
        </trans-unit>
        <trans-unit id="04a3a7512be2cac93b8b7366f0b94b5e1cc643c2" translate="yes" xml:space="preserve">
          <source>The list is a list of two-tuples in the format (&lt;a href=&quot;../topics/i18n/index#term-language-code&quot;&gt;language code&lt;/a&gt;, &lt;code&gt;language name&lt;/code&gt;) &amp;ndash; for example, &lt;code&gt;('ja', 'Japanese')&lt;/code&gt;. This specifies which languages are available for language selection. See &lt;a href=&quot;../topics/i18n/index&quot;&gt;Internationalization and localization&lt;/a&gt;.</source>
          <target state="translated">リストは、 &lt;code&gt;('ja', 'Japanese')&lt;/code&gt; （&lt;a href=&quot;../topics/i18n/index#term-language-code&quot;&gt;言語コード&lt;/a&gt;、 &lt;code&gt;language name&lt;/code&gt; ）の形式の2つのタプルのリストです。これは、言語選択に使用できる言語を指定します。&lt;a href=&quot;../topics/i18n/index&quot;&gt;国際化とローカリゼーションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2473789b229bfa49a064e7682e7d17ab1a5ef564" translate="yes" xml:space="preserve">
          <source>The list is assumed to be in the proper format. For example, if &lt;code&gt;var&lt;/code&gt; contains &lt;code&gt;['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]&lt;/code&gt;, then &lt;code&gt;{{ var|unordered_list }}&lt;/code&gt; would return:</source>
          <target state="translated">リストは正しい形式であると想定されています。たとえば、 &lt;code&gt;var&lt;/code&gt; に &lt;code&gt;['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]&lt;/code&gt; 場合、 &lt;code&gt;{{ var|unordered_list }}&lt;/code&gt; は次を返します。</target>
        </trans-unit>
        <trans-unit id="5042ef027214a35401db2a04269eeae1dcdfa277" translate="yes" xml:space="preserve">
          <source>The list of HTTP method names that this view will accept.</source>
          <target state="translated">このビューが受け入れるHTTPメソッド名のリスト。</target>
        </trans-unit>
        <trans-unit id="ee0db22a92a601e8f0023ddb845b78e9fd77ffb7" translate="yes" xml:space="preserve">
          <source>The list of authentication backends to use is specified in the &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt; setting. This should be a list of Python path names that point to Python classes that know how to authenticate. These classes can be anywhere on your Python path.</source>
          <target state="translated">使用する認証バックエンドのリストは、&lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt;設定で指定されています。これは、認証方法を知っているPythonクラスを指すPythonパス名のリストである必要があります。これらのクラスは、Pythonパスのどこにでも置くことができます。</target>
        </trans-unit>
        <trans-unit id="7fa0e4449c48fd3fa3fb75ca38f7c6c879924afd" translate="yes" xml:space="preserve">
          <source>The list of fields that should be used to validate the field&amp;rsquo;s value (in the order in which they are provided).</source>
          <target state="translated">フィールドの値を検証するために使用する必要があるフィールドのリスト（提供された順序で）。</target>
        </trans-unit>
        <trans-unit id="5ce66ece9f717e1a77559246ccf1c6f1bcff631e" translate="yes" xml:space="preserve">
          <source>The list of finder backends that know how to find static files in various locations.</source>
          <target state="translated">様々な場所にある静的ファイルを見つける方法を知っているファインダーバックエンドの一覧です。</target>
        </trans-unit>
        <trans-unit id="1a5bbf66f2e405780ce14c2a3669f31d8ee1ecbd" translate="yes" xml:space="preserve">
          <source>The list of headers to use for cache key generation is stored in the same cache as the pages themselves. If the cache ages some data out of the cache, this means that we have to build the response once to get at the Vary header and so at the list of headers to use for the cache key.</source>
          <target state="translated">キャッシュキー生成に使用するヘッダのリストは、ページ自体と同じキャッシュに格納されます。キャッシュがいくつかのデータをキャッシュから取り出してエージングする場合、これは Vary ヘッダを取得するためにレスポンスを一度ビルドしなければならないことを意味し、キャッシュキーに使用するヘッダのリストを取得しなければならないことを意味します。</target>
        </trans-unit>
        <trans-unit id="8df774fc40bf98740c1da86656bf921f29444310" translate="yes" xml:space="preserve">
          <source>The list of individual namespace components in the full application namespace for the URL pattern that matches the URL. For example, if the &lt;code&gt;app_name&lt;/code&gt; is &lt;code&gt;'foo:bar'&lt;/code&gt;, then &lt;code&gt;app_names&lt;/code&gt; will be &lt;code&gt;['foo', 'bar']&lt;/code&gt;.</source>
          <target state="translated">URLに一致するURLパターンの完全なアプリケーション名前空間の個々の名前空間コンポーネントのリスト。たとえば、 &lt;code&gt;app_name&lt;/code&gt; ある &lt;code&gt;'foo:bar'&lt;/code&gt; 、そして &lt;code&gt;app_names&lt;/code&gt; になります &lt;code&gt;['foo', 'bar']&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1f5b46e9e868a322fe41d3784408ab749a0239d" translate="yes" xml:space="preserve">
          <source>The list of individual namespace components in the full instance namespace for the URL pattern that matches the URL. i.e., if the namespace is &lt;code&gt;foo:bar&lt;/code&gt;, then namespaces will be &lt;code&gt;['foo', 'bar']&lt;/code&gt;.</source>
          <target state="translated">URLに一致するURLパターンの完全なインスタンス名前空間の個々の名前空間コンポーネントのリスト。名前空間がある場合、すなわち、 &lt;code&gt;foo:bar&lt;/code&gt; 、そして名前空間になります &lt;code&gt;['foo', 'bar']&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="352db1efbcfe1d21434a452de49b5bf6c094c19f" translate="yes" xml:space="preserve">
          <source>The list of objects on this page.</source>
          <target state="translated">このページのオブジェクトの一覧です。</target>
        </trans-unit>
        <trans-unit id="38c466c9ad4dc792c07b153c84ee1b4a51f84a21" translate="yes" xml:space="preserve">
          <source>The list of polls shows polls that aren&amp;rsquo;t published yet (i.e. those that have a &lt;code&gt;pub_date&lt;/code&gt; in the future). Let&amp;rsquo;s fix that.</source>
          <target state="translated">世論調査のリストには、まだ公開されていない世論調査（つまり、将来 &lt;code&gt;pub_date&lt;/code&gt; を持つ世論調査）が表示されます。修正しましょう。</target>
        </trans-unit>
        <trans-unit id="d32b0449e83211999f9608ac231c68d8ee1aeeeb" translate="yes" xml:space="preserve">
          <source>The list of routers that will be used to determine which database to use when performing a database query.</source>
          <target state="translated">データベースクエリを実行する際に、どのデータベースを使用するかを決定するために使用されるルータのリスト。</target>
        </trans-unit>
        <trans-unit id="d84dcd1f5e2293f80dda03ec41a237b17534de0c" translate="yes" xml:space="preserve">
          <source>The list of validators that are used to check the strength of user&amp;rsquo;s passwords. See &lt;a href=&quot;../topics/auth/passwords#password-validation&quot;&gt;Password validation&lt;/a&gt; for more details. By default, no validation is performed and all passwords are accepted.</source>
          <target state="translated">ユーザーのパスワードの強度をチェックするために使用されるバリデーターのリスト。詳細については、&lt;a href=&quot;../topics/auth/passwords#password-validation&quot;&gt;パスワードの検証&lt;/a&gt;を参照してください。デフォルトでは、検証は行われず、すべてのパスワードが受け入れられます。</target>
        </trans-unit>
        <trans-unit id="be41c13b237df7e153278422285c9b3aae3b4560" translate="yes" xml:space="preserve">
          <source>The live server listens on &lt;code&gt;localhost&lt;/code&gt; and binds to port 0 which uses a free port assigned by the operating system. The server&amp;rsquo;s URL can be accessed with &lt;code&gt;self.live_server_url&lt;/code&gt; during the tests.</source>
          <target state="translated">ライブサーバーは &lt;code&gt;localhost&lt;/code&gt; をリッスンし、オペレーティングシステムによって割り当てられた空きポートを使用するポート0にバインドします。サーバーのURLは、テスト中に &lt;code&gt;self.live_server_url&lt;/code&gt; でアクセスできます。</target>
        </trans-unit>
        <trans-unit id="4f48b0167209c5587b0fe04291a526c08c33524f" translate="yes" xml:space="preserve">
          <source>The local filesystem path where the file can be opened using Python&amp;rsquo;s standard &lt;code&gt;open()&lt;/code&gt;. For storage systems that aren&amp;rsquo;t accessible from the local filesystem, this will raise &lt;code&gt;NotImplementedError&lt;/code&gt; instead.</source>
          <target state="translated">Pythonの標準 &lt;code&gt;open()&lt;/code&gt; を使用してファイルを開くことができるローカルファイルシステムパス。ローカルファイルシステムからアクセスできないストレージシステムの場合は、代わりに &lt;code&gt;NotImplementedError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="7a1061cdc3e5384fbeb5f9f675cd2e59f22fddb4" translate="yes" xml:space="preserve">
          <source>The location of the cache to use. This might be the directory for a file system cache, a host and port for a memcache server, or an identifying name for a local memory cache. e.g.:</source>
          <target state="translated">使用するキャッシュの場所を指定します。これは、ファイルシステムキャッシュのディレクトリ、memcache サーバのホストとポート、あるいはローカルメモリキャッシュの識別名となります。</target>
        </trans-unit>
        <trans-unit id="d7e2ca0e60211a0cb354f673482c031189a40c08" translate="yes" xml:space="preserve">
          <source>The logger instance contains an entry method for each of the default log levels:</source>
          <target state="translated">ロガー インスタンスには、既定のログ レベルのそれぞれのエントリ メソッドが含まれます。</target>
        </trans-unit>
        <trans-unit id="a659c101e4877f63bce98cd3fb9fc2c0f7f25ac1" translate="yes" xml:space="preserve">
          <source>The logic here is that if you change the URL structure of your objects, even for something small like correcting a spelling error, you don&amp;rsquo;t want to have to track down every place that the URL might be created. Specify it once, in &lt;code&gt;get_absolute_url()&lt;/code&gt; and have all your other code call that one place.</source>
          <target state="translated">ここでのロジックは、オブジェクトのURL構造を変更する場合、スペルミスの修正などの小さなことでも、URLが作成された可能性のあるすべての場所を追跡する必要はないということです。 &lt;code&gt;get_absolute_url()&lt;/code&gt; で一度指定して、他のすべてのコードで1つの場所を呼び出すようにします。</target>
        </trans-unit>
        <trans-unit id="687128deb38f53e7b71652784c2690bc5851ee61" translate="yes" xml:space="preserve">
          <source>The lookup API has two components: a &lt;a href=&quot;#django.db.models.lookups.RegisterLookupMixin&quot;&gt;&lt;code&gt;RegisterLookupMixin&lt;/code&gt;&lt;/a&gt; class that registers lookups, and the &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt;, a set of methods that a class has to implement to be registrable as a lookup.</source>
          <target state="translated">ルックアップAPIには2つのコンポーネントがあります。1つはルックアップを登録する&lt;a href=&quot;#django.db.models.lookups.RegisterLookupMixin&quot;&gt; &lt;code&gt;RegisterLookupMixin&lt;/code&gt; &lt;/a&gt;クラス、もう1つはクラスがルックアップとして登録できるようにクラスが実装する必要がある一連のメソッドである&lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="284a4884e4639476c6e4d993dcd3436807855f11" translate="yes" xml:space="preserve">
          <source>The lookup examples given above implicitly use the &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-exact&quot;&gt;&lt;code&gt;exact&lt;/code&gt;&lt;/a&gt; lookup. Key, index, and path transforms can also be chained with: &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-icontains&quot;&gt;&lt;code&gt;icontains&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-endswith&quot;&gt;&lt;code&gt;endswith&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-iendswith&quot;&gt;&lt;code&gt;iendswith&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-iexact&quot;&gt;&lt;code&gt;iexact&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-regex&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-iregex&quot;&gt;&lt;code&gt;iregex&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-startswith&quot;&gt;&lt;code&gt;startswith&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-istartswith&quot;&gt;&lt;code&gt;istartswith&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-lt&quot;&gt;&lt;code&gt;lt&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-lte&quot;&gt;&lt;code&gt;lte&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-gt&quot;&gt;&lt;code&gt;gt&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-gte&quot;&gt;&lt;code&gt;gte&lt;/code&gt;&lt;/a&gt;, as well as with &lt;a href=&quot;#containment-and-key-lookups&quot;&gt;Containment and key lookups&lt;/a&gt;.</source>
          <target state="translated">上記のルックアップの例では、&lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-exact&quot;&gt; &lt;code&gt;exact&lt;/code&gt; &lt;/a&gt;ルックアップを暗黙的に使用しています。キー、インデックス、パスの変換は、&lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-icontains&quot;&gt; &lt;code&gt;icontains&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-endswith&quot;&gt; &lt;code&gt;endswith&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-iendswith&quot;&gt; &lt;code&gt;iendswith&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-iexact&quot;&gt; &lt;code&gt;iexact&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-regex&quot;&gt; &lt;code&gt;regex&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-iregex&quot;&gt; &lt;code&gt;iregex&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-startswith&quot;&gt; &lt;code&gt;startswith&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-istartswith&quot;&gt; &lt;code&gt;istartswith&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-lt&quot;&gt; &lt;code&gt;lt&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-lte&quot;&gt; &lt;code&gt;lte&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-gt&quot;&gt; &lt;code&gt;gt&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-gte&quot;&gt; &lt;code&gt;gte&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#containment-and-key-lookups&quot;&gt;およびContainmentと&lt;/a&gt;keylookupsでチェーンすることもできます。</target>
        </trans-unit>
        <trans-unit id="0276269b885cef976968811b2edeaa225cfd17d5" translate="yes" xml:space="preserve">
          <source>The lookup key &amp;mdash; &lt;code&gt;'django'&lt;/code&gt; in this example &amp;mdash; is the engine&amp;rsquo;s &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">検索キー（この例では &lt;code&gt;'django'&lt;/code&gt; は、エンジンの&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="4d740394561eb705a4868cc313d2df0c5ae0ff98" translate="yes" xml:space="preserve">
          <source>The lookup parameters (&lt;code&gt;**kwargs&lt;/code&gt; in the above function definitions) should be in the format described in &lt;a href=&quot;#field-lookups&quot;&gt;Field lookups&lt;/a&gt; below.</source>
          <target state="translated">ルックアップパラメータ（上記の関数定義では &lt;code&gt;**kwargs&lt;/code&gt; ）は、以下の&lt;a href=&quot;#field-lookups&quot;&gt;フィールドルックアップで&lt;/a&gt;説明されている形式である必要があります。</target>
        </trans-unit>
        <trans-unit id="c1aa2d8b25c68a3972c459d52d5d1df4453e745e" translate="yes" xml:space="preserve">
          <source>The lookup parameters (&lt;code&gt;**kwargs&lt;/code&gt;) should be in the format described in &lt;a href=&quot;#id4&quot;&gt;Field lookups&lt;/a&gt; below. Multiple parameters are joined via &lt;code&gt;AND&lt;/code&gt; in the underlying SQL statement, and the whole thing is enclosed in a &lt;code&gt;NOT()&lt;/code&gt;.</source>
          <target state="translated">ルックアップパラメータ（ &lt;code&gt;**kwargs&lt;/code&gt; ）は、以下の&lt;a href=&quot;#id4&quot;&gt;フィールドルックアップで&lt;/a&gt;説明されている形式である必要があります。基になるSQLステートメントで複数のパラメーターが &lt;code&gt;AND&lt;/code&gt; で結合され、全体が &lt;code&gt;NOT()&lt;/code&gt; で囲まれています。</target>
        </trans-unit>
        <trans-unit id="8624505a11a1f96bc7dedf399ff95d5f7f44e9a7" translate="yes" xml:space="preserve">
          <source>The lookup parameters (&lt;code&gt;**kwargs&lt;/code&gt;) should be in the format described in &lt;a href=&quot;#id4&quot;&gt;Field lookups&lt;/a&gt; below. Multiple parameters are joined via &lt;code&gt;AND&lt;/code&gt; in the underlying SQL statement.</source>
          <target state="translated">ルックアップパラメータ（ &lt;code&gt;**kwargs&lt;/code&gt; ）は、以下の&lt;a href=&quot;#id4&quot;&gt;フィールドルックアップで&lt;/a&gt;説明されている形式である必要があります。複数のパラメーターは、基になるSQLステートメントで &lt;code&gt;AND&lt;/code&gt; を介して結合されます。</target>
        </trans-unit>
        <trans-unit id="9c54a4c642c9e6f0c9ae93e6eab22d2b4de903fd" translate="yes" xml:space="preserve">
          <source>The low level APIs are only useful if you&amp;rsquo;re implementing your own transaction management.</source>
          <target state="translated">低レベルAPIは、独自のトランザクション管理を実装する場合にのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="526a0d5ca4718e8069fe06342982ba02ef02340b" translate="yes" xml:space="preserve">
          <source>The low level APIs for savepoints are only usable inside a transaction ie. inside an &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; block.</source>
          <target state="translated">セーブポイントの低レベルAPIは、トランザクション内でのみ使用できます。内部&lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt;ブロック。</target>
        </trans-unit>
        <trans-unit id="b0ca2d43ff9da88d8e9a9e84a1dde1af555645e3" translate="yes" xml:space="preserve">
          <source>The low-level cache API</source>
          <target state="translated">低レベルのキャッシュ API</target>
        </trans-unit>
        <trans-unit id="3e4ac3cef9202e0612f4766b7c338a2d2967c8d9" translate="yes" xml:space="preserve">
          <source>The low-level framework</source>
          <target state="translated">低レベルフレームワーク</target>
        </trans-unit>
        <trans-unit id="a2521b2e894f8fd863f1d83feddb4c441a705c60" translate="yes" xml:space="preserve">
          <source>The low-level render API</source>
          <target state="translated">低レベルのレンダー API</target>
        </trans-unit>
        <trans-unit id="9a130d432120892a195d3e0022cff8a6aafc70ad" translate="yes" xml:space="preserve">
          <source>The lower-left coordinate, as a tuple.</source>
          <target state="translated">タプルとしての左下座標。</target>
        </trans-unit>
        <trans-unit id="cc7f347ba6ea37d89eb064fb060fa13066ba1124" translate="yes" xml:space="preserve">
          <source>The main benefit of using &lt;a href=&quot;expressions#django.db.models.expressions.RawSQL&quot;&gt;&lt;code&gt;RawSQL&lt;/code&gt;&lt;/a&gt; is that you can set &lt;code&gt;output_field&lt;/code&gt; if needed. The main downside is that if you refer to some table alias of the queryset in the raw SQL, then it is possible that Django might change that alias (for example, when the queryset is used as a subquery in yet another query).</source>
          <target state="translated">&lt;a href=&quot;expressions#django.db.models.expressions.RawSQL&quot;&gt; &lt;code&gt;RawSQL&lt;/code&gt; &lt;/a&gt;を使用する主な利点は、必要に応じて &lt;code&gt;output_field&lt;/code&gt; を設定できることです。主な欠点は、生のSQLでクエリセットのテーブルエイリアスを参照する場合、Djangoがそのエイリアスを変更する可能性があることです（たとえば、クエリセットがさらに別のクエリでサブクエリとして使用される場合）。</target>
        </trans-unit>
        <trans-unit id="df9bb44008fd541194270c3cbcdbf422f7fd65a1" translate="yes" xml:space="preserve">
          <source>The main benefits are the ability to service hundreds of connections without using Python threads. This allows you to use slow streaming, long-polling, and other exciting response types.</source>
          <target state="translated">主な利点は、Pythonのスレッドを使わずに数百のコネクションをサービスできることです。これにより、スローストリーミングやロングポーリング、その他のエキサイティングなレスポンスタイプを使用することができます。</target>
        </trans-unit>
        <trans-unit id="029d2026069ff1a0dc50a63a4caae4c10a9f46a3" translate="yes" xml:space="preserve">
          <source>The main difference between &lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt;&lt;code&gt;send_mass_mail()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt; is that &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt; opens a connection to the mail server each time it&amp;rsquo;s executed, while &lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt;&lt;code&gt;send_mass_mail()&lt;/code&gt;&lt;/a&gt; uses a single connection for all of its messages. This makes &lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt;&lt;code&gt;send_mass_mail()&lt;/code&gt;&lt;/a&gt; slightly more efficient.</source>
          <target state="translated">&lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt; &lt;code&gt;send_mass_mail()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#django.core.mail.send_mail&quot;&gt; &lt;code&gt;send_mail()&lt;/code&gt; &lt;/a&gt;の主な違いは、&lt;a href=&quot;#django.core.mail.send_mail&quot;&gt; &lt;code&gt;send_mail()&lt;/code&gt; &lt;/a&gt;が実行されるたびにメールサーバーへの接続を開くのに対して、&lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt; &lt;code&gt;send_mass_mail()&lt;/code&gt; &lt;/a&gt;はすべてのメッセージに対して単一の接続を使用することです。これにより、&lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt; &lt;code&gt;send_mass_mail()&lt;/code&gt; が&lt;/a&gt;少し効率的になります。</target>
        </trans-unit>
        <trans-unit id="ee849a007c2cc0544bfee8bbc54e8a9c99cb790d" translate="yes" xml:space="preserve">
          <source>The main drawbacks of &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/myisam-storage-engine.html&quot;&gt;MyISAM&lt;/a&gt; are that it doesn&amp;rsquo;t support transactions or enforce foreign-key constraints.</source>
          <target state="translated">&lt;a href=&quot;https://dev.mysql.com/doc/refman/en/myisam-storage-engine.html&quot;&gt;MyISAM&lt;/a&gt;の主な欠点は、トランザクションをサポートしていないか、外部キーの制約を適用できないことです。</target>
        </trans-unit>
        <trans-unit id="b716970f259f9a6cd2b19a9671b50a7df6b1fc2e" translate="yes" xml:space="preserve">
          <source>The main solution to these problems is the following &lt;code&gt;JavaScriptCatalog&lt;/code&gt; view, which generates a JavaScript code library with functions that mimic the &lt;code&gt;gettext&lt;/code&gt; interface, plus an array of translation strings.</source>
          <target state="translated">これらの問題の主な解決策は、次の &lt;code&gt;JavaScriptCatalog&lt;/code&gt; ビューです。これは、 &lt;code&gt;gettext&lt;/code&gt; インターフェースを模倣する関数と翻訳文字列の配列を含むJavaScriptコードライブラリを生成します。</target>
        </trans-unit>
        <trans-unit id="f336b635d846500908b16d31047dfb778ce719ad" translate="yes" xml:space="preserve">
          <source>The management form is available as an attribute of the formset itself. When rendering a formset in a template, you can include all the management data by rendering &lt;code&gt;{{ my_formset.management_form }}&lt;/code&gt; (substituting the name of your formset as appropriate).</source>
          <target state="translated">管理フォームは、フォームセット自体の属性として使用できます。テンプレートに &lt;code&gt;{{ my_formset.management_form }}&lt;/code&gt; レンダリングする場合、{{my_formset.management_form}}をレンダリングすることで（必要に応じてフォームセットの名前を置き換えて）すべての管理データを含めることができます。</target>
        </trans-unit>
        <trans-unit id="975428386ba20246f9798d41d057f93b042f465c" translate="yes" xml:space="preserve">
          <source>The master class-based base view. All other class-based views inherit from this base class. It isn&amp;rsquo;t strictly a generic view and thus can also be imported from &lt;code&gt;django.views&lt;/code&gt;.</source>
          <target state="translated">マスタークラスベースのベースビュー。他のすべてのクラスベースのビューは、この基本クラスを継承します。これは厳密には汎用的なビューではないため、 &lt;code&gt;django.views&lt;/code&gt; からインポートすることもできます。</target>
        </trans-unit>
        <trans-unit id="d241bf7b121d0092e7ef8f8e3d86c4cc463d68eb" translate="yes" xml:space="preserve">
          <source>The master router is used by Django&amp;rsquo;s database operations to allocate database usage. Whenever a query needs to know which database to use, it calls the master router, providing a model and a hint (if available). Django then tries each router in turn until a database suggestion can be found. If no suggestion can be found, it tries the current &lt;a href=&quot;../../ref/models/instances#django.db.models.Model._state&quot;&gt;&lt;code&gt;instance._state.db&lt;/code&gt;&lt;/a&gt; of the hint instance. If a hint instance wasn&amp;rsquo;t provided, or &lt;a href=&quot;../../ref/models/instances#django.db.models.Model._state&quot;&gt;&lt;code&gt;instance._state.db&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;None&lt;/code&gt;, the master router will allocate the &lt;code&gt;default&lt;/code&gt; database.</source>
          <target state="translated">マスタールーターは、データベースの使用量を割り当てるためにDjangoのデータベース操作によって使用されます。クエリが使用するデータベースを知る必要があるときはいつでも、マスタールーターを呼び出して、モデルとヒント（利用可能な場合）を提供します。次に、Djangoは、データベースの提案が見つかるまで、各ルーターを順番に試行します。提案が見つからない&lt;a href=&quot;../../ref/models/instances#django.db.models.Model._state&quot;&gt; &lt;code&gt;instance._state.db&lt;/code&gt; &lt;/a&gt;は、ヒントインスタンスの現在のinstance._state.dbを試行します。ヒントインスタンスが提供されなかった場合、または&lt;a href=&quot;../../ref/models/instances#django.db.models.Model._state&quot;&gt; &lt;code&gt;instance._state.db&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;None&lt;/code&gt; の場合、マスタールーターは &lt;code&gt;default&lt;/code&gt; データベースを割り当てます。</target>
        </trans-unit>
        <trans-unit id="77d55017d73e6f752fb81670f8b49fb4a767c01e" translate="yes" xml:space="preserve">
          <source>The master router is used by Django&amp;rsquo;s database operations to allocate database usage. Whenever a query needs to know which database to use, it calls the master router, providing a model and a hint (if available). Django then tries each router in turn until a database suggestion can be found. If no suggestion can be found, it tries the current &lt;code&gt;_state.db&lt;/code&gt; of the hint instance. If a hint instance wasn&amp;rsquo;t provided, or the instance doesn&amp;rsquo;t currently have database state, the master router will allocate the &lt;code&gt;default&lt;/code&gt; database.</source>
          <target state="translated">マスタールーターは、Djangoのデータベース操作でデータベースの使用を割り当てるために使用されます。クエリは、使用するデータベースを知る必要があるときはいつでも、マスタールーターを呼び出し、モデルとヒント（利用可能な場合）を提供します。Djangoは、データベースの提案が見つかるまで、各ルーターを順番に試します。提案が見つからない場合は、ヒントインスタンスの現在の &lt;code&gt;_state.db&lt;/code&gt; を試します。ヒントインスタンスが提供されなかった場合、またはインスタンスに現在データベースの状態がない場合、マスタールーターは &lt;code&gt;default&lt;/code&gt; データベースを割り当てます。</target>
        </trans-unit>
        <trans-unit id="620f9f971ca7545e2e1072b17b40e60ee0cb0c8d" translate="yes" xml:space="preserve">
          <source>The match mode for &lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/a&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt; &lt;code&gt;regex&lt;/code&gt; &lt;/a&gt;の一致モード。デフォルトは &lt;code&gt;False&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f1e513aead5b12255955659b8cf2b80be1b6b580" translate="yes" xml:space="preserve">
          <source>The maximum length (in characters) of the field. The max_length is enforced at the database level and in Django&amp;rsquo;s validation using &lt;a href=&quot;../validators#django.core.validators.MaxLengthValidator&quot;&gt;&lt;code&gt;MaxLengthValidator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">フィールドの最大長（文字数）。max_lengthはデータベースレベルで適用され、Djangoの検証では&lt;a href=&quot;../validators#django.core.validators.MaxLengthValidator&quot;&gt; &lt;code&gt;MaxLengthValidator&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="037bd1a1440adda1a291120295b62497fe60ae9e" translate="yes" xml:space="preserve">
          <source>The maximum length (in characters) of the field. The maximum length is enforced in Django&amp;rsquo;s validation using &lt;a href=&quot;../validators#django.core.validators.MaxLengthValidator&quot;&gt;&lt;code&gt;MaxLengthValidator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">フィールドの最大長（文字数）。最大長は、&lt;a href=&quot;../validators#django.core.validators.MaxLengthValidator&quot;&gt; &lt;code&gt;MaxLengthValidator&lt;/code&gt; &lt;/a&gt;を使用したDjangoの検証で適用されます。</target>
        </trans-unit>
        <trans-unit id="3f6963c8f2a731388e55b8dfecc905f73dd376bc" translate="yes" xml:space="preserve">
          <source>The maximum number of decimal places permitted.</source>
          <target state="translated">許容される小数点以下の最大桁数。</target>
        </trans-unit>
        <trans-unit id="ec30906753aab508c52a426c8da02b4a98b905f8" translate="yes" xml:space="preserve">
          <source>The maximum number of digits (those before the decimal point plus those after the decimal point, with leading zeros stripped) permitted in the value.</source>
          <target state="translated">値の中で許容される最大桁数(小数点以下の桁数に小数点以下の桁数を加えたもので、先頭のゼロを取り除いたもの)。</target>
        </trans-unit>
        <trans-unit id="7a22f82bc47caf7130f3beae0f8f8e382172fe51" translate="yes" xml:space="preserve">
          <source>The maximum number of digits allowed in the number. Note that this number must be greater than or equal to &lt;code&gt;decimal_places&lt;/code&gt;.</source>
          <target state="translated">数値で使用できる最大桁数。この数は &lt;code&gt;decimal_places&lt;/code&gt; 以上でなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c167eb262474d9d7649cc6b34d6aa61157de151d" translate="yes" xml:space="preserve">
          <source>The maximum number of parameters that may be received via GET or POST before a &lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;TooManyFields&lt;/code&gt;) is raised. You can set this to &lt;code&gt;None&lt;/code&gt; to disable the check. Applications that are expected to receive an unusually large number of form fields should tune this setting.</source>
          <target state="translated">&lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousOperation&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;TooManyFields&lt;/code&gt; ）が発生する前にGETまたはPOSTを介して受信できるパラメーターの最大数。これを「 &lt;code&gt;None&lt;/code&gt; に設定して、チェックを無効にすることができます。非常に多くのフォームフィールドを受け取ることが予想されるアプリケーションでは、この設定を調整する必要があります。</target>
        </trans-unit>
        <trans-unit id="682cb5709db5299d33be45387c00d3db6138f770" translate="yes" xml:space="preserve">
          <source>The maximum pixel value of the band (excluding the &amp;ldquo;no data&amp;rdquo; value).</source>
          <target state="translated">バンドの最大ピクセル値（「データなし」の値を除く）。</target>
        </trans-unit>
        <trans-unit id="6d57b41141db2056397f4308084ace5a47400304" translate="yes" xml:space="preserve">
          <source>The maximum size (in bytes) that an upload will be before it gets streamed to the file system. See &lt;a href=&quot;../topics/files&quot;&gt;Managing files&lt;/a&gt; for details.</source>
          <target state="translated">アップロードがファイルシステムにストリーミングされる前の最大サイズ（バイト単位）。詳細については、&lt;a href=&quot;../topics/files&quot;&gt;ファイルの管理&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7a98e6ed2d92323b4e4a1333e3d67c09094b6976" translate="yes" xml:space="preserve">
          <source>The maximum size in bytes that a request body may be before a &lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;RequestDataTooBig&lt;/code&gt;) is raised. The check is done when accessing &lt;code&gt;request.body&lt;/code&gt; or &lt;code&gt;request.POST&lt;/code&gt; and is calculated against the total request size excluding any file upload data. You can set this to &lt;code&gt;None&lt;/code&gt; to disable the check. Applications that are expected to receive unusually large form posts should tune this setting.</source>
          <target state="translated">&lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousOperation&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;RequestDataTooBig&lt;/code&gt; ）が発生する前のリクエストボディの最大サイズ（バイト単位）。チェックは、 &lt;code&gt;request.body&lt;/code&gt; または &lt;code&gt;request.POST&lt;/code&gt; にアクセスするときに行われ、ファイルアップロードデータを除いたリクエストの合計サイズに対して計算されます。これを「 &lt;code&gt;None&lt;/code&gt; に設定して、チェックを無効にすることができます。異常に大きなフォームの投稿を受け取ることが予想されるアプリケーションでは、この設定を調整する必要があります。</target>
        </trans-unit>
        <trans-unit id="1874b9e490548adb53b57fe2086e057e8651752c" translate="yes" xml:space="preserve">
          <source>The maximum size that the DATAFILE is allowed to grow to.</source>
          <target state="translated">DATAFILEが成長することが許される最大サイズ。</target>
        </trans-unit>
        <trans-unit id="7a59a68017db3ce10acbaf32799a35c947e9f15b" translate="yes" xml:space="preserve">
          <source>The maximum size that the DATAFILE_TMP is allowed to grow to.</source>
          <target state="translated">DATAFILE_TMP が成長することができる最大サイズ。</target>
        </trans-unit>
        <trans-unit id="fd1fc8f8d716647e7a02404093fe6dca1f7e22bc" translate="yes" xml:space="preserve">
          <source>The mean of all pixel values of the band (excluding the &amp;ldquo;no data&amp;rdquo; value).</source>
          <target state="translated">バンドのすべてのピクセル値の平均（「データなし」の値を除く）。</target>
        </trans-unit>
        <trans-unit id="c2bb72583b48a36e3f3b76cffb04451146899512" translate="yes" xml:space="preserve">
          <source>The messages are marked to be cleared when the storage instance is iterated (and cleared when the response is processed).</source>
          <target state="translated">メッセージは、ストレージインスタンスが反復処理されたときにクリアされるようにマークされています(レスポンスが処理されたときにクリアされます)。</target>
        </trans-unit>
        <trans-unit id="679921afb83b3374dbeb1f6690418b9b230e09d7" translate="yes" xml:space="preserve">
          <source>The messages framework</source>
          <target state="translated">メッセージフレームワーク</target>
        </trans-unit>
        <trans-unit id="bcaf4e14ba9ce595c2d57efd12477862d5fbecfc" translate="yes" xml:space="preserve">
          <source>The messages framework can use different backends to store temporary messages.</source>
          <target state="translated">messages フレームワークは一時的なメッセージを保存するために異なるバックエンドを使うことができます。</target>
        </trans-unit>
        <trans-unit id="946da20094bf98a1fbc1a7e70434b878af7c1ec5" translate="yes" xml:space="preserve">
          <source>The messages framework is based on a configurable level architecture similar to that of the Python logging module. Message levels allow you to group messages by type so they can be filtered or displayed differently in views and templates.</source>
          <target state="translated">メッセージフレームワークは、Python のロギングモジュールに似た設定可能なレベルアーキテクチャに基づいています。メッセージレベルでは、タイプ別にメッセージをグループ化して、ビューやテンプレートの中でフィルタリングしたり、異なる表示をしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="abc5ff0981a223de9d7ebc8dbe2c56ed3a022401" translate="yes" xml:space="preserve">
          <source>The metadata of this band. The functionality is identical to &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.metadata&quot;&gt;&lt;code&gt;GDALRaster.metadata&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このバンドのメタデータ。機能は&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.metadata&quot;&gt; &lt;code&gt;GDALRaster.metadata&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="05c7d47a95b26a5b7b622a8b38916086f695d65f" translate="yes" xml:space="preserve">
          <source>The metadata of this raster, represented as a nested dictionary. The first-level key is the metadata domain. The second-level contains the metadata item names and values from each domain.</source>
          <target state="translated">このラスタのメタデータは、入れ子になった辞書として表現されます。第1レベルのキーはメタデータのドメインです。第2レベルには、各ドメインのメタデータ項目名と値が格納されています。</target>
        </trans-unit>
        <trans-unit id="7da5ce0b0d9eb842fded76cda2aa56ff0449f389" translate="yes" xml:space="preserve">
          <source>The method doesn&amp;rsquo;t need to verify that the template exists at a given path, but it should ensure the path is valid. For instance, the filesystem loader makes sure the path lies under a valid template directory.</source>
          <target state="translated">メソッドは、テンプレートが特定のパスに存在することを確認する必要はありませんが、パスが有効であることを確認する必要があります。たとえば、ファイルシステムローダーは、パスが有効なテンプレートディレクトリの下にあることを確認します。</target>
        </trans-unit>
        <trans-unit id="2d4e0bb3536d92174306b64eb9b3f91b660fca55" translate="yes" xml:space="preserve">
          <source>The method that is used when creating the hashed name of a file. Needs to return a hash for the given file name and content. By default it calculates a MD5 hash from the content&amp;rsquo;s chunks as mentioned above. Feel free to override this method to use your own hashing algorithm.</source>
          <target state="translated">ファイルのハッシュ名を作成するときに使用される方法。指定されたファイル名とコンテンツのハッシュを返す必要があります。デフォルトでは、前述のようにコンテンツのチャンクからMD5ハッシュを計算します。このメソッドをオーバーライドして、独自のハッシュアルゴリズムを使用してください。</target>
        </trans-unit>
        <trans-unit id="e02ff96a70373150944fa3cf71734857d0e73b34" translate="yes" xml:space="preserve">
          <source>The method&amp;rsquo;s result affects whether or not a field in a model form &lt;a href=&quot;../../topics/forms/modelforms#topics-modelform-save&quot;&gt;falls back to its default&lt;/a&gt;.</source>
          <target state="translated">メソッドの結果は、モデルフォームのフィールドが&lt;a href=&quot;../../topics/forms/modelforms#topics-modelform-save&quot;&gt;デフォルトに戻る&lt;/a&gt;かどうかに影響します。</target>
        </trans-unit>
        <trans-unit id="2b9e9d922de37731b658ab20d1cffacd6cb0024c" translate="yes" xml:space="preserve">
          <source>The middleware is strongly recommended for any site that does not need to have its pages wrapped in a frame by third party sites, or only needs to allow that for a small section of the site.</source>
          <target state="translated">このミドルウェアは、サードパーティのサイトでページをフレームで包む必要がないサイトや、サイトの一部だけをフレームで包む必要があるサイトに強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="501246c391913f153cfb889b8189b3100c025574" translate="yes" xml:space="preserve">
          <source>The middleware only gets activated for 404s &amp;ndash; not for 500s or responses of any other status code.</source>
          <target state="translated">ミドルウェアは404でのみアクティブ化されます。500や他のステータスコードの応答ではアクティブ化されません。</target>
        </trans-unit>
        <trans-unit id="f71b0623a74c63465319f60222a670ec071a2028" translate="yes" xml:space="preserve">
          <source>The middleware will only add a trailing slash and redirect (by looking at the &lt;a href=&quot;../settings#std:setting-APPEND_SLASH&quot;&gt;&lt;code&gt;APPEND_SLASH&lt;/code&gt;&lt;/a&gt; setting) if the resulting URL refers to a valid flatpage. Redirects are permanent (301 status code).</source>
          <target state="translated">結果のURLが有効なフラットページを参照している場合、ミドルウェアは末尾のスラッシュとリダイレクト（&lt;a href=&quot;../settings#std:setting-APPEND_SLASH&quot;&gt; &lt;code&gt;APPEND_SLASH&lt;/code&gt; &lt;/a&gt;設定を確認することによって）のみを追加します。リダイレクトは永続的です（301ステータスコード）。</target>
        </trans-unit>
        <trans-unit id="c20fbe3e7feb8c8f6800c64fcd3427aa71102dbd" translate="yes" xml:space="preserve">
          <source>The migration files for each app live in a &amp;ldquo;migrations&amp;rdquo; directory inside of that app, and are designed to be committed to, and distributed as part of, its codebase. You should be making them once on your development machine and then running the same migrations on your colleagues&amp;rsquo; machines, your staging machines, and eventually your production machines.</source>
          <target state="translated">各アプリの移行ファイルは、そのアプリ内の「migrations」ディレクトリにあり、そのコードベースにコミットされ、その一部として配布されるように設計されています。開発マシンで一度作成してから、同僚のマシン、ステージングマシン、そして最終的には本番マシンで同じ移行を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="2149c96c766867703d83ae08713e6f458df2b430" translate="yes" xml:space="preserve">
          <source>The migration plan that is going to be used for the migration run. While the plan is not public API, this allows for the rare cases when it is necessary to know the plan. A plan is a list of two-tuples with the first item being the instance of a migration class and the second item showing if the migration was rolled back (&lt;code&gt;True&lt;/code&gt;) or applied (&lt;code&gt;False&lt;/code&gt;).</source>
          <target state="translated">移行の実行に使用される予定の移行計画。プランはパブリックAPIではありませんが、これにより、プランを知る必要があるまれなケースが可能になります。プランは2タプルのリストで、最初の項目は移行クラスのインスタンスで、2番目の項目は移行がロールバックされたか（ &lt;code&gt;True&lt;/code&gt; ）、適用されたか（ &lt;code&gt;False&lt;/code&gt; ）を示します。</target>
        </trans-unit>
        <trans-unit id="12a8e64c1a85376f2269b1de4266fc493270fecd" translate="yes" xml:space="preserve">
          <source>The migration plan that was used for the migration run. While the plan is not public API, this allows for the rare cases when it is necessary to know the plan. A plan is a list of two-tuples with the first item being the instance of a migration class and the second item showing if the migration was rolled back (&lt;code&gt;True&lt;/code&gt;) or applied (&lt;code&gt;False&lt;/code&gt;).</source>
          <target state="translated">移行の実行に使用された移行計画。プランはパブリックAPIではありませんが、これにより、プランを知る必要があるまれなケースが可能になります。プランは2タプルのリストで、最初の項目は移行クラスのインスタンスで、2番目の項目は移行がロールバックされたか（ &lt;code&gt;True&lt;/code&gt; ）、適用されたか（ &lt;code&gt;False&lt;/code&gt; ）を示します。</target>
        </trans-unit>
        <trans-unit id="0251ce19e6e1513662181aba489dd0c06a5da39d" translate="yes" xml:space="preserve">
          <source>The migrations system will maintain backwards-compatibility according to the same policy as the rest of Django, so migration files generated on Django X.Y should run unchanged on Django X.Y+1. The migrations system does not promise forwards-compatibility, however. New features may be added, and migration files generated with newer versions of Django may not work on older versions.</source>
          <target state="translated">移行システムは Django の他の部分と同じポリシーに従って後方互換性を維持しますので、Django X.Y で生成された移行ファイルは Django X.Y+1 でも変更されずに実行されます。しかし、移行システムは前方互換性を約束するものではありません。新しい機能が追加されるかもしれませんし、新しいバージョンの Django で生成されたマイグレーションファイルは古いバージョンでは動作しないかもしれません。</target>
        </trans-unit>
        <trans-unit id="04d66b29b059dd9530bfc58fdebce59ae171833c" translate="yes" xml:space="preserve">
          <source>The minimal validation requirements, used in Django&amp;rsquo;s admin and in automatically-generated forms.</source>
          <target state="translated">Djangoの管理と自動生成フォームで使用される最小の検証要件。</target>
        </trans-unit>
        <trans-unit id="1df48ef6226a94c112197d2f533e7ea705cedf6e" translate="yes" xml:space="preserve">
          <source>The minimum number of days a password reset link is valid for. Depending on when the link is generated, it will be valid for up to a day longer.</source>
          <target state="translated">パスワード リセット リンクが有効な日数の最小値です。リンクが生成された時期にもよりますが、最大で1日長く有効になります。</target>
        </trans-unit>
        <trans-unit id="e313352f5e679e2d560c6a24206ddca8e84ac7e7" translate="yes" xml:space="preserve">
          <source>The minimum pixel value of the band (excluding the &amp;ldquo;no data&amp;rdquo; value).</source>
          <target state="translated">バンドの最小ピクセル値（「データなし」の値を除く）。</target>
        </trans-unit>
        <trans-unit id="aaed376ec9d4dae9a50bea944365a91b33edcf17" translate="yes" xml:space="preserve">
          <source>The minimum recorded level can be set per request via the &lt;code&gt;set_level&lt;/code&gt; method:</source>
          <target state="translated">記録される最小レベルは、 &lt;code&gt;set_level&lt;/code&gt; メソッドを介してリクエストごとに設定できます。</target>
        </trans-unit>
        <trans-unit id="ed8df49b558cefc42176a09c3feb3114d44b1599" translate="yes" xml:space="preserve">
          <source>The minimum similarity of a rejected password can be set on a scale of 0 to 1 with the &lt;code&gt;max_similarity&lt;/code&gt; parameter. A setting of 0 rejects all passwords, whereas a setting of 1 rejects only passwords that are identical to an attribute&amp;rsquo;s value.</source>
          <target state="translated">拒否されたパスワードの最小類似性は、 &lt;code&gt;max_similarity&lt;/code&gt; パラメーターを使用して0から1のスケールで設定できます。0に設定するとすべてのパスワードが拒否され、1に設定すると属性の値と同一のパスワードのみが拒否されます。</target>
        </trans-unit>
        <trans-unit id="c115df3ebc9de1ceafe0429af5996f777e5d691a" translate="yes" xml:space="preserve">
          <source>The minimum version of the &lt;code&gt;gettext&lt;/code&gt; utilities supported is 0.15.</source>
          <target state="translated">サポートされる &lt;code&gt;gettext&lt;/code&gt; ユーティリティの最小バージョンは0.15です。</target>
        </trans-unit>
        <trans-unit id="e04e85acc7a22de54af4c3ba1a506517688b06af" translate="yes" xml:space="preserve">
          <source>The mixin provides an &lt;code&gt;__init__()&lt;/code&gt; method that accepts an optional &lt;code&gt;get_response&lt;/code&gt; argument and stores it in &lt;code&gt;self.get_response&lt;/code&gt;.</source>
          <target state="translated">mixinは、オプションの &lt;code&gt;get_response&lt;/code&gt; 引数を受け入れ、それを &lt;code&gt;self.get_response&lt;/code&gt; に格納する &lt;code&gt;__init__()&lt;/code&gt; メソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="574e43d12ca17a338497c54d8082a9be00ec3508" translate="yes" xml:space="preserve">
          <source>The mixin provides an &lt;code&gt;__init__()&lt;/code&gt; method that requires a &lt;code&gt;get_response&lt;/code&gt; argument and stores it in &lt;code&gt;self.get_response&lt;/code&gt;.</source>
          <target state="translated">ミックスインは、 &lt;code&gt;get_response&lt;/code&gt; 引数を必要とする &lt;code&gt;__init__()&lt;/code&gt; メソッドを提供し、それを &lt;code&gt;self.get_response&lt;/code&gt; に格納します。</target>
        </trans-unit>
        <trans-unit id="c8ce5e8bdfce92d988b4e5a30c0273642da4536c" translate="yes" xml:space="preserve">
          <source>The mod_wsgi &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/access-control-mechanisms.html&quot;&gt;access control mechanisms documentation&lt;/a&gt; provides additional details and information about alternative methods of authentication.</source>
          <target state="translated">mod_wsgi &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/access-control-mechanisms.html&quot;&gt;アクセス制御メカニズムのドキュメントに&lt;/a&gt;は、認証の代替方法に関する詳細と情報が記載されています。</target>
        </trans-unit>
        <trans-unit id="094b414163518a144ddd7d6e4e4a3893eb28aa55" translate="yes" xml:space="preserve">
          <source>The model &lt;code&gt;_meta&lt;/code&gt; API is at the core of the Django ORM. It enables other parts of the system such as lookups, queries, forms, and the admin to understand the capabilities of each model. The API is accessible through the &lt;code&gt;_meta&lt;/code&gt; attribute of each model class, which is an instance of an &lt;code&gt;django.db.models.options.Options&lt;/code&gt; object.</source>
          <target state="translated">model &lt;code&gt;_meta&lt;/code&gt; APIはDjango ORMの中核です。これにより、ルックアップ、クエリ、フォーム、管理者など、システムの他の部分が各モデルの機能を理解できるようになります。APIは &lt;code&gt;django.db.models.options.Options&lt;/code&gt; オブジェクトのインスタンスである各モデルクラスの &lt;code&gt;_meta&lt;/code&gt; 属性を通じてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="4501983b1bda78a361bf2bab7ec3fbdf3470f6bc" translate="yes" xml:space="preserve">
          <source>The model class that just had an instance created.</source>
          <target state="translated">インスタンスを作成したばかりのモデルクラス。</target>
        </trans-unit>
        <trans-unit id="0e8e5b4a403023823b15e07666e1a54622375582" translate="yes" xml:space="preserve">
          <source>The model class which was just prepared.</source>
          <target state="translated">用意したばかりのモデルクラス。</target>
        </trans-unit>
        <trans-unit id="ddfb44a6f87415cb74c8189d43146202fff99692" translate="yes" xml:space="preserve">
          <source>The model class.</source>
          <target state="translated">モデルクラスです。</target>
        </trans-unit>
        <trans-unit id="78acc1600cd85ddf009d300696e3cd6fec16f262" translate="yes" xml:space="preserve">
          <source>The model field class to use.</source>
          <target state="translated">使用するモデルフィールドクラス。</target>
        </trans-unit>
        <trans-unit id="87ef6817ed53f29b692ccb598a2addf38d7b934b" translate="yes" xml:space="preserve">
          <source>The model instance from the queryset. The instance can be accessed in custom &lt;code&gt;ChoiceWidget.create_option()&lt;/code&gt; implementations to adjust the rendered HTML.</source>
          <target state="translated">クエリセットのモデルインスタンス。カスタム &lt;code&gt;ChoiceWidget.create_option()&lt;/code&gt; 実装でインスタンスにアクセスして、レンダリングされたHTMLを調整できます。</target>
        </trans-unit>
        <trans-unit id="1e3d4f4592baad1751f54ba7ffbbcf37038c2615" translate="yes" xml:space="preserve">
          <source>The model layer</source>
          <target state="translated">モデル層</target>
        </trans-unit>
        <trans-unit id="05ea240599304250578e893321e4b253ba2ec6fe" translate="yes" xml:space="preserve">
          <source>The model name used in this setting should be all lowercase, regardless of the case of the actual model class name.</source>
          <target state="translated">この設定で使用するモデル名は、実際のモデルクラス名の大文字・小文字にかかわらず、すべて小文字である必要があります。</target>
        </trans-unit>
        <trans-unit id="fbc461ddb972315567096edb23fec8328a226003" translate="yes" xml:space="preserve">
          <source>The model save process also has some subtleties; see the sections below.</source>
          <target state="translated">モデルの保存処理にもいくつかの微妙な点があります。</target>
        </trans-unit>
        <trans-unit id="d8053d22db4c6d941e399872f7f604bf33b87492" translate="yes" xml:space="preserve">
          <source>The model that this view will display data for. Specifying &lt;code&gt;model
= Foo&lt;/code&gt; is effectively the same as specifying &lt;code&gt;queryset =
Foo.objects.all()&lt;/code&gt;, where &lt;code&gt;objects&lt;/code&gt; stands for &lt;code&gt;Foo&lt;/code&gt;&amp;rsquo;s &lt;a href=&quot;../../topics/db/managers#default-managers&quot;&gt;default manager&lt;/a&gt;.</source>
          <target state="translated">このビューがデータを表示するモデル。特定 &lt;code&gt;model = Foo&lt;/code&gt; 効果的に指定するのと同じである &lt;code&gt;queryset = Foo.objects.all()&lt;/code&gt; 、ここで、 &lt;code&gt;objects&lt;/code&gt; を表し &lt;code&gt;Foo&lt;/code&gt; の&lt;a href=&quot;../../topics/db/managers#default-managers&quot;&gt;デフォルト・マネージャ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f1def7a086dc7e6ef4fc0558b744537d4de33fb5" translate="yes" xml:space="preserve">
          <source>The model to use to represent a User. See &lt;a href=&quot;../topics/auth/customizing#auth-custom-user&quot;&gt;Substituting a custom User model&lt;/a&gt;.</source>
          <target state="translated">ユーザーを表すために使用するモデル。&lt;a href=&quot;../topics/auth/customizing#auth-custom-user&quot;&gt;カスタムユーザーモデルの置換を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fc307cde0ae0d6de22cf7f623771cc5b5bbae6da" translate="yes" xml:space="preserve">
          <source>The model which the inline is using. This is required.</source>
          <target state="translated">インラインが使用しているモデル。これは必須です。</target>
        </trans-unit>
        <trans-unit id="bc0d0043169b7c7d60fd944b4757985c1bae1133" translate="yes" xml:space="preserve">
          <source>The model&amp;rsquo;s &lt;code&gt;clean()&lt;/code&gt; method will be called before any uniqueness checks are made. See &lt;a href=&quot;../../ref/models/instances#validating-objects&quot;&gt;Validating objects&lt;/a&gt; for more information on the model&amp;rsquo;s &lt;code&gt;clean()&lt;/code&gt; hook.</source>
          <target state="translated">モデルの &lt;code&gt;clean()&lt;/code&gt; メソッドは、一意性チェックが行われる前に呼び出されます。モデルの &lt;code&gt;clean()&lt;/code&gt; フックの詳細については、&lt;a href=&quot;../../ref/models/instances#validating-objects&quot;&gt;オブジェクトの検証を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0a75830961803123e6e36c02e863420d3ad5a35f" translate="yes" xml:space="preserve">
          <source>The model&amp;rsquo;s &lt;code&gt;save()&lt;/code&gt; method will not be called, and the &lt;code&gt;pre_save&lt;/code&gt; and &lt;code&gt;post_save&lt;/code&gt; signals will not be sent.</source>
          <target state="translated">モデルの &lt;code&gt;save()&lt;/code&gt; メソッドは呼び出されず、 &lt;code&gt;pre_save&lt;/code&gt; および &lt;code&gt;post_save&lt;/code&gt; 信号は送信されません。</target>
        </trans-unit>
        <trans-unit id="2eedc03fa70b854f71fd82b6827c0841a1473ce0" translate="yes" xml:space="preserve">
          <source>The moral here is that if you are using &lt;code&gt;distinct()&lt;/code&gt; be careful about ordering by related models. Similarly, when using &lt;code&gt;distinct()&lt;/code&gt; and &lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; together, be careful when ordering by fields not in the &lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">ここでの教訓は、 &lt;code&gt;distinct()&lt;/code&gt; を使用している場合、関連モデルによる順序付けに注意することです。同様に、 &lt;code&gt;distinct()&lt;/code&gt; と&lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; を&lt;/a&gt;一緒に使用する場合は、&lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt;コールではないフィールドで順序付けするときに注意してください。</target>
        </trans-unit>
        <trans-unit id="48c675d5043f6c3d4aae4ca0ea0f61d6c38aac55" translate="yes" xml:space="preserve">
          <source>The most common place to specify custom template tags and filters is inside a Django app. If they relate to an existing app, it makes sense to bundle them there; otherwise, they can be added to a new app. When a Django app is added to &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, any tags it defines in the conventional location described below are automatically made available to load within templates.</source>
          <target state="translated">カスタムテンプレートタグとフィルターを指定する最も一般的な場所は、Djangoアプリ内です。それらが既存のアプリに関連している場合、それらをそこにバンドルすることは理にかなっています。それ以外の場合は、新しいアプリに追加できます。Djangoアプリが&lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;に追加されると、以下で説明する従来の場所で定義されているタグはすべて、テンプレート内で自動的にロードできるようになります。</target>
        </trans-unit>
        <trans-unit id="bef975184f8e317bf6782bf294b1f22d7c6b0904" translate="yes" xml:space="preserve">
          <source>The most common solution is to properly configure your &lt;a href=&quot;index#libsettings&quot;&gt;Library environment settings&lt;/a&gt;&lt;em&gt;or&lt;/em&gt; set &lt;a href=&quot;#geoslibrarypath&quot;&gt;GEOS_LIBRARY_PATH&lt;/a&gt; in your settings.</source>
          <target state="translated">最も一般的な解決策は、&lt;a href=&quot;index#libsettings&quot;&gt;ライブラリ環境設定&lt;/a&gt;を適切に構成する&lt;em&gt;か、&lt;/em&gt;設定に&lt;a href=&quot;#geoslibrarypath&quot;&gt;GEOS_LIBRARY_PATH&lt;/a&gt;を設定することです。</target>
        </trans-unit>
        <trans-unit id="9413ed3849f2b96d296bced76096f62dd8d3bff7" translate="yes" xml:space="preserve">
          <source>The most common transformation this cannot do is transforming a &lt;code&gt;ManyToManyField&lt;/code&gt; into a normal Field or vice-versa; Django cannot do this without losing data, and so it will refuse to do it. Instead, &lt;a href=&quot;#django.db.backends.base.schema.BaseDatabaseSchemaEditor.remove_field&quot;&gt;&lt;code&gt;remove_field()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.backends.base.schema.BaseDatabaseSchemaEditor.add_field&quot;&gt;&lt;code&gt;add_field()&lt;/code&gt;&lt;/a&gt; should be called separately.</source>
          <target state="translated">これで実行できない最も一般的な変換は、 &lt;code&gt;ManyToManyField&lt;/code&gt; を通常のFieldに変換すること、またはその逆です。Djangoはデータを失うことなくこれを行うことができないため、それを拒否します。代わりに、&lt;a href=&quot;#django.db.backends.base.schema.BaseDatabaseSchemaEditor.remove_field&quot;&gt; &lt;code&gt;remove_field()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#django.db.backends.base.schema.BaseDatabaseSchemaEditor.add_field&quot;&gt; &lt;code&gt;add_field()&lt;/code&gt; &lt;/a&gt;を個別に呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="6871e2460dcc11bf73ec697d41104e7bf8e9f9ab" translate="yes" xml:space="preserve">
          <source>The most common use case is to pass a &lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt;&lt;code&gt;Model&lt;/code&gt;&lt;/a&gt;, as shown above. However, you can also pass a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; instance:</source>
          <target state="translated">最も一般的な使用例は、上記のように&lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt; &lt;code&gt;Model&lt;/code&gt; &lt;/a&gt;を渡すことです。ただし、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;インスタンスを渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="a7e69a7c6f372ddb58c9461e3bc1ab0d8ab051db" translate="yes" xml:space="preserve">
          <source>The most common use for this option is when you want to associate &lt;a href=&quot;../../topics/db/models#intermediary-manytomany&quot;&gt;extra data with a many-to-many relationship&lt;/a&gt;.</source>
          <target state="translated">このオプションの最も一般的な用途は、&lt;a href=&quot;../../topics/db/models#intermediary-manytomany&quot;&gt;追加のデータを多対多の関係&lt;/a&gt;に関連付けたい場合です。</target>
        </trans-unit>
        <trans-unit id="49cd2b2b45a028209da4b23b5b49f8cf17035ca7" translate="yes" xml:space="preserve">
          <source>The most direct way to create users is to use the included &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.UserManager.create_user&quot;&gt;&lt;code&gt;create_user()&lt;/code&gt;&lt;/a&gt; helper function:</source>
          <target state="translated">ユーザーを作成する最も直接的な方法は、含まれている&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.UserManager.create_user&quot;&gt; &lt;code&gt;create_user()&lt;/code&gt; &lt;/a&gt;ヘルパー関数を使用することです。</target>
        </trans-unit>
        <trans-unit id="bc20b7fc72d882052ee9067ed856631cfdb7de35" translate="yes" xml:space="preserve">
          <source>The most direct way to use generic views is to create them directly in your URLconf. If you&amp;rsquo;re only changing a few attributes on a class-based view, you can pass them into the &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; method call itself:</source>
          <target state="translated">汎用ビューを使用する最も直接的な方法は、URLconfで直接作成することです。クラスベースのビューのいくつかの属性のみを変更する場合は、それらを&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt; &lt;code&gt;as_view()&lt;/code&gt; &lt;/a&gt;メソッド呼び出し自体に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="12de5658e8a30f241f87c363b37668f4b99dd892" translate="yes" xml:space="preserve">
          <source>The most efficient method of finding whether a model with a unique field (e.g. &lt;code&gt;primary_key&lt;/code&gt;) is a member of a &lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; is:</source>
          <target state="translated">一意のフィールド（ &lt;code&gt;primary_key&lt;/code&gt; など）を持つモデルが&lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; の&lt;/a&gt;メンバーであるかどうかを確認する最も効率的な方法は、次のとおりです。</target>
        </trans-unit>
        <trans-unit id="144a79174396e3fefc8c2075717b173830a22026" translate="yes" xml:space="preserve">
          <source>The most important attribute of a model is the &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt;. It&amp;rsquo;s the interface through which database query operations are provided to Django models and is used to &lt;a href=&quot;queries#retrieving-objects&quot;&gt;retrieve the instances&lt;/a&gt; from the database. If no custom &lt;code&gt;Manager&lt;/code&gt; is defined, the default name is &lt;a href=&quot;../../ref/models/class#django.db.models.Model.objects&quot;&gt;&lt;code&gt;objects&lt;/code&gt;&lt;/a&gt;. Managers are only accessible via model classes, not the model instances.</source>
          <target state="translated">モデルの最も重要な属性は&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;です。これは、Djangoモデルにデータベースクエリ操作を提供するためのインターフェースであり、データベースから&lt;a href=&quot;queries#retrieving-objects&quot;&gt;インスタンス&lt;/a&gt;を取得するために使用されます。カスタム &lt;code&gt;Manager&lt;/code&gt; が定義されていない場合、デフォルト名は&lt;a href=&quot;../../ref/models/class#django.db.models.Model.objects&quot;&gt; &lt;code&gt;objects&lt;/code&gt; です&lt;/a&gt;。マネージャーには、モデルインスタンスではなく、モデルクラスを介してのみアクセスできます。</target>
        </trans-unit>
        <trans-unit id="954778b3768124b1c738d606ea826def4b1e867d" translate="yes" xml:space="preserve">
          <source>The most important entry in &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;'environment'&lt;/code&gt;. It&amp;rsquo;s a dotted Python path to a callable returning a Jinja2 environment. It defaults to &lt;code&gt;'jinja2.Environment'&lt;/code&gt;. Django invokes that callable and passes other options as keyword arguments. Furthermore, Django adds defaults that differ from Jinja2&amp;rsquo;s for a few options:</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-OPTIONS&quot;&gt; &lt;code&gt;OPTIONS&lt;/code&gt; &lt;/a&gt;の最も重要なエントリは &lt;code&gt;'environment'&lt;/code&gt; です。これは、Jinja2環境を返す呼び出し可能オブジェクトへの点線のPythonパスです。デフォルトは &lt;code&gt;'jinja2.Environment'&lt;/code&gt; です。Djangoはその呼び出し可能オブジェクトを呼び出し、他のオプションをキーワード引数として渡します。さらに、Djangoはいくつかのオプションについて、Jinja2とは異なるデフォルトを追加します。</target>
        </trans-unit>
        <trans-unit id="f28c701dac93ef930556fffde2698802bee6cb88" translate="yes" xml:space="preserve">
          <source>The most important part of a model &amp;ndash; and the only required part of a model &amp;ndash; is the list of database fields it defines. Fields are specified by class attributes. Be careful not to choose field names that conflict with the &lt;a href=&quot;../../ref/models/instances&quot;&gt;models API&lt;/a&gt; like &lt;code&gt;clean&lt;/code&gt;, &lt;code&gt;save&lt;/code&gt;, or &lt;code&gt;delete&lt;/code&gt;.</source>
          <target state="translated">モデルの最も重要な部分-モデルの唯一の必須部分-は、モデルが定義するデータベースフィールドのリストです。フィールドはクラス属性によって指定されます。 &lt;code&gt;clean&lt;/code&gt; 、 &lt;code&gt;save&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt; など、&lt;a href=&quot;../../ref/models/instances&quot;&gt;モデルAPI&lt;/a&gt;と競合するフィールド名を選択しないように注意してください。</target>
        </trans-unit>
        <trans-unit id="b41ce9db625a2a4ed9a8a9294c595850ba7421c1" translate="yes" xml:space="preserve">
          <source>The most likely example is user-uploaded content in &lt;a href=&quot;settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; is intended for static assets and has no built-in handling for user-uploaded files, but you can have Django serve your &lt;a href=&quot;settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; by appending something like this to your URLconf:</source>
          <target state="translated">最も可能性の高い例は、&lt;a href=&quot;settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; に&lt;/a&gt;ユーザーがアップロードしたコンテンツです。 &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; は静的アセットを対象としており、ユーザーがアップロードしたファイルに対する組み込みの処理はありませんが、次のようなものをURLconfに追加することにより、Djangoに&lt;a href=&quot;settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; を&lt;/a&gt;提供させることができます。</target>
        </trans-unit>
        <trans-unit id="ae124b720c5a2eb7fa0098254a579572cf5a32b3" translate="yes" xml:space="preserve">
          <source>The most powerful &amp;ndash; and thus the most complex &amp;ndash; part of Django&amp;rsquo;s template engine is template inheritance. Template inheritance allows you to build a base &amp;ldquo;skeleton&amp;rdquo; template that contains all the common elements of your site and defines &lt;strong&gt;blocks&lt;/strong&gt; that child templates can override.</source>
          <target state="translated">Djangoのテンプレートエンジンの最も強力な（つまり最も複雑な）部分は、テンプレートの継承です。テンプレートの継承により、サイトのすべての一般的な要素を含み、子テンプレートがオーバーライドできる&lt;strong&gt;ブロック&lt;/strong&gt;を定義する基本的な「スケルトン」テンプレートを構築できます。</target>
        </trans-unit>
        <trans-unit id="5277ee5619415435eebafd0e15ea3fa5a54fb13c" translate="yes" xml:space="preserve">
          <source>The most straightforward way of creating a fixture is to use the &lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;manage.py dumpdata&lt;/code&gt;&lt;/a&gt; command. This assumes you already have some data in your database. See the &lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata
documentation&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">フィクスチャを作成する最も簡単な方法は、&lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt; &lt;code&gt;manage.py dumpdata&lt;/code&gt; &lt;/a&gt;コマンドを使用することです。これは、データベースにすでにいくつかのデータがあることを前提としています。詳細については、&lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt; &lt;code&gt;dumpdata documentation&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e74ba7b39aa4607d8a6b5cb0835d9fc9b1454747" translate="yes" xml:space="preserve">
          <source>The naive way of solving the problem would be to require site producers to publish the same story twice: once for LJWorld.com and again for Lawrence.com. But that&amp;rsquo;s inefficient for site producers, and it&amp;rsquo;s redundant to store multiple copies of the same story in the database.</source>
          <target state="translated">問題を解決する素朴な方法は、サイトプロデューサーに同じストーリーを2回公開するよう要求することです。しかし、これはサイトプロデューサーにとって非効率的であり、同じストーリーの複数のコピーをデータベースに保存するのは冗長です。</target>
        </trans-unit>
        <trans-unit id="63a9b61ba166b49f916b91caaa26e694bed94aa4" translate="yes" xml:space="preserve">
          <source>The name is a string such as &lt;code&gt;'admin/index.html'&lt;/code&gt;.</source>
          <target state="translated">名前は &lt;code&gt;'admin/index.html'&lt;/code&gt; などの文字列です。</target>
        </trans-unit>
        <trans-unit id="bffef68592e45f6e79a62f676bb29704f37e4a7b" translate="yes" xml:space="preserve">
          <source>The name of a &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createdatabase.html&quot;&gt;template&lt;/a&gt; (e.g. &lt;code&gt;'template0'&lt;/code&gt;) from which to create the test database.</source>
          <target state="translated">テストデータベースを作成する&lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createdatabase.html&quot;&gt;テンプレート&lt;/a&gt;の名前（例： &lt;code&gt;'template0'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="73db5f782a0e845e926942e03c0db06b329731ce" translate="yes" xml:space="preserve">
          <source>The name of a field or a list of field names in the model, typically &lt;a href=&quot;fields#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;fields#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt;. This specifies the default field(s) to use in your model &lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;querysets#django.db.models.query.QuerySet.latest&quot;&gt;&lt;code&gt;latest()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;querysets#django.db.models.query.QuerySet.earliest&quot;&gt;&lt;code&gt;earliest()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">モデルのフィールド名またはフィールド名のリスト。通常は、&lt;a href=&quot;fields#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;fields#django.db.models.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; &lt;/a&gt;です。これは、Model &lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;querysets#django.db.models.query.QuerySet.latest&quot;&gt; &lt;code&gt;latest()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;querysets#django.db.models.query.QuerySet.earliest&quot;&gt; &lt;code&gt;earliest()&lt;/code&gt; &lt;/a&gt;メソッドで使用するデフォルトのフィールドを指定します。</target>
        </trans-unit>
        <trans-unit id="99813423c36c5de6363e829435c1c005826c1ac0" translate="yes" xml:space="preserve">
          <source>The name of a model field. For example:</source>
          <target state="translated">モデルフィールドの名前。例えば</target>
        </trans-unit>
        <trans-unit id="4bef0a75d3131deecd15088ae419c948bbf90d70" translate="yes" xml:space="preserve">
          <source>The name of database to use when running the test suite.</source>
          <target state="translated">テストスイートを実行する際に使用するデータベースの名前。</target>
        </trans-unit>
        <trans-unit id="821a67938d763e080243d0f1a307785a2ef1fc17" translate="yes" xml:space="preserve">
          <source>The name of each &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; instance (e.g. &lt;code&gt;question_text&lt;/code&gt; or &lt;code&gt;pub_date&lt;/code&gt;) is the field&amp;rsquo;s name, in machine-friendly format. You&amp;rsquo;ll use this value in your Python code, and your database will use it as the column name.</source>
          <target state="translated">各&lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;インスタンスの名前（ &lt;code&gt;question_text&lt;/code&gt; や &lt;code&gt;pub_date&lt;/code&gt; など）は、マシンフレンドリーな形式のフィールドの名前です。この値はPythonコードで使用し、データベースはこの値を列名として使用します。</target>
        </trans-unit>
        <trans-unit id="36a3902c3d36603d4e9d4186d116f22eadc68eb8" translate="yes" xml:space="preserve">
          <source>The name of each header is stylized with title-casing (e.g. &lt;code&gt;User-Agent&lt;/code&gt;) when it&amp;rsquo;s displayed. You can access headers case-insensitively:</source>
          <target state="translated">各ヘッダーの名前は、表示されるときにタイトルの大文字（例： &lt;code&gt;User-Agent&lt;/code&gt; ）で様式化されます。大文字と小文字を区別せずにヘッダーにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="541812330d87ae0dea0e63f087e7740f5d38bac6" translate="yes" xml:space="preserve">
          <source>The name of the &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; foreign key field on the model. Defaults to &lt;code&gt;content_type&lt;/code&gt;.</source>
          <target state="translated">モデルの&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt;外部キーフィールドの名前。デフォルトは &lt;code&gt;content_type&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="163de951a33070879f29f487b060a87d84befeed" translate="yes" xml:space="preserve">
          <source>The name of the &lt;a href=&quot;../../topics/db/tablespaces&quot;&gt;database tablespace&lt;/a&gt; to use for this field&amp;rsquo;s index, if this field is indexed. The default is the project&amp;rsquo;s &lt;a href=&quot;../settings#std:setting-DEFAULT_INDEX_TABLESPACE&quot;&gt;&lt;code&gt;DEFAULT_INDEX_TABLESPACE&lt;/code&gt;&lt;/a&gt; setting, if set, or the &lt;a href=&quot;options#django.db.models.Options.db_tablespace&quot;&gt;&lt;code&gt;db_tablespace&lt;/code&gt;&lt;/a&gt; of the model, if any. If the backend doesn&amp;rsquo;t support tablespaces for indexes, this option is ignored.</source>
          <target state="translated">このフィールドにインデックスが付けられている場合、このフィールドのインデックスに使用する&lt;a href=&quot;../../topics/db/tablespaces&quot;&gt;データベーステーブルスペース&lt;/a&gt;の名前。デフォルトは、プロジェクトの&lt;a href=&quot;../settings#std:setting-DEFAULT_INDEX_TABLESPACE&quot;&gt; &lt;code&gt;DEFAULT_INDEX_TABLESPACE&lt;/code&gt; &lt;/a&gt;設定（ある場合）、またはモデルの&lt;a href=&quot;options#django.db.models.Options.db_tablespace&quot;&gt; &lt;code&gt;db_tablespace&lt;/code&gt; &lt;/a&gt;（ある場合）です。バックエンドがインデックスのテーブルスペースをサポートしていない場合、このオプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="402103ec15a6bbfbcb151e22bc58a7c81df55268" translate="yes" xml:space="preserve">
          <source>The name of the &lt;a href=&quot;../../topics/db/tablespaces&quot;&gt;database tablespace&lt;/a&gt; to use for this index. For single field indexes, if &lt;code&gt;db_tablespace&lt;/code&gt; isn&amp;rsquo;t provided, the index is created in the &lt;code&gt;db_tablespace&lt;/code&gt; of the field.</source>
          <target state="translated">このインデックスに使用する&lt;a href=&quot;../../topics/db/tablespaces&quot;&gt;データベーステーブルスペース&lt;/a&gt;の名前。単一フィールドインデックスの場合、 &lt;code&gt;db_tablespace&lt;/code&gt; を指定しないと、フィールドの &lt;code&gt;db_tablespace&lt;/code&gt; にインデックスが作成されます。</target>
        </trans-unit>
        <trans-unit id="2a8ea4f8d8b85b44e880d9d4b5b69b4fbf35a23b" translate="yes" xml:space="preserve">
          <source>The name of the &lt;a href=&quot;../../topics/db/tablespaces&quot;&gt;database tablespace&lt;/a&gt; to use for this model. The default is the project&amp;rsquo;s &lt;a href=&quot;../settings#std:setting-DEFAULT_TABLESPACE&quot;&gt;&lt;code&gt;DEFAULT_TABLESPACE&lt;/code&gt;&lt;/a&gt; setting, if set. If the backend doesn&amp;rsquo;t support tablespaces, this option is ignored.</source>
          <target state="translated">このモデルに使用する&lt;a href=&quot;../../topics/db/tablespaces&quot;&gt;データベーステーブルスペース&lt;/a&gt;の名前。設定されている場合、デフォルトはプロジェクトの&lt;a href=&quot;../settings#std:setting-DEFAULT_TABLESPACE&quot;&gt; &lt;code&gt;DEFAULT_TABLESPACE&lt;/code&gt; &lt;/a&gt;設定です。バックエンドがテーブルスペースをサポートしていない場合、このオプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="6b38e2c8875e8a0addbc32359b5bf513eda7259e" translate="yes" xml:space="preserve">
          <source>The name of the &lt;code&gt;DateField&lt;/code&gt; or &lt;code&gt;DateTimeField&lt;/code&gt; in the &lt;code&gt;QuerySet&lt;/code&gt;&amp;rsquo;s model that the date-based archive should use to determine the list of objects to display on the page.</source>
          <target state="translated">ページに表示するオブジェクトのリストを決定するために日付ベースのアーカイブが使用する、 &lt;code&gt;QuerySet&lt;/code&gt; のモデル内の &lt;code&gt;DateField&lt;/code&gt; または &lt;code&gt;DateTimeField&lt;/code&gt; の名前。</target>
        </trans-unit>
        <trans-unit id="531037582b1e0a89a3cd4e790160806c1e292558" translate="yes" xml:space="preserve">
          <source>The name of the GDAL driver used to handle the input file. For &lt;code&gt;GDALRaster&lt;/code&gt;s created from a file, the driver type is detected automatically. The creation of rasters from scratch is an in-memory raster by default (&lt;code&gt;'MEM'&lt;/code&gt;), but can be altered as needed. For instance, use &lt;code&gt;GTiff&lt;/code&gt; for a &lt;code&gt;GeoTiff&lt;/code&gt; file. For a list of file types, see also the &lt;a href=&quot;https://gdal.org/drivers/raster/&quot;&gt;GDAL Raster Formats&lt;/a&gt; list.</source>
          <target state="translated">入力ファイルの処理に使用されるGDALドライバーの名前。 &lt;code&gt;GDALRaster&lt;/code&gt; のファイルから作成され、ドライバの種類が自動的に検出されました。ゼロからのラスタの作成は、デフォルトではメモリ内ラスタ（ &lt;code&gt;'MEM'&lt;/code&gt; ）ですが、必要に応じて変更できます。たとえば、 &lt;code&gt;GeoTiff&lt;/code&gt; ファイルには &lt;code&gt;GTiff&lt;/code&gt; を使用します。ファイルタイプのリストについては、&lt;a href=&quot;https://gdal.org/drivers/raster/&quot;&gt;GDALラスタ形式の&lt;/a&gt;リストもご覧ください。</target>
        </trans-unit>
        <trans-unit id="fd6d34b4a1da491460b73de06a8cb204420bb6f9" translate="yes" xml:space="preserve">
          <source>The name of the GeoIP city data file. Defaults to &lt;code&gt;GeoLite2-City.mmdb&lt;/code&gt;. Setting this keyword overrides the &lt;a href=&quot;#std:setting-GEOIP_CITY&quot;&gt;&lt;code&gt;GEOIP_CITY&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">GeoIP都市データファイルの名前。デフォルトは &lt;code&gt;GeoLite2-City.mmdb&lt;/code&gt; です。このキーワードを設定すると、&lt;a href=&quot;#std:setting-GEOIP_CITY&quot;&gt; &lt;code&gt;GEOIP_CITY&lt;/code&gt; &lt;/a&gt;設定が上書きされます。</target>
        </trans-unit>
        <trans-unit id="71bdecdd5ebfb290dd390f6482054ddafd78957a" translate="yes" xml:space="preserve">
          <source>The name of the GeoIP country data file. Defaults to &lt;code&gt;GeoLite2-Country.mmdb&lt;/code&gt;. Setting this keyword overrides the &lt;a href=&quot;#std:setting-GEOIP_COUNTRY&quot;&gt;&lt;code&gt;GEOIP_COUNTRY&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">GeoIP国データファイルの名前。デフォルトは &lt;code&gt;GeoLite2-Country.mmdb&lt;/code&gt; です。このキーワードを設定すると、&lt;a href=&quot;#std:setting-GEOIP_COUNTRY&quot;&gt; &lt;code&gt;GEOIP_COUNTRY&lt;/code&gt; &lt;/a&gt;設定が上書きされます。</target>
        </trans-unit>
        <trans-unit id="ccbea55b7888687d19090671fa7254a789f06402" translate="yes" xml:space="preserve">
          <source>The name of the URL pattern that matches the URL.</source>
          <target state="translated">URL に一致する URL パターンの名前です。</target>
        </trans-unit>
        <trans-unit id="15004a76b9d384968d294c42ac068cb83f63de2a" translate="yes" xml:space="preserve">
          <source>The name of the URL pattern to redirect to. Reversing will be done using the same args and kwargs as are passed in for this view.</source>
          <target state="translated">リダイレクト先の URL パターンの名前。反転は、このビューに渡されたものと同じ args と kwargs を使用して行われます。</target>
        </trans-unit>
        <trans-unit id="06a14ff5827d2f5bf31a21760de21f63ef318f5b" translate="yes" xml:space="preserve">
          <source>The name of the URLConf keyword argument that contains the primary key. By default, &lt;code&gt;pk_url_kwarg&lt;/code&gt; is &lt;code&gt;'pk'&lt;/code&gt;.</source>
          <target state="translated">主キーを含むURLConfキーワード引数の名前。デフォルトでは、 &lt;code&gt;pk_url_kwarg&lt;/code&gt; は &lt;code&gt;'pk'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="754927d5c9420d8afbde45c1c9504b6d7dd977ff" translate="yes" xml:space="preserve">
          <source>The name of the URLConf keyword argument that contains the slug. By default, &lt;code&gt;slug_url_kwarg&lt;/code&gt; is &lt;code&gt;'slug'&lt;/code&gt;.</source>
          <target state="translated">スラグを含むURLConfキーワード引数の名前。デフォルトでは、 &lt;code&gt;slug_url_kwarg&lt;/code&gt; は &lt;code&gt;'slug'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="04c0334bbc33a2d3f0ebbc2ddb18b2e2caaaabee" translate="yes" xml:space="preserve">
          <source>The name of the application the model is part of. This is taken from the &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType.app_label&quot;&gt;&lt;code&gt;app_label&lt;/code&gt;&lt;/a&gt; attribute of the model, and includes only the &lt;em&gt;last&lt;/em&gt; part of the application&amp;rsquo;s Python import path; &lt;code&gt;django.contrib.contenttypes&lt;/code&gt;, for example, becomes an &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType.app_label&quot;&gt;&lt;code&gt;app_label&lt;/code&gt;&lt;/a&gt; of &lt;code&gt;contenttypes&lt;/code&gt;.</source>
          <target state="translated">モデルが属しているアプリケーションの名前。これはモデルの&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType.app_label&quot;&gt; &lt;code&gt;app_label&lt;/code&gt; &lt;/a&gt;属性から取得され、アプリケーションのPythonインポートパスの&lt;em&gt;最後の&lt;/em&gt;部分のみが含まれます。 &lt;code&gt;django.contrib.contenttypes&lt;/code&gt; 、例えば、なり&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType.app_label&quot;&gt; &lt;code&gt;app_label&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;contenttypes&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="cd9b5efa3f472b01fb89ebca97a7fbff7271ba1c" translate="yes" xml:space="preserve">
          <source>The name of the class to use for starting the test suite. See &lt;a href=&quot;../topics/testing/advanced#other-testing-frameworks&quot;&gt;Using different testing frameworks&lt;/a&gt;.</source>
          <target state="translated">テストスイートの開始に使用するクラスの名前。&lt;a href=&quot;../topics/testing/advanced#other-testing-frameworks&quot;&gt;さまざまなテストフレームワークの使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="56384b66fea60ec1b78196984b095a03fc903da6" translate="yes" xml:space="preserve">
          <source>The name of the constraint.</source>
          <target state="translated">制約の名前。</target>
        </trans-unit>
        <trans-unit id="48bb2afa4c920f5f53e21f5f09972d1ef5ed9bee" translate="yes" xml:space="preserve">
          <source>The name of the constraint. You must always specify a unique name for the constraint.</source>
          <target state="translated">制約の名前。制約には必ず一意の名前を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="3f1cd57a734b57109d10e40c5ba2dfa0d2ec2029" translate="yes" xml:space="preserve">
          <source>The name of the cookie to use for sessions. This can be whatever you want (as long as it&amp;rsquo;s different from the other cookie names in your application).</source>
          <target state="translated">セッションに使用するCookieの名前。これは、アプリケーション内の他のCookie名と異なる限り、何でもかまいません。</target>
        </trans-unit>
        <trans-unit id="2c2454fe0834e666c008fbb3242b0a089904fcf7" translate="yes" xml:space="preserve">
          <source>The name of the cookie to use for the CSRF authentication token. This can be whatever you want (as long as it&amp;rsquo;s different from the other cookie names in your application). See &lt;a href=&quot;csrf&quot;&gt;Cross Site Request Forgery protection&lt;/a&gt;.</source>
          <target state="translated">CSRF認証トークンに使用するCookieの名前。これは、アプリケーション内の他のCookie名と異なる限り、何でもかまいません。&lt;a href=&quot;csrf&quot;&gt;クロスサイトリクエストフォージェリ保護を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ab067d40b58c66b558a08c0d7a1bab9bc86750ce" translate="yes" xml:space="preserve">
          <source>The name of the cookie to use for the language cookie. This can be whatever you want (as long as it&amp;rsquo;s different from the other cookie names in your application). See &lt;a href=&quot;../topics/i18n/index&quot;&gt;Internationalization and localization&lt;/a&gt;.</source>
          <target state="translated">言語Cookieに使用するCookieの名前。これは、アプリケーション内の他のCookie名と異なる限り、何でもかまいません。&lt;a href=&quot;../topics/i18n/index&quot;&gt;国際化とローカリゼーションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4e2afa5ff44dad3f7138732191e180eca493f5c2" translate="yes" xml:space="preserve">
          <source>The name of the cookie used is set by the &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt;&lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt;&lt;/a&gt; setting. (The default name is &lt;code&gt;django_language&lt;/code&gt;.)</source>
          <target state="translated">使用されるCookieの名前は、&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt; &lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt; &lt;/a&gt;設定によって設定されます。（デフォルト名は &lt;code&gt;django_language&lt;/code&gt; です。）</target>
        </trans-unit>
        <trans-unit id="75bf8a6d67711f96e59407ae3331311ffcb65020" translate="yes" xml:space="preserve">
          <source>The name of the currently activated virtual environment is displayed on the command line to help you keep track of which one you are using. Anything you install through &lt;code&gt;pip&lt;/code&gt; while this name is displayed will be installed in that virtual environment, isolated from other environments and system-wide packages.</source>
          <target state="translated">現在アクティブ化されている仮想環境の名前がコマンドラインに表示され、使用している仮想環境を追跡しやすくなります。この名前が表示されている間に &lt;code&gt;pip&lt;/code&gt; を介してインストールしたものはすべて、その仮想環境にインストールされ、他の環境やシステム全体のパッケージから分離されます。</target>
        </trans-unit>
        <trans-unit id="1dfdfbaf4a63e8ebbcc9e7a8622df6e43aaca29c" translate="yes" xml:space="preserve">
          <source>The name of the database column to use for this field. If this isn&amp;rsquo;t given, Django will use the field&amp;rsquo;s name.</source>
          <target state="translated">このフィールドに使用するデータベース列の名前。これを指定しない場合、Djangoはフィールドの名前を使用します。</target>
        </trans-unit>
        <trans-unit id="97d0ed14deca2d0aca3bba2a828e1eaac1812b7a" translate="yes" xml:space="preserve">
          <source>The name of the database table to use for the model:</source>
          <target state="translated">モデルに使用するデータベーステーブルの名前です。</target>
        </trans-unit>
        <trans-unit id="7d8966b66925869e03e0d1ea54565dbcf8e8794d" translate="yes" xml:space="preserve">
          <source>The name of the database to use. For SQLite, it&amp;rsquo;s the full path to the database file. When specifying the path, always use forward slashes, even on Windows (e.g. &lt;code&gt;C:/homes/user/mysite/sqlite3.db&lt;/code&gt;).</source>
          <target state="translated">使用するデータベースの名前。SQLiteの場合、データベースファイルへのフルパスです。パスを指定するときは、Windowsでも常にスラッシュを使用してください（例： &lt;code&gt;C:/homes/user/mysite/sqlite3.db&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="516d215a122250a87d1f8054709549ccc4cc6d88" translate="yes" xml:space="preserve">
          <source>The name of the datafile to use for the TBLSPACE. If not provided, Django will use &lt;code&gt;TBLSPACE + '.dbf'&lt;/code&gt;.</source>
          <target state="translated">TBLSPACEに使用するデータファイルの名前。指定しない場合、Djangoは &lt;code&gt;TBLSPACE + '.dbf'&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="4d8155776d6b1dff31611c64371681f80d747b13" translate="yes" xml:space="preserve">
          <source>The name of the datafile to use for the TBLSPACE_TMP. If not provided, Django will use &lt;code&gt;TBLSPACE_TMP + '.dbf'&lt;/code&gt;.</source>
          <target state="translated">TBLSPACE_TMPに使用するデータファイルの名前。指定しない場合、Djangoは &lt;code&gt;TBLSPACE_TMP + '.dbf'&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="c0fc93c1c94efdc38d552835c495513303bfde56" translate="yes" xml:space="preserve">
          <source>The name of the field on the model that contains the slug. By default, &lt;code&gt;slug_field&lt;/code&gt; is &lt;code&gt;'slug'&lt;/code&gt;.</source>
          <target state="translated">スラグを含むモデルのフィールドの名前。デフォルトでは、 &lt;code&gt;slug_field&lt;/code&gt; は &lt;code&gt;'slug'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8f19427a4ffcc78e34af4812f089e3cd61bdba7d" translate="yes" xml:space="preserve">
          <source>The name of the field on the model.</source>
          <target state="translated">モデル上のフィールドの名前。</target>
        </trans-unit>
        <trans-unit id="51daf9f1cf77252d9fe3869bbef8ccf11d71eecc" translate="yes" xml:space="preserve">
          <source>The name of the field on which you&amp;rsquo;d like to filter the relation.</source>
          <target state="translated">リレーションをフィルタリングするフィールドの名前。</target>
        </trans-unit>
        <trans-unit id="9b7ef3aac9281ae093d53c4653571818cb5adf25" translate="yes" xml:space="preserve">
          <source>The name of the field that will be used in the input element&amp;rsquo;s name field. This takes the form prefix into account, if it has been set.</source>
          <target state="translated">入力要素の名前フィールドで使用されるフィールドの名前。設定されている場合、これはフォーム接頭辞を考慮に入れます。</target>
        </trans-unit>
        <trans-unit id="115286c4bd3dac1e66ff95e3e000a885893df909" translate="yes" xml:space="preserve">
          <source>The name of the file including the relative path from &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt;からの相対パスを含むファイルの名前。</target>
        </trans-unit>
        <trans-unit id="e940e12da996dba1c5a77dcb9bab26a0b08caa82" translate="yes" xml:space="preserve">
          <source>The name of the file including the relative path from the root of the &lt;a href=&quot;../files/storage#django.core.files.storage.Storage&quot;&gt;&lt;code&gt;Storage&lt;/code&gt;&lt;/a&gt; of the associated &lt;a href=&quot;#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">関連する&lt;a href=&quot;#django.db.models.FileField&quot;&gt; &lt;code&gt;FileField&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;../files/storage#django.core.files.storage.Storage&quot;&gt; &lt;code&gt;Storage&lt;/code&gt; &lt;/a&gt;のルートからの相対パスを含むファイルの名前。</target>
        </trans-unit>
        <trans-unit id="fcf8ac830b40ec427f998831897f6e458d8d70ba" translate="yes" xml:space="preserve">
          <source>The name of the filter &amp;ndash; a string.</source>
          <target state="translated">フィルターの名前&amp;ndash;文字列。</target>
        </trans-unit>
        <trans-unit id="a17c3bce19075d6cc8afe07b3a0fb6ddc56df9a2" translate="yes" xml:space="preserve">
          <source>The name of the foreign key on the model. In most cases this will be dealt with automatically, but &lt;code&gt;fk_name&lt;/code&gt; must be specified explicitly if there are more than one foreign key to the same parent model.</source>
          <target state="translated">モデルの外部キーの名前。ほとんどの場合、これは自動的に処理されますが、同じ親モデルへの外部キーが複数ある場合は、 &lt;code&gt;fk_name&lt;/code&gt; を明示的に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="5272d82f31e5fd503167bca4c31dace6f8d8d35a" translate="yes" xml:space="preserve">
          <source>The name of the index. If &lt;code&gt;name&lt;/code&gt; isn&amp;rsquo;t provided Django will auto-generate a name. For compatibility with different databases, index names cannot be longer than 30 characters and shouldn&amp;rsquo;t start with a number (0-9) or underscore (_).</source>
          <target state="translated">インデックスの名前。場合は &lt;code&gt;name&lt;/code&gt; 提供されていないDjangoは名前を自動生成します。異なるデータベースとの互換性のために、インデックス名は30文字を超えることはできず、数字（0-9）またはアンダースコア（_）で始めることはできません。</target>
        </trans-unit>
        <trans-unit id="943f67bf2cfa14fc1c956a8a429c303503414952" translate="yes" xml:space="preserve">
          <source>The name of the integer field that represents the ID of the related object. Defaults to &lt;code&gt;object_id&lt;/code&gt;.</source>
          <target state="translated">関連オブジェクトのIDを表す整数フィールドの名前。デフォルトは &lt;code&gt;object_id&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6b2d68da7681b2cb85527bdf028c461473593353" translate="yes" xml:space="preserve">
          <source>The name of the lookup, used for identifying it on parsing query expressions. It cannot contain the string &lt;code&gt;&quot;__&quot;&lt;/code&gt;.</source>
          <target state="translated">クエリ式の解析でそれを識別するために使用されるルックアップの名前。文字列 &lt;code&gt;&quot;__&quot;&lt;/code&gt; を含めることはできません。</target>
        </trans-unit>
        <trans-unit id="befe7c84676f3dceaf4694f7b689936182bd347e" translate="yes" xml:space="preserve">
          <source>The name of the manager to use for the model&amp;rsquo;s &lt;a href=&quot;../../topics/db/managers#django.db.models.Model._default_manager&quot;&gt;&lt;code&gt;_default_manager&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">モデルの&lt;a href=&quot;../../topics/db/managers#django.db.models.Model._default_manager&quot;&gt; &lt;code&gt;_default_manager&lt;/code&gt; &lt;/a&gt;に使用するマネージャーの名前。</target>
        </trans-unit>
        <trans-unit id="d19869d8eedfb447efa1bfdccad12838895e8641" translate="yes" xml:space="preserve">
          <source>The name of the model class.</source>
          <target state="translated">モデルクラスの名前です。</target>
        </trans-unit>
        <trans-unit id="2380daaa2a5a9de1ae9bca34a18cbbe85e366f80" translate="yes" xml:space="preserve">
          <source>The name of the module used for authentication.</source>
          <target state="translated">認証に使用するモジュールの名前です。</target>
        </trans-unit>
        <trans-unit id="be359ddce77b7393fb923e492c37559bd98994bd" translate="yes" xml:space="preserve">
          <source>The name of the request header used for CSRF authentication.</source>
          <target state="translated">CSRF 認証に使用するリクエストヘッダーの名前。</target>
        </trans-unit>
        <trans-unit id="e341c5d335b81eb57e7ffc160a61ac3e1291b516" translate="yes" xml:space="preserve">
          <source>The name of the setting.</source>
          <target state="translated">設定の名前です。</target>
        </trans-unit>
        <trans-unit id="a6d4ed4a83958cb774c3ac1373e389717199b189" translate="yes" xml:space="preserve">
          <source>The name of the sitemap file is not important, but the location is. Search engines will only index links in your sitemap for the current URL level and below. For instance, if &lt;code&gt;sitemap.xml&lt;/code&gt; lives in your root directory, it may reference any URL in your site. However, if your sitemap lives at &lt;code&gt;/content/sitemap.xml&lt;/code&gt;, it may only reference URLs that begin with &lt;code&gt;/content/&lt;/code&gt;.</source>
          <target state="translated">サイトマップファイルの名前は重要ではありませんが、場所は重要です。検索エンジンは、現在のURLレベル以下のサイトマップ内のリンクのみをインデックスに登録します。たとえば、 &lt;code&gt;sitemap.xml&lt;/code&gt; がルートディレクトリにある場合、サイト内の任意のURLを参照する可能性があります。ただし、サイトマップが &lt;code&gt;/content/sitemap.xml&lt;/code&gt; にある場合は、 &lt;code&gt;/content/&lt;/code&gt; で始まるURLのみを参照する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d47e18fed83e0647ac5466b931bee36494e757ba" translate="yes" xml:space="preserve">
          <source>The name of the source which is equivalent to the input file path or the name provided upon instantiation.</source>
          <target state="translated">入力ファイルのパスまたはインスタンス化時に指定された名前と同等のソース名。</target>
        </trans-unit>
        <trans-unit id="3e9dbd9e9fbe18372a96d41f916e0d75153d57c8" translate="yes" xml:space="preserve">
          <source>The name of the table to create for storing the many-to-many data. If this is not provided, Django will assume a default name based upon the names of: the table for the model defining the relationship and the name of the field itself.</source>
          <target state="translated">多対多のデータを格納するために作成するテーブルの名前。これが指定されていない場合、Django はリレーションシップを定義するモデルのテーブル名とフィールド自体の名前に基づいたデフォルトの名前を想定します。</target>
        </trans-unit>
        <trans-unit id="ea6d6389de793166a085f00581dd68187aec6087" translate="yes" xml:space="preserve">
          <source>The name of the table, &lt;code&gt;myapp_person&lt;/code&gt;, is automatically derived from some model metadata but can be overridden. See &lt;a href=&quot;../../ref/models/options#table-names&quot;&gt;Table names&lt;/a&gt; for more details.</source>
          <target state="translated">テーブルの名前 &lt;code&gt;myapp_person&lt;/code&gt; は、一部のモデルメタデータから自動的に取得されますが、オーバーライドできます。詳細については、&lt;a href=&quot;../../ref/models/options#table-names&quot;&gt;テーブル名&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="64458b1dc8e18b2d121802fc760359372e20bf02" translate="yes" xml:space="preserve">
          <source>The name of the tablespace that will be used when running tests. If not provided, Django will use &lt;code&gt;'test_' + USER&lt;/code&gt;.</source>
          <target state="translated">テストの実行時に使用されるテーブルスペースの名前。指定しない場合、Djangoは &lt;code&gt;'test_' + USER&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="fd3f139ecacad629770ed1798918c7edc8d69e3e" translate="yes" xml:space="preserve">
          <source>The name of the template or templates that are used for that view.</source>
          <target state="translated">そのビューで使用されるテンプレートまたはテンプレートの名前です。</target>
        </trans-unit>
        <trans-unit id="b189c9f24c53dc250c421f02c83ab4c15811cdf5" translate="yes" xml:space="preserve">
          <source>The name of the template tag &amp;ndash; a string. If this is left out, the name of the compilation function will be used.</source>
          <target state="translated">テンプレートタグの名前&amp;ndash;文字列。これを省略すると、コンパイル関数の名前が使用されます。</target>
        </trans-unit>
        <trans-unit id="9c839d8407c27a86056fa592e95135425afae6d1" translate="yes" xml:space="preserve">
          <source>The name of the template to be rendered. Accepts a backend-dependent template object (such as those returned by &lt;a href=&quot;../topics/templates#django.template.loader.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt;), the name of a template, or a list of template names.</source>
          <target state="translated">レンダリングされるテンプレートの名前。バックエンドに依存するテンプレートオブジェクト（&lt;a href=&quot;../topics/templates#django.template.loader.get_template&quot;&gt; &lt;code&gt;get_template()&lt;/code&gt; &lt;/a&gt;によって返されるものなど）、テンプレートの名前、またはテンプレート名のリストを受け入れます。</target>
        </trans-unit>
        <trans-unit id="db092b96cd10dd009a9b2068643f0e4bbf124a87" translate="yes" xml:space="preserve">
          <source>The name of the template to load and render. If it&amp;rsquo;s a list of template names, Django uses &lt;a href=&quot;#django.template.loader.select_template&quot;&gt;&lt;code&gt;select_template()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;#django.template.loader.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt; to find the template.</source>
          <target state="translated">ロードしてレンダリングするテンプレートの名前。それは、テンプレート名のリストだ場合、Djangoは使用しています&lt;a href=&quot;#django.template.loader.select_template&quot;&gt; &lt;code&gt;select_template()&lt;/code&gt; &lt;/a&gt;代わりに、&lt;a href=&quot;#django.template.loader.get_template&quot;&gt; &lt;code&gt;get_template()&lt;/code&gt; &lt;/a&gt;テンプレートを検索します。</target>
        </trans-unit>
        <trans-unit id="737c0a1a6064c300d765b99ff02207d02b841895" translate="yes" xml:space="preserve">
          <source>The name of the temporary tablespace that will be used when running tests. If not provided, Django will use &lt;code&gt;'test_' + USER + '_temp'&lt;/code&gt;.</source>
          <target state="translated">テストの実行時に使用される一時テーブルスペースの名前。指定しない場合、Djangoは &lt;code&gt;'test_' + USER + '_temp'&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="bdd22a08dce1e2aa1f23da79907b34dfd4a75476" translate="yes" xml:space="preserve">
          <source>The name of the uploaded file (e.g. &lt;code&gt;my_file.txt&lt;/code&gt;).</source>
          <target state="translated">アップロードされたファイルの名前（例： &lt;code&gt;my_file.txt&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="692f0414be004838f86345bcc951e3ccca921a62" translate="yes" xml:space="preserve">
          <source>The name of the view that matches the URL, including the namespace if there is one.</source>
          <target state="translated">URLにマッチするビューの名前(名前空間がある場合はその名前を含む)。</target>
        </trans-unit>
        <trans-unit id="c2e349d6af9c3a29d56bc36e87d927a3c9e454d0" translate="yes" xml:space="preserve">
          <source>The name of this field in the form:</source>
          <target state="translated">フォーム内のこのフィールドの名前。</target>
        </trans-unit>
        <trans-unit id="489e5dd5c95e55c141e772c0467fe6b88042386c" translate="yes" xml:space="preserve">
          <source>The name of this lookup, used to identify it on parsing query expressions. It cannot contain the string &lt;code&gt;&quot;__&quot;&lt;/code&gt;.</source>
          <target state="translated">このルックアップの名前。クエリ式を解析するときにこれを識別するために使用されます。文字列 &lt;code&gt;&quot;__&quot;&lt;/code&gt; を含めることはできません。</target>
        </trans-unit>
        <trans-unit id="2e6661c9c866874e38ba2ad4ad7106f9846c235f" translate="yes" xml:space="preserve">
          <source>The name or description of the band, if any.</source>
          <target state="translated">バンド名や説明文がある場合は、それを記載します。</target>
        </trans-unit>
        <trans-unit id="a5c0b9bd80f9f5122dab4271eb7475c4a6fe368d" translate="yes" xml:space="preserve">
          <source>The name that will be used by default for the relation from a related object back to this one. The default is &lt;code&gt;&amp;lt;model_name&amp;gt;_set&lt;/code&gt;.</source>
          <target state="translated">関連オブジェクトからこのオブジェクトへのリレーションにデフォルトで使用される名前。デフォルトは &lt;code&gt;&amp;lt;model_name&amp;gt;_set&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9d604c0cca246c9cb2d010f998bd1dfcef585f81" translate="yes" xml:space="preserve">
          <source>The name that will be used in the widget&amp;rsquo;s HTML &lt;code&gt;name&lt;/code&gt; attribute. It takes the form &lt;a href=&quot;#django.forms.Form.prefix&quot;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/a&gt; into account.</source>
          <target state="translated">ウィジェットのHTML &lt;code&gt;name&lt;/code&gt; 属性で使用される名前。フォームの&lt;a href=&quot;#django.forms.Form.prefix&quot;&gt; &lt;code&gt;prefix&lt;/code&gt; &lt;/a&gt;が考慮されます。</target>
        </trans-unit>
        <trans-unit id="b7f9f93b9b008117bc8f38248c11bc6566bcfd0e" translate="yes" xml:space="preserve">
          <source>The name to use for the relation from the related object back to this one. It&amp;rsquo;s also the default value for &lt;a href=&quot;#django.db.models.ForeignKey.related_query_name&quot;&gt;&lt;code&gt;related_query_name&lt;/code&gt;&lt;/a&gt; (the name to use for the reverse filter name from the target model). See the &lt;a href=&quot;../../topics/db/queries#backwards-related-objects&quot;&gt;related objects documentation&lt;/a&gt; for a full explanation and example. Note that you must set this value when defining relations on &lt;a href=&quot;../../topics/db/models#abstract-base-classes&quot;&gt;abstract models&lt;/a&gt;; and when you do so &lt;a href=&quot;../../topics/db/models#abstract-related-name&quot;&gt;some special syntax&lt;/a&gt; is available.</source>
          <target state="translated">関連オブジェクトからこのオブジェクトへのリレーションに使用する名前。また、&lt;a href=&quot;#django.db.models.ForeignKey.related_query_name&quot;&gt; &lt;code&gt;related_query_name&lt;/code&gt; &lt;/a&gt;（ターゲットモデルの逆フィルター名に使用する名前）のデフォルト値でもあります。完全な説明と例については、&lt;a href=&quot;../../topics/db/queries#backwards-related-objects&quot;&gt;関連オブジェクトのドキュメント&lt;/a&gt;を参照してください。&lt;a href=&quot;../../topics/db/models#abstract-base-classes&quot;&gt;抽象モデルで&lt;/a&gt;関係を定義するときは、この値を設定する必要があることに注意してください。そうすると、&lt;a href=&quot;../../topics/db/models#abstract-related-name&quot;&gt;いくつかの特別な構文&lt;/a&gt;が利用可能になります。</target>
        </trans-unit>
        <trans-unit id="76f23af4881ae86e69f080255f6058aa873af330" translate="yes" xml:space="preserve">
          <source>The name to use for the reverse filter name from the target model. It defaults to the value of &lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;options#django.db.models.Options.default_related_name&quot;&gt;&lt;code&gt;default_related_name&lt;/code&gt;&lt;/a&gt; if set, otherwise it defaults to the name of the model:</source>
          <target state="translated">ターゲットモデルの逆フィルター名に使用する名前。設定されている場合、デフォルトで&lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;options#django.db.models.Options.default_related_name&quot;&gt; &lt;code&gt;default_related_name&lt;/code&gt; の&lt;/a&gt;値になり、そうでない場合はデフォルトでモデルの名前になります。</target>
        </trans-unit>
        <trans-unit id="4d24e9bc1d06786ffe5eaadf43320d55583ce49c" translate="yes" xml:space="preserve">
          <source>The names of the &lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-opclass.html&quot;&gt;PostgreSQL operator classes&lt;/a&gt; to use for this index. If you require a custom operator class, you must provide one for each field in the index.</source>
          <target state="translated">このインデックスに使用する&lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-opclass.html&quot;&gt;PostgreSQL演算子クラス&lt;/a&gt;の名前。カスタム演算子クラスが必要な場合は、インデックスのフィールドごとに1つ指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="8da5fbd9581cdc66ce8a3dcff91495d1cec3201f" translate="yes" xml:space="preserve">
          <source>The namespace package actually has only a single location (i.e. is not spread across more than one directory.)</source>
          <target state="translated">名前空間パッケージは実際には単一の場所にしか存在しません (つまり、複数のディレクトリに分散していません)。</target>
        </trans-unit>
        <trans-unit id="d936c1aaff3b7c9c426c2ca0e9aa56c63b373007" translate="yes" xml:space="preserve">
          <source>The natural key for a &lt;code&gt;Book&lt;/code&gt; is a combination of its name and its author. This means that &lt;code&gt;Person&lt;/code&gt; must be serialized before &lt;code&gt;Book&lt;/code&gt;. To define this dependency, we add one extra line:</source>
          <target state="translated">&lt;code&gt;Book&lt;/code&gt; の自然なキーは、その名前とその著者の組み合わせです。つまり、 &lt;code&gt;Person&lt;/code&gt; は &lt;code&gt;Book&lt;/code&gt; の前にシリアル化する必要があります。この依存関係を定義するには、1行追加します。</target>
        </trans-unit>
        <trans-unit id="2ec556005d5c4c0ea67142f569c1ad37bf2f6b4b" translate="yes" xml:space="preserve">
          <source>The need for the &lt;code&gt;as_data()&lt;/code&gt; method is due to backwards compatibility. Previously &lt;code&gt;ValidationError&lt;/code&gt; instances were lost as soon as their &lt;strong&gt;rendered&lt;/strong&gt; error messages were added to the &lt;code&gt;Form.errors&lt;/code&gt; dictionary. Ideally &lt;code&gt;Form.errors&lt;/code&gt; would have stored &lt;code&gt;ValidationError&lt;/code&gt; instances and methods with an &lt;code&gt;as_&lt;/code&gt; prefix could render them, but it had to be done the other way around in order not to break code that expects rendered error messages in &lt;code&gt;Form.errors&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;as_data()&lt;/code&gt; メソッドが必要なのは、下位互換性のためです。以前は、&lt;strong&gt;レンダリングされた&lt;/strong&gt;エラーメッセージが &lt;code&gt;Form.errors&lt;/code&gt; ディクショナリに追加&lt;strong&gt;さ&lt;/strong&gt;れるとすぐに、 &lt;code&gt;ValidationError&lt;/code&gt; インスタンスが失われました。理想的には、 &lt;code&gt;Form.errors&lt;/code&gt; は &lt;code&gt;ValidationError&lt;/code&gt; インスタンスを格納し、 &lt;code&gt;as_&lt;/code&gt; プレフィックス付きのメソッドでそれらをレンダリングできますが、 &lt;code&gt;Form.errors&lt;/code&gt; でレンダリングされたエラーメッセージを予期するコードを壊さないようにするために、逆の方法で行う必要がありました。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6bf2ab30425084e7ceacc50c0aca0b93bfbe61ba" translate="yes" xml:space="preserve">
          <source>The negative sign in &lt;code&gt;'-expire_date'&lt;/code&gt; means to sort &lt;code&gt;expire_date&lt;/code&gt; in &lt;em&gt;descending&lt;/em&gt; order. Since &lt;code&gt;latest()&lt;/code&gt; gets the last result, the &lt;code&gt;Entry&lt;/code&gt; with the earliest &lt;code&gt;expire_date&lt;/code&gt; is selected.</source>
          <target state="translated">&lt;code&gt;'-expire_date'&lt;/code&gt; の負符号は、 &lt;code&gt;expire_date&lt;/code&gt; を&lt;em&gt;降順&lt;/em&gt;にソートすることを意味します。以来 &lt;code&gt;latest()&lt;/code&gt; 最後の結果を取得し、 &lt;code&gt;Entry&lt;/code&gt; 早いと &lt;code&gt;expire_date&lt;/code&gt; 選択されています。</target>
        </trans-unit>
        <trans-unit id="af6a1992a04eb2938a5d3e68814007a9b6fcc00a" translate="yes" xml:space="preserve">
          <source>The new concept here: The view raises the &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt; exception if a question with the requested ID doesn&amp;rsquo;t exist.</source>
          <target state="translated">ここでの新しい概念：要求されたIDの質問が存在しない場合、ビューは&lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; &lt;/a&gt;例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="a7b5c7266de3c578046f6d8c2709fa4aaabb30f2" translate="yes" xml:space="preserve">
          <source>The new custom command can be called using &lt;code&gt;python manage.py closepoll
&amp;lt;poll_ids&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">新しいカスタムコマンドは、 &lt;code&gt;python manage.py closepoll &amp;lt;poll_ids&amp;gt;&lt;/code&gt; を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="4d9d733433b3c01c8b298774186e815b2898aeaa" translate="yes" xml:space="preserve">
          <source>The new ordering of tests may reveal unexpected dependencies on test case ordering. This is the case with doctests that relied on state left in the database by a given &lt;a href=&quot;tools#django.test.TransactionTestCase&quot;&gt;&lt;code&gt;TransactionTestCase&lt;/code&gt;&lt;/a&gt; test, they must be updated to be able to run independently.</source>
          <target state="translated">テストの新しい順序付けにより、テストケースの順序付けに対する予期しない依存関係が明らかになる可能性があります。これは、特定の&lt;a href=&quot;tools#django.test.TransactionTestCase&quot;&gt; &lt;code&gt;TransactionTestCase&lt;/code&gt; &lt;/a&gt;テストによってデータベースに残された状態に依存するdoctestの場合であり、独立して実行できるように更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="a4271a2f70b6259648bc66f4975c0a1993609268" translate="yes" xml:space="preserve">
          <source>The new template extends &lt;code&gt;admin/base_site.html&lt;/code&gt;, which is the same template as is being overridden.</source>
          <target state="translated">新しいテンプレートは &lt;code&gt;admin/base_site.html&lt;/code&gt; を拡張します。これは、オーバーライドされているのと同じテンプレートです。</target>
        </trans-unit>
        <trans-unit id="e8cd245d7c1883dc95dcd9278028e5ae1db797c0" translate="yes" xml:space="preserve">
          <source>The newer &lt;a href=&quot;#django.db.models.Options.indexes&quot;&gt;&lt;code&gt;indexes&lt;/code&gt;&lt;/a&gt; option provides more functionality than &lt;code&gt;index_together&lt;/code&gt;. &lt;code&gt;index_together&lt;/code&gt; may be deprecated in the future.</source>
          <target state="translated">新しい&lt;a href=&quot;#django.db.models.Options.indexes&quot;&gt; &lt;code&gt;indexes&lt;/code&gt; &lt;/a&gt;オプションは、 &lt;code&gt;index_together&lt;/code&gt; よりも多くの機能を提供します。 &lt;code&gt;index_together&lt;/code&gt; は将来廃止される可能性があります。</target>
        </trans-unit>
        <trans-unit id="99e0f68f9a465dd5381f9e22fd48ae61826bd070" translate="yes" xml:space="preserve">
          <source>The next example is more advanced; it does a subquery to give each resulting &lt;code&gt;Blog&lt;/code&gt; object an &lt;code&gt;entry_count&lt;/code&gt; attribute, an integer count of associated &lt;code&gt;Entry&lt;/code&gt; objects:</source>
          <target state="translated">次の例はより高度です。結果の各 &lt;code&gt;Blog&lt;/code&gt; オブジェクトに &lt;code&gt;entry_count&lt;/code&gt; 属性、関連する &lt;code&gt;Entry&lt;/code&gt; オブジェクトの整数カウントを与えるサブクエリを実行します。</target>
        </trans-unit>
        <trans-unit id="ce6b33d35f1566e3a74e19d2aea4cd6acefd7b28" translate="yes" xml:space="preserve">
          <source>The next example shows the usage of statistical aggregate functions. The underlying math will be not described (you can read about this, for example, at &lt;a href=&quot;https://en.wikipedia.org/wiki/Regression_analysis&quot;&gt;wikipedia&lt;/a&gt;):</source>
          <target state="translated">次の例は、統計集計関数の使用法を示しています。基礎となる数学については説明しません（これについては、たとえば、&lt;a href=&quot;https://en.wikipedia.org/wiki/Regression_analysis&quot;&gt;ウィキペディアで&lt;/a&gt;読むことができます）。</target>
        </trans-unit>
        <trans-unit id="e14c54221552102a85ce433336891d5493a9c4c3" translate="yes" xml:space="preserve">
          <source>The next few sections describe a couple of common ways advanced users may want to modify this setting.</source>
          <target state="translated">次のセクションでは、上級者がこの設定を変更する一般的な方法をいくつか説明します。</target>
        </trans-unit>
        <trans-unit id="828efe97e4e160671bd8de2059dad8573dff24d3" translate="yes" xml:space="preserve">
          <source>The next step is to point the root URLconf at the &lt;code&gt;polls.urls&lt;/code&gt; module. In &lt;code&gt;mysite/urls.py&lt;/code&gt;, add an import for &lt;code&gt;django.urls.include&lt;/code&gt; and insert an &lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;urlpatterns&lt;/code&gt; list, so you have:</source>
          <target state="translated">次のステップは、 &lt;code&gt;polls.urls&lt;/code&gt; モジュールでルートURLconfをポイントすることです。で &lt;code&gt;mysite/urls.py&lt;/code&gt; 、のインポートを追加 &lt;code&gt;django.urls.include&lt;/code&gt; を挿入&lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; &lt;/a&gt;で &lt;code&gt;urlpatterns&lt;/code&gt; のあなたが持っているので、リスト：</target>
        </trans-unit>
        <trans-unit id="55407ce42ace76171ba4356c8a83e24c70d2b092" translate="yes" xml:space="preserve">
          <source>The next steps are for you to &lt;a href=&quot;https://www.djangoproject.com/download/&quot;&gt;download Django&lt;/a&gt;, read &lt;a href=&quot;tutorial01&quot;&gt;the tutorial&lt;/a&gt; and join &lt;a href=&quot;https://www.djangoproject.com/community/&quot;&gt;the community&lt;/a&gt;. Thanks for your interest!</source>
          <target state="translated">次のステップは、&lt;a href=&quot;https://www.djangoproject.com/download/&quot;&gt;Django&lt;/a&gt;をダウンロードし&lt;a href=&quot;tutorial01&quot;&gt;、チュートリアル&lt;/a&gt;を読んで&lt;a href=&quot;https://www.djangoproject.com/community/&quot;&gt;、コミュニティに&lt;/a&gt;参加することです。関心をお寄せいただきありがとうございます。</target>
        </trans-unit>
        <trans-unit id="b331b66099d3bb9b909d08656c6ca6ec0260e35f" translate="yes" xml:space="preserve">
          <source>The notation to use a &lt;code&gt;Transform&lt;/code&gt; in a lookup expression is &lt;code&gt;&amp;lt;expression&amp;gt;__&amp;lt;transformation&amp;gt;&lt;/code&gt; (e.g. &lt;code&gt;date__year&lt;/code&gt;).</source>
          <target state="translated">ルックアップ式で &lt;code&gt;Transform&lt;/code&gt; を使用する表記は、 &lt;code&gt;&amp;lt;expression&amp;gt;__&amp;lt;transformation&amp;gt;&lt;/code&gt; （例： &lt;code&gt;date__year&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="3fc93828bd60e8b69b385a482cfa174bbd405403" translate="yes" xml:space="preserve">
          <source>The notation to use a lookup in an expression is &lt;code&gt;&amp;lt;lhs&amp;gt;__&amp;lt;lookup_name&amp;gt;=&amp;lt;rhs&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">式でルックアップを使用する表記は、 &lt;code&gt;&amp;lt;lhs&amp;gt;__&amp;lt;lookup_name&amp;gt;=&amp;lt;rhs&amp;gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a16e2afaea1d53a6c98fd759e5cb16b5d68e564a" translate="yes" xml:space="preserve">
          <source>The number of days a password reset link is valid for.</source>
          <target state="translated">パスワードリセットリンクが有効な日数。</target>
        </trans-unit>
        <trans-unit id="13682a7aacefbe7b282e2b6bf69b24d557af9e50" translate="yes" xml:space="preserve">
          <source>The number of decimal places to store with the number.</source>
          <target state="translated">数字と一緒に格納する小数点以下の桁数です。</target>
        </trans-unit>
        <trans-unit id="00c59dfddf64ff7f7efb2a30b5234d67dba743c6" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (0-indexed)</source>
          <target state="translated">ループの終了からの反復回数(インデックスは0</target>
        </trans-unit>
        <trans-unit id="66c416e66d2fe43d99293bca74ef6b14e3036e51" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (1-indexed)</source>
          <target state="translated">ループの終了からの反復回数(1インデックス</target>
        </trans-unit>
        <trans-unit id="4fe342071d44857b960cd507f4be351d570cc91e" translate="yes" xml:space="preserve">
          <source>The number of request parameters is correlated to the amount of time needed to process the request and populate the GET and POST dictionaries. Large requests could be used as a denial-of-service attack vector if left unchecked. Since web servers don&amp;rsquo;t typically perform deep request inspection, it&amp;rsquo;s not possible to perform a similar check at that level.</source>
          <target state="translated">リクエストパラメータの数は、リクエストを処理し、GETディクショナリとPOSTディクショナリにデータを入力するのに必要な時間と相関しています。チェックしないままにしておくと、大きなリクエストがサービス拒否攻撃ベクトルとして使用される可能性があります。Webサーバーは通常、詳細な要求検査を実行しないため、そのレベルで同様のチェックを実行することはできません。</target>
        </trans-unit>
        <trans-unit id="2260088ab28deed85f21e7c759147a5567b3199a" translate="yes" xml:space="preserve">
          <source>The number of seconds a password reset link is valid for.</source>
          <target state="translated">パスワードリセットリンクが有効な秒数です。</target>
        </trans-unit>
        <trans-unit id="546d5c180752491cf696f9bc101df2930192df31" translate="yes" xml:space="preserve">
          <source>The number of seconds before a cache entry is considered stale. If the value of this settings is &lt;code&gt;None&lt;/code&gt;, cache entries will not expire.</source>
          <target state="translated">キャッシュエントリが古いと見なされるまでの秒数。この設定の値が &lt;code&gt;None&lt;/code&gt; の場合、キャッシュエントリは期限切れになりません。</target>
        </trans-unit>
        <trans-unit id="d1457f2a74a27329cebb1009ea40b2e349137787" translate="yes" xml:space="preserve">
          <source>The number of subtle interactions between &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin&quot;&gt;&lt;code&gt;FormMixin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; is already testing our ability to manage things. It&amp;rsquo;s unlikely you&amp;rsquo;d want to write this kind of class yourself.</source>
          <target state="translated">&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin&quot;&gt; &lt;code&gt;FormMixin&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; の&lt;/a&gt;間の微妙な相互作用の数は、すでに物事を管理する能力をテストしています。この種のクラスを自分で書きたいとは思わないでしょう。</target>
        </trans-unit>
        <trans-unit id="b62d9c08219ec163864cfb5b840511e185643066" translate="yes" xml:space="preserve">
          <source>The number of subtle interactions between &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin&quot;&gt;&lt;code&gt;FormMixin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; is already testing our ability to manage things. It&amp;rsquo;s unlikely you&amp;rsquo;d want to write this kind of class yourself.</source>
          <target state="translated">&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin&quot;&gt; &lt;code&gt;FormMixin&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; の&lt;/a&gt;間の微妙な相互作用の数は、物事を管理する能力をすでにテストしています。この種のクラスを自分で作成することはまずありません。</target>
        </trans-unit>
        <trans-unit id="aee54169fbe489f4be8a2932eda638f26f68a734" translate="yes" xml:space="preserve">
          <source>The numeric mode (i.e. &lt;code&gt;0o644&lt;/code&gt;) to set newly uploaded files to. For more information about what these modes mean, see the documentation for &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.chmod&quot;&gt;&lt;code&gt;os.chmod()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">新しくアップロードされたファイルに設定する数値モード（つまり、 &lt;code&gt;0o644&lt;/code&gt; ）。これらのモードの意味の詳細については、&lt;a href=&quot;https://docs.python.org/3/library/os.html#os.chmod&quot;&gt; &lt;code&gt;os.chmod()&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b7ad979907d146b501a20d10b822273d1806b93c" translate="yes" xml:space="preserve">
          <source>The numeric mode to apply to directories created in the process of uploading files.</source>
          <target state="translated">ファイルをアップロードする過程で作成されたディレクトリに適用する数値モード。</target>
        </trans-unit>
        <trans-unit id="22b988dfd0f6161a0a5adc49ca1bcc5714bc4ab5" translate="yes" xml:space="preserve">
          <source>The object &lt;code&gt;django.db.connection&lt;/code&gt; represents the default database connection. To use the database connection, call &lt;code&gt;connection.cursor()&lt;/code&gt; to get a cursor object. Then, call &lt;code&gt;cursor.execute(sql, [params])&lt;/code&gt; to execute the SQL and &lt;code&gt;cursor.fetchone()&lt;/code&gt; or &lt;code&gt;cursor.fetchall()&lt;/code&gt; to return the resulting rows.</source>
          <target state="translated">オブジェクト &lt;code&gt;django.db.connection&lt;/code&gt; はデフォルトのデータベース接続を表します。データベース接続を使用するには、 &lt;code&gt;connection.cursor()&lt;/code&gt; を呼び出してカーソルオブジェクトを取得します。次に、 &lt;code&gt;cursor.execute(sql, [params])&lt;/code&gt; を呼び出してSQLを実行し、 &lt;code&gt;cursor.fetchone()&lt;/code&gt; または &lt;code&gt;cursor.fetchall()&lt;/code&gt; を呼び出して結果の行を返します。</target>
        </trans-unit>
        <trans-unit id="e00bf3a0502c4dc9197752dccc5c2a67f4930049" translate="yes" xml:space="preserve">
          <source>The object`s &lt;code&gt;repr()&lt;/code&gt; after the modification.</source>
          <target state="translated">変更後のオブジェクトの &lt;code&gt;repr()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1f9892589134caf81b0b3fc3e3efbcd0baaac0a5" translate="yes" xml:space="preserve">
          <source>The objects in the changelist page can be filtered with lookups from the URL&amp;rsquo;s query string. This is how &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_filter&quot;&gt;&lt;code&gt;list_filter&lt;/code&gt;&lt;/a&gt; works, for example. The lookups are similar to what&amp;rsquo;s used in &lt;a href=&quot;../../models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;QuerySet.filter()&lt;/code&gt;&lt;/a&gt; (e.g. &lt;code&gt;user__email=user@example.com&lt;/code&gt;). Since the lookups in the query string can be manipulated by the user, they must be sanitized to prevent unauthorized data exposure.</source>
          <target state="translated">チェンジリストページのオブジェクトは、URLのクエリ文字列からのルックアップでフィルタリングできます。これは、たとえば&lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_filter&quot;&gt; &lt;code&gt;list_filter&lt;/code&gt; の&lt;/a&gt;動作方法です。ルックアップは &lt;code&gt;user__email=user@example.com&lt;/code&gt; &lt;a href=&quot;../../models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;QuerySet.filter()&lt;/code&gt; &lt;/a&gt;使用されるものと似ています（例：user__email=user@example.com）。クエリ文字列のルックアップはユーザーが操作できるため、不正なデータの漏えいを防ぐために、それらをサニタイズする必要があります。</target>
        </trans-unit>
        <trans-unit id="891fc8ec3b599241bbcff2dce045076385cc7d5b" translate="yes" xml:space="preserve">
          <source>The one gotcha here is that you should be careful not to specify a primary-key value explicitly when saving new objects, if you cannot guarantee the primary-key value is unused. For more on this nuance, see &lt;a href=&quot;#explicitly-specifying-auto-primary-key-values&quot;&gt;Explicitly specifying auto-primary-key values&lt;/a&gt; above and &lt;a href=&quot;#forcing-an-insert-or-update&quot;&gt;Forcing an INSERT or UPDATE&lt;/a&gt; below.</source>
          <target state="translated">ここで1つ問題があるのは、新しいオブジェクトを保存するときに、主キー値が未使用であることが保証できない場合は、主キー値を明示的に指定しないように注意する必要があることです。このニュアンスの詳細については、上記の&lt;a href=&quot;#explicitly-specifying-auto-primary-key-values&quot;&gt;自動主キー値の明示的な指定&lt;/a&gt;および下記の&lt;a href=&quot;#forcing-an-insert-or-update&quot;&gt;INSERTまたはUPDATEの強制を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="757c851014b010cea5120b811277066509e78ba7" translate="yes" xml:space="preserve">
          <source>The one potential gotcha is that &lt;a href=&quot;#django.db.models.FilePathField.match&quot;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; applies to the base filename, not the full path. So, this example:</source>
          <target state="translated">潜在的な問題の1つは、&lt;a href=&quot;#django.db.models.FilePathField.match&quot;&gt; &lt;code&gt;match&lt;/code&gt; &lt;/a&gt;が完全なパスではなくベースファイル名に適用されることです。したがって、この例：</target>
        </trans-unit>
        <trans-unit id="e8c61e286aa56beddb1fc2ccb35f397cdd75e322" translate="yes" xml:space="preserve">
          <source>The only caveat is that prior to PostgreSQL 11, adding columns with default values causes a full rewrite of the table, for a time proportional to its size. For this reason, it&amp;rsquo;s recommended you always create new columns with &lt;code&gt;null=True&lt;/code&gt;, as this way they will be added immediately.</source>
          <target state="translated">唯一の注意点は、PostgreSQL 11より前のバージョンでは、デフォルト値で列を追加すると、テーブルのサイズに比例した時間でテーブルが完全に書き直されることです。このため、常に &lt;code&gt;null=True&lt;/code&gt; で新しい列を作成することをお勧めします。これにより、列がすぐに追加されます。</target>
        </trans-unit>
        <trans-unit id="c9c8b224a20d235aa17fd7c10c62c76504526c9a" translate="yes" xml:space="preserve">
          <source>The only decision you have to make is whether you want the parent models to be models in their own right (with their own database tables), or if the parents are just holders of common information that will only be visible through the child models.</source>
          <target state="translated">あなたがしなければならない唯一の決定は、親モデルをそれ自体のモデル(独自のデータベーステーブルを持つ)にしたいのか、それとも親が子モデルを通してのみ見える共通の情報の保持者に過ぎないのか、ということです。</target>
        </trans-unit>
        <trans-unit id="2e679d2a9d1e0da3e526b09c8d435d169042d55c" translate="yes" xml:space="preserve">
          <source>The only difference between this example and the previous example is that this one uses template loading instead of the CSV module. The rest of the code &amp;ndash; such as the &lt;code&gt;content_type='text/csv'&lt;/code&gt; &amp;ndash; is the same.</source>
          <target state="translated">この例と前の例の唯一の違いは、この例ではCSVモジュールの代わりにテンプレートの読み込みを使用していることです。 &lt;code&gt;content_type='text/csv'&lt;/code&gt; などのコードの残りの部分は同じです。</target>
        </trans-unit>
        <trans-unit id="ccb259ef09ebc29f938af14253599fa5fc48577f" translate="yes" xml:space="preserve">
          <source>The only exceptions are variables that are already marked as &amp;ldquo;safe&amp;rdquo; from escaping, either by the code that populated the variable, or because it has had the &lt;a href=&quot;#std:templatefilter-safe&quot;&gt;&lt;code&gt;safe&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filters applied.</source>
          <target state="translated">唯一の例外は、変数にデータを入力したコードによって、または&lt;a href=&quot;#std:templatefilter-safe&quot;&gt; &lt;code&gt;safe&lt;/code&gt; &lt;/a&gt;フィルターまたは&lt;a href=&quot;#std:templatefilter-escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; &lt;/a&gt;フィルターが適用されているために、エスケープから「安全」と既にマークされている変数です。</target>
        </trans-unit>
        <trans-unit id="e121fdae28d92727bd6e8181e283ab3198bfde73" translate="yes" xml:space="preserve">
          <source>The only exceptions that are not visible to the test client are &lt;a href=&quot;../http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#SystemExit&quot;&gt;&lt;code&gt;SystemExit&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt;. Django catches these exceptions internally and converts them into the appropriate HTTP response codes. In these cases, you can check &lt;code&gt;response.status_code&lt;/code&gt; in your test.</source>
          <target state="translated">テストクライアントに表示されない唯一の例外は、&lt;a href=&quot;../http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#SystemExit&quot;&gt; &lt;code&gt;SystemExit&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousOperation&lt;/code&gt; &lt;/a&gt;です。Djangoはこれらの例外を内部でキャッチし、適切なHTTP応答コードに変換します。これらの場合、テストで &lt;code&gt;response.status_code&lt;/code&gt; を確認できます。</target>
        </trans-unit>
        <trans-unit id="a6ca94ec80dbdad447c4b8efa0935510294065af" translate="yes" xml:space="preserve">
          <source>The only new concept here is the &lt;code&gt;self.nodelist.render(context)&lt;/code&gt; in &lt;code&gt;UpperNode.render()&lt;/code&gt;.</source>
          <target state="translated">ここでの唯一の新しい概念である &lt;code&gt;self.nodelist.render(context)&lt;/code&gt; で &lt;code&gt;UpperNode.render()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c109e1873867f26e06020a7b1a915ae80add5d2a" translate="yes" xml:space="preserve">
          <source>The only parameter that is set differently from the source raster is the name. The default value of the raster name is the name of the source raster appended with &lt;code&gt;'_copy' + source_driver_name&lt;/code&gt;. For file-based rasters it is recommended to provide the file path of the target raster.</source>
          <target state="translated">ソースラスタとは別に設定される唯一のパラメータは名前です。ラスタ名のデフォルト値は、 &lt;code&gt;'_copy' + source_driver_name&lt;/code&gt; 追加されたソースラスタの名前です。ファイルベースのラスターの場合、ターゲットラスターのファイルパスを指定することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3eb902536903cadc270686a49f3f13cd76621106" translate="yes" xml:space="preserve">
          <source>The only place you should assign to settings is in a settings file.</source>
          <target state="translated">設定に割り当てるべき場所は、設定ファイルの中だけです。</target>
        </trans-unit>
        <trans-unit id="082d8cd7773874714658bc00d84f5caf59366dcc" translate="yes" xml:space="preserve">
          <source>The only thing this does is create those extra permissions when you run &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;manage.py migrate&lt;/code&gt;&lt;/a&gt; (the function that creates permissions is connected to the &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_migrate&quot;&gt;&lt;code&gt;post_migrate&lt;/code&gt;&lt;/a&gt; signal). Your code is in charge of checking the value of these permissions when a user is trying to access the functionality provided by the application (changing the status of tasks or closing tasks.) Continuing the above example, the following checks if a user may close tasks:</source>
          <target state="translated">これが行う唯一のことは、&lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;manage.py migrate&lt;/code&gt; &lt;/a&gt;を実行するときにこれらの追加の権限を作成することです（権限を作成する関数は&lt;a href=&quot;../../ref/signals#django.db.models.signals.post_migrate&quot;&gt; &lt;code&gt;post_migrate&lt;/code&gt; &lt;/a&gt;シグナルに接続されています）。コードは、ユーザーがアプリケーションによって提供される機能にアクセスしようとするときに、これらの権限の値をチェックする役割を果たします（タスクのステータスの変更またはタスクの終了）。上記の例を続けて、ユーザーがタスクを終了できるかどうかを次のようにチェックします。 ：</target>
        </trans-unit>
        <trans-unit id="994e6a000e80d66476b990aec150bb90898dd1a3" translate="yes" xml:space="preserve">
          <source>The operations are the key; they are a set of declarative instructions which tell Django what schema changes need to be made. Django scans them and builds an in-memory representation of all of the schema changes to all apps, and uses this to generate the SQL which makes the schema changes.</source>
          <target state="translated">宣言的な命令のセットであり、どのようなスキーマ変更が必要かを Django に伝えるためのものです。Django はそれらをスキャンして、すべてのアプリのスキーマ変更のインメモリ表現を構築し、スキーマ変更を行う SQL を生成するためにこれを使用します。</target>
        </trans-unit>
        <trans-unit id="59b2d4ff04a59fad81f4bdd78bf742f2968f4426" translate="yes" xml:space="preserve">
          <source>The option (&lt;code&gt;delete&lt;/code&gt; in our example) is available in the options dict parameter of the handle method. See the &lt;a href=&quot;https://docs.python.org/3/library/argparse.html#module-argparse&quot;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt; Python documentation for more about &lt;code&gt;add_argument&lt;/code&gt; usage.</source>
          <target state="translated">オプション（この例では &lt;code&gt;delete&lt;/code&gt; ）は、handleメソッドのoptions dictパラメータで使用できます。 &lt;code&gt;add_argument&lt;/code&gt; の使用方法の詳細については、&lt;a href=&quot;https://docs.python.org/3/library/argparse.html#module-argparse&quot;&gt; &lt;code&gt;argparse&lt;/code&gt; &lt;/a&gt; Pythonのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="46085a876254f9e93b8e417a3b34efa0b18250c9" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;elidable&lt;/code&gt; argument determines whether or not the operation will be removed (elided) when &lt;a href=&quot;../topics/migrations#migration-squashing&quot;&gt;squashing migrations&lt;/a&gt;.</source>
          <target state="translated">オプションの &lt;code&gt;elidable&lt;/code&gt; 引数は、migrationsを押しつぶすときに操作が削除（除外）されるかどうかを決定し&lt;a href=&quot;../topics/migrations#migration-squashing&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ae878dfc21edd876de0c4de4b1e1d4f302abd27c" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;encoding&lt;/code&gt; parameter allows you to specify a non-standard encoding of the strings in the source. This is typically useful when you obtain &lt;code&gt;DjangoUnicodeDecodeError&lt;/code&gt; exceptions while reading field values.</source>
          <target state="translated">オプションの &lt;code&gt;encoding&lt;/code&gt; パラメータを使用すると、ソース内の文字列の非標準エンコーディングを指定できます。これは通常、フィールド値の読み取り中に &lt;code&gt;DjangoUnicodeDecodeError&lt;/code&gt; 例外を取得する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="3ca3aa3cff8cfc19f317122bb903f43713b45ad7" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;exclude&lt;/code&gt; argument can be used to provide a list of field names that can be excluded from validation and cleaning. &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt; uses this argument to exclude fields that aren&amp;rsquo;t present on your form from being validated since any errors raised could not be corrected by the user.</source>
          <target state="translated">オプションの &lt;code&gt;exclude&lt;/code&gt; 引数を使用して、検証とクリーニングから除外できるフィールド名のリストを提供できます。発生したエラーはユーザーが修正できなかったため、&lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt;はこの引数を使用して、フォームに存在しないフィールドを検証から除外します。</target>
        </trans-unit>
        <trans-unit id="de1b3ebb8898e95c67f73c1ce55c5514432de02b" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;hints&lt;/code&gt; argument will be passed as &lt;code&gt;**hints&lt;/code&gt; to the &lt;a href=&quot;../topics/db/multi-db#allow_migrate&quot;&gt;&lt;code&gt;allow_migrate()&lt;/code&gt;&lt;/a&gt; method of database routers to assist them in making a routing decision. See &lt;a href=&quot;../topics/db/multi-db#topics-db-multi-db-hints&quot;&gt;Hints&lt;/a&gt; for more details on database hints.</source>
          <target state="translated">オプションの &lt;code&gt;hints&lt;/code&gt; 引数は、として渡されます &lt;code&gt;**hints&lt;/code&gt; に&lt;a href=&quot;../topics/db/multi-db#allow_migrate&quot;&gt; &lt;code&gt;allow_migrate()&lt;/code&gt; &lt;/a&gt;ルーティング決定を行う際に、それらを支援するために、データベースのルーターの方法。データベースのヒントの詳細については、&lt;a href=&quot;../topics/db/multi-db#topics-db-multi-db-hints&quot;&gt;ヒント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="81a6dbd25930957894307486eacb1dd37f8db26b" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;hints&lt;/code&gt; argument will be passed as &lt;code&gt;**hints&lt;/code&gt; to the &lt;a href=&quot;../topics/db/multi-db#allow_migrate&quot;&gt;&lt;code&gt;allow_migrate()&lt;/code&gt;&lt;/a&gt; method of database routers to assist them in making routing decisions. See &lt;a href=&quot;../topics/db/multi-db#topics-db-multi-db-hints&quot;&gt;Hints&lt;/a&gt; for more details on database hints.</source>
          <target state="translated">オプションの &lt;code&gt;hints&lt;/code&gt; 引数は、として渡されます &lt;code&gt;**hints&lt;/code&gt; に&lt;a href=&quot;../topics/db/multi-db#allow_migrate&quot;&gt; &lt;code&gt;allow_migrate()&lt;/code&gt; &lt;/a&gt;ルーティング決定を行う際に、それらを支援するために、データベースのルーターの方法。データベースのヒントの詳細については、&lt;a href=&quot;../topics/db/multi-db#topics-db-multi-db-hints&quot;&gt;ヒント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="24f6613b59b288906159fdb528e498f08daa631a" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;salt&lt;/code&gt; argument can be used to provide extra protection against brute force attacks on your secret key. If supplied, the &lt;code&gt;max_age&lt;/code&gt; argument will be checked against the signed timestamp attached to the cookie value to ensure the cookie is not older than &lt;code&gt;max_age&lt;/code&gt; seconds.</source>
          <target state="translated">オプションの &lt;code&gt;salt&lt;/code&gt; 引数を使用して、秘密鍵に対するブルートフォース攻撃に対する追加の保護を提供できます。指定されている場合、 &lt;code&gt;max_age&lt;/code&gt; 引数は、Cookie値に添付されている署名付きタイムスタンプと照合され、Cookieが &lt;code&gt;max_age&lt;/code&gt; 秒よりも古くないことを確認します。</target>
        </trans-unit>
        <trans-unit id="3e0beb39d35735253ce3024401bfaa5342ed782f" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;save&lt;/code&gt; argument controls whether or not the model instance is saved after the file associated with this field has been deleted. Defaults to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">オプションの &lt;code&gt;save&lt;/code&gt; 引数は、このフィールドに関連付けられたファイルが削除された後にモデルインスタンスを保存するかどうかを制御します。デフォルトは &lt;code&gt;True&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7e395df4be2b5acaec77be07da175d627106ae22" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;skip&lt;/code&gt; argument is a list of origins to ignore when extending templates. This allow templates to extend other templates of the same name. It also used to avoid recursion errors.</source>
          <target state="translated">オプションの &lt;code&gt;skip&lt;/code&gt; 引数は、テンプレートを拡張するときに無視するオリジンのリストです。これにより、テンプレートは同じ名前の他のテンプレートを拡張できます。再帰エラーを回避するためにも使用されます。</target>
        </trans-unit>
        <trans-unit id="dbec13ae4d38c99ea3eaf390fec6dbd0d46a405c" translate="yes" xml:space="preserve">
          <source>The options &lt;code&gt;auto_now_add&lt;/code&gt;, &lt;code&gt;auto_now&lt;/code&gt;, and &lt;code&gt;default&lt;/code&gt; are mutually exclusive. Any combination of these options will result in an error.</source>
          <target state="translated">オプション &lt;code&gt;auto_now_add&lt;/code&gt; 、 &lt;code&gt;auto_now&lt;/code&gt; 、および &lt;code&gt;default&lt;/code&gt; は相互に排他的です。これらのオプションを組み合わせて使用​​すると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="5d4f557111c3d758e5f38590ca4f0403259c181e" translate="yes" xml:space="preserve">
          <source>The order in &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; matters because a middleware can depend on other middleware. For instance, &lt;a href=&quot;../../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt;&lt;code&gt;AuthenticationMiddleware&lt;/code&gt;&lt;/a&gt; stores the authenticated user in the session; therefore, it must run after &lt;a href=&quot;../../ref/middleware#django.contrib.sessions.middleware.SessionMiddleware&quot;&gt;&lt;code&gt;SessionMiddleware&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;../../ref/middleware#middleware-ordering&quot;&gt;Middleware ordering&lt;/a&gt; for some common hints about ordering of Django middleware classes.</source>
          <target state="translated">ミドルウェアは他のミドルウェアに依存する可能性があるため、&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;の順序は重要です。たとえば、&lt;a href=&quot;../../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt; &lt;code&gt;AuthenticationMiddleware&lt;/code&gt; &lt;/a&gt;は、認証されたユーザーをセッションに格納します。したがって、&lt;a href=&quot;../../ref/middleware#django.contrib.sessions.middleware.SessionMiddleware&quot;&gt; &lt;code&gt;SessionMiddleware&lt;/code&gt; の&lt;/a&gt;後に実行する必要があります。Djangoミドルウェアクラスの順序に関する一般的なヒントについては、&lt;a href=&quot;../../ref/middleware#middleware-ordering&quot;&gt;ミドルウェアの順序&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="bf6c603db3c6bcb6e0cdce02b8261d81d20af0bb" translate="yes" xml:space="preserve">
          <source>The order in which assets are inserted into the DOM is often important. For example, you may have a script that depends on jQuery. Therefore, combining &lt;code&gt;Media&lt;/code&gt; objects attempts to preserve the relative order in which assets are defined in each &lt;code&gt;Media&lt;/code&gt; class.</source>
          <target state="translated">多くの場合、アセットがDOMに挿入される順序は重要です。たとえば、jQueryに依存するスクリプトがあるとします。したがって、 &lt;code&gt;Media&lt;/code&gt; オブジェクトを組み合わせると、各 &lt;code&gt;Media&lt;/code&gt; クラスでアセットが定義される相対的な順序が維持されます。</target>
        </trans-unit>
        <trans-unit id="e1925eb506b801bc393ff892c8be28e0c8894df9" translate="yes" xml:space="preserve">
          <source>The order in which fields are added to the deferred set does not matter. Calling &lt;code&gt;defer()&lt;/code&gt; with a field name that has already been deferred is harmless (the field will still be deferred).</source>
          <target state="translated">フィールドが据え置きセットに追加される順序は重要ではありません。既に延期されているフィールド名を指定して &lt;code&gt;defer()&lt;/code&gt; を呼び出しても問題はありません（フィールドは引き続き延期されます）。</target>
        </trans-unit>
        <trans-unit id="91b05ba78c4e0ad277b8d18abd2c3f37d8c4c5b8" translate="yes" xml:space="preserve">
          <source>The order in which routers are processed is significant. Routers will be queried in the order they are listed in the &lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt;&lt;code&gt;DATABASE_ROUTERS&lt;/code&gt;&lt;/a&gt; setting. In this example, the &lt;code&gt;AuthRouter&lt;/code&gt; is processed before the &lt;code&gt;PrimaryReplicaRouter&lt;/code&gt;, and as a result, decisions concerning the models in &lt;code&gt;auth&lt;/code&gt; are processed before any other decision is made. If the &lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt;&lt;code&gt;DATABASE_ROUTERS&lt;/code&gt;&lt;/a&gt; setting listed the two routers in the other order, &lt;code&gt;PrimaryReplicaRouter.allow_migrate()&lt;/code&gt; would be processed first. The catch-all nature of the PrimaryReplicaRouter implementation would mean that all models would be available on all databases.</source>
          <target state="translated">ルーターが処理される順序は重要です。ルーターは、&lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt; &lt;code&gt;DATABASE_ROUTERS&lt;/code&gt; &lt;/a&gt;設定にリストされている順序で照会されます。この例では、 &lt;code&gt;AuthRouter&lt;/code&gt; は、前に処理され &lt;code&gt;PrimaryReplicaRouter&lt;/code&gt; 、その結果、中のモデルに関する決定 &lt;code&gt;auth&lt;/code&gt; 、他の決定がなされる前に処理されます。&lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt; &lt;code&gt;DATABASE_ROUTERS&lt;/code&gt; &lt;/a&gt;設定に2つのルーターが逆の順序でリストされている場合、 &lt;code&gt;PrimaryReplicaRouter.allow_migrate()&lt;/code&gt; が最初に処理されます。 PrimaryReplicaRouter実装のすべての性質により、すべてのモデルがすべてのデータベースで使用可能になります。</target>
        </trans-unit>
        <trans-unit id="21797a53c5c3f090cf4e3abea4b784de459e747a" translate="yes" xml:space="preserve">
          <source>The order of &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt; matters, so if the same username and password is valid in multiple backends, Django will stop processing at the first positive match.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt;の順序が重要であるため、同じユーザー名とパスワードが複数のバックエンドで有効な場合、Djangoは最初に一致した場所で処理を停止します。</target>
        </trans-unit>
        <trans-unit id="22cdfae8dbc9bd47788fb40bf4bacd41605d32e8" translate="yes" xml:space="preserve">
          <source>The order of &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; is significant! For example, if you want to customize the Django admin, you might choose to override the standard &lt;code&gt;admin/base_site.html&lt;/code&gt; template, from &lt;code&gt;django.contrib.admin&lt;/code&gt;, with your own &lt;code&gt;admin/base_site.html&lt;/code&gt; in &lt;code&gt;myproject.polls&lt;/code&gt;. You must then make sure that your &lt;code&gt;myproject.polls&lt;/code&gt; comes &lt;em&gt;before&lt;/em&gt;&lt;code&gt;django.contrib.admin&lt;/code&gt; in &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, otherwise &lt;code&gt;django.contrib.admin&lt;/code&gt;&amp;rsquo;s will be loaded first and yours will be ignored.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;の順序は重要です。あなたはDjangoの管理者をカスタマイズしたい場合たとえば、あなたは標準上書きすることを選択するかもしれません &lt;code&gt;admin/base_site.html&lt;/code&gt; から、テンプレートを &lt;code&gt;django.contrib.admin&lt;/code&gt; ご自身で、 &lt;code&gt;admin/base_site.html&lt;/code&gt; で &lt;code&gt;myproject.polls&lt;/code&gt; 。次に、あなたのことを確認する必要があります &lt;code&gt;myproject.polls&lt;/code&gt; が来る&lt;em&gt;前に&lt;/em&gt; &lt;code&gt;django.contrib.admin&lt;/code&gt; に&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;そうでない場合は、 &lt;code&gt;django.contrib.admin&lt;/code&gt; sが最初にロードされ、あなたが無視されます」。</target>
        </trans-unit>
        <trans-unit id="a1068ec95eaa283b6039de7f96e36b6cc7116c6d" translate="yes" xml:space="preserve">
          <source>The order of &lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;select_related()&lt;/code&gt; chaining isn&amp;rsquo;t important. These querysets are equivalent:</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; および &lt;code&gt;select_related()&lt;/code&gt; チェーンの順序は重要ではありません。これらのクエリセットは同等です：</target>
        </trans-unit>
        <trans-unit id="5499d8f59b9f5c13285991f2b461a09bd23ce9e8" translate="yes" xml:space="preserve">
          <source>The order of a &lt;code&gt;Question&lt;/code&gt; object&amp;rsquo;s related &lt;code&gt;Answer&lt;/code&gt; objects can be set by passing in a list of &lt;code&gt;Answer&lt;/code&gt; primary keys:</source>
          <target state="translated">&lt;code&gt;Question&lt;/code&gt; オブジェクトの関連する &lt;code&gt;Answer&lt;/code&gt; オブジェクトの順序は、 &lt;code&gt;Answer&lt;/code&gt; の主キーのリストを渡すことで設定できます。</target>
        </trans-unit>
        <trans-unit id="bc04f4694d1052f69aed771a1d1c7d7ca59ef7c2" translate="yes" xml:space="preserve">
          <source>The order of fields in your query doesn&amp;rsquo;t matter. In other words, both of the following queries work identically:</source>
          <target state="translated">クエリ内のフィールドの順序は重要ではありません。つまり、次のクエリはどちらも同じように機能します。</target>
        </trans-unit>
        <trans-unit id="3bcf47b56cab432271bc226d6a899e7e79d541cc" translate="yes" xml:space="preserve">
          <source>The ordering of attributes of an HTML element is not significant.</source>
          <target state="translated">HTML要素の属性の順序は重要ではありません。</target>
        </trans-unit>
        <trans-unit id="c1727d38a54d75600eb696ce3889db4987a1853b" translate="yes" xml:space="preserve">
          <source>The ordering of lookups matters.</source>
          <target state="translated">ルックアップの順序が重要です。</target>
        </trans-unit>
        <trans-unit id="90d54bfcd3086dd384ceebe47f26905291a11d5a" translate="yes" xml:space="preserve">
          <source>The original use case for adding context processors for Jinja2 involved:</source>
          <target state="translated">Jinja2 のコンテキストプロセッサを追加するための元々のユースケースは、これに関係していました。</target>
        </trans-unit>
        <trans-unit id="d4147c68696bbf722f232d0a404cbe34a2e44464" translate="yes" xml:space="preserve">
          <source>The outer &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; container receives the &lt;code&gt;id&lt;/code&gt; attribute of the widget, if defined, or &lt;a href=&quot;api#django.forms.BoundField.auto_id&quot;&gt;&lt;code&gt;BoundField.auto_id&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="translated">外側の &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; コンテナーは、ウィジェットの &lt;code&gt;id&lt;/code&gt; 属性（定義されている場合）、または&lt;a href=&quot;api#django.forms.BoundField.auto_id&quot;&gt; &lt;code&gt;BoundField.auto_id&lt;/code&gt; を受け取り&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="29161efdb3eaeebb42eedab86571ec7318d50ea3" translate="yes" xml:space="preserve">
          <source>The outer &lt;code&gt;mysite/&lt;/code&gt; root directory is a container for your project. Its name doesn&amp;rsquo;t matter to Django; you can rename it to anything you like.</source>
          <target state="translated">外側の &lt;code&gt;mysite/&lt;/code&gt; ルートディレクトリは、プロジェクトのコンテナです。その名前はDjangoにとって重要ではありません。好きな名前に変更できます。</target>
        </trans-unit>
        <trans-unit id="54de0cbdb7d9dca88c045cd6e8c593237a2d897b" translate="yes" xml:space="preserve">
          <source>The output differs significantly between databases.</source>
          <target state="translated">データベースによって出力が大きく異なります。</target>
        </trans-unit>
        <trans-unit id="7429b7db31a2412511c59b97a99a3ef5a9ef65fc" translate="yes" xml:space="preserve">
          <source>The output follows the schema described in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0440&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 440&lt;/strong&gt;&lt;/a&gt;:</source>
          <target state="translated">出力は、&lt;a href=&quot;https://www.python.org/dev/peps/pep-0440&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 440で&lt;/strong&gt;&lt;/a&gt;説明されているスキーマに従います。</target>
        </trans-unit>
        <trans-unit id="59fc36f20bf8cf921717983a500874059b86e078" translate="yes" xml:space="preserve">
          <source>The output from template tags is &lt;strong&gt;not&lt;/strong&gt; automatically run through the auto-escaping filters (with the exception of &lt;a href=&quot;#django.template.Library.simple_tag&quot;&gt;&lt;code&gt;simple_tag()&lt;/code&gt;&lt;/a&gt; as described above). However, there are still a couple of things you should keep in mind when writing a template tag.</source>
          <target state="translated">テンプレートタグからの出力は、自動エスケープフィルターを介して自動的には実行され&lt;strong&gt;ません&lt;/strong&gt;&lt;a href=&quot;#django.template.Library.simple_tag&quot;&gt; &lt;code&gt;simple_tag()&lt;/code&gt; &lt;/a&gt;上記のsimple_tag（）を除く）。ただし、テンプレートタグを作成する際に注意すべき点がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="b69917dae85959287bc248cef681c58dd12476f2" translate="yes" xml:space="preserve">
          <source>The output from this property does not include the 3dm, 3dz, and 4d information that PostGIS supports in its EWKT representations.</source>
          <target state="translated">このプロパティからの出力には、PostGISがEWKT表現でサポートしている3dm、3dz、および4d情報は含まれていません。</target>
        </trans-unit>
        <trans-unit id="bb0119774032b67a3035083d18e903e43f8ca2c4" translate="yes" xml:space="preserve">
          <source>The output of &lt;code&gt;dumpdata&lt;/code&gt; can be used as input for &lt;a href=&quot;#django-admin-loaddata&quot;&gt;&lt;code&gt;loaddata&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">出力 &lt;code&gt;dumpdata&lt;/code&gt; のはのための入力として使用することができる&lt;a href=&quot;#django-admin-loaddata&quot;&gt; &lt;code&gt;loaddata&lt;/code&gt; の&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="19df519925d5e30f2dc8454d1801f7e49d27a0fb" translate="yes" xml:space="preserve">
          <source>The output uses HTML5 syntax, targeting &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;. For example, it uses boolean attributes such as &lt;code&gt;checked&lt;/code&gt; rather than the XHTML style of &lt;code&gt;checked='checked'&lt;/code&gt;.</source>
          <target state="translated">出力はHTML5構文を使用し、 &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt; をターゲットにします。たとえば、 &lt;code&gt;checked='checked'&lt;/code&gt; の XHTMLスタイルではなく、 &lt;code&gt;checked&lt;/code&gt; などのブール属性を使用します。</target>
        </trans-unit>
        <trans-unit id="63b6b98eefb452725af559bb477e5a59f84f7005" translate="yes" xml:space="preserve">
          <source>The package &lt;code&gt;django.shortcuts&lt;/code&gt; collects helper functions and classes that &amp;ldquo;span&amp;rdquo; multiple levels of MVC. In other words, these functions/classes introduce controlled coupling for convenience&amp;rsquo;s sake.</source>
          <target state="translated">パッケージ &lt;code&gt;django.shortcuts&lt;/code&gt; は、MVCの複数のレベルにまたがるヘルパー関数とクラスを収集します。つまり、これらの関数/クラスは、便宜上制御された結合を導入します。</target>
        </trans-unit>
        <trans-unit id="08ff1ee3e031110a607cd2a310c72e63027d79ab" translate="yes" xml:space="preserve">
          <source>The page shown after a user has been emailed a link to reset their password. This view is called by default if the &lt;a href=&quot;#django.contrib.auth.views.PasswordResetView&quot;&gt;&lt;code&gt;PasswordResetView&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t have an explicit &lt;code&gt;success_url&lt;/code&gt; URL set.</source>
          <target state="translated">ユーザーにパスワードをリセットするためのリンクが電子メールで送信された後に表示されるページ。&lt;a href=&quot;#django.contrib.auth.views.PasswordResetView&quot;&gt; &lt;code&gt;PasswordResetView&lt;/code&gt; に&lt;/a&gt;明示的な &lt;code&gt;success_url&lt;/code&gt; URLが設定されていない場合、このビューはデフォルトで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f442cc6e3cc19b929680f225edb1921a4974e320" translate="yes" xml:space="preserve">
          <source>The page shown after a user has changed their password.</source>
          <target state="translated">ユーザーがパスワードを変更した後に表示されるページです。</target>
        </trans-unit>
        <trans-unit id="c574ad0f3c6e85b72cff9d91ccad42ce0a72262b" translate="yes" xml:space="preserve">
          <source>The paginator class to be used for pagination. By default, &lt;a href=&quot;../../paginator#django.core.paginator.Paginator&quot;&gt;&lt;code&gt;django.core.paginator.Paginator&lt;/code&gt;&lt;/a&gt; is used. If the custom paginator class doesn&amp;rsquo;t have the same constructor interface as &lt;a href=&quot;../../paginator#django.core.paginator.Paginator&quot;&gt;&lt;code&gt;django.core.paginator.Paginator&lt;/code&gt;&lt;/a&gt;, you will also need to provide an implementation for &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_paginator&quot;&gt;&lt;code&gt;ModelAdmin.get_paginator()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ページネーションに使用されるページネータークラス。デフォルトでは、&lt;a href=&quot;../../paginator#django.core.paginator.Paginator&quot;&gt; &lt;code&gt;django.core.paginator.Paginator&lt;/code&gt; &lt;/a&gt;が使用されます。カスタムページネータクラスが同じコンストラクタインタフェースがない場合は&lt;a href=&quot;../../paginator#django.core.paginator.Paginator&quot;&gt; &lt;code&gt;django.core.paginator.Paginator&lt;/code&gt; を&lt;/a&gt;、あなたはまたのための実装を提供する必要があります&lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_paginator&quot;&gt; &lt;code&gt;ModelAdmin.get_paginator()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="17531609b8ff85573cd6f907f89f88527fa66751" translate="yes" xml:space="preserve">
          <source>The paginator class to be used for pagination. By default, &lt;a href=&quot;../paginator#django.core.paginator.Paginator&quot;&gt;&lt;code&gt;django.core.paginator.Paginator&lt;/code&gt;&lt;/a&gt; is used. If the custom paginator class doesn&amp;rsquo;t have the same constructor interface as &lt;a href=&quot;../paginator#django.core.paginator.Paginator&quot;&gt;&lt;code&gt;django.core.paginator.Paginator&lt;/code&gt;&lt;/a&gt;, you will also need to provide an implementation for &lt;a href=&quot;#django.views.generic.list.MultipleObjectMixin.get_paginator&quot;&gt;&lt;code&gt;get_paginator()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ページネーションに使用されるページネータークラス。デフォルトでは、&lt;a href=&quot;../paginator#django.core.paginator.Paginator&quot;&gt; &lt;code&gt;django.core.paginator.Paginator&lt;/code&gt; &lt;/a&gt;が使用されます。カスタムページネータクラスが同じコンストラクタインタフェースがない場合は&lt;a href=&quot;../paginator#django.core.paginator.Paginator&quot;&gt; &lt;code&gt;django.core.paginator.Paginator&lt;/code&gt; を&lt;/a&gt;、あなたはまたのために実装する必要があります&lt;a href=&quot;#django.views.generic.list.MultipleObjectMixin.get_paginator&quot;&gt; &lt;code&gt;get_paginator()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3260006f18bf145f7c736a90674ea43e024f7cef" translate="yes" xml:space="preserve">
          <source>The parameters sent to the wrappers are:</source>
          <target state="translated">ラッパーに送られるパラメータは</target>
        </trans-unit>
        <trans-unit id="182f189d1c0069ab822d40cc4da3ea09d1194926" translate="yes" xml:space="preserve">
          <source>The parser for this function should grab the parameter and create a &lt;code&gt;Node&lt;/code&gt; object:</source>
          <target state="translated">この関数のパーサーは、パラメーターを取得して &lt;code&gt;Node&lt;/code&gt; オブジェクトを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="a3a527b4d3e34dc895b2592b2d4fa50c5a205421" translate="yes" xml:space="preserve">
          <source>The parsing is very low-level. The Django developers have experimented with writing small frameworks on top of this parsing system, using techniques such as EBNF grammars, but those experiments made the template engine too slow. It&amp;rsquo;s low-level because that&amp;rsquo;s fastest.</source>
          <target state="translated">解析は非常に低レベルです。Django開発者は、EBNF文法などの手法を使用して、この解析システムの上に小さなフレームワークを作成する実験をしましたが、これらの実験により、テンプレートエンジンが遅くなりすぎました。これは最速なので低レベルです。</target>
        </trans-unit>
        <trans-unit id="487ff88151bdf1b239d84c46424e5d25e63751bb" translate="yes" xml:space="preserve">
          <source>The password to use when connecting to the Oracle database that will be used when running tests. If not provided, Django will generate a random password.</source>
          <target state="translated">テストを実行する際に使用する Oracle データベースに接続する際に使用するパスワード。省略した場合、Django はランダムなパスワードを生成します。</target>
        </trans-unit>
        <trans-unit id="2705988536efaa4735e5b504118d175f097cee40" translate="yes" xml:space="preserve">
          <source>The password to use when connecting to the database. Not used with SQLite.</source>
          <target state="translated">データベースに接続する際に使用するパスワード。SQLiteでは使用しません。</target>
        </trans-unit>
        <trans-unit id="f1c9798e593e20270823fbd0a0ca388a237e5744" translate="yes" xml:space="preserve">
          <source>The path is where the new environment will be saved on your computer.</source>
          <target state="translated">パスは、新しい環境がコンピュータに保存される場所です。</target>
        </trans-unit>
        <trans-unit id="7c7fae6591624c2d122651744ec9edacd201c516" translate="yes" xml:space="preserve">
          <source>The path set on the CSRF cookie. This should either match the URL path of your Django installation or be a parent of that path.</source>
          <target state="translated">CSRF クッキーに設定されたパス。これは Django インストールの URL パスと一致するか、そのパスの親でなければなりません。</target>
        </trans-unit>
        <trans-unit id="30aa703152662bba86a65b974b1ae65ae56fa6ea" translate="yes" xml:space="preserve">
          <source>The path set on the language cookie. This should either match the URL path of your Django installation or be a parent of that path.</source>
          <target state="translated">言語クッキーに設定されたパス。これは Django のインストールの URL パスと一致するか、そのパスの親でなければなりません。</target>
        </trans-unit>
        <trans-unit id="3df2836510931320c2b34c1d3ecefc0bda16ed72" translate="yes" xml:space="preserve">
          <source>The path set on the session cookie. This should either match the URL path of your Django installation or be parent of that path.</source>
          <target state="translated">セッションクッキーに設定されたパス。これは Django インストールの URL パスと一致するか、そのパスの親でなければなりません。</target>
        </trans-unit>
        <trans-unit id="edf9850e4063fa4f015e6b00c7535e8feecd98f4" translate="yes" xml:space="preserve">
          <source>The path to the OGR-supported data source file (e.g., a shapefile). Also accepts &lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt;&lt;code&gt;django.contrib.gis.gdal.DataSource&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">OGRがサポートするデータソースファイル（シェープファイルなど）へのパス。&lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt; &lt;code&gt;django.contrib.gis.gdal.DataSource&lt;/code&gt; &lt;/a&gt;インスタンスも受け入れます。</target>
        </trans-unit>
        <trans-unit id="c5e0080aadc181c662eeb97d03dc759ed6f22623" translate="yes" xml:space="preserve">
          <source>The path to the shapefile is not absolute &amp;ndash; in other words, if you move the &lt;code&gt;world&lt;/code&gt; application (with &lt;code&gt;data&lt;/code&gt; subdirectory) to a different location, the script will still work.</source>
          <target state="translated">シェープファイルへのパスは絶対パスではありません。つまり、（ &lt;code&gt;data&lt;/code&gt; サブディレクトリを含む） &lt;code&gt;world&lt;/code&gt; アプリケーションを別の場所に移動しても、スクリプトは機能します。</target>
        </trans-unit>
        <trans-unit id="27875ff60b116b6807ef4e8715b7783696957eff" translate="yes" xml:space="preserve">
          <source>The path to the template as returned by the template loader. For loaders that read from the file system, this is the full path to the template.</source>
          <target state="translated">テンプレートローダーが返すテンプレートへのパス。ファイルシステムから読み込むローダーの場合、これはテンプレートへのフルパスです。</target>
        </trans-unit>
        <trans-unit id="cb2bc852dfbb65b00f5ca8102d8cb8d30d60d2d7" translate="yes" xml:space="preserve">
          <source>The people who made Django prefer to put all the SQL-affecting methods first, followed (optionally) by any output-affecting methods (such as &lt;code&gt;values()&lt;/code&gt;), but it doesn&amp;rsquo;t really matter. This is your chance to really flaunt your individualism.</source>
          <target state="translated">Djangoを作成した人々は、すべてのSQLに影響するメソッドを最初に置き、その後に（オプションで）出力に影響を与えるメソッド（ &lt;code&gt;values()&lt;/code&gt; など）を置くことを好みますが、それは本当に重要ではありません。これはあなたの個性を誇示するチャンスです。</target>
        </trans-unit>
        <trans-unit id="879b1ac686a10b4dfebaba971e1e117cc6a8da3e" translate="yes" xml:space="preserve">
          <source>The per-site cache</source>
          <target state="translated">サイトごとのキャッシュ</target>
        </trans-unit>
        <trans-unit id="9a71bbff13c1062726eaad14b03135b5ca7b2831" translate="yes" xml:space="preserve">
          <source>The per-view cache</source>
          <target state="translated">ビューごとのキャッシュ</target>
        </trans-unit>
        <trans-unit id="e1399dc0275fa78c29f3d3ed6f3faaabe018817a" translate="yes" xml:space="preserve">
          <source>The per-view cache, like the per-site cache, is keyed off of the URL. If multiple URLs point at the same view, each URL will be cached separately. Continuing the &lt;code&gt;my_view&lt;/code&gt; example, if your URLconf looks like this:</source>
          <target state="translated">サイトごとのキャッシュと同様に、ビューごとのキャッシュはURLからキーオフされます。複数のURLが同じビューを指している場合、各URLは個別にキャッシュされます。URLconfが次のようになっている場合は、 &lt;code&gt;my_view&lt;/code&gt; の例を続けます。</target>
        </trans-unit>
        <trans-unit id="3ac37a791d273073222002613539ce45ef65fcc4" translate="yes" xml:space="preserve">
          <source>The permission can then be assigned to a &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; via its &lt;code&gt;user_permissions&lt;/code&gt; attribute or to a &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.Group&quot;&gt;&lt;code&gt;Group&lt;/code&gt;&lt;/a&gt; via its &lt;code&gt;permissions&lt;/code&gt; attribute.</source>
          <target state="translated">アクセス許可は、 &lt;code&gt;user_permissions&lt;/code&gt; 属性を介して&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt;割り当てるか、 &lt;code&gt;permissions&lt;/code&gt; 属性を介して&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.Group&quot;&gt; &lt;code&gt;Group&lt;/code&gt; &lt;/a&gt;割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="d80ecaf5fed83bbf4bcc8f812f2286c97df69b30" translate="yes" xml:space="preserve">
          <source>The permissions given to the user will be the superset of all permissions returned by all backends. That is, Django grants a permission to a user that any one backend grants.</source>
          <target state="translated">ユーザーに与えられるパーミッションは、すべてのバックエンドが返すパーミッションのスーパーセットになります。つまり、Django はあるバックエンドが付与したパーミッションをユーザーに付与します。</target>
        </trans-unit>
        <trans-unit id="3f8c4a5c551da92aeea3e86f12798d01622663dd" translate="yes" xml:space="preserve">
          <source>The philosophy here is that your site is edited by a staff, or a client, or maybe just you &amp;ndash; and you don&amp;rsquo;t want to have to deal with creating backend interfaces only to manage content.</source>
          <target state="translated">ここでの哲学は、サイトはスタッフ、クライアント、または多分あなただけが編集することであり、コンテンツを管理するためだけにバックエンドインターフェイスを作成する必要はありません。</target>
        </trans-unit>
        <trans-unit id="b16b71c6bbd0362e0b09053ab436a7e7fb15d36c" translate="yes" xml:space="preserve">
          <source>The plural name for the object:</source>
          <target state="translated">オブジェクトの複数形の名前です。</target>
        </trans-unit>
        <trans-unit id="64c8b0c8e17e206c38101e02c2a14524dacde157" translate="yes" xml:space="preserve">
          <source>The police beat feeds could be accessible via URLs like this:</source>
          <target state="translated">警察のビートのフィードは、このようなURLからアクセスできる可能性があります。</target>
        </trans-unit>
        <trans-unit id="eee7f514e199049047b97112ad8dbf2b39e41662" translate="yes" xml:space="preserve">
          <source>The polls application is fairly undiscriminating: it will publish any question, including ones whose &lt;code&gt;pub_date&lt;/code&gt; field lies in the future. We should improve this. Setting a &lt;code&gt;pub_date&lt;/code&gt; in the future should mean that the Question is published at that moment, but invisible until then.</source>
          <target state="translated">投票アプリケーションはかなり無差別です： &lt;code&gt;pub_date&lt;/code&gt; フィールドが将来的に存在するものを含むすべての質問を公開します。これを改善する必要があります。 &lt;code&gt;pub_date&lt;/code&gt; を将来設定すると、質問はその時点で公開されますが、それまでは表示されません。</target>
        </trans-unit>
        <trans-unit id="84f92f101a4b194e2f608b9a7df9eb5783933e11" translate="yes" xml:space="preserve">
          <source>The populated variable (in the example above, &lt;code&gt;total&lt;/code&gt;) is only available between the &lt;code&gt;{% with %}&lt;/code&gt; and &lt;code&gt;{% endwith %}&lt;/code&gt; tags.</source>
          <target state="translated">（上記の例に移入可変 &lt;code&gt;total&lt;/code&gt; ）との間でしか入手できない &lt;code&gt;{% with %}&lt;/code&gt; と &lt;code&gt;{% endwith %}&lt;/code&gt; タグ。</target>
        </trans-unit>
        <trans-unit id="e72422708d649e0b6436d32c86bb443780b65207" translate="yes" xml:space="preserve">
          <source>The port to use when connecting to the database. An empty string means the default port. Not used with SQLite.</source>
          <target state="translated">データベースに接続する際に使用するポート。空の文字列はデフォルトのポートを意味します。SQLiteでは使用されません。</target>
        </trans-unit>
        <trans-unit id="9419a955b6cf01968f0617da8750156ef83bcda1" translate="yes" xml:space="preserve">
          <source>The possible values for &lt;a href=&quot;#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;on_delete&lt;/code&gt;&lt;/a&gt; are found in &lt;a href=&quot;../../topics/db/models#module-django.db.models&quot;&gt;&lt;code&gt;django.db.models&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.ForeignKey.on_delete&quot;&gt; &lt;code&gt;on_delete&lt;/code&gt; &lt;/a&gt;の可能な値は&lt;a href=&quot;../../topics/db/models#module-django.db.models&quot;&gt; &lt;code&gt;django.db.models&lt;/code&gt; にあり&lt;/a&gt;ます：</target>
        </trans-unit>
        <trans-unit id="291725821d8623d6c1f75f2f5130e7805431be00" translate="yes" xml:space="preserve">
          <source>The postmortem appears when &lt;a href=&quot;#django.template.TemplateDoesNotExist&quot;&gt;&lt;code&gt;TemplateDoesNotExist&lt;/code&gt;&lt;/a&gt; is raised. It lists the template engines and loaders that were used when trying to find a given template. For example, if two Django engines are configured, the postmortem will appear like:</source>
          <target state="translated">&lt;a href=&quot;#django.template.TemplateDoesNotExist&quot;&gt; &lt;code&gt;TemplateDoesNotExist&lt;/code&gt; &lt;/a&gt;が発生すると、事後分析が表示されます。特定のテンプレートを検索するときに使用されたテンプレートエンジンとローダーが一覧表示されます。たとえば、2つのDjangoエンジンが構成されている場合、事後分析は次のようになります。</target>
        </trans-unit>
        <trans-unit id="b7ce2c9e7851596c6148ab39b9d35432e5543f1c" translate="yes" xml:space="preserve">
          <source>The postmortem appears when &lt;a href=&quot;../topics/templates#django.template.TemplateDoesNotExist&quot;&gt;&lt;code&gt;TemplateDoesNotExist&lt;/code&gt;&lt;/a&gt; is raised. It lists the template engines and loaders that were used when trying to find a given template. For example, if two Django engines are configured, the postmortem will appear like:</source>
          <target state="translated">&lt;a href=&quot;../topics/templates#django.template.TemplateDoesNotExist&quot;&gt; &lt;code&gt;TemplateDoesNotExist&lt;/code&gt; &lt;/a&gt;が発生すると、事後分析が表示されます。特定のテンプレートを検索するときに使用されたテンプレートエンジンとローダーが一覧表示されます。たとえば、2つのDjangoエンジンが構成されている場合、事後分析は次のように表示されます。</target>
        </trans-unit>
        <trans-unit id="6df9f5a4a4639499d415569145adafa647ab022d" translate="yes" xml:space="preserve">
          <source>The precedence of translations is such that the packages appearing later in the &lt;code&gt;packages&lt;/code&gt; argument have higher precedence than the ones appearing at the beginning. This is important in the case of clashing translations for the same literal.</source>
          <target state="translated">翻訳の優先順位は、 &lt;code&gt;packages&lt;/code&gt; 引数の後ろに現れるパッケージが、最初に現れるパッケージよりも高い優先順位を持っているようなものです。これは、同じリテラルの翻訳が競合する場合に重要です。</target>
        </trans-unit>
        <trans-unit id="2c6033b4d2a19cc09db3f260666261632084c7bc" translate="yes" xml:space="preserve">
          <source>The preferred way to write tests in Django is using the &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; module built-in to the Python standard library. This is covered in detail in the &lt;a href=&quot;overview&quot;&gt;Writing and running tests&lt;/a&gt; document.</source>
          <target state="translated">Djangoでテストを記述する好ましい方法は、Python標準ライブラリに組み込まれている&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;モジュールを使用することです。これについては、&lt;a href=&quot;overview&quot;&gt;テストの&lt;/a&gt;作成と実行のドキュメントで詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="a8da9919e5cd83b087be392e07b42dfe1a6f5719" translate="yes" xml:space="preserve">
          <source>The prefix can also be specified on the form class:</source>
          <target state="translated">プレフィックスはフォームクラスでも指定できます。</target>
        </trans-unit>
        <trans-unit id="1fba29e877a1a3ec872c95f6e2ddc0a201e7ca85" translate="yes" xml:space="preserve">
          <source>The presence of the &lt;code&gt;admin_password_reset&lt;/code&gt; named URL will cause a &amp;ldquo;forgotten your password?&amp;rdquo; link to appear on the default admin log-in page under the password box.</source>
          <target state="translated">URLという名前の &lt;code&gt;admin_password_reset&lt;/code&gt; が存在すると、「パスワードを忘れましたか？」パスワードボックスの下のデフォルトのadminログインページに表示されるリンク。</target>
        </trans-unit>
        <trans-unit id="e4992a2da237e7aa20459589fd96d8aec9298182" translate="yes" xml:space="preserve">
          <source>The previous more verbose format is still supported: &lt;code&gt;{% blocktrans with book|title as book_t and author|title as author_t %}&lt;/code&gt;</source>
          <target state="translated">以前のより詳細な形式も引き続きサポートされています： &lt;code&gt;{% blocktrans with book|title as book_t and author|title as author_t %}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0d352daa0933eba5b6764dd2e8ae366569bfbe42" translate="yes" xml:space="preserve">
          <source>The previous more verbose format is still supported: &lt;code&gt;{% blocktranslate with book|title as book_t and author|title as author_t %}&lt;/code&gt;</source>
          <target state="translated">以前のより詳細な形式は引き続きサポートされます： &lt;code&gt;{% blocktranslate with book|title as book_t and author|title as author_t %}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f89a845448636f3980b0124ba642a64c603e25a8" translate="yes" xml:space="preserve">
          <source>The previous more verbose format is still supported: &lt;code&gt;{% with business.employees.count as total %}&lt;/code&gt;</source>
          <target state="translated">以前のより詳細な形式は引き続きサポートされています： &lt;code&gt;{% with business.employees.count as total %}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5428b5309178ff934e90e2596239ae9332278ea3" translate="yes" xml:space="preserve">
          <source>The previous points are written from the point of view of a single developer maintaining an application. Complex applications will be maintained by teams. Tests guarantee that colleagues don&amp;rsquo;t inadvertently break your code (and that you don&amp;rsquo;t break theirs without knowing). If you want to make a living as a Django programmer, you must be good at writing tests!</source>
          <target state="translated">上記のポイントは、アプリケーションを保守する単一の開発者の観点から書かれています。複雑なアプリケーションはチームによって維持されます。テストは、同僚があなたのコードを不注意に壊したりしないことを保証します（そしてあなたが知らずに彼らを壊さないことを保証します）。Djangoプログラマーとして生計を立てるには、テストを書くのが得意でなければなりません。</target>
        </trans-unit>
        <trans-unit id="bbdb577ec02ea1c36ada373d61b80bc484867ff0" translate="yes" xml:space="preserve">
          <source>The previous sections explained how validation works in general for forms. Since it can sometimes be easier to put things into place by seeing each feature in use, here are a series of small examples that use each of the previous features.</source>
          <target state="translated">前のセクションでは、フォームのバリデーションが一般的にどのように動作するかを説明しました。それぞれの機能が実際に使われているのを見ることで、物事を配置するのが簡単になることがありますので、ここでは前の機能のそれぞれを使った一連の小さな例を紹介します。</target>
        </trans-unit>
        <trans-unit id="d5943a5a5cca9ddc09c4bed78d3c7af8edfa1156" translate="yes" xml:space="preserve">
          <source>The price of this flexibility is a bit more work. Until now we haven&amp;rsquo;t had to worry about how to display form errors, because that&amp;rsquo;s taken care of for us. In this example we have had to make sure we take care of any errors for each field and any errors for the form as a whole. Note &lt;code&gt;{{ form.non_field_errors }}&lt;/code&gt; at the top of the form and the template lookup for errors on each field.</source>
          <target state="translated">この柔軟性の代償はもう少し手間がかかります。これまで、フォームエラーの表示方法について心配する必要はありませんでした。この例では、各フィールドのエラーとフォーム全体のエラーを確実に処理する必要がありました。フォームの上部にある &lt;code&gt;{{ form.non_field_errors }}&lt;/code&gt; と、各フィールドのエラーのテンプレートルックアップに注意してください。</target>
        </trans-unit>
        <trans-unit id="c67ffbae80b072e6bef52fb33e2d87aa94f87bfe" translate="yes" xml:space="preserve">
          <source>The primary attributes of the default user are:</source>
          <target state="translated">デフォルトユーザーの主な属性は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="93a41cfbdcb8ddb875e99ee3bc06940e24ac3283" translate="yes" xml:space="preserve">
          <source>The primary key field is read-only. If you change the value of the primary key on an existing object and then save it, a new object will be created alongside the old one.</source>
          <target state="translated">主キー・フィールドは読み取り専用です。既存のオブジェクトの主キーの値を変更してから保存すると、古いオブジェクトと一緒に新しいオブジェクトが作成されます。</target>
        </trans-unit>
        <trans-unit id="5325a72bfaed361f9e6e6ba96380c89cbda9730c" translate="yes" xml:space="preserve">
          <source>The primary key field is read-only. If you change the value of the primary key on an existing object and then save it, a new object will be created alongside the old one. For example:</source>
          <target state="translated">主キー・フィールドは読み取り専用です。既存のオブジェクトの主キーの値を変更して保存すると、古いオブジェクトと一緒に新しいオブジェクトが作成されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="9ca647f14fb3bd00cc3bce6133eeb9123bb96ad9" translate="yes" xml:space="preserve">
          <source>The primary piece of information we have available to get a URL is an identification (e.g. the name) of the view in charge of handling it. Other pieces of information that necessarily must participate in the lookup of the right URL are the types (positional, keyword) and values of the view arguments.</source>
          <target state="translated">URLを取得するために利用できる主な情報は、それを処理するビューの識別情報(名前など)です。正しいURLの検索に参加しなければならない他の情報は、ビューの引数のタイプ(位置情報、キーワード)と値です。</target>
        </trans-unit>
        <trans-unit id="51c172625ce24d8f73d90f9b4091917412db8100" translate="yes" xml:space="preserve">
          <source>The primary task of a &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; object is to validate data. With a bound &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance, call the &lt;a href=&quot;#django.forms.Form.is_valid&quot;&gt;&lt;code&gt;is_valid()&lt;/code&gt;&lt;/a&gt; method to run validation and return a boolean designating whether the data was valid:</source>
          <target state="translated">&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;オブジェクトの主なタスクは、データを検証することです。バインドされた&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;インスタンスで、&lt;a href=&quot;#django.forms.Form.is_valid&quot;&gt; &lt;code&gt;is_valid()&lt;/code&gt; を&lt;/a&gt;呼び出しますメソッドを検証を実行し、データが有効かどうかを示すブール値を返します。</target>
        </trans-unit>
        <trans-unit id="a0283ada3aa002159af800fae9008fc484cc6639" translate="yes" xml:space="preserve">
          <source>The primary/replica (referred to as master/slave by some databases) configuration described is also flawed &amp;ndash; it doesn&amp;rsquo;t provide any solution for handling replication lag (i.e., query inconsistencies introduced because of the time taken for a write to propagate to the replicas). It also doesn&amp;rsquo;t consider the interaction of transactions with the database utilization strategy.</source>
          <target state="translated">説明されているプラ​​イマリ/レプリカ（一部のデータベースではマスター/スレーブと呼ばれます）構成にも欠陥があります。レプリケーションラグを処理するためのソリューションは提供されません（つまり、書き込みがに伝播するのに時間がかかるため、クエリの不整合が発生します）レプリカ）。また、トランザクションとデータベース使用戦略との相互作用についても考慮されていません。</target>
        </trans-unit>
        <trans-unit id="48a78b655ec8852eae9602a405057000a5fe43f5" translate="yes" xml:space="preserve">
          <source>The problem with function-based generic views is that while they covered the simple cases well, there was no way to extend or customize them beyond some configuration options, limiting their usefulness in many real-world applications.</source>
          <target state="translated">関数ベースの汎用ビューの問題点は、単純なケースを十分にカバーしていたものの、設定オプションを超えて拡張したりカスタマイズしたりする方法がなく、多くの実世界のアプリケーションでの有用性が制限されていたことです。</target>
        </trans-unit>
        <trans-unit id="9788c3aa616f092ea3ce6e521eff09ea8fb6f136" translate="yes" xml:space="preserve">
          <source>The problem with this hardcoded, tightly-coupled approach is that it becomes challenging to change URLs on projects with a lot of templates. However, since you defined the name argument in the &lt;a href=&quot;../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt; functions in the &lt;code&gt;polls.urls&lt;/code&gt; module, you can remove a reliance on specific URL paths defined in your url configurations by using the &lt;code&gt;{% url %}&lt;/code&gt; template tag:</source>
          <target state="translated">このハードコーディングされた密結合アプローチの問題は、多数のテンプレートを含むプロジェクトでURLを変更することが困難になることです。ただし、 &lt;code&gt;polls.urls&lt;/code&gt; モジュールの&lt;a href=&quot;../ref/urls#django.urls.path&quot;&gt; &lt;code&gt;path()&lt;/code&gt; &lt;/a&gt;関数でname引数を定義したので、 &lt;code&gt;{% url %}&lt;/code&gt; テンプレートタグを使用して、url構成で定義された特定のURLパスへの依存を削除できます。</target>
        </trans-unit>
        <trans-unit id="bcd3d259158fddca611b2e8c88a43fbfd4d14af3" translate="yes" xml:space="preserve">
          <source>The problem with this is that every time &lt;code&gt;Pizza.__str__()&lt;/code&gt; asks for &lt;code&gt;self.toppings.all()&lt;/code&gt; it has to query the database, so &lt;code&gt;Pizza.objects.all()&lt;/code&gt; will run a query on the Toppings table for &lt;strong&gt;every&lt;/strong&gt; item in the Pizza &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="translated">これに伴う問題は、毎回ということである &lt;code&gt;Pizza.__str__()&lt;/code&gt; を要求 &lt;code&gt;self.toppings.all()&lt;/code&gt; それはので、データベースを照会する必要があります &lt;code&gt;Pizza.objects.all()&lt;/code&gt; のためのトッピングテーブルにクエリを実行します&lt;strong&gt;、すべて&lt;/strong&gt;のアイテムPizza &lt;code&gt;QuerySet&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0ece63ed4cc7dfa356db9e8e5e0cbc71116a2e60" translate="yes" xml:space="preserve">
          <source>The process can be made robust, &lt;a href=&quot;expressions#avoiding-race-conditions-using-f&quot;&gt;avoiding a race condition&lt;/a&gt;, as well as slightly faster by expressing the update relative to the original field value, rather than as an explicit assignment of a new value. Django provides &lt;a href=&quot;expressions#django.db.models.F&quot;&gt;&lt;code&gt;F expressions&lt;/code&gt;&lt;/a&gt; for performing this kind of relative update. Using &lt;a href=&quot;expressions#django.db.models.F&quot;&gt;&lt;code&gt;F expressions&lt;/code&gt;&lt;/a&gt;, the previous example is expressed as:</source>
          <target state="translated">プロセスは、新しい値の明示的な割り当てとしてではなく、元のフィールド値に関連する更新を表現することにより&lt;a href=&quot;expressions#avoiding-race-conditions-using-f&quot;&gt;、競合状態を回避して&lt;/a&gt;堅牢になり、わずかに速くなります。Djangoは、この種の相対更新を実行&lt;a href=&quot;expressions#django.db.models.F&quot;&gt; &lt;code&gt;F expressions&lt;/code&gt; &lt;/a&gt;ためのF式を提供しています。&lt;a href=&quot;expressions#django.db.models.F&quot;&gt; &lt;code&gt;F expressions&lt;/code&gt; &lt;/a&gt;を使用すると、前の例は次のように表されます。</target>
        </trans-unit>
        <trans-unit id="eb4a9b8d06947d804b9cc9c1b2a90a205c3d5923" translate="yes" xml:space="preserve">
          <source>The properties in this section export the &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; object into a different. This output may be in the form of a string, buffer, or even another object.</source>
          <target state="translated">このセクションのプロパティは、&lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt;オブジェクトを別のオブジェクトにエクスポートします。この出力は、文字列、バッファ、または別のオブジェクトの形式である場合があります。</target>
        </trans-unit>
        <trans-unit id="d58935e6bdb4d68d6470f9fbc5547de1501ac444" translate="yes" xml:space="preserve">
          <source>The prototype of &lt;code&gt;create_superuser()&lt;/code&gt; should accept the username field, plus all required fields as arguments. For example, if your user model uses &lt;code&gt;email&lt;/code&gt; as the username field, and has &lt;code&gt;date_of_birth&lt;/code&gt; as a required field, then &lt;code&gt;create_superuser&lt;/code&gt; should be defined as:</source>
          <target state="translated">&lt;code&gt;create_superuser()&lt;/code&gt; のプロトタイプは、usernameフィールドと、すべての必須フィールドを引数として受け入れる必要があります。たとえば、ユーザーモデルがユーザー名フィールドとして &lt;code&gt;email&lt;/code&gt; を使用し、必須フィールドとして &lt;code&gt;date_of_birth&lt;/code&gt; がある場合、 &lt;code&gt;create_superuser&lt;/code&gt; は次のように定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="c715291f9737999ffd47c857d85e18872da10a4e" translate="yes" xml:space="preserve">
          <source>The prototype of &lt;code&gt;create_user()&lt;/code&gt; should accept the username field, plus all required fields as arguments. For example, if your user model uses &lt;code&gt;email&lt;/code&gt; as the username field, and has &lt;code&gt;date_of_birth&lt;/code&gt; as a required field, then &lt;code&gt;create_user&lt;/code&gt; should be defined as:</source>
          <target state="translated">&lt;code&gt;create_user()&lt;/code&gt; のプロトタイプは、usernameフィールドとすべての必須フィールドを引数として受け入れる必要があります。ユーザーモデルが使用されている場合たとえば、 &lt;code&gt;email&lt;/code&gt; ユーザ名フィールドとして、そして持っている &lt;code&gt;date_of_birth&lt;/code&gt; 必須フィールドとして、そして &lt;code&gt;create_user&lt;/code&gt; のように定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="b3f54182b42bee8873a1b07061e5e9400b5da1b1" translate="yes" xml:space="preserve">
          <source>The psycopg2 range type to use.</source>
          <target state="translated">使用するpsycopg2の範囲タイプ。</target>
        </trans-unit>
        <trans-unit id="453af653fdbdd85c1584b0f1f47eeb827399814f" translate="yes" xml:space="preserve">
          <source>The purpose of this storage is to keep serving the old files in case some pages still refer to those files, e.g. because they are cached by you or a 3rd party proxy server. Additionally, it&amp;rsquo;s very helpful if you want to apply &lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#expires&quot;&gt;far future Expires headers&lt;/a&gt; to the deployed files to speed up the load time for subsequent page visits.</source>
          <target state="translated">このストレージの目的は、一部のページがまだそれらのファイルを参照している場合に備えて、古いファイルを提供し続けることです。たとえば、それらはユーザーまたはサードパーティのプロキシサーバーによってキャッシュされているためです。さらに、デプロイされたファイルに&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#expires&quot;&gt;遠い将来のExpiresヘッダー&lt;/a&gt;を適用して、以降のページアクセスの読み込み時間を短縮する場合にも非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="b392afc1f2be2d1890dc368343bb9fdbd1e9dc60" translate="yes" xml:space="preserve">
          <source>The query expression API is a common set of methods that classes define to be usable in query expressions to translate themselves into SQL expressions. Direct field references, aggregates, and &lt;code&gt;Transform&lt;/code&gt; are examples that follow this API. A class is said to follow the query expression API when it implements the following methods:</source>
          <target state="translated">クエリ式APIは、SQL式に変換するためにクラスがクエリ式で使用できるように定義する共通のメソッドセットです。直接フィールド参照、集計、および &lt;code&gt;Transform&lt;/code&gt; は、このAPIに続く例です。クラスは、次のメソッドを実装するときにクエリ式APIに従うと言います。</target>
        </trans-unit>
        <trans-unit id="69aa5afd60c62356efa1fdfe9666e44434a5c49e" translate="yes" xml:space="preserve">
          <source>The quotes around the argument (if any) have already been stripped away, so we receive a plain string.</source>
          <target state="translated">引数の周りの引用符(もしあれば)はすでに取り除かれているので、プレーンな文字列を受け取ることができます。</target>
        </trans-unit>
        <trans-unit id="876dbc968e75532af0aff1e56f77151583fc2b20" translate="yes" xml:space="preserve">
          <source>The raster lookup syntax is similar to the syntax for geometries. The only difference is that a band index can be specified as additional input. If no band index is specified, the first band is used by default (index &lt;code&gt;0&lt;/code&gt;). In that case the syntax is identical to the syntax for geometry lookups.</source>
          <target state="translated">ラスタールックアップ構文は、ジオメトリの構文に似ています。唯一の違いは、バンドインデックスを追加の入力として指定できることです。バンドインデックスが指定されていない場合、最初のバンドがデフォルトで使用されます（インデックス &lt;code&gt;0&lt;/code&gt; ）。その場合、構文はジオメトリルックアップの構文と同じです。</target>
        </trans-unit>
        <trans-unit id="e8a847db8ae3747fac86c506dd71091110845347" translate="yes" xml:space="preserve">
          <source>The rationale behind &amp;ldquo;decompression&amp;rdquo; is that it is necessary to &amp;ldquo;split&amp;rdquo; the combined value of the form field into the values for each widget.</source>
          <target state="translated">「解凍」の背後にある理論的根拠は、フォームフィールドの結合された値を各ウィジェットの値に「分割」する必要があることです。</target>
        </trans-unit>
        <trans-unit id="35e408a5a782fccccfa07b119894937fe134fc3a" translate="yes" xml:space="preserve">
          <source>The raw HTTP request body as a bytestring. This is useful for processing data in different ways than conventional HTML forms: binary images, XML payload etc. For processing conventional form data, use &lt;a href=&quot;#django.http.HttpRequest.POST&quot;&gt;&lt;code&gt;HttpRequest.POST&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">バイト文字列としての生のHTTPリクエスト本文。これは、バイナリイメージ、XMLペイロードなど、従来のHTMLフォームとは異なる方法でデータを処理するのに役立ちます。従来のフォームデータを処理するには、&lt;a href=&quot;#django.http.HttpRequest.POST&quot;&gt; &lt;code&gt;HttpRequest.POST&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="715b3f9f429fb6e754020e59b8eed7539f00d149" translate="yes" xml:space="preserve">
          <source>The raw way</source>
          <target state="translated">生の方法</target>
        </trans-unit>
        <trans-unit id="f67046a869c69b3aaf280909110bbc953bfe86c8" translate="yes" xml:space="preserve">
          <source>The raw way to limit access to pages is to check &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.is_authenticated&quot;&gt;&lt;code&gt;request.user.is_authenticated&lt;/code&gt;&lt;/a&gt; and either redirect to a login page:</source>
          <target state="translated">ページへのアクセスを制限する生の方法は、&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.is_authenticated&quot;&gt; &lt;code&gt;request.user.is_authenticated&lt;/code&gt; &lt;/a&gt;を確認して、ログインページにリダイレクトすることです。</target>
        </trans-unit>
        <trans-unit id="6c75648934376200140f4bf005288e7564bac759" translate="yes" xml:space="preserve">
          <source>The read/write mode for the file.</source>
          <target state="translated">ファイルの読み書きモードです。</target>
        </trans-unit>
        <trans-unit id="4c01eb817eec09ca50e33a8ba47b282978d394e4" translate="yes" xml:space="preserve">
          <source>The reader I/O classes return a &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; instance from the WKB and/or WKT input given to their &lt;code&gt;read(geom)&lt;/code&gt; method.</source>
          <target state="translated">リーダーI / Oクラスは、 &lt;code&gt;read(geom)&lt;/code&gt; メソッドに渡されたWKBおよび/またはWKT入力から&lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt;インスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="85c204af2beee9e3ef134d6fbae39e718ebd4b51" translate="yes" xml:space="preserve">
          <source>The reason &lt;code&gt;is_safe&lt;/code&gt; is necessary is because there are plenty of normal string operations that will turn a &lt;code&gt;SafeData&lt;/code&gt; object back into a normal &lt;code&gt;str&lt;/code&gt; object and, rather than try to catch them all, which would be very difficult, Django repairs the damage after the filter has completed.</source>
          <target state="translated">&lt;code&gt;is_safe&lt;/code&gt; が必要な理由は、 &lt;code&gt;SafeData&lt;/code&gt; オブジェクトを通常の &lt;code&gt;str&lt;/code&gt; オブジェクトに戻す多くの通常の文字列操作があり、それらすべてをキャッチしようとするのではなく、非常に困難であるため、Djangoはフィルターが破損した後に損傷を修復します完了しました。</target>
        </trans-unit>
        <trans-unit id="214c03080cb7d8763e33ff5ad80d6a091a171ef5" translate="yes" xml:space="preserve">
          <source>The reason for setting a long-lived expiration time is to avoid problems in the case of a user closing a browser or bookmarking a page and then loading that page from a browser cache. Without persistent cookies, the form submission would fail in this case.</source>
          <target state="translated">有効期限を長く設定しているのは、ユーザーがブラウザを閉じたり、ブックマークしたページをブックマークした後、ブラウザのキャッシュからそのページを読み込んだ場合の問題を回避するためです。永続的なクッキーがないと、このような場合にフォームの送信に失敗してしまいます。</target>
        </trans-unit>
        <trans-unit id="544d10f483ba2b0003f8a634b4abb234daea28b0" translate="yes" xml:space="preserve">
          <source>The reason for this is that Django&amp;rsquo;s test runner performs a bit of black magic in order to determine which template was loaded by a given view. This black magic (essentially a patching of Django&amp;rsquo;s template system in memory) only happens during test running.</source>
          <target state="translated">この理由は、Djangoのテストランナーは、特定のビューによって読み込まれたテンプレートを判別するために、少し黒魔術を実行するためです。この黒魔術（本質的にはメモリ内のDjangoのテンプレートシステムのパッチ）は、テスト実行中にのみ発生します。</target>
        </trans-unit>
        <trans-unit id="4fb4e101909f33b9d9683c0bc9a13be5e852255a" translate="yes" xml:space="preserve">
          <source>The reason that there are separate commands to make and apply migrations is because you&amp;rsquo;ll commit migrations to your version control system and ship them with your app; they not only make your development easier, they&amp;rsquo;re also usable by other developers and in production.</source>
          <target state="translated">移行を作成して適用するための個別のコマンドがあるのは、バージョン管理システムへの移行をコミットして、アプリに同梱するためです。開発を容易にするだけでなく、他の開発者や運用環境でも使用できます。</target>
        </trans-unit>
        <trans-unit id="31c1fae242c41cd2a40e8972a1a19117b5e270b3" translate="yes" xml:space="preserve">
          <source>The reason this is needed in Django is that many libraries, specifically database adapters, require that they are accessed in the same thread that they were created in. Also a lot of existing Django code assumes it all runs in the same thread, e.g. middleware adding things to a request for later use in views.</source>
          <target state="translated">これが Django で必要とされる理由は、多くのライブラリ、特にデータベースアダプタは、それらが作成されたのと同じスレッドでアクセスする必要があるからです。また、既存の Django コードの多くは、すべてが同じスレッドで実行されることを前提としています。例えば、リクエストに追加したものを後でビューで使用するためのミドルウェアなどです。</target>
        </trans-unit>
        <trans-unit id="6aaa561d9d1c6329693a83ed1044922212be0503" translate="yes" xml:space="preserve">
          <source>The recommended convention is to put the configuration class in a submodule of the application called &lt;code&gt;apps&lt;/code&gt;. However, this isn&amp;rsquo;t enforced by Django.</source>
          <target state="translated">推奨される規則は、構成クラスを &lt;code&gt;apps&lt;/code&gt; というアプリケーションのサブモジュールに配置することです。ただし、これはDjangoによって強制されていません。</target>
        </trans-unit>
        <trans-unit id="990ccf22fd7f716d0acf3fd1f32ff37692812367" translate="yes" xml:space="preserve">
          <source>The recommended source for the token is the &lt;code&gt;csrftoken&lt;/code&gt; cookie, which will be set if you&amp;rsquo;ve enabled CSRF protection for your views as outlined above.</source>
          <target state="translated">トークンの推奨ソースは &lt;code&gt;csrftoken&lt;/code&gt; cookieです。これは、上記のようにビューのCSRF保護を有効にした場合に設定されます。</target>
        </trans-unit>
        <trans-unit id="16c822e8d8ae8d31baa6ead02b9bb62819a6873e" translate="yes" xml:space="preserve">
          <source>The recommended way to create a &lt;a href=&quot;#django.template.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; is by calling the factory methods of the &lt;a href=&quot;#django.template.Engine&quot;&gt;&lt;code&gt;Engine&lt;/code&gt;&lt;/a&gt;: &lt;a href=&quot;#django.template.Engine.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.template.Engine.select_template&quot;&gt;&lt;code&gt;select_template()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.template.Engine.from_string&quot;&gt;&lt;code&gt;from_string()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.template.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;を作成するための推奨される方法は、&lt;a href=&quot;#django.template.Engine&quot;&gt; &lt;code&gt;Engine&lt;/code&gt; &lt;/a&gt;ファクトリメソッドを呼び出すことです：&lt;a href=&quot;#django.template.Engine.get_template&quot;&gt; &lt;code&gt;get_template()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#django.template.Engine.select_template&quot;&gt; &lt;code&gt;select_template()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#django.template.Engine.from_string&quot;&gt; &lt;code&gt;from_string()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b96f4fcdecba3ec643634ed634b76d2f2457d5fc" translate="yes" xml:space="preserve">
          <source>The redirects app</source>
          <target state="translated">リダイレクトアプリ</target>
        </trans-unit>
        <trans-unit id="798326dfff453527671b17b23eacb15ecc84f6dc" translate="yes" xml:space="preserve">
          <source>The reference documentation for Django&amp;rsquo;s &lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;class-based views&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins&quot;&gt;class-based view mixins&lt;/a&gt; will help you in understanding which attributes and methods are likely to cause conflict between different classes and mixins.</source>
          <target state="translated">Djangoの&lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;クラスベースのビュー&lt;/a&gt;と&lt;a href=&quot;../../ref/class-based-views/mixins&quot;&gt;クラスベースのビューのミックスイン&lt;/a&gt;のリファレンスドキュメントは、さまざまなクラスとミックスインの間で競合を引き起こす可能性が高い属性とメソッドを理解するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="a916639d3eb5baeb04f3b7117c968ba3dee4820f" translate="yes" xml:space="preserve">
          <source>The regular expression pattern to search for within the provided &lt;code&gt;value&lt;/code&gt;, or a pre-compiled regular expression. By default, raises a &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;#django.core.validators.RegexValidator.message&quot;&gt;&lt;code&gt;message&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.core.validators.RegexValidator.code&quot;&gt;&lt;code&gt;code&lt;/code&gt;&lt;/a&gt; if a match is not found. That standard behavior can be reversed by setting &lt;a href=&quot;#django.core.validators.RegexValidator.inverse_match&quot;&gt;&lt;code&gt;inverse_match&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;True&lt;/code&gt;, in which case the &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; is raised when a match &lt;strong&gt;is&lt;/strong&gt; found. By default, matches any string (including an empty string).</source>
          <target state="translated">指定された &lt;code&gt;value&lt;/code&gt; 内で検索する正規表現パターン、または事前にコンパイルされた正規表現。デフォルトでは、一致が見つからない場合、&lt;a href=&quot;#django.core.validators.RegexValidator.message&quot;&gt; &lt;code&gt;message&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#django.core.validators.RegexValidator.code&quot;&gt; &lt;code&gt;code&lt;/code&gt; &lt;/a&gt;を含む&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; が発生&lt;/a&gt;します。その標準的な動作は、&lt;a href=&quot;#django.core.validators.RegexValidator.inverse_match&quot;&gt; &lt;code&gt;inverse_match&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;True&lt;/code&gt; に設定することで元に戻すことができます。その場合、一致&lt;strong&gt;が&lt;/strong&gt;見つかったときに&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;が発生します。デフォルトでは、任意の文字列（空の文字列を含む）に一致します。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ec615d8bcdb4efb1aa00988d0d08cdf5b8f962dc" translate="yes" xml:space="preserve">
          <source>The regular expression pattern to search for within the provided &lt;code&gt;value&lt;/code&gt;, using &lt;a href=&quot;https://docs.python.org/3/library/re.html#re.search&quot;&gt;&lt;code&gt;re.search()&lt;/code&gt;&lt;/a&gt;. This may be a string or a pre-compiled regular expression created with &lt;a href=&quot;https://docs.python.org/3/library/re.html#re.compile&quot;&gt;&lt;code&gt;re.compile()&lt;/code&gt;&lt;/a&gt;. Defaults to the empty string, which will be found in every possible &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/re.html#re.search&quot;&gt; &lt;code&gt;re.search()&lt;/code&gt; &lt;/a&gt;を使用して、指定された &lt;code&gt;value&lt;/code&gt; 内で検索する正規表現パターン。これは、文字列または&lt;a href=&quot;https://docs.python.org/3/library/re.html#re.compile&quot;&gt; &lt;code&gt;re.compile()&lt;/code&gt; で&lt;/a&gt;作成されたコンパイル済みの正規表現の場合があります。デフォルトは空の文字列で、可能なすべての &lt;code&gt;value&lt;/code&gt; 含まれています。</target>
        </trans-unit>
        <trans-unit id="4d3851865f3b041bc8b2d98b3cdfc230892028d7" translate="yes" xml:space="preserve">
          <source>The regular expression syntax is that of the database backend in use. In the case of SQLite, which has no built in regular expression support, this feature is provided by a (Python) user-defined REGEXP function, and the regular expression syntax is therefore that of Python&amp;rsquo;s &lt;code&gt;re&lt;/code&gt; module.</source>
          <target state="translated">正規表現の構文は、使用中のデータベースバックエンドの構文です。組み込みの正規表現サポートがないSQLiteの場合、この機能は（Python）ユーザー定義REGEXP関数によって提供されるため、正規表現構文はPythonの &lt;code&gt;re&lt;/code&gt; モジュールの構文です。</target>
        </trans-unit>
        <trans-unit id="f2ce188f8603a02ad0bd740618f7d5b4f732f2bc" translate="yes" xml:space="preserve">
          <source>The related objects also get two methods, &lt;code&gt;get_next_in_order()&lt;/code&gt; and &lt;code&gt;get_previous_in_order()&lt;/code&gt;, which can be used to access those objects in their proper order. Assuming the &lt;code&gt;Answer&lt;/code&gt; objects are ordered by &lt;code&gt;id&lt;/code&gt;:</source>
          <target state="translated">関連するオブジェクトは、 &lt;code&gt;get_next_in_order()&lt;/code&gt; および &lt;code&gt;get_previous_in_order()&lt;/code&gt; という 2つのメソッドも取得します。これらのメソッドを使用して、これらのオブジェクトに適切な順序でアクセスできます。 &lt;code&gt;Answer&lt;/code&gt; オブジェクトが &lt;code&gt;id&lt;/code&gt; 順になっていると仮定します。</target>
        </trans-unit>
        <trans-unit id="a8d686cac36b66df729071ab421f1d91b4f484b3" translate="yes" xml:space="preserve">
          <source>The relation on the related object back to this object doesn&amp;rsquo;t exist by default. Setting &lt;code&gt;related_query_name&lt;/code&gt; creates a relation from the related object back to this one. This allows querying and filtering from the related object.</source>
          <target state="translated">このオブジェクトに戻る関連オブジェクトの関係は、デフォルトでは存在しません。 &lt;code&gt;related_query_name&lt;/code&gt; を設定すると、関連オブジェクトからこのオブジェクトへのリレーションが作成されます。これにより、関連オブジェクトからのクエリとフィルタリングが可能になります。</target>
        </trans-unit>
        <trans-unit id="395def1e7858b0c903e1ef9c53671f055576daec" translate="yes" xml:space="preserve">
          <source>The relationship and history of generic views, class-based views, and class-based generic views</source>
          <target state="translated">ジェネリックビュー、クラスベースビュー、クラスベースジェネリックビューの関係性と歴史</target>
        </trans-unit>
        <trans-unit id="d259b62b15cf44ff7b234cf0f2bd1e1e29ef3766" translate="yes" xml:space="preserve">
          <source>The relative path to the template as passed into the template loader.</source>
          <target state="translated">テンプレートローダーに渡されるテンプレートへの相対パス。</target>
        </trans-unit>
        <trans-unit id="628dc1e654293b04802554bd23fc97503b48e57f" translate="yes" xml:space="preserve">
          <source>The reloading happens from the database the instance was loaded from, or from the default database if the instance wasn&amp;rsquo;t loaded from the database. The &lt;code&gt;using&lt;/code&gt; argument can be used to force the database used for reloading.</source>
          <target state="translated">再読み込みは、インスタンスが読み込まれたデータベースから、またはインスタンスがデータベースから読み込まれなかった場合はデフォルトのデータベースから行われます。 &lt;code&gt;using&lt;/code&gt; 引数は、リロードのために使用されるデータベースを強制的に使用することができます。</target>
        </trans-unit>
        <trans-unit id="3649420c1724d433283ebf8ec0159bd2d21fff30" translate="yes" xml:space="preserve">
          <source>The remaining specialized &lt;a href=&quot;#django.test.TransactionTestCase.assertQuerysetEqual&quot;&gt;&lt;code&gt;assert*&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">残りの特殊な&lt;a href=&quot;#django.test.TransactionTestCase.assertQuerysetEqual&quot;&gt; &lt;code&gt;assert*&lt;/code&gt; &lt;/a&gt;メソッド。</target>
        </trans-unit>
        <trans-unit id="d4105885a155f0684f2efd564da42822f281117c" translate="yes" xml:space="preserve">
          <source>The rendering of form templates is controlled by a customizable renderer class. A custom renderer can be specified by updating the &lt;a href=&quot;../settings#std:setting-FORM_RENDERER&quot;&gt;&lt;code&gt;FORM_RENDERER&lt;/code&gt;&lt;/a&gt; setting. It defaults to &lt;code&gt;'&lt;/code&gt;&lt;a href=&quot;#django.forms.renderers.DjangoTemplates&quot;&gt;&lt;code&gt;django.forms.renderers.DjangoTemplates&lt;/code&gt;&lt;/a&gt;&lt;code&gt;'&lt;/code&gt;.</source>
          <target state="translated">フォームテンプレートのレンダリングは、カスタマイズ可能なレンダラークラスによって制御されます。&lt;a href=&quot;../settings#std:setting-FORM_RENDERER&quot;&gt; &lt;code&gt;FORM_RENDERER&lt;/code&gt; &lt;/a&gt;設定を更新することにより、カスタムレンダラーを指定できます。デフォルトは &lt;code&gt;'&lt;/code&gt; &lt;a href=&quot;#django.forms.renderers.DjangoTemplates&quot;&gt; &lt;code&gt;django.forms.renderers.DjangoTemplates&lt;/code&gt; &lt;/a&gt; &lt;code&gt;'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f00d332bd8e835bb0d9f29f5a435c37b52b2bd4a" translate="yes" xml:space="preserve">
          <source>The rendering process</source>
          <target state="translated">レンダリングプロセス</target>
        </trans-unit>
        <trans-unit id="2b74e08a4e356bf4a91fa743c425960507371130" translate="yes" xml:space="preserve">
          <source>The request (the browser) hasn&amp;rsquo;t sent an &lt;code&gt;Accept-Encoding&lt;/code&gt; header containing &lt;code&gt;gzip&lt;/code&gt;.</source>
          <target state="translated">リクエスト（ブラウザ）が &lt;code&gt;gzip&lt;/code&gt; を含む &lt;code&gt;Accept-Encoding&lt;/code&gt; ヘッダーを送信していません。</target>
        </trans-unit>
        <trans-unit id="87b9aefcbd820112e09338669560b1cdc27b0434" translate="yes" xml:space="preserve">
          <source>The request data that stimulated the response.</source>
          <target state="translated">レスポンスを刺激したリクエストデータ。</target>
        </trans-unit>
        <trans-unit id="aca14c4668cd5b5621f25092a67f3965992fab48" translate="yes" xml:space="preserve">
          <source>The request factory</source>
          <target state="translated">依頼工場</target>
        </trans-unit>
        <trans-unit id="d1f172fd54fab5fdf8cf9450d6c69da0daaf2b30" translate="yes" xml:space="preserve">
          <source>The request object used to generate this response.</source>
          <target state="translated">このレスポンスを生成するために使用されるリクエストオブジェクト。</target>
        </trans-unit>
        <trans-unit id="8b1495313a0a791fb27607d327e80fe685f6a312" translate="yes" xml:space="preserve">
          <source>The required method &lt;a href=&quot;#django.forms.MultiWidget.decompress&quot;&gt;&lt;code&gt;decompress()&lt;/code&gt;&lt;/a&gt; breaks up a &lt;code&gt;datetime.date&lt;/code&gt; value into the day, month, and year values corresponding to each widget. If an invalid date was selected, such as the non-existent 30th February, the &lt;a href=&quot;fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; passes this method a string instead, so that needs parsing. The final &lt;code&gt;return&lt;/code&gt; handles when &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, meaning we don&amp;rsquo;t have any defaults for our subwidgets.</source>
          <target state="translated">必要なメソッド&lt;a href=&quot;#django.forms.MultiWidget.decompress&quot;&gt; &lt;code&gt;decompress()&lt;/code&gt; &lt;/a&gt;は、 &lt;code&gt;datetime.date&lt;/code&gt; 値を、各ウィジェットに対応する日、月、年の値に分解します。存在しない2月30日など、無効な日付が選択された場合、&lt;a href=&quot;fields#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt;は代わりにこのメソッドに文字列を渡すため、解析が必要になります。最終的な &lt;code&gt;return&lt;/code&gt; &lt;code&gt;value&lt;/code&gt; は、値が &lt;code&gt;None&lt;/code&gt; の場合に処理されます。つまり、サブウィジェットのデフォルトはありません。</target>
        </trans-unit>
        <trans-unit id="5955d10e9af56c8f4dc87bad1ae31f82927bdbcb" translate="yes" xml:space="preserve">
          <source>The resampling algorithm used for warping can be specified with the &lt;code&gt;resampling&lt;/code&gt; argument. The default is &lt;code&gt;NearestNeighbor&lt;/code&gt;, and the other allowed values are &lt;code&gt;Bilinear&lt;/code&gt;, &lt;code&gt;Cubic&lt;/code&gt;, &lt;code&gt;CubicSpline&lt;/code&gt;, &lt;code&gt;Lanczos&lt;/code&gt;, &lt;code&gt;Average&lt;/code&gt;, and &lt;code&gt;Mode&lt;/code&gt;.</source>
          <target state="translated">ワーピングに使用されるリサンプリングアルゴリズムは、 &lt;code&gt;resampling&lt;/code&gt; 引数で指定できます。デフォルトは &lt;code&gt;NearestNeighbor&lt;/code&gt; で、その他の許容値は &lt;code&gt;Bilinear&lt;/code&gt; 、 &lt;code&gt;Cubic&lt;/code&gt; 、 &lt;code&gt;CubicSpline&lt;/code&gt; 、 &lt;code&gt;Lanczos&lt;/code&gt; 、 &lt;code&gt;Average&lt;/code&gt; 、 &lt;code&gt;Mode&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cf2cec9af0d52f9fcaa5a85cdd4d838ace8e7b3b" translate="yes" xml:space="preserve">
          <source>The response class to be returned by &lt;code&gt;render_to_response&lt;/code&gt; method. Default is &lt;a href=&quot;../template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt;. The template and context of &lt;code&gt;TemplateResponse&lt;/code&gt; instances can be altered later (e.g. in &lt;a href=&quot;../../topics/http/middleware#template-response-middleware&quot;&gt;template response middleware&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;render_to_response&lt;/code&gt; メソッドによって返される応答クラス。デフォルトは&lt;a href=&quot;../template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt;です。 &lt;code&gt;TemplateResponse&lt;/code&gt; インスタンスのテンプレートとコンテキストは後で変更できます（例：&lt;a href=&quot;../../topics/http/middleware#template-response-middleware&quot;&gt;テンプレート応答ミドルウェア&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="a4670161441f4fe196b94864edd9d000edb7a23c" translate="yes" xml:space="preserve">
          <source>The response format is as follows:</source>
          <target state="translated">応答形式は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d7a537914ffe8060b589033071bf0b85a4cceb6e" translate="yes" xml:space="preserve">
          <source>The response gets a special MIME type, &lt;em&gt;text/csv&lt;/em&gt;. This tells browsers that the document is a CSV file, rather than an HTML file. If you leave this off, browsers will probably interpret the output as HTML, which will result in ugly, scary gobbledygook in the browser window.</source>
          <target state="translated">応答は特別なMIMEタイプである&lt;em&gt;text / csvを&lt;/em&gt;取得し&lt;em&gt;ます&lt;/em&gt;。これは、ドキュメントがHTMLファイルではなくCSVファイルであることをブラウザに通知します。これをオフにしておくと、ブラウザーはおそらく出力をHTMLとして解釈するため、ブラウザーウィンドウに醜くて恐ろしいgobbledygookが表示されます。</target>
        </trans-unit>
        <trans-unit id="88e8fd0f065cc28fd8a941930557ccba8eef9e64" translate="yes" xml:space="preserve">
          <source>The response gets an additional &lt;code&gt;Content-Disposition&lt;/code&gt; header, which contains the name of the CSV file. This filename is arbitrary; call it whatever you want. It&amp;rsquo;ll be used by browsers in the &amp;ldquo;Save as&amp;hellip;&amp;rdquo; dialog, etc.</source>
          <target state="translated">応答は、CSVファイルの名前を含む追加の &lt;code&gt;Content-Disposition&lt;/code&gt; ヘッダーを取得します。このファイル名は任意です。好きなように呼んでください。[名前を付けて保存]ダイアログなどのブラウザで使用されます。</target>
        </trans-unit>
        <trans-unit id="20d9a12f39752374cd8ca0ae5722416047afa081" translate="yes" xml:space="preserve">
          <source>The response has already set the &lt;code&gt;Content-Encoding&lt;/code&gt; header.</source>
          <target state="translated">応答は既に &lt;code&gt;Content-Encoding&lt;/code&gt; ヘッダーを設定しています。</target>
        </trans-unit>
        <trans-unit id="d088dab9aa5e290bd218d9e46e9510b5a370c8db" translate="yes" xml:space="preserve">
          <source>The response will automatically set the MIME type &lt;em&gt;application/pdf&lt;/em&gt; based on the filename extension. This tells browsers that the document is a PDF file, rather than an HTML file or a generic &lt;code&gt;application/octet-stream&lt;/code&gt; binary content.</source>
          <target state="translated">応答では、ファイル名拡張子に基づいてMIMEタイプ&lt;em&gt;application / pdf&lt;/em&gt;が自動的に設定されます。これは、ドキュメントがHTMLファイルや一般的な &lt;code&gt;application/octet-stream&lt;/code&gt; バイナリコンテンツではなくPDFファイルであることをブラウザに伝えます。</target>
        </trans-unit>
        <trans-unit id="51246bedafc14b3170e1b07a837f50e928b4a472" translate="yes" xml:space="preserve">
          <source>The response will automatically set the MIME type &lt;em&gt;application/pdf&lt;/em&gt; based on the filename extension. This tells browsers that the document is a PDF file, rather than an HTML file or a generic &lt;em&gt;application/octet-stream&lt;/em&gt; binary content.</source>
          <target state="translated">応答は、ファイル名拡張子に基づいてMIMEタイプ&lt;em&gt;application / pdf&lt;/em&gt;を自動的に設定します。これは、ドキュメントがHTMLファイルや一般的な&lt;em&gt;アプリケーション/オクテットストリームの&lt;/em&gt;バイナリコンテンツではなく、PDFファイルであることをブラウザに通知します。</target>
        </trans-unit>
        <trans-unit id="d2a3a1ca851cbb09f766eb5cbdbf3e001ec5f3fb" translate="yes" xml:space="preserve">
          <source>The rest of the template is inherited unchanged from &lt;code&gt;admin/base_site.html&lt;/code&gt;.</source>
          <target state="translated">テンプレートの残りの部分は、 &lt;code&gt;admin/base_site.html&lt;/code&gt; から変更されずに継承されます。</target>
        </trans-unit>
        <trans-unit id="2e428b0f11924508a88f262351963fccf091b6c5" translate="yes" xml:space="preserve">
          <source>The result above will be ordered by &lt;code&gt;pub_date&lt;/code&gt; descending, then by &lt;code&gt;headline&lt;/code&gt; ascending. The negative sign in front of &lt;code&gt;&quot;-pub_date&quot;&lt;/code&gt; indicates &lt;em&gt;descending&lt;/em&gt; order. Ascending order is implied. To order randomly, use &lt;code&gt;&quot;?&quot;&lt;/code&gt;, like so:</source>
          <target state="translated">上記の結果は、 &lt;code&gt;pub_date&lt;/code&gt; の降順、次に &lt;code&gt;headline&lt;/code&gt; 昇順の順に並べられます。 &lt;code&gt;&quot;-pub_date&quot;&lt;/code&gt; 前の負符号は&lt;em&gt;降順を&lt;/em&gt;示します。昇順を意味します。ランダムに並べ替えるには、 &lt;code&gt;&quot;?&quot;&lt;/code&gt; 使用します 、 そのようです：</target>
        </trans-unit>
        <trans-unit id="3538f23694ada4bbb6f9528816858d186a1b8b5c" translate="yes" xml:space="preserve">
          <source>The result obeys the following contract:</source>
          <target state="translated">結果は以下の契約に従う。</target>
        </trans-unit>
        <trans-unit id="c14e6d591ac1c8b97d9f4c9fd6aea23af150fa40" translate="yes" xml:space="preserve">
          <source>The result of a &lt;code&gt;gettext_lazy()&lt;/code&gt; call can be used wherever you would use a string (a &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; object) in other Django code, but it may not work with arbitrary Python code. For example, the following won&amp;rsquo;t work because the &lt;a href=&quot;https://pypi.org/project/requests/&quot;&gt;requests&lt;/a&gt; library doesn&amp;rsquo;t handle &lt;code&gt;gettext_lazy&lt;/code&gt; objects:</source>
          <target state="translated">&lt;code&gt;gettext_lazy()&lt;/code&gt; 呼び出しの結果は、他のDjangoコードで文字列（&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;オブジェクト）を使用する場所ならどこでも使用できますが、任意のPythonコードでは機能しない可能性があります。たとえば、&lt;a href=&quot;https://pypi.org/project/requests/&quot;&gt;リクエスト&lt;/a&gt;ライブラリが &lt;code&gt;gettext_lazy&lt;/code&gt; オブジェクトを処理しないため、次のコードは機能しません。</target>
        </trans-unit>
        <trans-unit id="7e7830179f43052d618c32acfea5c89d8c4fe2d6" translate="yes" xml:space="preserve">
          <source>The result of refining a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; is itself a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;, so it&amp;rsquo;s possible to chain refinements together. For example:</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;を改良した結果は、それ自体が&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;であるため、改良を連鎖させることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="ac9654f7b6ea693576218903d8e129485c97271c" translate="yes" xml:space="preserve">
          <source>The result of the underlying &lt;a href=&quot;../files/storage#django.core.files.storage.Storage.size&quot;&gt;&lt;code&gt;Storage.size()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">基になる&lt;a href=&quot;../files/storage#django.core.files.storage.Storage.size&quot;&gt; &lt;code&gt;Storage.size()&lt;/code&gt; &lt;/a&gt;メソッドの結果。</target>
        </trans-unit>
        <trans-unit id="0e3d6cea04a2cfcbbe2aeef0076ec48f7c2afd31" translate="yes" xml:space="preserve">
          <source>The resulting SQL of the above example would be:</source>
          <target state="translated">上記の例の結果のSQLは次のようになります。</target>
        </trans-unit>
        <trans-unit id="6188e80a07d82c2b94db9d423143039cc16f0659" translate="yes" xml:space="preserve">
          <source>The resulting data can be accessed in JavaScript like this:</source>
          <target state="translated">結果のデータは、このようにJavaScriptでアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="0947bc3770f747599e991dec0f778f2763925658" translate="yes" xml:space="preserve">
          <source>The return value of the &lt;code&gt;call_command()&lt;/code&gt; function is the same as the return value of the &lt;code&gt;handle()&lt;/code&gt; method of the command.</source>
          <target state="translated">戻り値 &lt;code&gt;call_command()&lt;/code&gt; 関数の戻り値と同じである &lt;code&gt;handle()&lt;/code&gt; コマンドの方法。</target>
        </trans-unit>
        <trans-unit id="3af0a38e6adad5be9bbb174e2b2e9f885c843b3f" translate="yes" xml:space="preserve">
          <source>The return value of this method replaces the existing value in &lt;code&gt;cleaned_data&lt;/code&gt;, so it must be the field&amp;rsquo;s value from &lt;code&gt;cleaned_data&lt;/code&gt; (even if this method didn&amp;rsquo;t change it) or a new cleaned value.</source>
          <target state="translated">このメソッドの戻り値は、既存の値が置き換え &lt;code&gt;cleaned_data&lt;/code&gt; をので、からフィールドの値でなければなりません &lt;code&gt;cleaned_data&lt;/code&gt; （この方法は、それを変更しなかった場合でも）、または新しい掃除値。</target>
        </trans-unit>
        <trans-unit id="93e2f040a9a63e3a0e45c70d06ff09c108767c11" translate="yes" xml:space="preserve">
          <source>The return value will be the number of successfully delivered messages (which can be &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; since it can only send one message).</source>
          <target state="translated">戻り値は、正常に配信されたメッセージの数になります（メッセージは1つしか送信できないため、 &lt;code&gt;0&lt;/code&gt; または &lt;code&gt;1&lt;/code&gt; になります）。</target>
        </trans-unit>
        <trans-unit id="91ddd3d7a5351aa57493513cc55ee1befe42c9a0" translate="yes" xml:space="preserve">
          <source>The return value will be the number of successfully delivered messages.</source>
          <target state="translated">戻り値は、正常に配信されたメッセージの数になります。</target>
        </trans-unit>
        <trans-unit id="b500134ea06c38082097cb5634b86538dd3fcf50" translate="yes" xml:space="preserve">
          <source>The returned callable must match the sync or async nature of the &lt;code&gt;get_response&lt;/code&gt; method. If you have an asynchronous &lt;code&gt;get_response&lt;/code&gt;, you must return a coroutine function (&lt;code&gt;async def&lt;/code&gt;).</source>
          <target state="translated">返される呼び出し可能オブジェクトは、 &lt;code&gt;get_response&lt;/code&gt; メソッドの同期または非同期の性質と一致する必要があります。非同期の &lt;code&gt;get_response&lt;/code&gt; がある場合は、coroutine関数（ &lt;code&gt;async def&lt;/code&gt; ）を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="28f60b84cb824b48c98f4e41bbf07ed96ebbfa63" translate="yes" xml:space="preserve">
          <source>The returned ranges are strictly greater than the passed range. In other words, the all the points in the returned range are greater than all those in the passed range.</source>
          <target state="translated">返された範囲は、渡された範囲よりも厳密に大きくなります。言い換えれば、返された範囲のすべての点が、渡された範囲のすべての点よりも大きいということです。</target>
        </trans-unit>
        <trans-unit id="1b9185c4933c6310716ebc4a440ef9a643c8787d" translate="yes" xml:space="preserve">
          <source>The returned ranges are strictly less than the passed range. In other words, all the points in the returned range are less than all those in the passed range.</source>
          <target state="translated">返された範囲は、渡された範囲よりも厳密には小さい。つまり、返された範囲のすべての点が、渡された範囲のすべての点よりも小さくなります。</target>
        </trans-unit>
        <trans-unit id="a5389891829ba1d74991c292d8bbf5d732122dee" translate="yes" xml:space="preserve">
          <source>The returned ranges do not contain any points greater than the passed range, that is the upper bound of the returned range is at most the upper bound of the passed range.</source>
          <target state="translated">返された範囲には、渡された範囲よりも大きい点が含まれていない、つまり、返された範囲の上界は、最大でも渡された範囲の上界です。</target>
        </trans-unit>
        <trans-unit id="2d1a674c47980282cee37557270e2c208377b77f" translate="yes" xml:space="preserve">
          <source>The returned ranges do not contain any points less than the passed range, that is the lower bound of the returned range is at least the lower bound of the passed range.</source>
          <target state="translated">返された範囲は、渡された範囲よりも小さい点を含まない、つまり、返された範囲の下界は、少なくとも渡された範囲の下界である。</target>
        </trans-unit>
        <trans-unit id="e2ffdb7d0ff2e146d12e60ab281a0e4ccdf8c087" translate="yes" xml:space="preserve">
          <source>The returned ranges share a bound with the passed range.</source>
          <target state="translated">返される範囲は、渡された範囲とバウンドを共有します。</target>
        </trans-unit>
        <trans-unit id="b314ccbc42377f9f4d0e6c927dde27486cde1172" translate="yes" xml:space="preserve">
          <source>The returned view has &lt;code&gt;view_class&lt;/code&gt; and &lt;code&gt;view_initkwargs&lt;/code&gt; attributes.</source>
          <target state="translated">返されたビューがあり &lt;code&gt;view_class&lt;/code&gt; と &lt;code&gt;view_initkwargs&lt;/code&gt; 属性を。</target>
        </trans-unit>
        <trans-unit id="833fca1f313944a2f60c7f8c3995dc0ff4e9b274" translate="yes" xml:space="preserve">
          <source>The reverse name of the &lt;code&gt;common.ChildA.m2m&lt;/code&gt; field will be &lt;code&gt;common_childa_related&lt;/code&gt; and the reverse query name will be &lt;code&gt;common_childas&lt;/code&gt;. The reverse name of the &lt;code&gt;common.ChildB.m2m&lt;/code&gt; field will be &lt;code&gt;common_childb_related&lt;/code&gt; and the reverse query name will be &lt;code&gt;common_childbs&lt;/code&gt;. Finally, the reverse name of the &lt;code&gt;rare.ChildB.m2m&lt;/code&gt; field will be &lt;code&gt;rare_childb_related&lt;/code&gt; and the reverse query name will be &lt;code&gt;rare_childbs&lt;/code&gt;. It&amp;rsquo;s up to you how you use the &lt;code&gt;'%(class)s'&lt;/code&gt; and &lt;code&gt;'%(app_label)s'&lt;/code&gt; portion to construct your related name or related query name but if you forget to use it, Django will raise errors when you perform system checks (or run &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;common.ChildA.m2m&lt;/code&gt; フィールドの逆の名前は &lt;code&gt;common_childa_related&lt;/code&gt; になり、逆のクエリ名は &lt;code&gt;common_childas&lt;/code&gt; になります。 &lt;code&gt;common.ChildB.m2m&lt;/code&gt; フィールドの逆の名前は &lt;code&gt;common_childb_related&lt;/code&gt; になり、逆のクエリ名は &lt;code&gt;common_childbs&lt;/code&gt; になります。最後に、 &lt;code&gt;rare.ChildB.m2m&lt;/code&gt; フィールドの逆の名前は &lt;code&gt;rare_childb_related&lt;/code&gt; になり、逆のクエリ名は &lt;code&gt;rare_childbs&lt;/code&gt; になります。 &lt;code&gt;'%(class)s'&lt;/code&gt; と &lt;code&gt;'%(app_label)s'&lt;/code&gt; の使い方はあなた次第です関連する名前または関連するクエリ名を作成する部分ですが、使用するのを忘れた場合、システムチェックを実行&lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;（またはmigrateを実行する）と、Djangoによってエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="fae6307173a40526569fc75b21329c07eb4d27bb" translate="yes" xml:space="preserve">
          <source>The right-hand side - what &lt;code&gt;lhs&lt;/code&gt; is being compared against. It can be a plain value, or something that compiles into SQL, typically an &lt;code&gt;F()&lt;/code&gt; object or a &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="translated">右側 &lt;code&gt;lhs&lt;/code&gt; 比較対象。プレーンな値でも、SQLにコンパイルされるものでもよく、通常は &lt;code&gt;F()&lt;/code&gt; オブジェクトまたは &lt;code&gt;QuerySet&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2eab55fb4d3686d02dfd4cea51948a189eed2720" translate="yes" xml:space="preserve">
          <source>The root directory of one of your Django apps.</source>
          <target state="translated">Django アプリのルートディレクトリ。</target>
        </trans-unit>
        <trans-unit id="20e5e766f6f7e052ab181f9154fd81864a8095a6" translate="yes" xml:space="preserve">
          <source>The root directory of your Django project (the one that contains &lt;code&gt;manage.py&lt;/code&gt;).</source>
          <target state="translated">Djangoプロジェクト（ &lt;code&gt;manage.py&lt;/code&gt; を含むプロジェクト）のルートディレクトリ。</target>
        </trans-unit>
        <trans-unit id="ca093a763edb27f597a68348671afc2524db0619" translate="yes" xml:space="preserve">
          <source>The route of the matching URL pattern.</source>
          <target state="translated">マッチングしたURLパターンのルート。</target>
        </trans-unit>
        <trans-unit id="cd1950a7fb4d436e01762b44823625a3c7a38b2e" translate="yes" xml:space="preserve">
          <source>The same &lt;code&gt;closepoll&lt;/code&gt; could be easily modified to delete a given poll instead of closing it by accepting additional command line options. These custom options can be added in the &lt;a href=&quot;#django.core.management.BaseCommand.add_arguments&quot;&gt;&lt;code&gt;add_arguments()&lt;/code&gt;&lt;/a&gt; method like this:</source>
          <target state="translated">同じ &lt;code&gt;closepoll&lt;/code&gt; を簡単に変更して、追加のコマンドラインオプションを受け入れることで、特定の投票を閉じるのではなく削除することができます。これらのカスタムオプションは、&lt;a href=&quot;#django.core.management.BaseCommand.add_arguments&quot;&gt; &lt;code&gt;add_arguments()&lt;/code&gt; &lt;/a&gt;ようにadd_arguments（）メソッドで追加できます。</target>
        </trans-unit>
        <trans-unit id="8c9e104769a1a674a48a3fda24b00b9032252d95" translate="yes" xml:space="preserve">
          <source>The same field can&amp;rsquo;t be listed in both &lt;code&gt;list_editable&lt;/code&gt; and &lt;code&gt;list_display_links&lt;/code&gt; &amp;ndash; a field can&amp;rsquo;t be both a form and a link.</source>
          <target state="translated">同じフィールドを &lt;code&gt;list_editable&lt;/code&gt; と &lt;code&gt;list_display_links&lt;/code&gt; の両方にリストすることはできません。フィールドをフォームとリンクの両方にすることはできません。</target>
        </trans-unit>
        <trans-unit id="5e37b2bef8ba580cd5ab541b71879acdd872421b" translate="yes" xml:space="preserve">
          <source>The same incremental upgrade approach is recommended when upgrading from one LTS to the next.</source>
          <target state="translated">あるLTSから次のLTSにアップグレードする際には、同じインクリメンタル・アップグレード・アプローチを推奨します。</target>
        </trans-unit>
        <trans-unit id="b3b3bfbf9c27c76140be97fd31d3c9815706e4c4" translate="yes" xml:space="preserve">
          <source>The same issue can be triggered by using a reserved sequence in filter arguments:</source>
          <target state="translated">同じ問題は、フィルタの引数で予約済みのシーケンスを使用することで発生します。</target>
        </trans-unit>
        <trans-unit id="7d49bcf4db128a11dcf3ae24d922d2857a14a5ed" translate="yes" xml:space="preserve">
          <source>The same rules apply to the &lt;code&gt;aggregate()&lt;/code&gt; clause. If you wanted to know the lowest and highest price of any book that is available for sale in any of the stores, you could use the aggregate:</source>
          <target state="translated">同じルールが &lt;code&gt;aggregate()&lt;/code&gt; 句に適用されます。いずれかのストアで販売されている本の最低価格と最高価格を知りたい場合は、次の集計を使用できます。</target>
        </trans-unit>
        <trans-unit id="d00e6744dfe65784353ae5af25539be2f599e326" translate="yes" xml:space="preserve">
          <source>The same template context is used for subject template. Subject must be single line plain text string.</source>
          <target state="translated">件名テンプレートには、同じテンプレートコンテキストが使用されます。件名は一行のプレーンテキスト文字列でなければなりません。</target>
        </trans-unit>
        <trans-unit id="58bcd3c2076a780cd37416681b0a01638fc523aa" translate="yes" xml:space="preserve">
          <source>The same type of situation arises with a &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;. For example, if an &lt;code&gt;Entry&lt;/code&gt; has a &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; called &lt;code&gt;tags&lt;/code&gt;, we might want to find entries linked to tags called &lt;em&gt;&amp;ldquo;music&amp;rdquo;&lt;/em&gt; and &lt;em&gt;&amp;ldquo;bands&amp;rdquo;&lt;/em&gt; or we might want an entry that contains a tag with a name of &lt;em&gt;&amp;ldquo;music&amp;rdquo;&lt;/em&gt; and a status of &lt;em&gt;&amp;ldquo;public&amp;rdquo;&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; でも&lt;/a&gt;同じタイプの状況が発生します。たとえば、 &lt;code&gt;Entry&lt;/code&gt; 持っている&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;と呼ばれる &lt;code&gt;tags&lt;/code&gt; 、我々はと呼ばれるタグにリンクされているエントリ検索したいかもしれません&lt;em&gt;「音楽」&lt;/em&gt;と&lt;em&gt;「バンド」&lt;/em&gt;または、我々はの名前のタグを含むエントリたいかもしれません&lt;em&gt;「音楽」&lt;/em&gt;とステータスのを&lt;em&gt;「公開」&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2a6911035402212023ff113841a3af05f4fc2e13" translate="yes" xml:space="preserve">
          <source>The same values can be retrieved by accessing the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.origin&quot;&gt;&lt;code&gt;origin&lt;/code&gt;&lt;/a&gt; (indices 0 and 3), &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.scale&quot;&gt;&lt;code&gt;scale&lt;/code&gt;&lt;/a&gt; (indices 1 and 5) and &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.skew&quot;&gt;&lt;code&gt;skew&lt;/code&gt;&lt;/a&gt; (indices 2 and 4) properties.</source>
          <target state="translated">同じ値は、&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.origin&quot;&gt; &lt;code&gt;origin&lt;/code&gt; &lt;/a&gt;（インデックス0および3）、&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.scale&quot;&gt; &lt;code&gt;scale&lt;/code&gt; &lt;/a&gt;（インデックス1および5）、および&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.skew&quot;&gt; &lt;code&gt;skew&lt;/code&gt; &lt;/a&gt;（インデックス2および4）プロパティにアクセスして取得できます。</target>
        </trans-unit>
        <trans-unit id="24a51372eb1af2fbbb9e2958f4112559e5cf0c7d" translate="yes" xml:space="preserve">
          <source>The scope of the variable created by the &lt;code&gt;as var&lt;/code&gt; syntax is the &lt;code&gt;{% block %}&lt;/code&gt; in which the &lt;code&gt;{% url %}&lt;/code&gt; tag appears.</source>
          <target state="translated">作成された変数の範囲 &lt;code&gt;as var&lt;/code&gt; 構文は &lt;code&gt;{% block %}&lt;/code&gt; に &lt;code&gt;{% url %}&lt;/code&gt; タグが現れます。</target>
        </trans-unit>
        <trans-unit id="d71fa59563ec81dc34bbf9805ee87b55f530b868" translate="yes" xml:space="preserve">
          <source>The script runs over your project source tree or your application source tree and pulls out all strings marked for translation (see &lt;a href=&quot;#how-django-discovers-translations&quot;&gt;How Django discovers translations&lt;/a&gt; and be sure &lt;a href=&quot;../../ref/settings#std:setting-LOCALE_PATHS&quot;&gt;&lt;code&gt;LOCALE_PATHS&lt;/code&gt;&lt;/a&gt; is configured correctly). It creates (or updates) a message file in the directory &lt;code&gt;locale/LANG/LC_MESSAGES&lt;/code&gt;. In the &lt;code&gt;de&lt;/code&gt; example, the file will be &lt;code&gt;locale/de/LC_MESSAGES/django.po&lt;/code&gt;.</source>
          <target state="translated">スクリプトはプロジェクトソースツリーまたはアプリケーションソースツリーで実行され、翻訳対象としてマークされたすべての文字列を引き出します（&lt;a href=&quot;#how-django-discovers-translations&quot;&gt;Djangoが翻訳&lt;/a&gt;を検出する方法を参照し、&lt;a href=&quot;../../ref/settings#std:setting-LOCALE_PATHS&quot;&gt; &lt;code&gt;LOCALE_PATHS&lt;/code&gt; &lt;/a&gt;が正しく構成されていることを確認してください）。これは、ディレクトリ &lt;code&gt;locale/LANG/LC_MESSAGES&lt;/code&gt; にメッセージファイルを作成（または更新）します。 &lt;code&gt;de&lt;/code&gt; 例えば、ファイルがあろう &lt;code&gt;locale/de/LC_MESSAGES/django.po&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01d4ce0747b4bb3734054c4649bc904ba315d5e3" translate="yes" xml:space="preserve">
          <source>The script should be run from one of two places:</source>
          <target state="translated">スクリプトは2つの場所のいずれかから実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="5a96260ec28837c3111286a3e6202d9d45a94842" translate="yes" xml:space="preserve">
          <source>The second approach for reporting validation errors might involve assigning the error message to one of the fields. In this case, let&amp;rsquo;s assign an error message to both the &amp;ldquo;subject&amp;rdquo; and &amp;ldquo;cc_myself&amp;rdquo; rows in the form display. Be careful when doing this in practice, since it can lead to confusing form output. We&amp;rsquo;re showing what is possible here and leaving it up to you and your designers to work out what works effectively in your particular situation. Our new code (replacing the previous sample) looks like this:</source>
          <target state="translated">検証エラーを報告するための2番目のアプローチでは、フィールドの1つにエラーメッセージを割り当てる必要があります。この場合、フォーム表示の「subject」行と「cc_myself」行の両方にエラーメッセージを割り当てましょう。フォーム出力の混乱を招く可能性があるため、実際にこれを行う場合は注意してください。ここでは何が可能かを示し、特定の状況で何が効果的に機能するかについては、あなたと設計者に任せています。新しいコード（前のサンプルを置き換える）は次のようになります。</target>
        </trans-unit>
        <trans-unit id="5f7d92f7e7b0791391ff1e74b29a6f88aa82af72" translate="yes" xml:space="preserve">
          <source>The second approach is to use the &lt;code&gt;open()&lt;/code&gt; and &lt;code&gt;close()&lt;/code&gt; methods on the email backend to manually control the connection. &lt;code&gt;send_messages()&lt;/code&gt; will not manually open or close the connection if it is already open, so if you manually open the connection, you can control when it is closed. For example:</source>
          <target state="translated">2番目のアプローチは、電子メールのバックエンドで &lt;code&gt;open()&lt;/code&gt; および &lt;code&gt;close()&lt;/code&gt; メソッドを使用して、接続を手動で制御することです。 &lt;code&gt;send_messages()&lt;/code&gt; は、すでに開いている接続を手動で開いたり閉じたりしないため、接続を手動で開いた場合は、いつ接続を閉じるかを制御できます。例えば：</target>
        </trans-unit>
        <trans-unit id="2e3efc24c7fd20fc9df2c7d1b679b41d5aefd2f2" translate="yes" xml:space="preserve">
          <source>The second argument of &lt;code&gt;add_error()&lt;/code&gt; can be a string, or preferably an instance of &lt;code&gt;ValidationError&lt;/code&gt;. See &lt;a href=&quot;#raising-validation-error&quot;&gt;Raising ValidationError&lt;/a&gt; for more details. Note that &lt;code&gt;add_error()&lt;/code&gt; automatically removes the field from &lt;code&gt;cleaned_data&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;add_error()&lt;/code&gt; の2番目の引数は、文字列、またはできれば &lt;code&gt;ValidationError&lt;/code&gt; のインスタンスにすることができます。詳細については、&lt;a href=&quot;#raising-validation-error&quot;&gt;ValidationErrorの発生&lt;/a&gt;を参照してください。 &lt;code&gt;add_error()&lt;/code&gt; は自動的に &lt;code&gt;cleaned_data&lt;/code&gt; からフィールドを削除することに注意してください。</target>
        </trans-unit>
        <trans-unit id="9231b4a9c11e46f633fc4359e4166a94d7495997" translate="yes" xml:space="preserve">
          <source>The second class is the &lt;code&gt;Field&lt;/code&gt; subclass. This is the class that knows how to convert your first class back and forth between its permanent storage form and the Python form.</source>
          <target state="translated">2番目のクラスは &lt;code&gt;Field&lt;/code&gt; サブクラスです。これは、最初のクラスを永続ストレージ形式とPython形式の間で相互に変換する方法を知っているクラスです。</target>
        </trans-unit>
        <trans-unit id="2749519ed6cc287c189a583a5dbe03565b43c2dc" translate="yes" xml:space="preserve">
          <source>The second difference is that it automatically populates the context with a few variables, according to the engine&amp;rsquo;s &lt;code&gt;context_processors&lt;/code&gt; configuration option.</source>
          <target state="translated">2番目の違いは、エンジンの &lt;code&gt;context_processors&lt;/code&gt; 構成オプションに従って、いくつかの変数がコンテキストに自動的に入力されることです。</target>
        </trans-unit>
        <trans-unit id="04cdab600ff6d492b9c85e51f9ea616f0ecc41ea" translate="yes" xml:space="preserve">
          <source>The second option is to use the &lt;code&gt;force_insert&lt;/code&gt; option to &lt;code&gt;save()&lt;/code&gt; to ensure that Django does an SQL &lt;code&gt;INSERT&lt;/code&gt;:</source>
          <target state="translated">2番目のオプションは、 &lt;code&gt;force_insert&lt;/code&gt; オプションを使用して &lt;code&gt;save()&lt;/code&gt; を実行し、Djangoが確実にSQL &lt;code&gt;INSERT&lt;/code&gt; を実行するようにすることです。</target>
        </trans-unit>
        <trans-unit id="f7c129f254ad0e20b2d394de09d8d68668947ea7" translate="yes" xml:space="preserve">
          <source>The second query counts the number of books that have a rating exceeding 3.0 for each publisher. The filter precedes the annotation, so the filter constrains the objects considered when calculating the annotation.</source>
          <target state="translated">2 番目のクエリでは、各出版社の評価が 3.0 を超えている本の数をカウントします。フィルタはアノテーションの前にあるので、フィルタはアノテーションを計算する際に考慮されるオブジェクトを制限します。</target>
        </trans-unit>
        <trans-unit id="4df0824d3dfaf3a260f6082684e83bd9c7d628eb" translate="yes" xml:space="preserve">
          <source>The second step &lt;code&gt;full_clean()&lt;/code&gt; performs is to call &lt;a href=&quot;#django.db.models.Model.clean&quot;&gt;&lt;code&gt;Model.clean()&lt;/code&gt;&lt;/a&gt;. This method should be overridden to perform custom validation on your model.</source>
          <target state="translated">&lt;code&gt;full_clean()&lt;/code&gt; が実行する2番目のステップは、Model.clean（）を呼び出すこと&lt;a href=&quot;#django.db.models.Model.clean&quot;&gt; &lt;code&gt;Model.clean()&lt;/code&gt; &lt;/a&gt;。モデルでカスタム検証を実行するには、このメソッドをオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="27e39d0116ed446f2f74eabf5549557d2e7504d9" translate="yes" xml:space="preserve">
          <source>The second step in writing custom tags is to define a &lt;code&gt;Node&lt;/code&gt; subclass that has a &lt;code&gt;render()&lt;/code&gt; method.</source>
          <target state="translated">カスタムタグを記述する2番目のステップは、 &lt;code&gt;render()&lt;/code&gt; メソッドを持つ &lt;code&gt;Node&lt;/code&gt; サブクラスを定義することです。</target>
        </trans-unit>
        <trans-unit id="8740e528ce3da4e64daa6a15895436729c3f000a" translate="yes" xml:space="preserve">
          <source>The second task of a &lt;code&gt;Form&lt;/code&gt; object is to render itself as HTML. To do so, &lt;code&gt;print&lt;/code&gt; it:</source>
          <target state="translated">&lt;code&gt;Form&lt;/code&gt; オブジェクトの2番目のタスクは、それ自体をHTMLとしてレンダリングすることです。そのためには、それを &lt;code&gt;print&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="e5e9f3d06888362216211128b4689f633ad87855" translate="yes" xml:space="preserve">
          <source>The second type of model inheritance supported by Django is when each model in the hierarchy is a model all by itself. Each model corresponds to its own database table and can be queried and created individually. The inheritance relationship introduces links between the child model and each of its parents (via an automatically-created &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt;). For example:</source>
          <target state="translated">Djangoがサポートするモデル継承の2番目のタイプは、階層内の各モデルがそれ自体でモデルである場合です。各モデルは独自のデータベーステーブルに対応しており、個別にクエリを実行して作成できます。継承関係により、（自動的に作成された&lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; を&lt;/a&gt;介して）子モデルとその各親の間にリンクが導入されます。例えば：</target>
        </trans-unit>
        <trans-unit id="b87b4139b16c9ea6b22776990536a398a56e2ddf" translate="yes" xml:space="preserve">
          <source>The second way to generate summary values is to generate an independent summary for each object in a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;. For example, if you are retrieving a list of books, you may want to know how many authors contributed to each book. Each Book has a many-to-many relationship with the Author; we want to summarize this relationship for each book in the &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="translated">サマリー値を生成する2番目の方法は、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; の&lt;/a&gt;各オブジェクトの独立したサマリーを生成することです。たとえば、本のリストを取得する場合、各本に何人の著者が寄稿したかを知りたい場合があります。各本は著者と多対多の関係にあります。 &lt;code&gt;QuerySet&lt;/code&gt; の各本についてこの関係を要約したいと思います。</target>
        </trans-unit>
        <trans-unit id="955ce0b833e3fe1408d6ab1ea4e01cbfd029953d" translate="yes" xml:space="preserve">
          <source>The second, more powerful way to use generic views is to inherit from an existing view and override attributes (such as the &lt;code&gt;template_name&lt;/code&gt;) or methods (such as &lt;code&gt;get_context_data&lt;/code&gt;) in your subclass to provide new values or methods. Consider, for example, a view that just displays one template, &lt;code&gt;about.html&lt;/code&gt;. Django has a generic view to do this - &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt; - so we can subclass it, and override the template name:</source>
          <target state="translated">ジェネリックビューを使用する2番目のより強力な方法は、既存のビューから継承し、サブクラスの属性（ &lt;code&gt;template_name&lt;/code&gt; など）またはメソッド（ &lt;code&gt;get_context_data&lt;/code&gt; など）をオーバーライドして、新しい値またはメソッドを提供することです。たとえば、 &lt;code&gt;about.html&lt;/code&gt; という 1つのテンプレートのみを表示するビューを考えてみます。Djangoはこれを行うための一般的な見解を持っている- &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt; -我々はそれをサブクラス化し、テンプレート名を上書きすることができるように：</target>
        </trans-unit>
        <trans-unit id="ae200081256a76cf9fa5d93cdf773354b4227fa5" translate="yes" xml:space="preserve">
          <source>The secret key is used for:</source>
          <target state="translated">秘密鍵を使用しています。</target>
        </trans-unit>
        <trans-unit id="1535f99b602c999783ef5365870bcf6a80a77c17" translate="yes" xml:space="preserve">
          <source>The security checks do not make your site secure. They do not audit code, do intrusion detection, or do anything particularly complex. Rather, they help perform an automated, low-hanging-fruit checklist, that can help you to improve your site&amp;rsquo;s security.</source>
          <target state="translated">セキュリティチェックは、サイトを安全にしません。コードの監査、侵入検知、特に複雑な処理は行いません。むしろ、サイトのセキュリティを向上させるのに役立つ、自動化された、簡単なフルーツチェックリストの実行に役立ちます。</target>
        </trans-unit>
        <trans-unit id="9a8c017152815689248540519b1703662bd2cf98" translate="yes" xml:space="preserve">
          <source>The security loggers will receive messages on any occurrence of &lt;a href=&quot;../ref/exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt; and other security-related errors. There is a sub-logger for each subtype of security error, including all &lt;code&gt;SuspiciousOperation&lt;/code&gt;s. The level of the log event depends on where the exception is handled. Most occurrences are logged as a warning, while any &lt;code&gt;SuspiciousOperation&lt;/code&gt; that reaches the WSGI handler will be logged as an error. For example, when an HTTP &lt;code&gt;Host&lt;/code&gt; header is included in a request from a client that does not match &lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt;, Django will return a 400 response, and an error message will be logged to the &lt;code&gt;django.security.DisallowedHost&lt;/code&gt; logger.</source>
          <target state="translated">セキュリティロガーは、&lt;a href=&quot;../ref/exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousOperation&lt;/code&gt; &lt;/a&gt;およびその他のセキュリティ関連のエラーが発生するとメッセージを受け取ります。すべての &lt;code&gt;SuspiciousOperation&lt;/code&gt; を含む、セキュリティエラーのサブタイプごとにサブロガーがあります。ログイベントのレベルは、例外が処理される場所によって異なります。ほとんどの発生は警告としてログに記録されますが、WSGIハンドラーに到達したすべての &lt;code&gt;SuspiciousOperation&lt;/code&gt; はエラーとしてログに記録されます。たとえば、&lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt; &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; &lt;/a&gt;と一致しないクライアントからのリクエストにHTTP &lt;code&gt;Host&lt;/code&gt; ヘッダーが含まれている場合、Djangoは400応答を返し、エラーメッセージが &lt;code&gt;django.security.DisallowedHost&lt;/code&gt; ロガーに記録されます。</target>
        </trans-unit>
        <trans-unit id="9e0f12c094c690a80b16f07d67de5edaf7d7b072" translate="yes" xml:space="preserve">
          <source>The session dictionary accepts any &lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt; serializable value when using &lt;a href=&quot;#django.contrib.sessions.serializers.JSONSerializer&quot;&gt;&lt;code&gt;JSONSerializer&lt;/code&gt;&lt;/a&gt; or any picklable Python object when using &lt;a href=&quot;#django.contrib.sessions.serializers.PickleSerializer&quot;&gt;&lt;code&gt;PickleSerializer&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; module for more information.</source>
          <target state="translated">セッションディクショナリは、&lt;a href=&quot;#django.contrib.sessions.serializers.JSONSerializer&quot;&gt; &lt;code&gt;JSONSerializer&lt;/code&gt; &lt;/a&gt;を使用する場合は&lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt; &lt;code&gt;json&lt;/code&gt; の&lt;/a&gt;シリアル化可能な値、またはPickleSerializer を使用する場合はピクル可能なPythonオブジェクトを&lt;a href=&quot;#django.contrib.sessions.serializers.PickleSerializer&quot;&gt; &lt;code&gt;PickleSerializer&lt;/code&gt; &lt;/a&gt;ます。詳細については、&lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="e35922e630f20249ec9042c300948fc643cab60b" translate="yes" xml:space="preserve">
          <source>The session is not saved if the response&amp;rsquo;s status code is 500.</source>
          <target state="translated">応答のステータスコードが500の場合、セッションは保存されません。</target>
        </trans-unit>
        <trans-unit id="2f0eea75fa7d331e2abf0ff67f1b00aad0282a57" translate="yes" xml:space="preserve">
          <source>The set of fields to update as passed to &lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;Model.save()&lt;/code&gt;&lt;/a&gt;, or &lt;code&gt;None&lt;/code&gt; if &lt;code&gt;update_fields&lt;/code&gt; wasn&amp;rsquo;t passed to &lt;code&gt;save()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;Model.save()&lt;/code&gt; に&lt;/a&gt;渡されたときに更新するフィールドのセット、または &lt;code&gt;update_fields&lt;/code&gt; が &lt;code&gt;save()&lt;/code&gt; に渡されなかった場合は &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="23f815aca7be18e5c46a756945c0068e9aa45f3a" translate="yes" xml:space="preserve">
          <source>The setting must be the &lt;em&gt;full&lt;/em&gt; path to the &lt;strong&gt;C&lt;/strong&gt; shared library; in other words you want to use &lt;code&gt;libgeos_c.so&lt;/code&gt;, not &lt;code&gt;libgeos.so&lt;/code&gt;.</source>
          <target state="translated">この設定は、&lt;strong&gt;C&lt;/strong&gt;共有ライブラリへの&lt;em&gt;完全&lt;/em&gt;パスでなければなりません。言い換えれば、 &lt;code&gt;libgeos_c.so&lt;/code&gt; ではなく &lt;code&gt;libgeos.so&lt;/code&gt; を使用したいということです。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="43f0cb37adadfa231abd3204173b3559513b6ab8" translate="yes" xml:space="preserve">
          <source>The settings below have sensible defaults, and shouldn&amp;rsquo;t require manual setting.</source>
          <target state="translated">以下の設定には適切なデフォルトがあり、手動で設定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="fbba6b5893b691a78597afda71719076c4e2f3d5" translate="yes" xml:space="preserve">
          <source>The settings file contains some settings that are only consulted during initialization of Django internals. If you change them with &lt;code&gt;override_settings&lt;/code&gt;, the setting is changed if you access it via the &lt;code&gt;django.conf.settings&lt;/code&gt; module, however, Django&amp;rsquo;s internals access it differently. Effectively, using &lt;a href=&quot;#django.test.override_settings&quot;&gt;&lt;code&gt;override_settings()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.test.modify_settings&quot;&gt;&lt;code&gt;modify_settings()&lt;/code&gt;&lt;/a&gt; with these settings is probably not going to do what you expect it to do.</source>
          <target state="translated">設定ファイルには、Django内部の初期化中にのみ参照されるいくつかの設定が含まれています。 &lt;code&gt;override_settings&lt;/code&gt; でこれらを変更した場合、 &lt;code&gt;django.conf.settings&lt;/code&gt; モジュール経由でアクセスすると設定が変更されますが、Djangoの内部からはアクセス方法が異なります。事実上、これらの設定で&lt;a href=&quot;#django.test.override_settings&quot;&gt; &lt;code&gt;override_settings()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#django.test.modify_settings&quot;&gt; &lt;code&gt;modify_settings()&lt;/code&gt; &lt;/a&gt;を使用しても、おそらく期待どおりに動作しません。</target>
        </trans-unit>
        <trans-unit id="8e4994867007b999256756ccbe1e325955a4f469" translate="yes" xml:space="preserve">
          <source>The settings handler.</source>
          <target state="translated">設定ハンドラです。</target>
        </trans-unit>
        <trans-unit id="d96ddc86f7a01e9214faf44f5f94c2acc7bd4806" translate="yes" xml:space="preserve">
          <source>The settings module to compare the current settings against. Leave empty to compare against Django&amp;rsquo;s default settings.</source>
          <target state="translated">現在の設定と比較する設定モジュール。空のままにすると、Djangoのデフォルト設定と比較されます。</target>
        </trans-unit>
        <trans-unit id="daff59a2d84f51417b786ed3d47e6c6c70db8d2e" translate="yes" xml:space="preserve">
          <source>The severity of the message. Use one of the predefined values: &lt;code&gt;DEBUG&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;WARNING&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;CRITICAL&lt;/code&gt;. If the level is greater or equal to &lt;code&gt;ERROR&lt;/code&gt;, then Django will prevent management commands from executing. Messages with level lower than &lt;code&gt;ERROR&lt;/code&gt; (i.e. warnings) are reported to the console, but can be silenced.</source>
          <target state="translated">メッセージの重大度。 &lt;code&gt;DEBUG&lt;/code&gt; 、 &lt;code&gt;INFO&lt;/code&gt; 、 &lt;code&gt;WARNING&lt;/code&gt; 、 &lt;code&gt;ERROR&lt;/code&gt; 、 &lt;code&gt;CRITICAL&lt;/code&gt; の事前定義値のいずれかを使用します。レベルが &lt;code&gt;ERROR&lt;/code&gt; 以上の場合、Djangoは管理コマンドの実行を防止します。 &lt;code&gt;ERROR&lt;/code&gt; より低いレベルのメッセージ（つまり、警告）はコンソールに報告されますが、沈黙させることができます。</target>
        </trans-unit>
        <trans-unit id="c9a42097105f3fe23943b9e54d772efc8700f873" translate="yes" xml:space="preserve">
          <source>The shortcut view (&lt;code&gt;django.contrib.contenttypes.views.shortcut&lt;/code&gt;) uses the domain of the current &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; object when calculating an object&amp;rsquo;s URL.</source>
          <target state="translated">ショートカットビュー（ &lt;code&gt;django.contrib.contenttypes.views.shortcut&lt;/code&gt; ）は、オブジェクトのURLを計算するときに現在の&lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt;オブジェクトのドメインを使用します。</target>
        </trans-unit>
        <trans-unit id="a0367a435210eefa6ee3034f3399ebd2c9293c85" translate="yes" xml:space="preserve">
          <source>The signature is appended to the end of the string, following the colon. You can retrieve the original value using the &lt;code&gt;unsign&lt;/code&gt; method:</source>
          <target state="translated">署名は、コロンの後の文字列の最後に追加されます。 &lt;code&gt;unsign&lt;/code&gt; メソッドを使用して元の値を取得できます。</target>
        </trans-unit>
        <trans-unit id="50ccadf7df70403760c5d064c7884bb59385dc50" translate="yes" xml:space="preserve">
          <source>The similar template tag &lt;a href=&quot;../templates/builtins#std:templatetag-get_media_prefix&quot;&gt;&lt;code&gt;get_media_prefix&lt;/code&gt;&lt;/a&gt; which works like &lt;a href=&quot;../templates/builtins#std:templatetag-get_static_prefix&quot;&gt;&lt;code&gt;get_static_prefix&lt;/code&gt;&lt;/a&gt; but uses &lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../templates/builtins#std:templatetag-get_media_prefix&quot;&gt; &lt;code&gt;get_media_prefix&lt;/code&gt; &lt;/a&gt;と同様に&lt;a href=&quot;../templates/builtins#std:templatetag-get_static_prefix&quot;&gt; &lt;code&gt;get_static_prefix&lt;/code&gt; &lt;/a&gt;が、&lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; を&lt;/a&gt;使用する同様のテンプレートタグget_media_prefix。</target>
        </trans-unit>
        <trans-unit id="6abe52c0ed7e3ab6a23d1047f985e8d596334cc9" translate="yes" xml:space="preserve">
          <source>The simplest possible settings file is for a single-database setup using SQLite. This can be configured using the following:</source>
          <target state="translated">最もシンプルな設定ファイルは、SQLiteを使用した単一データベースのセットアップ用です。これは、以下のように設定することができます。</target>
        </trans-unit>
        <trans-unit id="5ace5d761f4959bafdaa5e3113f1ce313de02fef" translate="yes" xml:space="preserve">
          <source>The simplest way to retrieve objects from a table is to get all of them. To do this, use the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.all&quot;&gt;&lt;code&gt;all()&lt;/code&gt;&lt;/a&gt; method on a &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">テーブルからオブジェクトを取得する最も簡単な方法は、すべてのオブジェクトを取得することです。これを行うには、&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; で&lt;/a&gt;&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.all&quot;&gt; &lt;code&gt;all()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="52b16d4e7b314498be9f2952398e668adf29cd4e" translate="yes" xml:space="preserve">
          <source>The sitemap framework</source>
          <target state="translated">サイトマップフレームワーク</target>
        </trans-unit>
        <trans-unit id="11295cffc86f5ad19f00a1782ed37fd95420afb6" translate="yes" xml:space="preserve">
          <source>The sitemap framework also has the ability to create a sitemap index that references individual sitemap files, one per each section defined in your &lt;code&gt;sitemaps&lt;/code&gt; dictionary. The only differences in usage are:</source>
          <target state="translated">サイトマップフレームワークには、 &lt;code&gt;sitemaps&lt;/code&gt; ディクショナリで定義されているセクションごとに1つずつ、個々のサイトマップファイルを参照するサイトマップインデックスを作成する機能もあります。使用法の違いは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="3858d967f8980cf6e61e8ec128647b2f1879c701" translate="yes" xml:space="preserve">
          <source>The sitemap framework provides a convenience class for a common case:</source>
          <target state="translated">サイトマップフレームワークでは、よくあるケースの便利なクラスを提供しています。</target>
        </trans-unit>
        <trans-unit id="ef72e72951e66bb8c2edbac6e948311578859341" translate="yes" xml:space="preserve">
          <source>The sitemap view takes an extra, required argument: &lt;code&gt;{'sitemaps': sitemaps}&lt;/code&gt;. &lt;code&gt;sitemaps&lt;/code&gt; should be a dictionary that maps a short section label (e.g., &lt;code&gt;blog&lt;/code&gt; or &lt;code&gt;news&lt;/code&gt;) to its &lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt;&lt;code&gt;Sitemap&lt;/code&gt;&lt;/a&gt; class (e.g., &lt;code&gt;BlogSitemap&lt;/code&gt; or &lt;code&gt;NewsSitemap&lt;/code&gt;). It may also map to an &lt;em&gt;instance&lt;/em&gt; of a &lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt;&lt;code&gt;Sitemap&lt;/code&gt;&lt;/a&gt; class (e.g., &lt;code&gt;BlogSitemap(some_var)&lt;/code&gt;).</source>
          <target state="translated">サイトマップビューは、追加の必須引数 &lt;code&gt;{'sitemaps': sitemaps}&lt;/code&gt; 取ります。 &lt;code&gt;sitemaps&lt;/code&gt; 短いセクションのラベル（例えば、マッピングした辞書でなければなりません &lt;code&gt;blog&lt;/code&gt; や &lt;code&gt;news&lt;/code&gt; そのために）&lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt; &lt;code&gt;Sitemap&lt;/code&gt; &lt;/a&gt;クラス（例えば、 &lt;code&gt;BlogSitemap&lt;/code&gt; または &lt;code&gt;NewsSitemap&lt;/code&gt; ）。また、&lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt; &lt;code&gt;Sitemap&lt;/code&gt; &lt;/a&gt;クラスの&lt;em&gt;インスタンス&lt;/em&gt;（例： &lt;code&gt;BlogSitemap(some_var)&lt;/code&gt; ）にマップする場合もあり&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="621dc9b224a288114cf11d09756159474c159f60" translate="yes" xml:space="preserve">
          <source>The sites framework</source>
          <target state="translated">サイトの枠組み</target>
        </trans-unit>
        <trans-unit id="ac304e3cb27724e325b549a253fc46d5fd5f134d" translate="yes" xml:space="preserve">
          <source>The sites framework is mainly based on this model:</source>
          <target state="translated">サイトの枠組みは主にこのモデルに基づいています。</target>
        </trans-unit>
        <trans-unit id="0cf28a9f4765208e101d68cf21ce0fa06a19c689" translate="yes" xml:space="preserve">
          <source>The size of the file in bytes.</source>
          <target state="translated">ファイルのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="a191f66f2ff3d662e45b49c5c86e72633c70ad4b" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the uploaded file.</source>
          <target state="translated">アップロードされたファイルのサイズ (バイト単位)。</target>
        </trans-unit>
        <trans-unit id="92141737ed37f235c75582be194bce228f33b6fa" translate="yes" xml:space="preserve">
          <source>The smallest convex polygon that contains this geometry, as a new &lt;a href=&quot;#django.contrib.gis.gdal.OGRGeometry&quot;&gt;&lt;code&gt;OGRGeometry&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">新しい&lt;a href=&quot;#django.contrib.gis.gdal.OGRGeometry&quot;&gt; &lt;code&gt;OGRGeometry&lt;/code&gt; &lt;/a&gt;オブジェクトとして、このジオメトリを含む最小の凸多角形。</target>
        </trans-unit>
        <trans-unit id="1ac6e1b126807dd40652d6347d761ec0ecdc46f7" translate="yes" xml:space="preserve">
          <source>The solution is to indicate a page&amp;rsquo;s cache should be &amp;ldquo;private.&amp;rdquo; To do this in Django, use the &lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt;&lt;code&gt;cache_control()&lt;/code&gt;&lt;/a&gt; view decorator. Example:</source>
          <target state="translated">解決策は、ページのキャッシュが「プライベート」であることを示すことです。Djangoでこれを行うには、&lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt; &lt;code&gt;cache_control()&lt;/code&gt; &lt;/a&gt;ビューデコレータを使用します。例：</target>
        </trans-unit>
        <trans-unit id="8b59d72e0e3ebbc25fb8e2359b6df20989ed4f7d" translate="yes" xml:space="preserve">
          <source>The source for Django&amp;rsquo;s own &lt;code&gt;ImageField&lt;/code&gt; (in &lt;code&gt;django/db/models/fields/files.py&lt;/code&gt;) is a great example of how to subclass &lt;code&gt;FileField&lt;/code&gt; to support a particular type of file, as it incorporates all of the techniques described above.</source>
          <target state="translated">Django自身の &lt;code&gt;ImageField&lt;/code&gt; （ &lt;code&gt;django/db/models/fields/files.py&lt;/code&gt; 内）のソースは、 &lt;code&gt;FileField&lt;/code&gt; をサブクラス化して特定のタイプのファイルをサポートする方法の優れた例です。</target>
        </trans-unit>
        <trans-unit id="91d9e632ff2a71021b352596571ac121915320b7" translate="yes" xml:space="preserve">
          <source>The source of the language information is the &lt;code&gt;django.conf.locale&lt;/code&gt; module. Similar access to this information is available for template code. See below.</source>
          <target state="translated">言語情報のソースは &lt;code&gt;django.conf.locale&lt;/code&gt; モジュールです。この情報への同様のアクセスは、テンプレートコードで利用できます。下記参照。</target>
        </trans-unit>
        <trans-unit id="9f746499367e42aad9a8ada8bd6243a605585610" translate="yes" xml:space="preserve">
          <source>The spatial lookups in this section are available for &lt;a href=&quot;model-api#django.contrib.gis.db.models.GeometryField&quot;&gt;&lt;code&gt;GeometryField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;model-api#django.contrib.gis.db.models.RasterField&quot;&gt;&lt;code&gt;RasterField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このセクションの空間ルックアップは、&lt;a href=&quot;model-api#django.contrib.gis.db.models.GeometryField&quot;&gt; &lt;code&gt;GeometryField&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;model-api#django.contrib.gis.db.models.RasterField&quot;&gt; &lt;code&gt;RasterField&lt;/code&gt; で&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="ade382e0e188f8e963669b6d9a567b326638dea5" translate="yes" xml:space="preserve">
          <source>The spatial reference system of the raster, as a &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; instance. The SRS can be changed by setting it to an other &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; or providing any input that is accepted by the &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt; &lt;code&gt;SpatialReference&lt;/code&gt; &lt;/a&gt;インスタンスとしての、ラスターの空間参照系。SRSを変更するには、SRSを他の&lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt; &lt;code&gt;SpatialReference&lt;/code&gt; に&lt;/a&gt;設定するか、&lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt; &lt;code&gt;SpatialReference&lt;/code&gt; &lt;/a&gt;コンストラクターが受け入れる入力を提供します。</target>
        </trans-unit>
        <trans-unit id="5f344776c834916f1ca5bb889c884ef362eeb5de" translate="yes" xml:space="preserve">
          <source>The standard &lt;a href=&quot;../auth/default#django.contrib.auth.logout&quot;&gt;&lt;code&gt;django.contrib.auth.logout()&lt;/code&gt;&lt;/a&gt; function actually does a bit more than this to prevent inadvertent data leakage. It calls the &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.flush&quot;&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;request.session&lt;/code&gt;. We are using this example as a demonstration of how to work with session objects, not as a full &lt;code&gt;logout()&lt;/code&gt; implementation.</source>
          <target state="translated">標準の&lt;a href=&quot;../auth/default#django.contrib.auth.logout&quot;&gt; &lt;code&gt;django.contrib.auth.logout()&lt;/code&gt; &lt;/a&gt;関数は、不注意によるデータ漏洩を防ぐために、実際にはこれよりも少し多く機能します。 &lt;code&gt;request.session&lt;/code&gt; の&lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.flush&quot;&gt; &lt;code&gt;flush()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出します。この例は、完全な &lt;code&gt;logout()&lt;/code&gt; 実装としてではなく、セッションオブジェクトの操作方法のデモンストレーションとして使用しています。</target>
        </trans-unit>
        <trans-unit id="9420c2daed09e06f0a2e7efc640e408af5f27e29" translate="yes" xml:space="preserve">
          <source>The standard deviation of all pixel values of the band (excluding the &amp;ldquo;no data&amp;rdquo; value).</source>
          <target state="translated">バンドのすべてのピクセル値の標準偏差（「データなし」の値を除く）。</target>
        </trans-unit>
        <trans-unit id="52c907cfa056aa62789f972666a5ed08a998ff7c" translate="yes" xml:space="preserve">
          <source>The static files tools are mostly designed to help with getting static files successfully deployed into production. This usually means a separate, dedicated static file server, which is a lot of overhead to mess with when developing locally. Thus, the &lt;code&gt;staticfiles&lt;/code&gt; app ships with a &lt;strong&gt;quick and dirty helper view&lt;/strong&gt; that you can use to serve files locally in development.</source>
          <target state="translated">静的ファイルツールは主に、静的ファイルを本番環境に正常にデプロイするのに役立つように設計されています。これは通常、個別の専用の静的ファイルサーバーを意味します。これは、ローカルで開発する場合に混乱を招く多くのオーバーヘッドです。したがって、 &lt;code&gt;staticfiles&lt;/code&gt; アプリには、開発中にローカルでファイルを提供するために使用できる&lt;strong&gt;迅速でダーティなヘルパービュー&lt;/strong&gt;が付属しています。</target>
        </trans-unit>
        <trans-unit id="a25e531104e722dff8c461ee3f81b419d117e103" translate="yes" xml:space="preserve">
          <source>The staticfiles app</source>
          <target state="translated">staticfiles アプリ</target>
        </trans-unit>
        <trans-unit id="f6dbb8774da05789a335009679c573a34c5db592" translate="yes" xml:space="preserve">
          <source>The statistics can also be retrieved directly by accessing the &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.min&quot;&gt;&lt;code&gt;min&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.max&quot;&gt;&lt;code&gt;max&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.mean&quot;&gt;&lt;code&gt;mean&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.std&quot;&gt;&lt;code&gt;std&lt;/code&gt;&lt;/a&gt; properties.</source>
          <target state="translated">統計は、&lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.min&quot;&gt; &lt;code&gt;min&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.max&quot;&gt; &lt;code&gt;max&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.mean&quot;&gt; &lt;code&gt;mean&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.std&quot;&gt; &lt;code&gt;std&lt;/code&gt; &lt;/a&gt;プロパティにアクセスして直接取得することもできます。</target>
        </trans-unit>
        <trans-unit id="747de47b831a27772126bd5ae7a678d87db52af7" translate="yes" xml:space="preserve">
          <source>The status code for the response. Defaults to &lt;code&gt;200&lt;/code&gt;.</source>
          <target state="translated">応答のステータスコード。デフォルトは &lt;code&gt;200&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a2f3b19c26ed8dfd532ca748a0a10728345260bb" translate="yes" xml:space="preserve">
          <source>The steps in this guide have been tested with Windows 10. In other versions, the steps would be similar. You will need to be familiar with using the Windows command prompt.</source>
          <target state="translated">このガイドの手順は、Windows 10でテストされています。他のバージョンでも手順は同様です。Windowsのコマンドプロンプトの使い方に慣れている必要があります。</target>
        </trans-unit>
        <trans-unit id="0088397db0db666ae508388378a792dcf8d5ba0f" translate="yes" xml:space="preserve">
          <source>The steps in this guide have been tested with Windows 7, 8, and 10. In other versions, the steps would be similar. You will need to be familiar with using the Windows command prompt.</source>
          <target state="translated">このガイドの手順は、Windows 7、8、10でテストされています。他のバージョンでも手順は同様です。Windowsのコマンドプロンプトの使い方に慣れている必要があります。</target>
        </trans-unit>
        <trans-unit id="af80f94c1622d98a6374dfee9bf21cb2568e354b" translate="yes" xml:space="preserve">
          <source>The storage backend automatically replaces the paths found in the saved files matching other saved files with the path of the cached copy (using the &lt;a href=&quot;#django.contrib.staticfiles.storage.StaticFilesStorage.post_process&quot;&gt;&lt;code&gt;post_process()&lt;/code&gt;&lt;/a&gt; method). The regular expressions used to find those paths (&lt;code&gt;django.contrib.staticfiles.storage.HashedFilesMixin.patterns&lt;/code&gt;) by default covers the &lt;a href=&quot;https://www.w3.org/TR/CSS2/cascade.html#at-import&quot;&gt;@import&lt;/a&gt; rule and &lt;a href=&quot;https://www.w3.org/TR/CSS2/syndata.html#uri&quot;&gt;url()&lt;/a&gt; statement of &lt;a href=&quot;https://www.w3.org/Style/CSS/&quot;&gt;Cascading Style Sheets&lt;/a&gt;. For example, the &lt;code&gt;'css/styles.css'&lt;/code&gt; file with the content</source>
          <target state="translated">ストレージバックエンドは、他の保存済みファイルと一致する保存済みファイルで見つかったパスを、キャッシュされたコピーのパスで自動的に置き換えます（&lt;a href=&quot;#django.contrib.staticfiles.storage.StaticFilesStorage.post_process&quot;&gt; &lt;code&gt;post_process()&lt;/code&gt; &lt;/a&gt;メソッドを使用）。これらのパスを見つけるために使用される正規表現（ &lt;code&gt;django.contrib.staticfiles.storage.HashedFilesMixin.patterns&lt;/code&gt; ）は、デフォルトで&lt;a href=&quot;https://www.w3.org/TR/CSS2/cascade.html#at-import&quot;&gt;@import&lt;/a&gt;ルールと&lt;a href=&quot;https://www.w3.org/Style/CSS/&quot;&gt;カスケードスタイルシートの&lt;/a&gt;&lt;a href=&quot;https://www.w3.org/TR/CSS2/syndata.html#uri&quot;&gt;url（）&lt;/a&gt;ステートメントをカバーしています。たとえば、コンテンツを含む &lt;code&gt;'css/styles.css'&lt;/code&gt; ファイル</target>
        </trans-unit>
        <trans-unit id="60d9065af769a80b59202a2967aa7ef73e6aa333" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;'blog_entry.date_updated'&lt;/code&gt; (without the surrounding quotes).</source>
          <target state="translated">文字列 &lt;code&gt;'blog_entry.date_updated'&lt;/code&gt; （前後の引用符なし）。</target>
        </trans-unit>
        <trans-unit id="3296d09e657b722396695063524cf10089799fe9" translate="yes" xml:space="preserve">
          <source>The string domain is &lt;code&gt;django&lt;/code&gt; or &lt;code&gt;djangojs&lt;/code&gt;. This string domain is used to differentiate between different programs that store their data in a common message-file library (usually &lt;code&gt;/usr/share/locale/&lt;/code&gt;). The &lt;code&gt;django&lt;/code&gt; domain is used for Python and template translation strings and is loaded into the global translation catalogs. The &lt;code&gt;djangojs&lt;/code&gt; domain is only used for JavaScript translation catalogs to make sure that those are as small as possible.</source>
          <target state="translated">文字列ドメインは &lt;code&gt;django&lt;/code&gt; または &lt;code&gt;djangojs&lt;/code&gt; です。この文字列ドメインは、共通のメッセージファイルライブラリ（通常は &lt;code&gt;/usr/share/locale/&lt;/code&gt; ）にデータを格納するさまざまなプログラムを区別するために使用されます。 &lt;code&gt;django&lt;/code&gt; ドメインは、Pythonとテンプレート翻訳文字列に使用され、グローバルな翻訳カタログにロードされます。 &lt;code&gt;djangojs&lt;/code&gt; ドメインは、唯一の確実ものはできる限り小さくしていることを確認するために、JavaScriptの翻訳カタログに使用されます。</target>
        </trans-unit>
        <trans-unit id="57a7cc85efc659dfc1730ee676ec740259ffab4c" translate="yes" xml:space="preserve">
          <source>The string returned by &lt;code&gt;reverse()&lt;/code&gt; is already &lt;a href=&quot;unicode#uri-and-iri-handling&quot;&gt;urlquoted&lt;/a&gt;. For example:</source>
          <target state="translated">&lt;code&gt;reverse()&lt;/code&gt; が返す文字列はすでに&lt;a href=&quot;unicode#uri-and-iri-handling&quot;&gt;urlquotedされてい&lt;/a&gt;ます。例えば：</target>
        </trans-unit>
        <trans-unit id="94e40b5fcbc4cb11fb4796da2a9bf8789e509af7" translate="yes" xml:space="preserve">
          <source>The string to use for displaying empty values in the admin site&amp;rsquo;s change list. Defaults to a dash. The value can also be overridden on a per &lt;code&gt;ModelAdmin&lt;/code&gt; basis and on a custom field within a &lt;code&gt;ModelAdmin&lt;/code&gt; by setting an &lt;code&gt;empty_value_display&lt;/code&gt; attribute on the field. See &lt;a href=&quot;#django.contrib.admin.ModelAdmin.empty_value_display&quot;&gt;&lt;code&gt;ModelAdmin.empty_value_display&lt;/code&gt;&lt;/a&gt; for examples.</source>
          <target state="translated">管理サイトの変更リストに空の値を表示するために使用する文字列。デフォルトはダッシュです。フィールドに &lt;code&gt;empty_value_display&lt;/code&gt; 属性を設定することにより、 &lt;code&gt;ModelAdmin&lt;/code&gt; ごと、および &lt;code&gt;ModelAdmin&lt;/code&gt; 内のカスタムフィールドで値をオーバーライドすることもできます。例については、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.empty_value_display&quot;&gt; &lt;code&gt;ModelAdmin.empty_value_display&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="363af1fd2527ecb1e0d5093362e4a1d6ae67e4e6" translate="yes" xml:space="preserve">
          <source>The string value to replace sensitive value with. By default it replaces the values of sensitive variables with stars (&lt;code&gt;**********&lt;/code&gt;).</source>
          <target state="translated">機密値を置き換える文字列値。デフォルトでは、機密変数の値が星（ &lt;code&gt;**********&lt;/code&gt; ）に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="90ef6c770931b884ac66544a723cb07028aea43b" translate="yes" xml:space="preserve">
          <source>The string you return from &lt;code&gt;get_absolute_url()&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; contain only ASCII characters (required by the URI specification, &lt;a href=&quot;https://tools.ietf.org/html/rfc2396.html#section-2&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2396#section-2&lt;/strong&gt;&lt;/a&gt;) and be URL-encoded, if necessary.</source>
          <target state="translated">あなたがから戻った文字列 &lt;code&gt;get_absolute_url()&lt;/code&gt; &lt;strong&gt;なければなりません&lt;/strong&gt; ASCII文字のみが含まれている（URIの仕様により、必要な&lt;a href=&quot;https://tools.ietf.org/html/rfc2396.html#section-2&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2396＃セクション-2 &lt;/strong&gt;&lt;/a&gt;）及び必要に応じて、URLエンコードされたこと。</target>
        </trans-unit>
        <trans-unit id="33c0de55f0449938f6519c8e1864b1e4bb1b0444" translate="yes" xml:space="preserve">
          <source>The strings you pass to &lt;code&gt;_()&lt;/code&gt; or &lt;code&gt;gettext()&lt;/code&gt; can take placeholders, specified with Python&amp;rsquo;s standard named-string interpolation syntax. Example:</source>
          <target state="translated">&lt;code&gt;_()&lt;/code&gt; または &lt;code&gt;gettext()&lt;/code&gt; に渡す文字列は、Pythonの標準の名前付き文字列補間構文で指定されたプレースホルダーを取ることができます。例：</target>
        </trans-unit>
        <trans-unit id="c4b293319b691537487b9bbd102053e5ed42c71f" translate="yes" xml:space="preserve">
          <source>The structure of &lt;code&gt;validator_config&lt;/code&gt; is identical to the structure of &lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt;&lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt;&lt;/a&gt;. The return value of this function can be passed into the &lt;code&gt;password_validators&lt;/code&gt; parameter of the functions listed above.</source>
          <target state="translated">構造 &lt;code&gt;validator_config&lt;/code&gt; はの構造と同じである&lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt; &lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt; &lt;/a&gt;。この関数の戻り値は、上記の関数の &lt;code&gt;password_validators&lt;/code&gt; パラメータに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="b337270ce07f44d8ffc05c9b18480a9066dc5c73" translate="yes" xml:space="preserve">
          <source>The subclasses are all defined as transforms, but they aren&amp;rsquo;t registered with any fields, because the lookup names are already reserved by the &lt;code&gt;Extract&lt;/code&gt; subclasses.</source>
          <target state="translated">サブクラスはすべて変換として定義されていますが、ルックアップ名は &lt;code&gt;Extract&lt;/code&gt; サブクラスによってすでに予約されているため、フィールドには登録されていません。</target>
        </trans-unit>
        <trans-unit id="a0c818242667572561c2f757d7bf6ecd891b50a4" translate="yes" xml:space="preserve">
          <source>The subclasses are all defined as transforms, but they aren&amp;rsquo;t registered with any fields, because the obvious lookup names are already reserved by the &lt;code&gt;Extract&lt;/code&gt; subclasses.</source>
          <target state="translated">サブクラスはすべて変換として定義されていますが、明らかなルックアップ名がすでに &lt;code&gt;Extract&lt;/code&gt; サブクラスによって予約されているため、これらのフィールドはどのフィールドにも登録されていません。</target>
        </trans-unit>
        <trans-unit id="14c5e420f5ca625864309aed3f85309853005af3" translate="yes" xml:space="preserve">
          <source>The suffix to append to the auto-generated candidate template name. Default suffix is &lt;code&gt;_detail&lt;/code&gt;.</source>
          <target state="translated">自動生成された候補テンプレート名に追加するサフィックス。デフォルトのサフィックスは &lt;code&gt;_detail&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a0f1e2de32b68bf30a5bf2bab67a9c0bb7bad82e" translate="yes" xml:space="preserve">
          <source>The suffix to append to the auto-generated candidate template name. Default suffix is &lt;code&gt;_list&lt;/code&gt;.</source>
          <target state="translated">自動生成された候補テンプレート名に追加するサフィックス。デフォルトのサフィックスは &lt;code&gt;_list&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ee3dfc166fa26fee5916d1c5f0def15e1852ec13" translate="yes" xml:space="preserve">
          <source>The support for anonymous users in the permission system allows for a scenario where anonymous users have permissions to do something while inactive authenticated users do not.</source>
          <target state="translated">パーミッションシステムでの匿名ユーザのサポートにより、匿名ユーザが何かをするためのパーミッションを持っているのに対して、非アクティブな認証ユーザはパーミッションを持っていないというシナリオが可能になりました。</target>
        </trans-unit>
        <trans-unit id="83d88239e2a2444a5a10ea7df5a124e18d42aca4" translate="yes" xml:space="preserve">
          <source>The syndication feed framework</source>
          <target state="translated">シンジケーションフィードフレームワーク</target>
        </trans-unit>
        <trans-unit id="eef3f1e313c0f13706c2d073f7a8b1f4ea08e558" translate="yes" xml:space="preserve">
          <source>The syntax for these annotations is identical to that used for the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.aggregate&quot;&gt;&lt;code&gt;aggregate()&lt;/code&gt;&lt;/a&gt; clause. Each argument to &lt;code&gt;annotate()&lt;/code&gt; describes an aggregate that is to be calculated. For example, to annotate books with the number of authors:</source>
          <target state="translated">これらの注釈の構文は、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.aggregate&quot;&gt; &lt;code&gt;aggregate()&lt;/code&gt; &lt;/a&gt;句で使用される構文と同じです。 &lt;code&gt;annotate()&lt;/code&gt; の各引数は、計算される集計を記述します。たとえば、著者に著者の数で注釈を付けるには：</target>
        </trans-unit>
        <trans-unit id="0379bf652cddc975359eaa855da5137eb0b19458" translate="yes" xml:space="preserve">
          <source>The syntax of the Django template language involves four constructs.</source>
          <target state="translated">Django テンプレート言語の構文には 4 つの構文があります。</target>
        </trans-unit>
        <trans-unit id="d4504813048b000910bf4b6bbbe32178d46295d9" translate="yes" xml:space="preserve">
          <source>The system check framework is a set of static checks for validating Django projects. It detects common problems and provides hints for how to fix them. The framework is extensible so you can easily add your own checks.</source>
          <target state="translated">システムチェックフレームワークは、Django プロジェクトを検証するための静的なチェックのセットです。一般的な問題を検出し、それらを修正するためのヒントを提供します。このフレームワークは拡張可能なので、独自のチェックを簡単に追加することができます。</target>
        </trans-unit>
        <trans-unit id="dbc6e6a2dc8b61ce9943917d2fe3c920967c30a1" translate="yes" xml:space="preserve">
          <source>The system check framework performs many different types of checks that are &lt;a href=&quot;checks#system-check-builtin-tags&quot;&gt;categorized with tags&lt;/a&gt;. You can use these tags to restrict the checks performed to just those in a particular category. For example, to perform only models and compatibility checks, run:</source>
          <target state="translated">システムチェックフレームワークは&lt;a href=&quot;checks#system-check-builtin-tags&quot;&gt;、タグで分類された&lt;/a&gt;さまざまな種類のチェックを実行します。これらのタグを使用して、実行されるチェックを特定のカテゴリのチェックのみに制限できます。たとえば、モデルと互換性チェックのみを実行するには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="27b2d92f213b6416484a2f33029cdd7e87f9ba03" translate="yes" xml:space="preserve">
          <source>The system only parses your raw template code once &amp;ndash; when you create the &lt;code&gt;Template&lt;/code&gt; object. From then on, it&amp;rsquo;s stored internally as a tree structure for performance.</source>
          <target state="translated">システムは、 &lt;code&gt;Template&lt;/code&gt; オブジェクトを作成するときに、生のテンプレートコードを1回だけ解析します。それ以降、パフォーマンスのためにツリー構造として内部に保存されます。</target>
        </trans-unit>
        <trans-unit id="05d2bd73761258f70fd689595b2d5c524f939ea3" translate="yes" xml:space="preserve">
          <source>The tag name &lt;code&gt;format_time&lt;/code&gt;.</source>
          <target state="translated">タグ名 &lt;code&gt;format_time&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="87c98cdec407269913a37379692f0119d00836f4" translate="yes" xml:space="preserve">
          <source>The template</source>
          <target state="translated">テンプレート</target>
        </trans-unit>
        <trans-unit id="0603523d939d16f0d9861b7054ab274e11aca8b9" translate="yes" xml:space="preserve">
          <source>The template &lt;code&gt;Context&lt;/code&gt; instance that was used to render the template that produced the response content.</source>
          <target state="translated">応答コンテンツを生成するテンプレートをレンダリングするために使用されたテンプレート &lt;code&gt;Context&lt;/code&gt; インスタンス。</target>
        </trans-unit>
        <trans-unit id="c5d4a2c2f425fe6eafdd8114b0a3e5e8c08d215d" translate="yes" xml:space="preserve">
          <source>The template backend instance from which the exception originated.</source>
          <target state="translated">例外が発生したテンプレート・バックエンドのインスタンス。</target>
        </trans-unit>
        <trans-unit id="3014343ddc6025c0a4c0650fc31e970e927227e8" translate="yes" xml:space="preserve">
          <source>The template backend to use. The built-in template backends are:</source>
          <target state="translated">使用するテンプレートバックエンド。組み込みのテンプレートバックエンドは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d8c1234193ad60193b58d88d9bf278c4853403d8" translate="yes" xml:space="preserve">
          <source>The template context of all class-based generic views include a &lt;code&gt;view&lt;/code&gt; variable that points to the &lt;code&gt;View&lt;/code&gt; instance.</source>
          <target state="translated">すべてのクラスベースの汎用ビューのテンプレートコンテキストには、 &lt;code&gt;View&lt;/code&gt; インスタンスを指す &lt;code&gt;view&lt;/code&gt; 変数が含まれています。</target>
        </trans-unit>
        <trans-unit id="6a33e6f489580319d634f5534876d31401bbc7d5" translate="yes" xml:space="preserve">
          <source>The template layer</source>
          <target state="translated">テンプレートレイヤー</target>
        </trans-unit>
        <trans-unit id="866a68a6ac786e14339c6c9b326e9e8ea777f5ba" translate="yes" xml:space="preserve">
          <source>The template layer provides a designer-friendly syntax for rendering the information to be presented to the user. Learn how this syntax can be used by designers and how it can be extended by programmers:</source>
          <target state="translated">テンプレートレイヤーは、ユーザーに提示する情報をレンダリングするためのデザイナーフレンドリーな構文を提供します。この構文がデザイナーによってどのように使用され、プログラマーによってどのように拡張されるかを学びます。</target>
        </trans-unit>
        <trans-unit id="e4afb1a9f1dbf211d7ed7f39b78242e41ef444ee" translate="yes" xml:space="preserve">
          <source>The template loader first looks for templates in the &lt;code&gt;DIRS&lt;/code&gt; directory. When the views in the &lt;code&gt;blog&lt;/code&gt; app ask for the &lt;code&gt;blog/post.html&lt;/code&gt; and &lt;code&gt;blog/list.html&lt;/code&gt; templates, the loader will return the files you just created.</source>
          <target state="translated">テンプレートローダーは、 &lt;code&gt;DIRS&lt;/code&gt; ディレクトリでテンプレートを探します。 &lt;code&gt;blog&lt;/code&gt; アプリのビューが &lt;code&gt;blog/post.html&lt;/code&gt; および &lt;code&gt;blog/list.html&lt;/code&gt; テンプレートを要求すると、ローダーは先ほど作成したファイルを返します。</target>
        </trans-unit>
        <trans-unit id="b49efe4f225fa59e53712110a0c7d2fcfa42ae5e" translate="yes" xml:space="preserve">
          <source>The template loader instance that constructed this &lt;code&gt;Origin&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Origin&lt;/code&gt; を構築したテンプレートローダーインスタンス。</target>
        </trans-unit>
        <trans-unit id="8ab85789d5407187c79a6cdea2e002debd13c9b5" translate="yes" xml:space="preserve">
          <source>The template name can either be a variable or a hard-coded (quoted) string, in either single or double quotes.</source>
          <target state="translated">テンプレート名は、変数かハードコードされた(引用符で囲まれた)文字列のいずれかで、シングルクォーテーションまたはダブルクォーテーションで指定します。</target>
        </trans-unit>
        <trans-unit id="47cdeb58172a5e7ca0b659b161b10c7311608a05" translate="yes" xml:space="preserve">
          <source>The template replaces just the &lt;code&gt;branding&lt;/code&gt; block, adding a custom logo, and using &lt;code&gt;block.super&lt;/code&gt; to retain the prior content.</source>
          <target state="translated">テンプレートは、 &lt;code&gt;branding&lt;/code&gt; ブロックのみを置き換え、カスタムロゴを追加し、 &lt;code&gt;block.super&lt;/code&gt; を使用して前のコンテンツを保持します。</target>
        </trans-unit>
        <trans-unit id="7d48a9ba0de096c9bfb6c7ce9ffbcbd438b4007d" translate="yes" xml:space="preserve">
          <source>The template system isn&amp;rsquo;t safe against untrusted template authors. For example, a site shouldn&amp;rsquo;t allow its users to provide their own templates, since template authors can do things like perform XSS attacks and access properties of template variables that may contain sensitive information.</source>
          <target state="translated">テンプレートシステムは、信頼できないテンプレート作成者に対して安全ではありません。たとえば、テンプレートの作成者はXSS攻撃を実行したり、機密情報が含まれている可能性のあるテンプレート変数のプロパティにアクセスしたりできるため、サイトではユーザーが独自のテンプレートを提供できないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="c98260d6327d8f1120b0c56511538089fbbdf965" translate="yes" xml:space="preserve">
          <source>The template system uses dot-lookup syntax to access variable attributes. In the example of &lt;code&gt;{{ question.question_text }}&lt;/code&gt;, first Django does a dictionary lookup on the object &lt;code&gt;question&lt;/code&gt;. Failing that, it tries an attribute lookup &amp;ndash; which works, in this case. If attribute lookup had failed, it would&amp;rsquo;ve tried a list-index lookup.</source>
          <target state="translated">テンプレートシステムは、ドットルックアップ構文を使用して変数属性にアクセスします。 &lt;code&gt;{{ question.question_text }}&lt;/code&gt; の例では、最初にDjangoがオブジェクトの &lt;code&gt;question&lt;/code&gt; 辞書検索を行います。それが失敗した場合は、属性の検索を試みます-この場合は機能します。属性の検索が失敗した場合は、リストインデックスの検索を試みました。</target>
        </trans-unit>
        <trans-unit id="420014ab3ce944164753199bf59a7e1a4231c32e" translate="yes" xml:space="preserve">
          <source>The template system uses the first lookup type that works. It&amp;rsquo;s short-circuit logic. Here are a few examples:</source>
          <target state="translated">テンプレートシステムは、機能する最初の検索タイプを使用します。それは短絡論理です。以下にいくつかの例を示します。</target>
        </trans-unit>
        <trans-unit id="2435df0bf5cbd2d824542395abc83aab528b3f74" translate="yes" xml:space="preserve">
          <source>The template system works in a two-step process: compiling and rendering. To define a custom template tag, you specify how the compilation works and how the rendering works.</source>
          <target state="translated">テンプレートシステムは、コンパイルとレンダリングの2段階のプロセスで動作します。カスタムテンプレートタグを定義するには、コンパイルとレンダリングの方法を指定します。</target>
        </trans-unit>
        <trans-unit id="da5ff6194094201794368aba3429c037c65e91d2" translate="yes" xml:space="preserve">
          <source>The template tag will output the string &lt;code&gt;/clients/client/123/&lt;/code&gt;.</source>
          <target state="translated">テンプレートタグは文字列 &lt;code&gt;/clients/client/123/&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="d2f72233c038aef222f7387c49d03e80d4b892b3" translate="yes" xml:space="preserve">
          <source>The template to customize is &lt;code&gt;admin/index.html&lt;/code&gt;. (Do the same as with &lt;code&gt;admin/base_site.html&lt;/code&gt; in the previous section &amp;ndash; copy it from the default directory to your custom template directory). Edit the file, and you&amp;rsquo;ll see it uses a template variable called &lt;code&gt;app_list&lt;/code&gt;. That variable contains every installed Django app. Instead of using that, you can hard-code links to object-specific admin pages in whatever way you think is best.</source>
          <target state="translated">カスタマイズするテンプレートは &lt;code&gt;admin/index.html&lt;/code&gt; です。（前のセクションの &lt;code&gt;admin/base_site.html&lt;/code&gt; と同じことを行います&amp;ndash;デフォルトのディレクトリからカスタムテンプレートディレクトリにコピーします）。ファイルを編集すると、 &lt;code&gt;app_list&lt;/code&gt; というテンプレート変数が使用されていることがわかります。その変数には、インストールされているすべてのDjangoアプリが含まれています。これを使用する代わりに、オブジェクト固有の管理ページへのリンクを、あなたが最善だと思う方法でハードコードすることができます。</target>
        </trans-unit>
        <trans-unit id="59513e3f745db68379079c908f6ea78957e13876" translate="yes" xml:space="preserve">
          <source>The template used to render the inline on the page.</source>
          <target state="translated">ページのインラインをレンダリングするために使用されるテンプレートです。</target>
        </trans-unit>
        <trans-unit id="c30e31e258f8031120b13df3b1446595293a79cf" translate="yes" xml:space="preserve">
          <source>The template used to render the map widget.</source>
          <target state="translated">マップ ウィジェットのレンダリングに使用されるテンプレート。</target>
        </trans-unit>
        <trans-unit id="dd2a16b1e5704d7f6d1d57161727756f051bdd76" translate="yes" xml:space="preserve">
          <source>The term &lt;strong&gt;application&lt;/strong&gt; describes a Python package that provides some set of features. Applications &lt;a href=&quot;../intro/reusable-apps&quot;&gt;may be reused&lt;/a&gt; in various projects.</source>
          <target state="translated">&lt;strong&gt;アプリケーション&lt;/strong&gt;という用語は、いくつかの機能セットを提供するPythonパッケージを表します。アプリケーション&lt;a href=&quot;../intro/reusable-apps&quot;&gt;は&lt;/a&gt;、さまざまなプロジェクトで再利用できます。</target>
        </trans-unit>
        <trans-unit id="41f52e128f63852524fd0e93b7b85919a73346cf" translate="yes" xml:space="preserve">
          <source>The term &lt;strong&gt;project&lt;/strong&gt; describes a Django web application. The project Python package is defined primarily by a settings module, but it usually contains other things. For example, when you run &lt;code&gt;django-admin startproject mysite&lt;/code&gt; you&amp;rsquo;ll get a &lt;code&gt;mysite&lt;/code&gt; project directory that contains a &lt;code&gt;mysite&lt;/code&gt; Python package with &lt;code&gt;settings.py&lt;/code&gt;, &lt;code&gt;urls.py&lt;/code&gt;, &lt;code&gt;asgi.py&lt;/code&gt; and &lt;code&gt;wsgi.py&lt;/code&gt;. The project package is often extended to include things like fixtures, CSS, and templates which aren&amp;rsquo;t tied to a particular application.</source>
          <target state="translated">&lt;strong&gt;プロジェクト&lt;/strong&gt;という用語は、Django Webアプリケーションを表します。プロジェクトPythonパッケージは主に設定モジュールによって定義されますが、通常は他のものが含まれています。たとえば、 &lt;code&gt;django-admin startproject mysite&lt;/code&gt; を実行すると、 &lt;code&gt;settings.py&lt;/code&gt; 、 &lt;code&gt;urls.py&lt;/code&gt; 、 &lt;code&gt;asgi.py&lt;/code&gt; 、 &lt;code&gt;wsgi.py&lt;/code&gt; を含む &lt;code&gt;mysite&lt;/code&gt; Pythonパッケージを含む &lt;code&gt;mysite&lt;/code&gt; プロジェクトディレクトリが取得されます。多くの場合、プロジェクトパッケージは、特定のアプリケーションに関連付けられていないフィクスチャ、CSS、テンプレートなどを含むように拡張されます。</target>
        </trans-unit>
        <trans-unit id="81e046bdc21e5b84f8c7331c494a17bd41fbed61" translate="yes" xml:space="preserve">
          <source>The test client</source>
          <target state="translated">テストクライアント</target>
        </trans-unit>
        <trans-unit id="e3b979f527b2b425b72a8eb0a4e95a3075f24a90" translate="yes" xml:space="preserve">
          <source>The test client does &lt;em&gt;not&lt;/em&gt; require the Web server to be running. In fact, it will run just fine with no Web server running at all! That&amp;rsquo;s because it avoids the overhead of HTTP and deals directly with the Django framework. This helps make the unit tests run quickly.</source>
          <target state="translated">テストクライアントでは、Webサーバーが実行されている必要はありませ&lt;em&gt;ん&lt;/em&gt;。実際、Webサーバーがまったく実行されていなくても問題なく実行されます。これは、HTTPのオーバーヘッドを回避し、Djangoフレームワークを直接処理するためです。これにより、単体テストをすばやく実行できます。</target>
        </trans-unit>
        <trans-unit id="7edfa2238cd385f19f4cdbaedc7031b5044917de" translate="yes" xml:space="preserve">
          <source>The test client is a Python class that acts as a dummy Web browser, allowing you to test your views and interact with your Django-powered application programmatically.</source>
          <target state="translated">テストクライアントはダミーの Web ブラウザとして動作する Python クラスで、ビューをテストしたり、Django で動くアプリケーションとプログラムで対話したりすることができます。</target>
        </trans-unit>
        <trans-unit id="260f5d26017a499091b3f05fda847c924083d35c" translate="yes" xml:space="preserve">
          <source>The test client is not capable of retrieving Web pages that are not powered by your Django project. If you need to retrieve other Web pages, use a Python standard library module such as &lt;a href=&quot;https://docs.python.org/3/library/urllib.html#module-urllib&quot;&gt;&lt;code&gt;urllib&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テストクライアントは、Djangoプロジェクトを利用していないWebページを取得できません。他のWebページを取得する必要がある場合は、&lt;a href=&quot;https://docs.python.org/3/library/urllib.html#module-urllib&quot;&gt; &lt;code&gt;urllib&lt;/code&gt; &lt;/a&gt;などのPython標準ライブラリモジュールを使用してください。</target>
        </trans-unit>
        <trans-unit id="be2d8fcf9f14d12f773d1f8dc3cc233c87658ea6" translate="yes" xml:space="preserve">
          <source>The test client is stateful. If a response returns a cookie, then that cookie will be stored in the test client and sent with all subsequent &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;post()&lt;/code&gt; requests.</source>
          <target state="translated">テストクライアントはステートフルです。応答がCookieを返す場合、そのCookieはテストクライアントに保存され、後続のすべての &lt;code&gt;get()&lt;/code&gt; および &lt;code&gt;post()&lt;/code&gt; 要求とともに送信されます。</target>
        </trans-unit>
        <trans-unit id="42c2425e0b5925babc301314d02604b18e55e326" translate="yes" xml:space="preserve">
          <source>The test client that was used to make the request that resulted in the response.</source>
          <target state="translated">レスポンスが得られるリクエストを行うために使用されたテストクライアント。</target>
        </trans-unit>
        <trans-unit id="ae899e0841724c832514fc8f24d72956660cf1e8" translate="yes" xml:space="preserve">
          <source>The test database</source>
          <target state="translated">テストデータベース</target>
        </trans-unit>
        <trans-unit id="3a54f357ce1f20e1a383aa24fbd2fb3ab89dab80" translate="yes" xml:space="preserve">
          <source>The test informs us which test failed and even the line on which the failure occurred.</source>
          <target state="translated">どのテストで失敗したのか、失敗したラインまで教えてくれます。</target>
        </trans-unit>
        <trans-unit id="c97f852e959a0c3a42d10d8016db6b34eab8249f" translate="yes" xml:space="preserve">
          <source>The test runner accomplishes this by transparently replacing the normal email backend with a testing backend. (Don&amp;rsquo;t worry &amp;ndash; this has no effect on any other email senders outside of Django, such as your machine&amp;rsquo;s mail server, if you&amp;rsquo;re running one.)</source>
          <target state="translated">テストランナーは、通常のメールバックエンドをテストバックエンドに透過的に置き換えることでこれを実現します。（心配しないでください。マシンのメールサーバーなど、Djangoの外部にある他の電子メール送信者には影響しません。）</target>
        </trans-unit>
        <trans-unit id="5f4b3bdb73e61dea1dcf6f8ac003ea00f5d817cd" translate="yes" xml:space="preserve">
          <source>The text label for each field &amp;ndash; e.g. &lt;code&gt;'Subject:'&lt;/code&gt;, &lt;code&gt;'Message:'&lt;/code&gt; and &lt;code&gt;'Cc myself:'&lt;/code&gt; is generated from the field name by converting all underscores to spaces and upper-casing the first letter. Again, note these are merely sensible defaults; you can also specify labels manually.</source>
          <target state="translated">各フィールドのテキストラベル-たとえば、 &lt;code&gt;'Subject:'&lt;/code&gt; 、 &lt;code&gt;'Message:'&lt;/code&gt; 、 &lt;code&gt;'Cc myself:'&lt;/code&gt; は、すべての下線をスペースに変換し、最初の文字を大文字にすることによってフィールド名から生成されます。繰り返しますが、これらは単に適切なデフォルトであることに注意してください。ラベルを手動で指定することもできます。</target>
        </trans-unit>
        <trans-unit id="3e151bae08e477066ce46b1c509c1cdb097aeac8" translate="yes" xml:space="preserve">
          <source>The text to put at the end of each admin page&amp;rsquo;s &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; (a string). By default, this is &amp;ldquo;Django site admin&amp;rdquo;.</source>
          <target state="translated">各管理ページの &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; の最後に置くテキスト（文字列）。デフォルトでは、これは「Djangoサイト管理者」です。</target>
        </trans-unit>
        <trans-unit id="d87188fdf43052a4b4c59e2e840bff83afd8910d" translate="yes" xml:space="preserve">
          <source>The text to put at the top of each admin page, as an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; (a string). By default, this is &amp;ldquo;Django administration&amp;rdquo;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; （文字列）として各管理ページの上部に配置するテキスト。デフォルトでは、これは「Django管理」です。</target>
        </trans-unit>
        <trans-unit id="21f2d45cfc405073ae61fbf1f41314d2aed2b577" translate="yes" xml:space="preserve">
          <source>The text to put at the top of the admin index page (a string). By default, this is &amp;ldquo;Site administration&amp;rdquo;.</source>
          <target state="translated">管理インデックスページの上部に配置するテキスト（文字列）。デフォルトでは、これは「サイト管理」です。</target>
        </trans-unit>
        <trans-unit id="887b9e6b01f4daa315577f659e9db8c8d14d226e" translate="yes" xml:space="preserve">
          <source>The textual representation of the modified object&amp;rsquo;s primary key.</source>
          <target state="translated">変更されたオブジェクトの主キーのテキスト表現。</target>
        </trans-unit>
        <trans-unit id="f177d17d1e1992fb5f13c75889ee51fde2e42340" translate="yes" xml:space="preserve">
          <source>The toolkit of base classes and mixins that Django uses to build class-based generic views are built for maximum flexibility, and as such have many hooks in the form of default method implementations and attributes that you are unlikely to be concerned with in the simplest use cases. For example, instead of limiting you to a class-based attribute for &lt;code&gt;form_class&lt;/code&gt;, the implementation uses a &lt;code&gt;get_form&lt;/code&gt; method, which calls a &lt;code&gt;get_form_class&lt;/code&gt; method, which in its default implementation returns the &lt;code&gt;form_class&lt;/code&gt; attribute of the class. This gives you several options for specifying what form to use, from an attribute, to a fully dynamic, callable hook. These options seem to add hollow complexity for simple situations, but without them, more advanced designs would be limited.</source>
          <target state="translated">Djangoがクラスベースの汎用ビューを構築するために使用する基本クラスとミックスインのツールキットは、最大限の柔軟性を実現するように構築されているため、デフォルトのメソッド実装と属性の形で多くのフックがあり、最も簡単な使用では気にしないでしょう。ケース。たとえば、 &lt;code&gt;form_class&lt;/code&gt; のクラスベースの属性に制限する代わりに、実装は &lt;code&gt;get_form&lt;/code&gt; メソッドを使用します。このメソッドは、デフォルトの実装で &lt;code&gt;form_class&lt;/code&gt; を返す &lt;code&gt;get_form_class&lt;/code&gt; メソッドを呼び出します。クラスの属性。これにより、属性から完全に動的な呼び出し可能なフックまで、使用するフォームを指定するためのいくつかのオプションが提供されます。これらのオプションは、単純な状況では中空の複雑さを追加するように見えますが、これらがないと、より高度な設計が制限されます。</target>
        </trans-unit>
        <trans-unit id="481ac5714230893da2f1bf5f0ce185f96d0ee8b5" translate="yes" xml:space="preserve">
          <source>The topic guide on &lt;a href=&quot;queries&quot;&gt;Django&amp;rsquo;s database-abstraction API&lt;/a&gt; described the way that you can use Django queries that create, retrieve, update and delete individual objects. However, sometimes you will need to retrieve values that are derived by summarizing or &lt;em&gt;aggregating&lt;/em&gt; a collection of objects. This topic guide describes the ways that aggregate values can be generated and returned using Django queries.</source>
          <target state="translated">&lt;a href=&quot;queries&quot;&gt;Djangoのデータベース抽象化API&lt;/a&gt;に関するトピックガイドでは、個々のオブジェクトを作成、取得、更新、削除するDjangoクエリを使用する方法について説明しました。ただし、場合によっては、オブジェクトのコレクションを要約または&lt;em&gt;集約&lt;/em&gt;することによって派生した値を取得する必要があります。このトピックガイドでは、Djangoクエリを使用して集計値を生成および返す方法について説明します。</target>
        </trans-unit>
        <trans-unit id="4c4fea87a0bc41c145e253afd7a395f84ed6d233" translate="yes" xml:space="preserve">
          <source>The total number of objects, across all pages.</source>
          <target state="translated">全ページにわたるオブジェクトの総数。</target>
        </trans-unit>
        <trans-unit id="e3e632ef0caaea6df46cd9a9b8d8297678f1e789" translate="yes" xml:space="preserve">
          <source>The total number of pages.</source>
          <target state="translated">総ページ数です。</target>
        </trans-unit>
        <trans-unit id="5e21ac84038dc47b937cfac50696ff70df886f49" translate="yes" xml:space="preserve">
          <source>The total number of pixels in this band. Is equal to &lt;code&gt;width * height&lt;/code&gt;.</source>
          <target state="translated">このバンドのピクセルの総数。 &lt;code&gt;width * height&lt;/code&gt; 等しい。</target>
        </trans-unit>
        <trans-unit id="cc487e6952abd1f9be3b8fa57f1b6b5c1d35cf6c" translate="yes" xml:space="preserve">
          <source>The tracebacks are present on the &lt;code&gt;__traceback__&lt;/code&gt; attribute of the errors returned when calling &lt;code&gt;send_robust()&lt;/code&gt;.</source>
          <target state="translated">トレースバックは、 &lt;code&gt;send_robust()&lt;/code&gt; を呼び出したときに返されるエラーの &lt;code&gt;__traceback__&lt;/code&gt; 属性に存在します。</target>
        </trans-unit>
        <trans-unit id="afdc746ca47557d9d1aee4cd7a9b607f845bcbc6" translate="yes" xml:space="preserve">
          <source>The translation catalogs for JavaScript should be kept as small as possible.</source>
          <target state="translated">JavaScriptの翻訳カタログはできるだけ小さくしておきましょう。</target>
        </trans-unit>
        <trans-unit id="239e37f00ec5c27960e75b0c84e61e77f59702f7" translate="yes" xml:space="preserve">
          <source>The translations for literals included in JavaScript assets are looked up following a similar but not identical algorithm. See &lt;a href=&quot;#django.views.i18n.JavaScriptCatalog&quot;&gt;&lt;code&gt;JavaScriptCatalog&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">JavaScriptアセットに含まれるリテラルの翻訳は、類似しているが同一ではないアルゴリズムに従って検索されます。詳細については、&lt;a href=&quot;#django.views.i18n.JavaScriptCatalog&quot;&gt; &lt;code&gt;JavaScriptCatalog&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2b48628da99c1ae1a0f62aeeab25a2f413dc0d4b" translate="yes" xml:space="preserve">
          <source>The tricky thing here is that there&amp;rsquo;s really no such thing as a &amp;ldquo;page load,&amp;rdquo; especially in modern Web apps that generate HTML dynamically after the server generates the initial document. So, checking for the presence of &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; in the response might not necessarily be appropriate for all use cases. Please refer to the &lt;a href=&quot;https://web.archive.org/web/20160129132110/http://code.google.com/p/selenium/wiki/FrequentlyAskedQuestions#Q:_WebDriver_fails_to_find_elements_/_Does_not_block_on_page_loa&quot;&gt;Selenium FAQ&lt;/a&gt; and &lt;a href=&quot;https://www.selenium.dev/documentation/en/webdriver/waits/#explicit-wait&quot;&gt;Selenium documentation&lt;/a&gt; for more information.</source>
          <target state="translated">ここで注意が必要なのは、特にサーバーが最初のドキュメントを生成した後にHTMLを動的に生成する最新のWebアプリでは、「ページの読み込み」などが実際にはないことです。したがって、応答に &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; が存在するかどうかを確認することは、必ずしもすべてのユースケースに適しているとは限りません。詳細については、&lt;a href=&quot;https://web.archive.org/web/20160129132110/http://code.google.com/p/selenium/wiki/FrequentlyAskedQuestions#Q:_WebDriver_fails_to_find_elements_/_Does_not_block_on_page_loa&quot;&gt;SeleniumFAQ&lt;/a&gt;および&lt;a href=&quot;https://www.selenium.dev/documentation/en/webdriver/waits/#explicit-wait&quot;&gt;Seleniumのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d822fc1471c8616621bbd3b05485664a68d6a953" translate="yes" xml:space="preserve">
          <source>The tricky thing here is that there&amp;rsquo;s really no such thing as a &amp;ldquo;page load,&amp;rdquo; especially in modern Web apps that generate HTML dynamically after the server generates the initial document. So, checking for the presence of &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; in the response might not necessarily be appropriate for all use cases. Please refer to the &lt;a href=&quot;https://web.archive.org/web/20160129132110/http://code.google.com/p/selenium/wiki/FrequentlyAskedQuestions#Q:_WebDriver_fails_to_find_elements_/_Does_not_block_on_page_loa&quot;&gt;Selenium FAQ&lt;/a&gt; and &lt;a href=&quot;https://www.seleniumhq.org/docs/04_webdriver_advanced.html#explicit-waits&quot;&gt;Selenium documentation&lt;/a&gt; for more information.</source>
          <target state="translated">ここでトリッキーなのは、特にサーバーが初期ドキュメントを生成した後に動的にHTMLを生成する最新のWebアプリでは、「ページの読み込み」などは実際にはないということです。したがって、応答に &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; が存在するかどうかを確認することは、必ずしもすべてのユースケースに適しているとは限りません。詳細については、&lt;a href=&quot;https://web.archive.org/web/20160129132110/http://code.google.com/p/selenium/wiki/FrequentlyAskedQuestions#Q:_WebDriver_fails_to_find_elements_/_Does_not_block_on_page_loa&quot;&gt;Selenium FAQ&lt;/a&gt;および&lt;a href=&quot;https://www.seleniumhq.org/docs/04_webdriver_advanced.html#explicit-waits&quot;&gt;Seleniumのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7f90beec2a7d95089997ab3cb32ad5b86a4aa5f2" translate="yes" xml:space="preserve">
          <source>The tutorial project has just one app, &lt;code&gt;polls&lt;/code&gt;. In real Django projects, there might be five, ten, twenty apps or more. How does Django differentiate the URL names between them? For example, the &lt;code&gt;polls&lt;/code&gt; app has a &lt;code&gt;detail&lt;/code&gt; view, and so might an app on the same project that is for a blog. How does one make it so that Django knows which app view to create for a url when using the &lt;code&gt;{% url %}&lt;/code&gt; template tag?</source>
          <target state="translated">チュートリアルプロジェクトには、1つのアプリ &lt;code&gt;polls&lt;/code&gt; しかありません。実際のDjangoプロジェクトでは、5、10、20以上のアプリが存在する可能性があります。Djangoはそれらの間でどのようにURL名を区別しますか？たとえば、 &lt;code&gt;polls&lt;/code&gt; アプリには &lt;code&gt;detail&lt;/code&gt; ビューがあるので、ブログ用の同じプロジェクトのアプリがあるかもしれません。 &lt;code&gt;{% url %}&lt;/code&gt; テンプレートタグを使用するときに、DjangoがURLに対して作成するアプリビューを認識できるようにするにはどうすればよいですか？</target>
        </trans-unit>
        <trans-unit id="58d7d2fc32c675eb57959cccbf0d46f6386fd5e2" translate="yes" xml:space="preserve">
          <source>The two SQL statements are functionally equivalent but the more explicit &lt;code&gt;FILTER&lt;/code&gt; may perform better.</source>
          <target state="translated">2つのSQLステートメントは機能的に同等ですが、より明示的な &lt;code&gt;FILTER&lt;/code&gt; の方がパフォーマンスが向上する場合があります。</target>
        </trans-unit>
        <trans-unit id="674a863c89f1969cb1f6b9aa463bab50cb15db53" translate="yes" xml:space="preserve">
          <source>The two following generic class-based views are designed to display data. On many projects they are typically the most commonly used views.</source>
          <target state="translated">以下の 2 つの一般的なクラスベースのビューは、データを表示するために設計されています。多くのプロジェクトでは、これらのビューが一般的に最もよく使われています。</target>
        </trans-unit>
        <trans-unit id="b863eb1cd06b7e0eda33ebca4adf007c3ddcb435" translate="yes" xml:space="preserve">
          <source>The two functions, to compute the ETag and the last modified time, will be passed the incoming &lt;code&gt;request&lt;/code&gt; object and the same parameters, in the same order, as the view function they are helping to wrap. The function passed &lt;code&gt;last_modified_func&lt;/code&gt; should return a standard datetime value specifying the last time the resource was modified, or &lt;code&gt;None&lt;/code&gt; if the resource doesn&amp;rsquo;t exist. The function passed to the &lt;code&gt;etag&lt;/code&gt; decorator should return a string representing the &lt;a href=&quot;https://tools.ietf.org/html/rfc7232#section-2.3&quot;&gt;ETag&lt;/a&gt; for the resource, or &lt;code&gt;None&lt;/code&gt; if it doesn&amp;rsquo;t exist.</source>
          <target state="translated">ETagと最終変更時間を計算する2つの関数には、ラップするのに役立つビュー関数として、受信 &lt;code&gt;request&lt;/code&gt; オブジェクトと同じパラメーターが同じ順序で渡されます。 &lt;code&gt;last_modified_func&lt;/code&gt; に渡された関数は、リソースが最後に変更された時刻を指定する標準の日時値を返すか、リソースが存在しない場合は &lt;code&gt;None&lt;/code&gt; を返します。 &lt;code&gt;etag&lt;/code&gt; デコレータに渡される関数は、リソースの&lt;a href=&quot;https://tools.ietf.org/html/rfc7232#section-2.3&quot;&gt;ETag&lt;/a&gt;を表す文字列を返すか、存在しない場合は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="dc39b0594e7a35bb326c7f9d74277e40e3701521" translate="yes" xml:space="preserve">
          <source>The two-tuples are in the format &lt;code&gt;(name, field_options)&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is a string representing the title of the fieldset and &lt;code&gt;field_options&lt;/code&gt; is a dictionary of information about the fieldset, including a list of fields to be displayed in it.</source>
          <target state="translated">2つ組は、形式である &lt;code&gt;(name, field_options)&lt;/code&gt; 、 &lt;code&gt;name&lt;/code&gt; フィールドセットのタイトルを表す文字列である &lt;code&gt;field_options&lt;/code&gt; がその中に表示されるフィールドのリストを含むフィールドセットに関する情報の辞書です。</target>
        </trans-unit>
        <trans-unit id="23a7b566b24b2453b30ea223bd752e68d45709d6" translate="yes" xml:space="preserve">
          <source>The type of action logged: &lt;code&gt;ADDITION&lt;/code&gt;, &lt;code&gt;CHANGE&lt;/code&gt;, &lt;code&gt;DELETION&lt;/code&gt;.</source>
          <target state="translated">ログに記録されたアクションのタイプ： &lt;code&gt;ADDITION&lt;/code&gt; 、 &lt;code&gt;CHANGE&lt;/code&gt; 、 &lt;code&gt;DELETION&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4095ba777cd566193c49b37bf9444d663c178942" translate="yes" xml:space="preserve">
          <source>The type of filter displayed depends on the type of field you&amp;rsquo;re filtering on. Because &lt;code&gt;pub_date&lt;/code&gt; is a &lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;, Django knows to give appropriate filter options: &amp;ldquo;Any date&amp;rdquo;, &amp;ldquo;Today&amp;rdquo;, &amp;ldquo;Past 7 days&amp;rdquo;, &amp;ldquo;This month&amp;rdquo;, &amp;ldquo;This year&amp;rdquo;.</source>
          <target state="translated">表示されるフィルターのタイプは、フィルタリングするフィールドのタイプによって異なります。 &lt;code&gt;pub_date&lt;/code&gt; は&lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt;であるため、Django は「任意の日付」、「今日」、「過去7日間」、「今月」、「今年」などの適切なフィルターオプションを提供します。</target>
        </trans-unit>
        <trans-unit id="b8cbbb3eb69fad73343b1cf903d7db0fb0d52de0" translate="yes" xml:space="preserve">
          <source>The type of raster support is listed for all lookups in the &lt;a href=&quot;#spatial-lookup-compatibility&quot;&gt;compatibility table&lt;/a&gt;. Lookups involving rasters are currently only available for the PostGIS backend.</source>
          <target state="translated">ラスタサポートのタイプは、&lt;a href=&quot;#spatial-lookup-compatibility&quot;&gt;互換性テーブルの&lt;/a&gt;すべてのルックアップにリストされています。ラスタを含むルックアップは現在、PostGISバックエンドでのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="e669aa32f58e6dad279fd73bb0ded65171dc36f8" translate="yes" xml:space="preserve">
          <source>The uWSGI docs offer a &lt;a href=&quot;https://uwsgi.readthedocs.io/en/latest/tutorials/Django_and_nginx.html&quot;&gt;tutorial&lt;/a&gt; covering Django, nginx, and uWSGI (one possible deployment setup of many). The docs below are focused on how to integrate Django with uWSGI.</source>
          <target state="translated">uWSGIドキュメントは、Django、nginx、およびuWSGI（多数の1つの可能なデプロイメント設定）をカバーする&lt;a href=&quot;https://uwsgi.readthedocs.io/en/latest/tutorials/Django_and_nginx.html&quot;&gt;チュートリアル&lt;/a&gt;を提供します。以下のドキュメントは、DjangoをuWSGIと統合する方法に焦点を当てています。</target>
        </trans-unit>
        <trans-unit id="675f9e8c48e417fc0bb62998fd4589a3c32ca0ea" translate="yes" xml:space="preserve">
          <source>The uWSGI wiki describes several &lt;a href=&quot;https://uwsgi-docs.readthedocs.io/en/latest/Install.html&quot;&gt;installation procedures&lt;/a&gt;. Using pip, the Python package manager, you can install any uWSGI version with a single command. For example:</source>
          <target state="translated">uWSGI wikiには、いくつかの&lt;a href=&quot;https://uwsgi-docs.readthedocs.io/en/latest/Install.html&quot;&gt;インストール手順が&lt;/a&gt;記載されています。Pythonパッケージマネージャーであるpipを使用すると、単一のコマンドで任意のuWSGIバージョンをインストールできます。例えば：</target>
        </trans-unit>
        <trans-unit id="de2f854319ec9170ef19d843cc3c65d72047a46c" translate="yes" xml:space="preserve">
          <source>The underlying &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt; that this class wraps.</source>
          <target state="translated">このクラスがラップする基になる&lt;a href=&quot;https://docs.python.org/3/glossary.html#term-file-object&quot;&gt;ファイルオブジェクト&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e73d577a9e8c04eba9424f78c1e81e0a00a03ffe" translate="yes" xml:space="preserve">
          <source>The underscore character (&lt;code&gt;_&lt;/code&gt;) is used to represent &amp;ldquo;the previous result&amp;rdquo; in Python&amp;rsquo;s interactive shell and doctest tests. Installing a global &lt;code&gt;_()&lt;/code&gt; function causes interference. Explicitly importing &lt;code&gt;gettext()&lt;/code&gt; as &lt;code&gt;_()&lt;/code&gt; avoids this problem.</source>
          <target state="translated">下線文字（ &lt;code&gt;_&lt;/code&gt; ）は、Pythonの対話型シェルおよびdoctestテストで「前の結果」を表すために使用されます。グローバル &lt;code&gt;_()&lt;/code&gt; 関数をインストールすると、干渉が発生します。 &lt;code&gt;gettext()&lt;/code&gt; を &lt;code&gt;_()&lt;/code&gt; （）として明示的にインポートすると、この問題を回避できます。</target>
        </trans-unit>
        <trans-unit id="a0ca3ca8a5c6b9ee1dc5cb25a0cb53dd8fcb741f" translate="yes" xml:space="preserve">
          <source>The undocumented &lt;code&gt;version&lt;/code&gt; parameter was removed.</source>
          <target state="translated">文書化されていない &lt;code&gt;version&lt;/code&gt; パラメータが削除されました。</target>
        </trans-unit>
        <trans-unit id="c4c88b795ccf4b5b6da5f19eb483255d93a00694" translate="yes" xml:space="preserve">
          <source>The unittest library provides the &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.skipIf&quot;&gt;&lt;code&gt;@skipIf&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.skipUnless&quot;&gt;&lt;code&gt;@skipUnless&lt;/code&gt;&lt;/a&gt; decorators to allow you to skip tests if you know ahead of time that those tests are going to fail under certain conditions.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.skipIf&quot;&gt; &lt;code&gt;@skipIf&lt;/code&gt; &lt;/a&gt;ライブラリには@skipIfおよび&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.skipUnless&quot;&gt; &lt;code&gt;@skipUnless&lt;/code&gt; &lt;/a&gt;デコレーターがあり、特定の条件下でテストが失敗することが事前にわかっている場合は、テストをスキップできます。</target>
        </trans-unit>
        <trans-unit id="274bc5c1adbaedf49290dd1ff8edc4f885dbb54d" translate="yes" xml:space="preserve">
          <source>The uploaded file&amp;rsquo;s relative URL can be obtained using the &lt;a href=&quot;#django.db.models.fields.files.FieldFile.url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; attribute. Internally, this calls the &lt;a href=&quot;../files/storage#django.core.files.storage.Storage.url&quot;&gt;&lt;code&gt;url()&lt;/code&gt;&lt;/a&gt; method of the underlying &lt;a href=&quot;../files/storage#django.core.files.storage.Storage&quot;&gt;&lt;code&gt;Storage&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">アップロードされたファイルの相対URLは、&lt;a href=&quot;#django.db.models.fields.files.FieldFile.url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt;属性を使用して取得できます。内部的には、これは基礎となる&lt;a href=&quot;../files/storage#django.core.files.storage.Storage&quot;&gt; &lt;code&gt;Storage&lt;/code&gt; &lt;/a&gt;クラスの&lt;a href=&quot;../files/storage#django.core.files.storage.Storage.url&quot;&gt; &lt;code&gt;url()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="ee75a7871a7d992c449384f1855eb9ba34439252" translate="yes" xml:space="preserve">
          <source>The upper-right coordinate, as a tuple.</source>
          <target state="translated">タプルとしての右上座標。</target>
        </trans-unit>
        <trans-unit id="c1a74184d8276fe24835484131ee8f29d921ba12" translate="yes" xml:space="preserve">
          <source>The url to redirect to when the nominated object has been successfully deleted.</source>
          <target state="translated">指名されたオブジェクトが正常に削除されたときにリダイレクトするURL。</target>
        </trans-unit>
        <trans-unit id="d39ce41ce67366d315ddf13bef1b3bc991191815" translate="yes" xml:space="preserve">
          <source>The use of &lt;a href=&quot;https://docs.python.org/3/library/enum.html#enum.unique&quot;&gt;&lt;code&gt;enum.unique()&lt;/code&gt;&lt;/a&gt; is enforced to ensure that values cannot be defined multiple times. This is unlikely to be expected in choices for a field.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/enum.html#enum.unique&quot;&gt; &lt;code&gt;enum.unique()&lt;/code&gt; &lt;/a&gt;の使用は、値が複数回定義されないようにするために強制されます。これは、フィールドの選択で期待されることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="3dc90c99fc2aa8ef655a7b4fedee59604000d447" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;WSGIApplicationGroup %{GLOBAL}&lt;/code&gt; in the configurations below presumes that your Apache instance is running only one Django application. If you are running more than one Django application, please refer to the &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/configuration-guidelines.html#defining-application-groups&quot;&gt;Defining Application Groups&lt;/a&gt; section of the mod_wsgi docs for more information about this setting.</source>
          <target state="translated">以下の構成で &lt;code&gt;WSGIApplicationGroup %{GLOBAL}&lt;/code&gt; を使用する場合、Apacheインスタンスで実行されているDjangoアプリケーションは1つだけであると想定しています。複数のDjangoアプリケーションを実行している場合、この設定の詳細については、mod_wsgiドキュメントの「&lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/configuration-guidelines.html#defining-application-groups&quot;&gt;アプリケーショングループ&lt;/a&gt;の定義」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="8ce9aa55ad527455a19f1fb5dee0cc5f1881171d" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;pk&lt;/code&gt; isn&amp;rsquo;t limited to &lt;code&gt;__exact&lt;/code&gt; queries &amp;ndash; any query term can be combined with &lt;code&gt;pk&lt;/code&gt; to perform a query on the primary key of a model:</source>
          <target state="translated">&lt;code&gt;pk&lt;/code&gt; の使用は &lt;code&gt;__exact&lt;/code&gt; クエリに限定されません。任意のクエリ用語を &lt;code&gt;pk&lt;/code&gt; と組み合わせて、モデルの主キーに対してクエリを実行できます。</target>
        </trans-unit>
        <trans-unit id="273126119ad197e589386b39eb3b14737967b48f" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;{{ emails|length }}&lt;/code&gt; calls &lt;code&gt;QuerySet.__len__()&lt;/code&gt;, filling out the rest of the cache without doing another query.</source>
          <target state="translated">使用 &lt;code&gt;{{ emails|length }}&lt;/code&gt; 呼び出す &lt;code&gt;QuerySet.__len__()&lt;/code&gt; 、別のクエリを実行することなく、キャッシュの残りの部分を記入し、。</target>
        </trans-unit>
        <trans-unit id="0b30ef555288d169dbdc087902f82ddc584ac1d8" translate="yes" xml:space="preserve">
          <source>The use-case for this is when you want to display an &amp;ldquo;empty&amp;rdquo; form in which a field is initialized to a particular value. For example:</source>
          <target state="translated">この使用例は、フィールドが特定の値に初期化される「空の」フォームを表示する場合です。例えば：</target>
        </trans-unit>
        <trans-unit id="f98ac9915db27d519b4f31d99e5b73b80632ede9" translate="yes" xml:space="preserve">
          <source>The user (an &lt;a href=&quot;../../settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; instance) who performed the action.</source>
          <target state="translated">アクションを実行したユーザー（&lt;a href=&quot;../../settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt;インスタンス）。</target>
        </trans-unit>
        <trans-unit id="ba7924d79d72323d07424923c90fc0caf870b08f" translate="yes" xml:space="preserve">
          <source>The user instance that just logged in.</source>
          <target state="translated">今ログインしたばかりのユーザーインスタンス。</target>
        </trans-unit>
        <trans-unit id="1d2a706cbc9d7c33b8053d9f20b4de1e3f730d1e" translate="yes" xml:space="preserve">
          <source>The user instance that just logged out or &lt;code&gt;None&lt;/code&gt; if the user was not authenticated.</source>
          <target state="translated">ログアウトしたばかりのユーザーインスタンス、またはユーザーが認証されなかった場合は &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fcef0c145350d4039e3d9fa5184930eb7093fb5a" translate="yes" xml:space="preserve">
          <source>The user model and its manager will delegate permission lookup functions (&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.get_user_permissions&quot;&gt;&lt;code&gt;get_user_permissions()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.get_group_permissions&quot;&gt;&lt;code&gt;get_group_permissions()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.get_all_permissions&quot;&gt;&lt;code&gt;get_all_permissions()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt;&lt;code&gt;has_perm()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_module_perms&quot;&gt;&lt;code&gt;has_module_perms()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.UserManager.with_perm&quot;&gt;&lt;code&gt;with_perm()&lt;/code&gt;&lt;/a&gt;) to any authentication backend that implements these functions.</source>
          <target state="translated">ユーザーモデルとそのマネージャーは、権限検索関数（&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.get_user_permissions&quot;&gt; &lt;code&gt;get_user_permissions()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.get_group_permissions&quot;&gt; &lt;code&gt;get_group_permissions()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.get_all_permissions&quot;&gt; &lt;code&gt;get_all_permissions()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt; &lt;code&gt;has_perm()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_module_perms&quot;&gt; &lt;code&gt;has_module_perms()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.UserManager.with_perm&quot;&gt; &lt;code&gt;with_perm()&lt;/code&gt; &lt;/a&gt;）を、これらの関数を実装するすべての認証バックエンドに委任します。</target>
        </trans-unit>
        <trans-unit id="2a13affe6b8e618bcf30d16ab31afddb530fe513" translate="yes" xml:space="preserve">
          <source>The user will have its &lt;code&gt;backend&lt;/code&gt; attribute set to the value of the &lt;code&gt;backend&lt;/code&gt; argument (which should be a dotted Python path string), or to &lt;code&gt;settings.AUTHENTICATION_BACKENDS[0]&lt;/code&gt; if a value isn&amp;rsquo;t provided. The &lt;a href=&quot;../auth/default#django.contrib.auth.authenticate&quot;&gt;&lt;code&gt;authenticate()&lt;/code&gt;&lt;/a&gt; function called by &lt;a href=&quot;#django.test.Client.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt; normally annotates the user like this.</source>
          <target state="translated">ユーザーの &lt;code&gt;backend&lt;/code&gt; 属性は、 &lt;code&gt;backend&lt;/code&gt; 引数の値（ドット付きのPythonパス文字列である必要があります）に &lt;code&gt;settings.AUTHENTICATION_BACKENDS[0]&lt;/code&gt; れます。値が指定されていない場合は、settings.AUTHENTICATION_BACKENDS [0]に設定されます。&lt;a href=&quot;../auth/default#django.contrib.auth.authenticate&quot;&gt; &lt;code&gt;authenticate()&lt;/code&gt; &lt;/a&gt;によって呼び出される関数&lt;a href=&quot;#django.test.Client.login&quot;&gt; &lt;code&gt;login()&lt;/code&gt; &lt;/a&gt;通常、このようなユーザーに注釈を付けます。</target>
        </trans-unit>
        <trans-unit id="f40dbf0ccf66035c9ac922cb2bd495a35c214797" translate="yes" xml:space="preserve">
          <source>The username and email address for the new account can be supplied by using the &lt;code&gt;--username&lt;/code&gt; and &lt;code&gt;--email&lt;/code&gt; arguments on the command line. If either of those is not supplied, &lt;code&gt;createsuperuser&lt;/code&gt; will prompt for it when running interactively.</source>
          <target state="translated">コマンドラインで &lt;code&gt;--username&lt;/code&gt; および &lt;code&gt;--email&lt;/code&gt; 引数を使用して、新しいアカウントのユーザー名と電子メールアドレスを指定できます。これらのいずれかが指定されていない場合、インタラクティブに実行するときに &lt;code&gt;createsuperuser&lt;/code&gt; がプロンプトを表示します。</target>
        </trans-unit>
        <trans-unit id="def789175ec6313f4c3b4e21168ca6e1c1853404" translate="yes" xml:space="preserve">
          <source>The username passed as &lt;code&gt;remote_user&lt;/code&gt; is considered trusted. This method returns the user object with the given username, creating a new user object if &lt;a href=&quot;#django.contrib.auth.backends.RemoteUserBackend.create_unknown_user&quot;&gt;&lt;code&gt;create_unknown_user&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;remote_user&lt;/code&gt; として渡されたユーザー名は信頼できると見なされます。このメソッドは、指定されたユーザー名のユーザーオブジェクトを返し、&lt;a href=&quot;#django.contrib.auth.backends.RemoteUserBackend.create_unknown_user&quot;&gt; &lt;code&gt;create_unknown_user&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; の場合に新しいユーザーオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="431f8cbfd1a96932abb875994c21572b89cffecb" translate="yes" xml:space="preserve">
          <source>The username to use when connecting to the Oracle database that will be used when running tests. If not provided, Django will use &lt;code&gt;'test_' + USER&lt;/code&gt;.</source>
          <target state="translated">テストの実行時に使用されるOracleデータベースに接続するときに使用するユーザー名。指定しない場合、Djangoは &lt;code&gt;'test_' + USER&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="7786d2e6c321e6d912e2620304b49b99c56b85c5" translate="yes" xml:space="preserve">
          <source>The username to use when connecting to the database. Not used with SQLite.</source>
          <target state="translated">データベースに接続する際に使用するユーザー名。SQLiteでは使用しません。</target>
        </trans-unit>
        <trans-unit id="6c4203696b84799bcc5ae72ef84b0ea6971ab83a" translate="yes" xml:space="preserve">
          <source>The validation routines will only get called once, regardless of how many times you access &lt;a href=&quot;#django.forms.Form.errors&quot;&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/a&gt; or call &lt;a href=&quot;#django.forms.Form.is_valid&quot;&gt;&lt;code&gt;is_valid()&lt;/code&gt;&lt;/a&gt;. This means that if validation has side effects, those side effects will only be triggered once.</source>
          <target state="translated">&lt;a href=&quot;#django.forms.Form.errors&quot;&gt; &lt;code&gt;errors&lt;/code&gt; &lt;/a&gt;アクセスした回数や&lt;a href=&quot;#django.forms.Form.is_valid&quot;&gt; &lt;code&gt;is_valid()&lt;/code&gt; を&lt;/a&gt;呼び出した回数に関係なく、検証ルーチンは一度だけ呼び出されます。つまり、検証に副作用がある場合、それらの副作用は1回だけトリガーされます。</target>
        </trans-unit>
        <trans-unit id="66b0cda61ff3b53e944fdfc3dfe655c60cfbb3cd" translate="yes" xml:space="preserve">
          <source>The value for &lt;code&gt;form&lt;/code&gt; defaults to &lt;code&gt;ModelForm&lt;/code&gt;. This is what is passed through to &lt;a href=&quot;../../forms/models#django.forms.models.inlineformset_factory&quot;&gt;&lt;code&gt;inlineformset_factory()&lt;/code&gt;&lt;/a&gt; when creating the formset for this inline.</source>
          <target state="translated">&lt;code&gt;form&lt;/code&gt; の値のデフォルトは &lt;code&gt;ModelForm&lt;/code&gt; です。これは、このインラインの&lt;a href=&quot;../../forms/models#django.forms.models.inlineformset_factory&quot;&gt; &lt;code&gt;inlineformset_factory()&lt;/code&gt; &lt;/a&gt;作成するときにinlineformset_factory（）に渡されるものです。</target>
        </trans-unit>
        <trans-unit id="d49f07aa3764eb2da4ea4ec37d326aa1676d45df" translate="yes" xml:space="preserve">
          <source>The value for each argument is retrieved from the matching setting if the argument is &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">引数が &lt;code&gt;None&lt;/code&gt; の場合、各引数の値は一致する設定から取得されます。</target>
        </trans-unit>
        <trans-unit id="0a04c5a63b28da01c0855cf722eca4bd4c04656f" translate="yes" xml:space="preserve">
          <source>The value included in the HTTP &lt;code&gt;Content-Type&lt;/code&gt; header, including the MIME type specification and the character set encoding. If &lt;code&gt;content_type&lt;/code&gt; is specified, then its value is used. Otherwise, &lt;code&gt;'text/html'&lt;/code&gt; is used.</source>
          <target state="translated">HTTP &lt;code&gt;Content-Type&lt;/code&gt; ヘッダーに含まれる値。MIMEタイプの仕様や文字セットのエンコーディングなど。場合 &lt;code&gt;content_type&lt;/code&gt; 指定され、その値が使用されます。それ以外の場合は、 &lt;code&gt;'text/html'&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="3a8e770a05f9768e242a5e28fa732ed6e3510a68" translate="yes" xml:space="preserve">
          <source>The value must be an integer from 0 to 6, where 0 means Sunday, 1 means Monday and so on.</source>
          <target state="translated">値は0から6までの整数で、0は日曜日、1は月曜日などを意味します。</target>
        </trans-unit>
        <trans-unit id="d79e2a052b86e6ef09c620854afbe79677a8960c" translate="yes" xml:space="preserve">
          <source>The value of &lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-1&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; should be in Python path syntax, e.g. &lt;code&gt;mysite.settings&lt;/code&gt;. Note that the settings module should be on the Python &lt;a href=&quot;https://www.diveinto.org/python3/your-first-python-program.html#importsearchpath&quot;&gt;import search path&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-1&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt;の値は、Pythonパス構文である必要があります（例： &lt;code&gt;mysite.settings&lt;/code&gt; )。設定モジュールはPython&lt;a href=&quot;https://www.diveinto.org/python3/your-first-python-program.html#importsearchpath&quot;&gt;インポート検索パス&lt;/a&gt;上にある必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="732620917b72ac261f1791ce97d334780ab692d8" translate="yes" xml:space="preserve">
          <source>The value of &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t respected inside of a &lt;code&gt;{% localize %}&lt;/code&gt; block.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;の値は、 &lt;code&gt;{% localize %}&lt;/code&gt; ブロック内では考慮されません。</target>
        </trans-unit>
        <trans-unit id="67ea8feda5a567ef52cb79677f9ed3e5be4f8be9" translate="yes" xml:space="preserve">
          <source>The value of &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t respected inside of a &lt;code&gt;{% localtime %}&lt;/code&gt; block.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;の値は、 &lt;code&gt;{% localtime %}&lt;/code&gt; ブロック内では考慮されません。</target>
        </trans-unit>
        <trans-unit id="7b2c3507ccaa77494d0b0708dd391ba906e88b13" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; should be in Python path syntax, e.g. &lt;code&gt;mysite.settings&lt;/code&gt;. Note that the settings module should be on the Python &lt;a href=&quot;https://www.diveinto.org/python3/your-first-python-program.html#importsearchpath&quot;&gt;import search path&lt;/a&gt;.</source>
          <target state="translated">値 &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; は Pythonのパス構文、たとえばにする必要があります &lt;code&gt;mysite.settings&lt;/code&gt; 。設定モジュールはPython &lt;a href=&quot;https://www.diveinto.org/python3/your-first-python-program.html#importsearchpath&quot;&gt;インポート検索パス&lt;/a&gt;上にある必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="89558af8db81c21a3e4543d219a78efd19b542c6" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;config&lt;/code&gt; could also be stored in another column:</source>
          <target state="translated">&lt;code&gt;config&lt;/code&gt; の値は、別の列に格納することもできます。</target>
        </trans-unit>
        <trans-unit id="1d081816f701eb655ca492d6b62c0caff4611c02" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;#django.views.generic.dates.DayMixin.day&quot;&gt;&lt;code&gt;DayMixin.day&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.dates.DayMixin.day&quot;&gt; &lt;code&gt;DayMixin.day&lt;/code&gt; &lt;/a&gt;属性の値。</target>
        </trans-unit>
        <trans-unit id="71d1660d6f9a19e7fbfbf739d0aef9d2eeacf611" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;#django.views.generic.dates.MonthMixin.month&quot;&gt;&lt;code&gt;MonthMixin.month&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.dates.MonthMixin.month&quot;&gt; &lt;code&gt;MonthMixin.month&lt;/code&gt; &lt;/a&gt;属性の値。</target>
        </trans-unit>
        <trans-unit id="226f4609720f49cd94be18a77a87223bedbd64c9" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;#django.views.generic.dates.WeekMixin.week&quot;&gt;&lt;code&gt;WeekMixin.week&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.dates.WeekMixin.week&quot;&gt; &lt;code&gt;WeekMixin.week&lt;/code&gt; &lt;/a&gt;属性の値。</target>
        </trans-unit>
        <trans-unit id="08c239bdeb144dcf81c89832bb248fb6ac315e1f" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;#django.views.generic.dates.YearMixin.year&quot;&gt;&lt;code&gt;YearMixin.year&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.dates.YearMixin.year&quot;&gt; &lt;code&gt;YearMixin.year&lt;/code&gt; &lt;/a&gt;属性の値。</target>
        </trans-unit>
        <trans-unit id="89a2e6473db4ce39ddc26b78e723be4bdb5f4cbb" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite&quot;&gt;SameSite&lt;/a&gt; flag on the CSRF cookie. This flag prevents the cookie from being sent in cross-site requests.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite&quot;&gt;CSRFCookieのSameSite&lt;/a&gt;フラグの値。このフラグは、クロスサイトリクエストでCookieが送信されるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="56d91b1fac25ca479d201c6541fd086bab39153e" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite&quot;&gt;SameSite&lt;/a&gt; flag on the language cookie. This flag prevents the cookie from being sent in cross-site requests.</source>
          <target state="translated">言語Cookieの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite&quot;&gt;SameSite&lt;/a&gt;フラグの値。このフラグは、クロスサイトリクエストでCookieが送信されるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="258022a527f7bd6f5cf96183900f74831ddf16d6" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite&quot;&gt;SameSite&lt;/a&gt; flag on the session cookie. This flag prevents the cookie from being sent in cross-site requests thus preventing CSRF attacks and making some methods of stealing session cookie impossible.</source>
          <target state="translated">セッションCookieの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite&quot;&gt;SameSite&lt;/a&gt;フラグの値。このフラグは、Cookieがクロスサイト要求で送信されるのを防ぎ、CSRF攻撃を防ぎ、セッションCookieを盗むいくつかの方法を不可能にします。</target>
        </trans-unit>
        <trans-unit id="280929d455ba7974dc4c9661e146db91c8f2a5b6" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt; flag on the CSRF cookie. This flag prevents the cookie from being sent in cross-site requests.</source>
          <target state="translated">CSRF Coo​​kieの&lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt;フラグの値。このフラグは、Cookieがクロスサイト要求で送信されるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="05f34ea833177727bf66769518bb78b95201dae9" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt; flag on the language cookie. This flag prevents the cookie from being sent in cross-site requests.</source>
          <target state="translated">言語Cookieの&lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt;フラグの値。このフラグは、Cookieがクロスサイト要求で送信されるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="8910bb7b1c422d259507f49f930d79d5324246cc" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt; flag on the session cookie. This flag prevents the cookie from being sent in cross-site requests thus preventing CSRF attacks and making some methods of stealing session cookie impossible.</source>
          <target state="translated">セッションCookieの&lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt;フラグの値。このフラグは、Cookieがクロスサイトリクエストで送信されるのを防ぎ、CSRF攻撃を防ぎ、セッションCookieを盗むいくつかの方法を不可能にします。</target>
        </trans-unit>
        <trans-unit id="298e4586be06aa27d7f12e849b88b0f636afc6fe" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;day&lt;/code&gt; argument captured in the URL pattern.</source>
          <target state="translated">URLパターンでキャプチャされた &lt;code&gt;day&lt;/code&gt; 引数の値。</target>
        </trans-unit>
        <trans-unit id="e64d941a32f80a7ae6df42e669a81245de42c7ba" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;day&lt;/code&gt;&lt;code&gt;GET&lt;/code&gt; query argument.</source>
          <target state="translated">&lt;code&gt;day&lt;/code&gt; &lt;code&gt;GET&lt;/code&gt; クエリ引数の値。</target>
        </trans-unit>
        <trans-unit id="62a6bb78ee5bb993b75f246347d0150e154db741" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;month&lt;/code&gt; argument captured in the URL pattern.</source>
          <target state="translated">URLパターンでキャプチャされた &lt;code&gt;month&lt;/code&gt; 引数の値。</target>
        </trans-unit>
        <trans-unit id="aa12055332e36b7c6f2f35340de617e28e1e6481" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;month&lt;/code&gt;&lt;code&gt;GET&lt;/code&gt; query argument.</source>
          <target state="translated">&lt;code&gt;month&lt;/code&gt; &lt;code&gt;GET&lt;/code&gt; クエリ引数の値。</target>
        </trans-unit>
        <trans-unit id="6e5e7cee85906d927aea0475bdea4b6eedbf92a5" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;week&lt;/code&gt; argument captured in the URL pattern</source>
          <target state="translated">URLパターンでキャプチャされた &lt;code&gt;week&lt;/code&gt; 引数の値</target>
        </trans-unit>
        <trans-unit id="0bfcc66cd6d3f68a5eca0a763fb4c503b7085fb3" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;week&lt;/code&gt;&lt;code&gt;GET&lt;/code&gt; query argument.</source>
          <target state="translated">&lt;code&gt;week&lt;/code&gt; &lt;code&gt;GET&lt;/code&gt; クエリ引数の値。</target>
        </trans-unit>
        <trans-unit id="524a33c93271d5afc33c2152361848b96ac3a3f0" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;year&lt;/code&gt; argument captured in the URL pattern.</source>
          <target state="translated">URLパターンでキャプチャされた &lt;code&gt;year&lt;/code&gt; 引数の値。</target>
        </trans-unit>
        <trans-unit id="d560a643bb27590bcc2dec6cd5677cd787623e54" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;year&lt;/code&gt;&lt;code&gt;GET&lt;/code&gt; query argument.</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; &lt;code&gt;GET&lt;/code&gt; クエリ引数の値。</target>
        </trans-unit>
        <trans-unit id="f7f4f12279eeae08cedfa7a9e14d1167e6d447be" translate="yes" xml:space="preserve">
          <source>The value of the argument &amp;ndash; this can have a default value, or be left out altogether.</source>
          <target state="translated">引数の値&amp;ndash;これにはデフォルト値を設定することも、完全に省略することもできます。</target>
        </trans-unit>
        <trans-unit id="d09db49739d2e0e2016a7ad9ee0921b088c34744" translate="yes" xml:space="preserve">
          <source>The value of the choice. This value is used to render the &lt;code&gt;value&lt;/code&gt; attribute of an HTML &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">選択の価値。この値は、HTMLの &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 要素の &lt;code&gt;value&lt;/code&gt; 属性をレンダリングするために使用されます。</target>
        </trans-unit>
        <trans-unit id="ec6ac746f0b25b7b4f2cc036d47940cd2ec2aef9" translate="yes" xml:space="preserve">
          <source>The value of the field. e.g &lt;code&gt;someone@example.com&lt;/code&gt;.</source>
          <target state="translated">フィールドの値。例： &lt;code&gt;someone@example.com&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="41b7516665c8b906dc40cf4c31049dcdc5069769" translate="yes" xml:space="preserve">
          <source>The value of the maximum X coordinate.</source>
          <target state="translated">最大X座標の値です。</target>
        </trans-unit>
        <trans-unit id="09c836cc6cf9cc8692f0d479cf06744b298bfe32" translate="yes" xml:space="preserve">
          <source>The value of the maximum Y coordinate.</source>
          <target state="translated">Y座標の最大値です。</target>
        </trans-unit>
        <trans-unit id="58bafdea94b9df2b451f5c666b3595a08835e5b7" translate="yes" xml:space="preserve">
          <source>The value of the minimum X coordinate.</source>
          <target state="translated">最小のX座標の値。</target>
        </trans-unit>
        <trans-unit id="e4e8025b92622c3296781e38fbecc4454c93dfc8" translate="yes" xml:space="preserve">
          <source>The value of the minimum Y coordinate.</source>
          <target state="translated">Y座標の最小値。</target>
        </trans-unit>
        <trans-unit id="3ef01c3485565b0704310aa95c017927c8e1f354" translate="yes" xml:space="preserve">
          <source>The value of the setting after the change. For settings that initially don&amp;rsquo;t exist, in the &amp;ldquo;teardown&amp;rdquo; phase, &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">変更後の設定値。最初は存在しない設定の「ティアダウン」フェーズでは、 &lt;code&gt;value&lt;/code&gt; は &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="880fff0eb8eb665abc6dd4c5caf39caf9fa905ce" translate="yes" xml:space="preserve">
          <source>The value of the variable (input) &amp;ndash; not necessarily a string.</source>
          <target state="translated">変数の値（入力）&amp;ndash;必ずしも文字列ではありません。</target>
        </trans-unit>
        <trans-unit id="c7b3997c29b88e3598eadc8206188c990d9df7bc" translate="yes" xml:space="preserve">
          <source>The value passed into a distance lookup is a tuple; the first two values are mandatory, and are the geometry to calculate distances to, and a distance value (either a number in units of the field, a &lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; object, or a &lt;a href=&quot;../../models/expressions&quot;&gt;query expression&lt;/a&gt;). To pass a band index to the lookup, use a 3-tuple where the second entry is the band index.</source>
          <target state="translated">距離ルックアップに渡される値はタプルです。最初の2つの値は必須であり、距離を計算するためのジオメトリと距離の値（フィールド単位の数値、&lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt; &lt;code&gt;Distance&lt;/code&gt; &lt;/a&gt;オブジェクト、または&lt;a href=&quot;../../models/expressions&quot;&gt;クエリ式の&lt;/a&gt;いずれか）です。バンドインデックスをルックアップに渡すには、2番目のエントリがバンドインデックスである3タプルを使用します。</target>
        </trans-unit>
        <trans-unit id="2000cde189dcec991f2548f4c0308723287567b2" translate="yes" xml:space="preserve">
          <source>The value passed into a distance lookup is a tuple; the first two values are mandatory, and are the geometry to calculate distances to, and a distance value (either a number in units of the field, a &lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; object, or a &lt;code&gt;query expression &amp;lt;ref/models/expressions&amp;gt;&lt;/code&gt;). To pass a band index to the lookup, use a 3-tuple where the second entry is the band index.</source>
          <target state="translated">距離ルックアップに渡される値はタプルです。最初の2つの値は必須であり、距離を計算するためのジオメトリと距離の値（フィールド単位の数値、&lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt; &lt;code&gt;Distance&lt;/code&gt; &lt;/a&gt;オブジェクト、または &lt;code&gt;query expression &amp;lt;ref/models/expressions&amp;gt;&lt;/code&gt; ）です。バンドインデックスをルックアップに渡すには、3タプルを使用します。2番目のエントリはバンドインデックスです。</target>
        </trans-unit>
        <trans-unit id="53f85ce3d67bb4f844e2ebff980ba70358c2cb64" translate="yes" xml:space="preserve">
          <source>The value should be either a boolean, a list or a tuple. Default is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">値は、ブール値、リスト、またはタプルのいずれかである必要があります。デフォルトは &lt;code&gt;False&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="73f4b3072b3ddf1bb6604896db5d3d4360c70e89" translate="yes" xml:space="preserve">
          <source>The value to use to represent &amp;ldquo;empty&amp;rdquo;. Defaults to an empty string.</source>
          <target state="translated">「空」を表すために使用する値。デフォルトは空の文字列です。</target>
        </trans-unit>
        <trans-unit id="84b9912d356e5407f1a60cc39f2fc002afd5a8ad" translate="yes" xml:space="preserve">
          <source>The value to use to represent &amp;ldquo;empty.&amp;rdquo; Defaults to the empty string; &lt;code&gt;None&lt;/code&gt; is another common choice here. Note that this value will not be coerced by the function given in the &lt;code&gt;coerce&lt;/code&gt; argument, so choose it accordingly.</source>
          <target state="translated">「空」を表すために使用する値。デフォルトは空の文字列です。ここではもう1つの一般的な選択肢はあり &lt;code&gt;None&lt;/code&gt; 。この値は、 &lt;code&gt;coerce&lt;/code&gt; 引数で指定された関数によって強制されないので、それに応じて選択してください。</target>
        </trans-unit>
        <trans-unit id="e726e8fcaf5eb9f16edc0e0f0220e474bb57dbda" translate="yes" xml:space="preserve">
          <source>The values are (type, value, traceback), the same as returned by Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.exc_info&quot;&gt;&lt;code&gt;sys.exc_info()&lt;/code&gt;&lt;/a&gt;. Their meanings are:</source>
          <target state="translated">値は（type、value、traceback）で、Pythonの&lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.exc_info&quot;&gt; &lt;code&gt;sys.exc_info()&lt;/code&gt; &lt;/a&gt;によって返されるものと同じです。それらの意味は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1491d5d79613a9dd1811dabfb20ea96097749151" translate="yes" xml:space="preserve">
          <source>The values from the &lt;code&gt;extra&lt;/code&gt; keywords arguments passed to &lt;a href=&quot;#django.test.Client.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.test.Client.post&quot;&gt;&lt;code&gt;post()&lt;/code&gt;&lt;/a&gt;, etc. have precedence over the defaults passed to the class constructor.</source>
          <target state="translated">&lt;a href=&quot;#django.test.Client.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#django.test.Client.post&quot;&gt; &lt;code&gt;post()&lt;/code&gt; &lt;/a&gt;などに渡される &lt;code&gt;extra&lt;/code&gt; キーワード引数からの値は、クラスコンストラクターに渡されるデフォルトよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="98af89f29d056c33c0562b51657d7354cb3eeec8" translate="yes" xml:space="preserve">
          <source>The values in the dictionary are not case-sensitive and are automatically converted to the correct string format upon creation.</source>
          <target state="translated">辞書内の値は大文字小文字を区別せず、作成時に自動的に正しい文字列形式に変換されます。</target>
        </trans-unit>
        <trans-unit id="3c149f927e02325eb3ee1fc1e3083ba72003ab17" translate="yes" xml:space="preserve">
          <source>The values in the dictionary should be a tuple/list of file names. See &lt;a href=&quot;#form-asset-paths&quot;&gt;the section on paths&lt;/a&gt; for details of how to specify paths to these files.</source>
          <target state="translated">辞書の値は、ファイル名のタプル/リストである必要があります。これらのファイルへのパスを指定する方法の詳細については、&lt;a href=&quot;#form-asset-paths&quot;&gt;パス&lt;/a&gt;に関するセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="bacff239831855e997d75de7d53cc0a1355cc1af" translate="yes" xml:space="preserve">
          <source>The values of a model&amp;rsquo;s fields won&amp;rsquo;t be reverted when a transaction rollback happens. This could lead to an inconsistent model state unless you manually restore the original field values.</source>
          <target state="translated">トランザクションのロールバックが発生しても、モデルのフィールドの値は元に戻りません。これにより、手動で元のフィールド値を復元しない限り、モデルの状態が不整合になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f0feca5eeb791aec15a7643b653585ab49aca48f" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;sitemaps&lt;/code&gt; is a list of absolute URLs to each of the sitemaps.</source>
          <target state="translated">変数 &lt;code&gt;sitemaps&lt;/code&gt; は、各サイトマップへの絶対URLのリストです。</target>
        </trans-unit>
        <trans-unit id="dba44adf72bdf4c5f6ac791d193ebb5f0b8c5fc2" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;urlset&lt;/code&gt; is a list of URLs that should appear in the sitemap. Each URL exposes attributes as defined in the &lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt;&lt;code&gt;Sitemap&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="translated">変数 &lt;code&gt;urlset&lt;/code&gt; は、サイトマップに表示されるURLのリストです。各URLは、&lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt; &lt;code&gt;Sitemap&lt;/code&gt; &lt;/a&gt;クラスで定義されている属性を公開します。</target>
        </trans-unit>
        <trans-unit id="727dceea2caf913539f0780046c92d2b9e3f6d6b" translate="yes" xml:space="preserve">
          <source>The variable may also be any object with a &lt;code&gt;render()&lt;/code&gt; method that accepts a context. This allows you to reference a compiled &lt;code&gt;Template&lt;/code&gt; in your context.</source>
          <target state="translated">変数は、コンテキストを受け入れる &lt;code&gt;render()&lt;/code&gt; メソッドを持つ任意のオブジェクトにすることもできます。これにより、コンパイルされた &lt;code&gt;Template&lt;/code&gt; をコンテキストで参照できます。</target>
        </trans-unit>
        <trans-unit id="301a88295c3faec78f34621840e7333d9530c29c" translate="yes" xml:space="preserve">
          <source>The variables are:</source>
          <target state="translated">変数は</target>
        </trans-unit>
        <trans-unit id="246f1c0ac6bbda7965cd9c30be5df3fd2b48f634" translate="yes" xml:space="preserve">
          <source>The various JavaScript/JSON i18n views generate the catalog from &lt;code&gt;.mo&lt;/code&gt; files on every request. Since its output is constant, at least for a given version of a site, it&amp;rsquo;s a good candidate for caching.</source>
          <target state="translated">さまざまなJavaScript / JSON i18nビューは、リクエストごとに &lt;code&gt;.mo&lt;/code&gt; ファイルからカタログを生成します。その出力は一定であるため、少なくともサイトの特定のバージョンでは、キャッシングの候補として適しています。</target>
        </trans-unit>
        <trans-unit id="5962a25a8a29bda3527775c49bc4db85e6de9af3" translate="yes" xml:space="preserve">
          <source>The version of a specific key can be incremented and decremented using the &lt;code&gt;incr_version()&lt;/code&gt; and &lt;code&gt;decr_version()&lt;/code&gt; methods. This enables specific keys to be bumped to a new version, leaving other keys unaffected. Continuing our previous example:</source>
          <target state="translated">特定のキーのバージョンは、 &lt;code&gt;incr_version()&lt;/code&gt; および &lt;code&gt;decr_version()&lt;/code&gt; メソッドを使用して増分および減分できます。これにより、特定のキーを新しいバージョンにバンプすることができ、他のキーは影響を受けません。前の例を続けます。</target>
        </trans-unit>
        <trans-unit id="a9a808e51693db0366361c7aad4e5f6449d32f9f" translate="yes" xml:space="preserve">
          <source>The view</source>
          <target state="translated">景色</target>
        </trans-unit>
        <trans-unit id="cd8224ed55eaa958cf4e74c21a59ae030d99fa1c" translate="yes" xml:space="preserve">
          <source>The view can be constructed using a &lt;code&gt;FormView&lt;/code&gt;:</source>
          <target state="translated">ビューは &lt;code&gt;FormView&lt;/code&gt; を使用して構築できます。</target>
        </trans-unit>
        <trans-unit id="901e3fe2be7e0720c39df3979063c7a7927565a8" translate="yes" xml:space="preserve">
          <source>The view expects to be called via the &lt;code&gt;POST&lt;/code&gt; method, with a &lt;code&gt;language&lt;/code&gt; parameter set in request. If session support is enabled, the view saves the language choice in the user&amp;rsquo;s session. It also saves the language choice in a cookie that is named &lt;code&gt;django_language&lt;/code&gt; by default. (The name can be changed through the &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt;&lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt;&lt;/a&gt; setting.)</source>
          <target state="translated">ビューは、リクエストに &lt;code&gt;language&lt;/code&gt; パラメータを設定して、 &lt;code&gt;POST&lt;/code&gt; メソッドを介して呼び出されることを想定しています。セッションサポートが有効になっている場合、ビューはユーザーのセッションで言語の選択を保存します。また、デフォルトで &lt;code&gt;django_language&lt;/code&gt; という名前のcookieに言語の選択を保存します。（名前は&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt; &lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt; &lt;/a&gt;設定で変更できます。）</target>
        </trans-unit>
        <trans-unit id="bc4114d1cc31dcb339e09a01279d11c64f6f337a" translate="yes" xml:space="preserve">
          <source>The view function that would be used to serve the URL</source>
          <target state="translated">URL を提供するために使用されるビュー関数</target>
        </trans-unit>
        <trans-unit id="bb60be86939f6b2b36e2ed2727e150b67f9e8568" translate="yes" xml:space="preserve">
          <source>The view layer</source>
          <target state="translated">ビュー層</target>
        </trans-unit>
        <trans-unit id="dc8fc1b1fb7137f588c8acafb0a93b392b4df02b" translate="yes" xml:space="preserve">
          <source>The view returns an &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object that contains the generated response. Each view function is responsible for returning an &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object. (There are exceptions, but we&amp;rsquo;ll get to those later.)</source>
          <target state="translated">ビューは、生成された応答を含む&lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;オブジェクトを返します。各ビュー関数は、&lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;オブジェクトを返します。（例外もありますが、後で説明します）。</target>
        </trans-unit>
        <trans-unit id="94116e5f81191c215cce003dde4b658a52f20312" translate="yes" xml:space="preserve">
          <source>The views have optional arguments you can use to alter the behavior of the view. For example, if you want to change the template name a view uses, you can provide the &lt;code&gt;template_name&lt;/code&gt; argument. A way to do this is to provide keyword arguments in the URLconf, these will be passed on to the view. For example:</source>
          <target state="translated">ビューには、ビューの動作を変更するために使用できるオプションの引数があります。たとえば、ビューが使用するテンプレート名を変更する場合は、 &lt;code&gt;template_name&lt;/code&gt; 引数を指定できます。これを行う方法は、URLconfにキーワード引数を提供することです。これらはビューに渡されます。例えば：</target>
        </trans-unit>
        <trans-unit id="f376d289850fd07bafee76662dcd32e58c48cce0" translate="yes" xml:space="preserve">
          <source>The views provide a URL name for easier reference. See &lt;a href=&quot;../http/urls&quot;&gt;the URL documentation&lt;/a&gt; for details on using named URL patterns.</source>
          <target state="translated">ビューは、参照しやすいようにURL名を提供します。名前付きURLパターンの使用の詳細について&lt;a href=&quot;../http/urls&quot;&gt;は、URLのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fe3f76fd9e00713b8425105073c566d748f4bc69" translate="yes" xml:space="preserve">
          <source>The views to use for these cases are specified by four variables. Their default values should suffice for most projects, but further customization is possible by overriding their default values.</source>
          <target state="translated">これらのケースで使用するビューは、4 つの変数で指定します。ほとんどのプロジェクトではこれらのデフォルト値で十分ですが、デフォルト値をオーバーライドすることでさらにカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="5112f354dedc68e86a1b5923f9ba77405762fc64" translate="yes" xml:space="preserve">
          <source>The virtual environment will be activated and you&amp;rsquo;ll see &amp;ldquo;(project-name)&amp;rdquo; next to the command prompt to designate that. Each time you start a new command prompt, you&amp;rsquo;ll need to activate the environment again.</source>
          <target state="translated">仮想環境がアクティブになり、コマンドプロンプトの横に「（project-name）」と表示されてそれを指定します。新しいコマンドプロンプトを開始するたびに、環境を再度アクティブ化する必要があります。</target>
        </trans-unit>
        <trans-unit id="6a785f499bc3a631f2bf7b4b1e252762b9891777" translate="yes" xml:space="preserve">
          <source>The virtual environment will be activated automatically and you&amp;rsquo;ll see &amp;ldquo;(myproject)&amp;rdquo; next to the command prompt to designate that. If you start a new command prompt, you&amp;rsquo;ll need to activate the environment again using:</source>
          <target state="translated">仮想環境が自動的にアクティブになり、コマンドプロンプトの横に「（myproject）」と表示され、それを指定します。新しいコマンドプロンプトを開始する場合は、次のコマンドを使用して環境を再度アクティブにする必要があります。</target>
        </trans-unit>
        <trans-unit id="da1995eb6a0ae021fe94bdbab28494fbefd06f36" translate="yes" xml:space="preserve">
          <source>The warnings and errors raised by system checks must be instances of &lt;code&gt;CheckMessage&lt;/code&gt;. An instance encapsulates a single reportable error or warning. It also provides context and hints applicable to the message, and a unique identifier that is used for filtering purposes.</source>
          <target state="translated">システムチェックによって生成される警告とエラーは、 &lt;code&gt;CheckMessage&lt;/code&gt; のインスタンスである必要があります。インスタンスは、報告可能な単一のエラーまたは警告をカプセル化します。また、メッセージに適用可能なコンテキストとヒント、およびフィルタリングの目的で使用される一意の識別子も提供します。</target>
        </trans-unit>
        <trans-unit id="13523debf05e9958026aea88f8499b35346f566f" translate="yes" xml:space="preserve">
          <source>The warnings and errors raised by the check method must be instances of &lt;a href=&quot;../ref/checks#django.core.checks.CheckMessage&quot;&gt;&lt;code&gt;CheckMessage&lt;/code&gt;&lt;/a&gt;. An instance of &lt;a href=&quot;../ref/checks#django.core.checks.CheckMessage&quot;&gt;&lt;code&gt;CheckMessage&lt;/code&gt;&lt;/a&gt; encapsulates a single reportable error or warning. It also provides context and hints applicable to the message, and a unique identifier that is used for filtering purposes.</source>
          <target state="translated">checkメソッドによって生成される警告とエラーは、&lt;a href=&quot;../ref/checks#django.core.checks.CheckMessage&quot;&gt; &lt;code&gt;CheckMessage&lt;/code&gt; の&lt;/a&gt;インスタンスでなければなりません。&lt;a href=&quot;../ref/checks#django.core.checks.CheckMessage&quot;&gt; &lt;code&gt;CheckMessage&lt;/code&gt; &lt;/a&gt;のインスタンスは、報告可能な単一のエラーまたは警告をカプセル化します。また、メッセージに適用可能なコンテキストとヒント、およびフィルタリングの目的で使用される一意の識別子も提供します。</target>
        </trans-unit>
        <trans-unit id="047a01eda675ea876705a7edddee40d2096e3731" translate="yes" xml:space="preserve">
          <source>The warping parameters can be specified through the &lt;code&gt;ds_input&lt;/code&gt; argument. The use of &lt;code&gt;ds_input&lt;/code&gt; is analogous to the corresponding argument of the class constructor. It is a dictionary with the characteristics of the target raster. Allowed dictionary key values are width, height, SRID, origin, scale, skew, datatype, driver, and name (filename).</source>
          <target state="translated">ワーピングパラメータは、 &lt;code&gt;ds_input&lt;/code&gt; 引数で指定できます。 &lt;code&gt;ds_input&lt;/code&gt; の使用は、クラスコンストラクターの対応する引数に似ています。ターゲットラスタの特性を持つ辞書です。使用できるディクショナリキーの値は、幅、高さ、SRID、原点、スケール、スキュー、データ型、ドライバー、および名前（ファイル名）です。</target>
        </trans-unit>
        <trans-unit id="6630d921dcfe349d2ca90ef848c6ae4f290882a5" translate="yes" xml:space="preserve">
          <source>The way &lt;code&gt;Manager&lt;/code&gt; classes work is documented in &lt;a href=&quot;queries&quot;&gt;Making queries&lt;/a&gt;; this document specifically touches on model options that customize &lt;code&gt;Manager&lt;/code&gt; behavior.</source>
          <target state="translated">道 &lt;code&gt;Manager&lt;/code&gt; クラスの仕事をして文書化され&lt;a href=&quot;queries&quot;&gt;たクエリを作ります&lt;/a&gt;。このドキュメントでは、特に &lt;code&gt;Manager&lt;/code&gt; の動作をカスタマイズするモデルオプションについて説明します。</target>
        </trans-unit>
        <trans-unit id="3ff303e576b39fa9a0f7513fb6d078850cc8dfe3" translate="yes" xml:space="preserve">
          <source>The way this works is by looking up the URL definition as specified in the &lt;code&gt;polls.urls&lt;/code&gt; module. You can see exactly where the URL name of &amp;lsquo;detail&amp;rsquo; is defined below:</source>
          <target state="translated">これが機能する方法は、 &lt;code&gt;polls.urls&lt;/code&gt; モジュールで指定されたURL定義を検索することです。「detail」のURL名が定義されている場所を以下に示します。</target>
        </trans-unit>
        <trans-unit id="b5f886c535546dbaab7c6c4368e56d690af59622" translate="yes" xml:space="preserve">
          <source>The weight should be one of the following letters: D, C, B, A. By default, these weights refer to the numbers &lt;code&gt;0.1&lt;/code&gt;, &lt;code&gt;0.2&lt;/code&gt;, &lt;code&gt;0.4&lt;/code&gt;, and &lt;code&gt;1.0&lt;/code&gt;, respectively. If you wish to weight them differently, pass a list of four floats to &lt;a href=&quot;#django.contrib.postgres.search.SearchRank&quot;&gt;&lt;code&gt;SearchRank&lt;/code&gt;&lt;/a&gt; as &lt;code&gt;weights&lt;/code&gt; in the same order above:</source>
          <target state="translated">重量が次の文字のいずれかでなければならない：D、C、B、A.デフォルトで、これらの重みは、番号を参照 &lt;code&gt;0.1&lt;/code&gt; 、 &lt;code&gt;0.2&lt;/code&gt; 、 &lt;code&gt;0.4&lt;/code&gt; 、及び &lt;code&gt;1.0&lt;/code&gt; それぞれ。それらに異なる重み付けをしたい場合は、4つのフロートのリストを上記と同じ順序で &lt;code&gt;weights&lt;/code&gt; として&lt;a href=&quot;#django.contrib.postgres.search.SearchRank&quot;&gt; &lt;code&gt;SearchRank&lt;/code&gt; に渡し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="cd275e6cd3bed6cfda09f5e2dad5f6e610c08076" translate="yes" xml:space="preserve">
          <source>The whole collection of objects that is either serialized or deserialized is represented by a &lt;code&gt;&amp;lt;django-objects&amp;gt;&lt;/code&gt;-tag which contains multiple &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt;-elements. Each such object has two attributes: &amp;ldquo;pk&amp;rdquo; and &amp;ldquo;model&amp;rdquo;, the latter being represented by the name of the app (&amp;ldquo;sessions&amp;rdquo;) and the lowercase name of the model (&amp;ldquo;session&amp;rdquo;) separated by a dot.</source>
          <target state="translated">シリアル化または非シリアル化されたオブジェクトのコレクション全体は、複数の &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; 要素を含む &lt;code&gt;&amp;lt;django-objects&amp;gt;&lt;/code&gt; -tag によって表されます。このような各オブジェクトには、「pk」と「モデル」という2つの属性があります。後者は、アプリの名前（「セッション」）と、モデルの小文字の名前（「セッション」）でドットで区切られています。</target>
        </trans-unit>
        <trans-unit id="6ecf4ea4678d42a25524f691d392b104faeda828" translate="yes" xml:space="preserve">
          <source>The whole form, when rendered for the first time, will look like:</source>
          <target state="translated">フォーム全体を初めてレンダリングすると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="77c4876350e3b5c9852f7f08b842197cd4b16ed7" translate="yes" xml:space="preserve">
          <source>The width of the band in pixels (X-axis).</source>
          <target state="translated">バンドの幅をピクセル単位(X軸)で指定します。</target>
        </trans-unit>
        <trans-unit id="e89e99d483419238a22e5d2768e54ae1d1baf073" translate="yes" xml:space="preserve">
          <source>The width of the source in pixels (X-axis).</source>
          <target state="translated">ソースの幅をピクセル単位(X軸)で指定します。</target>
        </trans-unit>
        <trans-unit id="e0fab4bf20d39d12dca2ad89d59b567377b1bd60" translate="yes" xml:space="preserve">
          <source>The word &lt;code&gt;random&lt;/code&gt;, which if given, does not use the common paragraph (&amp;ldquo;Lorem ipsum dolor sit amet&amp;hellip;&amp;rdquo;) when generating text.</source>
          <target state="translated">&lt;code&gt;random&lt;/code&gt; という単語は、指定された場合、テキストを生成するときに共通の段落（「Lorem ipsum dolor sit amet&amp;hellip;」）を使用しません。</target>
        </trans-unit>
        <trans-unit id="2f4536762ff69418e6398c76291185956bd7e114" translate="yes" xml:space="preserve">
          <source>The words &amp;ldquo;internationalization&amp;rdquo; and &amp;ldquo;localization&amp;rdquo; often cause confusion; here&amp;rsquo;s a simplified definition:</source>
          <target state="translated">「国際化」と「ローカリゼーション」という言葉はしばしば混乱を引き起こします。ここに簡単な定義があります：</target>
        </trans-unit>
        <trans-unit id="b619314b82e6bd5516e142f0b55738fb6a7a0d42" translate="yes" xml:space="preserve">
          <source>The work that needs to be done</source>
          <target state="translated">やるべきことは</target>
        </trans-unit>
        <trans-unit id="e9eda613d1e3d08ad5e50e3d1b17ad7cddaed19d" translate="yes" xml:space="preserve">
          <source>The world borders ZIP file contains a set of data files collectively known as an &lt;a href=&quot;https://en.wikipedia.org/wiki/Shapefile&quot;&gt;ESRI Shapefile&lt;/a&gt;, one of the most popular geospatial data formats. When unzipped, the world borders dataset includes files with the following extensions:</source>
          <target state="translated">世界の国境のZIPファイルには、&lt;a href=&quot;https://en.wikipedia.org/wiki/Shapefile&quot;&gt;ESRI Shapefile&lt;/a&gt;と総称される一連のデータファイルが含まれています。これは、最も一般的な地理空間データ形式の1つです。解凍すると、世界の国境データセットには次の拡張子を持つファイルが含まれます。</target>
        </trans-unit>
        <trans-unit id="bb808a0f4ccc3c226424f786d27cd223cda25037" translate="yes" xml:space="preserve">
          <source>The world borders data is available in this &lt;a href=&quot;https://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.zip&quot;&gt;zip file&lt;/a&gt;. Create a &lt;code&gt;data&lt;/code&gt; directory in the &lt;code&gt;world&lt;/code&gt; application, download the world borders data, and unzip. On GNU/Linux platforms, use the following commands:</source>
          <target state="translated">世界の国境データは、この&lt;a href=&quot;https://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.zip&quot;&gt;zipファイルで&lt;/a&gt;入手できます。 &lt;code&gt;world&lt;/code&gt; アプリケーションで &lt;code&gt;data&lt;/code&gt; ディレクトリを作成し、世界の国境データをダウンロードして解凍します。GNU / Linuxプラットフォームでは、次のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="18d9f4d4b960979287f9de53c1cb361b8dbc797b" translate="yes" xml:space="preserve">
          <source>The wrappers are modeled after &lt;a href=&quot;../http/middleware&quot;&gt;middleware&lt;/a&gt; &amp;ndash; they are callables which take another callable as one of their arguments. They call that callable to invoke the (possibly wrapped) database query, and they can do what they want around that call. They are, however, created and installed by user code, and so don&amp;rsquo;t need a separate factory like middleware do.</source>
          <target state="translated">ラッパーは&lt;a href=&quot;../http/middleware&quot;&gt;ミドルウェアに&lt;/a&gt;基づいてモデル化されています。これらは、引数の1つとして別の呼び出し可能オブジェクトを使用する呼び出し可能オブジェクトです。彼らはそのcallableを呼び出して（おそらくラップされた）データベースクエリを呼び出し、その呼び出しの周りでやりたいことを実行できます。ただし、これらはユーザーコードによって作成およびインストールされるため、ミドルウェアのように別個のファクトリを必要としません。</target>
        </trans-unit>
        <trans-unit id="b3b0fcbba295caf61bae168615e5bc75c064fb11" translate="yes" xml:space="preserve">
          <source>The year has an offset of +11:00 because the result transitioned into daylight saving time.</source>
          <target state="translated">結果がサマータイムに移行したため、年は+11:00のオフセットがあります。</target>
        </trans-unit>
        <trans-unit id="69d875fb99f9a1cf88fdf06c2a42dbb8d5880a19" translate="yes" xml:space="preserve">
          <source>The “sites” framework</source>
          <target state="translated">サイト」のフレームワーク</target>
        </trans-unit>
        <trans-unit id="b73acd4db8ef3e3c4621cc7bcd8969756a73f7bd" translate="yes" xml:space="preserve">
          <source>Their main use is to add common data shared by all templates to the context without repeating code in every view.</source>
          <target state="translated">彼らの主な用途は、すべてのビューでコードを繰り返すことなく、すべてのテンプレートで共有されている共通のデータをコンテキストに追加することです。</target>
        </trans-unit>
        <trans-unit id="7613f0c9cbe1da79dea8d1b08fe598652f58fc9c" translate="yes" xml:space="preserve">
          <source>Then Django attempts to import the &lt;code&gt;models&lt;/code&gt; submodule of each application, if there is one.</source>
          <target state="translated">次に、Djangoは、各アプリケーションの &lt;code&gt;models&lt;/code&gt; サブモジュール（存在する場合）をインポートしようとします。</target>
        </trans-unit>
        <trans-unit id="8cdffc32c937624675ba2e46e26a4737411084f8" translate="yes" xml:space="preserve">
          <source>Then any other &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt; tests (including doctests) that may alter the database without restoring it to its original state are run.</source>
          <target state="translated">次に、データベースを元の状態に復元せずに変更する可能性のある他の&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt;テスト（doctestを含む）が実行されます。</target>
        </trans-unit>
        <trans-unit id="502a52fb85029d1c8ff0b4c968afcaa60bc804c3" translate="yes" xml:space="preserve">
          <source>Then create a virtual environment for your project:</source>
          <target state="translated">次に、プロジェクト用の仮想環境を作成します。</target>
        </trans-unit>
        <trans-unit id="efbef5324e350d325d36775bc5ec708051767ad1" translate="yes" xml:space="preserve">
          <source>Then display the differences between your current copy of Django (with your changes) and the revision that you initially checked out earlier in the tutorial with:</source>
          <target state="translated">そして、あなたの現在の Django のコピー (あなたの変更を含む)と、チュートリアルで最初にチェックアウトしたリビジョンとの違いを表示してください。</target>
        </trans-unit>
        <trans-unit id="cf59a657d29a960b8c6ff2299d16b9a8954ce898" translate="yes" xml:space="preserve">
          <source>Then distance queries may be performed as follows:</source>
          <target state="translated">次に、距離クエリは以下のように実行されてもよい。</target>
        </trans-unit>
        <trans-unit id="518a996ac80772a95c380d44a6264f6172fa96b5" translate="yes" xml:space="preserve">
          <source>Then either:</source>
          <target state="translated">ならば、どっちでもいい。</target>
        </trans-unit>
        <trans-unit id="8d5637ef3657a8dd9ff5ca6f7935fab614661684" translate="yes" xml:space="preserve">
          <source>Then in the template any number of arguments, separated by spaces, may be passed to the template tag. Like in Python, the values for keyword arguments are set using the equal sign (&amp;ldquo;&lt;code&gt;=&lt;/code&gt;&amp;rdquo;) and must be provided after the positional arguments. For example:</source>
          <target state="translated">次に、テンプレートでは、スペースで区切られた任意の数の引数をテンプレートタグに渡すことができます。Pythonと同様に、キーワード引数の値は等号（「 &lt;code&gt;=&lt;/code&gt; 」）を使用して設定され、位置引数の後に指定する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="a5d2af8626419ec977c25f8d2966a5f28f7995f5" translate="yes" xml:space="preserve">
          <source>Then override the &lt;code&gt;post&lt;/code&gt; method of your &lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.FormView&quot;&gt;&lt;code&gt;FormView&lt;/code&gt;&lt;/a&gt; subclass to handle multiple file uploads:</source>
          <target state="translated">次に、&lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.FormView&quot;&gt; &lt;code&gt;FormView&lt;/code&gt; &lt;/a&gt;サブクラスの &lt;code&gt;post&lt;/code&gt; メソッドをオーバーライドして、複数のファイルのアップロードを処理します。</target>
        </trans-unit>
        <trans-unit id="821e0dad9b3ce9a76c464bf4ab6ee9319e18072c" translate="yes" xml:space="preserve">
          <source>Then set the &lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt; setting to &lt;code&gt;'path.to.MyStaticFilesStorage'&lt;/code&gt;.</source>
          <target state="translated">次に、&lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt; &lt;code&gt;STATICFILES_STORAGE&lt;/code&gt; &lt;/a&gt;設定を &lt;code&gt;'path.to.MyStaticFilesStorage'&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="c497ab6c8915be66ef6b4fc84aaecefe40f1bdd1" translate="yes" xml:space="preserve">
          <source>Then the &lt;code&gt;AuthorInterest&lt;/code&gt; is a &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#FormView&quot;&gt;&lt;code&gt;FormView&lt;/code&gt;&lt;/a&gt;, but we have to bring in &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; so we can find the author we&amp;rsquo;re talking about, and we have to remember to set &lt;code&gt;template_name&lt;/code&gt; to ensure that form errors will render the same template as &lt;code&gt;AuthorDisplay&lt;/code&gt; is using on &lt;code&gt;GET&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;AuthorInterest&lt;/code&gt; は&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#FormView&quot;&gt; &lt;code&gt;FormView&lt;/code&gt; &lt;/a&gt;ですが、&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt;者を見つけるためにSingleObjectMixinを取り込む必要があります。また、フォームエラーが &lt;code&gt;AuthorDisplay&lt;/code&gt; が &lt;code&gt;GET&lt;/code&gt; で使用しているのと同じテンプレートをレンダリングするように、 &lt;code&gt;template_name&lt;/code&gt; を設定することを忘れないでください。：</target>
        </trans-unit>
        <trans-unit id="fe24749df824a589a629df7177721e56708dcb91" translate="yes" xml:space="preserve">
          <source>Then the &lt;code&gt;AuthorInterest&lt;/code&gt; is a &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#FormView&quot;&gt;&lt;code&gt;FormView&lt;/code&gt;&lt;/a&gt;, but we have to bring in &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; so we can find the author we&amp;rsquo;re talking about, and we have to remember to set &lt;code&gt;template_name&lt;/code&gt; to ensure that form errors will render the same template as &lt;code&gt;AuthorDisplay&lt;/code&gt; is using on &lt;code&gt;GET&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;AuthorInterest&lt;/code&gt; は&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#FormView&quot;&gt; &lt;code&gt;FormView&lt;/code&gt; &lt;/a&gt;ですが、話している作成者を見つけるために&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; を取り込む&lt;/a&gt;必要があります。また、フォームエラーによって &lt;code&gt;AuthorDisplay&lt;/code&gt; が &lt;code&gt;GET&lt;/code&gt; で使用しているのと同じテンプレートがレンダリングされるように、 &lt;code&gt;template_name&lt;/code&gt; を設定することを忘れないでください。：</target>
        </trans-unit>
        <trans-unit id="7d5ba97fa64a9e045a1200cd0038f182a8f96a1a" translate="yes" xml:space="preserve">
          <source>Then the solution is to increase the value of the &lt;code&gt;max_allowed_packet&lt;/code&gt; setting in your MySQL configuration. For example, the default value may be something low like one megabyte &amp;ndash; the setting may be modified in MySQL&amp;rsquo;s configuration file (&lt;code&gt;my.cnf&lt;/code&gt;) in the &lt;code&gt;[mysqld]&lt;/code&gt; section:</source>
          <target state="translated">次に、解決策は、MySQL構成の &lt;code&gt;max_allowed_packet&lt;/code&gt; 設定の値を増やすことです。たとえば、デフォルト値は1メガバイトのように低い場合があります。MySQLの構成ファイル（ &lt;code&gt;my.cnf&lt;/code&gt; ）の &lt;code&gt;[mysqld]&lt;/code&gt; セクションで設定を変更できます。</target>
        </trans-unit>
        <trans-unit id="7ce5bc805c0da4a5d29a030956b60f9f7e177a95" translate="yes" xml:space="preserve">
          <source>Then we can use &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#CreateView&quot;&gt;&lt;code&gt;CreateView&lt;/code&gt;&lt;/a&gt; and friends to do the actual work. Notice how we&amp;rsquo;re just configuring the generic class-based views here; we don&amp;rsquo;t have to write any logic ourselves:</source>
          <target state="translated">次に、&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#CreateView&quot;&gt; &lt;code&gt;CreateView&lt;/code&gt; &lt;/a&gt;とフレンドを使用して実際の作業を行うことができます。ここで、一般的なクラスベースのビューを構成していることに注目してください。自分でロジックを記述する必要はありません。</target>
        </trans-unit>
        <trans-unit id="96227a3aa50bd3d3fd2fe0b74d97c63e0f975c06" translate="yes" xml:space="preserve">
          <source>Then we can use &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#CreateView&quot;&gt;&lt;code&gt;CreateView&lt;/code&gt;&lt;/a&gt; and friends to do the actual work. Notice how we&amp;rsquo;re just configuring the generic class-based views here; we don&amp;rsquo;t have to write any logic ourselves:</source>
          <target state="translated">次に、&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#CreateView&quot;&gt; &lt;code&gt;CreateView&lt;/code&gt; &lt;/a&gt;とその仲間を使用して実際の作業を行うことができます。ここで、一般的なクラスベースのビューを構成していることに注目してください。自分でロジックを書く必要はありません。</target>
        </trans-unit>
        <trans-unit id="ac322a79d9728d55382596eed7ca0b6c576e0b42" translate="yes" xml:space="preserve">
          <source>Then we need to add this new view into our URLconf. &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt; is a class, not a function, so we point the URL to the &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; class method instead, which provides a function-like entry to class-based views:</source>
          <target state="translated">次に、この新しいビューをURLconfに追加する必要があります。&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt;は関数ではなくクラスなので、代わりに&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt; &lt;code&gt;as_view()&lt;/code&gt; &lt;/a&gt;クラスメソッドへのURLをポイントします。これにより、クラスベースのビューに関数のようなエントリが提供されます。</target>
        </trans-unit>
        <trans-unit id="5f0d290c1e4ac103aa0c383ed2483d9abcc72288" translate="yes" xml:space="preserve">
          <source>Then we&amp;rsquo;d write our new view &amp;ndash; &lt;code&gt;get_object&lt;/code&gt; is the method that retrieves the object &amp;ndash; so we override it and wrap the call:</source>
          <target state="translated">次に、新しいビューを記述します &lt;code&gt;get_object&lt;/code&gt; はオブジェクトを取得するメソッドです。そのため、それをオーバーライドして呼び出しをラップします。</target>
        </trans-unit>
        <trans-unit id="d5554ed3752b4200d515044ce6d7c75db0de7b6f" translate="yes" xml:space="preserve">
          <source>Then when you create your inline formset, pass in the optional argument &lt;code&gt;formset&lt;/code&gt;:</source>
          <target state="translated">次に、インラインformsetを作成するときに、オプションの引数 &lt;code&gt;formset&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="343c7250fda77c83c03efcd07fba0430ab3db162" translate="yes" xml:space="preserve">
          <source>Then you can choose which tests to run. For example, to run only fast tests:</source>
          <target state="translated">そして、実行するテストを選択することができます。例えば、高速なテストだけを実行するには</target>
        </trans-unit>
        <trans-unit id="ac05008cd958b2f6030c8064248e03e3a23ed979" translate="yes" xml:space="preserve">
          <source>Then you could use the following constructs in Jinja2 templates:</source>
          <target state="translated">そうすると、Jinja2のテンプレートで以下のような構成を使うことができます。</target>
        </trans-unit>
        <trans-unit id="0df1f81e0f1c638996941de19f9d6ce39f0cd09a" translate="yes" xml:space="preserve">
          <source>Then, add a &lt;code&gt;LiveServerTestCase&lt;/code&gt;-based test to your app&amp;rsquo;s tests module (for example: &lt;code&gt;myapp/tests.py&lt;/code&gt;). For this example, we&amp;rsquo;ll assume you&amp;rsquo;re using the &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;staticfiles&lt;/code&gt;&lt;/a&gt; app and want to have static files served during the execution of your tests similar to what we get at development time with &lt;code&gt;DEBUG=True&lt;/code&gt;, i.e. without having to collect them using &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt;. We&amp;rsquo;ll use the &lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.testing.StaticLiveServerTestCase&quot;&gt;&lt;code&gt;StaticLiveServerTestCase&lt;/code&gt;&lt;/a&gt; subclass which provides that functionality. Replace it with &lt;code&gt;django.test.LiveServerTestCase&lt;/code&gt; if you don&amp;rsquo;t need that.</source>
          <target state="translated">次に、 &lt;code&gt;LiveServerTestCase&lt;/code&gt; ベースのテストをアプリのテストモジュールに追加します（例： &lt;code&gt;myapp/tests.py&lt;/code&gt; ）。この例では、&lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;staticfiles&lt;/code&gt; &lt;/a&gt;アプリを使用していて、テストの実行中に、開発時に &lt;code&gt;DEBUG=True&lt;/code&gt; を使用&lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt;た場合と同様に、つまりcollectstaticを使用して収集する必要がない静的ファイルを提供したいとします。その機能を提供する&lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.testing.StaticLiveServerTestCase&quot;&gt; &lt;code&gt;StaticLiveServerTestCase&lt;/code&gt; &lt;/a&gt;サブクラスを使用します。不要な場合は、 &lt;code&gt;django.test.LiveServerTestCase&lt;/code&gt; に置き換えてください。</target>
        </trans-unit>
        <trans-unit id="6b8fae564640dfbcd26a65f5a5829a26b29b5e07" translate="yes" xml:space="preserve">
          <source>Then, add the following required settings to your Django settings file:</source>
          <target state="translated">そして、以下の必要な設定をDjangoの設定ファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="b3f78984be334ee45163950bb1bce463c55d08f8" translate="yes" xml:space="preserve">
          <source>Then, add to your stylesheet (&lt;code&gt;polls/static/polls/style.css&lt;/code&gt;):</source>
          <target state="translated">次に、スタイルシートに追加します（ &lt;code&gt;polls/static/polls/style.css&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="102a55bf8aed728efb3a35fad86d28040c8675ee" translate="yes" xml:space="preserve">
          <source>Then, all other Django-based tests (test cases based on &lt;a href=&quot;tools#django.test.SimpleTestCase&quot;&gt;&lt;code&gt;SimpleTestCase&lt;/code&gt;&lt;/a&gt;, including &lt;a href=&quot;tools#django.test.TransactionTestCase&quot;&gt;&lt;code&gt;TransactionTestCase&lt;/code&gt;&lt;/a&gt;) are run with no particular ordering guaranteed nor enforced among them.</source>
          <target state="translated">次に、他のすべてのDjangoベースのテスト（&lt;a href=&quot;tools#django.test.TransactionTestCase&quot;&gt; &lt;code&gt;TransactionTestCase&lt;/code&gt; &lt;/a&gt;を含む&lt;a href=&quot;tools#django.test.SimpleTestCase&quot;&gt; &lt;code&gt;SimpleTestCase&lt;/code&gt; &lt;/a&gt;に基づくテストケース）が実行され、それらの間で特定の順序が保証または適用されません。</target>
        </trans-unit>
        <trans-unit id="a5014bb8db4f2317d93680c7f45a1d9c21eac754" translate="yes" xml:space="preserve">
          <source>Then, all the named fixtures are installed. In this example, Django will install any JSON fixture named &lt;code&gt;mammals&lt;/code&gt;, followed by any fixture named &lt;code&gt;birds&lt;/code&gt;. See the &lt;a href=&quot;../../ref/django-admin#django-admin-loaddata&quot;&gt;&lt;code&gt;loaddata&lt;/code&gt;&lt;/a&gt; documentation for more details on defining and installing fixtures.</source>
          <target state="translated">次に、名前付きのすべてのフィクスチャがインストールされます。この例では、Djangoは &lt;code&gt;mammals&lt;/code&gt; という名前のJSONフィクスチャをインストールし、その後に &lt;code&gt;birds&lt;/code&gt; という名前のフィクスチャをインストールします。フィクスチャの定義とインストールの詳細については、&lt;a href=&quot;../../ref/django-admin#django-admin-loaddata&quot;&gt; &lt;code&gt;loaddata&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="74e1fac30320b143b022b34f80b9e398b40dceb0" translate="yes" xml:space="preserve">
          <source>Then, any time you want to use that custom tag, load its library and call it without any arguments, like so:</source>
          <target state="translated">そして、そのカスタムタグを使いたいときはいつでも、そのライブラリをロードして、引数なしで呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="b0007cf87d64dd11382da88f432342f078f704b8" translate="yes" xml:space="preserve">
          <source>Then, create the template &lt;code&gt;my_template_name.txt&lt;/code&gt;, with this template code:</source>
          <target state="translated">次に、このテンプレートコードを使用して、テンプレート &lt;code&gt;my_template_name.txt&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="c6dfd5133cdcd2319a7314b1af10cdd7c87c9c63" translate="yes" xml:space="preserve">
          <source>Then, edit the file and replace &lt;code&gt;{{ site_header|default:_('Django administration') }}&lt;/code&gt; (including the curly braces) with your own site&amp;rsquo;s name as you see fit. You should end up with a section of code like:</source>
          <target state="translated">次に、ファイルを編集し、 &lt;code&gt;{{ site_header|default:_('Django administration') }}&lt;/code&gt; （中かっこを含む）を自分のサイトの名前に置き換えます。あなたは次のようなコードのセクションで終わるはずです：</target>
        </trans-unit>
        <trans-unit id="991367037470f8675cab7f6aa189140cd7f90dee" translate="yes" xml:space="preserve">
          <source>Then, it looks for and uses if it exists a &lt;code&gt;locale&lt;/code&gt; directory in each of the installed apps listed in &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;. The ones appearing first have higher precedence than the ones appearing later.</source>
          <target state="translated">次に、&lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; に&lt;/a&gt;リストされているインストール済みアプリのそれぞれに &lt;code&gt;locale&lt;/code&gt; ディレクトリが存在するかどうかを探して使用します。最初に表示されるものは、後で表示されるものよりも優先順位が高くなります。</target>
        </trans-unit>
        <trans-unit id="6317db8091ecc8ccfbc2928cd068941f4355f082" translate="yes" xml:space="preserve">
          <source>Then, open up the file; it should look something like this:</source>
          <target state="translated">次に、ファイルを開きます。</target>
        </trans-unit>
        <trans-unit id="b9f12e2b9930bfb78344baa7531604b32101213f" translate="yes" xml:space="preserve">
          <source>Then, pass your &lt;code&gt;BaseAuthorFormSet&lt;/code&gt; class to the factory function:</source>
          <target state="translated">次に、 &lt;code&gt;BaseAuthorFormSet&lt;/code&gt; クラスをファクトリ関数に渡します。</target>
        </trans-unit>
        <trans-unit id="d67744644efd26e6ce1181a26664d4ce860f2c4d" translate="yes" xml:space="preserve">
          <source>Then, pass your model form to the factory function:</source>
          <target state="translated">そして、モデルフォームをファクトリー関数に渡します。</target>
        </trans-unit>
        <trans-unit id="85485b5bd858245e323a74f9ab2b04b152bb9a9b" translate="yes" xml:space="preserve">
          <source>Then, to leverage this in your migrations, do the following:</source>
          <target state="translated">そして、これをマイグレーションで活用するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="83e5488000bfc60bf294db9f2716de673b753dd9" translate="yes" xml:space="preserve">
          <source>Then, to register this custom user model with Django&amp;rsquo;s admin, the following code would be required in the app&amp;rsquo;s &lt;code&gt;admin.py&lt;/code&gt; file:</source>
          <target state="translated">次に、このカスタムユーザーモデルをDjangoの管理者に登録するには、アプリの &lt;code&gt;admin.py&lt;/code&gt; ファイルに次のコードが必要です。</target>
        </trans-unit>
        <trans-unit id="2304d640a16ae9bfebc931161006126d186e787e" translate="yes" xml:space="preserve">
          <source>Then:</source>
          <target state="translated">Then:</target>
        </trans-unit>
        <trans-unit id="03e03cc321b5b6d9559b081ba99edb7ddf892e7d" translate="yes" xml:space="preserve">
          <source>There are &lt;a href=&quot;https://bugs.mysql.com/bug.php?id=48875&quot;&gt;known issues&lt;/a&gt; in even the latest versions of MySQL that can cause the case of a table name to be altered when certain SQL statements are executed under certain conditions. It is recommended that you use lowercase table names, if possible, to avoid any problems that might arise from this behavior. Django uses lowercase table names when it auto-generates table names from models, so this is mainly a consideration if you are overriding the table name via the &lt;a href=&quot;models/options#django.db.models.Options.db_table&quot;&gt;&lt;code&gt;db_table&lt;/code&gt;&lt;/a&gt; parameter.</source>
          <target state="translated">ある&lt;a href=&quot;https://bugs.mysql.com/bug.php?id=48875&quot;&gt;既知の問題&lt;/a&gt;特定のSQL文は、一定の条件の下で実行されたときに、テーブル名の場合は、変更されることがありますのMySQLのも、最新バージョンでは。この動作から生じる可能性のある問題を回避するために、可能であれば小文字のテーブル名を使用することをお勧めします。 Djangoは、モデルからテーブル名を自動生成するときに小文字のテーブル名を使用するため、&lt;a href=&quot;models/options#django.db.models.Options.db_table&quot;&gt; &lt;code&gt;db_table&lt;/code&gt; &lt;/a&gt;パラメータを介してテーブル名をオーバーライドする場合、これは主に考慮事項です。</target>
        </trans-unit>
        <trans-unit id="04b75c61ec9baf5aabbeaca16361184e7040c82f" translate="yes" xml:space="preserve">
          <source>There are a couple of notable things going on. First, &lt;code&gt;AbsoluteValueLessThan&lt;/code&gt; isn&amp;rsquo;t calling &lt;code&gt;process_lhs()&lt;/code&gt;. Instead it skips the transformation of the &lt;code&gt;lhs&lt;/code&gt; done by &lt;code&gt;AbsoluteValue&lt;/code&gt; and uses the original &lt;code&gt;lhs&lt;/code&gt;. That is, we want to get &lt;code&gt;&quot;experiments&quot;.&quot;change&quot;&lt;/code&gt; not &lt;code&gt;ABS(&quot;experiments&quot;.&quot;change&quot;)&lt;/code&gt;. Referring directly to &lt;code&gt;self.lhs.lhs&lt;/code&gt; is safe as &lt;code&gt;AbsoluteValueLessThan&lt;/code&gt; can be accessed only from the &lt;code&gt;AbsoluteValue&lt;/code&gt; lookup, that is the &lt;code&gt;lhs&lt;/code&gt; is always an instance of &lt;code&gt;AbsoluteValue&lt;/code&gt;.</source>
          <target state="translated">いくつかの注目すべきことが進行中です。まず、 &lt;code&gt;AbsoluteValueLessThan&lt;/code&gt; が &lt;code&gt;process_lhs()&lt;/code&gt; を呼び出していません。代わりに、 &lt;code&gt;AbsoluteValue&lt;/code&gt; によって行われる &lt;code&gt;lhs&lt;/code&gt; の変換をスキップし、元の &lt;code&gt;lhs&lt;/code&gt; を使用します。つまり、 &lt;code&gt;ABS(&quot;experiments&quot;.&quot;change&quot;)&lt;/code&gt; &lt;code&gt;&quot;experiments&quot;.&quot;change&quot;&lt;/code&gt; なく、&quot;experiments&quot;。 &quot;change&quot;を取得する必要があります。直接参照 &lt;code&gt;self.lhs.lhs&lt;/code&gt; するように安全である &lt;code&gt;AbsoluteValueLessThan&lt;/code&gt; はからのみアクセスすることができる &lt;code&gt;AbsoluteValue&lt;/code&gt; であるルックアップ、 &lt;code&gt;lhs&lt;/code&gt; 常にのインスタンスである &lt;code&gt;AbsoluteValue&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb953915ffbd104c695705a592a46d68f3ef2b39" translate="yes" xml:space="preserve">
          <source>There are a couple of options, and you may use any combination of them together:</source>
          <target state="translated">いくつかの選択肢があり、任意の組み合わせを一緒に使用することができます。</target>
        </trans-unit>
        <trans-unit id="121a33293b10ada586c2e4b5754a225a451b7da6" translate="yes" xml:space="preserve">
          <source>There are a couple of things to note, however.</source>
          <target state="translated">ただし、注意すべき点はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="731a3d5cd5ff4039694cb924c720d645ebbd8e3f" translate="yes" xml:space="preserve">
          <source>There are a few functions in &lt;code&gt;django.contrib.auth.password_validation&lt;/code&gt; that you can call from your own forms or other code to integrate password validation. This can be useful if you use custom forms for password setting, or if you have API calls that allow passwords to be set, for example.</source>
          <target state="translated">&lt;code&gt;django.contrib.auth.password_validation&lt;/code&gt; には、独自のフォームや他のコードから呼び出してパスワード検証を統合できる関数がいくつかあります。これは、パスワード設定にカスタムフォームを使用する場合や、たとえばパスワードの設定を許可するAPI呼び出しがある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="c8d0a38a5ac631e82cb27b704ccf2fa8a951bf4d" translate="yes" xml:space="preserve">
          <source>There are a few other helpers outside of the &lt;a href=&quot;#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;staticfiles&lt;/code&gt;&lt;/a&gt; app to work with static files:</source>
          <target state="translated">&lt;a href=&quot;#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;staticfiles&lt;/code&gt; &lt;/a&gt;アプリ以外にも、静的ファイルを操作するヘルパーがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="386424d5f4079becf6d133836bac41414fc383a7" translate="yes" xml:space="preserve">
          <source>There are a few other methods and attributes available on &lt;code&gt;UploadedFile&lt;/code&gt; objects; see &lt;a href=&quot;../../ref/files/uploads#django.core.files.uploadedfile.UploadedFile&quot;&gt;&lt;code&gt;UploadedFile&lt;/code&gt;&lt;/a&gt; for a complete reference.</source>
          <target state="translated">&lt;code&gt;UploadedFile&lt;/code&gt; オブジェクトで使用できる他のいくつかのメソッドと属性があります。完全なリファレンスについては&lt;a href=&quot;../../ref/files/uploads#django.core.files.uploadedfile.UploadedFile&quot;&gt; &lt;code&gt;UploadedFile&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b20fdd0663aa959be618e8605e33bd6a99ce8d3c" translate="yes" xml:space="preserve">
          <source>There are a few restrictions on the intermediate model:</source>
          <target state="translated">中間モデルにはいくつかの制約があります。</target>
        </trans-unit>
        <trans-unit id="8ad305b3c6b245efb4e16125a98bf9cbdba76d76" translate="yes" xml:space="preserve">
          <source>There are a few settings which control Django&amp;rsquo;s file upload behavior. See &lt;a href=&quot;../../ref/settings#file-upload-settings&quot;&gt;File Upload Settings&lt;/a&gt; for details.</source>
          <target state="translated">Djangoのファイルアップロード動作を制御する設定がいくつかあります。詳細については、&lt;a href=&quot;../../ref/settings#file-upload-settings&quot;&gt;ファイルのアップロード設定&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4e0f843549ffbd0e46b24f96a7dee9b3678f8848" translate="yes" xml:space="preserve">
          <source>There are a number of custom lookups and transforms for &lt;a href=&quot;#django.contrib.postgres.fields.ArrayField&quot;&gt;&lt;code&gt;ArrayField&lt;/code&gt;&lt;/a&gt;. We will use the following example model:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.postgres.fields.ArrayField&quot;&gt; &lt;code&gt;ArrayField&lt;/code&gt; に&lt;/a&gt;は、多数のカスタム検索と変換があります。次のサンプルモデルを使用します。</target>
        </trans-unit>
        <trans-unit id="00d8108092f7f1fa9cee59beb2088dc32ed6ae5c" translate="yes" xml:space="preserve">
          <source>There are a number of custom lookups and transforms for range fields. They are available on all the above fields, but we will use the following example model:</source>
          <target state="translated">範囲フィールドには、多数のカスタムルックアップとトランスフォームがあります。これらは上記のすべてのフィールドで利用できますが、以下の例のモデルを使用します。</target>
        </trans-unit>
        <trans-unit id="87b4ac75bf5a1dbf81d6ae6f9252c6978b312484" translate="yes" xml:space="preserve">
          <source>There are a number of free services that will analyze and report on the performance of your site&amp;rsquo;s pages from the perspective of a remote HTTP client, in effect simulating the experience of an actual user.</source>
          <target state="translated">リモートHTTPクライアントの観点からサイトのページのパフォーマンスを分析およびレポートし、実際に実際のユーザーのエクスペリエンスをシミュレートする無料のサービスがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="b1b17eafe5de2d1ae75237122f28ee93b1cb3a59" translate="yes" xml:space="preserve">
          <source>There are a number of functions to use in a &lt;a href=&quot;expressions#django.db.models.expressions.Window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt; expression for computing the rank of elements or the &lt;a href=&quot;#django.db.models.functions.Ntile&quot;&gt;&lt;code&gt;Ntile&lt;/code&gt;&lt;/a&gt; of some rows.</source>
          <target state="translated">要素のランクまたは一部の行の&lt;a href=&quot;#django.db.models.functions.Ntile&quot;&gt; &lt;code&gt;Ntile&lt;/code&gt; &lt;/a&gt;を計算するために、&lt;a href=&quot;expressions#django.db.models.expressions.Window&quot;&gt; &lt;code&gt;Window&lt;/code&gt; &lt;/a&gt;式で使用するいくつかの関数があります。</target>
        </trans-unit>
        <trans-unit id="c0759129393d1e4adb6fede723af7e2e3dd13e86" translate="yes" xml:space="preserve">
          <source>There are a variety of techniques and tools that can help get your code running more efficiently - faster, and using fewer system resources.</source>
          <target state="translated">コードをより効率的に実行するための様々なテクニックやツールがあります-より速く、より少ないシステムリソースを使用しています。</target>
        </trans-unit>
        <trans-unit id="ba3254d467d0968aeb0dacc8b00212e7fcbf3246" translate="yes" xml:space="preserve">
          <source>There are additional options available for Geometry fields. All the following options are optional.</source>
          <target state="translated">ジオメトリフィールドには、その他にもオプションがあります。以下のオプションはすべてオプションです。</target>
        </trans-unit>
        <trans-unit id="67d1e490be9044c5f767856617ff952784c76fee" translate="yes" xml:space="preserve">
          <source>There are also a number of &lt;a href=&quot;#third-party-notes&quot;&gt;database backends provided by third parties&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#third-party-notes&quot;&gt;サードパーティが提供するデータベースバックエンド&lt;/a&gt;も多数あります。</target>
        </trans-unit>
        <trans-unit id="7733319a183b2ee7a3a47058a440e107178b649c" translate="yes" xml:space="preserve">
          <source>There are also mixins involved in the generic edit views (&lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.FormView&quot;&gt;&lt;code&gt;FormView&lt;/code&gt;&lt;/a&gt;, and the model-specific views &lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.CreateView&quot;&gt;&lt;code&gt;CreateView&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.UpdateView&quot;&gt;&lt;code&gt;UpdateView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.DeleteView&quot;&gt;&lt;code&gt;DeleteView&lt;/code&gt;&lt;/a&gt;), and in the date-based generic views. These are covered in the &lt;a href=&quot;../../ref/class-based-views/mixins&quot;&gt;mixin reference documentation&lt;/a&gt;.</source>
          <target state="translated">一般的な編集ビュー（&lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.FormView&quot;&gt; &lt;code&gt;FormView&lt;/code&gt; &lt;/a&gt;、およびモデル固有のビュー&lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.CreateView&quot;&gt; &lt;code&gt;CreateView&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.UpdateView&quot;&gt; &lt;code&gt;UpdateView&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.DeleteView&quot;&gt; &lt;code&gt;DeleteView&lt;/code&gt; &lt;/a&gt;）、および日付ベースの一般的なビューにもMixinが含まれています。これらは、&lt;a href=&quot;../../ref/class-based-views/mixins&quot;&gt;ミックスインリファレンスドキュメントで説明されています&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="73b2f2b9ac2904460e5497a84584103e8ab333cf" translate="yes" xml:space="preserve">
          <source>There are also more specialized &lt;code&gt;Operation&lt;/code&gt; objects which are for things like &lt;a href=&quot;../topics/migrations#data-migrations&quot;&gt;data migrations&lt;/a&gt; and for advanced manual database manipulation. You can also write your own &lt;code&gt;Operation&lt;/code&gt; classes if you want to encapsulate a custom change you commonly make.</source>
          <target state="translated">また、&lt;a href=&quot;../topics/migrations#data-migrations&quot;&gt;データ移行&lt;/a&gt;や高度な手動データベース操作などのための、より特化した &lt;code&gt;Operation&lt;/code&gt; オブジェクトもあります。通常行うカスタム変更をカプセル化する場合は、独自の &lt;code&gt;Operation&lt;/code&gt; クラスを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="4ac5aa2bab85a8f18fd4efe916be287503958a99" translate="yes" xml:space="preserve">
          <source>There are also several paid-for services that perform a similar analysis, including some that are Django-aware and can integrate with your codebase to profile its performance far more comprehensively.</source>
          <target state="translated">また、同様の分析を行う有料のサービスもいくつかあり、その中には Django を意識したものや、コードベースと統合してパフォーマンスをより包括的にプロファイル化できるものもあります。</target>
        </trans-unit>
        <trans-unit id="6a54fd245d9a51c76dba8315fff5ff4f7b82a346" translate="yes" xml:space="preserve">
          <source>There are also shortcuts to make creating messages with common levels easier. When using these classes you can omit the &lt;code&gt;level&lt;/code&gt; argument because it is implied by the class name.</source>
          <target state="translated">一般的なレベルのメッセージを簡単に作成するためのショートカットもあります。これらのクラスを使用する場合、 &lt;code&gt;level&lt;/code&gt; 名はクラス名に含まれるため、省略できます。</target>
        </trans-unit>
        <trans-unit id="5760de18cd4d5787da36c2d619fa8bc63c3bab39" translate="yes" xml:space="preserve">
          <source>There are also some filters available for convenience:</source>
          <target state="translated">また、便利なようにフィルターもいくつか用意されています。</target>
        </trans-unit>
        <trans-unit id="f4f52d7538b08c4512077ec4f0de3a634ca2114c" translate="yes" xml:space="preserve">
          <source>There are cases when &lt;code&gt;CsrfViewMiddleware.process_view&lt;/code&gt; may not have run before your view is run - 404 and 500 handlers, for example - but you still need the CSRF token in a form.</source>
          <target state="translated">ビューが実行される前に &lt;code&gt;CsrfViewMiddleware.process_view&lt;/code&gt; が実行されなかった可能性があります（404ハンドラーや500ハンドラーなど）。ただし、フォームにはCSRFトークンが必要です。</target>
        </trans-unit>
        <trans-unit id="e261a626c16d3a9f7d6292e32002bd7c73699094" translate="yes" xml:space="preserve">
          <source>There are different methods to implement these views in your project. The easiest way is to include the provided URLconf in &lt;code&gt;django.contrib.auth.urls&lt;/code&gt; in your own URLconf, for example:</source>
          <target state="translated">これらのビューをプロジェクトに実装する方法はいくつかあります。最も簡単な方法は、提供のURLconfを含めることです &lt;code&gt;django.contrib.auth.urls&lt;/code&gt; 例えば、あなた自身のURLconfで：</target>
        </trans-unit>
        <trans-unit id="fba4a4e75d1df7b5e57f01418bced5773b17e19d" translate="yes" xml:space="preserve">
          <source>There are five range field types, corresponding to the built-in range types in PostgreSQL. These fields are used to store a range of values; for example the start and end timestamps of an event, or the range of ages an activity is suitable for.</source>
          <target state="translated">5つの範囲フィールド型があり、PostgreSQLの組み込み範囲型に対応しています。これらのフィールドは値の範囲を格納するために使用されます。例えば、イベントの開始と終了のタイムスタンプや、アクティビティに適した年齢の範囲などです。</target>
        </trans-unit>
        <trans-unit id="a9b9fb85e3e9211029bf261389ce28a69c628512" translate="yes" xml:space="preserve">
          <source>There are four types of values that can be used in &lt;code&gt;list_display&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;list_display&lt;/code&gt; で使用できる値には4つのタイプがあります。</target>
        </trans-unit>
        <trans-unit id="1f98148510509194e859c01be9e11e92768de57c" translate="yes" xml:space="preserve">
          <source>There are many alternatives for using searching software, some of the most prominent are &lt;a href=&quot;https://www.elastic.co/&quot;&gt;Elastic&lt;/a&gt; and &lt;a href=&quot;https://lucene.apache.org/solr/&quot;&gt;Solr&lt;/a&gt;. These are full document-based search solutions. To use them with data from Django models, you&amp;rsquo;ll need a layer which translates your data into a textual document, including back-references to the database ids. When a search using the engine returns a certain document, you can then look it up in the database. There are a variety of third-party libraries which are designed to help with this process.</source>
          <target state="translated">検索ソフトウェアを使用する方法は数多くありますが、最も目立つのは&lt;a href=&quot;https://www.elastic.co/&quot;&gt;Elastic&lt;/a&gt;と&lt;a href=&quot;https://lucene.apache.org/solr/&quot;&gt;Solr&lt;/a&gt;です。これらは完全なドキュメントベースの検索ソリューションです。Djangoモデルからのデータでそれらを使用するには、データをデータベースドキュメントへの後方参照を含むテキストドキュメントに変換するレイヤーが必要です。エンジンを使用した検索で特定のドキュメントが返された場合は、それをデータベースで検索できます。このプロセスを支援するために設計されたさまざまなサードパーティライブラリがあります。</target>
        </trans-unit>
        <trans-unit id="7e0f8dd4b809ced810b321c4ca59ad5cb144a472" translate="yes" xml:space="preserve">
          <source>There are many different ways to import data into a spatial database &amp;ndash; besides the tools included within GeoDjango, you may also use the following:</source>
          <target state="translated">空間データベースにデータをインポートするには、さまざまな方法があります。GeoDjangoに含まれているツールの他に、次の方法も使用できます。</target>
        </trans-unit>
        <trans-unit id="d46a0cb550df1d7e7e5a2af836842f4a6edfcdcb" translate="yes" xml:space="preserve">
          <source>There are many options for deploying your Django application, based on your architecture or your particular business needs, but that discussion is outside the scope of what Django can give you as guidance.</source>
          <target state="translated">あなたのアーキテクチャや特定のビジネスニーズに基づいて、Django アプリケーションをデプロイするための多くの選択肢がありますが、この議論は Django がガイダンスとして提供できる範囲外です。</target>
        </trans-unit>
        <trans-unit id="cb71e78e23143f9c58be0e1a4d3b0283bc9e3fb4" translate="yes" xml:space="preserve">
          <source>There are many ways to approach writing tests.</source>
          <target state="translated">テストの書き方にはいろいろなアプローチがあります。</target>
        </trans-unit>
        <trans-unit id="d82ce399e41d9ada125c24412befb44b2db38a07" translate="yes" xml:space="preserve">
          <source>There are now a total of three forms showing above. One for the initial data that was passed in and two extra forms. Also note that we are passing in a list of dictionaries as the initial data.</source>
          <target state="translated">上に表示されているフォームは全部で3つあります。1つは初期データとして渡されたもので、2つのフォームが追加されています。また、初期データとして辞書のリストを渡していることにも注意してください。</target>
        </trans-unit>
        <trans-unit id="0675d92987ebc85dea15e155c04c65d27ed914a0" translate="yes" xml:space="preserve">
          <source>There are other output options though for the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; pairs:</source>
          <target state="translated">&lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; / &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; のペアには他にも出力オプションがあります：</target>
        </trans-unit>
        <trans-unit id="b890167490cfa71a2c2750ecaf4bbbf4044790ed" translate="yes" xml:space="preserve">
          <source>There are other trade-offs to bear in mind. Your own time is a valuable resource, more precious than CPU time. Some improvements might be too difficult to be worth implementing, or might affect the portability or maintainability of the code. Not all performance improvements are worth the effort.</source>
          <target state="translated">心に留めておくべきトレードオフは他にもあります。あなた自身の時間は貴重な資源であり、CPU の時間よりも貴重なものです。改良の中には、実装する価値のあるものにするには難しすぎたり、コードの移植性や保守性に影響を及ぼす可能性があるものもあります。すべての性能改善が努力に見合うものではありません。</target>
        </trans-unit>
        <trans-unit id="5447b8a8aa38e50b103d54b5c95d6ddb38da9743" translate="yes" xml:space="preserve">
          <source>There are security risks if you are accepting uploaded content from untrusted users! See the security guide&amp;rsquo;s topic on &lt;a href=&quot;../security#user-uploaded-content-security&quot;&gt;User-uploaded content&lt;/a&gt; for mitigation details.</source>
          <target state="translated">信頼できないユーザーからアップロードされたコンテンツを受け入れる場合、セキュリティ上のリスクがあります。軽減策の詳細については、&lt;a href=&quot;../security#user-uploaded-content-security&quot;&gt;ユーザーがアップロードしたコンテンツ&lt;/a&gt;に関するセキュリティガイドのトピックをご覧ください。</target>
        </trans-unit>
        <trans-unit id="bc6b23babe3f3faae698cf4967c8ca480e73246b" translate="yes" xml:space="preserve">
          <source>There are security risks if you are accepting uploaded content from untrusted users! See the security guide&amp;rsquo;s topic on &lt;a href=&quot;../topics/security#user-uploaded-content-security&quot;&gt;User-uploaded content&lt;/a&gt; for mitigation details.</source>
          <target state="translated">信頼できないユーザーからアップロードされたコンテンツを受け入れる場合、セキュリティ上のリスクがあります。軽減策の詳細については、&lt;a href=&quot;../topics/security#user-uploaded-content-security&quot;&gt;ユーザーがアップロードしたコンテンツ&lt;/a&gt;に関するセキュリティガイドのトピックをご覧ください。</target>
        </trans-unit>
        <trans-unit id="5440f1eeb6c5554f991bdd01619224b02c477d9c" translate="yes" xml:space="preserve">
          <source>There are several commands which you will use to interact with migrations and Django&amp;rsquo;s handling of database schema:</source>
          <target state="translated">移行やDjangoのデータベーススキーマの処理を操作するために使用するコマンドがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="b47d4b1128fa9f63cdd5a6ffafbb68a17a586a50" translate="yes" xml:space="preserve">
          <source>There are several other ways to customize the order:</source>
          <target state="translated">他にもいくつかのカスタマイズ方法があります。</target>
        </trans-unit>
        <trans-unit id="3c8daea2ca7aa9f48eae0cb4490b703d0fcb0ee3" translate="yes" xml:space="preserve">
          <source>There are several ways to include the flat pages in your URLconf. You can dedicate a particular path to flat pages:</source>
          <target state="translated">フラットページを URLconf に含めるにはいくつかの方法があります。フラットページに特定のパスを割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="919e08d83f9bb207a0c2ffc9fb3d215e54e570da" translate="yes" xml:space="preserve">
          <source>There are several ways to recover from this sort of error.</source>
          <target state="translated">このようなエラーから復旧する方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="5a8e4e68fdf7d30ee2ea2be7fb1d46bbe59cabd2" translate="yes" xml:space="preserve">
          <source>There are some additional caveats to be aware of:</source>
          <target state="translated">その他にも注意すべき点がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="374a4fcc956d29e47334404f1ce4c53441954cad" translate="yes" xml:space="preserve">
          <source>There are special considerations described in &lt;a href=&quot;https://sqlite.org/isolation.html&quot;&gt;Isolation In SQLite&lt;/a&gt; when modifying a table while iterating over it using &lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.iterator&quot;&gt;&lt;code&gt;QuerySet.iterator()&lt;/code&gt;&lt;/a&gt;. If a row is added, changed, or deleted within the loop, then that row may or may not appear, or may appear twice, in subsequent results fetched from the iterator. Your code must handle this.</source>
          <target state="translated">&lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.iterator&quot;&gt; &lt;code&gt;QuerySet.iterator()&lt;/code&gt; &lt;/a&gt;を使用してテーブルを反復しながらテーブルを変更する場合、&lt;a href=&quot;https://sqlite.org/isolation.html&quot;&gt;SQLite&lt;/a&gt;での分離で説明されている特別な考慮事項があります。ループ内で行が追加、変更、または削除されると、イテレーターからフェッチされた後続の結果に、その行が表示される場合と表示されない場合、または2回表示される場合があります。コードでこれを処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="1dbe9bb8365d832ccc308e2c7d571b7eed695798" translate="yes" xml:space="preserve">
          <source>There are subclasses to make creating messages with common levels easier. When using them you can omit the &lt;code&gt;level&lt;/code&gt; argument because it is implied by the class name.</source>
          <target state="translated">一般的なレベルのメッセージを簡単に作成するためのサブクラスがあります。それらを使用する場合は、クラス名によって暗黙に指定されるため、 &lt;code&gt;level&lt;/code&gt; 引数を省略できます。</target>
        </trans-unit>
        <trans-unit id="60f34bb3c48d35bba7edc3d9c1f3601021b1076b" translate="yes" xml:space="preserve">
          <source>There are three circumstances under which a &lt;code&gt;TemplateResponse&lt;/code&gt; will be rendered:</source>
          <target state="translated">&lt;code&gt;TemplateResponse&lt;/code&gt; がレンダリングされる状況は3つあります。</target>
        </trans-unit>
        <trans-unit id="7d8b284f3a8acce026acc7560c1b78c9badc6c46" translate="yes" xml:space="preserve">
          <source>There are three main situations where Django needs to interact with the database backend and fields:</source>
          <target state="translated">Django がデータベースバックエンドやフィールドと対話する必要がある主な状況は 3 つあります。</target>
        </trans-unit>
        <trans-unit id="a49e65b99bc0593e177ed5bddad001b68056aff0" translate="yes" xml:space="preserve">
          <source>There are three parts to setting up a &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; の&lt;/a&gt;設定には3つの部分があります。</target>
        </trans-unit>
        <trans-unit id="60e657cd72008e9e60db47de789dcec009e637d6" translate="yes" xml:space="preserve">
          <source>There are three steps involved in validating a model:</source>
          <target state="translated">モデルの検証には3つのステップがあります。</target>
        </trans-unit>
        <trans-unit id="e34f5a9960e13ab20b5e9b5798782887b379e349" translate="yes" xml:space="preserve">
          <source>There are three styles of inheritance that are possible in Django.</source>
          <target state="translated">Djangoで可能な継承には3つのスタイルがあります。</target>
        </trans-unit>
        <trans-unit id="74e3fa28c76dc98655dad9a3ba9d091ce88206c5" translate="yes" xml:space="preserve">
          <source>There are three transforms available for use in queries. You can extract the lower or upper bound, or query based on emptiness.</source>
          <target state="translated">クエリで使用できる変換は3つあります。下限または上限を抽出したり、空虚さに基づいてクエリを実行したりすることができます。</target>
        </trans-unit>
        <trans-unit id="4ca5918000b16d0393655e9890e11a345ad30bdd" translate="yes" xml:space="preserve">
          <source>There are three ways to render a formset in a Django template.</source>
          <target state="translated">Django テンプレートでフォームセットをレンダリングするには、3つの方法があります。</target>
        </trans-unit>
        <trans-unit id="ec3e2fb67cbac287f1464d999496dbaffe570b89" translate="yes" xml:space="preserve">
          <source>There are times when a single column must be returned from a &lt;code&gt;Subquery&lt;/code&gt;, for instance, to use a &lt;code&gt;Subquery&lt;/code&gt; as the target of an &lt;code&gt;__in&lt;/code&gt; lookup. To return all comments for posts published within the last day:</source>
          <target state="translated">単一の列から返されなければならない時間がある &lt;code&gt;Subquery&lt;/code&gt; を使用して、例えば、 &lt;code&gt;Subquery&lt;/code&gt; 対象として &lt;code&gt;__in&lt;/code&gt; ルックアップが。最終日に公開された投稿のすべてのコメントを返すには：</target>
        </trans-unit>
        <trans-unit id="7c74bd5c5720621ba1bf68f4629091c4f84d9f63" translate="yes" xml:space="preserve">
          <source>There are times when you do not want Django to send emails at all. For example, while developing a website, you probably don&amp;rsquo;t want to send out thousands of emails &amp;ndash; but you may want to validate that emails will be sent to the right people under the right conditions, and that those emails will contain the correct content.</source>
          <target state="translated">Djangoにメールを送信させたくない場合があります。たとえば、Webサイトの開発中に、何千もの電子メールを送信したくない場合がありますが、適切な条件下で適切な人に電子メールが送信され、それらの電子メールに正しいコンテンツが含まれていることを確認したい場合があります。 。</target>
        </trans-unit>
        <trans-unit id="c842a5a4c84746e59536e96b8c1e20999f9b6d84" translate="yes" xml:space="preserve">
          <source>There are times where you would like add a bit of CSS and/or JavaScript to the add/change views. This can be accomplished by using a &lt;code&gt;Media&lt;/code&gt; inner class on your &lt;code&gt;ModelAdmin&lt;/code&gt;:</source>
          <target state="translated">追加/変更ビューにCSSやJavaScriptを少し追加したい場合があります。これは、 &lt;code&gt;ModelAdmin&lt;/code&gt; で &lt;code&gt;Media&lt;/code&gt; 内部クラスを使用することで実現できます。</target>
        </trans-unit>
        <trans-unit id="d13152d7ad0535e0d9b833f6a6f3dc2f68630529" translate="yes" xml:space="preserve">
          <source>There are two features worth noting in this example.</source>
          <target state="translated">この例で注目すべき特徴は2つあります。</target>
        </trans-unit>
        <trans-unit id="e29fbf9b0eac3600d5ff5d48ee34823bcc51b162" translate="yes" xml:space="preserve">
          <source>There are two main steps involved in validating a &lt;code&gt;ModelForm&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ModelForm&lt;/code&gt; の検証には、主に2つの手順があります。</target>
        </trans-unit>
        <trans-unit id="127003b06f28dbbea5c6bb95b9fcbb4a4ddbb7c1" translate="yes" xml:space="preserve">
          <source>There are two other logging calls available:</source>
          <target state="translated">他にも2つのロギングコールが利用可能です。</target>
        </trans-unit>
        <trans-unit id="dd91f5e0c7e80ba947990da88bea62cafe0f52b6" translate="yes" xml:space="preserve">
          <source>There are two reasons to use a column with &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.unique&quot;&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.db_index&quot;&gt;&lt;code&gt;db_index&lt;/code&gt;&lt;/a&gt; when using &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; to retrieve individual objects. First, the query will be quicker because of the underlying database index. Also, the query could run much slower if multiple objects match the lookup; having a unique constraint on the column guarantees this will never happen.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;を使用して個々のオブジェクトを取得するときに、&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.unique&quot;&gt; &lt;code&gt;unique&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.db_index&quot;&gt; &lt;code&gt;db_index&lt;/code&gt; を含む&lt;/a&gt;列を使用する理由は2つあります。まず、基になるデータベースインデックスがあるため、クエリが高速になります。また、複数のオブジェクトがルックアップに一致すると、クエリの実行速度が大幅に低下する可能性があります。列に一意の制約があると、これが発生しないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="6ee491b4d745bceb462b60ff16434351784a42fb" translate="yes" xml:space="preserve">
          <source>There are two reasons you might want to customize a &lt;code&gt;Manager&lt;/code&gt;: to add extra &lt;code&gt;Manager&lt;/code&gt; methods, and/or to modify the initial &lt;code&gt;QuerySet&lt;/code&gt; the &lt;code&gt;Manager&lt;/code&gt; returns.</source>
          <target state="translated">カスタマイズしたい場合があり、二つの理由があります &lt;code&gt;Manager&lt;/code&gt; 余分に追加する： &lt;code&gt;Manager&lt;/code&gt; メソッドを、および/または初期変更する &lt;code&gt;QuerySet&lt;/code&gt; &lt;code&gt;Manager&lt;/code&gt; 戻り。</target>
        </trans-unit>
        <trans-unit id="720a9aa7a33ca50cea57e0f036b334ee3370619e" translate="yes" xml:space="preserve">
          <source>There are two steps to making this work. Firstly we need to implement the lookup, then we need to tell Django about it:</source>
          <target state="translated">これを動作させるには二つのステップがあります。まず最初にルックアップを実装し、次にそれを Django に伝える必要があります。</target>
        </trans-unit>
        <trans-unit id="7bbd044eff295a9be81cba0ec549c2bd8ede7a25" translate="yes" xml:space="preserve">
          <source>There are two types of conditions this header can tell a browser to watch out for:</source>
          <target state="translated">このヘッダーがブラウザに注意を促す条件には2種類あります。</target>
        </trans-unit>
        <trans-unit id="4494c92caa320237552a06540d133dd99233ea98" translate="yes" xml:space="preserve">
          <source>There are two ways to customize widgets: &lt;a href=&quot;#styling-widget-instances&quot;&gt;per widget instance&lt;/a&gt; and &lt;a href=&quot;#styling-widget-classes&quot;&gt;per widget class&lt;/a&gt;.</source>
          <target state="translated">：ウィジェットをカスタマイズするには、2つの方法があります&lt;a href=&quot;#styling-widget-instances&quot;&gt;ウィジェットインスタンスごと&lt;/a&gt;や&lt;a href=&quot;#styling-widget-classes&quot;&gt;ウィジェットクラスごとに&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="15eba9bf5efe787dbfead36de258956e81386432" translate="yes" xml:space="preserve">
          <source>There are two ways to extend the default &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; model without substituting your own model. If the changes you need are purely behavioral, and don&amp;rsquo;t require any change to what is stored in the database, you can create a &lt;a href=&quot;../db/models#proxy-models&quot;&gt;proxy model&lt;/a&gt; based on &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt;. This allows for any of the features offered by proxy models including default ordering, custom managers, or custom model methods.</source>
          <target state="translated">独自のモデルに置き換えずにデフォルトの&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt;モデルを拡張するには、2つの方法があります。必要な変更が純粋な動作であり、データベースに格納されているものを変更する必要がない場合は、&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; に&lt;/a&gt;基づいて&lt;a href=&quot;../db/models#proxy-models&quot;&gt;プロキシモデル&lt;/a&gt;を作成できます。これにより、デフォルトの順序付け、カスタムマネージャー、カスタムモデルメソッドなど、プロキシモデルが提供する機能を利用できます。</target>
        </trans-unit>
        <trans-unit id="e5e41d79a89e7118e2f2a6f5e690c8cf9e41ed2c" translate="yes" xml:space="preserve">
          <source>There are two ways to report any errors from this step. Probably the most common method is to display the error at the top of the form. To create such an error, you can raise a &lt;code&gt;ValidationError&lt;/code&gt; from the &lt;code&gt;clean()&lt;/code&gt; method. For example:</source>
          <target state="translated">この手順で発生したエラーを報告する方法は2つあります。おそらく最も一般的な方法は、フォームの上部にエラーを表示することです。このようなエラーを作成するには、 &lt;code&gt;clean()&lt;/code&gt; メソッドから &lt;code&gt;ValidationError&lt;/code&gt; を送出できます。例えば：</target>
        </trans-unit>
        <trans-unit id="f3682bb46c7cdad94bdcb1d55e5d3aa9635668ee" translate="yes" xml:space="preserve">
          <source>There are two ways to send signals in Django.</source>
          <target state="translated">Djangoでシグナルを送る方法は2つあります。</target>
        </trans-unit>
        <trans-unit id="00d26b3386430b6fab2095c28aedd73d56054ce2" translate="yes" xml:space="preserve">
          <source>There are two ways to solve this problem. The first is to register &lt;code&gt;Choice&lt;/code&gt; with the admin just as we did with &lt;code&gt;Question&lt;/code&gt;:</source>
          <target state="translated">この問題を解決するには2つの方法があります。1つは、 &lt;code&gt;Question&lt;/code&gt; 行ったのと同じように、 &lt;code&gt;Choice&lt;/code&gt; を管理者に登録することです。</target>
        </trans-unit>
        <trans-unit id="23a64397722408ba9883baae5658e6aa3502728b" translate="yes" xml:space="preserve">
          <source>There are two ways you can connect a receiver to a signal. You can take the manual connect route:</source>
          <target state="translated">受信機を信号に接続するには、2つの方法があります。手動接続のルートを取ることができます。</target>
        </trans-unit>
        <trans-unit id="98319cb6e332dba875d578d9cd1cdf771a6ece29" translate="yes" xml:space="preserve">
          <source>There are two ways you tell an email backend to reuse a connection.</source>
          <target state="translated">電子メールのバックエンドに接続を再利用するように伝えるには、2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="132d18eec8b0d66e698a36fa2909fb23c44ed2b9" translate="yes" xml:space="preserve">
          <source>There are, however, two shortcuts available for cases where you can guarantee these security concerns do not apply to you:</source>
          <target state="translated">しかし、これらのセキュリティ上の懸念があなたに適用されないことを保証することができる場合には、2つのショートカットが用意されています。</target>
        </trans-unit>
        <trans-unit id="b6de9173a10eaaf2cbefb5280cd109fc52ac2d70" translate="yes" xml:space="preserve">
          <source>There can be side effects when calling some variables, and it&amp;rsquo;d be either foolish or a security hole to allow the template system to access them.</source>
          <target state="translated">一部の変数を呼び出すと副作用が発生する可能性があり、テンプレートシステムが変数にアクセスできるようにするのは、ばかげているかセキュリティホールになるでしょう。</target>
        </trans-unit>
        <trans-unit id="40742fb672a16b4ddd7654662929485b7673a22d" translate="yes" xml:space="preserve">
          <source>There is a similarly named method called &lt;code&gt;get_transform()&lt;/code&gt;. &lt;code&gt;get_lookup()&lt;/code&gt; should always return a &lt;code&gt;Lookup&lt;/code&gt; subclass, and &lt;code&gt;get_transform()&lt;/code&gt; a &lt;code&gt;Transform&lt;/code&gt; subclass. It is important to remember that &lt;code&gt;Transform&lt;/code&gt; objects can be further filtered on, and &lt;code&gt;Lookup&lt;/code&gt; objects cannot.</source>
          <target state="translated">&lt;code&gt;get_transform()&lt;/code&gt; と呼ばれる同様の名前のメソッドがあります。 &lt;code&gt;get_lookup()&lt;/code&gt; は常に &lt;code&gt;Lookup&lt;/code&gt; サブクラスを返し、 &lt;code&gt;get_transform()&lt;/code&gt; は &lt;code&gt;Transform&lt;/code&gt; サブクラスを返します。ことを覚えておくことが重要である &lt;code&gt;Transform&lt;/code&gt; オブジェクトは、さらに上で濾過することができ、 &lt;code&gt;Lookup&lt;/code&gt; オブジェクトはできません。</target>
        </trans-unit>
        <trans-unit id="076ab0e60179747b01f6522a60cb0b32cfbad579" translate="yes" xml:space="preserve">
          <source>There is also a decorator for registering your &lt;code&gt;ModelAdmin&lt;/code&gt; classes:</source>
          <target state="translated">&lt;code&gt;ModelAdmin&lt;/code&gt; クラスを登録するためのデコレータもあります。</target>
        </trans-unit>
        <trans-unit id="fe73062299242ce8953e23bc8f15f8eb8e74ad5b" translate="yes" xml:space="preserve">
          <source>There is also a way to pass additional information to title and description templates, if you need to supply more than the two variables mentioned before. You can provide your implementation of &lt;code&gt;get_context_data&lt;/code&gt; method in your &lt;code&gt;Feed&lt;/code&gt; subclass. For example:</source>
          <target state="translated">前述の2つ以上の変数を指定する必要がある場合は、タイトルと説明のテンプレートに追加情報を渡す方法もあります。 &lt;code&gt;Feed&lt;/code&gt; サブクラスで &lt;code&gt;get_context_data&lt;/code&gt; メソッドの実装を提供できます。例えば：</target>
        </trans-unit>
        <trans-unit id="3d15ec31136066f7786ec1d2ac23ce5bd6b7cdf8" translate="yes" xml:space="preserve">
          <source>There is also an independent but related &lt;a href=&quot;../../ref/settings#std:setting-USE_I18N&quot;&gt;&lt;code&gt;USE_I18N&lt;/code&gt;&lt;/a&gt; setting that controls if Django should activate translation. See &lt;a href=&quot;translation&quot;&gt;Translation&lt;/a&gt; for more details.</source>
          <target state="translated">Djangoが翻訳をアクティブにするかどうかを制御する独立しているが関連する&lt;a href=&quot;../../ref/settings#std:setting-USE_I18N&quot;&gt; &lt;code&gt;USE_I18N&lt;/code&gt; &lt;/a&gt;設定もあります。詳細については、&lt;a href=&quot;translation&quot;&gt;翻訳&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e75d5351b7f9cd7638cd926fddf6bf2712770595" translate="yes" xml:space="preserve">
          <source>There is also an independent but related &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; setting that controls if Django should implement format localization. See &lt;a href=&quot;formatting&quot;&gt;Format localization&lt;/a&gt; for more details.</source>
          <target state="translated">Djangoがフォーマットのローカリゼーションを実装する必要があるかどうかを制御する、独立していますが関連する&lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;設定もあります。詳細については、&lt;a href=&quot;formatting&quot;&gt;フォーマットのローカライズ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="336f1a0636712f1f7df8743e5074215668a776f5" translate="yes" xml:space="preserve">
          <source>There is also an independent but related &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; setting that controls whether Django should activate format localization. See &lt;a href=&quot;formatting&quot;&gt;Format localization&lt;/a&gt; for more details.</source>
          <target state="translated">Djangoがフォーマットのローカライズをアクティブにするかどうかを制御する、独立していますが関連する&lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;設定もあります。詳細については、&lt;a href=&quot;formatting&quot;&gt;フォーマットのローカライズ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4889f2745d57846bc47e3b301034b23c55567a82" translate="yes" xml:space="preserve">
          <source>There is also the matter of convenience. An integer id isn&amp;rsquo;t always the most convenient way to refer to an object; sometimes, a more natural reference would be helpful.</source>
          <target state="translated">利便性の問題もあります。整数IDは、常にオブジェクトを参照する最も便利な方法とは限りません。より自然な参照が役立つ場合もあります。</target>
        </trans-unit>
        <trans-unit id="3fec4eeb0cb4f31609ba2b0ca27378fa71d0a5c3" translate="yes" xml:space="preserve">
          <source>There is limited support for other parts of the async ecosystem; namely, Django can natively talk &lt;a href=&quot;../howto/deployment/asgi/index&quot;&gt;ASGI&lt;/a&gt;, and some async safety support.</source>
          <target state="translated">非同期エコシステムの他の部分に対するサポートは限られています。つまり、Djangoはネイティブに&lt;a href=&quot;../howto/deployment/asgi/index&quot;&gt;ASGIを話し&lt;/a&gt;、一部の非同期安全サポートを行うことができます。</target>
        </trans-unit>
        <trans-unit id="ad3ed6aecf8322b5839dedda17f6f29eabf48e80" translate="yes" xml:space="preserve">
          <source>There is no &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.location&quot;&gt;&lt;code&gt;location&lt;/code&gt;&lt;/a&gt; method in this example, but you can provide it in order to specify the URL for your object. By default, &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.location&quot;&gt;&lt;code&gt;location()&lt;/code&gt;&lt;/a&gt; calls &lt;code&gt;get_absolute_url()&lt;/code&gt; on each object and returns the result.</source>
          <target state="translated">この例では&lt;a href=&quot;#django.contrib.sitemaps.Sitemap.location&quot;&gt; &lt;code&gt;location&lt;/code&gt; &lt;/a&gt;メソッドはありませんが、オブジェクトのURLを指定するために提供できます。デフォルトでは、&lt;a href=&quot;#django.contrib.sitemaps.Sitemap.location&quot;&gt; &lt;code&gt;location()&lt;/code&gt; &lt;/a&gt;は各オブジェクトで &lt;code&gt;get_absolute_url()&lt;/code&gt; を呼び出し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="ccdcb2bd2ea7a38642c8f628d41694d630e1630a" translate="yes" xml:space="preserve">
          <source>There is no one-size-fits-all solution for which field type is best. You should evaluate the models you expect to be pointing to and determine which solution will be most effective for your use case.</source>
          <target state="translated">どのフィールドタイプが最適であるかについては、ワンサイズのソリューションは存在しません。ポインティング先となるモデルを評価し、どのソリューションがユースケースに最も効果的かを判断する必要があります。</target>
        </trans-unit>
        <trans-unit id="11ef18d152799a740388d62ee9b944c775a0bcd9" translate="yes" xml:space="preserve">
          <source>There is no way to have Django return, say, a &lt;code&gt;MyPerson&lt;/code&gt; object whenever you query for &lt;code&gt;Person&lt;/code&gt; objects. A queryset for &lt;code&gt;Person&lt;/code&gt; objects will return those types of objects. The whole point of proxy objects is that code relying on the original &lt;code&gt;Person&lt;/code&gt; will use those and your own code can use the extensions you included (that no other code is relying on anyway). It is not a way to replace the &lt;code&gt;Person&lt;/code&gt; (or any other) model everywhere with something of your own creation.</source>
          <target state="translated">&lt;code&gt;Person&lt;/code&gt; オブジェクトに対してクエリを実行するたびに、Djangoが &lt;code&gt;MyPerson&lt;/code&gt; オブジェクトを返すようにする方法はありません。 &lt;code&gt;Person&lt;/code&gt; オブジェクトのクエリセットは、これらのタイプのオブジェクトを返します。プロキシオブジェクトの重要な点は、元の &lt;code&gt;Person&lt;/code&gt; に依存するコードがそれらを使用し、独自のコードが、含まれている拡張機能を使用できるということです（とにかく他のコードは依存していません）。これは、 &lt;code&gt;Person&lt;/code&gt; （または他の）モデルをどこにでも独自の作成物で置き換える方法ではありません。</target>
        </trans-unit>
        <trans-unit id="552f8501da1d1cf280a92b17be2fe2368642e6ad" translate="yes" xml:space="preserve">
          <source>There is one exception the above rule: When passed a &lt;code&gt;datetime&lt;/code&gt; value with attached timezone information (a &lt;a href=&quot;../../topics/i18n/timezones#naive-vs-aware-datetimes&quot;&gt;time-zone-aware&lt;/a&gt;&lt;code&gt;datetime&lt;/code&gt; instance) the &lt;code&gt;time&lt;/code&gt; filter will accept the timezone-related &lt;a href=&quot;#date-and-time-formatting-specifiers&quot;&gt;format specifiers&lt;/a&gt;&lt;code&gt;'e'&lt;/code&gt;, &lt;code&gt;'O'&lt;/code&gt; , &lt;code&gt;'T'&lt;/code&gt; and &lt;code&gt;'Z'&lt;/code&gt;.</source>
          <target state="translated">上記のルールには1つの例外があります。タイムゾーン情報（タイムゾーン&lt;a href=&quot;../../topics/i18n/timezones#naive-vs-aware-datetimes&quot;&gt;対応の&lt;/a&gt; &lt;code&gt;datetime&lt;/code&gt; インスタンス）が添付された &lt;code&gt;datetime&lt;/code&gt; 値を渡すと、 &lt;code&gt;time&lt;/code&gt; フィルターはタイムゾーン関連の&lt;a href=&quot;#date-and-time-formatting-specifiers&quot;&gt;形式指定子&lt;/a&gt; &lt;code&gt;'e'&lt;/code&gt; 、 &lt;code&gt;'O'&lt;/code&gt; 、 &lt;code&gt;'T'&lt;/code&gt; および &lt;code&gt;'Z'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3119f3939dbf60e57b6826f2f3eed2e4bf6d83af" translate="yes" xml:space="preserve">
          <source>There is only one field that you can&amp;rsquo;t leave out - the primary key field. Django uses the primary key to identify model instances, so it must always be included in a raw query. A &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.FieldDoesNotExist&quot;&gt;&lt;code&gt;FieldDoesNotExist&lt;/code&gt;&lt;/a&gt; exception will be raised if you forget to include the primary key.</source>
          <target state="translated">除外できないフィールドは、主キーフィールドだけです。Djangoは主キーを使用してモデルインスタンスを識別するため、常に生のクエリに含める必要があります。&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.FieldDoesNotExist&quot;&gt; &lt;code&gt;FieldDoesNotExist&lt;/code&gt; &lt;/a&gt;プライマリキーを含めることを忘れた場合は、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="01b7655035baec0a88d69155944fc4d04fb28f67" translate="yes" xml:space="preserve">
          <source>There is only one field that you can&amp;rsquo;t leave out - the primary key field. Django uses the primary key to identify model instances, so it must always be included in a raw query. An &lt;code&gt;InvalidQuery&lt;/code&gt; exception will be raised if you forget to include the primary key.</source>
          <target state="translated">除外できないフィールドが1つだけあります。主キーフィールドです。Djangoは主キーを使用してモデルインスタンスを識別するため、常に生のクエリに含める必要があります。 &lt;code&gt;InvalidQuery&lt;/code&gt; のプライマリキーを含めることを忘れた場合は、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="86d39b53e4827027f045ccd4097d962247d17005" translate="yes" xml:space="preserve">
          <source>There isn&amp;rsquo;t a specialized subclass for every possible HTTP response code, since many of them aren&amp;rsquo;t going to be that common. However, as documented in the &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; documentation, you can also pass the HTTP status code into the constructor for &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; to create a return class for any status code you like. For example:</source>
          <target state="translated">それらの多くはそれほど一般的ではないので、考えられるすべてのHTTP応答コードに特化したサブクラスはありません。ただし、&lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; の&lt;/a&gt;ドキュメントに記載されているように、HTTPステータスコードを&lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;のコンストラクターに渡して、任意のステータスコードの戻りクラスを作成することもできます。例えば：</target>
        </trans-unit>
        <trans-unit id="a9a9644e3aa5ad2978823b446ce2e81d8b0491a1" translate="yes" xml:space="preserve">
          <source>There may be files other than your project&amp;rsquo;s static assets that, for convenience, you&amp;rsquo;d like to have Django serve for you in local development. The &lt;a href=&quot;#django.views.static.serve&quot;&gt;&lt;code&gt;serve()&lt;/code&gt;&lt;/a&gt; view can be used to serve any directory you give it. (This view is &lt;strong&gt;not&lt;/strong&gt; hardened for production use and should be used only as a development aid; you should serve these files in production using a real front-end web server).</source>
          <target state="translated">プロジェクトの静的アセット以外にも、便宜上、Djangoをローカル開発で提供してもらいたいファイルがある場合があります。&lt;a href=&quot;#django.views.static.serve&quot;&gt; &lt;code&gt;serve()&lt;/code&gt; &lt;/a&gt;ビューは、あなたがそれを与える任意のディレクトリを提供するために使用することができます。（このビューはされ&lt;strong&gt;ていない&lt;/strong&gt;生産使用のための硬化や開発援助としてのみ使用してください。あなたは本当のフロントエンドWebサーバーを使用して生産にこれらのファイルを提供する必要があります）。</target>
        </trans-unit>
        <trans-unit id="c6f0cfcc2d7cafb44b66564c6b727249cfcccd2f" translate="yes" xml:space="preserve">
          <source>There may be some situations where you wish to call &lt;code&gt;select_related()&lt;/code&gt; with a lot of related objects, or where you don&amp;rsquo;t know all of the relations. In these cases it is possible to call &lt;code&gt;select_related()&lt;/code&gt; with no arguments. This will follow all non-null foreign keys it can find - nullable foreign keys must be specified. This is not recommended in most cases as it is likely to make the underlying query more complex, and return more data, than is actually needed.</source>
          <target state="translated">多くの関連オブジェクトを使用して &lt;code&gt;select_related()&lt;/code&gt; を呼び出したい場合や、すべての関係がわからない場合があります。これらの場合、引数なしで &lt;code&gt;select_related()&lt;/code&gt; を呼び出すことができます。これは、検出できるすべてのnull以外の外部キーの後に続きます-null可能な外部キーを指定する必要があります。基になるクエリが複雑になり、実際に必要とされるよりも多くのデータが返される可能性があるため、ほとんどの場合、これはお勧めできません。</target>
        </trans-unit>
        <trans-unit id="a0a66ed86bf6678e5b05d1eac2131c3bbc960c08" translate="yes" xml:space="preserve">
          <source>There may be some views that are unprotected and have been exempted by &lt;code&gt;csrf_exempt&lt;/code&gt;, but still need to include the CSRF token.</source>
          <target state="translated">保護されて &lt;code&gt;csrf_exempt&lt;/code&gt; 、csrf_exemptによって除外されたビューがいくつかある場合がありますが、それでもCSRFトークンを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="c8eaf4a5f4167f0c30126f8bb76418123b4bd64b" translate="yes" xml:space="preserve">
          <source>There may be times you have the need to hook into another authentication source &amp;ndash; that is, another source of usernames and passwords or authentication methods.</source>
          <target state="translated">別の認証ソース、つまりユーザー名とパスワードまたは認証方法の別のソースにフックする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="ab64bd5c330c251da1c7d0ae9773ffb209ceacd4" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a command that will run the migrations for you and manage your database schema automatically - that&amp;rsquo;s called &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;, and we&amp;rsquo;ll come to it in a moment - but first, let&amp;rsquo;s see what SQL that migration would run. The &lt;a href=&quot;../ref/django-admin#django-admin-sqlmigrate&quot;&gt;&lt;code&gt;sqlmigrate&lt;/code&gt;&lt;/a&gt; command takes migration names and returns their SQL:</source>
          <target state="translated">移行を実行してデータベーススキーマを自動的に管理するコマンドがあります。これを &quot; &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; &quot;と呼びます。これについては後ほど説明しますが、最初に、移行によって実行されるSQLを見てみましょう。&lt;a href=&quot;../ref/django-admin#django-admin-sqlmigrate&quot;&gt; &lt;code&gt;sqlmigrate&lt;/code&gt; &lt;/a&gt;コマンドは、マイグレーションの名前を取り、そのSQLを返します。</target>
        </trans-unit>
        <trans-unit id="da5093b938dd7840c576a513aff6ee2290f74f11" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a couple of extra options and possibilities you can exploit for more advanced options.</source>
          <target state="translated">より高度なオプションに活用できる追加のオプションと可能性がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="529593afe16858928a0a29064611b9a44ca1fa6e" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a difference in what &lt;code&gt;CURRENT ROW&lt;/code&gt; includes. When specified in &lt;code&gt;ROWS&lt;/code&gt; mode, the frame starts or ends with the current row. When specified in &lt;code&gt;RANGE&lt;/code&gt; mode, the frame starts or ends at the first or last peer according to the ordering clause. Thus, &lt;code&gt;RANGE CURRENT ROW&lt;/code&gt; evaluates the expression for rows which have the same value specified by the ordering. Because the template includes both the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; points, this may be expressed with:</source>
          <target state="translated">&lt;code&gt;CURRENT ROW&lt;/code&gt; に含まれる内容に違いがあります。 &lt;code&gt;ROWS&lt;/code&gt; モードで指定した場合、フレームは現在の行で開始または終了します。 &lt;code&gt;RANGE&lt;/code&gt; モードで指定した場合、フレームは、ordering句に従って最初または最後のピアで開始または終了します。したがって、 &lt;code&gt;RANGE CURRENT ROW&lt;/code&gt; は、順序付けで指定された同じ値を持つ行の式を評価します。テンプレートには &lt;code&gt;start&lt;/code&gt; 点と &lt;code&gt;end&lt;/code&gt; 点の両方が含まれているため、これは次のように表すことができます。</target>
        </trans-unit>
        <trans-unit id="d75aa5ff00db8d3e848514e0b69a503b42e68c4b" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a lot more work to be done for a complete custom feed class, but the above example should demonstrate the basic idea.</source>
          <target state="translated">完全なカスタムフィードクラスを作成するには、まだ多くの作業が必要ですが、上記の例は基本的な考え方を示しているはずです。</target>
        </trans-unit>
        <trans-unit id="874b31554853528095e34057c3f8e324e697cd1c" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a problem here, though: the page&amp;rsquo;s design is hard-coded in the view. If you want to change the way the page looks, you&amp;rsquo;ll have to edit this Python code. So let&amp;rsquo;s use Django&amp;rsquo;s template system to separate the design from Python by creating a template that the view can use.</source>
          <target state="translated">ただし、ここには問題があります。ページのデザインがビューにハードコードされています。ページの外観を変更する場合は、このPythonコードを編集する必要があります。そこで、Djangoのテンプレートシステムを使用して、ビューで使用できるテンプレートを作成することにより、デザインをPythonから分離しましょう。</target>
        </trans-unit>
        <trans-unit id="185044dc976a34bb0fef463a3e68c0dc9c899a83" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also a &lt;a href=&quot;../topics/http/shortcuts#django.shortcuts.get_list_or_404&quot;&gt;&lt;code&gt;get_list_or_404()&lt;/code&gt;&lt;/a&gt; function, which works just as &lt;a href=&quot;../topics/http/shortcuts#django.shortcuts.get_object_or_404&quot;&gt;&lt;code&gt;get_object_or_404()&lt;/code&gt;&lt;/a&gt; &amp;ndash; except using &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;. It raises &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt; if the list is empty.</source>
          <target state="translated">あります&lt;a href=&quot;../topics/http/shortcuts#django.shortcuts.get_list_or_404&quot;&gt; &lt;code&gt;get_list_or_404()&lt;/code&gt; &lt;/a&gt;と同じように動作する機能、&lt;a href=&quot;../topics/http/shortcuts#django.shortcuts.get_object_or_404&quot;&gt; &lt;code&gt;get_object_or_404()&lt;/code&gt; &lt;/a&gt; -使用することを除いて&lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;の代わりに、&lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;。リストが空の場合、&lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; &lt;/a&gt;を発生させます。</target>
        </trans-unit>
        <trans-unit id="b1302bb69dd2bb26c7d9688e769480f789d6cfa7" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also a &lt;code&gt;get_many()&lt;/code&gt; interface that only hits the cache once. &lt;code&gt;get_many()&lt;/code&gt; returns a dictionary with all the keys you asked for that actually exist in the cache (and haven&amp;rsquo;t expired):</source>
          <target state="translated">キャッシュを1回だけヒットする &lt;code&gt;get_many()&lt;/code&gt; インターフェースもあります。 &lt;code&gt;get_many()&lt;/code&gt; は、要求したすべてのキーを含むディクショナリを返します。これらのキーは実際にキャッシュに存在します（有効期限が切れていません）。</target>
        </trans-unit>
        <trans-unit id="cbfe42872ee508b7ab117bf15f51c03ece11d5d1" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also a bunch of other optional keywords:</source>
          <target state="translated">他のオプションのキーワードもたくさんあります：</target>
        </trans-unit>
        <trans-unit id="00a87bcfcbedb03d65bdfed396847c86cebcd64e" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also a case-insensitive version, &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-icontains&quot;&gt;&lt;code&gt;icontains&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">大文字と小文字を区別しないバージョンの&lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-icontains&quot;&gt; &lt;code&gt;icontains&lt;/code&gt; もあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="8fba78129eb9d5f573fb9b9c5352d583ff508856" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also a second form you can use to avoid extra processing if you need the value multiple times:</source>
          <target state="translated">値が複数回必要な場合に、余分な処理を回避するために使用できる2番目の形式もあります。</target>
        </trans-unit>
        <trans-unit id="07b7631a6661d85faa5e0f60692cffb92e7701d5" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also a set of common arguments available to all field types. All are optional. They&amp;rsquo;re fully explained in the &lt;a href=&quot;../../ref/models/fields#common-model-field-options&quot;&gt;reference&lt;/a&gt;, but here&amp;rsquo;s a quick summary of the most often-used ones:</source>
          <target state="translated">すべてのフィールドタイプで使用できる共通の引数のセットもあります。すべてオプションです。これらは&lt;a href=&quot;../../ref/models/fields#common-model-field-options&quot;&gt;リファレンス&lt;/a&gt;で完全に説明されていますが、ここでは最もよく使用されるものの簡単な要約を示します。</target>
        </trans-unit>
        <trans-unit id="29d25aa9b5da6bd7a7ab00c1e241dfd8e13497bb" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s another set of &lt;a href=&quot;../../ref/models/instances#model-instance-methods&quot;&gt;model methods&lt;/a&gt; that encapsulate a bunch of database behavior that you&amp;rsquo;ll want to customize. In particular you&amp;rsquo;ll often want to change the way &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; work.</source>
          <target state="translated">カスタマイズ&lt;a href=&quot;../../ref/models/instances#model-instance-methods&quot;&gt;する&lt;/a&gt;一連のデータベース動作をカプセル化するモデルメソッドの別のセットがあります。特に、&lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../ref/models/instances#django.db.models.Model.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; の&lt;/a&gt;動作を変更したい場合がよくあります。</target>
        </trans-unit>
        <trans-unit id="54f4324ddad3b858070a41b1bbc68573b7933c28" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s any number of ways you might do this, but if the provider has an API, you can use a &lt;a href=&quot;../custom-file-storage&quot;&gt;custom file storage backend&lt;/a&gt; to integrate the CDN with your Django project. If you&amp;rsquo;ve written or are using a 3rd party custom storage backend, you can tell &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; to use it by setting &lt;a href=&quot;../../ref/settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt; to the storage engine.</source>
          <target state="translated">これを行う方法はいくつもありますが、プロバイダーにAPIがある場合は、&lt;a href=&quot;../custom-file-storage&quot;&gt;カスタムファイルストレージバックエンド&lt;/a&gt;を使用して、CDNをDjangoプロジェクトに統合できます。あなたが書いたか、サードパーティのカスタムストレージバックエンドを使用している場合は、伝えることができ&lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt;設定することで、それを使用する&lt;a href=&quot;../../ref/settings#std:setting-STATICFILES_STORAGE&quot;&gt; &lt;code&gt;STATICFILES_STORAGE&lt;/code&gt; を&lt;/a&gt;ストレージエンジンに。</target>
        </trans-unit>
        <trans-unit id="e2ca95383c15b3b4d5f05fadedabe1b500318b82" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no limit on how many modules you put in the &lt;code&gt;templatetags&lt;/code&gt; package. Just keep in mind that a &lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt;&lt;code&gt;{% load %}&lt;/code&gt;&lt;/a&gt; statement will load tags/filters for the given Python module name, not the name of the app.</source>
          <target state="translated">&lt;code&gt;templatetags&lt;/code&gt; パッケージに含めるモジュールの数に制限はありません。&lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt; &lt;code&gt;{% load %}&lt;/code&gt; &lt;/a&gt;ステートメントは、アプリの名前ではなく、指定されたPythonモジュール名のタグ/フィルターをロードすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="01ff2911eb87bdf1545419b53d49db42773d814d" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no need to add URL cruft such as &lt;code&gt;.html&lt;/code&gt; &amp;ndash; unless you want to, in which case you can do something like this:</source>
          <target state="translated">&lt;code&gt;.html&lt;/code&gt; のようなURL cruftを追加する必要はありません&amp;ndash;必要な場合を除いて、次のようなことができます。</target>
        </trans-unit>
        <trans-unit id="aaf6a18d05b5c017aab81e184dba0e80584fea79" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no need to add a leading slash, because every URL has that. For example, it&amp;rsquo;s &lt;code&gt;articles&lt;/code&gt;, not &lt;code&gt;/articles&lt;/code&gt;.</source>
          <target state="translated">すべてのURLにスラッシュがあるため、先頭にスラッシュを追加する必要はありません。例えば、それはだ &lt;code&gt;articles&lt;/code&gt; 、ではない &lt;code&gt;/articles&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8941cd8857db5972d67440a358a4fe2697127a49" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no need to worry about the &lt;code&gt;is_safe&lt;/code&gt; flag in this case (although including it wouldn&amp;rsquo;t hurt anything). Whenever you manually handle the auto-escaping issues and return a safe string, the &lt;code&gt;is_safe&lt;/code&gt; flag won&amp;rsquo;t change anything either way.</source>
          <target state="translated">この場合、 &lt;code&gt;is_safe&lt;/code&gt; フラグについて心配する必要はありません（ただし、これを含めても害はありません）。自動エスケープの問題を手動で処理して安全な文字列を返す場合、 &lt;code&gt;is_safe&lt;/code&gt; フラグはどちらの方法でも何も変更しません。</target>
        </trans-unit>
        <trans-unit id="2d4bd22abba1df8b0d5aeeace6891916c3f2c6dc" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no question that using generic views can speed up development substantially. In most projects, however, there comes a moment when the generic views no longer suffice. Indeed, the most common question asked by new Django developers is how to make generic views handle a wider array of situations.</source>
          <target state="translated">一般的なビューを使用すると、開発を大幅にスピードアップできることは間違いありません。ただし、ほとんどのプロジェクトでは、ジェネリックビューでは不十分な場合があります。確かに、新しいDjango開発者が尋ねる最も一般的な質問は、ジェネリックビューでさまざまな状況を処理する方法です。</target>
        </trans-unit>
        <trans-unit id="6f61080946f1ac7b7149cc37bf09f16b3d511f6b" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no restriction that a project package can&amp;rsquo;t also be considered an application and have models, etc. (which would require adding it to &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">プロジェクトパッケージをアプリケーションと見なすことができず、モデルなどを持つことができないという制限はありません（これを&lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; に&lt;/a&gt;追加する必要があります）。</target>
        </trans-unit>
        <trans-unit id="c933ded98bbf9830d3dfd06df31fa826e1ccdc74" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no standard for describing raster data in a dictionary or JSON flavor. The definition of the dictionary input to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt;&lt;code&gt;GDALRaster&lt;/code&gt;&lt;/a&gt; class is therefore specific to Django. It&amp;rsquo;s inspired by the &lt;a href=&quot;https://geojson.org&quot;&gt;geojson&lt;/a&gt; format, but the &lt;code&gt;geojson&lt;/code&gt; standard is currently limited to vector formats.</source>
          <target state="translated">辞書またはJSONフレーバーでラスターデータを記述するための標準はありません。したがって、&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt; &lt;code&gt;GDALRaster&lt;/code&gt; &lt;/a&gt;クラスへの辞書入力の定義はDjangoに固有です。&lt;a href=&quot;https://geojson.org&quot;&gt;geojson&lt;/a&gt;形式に触発されていますが、 &lt;code&gt;geojson&lt;/code&gt; 標準は現在、ベクトル形式に限定されています。</target>
        </trans-unit>
        <trans-unit id="3cae82c054bd8f811e23d21dc3c000f18bcb71b2" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no way to specify whether ordering should be case sensitive. With respect to case-sensitivity, Django will order results however your database backend normally orders them.</source>
          <target state="translated">順序付けで大文字と小文字を区別するかどうかを指定する方法はありません。大文字と小文字の区別に関して、Djangoは結果を注文しますが、データベースバックエンドは通常それらを注文します。</target>
        </trans-unit>
        <trans-unit id="c9afd208007a403419ac3ab7b998cae93f88666b" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no way to tell what the value of an ID will be before you call &lt;code&gt;save()&lt;/code&gt;, because that value is calculated by your database, not by Django.</source>
          <target state="translated">IDの値はDjangoではなくデータベースによって計算されるため、 &lt;code&gt;save()&lt;/code&gt; を呼び出す前にIDの値を知る方法はありません。</target>
        </trans-unit>
        <trans-unit id="eaeeeb9f77945ce0a808e834c18d17251cf98dba" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s nothing Django-specific about the &lt;code&gt;Content-Disposition&lt;/code&gt; header, but it&amp;rsquo;s easy to forget the syntax, so we&amp;rsquo;ve included it here.</source>
          <target state="translated">&lt;code&gt;Content-Disposition&lt;/code&gt; ヘッダーについてはDjango固有のものはありませんが、構文を忘れがちなので、ここに含めました。</target>
        </trans-unit>
        <trans-unit id="a690ec58762f108c0e2dfaaa68036b54ef91860f" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s nothing stopping you from creating your own settings, for your own Django apps, but follow these guidelines:</source>
          <target state="translated">独自のDjangoアプリ用に独自の設定を作成するのを妨げるものは何もありませんが、次のガイドラインに従ってください。</target>
        </trans-unit>
        <trans-unit id="e5f9abda96ed031ceb895d9ec07592e703a29176" translate="yes" xml:space="preserve">
          <source>Therefore, avoid putting reusable application logic in standalone scripts so that you have to import from the script elsewhere in your application. If you can&amp;rsquo;t avoid that, put the call to &lt;code&gt;django.setup()&lt;/code&gt; inside an &lt;code&gt;if&lt;/code&gt; block:</source>
          <target state="translated">したがって、アプリケーションの別の場所にあるスクリプトからインポートする必要があるように、再利用可能なアプリケーションロジックをスタンドアロンスクリプトに配置することは避けてください。それを回避できない場合は、 &lt;code&gt;django.setup()&lt;/code&gt; の呼び出しを &lt;code&gt;if&lt;/code&gt; ブロック内に配置します。</target>
        </trans-unit>
        <trans-unit id="d1362c485b6c35f67f55f9e1cdf429d6affcfd67" translate="yes" xml:space="preserve">
          <source>Therefore, the following steps should be taken. In this example, we&amp;rsquo;ll add a non-nullable &lt;a href=&quot;../ref/models/fields#django.db.models.UUIDField&quot;&gt;&lt;code&gt;UUIDField&lt;/code&gt;&lt;/a&gt; with a default value. Modify the respective field according to your needs.</source>
          <target state="translated">したがって、次の手順を実行する必要があります。この例では、null &lt;a href=&quot;../ref/models/fields#django.db.models.UUIDField&quot;&gt; &lt;code&gt;UUIDField&lt;/code&gt; &lt;/a&gt;にデフォルト値を追加します。必要に応じてそれぞれのフィールドを変更します。</target>
        </trans-unit>
        <trans-unit id="64bfa10a51275897c2ec76dbc22221367c9f198a" translate="yes" xml:space="preserve">
          <source>Therefore, you should not override &lt;code&gt;get_queryset()&lt;/code&gt; to filter out any rows. If you do so, Django will return incomplete results.</source>
          <target state="translated">したがって、 &lt;code&gt;get_queryset()&lt;/code&gt; をオーバーライドして行を除外しないでください。これを行うと、Djangoは不完全な結果を返します。</target>
        </trans-unit>
        <trans-unit id="064fd60da4bb85132c7bf84ce0a08c101d2cc0e6" translate="yes" xml:space="preserve">
          <source>These adapter functions are widely used in Django. The &lt;a href=&quot;https://pypi.org/project/asgiref/&quot;&gt;asgiref&lt;/a&gt; package itself is part of the Django project, and it is automatically installed as a dependency when you install Django with &lt;code&gt;pip&lt;/code&gt;.</source>
          <target state="translated">これらのアダプター関数は、Djangoで広く使用されています。&lt;a href=&quot;https://pypi.org/project/asgiref/&quot;&gt;asgirefの&lt;/a&gt;パッケージ自体は、Djangoプロジェクトの一部であり、そしてあなたとジャンゴをインストールするときに自動的に依存関係としてインストールされ &lt;code&gt;pip&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a811c3212bc4444ab1ca325d9edb3a68d8a1cc21" translate="yes" xml:space="preserve">
          <source>These applications are included by default as a convenience for the common case.</source>
          <target state="translated">これらのアプリケーションは、一般的なケースの便宜上、デフォルトで含まれています。</target>
        </trans-unit>
        <trans-unit id="e065064559622e4d29cabe419f920940f963ca83" translate="yes" xml:space="preserve">
          <source>These are logically equivalent to &lt;code&gt;Extract('date_field', lookup_name)&lt;/code&gt;. Each class is also a &lt;code&gt;Transform&lt;/code&gt; registered on &lt;code&gt;DateField&lt;/code&gt; and &lt;code&gt;DateTimeField&lt;/code&gt; as &lt;code&gt;__(lookup_name)&lt;/code&gt;, e.g. &lt;code&gt;__year&lt;/code&gt;.</source>
          <target state="translated">これらは、論理的に &lt;code&gt;Extract('date_field', lookup_name)&lt;/code&gt; です。各クラスもある &lt;code&gt;Transform&lt;/code&gt; に登録 &lt;code&gt;DateField&lt;/code&gt; や &lt;code&gt;DateTimeField&lt;/code&gt; 型として &lt;code&gt;__(lookup_name)&lt;/code&gt; 例えば、 &lt;code&gt;__year&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="33d270e97f3c860dacbaf5326db81a7b97c2fc80" translate="yes" xml:space="preserve">
          <source>These are logically equivalent to &lt;code&gt;Extract('datetime_field', lookup_name)&lt;/code&gt;. Each class is also a &lt;code&gt;Transform&lt;/code&gt; registered on &lt;code&gt;DateTimeField&lt;/code&gt; as &lt;code&gt;__(lookup_name)&lt;/code&gt;, e.g. &lt;code&gt;__minute&lt;/code&gt;.</source>
          <target state="translated">これらは、論理的に &lt;code&gt;Extract('datetime_field', lookup_name)&lt;/code&gt; です。各クラスもされて &lt;code&gt;Transform&lt;/code&gt; に登録 &lt;code&gt;DateTimeField&lt;/code&gt; 型として &lt;code&gt;__(lookup_name)&lt;/code&gt; 、例えば &lt;code&gt;__minute&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f93895ed48a7c8f2207cdc06eb69c4f5139d1a32" translate="yes" xml:space="preserve">
          <source>These are logically equivalent to &lt;code&gt;Trunc('date_field', kind)&lt;/code&gt;. They truncate all parts of the date up to &lt;code&gt;kind&lt;/code&gt; which allows grouping or filtering dates with less precision. &lt;code&gt;expression&lt;/code&gt; can have an &lt;code&gt;output_field&lt;/code&gt; of either &lt;code&gt;DateField&lt;/code&gt; or &lt;code&gt;DateTimeField&lt;/code&gt;.</source>
          <target state="translated">これらは論理的に &lt;code&gt;Trunc('date_field', kind)&lt;/code&gt; と同等です。それらは日付のすべての部分を &lt;code&gt;kind&lt;/code&gt; て切り捨てます。これにより、精度の低い日付をグループ化またはフィルタリングできます。 &lt;code&gt;expression&lt;/code&gt; は、 &lt;code&gt;DateField&lt;/code&gt; または &lt;code&gt;DateTimeField&lt;/code&gt; のいずれかの &lt;code&gt;output_field&lt;/code&gt; を持つことができます。</target>
        </trans-unit>
        <trans-unit id="454d6e2d9e6a21406dd0153f13a9b377029b12b8" translate="yes" xml:space="preserve">
          <source>These are logically equivalent to &lt;code&gt;Trunc('datetime_field', kind)&lt;/code&gt;. They truncate all parts of the date up to &lt;code&gt;kind&lt;/code&gt; and allow grouping or filtering datetimes with less precision. &lt;code&gt;expression&lt;/code&gt; must have an &lt;code&gt;output_field&lt;/code&gt; of &lt;code&gt;DateTimeField&lt;/code&gt;.</source>
          <target state="translated">これらは論理的に &lt;code&gt;Trunc('datetime_field', kind)&lt;/code&gt; と同等です。日付のすべての部分を &lt;code&gt;kind&lt;/code&gt; 合わせて切り捨て、日時のグループ化やフィルタリングを精度を下げて行うことができます。 &lt;code&gt;expression&lt;/code&gt; は、 &lt;code&gt;DateTimeField&lt;/code&gt; の &lt;code&gt;output_field&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="5804cdc6cee9337b46c057c6247660f5a8364c2b" translate="yes" xml:space="preserve">
          <source>These are logically equivalent to &lt;code&gt;Trunc('time_field', kind)&lt;/code&gt;. They truncate all parts of the time up to &lt;code&gt;kind&lt;/code&gt; which allows grouping or filtering times with less precision. &lt;code&gt;expression&lt;/code&gt; can have an &lt;code&gt;output_field&lt;/code&gt; of either &lt;code&gt;TimeField&lt;/code&gt; or &lt;code&gt;DateTimeField&lt;/code&gt;.</source>
          <target state="translated">これらは論理的に &lt;code&gt;Trunc('time_field', kind)&lt;/code&gt; と同等です。それらは時間のすべての部分を &lt;code&gt;kind&lt;/code&gt; て切り捨てます。これにより、精度の低いグループ化またはフィルター処理が可能になります。 &lt;code&gt;expression&lt;/code&gt; は、 &lt;code&gt;TimeField&lt;/code&gt; または &lt;code&gt;DateTimeField&lt;/code&gt; のいずれかの &lt;code&gt;output_field&lt;/code&gt; を持つことができます。</target>
        </trans-unit>
        <trans-unit id="50bd291265aae0c0fb9e73beecb38af09dafcff9" translate="yes" xml:space="preserve">
          <source>These are the &lt;strong&gt;basics&lt;/strong&gt;. For more details on settings and other bits included with the framework see &lt;a href=&quot;../howto/static-files/index&quot;&gt;the static files howto&lt;/a&gt; and &lt;a href=&quot;../ref/contrib/staticfiles&quot;&gt;the staticfiles reference&lt;/a&gt;. &lt;a href=&quot;../howto/static-files/deployment&quot;&gt;Deploying static files&lt;/a&gt; discusses how to use static files on a real server.</source>
          <target state="translated">これらは&lt;strong&gt;基本&lt;/strong&gt;です。フレームワークに含まれる設定やその他のビットの詳細について&lt;a href=&quot;../howto/static-files/index&quot;&gt;は、静的ファイルのhowto&lt;/a&gt;および&lt;a href=&quot;../ref/contrib/staticfiles&quot;&gt;staticfilesリファレンスをご覧ください&lt;/a&gt;。&lt;a href=&quot;../howto/static-files/deployment&quot;&gt;静的ファイルのデプロイ&lt;/a&gt;では、実サーバーで静的ファイルを使用する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="151eb5bf5744bf8063650cfa2ece87cc03e56770" translate="yes" xml:space="preserve">
          <source>These are the behavioral differences between using &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt; を使用した場合の動作の違いは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="5d1f38ee94a36c6b6b2cec4fb39d0485df0fabb4" translate="yes" xml:space="preserve">
          <source>These are the same as &lt;code&gt;CharField.max_length&lt;/code&gt; and &lt;code&gt;CharField.min_length&lt;/code&gt;.</source>
          <target state="translated">これらは &lt;code&gt;CharField.max_length&lt;/code&gt; および &lt;code&gt;CharField.min_length&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="7d22090f912b19514c42634f07fce865ff3a270b" translate="yes" xml:space="preserve">
          <source>These attributes are used to query for the cardinality and other details of a relation. These attribute are present on all fields; however, they will only have boolean values (rather than &lt;code&gt;None&lt;/code&gt;) if the field is a relation type (&lt;a href=&quot;#django.db.models.Field.is_relation&quot;&gt;&lt;code&gt;Field.is_relation=True&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">これらの属性は、関係のカーディナリティーおよびその他の詳細を照会するために使用されます。これらの属性はすべてのフィールドに存在します。ただし、フィールドがリレーションタイプ（&lt;a href=&quot;#django.db.models.Field.is_relation&quot;&gt; &lt;code&gt;Field.is_relation=True&lt;/code&gt; &lt;/a&gt;）の場合、（ &lt;code&gt;None&lt;/code&gt; ではなく）ブール値のみが含まれます。</target>
        </trans-unit>
        <trans-unit id="6c9ac79d4e422f2ae16dd2fd794c5f063a051c44" translate="yes" xml:space="preserve">
          <source>These can be looped over in the widget template:</source>
          <target state="translated">これらはウィジェットテンプレートでループオーバーさせることができます。</target>
        </trans-unit>
        <trans-unit id="31b7b1455e3ab5f0a917f40a5321d723e049b397" translate="yes" xml:space="preserve">
          <source>These can be matched with a &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt; line such as:</source>
          <target state="translated">これらは、&lt;a href=&quot;../../topics/http/urls&quot;&gt;次の&lt;/a&gt;ようなURLconf行と一致させることができます。</target>
        </trans-unit>
        <trans-unit id="7dde7e9f5922ce83d9207aa75c5262243db571c6" translate="yes" xml:space="preserve">
          <source>These can&amp;rsquo;t report on the internals of your code, but can provide a useful insight into your site&amp;rsquo;s overall performance, including aspects that can&amp;rsquo;t be adequately measured from within Django environment. Examples include:</source>
          <target state="translated">これらは、コードの内部についてレポートすることはできませんが、Django環境内から適切に測定できない側面を含む、サイトの全体的なパフォーマンスに関する有用な洞察を提供できます。例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1d81b624432fa9ad29c6c90d7b4473aaba2854fb" translate="yes" xml:space="preserve">
          <source>These checks will only be run if the &lt;a href=&quot;../ref/django-admin#cmdoption-check-deploy&quot;&gt;&lt;code&gt;check --deploy&lt;/code&gt;&lt;/a&gt; option is used.</source>
          <target state="translated">これらのチェックは、&lt;a href=&quot;../ref/django-admin#cmdoption-check-deploy&quot;&gt; &lt;code&gt;check --deploy&lt;/code&gt; &lt;/a&gt;オプションが使用されている場合にのみ実行されます。</target>
        </trans-unit>
        <trans-unit id="26c853c5f0ce231fbfad9d81d3d0f3ec08cc045c" translate="yes" xml:space="preserve">
          <source>These classes and functions enable the use of generic relations in forms and the admin. See the &lt;a href=&quot;../../topics/forms/modelforms&quot;&gt;model formset&lt;/a&gt; and &lt;a href=&quot;admin/index#using-generic-relations-as-an-inline&quot;&gt;admin&lt;/a&gt; documentation for more information.</source>
          <target state="translated">これらのクラスと関数は、フォームと管理者での一般的な関係の使用を可能にします。詳細については、&lt;a href=&quot;../../topics/forms/modelforms&quot;&gt;モデルフォームセット&lt;/a&gt;と&lt;a href=&quot;admin/index#using-generic-relations-as-an-inline&quot;&gt;管理&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b32ba46892379b0488d917d599bb75aa07b70724" translate="yes" xml:space="preserve">
          <source>These concepts are represented by Python classes. Edit the &lt;code&gt;polls/models.py&lt;/code&gt; file so it looks like this:</source>
          <target state="translated">これらの概念は、Pythonクラスによって表されます。 &lt;code&gt;polls/models.py&lt;/code&gt; ファイルを次のように編集します。</target>
        </trans-unit>
        <trans-unit id="43c124fe0f792bebbb071a1d2b10db9048ab0ed3" translate="yes" xml:space="preserve">
          <source>These conditions have the same database restrictions as &lt;a href=&quot;../../models/indexes#django.db.models.Index.condition&quot;&gt;&lt;code&gt;django.db.models.Index.condition&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらの条件には、&lt;a href=&quot;../../models/indexes#django.db.models.Index.condition&quot;&gt; &lt;code&gt;django.db.models.Index.condition&lt;/code&gt; &lt;/a&gt;と同じデータベース制限があります。</target>
        </trans-unit>
        <trans-unit id="d70f195ee9660ff33a236be74f31fd1c96263086" translate="yes" xml:space="preserve">
          <source>These conditions have the same database restrictions as &lt;a href=&quot;indexes#django.db.models.Index.condition&quot;&gt;&lt;code&gt;Index.condition&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらの条件には、&lt;a href=&quot;indexes#django.db.models.Index.condition&quot;&gt; &lt;code&gt;Index.condition&lt;/code&gt; &lt;/a&gt;と同じデータベース制限があります。</target>
        </trans-unit>
        <trans-unit id="3855f3dc40d9d7f39d8cda63c79ab18d1d68be4f" translate="yes" xml:space="preserve">
          <source>These control the range of values permitted in the field, and should be given as &lt;code&gt;decimal.Decimal&lt;/code&gt; values.</source>
          <target state="translated">これらはフィールドで許可される値の範囲を制御し、 &lt;code&gt;decimal.Decimal&lt;/code&gt; 値として指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="3ac6c9cd493651714528d9531e7499105a0e1d98" translate="yes" xml:space="preserve">
          <source>These control the range of values permitted in the field.</source>
          <target state="translated">これらは、フィールドで許可される値の範囲を制御します。</target>
        </trans-unit>
        <trans-unit id="1d31e0ea8826de848f67ccc50cc409b106513c48" translate="yes" xml:space="preserve">
          <source>These decorators can be used to generate &lt;code&gt;ETag&lt;/code&gt; and &lt;code&gt;Last-Modified&lt;/code&gt; headers; see &lt;a href=&quot;../conditional-view-processing&quot;&gt;conditional view processing&lt;/a&gt;.</source>
          <target state="translated">これらのデコレーターを使用して、 &lt;code&gt;ETag&lt;/code&gt; および &lt;code&gt;Last-Modified&lt;/code&gt; ヘッダーを生成できます。&lt;a href=&quot;../conditional-view-processing&quot;&gt;条件付きビューの処理を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4eba9b75824489b6751a633fb101fd9cc8f0463f" translate="yes" xml:space="preserve">
          <source>These drivers are thread-safe and provide connection pooling.</source>
          <target state="translated">これらのドライバはスレッドセーフで、接続プーリングを提供します。</target>
        </trans-unit>
        <trans-unit id="f783e4a54d21c873c25728d58f8e24098cbdad3d" translate="yes" xml:space="preserve">
          <source>These error messages often don&amp;rsquo;t propagate to forms. See &lt;a href=&quot;../../topics/forms/modelforms#considerations-regarding-model-errormessages&quot;&gt;Considerations regarding model&amp;rsquo;s error_messages&lt;/a&gt;.</source>
          <target state="translated">これらのエラーメッセージはフォームに反映されないことがよくあります。&lt;a href=&quot;../../topics/forms/modelforms#considerations-regarding-model-errormessages&quot;&gt;モデルのerror_messagesに関する考慮事項を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fc37aef28cd57ff09019f44261fe870e19984e1f" translate="yes" xml:space="preserve">
          <source>These expressions are defined in &lt;code&gt;django.db.models.expressions&lt;/code&gt; and &lt;code&gt;django.db.models.aggregates&lt;/code&gt;, but for convenience they&amp;rsquo;re available and usually imported from &lt;a href=&quot;../../topics/db/models#module-django.db.models&quot;&gt;&lt;code&gt;django.db.models&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらの式は &lt;code&gt;django.db.models.expressions&lt;/code&gt; と &lt;code&gt;django.db.models.aggregates&lt;/code&gt; で定義されていますが、便宜上利用でき、通常は&lt;a href=&quot;../../topics/db/models#module-django.db.models&quot;&gt; &lt;code&gt;django.db.models&lt;/code&gt; &lt;/a&gt;からインポートされます。</target>
        </trans-unit>
        <trans-unit id="e118c1024f14f076a44dcc64598a3aeee1b7ab4e" translate="yes" xml:space="preserve">
          <source>These extra attributes cannot be overridden unless the field that defines it is changed or removed so that it no longer defines the extra attribute.</source>
          <target state="translated">これらの余分な属性は、それを定義しているフィールドが変更されたり削除されたりして、それが余分な属性を定義しなくなるようにならない限り、上書きすることはできません。</target>
        </trans-unit>
        <trans-unit id="bd68f523b7ace0cf5729eed9d49b1b8dd9b1021a" translate="yes" xml:space="preserve">
          <source>These extra lookups may not be portable to different database engines (because you&amp;rsquo;re explicitly writing SQL code) and violate the DRY principle, so you should avoid them if possible.</source>
          <target state="translated">これらの追加のルックアップは、別のデータベースエンジンに移植できない場合があり（SQLコードを明示的に記述しているため）、DRYの原則に違反しているため、可能であれば回避する必要があります。</target>
        </trans-unit>
        <trans-unit id="a1cd01b26caf9820ccd797d86a0c27cfbd90fa00" translate="yes" xml:space="preserve">
          <source>These fields should be some kind of text field, such as &lt;code&gt;CharField&lt;/code&gt; or &lt;code&gt;TextField&lt;/code&gt;. You can also perform a related lookup on a &lt;code&gt;ForeignKey&lt;/code&gt; or &lt;code&gt;ManyToManyField&lt;/code&gt; with the lookup API &amp;ldquo;follow&amp;rdquo; notation:</source>
          <target state="translated">これらのフィールドは、 &lt;code&gt;CharField&lt;/code&gt; や &lt;code&gt;TextField&lt;/code&gt; などのテキストフィールドである必要があります。ルックアップAPIの「フォロー」表記を使用して、 &lt;code&gt;ForeignKey&lt;/code&gt; または &lt;code&gt;ManyToManyField&lt;/code&gt; で関連するルックアップを実行することもできます。</target>
        </trans-unit>
        <trans-unit id="b81be3771bbb864d65a54b4e5daf5d6ac8bf6994" translate="yes" xml:space="preserve">
          <source>These fields subclass &lt;a href=&quot;../../models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.EmailField&quot;&gt;&lt;code&gt;EmailField&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../models/fields#django.db.models.TextField&quot;&gt;&lt;code&gt;TextField&lt;/code&gt;&lt;/a&gt;, respectively.</source>
          <target state="translated">これらのフィールドは、それぞれ&lt;a href=&quot;../../models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../models/fields#django.db.models.EmailField&quot;&gt; &lt;code&gt;EmailField&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../../models/fields#django.db.models.TextField&quot;&gt; &lt;code&gt;TextField&lt;/code&gt; を&lt;/a&gt;サブクラス化します。</target>
        </trans-unit>
        <trans-unit id="7e7cdd0871f533426a8eb966c973d6cdcefc37d5" translate="yes" xml:space="preserve">
          <source>These files are marked to say they replace the previously-squashed migrations, so they can coexist with the old migration files, and Django will intelligently switch between them depending where you are in the history. If you&amp;rsquo;re still part-way through the set of migrations that you squashed, it will keep using them until it hits the end and then switch to the squashed history, while new installs will use the new squashed migration and skip all the old ones.</source>
          <target state="translated">これらのファイルは、以前に押しつぶされた移行を置き換えることを示すマークが付けられているため、古い移行ファイルと共存でき、Djangoは履歴内の場所に応じてそれらをインテリジェントに切り替えます。押しつぶした一連の移行の途中である場合は、最後に到達するまでそれらを使用し続け、押しつぶされた履歴に切り替えますが、新しいインストールでは新しい押しつぶされた移行が使用され、古いものはすべてスキップされます。</target>
        </trans-unit>
        <trans-unit id="59453eba3cca73d3f4e6eca60587f3f63376bec8" translate="yes" xml:space="preserve">
          <source>These files are:</source>
          <target state="translated">これらのファイルは</target>
        </trans-unit>
        <trans-unit id="10a689a35f902db0c52a7d13669aa1560f7adfad" translate="yes" xml:space="preserve">
          <source>These filters accept both aware and naive datetimes. For conversion purposes, they assume that naive datetimes are in the default time zone. They always return aware datetimes.</source>
          <target state="translated">これらのフィルタは、既知の日付と素朴な日付の両方を受け入れます。変換のために、ナイーブな日付はデフォルトのタイムゾーンにあると仮定します。常に認識している日付を返します。</target>
        </trans-unit>
        <trans-unit id="09b2adf2daadd17f8991c7ad4e29a27c18bec106" translate="yes" xml:space="preserve">
          <source>These format characters are not used in Django outside of templates. They were designed to be compatible with PHP to ease transitioning for designers.</source>
          <target state="translated">これらのフォーマット文字は、テンプレート以外では Django では使用されません。これらは、デザイナーが移行しやすいように PHP との互換性を考慮して設計されています。</target>
        </trans-unit>
        <trans-unit id="d36c44a2a16c421407efb0787f4cf7a77d871598" translate="yes" xml:space="preserve">
          <source>These functions are available from the &lt;code&gt;django.contrib.postgres.aggregates&lt;/code&gt; module. They are described in more detail in the &lt;a href=&quot;https://www.postgresql.org/docs/current/functions-aggregate.html&quot;&gt;PostgreSQL docs&lt;/a&gt;.</source>
          <target state="translated">これらの関数は &lt;code&gt;django.contrib.postgres.aggregates&lt;/code&gt; モジュールから利用できます。それらは&lt;a href=&quot;https://www.postgresql.org/docs/current/functions-aggregate.html&quot;&gt;PostgreSQLのドキュメントで&lt;/a&gt;詳細に説明されています。</target>
        </trans-unit>
        <trans-unit id="3613b66d5ec05e9b517e97a09c69770f654bb184" translate="yes" xml:space="preserve">
          <source>These functions do nothing if savepoints aren&amp;rsquo;t supported or if the database is in autocommit mode.</source>
          <target state="translated">セーブポイントがサポートされていない場合、またはデータベースが自動コミットモードの場合、これらの関数は何もしません。</target>
        </trans-unit>
        <trans-unit id="26d2fbeed66708a6b2e3fea607b273adbc6a423b" translate="yes" xml:space="preserve">
          <source>These functions store a lazy reference to the string &amp;ndash; not the actual translation. The translation itself will be done when the string is used in a string context, such as in template rendering.</source>
          <target state="translated">これらの関数は、実際の翻訳ではなく、文字列への遅延参照を格納します。テンプレートのレンダリングなど、文字列が文字列コンテキストで使用される場合、変換自体が行われます。</target>
        </trans-unit>
        <trans-unit id="1481dfb24ded2fa557792db5ab783a7b722addfb" translate="yes" xml:space="preserve">
          <source>These functions take a &lt;code&gt;using&lt;/code&gt; argument which should be the name of a database. If it isn&amp;rsquo;t provided, Django uses the &lt;code&gt;&quot;default&quot;&lt;/code&gt; database.</source>
          <target state="translated">これらの関数は、データベースの名前であるはずの &lt;code&gt;using&lt;/code&gt; 引数を取ります。提供されていない場合、Djangoは &lt;code&gt;&quot;default&quot;&lt;/code&gt; データベースを使用します。</target>
        </trans-unit>
        <trans-unit id="ce7737bf890658d5a693c066c1b625a2b8fa4443" translate="yes" xml:space="preserve">
          <source>These limitations can be worked around, though, because your field name doesn&amp;rsquo;t necessarily have to match your database column name. See the &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.db_column&quot;&gt;&lt;code&gt;db_column&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">ただし、フィールド名は必ずしもデータベースの列名と一致する必要がないため、これらの制限は回避できます。&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.db_column&quot;&gt; &lt;code&gt;db_column&lt;/code&gt; &lt;/a&gt;オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="6153116eca0bc5ff88e6a1c9c0ed7bdd536fd2f5" translate="yes" xml:space="preserve">
          <source>These log events will reach the &lt;code&gt;django&lt;/code&gt; logger by default, which mails error events to admins when &lt;code&gt;DEBUG=False&lt;/code&gt;. Requests resulting in a 400 response due to a &lt;code&gt;SuspiciousOperation&lt;/code&gt; will not be logged to the &lt;code&gt;django.request&lt;/code&gt; logger, but only to the &lt;code&gt;django.security&lt;/code&gt; logger.</source>
          <target state="translated">これらのログイベントは、デフォルトで &lt;code&gt;django&lt;/code&gt; ロガーに到達します &lt;code&gt;DEBUG=False&lt;/code&gt; 場合、エラーイベントが管理者にメールで送信されます。起因して400応答をもたらす要求 &lt;code&gt;SuspiciousOperation&lt;/code&gt; はに記録されません &lt;code&gt;django.request&lt;/code&gt; だけに、ロガー &lt;code&gt;django.security&lt;/code&gt; のロガー。</target>
        </trans-unit>
        <trans-unit id="c7c3eb4dcf73f6eae594708817f6f59f743cdab5" translate="yes" xml:space="preserve">
          <source>These methods accept all the same arguments &lt;em&gt;except&lt;/em&gt; for &lt;code&gt;follow&lt;/code&gt;. Since this is just a factory for producing requests, it&amp;rsquo;s up to you to handle the response.</source>
          <target state="translated">これらのメソッドは、 &lt;code&gt;follow&lt;/code&gt; &lt;em&gt;を除い&lt;/em&gt;てすべて同じ引数&lt;em&gt;を&lt;/em&gt;受け入れます。これはリクエストを生成するための単なるファクトリーであるため、応答を処理するのはユーザー次第です。</target>
        </trans-unit>
        <trans-unit id="c69fb2d164c2dba74094b46050e6d1308565c85f" translate="yes" xml:space="preserve">
          <source>These methods are run in the order given above, one field at a time. That is, for each field in the form (in the order they are declared in the form definition), the &lt;code&gt;Field.clean()&lt;/code&gt; method (or its override) is run, then &lt;code&gt;clean_&amp;lt;fieldname&amp;gt;()&lt;/code&gt;. Finally, once those two methods are run for every field, the &lt;a href=&quot;api#django.forms.Form.clean&quot;&gt;&lt;code&gt;Form.clean()&lt;/code&gt;&lt;/a&gt; method, or its override, is executed whether or not the previous methods have raised errors.</source>
          <target state="translated">これらのメソッドは、上記の順序で、一度に1つのフィールドで実行されます。つまり、フォーム内の各フィールドに対して（フォーム定義で宣言された順序で）、 &lt;code&gt;Field.clean()&lt;/code&gt; メソッド（またはそのオーバーライド）が実行され、次に &lt;code&gt;clean_&amp;lt;fieldname&amp;gt;()&lt;/code&gt; が実行されます。最後に、これらの2つのメソッドがすべてのフィールドに対して実行されると、以前のメソッドでエラーが発生したかどうかに関係なく、&lt;a href=&quot;api#django.forms.Form.clean&quot;&gt; &lt;code&gt;Form.clean()&lt;/code&gt; &lt;/a&gt;メソッドまたはそのオーバーライドが実行されます。</target>
        </trans-unit>
        <trans-unit id="87068cc66a4571abc366c73b028c9e7489527d88" translate="yes" xml:space="preserve">
          <source>These methods do not use a cache (see &lt;a href=&quot;../../topics/db/queries#caching-and-querysets&quot;&gt;Caching and QuerySets&lt;/a&gt;). Rather, they query the database each time they&amp;rsquo;re called.</source>
          <target state="translated">これらのメソッドはキャッシュを使用しません（&lt;a href=&quot;../../topics/db/queries#caching-and-querysets&quot;&gt;キャッシュとクエリセットを&lt;/a&gt;参照）。むしろ、呼び出されるたびにデータベースにクエリを実行します。</target>
        </trans-unit>
        <trans-unit id="60c2db895bfe774801c88d30673bffc29d282607" translate="yes" xml:space="preserve">
          <source>These methods involve somewhat advanced Python programming and are described in detail in the &lt;a href=&quot;../../topics/forms/media&quot;&gt;Form Assets&lt;/a&gt; topic guide.</source>
          <target state="translated">これらのメソッドには、多少高度なPythonプログラミングが含まれており、&lt;a href=&quot;../../topics/forms/media&quot;&gt;フォームアセットの&lt;/a&gt;トピックガイドで詳細に説明されています。</target>
        </trans-unit>
        <trans-unit id="7559beb910e4d8b1dca7b5e709c16d19e91f56ae" translate="yes" xml:space="preserve">
          <source>These might be compiled statically into Apache, or you might need to use LoadModule to load them dynamically in your &lt;code&gt;httpd.conf&lt;/code&gt;:</source>
          <target state="translated">これらは静的にApacheにコンパイルされるか、LoadModuleを使用して &lt;code&gt;httpd.conf&lt;/code&gt; に動的にロードする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="668670d53f79178e79d3961dfed3c09d30eb2b84" translate="yes" xml:space="preserve">
          <source>These named URLs are registered with the application namespace &lt;code&gt;admin&lt;/code&gt;, and with an instance namespace corresponding to the name of the Site instance.</source>
          <target state="translated">これらの名前付きURLは、アプリケーション名前空間 &lt;code&gt;admin&lt;/code&gt; と、サイトインスタンスの名前に対応するインスタンス名前空間に登録されています。</target>
        </trans-unit>
        <trans-unit id="f8970d45562b27d4dd7dda0de0f49bd1955231e7" translate="yes" xml:space="preserve">
          <source>These patterns are used by default: &lt;code&gt;'CVS'&lt;/code&gt;, &lt;code&gt;'.*'&lt;/code&gt;, &lt;code&gt;'*~'&lt;/code&gt;, &lt;code&gt;'*.pyc'&lt;/code&gt;.</source>
          <target state="translated">次のパターンがデフォルトで使用されます： &lt;code&gt;'CVS'&lt;/code&gt; 、 &lt;code&gt;'.*'&lt;/code&gt; 、 &lt;code&gt;'*~'&lt;/code&gt; 、 &lt;code&gt;'*.pyc'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="40e6af629c1a12f9351f2a4b7bdb42560e70d097" translate="yes" xml:space="preserve">
          <source>These permissions will be created when you run &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;manage.py migrate&lt;/code&gt;&lt;/a&gt;; the first time you run &lt;code&gt;migrate&lt;/code&gt; after adding &lt;code&gt;django.contrib.auth&lt;/code&gt; to &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, the default permissions will be created for all previously-installed models, as well as for any new models being installed at that time. Afterward, it will create default permissions for new models each time you run &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;manage.py migrate&lt;/code&gt;&lt;/a&gt; (the function that creates permissions is connected to the &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_migrate&quot;&gt;&lt;code&gt;post_migrate&lt;/code&gt;&lt;/a&gt; signal).</source>
          <target state="translated">これらの権限は、&lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;manage.py migrate&lt;/code&gt; &lt;/a&gt;を実行すると作成されます。 &lt;code&gt;django.contrib.auth&lt;/code&gt; を&lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;に追加した後で初めて &lt;code&gt;migrate&lt;/code&gt; を実行すると、以前にインストールされたすべてのモデルと、その時点でインストールされているすべての新しいモデルに対してデフォルトの権限が作成されます。その後、&lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;manage.py migrate&lt;/code&gt; &lt;/a&gt;を実行するたびに新しいモデルのデフォルトのパーミッションが作成されます（パーミッションを作成する関数は&lt;a href=&quot;../../ref/signals#django.db.models.signals.post_migrate&quot;&gt; &lt;code&gt;post_migrate&lt;/code&gt; &lt;/a&gt;シグナルに接続されています）。</target>
        </trans-unit>
        <trans-unit id="b373a3d98792413ead4ac2102435da1629b6d9f8" translate="yes" xml:space="preserve">
          <source>These profile models are not special in any way - they are just Django models that happen to have a one-to-one link with a user model. As such, they aren&amp;rsquo;t auto created when a user is created, but a &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_save&quot;&gt;&lt;code&gt;django.db.models.signals.post_save&lt;/code&gt;&lt;/a&gt; could be used to create or update related models as appropriate.</source>
          <target state="translated">これらのプロファイルモデルは特別なものではありません。ユーザーモデルと1対1でリンクしているDjangoモデルにすぎません。そのため、ユーザーの作成時に自動的に作成されることはありませんが、&lt;a href=&quot;../../ref/signals#django.db.models.signals.post_save&quot;&gt; &lt;code&gt;django.db.models.signals.post_save&lt;/code&gt; &lt;/a&gt;を使用して、必要に応じて関連モデルを作成または更新できます。</target>
        </trans-unit>
        <trans-unit id="2e81a2fd18e0fb9a802e3f49bc6fdbcd66325343" translate="yes" xml:space="preserve">
          <source>These provide a &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.user&quot;&gt;&lt;code&gt;request.user&lt;/code&gt;&lt;/a&gt; attribute on every request which represents the current user. If the current user has not logged in, this attribute will be set to an instance of &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt;&lt;code&gt;AnonymousUser&lt;/code&gt;&lt;/a&gt;, otherwise it will be an instance of &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらは、現在のユーザーを表すすべてのリクエストに&lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.user&quot;&gt; &lt;code&gt;request.user&lt;/code&gt; &lt;/a&gt;属性を提供します。現在のユーザーがログインしていない場合、この属性は&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt; &lt;code&gt;AnonymousUser&lt;/code&gt; の&lt;/a&gt;インスタンスに設定され&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt;。それ以外の場合は、Userのインスタンスになります。</target>
        </trans-unit>
        <trans-unit id="1a52f49716ae638af573877c07f913495b580a02" translate="yes" xml:space="preserve">
          <source>These rules apply regardless of whether &lt;a href=&quot;#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; references application configuration classes or application packages.</source>
          <target state="translated">これらのルールは、&lt;a href=&quot;#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; が&lt;/a&gt;アプリケーション構成クラスまたはアプリケーションパッケージのどちらを参照するかに関係なく適用されます。</target>
        </trans-unit>
        <trans-unit id="432c77af6e262f2a0007bc9985de2eb83c3b1c55" translate="yes" xml:space="preserve">
          <source>These rules provide the necessary flexibility if you want to install a collection of custom managers on a group of models, via an abstract base class, but still customize the default manager. For example, suppose you have this base class:</source>
          <target state="translated">これらのルールは、抽象ベースクラスを介してモデルのグループにカスタムマネージャのコレクションをインストールしたいが、デフォルトマネージャをカスタマイズしたい場合に必要な柔軟性を提供します。例えば、次のような基底クラスがあるとします。</target>
        </trans-unit>
        <trans-unit id="c690c313d5a2ca67a462ea1c271dd620a9c88b9c" translate="yes" xml:space="preserve">
          <source>These settings assume you have a &lt;code&gt;templates&lt;/code&gt; directory in the root of your project. To override the templates for the &lt;code&gt;blog&lt;/code&gt; app, create a folder in the &lt;code&gt;templates&lt;/code&gt; directory, and add the template files to that folder:</source>
          <target state="translated">これらの設定は、プロジェクトのルートに &lt;code&gt;templates&lt;/code&gt; ディレクトリがあることを前提としています。 &lt;code&gt;blog&lt;/code&gt; アプリのテンプレートを上書きするには、 &lt;code&gt;templates&lt;/code&gt; ディレクトリにフォルダーを作成し、テンプレートファイルをそのフォルダーに追加します。</target>
        </trans-unit>
        <trans-unit id="6d0c4ae958a0ebe978561639237bb001048dc9aa" translate="yes" xml:space="preserve">
          <source>These sorts of tags are called &amp;ldquo;inclusion tags&amp;rdquo;.</source>
          <target state="translated">このような種類のタグは「包含タグ」と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="14d9f7c08639f4992b98b72080df4bac0a97e254" translate="yes" xml:space="preserve">
          <source>These specifics &amp;ndash; 2.5 megabytes; &lt;code&gt;/tmp&lt;/code&gt;; etc. &amp;ndash; are &amp;ldquo;reasonable defaults&amp;rdquo; which can be customized as described in the next section.</source>
          <target state="translated">これらの詳細&amp;ndash; 2.5メガバイト。 &lt;code&gt;/tmp&lt;/code&gt; ; など&amp;ndash;次のセクションで説明するようにカスタマイズできる「妥当なデフォルト」です。</target>
        </trans-unit>
        <trans-unit id="61a4c0c6e98a48f0ef5475c3b067eccb73a5f862" translate="yes" xml:space="preserve">
          <source>These tags also require a &lt;code&gt;{% load i18n %}&lt;/code&gt;.</source>
          <target state="translated">これらのタグには &lt;code&gt;{% load i18n %}&lt;/code&gt; も必要です。</target>
        </trans-unit>
        <trans-unit id="30ed96ec28b705164b775cb2cc5f0e2984387004" translate="yes" xml:space="preserve">
          <source>These techniques are targeted at more advanced users who want to push the boundaries of performance of an already well-optimized Django site.</source>
          <target state="translated">これらのテクニックは、すでに最適化された Django サイトのパフォーマンスの限界を押し広げたいと考えている、より高度なユーザーを対象としています。</target>
        </trans-unit>
        <trans-unit id="8341e8fb9ee809077cb7896c6dc0a69d3221e480" translate="yes" xml:space="preserve">
          <source>These three &lt;code&gt;QuerySets&lt;/code&gt; are separate. The first is a base &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; containing all entries that contain a headline starting with &amp;ldquo;What&amp;rdquo;. The second is a subset of the first, with an additional criteria that excludes records whose &lt;code&gt;pub_date&lt;/code&gt; is today or in the future. The third is a subset of the first, with an additional criteria that selects only the records whose &lt;code&gt;pub_date&lt;/code&gt; is today or in the future. The initial &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;q1&lt;/code&gt;) is unaffected by the refinement process.</source>
          <target state="translated">これら3つの &lt;code&gt;QuerySets&lt;/code&gt; は独立しています。 1つ目は、「What」で始まる見出しを含むすべてのエントリを含む基本&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;です。 2番目は、最初のサブセットであり、追加の基準を使用して、 &lt;code&gt;pub_date&lt;/code&gt; が今日または将来のレコードを除外します。 3番目は、1番目のサブセットであり、追加の基準を使用して、 &lt;code&gt;pub_date&lt;/code&gt; が今日または将来のレコードのみを選択します。最初の&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;q1&lt;/code&gt; ）は、調整プロセスの影響を受けません。</target>
        </trans-unit>
        <trans-unit id="757950666b8fbab76b5c4cb07e02bab987476329" translate="yes" xml:space="preserve">
          <source>These two functions are passed as parameters to the &lt;code&gt;django.views.decorators.http.condition&lt;/code&gt; decorator. This decorator uses the two functions (you only need to supply one, if you can&amp;rsquo;t compute both quantities easily and quickly) to work out if the headers in the HTTP request match those on the resource. If they don&amp;rsquo;t match, a new copy of the resource must be computed and your normal view is called.</source>
          <target state="translated">これら2つの関数は、パラメーターとして &lt;code&gt;django.views.decorators.http.condition&lt;/code&gt; デコレーターに渡されます。このデコレータは2つの関数を使用して（両方の量を簡単かつ迅速に計算できない場合は、1つを指定するだけで十分です）、HTTPリクエストのヘッダーがリソースのヘッダーと一致するかどうかを確認します。それらが一致しない場合は、リソースの新しいコピーを計算する必要があり、通常のビューが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="207b6a51ea55d16e8d0b1a65f1407f0365b5f528" translate="yes" xml:space="preserve">
          <source>These two groups of functions have slightly different purposes, and it&amp;rsquo;s important to keep them straight. Normally, you would use &lt;code&gt;quote()&lt;/code&gt; on the individual portions of the IRI or URI path so that any reserved characters such as &amp;lsquo;&amp;amp;&amp;rsquo; or &amp;lsquo;%&amp;rsquo; are correctly encoded. Then, you apply &lt;code&gt;iri_to_uri()&lt;/code&gt; to the full IRI and it converts any non-ASCII characters to the correct encoded values.</source>
          <target state="translated">これらの2つの関数グループの目的は少し異なります。これらをまっすぐに保つことが重要です。通常、IRIまたはURIパスの個々の部分で &lt;code&gt;quote()&lt;/code&gt; を使用して、「＆」や「％」などの予約文字が正しくエンコードされるようにします。次に、 &lt;code&gt;iri_to_uri()&lt;/code&gt; を完全なIRIに適用し、非ASCII文字を正しいエンコード値に変換します。</target>
        </trans-unit>
        <trans-unit id="fdef885543a3721796b5a18e4dc67e715710190f" translate="yes" xml:space="preserve">
          <source>These validators are available from the &lt;code&gt;django.contrib.postgres.validators&lt;/code&gt; module.</source>
          <target state="translated">これらのバリデーターは &lt;code&gt;django.contrib.postgres.validators&lt;/code&gt; モジュールから入手できます。</target>
        </trans-unit>
        <trans-unit id="2f0f4b335c9a3ff0d3d406159e4d926212beeceb" translate="yes" xml:space="preserve">
          <source>These values and lists are 1-based, not 0-based, so the first page would be represented as page &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">最初のページはページとして表現されるので、これらの値とリストは、0ベースではない、1をベースとしている &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b6b2bb2dde29fab29c2207460ac6cadaacbbc06" translate="yes" xml:space="preserve">
          <source>These values are only displayed for unbound forms, and they&amp;rsquo;re not used as fallback values if a particular value isn&amp;rsquo;t provided.</source>
          <target state="translated">これらの値はバインドされていないフォームに対してのみ表示され、特定の値が提供されていない場合のフォールバック値としては使用されません。</target>
        </trans-unit>
        <trans-unit id="11268e1c18bb10eac43ab6892fcbbda794ff66e2" translate="yes" xml:space="preserve">
          <source>These views inherit &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin&quot;&gt;&lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt;&lt;/a&gt; which uses &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix&quot;&gt;&lt;code&gt;template_name_suffix&lt;/code&gt;&lt;/a&gt; to construct the &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; based on the model.</source>
          <target state="translated">これらのビューは、&lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; &lt;/a&gt;基づいて&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix&quot;&gt; &lt;code&gt;template_name_suffix&lt;/code&gt; &lt;/a&gt;を構築するためにtemplate_name_suffixを使用する&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin&quot;&gt; &lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt; &lt;/a&gt;を継承します。</target>
        </trans-unit>
        <trans-unit id="29a3334722cfad7fd5554e0fb1aafd81da076850" translate="yes" xml:space="preserve">
          <source>These views represent a common case of basic Web development: getting data from the database according to a parameter passed in the URL, loading a template and returning the rendered template. Because this is so common, Django provides a shortcut, called the &amp;ldquo;generic views&amp;rdquo; system.</source>
          <target state="translated">これらのビューは、基本的なWeb開発の一般的なケースを表しています。URLで渡されたパラメーターに従ってデータベースからデータを取得し、テンプレートをロードして、レンダリングされたテンプレートを返します。これは非常に一般的であるため、Djangoは「汎用ビュー」システムと呼ばれるショートカットを提供します。</target>
        </trans-unit>
        <trans-unit id="23bbc8d60be2c755e2f9e623e8bf42d01485c203" translate="yes" xml:space="preserve">
          <source>These views return &lt;a href=&quot;../../template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; instances which allow you to easily customize the response data before rendering. For more details, see the &lt;a href=&quot;../../template-response&quot;&gt;TemplateResponse documentation&lt;/a&gt;.</source>
          <target state="translated">これらのビューは&lt;a href=&quot;../../template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt;インスタンスを返し、レンダリングする前に応答データを簡単にカスタマイズできます。詳細については、&lt;a href=&quot;../../template-response&quot;&gt;TemplateResponseのドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="f4a0329157f8f7f97e101113c93e1cffe78d13e0" translate="yes" xml:space="preserve">
          <source>These views return &lt;a href=&quot;../template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; instances which allow you to easily customize the response data before rendering. For more details, see the &lt;a href=&quot;../template-response&quot;&gt;TemplateResponse documentation&lt;/a&gt;.</source>
          <target state="translated">これらのビューは&lt;a href=&quot;../template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt;インスタンスを返し、レンダリングする前に応答データを簡単にカスタマイズできます。詳細については、&lt;a href=&quot;../template-response&quot;&gt;TemplateResponseのドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="0d2c61c0654cf39fb1cadf90f403f1ffbdfb5fa4" translate="yes" xml:space="preserve">
          <source>These widgets make use of the HTML elements &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;input type=&quot;radio&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">これらのウィジェットは、HTML要素 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;lt;input type=&quot;radio&quot;&amp;gt;&lt;/code&gt; を利用します。</target>
        </trans-unit>
        <trans-unit id="b201cf52b101336df1d987acc576b495a5065d30" translate="yes" xml:space="preserve">
          <source>These widgets make use of the HTML elements &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;textarea&lt;/code&gt;.</source>
          <target state="translated">これらのウィジェットは、HTML要素 &lt;code&gt;input&lt;/code&gt; および &lt;code&gt;textarea&lt;/code&gt; を利用します。</target>
        </trans-unit>
        <trans-unit id="209ae4e703bfdbcbe41dd07f3bf0e163cb4d6d46" translate="yes" xml:space="preserve">
          <source>These work similar to &lt;a href=&quot;https://docs.python.org/3/library/enum.html#module-enum&quot;&gt;&lt;code&gt;enum&lt;/code&gt;&lt;/a&gt; from Python&amp;rsquo;s standard library, but with some modifications:</source>
          <target state="translated">これらは、Pythonの標準ライブラリの&lt;a href=&quot;https://docs.python.org/3/library/enum.html#module-enum&quot;&gt; &lt;code&gt;enum&lt;/code&gt; &lt;/a&gt;と同様に機能しますが、いくつかの変更点があります。</target>
        </trans-unit>
        <trans-unit id="defbd4396e45ff5a6d1ec27bc9db03ec32c25ba8" translate="yes" xml:space="preserve">
          <source>They accept strings in ISO 8601 date/time formats (or some close alternatives) and return objects from the corresponding classes in Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#module-datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">それらは、ISO 8601日付/時刻形式（またはいくつかの代替手段）の文字列を受け入れ、Pythonの&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#module-datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;モジュールの対応するクラスからオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="0a57448ac678ab15c5024e99574887cd2d62c3cf" translate="yes" xml:space="preserve">
          <source>They accept up to picosecond resolution in input, but they truncate it to microseconds, since that&amp;rsquo;s what Python supports.</source>
          <target state="translated">彼らは入力で最大ピコ秒の解像度を受け入れますが、それがマイクロ秒に切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="c0b5078a8ac15f6ab3e6719883c692dcb73c6f84" translate="yes" xml:space="preserve">
          <source>They can also be registered as transforms as described in &lt;a href=&quot;#django.db.models.functions.Length&quot;&gt;&lt;code&gt;Length&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.functions.Length&quot;&gt; &lt;code&gt;Length&lt;/code&gt; &lt;/a&gt;さで説明されているように、変換として登録することもできます。</target>
        </trans-unit>
        <trans-unit id="20419018a63bab14428321e30852b03b16aa819f" translate="yes" xml:space="preserve">
          <source>They look like this:</source>
          <target state="translated">こんな感じです。</target>
        </trans-unit>
        <trans-unit id="3e540b9dcce638be785d22acaaa3cb69d64d7f98" translate="yes" xml:space="preserve">
          <source>They raise &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; if their input is well formatted but isn&amp;rsquo;t a valid date or time.</source>
          <target state="translated">彼らは上げる&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;自分の入力がうまくフォーマットされている場合は、有効な日付や時間ではありません。</target>
        </trans-unit>
        <trans-unit id="f99b17c2983d44a488dbdfbc23bea0d6e43b4481" translate="yes" xml:space="preserve">
          <source>They return &lt;code&gt;None&lt;/code&gt; if it isn&amp;rsquo;t well formatted at all.</source>
          <target state="translated">それがまったくフォーマットされていない場合、 &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="812ce3fd42e848fcc884d0bd799abc17f2609188" translate="yes" xml:space="preserve">
          <source>Things get more complicated if you use inheritance. Consider a subclass of &lt;code&gt;Blog&lt;/code&gt;:</source>
          <target state="translated">継承を使用すると、状況はさらに複雑になります。 &lt;code&gt;Blog&lt;/code&gt; のサブクラスを考えてみましょう：</target>
        </trans-unit>
        <trans-unit id="e9e9609ac9fe3987564a8635909eb477eb1365e8" translate="yes" xml:space="preserve">
          <source>Things to note here:</source>
          <target state="translated">ここで注意すべきこと</target>
        </trans-unit>
        <trans-unit id="930b1d9337c15998012417e2df8566cd18d5617d" translate="yes" xml:space="preserve">
          <source>Think back to our earlier example of using &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; together. We were recording a user&amp;rsquo;s interest in a particular author; say now that we want to let them leave a message saying why they like them. Again, let&amp;rsquo;s assume we&amp;rsquo;re not going to store this in a relational database but instead in something more esoteric that we won&amp;rsquo;t worry about here.</source>
          <target state="translated">以前の&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; を&lt;/a&gt;一緒に使用した例を思い出してください。特定の作者に対するユーザーの関心を記録していました。ここで、なぜ彼らが気に入ったのかを伝えるメッセージを残したいとします。繰り返しますが、これをリレーショナルデータベースに格納するのではなく、ここでは心配しない、より難解なものに格納することを想定します。</target>
        </trans-unit>
        <trans-unit id="47eda723b31d0a2660ab879e5a042004791db074" translate="yes" xml:space="preserve">
          <source>Think back to our earlier example of using &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; together. We were recording a user&amp;rsquo;s interest in a particular author; say now that we want to let them leave a message saying why they like them. Again, let&amp;rsquo;s assume we&amp;rsquo;re not going to store this in a relational database but instead in something more esoteric that we won&amp;rsquo;t worry about here.</source>
          <target state="translated">&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; を&lt;/a&gt;一緒に使用する前の例を思い出してください。特定の著者に対するユーザーの関心を記録していました。なぜ彼らが彼らを好きなのかというメッセージを彼らに残させたいと今言ってください。繰り返しになりますが、これをリレーショナルデータベースに保存するのではなく、ここでは気にしない、より難解なものに保存するとします。</target>
        </trans-unit>
        <trans-unit id="bba49c4526ad803643cfdb6cdd00de3926c6b873" translate="yes" xml:space="preserve">
          <source>Think of &lt;em&gt;safe&lt;/em&gt; as shorthand for &lt;em&gt;safe from further escaping&lt;/em&gt; or &lt;em&gt;can be safely interpreted as HTML&lt;/em&gt;. In this example, if &lt;code&gt;data&lt;/code&gt; contains &lt;code&gt;'&amp;lt;b&amp;gt;'&lt;/code&gt;, the output will be:</source>
          <target state="translated">考えて&lt;em&gt;、安全&lt;/em&gt;のための速記として&lt;em&gt;、さらに逃げるの安全&lt;/em&gt;や&lt;em&gt;安全にHTMLとして解釈することができます&lt;/em&gt;。この例では、 &lt;code&gt;data&lt;/code&gt; に &lt;code&gt;'&amp;lt;b&amp;gt;'&lt;/code&gt; が含まれている場合、出力は次のようになります。</target>
        </trans-unit>
        <trans-unit id="d8d91b13aeb4abe02cad0ef9d448b4827bd79ce1" translate="yes" xml:space="preserve">
          <source>Third party applications might use deprecated APIs in order to support multiple versions of Django, so deprecation warnings in packages you&amp;rsquo;ve installed don&amp;rsquo;t necessarily indicate a problem. If a package doesn&amp;rsquo;t support the latest version of Django, consider raising an issue or sending a pull request for it.</source>
          <target state="translated">サードパーティのアプリケーションは、Djangoの複数のバージョンをサポートするために非推奨のAPIを使用している場合があるため、インストールしたパッケージの非推奨の警告は必ずしも問題を示しているわけではありません。パッケージがDjangoの最新バージョンをサポートしていない場合は、問題を提起するか、プルリクエストを送信することを検討してください。</target>
        </trans-unit>
        <trans-unit id="8b75a3978ba07f56f892b6dad49ca9e655751f2a" translate="yes" xml:space="preserve">
          <source>Third, you can manually render each field:</source>
          <target state="translated">第三に、各フィールドを手動でレンダリングすることができます。</target>
        </trans-unit>
        <trans-unit id="d93da6425ac5f23d9de76af9ecc6290d48890219" translate="yes" xml:space="preserve">
          <source>Third-party apps or those developing against MyISAM will need to set this; in general, however, you should be developing your own projects against a transactional database and be using &lt;code&gt;TestCase&lt;/code&gt; for most tests, and thus not need this setting.</source>
          <target state="translated">サードパーティのアプリまたはMyISAMに対して開発しているアプリは、これを設定する必要があります。ただし、一般的には、トランザクションデータベースに対して独自のプロジェクトを開発し、ほとんどのテストで &lt;code&gt;TestCase&lt;/code&gt; を使用する必要があるため、この設定は必要ありません。</target>
        </trans-unit>
        <trans-unit id="1dca3ce07c7428024eef7d0ba36844ac85942016" translate="yes" xml:space="preserve">
          <source>Third-party backends can register their functions in the top level &lt;code&gt;__init__.py&lt;/code&gt; file of the backend package or in a top level &lt;code&gt;expressions.py&lt;/code&gt; file (or package) that is imported from the top level &lt;code&gt;__init__.py&lt;/code&gt;.</source>
          <target state="translated">サードパーティのバックエンドは、バックエンドパッケージの最上位の &lt;code&gt;__init__.py&lt;/code&gt; ファイル、または最上位の &lt;code&gt;__init__.py&lt;/code&gt; からインポートされた最上位の &lt;code&gt;expressions.py&lt;/code&gt; ファイル（またはパッケージ）に関数を登録できます。</target>
        </trans-unit>
        <trans-unit id="0d3aea5a656aa75d4bc142a8ef3190878893a157" translate="yes" xml:space="preserve">
          <source>Third-party panels are also available for the toolbar, that can (for example) report on cache performance and template rendering times.</source>
          <target state="translated">サードパーティ製のパネルもツールバーに用意されており、キャッシュパフォーマンスやテンプレートのレンダリング時間などをレポートすることができます。</target>
        </trans-unit>
        <trans-unit id="871d2b6d2f4209a2045939948478b5ad9e16f6a2" translate="yes" xml:space="preserve">
          <source>Third-party services</source>
          <target state="translated">第三者サービス</target>
        </trans-unit>
        <trans-unit id="1a94a06a870c70d54a7306092125524ffc4a985d" translate="yes" xml:space="preserve">
          <source>Thirty-two bit floating point</source>
          <target state="translated">32ビット浮動小数点</target>
        </trans-unit>
        <trans-unit id="d02dbccd28b8a4110858dadd40a75564131c151d" translate="yes" xml:space="preserve">
          <source>Thirty-two bit signed integer</source>
          <target state="translated">32ビット符号付き整数</target>
        </trans-unit>
        <trans-unit id="46fdc4562bad3c71149e5b74089c85fdee4e2144" translate="yes" xml:space="preserve">
          <source>Thirty-two bit unsigned integer</source>
          <target state="translated">32ビット符号なし整数</target>
        </trans-unit>
        <trans-unit id="8659901c6ab113559070b8efb3e88975313d14f5" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;fields&lt;/code&gt; option should not be confused with the &lt;code&gt;fields&lt;/code&gt; dictionary key that is within the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt;&lt;code&gt;fieldsets&lt;/code&gt;&lt;/a&gt; option, as described in the next section.</source>
          <target state="translated">この &lt;code&gt;fields&lt;/code&gt; オプションは、次のセクションで説明するように、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt; &lt;code&gt;fieldsets&lt;/code&gt; &lt;/a&gt;オプション内にある &lt;code&gt;fields&lt;/code&gt; ディクショナリキーと混同しないでください。</target>
        </trans-unit>
        <trans-unit id="efe668f9708459c16592061670a3ccc9192de15e" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;save()&lt;/code&gt; method accepts an optional &lt;code&gt;commit&lt;/code&gt; keyword argument, which accepts either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. If you call &lt;code&gt;save()&lt;/code&gt; with &lt;code&gt;commit=False&lt;/code&gt;, then it will return an object that hasn&amp;rsquo;t yet been saved to the database. In this case, it&amp;rsquo;s up to you to call &lt;code&gt;save()&lt;/code&gt; on the resulting model instance. This is useful if you want to do custom processing on the object before saving it, or if you want to use one of the specialized &lt;a href=&quot;../../ref/models/instances#ref-models-force-insert&quot;&gt;model saving options&lt;/a&gt;. &lt;code&gt;commit&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; by default.</source>
          <target state="translated">この &lt;code&gt;save()&lt;/code&gt; メソッドは、オプションの &lt;code&gt;commit&lt;/code&gt; キーワード引数を受け入れます。これは、 &lt;code&gt;True&lt;/code&gt; または &lt;code&gt;False&lt;/code&gt; のいずれかを受け入れます。 &lt;code&gt;commit=False&lt;/code&gt; を指定して &lt;code&gt;save()&lt;/code&gt; を呼び出すと、まだデータベースに保存されていないオブジェクトが返されます。この場合、結果のモデルインスタンスで &lt;code&gt;save()&lt;/code&gt; を呼び出すのはあなた次第です。これは、オブジェクトを保存する前にカスタム処理を行う場合、または特殊な&lt;a href=&quot;../../ref/models/instances#ref-models-force-insert&quot;&gt;モデル保存オプションの&lt;/a&gt; 1つを使用する場合に便利です。 &lt;code&gt;commit&lt;/code&gt; はデフォルトで &lt;code&gt;True&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9842d1e5ae6a88c77cc910626a2d1e24fafb1ee3" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;{% url ... as var %}&lt;/code&gt; syntax will &lt;em&gt;not&lt;/em&gt; cause an error if the view is missing. In practice you&amp;rsquo;ll use this to link to views that are optional:</source>
          <target state="translated">この &lt;code&gt;{% url ... as var %}&lt;/code&gt; 構文は、ビューがない場合でもエラーを引き起こし&lt;em&gt;ません&lt;/em&gt;。実際には、これを使用してオプションのビューにリンクします。</target>
        </trans-unit>
        <trans-unit id="5d144afb4955208a7ac9e7e6727e05123ca3e550" translate="yes" xml:space="preserve">
          <source>This SQL is backend independent, so we don&amp;rsquo;t need to worry about different databases.</source>
          <target state="translated">このSQLはバックエンドに依存しないため、さまざまなデータベースについて心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="922c1ab6c52735016ea62da5aea0d9fb8c82e767" translate="yes" xml:space="preserve">
          <source>This abstract class cannot be rendered, but provides the basic attribute &lt;a href=&quot;#django.forms.Widget.attrs&quot;&gt;&lt;code&gt;attrs&lt;/code&gt;&lt;/a&gt;. You may also implement or override the &lt;a href=&quot;#django.forms.Widget.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; method on custom widgets.</source>
          <target state="translated">この抽象クラスはレンダリングできませんが、基本的な属性&lt;a href=&quot;#django.forms.Widget.attrs&quot;&gt; &lt;code&gt;attrs&lt;/code&gt; を&lt;/a&gt;提供します。カスタムウィジェットで&lt;a href=&quot;#django.forms.Widget.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt;メソッドを実装またはオーバーライドすることもできます。</target>
        </trans-unit>
        <trans-unit id="f98df779cf3edb8e16509ad8baf14ab0f117e89b" translate="yes" xml:space="preserve">
          <source>This accomplishes roughly the same thing as the previous example, except:</source>
          <target state="translated">これは、前の例とほぼ同じことを達成していますが、それ以外は。</target>
        </trans-unit>
        <trans-unit id="10ffbb81642bfce2b4f307086e6a4bafb907bede" translate="yes" xml:space="preserve">
          <source>This accomplishes several things quite nicely:</source>
          <target state="translated">これは、いくつかのことをかなりきれいに達成します。</target>
        </trans-unit>
        <trans-unit id="e9bdec834f18a99a8cb91f0165d3cd8461872b02" translate="yes" xml:space="preserve">
          <source>This address is used only for error messages. It is &lt;em&gt;not&lt;/em&gt; the address that regular email messages sent with &lt;a href=&quot;../topics/email#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt; come from; for that, see &lt;a href=&quot;#std:setting-DEFAULT_FROM_EMAIL&quot;&gt;&lt;code&gt;DEFAULT_FROM_EMAIL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このアドレスはエラーメッセージにのみ使用されます。&lt;a href=&quot;../topics/email#django.core.mail.send_mail&quot;&gt; &lt;code&gt;send_mail()&lt;/code&gt; で&lt;/a&gt;送信される通常の電子メールメッセージの送信元アドレスではあり&lt;em&gt;ません&lt;/em&gt;。これについては、&lt;a href=&quot;#std:setting-DEFAULT_FROM_EMAIL&quot;&gt; &lt;code&gt;DEFAULT_FROM_EMAIL&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9c7bcc51ac61f5d7e80fb62bd7fb7c62e0537ec0" translate="yes" xml:space="preserve">
          <source>This adds an additional field to each form. This new field is named &lt;code&gt;ORDER&lt;/code&gt; and is an &lt;code&gt;forms.IntegerField&lt;/code&gt;. For the forms that came from the initial data it automatically assigned them a numeric value. Let&amp;rsquo;s look at what will happen when the user changes these values:</source>
          <target state="translated">これにより、各フォームにフィールドが追加されます。この新しいフィールドは &lt;code&gt;ORDER&lt;/code&gt; という名前で、 &lt;code&gt;forms.IntegerField&lt;/code&gt; です。初期データから取得したフォームの場合は、数値が自動的に割り当てられました。ユーザーがこれらの値を変更するとどうなるかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="d3031abb1ae9e3ebcfbb4e7492ad3a9557e276f8" translate="yes" xml:space="preserve">
          <source>This adds the extra method from the &lt;code&gt;EnhancedArticleForm&lt;/code&gt; and modifies the original &lt;code&gt;ArticleForm.Meta&lt;/code&gt; to remove one field.</source>
          <target state="translated">これにより、 &lt;code&gt;EnhancedArticleForm&lt;/code&gt; からメソッドが追加され、元の &lt;code&gt;ArticleForm.Meta&lt;/code&gt; が変更されて1つのフィールドが削除されます。</target>
        </trans-unit>
        <trans-unit id="7da81e3de260768907f3e0d72ace994d16203d0d" translate="yes" xml:space="preserve">
          <source>This advanced tutorial begins where &lt;a href=&quot;tutorial07&quot;&gt;Tutorial 7&lt;/a&gt; left off. We&amp;rsquo;ll be turning our Web-poll into a standalone Python package you can reuse in new projects and share with other people.</source>
          <target state="translated">この高度なチュートリアルは、&lt;a href=&quot;tutorial07&quot;&gt;チュートリアル7&lt;/a&gt;が終了したところから始まります。WebポーリングをスタンドアロンのPythonパッケージにして、新しいプロジェクトで再利用して他の人と共有できるようにします。</target>
        </trans-unit>
        <trans-unit id="d13069d968d715ba29f0d3d45e284548cff5c148" translate="yes" xml:space="preserve">
          <source>This aggregate produces a query with the SQL 2003 &lt;code&gt;FILTER WHERE&lt;/code&gt; syntax on databases that support it:</source>
          <target state="translated">この集計は、SQL 2003 &lt;code&gt;FILTER WHERE&lt;/code&gt; 構文をサポートするデータベースでクエリを生成します。</target>
        </trans-unit>
        <trans-unit id="206af2ca091b9ba2d0eaea6323f193f1d5866b4d" translate="yes" xml:space="preserve">
          <source>This allows interacting with third-party databases that store datetimes in local time rather than UTC. To avoid issues around DST changes, you shouldn&amp;rsquo;t set this option for databases managed by Django.</source>
          <target state="translated">これにより、日時をUTCではなく現地時間で格納するサードパーティデータベースとのやり取りが可能になります。DSTの変更に関する問題を回避するには、Djangoが管理するデータベースに対してこのオプションを設定しないでください。</target>
        </trans-unit>
        <trans-unit id="cf5da3cb1c1aab6b7a871362c558a51b462f6df1" translate="yes" xml:space="preserve">
          <source>This allows prefetching the same relation multiple times with a different &lt;code&gt;QuerySet&lt;/code&gt;; for instance:</source>
          <target state="translated">これにより、異なる &lt;code&gt;QuerySet&lt;/code&gt; で同じリレーションを複数回プリフェッチできます。例えば：</target>
        </trans-unit>
        <trans-unit id="d52f43f4b912f7688766d81544389903b845d369" translate="yes" xml:space="preserve">
          <source>This allows you to access the final page of results without first having to determine how many pages there are.</source>
          <target state="translated">これにより、最初にページ数を決定することなく、結果の最終ページにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="3b7b3f159ed03ed9cb4b03f229125786e7044007" translate="yes" xml:space="preserve">
          <source>This allows you to check if a movie is rated better or worse than its peers.</source>
          <target state="translated">これにより、映画の評価が他の映画よりも良いか悪いかを確認することができます。</target>
        </trans-unit>
        <trans-unit id="1d7c9808cea39c5e99d97b770f890c92544ba75f" translate="yes" xml:space="preserve">
          <source>This also addresses a man-in-the-middle attack that&amp;rsquo;s possible under HTTPS when using a session independent secret, due to the fact that HTTP &lt;code&gt;Set-Cookie&lt;/code&gt; headers are (unfortunately) accepted by clients even when they are talking to a site under HTTPS. (Referer checking is not done for HTTP requests because the presence of the &lt;code&gt;Referer&lt;/code&gt; header isn&amp;rsquo;t reliable enough under HTTP.)</source>
          <target state="translated">これは、HTTP &lt;code&gt;Set-Cookie&lt;/code&gt; ヘッダーが（残念ながら）HTTPSでサイトと通信している場合でもクライアントに受け入れられるため、セッションに依存しないシークレットを使用している場合にHTTPSで発生する可能性がある中間者攻撃にも対処します。 。（存在するのでリファラーチェックがHTTPリクエストのために行われていない &lt;code&gt;Referer&lt;/code&gt; ヘッダがHTTP下の信頼性は十分ではありません。）</target>
        </trans-unit>
        <trans-unit id="00873cef11eb7a0ee1b86c6a650fd2687c63823c" translate="yes" xml:space="preserve">
          <source>This also allows the result to be used in &lt;code&gt;ORDER BY&lt;/code&gt; and &lt;code&gt;DISTINCT ON&lt;/code&gt; clauses. For example &lt;code&gt;Experiment.objects.order_by('change__abs')&lt;/code&gt; generates:</source>
          <target state="translated">これにより、結果を &lt;code&gt;ORDER BY&lt;/code&gt; および &lt;code&gt;DISTINCT ON&lt;/code&gt; 句で使用することもできます。たとえば、 &lt;code&gt;Experiment.objects.order_by('change__abs')&lt;/code&gt; は以下を生成します。</target>
        </trans-unit>
        <trans-unit id="6aeeef97b1b4a728464e53eb13776742e51a25fd" translate="yes" xml:space="preserve">
          <source>This also applies to customized implementations of &lt;a href=&quot;../../ref/applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;../../ref/applications#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; の&lt;/a&gt;カスタマイズされた実装にも適用されます。</target>
        </trans-unit>
        <trans-unit id="7bf48f47451354e6af2ba41a76704fa04394723f" translate="yes" xml:space="preserve">
          <source>This also avoids a redirect loop when &lt;a href=&quot;#django.contrib.auth.views.LoginView&quot;&gt;&lt;code&gt;LoginView&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;code&gt;redirect_authenticated_user=True&lt;/code&gt; and the logged-in user doesn&amp;rsquo;t have all of the required permissions.</source>
          <target state="translated">これにより、&lt;a href=&quot;#django.contrib.auth.views.LoginView&quot;&gt; &lt;code&gt;LoginView&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;redirect_authenticated_user=True&lt;/code&gt; であり、ログインしたユーザーに必要なすべての権限がない場合のリダイレクトループも回避されます。</target>
        </trans-unit>
        <trans-unit id="f166604f226b26033e41bd4d6adfb34570b6882a" translate="yes" xml:space="preserve">
          <source>This also works in reverse:</source>
          <target state="translated">これは逆もしかりです。</target>
        </trans-unit>
        <trans-unit id="19589a226533ed4866b513b51865b12f1780fca3" translate="yes" xml:space="preserve">
          <source>This also works in templates. See &lt;a href=&quot;#translator-comments-in-templates&quot;&gt;Comments for translators in templates&lt;/a&gt; for more details.</source>
          <target state="translated">これはテンプレートでも機能します。詳細&lt;a href=&quot;#translator-comments-in-templates&quot;&gt;については、テンプレート内の翻訳者へのコメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e1da31da942f373ac6ec4bdd2bc6cae4188e32b5" translate="yes" xml:space="preserve">
          <source>This also works with full URLs:</source>
          <target state="translated">これはフルURLでも動作します。</target>
        </trans-unit>
        <trans-unit id="24e33c6072af3df1d8472934e3eccf57593568a0" translate="yes" xml:space="preserve">
          <source>This approach applies the decorator on a per-instance basis. If you want every instance of a view to be decorated, you need to take a different approach.</source>
          <target state="translated">このアプローチでは、インスタンスごとにデコレータを適用します。ビューのすべてのインスタンスをデコレーションしたい場合は、別のアプローチを取る必要があります。</target>
        </trans-unit>
        <trans-unit id="d687e8c265fa6bf427f4459613cfe07a61b283b4" translate="yes" xml:space="preserve">
          <source>This approach can also be used with any other generic class-based views or your own class-based views inheriting directly from &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt;, as it keeps the different views as separate as possible.</source>
          <target state="translated">このアプローチは、他の一般的なクラスベースのビュー、または&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt;から直接継承する独自のクラスベースのビューでも使用できます。これにより、異なるビューが可能な限り分離されます。</target>
        </trans-unit>
        <trans-unit id="2c38caa01d1dc23be407f6eaaa8d26b1da652f04" translate="yes" xml:space="preserve">
          <source>This approach can also be used with any other generic class-based views or your own class-based views inheriting directly from &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt;, as it keeps the different views as separate as possible.</source>
          <target state="translated">このアプローチは、他の一般的なクラスベースのビュー、または&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt;から直接継承する独自のクラスベースのビューでも使用できます。これは、さまざまなビューを可能な限り分離するためです。</target>
        </trans-unit>
        <trans-unit id="f0e00c66184302704d0a20e9ec80ab1488466a5a" translate="yes" xml:space="preserve">
          <source>This approach maximizes code reuse and helps to add items to shared content areas, such as section-wide navigation.</source>
          <target state="translated">このアプローチは、コードの再利用を最大化し、セクション全体のナビゲーションなどの共有コンテンツ領域にアイテムを追加するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="1a825f9d86116fec6c1158a8cb665242431feaf7" translate="yes" xml:space="preserve">
          <source>This assumes 64bit version of OSGeo4W is installed. If you have installed the 32bit version you will need to change the first command to &lt;code&gt;set OSGEO4W_ROOT=C:\OSGeo4W&lt;/code&gt;.</source>
          <target state="translated">これは、64ビットバージョンのOSGeo4Wがインストールされていることを前提としています。 32ビットバージョンをインストールした場合は、最初のコマンドを変更して &lt;code&gt;set OSGEO4W_ROOT=C:\OSGeo4W&lt;/code&gt; を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="f78d35f70778bc7b3d5b29b21ace0bf63af05935" translate="yes" xml:space="preserve">
          <source>This assumes we&amp;rsquo;ve imported a &lt;code&gt;MyFormField&lt;/code&gt; field class (which has its own default widget). This document doesn&amp;rsquo;t cover the details of writing custom form fields.</source>
          <target state="translated">これは、 &lt;code&gt;MyFormField&lt;/code&gt; フィールドクラス（独自のデフォルトウィジェットを持つ）をインポートしたことを前提としています。このドキュメントでは、カスタムフォームフィールドの詳細については説明しません。</target>
        </trans-unit>
        <trans-unit id="133633bb73f92c1c551154f40e4eac91f1a7095f" translate="yes" xml:space="preserve">
          <source>This assumes you have a top-level project package named &lt;code&gt;mysite&lt;/code&gt;, and within it a module &lt;code&gt;mysite/wsgi.py&lt;/code&gt; that contains a WSGI &lt;code&gt;application&lt;/code&gt; object. This is the layout you&amp;rsquo;ll have if you ran &lt;code&gt;django-admin
startproject mysite&lt;/code&gt; (using your own project name in place of &lt;code&gt;mysite&lt;/code&gt;) with a recent version of Django. If this file doesn&amp;rsquo;t exist, you&amp;rsquo;ll need to create it. See the &lt;a href=&quot;index&quot;&gt;How to deploy with WSGI&lt;/a&gt; documentation for the default contents you should put in this file and what else you can add to it.</source>
          <target state="translated">これは、 &lt;code&gt;mysite&lt;/code&gt; という名前のトップレベルのプロジェクトパッケージがあり、その中にWSGI &lt;code&gt;application&lt;/code&gt; オブジェクトを含むモジュール &lt;code&gt;mysite/wsgi.py&lt;/code&gt; があることを前提としています。これは、Djangoの最新バージョンで &lt;code&gt;django-admin startproject mysite&lt;/code&gt; （ &lt;code&gt;mysite&lt;/code&gt; の代わりに独自のプロジェクト名を使用）を実行した場合のレイアウトです。このファイルが存在しない場合は、作成する必要があります。このファイルに入れる必要があるデフォルトのコンテンツと、他に何を追加できるかについては、&lt;a href=&quot;index&quot;&gt;WSGIを使用してデプロイする方法の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="06c21fcff424a74ca6683f7bcc828faf356d8672" translate="yes" xml:space="preserve">
          <source>This attribute allows relabeling an application when two applications have conflicting labels. It defaults to the last component of &lt;code&gt;name&lt;/code&gt;. It should be a valid Python identifier.</source>
          <target state="translated">この属性により、2つのアプリケーションのラベルが競合する場合に、アプリケーションのラベルを変更できます。デフォルトは &lt;code&gt;name&lt;/code&gt; の最後のコンポーネントです。有効なPython識別子である必要があります。</target>
        </trans-unit>
        <trans-unit id="384958bfd2dc302feb9c111d3f8fc356a11c33ed" translate="yes" xml:space="preserve">
          <source>This attribute can help mitigate &lt;a href=&quot;https://wiki.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References&quot;&gt;insecure direct object reference&lt;/a&gt; attacks. When applications allow access to individual objects by a sequential primary key, an attacker could brute-force guess all URLs; thereby obtaining a list of all objects in the application. If users with access to individual objects should be prevented from obtaining this list, setting &lt;code&gt;query_pk_and_slug&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; will help prevent the guessing of URLs as each URL will require two correct, non-sequential arguments. Using a unique slug may serve the same purpose, but this scheme allows you to have non-unique slugs.</source>
          <target state="translated">この属性は、&lt;a href=&quot;https://wiki.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References&quot;&gt;安全でない直接オブジェクト参照&lt;/a&gt;攻撃を軽減するのに役立ちます。アプリケーションがシーケンシャルプライマリキーによる個々のオブジェクトへのアクセスを許可する場合、攻撃者はすべてのURLをブルートフォースで推測する可能性があります。これにより、アプリケーション内のすべてのオブジェクトのリストを取得します。個々のオブジェクトにアクセスできるユーザーがこのリストを取得できないようにする必要がある場合は、 &lt;code&gt;query_pk_and_slug&lt;/code&gt; を &lt;code&gt;True&lt;/code&gt; に設定すると、各URLに2つの正しい非順次引数が必要になるため、URLの推測を防ぐのに役立ちます。一意のスラッグを使用しても同じ目的を果たすことができますが、このスキームでは、一意でないスラッグを使用できます。</target>
        </trans-unit>
        <trans-unit id="75a21f66b48bf69cd4e4b6b9434e01f825a785bc" translate="yes" xml:space="preserve">
          <source>This attribute can help mitigate &lt;a href=&quot;https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References&quot;&gt;insecure direct object reference&lt;/a&gt; attacks. When applications allow access to individual objects by a sequential primary key, an attacker could brute-force guess all URLs; thereby obtaining a list of all objects in the application. If users with access to individual objects should be prevented from obtaining this list, setting &lt;code&gt;query_pk_and_slug&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; will help prevent the guessing of URLs as each URL will require two correct, non-sequential arguments. Using a unique slug may serve the same purpose, but this scheme allows you to have non-unique slugs.</source>
          <target state="translated">この属性は、&lt;a href=&quot;https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References&quot;&gt;安全でない直接オブジェクト参照&lt;/a&gt;攻撃を軽減するのに役立ちます。アプリケーションが連続した主キーによって個々のオブジェクトへのアクセスを許可すると、攻撃者はすべてのURLを総当たり的に推測する可能性があります。これにより、アプリケーション内のすべてのオブジェクトのリストを取得します。個々のオブジェクトにアクセスできるユーザーがこのリストを取得できないようにする必要がある場合は、 &lt;code&gt;query_pk_and_slug&lt;/code&gt; を &lt;code&gt;True&lt;/code&gt; に設定すると、各URLに2つの正しい非順次引数が必要になるため、URLの推測を防ぐことができます。一意のスラッグを使用しても同じ目的を果たすことができますが、このスキームでは、一意でないスラッグを使用できます。</target>
        </trans-unit>
        <trans-unit id="aa4f7df13325a65588eb9ae75ac9a9735167745c" translate="yes" xml:space="preserve">
          <source>This attribute defaults to &lt;code&gt;label.title()&lt;/code&gt;.</source>
          <target state="translated">この属性のデフォルトは &lt;code&gt;label.title()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ee0874d0745a4ddee1e795c4745a2942590b506a" translate="yes" xml:space="preserve">
          <source>This attribute defines the maximum number of URLs included on each page of the sitemap. Its value should not exceed the default value of &lt;code&gt;50000&lt;/code&gt;, which is the upper limit allowed in the &lt;a href=&quot;https://www.sitemaps.org/protocol.html#index&quot;&gt;Sitemaps protocol&lt;/a&gt;.</source>
          <target state="translated">この属性は、サイトマップの各ページに含まれるURLの最大数を定義します。その値は、&lt;a href=&quot;https://www.sitemaps.org/protocol.html#index&quot;&gt;サイトマッププロトコルで&lt;/a&gt;許可されている上限であるデフォルト値の &lt;code&gt;50000&lt;/code&gt; を超えてはなりません。</target>
        </trans-unit>
        <trans-unit id="f1c3a1341b25ff9392387488411d79f758fbca39" translate="yes" xml:space="preserve">
          <source>This attribute defines the protocol (&lt;code&gt;'http'&lt;/code&gt; or &lt;code&gt;'https'&lt;/code&gt;) of the URLs in the sitemap. If it isn&amp;rsquo;t set, the protocol with which the sitemap was requested is used. If the sitemap is built outside the context of a request, the default is &lt;code&gt;'http'&lt;/code&gt;.</source>
          <target state="translated">この属性は、サイトマップ内のURL のプロトコル（ &lt;code&gt;'http'&lt;/code&gt; または &lt;code&gt;'https'&lt;/code&gt; ）を定義します。設定されていない場合、サイトマップがリクエストされたプロトコルが使用されます。サイトマップがリクエストのコンテキスト外で構築されている場合、デフォルトは &lt;code&gt;'http'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c76de190da8afddcf95e27b5cceed537aaff925c" translate="yes" xml:space="preserve">
          <source>This attribute defines which application the configuration applies to. It must be set in all &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; subclasses.</source>
          <target state="translated">この属性は、構成が適用されるアプリケーションを定義します。すべての&lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt;サブクラスで設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="55be929162f6a2e8a201eb26590ef69caca53b20" translate="yes" xml:space="preserve">
          <source>This attribute exists so middleware can treat streaming responses differently from regular responses.</source>
          <target state="translated">この属性は、ミドルウェアがストリーミング応答を通常の応答とは異なる方法で扱うことができるように存在します。</target>
        </trans-unit>
        <trans-unit id="5714987b0856943bcc55149403366d7e96cd4e04" translate="yes" xml:space="preserve">
          <source>This attribute is &lt;code&gt;True&lt;/code&gt; if the form field is a hidden field and &lt;code&gt;False&lt;/code&gt; otherwise. It&amp;rsquo;s not particularly useful as a template variable, but could be useful in conditional tests such as:</source>
          <target state="translated">この属性は、フォームフィールドが非表示フィールドの場合は &lt;code&gt;True&lt;/code&gt; 、それ以外の場合は &lt;code&gt;False&lt;/code&gt; です。これはテンプレート変数としては特に便利ではありませんが、次のような条件付きテストで役立ちます。</target>
        </trans-unit>
        <trans-unit id="8172e55f20d4414ca9c1b06c97146615eed52b98" translate="yes" xml:space="preserve">
          <source>This attribute is a private API. It may be changed or removed without a deprecation period in the future, for instance to accommodate changes in application loading.</source>
          <target state="translated">この属性はプライベートAPIです。これは将来的に非推奨期間なしに変更または削除される可能性があり、例えばアプリケーションのローディングの変更に対応するためです。</target>
        </trans-unit>
        <trans-unit id="a9169aa322aae2d7cfd246187c386aa06891f660" translate="yes" xml:space="preserve">
          <source>This attribute is deprecated in favor of &lt;a href=&quot;#django.test.SimpleTestCase.databases&quot;&gt;&lt;code&gt;databases&lt;/code&gt;&lt;/a&gt;. The previous behavior of &lt;code&gt;allow_database_queries = True&lt;/code&gt; can be achieved by setting &lt;code&gt;databases = '__all__'&lt;/code&gt;.</source>
          <target state="translated">この属性は&lt;a href=&quot;#django.test.SimpleTestCase.databases&quot;&gt; &lt;code&gt;databases&lt;/code&gt; &lt;/a&gt;ために廃止されました。以前の &lt;code&gt;allow_database_queries = True&lt;/code&gt; 動作は、 &lt;code&gt;databases = '__all__'&lt;/code&gt; 設定することで実現できます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
