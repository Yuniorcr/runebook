<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="78b8aba7c0c4ae80f67ebea10a50bcbc3da701ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AbsoluteValue&lt;/code&gt; example we discussed previously is a transformation which applies to the left-hand side of the lookup. There may be some cases where you want the transformation to be applied to both the left-hand side and the right-hand side. For instance, if you want to filter a queryset based on the equality of the left and right-hand side insensitively to some SQL function.</source>
          <target state="translated">&lt;code&gt;AbsoluteValue&lt;/code&gt; 我々は以前に説明した例は、ルックアップの左側に適用される変換です。変換を左側と右側の両方に適用したい場合があります。たとえば、SQL関数の影響を受けずに左側と右側の等価性に基づいてクエリセットをフィルタリングする場合などです。</target>
        </trans-unit>
        <trans-unit id="6e779acb105048a1d52426d33fd514405c33678f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Aggregate&lt;/code&gt; API is as follows:</source>
          <target state="translated">&lt;code&gt;Aggregate&lt;/code&gt; 以下のようにAPIは以下のとおりです。</target>
        </trans-unit>
        <trans-unit id="d911c34602cafaa77331e7100053f56b2b0f40ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AuthorDisplay&lt;/code&gt; view is almost the same as &lt;a href=&quot;generic-display#generic-views-extra-work&quot;&gt;when we first introduced AuthorDetail&lt;/a&gt;; we have to write our own &lt;code&gt;get_context_data()&lt;/code&gt; to make the &lt;code&gt;AuthorInterestForm&lt;/code&gt; available to the template. We&amp;rsquo;ll skip the &lt;code&gt;get_object()&lt;/code&gt; override from before for clarity:</source>
          <target state="translated">&lt;code&gt;AuthorDisplay&lt;/code&gt; のビューは、ほぼ同じである&lt;a href=&quot;generic-display#generic-views-extra-work&quot;&gt;私たちが最初にAuthorDetailを導入したとき&lt;/a&gt;、独自の &lt;code&gt;get_context_data()&lt;/code&gt; を記述して、 &lt;code&gt;AuthorInterestForm&lt;/code&gt; をテンプレートで使用できるようにする必要があります。わかりやすくするために、前の &lt;code&gt;get_object()&lt;/code&gt; オーバーライドはスキップします。</target>
        </trans-unit>
        <trans-unit id="dc05ce23ac02ec8f3c0899170d3c7fecf9359fb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Blog&lt;/code&gt; model doesn&amp;rsquo;t define an &lt;code&gt;entry__count&lt;/code&gt; attribute by itself, but by using a keyword argument to specify the aggregate function, you can control the name of the annotation:</source>
          <target state="translated">&lt;code&gt;Blog&lt;/code&gt; モデルが定義されていません &lt;code&gt;entry__count&lt;/code&gt; のそれ自体で属性を、しかし、集約関数を指定するには、キーワード引数を使用することによって、あなたは、注釈の名前を制御することができます。</target>
        </trans-unit>
        <trans-unit id="f3cdbe994242b60eaae55c0cf7589105a9566e96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;COALESCE&lt;/code&gt; SQL function is defined as taking a list of columns or values. It will return the first column or value that isn&amp;rsquo;t &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;COALESCE&lt;/code&gt; SQL関数は、列または値のリストを取るように定義されます。 &lt;code&gt;NULL&lt;/code&gt; ではない最初の列または値を返します。</target>
        </trans-unit>
        <trans-unit id="66bd41040b7b8090e6c5cbf88439032ba50fc072" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CONCURRENTLY&lt;/code&gt; option is not supported inside a transaction (see &lt;a href=&quot;../../../howto/writing-migrations#non-atomic-migrations&quot;&gt;non-atomic migration&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;CONCURRENTLY&lt;/code&gt; のオプションは、（参照トランザクションの内部でサポートされていない&lt;a href=&quot;../../../howto/writing-migrations#non-atomic-migrations&quot;&gt;非原子移動を&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="97d947b75daa40e1f9cce25fc27bd884f56b885c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CREATE TABLE&lt;/code&gt; SQL in this example is formatted using PostgreSQL syntax, but it&amp;rsquo;s worth noting Django uses SQL tailored to the database backend specified in your &lt;a href=&quot;../settings&quot;&gt;settings file&lt;/a&gt;.</source>
          <target state="translated">この例の &lt;code&gt;CREATE TABLE&lt;/code&gt; SQLはPostgreSQL構文を使用してフォーマットされていますが、Djangoは&lt;a href=&quot;../settings&quot;&gt;設定ファイルで&lt;/a&gt;指定されたデータベースバックエンドに合わせて調整されたSQLを使用することに注意してください。</target>
        </trans-unit>
        <trans-unit id="861cc2e48a67150675101c0d023d92a6ee1e0b04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Content-Length&lt;/code&gt; and &lt;code&gt;Content-Type&lt;/code&gt; headers are automatically set when they can be guessed from contents of &lt;code&gt;open_file&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Content-Length&lt;/code&gt; と &lt;code&gt;Content-Type&lt;/code&gt; の彼らはの内容から推測することができたときにヘッダが自動的に設定されている &lt;code&gt;open_file&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="44d810df6b481c2cea1143a353ea2db01c08e1e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ContentFile&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;ContentFile&lt;/code&gt; クラス</target>
        </trans-unit>
        <trans-unit id="c605f7fa7df751cf52b25056e2b1d3fecdedb68b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ContentFile&lt;/code&gt; class inherits from &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;, but unlike &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; it operates on string content (bytes also supported), rather than an actual file. For example:</source>
          <target state="translated">&lt;code&gt;ContentFile&lt;/code&gt; クラスから継承&lt;a href=&quot;#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;が、とは異なり、&lt;a href=&quot;#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;ではなく、実際のファイルよりも、それは文字列の内容（もサポートバイト）で動作し、。例えば：</target>
        </trans-unit>
        <trans-unit id="1b7b55a159b59ffae51b1e8f1dd478676fce1e80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ContentType&lt;/code&gt; model</source>
          <target state="translated">&lt;code&gt;ContentType&lt;/code&gt; をモデル</target>
        </trans-unit>
        <trans-unit id="e120c8eb3e5ccb24a47d1db9c9a1301145f2d3ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ContentTypeManager&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ContentTypeManager&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="43dedfcde8c7c617b506f4acc7f270df0a4e11ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CreateView&lt;/code&gt; page displayed to a &lt;code&gt;GET&lt;/code&gt; request uses a &lt;code&gt;template_name_suffix&lt;/code&gt; of &lt;code&gt;'_form'&lt;/code&gt;. For example, changing this attribute to &lt;code&gt;'_create_form'&lt;/code&gt; for a view creating objects for the example &lt;code&gt;Author&lt;/code&gt; model would cause the default &lt;code&gt;template_name&lt;/code&gt; to be &lt;code&gt;'myapp/author_create_form.html'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CreateView&lt;/code&gt; に表示されたページ &lt;code&gt;GET&lt;/code&gt; リクエストを使用しています &lt;code&gt;template_name_suffix&lt;/code&gt; の &lt;code&gt;'_form'&lt;/code&gt; 。たとえば、サンプルの &lt;code&gt;Author&lt;/code&gt; モデルのオブジェクトを作成するビューでこの属性を &lt;code&gt;'_create_form'&lt;/code&gt; に変更すると、デフォルトの &lt;code&gt;template_name&lt;/code&gt; が &lt;code&gt;'myapp/author_create_form.html'&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="ac9e94399203abb8d783b8055f3ff2a76d207c26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; will usually be a big hindrance to testing view functions, due to the need for the CSRF token which must be sent with every POST request. For this reason, Django&amp;rsquo;s HTTP client for tests has been modified to set a flag on requests which relaxes the middleware and the &lt;code&gt;csrf_protect&lt;/code&gt; decorator so that they no longer rejects requests. In every other respect (e.g. sending cookies etc.), they behave the same.</source>
          <target state="translated">&lt;code&gt;CsrfViewMiddleware&lt;/code&gt; は通常、すべてのPOSTリクエストを送信する必要がありますCSRFトークンの必要性に起因するビュー機能をテストするには大きな障害になります。このため、テスト用のDjangoのHTTPクライアントは、ミドルウェアと &lt;code&gt;csrf_protect&lt;/code&gt; デコレータを緩和するリクエストにフラグを設定するように変更され、リクエストを拒否しなくなりました。他のすべての点（たとえば、Cookieの送信など）では、同じように動作します。</target>
        </trans-unit>
        <trans-unit id="de292607cde3e357863df90bae0b1d00bd6d0bc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CurrentSiteManager&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;CurrentSiteManager&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d1e7b97f38c853c73f8dd7053607f722d4701044" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CurrentSiteManager&lt;/code&gt; is only usable when the &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; setting is defined in your settings.</source>
          <target state="translated">&lt;code&gt;CurrentSiteManager&lt;/code&gt; は場合にのみ使用可能です&lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt; &lt;code&gt;SITE_ID&lt;/code&gt; の&lt;/a&gt;設定がお使いの設定で定義されています。</target>
        </trans-unit>
        <trans-unit id="67ecc5eff51d3c54a5e2b6935d90883f50a83bd8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DeleteView&lt;/code&gt; page displayed to a &lt;code&gt;GET&lt;/code&gt; request uses a &lt;code&gt;template_name_suffix&lt;/code&gt; of &lt;code&gt;'_confirm_delete'&lt;/code&gt;. For example, changing this attribute to &lt;code&gt;'_check_delete'&lt;/code&gt; for a view deleting objects for the example &lt;code&gt;Author&lt;/code&gt; model would cause the default &lt;code&gt;template_name&lt;/code&gt; to be &lt;code&gt;'myapp/author_check_delete.html'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DeleteView&lt;/code&gt; のページが表示さに &lt;code&gt;GET&lt;/code&gt; のリクエストが使用する &lt;code&gt;template_name_suffix&lt;/code&gt; の &lt;code&gt;'_confirm_delete'&lt;/code&gt; 。たとえば、サンプルの &lt;code&gt;Author&lt;/code&gt; モデルのオブジェクトを削除するビューでこの属性を &lt;code&gt;'_check_delete'&lt;/code&gt; に変更すると、デフォルトの &lt;code&gt;template_name&lt;/code&gt; が &lt;code&gt;'myapp/author_check_delete.html'&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="c446a58624d2b38d24557e890960fc8e1d3d10d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Driver&lt;/code&gt; class is used internally to wrap an OGR &lt;a href=&quot;#django.contrib.gis.gdal.DataSource&quot;&gt;&lt;code&gt;DataSource&lt;/code&gt;&lt;/a&gt; driver.</source>
          <target state="translated">&lt;code&gt;Driver&lt;/code&gt; クラスはOGRラップするために内部的に使用される&lt;a href=&quot;#django.contrib.gis.gdal.DataSource&quot;&gt; &lt;code&gt;DataSource&lt;/code&gt; &lt;/a&gt;ドライバを。</target>
        </trans-unit>
        <trans-unit id="1b352a6799cbd31f3e63e42e59a34937e0cbcb2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EmailMessage&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;EmailMessage&lt;/code&gt; のクラス</target>
        </trans-unit>
        <trans-unit id="07e3714ec68520f6005679923560b7677138f0cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EmptyFieldListFilter&lt;/code&gt; class was added.</source>
          <target state="translated">&lt;code&gt;EmptyFieldListFilter&lt;/code&gt; のクラスが追加されました。</target>
        </trans-unit>
        <trans-unit id="3d1912cfdde1948121ebf770001aac858886f8d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ExampleFeed&lt;/code&gt; class below gives full documentation on methods and attributes of &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; classes.</source>
          <target state="translated">以下の &lt;code&gt;ExampleFeed&lt;/code&gt; クラスは、&lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt;クラスのメソッドと属性に関する完全なドキュメントを提供します。</target>
        </trans-unit>
        <trans-unit id="bfbb0df8c1cb8dae833c52ae9de6175fd5608511" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;F()&lt;/code&gt; objects support bitwise operations by &lt;code&gt;.bitand()&lt;/code&gt;, &lt;code&gt;.bitor()&lt;/code&gt;, &lt;code&gt;.bitrightshift()&lt;/code&gt;, and &lt;code&gt;.bitleftshift()&lt;/code&gt;. For example:</source>
          <target state="translated">&lt;code&gt;F()&lt;/code&gt; によってサポートビット単位操作オブジェクト &lt;code&gt;.bitand()&lt;/code&gt; 、 &lt;code&gt;.bitor()&lt;/code&gt; 、 &lt;code&gt;.bitrightshift()&lt;/code&gt; 、及び &lt;code&gt;.bitleftshift()&lt;/code&gt; 。例えば：</target>
        </trans-unit>
        <trans-unit id="c3c4702076dea038c9a7851b540f65cb7a0cafcc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;F()&lt;/code&gt; objects support bitwise operations by &lt;code&gt;.bitand()&lt;/code&gt;, &lt;code&gt;.bitor()&lt;/code&gt;, &lt;code&gt;.bitxor()&lt;/code&gt;, &lt;code&gt;.bitrightshift()&lt;/code&gt;, and &lt;code&gt;.bitleftshift()&lt;/code&gt;. For example:</source>
          <target state="translated">&lt;code&gt;F()&lt;/code&gt; によってサポートビット単位操作オブジェクト &lt;code&gt;.bitand()&lt;/code&gt; 、 &lt;code&gt;.bitor()&lt;/code&gt; 、 &lt;code&gt;.bitxor()&lt;/code&gt; 、 &lt;code&gt;.bitrightshift()&lt;/code&gt; 、及び &lt;code&gt;.bitleftshift()&lt;/code&gt; 。例えば：</target>
        </trans-unit>
        <trans-unit id="5e9e0181c0b4d602da85d68ac432240acc634f07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Field.__init__()&lt;/code&gt; method takes the following parameters:</source>
          <target state="translated">&lt;code&gt;Field.__init__()&lt;/code&gt; メソッドは、次のパラメータを取ります。</target>
        </trans-unit>
        <trans-unit id="9d7b848927c946c603d946f7ec55765689bb5bc0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FieldDoesNotExist&lt;/code&gt; exception is raised by a model&amp;rsquo;s &lt;code&gt;_meta.get_field()&lt;/code&gt; method when the requested field does not exist on the model or on the model&amp;rsquo;s parents.</source>
          <target state="translated">&lt;code&gt;FieldDoesNotExist&lt;/code&gt; 例外は、モデルのだけ上昇する &lt;code&gt;_meta.get_field()&lt;/code&gt; 要求されたフィールドがモデル上またはモデルの両親に存在しない場合の方法。</target>
        </trans-unit>
        <trans-unit id="8f2fbadf9de9d57c93cc293ac1beb4bbffc74b82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FieldListFilter&lt;/code&gt; API is considered internal and might be changed.</source>
          <target state="translated">&lt;code&gt;FieldListFilter&lt;/code&gt; の APIは、内部とみなされており、変更される場合があります。</target>
        </trans-unit>
        <trans-unit id="054f12c17df82834714f675523ab2fe6d2f0132a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;File&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; クラス</target>
        </trans-unit>
        <trans-unit id="2e7bbd9905bc17f67ecb85d1dc8abed1854ed881" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;File&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="b79ca764f8009438bf1c05de4e3852e1cd5ae1c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileSystemStorage.delete()&lt;/code&gt; method will not raise an exception if the given file name does not exist.</source>
          <target state="translated">&lt;code&gt;FileSystemStorage.delete()&lt;/code&gt; 指定したファイル名が存在しない場合、メソッドは例外を発生しません。</target>
        </trans-unit>
        <trans-unit id="ffbff64a0f0cda949e739761b67fc69f46291292" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileSystemStorage&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;FileSystemStorage&lt;/code&gt; クラス</target>
        </trans-unit>
        <trans-unit id="306a89bf0e13c9d572b8bfc8cf17a92447c33f1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FlatPage&lt;/code&gt; model has an &lt;code&gt;enable_comments&lt;/code&gt; field that isn&amp;rsquo;t used by &lt;code&gt;contrib.flatpages&lt;/code&gt;, but that could be useful for your project or third-party apps. It doesn&amp;rsquo;t appear in the admin interface, but you can add it by registering a custom &lt;code&gt;ModelAdmin&lt;/code&gt; for &lt;code&gt;FlatPage&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;FlatPage&lt;/code&gt; モデルがあり &lt;code&gt;enable_comments&lt;/code&gt; ので使用されていないフィールド &lt;code&gt;contrib.flatpages&lt;/code&gt; を、それはあなたのプロジェクトまたはサードパーティ製のアプリケーションのために有用である可能性があります。これは、管理インターフェイスには表示されませんが、カスタム登録することにより、それを追加することができ &lt;code&gt;ModelAdmin&lt;/code&gt; のための &lt;code&gt;FlatPage&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="febe870245ad5511a3f4858b0540d28944d20b04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Func&lt;/code&gt; API is as follows:</source>
          <target state="translated">&lt;code&gt;Func&lt;/code&gt; 次のようにAPIは以下のとおりです。</target>
        </trans-unit>
        <trans-unit id="24a72ed1bf58193aff3180a260d78cc621fc0e48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GeoIP&lt;/code&gt; object does not require any parameters to use the default settings. However, at the very least the &lt;a href=&quot;#std:setting-GEOIP_PATH&quot;&gt;&lt;code&gt;GEOIP_PATH&lt;/code&gt;&lt;/a&gt; setting should be set with the path of the location of your GeoIP datasets. The following initialization keywords may be used to customize any of the defaults.</source>
          <target state="translated">&lt;code&gt;GeoIP&lt;/code&gt; オブジェクトは、デフォルトの設定を使用する任意のパラメータを必要としません。ただし、少なくとも&lt;a href=&quot;#std:setting-GEOIP_PATH&quot;&gt; &lt;code&gt;GEOIP_PATH&lt;/code&gt; &lt;/a&gt;設定には、GeoIPデータセットの場所のパスを設定する必要があります。次の初期化キーワードは、デフォルトのカスタマイズに使用できます。</target>
        </trans-unit>
        <trans-unit id="1e6414ffb3ba6fded4cbd0a1899d767fcea55d93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Http404&lt;/code&gt; exception</source>
          <target state="translated">&lt;code&gt;Http404&lt;/code&gt; の例外</target>
        </trans-unit>
        <trans-unit id="15cda89552d958897dfe6d132bb500672085e573" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageFile&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;ImageFile&lt;/code&gt; クラス</target>
        </trans-unit>
        <trans-unit id="95f8b04f8e2ec015495e351d3569efe2ee601c55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;InlineModelAdmin&lt;/code&gt; class adds or customizes:</source>
          <target state="translated">&lt;code&gt;InlineModelAdmin&lt;/code&gt; のクラスには、追加またはカスタマイズします。</target>
        </trans-unit>
        <trans-unit id="bea7feb931720f672eb4c497f95a2887f664db56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JSONCatalog&lt;/code&gt; view</source>
          <target state="translated">&lt;code&gt;JSONCatalog&lt;/code&gt; ビュー</target>
        </trans-unit>
        <trans-unit id="8e27874a268965948a0edf09905add1420dd83d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JavaScriptCatalog&lt;/code&gt; view</source>
          <target state="translated">&lt;code&gt;JavaScriptCatalog&lt;/code&gt; ビュー</target>
        </trans-unit>
        <trans-unit id="4f04585d56697a5d0e0b9995400c63e76b05f667" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LANG&lt;/code&gt; environment variable is responsible for setting the expected encoding on Unix platforms. Consult the documentation for your operating system and application server for the appropriate syntax and location to set this variable.</source>
          <target state="translated">&lt;code&gt;LANG&lt;/code&gt; の環境変数は、UNIXプラットフォーム上で期待されるエンコーディングを設定するための責任があります。この変数を設定するための適切な構文と場所については、オペレーティングシステムとアプリケーションサーバーのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="285cf5f207a7ef3fbcc78086d3571c83dbb83f3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Library.filter()&lt;/code&gt; method takes two arguments:</source>
          <target state="translated">&lt;code&gt;Library.filter()&lt;/code&gt; メソッドは、2つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="cabe8d4c021337d761f9d3b91be35537f6938137" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LogEntry&lt;/code&gt; class tracks additions, changes, and deletions of objects done through the admin interface.</source>
          <target state="translated">&lt;code&gt;LogEntry&lt;/code&gt; オブジェクトのクラスのトラックの追加、変更、および削除は、管理インタフェースを介して行わ。</target>
        </trans-unit>
        <trans-unit id="9dcfcc7809e21efd896fa27c469328cf7acd7806" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoginRequired&lt;/code&gt; mixin</source>
          <target state="translated">&lt;code&gt;LoginRequired&lt;/code&gt; のmixin</target>
        </trans-unit>
        <trans-unit id="c178f34bc0712ff7919ec4e4381fc5d4e1351174" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Manager&lt;/code&gt; instance created by &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.as_manager&quot;&gt;&lt;code&gt;QuerySet.as_manager()&lt;/code&gt;&lt;/a&gt; will be virtually identical to the &lt;code&gt;PersonManager&lt;/code&gt; from the previous example.</source>
          <target state="translated">&lt;code&gt;Manager&lt;/code&gt; によって作成されたインスタンス&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.as_manager&quot;&gt; &lt;code&gt;QuerySet.as_manager()&lt;/code&gt; &lt;/a&gt;と実質的に同一であろう &lt;code&gt;PersonManager&lt;/code&gt; 前の例から。</target>
        </trans-unit>
        <trans-unit id="a061a7cbda401e1c2998d04aa4da33cd95b74423" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Message&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;Message&lt;/code&gt; クラス</target>
        </trans-unit>
        <trans-unit id="aeafa73f42a5c6cffacbc1c1eced4dde098973fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ModelAdmin&lt;/code&gt; class is the representation of a model in the admin interface. Usually, these are stored in a file named &lt;code&gt;admin.py&lt;/code&gt; in your application. Let&amp;rsquo;s take a look at an example of the &lt;code&gt;ModelAdmin&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ModelAdmin&lt;/code&gt; ののクラスは、adminインタフェースでのモデルの表現です。通常、これらはアプリケーションの &lt;code&gt;admin.py&lt;/code&gt; という名前のファイルに保存されます。 &lt;code&gt;ModelAdmin&lt;/code&gt; の例を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="23c9ded338b366b981096905686705ca916c572c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ModelAdmin&lt;/code&gt; is very flexible. It has several options for dealing with customizing the interface. All options are defined on the &lt;code&gt;ModelAdmin&lt;/code&gt; subclass:</source>
          <target state="translated">&lt;code&gt;ModelAdmin&lt;/code&gt; のは非常に柔軟です。インターフェイスのカスタマイズを処理するためのいくつかのオプションがあります。すべてのオプションは &lt;code&gt;ModelAdmin&lt;/code&gt; サブクラスで定義されます。</target>
        </trans-unit>
        <trans-unit id="c5dd73c8ec6250cee9eca5fba0b2e0e9caba77a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ModelForm.clean()&lt;/code&gt; method sets a flag that makes the &lt;a href=&quot;../../ref/models/instances#validating-objects&quot;&gt;model validation&lt;/a&gt; step validate the uniqueness of model fields that are marked as &lt;code&gt;unique&lt;/code&gt;, &lt;code&gt;unique_together&lt;/code&gt; or &lt;code&gt;unique_for_date|month|year&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ModelForm.clean()&lt;/code&gt; メソッドを作るフラグセット&lt;a href=&quot;../../ref/models/instances#validating-objects&quot;&gt;モデル検証&lt;/a&gt;段階検証としてマークされているモデルフィールドの一意 &lt;code&gt;unique&lt;/code&gt; 、 &lt;code&gt;unique_together&lt;/code&gt; か &lt;code&gt;unique_for_date|month|year&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="59622ba220fd806b25ca51df7f3561bd0875987e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ModelState&lt;/code&gt; object has two attributes: &lt;code&gt;adding&lt;/code&gt;, a flag which is &lt;code&gt;True&lt;/code&gt; if the model has not been saved to the database yet, and &lt;code&gt;db&lt;/code&gt;, a string referring to the database alias the instance was loaded from or saved to.</source>
          <target state="translated">&lt;code&gt;ModelState&lt;/code&gt; オブジェクトは、2つの属性があります &lt;code&gt;adding&lt;/code&gt; 、あるフラグ &lt;code&gt;True&lt;/code&gt; モデルがまだデータベースに保存されていない場合、及び &lt;code&gt;db&lt;/code&gt; 、データベース別名インスタンスからロードまたはに保存された文字列を参照します。</target>
        </trans-unit>
        <trans-unit id="fd4b7158ac1530a7d04e4fa10fa06ce0fdc5afb6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MyPerson&lt;/code&gt; class operates on the same database table as its parent &lt;code&gt;Person&lt;/code&gt; class. In particular, any new instances of &lt;code&gt;Person&lt;/code&gt; will also be accessible through &lt;code&gt;MyPerson&lt;/code&gt;, and vice-versa:</source>
          <target state="translated">&lt;code&gt;MyPerson&lt;/code&gt; のクラスは、その親と同じデータベーステーブル上で動作し &lt;code&gt;Person&lt;/code&gt; クラス。特に、 &lt;code&gt;Person&lt;/code&gt; の新しいインスタンスには &lt;code&gt;MyPerson&lt;/code&gt; からもアクセスでき、その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="b67a192312e68e9e91286de6c8d0e4786a94f427" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PUT&lt;/code&gt; action is also handled and passes all parameters through to &lt;a href=&quot;#django.views.generic.edit.ProcessFormView.post&quot;&gt;&lt;code&gt;post()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;PUT&lt;/code&gt; の作用はまた、処理さに至るまですべてのパラメータを渡している&lt;a href=&quot;#django.views.generic.edit.ProcessFormView.post&quot;&gt; &lt;code&gt;post()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="666a8ee59e8634562737cf79e7bc6a0a23331d2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Paginator&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;Paginator&lt;/code&gt; クラス</target>
        </trans-unit>
        <trans-unit id="8018100cec4f6c644b38502894290c3c27b8ff98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PermissionRequiredMixin&lt;/code&gt; mixin</source>
          <target state="translated">&lt;code&gt;PermissionRequiredMixin&lt;/code&gt; のmixin</target>
        </trans-unit>
        <trans-unit id="b799d6249c516fdabc4073a9921582597917fd4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Person&lt;/code&gt; objects returned by this query will be deferred model instances (see &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.defer&quot;&gt;&lt;code&gt;defer()&lt;/code&gt;&lt;/a&gt;). This means that the fields that are omitted from the query will be loaded on demand. For example:</source>
          <target state="translated">&lt;code&gt;Person&lt;/code&gt; このクエリによって返されるオブジェクト（参照モデルインスタンスを延期されます&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.defer&quot;&gt; &lt;code&gt;defer()&lt;/code&gt; &lt;/a&gt;）。これは、クエリから省略されたフィールドがオンデマンドで読み込まれることを意味します。例えば：</target>
        </trans-unit>
        <trans-unit id="cafa6e51de54db1e1e0585166954505694b562e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Prefetch()&lt;/code&gt; object can be used to control the operation of &lt;a href=&quot;#django.db.models.query.QuerySet.prefetch_related&quot;&gt;&lt;code&gt;prefetch_related()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Prefetch()&lt;/code&gt; の目的は、動作を制御するために使用することができる&lt;a href=&quot;#django.db.models.query.QuerySet.prefetch_related&quot;&gt; &lt;code&gt;prefetch_related()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="edefc338306ee3efcd160fd136a3325a4913ead6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;QueryDict&lt;/code&gt;s at &lt;code&gt;request.POST&lt;/code&gt; and &lt;code&gt;request.GET&lt;/code&gt; will be immutable when accessed in a normal request/response cycle. To get a mutable version you need to use &lt;a href=&quot;#django.http.QueryDict.copy&quot;&gt;&lt;code&gt;QueryDict.copy()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通常のリクエスト/レスポンスサイクルでアクセスした場合、 &lt;code&gt;request.POST&lt;/code&gt; および &lt;code&gt;request.GET&lt;/code&gt; での &lt;code&gt;QueryDict&lt;/code&gt; は不変です。変更可能なバージョンを取得するには、&lt;a href=&quot;#django.http.QueryDict.copy&quot;&gt; &lt;code&gt;QueryDict.copy()&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="2d8a70643cc158234954d43aa26a9590d3ebaed4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;QuerySet&lt;/code&gt; class has two public attributes you can use for introspection:</source>
          <target state="translated">&lt;code&gt;QuerySet&lt;/code&gt; クラスには、イントロスペクションのために使用できる2つのパブリック属性があります。</target>
        </trans-unit>
        <trans-unit id="b575665a47ba0362c547db861ead9c76ba3ff3d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RemoteUserMiddleware&lt;/code&gt; authentication middleware assumes that the HTTP request header &lt;code&gt;REMOTE_USER&lt;/code&gt; is present with all authenticated requests. That might be expected and practical when Basic HTTP Auth with &lt;code&gt;htpasswd&lt;/code&gt; or similar mechanisms are used, but with Negotiate (GSSAPI/Kerberos) or other resource intensive authentication methods, the authentication in the front-end HTTP server is usually only set up for one or a few login URLs, and after successful authentication, the application is supposed to maintain the authenticated session itself.</source>
          <target state="translated">&lt;code&gt;RemoteUserMiddleware&lt;/code&gt; の認証ミドルウェアは、HTTPリクエストヘッダと仮定 &lt;code&gt;REMOTE_USER&lt;/code&gt; は、すべての認証要求に存在しています。これは、 &lt;code&gt;htpasswd&lt;/code&gt; または同様のメカニズムを使用した基本的なHTTP認証が使用されている場合に予想され、実用的ですが、ネゴシエート（GSSAPI / Kerberos）またはその他のリソース集約型の認証方法では、フロントエンドHTTPサーバーでの認証は通常、1つまたはいくつかのログインURL、および認証が成功した後、アプリケーションは認証されたセッション自体を維持することになっています。</target>
        </trans-unit>
        <trans-unit id="8b542265b1983b33fadc5e6f04eb4951d3d7e7b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SessionStore&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;SessionStore&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="48cf066edc359a135c3a713b1dfdba853aa404f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Storage&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;Storage&lt;/code&gt; クラス</target>
        </trans-unit>
        <trans-unit id="ed56488a4cb844d37f694c6eea5fbdd95577da59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Student&lt;/code&gt; model will have three fields: &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;home_group&lt;/code&gt;. The &lt;code&gt;CommonInfo&lt;/code&gt; model cannot be used as a normal Django model, since it is an abstract base class. It does not generate a database table or have a manager, and cannot be instantiated or saved directly.</source>
          <target state="translated">&lt;code&gt;Student&lt;/code&gt; ：モデルは、三つのフィールドがあります &lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;age&lt;/code&gt; や &lt;code&gt;home_group&lt;/code&gt; を。 &lt;code&gt;CommonInfo&lt;/code&gt; のそれは抽象基底クラスであるので、このモデルは、通常のDjangoのモデルとして使用することができません。データベーステーブルを生成せず、マネージャーもありません。インスタンス化したり、直接保存したりすることはできません。</target>
        </trans-unit>
        <trans-unit id="da96ff8aa6e3551b382f94119bd8fa3340fd2aeb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Template&lt;/code&gt; obtained in the previous step has a &lt;a href=&quot;../../topics/templates#django.template.backends.base.Template.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; method which marshals a context and possibly a request into a &lt;a href=&quot;#django.template.Context&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt; and delegates the rendering to the underlying &lt;a href=&quot;#django.template.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Template&lt;/code&gt; 前のステップを有しているで得られた&lt;a href=&quot;../../topics/templates#django.template.backends.base.Template.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt;コンテキストおよびおそらくに要求マーシャリング方法&lt;a href=&quot;#django.template.Context&quot;&gt; &lt;code&gt;Context&lt;/code&gt; &lt;/a&gt;と委譲根底にレンダリング&lt;a href=&quot;#django.template.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7e27128238af2d5f6a740580b07db00d262b4fba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TemplateSyntaxError&lt;/code&gt; exceptions use the &lt;code&gt;tag_name&lt;/code&gt; variable. Don&amp;rsquo;t hard-code the tag&amp;rsquo;s name in your error messages, because that couples the tag&amp;rsquo;s name to your function. &lt;code&gt;token.contents.split()[0]&lt;/code&gt; will &amp;lsquo;&amp;rsquo;always&amp;rsquo;&amp;rsquo; be the name of your tag &amp;ndash; even when the tag has no arguments.</source>
          <target state="translated">&lt;code&gt;TemplateSyntaxError&lt;/code&gt; の例外は使用 &lt;code&gt;tag_name&lt;/code&gt; 変数を。エラーメッセージでタグの名前をハードコーディングしないでください。これにより、タグの名前が関数に結び付けられます。 &lt;code&gt;token.contents.split()[0]&lt;/code&gt; は、タグに引数がない場合でも、「常に」タグの名前になります。</target>
        </trans-unit>
        <trans-unit id="c091954b717320c11090e2070265b925d1a2a9ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextChoices&lt;/code&gt;, &lt;code&gt;IntegerChoices&lt;/code&gt;, and &lt;code&gt;Choices&lt;/code&gt; classes were added.</source>
          <target state="translated">&lt;code&gt;TextChoices&lt;/code&gt; 、 &lt;code&gt;IntegerChoices&lt;/code&gt; 、および &lt;code&gt;Choices&lt;/code&gt; クラスが追加されました。</target>
        </trans-unit>
        <trans-unit id="14288aba89c33872a740c10d4a391f80f0bf802d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UNION&lt;/code&gt; operator selects only distinct values by default. To allow duplicate values, use the &lt;code&gt;all=True&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;UNION&lt;/code&gt; のオペレータは、デフォルトでのみ異なる値を選択します。値の重複を許可するには、 &lt;code&gt;all=True&lt;/code&gt; 引数を使用します。</target>
        </trans-unit>
        <trans-unit id="155d1808963ceed66609cb3c1b8fd61fed485e41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UpdateView&lt;/code&gt; page displayed to a &lt;code&gt;GET&lt;/code&gt; request uses a &lt;code&gt;template_name_suffix&lt;/code&gt; of &lt;code&gt;'_form'&lt;/code&gt;. For example, changing this attribute to &lt;code&gt;'_update_form'&lt;/code&gt; for a view updating objects for the example &lt;code&gt;Author&lt;/code&gt; model would cause the default &lt;code&gt;template_name&lt;/code&gt; to be &lt;code&gt;'myapp/author_update_form.html'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;UpdateView&lt;/code&gt; のに表示されたページ &lt;code&gt;GET&lt;/code&gt; リクエストを使用しています &lt;code&gt;template_name_suffix&lt;/code&gt; の &lt;code&gt;'_form'&lt;/code&gt; 。たとえば、サンプルの &lt;code&gt;Author&lt;/code&gt; モデルのオブジェクトを更新するビューのこの属性を &lt;code&gt;'_update_form'&lt;/code&gt; に変更すると、デフォルトの &lt;code&gt;template_name&lt;/code&gt; が &lt;code&gt;'myapp/author_update_form.html'&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="d308fa62178257f91629efa203f542cd07374b65" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UserAdmin&lt;/code&gt; provides a named URL:</source>
          <target state="translated">&lt;code&gt;UserAdmin&lt;/code&gt; 名前のURLを提供します。</target>
        </trans-unit>
        <trans-unit id="53062c3a9371e633ac3ae69a192a4f0a96f3f759" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ValidationError&lt;/code&gt; raised during model validation when the constraint is violated has the &lt;code&gt;unique_together&lt;/code&gt; error code.</source>
          <target state="translated">&lt;code&gt;ValidationError&lt;/code&gt; をは制約違反があったときに持っているモデルの検証中に発生した &lt;code&gt;unique_together&lt;/code&gt; エラーコードを。</target>
        </trans-unit>
        <trans-unit id="f8f0c00d4ddb47408f98b0f5375559ae517828ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vary&lt;/code&gt; header defines which request headers a cache mechanism should take into account when building its cache key.</source>
          <target state="translated">&lt;code&gt;Vary&lt;/code&gt; キャッシュキーを構築するときに、要求ヘッダーキャッシュ機構が考慮すべきヘッダを定義し。</target>
        </trans-unit>
        <trans-unit id="a296183e71b88db6f8d0f224705c084727691887" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vary&lt;/code&gt; header defines which request headers a cache mechanism should take into account when building its cache key. For example, if the contents of a Web page depend on a user&amp;rsquo;s language preference, the page is said to &amp;ldquo;vary on language.&amp;rdquo;</source>
          <target state="translated">&lt;code&gt;Vary&lt;/code&gt; キャッシュキーを構築するときに、要求ヘッダーキャッシュ機構が考慮すべきヘッダを定義し。たとえば、Webページのコンテンツがユーザーの言語設定に依存している場合、そのページは「言語によって異なる」と言われます。</target>
        </trans-unit>
        <trans-unit id="4717077b7fad61b698d3696fa998b3983f06c8ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WSGIAuthUserScript&lt;/code&gt; directive tells mod_wsgi to execute the &lt;code&gt;check_password&lt;/code&gt; function in specified wsgi script, passing the user name and password that it receives from the prompt. In this example, the &lt;code&gt;WSGIAuthUserScript&lt;/code&gt; is the same as the &lt;code&gt;WSGIScriptAlias&lt;/code&gt; that defines your application &lt;a href=&quot;index&quot;&gt;that is created by django-admin startproject&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;WSGIAuthUserScript&lt;/code&gt; のディレクティブは、実行するのmod_wsgiを伝える &lt;code&gt;check_password&lt;/code&gt; のそれはプロンプトから受信したユーザー名とパスワードを渡して、指定されたWSGIスクリプトで関数を。この例では、 &lt;code&gt;WSGIAuthUserScript&lt;/code&gt; は、&lt;a href=&quot;index&quot;&gt;django-admin startprojectによって作成された&lt;/a&gt;アプリケーションを定義する &lt;code&gt;WSGIScriptAlias&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="f7d83ceb03961e0133df4bfeaa95be6f6ba88db6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WSGIPythonPath&lt;/code&gt; line ensures that your project package is available for import on the Python path; in other words, that &lt;code&gt;import mysite&lt;/code&gt; works.</source>
          <target state="translated">&lt;code&gt;WSGIPythonPath&lt;/code&gt; のプロジェクトのパッケージには、Pythonパスの輸入のために利用可能であることをライン性を保証; 言い換えれば、その &lt;code&gt;import mysite&lt;/code&gt; 機能します。</target>
        </trans-unit>
        <trans-unit id="25533319195395dc78eabeafda0877205e33873c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WSGIRequest&lt;/code&gt; instance generated by the test handler that generated the response.</source>
          <target state="translated">&lt;code&gt;WSGIRequest&lt;/code&gt; 応答を生成したテストハンドラによって生成されたインスタンス。</target>
        </trans-unit>
        <trans-unit id="66afd505ff8a2b88d4d404382dba8366c94adbdf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Window&lt;/code&gt; class is the main expression for an &lt;code&gt;OVER&lt;/code&gt; clause.</source>
          <target state="translated">&lt;code&gt;Window&lt;/code&gt; クラスは、のための主要な表現である &lt;code&gt;OVER&lt;/code&gt; の句。</target>
        </trans-unit>
        <trans-unit id="8979a358900953093d2326b9824ba1de2de53ea2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;X-Frame-Options&lt;/code&gt; HTTP header will only be set by the middleware or view decorators if it is not already present in the response.</source>
          <target state="translated">&lt;code&gt;X-Frame-Options&lt;/code&gt; が既に応答に存在しない場合、HTTPヘッダのみミドルウェアまたはビューデコレータによって設定されます。</target>
        </trans-unit>
        <trans-unit id="8d09a0d425815f28ca10ad6b5cbfd35f8a48aadd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;X-Frame-Options&lt;/code&gt; header will only protect against clickjacking in a modern browser. Older browsers will quietly ignore the header and need &lt;a href=&quot;https://en.wikipedia.org/wiki/Clickjacking#Prevention&quot;&gt;other clickjacking prevention techniques&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;X-Frame-Options&lt;/code&gt; ヘッダーは、現代のブラウザでクリックジャッキングから保護します。古いブラウザは静かにヘッダーを無視し、&lt;a href=&quot;https://en.wikipedia.org/wiki/Clickjacking#Prevention&quot;&gt;他のクリックジャッキング防止技術&lt;/a&gt;を必要とします。</target>
        </trans-unit>
        <trans-unit id="c36695a4a662815bce0c58313089f7aaa0f48d50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__call__()&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;__call__()&lt;/code&gt; メソッド：</target>
        </trans-unit>
        <trans-unit id="7d43e36285954e8018df358dc63c1c96dce6c55d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__hash__()&lt;/code&gt; method is based on the instance&amp;rsquo;s primary key value. It is effectively &lt;code&gt;hash(obj.pk)&lt;/code&gt;. If the instance doesn&amp;rsquo;t have a primary key value then a &lt;code&gt;TypeError&lt;/code&gt; will be raised (otherwise the &lt;code&gt;__hash__()&lt;/code&gt; method would return different values before and after the instance is saved, but changing the &lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; value of an instance is forbidden in Python.</source>
          <target state="translated">&lt;code&gt;__hash__()&lt;/code&gt; メソッドは、インスタンスのプライマリキー値に基づいています。実質的には &lt;code&gt;hash(obj.pk)&lt;/code&gt; です。インスタンスに主キー値がない場合、 &lt;code&gt;TypeError&lt;/code&gt; が発生します（そうでない場合、 &lt;code&gt;__hash__()&lt;/code&gt; メソッドはインスタンスが保存される前と後に異なる値を返しますが、インスタンスの&lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt;値の変更はPythonでは禁止されています。</target>
        </trans-unit>
        <trans-unit id="b245c13863acef3cf98e9755c517e60cd4238be0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__html__()&lt;/code&gt; method on a class helps non-Django templates detect classes whose output doesn&amp;rsquo;t require HTML escaping.</source>
          <target state="translated">クラスの &lt;code&gt;__html__()&lt;/code&gt; メソッドは、Django以外のテンプレートがHTMLエスケープを必要としない出力を持つクラスを検出するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="242cd5c6915a028a44de86d1423bf8dbd0db36f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__str__()&lt;/code&gt; method is called whenever you call &lt;code&gt;str()&lt;/code&gt; on an object. Django uses &lt;code&gt;str(obj)&lt;/code&gt; in a number of places. Most notably, to display an object in the Django admin site and as the value inserted into a template when it displays an object. Thus, you should always return a nice, human-readable representation of the model from the &lt;code&gt;__str__()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;__str__()&lt;/code&gt; を呼び出すたびメソッドが呼び出され &lt;code&gt;str()&lt;/code&gt; オブジェクト上を。Djangoは多くの場所で &lt;code&gt;str(obj)&lt;/code&gt; を使用しています。最も注目すべきは、Django管理サイトでオブジェクトを表示することと、オブジェクトを表示するときにテンプレートに挿入される値として。したがって、 &lt;code&gt;__str__()&lt;/code&gt; メソッドから、モデルの人間が読める形式の表現を常に返す必要があります。</target>
        </trans-unit>
        <trans-unit id="e94b365dd5e4fdc21c38390fcbd56923e0217c62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__str__()&lt;/code&gt; method is just as valid in &lt;code&gt;list_display&lt;/code&gt; as any other model method, so it&amp;rsquo;s perfectly OK to do this:</source>
          <target state="translated">&lt;code&gt;__str__()&lt;/code&gt; メソッドは、中だけで有効なようです &lt;code&gt;list_display&lt;/code&gt; 任意の他のモデル法として、それは、これを行うには完全にOKです。</target>
        </trans-unit>
        <trans-unit id="fb1166692699eb0d9c437ab4c9c89c728a9df40b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__str__()&lt;/code&gt; method of the model will be called to generate string representations of the objects for use in the field&amp;rsquo;s choices. To provide customized representations, subclass &lt;code&gt;ModelChoiceField&lt;/code&gt; and override &lt;code&gt;label_from_instance&lt;/code&gt;. This method will receive a model object and should return a string suitable for representing it. For example:</source>
          <target state="translated">モデルの &lt;code&gt;__str__()&lt;/code&gt; メソッドが呼び出され、フィールドの選択で使用するオブジェクトの文字列表現が生成されます。カスタマイズされた表現、サブクラス提供する &lt;code&gt;ModelChoiceField&lt;/code&gt; とオーバーライド &lt;code&gt;label_from_instance&lt;/code&gt; を。このメソッドはモデルオブジェクトを受け取り、それを表すのに適した文字列を返す必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="bc8e00c0f07ddecf5b0083b8a3e48275147ace7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__str__()&lt;/code&gt; method of this object displays the HTML for this field.</source>
          <target state="translated">このオブジェクトの &lt;code&gt;__str__()&lt;/code&gt; メソッドは、このフィールドのHTMLを表示します。</target>
        </trans-unit>
        <trans-unit id="e02b06decdff25a6b34edac539ebe7fdca953884" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_private.py&lt;/code&gt; module will not be available as a management command.</source>
          <target state="translated">&lt;code&gt;_private.py&lt;/code&gt; モジュールは、管理コマンドとして使用することはできません。</target>
        </trans-unit>
        <trans-unit id="1f1de0ef74330e91324a7b1a6ceb8a2537f83d80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_state&lt;/code&gt; attribute refers to a &lt;code&gt;ModelState&lt;/code&gt; object that tracks the lifecycle of the model instance.</source>
          <target state="translated">&lt;code&gt;_state&lt;/code&gt; 属性が指す &lt;code&gt;ModelState&lt;/code&gt; モデルインスタンスのライフサイクルを追跡するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="b37db792ea6a2c9600b693b0e001acd1372fc865" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;algorithm&lt;/code&gt; parameter was added.</source>
          <target state="translated">&lt;code&gt;algorithm&lt;/code&gt; パラメータが追加されました。</target>
        </trans-unit>
        <trans-unit id="3129f56bffecbb12af92556c1e2b3dd0d2e6e694" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;alias&lt;/code&gt; parameter was added.</source>
          <target state="translated">&lt;code&gt;alias&lt;/code&gt; パラメータが追加されました。</target>
        </trans-unit>
        <trans-unit id="59494d9c4e049331ff85ce6c2568b743a72e88c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;aliases&lt;/code&gt; argument determines which &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; aliases test databases should be setup for. If it&amp;rsquo;s not provided, it defaults to all of &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; aliases.</source>
          <target state="translated">&lt;code&gt;aliases&lt;/code&gt; 引数は、どの決定&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;のためのセットアップする必要がありますテスト・データベースの別名。指定しない場合、デフォルトですべての&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;エイリアスが使用されます。</target>
        </trans-unit>
        <trans-unit id="8750e97ecb463c425823eb7cc1352eae9ebfe833" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;aliases&lt;/code&gt; argument was added.</source>
          <target state="translated">&lt;code&gt;aliases&lt;/code&gt; 引数が追加されました。</target>
        </trans-unit>
        <trans-unit id="040e41485d8ef0ae272ef7bd601f4a429ca88bf3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;all()&lt;/code&gt; is redundant in this example, so this could be simplified to:</source>
          <target state="translated">&lt;code&gt;all()&lt;/code&gt; この例では冗長であるので、これはのように簡略化することができます。</target>
        </trans-unit>
        <trans-unit id="7f6dc9679098f04080112228476983b6a1976393" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;allow_distinct&lt;/code&gt; attribute and &lt;code&gt;distinct&lt;/code&gt; argument were added.</source>
          <target state="translated">&lt;code&gt;allow_distinct&lt;/code&gt; 属性と &lt;code&gt;distinct&lt;/code&gt; 引数が追加されました。</target>
        </trans-unit>
        <trans-unit id="c7bb54cee1b3911dbfb881e060211c780f0ea073" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app_label&lt;/code&gt; positional argument is the label of the application being migrated.</source>
          <target state="translated">&lt;code&gt;app_label&lt;/code&gt; 位置引数は、移行されるアプリケーションのラベルです。</target>
        </trans-unit>
        <trans-unit id="9bdb389563417a3b0a519152176d6ed8447860f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;application&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;application&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="af8539fc49d946321203b4240ca5674468d0aa11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;args&lt;/code&gt; and &lt;code&gt;kwargs&lt;/code&gt; arguments are positional and/or keyword arguments &lt;a href=&quot;../../topics/http/urls#how-django-processes-a-request&quot;&gt;captured from the URL pattern&lt;/a&gt;, respectively.</source>
          <target state="translated">&lt;code&gt;args&lt;/code&gt; と &lt;code&gt;kwargs&lt;/code&gt; からの引数は、位置及び/又はキーワード引数である&lt;a href=&quot;../../topics/http/urls#how-django-processes-a-request&quot;&gt;URLパターンから取り込まれ&lt;/a&gt;、それぞれ。</target>
        </trans-unit>
        <trans-unit id="8c2c21610a893a69f159ee7fade61111640f2947" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;as_p()&lt;/code&gt;, &lt;code&gt;as_ul()&lt;/code&gt;, and &lt;code&gt;as_table()&lt;/code&gt; methods are shortcuts &amp;ndash; they&amp;rsquo;re not the only way a form object can be displayed.</source>
          <target state="translated">&lt;code&gt;as_p()&lt;/code&gt; 、 &lt;code&gt;as_ul()&lt;/code&gt; 、および &lt;code&gt;as_table()&lt;/code&gt; メソッドはショートカットです-彼らは、フォームオブジェクトを表示することができる唯一の方法はありません。</target>
        </trans-unit>
        <trans-unit id="36a62e596278fcb3fdb7a0e6cbf94bfa691b95db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;as_vendor()&lt;/code&gt; methods should use the &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;template&lt;/code&gt;, &lt;code&gt;arg_joiner&lt;/code&gt;, and any other &lt;code&gt;**extra_context&lt;/code&gt; parameters to customize the SQL as needed. For example:</source>
          <target state="translated">&lt;code&gt;as_vendor()&lt;/code&gt; メソッドを使用する必要があります &lt;code&gt;function&lt;/code&gt; 、 &lt;code&gt;template&lt;/code&gt; 、 &lt;code&gt;arg_joiner&lt;/code&gt; 、およびその他の &lt;code&gt;**extra_context&lt;/code&gt; の値を必要に応じてSQLをカスタマイズするためのパラメータを。例えば：</target>
        </trans-unit>
        <trans-unit id="14cc7e3cc644dbe6fbd01653c9f923fda6ee0008" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;async_support&lt;/code&gt; tag was added.</source>
          <target state="translated">&lt;code&gt;async_support&lt;/code&gt; のタグが追加されました。</target>
        </trans-unit>
        <trans-unit id="7b0b060b2a387bc6f0547172f29bfda89f363e66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;atomic&lt;/code&gt; attribute doesn&amp;rsquo;t have an effect on databases that don&amp;rsquo;t support DDL transactions (e.g. MySQL, Oracle). (MySQL&amp;rsquo;s &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/atomic-ddl.html&quot;&gt;atomic DDL statement support&lt;/a&gt; refers to individual statements rather than multiple statements wrapped in a transaction that can be rolled back.)</source>
          <target state="translated">&lt;code&gt;atomic&lt;/code&gt; 属性は、（例えばMySQLやOracleなど）DDLトランザクションをサポートしていないデータベースには影響しません。（MySQLの&lt;a href=&quot;https://dev.mysql.com/doc/refman/en/atomic-ddl.html&quot;&gt;アトミックDDLステートメントのサポート&lt;/a&gt;とは、ロールバック可能なトランザクションにラップされた複数のステートメントではなく、個々のステートメントを指します。）</target>
        </trans-unit>
        <trans-unit id="ed5071623fbdd5e7cd63c8530a1a34501032f3d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;authenticate&lt;/code&gt; method takes a &lt;code&gt;request&lt;/code&gt; argument and credentials as keyword arguments. Most of the time, it&amp;rsquo;ll look like this:</source>
          <target state="translated">&lt;code&gt;authenticate&lt;/code&gt; 方法は、かかる &lt;code&gt;request&lt;/code&gt; キーワード引数として引数と資格を。ほとんどの場合、次のようになります。</target>
        </trans-unit>
        <trans-unit id="07bd50999a8a07b661852e5912695c810796717b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;auto_now&lt;/code&gt; and &lt;code&gt;auto_now_add&lt;/code&gt; options will always use the date in the &lt;a href=&quot;../../topics/i18n/timezones#default-current-time-zone&quot;&gt;default timezone&lt;/a&gt; at the moment of creation or update. If you need something different, you may want to consider using your own callable default or overriding &lt;code&gt;save()&lt;/code&gt; instead of using &lt;code&gt;auto_now&lt;/code&gt; or &lt;code&gt;auto_now_add&lt;/code&gt;; or using a &lt;code&gt;DateTimeField&lt;/code&gt; instead of a &lt;code&gt;DateField&lt;/code&gt; and deciding how to handle the conversion from datetime to date at display time.</source>
          <target state="translated">&lt;code&gt;auto_now&lt;/code&gt; と &lt;code&gt;auto_now_add&lt;/code&gt; オプションは、常に日付に使用する&lt;a href=&quot;../../topics/i18n/timezones#default-current-time-zone&quot;&gt;デフォルトのタイムゾーンを&lt;/a&gt;作成または更新の瞬間に。別のものが必要な場合は、 &lt;code&gt;auto_now&lt;/code&gt; または &lt;code&gt;auto_now_add&lt;/code&gt; を使用する代わりに、独自の呼び出し可能なデフォルトを使用するか、 &lt;code&gt;save()&lt;/code&gt; をオーバーライドすることを検討してください。または、 &lt;code&gt;DateField&lt;/code&gt; の代わりに &lt;code&gt;DateTimeField&lt;/code&gt; を使用して、表示時刻に日時から日付への変換を処理する方法を決定します。</target>
        </trans-unit>
        <trans-unit id="e5f42d2abe12a2c52440a2178e6b239cd5f4d2cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autosummarize&lt;/code&gt; parameter was added.</source>
          <target state="translated">&lt;code&gt;autosummarize&lt;/code&gt; パラメータが追加されました。</target>
        </trans-unit>
        <trans-unit id="fba83b90756f2ace91825b6864267bdb1d2dd334" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;band_input&lt;/code&gt; dictionary</source>
          <target state="translated">&lt;code&gt;band_input&lt;/code&gt; の辞書</target>
        </trans-unit>
        <trans-unit id="3e650b6d21fc6995e2e4c4bddb5833894f2cc980" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bands&lt;/code&gt; key in the &lt;code&gt;ds_input&lt;/code&gt; dictionary is a list of &lt;code&gt;band_input&lt;/code&gt; dictionaries. Each &lt;code&gt;band_input&lt;/code&gt; dictionary can contain pixel values and the &amp;ldquo;no data&amp;rdquo; value to be set on the bands of the new raster. The data array can have the full size of the new raster or be smaller. For arrays that are smaller than the full raster, the &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;shape&lt;/code&gt;, and &lt;code&gt;offset&lt;/code&gt; keys control the pixel values. The corresponding keys are passed to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.data&quot;&gt;&lt;code&gt;data()&lt;/code&gt;&lt;/a&gt; method. Their functionality is the same as setting the band data with that method. The following table describes the keys that can be used.</source>
          <target state="translated">&lt;code&gt;bands&lt;/code&gt; でのキー &lt;code&gt;ds_input&lt;/code&gt; の辞書が一覧で &lt;code&gt;band_input&lt;/code&gt; の辞書。各 &lt;code&gt;band_input&lt;/code&gt; 辞書には、ピクセル値と、新しいラスターのバンドに設定する「データなし」の値を含めることができます。データ配列は、新しいラスターのフルサイズを持つか、それより小さくすることができます。完全なラスターよりも小さい配列の場合、 &lt;code&gt;size&lt;/code&gt; 、 &lt;code&gt;shape&lt;/code&gt; 、および &lt;code&gt;offset&lt;/code&gt; キーがピクセル値を制御します。対応するキーが&lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.data&quot;&gt; &lt;code&gt;data()&lt;/code&gt; &lt;/a&gt;メソッドに渡されます。それらの機能は、その方法でバンドデータを設定するのと同じです。次の表に、使用できるキーを示します。</target>
        </trans-unit>
        <trans-unit id="127a774352ae775d1a734f12eb032c19f5941490" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;base.py&lt;/code&gt; module must contain a class named &lt;code&gt;DatabaseWrapper&lt;/code&gt; that subclasses an existing engine from the &lt;code&gt;django.db.backends&lt;/code&gt; module. Here&amp;rsquo;s an example of subclassing the PostgreSQL engine to change a feature class &lt;code&gt;allows_group_by_selected_pks_on_model&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;base.py&lt;/code&gt; モジュールは、指定されたクラス含まれている必要があります &lt;code&gt;DatabaseWrapper&lt;/code&gt; から既存のエンジンサブクラス &lt;code&gt;django.db.backends&lt;/code&gt; のモジュールを。以下は、PostgreSQLエンジンをサブクラス化して機能クラス &lt;code&gt;allows_group_by_selected_pks_on_model&lt;/code&gt; を変更する例です。</target>
        </trans-unit>
        <trans-unit id="350daf9adcbd3902411ac2fd50a35ba2aff803a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;batch_size&lt;/code&gt; parameter controls how many objects are created in a single query. The default is to create all objects in one batch, except for SQLite where the default is such that at most 999 variables per query are used.</source>
          <target state="translated">&lt;code&gt;batch_size&lt;/code&gt; パラメータは、1つのクエリで作成されるオブジェクトの数を制御します。デフォルトでは、1つのバッチですべてのオブジェクトを作成します。ただし、SQLiteのデフォルトでは、クエリごとに最大で999個の変数が使用されます。</target>
        </trans-unit>
        <trans-unit id="148a50ded27967b9b5e995fa4ee2dfefe0180318" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;batch_size&lt;/code&gt; parameter controls how many objects are saved in a single query. The default is to update all objects in one batch, except for SQLite and Oracle which have restrictions on the number of variables used in a query.</source>
          <target state="translated">&lt;code&gt;batch_size&lt;/code&gt; パラメータは、1つのクエリで保存されるオブジェクトの数を制御します。デフォルトでは、クエリで使用される変数の数に制限があるSQLiteとOracleを除き、すべてのオブジェクトを1つのバッチで更新します。</target>
        </trans-unit>
        <trans-unit id="29214e1139e592cdc699dbaac6437019d5842836" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;best_pizza&lt;/code&gt; relationship could also be fetched using &lt;code&gt;select_related&lt;/code&gt; to reduce the query count to 2:</source>
          <target state="translated">&lt;code&gt;best_pizza&lt;/code&gt; の関係も使用して取り出すことができ &lt;code&gt;select_related&lt;/code&gt; 2にクエリーカウントを減らすために：</target>
        </trans-unit>
        <trans-unit id="839ea21b855d7bebf3c528d20a38d7f0c39d1918" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;binutils&lt;/code&gt; package may be installed on Debian and Ubuntu systems using the following command:</source>
          <target state="translated">&lt;code&gt;binutils&lt;/code&gt; パッケージには、次のコマンドを使用して、DebianとUbuntuシステムにインストールすることがあります。</target>
        </trans-unit>
        <trans-unit id="aa42c5f25054d273ec0f4165273460384667b661" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blocktrans&lt;/code&gt; tag was renamed to &lt;code&gt;blocktranslate&lt;/code&gt;. The &lt;code&gt;blocktrans&lt;/code&gt; tag is still supported as an alias for backwards compatibility.</source>
          <target state="translated">&lt;code&gt;blocktrans&lt;/code&gt; のタグがに名前が変更されました &lt;code&gt;blocktranslate&lt;/code&gt; 。 &lt;code&gt;blocktrans&lt;/code&gt; のタグはまだ後方互換性のための別名としてサポートされています。</target>
        </trans-unit>
        <trans-unit id="242af23e9647f0e506b37c5b30b71ec386636d5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blog_articles&lt;/code&gt; view needs the outermost captured argument to be reversed, &lt;code&gt;page-2/&lt;/code&gt; or no arguments in this case, while &lt;code&gt;comments&lt;/code&gt; can be reversed with either no arguments or a value for &lt;code&gt;page_number&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;blog_articles&lt;/code&gt; は、反転される最も外側の捕捉引数を必要と表示 &lt;code&gt;page-2/&lt;/code&gt; ながら、又はこの場合の引数なしの &lt;code&gt;comments&lt;/code&gt; 、引数または値のいずれかで逆にすることができる &lt;code&gt;page_number&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c3f33c6c673bfbf57b5ee38bf6abf43fd16b8ed1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; argument was added.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; 引数が追加されました。</target>
        </trans-unit>
        <trans-unit id="71cc1a05ada301e38f2a5deb777002a4cb21a84c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;changed_data&lt;/code&gt; attribute returns a list of the names of the fields whose values in the form&amp;rsquo;s bound data (usually &lt;code&gt;request.POST&lt;/code&gt;) differ from what was provided in &lt;a href=&quot;#django.forms.Form.initial&quot;&gt;&lt;code&gt;initial&lt;/code&gt;&lt;/a&gt;. It returns an empty list if no data differs.</source>
          <target state="translated">&lt;code&gt;changed_data&lt;/code&gt; 属性は、フォームのバインドされたデータの値（通常はフィールドの名前のリストを返し &lt;code&gt;request.POST&lt;/code&gt; ）で提供されたものとは異なっ&lt;a href=&quot;#django.forms.Form.initial&quot;&gt; &lt;code&gt;initial&lt;/code&gt; &lt;/a&gt;。データに違いがない場合は、空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="b158cebf7ca06f6bb44d798cabf4ff75fe620b68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chunk_size&lt;/code&gt; parameter controls the size of batches Django retrieves from the database driver. Larger batches decrease the overhead of communicating with the database driver at the expense of a slight increase in memory consumption.</source>
          <target state="translated">&lt;code&gt;chunk_size&lt;/code&gt; パラメータは、データベースドライバからバッチDjangoの取り出しのサイズを制御します。バッチが大きくなると、メモリ消費量がわずかに増加する代わりに、データベースドライバとの通信のオーバーヘッドが減少します。</target>
        </trans-unit>
        <trans-unit id="ca0e6efeac5dbe6abb2828a00ea8c0e8ed0f93ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clean()&lt;/code&gt; method on a &lt;code&gt;Field&lt;/code&gt; subclass is responsible for running &lt;code&gt;to_python()&lt;/code&gt;, &lt;code&gt;validate()&lt;/code&gt;, and &lt;code&gt;run_validators()&lt;/code&gt; in the correct order and propagating their errors. If, at any time, any of the methods raise &lt;code&gt;ValidationError&lt;/code&gt;, the validation stops and that error is raised. This method returns the clean data, which is then inserted into the &lt;code&gt;cleaned_data&lt;/code&gt; dictionary of the form.</source>
          <target state="translated">&lt;code&gt;Field&lt;/code&gt; サブクラスの &lt;code&gt;clean()&lt;/code&gt; メソッドは、 &lt;code&gt;to_python()&lt;/code&gt; 、 &lt;code&gt;validate()&lt;/code&gt; 、および &lt;code&gt;run_validators()&lt;/code&gt; を正しい順序で実行し、それらのエラーを伝播します。いつでも、いずれかのメソッドで &lt;code&gt;ValidationError&lt;/code&gt; が発生すると、検証が停止し、そのエラーが発生します。このメソッドはクリーンなデータを返し、それがフォームの &lt;code&gt;cleaned_data&lt;/code&gt; ディクショナリに挿入されます。</target>
        </trans-unit>
        <trans-unit id="3c52417139bac92e876f396b203f816a08c893de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clean_&amp;lt;fieldname&amp;gt;()&lt;/code&gt; method is called on a form subclass &amp;ndash; where &lt;code&gt;&amp;lt;fieldname&amp;gt;&lt;/code&gt; is replaced with the name of the form field attribute. This method does any cleaning that is specific to that particular attribute, unrelated to the type of field that it is. This method is not passed any parameters. You will need to look up the value of the field in &lt;code&gt;self.cleaned_data&lt;/code&gt; and remember that it will be a Python object at this point, not the original string submitted in the form (it will be in &lt;code&gt;cleaned_data&lt;/code&gt; because the general field &lt;code&gt;clean()&lt;/code&gt; method, above, has already cleaned the data once).</source>
          <target state="translated">&lt;code&gt;clean_&amp;lt;fieldname&amp;gt;()&lt;/code&gt; -メソッドは、フォームのサブクラスで呼び出され &lt;code&gt;&amp;lt;fieldname&amp;gt;&lt;/code&gt; フォームフィールドの属性の名前に置き換えられます。このメソッドは、フィールドのタイプとは関係なく、その特定の属性に固有のクリーニングを実行します。このメソッドにはパラメーターが渡されません。この時点でフィールドの値を &lt;code&gt;self.cleaned_data&lt;/code&gt; で検索し、フォームで送信された元の文字列ではなく、Pythonオブジェクトであることを覚えておく必要があります &lt;code&gt;clean()&lt;/code&gt; 一般的なフィールドのclean（）メソッドのため、 &lt;code&gt;cleaned_data&lt;/code&gt; にあります）、上記のデータはすでに1回クリーンアップされています）。</target>
        </trans-unit>
        <trans-unit id="73d5328986341f457f499ee9ad3b3adc8f6b49a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clear()&lt;/code&gt; method can be used to bulk delete all related objects for an instance:</source>
          <target state="translated">&lt;code&gt;clear()&lt;/code&gt; メソッドは、例えば、関連するすべてのオブジェクトを削除バルクに使用することができます。</target>
        </trans-unit>
        <trans-unit id="27bdefbb47e8a8cd64bd76c6906f4ab1a9280839" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;closepoll.py&lt;/code&gt; module has only one requirement &amp;ndash; it must define a class &lt;code&gt;Command&lt;/code&gt; that extends &lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt;&lt;code&gt;BaseCommand&lt;/code&gt;&lt;/a&gt; or one of its &lt;a href=&quot;#ref-basecommand-subclasses&quot;&gt;subclasses&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;closepoll.py&lt;/code&gt; モジュールは一つだけの要件を持っている-それは、クラス定義しなければならない &lt;code&gt;Command&lt;/code&gt; 拡張&lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt; &lt;code&gt;BaseCommand&lt;/code&gt; &lt;/a&gt;またはそのの1 &lt;a href=&quot;#ref-basecommand-subclasses&quot;&gt;サブクラスを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cb6fbcac7d5d2693b65686e44afda279692d83d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;columns&lt;/code&gt; argument takes a tuple or list of up to 32 values that are integer number of bits from 1 to 4095.</source>
          <target state="translated">&lt;code&gt;columns&lt;/code&gt; 引数は1から4095までのビット数の整数であり、最大32個の値の組またはリストを取ります。</target>
        </trans-unit>
        <trans-unit id="d147cb6a81ba4e1f9f1cfdd857bfa6d5debf2964" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;condition&lt;/code&gt; argument is ignored with MySQL and MariaDB as neither supports conditional indexes.</source>
          <target state="translated">&lt;code&gt;condition&lt;/code&gt; どちらも条件付きのインデックスをサポートして引数はMySQLとMariaDBで無視されます。</target>
        </trans-unit>
        <trans-unit id="07df2f86e6de88400ec849e2aa274e8a6dec96e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;condition&lt;/code&gt; decorator</source>
          <target state="translated">&lt;code&gt;condition&lt;/code&gt; デコレータ</target>
        </trans-unit>
        <trans-unit id="676451c2a4a971d9135da0ad4e5193ea055be77c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;condition&lt;/code&gt; decorator is useful for more than only &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;HEAD&lt;/code&gt; requests (&lt;code&gt;HEAD&lt;/code&gt; requests are the same as &lt;code&gt;GET&lt;/code&gt; in this situation). It can also be used to provide checking for &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; requests. In these situations, the idea isn&amp;rsquo;t to return a &amp;ldquo;not modified&amp;rdquo; response, but to tell the client that the resource they are trying to change has been altered in the meantime.</source>
          <target state="translated">&lt;code&gt;condition&lt;/code&gt; デコレータはより多くのために有用である &lt;code&gt;GET&lt;/code&gt; と &lt;code&gt;HEAD&lt;/code&gt; の（要求 &lt;code&gt;HEAD&lt;/code&gt; の要求は同じです &lt;code&gt;GET&lt;/code&gt; このような状況で）。また、 &lt;code&gt;POST&lt;/code&gt; 、 &lt;code&gt;PUT&lt;/code&gt; および &lt;code&gt;DELETE&lt;/code&gt; リクエストのチェックを提供するために使用することもできます。これらの状況では、「変更されていない」応答を返すのではなく、クライアントが変更しようとしているリソースがその間に変更されたことをクライアントに通知するのが目的です。</target>
        </trans-unit>
        <trans-unit id="9da5e5f87c99e48862267658f8355a10d6f1ffea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;condition&lt;/code&gt; decorator only sets validator headers (&lt;code&gt;ETag&lt;/code&gt; and &lt;code&gt;Last-Modified&lt;/code&gt;) for safe HTTP methods, i.e. &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;HEAD&lt;/code&gt;. If you wish to return them in other cases, set them in your view. See &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.3.4&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 7231#section-4.3.4&lt;/strong&gt;&lt;/a&gt; to learn about the distinction between setting a validator header in response to requests made with &lt;code&gt;PUT&lt;/code&gt; versus &lt;code&gt;POST&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;condition&lt;/code&gt; デコレータは唯一のバリデータのヘッダ（設定し &lt;code&gt;ETag&lt;/code&gt; と &lt;code&gt;Last-Modified&lt;/code&gt; の安全なHTTPメソッド用）、すなわち &lt;code&gt;GET&lt;/code&gt; と &lt;code&gt;HEAD&lt;/code&gt; を。他の場合に返却したい場合は、ビューで設定してください。 &lt;code&gt;PUT&lt;/code&gt; と &lt;code&gt;POST&lt;/code&gt; で行われたリクエストに応じてバリデーターヘッダーを設定することの違いについては、&lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.3.4&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 7231＃section-4.3.4&lt;/strong&gt;&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="88c95c793e4b8a78ded6deb77eff0253e4300cf8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;condition&lt;/code&gt; decorator only sets validator headers (&lt;code&gt;ETag&lt;/code&gt; and &lt;code&gt;Last-Modified&lt;/code&gt;) for safe HTTP methods, i.e. &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;HEAD&lt;/code&gt;. If you wish to return them in other cases, set them in your view. See &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.3.4&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 7231#section-4.3.4&lt;/strong&gt;&lt;/a&gt; to learn about the distinction between setting a validator header in response to requests made with &lt;code&gt;PUT&lt;/code&gt; versus &lt;code&gt;POST&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;condition&lt;/code&gt; デコレータは唯一のバリデータのヘッダ（設定し &lt;code&gt;ETag&lt;/code&gt; と &lt;code&gt;Last-Modified&lt;/code&gt; の安全なHTTPメソッド用）、すなわち &lt;code&gt;GET&lt;/code&gt; と &lt;code&gt;HEAD&lt;/code&gt; を。それ以外の場合に返品したい場合は、ビューに設定してください。 &lt;code&gt;PUT&lt;/code&gt; と &lt;code&gt;POST&lt;/code&gt; で行われた要求に応答してバリデータヘッダーを設定することの違いについては、&lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.3.4&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 7231＃section-4.3.4&lt;/strong&gt;&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7d5358b33428e764a771faf195a50a4b6effe41f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;condition&lt;/code&gt; decorator&amp;rsquo;s signature looks like this:</source>
          <target state="translated">&lt;code&gt;condition&lt;/code&gt; デコレータの署名は次のようになります。</target>
        </trans-unit>
        <trans-unit id="b6c2a511c9148521ac6efd590bade037fbd21edc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;contained_by&lt;/code&gt; lookup is also available on the non-range field types: &lt;a href=&quot;../../models/fields#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.BigIntegerField&quot;&gt;&lt;code&gt;BigIntegerField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.FloatField&quot;&gt;&lt;code&gt;FloatField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">&lt;code&gt;contained_by&lt;/code&gt; の：ルックアップは非範囲フィールドタイプでも可能です&lt;a href=&quot;../../models/fields#django.db.models.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; と&lt;/a&gt;、&lt;a href=&quot;../../models/fields#django.db.models.BigIntegerField&quot;&gt; &lt;code&gt;BigIntegerField&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../models/fields#django.db.models.FloatField&quot;&gt; &lt;code&gt;FloatField&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../models/fields#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; の&lt;/a&gt;、および&lt;a href=&quot;../../models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; 型&lt;/a&gt;。例えば：</target>
        </trans-unit>
        <trans-unit id="8375c269f25318522ab96fb44c712afcbaa7a299" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;contained_by&lt;/code&gt; lookup is also available on the non-range field types: &lt;a href=&quot;../../models/fields#django.db.models.SmallAutoField&quot;&gt;&lt;code&gt;SmallAutoField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.BigAutoField&quot;&gt;&lt;code&gt;BigAutoField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.SmallIntegerField&quot;&gt;&lt;code&gt;SmallIntegerField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.BigIntegerField&quot;&gt;&lt;code&gt;BigIntegerField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.DecimalField&quot;&gt;&lt;code&gt;DecimalField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.FloatField&quot;&gt;&lt;code&gt;FloatField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">&lt;code&gt;contained_by&lt;/code&gt; の：ルックアップは非範囲フィールドタイプでも可能です&lt;a href=&quot;../../models/fields#django.db.models.SmallAutoField&quot;&gt; &lt;code&gt;SmallAutoField&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../models/fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../models/fields#django.db.models.BigAutoField&quot;&gt; &lt;code&gt;BigAutoField&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../models/fields#django.db.models.SmallIntegerField&quot;&gt; &lt;code&gt;SmallIntegerField&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../models/fields#django.db.models.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; と&lt;/a&gt;、&lt;a href=&quot;../../models/fields#django.db.models.BigIntegerField&quot;&gt; &lt;code&gt;BigIntegerField&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../models/fields#django.db.models.DecimalField&quot;&gt; &lt;code&gt;DecimalField&lt;/code&gt; は&lt;/a&gt;、&lt;a href=&quot;../../models/fields#django.db.models.FloatField&quot;&gt; &lt;code&gt;FloatField&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../models/fields#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; の&lt;/a&gt;、および&lt;a href=&quot;../../models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; 型&lt;/a&gt;。例えば：</target>
        </trans-unit>
        <trans-unit id="00cc9e8b50e8cd04d1c33d74ab44ee31f338d72b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;contains&lt;/code&gt; and &lt;code&gt;intersects&lt;/code&gt; lookups are just a subset of the available queries &amp;ndash; the &lt;a href=&quot;db-api&quot;&gt;GeoDjango Database API&lt;/a&gt; documentation has more.</source>
          <target state="translated">&lt;code&gt;contains&lt;/code&gt; と &lt;code&gt;intersects&lt;/code&gt; -ルックアップが可能なクエリのサブセットだけです&lt;a href=&quot;db-api&quot;&gt;GeoDjangoデータベースAPIの&lt;/a&gt;ドキュメントでは、より多くのを持っています。</target>
        </trans-unit>
        <trans-unit id="f7c21a9a282bc1271bd8dadc73df3306e76dd19f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;content&lt;/code&gt; argument must be an instance of &lt;a href=&quot;file#django.core.files.File&quot;&gt;&lt;code&gt;django.core.files.File&lt;/code&gt;&lt;/a&gt; or a file-like object that can be wrapped in &lt;code&gt;File&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;content&lt;/code&gt; の引数は、のインスタンスでなければなりません&lt;a href=&quot;file#django.core.files.File&quot;&gt; &lt;code&gt;django.core.files.File&lt;/code&gt; &lt;/a&gt;かでラップできるファイルのようなオブジェクト &lt;code&gt;File&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="005cc4262486e03357f8a1cf9c1427d3554d3464" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context_processors&lt;/code&gt; option is a list of callables &amp;ndash; called &lt;strong&gt;context processors&lt;/strong&gt; &amp;ndash; that take a request object as their argument and return a dictionary of items to be merged into the context. In the default generated settings file, the default template engine contains the following context processors:</source>
          <target state="translated">&lt;code&gt;context_processors&lt;/code&gt; のと呼ばれる-オプションは、呼び出し可能オブジェクトのリストである&lt;strong&gt;コンテキストプロセッサ&lt;/strong&gt; -その引数としてリクエストオブジェクトを取得し、コンテキストにマージする項目の辞書を返しています。デフォルトで生成された設定ファイルでは、デフォルトのテンプレートエンジンに次のコンテキストプロセッサが含まれています。</target>
        </trans-unit>
        <trans-unit id="9af77d9107d35b8e2882dbc247226a417f3f94d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;converter&lt;/code&gt; argument is a converter class, and &lt;code&gt;type_name&lt;/code&gt; is the converter name to use in path patterns. See &lt;a href=&quot;../topics/http/urls#registering-custom-path-converters&quot;&gt;Registering custom path converters&lt;/a&gt; for an example.</source>
          <target state="translated">&lt;code&gt;converter&lt;/code&gt; 引数は、コンバータクラスであり、 &lt;code&gt;type_name&lt;/code&gt; パスパターンで使用するコンバータ名です。例については、&lt;a href=&quot;../topics/http/urls#registering-custom-path-converters&quot;&gt;カスタムパスコンバーターの登録を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="600d94b23358b9e64a45d7079ab642cd07e9bfe8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;covers&lt;/code&gt; predicate has the following equivalent definitions:</source>
          <target state="translated">&lt;code&gt;covers&lt;/code&gt; 述語は、次の等価な定義があります。</target>
        </trans-unit>
        <trans-unit id="d2aed277329d52559aed9e42ae909ea0493b089e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;current_app&lt;/code&gt; argument allows you to provide a hint to the resolver indicating the application to which the currently executing view belongs. This &lt;code&gt;current_app&lt;/code&gt; argument is used as a hint to resolve application namespaces into URLs on specific application instances, according to the &lt;a href=&quot;../topics/http/urls#topics-http-reversing-url-namespaces&quot;&gt;namespaced URL resolution strategy&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;current_app&lt;/code&gt; 引数は、現在実行中のビューが属するアプリケーションを示すリゾルバへのヒントを提供することができます。この &lt;code&gt;current_app&lt;/code&gt; 引数は、&lt;a href=&quot;../topics/http/urls#topics-http-reversing-url-namespaces&quot;&gt;名前空間付きURL解決戦略&lt;/a&gt;に従って、アプリケーション名前空間を特定のアプリケーションインスタンス上のURLに解決するためのヒントとして使用されます。</target>
        </trans-unit>
        <trans-unit id="fa0c9a5562781a0fc9d6df538ad97e13184ed51e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;database&lt;/code&gt; checks are now run only for database aliases specified using the &lt;a href=&quot;django-admin#cmdoption-check-database&quot;&gt;&lt;code&gt;check --database&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">&lt;code&gt;database&lt;/code&gt; チェックは現在、データベースの別名を使用して、指定されただけのために実行されている&lt;a href=&quot;django-admin#cmdoption-check-database&quot;&gt; &lt;code&gt;check --database&lt;/code&gt; &lt;/a&gt;オプションを選択します。</target>
        </trans-unit>
        <trans-unit id="c29ae58720a36ebd27ff270ec3a4a67136670d69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;databases&lt;/code&gt; flag also controls which databases the &lt;a href=&quot;#django.test.TransactionTestCase.fixtures&quot;&gt;&lt;code&gt;TransactionTestCase.fixtures&lt;/code&gt;&lt;/a&gt; are loaded into. By default, fixtures are only loaded into the &lt;code&gt;default&lt;/code&gt; database.</source>
          <target state="translated">&lt;code&gt;databases&lt;/code&gt; また、データベースを制御するフラグ&lt;a href=&quot;#django.test.TransactionTestCase.fixtures&quot;&gt; &lt;code&gt;TransactionTestCase.fixtures&lt;/code&gt; &lt;/a&gt;にロードされます。デフォルトでは、フィクスチャーは &lt;code&gt;default&lt;/code&gt; データベースにのみロードされます。</target>
        </trans-unit>
        <trans-unit id="02f8bb0bc2fca523fa77abf154c47a4f885b4118" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;databases&lt;/code&gt; parameter was added.</source>
          <target state="translated">&lt;code&gt;databases&lt;/code&gt; パラメータが追加されました。</target>
        </trans-unit>
        <trans-unit id="cc435999c74ad21471b72975a1b3703b615d2231" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;db&lt;/code&gt; argument contains the database alias for the database the model is loaded from, &lt;code&gt;field_names&lt;/code&gt; contains the names of all loaded fields, and &lt;code&gt;values&lt;/code&gt; contains the loaded values for each field in &lt;code&gt;field_names&lt;/code&gt;. The &lt;code&gt;field_names&lt;/code&gt; are in the same order as the &lt;code&gt;values&lt;/code&gt;. If all of the model&amp;rsquo;s fields are present, then &lt;code&gt;values&lt;/code&gt; are guaranteed to be in the order &lt;code&gt;__init__()&lt;/code&gt; expects them. That is, the instance can be created by &lt;code&gt;cls(*values)&lt;/code&gt;. If any fields are deferred, they won&amp;rsquo;t appear in &lt;code&gt;field_names&lt;/code&gt;. In that case, assign a value of &lt;code&gt;django.db.models.DEFERRED&lt;/code&gt; to each of the missing fields.</source>
          <target state="translated">&lt;code&gt;db&lt;/code&gt; 引数はモデルがからロードされたデータベースのデータベース別名が含まれている、 &lt;code&gt;field_names&lt;/code&gt; すべてのロードされたフィールドの名前が含まれており、 &lt;code&gt;values&lt;/code&gt; 内の各フィールドの値がロードされて含まれてい &lt;code&gt;field_names&lt;/code&gt; 。 &lt;code&gt;field_names&lt;/code&gt; 同じ順序である &lt;code&gt;values&lt;/code&gt; 。モデルのすべてのフィールドが存在する場合、 &lt;code&gt;values&lt;/code&gt; は &lt;code&gt;__init__()&lt;/code&gt; 予期する順序であることが保証されます。つまり、インスタンスは &lt;code&gt;cls(*values)&lt;/code&gt; で作成できます。延期されたフィールドは、 &lt;code&gt;field_names&lt;/code&gt; に表示されません。その場合、 &lt;code&gt;django.db.models.DEFERRED&lt;/code&gt; の値を割り当てます 欠落している各フィールドに。</target>
        </trans-unit>
        <trans-unit id="5085611415b0d98d4c116923f8b795d2c1d95b05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;debug()&lt;/code&gt; method was implemented to allow running a test without collecting the result and catching exceptions.</source>
          <target state="translated">&lt;code&gt;debug()&lt;/code&gt; メソッドは、結果を収集し、例外をキャッチせずにテストを実行できるように実装されました。</target>
        </trans-unit>
        <trans-unit id="028e4d3f62d6689cd12d1cfa8062a08519ed0d3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;decoder&lt;/code&gt; can be used to validate the input. If &lt;a href=&quot;https://docs.python.org/3/library/json.html#json.JSONDecodeError&quot;&gt;&lt;code&gt;json.JSONDecodeError&lt;/code&gt;&lt;/a&gt; is raised during the deserialization, a &lt;code&gt;ValidationError&lt;/code&gt; will be raised.</source>
          <target state="translated">&lt;code&gt;decoder&lt;/code&gt; 入力を検証するために使用することができます。場合&lt;a href=&quot;https://docs.python.org/3/library/json.html#json.JSONDecodeError&quot;&gt; &lt;code&gt;json.JSONDecodeError&lt;/code&gt; は、&lt;/a&gt;直列化復元の際に発生し、 &lt;code&gt;ValidationError&lt;/code&gt; をが発生します。</target>
        </trans-unit>
        <trans-unit id="dc8a573ac216d9a5b7bad577de73fb00d9b8a4f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;defer()&lt;/code&gt; method (and its cousin, &lt;a href=&quot;#django.db.models.query.QuerySet.only&quot;&gt;&lt;code&gt;only()&lt;/code&gt;&lt;/a&gt;, below) are only for advanced use-cases. They provide an optimization for when you have analyzed your queries closely and understand &lt;em&gt;exactly&lt;/em&gt; what information you need and have measured that the difference between returning the fields you need and the full set of fields for the model will be significant.</source>
          <target state="translated">&lt;code&gt;defer()&lt;/code&gt; メソッド（およびそのいとこは、&lt;a href=&quot;#django.db.models.query.QuerySet.only&quot;&gt; &lt;code&gt;only()&lt;/code&gt; &lt;/a&gt;、下記）のみ高度なユースケースのためのものです。これらは、クエリを綿密に分析し、必要な情報を&lt;em&gt;正確に&lt;/em&gt;理解し、必要なフィールドを返すこととモデルのフィールドセット全体の違いが重要であることを測定したときに最適化を提供します。</target>
        </trans-unit>
        <trans-unit id="0a2b9b5e2c58ba6aa45bb769c054c156476e6dc7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete()&lt;/code&gt; is applied instantly. You cannot call &lt;code&gt;delete()&lt;/code&gt; on a &lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; that has had a slice taken or can otherwise no longer be filtered.</source>
          <target state="translated">&lt;code&gt;delete()&lt;/code&gt; 即座に適用されます。スライスが取得された、またはフィルター処理できなくなった&lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;で &lt;code&gt;delete()&lt;/code&gt; を呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="cd5ee7495aeed1ad4fa9a2df385383ac53997509" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete()&lt;/code&gt; method does a bulk delete and does not call any &lt;code&gt;delete()&lt;/code&gt; methods on your models. It does, however, emit the &lt;a href=&quot;../signals#django.db.models.signals.pre_delete&quot;&gt;&lt;code&gt;pre_delete&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../signals#django.db.models.signals.post_delete&quot;&gt;&lt;code&gt;post_delete&lt;/code&gt;&lt;/a&gt; signals for all deleted objects (including cascaded deletions).</source>
          <target state="translated">&lt;code&gt;delete()&lt;/code&gt; メソッドは、削除バルクを行い、任意の呼び出しません &lt;code&gt;delete()&lt;/code&gt; あなたのモデルのメソッドを。ただし、削除されたすべてのオブジェクト（カスケードされた削除を含む）に対して&lt;a href=&quot;../signals#django.db.models.signals.pre_delete&quot;&gt; &lt;code&gt;pre_delete&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../signals#django.db.models.signals.post_delete&quot;&gt; &lt;code&gt;post_delete&lt;/code&gt; &lt;/a&gt;シグナルを発行します。</target>
        </trans-unit>
        <trans-unit id="0f0061be28bab77cda22844b74eb4a9f297fcbbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete_model&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and a model instance. Overriding this method allows doing pre- or post-delete operations. Call &lt;code&gt;super().delete_model()&lt;/code&gt; to delete the object using &lt;a href=&quot;../../models/instances#django.db.models.Model.delete&quot;&gt;&lt;code&gt;Model.delete()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;delete_model&lt;/code&gt; の方法が与えられている &lt;code&gt;HttpRequest&lt;/code&gt; 、モデルインスタンス。このメソッドをオーバーライドすると、削除前または削除後の操作を実行できます。コール &lt;code&gt;super().delete_model()&lt;/code&gt; 使用してオブジェクトを削除する&lt;a href=&quot;../../models/instances#django.db.models.Model.delete&quot;&gt; &lt;code&gt;Model.delete()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="334c2703a76253aba2e4c34a08bfba6b4664d5eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete_queryset()&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and a &lt;code&gt;QuerySet&lt;/code&gt; of objects to be deleted. Override this method to customize the deletion process for the &amp;ldquo;delete selected objects&amp;rdquo; &lt;a href=&quot;actions&quot;&gt;action&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;delete_queryset()&lt;/code&gt; メソッドは、与えられた &lt;code&gt;HttpRequest&lt;/code&gt; と &lt;code&gt;QuerySet&lt;/code&gt; 削除されるオブジェクトの。このメソッドをオーバーライドして、「選択したオブジェクトの削除」&lt;a href=&quot;actions&quot;&gt;アクション&lt;/a&gt;の削除プロセスをカスタマイズします。</target>
        </trans-unit>
        <trans-unit id="105675c32417c794f56e90baf6f0548c41d90b7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dependencies&lt;/code&gt; property is declared like this:</source>
          <target state="translated">&lt;code&gt;dependencies&lt;/code&gt; プロパティは、このように宣言されています。</target>
        </trans-unit>
        <trans-unit id="3ab64b1dcc0ea87c192718ade70afa20e9c9f314" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;detail()&lt;/code&gt; (from &lt;a href=&quot;tutorial03&quot;&gt;Tutorial 3&lt;/a&gt;) and &lt;code&gt;results()&lt;/code&gt; views are very short &amp;ndash; and, as mentioned above, redundant. The &lt;code&gt;index()&lt;/code&gt; view, which displays a list of polls, is similar.</source>
          <target state="translated">&lt;code&gt;detail()&lt;/code&gt; （から&lt;a href=&quot;tutorial03&quot;&gt;チュートリアル3&lt;/a&gt;）と &lt;code&gt;results()&lt;/code&gt; 冗長、上述したように、及び-ビューは非常に短いです。 &lt;code&gt;index()&lt;/code&gt; 、世論調査のリストを表示するビューは、類似しています。</target>
        </trans-unit>
        <trans-unit id="d3ac64ae4db395ba92f375f1894e081e8eedc65f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;disabled&lt;/code&gt; boolean argument, when set to &lt;code&gt;True&lt;/code&gt;, disables a form field using the &lt;code&gt;disabled&lt;/code&gt; HTML attribute so that it won&amp;rsquo;t be editable by users. Even if a user tampers with the field&amp;rsquo;s value submitted to the server, it will be ignored in favor of the value from the form&amp;rsquo;s initial data.</source>
          <target state="translated">&lt;code&gt;disabled&lt;/code&gt; ブール引数に設定 &lt;code&gt;True&lt;/code&gt; の場合、使用してフォームフィールドを無効に &lt;code&gt;disabled&lt;/code&gt; それがユーザーによって編集できなくなりますように、HTML属性を。ユーザーがサーバーに送信されたフィールドの値を改ざんした場合でも、フォームの初期データの値が優先されて無視されます。</target>
        </trans-unit>
        <trans-unit id="cc4bb422f6b07cdcfa59a89628fda5ae5f1770a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;distinct&lt;/code&gt; argument determines whether or not the aggregate function should be invoked for each distinct value of &lt;code&gt;expressions&lt;/code&gt; (or set of values, for multiple &lt;code&gt;expressions&lt;/code&gt;). The argument is only supported on aggregates that have &lt;a href=&quot;#django.db.models.Aggregate.allow_distinct&quot;&gt;&lt;code&gt;allow_distinct&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;distinct&lt;/code&gt; 引数は、集約関数は、各別個の値のために呼び出されるべきであるか否かを判断する &lt;code&gt;expressions&lt;/code&gt; （複数のために、または値のセット &lt;code&gt;expressions&lt;/code&gt; ）。引数は、&lt;a href=&quot;#django.db.models.Aggregate.allow_distinct&quot;&gt; &lt;code&gt;allow_distinct&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; に設定されているアグリゲートでのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="554557058166afd6d58febc2557ac2927634999d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django-admin&lt;/code&gt; / &lt;code&gt;manage.py&lt;/code&gt; commands will use pretty color-coded output if your terminal supports ANSI-colored output. It won&amp;rsquo;t use the color codes if you&amp;rsquo;re piping the command&amp;rsquo;s output to another program unless the &lt;a href=&quot;#cmdoption-force-color&quot;&gt;&lt;code&gt;--force-color&lt;/code&gt;&lt;/a&gt; option is used.</source>
          <target state="translated">&lt;code&gt;django-admin&lt;/code&gt; / &lt;code&gt;manage.py&lt;/code&gt; コマンドは端末がサポートANSI-色の出力ならば、かなり色分けされた出力を使用します。&lt;a href=&quot;#cmdoption-force-color&quot;&gt; &lt;code&gt;--force-color&lt;/code&gt; &lt;/a&gt;オプションを使用しない限り、コマンドの出力を別のプログラムにパイピングしている場合は、カラーコードを使用しません。</target>
        </trans-unit>
        <trans-unit id="edb9ad724a443d5696f2bd854b9ae59ed3faf171" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django-admin&lt;/code&gt; script should be on your system path if you installed Django via &lt;code&gt;pip&lt;/code&gt;. If it&amp;rsquo;s not in your path, ensure you have your virtual environment activated.</source>
          <target state="translated">&lt;code&gt;django-admin&lt;/code&gt; あなたが経由ジャンゴをインストールした場合、スクリプトは、あなたのシステムパス上にある必要があり &lt;code&gt;pip&lt;/code&gt; 。パスにない場合は、仮想環境がアクティブになっていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="ee94f96f99978afde505223c4d2d3c486ea61b19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django-admin&lt;/code&gt; script should be on your system path if you installed Django via &lt;code&gt;pip&lt;/code&gt;. If it&amp;rsquo;s not on your path, you can find it in &lt;code&gt;site-packages/django/bin&lt;/code&gt; within your Python installation. Consider symlinking it from some place on your path, such as &lt;code&gt;/usr/local/bin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;django-admin&lt;/code&gt; あなたが経由ジャンゴをインストールした場合、スクリプトは、あなたのシステムパス上にある必要があり &lt;code&gt;pip&lt;/code&gt; 。パス上にない場合は、Pythonインストール内の &lt;code&gt;site-packages/django/bin&lt;/code&gt; にあります。 &lt;code&gt;/usr/local/bin&lt;/code&gt; など、パスのどこかからシンボリックリンクすることを検討してください。</target>
        </trans-unit>
        <trans-unit id="715f022d061bbda6ba2084bf2e86c4564dfd9e16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django-admin&lt;/code&gt; utility</source>
          <target state="translated">&lt;code&gt;django-admin&lt;/code&gt; ユーティリティ</target>
        </trans-unit>
        <trans-unit id="1efdda5a91b60c90410571e56e94f021572e91f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django.middleware.gzip.GZipMiddleware&lt;/code&gt; compresses content for browsers that understand GZip compression (all modern browsers).</source>
          <target state="translated">&lt;code&gt;django.middleware.gzip.GZipMiddleware&lt;/code&gt; は GZIP圧縮（すべての最新ブラウザ）を理解ブラウザ用コンテンツを圧縮します。</target>
        </trans-unit>
        <trans-unit id="b272884f04c42a4c7bce64e53ab9d7654cba2e4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django.middleware.security.SecurityMiddleware&lt;/code&gt; provides several security enhancements to the request/response cycle. Each one can be independently enabled or disabled with a setting.</source>
          <target state="translated">&lt;code&gt;django.middleware.security.SecurityMiddleware&lt;/code&gt; は、要求/応答サイクルにいくつかのセキュリティ強化機能を提供します。各設定は、設定で個別に有効または無効にできます。</target>
        </trans-unit>
        <trans-unit id="b490748982f6e86c39781b79caffc39dafaa554b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django.template.loader&lt;/code&gt; module defines two functions to load templates.</source>
          <target state="translated">&lt;code&gt;django.template.loader&lt;/code&gt; にするモジュールがロードテンプレートへの2つの関数を定義しています。</target>
        </trans-unit>
        <trans-unit id="989b8491d1976291960faa8773eacf5eb441cfe2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django.utils.decorators&lt;/code&gt; module contains &lt;a href=&quot;../../ref/utils#django.utils.decorators.sync_only_middleware&quot;&gt;&lt;code&gt;sync_only_middleware()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/utils#django.utils.decorators.async_only_middleware&quot;&gt;&lt;code&gt;async_only_middleware()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../ref/utils#django.utils.decorators.sync_and_async_middleware&quot;&gt;&lt;code&gt;sync_and_async_middleware()&lt;/code&gt;&lt;/a&gt; decorators that allow you to apply these flags to middleware factory functions.</source>
          <target state="translated">&lt;code&gt;django.utils.decorators&lt;/code&gt; のモジュールが含まれてい&lt;a href=&quot;../../ref/utils#django.utils.decorators.sync_only_middleware&quot;&gt; &lt;code&gt;sync_only_middleware()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/utils#django.utils.decorators.async_only_middleware&quot;&gt; &lt;code&gt;async_only_middleware()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../../ref/utils#django.utils.decorators.sync_and_async_middleware&quot;&gt; &lt;code&gt;sync_and_async_middleware()&lt;/code&gt; &lt;/a&gt;あなたはミドルウェアファクトリ関数にこれらのフラグを適用することができデコレータを。</target>
        </trans-unit>
        <trans-unit id="754d81f25843e3630b44190f127e7ab88dca50ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django.utils.encoding&lt;/code&gt; module contains a few functions that are handy for converting back and forth between strings and bytestrings.</source>
          <target state="translated">&lt;code&gt;django.utils.encoding&lt;/code&gt; モジュールは、文字列とバイト文字列の間で前後に変換するのに便利ですいくつかの機能が含まれています。</target>
        </trans-unit>
        <trans-unit id="c802771bce8ac3d3e8bfdc6da5d8a583dbef074a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django.views.decorators.http.etag&lt;/code&gt; and &lt;code&gt;django.views.decorators.http.last_modified&lt;/code&gt; decorators are passed the same type of functions as the &lt;code&gt;condition&lt;/code&gt; decorator. Their signatures are:</source>
          <target state="translated">&lt;code&gt;django.views.decorators.http.etag&lt;/code&gt; と &lt;code&gt;django.views.decorators.http.last_modified&lt;/code&gt; デコレータは次のように機能の同じタイプを渡され &lt;code&gt;condition&lt;/code&gt; デコレータ。その署名は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7e4c982787a5d9e1fcf99c43a7857b7c7a301d8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django&lt;/code&gt; logger sends messages in the &lt;code&gt;django&lt;/code&gt; hierarchy (except &lt;code&gt;django.server&lt;/code&gt;) at the &lt;code&gt;INFO&lt;/code&gt; level or higher to the console.</source>
          <target state="translated">&lt;code&gt;django&lt;/code&gt; ロガーはにメッセージを送信 &lt;code&gt;django&lt;/code&gt; （除く階層 &lt;code&gt;django.server&lt;/code&gt; で） &lt;code&gt;INFO&lt;/code&gt; のコンソールにレベル以上。</target>
        </trans-unit>
        <trans-unit id="a8e9d08c01f536decd3318f78da920b131d4d144" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django&lt;/code&gt; logger sends messages in the &lt;code&gt;django&lt;/code&gt; hierarchy (except &lt;code&gt;django.server&lt;/code&gt;) with &lt;code&gt;ERROR&lt;/code&gt; or &lt;code&gt;CRITICAL&lt;/code&gt; level to &lt;a href=&quot;#django.utils.log.AdminEmailHandler&quot;&gt;&lt;code&gt;AdminEmailHandler&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;django&lt;/code&gt; ロガーはにメッセージを送信 &lt;code&gt;django&lt;/code&gt; （除く階層 &lt;code&gt;django.server&lt;/code&gt; で） &lt;code&gt;ERROR&lt;/code&gt; または &lt;code&gt;CRITICAL&lt;/code&gt; にレベル&lt;a href=&quot;#django.utils.log.AdminEmailHandler&quot;&gt; &lt;code&gt;AdminEmailHandler&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b409aa09cbe33e796179e11ffc5cdf9cc21b26c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ds_input&lt;/code&gt; dictionary</source>
          <target state="translated">&lt;code&gt;ds_input&lt;/code&gt; の辞書</target>
        </trans-unit>
        <trans-unit id="9070debf7227bd168fc7e1983cb351125bcb6837" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; parameters were made optional.</source>
          <target state="translated">&lt;code&gt;email&lt;/code&gt; と &lt;code&gt;password&lt;/code&gt; のパラメータはオプションになりました。</target>
        </trans-unit>
        <trans-unit id="bbe92c5fd85ab431e21579896b995263bf4f6366" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoder&lt;/code&gt;, which defaults to &lt;a href=&quot;../topics/serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt;&lt;code&gt;django.core.serializers.json.DjangoJSONEncoder&lt;/code&gt;&lt;/a&gt;, will be used to serialize the data. See &lt;a href=&quot;../topics/serialization#serialization-formats-json&quot;&gt;JSON serialization&lt;/a&gt; for more details about this serializer.</source>
          <target state="translated">&lt;code&gt;encoder&lt;/code&gt; デフォルト、&lt;a href=&quot;../topics/serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt; &lt;code&gt;django.core.serializers.json.DjangoJSONEncoder&lt;/code&gt; は&lt;/a&gt;、データをシリアル化するために使用されます。この&lt;a href=&quot;../topics/serialization#serialization-formats-json&quot;&gt;シリアライザーの&lt;/a&gt;詳細については、JSONシリアライゼーションを参照してください。</target>
        </trans-unit>
        <trans-unit id="1ce87d8775873b615bca016e8e0bf32cf991c005" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enforce_csrf_checks&lt;/code&gt; argument can be used to test CSRF protection (see above).</source>
          <target state="translated">&lt;code&gt;enforce_csrf_checks&lt;/code&gt; の引数は、テストCSRF保護に使用することができます（上記参照）。</target>
        </trans-unit>
        <trans-unit id="d37cd3506d938c6459bca470103356dacd07f429" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;environ&lt;/code&gt; dictionary provided to the request.</source>
          <target state="translated">&lt;code&gt;environ&lt;/code&gt; 要求に提供辞書。</target>
        </trans-unit>
        <trans-unit id="ff28e6fc9e2e8861fb89838e679469506d760422" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; argument can be a string, or preferably an instance of &lt;code&gt;ValidationError&lt;/code&gt;. See &lt;a href=&quot;validation#raising-validation-error&quot;&gt;Raising ValidationError&lt;/a&gt; for best practices when defining form errors.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; 引数が文字列、または好ましくはインスタンスとすることができる &lt;code&gt;ValidationError&lt;/code&gt; を。フォームエラーを定義する際のベストプラクティスについては、&lt;a href=&quot;validation#raising-validation-error&quot;&gt;ValidationErrorの発生&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a59a906a0f8ad980a261062dfdd7376f15de2056" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error_messages&lt;/code&gt; argument lets you override the default messages that the field will raise. Pass in a dictionary with keys matching the error messages you want to override.</source>
          <target state="translated">&lt;code&gt;error_messages&lt;/code&gt; の引数は、フィールドが上昇してしまうことにデフォルトメッセージを上書きすることができます。オーバーライドするエラーメッセージに一致するキーを含む辞書を渡します。</target>
        </trans-unit>
        <trans-unit id="529d7b0b3b8abc125f670d8d709d2108117fd718" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error_messages&lt;/code&gt; argument lets you override the default messages that the field will raise. Pass in a dictionary with keys matching the error messages you want to override. For example, here is the default error message:</source>
          <target state="translated">&lt;code&gt;error_messages&lt;/code&gt; の引数は、フィールドが上昇してしまうことにデフォルトメッセージを上書きすることができます。オーバーライドするエラーメッセージに一致するキーを含む辞書を渡します。たとえば、デフォルトのエラーメッセージは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="4f63145fb6ff6fc3de368350fbbb7eeb95a679e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;escape_html&lt;/code&gt; parameter behaves as described in &lt;a href=&quot;#django.forms.Form.errors.as_json&quot;&gt;&lt;code&gt;Form.errors.as_json()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;escape_html&lt;/code&gt; に記載されているように振る舞うパラメータ&lt;a href=&quot;#django.forms.Form.errors.as_json&quot;&gt; &lt;code&gt;Form.errors.as_json()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fddd9327a8323ea356bfd11d4a83957c2b92f7bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;expression&lt;/code&gt; argument is either a &lt;a href=&quot;database-functions#window-functions&quot;&gt;window function&lt;/a&gt;, an &lt;a href=&quot;querysets#aggregation-functions&quot;&gt;aggregate function&lt;/a&gt;, or an expression that&amp;rsquo;s compatible in a window clause.</source>
          <target state="translated">&lt;code&gt;expression&lt;/code&gt; 引数は、どちらかである&lt;a href=&quot;database-functions#window-functions&quot;&gt;ウィンドウ関数&lt;/a&gt;、&lt;a href=&quot;querysets#aggregation-functions&quot;&gt;集約関数&lt;/a&gt;、またはウィンドウ句での互換性だ表現。</target>
        </trans-unit>
        <trans-unit id="1dd21e868a58cb8aded4d3a24a87406e82e300d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;expressions&lt;/code&gt; positional arguments can include expressions or the names of model fields. They will be converted to a string and used as the &lt;code&gt;expressions&lt;/code&gt; placeholder within the &lt;code&gt;template&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;expressions&lt;/code&gt; 位置引数は、式やモデルフィールドの名前を含めることができます。これらは文字列に変換され、 &lt;code&gt;template&lt;/code&gt; 内の &lt;code&gt;expressions&lt;/code&gt; プレースホルダーとして使用されます。</target>
        </trans-unit>
        <trans-unit id="55be1543700537de67850b99d6a1b3674199e10d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extra&lt;/code&gt; argument acts the same as for &lt;a href=&quot;#django.test.Client.get&quot;&gt;&lt;code&gt;Client.get()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;extra&lt;/code&gt; 引数がためと全く同じ動作をする&lt;a href=&quot;#django.test.Client.get&quot;&gt; &lt;code&gt;Client.get()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="86e5ce7d47bd10516322155266ef668a65d05dbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extra&lt;/code&gt; keyword arguments parameter can be used to specify headers to be sent in the request. For example:</source>
          <target state="translated">&lt;code&gt;extra&lt;/code&gt; キーワード引数のパラメータがリクエストで送信するヘッダを指定するために使用することができます。例えば：</target>
        </trans-unit>
        <trans-unit id="fa8fecf5c3d69c3dad5a5f4f5174789911878085" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extra_fields&lt;/code&gt; keyword arguments are passed through to the &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;code&gt;__init__&lt;/code&gt; method to allow setting arbitrary fields on a &lt;a href=&quot;../../topics/auth/customizing#auth-custom-user&quot;&gt;custom user model&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;extra_fields&lt;/code&gt; キーワード引数はに渡され&lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;__init__&lt;/code&gt; 上で任意のフィールドを設定できるようにする方法&lt;a href=&quot;../../topics/auth/customizing#auth-custom-user&quot;&gt;カスタムユーザモデル&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d0cf16d9061426baa9f5929184a4c9e65561102d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fail_silently&lt;/code&gt; argument controls how the backend should handle errors. If &lt;code&gt;fail_silently&lt;/code&gt; is True, exceptions during the email sending process will be silently ignored.</source>
          <target state="translated">&lt;code&gt;fail_silently&lt;/code&gt; バックエンドがエラーを処理する方法引数を制御します。 &lt;code&gt;fail_silently&lt;/code&gt; がTrueの場合、Eメール送信プロセス中の例外は通知なく無視されます。</target>
        </trans-unit>
        <trans-unit id="227a1fc8697b21feca5fb3725d66b805b2610bd9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;field&lt;/code&gt; argument is the name of the field to which the errors should be added. If its value is &lt;code&gt;None&lt;/code&gt; the error will be treated as a non-field error as returned by &lt;a href=&quot;#django.forms.Form.non_field_errors&quot;&gt;&lt;code&gt;Form.non_field_errors()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;field&lt;/code&gt; 引数はエラーを追加すべきフィールドの名前です。値が &lt;code&gt;None&lt;/code&gt; の場合、エラーは&lt;a href=&quot;#django.forms.Form.non_field_errors&quot;&gt; &lt;code&gt;Form.non_field_errors()&lt;/code&gt; &lt;/a&gt;によって返される非フィールドエラーとして扱われます。</target>
        </trans-unit>
        <trans-unit id="3130b09cc5888f4344b4fb96a856974a85cd9d6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;field_options&lt;/code&gt; dictionary can have the following keys:</source>
          <target state="translated">&lt;code&gt;field_options&lt;/code&gt; の辞書には、以下のキーを持つことができます。</target>
        </trans-unit>
        <trans-unit id="9ef24f76914696345a84cdc8c99b23562b9f5c7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fields&lt;/code&gt; attribute works the same way as the &lt;code&gt;fields&lt;/code&gt; attribute on the inner &lt;code&gt;Meta&lt;/code&gt; class on &lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;. Unless you define the form class in another way, the attribute is required and the view will raise an &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception if it&amp;rsquo;s not.</source>
          <target state="translated">&lt;code&gt;fields&lt;/code&gt; 属性は、同じように機能 &lt;code&gt;fields&lt;/code&gt; 内部の属性 &lt;code&gt;Meta&lt;/code&gt; のクラス&lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt;。別の方法でフォームクラスを定義しない限り、属性は必須であり、そうでない場合、ビューは&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;ImproperlyConfigured&lt;/code&gt; &lt;/a&gt;例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="28d3f4226bdb078eeb9c2c2f412780c2f6769345" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fields&lt;/code&gt; option accepts the same types of values as &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display&quot;&gt;&lt;code&gt;list_display&lt;/code&gt;&lt;/a&gt;, except that callables aren&amp;rsquo;t accepted. Names of model and model admin methods will only be used if they&amp;rsquo;re listed in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt;&lt;code&gt;readonly_fields&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;fields&lt;/code&gt; オプションは、同じ値のタイプを受け入れる&lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display&quot;&gt; &lt;code&gt;list_display&lt;/code&gt; &lt;/a&gt;呼び出し可能オブジェクトが受け入れられないことを除いて、。モデルの名前とモデル管理メソッドは、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt; &lt;code&gt;readonly_fields&lt;/code&gt; に&lt;/a&gt;リストされている場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="8ea4da011d346501d0e2995dfa66cd403498de86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filename&lt;/code&gt; argument may include a path as returned by &lt;a href=&quot;../models/fields#django.db.models.FileField.upload_to&quot;&gt;&lt;code&gt;FileField.upload_to&lt;/code&gt;&lt;/a&gt;. In that case, the path won&amp;rsquo;t be passed to &lt;a href=&quot;../../howto/custom-file-storage#django.core.files.storage.get_valid_name&quot;&gt;&lt;code&gt;get_valid_name()&lt;/code&gt;&lt;/a&gt; but will be prepended back to the resulting name.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; によって返される引数は、パスを含むことが&lt;a href=&quot;../models/fields#django.db.models.FileField.upload_to&quot;&gt; &lt;code&gt;FileField.upload_to&lt;/code&gt; &lt;/a&gt;。その場合、パスは&lt;a href=&quot;../../howto/custom-file-storage#django.core.files.storage.get_valid_name&quot;&gt; &lt;code&gt;get_valid_name()&lt;/code&gt; に&lt;/a&gt;渡されませんが、結果の名前の前に追加されます。</target>
        </trans-unit>
        <trans-unit id="5f5bc8df51bb2770da0a361084bd71b5da2e6c43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filter&lt;/code&gt; argument takes a &lt;a href=&quot;querysets#django.db.models.Q&quot;&gt;&lt;code&gt;Q object&lt;/code&gt;&lt;/a&gt; that&amp;rsquo;s used to filter the rows that are aggregated. See &lt;a href=&quot;conditional-expressions#conditional-aggregation&quot;&gt;Conditional aggregation&lt;/a&gt; and &lt;a href=&quot;../../topics/db/aggregation#filtering-on-annotations&quot;&gt;Filtering on annotations&lt;/a&gt; for example usage.</source>
          <target state="translated">&lt;code&gt;filter&lt;/code&gt; 引数はとり&lt;a href=&quot;querysets#django.db.models.Q&quot;&gt; &lt;code&gt;Q object&lt;/code&gt; &lt;/a&gt;集約された行をフィルタリングするために使用されます。使用例については、&lt;a href=&quot;conditional-expressions#conditional-aggregation&quot;&gt;条件付き集計&lt;/a&gt;と&lt;a href=&quot;../../topics/db/aggregation#filtering-on-annotations&quot;&gt;注釈のフィルタリングを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4b860cb57da1e159f20dd3a4aff5c562c40d1ff7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;follow&lt;/code&gt; parameter is not supported.</source>
          <target state="translated">&lt;code&gt;follow&lt;/code&gt; パラメータがサポートされていません。</target>
        </trans-unit>
        <trans-unit id="e695baa760ebfa7a7a3af6b0c77d3eebe9ec9770" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;follow&lt;/code&gt;, &lt;code&gt;secure&lt;/code&gt; and &lt;code&gt;extra&lt;/code&gt; arguments act the same as for &lt;a href=&quot;#django.test.Client.get&quot;&gt;&lt;code&gt;Client.get()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;follow&lt;/code&gt; 、 &lt;code&gt;secure&lt;/code&gt; と &lt;code&gt;extra&lt;/code&gt; 引数はのためのと同じように動作する&lt;a href=&quot;#django.test.Client.get&quot;&gt; &lt;code&gt;Client.get()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="16c69e9db7109cd1093b97a5f1e8d115d3decb1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;follow&lt;/code&gt;, &lt;code&gt;secure&lt;/code&gt;, and &lt;code&gt;extra&lt;/code&gt; arguments act the same as for &lt;a href=&quot;#django.test.Client.get&quot;&gt;&lt;code&gt;Client.get()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;follow&lt;/code&gt; 、 &lt;code&gt;secure&lt;/code&gt; 、および &lt;code&gt;extra&lt;/code&gt; 引数はと同じ行動&lt;a href=&quot;#django.test.Client.get&quot;&gt; &lt;code&gt;Client.get()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="42a2b17496e4da60c33885e9950835e19b0694a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for&lt;/code&gt; tag can take an optional &lt;code&gt;{% empty %}&lt;/code&gt; clause whose text is displayed if the given array is empty or could not be found:</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; 任意取ることができるタグ &lt;code&gt;{% empty %}&lt;/code&gt; テキストが指定された配列が空であるか、見つからなかった場合に表示される句。</target>
        </trans-unit>
        <trans-unit id="f9b43ede79c55c7b49dd8a9f31b2c61ad839c7c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for_concrete_model&lt;/code&gt; argument corresponds to the &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey.for_concrete_model&quot;&gt;&lt;code&gt;for_concrete_model&lt;/code&gt;&lt;/a&gt; argument on &lt;code&gt;GenericForeignKey&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;for_concrete_model&lt;/code&gt; への引数の対応&lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey.for_concrete_model&quot;&gt; &lt;code&gt;for_concrete_model&lt;/code&gt; &lt;/a&gt;の引数 &lt;code&gt;GenericForeignKey&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="03936ee48140a19fe86e917e4c8c5ca1da003130" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;form_kwargs&lt;/code&gt; may also depend on the specific form instance. The formset base class provides a &lt;code&gt;get_form_kwargs&lt;/code&gt; method. The method takes a single argument - the index of the form in the formset. The index is &lt;code&gt;None&lt;/code&gt; for the &lt;a href=&quot;#empty-form&quot;&gt;empty_form&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;form_kwargs&lt;/code&gt; は、特定のフォームインスタンスに依存し得ます。formset基本クラスは &lt;code&gt;get_form_kwargs&lt;/code&gt; メソッドを提供します。このメソッドは単一の引数（フォームセット内のフォームのインデックス）を取ります。&lt;a href=&quot;#empty-form&quot;&gt;empty_form&lt;/a&gt;のインデックスは &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4e81df20d77b84a800ef455ddf70b8a56f1656b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; parameter changes the output format from the databases&amp;rsquo;s default, usually text-based. PostgreSQL supports &lt;code&gt;'TEXT'&lt;/code&gt;, &lt;code&gt;'JSON'&lt;/code&gt;, &lt;code&gt;'YAML'&lt;/code&gt;, and &lt;code&gt;'XML'&lt;/code&gt;. MySQL supports &lt;code&gt;'TEXT'&lt;/code&gt; (also called &lt;code&gt;'TRADITIONAL'&lt;/code&gt;) and &lt;code&gt;'JSON'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; パラメータは、データベースのデフォルト、通常はテキストベースの出力形式を変更します。PostgreSQLは &lt;code&gt;'TEXT'&lt;/code&gt; 、 &lt;code&gt;'JSON'&lt;/code&gt; 、 &lt;code&gt;'YAML'&lt;/code&gt; 、および &lt;code&gt;'XML'&lt;/code&gt; をサポートしています。MySQLは &lt;code&gt;'TEXT'&lt;/code&gt; （ &lt;code&gt;'TRADITIONAL'&lt;/code&gt; とも呼ばれる）と &lt;code&gt;'JSON'&lt;/code&gt; をサポートします。</target>
        </trans-unit>
        <trans-unit id="b6b4b6669c1531ecc3f3d532dce241acd94fa09d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; parameter changes the output format from the databases&amp;rsquo;s default, which is usually text-based. PostgreSQL supports &lt;code&gt;'TEXT'&lt;/code&gt;, &lt;code&gt;'JSON'&lt;/code&gt;, &lt;code&gt;'YAML'&lt;/code&gt;, and &lt;code&gt;'XML'&lt;/code&gt; formats. MariaDB and MySQL support &lt;code&gt;'TEXT'&lt;/code&gt; (also called &lt;code&gt;'TRADITIONAL'&lt;/code&gt;) and &lt;code&gt;'JSON'&lt;/code&gt; formats. MySQL 8.0.16+ also supports an improved &lt;code&gt;'TREE'&lt;/code&gt; format, which is similar to PostgreSQL&amp;rsquo;s &lt;code&gt;'TEXT'&lt;/code&gt; output and is used by default, if supported.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; パラメータは、通常はテキストベースであるデータベースのデフォルトからの出力形式を変更します。PostgreSQLは、 &lt;code&gt;'TEXT'&lt;/code&gt; 、 &lt;code&gt;'JSON'&lt;/code&gt; 、 &lt;code&gt;'YAML'&lt;/code&gt; 、および &lt;code&gt;'XML'&lt;/code&gt; 形式をサポートしています。MariaDBとMySQLは、 &lt;code&gt;'TEXT'&lt;/code&gt; （ &lt;code&gt;'TRADITIONAL'&lt;/code&gt; とも呼ばれ &lt;code&gt;'JSON'&lt;/code&gt; ）および「JSON」形式をサポートしています。MySQL 8.0.16+は、改良された &lt;code&gt;'TREE'&lt;/code&gt; 形式もサポートしています。これは、PostgreSQLの &lt;code&gt;'TEXT'&lt;/code&gt; 出力に類似しており、サポートされている場合はデフォルトで使用されます。</target>
        </trans-unit>
        <trans-unit id="37ea6e91c6855a52f5e223daf2a9f1560e5bc2b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; string is a normal Python formatting string describing the details that are to be output on each logging line. The full list of detail that can be output can be found in &lt;a href=&quot;https://docs.python.org/3/library/logging.html#formatter-objects&quot;&gt;Formatter Objects&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 文字列は、各ログ行に出力される内容を記述した通常のPythonの書式文字列です。出力可能な詳細の完全なリストは、&lt;a href=&quot;https://docs.python.org/3/library/logging.html#formatter-objects&quot;&gt;Formatterオブジェクトにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="00b1bf604206212572a560228da76cd4978976e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;formfield_for_foreignkey&lt;/code&gt; method on a &lt;code&gt;ModelAdmin&lt;/code&gt; allows you to override the default formfield for a foreign keys field. For example, to return a subset of objects for this foreign key field based on the user:</source>
          <target state="translated">&lt;code&gt;formfield_for_foreignkey&lt;/code&gt; の方法 &lt;code&gt;ModelAdmin&lt;/code&gt; のは、あなたが外部キーフィールドのデフォルトのフォームフィールドを上書きすることができます。たとえば、ユーザーに基づいてこの外部キーフィールドのオブジェクトのサブセットを返すには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="8af953dad1272529a6ebe31a577aca6d0a58e0a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;frame&lt;/code&gt; parameter specifies which other rows that should be used in the computation. See &lt;a href=&quot;#window-frames&quot;&gt;Frames&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;frame&lt;/code&gt; 他の行の計算に使用されるべきパラメータを指定します。詳細については、&lt;a href=&quot;#window-frames&quot;&gt;フレーム&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ee79af5100a74898bf0e1d325662fad3184f08fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;from_db()&lt;/code&gt; method can be used to customize model instance creation when loading from the database.</source>
          <target state="translated">&lt;code&gt;from_db()&lt;/code&gt; メソッドは、モデルインスタンスの作成をカスタマイズするために使用することができる場合、データベースからロードします。</target>
        </trans-unit>
        <trans-unit id="0fefbbb7a32c81388579de62a4f48c1322432786" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;template&lt;/code&gt;, and &lt;code&gt;arg_joiner&lt;/code&gt; keywords can be used to replace the attributes of the same name without having to define your own class. &lt;code&gt;output_field&lt;/code&gt; can be used to define the expected return type.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 、 &lt;code&gt;template&lt;/code&gt; 、および &lt;code&gt;arg_joiner&lt;/code&gt; のキーワードは、独自のクラスを定義することなく、同じ名前の属性を置き換えるために使用することができます。 &lt;code&gt;output_field&lt;/code&gt; を使用して、予期される戻り値の型を定義できます。</target>
        </trans-unit>
        <trans-unit id="4af005ecc55096de924e70b463ab323db6f99517" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;geodjango&lt;/code&gt; project settings are stored in the &lt;code&gt;geodjango/settings.py&lt;/code&gt; file. Edit the database connection settings to match your setup:</source>
          <target state="translated">&lt;code&gt;geodjango&lt;/code&gt; のプロジェクト設定はに格納されてい &lt;code&gt;geodjango/settings.py&lt;/code&gt; ファイル。データベース接続設定を編集して、設定に一致させます。</target>
        </trans-unit>
        <trans-unit id="6261e5e19b0103508a4f772f93affa6b3ea47bc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;geojson&lt;/code&gt; serializer is not meant for round-tripping data, as it has no deserializer equivalent. For example, you cannot use &lt;a href=&quot;../../django-admin#django-admin-loaddata&quot;&gt;&lt;code&gt;loaddata&lt;/code&gt;&lt;/a&gt; to reload the output produced by this serializer. If you plan to reload the outputted data, use the plain &lt;a href=&quot;../../../topics/serialization#serialization-formats-json&quot;&gt;json serializer&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;geojson&lt;/code&gt; シリアライザは、それが何のデシリアライザ相当していないとして、ラウンドトリップデータのためのものではありません。たとえば、&lt;a href=&quot;../../django-admin#django-admin-loaddata&quot;&gt; &lt;code&gt;loaddata&lt;/code&gt; &lt;/a&gt;を使用して、このシリアライザーによって生成された出力を再ロードすることはできません。出力されたデータを再&lt;a href=&quot;../../../topics/serialization#serialization-formats-json&quot;&gt;ロード&lt;/a&gt;する場合は、代わりにプレーンなjsonシリアライザーを使用してください。</target>
        </trans-unit>
        <trans-unit id="70bc251219a3c6361014e07b174b00adc0f70011" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;post()&lt;/code&gt; methods both return a &lt;code&gt;Response&lt;/code&gt; object. This &lt;code&gt;Response&lt;/code&gt; object is &lt;em&gt;not&lt;/em&gt; the same as the &lt;code&gt;HttpResponse&lt;/code&gt; object returned by Django views; the test response object has some additional data useful for test code to verify.</source>
          <target state="translated">&lt;code&gt;get()&lt;/code&gt; および &lt;code&gt;post()&lt;/code&gt; メソッドが返す両方の &lt;code&gt;Response&lt;/code&gt; オブジェクトを。この &lt;code&gt;Response&lt;/code&gt; オブジェクトは、Djangoビューによって返される &lt;code&gt;HttpResponse&lt;/code&gt; オブジェクトと同じではあり&lt;em&gt;ません&lt;/em&gt;。テスト応答オブジェクトには、テストコードの検証に役立つ追加のデータがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="4644e38a5b4ed90e43cb4a95b5b04a9ad2295bd0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_autocomplete_fields()&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and is expected to return a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; of field names that will be displayed with an autocomplete widget as described above in the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.autocomplete_fields&quot;&gt;&lt;code&gt;ModelAdmin.autocomplete_fields&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">&lt;code&gt;get_autocomplete_fields()&lt;/code&gt; メソッドは、与えられた &lt;code&gt;HttpRequest&lt;/code&gt; と返すことが期待される &lt;code&gt;list&lt;/code&gt; または &lt;code&gt;tuple&lt;/code&gt; で上述したようにオートコンプリートウィジェットに表示されるフィールド名の&lt;a href=&quot;#django.contrib.admin.ModelAdmin.autocomplete_fields&quot;&gt; &lt;code&gt;ModelAdmin.autocomplete_fields&lt;/code&gt; の&lt;/a&gt;セクション。</target>
        </trans-unit>
        <trans-unit id="5176b83061fe07acd35cb8583738ca8101f44b96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_exclude&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and the &lt;code&gt;obj&lt;/code&gt; being edited (or &lt;code&gt;None&lt;/code&gt; on an add form) and is expected to return a list of fields, as described in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.exclude&quot;&gt;&lt;code&gt;ModelAdmin.exclude&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;get_exclude&lt;/code&gt; 方法が与えられている &lt;code&gt;HttpRequest&lt;/code&gt; と &lt;code&gt;obj&lt;/code&gt; 編集中（又は &lt;code&gt;None&lt;/code&gt; 追加フォームの）とに記載されているように、フィールドのリストを返すことが期待される&lt;a href=&quot;#django.contrib.admin.ModelAdmin.exclude&quot;&gt; &lt;code&gt;ModelAdmin.exclude&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="755e82fff8b7899063270b4eb42e60c723f98e63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_fields&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and the &lt;code&gt;obj&lt;/code&gt; being edited (or &lt;code&gt;None&lt;/code&gt; on an add form) and is expected to return a list of fields, as described above in the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt;&lt;code&gt;ModelAdmin.fields&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">&lt;code&gt;get_fields&lt;/code&gt; の方法が与えられる &lt;code&gt;HttpRequest&lt;/code&gt; と &lt;code&gt;obj&lt;/code&gt; （または編集される &lt;code&gt;None&lt;/code&gt; 追加フォーム上）および上述したように、フィールドのリストを返すことが期待される&lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt; &lt;code&gt;ModelAdmin.fields&lt;/code&gt; の&lt;/a&gt;セクション。</target>
        </trans-unit>
        <trans-unit id="198991e31c914bc986ef1174446070721aea8002" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_fieldsets&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and the &lt;code&gt;obj&lt;/code&gt; being edited (or &lt;code&gt;None&lt;/code&gt; on an add form) and is expected to return a list of two-tuples, in which each two-tuple represents a &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt; on the admin form page, as described above in the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt;&lt;code&gt;ModelAdmin.fieldsets&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">&lt;code&gt;get_fieldsets&lt;/code&gt; の方法が与えられる &lt;code&gt;HttpRequest&lt;/code&gt; と &lt;code&gt;obj&lt;/code&gt; が編集されている（又は &lt;code&gt;None&lt;/code&gt; 追加フォーム上の）各二タプルが表す、2つ組のリストを返すことが期待される &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt; 管理フォームページに、のように上記の&lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt; &lt;code&gt;ModelAdmin.fieldsets&lt;/code&gt; &lt;/a&gt;セクションで説明されています。</target>
        </trans-unit>
        <trans-unit id="00df08ce04cf3666f946909512833c065f35fa46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_format&lt;/code&gt; function has access to the configured i18n formatting settings and can retrieve the format string for a given setting name:</source>
          <target state="translated">&lt;code&gt;get_format&lt;/code&gt; の機能は、設定をフォーマットするように構成国際化へのアクセス権を持ち、与えられた設定名のフォーマット文字列を取得できます。</target>
        </trans-unit>
        <trans-unit id="8b40622097cc8f4cbe32e1fa473f94495c878dfb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_inline_instances&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and the &lt;code&gt;obj&lt;/code&gt; being edited (or &lt;code&gt;None&lt;/code&gt; on an add form) and is expected to return a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; of &lt;a href=&quot;#django.contrib.admin.InlineModelAdmin&quot;&gt;&lt;code&gt;InlineModelAdmin&lt;/code&gt;&lt;/a&gt; objects, as described below in the &lt;a href=&quot;#django.contrib.admin.InlineModelAdmin&quot;&gt;&lt;code&gt;InlineModelAdmin&lt;/code&gt;&lt;/a&gt; section. For example, the following would return inlines without the default filtering based on add, change, delete, and view permissions:</source>
          <target state="translated">&lt;code&gt;get_inline_instances&lt;/code&gt; の方法が与えられている &lt;code&gt;HttpRequest&lt;/code&gt; と &lt;code&gt;obj&lt;/code&gt; 編集中（又は &lt;code&gt;None&lt;/code&gt; 追加フォーム上）と返すことが期待されている &lt;code&gt;list&lt;/code&gt; または &lt;code&gt;tuple&lt;/code&gt; の&lt;a href=&quot;#django.contrib.admin.InlineModelAdmin&quot;&gt; &lt;code&gt;InlineModelAdmin&lt;/code&gt; し&lt;/a&gt;て以下に記載されるように、オブジェクト&lt;a href=&quot;#django.contrib.admin.InlineModelAdmin&quot;&gt; &lt;code&gt;InlineModelAdmin&lt;/code&gt; の&lt;/a&gt;セクション。たとえば、次の例では、追加、変更、削除、表示の権限に基づくデフォルトのフィルタリングなしでインラインが返されます。</target>
        </trans-unit>
        <trans-unit id="951e692bee930fd4e9e3bfb396dc06eef242c2b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_inlines&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and the &lt;code&gt;obj&lt;/code&gt; being edited (or &lt;code&gt;None&lt;/code&gt; on an add form) and is expected to return an iterable of inlines. You can override this method to dynamically add inlines based on the request or model instance instead of specifying them in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.inlines&quot;&gt;&lt;code&gt;ModelAdmin.inlines&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;get_inlines&lt;/code&gt; の方法が与えられる &lt;code&gt;HttpRequest&lt;/code&gt; と &lt;code&gt;obj&lt;/code&gt; （または編集される &lt;code&gt;None&lt;/code&gt; 追加フォーム上）およびインラインの反復可能を返すことが期待されます。このメソッドをオーバーライドして、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.inlines&quot;&gt; &lt;code&gt;ModelAdmin.inlines&lt;/code&gt; &lt;/a&gt;で指定する代わりに、リクエストまたはモデルインスタンスに基づいてインラインを動的に追加できます。</target>
        </trans-unit>
        <trans-unit id="3040761ce63b148627de401548cd68bb71755f08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_language_info()&lt;/code&gt; function provides detailed information about languages:</source>
          <target state="translated">&lt;code&gt;get_language_info()&lt;/code&gt; 関数は、言語に関する詳細な情報を提供します。</target>
        </trans-unit>
        <trans-unit id="852a4619c006a3651094ececb52b7e69441578d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_list_display&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and is expected to return a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; of field names that will be displayed on the changelist view as described above in the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display&quot;&gt;&lt;code&gt;ModelAdmin.list_display&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">&lt;code&gt;get_list_display&lt;/code&gt; の方法が与えられる &lt;code&gt;HttpRequest&lt;/code&gt; と返すことが期待される &lt;code&gt;list&lt;/code&gt; または &lt;code&gt;tuple&lt;/code&gt; で上述したようチェンジビューに表示されるフィールド名の&lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display&quot;&gt; &lt;code&gt;ModelAdmin.list_display&lt;/code&gt; の&lt;/a&gt;セクション。</target>
        </trans-unit>
        <trans-unit id="3b755ef879e69ace6824c12c62b70e3e1c468d81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_list_display_links&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and the &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; returned by &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_list_display&quot;&gt;&lt;code&gt;ModelAdmin.get_list_display()&lt;/code&gt;&lt;/a&gt;. It is expected to return either &lt;code&gt;None&lt;/code&gt; or a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; of field names on the changelist that will be linked to the change view, as described in the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display_links&quot;&gt;&lt;code&gt;ModelAdmin.list_display_links&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">&lt;code&gt;get_list_display_links&lt;/code&gt; の方法が与えられている &lt;code&gt;HttpRequest&lt;/code&gt; と &lt;code&gt;list&lt;/code&gt; または &lt;code&gt;tuple&lt;/code&gt; によって返さ&lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_list_display&quot;&gt; &lt;code&gt;ModelAdmin.get_list_display()&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display_links&quot;&gt; &lt;code&gt;ModelAdmin.list_display_links&lt;/code&gt; &lt;/a&gt;セクションで説明されているように、変更ビューにリンクされる変更 &lt;code&gt;list&lt;/code&gt; &lt;code&gt;None&lt;/code&gt; またはフィールド名のリストまたは &lt;code&gt;tuple&lt;/code&gt; のいずれかを返すことが期待されています。</target>
        </trans-unit>
        <trans-unit id="ffbcea4b076e289d3280ca8b246b0d775f7dc6f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_list_filter&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and is expected to return the same kind of sequence type as for the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_filter&quot;&gt;&lt;code&gt;list_filter&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">&lt;code&gt;get_list_filter&lt;/code&gt; の方法が与えられている &lt;code&gt;HttpRequest&lt;/code&gt; との場合と同様に、配列タイプの同じ種類を返すことが期待され&lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_filter&quot;&gt; &lt;code&gt;list_filter&lt;/code&gt; の&lt;/a&gt;属性。</target>
        </trans-unit>
        <trans-unit id="86d3756bff1c41f38b16948ade80e5e01b268f81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_list_select_related&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and should return a boolean or list as &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_select_related&quot;&gt;&lt;code&gt;ModelAdmin.list_select_related&lt;/code&gt;&lt;/a&gt; does.</source>
          <target state="translated">&lt;code&gt;get_list_select_related&lt;/code&gt; 方法が与えられている &lt;code&gt;HttpRequest&lt;/code&gt; としてブールまたはリストを返す必要があります&lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_select_related&quot;&gt; &lt;code&gt;ModelAdmin.list_select_related&lt;/code&gt; は&lt;/a&gt;ありません。</target>
        </trans-unit>
        <trans-unit id="5fad6a9317395add4e08220a598d083ef68feb4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_or_create()&lt;/code&gt; method has similar error behavior to &lt;a href=&quot;#django.db.models.query.QuerySet.create&quot;&gt;&lt;code&gt;create()&lt;/code&gt;&lt;/a&gt; when you&amp;rsquo;re using manually specified primary keys. If an object needs to be created and the key already exists in the database, an &lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt;&lt;code&gt;IntegrityError&lt;/code&gt;&lt;/a&gt; will be raised.</source>
          <target state="translated">&lt;code&gt;get_or_create()&lt;/code&gt; メソッドは次のようにエラー動作あり&lt;a href=&quot;#django.db.models.query.QuerySet.create&quot;&gt; &lt;code&gt;create()&lt;/code&gt; &lt;/a&gt;手動で指定した主キーを使用しているとき。オブジェクトを作成する必要があり、キーがデータベースにすでに存在する場合、&lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt; &lt;code&gt;IntegrityError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="8edb8c859b219486db4db13b0c0ff3a589490539" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_ordering&lt;/code&gt; method takes a &lt;code&gt;request&lt;/code&gt; as parameter and is expected to return a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; for ordering similar to the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.ordering&quot;&gt;&lt;code&gt;ordering&lt;/code&gt;&lt;/a&gt; attribute. For example:</source>
          <target state="translated">&lt;code&gt;get_ordering&lt;/code&gt; 方法はかかる &lt;code&gt;request&lt;/code&gt; パラメータとしてと返すことが期待され &lt;code&gt;list&lt;/code&gt; や &lt;code&gt;tuple&lt;/code&gt; に似て注文するため&lt;a href=&quot;#django.contrib.admin.ModelAdmin.ordering&quot;&gt; &lt;code&gt;ordering&lt;/code&gt; &lt;/a&gt;属性。例えば：</target>
        </trans-unit>
        <trans-unit id="64d1d66947d4db50472f5745c27c90cafbf119f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_prepopulated_fields&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and the &lt;code&gt;obj&lt;/code&gt; being edited (or &lt;code&gt;None&lt;/code&gt; on an add form) and is expected to return a &lt;code&gt;dictionary&lt;/code&gt;, as described above in the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.prepopulated_fields&quot;&gt;&lt;code&gt;ModelAdmin.prepopulated_fields&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">&lt;code&gt;get_prepopulated_fields&lt;/code&gt; の方法が与えられている &lt;code&gt;HttpRequest&lt;/code&gt; と &lt;code&gt;obj&lt;/code&gt; 編集中（又は &lt;code&gt;None&lt;/code&gt; 追加フォーム上）と返すことが期待されている &lt;code&gt;dictionary&lt;/code&gt; 上述したように、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.prepopulated_fields&quot;&gt; &lt;code&gt;ModelAdmin.prepopulated_fields&lt;/code&gt; の&lt;/a&gt;セクション。</target>
        </trans-unit>
        <trans-unit id="f2c7d836a850e61a7cc9eac0531c6c15a726119c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_queryset&lt;/code&gt; method on a &lt;code&gt;ModelAdmin&lt;/code&gt; returns a &lt;a href=&quot;../../models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; of all model instances that can be edited by the admin site. One use case for overriding this method is to show objects owned by the logged-in user:</source>
          <target state="translated">&lt;code&gt;get_queryset&lt;/code&gt; の方法 &lt;code&gt;ModelAdmin&lt;/code&gt; のは返す&lt;a href=&quot;../../models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; adminサイトで編集することができ、すべてのモデルインスタンスのを。このメソッドをオーバーライドする1つの使用例は、ログインしたユーザーが所有するオブジェクトを表示することです。</target>
        </trans-unit>
        <trans-unit id="2808c552bcbc92b5c6cd5c6e8a9529417baedbc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_readonly_fields&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and the &lt;code&gt;obj&lt;/code&gt; being edited (or &lt;code&gt;None&lt;/code&gt; on an add form) and is expected to return a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; of field names that will be displayed as read-only, as described above in the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt;&lt;code&gt;ModelAdmin.readonly_fields&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">&lt;code&gt;get_readonly_fields&lt;/code&gt; の方法が与えられる &lt;code&gt;HttpRequest&lt;/code&gt; と &lt;code&gt;obj&lt;/code&gt; が編集されている（又は &lt;code&gt;None&lt;/code&gt; 追加フォーム上）と返すことが期待されている &lt;code&gt;list&lt;/code&gt; または &lt;code&gt;tuple&lt;/code&gt; で上述したように、読み取り専用として表示されるフィールド名を&lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt; &lt;code&gt;ModelAdmin.readonly_fields&lt;/code&gt; の&lt;/a&gt;部。</target>
        </trans-unit>
        <trans-unit id="40e4c35370b765d264ee5046e3e9c0fa2eba899f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_response&lt;/code&gt; callable provided by Django might be the actual view (if this is the last listed middleware) or it might be the next middleware in the chain. The current middleware doesn&amp;rsquo;t need to know or care what exactly it is, just that it represents whatever comes next.</source>
          <target state="translated">&lt;code&gt;get_response&lt;/code&gt; （これが最後の列挙されたミドルウェアがある場合）はDjangoが提供する呼び出し可能で、実際のビューであるかもしれないか、それはチェーンの次のミドルウェアであるかもしれません。現在のミドルウェアは、それが何であるかを正確に知る必要も、気にする必要もありません。</target>
        </trans-unit>
        <trans-unit id="b42cf7b6677ddc723603ee6f8bf35ebe461c378d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_search_fields&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and is expected to return the same kind of sequence type as for the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.search_fields&quot;&gt;&lt;code&gt;search_fields&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">&lt;code&gt;get_search_fields&lt;/code&gt; の方法が与えられている &lt;code&gt;HttpRequest&lt;/code&gt; との場合と同様に、配列タイプの同じ種類を返すことが期待され&lt;a href=&quot;#django.contrib.admin.ModelAdmin.search_fields&quot;&gt; &lt;code&gt;search_fields&lt;/code&gt; の&lt;/a&gt;属性。</target>
        </trans-unit>
        <trans-unit id="b9c3233a6fe16b13e93695d98da3ffc24c66a93c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_search_results&lt;/code&gt; method modifies the list of objects displayed into those that match the provided search term. It accepts the request, a queryset that applies the current filters, and the user-provided search term. It returns a tuple containing a queryset modified to implement the search, and a boolean indicating if the results may contain duplicates.</source>
          <target state="translated">&lt;code&gt;get_search_results&lt;/code&gt; 方法は、オブジェクトのリストが提供された検索用語に一致するものに表示変更します。リクエスト、現在のフィルターを適用するクエリセット、およびユーザー指定の検索語を受け入れます。検索を実装するように変更されたクエリセットを含むタプルと、結果に重複が含まれる可能性があるかどうかを示すブール値を返します。</target>
        </trans-unit>
        <trans-unit id="ac5d5c1b01fa74758fe1927836211bbe738b7378" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_sortable_by()&lt;/code&gt; method is passed the &lt;code&gt;HttpRequest&lt;/code&gt; and is expected to return a collection (e.g. &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, or &lt;code&gt;set&lt;/code&gt;) of field names that will be sortable in the change list page.</source>
          <target state="translated">&lt;code&gt;get_sortable_by()&lt;/code&gt; メソッドは、渡された &lt;code&gt;HttpRequest&lt;/code&gt; （例えば、コレクションを返すことが期待されている &lt;code&gt;list&lt;/code&gt; 、 &lt;code&gt;tuple&lt;/code&gt; 、あるいは &lt;code&gt;set&lt;/code&gt; 変更リストページでソートできるフィールド名のを）。</target>
        </trans-unit>
        <trans-unit id="85e4efd30eb710f485b68af67a07b75591f48ecc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_urls&lt;/code&gt; method on a &lt;code&gt;ModelAdmin&lt;/code&gt; returns the URLs to be used for that ModelAdmin in the same way as a URLconf. Therefore you can extend them as documented in &lt;a href=&quot;../../../topics/http/urls&quot;&gt;URL dispatcher&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;get_urls&lt;/code&gt; の上の方法 &lt;code&gt;ModelAdmin&lt;/code&gt; のは URLconfのと同じようにそのModelAdminのに使用するURLを返します。したがって、&lt;a href=&quot;../../../topics/http/urls&quot;&gt;URLディスパッチャーに&lt;/a&gt;記載されているとおりに拡張できます。</target>
        </trans-unit>
        <trans-unit id="4fa93c96fae27002f96fa896e99d9a22fc33c61c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_user&lt;/code&gt; method takes a &lt;code&gt;user_id&lt;/code&gt; &amp;ndash; which could be a username, database ID or whatever, but has to be the primary key of your user object &amp;ndash; and returns a user object or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;get_user&lt;/code&gt; 方法は取る &lt;code&gt;user_id&lt;/code&gt; -ユーザ名、データベースIDまたは任意のかもしれないが、ユーザーオブジェクトの主キーである必要があります-とユーザーオブジェクトまたは返し &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="720b9b664b79d7bd448e6d9bcd4e8d3b07c4409a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gettext&lt;/code&gt; function behaves similarly to the standard &lt;code&gt;gettext&lt;/code&gt; interface within your Python code:</source>
          <target state="translated">&lt;code&gt;gettext&lt;/code&gt; の機能は標準と同様に動作 &lt;code&gt;gettext&lt;/code&gt; のあなたのPythonコード内のインタフェース：</target>
        </trans-unit>
        <trans-unit id="78e83556dbbfdc2a626230db91da607d3375cab9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handle()&lt;/code&gt; method takes one or more &lt;code&gt;poll_ids&lt;/code&gt; and sets &lt;code&gt;poll.opened&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; for each one. If the user referenced any nonexistent polls, a &lt;a href=&quot;#django.core.management.CommandError&quot;&gt;&lt;code&gt;CommandError&lt;/code&gt;&lt;/a&gt; is raised. The &lt;code&gt;poll.opened&lt;/code&gt; attribute does not exist in the &lt;a href=&quot;../intro/tutorial02&quot;&gt;tutorial&lt;/a&gt; and was added to &lt;code&gt;polls.models.Question&lt;/code&gt; for this example.</source>
          <target state="translated">&lt;code&gt;handle()&lt;/code&gt; メソッドは、一つ以上のかかり &lt;code&gt;poll_ids&lt;/code&gt; とセット &lt;code&gt;poll.opened&lt;/code&gt; に &lt;code&gt;False&lt;/code&gt; それぞれについての。ユーザーが存在しないポーリングを参照した場合、&lt;a href=&quot;#django.core.management.CommandError&quot;&gt; &lt;code&gt;CommandError&lt;/code&gt; &lt;/a&gt;が発生します。 &lt;code&gt;poll.opened&lt;/code&gt; 属性が存在しない&lt;a href=&quot;../intro/tutorial02&quot;&gt;チュートリアル&lt;/a&gt;に添加し、 &lt;code&gt;polls.models.Question&lt;/code&gt; この例では。</target>
        </trans-unit>
        <trans-unit id="2434f6311509e15e5576856722fd48f850d27218" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;has_changed()&lt;/code&gt; method is used to determine if the field value has changed from the initial value. Returns &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;has_changed()&lt;/code&gt; メソッドは、フィールド値が初期値から変化したかどうかを決定するために使用されます。 &lt;code&gt;True&lt;/code&gt; または &lt;code&gt;False&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="6b7c784949b69451cfcd551cb296d2c319e3e23a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;help_text&lt;/code&gt; argument lets you specify descriptive text for this &lt;code&gt;Field&lt;/code&gt;. If you provide &lt;code&gt;help_text&lt;/code&gt;, it will be displayed next to the &lt;code&gt;Field&lt;/code&gt; when the &lt;code&gt;Field&lt;/code&gt; is rendered by one of the convenience &lt;code&gt;Form&lt;/code&gt; methods (e.g., &lt;code&gt;as_ul()&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;help_text&lt;/code&gt; にする引数は、このために説明のテキストを指定することができます &lt;code&gt;Field&lt;/code&gt; 。あなたが提供する場合は &lt;code&gt;help_text&lt;/code&gt; には、それが次へ表示される &lt;code&gt;Field&lt;/code&gt; とき &lt;code&gt;Field&lt;/code&gt; コンビニの一つによってレンダリングされた &lt;code&gt;Form&lt;/code&gt; 方法（例えば、 &lt;code&gt;as_ul()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3d45ee526d37e1c68494af99bcacbf305bfeffdf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id&lt;/code&gt; attribute values are generated by prepending &lt;code&gt;id_&lt;/code&gt; to the form field names. This behavior is configurable, though, if you want to change the &lt;code&gt;id&lt;/code&gt; convention or remove HTML &lt;code&gt;id&lt;/code&gt; attributes and &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags entirely.</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; 属性値が付加することで生成された &lt;code&gt;id_&lt;/code&gt; フォームのフィールド名に。ただし、 &lt;code&gt;id&lt;/code&gt; の規則を変更する場合や、HTML &lt;code&gt;id&lt;/code&gt; 属性と &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; タグを完全に削除する場合は、この動作を構成できます。</target>
        </trans-unit>
        <trans-unit id="e9b5a121541650ec2354edc465ac362f2156cb4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ifchanged&lt;/code&gt; tag can also take an optional &lt;code&gt;{% else %}&lt;/code&gt; clause that will be displayed if the value has not changed:</source>
          <target state="translated">&lt;code&gt;ifchanged&lt;/code&gt; タグは任意取ることができる &lt;code&gt;{% else %}&lt;/code&gt; の値が変更されていない場合に表示される句。</target>
        </trans-unit>
        <trans-unit id="6215d24775f532c0acec6f163b0f848784c5b3bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignore_conflicts&lt;/code&gt; parameter was added.</source>
          <target state="translated">&lt;code&gt;ignore_conflicts&lt;/code&gt; のパラメータが追加されました。</target>
        </trans-unit>
        <trans-unit id="491d5f94e827a70f27f68b440bda880d3361ef95" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include_html&lt;/code&gt; argument of &lt;code&gt;AdminEmailHandler&lt;/code&gt; is used to control whether the traceback email includes an HTML attachment containing the full content of the debug Web page that would have been produced if &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; were &lt;code&gt;True&lt;/code&gt;. To set this value in your configuration, include it in the handler definition for &lt;code&gt;django.utils.log.AdminEmailHandler&lt;/code&gt;, like this:</source>
          <target state="translated">&lt;code&gt;AdminEmailHandler&lt;/code&gt; の &lt;code&gt;include_html&lt;/code&gt; 引数を使用して、&lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; の場合に生成されるデバッグWebページの完全なコンテンツを含むHTML添付ファイルをトレースバックメールに含めるかどうかを制御します。この値を設定に設定するには、次のように、 &lt;code&gt;django.utils.log.AdminEmailHandler&lt;/code&gt; のハンドラー定義にこの値を含めます。</target>
        </trans-unit>
        <trans-unit id="045417884876ee26cd9ed54479966623f176dfba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initial&lt;/code&gt; argument is set to &lt;a href=&quot;#django.views.generic.edit.FormMixin.get_initial&quot;&gt;&lt;code&gt;get_initial()&lt;/code&gt;&lt;/a&gt;. If the request is a &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt;, the request data (&lt;code&gt;request.POST&lt;/code&gt; and &lt;code&gt;request.FILES&lt;/code&gt;) will also be provided.</source>
          <target state="translated">&lt;code&gt;initial&lt;/code&gt; 引数がするように設定されている&lt;a href=&quot;#django.views.generic.edit.FormMixin.get_initial&quot;&gt; &lt;code&gt;get_initial()&lt;/code&gt; &lt;/a&gt;。要求が &lt;code&gt;POST&lt;/code&gt; または &lt;code&gt;PUT&lt;/code&gt; の場合、要求データ（ &lt;code&gt;request.POST&lt;/code&gt; および &lt;code&gt;request.FILES&lt;/code&gt; ）も提供されます。</target>
        </trans-unit>
        <trans-unit id="4b421260063c0a7da8d712fe749b9c0c4bbdd3b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initial&lt;/code&gt; argument lets you specify the initial value to use when rendering this &lt;code&gt;Field&lt;/code&gt; in an unbound &lt;code&gt;Form&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;initial&lt;/code&gt; 引数は、このレンダリング時に使用する初期値を指定することができます &lt;code&gt;Field&lt;/code&gt; 結合していないで &lt;code&gt;Form&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="587dffd1ab2f5b3de25664661b90ed9ecc58c177" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;interpolate&lt;/code&gt; function supports dynamically populating a format string. The interpolation syntax is borrowed from Python, so the &lt;code&gt;interpolate&lt;/code&gt; function supports both positional and named interpolation:</source>
          <target state="translated">&lt;code&gt;interpolate&lt;/code&gt; 機能のサポートは、動的にフォーマット文字列を取り込みます。補間構文はPythonから借用されているため、関数 &lt;code&gt;interpolate&lt;/code&gt; は位置補間と名前付き補間の両方をサポートしています。</target>
        </trans-unit>
        <trans-unit id="4cf4709dabffeb2019d07cb0c69daafa4432f75f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;invalid_choice&lt;/code&gt; error message may contain &lt;code&gt;%(value)s&lt;/code&gt;, which will be replaced with the selected choice.</source>
          <target state="translated">&lt;code&gt;invalid_choice&lt;/code&gt; のエラーメッセージが含まれていてもよい &lt;code&gt;%(value)s&lt;/code&gt; 選択された選択肢で置き換えられます。</target>
        </trans-unit>
        <trans-unit id="57c7084a67dbad9e052011c25164acf97dc027ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;invalid_choice&lt;/code&gt; message may contain &lt;code&gt;%(value)s&lt;/code&gt; and the &lt;code&gt;invalid_pk_value&lt;/code&gt; message may contain &lt;code&gt;%(pk)s&lt;/code&gt;, which will be substituted by the appropriate values.</source>
          <target state="translated">&lt;code&gt;invalid_choice&lt;/code&gt; のメッセージを含んでいてもよい &lt;code&gt;%(value)s&lt;/code&gt; と &lt;code&gt;invalid_pk_value&lt;/code&gt; のメッセージが含まれていてもよい &lt;code&gt;%(pk)s&lt;/code&gt; 適切な値で置換されています。</target>
        </trans-unit>
        <trans-unit id="5a49d7a7899560ebdd1c858882275e30b825c080" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;iri_to_uri()&lt;/code&gt; function will not change ASCII characters that are otherwise permitted in a URL. So, for example, the character &amp;lsquo;%&amp;rsquo; is not further encoded when passed to &lt;code&gt;iri_to_uri()&lt;/code&gt;. This means you can pass a full URL to this function and it will not mess up the query string or anything like that.</source>
          <target state="translated">&lt;code&gt;iri_to_uri()&lt;/code&gt; 関数は、そうでない場合は、URLで許可されているASCII文字は変更されません。したがって、たとえば、文字 '％'は &lt;code&gt;iri_to_uri()&lt;/code&gt; に渡されるときにさらにエンコードされません。これは、この関数に完全なURLを渡すことができ、クエリ文字列などを台無しにしないことを意味します。</target>
        </trans-unit>
        <trans-unit id="9f3f432585755de56f959725bb5534e37beeec25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;is_dst&lt;/code&gt; parameter indicates whether or not &lt;code&gt;pytz&lt;/code&gt; should interpret nonexistent and ambiguous datetimes in daylight saving time. By default (when &lt;code&gt;is_dst=None&lt;/code&gt;), &lt;code&gt;pytz&lt;/code&gt; raises an exception for such datetimes.</source>
          <target state="translated">&lt;code&gt;is_dst&lt;/code&gt; パラメータがあるか否かを示す &lt;code&gt;pytz&lt;/code&gt; が夏時間に存在しないと曖昧な日付時刻を解釈すべきです。デフォルトでは（ &lt;code&gt;is_dst=None&lt;/code&gt; の場合）、 &lt;code&gt;pytz&lt;/code&gt; はそのような日時に対して例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="3a01196b9b7e6f3aeb0e6702cf8ee27bedf29d4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;is_dst&lt;/code&gt; parameter was added.</source>
          <target state="translated">&lt;code&gt;is_dst&lt;/code&gt; パラメータが追加されました。</target>
        </trans-unit>
        <trans-unit id="c27dd9e7df2b2bfc3889345674663ba735e58376" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;item&lt;/code&gt; attribute has been added for each URL to allow more flexible customization of the templates, such as &lt;a href=&quot;https://support.google.com/news/publisher/answer/74288?hl=en&quot;&gt;Google news sitemaps&lt;/a&gt;. Assuming Sitemap&amp;rsquo;s &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt; would return a list of items with &lt;code&gt;publication_data&lt;/code&gt; and a &lt;code&gt;tags&lt;/code&gt; field something like this would generate a Google News compatible sitemap:</source>
          <target state="translated">&lt;code&gt;item&lt;/code&gt; 属性は、次のような、テンプレートのより柔軟なカスタマイズを可能にするために、各URLのために追加された&lt;a href=&quot;https://support.google.com/news/publisher/answer/74288?hl=en&quot;&gt;Googleのニュースサイトマップ&lt;/a&gt;。サイトマップの&lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt;が、 &lt;code&gt;publication_data&lt;/code&gt; を含むアイテムのリストを返し、次のような &lt;code&gt;tags&lt;/code&gt; フィールドがGoogleニュースと互換性のあるサイトマップを生成するとします：</target>
        </trans-unit>
        <trans-unit id="8a0a788a7406145689351a5a3e04f81e423b8411" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;json_dumps_params&lt;/code&gt; parameter is a dictionary of keyword arguments to pass to the &lt;code&gt;json.dumps()&lt;/code&gt; call used to generate the response.</source>
          <target state="translated">&lt;code&gt;json_dumps_params&lt;/code&gt; に渡すキーワード引数の辞書にあるパラメータ &lt;code&gt;json.dumps()&lt;/code&gt; 応答を生成するために使用されるコール。</target>
        </trans-unit>
        <trans-unit id="a39ef318f4024f5c27e94d33225a4acc8c2ec8ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;json_encoder&lt;/code&gt; argument allows setting a custom JSON encoder for the JSON serialization that&amp;rsquo;s described in &lt;a href=&quot;#django.test.Client.post&quot;&gt;&lt;code&gt;post()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;json_encoder&lt;/code&gt; の引数はで説明していますJSONのシリアライズ用のカスタムJSONエンコーダを設定することができます&lt;a href=&quot;#django.test.Client.post&quot;&gt; &lt;code&gt;post()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4ddd0240f2daceba3ef04ed169e2e06287f05eeb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keep_lazy()&lt;/code&gt; decorator takes a number of extra arguments (&lt;code&gt;*args&lt;/code&gt;) specifying the type(s) that the original function can return. A common use case is to have functions that return text. For these, you can pass the &lt;code&gt;str&lt;/code&gt; type to &lt;code&gt;keep_lazy&lt;/code&gt; (or use the &lt;a href=&quot;#django.utils.functional.keep_lazy_text&quot;&gt;&lt;code&gt;keep_lazy_text()&lt;/code&gt;&lt;/a&gt; decorator described in the next section).</source>
          <target state="translated">&lt;code&gt;keep_lazy()&lt;/code&gt; デコレータは、余分な引数の数（とり &lt;code&gt;*args&lt;/code&gt; を元の関数を返すことができるというタイプ（複数可）を指定します）。一般的な使用例は、テキストを返す関数を持つことです。これらの場合、 &lt;code&gt;str&lt;/code&gt; タイプを &lt;code&gt;keep_lazy&lt;/code&gt; に渡すことができます（または次のセクションで説明する&lt;a href=&quot;#django.utils.functional.keep_lazy_text&quot;&gt; &lt;code&gt;keep_lazy_text()&lt;/code&gt; &lt;/a&gt;デコレータを使用します）。</target>
        </trans-unit>
        <trans-unit id="252e8d5a57a36564be0d0827fa704d817fa5b64f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key_prefix&lt;/code&gt; and &lt;code&gt;cache&lt;/code&gt; arguments may be specified together. The &lt;code&gt;key_prefix&lt;/code&gt; argument and the &lt;a href=&quot;../ref/settings#std:setting-CACHES-KEY_PREFIX&quot;&gt;&lt;code&gt;KEY_PREFIX&lt;/code&gt;&lt;/a&gt; specified under &lt;a href=&quot;../ref/settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; will be concatenated.</source>
          <target state="translated">&lt;code&gt;key_prefix&lt;/code&gt; と &lt;code&gt;cache&lt;/code&gt; の引数は一緒に指定することができます。 &lt;code&gt;key_prefix&lt;/code&gt; の引数と&lt;a href=&quot;../ref/settings#std:setting-CACHES-KEY_PREFIX&quot;&gt; &lt;code&gt;KEY_PREFIX&lt;/code&gt; &lt;/a&gt;の下に指定された&lt;a href=&quot;../ref/settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; &lt;/a&gt;連結されます。</target>
        </trans-unit>
        <trans-unit id="225fa21eb9d1495e7c23f035f2d34079ef9f8a54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kwargs&lt;/code&gt; argument allows you to pass additional arguments to the view function or method. See &lt;a href=&quot;../topics/http/urls#views-extra-options&quot;&gt;Passing extra options to view functions&lt;/a&gt; for an example.</source>
          <target state="translated">&lt;code&gt;kwargs&lt;/code&gt; からの引数は、ビュー関数やメソッドに追加の引数を渡すことができます。例については、&lt;a href=&quot;../topics/http/urls#views-extra-options&quot;&gt;関数を表示する&lt;/a&gt;ための追加オプションの受け渡しを参照してください。</target>
        </trans-unit>
        <trans-unit id="18c6fe01854e626fcf6c1a2bda2635e4aef6a398" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;label&lt;/code&gt; argument lets you specify the &amp;ldquo;human-friendly&amp;rdquo; label for this field. This is used when the &lt;code&gt;Field&lt;/code&gt; is displayed in a &lt;code&gt;Form&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;label&lt;/code&gt; 引数は、このフィールドは、「人に優しい」ラベルを指定できます。これは、 &lt;code&gt;Field&lt;/code&gt; が &lt;code&gt;Form&lt;/code&gt; 表示されるときに使用されます。</target>
        </trans-unit>
        <trans-unit id="4785fd2c6ffd98affefcf3ec0c072b753d2b0916" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;label_suffix&lt;/code&gt; argument lets you override the form&amp;rsquo;s &lt;a href=&quot;api#django.forms.Form.label_suffix&quot;&gt;&lt;code&gt;label_suffix&lt;/code&gt;&lt;/a&gt; on a per-field basis:</source>
          <target state="translated">&lt;code&gt;label_suffix&lt;/code&gt; の引数は、フォームのオーバーライドすることができます&lt;a href=&quot;api#django.forms.Form.label_suffix&quot;&gt; &lt;code&gt;label_suffix&lt;/code&gt; を&lt;/a&gt;フィールドごとに：</target>
        </trans-unit>
        <trans-unit id="f25b27e8fd89bfa03224a587de5043bc8f1e1530" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;language&lt;/code&gt; class attribute was added. In older versions, the behavior is the same as &lt;code&gt;language = settings.LANGUAGE_CODE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;language&lt;/code&gt; クラス属性が追加されました。古いバージョンでは、動作は &lt;code&gt;language = settings.LANGUAGE_CODE&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="34db368451dd7fad21778b0520e51dd205615b53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;link&lt;/code&gt; method/attribute can return either an absolute path (e.g. &lt;code&gt;&quot;/blog/&quot;&lt;/code&gt;) or a URL with the fully-qualified domain and protocol (e.g. &lt;code&gt;&quot;https://www.example.com/blog/&quot;&lt;/code&gt;). If &lt;code&gt;link&lt;/code&gt; doesn&amp;rsquo;t return the domain, the syndication framework will insert the domain of the current site, according to your &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID setting&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;link&lt;/code&gt; 方法/属性は絶対パス（例えばいずれかを返すことができます &lt;code&gt;&quot;/blog/&quot;&lt;/code&gt; 完全修飾ドメインおよびプロトコル（例えばと）またはURLを &lt;code&gt;&quot;https://www.example.com/blog/&quot;&lt;/code&gt; ）。 &lt;code&gt;link&lt;/code&gt; がドメインを返さない場合、シンジケーションフレームワークは、&lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt; &lt;code&gt;SITE_ID setting&lt;/code&gt; &lt;/a&gt;に従って、現在のサイトのドメインを挿入します。</target>
        </trans-unit>
        <trans-unit id="ff9d3c9e138b80d4d6861793c26daf9a17b6b6df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;localize&lt;/code&gt; argument enables the localization of form data input, as well as the rendered output.</source>
          <target state="translated">&lt;code&gt;localize&lt;/code&gt; 引数は、フォームデータ入力の局在、ならびにレンダリングされた出力を可能にします。</target>
        </trans-unit>
        <trans-unit id="e1aed5fb83c2813f14231b1281a9975bd26ed001" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;login_required&lt;/code&gt; decorator</source>
          <target state="translated">&lt;code&gt;login_required&lt;/code&gt; デコレータ</target>
        </trans-unit>
        <trans-unit id="8e95bd40db47cfc68c883889f009458f5d587a00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;login_required&lt;/code&gt; decorator does NOT check the &lt;code&gt;is_active&lt;/code&gt; flag on a user, but the default &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt; reject inactive users.</source>
          <target state="translated">&lt;code&gt;login_required&lt;/code&gt; デコレータはチェックしません &lt;code&gt;is_active&lt;/code&gt; ユーザーにフラグを、デフォルトの&lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; は、&lt;/a&gt;非アクティブなユーザーを拒否します。</target>
        </trans-unit>
        <trans-unit id="c85a785b111c688a0ca8db999db513587854b453" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lookup&lt;/code&gt; argument describes the relations to follow and works the same as the string based lookups passed to &lt;a href=&quot;#django.db.models.query.QuerySet.prefetch_related&quot;&gt;&lt;code&gt;prefetch_related()&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">&lt;code&gt;lookup&lt;/code&gt; 引数には従うべき関係を説明しに渡された文字列ベースの検索と同じように動作し&lt;a href=&quot;#django.db.models.query.QuerySet.prefetch_related&quot;&gt; &lt;code&gt;prefetch_related()&lt;/code&gt; &lt;/a&gt;。例えば：</target>
        </trans-unit>
        <trans-unit id="d362b35f063a2bad884f9c3ac0d597e6e1b44d0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lookup_allowed()&lt;/code&gt; method is given a lookup path from the query string (e.g. &lt;code&gt;'user__email'&lt;/code&gt;) and the corresponding value (e.g. &lt;code&gt;'user@example.com'&lt;/code&gt;), and returns a boolean indicating whether filtering the changelist&amp;rsquo;s &lt;code&gt;QuerySet&lt;/code&gt; using the parameters is permitted. If &lt;code&gt;lookup_allowed()&lt;/code&gt; returns &lt;code&gt;False&lt;/code&gt;, &lt;code&gt;DisallowedModelAdminLookup&lt;/code&gt; (subclass of &lt;a href=&quot;../../exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt;) is raised.</source>
          <target state="translated">&lt;code&gt;lookup_allowed()&lt;/code&gt; メソッドは、（例えば、クエリ文字列から検索パスが与えられ &lt;code&gt;'user__email'&lt;/code&gt; ）と対応する値（例えば、 &lt;code&gt;'user@example.com'&lt;/code&gt; チェンジのフィルタリングをするかどうかを示すブール値）、および戻り &lt;code&gt;QuerySet&lt;/code&gt; 許可されたパラメータを使用して。 &lt;code&gt;lookup_allowed()&lt;/code&gt; が &lt;code&gt;False&lt;/code&gt; を返す場合、 &lt;code&gt;DisallowedModelAdminLookup&lt;/code&gt; （&lt;a href=&quot;../../exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousOperation&lt;/code&gt; の&lt;/a&gt;サブクラス）が発生します。</target>
        </trans-unit>
        <trans-unit id="6c703f88a499c4f1a0d94ab8d30177d84112fd26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;make_published()&lt;/code&gt; action will only be available to users that pass the &lt;a href=&quot;index#django.contrib.admin.ModelAdmin.has_change_permission&quot;&gt;&lt;code&gt;ModelAdmin.has_change_permission()&lt;/code&gt;&lt;/a&gt; check.</source>
          <target state="translated">&lt;code&gt;make_published()&lt;/code&gt; アクションは、唯一合格し、ユーザーに利用できるようになります&lt;a href=&quot;index#django.contrib.admin.ModelAdmin.has_change_permission&quot;&gt; &lt;code&gt;ModelAdmin.has_change_permission()&lt;/code&gt; &lt;/a&gt;チェックを。</target>
        </trans-unit>
        <trans-unit id="d81a3d0a72e4a8994231c23a41c2af7be8cccd04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;makemessages&lt;/code&gt; command (and &lt;code&gt;compilemessages&lt;/code&gt; discussed later) use commands from the GNU gettext toolset: &lt;code&gt;xgettext&lt;/code&gt;, &lt;code&gt;msgfmt&lt;/code&gt;, &lt;code&gt;msgmerge&lt;/code&gt; and &lt;code&gt;msguniq&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;makemessages&lt;/code&gt; の節では、コマンド（及び &lt;code&gt;compilemessages&lt;/code&gt; は後述）GNU gettextのツールセットから使用コマンド： &lt;code&gt;xgettext&lt;/code&gt; 、 &lt;code&gt;msgfmt&lt;/code&gt; 、 &lt;code&gt;msgmerge&lt;/code&gt; と &lt;code&gt;msguniq&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="3cd5742b0c7f6b4a069a7b99288b0486c403076e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;manage_articles.html&lt;/code&gt; template might look like this:</source>
          <target state="translated">&lt;code&gt;manage_articles.html&lt;/code&gt; テンプレートは次のようになります。</target>
        </trans-unit>
        <trans-unit id="3357fbeed820dc154dc010ad25a9fc2a2439b44f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_error&lt;/code&gt; argument can be used to specify the maximum error measured in input pixels that is allowed in approximating the transformation. The default is 0.0 for exact calculations.</source>
          <target state="translated">&lt;code&gt;max_error&lt;/code&gt; の引数は、変換の近似で許可された入力ピクセルで測定された最大誤差を指定するために使用することができます。正確な計算のデフォルトは0.0です。</target>
        </trans-unit>
        <trans-unit id="81b860e95a6cba19059191b4316529dddbd101ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_length&lt;/code&gt; argument is passed along to &lt;a href=&quot;../../howto/custom-file-storage#django.core.files.storage.get_available_name&quot;&gt;&lt;code&gt;get_available_name()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;max_length&lt;/code&gt; 引数はに渡される&lt;a href=&quot;../../howto/custom-file-storage#django.core.files.storage.get_available_name&quot;&gt; &lt;code&gt;get_available_name()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1db244e5e1737559d41aa104eaa2d53accc34a6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_length&lt;/code&gt; error refers to the length of the filename. In the error message for that key, &lt;code&gt;%(max)d&lt;/code&gt; will be replaced with the maximum filename length and &lt;code&gt;%(length)d&lt;/code&gt; will be replaced with the current filename length.</source>
          <target state="translated">&lt;code&gt;max_length&lt;/code&gt; エラーは、ファイル名の長さを指します。そのキーのエラーメッセージでは、 &lt;code&gt;%(max)d&lt;/code&gt; はファイル名の最大長に置き換えられ、 &lt;code&gt;%(length)d&lt;/code&gt; は現在のファイル名の長さに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="38b8c41ad0043e98ff3bd637cdd34e060ed1354e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_length&lt;/code&gt; increased from 30 to 150 characters.</source>
          <target state="translated">&lt;code&gt;max_length&lt;/code&gt; 30〜150文字から増加しました。</target>
        </trans-unit>
        <trans-unit id="566d4e9464a6b9b8b3204978ca8957ed12f95a13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_length&lt;/code&gt; increased from 80 to 150 characters.</source>
          <target state="translated">&lt;code&gt;max_length&lt;/code&gt; 80〜150文字から増加しました。</target>
        </trans-unit>
        <trans-unit id="000930ed0c3d86899ddba4d3cc3d0d336d0066b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_length&lt;/code&gt; should be sufficient for many use cases. If you need a longer length, please use a &lt;a href=&quot;../../topics/auth/customizing#specifying-custom-user-model&quot;&gt;custom user model&lt;/a&gt;. If you use MySQL with the &lt;code&gt;utf8mb4&lt;/code&gt; encoding (recommended for proper Unicode support), specify at most &lt;code&gt;max_length=191&lt;/code&gt; because MySQL can only create unique indexes with 191 characters in that case by default.</source>
          <target state="translated">&lt;code&gt;max_length&lt;/code&gt; 多くのユースケースで十分です。もっと長い長さが必要な場合は、&lt;a href=&quot;../../topics/auth/customizing#specifying-custom-user-model&quot;&gt;カスタムユーザーモデル&lt;/a&gt;を使用してください。MySQLを &lt;code&gt;utf8mb4&lt;/code&gt; エンコーディングで使用する場合（適切なUnicodeサポートに推奨）、MySQLはデフォルトで191文字の一意のインデックスしか作成できないため、最大で &lt;code&gt;max_length=191&lt;/code&gt; を指定します。</target>
        </trans-unit>
        <trans-unit id="b9f19d8bb5bc9553686c3b103738e5b7e4d31b29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_num&lt;/code&gt; parameter to &lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt;&lt;code&gt;formset_factory()&lt;/code&gt;&lt;/a&gt; gives you the ability to limit the number of forms the formset will display:</source>
          <target state="translated">&lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt; &lt;code&gt;formset_factory()&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;max_num&lt;/code&gt; パラメータを使用すると、フォームセットが表示するフォームの数を制限できます。</target>
        </trans-unit>
        <trans-unit id="234094d3679ad6cfd4561b81d535c06f706c6336" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_value&lt;/code&gt; and &lt;code&gt;min_value&lt;/code&gt; error messages may contain &lt;code&gt;%(limit_value)s&lt;/code&gt;, which will be substituted by the appropriate limit.</source>
          <target state="translated">&lt;code&gt;max_value&lt;/code&gt; 及び &lt;code&gt;min_value&lt;/code&gt; エラーメッセージが含まれていてもよい &lt;code&gt;%(limit_value)s&lt;/code&gt; 適切な限界で置換されています。</target>
        </trans-unit>
        <trans-unit id="b8c8ae98f390477b1ceb6cf5bb642916cc37b74d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_value&lt;/code&gt; and &lt;code&gt;min_value&lt;/code&gt; error messages may contain &lt;code&gt;%(limit_value)s&lt;/code&gt;, which will be substituted by the appropriate limit. Similarly, the &lt;code&gt;max_digits&lt;/code&gt;, &lt;code&gt;max_decimal_places&lt;/code&gt; and &lt;code&gt;max_whole_digits&lt;/code&gt; error messages may contain &lt;code&gt;%(max)s&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;max_value&lt;/code&gt; 及び &lt;code&gt;min_value&lt;/code&gt; エラーメッセージが含まれていてもよい &lt;code&gt;%(limit_value)s&lt;/code&gt; 適切な限界で置換されています。同様に、 &lt;code&gt;max_digits&lt;/code&gt; 、 &lt;code&gt;max_decimal_places&lt;/code&gt; および &lt;code&gt;max_whole_digits&lt;/code&gt; エラーメッセージには、 &lt;code&gt;%(max)s&lt;/code&gt; が含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="878aa7191ff5f8f501bb1386bb56c2f4d33544c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;messages&lt;/code&gt; passed should be a dict containing the keys &lt;code&gt;missing_keys&lt;/code&gt; and/or &lt;code&gt;extra_keys&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;messages&lt;/code&gt; 渡されたキー含む辞書でなければなりません &lt;code&gt;missing_keys&lt;/code&gt; および/または &lt;code&gt;extra_keys&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="78ab0b073182bf0fe2d634292ea1516016036c3b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;my_handler&lt;/code&gt; function will only be called when an instance of &lt;code&gt;MyModel&lt;/code&gt; is saved.</source>
          <target state="translated">&lt;code&gt;my_handler&lt;/code&gt; ののインスタンスときに関数にのみ呼び出されます &lt;code&gt;MyModel&lt;/code&gt; 保存されます。</target>
        </trans-unit>
        <trans-unit id="8fc78c7b9ffa5d218bc0fefb36a5d9715f1d807f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;name_local&lt;/code&gt;, and &lt;code&gt;name_translated&lt;/code&gt; attributes of the dictionary contain the name of the language in English, in the language itself, and in your current active language respectively. The &lt;code&gt;bidi&lt;/code&gt; attribute is True only for bi-directional languages.</source>
          <target state="translated">辞書の &lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;name_local&lt;/code&gt; 、および &lt;code&gt;name_translated&lt;/code&gt; 属性には、英語、言語自体、および現在アクティブな言語の言語名がそれぞれ含まれています。 &lt;code&gt;bidi&lt;/code&gt; 属性は、双方向言語についても同様です。</target>
        </trans-unit>
        <trans-unit id="a39c83ed85984b6642543f740cdb410d3ca8d109" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name_snippet.html&lt;/code&gt; template:</source>
          <target state="translated">&lt;code&gt;name_snippet.html&lt;/code&gt; のテンプレート：</target>
        </trans-unit>
        <trans-unit id="e30f8a69eb295d4756927f614d2e23268324ff70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;needs_autoescape&lt;/code&gt; flag and the &lt;code&gt;autoescape&lt;/code&gt; keyword argument mean that our function will know whether automatic escaping is in effect when the filter is called. We use &lt;code&gt;autoescape&lt;/code&gt; to decide whether the input data needs to be passed through &lt;code&gt;django.utils.html.conditional_escape&lt;/code&gt; or not. (In the latter case, we use the identity function as the &amp;ldquo;escape&amp;rdquo; function.) The &lt;code&gt;conditional_escape()&lt;/code&gt; function is like &lt;code&gt;escape()&lt;/code&gt; except it only escapes input that is &lt;strong&gt;not&lt;/strong&gt; a &lt;code&gt;SafeData&lt;/code&gt; instance. If a &lt;code&gt;SafeData&lt;/code&gt; instance is passed to &lt;code&gt;conditional_escape()&lt;/code&gt;, the data is returned unchanged.</source>
          <target state="translated">&lt;code&gt;needs_autoescape&lt;/code&gt; のフラグと &lt;code&gt;autoescape&lt;/code&gt; のキーワード引数は、当社の機能はフィルタが呼び出されたときに自動エスケープが有効であるかどうかを知ることができますことを意味します。 &lt;code&gt;autoescape&lt;/code&gt; を使用して、入力データを &lt;code&gt;django.utils.html.conditional_escape&lt;/code&gt; を介して渡す必要があるかどうかを判断します。 （後者の場合、identity関数を「エスケープ」関数として使用します。） &lt;code&gt;conditional_escape()&lt;/code&gt; 関数は、 &lt;code&gt;SafeData&lt;/code&gt; インスタンスでは&lt;strong&gt;ない&lt;/strong&gt;入力のみをエスケープすることを除いて、 &lt;code&gt;escape()&lt;/code&gt; に似ています。場合 &lt;code&gt;SafeData&lt;/code&gt; のインスタンスが渡される &lt;code&gt;conditional_escape()&lt;/code&gt; 、データがそのまま返されます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="23762e1f473bb2f077c04a353c0d4c9e77960d15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngettext&lt;/code&gt; function provides an interface to pluralize words and phrases:</source>
          <target state="translated">&lt;code&gt;ngettext&lt;/code&gt; 関数は、単語やフレーズを複数化するためのインタフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="82871b39860f1fe7aa4c2e86b7d346c94e39fc59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;normalization&lt;/code&gt; and &lt;code&gt;cover_density&lt;/code&gt; parameters were added.</source>
          <target state="translated">&lt;code&gt;normalization&lt;/code&gt; と &lt;code&gt;cover_density&lt;/code&gt; パラメータを添加しました。</target>
        </trans-unit>
        <trans-unit id="aa751bcb056f41b353edca8b0355b0fe2ed86c67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;npgettext&lt;/code&gt; function also behaves like the Python variant (&lt;a href=&quot;../../ref/utils#django.utils.translation.npgettext&quot;&gt;&lt;code&gt;npgettext()&lt;/code&gt;&lt;/a&gt;), providing a &lt;strong&gt;pluralized&lt;/strong&gt; contextually translated word:</source>
          <target state="translated">&lt;code&gt;npgettext&lt;/code&gt; 機能はPythonの変異体（同じように動作し&lt;a href=&quot;../../ref/utils#django.utils.translation.npgettext&quot;&gt; &lt;code&gt;npgettext()&lt;/code&gt; &lt;/a&gt;提供）&lt;strong&gt;複数形&lt;/strong&gt;文脈訳語を：</target>
        </trans-unit>
        <trans-unit id="a22a490f2b2fd5278cb63bbbab5857207c62256f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;num_seg&lt;/code&gt; parameter is used only on PostGIS.</source>
          <target state="translated">&lt;code&gt;num_seg&lt;/code&gt; のパラメーターは、PostGISの上で使用されています。</target>
        </trans-unit>
        <trans-unit id="50dcf68eca8b70bab1d883b11415f436f951c004" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;obj&lt;/code&gt; argument passed to &lt;code&gt;InlineModelAdmin&lt;/code&gt; methods is the parent object being edited or &lt;code&gt;None&lt;/code&gt; when adding a new parent.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; に渡される引数 &lt;code&gt;InlineModelAdmin&lt;/code&gt; の方法は、親編集中のオブジェクトやある &lt;code&gt;None&lt;/code&gt; 新しい親を追加するとき。</target>
        </trans-unit>
        <trans-unit id="7fb5adb12d8f32f8446533c6a10bc5301f02c5cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;objs&lt;/code&gt; argument is a homogeneous iterable of objects (a &lt;code&gt;QuerySet&lt;/code&gt; or a list of model instances) to be deleted, and &lt;code&gt;request&lt;/code&gt; is the &lt;a href=&quot;../../request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;objs&lt;/code&gt; 引数は、オブジェクトの均質反復可能である（ &lt;code&gt;QuerySet&lt;/code&gt; 削除するまたはモデルインスタンスのリスト）、および &lt;code&gt;request&lt;/code&gt; ある&lt;a href=&quot;../../request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aa4756c7afef702a4b2b00842cf02717b53d9d99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ogrinspect&lt;/code&gt; management command will inspect the given OGR-compatible &lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt;&lt;code&gt;DataSource&lt;/code&gt;&lt;/a&gt; (e.g., a shapefile) and will output a GeoDjango model with the given model name. There&amp;rsquo;s a detailed example of using &lt;code&gt;ogrinspect&lt;/code&gt;&lt;a href=&quot;tutorial#ogrinspect-intro&quot;&gt;in the tutorial&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ogrinspect&lt;/code&gt; 管理コマンドは、指定されたOGR-互換検査し&lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt; &lt;code&gt;DataSource&lt;/code&gt; &lt;/a&gt;与えられたモデル名でGeoDjangoモデル（例えば、シェープファイル）と意志出力を。&lt;a href=&quot;tutorial#ogrinspect-intro&quot;&gt;チュートリアルに&lt;/a&gt; &lt;code&gt;ogrinspect&lt;/code&gt; の使用の詳細な例があります。</target>
        </trans-unit>
        <trans-unit id="21bd259c30243667bafe786caf1a01669ddaa750" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;only()&lt;/code&gt; method is more or less the opposite of &lt;a href=&quot;#django.db.models.query.QuerySet.defer&quot;&gt;&lt;code&gt;defer()&lt;/code&gt;&lt;/a&gt;. You call it with the fields that should &lt;em&gt;not&lt;/em&gt; be deferred when retrieving a model. If you have a model where almost all the fields need to be deferred, using &lt;code&gt;only()&lt;/code&gt; to specify the complementary set of fields can result in simpler code.</source>
          <target state="translated">&lt;code&gt;only()&lt;/code&gt; メソッドは、多少の反対である&lt;a href=&quot;#django.db.models.query.QuerySet.defer&quot;&gt; &lt;code&gt;defer()&lt;/code&gt; &lt;/a&gt;。モデルの取得時に延期してはなら&lt;em&gt;ない&lt;/em&gt;フィールドを使用して呼び出します。ほとんどすべてのフィールドを遅延させる必要があるモデルがある場合、 &lt;code&gt;only()&lt;/code&gt; を使用して補完的なフィールドのセットを指定すると、コードが単純になります。</target>
        </trans-unit>
        <trans-unit id="a2e6ddd396be002a5c5f76973498518725d44e1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;order_by&lt;/code&gt; argument accepts a sequence of expressions on which you can call &lt;a href=&quot;#django.db.models.Expression.asc&quot;&gt;&lt;code&gt;asc()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.Expression.desc&quot;&gt;&lt;code&gt;desc()&lt;/code&gt;&lt;/a&gt;. The ordering controls the order in which the expression is applied. For example, if you sum over the rows in a partition, the first result is the value of the first row, the second is the sum of first and second row.</source>
          <target state="translated">&lt;code&gt;order_by&lt;/code&gt; 引数は、呼び出すことができた上式の列受け付け&lt;a href=&quot;#django.db.models.Expression.asc&quot;&gt; &lt;code&gt;asc()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#django.db.models.Expression.desc&quot;&gt; &lt;code&gt;desc()&lt;/code&gt; &lt;/a&gt;。順序は、式が適用される順序を制御します。たとえば、パーティション内の行を合計すると、最初の結果は最初の行の値、2番目の結果は最初と2番目の行の合計になります。</target>
        </trans-unit>
        <trans-unit id="e7720641bc935c5b5682ec5d26004fb5cc63958c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;output_field&lt;/code&gt; argument requires a model field instance, like &lt;code&gt;IntegerField()&lt;/code&gt; or &lt;code&gt;BooleanField()&lt;/code&gt;, into which Django will load the value after it&amp;rsquo;s retrieved from the database. Usually no arguments are needed when instantiating the model field as any arguments relating to data validation (&lt;code&gt;max_length&lt;/code&gt;, &lt;code&gt;max_digits&lt;/code&gt;, etc.) will not be enforced on the expression&amp;rsquo;s output value.</source>
          <target state="translated">&lt;code&gt;output_field&lt;/code&gt; 引数は以下のように、モデルフィールドのインスタンスが必要 &lt;code&gt;IntegerField()&lt;/code&gt; または &lt;code&gt;BooleanField()&lt;/code&gt; がデータベースから取り出さだ後Djangoは値をロードするに、。データフィールドの検証に関連する引数（ &lt;code&gt;max_length&lt;/code&gt; 、 &lt;code&gt;max_digits&lt;/code&gt; など）は式の出力値に適用されないため、通常はモデルフィールドをインスタンス化するときに引数は必要ありません。</target>
        </trans-unit>
        <trans-unit id="b232e0558b7259d8092426da3013202cc8011dd4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;output_field&lt;/code&gt; argument should be a model field instance, like &lt;code&gt;IntegerField()&lt;/code&gt; or &lt;code&gt;BooleanField()&lt;/code&gt;, into which Django will load the value after it&amp;rsquo;s retrieved from the database. Usually no arguments are needed when instantiating the model field as any arguments relating to data validation (&lt;code&gt;max_length&lt;/code&gt;, &lt;code&gt;max_digits&lt;/code&gt;, etc.) will not be enforced on the expression&amp;rsquo;s output value.</source>
          <target state="translated">&lt;code&gt;output_field&lt;/code&gt; 引数は以下のように、モデルフィールドのインスタンスでなければならない &lt;code&gt;IntegerField()&lt;/code&gt; または &lt;code&gt;BooleanField()&lt;/code&gt; がデータベースから取り出さだ後Djangoは値をロードするに、。データフィールドの検証に関連する引数（ &lt;code&gt;max_length&lt;/code&gt; 、 &lt;code&gt;max_digits&lt;/code&gt; など）は式の出力値に適用されないため、通常はモデルフィールドをインスタンス化するときに引数は必要ありません。</target>
        </trans-unit>
        <trans-unit id="4a820584462ac3c5a9f86233924de726affde930" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;output_field&lt;/code&gt; is specified either as an argument or by the expression.</source>
          <target state="translated">&lt;code&gt;output_field&lt;/code&gt; 引数としてまたは式のいずれかによって指定されています。</target>
        </trans-unit>
        <trans-unit id="0def76be73374c0cd8e50f1e57b16a21b1d75371" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pages_per_range&lt;/code&gt; argument takes a positive integer.</source>
          <target state="translated">&lt;code&gt;pages_per_range&lt;/code&gt; の引数が正の整数をとります。</target>
        </trans-unit>
        <trans-unit id="1c79e0fc28f032c53c4ac9bdd58bb7b5faf90de2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;paginate_by&lt;/code&gt; is deliberately small in the example so you don&amp;rsquo;t have to create lots of books to see the pagination working! Here&amp;rsquo;s the template you&amp;rsquo;d want to use:</source>
          <target state="translated">この例では &lt;code&gt;paginate_by&lt;/code&gt; は意図的に小さくなっているので、ページネーションを機能させるために多くの本を作成する必要はありません。使用するテンプレートは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="908ac429deefd097084c4e466f252fdc397c2dbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;partition_by&lt;/code&gt; argument is a list of expressions (column names should be wrapped in an &lt;code&gt;F&lt;/code&gt;-object) that control the partitioning of the rows. Partitioning narrows which rows are used to compute the result set.</source>
          <target state="translated">&lt;code&gt;partition_by&lt;/code&gt; の引数は式のリスト（列名がで包まれるべきである &lt;code&gt;F&lt;/code&gt; の -object）そのコントロールの行のパーティショニング。パーティション化により、結果セットの計算に使用される行が絞り込まれます。</target>
        </trans-unit>
        <trans-unit id="7ddc038f575b9765382fff6d78aa5373cd0a39f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;password&lt;/code&gt; parameter must be a string or bytes if not &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;password&lt;/code&gt; パラメータは文字列またはバイトの場合であってはならないこと &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0f964493bc5e4037b14edc15f6a49e7e3971493" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;password_list_path&lt;/code&gt; can be set to the path of a custom file of common passwords. This file should contain one lowercase password per line and may be plain text or gzipped.</source>
          <target state="translated">&lt;code&gt;password_list_path&lt;/code&gt; は、共通のパスワードのカスタムファイルのパスに設定することができます。このファイルには、1行に1つの小文字のパスワードが含まれている必要があり、プレーンテキストまたはgzip圧縮されている場合があります。</target>
        </trans-unit>
        <trans-unit id="ea681148df1d1119c67ee6b0965de7063d3232c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pdb&lt;/code&gt; argument was added.</source>
          <target state="translated">&lt;code&gt;pdb&lt;/code&gt; 引数が追加されました。</target>
        </trans-unit>
        <trans-unit id="92786737258fb408a52461d62987979ed03113f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;permission_required&lt;/code&gt; decorator</source>
          <target state="translated">&lt;code&gt;permission_required&lt;/code&gt; デコレータ</target>
        </trans-unit>
        <trans-unit id="662367f8885b5fb44c88c9ff364921b11bc24db7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pgettext&lt;/code&gt; function behaves like the Python variant (&lt;a href=&quot;../../ref/utils#django.utils.translation.pgettext&quot;&gt;&lt;code&gt;pgettext()&lt;/code&gt;&lt;/a&gt;), providing a contextually translated word:</source>
          <target state="translated">&lt;code&gt;pgettext&lt;/code&gt; Pythonの変異体（のような関数の振る舞い&lt;a href=&quot;../../ref/utils#django.utils.translation.pgettext&quot;&gt; &lt;code&gt;pgettext()&lt;/code&gt; &lt;/a&gt;コンテキスト訳語を提供します）。</target>
        </trans-unit>
        <trans-unit id="0199f1bc48ca5d452aaafa6d4f2e533a895a42a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pk&lt;/code&gt; lookup shortcut</source>
          <target state="translated">&lt;code&gt;pk&lt;/code&gt; 検索ショートカット</target>
        </trans-unit>
        <trans-unit id="78a45ade1d3a763560883ef58e91836414aa09e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pk&lt;/code&gt; property</source>
          <target state="translated">&lt;code&gt;pk&lt;/code&gt; プロパティ</target>
        </trans-unit>
        <trans-unit id="c417e01b62b2bbcf06892051d44feceabd6b1664" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pluralidx&lt;/code&gt; function works in a similar way to the &lt;a href=&quot;../../ref/templates/builtins#std:templatefilter-pluralize&quot;&gt;&lt;code&gt;pluralize&lt;/code&gt;&lt;/a&gt; template filter, determining if a given &lt;code&gt;count&lt;/code&gt; should use a plural form of a word or not:</source>
          <target state="translated">&lt;code&gt;pluralidx&lt;/code&gt; 機能は、と同様に動作する&lt;a href=&quot;../../ref/templates/builtins#std:templatefilter-pluralize&quot;&gt; &lt;code&gt;pluralize&lt;/code&gt; &lt;/a&gt;与えられたかどうかを判断する、テンプレートフィルタ &lt;code&gt;count&lt;/code&gt; 単語の複数形を使用するか、またはべきではありません。</target>
        </trans-unit>
        <trans-unit id="db12d3dd2d41422b03fed5d5a4a7ef1323708e49" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pnt_wkt&lt;/code&gt; string represents the point at -95.3385 degrees longitude, 29.7245 degrees latitude. The geometry is in a format known as Well Known Text (WKT), a standard issued by the Open Geospatial Consortium (OGC). &lt;a href=&quot;#id14&quot; id=&quot;id8&quot;&gt;[4]&lt;/a&gt; Import the &lt;code&gt;WorldBorder&lt;/code&gt; model, and perform a &lt;code&gt;contains&lt;/code&gt; lookup using the &lt;code&gt;pnt_wkt&lt;/code&gt; as the parameter:</source>
          <target state="translated">&lt;code&gt;pnt_wkt&lt;/code&gt; の文字列は、-95.3385度経度、29.7245度緯度点を表します。ジオメトリは、Open Geospatial Consortium（OGC）が発行した標準であるWell Known Text（WKT）として知られているフォーマットです。&lt;a href=&quot;#id14&quot; id=&quot;id8&quot;&gt;[4]&lt;/a&gt;インポート &lt;code&gt;WorldBorder&lt;/code&gt; のモデル、及び実行 &lt;code&gt;contains&lt;/code&gt; 用いてルックアップ &lt;code&gt;pnt_wkt&lt;/code&gt; をパラメータとして。</target>
        </trans-unit>
        <trans-unit id="ba11aa480bc4f431b6690ba2244d48b3f4490969" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;polls&lt;/code&gt; directory could now be copied into a new Django project and immediately reused. It&amp;rsquo;s not quite ready to be published though. For that, we need to package the app to make it easy for others to install.</source>
          <target state="translated">&lt;code&gt;polls&lt;/code&gt; ディレクトリは、新しいDjangoのプロジェクトにコピーすると、すぐに再利用することができます。まだ公開の準備が整っていません。そのためには、他の人が簡単にインストールできるようにアプリをパッケージ化する必要があります。</target>
        </trans-unit>
        <trans-unit id="b7d99da7c9780a0906c91344bb941135267b5544" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;precision&lt;/code&gt; keyword argument controls the number of characters in the result.</source>
          <target state="translated">&lt;code&gt;precision&lt;/code&gt; キーワード引数は、結果の文字数を制御します。</target>
        </trans-unit>
        <trans-unit id="e1ea804db691af945112079154b5764e60f20efb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;preserve_default&lt;/code&gt; argument indicates whether the field&amp;rsquo;s default value is permanent and should be baked into the project state (&lt;code&gt;True&lt;/code&gt;), or if it is temporary and just for this migration (&lt;code&gt;False&lt;/code&gt;) - usually because the migration is adding a non-nullable field to a table and needs a default value to put into existing rows. It does not affect the behavior of setting defaults in the database directly - Django never sets database defaults and always applies them in the Django ORM code.</source>
          <target state="translated">&lt;code&gt;preserve_default&lt;/code&gt; の引数には、フィールドのデフォルト値は永続的であるとプロジェクトの状態（に焼かれるかどうかを示す &lt;code&gt;True&lt;/code&gt; ）、またはそれは一時的とちょうどこの移行のために（ある場合 &lt;code&gt;False&lt;/code&gt; ） -移行は、非NULL可能フィールドを追加して、通常ので、テーブルと既存の行に配置するデフォルト値が必要です。データベースにデフォルトを直接設定する動作には影響しません-Djangoはデータベースのデフォルトを設定することはなく、常にDjango ORMコードに適用します。</target>
        </trans-unit>
        <trans-unit id="f50140583853b168e3af2e589a1ac8cfaabbdd88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;preserve_default&lt;/code&gt; argument indicates whether the field&amp;rsquo;s default value is permanent and should be baked into the project state (&lt;code&gt;True&lt;/code&gt;), or if it is temporary and just for this migration (&lt;code&gt;False&lt;/code&gt;) - usually because the migration is altering a nullable field to a non-nullable one and needs a default value to put into existing rows. It does not affect the behavior of setting defaults in the database directly - Django never sets database defaults and always applies them in the Django ORM code.</source>
          <target state="translated">&lt;code&gt;preserve_default&lt;/code&gt; の引数には、フィールドのデフォルト値は永続的であるとプロジェクトの状態（に焼かれるかどうかを示す &lt;code&gt;True&lt;/code&gt; ）、または、それは一時的な、ちょうどこの移行のために（ある場合 &lt;code&gt;False&lt;/code&gt; ） -移行は非にNULL可能フィールドを変更している通常ので、 null可能で、既存の行に配置するデフォルト値が必要です。データベースにデフォルトを直接設定する動作には影響しません-Djangoはデータベースのデフォルトを設定することはなく、常にDjango ORMコードに適用します。</target>
        </trans-unit>
        <trans-unit id="a86bbc728df900d48f3b8806a68bdf90061f7dd3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;primary_key&lt;/code&gt; argument isn&amp;rsquo;t supported and will raise an error if used.</source>
          <target state="translated">&lt;code&gt;primary_key&lt;/code&gt; 引数がサポートされていないと使用した場合、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="5a70ceae9339dfbf8cb2eab4476e20c3f0e240e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;psycopg2&lt;/code&gt; Python module provides the interface between Python and the PostgreSQL database. &lt;code&gt;psycopg2&lt;/code&gt; can be installed via pip within your Python virtual environment:</source>
          <target state="translated">&lt;code&gt;psycopg2&lt;/code&gt; Pythonモジュールは、PythonとPostgreSQLデータベースとの間のインタフェースを提供します。 &lt;code&gt;psycopg2&lt;/code&gt; は、Python仮想環境内のpipを介してインストールできます。</target>
        </trans-unit>
        <trans-unit id="324afab94236c878328b0cdcc39e3464b750c74f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;psycopg2&lt;/code&gt; Python module provides the interface between Python and the PostgreSQL database. Download the latest &lt;a href=&quot;http://www.stickpeople.com/projects/python/win-psycopg/&quot;&gt;Windows installer&lt;/a&gt; for your version of Python and PostgreSQL and run using the default settings. &lt;a href=&quot;#id28&quot; id=&quot;id24&quot;&gt;[2]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;psycopg2&lt;/code&gt; Pythonモジュールは、PythonとPostgreSQLデータベースとの間のインタフェースを提供します。PythonとPostgreSQLのバージョンに&lt;a href=&quot;http://www.stickpeople.com/projects/python/win-psycopg/&quot;&gt;対応&lt;/a&gt;する最新のWindowsインストーラーをダウンロードし、デフォルト設定を使用して実行します。&lt;a href=&quot;#id28&quot; id=&quot;id24&quot;&gt;[2]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="76c3cf9b5782d05ce232b218d9c871239796da77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;psycopg2&lt;/code&gt; Windows installers are packaged and maintained by &lt;a href=&quot;http://www.stickpeople.com/projects/python/win-psycopg/&quot;&gt;Jason Erickson&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;psycopg2&lt;/code&gt; のWindowsインストーラは、パッケージとによって維持されている&lt;a href=&quot;http://www.stickpeople.com/projects/python/win-psycopg/&quot;&gt;ジェイソン・エリクソン&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="419ade80a1087cdb1b0f4eaeff16662aa73ba922" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pytz.AmbiguousTimeError&lt;/code&gt; exception is raised if you try to make &lt;code&gt;value&lt;/code&gt; aware during a DST transition where the same time occurs twice (when reverting from DST). Setting &lt;code&gt;is_dst&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; will avoid the exception by choosing if the time is pre-transition or post-transition respectively.</source>
          <target state="translated">&lt;code&gt;pytz.AmbiguousTimeError&lt;/code&gt; のあなたが作るしようとした場合に例外が発生し &lt;code&gt;value&lt;/code&gt; （DSTからの復帰時に）同じ時間に2回出現するDSTの移行時に注意してください。 &lt;code&gt;is_dst&lt;/code&gt; を &lt;code&gt;True&lt;/code&gt; または &lt;code&gt;False&lt;/code&gt; に設定すると、時間が遷移前か遷移後かをそれぞれ選択して、例外を回避します。</target>
        </trans-unit>
        <trans-unit id="f294115945f3f61648587916dfb0117ae68e9038" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pytz.NonExistentTimeError&lt;/code&gt; exception is raised if you try to make &lt;code&gt;value&lt;/code&gt; aware during a DST transition such that the time never occurred. For example, if the 2:00 hour is skipped during a DST transition, trying to make 2:30 aware in that time zone will raise an exception. To avoid that you can use &lt;code&gt;is_dst&lt;/code&gt; to specify how &lt;code&gt;make_aware()&lt;/code&gt; should interpret such a nonexistent time. If &lt;code&gt;is_dst=True&lt;/code&gt; then the above time would be interpreted as 2:30 DST time (equivalent to 1:30 local time). Conversely, if &lt;code&gt;is_dst=False&lt;/code&gt; the time would be interpreted as 2:30 standard time (equivalent to 3:30 local time).</source>
          <target state="translated">&lt;code&gt;pytz.NonExistentTimeError&lt;/code&gt; のあなたが作るしようとする場合は、例外が発生し &lt;code&gt;value&lt;/code&gt; 、時間が発生したことがないよう、DSTの移行時に注意してください。たとえば、DSTの移行中に2:00時間がスキップされた場合、そのタイムゾーンで2:30を認識しようとすると、例外が発生します。 &lt;code&gt;is_dst&lt;/code&gt; を使用して、存在しない時間を &lt;code&gt;make_aware()&lt;/code&gt; がどのように解釈するかを指定することを回避できます。場合 &lt;code&gt;is_dst=True&lt;/code&gt; を上記時間2:30 DST時間（午前1時30分現地時間に相当する）として解釈されます。逆に、 &lt;code&gt;is_dst=False&lt;/code&gt; の場合、時間は2:30標準時間（3:30現地時間に相当）として解釈されます。</target>
        </trans-unit>
        <trans-unit id="376b3d869a4e6bad90a52375d74b366313f9300f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;query&lt;/code&gt; attribute is an opaque object. It represents the internals of the query construction and is not part of the public API. However, it is safe (and fully supported) to pickle and unpickle the attribute&amp;rsquo;s contents as described here.</source>
          <target state="translated">&lt;code&gt;query&lt;/code&gt; 属性が不透明なオブジェクトです。これはクエリ構築の内部を表しており、パブリックAPIの一部ではありません。ただし、ここで説明するように、属性のコンテンツをピクルスにしてアンピクルすることは安全です（完全にサポートされています）。</target>
        </trans-unit>
        <trans-unit id="9b6ee9bb71833cdd1eb6d40145803da310d91180" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;query&lt;/code&gt; parameter to &lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; exists so that specialized query subclasses can reconstruct internal query state. The value of the parameter is an opaque representation of that query state and is not part of a public API.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;への &lt;code&gt;query&lt;/code&gt; パラメータは、特殊なクエリサブクラスが内部クエリ状態を再構築できるように存在します。パラメータの値は、そのクエリ状態の不透明な表現であり、パブリックAPIの一部ではありません。</target>
        </trans-unit>
        <trans-unit id="91e0942173f21d9137489fb68a0cfa2c7a57c993" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;query&lt;/code&gt; parameter to &lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; exists so that specialized query subclasses can reconstruct internal query state. The value of the parameter is an opaque representation of that query state and is not part of a public API. To put it another way: if you need to ask, you don&amp;rsquo;t need to use it.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;への &lt;code&gt;query&lt;/code&gt; パラメータが存在するため、特殊なクエリサブクラスが内部クエリ状態を再構築できます。パラメータの値はそのクエリ状態の不透明な表現であり、パブリックAPIの一部ではありません。別の言い方をすれば、質問する必要がある場合、それを使用する必要はありません。</target>
        </trans-unit>
        <trans-unit id="4187b29ad8e96eee30e6834052097b6ccccc21f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;queryset&lt;/code&gt; argument supplies a base &lt;code&gt;QuerySet&lt;/code&gt; for the given lookup. This is useful to further filter down the prefetch operation, or to call &lt;a href=&quot;#django.db.models.query.QuerySet.select_related&quot;&gt;&lt;code&gt;select_related()&lt;/code&gt;&lt;/a&gt; from the prefetched relation, hence reducing the number of queries even further:</source>
          <target state="translated">&lt;code&gt;queryset&lt;/code&gt; 引数用品ベース &lt;code&gt;QuerySet&lt;/code&gt; 指定の照合のために。これは、プリフェッチ操作をさらにフィルタリングするか、プリフェッチされたリレーションから&lt;a href=&quot;#django.db.models.query.QuerySet.select_related&quot;&gt; &lt;code&gt;select_related()&lt;/code&gt; &lt;/a&gt;を呼び出すのに役立ち、クエリの数をさらに減らします。</target>
        </trans-unit>
        <trans-unit id="4f3a8438cf58cbfb64b1b3f08ca2b71cb13bfdb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;question_id=34&lt;/code&gt; part comes from &lt;code&gt;&amp;lt;int:question_id&amp;gt;&lt;/code&gt;. Using angle brackets &amp;ldquo;captures&amp;rdquo; part of the URL and sends it as a keyword argument to the view function. The &lt;code&gt;:question_id&amp;gt;&lt;/code&gt; part of the string defines the name that will be used to identify the matched pattern, and the &lt;code&gt;&amp;lt;int:&lt;/code&gt; part is a converter that determines what patterns should match this part of the URL path.</source>
          <target state="translated">&lt;code&gt;question_id=34&lt;/code&gt; の部分は、から来ている &lt;code&gt;&amp;lt;int:question_id&amp;gt;&lt;/code&gt; 。山括弧を使用すると、URLの一部が「キャプチャ」され、キーワード引数としてビュー関数に送信されます。文字列の &lt;code&gt;:question_id&amp;gt;&lt;/code&gt; 部分は、一致したパターンを識別するために使用される名前を定義し、 &lt;code&gt;&amp;lt;int:&lt;/code&gt; 部分は、URLパスのこの部分に一致するパターンを決定するコンバーターです。</target>
        </trans-unit>
        <trans-unit id="18d8c0512abe38d2e5523ff529ee12e64ec3684b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;raise_request_exception&lt;/code&gt; argument allows controlling whether or not exceptions raised during the request should also be raised in the test. Defaults to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;raise_request_exception&lt;/code&gt; の引数は、要求時に発生した例外は、テストで提起する必要があるか否かを制御できます。デフォルトは &lt;code&gt;True&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="df75973272b881c9b14f0bc94612349a95b897d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;raise_request_exception&lt;/code&gt; argument was added.</source>
          <target state="translated">&lt;code&gt;raise_request_exception&lt;/code&gt; の引数が追加されました。</target>
        </trans-unit>
        <trans-unit id="3a176926aa601db19f5e02852a6bba299fb7ed14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;raw()&lt;/code&gt; manager method can be used to perform raw SQL queries that return model instances:</source>
          <target state="translated">&lt;code&gt;raw()&lt;/code&gt; 管理方法は、生のSQLクエリを実行するために使用することができる戻りモデルインスタンスその：</target>
        </trans-unit>
        <trans-unit id="ed06211a3b65df116099255fec22c89f9de1361a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;raw_id_fields&lt;/code&gt;&lt;code&gt;Input&lt;/code&gt; widget should contain a primary key if the field is a &lt;code&gt;ForeignKey&lt;/code&gt; or a comma separated list of values if the field is a &lt;code&gt;ManyToManyField&lt;/code&gt;. The &lt;code&gt;raw_id_fields&lt;/code&gt; widget shows a magnifying glass button next to the field which allows users to search for and select a value:</source>
          <target state="translated">&lt;code&gt;raw_id_fields&lt;/code&gt; &lt;code&gt;Input&lt;/code&gt; フィールドがされている場合、ウィジェットは、主キーが含まれている必要があり &lt;code&gt;ForeignKey&lt;/code&gt; のフィールドがある場合はコンマは値のリストを区切り &lt;code&gt;ManyToManyField&lt;/code&gt; 。 &lt;code&gt;raw_id_fields&lt;/code&gt; を示す次のユーザーが検索して値を選択することを可能にするフィールドの虫眼鏡ボタンをウィジェット。</target>
        </trans-unit>
        <trans-unit id="27407741a7f27e2ad1d8516c050756bde3569ea3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;receiver&lt;/code&gt; argument indicates the registered receiver to disconnect. It may be &lt;code&gt;None&lt;/code&gt; if &lt;code&gt;dispatch_uid&lt;/code&gt; is used to identify the receiver.</source>
          <target state="translated">&lt;code&gt;receiver&lt;/code&gt; 引数には、切断に登録された受信機を示しています。 &lt;code&gt;dispatch_uid&lt;/code&gt; を使用して受信者を識別する場合は、 &lt;code&gt;None&lt;/code&gt; になることがあります。</target>
        </trans-unit>
        <trans-unit id="41c1e031005fd54af0c3ffd9391afb7f0f625916" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;register&lt;/code&gt; decorator</source>
          <target state="translated">&lt;code&gt;register&lt;/code&gt; デコレータ</target>
        </trans-unit>
        <trans-unit id="b90d861869494c5a717ef5ecdbadcc025cba650d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;remove()&lt;/code&gt; call will bulk delete the specified model objects:</source>
          <target state="translated">&lt;code&gt;remove()&lt;/code&gt; 呼び出しの意志バルクは、指定されたモデルオブジェクトを削除します。</target>
        </trans-unit>
        <trans-unit id="b61a58bd7de2b4b09d14b10310e7a98d489eb0d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;render()&lt;/code&gt; method is where the work actually happens.</source>
          <target state="translated">&lt;code&gt;render()&lt;/code&gt; 仕事が実際に起こるところ方法があります。</target>
        </trans-unit>
        <trans-unit id="5481e089a3dd7f85ac82aa08e12f3199e2773014" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reporter_class&lt;/code&gt; argument of &lt;code&gt;AdminEmailHandler&lt;/code&gt; allows providing an &lt;code&gt;django.views.debug.ExceptionReporter&lt;/code&gt; subclass to customize the traceback text sent in the email body. You provide a string import path to the class you wish to use, like this:</source>
          <target state="translated">&lt;code&gt;AdminEmailHandler&lt;/code&gt; の &lt;code&gt;reporter_class&lt;/code&gt; 引数により、 &lt;code&gt;django.views.debug.ExceptionReporter&lt;/code&gt; サブクラスを提供して、メール本文で送信されるトレースバックテキストをカスタマイズできます。次のように、使用するクラスへの文字列インポートパスを指定します。</target>
        </trans-unit>
        <trans-unit id="c98204d217de5dec53fe323049139b1dff3e045b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reporter_class&lt;/code&gt; argument was added.</source>
          <target state="translated">&lt;code&gt;reporter_class&lt;/code&gt; の引数が追加されました。</target>
        </trans-unit>
        <trans-unit id="bc172fc4506c4abd2701a5af76769c198b47ca27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;request&lt;/code&gt; argument was added. Support for method overrides that don&amp;rsquo;t accept it will be removed in Django 3.1.</source>
          <target state="translated">&lt;code&gt;request&lt;/code&gt; 引数が追加されました。受け入れないメソッドのオーバーライドのサポートは、Django 3.1で削除されます。</target>
        </trans-unit>
        <trans-unit id="d05ea9ea6363852c86e7305c9669d9457e930da1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reset_url_token&lt;/code&gt; class attribute was added.</source>
          <target state="translated">&lt;code&gt;reset_url_token&lt;/code&gt; クラス属性が追加されました。</target>
        </trans-unit>
        <trans-unit id="3b8025c9e9b225729b7efa746ce7f8f47fa344d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;resolve()&lt;/code&gt; function can be used for resolving URL paths to the corresponding view functions. It has the following signature:</source>
          <target state="translated">&lt;code&gt;resolve()&lt;/code&gt; 関数は、対応するビュー関数にURLパスを解決するために使用することができます。次の署名があります。</target>
        </trans-unit>
        <trans-unit id="1d4f0ef847bbd128998ea273876966dbd7fe22e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;returncode&lt;/code&gt; argument was added.</source>
          <target state="translated">&lt;code&gt;returncode&lt;/code&gt; 引数が追加されました。</target>
        </trans-unit>
        <trans-unit id="fe878d4c5f08c7c10265e3c6922b51dabc1d76ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reverse()&lt;/code&gt; function can reverse a large variety of regular expression patterns for URLs, but not every possible one. The main restriction at the moment is that the pattern cannot contain alternative choices using the vertical bar (&lt;code&gt;&quot;|&quot;&lt;/code&gt;) character. You can quite happily use such patterns for matching against incoming URLs and sending them off to views, but you cannot reverse such patterns.</source>
          <target state="translated">&lt;code&gt;reverse()&lt;/code&gt; 関数は、URLの正規表現パターンの多種多様な逆転はなく、全ての可能な1できます。現時点での主な制限は、垂直バー（ &lt;code&gt;&quot;|&quot;&lt;/code&gt; ）文字を使用した代替選択肢をパターンに含めることができないことです。このようなパターンを使用して、着信URLと照合し、ビューに送信することができますが、そのようなパターンを元に戻すことはできません。</target>
        </trans-unit>
        <trans-unit id="31ea67993087a3395504efc2bf3bfd3f2f1b65e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reverse_code&lt;/code&gt; argument is called when unapplying migrations. This callable should undo what is done in the &lt;code&gt;code&lt;/code&gt; callable so that the migration is reversible.</source>
          <target state="translated">&lt;code&gt;reverse_code&lt;/code&gt; のマイグレーションの適用を解除する際に、引数が呼び出されます。この呼び出し可能オブジェクトは、 &lt;code&gt;code&lt;/code&gt; 呼び出し可能内で行われた処理を取り消して、移行を元に戻せるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="6f8348fd69b2bb25a355597f2625ccfe079180e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reverse_code&lt;/code&gt; argument is called when unapplying migrations. This callable should undo what is done in the &lt;code&gt;code&lt;/code&gt; callable so that the migration is reversible. If &lt;code&gt;reverse_code&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; (the default), the &lt;code&gt;RunPython&lt;/code&gt; operation is irreversible.</source>
          <target state="translated">&lt;code&gt;reverse_code&lt;/code&gt; のマイグレーションの適用を解除する際に、引数が呼び出されます。このcallableは、 &lt;code&gt;code&lt;/code&gt; callableで行われたことを元に戻して、移行を元に戻す必要があります。場合 &lt;code&gt;reverse_code&lt;/code&gt; はありません &lt;code&gt;None&lt;/code&gt; （デフォルト）、 &lt;code&gt;RunPython&lt;/code&gt; の操作が不可逆的です。</target>
        </trans-unit>
        <trans-unit id="28a02ec1c567284f3b25d07a9b99ee645ce7e1c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reverse_sql&lt;/code&gt; queries are executed when the migration is unapplied, so you can reverse the changes done in the forwards queries:</source>
          <target state="translated">&lt;code&gt;reverse_sql&lt;/code&gt; 移行が適用されていないときに、あなたが前方クエリで行われた変更を逆にすることができますので、クエリが実行されます。</target>
        </trans-unit>
        <trans-unit id="263481a7406cf64adca0a038d059096c5aa1aa30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reverse_sql&lt;/code&gt; queries are executed when the migration is unapplied. They should undo what is done by the &lt;code&gt;sql&lt;/code&gt; queries. For example, to undo the above insertion with a deletion:</source>
          <target state="translated">&lt;code&gt;reverse_sql&lt;/code&gt; 移行が適用されていないときにクエリが実行されます。彼らは &lt;code&gt;sql&lt;/code&gt; クエリによって行われたことを元に戻す必要があります。たとえば、上記の挿入を削除して元に戻すには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="621ff1bf72399f5cb8bd6c607564d23dd0b4081b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;route&lt;/code&gt; argument should be a string or &lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;gettext_lazy()&lt;/code&gt;&lt;/a&gt; (see &lt;a href=&quot;../topics/i18n/translation#translating-urlpatterns&quot;&gt;Translating URL patterns&lt;/a&gt;) that contains a URL pattern. The string may contain angle brackets (like &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; above) to capture part of the URL and send it as a keyword argument to the view. The angle brackets may include a converter specification (like the &lt;code&gt;int&lt;/code&gt; part of &lt;code&gt;&amp;lt;int:section&amp;gt;&lt;/code&gt;) which limits the characters matched and may also change the type of the variable passed to the view. For example, &lt;code&gt;&amp;lt;int:section&amp;gt;&lt;/code&gt; matches a string of decimal digits and converts the value to an &lt;code&gt;int&lt;/code&gt;. See &lt;a href=&quot;../topics/http/urls#how-django-processes-a-request&quot;&gt;How Django processes a request&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;route&lt;/code&gt; 引数は文字列かでなければなりません&lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt; &lt;code&gt;gettext_lazy()&lt;/code&gt; &lt;/a&gt;（参照&lt;a href=&quot;../topics/i18n/translation#translating-urlpatterns&quot;&gt;翻訳URLパターンを&lt;/a&gt; URLパターンが含まれています）。文字列には、URLの一部をキャプチャし、キーワード引数としてビューに送信するために、山括弧（上記の &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; など）を含めることができます。山括弧には、一致する文字を制限するコンバーター仕様（ &lt;code&gt;&amp;lt;int:section&amp;gt;&lt;/code&gt; の &lt;code&gt;int&lt;/code&gt; 部分など）を含めることができ、ビューに渡される変数のタイプを変更することもできます。たとえば、 &lt;code&gt;&amp;lt;int:section&amp;gt;&lt;/code&gt; は10進数の文字列に一致し、値を &lt;code&gt;int&lt;/code&gt; に変換します。詳細については、&lt;a href=&quot;../topics/http/urls#how-django-processes-a-request&quot;&gt;Djangoがリクエスト&lt;/a&gt;を処理する方法をご覧ください。</target>
        </trans-unit>
        <trans-unit id="39de2c3a2dac29941c9a6f3b5adf09158830d5b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;route&lt;/code&gt; argument should be a string or &lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;gettext_lazy()&lt;/code&gt;&lt;/a&gt; (see &lt;a href=&quot;../topics/i18n/translation#translating-urlpatterns&quot;&gt;Translating URL patterns&lt;/a&gt;) that contains a regular expression compatible with Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/re.html#module-re&quot;&gt;&lt;code&gt;re&lt;/code&gt;&lt;/a&gt; module. Strings typically use raw string syntax (&lt;code&gt;r''&lt;/code&gt;) so that they can contain sequences like &lt;code&gt;\d&lt;/code&gt; without the need to escape the backslash with another backslash. When a match is made, captured groups from the regular expression are passed to the view &amp;ndash; as named arguments if the groups are named, and as positional arguments otherwise. The values are passed as strings, without any type conversion.</source>
          <target state="translated">&lt;code&gt;route&lt;/code&gt; 引数は文字列かでなければなりません&lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt; &lt;code&gt;gettext_lazy()&lt;/code&gt; &lt;/a&gt;（参照&lt;a href=&quot;../topics/i18n/translation#translating-urlpatterns&quot;&gt;翻訳URLパターンを&lt;/a&gt; Pythonのと互換性のある正規表現が含まれ）&lt;a href=&quot;https://docs.python.org/3/library/re.html#module-re&quot;&gt; &lt;code&gt;re&lt;/code&gt; &lt;/a&gt;モジュールを。文字列は通常、生の文字列構文（ &lt;code&gt;r''&lt;/code&gt; ）を使用するため、 &lt;code&gt;\d&lt;/code&gt; などのシーケンスを含めることができ、バックスラッシュを別のバックスラッシュでエスケープする必要はありません。一致すると、正規表現からキャプチャされたグループがビューに渡されます。グループに名前が付けられている場合は名前付き引数として、それ以外の場合は位置引数としてビューに渡されます。値は、型変換なしで文字列として渡されます。</target>
        </trans-unit>
        <trans-unit id="415cbcbc7016047d57e4dd8d5d1ab73a913461b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;run_validators()&lt;/code&gt; method on a &lt;code&gt;Field&lt;/code&gt; runs all of the field&amp;rsquo;s validators and aggregates all the errors into a single &lt;code&gt;ValidationError&lt;/code&gt;. You shouldn&amp;rsquo;t need to override this method.</source>
          <target state="translated">&lt;code&gt;Field&lt;/code&gt; の &lt;code&gt;run_validators()&lt;/code&gt; メソッドは、フィールドのすべてのバリデーターを実行し、すべてのエラーを単一の &lt;code&gt;ValidationError&lt;/code&gt; に集約します。このメソッドをオーバーライドする必要はありません。</target>
        </trans-unit>
        <trans-unit id="94478f419deb74b5fb4f1cb92b9134d638854b0b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;safe&lt;/code&gt; boolean parameter defaults to &lt;code&gt;True&lt;/code&gt;. If it&amp;rsquo;s set to &lt;code&gt;False&lt;/code&gt;, any object can be passed for serialization (otherwise only &lt;code&gt;dict&lt;/code&gt; instances are allowed). If &lt;code&gt;safe&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; and a non-&lt;code&gt;dict&lt;/code&gt; object is passed as the first argument, a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; will be raised.</source>
          <target state="translated">&lt;code&gt;safe&lt;/code&gt; へのブール・パラメータのデフォルト値 &lt;code&gt;True&lt;/code&gt; 。 &lt;code&gt;False&lt;/code&gt; に設定されている場合、シリアル化のために任意のオブジェクトを渡すことができます（それ以外の場合は、 &lt;code&gt;dict&lt;/code&gt; インスタンスのみが許可されます）。場合は &lt;code&gt;safe&lt;/code&gt; ある &lt;code&gt;True&lt;/code&gt; と非 &lt;code&gt;dict&lt;/code&gt; オブジェクトが最初の引数として渡され、&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;発生します。</target>
        </trans-unit>
        <trans-unit id="515493902bd6909332fd123af7d756cb0244b6a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;samesite&lt;/code&gt; argument was added.</source>
          <target state="translated">&lt;code&gt;samesite&lt;/code&gt; 引数が追加されました。</target>
        </trans-unit>
        <trans-unit id="965dd8e7763d7ea30c51906f2da34471ed7b5b1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;save()&lt;/code&gt; method</source>
          <target state="translated">&lt;code&gt;save()&lt;/code&gt; メソッド</target>
        </trans-unit>
        <trans-unit id="913d5f44c96cf1f923a3008dc54df15da1f97ef5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;save()&lt;/code&gt; method also accepts keywords. These keywords are used for controlling output logging, error handling, and for importing specific feature ranges.</source>
          <target state="translated">&lt;code&gt;save()&lt;/code&gt; メソッドも、キーワードを受け付けます。これらのキーワードは、出力ログの制御、エラー処理、および特定の機能範囲のインポートに使用されます。</target>
        </trans-unit>
        <trans-unit id="f9ba531a6df068d63d688cb47225565b39165c70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;save()&lt;/code&gt; method returns the instances that have been saved to the database. If a given instance&amp;rsquo;s data didn&amp;rsquo;t change in the bound data, the instance won&amp;rsquo;t be saved to the database and won&amp;rsquo;t be included in the return value (&lt;code&gt;instances&lt;/code&gt;, in the above example).</source>
          <target state="translated">&lt;code&gt;save()&lt;/code&gt; メソッドは、データベースに保存されたインスタンスを返します。バインドされたデータで特定のインスタンスのデータが変更されなかった場合、そのインスタンスはデータベースに保存されず、戻り値（上の例では、 &lt;code&gt;instances&lt;/code&gt; ）に含まれません。</target>
        </trans-unit>
        <trans-unit id="9af288aedf1fd9f98506a9909e2edb45aaee29a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;save_formset&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt;, the parent &lt;code&gt;ModelForm&lt;/code&gt; instance and a boolean value based on whether it is adding or changing the parent object.</source>
          <target state="translated">&lt;code&gt;save_formset&lt;/code&gt; 方法が与えられる &lt;code&gt;HttpRequest&lt;/code&gt; 、親 &lt;code&gt;ModelForm&lt;/code&gt; インスタンスとそれが追加または親オブジェクトを変更しているかどうかに基づいてブール値。</target>
        </trans-unit>
        <trans-unit id="47f2994fcd28bfd7c4b9c18861cd2ce18aad3024" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;save_model&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt;, a model instance, a &lt;code&gt;ModelForm&lt;/code&gt; instance, and a boolean value based on whether it is adding or changing the object. Overriding this method allows doing pre- or post-save operations. Call &lt;code&gt;super().save_model()&lt;/code&gt; to save the object using &lt;a href=&quot;../../models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;Model.save()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;save_model&lt;/code&gt; の方法が与えられる &lt;code&gt;HttpRequest&lt;/code&gt; 、モデルインスタンス、 &lt;code&gt;ModelForm&lt;/code&gt; サブクラスのインスタンス、及びそのオブジェクトを追加または変更されたかどうかに基づいてブール値。このメソッドをオーバーライドすると、保存前または保存後の操作を実行できます。コール &lt;code&gt;super().save_model()&lt;/code&gt; 使用して、オブジェクト保存する&lt;a href=&quot;../../models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;Model.save()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0d79db200c135a2a20361afa03a2c65861d65716" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;save_related&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt;, the parent &lt;code&gt;ModelForm&lt;/code&gt; instance, the list of inline formsets and a boolean value based on whether the parent is being added or changed. Here you can do any pre- or post-save operations for objects related to the parent. Note that at this point the parent object and its form have already been saved.</source>
          <target state="translated">&lt;code&gt;save_related&lt;/code&gt; 方法が与えられる &lt;code&gt;HttpRequest&lt;/code&gt; 、親 &lt;code&gt;ModelForm&lt;/code&gt; インスタンス、インラインフォームセットのリストと親が追加または変更されているかどうかに基づいてブール値。ここでは、親に関連するオブジェクトの保存前または保存後の操作を実行できます。この時点で、親オブジェクトとそのフォームはすでに保存されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="57e74f5a6a1922365791161696761bdaca4a5c9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;search&lt;/code&gt; lookup</source>
          <target state="translated">&lt;code&gt;search&lt;/code&gt; 検索</target>
        </trans-unit>
        <trans-unit id="bdb6ebab67efd43b3f12cb8dcbc02e7c3f6ec132" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;search_type&lt;/code&gt; parameter was added.</source>
          <target state="translated">&lt;code&gt;search_type&lt;/code&gt; パラメータが追加されました。</target>
        </trans-unit>
        <trans-unit id="404a8c043575a29dcf7baf306e34ce67bd428c43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;select&lt;/code&gt; argument lets you put extra fields in the &lt;code&gt;SELECT&lt;/code&gt; clause. It should be a dictionary mapping attribute names to SQL clauses to use to calculate that attribute.</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; の引数はあなたが余分なフィールドを置くことができます &lt;code&gt;SELECT&lt;/code&gt; 句。これは、属性名をSQL句にマッピングして、その属性の計算に使用する辞書でなければなりません。</target>
        </trans-unit>
        <trans-unit id="eb92252495d383fc0626382bb860490595d04619" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;serialize()&lt;/code&gt; method of your serializer must return a string of how the value should appear in migrations and a set of any imports that are needed in the migration.</source>
          <target state="translated">&lt;code&gt;serialize()&lt;/code&gt; あなたのシリアライザの方法は、値が移行に表示されるべきかの文字列と、移行に必要なすべての輸入品のセットを返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="4df0d7d33c0414d3ef635cfa89f06f5f5ec825b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set_language&lt;/code&gt; redirect view</source>
          <target state="translated">&lt;code&gt;set_language&lt;/code&gt; のリダイレクトビュー</target>
        </trans-unit>
        <trans-unit id="65f827b34365ea53eba9f940727208c801b3b266" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sitemap_uses_https&lt;/code&gt; argument was added. Older versions of Django always use &lt;code&gt;http&lt;/code&gt; for a sitemap&amp;rsquo;s URL.</source>
          <target state="translated">&lt;code&gt;sitemap_uses_https&lt;/code&gt; の引数が追加されました。古いバージョンのDjango は、サイトマップのURLに常に &lt;code&gt;http&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="9f757f5ebdc63c3691349570ce7971b236189c48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;srid&lt;/code&gt; parameter, if given, is set as the SRID of the created geometry if &lt;code&gt;geo_input&lt;/code&gt; doesn&amp;rsquo;t have an SRID. If different SRIDs are provided through the &lt;code&gt;geo_input&lt;/code&gt; and &lt;code&gt;srid&lt;/code&gt; parameters, &lt;code&gt;ValueError&lt;/code&gt; is raised:</source>
          <target state="translated">&lt;code&gt;srid&lt;/code&gt; 場合、パラメータは、与えられた場合、作成されたジオメトリのSRIDとして設定されている &lt;code&gt;geo_input&lt;/code&gt; SRIDを持っていません。 &lt;code&gt;geo_input&lt;/code&gt; および &lt;code&gt;srid&lt;/code&gt; パラメータを介して異なるSRIDが提供されている &lt;code&gt;ValueError&lt;/code&gt; 、ValueErrorが発生します。</target>
        </trans-unit>
        <trans-unit id="7f060c2ae11c723a0c14be1c2c1b9e3665590287" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;staff_member_required&lt;/code&gt; decorator</source>
          <target state="translated">&lt;code&gt;staff_member_required&lt;/code&gt; デコレータ</target>
        </trans-unit>
        <trans-unit id="f0597cd4f96dd959b725b11dc4c8ef10d4d76312" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;state_operations&lt;/code&gt; argument allows you to supply operations that are equivalent to the SQL in terms of project state. For example, if you are manually creating a column, you should pass in a list containing an &lt;code&gt;AddField&lt;/code&gt; operation here so that the autodetector still has an up-to-date state of the model. If you don&amp;rsquo;t, when you next run &lt;code&gt;makemigrations&lt;/code&gt;, it won&amp;rsquo;t see any operation that adds that field and so will try to run it again. For example:</source>
          <target state="translated">&lt;code&gt;state_operations&lt;/code&gt; の引数は、プロジェクトの状態の観点からSQLに等価な操作を提供することができます。たとえば、列を手動で作成する場合は、ここに &lt;code&gt;AddField&lt;/code&gt; 操作を含むリストを渡して、自動検出器がモデルの最新の状態を維持できるようにする必要があります。そうしないと、次に &lt;code&gt;makemigrations&lt;/code&gt; を実行するときに、そのフィールドを追加する操作が表示されないため、再度実行を試みます。例えば：</target>
        </trans-unit>
        <trans-unit id="1fbd5ff1beb6bf44190986db52a20f74110488de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;state_operations&lt;/code&gt; argument is so you can supply operations that are equivalent to the SQL in terms of project state; for example, if you are manually creating a column, you should pass in a list containing an &lt;code&gt;AddField&lt;/code&gt; operation here so that the autodetector still has an up-to-date state of the model (otherwise, when you next run &lt;code&gt;makemigrations&lt;/code&gt;, it won&amp;rsquo;t see any operation that adds that field and so will try to run it again). For example:</source>
          <target state="translated">&lt;code&gt;state_operations&lt;/code&gt; のプロジェクトの状態の観点からSQLに等価な操作を供給することができるように引数があります。たとえば、手動で列を作成する場合は、ここで &lt;code&gt;AddField&lt;/code&gt; オペレーションを含むリストを渡して、自動検出機能がモデルの最新の状態を &lt;code&gt;makemigrations&lt;/code&gt; できるようにする必要があります（そうでない場合、次にmakemigrationsを実行したときに、 tそのフィールドを追加するすべての操作を確認して、再度実行しようとします）。例えば：</target>
        </trans-unit>
        <trans-unit id="05d82cf093dcf2d7991f5657501a4de6eae147ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;staticfiles&lt;/code&gt; app</source>
          <target state="translated">&lt;code&gt;staticfiles&lt;/code&gt; のアプリ</target>
        </trans-unit>
        <trans-unit id="df41329b2da832ef5b55238903165b040d9ae6db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subject&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt;, &lt;code&gt;from_email&lt;/code&gt; and &lt;code&gt;recipient_list&lt;/code&gt; parameters are required.</source>
          <target state="translated">&lt;code&gt;subject&lt;/code&gt; 、 &lt;code&gt;message&lt;/code&gt; 、 &lt;code&gt;from_email&lt;/code&gt; および &lt;code&gt;recipient_list&lt;/code&gt; パラメータが必要です。</target>
        </trans-unit>
        <trans-unit id="0de65cf4550eae05714a01ffb7d3a79a1c2fdbbf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tag()&lt;/code&gt; method takes two arguments:</source>
          <target state="translated">&lt;code&gt;tag()&lt;/code&gt; メソッドは、2つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="b88e280b78b30b7e2da0586a60b2c4d184a56e27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;takes_context&lt;/code&gt; parameter defaults to &lt;code&gt;False&lt;/code&gt;. When it&amp;rsquo;s set to &lt;code&gt;True&lt;/code&gt;, the tag is passed the context object, as in this example. That&amp;rsquo;s the only difference between this case and the previous &lt;code&gt;inclusion_tag&lt;/code&gt; example.</source>
          <target state="translated">&lt;code&gt;takes_context&lt;/code&gt; へのパラメータのデフォルト値 &lt;code&gt;False&lt;/code&gt; 。 &lt;code&gt;True&lt;/code&gt; に設定すると、この例のように、タグにコンテキストオブジェクトが渡されます。これが、このケースと前の &lt;code&gt;inclusion_tag&lt;/code&gt; 例との唯一の違いです。</target>
        </trans-unit>
        <trans-unit id="5f6b87c249856c9d5c29c0105512e8a9f240a1ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test&lt;/code&gt; command receives options on behalf of the specified &lt;a href=&quot;#cmdoption-test-testrunner&quot;&gt;&lt;code&gt;--testrunner&lt;/code&gt;&lt;/a&gt;. These are the options of the default test runner: &lt;a href=&quot;../topics/testing/advanced#django.test.runner.DiscoverRunner&quot;&gt;&lt;code&gt;DiscoverRunner&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; コマンドは、指定されたのに代わってオプションを受け取る&lt;a href=&quot;#cmdoption-test-testrunner&quot;&gt; &lt;code&gt;--testrunner&lt;/code&gt; &lt;/a&gt;。これらは、デフォルトのテストランナーである&lt;a href=&quot;../topics/testing/advanced#django.test.runner.DiscoverRunner&quot;&gt; &lt;code&gt;DiscoverRunner&lt;/code&gt; &lt;/a&gt;のオプションです。</target>
        </trans-unit>
        <trans-unit id="20898ff0b73800182c5228889c8234799ab8418b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;through_defaults&lt;/code&gt; argument was added.</source>
          <target state="translated">&lt;code&gt;through_defaults&lt;/code&gt; の引数が追加されました。</target>
        </trans-unit>
        <trans-unit id="63025ae279029f4f8b4353e5a0c5154871a0ea93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;time&lt;/code&gt; filter will only accept parameters in the format string that relate to the time of day, not the date. If you need to format a &lt;code&gt;date&lt;/code&gt; value, use the &lt;a href=&quot;#std:templatefilter-date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; filter instead (or along with &lt;a href=&quot;#std:templatefilter-time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; if you need to render a full &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; value).</source>
          <target state="translated">&lt;code&gt;time&lt;/code&gt; フィルタは、一日の時間に関連するフォーマット文字列ではなく、日中のパラメーターを受け入れます。 &lt;code&gt;date&lt;/code&gt; 値をフォーマットする必要がある場合は、代わりに&lt;a href=&quot;#std:templatefilter-date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;フィルターを使用してください（または、完全な&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;値をレンダリングする必要がある場合は、&lt;a href=&quot;#std:templatefilter-time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;とともに使用してください）。</target>
        </trans-unit>
        <trans-unit id="882e616cd1303003145edbed5f5661c0e5e5b6e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timeout&lt;/code&gt; argument is optional and defaults to the &lt;code&gt;timeout&lt;/code&gt; argument of the appropriate backend in the &lt;a href=&quot;../ref/settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; setting (explained above). It&amp;rsquo;s the number of seconds the value should be stored in the cache. Passing in &lt;code&gt;None&lt;/code&gt; for &lt;code&gt;timeout&lt;/code&gt; will cache the value forever. A &lt;code&gt;timeout&lt;/code&gt; of &lt;code&gt;0&lt;/code&gt; won&amp;rsquo;t cache the value.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; 引数はオプションで、デフォルト &lt;code&gt;timeout&lt;/code&gt; に適切なバックエンドの引数&lt;a href=&quot;../ref/settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; &lt;/a&gt;設定は、（上記で説明しました）。これは、値がキャッシュに保存される秒数です。 &lt;code&gt;timeout&lt;/code&gt; に &lt;code&gt;None&lt;/code&gt; を渡すと、値が永久にキャッシュされます。 &lt;code&gt;timeout&lt;/code&gt; の &lt;code&gt;0&lt;/code&gt; は値をキャッシュしません。</target>
        </trans-unit>
        <trans-unit id="3d71fc1792d3867d9eded5708ab14a99703930e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;to_attr&lt;/code&gt; argument sets the result of the prefetch operation to a custom attribute:</source>
          <target state="translated">&lt;code&gt;to_attr&lt;/code&gt; の引数には、カスタム属性へのプリフェッチ動作の結果を設定します。</target>
        </trans-unit>
        <trans-unit id="c82da793fa2c5044f6747c978360d31772836001" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;to_python()&lt;/code&gt; method on a &lt;code&gt;Field&lt;/code&gt; is the first step in every validation. It coerces the value to a correct datatype and raises &lt;code&gt;ValidationError&lt;/code&gt; if that is not possible. This method accepts the raw value from the widget and returns the converted value. For example, a &lt;code&gt;FloatField&lt;/code&gt; will turn the data into a Python &lt;code&gt;float&lt;/code&gt; or raise a &lt;code&gt;ValidationError&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Field&lt;/code&gt; の &lt;code&gt;to_python()&lt;/code&gt; メソッドは、すべての検証の最初のステップです。値を正しいデータ型に強制し、それが不可能な場合は &lt;code&gt;ValidationError&lt;/code&gt; を送出します。このメソッドは、ウィジェットから未加工の値を受け入れ、変換された値を返します。たとえば、 &lt;code&gt;FloatField&lt;/code&gt; はデータをPython &lt;code&gt;float&lt;/code&gt; に変換するか、 &lt;code&gt;ValidationError&lt;/code&gt; を発生させます。</target>
        </trans-unit>
        <trans-unit id="33825641191b3cc051e12f73b630c755e176e2f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;token.split_contents()&lt;/code&gt; method separates the arguments on spaces while keeping quoted strings together. The more straightforward &lt;code&gt;token.contents.split()&lt;/code&gt; wouldn&amp;rsquo;t be as robust, as it would naively split on &lt;em&gt;all&lt;/em&gt; spaces, including those within quoted strings. It&amp;rsquo;s a good idea to always use &lt;code&gt;token.split_contents()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;token.split_contents()&lt;/code&gt; 一緒に引用文字列を維持しながら方法は、スペース上の引数を分離します。単純な &lt;code&gt;token.contents.split()&lt;/code&gt; は、引用符で囲まれた文字列内のスペースを含む&lt;em&gt;すべての&lt;/em&gt;スペースで単純に分割されるため、それほど堅牢ではありません。常に &lt;code&gt;token.split_contents()&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="133dcf3a095f528c8f2acb9c59bc02f066bc9d4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trans&lt;/code&gt; tag was renamed to &lt;code&gt;translate&lt;/code&gt;. The &lt;code&gt;trans&lt;/code&gt; tag is still supported as an alias for backwards compatibility.</source>
          <target state="translated">&lt;code&gt;trans&lt;/code&gt; タグがために改名された &lt;code&gt;translate&lt;/code&gt; 。 &lt;code&gt;trans&lt;/code&gt; タグはまだ後方互換性のための別名としてサポートされています。</target>
        </trans-unit>
        <trans-unit id="026f9a3069321939512024e7bed1da045841f4b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transform&lt;/code&gt; keyword is set to &lt;code&gt;False&lt;/code&gt; because the data in the shapefile does not need to be converted &amp;ndash; it&amp;rsquo;s already in WGS84 (SRID=4326).</source>
          <target state="translated">&lt;code&gt;transform&lt;/code&gt; キーワードがに設定されている &lt;code&gt;False&lt;/code&gt; それはWGS84（SRID = 4326）ですでにだ- 。シェープファイル内のデータを変換する必要がないため、</target>
        </trans-unit>
        <trans-unit id="3606c6c2f6282a2a7c67e0de7dc1b81d981a097a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trigram_similar&lt;/code&gt; lookup allows you to perform trigram lookups, measuring the number of trigrams (three consecutive characters) shared, using a dedicated PostgreSQL extension. A trigram lookup is given an expression and returns results that have a similarity measurement greater than the current similarity threshold.</source>
          <target state="translated">&lt;code&gt;trigram_similar&lt;/code&gt; ルックアップは卦（3連続した文字）の数を測定し、あなたがトライグラムルックアップを実行することを可能にする専用のPostgreSQLの拡張を使用して、共有しました。トライグラムルックアップには式が与えられ、現在の類似性しきい値よりも高い類似性測定値を持つ結果が返されます。</target>
        </trans-unit>
        <trans-unit id="42f93dd77b833412f853ef949e4baa7f46397c94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trigram_similar&lt;/code&gt; lookup can be used on &lt;a href=&quot;../../models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../models/fields#django.db.models.TextField&quot;&gt;&lt;code&gt;TextField&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;trigram_similar&lt;/code&gt; 検索が上で使用することができ&lt;a href=&quot;../../models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; です&lt;/a&gt;と&lt;a href=&quot;../../models/fields#django.db.models.TextField&quot;&gt; &lt;code&gt;TextField&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="8cfd69aed5ca22d022889cf78a3c8807cdca5a1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;u&lt;/code&gt; prefix on the functions below comes from a difference in Python 2 between unicode and bytestrings. If your code doesn&amp;rsquo;t support Python 2, use the functions without the &lt;code&gt;u&lt;/code&gt;.</source>
          <target state="translated">以下の関数の &lt;code&gt;u&lt;/code&gt; 接頭辞は、Unicodeとバイト文字列のPython 2の違いに由来しています。コードがPython 2をサポートしていない場合は、 &lt;code&gt;u&lt;/code&gt; なしの関数を使用してください。</target>
        </trans-unit>
        <trans-unit id="dc0c85a9b38c962d6276590aaff3955606541e05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;u&lt;/code&gt; prefixing of &lt;code&gt;gettext&lt;/code&gt; functions was originally to distinguish usage between unicode strings and bytestrings on Python 2. For code that supports only Python 3, they can be used interchangeably. A deprecation for the prefixed functions may happen in a future Django release.</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; がの前に置く &lt;code&gt;gettext&lt;/code&gt; の機能のみをサポートはPython 3、彼らは互換的に使用することができ、コード用のPython 2のユニコード文字列とバイト文字列の間での使用を区別するためにもともといました。接頭辞付きの関数の非推奨は、将来のDjangoリリースで発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="a84e56120af8f8c421f6b5bf43405ce68b61d10e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unaccent&lt;/code&gt; lookup allows you to perform accent-insensitive lookups using a dedicated PostgreSQL extension.</source>
          <target state="translated">&lt;code&gt;unaccent&lt;/code&gt; のルックアップを使用すると、専用のPostgreSQLの拡張を使用してアクセントを区別しない検索を実行することができます。</target>
        </trans-unit>
        <trans-unit id="dd1cdbdcdcc6cfa69838a0e0c8587f0684d5b99f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unaccent&lt;/code&gt; lookup can be used on &lt;a href=&quot;../../models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../models/fields#django.db.models.TextField&quot;&gt;&lt;code&gt;TextField&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;unaccent&lt;/code&gt; 検索が上で使用することができ&lt;a href=&quot;../../models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; です&lt;/a&gt;と&lt;a href=&quot;../../models/fields#django.db.models.TextField&quot;&gt; &lt;code&gt;TextField&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="bcb5cc579c8a83b7d7f74e6050fe7b4d6168cd1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update()&lt;/code&gt; method is applied instantly and returns the number of rows matched by the query (which may not be equal to the number of rows updated if some rows already have the new value). The only restriction on the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; being updated is that it can only access one database table: the model&amp;rsquo;s main table. You can filter based on related fields, but you can only update columns in the model&amp;rsquo;s main table. Example:</source>
          <target state="translated">&lt;code&gt;update()&lt;/code&gt; メソッドは、瞬時に適用し、（いくつかの行が既に新しい値を有する場合に更新された行の数に等しくなくてもよい）、クエリにマッチした行の数を返します。更新される&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;の唯一の制限は、1つのデータベーステーブル（モデルのメインテーブル）にしかアクセスできないことです。関連フィールドに基づいてフィルタリングできますが、更新できるのはモデルのメインテーブルの列のみです。例：</target>
        </trans-unit>
        <trans-unit id="a1ed9eed4ccb2cf5456dbc06679e8868342bcc2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update()&lt;/code&gt; method is applied instantly, and the only restriction on the &lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; that is updated is that it can only update columns in the model&amp;rsquo;s main table, not on related models. You can&amp;rsquo;t do this, for example:</source>
          <target state="translated">&lt;code&gt;update()&lt;/code&gt; メソッドは、瞬時に適用され、上の唯一の制限&lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;更新され、それはだけでなく、関連するモデルに、モデルのメインテーブルの列を更新することができることです。たとえば、これを行うことはできません。</target>
        </trans-unit>
        <trans-unit id="f35456264c2671f1a8e960970538ad92e85e8d33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update()&lt;/code&gt; method returns the number of affected rows:</source>
          <target state="translated">&lt;code&gt;update()&lt;/code&gt; メソッドは、影響を受けた行の数を返します。</target>
        </trans-unit>
        <trans-unit id="817f4899cafb0bcd8c97c7670093f125e7dd5acb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update_fields&lt;/code&gt; argument can be any iterable containing strings. An empty &lt;code&gt;update_fields&lt;/code&gt; iterable will skip the save. A value of None will perform an update on all fields.</source>
          <target state="translated">&lt;code&gt;update_fields&lt;/code&gt; の引数は、任意の反復可能な文字列を含むことができます。反復可能な空の &lt;code&gt;update_fields&lt;/code&gt; は、保存をスキップします。Noneの値は、すべてのフィールドで更新を実行します。</target>
        </trans-unit>
        <trans-unit id="471280f5eb20340fbd09a86183e931f5cd03a1c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update_or_create&lt;/code&gt; method tries to fetch an object from database based on the given &lt;code&gt;kwargs&lt;/code&gt;. If a match is found, it updates the fields passed in the &lt;code&gt;defaults&lt;/code&gt; dictionary.</source>
          <target state="translated">&lt;code&gt;update_or_create&lt;/code&gt; の方法は、与えられたに基づいてデータベースからオブジェクトをフェッチしようと &lt;code&gt;kwargs&lt;/code&gt; から。一致が見つかると、 &lt;code&gt;defaults&lt;/code&gt; 辞書で渡されたフィールドが更新されます。</target>
        </trans-unit>
        <trans-unit id="aadbaa9aff12551ecf0e8f3bf1a67555bf85ce33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;urlconf&lt;/code&gt; argument is the URLconf module containing the URL patterns to use for reversing. By default, the root URLconf for the current thread is used.</source>
          <target state="translated">&lt;code&gt;urlconf&lt;/code&gt; 引数が逆転するために使用するURLパターンを含むのURLconfモジュールです。デフォルトでは、現在のスレッドのルートURLconfが使用されます。</target>
        </trans-unit>
        <trans-unit id="d0ec3c5e3a91cc9cc4501341473e7acd8b2bcdde" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;urlize&lt;/code&gt; filter also takes an optional parameter &lt;code&gt;autoescape&lt;/code&gt;. If &lt;code&gt;autoescape&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, the link text and URLs will be escaped using Django&amp;rsquo;s built-in &lt;a href=&quot;#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filter. The default value for &lt;code&gt;autoescape&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;urlize&lt;/code&gt; のフィルタはまた、オプションのパラメータの取り &lt;code&gt;autoescape&lt;/code&gt; を。場合 &lt;code&gt;autoescape&lt;/code&gt; がある &lt;code&gt;True&lt;/code&gt; 、リンクテキストやURLは内蔵のDjangoのを使用してエスケープされます&lt;a href=&quot;#std:templatefilter-escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; &lt;/a&gt;フィルタ。 &lt;code&gt;autoescape&lt;/code&gt; のデフォルト値は &lt;code&gt;True&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4f68a313f36d24cdef578264db7b4b249a7b0538" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;user&lt;/code&gt; object is optional: if it&amp;rsquo;s not provided, some validators may not be able to perform any validation and will accept any password.</source>
          <target state="translated">&lt;code&gt;user&lt;/code&gt; オブジェクトはオプションです：それは提供していない場合は、いくつかのバリデータは、任意の検証を実行することができないかもしれないし、任意のパスワードを受け入れます。</target>
        </trans-unit>
        <trans-unit id="cff7e1a92a4562d58867515dcdd0f9667de954e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;user_attributes&lt;/code&gt; parameter should be an iterable of names of user attributes to compare to. If this argument is not provided, the default is used: &lt;code&gt;'username', 'first_name', 'last_name', 'email'&lt;/code&gt;. Attributes that don&amp;rsquo;t exist are ignored.</source>
          <target state="translated">&lt;code&gt;user_attributes&lt;/code&gt; のパラメータは、と比較して、ユーザ属性の名前の反復可能でなければなりません。この引数が指定されていない場合、デフォルトが使用されます： &lt;code&gt;'username', 'first_name', 'last_name', 'email'&lt;/code&gt; 。存在しない属性は無視されます。</target>
        </trans-unit>
        <trans-unit id="9de7f64975904f0ec1392a864e1d7317f71d4adc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;validate()&lt;/code&gt; method on a &lt;code&gt;Field&lt;/code&gt; handles field-specific validation that is not suitable for a validator. It takes a value that has been coerced to a correct datatype and raises &lt;code&gt;ValidationError&lt;/code&gt; on any error. This method does not return anything and shouldn&amp;rsquo;t alter the value. You should override it to handle validation logic that you can&amp;rsquo;t or don&amp;rsquo;t want to put in a validator.</source>
          <target state="translated">&lt;code&gt;Field&lt;/code&gt; の &lt;code&gt;validate()&lt;/code&gt; メソッドは、バリデーターに適さないフィールド固有の検証を処理します。正しいデータ型に強制変換された値を取り、エラーが発生すると &lt;code&gt;ValidationError&lt;/code&gt; を発生させます。このメソッドは何も返さず、値を変更しないでください。これをオーバーライドして、バリデーターに含めることができない、またはしたくない検証ロジックを処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="6f87704d635fe590059b6b15f126720e097b228f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;validators&lt;/code&gt; argument lets you provide a list of validation functions for this field.</source>
          <target state="translated">&lt;code&gt;validators&lt;/code&gt; 引数は、このフィールドの検証機能のリストを提供することができます。</target>
        </trans-unit>
        <trans-unit id="2af696240bba52026bf15b6322a6a83024e0e898" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;value&lt;/code&gt; argument describes the value to be included in the expression, such as &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;True&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt;. Django knows how to convert these Python values into their corresponding database type.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 引数は、次のような、式に含まれる値を記述する &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;True&lt;/code&gt; 、または &lt;code&gt;None&lt;/code&gt; 。Djangoは、これらのPython値を対応するデータベースタイプに変換する方法を知っています。</target>
        </trans-unit>
        <trans-unit id="7a7d229cdf94e590a136fe7aaf6f17dbf06a89c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;values()&lt;/code&gt; method also takes optional keyword arguments, &lt;code&gt;**expressions&lt;/code&gt;, which are passed through to &lt;a href=&quot;#django.db.models.query.QuerySet.annotate&quot;&gt;&lt;code&gt;annotate()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;values()&lt;/code&gt; メソッドは、オプションのキーワード引数、とり &lt;code&gt;**expressions&lt;/code&gt; に渡され、&lt;a href=&quot;#django.db.models.query.QuerySet.annotate&quot;&gt; &lt;code&gt;annotate()&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="2c13b2f9c51e4baf68281653e0b158ec2efa1d5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;values()&lt;/code&gt; method takes optional positional arguments, &lt;code&gt;*fields&lt;/code&gt;, which specify field names to which the &lt;code&gt;SELECT&lt;/code&gt; should be limited. If you specify the fields, each dictionary will contain only the field keys/values for the fields you specify. If you don&amp;rsquo;t specify the fields, each dictionary will contain a key and value for every field in the database table.</source>
          <target state="translated">&lt;code&gt;values()&lt;/code&gt; メソッドは、オプションの位置引数、かかる &lt;code&gt;*fields&lt;/code&gt; れたフィールド名を指定し、 &lt;code&gt;SELECT&lt;/code&gt; を制限する必要があります。フィールドを指定すると、各辞書には、指定したフィールドのフィールドキー/値のみが含まれます。フィールドを指定しない場合、各ディクショナリにはデータベーステーブルのすべてのフィールドのキーと値が含まれます。</target>
        </trans-unit>
        <trans-unit id="088daae2a399c92df1dade02fc570b7324d80838" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verbosity&lt;/code&gt; argument has the same behavior as for &lt;a href=&quot;#django.test.runner.DiscoverRunner&quot;&gt;&lt;code&gt;DiscoverRunner&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;verbosity&lt;/code&gt; 引数は、の場合と同じ動作あり&lt;a href=&quot;#django.test.runner.DiscoverRunner&quot;&gt; &lt;code&gt;DiscoverRunner&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2432a66df5a032d86ba6983c5190f40423564326" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;view&lt;/code&gt; argument is a view function or the result of &lt;a href=&quot;class-based-views/base#django.views.generic.base.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; for class-based views. It can also be an &lt;a href=&quot;#django.urls.include&quot;&gt;&lt;code&gt;django.urls.include()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;view&lt;/code&gt; 引数は、ビュー機能または結果である&lt;a href=&quot;class-based-views/base#django.views.generic.base.View.as_view&quot;&gt; &lt;code&gt;as_view()&lt;/code&gt; &lt;/a&gt;クラスベースビューの。&lt;a href=&quot;#django.urls.include&quot;&gt; &lt;code&gt;django.urls.include()&lt;/code&gt; に&lt;/a&gt;することもできます。</target>
        </trans-unit>
        <trans-unit id="6577e25bb6f82d70c2752592f11f31ca5042cae8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;view&lt;/code&gt; part of the view &amp;ndash; the method that accepts a &lt;code&gt;request&lt;/code&gt; argument plus arguments, and returns a HTTP response.</source>
          <target state="translated">&lt;code&gt;view&lt;/code&gt; ビューの一部-受け入れるメソッド &lt;code&gt;request&lt;/code&gt; 引数に加えて、引数を、およびHTTPレスポンスを返します。</target>
        </trans-unit>
        <trans-unit id="9078710ffa196d9ede5d8d2a6b469ae61ecba885" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;view&lt;/code&gt;, &lt;code&gt;kwargs&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; arguments are the same as for &lt;a href=&quot;#django.urls.path&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;view&lt;/code&gt; 、 &lt;code&gt;kwargs&lt;/code&gt; からと &lt;code&gt;name&lt;/code&gt; 引数はと同じです&lt;a href=&quot;#django.urls.path&quot;&gt; &lt;code&gt;path()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8b0109b3e1d427741805eb07f5694cec5fcd8024" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;week&lt;/code&gt;&lt;code&gt;lookup_type&lt;/code&gt; is calculated based on &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO-8601&quot;&gt;ISO-8601&lt;/a&gt;, i.e., a week starts on a Monday. The first week of a year is the one that contains the year&amp;rsquo;s first Thursday, i.e. the first week has the majority (four or more) of its days in the year. The value returned is in the range 1 to 52 or 53.</source>
          <target state="translated">&lt;code&gt;week&lt;/code&gt; &lt;code&gt;lookup_type&lt;/code&gt; に基づいて計算された&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO-8601&quot;&gt;ISO-8601&lt;/a&gt;、すなわち、週は月曜日に始まります。年の最初の週は、その年の最初の木曜日を含む週です。つまり、最初の週はその年の過半数（4日以上）の日を含みます。返される値は、1から52または53の範囲です。</target>
        </trans-unit>
        <trans-unit id="0217c6df9d195442693669a990f4df4dfb0eccc7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;week_day&lt;/code&gt;&lt;code&gt;lookup_type&lt;/code&gt; is calculated differently from most databases and from Python&amp;rsquo;s standard functions. This function will return &lt;code&gt;1&lt;/code&gt; for Sunday, &lt;code&gt;2&lt;/code&gt; for Monday, through &lt;code&gt;7&lt;/code&gt; for Saturday.</source>
          <target state="translated">&lt;code&gt;week_day&lt;/code&gt; &lt;code&gt;lookup_type&lt;/code&gt; 、ほとんどのデータベースからとPythonの標準機能とは異なって計算されます。この関数は戻ります &lt;code&gt;1&lt;/code&gt; を、日曜日 &lt;code&gt;2&lt;/code&gt; を通じて、月曜日を &lt;code&gt;7&lt;/code&gt; 土曜日。</target>
        </trans-unit>
        <trans-unit id="204fda260f8a5d7347d1356a741248798ebeccae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;week_format&lt;/code&gt; attribute is a &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strptime&quot;&gt;&lt;code&gt;strptime()&lt;/code&gt;&lt;/a&gt; format string used to parse the week number. The following values are supported:</source>
          <target state="translated">&lt;code&gt;week_format&lt;/code&gt; の属性がある&lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strptime&quot;&gt; &lt;code&gt;strptime()&lt;/code&gt; &lt;/a&gt;週数を解析するために使用する書式文字列。以下の値がサポートされています。</target>
        </trans-unit>
        <trans-unit id="148f289535ce903bc222c3f9276240a02680a97d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;where&lt;/code&gt; parameter described above may use standard Python database string placeholders &amp;mdash; &lt;code&gt;'%s'&lt;/code&gt; to indicate parameters the database engine should automatically quote. The &lt;code&gt;params&lt;/code&gt; argument is a list of any extra parameters to be substituted.</source>
          <target state="translated">上記の &lt;code&gt;where&lt;/code&gt; パラメーターは、標準のPythonデータベース文字列プレースホルダー&amp;mdash; &lt;code&gt;'%s'&lt;/code&gt; を使用して、データベースエンジンが自動的に引用するパラメーターを示します。 &lt;code&gt;params&lt;/code&gt; 引数が代入される余分なパラメータのリストです。</target>
        </trans-unit>
        <trans-unit id="928458ff4dd4c8ddac631f69d44268e9e6a13682" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;widget&lt;/code&gt; argument lets you specify a &lt;code&gt;Widget&lt;/code&gt; class to use when rendering this &lt;code&gt;Field&lt;/code&gt;. See &lt;a href=&quot;widgets&quot;&gt;Widgets&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;widget&lt;/code&gt; 引数は、指定することができます &lt;code&gt;Widget&lt;/code&gt; このレンダリングする際に使用するクラスを &lt;code&gt;Field&lt;/code&gt; 。詳細については、&lt;a href=&quot;widgets&quot;&gt;ウィジェット&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="771ca1d9164be58541ba427a2ab56788fbb1ef27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;widgets&lt;/code&gt; dictionary accepts either widget instances (e.g., &lt;code&gt;Textarea(...)&lt;/code&gt;) or classes (e.g., &lt;code&gt;Textarea&lt;/code&gt;). Note that the &lt;code&gt;widgets&lt;/code&gt; dictionary is ignored for a model field with a non-empty &lt;code&gt;choices&lt;/code&gt; attribute. In this case, you must override the form field to use a different widget.</source>
          <target state="translated">&lt;code&gt;widgets&lt;/code&gt; のウィジェットのインスタンス（例えば、いずれかの受け入れ辞書 &lt;code&gt;Textarea(...)&lt;/code&gt; ）またはクラス（例えば、 &lt;code&gt;Textarea&lt;/code&gt; ）。 &lt;code&gt;widgets&lt;/code&gt; ディクショナリは、空でない &lt;code&gt;choices&lt;/code&gt; 属性を持つモデルフィールドでは無視されることに注意してください。この場合、別のウィジェットを使用するには、フォームフィールドをオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="55cb3f54ccb705f97100e71a7cb698e09c180cc7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{% cache %}&lt;/code&gt; template tag caches the contents of the block for a given amount of time. It takes at least two arguments: the cache timeout, in seconds, and the name to give the cache fragment. The fragment is cached forever if timeout is &lt;code&gt;None&lt;/code&gt;. The name will be taken as is, do not use a variable. For example:</source>
          <target state="translated">&lt;code&gt;{% cache %}&lt;/code&gt; テンプレートタグは、時間の所定量のためのブロックの内容をキャッシュします。これには少なくとも2つの引数が必要です。秒単位のキャッシュタイムアウトと、キャッシュフラグメントに付ける名前です。タイムアウトが &lt;code&gt;None&lt;/code&gt; の場合、フラグメントは永久にキャッシュされます。名前はそのまま使用されます。変数は使用しないでください。例えば：</target>
        </trans-unit>
        <trans-unit id="73156f3d9b7d03ef0b54eab397489460eaa8942e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{% if %}&lt;/code&gt; tag evaluates a variable, and if that variable is &amp;ldquo;true&amp;rdquo; (i.e. exists, is not empty, and is not a false boolean value) the contents of the block are output:</source>
          <target state="translated">&lt;code&gt;{% if %}&lt;/code&gt; タグは変数を評価し、その変数が「真」である場合には（すなわち、存在する空でない、偽のブール値ではない）ブロックの内容が出力されます。</target>
        </trans-unit>
        <trans-unit id="d56bff40007a782c94320fcc09d900063f01065f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{% ifchanged %}&lt;/code&gt; block tag is used within a loop. It has two possible uses.</source>
          <target state="translated">&lt;code&gt;{% ifchanged %}&lt;/code&gt; ブロックタグはループ内で使用されています。これには2つの用途があります。</target>
        </trans-unit>
        <trans-unit id="ad27d192e19a8573805d62620858d25ff46a643d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{% lorem %}&lt;/code&gt; tag can be used with zero, one, two or three arguments. The arguments are:</source>
          <target state="translated">&lt;code&gt;{% lorem %}&lt;/code&gt; タグは、ゼロ、1つ、2つまたは3つの引数を指定して使用することができます。引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="17d03c427e8e45fa77cafb2812a34bdad5eb2228" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{% static %}&lt;/code&gt; template tag generates the absolute URL of static files.</source>
          <target state="translated">&lt;code&gt;{% static %}&lt;/code&gt; テンプレートタグは、静的ファイルの絶対URLを生成します。</target>
        </trans-unit>
        <trans-unit id="138792f47cc5f3c4cf57d1c1020d60fb46253001" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{% static %}&lt;/code&gt; template tag is not available for use in static files which aren&amp;rsquo;t generated by Django, like your stylesheet. You should always use &lt;strong&gt;relative paths&lt;/strong&gt; to link your static files between each other, because then you can change &lt;a href=&quot;../ref/settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; (used by the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-static&quot;&gt;&lt;code&gt;static&lt;/code&gt;&lt;/a&gt; template tag to generate its URLs) without having to modify a bunch of paths in your static files as well.</source>
          <target state="translated">&lt;code&gt;{% static %}&lt;/code&gt; テンプレートタグは、あなたのスタイルシートのように、Djangoによって生成されていない静的ファイルで使用することはできません。静的ファイルを相互にリンクするには、常に&lt;strong&gt;相対パス&lt;/strong&gt;を使用する必要があります。これにより、静的ファイル内の&lt;a href=&quot;../ref/settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt;のパスも変更せずに、STATIC_URL（&lt;a href=&quot;../ref/templates/builtins#std:templatetag-static&quot;&gt; &lt;code&gt;static&lt;/code&gt; &lt;/a&gt;テンプレートタグがURLを生成するために使用）を変更できるためです。</target>
        </trans-unit>
        <trans-unit id="66445e8931363b5909bd25c58e5b6c95e72cb565" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{% trans %}&lt;/code&gt; template tag translates either a constant string (enclosed in single or double quotes) or variable content:</source>
          <target state="translated">&lt;code&gt;{% trans %}&lt;/code&gt; テンプレートタグは、いずれかの文字列定数（単一または二重引用符で囲む）または変数の内容を変換します。</target>
        </trans-unit>
        <trans-unit id="2ae45e4443354fea0eaa62aa004363b461d30eee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{% translate %}&lt;/code&gt; template tag translates either a constant string (enclosed in single or double quotes) or variable content:</source>
          <target state="translated">&lt;code&gt;{% translate %}&lt;/code&gt; テンプレートタグがいずれかの変換文字列定数（単一または二重引用符で囲む）または変数の内容：</target>
        </trans-unit>
        <trans-unit id="11d23e85709de25b7d8e3b4316520c950588d340" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;context&lt;/strong&gt;, or a list of variables available in the view&amp;rsquo;s template.</source>
          <target state="translated">&lt;strong&gt;コンテキスト&lt;/strong&gt;、またはビューのテンプレートで使用できる変数のリスト。</target>
        </trans-unit>
        <trans-unit id="f640691d4a716673e693782f0e3084aaa1804956" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;current time zone&lt;/strong&gt; is the time zone that&amp;rsquo;s used for rendering.</source>
          <target state="translated">&lt;strong&gt;現在のタイムゾーンを&lt;/strong&gt;描画するために使われている時間帯です。</target>
        </trans-unit>
        <trans-unit id="601a05ecb118260dadad0da5a2a99d15be6c5743" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;default time zone&lt;/strong&gt; is the time zone defined by the &lt;a href=&quot;../../ref/settings#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">&lt;strong&gt;デフォルトのタイムゾーンは、&lt;/strong&gt;で定義された時間帯である&lt;a href=&quot;../../ref/settings#std:setting-TIME_ZONE&quot;&gt; &lt;code&gt;TIME_ZONE&lt;/code&gt; の&lt;/a&gt;設定。</target>
        </trans-unit>
        <trans-unit id="64522a98a7a31b95777b207e3d74e1ea58327893" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;models&lt;/strong&gt; section of the &lt;code&gt;admindocs&lt;/code&gt; page describes each model in the system along with all the fields, properties, and methods available on it. Relationships to other models appear as hyperlinks. Descriptions are pulled from &lt;code&gt;help_text&lt;/code&gt; attributes on fields or from docstrings on model methods.</source>
          <target state="translated">&lt;code&gt;admindocs&lt;/code&gt; ページの&lt;strong&gt;モデル&lt;/strong&gt;セクションでは、システムで使用可能なすべてのフィールド、プロパティ、およびメソッドとともに、システムの各モデルについて説明します。他のモデルとの関係はハイパーリンクとして表示されます。説明は、フィールドの &lt;code&gt;help_text&lt;/code&gt; 属性またはモデルメソッドのdocstring から取得されます。</target>
        </trans-unit>
        <trans-unit id="67e2a383bbb5fb7148ab99433698386580abf273" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;tags&lt;/strong&gt; and &lt;strong&gt;filters&lt;/strong&gt;&lt;code&gt;admindocs&lt;/code&gt; sections describe all the tags and filters that come with Django (in fact, the &lt;a href=&quot;../../templates/builtins#ref-templates-builtins-tags&quot;&gt;built-in tag reference&lt;/a&gt; and &lt;a href=&quot;../../templates/builtins#ref-templates-builtins-filters&quot;&gt;built-in filter reference&lt;/a&gt; documentation come directly from those pages). Any tags or filters that you create or are added by a third-party app will show up in these sections as well.</source>
          <target state="translated">&lt;strong&gt;タグ&lt;/strong&gt;と&lt;strong&gt;フィルター&lt;/strong&gt; &lt;code&gt;admindocs&lt;/code&gt; のセクションでは、（実際には、Djangoのに付属するすべてのタグやフィルタを記述する&lt;a href=&quot;../../templates/builtins#ref-templates-builtins-tags&quot;&gt;タグリファレンスを内蔵&lt;/a&gt;し、&lt;a href=&quot;../../templates/builtins#ref-templates-builtins-filters&quot;&gt;内蔵のフィルタ参照&lt;/a&gt;ドキュメントは、それらのページから直接来ます）。サードパーティアプリによって作成または追加されたタグまたはフィルターは、これらのセクションにも表示されます。</target>
        </trans-unit>
        <trans-unit id="1aca341310bfb222766142661d3711f8dbf6d7eb" translate="yes" xml:space="preserve">
          <source>The API for the &lt;a href=&quot;#django.test.RequestFactory&quot;&gt;&lt;code&gt;RequestFactory&lt;/code&gt;&lt;/a&gt; is a slightly restricted subset of the test client API:</source>
          <target state="translated">&lt;a href=&quot;#django.test.RequestFactory&quot;&gt; &lt;code&gt;RequestFactory&lt;/code&gt; &lt;/a&gt;のAPI は、テストクライアントAPIのわずかに制限されたサブセットです。</target>
        </trans-unit>
        <trans-unit id="d217aa283b3b614901a4512ea4ff4ed87ce55438" translate="yes" xml:space="preserve">
          <source>The API of &lt;a href=&quot;#django.db.models.fields.files.FieldFile&quot;&gt;&lt;code&gt;FieldFile&lt;/code&gt;&lt;/a&gt; mirrors that of &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;, with one key difference: &lt;em&gt;The object wrapped by the class is not necessarily a wrapper around Python&amp;rsquo;s built-in file object.&lt;/em&gt; Instead, it is a wrapper around the result of the &lt;a href=&quot;../files/storage#django.core.files.storage.Storage.open&quot;&gt;&lt;code&gt;Storage.open()&lt;/code&gt;&lt;/a&gt; method, which may be a &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; object, or it may be a custom storage&amp;rsquo;s implementation of the &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="translated">API &lt;a href=&quot;#django.db.models.fields.files.FieldFile&quot;&gt; &lt;code&gt;FieldFile&lt;/code&gt; の&lt;/a&gt;ものの鏡&lt;a href=&quot;../files/file#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 1つの重要な違いを持つには、：&lt;em&gt;クラスによってラップされたオブジェクトは、必ずしもPythonの組み込みファイルオブジェクトのラッパーではありません。&lt;/em&gt;代わりに、&lt;a href=&quot;../files/storage#django.core.files.storage.Storage.open&quot;&gt; &lt;code&gt;Storage.open()&lt;/code&gt; &lt;/a&gt;メソッドの結果のラッパーであり、&lt;a href=&quot;../files/file#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;オブジェクトの場合もあれば、&lt;a href=&quot;../files/file#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; API のカスタムストレージの実装の場合もあります。</target>
        </trans-unit>
        <trans-unit id="553445eba83fe025ab0f5f215a28c4e550e90827" translate="yes" xml:space="preserve">
          <source>The CSRF middleware and template tag provides easy-to-use protection against &lt;a href=&quot;https://www.squarefree.com/securitytips/web-developers.html#CSRF&quot;&gt;Cross Site Request Forgeries&lt;/a&gt;. This type of attack occurs when a malicious website contains a link, a form button or some JavaScript that is intended to perform some action on your website, using the credentials of a logged-in user who visits the malicious site in their browser. A related type of attack, &amp;lsquo;login CSRF&amp;rsquo;, where an attacking site tricks a user&amp;rsquo;s browser into logging into a site with someone else&amp;rsquo;s credentials, is also covered.</source>
          <target state="translated">CSRFミドルウェアとテンプレートタグは、&lt;a href=&quot;https://www.squarefree.com/securitytips/web-developers.html#CSRF&quot;&gt;クロスサイトリクエストフォージェリ&lt;/a&gt;に対する使いやすい保護を提供します。このタイプの攻撃は、悪意のあるWebサイトにアクセスするログインユーザーの資格情報を使用して、Webサイトで何らかのアクションを実行することを目的としたリンク、フォームボタン、またはJavaScriptが悪意のあるWebサイトに含まれている場合に発生します。関連するタイプの攻撃である「ログインCSRF」では、攻撃サイトがユーザーのブラウザーをだまして、他の誰かの資格情報でサイトにログインさせます。</target>
        </trans-unit>
        <trans-unit id="f01982ec73cd1ce624769540ec551de0741729f5" translate="yes" xml:space="preserve">
          <source>The CSRF middleware is activated by default in the &lt;a href=&quot;settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting. If you override that setting, remember that &lt;code&gt;'django.middleware.csrf.CsrfViewMiddleware'&lt;/code&gt; should come before any view middleware that assume that CSRF attacks have been dealt with.</source>
          <target state="translated">CSRFミドルウェアは、&lt;a href=&quot;settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;設定でデフォルトでアクティブになります。この設定をオーバーライドする場合、 &lt;code&gt;'django.middleware.csrf.CsrfViewMiddleware'&lt;/code&gt; は、CSRF攻撃が処理されたと想定するビューミドルウェアの前に来る必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8ebff9174a91979318e76f9dbafaad5ad443c6f2" translate="yes" xml:space="preserve">
          <source>The CSRF protection cannot protect against man-in-the-middle attacks, so use &lt;a href=&quot;../topics/security#security-recommendation-ssl&quot;&gt;HTTPS&lt;/a&gt; with &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt;. It also assumes &lt;a href=&quot;../topics/security#host-headers-virtual-hosting&quot;&gt;validation of the HOST header&lt;/a&gt; and that there aren&amp;rsquo;t any &lt;a href=&quot;../topics/security#cross-site-scripting&quot;&gt;cross-site scripting vulnerabilities&lt;/a&gt; on your site (because XSS vulnerabilities already let an attacker do anything a CSRF vulnerability allows and much worse).</source>
          <target state="translated">CSRF保護は中間者攻撃から保護できないため、&lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Securityで&lt;/a&gt;&lt;a href=&quot;../topics/security#security-recommendation-ssl&quot;&gt;HTTPS&lt;/a&gt;を使用します。また&lt;a href=&quot;../topics/security#host-headers-virtual-hosting&quot;&gt;、HOSTヘッダーの検証と、&lt;/a&gt;&lt;a href=&quot;../topics/security#cross-site-scripting&quot;&gt;サイトにクロスサイトスクリプティングの脆弱性&lt;/a&gt;がないことも前提としています（XSSの脆弱性により、攻撃者はCSRFの脆弱性で許可されたものを実行できるため、さらに悪いことになります）。</target>
        </trans-unit>
        <trans-unit id="2a3f1d2acac7daf82355cd91db9e2626e6a81e23" translate="yes" xml:space="preserve">
          <source>The CSRF protection is based on the following things:</source>
          <target state="translated">CSRFの保護は、次のようなことに基づいています。</target>
        </trans-unit>
        <trans-unit id="050726ff76ed191299c1c220b54120661f26d55a" translate="yes" xml:space="preserve">
          <source>The CSRF token cookie is named &lt;code&gt;csrftoken&lt;/code&gt; by default, but you can control the cookie name via the &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_NAME&quot;&gt;&lt;code&gt;CSRF_COOKIE_NAME&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">CSRFトークンCookieの名前はデフォルトで &lt;code&gt;csrftoken&lt;/code&gt; ですが、&lt;a href=&quot;settings#std:setting-CSRF_COOKIE_NAME&quot;&gt; &lt;code&gt;CSRF_COOKIE_NAME&lt;/code&gt; &lt;/a&gt;設定を使用してCookie名を制御できます。</target>
        </trans-unit>
        <trans-unit id="a318ecda4c019f8e8a6d943d130890511b7db569" translate="yes" xml:space="preserve">
          <source>The CSRF token is also present in the DOM, but only if explicitly included using &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; in a template. The cookie contains the canonical token; the &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; will prefer the cookie to the token in the DOM. Regardless, you&amp;rsquo;re guaranteed to have the cookie if the token is present in the DOM, so you should use the cookie!</source>
          <target state="translated">CSRFトークンはDOMにも存在しますが、テンプレートに&lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt; &lt;code&gt;csrf_token&lt;/code&gt; &lt;/a&gt;を使用して明示的に含まれている場合のみです。Cookieには正規のトークンが含まれています。 &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; は、 DOM内のトークンにクッキーを好むでしょう。いずれにせよ、トークンがDOMに存在する場合は必ずCookieを取得することが保証されているため、Cookieを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="c65defd261b7048557ca65ad2eff6d8eafa78e0f" translate="yes" xml:space="preserve">
          <source>The CSV module takes care of quoting for you, so you don&amp;rsquo;t have to worry about escaping strings with quotes or commas in them. Pass &lt;code&gt;writerow()&lt;/code&gt; your raw strings, and it&amp;rsquo;ll do the right thing.</source>
          <target state="translated">CSVモジュールが自動的に引用符を付けるので、引用符やカンマが含まれている文字列がエスケープされる心配はありません。生の文字列に &lt;code&gt;writerow()&lt;/code&gt; を渡すと、正しいことが行われます。</target>
        </trans-unit>
        <trans-unit id="e7272524d432fef1b923b58e53abb70eebeb94d5" translate="yes" xml:space="preserve">
          <source>The Commands</source>
          <target state="translated">コマンド</target>
        </trans-unit>
        <trans-unit id="03837e0d23f794c5eab65bc2d4e531c15e647402" translate="yes" xml:space="preserve">
          <source>The CycleNode is iterating, but it&amp;rsquo;s iterating globally. As far as Thread 1 and Thread 2 are concerned, it&amp;rsquo;s always returning the same value. This is not what we want!</source>
          <target state="translated">CycleNodeは反復していますが、グローバルに反復しています。スレッド1とスレッド2に関する限り、常に同じ値を返します。これは私たちが望むものではありません！</target>
        </trans-unit>
        <trans-unit id="4c55d5a8daf5807fdeacbd0081a2a02efa19355c" translate="yes" xml:space="preserve">
          <source>The DE-9IM Intersection Matrix for the two geometries is &lt;code&gt;T*****FF*&lt;/code&gt;, &lt;code&gt;*T****FF*&lt;/code&gt;, &lt;code&gt;***T**FF*&lt;/code&gt;, or &lt;code&gt;****T*FF*&lt;/code&gt;.</source>
          <target state="translated">2つのジオメトリのDE-9IM交差行列は、 &lt;code&gt;T*****FF*&lt;/code&gt; 、 &lt;code&gt;*T****FF*&lt;/code&gt; 、 &lt;code&gt;***T**FF*&lt;/code&gt; 、または &lt;code&gt;****T*FF*&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3a0dea3d12d3d820b329187086fcb9957fe94e93" translate="yes" xml:space="preserve">
          <source>The Django &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; class</source>
          <target state="translated">Django &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;クラス</target>
        </trans-unit>
        <trans-unit id="7a593fde84fef92404caae7f9d61de6696560cc4" translate="yes" xml:space="preserve">
          <source>The Django Admin application defines a number of customized widgets for calendars, filtered selections, and so on. These widgets define asset requirements, and the Django Admin uses the custom widgets in place of the Django defaults. The Admin templates will only include those files that are required to render the widgets on any given page.</source>
          <target state="translated">Django Admin アプリケーションは、カレンダーやフィルタリングされた選択などのための多くのカスタマイズされたウィジェットを定義します。これらのウィジェットはアセットの要件を定義し、Django Admin は Django デフォルトの代わりにカスタムウィジェットを使用します。管理者テンプレートには、任意のページでウィジェットをレンダリングするために必要なファイルのみが含まれます。</target>
        </trans-unit>
        <trans-unit id="caf39b6ac378d06f4ba7e4a0d85d5d768c57ee7d" translate="yes" xml:space="preserve">
          <source>The Django ORM provides many tools to express queries without writing raw SQL. For example:</source>
          <target state="translated">Django ORMでは、生のSQLを書かなくてもクエリを表現できるツールを多数提供しています。例えば、以下のようなものです。</target>
        </trans-unit>
        <trans-unit id="c9bd59b8d237a40c09a224e4de9d77f34e7297e9" translate="yes" xml:space="preserve">
          <source>The Django admin documentation generator</source>
          <target state="translated">Django admin ドキュメントジェネレータ</target>
        </trans-unit>
        <trans-unit id="409dd9b2237f8f97628f0d4b1a1cc36aa574d438" translate="yes" xml:space="preserve">
          <source>The Django admin is tightly coupled to the Django &lt;a href=&quot;default#user-objects&quot;&gt;User object&lt;/a&gt;. The best way to deal with this is to create a Django &lt;code&gt;User&lt;/code&gt; object for each user that exists for your backend (e.g., in your LDAP directory, your external SQL database, etc.) You can either write a script to do this in advance, or your &lt;code&gt;authenticate&lt;/code&gt; method can do it the first time a user logs in.</source>
          <target state="translated">Django管理者は、Django &lt;a href=&quot;default#user-objects&quot;&gt;Userオブジェクト&lt;/a&gt;と緊密に連携しています。これに対処する最良の方法は、バックエンド（たとえば、LDAPディレクトリ、外部SQLデータベースなど）に存在するユーザーごとにDjango &lt;code&gt;User&lt;/code&gt; オブジェクトを作成することです。事前にこれを行うスクリプトを作成することもできます。または、ユーザーが初めてログインしたときに、 &lt;code&gt;authenticate&lt;/code&gt; メソッドで認証を行うことができます。</target>
        </trans-unit>
        <trans-unit id="20824807ef99910351f52c7b6bbeb0a308bbbb09" translate="yes" xml:space="preserve">
          <source>The Django admin site</source>
          <target state="translated">Django の管理サイト</target>
        </trans-unit>
        <trans-unit id="aa458e5d08eb689cc116f4b3198410f8a2b19a05" translate="yes" xml:space="preserve">
          <source>The Django admin site is activated by default. Let&amp;rsquo;s start the development server and explore it.</source>
          <target state="translated">Django管理サイトはデフォルトでアクティブになっています。開発サーバーを起動して探索してみましょう。</target>
        </trans-unit>
        <trans-unit id="ad0a0309eb44e91a7fd1bba2a4f8950281166960" translate="yes" xml:space="preserve">
          <source>The Django admin site uses permissions as follows:</source>
          <target state="translated">Djangoの管理サイトでは、以下のようにパーミッションを使用しています。</target>
        </trans-unit>
        <trans-unit id="84d305a014b50a87d55dfdccf87b463a4f1cbaff" translate="yes" xml:space="preserve">
          <source>The Django authentication system handles both authentication and authorization. Briefly, authentication verifies a user is who they claim to be, and authorization determines what an authenticated user is allowed to do. Here the term authentication is used to refer to both tasks.</source>
          <target state="translated">Django の認証システムは認証と認可の両方を処理します。簡単に言うと、認証はユーザが誰であるかを確認し、認証されたユーザが何をすることができるかを決定します。ここでは、認証という用語は両方の作業を指すために使われています。</target>
        </trans-unit>
        <trans-unit id="e7a6747382a4de87d75f21c83e502ee4684a3dbc" translate="yes" xml:space="preserve">
          <source>The Django debug page has hooks to provide detailed information when a template error arises. Custom template engines can use these hooks to enhance the traceback information that appears to users. The following hooks are available:</source>
          <target state="translated">Django のデバッグページには、テンプレートエラーが発生したときに詳細な情報を提供するフックがあります。カスタムテンプレートエンジンは、これらのフックを使用して、ユーザーに表示されるトレースバック情報を強化することができます。以下のフックが利用できます。</target>
        </trans-unit>
        <trans-unit id="00d640ab5ef138657aa229fc79bd67937b07ecdd" translate="yes" xml:space="preserve">
          <source>The Django email functions outlined above all protect against header injection by forbidding newlines in header values. If any &lt;code&gt;subject&lt;/code&gt;, &lt;code&gt;from_email&lt;/code&gt; or &lt;code&gt;recipient_list&lt;/code&gt; contains a newline (in either Unix, Windows or Mac style), the email function (e.g. &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt;) will raise &lt;code&gt;django.core.mail.BadHeaderError&lt;/code&gt; (a subclass of &lt;code&gt;ValueError&lt;/code&gt;) and, hence, will not send the email. It&amp;rsquo;s your responsibility to validate all data before passing it to the email functions.</source>
          <target state="translated">上記のDjango電子メール機能はすべて、ヘッダー値の改行を禁止することにより、ヘッダーインジェクションから保護します。いずれの場合は &lt;code&gt;subject&lt;/code&gt; 、 &lt;code&gt;from_email&lt;/code&gt; または &lt;code&gt;recipient_list&lt;/code&gt; は、改行（Unix、WindowsまたはMac形式で）、電子メール機能（例えば含ま&lt;a href=&quot;#django.core.mail.send_mail&quot;&gt; &lt;code&gt;send_mail()&lt;/code&gt; &lt;/a&gt;）引き上げる &lt;code&gt;django.core.mail.BadHeaderError&lt;/code&gt; （のサブクラス &lt;code&gt;ValueError&lt;/code&gt; 、したがって、意志を）し、メールを送信しません。電子メール機能に渡す前にすべてのデータを検証するのはあなたの責任です。</target>
        </trans-unit>
        <trans-unit id="12c5d7be1ed59e42d6169c3a101ade0b6ec5e50b" translate="yes" xml:space="preserve">
          <source>The Django object itself can be inspected as &lt;code&gt;deserialized_object.object&lt;/code&gt;. If fields in the serialized data do not exist on a model, a &lt;code&gt;DeserializationError&lt;/code&gt; will be raised unless the &lt;code&gt;ignorenonexistent&lt;/code&gt; argument is passed in as &lt;code&gt;True&lt;/code&gt;:</source>
          <target state="translated">Djangoのオブジェクト自体がとして検査することができる &lt;code&gt;deserialized_object.object&lt;/code&gt; で。シリアライズされたデータ内のフィールドがモデルに存在しない場合は、 &lt;code&gt;DeserializationError&lt;/code&gt; がない限り発生します &lt;code&gt;ignorenonexistent&lt;/code&gt; の引数は次のように渡された &lt;code&gt;True&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="fddba08a24aa2f5973a61e3acf52bc596ed9b96e" translate="yes" xml:space="preserve">
          <source>The Django open-source project</source>
          <target state="translated">Django オープンソースプロジェクト</target>
        </trans-unit>
        <trans-unit id="92f06f3602b95676d65c1225ffde50b7fc548918" translate="yes" xml:space="preserve">
          <source>The Django sessions framework is entirely, and solely, cookie-based. It does not fall back to putting session IDs in URLs as a last resort, as PHP does. This is an intentional design decision. Not only does that behavior make URLs ugly, it makes your site vulnerable to session-ID theft via the &amp;ldquo;Referer&amp;rdquo; header.</source>
          <target state="translated">Djangoセッションフレームワークは完全に、そして完全にCookieベースです。PHPのように、最後の手段としてURLにセッションIDを配置することにフォールバックしません。これは意図的な設計上の決定です。この動作はURLを醜くするだけでなく、「Referer」ヘッダーを介したセッションIDの盗難に対してサイトを脆弱にします。</target>
        </trans-unit>
        <trans-unit id="442dc4a037bb4777abe615e2fecc5a925351592f" translate="yes" xml:space="preserve">
          <source>The Django sitemap framework automates the creation of this XML file by letting you express this information in Python code.</source>
          <target state="translated">Django の sitemap フレームワークは、この情報を Python コードで表現することで、この XML ファイルの作成を自動化します。</target>
        </trans-unit>
        <trans-unit id="30c245aadb75286ee5650a024c66dd02773eb411" translate="yes" xml:space="preserve">
          <source>The Django template language</source>
          <target state="translated">Djangoのテンプレート言語</target>
        </trans-unit>
        <trans-unit id="a5cd5f75a37d2003a65396cbe3bc8f280118e32d" translate="yes" xml:space="preserve">
          <source>The Django template language: for Python programmers</source>
          <target state="translated">Django テンプレート言語:Python プログラマのための</target>
        </trans-unit>
        <trans-unit id="430a962fc891a6e50fa291aadada019108cdb86a" translate="yes" xml:space="preserve">
          <source>The Django template system provides tags which function similarly to some programming constructs &amp;ndash; an &lt;a href=&quot;builtins#std:templatetag-if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; tag for boolean tests, a &lt;a href=&quot;builtins#std:templatetag-for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; tag for looping, etc. &amp;ndash; but these are not simply executed as the corresponding Python code, and the template system will not execute arbitrary Python expressions. Only the tags, filters and syntax listed below are supported by default (although you can add &lt;a href=&quot;../../howto/custom-template-tags&quot;&gt;your own extensions&lt;/a&gt; to the template language as needed).</source>
          <target state="translated">Djangoテンプレートシステムは、いくつかのプログラミング構造と同様に機能するタグを提供します（ブールテストの&lt;a href=&quot;builtins#std:templatetag-if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;タグ、ループの&lt;a href=&quot;builtins#std:templatetag-for&quot;&gt; &lt;code&gt;for&lt;/code&gt; &lt;/a&gt;タグなど）。しかし、これらは対応するPythonコードとして単純に実行されるわけではなく、テンプレートシステムは任意に実行されません。 Python式。デフォルトでは、以下にリストされているタグ、フィルター、および構文のみがサポートされています（必要に応じて、&lt;a href=&quot;../../howto/custom-template-tags&quot;&gt;独自の拡張機能&lt;/a&gt;をテンプレート言語に追加できます）。</target>
        </trans-unit>
        <trans-unit id="b07a58e32fcbf1b0cfdd968e8ac26c77cfd8b93b" translate="yes" xml:space="preserve">
          <source>The Django test client</source>
          <target state="translated">Django のテストクライアント</target>
        </trans-unit>
        <trans-unit id="55707dba4575f6781496f0ff9bccdc9fd21c02de" translate="yes" xml:space="preserve">
          <source>The Django versions and ORM features supported by these unofficial backends vary considerably. Queries regarding the specific capabilities of these unofficial backends, along with any support queries, should be directed to the support channels provided by each 3rd party project.</source>
          <target state="translated">これらの非公式バックエンドでサポートされている Django のバージョンや ORM の機能は大きく異なります。これらの非公式バックエンドの特定の機能に関する質問やサポートに関する質問は、それぞれのサードパーティのプロジェクトが提供するサポートチャンネルを参照してください。</target>
        </trans-unit>
        <trans-unit id="7bfd954f133e7b795d984004982f2fd38ffc52c0" translate="yes" xml:space="preserve">
          <source>The Django wrappers for database exceptions behave exactly the same as the underlying database exceptions. See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 249&lt;/strong&gt;&lt;/a&gt;, the Python Database API Specification v2.0, for further information.</source>
          <target state="translated">データベース例外のDjangoラッパーは、基になるデータベース例外とまったく同じように動作します。詳細については、PythonデータベースAPI仕様v2.0の&lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 249を&lt;/strong&gt;&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0211f518ca14e305e7130133825ce18b2b0fe4c7" translate="yes" xml:space="preserve">
          <source>The Django-specific options here are:</source>
          <target state="translated">ここでのDjango固有のオプションは</target>
        </trans-unit>
        <trans-unit id="33cf02ab487b8e90cb7b19b8c02f8fdcf46ab6cf" translate="yes" xml:space="preserve">
          <source>The FancyCalendar widget inherits all the assets from its parent widget. If you don&amp;rsquo;t want &lt;code&gt;Media&lt;/code&gt; to be inherited in this way, add an &lt;code&gt;extend=False&lt;/code&gt; declaration to the &lt;code&gt;Media&lt;/code&gt; declaration:</source>
          <target state="translated">FancyCalendarウィジェットは、親ウィジェットからすべてのアセットを継承します。 &lt;code&gt;Media&lt;/code&gt; をこの方法で継承したくない場合は、 &lt;code&gt;extend=False&lt;/code&gt; 宣言を &lt;code&gt;Media&lt;/code&gt; 宣言に追加します。</target>
        </trans-unit>
        <trans-unit id="254ea297427edcc72db5f8dffff8ee2830b5b000" translate="yes" xml:space="preserve">
          <source>The Feed class subclasses &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;django.contrib.syndication.views.Feed&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Feedクラスは&lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;django.contrib.syndication.views.Feed&lt;/code&gt; を&lt;/a&gt;サブクラス化します。</target>
        </trans-unit>
        <trans-unit id="fba386fa524a13c0f5fd863c141a32700a5e3e17" translate="yes" xml:space="preserve">
          <source>The File object</source>
          <target state="translated">ファイルオブジェクト</target>
        </trans-unit>
        <trans-unit id="da058efd6d5e84dc353574cdf9c0a19f4204c050" translate="yes" xml:space="preserve">
          <source>The Forms API</source>
          <target state="translated">フォーム API</target>
        </trans-unit>
        <trans-unit id="5efe726dd19666441f9b77daa8e10e1336d1ed20" translate="yes" xml:space="preserve">
          <source>The Forms Reference</source>
          <target state="translated">フォームリファレンス</target>
        </trans-unit>
        <trans-unit id="58db152bf60d60a1862f7886c4e17e4d0bcf10c6" translate="yes" xml:space="preserve">
          <source>The GDAL &lt;code&gt;ogrinfo&lt;/code&gt; utility allows examining the metadata of shapefiles or other vector data sources:</source>
          <target state="translated">GDAL &lt;code&gt;ogrinfo&lt;/code&gt; ユーティリティを使用すると、シェープファイルまたはその他のベクターデータソースのメタデータを調べることができます。</target>
        </trans-unit>
        <trans-unit id="0b87b24a59a68339206c7d4b286a365887f94474" translate="yes" xml:space="preserve">
          <source>The GDAL/OGR tools described here are designed to help you read in your geospatial data, in order for most of them to be useful you have to have some data to work with. If you&amp;rsquo;re starting out and don&amp;rsquo;t yet have any data of your own to use, GeoDjango tests contain a number of data sets that you can use for testing. You can download them here:</source>
          <target state="translated">ここで説明するGDAL / OGRツールは、地理空間データを読み取るのに役立つように設計されています。これらのツールのほとんどが役立つためには、いくつかのデータを操作する必要があります。始めて使用する独自のデータがまだない場合、GeoDjangoテストには、テストに使用できるいくつかのデータセットが含まれています。ここからダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="aa1fb78505858c9442ec79503edd40e5b822f3d0" translate="yes" xml:space="preserve">
          <source>The GeoDjango interfaces to GEOS, GDAL, and GeoIP may be used independently of Django. In other words, no database or settings file required &amp;ndash; import them as normal from &lt;a href=&quot;../index#module-django.contrib.gis&quot;&gt;&lt;code&gt;django.contrib.gis&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">GEOS、GDAL、およびGeoIPへのGeoDjangoインターフェイスは、Djangoとは関係なく使用できます。言い換えれば、データベースや設定ファイルは必要ありません&amp;ndash;通常どおり&lt;a href=&quot;../index#module-django.contrib.gis&quot;&gt; &lt;code&gt;django.contrib.gis&lt;/code&gt; &lt;/a&gt;からインポートしてください。</target>
        </trans-unit>
        <trans-unit id="319a275847dff315ccb00a30d1085d6d58278c0f" translate="yes" xml:space="preserve">
          <source>The HSTS policy applies to your entire domain, not just the URL of the response that you set the header on. Therefore, you should only use it if your entire domain is served via HTTPS only.</source>
          <target state="translated">HSTSポリシーは、ヘッダを設定したレスポンスのURLだけでなく、ドメイン全体に適用されます。したがって、ドメイン全体が HTTPS でのみ提供されている場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="654be3a937abe8074a2116805919e9dba12d3d02" translate="yes" xml:space="preserve">
          <source>The HTML &lt;code&gt;name&lt;/code&gt; for each tag is taken directly from its attribute name in the &lt;code&gt;ContactForm&lt;/code&gt; class.</source>
          <target state="translated">各タグのHTML &lt;code&gt;name&lt;/code&gt; は、 &lt;code&gt;ContactForm&lt;/code&gt; クラスの属性名から直接取得されます。</target>
        </trans-unit>
        <trans-unit id="fe025e32f34db0a4bb063ba113f3d44ba9090ad0" translate="yes" xml:space="preserve">
          <source>The HTML ID attribute for this &lt;code&gt;BoundField&lt;/code&gt;. Returns an empty string if &lt;a href=&quot;#django.forms.Form.auto_id&quot;&gt;&lt;code&gt;Form.auto_id&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;BoundField&lt;/code&gt; のHTML ID属性。&lt;a href=&quot;#django.forms.Form.auto_id&quot;&gt; &lt;code&gt;Form.auto_id&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;False&lt;/code&gt; の場合、空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="bfd81eee9f78e30edc634b6a54a5d2b71184cd29" translate="yes" xml:space="preserve">
          <source>The HTML generated by the built-in widgets uses HTML5 syntax, targeting &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;. For example, it uses boolean attributes such as &lt;code&gt;checked&lt;/code&gt; rather than the XHTML style of &lt;code&gt;checked='checked'&lt;/code&gt;.</source>
          <target state="translated">組み込みウィジェットによって生成されたHTMLは、 &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt; をターゲットとするHTML5構文を使用します。たとえば、 &lt;code&gt;checked='checked'&lt;/code&gt; の XHTMLスタイルではなく、 &lt;code&gt;checked&lt;/code&gt; などのブール属性を使用します。</target>
        </trans-unit>
        <trans-unit id="c7a457d5b4722073d9c9a8adda046e484928ad53" translate="yes" xml:space="preserve">
          <source>The HTML that&amp;rsquo;s generated includes the form&amp;rsquo;s &lt;a href=&quot;#django.forms.Form.label_suffix&quot;&gt;&lt;code&gt;label_suffix&lt;/code&gt;&lt;/a&gt; (a colon, by default) or, if set, the current field&amp;rsquo;s &lt;a href=&quot;fields#django.forms.Field.label_suffix&quot;&gt;&lt;code&gt;label_suffix&lt;/code&gt;&lt;/a&gt;. The optional &lt;code&gt;label_suffix&lt;/code&gt; parameter allows you to override any previously set suffix. For example, you can use an empty string to hide the label on selected fields. If you need to do this in a template, you could write a custom filter to allow passing parameters to &lt;code&gt;label_tag&lt;/code&gt;.</source>
          <target state="translated">生成されるHTMLには、フォームの&lt;a href=&quot;#django.forms.Form.label_suffix&quot;&gt; &lt;code&gt;label_suffix&lt;/code&gt; &lt;/a&gt;（デフォルトではコロン）、または設定されている場合は現在のフィールドの&lt;a href=&quot;fields#django.forms.Field.label_suffix&quot;&gt; &lt;code&gt;label_suffix&lt;/code&gt; が含まれ&lt;/a&gt;ます。オプションの &lt;code&gt;label_suffix&lt;/code&gt; パラメータを使用すると、以前に設定したサフィックスを上書きできます。たとえば、空の文字列を使用して、選択したフィールドのラベルを非表示にすることができます。テンプレートでこれを行う必要がある場合は、カスタムフィルターを記述して、パラメーターを &lt;code&gt;label_tag&lt;/code&gt; に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="3ffc589e7ea7852ca2c42efb9b947ddb147e46f4" translate="yes" xml:space="preserve">
          <source>The HTTP reason phrase for the response. It uses the &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-6.1&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;HTTP standard&amp;rsquo;s&lt;/strong&gt;&lt;/a&gt; default reason phrases.</source>
          <target state="translated">応答のHTTP理由フレーズ。&lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-6.1&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;HTTP標準の&lt;/strong&gt;&lt;/a&gt;デフォルトの理由フレーズを使用し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="9f12433821f474021e968e955a8d9ba88759f0b9" translate="yes" xml:space="preserve">
          <source>The HTTP reason phrase for the response. It uses the &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-6.1&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;HTTP standard&amp;rsquo;s&lt;/strong&gt;&lt;/a&gt; default reason phrases.</source>
          <target state="translated">応答のHTTP理由フレーズ。&lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-6.1&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;HTTP標準の&lt;/strong&gt;&lt;/a&gt;デフォルトの理由フレーズを使用し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="58681491633da97d1ec43392e67eb049b6dd1e8f" translate="yes" xml:space="preserve">
          <source>The HTTP status code for the response.</source>
          <target state="translated">レスポンスの HTTP ステータスコード。</target>
        </trans-unit>
        <trans-unit id="c0bf89f252380e3d8370d496ec7054d80d41b52d" translate="yes" xml:space="preserve">
          <source>The HTTP status of the response, as an integer. For a full list of defined codes, see the &lt;a href=&quot;https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml&quot;&gt;IANA status code registry&lt;/a&gt;.</source>
          <target state="translated">整数としての応答のHTTPステータス。定義されているコードの完全なリストについては、&lt;a href=&quot;https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml&quot;&gt;IANAステータスコードレジストリを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="3f40e8eb0e3ae82d3123a0ed18a55957c3e1c072" translate="yes" xml:space="preserve">
          <source>The ID that will be used for this field (&lt;code&gt;id_email&lt;/code&gt; in the example above). If you are constructing the label manually, you may want to use this in lieu of &lt;code&gt;label_tag&lt;/code&gt;. It&amp;rsquo;s also useful, for example, if you have some inline JavaScript and want to avoid hardcoding the field&amp;rsquo;s ID.</source>
          <target state="translated">このフィールドに使用されるID（上記の例では &lt;code&gt;id_email&lt;/code&gt; ）。ラベルを手動で作成している場合は、 &lt;code&gt;label_tag&lt;/code&gt; の代わりにこれを使用できます。たとえば、インラインJavaScriptがあり、フィールドのIDをハードコーディングしないようにする場合にも役立ちます。</target>
        </trans-unit>
        <trans-unit id="37ee3cd9b52362975a52e7c48c4889fea9a6a489" translate="yes" xml:space="preserve">
          <source>The ID, as an integer, of the current site in the &lt;code&gt;django_site&lt;/code&gt; database table. This is used so that application data can hook into specific sites and a single database can manage content for multiple sites.</source>
          <target state="translated">&lt;code&gt;django_site&lt;/code&gt; データベーステーブル内の現在のサイトのID（整数）。これは、アプリケーションデータが特定のサイトにフックし、単一のデータベースが複数のサイトのコンテンツを管理できるようにするために使用されます。</target>
        </trans-unit>
        <trans-unit id="b2b6f8a13f5db675c5310d215eeb3f759dd5dfe4" translate="yes" xml:space="preserve">
          <source>The IPv6 address normalization follows &lt;a href=&quot;https://tools.ietf.org/html/rfc4291.html#section-2.2&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 4291#section-2.2&lt;/strong&gt;&lt;/a&gt; section 2.2, including using the IPv4 format suggested in paragraph 3 of that section, like &lt;code&gt;::ffff:192.0.2.0&lt;/code&gt;. For example, &lt;code&gt;2001:0::0:01&lt;/code&gt; would be normalized to &lt;code&gt;2001::1&lt;/code&gt;, and &lt;code&gt;::ffff:0a0a:0a0a&lt;/code&gt; to &lt;code&gt;::ffff:10.10.10.10&lt;/code&gt;. All characters are converted to lowercase.</source>
          <target state="translated">IPv6アドレスの正規化は、&lt;a href=&quot;https://tools.ietf.org/html/rfc4291.html#section-2.2&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 4291＃section-2.2&lt;/strong&gt;&lt;/a&gt;セクション2.2に従い&lt;strong&gt;ます&lt;/strong&gt;。これには、 &lt;code&gt;::ffff:192.0.2.0&lt;/code&gt; のような、そのセクションの段落3で提案されたIPv4フォーマットの使用が含まれます。たとえば、 &lt;code&gt;2001:0::0:01&lt;/code&gt; &lt;code&gt;::ffff:0a0a:0a0a&lt;/code&gt; &lt;code&gt;2001::1&lt;/code&gt; 正規化され、:: ffff：0a0a：0a0aは &lt;code&gt;::ffff:10.10.10.10&lt;/code&gt; に正規化されます。すべての文字が小文字に変換されます。</target>
        </trans-unit>
        <trans-unit id="14f842e2f8f13268e8041976dd5ae6bdead195b5" translate="yes" xml:space="preserve">
          <source>The Internet is a hostile environment. Before deploying your Django project, you should take some time to review your settings, with security, performance, and operations in mind.</source>
          <target state="translated">インターネットは敵対的な環境です。Django プロジェクトをデプロイする前に、セキュリティ、パフォーマンス、運用を念頭に置いて、時間をかけて設定を見直す必要があります。</target>
        </trans-unit>
        <trans-unit id="96cf68c4fca09bfd64ba6135c567fd7e6932b487" translate="yes" xml:space="preserve">
          <source>The JSON serialization was extended to support lists and tuples. In older versions, only dicts are serialized.</source>
          <target state="translated">JSONのシリアライズはリストとタプルをサポートするように拡張されました。古いバージョンでは、ディクトのみがシリアライズされます。</target>
        </trans-unit>
        <trans-unit id="fc4de94cabe65bfaadd1321f9dbd70872db2a175" translate="yes" xml:space="preserve">
          <source>The JSON serializer uses &lt;code&gt;DjangoJSONEncoder&lt;/code&gt; for encoding. A subclass of &lt;a href=&quot;https://docs.python.org/3/library/json.html#json.JSONEncoder&quot;&gt;&lt;code&gt;JSONEncoder&lt;/code&gt;&lt;/a&gt;, it handles these additional types:</source>
          <target state="translated">JSON &lt;code&gt;DjangoJSONEncoder&lt;/code&gt; はエンコードにDjangoJSONEncoderを使用します。&lt;a href=&quot;https://docs.python.org/3/library/json.html#json.JSONEncoder&quot;&gt; &lt;code&gt;JSONEncoder&lt;/code&gt; &lt;/a&gt;のサブクラスであり、次の追加のタイプを処理します。</target>
        </trans-unit>
        <trans-unit id="54bac1e1d6c443548d3b9da63f81f5d53b0ead0f" translate="yes" xml:space="preserve">
          <source>The JavaScript code must go in a template block if you are inheriting &lt;code&gt;admin/change_form.html&lt;/code&gt; or it won&amp;rsquo;t be rendered in the final HTML.</source>
          <target state="translated">JavaScriptコードは、 &lt;code&gt;admin/change_form.html&lt;/code&gt; を継承する場合、または最終的なHTMLでレンダリングされない場合は、テンプレートブロックに含める必要があります。</target>
        </trans-unit>
        <trans-unit id="a137fc8531ca3502953a295f56ef115bdc915426" translate="yes" xml:space="preserve">
          <source>The MIME type to use for the resulting document. Defaults to &lt;code&gt;'text/html'&lt;/code&gt;.</source>
          <target state="translated">結果のドキュメントに使用するMIMEタイプ。デフォルトは &lt;code&gt;'text/html'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="87245b335c01ad93f2ee70eb807977f63bdc6496" translate="yes" xml:space="preserve">
          <source>The Migrations Operations Reference</source>
          <target state="translated">移行作業のリファレンス</target>
        </trans-unit>
        <trans-unit id="faa96bf880beafe165e7aed58a2118d744195cbe" translate="yes" xml:space="preserve">
          <source>The Models Reference</source>
          <target state="translated">モデルのリファレンス</target>
        </trans-unit>
        <trans-unit id="fd8917614e4f59f260fb160fe3b16922d97fe444" translate="yes" xml:space="preserve">
          <source>The MyISAM storage engine of MySQL doesn&amp;rsquo;t support transactions or constraints, so if you use MyISAM, you won&amp;rsquo;t get validation of fixture data, or a rollback if multiple transaction files are found.</source>
          <target state="translated">MySQLのMyISAMストレージエンジンはトランザクションまたは制約をサポートしていないため、MyISAMを使用すると、フィクスチャデータの検証、または複数のトランザクションファイルが見つかった場合のロールバックを取得できません。</target>
        </trans-unit>
        <trans-unit id="01c3fb9f1ffce99e87f789d936ee8c8cb250f52f" translate="yes" xml:space="preserve">
          <source>The OpenGIS geometry type, generally set by the form field.</source>
          <target state="translated">OpenGIS のジオメトリタイプで、通常はフォームフィールドで設定されます。</target>
        </trans-unit>
        <trans-unit id="7dde92feca78d3e5ffe6788481f71ac39dad7fcd" translate="yes" xml:space="preserve">
          <source>The Oracle backend stores &lt;code&gt;TextFields&lt;/code&gt; as &lt;code&gt;NCLOB&lt;/code&gt; columns. Oracle imposes some limitations on the usage of such LOB columns in general:</source>
          <target state="translated">Oracleバックエンドは、 &lt;code&gt;TextFields&lt;/code&gt; を &lt;code&gt;NCLOB&lt;/code&gt; 列として格納します。Oracleは、一般に、このようなLOB列の使用にいくつかの制限を課しています。</target>
        </trans-unit>
        <trans-unit id="a9fca3458c00da580f39f69297e381d16a3a853a" translate="yes" xml:space="preserve">
          <source>The Oracle database backend uses the &lt;code&gt;SYS.DBMS_LOB&lt;/code&gt; and &lt;code&gt;SYS.DBMS_RANDOM&lt;/code&gt; packages, so your user will require execute permissions on it. It&amp;rsquo;s normally accessible to all users by default, but in case it is not, you&amp;rsquo;ll need to grant permissions like so:</source>
          <target state="translated">Oracleデータベースのバックエンドは &lt;code&gt;SYS.DBMS_LOB&lt;/code&gt; および &lt;code&gt;SYS.DBMS_RANDOM&lt;/code&gt; パッケージを使用するため、ユーザーにはその実行権限が必要です。通常、デフォルトですべてのユーザーがアクセスできますが、アクセスできない場合は、次のように権限を付与する必要があります。</target>
        </trans-unit>
        <trans-unit id="a7189b34863bafc65b863357f79d9e53f94777ba" translate="yes" xml:space="preserve">
          <source>The Oracle database driver always uses server-side cursors.</source>
          <target state="translated">Oracleデータベースドライバは常にサーバー側のカーソルを使用します。</target>
        </trans-unit>
        <trans-unit id="6cb1640142d67db49f1a018378d8515617a17571" translate="yes" xml:space="preserve">
          <source>The PBKDF2 and bcrypt algorithms use a number of iterations or rounds of hashing. This deliberately slows down attackers, making attacks against hashed passwords harder. However, as computing power increases, the number of iterations needs to be increased. We&amp;rsquo;ve chosen a reasonable default (and will increase it with each release of Django), but you may wish to tune it up or down, depending on your security needs and available processing power. To do so, you&amp;rsquo;ll subclass the appropriate algorithm and override the &lt;code&gt;iterations&lt;/code&gt; parameters. For example, to increase the number of iterations used by the default PBKDF2 algorithm:</source>
          <target state="translated">PBKDF2およびbcryptアルゴリズムは、ハッシュの反復またはラウンドを使用します。これにより、意図的に攻撃者の速度が低下し、ハッシュされたパスワードに対する攻撃が困難になります。ただし、計算能力が向上するにつれて、反復回数を増やす必要があります。適切なデフォルトを選択しました（Djangoのリリースごとに増加します）が、セキュリティのニーズと利用可能な処理能力に応じて、調整することもできます。そのためには、適切なアルゴリズムをサブクラス化し、 &lt;code&gt;iterations&lt;/code&gt; パラメーターをオーバーライドします。たとえば、デフォルトのPBKDF2アルゴリズムで使用される反復回数を増やすには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="4cf1867236c7aa33948bed32fcb851d74cc5b59c" translate="yes" xml:space="preserve">
          <source>The PROJ.4 datum shifting files must be installed (see the &lt;a href=&quot;install/geolibs#proj4&quot;&gt;PROJ.4 installation instructions&lt;/a&gt; for more details).</source>
          <target state="translated">PROJ.4データムシフトファイルをインストールする必要があります（詳細については、&lt;a href=&quot;install/geolibs#proj4&quot;&gt;PROJ.4インストール手順&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="329dd1d62b7828f4c3dd85f5edaa7557c3cddcd2" translate="yes" xml:space="preserve">
          <source>The PostgreSQL backend stores datetimes as &lt;code&gt;timestamp with time zone&lt;/code&gt;. In practice, this means it converts datetimes from the connection&amp;rsquo;s time zone to UTC on storage, and from UTC to the connection&amp;rsquo;s time zone on retrieval.</source>
          <target state="translated">PostgreSQLバックエンドは日時を &lt;code&gt;timestamp with time zone&lt;/code&gt; として保存します。実際には、これは、日付時刻をストレージの接続のタイムゾーンからUTCに変換し、取得時にUTCから接続のタイムゾーンに変換することを意味します。</target>
        </trans-unit>
        <trans-unit id="6776f7c24fb7bea0795628b159948d294dfc944b" translate="yes" xml:space="preserve">
          <source>The PostgreSQL behavior can be emulated using &lt;code&gt;Coalesce&lt;/code&gt; if you know a sensible maximum value to provide as a default.</source>
          <target state="translated">デフォルトとして提供する適切な最大値がわかっている場合は、 &lt;code&gt;Coalesce&lt;/code&gt; を使用してPostgreSQLの動作をエミュレートできます。</target>
        </trans-unit>
        <trans-unit id="8b99b1d8b53d1d56ee60aeb08d81046626e32b79" translate="yes" xml:space="preserve">
          <source>The PostgreSQL behavior can be emulated using &lt;code&gt;Coalesce&lt;/code&gt; if you know a sensible minimum value to provide as a default.</source>
          <target state="translated">デフォルトとして提供する賢明な最小値がわかっている場合は、 &lt;code&gt;Coalesce&lt;/code&gt; を使用してPostgreSQLの動作をエミュレートできます。</target>
        </trans-unit>
        <trans-unit id="080a3e51f1cd9e405ee49a3310f3ff641678d047" translate="yes" xml:space="preserve">
          <source>The PostgreSQL documentation has more details about &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-RANKING&quot;&gt;different rank normalization options&lt;/a&gt;.</source>
          <target state="translated">PostgreSQLのドキュメントには、&lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-RANKING&quot;&gt;さまざまなランク正規化オプションの&lt;/a&gt;詳細が記載されています。</target>
        </trans-unit>
        <trans-unit id="967afd51b13add2c7f7c55bed6f7bfc8d22c73c3" translate="yes" xml:space="preserve">
          <source>The PostgreSQL documentation has more details on &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-HEADLINE&quot;&gt;highlighting search results&lt;/a&gt;.</source>
          <target state="translated">PostgreSQLのドキュメントには、&lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-HEADLINE&quot;&gt;検索結果の強調表示&lt;/a&gt;に関する詳細があります。</target>
        </trans-unit>
        <trans-unit id="5d010d90dba16c98f2f20a73501228f2fca7de40" translate="yes" xml:space="preserve">
          <source>The PostgreSQL installer creates a new &lt;code&gt;postgres&lt;/code&gt; database superuser You will be prompted once to set the password &amp;ndash; make sure to remember it!</source>
          <target state="translated">PostgreSQLインストーラーは新しい &lt;code&gt;postgres&lt;/code&gt; データベーススーパーユーザーを作成しますパスワードを設定するように一度求められます-それを忘れないでください！</target>
        </trans-unit>
        <trans-unit id="ffbb4982f7bc145844170a2795989a60e2fd3504" translate="yes" xml:space="preserve">
          <source>The PostgreSQL installer creates both a new Windows user to be the &amp;lsquo;postgres service account&amp;rsquo; and a &lt;code&gt;postgres&lt;/code&gt; database superuser You will be prompted once to set the password for both accounts &amp;ndash; make sure to remember it!</source>
          <target state="translated">PostgreSQLインストーラーは、「postgresサービスアカウント」となる新しいWindowsユーザーと &lt;code&gt;postgres&lt;/code&gt; データベーススーパーユーザーの両方を作成します。両方のアカウントのパスワードを設定するように求められます&amp;ndash;忘れないようにしてください！</target>
        </trans-unit>
        <trans-unit id="49f0980841b457206f0161614a0b15b56ce8c523" translate="yes" xml:space="preserve">
          <source>The Query Expression API</source>
          <target state="translated">クエリ式 API</target>
        </trans-unit>
        <trans-unit id="a68257dca35e49a9799f4cf150dcc2c853156870" translate="yes" xml:space="preserve">
          <source>The ReportLab library is &lt;a href=&quot;https://pypi.org/project/reportlab/&quot;&gt;available on PyPI&lt;/a&gt;. A &lt;a href=&quot;https://www.reportlab.com/docs/reportlab-userguide.pdf&quot;&gt;user guide&lt;/a&gt; (not coincidentally, a PDF file) is also available for download. You can install ReportLab with &lt;code&gt;pip&lt;/code&gt;:</source>
          <target state="translated">ReportLabライブラリは&lt;a href=&quot;https://pypi.org/project/reportlab/&quot;&gt;PyPI&lt;/a&gt;で利用できます。&lt;a href=&quot;https://www.reportlab.com/docs/reportlab-userguide.pdf&quot;&gt;ユーザーガイド&lt;/a&gt;（ない偶然、PDFファイル）もダウンロードすることができます。ReportLabは &lt;code&gt;pip&lt;/code&gt; でインストールできます。</target>
        </trans-unit>
        <trans-unit id="13127c6e90352b724af2c83b1dd527177d5069cd" translate="yes" xml:space="preserve">
          <source>The SMTP backend is the default configuration inherited by Django. If you want to specify it explicitly, put the following in your settings:</source>
          <target state="translated">SMTPバックエンドはDjangoが継承しているデフォルトの設定です。明示的に指定したい場合は、設定に以下のように入れます。</target>
        </trans-unit>
        <trans-unit id="4d4b1704121603f93bc661dd4b024ff841989c1b" translate="yes" xml:space="preserve">
          <source>The SRID to use for the geometry field. If not set, &lt;code&gt;ogrinspect&lt;/code&gt; attempts to automatically determine of the SRID of the data source.</source>
          <target state="translated">ジオメトリフィールドに使用するSRID。設定されていない場合、 &lt;code&gt;ogrinspect&lt;/code&gt; はデータソースのSRIDを自動的に決定しようとします。</target>
        </trans-unit>
        <trans-unit id="00356ecb7c5f30ccaea4b4be4eb6f80130ffe404" translate="yes" xml:space="preserve">
          <source>The Select2 input looks similar to the default input but comes with a search feature that loads the options asynchronously. This is faster and more user-friendly if the related model has many instances.</source>
          <target state="translated">Select2入力はデフォルトの入力に似ていますが、オプションを非同期的にロードする検索機能を備えています。これは、関連するモデルに多くのインスタンスがある場合に、より速く、よりユーザーフレンドリーになります。</target>
        </trans-unit>
        <trans-unit id="77bfef56c145a8ccd0c6c097cb5ae841f2306916" translate="yes" xml:space="preserve">
          <source>The Settings Reference</source>
          <target state="translated">設定リファレンス</target>
        </trans-unit>
        <trans-unit id="9c627f82005f0f63b160ebee249864019f33c865" translate="yes" xml:space="preserve">
          <source>The Spatial Reference System Identifier (SRID) of the raster. This property is a shortcut to getting or setting the SRID through the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.srs&quot;&gt;&lt;code&gt;srs&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">ラスターの空間参照系識別子（SRID）。このプロパティは、&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.srs&quot;&gt; &lt;code&gt;srs&lt;/code&gt; &lt;/a&gt;属性を通じてSRIDを取得または設定するためのショートカットです。</target>
        </trans-unit>
        <trans-unit id="f09a26915a27a15318465682e6bc60e74297258e" translate="yes" xml:space="preserve">
          <source>The Swiss number formatting depends on the type of number that is being formatted. For monetary values, a comma is used as the thousand separator and a decimal point for the decimal separator. For all other numbers, a comma is used as decimal separator and a space as thousand separator. The locale format provided by Django uses the generic separators, a comma for decimal and a space for thousand separators.</source>
          <target state="translated">スイスの数字のフォーマットは、フォーマットされている数字の種類によって異なります。金額の場合は、カンマが千の区切り文字として使用され、小数点以下の区切り文字には小数点が使用されます。それ以外のすべての数値については、カンマを小数点以下の区切り文字として、スペースを千の区切り文字として使用します。Django が提供するロケールフォーマットでは、一般的な区切り文字、10進数の区切り文字にはカンマ、千の区切り文字にはスペースが使用されます。</target>
        </trans-unit>
        <trans-unit id="30b3b0c9916ede0153fe53922dc3f2d362bf74fb" translate="yes" xml:space="preserve">
          <source>The Templates Reference</source>
          <target state="translated">テンプレートリファレンス</target>
        </trans-unit>
        <trans-unit id="2cb63981e5ea302f9bd57a822b95b4d65284ca07" translate="yes" xml:space="preserve">
          <source>The URL for the &amp;ldquo;View site&amp;rdquo; link at the top of each admin page. By default, &lt;code&gt;site_url&lt;/code&gt; is &lt;code&gt;/&lt;/code&gt;. Set it to &lt;code&gt;None&lt;/code&gt; to remove the link.</source>
          <target state="translated">各管理ページの上部にある「サイトを表示」リンクのURL。デフォルトでは、 &lt;code&gt;site_url&lt;/code&gt; は &lt;code&gt;/&lt;/code&gt; です。リンクを削除するには、[ &lt;code&gt;None&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="8afe6e962fdf9973c9362232bf4d33350bd5673a" translate="yes" xml:space="preserve">
          <source>The URL or &lt;a href=&quot;../topics/http/urls#naming-url-patterns&quot;&gt;named URL pattern&lt;/a&gt; where requests are redirected after login when the &lt;a href=&quot;../topics/auth/default#django.contrib.auth.views.LoginView&quot;&gt;&lt;code&gt;LoginView&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t get a &lt;code&gt;next&lt;/code&gt; GET parameter.</source>
          <target state="translated">&lt;a href=&quot;../topics/auth/default#django.contrib.auth.views.LoginView&quot;&gt; &lt;code&gt;LoginView&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;next&lt;/code&gt; GETパラメータを取得しない場合に、ログイン後にリクエストがリダイレクトされるURLまたは&lt;a href=&quot;../topics/http/urls#naming-url-patterns&quot;&gt;名前付きURLパターン&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="448cc28a96720f1cb9ef51abcae4ea5231f53aec" translate="yes" xml:space="preserve">
          <source>The URL or &lt;a href=&quot;../topics/http/urls#naming-url-patterns&quot;&gt;named URL pattern&lt;/a&gt; where requests are redirected after logout if &lt;a href=&quot;../topics/auth/default#django.contrib.auth.views.LogoutView&quot;&gt;&lt;code&gt;LogoutView&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t have a &lt;code&gt;next_page&lt;/code&gt; attribute.</source>
          <target state="translated">URLや&lt;a href=&quot;../topics/http/urls#naming-url-patterns&quot;&gt;名前のURLパターン&lt;/a&gt;あれば要求がログアウト後にリダイレクトされる&lt;a href=&quot;../topics/auth/default#django.contrib.auth.views.LogoutView&quot;&gt; &lt;code&gt;LogoutView&lt;/code&gt; が&lt;/a&gt;持っていない &lt;code&gt;next_page&lt;/code&gt; 属性を。</target>
        </trans-unit>
        <trans-unit id="ef9aef30ae0e745f772c22f6b50220d811bc8a96" translate="yes" xml:space="preserve">
          <source>The URL or &lt;a href=&quot;../topics/http/urls#naming-url-patterns&quot;&gt;named URL pattern&lt;/a&gt; where requests are redirected for login when using the &lt;a href=&quot;../topics/auth/default#django.contrib.auth.decorators.login_required&quot;&gt;&lt;code&gt;login_required()&lt;/code&gt;&lt;/a&gt; decorator, &lt;a href=&quot;../topics/auth/default#django.contrib.auth.mixins.LoginRequiredMixin&quot;&gt;&lt;code&gt;LoginRequiredMixin&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../topics/auth/default#django.contrib.auth.mixins.AccessMixin&quot;&gt;&lt;code&gt;AccessMixin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../topics/auth/default#django.contrib.auth.decorators.login_required&quot;&gt; &lt;code&gt;login_required()&lt;/code&gt; &lt;/a&gt;デコレータ、&lt;a href=&quot;../topics/auth/default#django.contrib.auth.mixins.LoginRequiredMixin&quot;&gt; &lt;code&gt;LoginRequiredMixin&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../topics/auth/default#django.contrib.auth.mixins.AccessMixin&quot;&gt; &lt;code&gt;AccessMixin&lt;/code&gt; &lt;/a&gt;を使用するときにリクエストがログインのためにリダイレクトされるURLまたは&lt;a href=&quot;../topics/http/urls#naming-url-patterns&quot;&gt;名前付きURLパターン&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="47720363e1e3af87132c2b68aa2d30176437cda3" translate="yes" xml:space="preserve">
          <source>The URL to redirect to when the form is successfully processed.</source>
          <target state="translated">フォームが正常に処理されたときにリダイレクトするURL。</target>
        </trans-unit>
        <trans-unit id="bcb52f1168af7f6925c0349f5273e7599b585a47" translate="yes" xml:space="preserve">
          <source>The URL to redirect to, as a string. Or &lt;code&gt;None&lt;/code&gt; to raise a 410 (Gone) HTTP error.</source>
          <target state="translated">リダイレクト先のURL（文字列）。または、 &lt;code&gt;None&lt;/code&gt; を指定すると、410（Gone）HTTPエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="f9b73cbfda3cf995a507d5ce4ffc81cbb8334cfe" translate="yes" xml:space="preserve">
          <source>The URLconf doesn&amp;rsquo;t look at the request method. In other words, all request methods &amp;ndash; &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, etc. &amp;ndash; will be routed to the same function for the same URL.</source>
          <target state="translated">URLconfはリクエストメソッドを調べません。つまり、すべてのリクエストメソッド（ &lt;code&gt;POST&lt;/code&gt; 、 &lt;code&gt;GET&lt;/code&gt; 、 &lt;code&gt;HEAD&lt;/code&gt; など）は、同じURLの同じ関数にルーティングされます。</target>
        </trans-unit>
        <trans-unit id="45ccb726900a8f0097c86dd1dce50d8509b830da" translate="yes" xml:space="preserve">
          <source>The URLconf here uses the named group &lt;code&gt;pk&lt;/code&gt; - this name is the default name that &lt;code&gt;DetailView&lt;/code&gt; uses to find the value of the primary key used to filter the queryset.</source>
          <target state="translated">ここでのURLconfは、名前付きグループ &lt;code&gt;pk&lt;/code&gt; を使用します。この名前は、 &lt;code&gt;DetailView&lt;/code&gt; がクエリセットのフィルタリングに使用される主キーの値を見つけるために使用するデフォルトの名前です。</target>
        </trans-unit>
        <trans-unit id="548a01a1b80fb7120753de52a692180c774b10d8" translate="yes" xml:space="preserve">
          <source>The URLconf searches against the requested URL, as a normal Python string. This does not include GET or POST parameters, or the domain name.</source>
          <target state="translated">URLconfは、要求されたURLを通常のPython文字列として検索します。これには GET や POST パラメータやドメイン名は含まれません。</target>
        </trans-unit>
        <trans-unit id="32d4c73b498dfbbb4926938d46dfb74f2c43981e" translate="yes" xml:space="preserve">
          <source>The URLs defined in &lt;code&gt;polls.urls&lt;/code&gt; will have an application namespace &lt;code&gt;polls&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;polls.urls&lt;/code&gt; で定義されたURLには、アプリケーション名前空間 &lt;code&gt;polls&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="e51a0e57d7a2704060bc92f629dd9a2cc306b706" translate="yes" xml:space="preserve">
          <source>The Writing Migrations &amp;ldquo;how-to&amp;rdquo;</source>
          <target state="translated">マイグレーションを書く「ハウツー」</target>
        </trans-unit>
        <trans-unit id="a0de502f5ba8bf18d602c98cf23a04ae506e5a4e" translate="yes" xml:space="preserve">
          <source>The ability to provide a callable was added.</source>
          <target state="translated">callableを提供する機能が追加されました。</target>
        </trans-unit>
        <trans-unit id="96320cb1bb7e355b708bc58f52c4b06b03d4d849" translate="yes" xml:space="preserve">
          <source>The ability to run tests with &lt;a href=&quot;#overriding-settings&quot;&gt;modified settings&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#overriding-settings&quot;&gt;変更された設定で&lt;/a&gt;テストを実行する機能。</target>
        </trans-unit>
        <trans-unit id="ce4e0ab9d1214bebe4df4b87379b65426aaa07f6" translate="yes" xml:space="preserve">
          <source>The above &lt;code&gt;Person&lt;/code&gt; model would create a database table like this:</source>
          <target state="translated">上記の &lt;code&gt;Person&lt;/code&gt; モデルは、次のようなデータベーステーブルを作成します。</target>
        </trans-unit>
        <trans-unit id="cf3ffd9a97227b24e95069aa08843b8e620904af" translate="yes" xml:space="preserve">
          <source>The above code could be simplified by using the &lt;a href=&quot;https://github.com/js-cookie/js-cookie/&quot;&gt;JavaScript Cookie library&lt;/a&gt; to replace &lt;code&gt;getCookie&lt;/code&gt;:</source>
          <target state="translated">上記のコードは、&lt;a href=&quot;https://github.com/js-cookie/js-cookie/&quot;&gt;JavaScript Cookieライブラリ&lt;/a&gt;を使用して &lt;code&gt;getCookie&lt;/code&gt; を置き換えることで簡略化できます。</target>
        </trans-unit>
        <trans-unit id="4b7fa6d84f2b71ecfdaa4ce31265ab0da7cc7aea" translate="yes" xml:space="preserve">
          <source>The above ends up calling the &lt;code&gt;as_table&lt;/code&gt; method on the formset class.</source>
          <target state="translated">上記は、formsetクラスの &lt;code&gt;as_table&lt;/code&gt; メソッドを呼び出すことになります。</target>
        </trans-unit>
        <trans-unit id="557fde4255ef088eaef88066c675bce56a942655" translate="yes" xml:space="preserve">
          <source>The above example is a bit contrived since it&amp;rsquo;s equivalent to doing:</source>
          <target state="translated">上記の例は、次のようにすることと同等であるため、少し工夫されています。</target>
        </trans-unit>
        <trans-unit id="85585e575d4d7963c67e68f4b53fad058669241c" translate="yes" xml:space="preserve">
          <source>The above examples output a value. Generally, it&amp;rsquo;s more flexible if your template tags set template variables instead of outputting values. That way, template authors can reuse the values that your template tags create.</source>
          <target state="translated">上記の例は値を出力します。一般に、テンプレートタグが値を出力する代わりにテンプレート変数を設定すると、より柔軟になります。このようにして、テンプレートの作成者は、テンプレートタグが作成する値を再利用できます。</target>
        </trans-unit>
        <trans-unit id="d111647a3e61db68ecc833a2192ab67fc3f7f3dd" translate="yes" xml:space="preserve">
          <source>The above is a slight simplification &amp;ndash; the &lt;code&gt;get_response&lt;/code&gt; callable for the last middleware in the chain won&amp;rsquo;t be the actual view but rather a wrapper method from the handler which takes care of applying &lt;a href=&quot;#view-middleware&quot;&gt;view middleware&lt;/a&gt;, calling the view with appropriate URL arguments, and applying &lt;a href=&quot;#template-response-middleware&quot;&gt;template-response&lt;/a&gt; and &lt;a href=&quot;#exception-middleware&quot;&gt;exception&lt;/a&gt; middleware.</source>
          <target state="translated">上記は少し簡略化したものです。チェーンの最後のミドルウェアの &lt;code&gt;get_response&lt;/code&gt; 呼び出し可能は実際のビューではなく、&lt;a href=&quot;#view-middleware&quot;&gt;ビューミドルウェア&lt;/a&gt;の適用、適切なURL引数を使用したビューの呼び出し、および適用を処理するハンドラーからのラッパーメソッドになります。&lt;a href=&quot;#template-response-middleware&quot;&gt;テンプレート応答&lt;/a&gt;および&lt;a href=&quot;#exception-middleware&quot;&gt;例外&lt;/a&gt;ミドルウェア。</target>
        </trans-unit>
        <trans-unit id="55aaac19d68791dbd391b3913730a9aaed21f082" translate="yes" xml:space="preserve">
          <source>The above is equivalent to &amp;ndash; but shorter, cleaner, and possibly faster than &amp;ndash; the following:</source>
          <target state="translated">上記は以下と同等ですが、短く、簡潔で、おそらくより高速です。</target>
        </trans-unit>
        <trans-unit id="bc24d1df297ec73ced0dfccfc7c69b75979e3348" translate="yes" xml:space="preserve">
          <source>The above template displays a radio button for each question choice. The &lt;code&gt;value&lt;/code&gt; of each radio button is the associated question choice&amp;rsquo;s ID. The &lt;code&gt;name&lt;/code&gt; of each radio button is &lt;code&gt;&quot;choice&quot;&lt;/code&gt;. That means, when somebody selects one of the radio buttons and submits the form, it&amp;rsquo;ll send the POST data &lt;code&gt;choice=#&lt;/code&gt; where # is the ID of the selected choice. This is the basic concept of HTML forms.</source>
          <target state="translated">上記のテンプレートには、質問の選択肢ごとにラジオボタンが表示されます。各ラジオボタンの &lt;code&gt;value&lt;/code&gt; は、関連付けられた質問の選択肢のIDです。各ラジオボタンの &lt;code&gt;name&lt;/code&gt; は &lt;code&gt;&quot;choice&quot;&lt;/code&gt; です。つまり、誰かがラジオボタンの1つを選択してフォームを送信すると、POSTデータ &lt;code&gt;choice=#&lt;/code&gt; が送信されます。＃は選択した選択肢のIDです。これがHTMLフォームの基本概念です。</target>
        </trans-unit>
        <trans-unit id="716991c7abeff036777543f27df7fccd5176dc1f" translate="yes" xml:space="preserve">
          <source>The above will tell Django to order by the &lt;code&gt;first_name&lt;/code&gt; field when trying to sort by &lt;code&gt;colored_first_name&lt;/code&gt; in the admin.</source>
          <target state="translated">上記は、管理者で &lt;code&gt;colored_first_name&lt;/code&gt; でソートしようとしたときに &lt;code&gt;first_name&lt;/code&gt; フィールドで並べ替えるようにDjangoに指示します。</target>
        </trans-unit>
        <trans-unit id="0972181000ef7696648390c6992716cc4dc262a8" translate="yes" xml:space="preserve">
          <source>The absolute path to the directory where &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; will collect static files for deployment.</source>
          <target state="translated">&lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt;が展開用の静的ファイルを収集するディレクトリへの絶対パス。</target>
        </trans-unit>
        <trans-unit id="317a77807beca4c01220a931465494671461ffd6" translate="yes" xml:space="preserve">
          <source>The absolute path to the directory whose contents you want listed. This directory must exist.</source>
          <target state="translated">表示したいコンテンツのあるディレクトリへの絶対パス。このディレクトリは存在しなければなりません。</target>
        </trans-unit>
        <trans-unit id="3164ad6855d7d72155644f1912d0a5cbd0d2f705" translate="yes" xml:space="preserve">
          <source>The abstract base session model.</source>
          <target state="translated">抽象ベースのセッションモデル。</target>
        </trans-unit>
        <trans-unit id="56ebb28485851a1ffcd13f95827f56abd6a6d25e" translate="yes" xml:space="preserve">
          <source>The accepted values for the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; arguments are &lt;code&gt;None&lt;/code&gt;, an integer, or zero. A negative integer for &lt;code&gt;start&lt;/code&gt; results in &lt;code&gt;N preceding&lt;/code&gt;, while &lt;code&gt;None&lt;/code&gt; yields &lt;code&gt;UNBOUNDED PRECEDING&lt;/code&gt;. For both &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;, zero will return &lt;code&gt;CURRENT ROW&lt;/code&gt;. Positive integers are accepted for &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; および &lt;code&gt;end&lt;/code&gt; 引数として受け入れられる値は、 &lt;code&gt;None&lt;/code&gt; 、整数、またはゼロです。 &lt;code&gt;start&lt;/code&gt; に負の整数を指定すると &lt;code&gt;N preceding&lt;/code&gt; 、 &lt;code&gt;None&lt;/code&gt; を指定すると &lt;code&gt;UNBOUNDED PRECEDING&lt;/code&gt; になります。 &lt;code&gt;start&lt;/code&gt; と &lt;code&gt;end&lt;/code&gt; 両方で、ゼロは &lt;code&gt;CURRENT ROW&lt;/code&gt; を返します。 &lt;code&gt;end&lt;/code&gt; には正の整数を使用できます。</target>
        </trans-unit>
        <trans-unit id="ea514c02d191ab1b66dad018866c2e8a24f5390e" translate="yes" xml:space="preserve">
          <source>The accessor to the pixel values of the &lt;code&gt;GDALBand&lt;/code&gt;. Returns the complete data array if no parameters are provided. A subset of the pixel array can be requested by specifying an offset and block size as tuples.</source>
          <target state="translated">&lt;code&gt;GDALBand&lt;/code&gt; のピクセル値へのアクセサ。パラメータが指定されていない場合、完全なデータ配列を返します。ピクセル配列のサブセットは、オフセットとブロックサイズをタプルとして指定することでリクエストできます。</target>
        </trans-unit>
        <trans-unit id="9377ffc39d254418ebca4c6c15922a83f8783858" translate="yes" xml:space="preserve">
          <source>The action in the examples above match the last part of the URL names for &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; instances described above. The &lt;code&gt;opts&lt;/code&gt; variable can be any object which has an &lt;code&gt;app_label&lt;/code&gt; and &lt;code&gt;model_name&lt;/code&gt; attributes and is usually supplied by the admin views for the current model.</source>
          <target state="translated">上記の例のアクションは、上記の&lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt;インスタンスのURL名の最後の部分と一致します。 &lt;code&gt;opts&lt;/code&gt; 変数が持っている任意のオブジェクトにすることができます &lt;code&gt;app_label&lt;/code&gt; や &lt;code&gt;model_name&lt;/code&gt; 属性を、通常は現在のモデルのための管理ビューによって供給されています。</target>
        </trans-unit>
        <trans-unit id="98796218d1fed487ad6fb4bd4e5b5aa6d91ca19f" translate="yes" xml:space="preserve">
          <source>The actual implementation of &lt;a href=&quot;../ref/templates/builtins#std:templatetag-comment&quot;&gt;&lt;code&gt;{% comment %}&lt;/code&gt;&lt;/a&gt; is slightly different in that it allows broken template tags to appear between &lt;code&gt;{% comment %}&lt;/code&gt; and &lt;code&gt;{% endcomment %}&lt;/code&gt;. It does so by calling &lt;code&gt;parser.skip_past('endcomment')&lt;/code&gt; instead of &lt;code&gt;parser.parse(('endcomment',))&lt;/code&gt; followed by &lt;code&gt;parser.delete_first_token()&lt;/code&gt;, thus avoiding the generation of a node list.</source>
          <target state="translated">&lt;a href=&quot;../ref/templates/builtins#std:templatetag-comment&quot;&gt; &lt;code&gt;{% comment %}&lt;/code&gt; &lt;/a&gt;の実際の実装は、 &lt;code&gt;{% comment %}&lt;/code&gt; と &lt;code&gt;{% endcomment %}&lt;/code&gt; 間に壊れたテンプレートタグを表示できるという点で少し異なります。これは、 &lt;code&gt;parser.parse(('endcomment',))&lt;/code&gt; 後に &lt;code&gt;parser.delete_first_token()&lt;/code&gt; が続く代わりに &lt;code&gt;parser.skip_past('endcomment')&lt;/code&gt; を呼び出すことで行われ、ノードリストの生成が回避されます。</target>
        </trans-unit>
        <trans-unit id="8fc8e68e96fa0090b4c5811c8ac059b6ef42b703" translate="yes" xml:space="preserve">
          <source>The actual instance being deleted.</source>
          <target state="translated">削除される実際のインスタンス。</target>
        </trans-unit>
        <trans-unit id="1032ab139cf93563d82f21f1335a990f32f1c3df" translate="yes" xml:space="preserve">
          <source>The actual instance being saved.</source>
          <target state="translated">保存されている実際のインスタンス。</target>
        </trans-unit>
        <trans-unit id="da9623219a7c1ce080ccc2feae9d852ca5837425" translate="yes" xml:space="preserve">
          <source>The actual instance of the model that&amp;rsquo;s just been created.</source>
          <target state="translated">作成されたばかりのモデルの実際のインスタンス。</target>
        </trans-unit>
        <trans-unit id="da01ee37e16de5371384aa5ac9abb879e3b05e53" translate="yes" xml:space="preserve">
          <source>The actual logic of the command. Subclasses must implement this method.</source>
          <target state="translated">コマンドの実際のロジック。サブクラスはこのメソッドを実装しなければなりません。</target>
        </trans-unit>
        <trans-unit id="e0e24f7961308ececd5e037e89fcf83bd0dbe4e2" translate="yes" xml:space="preserve">
          <source>The actual sending of an email is handled by the email backend.</source>
          <target state="translated">実際のメール送信は、メールバックエンドで処理されます。</target>
        </trans-unit>
        <trans-unit id="6ce12f81e06ec304928aada38d066d9c08c3cbb1" translate="yes" xml:space="preserve">
          <source>The additional queries in &lt;code&gt;prefetch_related()&lt;/code&gt; are executed after the &lt;code&gt;QuerySet&lt;/code&gt; has begun to be evaluated and the primary query has been executed.</source>
          <target state="translated">&lt;code&gt;QuerySet&lt;/code&gt; の評価が開始され、プライマリクエリが実行された後で、 &lt;code&gt;prefetch_related()&lt;/code&gt; の追加のクエリが実行されます。</target>
        </trans-unit>
        <trans-unit id="5179fe240428ba4b7e061b5f58d3104ef0bd94eb" translate="yes" xml:space="preserve">
          <source>The admin</source>
          <target state="translated">管理者</target>
        </trans-unit>
        <trans-unit id="c1123d8f228e5f55443368f63edfa7793ca29507" translate="yes" xml:space="preserve">
          <source>The admin application uses it to log the history of each object added or changed through the admin interface.</source>
          <target state="translated">管理者アプリケーションは、管理者インターフェースを通じて追加・変更された各オブジェクトの履歴を記録するために使用します。</target>
        </trans-unit>
        <trans-unit id="0dc4c79ddce6cefc1ffdd748a5c93c2e446ce6e8" translate="yes" xml:space="preserve">
          <source>The admin files live in (&lt;code&gt;django/contrib/admin/static/admin&lt;/code&gt;) of the Django distribution.</source>
          <target state="translated">adminファイルは、Djangoディストリビューションの（ &lt;code&gt;django/contrib/admin/static/admin&lt;/code&gt; ）にあります。</target>
        </trans-unit>
        <trans-unit id="d7c752166ff227f79fdebf363848237645a8e8f6" translate="yes" xml:space="preserve">
          <source>The admin has many hooks for customization, but beware of trying to use those hooks exclusively. If you need to provide a more process-centric interface that abstracts away the implementation details of database tables and fields, then it&amp;rsquo;s probably time to write your own views.</source>
          <target state="translated">管理者にはカスタマイズ用の多くのフックがありますが、それらのフックを排他的に使用しようとすることに注意してください。データベーステーブルとフィールドの実装の詳細を抽象化する、よりプロセス中心のインターフェイスを提供する必要がある場合は、おそらく独自のビューを作成するときです。</target>
        </trans-unit>
        <trans-unit id="d3b0cd903384fd1fd5cb3f68c5a3f30f5b2505d8" translate="yes" xml:space="preserve">
          <source>The admin interface has the ability to edit models on the same page as a parent model. These are called inlines. Suppose you have these two models:</source>
          <target state="translated">管理インターフェースには、親モデルと同じページでモデルを編集する機能があります。これらはインラインと呼ばれます。この2つのモデルがあるとします。</target>
        </trans-unit>
        <trans-unit id="fc02a266d0220ef79d59d56fadf436f2a12a21f7" translate="yes" xml:space="preserve">
          <source>The admin is enabled in the default project template used by &lt;a href=&quot;../../django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">adminは、&lt;a href=&quot;../../django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;startproject&lt;/code&gt; で&lt;/a&gt;使用されるデフォルトのプロジェクトテンプレートで有効になっています。</target>
        </trans-unit>
        <trans-unit id="2cc2b92b881a425293fef1210f548ff243ac5de3" translate="yes" xml:space="preserve">
          <source>The admin isn&amp;rsquo;t intended to be used by site visitors. It&amp;rsquo;s for site managers.</source>
          <target state="translated">管理者は、サイトの訪問者が使用することを想定していません。サイト管理者向けです。</target>
        </trans-unit>
        <trans-unit id="3a763de7510db871dbb866962cba71a3b4562f68" translate="yes" xml:space="preserve">
          <source>The admin now preserves filters on the list view after creating, editing or deleting an object. You can restore the previous behavior of clearing filters by setting this attribute to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">管理者は、オブジェクトを作成、編集、または削除した後、リストビューのフィルターを保持するようになりました。この属性を &lt;code&gt;False&lt;/code&gt; に設定すると、フィルターをクリアする以前の動作を復元できます。</target>
        </trans-unit>
        <trans-unit id="b89e874d2d4af6eb42f1a28899e15fe844bfcd49" translate="yes" xml:space="preserve">
          <source>The admin template files are located in the &lt;code&gt;contrib/admin/templates/admin&lt;/code&gt; directory.</source>
          <target state="translated">管理テンプレートファイルは、 &lt;code&gt;contrib/admin/templates/admin&lt;/code&gt; ディレクトリにあります。</target>
        </trans-unit>
        <trans-unit id="d98c254ee449f811a31b3182cc950026479d0b29" translate="yes" xml:space="preserve">
          <source>The advantage of generating PDF files dynamically is that you can create customized PDFs for different purposes &amp;ndash; say, for different users or different pieces of content.</source>
          <target state="translated">PDFファイルを動的に生成することの利点は、さまざまなユーザーやさまざまなコンテンツなど、さまざまな目的でカスタマイズされたPDFを作成できることです。</target>
        </trans-unit>
        <trans-unit id="a82fad5ba44714112e257cab4164f0dee3f3846c" translate="yes" xml:space="preserve">
          <source>The advantage to using the &lt;code&gt;vary_on_headers&lt;/code&gt; decorator rather than manually setting the &lt;code&gt;Vary&lt;/code&gt; header (using something like &lt;code&gt;response['Vary'] = 'user-agent'&lt;/code&gt;) is that the decorator &lt;em&gt;adds&lt;/em&gt; to the &lt;code&gt;Vary&lt;/code&gt; header (which may already exist), rather than setting it from scratch and potentially overriding anything that was already in there.</source>
          <target state="translated">&lt;code&gt;Vary&lt;/code&gt; ヘッダーを手動で設定する（ &lt;code&gt;response['Vary'] = 'user-agent'&lt;/code&gt; ようなものを使用する）のではなく、 &lt;code&gt;vary_on_headers&lt;/code&gt; デコレーターを使用する利点は、デコレーターが設定するのではなく、 &lt;code&gt;Vary&lt;/code&gt; ヘッダー（すでに存在する場合があります）に&lt;em&gt;追加&lt;/em&gt;することです。ゼロから作成し、すでにそこにあったものを上書きする可能性があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="57b3f45901544edc694cb0f71468aeb80ab6ed30" translate="yes" xml:space="preserve">
          <source>The affine transformation matrix used to georeference the source, as a tuple of six coefficients which map pixel/line coordinates into georeferenced space using the following relationship:</source>
          <target state="translated">ソースの地理参照に使用されるアフィン変換行列は,以下の関係を用いてピクセル/ライン座標を地理参照空間にマッピングする6つの係数のタプルとして,ソースの地理参照に使用されます.</target>
        </trans-unit>
        <trans-unit id="089afeb26b2e08139d434b87601042a7dd454ac5" translate="yes" xml:space="preserve">
          <source>The age of CSRF cookies, in seconds.</source>
          <target state="translated">CSRFクッキーの年齢を秒単位で表示しています。</target>
        </trans-unit>
        <trans-unit id="f42f2d777b7b92e49dd946c55dcc61ca86a1306e" translate="yes" xml:space="preserve">
          <source>The age of session cookies, in seconds.</source>
          <target state="translated">セッションクッキーの年齢を秒単位で表示しています。</target>
        </trans-unit>
        <trans-unit id="bba9c79ab9e998fa799d86191a5961623b862fee" translate="yes" xml:space="preserve">
          <source>The age of the language cookie, in seconds.</source>
          <target state="translated">言葉のクッキーの年齢、秒単位。</target>
        </trans-unit>
        <trans-unit id="bbdeca32a5f892dadd83d5dc9290143a49e17aa5" translate="yes" xml:space="preserve">
          <source>The aggregation functions that are provided by Django are described in &lt;a href=&quot;#id5&quot;&gt;Aggregation Functions&lt;/a&gt; below.</source>
          <target state="translated">Djangoが提供する&lt;a href=&quot;#id5&quot;&gt;集計関数&lt;/a&gt;については、以下の集計関数で説明しています。</target>
        </trans-unit>
        <trans-unit id="a394c241a73dcf16ef28dd6d99546b20d0c9b49c" translate="yes" xml:space="preserve">
          <source>The aggregation functions that are provided by Django are described in &lt;a href=&quot;#id5&quot;&gt;Aggregation Functions&lt;/a&gt; below. Since aggregates are also &lt;a href=&quot;expressions&quot;&gt;query expressions&lt;/a&gt;, you may combine aggregates with other aggregates or values to create complex aggregates.</source>
          <target state="translated">Djangoが提供する&lt;a href=&quot;#id5&quot;&gt;集計関数&lt;/a&gt;については、以下の集計関数で説明しています。集計は&lt;a href=&quot;expressions&quot;&gt;クエリ式&lt;/a&gt;でもあるため、集計を他の集計または値と組み合わせて、複雑な集計を作成できます。</target>
        </trans-unit>
        <trans-unit id="0ab0b9b9f41018dfcb0f5fd43e3b8685da3a3afb" translate="yes" xml:space="preserve">
          <source>The alias for this particular template engine. It&amp;rsquo;s an identifier that allows selecting an engine for rendering. Aliases must be unique across all configured template engines.</source>
          <target state="translated">この特定のテンプレートエンジンのエイリアス。レンダリング用のエンジンを選択できる識別子です。エイリアスは、構成されたすべてのテンプレートエンジンで一意である必要があります。</target>
        </trans-unit>
        <trans-unit id="cfc7c6749a570961d900ab7b2a503c9968c35840" translate="yes" xml:space="preserve">
          <source>The alias of database on which a command will operate.</source>
          <target state="translated">コマンドが動作するデータベースのエイリアス。</target>
        </trans-unit>
        <trans-unit id="b0df1ef91b1e8c044ad74b3cbcb392434f976638" translate="yes" xml:space="preserve">
          <source>The alias of the database that this database should mirror during testing.</source>
          <target state="translated">テスト中にこのデータベースがミラーリングすべきデータベースのエイリアスです。</target>
        </trans-unit>
        <trans-unit id="6469f2d5a72b50e7fad9377cca3e0d567da3990f" translate="yes" xml:space="preserve">
          <source>The alternative approach would be to include all fields automatically, or blacklist only some. This fundamental approach is known to be much less secure and has led to serious exploits on major websites (e.g. &lt;a href=&quot;https://github.com/blog/1068-public-key-security-vulnerability-and-mitigation&quot;&gt;GitHub&lt;/a&gt;).</source>
          <target state="translated">別のアプローチは、すべてのフィールドを自動的に含めるか、一部のみをブラックリストに登録することです。この基本的なアプローチは安全性がはるかに低いことが知られており、主要なWebサイト（&lt;a href=&quot;https://github.com/blog/1068-public-key-security-vulnerability-and-mitigation&quot;&gt;GitHubなど&lt;/a&gt;）で深刻な悪用を引き起こしています。</target>
        </trans-unit>
        <trans-unit id="ae4b42165e8f82a9e531bc8dedc0027219982700" translate="yes" xml:space="preserve">
          <source>The alternative approach would be to include all fields automatically, or remove only some. This fundamental approach is known to be much less secure and has led to serious exploits on major websites (e.g. &lt;a href=&quot;https://github.com/blog/1068-public-key-security-vulnerability-and-mitigation&quot;&gt;GitHub&lt;/a&gt;).</source>
          <target state="translated">別のアプローチは、すべてのフィールドを自動的に含めるか、一部のみを削除することです。この基本的なアプローチは安全性がはるかに低いことが知られており、主要なWebサイト（&lt;a href=&quot;https://github.com/blog/1068-public-key-security-vulnerability-and-mitigation&quot;&gt;GitHubなど&lt;/a&gt;）で深刻な悪用につながっています。</target>
        </trans-unit>
        <trans-unit id="1e3a45d99d41b1eefef697c541685a517d46cd79" translate="yes" xml:space="preserve">
          <source>The amount by which the DATAFILE is extended when more space is required.</source>
          <target state="translated">より多くのスペースが必要な場合に、データファイルが拡張される量。</target>
        </trans-unit>
        <trans-unit id="94947285a4cb666cb8e5b4793dfdc1e0db59d188" translate="yes" xml:space="preserve">
          <source>The amount by which the DATAFILE_TMP is extended when more space is required.</source>
          <target state="translated">より多くのスペースが必要な場合に DATAFILE_TMP を拡張する量。</target>
        </trans-unit>
        <trans-unit id="c7871f8a1a2ff8050113b5cc680f1c73a7369757" translate="yes" xml:space="preserve">
          <source>The amount of request data is correlated to the amount of memory needed to process the request and populate the GET and POST dictionaries. Large requests could be used as a denial-of-service attack vector if left unchecked. Since web servers don&amp;rsquo;t typically perform deep request inspection, it&amp;rsquo;s not possible to perform a similar check at that level.</source>
          <target state="translated">要求データの量は、要求を処理し、GETディクショナリとPOSTディクショナリに入力するために必要なメモリの量と相関しています。チェックしないままにしておくと、大きなリクエストがサービス拒否攻撃のベクトルとして使用される可能性があります。Webサーバーは通常、詳細な要求検査を実行しないため、そのレベルで同様のチェックを実行することはできません。</target>
        </trans-unit>
        <trans-unit id="4e9d86f8479a4d5f6dc4d326941d351fbe5b2143" translate="yes" xml:space="preserve">
          <source>The answer is to add namespaces to your URLconf. In the &lt;code&gt;polls/urls.py&lt;/code&gt; file, go ahead and add an &lt;code&gt;app_name&lt;/code&gt; to set the application namespace:</source>
          <target state="translated">答えは、URLconfに名前空間を追加することです。では &lt;code&gt;polls/urls.py&lt;/code&gt; ファイル、先に行くと、追加 &lt;code&gt;app_name&lt;/code&gt; アプリケーションの名前空間を設定するために：</target>
        </trans-unit>
        <trans-unit id="acd88c208304cffe835e71369ce09e1ee8db81aa" translate="yes" xml:space="preserve">
          <source>The answer is to subclass &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; and provide your own implementation of the &lt;code&gt;get_context_data&lt;/code&gt; method. The default implementation adds the object being displayed to the template, but you can override it to send more:</source>
          <target state="translated">答えは、&lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt;をサブクラス化し、 &lt;code&gt;get_context_data&lt;/code&gt; メソッドの独自の実装を提供することです。デフォルトの実装では、表示されているオブジェクトをテンプレートに追加しますが、それをオーバーライドしてさらに送信することができます。</target>
        </trans-unit>
        <trans-unit id="34d8601c6f7a86dce107936f3e3b6d18983aa71e" translate="yes" xml:space="preserve">
          <source>The answer lies in the &lt;a href=&quot;../../ref/applications#django.apps.apps&quot;&gt;&lt;code&gt;app registry&lt;/code&gt;&lt;/a&gt;. When Django starts, it imports each application listed in &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, and then the &lt;code&gt;models&lt;/code&gt; module inside each application. Whenever a new model class is created, Django adds backward-relationships to any related models. If the related models haven&amp;rsquo;t been imported yet, Django keeps tracks of the relationships and adds them when the related models eventually are imported.</source>
          <target state="translated">答えは&lt;a href=&quot;../../ref/applications#django.apps.apps&quot;&gt; &lt;code&gt;app registry&lt;/code&gt; &lt;/a&gt;。Djangoが起動すると、&lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;にリストされている各アプリケーションがインポートされ、次に各アプリケーション内の &lt;code&gt;models&lt;/code&gt; モジュールがインポートされます。新しいモデルクラスが作成されるたびに、Djangoは関連モデルに下位関係を追加します。関連モデルがまだインポートされていない場合、Djangoは関係を追跡し、最終的に関連モデルがインポートされるときにそれらを追加します。</target>
        </trans-unit>
        <trans-unit id="d3ea665f80076e26a069279047d0310ffb1b56bd" translate="yes" xml:space="preserve">
          <source>The app should contain a &lt;code&gt;templatetags&lt;/code&gt; directory, at the same level as &lt;code&gt;models.py&lt;/code&gt;, &lt;code&gt;views.py&lt;/code&gt;, etc. If this doesn&amp;rsquo;t already exist, create it - don&amp;rsquo;t forget the &lt;code&gt;__init__.py&lt;/code&gt; file to ensure the directory is treated as a Python package.</source>
          <target state="translated">アプリが含まれている必要があります &lt;code&gt;templatetags&lt;/code&gt; のと同じレベルで、ディレクトリを &lt;code&gt;models.py&lt;/code&gt; 、 &lt;code&gt;views.py&lt;/code&gt; 忘れてはいけない-これが存在しない場合は、それを作成するなど、 &lt;code&gt;__init__.py&lt;/code&gt; ディレクトリのように扱われていることを確認するために、ファイルをPythonパッケージ。</target>
        </trans-unit>
        <trans-unit id="43acbdb9bc94165dd56f07a45d30a3d385157141" translate="yes" xml:space="preserve">
          <source>The app that contains the custom tags must be in &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; in order for the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt;&lt;code&gt;{% load %}&lt;/code&gt;&lt;/a&gt; tag to work. This is a security feature: It allows you to host Python code for many template libraries on a single host machine without enabling access to all of them for every Django installation.</source>
          <target state="translated">&lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt; &lt;code&gt;{% load %}&lt;/code&gt; &lt;/a&gt;タグが機能するためには、カスタムタグを含むアプリが&lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;にある必要があります。これはセキュリティ機能です。すべてのDjangoインストールですべてのテンプレートライブラリへのアクセスを有効にすることなく、単一のホストマシンで多くのテンプレートライブラリのPythonコードをホストできます。</target>
        </trans-unit>
        <trans-unit id="fbee76a6a7247021b51dd33628ae427b81689e96" translate="yes" xml:space="preserve">
          <source>The application namespace for the URL pattern that matches the URL.</source>
          <target state="translated">URL に一致する URL パターンのアプリケーション名前空間。</target>
        </trans-unit>
        <trans-unit id="062ae2346459e1a84f3f948fa5772936e7b98202" translate="yes" xml:space="preserve">
          <source>The application registry is initialized in three stages. At each stage, Django processes all applications in the order of &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">アプリケーションレジストリは、3つの段階で初期化されます。各段階で、Djangoはすべてのアプリケーションを&lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;の順序で処理します。</target>
        </trans-unit>
        <trans-unit id="0bd7315c4ec671207e710c4864fd93cebc6a48bc" translate="yes" xml:space="preserve">
          <source>The application registry provides the following public API. Methods that aren&amp;rsquo;t listed below are considered private and may change without notice.</source>
          <target state="translated">アプリケーションレジストリは、次のパブリックAPIを提供します。以下にリストされていないメソッドはプライベートと見なされ、予告なく変更される場合があります。</target>
        </trans-unit>
        <trans-unit id="fb87a75825e3c769fb7fe0058c3898c1df301530" translate="yes" xml:space="preserve">
          <source>The argon2 command-line utility and some other libraries interpret the &lt;code&gt;memory_cost&lt;/code&gt; parameter differently from the value that Django uses. The conversion is given by &lt;code&gt;memory_cost == 2 ** memory_cost_commandline&lt;/code&gt;.</source>
          <target state="translated">argon2コマンドラインユーティリティと他のいくつかのライブラリは、Djangoが使用する値とは異なる方法で &lt;code&gt;memory_cost&lt;/code&gt; パラメータを解釈します。変換は、 &lt;code&gt;memory_cost == 2 ** memory_cost_commandline&lt;/code&gt; によって与えられます。</target>
        </trans-unit>
        <trans-unit id="9cd5a4bec1e02d81814d911ca707218dc6b0e566" translate="yes" xml:space="preserve">
          <source>The argument must be an instance of a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclass or a time zone name.</source>
          <target state="translated">引数は、&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;サブクラスのインスタンスまたはタイムゾーン名である必要があります。</target>
        </trans-unit>
        <trans-unit id="cce0840fa770096bfd85ff5f0cda1e346a3ea756" translate="yes" xml:space="preserve">
          <source>The argument tells which template bit to output:</source>
          <target state="translated">引数は、出力するテンプレートビットを指定します。</target>
        </trans-unit>
        <trans-unit id="1679bd917f36b88ee02a5c144f28888ecc8129d6" translate="yes" xml:space="preserve">
          <source>The argument to the &lt;code&gt;aggregate()&lt;/code&gt; clause describes the aggregate value that we want to compute - in this case, the average of the &lt;code&gt;price&lt;/code&gt; field on the &lt;code&gt;Book&lt;/code&gt; model. A list of the aggregate functions that are available can be found in the &lt;a href=&quot;../../ref/models/querysets#aggregation-functions&quot;&gt;QuerySet reference&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;aggregate()&lt;/code&gt; 句の引数は、計算する集計値（この場合は、 &lt;code&gt;Book&lt;/code&gt; モデルの &lt;code&gt;price&lt;/code&gt; フィールドの平均）を示しています。使用可能な集約関数のリストは、&lt;a href=&quot;../../ref/models/querysets#aggregation-functions&quot;&gt;QuerySetリファレンスにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="38b9fbc0c3f8999f4800792e7de465e03c8ff2df" translate="yes" xml:space="preserve">
          <source>The arguments &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; for all these functions can be the name of a field or an expression returning a numeric data. Both are required.</source>
          <target state="translated">これらすべての関数の引数 &lt;code&gt;y&lt;/code&gt; および &lt;code&gt;x&lt;/code&gt; は、フィールドの名前または数値データを返す式にすることができます。両方が必要です。</target>
        </trans-unit>
        <trans-unit id="234842b53cd3fb64ec6b1d34807b3146242f2bc5" translate="yes" xml:space="preserve">
          <source>The arguments could be:</source>
          <target state="translated">議論は可能性があります。</target>
        </trans-unit>
        <trans-unit id="3a2e4d745e49dbe1d8f4700c23dbff5895949226" translate="yes" xml:space="preserve">
          <source>The arguments sent to a &lt;a href=&quot;#django.db.models.signals.pre_init&quot;&gt;&lt;code&gt;pre_init&lt;/code&gt;&lt;/a&gt; handler would be:</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.signals.pre_init&quot;&gt; &lt;code&gt;pre_init&lt;/code&gt; &lt;/a&gt;ハンドラーに送信される引数は次のようになります。</target>
        </trans-unit>
        <trans-unit id="b40a0dba514c3fca4aaf0a16475d475821c9133b" translate="yes" xml:space="preserve">
          <source>The arguments that would be passed to the view function, as parsed from the URL.</source>
          <target state="translated">ビュー関数に渡される引数は、URLからパースされたものです。</target>
        </trans-unit>
        <trans-unit id="4a07353e9e4ebaa205ffd31498b077e009895998" translate="yes" xml:space="preserve">
          <source>The arguments to &lt;code&gt;SearchVector&lt;/code&gt; can be any &lt;a href=&quot;../../models/expressions#django.db.models.Expression&quot;&gt;&lt;code&gt;Expression&lt;/code&gt;&lt;/a&gt; or the name of a field. Multiple arguments will be concatenated together using a space so that the search document includes them all.</source>
          <target state="translated">&lt;code&gt;SearchVector&lt;/code&gt; の引数には、任意の&lt;a href=&quot;../../models/expressions#django.db.models.Expression&quot;&gt; &lt;code&gt;Expression&lt;/code&gt; &lt;/a&gt;またはフィールドの名前を指定できます。検索ドキュメントにすべての引数が含まれるように、複数の引数はスペースを使用して連結されます。</target>
        </trans-unit>
        <trans-unit id="3d15cce58b664ebb221fa359cc4cd286c540775b" translate="yes" xml:space="preserve">
          <source>The arguments to the &lt;code&gt;serialize&lt;/code&gt; function are the format to serialize the data to (see &lt;a href=&quot;#id2&quot;&gt;Serialization formats&lt;/a&gt;) and a &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; to serialize. (Actually, the second argument can be any iterator that yields Django model instances, but it&amp;rsquo;ll almost always be a QuerySet).</source>
          <target state="translated">関数 &lt;code&gt;serialize&lt;/code&gt; の引数は、データをシリアル&lt;a href=&quot;#id2&quot;&gt;化する形式&lt;/a&gt;（シリアル化形式を参照）とシリアル化する&lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;です。（実際には、2番目の引数はDjangoモデルインスタンスを生成する任意のイテレータにすることができますが、ほとんどの場合はQuerySetになります）。</target>
        </trans-unit>
        <trans-unit id="fd4452cde3f328edd93934e5104148d9f957b809" translate="yes" xml:space="preserve">
          <source>The associated &lt;a href=&quot;#django.core.paginator.Paginator&quot;&gt;&lt;code&gt;Paginator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">関連付けられている&lt;a href=&quot;#django.core.paginator.Paginator&quot;&gt; &lt;code&gt;Paginator&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="bdf71dd3c049299e09a4f2f928d80ec30fe24bac" translate="yes" xml:space="preserve">
          <source>The async function is run in the event loop for the current thread, if one is present. If there is no current event loop, a new event loop is spun up specifically for the single async invocation and shut down again once it completes. In either situation, the async function will execute on a different thread to the calling code.</source>
          <target state="translated">async 関数は、現在のスレッドのイベントループが存在する場合は、そのイベントループ内で実行されます。現在のイベントループが存在しない場合は、単一の非同期呼び出しのために新しいイベントループが生成され、それが完了すると再びシャットダウンされます。いずれの場合も、非同期関数は呼び出したコードとは別のスレッドで実行されます。</target>
        </trans-unit>
        <trans-unit id="a982c503ad49b68a1bdb121a89507e8e4a71c6b5" translate="yes" xml:space="preserve">
          <source>The asynchronous client can also call synchronous views; it runs through Django&amp;rsquo;s &lt;a href=&quot;../async&quot;&gt;asynchronous request path&lt;/a&gt;, which supports both. Any view called through the &lt;code&gt;AsyncClient&lt;/code&gt; will get an &lt;code&gt;ASGIRequest&lt;/code&gt; object for its &lt;code&gt;request&lt;/code&gt; rather than the &lt;code&gt;WSGIRequest&lt;/code&gt; that the normal client creates.</source>
          <target state="translated">非同期クライアントは同期ビューを呼び出すこともできます。両方をサポートするDjangoの&lt;a href=&quot;../async&quot;&gt;非同期リクエストパス&lt;/a&gt;を介して実行されます。 &lt;code&gt;AsyncClient&lt;/code&gt; を介して呼び出されたビューは、通常のクライアントが作成する &lt;code&gt;WSGIRequest&lt;/code&gt; ではなく、その &lt;code&gt;request&lt;/code&gt; に対して &lt;code&gt;ASGIRequest&lt;/code&gt; オブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="914b747a079005b1889a3d7bacf74b3b2748bc6a" translate="yes" xml:space="preserve">
          <source>The attribute name of the manager, for example, &lt;code&gt;'objects'&lt;/code&gt;, to use for the model&amp;rsquo;s &lt;a href=&quot;../../topics/db/managers#django.db.models.Model._base_manager&quot;&gt;&lt;code&gt;_base_manager&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">モデルの&lt;a href=&quot;../../topics/db/managers#django.db.models.Model._base_manager&quot;&gt; &lt;code&gt;_base_manager&lt;/code&gt; &lt;/a&gt;に使用するマネージャーの属性名（例： &lt;code&gt;'objects'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="008b3dad8d22ca87ea5caad2736b3f94ac59b0d8" translate="yes" xml:space="preserve">
          <source>The attribute value for the given target node (e.g. &lt;code&gt;'PROJCS'&lt;/code&gt;). The index keyword specifies an index of the child node to return.</source>
          <target state="translated">指定されたターゲットノードの属性値（例： &lt;code&gt;'PROJCS'&lt;/code&gt; ）。indexキーワードは、返す子ノードのインデックスを指定します。</target>
        </trans-unit>
        <trans-unit id="3942b96a9448810f41feb915fe51e8f59804da30" translate="yes" xml:space="preserve">
          <source>The auth framework uses the following &lt;a href=&quot;../../topics/signals&quot;&gt;signals&lt;/a&gt; that can be used for notification when a user logs in or out.</source>
          <target state="translated">認証フレームワークは、ユーザーがログインまたはログアウトするときに通知に使用できる次の&lt;a href=&quot;../../topics/signals&quot;&gt;信号&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="ecd508ff20efd3eb588e62639fcb2471a66c3d8a" translate="yes" xml:space="preserve">
          <source>The auth system consists of:</source>
          <target state="translated">authシステムは構成されています。</target>
        </trans-unit>
        <trans-unit id="61a104070b2969d0c5f813a479d886d9764fecab" translate="yes" xml:space="preserve">
          <source>The authentication system in Django aims to be very generic and doesn&amp;rsquo;t provide some features commonly found in web authentication systems. Solutions for some of these common problems have been implemented in third-party packages:</source>
          <target state="translated">Djangoの認証システムは非常に一般的なものを目指しており、Web認証システムで一般的に見られるいくつかの機能を提供していません。これらの一般的な問題のいくつかの解決策は、サードパーティのパッケージに実装されています。</target>
        </trans-unit>
        <trans-unit id="ec77eb11767b1885c805cb1b653e43962a44298c" translate="yes" xml:space="preserve">
          <source>The authentication that comes with Django is good enough for most common cases, but you may have needs not met by the out-of-the-box defaults. Customizing authentication in your projects requires understanding what points of the provided system are extensible or replaceable. This document provides details about how the auth system can be customized.</source>
          <target state="translated">Django に付属している認証は、ほとんどの一般的なケースでは十分ですが、箱から出してすぐのデフォルトでは満たされないニーズがあるかもしれません。プロジェクトで認証をカスタマイズするには、提供されているシステムのどの点が拡張可能か、あるいは置き換え可能かを理解する必要があります。このドキュメントでは、認証システムをカスタマイズする方法について詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="cc1f5f7935160d4a0b3a0685c00899189bb8f19b" translate="yes" xml:space="preserve">
          <source>The auto-escaping tag passes its effect onto templates that extend the current one as well as templates included via the &lt;a href=&quot;builtins#std:templatetag-include&quot;&gt;&lt;code&gt;include&lt;/code&gt;&lt;/a&gt; tag, just like all block tags. For example:</source>
          <target state="translated">自動エスケープタグは、現在のタグを拡張するテンプレートと、すべてのブロックタグと同様に、&lt;a href=&quot;builtins#std:templatetag-include&quot;&gt; &lt;code&gt;include&lt;/code&gt; &lt;/a&gt;タグを介してインクルードされるテンプレートにその効果を渡します。例えば：</target>
        </trans-unit>
        <trans-unit id="5196492f954094c3d65f1964effd40af3faad1a8" translate="yes" xml:space="preserve">
          <source>The automatic Django administrative interface. For more information, see &lt;a href=&quot;../../intro/tutorial02&quot;&gt;Tutorial 2&lt;/a&gt; and the &lt;a href=&quot;admin/index&quot;&gt;admin documentation&lt;/a&gt;.</source>
          <target state="translated">自動Django管理インターフェース。詳細については、&lt;a href=&quot;../../intro/tutorial02&quot;&gt;チュートリアル2&lt;/a&gt;と&lt;a href=&quot;admin/index&quot;&gt;管理ドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d8463abda226aba2d4b03207a9828738ce89ce27" translate="yes" xml:space="preserve">
          <source>The automatically-created &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;Restaurant&lt;/code&gt; that links it to &lt;code&gt;Place&lt;/code&gt; looks like this:</source>
          <target state="translated">&lt;code&gt;Place&lt;/code&gt; にリンクする &lt;code&gt;Restaurant&lt;/code&gt; で自動的に作成された&lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt;は次のようになります。</target>
        </trans-unit>
        <trans-unit id="100dc0780f76c39f4f394eb5e29ec95f31614c47" translate="yes" xml:space="preserve">
          <source>The available options are driver-specific and are described in the documentation of each driver.</source>
          <target state="translated">利用可能なオプションはドライバ固有のもので、各ドライバのドキュメントに記載されています。</target>
        </trans-unit>
        <trans-unit id="8fcc676ce725143c073349a90333914bbdd1f51e" translate="yes" xml:space="preserve">
          <source>The backend to use for sending emails. For the list of available backends see &lt;a href=&quot;../topics/email&quot;&gt;Sending email&lt;/a&gt;.</source>
          <target state="translated">メールの送信に使用するバックエンド。使用可能なバックエンドのリストについては、&lt;a href=&quot;../topics/email&quot;&gt;メールの送信を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="576799d745db3f1197d2fda500069280a6d9134f" translate="yes" xml:space="preserve">
          <source>The backend used for signing cookies and other data.</source>
          <target state="translated">クッキーなどのデータへの署名に使用するバックエンド。</target>
        </trans-unit>
        <trans-unit id="b8a1264ca89d12e79ce195b56da626da227971ae" translate="yes" xml:space="preserve">
          <source>The backends that use cookies &amp;ndash; &lt;a href=&quot;contrib/messages#django.contrib.messages.storage.cookie.CookieStorage&quot;&gt;&lt;code&gt;CookieStorage&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;contrib/messages#django.contrib.messages.storage.fallback.FallbackStorage&quot;&gt;&lt;code&gt;FallbackStorage&lt;/code&gt;&lt;/a&gt; &amp;ndash; use the value of &lt;a href=&quot;#std:setting-SESSION_COOKIE_DOMAIN&quot;&gt;&lt;code&gt;SESSION_COOKIE_DOMAIN&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#std:setting-SESSION_COOKIE_SECURE&quot;&gt;&lt;code&gt;SESSION_COOKIE_SECURE&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#std:setting-SESSION_COOKIE_HTTPONLY&quot;&gt;&lt;code&gt;SESSION_COOKIE_HTTPONLY&lt;/code&gt;&lt;/a&gt; when setting their cookies.</source>
          <target state="translated">Cookieを使用するバックエンド（&lt;a href=&quot;contrib/messages#django.contrib.messages.storage.cookie.CookieStorage&quot;&gt; &lt;code&gt;CookieStorage&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;contrib/messages#django.contrib.messages.storage.fallback.FallbackStorage&quot;&gt; &lt;code&gt;FallbackStorage&lt;/code&gt; )&lt;/a&gt;では、Cookieを設定するときに&lt;a href=&quot;#std:setting-SESSION_COOKIE_DOMAIN&quot;&gt; &lt;code&gt;SESSION_COOKIE_DOMAIN&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#std:setting-SESSION_COOKIE_SECURE&quot;&gt; &lt;code&gt;SESSION_COOKIE_SECURE&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#std:setting-SESSION_COOKIE_HTTPONLY&quot;&gt; &lt;code&gt;SESSION_COOKIE_HTTPONLY&lt;/code&gt; の&lt;/a&gt;値を使用します。</target>
        </trans-unit>
        <trans-unit id="964535ae016832b967055319bcc6c7fb352a308a" translate="yes" xml:space="preserve">
          <source>The base GDAL exception, indicating a GDAL-related error.</source>
          <target state="translated">GDAL に関連したエラーを示す基底 GDAL 例外。</target>
        </trans-unit>
        <trans-unit id="bda2f3d3bce60c32a775aeccb73cbe6de4e34b7c" translate="yes" xml:space="preserve">
          <source>The base GEOS exception, indicates a GEOS-related error.</source>
          <target state="translated">ベースのGEOS例外は、GEOS関連のエラーを示します。</target>
        </trans-unit>
        <trans-unit id="6b0141fd507b4c5e582f814df4e6601f267735ad" translate="yes" xml:space="preserve">
          <source>The base class for &lt;a href=&quot;models/class#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;Model.DoesNotExist&lt;/code&gt;&lt;/a&gt; exceptions. A &lt;code&gt;try/except&lt;/code&gt; for &lt;code&gt;ObjectDoesNotExist&lt;/code&gt; will catch &lt;a href=&quot;models/class#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;&lt;/a&gt; exceptions for all models.</source>
          <target state="translated">&lt;a href=&quot;models/class#django.db.models.Model.DoesNotExist&quot;&gt; &lt;code&gt;Model.DoesNotExist&lt;/code&gt; &lt;/a&gt;例外の基本クラス。 &lt;code&gt;try/except&lt;/code&gt; ため &lt;code&gt;ObjectDoesNotExist&lt;/code&gt; がキャッチする&lt;a href=&quot;models/class#django.db.models.Model.DoesNotExist&quot;&gt; &lt;code&gt;DoesNotExist&lt;/code&gt; &lt;/a&gt;すべてのモデルの例外を。</target>
        </trans-unit>
        <trans-unit id="0b0398840b7f3108351339309d0e357201b34e39" translate="yes" xml:space="preserve">
          <source>The base class for &lt;a href=&quot;models/class#django.db.models.Model.MultipleObjectsReturned&quot;&gt;&lt;code&gt;Model.MultipleObjectsReturned&lt;/code&gt;&lt;/a&gt; exceptions. A &lt;code&gt;try/except&lt;/code&gt; for &lt;code&gt;MultipleObjectsReturned&lt;/code&gt; will catch &lt;a href=&quot;models/class#django.db.models.Model.MultipleObjectsReturned&quot;&gt;&lt;code&gt;MultipleObjectsReturned&lt;/code&gt;&lt;/a&gt; exceptions for all models.</source>
          <target state="translated">&lt;a href=&quot;models/class#django.db.models.Model.MultipleObjectsReturned&quot;&gt; &lt;code&gt;Model.MultipleObjectsReturned&lt;/code&gt; &lt;/a&gt;例外の基本クラス。 &lt;code&gt;try/except&lt;/code&gt; ため &lt;code&gt;MultipleObjectsReturned&lt;/code&gt; がキャッチします&lt;a href=&quot;models/class#django.db.models.Model.MultipleObjectsReturned&quot;&gt; &lt;code&gt;MultipleObjectsReturned&lt;/code&gt; の&lt;/a&gt;すべてのモデルの例外を。</target>
        </trans-unit>
        <trans-unit id="906638656f4dbe6467a42477b52e04d7b0ece166" translate="yes" xml:space="preserve">
          <source>The base class for &lt;a href=&quot;models/instances#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;&lt;/a&gt; exceptions; a &lt;code&gt;try/except&lt;/code&gt; for &lt;code&gt;ObjectDoesNotExist&lt;/code&gt; will catch &lt;a href=&quot;models/instances#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;&lt;/a&gt; exceptions for all models.</source>
          <target state="translated">&lt;a href=&quot;models/instances#django.db.models.Model.DoesNotExist&quot;&gt; &lt;code&gt;DoesNotExist&lt;/code&gt; &lt;/a&gt;例外の基本クラス。 &lt;code&gt;try/except&lt;/code&gt; ため &lt;code&gt;ObjectDoesNotExist&lt;/code&gt; がキャッチする&lt;a href=&quot;models/instances#django.db.models.Model.DoesNotExist&quot;&gt; &lt;code&gt;DoesNotExist&lt;/code&gt; &lt;/a&gt;すべてのモデルの例外を。</target>
        </trans-unit>
        <trans-unit id="e36fab02d6b59f2de4dd10a1261a1293cf20742c" translate="yes" xml:space="preserve">
          <source>The base class for geometry fields.</source>
          <target state="translated">ジオメトリフィールドの基底クラスです。</target>
        </trans-unit>
        <trans-unit id="122abe985212517b35de16354fc8007e773f67a4" translate="yes" xml:space="preserve">
          <source>The base class from which all management commands ultimately derive.</source>
          <target state="translated">すべての管理コマンドが最終的に派生する基底クラス。</target>
        </trans-unit>
        <trans-unit id="ff98f09e4515cf46904df38f62dc4a6bda0598f3" translate="yes" xml:space="preserve">
          <source>The base implementation of this method requires that the &lt;code&gt;self.object&lt;/code&gt; attribute be set by the view (even if &lt;code&gt;None&lt;/code&gt;). Be sure to do this if you are using this mixin without one of the built-in views that does so.</source>
          <target state="translated">このメソッドの基本実装では、ビューが &lt;code&gt;self.object&lt;/code&gt; 属性を設定する必要があります（ &lt;code&gt;None&lt;/code&gt; の場合でも）。このミックスインを使用する組み込みビューの1つなしでこのミックスインを使用している場合は、必ずこれを実行してください。</target>
        </trans-unit>
        <trans-unit id="62452647669ab0cad5d37dc37a48325331af7a79" translate="yes" xml:space="preserve">
          <source>The base implementation uses &lt;a href=&quot;../../forms/models#django.forms.models.modelform_factory&quot;&gt;&lt;code&gt;modelform_factory()&lt;/code&gt;&lt;/a&gt; to subclass &lt;a href=&quot;#django.contrib.admin.ModelAdmin.form&quot;&gt;&lt;code&gt;form&lt;/code&gt;&lt;/a&gt;, modified by attributes such as &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt;&lt;code&gt;fields&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.admin.ModelAdmin.exclude&quot;&gt;&lt;code&gt;exclude&lt;/code&gt;&lt;/a&gt;. So, for example, if you wanted to offer additional fields to superusers, you could swap in a different base form like so:</source>
          <target state="translated">基本実装は、&lt;a href=&quot;../../forms/models#django.forms.models.modelform_factory&quot;&gt; &lt;code&gt;modelform_factory()&lt;/code&gt; &lt;/a&gt;を使用してformをサブクラス化&lt;a href=&quot;#django.contrib.admin.ModelAdmin.form&quot;&gt; &lt;code&gt;form&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt; &lt;code&gt;fields&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#django.contrib.admin.ModelAdmin.exclude&quot;&gt; &lt;code&gt;exclude&lt;/code&gt; &lt;/a&gt;などの属性によって変更されます。したがって、たとえば、スーパーユーザーに追加のフィールドを提供したい場合は、次のように別の基本フォームにスワップできます。</target>
        </trans-unit>
        <trans-unit id="dd857193078c9ecf614877cf19f32fb71dcd22ff" translate="yes" xml:space="preserve">
          <source>The basename to use for the GeoIP city data file. Defaults to &lt;code&gt;'GeoLite2-City.mmdb'&lt;/code&gt;.</source>
          <target state="translated">GeoIP都市データファイルに使用するベース名。デフォルトは &lt;code&gt;'GeoLite2-City.mmdb'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9d2ca8058de41f46f3080948ecd7b174b87ede18" translate="yes" xml:space="preserve">
          <source>The basename to use for the GeoIP country data file. Defaults to &lt;code&gt;'GeoLite2-Country.mmdb'&lt;/code&gt;.</source>
          <target state="translated">GeoIP国データファイルに使用するベース名。デフォルトは &lt;code&gt;'GeoLite2-Country.mmdb'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1452396f8cd7cb28a94c915c5443b1afbfbb3e91" translate="yes" xml:space="preserve">
          <source>The basic XML serialization format looks like this:</source>
          <target state="translated">基本的なXMLのシリアライズ形式は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="1d9ebed1ce04c5f94076311a0a3f830cace13fce" translate="yes" xml:space="preserve">
          <source>The basic interface is:</source>
          <target state="translated">基本的なインターフェースは</target>
        </trans-unit>
        <trans-unit id="ebec57daa507b27696e753d25c527f7368179051" translate="yes" xml:space="preserve">
          <source>The basic outline of putting static files into production consists of two steps: run the &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; command when static files change, then arrange for the collected static files directory (&lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt;) to be moved to the static file server and served. Depending on &lt;a href=&quot;../../ref/settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt;, files may need to be moved to a new location manually or the &lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.storage.StaticFilesStorage.post_process&quot;&gt;&lt;code&gt;post_process&lt;/code&gt;&lt;/a&gt; method of the &lt;code&gt;Storage&lt;/code&gt; class might take care of that.</source>
          <target state="translated">静的ファイルを本番&lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt; &lt;code&gt;STATIC_ROOT&lt;/code&gt; &lt;/a&gt;配置する基本的な概要は、静的ファイルが変更されたときにcollectstaticコマンドを実行し、&lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt;された静的ファイルディレクトリ（STATIC_ROOT）を静的ファイルサーバーに移動して提供するように準備するという2つのステップで構成されます。&lt;a href=&quot;../../ref/settings#std:setting-STATICFILES_STORAGE&quot;&gt; &lt;code&gt;STATICFILES_STORAGE&lt;/code&gt; &lt;/a&gt;によっては、ファイルを新しい場所に手動で移動する必要がある場合や、 &lt;code&gt;Storage&lt;/code&gt; クラスの&lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.storage.StaticFilesStorage.post_process&quot;&gt; &lt;code&gt;post_process&lt;/code&gt; &lt;/a&gt;メソッドがそれを処理する場合があります。</target>
        </trans-unit>
        <trans-unit id="1248c42957e9052c54ba9f94f75f3179ad9777de" translate="yes" xml:space="preserve">
          <source>The basic workflow of Django&amp;rsquo;s admin is, in a nutshell, &amp;ldquo;select an object, then change it.&amp;rdquo; This works well for a majority of use cases. However, if you need to make the same change to many objects at once, this workflow can be quite tedious.</source>
          <target state="translated">Djangoの管理の基本的なワークフローは、簡単に言えば、「オブジェクトを選択してから変更する」というものです。これは、ほとんどのユースケースでうまく機能します。ただし、一度に多くのオブジェクトに同じ変更を加える必要がある場合、このワークフローは非常に面倒な場合があります。</target>
        </trans-unit>
        <trans-unit id="dd7a1e79deca9ce13b590c6b3440a4ec69eb8a2d" translate="yes" xml:space="preserve">
          <source>The basics</source>
          <target state="translated">基本的なこと</target>
        </trans-unit>
        <trans-unit id="ed93bbf6bfa5dca06573f5f5c3e836a23fcac4cb" translate="yes" xml:space="preserve">
          <source>The basics:</source>
          <target state="translated">基本中の基本。</target>
        </trans-unit>
        <trans-unit id="19819b533035887c9696af9f0a0e1aca66195bd4" translate="yes" xml:space="preserve">
          <source>The beginner tutorial ends here. In the meantime, you might want to check out some pointers on &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/intro/whatsnext/&quot;&gt;where to go from here&lt;/a&gt;.</source>
          <target state="translated">初心者向けチュートリアルはこれで終了です。それ&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/intro/whatsnext/&quot;&gt;までの間、ここからどこへ行くべき&lt;/a&gt;かについて、いくつかの指針を確認することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="fd1bbbef13b3aca2888e00241ee419d00c8eb30a" translate="yes" xml:space="preserve">
          <source>The beginner tutorial ends here. In the meantime, you might want to check out some pointers on &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/intro/whatsnext/&quot;&gt;where to go from here&lt;/a&gt;.</source>
          <target state="translated">初心者向けチュートリアルはここで終了します。それ&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/intro/whatsnext/&quot;&gt;までの間、ここからどこに行くべき&lt;/a&gt;かについてのいくつかのポインタをチェックすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="03bab636f3eb8e10885855023760c7501a9934c3" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; for queries that span multi-value relationships, as described above, is not implemented equivalently for &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code&gt;exclude()&lt;/code&gt;&lt;/a&gt;. Instead, the conditions in a single &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code&gt;exclude()&lt;/code&gt;&lt;/a&gt; call will not necessarily refer to the same item.</source>
          <target state="translated">上記のように、複数値の関係にまたがるクエリに対する&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;の動作は、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt; &lt;code&gt;exclude()&lt;/code&gt; には&lt;/a&gt;同等に実装されていません。代わりに、単一の&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt; &lt;code&gt;exclude()&lt;/code&gt; &lt;/a&gt;呼び出しの条件は、必ずしも同じ項目を参照するわけではありません。</target>
        </trans-unit>
        <trans-unit id="f9e766c83dff95a6d83827725e91012dbcc59b2f" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;Greatest&lt;/code&gt; when one or more expression may be &lt;code&gt;null&lt;/code&gt; varies between databases:</source>
          <target state="translated">1つ以上の式が &lt;code&gt;null&lt;/code&gt; の可能性がある場合の &lt;code&gt;Greatest&lt;/code&gt; の動作は、データベースによって異なります。</target>
        </trans-unit>
        <trans-unit id="a351643e5f00ff474c7779a021e02617a4da171f" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;Least&lt;/code&gt; when one or more expression may be &lt;code&gt;null&lt;/code&gt; varies between databases:</source>
          <target state="translated">1つ以上の式が &lt;code&gt;null&lt;/code&gt; の可能性がある場合の &lt;code&gt;Least&lt;/code&gt; の動作は、データベース間で異なります。</target>
        </trans-unit>
        <trans-unit id="057b993325ccc80fcf95bd92fbdb2a382a9b442b" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;get_context_data()&lt;/code&gt; mimics that of &lt;a href=&quot;../../topics/class-based-views/generic-display#adding-extra-context&quot;&gt;generic views&lt;/a&gt; - you&amp;rsquo;re supposed to call &lt;code&gt;super()&lt;/code&gt; to retrieve context data from parent class, add your data and return the modified dictionary.</source>
          <target state="translated">行動 &lt;code&gt;get_context_data()&lt;/code&gt; というの模倣&lt;a href=&quot;../../topics/class-based-views/generic-display#adding-extra-context&quot;&gt;汎用ビュー&lt;/a&gt; -あなたがコールになっている &lt;code&gt;super()&lt;/code&gt; 、親クラスからコンテキストデータを取得し、あなたのデータを追加、修正辞書を返すように。</target>
        </trans-unit>
        <trans-unit id="aa169d725191490a1aea662b8802083bc3e86592" translate="yes" xml:space="preserve">
          <source>The behavior of this command changes depending on the arguments provided:</source>
          <target state="translated">このコマンドの動作は、提供された引数によって変化します。</target>
        </trans-unit>
        <trans-unit id="90325f4fcebc4171004e318ae97a21a3e65143dc" translate="yes" xml:space="preserve">
          <source>The better way of doing this would be to make the parameter specifiable at run time &amp;ndash; i.e., when the class is instantiated. To do that, implement &lt;code&gt;Field.__init__()&lt;/code&gt;, like so:</source>
          <target state="translated">これを行うより良い方法は、実行時、つまりクラスがインスタンス化されるときにパラメーターを指定可能にすることです。そのためには、次のように &lt;code&gt;Field.__init__()&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="a75382c8cbcc3dbba796094ccab37c0db21da61b" translate="yes" xml:space="preserve">
          <source>The body of the response, as a bytestring. This is the final page content as rendered by the view, or any error message.</source>
          <target state="translated">レスポンスの本文をバイト列で指定します。これは、ビューによってレンダリングされた最終的なページの内容、またはエラーメッセージです。</target>
        </trans-unit>
        <trans-unit id="ba0635085b4b53dff09b77c3576d7e12b2e8304f" translate="yes" xml:space="preserve">
          <source>The body of the response, parsed as JSON. Extra keyword arguments are passed to &lt;a href=&quot;https://docs.python.org/3/library/json.html#json.loads&quot;&gt;&lt;code&gt;json.loads()&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">JSONとして解析された応答の本文。追加のキーワード引数が&lt;a href=&quot;https://docs.python.org/3/library/json.html#json.loads&quot;&gt; &lt;code&gt;json.loads()&lt;/code&gt; に&lt;/a&gt;渡されます。例えば：</target>
        </trans-unit>
        <trans-unit id="295e8ad1dcf0a388bc37ac83533ba8b1618e59e6" translate="yes" xml:space="preserve">
          <source>The boolean return value was added.</source>
          <target state="translated">ブール値の戻り値を追加しました。</target>
        </trans-unit>
        <trans-unit id="d878d39730eba5ab369120caf235c7191a89071e" translate="yes" xml:space="preserve">
          <source>The bottom part of the page gives you a couple of options:</source>
          <target state="translated">ページの下部には、いくつかのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="f53147ed081ba2076d0ad7d8eaa79bd9a6ceb4d2" translate="yes" xml:space="preserve">
          <source>The boundary of this geometry, as a new &lt;a href=&quot;#django.contrib.gis.gdal.OGRGeometry&quot;&gt;&lt;code&gt;OGRGeometry&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">新しい&lt;a href=&quot;#django.contrib.gis.gdal.OGRGeometry&quot;&gt; &lt;code&gt;OGRGeometry&lt;/code&gt; &lt;/a&gt;オブジェクトとしてのこのジオメトリの境界。</target>
        </trans-unit>
        <trans-unit id="db71c7ecdde31216cce0a338b9b4ebddfeb78321" translate="yes" xml:space="preserve">
          <source>The browser XSS filter is a useful defense measure, but must not be relied upon exclusively. It cannot detect all XSS attacks and not all browsers support the header. Ensure you are still &lt;a href=&quot;../topics/security#cross-site-scripting&quot;&gt;validating and sanitizing&lt;/a&gt; all input to prevent XSS attacks.</source>
          <target state="translated">ブラウザーのXSSフィルターは有用な防御手段ですが、これだけに依存してはなりません。すべてのXSS攻撃を検出できるわけではなく、すべてのブラウザーがヘッダーをサポートしているわけではありません。XSS攻撃を防ぐために、すべての入力をまだ&lt;a href=&quot;../topics/security#cross-site-scripting&quot;&gt;検証およびサニタイズし&lt;/a&gt;ていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="2db9f0d686102d4ea9feac07a108844a5a917444" translate="yes" xml:space="preserve">
          <source>The built-in authentication forms make certain assumptions about the user model that they are working with. If you&amp;rsquo;re using a &lt;a href=&quot;customizing#auth-custom-user&quot;&gt;custom user model&lt;/a&gt;, it may be necessary to define your own forms for the authentication system. For more information, refer to the documentation about &lt;a href=&quot;customizing#custom-users-and-the-built-in-auth-forms&quot;&gt;using the built-in authentication forms with custom user models&lt;/a&gt;.</source>
          <target state="translated">組み込みの認証フォームは、使用しているユーザーモデルについて特定の前提条件を備えています。&lt;a href=&quot;customizing#auth-custom-user&quot;&gt;カスタムユーザーモデル&lt;/a&gt;を使用している場合は、認証システム用に独自のフォームを定義する必要がある場合があります。詳しく&lt;a href=&quot;customizing#custom-users-and-the-built-in-auth-forms&quot;&gt;は、カスタムユーザーモデルでの組み込み認証フォームの使用&lt;/a&gt;に関するドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="b3931e44aa7f9b6bbd3694ca1edd00559719fb3d" translate="yes" xml:space="preserve">
          <source>The built-in filesystem storage class</source>
          <target state="translated">組み込みのファイルシステムストレージクラス</target>
        </trans-unit>
        <trans-unit id="6b4fb3d576cb23d1e45270bd0cd300dd05954125" translate="yes" xml:space="preserve">
          <source>The built-in levels, which can be imported from &lt;code&gt;django.contrib.messages&lt;/code&gt; directly, are:</source>
          <target state="translated">&lt;code&gt;django.contrib.messages&lt;/code&gt; から直接インポートできる組み込みレベルは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="03c82f12b4874262b0dda2f2ddbd52c0a7d34ac6" translate="yes" xml:space="preserve">
          <source>The builtin template tag &lt;a href=&quot;../templates/builtins#std:templatetag-get_static_prefix&quot;&gt;&lt;code&gt;get_static_prefix&lt;/code&gt;&lt;/a&gt; which populates a template variable with the static prefix &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; to be used as a variable or directly.</source>
          <target state="translated">変数として、または変数として直接使用される静的接頭辞&lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt;をテンプレート変数に入力する組み込みテンプレートタグ&lt;a href=&quot;../templates/builtins#std:templatetag-get_static_prefix&quot;&gt; &lt;code&gt;get_static_prefix&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="297fcb645fc48aff8a0298d4a2ce8e1f82194e37" translate="yes" xml:space="preserve">
          <source>The builtin template tag &lt;a href=&quot;../templates/builtins#std:templatetag-static&quot;&gt;&lt;code&gt;static&lt;/code&gt;&lt;/a&gt; which takes a path and urljoins it with the static prefix &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; is installed, the tag uses the &lt;code&gt;url()&lt;/code&gt; method of the &lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">パスを取り、静的プレフィックス&lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; で&lt;/a&gt;それをurljoinする組み込みテンプレートタグ&lt;a href=&quot;../templates/builtins#std:templatetag-static&quot;&gt; &lt;code&gt;static&lt;/code&gt; &lt;/a&gt;。場合 &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; がインストールされ、タグが使用 &lt;code&gt;url()&lt;/code&gt; のメソッド&lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt; &lt;code&gt;STATICFILES_STORAGE&lt;/code&gt; を&lt;/a&gt;代わりに。</target>
        </trans-unit>
        <trans-unit id="e947c073ddafa7efa9d10c0ab2187ebe8664d17e" translate="yes" xml:space="preserve">
          <source>The cache &lt;a href=&quot;../ref/settings#std:setting-CACHES-LOCATION&quot;&gt;&lt;code&gt;LOCATION&lt;/code&gt;&lt;/a&gt; is used to identify individual memory stores. If you only have one &lt;code&gt;locmem&lt;/code&gt; cache, you can omit the &lt;a href=&quot;../ref/settings#std:setting-CACHES-LOCATION&quot;&gt;&lt;code&gt;LOCATION&lt;/code&gt;&lt;/a&gt;; however, if you have more than one local memory cache, you will need to assign a name to at least one of them in order to keep them separate.</source>
          <target state="translated">キャッシュ&lt;a href=&quot;../ref/settings#std:setting-CACHES-LOCATION&quot;&gt; &lt;code&gt;LOCATION&lt;/code&gt; &lt;/a&gt;は、個々のメモリストアを識別するために使用されます。 &lt;code&gt;locmem&lt;/code&gt; キャッシュが1つしかない場合は、&lt;a href=&quot;../ref/settings#std:setting-CACHES-LOCATION&quot;&gt; &lt;code&gt;LOCATION&lt;/code&gt; &lt;/a&gt;を省略できます。ただし、ローカルメモリキャッシュが複数ある場合は、それらを分離しておくために、少なくとも1つに名前を割り当てる必要があります。</target>
        </trans-unit>
        <trans-unit id="26cd46adbf068b78511927170d0cd07d86f0fd4d" translate="yes" xml:space="preserve">
          <source>The cache backend to use. The built-in cache backends are:</source>
          <target state="translated">使用するキャッシュバックエンド。組み込みのキャッシュバックエンドは</target>
        </trans-unit>
        <trans-unit id="7e1154f774126ce5ad699da0f651f6187725e5fa" translate="yes" xml:space="preserve">
          <source>The cache connection to use for the &lt;a href=&quot;../topics/cache#the-per-site-cache&quot;&gt;cache middleware&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../topics/cache#the-per-site-cache&quot;&gt;キャッシュミドルウェア&lt;/a&gt;に使用するキャッシュ接続。</target>
        </trans-unit>
        <trans-unit id="e0d8ccb98c19fec4a4ed9ca090e17f49252587bc" translate="yes" xml:space="preserve">
          <source>The cache settings when opening up the GeoIP datasets. May be an integer in (0, 1, 2, 4, 8) corresponding to the &lt;code&gt;MODE_AUTO&lt;/code&gt;, &lt;code&gt;MODE_MMAP_EXT&lt;/code&gt;, &lt;code&gt;MODE_MMAP&lt;/code&gt;, and &lt;code&gt;GEOIP_INDEX_CACHE&lt;/code&gt;&lt;code&gt;MODE_MEMORY&lt;/code&gt; C API settings, respectively. Defaults to 0 (&lt;code&gt;MODE_AUTO&lt;/code&gt;).</source>
          <target state="translated">GeoIPデータセットを開くときのキャッシュ設定。 &lt;code&gt;MODE_AUTO&lt;/code&gt; 、 &lt;code&gt;MODE_MMAP_EXT&lt;/code&gt; 、 &lt;code&gt;MODE_MMAP&lt;/code&gt; 、および &lt;code&gt;GEOIP_INDEX_CACHE&lt;/code&gt; &lt;code&gt;MODE_MEMORY&lt;/code&gt; C API設定にそれぞれ対応する（0、1、2、4、8）の整数の場合があります。デフォルトは0（ &lt;code&gt;MODE_AUTO&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="3acdd70132d51d22420eb1175657196364abf659" translate="yes" xml:space="preserve">
          <source>The cache system requires a small amount of setup. Namely, you have to tell it where your cached data should live &amp;ndash; whether in a database, on the filesystem or directly in memory. This is an important decision that affects your cache&amp;rsquo;s performance; yes, some cache types are faster than others.</source>
          <target state="translated">キャッシュシステムには、少量の設定が必要です。つまり、データベース内、ファイルシステム上、またはメモリ内に直接、キャッシュされたデータをどこに置くかを指定する必要があります。これは、キャッシュのパフォーマンスに影響を与える重要な決定です。はい、一部のキャッシュタイプは他のキャッシュタイプより高速です。</target>
        </trans-unit>
        <trans-unit id="412d65e9c538bfe4a372f72f3322c99a2e6d8093" translate="yes" xml:space="preserve">
          <source>The cache timeout can be a template variable, as long as the template variable resolves to an integer value. For example, if the template variable &lt;code&gt;my_timeout&lt;/code&gt; is set to the value &lt;code&gt;600&lt;/code&gt;, then the following two examples are equivalent:</source>
          <target state="translated">テンプレート変数が整数値に解決される限り、キャッシュタイムアウトはテンプレート変数にすることができます。たとえば、テンプレート変数 &lt;code&gt;my_timeout&lt;/code&gt; が値 &lt;code&gt;600&lt;/code&gt; に設定されている場合、次の2つの例は同等です。</target>
        </trans-unit>
        <trans-unit id="815d25ed19888d1432fe98c192f8df2fbb8ec940" translate="yes" xml:space="preserve">
          <source>The cache timeout set by &lt;code&gt;cache_page&lt;/code&gt; takes precedence over the &lt;code&gt;max-age&lt;/code&gt; directive from the &lt;code&gt;Cache-Control&lt;/code&gt; header.</source>
          <target state="translated">&lt;code&gt;cache_page&lt;/code&gt; によって設定されたキャッシュタイムアウトは、 &lt;code&gt;Cache-Control&lt;/code&gt; ヘッダーの &lt;code&gt;max-age&lt;/code&gt; ディレクティブよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="bc353ddabf47aac846044e4948d99fc39ed66470" translate="yes" xml:space="preserve">
          <source>The cache uses a least-recently-used (LRU) culling strategy.</source>
          <target state="translated">キャッシュは最小最近使用された(LRU)カリング戦略を使用しています。</target>
        </trans-unit>
        <trans-unit id="548bf6cd86306f6731ede47d7c608a40b6439642" translate="yes" xml:space="preserve">
          <source>The cached template loader</source>
          <target state="translated">キャッシュされたテンプレートローダー</target>
        </trans-unit>
        <trans-unit id="4aaac7ed3362a3f4617c65798299ec343e8dba17" translate="yes" xml:space="preserve">
          <source>The cached value can be treated like an ordinary attribute of the instance:</source>
          <target state="translated">キャッシュされた値は、インスタンスの通常の属性のように扱うことができます。</target>
        </trans-unit>
        <trans-unit id="32eaef240c894f7537a2b2879dce4928a62820a9" translate="yes" xml:space="preserve">
          <source>The caching framework</source>
          <target state="translated">キャッシングフレームワーク</target>
        </trans-unit>
        <trans-unit id="0dbec7decbf87a1b937f4e084412fbd8e0b16bc0" translate="yes" xml:space="preserve">
          <source>The call to &lt;a href=&quot;https://docs.python.org/3/library/logging.html#logging.getLogger&quot;&gt;&lt;code&gt;logging.getLogger()&lt;/code&gt;&lt;/a&gt; obtains (creating, if necessary) an instance of a logger. The logger instance is identified by a name. This name is used to identify the logger for configuration purposes.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/logging.html#logging.getLogger&quot;&gt; &lt;code&gt;logging.getLogger()&lt;/code&gt; を&lt;/a&gt;呼び出すと、ロガーのインスタンスが取得されます（必要な場合は作成されます）。ロガーインスタンスは名前で識別されます。この名前は、構成目的でロガーを識別するために使用されます。</target>
        </trans-unit>
        <trans-unit id="28be4b432a3ed767d3483f9f071adcfdabb0344b" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;super().clean()&lt;/code&gt; in the example code ensures that any validation logic in parent classes is maintained. If your form inherits another that doesn&amp;rsquo;t return a &lt;code&gt;cleaned_data&lt;/code&gt; dictionary in its &lt;code&gt;clean()&lt;/code&gt; method (doing so is optional), then don&amp;rsquo;t assign &lt;code&gt;cleaned_data&lt;/code&gt; to the result of the &lt;code&gt;super()&lt;/code&gt; call and use &lt;code&gt;self.cleaned_data&lt;/code&gt; instead:</source>
          <target state="translated">コード例の &lt;code&gt;super().clean()&lt;/code&gt; の呼び出しにより、親クラスの検証ロジックが確実に維持されます。フォームが &lt;code&gt;clean()&lt;/code&gt; メソッドで &lt;code&gt;cleaned_data&lt;/code&gt; ディクショナリを返さない別のフォームを継承する場合（そうすることはオプションです）、 &lt;code&gt;super()&lt;/code&gt; 呼び出しの結果に &lt;code&gt;cleaned_data&lt;/code&gt; を割り当てず、代わりに &lt;code&gt;self.cleaned_data&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="1a01ba7ce9d6f81e9f47125f43d5581b8b99b441" translate="yes" xml:space="preserve">
          <source>The callable form can be helpful, for instance, when used in conjunction with the Python &lt;code&gt;datetime&lt;/code&gt; module to limit selections by date range. For example:</source>
          <target state="translated">呼び出し可能フォームは、たとえば、Pythonの &lt;code&gt;datetime&lt;/code&gt; モジュールと組み合わせて使用​​して、日付範囲による選択を制限する場合に役立ちます。例えば：</target>
        </trans-unit>
        <trans-unit id="110d3d8214f7f2350e2549600976802c9af215c7" translate="yes" xml:space="preserve">
          <source>The callable will be evaluated only when the unbound form is displayed, not when it is defined.</source>
          <target state="translated">callableは、定義されていないフォームが表示されたときにのみ評価され、定義されていないフォームが表示されたときには評価されません。</target>
        </trans-unit>
        <trans-unit id="f31beda7ce9ec0cb008195715fe9842980da0eb9" translate="yes" xml:space="preserve">
          <source>The cast of players</source>
          <target state="translated">選手のキャスト</target>
        </trans-unit>
        <trans-unit id="452676dbe881ca0f8bb5366dc0a27f7542061a2a" translate="yes" xml:space="preserve">
          <source>The catch-all logger for messages in the &lt;code&gt;django&lt;/code&gt; hierarchy. No messages are posted using this name but instead using one of the loggers below.</source>
          <target state="translated">&lt;code&gt;django&lt;/code&gt; 階層のメッセージ用の包括的なロガー。この名前を使用してメッセージは投稿されませんが、代わりに以下のロガーのいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="b651c172f62901bc6714dc1973eef30ed2d264bc" translate="yes" xml:space="preserve">
          <source>The character encoding used to decode any files read from disk. This includes template files, static files, and translation catalogs.</source>
          <target state="translated">ディスクから読み込んだファイルのデコードに使用される文字エンコーディング。これには、テンプレートファイル、静的ファイル、翻訳カタログが含まれます。</target>
        </trans-unit>
        <trans-unit id="d3f3a550e11ae36f28b06315e750dc9f2f45a0df" translate="yes" xml:space="preserve">
          <source>The character set encoding used to create the test database. The value of this string is passed directly through to the database, so its format is backend-specific.</source>
          <target state="translated">テストデータベースの作成に使用される文字セットのエンコーディング。この文字列の値はデータベースに直接渡されるので、そのフォーマットはバックエンド固有のものとなります。</target>
        </trans-unit>
        <trans-unit id="43f7b3134e5af3df9646d6c2bb0d84090f20eafe" translate="yes" xml:space="preserve">
          <source>The character set of email sent with &lt;code&gt;django.core.mail&lt;/code&gt; will be set to the value of your &lt;a href=&quot;../ref/settings#std:setting-DEFAULT_CHARSET&quot;&gt;&lt;code&gt;DEFAULT_CHARSET&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">&lt;code&gt;django.core.mail&lt;/code&gt; で送信されるメールの文字セットは、&lt;a href=&quot;../ref/settings#std:setting-DEFAULT_CHARSET&quot;&gt; &lt;code&gt;DEFAULT_CHARSET&lt;/code&gt; &lt;/a&gt;設定の値に設定されます。</target>
        </trans-unit>
        <trans-unit id="a6af75081aab59ce90d68a800760cfeda0e9987c" translate="yes" xml:space="preserve">
          <source>The charset in which the response will be encoded. If not given it will be extracted from &lt;code&gt;content_type&lt;/code&gt;, and if that is unsuccessful, the &lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt;&lt;code&gt;DEFAULT_CHARSET&lt;/code&gt;&lt;/a&gt; setting will be used.</source>
          <target state="translated">応答がエンコードされる文字セット。指定しない場合は &lt;code&gt;content_type&lt;/code&gt; から抽出され、それが失敗した&lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt; &lt;code&gt;DEFAULT_CHARSET&lt;/code&gt; &lt;/a&gt;は、DEFAULT_CHARSET設定が使用されます。</target>
        </trans-unit>
        <trans-unit id="743b8267a0834d32d9c2ea8e6ceedb8a5bce9f25" translate="yes" xml:space="preserve">
          <source>The check function &lt;em&gt;must&lt;/em&gt; accept an &lt;code&gt;app_configs&lt;/code&gt; argument; this argument is the list of applications that should be inspected. If None, the check must be run on &lt;em&gt;all&lt;/em&gt; installed apps in the project. The &lt;code&gt;**kwargs&lt;/code&gt; argument is required for future expansion.</source>
          <target state="translated">check関数&lt;em&gt;は&lt;/em&gt; &lt;code&gt;app_configs&lt;/code&gt; 引数を受け入れる&lt;em&gt;必要があり&lt;/em&gt;ます。この引数は、検査する必要があるアプリケーションのリストです。Noneの場合、プロジェクトにインストールされている&lt;em&gt;すべての&lt;/em&gt;アプリでチェックを実行する必要があります。 &lt;code&gt;**kwargs&lt;/code&gt; からの引数は、将来の拡張のために必要とされます。</target>
        </trans-unit>
        <trans-unit id="d5824011522bd9eb13377730c19f148d90d6540f" translate="yes" xml:space="preserve">
          <source>The class has the following methods:</source>
          <target state="translated">このクラスには以下のメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="0bf8846e541ccfe96d8f9b3763d0c53900c892ec" translate="yes" xml:space="preserve">
          <source>The class of the objects that are added to, removed from or cleared from the relation.</source>
          <target state="translated">リレーションに追加されたり、リレーションから削除されたり、クリアされたりするオブジェクトのクラス。</target>
        </trans-unit>
        <trans-unit id="f291af4bd08e7621ceed5517aef1b3e3a73166cd" translate="yes" xml:space="preserve">
          <source>The class of the user that just logged in.</source>
          <target state="translated">先ほどログインしたユーザーのクラス。</target>
        </trans-unit>
        <trans-unit id="75007b032e36e422a861e56bec617e750279b503" translate="yes" xml:space="preserve">
          <source>The class that renders form widgets. It must implement &lt;a href=&quot;forms/renderers#low-level-widget-render-api&quot;&gt;the low-level render API&lt;/a&gt;.</source>
          <target state="translated">フォームウィジェットをレンダリングするクラス。&lt;a href=&quot;forms/renderers#low-level-widget-render-api&quot;&gt;低レベルのレンダリングAPIを&lt;/a&gt;実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="755f095068c56e6a90831130ba6e82e55fde9c7b" translate="yes" xml:space="preserve">
          <source>The class used to build the test suite. By default it is set to &lt;code&gt;unittest.TestSuite&lt;/code&gt;. This can be overridden if you wish to implement different logic for collecting tests.</source>
          <target state="translated">テストスイートのビルドに使用されるクラス。デフォルトでは &lt;code&gt;unittest.TestSuite&lt;/code&gt; に設定されています。テストを収集するためのさまざまなロジックを実装する場合は、これをオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="169d4cc1ae64db2818559a2fd3aa3df3f82a804f" translate="yes" xml:space="preserve">
          <source>The class-level &lt;code&gt;atomic&lt;/code&gt; block described above allows the creation of initial data at the class level, once for the whole &lt;code&gt;TestCase&lt;/code&gt;. This technique allows for faster tests as compared to using &lt;code&gt;setUp()&lt;/code&gt;.</source>
          <target state="translated">上記のクラスレベルの &lt;code&gt;atomic&lt;/code&gt; ブロックを使用すると、 &lt;code&gt;TestCase&lt;/code&gt; 全体に対して一度、クラスレベルで初期データを作成できます。この手法では、 &lt;code&gt;setUp()&lt;/code&gt; を使用する場合と比較して、テストを高速化できます。</target>
        </trans-unit>
        <trans-unit id="3ccbde73445a4688dc1fe731a4568c247f557bd5" translate="yes" xml:space="preserve">
          <source>The class:</source>
          <target state="translated">クラスのこと。</target>
        </trans-unit>
        <trans-unit id="c30d58a3ceff31ff24b10b5795c224f23288d2d3" translate="yes" xml:space="preserve">
          <source>The classes defined in this module create database constraints. They are added in the model &lt;a href=&quot;options#django.db.models.Options.constraints&quot;&gt;&lt;code&gt;Meta.constraints&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">このモジュールで定義されたクラスは、データベース制約を作成します。それらはモデルの&lt;a href=&quot;options#django.db.models.Options.constraints&quot;&gt; &lt;code&gt;Meta.constraints&lt;/code&gt; &lt;/a&gt;オプションに追加されます。</target>
        </trans-unit>
        <trans-unit id="ed9477ab351e298dcff6bdca6b2539ae345998a6" translate="yes" xml:space="preserve">
          <source>The classes documented below provide a way for users to use functions provided by the underlying database as annotations, aggregations, or filters in Django. Functions are also &lt;a href=&quot;expressions&quot;&gt;expressions&lt;/a&gt;, so they can be used and combined with other expressions like &lt;a href=&quot;querysets#aggregation-functions&quot;&gt;aggregate functions&lt;/a&gt;.</source>
          <target state="translated">以下で説明するクラスは、Djangoのアノテーション、集計、またはフィルタとして、基になるデータベースによって提供される関数をユーザーが使用する方法を提供します。関数も&lt;a href=&quot;expressions&quot;&gt;式な&lt;/a&gt;ので、&lt;a href=&quot;querysets#aggregation-functions&quot;&gt;集計関数の&lt;/a&gt;ような他の式と組み合わせて使用​​できます。</target>
        </trans-unit>
        <trans-unit id="03d8d4a21cbeb2373689907d93ed89429b6e744d" translate="yes" xml:space="preserve">
          <source>The cleaned data from the &lt;code&gt;form&lt;/code&gt; is available for string interpolation using the &lt;code&gt;%(field_name)s&lt;/code&gt; syntax. For ModelForms, if you need access to fields from the saved &lt;code&gt;object&lt;/code&gt; override the &lt;a href=&quot;#django.contrib.messages.views.SuccessMessageMixin.get_success_message&quot;&gt;&lt;code&gt;get_success_message()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;form&lt;/code&gt; からクリーンアップされたデータは、 &lt;code&gt;%(field_name)s&lt;/code&gt; 構文を使用した文字列補間に使用できます。ModelFormsの場合、保存された &lt;code&gt;object&lt;/code&gt; からフィールドにアクセスする必要がある場合は、&lt;a href=&quot;#django.contrib.messages.views.SuccessMessageMixin.get_success_message&quot;&gt; &lt;code&gt;get_success_message()&lt;/code&gt; &lt;/a&gt;メソッドをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="05168c9f9c8bac7466da082345be65c10d1eb53a" translate="yes" xml:space="preserve">
          <source>The cleaning process modifies the model instance passed to the &lt;code&gt;ModelForm&lt;/code&gt; constructor in various ways. For instance, any date fields on the model are converted into actual date objects. Failed validation may leave the underlying model instance in an inconsistent state and therefore it&amp;rsquo;s not recommended to reuse it.</source>
          <target state="translated">クリーニングプロセスは、 &lt;code&gt;ModelForm&lt;/code&gt; コンストラクターに渡されたモデルインスタンスをさまざまな方法で変更します。たとえば、モデルの日付フィールドは実際の日付オブジェクトに変換されます。検証に失敗すると、基になるモデルインスタンスが不整合な状態になる可能性があるため、再利用することはお勧めしません。</target>
        </trans-unit>
        <trans-unit id="84de12d7e0bb1ef32e52fc74373ef725f8c8c7ff" translate="yes" xml:space="preserve">
          <source>The clickjacking middleware and decorators provide easy-to-use protection against &lt;a href=&quot;https://en.wikipedia.org/wiki/Clickjacking&quot;&gt;clickjacking&lt;/a&gt;. This type of attack occurs when a malicious site tricks a user into clicking on a concealed element of another site which they have loaded in a hidden frame or iframe.</source>
          <target state="translated">クリックジャッキングミドルウェアやデコレータはに対して使いやすい保護を提供&lt;a href=&quot;https://en.wikipedia.org/wiki/Clickjacking&quot;&gt;クリックジャッキングを&lt;/a&gt;。このタイプの攻撃は、悪意のあるサイトがユーザーをだまして、非表示のフレームまたはiframeにロードした別のサイトの隠された要素をクリックさせるときに発生します。</target>
        </trans-unit>
        <trans-unit id="cb0884e94bca60201ac08c4e39d15908fc5430d7" translate="yes" xml:space="preserve">
          <source>The code above loads the &lt;code&gt;news/year_archive.html&lt;/code&gt; template.</source>
          <target state="translated">上記のコードは、 &lt;code&gt;news/year_archive.html&lt;/code&gt; テンプレートをロードします。</target>
        </trans-unit>
        <trans-unit id="f24bc0a812b0ec647c48d4e1b3d00ab9937b67cf" translate="yes" xml:space="preserve">
          <source>The code above maps URL paths to Python callback functions (&amp;ldquo;views&amp;rdquo;). The path strings use parameter tags to &amp;ldquo;capture&amp;rdquo; values from the URLs. When a user requests a page, Django runs through each path, in order, and stops at the first one that matches the requested URL. (If none of them matches, Django calls a special-case 404 view.) This is blazingly fast, because the paths are compiled into regular expressions at load time.</source>
          <target state="translated">上記のコードは、URLパスをPythonコールバック関数（「ビュー」）にマッピングします。パス文字列は、パラメータタグを使用して、URLから値を「キャプチャ」します。ユーザーがページをリクエストすると、Djangoは各パスを順番に実行し、リクエストされたURLに一致する最初のパスで停止します。 （一致するものがない場合、Djangoは特別なケースの404ビューを呼び出します。）パスはロード時に正規表現にコンパイルされるため、これは非常に高速です。</target>
        </trans-unit>
        <trans-unit id="46c1c12b0e18dce0441e64b6b3d2ad9f9259493f" translate="yes" xml:space="preserve">
          <source>The code and comments should be self-explanatory, but a few things deserve a mention:</source>
          <target state="translated">コードとコメントは自明なものであるべきですが、いくつかは言及に値するものがあります。</target>
        </trans-unit>
        <trans-unit id="f91452dd3f89261240824192dc632bf4474db175" translate="yes" xml:space="preserve">
          <source>The code below is equivalent to the code above:</source>
          <target state="translated">以下のコードは上記のコードに相当します。</target>
        </trans-unit>
        <trans-unit id="bc942bc7da1dff6c09b53018389efffa7a208a0f" translate="yes" xml:space="preserve">
          <source>The code for our &lt;code&gt;vote()&lt;/code&gt; view does have a small problem. It first gets the &lt;code&gt;selected_choice&lt;/code&gt; object from the database, then computes the new value of &lt;code&gt;votes&lt;/code&gt;, and then saves it back to the database. If two users of your website try to vote at &lt;em&gt;exactly the same time&lt;/em&gt;, this might go wrong: The same value, let&amp;rsquo;s say 42, will be retrieved for &lt;code&gt;votes&lt;/code&gt;. Then, for both users the new value of 43 is computed and saved, but 44 would be the expected value.</source>
          <target state="translated">私たちの &lt;code&gt;vote()&lt;/code&gt; ビューのコードには小さな問題があります。最初にデータベースから &lt;code&gt;selected_choice&lt;/code&gt; オブジェクトを取得し、次に &lt;code&gt;votes&lt;/code&gt; の新しい値を計算してから、それをデータベースに保存します。ウェブサイトの2人のユーザーが&lt;em&gt;まったく同時に&lt;/em&gt;投票しようとした場合、これはうまくいかない可能性があります。同じ値、たとえば42が &lt;code&gt;votes&lt;/code&gt; 用に取得されます。次に、両方のユーザーについて、新しい値43が計算されて保存されますが、期待値は44になります。</target>
        </trans-unit>
        <trans-unit id="a3644b015cb23e9bc6437c53f1691c4635daa000" translate="yes" xml:space="preserve">
          <source>The code for this test may look as follows:</source>
          <target state="translated">このテストのコードは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="40f8751633105fc0bc54b57a07b88b096758e297" translate="yes" xml:space="preserve">
          <source>The code lives in the &lt;code&gt;django.core.mail&lt;/code&gt; module.</source>
          <target state="translated">コードは &lt;code&gt;django.core.mail&lt;/code&gt; モジュールにあります。</target>
        </trans-unit>
        <trans-unit id="e141e436bbeb21b445a338d88a7888bc10bed390" translate="yes" xml:space="preserve">
          <source>The code provided on &lt;code&gt;Storage&lt;/code&gt; retains only alpha-numeric characters, periods and underscores from the original filename, removing everything else.</source>
          <target state="translated">&lt;code&gt;Storage&lt;/code&gt; 提供されるコードは、元のファイル名から英数字、ピリオド、およびアンダースコアのみを保持し、他のすべてを削除します。</target>
        </trans-unit>
        <trans-unit id="98dd10203f7b601a1d65c073a69d7058e9042a01" translate="yes" xml:space="preserve">
          <source>The collation order to use when creating the test database. This value is passed directly to the backend, so its format is backend-specific.</source>
          <target state="translated">テストデータベースを作成する際に使用する照合順序。この値はバックエンドに直接渡されるので、フォーマットはバックエンド固有のものとなります。</target>
        </trans-unit>
        <trans-unit id="b90bb6212b1abdc5ca2c67075c5291b0c51c857b" translate="yes" xml:space="preserve">
          <source>The collation setting for a column controls the order in which data is sorted as well as what strings compare as equal. It can be set on a database-wide level and also per-table and per-column. This is &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/charset.html&quot;&gt;documented thoroughly&lt;/a&gt; in the MySQL documentation. In all cases, you set the collation by directly manipulating the database tables; Django doesn&amp;rsquo;t provide a way to set this on the model definition.</source>
          <target state="translated">列の照合順序設定は、データが並べ替えられる順序と、等しいと比較される文字列を制御します。データベース全体のレベルで設定でき、テーブルごと、列ごとにも設定できます。これはされて&lt;a href=&quot;https://dev.mysql.com/doc/refman/en/charset.html&quot;&gt;完全に文書化され&lt;/a&gt;たMySQLのドキュメントに。いずれの場合も、データベーステーブルを直接操作して照合を設定します。 Djangoはこれをモデル定義に設定する方法を提供していません。</target>
        </trans-unit>
        <trans-unit id="3eeda2585aac2dc08a21c32d4248e9129f9e0bb3" translate="yes" xml:space="preserve">
          <source>The color interpretation for the band, as an integer between 0and 16. If &lt;code&gt;as_string&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, the data type is returned as a string with the following possible values: &lt;code&gt;GCI_Undefined&lt;/code&gt;, &lt;code&gt;GCI_GrayIndex&lt;/code&gt;, &lt;code&gt;GCI_PaletteIndex&lt;/code&gt;, &lt;code&gt;GCI_RedBand&lt;/code&gt;, &lt;code&gt;GCI_GreenBand&lt;/code&gt;, &lt;code&gt;GCI_BlueBand&lt;/code&gt;, &lt;code&gt;GCI_AlphaBand&lt;/code&gt;, &lt;code&gt;GCI_HueBand&lt;/code&gt;, &lt;code&gt;GCI_SaturationBand&lt;/code&gt;, &lt;code&gt;GCI_LightnessBand&lt;/code&gt;, &lt;code&gt;GCI_CyanBand&lt;/code&gt;, &lt;code&gt;GCI_MagentaBand&lt;/code&gt;, &lt;code&gt;GCI_YellowBand&lt;/code&gt;, &lt;code&gt;GCI_BlackBand&lt;/code&gt;, &lt;code&gt;GCI_YCbCr_YBand&lt;/code&gt;, &lt;code&gt;GCI_YCbCr_CbBand&lt;/code&gt;, and &lt;code&gt;GCI_YCbCr_CrBand&lt;/code&gt;. &lt;code&gt;GCI_YCbCr_CrBand&lt;/code&gt; also represents &lt;code&gt;GCI_Max&lt;/code&gt; because both correspond to the integer 16, but only &lt;code&gt;GCI_YCbCr_CrBand&lt;/code&gt; is returned as a string.</source>
          <target state="translated">場合0and 16の間の整数としてバンドの色の解釈は、 &lt;code&gt;as_string&lt;/code&gt; がある &lt;code&gt;True&lt;/code&gt; ：、データ・タイプは、次の可能な値を持つ文字列として返され &lt;code&gt;GCI_Undefined&lt;/code&gt; 、 &lt;code&gt;GCI_GrayIndex&lt;/code&gt; 、 &lt;code&gt;GCI_PaletteIndex&lt;/code&gt; 、 &lt;code&gt;GCI_RedBand&lt;/code&gt; 、 &lt;code&gt;GCI_GreenBand&lt;/code&gt; 、 &lt;code&gt;GCI_BlueBand&lt;/code&gt; 、 &lt;code&gt;GCI_AlphaBand&lt;/code&gt; 、 &lt;code&gt;GCI_HueBand&lt;/code&gt; 、 &lt;code&gt;GCI_SaturationBand&lt;/code&gt; 、 &lt;code&gt;GCI_LightnessBand&lt;/code&gt; 、 &lt;code&gt;GCI_CyanBand&lt;/code&gt; 、 &lt;code&gt;GCI_MagentaBand&lt;/code&gt; 、 &lt;code&gt;GCI_YellowBand&lt;/code&gt; 、 &lt;code&gt;GCI_BlackBand&lt;/code&gt; 、 &lt;code&gt;GCI_YCbCr_YBand&lt;/code&gt; 、 &lt;code&gt;GCI_YCbCr_CbBand&lt;/code&gt; 、および &lt;code&gt;GCI_YCbCr_CrBand&lt;/code&gt; 。 &lt;code&gt;GCI_YCbCr_CrBand&lt;/code&gt; もGCI_Maxを表し &lt;code&gt;GCI_Max&lt;/code&gt; 。どちらも整数16に対応していますが、 &lt;code&gt;GCI_YCbCr_CrBand&lt;/code&gt; のみが文字列として返されます。</target>
        </trans-unit>
        <trans-unit id="ad09a70dacbadcdfce005c2c0b886f87ef1a6e92" translate="yes" xml:space="preserve">
          <source>The colors used for syntax highlighting can be customized. Django ships with three color palettes:</source>
          <target state="translated">構文の強調表示に使用する色をカスタマイズすることができます。Django には 3 つのカラーパレットが同梱されています。</target>
        </trans-unit>
        <trans-unit id="2a922802028535811239279e39be84ceab6b7530" translate="yes" xml:space="preserve">
          <source>The column type, which tells the database what kind of data to store (e.g. &lt;code&gt;INTEGER&lt;/code&gt;, &lt;code&gt;VARCHAR&lt;/code&gt;, &lt;code&gt;TEXT&lt;/code&gt;).</source>
          <target state="translated">格納するデータの種類をデータベースに指示する列タイプ（例： &lt;code&gt;INTEGER&lt;/code&gt; 、 &lt;code&gt;VARCHAR&lt;/code&gt; 、 &lt;code&gt;TEXT&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="9e51ff0488cd65962f4119380c63a3ec8a0b8be4" translate="yes" xml:space="preserve">
          <source>The command &lt;code&gt;python manage.py diffsettings&lt;/code&gt; displays differences between the current settings file and Django&amp;rsquo;s default settings.</source>
          <target state="translated">コマンド &lt;code&gt;python manage.py diffsettings&lt;/code&gt; は、現在の設定ファイルとDjangoのデフォルト設定の違いを表示します。</target>
        </trans-unit>
        <trans-unit id="b80dfb4d69f2901b7da6bebabcfbace6e9333454" translate="yes" xml:space="preserve">
          <source>The command adds these options:</source>
          <target state="translated">コマンドはこれらのオプションを追加します。</target>
        </trans-unit>
        <trans-unit id="ebdfcb96927ee87fc75a054180cf816f17324db5" translate="yes" xml:space="preserve">
          <source>The command produces the following output, which may be copied directly into the &lt;code&gt;models.py&lt;/code&gt; of a GeoDjango application:</source>
          <target state="translated">コマンドは次の出力を生成し、GeoDjangoアプリケーションの &lt;code&gt;models.py&lt;/code&gt; に直接コピーできます。</target>
        </trans-unit>
        <trans-unit id="eb002894c488e2e7a65e11ca5cc9d4bfa9078340" translate="yes" xml:space="preserve">
          <source>The command that backs all this is &lt;a href=&quot;../ref/django-admin#django-admin-squashmigrations&quot;&gt;&lt;code&gt;squashmigrations&lt;/code&gt;&lt;/a&gt; - pass it the app label and migration name you want to squash up to, and it&amp;rsquo;ll get to work:</source>
          <target state="translated">これをすべて&lt;a href=&quot;../ref/django-admin#django-admin-squashmigrations&quot;&gt; &lt;code&gt;squashmigrations&lt;/code&gt; &lt;/a&gt;コマンドはsquashmigrationsです -スカッシュしたいアプリのラベルとマイグレーション名を渡せば動作します：</target>
        </trans-unit>
        <trans-unit id="9c020a948db5a02e51e5c1ba0d47dae01ba33dd3" translate="yes" xml:space="preserve">
          <source>The command-line examples throughout this document use &lt;code&gt;django-admin&lt;/code&gt; to be consistent, but any example can use &lt;code&gt;manage.py&lt;/code&gt; or &lt;code&gt;python -m django&lt;/code&gt; just as well.</source>
          <target state="translated">このドキュメントのコマンドラインの例では、一貫性を &lt;code&gt;django-admin&lt;/code&gt; ためにdjango-adminを使用していますが、 &lt;code&gt;manage.py&lt;/code&gt; または &lt;code&gt;python -m django&lt;/code&gt; も使用できます。</target>
        </trans-unit>
        <trans-unit id="dd2feb2c94af08b408eaec6dbef069506756f05b" translate="yes" xml:space="preserve">
          <source>The comment will then appear in the resulting &lt;code&gt;.po&lt;/code&gt; file associated with the translatable construct located below it and should also be displayed by most translation tools.</source>
          <target state="translated">コメントは、その下にある翻訳可能な構成に関連付けられた結果の &lt;code&gt;.po&lt;/code&gt; ファイルに表示され、ほとんどの翻訳ツールでも表示されるはずです。</target>
        </trans-unit>
        <trans-unit id="6bfad5ebbd59f63638f9c18579b4ed5fb04ccdb6" translate="yes" xml:space="preserve">
          <source>The common API doesn&amp;rsquo;t have an equivalent concept. Context data is passed in a plain &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; and the current &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; is passed separately if needed.</source>
          <target state="translated">共通APIには同等の概念はありません。コンテキストデータはプレーン&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt;渡され、現在の&lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;は必要に応じて個別に渡されます。</target>
        </trans-unit>
        <trans-unit id="4e2f7d52a53a517dda3e3641c8525ab8c2bfbd8d" translate="yes" xml:space="preserve">
          <source>The comparison of the contents of &lt;code&gt;qs&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt; is performed by applying &lt;code&gt;transform&lt;/code&gt; to &lt;code&gt;qs&lt;/code&gt;. By default, this means that the &lt;code&gt;repr()&lt;/code&gt; of each value in &lt;code&gt;qs&lt;/code&gt; is compared to the &lt;code&gt;values&lt;/code&gt;. Any other callable can be used if &lt;code&gt;repr()&lt;/code&gt; doesn&amp;rsquo;t provide a unique or helpful comparison.</source>
          <target state="translated">内容の比較 &lt;code&gt;qs&lt;/code&gt; 及び &lt;code&gt;values&lt;/code&gt; 適用することによって行われる &lt;code&gt;transform&lt;/code&gt; に &lt;code&gt;qs&lt;/code&gt; 。デフォルトでは、これは &lt;code&gt;qs&lt;/code&gt; の各値の &lt;code&gt;repr()&lt;/code&gt; が値と比較されることを意味し &lt;code&gt;values&lt;/code&gt; 。 &lt;code&gt;repr()&lt;/code&gt; が一意または有用な比較を提供しない場合は、他の呼び出し可能オブジェクトを使用できます。</target>
        </trans-unit>
        <trans-unit id="a1c1b918eb4886e1878f6b407c27700844bba2a8" translate="yes" xml:space="preserve">
          <source>The comparison of the contents of &lt;code&gt;qs&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt; is performed using the function &lt;code&gt;transform&lt;/code&gt;; by default, this means that the &lt;code&gt;repr()&lt;/code&gt; of each value is compared. Any other callable can be used if &lt;code&gt;repr()&lt;/code&gt; doesn&amp;rsquo;t provide a unique or helpful comparison.</source>
          <target state="translated">&lt;code&gt;qs&lt;/code&gt; と &lt;code&gt;values&lt;/code&gt; 内容の比較は、関数 &lt;code&gt;transform&lt;/code&gt; を使用して実行されます。デフォルトでは、これは各値の &lt;code&gt;repr()&lt;/code&gt; が比較されることを意味します。 &lt;code&gt;repr()&lt;/code&gt; が一意のまたは役立つ比較を提供しない場合、他の呼び出し可能オブジェクトを使用できます。</target>
        </trans-unit>
        <trans-unit id="1a91a5510b22b7501233e7fa3573651a27e2c669" translate="yes" xml:space="preserve">
          <source>The comparison operators cannot be &amp;lsquo;chained&amp;rsquo; like in Python or in mathematical notation. For example, instead of using:</source>
          <target state="translated">Pythonや数学表記のように、比較演算子を「連鎖」させることはできません。たとえば、次を使用する代わりに：</target>
        </trans-unit>
        <trans-unit id="fed46b6d6e53306b5501edbe2ad2c37a021c6b97" translate="yes" xml:space="preserve">
          <source>The compilation function &amp;ndash; a Python function (not the name of the function as a string).</source>
          <target state="translated">コンパイル関数&amp;ndash; Python関数（文字列としての関数名ではありません）。</target>
        </trans-unit>
        <trans-unit id="c432829c2360e91a30da4cee98de39816672c670" translate="yes" xml:space="preserve">
          <source>The concept is very similar to messages from the &lt;a href=&quot;../ref/contrib/messages&quot;&gt;message framework&lt;/a&gt; or the &lt;a href=&quot;logging&quot;&gt;logging framework&lt;/a&gt;. Messages are tagged with a &lt;code&gt;level&lt;/code&gt; indicating the severity of the message.</source>
          <target state="translated">この概念は、&lt;a href=&quot;../ref/contrib/messages&quot;&gt;メッセージフレームワーク&lt;/a&gt;または&lt;a href=&quot;logging&quot;&gt;ロギングフレーム&lt;/a&gt;ワークからのメッセージに非常に似ています。メッセージには、メッセージの重大度を示す &lt;code&gt;level&lt;/code&gt; がタグ付けされています。</target>
        </trans-unit>
        <trans-unit id="549ccf14ad7d65404de2e82804d6dcffdfd6e2a2" translate="yes" xml:space="preserve">
          <source>The concepts of tags and filters exist both in the Django template language and in Jinja2 but they&amp;rsquo;re used differently. Since Jinja2 supports passing arguments to callables in templates, many features that require a template tag or filter in Django templates can be achieved by calling a function in Jinja2 templates, as shown in the example above. Jinja2&amp;rsquo;s global namespace removes the need for template context processors. The Django template language doesn&amp;rsquo;t have an equivalent of Jinja2 tests.</source>
          <target state="translated">タグとフィルターの概念は、Djangoテンプレート言語とJinja2の両方に存在しますが、使用方法は異なります。Jinja2はテンプレートの呼び出し可能オブジェクトへの引数の受け渡しをサポートしているため、Djangoテンプレートのテンプレートタグまたはフィルターを必要とする多くの機能は、上記の例に示すように、Jinja2テンプレートの関数を呼び出すことで実現できます。Jinja2のグローバル名前空間により、テンプレートコンテキストプロセッサが不要になります。Djangoテンプレート言語には、Jinja2テストに相当するものはありません。</target>
        </trans-unit>
        <trans-unit id="e0b2cf1bb0de5081862f14c0f39c8abe579eb3c6" translate="yes" xml:space="preserve">
          <source>The conditional expression classes</source>
          <target state="translated">条件式クラス</target>
        </trans-unit>
        <trans-unit id="88433b473f828a40bacb10c9b4d1a00de9d89d65" translate="yes" xml:space="preserve">
          <source>The constructor creates several &lt;a href=&quot;#django.forms.Select&quot;&gt;&lt;code&gt;Select&lt;/code&gt;&lt;/a&gt; widgets in a list. The &lt;code&gt;super()&lt;/code&gt; method uses this list to setup the widget.</source>
          <target state="translated">コンストラクターは、リスト内にいくつかの&lt;a href=&quot;#django.forms.Select&quot;&gt; &lt;code&gt;Select&lt;/code&gt; &lt;/a&gt;ウィジェットを作成します。 &lt;code&gt;super()&lt;/code&gt; メソッドは、セットアップにウィジェットを、このリストを使用しています。</target>
        </trans-unit>
        <trans-unit id="c354e7724254d0140cc11fd6b89752b23740e1fc" translate="yes" xml:space="preserve">
          <source>The constructor doesn&amp;rsquo;t take any arguments and no content should be added to this response. Use this to designate that a page hasn&amp;rsquo;t been modified since the user&amp;rsquo;s last request (status code 304).</source>
          <target state="translated">コンストラクターは引数を取りません。この応答にコンテンツを追加しないでください。これを使用して、ユーザーの最後のリクエスト（ステータスコード304）以降にページが変更されていないことを示します。</target>
        </trans-unit>
        <trans-unit id="0d7b4750536ced9eb610dec817e1cd0c20262168" translate="yes" xml:space="preserve">
          <source>The constructor for &lt;code&gt;DataSource&lt;/code&gt; only requires one parameter: the path of the file you want to read. However, OGR also supports a variety of more complex data sources, including databases, that may be accessed by passing a special name string instead of a path. For more information, see the &lt;a href=&quot;https://gdal.org/drivers/vector/&quot;&gt;OGR Vector Formats&lt;/a&gt; documentation. The &lt;a href=&quot;#django.contrib.gis.gdal.DataSource.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; property of a &lt;code&gt;DataSource&lt;/code&gt; instance gives the OGR name of the underlying data source that it is using.</source>
          <target state="translated">&lt;code&gt;DataSource&lt;/code&gt; のコンストラクターに必要なパラメーターは、読み取りたいファイルのパス1つだけです。ただし、OGRは、パスを渡す代わりに特別な名前の文字列を渡すことでアクセスできる、データベースを含むさまざまなより複雑なデータソースもサポートします。詳細については、&lt;a href=&quot;https://gdal.org/drivers/vector/&quot;&gt;OGRベクトル形式の&lt;/a&gt;ドキュメントを参照してください。 &lt;code&gt;DataSource&lt;/code&gt; インスタンスの&lt;a href=&quot;#django.contrib.gis.gdal.DataSource.name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;プロパティは、使用している基になるデータソースのOGR名を示します。</target>
        </trans-unit>
        <trans-unit id="0eae3807f099dc609089e2fa4d06ea8db870ffe8" translate="yes" xml:space="preserve">
          <source>The constructor for &lt;code&gt;GDALRaster&lt;/code&gt; accepts two parameters. The first parameter defines the raster source, and the second parameter defines if a raster should be opened in write mode. For newly-created rasters, the second parameter is ignored and the new raster is always created in write mode.</source>
          <target state="translated">&lt;code&gt;GDALRaster&lt;/code&gt; のコンストラクターは、2つのパラメーターを受け入れます。最初のパラメーターはラスターソースを定義し、2番目のパラメーターはラスターを書き込みモードで開くかどうかを定義します。新しく作成されたラスタの場合、2番目のパラメータは無視され、新しいラスタは常に書き込みモードで作成されます。</target>
        </trans-unit>
        <trans-unit id="bc598c12d02dedfb319c16bce2278d396df2b2eb" translate="yes" xml:space="preserve">
          <source>The constructor of &lt;code&gt;django.template.Context&lt;/code&gt; takes an optional argument &amp;mdash; a dictionary mapping variable names to variable values.</source>
          <target state="translated">&lt;code&gt;django.template.Context&lt;/code&gt; のコンストラクタは、オプションの引数（変数名を変数値にマッピングする辞書）を取ります。</target>
        </trans-unit>
        <trans-unit id="2164eab6d4811fad250d2bb1ccbaa3d9c8003615" translate="yes" xml:space="preserve">
          <source>The content body is less than 200 bytes long.</source>
          <target state="translated">コンテンツ本体の長さが200バイト未満です。</target>
        </trans-unit>
        <trans-unit id="470e37da69adfa1e28fc63a006dbca1bae1fa479" translate="yes" xml:space="preserve">
          <source>The content field may optionally be left blank if you prefer to put your content in a custom template.</source>
          <target state="translated">カスタムテンプレートにコンテンツを入れたい場合は、コンテンツフィールドを空白にしておくこともできます。</target>
        </trans-unit>
        <trans-unit id="db675219db37343c2bae99df7a80d9928af81076" translate="yes" xml:space="preserve">
          <source>The content type to use for the response. &lt;code&gt;content_type&lt;/code&gt; is passed as a keyword argument to &lt;code&gt;response_class&lt;/code&gt;. Default is &lt;code&gt;None&lt;/code&gt; &amp;ndash; meaning that Django uses &lt;code&gt;'text/html'&lt;/code&gt;.</source>
          <target state="translated">応答に使用するコンテンツタイプ。 &lt;code&gt;content_type&lt;/code&gt; は、キーワード引数として &lt;code&gt;response_class&lt;/code&gt; に渡されます。デフォルトは &lt;code&gt;None&lt;/code&gt; -Djangoが &lt;code&gt;'text/html'&lt;/code&gt; を使用することを意味します。</target>
        </trans-unit>
        <trans-unit id="5835dca25f13fc5581c883182116aea3ab44a011" translate="yes" xml:space="preserve">
          <source>The content-type header uploaded with the file (e.g. &lt;em&gt;text/plain&lt;/em&gt; or &lt;em&gt;application/pdf&lt;/em&gt;). Like any data supplied by the user, you shouldn&amp;rsquo;t trust that the uploaded file is actually this type. You&amp;rsquo;ll still need to validate that the file contains the content that the content-type header claims &amp;ndash; &amp;ldquo;trust but verify.&amp;rdquo;</source>
          <target state="translated">ファイルとともにアップロードされたコンテンツタイプヘッダー（例：&lt;em&gt;text / plain&lt;/em&gt;または&lt;em&gt;application / pdf&lt;/em&gt;）。ユーザーが提供するデータと同様に、アップロードされたファイルが実際にこのタイプであることを信頼するべきではありません。それでも、ファイルにcontent-typeヘッダーが主張するコンテンツが含まれていることを検証する必要があります&amp;ndash;「信頼するが検証する」。</target>
        </trans-unit>
        <trans-unit id="8c7de1a43c36e821a66909e1c15a46f2cee3281c" translate="yes" xml:space="preserve">
          <source>The contenttypes framework</source>
          <target state="translated">コンテンツタイプフレームワーク</target>
        </trans-unit>
        <trans-unit id="05e4d324241f65f889809ed3d94bf0710f1f7942" translate="yes" xml:space="preserve">
          <source>The contenttypes framework is included in the default &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; list created by &lt;code&gt;django-admin startproject&lt;/code&gt;, but if you&amp;rsquo;ve removed it or if you manually set up your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; list, you can enable it by adding &lt;code&gt;'django.contrib.contenttypes'&lt;/code&gt; to your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">contenttypesフレームワークは、 &lt;code&gt;django-admin startproject&lt;/code&gt; によって作成されたデフォルトの&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;リストに含まれていますが、これを削除した場合、または&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;リストを手動で設定した場合は、 &lt;code&gt;'django.contrib.contenttypes'&lt;/code&gt; を&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; に&lt;/a&gt;追加して有効にできます。設定。</target>
        </trans-unit>
        <trans-unit id="8ac06751752a9579736538d702b5eed196af15a9" translate="yes" xml:space="preserve">
          <source>The context data to be used when rendering the template. It must be a &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テンプレートをレンダリングするときに使用されるコンテキストデータ。それは&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt;に違いありません。</target>
        </trans-unit>
        <trans-unit id="9c13fd4afc732549f974b3c9349753bf740123e7" translate="yes" xml:space="preserve">
          <source>The context processor also provides a &lt;code&gt;DEFAULT_MESSAGE_LEVELS&lt;/code&gt; variable which is a mapping of the message level names to their numeric value:</source>
          <target state="translated">コンテキストプロセッサは、メッセージレベル名とそれらの数値のマッピングである &lt;code&gt;DEFAULT_MESSAGE_LEVELS&lt;/code&gt; 変数も提供します。</target>
        </trans-unit>
        <trans-unit id="234fb0df99df952c3684db102132db150237ee9e" translate="yes" xml:space="preserve">
          <source>The convention is not to capitalize the first letter of the &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.verbose_name&quot;&gt;&lt;code&gt;verbose_name&lt;/code&gt;&lt;/a&gt;. Django will automatically capitalize the first letter where it needs to.</source>
          <target state="translated">規約は、&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.verbose_name&quot;&gt; &lt;code&gt;verbose_name&lt;/code&gt; の&lt;/a&gt;最初の文字を大文字にすることではありません。Djangoは自動的に最初の文字を大文字にする必要があります。</target>
        </trans-unit>
        <trans-unit id="bf14e19437b9aeb95afe1f4da20fc4ae721c81ea" translate="yes" xml:space="preserve">
          <source>The correct choice of comparison functions here depends on your particular data set, for example the language(s) used and the type of text being searched. All of the examples we&amp;rsquo;ve seen are on short strings where the user is likely to enter something close (by varying definitions) to the source data.</source>
          <target state="translated">ここでの比較関数の正しい選択は、使用する言語や検索するテキストのタイプなど、特定のデータセットによって異なります。これまでに見た例はすべて、ユーザーがソースデータの近くに（定義を変えることで）何かを入力する可能性が高い短い文字列に関するものです。</target>
        </trans-unit>
        <trans-unit id="76284e00e8cf9b7966d97c110eeb914acef53fc7" translate="yes" xml:space="preserve">
          <source>The correct way to catch database errors is around an &lt;code&gt;atomic&lt;/code&gt; block as shown above. If necessary, add an extra &lt;code&gt;atomic&lt;/code&gt; block for this purpose. This pattern has another advantage: it delimits explicitly which operations will be rolled back if an exception occurs.</source>
          <target state="translated">上記のように、データベースエラーをキャッチする正しい方法は、 &lt;code&gt;atomic&lt;/code&gt; ブロックの周りです。必要に応じて、この目的で追加の &lt;code&gt;atomic&lt;/code&gt; ブロックを追加します。このパターンにはもう1つの利点があります。例外が発生した場合にロールバックされる操作を明示的に区切るためです。</target>
        </trans-unit>
        <trans-unit id="1f9086cc318bc5e173a9ec495b70bdcb43af97ee" translate="yes" xml:space="preserve">
          <source>The corresponding &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags around the labels. An HTML &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tag designates which label text is associated with which form element. This small enhancement makes forms more usable and more accessible to assistive devices. It&amp;rsquo;s always a good idea to use &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">ラベルの周囲の対応する &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; タグ。HTMLの &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; タグは、どのラベルテキストがどのフォーム要素に関連付けられるかを指定します。この小さな機能強化により、フォームがより使いやすくなり、支援デバイスからアクセスしやすくなります。 &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; タグを使用することは常に良い考えです。</target>
        </trans-unit>
        <trans-unit id="e868f50cf9b955c6a3a257a35cb8867c9d3988f1" translate="yes" xml:space="preserve">
          <source>The corresponding algorithm names are:</source>
          <target state="translated">対応するアルゴリズム名は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="be57e0498aa6711170f0e9b968277292780a5351" translate="yes" xml:space="preserve">
          <source>The count argument is an integer indicating the number of times the template should be rendered. Default is &lt;code&gt;None&lt;/code&gt;, meaning that the template should be rendered one or more times.</source>
          <target state="translated">count引数は、テンプレートをレンダリングする回数を示す整数です。デフォルトは &lt;code&gt;None&lt;/code&gt; です。これは、テンプレートが1回以上レンダリングされることを意味します。</target>
        </trans-unit>
        <trans-unit id="676683ffd241442533cedc1fa084bb636ddfc4ce" translate="yes" xml:space="preserve">
          <source>The counterpoint to writing your &lt;code&gt;__init__()&lt;/code&gt; method is writing the &lt;a href=&quot;../ref/models/fields#django.db.models.Field.deconstruct&quot;&gt;&lt;code&gt;deconstruct()&lt;/code&gt;&lt;/a&gt; method. It&amp;rsquo;s used during &lt;a href=&quot;../topics/migrations&quot;&gt;model migrations&lt;/a&gt; to tell Django how to take an instance of your new field and reduce it to a serialized form - in particular, what arguments to pass to &lt;code&gt;__init__()&lt;/code&gt; to re-create it.</source>
          <target state="translated">&lt;code&gt;__init__()&lt;/code&gt; メソッドを作成することの対抗点は、&lt;a href=&quot;../ref/models/fields#django.db.models.Field.deconstruct&quot;&gt; &lt;code&gt;deconstruct()&lt;/code&gt; &lt;/a&gt;メソッドを作成することです。中に使われている&lt;a href=&quot;../topics/migrations&quot;&gt;モデルの移行&lt;/a&gt;、特に、どのような引数がに渡す-どのようにあなたの新しいフィールドのインスタンスを取り、直列化された形式にそれを減らすためにDjangoに伝えるために &lt;code&gt;__init__()&lt;/code&gt; 、それを再作成します。</target>
        </trans-unit>
        <trans-unit id="2ee8c481b2898ae8434d6313d56d583f06930d81" translate="yes" xml:space="preserve">
          <source>The creation module of the database backend also provides some utilities that can be useful during testing.</source>
          <target state="translated">データベースバックエンドの作成モジュールには、テスト時に便利なユーティリティも用意されています。</target>
        </trans-unit>
        <trans-unit id="27c67f5320bc6224cfdb7c1c07cc5374c7ae77a4" translate="yes" xml:space="preserve">
          <source>The creation-order dependencies of the database. See the documentation on &lt;a href=&quot;../topics/testing/advanced#topics-testing-creation-dependencies&quot;&gt;controlling the creation order of test databases&lt;/a&gt; for details.</source>
          <target state="translated">データベースの作成順序の依存関係。詳細については&lt;a href=&quot;../topics/testing/advanced#topics-testing-creation-dependencies&quot;&gt;、テストデータベースの作成順序の制御&lt;/a&gt;に関するドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="78d7917d9faae66855cbfd322829e7c779f54066" translate="yes" xml:space="preserve">
          <source>The current &lt;a href=&quot;../request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">現在の&lt;a href=&quot;../request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;インスタンス。</target>
        </trans-unit>
        <trans-unit id="f18defbb524b282098621bf1a29b83d998e3e40f" translate="yes" xml:space="preserve">
          <source>The current &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">現在の&lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1160e7be43a801bc82a4b53afea1ec9d68c8863b" translate="yes" xml:space="preserve">
          <source>The current iteration of the loop (0-indexed)</source>
          <target state="translated">ループの現在の繰り返し (0-indexed)</target>
        </trans-unit>
        <trans-unit id="6bdad6fa0a0125769d10c429d4127b6e9b086a00" translate="yes" xml:space="preserve">
          <source>The current iteration of the loop (1-indexed)</source>
          <target state="translated">ループの現在の繰り返し (1インデックス)</target>
        </trans-unit>
        <trans-unit id="77f3d67f0992528479762165e112bb2677c700db" translate="yes" xml:space="preserve">
          <source>The current rendered value of the response content, using the current template and context data.</source>
          <target state="translated">現在のテンプレートとコンテキストデータを使用した、レスポンスコンテンツの現在のレンダリング値。</target>
        </trans-unit>
        <trans-unit id="2d5816e6b51fc7f53459dd7a68806e3abc020987" translate="yes" xml:space="preserve">
          <source>The current state of Python packaging is a bit muddled with various tools. For this tutorial, we&amp;rsquo;re going to use &lt;a href=&quot;https://pypi.org/project/setuptools/&quot;&gt;setuptools&lt;/a&gt; to build our package. It&amp;rsquo;s the recommended packaging tool (merged with the &lt;code&gt;distribute&lt;/code&gt; fork). We&amp;rsquo;ll also be using &lt;a href=&quot;https://pypi.org/project/pip/&quot;&gt;pip&lt;/a&gt; to install and uninstall it. You should install these two packages now. If you need help, you can refer to &lt;a href=&quot;../topics/install#installing-official-release&quot;&gt;how to install Django with pip&lt;/a&gt;. You can install &lt;code&gt;setuptools&lt;/code&gt; the same way.</source>
          <target state="translated">Pythonパッケージングの現在の状態は、さまざまなツールで少し混乱しています。このチュートリアルでは、&lt;a href=&quot;https://pypi.org/project/setuptools/&quot;&gt;setuptools&lt;/a&gt;を使用してパッケージをビルドします。これは、推奨されるパッケージ化ツールです（ &lt;code&gt;distribute&lt;/code&gt; フォークにマージされています）。また、&lt;a href=&quot;https://pypi.org/project/pip/&quot;&gt;pip&lt;/a&gt;を使用してインストールおよびアンインストールします。これら2つのパッケージを今すぐインストールする必要があります。ヘルプが必要な場合は&lt;a href=&quot;../topics/install#installing-official-release&quot;&gt;、pipを使用してDjangoをインストール&lt;/a&gt;する方法を参照してください。同じ方法で &lt;code&gt;setuptools&lt;/code&gt; をインストールできます。</target>
        </trans-unit>
        <trans-unit id="58a08c53207620f40ef4087879bd2f7158937901" translate="yes" xml:space="preserve">
          <source>The current time zone is the equivalent of the current &lt;a href=&quot;index#term-locale-name&quot;&gt;locale&lt;/a&gt; for translations. However, there&amp;rsquo;s no equivalent of the &lt;code&gt;Accept-Language&lt;/code&gt; HTTP header that Django could use to determine the user&amp;rsquo;s time zone automatically. Instead, Django provides &lt;a href=&quot;../../ref/utils#time-zone-selection-functions&quot;&gt;time zone selection functions&lt;/a&gt;. Use them to build the time zone selection logic that makes sense for you.</source>
          <target state="translated">現在のタイムゾーンは、翻訳の現在の&lt;a href=&quot;index#term-locale-name&quot;&gt;ロケールに&lt;/a&gt;相当します。ただし、Djangoがユーザーのタイムゾーンを自動的に決定するために使用できる &lt;code&gt;Accept-Language&lt;/code&gt; HTTPヘッダーに相当するものはありません。代わりに、Djangoは&lt;a href=&quot;../../ref/utils#time-zone-selection-functions&quot;&gt;タイムゾーン選択機能を&lt;/a&gt;提供します。それらを使用して、自分にとって意味のあるタイムゾーン選択ロジックを構築します。</target>
        </trans-unit>
        <trans-unit id="d23ff7c7f68a407084d00f01afe6c15283d21f45" translate="yes" xml:space="preserve">
          <source>The current version of Django doesn&amp;rsquo;t support Python 2.7. Get Python 3 at &lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python&amp;rsquo;s download page&lt;/a&gt; or with your operating system&amp;rsquo;s package manager.</source>
          <target state="translated">Djangoの現在のバージョンはPython 2.7をサポートしていません。&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Pythonのダウンロードページ&lt;/a&gt;またはオペレーティングシステムのパッケージマネージャーでPython 3を入手します。</target>
        </trans-unit>
        <trans-unit id="3476d04eaf5286941daa6863680a2594d54f758a" translate="yes" xml:space="preserve">
          <source>The currently logged-in user and their permissions are made available in the &lt;a href=&quot;../../ref/templates/api&quot;&gt;template context&lt;/a&gt; when you use &lt;a href=&quot;../../ref/templates/api#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/templates/api#django.template.RequestContext&quot;&gt; &lt;code&gt;RequestContext&lt;/code&gt; &lt;/a&gt;を使用すると、現在ログインしているユーザーとその権限が&lt;a href=&quot;../../ref/templates/api&quot;&gt;テンプレートコンテキストで&lt;/a&gt;使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="0f82cde19a9fcc9d37d62f904d3caefd5111f1d8" translate="yes" xml:space="preserve">
          <source>The currently logged-in user&amp;rsquo;s permissions are stored in the template variable &lt;code&gt;{{ perms }}&lt;/code&gt;. This is an instance of &lt;code&gt;django.contrib.auth.context_processors.PermWrapper&lt;/code&gt;, which is a template-friendly proxy of permissions.</source>
          <target state="translated">現在ログインしているユーザーの権限は、テンプレート変数 &lt;code&gt;{{ perms }}&lt;/code&gt; 格納されています。これは &lt;code&gt;django.contrib.auth.context_processors.PermWrapper&lt;/code&gt; のインスタンスであり、テンプレートに適したアクセス許可のプロキシです。</target>
        </trans-unit>
        <trans-unit id="ed04acb21d2826ea5acc66c65bae1007aab057c0" translate="yes" xml:space="preserve">
          <source>The custom lookup above is great, but in some cases you may want to be able to chain lookups together. For example, let&amp;rsquo;s suppose we are building an application where we want to make use of the &lt;code&gt;abs()&lt;/code&gt; operator. We have an &lt;code&gt;Experiment&lt;/code&gt; model which records a start value, end value, and the change (start - end). We would like to find all experiments where the change was equal to a certain amount (&lt;code&gt;Experiment.objects.filter(change__abs=27)&lt;/code&gt;), or where it did not exceed a certain amount (&lt;code&gt;Experiment.objects.filter(change__abs__lt=27)&lt;/code&gt;).</source>
          <target state="translated">上記のカスタムルックアップは優れていますが、ルックアップをチェーンできるようにしたい場合があります。たとえば、 &lt;code&gt;abs()&lt;/code&gt; 演算子を使用するアプリケーションを構築しているとします。開始値、終了値、および変更（開始-終了）を記録する &lt;code&gt;Experiment&lt;/code&gt; モデルがあります。私たちは、変更が（一定量に等しかったすべての実験見つけたい &lt;code&gt;Experiment.objects.filter(change__abs=27)&lt;/code&gt; ）、または、それが一定量を超えなかった（ &lt;code&gt;Experiment.objects.filter(change__abs__lt=27)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="25e462bbe1e5e31788f421390d5772492a2c38c7" translate="yes" xml:space="preserve">
          <source>The data migration might look something like:</source>
          <target state="translated">データの移行は以下のようになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="ad2fce352218fcf551224af5c25f7a9ca59ddd03" translate="yes" xml:space="preserve">
          <source>The data type contained in the band, as an integer constant between 0 (Unknown) and 11. If &lt;code&gt;as_string&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, the data type is returned as a string with the following possible values: &lt;code&gt;GDT_Unknown&lt;/code&gt;, &lt;code&gt;GDT_Byte&lt;/code&gt;, &lt;code&gt;GDT_UInt16&lt;/code&gt;, &lt;code&gt;GDT_Int16&lt;/code&gt;, &lt;code&gt;GDT_UInt32&lt;/code&gt;, &lt;code&gt;GDT_Int32&lt;/code&gt;, &lt;code&gt;GDT_Float32&lt;/code&gt;, &lt;code&gt;GDT_Float64&lt;/code&gt;, &lt;code&gt;GDT_CInt16&lt;/code&gt;, &lt;code&gt;GDT_CInt32&lt;/code&gt;, &lt;code&gt;GDT_CFloat32&lt;/code&gt;, and &lt;code&gt;GDT_CFloat64&lt;/code&gt;.</source>
          <target state="translated">バンドに含まれるデータ型。0（不明） &lt;code&gt;as_string&lt;/code&gt; 整数定数。as_stringが &lt;code&gt;True&lt;/code&gt; の場合、データ型は次の可能な値を持つ文字列として返されます： &lt;code&gt;GDT_Unknown&lt;/code&gt; 、 &lt;code&gt;GDT_Byte&lt;/code&gt; 、 &lt;code&gt;GDT_UInt16&lt;/code&gt; 、 &lt;code&gt;GDT_Int16&lt;/code&gt; 、 &lt;code&gt;GDT_UInt32&lt;/code&gt; 、 &lt;code&gt;GDT_Int32&lt;/code&gt; 、 &lt;code&gt;GDT_Float32&lt;/code&gt; 、 &lt;code&gt;GDT_Float64&lt;/code&gt; 、 &lt;code&gt;GDT_CInt16&lt;/code&gt; 、 &lt;code&gt;GDT_CInt32&lt;/code&gt; 、 &lt;code&gt;GDT_CFloat32&lt;/code&gt; 、および &lt;code&gt;GDT_CFloat64&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d95eeae5ab8d781cf0f996fad262568ffa0c8a8" translate="yes" xml:space="preserve">
          <source>The data you return will get fed into the subsequent upload handlers&amp;rsquo; &lt;code&gt;receive_data_chunk&lt;/code&gt; methods. In this way, one handler can be a &amp;ldquo;filter&amp;rdquo; for other handlers.</source>
          <target state="translated">返されたデータは、後続のアップロードハンドラの &lt;code&gt;receive_data_chunk&lt;/code&gt; メソッドに送られます。このようにして、1つのハンドラーを他のハンドラーの「フィルター」にすることができます。</target>
        </trans-unit>
        <trans-unit id="c06dcd3a54eadeabfa5fc71f941fe35d32da63cf" translate="yes" xml:space="preserve">
          <source>The database API supports about two dozen lookup types; a complete reference can be found in the &lt;a href=&quot;../../ref/models/querysets#field-lookups&quot;&gt;field lookup reference&lt;/a&gt;. To give you a taste of what&amp;rsquo;s available, here&amp;rsquo;s some of the more common lookups you&amp;rsquo;ll probably use:</source>
          <target state="translated">データベースAPIは、約20の検索タイプをサポートしています。完全なリファレンスは、&lt;a href=&quot;../../ref/models/querysets#field-lookups&quot;&gt;フィールドルックアップリファレンスにあり&lt;/a&gt;ます。利用できるものを味わうために、おそらく使用するより一般的なルックアップのいくつかを次に示します。</target>
        </trans-unit>
        <trans-unit id="cd51927fe60291aa96713c14a10084b2030a7122" translate="yes" xml:space="preserve">
          <source>The database alias being used.</source>
          <target state="translated">使用されているデータベースのエイリアス。</target>
        </trans-unit>
        <trans-unit id="cf7a0f6a4ffa467c95510c550e77ff84c2880ada" translate="yes" xml:space="preserve">
          <source>The database alias used for synchronization. Defaults to the &lt;code&gt;default&lt;/code&gt; database.</source>
          <target state="translated">同期に使用されるデータベースエイリアス。デフォルトは &lt;code&gt;default&lt;/code&gt; データベースです。</target>
        </trans-unit>
        <trans-unit id="952dd11e9541ef5d3727b9dfa84e64f7fbe99249" translate="yes" xml:space="preserve">
          <source>The database backend to use. The built-in database backends are:</source>
          <target state="translated">使用するデータベースバックエンドです。ビルトインのデータベースバックエンドは</target>
        </trans-unit>
        <trans-unit id="58b4bec81caaec606a7e790e7b80e1dfe5ab0542" translate="yes" xml:space="preserve">
          <source>The database connection that was opened. This can be used in a multiple-database configuration to differentiate connection signals from different databases.</source>
          <target state="translated">開かれたデータベース接続。これは、複数のデータベース構成で、異なるデータベースからの接続信号を区別するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="cb2370421f5bdbfc63ed2299c4b75082331e9312" translate="yes" xml:space="preserve">
          <source>The database functions in the &lt;code&gt;django.contrib.postgres.search&lt;/code&gt; module ease the use of PostgreSQL&amp;rsquo;s &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch.html&quot;&gt;full text search engine&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;django.contrib.postgres.search&lt;/code&gt; モジュールのデータベース関数は、PostgreSQLの&lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch.html&quot;&gt;全文検索エンジン&lt;/a&gt;の使用を容易にします。</target>
        </trans-unit>
        <trans-unit id="b71695c6f4fa1dffd03cf126602c3ca0d7b6035e" translate="yes" xml:space="preserve">
          <source>The database operators used by the lookups can be divided into three categories:</source>
          <target state="translated">ルックアップで使用されるデータベース演算子は、3つのカテゴリに分けることができます。</target>
        </trans-unit>
        <trans-unit id="c8a5416a993dcb3bd1dc2279d4dade633db7282c" translate="yes" xml:space="preserve">
          <source>The database that will be used if this query is executed now.</source>
          <target state="translated">このクエリが現在実行されている場合に使用されるデータベース。</target>
        </trans-unit>
        <trans-unit id="9115c3491c26155c0d8b73a549668d12a0c78bb2" translate="yes" xml:space="preserve">
          <source>The database user must be a superuser in order to run &lt;code&gt;CREATE EXTENSION postgis;&lt;/code&gt;. The command is run during the &lt;a href=&quot;../../../django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; process. An alternative is to use a migration operation in your project:</source>
          <target state="translated">&lt;code&gt;CREATE EXTENSION postgis;&lt;/code&gt; を実行するには、データベースユーザーがスーパーユーザーである必要があります。。コマンドは&lt;a href=&quot;../../../django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;プロセス中に実行されます。別の方法は、プロジェクトで移行操作を使用することです。</target>
        </trans-unit>
        <trans-unit id="f61a99a7872ebf66de6187b65d49ab814180deb5" translate="yes" xml:space="preserve">
          <source>The database wrapper class &amp;ndash; i.e. &lt;code&gt;django.db.backends.postgresql.DatabaseWrapper&lt;/code&gt; or &lt;code&gt;django.db.backends.mysql.DatabaseWrapper&lt;/code&gt;, etc.</source>
          <target state="translated">データベースラッパークラス&amp;ndash; &lt;code&gt;django.db.backends.postgresql.DatabaseWrapper&lt;/code&gt; または &lt;code&gt;django.db.backends.mysql.DatabaseWrapper&lt;/code&gt; など</target>
        </trans-unit>
        <trans-unit id="3b23e6996a7bf9115220fd283aace6352331691e" translate="yes" xml:space="preserve">
          <source>The date and time of the action.</source>
          <target state="translated">行動の日時です。</target>
        </trans-unit>
        <trans-unit id="b139848485c3bd11a960042cbaa48f80aba5b2a1" translate="yes" xml:space="preserve">
          <source>The datum shifting files are needed for converting data to and from certain projections. For example, the PROJ.4 string for the &lt;a href=&quot;https://spatialreference.org/ref/sr-org/6864/prj/&quot;&gt;Google projection (900913 or 3857)&lt;/a&gt; requires the &lt;code&gt;null&lt;/code&gt; grid file only included in the extra datum shifting files. It is easier to install the shifting files now, then to have debug a problem caused by their absence later.</source>
          <target state="translated">データムシフトファイルは、データを特定のプロジェクションとの間で変換するために必要です。たとえば、&lt;a href=&quot;https://spatialreference.org/ref/sr-org/6864/prj/&quot;&gt;Googleプロジェクションの&lt;/a&gt; PROJ.4文字列（900913または3857）では、追加のデータムシフトファイルにのみ含まれる &lt;code&gt;null&lt;/code&gt; グリッドファイルが必要です。シフトファイルを今すぐインストールして、後でファイルが存在しないことによって引き起こされる問題をデバッグする方が簡単です。</target>
        </trans-unit>
        <trans-unit id="dc04cb57a0cb86ad163b712420777e844241e208" translate="yes" xml:space="preserve">
          <source>The decorator adds logic to capture and preserve the arguments on their way into your constructor, and then returns those arguments exactly when deconstruct() is called.</source>
          <target state="translated">デコレータは、コンストラクタに入る途中の引数を捕捉して保持するロジックを追加し、 deconstruct()が呼ばれたときにそれらの引数を正確に返します。</target>
        </trans-unit>
        <trans-unit id="9cd68e9318aaf868b6009093b024904f632bf5df" translate="yes" xml:space="preserve">
          <source>The decorator can also be applied to &lt;a href=&quot;#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; classes:</source>
          <target state="translated">デコレータは&lt;a href=&quot;#django.test.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;クラスにも適用できます。</target>
        </trans-unit>
        <trans-unit id="e752ec513dfa2b9020c4b9b1d77dff65842791cc" translate="yes" xml:space="preserve">
          <source>The decorator can also be applied to test case classes:</source>
          <target state="translated">デコレータはテストケースクラスにも適用できます。</target>
        </trans-unit>
        <trans-unit id="08078900b7b084a713be574d3ec48dde029f0fc7" translate="yes" xml:space="preserve">
          <source>The decorator may also take an iterable of permissions, in which case the user must have all of the permissions in order to access the view.</source>
          <target state="translated">デコレータはパーミッションのイテレータブルを取ることもできます。</target>
        </trans-unit>
        <trans-unit id="3e6984e25abb466ab3b70b1883295bf7fdad1ae1" translate="yes" xml:space="preserve">
          <source>The decorator method</source>
          <target state="translated">デコレータメソッド</target>
        </trans-unit>
        <trans-unit id="7c5f3a4a1d212f664f326057c0ab4ff2bbfd5f34" translate="yes" xml:space="preserve">
          <source>The decorator sets the &lt;code&gt;ETag&lt;/code&gt; and &lt;code&gt;Last-Modified&lt;/code&gt; headers on the response if they are not already set by the view and if the request&amp;rsquo;s method is safe (&lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;HEAD&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;ETag&lt;/code&gt; ヘッダーと &lt;code&gt;Last-Modified&lt;/code&gt; ヘッダーがビューによってまだ設定されておらず、リクエストのメソッドが安全（ &lt;code&gt;GET&lt;/code&gt; または &lt;code&gt;HEAD&lt;/code&gt; ）である場合、デコレーターはヘッダーを設定します。</target>
        </trans-unit>
        <trans-unit id="dc20f9a0cf41d79aff3ab5d9ba049b34d9983d7f" translate="yes" xml:space="preserve">
          <source>The decorators in &lt;a href=&quot;#module-django.views.decorators.cache&quot;&gt;&lt;code&gt;django.views.decorators.cache&lt;/code&gt;&lt;/a&gt; control server and client-side caching.</source>
          <target state="translated">&lt;a href=&quot;#module-django.views.decorators.cache&quot;&gt; &lt;code&gt;django.views.decorators.cache&lt;/code&gt; &lt;/a&gt;のデコレータは、サーバーとクライアント側のキャッシュを制御します。</target>
        </trans-unit>
        <trans-unit id="714400a88cce911b942d02df934f863e07f4e572" translate="yes" xml:space="preserve">
          <source>The decorators in &lt;a href=&quot;#module-django.views.decorators.gzip&quot;&gt;&lt;code&gt;django.views.decorators.gzip&lt;/code&gt;&lt;/a&gt; control content compression on a per-view basis.</source>
          <target state="translated">&lt;a href=&quot;#module-django.views.decorators.gzip&quot;&gt; &lt;code&gt;django.views.decorators.gzip&lt;/code&gt; &lt;/a&gt;のデコレータは、ビュー単位でコンテンツの圧縮を制御します。</target>
        </trans-unit>
        <trans-unit id="4b9631a95e4f5290b1d40c2f36db35dff973e6be" translate="yes" xml:space="preserve">
          <source>The decorators in &lt;a href=&quot;#module-django.views.decorators.http&quot;&gt;&lt;code&gt;django.views.decorators.http&lt;/code&gt;&lt;/a&gt; can be used to restrict access to views based on the request method. These decorators will return a &lt;a href=&quot;../../ref/request-response#django.http.HttpResponseNotAllowed&quot;&gt;&lt;code&gt;django.http.HttpResponseNotAllowed&lt;/code&gt;&lt;/a&gt; if the conditions are not met.</source>
          <target state="translated">&lt;a href=&quot;#module-django.views.decorators.http&quot;&gt; &lt;code&gt;django.views.decorators.http&lt;/code&gt; &lt;/a&gt;のデコレータを使用すると、リクエストメソッドに基づいてビューへのアクセスを制限できます。これらのデコレータは、条件が満たされない場合、&lt;a href=&quot;../../ref/request-response#django.http.HttpResponseNotAllowed&quot;&gt; &lt;code&gt;django.http.HttpResponseNotAllowed&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="172b895ce751cf6b71596b006bab1637b49f0e3a" translate="yes" xml:space="preserve">
          <source>The decorators in &lt;a href=&quot;#module-django.views.decorators.vary&quot;&gt;&lt;code&gt;django.views.decorators.vary&lt;/code&gt;&lt;/a&gt; can be used to control caching based on specific request headers.</source>
          <target state="translated">&lt;a href=&quot;#module-django.views.decorators.vary&quot;&gt; &lt;code&gt;django.views.decorators.vary&lt;/code&gt; &lt;/a&gt;のデコレータを使用して、特定のリクエストヘッダーに基づいてキャッシュを制御できます。</target>
        </trans-unit>
        <trans-unit id="d956dc320ba4030b6695d4e49373953768a303f7" translate="yes" xml:space="preserve">
          <source>The decorators use a string identifier to describe database features. This string corresponds to attributes of the database connection features class. See &lt;code&gt;django.db.backends.BaseDatabaseFeatures&lt;/code&gt; class for a full list of database features that can be used as a basis for skipping tests.</source>
          <target state="translated">デコレータは文字列識別子を使用してデータベース機能を記述します。この文字列は、データベース接続機能クラスの属性に対応しています。テストをスキップするための基礎として使用できるデータベース機能の完全なリストについては、 &lt;code&gt;django.db.backends.BaseDatabaseFeatures&lt;/code&gt; クラスを参照してください。</target>
        </trans-unit>
        <trans-unit id="caaa132833461901a9846628e798fe735598a186" translate="yes" xml:space="preserve">
          <source>The decorators will process a request in the order they are passed to the decorator. In the example, &lt;code&gt;never_cache()&lt;/code&gt; will process the request before &lt;code&gt;login_required()&lt;/code&gt;.</source>
          <target state="translated">デコレータは、デコレータに渡された順序でリクエストを処理します。この例では、 &lt;code&gt;never_cache()&lt;/code&gt; は &lt;code&gt;login_required()&lt;/code&gt; の前にリクエストを処理します。</target>
        </trans-unit>
        <trans-unit id="e9b3340f0a94e2fad729899fe10f241ec56afb5c" translate="yes" xml:space="preserve">
          <source>The default 404 view will pass two variables to the template: &lt;code&gt;request_path&lt;/code&gt;, which is the URL that resulted in the error, and &lt;code&gt;exception&lt;/code&gt;, which is a useful representation of the exception that triggered the view (e.g. containing any message passed to a specific &lt;code&gt;Http404&lt;/code&gt; instance).</source>
          <target state="translated">デフォルトの404ビューは2つの変数をテンプレートに渡します： &lt;code&gt;request_path&lt;/code&gt; （エラーの原因となったURL）と &lt;code&gt;exception&lt;/code&gt; （ビューをトリガーした例外の有用な表現です（たとえば、特定の &lt;code&gt;Http404&lt;/code&gt; インスタンスに渡されたメッセージを含む））。</target>
        </trans-unit>
        <trans-unit id="8bb62d8434d62bd532ee0e74706ef31f9611e1c2" translate="yes" xml:space="preserve">
          <source>The default 500 view passes no variables to the &lt;code&gt;500.html&lt;/code&gt; template and is rendered with an empty &lt;code&gt;Context&lt;/code&gt; to lessen the chance of additional errors.</source>
          <target state="translated">デフォルトの500ビューは &lt;code&gt;500.html&lt;/code&gt; テンプレートに変数を渡さず、追加のエラーの可能性を減らすために空の &lt;code&gt;Context&lt;/code&gt; レンダリングされます。</target>
        </trans-unit>
        <trans-unit id="e0ec6d270d2168d34503a29c66d65f1c626916d8" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;#message-storage-backends&quot;&gt;storage backend&lt;/a&gt; relies on &lt;a href=&quot;../../topics/http/sessions&quot;&gt;sessions&lt;/a&gt;. That&amp;rsquo;s why &lt;code&gt;SessionMiddleware&lt;/code&gt; must be enabled and appear before &lt;code&gt;MessageMiddleware&lt;/code&gt; in &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;#message-storage-backends&quot;&gt;ストレージバックエンド&lt;/a&gt;は&lt;a href=&quot;../../topics/http/sessions&quot;&gt;セッションに&lt;/a&gt;依存しています。そのため、&lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; &lt;code&gt;MessageMiddleware&lt;/code&gt; &lt;code&gt;SessionMiddleware&lt;/code&gt; を有効にしてMessageMiddlewareの前に表示する必要があります。</target>
        </trans-unit>
        <trans-unit id="cb25ca2a947cbc95f00df63677130dcc43190eba" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;../../ref/django-admin#django-admin-startapp&quot;&gt;&lt;code&gt;startapp&lt;/code&gt;&lt;/a&gt; template creates a &lt;code&gt;tests.py&lt;/code&gt; file in the new application. This might be fine if you only have a few tests, but as your test suite grows you&amp;rsquo;ll likely want to restructure it into a tests package so you can split your tests into different submodules such as &lt;code&gt;test_models.py&lt;/code&gt;, &lt;code&gt;test_views.py&lt;/code&gt;, &lt;code&gt;test_forms.py&lt;/code&gt;, etc. Feel free to pick whatever organizational scheme you like.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;../../ref/django-admin#django-admin-startapp&quot;&gt; &lt;code&gt;startapp&lt;/code&gt; &lt;/a&gt;テンプレートは、新しいアプリケーションに &lt;code&gt;tests.py&lt;/code&gt; ファイルを作成します。テストが2、3しかない場合は問題ないかもしれませんが、テストスイートが大きくなると、テストパッケージに再構成して、テストを &lt;code&gt;test_models.py&lt;/code&gt; 、 &lt;code&gt;test_views.py&lt;/code&gt; 、 &lt;code&gt;test_forms.py&lt;/code&gt; などの異なるサブモジュールに分割できるようになります。.pyなど。ご希望の編成スキームを自由に選択してください。</target>
        </trans-unit>
        <trans-unit id="226a066fd07ef456b5e140695c147458d6199d9c" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; created by &lt;code&gt;django-admin startproject&lt;/code&gt; already contains all the settings required to enable message functionality:</source>
          <target state="translated">&lt;code&gt;django-admin startproject&lt;/code&gt; によって作成されたデフォルトの &lt;code&gt;settings.py&lt;/code&gt; には、メッセージ機能を有効にするために必要なすべての設定がすでに含まれています。</target>
        </trans-unit>
        <trans-unit id="15f5a864456675c86842be47238862e39ece8708" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; includes &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N = True&lt;/code&gt;&lt;/a&gt; for convenience. Note, however, that to enable number formatting with thousand separators it is necessary to set &lt;a href=&quot;../../ref/settings#std:setting-USE_THOUSAND_SEPARATOR&quot;&gt;&lt;code&gt;USE_THOUSAND_SEPARATOR
= True&lt;/code&gt;&lt;/a&gt; in your settings file. Alternatively, you could use &lt;a href=&quot;../../ref/contrib/humanize#std:templatefilter-intcomma&quot;&gt;&lt;code&gt;intcomma&lt;/code&gt;&lt;/a&gt; to format numbers in your template.</source>
          <target state="translated">&lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;によって作成されたデフォルトの &lt;code&gt;settings.py&lt;/code&gt; ファイルには、便宜上&lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N = True&lt;/code&gt; &lt;/a&gt;が含まれています。ただし、桁区切り記号を使用した数値のフォーマットを有効にするには、設定ファイルで&lt;a href=&quot;../../ref/settings#std:setting-USE_THOUSAND_SEPARATOR&quot;&gt; &lt;code&gt;USE_THOUSAND_SEPARATOR = True&lt;/code&gt; &lt;/a&gt;を設定する必要があることに注意してください。または、&lt;a href=&quot;../../ref/contrib/humanize#std:templatefilter-intcomma&quot;&gt; &lt;code&gt;intcomma&lt;/code&gt; &lt;/a&gt;を使用して、テンプレートの数値をフォーマットすることもできます。</target>
        </trans-unit>
        <trans-unit id="552172d0157c475ea333dec0a0e79e817476d4b4" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; includes &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ = True&lt;/code&gt;&lt;/a&gt; for convenience.</source>
          <target state="translated">&lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;によって作成されたデフォルトの &lt;code&gt;settings.py&lt;/code&gt; ファイルには、便宜上&lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ = True&lt;/code&gt; &lt;/a&gt;が含まれています。</target>
        </trans-unit>
        <trans-unit id="37a44e663a84cee319df8611835c25940c7f1a11" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; creates a unique &lt;code&gt;SECRET_KEY&lt;/code&gt; for convenience.</source>
          <target state="translated">&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;によって作成されたデフォルトの &lt;code&gt;settings.py&lt;/code&gt; ファイルは、便宜のために一意の &lt;code&gt;SECRET_KEY&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="13e8676c1b362fc1c1df84307e6fc7596047aa40" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; includes &lt;code&gt;USE_I18N = True&lt;/code&gt; for convenience.</source>
          <target state="translated">&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;によって作成されたデフォルトの &lt;code&gt;settings.py&lt;/code&gt; ファイルには、便宜上 &lt;code&gt;USE_I18N = True&lt;/code&gt; が含まれています。</target>
        </trans-unit>
        <trans-unit id="229eaf04c4eefe874751764332b6248ddc79504c" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; includes &lt;code&gt;USE_L10N = True&lt;/code&gt; for convenience.</source>
          <target state="translated">&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;によって作成されたデフォルトの &lt;code&gt;settings.py&lt;/code&gt; ファイルには、便宜上 &lt;code&gt;USE_L10N = True&lt;/code&gt; が含まれています。</target>
        </trans-unit>
        <trans-unit id="7b3298edc8e3436e091673198431668d349b4fe1" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; sets &lt;code&gt;'APP_DIRS': True&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;によって作成されたデフォルトの &lt;code&gt;settings.py&lt;/code&gt; ファイルは &lt;code&gt;'APP_DIRS': True&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="896ebcb2f4a8b98bbc238bbcf9ec87231d75feca" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; sets &lt;code&gt;DEBUG = True&lt;/code&gt; for convenience.</source>
          <target state="translated">デフォルト &lt;code&gt;settings.py&lt;/code&gt; で作成されたファイル&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;設定します &lt;code&gt;DEBUG = True&lt;/code&gt; 便宜上。</target>
        </trans-unit>
        <trans-unit id="37f3c2b38e6100940f63032627821effc91e9578" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin startproject&lt;/code&gt;&lt;/a&gt; includes &lt;code&gt;USE_TZ = True&lt;/code&gt; for convenience.</source>
          <target state="translated">&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;によって作成されたデフォルトの &lt;code&gt;settings.py&lt;/code&gt; ファイルには、便宜上 &lt;code&gt;USE_TZ = True&lt;/code&gt; が含まれています。</target>
        </trans-unit>
        <trans-unit id="38003d532df52d6f49eaaaa73790217a0dd7ee5b" translate="yes" xml:space="preserve">
          <source>The default HTML &lt;a href=&quot;../../ref/forms/widgets&quot;&gt;widget&lt;/a&gt; to use when rendering a form field (e.g. &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">フォームフィールドをレンダリングするときに使用するデフォルトのHTML &lt;a href=&quot;../../ref/forms/widgets&quot;&gt;ウィジェット&lt;/a&gt;（例： &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b697bad3491bb5d3085ff8046cdd9a14cbc88e43" translate="yes" xml:space="preserve">
          <source>The default can&amp;rsquo;t be a mutable object (model instance, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, etc.), as a reference to the same instance of that object would be used as the default value in all new model instances. Instead, wrap the desired default in a callable. For example, if you want to specify a default &lt;code&gt;dict&lt;/code&gt; for &lt;a href=&quot;#django.db.models.JSONField&quot;&gt;&lt;code&gt;JSONField&lt;/code&gt;&lt;/a&gt;, use a function:</source>
          <target state="translated">そのオブジェクトの同じインスタンスへの参照がすべての新しいモデルインスタンスのデフォルト値として使用されるため、デフォルトを変更可能なオブジェクト（モデルインスタンス、 &lt;code&gt;list&lt;/code&gt; 、 &lt;code&gt;set&lt;/code&gt; など）にすることはできません。代わりに、必要なデフォルトを呼び出し可能ファイルでラップします。たとえば、&lt;a href=&quot;#django.db.models.JSONField&quot;&gt; &lt;code&gt;JSONField&lt;/code&gt; の&lt;/a&gt;デフォルトの &lt;code&gt;dict&lt;/code&gt; を指定する場合は、次の関数を使用します。</target>
        </trans-unit>
        <trans-unit id="850c5f08bbd2469484fab8a1bbbdda4342749d52" translate="yes" xml:space="preserve">
          <source>The default can&amp;rsquo;t be a mutable object (model instance, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, etc.), as a reference to the same instance of that object would be used as the default value in all new model instances. Instead, wrap the desired default in a callable. For example, if you want to specify a default &lt;code&gt;dict&lt;/code&gt; for &lt;a href=&quot;../contrib/postgres/fields#django.contrib.postgres.fields.JSONField&quot;&gt;&lt;code&gt;JSONField&lt;/code&gt;&lt;/a&gt;, use a function:</source>
          <target state="translated">そのオブジェクトの同じインスタンスへの参照がすべての新しいモデルインスタンスのデフォルト値として使用されるため、デフォルトを変更可能なオブジェクト（モデルインスタンス、 &lt;code&gt;list&lt;/code&gt; 、 &lt;code&gt;set&lt;/code&gt; など）にすることはできません。代わりに、必要なデフォルトを呼び出し可能オブジェクトでラップします。デフォルト指定する場合たとえば、 &lt;code&gt;dict&lt;/code&gt; のため&lt;a href=&quot;../contrib/postgres/fields#django.contrib.postgres.fields.JSONField&quot;&gt; &lt;code&gt;JSONField&lt;/code&gt; を&lt;/a&gt;、関数を使用します：</target>
        </trans-unit>
        <trans-unit id="c1e6e73cc63d50d83c075b1833c565029c9c3c78" translate="yes" xml:space="preserve">
          <source>The default center latitude and longitude are &lt;code&gt;47&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt;, respectively, which is a location in eastern France.</source>
          <target state="translated">デフォルトの中心緯度と経度はそれぞれ &lt;code&gt;47&lt;/code&gt; と &lt;code&gt;5&lt;/code&gt; で、これはフランス東部の場所です。</target>
        </trans-unit>
        <trans-unit id="6dc6b98a5ad4b8a3aea09cf719d80efb10089162" translate="yes" xml:space="preserve">
          <source>The default center latitude.</source>
          <target state="translated">デフォルトの中心緯度。</target>
        </trans-unit>
        <trans-unit id="1a8bca6211de0327a68eaeb1c2bdb33a548d22de" translate="yes" xml:space="preserve">
          <source>The default center longitude.</source>
          <target state="translated">デフォルトの中心経度。</target>
        </trans-unit>
        <trans-unit id="5b71e2fbed4079ac754389eb2c92a283a422c36d" translate="yes" xml:space="preserve">
          <source>The default class assigned to the &lt;code&gt;iterator&lt;/code&gt; attribute of &lt;a href=&quot;#django.forms.ModelChoiceField&quot;&gt;&lt;code&gt;ModelChoiceField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.forms.ModelMultipleChoiceField&quot;&gt;&lt;code&gt;ModelMultipleChoiceField&lt;/code&gt;&lt;/a&gt;. An iterable that yields 2-tuple choices from the queryset.</source>
          <target state="translated">&lt;a href=&quot;#django.forms.ModelChoiceField&quot;&gt; &lt;code&gt;ModelChoiceField&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#django.forms.ModelMultipleChoiceField&quot;&gt; &lt;code&gt;ModelMultipleChoiceField&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;iterator&lt;/code&gt; 属性に割り当てられたデフォルトのクラス。クエリセットから2タプルの選択肢を生成する反復可能オブジェクト。</target>
        </trans-unit>
        <trans-unit id="47b75fca13bb5c5601d76c121b6fe2672e66398e" translate="yes" xml:space="preserve">
          <source>The default configuration is purposefully kept to a minimum. If a template is rendered with a request (e.g. when using &lt;a href=&quot;http/shortcuts#django.shortcuts.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt;), the &lt;code&gt;Jinja2&lt;/code&gt; backend adds the globals &lt;code&gt;request&lt;/code&gt;, &lt;code&gt;csrf_input&lt;/code&gt;, and &lt;code&gt;csrf_token&lt;/code&gt; to the context. Apart from that, this backend doesn&amp;rsquo;t create a Django-flavored environment. It doesn&amp;rsquo;t know about Django filters and tags. In order to use Django-specific APIs, you must configure them into the environment.</source>
          <target state="translated">デフォルトの設定は意図的に最小限に抑えられています。テンプレートは（使用例要求でレンダリングされている場合は&lt;a href=&quot;http/shortcuts#django.shortcuts.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt;）、 &lt;code&gt;Jinja2&lt;/code&gt; ののバックエンドは、グローバルの追加 &lt;code&gt;request&lt;/code&gt; 、 &lt;code&gt;csrf_input&lt;/code&gt; 、および &lt;code&gt;csrf_token&lt;/code&gt; コンテキストにします。それとは別に、このバックエンドはDjango風味の環境を作成しません。Djangoのフィルターとタグについては認識していません。Django固有のAPIを使用するには、それらを環境に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="79b75456b9d762f8c2dce9b2ae3e8175ad3db27a" translate="yes" xml:space="preserve">
          <source>The default depends on the values of &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt;&lt;code&gt;APP_DIRS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトは&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt; &lt;code&gt;APP_DIRS&lt;/code&gt; の&lt;/a&gt;値に依存します。</target>
        </trans-unit>
        <trans-unit id="b30049a48d9bb824be0c46391448413b534fbed5" translate="yes" xml:space="preserve">
          <source>The default error views in Django should suffice for most Web applications, but can easily be overridden if you need any custom behavior. Specify the handlers as seen below in your URLconf (setting them anywhere else will have no effect).</source>
          <target state="translated">Django のデフォルトのエラービューは、ほとんどのウェブアプリケーションでは十分ですが、カスタムの動作が必要な場合は簡単にオーバーライドすることができます。URLconf で以下のようにハンドラを指定してください (これ以外の場所に設定しても何の効果もありません)。</target>
        </trans-unit>
        <trans-unit id="bc4edfe7e2ec1bdac8450e6279fde98b4ec2a703" translate="yes" xml:space="preserve">
          <source>The default field types, as described in the &lt;a href=&quot;#field-types&quot;&gt;Field types&lt;/a&gt; table above, are sensible defaults. If you have a &lt;code&gt;DateField&lt;/code&gt; in your model, chances are you&amp;rsquo;d want that to be represented as a &lt;code&gt;DateField&lt;/code&gt; in your form. But &lt;code&gt;ModelForm&lt;/code&gt; gives you the flexibility of changing the form field for a given model.</source>
          <target state="translated">上記の&lt;a href=&quot;#field-types&quot;&gt;フィールドタイプの&lt;/a&gt;表で説明したデフォルトのフィールドタイプは、実用的なデフォルトです。モデルに &lt;code&gt;DateField&lt;/code&gt; がある場合、それをフォームで &lt;code&gt;DateField&lt;/code&gt; として表現したい場合があります。ただし、 &lt;code&gt;ModelForm&lt;/code&gt; を使用すると、特定のモデルのフォームフィールドを柔軟に変更できます。</target>
        </trans-unit>
        <trans-unit id="c4dd4f7c52db0ae0c51192809cd83268e43fe87b" translate="yes" xml:space="preserve">
          <source>The default for &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; is:</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt;のデフォルトは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="134d94e39ec3e6ff60738a50fa838e784c29d613" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is &lt;a href=&quot;../forms/widgets#django.forms.CheckboxInput&quot;&gt;&lt;code&gt;CheckboxInput&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../forms/widgets#django.forms.NullBooleanSelect&quot;&gt;&lt;code&gt;NullBooleanSelect&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;#django.db.models.Field.null&quot;&gt;&lt;code&gt;null=True&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このフィールドのデフォルトのフォームウィジェットは&lt;a href=&quot;../forms/widgets#django.forms.CheckboxInput&quot;&gt; &lt;code&gt;CheckboxInput&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;#django.db.models.Field.null&quot;&gt; &lt;code&gt;null=True&lt;/code&gt; の&lt;/a&gt;場合は&lt;a href=&quot;../forms/widgets#django.forms.NullBooleanSelect&quot;&gt; &lt;code&gt;NullBooleanSelect&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="ea631760ea98aac69af2b8f8a5256ac828ece9ff" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.ClearableFileInput&quot;&gt;&lt;code&gt;ClearableFileInput&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このフィールドのデフォルトのフォームウィジェットは&lt;a href=&quot;../forms/widgets#django.forms.ClearableFileInput&quot;&gt; &lt;code&gt;ClearableFileInput&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="9b905b296d7a144496b7009a975253fc6869e61e" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.DateInput&quot;&gt;&lt;code&gt;DateInput&lt;/code&gt;&lt;/a&gt;. The admin adds a JavaScript calendar, and a shortcut for &amp;ldquo;Today&amp;rdquo;. Includes an additional &lt;code&gt;invalid_date&lt;/code&gt; error message key.</source>
          <target state="translated">このフィールドのデフォルトのフォームウィジェットは&lt;a href=&quot;../forms/widgets#django.forms.DateInput&quot;&gt; &lt;code&gt;DateInput&lt;/code&gt; &lt;/a&gt;です。管理者はJavaScriptカレンダーと、「今日」のショートカットを追加します。追加の &lt;code&gt;invalid_date&lt;/code&gt; エラーメッセージキーが含まれています。</target>
        </trans-unit>
        <trans-unit id="60986cff79bf6fc8ec851ab689e96aed367f661f" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.NumberInput&quot;&gt;&lt;code&gt;NumberInput&lt;/code&gt;&lt;/a&gt; when &lt;a href=&quot;../forms/fields#django.forms.Field.localize&quot;&gt;&lt;code&gt;localize&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt; or &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="translated">このフィールドのデフォルトのフォームウィジェットがある&lt;a href=&quot;../forms/widgets#django.forms.NumberInput&quot;&gt; &lt;code&gt;NumberInput&lt;/code&gt; &lt;/a&gt;とき&lt;a href=&quot;../forms/fields#django.forms.Field.localize&quot;&gt; &lt;code&gt;localize&lt;/code&gt; &lt;/a&gt;ある &lt;code&gt;False&lt;/code&gt; か&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;そう。</target>
        </trans-unit>
        <trans-unit id="e3c6af63e65166181cbe2139ee4e69e1190626df" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このフィールドのデフォルトのフォームウィジェットは&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="7a60df51dd0ba10657107a46e39c3e7110ad412a" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;. The admin adds a JavaScript calendar, and a shortcut for &amp;ldquo;Today&amp;rdquo;. Includes an additional &lt;code&gt;invalid_date&lt;/code&gt; error message key.</source>
          <target state="translated">このフィールドのデフォルトのフォームウィジェットは&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;です。管理者は、JavaScriptカレンダーと「今日」のショートカットを追加します。追加の &lt;code&gt;invalid_date&lt;/code&gt; エラーメッセージキーが含まれます。</target>
        </trans-unit>
        <trans-unit id="2d825bc2343fa63f1211b4871b61308789330e5f" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;. The admin adds some JavaScript shortcuts.</source>
          <target state="translated">このフィールドのデフォルトのフォームウィジェットは&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;です。管理者はいくつかのJavaScriptショートカットを追加します。</target>
        </trans-unit>
        <trans-unit id="e6a1704847656dafc6f9fae0654999a133fe752e" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.TimeInput&quot;&gt;&lt;code&gt;TimeInput&lt;/code&gt;&lt;/a&gt;. The admin adds some JavaScript shortcuts.</source>
          <target state="translated">このフィールドのデフォルトのフォームウィジェットは&lt;a href=&quot;../forms/widgets#django.forms.TimeInput&quot;&gt; &lt;code&gt;TimeInput&lt;/code&gt; &lt;/a&gt;です。管理者はいくつかのJavaScriptショートカットを追加します。</target>
        </trans-unit>
        <trans-unit id="0b29b2b0f22a4f47553af4ca85c89a29a071a0f9" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.URLInput&quot;&gt;&lt;code&gt;URLInput&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このフィールドのデフォルトのフォームウィジェットは&lt;a href=&quot;../forms/widgets#django.forms.URLInput&quot;&gt; &lt;code&gt;URLInput&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="ab7a915a6949ad8e59dacd9b65e621709e691765" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a single &lt;a href=&quot;../forms/widgets#django.forms.DateTimeInput&quot;&gt;&lt;code&gt;DateTimeInput&lt;/code&gt;&lt;/a&gt;. The admin uses two separate &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt; widgets with JavaScript shortcuts.</source>
          <target state="translated">このフィールドのデフォルトのフォームウィジェットは、単一の&lt;a href=&quot;../forms/widgets#django.forms.DateTimeInput&quot;&gt; &lt;code&gt;DateTimeInput&lt;/code&gt; &lt;/a&gt;です。管理者は、JavaScriptショートカットを備えた2つの別々の&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;ウィジェットを使用します。</target>
        </trans-unit>
        <trans-unit id="bfc82f92434f002c14f9510457820cb464b1af98" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a single &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;. The admin uses two separate &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt; widgets with JavaScript shortcuts.</source>
          <target state="translated">このフィールドのデフォルトのフォームウィジェットは、単一の&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;です。管理者は、JavaScriptショートカットを持つ2つの個別の&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;ウィジェットを使用します。</target>
        </trans-unit>
        <trans-unit id="e86b7b71b97eebfe17f27f711177ed2196a4552a" translate="yes" xml:space="preserve">
          <source>The default formatting to use for date fields on Django admin change-list pages &amp;ndash; and, possibly, by other parts of the system &amp;ndash; in cases when only the month and day are displayed.</source>
          <target state="translated">月と日のみが表示される場合に、Django管理変更リストページの日付フィールドに使用するデフォルトのフォーマット。</target>
        </trans-unit>
        <trans-unit id="f8c844f89ae57f68995ba3177973743e029db9ed" translate="yes" xml:space="preserve">
          <source>The default formatting to use for date fields on Django admin change-list pages &amp;ndash; and, possibly, by other parts of the system &amp;ndash; in cases when only the year and month are displayed.</source>
          <target state="translated">年と月だけが表示されている場合に、Djangoの管理者変更リストページの日付フィールドに使用するデフォルトのフォーマット。</target>
        </trans-unit>
        <trans-unit id="c3abe881263ad300827e24f23977ffeaa8fc68f5" translate="yes" xml:space="preserve">
          <source>The default formatting to use for displaying date fields in any part of the system. Note that if &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the locale-dictated format has higher precedence and will be applied instead. See &lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;allowed date format strings&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">システムの任意の部分で日付フィールドを表示するために使用するデフォルトのフォーマット。&lt;a href=&quot;#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; に設定されている場合、ロケール指定のフォーマットの方が優先され、代わりに適用されることに注意してください。&lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;allowed date format strings&lt;/code&gt; &lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="3b1b9178088242aa17794380e14db4ddb84579a8" translate="yes" xml:space="preserve">
          <source>The default formatting to use for displaying datetime fields in any part of the system. Note that if &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the locale-dictated format has higher precedence and will be applied instead. See &lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;allowed date format strings&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">システムの任意の部分で日時フィールドを表示するために使用するデフォルトのフォーマット。&lt;a href=&quot;#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; に設定されている場合、ロケール指定のフォーマットの方が優先され、代わりに適用されることに注意してください。&lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;allowed date format strings&lt;/code&gt; &lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="3d9a445a36c674f2a2409abce5d97ada17179d05" translate="yes" xml:space="preserve">
          <source>The default formatting to use for displaying time fields in any part of the system. Note that if &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the locale-dictated format has higher precedence and will be applied instead. See &lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;allowed date format strings&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">システムの任意の部分で時間フィールドを表示するために使用するデフォルトのフォーマット。&lt;a href=&quot;#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; に設定されている場合、ロケール指定のフォーマットの方が優先され、代わりに適用されることに注意してください。&lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;allowed date format strings&lt;/code&gt; &lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="cf5da289a6cdbe86004e0c35417963f837bd6560" translate="yes" xml:space="preserve">
          <source>The default ignored pattern list, &lt;code&gt;['CVS', '.*', '*~']&lt;/code&gt;, can be customized in a more persistent way than providing the &lt;code&gt;--ignore&lt;/code&gt; command option at each &lt;code&gt;collectstatic&lt;/code&gt; invocation. Provide a custom &lt;a href=&quot;../applications#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; class, override the &lt;code&gt;ignore_patterns&lt;/code&gt; attribute of this class and replace &lt;code&gt;'django.contrib.staticfiles'&lt;/code&gt; with that class path in your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">デフォルト無視パターンリスト、 &lt;code&gt;['CVS', '.*', '*~']&lt;/code&gt; 、提供するよりも、永続的な方法でカスタマイズすることができ &lt;code&gt;--ignore&lt;/code&gt; それぞれのコマンドのオプション &lt;code&gt;collectstatic&lt;/code&gt; 呼び出しを。カスタム&lt;a href=&quot;../applications#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt;クラスを提供し、このクラスの &lt;code&gt;ignore_patterns&lt;/code&gt; 属性をオーバーライドし、&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;設定で &lt;code&gt;'django.contrib.staticfiles'&lt;/code&gt; django.contrib.staticfiles 」をそのクラスパスに置き換えます。</target>
        </trans-unit>
        <trans-unit id="751eb81534ea3e24ef129517bef3e624542317ac" translate="yes" xml:space="preserve">
          <source>The default implementation for &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_valid&quot;&gt;&lt;code&gt;form_valid()&lt;/code&gt;&lt;/a&gt; simply redirects to the &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.success_url&quot;&gt;&lt;code&gt;success_url&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_valid&quot;&gt; &lt;code&gt;form_valid()&lt;/code&gt; &lt;/a&gt;のデフォルトの実装は、単に&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.success_url&quot;&gt; &lt;code&gt;success_url&lt;/code&gt; に&lt;/a&gt;リダイレクトします。</target>
        </trans-unit>
        <trans-unit id="58945866a1fad1e48b9997b0f3764ac1a493332d" translate="yes" xml:space="preserve">
          <source>The default implementation of &lt;a href=&quot;#django.forms.Widget.value_from_datadict&quot;&gt;&lt;code&gt;value_from_datadict()&lt;/code&gt;&lt;/a&gt; returns a list of values corresponding to each &lt;code&gt;Widget&lt;/code&gt;. This is appropriate when using a &lt;code&gt;MultiWidget&lt;/code&gt; with a &lt;a href=&quot;fields#django.forms.MultiValueField&quot;&gt;&lt;code&gt;MultiValueField&lt;/code&gt;&lt;/a&gt;. But since we want to use this widget with a &lt;a href=&quot;fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt;, which takes a single value, we have overridden this method. The implementation here combines the data from the subwidgets into a string in the format that &lt;a href=&quot;fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; expects.</source>
          <target state="translated">&lt;a href=&quot;#django.forms.Widget.value_from_datadict&quot;&gt; &lt;code&gt;value_from_datadict()&lt;/code&gt; &lt;/a&gt;のデフォルト実装は、各 &lt;code&gt;Widget&lt;/code&gt; に対応する値のリストを返します。これは、&lt;a href=&quot;fields#django.forms.MultiValueField&quot;&gt; &lt;code&gt;MultiValueField&lt;/code&gt; で&lt;/a&gt; &lt;code&gt;MultiWidget&lt;/code&gt; を使用する場合に適しています。しかし、このウィジェットを単一の値を取る&lt;a href=&quot;fields#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt;で使用したいので、このメソッドをオーバーライドしました。ここでの実装は、サブウィジェットからのデータを、&lt;a href=&quot;fields#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; が&lt;/a&gt;予期する形式の文字列に結合します。</target>
        </trans-unit>
        <trans-unit id="0e767237a959c092f8fb6cc3a53857fa0dfee41b" translate="yes" xml:space="preserve">
          <source>The default implementation returns &lt;code&gt;HttpResponseNotAllowed&lt;/code&gt; with a list of allowed methods in plain text.</source>
          <target state="translated">デフォルトの実装は、許可されたメソッドのリストをプレーンテキストで含む &lt;code&gt;HttpResponseNotAllowed&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f02a775b38d24ae9223d3fc4cbfc7456c1b2afc8" translate="yes" xml:space="preserve">
          <source>The default implementation returns &lt;code&gt;True&lt;/code&gt; if the user has either the &amp;ldquo;change&amp;rdquo; or &amp;ldquo;view&amp;rdquo; permission.</source>
          <target state="translated">ユーザーが「変更」または「表示」権限を持っている場合、デフォルトの実装は &lt;code&gt;True&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c5230cab4e521089f99bf954f4c5e6041635c9ad" translate="yes" xml:space="preserve">
          <source>The default implementation searches the fields named in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.search_fields&quot;&gt;&lt;code&gt;ModelAdmin.search_fields&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトの実装では、&lt;a href=&quot;#django.contrib.admin.ModelAdmin.search_fields&quot;&gt; &lt;code&gt;ModelAdmin.search_fields&lt;/code&gt; で&lt;/a&gt;指定されたフィールドを検索します。</target>
        </trans-unit>
        <trans-unit id="f761f121dfbd8beab8561f6c419883ce3457de3c" translate="yes" xml:space="preserve">
          <source>The default implementation uses &lt;a href=&quot;#django.views.generic.base.RedirectView.url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; as a starting string and performs expansion of &lt;code&gt;%&lt;/code&gt; named parameters in that string using the named groups captured in the URL.</source>
          <target state="translated">デフォルトの実装が使用するには、&lt;a href=&quot;#django.views.generic.base.RedirectView.url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt;の先頭の文字列とを行い、拡張として、 &lt;code&gt;%&lt;/code&gt; URLでキャプチャという名前のグループを使用して、その文字列内の名前付きパラメータ。</target>
        </trans-unit>
        <trans-unit id="462cb49a1d90ebd40612f2de40befbba0909941d" translate="yes" xml:space="preserve">
          <source>The default implementation uses &lt;a href=&quot;https://docs.python.org/3/library/os.path.html#module-os.path&quot;&gt;&lt;code&gt;os.path&lt;/code&gt;&lt;/a&gt; operations. Override this method if that&amp;rsquo;s not appropriate for your storage.</source>
          <target state="translated">デフォルトの実装では&lt;a href=&quot;https://docs.python.org/3/library/os.path.html#module-os.path&quot;&gt; &lt;code&gt;os.path&lt;/code&gt; &lt;/a&gt;操作を使用します。ストレージに適さない場合は、このメソッドをオーバーライドしてください。</target>
        </trans-unit>
        <trans-unit id="8ead0d1970988ee507b431d44d59913400158913" translate="yes" xml:space="preserve">
          <source>The default implementation will inspect the HTTP method and attempt to delegate to a method that matches the HTTP method; a &lt;code&gt;GET&lt;/code&gt; will be delegated to &lt;code&gt;get()&lt;/code&gt;, a &lt;code&gt;POST&lt;/code&gt; to &lt;code&gt;post()&lt;/code&gt;, and so on.</source>
          <target state="translated">デフォルトの実装では、HTTPメソッドを検査し、HTTPメソッドと一致するメソッドへの委任を試みます。 &lt;code&gt;GET&lt;/code&gt; をするために委任されます &lt;code&gt;get()&lt;/code&gt; は、 &lt;code&gt;POST&lt;/code&gt; への &lt;code&gt;post()&lt;/code&gt; など。</target>
        </trans-unit>
        <trans-unit id="6fdab891f778ad549a56209e1770bef2df02bf29" translate="yes" xml:space="preserve">
          <source>The default implementation will return a list containing &lt;a href=&quot;#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; (if it is specified).</source>
          <target state="translated">デフォルトの実装では、&lt;a href=&quot;#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; &lt;/a&gt;を含むリストが返されます（指定されている場合）。</target>
        </trans-unit>
        <trans-unit id="1e9ec0e76f3af8986236ea7172214f311eaea0a5" translate="yes" xml:space="preserve">
          <source>The default is 64*2&lt;sup&gt;10&lt;/sup&gt; bytes, or 64 KB.</source>
          <target state="translated">デフォルトは64 * 2 &lt;sup&gt;10&lt;/sup&gt;バイト、つまり64 KBです。</target>
        </trans-unit>
        <trans-unit id="7b37abbc68ff24b36fc22e95104b39de87e18b06" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;[0.0, 1.0, 0.0, 0.0, 0.0, -1.0]&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;[0.0, 1.0, 0.0, 0.0, 0.0, -1.0]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c97f000fcb621b26c4ca76aed228db965cece3de" translate="yes" xml:space="preserve">
          <source>The default manager on a class is either the one chosen with &lt;a href=&quot;../../ref/models/options#django.db.models.Options.default_manager_name&quot;&gt;&lt;code&gt;Meta.default_manager_name&lt;/code&gt;&lt;/a&gt;, or the first manager declared on the model, or the default manager of the first parent model.</source>
          <target state="translated">クラスのデフォルトマネージャーは、&lt;a href=&quot;../../ref/models/options#django.db.models.Options.default_manager_name&quot;&gt; &lt;code&gt;Meta.default_manager_name&lt;/code&gt; &lt;/a&gt;で選択されたもの、モデルで宣言された最初のマネージャー、または最初の親モデルのデフォルトマネージャーのいずれかです。</target>
        </trans-unit>
        <trans-unit id="983962411dff41cd368f5b7bbf421e536db1acf1" translate="yes" xml:space="preserve">
          <source>The default map zoom is &lt;code&gt;12&lt;/code&gt;.</source>
          <target state="translated">デフォルトのマップズームは &lt;code&gt;12&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7d4e743387931bcb102440b718b5c19ee9c15f17" translate="yes" xml:space="preserve">
          <source>The default number of seconds to cache a page for the &lt;a href=&quot;../topics/cache#the-per-site-cache&quot;&gt;cache middleware&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../topics/cache#the-per-site-cache&quot;&gt;キャッシュミドルウェアの&lt;/a&gt;ページをキャッシュするデフォルトの秒数。</target>
        </trans-unit>
        <trans-unit id="e154f587263da05e8c0f5967db25f769f3bbd0c8" translate="yes" xml:space="preserve">
          <source>The default of &lt;code&gt;show_full_result_count=True&lt;/code&gt; generates a query to perform a full count on the table which can be expensive if the table contains a large number of rows.</source>
          <target state="translated">デフォルトの &lt;code&gt;show_full_result_count=True&lt;/code&gt; は、テーブルに完全なカウントを実行するクエリを生成します。これは、テーブルに多数の行が含まれている場合にコストがかかる可能性があります。</target>
        </trans-unit>
        <trans-unit id="16c7754ef944bfa9abfbac63064b61db060480eb" translate="yes" xml:space="preserve">
          <source>The default ordering for the object, for use when obtaining lists of objects:</source>
          <target state="translated">オブジェクトのリストを取得する際に使用する、オブジェクトのデフォルトの順序。</target>
        </trans-unit>
        <trans-unit id="238163c4cb91e826d6996578b9872f96ffb9a648" translate="yes" xml:space="preserve">
          <source>The default password change views included with Django, &lt;a href=&quot;#django.contrib.auth.views.PasswordChangeView&quot;&gt;&lt;code&gt;PasswordChangeView&lt;/code&gt;&lt;/a&gt; and the &lt;code&gt;user_change_password&lt;/code&gt; view in the &lt;a href=&quot;index#module-django.contrib.auth&quot;&gt;&lt;code&gt;django.contrib.auth&lt;/code&gt;&lt;/a&gt; admin, update the session with the new password hash so that a user changing their own password won&amp;rsquo;t log themselves out. If you have a custom password change view and wish to have similar behavior, use the &lt;a href=&quot;#django.contrib.auth.update_session_auth_hash&quot;&gt;&lt;code&gt;update_session_auth_hash()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">ジャンゴ、に含まれるデフォルトのパスワードの変更を望む&lt;a href=&quot;#django.contrib.auth.views.PasswordChangeView&quot;&gt; &lt;code&gt;PasswordChangeView&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;user_change_password&lt;/code&gt; の中ビュー&lt;a href=&quot;index#module-django.contrib.auth&quot;&gt; &lt;code&gt;django.contrib.auth&lt;/code&gt; の&lt;/a&gt;自分のパスワードを変更し、ユーザーが自分でログアウトしないように管理者は、新しいパスワードのハッシュとのセッションを更新します。カスタムパスワード変更ビューがあり、同様の動作が必要な場合は、&lt;a href=&quot;#django.contrib.auth.update_session_auth_hash&quot;&gt; &lt;code&gt;update_session_auth_hash()&lt;/code&gt; &lt;/a&gt;関数を使用します。</target>
        </trans-unit>
        <trans-unit id="6f5fb4f1958be3d81c7def22a5a87c6baf5e9f41" translate="yes" xml:space="preserve">
          <source>The default password hasher is rather slow by design. If you&amp;rsquo;re authenticating many users in your tests, you may want to use a custom settings file and set the &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; setting to a faster hashing algorithm:</source>
          <target state="translated">デフォルトのパスワードハッシャーは、設計上、かなり低速です。テストで多くのユーザーを認証する場合は、カスタム設定ファイルを使用して、&lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt;設定をより高速なハッシュアルゴリズムに設定することができます。</target>
        </trans-unit>
        <trans-unit id="da45cf62bc7d278f65e85a2fb4a8777e81153cc7" translate="yes" xml:space="preserve">
          <source>The default resampling algorithm is &lt;code&gt;NearestNeighbour&lt;/code&gt; but can be changed using the &lt;code&gt;resampling&lt;/code&gt; argument. The default maximum allowed error for resampling is 0.0 and can be changed using the &lt;code&gt;max_error&lt;/code&gt; argument. Consult the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.warp&quot;&gt;&lt;code&gt;warp&lt;/code&gt;&lt;/a&gt; documentation for detail on those arguments.</source>
          <target state="translated">デフォルトのリサンプリングアルゴリズムは &lt;code&gt;NearestNeighbour&lt;/code&gt; ですが、 &lt;code&gt;resampling&lt;/code&gt; 引数を使用して変更できます。リサンプリングのデフォルトの最大許容エラーは0.0で、 &lt;code&gt;max_error&lt;/code&gt; 引数を使用して変更できます。これらの引数の詳細については、&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.warp&quot;&gt; &lt;code&gt;warp&lt;/code&gt; &lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7cb2f0905f6675e362944d6915dabba14930728d" translate="yes" xml:space="preserve">
          <source>The default serialization strategy for foreign keys and many-to-many relations is to serialize the value of the primary key(s) of the objects in the relation. This strategy works well for most objects, but it can cause difficulty in some circumstances.</source>
          <target state="translated">外部キーと多対多のリレーションのデフォルトのシリアライズ戦略は、リレーション内のオブジェクトの主キーの値をシリアライズすることです。この方法はほとんどのオブジェクトでうまく動作しますが、状況によっては困難な場合があります。</target>
        </trans-unit>
        <trans-unit id="1a236475813a0e546786080257d84264c4b37364" translate="yes" xml:space="preserve">
          <source>The default spatial reference system for geometry fields is WGS84 (meaning the &lt;a href=&quot;https://en.wikipedia.org/wiki/SRID&quot;&gt;SRID&lt;/a&gt; is 4326) &amp;ndash; in other words, the field coordinates are in longitude, latitude pairs in units of degrees. To use a different coordinate system, set the SRID of the geometry field with the &lt;code&gt;srid&lt;/code&gt; argument. Use an integer representing the coordinate system&amp;rsquo;s EPSG code.</source>
          <target state="translated">ジオメトリフィールドのデフォルトの空間参照系はWGS84（&lt;a href=&quot;https://en.wikipedia.org/wiki/SRID&quot;&gt;SRID&lt;/a&gt;が4326であることを意味します）です。つまり、フィールド座標は経度と緯度のペアであり、度単位です。別の座標系を使用するには、 &lt;code&gt;srid&lt;/code&gt; 引数を使用してジオメトリフィールドのSRIDを設定します。座標系のEPSGコードを表す整数を使用します。</target>
        </trans-unit>
        <trans-unit id="f2964cc9737c87c70cfb2ca809b7da585353cdd0" translate="yes" xml:space="preserve">
          <source>The default starting point for a frame is &lt;code&gt;UNBOUNDED PRECEDING&lt;/code&gt; which is the first row of the partition. The end point is always explicitly included in the SQL generated by the ORM and is by default &lt;code&gt;UNBOUNDED FOLLOWING&lt;/code&gt;. The default frame includes all rows from the partition to the last row in the set.</source>
          <target state="translated">フレームのデフォルトの開始点は、パーティションの最初の行である &lt;code&gt;UNBOUNDED PRECEDING&lt;/code&gt; です。エンドポイントは常にORMによって生成されたSQLに明示的に含まれ、デフォルトでは &lt;code&gt;UNBOUNDED FOLLOWING&lt;/code&gt; です。デフォルトのフレームには、パーティションからセットの最後の行までのすべての行が含まれます。</target>
        </trans-unit>
        <trans-unit id="e264add06e3e7aafd31761cac5cd121ec1ebd13f" translate="yes" xml:space="preserve">
          <source>The default test database names are created by prepending &lt;code&gt;test_&lt;/code&gt; to the value of each &lt;a href=&quot;../../ref/settings#std:setting-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;. When using SQLite, the tests will use an in-memory database by default (i.e., the database will be created in memory, bypassing the filesystem entirely!). The &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt;&lt;code&gt;TEST&lt;/code&gt;&lt;/a&gt; dictionary in &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; offers a number of settings to configure your test database. For example, if you want to use a different database name, specify &lt;a href=&quot;../../ref/settings#std:setting-TEST_NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt;&lt;code&gt;TEST&lt;/code&gt;&lt;/a&gt; dictionary for any given database in &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトのテストデータベース名を付加することで作成された &lt;code&gt;test_&lt;/code&gt; それぞれの値に&lt;a href=&quot;../../ref/settings#std:setting-NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt;で&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;。 SQLiteを使用する場合、テストはデフォルトでメモリ内データベースを使用します（つまり、データベースはメモリ内に作成され、ファイルシステムを完全にバイパスします！）。&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt; &lt;code&gt;TEST&lt;/code&gt; &lt;/a&gt;辞書には、テストデータベースを構成するための多くの設定があります。たとえば、別のデータベース名を使用する場合は、&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; の&lt;/a&gt;任意のデータベースの&lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt; &lt;code&gt;TEST&lt;/code&gt; &lt;/a&gt;辞書で&lt;a href=&quot;../../ref/settings#std:setting-TEST_NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt;を指定します。</target>
        </trans-unit>
        <trans-unit id="5ccdf5e525f2d14e5956f486c12773040c4635dd" translate="yes" xml:space="preserve">
          <source>The default timeout of &lt;code&gt;Watchman&lt;/code&gt; client is 5 seconds. You can change it by setting the &lt;a href=&quot;#envvar-DJANGO_WATCHMAN_TIMEOUT&quot; id=&quot;index-4&quot;&gt;&lt;code&gt;DJANGO_WATCHMAN_TIMEOUT&lt;/code&gt;&lt;/a&gt; environment variable.</source>
          <target state="translated">&lt;code&gt;Watchman&lt;/code&gt; クライアントのデフォルトのタイムアウトは5秒です。&lt;a href=&quot;#envvar-DJANGO_WATCHMAN_TIMEOUT&quot; id=&quot;index-4&quot;&gt; &lt;code&gt;DJANGO_WATCHMAN_TIMEOUT&lt;/code&gt; &lt;/a&gt;環境変数を設定することで変更できます。</target>
        </trans-unit>
        <trans-unit id="aa3fea3a2cb7fbdc787868fa2bf10548a411c3b7" translate="yes" xml:space="preserve">
          <source>The default timeout of &lt;code&gt;Watchman&lt;/code&gt; client is 5 seconds. You can change it by setting the &lt;code&gt;DJANGO_WATCHMAN_TIMEOUT&lt;/code&gt; environment variable.</source>
          <target state="translated">&lt;code&gt;Watchman&lt;/code&gt; クライアントのデフォルトのタイムアウトは5秒です。 &lt;code&gt;DJANGO_WATCHMAN_TIMEOUT&lt;/code&gt; 環境変数を設定することにより、これを変更できます。</target>
        </trans-unit>
        <trans-unit id="daa3eede9d94a26c4d7f936a6141140eeabde446" translate="yes" xml:space="preserve">
          <source>The default value for the X-Frame-Options header used by &lt;a href=&quot;middleware#django.middleware.clickjacking.XFrameOptionsMiddleware&quot;&gt;&lt;code&gt;XFrameOptionsMiddleware&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;clickjacking&quot;&gt;clickjacking protection&lt;/a&gt; documentation.</source>
          <target state="translated">&lt;a href=&quot;middleware#django.middleware.clickjacking.XFrameOptionsMiddleware&quot;&gt; &lt;code&gt;XFrameOptionsMiddleware&lt;/code&gt; &lt;/a&gt;によって使用されるX-Frame-Optionsヘッダーのデフォルト値。&lt;a href=&quot;clickjacking&quot;&gt;クリックジャッキング保護の&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="3ad19aea01ce3b34c3122ad6567cba185a95789f" translate="yes" xml:space="preserve">
          <source>The default value for the field. This can be a value or a callable object. If callable it will be called every time a new object is created.</source>
          <target state="translated">フィールドのデフォルト値。これは値か呼び出し可能なオブジェクトになります。呼び出し可能な場合は、新しいオブジェクトが作成されるたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1bdce88035abac81dcdbc686f432758b88e7ee8f" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;0&lt;/code&gt;, preserving the historical behavior of closing the database connection at the end of each request. To enable persistent connections, set &lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt;&lt;code&gt;CONN_MAX_AGE&lt;/code&gt;&lt;/a&gt; to a positive integer of seconds. For unlimited persistent connections, set it to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">デフォルト値は &lt;code&gt;0&lt;/code&gt; で、各リクエストの終了時にデータベース接続を閉じるという履歴動作を保持します。持続的接続を有効にするには、&lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt; &lt;code&gt;CONN_MAX_AGE&lt;/code&gt; &lt;/a&gt;を正の秒の整数に設定します。無制限の持続的接続の場合は、[ &lt;code&gt;None&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="59eac11be59113cb531c77947d459e7720915510" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;0&lt;/code&gt;, preserving the historical behavior of closing the database connection at the end of each request. To enable persistent connections, set &lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt;&lt;code&gt;CONN_MAX_AGE&lt;/code&gt;&lt;/a&gt; to a positive number of seconds. For unlimited persistent connections, set it to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">デフォルト値は &lt;code&gt;0&lt;/code&gt; で、各リクエストの最後にデータベース接続を閉じるという履歴的な動作を保持します。永続的な接続を有効にするには、&lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt; &lt;code&gt;CONN_MAX_AGE&lt;/code&gt; &lt;/a&gt;を正の秒数に設定します。無制限の持続的接続の場合は、 &lt;code&gt;None&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="b64688fe542c602b65e6e7331dbb04c49fa93838" translate="yes" xml:space="preserve">
          <source>The default value is used when new model instances are created and a value isn&amp;rsquo;t provided for the field. When the field is a primary key, the default is also used when the field is set to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">デフォルト値は、新しいモデルインスタンスが作成され、フィールドに値が指定されていない場合に使用されます。フィールドが主キーの場合、フィールドが[ &lt;code&gt;None&lt;/code&gt; 設定されているときにもデフォルトが使用されます。</target>
        </trans-unit>
        <trans-unit id="69ec1abd98185eb6970143dce73b5d12c517b2f4" translate="yes" xml:space="preserve">
          <source>The default value of &lt;code&gt;BooleanField&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; when &lt;a href=&quot;#django.db.models.Field.default&quot;&gt;&lt;code&gt;Field.default&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t defined.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.Field.default&quot;&gt; &lt;code&gt;Field.default&lt;/code&gt; &lt;/a&gt;が定義されていない場合、 &lt;code&gt;BooleanField&lt;/code&gt; のデフォルト値は &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="382174f1bda042f076ce960d46e0b453db42cf82" translate="yes" xml:space="preserve">
          <source>The default value of &lt;code&gt;chunk_size&lt;/code&gt;, 2000, comes from &lt;a href=&quot;https://www.postgresql.org/message-id/4D2F2C71.8080805%40dndg.it&quot;&gt;a calculation on the psycopg mailing list&lt;/a&gt;:</source>
          <target state="translated">デフォルト値の &lt;code&gt;chunk_size&lt;/code&gt; 、2000は、から来ている&lt;a href=&quot;https://www.postgresql.org/message-id/4D2F2C71.8080805%40dndg.it&quot;&gt;psycopgメーリングリストの計算&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="7ca1bec9400ccbbb70ceb6a6128928f0a3fbc600" translate="yes" xml:space="preserve">
          <source>The default value of the &lt;a href=&quot;settings#std:setting-X_FRAME_OPTIONS&quot;&gt;&lt;code&gt;X_FRAME_OPTIONS&lt;/code&gt;&lt;/a&gt; setting was changed from &lt;code&gt;SAMEORIGIN&lt;/code&gt; to &lt;code&gt;DENY&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-X_FRAME_OPTIONS&quot;&gt; &lt;code&gt;X_FRAME_OPTIONS&lt;/code&gt; &lt;/a&gt;設定のデフォルト値が &lt;code&gt;SAMEORIGIN&lt;/code&gt; から &lt;code&gt;DENY&lt;/code&gt; に変更されました。</target>
        </trans-unit>
        <trans-unit id="1209fb884dca8125f9f250e873dad008e7674864" translate="yes" xml:space="preserve">
          <source>The default values of these attributes are probably fine for you. If you determine that the password hash is too fast or too slow, you can tweak it as follows:</source>
          <target state="translated">これらの属性のデフォルト値は、おそらくあなたにとっては問題ありません。パスワードハッシュが速すぎたり遅すぎたりすると判断した場合は、以下のように微調整することができます。</target>
        </trans-unit>
        <trans-unit id="05656151b4b0dfce0903d02dc2521c2ec32bcb69" translate="yes" xml:space="preserve">
          <source>The default version number for cache keys generated by the Django server.</source>
          <target state="translated">Django サーバが生成するキャッシュキーのデフォルトのバージョン番号。</target>
        </trans-unit>
        <trans-unit id="78fb24ffc76652e03018f1dd8a29e38a6634044f" translate="yes" xml:space="preserve">
          <source>The default will find files stored in the &lt;a href=&quot;#std:setting-STATICFILES_DIRS&quot;&gt;&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;&lt;/a&gt; setting (using &lt;code&gt;django.contrib.staticfiles.finders.FileSystemFinder&lt;/code&gt;) and in a &lt;code&gt;static&lt;/code&gt; subdirectory of each app (using &lt;code&gt;django.contrib.staticfiles.finders.AppDirectoriesFinder&lt;/code&gt;). If multiple files with the same name are present, the first file that is found will be used.</source>
          <target state="translated">デフォルトでは、ファイルに保存されているでしょう&lt;a href=&quot;#std:setting-STATICFILES_DIRS&quot;&gt; &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; &lt;/a&gt;（使用して設定 &lt;code&gt;django.contrib.staticfiles.finders.FileSystemFinder&lt;/code&gt; を）とで &lt;code&gt;static&lt;/code&gt; （使用して、各アプリのサブディレクトリ &lt;code&gt;django.contrib.staticfiles.finders.AppDirectoriesFinder&lt;/code&gt; を）。同じ名前のファイルが複数存在する場合は、最初に見つかったファイルが使用されます。</target>
        </trans-unit>
        <trans-unit id="a64c65d5d530fbd477a00f355fb236632c2638fb" translate="yes" xml:space="preserve">
          <source>The default zoom level to use. Defaults to 4.</source>
          <target state="translated">使用するデフォルトのズームレベル。デフォルトは 4 です。</target>
        </trans-unit>
        <trans-unit id="377992fed2cb82d9664407c3569240cb12925a70" translate="yes" xml:space="preserve">
          <source>The default, output 2D WKB.</source>
          <target state="translated">デフォルトでは、2DのWKBを出力します。</target>
        </trans-unit>
        <trans-unit id="1caf832ac267c397b03a907aedb144b4eaa0408e" translate="yes" xml:space="preserve">
          <source>The delete method, conveniently, is named &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt;. This method immediately deletes the object and returns the number of objects deleted and a dictionary with the number of deletions per object type. Example:</source>
          <target state="translated">deleteメソッドは、便宜上、&lt;a href=&quot;../../ref/models/instances#django.db.models.Model.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt;という名前です。このメソッドは、オブジェクトをすぐに削除し、削除されたオブジェクトの数と、オブジェクトタイプごとの削除数を含む辞書を返します。例：</target>
        </trans-unit>
        <trans-unit id="beb30204d16e9db23c951318108a0ecb67ef44cb" translate="yes" xml:space="preserve">
          <source>The description can be of the form:</source>
          <target state="translated">説明文は形式にすることができます。</target>
        </trans-unit>
        <trans-unit id="0d7adcb559f5a853b9e8a2d1c69d315b8258e572" translate="yes" xml:space="preserve">
          <source>The detailed description of the modification. In the case of an edit, for example, the message contains a list of the edited fields. The Django admin site formats this content as a JSON structure, so that &lt;a href=&quot;#django.contrib.admin.models.LogEntry.get_change_message&quot;&gt;&lt;code&gt;get_change_message()&lt;/code&gt;&lt;/a&gt; can recompose a message translated in the current user language. Custom code might set this as a plain string though. You are advised to use the &lt;a href=&quot;#django.contrib.admin.models.LogEntry.get_change_message&quot;&gt;&lt;code&gt;get_change_message()&lt;/code&gt;&lt;/a&gt; method to retrieve this value instead of accessing it directly.</source>
          <target state="translated">変更の詳細な説明。たとえば、編集の場合、メッセージには編集されたフィールドのリストが含まれます。Django管理サイトはこのコンテンツをJSON構造としてフォーマットしているため、&lt;a href=&quot;#django.contrib.admin.models.LogEntry.get_change_message&quot;&gt; &lt;code&gt;get_change_message()&lt;/code&gt; &lt;/a&gt;は現在のユーザー言語に翻訳されたメッセージを再構成できます。カスタムコードはこれをプレーンな文字列として設定するかもしれません。この値に直接アクセスする代わりに、&lt;a href=&quot;#django.contrib.admin.models.LogEntry.get_change_message&quot;&gt; &lt;code&gt;get_change_message()&lt;/code&gt; &lt;/a&gt;メソッドを使用してこの値を取得することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="85044ff6d8ec6add8fcd586dc1308888d31cb228" translate="yes" xml:space="preserve">
          <source>The development process</source>
          <target state="translated">開発プロセス</target>
        </trans-unit>
        <trans-unit id="37d50d4b3c28889858e66e29eb1b78542a0508a0" translate="yes" xml:space="preserve">
          <source>The development server</source>
          <target state="translated">開発サーバー</target>
        </trans-unit>
        <trans-unit id="cfd3b8bf265c1a3f4338f7de1430c957570dea3e" translate="yes" xml:space="preserve">
          <source>The development server automatically reloads Python code for each request as needed. You don&amp;rsquo;t need to restart the server for code changes to take effect. However, some actions like adding files don&amp;rsquo;t trigger a restart, so you&amp;rsquo;ll have to restart the server in these cases.</source>
          <target state="translated">開発サーバーは、必要に応じてリクエストごとにPythonコードを自動的に再読み込みします。コードの変更を有効にするためにサーバーを再起動する必要はありません。ただし、ファイルの追加などの一部のアクションでは再起動はトリガーされないため、このような場合はサーバーを再起動する必要があります。</target>
        </trans-unit>
        <trans-unit id="69d40d41fd2c7119854b55dbde3aff7f9dc4a8a6" translate="yes" xml:space="preserve">
          <source>The development server automatically reloads Python code for each request, as needed. You don&amp;rsquo;t need to restart the server for code changes to take effect. However, some actions like adding files don&amp;rsquo;t trigger a restart, so you&amp;rsquo;ll have to restart the server in these cases.</source>
          <target state="translated">開発サーバーは、必要に応じて、リクエストごとにPythonコードを自動的に再読み込みします。コードの変更を有効にするためにサーバーを再起動する必要はありません。ただし、ファイルの追加などの一部のアクションでは再起動はトリガーされないため、このような場合はサーバーを再起動する必要があります。</target>
        </trans-unit>
        <trans-unit id="f2e2c61a3bbc35c05fcee6ff83b301d727f6625e" translate="yes" xml:space="preserve">
          <source>The development server creates a new thread for each request it handles, negating the effect of persistent connections. Don&amp;rsquo;t enable them during development.</source>
          <target state="translated">開発サーバーは、処理するリクエストごとに新しいスレッドを作成し、永続的な接続の影響を無効にします。開発中は有効にしないでください。</target>
        </trans-unit>
        <trans-unit id="65a8a705f321727b308c87b6df994fe9d93e089d" translate="yes" xml:space="preserve">
          <source>The difference between these two is merely the template used to render them.</source>
          <target state="translated">この2つの違いは、単にレンダリングに使用されるテンプレートに過ぎません。</target>
        </trans-unit>
        <trans-unit id="0af504d1f47d3dc1755fe98c77ffbaa71f21426a" translate="yes" xml:space="preserve">
          <source>The difference comes in &amp;ldquo;reverse&amp;rdquo; queries. The related model in a one-to-one relationship also has access to a &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; object, but that &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; represents a single object, rather than a collection of objects:</source>
          <target state="translated">違いは、「逆」クエリにあります。1対1の関係にある関連モデルも&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;オブジェクトにアクセスできますが、その&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;はオブジェクトのコレクションではなく単一のオブジェクトを表します。</target>
        </trans-unit>
        <trans-unit id="aeea901ff7490fa90553479447d7a51e8ae76e53" translate="yes" xml:space="preserve">
          <source>The difference here is that &lt;code&gt;do_current_time()&lt;/code&gt; grabs the format string and the variable name, passing both to &lt;code&gt;CurrentTimeNode3&lt;/code&gt;.</source>
          <target state="translated">ここでの違いは、 &lt;code&gt;do_current_time()&lt;/code&gt; がフォーマット文字列と変数名を取得し、両方を &lt;code&gt;CurrentTimeNode3&lt;/code&gt; に渡すことです。</target>
        </trans-unit>
        <trans-unit id="23e00239d3cd39f9bedf6ce6f53d58fb2c97897d" translate="yes" xml:space="preserve">
          <source>The different model field types (&lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;) correspond to the appropriate HTML input widget. Each type of field knows how to display itself in the Django admin.</source>
          <target state="translated">さまざまなモデルフィールドタイプ（&lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;）は、適切なHTML入力ウィジェットに対応しています。各タイプのフィールドは、Django管理でそれ自体を表示する方法を認識しています。</target>
        </trans-unit>
        <trans-unit id="5a27e6d484146d270b4af242adf6d6837ab3c613" translate="yes" xml:space="preserve">
          <source>The directories listed in &lt;a href=&quot;../../ref/settings#std:setting-LOCALE_PATHS&quot;&gt;&lt;code&gt;LOCALE_PATHS&lt;/code&gt;&lt;/a&gt; have the highest precedence, with the ones appearing first having higher precedence than the ones appearing later.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-LOCALE_PATHS&quot;&gt; &lt;code&gt;LOCALE_PATHS&lt;/code&gt; に&lt;/a&gt;リストされているディレクトリの優先順位が最も高く、最初に表示されるディレクトリが後で表示されるディレクトリよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="f7c245d673aa06edd0292f66414c88ff2123f718" translate="yes" xml:space="preserve">
          <source>The directory path should be absolute &amp;ndash; that is, it should start at the root of your filesystem. It doesn&amp;rsquo;t matter whether you put a slash at the end of the setting.</source>
          <target state="translated">ディレクトリパスは絶対パスでなければなりません。つまり、ファイルシステムのルートから開始する必要があります。設定の最後にスラッシュを付けるかどうかは関係ありません。</target>
        </trans-unit>
        <trans-unit id="b0c013069880559208deaffa6c2dbdd225ff8eea" translate="yes" xml:space="preserve">
          <source>The directory to store data to (typically files larger than &lt;a href=&quot;#std:setting-FILE_UPLOAD_MAX_MEMORY_SIZE&quot;&gt;&lt;code&gt;FILE_UPLOAD_MAX_MEMORY_SIZE&lt;/code&gt;&lt;/a&gt;) temporarily while uploading files. If &lt;code&gt;None&lt;/code&gt;, Django will use the standard temporary directory for the operating system. For example, this will default to &lt;code&gt;/tmp&lt;/code&gt; on *nix-style operating systems.</source>
          <target state="translated">ファイルのアップロード中にデータを一時的に保存するディレクトリ（通常は&lt;a href=&quot;#std:setting-FILE_UPLOAD_MAX_MEMORY_SIZE&quot;&gt; &lt;code&gt;FILE_UPLOAD_MAX_MEMORY_SIZE&lt;/code&gt; &lt;/a&gt;より大きいファイル）。 &lt;code&gt;None&lt;/code&gt; の場合、Djangoはオペレーティングシステムの標準の一時ディレクトリを使用します。たとえば、* nixスタイルのオペレーティングシステムでは、これはデフォルトで &lt;code&gt;/tmp&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="efe6c9d9a26f4b893a41fdd2ad38e95aa63558d5" translate="yes" xml:space="preserve">
          <source>The directory used by the &lt;a href=&quot;../topics/email#topic-email-file-backend&quot;&gt;file email backend&lt;/a&gt; to store output files.</source>
          <target state="translated">&lt;a href=&quot;../topics/email#topic-email-file-backend&quot;&gt;ファイルemailバックエンド&lt;/a&gt;が出力ファイルを格納するために使用するディレクトリ。</target>
        </trans-unit>
        <trans-unit id="e16e14dcb79a4952dfb0ecb7dfccc157d53819e1" translate="yes" xml:space="preserve">
          <source>The distinction between &lt;a href=&quot;../../ref/forms/api#ref-forms-api-bound-unbound&quot;&gt;Bound and unbound forms&lt;/a&gt; is important:</source>
          <target state="translated">&lt;a href=&quot;../../ref/forms/api#ref-forms-api-bound-unbound&quot;&gt;バインドされたフォームとバインドされていないフォーム&lt;/a&gt;の違いは重要です。</target>
        </trans-unit>
        <trans-unit id="b08bc2093c5f8031ea7f3c8aaf065d1cf0aa2c00" translate="yes" xml:space="preserve">
          <source>The domain to be used when setting the CSRF cookie. This can be useful for easily allowing cross-subdomain requests to be excluded from the normal cross site request forgery protection. It should be set to a string such as &lt;code&gt;&quot;.example.com&quot;&lt;/code&gt; to allow a POST request from a form on one subdomain to be accepted by a view served from another subdomain.</source>
          <target state="translated">CSRFCookieを設定するときに使用されるドメイン。これは、クロスサブドメインリクエストを通常のクロスサイトリクエストフォージェリ保護から簡単に除外できるようにするのに役立ちます。あるサブドメインのフォームからのPOSTリクエストを別のサブドメインから提供されるビューで受け入れることができるようにするには、 &lt;code&gt;&quot;.example.com&quot;&lt;/code&gt; などの文字列に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d0ba4fee1656fe57462feb575961e9a008b70b5c" translate="yes" xml:space="preserve">
          <source>The domain to be used when setting the CSRF cookie. This can be useful for easily allowing cross-subdomain requests to be excluded from the normal cross site request forgery protection. It should be set to a string such as &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; to allow a POST request from a form on one subdomain to be accepted by a view served from another subdomain.</source>
          <target state="translated">CSRF Coo​​kieを設定するときに使用されるドメイン。これは、クロスサブドメインのリクエストを通常のクロスサイトリクエストの偽造防止から簡単に除外できるようにするのに役立ちます。 &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; などの文字列に設定して、あるサブドメインのフォームからのPOSTリクエストが別のサブドメインから提供されるビューで受け入れられるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="f6fa4e11ee0c7e669d33883c4844543c8422b769" translate="yes" xml:space="preserve">
          <source>The domain to use for session cookies. Set this to a string such as &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; for cross-domain cookies, or use &lt;code&gt;None&lt;/code&gt; for a standard domain cookie.</source>
          <target state="translated">セッションCookieに使用するドメイン。クロスドメインCookieの場合は &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; などの文字列に設定し、標準ドメインCookieの場合は &lt;code&gt;None&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="68346906ed672a3e709eb8f536ba1f940cc1a0e8" translate="yes" xml:space="preserve">
          <source>The domain to use for the language cookie. Set this to a string such as &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; for cross-domain cookies, or use &lt;code&gt;None&lt;/code&gt; for a standard domain cookie.</source>
          <target state="translated">言語Cookieに使用するドメイン。クロスドメインCookieの場合は &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; などの文字列に設定し、標準ドメインCookieの場合は &lt;code&gt;None&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="5c99e78398396ac3dd4367988dfe7298ad65d032" translate="yes" xml:space="preserve">
          <source>The dotted paths of logger names define a hierarchy. The &lt;code&gt;project.interesting&lt;/code&gt; logger is considered to be a parent of the &lt;code&gt;project.interesting.stuff&lt;/code&gt; logger; the &lt;code&gt;project&lt;/code&gt; logger is a parent of the &lt;code&gt;project.interesting&lt;/code&gt; logger.</source>
          <target state="translated">ロガー名の点線のパスは階層を定義します。 &lt;code&gt;project.interesting&lt;/code&gt; ロガーは親のように考えられている &lt;code&gt;project.interesting.stuff&lt;/code&gt; のロガー。 &lt;code&gt;project&lt;/code&gt; ロガーはの親である &lt;code&gt;project.interesting&lt;/code&gt; のロガー。</target>
        </trans-unit>
        <trans-unit id="5e13710149427fbf66cfeca797b8aff6be0c4f4b" translate="yes" xml:space="preserve">
          <source>The dynamic link will not appear if the number of currently displayed forms exceeds &lt;code&gt;max_num&lt;/code&gt;, or if the user does not have JavaScript enabled.</source>
          <target state="translated">現在表示されているフォームの数が &lt;code&gt;max_num&lt;/code&gt; を超えている場合、またはユーザーがJavaScriptを有効にしていない場合、ダイナミックリンクは表示されません。</target>
        </trans-unit>
        <trans-unit id="0d55a3c97d629d07660c6f636bfc19000aac89ef" translate="yes" xml:space="preserve">
          <source>The easiest solution to this gotcha is to make sure in your view code that the data is ordered according to how you want to display it.</source>
          <target state="translated">この問題を解決する最も簡単な方法は、ビューコードの中でデータが表示方法に応じて順序付けされていることを確認することです。</target>
        </trans-unit>
        <trans-unit id="aefa18e20124a245a37ca6a166c5d0fa5833b82b" translate="yes" xml:space="preserve">
          <source>The easiest way to configure email for local development is to use the &lt;a href=&quot;#topic-email-console-backend&quot;&gt;console&lt;/a&gt; email backend. This backend redirects all email to stdout, allowing you to inspect the content of mail.</source>
          <target state="translated">ローカル開発用に電子メールを構成する最も簡単な方法は、&lt;a href=&quot;#topic-email-console-backend&quot;&gt;コンソールの&lt;/a&gt;電子メールバックエンドを使用することです。このバックエンドはすべてのメールをstdoutにリダイレクトし、メールの内容を検査できるようにします。</target>
        </trans-unit>
        <trans-unit id="b18bdad619333227fb015706761f59c6e7dce1e9" translate="yes" xml:space="preserve">
          <source>The easiest way to construct a compliant custom user model is to inherit from &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt; provides the core implementation of a user model, including hashed passwords and tokenized password resets. You must then provide some key implementation details:</source>
          <target state="translated">準拠したカスタムユーザーモデルを構築する最も簡単な方法は、&lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; &lt;/a&gt;から継承することです。&lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; &lt;/a&gt;は、ハッシュされたパスワードやトークン化されたパスワードのリセットなど、ユーザーモデルのコア実装を提供します。次に、いくつかの重要な実装の詳細を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="102bc6398625e356db3cd3d1071a8edf4afe2996" translate="yes" xml:space="preserve">
          <source>The easiest way to define assets is as a static definition. Using this method, the declaration is an inner &lt;code&gt;Media&lt;/code&gt; class. The properties of the inner class define the requirements.</source>
          <target state="translated">アセットを定義する最も簡単な方法は、静的な定義です。このメソッドを使用すると、宣言は内部 &lt;code&gt;Media&lt;/code&gt; クラスになります。内部クラスのプロパティは要件を定義します。</target>
        </trans-unit>
        <trans-unit id="db27be8a72981483eaa7cc9cc5a678cbb34ecd8b" translate="yes" xml:space="preserve">
          <source>The easiest way to explain actions is by example, so let&amp;rsquo;s dive in.</source>
          <target state="translated">アクションを説明する最も簡単な方法は例ですので、詳しく見ていきましょう。</target>
        </trans-unit>
        <trans-unit id="bbbcd95919fd1ecf2e067b0fc6797a2e498acd03" translate="yes" xml:space="preserve">
          <source>The easiest way to use multiple databases is to set up a database routing scheme. The default routing scheme ensures that objects remain &amp;lsquo;sticky&amp;rsquo; to their original database (i.e., an object retrieved from the &lt;code&gt;foo&lt;/code&gt; database will be saved on the same database). The default routing scheme ensures that if a database isn&amp;rsquo;t specified, all queries fall back to the &lt;code&gt;default&lt;/code&gt; database.</source>
          <target state="translated">複数のデータベースを使用する最も簡単な方法は、データベースルーティングスキームを設定することです。デフォルトのルーティングスキームは、オブジェクトが元のデータベースに対して「スティッキー」であることを保証します（つまり、 &lt;code&gt;foo&lt;/code&gt; データベースから取得されたオブジェクトは同じデータベースに保存されます）。デフォルトのルーティング方式では、データベースが指定されていない場合、すべてのクエリが &lt;code&gt;default&lt;/code&gt; データベースにフォールバックします。</target>
        </trans-unit>
        <trans-unit id="5dc09f982934c220e0648dd7dc1424777a9b07ff" translate="yes" xml:space="preserve">
          <source>The email address that error messages come from, such as those sent to &lt;a href=&quot;#std:setting-ADMINS&quot;&gt;&lt;code&gt;ADMINS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#std:setting-MANAGERS&quot;&gt;&lt;code&gt;MANAGERS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラーメッセージの送信元のメールアドレス（&lt;a href=&quot;#std:setting-ADMINS&quot;&gt; &lt;code&gt;ADMINS&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#std:setting-MANAGERS&quot;&gt; &lt;code&gt;MANAGERS&lt;/code&gt; に&lt;/a&gt;送信されたメールアドレスなど）。</target>
        </trans-unit>
        <trans-unit id="b2aa2cff626dddc91132ca31ab8a805481ff856c" translate="yes" xml:space="preserve">
          <source>The email backend class has the following methods:</source>
          <target state="translated">メールバックエンドクラスには以下のメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="4d71c5b436fb244d32f220ecce35712f91163ed6" translate="yes" xml:space="preserve">
          <source>The equality method is defined such that instances with the same primary key value and the same concrete class are considered equal, except that instances with a primary key value of &lt;code&gt;None&lt;/code&gt; aren&amp;rsquo;t equal to anything except themselves. For proxy models, concrete class is defined as the model&amp;rsquo;s first non-proxy parent; for all other models it&amp;rsquo;s simply the model&amp;rsquo;s class.</source>
          <target state="translated">等価メソッドは、主キーの値が &lt;code&gt;None&lt;/code&gt; であるインスタンスはそれ以外のインスタンスと等しくないことを除いて、同じ主キーの値と同じ具象クラスを持つインスタンスは等しいと見なされるように定義されています。プロキシモデルの場合、具象クラスはモデルの最初の非プロキシ親として定義されます。他のすべてのモデルでは、それは単にモデルのクラスです。</target>
        </trans-unit>
        <trans-unit id="9ebf4117d2b8a093f5d8b0d1ee0394b967c0414e" translate="yes" xml:space="preserve">
          <source>The equivalent calculation in Python is:</source>
          <target state="translated">Pythonでの等価計算は</target>
        </trans-unit>
        <trans-unit id="5efbfe2be254c3accd765a74009d40714d479343" translate="yes" xml:space="preserve">
          <source>The error code used by &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if validation fails. Defaults to &lt;code&gt;&quot;invalid&quot;&lt;/code&gt;.</source>
          <target state="translated">検証が失敗した場合に&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;によって使用されるエラーコード。デフォルトは &lt;code&gt;&quot;invalid&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1b5adb27a8996cdfa0262e0146f124cdf9dba05a" translate="yes" xml:space="preserve">
          <source>The error code used by &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if validation fails. Defaults to &lt;code&gt;&quot;null_characters_not_allowed&quot;&lt;/code&gt;.</source>
          <target state="translated">検証が失敗した場合に&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;によって使用されるエラーコード。デフォルトは &lt;code&gt;&quot;null_characters_not_allowed&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="24202a6a3b9947bb61029f3e19e5678ab0a3296e" translate="yes" xml:space="preserve">
          <source>The error message used by &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if validation fails. Defaults to &lt;code&gt;&quot;Enter a valid email address&quot;&lt;/code&gt;.</source>
          <target state="translated">検証が失敗した場合に&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;によって使用されるエラーメッセージ。デフォルトは &lt;code&gt;&quot;Enter a valid email address&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="79cc7e5b6a815e9ec647851b99499ab73ff67c57" translate="yes" xml:space="preserve">
          <source>The error message used by &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if validation fails. Defaults to &lt;code&gt;&quot;Enter a valid value&quot;&lt;/code&gt;.</source>
          <target state="translated">検証が失敗した場合に&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;によって使用されるエラーメッセージ。デフォルトは &lt;code&gt;&quot;Enter a valid value&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="057fab28e3430ed0f7b4a055703ab67be3eb226b" translate="yes" xml:space="preserve">
          <source>The error message used by &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if validation fails. Defaults to &lt;code&gt;&quot;Null characters are not allowed.&quot;&lt;/code&gt;.</source>
          <target state="translated">検証が失敗した場合に&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;によって使用されるエラーメッセージ。デフォルトは &lt;code&gt;&quot;Null characters are not allowed.&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="61a770a7f28e3325a45dcd70e8e1fa45b0d96d7e" translate="yes" xml:space="preserve">
          <source>The error page, however, is not very friendly, so you may want to provide your own view for handling this condition. To do this, set the &lt;a href=&quot;settings#std:setting-CSRF_FAILURE_VIEW&quot;&gt;&lt;code&gt;CSRF_FAILURE_VIEW&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">ただし、エラーページはあまり友好的ではないため、この状態を処理するための独自のビューを提供することができます。これを行うには、&lt;a href=&quot;settings#std:setting-CSRF_FAILURE_VIEW&quot;&gt; &lt;code&gt;CSRF_FAILURE_VIEW&lt;/code&gt; &lt;/a&gt;設定を設定します。</target>
        </trans-unit>
        <trans-unit id="8d65d9525c27d19f320d6dc01f0885b38569c7fc" translate="yes" xml:space="preserve">
          <source>The event is fired using the &lt;a href=&quot;index#contrib-admin-jquery&quot;&gt;django.jQuery namespace&lt;/a&gt;.</source>
          <target state="translated">イベントは&lt;a href=&quot;index#contrib-admin-jquery&quot;&gt;django.jQuery名前空間&lt;/a&gt;を使用して発生します。</target>
        </trans-unit>
        <trans-unit id="1b539ba0434b08941170f2cd1f818a49da908b66" translate="yes" xml:space="preserve">
          <source>The exact URLs that will match are slightly more constrained. For example, the year 10000 will no longer match since the year integers are constrained to be exactly four digits long.</source>
          <target state="translated">一致する正確な URL は少し制約があります。例えば、年の整数は正確に4桁の長さに制限されているため、10000年はもはや一致しません。</target>
        </trans-unit>
        <trans-unit id="b4dbb4fcb65cef76c61031d37fb2287e26d8f480" translate="yes" xml:space="preserve">
          <source>The exact output will vary depending on the database you are using. The example above is generated for PostgreSQL.</source>
          <target state="translated">正確な出力は、使用しているデータベースによって異なります。上の例はPostgreSQL用に生成されています。</target>
        </trans-unit>
        <trans-unit id="6244d10392df2eaaeb16d3a53c4aefd2551507e9" translate="yes" xml:space="preserve">
          <source>The exact type of the return value depends on the backend that loaded the template. Each backend has its own &lt;code&gt;Template&lt;/code&gt; class.</source>
          <target state="translated">戻り値の正確なタイプは、テンプレートをロードしたバックエンドによって異なります。各バックエンドには独自の &lt;code&gt;Template&lt;/code&gt; クラスがあります。</target>
        </trans-unit>
        <trans-unit id="d258cbef311d29cf54b7972437f615ede5dab5c9" translate="yes" xml:space="preserve">
          <source>The example above is merely illustrative.</source>
          <target state="translated">上記の例はあくまでも例示に過ぎません。</target>
        </trans-unit>
        <trans-unit id="ce3e4f139b39bcf4b91e72adf60a54a7d1683bfb" translate="yes" xml:space="preserve">
          <source>The example above shows a full &lt;code&gt;from_db()&lt;/code&gt; implementation to clarify how that is done. In this case it would be possible to use a &lt;code&gt;super()&lt;/code&gt; call in the &lt;code&gt;from_db()&lt;/code&gt; method.</source>
          <target state="translated">上記の例は、それがどのように行われるかを明確にするための完全な &lt;code&gt;from_db()&lt;/code&gt; 実装を示しています。この場合、 &lt;code&gt;from_db()&lt;/code&gt; メソッドで &lt;code&gt;super()&lt;/code&gt; 呼び出しを使用することが可能です。</target>
        </trans-unit>
        <trans-unit id="09ae48bd2b690b219baf1e4df51329cbdd48516f" translate="yes" xml:space="preserve">
          <source>The example above shows a full &lt;code&gt;from_db()&lt;/code&gt; implementation to clarify how that is done. In this case it would of course be possible to use &lt;code&gt;super()&lt;/code&gt; call in the &lt;code&gt;from_db()&lt;/code&gt; method.</source>
          <target state="translated">上記の例は、それがどのように行われるかを明確にするために、完全な &lt;code&gt;from_db()&lt;/code&gt; 実装を示しています。この場合はもちろん、 &lt;code&gt;from_db()&lt;/code&gt; メソッドで &lt;code&gt;super()&lt;/code&gt; 呼び出しを使用することができます。</target>
        </trans-unit>
        <trans-unit id="01d04d9726b7a687dfcd3e1f1be1c2f02aa93f43" translate="yes" xml:space="preserve">
          <source>The example above shows the &lt;code&gt;make_published&lt;/code&gt; action defined as a function. That&amp;rsquo;s perfectly fine, but it&amp;rsquo;s not perfect from a code design point of view: since the action is tightly coupled to the &lt;code&gt;Article&lt;/code&gt; object, it makes sense to hook the action to the &lt;code&gt;ArticleAdmin&lt;/code&gt; object itself.</source>
          <target state="translated">上記の例は、関数として定義された &lt;code&gt;make_published&lt;/code&gt; アクションを示しています。これはまったく問題ありませんが、コード設計の観点からは完全ではありません。アクションは &lt;code&gt;Article&lt;/code&gt; オブジェクトに密接に結合されているため、 &lt;code&gt;ArticleAdmin&lt;/code&gt; オブジェクト自体にアクションをフックすることは理にかなっています。</target>
        </trans-unit>
        <trans-unit id="70fd6fd83f7a6415e49b18c6e810e778afba736b" translate="yes" xml:space="preserve">
          <source>The example below shows a custom database-backed session engine that includes an additional database column to store an account ID (thus providing an option to query the database for all active sessions for an account):</source>
          <target state="translated">以下の例は、アカウントIDを格納するための追加のデータベースカラムを含む、データベースをバックにしたカスタムセッションエンジンを示しています(これにより、アカウントのすべてのアクティブなセッションについてデータベースにクエリを実行するオプションが提供されます)。</target>
        </trans-unit>
        <trans-unit id="bdd75b3461c74472c1d252b5b38ac3cd7b71a1bc" translate="yes" xml:space="preserve">
          <source>The example creates a file at &lt;code&gt;templates/admin/base_site.html&lt;/code&gt; that uses the configured project-level &lt;code&gt;templates&lt;/code&gt; directory to override &lt;code&gt;admin/base_site.html&lt;/code&gt;.</source>
          <target state="translated">この例では、設定されたプロジェクトレベルの &lt;code&gt;templates&lt;/code&gt; ディレクトリを使用して &lt;code&gt;admin/base_site.html&lt;/code&gt; を上書きするファイルを &lt;code&gt;templates/admin/base_site.html&lt;/code&gt; 作成します。</target>
        </trans-unit>
        <trans-unit id="70d2d5dcaec3c018f486ad3a35bf450d09973557" translate="yes" xml:space="preserve">
          <source>The example output is from the cities data source, loaded above, which evidently contains one layer, called &lt;code&gt;&quot;cities&quot;&lt;/code&gt;, which contains three point features. For simplicity, the examples below assume that you&amp;rsquo;ve stored that layer in the variable &lt;code&gt;layer&lt;/code&gt;:</source>
          <target state="translated">出力例は、上記でロードされた都市データソースからのもので、明らかに3つのポイントフィーチャを含む &lt;code&gt;&quot;cities&quot;&lt;/code&gt; と呼ばれる1つのレイヤーが含まれています。簡単にするために、以下の例では、そのレイヤーを変数 &lt;code&gt;layer&lt;/code&gt; 格納していると想定しています。</target>
        </trans-unit>
        <trans-unit id="6691f770da4c54ad86e364f335c9b091bbf02a5d" translate="yes" xml:space="preserve">
          <source>The examples below assume you are using function-based views. If you are working with class-based views, you can refer to &lt;a href=&quot;../topics/class-based-views/intro#id1&quot;&gt;Decorating class-based views&lt;/a&gt;.</source>
          <target state="translated">以下の例では、関数ベースのビューを使用していると想定しています。クラスベースのビューを使用している場合は、「&lt;a href=&quot;../topics/class-based-views/intro#id1&quot;&gt;クラスベースのビューの装飾&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="f3acd75e8ac886e7361e65f7b3411b9fa504b1b4" translate="yes" xml:space="preserve">
          <source>The examples below show the SQL equivalent for the lookups in the different types of raster support. The same pattern applies to all spatial lookups.</source>
          <target state="translated">以下の例では、ラスタサポートの異なるタイプのルックアップのSQLと同等のものを示しています。すべての空間ルックアップに同じパターンが適用されます。</target>
        </trans-unit>
        <trans-unit id="0381bb676822bd2c1fc32593d3eafed41c0ed3d5" translate="yes" xml:space="preserve">
          <source>The examples in the previous section have hard-coded the fact that the view is cached, because &lt;code&gt;cache_page&lt;/code&gt; alters the &lt;code&gt;my_view&lt;/code&gt; function in place. This approach couples your view to the cache system, which is not ideal for several reasons. For instance, you might want to reuse the view functions on another, cache-less site, or you might want to distribute the views to people who might want to use them without being cached. The solution to these problems is to specify the per-view cache in the URLconf rather than next to the view functions themselves.</source>
          <target state="translated">前のセクションの例では、 &lt;code&gt;my_view&lt;/code&gt; 関数を &lt;code&gt;cache_page&lt;/code&gt; 変更するため、ビューがキャッシュされるという事実をハードコーディングしています。このアプローチは、ビューをキャッシュシステムに結合しますが、これはいくつかの理由で理想的ではありません。たとえば、キャッシュのない別のサイトでビュー機能を再利用したり、キャッシュせずにビューを使用したいユーザーにビューを配布したりできます。これらの問題の解決策は、ビュー関数自体の横ではなく、URLconfでビューごとのキャッシュを指定することです。</target>
        </trans-unit>
        <trans-unit id="dc504c1e75f70f01937775c1721634f5639b416b" translate="yes" xml:space="preserve">
          <source>The examples in this section are designed to show how to force Django to execute a subquery. In some cases it may be possible to write an equivalent queryset that performs the same task more clearly or efficiently.</source>
          <target state="translated">この節の例は、Django にサブクエリを強制的に実行させる方法を示すためのものです。場合によっては、同じタスクをより明確に、あるいは効率的に実行する同等のクエリーセットを書くことができるかもしれません。</target>
        </trans-unit>
        <trans-unit id="e3ba78a8e40dda280647c05bf08b8f045ba77f2b" translate="yes" xml:space="preserve">
          <source>The examples in this section import the &lt;code&gt;SessionStore&lt;/code&gt; object directly from the &lt;code&gt;django.contrib.sessions.backends.db&lt;/code&gt; backend. In your own code, you should consider importing &lt;code&gt;SessionStore&lt;/code&gt; from the session engine designated by &lt;a href=&quot;../../ref/settings#std:setting-SESSION_ENGINE&quot;&gt;&lt;code&gt;SESSION_ENGINE&lt;/code&gt;&lt;/a&gt;, as below:</source>
          <target state="translated">このセクションの例では、 &lt;code&gt;django.contrib.sessions.backends.db&lt;/code&gt; バックエンドから &lt;code&gt;SessionStore&lt;/code&gt; オブジェクトを直接インポートします。独自のコードでは、以下のように、&lt;a href=&quot;../../ref/settings#std:setting-SESSION_ENGINE&quot;&gt; &lt;code&gt;SESSION_ENGINE&lt;/code&gt; &lt;/a&gt;で指定されたセッションエンジンから &lt;code&gt;SessionStore&lt;/code&gt; をインポートすることを検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="e35dffac0488c2561c931a83c6fe1cf1d8a50419" translate="yes" xml:space="preserve">
          <source>The exception raised when an error occurs in a call to the underlying &lt;code&gt;geoip2&lt;/code&gt; library.</source>
          <target state="translated">基になる &lt;code&gt;geoip2&lt;/code&gt; ライブラリの呼び出しでエラーが発生したときに発生する例外。</target>
        </trans-unit>
        <trans-unit id="d9a23b0961a565f479b556667da6987637df208d" translate="yes" xml:space="preserve">
          <source>The exception reporter is responsible for compiling the exception report data, and formatting it as text or HTML appropriately. (The exception reporter uses &lt;a href=&quot;../ref/settings#std:setting-DEFAULT_EXCEPTION_REPORTER_FILTER&quot;&gt;&lt;code&gt;DEFAULT_EXCEPTION_REPORTER_FILTER&lt;/code&gt;&lt;/a&gt; when preparing the exception report data.)</source>
          <target state="translated">例外レポーターは、例外レポートデータをコンパイルし、テキストまたはHTMLとして適切にフォーマットする責任があります。（例外レポーターは、例外レポートデータを準備するときに&lt;a href=&quot;../ref/settings#std:setting-DEFAULT_EXCEPTION_REPORTER_FILTER&quot;&gt; &lt;code&gt;DEFAULT_EXCEPTION_REPORTER_FILTER&lt;/code&gt; を&lt;/a&gt;使用します。）</target>
        </trans-unit>
        <trans-unit id="cda3c2363ac6d38861a1a8d767657d0f57cada68" translate="yes" xml:space="preserve">
          <source>The extension of class-based views isn&amp;rsquo;t limited to using mixins. You can also use decorators. Since class-based views aren&amp;rsquo;t functions, decorating them works differently depending on if you&amp;rsquo;re using &lt;code&gt;as_view()&lt;/code&gt; or creating a subclass.</source>
          <target state="translated">クラスベースのビューの拡張は、ミックスインの使用に限定されません。デコレータを使用することもできます。クラスベースのビューは関数ではないので、 &lt;code&gt;as_view()&lt;/code&gt; を使用しているか、サブクラスを作成しているかによって、装飾の動作は異なります。</target>
        </trans-unit>
        <trans-unit id="f0757fbf21f596c81165c37d3764eb4cbc8188fc" translate="yes" xml:space="preserve">
          <source>The failure messages given by most of these assertion methods can be customized with the &lt;code&gt;msg_prefix&lt;/code&gt; argument. This string will be prefixed to any failure message generated by the assertion. This allows you to provide additional details that may help you to identify the location and cause of a failure in your test suite.</source>
          <target state="translated">これらのアサーションメソッドのほとんどによって提供される失敗メッセージは、 &lt;code&gt;msg_prefix&lt;/code&gt; 引数を使用してカスタマイズできます。この文字列は、アサーションによって生成された失敗メッセージの前に付けられます。これにより、テストスイートの場所と失敗の原因を特定するのに役立つ追加の詳細情報を提供できます。</target>
        </trans-unit>
        <trans-unit id="d89de5b0252a42331ac71056c598b5e5535c2805" translate="yes" xml:space="preserve">
          <source>The fallback on &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; in the default &lt;code&gt;input_formats&lt;/code&gt; was added.</source>
          <target state="translated">デフォルトの &lt;code&gt;input_formats&lt;/code&gt; の &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; のフォールバックが追加されました。</target>
        </trans-unit>
        <trans-unit id="227e5834572c4e194e4fc54218042f6fd22390e4" translate="yes" xml:space="preserve">
          <source>The fastest, most efficient type of cache supported natively by Django, &lt;a href=&quot;https://memcached.org/&quot;&gt;Memcached&lt;/a&gt; is an entirely memory-based cache server, originally developed to handle high loads at LiveJournal.com and subsequently open-sourced by Danga Interactive. It is used by sites such as Facebook and Wikipedia to reduce database access and dramatically increase site performance.</source>
          <target state="translated">&lt;a href=&quot;https://memcached.org/&quot;&gt;Memcached&lt;/a&gt;は、Djangoによってネイティブでサポートされている最速で最も効率的なタイプのキャッシュです。完全にメモリベースのキャッシュサーバーで、元々はLiveJournal.comで高負荷を処理するために開発され、その後Danga Interactiveによってオープンソース化されました。FacebookやWikipediaなどのサイトで使用され、データベースアクセスを減らし、サイトのパフォーマンスを劇的に向上させます。</target>
        </trans-unit>
        <trans-unit id="b74b1508edbbb23e6a3000370c6cd096da1fa665" translate="yes" xml:space="preserve">
          <source>The field allows choosing from files inside a certain directory. It takes five extra arguments; only &lt;code&gt;path&lt;/code&gt; is required:</source>
          <target state="translated">このフィールドでは、特定のディレクトリ内のファイルから選択できます。5つの追加の引数が必要です。 &lt;code&gt;path&lt;/code&gt; のみが必要です：</target>
        </trans-unit>
        <trans-unit id="341f0b8c7b2bc92e1fd6f729ca5049a35daf85db" translate="yes" xml:space="preserve">
          <source>The field always accepts strings in ISO 8601 formatted dates or similar recognized by &lt;a href=&quot;../utils#django.utils.dateparse.parse_datetime&quot;&gt;&lt;code&gt;parse_datetime()&lt;/code&gt;&lt;/a&gt;. Some examples are:</source>
          <target state="translated">このフィールドは、&lt;a href=&quot;../utils#django.utils.dateparse.parse_datetime&quot;&gt; &lt;code&gt;parse_datetime()&lt;/code&gt; &lt;/a&gt;によって認識されるISO8601形式の日付または同様の文字列を常に受け​​入れます。いくつかの例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8261a27fdaafb3905c5f94eeccc1746f11d92091" translate="yes" xml:space="preserve">
          <source>The field does not support escaping of the delimiter, so be careful in cases where the delimiter is a valid character in the underlying field. The delimiter does not need to be only one character.</source>
          <target state="translated">このフィールドはデリミタのエスケープをサポートしていないので、デリミタがその下のフィールドで有効な文字である場合には注意が必要です。区切り文字は1文字だけである必要はありません。</target>
        </trans-unit>
        <trans-unit id="4541fd11f662c194c72fa461738a7803380d24f9" translate="yes" xml:space="preserve">
          <source>The field is only automatically updated when calling &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;Model.save()&lt;/code&gt;&lt;/a&gt;. The field isn&amp;rsquo;t updated when making updates to other fields in other ways such as &lt;a href=&quot;querysets#django.db.models.query.QuerySet.update&quot;&gt;&lt;code&gt;QuerySet.update()&lt;/code&gt;&lt;/a&gt;, though you can specify a custom value for the field in an update like that.</source>
          <target state="translated">このフィールドは、&lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;Model.save()&lt;/code&gt; を&lt;/a&gt;呼び出したときにのみ自動的に更新されます。&lt;a href=&quot;querysets#django.db.models.query.QuerySet.update&quot;&gt; &lt;code&gt;QuerySet.update()&lt;/code&gt; &lt;/a&gt;などの他の方法で他のフィールドを更新する場合、フィールドは更新されませんが、そのような更新でフィールドのカスタム値を指定できます。</target>
        </trans-unit>
        <trans-unit id="38b4adec7d5052603bed698a4b8c5e5c3538d594" translate="yes" xml:space="preserve">
          <source>The field lookups that equate to &lt;code&gt;LIKE&lt;/code&gt; SQL statements (&lt;code&gt;iexact&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;icontains&lt;/code&gt;, &lt;code&gt;startswith&lt;/code&gt;, &lt;code&gt;istartswith&lt;/code&gt;, &lt;code&gt;endswith&lt;/code&gt; and &lt;code&gt;iendswith&lt;/code&gt;) will automatically escape the two special characters used in &lt;code&gt;LIKE&lt;/code&gt; statements &amp;ndash; the percent sign and the underscore. (In a &lt;code&gt;LIKE&lt;/code&gt; statement, the percent sign signifies a multiple-character wildcard and the underscore signifies a single-character wildcard.)</source>
          <target state="translated">&lt;code&gt;LIKE&lt;/code&gt; SQLステートメント（ &lt;code&gt;iexact&lt;/code&gt; 、 &lt;code&gt;contains&lt;/code&gt; 、 &lt;code&gt;icontains&lt;/code&gt; 、 &lt;code&gt;startswith&lt;/code&gt; 、 &lt;code&gt;istartswith&lt;/code&gt; 、 &lt;code&gt;endswith&lt;/code&gt; 、 &lt;code&gt;iendswith&lt;/code&gt; ）と同等のフィールドルックアップは、 &lt;code&gt;LIKE&lt;/code&gt; ステートメントで使用される2つの特殊文字（パーセント記号とアンダースコア）を自動的にエスケープします。 （ &lt;code&gt;LIKE&lt;/code&gt; ステートメントでは、パーセント記号は複数文字のワイルドカードを示し、下線は単一文字のワイルドカードを示します。）</target>
        </trans-unit>
        <trans-unit id="1e41ee0c4c4e7718ea727f9a22cab41c7b40064f" translate="yes" xml:space="preserve">
          <source>The field names in &lt;code&gt;list_display&lt;/code&gt; will also appear as CSS classes in the HTML output, in the form of &lt;code&gt;column-&amp;lt;field_name&amp;gt;&lt;/code&gt; on each &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; element. This can be used to set column widths in a CSS file for example.</source>
          <target state="translated">&lt;code&gt;list_display&lt;/code&gt; のフィールド名は、各 &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; 要素の &lt;code&gt;column-&amp;lt;field_name&amp;gt;&lt;/code&gt; の形式で、HTML出力のCSSクラスとしても表示されます。これは、たとえばCSSファイルの列幅を設定するために使用できます。</target>
        </trans-unit>
        <trans-unit id="d716dce5bada681604a2c53c84250caf27b95a35" translate="yes" xml:space="preserve">
          <source>The field on the current object instance that can be used to determine the name of a candidate template. If either &lt;code&gt;template_name_field&lt;/code&gt; itself or the value of the &lt;code&gt;template_name_field&lt;/code&gt; on the current object instance is &lt;code&gt;None&lt;/code&gt;, the object will not be used for a candidate template name.</source>
          <target state="translated">候補テンプレートの名前を決定するために使用できる現在のオブジェクトインスタンスのフィールド。いずれかの場合 &lt;code&gt;template_name_field&lt;/code&gt; 自体またはの値 &lt;code&gt;template_name_field&lt;/code&gt; 現在のオブジェクトのインスタンスにはありません &lt;code&gt;None&lt;/code&gt; 、対象物は、候補テンプレート名に使用されることはありません。</target>
        </trans-unit>
        <trans-unit id="630d8b8702ce27d6f8645d1b86436f4a7464e445" translate="yes" xml:space="preserve">
          <source>The field on the related object that the relation is to. By default, Django uses the primary key of the related object. If you reference a different field, that field must have &lt;code&gt;unique=True&lt;/code&gt;.</source>
          <target state="translated">関係が関連する関連オブジェクトのフィールド。デフォルトでは、Djangoは関連オブジェクトの主キーを使用します。別のフィールドを参照する場合、そのフィールドには &lt;code&gt;unique=True&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="9e76cec744d379f4dcccb2ad310314d26fd8d60e" translate="yes" xml:space="preserve">
          <source>The field specified in a lookup has to be the name of a model field. There&amp;rsquo;s one exception though, in case of a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; you can specify the field name suffixed with &lt;code&gt;_id&lt;/code&gt;. In this case, the value parameter is expected to contain the raw value of the foreign model&amp;rsquo;s primary key. For example:</source>
          <target state="translated">ルックアップで指定されるフィールドは、モデルフィールドの名前である必要があります。ただし、例外が1つあります&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;場合は、 &lt;code&gt;_id&lt;/code&gt; のサフィックスが付いたフィールド名を指定できます。この場合、valueパラメータには、外部モデルの主キーの未加工の値が含まれていることが想定されています。例えば：</target>
        </trans-unit>
        <trans-unit id="4175f90a0443952f19ac0063efac9cb36b524f33" translate="yes" xml:space="preserve">
          <source>The field&amp;rsquo;s label wrapped in the appropriate HTML &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tag. This includes the form&amp;rsquo;s &lt;a href=&quot;../../ref/forms/api#django.forms.Form.label_suffix&quot;&gt;&lt;code&gt;label_suffix&lt;/code&gt;&lt;/a&gt;. For example, the default &lt;code&gt;label_suffix&lt;/code&gt; is a colon:</source>
          <target state="translated">適切なHTML &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; タグでラップされたフィールドのラベル。これには、フォームの&lt;a href=&quot;../../ref/forms/api#django.forms.Form.label_suffix&quot;&gt; &lt;code&gt;label_suffix&lt;/code&gt; が&lt;/a&gt;含まれます。たとえば、デフォルトの &lt;code&gt;label_suffix&lt;/code&gt; はコロンです。</target>
        </trans-unit>
        <trans-unit id="448005ac819f6d743923e91d627be3453197eb30" translate="yes" xml:space="preserve">
          <source>The field&amp;rsquo;s maximum allowable length is defined by &lt;a href=&quot;../../ref/forms/fields#django.forms.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt;. This does two things. It puts a &lt;code&gt;maxlength=&quot;100&quot;&lt;/code&gt; on the HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; (so the browser should prevent the user from entering more than that number of characters in the first place). It also means that when Django receives the form back from the browser, it will validate the length of the data.</source>
          <target state="translated">フィールドの最大許容長は&lt;a href=&quot;../../ref/forms/fields#django.forms.CharField.max_length&quot;&gt; &lt;code&gt;max_length&lt;/code&gt; &lt;/a&gt;によって定義されます。これは2つのことを行います。これは、HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; に &lt;code&gt;maxlength=&quot;100&quot;&lt;/code&gt; を設定します（そのため、ブラウザーは、ユーザーが最初にその文字数を超える文字を入力できないようにする必要があります）。また、Djangoがブラウザからフォームを受信すると、データの長さを検証します。</target>
        </trans-unit>
        <trans-unit id="cf3875fec24fc1333090caee45483067dc8d3dbb" translate="yes" xml:space="preserve">
          <source>The field-specific output honors the form object&amp;rsquo;s &lt;code&gt;auto_id&lt;/code&gt; setting:</source>
          <target state="translated">フィールド固有の出力は、フォームオブジェクトの &lt;code&gt;auto_id&lt;/code&gt; 設定に従います。</target>
        </trans-unit>
        <trans-unit id="ddb5416909036f134c988459a65406a38acce804" translate="yes" xml:space="preserve">
          <source>The fields to include can be specified using the &lt;code&gt;fields&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; keyword arguments, or the corresponding attributes on the &lt;code&gt;ModelForm&lt;/code&gt; inner &lt;code&gt;Meta&lt;/code&gt; class. Please see the &lt;code&gt;ModelForm&lt;/code&gt;&lt;a href=&quot;#modelforms-selecting-fields&quot;&gt;Selecting the fields to use&lt;/a&gt; documentation.</source>
          <target state="translated">含めるフィールドを使用して指定することができます &lt;code&gt;fields&lt;/code&gt; し、 &lt;code&gt;exclude&lt;/code&gt; キーワード引数、または上の対応する属性 &lt;code&gt;ModelForm&lt;/code&gt; 内部 &lt;code&gt;Meta&lt;/code&gt; クラスを。ドキュメント&lt;a href=&quot;#modelforms-selecting-fields&quot;&gt;を使用するには&lt;/a&gt;、 &lt;code&gt;ModelForm&lt;/code&gt; フィールドの選択を参照してください。</target>
        </trans-unit>
        <trans-unit id="e6b9074b6e7d23d0ad5da439d0ade59f87da165a" translate="yes" xml:space="preserve">
          <source>The file backend writes emails to a file. A new file is created for each new session that is opened on this backend. The directory to which the files are written is either taken from the &lt;a href=&quot;../ref/settings#std:setting-EMAIL_FILE_PATH&quot;&gt;&lt;code&gt;EMAIL_FILE_PATH&lt;/code&gt;&lt;/a&gt; setting or from the &lt;code&gt;file_path&lt;/code&gt; keyword when creating a connection with &lt;a href=&quot;#django.core.mail.get_connection&quot;&gt;&lt;code&gt;get_connection()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ファイルバックエンドはメールをファイルに書き込みます。このバックエンドで開かれる新しいセッションごとに新しいファイルが作成されます。ファイルが書き込まれるディレクトリは、&lt;a href=&quot;../ref/settings#std:setting-EMAIL_FILE_PATH&quot;&gt; &lt;code&gt;EMAIL_FILE_PATH&lt;/code&gt; &lt;/a&gt;設定から、または&lt;a href=&quot;#django.core.mail.get_connection&quot;&gt; &lt;code&gt;get_connection()&lt;/code&gt; で&lt;/a&gt;接続を作成するときに &lt;code&gt;file_path&lt;/code&gt; キーワードから取得されます。</target>
        </trans-unit>
        <trans-unit id="d4163f6ace1ca1417ecbd010ee4e813eba341221" translate="yes" xml:space="preserve">
          <source>The file is saved as part of saving the model in the database, so the actual file name used on disk cannot be relied on until after the model has been saved.</source>
          <target state="translated">このファイルはモデルをデータベースに保存する際の一部として保存されるため、モデルが保存されるまでは、ディスク上で使用される実際のファイル名に頼ることはできません。</target>
        </trans-unit>
        <trans-unit id="41f33b596b6e1ec2465b3f2736843f4c41a196a5" translate="yes" xml:space="preserve">
          <source>The file storage engine to use when collecting static files with the &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command.</source>
          <target state="translated">&lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt;管理コマンドで静的ファイルを収集するときに使用するファイルストレージエンジン。</target>
        </trans-unit>
        <trans-unit id="035804f436f66d4afdd615a6e4e8aa06c1c2c140" translate="yes" xml:space="preserve">
          <source>The file system permissions that the directory will receive when it is saved. Defaults to &lt;a href=&quot;../settings#std:setting-FILE_UPLOAD_DIRECTORY_PERMISSIONS&quot;&gt;&lt;code&gt;FILE_UPLOAD_DIRECTORY_PERMISSIONS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">保存時にディレクトリが受け取るファイルシステムのアクセス許可。デフォルトは&lt;a href=&quot;../settings#std:setting-FILE_UPLOAD_DIRECTORY_PERMISSIONS&quot;&gt; &lt;code&gt;FILE_UPLOAD_DIRECTORY_PERMISSIONS&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="c25797eed4c376aabbae73535692d312a1639d96" translate="yes" xml:space="preserve">
          <source>The file system permissions that the file will receive when it is saved. Defaults to &lt;a href=&quot;../settings#std:setting-FILE_UPLOAD_PERMISSIONS&quot;&gt;&lt;code&gt;FILE_UPLOAD_PERMISSIONS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">保存時にファイルが受け取るファイルシステムのアクセス許可。デフォルトは&lt;a href=&quot;../settings#std:setting-FILE_UPLOAD_PERMISSIONS&quot;&gt; &lt;code&gt;FILE_UPLOAD_PERMISSIONS&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="6c74283db4d94eff6e28ffec0fc60afe81c7dfa3" translate="yes" xml:space="preserve">
          <source>The file will be closed automatically, so don&amp;rsquo;t open it with a context manager.</source>
          <target state="translated">ファイルは自動的に閉じられるため、コンテキストマネージャで開かないでください。</target>
        </trans-unit>
        <trans-unit id="0b4c94442b294eae671b5179401a9e9dedbbf050" translate="yes" xml:space="preserve">
          <source>The file-based backend serializes and stores each cache value as a separate file. To use this backend set &lt;a href=&quot;../ref/settings#std:setting-CACHES-BACKEND&quot;&gt;&lt;code&gt;BACKEND&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;&quot;django.core.cache.backends.filebased.FileBasedCache&quot;&lt;/code&gt; and &lt;a href=&quot;../ref/settings#std:setting-CACHES-LOCATION&quot;&gt;&lt;code&gt;LOCATION&lt;/code&gt;&lt;/a&gt; to a suitable directory. For example, to store cached data in &lt;code&gt;/var/tmp/django_cache&lt;/code&gt;, use this setting:</source>
          <target state="translated">ファイルベースのバックエンドは、各キャッシュ値をシリアル化して個別のファイルとして保存します。このバックエンドを使用するには、&lt;a href=&quot;../ref/settings#std:setting-CACHES-BACKEND&quot;&gt; &lt;code&gt;BACKEND&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;&quot;django.core.cache.backends.filebased.FileBasedCache&quot;&lt;/code&gt; django.core.cache.backends.filebased.FileBasedCache &quot;に設定し、&lt;a href=&quot;../ref/settings#std:setting-CACHES-LOCATION&quot;&gt; &lt;code&gt;LOCATION&lt;/code&gt; &lt;/a&gt;を適切なディレクトリに設定します。たとえば、キャッシュされたデータを &lt;code&gt;/var/tmp/django_cache&lt;/code&gt; に保存するには、次の設定を使用します。</target>
        </trans-unit>
        <trans-unit id="4e75cf716c59afe86365331aee1878ffc6c24382" translate="yes" xml:space="preserve">
          <source>The filename that was originally given to the file. This may or may not be taken into account when determining the final destination path.</source>
          <target state="translated">元々与えられていたファイル名。これは、最終的な宛先パスを決定する際に考慮されることもあれば、考慮されないこともあります。</target>
        </trans-unit>
        <trans-unit id="c7080193b49ff0446e5e91ef03b953c27eb57654" translate="yes" xml:space="preserve">
          <source>The filter returns &lt;code&gt;0&lt;/code&gt; for an undefined variable.</source>
          <target state="translated">フィルターは、未定義の変数に対して &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="3d3221c79e9c5f913b1c25c6eb2dd053b109e50e" translate="yes" xml:space="preserve">
          <source>The final query does the inversion (&lt;code&gt;27&lt;/code&gt; to &lt;code&gt;-27&lt;/code&gt;) directly in the database. The reason for doing this is that if the &lt;code&gt;self.rhs&lt;/code&gt; is something else than a plain integer value (for example an &lt;code&gt;F()&lt;/code&gt; reference) we can&amp;rsquo;t do the transformations in Python.</source>
          <target state="translated">最後のクエリは、データベースで直接反転（ &lt;code&gt;27&lt;/code&gt; から &lt;code&gt;-27&lt;/code&gt; ）を実行します。これを行う理由は、 &lt;code&gt;self.rhs&lt;/code&gt; が通常の整数値以外の場合（たとえば、 &lt;code&gt;F()&lt;/code&gt; 参照）、Pythonで変換を実行できないためです。</target>
        </trans-unit>
        <trans-unit id="7c7ca685cf1726772feb729af332bf567c40b4c5" translate="yes" xml:space="preserve">
          <source>The final step in setting up your virtual environment is to activate it:</source>
          <target state="translated">仮想環境を設定する最後のステップは、仮想環境を有効化することです。</target>
        </trans-unit>
        <trans-unit id="895d5d8ba62111caffdbf5c689da962e53c48cdb" translate="yes" xml:space="preserve">
          <source>The final step is to enter your password. You will be asked to enter your password twice, the second time as a confirmation of the first.</source>
          <target state="translated">最後はパスワードの入力です。パスワードの入力を2回求められますが、2回目は1回目の確認として、2回目はパスワードの入力を求められます。</target>
        </trans-unit>
        <trans-unit id="26c7aa22741db0888336489a775e113abc6e5017" translate="yes" xml:space="preserve">
          <source>The first argument is a &lt;a href=&quot;../../topics/http/urls#naming-url-patterns&quot;&gt;URL pattern name&lt;/a&gt;. It can be a quoted literal or any other context variable. Additional arguments are optional and should be space-separated values that will be used as arguments in the URL. The example above shows passing positional arguments. Alternatively you may use keyword syntax:</source>
          <target state="translated">最初の引数は&lt;a href=&quot;../../topics/http/urls#naming-url-patterns&quot;&gt;URLパターン名&lt;/a&gt;です。引用符付きのリテラルまたはその他のコンテキスト変数を使用できます。追加の引数はオプションであり、URLの引数として使用されるスペースで区切られた値である必要があります。上記の例は、位置引数を渡すことを示しています。または、キーワード構文を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="aacf6fd5691502e26079ea4443424e381b2c587d" translate="yes" xml:space="preserve">
          <source>The first argument of &lt;code&gt;MigrationWriter.register_serializer()&lt;/code&gt; is a type or iterable of types that should use the serializer.</source>
          <target state="translated">&lt;code&gt;MigrationWriter.register_serializer()&lt;/code&gt; の最初の引数は、シリアライザを使用する必要がある型または反復可能な型です。</target>
        </trans-unit>
        <trans-unit id="5d0bd8d670ec9fbf10f7f2947c26e1dc1ad83639" translate="yes" xml:space="preserve">
          <source>The first argument to the constructor is required &amp;ndash; the path to redirect to. This can be a fully qualified URL (e.g. &lt;code&gt;'https://www.yahoo.com/search/'&lt;/code&gt;), an absolute path with no domain (e.g. &lt;code&gt;'/search/'&lt;/code&gt;), or even a relative path (e.g. &lt;code&gt;'search/'&lt;/code&gt;). In that last case, the client browser will reconstruct the full URL itself according to the current path. See &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; for other optional constructor arguments. Note that this returns an HTTP status code 302.</source>
          <target state="translated">コンストラクターの最初の引数は必須です&amp;ndash;リダイレクト先のパス。これは、完全修飾URL（例： &lt;code&gt;'https://www.yahoo.com/search/'&lt;/code&gt; ）、ドメインなしの絶対パス（例： &lt;code&gt;'/search/'&lt;/code&gt; ）、または相対パス（例： &lt;code&gt;'search/'&lt;/code&gt; ）。最後のケースでは、クライアントブラウザは現在のパスに従って完全なURL自体を再構築します。その他のオプションのコンストラクタ引数については、&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;を参照してください。これはHTTPステータスコード302を返すことに注意してください。</target>
        </trans-unit>
        <trans-unit id="47a3396d450783ab28ffa716e55c53cf2e330e39" translate="yes" xml:space="preserve">
          <source>The first bit in the &lt;code&gt;WSGIScriptAlias&lt;/code&gt; line is the base URL path you want to serve your application at (&lt;code&gt;/&lt;/code&gt; indicates the root url), and the second is the location of a &amp;ldquo;WSGI file&amp;rdquo; &amp;ndash; see below &amp;ndash; on your system, usually inside of your project package (&lt;code&gt;mysite&lt;/code&gt; in this example). This tells Apache to serve any request below the given URL using the WSGI application defined in that file.</source>
          <target state="translated">&lt;code&gt;WSGIScriptAlias&lt;/code&gt; 行の最初のビットは、アプリケーションを提供するベースURLパスです（ &lt;code&gt;/&lt;/code&gt; はルートURLを示します）。2番目は、「WSGIファイル」の場所です。プロジェクトパッケージ（この例では &lt;code&gt;mysite&lt;/code&gt; ）。これは、そのファイルで定義されたWSGIアプリケーションを使用して、指定されたURLの下でリクエストを処理するようにApacheに指示します。</target>
        </trans-unit>
        <trans-unit id="c4793a0d9ffadbbd52ba70700ae977d5a3072dfa" translate="yes" xml:space="preserve">
          <source>The first class is the Python object that your users will manipulate. They will assign it to the model attribute, they will read from it for displaying purposes, things like that. This is the &lt;code&gt;Hand&lt;/code&gt; class in our example.</source>
          <target state="translated">最初のクラスは、ユーザーが操作するPythonオブジェクトです。彼らはそれをモデル属性に割り当て、それらを表示する目的でそれから読み取ります。これは、この例では &lt;code&gt;Hand&lt;/code&gt; クラスです。</target>
        </trans-unit>
        <trans-unit id="c60b8b5e1f640009f89a0558d3d9c8beda00fdc0" translate="yes" xml:space="preserve">
          <source>The first decorator doesn&amp;rsquo;t know anything about the second and might answer that the response is not modified even if the second decorators would determine otherwise. The &lt;code&gt;condition&lt;/code&gt; decorator uses both callback functions simultaneously to work out the right action to take.</source>
          <target state="translated">最初のデコレータは2番目のデコレータについて何も認識していないため、2番目のデコレータが別の方法で決定したとしても、応答は変更されないと答える場合があります。 &lt;code&gt;condition&lt;/code&gt; デコレータは取るために正しい行動を動作するように同時に両方のコールバック関数を使用しています。</target>
        </trans-unit>
        <trans-unit id="35cc855bb31940c21fb4d0fbf57cd5cd7a4e7137" translate="yes" xml:space="preserve">
          <source>The first defense against CSRF attacks is to ensure that GET requests (and other &amp;lsquo;safe&amp;rsquo; methods, as defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7231#section-4.2.1&lt;/strong&gt;&lt;/a&gt;) are side effect free. Requests via &amp;lsquo;unsafe&amp;rsquo; methods, such as POST, PUT, and DELETE, can then be protected by following the steps below.</source>
          <target state="translated">CSRF攻撃に対する最初の防御策は、GETリクエスト（および&lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7231＃section-4.2.1で&lt;/strong&gt;&lt;/a&gt;定義され&lt;strong&gt;ている&lt;/strong&gt;他の「安全な」メソッド）に副作用がないことを確認することです。POST、PUT、DELETEなどの「安全でない」メソッドを介したリクエストは、以下の手順で保護できます。</target>
        </trans-unit>
        <trans-unit id="8edd716d888141d95a121f4f265c937c657c24a4" translate="yes" xml:space="preserve">
          <source>The first element in each tuple is the actual value to be set on the model, and the second element is the human-readable name. For example:</source>
          <target state="translated">各タプルの最初の要素はモデルに設定される実際の値で、2番目の要素は人間が読める名前です。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="d81150df8a09c5e7833eef5c67c1667aedd8264b" translate="yes" xml:space="preserve">
          <source>The first element in each tuple is the name to apply to the group. The second element is an iterable of 2-tuples, with each 2-tuple containing a value and a human-readable name for an option. Grouped options may be combined with ungrouped options within a single list (such as the &lt;code&gt;'unknown'&lt;/code&gt; option in this example).</source>
          <target state="translated">各タプルの最初の要素は、グループに適用する名前です。2番目の要素は、2タプルの反復可能であり、各2タプルには、オプションの値と人間が読める形式の名前が含まれています。グループ化されたオプションは、単一のリスト内でグループ化されていないオプションと組み合わせることができます（この例の &lt;code&gt;'unknown'&lt;/code&gt; オプションなど）。</target>
        </trans-unit>
        <trans-unit id="66298df4913a918317ded3e216893558da214ecb" translate="yes" xml:space="preserve">
          <source>The first element in each tuple is the name to apply to the group. The second element is an iterable of 2-tuples, with each 2-tuple containing a value and a human-readable name for an option. Grouped options may be combined with ungrouped options within a single list (such as the &lt;code&gt;unknown&lt;/code&gt; option in this example).</source>
          <target state="translated">各タプルの最初の要素は、グループに適用する名前です。2番目の要素は2タプルの反復可能オブジェクトで、各2タプルにはオプションの値と人間が読める名前が含まれています。グループ化されたオプションは、単一のリスト内でグループ化されていないオプションと組み合わせることができます（この例では &lt;code&gt;unknown&lt;/code&gt; オプションなど）。</target>
        </trans-unit>
        <trans-unit id="65be4df7d03179170f14cf237e2177f6c9b3d953" translate="yes" xml:space="preserve">
          <source>The first element in each tuple is the value that will be stored in the database. The second element is displayed by the field&amp;rsquo;s form widget.</source>
          <target state="translated">各タプルの最初の要素は、データベースに格納される値です。2番目の要素は、フィールドのフォームウィジェットによって表示されます。</target>
        </trans-unit>
        <trans-unit id="01cc055b3073ebaf706ad95e612b19ff24acdce3" translate="yes" xml:space="preserve">
          <source>The first element of each tuple in &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt;&lt;code&gt;fieldsets&lt;/code&gt;&lt;/a&gt; is the title of the fieldset. Here&amp;rsquo;s what our form looks like now:</source>
          <target state="translated">&lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt; &lt;code&gt;fieldsets&lt;/code&gt; &lt;/a&gt;の各タプルの最初の要素は、フィールドセットのタイトルです。フォームは次のようになります。</target>
        </trans-unit>
        <trans-unit id="893cf1f3905d1bba0b3c66da2bd40a36666ba533" translate="yes" xml:space="preserve">
          <source>The first is the standard Python way of subclassing and overriding attributes and methods in the subclass. So that if your parent class had an attribute &lt;code&gt;greeting&lt;/code&gt; like this:</source>
          <target state="translated">1つ目は、サブクラスの属性とメソッドをサブクラス化してオーバーライドする標準のPythonの方法です。したがって、親クラスに次のような属性の &lt;code&gt;greeting&lt;/code&gt; がある場合：</target>
        </trans-unit>
        <trans-unit id="97243a4154bcf38eec0dcd770c2c093897849746" translate="yes" xml:space="preserve">
          <source>The first iteration produces HTML that refers to class &lt;code&gt;row1&lt;/code&gt;, the second to &lt;code&gt;row2&lt;/code&gt;, the third to &lt;code&gt;row1&lt;/code&gt; again, and so on for each iteration of the loop.</source>
          <target state="translated">最初の反復では、クラス &lt;code&gt;row1&lt;/code&gt; を参照するHTMLを生成し、2番目は &lt;code&gt;row2&lt;/code&gt; を参照し、3番目は再び &lt;code&gt;row1&lt;/code&gt; を参照します。</target>
        </trans-unit>
        <trans-unit id="e8d8c7f5c523b475b062636295d7f8b034bdc905" translate="yes" xml:space="preserve">
          <source>The first one is the usage we&amp;rsquo;ve been discussing in the previous sections. The second one is what is known as &lt;em&gt;reverse resolution of URLs&lt;/em&gt;, &lt;em&gt;reverse URL matching&lt;/em&gt;, &lt;em&gt;reverse URL lookup&lt;/em&gt;, or simply &lt;em&gt;URL reversing&lt;/em&gt;.</source>
          <target state="translated">1つ目は、前のセクションで説明した使用法です。2つ目は&lt;em&gt;、URLの逆解決&lt;/em&gt;、&lt;em&gt;逆URLマッチング&lt;/em&gt;、&lt;em&gt;逆URLルックアップ&lt;/em&gt;、または単に&lt;em&gt;URL逆転&lt;/em&gt;と呼ばれるものです。</target>
        </trans-unit>
        <trans-unit id="49b581f6ea38bccdb9c24f4a993f4f33893e5dc8" translate="yes" xml:space="preserve">
          <source>The first option is to roll back the entire transaction. For example:</source>
          <target state="translated">最初のオプションは、トランザクション全体をロールバックすることです。例えば</target>
        </trans-unit>
        <trans-unit id="7b2f5ff0a043fddbb6e2fd41755c4546361f62a5" translate="yes" xml:space="preserve">
          <source>The first option to do so is to add the hosts to your settings file. For example, the test suite for docs.djangoproject.com includes the following:</source>
          <target state="translated">そのための最初のオプションは、設定ファイルにホストを追加することです。例えば、docs.djangoproject.com のテストスイートには、以下のようなものが含まれています。</target>
        </trans-unit>
        <trans-unit id="90239cd9cfb1ec6714d55686d931b04d4cbfa512" translate="yes" xml:space="preserve">
          <source>The first parameter can take three forms: a string representing a file path, a dictionary with values defining a new raster, or a bytes object representing a raster file.</source>
          <target state="translated">最初のパラメータは、ファイルパスを表す文字列、新しいラスタを定義する値を持つ辞書、ラスタファイルを表すバイトオブジェクトの3つの形式を取ることができます。</target>
        </trans-unit>
        <trans-unit id="92ec3dcecb261013fdca063af558824fb0f4468e" translate="yes" xml:space="preserve">
          <source>The first parameter, &lt;code&gt;data&lt;/code&gt;, should be a &lt;code&gt;dict&lt;/code&gt; instance. If the &lt;code&gt;safe&lt;/code&gt; parameter is set to &lt;code&gt;False&lt;/code&gt; (see below) it can be any JSON-serializable object.</source>
          <target state="translated">最初のパラメーター &lt;code&gt;data&lt;/code&gt; は &lt;code&gt;dict&lt;/code&gt; インスタンスでなければなりません。 &lt;code&gt;safe&lt;/code&gt; パラメータが &lt;code&gt;False&lt;/code&gt; （以下を参照）に設定されている場合、任意のJSONシリアル化可能オブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="7bb4f019dc7831708e5af533eef9bd70821b86c5" translate="yes" xml:space="preserve">
          <source>The first query asks for the average rating of all a publisher&amp;rsquo;s books for publisher&amp;rsquo;s that have at least one book with a rating exceeding 3.0. The second query asks for the average of a publisher&amp;rsquo;s book&amp;rsquo;s ratings for only those ratings exceeding 3.0.</source>
          <target state="translated">最初のクエリは、評価が3.0を超える本が少なくとも1冊ある出版社のすべての出版社の本の平均評価を要求します。2番目のクエリは、3.0を超える評価のみに対する出版社の本の評価の平均を求めます。</target>
        </trans-unit>
        <trans-unit id="053d07bf69e6e09e648c0c4e1ae628f5afd4936e" translate="yes" xml:space="preserve">
          <source>The first step &lt;code&gt;full_clean()&lt;/code&gt; performs is to clean each individual field.</source>
          <target state="translated">&lt;code&gt;full_clean()&lt;/code&gt; が実行する最初のステップは、個々のフィールドをクリーンアップすることです。</target>
        </trans-unit>
        <trans-unit id="5a822f06f42c65b3dd06d798e0659cde397841bd" translate="yes" xml:space="preserve">
          <source>The first step in displaying this intermediate model in the admin is to define an inline class for the &lt;code&gt;Membership&lt;/code&gt; model:</source>
          <target state="translated">管理でこの中間モデルを表示する最初のステップは、 &lt;code&gt;Membership&lt;/code&gt; モデルのインラインクラスを定義することです。</target>
        </trans-unit>
        <trans-unit id="a2fe99ac174181e80dcc066068a1954b0b7fc707" translate="yes" xml:space="preserve">
          <source>The first step is to add &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ = True&lt;/code&gt;&lt;/a&gt; to your settings file. At this point, things should mostly work. If you create naive datetime objects in your code, Django makes them aware when necessary.</source>
          <target state="translated">最初のステップは、&lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ = True&lt;/code&gt; &lt;/a&gt;を設定ファイルに追加することです。この時点で、ほとんどのことはうまくいくはずです。コードで単純な日時オブジェクトを作成すると、Djangoは必要に応じてそれらを認識させます。</target>
        </trans-unit>
        <trans-unit id="5b43c96b6c6b5067fe128e9fb080167e2c1437e8" translate="yes" xml:space="preserve">
          <source>The first step is to create a &lt;a href=&quot;index#term-message-file&quot;&gt;message file&lt;/a&gt; for a new language. A message file is a plain-text file, representing a single language, that contains all available translation strings and how they should be represented in the given language. Message files have a &lt;code&gt;.po&lt;/code&gt; file extension.</source>
          <target state="translated">最初のステップは、新しい言語の&lt;a href=&quot;index#term-message-file&quot;&gt;メッセージファイル&lt;/a&gt;を作成することです。メッセージファイルは、単一の言語を表すプレーンテキストファイルであり、使用可能なすべての翻訳文字列と、それらを特定の言語で表す方法が含まれています。メッセージファイルのファイル拡張子は &lt;code&gt;.po&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0458bb2ba643653473bb694c0904556d9a528344" translate="yes" xml:space="preserve">
          <source>The first step to contributing to Django is to get a copy of the source code. First, &lt;a href=&quot;https://github.com/django/django/fork&quot;&gt;fork Django on GitHub&lt;/a&gt;. Then, from the command line, use the &lt;code&gt;cd&lt;/code&gt; command to navigate to the directory where you&amp;rsquo;ll want your local copy of Django to live.</source>
          <target state="translated">Djangoに貢献するための最初のステップは、ソースコードのコピーを入手することです。まず、&lt;a href=&quot;https://github.com/django/django/fork&quot;&gt;GitHubでDjangoをフォークします&lt;/a&gt;。次に、コマンドラインから &lt;code&gt;cd&lt;/code&gt; コマンドを使用して、Djangoのローカルコピーを保存するディレクトリに移動します。</target>
        </trans-unit>
        <trans-unit id="8ae8d67f65acd52dbb066631338392f1a23fc452" translate="yes" xml:space="preserve">
          <source>The first step to using more than one database with Django is to tell Django about the database servers you&amp;rsquo;ll be using. This is done using the &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; setting. This setting maps database aliases, which are a way to refer to a specific database throughout Django, to a dictionary of settings for that specific connection. The settings in the inner dictionaries are described fully in the &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">Djangoで複数のデータベースを使用する最初のステップは、使用するデータベースサーバーについてDjangoに伝えることです。これは&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;設定を使用して行われます。この設定は、Django全体で特定のデータベースを参照する方法であるデータベースエイリアスを、その特定の接続の設定の辞書にマップします。内部辞書の設定は、&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;ドキュメントで完全に説明されています。</target>
        </trans-unit>
        <trans-unit id="44d5bd896e8ca28673de91b965ab96d0c88f5adc" translate="yes" xml:space="preserve">
          <source>The fixtures that are named can include directory components. These directories will be included in the search path. For example:</source>
          <target state="translated">名前が付けられたフィクスチャは、ディレクトリ・コンポーネントを含むことができます。これらのディレクトリは、検索パスに含まれます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="6c9b843427d6189b66a1ac36bd8f3b19833f6092" translate="yes" xml:space="preserve">
          <source>The flags used when compiling the regular expression string &lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/a&gt;. If &lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/a&gt; is a pre-compiled regular expression, and &lt;a href=&quot;#django.core.validators.RegexValidator.flags&quot;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt; is overridden, &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised. Defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">正規表現文字列&lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt; &lt;code&gt;regex&lt;/code&gt; を&lt;/a&gt;コンパイルするときに使用されるフラグ。場合は&lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt; &lt;code&gt;regex&lt;/code&gt; &lt;/a&gt;、プリコンパイル済みの正規表現で、&lt;a href=&quot;#django.core.validators.RegexValidator.flags&quot;&gt; &lt;code&gt;flags&lt;/code&gt; &lt;/a&gt;上書きされ、&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;発生します。デフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6e33d92dd2768ab4c50afbc85edfa029aa2f7dda" translate="yes" xml:space="preserve">
          <source>The flatpages app</source>
          <target state="translated">フラットページアプリ</target>
        </trans-unit>
        <trans-unit id="37429ca8988aa9e21619e03578a3aa7629602021" translate="yes" xml:space="preserve">
          <source>The flatpages app provides a template tag that allows you to iterate over all of the available flatpages on the &lt;a href=&quot;sites#hooking-into-current-site-from-views&quot;&gt;current site&lt;/a&gt;.</source>
          <target state="translated">フラットページアプリには、&lt;a href=&quot;sites#hooking-into-current-site-from-views&quot;&gt;現在のサイトで&lt;/a&gt;使用可能なすべてのフラットページを反復できるテンプレートタグが用意されています。</target>
        </trans-unit>
        <trans-unit id="b762ecc852af7e088e75baf74cdbc6ac96db8aa4" translate="yes" xml:space="preserve">
          <source>The following &lt;a href=&quot;../../utils#django.utils.feedgenerator.SyndicationFeed&quot;&gt;&lt;code&gt;django.utils.feedgenerator.SyndicationFeed&lt;/code&gt;&lt;/a&gt; subclasses are available:</source>
          <target state="translated">次の&lt;a href=&quot;../../utils#django.utils.feedgenerator.SyndicationFeed&quot;&gt; &lt;code&gt;django.utils.feedgenerator.SyndicationFeed&lt;/code&gt; &lt;/a&gt;サブクラスを使用できます。</target>
        </trans-unit>
        <trans-unit id="d0e5c1877f90f95248f71d31f5912958212979ae" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;QuerySet&lt;/code&gt; methods evaluate the &lt;code&gt;QuerySet&lt;/code&gt; and return something &lt;em&gt;other than&lt;/em&gt; a &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="translated">以下の &lt;code&gt;QuerySet&lt;/code&gt; 方法は、評価 &lt;code&gt;QuerySet&lt;/code&gt; とリターンの何か&lt;em&gt;以外の&lt;/em&gt; &lt;code&gt;QuerySet&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="284c34d68eec06943f4a3d9de8968921766e55bb" translate="yes" xml:space="preserve">
          <source>The following are PostgreSQL specific &lt;a href=&quot;../../models/indexes&quot;&gt;indexes&lt;/a&gt; available from the &lt;code&gt;django.contrib.postgres.indexes&lt;/code&gt; module.</source>
          <target state="translated">以下は、 &lt;code&gt;django.contrib.postgres.indexes&lt;/code&gt; モジュールから利用可能なPostgreSQL固有の&lt;a href=&quot;../../models/indexes&quot;&gt;インデックス&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="0b6966c34b02d72f9151d4120d3fb9804d013c97" translate="yes" xml:space="preserve">
          <source>The following are all legal:</source>
          <target state="translated">以下はすべて合法です。</target>
        </trans-unit>
        <trans-unit id="fb8617e614581813861e27bbbd803b31ff1f311d" translate="yes" xml:space="preserve">
          <source>The following are equivalent:</source>
          <target state="translated">以下はこれに相当する。</target>
        </trans-unit>
        <trans-unit id="81542627868a9ffb56db58c11315f765372b892a" translate="yes" xml:space="preserve">
          <source>The following are the arguments and keywords that may be used during instantiation of &lt;code&gt;LayerMapping&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;LayerMapping&lt;/code&gt; オブジェクトのインスタンス化中に使用できる引数とキーワードは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ed47360c7d12e10b6c68d9808683c52ed8588691" translate="yes" xml:space="preserve">
          <source>The following arguments are available to all field types. All are optional.</source>
          <target state="translated">以下の引数は、すべてのフィールドタイプで利用可能です。すべてオプションです。</target>
        </trans-unit>
        <trans-unit id="8a9bf51cbaea32fba407af879b808987c8179d02" translate="yes" xml:space="preserve">
          <source>The following attributes and methods are available on any subclass of &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次の属性とメソッドは、&lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; の&lt;/a&gt;サブクラスで使用できます。</target>
        </trans-unit>
        <trans-unit id="bc16b93aaf25c86c2e5a47839f6ba6772f8aac39" translate="yes" xml:space="preserve">
          <source>The following backends are available in &lt;a href=&quot;#module-django.contrib.auth.backends&quot;&gt;&lt;code&gt;django.contrib.auth.backends&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">以下のバックエンドはで利用可能です&lt;a href=&quot;#module-django.contrib.auth.backends&quot;&gt; &lt;code&gt;django.contrib.auth.backends&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="27b33dc3dd8b00095e48bdd2946d661302f48b4a" translate="yes" xml:space="preserve">
          <source>The following checklist includes settings that:</source>
          <target state="translated">以下のチェックリストには、そのような設定が含まれています。</target>
        </trans-unit>
        <trans-unit id="9df85d7bdd1888612b2cf87af0d7ed96d4b077c2" translate="yes" xml:space="preserve">
          <source>The following checks are performed on &lt;a href=&quot;contrib/postgres/index#module-django.contrib.postgres&quot;&gt;&lt;code&gt;django.contrib.postgres&lt;/code&gt;&lt;/a&gt; model fields:</source>
          <target state="translated">次のチェックは、&lt;a href=&quot;contrib/postgres/index#module-django.contrib.postgres&quot;&gt; &lt;code&gt;django.contrib.postgres&lt;/code&gt; &lt;/a&gt;モデルフィールドで実行されます。</target>
        </trans-unit>
        <trans-unit id="d0a68f6fed3620bb3281f44c1e52da9151a8c4a5" translate="yes" xml:space="preserve">
          <source>The following checks are performed on any &lt;a href=&quot;contrib/admin/index#django.contrib.admin.InlineModelAdmin&quot;&gt;&lt;code&gt;InlineModelAdmin&lt;/code&gt;&lt;/a&gt; that is registered as an inline on a &lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以下のチェックは、&lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; に&lt;/a&gt;インラインとして登録されている&lt;a href=&quot;contrib/admin/index#django.contrib.admin.InlineModelAdmin&quot;&gt; &lt;code&gt;InlineModelAdmin&lt;/code&gt; &lt;/a&gt;で実行されます。</target>
        </trans-unit>
        <trans-unit id="dc64c4f3803d970a42f815f585a9ef9266262cca" translate="yes" xml:space="preserve">
          <source>The following checks are performed on any &lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; (or subclass) that is registered with the admin site:</source>
          <target state="translated">次のチェックは、管理サイトに登録されているすべての&lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt;（またはサブクラス）で実行されます。</target>
        </trans-unit>
        <trans-unit id="fbc7a26eae3e54b89174c26b5546d6603116cb76" translate="yes" xml:space="preserve">
          <source>The following checks are performed on any &lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; that is registered with the admin site:</source>
          <target state="translated">次のチェックは、管理サイトに登録されているすべての&lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt;で実行されます。</target>
        </trans-unit>
        <trans-unit id="798b247d43f522a878f43ca529351c16150eece7" translate="yes" xml:space="preserve">
          <source>The following checks are performed on any &lt;a href=&quot;contrib/contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt;&lt;code&gt;GenericInlineModelAdmin&lt;/code&gt;&lt;/a&gt; that is registered as an inline on a &lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次のチェックは、&lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; に&lt;/a&gt;インラインとして登録されている&lt;a href=&quot;contrib/contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt; &lt;code&gt;GenericInlineModelAdmin&lt;/code&gt; &lt;/a&gt;で実行されます。</target>
        </trans-unit>
        <trans-unit id="772c831459e6cb84678eef9556aba5363139c510" translate="yes" xml:space="preserve">
          <source>The following checks are performed on any model using a &lt;a href=&quot;contrib/sites#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次のチェックは、&lt;a href=&quot;contrib/sites#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt;を使用して任意のモデルで実行されます。</target>
        </trans-unit>
        <trans-unit id="62c287734cdd195293b9a229ff93208bf14d1920" translate="yes" xml:space="preserve">
          <source>The following checks are performed on the default &lt;a href=&quot;contrib/admin/index#django.contrib.admin.AdminSite&quot;&gt;&lt;code&gt;AdminSite&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次のチェックは、デフォルトの&lt;a href=&quot;contrib/admin/index#django.contrib.admin.AdminSite&quot;&gt; &lt;code&gt;AdminSite&lt;/code&gt; で&lt;/a&gt;実行されます。</target>
        </trans-unit>
        <trans-unit id="9e37df7b44137276890a046f659bfb8ba9033c28" translate="yes" xml:space="preserve">
          <source>The following checks are performed on your URL configuration:</source>
          <target state="translated">以下のチェックは、URLの設定に対して行われます。</target>
        </trans-unit>
        <trans-unit id="b5e6a7bd9233bcb085b33c0911616d7cb121f331" translate="yes" xml:space="preserve">
          <source>The following checks are performed on your translation configuration:</source>
          <target state="translated">以下のチェックは、翻訳設定に対して行われます。</target>
        </trans-unit>
        <trans-unit id="2bc9c3b0e242eeb9303878e26142dbdb14ab08bd" translate="yes" xml:space="preserve">
          <source>The following checks are performed when a model contains a &lt;a href=&quot;contrib/contenttypes#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;contrib/contenttypes#django.contrib.contenttypes.fields.GenericRelation&quot;&gt;&lt;code&gt;GenericRelation&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">モデルが含まれている場合は、以下のチェックが実行され&lt;a href=&quot;contrib/contenttypes#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;contrib/contenttypes#django.contrib.contenttypes.fields.GenericRelation&quot;&gt; &lt;code&gt;GenericRelation&lt;/code&gt; を&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="718dd25af97d4c416215d47f19360e01f976892e" translate="yes" xml:space="preserve">
          <source>The following checks are run if you use the &lt;a href=&quot;django-admin#cmdoption-check-deploy&quot;&gt;&lt;code&gt;check --deploy&lt;/code&gt;&lt;/a&gt; option:</source>
          <target state="translated">&lt;a href=&quot;django-admin#cmdoption-check-deploy&quot;&gt; &lt;code&gt;check --deploy&lt;/code&gt; &lt;/a&gt;オプションを使用すると、次のチェックが実行されます。</target>
        </trans-unit>
        <trans-unit id="169f8332f02f69fac3ca8c2910b09ef347510ade" translate="yes" xml:space="preserve">
          <source>The following checks verify that &lt;a href=&quot;contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt; is correctly configured:</source>
          <target state="translated">次のチェックでは、&lt;a href=&quot;contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; &lt;/a&gt;が正しく構成されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="ab28cab160996c2304c7c158d04a89bc438663c7" translate="yes" xml:space="preserve">
          <source>The following checks verify that your &lt;a href=&quot;settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; setting is correctly configured:</source>
          <target state="translated">次のチェックでは、&lt;a href=&quot;settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; &lt;/a&gt;設定が正しく構成されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="658ec03bf20f39893ff07a0a1a0182adf9c190fa" translate="yes" xml:space="preserve">
          <source>The following checks verify that your &lt;a href=&quot;settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting is correctly configured:</source>
          <target state="translated">次のチェックでは、&lt;a href=&quot;settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt;設定が正しく構成されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="0728264c18b27eb329de45ccf7ad1ad8630dedde" translate="yes" xml:space="preserve">
          <source>The following checks verify that your security-related settings are correctly configured:</source>
          <target state="translated">次のチェックで、セキュリティ関連の設定が正しく設定されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="16b79a93cf47f2d5e419f5b5be11a1627acce6ce" translate="yes" xml:space="preserve">
          <source>The following checks verify your setup for &lt;a href=&quot;../topics/async&quot;&gt;Asynchronous support&lt;/a&gt;:</source>
          <target state="translated">次のチェックは、&lt;a href=&quot;../topics/async&quot;&gt;非同期サポートの&lt;/a&gt;セットアップを確認します。</target>
        </trans-unit>
        <trans-unit id="cb1871103b4735e9f911dab6f3e2f7b9126ed436" translate="yes" xml:space="preserve">
          <source>The following code will let you examine the OGR types (e.g. integer or string) associated with each of the fields:</source>
          <target state="translated">以下のコードでは、各フィールドに関連付けられたOGR型(整数や文字列など)を調べることができます。</target>
        </trans-unit>
        <trans-unit id="b97899d26792490f17732aac0bbd906bcd3df4f3" translate="yes" xml:space="preserve">
          <source>The following decorators in &lt;a href=&quot;#module-django.views.decorators.http&quot;&gt;&lt;code&gt;django.views.decorators.http&lt;/code&gt;&lt;/a&gt; can be used to control caching behavior on particular views.</source>
          <target state="translated">&lt;a href=&quot;#module-django.views.decorators.http&quot;&gt; &lt;code&gt;django.views.decorators.http&lt;/code&gt; &lt;/a&gt;の以下のデコレータを使用して、特定のビューのキャッシュ動作を制御できます。</target>
        </trans-unit>
        <trans-unit id="9d3874885283eeb637d618d85b95b428ce844660" translate="yes" xml:space="preserve">
          <source>The following distance lookups are available:</source>
          <target state="translated">以下の距離ルックアップが可能です。</target>
        </trans-unit>
        <trans-unit id="511fb6f7d86146e81a24b7522fc492bf7dd8eb25" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of savepoints:</source>
          <target state="translated">次の例は、savepoints の使用を示しています。</target>
        </trans-unit>
        <trans-unit id="c94672d77becd10e86518f53b48e4b0ab433ece0" translate="yes" xml:space="preserve">
          <source>The following example gets all published objects from &lt;code&gt;MyModel&lt;/code&gt;:</source>
          <target state="translated">次の例では、 &lt;code&gt;MyModel&lt;/code&gt; からすべての公開オブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="5ab8189d4a7cb9d8d6126d8824341ddfe2eef07b" translate="yes" xml:space="preserve">
          <source>The following example gets the object with the primary key of 1 from &lt;code&gt;MyModel&lt;/code&gt;:</source>
          <target state="translated">次の例では、 &lt;code&gt;MyModel&lt;/code&gt; から主キーが1のオブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="2f109d2e9c17671da9abe438aa5081ff23c0cfc7" translate="yes" xml:space="preserve">
          <source>The following example renders the template &lt;code&gt;myapp/index.html&lt;/code&gt; with the MIME type &lt;em&gt;application/xhtml+xml&lt;/em&gt;:</source>
          <target state="translated">次の例では、テンプレート &lt;code&gt;myapp/index.html&lt;/code&gt; をMIMEタイプ&lt;em&gt;application / xhtml + xmlで&lt;/em&gt;レンダリングし&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a613041ed60555fc2269d1cc2da4bb4bdaef377e" translate="yes" xml:space="preserve">
          <source>The following example restricts overlapping reservations in the same room, not taking canceled reservations into account:</source>
          <target state="translated">以下の例では、キャンセルされた予約を考慮せず、同室での重複予約を制限しています。</target>
        </trans-unit>
        <trans-unit id="5ae77351bd437b3ba442b7b1ed3f17c0d69fd5f2" translate="yes" xml:space="preserve">
          <source>The following example shows how rasters can be created from different input sources (using the sample data from the GeoDjango tests; see also the &lt;a href=&quot;#gdal-sample-data&quot;&gt;Sample Data&lt;/a&gt; section).</source>
          <target state="translated">次の例は、さまざまな入力ソースからラスタを作成する方法を示しています（GeoDjangoテストのサンプルデータを使用。&lt;a href=&quot;#gdal-sample-data&quot;&gt;サンプルデータの&lt;/a&gt;セクションもご覧ください）。</target>
        </trans-unit>
        <trans-unit id="c6b0d211561de68fb072b86d7bf28643ec23a1c6" translate="yes" xml:space="preserve">
          <source>The following example shows how to exclude some conventional URLs that browsers and crawlers often request:</source>
          <target state="translated">以下の例では、ブラウザやクローラーがよく要求する従来のURLを除外する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="d17b7184c9d112ad10af3bbd154bc9a225b3dc3b" translate="yes" xml:space="preserve">
          <source>The following example uses some of the options available for the &lt;a href=&quot;https://gdal.org/drivers/raster/gtiff.html&quot;&gt;GTiff driver&lt;/a&gt;. The result is a compressed signed byte raster with an internal tiling scheme. The internal tiles have a block size of 23 by 23:</source>
          <target state="translated">次の例では、&lt;a href=&quot;https://gdal.org/drivers/raster/gtiff.html&quot;&gt;GTiffドライバーで&lt;/a&gt;使用できるオプションの一部を使用しています。結果は、内部タイルスキーマを持つ圧縮された符号付きバイトラスタです。内部タイルのブロックサイズは23 x 23です。</target>
        </trans-unit>
        <trans-unit id="02aa7661af1a2fa0eb1f55c6693585884acd7e85" translate="yes" xml:space="preserve">
          <source>The following example, which uses &lt;code&gt;myapp_defaults&lt;/code&gt; as a positional argument, is equivalent:</source>
          <target state="translated">&lt;code&gt;myapp_defaults&lt;/code&gt; を位置引数として使用する次の例は同等です。</target>
        </trans-unit>
        <trans-unit id="a7f4a8147d9020a9a80678a5a04a8331e9fd9b42" translate="yes" xml:space="preserve">
          <source>The following example:</source>
          <target state="translated">次のような例です。</target>
        </trans-unit>
        <trans-unit id="dbdcc10d5462ba46d9b6fc2e25ec7724d00ed9d4" translate="yes" xml:space="preserve">
          <source>The following examples are valid tests and don&amp;rsquo;t raise any &lt;code&gt;AssertionError&lt;/code&gt;:</source>
          <target state="translated">次の例は有効なテストであり、 &lt;code&gt;AssertionError&lt;/code&gt; を発生させません。</target>
        </trans-unit>
        <trans-unit id="ef65fe69e1f9b55d1642608283978e9fd4dd6a5c" translate="yes" xml:space="preserve">
          <source>The following examples illustrate the difference between plain lookups and &lt;code&gt;select_related()&lt;/code&gt; lookups. Here&amp;rsquo;s standard lookup:</source>
          <target state="translated">次の例は、プレーンルックアップと &lt;code&gt;select_related()&lt;/code&gt; ルックアップの違いを示しています。標準の検索は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a4092fa174e7a8f36074dda217b59427b9e0598b" translate="yes" xml:space="preserve">
          <source>The following forms are compatible with any subclass of &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次の形式は、&lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; の&lt;/a&gt;サブクラスと互換性があります。</target>
        </trans-unit>
        <trans-unit id="adf4225ac1727ac53e1866d9bd7ebf9585a592aa" translate="yes" xml:space="preserve">
          <source>The following forms make assumptions about the user model and can be used as-is if those assumptions are met:</source>
          <target state="translated">以下のフォームでは、ユーザーモデルに関する前提条件を設定しており、その前提条件が満たされていれば、そのまま使用することができます。</target>
        </trans-unit>
        <trans-unit id="03fd4939a7e630a5b2c4080424d25186843fae49" translate="yes" xml:space="preserve">
          <source>The following inner options that may be required for more complex configurations are available:</source>
          <target state="translated">より複雑な構成の場合には、以下のようなインナーオプションが必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="ce44bfd694d584e192c872881f893ed40f5892ce" translate="yes" xml:space="preserve">
          <source>The following input formats, along with their corresponding Python types, are accepted:</source>
          <target state="translated">以下の入力フォーマットと、それに対応するPythonの型が受け入れられます。</target>
        </trans-unit>
        <trans-unit id="c5ed210269141c795e27b30d64a358ba08aee37b" translate="yes" xml:space="preserve">
          <source>The following is a unit test using the request factory:</source>
          <target state="translated">以下は、リクエストファクトリーを利用したユニットテストです。</target>
        </trans-unit>
        <trans-unit id="aa12bb2e2e2d43123308a3bfa9526910ae0ff4eb" translate="yes" xml:space="preserve">
          <source>The following is a unit test using the test client:</source>
          <target state="translated">以下はテストクライアントを使ったユニットテストです。</target>
        </trans-unit>
        <trans-unit id="fda8551c0b3bcb17fa6179ad9c7500759423e393" translate="yes" xml:space="preserve">
          <source>The following is an example &lt;code&gt;settings.py&lt;/code&gt; snippet defining two databases &amp;ndash; a default PostgreSQL database and a MySQL database called &lt;code&gt;users&lt;/code&gt;:</source>
          <target state="translated">以下は、デフォルトのPostgreSQLデータベースと &lt;code&gt;users&lt;/code&gt; という名前のMySQLデータベースの2つのデータベースを定義する &lt;code&gt;settings.py&lt;/code&gt; スニペットの例です。</target>
        </trans-unit>
        <trans-unit id="b293ec95f949c27628bace57f66b95d58a3bc865" translate="yes" xml:space="preserve">
          <source>The following is an example bare-bones settings file with spatial backends that can be used to run the entire Django test suite, including those in &lt;a href=&quot;index#module-django.contrib.gis&quot;&gt;&lt;code&gt;django.contrib.gis&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">以下は、&lt;a href=&quot;index#module-django.contrib.gis&quot;&gt; &lt;code&gt;django.contrib.gis&lt;/code&gt; &lt;/a&gt;に含まれるものを含む、Djangoテストスイート全体を実行するために使用できる空間バックエンドを含む基本的な設定ファイルの例です。</target>
        </trans-unit>
        <trans-unit id="155b13a7d360ac7ab41723483431b48699c1a83a" translate="yes" xml:space="preserve">
          <source>The following keys in the &lt;code&gt;TEST&lt;/code&gt; dictionary are available:</source>
          <target state="translated">&lt;code&gt;TEST&lt;/code&gt; 辞書の以下のキーが使用可能です。</target>
        </trans-unit>
        <trans-unit id="8db9385dcb2867000b18aa9ba73c14c9c95225ae" translate="yes" xml:space="preserve">
          <source>The following mixins are used to construct Django&amp;rsquo;s editing views:</source>
          <target state="translated">以下のミックスインは、Djangoの編集ビューを構築するために使用されます。</target>
        </trans-unit>
        <trans-unit id="56bf33227ffc3fd9440f7918633d861bffc08d69" translate="yes" xml:space="preserve">
          <source>The following options are available for all backends.</source>
          <target state="translated">以下のオプションは、すべてのバックエンドで利用可能です。</target>
        </trans-unit>
        <trans-unit id="bfc330e8533debea8bfca9a1ee07bf2cd57313b0" translate="yes" xml:space="preserve">
          <source>The following path converters are available by default:</source>
          <target state="translated">デフォルトでは以下のパスコンバータが利用可能です。</target>
        </trans-unit>
        <trans-unit id="37a9d07a5ce6b19cdb03447182319609657d2303" translate="yes" xml:space="preserve">
          <source>The following special markup can be used in your docstrings to easily create hyperlinks to other components:</source>
          <target state="translated">以下の特別なマークアップをdocstringsで使用すると、他のコンポーネントへのハイパーリンクを簡単に作成することができます。</target>
        </trans-unit>
        <trans-unit id="ce2e60220c58a5237c89916e6739ef4fb408e2f9" translate="yes" xml:space="preserve">
          <source>The following steps install &lt;code&gt;django-polls&lt;/code&gt; as a user library. Per-user installs have a lot of advantages over installing the package system-wide, such as being usable on systems where you don&amp;rsquo;t have administrator access as well as preventing the package from affecting system services and other users of the machine.</source>
          <target state="translated">次の手順では、 &lt;code&gt;django-polls&lt;/code&gt; をユーザーライブラリとしてインストールします。ユーザー単位のインストールには、システム全体にパッケージをインストールするよりも多くの利点があります。たとえば、管理者アクセス権がないシステムで使用できることや、パッケージがシステムサービスやマシンの他のユーザーに影響を与えないようにすることなどです。</target>
        </trans-unit>
        <trans-unit id="3de0e27c71a643c0167b9228ad10d92581ce566d" translate="yes" xml:space="preserve">
          <source>The following table describes all keys that can be set in the &lt;code&gt;ds_input&lt;/code&gt; dictionary.</source>
          <target state="translated">次の表は、 &lt;code&gt;ds_input&lt;/code&gt; 辞書で設定できるすべてのキーを示しています。</target>
        </trans-unit>
        <trans-unit id="77ddba8f9221d107fb82a68bc44f1d2ec652ddc1" translate="yes" xml:space="preserve">
          <source>The following table explains the calculation for the percentile rank of a row:</source>
          <target state="translated">列のパーセンタイル順位の計算について説明します。</target>
        </trans-unit>
        <trans-unit id="9954c85322fc76aa8231c73793448b604300eff4" translate="yes" xml:space="preserve">
          <source>The following table provides a summary of what GIS-specific aggregate functions are available on each spatial backend. Please note that MySQL does not support any of these aggregates, and is thus excluded from the table.</source>
          <target state="translated">以下の表は、各空間バックエンドで利用可能な GIS 固有の集約機能の概要を示しています。MySQL はこれらのアグリゲートをサポートしていないため、この表からは除外されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8ed03a7e1d29f617e97e3e2081eac463d8dc91b6" translate="yes" xml:space="preserve">
          <source>The following table provides a summary of what geography-specific database functions are available on each spatial backend.</source>
          <target state="translated">以下の表に、各空間バックエンドで利用可能な地理固有のデータベース機能の概要を示す。</target>
        </trans-unit>
        <trans-unit id="87a5dfe0372fbe7b676b68991bb037492b90fea7" translate="yes" xml:space="preserve">
          <source>The following table provides a summary of what spatial lookups are available for each spatial database backend. The PostGIS Raster (PGRaster) lookups are divided into the three categories described in the &lt;a href=&quot;#spatial-lookup-raster&quot;&gt;raster lookup details&lt;/a&gt;: native support &lt;code&gt;N&lt;/code&gt;, bilateral native support &lt;code&gt;B&lt;/code&gt;, and geometry conversion support &lt;code&gt;C&lt;/code&gt;.</source>
          <target state="translated">次の表は、各空間データベースバックエンドで使用できる空間ルックアップの概要を示しています。PostGISラスター（PGRaster）ルックアップは、&lt;a href=&quot;#spatial-lookup-raster&quot;&gt;ラスタールックアップの詳細で&lt;/a&gt;説明されている3つのカテゴリ（ネイティブサポート &lt;code&gt;N&lt;/code&gt; 、バイラテラルネイティブサポート &lt;code&gt;B&lt;/code&gt; 、およびジオメトリ変換サポート &lt;code&gt;C&lt;/code&gt; ）に分かれています。</target>
        </trans-unit>
        <trans-unit id="17cb4e80e675b29c99328366acbf87f2bdc32c9b" translate="yes" xml:space="preserve">
          <source>The following three classes provide much of the functionality needed to create Django views. You may think of them as &lt;em&gt;parent&lt;/em&gt; views, which can be used by themselves or inherited from. They may not provide all the capabilities required for projects, in which case there are Mixins and Generic class-based views.</source>
          <target state="translated">次の3つのクラスは、Djangoビューの作成に必要な機能の多くを提供します。あなたはそれらを&lt;em&gt;親&lt;/em&gt;ビューと考えるかもしれません、それは彼ら自身によって使用されるか、または継承されることができます。それらはプロジェクトに必要なすべての機能を提供しない場合があります。その場合、MixinsとGenericクラスベースのビューがあります。</target>
        </trans-unit>
        <trans-unit id="163b5f6afc0ffb26d1ffc866c1f722351d96ab02" translate="yes" xml:space="preserve">
          <source>The following views are described on this page and provide a foundation for editing content:</source>
          <target state="translated">このページでは、以下のような見解を述べており、内容を編集するための基礎となる。</target>
        </trans-unit>
        <trans-unit id="3022ab1485812abddb1a35eb1aa77b23ad3cf6ee" translate="yes" xml:space="preserve">
          <source>The for loop sets a number of variables available within the loop:</source>
          <target state="translated">forループは、ループ内で利用可能な変数の数を設定します。</target>
        </trans-unit>
        <trans-unit id="6793037035443cca7f0f9bdde895bd5877949c0a" translate="yes" xml:space="preserve">
          <source>The foreign key relationship is made explicit by a &lt;code&gt;FOREIGN KEY&lt;/code&gt; constraint. Don&amp;rsquo;t worry about the &lt;code&gt;DEFERRABLE&lt;/code&gt; parts; it&amp;rsquo;s telling PostgreSQL to not enforce the foreign key until the end of the transaction.</source>
          <target state="translated">外部キーの関係は、 &lt;code&gt;FOREIGN KEY&lt;/code&gt; 制約によって明示的にされます。 &lt;code&gt;DEFERRABLE&lt;/code&gt; パーツについて心配する必要はありません。トランザクションが終了するまで外部キーを強制しないようにPostgreSQLに指示しています。</target>
        </trans-unit>
        <trans-unit id="c0ba7b5548e8a098c637d857954895946ddd63ea" translate="yes" xml:space="preserve">
          <source>The form &lt;a href=&quot;fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; instance from the form class that this &lt;a href=&quot;#django.forms.BoundField&quot;&gt;&lt;code&gt;BoundField&lt;/code&gt;&lt;/a&gt; wraps.</source>
          <target state="translated">この&lt;a href=&quot;#django.forms.BoundField&quot;&gt; &lt;code&gt;BoundField&lt;/code&gt; &lt;/a&gt;がラップするフォームクラスのフォーム&lt;a href=&quot;fields#django.forms.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;インスタンス。</target>
        </trans-unit>
        <trans-unit id="1534a6bb0f89c8d9e2ed69373d2903181c1f6689" translate="yes" xml:space="preserve">
          <source>The form class to instantiate.</source>
          <target state="translated">インスタンス化するフォームクラス。</target>
        </trans-unit>
        <trans-unit id="b7be3637d68371b077e5ccddff05d872e662bae7" translate="yes" xml:space="preserve">
          <source>The form field class can be specified via the &lt;code&gt;form_class&lt;/code&gt; and &lt;code&gt;choices_form_class&lt;/code&gt; arguments; the latter is used if the field has choices specified, the former otherwise. If these arguments are not provided, &lt;a href=&quot;../ref/forms/fields#django.forms.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../ref/forms/fields#django.forms.TypedChoiceField&quot;&gt;&lt;code&gt;TypedChoiceField&lt;/code&gt;&lt;/a&gt; will be used.</source>
          <target state="translated">フォームフィールドクラスは、 &lt;code&gt;form_class&lt;/code&gt; および &lt;code&gt;choices_form_class&lt;/code&gt; 引数を介して指定できます。後者は、フィールドに選択項目が指定されている場合に使用され、前者はそれ以外の場合に使用されます。これらの引数が提供されない場合、&lt;a href=&quot;../ref/forms/fields#django.forms.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../ref/forms/fields#django.forms.TypedChoiceField&quot;&gt; &lt;code&gt;TypedChoiceField&lt;/code&gt; &lt;/a&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="fa18bf982492fb4c002335a36b723ed98a5b1694" translate="yes" xml:space="preserve">
          <source>The form field class to use. Should be a subclass of &lt;a href=&quot;#django.contrib.postgres.fields.django.contrib.postgres.forms.BaseRangeField&quot;&gt;&lt;code&gt;django.contrib.postgres.forms.BaseRangeField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用するフォームフィールドクラス。&lt;a href=&quot;#django.contrib.postgres.fields.django.contrib.postgres.forms.BaseRangeField&quot;&gt; &lt;code&gt;django.contrib.postgres.forms.BaseRangeField&lt;/code&gt; の&lt;/a&gt;サブクラスである必要があります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
