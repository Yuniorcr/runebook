<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="89e577748ccae2d5a6c089d9b2e3df6f677ae933" translate="yes" xml:space="preserve">
          <source>Default widget: &lt;a href=&quot;widgets#django.forms.TimeInput&quot;&gt;&lt;code&gt;TimeInput&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">デフォルトのウィジェット：&lt;a href=&quot;widgets#django.forms.TimeInput&quot;&gt; &lt;code&gt;TimeInput&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d88c5aa4c223d3684cb4dc0826eb93490073fbef" translate="yes" xml:space="preserve">
          <source>Default widget: &lt;a href=&quot;widgets#django.forms.URLInput&quot;&gt;&lt;code&gt;URLInput&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">デフォルトのウィジェット：&lt;a href=&quot;widgets#django.forms.URLInput&quot;&gt; &lt;code&gt;URLInput&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="317bbd656753a9dd8ea52dce97e89a2822b25653" translate="yes" xml:space="preserve">
          <source>Default:</source>
          <target state="translated">Default:</target>
        </trans-unit>
        <trans-unit id="67db1cf2fd03a0f9fab47af0e36125a4f8eb93b5" translate="yes" xml:space="preserve">
          <source>Default: &lt;a href=&quot;../../ref/forms/widgets#django.forms.NumberInput&quot;&gt;&lt;code&gt;NumberInput&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">デフォルト：&lt;a href=&quot;../../ref/forms/widgets#django.forms.NumberInput&quot;&gt; &lt;code&gt;NumberInput&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="997b4e79338b2ff2f204e9eb72659e0e6bf81846" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;''&lt;/code&gt; (Empty string)</source>
          <target state="translated">デフォルト： &lt;code&gt;''&lt;/code&gt; （空の文字列）</target>
        </trans-unit>
        <trans-unit id="e0bdf55c46aa3abf5f646929023b1e4bb7a1c84a" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;','&lt;/code&gt; (Comma)</source>
          <target state="translated">デフォルト： &lt;code&gt;','&lt;/code&gt; （カンマ）</target>
        </trans-unit>
        <trans-unit id="795d7b6a3f7d0f9376b6a55b32fcfc5ea14c9506" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'.'&lt;/code&gt; (Dot)</source>
          <target state="translated">デフォルト： &lt;code&gt;'.'&lt;/code&gt; （ドット）</target>
        </trans-unit>
        <trans-unit id="0196e5ded7a96507722ab400f335ed4fa4dab0ed" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'/'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'/'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fb78754b9ff0ab81a2f71c590df83bfde7eb5c25" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'/accounts/login/'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'/accounts/login/'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7eba43577560ed12140f3b8ed6ae2b2dba63bb0d" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'/accounts/profile/'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'/accounts/profile/'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fc001f4043e6bf6194bf8be2b6a6167ec4373c69" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'25M'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'25M'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ffc792bcfa56d1810f92db32cbe8ff39d40ac42" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'500M'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'500M'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8bdbee6dd20cc632090d2f78666f5c91a75224d8" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'50M'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'50M'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="90356ff69748617d17ceff1d158d5a966d81a287" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'&lt;/code&gt;&lt;a href=&quot;../howto/error-reporting#django.views.debug.ExceptionReporter&quot;&gt;&lt;code&gt;django.views.debug.ExceptionReporter&lt;/code&gt;&lt;/a&gt;&lt;code&gt;'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'&lt;/code&gt; &lt;a href=&quot;../howto/error-reporting#django.views.debug.ExceptionReporter&quot;&gt; &lt;code&gt;django.views.debug.ExceptionReporter&lt;/code&gt; &lt;/a&gt; &lt;code&gt;'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7642e98b345a25f91d739ed609f98ce8439cca75" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'&lt;/code&gt;&lt;a href=&quot;../howto/error-reporting#django.views.debug.SafeExceptionReporterFilter&quot;&gt;&lt;code&gt;django.views.debug.SafeExceptionReporterFilter&lt;/code&gt;&lt;/a&gt;&lt;code&gt;'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'&lt;/code&gt; &lt;a href=&quot;../howto/error-reporting#django.views.debug.SafeExceptionReporterFilter&quot;&gt; &lt;code&gt;django.views.debug.SafeExceptionReporterFilter&lt;/code&gt; &lt;/a&gt; &lt;code&gt;'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a4a5220270185773c92b5ea4f5c02aac05a4f8da" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'&lt;/code&gt;&lt;a href=&quot;../topics/email#django.core.mail.backends.smtp.EmailBackend&quot;&gt;&lt;code&gt;django.core.mail.backends.smtp.EmailBackend&lt;/code&gt;&lt;/a&gt;&lt;code&gt;'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'&lt;/code&gt; &lt;a href=&quot;../topics/email#django.core.mail.backends.smtp.EmailBackend&quot;&gt; &lt;code&gt;django.core.mail.backends.smtp.EmailBackend&lt;/code&gt; &lt;/a&gt; &lt;code&gt;'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8d93e1064ff7f8b54ec2be614c28f7c5625f43a4" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'&lt;/code&gt;&lt;a href=&quot;files/storage#django.core.files.storage.FileSystemStorage&quot;&gt;&lt;code&gt;django.core.files.storage.FileSystemStorage&lt;/code&gt;&lt;/a&gt;&lt;code&gt;'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'&lt;/code&gt; &lt;a href=&quot;files/storage#django.core.files.storage.FileSystemStorage&quot;&gt; &lt;code&gt;django.core.files.storage.FileSystemStorage&lt;/code&gt; &lt;/a&gt; &lt;code&gt;'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b3a7d24fbfa0c2fde73217a4f703d2f7227d7377" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'&lt;/code&gt;&lt;a href=&quot;forms/renderers#django.forms.renderers.DjangoTemplates&quot;&gt;&lt;code&gt;django.forms.renderers.DjangoTemplates&lt;/code&gt;&lt;/a&gt;&lt;code&gt;'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'&lt;/code&gt; &lt;a href=&quot;forms/renderers#django.forms.renderers.DjangoTemplates&quot;&gt; &lt;code&gt;django.forms.renderers.DjangoTemplates&lt;/code&gt; &lt;/a&gt; &lt;code&gt;'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4c2212d132d7071c1a7df8a228796ac890ea1ec3" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'America/Chicago'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'America/Chicago'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a13a3a042021357bd30080c16253b6a9f2a8ae37" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'DENY'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'DENY'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4cd44dc540b617cfdec9fbd4e135052cc4acc0ed" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'F Y'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'F Y'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="37e2c2a2da4d094ecfed6435ea65ee3b0bab0b78" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'F j'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'F j'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f7bb115fb859643cc7499dfb79d6cd295d081989" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'HTTP_X_CSRFTOKEN'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'HTTP_X_CSRFTOKEN'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c320145bc48179b9a6d0fe6f8544c991589334ed" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'Lax'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'Lax'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2ba2ab5b7ebe572ac8bb5ed49875504d3c4548f9" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'N j, Y'&lt;/code&gt; (e.g. &lt;code&gt;Feb. 4, 2003&lt;/code&gt;)</source>
          <target state="translated">デフォルト： &lt;code&gt;'N j, Y'&lt;/code&gt; （例： &lt;code&gt;Feb. 4, 2003&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b5630bb13124c3f602d73ec202beddbad0dc2980" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'N j, Y, P'&lt;/code&gt; (e.g. &lt;code&gt;Feb. 4, 2003, 4 p.m.&lt;/code&gt;)</source>
          <target state="translated">デフォルト： &lt;code&gt;'N j, Y, P'&lt;/code&gt; （例： &lt;code&gt;Feb. 4, 2003, 4 p.m.&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="2e0967932179cbf575486da544eb1e20e9aaaad1" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'P'&lt;/code&gt; (e.g. &lt;code&gt;4 p.m.&lt;/code&gt;)</source>
          <target state="translated">デフォルト： &lt;code&gt;'P'&lt;/code&gt; （例： &lt;code&gt;4 p.m.&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="5f87341d8c741051a61adb4974de9ef0db55bf9b" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'[Django] '&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'[Django] '&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1268dd27c9a0d569d95f2f6b325daceec003cb3e" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'auth.User'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'auth.User'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2fab9aeca51ef1b9ccb02b8fe899919824161c46" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'csrftoken'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'csrftoken'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="128442bfc3862ef671e47f3f3dade4d29cd276a3" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'default'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'default'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b19a6259605718017bb58b10e8e5fecf42d6e06" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'django.contrib.messages.storage.fallback.FallbackStorage'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'django.contrib.messages.storage.fallback.FallbackStorage'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e7b1d4fee8155b4a694d673c5df3d66fed00e1a3" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'django.contrib.sessions.backends.db'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'django.contrib.sessions.backends.db'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2656c7aff0d6544db5992f988b98dabade69b8ea" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'django.contrib.sessions.serializers.JSONSerializer'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'django.contrib.sessions.serializers.JSONSerializer'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="488e22af27624c240a0772db2f7a7484586b816b" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'django.contrib.staticfiles.storage.StaticFilesStorage'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'django.contrib.staticfiles.storage.StaticFilesStorage'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="882ec21922634ed2d86e52b18235be9156bff0df" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'django.core.signing.TimestampSigner'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'django.core.signing.TimestampSigner'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bc3744085dcbbd698b74015fffb6ebe1a6a55f65" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'django.test.runner.DiscoverRunner'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'django.test.runner.DiscoverRunner'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f9d80a1e61062a156901ee67f5ed66a54c12748d" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'django.views.csrf.csrf_failure'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'django.views.csrf.csrf_failure'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="053a4a1222a0252ae7456640b12cf5f17c2c5430" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'django_language'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'django_language'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a5b5eb0f85b47615055e49fb6207984eeeb028f3" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'en-us'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'en-us'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5c7bb4b802da74bd606acaf449f3ab6a648e7406" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'localhost'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'localhost'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ccc487f8f26e1f867656bc82d7245e55d852aa59" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'logging.config.dictConfig'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'logging.config.dictConfig'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="29b7109fd2c838f7ec01371771dbcd24bf40fef5" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'m/d/Y P'&lt;/code&gt; (e.g. &lt;code&gt;12/31/2003 4 p.m.&lt;/code&gt;)</source>
          <target state="translated">デフォルト： &lt;code&gt;'m/d/Y P'&lt;/code&gt; （例： &lt;code&gt;12/31/2003 4 p.m.&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="2bb831b75bece7d1a54b33f3cdef65faa5ea05dc" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'m/d/Y'&lt;/code&gt; (e.g. &lt;code&gt;12/31/2003&lt;/code&gt;)</source>
          <target state="translated">デフォルト： &lt;code&gt;'m/d/Y'&lt;/code&gt; （例： &lt;code&gt;12/31/2003&lt;/code&gt; 年12月31日）</target>
        </trans-unit>
        <trans-unit id="15f758d93dd1c78c5ce4f3653a3864d7bc3846f3" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'root@localhost'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'root@localhost'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="86359cf18b4f84f5d06fa515ccf02b47fbab8bf6" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'same-origin'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'same-origin'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d0527e669bc11fd44cd7bca1ed963a88034b5d14" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'sessionid'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'sessionid'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f03370e81e0ee51898fac1f2fbaf34150c6afc8c" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'sha256'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'sha256'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0d401a6800278154088171be1df2f5093f4f06ce" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'utf-8'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'utf-8'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1cf43dbbfcd0989ea5408aa944ee40a804337032" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'webmaster@localhost'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'webmaster@localhost'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3569cdb24d4e3738060acfc3ad2efff4bb497560" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="65bd9e049d2d3d36033ebf2c3b3dec644d0b2e46" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;0&lt;/code&gt; (Sunday)</source>
          <target state="translated">デフォルト： &lt;code&gt;0&lt;/code&gt; （日曜日）</target>
        </trans-unit>
        <trans-unit id="15563e706f9818d86151fe84e24d929bd38ab866" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;0o644&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;0o644&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f88862b306507450be1cb013438c14b8ce90ddd1" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;1000&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;1000&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf8684c022464a2102f7848172983423aa3d7ea6" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;1209600&lt;/code&gt; (2 weeks, in seconds)</source>
          <target state="translated">デフォルト： &lt;code&gt;1209600&lt;/code&gt; （2週間、秒単位）</target>
        </trans-unit>
        <trans-unit id="c8cdb6bdfb4ddcbbf9350bcc9a8f2c9275878282" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;1&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3423fa82b412e27437154d4c0e911d901c7e8cd6" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;259200&lt;/code&gt; (3 days, in seconds)</source>
          <target state="translated">デフォルト： &lt;code&gt;259200&lt;/code&gt; （3日、秒単位）</target>
        </trans-unit>
        <trans-unit id="2f7711457e3aa2211302734aa2f7e557a1cc483a" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;25&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;25&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="07b46bd564d054127e0f9a6e1c1e12c7901e7eaf" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;2621440&lt;/code&gt; (i.e. 2.5 MB).</source>
          <target state="translated">デフォルト： &lt;code&gt;2621440&lt;/code&gt; （つまり2.5 MB）。</target>
        </trans-unit>
        <trans-unit id="35c437503a5fc1e0deabd662d22fe84536301a56" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;300&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;300&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="05b462618d0e5c160f96395a98b8c5aba541aebc" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;31449600&lt;/code&gt; (approximately 1 year, in seconds)</source>
          <target state="translated">デフォルト： &lt;code&gt;31449600&lt;/code&gt; （約1年、秒単位）</target>
        </trans-unit>
        <trans-unit id="2b05de63802534c8137a6f0bc266b819b3b70648" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;3&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cb612eb3aae52316c145cab6492d8330731582db" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;600&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;600&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="25a9084be6987615bf532ff3db85aaec6121b192" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;False&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;False&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8e4f64360906e7f1452e75f1085dc507b2bff801" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;None&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;None&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2946d6707436ee5b1a7c7c104e9dad07bb489c9f" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;None&lt;/code&gt; (expires at browser close)</source>
          <target state="translated">デフォルト： &lt;code&gt;None&lt;/code&gt; （ブラウザを閉じると期限切れ）</target>
        </trans-unit>
        <trans-unit id="3c8ca82e4a52fce1712b0adec6141e66b586eb41" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;True&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;True&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="faeff543065545d715ac04f654f411c0d8f33d25" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;['default']&lt;/code&gt;, for all databases other than &lt;code&gt;default&lt;/code&gt;, which has no dependencies.</source>
          <target state="translated">デフォルト： &lt;code&gt;['default']&lt;/code&gt; 。 &lt;code&gt;default&lt;/code&gt; 以外のすべてのデータベースで、依存関係はありません。</target>
        </trans-unit>
        <trans-unit id="02aa7d9e40af37191980719fca8f6aa03aa44e3a" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;['django.contrib.auth.backends.ModelBackend']&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;['django.contrib.auth.backends.ModelBackend']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3bee933aff901ad8560db2ae2caad4e948205874" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;[]&lt;/code&gt; (Empty list)</source>
          <target state="translated">デフォルト： &lt;code&gt;[]&lt;/code&gt; （空のリスト）</target>
        </trans-unit>
        <trans-unit id="8b5a357552875b745134e87f131f361a5ee8160d" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;default&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;default&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3df44ef382af757a7508e8e6e7550cefd26581dc" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;messages.INFO&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;messages.INFO&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ec0f178638771800f08a5a145b2892f6ddf572a0" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;{}&lt;/code&gt; (Empty dict)</source>
          <target state="translated">デフォルト： &lt;code&gt;{}&lt;/code&gt; （空の辞書）</target>
        </trans-unit>
        <trans-unit id="67db356353ac7fcc54b39edcfb87118eba95dd3a" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;{}&lt;/code&gt; (Empty dictionary)</source>
          <target state="translated">デフォルト： &lt;code&gt;{}&lt;/code&gt; （空の辞書）</target>
        </trans-unit>
        <trans-unit id="b16da03f01bc8e013eb649255c75a43b9c3dc11b" translate="yes" xml:space="preserve">
          <source>Default: A list of all available languages. This list is continually growing and including a copy here would inevitably become rapidly out of date. You can see the current list of translated languages by looking in &lt;a href=&quot;https://github.com/django/django/blob/master/django/conf/global_settings.py&quot;&gt;django/conf/global_settings.py&lt;/a&gt;.</source>
          <target state="translated">デフォルト：使用可能なすべての言語のリスト。このリストは増え続けており、ここにコピーを含めると必然的に急速に古くなります。&lt;a href=&quot;https://github.com/django/django/blob/master/django/conf/global_settings.py&quot;&gt;django / conf / global_settings.pyを&lt;/a&gt;調べると、翻訳された言語の現在のリストを確認できます。</target>
        </trans-unit>
        <trans-unit id="d485a204535d541c7d21380a87d9e5bc32b91798" translate="yes" xml:space="preserve">
          <source>Default: A list of all language codes that are written right-to-left. You can see the current list of these languages by looking in &lt;a href=&quot;https://github.com/django/django/blob/master/django/conf/global_settings.py&quot;&gt;django/conf/global_settings.py&lt;/a&gt;.</source>
          <target state="translated">デフォルト：右から左に書かれたすべての言語コードのリスト。これらの言語の現在のリストは、&lt;a href=&quot;https://github.com/django/django/blob/master/django/conf/global_settings.py&quot;&gt;django / conf / global_settings.pyで確認でき&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="da6083aa8fd082bdcd8802cf1509789b2435f544" translate="yes" xml:space="preserve">
          <source>Default: A logging configuration dictionary.</source>
          <target state="translated">デフォルト。ロギング設定辞書。</target>
        </trans-unit>
        <trans-unit id="0834a9c615b1c3b580548c3be858e9f18f746a0d" translate="yes" xml:space="preserve">
          <source>Default: Not defined</source>
          <target state="translated">デフォルト。定義されていない</target>
        </trans-unit>
        <trans-unit id="997364a31e6b79d4205d2e9a2cc05ec572a0d195" translate="yes" xml:space="preserve">
          <source>Default: see below</source>
          <target state="translated">デフォルト:以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="b812f67e0e9152ee5bd184729e913c5fb156c0ac" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;a href=&quot;../request-response#django.http.HttpResponseGone&quot;&gt;&lt;code&gt;HttpResponseGone&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトは&lt;a href=&quot;../request-response#django.http.HttpResponseGone&quot;&gt; &lt;code&gt;HttpResponseGone&lt;/code&gt; です&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="64b2ef6a290211e9f8a705b52473520a04104361" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;a href=&quot;../request-response#django.http.HttpResponsePermanentRedirect&quot;&gt;&lt;code&gt;HttpResponsePermanentRedirect&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトは&lt;a href=&quot;../request-response#django.http.HttpResponsePermanentRedirect&quot;&gt; &lt;code&gt;HttpResponsePermanentRedirect&lt;/code&gt; です&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dc4d005ca3a61106247ed7e631be66d0ec0ae87f" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;a href=&quot;request-response#django.http.HttpResponsePermanentRedirect&quot;&gt;&lt;code&gt;HttpResponsePermanentRedirect&lt;/code&gt;&lt;/a&gt;. Subclass &lt;code&gt;CommonMiddleware&lt;/code&gt; and override the attribute to customize the redirects issued by the middleware.</source>
          <target state="translated">デフォルトは&lt;a href=&quot;request-response#django.http.HttpResponsePermanentRedirect&quot;&gt; &lt;code&gt;HttpResponsePermanentRedirect&lt;/code&gt; です&lt;/a&gt;。 &lt;code&gt;CommonMiddleware&lt;/code&gt; をサブクラス化し、属性をオーバーライドして、ミドルウェアによって発行されるリダイレクトをカスタマイズします。</target>
        </trans-unit>
        <trans-unit id="0f0d6e7d90823e375f11462556d429645d56a153" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;a href=&quot;request-response#django.http.HttpResponseRedirect&quot;&gt;&lt;code&gt;HttpResponseRedirect&lt;/code&gt;&lt;/a&gt;. Subclass &lt;code&gt;LocaleMiddleware&lt;/code&gt; and override the attribute to customize the redirects issued by the middleware.</source>
          <target state="translated">デフォルトは&lt;a href=&quot;request-response#django.http.HttpResponseRedirect&quot;&gt; &lt;code&gt;HttpResponseRedirect&lt;/code&gt; です&lt;/a&gt;。 &lt;code&gt;LocaleMiddleware&lt;/code&gt; をサブクラス化し、属性をオーバーライドして、ミドルウェアによって発行されるリダイレクトをカスタマイズします。</target>
        </trans-unit>
        <trans-unit id="e9db1c30efeb8e0419e296f69927ae6250ee1e17" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;%(expression)s OVER (%(window)s)'&lt;/code&gt;. If only the &lt;code&gt;expression&lt;/code&gt; argument is provided, the window clause will be blank.</source>
          <target state="translated">デフォルトは &lt;code&gt;%(expression)s OVER (%(window)s)'&lt;/code&gt; です。 &lt;code&gt;expression&lt;/code&gt; 引数のみが指定されている場合、ウィンドウ句は空白になります。</target>
        </trans-unit>
        <trans-unit id="a7d8cb62553686a28c0bb63f132f1e5a555e3fb9" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;('add', 'change', 'delete', 'view')&lt;/code&gt;. You may customize this list, for example, by setting this to an empty list if your app doesn&amp;rsquo;t require any of the default permissions. It must be specified on the model before the model is created by &lt;a href=&quot;../django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; in order to prevent any omitted permissions from being created.</source>
          <target state="translated">デフォルトは &lt;code&gt;('add', 'change', 'delete', 'view')&lt;/code&gt; です。たとえば、アプリがデフォルトの権限を必要としない場合は、このリストを空のリストに設定することで、このリストをカスタマイズできます。省略された権限が作成されないようにするために、&lt;a href=&quot;../django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;によってモデルが作成される前にモデルで指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="907c53a8ae1c53569e36451b7558d25df6de35fd" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;False&lt;/code&gt;. If enabled, stripping will be applied before the regex validation.</source>
          <target state="translated">デフォルトは &lt;code&gt;False&lt;/code&gt; です。有効にすると、正規表現検証の前にストリッピングが適用されます。</target>
        </trans-unit>
        <trans-unit id="d0f754fa0046919e9432d7c22896f6413bc08b51" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;False&lt;/code&gt;. The SQL standard disallows referencing window functions in the &lt;code&gt;WHERE&lt;/code&gt; clause and Django raises an exception when constructing a &lt;code&gt;QuerySet&lt;/code&gt; that would do that.</source>
          <target state="translated">デフォルトは &lt;code&gt;False&lt;/code&gt; です。SQL標準では、 &lt;code&gt;WHERE&lt;/code&gt; 句でウィンドウ関数を参照することはできません &lt;code&gt;QuerySet&lt;/code&gt; 、それを行うQuerySetを構築するときに例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="ddbcff4e8e7b6cf5499dbbec427ebf335a64198a" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;True&lt;/code&gt; since most aggregate functions can be used as the source expression in &lt;a href=&quot;#django.db.models.expressions.Window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ほとんどの集約関数は&lt;a href=&quot;#django.db.models.expressions.Window&quot;&gt; &lt;code&gt;Window&lt;/code&gt; の&lt;/a&gt;ソース式として使用できるため、デフォルトは &lt;code&gt;True&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="efd7bd4a0560892952b689e0c71ed0501e359d80" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;True&lt;/code&gt;, in which case a &lt;code&gt;required&lt;/code&gt; validation error will be raised if no value is supplied for any field.</source>
          <target state="translated">デフォルトは &lt;code&gt;True&lt;/code&gt; です。この場合、フィールドに値が指定されていないと、 &lt;code&gt;required&lt;/code&gt; 検証エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="619bef8cda01fd88969e8e7439c289e84d44d37e" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;True&lt;/code&gt;, meaning Django will create the appropriate database tables in &lt;a href=&quot;../django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; or as part of migrations and remove them as part of a &lt;a href=&quot;../django-admin#django-admin-flush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; management command. That is, Django &lt;em&gt;manages&lt;/em&gt; the database tables&amp;rsquo; lifecycles.</source>
          <target state="translated">デフォルトは &lt;code&gt;True&lt;/code&gt; です。つまり、Djangoは適切なデータベーステーブルを&lt;a href=&quot;../django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;または移行の一部として作成し、&lt;a href=&quot;../django-admin#django-admin-flush&quot;&gt; &lt;code&gt;flush&lt;/code&gt; &lt;/a&gt;管理コマンドの一部として削除します。つまり、Django はデータベーステーブルのライフサイクルを&lt;em&gt;管理&lt;/em&gt;します。</target>
        </trans-unit>
        <trans-unit id="4f48ea53b3cd2b78bf54e6fb0ef9120a87e97223" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;True&lt;/code&gt;. Creates a spatial index for the given geometry field.</source>
          <target state="translated">デフォルトは &lt;code&gt;True&lt;/code&gt; です。指定されたジオメトリフィールドの空間インデックスを作成します。</target>
        </trans-unit>
        <trans-unit id="79c123d8bc12519e64a23e13a2286264f8c69ce7" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;True&lt;/code&gt;. When set to &lt;code&gt;False&lt;/code&gt;, disables editing of existing geometry fields in the admin.</source>
          <target state="translated">デフォルトは &lt;code&gt;True&lt;/code&gt; です。 &lt;code&gt;False&lt;/code&gt; に設定すると、管理者の既存のジオメトリフィールドの編集が無効になります。</target>
        </trans-unit>
        <trans-unit id="99620824425a9b658ca532f9171e156ed70b641e" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;json.JSONDecoder&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;json.JSONDecoder&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f4b5925edcf1259809f3b0a6fdc5261e35240bad" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;json.JSONEncoder&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;json.JSONEncoder&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9c003fef6e245fc984750ff38b0c3c2ebd54b72f" translate="yes" xml:space="preserve">
          <source>Defaults to providing &lt;code&gt;date_list&lt;/code&gt; by year, but this can be altered to month or day using the attribute &lt;code&gt;date_list_period&lt;/code&gt;. This also applies to all subclass views.</source>
          <target state="translated">デフォルトでは年 &lt;code&gt;date_list&lt;/code&gt; を提供しますが、これは &lt;code&gt;date_list_period&lt;/code&gt; 属性を使用して月または日に変更できます。これは、すべてのサブクラスビューにも適用されます。</target>
        </trans-unit>
        <trans-unit id="964b468a265d92958f67f2ad890abbbd69d37d9b" translate="yes" xml:space="preserve">
          <source>Deferrable unique constraints are ignored on MySQL, MariaDB, and SQLite as neither supports them.</source>
          <target state="translated">遅延可能な一意の制約は、MySQL、MariaDB、およびSQLiteのいずれもサポートしていないため、無視されます。</target>
        </trans-unit>
        <trans-unit id="f42b938f5892023e550494e819eb3b7a4d7cef59" translate="yes" xml:space="preserve">
          <source>Deferred exclusion constraints may lead to a &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createtable.html#id-1.9.3.85.9.4&quot;&gt;performance penalty&lt;/a&gt;.</source>
          <target state="translated">除外制約を延期すると、&lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createtable.html#id-1.9.3.85.9.4&quot;&gt;パフォーマンスが低下&lt;/a&gt;する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d66c2da7ecf89dfd85dca270114a4ec092735461" translate="yes" xml:space="preserve">
          <source>Deferred unique constraints may lead to a &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createtable.html#id-1.9.3.85.9.4&quot;&gt;performance penalty&lt;/a&gt;.</source>
          <target state="translated">一意の制約を延期すると、&lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createtable.html#id-1.9.3.85.9.4&quot;&gt;パフォーマンスが低下&lt;/a&gt;する可能性があります。</target>
        </trans-unit>
        <trans-unit id="5e32815870a249346846dd8211ba0125dc0e6971" translate="yes" xml:space="preserve">
          <source>Deferring model fields</source>
          <target state="translated">モデル分野の延期</target>
        </trans-unit>
        <trans-unit id="4702bf45618c39f2599c157983456bfdcace358a" translate="yes" xml:space="preserve">
          <source>Define a &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt; &lt;code&gt;SITE_ID&lt;/code&gt; &lt;/a&gt;設定を定義します。</target>
        </trans-unit>
        <trans-unit id="9b7b7b35489d4b747f186863885c13a6e186dc53" translate="yes" xml:space="preserve">
          <source>Define a &lt;code&gt;get_absolute_url()&lt;/code&gt; method to tell Django how to calculate the canonical URL for an object. To callers, this method should appear to return a string that can be used to refer to the object over HTTP.</source>
          <target state="translated">&lt;code&gt;get_absolute_url()&lt;/code&gt; メソッドを定義して、オブジェクトの正規URLを計算する方法をDjangoに伝えます。呼び出し元にとって、このメソッドは、HTTP経由でオブジェクトを参照するために使用できる文字列を返すように見える必要があります。</target>
        </trans-unit>
        <trans-unit id="8ed59e765964a4d2aa83cb981bfa2024b11a079b" translate="yes" xml:space="preserve">
          <source>Define custom methods on a model to add custom &amp;ldquo;row-level&amp;rdquo; functionality to your objects. Whereas &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; methods are intended to do &amp;ldquo;table-wide&amp;rdquo; things, model methods should act on a particular model instance.</source>
          <target state="translated">モデルにカスタムメソッドを定義して、カスタムの「行レベル」機能をオブジェクトに追加します。一方、&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;メソッドは、「テーブル全体」のことを行うことが意図されている、モデルのメソッドは、特定のモデルインスタンスに行動しなければなりません。</target>
        </trans-unit>
        <trans-unit id="15e570799d9bd23cb5c79308384499433f5663d3" translate="yes" xml:space="preserve">
          <source>Defines a block that can be overridden by child templates. See &lt;a href=&quot;language#template-inheritance&quot;&gt;Template inheritance&lt;/a&gt; for more information.</source>
          <target state="translated">子テンプレートで上書きできるブロックを定義します。詳細については、&lt;a href=&quot;language#template-inheritance&quot;&gt;テンプレートの継承&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="69a4133f9903d218e677f51c159c3e66b0635c78" translate="yes" xml:space="preserve">
          <source>Defines the class this transformation outputs. It must be a &lt;a href=&quot;fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; instance. By default is the same as its &lt;code&gt;lhs.output_field&lt;/code&gt;.</source>
          <target state="translated">この変換が出力するクラスを定義します。これは&lt;a href=&quot;fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;インスタンスである必要があります。デフォルトでは、 &lt;code&gt;lhs.output_field&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="9c120fcd7e714e01c552c6f1a17aed133ea303bb" translate="yes" xml:space="preserve">
          <source>Defines the type of class returned by the &lt;code&gt;get_lookup()&lt;/code&gt; method. It must be a &lt;a href=&quot;fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;code&gt;get_lookup()&lt;/code&gt; メソッドによって返されるクラスのタイプを定義します。これは&lt;a href=&quot;fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;インスタンスである必要があります。</target>
        </trans-unit>
        <trans-unit id="e0a06e3730c12f5747448528ae4d21f3913cdabc" translate="yes" xml:space="preserve">
          <source>Defines two filters:</source>
          <target state="translated">2つのフィルタを定義します。</target>
        </trans-unit>
        <trans-unit id="1bd018a91dacb0df0403a63cf27254f258f1ca4e" translate="yes" xml:space="preserve">
          <source>Defines two formatters:</source>
          <target state="translated">2つのフォーマッタを定義します。</target>
        </trans-unit>
        <trans-unit id="8b052434c8bf583d7f9cf2d766a4cafa8150b7b3" translate="yes" xml:space="preserve">
          <source>Defines two handlers:</source>
          <target state="translated">2つのハンドラを定義します。</target>
        </trans-unit>
        <trans-unit id="34eb11e84b9351ecde10161fc6952775fa23190a" translate="yes" xml:space="preserve">
          <source>Defining &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericRelation&quot;&gt;&lt;code&gt;GenericRelation&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;related_query_name&lt;/code&gt; set allows querying from the related object:</source>
          <target state="translated">&lt;code&gt;related_query_name&lt;/code&gt; を設定して&lt;a href=&quot;#django.contrib.contenttypes.fields.GenericRelation&quot;&gt; &lt;code&gt;GenericRelation&lt;/code&gt; &lt;/a&gt;を定義すると、関連オブジェクトからのクエリが可能になります。</target>
        </trans-unit>
        <trans-unit id="5dce9fc5fbf8fa1054c55e5c7f014d9e7ca7b6e3" translate="yes" xml:space="preserve">
          <source>Defining a Geographic Model</source>
          <target state="translated">地理モデルの定義</target>
        </trans-unit>
        <trans-unit id="78e0033e5ed8e5b295e829e5010e8de133e313f2" translate="yes" xml:space="preserve">
          <source>Defining a custom email backend</source>
          <target state="translated">カスタムメールバックエンドの定義</target>
        </trans-unit>
        <trans-unit id="d349848f7ede72f4f3ed575ea6d3f7567d7fff00" translate="yes" xml:space="preserve">
          <source>Defining a test runner</source>
          <target state="translated">テストランナーの定義</target>
        </trans-unit>
        <trans-unit id="f9787cc25b2f857b03a8646a520906e3b9359971" translate="yes" xml:space="preserve">
          <source>Defining actions as methods gives the action more idiomatic access to the &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; itself, allowing the action to call any of the methods provided by the admin.</source>
          <target state="translated">アクションをメソッドとして定義すると、アクションは&lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt;自体へのより慣用的なアクセスが可能になり、管理者が提供するメソッドをアクションが呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="c0ce8ea8dd06560422fb3f1f115631948e200a9b" translate="yes" xml:space="preserve">
          <source>Defining and sending signals</source>
          <target state="translated">信号の定義と送信</target>
        </trans-unit>
        <trans-unit id="8e0cad74a06499480fbb2152543015a07638bfe5" translate="yes" xml:space="preserve">
          <source>Defining signals</source>
          <target state="translated">信号の定義</target>
        </trans-unit>
        <trans-unit id="df5e6c996907105479f6a562279ff1b8116220f5" translate="yes" xml:space="preserve">
          <source>Defining your databases</source>
          <target state="translated">データベースの定義</target>
        </trans-unit>
        <trans-unit id="dc2e1aeb4bea3bc3383a65ab5b75322ee1a67949" translate="yes" xml:space="preserve">
          <source>Defining your own range types</source>
          <target state="translated">独自のレンジタイプの定義</target>
        </trans-unit>
        <trans-unit id="15225baac48fc3d689cb2b0f74b936eff4339ff7" translate="yes" xml:space="preserve">
          <source>Definitions</source>
          <target state="translated">Definitions</target>
        </trans-unit>
        <trans-unit id="f6fdbe48dc54dd86f63097a03bd24094dedd713a" translate="yes" xml:space="preserve">
          <source>Delete</source>
          <target state="translated">Delete</target>
        </trans-unit>
        <trans-unit id="5b3b83af91b02f67bb115632ba4297710a2b48ba" translate="yes" xml:space="preserve">
          <source>Delete &amp;ndash; Displays a delete confirmation page.</source>
          <target state="translated">削除&amp;ndash;削除確認ページを表示します。</target>
        </trans-unit>
        <trans-unit id="4793016c31fbba669f722385fb4924a93c6fe932" translate="yes" xml:space="preserve">
          <source>Delete some of the old, unneeded views.</source>
          <target state="translated">古い不要なビューの一部を削除します。</target>
        </trans-unit>
        <trans-unit id="a2b3823726327c85a901843be7d75d8c55413631" translate="yes" xml:space="preserve">
          <source>Deletes stale content types (from deleted models) in your database. Any objects that depend on the deleted content types will also be deleted. A list of deleted objects will be displayed before you confirm it&amp;rsquo;s okay to proceed with the deletion.</source>
          <target state="translated">データベース内の古いコンテンツタイプを（削除されたモデルから）削除します。削除されたコンテンツタイプに依存するオブジェクトもすべて削除されます。削除を続行してもよいことを確認する前に、削除されたオブジェクトのリストが表示されます。</target>
        </trans-unit>
        <trans-unit id="9748bb22d276a5f975b3895a5d2c1777987ef70a" translate="yes" xml:space="preserve">
          <source>Deletes stale content types including ones from previously installed apps that have been removed from &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;から削除された、以前にインストールされたアプリからのものを含む、古いコンテンツタイプを削除します。デフォルトは &lt;code&gt;False&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0b4809719d3da4c82a27ee2c24b2d2a4f3804cee" translate="yes" xml:space="preserve">
          <source>Deletes the cookie with the given key. Fails silently if the key doesn&amp;rsquo;t exist.</source>
          <target state="translated">指定されたキーを持つCookieを削除します。キーが存在しない場合、警告なしで失敗します。</target>
        </trans-unit>
        <trans-unit id="63d623ac95264c8b9be90c32fa0554f99cb4c5bc" translate="yes" xml:space="preserve">
          <source>Deletes the current session data from the session and deletes the session cookie. This is used if you want to ensure that the previous session data can&amp;rsquo;t be accessed again from the user&amp;rsquo;s browser (for example, the &lt;a href=&quot;../auth/default#django.contrib.auth.logout&quot;&gt;&lt;code&gt;django.contrib.auth.logout()&lt;/code&gt;&lt;/a&gt; function calls it).</source>
          <target state="translated">セッションから現在のセッションデータを削除し、セッションCookieを削除します。これは、ユーザーのブラウザーから前のセッションデータに再度アクセスできないようにする場合に使用されます（たとえば、&lt;a href=&quot;../auth/default#django.contrib.auth.logout&quot;&gt; &lt;code&gt;django.contrib.auth.logout()&lt;/code&gt; &lt;/a&gt;関数がそれを呼び出す）。</target>
        </trans-unit>
        <trans-unit id="c73c7594f7310f58ed3a702bf90f0d2373a57a4e" translate="yes" xml:space="preserve">
          <source>Deletes the file associated with this instance and clears all attributes on the field. Note: This method will close the file if it happens to be open when &lt;code&gt;delete()&lt;/code&gt; is called.</source>
          <target state="translated">このインスタンスに関連付けられているファイルを削除し、フィールドのすべての属性をクリアします。注：このメソッドは、 &lt;code&gt;delete()&lt;/code&gt; が呼び出されたときにファイルが開いている場合、ファイルを閉じます。</target>
        </trans-unit>
        <trans-unit id="d812d63bb5a6499e33b5faa10bd6e618f1f44705" translate="yes" xml:space="preserve">
          <source>Deletes the file referenced by &lt;code&gt;name&lt;/code&gt;. If deletion is not supported on the target storage system this will raise &lt;code&gt;NotImplementedError&lt;/code&gt; instead</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 参照されているファイルを削除します。ターゲットストレージシステムで削除がサポートされていない場合は、代わりに &lt;code&gt;NotImplementedError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="7f1ed78d2b32bd0027128c9f929fd17e9de09f7d" translate="yes" xml:space="preserve">
          <source>Deletes the header with the given name. Fails silently if the header doesn&amp;rsquo;t exist. Case-insensitive.</source>
          <target state="translated">指定された名前のヘッダーを削除します。ヘッダーが存在しない場合、警告なしで失敗します。大文字小文字を区別しません。</target>
        </trans-unit>
        <trans-unit id="a1594b31e9ff392f6f6d666c77d75e3fb488565f" translate="yes" xml:space="preserve">
          <source>Deletes the model from the project history and its table from the database.</source>
          <target state="translated">プロジェクト履歴からモデルを削除し、データベースからそのテーブルを削除します。</target>
        </trans-unit>
        <trans-unit id="1ac01d105d129556ae01eb77a50fb9547ad78df5" translate="yes" xml:space="preserve">
          <source>Deletes the test cookie. Use this to clean up after yourself.</source>
          <target state="translated">テストクッキーを削除します。これを使って自分の後始末をしましょう。</target>
        </trans-unit>
        <trans-unit id="370ba4d4ccb5669c3bbfcffd8f3bf6a90ba76614" translate="yes" xml:space="preserve">
          <source>Deleting all the migration files it replaces.</source>
          <target state="translated">それが置き換えるすべての移行ファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="07b4f49a22885d3ea1cde052877cec8632b72e75" translate="yes" xml:space="preserve">
          <source>Deleting objects</source>
          <target state="translated">オブジェクトの削除</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">Dependencies</target>
        </trans-unit>
        <trans-unit id="0756bee6cb3c67237cd5904539b455daa0fbd838" translate="yes" xml:space="preserve">
          <source>Dependencies during serialization</source>
          <target state="translated">シリアライズ時の依存関係</target>
        </trans-unit>
        <trans-unit id="227b8e0b3f5490d45d847363f7a1e60e029a34d7" translate="yes" xml:space="preserve">
          <source>Depending on the database backend, query results will either be loaded all at once or streamed from the database using server-side cursors.</source>
          <target state="translated">データベースのバックエンドに応じて、クエリの結果は一度にすべて読み込まれるか、サーバーサイドのカーソルを使ってデータベースからストリーム配信されます。</target>
        </trans-unit>
        <trans-unit id="ef38ae8e357477ed4cb87c1a76764d0de669c5b1" translate="yes" xml:space="preserve">
          <source>Depending on the value of &lt;code&gt;raise_exception&lt;/code&gt;, the method either raises a &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt; exception or redirects the user to the &lt;code&gt;login_url&lt;/code&gt;, optionally including the &lt;code&gt;redirect_field_name&lt;/code&gt; if it is set.</source>
          <target state="translated">&lt;code&gt;raise_exception&lt;/code&gt; の値に応じて、メソッドは&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; &lt;/a&gt;例外を発生させるか、ユーザーを &lt;code&gt;login_url&lt;/code&gt; にリダイレクトします（オプションで、 &lt;code&gt;redirect_field_name&lt;/code&gt; が設定されている場合はそれを含めます）。</target>
        </trans-unit>
        <trans-unit id="60c1150c2805016d76822ae245cecceeeef0032b" translate="yes" xml:space="preserve">
          <source>Depending on your configuration, this section describes several methods to configure a database user with sufficient privileges to run tests for GeoDjango applications on PostgreSQL. If your &lt;a href=&quot;install/postgis#spatialdb-template&quot;&gt;spatial database template&lt;/a&gt; was created like in the instructions, then your testing database user only needs to have the ability to create databases. In other configurations, you may be required to use a database superuser.</source>
          <target state="translated">設定に応じて、このセクションでは、PostgreSQLでGeoDjangoアプリケーションのテストを実行するための十分な権限を持つデータベースユーザーを設定するいくつかの方法について説明します。あなたの場合は&lt;a href=&quot;install/postgis#spatialdb-template&quot;&gt;空間データベーステンプレートが&lt;/a&gt;指示のように作成された後、あなたのテストのデータベースユーザは、データベースのみを作成する能力を持っている必要があります。他の構成では、データベースのスーパーユーザーを使用する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="006f907d3e808549c8d8bac532841c8337bae68a" translate="yes" xml:space="preserve">
          <source>Depending on your model, you may find that it is not possible to deserialize a model that only serializes a subset of its fields. If a serialized object doesn&amp;rsquo;t specify all the fields that are required by a model, the deserializer will not be able to save deserialized instances.</source>
          <target state="translated">モデルによっては、フィールドのサブセットのみをシリアル化するモデルを逆シリアル化できない場合があります。シリアル化されたオブジェクトがモデルに必要なすべてのフィールドを指定しない場合、デシリアライザーはデシリアライズされたインスタンスを保存できません。</target>
        </trans-unit>
        <trans-unit id="413957e90571532ac1c624be02c25d591ec2b89e" translate="yes" xml:space="preserve">
          <source>Deploying Django</source>
          <target state="translated">Django のデプロイ</target>
        </trans-unit>
        <trans-unit id="a15cb7c7108644ee69a857a2f02cca0101f265ca" translate="yes" xml:space="preserve">
          <source>Deploying Django with &lt;a href=&quot;https://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt; and &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/&quot;&gt;mod_wsgi&lt;/a&gt; is a tried and tested way to get Django into production.</source>
          <target state="translated">&lt;a href=&quot;https://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt;と&lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/&quot;&gt;mod_wsgiを使用して&lt;/a&gt; Djangoをデプロイすることは、Djangoを本番環境に導入するための実証済みの方法です。</target>
        </trans-unit>
        <trans-unit id="d9aa87915e9b45d601acab839be398e8cfb40442" translate="yes" xml:space="preserve">
          <source>Deploying GeoDjango</source>
          <target state="translated">GeoDjango のデプロイ</target>
        </trans-unit>
        <trans-unit id="08cbd80292a13ad260a236d49d0db9eb513d41d6" translate="yes" xml:space="preserve">
          <source>Deploying static files</source>
          <target state="translated">静的ファイルの配置</target>
        </trans-unit>
        <trans-unit id="327a55f82dc6818877a68e37b722bb7f2360b633" translate="yes" xml:space="preserve">
          <source>Deployment</source>
          <target state="translated">Deployment</target>
        </trans-unit>
        <trans-unit id="07a8a810780edcfa088e374aa8f85e0fe565c490" translate="yes" xml:space="preserve">
          <source>Deployment checklist</source>
          <target state="translated">展開チェックリスト</target>
        </trans-unit>
        <trans-unit id="ccb88881694eb75c92deb84b666d7b360400012d" translate="yes" xml:space="preserve">
          <source>Deprecated since version 2.2.</source>
          <target state="translated">バージョン 2.2 以降では非推奨。</target>
        </trans-unit>
        <trans-unit id="1819ca26348a5e255349590ea7b3f0e5896650d6" translate="yes" xml:space="preserve">
          <source>Deprecated since version 2.2: &lt;code&gt;CachedStaticFilesStorage&lt;/code&gt; is deprecated as it has some intractable problems, some of which are outlined below. Use &lt;a href=&quot;#django.contrib.staticfiles.storage.ManifestStaticFilesStorage&quot;&gt;&lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt;&lt;/a&gt; or a third-party cloud storage instead.</source>
          <target state="translated">バージョン2.2以降で非推奨： &lt;code&gt;CachedStaticFilesStorage&lt;/code&gt; にはいくつかの扱いにくい問題があるため、非推奨になりました。代わりに&lt;a href=&quot;#django.contrib.staticfiles.storage.ManifestStaticFilesStorage&quot;&gt; &lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt; &lt;/a&gt;またはサードパーティのクラウドストレージを使用してください。</target>
        </trans-unit>
        <trans-unit id="89a8448d6c03ae2bb6b51520abb2900768bfcaa1" translate="yes" xml:space="preserve">
          <source>Deprecated since version 2.2: Starting in Django 3.1, the ordering from a model&amp;rsquo;s &lt;code&gt;Meta.ordering&lt;/code&gt; won&amp;rsquo;t be used in &lt;code&gt;GROUP BY&lt;/code&gt; queries, such as &lt;code&gt;.annotate().values()&lt;/code&gt;. Since Django 2.2, these queries issue a deprecation warning indicating to add an explicit &lt;code&gt;order_by()&lt;/code&gt; to the queryset to silence the warning.</source>
          <target state="translated">バージョン2.2で非推奨：Django 3.1以降、モデルの &lt;code&gt;Meta.ordering&lt;/code&gt; からの順序付けは、 &lt;code&gt;.annotate().values()&lt;/code&gt; などの &lt;code&gt;GROUP BY&lt;/code&gt; クエリでは使用されません。Django 2.2以降、これらのクエリは非推奨の警告を発行し、明示的な &lt;code&gt;order_by()&lt;/code&gt; をクエリセットに追加して警告を止めます。</target>
        </trans-unit>
        <trans-unit id="82f988873f549a8b09c3297a9c1789a82002ad8d" translate="yes" xml:space="preserve">
          <source>Deprecated since version 2.2: This setting is deprecated. Starting with Django 3.1, files read from disk must be UTF-8 encoded.</source>
          <target state="translated">バージョン 2.2 以降では非推奨です。この設定は非推奨です。Django 3.1 以降、ディスクから読み込んだファイルは UTF-8 エンコードされていなければなりません。</target>
        </trans-unit>
        <trans-unit id="83e401ea3682d4526fff26e5de95f44574aec9b2" translate="yes" xml:space="preserve">
          <source>Deprecated since version 2.2: Use &lt;a href=&quot;#django.contrib.postgres.fields.DecimalRangeField&quot;&gt;&lt;code&gt;DecimalRangeField&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">バージョン2.2以降非推奨：代わりに&lt;a href=&quot;#django.contrib.postgres.fields.DecimalRangeField&quot;&gt; &lt;code&gt;DecimalRangeField&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="046c9bcc3b96be6453ad22650a90d89c8a3bce5b" translate="yes" xml:space="preserve">
          <source>Deprecated since version 2.2: Use &lt;a href=&quot;#django.contrib.postgres.forms.DecimalRangeField&quot;&gt;&lt;code&gt;DecimalRangeField&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">バージョン2.2以降非推奨：代わりに&lt;a href=&quot;#django.contrib.postgres.forms.DecimalRangeField&quot;&gt; &lt;code&gt;DecimalRangeField&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="a6f2cfc41bbc54ea294028076b80cc47a7669c50" translate="yes" xml:space="preserve">
          <source>Deprecated since version 2.2: Use &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timezone&quot;&gt;&lt;code&gt;datetime.timezone&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">バージョン2.2で廃止：代わりに&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timezone&quot;&gt; &lt;code&gt;datetime.timezone&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="c45c3909a5319dc04f8fdca5b6dee1df0a4c669b" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.0.</source>
          <target state="translated">バージョン3.0から非推奨。</target>
        </trans-unit>
        <trans-unit id="e4784b1574a4b4194354374954866f9c4d232f98" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.0: The language won&amp;rsquo;t be stored in the session in Django 4.0. Use the &lt;a href=&quot;settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt;&lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt;&lt;/a&gt; cookie instead.</source>
          <target state="translated">バージョン3.0以降非推奨：言語はDjango 4.0のセッションに保存されません。代わりに&lt;a href=&quot;settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt; &lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt; &lt;/a&gt; Cookieを使用してください。</target>
        </trans-unit>
        <trans-unit id="73b938448f171e0bd9989924ee3f01f1b39a7d8b" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.1.</source>
          <target state="translated">バージョン3.1から非推奨。</target>
        </trans-unit>
        <trans-unit id="620f6a9206c607ee63f059d101483bbf3e16d870" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.1: &lt;code&gt;NullBooleanField&lt;/code&gt; is deprecated in favor of &lt;code&gt;BooleanField(null=True)&lt;/code&gt;.</source>
          <target state="translated">バージョン3.1以降非推奨： &lt;code&gt;NullBooleanField&lt;/code&gt; は非推奨になり、 &lt;code&gt;BooleanField(null=True)&lt;/code&gt; が優先されます。</target>
        </trans-unit>
        <trans-unit id="0758464b2d3c5ab2f2e9351af086b4f9ab9db1b1" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.1: Alias of &lt;a href=&quot;#django.urls.re_path&quot;&gt;&lt;code&gt;django.urls.re_path()&lt;/code&gt;&lt;/a&gt; for backwards compatibility.</source>
          <target state="translated">バージョン3.1以降で非推奨：下位互換性のための&lt;a href=&quot;#django.urls.re_path&quot;&gt; &lt;code&gt;django.urls.re_path()&lt;/code&gt; の&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="ca334ac2d98934b62b5f65cfcae65aaeaa8afcbe" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.1: The &lt;code&gt;list&lt;/code&gt; message is deprecated, use &lt;code&gt;invalid_list&lt;/code&gt; instead.</source>
          <target state="translated">バージョン3.1以降非推奨： &lt;code&gt;list&lt;/code&gt; メッセージは非推奨です。代わりに &lt;code&gt;invalid_list&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="f3bdb2bc13826a0cb671b63dcc1d5fc92208931c" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.1: This setting is deprecated. Use &lt;a href=&quot;#std:setting-PASSWORD_RESET_TIMEOUT&quot;&gt;&lt;code&gt;PASSWORD_RESET_TIMEOUT&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">バージョン3.1以降非推奨：この設定は非推奨です。代わりに&lt;a href=&quot;#std:setting-PASSWORD_RESET_TIMEOUT&quot;&gt; &lt;code&gt;PASSWORD_RESET_TIMEOUT&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="745d22187de17ceba9460c862f4d221b59d73341" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.1: This transitional setting is deprecated. Support for it and tokens, cookies, sessions, and signatures that use SHA-1 hashing algorithm will be removed in Django 4.0.</source>
          <target state="translated">バージョン 3.1 から非推奨:この移行設定は非推奨です。この設定と、SHA-1 ハッシュアルゴリズムを使用するトークン、クッキー、セッション、署名のサポートは Django 4.0 で削除されます。</target>
        </trans-unit>
        <trans-unit id="679426ec74b1ce49b598de05705986f176d243f8" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.1: Use &lt;a href=&quot;../../forms/fields#django.forms.JSONField&quot;&gt;&lt;code&gt;django.forms.JSONField&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">バージョン3.1以降非推奨：代わりに&lt;a href=&quot;../../forms/fields#django.forms.JSONField&quot;&gt; &lt;code&gt;django.forms.JSONField&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="53ec0eb939fe4c9fe1c96484b4271004f800e0c7" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.1: Use &lt;a href=&quot;../../models/fields#django.db.models.JSONField&quot;&gt;&lt;code&gt;django.db.models.JSONField&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">バージョン3.1以降非推奨：代わりに&lt;a href=&quot;../../models/fields#django.db.models.JSONField&quot;&gt; &lt;code&gt;django.db.models.JSONField&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="b2ecd69ea4799cc300c46da3c7328bba920fed52" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.1: Using non-boolean values as the right-hand side is deprecated, use &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; instead. In Django 4.0, the exception will be raised.</source>
          <target state="translated">バージョン3.1以降の非推奨：右側が非推奨として非ブール値を使用する場合は、代わりに &lt;code&gt;True&lt;/code&gt; または &lt;code&gt;False&lt;/code&gt; を使用してください。Django 4.0では、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="b2f45e461c8bf945be0760b5ed79bb1e866376da" translate="yes" xml:space="preserve">
          <source>Deserialization of natural keys</source>
          <target state="translated">自然鍵の非シリアライズ</target>
        </trans-unit>
        <trans-unit id="50cc36514c07a32077b448f0ed60b3b5a77a8942" translate="yes" xml:space="preserve">
          <source>Deserialization of objects with no primary key will always check whether the model&amp;rsquo;s manager has a &lt;code&gt;get_by_natural_key()&lt;/code&gt; method and if so, use it to populate the deserialized object&amp;rsquo;s primary key.</source>
          <target state="translated">主キーのないオブジェクトの逆シリアル化は、モデルのマネージャーに &lt;code&gt;get_by_natural_key()&lt;/code&gt; メソッドがあるかどうかを常にチェックし、そうである場合は、それを使用して、逆シリアル化されたオブジェクトの主キーを設定します。</target>
        </trans-unit>
        <trans-unit id="478bc2e2f852272b7c7b9a455acaf658c8c1d19c" translate="yes" xml:space="preserve">
          <source>Deserializing data</source>
          <target state="translated">データのデシリアライズ</target>
        </trans-unit>
        <trans-unit id="64257e587c100a59a84f78b254064e0a88fb19af" translate="yes" xml:space="preserve">
          <source>Deserializing data is very similar to serializing it:</source>
          <target state="translated">データをデシリアライズすることは、データをシリアライズすることと非常に似ています。</target>
        </trans-unit>
        <trans-unit id="6b4b63f12160f43e4c02da1ba348f57a26675a14" translate="yes" xml:space="preserve">
          <source>Design your URLs</source>
          <target state="translated">URLをデザインする</target>
        </trans-unit>
        <trans-unit id="7d8339aeb556f83e5f4594300872f978448af574" translate="yes" xml:space="preserve">
          <source>Design your model</source>
          <target state="translated">モデルを設計する</target>
        </trans-unit>
        <trans-unit id="e02c99bd448789b60cee12279d2b894d92ac4a57" translate="yes" xml:space="preserve">
          <source>Design your templates</source>
          <target state="translated">テンプレートのデザイン</target>
        </trans-unit>
        <trans-unit id="591686024aaf35e01a1dbc13b21cc0edf4850a10" translate="yes" xml:space="preserve">
          <source>Designate and bind a counter value with the name &lt;code&gt;count&lt;/code&gt;. This value will be the one used to select the right plural form.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; という名前でカウンター値を指定してバインドします。この値は、正しい複数形を選択するために使用される値になります。</target>
        </trans-unit>
        <trans-unit id="69d154a76eafeb587cfe4bb3a23c2e081508e07f" translate="yes" xml:space="preserve">
          <source>Designates the name of the variable to use in the context.</source>
          <target state="translated">コンテキストで使用する変数名を指定します。</target>
        </trans-unit>
        <trans-unit id="ab8d9eb0f20787402e221892d46074396aca8d81" translate="yes" xml:space="preserve">
          <source>Designating the CSRF cookie as &lt;code&gt;HttpOnly&lt;/code&gt; doesn&amp;rsquo;t offer any practical protection because CSRF is only to protect against cross-domain attacks. If an attacker can read the cookie via JavaScript, they&amp;rsquo;re already on the same domain as far as the browser knows, so they can do anything they like anyway. (XSS is a much bigger hole than CSRF.)</source>
          <target state="translated">CSRFはクロスドメイン攻撃からの保護のみを目的としているため、CSRF Coo​​kieを &lt;code&gt;HttpOnly&lt;/code&gt; として指定しても、実用的な保護は提供されません。攻撃者がJavaScriptを介してCookieを読み取ることができる場合、ブラウザが知る限り、同じドメイン上にいるため、とにかく好きなことを何でもできます。（XSSはCSRFよりもはるかに大きな穴です。）</target>
        </trans-unit>
        <trans-unit id="51a2301aee9b8e7921830babb9d9357f6fc460b4" translate="yes" xml:space="preserve">
          <source>Designating the settings</source>
          <target state="translated">設定の指定</target>
        </trans-unit>
        <trans-unit id="79f946cb4a7caf05f21d409a395a181b2bc733e2" translate="yes" xml:space="preserve">
          <source>Destroying the test databases.</source>
          <target state="translated">テストデータベースを破棄します。</target>
        </trans-unit>
        <trans-unit id="04d44797e579abbfd03ef9b185b8cb262e441097" translate="yes" xml:space="preserve">
          <source>Destroys the database whose name is the value of &lt;a href=&quot;../../ref/settings#std:setting-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;, and sets &lt;a href=&quot;../../ref/settings#std:setting-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt; to the value of &lt;code&gt;old_database_name&lt;/code&gt;.</source>
          <target state="translated">名前の値でデータベース破壊&lt;a href=&quot;../../ref/settings#std:setting-NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt;における&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;、と設定&lt;a href=&quot;../../ref/settings#std:setting-NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt;の値に &lt;code&gt;old_database_name&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="6be858835915b77e190b2b50c375eef501569084" translate="yes" xml:space="preserve">
          <source>Destroys the test databases, restoring pre-test conditions by calling &lt;a href=&quot;#django.test.utils.teardown_databases&quot;&gt;&lt;code&gt;teardown_databases()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テストデータベースを破棄し、&lt;a href=&quot;#django.test.utils.teardown_databases&quot;&gt; &lt;code&gt;teardown_databases()&lt;/code&gt; を&lt;/a&gt;呼び出してテスト前の状態を復元します。</target>
        </trans-unit>
        <trans-unit id="53db1768fa53b64edff3158d6a9ccf0b67d770d5" translate="yes" xml:space="preserve">
          <source>Destroys the test databases, restoring pre-test conditions.</source>
          <target state="translated">テストデータベースを破棄し、テスト前の状態を復元します。</target>
        </trans-unit>
        <trans-unit id="446ba80ce4a3f48778fd53c394affa5a7dca0984" translate="yes" xml:space="preserve">
          <source>Detail Views</source>
          <target state="translated">詳細ビュー</target>
        </trans-unit>
        <trans-unit id="b174b91b196c8dee411e88ead1d4fd2bf0f64bb4" translate="yes" xml:space="preserve">
          <source>Detailed form API reference. For introductory material, see the &lt;a href=&quot;../../topics/forms/index&quot;&gt;Working with forms&lt;/a&gt; topic guide.</source>
          <target state="translated">詳細なフォームAPIリファレンス。入門資料については、トピック「&lt;a href=&quot;../../topics/forms/index&quot;&gt;フォームの操作&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="093115f44b6adadaff855fd36c0a42b9c46d43a4" translate="yes" xml:space="preserve">
          <source>Details for each of the requirements and installation instructions are provided in the sections below. In addition, platform-specific instructions are available for:</source>
          <target state="translated">各要件の詳細とインストール手順は、以下のセクションに記載されています。さらに、プラットフォーム固有の説明書も用意されています。</target>
        </trans-unit>
        <trans-unit id="1abef72fe7e08f6c8eca5e11ac9430e28fc7e78b" translate="yes" xml:space="preserve">
          <source>Determine if an object list will be returned as part of the context. Returns &lt;a href=&quot;#django.views.generic.dates.YearArchiveView.make_object_list&quot;&gt;&lt;code&gt;make_object_list&lt;/code&gt;&lt;/a&gt; by default.</source>
          <target state="translated">オブジェクトリストがコンテキストの一部として返されるかどうかを決定します。デフォルトで&lt;a href=&quot;#django.views.generic.dates.YearArchiveView.make_object_list&quot;&gt; &lt;code&gt;make_object_list&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="01d5652e9bda540eecf165e479876a78c34cab17" translate="yes" xml:space="preserve">
          <source>Determine if the migration operation is allowed to run on the database with alias &lt;code&gt;db&lt;/code&gt;. Return &lt;code&gt;True&lt;/code&gt; if the operation should run, &lt;code&gt;False&lt;/code&gt; if it shouldn&amp;rsquo;t run, or &lt;code&gt;None&lt;/code&gt; if the router has no opinion.</source>
          <target state="translated">移行操作が、エイリアス &lt;code&gt;db&lt;/code&gt; を使用してデータベースで実行できるかどうかを確認します。操作を実行する必要がある場合は &lt;code&gt;True&lt;/code&gt; を返し、実行しない場合は &lt;code&gt;False&lt;/code&gt; を返します。ルーターに意見がない場合は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="22e729836bf3f38b09112ebcbc0ef5c2579463c4" translate="yes" xml:space="preserve">
          <source>Determine if the object instance is of a protected type.</source>
          <target state="translated">オブジェクトのインスタンスが保護された型であるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="388bf854b4079b4253808464aaa168b2dec2fe6f" translate="yes" xml:space="preserve">
          <source>Determine the &lt;a href=&quot;../forms/api#django.forms.Form.prefix&quot;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/a&gt; for the generated form. Returns &lt;a href=&quot;#django.views.generic.edit.FormMixin.prefix&quot;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/a&gt; by default.</source>
          <target state="translated">生成されたフォームの&lt;a href=&quot;../forms/api#django.forms.Form.prefix&quot;&gt; &lt;code&gt;prefix&lt;/code&gt; &lt;/a&gt;を決定します。デフォルトで&lt;a href=&quot;#django.views.generic.edit.FormMixin.prefix&quot;&gt; &lt;code&gt;prefix&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="cb21a02f011f19765a1dcdc9f24a28a39dd55288" translate="yes" xml:space="preserve">
          <source>Determine the URL to redirect to when the form is successfully validated. Returns &lt;a href=&quot;#django.views.generic.edit.FormMixin.success_url&quot;&gt;&lt;code&gt;success_url&lt;/code&gt;&lt;/a&gt; by default.</source>
          <target state="translated">フォームが正常に検証されたときにリダイレクトするURLを決定します。デフォルトでは&lt;a href=&quot;#django.views.generic.edit.FormMixin.success_url&quot;&gt; &lt;code&gt;success_url&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="ba7eec079c73201f8d0ab03bbf7a001a164cbd11" translate="yes" xml:space="preserve">
          <source>Determine the URL to redirect to when the form is successfully validated. Returns &lt;a href=&quot;#django.views.generic.edit.ModelFormMixin.success_url&quot;&gt;&lt;code&gt;django.views.generic.edit.ModelFormMixin.success_url&lt;/code&gt;&lt;/a&gt; if it is provided; otherwise, attempts to use the &lt;code&gt;get_absolute_url()&lt;/code&gt; of the object.</source>
          <target state="translated">フォームが正常に検証されたときにリダイレクトするURLを決定します。&lt;a href=&quot;#django.views.generic.edit.ModelFormMixin.success_url&quot;&gt; &lt;code&gt;django.views.generic.edit.ModelFormMixin.success_url&lt;/code&gt; &lt;/a&gt;が提供されている場合はそれを返します。それ以外の場合は、オブジェクトの &lt;code&gt;get_absolute_url()&lt;/code&gt; を使用しようとします。</target>
        </trans-unit>
        <trans-unit id="2661e24bb16227392ec85b0c713aaab93b983e7c" translate="yes" xml:space="preserve">
          <source>Determine whether to include &amp;ldquo;future&amp;rdquo; objects on this page, where &amp;ldquo;future&amp;rdquo; means objects in which the field specified in &lt;code&gt;date_field&lt;/code&gt; is greater than the current date/time. Returns &lt;a href=&quot;#django.views.generic.dates.DateMixin.allow_future&quot;&gt;&lt;code&gt;allow_future&lt;/code&gt;&lt;/a&gt; by default.</source>
          <target state="translated">このページに「将来」オブジェクトを含めるかどうかを決定します。「将来」とは、 &lt;code&gt;date_field&lt;/code&gt; で指定されたフィールドが現在の日付/時刻より大きいオブジェクトを意味します。デフォルトでは、&lt;a href=&quot;#django.views.generic.dates.DateMixin.allow_future&quot;&gt; &lt;code&gt;allow_future&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="8b59033927e55b648a5b7b27625c8568e24a2cb3" translate="yes" xml:space="preserve">
          <source>Determines if Django will use the pre-1.6 &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;django.db.models.Model.save()&lt;/code&gt;&lt;/a&gt; algorithm. The old algorithm uses &lt;code&gt;SELECT&lt;/code&gt; to determine if there is an existing row to be updated. The new algorithm tries an &lt;code&gt;UPDATE&lt;/code&gt; directly. In some rare cases the &lt;code&gt;UPDATE&lt;/code&gt; of an existing row isn&amp;rsquo;t visible to Django. An example is the PostgreSQL &lt;code&gt;ON UPDATE&lt;/code&gt; trigger which returns &lt;code&gt;NULL&lt;/code&gt;. In such cases the new algorithm will end up doing an &lt;code&gt;INSERT&lt;/code&gt; even when a row exists in the database.</source>
          <target state="translated">Djangoが1.6より前の&lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;django.db.models.Model.save()&lt;/code&gt; &lt;/a&gt;アルゴリズムを使用するかどうかを決定します。古いアルゴリズムは &lt;code&gt;SELECT&lt;/code&gt; を使用して、更新する既存の行があるかどうかを判断します。新しいアルゴリズムは、直接 &lt;code&gt;UPDATE&lt;/code&gt; を試みます。まれに、既存の行の &lt;code&gt;UPDATE&lt;/code&gt; がDjangoに表示されない場合があります。例は、 &lt;code&gt;NULL&lt;/code&gt; を返すPostgreSQL &lt;code&gt;ON UPDATE&lt;/code&gt; トリガーです。そのような場合、データベースに行が存在する場合でも、新しいアルゴリズムは最終的に &lt;code&gt;INSERT&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="a4be1c1a7610016eca8366d57bec0ae0d1ec0996" translate="yes" xml:space="preserve">
          <source>Determines the &lt;a href=&quot;../../request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; for the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.add_view&quot;&gt;&lt;code&gt;add_view()&lt;/code&gt;&lt;/a&gt; stage.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.add_view&quot;&gt; &lt;code&gt;add_view()&lt;/code&gt; &lt;/a&gt;ステージの&lt;a href=&quot;../../request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;を決定します。</target>
        </trans-unit>
        <trans-unit id="b1ef716e269d001abfb666cce096f8a533bbfb1d" translate="yes" xml:space="preserve">
          <source>Determines the &lt;a href=&quot;../../request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; for the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.change_view&quot;&gt;&lt;code&gt;change_view()&lt;/code&gt;&lt;/a&gt; stage.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.change_view&quot;&gt; &lt;code&gt;change_view()&lt;/code&gt; &lt;/a&gt;ステージの&lt;a href=&quot;../../request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;を決定します。</target>
        </trans-unit>
        <trans-unit id="0b13c14115d0f81fa450e8e8bc54f4d8e084bb60" translate="yes" xml:space="preserve">
          <source>Determines the &lt;a href=&quot;../../request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; for the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.delete_view&quot;&gt;&lt;code&gt;delete_view()&lt;/code&gt;&lt;/a&gt; stage.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.delete_view&quot;&gt; &lt;code&gt;delete_view()&lt;/code&gt; &lt;/a&gt;ステージの&lt;a href=&quot;../../request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;を決定します。</target>
        </trans-unit>
        <trans-unit id="7c48e4b20e6ad398a94ae7b77c7217c62be6e4e0" translate="yes" xml:space="preserve">
          <source>Determines whether the widget will have a value filled in when the form is re-displayed after a validation error (default is &lt;code&gt;False&lt;/code&gt;).</source>
          <target state="translated">検証エラー後にフォームが再表示されたときにウィジェットに値が入力されるかどうかを決定します（デフォルトは &lt;code&gt;False&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="53e970d11d6e2ac30780c87bd7920a96575d6890" translate="yes" xml:space="preserve">
          <source>Determining the version</source>
          <target state="translated">バージョンの決定</target>
        </trans-unit>
        <trans-unit id="b22354d57a68ea2f6eca477c2b86c2289164e577" translate="yes" xml:space="preserve">
          <source>Development server won&amp;rsquo;t automatically restart</source>
          <target state="translated">開発サーバーが自動的に再起動しない</target>
        </trans-unit>
        <trans-unit id="91925d5940f655cf778d7912b76a420682ea624a" translate="yes" xml:space="preserve">
          <source>Development-related messages that will be ignored (or removed) in a production deployment</source>
          <target state="translated">本番環境で無視(または削除)される開発関連のメッセージ</target>
        </trans-unit>
        <trans-unit id="f38672bc8b938a4e93ee299958b7ba0c35d3986a" translate="yes" xml:space="preserve">
          <source>Dictionary lookup</source>
          <target state="translated">辞書検索</target>
        </trans-unit>
        <trans-unit id="43df699c2dc54f1d56387b5ce7f61b6bd9d86072" translate="yes" xml:space="preserve">
          <source>Dictionary lookup, attribute lookup and list-index lookups are implemented with a dot notation:</source>
          <target state="translated">辞書検索、属性検索、リストインデックス検索はドット表記で実装されています。</target>
        </trans-unit>
        <trans-unit id="d0033fd61ed0d9dd4f31e74ed940c65aac673ddb" translate="yes" xml:space="preserve">
          <source>Dictionary lookup. Example: &lt;code&gt;foo[&quot;bar&quot;]&lt;/code&gt;</source>
          <target state="translated">辞書検索。例： &lt;code&gt;foo[&quot;bar&quot;]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9844c496e70778b4622dc4b9d14446cc4dbb1599" translate="yes" xml:space="preserve">
          <source>Dictionary params are not supported with the SQLite backend; with this backend, you must pass parameters as a list.</source>
          <target state="translated">SQLite バックエンドでは、辞書のパラメータはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="c3797745024f9e71cc1a9a425669a1580908dc77" translate="yes" xml:space="preserve">
          <source>Difference to Greenwich time in hours.</source>
          <target state="translated">グリニッジ時間との時間差</target>
        </trans-unit>
        <trans-unit id="e3b87302cf4d6e044b838bbb64f0713d214ce5b8" translate="yes" xml:space="preserve">
          <source>Differences between proxy inheritance and unmanaged models</source>
          <target state="translated">プロキシ継承とアンマネージドモデルの違い</target>
        </trans-unit>
        <trans-unit id="6c4b8d6a8ef3fe3bc2de972c1f7b28cf248b5e3b" translate="yes" xml:space="preserve">
          <source>Different error?</source>
          <target state="translated">誤差が違う?</target>
        </trans-unit>
        <trans-unit id="a8bda41622602a8bb8d9004db7ae5fd925054c93" translate="yes" xml:space="preserve">
          <source>Different signals use different objects as their senders; you&amp;rsquo;ll need to consult the &lt;a href=&quot;../ref/signals&quot;&gt;built-in signal documentation&lt;/a&gt; for details of each particular signal.</source>
          <target state="translated">信号によって送信者として異なるオブジェクトが使用されます。特定の各信号の詳細については、&lt;a href=&quot;../ref/signals&quot;&gt;組み込みの信号のドキュメント&lt;/a&gt;を参照する必要があります。</target>
        </trans-unit>
        <trans-unit id="111f471f1c33c0211ebb481f1e0edd25317cdb62" translate="yes" xml:space="preserve">
          <source>Directories where the engine should look for template source files, in search order.</source>
          <target state="translated">エンジンがテンプレートのソースファイルを探すべきディレクトリを、検索順に並べたものです。</target>
        </trans-unit>
        <trans-unit id="c5d039878b575ca44dfc5e5a32e4898482c71811" translate="yes" xml:space="preserve">
          <source>Disables breaking long message lines into several lines in language files.</source>
          <target state="translated">言語ファイル内の長いメッセージ行を数行に分割することを無効にします。</target>
        </trans-unit>
        <trans-unit id="8c4c48e3b0caf11a6881c64f4270867d437481bd" translate="yes" xml:space="preserve">
          <source>Disables colorized command output. Some commands format their output to be colorized. For example, errors will be printed to the console in red and SQL statements will be syntax highlighted.</source>
          <target state="translated">色付きのコマンド出力を無効にします。一部のコマンドでは、出力が色分けされるようにフォーマットされています。例えば、エラーは赤でコンソールに表示され、SQL文は構文が強調表示されます。</target>
        </trans-unit>
        <trans-unit id="94ad98f6ffe0f668a698112f505a4963aa948244" translate="yes" xml:space="preserve">
          <source>Disables reading the startup script for the &amp;ldquo;plain&amp;rdquo; Python interpreter. By default, the script pointed to by the &lt;a href=&quot;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP&quot; id=&quot;index-3&quot;&gt;&lt;code&gt;PYTHONSTARTUP&lt;/code&gt;&lt;/a&gt; environment variable or the &lt;code&gt;~/.pythonrc.py&lt;/code&gt; script is read.</source>
          <target state="translated">「プレーン」なPythonインタープリターの起動スクリプトの読み取りを無効にします。デフォルトでは、&lt;a href=&quot;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP&quot; id=&quot;index-3&quot;&gt; &lt;code&gt;PYTHONSTARTUP&lt;/code&gt; &lt;/a&gt;環境変数または &lt;code&gt;~/.pythonrc.py&lt;/code&gt; スクリプトが指すスクリプトが読み取られます。</target>
        </trans-unit>
        <trans-unit id="408ec5355afb0712ed6f6846008e5f99fb8509f6" translate="yes" xml:space="preserve">
          <source>Disables reading the startup script for the &amp;ldquo;plain&amp;rdquo; Python interpreter. By default, the script pointed to by the &lt;a href=&quot;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP&quot; id=&quot;index-5&quot;&gt;&lt;code&gt;PYTHONSTARTUP&lt;/code&gt;&lt;/a&gt; environment variable or the &lt;code&gt;~/.pythonrc.py&lt;/code&gt; script is read.</source>
          <target state="translated">「プレーンな」Pythonインタープリターの起動スクリプトの読み取りを無効にします。デフォルトでは、&lt;a href=&quot;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP&quot; id=&quot;index-5&quot;&gt; &lt;code&gt;PYTHONSTARTUP&lt;/code&gt; &lt;/a&gt;環境変数または &lt;code&gt;~/.pythonrc.py&lt;/code&gt; スクリプトが指すスクリプトが読み取られます。</target>
        </trans-unit>
        <trans-unit id="d8fe3baef7ceaf81ed4ba8126cca6ad496ff2a1c" translate="yes" xml:space="preserve">
          <source>Disables the auto-reloader. This means any Python code changes you make while the server is running will &lt;em&gt;not&lt;/em&gt; take effect if the particular Python modules have already been loaded into memory.</source>
          <target state="translated">自動リローダーを無効にします。つまり、特定のPythonモジュールがすでにメモリにロードされている場合、サーバーの実行中に行ったPythonコードの変更は有効になり&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="119d87d164f8509e18cd90153ddcef0ded127cfc" translate="yes" xml:space="preserve">
          <source>Disables the default values of &lt;code&gt;--ignore&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--ignore&lt;/code&gt; のデフォルト値を無効にします。</target>
        </trans-unit>
        <trans-unit id="30b5d718c75938c0bf50a198fabe9a1a029bf627" translate="yes" xml:space="preserve">
          <source>Disables the optimizer when generating a squashed migration. By default, Django will try to optimize the operations in your migrations to reduce the size of the resulting file. Use this option if this process is failing or creating incorrect migrations, though please also file a Django bug report about the behavior, as optimization is meant to be safe.</source>
          <target state="translated">Squashed マイグレーションを生成する際にオプティマイザーを無効にします。デフォルトでは、Django はマイグレーションの操作を最適化して結果ファイルのサイズを小さくしようとします。この処理が失敗したり、正しくないマイグレーションが生成されたりしている場合はこのオプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="76be908b3097056448c6afb2d3f6a1029436eed9" translate="yes" xml:space="preserve">
          <source>Disables use of threading in the development server. The server is multithreaded by default.</source>
          <target state="translated">開発サーバーでのスレッドの使用を無効にします。サーバーはデフォルトでマルチスレッド化されています。</target>
        </trans-unit>
        <trans-unit id="8109ad7dfc0adce0b7d2b65ea9ce4c7c416384d5" translate="yes" xml:space="preserve">
          <source>Disabling &lt;a href=&quot;../../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt; checking (&lt;code&gt;ALLOWED_HOSTS = ['*']&lt;/code&gt;) when running tests prevents the test client from raising a helpful error message if you follow a redirect to an external URL.</source>
          <target state="translated">テストの実行時に&lt;a href=&quot;../../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt; &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; &lt;/a&gt;チェックを無効にする（ &lt;code&gt;ALLOWED_HOSTS = ['*']&lt;/code&gt; ）と、外部URLへのリダイレクトをたどった場合に、テストクライアントが有用なエラーメッセージを表示できなくなります。</target>
        </trans-unit>
        <trans-unit id="cf0a3500a3e70ca3c8107e85111fa0f27b789623" translate="yes" xml:space="preserve">
          <source>Disabling a site-wide action</source>
          <target state="translated">サイト全体のアクションを無効にする</target>
        </trans-unit>
        <trans-unit id="01b3109d2eade90bafedda2cfe65286e77f85a48" translate="yes" xml:space="preserve">
          <source>Disabling actions</source>
          <target state="translated">無効化されたアクション</target>
        </trans-unit>
        <trans-unit id="41f61de92c6480125054cd67d0f0abf6dc281883" translate="yes" xml:space="preserve">
          <source>Disabling all actions for a particular &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">特定の&lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; の&lt;/a&gt;すべてのアクションを無効にする</target>
        </trans-unit>
        <trans-unit id="0e6b01a40e33bcee209f1d53259f20c9dc5c74c1" translate="yes" xml:space="preserve">
          <source>Disabling logging configuration</source>
          <target state="translated">ロギング設定を無効にする</target>
        </trans-unit>
        <trans-unit id="0a287a77a197e8830c01458852b5974562cdd67b" translate="yes" xml:space="preserve">
          <source>Discards output (&lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt;) for passing tests, in the same way as &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#cmdoption-unittest-b&quot;&gt;&lt;code&gt;unittest's --buffer option&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#cmdoption-unittest-b&quot;&gt; &lt;code&gt;unittest's --buffer option&lt;/code&gt; &lt;/a&gt;と同じ方法で、テストに合格するための出力（ &lt;code&gt;stdout&lt;/code&gt; および &lt;code&gt;stderr&lt;/code&gt; ）を破棄します。</target>
        </trans-unit>
        <trans-unit id="5d70aaeb26a4cc60e94ce0e783f960a0f6e2bd49" translate="yes" xml:space="preserve">
          <source>Disclosed security issues in Django</source>
          <target state="translated">Django のセキュリティ問題の公開</target>
        </trans-unit>
        <trans-unit id="f78c013c299e0eb98a81739068e3f16466796d25" translate="yes" xml:space="preserve">
          <source>Disconnecting signals</source>
          <target state="translated">信号の切断</target>
        </trans-unit>
        <trans-unit id="9d9057f485af326a5d2d2681d5b39c88016e6e56" translate="yes" xml:space="preserve">
          <source>Discovery of admin files</source>
          <target state="translated">管理者ファイルの発見</target>
        </trans-unit>
        <trans-unit id="64548175545ca9534d1f70065c5e34a655b9b895" translate="yes" xml:space="preserve">
          <source>Display list and detail pages for a single object. If we were creating an application to manage conferences then a &lt;code&gt;TalkListView&lt;/code&gt; and a &lt;code&gt;RegisteredUserListView&lt;/code&gt; would be examples of list views. A single talk page is an example of what we call a &amp;ldquo;detail&amp;rdquo; view.</source>
          <target state="translated">単一オブジェクトのリストおよび詳細ページを表示します。会議を管理するアプリケーションを作成している場合、 &lt;code&gt;TalkListView&lt;/code&gt; と &lt;code&gt;RegisteredUserListView&lt;/code&gt; がリストビューの例になります。シングルトークページは、「詳細」ビューと呼ばれるものの例です。</target>
        </trans-unit>
        <trans-unit id="13532d11832086bdc504ef1a4449c09be33bb4c6" translate="yes" xml:space="preserve">
          <source>Displaying &lt;code&gt;registration_required&lt;/code&gt; flatpages</source>
          <target state="translated">&lt;code&gt;registration_required&lt;/code&gt; フラットページの表示</target>
        </trans-unit>
        <trans-unit id="0828e2342731a2c8c00fa3c3c6f6066765220920" translate="yes" xml:space="preserve">
          <source>Displaying debug output</source>
          <target state="translated">デバッグ出力の表示</target>
        </trans-unit>
        <trans-unit id="660d88c4c1960c51658ce5f89ff619c9b594e2a0" translate="yes" xml:space="preserve">
          <source>Displaying messages</source>
          <target state="translated">メッセージの表示</target>
        </trans-unit>
        <trans-unit id="6706bfa4d9e668540ed3a956cd02ffdb83dd3182" translate="yes" xml:space="preserve">
          <source>Displays a full stack trace when a &lt;a href=&quot;../howto/custom-management-commands#django.core.management.CommandError&quot;&gt;&lt;code&gt;CommandError&lt;/code&gt;&lt;/a&gt; is raised. By default, &lt;code&gt;django-admin&lt;/code&gt; will show an error message when a &lt;code&gt;CommandError&lt;/code&gt; occurs and a full stack trace for any other exception.</source>
          <target state="translated">&lt;a href=&quot;../howto/custom-management-commands#django.core.management.CommandError&quot;&gt; &lt;code&gt;CommandError&lt;/code&gt; &lt;/a&gt;が発生したときに完全なスタックトレースを表示します。デフォルトでは、 &lt;code&gt;django-admin&lt;/code&gt; は &lt;code&gt;CommandError&lt;/code&gt; が発生するとエラーメッセージを表示し、その他の例外については完全なスタックトレースを表示します。</target>
        </trans-unit>
        <trans-unit id="a1dd9da7c2d33b59e5a821aa775ddb9b6372f6a7" translate="yes" xml:space="preserve">
          <source>Displays all settings, even if they have Django&amp;rsquo;s default value. Such settings are prefixed by &lt;code&gt;&quot;###&quot;&lt;/code&gt;.</source>
          <target state="translated">Djangoのデフォルト値がある場合でも、すべての設定を表示します。このような設定には、 &lt;code&gt;&quot;###&quot;&lt;/code&gt; という接頭辞が付きます。</target>
        </trans-unit>
        <trans-unit id="46aed19c1e75a0350399dbf07a914c1430160781" translate="yes" xml:space="preserve">
          <source>Displays differences between the current settings file and Django&amp;rsquo;s default settings (or another settings file specified by &lt;a href=&quot;#cmdoption-diffsettings-default&quot;&gt;&lt;code&gt;--default&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">現在の設定ファイルとDjangoのデフォルト設定（または&lt;a href=&quot;#cmdoption-diffsettings-default&quot;&gt; &lt;code&gt;--default&lt;/code&gt; で&lt;/a&gt;指定された別の設定ファイル）の違いを表示します。</target>
        </trans-unit>
        <trans-unit id="79f04353bc3ff08b5ce101f6d2f476cbf0bd2a88" translate="yes" xml:space="preserve">
          <source>Displays random &amp;ldquo;lorem ipsum&amp;rdquo; Latin text. This is useful for providing sample data in templates.</source>
          <target state="translated">ランダムな「lorem ipsum」ラテン語のテキストを表示します。これは、サンプルデータをテンプレートで提供する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="03ff6ac03c8de9c5a7773b3338ed56e12aa87de3" translate="yes" xml:space="preserve">
          <source>Displays text with line numbers.</source>
          <target state="translated">行番号付きのテキストを表示します。</target>
        </trans-unit>
        <trans-unit id="1d16dec23f731e5d1e758a2f2539539b83e3a742" translate="yes" xml:space="preserve">
          <source>Displays the current date and/or time, using a format according to the given string. Such string can contain format specifiers characters as described in the &lt;a href=&quot;#std:templatefilter-date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; filter section.</source>
          <target state="translated">指定された文字列に従った形式を使用して、現在の日付または時刻、あるいはその両方を表示します。このような文字列には、&lt;a href=&quot;#std:templatefilter-date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;フィルターのセクションで説明されているように、フォーマット指定文字を含めることができます。</target>
        </trans-unit>
        <trans-unit id="6f4ece970310a67279b44ecd2040fe97bb03157d" translate="yes" xml:space="preserve">
          <source>Distance Lookups</source>
          <target state="translated">距離ルックアップ</target>
        </trans-unit>
        <trans-unit id="ae5dac4724e3ed72abefcaa4736bd6cdd36b1c87" translate="yes" xml:space="preserve">
          <source>Distance Queries</source>
          <target state="translated">距離クエリ</target>
        </trans-unit>
        <trans-unit id="9d08ff2be156063b7efc06d2495433331d3f4df8" translate="yes" xml:space="preserve">
          <source>Distance calculations with spatial data is tricky because, unfortunately, the Earth is not flat. Some distance queries with fields in a geographic coordinate system may have to be expressed differently because of limitations in PostGIS. Please see the &lt;a href=&quot;model-api#selecting-an-srid&quot;&gt;Selecting an SRID&lt;/a&gt; section in the &lt;a href=&quot;model-api&quot;&gt;GeoDjango Model API&lt;/a&gt; documentation for more details.</source>
          <target state="translated">残念ながら、地球は平坦ではないため、空間データを使用した距離の計算は注意が必要です。地理座標系のフィールドを持ついくつかの距離クエリは、PostGISの制限のため、異なる方法で表現する必要がある場合があります。詳細については、&lt;a href=&quot;model-api&quot;&gt;GeoDjangoモデルAPI&lt;/a&gt;ドキュメントの&lt;a href=&quot;model-api#selecting-an-srid&quot;&gt;SRID&lt;/a&gt;の選択セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="80d0b6f734875ac5f9d39259dc012845b0166a2e" translate="yes" xml:space="preserve">
          <source>Distance lookups take a tuple parameter comprising:</source>
          <target state="translated">距離検索では、以下のタプルパラメータを使用します。</target>
        </trans-unit>
        <trans-unit id="8fbcb1b67a5a23af508da8a4e3f1074b2f375802" translate="yes" xml:space="preserve">
          <source>Distance lookups take the following form:</source>
          <target state="translated">距離のルックアップは以下の形式をとります。</target>
        </trans-unit>
        <trans-unit id="7ba91c36ad89f1909e854d9621a9e3c9c6f7aafb" translate="yes" xml:space="preserve">
          <source>Dive Into Python (a free online book for beginning Python developers) includes a great &lt;a href=&quot;https://www.diveinto.org/python3/unit-testing.html&quot;&gt;introduction to Unit Testing&lt;/a&gt;.</source>
          <target state="translated">Dive Into Python（Python開発者向けの無料のオンラインブック）には、&lt;a href=&quot;https://www.diveinto.org/python3/unit-testing.html&quot;&gt;ユニットテストの&lt;/a&gt;優れた紹介が含まれています。</target>
        </trans-unit>
        <trans-unit id="b6c95e2580609775eb2b7302ad50c369810daef6" translate="yes" xml:space="preserve">
          <source>Django</source>
          <target state="translated">Django</target>
        </trans-unit>
        <trans-unit id="769380707930d83173e396f9268d8f88027c9057" translate="yes" xml:space="preserve">
          <source>Django Component</source>
          <target state="translated">Django コンポーネント</target>
        </trans-unit>
        <trans-unit id="6e6a12b6fe49fcf385827a3d27282bad924d4423" translate="yes" xml:space="preserve">
          <source>Django Core Exceptions</source>
          <target state="translated">Django コアの例外</target>
        </trans-unit>
        <trans-unit id="acd826e3e3b0bb1449349f3c0aa7c94c3bba8813" translate="yes" xml:space="preserve">
          <source>Django Exceptions</source>
          <target state="translated">Django の例外</target>
        </trans-unit>
        <trans-unit id="f11cf5ae018b120dd1ff5dcd7c8d8b57af4a0d11" translate="yes" xml:space="preserve">
          <source>Django Packages provides a &lt;a href=&quot;https://djangopackages.org/grids/g/pdf/&quot;&gt;comparison of packages&lt;/a&gt; that help generate PDF files from Django.</source>
          <target state="translated">Djangoパッケージは、DjangoからPDFファイルを生成するのに役立つ&lt;a href=&quot;https://djangopackages.org/grids/g/pdf/&quot;&gt;パッケージの比較を提供&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="db22d948341a0750d49831166adb379a85ed90f0" translate="yes" xml:space="preserve">
          <source>Django Utils</source>
          <target state="translated">Django の利用法</target>
        </trans-unit>
        <trans-unit id="1ccb5b038648322f6fc9beacd7e9884ff6d89dd0" translate="yes" xml:space="preserve">
          <source>Django admin JavaScript makes use of the &lt;a href=&quot;https://jquery.com&quot;&gt;jQuery&lt;/a&gt; library.</source>
          <target state="translated">Django admin JavaScriptは&lt;a href=&quot;https://jquery.com&quot;&gt;jQuery&lt;/a&gt;ライブラリを利用します。</target>
        </trans-unit>
        <trans-unit id="f873f9003f9ebfa394e6c1a85701a9054d4169cf" translate="yes" xml:space="preserve">
          <source>Django adopts a &amp;ldquo;lazy&amp;rdquo; approach to decoding form data. The data in an &lt;code&gt;HttpRequest&lt;/code&gt; object is only decoded when you access it. In fact, most of the data is not decoded at all. Only the &lt;code&gt;HttpRequest.GET&lt;/code&gt; and &lt;code&gt;HttpRequest.POST&lt;/code&gt; data structures have any decoding applied to them. Those two fields will return their members as Unicode data. All other attributes and methods of &lt;code&gt;HttpRequest&lt;/code&gt; return data exactly as it was submitted by the client.</source>
          <target state="translated">Djangoはフォームデータのデコードに「遅延」アプローチを採用しています。 &lt;code&gt;HttpRequest&lt;/code&gt; オブジェクトのデータは、アクセスしたときにのみデコードされます。実際、ほとんどのデータはまったくデコードされません。 &lt;code&gt;HttpRequest.GET&lt;/code&gt; および &lt;code&gt;HttpRequest.POST&lt;/code&gt; データ構造のみにデコードが適用されます。これらの2つのフィールドは、メンバーをUnicodeデータとして返します。 &lt;code&gt;HttpRequest&lt;/code&gt; の他のすべての属性とメソッドは、クライアントから送信されたとおりにデータを返します。</target>
        </trans-unit>
        <trans-unit id="1bb62d87ed5423151028775a91e43a316062c5cb" translate="yes" xml:space="preserve">
          <source>Django aims to follow Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/tutorial/stdlib.html#tut-batteries-included&quot;&gt;&amp;ldquo;batteries included&amp;rdquo; philosophy&lt;/a&gt;. It ships with a variety of extra, optional tools that solve common Web-development problems.</source>
          <target state="translated">Djangoは、Pythonの&lt;a href=&quot;https://docs.python.org/3/tutorial/stdlib.html#tut-batteries-included&quot;&gt;「バッテリー同梱」の理念&lt;/a&gt;に従うことを目指しています。一般的なWeb開発の問題を解決するさまざまな追加のオプションツールが同梱されています。</target>
        </trans-unit>
        <trans-unit id="f9cb3ca4b1dc9576637c690fad5d84883768d106" translate="yes" xml:space="preserve">
          <source>Django allows you to override the default user model by providing a value for the &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; setting that references a custom model:</source>
          <target state="translated">Djangoでは、カスタムモデルを参照する&lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt;設定の値を指定することで、デフォルトのユーザーモデルを上書きできます。</target>
        </trans-unit>
        <trans-unit id="54ac4c610be5e232109a0da9588a63a316cb250b" translate="yes" xml:space="preserve">
          <source>Django also allows the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fully_qualified_domain_name&quot;&gt;fully qualified domain name (FQDN)&lt;/a&gt; of any entries. Some browsers include a trailing dot in the &lt;code&gt;Host&lt;/code&gt; header which Django strips when performing host validation.</source>
          <target state="translated">Djangoでは、すべてのエントリの&lt;a href=&quot;https://en.wikipedia.org/wiki/Fully_qualified_domain_name&quot;&gt;完全修飾ドメイン名（FQDN）&lt;/a&gt;も使用できます。一部のブラウザでは、ホストの検証時にDjangoが取り除く &lt;code&gt;Host&lt;/code&gt; ヘッダーに末尾のドットが含まれています。</target>
        </trans-unit>
        <trans-unit id="6704db362f4291b059782d27e0a05637c07ab79b" translate="yes" xml:space="preserve">
          <source>Django also comes with a lower-level feed-generating API. Use this if you want to generate feeds outside of a Web context, or in some other lower-level way.</source>
          <target state="translated">Django には低レベルのフィード生成 API もあります。Web コンテキストの外でフィードを生成したい場合や、その他の低レベルの方法でフィードを生成したい場合に使用してください。</target>
        </trans-unit>
        <trans-unit id="9521c4fe01b405b0001e29ed67a9c0a69fad4050" translate="yes" xml:space="preserve">
          <source>Django also creates API accessors for the &amp;ldquo;other&amp;rdquo; side of the relationship &amp;ndash; the link from the related model to the model that defines the relationship. For example, a &lt;code&gt;Blog&lt;/code&gt; object &lt;code&gt;b&lt;/code&gt; has access to a list of all related &lt;code&gt;Entry&lt;/code&gt; objects via the &lt;code&gt;entry_set&lt;/code&gt; attribute: &lt;code&gt;b.entry_set.all()&lt;/code&gt;.</source>
          <target state="translated">Djangoは、関係の「反対側」のAPIアクセサー（関連モデルから関係を定義するモデルへのリンク）も作成します。たとえば、 &lt;code&gt;Blog&lt;/code&gt; オブジェクト &lt;code&gt;b&lt;/code&gt; は、 &lt;code&gt;entry_set&lt;/code&gt; 属性を介してすべての関連する &lt;code&gt;Entry&lt;/code&gt; オブジェクトのリストにアクセスできます： &lt;code&gt;b.entry_set.all()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="003dbf2d5d14b9ddff530e3745c9f868eca5cb29" translate="yes" xml:space="preserve">
          <source>Django also defines a set of fields that represent relations.</source>
          <target state="translated">Django はリレーションを表すフィールドのセットも定義しています。</target>
        </trans-unit>
        <trans-unit id="ff55e8dd422fb73cd9158d2c731c59110966582d" translate="yes" xml:space="preserve">
          <source>Django also gives developers power to write &lt;a href=&quot;db/sql#executing-raw-queries&quot;&gt;raw queries&lt;/a&gt; or execute &lt;a href=&quot;db/sql#executing-custom-sql&quot;&gt;custom sql&lt;/a&gt;. These capabilities should be used sparingly and you should always be careful to properly escape any parameters that the user can control. In addition, you should exercise caution when using &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.extra&quot;&gt;&lt;code&gt;extra()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/models/expressions#django.db.models.expressions.RawSQL&quot;&gt;&lt;code&gt;RawSQL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Djangoは、&lt;a href=&quot;db/sql#executing-raw-queries&quot;&gt;生のクエリ&lt;/a&gt;を記述したり、&lt;a href=&quot;db/sql#executing-custom-sql&quot;&gt;カスタムSQLを&lt;/a&gt;実行したりする能力も開発者に提供します。これらの機能は慎重に使用する必要があり、ユーザーが制御できるパラメーターを適切にエスケープするように常に注意する必要があります。さらに、&lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.extra&quot;&gt; &lt;code&gt;extra()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../ref/models/expressions#django.db.models.expressions.RawSQL&quot;&gt; &lt;code&gt;RawSQL&lt;/code&gt; &lt;/a&gt;を使用する場合は注意が必要です。</target>
        </trans-unit>
        <trans-unit id="1778c45c6cdf7be2bf36c71d865a4b76444a33ee" translate="yes" xml:space="preserve">
          <source>Django also offers a &lt;a href=&quot;../ref/utils#django.utils.functional.keep_lazy&quot;&gt;&lt;code&gt;keep_lazy()&lt;/code&gt;&lt;/a&gt; decorator. This allows a function that has been called with a lazy argument to behave lazily itself, only being evaluated when it needs to be. Thus the lazy argument - which could be an expensive one - will not be called upon for evaluation until it&amp;rsquo;s strictly required.</source>
          <target state="translated">Djangoは&lt;a href=&quot;../ref/utils#django.utils.functional.keep_lazy&quot;&gt; &lt;code&gt;keep_lazy()&lt;/code&gt; &lt;/a&gt;デコレータも提供しています。これにより、遅延引数を指定して呼び出された関数が遅延して動作し、必要なときにのみ評価されます。したがって、レイジーな引数-これは高価なものになる可能性があります-厳密に要求されるまで、評価のために呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="d3be1b84e5749f3be3485a06feb25e0662e93dbb" translate="yes" xml:space="preserve">
          <source>Django also provides &lt;a href=&quot;#built-in-auth-views&quot;&gt;views&lt;/a&gt; and &lt;a href=&quot;#built-in-auth-forms&quot;&gt;forms&lt;/a&gt; that may be used to allow users to change their own passwords.</source>
          <target state="translated">Djangoには、ユーザーが自分のパスワードを変更できるようにするための&lt;a href=&quot;#built-in-auth-views&quot;&gt;ビュー&lt;/a&gt;と&lt;a href=&quot;#built-in-auth-forms&quot;&gt;フォーム&lt;/a&gt;も用意されています。</target>
        </trans-unit>
        <trans-unit id="17ef38d9be3b089211847bf7776f6adde4853bf0" translate="yes" xml:space="preserve">
          <source>Django also provides a way to translate URLs according to the active language. See the &lt;a href=&quot;../i18n/translation#url-internationalization&quot;&gt;internationalization documentation&lt;/a&gt; for more information.</source>
          <target state="translated">Djangoは、アクティブな言語に従ってURLを翻訳する方法も提供します。詳細については、&lt;a href=&quot;../i18n/translation#url-internationalization&quot;&gt;国際化のドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d648d7fd76e758d5c7f5761ba79f49411de9f742" translate="yes" xml:space="preserve">
          <source>Django also provides an API that allows you to maintain complete control over database usage in your code. A manually specified database allocation will take priority over a database allocated by a router.</source>
          <target state="translated">また、Django は API を提供しており、コード内のデータベースの使用を完全に制御することができます。手動で指定したデータベースの割り当ては、ルータによって割り当てられたデータベースよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="6e97f5c59a2a47176233efb9e93c5e41ff63e482" translate="yes" xml:space="preserve">
          <source>Django also uses these &lt;code&gt;Operation&lt;/code&gt; objects to work out what your models looked like historically, and to calculate what changes you&amp;rsquo;ve made to your models since the last migration so it can automatically write your migrations; that&amp;rsquo;s why they&amp;rsquo;re declarative, as it means Django can easily load them all into memory and run through them without touching the database to work out what your project should look like.</source>
          <target state="translated">Djangoはまた、これらの &lt;code&gt;Operation&lt;/code&gt; オブジェクトを使用して、モデルが歴史的にどのように見えたかを計算し、最後の移行以降にモデルに加えた変更を計算して、移行を自動的に書き込むことができます。それがDjangoが簡単にすべてをメモリにロードし、データベースに触れることなく簡単に実行できるため、プロジェクトがどのように見えるかを理解できるため、これらは宣言型です。</target>
        </trans-unit>
        <trans-unit id="9e9bcf643848afd86aa5def17cd14071c44f0923" translate="yes" xml:space="preserve">
          <source>Django also works well with &amp;ldquo;downstream&amp;rdquo; caches, such as &lt;a href=&quot;http://www.squid-cache.org&quot;&gt;Squid&lt;/a&gt; and browser-based caches. These are the types of caches that you don&amp;rsquo;t directly control but to which you can provide hints (via HTTP headers) about which parts of your site should be cached, and how.</source>
          <target state="translated">Djangoは、&lt;a href=&quot;http://www.squid-cache.org&quot;&gt;Squid&lt;/a&gt;やブラウザベースのキャッシュなどの「ダウンストリーム」キャッシュでもうまく機能します。これらは、直接制御することはできませんが、サイトのどの部分をどのようにキャッシュするかについてのヒント（HTTPヘッダーを介して）を提供できるキャッシュのタイプです。</target>
        </trans-unit>
        <trans-unit id="511b9e7b5da348943fbb4c15f9d03f9c129408e6" translate="yes" xml:space="preserve">
          <source>Django applications require a single base filesystem path where Django (depending on configuration) will search for templates, static assets, etc. Thus, namespace packages may only be Django applications if one of the following is true:</source>
          <target state="translated">Django アプリケーションは、Django が (設定に応じて)テンプレートや静的アセットなどを検索するための単一のベースファイルシステムパスを必要とします。したがって、名前空間パッケージは、以下のいずれかが真である場合にのみ、Django アプリケーションになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="9f5ff692cf4868fdfbbaa8feab7e317e762751c6" translate="yes" xml:space="preserve">
          <source>Django applications that make proper use of URL namespacing can be deployed more than once for a particular site. For example &lt;a href=&quot;../../ref/contrib/admin/index#module-django.contrib.admin&quot;&gt;&lt;code&gt;django.contrib.admin&lt;/code&gt;&lt;/a&gt; has an &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.AdminSite&quot;&gt;&lt;code&gt;AdminSite&lt;/code&gt;&lt;/a&gt; class which allows you to &lt;a href=&quot;../../ref/contrib/admin/index#multiple-admin-sites&quot;&gt;deploy more than one instance of the admin&lt;/a&gt;. In a later example, we&amp;rsquo;ll discuss the idea of deploying the polls application from the tutorial in two different locations so we can serve the same functionality to two different audiences (authors and publishers).</source>
          <target state="translated">URLネームスペースを適切に使用するDjangoアプリケーションは、特定のサイトに複数回デプロイできます。例えば&lt;a href=&quot;../../ref/contrib/admin/index#module-django.contrib.admin&quot;&gt; &lt;code&gt;django.contrib.admin&lt;/code&gt; は&lt;/a&gt;あり&lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.AdminSite&quot;&gt; &lt;code&gt;AdminSite&lt;/code&gt; &lt;/a&gt;あなたがすることができますクラス&lt;a href=&quot;../../ref/contrib/admin/index#multiple-admin-sites&quot;&gt;の管理の複数のインスタンスを配置します&lt;/a&gt;。後の例では、チュートリアルの投票アプリケーションを2つの異なる場所にデプロイして、2つの異なる対象ユーザー（作成者と発行者）に同じ機能を提供できるようにする方法について説明します。</target>
        </trans-unit>
        <trans-unit id="da015b3e3be611efe63c0416fc75b3480d9a9904" translate="yes" xml:space="preserve">
          <source>Django apps are &amp;ldquo;pluggable&amp;rdquo;: You can use an app in multiple projects, and you can distribute apps, because they don&amp;rsquo;t have to be tied to a given Django installation.</source>
          <target state="translated">Djangoアプリは「プラグイン可能」：アプリは複数のプロジェクトで使用でき、アプリを配布できます。アプリは特定のDjangoインストールに関連付けられている必要がないためです。</target>
        </trans-unit>
        <trans-unit id="d2fea2f4ba070fa8e695f4340e48f2233d10da08" translate="yes" xml:space="preserve">
          <source>Django assumes that all databases use UTF-8 encoding. Using other encodings may result in unexpected behavior such as &amp;ldquo;value too long&amp;rdquo; errors from your database for data that is valid in Django. See the database specific notes below for information on how to set up your database correctly.</source>
          <target state="translated">DjangoはすべてのデータベースがUTF-8エンコーディングを使用することを前提としています。他のエンコーディングを使用すると、Djangoで有効なデータに対するデータベースからの「値が長すぎる」エラーなどの予期しない動作が発生する可能性があります。データベースを正しく設定する方法については、以下のデータベース固有の注意事項を参照してください。</target>
        </trans-unit>
        <trans-unit id="bebef6c71f1658cf910992f51621a4b8eb7c50aa" translate="yes" xml:space="preserve">
          <source>Django at a glance</source>
          <target state="translated">一目でわかるジャンゴ</target>
        </trans-unit>
        <trans-unit id="fd6db7224feb4cf7f9af259a01d8b83e66b01b2c" translate="yes" xml:space="preserve">
          <source>Django attempts to support as many features as possible on all database backends. However, not all database backends are alike, and we&amp;rsquo;ve had to make design decisions on which features to support and which assumptions we can make safely.</source>
          <target state="translated">Djangoはすべてのデータベースバックエンドで可能な限り多くの機能をサポートしようとします。ただし、すべてのデータベースバックエンドが類似しているわけではなく、サポートする機能と安全に実行できる仮定について設計上の決定を行わなければなりませんでした。</target>
        </trans-unit>
        <trans-unit id="7a72f5a587298370cc35240126e66aa9f362d11e" translate="yes" xml:space="preserve">
          <source>Django authentication provides both authentication and authorization together and is generally referred to as the authentication system, as these features are somewhat coupled.</source>
          <target state="translated">Django の認証は、認証と認可の両方を一緒に提供し、これらの機能が多少結合されているため、一般的に認証システムと呼ばれています。</target>
        </trans-unit>
        <trans-unit id="aec72b09ba2e3ac2352b00fce902dc72ae767e1a" translate="yes" xml:space="preserve">
          <source>Django automatically converts exceptions raised by the view or by middleware into an appropriate HTTP response with an error status code. &lt;a href=&quot;../../ref/views#error-views&quot;&gt;Certain exceptions&lt;/a&gt; are converted to 4xx status codes, while an unknown exception is converted to a 500 status code.</source>
          <target state="translated">Djangoは、ビューまたはミドルウェアによって発生した例外を、エラーステータスコードを含む適切なHTTP応答に自動的に変換します。&lt;a href=&quot;../../ref/views#error-views&quot;&gt;特定の例外&lt;/a&gt;は4xxステータスコードに変換されますが、不明な例外は500ステータスコードに変換されます。</target>
        </trans-unit>
        <trans-unit id="c50c82d2bdfce66f7231dbcce0ec91ccd83a5988" translate="yes" xml:space="preserve">
          <source>Django calls &lt;code&gt;process_exception()&lt;/code&gt; when a view raises an exception. &lt;code&gt;process_exception()&lt;/code&gt; should return either &lt;code&gt;None&lt;/code&gt; or an &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object. If it returns an &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object, the template response and response middleware will be applied and the resulting response returned to the browser. Otherwise, &lt;a href=&quot;../../ref/views#error-views&quot;&gt;default exception handling&lt;/a&gt; kicks in.</source>
          <target state="translated">Djangoは、ビューが例外を発生させると、 &lt;code&gt;process_exception()&lt;/code&gt; を呼び出します。 &lt;code&gt;process_exception()&lt;/code&gt; は &lt;code&gt;None&lt;/code&gt; または&lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;オブジェクトを返す必要があります。&lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;オブジェクトを返す場合、テンプレート応答と応答ミドルウェアが適用され、結果の応答がブラウザーに返されます。それ以外の場合は、&lt;a href=&quot;../../ref/views#error-views&quot;&gt;デフォルトの例外処理&lt;/a&gt;が有効になります。</target>
        </trans-unit>
        <trans-unit id="9b8b66699207f32bf040c54f4c864f13d7219ff5" translate="yes" xml:space="preserve">
          <source>Django can also be configured to email errors about broken links (404 &amp;ldquo;page not found&amp;rdquo; errors). Django sends emails about 404 errors when:</source>
          <target state="translated">Djangoはリンク切れに関するエラーをメールで送信するように設定することもできます（404「ページが見つかりません」エラー）。Djangoは次の場合に404​​エラーに関するメールを送信します。</target>
        </trans-unit>
        <trans-unit id="f632e7a71bfa08d0745355e2d9459757c66beae4" translate="yes" xml:space="preserve">
          <source>Django can be easily integrated with &lt;a href=&quot;https://coverage.readthedocs.io/&quot;&gt;coverage.py&lt;/a&gt;, a tool for measuring code coverage of Python programs. First, &lt;a href=&quot;https://pypi.org/project/coverage/&quot;&gt;install coverage.py&lt;/a&gt;. Next, run the following from your project folder containing &lt;code&gt;manage.py&lt;/code&gt;:</source>
          <target state="translated">Djangoは、Pythonプログラムのコードカバレッジを測定するためのツールである&lt;a href=&quot;https://coverage.readthedocs.io/&quot;&gt;coverage.py&lt;/a&gt;と簡単に統合できます。まず、&lt;a href=&quot;https://pypi.org/project/coverage/&quot;&gt;coverage.pyをインストールします&lt;/a&gt;。次に、 &lt;code&gt;manage.py&lt;/code&gt; を含むプロジェクトフォルダーから以下を実行します。</target>
        </trans-unit>
        <trans-unit id="c3965b5de252b5ebbbf7c4a4a55f225e160d66b8" translate="yes" xml:space="preserve">
          <source>Django can be installed easily using &lt;code&gt;pip&lt;/code&gt; within your virtual environment.</source>
          <target state="translated">Djangoは、仮想環境内で &lt;code&gt;pip&lt;/code&gt; を使用して簡単にインストールできます。</target>
        </trans-unit>
        <trans-unit id="a6cd20e2a96a0ec74c81f8bb5e71198e65df22ac" translate="yes" xml:space="preserve">
          <source>Django can create migrations for you. Make changes to your models - say, add a field and remove a model - and then run &lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">Djangoはマイグレーションを作成できます。モデルに変更を加えて（たとえば、フィールドを追加してモデルを削除して）、次に&lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="ae649090d91e254a10d688aff359a72f4e143261" translate="yes" xml:space="preserve">
          <source>Django can reload that data for you on a per-testcase basis by setting the &lt;code&gt;serialized_rollback&lt;/code&gt; option to &lt;code&gt;True&lt;/code&gt; in the body of the &lt;code&gt;TestCase&lt;/code&gt; or &lt;code&gt;TransactionTestCase&lt;/code&gt;, but note that this will slow down that test suite by approximately 3x.</source>
          <target state="translated">Django は &lt;code&gt;TestCase&lt;/code&gt; または &lt;code&gt;TransactionTestCase&lt;/code&gt; の本文で &lt;code&gt;serialized_rollback&lt;/code&gt; オプションを &lt;code&gt;True&lt;/code&gt; に設定することにより、テストケースごとにそのデータをリロードできますが、これによりテストスイートが約3倍遅くなることに注意してください。</target>
        </trans-unit>
        <trans-unit id="45c5ddf704c494fa6c6c3ae57be3f66c079a33b2" translate="yes" xml:space="preserve">
          <source>Django can serialize the following:</source>
          <target state="translated">Djangoでは以下のようにシリアル化することができます。</target>
        </trans-unit>
        <trans-unit id="42097d241271bde355b7bc0c1e08abce30493e32" translate="yes" xml:space="preserve">
          <source>Django can store its cached data in your database. This works best if you&amp;rsquo;ve got a fast, well-indexed database server.</source>
          <target state="translated">Djangoはキャッシュされたデータをデータベースに保存できます。これは、高速で十分にインデックス化されたデータベースサーバーがある場合に最適です。</target>
        </trans-unit>
        <trans-unit id="d2ad61f6fdfa69cb20044d37dffb1e1ca10ea97b" translate="yes" xml:space="preserve">
          <source>Django can&amp;rsquo;t automatically generate data migrations for you, as it does with schema migrations, but it&amp;rsquo;s not very hard to write them. Migration files in Django are made up of &lt;a href=&quot;../ref/migration-operations&quot;&gt;Operations&lt;/a&gt;, and the main operation you use for data migrations is &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Djangoは、スキーマの移行とは異なり、自動的にデータの移行を生成することはできませんが、書き込むのはそれほど難しくありません。Djangoの移行ファイルは&lt;a href=&quot;../ref/migration-operations&quot;&gt;オペレーション&lt;/a&gt;で構成されており、データの移行に使用する主なオペレーションは&lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt; &lt;code&gt;RunPython&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="4a80c1f49f49f5599aad0e0ec38ad04a15dab37e" translate="yes" xml:space="preserve">
          <source>Django cannot reliably use alternate time zones in a Windows environment. If you&amp;rsquo;re running Django on Windows, &lt;a href=&quot;#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt; must be set to match the system time zone.</source>
          <target state="translated">Djangoは、Windows環境で代替タイムゾーンを確実に使用できません。WindowsでDjangoを実行している場合は、&lt;a href=&quot;#std:setting-TIME_ZONE&quot;&gt; &lt;code&gt;TIME_ZONE&lt;/code&gt; を&lt;/a&gt;システムのタイムゾーンと一致するように設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="51ad2426b39319e79dabd5a553a54543c18c5ffa" translate="yes" xml:space="preserve">
          <source>Django cannot serialize:</source>
          <target state="translated">Django はシリアライズできません。</target>
        </trans-unit>
        <trans-unit id="73028ccda69e25258c2c460d93321b9c199a4f1c" translate="yes" xml:space="preserve">
          <source>Django chooses the algorithm to use by consulting the &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; setting. This is a list of hashing algorithm classes that this Django installation supports. The first entry in this list (that is, &lt;code&gt;settings.PASSWORD_HASHERS[0]&lt;/code&gt;) will be used to store passwords, and all the other entries are valid hashers that can be used to check existing passwords. This means that if you want to use a different algorithm, you&amp;rsquo;ll need to modify &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; to list your preferred algorithm first in the list.</source>
          <target state="translated">Djangoは&lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt;設定を調べて、使用するアルゴリズムを選択します。これは、このDjangoインストールがサポートするハッシュアルゴリズムクラスのリストです。このリストの最初のエントリ（つまり、 &lt;code&gt;settings.PASSWORD_HASHERS[0]&lt;/code&gt; ）はパスワードを格納するために使用され、他のすべてのエントリは既存のパスワードをチェックするために使用できる有効なハッシャーです。つまり、別のアルゴリズムを使用する場合は、&lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt;を変更して、優先アルゴリズムをリストの最初にリストする必要があります。</target>
        </trans-unit>
        <trans-unit id="8ad7781d4ca23a424af90efb320cced9fae26622" translate="yes" xml:space="preserve">
          <source>Django comes with a built-in permissions system. It provides a way to assign permissions to specific users and groups of users.</source>
          <target state="translated">Django にはパーミッションシステムが組み込まれています。これは、特定のユーザやユーザのグループにパーミッションを割り当てる方法を提供します。</target>
        </trans-unit>
        <trans-unit id="a90644c8048b4946a6d71d9e226fbdc4fc33509b" translate="yes" xml:space="preserve">
          <source>Django comes with a couple of other template-tag libraries that you have to enable explicitly in your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting and enable in your template with the &lt;a href=&quot;#std:templatetag-load&quot;&gt;&lt;code&gt;{% load %}&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="translated">Djangoには、&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;設定で明示的に有効にし、&lt;a href=&quot;#std:templatetag-load&quot;&gt; &lt;code&gt;{% load %}&lt;/code&gt; &lt;/a&gt;タグを使用してテンプレートで有効にする必要がある他のいくつかのテンプレートタグライブラリが付属しています。</target>
        </trans-unit>
        <trans-unit id="9d77e11dd067dbda732d72efc27028ee19f420d1" translate="yes" xml:space="preserve">
          <source>Django comes with a few helpful pieces of &lt;a href=&quot;../ref/middleware&quot;&gt;middleware&lt;/a&gt; that can help optimize your site&amp;rsquo;s performance. They include:</source>
          <target state="translated">Djangoには、サイトのパフォーマンスを最適化するのに役立ついくつかの便利な&lt;a href=&quot;../ref/middleware&quot;&gt;ミドルウェア&lt;/a&gt;が付属しています。以下が含まれます：</target>
        </trans-unit>
        <trans-unit id="74c1033ebd98b559d412d8e12472b11aea38bf55" translate="yes" xml:space="preserve">
          <source>Django comes with a few views by default for handling HTTP errors. To override these with your own custom views, see &lt;a href=&quot;../topics/http/views#customizing-error-views&quot;&gt;Customizing error views&lt;/a&gt;.</source>
          <target state="translated">Djangoには、デフォルトでHTTPエラーを処理するためのいくつかのビューが付属しています。これらを独自のカスタムビューでオーバーライドするには、「&lt;a href=&quot;../topics/http/views#customizing-error-views&quot;&gt;エラービューのカスタマイズ&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="f66d50c3962d63a73eafeece108e9100e593969f" translate="yes" xml:space="preserve">
          <source>Django comes with a high-level sitemap-generating framework to create &lt;a href=&quot;https://www.sitemaps.org/&quot;&gt;sitemap&lt;/a&gt; XML files.</source>
          <target state="translated">Djangoには、&lt;a href=&quot;https://www.sitemaps.org/&quot;&gt;サイトマップ&lt;/a&gt; XMLファイルを作成するための高レベルのサイトマップ生成フレームワークが付属しています。</target>
        </trans-unit>
        <trans-unit id="67d5f3ac1f072fbf32e326b431e92919fcc1cfb5" translate="yes" xml:space="preserve">
          <source>Django comes with a high-level syndication-feed-generating framework for creating &lt;a href=&quot;http://www.whatisrss.com/&quot;&gt;RSS&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/html/rfc4287&quot;&gt;Atom&lt;/a&gt; feeds.</source>
          <target state="translated">Djangoには、&lt;a href=&quot;http://www.whatisrss.com/&quot;&gt;RSSフィード&lt;/a&gt;と&lt;a href=&quot;https://tools.ietf.org/html/rfc4287&quot;&gt;Atom&lt;/a&gt;フィードを作成するための高レベルのシンジケーションフィード生成フレームワークが付属しています。</target>
        </trans-unit>
        <trans-unit id="356c6ceacc991c4de80a33b05cca54b301219cdf" translate="yes" xml:space="preserve">
          <source>Django comes with a high-level syndication-feed-generating framework for creating &lt;a href=&quot;http://www.whatisrss.com/&quot;&gt;RSS&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/html/rfc4287.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;Atom&lt;/strong&gt;&lt;/a&gt; feeds.</source>
          <target state="translated">Djangoには、&lt;a href=&quot;http://www.whatisrss.com/&quot;&gt;RSSフィード&lt;/a&gt;と&lt;a href=&quot;https://tools.ietf.org/html/rfc4287.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;Atom&lt;/strong&gt;&lt;/a&gt;フィードを作成するための高レベルのシンジケーションフィード生成フレームワークが付属しています。</target>
        </trans-unit>
        <trans-unit id="5928db3d1e10983bf16e9a3605ed6c0c05174344" translate="yes" xml:space="preserve">
          <source>Django comes with a robust cache system that lets you save dynamic pages so they don&amp;rsquo;t have to be calculated for each request. For convenience, Django offers different levels of cache granularity: You can cache the output of specific views, you can cache only the pieces that are difficult to produce, or you can cache your entire site.</source>
          <target state="translated">Djangoには、動的ページを保存できる堅牢なキャッシュシステムが付属しているため、リクエストごとに計算する必要はありません。便宜上、Djangoはさまざまなレベルのキャッシュ細分性を提供しています。特定のビューの出力をキャッシュしたり、作成が困難な部分のみをキャッシュしたり、サイト全体をキャッシュしたりできます。</target>
        </trans-unit>
        <trans-unit id="9bc381567a734ad1e6659bc73e3680e556ef7d5b" translate="yes" xml:space="preserve">
          <source>Django comes with a special &lt;code&gt;Context&lt;/code&gt; class, &lt;code&gt;django.template.RequestContext&lt;/code&gt;, that acts slightly differently from the normal &lt;code&gt;django.template.Context&lt;/code&gt;. The first difference is that it takes an &lt;a href=&quot;../request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; as its first argument. For example:</source>
          <target state="translated">Djangoには、通常の &lt;code&gt;django.template.Context&lt;/code&gt; とは少し異なる動作をする特別な &lt;code&gt;Context&lt;/code&gt; クラス &lt;code&gt;django.template.RequestContext&lt;/code&gt; が付属しています。最初の違いは、最初の引数として&lt;a href=&quot;../request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;を取ることです。例えば：</target>
        </trans-unit>
        <trans-unit id="493a9b4e99187f7a6a6e8b61cfb3b8da50b7a295" translate="yes" xml:space="preserve">
          <source>Django comes with a tool, &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;django-admin makemessages&lt;/code&gt;&lt;/a&gt;, that automates the creation and upkeep of these files.</source>
          <target state="translated">Djangoには、これらのファイルの作成と維持を自動化する&lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;django-admin makemessages&lt;/code&gt; &lt;/a&gt;ツールが付属しています。</target>
        </trans-unit>
        <trans-unit id="a5fb1b5fba25c1abdad90391d056fc4a6489f598" translate="yes" xml:space="preserve">
          <source>Django comes with a user authentication system. It handles user accounts, groups, permissions and cookie-based user sessions. This section of the documentation explains how the default implementation works out of the box, as well as how to &lt;a href=&quot;customizing&quot;&gt;extend and customize&lt;/a&gt; it to suit your project&amp;rsquo;s needs.</source>
          <target state="translated">Djangoにはユーザー認証システムが付属しています。ユーザーアカウント、グループ、権限、Cookieベースのユーザーセッションを処理します。ドキュメントのこのセクションでは、デフォルトの実装がそのまますぐに機能する方法と、プロジェクトのニーズに合わせて&lt;a href=&quot;customizing&quot;&gt;拡張およびカスタマイズ&lt;/a&gt;する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="f83038f0f54459949ab2f649098846b5f76a6439" translate="yes" xml:space="preserve">
          <source>Django comes with a utility called &lt;a href=&quot;../ref/django-admin#django-admin-inspectdb&quot;&gt;&lt;code&gt;inspectdb&lt;/code&gt;&lt;/a&gt; that can create models by introspecting an existing database. You can view the output by running this command:</source>
          <target state="translated">Djangoには、既存のデータベースをイントロ&lt;a href=&quot;../ref/django-admin#django-admin-inspectdb&quot;&gt; &lt;code&gt;inspectdb&lt;/code&gt; &lt;/a&gt;してモデルを作成できる、inspectdbというユーティリティが付属しています。次のコマンドを実行して、出力を表示できます。</target>
        </trans-unit>
        <trans-unit id="2a2bdce4f66aae9e6cc84cd4c2435f7f0511163c" translate="yes" xml:space="preserve">
          <source>Django comes with an optional &amp;ldquo;flatpages&amp;rdquo; application. It lets you store &amp;ldquo;flat&amp;rdquo; HTML content in a database and handles the management for you via Django&amp;rsquo;s admin interface and a Python API.</source>
          <target state="translated">Djangoには、オプションの「フラットページ」アプリケーションが付属しています。「フラット」なHTMLコンテンツをデータベースに保存し、Djangoの管理インターフェースとPython APIを介して管理を処理できます。</target>
        </trans-unit>
        <trans-unit id="5261e1bf442fdbf21815e460877c384359b2dda2" translate="yes" xml:space="preserve">
          <source>Django comes with an optional &amp;ldquo;sites&amp;rdquo; framework. It&amp;rsquo;s a hook for associating objects and functionality to particular websites, and it&amp;rsquo;s a holding place for the domain names and &amp;ldquo;verbose&amp;rdquo; names of your Django-powered sites.</source>
          <target state="translated">Djangoにはオプションの「サイト」フレームワークが付属しています。これは、オブジェクトと機能を特定のWebサイトに関連付けるためのフックであり、Djangoを利用したサイトのドメイン名と「詳細」名を保持する場所です。</target>
        </trans-unit>
        <trans-unit id="452c9f64df2dff5b11a88c4285cbee44fe448030" translate="yes" xml:space="preserve">
          <source>Django comes with an optional redirects application. It lets you store redirects in a database and handles the redirecting for you. It uses the HTTP response status code &lt;code&gt;301 Moved Permanently&lt;/code&gt; by default.</source>
          <target state="translated">Djangoには、オプションのリダイレクトアプリケーションが付属しています。リダイレクトをデータベースに保存し、リダイレクトを処理します。デフォルトでは、HTTP応答ステータスコード &lt;code&gt;301 Moved Permanently&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="086ac840e004ae96851c5a7718f4b23a7c618b36" translate="yes" xml:space="preserve">
          <source>Django comes with built-in database backends. You may subclass an existing database backends to modify its behavior, features, or configuration.</source>
          <target state="translated">Django には組み込みのデータベースバックエンドが付属しています。既存のデータベースバックエンドをサブクラス化して、その動作や機能、設定を変更することができます。</target>
        </trans-unit>
        <trans-unit id="ab0c88975cb3d91b38378d897728f7ecda3c3070" translate="yes" xml:space="preserve">
          <source>Django contains &lt;a href=&quot;../ref/clickjacking#clickjacking-prevention&quot;&gt;clickjacking protection&lt;/a&gt; in the form of the &lt;a href=&quot;../ref/middleware#django.middleware.clickjacking.XFrameOptionsMiddleware&quot;&gt;&lt;code&gt;X-Frame-Options middleware&lt;/code&gt;&lt;/a&gt; which in a supporting browser can prevent a site from being rendered inside a frame. It is possible to disable the protection on a per view basis or to configure the exact header value sent.</source>
          <target state="translated">Djangoには、&lt;a href=&quot;../ref/middleware#django.middleware.clickjacking.XFrameOptionsMiddleware&quot;&gt; &lt;code&gt;X-Frame-Options middleware&lt;/code&gt; &lt;/a&gt;の形で&lt;a href=&quot;../ref/clickjacking#clickjacking-prevention&quot;&gt;クリックジャッキング保護機能&lt;/a&gt;が含まれており、サポートするブラウザでは、サイトがフレーム内にレンダリングされないようにすることができます。ビューごとに保護を無効にするか、送信される正確なヘッダー値を構成することが可能です。</target>
        </trans-unit>
        <trans-unit id="4475ed751f9607a4d6cd3cb9cc785a8ce1d9c822" translate="yes" xml:space="preserve">
          <source>Django contains a registry of installed applications that stores configuration and provides introspection. It also maintains a list of available &lt;a href=&quot;../topics/db/models&quot;&gt;models&lt;/a&gt;.</source>
          <target state="translated">Djangoには、設定を保存してイントロスペクションを提供するインストール済みアプリケーションのレジストリが含まれています。また、利用可能な&lt;a href=&quot;../topics/db/models&quot;&gt;モデルの&lt;/a&gt;リストも保持しています。</target>
        </trans-unit>
        <trans-unit id="8a71ea56a1eaaa27874964bb6b3cc4b962071075" translate="yes" xml:space="preserve">
          <source>Django core exception classes are defined in &lt;code&gt;django.core.exceptions&lt;/code&gt;.</source>
          <target state="translated">Djangoコア例外クラスは &lt;code&gt;django.core.exceptions&lt;/code&gt; で定義されています。</target>
        </trans-unit>
        <trans-unit id="c3276d1c234e3373c909b1f4cc01e109298b8cb8" translate="yes" xml:space="preserve">
          <source>Django currently supports two interfaces: WSGI and ASGI.</source>
          <target state="translated">Djangoは現在2つのインターフェースをサポートしています。WSGI と ASGI です。</target>
        </trans-unit>
        <trans-unit id="9a7755d406dc1c330fb0aa5fa38c155f355df3ce" translate="yes" xml:space="preserve">
          <source>Django defines a standard API for loading and rendering templates regardless of the backend. Loading consists of finding the template for a given identifier and preprocessing it, usually compiling it to an in-memory representation. Rendering means interpolating the template with context data and returning the resulting string.</source>
          <target state="translated">Django は、バックエンドに関係なくテンプレートをロードしてレンダリングするための標準 API を定義しています。読み込みは、指定された識別子のテンプレートを探し出し、それを前処理し、通常はインメモリ表現にコンパイルします。レンダリングは、テンプレートをコンテキストデータで補間し、結果の文字列を返すことを意味します。</target>
        </trans-unit>
        <trans-unit id="1f07d6cbbb8ffb7d64068907bac22ab996f3c9dc" translate="yes" xml:space="preserve">
          <source>Django determines the order in which migrations should be applied not by the filename of each migration, but by building a graph using two properties on the &lt;code&gt;Migration&lt;/code&gt; class: &lt;code&gt;dependencies&lt;/code&gt; and &lt;code&gt;run_before&lt;/code&gt;.</source>
          <target state="translated">Djangoは、各マイグレーションのファイル名ではなく、 &lt;code&gt;Migration&lt;/code&gt; クラスの2つのプロパティ（ &lt;code&gt;dependencies&lt;/code&gt; および &lt;code&gt;run_before&lt;/code&gt; )を使用してグラフを作成することにより、マイグレーションを適用する順序を決定します。</target>
        </trans-unit>
        <trans-unit id="47b2934181710d7a73695848135a5a151e3fb8c2" translate="yes" xml:space="preserve">
          <source>Django determines the root URLconf module to use. Ordinarily, this is the value of the &lt;a href=&quot;../../ref/settings#std:setting-ROOT_URLCONF&quot;&gt;&lt;code&gt;ROOT_URLCONF&lt;/code&gt;&lt;/a&gt; setting, but if the incoming &lt;code&gt;HttpRequest&lt;/code&gt; object has a &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.urlconf&quot;&gt;&lt;code&gt;urlconf&lt;/code&gt;&lt;/a&gt; attribute (set by middleware), its value will be used in place of the &lt;a href=&quot;../../ref/settings#std:setting-ROOT_URLCONF&quot;&gt;&lt;code&gt;ROOT_URLCONF&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">Djangoは使用するルートURLconfモジュールを決定します。通常、これは&lt;a href=&quot;../../ref/settings#std:setting-ROOT_URLCONF&quot;&gt; &lt;code&gt;ROOT_URLCONF&lt;/code&gt; &lt;/a&gt;設定の値ですが、着信 &lt;code&gt;HttpRequest&lt;/code&gt; オブジェクトに&lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.urlconf&quot;&gt; &lt;code&gt;urlconf&lt;/code&gt; &lt;/a&gt;属性（ミドルウェアによって設定）がある場合、その値は&lt;a href=&quot;../../ref/settings#std:setting-ROOT_URLCONF&quot;&gt; &lt;code&gt;ROOT_URLCONF&lt;/code&gt; &lt;/a&gt;設定の代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="7b9b9769e53002854792a4a2aef63e323f7eb217" translate="yes" xml:space="preserve">
          <source>Django distributes test cases &amp;mdash; &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt; subclasses &amp;mdash; to subprocesses. If there are fewer test cases than configured processes, Django will reduce the number of processes accordingly.</source>
          <target state="translated">Djangoはテストケース&amp;mdash; &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt;サブクラス&amp;mdash;をサブプロセスに配布します。構成されたプロセスよりもテストケースが少ない場合、Djangoはそれに応じてプロセス数を減らします。</target>
        </trans-unit>
        <trans-unit id="c20a67bd4e7d540c86cace9b5093dadacefe0411" translate="yes" xml:space="preserve">
          <source>Django documentation</source>
          <target state="translated">Django ドキュメント</target>
        </trans-unit>
        <trans-unit id="a54e2388db184e0be01389aa4f540db554e32ffc" translate="yes" xml:space="preserve">
          <source>Django does &lt;em&gt;not&lt;/em&gt; provide automatic purging of expired sessions. Therefore, it&amp;rsquo;s your job to purge expired sessions on a regular basis. Django provides a clean-up management command for this purpose: &lt;a href=&quot;../../ref/django-admin#django-admin-clearsessions&quot;&gt;&lt;code&gt;clearsessions&lt;/code&gt;&lt;/a&gt;. It&amp;rsquo;s recommended to call this command on a regular basis, for example as a daily cron job.</source>
          <target state="translated">Djangoは期限切れのセッションの自動消去を提供していませ&lt;em&gt;ん&lt;/em&gt;。したがって、期限切れのセッションを定期的に削除するのはあなたの仕事です。 Djangoは、この目的のためにクリーンアップ管理コマンドを提供しています：&lt;a href=&quot;../../ref/django-admin#django-admin-clearsessions&quot;&gt; &lt;code&gt;clearsessions&lt;/code&gt; &lt;/a&gt;。このコマンドは定期的に（たとえば、毎日のcronジョブとして）呼び出すことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4cf9cb6045fc195aa253bbb8684ec026054536d9" translate="yes" xml:space="preserve">
          <source>Django does make one adjustment to the &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; class of an abstract base class: before installing the &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; attribute, it sets &lt;code&gt;abstract=False&lt;/code&gt;. This means that children of abstract base classes don&amp;rsquo;t automatically become abstract classes themselves. Of course, you can make an abstract base class that inherits from another abstract base class. You just need to remember to explicitly set &lt;code&gt;abstract=True&lt;/code&gt; each time.</source>
          <target state="translated">Djangoは、抽象基本クラスの&lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt;クラスに1つの調整を行います&lt;a href=&quot;#meta-options&quot;&gt;。Meta&lt;/a&gt;属性をインストールする前に、 &lt;code&gt;abstract=False&lt;/code&gt; を設定します。つまり、抽象基本クラスの子は、それ自体が自動的に抽象クラスになることはありません。もちろん、別の抽象基本クラスから継承する抽象基本クラスを作成することもできます。毎回明示的に &lt;code&gt;abstract=True&lt;/code&gt; を設定することを覚えておく必要があります。</target>
        </trans-unit>
        <trans-unit id="c0d658fd921d01ee759153f173d605d62d2d2622" translate="yes" xml:space="preserve">
          <source>Django does make one adjustment to the &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; class of an abstract base class: before installing the &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; attribute, it sets &lt;code&gt;abstract=False&lt;/code&gt;. This means that children of abstract base classes don&amp;rsquo;t automatically become abstract classes themselves. To make an abstract base class that inherits from another abstract base class, you need to explicitly set &lt;code&gt;abstract=True&lt;/code&gt; on the child.</source>
          <target state="translated">Djangoは、抽象基本クラスの&lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt;クラスに1つの調整を行います。つまり、&lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt;属性をインストールする前に、 &lt;code&gt;abstract=False&lt;/code&gt; を設定します。これは、抽象基本クラスの子が自動的に抽象クラスにならないことを意味します。別の抽象基本クラスから継承する抽象基本クラスを作成するには、子に &lt;code&gt;abstract=True&lt;/code&gt; を明示的に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="6a593c7c70f8899a734509f16aa5a08087294d76" translate="yes" xml:space="preserve">
          <source>Django does not create the tablespaces for you. Please refer to your database engine&amp;rsquo;s documentation for details on creating and managing tablespaces.</source>
          <target state="translated">Djangoはテーブルスペースを作成しません。テーブルスペースの作成と管理の詳細については、データベースエンジンのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="4bd1d6376f8e33273a3f445bbb0bd6eccb658bab" translate="yes" xml:space="preserve">
          <source>Django does not decode the data of file uploads, because that data is normally treated as collections of bytes, rather than strings. Any automatic decoding there would alter the meaning of the stream of bytes.</source>
          <target state="translated">Django はファイルアップロードのデータをデコードしません。そこでの自動デコードはバイトのストリームの意味を変えてしまいます。</target>
        </trans-unit>
        <trans-unit id="0f4122f1bab004b5a2004ece4957893cb6542add" translate="yes" xml:space="preserve">
          <source>Django does not provide a shortcut function which returns a &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; because the constructor of &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; offers the same level of convenience as &lt;a href=&quot;#django.shortcuts.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Djangoは返すショートカット機能はありません&lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; を&lt;/a&gt;のコンストラクタので&lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; は&lt;/a&gt;と利便性の同じレベルを提供しています&lt;a href=&quot;#django.shortcuts.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cf7486cb1405ce982c266da7b1d379cd457fc359" translate="yes" xml:space="preserve">
          <source>Django does not store raw (clear text) passwords on the user model, but only a hash (see &lt;a href=&quot;passwords&quot;&gt;documentation of how passwords are managed&lt;/a&gt; for full details). Because of this, do not attempt to manipulate the password attribute of the user directly. This is why a helper function is used when creating a user.</source>
          <target state="translated">Djangoはユーザーモデルに生の（クリアテキスト）パスワードを格納しませんが、ハッシュのみを格納します（詳細&lt;a href=&quot;passwords&quot;&gt;については、パスワードの管理方法のドキュメントを&lt;/a&gt;参照してください）。このため、ユーザーのパスワード属性を直接操作しないでください。これが、ユーザーの作成時にヘルパー関数が使用される理由です。</target>
        </trans-unit>
        <trans-unit id="65bc3cefde3e8cc25b3e343e7b2f91618d07f26f" translate="yes" xml:space="preserve">
          <source>Django does not support custom plural equations in po files. As all translation catalogs are merged, only the plural form for the main Django po file (in &lt;code&gt;django/conf/locale/&amp;lt;lang_code&amp;gt;/LC_MESSAGES/django.po&lt;/code&gt;) is considered. Plural forms in all other po files are ignored. Therefore, you should not use different plural equations in your project or application po files.</source>
          <target state="translated">Djangoはpoファイルのカスタム複数方程式をサポートしていません。すべての翻訳カタログがマージされるため、メインのDjango poファイル（ &lt;code&gt;django/conf/locale/&amp;lt;lang_code&amp;gt;/LC_MESSAGES/django.po&lt;/code&gt; 内）の複数形のみが考慮されます。他のすべてのpoファイルの複数の形式は無視されます。したがって、プロジェクトまたはアプリケーションのpoファイルで異なる複数の方程式を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="7cc1197185c10a4fad7e1b8592975a401d9e6130" translate="yes" xml:space="preserve">
          <source>Django does not throttle requests to authenticate users. To protect against brute-force attacks against the authentication system, you may consider deploying a Django plugin or Web server module to throttle these requests.</source>
          <target state="translated">Django はユーザを認証するためのリクエストをスロットルしません。認証システムに対するブルートフォース攻撃から保護するために、Django プラグインや Web サーバーモジュールを導入して、これらのリクエストをスロットル化することを検討してください。</target>
        </trans-unit>
        <trans-unit id="37fb55e326c8ef6d4f90489c74d66848e9dbfff1" translate="yes" xml:space="preserve">
          <source>Django does this by taking all of your existing migrations, extracting their &lt;code&gt;Operation&lt;/code&gt;s and putting them all in sequence, and then running an optimizer over them to try and reduce the length of the list - for example, it knows that &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.CreateModel&quot;&gt;&lt;code&gt;CreateModel&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.DeleteModel&quot;&gt;&lt;code&gt;DeleteModel&lt;/code&gt;&lt;/a&gt; cancel each other out, and it knows that &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.AddField&quot;&gt;&lt;code&gt;AddField&lt;/code&gt;&lt;/a&gt; can be rolled into &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.CreateModel&quot;&gt;&lt;code&gt;CreateModel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Djangoは、既存の移行をすべて取り、それらの &lt;code&gt;Operation&lt;/code&gt; を抽出してすべてを順番に配置し、オプティマイザを実行してリストの長さを短くしようとします。たとえば、&lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.CreateModel&quot;&gt; &lt;code&gt;CreateModel&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.DeleteModel&quot;&gt; &lt;code&gt;DeleteModel&lt;/code&gt; が&lt;/a&gt;それぞれキャンセルすることを知っています。他のうち、それがことを知っている&lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.AddField&quot;&gt; &lt;code&gt;AddField&lt;/code&gt; &lt;/a&gt;にロールバックすることができ&lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.CreateModel&quot;&gt; &lt;code&gt;CreateModel&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="82ae71e67ae963b1dd7a92e07ea16260462f15d1" translate="yes" xml:space="preserve">
          <source>Django does this to allow context data to override context processors in APIs such as &lt;a href=&quot;../../topics/http/shortcuts#django.shortcuts.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Djangoはこれを行って、&lt;a href=&quot;../../topics/http/shortcuts#django.shortcuts.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt;などのAPIでコンテキストデータがコンテキストプロセッサをオーバーライドできるようにします。</target>
        </trans-unit>
        <trans-unit id="ac6fcc4bb4c4e7f1aa9254bd445c8658d6b99fa6" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t convert naive datetime objects, because they could be ambiguous, and because your code should never produce naive datetimes when time zone support is enabled. However, you can force conversion with the template filters described below.</source>
          <target state="translated">Djangoは、単純な日付時刻オブジェクトをあいまいにする可能性があるため、およびタイムゾーンサポートが有効になっていると、コードが単純な日付時刻を生成しないため、変換しません。ただし、下記のテンプレートフィルターを使用して強制的に変換することができます。</target>
        </trans-unit>
        <trans-unit id="00781acfb4fdfcf177022756c672306ef41d0562" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t create database defaults when a &lt;a href=&quot;models/fields#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt; is specified on a model field. Similarly, database defaults aren&amp;rsquo;t translated to model field defaults or detected in any fashion by &lt;code&gt;inspectdb&lt;/code&gt;.</source>
          <target state="translated">Djangoは、&lt;a href=&quot;models/fields#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;がモデルフィールドで指定されている場合、データベースのデフォルトを作成しません。同様に、データベースのデフォルトはモデルフィールドのデフォルトに変換されず、 &lt;code&gt;inspectdb&lt;/code&gt; によって何らかの方法で検出されません。</target>
        </trans-unit>
        <trans-unit id="e5ab3f7567f91c6a56929b75b65f0567ee1880ed" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t currently provide any support for foreign key or many-to-many relationships spanning multiple databases. If you have used a router to partition models to different databases, any foreign key and many-to-many relationships defined by those models must be internal to a single database.</source>
          <target state="translated">Djangoは現在、複数のデータベースにまたがる外部キーまたは多対多の関係をサポートしていません。ルーターを使用してモデルを異なるデータベースに分割した場合、それらのモデルによって定義された外部キーと多対多の関係は、単一のデータベースの内部に存在する必要があります。</target>
        </trans-unit>
        <trans-unit id="b3f503fa4adb7b8d4f85851af2d68a21bad94839" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t provide an API to start a transaction. The expected way to start a transaction is to disable autocommit with &lt;a href=&quot;#django.db.transaction.set_autocommit&quot;&gt;&lt;code&gt;set_autocommit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Djangoはトランザクションを開始するためのAPIを提供していません。トランザクションを開始するために予想される方法は、&lt;a href=&quot;#django.db.transaction.set_autocommit&quot;&gt; &lt;code&gt;set_autocommit()&lt;/code&gt; で&lt;/a&gt;自動コミットを無効にすることです。</target>
        </trans-unit>
        <trans-unit id="9c146dfca214fe96d9d6cba06eebec828a3171d2" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t serve files itself; it leaves that job to whichever Web server you choose.</source>
          <target state="translated">Django自体はファイルを提供しません。そのジョブは、選択したWebサーバーに任されます。</target>
        </trans-unit>
        <trans-unit id="1325d36f47045355942f2d52af7d62ead86d0315" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t set these attributes itself but makes use of them if set by your application.</source>
          <target state="translated">Django自体はこれらの属性を設定しませんが、アプリケーションで設定されている場合はそれらを利用します。</target>
        </trans-unit>
        <trans-unit id="17994fac69363539ee8b3c389265fa06ec1c378a" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t use &lt;code&gt;xgettext&lt;/code&gt; alone. It uses Python wrappers around &lt;code&gt;xgettext&lt;/code&gt; and &lt;code&gt;msgfmt&lt;/code&gt;. This is mostly for convenience.</source>
          <target state="translated">Djangoは &lt;code&gt;xgettext&lt;/code&gt; だけを使用しません。 &lt;code&gt;xgettext&lt;/code&gt; と &lt;code&gt;msgfmt&lt;/code&gt; の Pythonラッパーを使用します。これは主に便宜上のものです。</target>
        </trans-unit>
        <trans-unit id="7f43d4b968d4ed4a00af207bb46310a7796bead5" translate="yes" xml:space="preserve">
          <source>Django expects the database to support Unicode (UTF-8 encoding) and delegates to it the task of enforcing transactions and referential integrity. It is important to be aware of the fact that the two latter ones aren&amp;rsquo;t actually enforced by MySQL when using the MyISAM storage engine, see the next section.</source>
          <target state="translated">DjangoはデータベースがUnicode（UTF-8エンコーディング）をサポートすることを期待し、トランザクションと参照整合性を強制するタスクをそれに委譲します。MyISAMストレージエンジンを使用する場合、後者の2つは実際にはMySQLによって強制されないという事実に注意することが重要です。次のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="f9e8972bb2f165186e29e9ae744af7e73e9a6c15" translate="yes" xml:space="preserve">
          <source>Django generally prefers to use the empty string (&lt;code&gt;''&lt;/code&gt;) rather than &lt;code&gt;NULL&lt;/code&gt;, but Oracle treats both identically. To get around this, the Oracle backend ignores an explicit &lt;code&gt;null&lt;/code&gt; option on fields that have the empty string as a possible value and generates DDL as if &lt;code&gt;null=True&lt;/code&gt;. When fetching from the database, it is assumed that a &lt;code&gt;NULL&lt;/code&gt; value in one of these fields really means the empty string, and the data is silently converted to reflect this assumption.</source>
          <target state="translated">Djangoは通常、 &lt;code&gt;NULL&lt;/code&gt; ではなく空の文字列（ &lt;code&gt;''&lt;/code&gt; ）を使用することを好みますが、Oracleは両方を同じように扱います。これを回避するために、Oracleバックエンドは、空の文字列が可能な値であるフィールドの明示的な &lt;code&gt;null&lt;/code&gt; オプションを無視し、 &lt;code&gt;null=True&lt;/code&gt; のようにDDLを生成します。データベースからフェッチする場合、これらのフィールドの1つにある &lt;code&gt;NULL&lt;/code&gt; 値は実際には空の文字列を意味すると見なされ、データは暗黙的に変換されてこの仮定が反映されます。</target>
        </trans-unit>
        <trans-unit id="536b57203973a94f32f1a4d6dc9ecb4600d00792" translate="yes" xml:space="preserve">
          <source>Django gives you a few ways to control how database transactions are managed.</source>
          <target state="translated">Django では、データベースのトランザクションをどのように管理するかを制御する方法がいくつか用意されています。</target>
        </trans-unit>
        <trans-unit id="015dea89431c59127f3fdcd0b32f55fdb3a28299" translate="yes" xml:space="preserve">
          <source>Django gives you two ways of performing raw SQL queries: you can use &lt;a href=&quot;#django.db.models.Manager.raw&quot;&gt;&lt;code&gt;Manager.raw()&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;#performing-raw-queries&quot;&gt;perform raw queries and return model instances&lt;/a&gt;, or you can avoid the model layer entirely and &lt;a href=&quot;#executing-custom-sql-directly&quot;&gt;execute custom SQL directly&lt;/a&gt;.</source>
          <target state="translated">Djangoには、生のSQLクエリを実行する2つの方法があります&lt;a href=&quot;#django.db.models.Manager.raw&quot;&gt; &lt;code&gt;Manager.raw()&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;#performing-raw-queries&quot;&gt;使用して生のクエリを実行し、モデルインスタンスを返す&lt;/a&gt;方法と、モデルレイヤーを完全に回避して&lt;a href=&quot;#executing-custom-sql-directly&quot;&gt;カスタムSQLを直接実行する方法&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="9f52479f9485c0077d52232ebe731fa3caa0197d" translate="yes" xml:space="preserve">
          <source>Django handles three distinct parts of the work involved in forms:</source>
          <target state="translated">Django はフォームに関わる作業を 3 つの異なる部分で処理しています。</target>
        </trans-unit>
        <trans-unit id="27a8816ff05147db4a9535f197841dee85c6acc5" translate="yes" xml:space="preserve">
          <source>Django has a lot of documentation. A high-level overview of how it&amp;rsquo;s organized will help you know where to look for certain things:</source>
          <target state="translated">Djangoにはたくさんのドキュメントがあります。それがどのように編成されているかについての高レベルの概要は、特定のものを探す場所を知るのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="e79f00c9808b4f3ff76b0675616d3189e6dca217" translate="yes" xml:space="preserve">
          <source>Django has a template search path, which allows you to minimize redundancy among templates. In your Django settings, you specify a list of directories to check for templates with &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt;. If a template doesn&amp;rsquo;t exist in the first directory, it checks the second, and so on.</source>
          <target state="translated">Djangoにはテンプレート検索パスがあり、テンプレート間の冗長性を最小限に抑えることができます。Djangoの設定で、&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt;を使用してテンプレートをチェックするディレクトリのリストを指定します。テンプレートが最初のディレクトリに存在しない場合、2番目のディレクトリがチェックされ、以下同様にチェックされます。</target>
        </trans-unit>
        <trans-unit id="29c1d05d19207dd8b9bb99458e65acfb0689326d" translate="yes" xml:space="preserve">
          <source>Django has built-in protection against most types of CSRF attacks, providing you have &lt;a href=&quot;../ref/csrf#using-csrf&quot;&gt;enabled and used it&lt;/a&gt; where appropriate. However, as with any mitigation technique, there are limitations. For example, it is possible to disable the CSRF module globally or for particular views. You should only do this if you know what you are doing. There are other &lt;a href=&quot;../ref/csrf#csrf-limitations&quot;&gt;limitations&lt;/a&gt; if your site has subdomains that are outside of your control.</source>
          <target state="translated">Djangoには、CSRF攻撃のほとんどのタイプに対する組み込みの保護機能があり、必要に応じ&lt;a href=&quot;../ref/csrf#using-csrf&quot;&gt;てそれ&lt;/a&gt;を有効にして使用します。ただし、他の緩和手法と同様に、制限があります。たとえば、CSRFモジュールをグローバルに、または特定のビューに対して無効にすることができます。これを行うのは、自分が何をしているのかを知っている場合だけにしてください。サイトに制御不能なサブドメインがある場合、他の&lt;a href=&quot;../ref/csrf#csrf-limitations&quot;&gt;制限&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="dccebfb5c2856dd5dc59701f84c7494e4ddc8e3a" translate="yes" xml:space="preserve">
          <source>Django has developing support for asynchronous (&amp;ldquo;async&amp;rdquo;) Python, but does not yet support asynchronous views or middleware; they will be coming in a future release.</source>
          <target state="translated">Djangoは非同期（「async」）Pythonのサポートを開発していますが、非同期ビューやミドルウェアはまだサポートしていません。それらは将来のリリースで提供される予定です。</target>
        </trans-unit>
        <trans-unit id="70171ba1481e458bdd6f4ea8f7ba4ccc3bcb0412" translate="yes" xml:space="preserve">
          <source>Django has full support for &lt;a href=&quot;translation&quot;&gt;translation of text&lt;/a&gt;, &lt;a href=&quot;formatting&quot;&gt;formatting of dates, times and numbers&lt;/a&gt;, and &lt;a href=&quot;timezones&quot;&gt;time zones&lt;/a&gt;.</source>
          <target state="translated">Djangoはを完全にサポートしている&lt;a href=&quot;translation&quot;&gt;テキストの翻訳を&lt;/a&gt;、&lt;a href=&quot;formatting&quot;&gt;日付、時刻、および数値の書式設定&lt;/a&gt;、および&lt;a href=&quot;timezones&quot;&gt;タイムゾーン&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="80973c82b972bf5421dd42f15de817695f8c2c39" translate="yes" xml:space="preserve">
          <source>Django has support for writing asynchronous (&amp;ldquo;async&amp;rdquo;) views, along with an entirely async-enabled request stack if you are running under &lt;a href=&quot;../howto/deployment/asgi/index&quot;&gt;ASGI&lt;/a&gt;. Async views will still work under WSGI, but with performance penalties, and without the ability to have efficient long-running requests.</source>
          <target state="translated">Djangoは、&lt;a href=&quot;../howto/deployment/asgi/index&quot;&gt;ASGIで&lt;/a&gt;実行している場合、完全に非同期対応のリクエストスタックとともに、非同期（「非同期」）ビューの記述をサポートしています。非同期ビューは引き続きWSGIで機能しますが、パフォーマンスが低下し、効率的な長時間実行リクエストを実行できません。</target>
        </trans-unit>
        <trans-unit id="02212fe30cb464bd0cb4d2f5c7255cb588a37675" translate="yes" xml:space="preserve">
          <source>Django has the concept of &amp;ldquo;views&amp;rdquo; to encapsulate the logic responsible for processing a user&amp;rsquo;s request and for returning the response. Find all you need to know about views via the links below:</source>
          <target state="translated">Djangoには、「ビュー」という概念があり、ユーザーのリクエストを処理し、レスポンスを返すロジックをカプセル化します。以下のリンクから、ビューについて知っておくべきことをすべて見つけてください。</target>
        </trans-unit>
        <trans-unit id="8f6f29879aaa7b24e5eddf6585895a4b12c3f27f" translate="yes" xml:space="preserve">
          <source>Django has two base classes that follow the query expression API and from where all Django builtin lookups are derived:</source>
          <target state="translated">Django には、クエリ式 API に従う 2 つの基底クラスがあり、Django ビルドインのルックアップはすべてここから派生します。</target>
        </trans-unit>
        <trans-unit id="be84eb125a834e74b80c2e3097a204ff36350539" translate="yes" xml:space="preserve">
          <source>Django includes a &amp;ldquo;signal dispatcher&amp;rdquo; which helps allow decoupled applications get notified when actions occur elsewhere in the framework. In a nutshell, signals allow certain &lt;em&gt;senders&lt;/em&gt; to notify a set of &lt;em&gt;receivers&lt;/em&gt; that some action has taken place. They&amp;rsquo;re especially useful when many pieces of code may be interested in the same events.</source>
          <target state="translated">Djangoには、フレームワーク内の別の場所でアクションが発生したときに、分離されたアプリケーションに通知を送信できるようにする「シグナルディスパッチャー」が含まれています。簡単に言えば、シグナルにより、特定の&lt;em&gt;送信者&lt;/em&gt;は、何らかのアクションが発生したことを一連の&lt;em&gt;受信&lt;/em&gt;&lt;em&gt;者&lt;/em&gt;に通知できます。これらは、多くのコードが同じイベントに関心がある可能性がある場合に特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="95c98177d04c670efd39a48328d99ce1c912aeb0" translate="yes" xml:space="preserve">
          <source>Django includes a &lt;a href=&quot;#module-django.contrib.contenttypes&quot;&gt;&lt;code&gt;contenttypes&lt;/code&gt;&lt;/a&gt; application that can track all of the models installed in your Django-powered project, providing a high-level, generic interface for working with your models.</source>
          <target state="translated">Djangoには、Djangoを利用したプロジェクトにインストールされているすべてのモデルを追跡できる&lt;a href=&quot;#module-django.contrib.contenttypes&quot;&gt; &lt;code&gt;contenttypes&lt;/code&gt; &lt;/a&gt;アプリケーションが含まれており、モデルを操作するための高レベルで汎用的なインターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="8f052430bd328242c3971f45fe45b01bbd6079d7" translate="yes" xml:space="preserve">
          <source>Django includes a &lt;a href=&quot;../../ref/settings#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt; setting that defaults to &lt;code&gt;America/Chicago&lt;/code&gt;. This probably isn&amp;rsquo;t where you live, so you might want to change it in your settings file.</source>
          <target state="translated">Djangoには、デフォルトで &lt;code&gt;America/Chicago&lt;/code&gt; に設定された&lt;a href=&quot;../../ref/settings#std:setting-TIME_ZONE&quot;&gt; &lt;code&gt;TIME_ZONE&lt;/code&gt; &lt;/a&gt;設定が含まれています。これはおそらくあなたが住んでいる場所ではないので、設定ファイルで変更したいかもしれません。</target>
        </trans-unit>
        <trans-unit id="458388d11f65fde27fe771afc19b0bb7b7ebe648" translate="yes" xml:space="preserve">
          <source>Django includes a number of &lt;code&gt;HttpResponse&lt;/code&gt; subclasses that handle different types of HTTP responses. Like &lt;code&gt;HttpResponse&lt;/code&gt;, these subclasses live in &lt;a href=&quot;#module-django.http&quot;&gt;&lt;code&gt;django.http&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Djangoには、さまざまなタイプのHTTP応答を処理する多数の &lt;code&gt;HttpResponse&lt;/code&gt; サブクラスが含まれています。 &lt;code&gt;HttpResponse&lt;/code&gt; と同様に、これらのサブクラスは&lt;a href=&quot;#module-django.http&quot;&gt; &lt;code&gt;django.http&lt;/code&gt; にあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="889426a65b3fcbafa209dd0d2e2335cd4097af62" translate="yes" xml:space="preserve">
          <source>Django includes default views and templates for several HTTP error codes. You may want to override the default templates by creating the following templates in your root template directory: &lt;code&gt;404.html&lt;/code&gt;, &lt;code&gt;500.html&lt;/code&gt;, &lt;code&gt;403.html&lt;/code&gt;, and &lt;code&gt;400.html&lt;/code&gt;. The &lt;a href=&quot;../../ref/views#error-views&quot;&gt;default error views&lt;/a&gt; that use these templates should suffice for 99% of Web applications, but you can &lt;a href=&quot;../../topics/http/views#customizing-error-views&quot;&gt;customize them&lt;/a&gt; as well.</source>
          <target state="translated">Djangoには、いくつかのHTTPエラーコード用のデフォルトのビューとテンプレートが含まれています。：あなたは、ルートテンプレートディレクトリにある以下のテンプレート作成することによって、デフォルトのテンプレートを上書きすることもできます &lt;code&gt;404.html&lt;/code&gt; 、 &lt;code&gt;500.html&lt;/code&gt; 、 &lt;code&gt;403.html&lt;/code&gt; 、および &lt;code&gt;400.html&lt;/code&gt; を。&lt;a href=&quot;../../ref/views#error-views&quot;&gt;デフォルトのエラー・ビュー&lt;/a&gt;これらのテンプレートを使用するWebアプリケーションの99％のために十分ですが、あなたはすることができ&lt;a href=&quot;../../topics/http/views#customizing-error-views&quot;&gt;、それらをカスタマイズする&lt;/a&gt;だけでなく。</target>
        </trans-unit>
        <trans-unit id="4b1ddc4008820604470f2b37fdb58cc12683176d" translate="yes" xml:space="preserve">
          <source>Django includes four validators:</source>
          <target state="translated">Djangoには4つのバリデータが含まれています。</target>
        </trans-unit>
        <trans-unit id="d982af0e146a95c3fdad2da04478ab52508cee2e" translate="yes" xml:space="preserve">
          <source>Django includes getting-started documentation for the following ASGI servers:</source>
          <target state="translated">Django には、以下の ASGI サーバのためのスタートアップのためのドキュメントが含まれています。</target>
        </trans-unit>
        <trans-unit id="f4e3a0f6836080b1a437607ead12ee23154d9bb7" translate="yes" xml:space="preserve">
          <source>Django includes getting-started documentation for the following WSGI servers:</source>
          <target state="translated">Django には、以下の WSGI サーバのためのスタートアップドキュメントが含まれています。</target>
        </trans-unit>
        <trans-unit id="0ab315223bded83f350627251bec56c9651e75dd" translate="yes" xml:space="preserve">
          <source>Django includes many &lt;a href=&quot;../../topics/security&quot;&gt;security features&lt;/a&gt;. Some are built-in and always enabled. Others are optional because they aren&amp;rsquo;t always appropriate, or because they&amp;rsquo;re inconvenient for development. For example, forcing HTTPS may not be suitable for all websites, and it&amp;rsquo;s impractical for local development.</source>
          <target state="translated">Djangoには多くの&lt;a href=&quot;../../topics/security&quot;&gt;セキュリティ機能が&lt;/a&gt;含まれています。一部は組み込みで常に有効になっています。その他は、常に適切であるとは限らないため、または開発に不便であるため、オプションです。たとえば、HTTPSの強制はすべてのWebサイトに適しているとは限らず、ローカルでの開発には非現実的です。</target>
        </trans-unit>
        <trans-unit id="19f1d90d2f2adb78cf256194f312c4801f7a5470" translate="yes" xml:space="preserve">
          <source>Django initializes your middleware with only the &lt;code&gt;get_response&lt;/code&gt; argument, so you can&amp;rsquo;t define &lt;code&gt;__init__()&lt;/code&gt; as requiring any other arguments.</source>
          <target state="translated">Djangoは &lt;code&gt;get_response&lt;/code&gt; 引数のみでミドルウェアを初期化するため、他の引数を必要とする &lt;code&gt;__init__()&lt;/code&gt; を定義することはできません。</target>
        </trans-unit>
        <trans-unit id="a3fea8dbbe7a338b352bdae1f450b071ec197f74" translate="yes" xml:space="preserve">
          <source>Django inserts the given SQL snippet directly into the &lt;code&gt;SELECT&lt;/code&gt; statement, so the resulting SQL of the above example would be something like:</source>
          <target state="translated">Djangoは指定されたSQLスニペットを &lt;code&gt;SELECT&lt;/code&gt; ステートメントに直接挿入するため、上記の例の結果のSQLは次のようになります。</target>
        </trans-unit>
        <trans-unit id="afdb59ef1b6ee4ec4f5cb447427cc133e45be7f6" translate="yes" xml:space="preserve">
          <source>Django is a Python Web framework. See &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/install/#faq-python-version-support&quot;&gt;What Python version can I use with Django?&lt;/a&gt; for details.</source>
          <target state="translated">DjangoはPython Webフレームワークです。&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/install/#faq-python-version-support&quot;&gt;Djangoで使用できるPythonのバージョンを&lt;/a&gt;参照してください。詳細については。</target>
        </trans-unit>
        <trans-unit id="9e6910a8beadf938665e770019719edcff621ec4" translate="yes" xml:space="preserve">
          <source>Django is a Python Web framework. See &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/faq/install/#faq-python-version-support&quot;&gt;What Python version can I use with Django?&lt;/a&gt; for details.</source>
          <target state="translated">DjangoはPythonWebフレームワークです。&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/faq/install/#faq-python-version-support&quot;&gt;Djangoで使用できるPythonのバージョンを確認して&lt;/a&gt;ください。詳細については。</target>
        </trans-unit>
        <trans-unit id="482ea90df7eed9b987c7c25b2f922c8b9edb5bca" translate="yes" xml:space="preserve">
          <source>Django is a Python web framework, thus requiring Python to be installed on your machine. At the time of writing, Python 3.7 is the latest version.</source>
          <target state="translated">DjangoはPythonのWebフレームワークであるため、マシンにPythonをインストールする必要があります。執筆時点では、Python 3.7が最新バージョンです。</target>
        </trans-unit>
        <trans-unit id="1646c2715b4c9661ac327761a61edcfbc5cf3861" translate="yes" xml:space="preserve">
          <source>Django is a Python web framework, thus requiring Python to be installed on your machine. At the time of writing, Python 3.8 is the latest version.</source>
          <target state="translated">DjangoはPythonのWebフレームワークであるため、マシンにPythonをインストールする必要があります。執筆時点では、Python 3.8が最新バージョンです。</target>
        </trans-unit>
        <trans-unit id="e1f335da822bd02cbc874978d6f8f3baa1622b97" translate="yes" xml:space="preserve">
          <source>Django is designed for short-lived requests. Streaming responses will tie a worker process for the entire duration of the response. This may result in poor performance.</source>
          <target state="translated">Django は短命なリクエストのために設計されています。ストリーミングされたレスポンスは、その間ずっとワーカープロセスを縛ってしまいます。その結果、パフォーマンスが低下する可能性があります。</target>
        </trans-unit>
        <trans-unit id="b2bac1d86c0e2adfea324586f9103faccfe93125" translate="yes" xml:space="preserve">
          <source>Django is full of shortcuts to make Web developers&amp;rsquo; lives easier, but all those tools are of no use if you can&amp;rsquo;t easily deploy your sites. Since Django&amp;rsquo;s inception, ease of deployment has been a major goal.</source>
          <target state="translated">DjangoにはWeb開発者の生活を楽にするショートカットがたくさんありますが、サイトを簡単に展開できない場合、これらのツールはすべて役に立ちません。Djangoの誕生以来、展開の容易さは主要な目標でした。</target>
        </trans-unit>
        <trans-unit id="201fd29496e4248c34f32949f8bac670ba3b1dc2" translate="yes" xml:space="preserve">
          <source>Django is itself quite lazy. A good example of this can be found in the evaluation of &lt;code&gt;QuerySets&lt;/code&gt;. &lt;a href=&quot;db/queries#querysets-are-lazy&quot;&gt;QuerySets are lazy&lt;/a&gt;. Thus a &lt;code&gt;QuerySet&lt;/code&gt; can be created, passed around and combined with other &lt;code&gt;QuerySets&lt;/code&gt;, without actually incurring any trips to the database to fetch the items it describes. What gets passed around is the &lt;code&gt;QuerySet&lt;/code&gt; object, not the collection of items that - eventually - will be required from the database.</source>
          <target state="translated">Django自体はかなり怠惰です。これの良い例は &lt;code&gt;QuerySets&lt;/code&gt; の評価にあります。&lt;a href=&quot;db/queries#querysets-are-lazy&quot;&gt;QuerySetはレイジー&lt;/a&gt;です。したがって、実際にデータベースへのアクセスを行わずに、 &lt;code&gt;QuerySet&lt;/code&gt; を作成し、渡し、他の &lt;code&gt;QuerySets&lt;/code&gt; と組み合わせることができます。渡されるのは &lt;code&gt;QuerySet&lt;/code&gt; オブジェクトであり、最終的にはデータベースから必要となるアイテムのコレクションではありません。</target>
        </trans-unit>
        <trans-unit id="0549ee619ca20fd5aa3ed339b9b900d280cdf7f0" translate="yes" xml:space="preserve">
          <source>Django is, and will continue to be, a database-agnostic web framework. We would encourage those writing reusable applications for the Django community to write database-agnostic code where practical. However, we recognize that real world projects written using Django need not be database-agnostic. In fact, once a project reaches a given size changing the underlying data store is already a significant challenge and is likely to require changing the code base in some ways to handle differences between the data stores.</source>
          <target state="translated">Django はデータベースにとらわれないウェブフレームワークです。私たちは、Django コミュニティのために再利用可能なアプリケーションを書く人たちに、実用的な場合にはデータベースにとらわれないコードを書くことを奨励します。しかし、私たちは Django を使って書かれた現実のプロジェクトがデータベースにとらわれないものである必要はないと認識しています。実際、プロジェクトがあるサイズに達すると、基礎となるデータストアを変更することはすでに重要な課題であり、データストア間の違いを処理するためにコードベースを変更する必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="912735e93e4352d0c76bd3908101b4394a009011" translate="yes" xml:space="preserve">
          <source>Django itself uses this signal to reset various data:</source>
          <target state="translated">Django 自体はこのシグナルを使って様々なデータをリセットしています。</target>
        </trans-unit>
        <trans-unit id="f85ad78c669804577f4d4ad5aff882094205b842" translate="yes" xml:space="preserve">
          <source>Django loads that Python module and looks for the variable &lt;code&gt;urlpatterns&lt;/code&gt;. This should be a &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-sequence&quot;&gt;sequence&lt;/a&gt; of &lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;django.urls.path()&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt;&lt;code&gt;django.urls.re_path()&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">DjangoはそのPythonモジュールをロードし、変数 &lt;code&gt;urlpatterns&lt;/code&gt; を探します。これは&lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt; &lt;code&gt;django.urls.path()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt; &lt;code&gt;django.urls.re_path()&lt;/code&gt; &lt;/a&gt;インスタンスの&lt;a href=&quot;https://docs.python.org/3/glossary.html#term-sequence&quot;&gt;シーケンス&lt;/a&gt;でなければなりません。</target>
        </trans-unit>
        <trans-unit id="afe265878847e6456e60bb211412bcf9f5e8a9a6" translate="yes" xml:space="preserve">
          <source>Django makes shallow copies of manager objects during certain queries; if your Manager cannot be copied, those queries will fail.</source>
          <target state="translated">Django は特定のクエリの間、マネージャオブジェクトの浅いコピーを行います。</target>
        </trans-unit>
        <trans-unit id="1443579652f5e31fe2c79e4157d5c6b3e1651319" translate="yes" xml:space="preserve">
          <source>Django makes the general assumption that the original strings in a translatable project are written in English. You can choose another language, but you must be aware of certain limitations:</source>
          <target state="translated">Django は、翻訳可能なプロジェクトの元の文字列が英語で書かれていることを一般的に前提としています。他の言語を選択することもできますが、ある種の制限があることを認識しておかなければなりません。</target>
        </trans-unit>
        <trans-unit id="32cc1a9e9f5ff0bce01dc2b97faef8a991337ac5" translate="yes" xml:space="preserve">
          <source>Django may, from time to time, extend the capabilities of the test runner by adding new arguments. The &lt;code&gt;**kwargs&lt;/code&gt; declaration allows for this expansion. If you subclass &lt;code&gt;DiscoverRunner&lt;/code&gt; or write your own test runner, ensure it accepts &lt;code&gt;**kwargs&lt;/code&gt;.</source>
          <target state="translated">Djangoは、新しい引数を追加して、テストランナーの機能を拡張することがあります。 &lt;code&gt;**kwargs&lt;/code&gt; からの宣言は、この拡張が可能になります。 &lt;code&gt;DiscoverRunner&lt;/code&gt; をサブクラス化するか、独自のテストランナーを作成する場合は、 &lt;code&gt;**kwargs&lt;/code&gt; を受け入れることを確認してください。</target>
        </trans-unit>
        <trans-unit id="a513cb8ffab9733ecd73df9e0a66010c51c48d6a" translate="yes" xml:space="preserve">
          <source>Django model fields for &lt;a href=&quot;https://www.opengeospatial.org/&quot;&gt;OGC&lt;/a&gt; geometries and raster data.</source>
          <target state="translated">&lt;a href=&quot;https://www.opengeospatial.org/&quot;&gt;OGC&lt;/a&gt;ジオメトリとラスターデータのDjangoモデルフィールド。</target>
        </trans-unit>
        <trans-unit id="7cf3763979c17f97ec99497d74346dba8c6758fd" translate="yes" xml:space="preserve">
          <source>Django must be able to instantiate your storage system without any arguments. This means that any settings should be taken from &lt;code&gt;django.conf.settings&lt;/code&gt;:</source>
          <target state="translated">Djangoは、引数なしでストレージシステムをインスタンス化できなければなりません。つまり、設定は &lt;code&gt;django.conf.settings&lt;/code&gt; から取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="466871cc514f71197f88e028032acda78b9b0ca9" translate="yes" xml:space="preserve">
          <source>Django needs the following parameters for its database connections:</source>
          <target state="translated">Django はデータベース接続に以下のパラメータを必要とします。</target>
        </trans-unit>
        <trans-unit id="c394ebc68a36eb9d6dafc0d188b124f5baafb688" translate="yes" xml:space="preserve">
          <source>Django needs to fetch objects into memory to send signals and handle cascades. However, if there are no cascades and no signals, then Django may take a fast-path and delete objects without fetching into memory. For large deletes this can result in significantly reduced memory usage. The amount of executed queries can be reduced, too.</source>
          <target state="translated">Django はシグナルを送信したり、カスケードを処理したりするために、オブジェクトをメモリにフェッチする必要があります。しかし、カスケードもシグナルもない場合、Django はメモリにフェッチせずに高速にオブジェクトを削除してしまうかもしれません。大規模な削除の場合、これはメモリ使用量の大幅な削減につながります。実行されるクエリの量も減らすことができます。</target>
        </trans-unit>
        <trans-unit id="1e21e7c06bd542c742f4ee927b87acbd91923002" translate="yes" xml:space="preserve">
          <source>Django offers a powerful and intuitive way to &amp;ldquo;follow&amp;rdquo; relationships in lookups, taking care of the SQL &lt;code&gt;JOIN&lt;/code&gt;s for you automatically, behind the scenes. To span a relationship, use the field name of related fields across models, separated by double underscores, until you get to the field you want.</source>
          <target state="translated">Djangoは、ルックアップの関係を「フォロー」する強力で直感的な方法を提供し、バックグラウンドでSQL &lt;code&gt;JOIN&lt;/code&gt; を自動的に処理します。関係を広げるには、必要なフィールドに到達するまで、二重アンダースコアで区切られたモデル全体の関連フィールドのフィールド名を使用します。</target>
        </trans-unit>
        <trans-unit id="38857e15171289c6b27e191218d8922ef0f1087b" translate="yes" xml:space="preserve">
          <source>Django offers a robust internationalization and localization framework to assist you in the development of applications for multiple languages and world regions:</source>
          <target state="translated">Django は堅牢な国際化とローカリゼーションのフレームワークを提供し、複数の言語や世界の地域に対応したアプリケーションの開発を支援します。</target>
        </trans-unit>
        <trans-unit id="065b923b03b2418a3da24efd7e3d3a6309039242" translate="yes" xml:space="preserve">
          <source>Django offers a wide variety of &lt;a href=&quot;../ref/models/querysets#field-lookups&quot;&gt;built-in lookups&lt;/a&gt; for filtering (for example, &lt;code&gt;exact&lt;/code&gt; and &lt;code&gt;icontains&lt;/code&gt;). This documentation explains how to write custom lookups and how to alter the working of existing lookups. For the API references of lookups, see the &lt;a href=&quot;../ref/models/lookups&quot;&gt;Lookup API reference&lt;/a&gt;.</source>
          <target state="translated">Djangoは、フィルタリングのためにさまざまな&lt;a href=&quot;../ref/models/querysets#field-lookups&quot;&gt;組み込みルックアップ&lt;/a&gt;を提供しています（たとえば、 &lt;code&gt;exact&lt;/code&gt; および &lt;code&gt;icontains&lt;/code&gt; ）。このドキュメントでは、カスタムルックアップの作成方法と、既存のルックアップの動作を変更する方法について説明します。&lt;a href=&quot;../ref/models/lookups&quot;&gt;ルックアップのAPIリファレンス&lt;/a&gt;については、ルックアップAPIリファレンスをご覧ください。</target>
        </trans-unit>
        <trans-unit id="7b4e0858a1b6a38d004b95b8c4f3b2ff1cbf1dc0" translate="yes" xml:space="preserve">
          <source>Django offers many different ways of approaching things, but just because it&amp;rsquo;s possible to do something in a certain way doesn&amp;rsquo;t mean that it&amp;rsquo;s the most appropriate way to do it. For example, you might find that you could calculate the same thing - the number of items in a collection, perhaps - in a &lt;code&gt;QuerySet&lt;/code&gt;, in Python, or in a template.</source>
          <target state="translated">Djangoにはさまざまなアプローチ方法がありますが、特定の方法で何かを実行できるからといって、それが最も適切な方法であるとは限りません。たとえば、 &lt;code&gt;QuerySet&lt;/code&gt; 、Python、またはテンプレートで、同じこと-コレクション内のアイテムの数-を計算できることに気付くかもしれません。</target>
        </trans-unit>
        <trans-unit id="b430bec41e83521a629bc376b17e0920bc5b746f" translate="yes" xml:space="preserve">
          <source>Django offers many utility functions (particularly in &lt;code&gt;django.utils&lt;/code&gt;) that take a string as their first argument and do something to that string. These functions are used by template filters as well as directly in other code.</source>
          <target state="translated">Djangoは多くのユーティリティ関数（特に &lt;code&gt;django.utils&lt;/code&gt; にあります）を提供します。それらは最初の引数として文字列を取り、その文字列に対して何かを行います。これらの関数は、テンプレートフィルターによって使用されるだけでなく、他のコードでも直接使用されます。</target>
        </trans-unit>
        <trans-unit id="bfd5e374353e7a52d69c6d0ed581c985971ea0cb" translate="yes" xml:space="preserve">
          <source>Django offers multiple tools commonly needed in the development of Web applications:</source>
          <target state="translated">Djangoは、Webアプリケーションの開発で一般的に必要とされる複数のツールを提供しています。</target>
        </trans-unit>
        <trans-unit id="ca7421cba4913cb5ffd18cdd485cbc39228370a7" translate="yes" xml:space="preserve">
          <source>Django officially supports the following databases:</source>
          <target state="translated">Django は公式に以下のデータベースをサポートしています。</target>
        </trans-unit>
        <trans-unit id="72e1a567d5808522e00acf5e6b2302c7dfa107c3" translate="yes" xml:space="preserve">
          <source>Django only sends a cookie if it needs to. If you don&amp;rsquo;t set any session data, it won&amp;rsquo;t send a session cookie.</source>
          <target state="translated">Djangoは必要な場合にのみCookieを送信します。セッションデータを設定しない場合、セッションCookieは送信されません。</target>
        </trans-unit>
        <trans-unit id="7371c7560496705b6d1494e4c2ec548e4c73969d" translate="yes" xml:space="preserve">
          <source>Django only supports &lt;code&gt;.po&lt;/code&gt; files encoded in UTF-8 and without any BOM (Byte Order Mark) so if your text editor adds such marks to the beginning of files by default then you will need to reconfigure it.</source>
          <target state="translated">Djangoは、UTF-8でエンコードされ、BOM（バイトオーダーマーク）なしの &lt;code&gt;.po&lt;/code&gt; ファイルのみをサポートしているため、テキストエディターがデフォルトでそのようなマークをファイルの先頭に追加する場合は、再構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="59038bedeeccc68721f3a09563a4a60aed17f4a7" translate="yes" xml:space="preserve">
          <source>Django only supports naive time objects and will raise an exception if you attempt to save an aware time object, as a timezone for a time with no associated date does not make sense.</source>
          <target state="translated">Django はナイーブな時間オブジェクトのみをサポートしており、日付が関連付けられていない時間のタイムゾーンを保存しようとすると例外が発生します。</target>
        </trans-unit>
        <trans-unit id="d1d610f1ca06a37a878ee870e9e36e1b72357940" translate="yes" xml:space="preserve">
          <source>Django opens a connection to the database when it first makes a database query. It keeps this connection open and reuses it in subsequent requests. Django closes the connection once it exceeds the maximum age defined by &lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt;&lt;code&gt;CONN_MAX_AGE&lt;/code&gt;&lt;/a&gt; or when it isn&amp;rsquo;t usable any longer.</source>
          <target state="translated">Djangoは、最初にデータベースクエリを行うときに、データベースへの接続を開きます。この接続を開いたままにし、後続の要求で再利用します。Djangoは、接続が&lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt; &lt;code&gt;CONN_MAX_AGE&lt;/code&gt; で&lt;/a&gt;定義された最大経過時間を超えるか、使用できなくなると、接続を閉じます。</target>
        </trans-unit>
        <trans-unit id="a7e4a4de870ba8d22db27d84b17b4be68dca17b4" translate="yes" xml:space="preserve">
          <source>Django originally accepted only ASCII letters and numbers in usernames. Although it wasn&amp;rsquo;t a deliberate choice, Unicode characters have always been accepted when using Python 3. Django 1.10 officially added Unicode support in usernames, keeping the ASCII-only behavior on Python 2.</source>
          <target state="translated">Djangoは当初、ユーザー名にASCII文字と数字のみを受け入れていました。意図的な選択ではありませんでしたが、Python 3を使用する場合、Unicode文字は常に受け入れられていました。Django1.10は正式にユーザー名にUnicodeサポートを追加し、Python 2でのASCIIのみの動作を維持しています。</target>
        </trans-unit>
        <trans-unit id="cf7c86e8f2e5255a9c61751a7333e5a4179d5575" translate="yes" xml:space="preserve">
          <source>Django places some restrictions on model field names:</source>
          <target state="translated">Django はモデルフィールド名にいくつかの制限を設けています。</target>
        </trans-unit>
        <trans-unit id="ecf8b16feb49633256657cbf500f8e8e8e2904de" translate="yes" xml:space="preserve">
          <source>Django projects generally rely on the &lt;a href=&quot;../../topics/templates#template-engines&quot;&gt;high level, backend agnostic APIs&lt;/a&gt; for each of these steps instead of the template system&amp;rsquo;s lower level APIs:</source>
          <target state="translated">Djangoプロジェクトは通常、テンプレートシステムの低レベルのAPIではなく、これらの各ステップで&lt;a href=&quot;../../topics/templates#template-engines&quot;&gt;高レベルのバックエンドに依存しないAPI&lt;/a&gt;に依存しています。</target>
        </trans-unit>
        <trans-unit id="c163a316487f40e600f330cb480ac88813dc8584" translate="yes" xml:space="preserve">
          <source>Django provides &lt;a href=&quot;../../ref/models/expressions#django.db.models.F&quot;&gt;&lt;code&gt;F expressions&lt;/code&gt;&lt;/a&gt; to allow such comparisons. Instances of &lt;code&gt;F()&lt;/code&gt; act as a reference to a model field within a query. These references can then be used in query filters to compare the values of two different fields on the same model instance.</source>
          <target state="translated">Djangoはそのような比較を可能にする&lt;a href=&quot;../../ref/models/expressions#django.db.models.F&quot;&gt; &lt;code&gt;F expressions&lt;/code&gt; &lt;/a&gt;を提供しています。 &lt;code&gt;F()&lt;/code&gt; のインスタンスは、クエリ内のモデルフィールドへの参照として機能します。これらの参照をクエリフィルターで使用して、同じモデルインスタンス上の2つの異なるフィールドの値を比較できます。</target>
        </trans-unit>
        <trans-unit id="a377f8b0554bbbca16c9c695653dfbff6653d085" translate="yes" xml:space="preserve">
          <source>Django provides &lt;code&gt;django.utils.deprecation.MiddlewareMixin&lt;/code&gt; to ease creating middleware classes that are compatible with both &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; and the old &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt;, and support synchronous and asynchronous requests. All middleware classes included with Django are compatible with both settings.</source>
          <target state="translated">Djangoは &lt;code&gt;django.utils.deprecation.MiddlewareMixin&lt;/code&gt; を提供して、&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;と古い &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt; の両方と互換性があり、同期および非同期の要求をサポートするミドルウェアクラスの作成を容易にします。Djangoに含まれるすべてのミドルウェアクラスは、両方の設定と互換性があります。</target>
        </trans-unit>
        <trans-unit id="2d33c0a6ab0b5b41c0ecd931abf601d0dda8a342" translate="yes" xml:space="preserve">
          <source>Django provides &lt;code&gt;django.utils.deprecation.MiddlewareMixin&lt;/code&gt; to ease creating middleware classes that are compatible with both &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; and the old &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt;. All middleware classes included with Django are compatible with both settings.</source>
          <target state="translated">Djangoは &lt;code&gt;django.utils.deprecation.MiddlewareMixin&lt;/code&gt; を提供して、&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;と古い &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt; の両方と互換性のあるミドルウェアクラスの作成を容易にします。Djangoに含まれるすべてのミドルウェアクラスは、両方の設定と互換性があります。</target>
        </trans-unit>
        <trans-unit id="fffbaba5fcd2e12de14512168b98ad31016399e3" translate="yes" xml:space="preserve">
          <source>Django provides a &lt;a href=&quot;../ref/signals&quot;&gt;set of built-in signals&lt;/a&gt; that let user code get notified by Django itself of certain actions. These include some useful notifications:</source>
          <target state="translated">Djangoは、ユーザーコードがDjango自体から特定のアクションを通知されるようにする&lt;a href=&quot;../ref/signals&quot;&gt;一連の組み込み信号&lt;/a&gt;を提供します。これらには、いくつかの便利な通知が含まれます。</target>
        </trans-unit>
        <trans-unit id="d0d5dd43b0db8640a538b2b65f90fc54a95d58f1" translate="yes" xml:space="preserve">
          <source>Django provides a &lt;code&gt;DoesNotExist&lt;/code&gt; exception as an attribute of each model class to identify the class of object that could not be found and to allow you to catch a particular model class with &lt;code&gt;try/except&lt;/code&gt;. The exception is a subclass of &lt;a href=&quot;../exceptions#django.core.exceptions.ObjectDoesNotExist&quot;&gt;&lt;code&gt;django.core.exceptions.ObjectDoesNotExist&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Djangoは、各モデルクラスの属性として &lt;code&gt;DoesNotExist&lt;/code&gt; 例外を提供して、見つからなかったオブジェクトのクラスを識別し、 &lt;code&gt;try/except&lt;/code&gt; で特定のモデルクラスをキャッチできるようにします。例外は&lt;a href=&quot;../exceptions#django.core.exceptions.ObjectDoesNotExist&quot;&gt; &lt;code&gt;django.core.exceptions.ObjectDoesNotExist&lt;/code&gt; の&lt;/a&gt;サブクラスです。</target>
        </trans-unit>
        <trans-unit id="4f1e063c5b389480fd3de0ede8b83858a999cc4d" translate="yes" xml:space="preserve">
          <source>Django provides a &lt;code&gt;DoesNotExist&lt;/code&gt; exception as an attribute of each model class to identify the class of object that could not be found, allowing you to catch exceptions for a particular model class. The exception is a subclass of &lt;a href=&quot;../exceptions#django.core.exceptions.ObjectDoesNotExist&quot;&gt;&lt;code&gt;django.core.exceptions.ObjectDoesNotExist&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Djangoは、各モデルクラスの属性として &lt;code&gt;DoesNotExist&lt;/code&gt; 例外を提供して、見つからなかったオブジェクトのクラスを識別し、特定のモデルクラスの例外をキャッチできるようにします。例外は&lt;a href=&quot;../exceptions#django.core.exceptions.ObjectDoesNotExist&quot;&gt; &lt;code&gt;django.core.exceptions.ObjectDoesNotExist&lt;/code&gt; の&lt;/a&gt;サブクラスです。</target>
        </trans-unit>
        <trans-unit id="afcf7ff55371a1b5f2c0e1c4e5d7b6d5ed01daa3" translate="yes" xml:space="preserve">
          <source>Django provides a &lt;code&gt;File&lt;/code&gt; class, which is used as a proxy to the file&amp;rsquo;s contents and operations. This can be subclassed to customize how the file is accessed, and what methods are available. It lives at &lt;code&gt;django.db.models.fields.files&lt;/code&gt;, and its default behavior is explained in the &lt;a href=&quot;../ref/files/file&quot;&gt;file documentation&lt;/a&gt;.</source>
          <target state="translated">Djangoは &lt;code&gt;File&lt;/code&gt; クラスを提供します。これはファイルのコンテンツと操作のプロキシとして使用されます。これをサブクラス化して、ファイルへのアクセス方法と使用可能なメソッドをカスタマイズできます。それは住んで &lt;code&gt;django.db.models.fields.files&lt;/code&gt; 、およびそのデフォルトの動作は、で説明され&lt;a href=&quot;../ref/files/file&quot;&gt;たファイルのドキュメント&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bc8865715daf007431bbdd5dc4edea1ab747e1f3" translate="yes" xml:space="preserve">
          <source>Django provides a &lt;code&gt;MultipleObjectsReturned&lt;/code&gt; exception as an attribute of each model class to identify the class of object for which multiple objects were found, allowing you to catch exceptions for a particular model class. The exception is a subclass of &lt;a href=&quot;../exceptions#django.core.exceptions.MultipleObjectsReturned&quot;&gt;&lt;code&gt;django.core.exceptions.MultipleObjectsReturned&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Djangoは、各モデルクラスの属性として &lt;code&gt;MultipleObjectsReturned&lt;/code&gt; 例外を提供して、複数のオブジェクトが見つかったオブジェクトのクラスを識別し、特定のモデルクラスの例外をキャッチできるようにします。例外は&lt;a href=&quot;../exceptions#django.core.exceptions.MultipleObjectsReturned&quot;&gt; &lt;code&gt;django.core.exceptions.MultipleObjectsReturned&lt;/code&gt; の&lt;/a&gt;サブクラスです。</target>
        </trans-unit>
        <trans-unit id="d87f0c21e43cf137c5c5913a067cb9e9fee79678" translate="yes" xml:space="preserve">
          <source>Django provides a better way to target individual cache values. Django&amp;rsquo;s cache framework has a system-wide version identifier, specified using the &lt;a href=&quot;../ref/settings#std:setting-CACHES-VERSION&quot;&gt;&lt;code&gt;VERSION&lt;/code&gt;&lt;/a&gt; cache setting. The value of this setting is automatically combined with the cache prefix and the user-provided cache key to obtain the final cache key.</source>
          <target state="translated">Djangoは個々のキャッシュ値をターゲットにするより良い方法を提供します。Djangoのキャッシュフレームワークには、&lt;a href=&quot;../ref/settings#std:setting-CACHES-VERSION&quot;&gt; &lt;code&gt;VERSION&lt;/code&gt; &lt;/a&gt;キャッシュ設定を使用して指定されたシステム全体のバージョン識別子があります。この設定の値は、キャッシュプレフィックスおよびユーザー指定のキャッシュキーと自動的に組み合わされて、最終的なキャッシュキーを取得します。</target>
        </trans-unit>
        <trans-unit id="76f69c24cb1ecd4dbb5cc96356e68d931549edee" translate="yes" xml:space="preserve">
          <source>Django provides a built-in class specifically for images. &lt;a href=&quot;#django.core.files.images.ImageFile&quot;&gt;&lt;code&gt;django.core.files.images.ImageFile&lt;/code&gt;&lt;/a&gt; inherits all the attributes and methods of &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;, and additionally provides the following:</source>
          <target state="translated">Djangoは画像専用の組み込みクラスを提供します。&lt;a href=&quot;#django.core.files.images.ImageFile&quot;&gt; &lt;code&gt;django.core.files.images.ImageFile&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; の&lt;/a&gt;すべての属性とメソッドを継承し、さらに以下を提供します：</target>
        </trans-unit>
        <trans-unit id="6fc258af471fb89687c86135d46ce81ed7533981" translate="yes" xml:space="preserve">
          <source>Django provides a couple ways to validate the minimum or maximum number of submitted forms. Applications which need more customizable validation of the number of forms should use custom formset validation.</source>
          <target state="translated">Django は、送信されたフォームの最小数や最大数を検証するためのいくつかの方法を提供しています。よりカスタマイズ可能なフォーム数の検証を必要とするアプリケーションは、カスタムフォームセットの検証を使用してください。</target>
        </trans-unit>
        <trans-unit id="56c0922e2f585fd6ac9ae530e7ece3cfa064f63c" translate="yes" xml:space="preserve">
          <source>Django provides a few classes that help you manage paginated data &amp;ndash; that is, data that&amp;rsquo;s split across several pages, with &amp;ldquo;Previous/Next&amp;rdquo; links. These classes live in &lt;a href=&quot;https://github.com/django/django/blob/master/django/core/paginator.py&quot;&gt;django/core/paginator.py&lt;/a&gt;.</source>
          <target state="translated">Djangoは、ページ分割されたデータ、つまり「前へ/次へ」リンクを持つ複数のページに分割されたデータの管理に役立ついくつかのクラスを提供します。これらのクラスは&lt;a href=&quot;https://github.com/django/django/blob/master/django/core/paginator.py&quot;&gt;django / core / paginator.pyにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="269e9b744906a5b197eff615842d6d1498729aaa" translate="yes" xml:space="preserve">
          <source>Django provides a few ways to include this header in responses from your site:</source>
          <target state="translated">Django はこのヘッダをサイトからのレスポンスに含める方法をいくつか提供しています。</target>
        </trans-unit>
        <trans-unit id="fe622209e103a952cc331d8dc8b6c5d56a15c715" translate="yes" xml:space="preserve">
          <source>Django provides a flexible password storage system and uses PBKDF2 by default.</source>
          <target state="translated">Django は柔軟なパスワードストレージシステムを提供し、デフォルトで PBKDF2 を使用しています。</target>
        </trans-unit>
        <trans-unit id="7ee43670dc572d1aac1eff315b82c300cf4998ea" translate="yes" xml:space="preserve">
          <source>Django provides a handler to allow Apache to authenticate users directly against Django&amp;rsquo;s authentication backends. See the &lt;a href=&quot;apache-auth&quot;&gt;mod_wsgi authentication documentation&lt;/a&gt;.</source>
          <target state="translated">Djangoは、ApacheがDjangoの認証バックエンドに対して直接ユーザーを認証できるようにするハンドラーを提供します。&lt;a href=&quot;apache-auth&quot;&gt;mod_wsgi認証のドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bb4497fa4435f105e8224322a33656b81d743114" translate="yes" xml:space="preserve">
          <source>Django provides a number of utilities to handle the unique requirements of logging in Web server environment.</source>
          <target state="translated">Django には、Web サーバー環境でのログ取得というユニークな要件を処理するためのユーティリティが多数用意されています。</target>
        </trans-unit>
        <trans-unit id="ef8a3b092c4b1e1f92d62cfed7df38c2aaaab816" translate="yes" xml:space="preserve">
          <source>Django provides a range of &lt;code&gt;QuerySet&lt;/code&gt; refinement methods that modify either the types of results returned by the &lt;code&gt;QuerySet&lt;/code&gt; or the way its SQL query is executed.</source>
          <target state="translated">Djangoはの範囲を提供 &lt;code&gt;QuerySet&lt;/code&gt; いずれかによって返される結果の種類の変更精製方法 &lt;code&gt;QuerySet&lt;/code&gt; またはそのSQLクエリを実行する方法を。</target>
        </trans-unit>
        <trans-unit id="ec994ccadcee6e397535c4907b10f52a106fb071" translate="yes" xml:space="preserve">
          <source>Django provides a range of tools and libraries to help you build forms to accept input from site visitors, and then process and respond to the input.</source>
          <target state="translated">Django は、サイト訪問者からの入力を受け付けるためのフォームを構築し、その入力を処理して応答するためのツールやライブラリを提供しています。</target>
        </trans-unit>
        <trans-unit id="21d87a32da8e65d9a2c0ba5c79397addb4e73fb6" translate="yes" xml:space="preserve">
          <source>Django provides a representation of all the basic HTML widgets, plus some commonly used groups of widgets in the &lt;code&gt;django.forms.widgets&lt;/code&gt; module, including &lt;a href=&quot;#text-widgets&quot;&gt;the input of text&lt;/a&gt;, &lt;a href=&quot;#selector-widgets&quot;&gt;various checkboxes and selectors&lt;/a&gt;, &lt;a href=&quot;#file-upload-widgets&quot;&gt;uploading files&lt;/a&gt;, and &lt;a href=&quot;#composite-widgets&quot;&gt;handling of multi-valued input&lt;/a&gt;.</source>
          <target state="translated">Djangoは、すべての基本的なHTMLウィジェットの表現に加えて&lt;a href=&quot;#text-widgets&quot;&gt;、テキストの入力&lt;/a&gt;、&lt;a href=&quot;#selector-widgets&quot;&gt;さまざまなチェックボックスとセレクター&lt;/a&gt;、&lt;a href=&quot;#file-upload-widgets&quot;&gt;ファイルのアップロード&lt;/a&gt;、&lt;a href=&quot;#composite-widgets&quot;&gt;多値入力の処理&lt;/a&gt;など、 &lt;code&gt;django.forms.widgets&lt;/code&gt; モジュールでよく使用されるウィジェットのグループを提供します。</target>
        </trans-unit>
        <trans-unit id="c13f1fcd1a6612a07e5e2d5f81fc255b7a4c3994" translate="yes" xml:space="preserve">
          <source>Django provides a rich framework to facilitate the creation of forms and the manipulation of form data.</source>
          <target state="translated">Django は、フォームの作成やフォームデータの操作を容易にするための豊富なフレームワークを提供しています。</target>
        </trans-unit>
        <trans-unit id="a91c4b0029d235b1ffc6fcf7ac24293dbc66ef69" translate="yes" xml:space="preserve">
          <source>Django provides a single API to control database transactions.</source>
          <target state="translated">Djangoはデータベーストランザクションを制御するための単一のAPIを提供します。</target>
        </trans-unit>
        <trans-unit id="cc4c340b55cb0d94068045413022265cafe50e6b" translate="yes" xml:space="preserve">
          <source>Django provides a small set of tools that come in handy when writing tests.</source>
          <target state="translated">Django はテストを書くときに便利なツールを提供しています。</target>
        </trans-unit>
        <trans-unit id="203fd3530c69d681d45b9141d4b0374f388c1f5c" translate="yes" xml:space="preserve">
          <source>Django provides a solution such that the URL mapper is the only repository of the URL design. You feed it with your URLconf and then it can be used in both directions:</source>
          <target state="translated">Django は URL マッパーが URL デザインの唯一のリポジトリとなるようなソリューションを提供しています。それを URLconf でフィードして、それを両方向に利用することができます。</target>
        </trans-unit>
        <trans-unit id="bd2ca52ded4b2ebf6286531ba385c4fc7cc04d68" translate="yes" xml:space="preserve">
          <source>Django provides a test &lt;a href=&quot;../topics/testing/tools#django.test.Client&quot;&gt;&lt;code&gt;Client&lt;/code&gt;&lt;/a&gt; to simulate a user interacting with the code at the view level. We can use it in &lt;code&gt;tests.py&lt;/code&gt; or even in the &lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Djangoは、ビューレベルでコードを操作するユーザーをシミュレートするテスト&lt;a href=&quot;../topics/testing/tools#django.test.Client&quot;&gt; &lt;code&gt;Client&lt;/code&gt; &lt;/a&gt;を提供します。これは、 &lt;code&gt;tests.py&lt;/code&gt; または&lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt; &lt;code&gt;shell&lt;/code&gt; &lt;/a&gt;も使用できます。</target>
        </trans-unit>
        <trans-unit id="3f42e2428b8c3625df3c569af84ecf16d26754d4" translate="yes" xml:space="preserve">
          <source>Django provides about sixty built-in template filters. You can read all about them in the &lt;a href=&quot;builtins#ref-templates-builtins-filters&quot;&gt;built-in filter reference&lt;/a&gt;. To give you a taste of what&amp;rsquo;s available, here are some of the more commonly used template filters:</source>
          <target state="translated">Djangoは約60の組み込みテンプレートフィルターを提供しています。これらのすべてについては、&lt;a href=&quot;builtins#ref-templates-builtins-filters&quot;&gt;組み込みのフィルターリファレンスをご覧ください&lt;/a&gt;。利用できるものを味わうために、ここではより一般的に使用されるテンプレートフィルターの一部を示します。</target>
        </trans-unit>
        <trans-unit id="6f7bd7f6928fbb5902c2c4341257511fab266880" translate="yes" xml:space="preserve">
          <source>Django provides an API in the &lt;a href=&quot;#module-django.db.transaction&quot;&gt;&lt;code&gt;django.db.transaction&lt;/code&gt;&lt;/a&gt; module to manage the autocommit state of each database connection.</source>
          <target state="translated">Djangoは&lt;a href=&quot;#module-django.db.transaction&quot;&gt; &lt;code&gt;django.db.transaction&lt;/code&gt; &lt;/a&gt;モジュールにAPIを提供して、各データベース接続の自動コミット状態を管理します。</target>
        </trans-unit>
        <trans-unit id="a32767bd4d0c9fc108a948f6717476c963141f89" translate="yes" xml:space="preserve">
          <source>Django provides an abstraction layer (the &amp;ldquo;models&amp;rdquo;) for structuring and manipulating the data of your Web application. Learn more about it below:</source>
          <target state="translated">Djangoは、Webアプリケーションのデータを構造化および操作するための抽象化レイヤー（「モデル」）を提供します。詳しくは以下をご覧ください：</target>
        </trans-unit>
        <trans-unit id="89020375ab6678903ef78729454c331204c641c1" translate="yes" xml:space="preserve">
          <source>Django provides an integrated solution for these problems: It passes the translations into JavaScript, so you can call &lt;code&gt;gettext&lt;/code&gt;, etc., from within JavaScript.</source>
          <target state="translated">Djangoは、これらの問題の統合ソリューションを提供します。翻訳をJavaScriptに渡すため、JavaScript内から &lt;code&gt;gettext&lt;/code&gt; などを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="baebd7fed17bcc93678585e187478c84d03a5462" translate="yes" xml:space="preserve">
          <source>Django provides base view classes which will suit a wide range of applications. All views inherit from the &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; class, which handles linking the view into the URLs, HTTP method dispatching and other common features. &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.RedirectView&quot;&gt;&lt;code&gt;RedirectView&lt;/code&gt;&lt;/a&gt; provides a HTTP redirect, and &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt; extends the base class to make it also render a template.</source>
          <target state="translated">Djangoは、幅広いアプリケーションに適したベースビュークラスを提供します。すべてのビューは、URLへのビューのリンク、HTTPメソッドのディスパッチ、その他の一般的な機能を処理する&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;クラスから継承します。&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.RedirectView&quot;&gt; &lt;code&gt;RedirectView&lt;/code&gt; &lt;/a&gt;はHTTP リダイレクトを提供し、&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt;は基本クラスを拡張してテンプレートもレンダリングするようにします。</target>
        </trans-unit>
        <trans-unit id="ebe1289f34b09e4748813c32a5f6b3074969829b" translate="yes" xml:space="preserve">
          <source>Django provides both a low-level API for signing values and a high-level API for setting and reading signed cookies, one of the most common uses of signing in Web applications.</source>
          <target state="translated">Django は、値に署名するための低レベルの API と、ウェブアプリケーションにおける署名の最も一般的な用途の一つである署名付きクッキーの設定と読み込みのための高レベルの API の両方を提供しています。</target>
        </trans-unit>
        <trans-unit id="6cb3e10cb2e4e4a3317ce648af6a268698716359" translate="yes" xml:space="preserve">
          <source>Django provides both uncompressed and &amp;lsquo;minified&amp;rsquo; versions of jQuery, as &lt;code&gt;jquery.js&lt;/code&gt; and &lt;code&gt;jquery.min.js&lt;/code&gt; respectively.</source>
          <target state="translated">Djangoは、jQueryの非圧縮バージョンと「縮小」バージョンの両方を、それぞれ &lt;code&gt;jquery.js&lt;/code&gt; および &lt;code&gt;jquery.min.js&lt;/code&gt; として提供します。</target>
        </trans-unit>
        <trans-unit id="bcc2f13e517e50891e5b0b052a1df534f72a4144" translate="yes" xml:space="preserve">
          <source>Django provides conditional &lt;code&gt;GET&lt;/code&gt; handling via &lt;a href=&quot;../ref/middleware#django.middleware.http.ConditionalGetMiddleware&quot;&gt;&lt;code&gt;django.middleware.http.ConditionalGetMiddleware&lt;/code&gt;&lt;/a&gt;. While being suitable for many situations, the middleware has limitations for advanced usage:</source>
          <target state="translated">Djangoは&lt;a href=&quot;../ref/middleware#django.middleware.http.ConditionalGetMiddleware&quot;&gt; &lt;code&gt;django.middleware.http.ConditionalGetMiddleware&lt;/code&gt; &lt;/a&gt;を介して条件付きの &lt;code&gt;GET&lt;/code&gt; 処理を提供します。ミドルウェアは多くの状況に適していますが、高度な使用には制限があります。</target>
        </trans-unit>
        <trans-unit id="3584ae010ba6d37b431c12353df2a6917447ee96" translate="yes" xml:space="preserve">
          <source>Django provides format definitions for many locales, but sometimes you might want to create your own, because a format files doesn&amp;rsquo;t exist for your locale, or because you want to overwrite some of the values.</source>
          <target state="translated">Djangoは多くのロケールのフォーマット定義を提供しますが、フォーマットファイルがロケールに存在しないか、一部の値を上書きしたいために、独自のロケールを作成したい場合があります。</target>
        </trans-unit>
        <trans-unit id="d76675761bed792ed66907e3ba908ff83a66e5d4" translate="yes" xml:space="preserve">
          <source>Django provides full support for anonymous sessions. The session framework lets you store and retrieve arbitrary data on a per-site-visitor basis. It stores data on the server side and abstracts the sending and receiving of cookies. Cookies contain a session ID &amp;ndash; not the data itself (unless you&amp;rsquo;re using the &lt;a href=&quot;#cookie-session-backend&quot;&gt;cookie based backend&lt;/a&gt;).</source>
          <target state="translated">Djangoは匿名セッションを完全にサポートしています。セッションフレームワークでは、サイト訪問者ごとに任意のデータを保存および取得できます。サーバー側にデータを保存し、Cookieの送受信を抽象化します。Cookieには、データ自体ではなくセッションIDが含まれます（&lt;a href=&quot;#cookie-session-backend&quot;&gt;Cookieベースのバックエンド&lt;/a&gt;を使用している場合を除く）。</target>
        </trans-unit>
        <trans-unit id="d13982cecba63af89d54f4d9f5c2a4dbc337040f" translate="yes" xml:space="preserve">
          <source>Django provides help for returning HTTP error codes. There are subclasses of &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; for a number of common HTTP status codes other than 200 (which means &lt;em&gt;&amp;ldquo;OK&amp;rdquo;&lt;/em&gt;). You can find the full list of available subclasses in the &lt;a href=&quot;../../ref/request-response#ref-httpresponse-subclasses&quot;&gt;request/response&lt;/a&gt; documentation. Return an instance of one of those subclasses instead of a normal &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; in order to signify an error. For example:</source>
          <target state="translated">DjangoはHTTPエラーコードを返すためのヘルプを提供します。200以外の一般的なHTTPステータスコード（&lt;em&gt;「OK」&lt;/em&gt;を意味する）の&lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; の&lt;/a&gt;サブクラスがあります。利用可能なサブクラスの完全なリストは、&lt;a href=&quot;../../ref/request-response#ref-httpresponse-subclasses&quot;&gt;リクエスト/レスポンスの&lt;/a&gt;ドキュメントに記載されています。エラーを示すために、通常の&lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;ではなく、これらのサブクラスのいずれかのインスタンスを返します。例えば：&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e7e623cd0a65fdb34ac196e0263a90a4486a5061" translate="yes" xml:space="preserve">
          <source>Django provides high-level and low-level ways to help you manage paginated data &amp;ndash; that is, data that&amp;rsquo;s split across several pages, with &amp;ldquo;Previous/Next&amp;rdquo; links.</source>
          <target state="translated">Djangoは、ページ分割されたデータ、つまり、「前へ/次へ」リンクを持つ複数のページに分割されたデータを管理するのに役立つ高レベルおよび低レベルの方法を提供します。</target>
        </trans-unit>
        <trans-unit id="cb2a96ee010fd92e519a793895ee707755c12c9d" translate="yes" xml:space="preserve">
          <source>Django provides many &lt;a href=&quot;../ref/templates/api#context-processors&quot;&gt;built-in context processors&lt;/a&gt;, and you can implement your own additional context processors, too.</source>
          <target state="translated">Djangoには多くの&lt;a href=&quot;../ref/templates/api#context-processors&quot;&gt;組み込みコンテキストプロセッサが&lt;/a&gt;用意されており、独自の追加コンテキストプロセッサを実装することもできます。</target>
        </trans-unit>
        <trans-unit id="6b68fe178578110adf1388883f9221959ef62525" translate="yes" xml:space="preserve">
          <source>Django provides no default template for the authentication views. You should create your own templates for the views you want to use. The template context is documented in each view, see &lt;a href=&quot;#all-authentication-views&quot;&gt;All authentication views&lt;/a&gt;.</source>
          <target state="translated">Djangoは認証ビューのデフォルトテンプレートを提供していません。使用するビューに独自のテンプレートを作成する必要があります。テンプレートのコンテキストは、各ビューに文書化されてい&lt;a href=&quot;#all-authentication-views&quot;&gt;ます&lt;/a&gt;。すべての認証ビューを参照してください。</target>
        </trans-unit>
        <trans-unit id="0d3b7ad0bf3171df5c782be59e46e7c22fd6698e" translate="yes" xml:space="preserve">
          <source>Django provides one log handler in addition to those provided by the Python logging module.</source>
          <target state="translated">Django は Python logging モジュールが提供するログハンドラに加えて、1 つのログハンドラを提供しています。</target>
        </trans-unit>
        <trans-unit id="f095f2ea1ba0f91831463ed7164a94160389c5ae" translate="yes" xml:space="preserve">
          <source>Django provides several &lt;a href=&quot;../ref/templates/api#template-loaders&quot;&gt;built-in template loaders&lt;/a&gt; and supports &lt;a href=&quot;../ref/templates/api#custom-template-loaders&quot;&gt;custom template loaders&lt;/a&gt;.</source>
          <target state="translated">Djangoはいくつかの&lt;a href=&quot;../ref/templates/api#template-loaders&quot;&gt;組み込みテンプレートローダー&lt;/a&gt;を提供し、&lt;a href=&quot;../ref/templates/api#custom-template-loaders&quot;&gt;カスタムテンプレートローダー&lt;/a&gt;をサポートしています。</target>
        </trans-unit>
        <trans-unit id="0b2892296cb76329248fedc7b71b6f5b29389d40" translate="yes" xml:space="preserve">
          <source>Django provides several built-in loggers.</source>
          <target state="translated">Django はいくつかの組み込みロガーを提供しています。</target>
        </trans-unit>
        <trans-unit id="5b8414e1444eff8f67ea496dd791284f5622f30e" translate="yes" xml:space="preserve">
          <source>Django provides several decorators that can be applied to views to support various HTTP features.</source>
          <target state="translated">Django には、様々な HTTP 機能をサポートするためにビューに適用できるデコレータがいくつか用意されています。</target>
        </trans-unit>
        <trans-unit id="4530faecff10b6d2b6b88078080e7ad972c578cb" translate="yes" xml:space="preserve">
          <source>Django provides several views that you can use for handling login, logout, and password management. These make use of the &lt;a href=&quot;#built-in-auth-forms&quot;&gt;stock auth forms&lt;/a&gt; but you can pass in your own forms as well.</source>
          <target state="translated">Djangoは、ログイン、ログアウト、パスワード管理の処理に使用できるいくつかのビューを提供しています。これらは標準の&lt;a href=&quot;#built-in-auth-forms&quot;&gt;認証フォーム&lt;/a&gt;を使用しますが、独自のフォームで渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="11811524ae794731163bd005c4b9bed3192ed447" translate="yes" xml:space="preserve">
          <source>Django provides some GIS-specific aggregate functions. For details on how to use these aggregate functions, see &lt;a href=&quot;../../../topics/db/aggregation&quot;&gt;the topic guide on aggregation&lt;/a&gt;.</source>
          <target state="translated">DjangoはいくつかのGIS固有の集約関数を提供します。これらの集計関数の使用方法の詳細については、集計&lt;a href=&quot;../../../topics/db/aggregation&quot;&gt;に関するトピックガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="64e6d540e127f68fa5d08d7f58433aecd642a4fa" translate="yes" xml:space="preserve">
          <source>Django provides some log filters in addition to those provided by the Python logging module.</source>
          <target state="translated">Django は Python のロギングモジュールが提供するログフィルタに加えて、いくつかのログフィルタを提供しています。</target>
        </trans-unit>
        <trans-unit id="8e64c7491d90fba19aa2fa8d21df9cbc7d6d5fe3" translate="yes" xml:space="preserve">
          <source>Django provides support for a number of data types which will only work with PostgreSQL. There is no fundamental reason why (for example) a &lt;code&gt;contrib.mysql&lt;/code&gt; module does not exist, except that PostgreSQL has the richest feature set of the supported databases so its users have the most to gain.</source>
          <target state="translated">Djangoは、PostgreSQLでのみ機能する多数のデータ型をサポートしています。（例えば） &lt;code&gt;contrib.mysql&lt;/code&gt; モジュールが存在しない根本的な理由はありませんが、PostgreSQLはサポートされているデータベースの最も豊富な機能セットを備えているため、ユーザーは最大のメリットを得られます。</target>
        </trans-unit>
        <trans-unit id="e1db1078c7aaafc378714b8340d34c03fc9909fa" translate="yes" xml:space="preserve">
          <source>Django provides template tags and filters to control each aspect of &lt;a href=&quot;../../topics/i18n/index&quot;&gt;internationalization&lt;/a&gt; in templates. They allow for granular control of translations, formatting, and time zone conversions.</source>
          <target state="translated">Djangoには、テンプレートの&lt;a href=&quot;../../topics/i18n/index&quot;&gt;国際化の&lt;/a&gt;各側面を制御するためのテンプレートタグとフィルタが用意されています。翻訳、フォーマット、タイムゾーン変換をきめ細かく制御できます。</target>
        </trans-unit>
        <trans-unit id="d05aef02eba0cd157e896f166af042311b081442" translate="yes" xml:space="preserve">
          <source>Django provides the &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt; function to register callback functions that should be executed after a transaction is successfully committed:</source>
          <target state="translated">Djangoは&lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt; &lt;code&gt;on_commit()&lt;/code&gt; &lt;/a&gt;関数を提供して、トランザクションが正常にコミットされた後に実行されるコールバック関数を登録します。</target>
        </trans-unit>
        <trans-unit id="fbe76be4d505943ff7bab3112b8df33e7b8bb139" translate="yes" xml:space="preserve">
          <source>Django provides the following aggregation functions in the &lt;code&gt;django.db.models&lt;/code&gt; module. For details on how to use these aggregate functions, see &lt;a href=&quot;../../topics/db/aggregation&quot;&gt;the topic guide on aggregation&lt;/a&gt;. See the &lt;a href=&quot;expressions#django.db.models.Aggregate&quot;&gt;&lt;code&gt;Aggregate&lt;/code&gt;&lt;/a&gt; documentation to learn how to create your aggregates.</source>
          <target state="translated">Djangoは &lt;code&gt;django.db.models&lt;/code&gt; モジュールで以下の集約関数を提供します。これらの集計関数の使用方法の詳細については、集計&lt;a href=&quot;../../topics/db/aggregation&quot;&gt;に関するトピックガイドを&lt;/a&gt;参照してください。&lt;a href=&quot;expressions#django.db.models.Aggregate&quot;&gt; &lt;code&gt;Aggregate&lt;/code&gt; &lt;/a&gt;作成方法については、集計のドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="47fe69a6c98d96a184b867c7ebb77d024f5cba3c" translate="yes" xml:space="preserve">
          <source>Django provides three built-in storage classes in &lt;a href=&quot;#module-django.contrib.messages&quot;&gt;&lt;code&gt;django.contrib.messages&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">Djangoは&lt;a href=&quot;#module-django.contrib.messages&quot;&gt; &lt;code&gt;django.contrib.messages&lt;/code&gt; に&lt;/a&gt; 3つの組み込みストレージクラスを提供します：</target>
        </trans-unit>
        <trans-unit id="0b522abb77e8f87c47579c596cdd1fe68e94ed9a" translate="yes" xml:space="preserve">
          <source>Django provides tools for performing URL reversing that match the different layers where URLs are needed:</source>
          <target state="translated">Djangoは、URLが必要とされる様々なレイヤーにマッチしたURL反転を実行するためのツールを提供しています。</target>
        </trans-unit>
        <trans-unit id="944941e13cb778be81173f0e8fef7304972092af" translate="yes" xml:space="preserve">
          <source>Django provides two convenient ways to access the current storage class:</source>
          <target state="translated">Django は現在のストレージクラスにアクセスするための便利な方法を 2 つ提供しています。</target>
        </trans-unit>
        <trans-unit id="d320699d1c44d06ae3bae26c3b9e4f2e64f45d08" translate="yes" xml:space="preserve">
          <source>Django provides two mechanisms to internationalize URL patterns:</source>
          <target state="translated">Django は URL パターンを国際化するために 2 つのメカニズムを提供しています。</target>
        </trans-unit>
        <trans-unit id="340699ff26a5116fa00f5e3dfe6144babb87f05e" translate="yes" xml:space="preserve">
          <source>Django provides two methods on a form that allow you to loop over the hidden and visible fields independently: &lt;code&gt;hidden_fields()&lt;/code&gt; and &lt;code&gt;visible_fields()&lt;/code&gt;. Here&amp;rsquo;s a modification of an earlier example that uses these two methods:</source>
          <target state="translated">Djangoは、隠しフィールドと表示フィールドを個別にループできるフォーム上の2つのメソッド、 &lt;code&gt;hidden_fields()&lt;/code&gt; と &lt;code&gt;visible_fields()&lt;/code&gt; を提供しています。これらの2つのメソッドを使用する以前の例の変更を次に示します。</target>
        </trans-unit>
        <trans-unit id="18c628edefb609a4b8914442627bfa042187cdb9" translate="yes" xml:space="preserve">
          <source>Django provides two subclasses of &lt;code&gt;InlineModelAdmin&lt;/code&gt; and they are:</source>
          <target state="translated">Djangoは &lt;code&gt;InlineModelAdmin&lt;/code&gt; の 2つのサブクラスを提供します：</target>
        </trans-unit>
        <trans-unit id="d2c1370de81fd0332b3b73e5fd59e98b5198239f" translate="yes" xml:space="preserve">
          <source>Django provides two ways to generate aggregates. The first way is to generate summary values over an entire &lt;code&gt;QuerySet&lt;/code&gt;. For example, say you wanted to calculate the average price of all books available for sale. Django&amp;rsquo;s query syntax provides a means for describing the set of all books:</source>
          <target state="translated">Djangoは集約を生成する2つの方法を提供します。最初の方法は、 &lt;code&gt;QuerySet&lt;/code&gt; 全体で集計値を生成することです。たとえば、販売可能なすべての書籍の平均価格を計算したいとします。Djangoのクエリ構文は、すべての本のセットを記述する手段を提供します。</target>
        </trans-unit>
        <trans-unit id="9f90034bc6e1c847f2b74d5ff06433691749de06" translate="yes" xml:space="preserve">
          <source>Django raises built-in Python exceptions when appropriate as well. See the Python documentation for further information on the &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#bltin-exceptions&quot;&gt;Built-in Exceptions&lt;/a&gt;.</source>
          <target state="translated">Djangoは、必要に応じて組み込みのPython例外も発生させます。&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#bltin-exceptions&quot;&gt;組み込み例外の&lt;/a&gt;詳細については、Pythonのドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="aa1473355818c546b308428d597e0b5644e0ff28" translate="yes" xml:space="preserve">
          <source>Django raises some of its own exceptions as well as standard Python exceptions.</source>
          <target state="translated">Django は標準的な Python の例外だけでなく、いくつかの独自の例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="dc931280e842400715a8f7987fc65cdaa1dcce93" translate="yes" xml:space="preserve">
          <source>Django registers the built-in commands and then searches for commands in &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; in reverse. During the search, if a command name duplicates an already registered command, the newly discovered command overrides the first.</source>
          <target state="translated">Djangoは組み込みコマンドを登録してから、&lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; の&lt;/a&gt;コマンドを逆に検索します。検索中に、コマンド名が既に登録されているコマンドと重複する場合、新しく検出されたコマンドが最初のコマンドを上書きします。</target>
        </trans-unit>
        <trans-unit id="5dd7344fedd3e6a321263f87973ecb7417d5e1e9" translate="yes" xml:space="preserve">
          <source>Django requires &lt;a href=&quot;https://pypi.org/project/mysqlclient/&quot;&gt;mysqlclient&lt;/a&gt; 1.3.13 or later.</source>
          <target state="translated">Djangoには&lt;a href=&quot;https://pypi.org/project/mysqlclient/&quot;&gt;mysqlclient&lt;/a&gt; 1.3.13以降が必要です。</target>
        </trans-unit>
        <trans-unit id="b00664e7a81bd43ea44d7b7a10d219fc2f569a2e" translate="yes" xml:space="preserve">
          <source>Django requires &lt;a href=&quot;https://pypi.org/project/mysqlclient/&quot;&gt;mysqlclient&lt;/a&gt; 1.4.0 or later.</source>
          <target state="translated">Djangoには&lt;a href=&quot;https://pypi.org/project/mysqlclient/&quot;&gt;mysqlclient1.4.0&lt;/a&gt;以降が必要です。</target>
        </trans-unit>
        <trans-unit id="8fd623d2467ac594b3c7a50eb786f5468c2d1503" translate="yes" xml:space="preserve">
          <source>Django runs through each URL pattern, in order, and stops at the first one that matches the requested URL, matching against &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.path_info&quot;&gt;&lt;code&gt;path_info&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Djangoは各URLパターンを順番に実行し、要求されたURLに一致する最初のパターンで停止し、&lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.path_info&quot;&gt; &lt;code&gt;path_info&lt;/code&gt; &lt;/a&gt;と照合します。</target>
        </trans-unit>
        <trans-unit id="829c30a8fe28093e58fea553b23e9aa974b14a93" translate="yes" xml:space="preserve">
          <source>Django searches for template directories in a number of places, depending on your template loading settings (see &amp;ldquo;Loader types&amp;rdquo; below), but the most basic way of specifying template directories is by using the &lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">Djangoは、テンプレートの読み込み設定（下記の「ローダーのタイプ」を参照）に応じて、さまざまな場所でテンプレートディレクトリを検索しますが、テンプレートディレクトリを指定する最も基本的な方法は&lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt;オプションを使用することです。</target>
        </trans-unit>
        <trans-unit id="aa0ee472cd6b16ff397aa72db48401303311dfb5" translate="yes" xml:space="preserve">
          <source>Django sets up a test database corresponding to every database that is defined in the &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; definition in your settings and referred to by at least one test through &lt;code&gt;databases&lt;/code&gt;.</source>
          <target state="translated">Djangoは、設定の&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;定義で定義され、 &lt;code&gt;databases&lt;/code&gt; 介した少なくとも1つのテストで参照されるすべてのデータベースに対応するテストデータベースをセットアップします。</target>
        </trans-unit>
        <trans-unit id="33b94bd6298c35ae0e9eca86e8b6159f64ee5419" translate="yes" xml:space="preserve">
          <source>Django settings</source>
          <target state="translated">Django の設定</target>
        </trans-unit>
        <trans-unit id="456e01a7bcba6b0c93da961f30a4e584e674d0a8" translate="yes" xml:space="preserve">
          <source>Django ships with a &lt;a href=&quot;../ref/files/storage#django.core.files.storage.FileSystemStorage&quot;&gt;&lt;code&gt;django.core.files.storage.FileSystemStorage&lt;/code&gt;&lt;/a&gt; class which implements basic local filesystem file storage.</source>
          <target state="translated">Djangoには、基本的なローカルファイルシステムファイルストレージを実装する&lt;a href=&quot;../ref/files/storage#django.core.files.storage.FileSystemStorage&quot;&gt; &lt;code&gt;django.core.files.storage.FileSystemStorage&lt;/code&gt; &lt;/a&gt;クラスが付属しています。</target>
        </trans-unit>
        <trans-unit id="7f9fe9d496c9dce38d63612a82cbfd72a311b738" translate="yes" xml:space="preserve">
          <source>Django ships with a variety of extra, optional tools that solve common problems (&lt;code&gt;contrib.*&lt;/code&gt;). For easier maintenance and to trim the size of the codebase, a few of those applications have been moved out to separate projects.</source>
          <target state="translated">Djangoには、一般的な問題を解決するさまざまな追加のオプションツールが付属しています（ &lt;code&gt;contrib.*&lt;/code&gt; ）。メンテナンスを容易にし、コードベースのサイズを削減するために、これらのアプリケーションのいくつかは別のプロジェクトに移動されました。</target>
        </trans-unit>
        <trans-unit id="410b2b56049c5d642f406f6c25ee3553ceb96d3b" translate="yes" xml:space="preserve">
          <source>Django ships with about two dozen built-in template tags. You can read all about them in the &lt;a href=&quot;builtins#ref-templates-builtins-tags&quot;&gt;built-in tag reference&lt;/a&gt;. To give you a taste of what&amp;rsquo;s available, here are some of the more commonly used tags:</source>
          <target state="translated">Djangoには、約20の組み込みテンプレートタグが付属しています。これらについては、&lt;a href=&quot;builtins#ref-templates-builtins-tags&quot;&gt;組み込みのタグリファレンスをご覧ください&lt;/a&gt;。何が利用できるかを味わうために、一般的に使用されるタグをいくつか次に示します。</target>
        </trans-unit>
        <trans-unit id="0cb2371b7c25122d96e086f393d5c588c9e2395d" translate="yes" xml:space="preserve">
          <source>Django ships with an easy-to-use &lt;a href=&quot;../../ref/csrf&quot;&gt;protection against Cross Site Request Forgeries&lt;/a&gt;. When submitting a form via &lt;code&gt;POST&lt;/code&gt; with CSRF protection enabled you must use the &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; template tag as in the preceding example. However, since CSRF protection is not directly tied to forms in templates, this tag is omitted from the following examples in this document.</source>
          <target state="translated">Djangoには、&lt;a href=&quot;../../ref/csrf&quot;&gt;クロスサイトリクエストフォージェリに対する&lt;/a&gt;使いやすい保護機能が付属しています。CSRF保護を有効にして &lt;code&gt;POST&lt;/code&gt; 経由でフォームを送信する場合は、前の例のように&lt;a href=&quot;../../ref/templates/builtins#std:templatetag-csrf_token&quot;&gt; &lt;code&gt;csrf_token&lt;/code&gt; &lt;/a&gt;テンプレートタグを使用する必要があります。ただし、CSRF保護はテンプレート内のフォームに直接関連付けられていないため、このドキュメントの以下の例ではこのタグは省略されています。</target>
        </trans-unit>
        <trans-unit id="fd45f46c98a612f8dc8b396396164415ac872c46" translate="yes" xml:space="preserve">
          <source>Django ships with dozens of built-in field types; you can find the complete list in the &lt;a href=&quot;../../ref/models/fields#model-field-types&quot;&gt;model field reference&lt;/a&gt;. You can easily write your own fields if Django&amp;rsquo;s built-in ones don&amp;rsquo;t do the trick; see &lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;Writing custom model fields&lt;/a&gt;.</source>
          <target state="translated">Djangoには、何十もの組み込みフィールドタイプが付属しています。完全なリストは&lt;a href=&quot;../../ref/models/fields#model-field-types&quot;&gt;モデルフィールドリファレンスにあり&lt;/a&gt;ます。Djangoの組み込みフィールドでうまくいかない場合は、独自のフィールドを簡単に作成できます。&lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;カスタムモデルフィールドの記述を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="364f75771074e80e3e50c4c4157a132bde772ae4" translate="yes" xml:space="preserve">
          <source>Django ships with generic views to do the following:</source>
          <target state="translated">Django には、以下のようなことを行うための汎用的なビューが同梱されています。</target>
        </trans-unit>
        <trans-unit id="1f29bcceed31bae8388ab05612a2a8047d2c3c9c" translate="yes" xml:space="preserve">
          <source>Django ships with several email sending backends. With the exception of the SMTP backend (which is the default), these backends are only useful during testing and development. If you have special email sending requirements, you can &lt;a href=&quot;#topic-custom-email-backend&quot;&gt;write your own email backend&lt;/a&gt;.</source>
          <target state="translated">Djangoにはいくつかのメール送信バックエンドが付属しています。SMTPバックエンド（デフォルト）を除いて、これらのバックエンドはテストおよび開発中にのみ役立ちます。特別なメール送信要件がある場合は&lt;a href=&quot;#topic-custom-email-backend&quot;&gt;、独自のメールバックエンドを作成&lt;/a&gt;できます。</target>
        </trans-unit>
        <trans-unit id="531d409914a0040f724fbd9f78a6a5401443f559" translate="yes" xml:space="preserve">
          <source>Django shortcut functions</source>
          <target state="translated">Djangoのショートカット機能</target>
        </trans-unit>
        <trans-unit id="258a02ace60da0c37c63a38e0b6c7e57de46e6f7" translate="yes" xml:space="preserve">
          <source>Django should provide a function &lt;code&gt;django.shortcuts.make_toast()&lt;/code&gt; that returns &lt;code&gt;'toast'&lt;/code&gt;.</source>
          <target state="translated">Django は &lt;code&gt;'toast'&lt;/code&gt; を返す関数 &lt;code&gt;django.shortcuts.make_toast()&lt;/code&gt; を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="7ea0bfbd077dc4bf18ca92802861bce1821dc025" translate="yes" xml:space="preserve">
          <source>Django supports &lt;a href=&quot;https://www.oracle.com/&quot;&gt;Oracle Database Server&lt;/a&gt; versions 12.2 and higher. Version 6.0 or higher of the &lt;a href=&quot;https://oracle.github.io/python-cx_Oracle/&quot;&gt;cx_Oracle&lt;/a&gt; Python driver is required.</source>
          <target state="translated">Djangoは&lt;a href=&quot;https://www.oracle.com/&quot;&gt;Oracle Database Server&lt;/a&gt;バージョン12.2以降をサポートしています。&lt;a href=&quot;https://oracle.github.io/python-cx_Oracle/&quot;&gt;cx_Oracle&lt;/a&gt; Pythonドライバーのバージョン6.0以降が必要です。</target>
        </trans-unit>
        <trans-unit id="a610f9dc7c34e4dc5cbf7009a7a3732b40bbc6d3" translate="yes" xml:space="preserve">
          <source>Django supports MariaDB 10.1 and higher.</source>
          <target state="translated">DjangoはMariaDB 10.1以上をサポートしています。</target>
        </trans-unit>
        <trans-unit id="c894724a6b890030f0894d88a5d6bb434140739c" translate="yes" xml:space="preserve">
          <source>Django supports MariaDB 10.2 and higher.</source>
          <target state="translated">DjangoはMariaDB 10.2以上をサポートしています。</target>
        </trans-unit>
        <trans-unit id="0b1f44d2fd17087954c6556b0112920427a6881c" translate="yes" xml:space="preserve">
          <source>Django supports MySQL 5.6 and higher.</source>
          <target state="translated">Django は MySQL 5.6 以降をサポートしています。</target>
        </trans-unit>
        <trans-unit id="c94d5d79be3679d0e14f6104436721ee7f2b1c14" translate="yes" xml:space="preserve">
          <source>Django supports PostgreSQL 9.5 and higher. &lt;a href=&quot;https://www.psycopg.org/&quot;&gt;psycopg2&lt;/a&gt; 2.5.4 or higher is required, though the latest release is recommended.</source>
          <target state="translated">DjangoはPostgreSQL 9.5以降をサポートしています。&lt;a href=&quot;https://www.psycopg.org/&quot;&gt;psycopg2&lt;/a&gt; 2.5.4以降が必要ですが、最新のリリースをお勧めします。</target>
        </trans-unit>
        <trans-unit id="9a7435837143f0c3fc00103b8997b0cbc04e7620" translate="yes" xml:space="preserve">
          <source>Django supports SQLite 3.8.3 and later.</source>
          <target state="translated">Django は SQLite 3.8.3 以降をサポートしています。</target>
        </trans-unit>
        <trans-unit id="e489bcfa9f420e1c998b47004d5194a20faf9200" translate="yes" xml:space="preserve">
          <source>Django supports Unicode data everywhere.</source>
          <target state="translated">Django はあらゆる場所で Unicode データをサポートしています。</target>
        </trans-unit>
        <trans-unit id="f521679c1edf54471df209a63e1ada77d83984bd" translate="yes" xml:space="preserve">
          <source>Django supports a number of serialization formats, some of which require you to install third-party Python modules:</source>
          <target state="translated">Django は多くのシリアライズ形式をサポートしていますが、その中にはサードパーティ製の Python モジュールをインストールする必要があるものもあります。</target>
        </trans-unit>
        <trans-unit id="f8f74ffa1be0a5698bd3f7c376e9c74761ab98f5" translate="yes" xml:space="preserve">
          <source>Django supports negation, addition, subtraction, multiplication, division, modulo arithmetic, and the power operator on query expressions, using Python constants, variables, and even other expressions.</source>
          <target state="translated">Django は、Python の定数、変数、さらには他の式を使用して、クエリ式の否定、加算、減算、乗算、除算、モジュロ算術、パワー演算子をサポートしています。</target>
        </trans-unit>
        <trans-unit id="fe060dabf1b2fb59f4fc59d63303d444184f2beb" translate="yes" xml:space="preserve">
          <source>Django supports the use of addition, subtraction, multiplication, division, modulo, and power arithmetic with &lt;code&gt;F()&lt;/code&gt; objects, both with constants and with other &lt;code&gt;F()&lt;/code&gt; objects. To find all the blog entries with more than &lt;em&gt;twice&lt;/em&gt; as many comments as pingbacks, we modify the query:</source>
          <target state="translated">Djangoは、 &lt;code&gt;F()&lt;/code&gt; オブジェクトと定数および他の &lt;code&gt;F()&lt;/code&gt; オブジェクトの両方で、加算、減算、乗算、除算、モジュロ、べき乗演算の使用をサポートしています。pingbackの&lt;em&gt;2倍&lt;/em&gt;以上のコメントを持つすべてのブログエントリを検索するには、クエリを変更します。</target>
        </trans-unit>
        <trans-unit id="55ae8d5eff7ba3246a5c9c0b17251f54dccc547a" translate="yes" xml:space="preserve">
          <source>Django takes care of the quoting for you; the resulting SQL will look something like this:</source>
          <target state="translated">Django は引用符付けを代行してくれます。</target>
        </trans-unit>
        <trans-unit id="3b4071b220737a0f26087eb6de9dab97662aed8e" translate="yes" xml:space="preserve">
          <source>Django templates &lt;a href=&quot;../ref/templates/language#automatic-html-escaping&quot;&gt;escape specific characters&lt;/a&gt; which are particularly dangerous to HTML. While this protects users from most malicious input, it is not entirely foolproof. For example, it will not protect the following:</source>
          <target state="translated">Djangoテンプレートは、HTMLにとって特に危険な&lt;a href=&quot;../ref/templates/language#automatic-html-escaping&quot;&gt;特定の文字&lt;/a&gt;をエスケープします。これは、ほとんどの悪意のある入力からユーザーを保護しますが、完全に完全というわけではありません。たとえば、次のものは保護されません。</target>
        </trans-unit>
        <trans-unit id="6b4a07402b130a9b2f9e23ac2de564e70ec64e25" translate="yes" xml:space="preserve">
          <source>Django templates have an &lt;a href=&quot;../ref/templates/api#django.template.base.Origin&quot;&gt;&lt;code&gt;Origin&lt;/code&gt;&lt;/a&gt; object available through the &lt;code&gt;template.origin&lt;/code&gt; attribute. This enables debug information to be displayed in the &lt;a href=&quot;#template-postmortem&quot;&gt;template postmortem&lt;/a&gt;, as well as in 3rd-party libraries, like the &lt;a href=&quot;https://github.com/jazzband/django-debug-toolbar&quot;&gt;Django Debug Toolbar&lt;/a&gt;.</source>
          <target state="translated">Djangoテンプレートには、 &lt;code&gt;template.origin&lt;/code&gt; 属性を通じて利用できる&lt;a href=&quot;../ref/templates/api#django.template.base.Origin&quot;&gt; &lt;code&gt;Origin&lt;/code&gt; &lt;/a&gt;オブジェクトがあります。これにより、&lt;a href=&quot;#template-postmortem&quot;&gt;テンプレートpostmortem&lt;/a&gt;や&lt;a href=&quot;https://github.com/jazzband/django-debug-toolbar&quot;&gt;Django Debug Toolbar&lt;/a&gt;などのサードパーティライブラリにデバッグ情報を表示できます。</target>
        </trans-unit>
        <trans-unit id="7c82addec3ff08349c87561407a89fb2ec7931b7" translate="yes" xml:space="preserve">
          <source>Django then provides utilities to extract the translation strings into a &lt;a href=&quot;index#term-message-file&quot;&gt;message file&lt;/a&gt;. This file is a convenient way for translators to provide the equivalent of the translation strings in the target language. Once the translators have filled in the message file, it must be compiled. This process relies on the GNU gettext toolset.</source>
          <target state="translated">Djangoは、翻訳文字列を&lt;a href=&quot;index#term-message-file&quot;&gt;メッセージファイル&lt;/a&gt;に抽出するユーティリティを提供します。このファイルは、翻訳者がターゲット言語の翻訳文字列と同等のものを提供するための便利な方法です。翻訳者がメッセージファイルに入力したら、コンパイルする必要があります。このプロセスは、GNU gettextツールセットに依存しています。</target>
        </trans-unit>
        <trans-unit id="0e98551210f7666c434ac21da3edbf033bb7c7e5" translate="yes" xml:space="preserve">
          <source>Django tools</source>
          <target state="translated">Django ツール</target>
        </trans-unit>
        <trans-unit id="c2606e74dbf27895737aed64ebe1471c02fbbb6c" translate="yes" xml:space="preserve">
          <source>Django uses &lt;a href=&quot;#django.db.models.lookups.RegisterLookupMixin&quot;&gt;&lt;code&gt;RegisterLookupMixin&lt;/code&gt;&lt;/a&gt; to give a class the interface to register lookups on itself. The two prominent examples are &lt;a href=&quot;fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt;, the base class of all model fields, and &lt;a href=&quot;#django.db.models.Transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt;, the base class of all Django transforms.</source>
          <target state="translated">Djangoは&lt;a href=&quot;#django.db.models.lookups.RegisterLookupMixin&quot;&gt; &lt;code&gt;RegisterLookupMixin&lt;/code&gt; &lt;/a&gt;を使用して、クラス自体にルックアップを登録するためのインターフェースを提供します。2つの顕著な例は、すべてのモデルフィールドの基本クラスである&lt;a href=&quot;fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;と、すべてのDjango変換の基本クラスである&lt;a href=&quot;#django.db.models.Transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="4b020133fce5a78a3c62cb3e55c3a546b7844a09" translate="yes" xml:space="preserve">
          <source>Django uses &lt;a href=&quot;../http/sessions&quot;&gt;sessions&lt;/a&gt; and middleware to hook the authentication system into &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;request objects&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Djangoは&lt;a href=&quot;../http/sessions&quot;&gt;セッション&lt;/a&gt;とミドルウェアを使用して、認証システムを&lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;request objects&lt;/code&gt; &lt;/a&gt;にフックします。</target>
        </trans-unit>
        <trans-unit id="32ea14c7295cbf5220cce3ea94a6319741edebfe" translate="yes" xml:space="preserve">
          <source>Django uses &lt;code&gt;asyncio.iscoroutinefunction&lt;/code&gt; to test if your view is asynchronous or not. If you implement your own method of returning a coroutine, ensure you set the &lt;code&gt;_is_coroutine&lt;/code&gt; attribute of the view to &lt;code&gt;asyncio.coroutines._is_coroutine&lt;/code&gt; so this function returns &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">Djangoは &lt;code&gt;asyncio.iscoroutinefunction&lt;/code&gt; を使用して、ビューが非同期であるかどうかをテストします。コルーチンを返す独自のメソッドを実装する場合は、ビューの &lt;code&gt;_is_coroutine&lt;/code&gt; 属性をasyncio.coroutines._is_coroutineに設定して、この関数が &lt;code&gt;True&lt;/code&gt; を返すようにして &lt;code&gt;asyncio.coroutines._is_coroutine&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c1bbb57f43afa18d955b69b4939855d1f5e943f8" translate="yes" xml:space="preserve">
          <source>Django uses PostgreSQL&amp;rsquo;s &lt;a href=&quot;https://www.postgresql.org/docs/current/datatype-numeric.html#DATATYPE-SERIAL&quot;&gt;SERIAL data type&lt;/a&gt; to store auto-incrementing primary keys. A &lt;code&gt;SERIAL&lt;/code&gt; column is populated with values from a &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createsequence.html&quot;&gt;sequence&lt;/a&gt; that keeps track of the next available value. Manually assigning a value to an auto-incrementing field doesn&amp;rsquo;t update the field&amp;rsquo;s sequence, which might later cause a conflict. For example:</source>
          <target state="translated">DjangoはPostgreSQLの&lt;a href=&quot;https://www.postgresql.org/docs/current/datatype-numeric.html#DATATYPE-SERIAL&quot;&gt;SERIALデータ型&lt;/a&gt;を使用して、自動インクリメントの主キーを格納します。 &lt;code&gt;SERIAL&lt;/code&gt; カラムをの値が移入された&lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createsequence.html&quot;&gt;シーケンス&lt;/a&gt;の次の利用可能な値を追跡します。自動インクリメントフィールドに手動で値を割り当てても、フィールドのシーケンスは更新されず、後で競合が発生する可能性があります。例えば：</target>
        </trans-unit>
        <trans-unit id="cc1b7de389b6a28717a6ad0640e14d1b9f7222eb" translate="yes" xml:space="preserve">
          <source>Django uses Python&amp;rsquo;s builtin &lt;a href=&quot;https://docs.python.org/3/library/logging.html#module-logging&quot;&gt;&lt;code&gt;logging&lt;/code&gt;&lt;/a&gt; module to perform system logging. The usage of this module is discussed in detail in Python&amp;rsquo;s own documentation. However, if you&amp;rsquo;ve never used Python&amp;rsquo;s logging framework (or even if you have), here&amp;rsquo;s a quick primer.</source>
          <target state="translated">Djangoは、Pythonの組み込み&lt;a href=&quot;https://docs.python.org/3/library/logging.html#module-logging&quot;&gt; &lt;code&gt;logging&lt;/code&gt; &lt;/a&gt;モジュールを使用してシステムロギングを実行します。このモジュールの使用法は、Python独自のドキュメントで詳しく説明されています。ただし、Pythonのロギングフレームワークを使用したことがない場合（または使用している場合でも）、ここで簡単に説明します。</target>
        </trans-unit>
        <trans-unit id="11e8c9fb7e6d1086b4a0a16bc606074e3aa169b0" translate="yes" xml:space="preserve">
          <source>Django uses different formats for displaying data to those it uses for parsing data. Most notably, the formats for parsing dates can&amp;rsquo;t use the &lt;code&gt;%a&lt;/code&gt; (abbreviated weekday name), &lt;code&gt;%A&lt;/code&gt; (full weekday name), &lt;code&gt;%b&lt;/code&gt; (abbreviated month name), &lt;code&gt;%B&lt;/code&gt; (full month name), or &lt;code&gt;%p&lt;/code&gt; (AM/PM).</source>
          <target state="translated">Djangoは、データの表示に異なる形式を使用して、データの解析に使用する形式とは異なります。特に、日付を解析するための形式では、 &lt;code&gt;%a&lt;/code&gt; （曜日の省略名）、 &lt;code&gt;%A&lt;/code&gt; （完全な曜日名）、 &lt;code&gt;%b&lt;/code&gt; （月の省略名）、 &lt;code&gt;%B&lt;/code&gt; （完全な月名）、または &lt;code&gt;%p&lt;/code&gt; （AM / PM）。</target>
        </trans-unit>
        <trans-unit id="dee3e4e1b8a6f18127bee8cbc26a33dd27e873ec" translate="yes" xml:space="preserve">
          <source>Django uses request and response objects to pass state through the system.</source>
          <target state="translated">Django はリクエストオブジェクトとレスポンスオブジェクトを使ってシステムに状態を渡します。</target>
        </trans-unit>
        <trans-unit id="74e4b2cb8b9f7cbf98f6e94166cbaeaf7166d42e" translate="yes" xml:space="preserve">
          <source>Django uses the &lt;a href=&quot;../../../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; environment variable to locate the appropriate settings module. It must contain the dotted path to the settings module. You can use a different value for development and production; it all depends on how you organize your settings.</source>
          <target state="translated">Djangoは&lt;a href=&quot;../../../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt;環境変数を使用して適切な設定モジュールを見つけます。設定モジュールへのドットパスが含まれている必要があります。開発と本番では異なる値を使用できます。それはすべて、設定の構成方法に依存します。</target>
        </trans-unit>
        <trans-unit id="96825e21fe7eebdc64f0447ba13b15b55be158c5" translate="yes" xml:space="preserve">
          <source>Django uses the &lt;code&gt;Host&lt;/code&gt; header provided by the client to construct URLs in certain cases. While these values are sanitized to prevent Cross Site Scripting attacks, a fake &lt;code&gt;Host&lt;/code&gt; value can be used for Cross-Site Request Forgery, cache poisoning attacks, and poisoning links in emails.</source>
          <target state="translated">Djangoは、クライアントから提供された &lt;code&gt;Host&lt;/code&gt; ヘッダーを使用して、特定の場合にURLを構築します。これらの値はクロスサイトスクリプティング攻撃を防ぐためにサニタイズされていますが、偽の &lt;code&gt;Host&lt;/code&gt; 値はクロスサイトリクエストフォージェリ、キャッシュポイズニング攻撃、および電子メールのポイズニングリンクに使用できます。</target>
        </trans-unit>
        <trans-unit id="dfdcaf50698743fc2c62e7ab90864b970a62d950" translate="yes" xml:space="preserve">
          <source>Django uses the template loaders in order according to the &lt;code&gt;'loaders'&lt;/code&gt; option. It uses each loader until a loader finds a match.</source>
          <target state="translated">Djangoは &lt;code&gt;'loaders'&lt;/code&gt; オプションに従ってテンプレートローダーを順番に使用します。ローダーが一致を見つけるまで、各ローダーを使用します。</target>
        </trans-unit>
        <trans-unit id="13125eefa99f1a553f7321dbebbe143047447ad9" translate="yes" xml:space="preserve">
          <source>Django uses transactions or savepoints automatically to guarantee the integrity of ORM operations that require multiple queries, especially &lt;a href=&quot;queries#topics-db-queries-delete&quot;&gt;delete()&lt;/a&gt; and &lt;a href=&quot;queries#topics-db-queries-update&quot;&gt;update()&lt;/a&gt; queries.</source>
          <target state="translated">Djangoはトランザクションまたはセーブポイントを自動的に使用して、複数のクエリ、特に&lt;a href=&quot;queries#topics-db-queries-delete&quot;&gt;delete（）&lt;/a&gt;および&lt;a href=&quot;queries#topics-db-queries-update&quot;&gt;update（）&lt;/a&gt;クエリを必要とするORM操作の整合性を保証します。</target>
        </trans-unit>
        <trans-unit id="fe5d6c967da6067e8b951d118acb5d66501f04a1" translate="yes" xml:space="preserve">
          <source>Django view for the model instance addition page. See note below.</source>
          <target state="translated">モデルインスタンス追加ページのDjangoビューです。以下の注意事項を参照してください。</target>
        </trans-unit>
        <trans-unit id="f1de7ea809eadd74a7127c3388dae72fcaefdf18" translate="yes" xml:space="preserve">
          <source>Django view for the model instance editing page. See note below.</source>
          <target state="translated">モデルインスタンス編集ページのDjangoビューです。以下の注意事項を参照してください。</target>
        </trans-unit>
        <trans-unit id="c5b507d34513606e3c77d80672992d6a9fbe4d85" translate="yes" xml:space="preserve">
          <source>Django view for the model instance(s) deletion confirmation page. See note below.</source>
          <target state="translated">モデルインスタンス(複数)の削除確認ページのDjangoビューです。以下の注意事項を参照してください。</target>
        </trans-unit>
        <trans-unit id="9bba4285700873e8482c72855cc2e15507194841" translate="yes" xml:space="preserve">
          <source>Django view for the model instances change list/actions page. See note below.</source>
          <target state="translated">モデルインスタンスの変更リスト/アクションページのDjangoビューです。以下の注意事項を参照してください。</target>
        </trans-unit>
        <trans-unit id="05a08aba7068d7cfa268366bc4dd726cddb37ccd" translate="yes" xml:space="preserve">
          <source>Django view for the page that shows the modification history for a given model instance.</source>
          <target state="translated">与えられたモデルインスタンスの変更履歴を表示するページの Django ビューです。</target>
        </trans-unit>
        <trans-unit id="aface9e79a99d1bd6e90a2d9d86a2521fd584daa" translate="yes" xml:space="preserve">
          <source>Django was written in a newsroom environment, with a very clear separation between &amp;ldquo;content publishers&amp;rdquo; and the &amp;ldquo;public&amp;rdquo; site. Site managers use the system to add news stories, events, sports scores, etc., and that content is displayed on the public site. Django solves the problem of creating a unified interface for site administrators to edit content.</source>
          <target state="translated">Djangoはニュースルーム環境で作成され、「コンテンツ発行者」と「公開」サイトは明確に区別されています。サイト管理者は、システムを使用してニュース記事、イベント、スポーツのスコアなどを追加し、そのコンテンツはパブリックサイトに表示されます。Djangoは、サイト管理者がコンテンツを編集するための統一されたインターフェースを作成する問題を解決します。</target>
        </trans-unit>
        <trans-unit id="c249cea2d49b123b871ddda6c0f9d9096c91012e" translate="yes" xml:space="preserve">
          <source>Django will also accept URLs (&lt;code&gt;http&lt;/code&gt;, &lt;code&gt;https&lt;/code&gt;, &lt;code&gt;ftp&lt;/code&gt;) to compressed archives with the app template files, downloading and extracting them on the fly.</source>
          <target state="translated">Djangoは、アプリテンプレートファイルを含む圧縮アーカイブへのURL（ &lt;code&gt;http&lt;/code&gt; 、 &lt;code&gt;https&lt;/code&gt; 、 &lt;code&gt;ftp&lt;/code&gt; ）も受け入れ、それらを即座にダウンロードして抽出します。</target>
        </trans-unit>
        <trans-unit id="f34cdfbe3c704a28a71a702407979112a1698861" translate="yes" xml:space="preserve">
          <source>Django will automatically generate a table to manage many-to-many relationships. However, if you want to manually specify the intermediary table, you can use the &lt;a href=&quot;#django.db.models.ManyToManyField.through&quot;&gt;&lt;code&gt;through&lt;/code&gt;&lt;/a&gt; option to specify the Django model that represents the intermediate table that you want to use.</source>
          <target state="translated">Djangoは多対多の関係を管理するテーブルを自動的に生成します。ただし、中間テーブルを手動で指定する場合は、&lt;a href=&quot;#django.db.models.ManyToManyField.through&quot;&gt; &lt;code&gt;through&lt;/code&gt; &lt;/a&gt;オプションを使用して、使用する中間テーブルを表すDjangoモデルを指定できます。</target>
        </trans-unit>
        <trans-unit id="507919a3033980b57da5011d52afea805b15f8a9" translate="yes" xml:space="preserve">
          <source>Django will complain if you try to assign or add an object of the wrong type.</source>
          <target state="translated">間違った型のオブジェクトを代入したり追加したりしようとすると、Django は文句を言います。</target>
        </trans-unit>
        <trans-unit id="5a5d62d27edcbee960ffc21f9af77ca8c5c6bac2" translate="yes" xml:space="preserve">
          <source>Django will load any and all fixtures it finds in these locations that match the provided fixture names.</source>
          <target state="translated">Django は、指定されたフィクスチャ名にマッチする、これらの場所で見つけたすべてのフィクスチャをロードします。</target>
        </trans-unit>
        <trans-unit id="2eeeec049cc49d604124c2e230da601af1d4b644" translate="yes" xml:space="preserve">
          <source>Django will look within each of these paths for the &lt;code&gt;&amp;lt;locale_code&amp;gt;/LC_MESSAGES&lt;/code&gt; directories containing the actual translation files.</source>
          <target state="translated">Djangoはこれらの各パス内で実際の翻訳ファイルを含む &lt;code&gt;&amp;lt;locale_code&amp;gt;/LC_MESSAGES&lt;/code&gt; ディレクトリを探します。</target>
        </trans-unit>
        <trans-unit id="69c9ddb244e623af7fd8c28de3ea8b30265e013b" translate="yes" xml:space="preserve">
          <source>Django will make migrations for any change to your models or fields - even options that don&amp;rsquo;t affect the database - as the only way it can reconstruct a field correctly is to have all the changes in the history, and you might need those options in some data migrations later on (for example, if you&amp;rsquo;ve set custom validators).</source>
          <target state="translated">Djangoは、モデルやフィールドへの変更をデータベースに影響を与えないオプションで移行します。フィールドを正しく再構築する唯一の方法は、履歴にすべての変更を加えることであり、これらのオプションが必要になる場合があるためです。後でいくつかのデータ移行（たとえば、カスタムバリデーターを設定した場合）。</target>
        </trans-unit>
        <trans-unit id="ab39643216ffdee5b859edda52519f804c62de11" translate="yes" xml:space="preserve">
          <source>Django will not upgrade existing columns to include fractional seconds if the database server supports it. If you want to enable them on an existing database, it&amp;rsquo;s up to you to either manually update the column on the target database, by executing a command like:</source>
          <target state="translated">データベースサーバーがサポートしている場合、Djangoは既存の列を小数秒が含まれるようにアップグレードしません。既存のデータベースでそれらを有効にする場合は、次のようなコマンドを実行して、ターゲットデータベースの列を手動で更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="69c85270deabe31c7b43879b240a74cebde092ef" translate="yes" xml:space="preserve">
          <source>Django will prevent any attempt to save an incomplete model, so if the model does not allow the missing fields to be empty, and does not provide a default value for the missing fields, any attempt to &lt;code&gt;save()&lt;/code&gt; a &lt;code&gt;ModelForm&lt;/code&gt; with missing fields will fail. To avoid this failure, you must instantiate your model with initial values for the missing, but required fields:</source>
          <target state="translated">Djangoはモデルが欠落しているフィールドは空にすることはできません。もしそうなら、不完全なモデルを保存しようとする試みを防ぐことができますし、不足しているフィールドのデフォルト値を提供しない、しようとする &lt;code&gt;save()&lt;/code&gt; &lt;code&gt;ModelForm&lt;/code&gt; 欠落しているフィールドでは失敗します。この失敗を回避するには、欠落しているが必須のフィールドの初期値を使用してモデルをインスタンス化する必要があります。</target>
        </trans-unit>
        <trans-unit id="9fbe6d99ecf16e8da28fb0ffdd1cf7b139887990" translate="yes" xml:space="preserve">
          <source>Django will raise a &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.FieldError&quot;&gt;&lt;code&gt;FieldError&lt;/code&gt;&lt;/a&gt; if you override any model field in any ancestor model.</source>
          <target state="translated">祖先モデルのモデルフィールドをオーバーライドすると、Djangoは&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.FieldError&quot;&gt; &lt;code&gt;FieldError&lt;/code&gt; &lt;/a&gt;を発生させます。</target>
        </trans-unit>
        <trans-unit id="dbcc154345ed2510bfe53ff63e8cf1858d225c6e" translate="yes" xml:space="preserve">
          <source>Django will refuse to commit or to rollback when an &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; block is active, because that would break atomicity.</source>
          <target state="translated">Djangoは、&lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt;ブロックがアクティブなときにコミットまたはロールバックを拒否します。</target>
        </trans-unit>
        <trans-unit id="db38942103d59241f879f426cd2c0794bfc5eb1b" translate="yes" xml:space="preserve">
          <source>Django will refuse to start if &lt;a href=&quot;#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; is not set.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; &lt;/a&gt;が設定されていない場合、Djangoは起動を拒否します。</target>
        </trans-unit>
        <trans-unit id="4859e0fca340dbae94d83636af216965eef435bb" translate="yes" xml:space="preserve">
          <source>Django will refuse to turn autocommit off when an &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; block is active, because that would break atomicity.</source>
          <target state="translated">Djangoは、&lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt;ブロックがアクティブなとき、自動コミットをオフにすることを拒否します。</target>
        </trans-unit>
        <trans-unit id="4be90a7594fec0dbc33baa895d7967f30e6d541e" translate="yes" xml:space="preserve">
          <source>Django will search in three locations for fixtures:</source>
          <target state="translated">ジャンゴはフィクスチャのために3つの場所で検索します。</target>
        </trans-unit>
        <trans-unit id="37ae767f8ada23cc47bb26821b2df6b11cd9164c" translate="yes" xml:space="preserve">
          <source>Django will then include the extra attributes in the rendered output:</source>
          <target state="translated">そして、Django はレンダリングされた出力に余分な属性を含めます。</target>
        </trans-unit>
        <trans-unit id="ed5841bbce46f4f9419a7f3b8b000f957f2d23ac" translate="yes" xml:space="preserve">
          <source>Django will try to interpret every element of &lt;code&gt;list_display&lt;/code&gt; in this order:</source>
          <target state="translated">Djangoは &lt;code&gt;list_display&lt;/code&gt; のすべての要素をこの順序で解釈しようとします：</target>
        </trans-unit>
        <trans-unit id="a2a14675af6ac7d908a6528c911cb4f15f14a729" translate="yes" xml:space="preserve">
          <source>Django will work just fine without this optimization, but each new connection will do some additional queries to set these parameters.</source>
          <target state="translated">Django はこの最適化をしなくても問題なく動作しますが、新しい接続のたびに、これらのパラメータを設定するための追加のクエリを行うことになります。</target>
        </trans-unit>
        <trans-unit id="7b206d6c2beb156f8de4cec936ba46196f6c27ce" translate="yes" xml:space="preserve">
          <source>Django will write out the value as an instantiation of your class with the given arguments, similar to the way it writes out references to Django fields.</source>
          <target state="translated">Django は、Django のフィールドへの参照を書き出すのと同じように、与えられた引数を持つクラスのインスタンスとして値を書き出します。</target>
        </trans-unit>
        <trans-unit id="2759ae53890b7a98975739f7ef39fb0b14e63b90" translate="yes" xml:space="preserve">
          <source>Django wraps the standard database exceptions so that your Django code has a guaranteed common implementation of these classes.</source>
          <target state="translated">Django は標準的なデータベースの例外をラップすることで、Django のコードがこれらのクラスの共通の実装を保証するようにしています。</target>
        </trans-unit>
        <trans-unit id="b1799e33f80b801898b145ad03d20b706d5e108f" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt;&lt;code&gt;send_mass_mail()&lt;/code&gt;&lt;/a&gt; functions are actually thin wrappers that make use of the &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">Djangoの&lt;a href=&quot;#django.core.mail.send_mail&quot;&gt; &lt;code&gt;send_mail()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt; &lt;code&gt;send_mass_mail()&lt;/code&gt; &lt;/a&gt;関数は、実際に薄いラッパーのメークを使用することです&lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; のの&lt;/a&gt;クラス。</target>
        </trans-unit>
        <trans-unit id="e89d5a99f035a42d1b4cb7550e1b97ae200be3ca" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; class is a more commonly used subclass of &lt;code&gt;TransactionTestCase&lt;/code&gt; that makes use of database transaction facilities to speed up the process of resetting the database to a known state at the beginning of each test. A consequence of this, however, is that some database behaviors cannot be tested within a Django &lt;code&gt;TestCase&lt;/code&gt; class. For instance, you cannot test that a block of code is executing within a transaction, as is required when using &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.select_for_update&quot;&gt;&lt;code&gt;select_for_update()&lt;/code&gt;&lt;/a&gt;. In those cases, you should use &lt;code&gt;TransactionTestCase&lt;/code&gt;.</source>
          <target state="translated">Djangoの&lt;a href=&quot;#django.test.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;クラスは、 &lt;code&gt;TransactionTestCase&lt;/code&gt; のより一般的に使用されるサブクラスであり、データベーストランザクション機能を利用して、各テストの開始時にデータベースを既知の状態にリセットするプロセスを高速化します。ただし、この結果、一部のデータベースの動作はDjango &lt;code&gt;TestCase&lt;/code&gt; クラス内でテストできません。たとえば、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.select_for_update&quot;&gt; &lt;code&gt;select_for_update()&lt;/code&gt; &lt;/a&gt;を使用するときに必要となるように、コードブロックがトランザクション内で実行されていることをテストすることはできません。そのような場合は、 &lt;code&gt;TransactionTestCase&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="2d79ad7f6cf42b357c51ff33c8c4f0b5e46b4d87" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;#module-django.contrib.admindocs&quot;&gt;&lt;code&gt;admindocs&lt;/code&gt;&lt;/a&gt; app pulls documentation from the docstrings of models, views, template tags, and template filters for any app in &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; and makes that documentation available from the &lt;a href=&quot;index#module-django.contrib.admin&quot;&gt;&lt;code&gt;Django admin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Djangoの&lt;a href=&quot;#module-django.contrib.admindocs&quot;&gt; &lt;code&gt;admindocs&lt;/code&gt; &lt;/a&gt;アプリは、&lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; にある&lt;/a&gt;アプリのモデル、ビュー、テンプレートタグ、テンプレートフィルターのドキュメント文字列からドキュメントを取得し、そのドキュメントを&lt;a href=&quot;index#module-django.contrib.admin&quot;&gt; &lt;code&gt;Django admin&lt;/code&gt; &lt;/a&gt;から利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="c15c991d80d99f5b9a1f228350167f8fdbc3f7fe" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt; management command sets up a default ASGI configuration for you, which you can tweak as needed for your project, and direct any ASGI-compliant application server to use.</source>
          <target state="translated">Djangoの&lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;startproject&lt;/code&gt; &lt;/a&gt;管理コマンドは、デフォルトのASGI設定をセットアップします。これは、プロジェクトの必要に応じて微調整でき、ASGI準拠のアプリケーションサーバーを使用するように指示できます。</target>
        </trans-unit>
        <trans-unit id="994bf05863eaac2613f0ea1f041b7a85c5d5d6a3" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt; management command sets up a minimal default WSGI configuration for you, which you can tweak as needed for your project, and direct any WSGI-compliant application server to use.</source>
          <target state="translated">Djangoの&lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;startproject&lt;/code&gt; &lt;/a&gt;管理コマンドは、最小限のデフォルトのWSGI構成をセットアップします。これは、プロジェクトの必要に応じて微調整でき、使用するWSGI準拠のアプリケーションサーバーに指示できます。</target>
        </trans-unit>
        <trans-unit id="8ea79764ba28d220b09cc0a578c919ee36858cca" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../../topics/auth/index#module-django.contrib.auth&quot;&gt;&lt;code&gt;authentication framework&lt;/code&gt;&lt;/a&gt; uses it to tie user permissions to specific models.</source>
          <target state="translated">Djangoの&lt;a href=&quot;../../topics/auth/index#module-django.contrib.auth&quot;&gt; &lt;code&gt;authentication framework&lt;/code&gt; &lt;/a&gt;は、それを使用してユーザーの権限を特定のモデルに結び付けます。</target>
        </trans-unit>
        <trans-unit id="5501327b4152ed104dcfc3eafa228646f92164c1" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../ref/settings#std:setting-STATICFILES_FINDERS&quot;&gt;&lt;code&gt;STATICFILES_FINDERS&lt;/code&gt;&lt;/a&gt; setting contains a list of finders that know how to discover static files from various sources. One of the defaults is &lt;code&gt;AppDirectoriesFinder&lt;/code&gt; which looks for a &amp;ldquo;static&amp;rdquo; subdirectory in each of the &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, like the one in &lt;code&gt;polls&lt;/code&gt; we just created. The admin site uses the same directory structure for its static files.</source>
          <target state="translated">Djangoの&lt;a href=&quot;../ref/settings#std:setting-STATICFILES_FINDERS&quot;&gt; &lt;code&gt;STATICFILES_FINDERS&lt;/code&gt; &lt;/a&gt;設定には、さまざまなソースから静的ファイルを発見する方法を知っているファインダーのリストが含まれています。デフォルトの1つは &lt;code&gt;AppDirectoriesFinder&lt;/code&gt; です。これは、先ほど作成した &lt;code&gt;polls&lt;/code&gt; でのように、各&lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;で「静的」サブディレクトリを探します。管理サイトは、静的ファイルに同じディレクトリ構造を使用します。</target>
        </trans-unit>
        <trans-unit id="795ddb6474a20a69af41740fd9a7e5047e556521" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../testing/tools#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; class also wraps each test in a transaction for performance reasons.</source>
          <target state="translated">Djangoの&lt;a href=&quot;../testing/tools#django.test.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;クラスは、パフォーマンス上の理由から、各テストをトランザクションにラップします。</target>
        </trans-unit>
        <trans-unit id="5e8bdbb577636b4a2bdd4bb5d022bd93bdede080" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../testing/tools#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; class wraps each test in a transaction and rolls back that transaction after each test, in order to provide test isolation. This means that no transaction is ever actually committed, thus your &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt; callbacks will never be run. If you need to test the results of an &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt; callback, use a &lt;a href=&quot;../testing/tools#django.test.TransactionTestCase&quot;&gt;&lt;code&gt;TransactionTestCase&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Djangoの&lt;a href=&quot;../testing/tools#django.test.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;クラスは、各テストをトランザクションにラップし、テストを分離するために、各テストの後にそのトランザクションをロールバックします。つまり、トランザクションが実際にコミットされることはないため、&lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt; &lt;code&gt;on_commit()&lt;/code&gt; &lt;/a&gt;コールバックは実行されません。&lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt; &lt;code&gt;on_commit()&lt;/code&gt; &lt;/a&gt;コールバックの結果をテストする必要がある場合は、代わりに&lt;a href=&quot;../testing/tools#django.test.TransactionTestCase&quot;&gt; &lt;code&gt;TransactionTestCase&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="0e815a29fe4e32e45a3cf584f461952c96a347c0" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../topics/templates#django.template.backends.jinja2.Jinja2&quot;&gt;&lt;code&gt;Jinja2&lt;/code&gt;&lt;/a&gt; template backend adds &lt;code&gt;{{ csrf_input }}&lt;/code&gt; to the context of all templates which is equivalent to &lt;code&gt;{% csrf_token %}&lt;/code&gt; in the Django template language. For example:</source>
          <target state="translated">Djangoの&lt;a href=&quot;../topics/templates#django.template.backends.jinja2.Jinja2&quot;&gt; &lt;code&gt;Jinja2&lt;/code&gt; のの&lt;/a&gt;テンプレートのバックエンドが追加されます &lt;code&gt;{{ csrf_input }}&lt;/code&gt; と等価であるすべてのテンプレートのコンテキストに &lt;code&gt;{% csrf_token %}&lt;/code&gt; Djangoテンプレート言語インチ 例えば：</target>
        </trans-unit>
        <trans-unit id="c834e900b75917432290d52ebad384ccbf6991d8" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;cache&quot;&gt;caching framework&lt;/a&gt; offers very significant opportunities for performance gains, by saving dynamic content so that it doesn&amp;rsquo;t need to be calculated for each request.</source>
          <target state="translated">Djangoの&lt;a href=&quot;cache&quot;&gt;キャッシュフレームワーク&lt;/a&gt;は、リクエストごとに計算する必要がないように動的コンテンツを保存することで、パフォーマンスを向上させる非常に重要な機会を提供します。</target>
        </trans-unit>
        <trans-unit id="ac46317d500f8a03cbf11d8c05b66555fd03d7b8" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;code&gt;get_absolute_url()&lt;/code&gt; convention is nice for getting your objects&amp;rsquo; URL without the domain name, but in some cases you might want to display the full URL &amp;ndash; with &lt;code&gt;http://&lt;/code&gt; and the domain and everything &amp;ndash; for an object. To do this, you can use the sites framework. An example:</source>
          <target state="translated">Djangoの &lt;code&gt;get_absolute_url()&lt;/code&gt; 規則は、ドメイン名なしでオブジェクトのURLを取得するのに適していますが、オブジェクトの完全なURL（ &lt;code&gt;http://&lt;/code&gt; とドメインとすべてを含む）を表示したい場合があります。これを行うには、サイトフレームワークを使用できます。例：</target>
        </trans-unit>
        <trans-unit id="06e2f42b7cd7083eb3d4f27bbd9c5fd9034e7965" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;code&gt;inspectdb&lt;/code&gt; feature uses the &lt;code&gt;information_schema&lt;/code&gt; database, which contains detailed data on all database schemas.</source>
          <target state="translated">Djangoの &lt;code&gt;inspectdb&lt;/code&gt; 機能は、すべてのデータベーススキーマに関する詳細なデータを含む &lt;code&gt;information_schema&lt;/code&gt; データベースを使用します。</target>
        </trans-unit>
        <trans-unit id="38b9d130fb7255bf29868f334ba2b430052190bc" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;em&gt;generic views&lt;/em&gt; were developed to ease that pain. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to write too much code.</source>
          <target state="translated">Djangoの&lt;em&gt;一般的なビュー&lt;/em&gt;は、その痛みを和らげるために開発されました。それらは、ビューの開発で見つかる特定の一般的なイディオムとパターンを取り、それらを抽象化するので、多くのコードを記述する必要なく、データの一般的なビューをすばやく書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="cd7326a4a9f258d96327edf15b2c1c3bb1869ff3" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s Time Zone</source>
          <target state="translated">Djangoのタイムゾーン</target>
        </trans-unit>
        <trans-unit id="7e23f2e0db7a88fb2ab35f2591f30d699ef16b58" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s admin doesn&amp;rsquo;t have any explicit support for multiple databases. If you want to provide an admin interface for a model on a database other than that specified by your router chain, you&amp;rsquo;ll need to write custom &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; classes that will direct the admin to use a specific database for content.</source>
          <target state="translated">Djangoの管理者は、複数のデータベースを明示的にサポートしていません。ルーターチェーンで指定されたもの以外のデータベースのモデルに管理インターフェイスを提供する場合は、コンテンツの特定のデータベースを使用するように管理者に指示するカスタム&lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt;クラスを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="462512a8d3dafad0ba0fdf29eac4dd233fb8a4a6" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s admin interface can include a complete reference of all template tags and filters available for a given site. See &lt;a href=&quot;../contrib/admin/admindocs&quot;&gt;The Django admin documentation generator&lt;/a&gt;.</source>
          <target state="translated">Djangoの管理インターフェースには、特定のサイトで利用可能なすべてのテンプレートタグとフィルターの完全なリファレンスを含めることができます。&lt;a href=&quot;../contrib/admin/admindocs&quot;&gt;Django admin documentation generatorを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="be7079be76e03d4f891dc4dc896f16cc29ee7c5b" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s authentication framework.</source>
          <target state="translated">Djangoの認証フレームワーク。</target>
        </trans-unit>
        <trans-unit id="c30c0231b27735ad55bf3eb7dc0c9161f0be1775" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s built-in &lt;a href=&quot;default#built-in-auth-forms&quot;&gt;forms&lt;/a&gt; and &lt;a href=&quot;default#built-in-auth-views&quot;&gt;views&lt;/a&gt; make certain assumptions about the user model that they are working with.</source>
          <target state="translated">Djangoの組み込み&lt;a href=&quot;default#built-in-auth-forms&quot;&gt;フォーム&lt;/a&gt;と&lt;a href=&quot;default#built-in-auth-views&quot;&gt;ビュー&lt;/a&gt;は、ユーザーが使用しているユーザーモデルについて特定の前提を設けています。</target>
        </trans-unit>
        <trans-unit id="6667b78f3d5498eb1e51da938b18e5b8029f8c6c" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s built-in class-based views provide a lot of functionality, but some of it you may want to use separately. For instance, you may want to write a view that renders a template to make the HTTP response, but you can&amp;rsquo;t use &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt;; perhaps you need to render a template only on &lt;code&gt;POST&lt;/code&gt;, with &lt;code&gt;GET&lt;/code&gt; doing something else entirely. While you could use &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; directly, this will likely result in duplicate code.</source>
          <target state="translated">Djangoの組み込みのクラスベースのビューは多くの機能を提供しますが、その一部は個別に使用したい場合があります。たとえば、テンプレートをレンダリングしてHTTP応答を行うビューを記述したい場合がありますが、&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt;は使用できません。おそらく、 &lt;code&gt;POST&lt;/code&gt; でのみテンプレートをレンダリングする必要があり、 &lt;code&gt;GET&lt;/code&gt; は他のことを完全に実行します。&lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; を&lt;/a&gt;直接使用することもできますが、これによりコードが重複する可能性があります。</target>
        </trans-unit>
        <trans-unit id="3351fe369c4dafda28aefabb25d378def8b5e6c2" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s built-in field types don&amp;rsquo;t cover every possible database column type &amp;ndash; only the common types, such as &lt;code&gt;VARCHAR&lt;/code&gt; and &lt;code&gt;INTEGER&lt;/code&gt;. For more obscure column types, such as geographic polygons or even user-created types such as &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createtype.html&quot;&gt;PostgreSQL custom types&lt;/a&gt;, you can define your own Django &lt;code&gt;Field&lt;/code&gt; subclasses.</source>
          <target state="translated">Djangoの組み込みフィールドタイプは、可能なすべてのデータベース列タイプをカバーしているわけではなく、 &lt;code&gt;VARCHAR&lt;/code&gt; や &lt;code&gt;INTEGER&lt;/code&gt; などの一般的なタイプのみをカバーしています。地理的ポリゴンなどのあいまいな列タイプや、&lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createtype.html&quot;&gt;PostgreSQLカスタムタイプ&lt;/a&gt;などのユーザー作成タイプについては、独自のDjango &lt;code&gt;Field&lt;/code&gt; サブクラスを定義できます。</target>
        </trans-unit>
        <trans-unit id="8cbc91017f9715973c1de43f85f5d9a73f2e8225" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s built-in filters have &lt;code&gt;autoescape=True&lt;/code&gt; by default in order to get the proper autoescaping behavior and avoid a cross-site script vulnerability.</source>
          <target state="translated">Djangoの組み込みフィルターには、適切な自動エスケープ動作を実現し、クロスサイトスクリプトの脆弱性を回避するために、デフォルトで &lt;code&gt;autoescape=True&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="d26d318f2fd9e35732c375544c3f2d36aeee5a78" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s built-in lookups are listed below. It is also possible to write &lt;a href=&quot;../../howto/custom-lookups&quot;&gt;custom lookups&lt;/a&gt; for model fields.</source>
          <target state="translated">Djangoの組み込みルックアップを以下に示します。モデルフィールドの&lt;a href=&quot;../../howto/custom-lookups&quot;&gt;カスタムルックアップ&lt;/a&gt;を記述することもできます。</target>
        </trans-unit>
        <trans-unit id="83a2b4e1815e57ec0e068ac9705117e9c68a5a1f" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s cache framework</source>
          <target state="translated">Djangoのキャッシュフレームワーク</target>
        </trans-unit>
        <trans-unit id="8b0208438688c87f01fc9957b7e09e357bb00e7e" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s database layer provides various ways to help developers get the best performance from their databases. The &lt;a href=&quot;db/optimization&quot;&gt;database optimization documentation&lt;/a&gt; gathers together links to the relevant documentation and adds various tips that outline the steps to take when attempting to optimize your database usage.</source>
          <target state="translated">Djangoのデータベースレイヤーは、開発者がデータベースから最高のパフォーマンスを得るのに役立つさまざまな方法を提供します。&lt;a href=&quot;db/optimization&quot;&gt;データベースの最適化ドキュメントの&lt;/a&gt;ギャザー一緒に、関連するドキュメントへのリンクや、データベースの使用を最適化しようとすると、アウトラインのステップが取ることの様々なヒントを追加します。</target>
        </trans-unit>
        <trans-unit id="43495845a3dbc72cde0c9f49548a7d0ccf563ed2" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s database layer provides various ways to help developers get the most out of their databases. This document gathers together links to the relevant documentation, and adds various tips, organized under a number of headings that outline the steps to take when attempting to optimize your database usage.</source>
          <target state="translated">Djangoのデータベースレイヤーは、開発者がデータベースを最大限に活用するのに役立つさまざまな方法を提供します。このドキュメントは、関連するドキュメントへのリンクをまとめ、さまざまなヒントを追加します。データベースの使用を最適化しようとするときに実行する手順の概要を示すいくつかの見出しの下にまとめられています。</target>
        </trans-unit>
        <trans-unit id="0475c07d5782ed4b2001b68d7d809a32e56ec47a" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s default behavior is to run in autocommit mode. Each query is immediately committed to the database, unless a transaction is active. &lt;a href=&quot;#autocommit-details&quot;&gt;See below for details&lt;/a&gt;.</source>
          <target state="translated">Djangoのデフォルトの動作は、自動コミットモードで実行することです。トランザクションがアクティブでない限り、各クエリはすぐにデータベースにコミットされます。&lt;a href=&quot;#autocommit-details&quot;&gt;詳細については、以下を参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b8cbf3b174d1ffa16e55b47feec2bab4b713d089" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s default file storage is given by the &lt;a href=&quot;../ref/settings#std:setting-DEFAULT_FILE_STORAGE&quot;&gt;&lt;code&gt;DEFAULT_FILE_STORAGE&lt;/code&gt;&lt;/a&gt; setting; if you don&amp;rsquo;t explicitly provide a storage system, this is the one that will be used.</source>
          <target state="translated">Djangoのデフォルトのファイルストレージは、&lt;a href=&quot;../ref/settings#std:setting-DEFAULT_FILE_STORAGE&quot;&gt; &lt;code&gt;DEFAULT_FILE_STORAGE&lt;/code&gt; &lt;/a&gt;設定によって指定されます。ストレージシステムを明示的に指定しない場合は、これが使用されます。</target>
        </trans-unit>
        <trans-unit id="99476d04c00fd862c3aafcc3d210514bfb63bf87" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s default logging configuration</source>
          <target state="translated">Djangoのデフォルトのログ設定</target>
        </trans-unit>
        <trans-unit id="2fa97b6c90915a3c003302b386b76e6031e5510b" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s default transaction behavior</source>
          <target state="translated">Djangoのデフォルトのトランザクション動作</target>
        </trans-unit>
        <trans-unit id="a0edabcecfdfb4326c1402d6f616e4d2fa0593d7" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s form (and model) fields support use of utility functions and classes known as validators. A validator is a callable object or function that takes a value and returns nothing if the value is valid or raises a &lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if not. These can be passed to a field&amp;rsquo;s constructor, via the field&amp;rsquo;s &lt;code&gt;validators&lt;/code&gt; argument, or defined on the &lt;a href=&quot;fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; class itself with the &lt;code&gt;default_validators&lt;/code&gt; attribute.</source>
          <target state="translated">Djangoのフォーム（およびモデル）フィールドは、バリデーターと呼ばれるユーティリティ関数とクラスの使用をサポートしています。バリデーターは、値を取り、値が有効な場合は何も返さない、有効でない場合は&lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; を&lt;/a&gt;発生させる呼び出し可能なオブジェクトまたは関数です。これらは、フィールドの &lt;code&gt;validators&lt;/code&gt; 引数を介してフィールドのコンストラクターに渡すか、 &lt;code&gt;default_validators&lt;/code&gt; 属性を使用して&lt;a href=&quot;fields#django.forms.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;クラス自体で定義できます。</target>
        </trans-unit>
        <trans-unit id="db77d8abc5a3a6967c3bb882d9fd7586a55e2353" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s form functionality can simplify and automate vast portions of this work, and can also do it more securely than most programmers would be able to do in code they wrote themselves.</source>
          <target state="translated">Djangoのフォーム機能は、この作業の大部分を簡素化および自動化でき、ほとんどのプログラマーが自分で記述したコードで実行できるよりも安全に実行できます。</target>
        </trans-unit>
        <trans-unit id="ce888d5b65df1849ab662435057511804109799e" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s form widgets are rendered using Django&amp;rsquo;s &lt;a href=&quot;../../topics/templates&quot;&gt;template engines system&lt;/a&gt;.</source>
          <target state="translated">Djangoのフォームウィジェットは、Djangoの&lt;a href=&quot;../../topics/templates&quot;&gt;テンプレートエンジンシステム&lt;/a&gt;を使用してレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="863790eee5d2670b4a0d6b89f1145795fe22f204" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s formatting system is capable of displaying dates, times and numbers in templates using the format specified for the current &lt;a href=&quot;index#term-locale-name&quot;&gt;locale&lt;/a&gt;. It also handles localized input in forms.</source>
          <target state="translated">Djangoのフォーマットシステムは、現在の&lt;a href=&quot;index#term-locale-name&quot;&gt;ロケールに&lt;/a&gt;指定されたフォーマットを使用して、テンプレートに日付、時刻、数値を表示できます。フォームのローカライズされた入力も処理します。</target>
        </trans-unit>
        <trans-unit id="251ea674371562fd351a4ff63c9428379eb62098" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s generic views are built off of those base views, and were developed as a shortcut for common usage patterns such as displaying the details of an object. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to repeat yourself.</source>
          <target state="translated">Djangoの汎用ビューは、これらのベースビューから構築され、オブジェクトの詳細の表示などの一般的な使用パターンのショートカットとして開発されました。それらは、ビューの開発で見られる特定の一般的なイディオムとパターンを取得し、それらを抽象化するため、繰り返し使用することなく、データの一般的なビューをすばやく記述できます。</target>
        </trans-unit>
        <trans-unit id="f570d4bfdc4e4d59d977de0beb89aa51768a12c1" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s internationalization hooks are on by default, and that means there&amp;rsquo;s a bit of i18n-related overhead in certain places of the framework. If you don&amp;rsquo;t use internationalization, you should take the two seconds to set &lt;a href=&quot;../../ref/settings#std:setting-USE_I18N&quot;&gt;&lt;code&gt;USE_I18N = False&lt;/code&gt;&lt;/a&gt; in your settings file. Then Django will make some optimizations so as not to load the internationalization machinery.</source>
          <target state="translated">Djangoの国際化フックはデフォルトでオンになっています。これは、フレームワークの特定の場所にi18n関連のオーバーヘッドが少しあることを意味します。国際化を使用しない場合は、設定ファイルで&lt;a href=&quot;../../ref/settings#std:setting-USE_I18N&quot;&gt; &lt;code&gt;USE_I18N = False&lt;/code&gt; &lt;/a&gt;を設定するのに 2秒かかります。次に、Djangoは国際化機構を読み込まないようにいくつかの最適化を行います。</target>
        </trans-unit>
        <trans-unit id="95ce703bb76725592ba243d7b90ca6530d51f3e4" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s logging extensions</source>
          <target state="translated">Djangoのロギング拡張機能</target>
        </trans-unit>
        <trans-unit id="4c6d7373d459c31ef450694489b14ceea4c53c6c" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s login form is returned using the &lt;code&gt;POST&lt;/code&gt; method, in which the browser bundles up the form data, encodes it for transmission, sends it to the server, and then receives back its response.</source>
          <target state="translated">Djangoのログインフォームは、 &lt;code&gt;POST&lt;/code&gt; メソッドを使用して返されます。このメソッドでは、ブラウザがフォームデータをバンドルし、送信用にエンコードして、サーバーに送信し、応答を受け取ります。</target>
        </trans-unit>
        <trans-unit id="d1e32b9d45e6840e0ff22da85d1b13d24c925144" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s media upload handling poses some vulnerabilities when that media is served in ways that do not follow security best practices. Specifically, an HTML file can be uploaded as an image if that file contains a valid PNG header followed by malicious HTML. This file will pass verification of the library that Django uses for &lt;a href=&quot;../ref/models/fields#django.db.models.ImageField&quot;&gt;&lt;code&gt;ImageField&lt;/code&gt;&lt;/a&gt; image processing (Pillow). When this file is subsequently displayed to a user, it may be displayed as HTML depending on the type and configuration of your web server.</source>
          <target state="translated">Djangoのメディアアップロード処理は、セキュリティのベストプラクティスに従わない方法でメディアが提供されると、いくつかの脆弱性をもたらします。具体的には、HTMLファイルに有効なPNGヘッダーとそれに続く悪意のあるHTMLが含まれている場合、そのファイルを画像としてアップロードできます。このファイルは、Djangoが&lt;a href=&quot;../ref/models/fields#django.db.models.ImageField&quot;&gt; &lt;code&gt;ImageField&lt;/code&gt; &lt;/a&gt;画像処理（枕）に使用するライブラリの検証に合格します。このファイルが後でユーザーに表示されるときに、Webサーバーのタイプと構成によっては、HTMLとして表示される場合があります。</target>
        </trans-unit>
        <trans-unit id="0407633c251ef705f61c28c08d2693776c28ec73" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s migration system is split into two parts; the logic for calculating and storing what operations should be run (&lt;code&gt;django.db.migrations&lt;/code&gt;), and the database abstraction layer that turns things like &amp;ldquo;create a model&amp;rdquo; or &amp;ldquo;delete a field&amp;rdquo; into SQL - which is the job of the &lt;code&gt;SchemaEditor&lt;/code&gt;.</source>
          <target state="translated">Djangoの移行システムは2つの部分に分かれています。実行する操作（ &lt;code&gt;django.db.migrations&lt;/code&gt; ）を計算して保存するロジック、および「モデルの作成」や「フィールドの削除」などをSQLに変換するデータベース抽象化レイヤー-これは &lt;code&gt;SchemaEditor&lt;/code&gt; の仕事です。</target>
        </trans-unit>
        <trans-unit id="362c6abb37eea505de938917ab50ce947d4a7060" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s permission framework does not have a place to store permissions for anonymous users. However, the user object passed to an authentication backend may be an &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt;&lt;code&gt;django.contrib.auth.models.AnonymousUser&lt;/code&gt;&lt;/a&gt; object, allowing the backend to specify custom authorization behavior for anonymous users. This is especially useful for the authors of re-usable apps, who can delegate all questions of authorization to the auth backend, rather than needing settings, for example, to control anonymous access.</source>
          <target state="translated">Djangoの権限フレームワークには、匿名ユーザーの権限を保存する場所がありません。ただし、認証バックエンドに渡されるユーザーオブジェクトは&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt; &lt;code&gt;django.contrib.auth.models.AnonymousUser&lt;/code&gt; &lt;/a&gt;オブジェクトであり、バックエンドが匿名ユーザーのカスタム認証動作を指定できるようにします。これは、匿名アクセスを制御するなどの設定を必要とせずに、認証のすべての質問をauthバックエンドに委任できる再利用可能なアプリの作成者にとって特に便利です。</target>
        </trans-unit>
        <trans-unit id="7e3aac4afedc8a398da48052b9846fe5f1fe5f17" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s permission framework has a foundation for object permissions, though there is no implementation for it in the core. That means that checking for object permissions will always return &lt;code&gt;False&lt;/code&gt; or an empty list (depending on the check performed). An authentication backend will receive the keyword parameters &lt;code&gt;obj&lt;/code&gt; and &lt;code&gt;user_obj&lt;/code&gt; for each object related authorization method and can return the object level permission as appropriate.</source>
          <target state="translated">Djangoのパーミッションフレームワークにはオブジェクトパーミッションの基盤がありますが、コアには実装されていません。つまり、オブジェクトの権限をチェックすると、常に &lt;code&gt;False&lt;/code&gt; または空のリストが返されます（実行されたチェックによって異なります）。認証バックエンドは、オブジェクトに関連する承認メソッドごとにキーワードパラメータ &lt;code&gt;obj&lt;/code&gt; および &lt;code&gt;user_obj&lt;/code&gt; を受け取り、必要に応じてオブジェクトレベルの権限を返すことができます。</target>
        </trans-unit>
        <trans-unit id="acc360c1a49ada4ffe66147b3cdee88b9e43ff8f" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s primary deployment platform is &lt;a href=&quot;https://wsgi.readthedocs.io/en/latest/&quot;&gt;WSGI&lt;/a&gt;, the Python standard for web servers and applications.</source>
          <target state="translated">Djangoの主要なデプロイメントプラットフォームは、WebサーバーおよびアプリケーションのPython標準である&lt;a href=&quot;https://wsgi.readthedocs.io/en/latest/&quot;&gt;WSGI&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="63601f1ad840db8b2efb29625e0649a08b663687" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s querysets are protected from SQL injection since their queries are constructed using query parameterization. A query&amp;rsquo;s SQL code is defined separately from the query&amp;rsquo;s parameters. Since parameters may be user-provided and therefore unsafe, they are escaped by the underlying database driver.</source>
          <target state="translated">Djangoのクエリセットは、クエリのパラメーター化を使用して作成されるため、SQLインジェクションから保護されています。クエリのSQLコードは、クエリのパラメーターとは別に定義されます。パラメータはユーザーが指定するため安全ではない可能性があるため、基礎となるデータベースドライバによってエスケープされます。</target>
        </trans-unit>
        <trans-unit id="4591ca5ee8a8ce7333c2269b9a17b51f8da27b15" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s role in forms</source>
          <target state="translated">フォームにおけるDjangoの役割</target>
        </trans-unit>
        <trans-unit id="42238be0cf582e1445e069b6343801f5e6533820" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s serialization framework provides a mechanism for &amp;ldquo;translating&amp;rdquo; Django models into other formats. Usually these other formats will be text-based and used for sending Django data over a wire, but it&amp;rsquo;s possible for a serializer to handle any format (text-based or not).</source>
          <target state="translated">Djangoのシリアル化フレームワークは、Djangoモデルを他の形式に「変換」するメカニズムを提供します。通常、これらの他のフォーマットはテキストベースであり、Djangoデータをワイヤ経由で送信するために使用されますが、シリアライザが任意のフォーマット（テキストベースかどうかに関係なく）を処理することは可能です。</target>
        </trans-unit>
        <trans-unit id="8703506b81ae70fa19e59f2770d83f1eb9e3ffa3" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s signing methods live in the &lt;code&gt;django.core.signing&lt;/code&gt; module. To sign a value, first instantiate a &lt;code&gt;Signer&lt;/code&gt; instance:</source>
          <target state="translated">Djangoの署名メソッドは &lt;code&gt;django.core.signing&lt;/code&gt; モジュールにあります。値に署名するには、まず &lt;code&gt;Signer&lt;/code&gt; インスタンスをインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="53aec50e7654838c12a9c469c57de58ef443c013" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s system checks are organized using the following tags:</source>
          <target state="translated">Djangoのシステムチェックは、次のタグを使用して構成されています。</target>
        </trans-unit>
        <trans-unit id="a160f352e5f8d5b134c9dbf569e10561cda10003" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s template engine provides a powerful mini-language for defining the user-facing layer of your application, encouraging a clean separation of application and presentation logic. Templates can be maintained by anyone with an understanding of HTML; no knowledge of Python is required. For introductory material, see &lt;a href=&quot;../../topics/templates&quot;&gt;Templates&lt;/a&gt; topic guide.</source>
          <target state="translated">Djangoのテンプレートエンジンは、アプリケーションのユーザーに面するレイヤーを定義するための強力なミニ言語を提供し、アプリケーションとプレゼンテーションロジックの明確な分離を促進します。テンプレートは、HTMLを理解している人ならだれでも保守できます。Pythonの知識は必要ありません。紹介資料については、&lt;a href=&quot;../../topics/templates&quot;&gt;テンプレートの&lt;/a&gt;トピックガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="e19640dc6772dc6363b4a0d75bcc3ca278373e92" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s template language comes with a wide variety of &lt;a href=&quot;../ref/templates/builtins&quot;&gt;built-in tags and filters&lt;/a&gt; designed to address the presentation logic needs of your application. Nevertheless, you may find yourself needing functionality that is not covered by the core set of template primitives. You can extend the template engine by defining custom tags and filters using Python, and then make them available to your templates using the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt;&lt;code&gt;{% load %}&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="translated">Djangoのテンプレート言語には、アプリケーションのプレゼンテーションロジックのニーズに対応するように設計さ&lt;a href=&quot;../ref/templates/builtins&quot;&gt;れた&lt;/a&gt;さまざまな組み込みタグとフィルターが付属しています。それでも、テンプレートプリミティブのコアセットではカバーされていない機能が必要になる場合があります。Pythonを使用してカスタムタグとフィルターを定義することでテンプレートエンジンを拡張し、&lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt; &lt;code&gt;{% load %}&lt;/code&gt; &lt;/a&gt;タグを使用してそれらをテンプレートで使用できるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="6b39e75e3b386c23fbff875c361b07353d376fb8" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s template language has no way to escape the characters used for its own syntax. For example, the &lt;a href=&quot;builtins#std:templatetag-templatetag&quot;&gt;&lt;code&gt;templatetag&lt;/code&gt;&lt;/a&gt; tag is required if you need to output character sequences like &lt;code&gt;{%&lt;/code&gt; and &lt;code&gt;%}&lt;/code&gt;.</source>
          <target state="translated">Djangoのテンプレート言語には、独自の構文に使用されている文字をエスケープする方法がありません。たとえば、 &lt;code&gt;{%&lt;/code&gt; や &lt;code&gt;%}&lt;/code&gt; などの文字シーケンスを出力する必要がある場合は、&lt;a href=&quot;builtins#std:templatetag-templatetag&quot;&gt; &lt;code&gt;templatetag&lt;/code&gt; &lt;/a&gt;タグが必要です。</target>
        </trans-unit>
        <trans-unit id="14555b2e3ae04bcae362be6734a260a81cd471b2" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s template language is designed to strike a balance between power and ease. It&amp;rsquo;s designed to feel comfortable to those used to working with HTML. If you have any exposure to other text-based template languages, such as &lt;a href=&quot;https://www.smarty.net/&quot;&gt;Smarty&lt;/a&gt; or &lt;a href=&quot;https://palletsprojects.com/p/jinja/&quot;&gt;Jinja2&lt;/a&gt;, you should feel right at home with Django&amp;rsquo;s templates.</source>
          <target state="translated">Djangoのテンプレート言語は、力と使いやすさのバランスを取るように設計されています。HTMLでの作業に慣れているユーザーに快適に感じるように設計されています。&lt;a href=&quot;https://www.smarty.net/&quot;&gt;Smarty&lt;/a&gt;や&lt;a href=&quot;https://palletsprojects.com/p/jinja/&quot;&gt;Jinja2&lt;/a&gt;など、他のテキストベースのテンプレート言語を使用している場合は、Djangoのテンプレートを使用してくつろいでいるはずです。</target>
        </trans-unit>
        <trans-unit id="16f551e3c928626220ff5b018dd07854d5e2d6bd" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s test runner &lt;a href=&quot;testing/tools#topics-testing-email&quot;&gt;automatically uses this backend for testing&lt;/a&gt;.</source>
          <target state="translated">Djangoのテストランナー&lt;a href=&quot;testing/tools#topics-testing-email&quot;&gt;は、このバックエンドをテストに自動的に使用します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ad452e06fc5584f4e2b1539eb2e854800b62138c" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s translation machinery uses the standard &lt;code&gt;gettext&lt;/code&gt; module that comes with Python. If you know &lt;code&gt;gettext&lt;/code&gt;, you might note these specialties in the way Django does translation:</source>
          <target state="translated">Djangoの翻訳機構は、Pythonに付属する標準の &lt;code&gt;gettext&lt;/code&gt; モジュールを使用します。 &lt;code&gt;gettext&lt;/code&gt; を知っている場合は、Djangoが翻訳を行う方法でこれらの専門分野に注意するかもしれません。</target>
        </trans-unit>
        <trans-unit id="65be3002faaabd9496fc535a56e83b3f0d75a1c6" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s unit tests use a Python standard library module: &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt;. This module defines tests using a class-based approach.</source>
          <target state="translated">Djangoのユニットテストでは、Python標準ライブラリモジュールである&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; を&lt;/a&gt;使用します。このモジュールは、クラスベースのアプローチを使用してテストを定義します。</target>
        </trans-unit>
        <trans-unit id="4fc143fc0eda0cf077c0ed8bc159a7d57fe70378" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s user management, such as the views in &lt;code&gt;contrib.admin&lt;/code&gt; and the &lt;a href=&quot;../ref/django-admin#django-admin-createsuperuser&quot;&gt;&lt;code&gt;createsuperuser&lt;/code&gt;&lt;/a&gt; management command, doesn&amp;rsquo;t integrate with remote users. These interfaces work with users stored in the database regardless of &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;contrib.admin&lt;/code&gt; のビューや&lt;a href=&quot;../ref/django-admin#django-admin-createsuperuser&quot;&gt; &lt;code&gt;createsuperuser&lt;/code&gt; &lt;/a&gt;管理コマンドなどのDjangoのユーザー管理は、リモートユーザーと統合されていません。これらのインターフェースは、 &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; に関係なく、データベースに保存されているユーザーと連携します。</target>
        </trans-unit>
        <trans-unit id="f8d33492936d18c83b291c750d67dfd47e5d6706" translate="yes" xml:space="preserve">
          <source>Django, being a web framework, needs a web server in order to operate. And since most web servers don&amp;rsquo;t natively speak Python, we need an interface to make that communication happen.</source>
          <target state="translated">DjangoはWebフレームワークであるため、操作するにはWebサーバーが必要です。また、ほとんどのWebサーバーはPythonをネイティブに話さないため、そのような通信を実現するためのインターフェイスが必要です。</target>
        </trans-unit>
        <trans-unit id="934f62e1aea889201d007374ce24f016befee47a" translate="yes" xml:space="preserve">
          <source>Django’s cache framework</source>
          <target state="translated">Django のキャッシュフレームワーク</target>
        </trans-unit>
        <trans-unit id="df1004360a164221004a52561cd1348571cf4ffb" translate="yes" xml:space="preserve">
          <source>Do NOT prompt the user for input of any kind.</source>
          <target state="translated">ユーザーに何らかの入力を求めないでください。</target>
        </trans-unit>
        <trans-unit id="d858235a9d9177bc29759cd56d9c29dfa7aaf9e1" translate="yes" xml:space="preserve">
          <source>Do database work in the database rather than in Python</source>
          <target state="translated">データベースの作業はPythonではなくデータベースで行う</target>
        </trans-unit>
        <trans-unit id="ec3428b70f0216459788d56a2bf4e57a021ea83d" translate="yes" xml:space="preserve">
          <source>Do everything except modify the filesystem.</source>
          <target state="translated">ファイルシステムを変更する以外はすべて実行してください。</target>
        </trans-unit>
        <trans-unit id="8a74368967a74b54aeea265389bca22fa5f39931" translate="yes" xml:space="preserve">
          <source>Do not call blocking synchronous functions or libraries in any async code. Django prevents you from doing this with the parts of Django that are not async-safe, but the same may not be true of third-party apps or Python libraries.</source>
          <target state="translated">同期関数やライブラリのブロッキングを非同期コードで呼び出してはいけません。Django では、非同期セーフではない部分ではこのようなことができませんが、サードパーティ製のアプリや Python のライブラリでは同じことができない場合があります。</target>
        </trans-unit>
        <trans-unit id="e006986f81b7f13767a655a42e602b79e72a8e72" translate="yes" xml:space="preserve">
          <source>Do not forget to test for the &lt;code&gt;is_active&lt;/code&gt; attribute of the user in your own backend permission methods.</source>
          <target state="translated">独自のバックエンド許可メソッドでユーザーの &lt;code&gt;is_active&lt;/code&gt; 属性をテストすることを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="fe4580b9f0b2c4dc29c7bea0ad1d859a75195e5d" translate="yes" xml:space="preserve">
          <source>Do not mix both positional and keyword syntax in a single call. All arguments required by the URLconf should be present.</source>
          <target state="translated">一度の呼び出しで位置構文とキーワード構文の両方を混在させてはいけません。URLconf で必要とされるすべての引数が存在しなければなりません。</target>
        </trans-unit>
        <trans-unit id="21e98a44ac336e561e6d3687d6c1ab4e4830fa35" translate="yes" xml:space="preserve">
          <source>Do this for your own sanity. Storing all templates in the root level of a single directory gets messy.</source>
          <target state="translated">これは自分の正気を保つためにやってください。1つのディレクトリのルートレベルにすべてのテンプレートを保存すると、面倒なことになります。</target>
        </trans-unit>
        <trans-unit id="c0baec4f12b614c0b62754a64bec9c43897a3317" translate="yes" xml:space="preserve">
          <source>Do you need a &lt;code&gt;ModelAdmin&lt;/code&gt; object at all?</source>
          <target state="translated">&lt;code&gt;ModelAdmin&lt;/code&gt; オブジェクトが必要ですか？</target>
        </trans-unit>
        <trans-unit id="a90f2006b2a268ba81790f237bfac91e8405fd2b" translate="yes" xml:space="preserve">
          <source>Document-based search</source>
          <target state="translated">ドキュメントベースの検索</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="f754fbc2d6c8d414319d31d01fcee89191f5d416" translate="yes" xml:space="preserve">
          <source>Documentation for this page</source>
          <target state="translated">このページのドキュメント</target>
        </trans-unit>
        <trans-unit id="99370224b715d587c92b553574529efe53c6ebb8" translate="yes" xml:space="preserve">
          <source>Documentation helpers</source>
          <target state="translated">ドキュメントヘルパー</target>
        </trans-unit>
        <trans-unit id="d0c1a860c36aaaee3e92942f291fcaaacf4f6797" translate="yes" xml:space="preserve">
          <source>Documenting your custom field</source>
          <target state="translated">カスタムフィールドを文書化する</target>
        </trans-unit>
        <trans-unit id="2580bd626b0ae0ba7498e008f2c81fdbbc7f9673" translate="yes" xml:space="preserve">
          <source>Doing the following is potentially quite slow:</source>
          <target state="translated">以下のようなことをするのは、潜在的にかなりの時間がかかります。</target>
        </trans-unit>
        <trans-unit id="d4762f076dd7573f28f1168a5f133a10a062c343" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t be fooled into thinking that if your &lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt;&lt;code&gt;DEFAULT_CHARSET&lt;/code&gt;&lt;/a&gt; setting is set to something other than &lt;code&gt;'utf-8'&lt;/code&gt; you can use that other encoding in your bytestrings! &lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt;&lt;code&gt;DEFAULT_CHARSET&lt;/code&gt;&lt;/a&gt; only applies to the strings generated as the result of template rendering (and email). Django will always assume UTF-8 encoding for internal bytestrings. The reason for this is that the &lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt;&lt;code&gt;DEFAULT_CHARSET&lt;/code&gt;&lt;/a&gt; setting is not actually under your control (if you are the application developer). It&amp;rsquo;s under the control of the person installing and using your application &amp;ndash; and if that person chooses a different setting, your code must still continue to work. Ergo, it cannot rely on that setting.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt; &lt;code&gt;DEFAULT_CHARSET&lt;/code&gt; &lt;/a&gt;設定が &lt;code&gt;'utf-8'&lt;/code&gt; 以外に設定されている場合、バイト文字列で他のエンコーディングを使用できると考えて騙されないでください。&lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt; &lt;code&gt;DEFAULT_CHARSET&lt;/code&gt; &lt;/a&gt;は、テンプレートのレンダリング（および電子メール）の結果として生成された文字列にのみ適用されます。 Djangoは常に内部バイト文字列にUTF-8エンコーディングを想定しています。これは、&lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt; &lt;code&gt;DEFAULT_CHARSET&lt;/code&gt; &lt;/a&gt;設定が実際には制御できないためです（アプリケーション開発者の場合）。アプリケーションをインストールして使用する人の管理下にあり、その人が別の設定を選択した場合でも、コードは引き続き機能する必要があります。エルゴ、それはその設定に依存することはできません。</target>
        </trans-unit>
        <trans-unit id="dd837b46e4cb5b6df914ad062a51d4553c8fdeda" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t be too aggressive in deferring fields without profiling as the database has to read most of the non-text, non-VARCHAR data from the disk for a single row in the results, even if it ends up only using a few columns. The &lt;code&gt;defer()&lt;/code&gt; and &lt;code&gt;only()&lt;/code&gt; methods are most useful when you can avoid loading a lot of text data or for fields that might take a lot of processing to convert back to Python. As always, profile first, then optimize.</source>
          <target state="translated">結果として数列しか使用しない場合でも、データベースは結果の単一行について、ディスクからほとんどの非テキスト、非VARCHARデータを読み取る必要があるため、プロファイリングなしでフィールドを据え置くことにあまり積極的ではありません。 &lt;code&gt;defer()&lt;/code&gt; と &lt;code&gt;only()&lt;/code&gt; メソッドを使用すると、テキストデータのやPythonに戻って変換するために、多くの処理がかかる場合がありますフィールドのためにたくさんのロードを避けることができたときに最も便利です。いつものように、最初にプロファイルを作成し、次に最適化します。</target>
        </trans-unit>
        <trans-unit id="37d4f8a03b5d54ce0ebe33f4ce5874e1c95cd3ee" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t call the &lt;a href=&quot;#django.contrib.staticfiles.storage.StaticFilesStorage.post_process&quot;&gt;&lt;code&gt;post_process()&lt;/code&gt;&lt;/a&gt; method of the configured &lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt; storage backend.</source>
          <target state="translated">構成された&lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt; &lt;code&gt;STATICFILES_STORAGE&lt;/code&gt; &lt;/a&gt;ストレージバックエンドの&lt;a href=&quot;#django.contrib.staticfiles.storage.StaticFilesStorage.post_process&quot;&gt; &lt;code&gt;post_process()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出さないでください。</target>
        </trans-unit>
        <trans-unit id="04f2777234dd12de239b6354c8139f864a2f436b" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t coerce variables into the message; use placeholders and the &lt;code&gt;params&lt;/code&gt; argument of the constructor:</source>
          <target state="translated">変数をメッセージに強制しないでください。プレースホルダーとコンストラクターの &lt;code&gt;params&lt;/code&gt; 引数を使用します。</target>
        </trans-unit>
        <trans-unit id="bf90a5e446cb7ac1d8d42f9a3604f7e3fe48aff9" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t filter away any results in this type of manager subclass</source>
          <target state="translated">このタイプのマネージャーサブクラスの結果を除外しないでください</target>
        </trans-unit>
        <trans-unit id="1080e6ac5115215a7c4ae04338549fc4bb6ecc24" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget that a form&amp;rsquo;s output does &lt;em&gt;not&lt;/em&gt; include the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags, or the form&amp;rsquo;s &lt;code&gt;submit&lt;/code&gt; control. You will have to provide these yourself.</source>
          <target state="translated">フォームの出力がないことを忘れないでください&lt;em&gt;ない&lt;/em&gt;周囲含ん &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグ、またはフォームのを &lt;code&gt;submit&lt;/code&gt; コントロールを。これらは自分で用意する必要があります。</target>
        </trans-unit>
        <trans-unit id="0d38ac7c0c138856285fba16e184d4c9a468c217" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget to also include in &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; any hashing algorithm used in fixtures, if any.</source>
          <target state="translated">フィクスチャで使用されているハッシュアルゴリズムがある場合は、&lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt;にも含めることを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="2f5f8c73c25fa365b527edc9a5116f7165a6724e" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget to point &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; to it. Do this before creating any migrations or running &lt;code&gt;manage.py migrate&lt;/code&gt; for the first time.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt;をポイントすることを忘れないでください。マイグレーションを作成する前、または &lt;code&gt;manage.py migrate&lt;/code&gt; を初めて実行する前に、これを行ってください。</target>
        </trans-unit>
        <trans-unit id="bbe1f2a043cf6719396e432a5b929b89643ddb91" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget to put quotes around the URL pattern &lt;code&gt;name&lt;/code&gt;, otherwise the value will be interpreted as a context variable!</source>
          <target state="translated">URLパターン &lt;code&gt;name&lt;/code&gt; 引用符で囲むことを忘れないでください。そうしないと、値がコンテキスト変数として解釈されます。</target>
        </trans-unit>
        <trans-unit id="90097552d3e60614d6a41d5308c000e5db1bc750" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t ignore the common private glob-style patterns &lt;code&gt;'CVS'&lt;/code&gt;, &lt;code&gt;'.*'&lt;/code&gt; and &lt;code&gt;'*~'&lt;/code&gt;.</source>
          <target state="translated">一般的なプライベートグロブスタイルのパターン &lt;code&gt;'CVS'&lt;/code&gt; 、 &lt;code&gt;'.*'&lt;/code&gt; および &lt;code&gt;'*~'&lt;/code&gt; 無視しないでください。</target>
        </trans-unit>
        <trans-unit id="e645d3e04d11607862655540ae491b84e64b1c5e" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t include a field in &lt;code&gt;radio_fields&lt;/code&gt; unless it&amp;rsquo;s a &lt;code&gt;ForeignKey&lt;/code&gt; or has &lt;code&gt;choices&lt;/code&gt; set.</source>
          <target state="translated">それが &lt;code&gt;ForeignKey&lt;/code&gt; であるか、 &lt;code&gt;choices&lt;/code&gt; 設定されていない限り、 &lt;code&gt;radio_fields&lt;/code&gt; にフィールドを含めないでください。</target>
        </trans-unit>
        <trans-unit id="2d2d13739ffa2f2cccadad953eef95c05fcaa3f6" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t order results if you don&amp;rsquo;t care</source>
          <target state="translated">気にしない場合は結果を注文しないでください</target>
        </trans-unit>
        <trans-unit id="4e04470a576f55f60d263fe4d293f22d36777c5e" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t override &lt;code&gt;request.session&lt;/code&gt; with a new object, and don&amp;rsquo;t access or set its attributes. Use it like a Python dictionary.</source>
          <target state="translated">&lt;code&gt;request.session&lt;/code&gt; を新しいオブジェクトでオーバーライドしたり、その属性にアクセスしたり設定したりしないでください。Python辞書のように使用します。</target>
        </trans-unit>
        <trans-unit id="a32ee18dbc41da8dbcacf123cfc922b331780ddf" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t overuse &lt;code&gt;count()&lt;/code&gt; and &lt;code&gt;exists()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;count()&lt;/code&gt; と &lt;code&gt;exists()&lt;/code&gt; を使いすぎないでください</target>
        </trans-unit>
        <trans-unit id="2d3bab11a7fec0a18517d185cd3f1a8c51b26c74" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t reinvent an already-existing setting.</source>
          <target state="translated">既存の設定を再発明しないでください。</target>
        </trans-unit>
        <trans-unit id="a7acff519f6c52e3a05506eb49f697f029f21dfa" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t rely on validation of the file extension to determine a file&amp;rsquo;s type. Files can be renamed to have any extension no matter what data they contain.</source>
          <target state="translated">ファイル拡張子の検証に依存してファイルのタイプを判断しないでください。ファイルに含まれるデータに関係なく、ファイルの名前を変更して拡張子を付けることができます。</target>
        </trans-unit>
        <trans-unit id="011e95a05e1af4dd1169209d67a68f9568e24b66" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t retrieve things you don&amp;rsquo;t need</source>
          <target state="translated">不要なものを取り戻さない</target>
        </trans-unit>
        <trans-unit id="79096f7ad978e3a224aa3b6df8877f6a1249d8e6" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t try to implement your own singular-or-plural logic; it won&amp;rsquo;t be correct. In a case like this, consider something like the following:</source>
          <target state="translated">独自の単一または複数のロジックを実装しようとしないでください。それは正しくありません。このような場合は、次のようなものを検討してください。</target>
        </trans-unit>
        <trans-unit id="506b22a0c66a1ec18715058b5f42651679dfb375" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t worry - the numbers are just there for developers&amp;rsquo; reference, Django just cares that each migration has a different name. Migrations specify which other migrations they depend on - including earlier migrations in the same app - in the file, so it&amp;rsquo;s possible to detect when there&amp;rsquo;s two new migrations for the same app that aren&amp;rsquo;t ordered.</source>
          <target state="translated">心配しないでください-数値は開発者が参照できるように記載されているだけです。Djangoは、各移行の名前が異なることに注意します。移行では、他のどの移行に依存するか（同じアプリでの以前の移行を含む）をファイルで指定します。そのため、順序付けされていない同じアプリの新しい移行が2つあることを検出できます。</target>
        </trans-unit>
        <trans-unit id="a56c023f45429bfc6a50ff3204b3fd583d247c9a" translate="yes" xml:space="preserve">
          <source>Dots have a special meaning in template rendering. A dot in a variable name signifies a &lt;strong&gt;lookup&lt;/strong&gt;. Specifically, when the template system encounters a dot in a variable name, it tries the following lookups, in this order:</source>
          <target state="translated">ドットは、テンプレートのレンダリングで特別な意味を持ちます。変数名のドットは&lt;strong&gt;ルックアップを&lt;/strong&gt;示し&lt;strong&gt;ます&lt;/strong&gt;。具体的には、テンプレートシステムが変数名にドットを検出すると、次のルックアップをこの順序で試行します。</target>
        </trans-unit>
        <trans-unit id="1a17bd0d0ebe6d43d919344c0ed0bf7892398df2" translate="yes" xml:space="preserve">
          <source>Download the Django source code repository using the following command:</source>
          <target state="translated">以下のコマンドでDjangoのソースコードリポジトリをダウンロードします。</target>
        </trans-unit>
        <trans-unit id="c07cff8ea64814f9659f9257d838b13f1332774e" translate="yes" xml:space="preserve">
          <source>Download the framework packages for:</source>
          <target state="translated">のためのフレームワークパッケージをダウンロードします。</target>
        </trans-unit>
        <trans-unit id="6804607903a20652f41fcc35a8092aeefbb76e36" translate="yes" xml:space="preserve">
          <source>Download the latest &lt;a href=&quot;https://www.enterprisedb.com/downloads/postgres-postgresql-downloads&quot;&gt;PostgreSQL 12.x installer&lt;/a&gt; from the &lt;a href=&quot;https://www.enterprisedb.com&quot;&gt;EnterpriseDB&lt;/a&gt; website. After downloading, run the installer, follow the on-screen directions, and keep the default options unless you know the consequences of changing them.</source>
          <target state="translated">&lt;a href=&quot;https://www.enterprisedb.com&quot;&gt;EnterpriseDBWeb&lt;/a&gt;サイトから最新の&lt;a href=&quot;https://www.enterprisedb.com/downloads/postgres-postgresql-downloads&quot;&gt;PostgreSQL12.xインストーラーを&lt;/a&gt;ダウンロードします。ダウンロード後、インストーラーを実行し、画面の指示に従い、変更の結果がわからない限り、デフォルトのオプションを保持します。</target>
        </trans-unit>
        <trans-unit id="ce9c94ce55f4b81bf7c5ab4649a6e438d33bc2dc" translate="yes" xml:space="preserve">
          <source>Downloading a copy of Django&amp;rsquo;s development version.</source>
          <target state="translated">Djangoの開発バージョンのコピーをダウンロードします。</target>
        </trans-unit>
        <trans-unit id="ae229acecefae48e2d586f58b60aab4716783ae0" translate="yes" xml:space="preserve">
          <source>Downstream caches</source>
          <target state="translated">下流のキャッシュ</target>
        </trans-unit>
        <trans-unit id="a04885144d1d3c7ca4889715038a442e51697122" translate="yes" xml:space="preserve">
          <source>Downstream caching is a nice efficiency boost, but there&amp;rsquo;s a danger to it: Many Web pages&amp;rsquo; contents differ based on authentication and a host of other variables, and cache systems that blindly save pages based purely on URLs could expose incorrect or sensitive data to subsequent visitors to those pages.</source>
          <target state="translated">ダウンストリームキャッシングは優れた効率向上ですが、危険があります。多くのWebページのコンテンツは、認証や他の変数のホストに基づいて異なり、URLのみに基づいてページを盲目的に保存するキャッシュシステムは、誤ったまたは機密のデータを後続に公開する可能性がありますそれらのページへの訪問者。</target>
        </trans-unit>
        <trans-unit id="17ae1fddd2d8c6715a91a748d906239a019eb35a" translate="yes" xml:space="preserve">
          <source>Dropping the old table</source>
          <target state="translated">古いテーブルを落とす</target>
        </trans-unit>
        <trans-unit id="4c9ff3ef54852685fbf9ac86adc087462ef7cbc0" translate="yes" xml:space="preserve">
          <source>Drops the model&amp;rsquo;s table in the database along with any unique constraints or indexes it has.</source>
          <target state="translated">モデルのテーブルを、データベースにある一意の制約またはインデックスとともに削除します。</target>
        </trans-unit>
        <trans-unit id="0e5497096a9bb3625b3fdfb98617c05676b3ba07" translate="yes" xml:space="preserve">
          <source>Due to an &lt;a href=&quot;../databases#oracle-null-empty-strings&quot;&gt;Oracle convention&lt;/a&gt;, this function returns the empty string instead of &lt;code&gt;None&lt;/code&gt; when the expressions are of type &lt;a href=&quot;fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../databases#oracle-null-empty-strings&quot;&gt;Oracleの規則&lt;/a&gt;により、式が&lt;a href=&quot;fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;型の場合、この関数は &lt;code&gt;None&lt;/code&gt; ではなく空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="d3512999ad7d2bc5d6f258859c80b387be2a3125" translate="yes" xml:space="preserve">
          <source>Due to how inheritance works, you have to set both &lt;code&gt;pk&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; to None:</source>
          <target state="translated">継承のしくみのため、 &lt;code&gt;pk&lt;/code&gt; と &lt;code&gt;id&lt;/code&gt; の両方をNone に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="142738f166f91c02513294d697c43a5cf3c8ebac" translate="yes" xml:space="preserve">
          <source>Due to limitations of Django&amp;rsquo;s dynamic dependency feature for swappable models, the model referenced by &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; must be created in the first migration of its app (usually called &lt;code&gt;0001_initial&lt;/code&gt;); otherwise, you&amp;rsquo;ll have dependency issues.</source>
          <target state="translated">スワップ可能なモデルに対するDjangoの動的依存関係機能の制限により、&lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt;によって参照されるモデルは、アプリの最初の移行時に作成する必要があります（通常は &lt;code&gt;0001_initial&lt;/code&gt; と呼ばれます）。そうしないと、依存関係の問題が発生します。</target>
        </trans-unit>
        <trans-unit id="87513fd904b2b5bd40f6944839696ca0360d1f3c" translate="yes" xml:space="preserve">
          <source>Due to the requirement of running &lt;a href=&quot;#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt;, this storage typically shouldn&amp;rsquo;t be used when running tests as &lt;code&gt;collectstatic&lt;/code&gt; isn&amp;rsquo;t run as part of the normal test setup. During testing, ensure that the &lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt; setting is set to something else like &lt;code&gt;'django.contrib.staticfiles.storage.StaticFilesStorage'&lt;/code&gt; (the default).</source>
          <target state="translated">実行されているの要求に&lt;a href=&quot;#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; を&lt;/a&gt;としてテストを実行する場合、このストレージは、一般的に使用すべきではない &lt;code&gt;collectstatic&lt;/code&gt; は、通常のテスト・セットアップの一部として実行されていません。テスト中、&lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt; &lt;code&gt;STATICFILES_STORAGE&lt;/code&gt; &lt;/a&gt;設定が &lt;code&gt;'django.contrib.staticfiles.storage.StaticFilesStorage'&lt;/code&gt; django.contrib.staticfiles.storage.StaticFilesStorage '（デフォルト）などに設定されていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="a44740c0ae275073e9fad20647ab08194486fb6b" translate="yes" xml:space="preserve">
          <source>Due to the way &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt; is implemented, you cannot use such fields directly with filters (&lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;exclude()&lt;/code&gt;, for example) via the database API. Because a &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t a normal field object, these examples will &lt;em&gt;not&lt;/em&gt; work:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; の&lt;/a&gt;実装方法が原因で、データベースAPIを介してそのようなフィールドをフィルター（ &lt;code&gt;filter()&lt;/code&gt; や &lt;code&gt;exclude()&lt;/code&gt; など）で直接使用することはできません。&lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; &lt;/a&gt;は通常のフィールドオブジェクトではないため、次の例は機能し&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="5f3f6be92c2e8d6e8a0a50295137151db408aed3" translate="yes" xml:space="preserve">
          <source>Due to the way &lt;code&gt;UserPassesTestMixin&lt;/code&gt; is implemented, you cannot stack them in your inheritance list. The following does NOT work:</source>
          <target state="translated">&lt;code&gt;UserPassesTestMixin&lt;/code&gt; の実装方法が原因で、継承リストにそれらをスタックすることはできません。以下は機能しません：</target>
        </trans-unit>
        <trans-unit id="d10e91891afc0fa62133c29a5fad1f13fc68fd3b" translate="yes" xml:space="preserve">
          <source>Due to the way Python inheritance works, if a child class inherits from multiple abstract base classes, only the &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; options from the first listed class will be inherited by default. To inherit &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; options from multiple abstract base classes, you must explicitly declare the &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; inheritance. For example:</source>
          <target state="translated">Python継承の仕組みにより、子クラスが複数の抽象基本クラスから継承する場合、デフォルトでは、最初にリストされたクラスの&lt;a href=&quot;#meta-options&quot;&gt;メタ&lt;/a&gt;オプションのみが継承されます。複数の抽象基本クラスから&lt;a href=&quot;#meta-options&quot;&gt;メタ&lt;/a&gt;オプションを継承するには、&lt;a href=&quot;#meta-options&quot;&gt;メタ&lt;/a&gt;継承を明示的に宣言する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="5d8b9b4d3b5864b0cc136a162b00ab1fc2e1ee6d" translate="yes" xml:space="preserve">
          <source>Due to the way cookies (and hence sessions) work, &lt;strong&gt;the behavior of any backends that make use of cookies or sessions is undefined when the same client makes multiple requests that set or get messages in parallel&lt;/strong&gt;. For example, if a client initiates a request that creates a message in one window (or tab) and then another that fetches any uniterated messages in another window, before the first window redirects, the message may appear in the second window instead of the first window where it may be expected.</source>
          <target state="translated">Cookie（およびセッション）の&lt;strong&gt;仕組みにより、同じクライアントがメッセージを並行して設定または取得する複数のリクエストを行った場合、Cookieまたはセッションを使用するバックエンドの動作は定義されていません&lt;/strong&gt;。たとえば、クライアントが1つのウィンドウ（またはタブ）にメッセージを作成する要求を開始し、別のウィンドウで統合メッセージをフェッチする別のウィンドウを開始すると、最初のウィンドウがリダイレクトされる前に、メッセージが最初のウィンドウではなく2番目のウィンドウに表示される場合があります。予想されるウィンドウ。</target>
        </trans-unit>
        <trans-unit id="894217d8773bdddf4249d7092d6f81fdab57d6c3" translate="yes" xml:space="preserve">
          <source>Due to the way cookies work, &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;domain&lt;/code&gt; should be the same values you used in &lt;code&gt;set_cookie()&lt;/code&gt; &amp;ndash; otherwise the cookie may not be deleted.</source>
          <target state="translated">Cookieの動作方法により、 &lt;code&gt;path&lt;/code&gt; と &lt;code&gt;domain&lt;/code&gt; は &lt;code&gt;set_cookie()&lt;/code&gt; で使用したのと同じ値である必要があります。そうしないと、Cookieが削除されない場合があります。</target>
        </trans-unit>
        <trans-unit id="b5f6b951ad7d1d10822be8a4ca5bfc78b9706a67" translate="yes" xml:space="preserve">
          <source>Due to the way in which key-path queries work, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code&gt;exclude()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; are not guaranteed to produce exhaustive sets. If you want to include objects that do not have the path, add the &lt;code&gt;isnull&lt;/code&gt; lookup.</source>
          <target state="translated">キーパスクエリの動作方法により、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt; &lt;code&gt;exclude()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;が網羅的なセットを生成することは保証されていません。パスを持たないオブジェクトを含める場合は、 &lt;code&gt;isnull&lt;/code&gt; ルックアップを追加します。</target>
        </trans-unit>
        <trans-unit id="4da407a463807c566435d7980512d91958059606" translate="yes" xml:space="preserve">
          <source>Due to the way the &lt;code&gt;gettext&lt;/code&gt; tools work internally and because we want to allow non-ASCII source strings in Django&amp;rsquo;s core and your applications, you &lt;strong&gt;must&lt;/strong&gt; use UTF-8 as the encoding for your PO files (the default when PO files are created). This means that everybody will be using the same encoding, which is important when Django processes the PO files.</source>
          <target state="translated">&lt;code&gt;gettext&lt;/code&gt; ツールが内部で動作する方法と、Djangoのコアおよびアプリケーションで非ASCIIソース文字列を許可する&lt;strong&gt;必要がある&lt;/strong&gt;ため、POファイルのエンコーディングとしてUTF-8を使用する&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます（POファイルが作成されるときのデフォルト）。これは、誰もが同じエンコーディングを使用することを意味します。これは、DjangoがPOファイルを処理するときに重要です。</target>
        </trans-unit>
        <trans-unit id="c946825c30a3d3b910e6a6d60b450b15937b5aa1" translate="yes" xml:space="preserve">
          <source>Dummy backend</source>
          <target state="translated">ダミーバックエンド</target>
        </trans-unit>
        <trans-unit id="5ccde08306833310ac7bc87bd8551bf7af688470" translate="yes" xml:space="preserve">
          <source>Dummy caching (for development)</source>
          <target state="translated">ダミーキャッシング(開発用</target>
        </trans-unit>
        <trans-unit id="32af6bc3a612ca0d7c5f0eefc40cd8fb9a04115c" translate="yes" xml:space="preserve">
          <source>Duplicate file names are by default resolved in a similar way to how template resolution works: the file that is first found in one of the specified locations will be used. If you&amp;rsquo;re confused, the &lt;a href=&quot;#django-admin-findstatic&quot;&gt;&lt;code&gt;findstatic&lt;/code&gt;&lt;/a&gt; command can help show you which files are found.</source>
          <target state="translated">重複するファイル名は、デフォルトではテンプレートの解決と同様の方法で解決されます。指定された場所の1つで最初に見つかったファイルが使用されます。混乱している場合は、&lt;a href=&quot;#django-admin-findstatic&quot;&gt; &lt;code&gt;findstatic&lt;/code&gt; &lt;/a&gt;コマンドを使用すると、見つかったファイルを表示できます。</target>
        </trans-unit>
        <trans-unit id="e1b8c9c169cb26e56fb4f7bb79dbf8ffc27a2a8d" translate="yes" xml:space="preserve">
          <source>During development, if you use &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt;, this will be done automatically by &lt;a href=&quot;../../ref/django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; when &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt; (see &lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.views.serve&quot;&gt;&lt;code&gt;django.contrib.staticfiles.views.serve()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">開発中に&lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; &lt;/a&gt;を使用する場合、これは&lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; に設定されているときに&lt;a href=&quot;../../ref/django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt;によって自動的に行われます（&lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.views.serve&quot;&gt; &lt;code&gt;django.contrib.staticfiles.views.serve()&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="5392b98b896eef841805541091324600b40da6c7" translate="yes" xml:space="preserve">
          <source>During development, you can serve user-uploaded media files from &lt;a href=&quot;../../ref/settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; using the &lt;a href=&quot;../../ref/views#django.views.static.serve&quot;&gt;&lt;code&gt;django.views.static.serve()&lt;/code&gt;&lt;/a&gt; view.</source>
          <target state="translated">開発中は、&lt;a href=&quot;../../ref/views#django.views.static.serve&quot;&gt; &lt;code&gt;django.views.static.serve()&lt;/code&gt; &lt;/a&gt;ビューを使用して、&lt;a href=&quot;../../ref/settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt;からユーザーがアップロードしたメディアファイルを提供できます。</target>
        </trans-unit>
        <trans-unit id="2e59b7fe1682b2315e1b722475fe22d4725a51e7" translate="yes" xml:space="preserve">
          <source>During development, you can turn such warnings into exceptions and get a traceback by adding the following to your settings file:</source>
          <target state="translated">開発中は、設定ファイルに以下を追加することで、このような警告を例外に変えてトレースバックを取得することができます。</target>
        </trans-unit>
        <trans-unit id="bd2d2705a16e3544e088a53bdc1390d8dc8b7ede" translate="yes" xml:space="preserve">
          <source>During file uploads, the actual file data is stored in &lt;a href=&quot;../request-response#django.http.HttpRequest.FILES&quot;&gt;&lt;code&gt;request.FILES&lt;/code&gt;&lt;/a&gt;. Each entry in this dictionary is an &lt;code&gt;UploadedFile&lt;/code&gt; object (or a subclass) &amp;ndash; a wrapper around an uploaded file. You&amp;rsquo;ll usually use one of these methods to access the uploaded content:</source>
          <target state="translated">ファイルのアップロード中、実際のファイルデータは&lt;a href=&quot;../request-response#django.http.HttpRequest.FILES&quot;&gt; &lt;code&gt;request.FILES&lt;/code&gt; に&lt;/a&gt;保存されます。このディクショナリの各エントリは &lt;code&gt;UploadedFile&lt;/code&gt; オブジェクト（またはサブクラス）です&amp;ndash;アップロードされたファイルのラッパー。通常、アップロードしたコンテンツにアクセスするには、次のいずれかの方法を使用します。</target>
        </trans-unit>
        <trans-unit id="da7f2a1d813bf08e462baf7575acbb9f73f6752a" translate="yes" xml:space="preserve">
          <source>During test running, each outgoing email is saved in &lt;code&gt;django.core.mail.outbox&lt;/code&gt;. This is a list of all &lt;a href=&quot;../email#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; instances that have been sent. The &lt;code&gt;outbox&lt;/code&gt; attribute is a special attribute that is created &lt;em&gt;only&lt;/em&gt; when the &lt;code&gt;locmem&lt;/code&gt; email backend is used. It doesn&amp;rsquo;t normally exist as part of the &lt;a href=&quot;../email#module-django.core.mail&quot;&gt;&lt;code&gt;django.core.mail&lt;/code&gt;&lt;/a&gt; module and you can&amp;rsquo;t import it directly. The code below shows how to access this attribute correctly.</source>
          <target state="translated">テスト実行中、各送信メールは &lt;code&gt;django.core.mail.outbox&lt;/code&gt; に保存されます。これは、&lt;a href=&quot;../email#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt;されたすべてのEmailMessageインスタンスのリストです。 &lt;code&gt;outbox&lt;/code&gt; 属性が作成された特殊な属性である&lt;em&gt;のみ&lt;/em&gt;とき &lt;code&gt;locmem&lt;/code&gt; の電子メールのバックエンドが使用されています。通常、&lt;a href=&quot;../email#module-django.core.mail&quot;&gt; &lt;code&gt;django.core.mail&lt;/code&gt; &lt;/a&gt;モジュールの一部としては存在せず、直接インポートすることはできません。以下のコードは、この属性に正しくアクセスする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="bdd123be59c168c6f3bccd21d6435ebbcbdb8509" translate="yes" xml:space="preserve">
          <source>During the request phase, before calling the view, Django applies middleware in the order it&amp;rsquo;s defined in &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;, top-down.</source>
          <target state="translated">リクエストフェーズ中、ビューを呼び出す前に、Djangoはミドルウェアを&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;で定義された順序で上から下に適用します。</target>
        </trans-unit>
        <trans-unit id="27552287462b9c13ae08a4c4e7a6f728c36a7a43" translate="yes" xml:space="preserve">
          <source>Dynamic filtering</source>
          <target state="translated">動的フィルタリング</target>
        </trans-unit>
        <trans-unit id="5780062daeeafdad8a39c791724757a86c83ea05" translate="yes" xml:space="preserve">
          <source>Dynamic initial values</source>
          <target state="translated">動的な初期値</target>
        </trans-unit>
        <trans-unit id="801d2536d6ef9c3052bb5a78e0150cb56dea123b" translate="yes" xml:space="preserve">
          <source>EPSG code (integer or string)</source>
          <target state="translated">EPSGコード(整数または文字列</target>
        </trans-unit>
        <trans-unit id="76ab0ace3be14b1fb28b5ed52435fd50e72a1da0" translate="yes" xml:space="preserve">
          <source>Each &amp;ldquo;reverse&amp;rdquo; operation described in this section has an immediate effect on the database. Every addition, creation and deletion is immediately and automatically saved to the database.</source>
          <target state="translated">このセクションで説明する各「逆」操作は、データベースに即座に影響します。追加、作成、削除はすべて、即座に自動的にデータベースに保存されます。</target>
        </trans-unit>
        <trans-unit id="a5e64be2a7207ba8bef85f4ef6e7ae87d9fb7d60" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; instance provides an additional set of named URLs:</source>
          <target state="translated">各&lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt;インスタンスは、名前付きURLの追加セットを提供します。</target>
        </trans-unit>
        <trans-unit id="9766496e75a79e60962729490d93f126a3160185" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; instance has methods that allow you to get from a &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; instance to the model it represents, or to retrieve objects from that model:</source>
          <target state="translated">各&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt;インスタンスには、&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt;インスタンスからそれが表すモデルに取得したり、そのモデルからオブジェクトを取得したりできるメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="0c5c3367ad793a5788c176654bfbe6e35768e37f" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; contains a cache to minimize database access. Understanding how it works will allow you to write the most efficient code.</source>
          <target state="translated">各&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; に&lt;/a&gt;は、データベースアクセスを最小限に抑えるためのキャッシュが含まれています。それがどのように機能するかを理解することで、最も効率的なコードを書くことができます。</target>
        </trans-unit>
        <trans-unit id="3e79741c463fe87a232c3759d0079b05fc47d7af" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; gets free JavaScript shortcuts. Dates get a &amp;ldquo;Today&amp;rdquo; shortcut and calendar popup, and times get a &amp;ldquo;Now&amp;rdquo; shortcut and a convenient popup that lists commonly entered times.</source>
          <target state="translated">各&lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt;は無料のJavaScriptショートカットを取得します。日付には「今日」のショートカットとカレンダーのポップアップが表示され、時刻には「現在」のショートカットと一般的に入力された時刻を一覧表示する便利なポップアップが表示されます。</target>
        </trans-unit>
        <trans-unit id="8cfe157f3eaacd4d68610b1d7c765a08a2344557" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;.po&lt;/code&gt; file contains a small bit of metadata, such as the translation maintainer&amp;rsquo;s contact information, but the bulk of the file is a list of &lt;strong&gt;messages&lt;/strong&gt; &amp;ndash; mappings between translation strings and the actual translated text for the particular language.</source>
          <target state="translated">各 &lt;code&gt;.po&lt;/code&gt; ファイルには、翻訳メンテナの連絡先情報などのメタデータの小さなビットが含まれていますが、ファイルの大部分は&lt;strong&gt;メッセージの&lt;/strong&gt;リストです-翻訳文字列と特定の言語の実際の翻訳されたテキスト間のマッピング。</target>
        </trans-unit>
        <trans-unit id="688945d75fa2e05589b1677dc42f50edd5252b98" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;Author&lt;/code&gt; in the result set will have the &lt;code&gt;num_books&lt;/code&gt; and &lt;code&gt;highly_rated_books&lt;/code&gt; attributes.</source>
          <target state="translated">各 &lt;code&gt;Author&lt;/code&gt; の結果セット内にはあります &lt;code&gt;num_books&lt;/code&gt; と &lt;code&gt;highly_rated_books&lt;/code&gt; の属性を。</target>
        </trans-unit>
        <trans-unit id="b1b89e4d6e6136b5834754f28761cb32b9b6eae7" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;Field&lt;/code&gt; class constructor takes at least these arguments. Some &lt;code&gt;Field&lt;/code&gt; classes take additional, field-specific arguments, but the following should &lt;em&gt;always&lt;/em&gt; be accepted:</source>
          <target state="translated">各 &lt;code&gt;Field&lt;/code&gt; クラスコンストラクターは、少なくともこれらの引数を受け取ります。一部の &lt;code&gt;Field&lt;/code&gt; クラスは追加のフィールド固有の引数を取りますが、以下は&lt;em&gt;常に&lt;/em&gt;受け入れられる必要があります。</target>
        </trans-unit>
        <trans-unit id="2d00d418aed53bd6ea62d464212bccc3ae807a67" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;kind&lt;/code&gt; above has a corresponding &lt;code&gt;Trunc&lt;/code&gt; subclass (listed below) that should typically be used instead of the more verbose equivalent, e.g. use &lt;code&gt;TruncYear(...)&lt;/code&gt; rather than &lt;code&gt;Trunc(..., kind='year')&lt;/code&gt;.</source>
          <target state="translated">上記の各 &lt;code&gt;kind&lt;/code&gt; には、対応する &lt;code&gt;Trunc&lt;/code&gt; サブクラス（以下にリスト）があり、通常はより冗長な同等のものの代わりに使用する &lt;code&gt;TruncYear(...)&lt;/code&gt; たとえば、 &lt;code&gt;Trunc(..., kind='year')&lt;/code&gt; ではなくTruncYear（...）を使用します。</target>
        </trans-unit>
        <trans-unit id="e3c685b6fd9d85172ad5a1c165c29c7caf685f8b" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;lookup_name&lt;/code&gt; above has a corresponding &lt;code&gt;Extract&lt;/code&gt; subclass (listed below) that should typically be used instead of the more verbose equivalent, e.g. use &lt;code&gt;ExtractYear(...)&lt;/code&gt; rather than &lt;code&gt;Extract(..., lookup_name='year')&lt;/code&gt;.</source>
          <target state="translated">上記の &lt;code&gt;lookup_name&lt;/code&gt; にはそれぞれ、対応する &lt;code&gt;Extract&lt;/code&gt; サブクラス（以下にリスト）があり、通常はより冗長な同等のものの代わりに使用する &lt;code&gt;ExtractYear(...)&lt;/code&gt; たとえば、 &lt;code&gt;Extract(..., lookup_name='year')&lt;/code&gt; ではなくExtractYear（...）を使用します。</target>
        </trans-unit>
        <trans-unit id="ad79a172be1b33a602d540b88bbf8ca154c77ebf" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;order_by()&lt;/code&gt; call will clear any previous ordering. For example, this query will be ordered by &lt;code&gt;pub_date&lt;/code&gt; and not &lt;code&gt;headline&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;order_by()&lt;/code&gt; を呼び出すたびに、以前の順序がクリアされます。たとえば、次のクエリは &lt;code&gt;headline&lt;/code&gt; ではなく &lt;code&gt;pub_date&lt;/code&gt; で並べ替えられます。</target>
        </trans-unit>
        <trans-unit id="e2f4d9f2b9b74db4b6d827c55fdf5161198d932b" translate="yes" xml:space="preserve">
          <source>Each URL in your site has a separate entry in the &lt;code&gt;admindocs&lt;/code&gt; page, and clicking on a given URL will show you the corresponding view. Helpful things you can document in your view function docstrings include:</source>
          <target state="translated">サイトの各URLの &lt;code&gt;admindocs&lt;/code&gt; ページには個別のエントリがあり、特定のURLをクリックすると、対応するビューが表示されます。ビュー関数のdocstringに文書化できる役立つものは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c8a281ad456c737111458e2c94f5436d80b055ba" translate="yes" xml:space="preserve">
          <source>Each application you write in Django consists of a Python package that follows a certain convention. Django comes with a utility that automatically generates the basic directory structure of an app, so you can focus on writing code rather than creating directories.</source>
          <target state="translated">Django で書く各アプリケーションは、特定の規約に従った Python パッケージで構成されています。Django にはアプリの基本的なディレクトリ構造を自動生成するユーティリティが付属しているので、ディレクトリの作成よりもコードの記述に集中することができます。</target>
        </trans-unit>
        <trans-unit id="aa4fd7bf7f5007d16f79d0ae47e2a803fc1e4720" translate="yes" xml:space="preserve">
          <source>Each argument to &lt;code&gt;annotate()&lt;/code&gt; is an annotation that will be added to each object in the &lt;code&gt;QuerySet&lt;/code&gt; that is returned.</source>
          <target state="translated">&lt;code&gt;annotate()&lt;/code&gt; の各引数は、返される &lt;code&gt;QuerySet&lt;/code&gt; の各オブジェクトに追加される注釈です。</target>
        </trans-unit>
        <trans-unit id="85fb851c67a013ae1f0822c2b2bb9a798a089842" translate="yes" xml:space="preserve">
          <source>Each attribute of the model represents a database field.</source>
          <target state="translated">モデルの各属性はデータベース・フィールドを表します。</target>
        </trans-unit>
        <trans-unit id="f57bfa2bd48cf413a7c116a20f197643ad588956" translate="yes" xml:space="preserve">
          <source>Each cache backend can be given additional arguments to control caching behavior. These arguments are provided as additional keys in the &lt;a href=&quot;../ref/settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; setting. Valid arguments are as follows:</source>
          <target state="translated">各キャッシュバックエンドには、キャッシュ動作を制御する追加の引数を指定できます。これらの引数は、&lt;a href=&quot;../ref/settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; &lt;/a&gt;設定の追加キーとして提供されます。有効な引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="620f46e8c01f87612d6d23b7db50f9b485fd19e8" translate="yes" xml:space="preserve">
          <source>Each captured argument is sent to the view as a string, regardless of what sort of match the regular expression makes.</source>
          <target state="translated">キャプチャされた各引数は、正規表現のマッチの種類に関わらず、文字列としてビューに送信されます。</target>
        </trans-unit>
        <trans-unit id="539ffdd55f9eedf7d87d2c22a18246e642f1b360" translate="yes" xml:space="preserve">
          <source>Each database backend in Django supplies its own version of &lt;code&gt;SchemaEditor&lt;/code&gt;, and it&amp;rsquo;s always accessible via the &lt;code&gt;connection.schema_editor()&lt;/code&gt; context manager:</source>
          <target state="translated">Djangoの各データベースバックエンドは、独自のバージョンの &lt;code&gt;SchemaEditor&lt;/code&gt; を提供し、 &lt;code&gt;connection.schema_editor()&lt;/code&gt; コンテキストマネージャを介して常にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="c6cb49419d1db840c199e9fa3db903485963c747" translate="yes" xml:space="preserve">
          <source>Each field in a &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; class is responsible not only for validating data, but also for &amp;ldquo;cleaning&amp;rdquo; it &amp;ndash; normalizing it to a consistent format. This is a nice feature, because it allows data for a particular field to be input in a variety of ways, always resulting in consistent output.</source>
          <target state="translated">&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;クラスの各フィールドは、データの検証だけでなく、データの「クリーンアップ」、つまり一貫性のあるフォーマットへの正規化も行います。これは、特定のフィールドのデータをさまざまな方法で入力でき、常に一貫した出力が得られるため、優れた機能です。</target>
        </trans-unit>
        <trans-unit id="0ac8b93180f13debf16addf1647f7b56fb43e61d" translate="yes" xml:space="preserve">
          <source>Each field in your model should be an instance of the appropriate &lt;a href=&quot;../../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; class. Django uses the field class types to determine a few things:</source>
          <target state="translated">モデルの各フィールドは、適切な&lt;a href=&quot;../../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;クラスのインスタンスである必要があります。Djangoはフィールドクラスタイプを使用していくつかのことを決定します。</target>
        </trans-unit>
        <trans-unit id="97f07afff761bf72cc77ab8683a688a6a291a54c" translate="yes" xml:space="preserve">
          <source>Each field is represented by an instance of a &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; class &amp;ndash; e.g., &lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; for character fields and &lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; for datetimes. This tells Django what type of data each field holds.</source>
          <target state="translated">各フィールドは、&lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;クラスのインスタンス（文字フィールドの場合は&lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt;場合はDateTimeField）によって表されます。これは、各フィールドが保持するデータのタイプをDjangoに伝えます。</target>
        </trans-unit>
        <trans-unit id="c095429de58ab9d3299f78866a6b060ccb94caed" translate="yes" xml:space="preserve">
          <source>Each field of the object is serialized as a &lt;code&gt;&amp;lt;field&amp;gt;&lt;/code&gt;-element sporting the fields &amp;ldquo;type&amp;rdquo; and &amp;ldquo;name&amp;rdquo;. The text content of the element represents the value that should be stored.</source>
          <target state="translated">オブジェクトの各フィールドは、フィールド「type」と「name」を含む &lt;code&gt;&amp;lt;field&amp;gt;&lt;/code&gt; 要素としてシリアル化されます。要素のテキストコンテンツは、保存する必要がある値を表します。</target>
        </trans-unit>
        <trans-unit id="1972c5dd0646867610014d61e83a3b0c8961cba4" translate="yes" xml:space="preserve">
          <source>Each field takes a certain set of field-specific arguments (documented in the &lt;a href=&quot;../../ref/models/fields#model-field-types&quot;&gt;model field reference&lt;/a&gt;). For example, &lt;a href=&quot;../../ref/models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; (and its subclasses) require a &lt;a href=&quot;../../ref/models/fields#django.db.models.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt; argument which specifies the size of the &lt;code&gt;VARCHAR&lt;/code&gt; database field used to store the data.</source>
          <target state="translated">各フィールドは、特定のフィールド固有の引数のセットを取ります（&lt;a href=&quot;../../ref/models/fields#model-field-types&quot;&gt;モデルフィールドリファレンスに&lt;/a&gt;記載されています）。たとえば、&lt;a href=&quot;../../ref/models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;（およびそのサブクラス）には、データの格納に使用される &lt;code&gt;VARCHAR&lt;/code&gt; データベースフィールドのサイズを指定する&lt;a href=&quot;../../ref/models/fields#django.db.models.CharField.max_length&quot;&gt; &lt;code&gt;max_length&lt;/code&gt; &lt;/a&gt;引数が必要です。</target>
        </trans-unit>
        <trans-unit id="9532a137a269081af6e434cd3517e36da3b9ee2d" translate="yes" xml:space="preserve">
          <source>Each field type has a default HTML representation. &lt;code&gt;CharField&lt;/code&gt; is represented by an &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;EmailField&lt;/code&gt; by an &lt;code&gt;&amp;lt;input type=&quot;email&quot;&amp;gt;&lt;/code&gt;. &lt;code&gt;BooleanField(null=False)&lt;/code&gt; is represented by an &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt;. Note these are merely sensible defaults; you can specify which HTML to use for a given field by using widgets, which we&amp;rsquo;ll explain shortly.</source>
          <target state="translated">各フィールドタイプには、デフォルトのHTML表現があります。 &lt;code&gt;CharField&lt;/code&gt; は &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; &lt;code&gt;EmailField&lt;/code&gt; = &quot;text&quot;&amp;gt;で表され、EmailFieldは &lt;code&gt;&amp;lt;input type=&quot;email&quot;&amp;gt;&lt;/code&gt; で表されます。 &lt;code&gt;BooleanField(null=False)&lt;/code&gt; は、 &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt; で表されます。これらは単に賢明なデフォルトであることに注意してください。ウィジェットを使用して、特定のフィールドに使用するHTMLを指定できます。これについては後で説明します。</target>
        </trans-unit>
        <trans-unit id="c137305d95c771e8e629f2933ba68157919aa2c8" translate="yes" xml:space="preserve">
          <source>Each field type has a default HTML representation. &lt;code&gt;CharField&lt;/code&gt; is represented by an &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;EmailField&lt;/code&gt; by an &lt;code&gt;&amp;lt;input type=&quot;email&quot;&amp;gt;&lt;/code&gt;. &lt;code&gt;BooleanField&lt;/code&gt; is represented by an &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt;. Note these are merely sensible defaults; you can specify which HTML to use for a given field by using widgets, which we&amp;rsquo;ll explain shortly.</source>
          <target state="translated">各フィールドタイプには、デフォルトのHTML表現があります。 &lt;code&gt;CharField&lt;/code&gt; は &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; で &lt;code&gt;EmailField&lt;/code&gt; れ、EmailFieldは &lt;code&gt;&amp;lt;input type=&quot;email&quot;&amp;gt;&lt;/code&gt; で表されます。 &lt;code&gt;BooleanField&lt;/code&gt; は &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt; で表されます。これらは適切なデフォルトにすぎないことに注意してください。ウィジェットを使用して、特定のフィールドに使用するHTMLを指定できます。これについては後で説明します。</target>
        </trans-unit>
        <trans-unit id="e14f18351eaa233804a5daef45c4b94975f5efbf" translate="yes" xml:space="preserve">
          <source>Each field type, except for &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt;, takes an optional first positional argument &amp;ndash; a verbose name. If the verbose name isn&amp;rsquo;t given, Django will automatically create it using the field&amp;rsquo;s attribute name, converting underscores to spaces.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt;を除く各フィールドタイプは、オプションの最初の位置引数（詳細名）を取ります。詳細名が指定されていない場合、Djangoはフィールドの属性名を使用して自動的に作成し、アンダースコアをスペースに変換します。</target>
        </trans-unit>
        <trans-unit id="859598c7310b1f5089ed2f6873b65f573d112539" translate="yes" xml:space="preserve">
          <source>Each form field has a corresponding &lt;a href=&quot;../../ref/forms/widgets&quot;&gt;Widget class&lt;/a&gt;, which in turn corresponds to an HTML form widget such as &lt;code&gt;&amp;lt;input
type=&quot;text&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">各フォームフィールドには対応する&lt;a href=&quot;../../ref/forms/widgets&quot;&gt;Widgetクラスがあり&lt;/a&gt;、これは &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; などのHTMLフォームウィジェットに対応しています。</target>
        </trans-unit>
        <trans-unit id="b0612a3e32277f65135ad8c4897584ec5ca41024" translate="yes" xml:space="preserve">
          <source>Each formset&amp;rsquo;s &lt;a href=&quot;#formset-prefix&quot;&gt;prefix&lt;/a&gt; replaces the default &lt;code&gt;form&lt;/code&gt; prefix that&amp;rsquo;s added to each field&amp;rsquo;s &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; HTML attributes.</source>
          <target state="translated">各 &lt;code&gt;form&lt;/code&gt; セットの&lt;a href=&quot;#formset-prefix&quot;&gt;プレフィックス&lt;/a&gt;は、各フィールドの &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;id&lt;/code&gt; HTML属性に追加されるデフォルトのフォームプレフィックスを置き換えます。</target>
        </trans-unit>
        <trans-unit id="fff5391512c038f2b4e64d54c07e48105bfce7c4" translate="yes" xml:space="preserve">
          <source>Each generic view needs to know what model it will be acting upon. This is provided using the &lt;code&gt;model&lt;/code&gt; attribute.</source>
          <target state="translated">各ジェネリックビューは、どのモデルに作用するかを知る必要があります。これは、 &lt;code&gt;model&lt;/code&gt; 属性を使用して提供されます。</target>
        </trans-unit>
        <trans-unit id="1131db22fb2a7190b5ce4af70c7cfe02840ab48d" translate="yes" xml:space="preserve">
          <source>Each header is only added if it isn&amp;rsquo;t already set.</source>
          <target state="translated">各ヘッダーは、まだ設定されていない場合にのみ追加されます。</target>
        </trans-unit>
        <trans-unit id="38d5627e4e0ba8d9b21de91076af41f922be934d" translate="yes" xml:space="preserve">
          <source>Each instance of &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; has two fields which, taken together, uniquely describe an installed model:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; の&lt;/a&gt;各インスタンスには2つのフィールドがあり、これらを合わせて、インストールされたモデルを一意に記述します。</target>
        </trans-unit>
        <trans-unit id="2e96f75a376fb76c4502355beb0c1ad3d49d0b65" translate="yes" xml:space="preserve">
          <source>Each item in the list should be a tuple of (Full name, email address). Example:</source>
          <target state="translated">リストの各項目は、(フルネーム、メールアドレス)のタプルでなければなりません。例</target>
        </trans-unit>
        <trans-unit id="6dd106fb7a577fb1382f2aa83a3ef60687cff619" translate="yes" xml:space="preserve">
          <source>Each key in the &lt;code&gt;world_mapping&lt;/code&gt; dictionary corresponds to a field in the &lt;code&gt;WorldBorder&lt;/code&gt; model. The value is the name of the shapefile field that data will be loaded from.</source>
          <target state="translated">&lt;code&gt;world_mapping&lt;/code&gt; 辞書の各キーは、 &lt;code&gt;WorldBorder&lt;/code&gt; モデルのフィールドに対応しています。値は、データのロード元となるシェープファイルフィールドの名前です。</target>
        </trans-unit>
        <trans-unit id="d36d465283db1a2bb444e69b1af68bb008deada9" translate="yes" xml:space="preserve">
          <source>Each lookup function that takes keyword-arguments (e.g. &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code&gt;exclude()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;) can also be passed one or more &lt;code&gt;Q&lt;/code&gt; objects as positional (not-named) arguments. If you provide multiple &lt;code&gt;Q&lt;/code&gt; object arguments to a lookup function, the arguments will be &amp;ldquo;AND&amp;rdquo;ed together. For example:</source>
          <target state="translated">キーワード引数（&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt; &lt;code&gt;exclude()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; など&lt;/a&gt;）を取る各検索関数には、位置指定（名前なし）引数として1つ以上の &lt;code&gt;Q&lt;/code&gt; オブジェクトを渡すこともできます。ルックアップ関数に複数の &lt;code&gt;Q&lt;/code&gt; オブジェクト引数を指定すると、引数は「AND」されます。例えば：</target>
        </trans-unit>
        <trans-unit id="fa8404429a25ac913e8d1c1a59d0ca04f9086cfa" translate="yes" xml:space="preserve">
          <source>Each message that is written to the logger is a &lt;em&gt;Log Record&lt;/em&gt;. Each log record also has a &lt;em&gt;log level&lt;/em&gt; indicating the severity of that specific message. A log record can also contain useful metadata that describes the event that is being logged. This can include details such as a stack trace or an error code.</source>
          <target state="translated">ロガーに書き込まれる各メッセージは、&lt;em&gt;ログレコード&lt;/em&gt;です。各ログレコードには、その特定のメッセージの重大度を示す&lt;em&gt;ログレベル&lt;/em&gt;もあります。ログレコードには、ログに記録されているイベントを説明する有用なメタデータを含めることもできます。これには、スタックトレースやエラーコードなどの詳細を含めることができます。</target>
        </trans-unit>
        <trans-unit id="41accbc06c8ee59bb922ed8ceb6e0b56fe9da1ac" translate="yes" xml:space="preserve">
          <source>Each middleware component is responsible for doing some specific function. For example, Django includes a middleware component, &lt;a href=&quot;../../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt;&lt;code&gt;AuthenticationMiddleware&lt;/code&gt;&lt;/a&gt;, that associates users with requests using sessions.</source>
          <target state="translated">各ミドルウェアコンポーネントは、特定の機能を実行します。たとえば、Djangoには、セッションを使用してユーザーをリクエストに関連付けるミドルウェアコンポーネント&lt;a href=&quot;../../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt; &lt;code&gt;AuthenticationMiddleware&lt;/code&gt; が&lt;/a&gt;含まれています。</target>
        </trans-unit>
        <trans-unit id="1829ba4bd042fd766754294e83af9afe6753b6ff" translate="yes" xml:space="preserve">
          <source>Each model field has a corresponding default form field. For example, a &lt;code&gt;CharField&lt;/code&gt; on a model is represented as a &lt;code&gt;CharField&lt;/code&gt; on a form. A model &lt;code&gt;ManyToManyField&lt;/code&gt; is represented as a &lt;code&gt;MultipleChoiceField&lt;/code&gt;. Here is the full list of conversions:</source>
          <target state="translated">各モデルフィールドには、対応するデフォルトのフォームフィールドがあります。例えば、 &lt;code&gt;CharField&lt;/code&gt; ですモデルには、以下のように表される &lt;code&gt;CharField&lt;/code&gt; ですフォームに。モデル &lt;code&gt;ManyToManyField&lt;/code&gt; は、 &lt;code&gt;MultipleChoiceField&lt;/code&gt; として表されます。変換の完全なリストは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="91b5ae9254e2ac5afa0c4eaff5d5f2d60936c9ed" translate="yes" xml:space="preserve">
          <source>Each model is a Python class that subclasses &lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt;&lt;code&gt;django.db.models.Model&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">各モデルは&lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt; &lt;code&gt;django.db.models.Model&lt;/code&gt; &lt;/a&gt;をサブクラス化するPythonクラスです。</target>
        </trans-unit>
        <trans-unit id="03a511e1bc7ba6f7d581f711a0805128b922cdc6" translate="yes" xml:space="preserve">
          <source>Each model is a dict with the following keys:</source>
          <target state="translated">各モデルは、以下のキーを持つディクトです。</target>
        </trans-unit>
        <trans-unit id="ef0f53c1fe432c399d62918a936d1408900beccd" translate="yes" xml:space="preserve">
          <source>Each model requires exactly one field to have &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;primary_key=True&lt;/code&gt;&lt;/a&gt; (either explicitly declared or automatically added).</source>
          <target state="translated">各モデルでは、&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;primary_key=True&lt;/code&gt; &lt;/a&gt;（明示的に宣言されるか、自動的に追加される）を持つために、フィールドが1つだけ必要です。</target>
        </trans-unit>
        <trans-unit id="3b5e96572b7a649638e0790b74b3d829e4140c62" translate="yes" xml:space="preserve">
          <source>Each model&amp;rsquo;s &lt;code&gt;save()&lt;/code&gt; method isn&amp;rsquo;t called, and the &lt;a href=&quot;../signals#django.db.models.signals.pre_save&quot;&gt;&lt;code&gt;pre_save&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../signals#django.db.models.signals.post_save&quot;&gt;&lt;code&gt;post_save&lt;/code&gt;&lt;/a&gt; signals aren&amp;rsquo;t sent.</source>
          <target state="translated">各モデルの &lt;code&gt;save()&lt;/code&gt; メソッドは呼び出されず、&lt;a href=&quot;../signals#django.db.models.signals.pre_save&quot;&gt; &lt;code&gt;pre_save&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../signals#django.db.models.signals.post_save&quot;&gt; &lt;code&gt;post_save&lt;/code&gt; &lt;/a&gt;信号は送信されません。</target>
        </trans-unit>
        <trans-unit id="a86ca17597a0c77ac19ec2049f0d08f2cf163a3b" translate="yes" xml:space="preserve">
          <source>Each non-abstract &lt;a href=&quot;instances#django.db.models.Model&quot;&gt;&lt;code&gt;Model&lt;/code&gt;&lt;/a&gt; class must have a &lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; instance added to it. Django ensures that in your model class you have at least a default &lt;code&gt;Manager&lt;/code&gt; specified. If you don&amp;rsquo;t add your own &lt;code&gt;Manager&lt;/code&gt;, Django will add an attribute &lt;code&gt;objects&lt;/code&gt; containing default &lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; instance. If you add your own &lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; instance attribute, the default one does not appear. Consider the following example:</source>
          <target state="translated">各非抽象&lt;a href=&quot;instances#django.db.models.Model&quot;&gt; &lt;code&gt;Model&lt;/code&gt; &lt;/a&gt;クラスには、&lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;インスタンスが追加されている必要があります。Djangoは、モデルクラスで少なくともデフォルトの &lt;code&gt;Manager&lt;/code&gt; 指定されていることを保証します。独自の &lt;code&gt;Manager&lt;/code&gt; を追加しない場合、Djangoはデフォルトの&lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;インスタンスを含む属性 &lt;code&gt;objects&lt;/code&gt; を追加します。独自の&lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;インスタンス属性を追加した場合、デフォルトの属性は表示されません。次の例を検討してください。</target>
        </trans-unit>
        <trans-unit id="4c965682013aa01088fe8e446892e0f9d0d780ad" translate="yes" xml:space="preserve">
          <source>Each of these colors can then be modified by using the following display options:</source>
          <target state="translated">次に、これらの各色は、以下の表示オプションを使用して変更することができます。</target>
        </trans-unit>
        <trans-unit id="c032813e1c75b7e9b318fb7720ad63166a3f87ec" translate="yes" xml:space="preserve">
          <source>Each of these functions takes a &lt;code&gt;using&lt;/code&gt; argument which should be the name of a database for which the behavior applies. If no &lt;code&gt;using&lt;/code&gt; argument is provided then the &lt;code&gt;&quot;default&quot;&lt;/code&gt; database is used.</source>
          <target state="translated">これらの各関数は、動作が適用されるデータベースの名前である &lt;code&gt;using&lt;/code&gt; 引数を取ります。 &lt;code&gt;using&lt;/code&gt; 引数が指定されていない場合、 &lt;code&gt;&quot;default&quot;&lt;/code&gt; データベースが使用されます。</target>
        </trans-unit>
        <trans-unit id="e71525bfc762897383bda646cbf09e5d8a136b30" translate="yes" xml:space="preserve">
          <source>Each of these roles can be assigned a specific foreground and background color, from the following list:</source>
          <target state="translated">これらのロールのそれぞれには、以下のリストの中から、特定の前景色と背景色を割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="7287771fc549f9e43d41c8c05aa164f2529da8e2" translate="yes" xml:space="preserve">
          <source>Each of these three classes knows how to render a certain type of feed as XML. They share this interface:</source>
          <target state="translated">これらの3つのクラスはそれぞれ、ある種のフィードをXMLとしてレンダリングする方法を知っています。これらのクラスはこのインターフェイスを共有しています。</target>
        </trans-unit>
        <trans-unit id="aa51370ee76a04abf238ec0dc182012982f950ef" translate="yes" xml:space="preserve">
          <source>Each of those dictionaries represents an object, with the keys corresponding to the attribute names of model objects.</source>
          <target state="translated">これらの辞書はそれぞれオブジェクトを表し、キーはモデル・オブジェクトの属性名に対応しています。</target>
        </trans-unit>
        <trans-unit id="9eacdbeaab596f61277ce2954ed4688d28a31011" translate="yes" xml:space="preserve">
          <source>Each of your views should use only mixins or views from one of the groups of generic class-based views: &lt;a href=&quot;generic-display&quot;&gt;detail, list&lt;/a&gt;, &lt;a href=&quot;generic-editing&quot;&gt;editing&lt;/a&gt; and date. For example it&amp;rsquo;s fine to combine &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt; (built in view) with &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt;&lt;code&gt;MultipleObjectMixin&lt;/code&gt;&lt;/a&gt; (generic list), but you&amp;rsquo;re likely to have problems combining &lt;code&gt;SingleObjectMixin&lt;/code&gt; (generic detail) with &lt;code&gt;MultipleObjectMixin&lt;/code&gt; (generic list).</source>
          <target state="translated">各ビューは&lt;a href=&quot;generic-display&quot;&gt;、詳細、リスト&lt;/a&gt;、&lt;a href=&quot;generic-editing&quot;&gt;編集&lt;/a&gt;、日付など、汎用クラスベースビューのグループの1つからのミックスインまたはビューのみを使用する必要があります。たとえば、&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt;（組み込みビュー）を&lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt; &lt;code&gt;MultipleObjectMixin&lt;/code&gt; &lt;/a&gt;（ジェネリックリスト）と組み合わせても問題ありませんが、 &lt;code&gt;SingleObjectMixin&lt;/code&gt; （ジェネリック詳細）と &lt;code&gt;MultipleObjectMixin&lt;/code&gt; （ジェネリックリスト）を組み合わせることで問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="462fab6e00d3569f39330e8a0a80fb06db2fc38a" translate="yes" xml:space="preserve">
          <source>Each of your views should use only mixins or views from one of the groups of generic class-based views: &lt;a href=&quot;generic-display&quot;&gt;detail, list&lt;/a&gt;, &lt;a href=&quot;generic-editing&quot;&gt;editing&lt;/a&gt; and date. For example it&amp;rsquo;s fine to combine &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt; (built in view) with &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt;&lt;code&gt;MultipleObjectMixin&lt;/code&gt;&lt;/a&gt; (generic list), but you&amp;rsquo;re likely to have problems combining &lt;code&gt;SingleObjectMixin&lt;/code&gt; (generic detail) with &lt;code&gt;MultipleObjectMixin&lt;/code&gt; (generic list).</source>
          <target state="translated">各ビューは、一般的なクラスベースのビューのグループ（&lt;a href=&quot;generic-display&quot;&gt;詳細、リスト&lt;/a&gt;、&lt;a href=&quot;generic-editing&quot;&gt;編集&lt;/a&gt;、日付）のいずれかからのミックスインまたはビューのみを使用する必要があります。たとえば、&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt;（組み込みビュー）と&lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt; &lt;code&gt;MultipleObjectMixin&lt;/code&gt; &lt;/a&gt;（汎用リスト）を組み合わせるのは問題ありませんが、 &lt;code&gt;SingleObjectMixin&lt;/code&gt; （汎用詳細）と &lt;code&gt;MultipleObjectMixin&lt;/code&gt; （汎用リスト）を組み合わせると問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="db4988c586ad32ef3c472055aeb47e9bdb3ce09e" translate="yes" xml:space="preserve">
          <source>Each password validator must provide a help text to explain the requirements to the user, validate a given password and return an error message if it does not meet the requirements, and optionally receive passwords that have been set. Validators can also have optional settings to fine tune their behavior.</source>
          <target state="translated">各パスワードバリデータは、ユーザーに要件を説明するためのヘルプテキストを提供し、 与えられたパスワードを検証して要件を満たさない場合はエラーメッセージを返し、 オプションで設定されたパスワードを受信しなければなりません。また、バリデータの動作を微調整するためにオプションの設定を持つこともできます。</target>
        </trans-unit>
        <trans-unit id="0a0d953c395cf521ce411dd374006420611373ad" translate="yes" xml:space="preserve">
          <source>Each process gets its own database. You must ensure that different test cases don&amp;rsquo;t access the same resources. For instance, test cases that touch the filesystem should create a temporary directory for their own use.</source>
          <target state="translated">各プロセスは独自のデータベースを取得します。異なるテストケースが同じリソースにアクセスしないようにする必要があります。たとえば、ファイルシステムを操作するテストケースは、自分で使用するための一時ディレクトリを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="6a5f004865d9534800031cee803c75541f12dd1a" translate="yes" xml:space="preserve">
          <source>Each processor is applied in order. That means, if one processor adds a variable to the context and a second processor adds a variable with the same name, the second will override the first. The default processors are explained below.</source>
          <target state="translated">各プロセッサは順番に適用されます。つまり、あるプロセッサがコンテキストに変数を追加し、2 番目のプロセッサが同じ名前の変数を追加した場合、2 番目のプロセッサが 1 番目のプロセッサを上書きします。デフォルトのプロセッサについて以下に説明します。</target>
        </trans-unit>
        <trans-unit id="7b74e5b7277908149647c4e254a2c9dd8743981d" translate="yes" xml:space="preserve">
          <source>Each regular expression in a &lt;code&gt;urlpatterns&lt;/code&gt; is compiled the first time it&amp;rsquo;s accessed. This makes the system blazingly fast.</source>
          <target state="translated">&lt;code&gt;urlpatterns&lt;/code&gt; の各正規表現は、最初にアクセスされたときにコンパイルされます。これにより、システムは非常に高速になります。</target>
        </trans-unit>
        <trans-unit id="5b20a40de7eb1c60cfbf06733545a162ebbcd9a6" translate="yes" xml:space="preserve">
          <source>Each request served by a class-based view has an independent state; therefore, it is safe to store state variables on the instance (i.e., &lt;code&gt;self.foo = 3&lt;/code&gt; is a thread-safe operation).</source>
          <target state="translated">クラスベースのビューによって処理される各要求には、独立した状態があります。したがって、インスタンスに状態変数を格納しても安全です（つまり、 &lt;code&gt;self.foo = 3&lt;/code&gt; はスレッドセーフな操作です）。</target>
        </trans-unit>
        <trans-unit id="b98e5ef49465e6036280ceba699e82a100cb1a12" translate="yes" xml:space="preserve">
          <source>Each separate element of &lt;code&gt;datatuple&lt;/code&gt; results in a separate email message. As in &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt;, recipients in the same &lt;code&gt;recipient_list&lt;/code&gt; will all see the other addresses in the email messages&amp;rsquo; &amp;ldquo;To:&amp;rdquo; field.</source>
          <target state="translated">&lt;code&gt;datatuple&lt;/code&gt; 各要素は、個別の電子メールメッセージになります。以下のように&lt;a href=&quot;#django.core.mail.send_mail&quot;&gt; &lt;code&gt;send_mail()&lt;/code&gt; &lt;/a&gt;、同じ内の受信者 &lt;code&gt;recipient_list&lt;/code&gt; はフィールド：すべての電子メールメッセージ『へ』で他のアドレスが表示されます。</target>
        </trans-unit>
        <trans-unit id="a6fbfb728501832e282561cf179231e692040728" translate="yes" xml:space="preserve">
          <source>Each text label is surrounded in an HTML &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tag, which points to the appropriate form field via its &lt;code&gt;id&lt;/code&gt;. Its &lt;code&gt;id&lt;/code&gt;, in turn, is generated by prepending &lt;code&gt;'id_'&lt;/code&gt; to the field name. The &lt;code&gt;id&lt;/code&gt; attributes and &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags are included in the output by default, to follow best practices, but you can change that behavior.</source>
          <target state="translated">各テキストラベルは、HTMLの &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; タグで囲まれています。このタグは、 &lt;code&gt;id&lt;/code&gt; を介して適切なフォームフィールドを指します。その &lt;code&gt;id&lt;/code&gt; は、フィールド名の前に &lt;code&gt;'id_'&lt;/code&gt; を付加することで生成されます。 &lt;code&gt;id&lt;/code&gt; 属性と &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; タグは、ベストプラクティスに従うことが、デフォルトでは出力に含まれていますが、その動作を変更することができます。</target>
        </trans-unit>
        <trans-unit id="03cf68270e68ac2d25d52ff5b90148366ce83c6d" translate="yes" xml:space="preserve">
          <source>Each time any Django application raises a 404 error, this middleware checks the flatpages database for the requested URL as a last resort. Specifically, it checks for a flatpage with the given URL with a site ID that corresponds to the &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">Djangoアプリケーションで404エラーが発生するたびに、このミドルウェアは、最後の手段として、要求されたURLのフラットページデータベースをチェックします。具体的には、&lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt; &lt;code&gt;SITE_ID&lt;/code&gt; &lt;/a&gt;設定に対応するサイトIDを使用して、指定されたURLのフラットページをチェックします。</target>
        </trans-unit>
        <trans-unit id="c443e45c5333145cdfad53ce7ea35e2193a52752" translate="yes" xml:space="preserve">
          <source>Each time you refine a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;, you get a brand-new &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; that is in no way bound to the previous &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;. Each refinement creates a separate and distinct &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; that can be stored, used and reused.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;を調整するたびに、以前の&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; に&lt;/a&gt;バインドされていないまったく新しい&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;を取得します。それぞれの改良により、保存、使用、再利用できる個別の個別の&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;が作成されます。</target>
        </trans-unit>
        <trans-unit id="c1b9ec330548b55821336d0e0a09dc8b23578112" translate="yes" xml:space="preserve">
          <source>Each view is responsible for doing one of two things: Returning an &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object containing the content for the requested page, or raising an exception such as &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt;. The rest is up to you.</source>
          <target state="translated">各ビューは、要求されたページのコンテンツを含む&lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;オブジェクトを返すこと、または&lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; &lt;/a&gt;などの例外を発生させることのいずれかを実行します。後は君しだい。</target>
        </trans-unit>
        <trans-unit id="3733c1d6c9f30952606a37e9580bed51ce98a268" translate="yes" xml:space="preserve">
          <source>Each view is responsible for doing one of two things: returning an &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object containing the content for the requested page, or raising an exception such as &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt;. The rest is up to you.</source>
          <target state="translated">各ビューは、要求されたページのコンテンツを含む&lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;オブジェクトを返すこと、または&lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; &lt;/a&gt;などの例外を発生させることのいずれかを実行します。後は君しだい。</target>
        </trans-unit>
        <trans-unit id="19339908359150f3c88841413b986756ead6f3f2" translate="yes" xml:space="preserve">
          <source>Each widget has a &lt;code&gt;template_name&lt;/code&gt; attribute with a value such as &lt;code&gt;input.html&lt;/code&gt;. Built-in widget templates are stored in the &lt;code&gt;django/forms/widgets&lt;/code&gt; path. You can provide a custom template for &lt;code&gt;input.html&lt;/code&gt; by defining &lt;code&gt;django/forms/widgets/input.html&lt;/code&gt;, for example. See &lt;a href=&quot;widgets#built-in-widgets&quot;&gt;Built-in widgets&lt;/a&gt; for the name of each widget&amp;rsquo;s template.</source>
          <target state="translated">各ウィジェットには、 &lt;code&gt;input.html&lt;/code&gt; などの値を持つ &lt;code&gt;template_name&lt;/code&gt; 属性があります。組み込みウィジェットテンプレートは、 &lt;code&gt;django/forms/widgets&lt;/code&gt; パスに保存されます。たとえば、 &lt;code&gt;django/forms/widgets/input.html&lt;/code&gt; を定義することで、 &lt;code&gt;input.html&lt;/code&gt; のカスタムテンプレートを提供できます。各ウィジェットのテンプレートの名前については、&lt;a href=&quot;widgets#built-in-widgets&quot;&gt;組み込みウィジェット&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7d137bed7bd0b56e4bb03ffef2d3a3de46a3105e" translate="yes" xml:space="preserve">
          <source>Earlier, we installed the polls app as a user library. This has some disadvantages:</source>
          <target state="translated">先に、ユーザーライブラリとしてpollsアプリをインストールしました。これにはいくつかのデメリットがあります。</target>
        </trans-unit>
        <trans-unit id="c4387183f8ade46ecb53c704c50d0df3fb94f91e" translate="yes" xml:space="preserve">
          <source>Earlier, you used &lt;code&gt;ogrinfo&lt;/code&gt; to examine the contents of the world borders shapefile. GeoDjango also includes a Pythonic interface to GDAL&amp;rsquo;s powerful OGR library that can work with all the vector data sources that OGR supports.</source>
          <target state="translated">以前は、 &lt;code&gt;ogrinfo&lt;/code&gt; を使用して、world bordersシェープファイルの内容を調べていました。GeoDjangoには、GDRの強力なOGRライブラリへのPythonicインターフェースも含まれており、OGRがサポートするすべてのベクターデータソースを操作できます。</target>
        </trans-unit>
        <trans-unit id="bc9c6519bdc3961580bd7cb191e4981472f2333a" translate="yes" xml:space="preserve">
          <source>Early on it was recognized that there were common idioms and patterns found in view development. Function-based generic views were introduced to abstract these patterns and ease view development for the common cases.</source>
          <target state="translated">初期の段階では、ビュー開発には共通のイディオムやパターンがあることが認識されていました。これらのパターンを抽象化し、一般的なケースのためのビュー開発を容易にするために、関数ベースの汎用ビューが導入されました。</target>
        </trans-unit>
        <trans-unit id="8440b9eb7d03917b2509b5baeab2a299ce257eb0" translate="yes" xml:space="preserve">
          <source>Edge</source>
          <target state="translated">Edge</target>
        </trans-unit>
        <trans-unit id="c6733d2b92d7770bb88a12c0c1edfd4c3f203cc3" translate="yes" xml:space="preserve">
          <source>Edge cases</source>
          <target state="translated">エッジケース</target>
        </trans-unit>
        <trans-unit id="fcacfe8059c533d705b517a6c55a078d9064cb53" translate="yes" xml:space="preserve">
          <source>Edit the &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting and make sure it contains &lt;code&gt;'django.contrib.sessions.middleware.SessionMiddleware'&lt;/code&gt;. The default &lt;code&gt;settings.py&lt;/code&gt; created by &lt;code&gt;django-admin startproject&lt;/code&gt; has &lt;code&gt;SessionMiddleware&lt;/code&gt; activated.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;設定を編集し、 &lt;code&gt;'django.contrib.sessions.middleware.SessionMiddleware'&lt;/code&gt; が含まれていることを確認します。 &lt;code&gt;django-admin startproject&lt;/code&gt; によって作成されたデフォルトの &lt;code&gt;settings.py&lt;/code&gt; では、 &lt;code&gt;SessionMiddleware&lt;/code&gt; がアクティブになっています。</target>
        </trans-unit>
        <trans-unit id="120d7e35a9158c943b2c8a0baffc1d9a5d047061" translate="yes" xml:space="preserve">
          <source>Edit the first migration file. The generated migration class should look similar to this:</source>
          <target state="translated">最初のマイグレーションファイルを編集します。生成されたマイグレーションクラスは以下のようになるはずです。</target>
        </trans-unit>
        <trans-unit id="adc1fc0762121272aead6562a1016cdc3fdc52b5" translate="yes" xml:space="preserve">
          <source>Edit your &lt;code&gt;polls/admin.py&lt;/code&gt; file again and add an improvement to the &lt;code&gt;Question&lt;/code&gt; change list page: filters using the &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_filter&quot;&gt;&lt;code&gt;list_filter&lt;/code&gt;&lt;/a&gt;. Add the following line to &lt;code&gt;QuestionAdmin&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;polls/admin.py&lt;/code&gt; ファイルをもう一度編集し、 &lt;code&gt;Question&lt;/code&gt; 変更リストページに改善を追加します&lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_filter&quot;&gt; &lt;code&gt;list_filter&lt;/code&gt; &lt;/a&gt;を使用してフィルターします。 &lt;code&gt;QuestionAdmin&lt;/code&gt; に次の行を追加します。</target>
        </trans-unit>
        <trans-unit id="4a904e746236c62c2090168a9b6b3c53dcc0cb34" translate="yes" xml:space="preserve">
          <source>Editing geometry fields from the admin.</source>
          <target state="translated">管理画面からジオメトリフィールドを編集する</target>
        </trans-unit>
        <trans-unit id="e2395732ea8675a07a0aa660461d0546a2f98443" translate="yes" xml:space="preserve">
          <source>Editing mixins</source>
          <target state="translated">ミックスインの編集</target>
        </trans-unit>
        <trans-unit id="de2e6231f78baa73c76471d5ec0cddc3ae1c0109" translate="yes" xml:space="preserve">
          <source>Editing views</source>
          <target state="translated">ビューの編集</target>
        </trans-unit>
        <trans-unit id="ed63036d8730b34c2af3aa53fe984d9883388a1c" translate="yes" xml:space="preserve">
          <source>Editors</source>
          <target state="translated">Editors</target>
        </trans-unit>
        <trans-unit id="bfdc74a5613fa59c62fbb63e18eb1bda60d76e6c" translate="yes" xml:space="preserve">
          <source>Eight bit unsigned integer</source>
          <target state="translated">8ビット符号なし整数</target>
        </trans-unit>
        <trans-unit id="13d59d44768c2d751d816c2d44e71d1bd083378e" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;configure()&lt;/code&gt; or &lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-4&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; is required</source>
          <target state="translated">&lt;code&gt;configure()&lt;/code&gt; または&lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-4&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; の&lt;/a&gt;いずれかが必要です</target>
        </trans-unit>
        <trans-unit id="388808032cce004f2fd096dd884a17cdb879a076" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;configure()&lt;/code&gt; or &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; is required</source>
          <target state="translated">&lt;code&gt;configure()&lt;/code&gt; または &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; のいずれかが必要です</target>
        </trans-unit>
        <trans-unit id="419dc9dd1c54d38f5ec5aa2e1b27fb8737ff28a9" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;w&lt;/code&gt; for words, &lt;code&gt;p&lt;/code&gt; for HTML paragraphs or &lt;code&gt;b&lt;/code&gt; for plain-text paragraph blocks (default is &lt;code&gt;b&lt;/code&gt;).</source>
          <target state="translated">どちらか &lt;code&gt;w&lt;/code&gt; は言葉に、 &lt;code&gt;p&lt;/code&gt; HTML段落やのための &lt;code&gt;b&lt;/code&gt; プレーンテキストの段落ブロックの（デフォルトは &lt;code&gt;b&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="86e1fa8aad8b423259cacdb4666cdb514e247297" translate="yes" xml:space="preserve">
          <source>Either an &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt; of 2-tuples to use as choices for this field, &lt;a href=&quot;../models/fields#field-choices-enum-types&quot;&gt;enumeration&lt;/a&gt; choices, or a callable that returns such an iterable. This argument accepts the same formats as the &lt;code&gt;choices&lt;/code&gt; argument to a model field. See the &lt;a href=&quot;../models/fields#field-choices&quot;&gt;model field reference documentation on choices&lt;/a&gt; for more details. If the argument is a callable, it is evaluated each time the field&amp;rsquo;s form is initialized, in addition to during rendering. Defaults to an empty list.</source>
          <target state="translated">いずれかの&lt;a href=&quot;https://docs.python.org/3/glossary.html#term-iterable&quot;&gt;反復可能&lt;/a&gt;このフィールドの選択肢として使用する2組の&lt;a href=&quot;../models/fields#field-choices-enum-types&quot;&gt;列挙&lt;/a&gt;選択肢、又は戻るような反復可能なその呼び出し可能。この引数は、モデルフィールドの &lt;code&gt;choices&lt;/code&gt; 引数と同じ形式を受け入れます。詳細については、&lt;a href=&quot;../models/fields#field-choices&quot;&gt;選択に関するモデルフィールドリファレンスドキュメントを参照&lt;/a&gt;してください。引数が呼び出し可能である場合、レンダリング中だけでなく、フィールドのフォームが初期化されるたびに評価されます。デフォルトは空のリストです。</target>
        </trans-unit>
        <trans-unit id="a86aed67785d59198e1613f04cc0261e636bd947" translate="yes" xml:space="preserve">
          <source>Either an &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt; of 2-tuples to use as choices for this field, or a callable that returns such an iterable. This argument accepts the same formats as the &lt;code&gt;choices&lt;/code&gt; argument to a model field. See the &lt;a href=&quot;../models/fields#field-choices&quot;&gt;model field reference documentation on choices&lt;/a&gt; for more details. If the argument is a callable, it is evaluated each time the field&amp;rsquo;s form is initialized. Defaults to an empty list.</source>
          <target state="translated">いずれかの&lt;a href=&quot;https://docs.python.org/3/glossary.html#term-iterable&quot;&gt;反復可能&lt;/a&gt;このフィールドの選択肢として使用する2タプルの、又は戻るような反復可能なその呼び出し可能。この引数は、モデルフィールドの &lt;code&gt;choices&lt;/code&gt; 引数と同じ形式を受け入れます。詳細については、&lt;a href=&quot;../models/fields#field-choices&quot;&gt;選択肢に関するモデルフィールドリファレンスドキュメント&lt;/a&gt;をご覧ください。引数が呼び出し可能である場合、フィールドのフォームが初期化されるたびに評価されます。デフォルトは空のリストです。</target>
        </trans-unit>
        <trans-unit id="d28c6bffe8103ed860fd407d206bead335523716" translate="yes" xml:space="preserve">
          <source>Either way, &lt;code&gt;authenticate()&lt;/code&gt; should check the credentials it gets and return a user object that matches those credentials if the credentials are valid. If they&amp;rsquo;re not valid, it should return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">どちらの方法でも、 &lt;code&gt;authenticate()&lt;/code&gt; は取得した資格情報を確認し、資格情報が有効な場合は、それらの資格情報と一致するユーザーオブジェクトを返します。それらが有効でない場合は、 &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="53c3513d99230dc97ffc8b8f980549485993a2ec" translate="yes" xml:space="preserve">
          <source>Elements of &lt;code&gt;list_display&lt;/code&gt; can also be properties. Please note however, that due to the way properties work in Python, setting &lt;code&gt;short_description&lt;/code&gt; or &lt;code&gt;admin_order_field&lt;/code&gt; on a property is only possible when using the &lt;code&gt;property()&lt;/code&gt; function and &lt;strong&gt;not&lt;/strong&gt; with the &lt;code&gt;@property&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;list_display&lt;/code&gt; の要素もプロパティにすることができます。特性を設定し、Pythonで仕事のやり方にあること、しかし、注意してください &lt;code&gt;short_description&lt;/code&gt; または &lt;code&gt;admin_order_field&lt;/code&gt; を使用したときに、プロパティにのみ可能である &lt;code&gt;property()&lt;/code&gt; 関数と&lt;strong&gt;はない&lt;/strong&gt;と &lt;code&gt;@property&lt;/code&gt; のデコレータ。</target>
        </trans-unit>
        <trans-unit id="84add5b2952787581cb9a8851eef63d1ec75d22b" translate="yes" xml:space="preserve">
          <source>Email</source>
          <target state="translated">Email</target>
        </trans-unit>
        <trans-unit id="6cac061f8a6ca61d9516c210bf88971b1a0c84b8" translate="yes" xml:space="preserve">
          <source>Email backends</source>
          <target state="translated">メールバックエンド</target>
        </trans-unit>
        <trans-unit id="cfcd5bdbfc61a80a3bc82b1a180b9ae066631ccf" translate="yes" xml:space="preserve">
          <source>Email reports</source>
          <target state="translated">メールでの報告</target>
        </trans-unit>
        <trans-unit id="c83154634fd437155495c0f041307d91481c46ec" translate="yes" xml:space="preserve">
          <source>Email services</source>
          <target state="translated">メールサービス</target>
        </trans-unit>
        <trans-unit id="ab4a5c4f2b9f04d70f2f5f01c085f3c83e7460f6" translate="yes" xml:space="preserve">
          <source>Email the package to a friend.</source>
          <target state="translated">パッケージを友人にメールで送る</target>
        </trans-unit>
        <trans-unit id="2fde6da6e9f22b3fc4d2b65fa9c356bb50336ad9" translate="yes" xml:space="preserve">
          <source>Empty &lt;code&gt;LineString&lt;/code&gt; objects may be instantiated by passing no arguments or an empty sequence. The following are equivalent:</source>
          <target state="translated">空の &lt;code&gt;LineString&lt;/code&gt; オブジェクトは、引数を渡さないか、空のシーケンスを渡すことでインスタンス化できます。以下は同等です。</target>
        </trans-unit>
        <trans-unit id="c84fe32a01993fdbb6c286dbbb1991ee1e076aae" translate="yes" xml:space="preserve">
          <source>Empty &lt;code&gt;Point&lt;/code&gt; objects may be instantiated by passing no arguments or an empty sequence. The following are equivalent:</source>
          <target state="translated">空の &lt;code&gt;Point&lt;/code&gt; オブジェクトは、引数を渡さないか、空のシーケンスを渡すことによってインスタンス化できます。以下は同等です。</target>
        </trans-unit>
        <trans-unit id="5a5a25b0e6a2dea811dce4133791baef09918529" translate="yes" xml:space="preserve">
          <source>Empty tags are equivalent to their self-closing version.</source>
          <target state="translated">空のタグは、その自閉版に相当します。</target>
        </trans-unit>
        <trans-unit id="0307d363ba40241197b833e90f5f8291ed6b6340" translate="yes" xml:space="preserve">
          <source>Empty value: &lt;code&gt;''&lt;/code&gt; (an empty string)</source>
          <target state="translated">空の値： &lt;code&gt;''&lt;/code&gt; （空の文字列）</target>
        </trans-unit>
        <trans-unit id="f305673b9e3e33782f5d33084c85ee33ec06b8bd" translate="yes" xml:space="preserve">
          <source>Empty value: &lt;code&gt;False&lt;/code&gt;</source>
          <target state="translated">空の値： &lt;code&gt;False&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bdeeba3b3a7689ffd1d89122a0dc8dd2b4e03911" translate="yes" xml:space="preserve">
          <source>Empty value: &lt;code&gt;None&lt;/code&gt;</source>
          <target state="translated">空の値： &lt;code&gt;None&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e5cfd18f5a597ab2f02625b842bcf36919154a90" translate="yes" xml:space="preserve">
          <source>Empty value: &lt;code&gt;[]&lt;/code&gt; (an empty list)</source>
          <target state="translated">空の値： &lt;code&gt;[]&lt;/code&gt; （空のリスト）</target>
        </trans-unit>
        <trans-unit id="de23653036c65c4ef1abe722a3ef494baebd9bbd" translate="yes" xml:space="preserve">
          <source>Empty value: An empty &lt;code&gt;QuerySet&lt;/code&gt; (self.queryset.none())</source>
          <target state="translated">空の値：空の &lt;code&gt;QuerySet&lt;/code&gt; （self.queryset.none（））</target>
        </trans-unit>
        <trans-unit id="4225eee1d66c233c244a726ad49434d5db23844e" translate="yes" xml:space="preserve">
          <source>Empty value: Whatever you&amp;rsquo;ve given as &lt;a href=&quot;#django.forms.CharField.empty_value&quot;&gt;&lt;code&gt;empty_value&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">空の値：&lt;a href=&quot;#django.forms.CharField.empty_value&quot;&gt; &lt;code&gt;empty_value&lt;/code&gt; &lt;/a&gt;として指定したもの。</target>
        </trans-unit>
        <trans-unit id="f0319a78be29defeb5b015312fd2946adca95f61" translate="yes" xml:space="preserve">
          <source>Empty value: Whatever you&amp;rsquo;ve given as &lt;a href=&quot;#django.forms.SlugField.empty_value&quot;&gt;&lt;code&gt;empty_value&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">空の値：&lt;a href=&quot;#django.forms.SlugField.empty_value&quot;&gt; &lt;code&gt;empty_value&lt;/code&gt; &lt;/a&gt;として指定したもの。</target>
        </trans-unit>
        <trans-unit id="66c5b7a862ad2f791a0ebb9ae117b975b1c72e3f" translate="yes" xml:space="preserve">
          <source>Empty value: Whatever you&amp;rsquo;ve given as &lt;a href=&quot;#django.forms.TypedChoiceField.empty_value&quot;&gt;&lt;code&gt;empty_value&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">空の値：&lt;a href=&quot;#django.forms.TypedChoiceField.empty_value&quot;&gt; &lt;code&gt;empty_value&lt;/code&gt; &lt;/a&gt;として指定したもの。</target>
        </trans-unit>
        <trans-unit id="bba37e157e65a36194be07698f01f611e533d1aa" translate="yes" xml:space="preserve">
          <source>Empty value: Whatever you&amp;rsquo;ve given as &lt;code&gt;empty_value&lt;/code&gt;</source>
          <target state="translated">空の値： &lt;code&gt;empty_value&lt;/code&gt; として指定したもの</target>
        </trans-unit>
        <trans-unit id="e8228a485aa0efe812938a833babe7565f723244" translate="yes" xml:space="preserve">
          <source>Empty value: Whatever you&amp;rsquo;ve given as &lt;code&gt;empty_value&lt;/code&gt;.</source>
          <target state="translated">空の値： &lt;code&gt;empty_value&lt;/code&gt; として指定したもの。</target>
        </trans-unit>
        <trans-unit id="b430c70ab9871e221b28ef1c4c585dcde8982154" translate="yes" xml:space="preserve">
          <source>Emptying the test outbox</source>
          <target state="translated">テストアウトボックスを空にする</target>
        </trans-unit>
        <trans-unit id="11c3f094b02b2299b7aef55682fa0533134d3da8" translate="yes" xml:space="preserve">
          <source>Emulating built-in field types</source>
          <target state="translated">組み込みのフィールドタイプをエミュレートする</target>
        </trans-unit>
        <trans-unit id="51587e5c16a3a99c5b5a235b51466d22e53e91b3" translate="yes" xml:space="preserve">
          <source>Enable the site-wide cache. If these are enabled, each Django-powered page will be cached for as long as the &lt;a href=&quot;settings#std:setting-CACHE_MIDDLEWARE_SECONDS&quot;&gt;&lt;code&gt;CACHE_MIDDLEWARE_SECONDS&lt;/code&gt;&lt;/a&gt; setting defines. See the &lt;a href=&quot;../topics/cache&quot;&gt;cache documentation&lt;/a&gt;.</source>
          <target state="translated">サイト全体のキャッシュを有効にします。これらが有効になっている場合、&lt;a href=&quot;settings#std:setting-CACHE_MIDDLEWARE_SECONDS&quot;&gt; &lt;code&gt;CACHE_MIDDLEWARE_SECONDS&lt;/code&gt; &lt;/a&gt;設定で定義されている限り、各Django駆動ページがキャッシュされます。&lt;a href=&quot;../topics/cache&quot;&gt;キャッシュのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8a606c31d5bd9855b6f96d89eb26d4037f8e142e" translate="yes" xml:space="preserve">
          <source>Enables &lt;a href=&quot;../topics/logging#django-db-logger&quot;&gt;SQL logging&lt;/a&gt; for failing tests. If &lt;code&gt;--verbosity&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;, then queries in passing tests are also output.</source>
          <target state="translated">失敗したテストの&lt;a href=&quot;../topics/logging#django-db-logger&quot;&gt;SQLログ&lt;/a&gt;を有効にします。 &lt;code&gt;--verbosity&lt;/code&gt; が &lt;code&gt;2&lt;/code&gt; の場合、テストに合格したクエリも出力されます。</target>
        </trans-unit>
        <trans-unit id="7a4463d651ed0661984979afe199ae5b0f721a19" translate="yes" xml:space="preserve">
          <source>Enables cookie- and session-based message support. See the &lt;a href=&quot;contrib/messages&quot;&gt;messages documentation&lt;/a&gt;.</source>
          <target state="translated">Cookieベースおよびセッションベースのメッセージサポートを有効にします。&lt;a href=&quot;contrib/messages&quot;&gt;メッセージのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b697bc7a93f37da137a7d81c38c1b3456d64c1e7" translate="yes" xml:space="preserve">
          <source>Enables fixing of migration conflicts.</source>
          <target state="translated">移行時のコンフリクトを修正できるようにします。</target>
        </trans-unit>
        <trans-unit id="facf40aee4c34cb8e86957e26fbeb8686d6d7927" translate="yes" xml:space="preserve">
          <source>Enables handling of the &lt;code&gt;DELETE&lt;/code&gt; http action.</source>
          <target state="translated">&lt;code&gt;DELETE&lt;/code&gt; httpアクションの処理を有効にします。</target>
        </trans-unit>
        <trans-unit id="adf9ba6da093f7b831abeb1094dfef28604e5d4c" translate="yes" xml:space="preserve">
          <source>Enables language selection based on data from the request. It customizes content for each user. See the &lt;a href=&quot;../topics/i18n/translation&quot;&gt;internationalization documentation&lt;/a&gt;.</source>
          <target state="translated">リクエストのデータに基づいて言語を選択できるようにします。ユーザーごとにコンテンツをカスタマイズします。&lt;a href=&quot;../topics/i18n/translation&quot;&gt;国際化のドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="de9c23f636a149ae61bc116fbee349e97a8aca92" translate="yes" xml:space="preserve">
          <source>Enables or disables conversion of aware datetime objects to the current time zone in the contained block.</source>
          <target state="translated">認識しているdatetimeオブジェクトを、含まれているブロック内の現在のタイムゾーンに変換することを有効または無効にします。</target>
        </trans-unit>
        <trans-unit id="c770732c1fcd44d857f9fb3dfac99ec20c9986b4" translate="yes" xml:space="preserve">
          <source>Enables or disables localization of template variables in the contained block.</source>
          <target state="translated">含まれるブロック内のテンプレート変数のローカライズを有効または無効にします。</target>
        </trans-unit>
        <trans-unit id="d18445bb9393ddbd76cbe6f830c69633db71cb33" translate="yes" xml:space="preserve">
          <source>Enables session support. See the &lt;a href=&quot;../topics/http/sessions&quot;&gt;session documentation&lt;/a&gt;.</source>
          <target state="translated">セッションサポートを有効にします。&lt;a href=&quot;../topics/http/sessions&quot;&gt;セッションのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2bf30bf5a21dc3907ce5334c0e5a65db129f6fb4" translate="yes" xml:space="preserve">
          <source>Enabling &lt;a href=&quot;../../ref/databases#persistent-database-connections&quot;&gt;persistent database connections&lt;/a&gt; can result in a nice speed-up when connecting to the database accounts for a significant part of the request processing time.</source>
          <target state="translated">&lt;a href=&quot;../../ref/databases#persistent-database-connections&quot;&gt;永続的なデータベース接続を&lt;/a&gt;有効にすると、リクエスト処理時間のかなりの部分を占めるデータベースアカウントに接続するときに、速度が大幅に向上します。</target>
        </trans-unit>
        <trans-unit id="71954675171c44278797f899903b3e2642b83e23" translate="yes" xml:space="preserve">
          <source>Enabling &lt;a href=&quot;../ref/databases#persistent-database-connections&quot;&gt;Persistent connections&lt;/a&gt; can speed up connections to the database accounts for a significant part of the request processing time.</source>
          <target state="translated">&lt;a href=&quot;../ref/databases#persistent-database-connections&quot;&gt;持続的接続&lt;/a&gt;を有効にすると、要求処理時間のかなりの部分を占めるデータベースアカウントへの接続を高速化できます。</target>
        </trans-unit>
        <trans-unit id="43b8ca6e4533276ccf1161f4a1ce0109e081a732" translate="yes" xml:space="preserve">
          <source>Enabling &lt;code&gt;redirect_authenticated_user&lt;/code&gt; can also result in a redirect loop when using the &lt;a href=&quot;#django.contrib.auth.decorators.permission_required&quot;&gt;&lt;code&gt;permission_required()&lt;/code&gt;&lt;/a&gt; decorator unless the &lt;code&gt;raise_exception&lt;/code&gt; parameter is used.</source>
          <target state="translated">また、 &lt;code&gt;raise_exception&lt;/code&gt; パラメータが使用されていない限り、&lt;a href=&quot;#django.contrib.auth.decorators.permission_required&quot;&gt; &lt;code&gt;permission_required()&lt;/code&gt; &lt;/a&gt;デコレータを使用すると、redirect_authenticated_userを有効にするとリダイレクトループが発生 &lt;code&gt;redirect_authenticated_user&lt;/code&gt; 可能性があります。</target>
        </trans-unit>
        <trans-unit id="185e981c9c1dc4f6bcc5bd4860572bc06711d4d2" translate="yes" xml:space="preserve">
          <source>Enabling JSON1 extension on SQLite</source>
          <target state="translated">SQLiteでJSON1拡張を有効にする</target>
        </trans-unit>
        <trans-unit id="52c0ff5fd427daa4a693b2ccb871551aaa56e684" translate="yes" xml:space="preserve">
          <source>Enabling localization for fields with &lt;code&gt;localized_fields&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;localized_fields&lt;/code&gt; でフィールドのローカライズを有効にする</target>
        </trans-unit>
        <trans-unit id="7c44415ef04c9dc27e89d08c69f6c89a1f2df7b8" translate="yes" xml:space="preserve">
          <source>Enabling localization of fields</source>
          <target state="translated">フィールドのローカライズを可能にする</target>
        </trans-unit>
        <trans-unit id="24f48cd3340e42cc782120d001737c383d262bd1" translate="yes" xml:space="preserve">
          <source>Enabling messages</source>
          <target state="translated">メッセージを有効にする</target>
        </trans-unit>
        <trans-unit id="40b4b522e7058574bba73ee6635f391d5ff14ccd" translate="yes" xml:space="preserve">
          <source>Enabling password validation</source>
          <target state="translated">パスワードの検証を有効にする</target>
        </trans-unit>
        <trans-unit id="da39d8e40cf6638ff9704974b2fffd7f905079bf" translate="yes" xml:space="preserve">
          <source>Enabling sessions</source>
          <target state="translated">セッションを有効にする</target>
        </trans-unit>
        <trans-unit id="ffcf0e1bfe0a923964066354315ae55d3fcb3672" translate="yes" xml:space="preserve">
          <source>Enabling the &lt;a href=&quot;../ref/templates/api#django.template.loaders.cached.Loader&quot;&gt;&lt;code&gt;cached template loader&lt;/code&gt;&lt;/a&gt; often improves performance drastically, as it avoids compiling each template every time it needs to be rendered.</source>
          <target state="translated">&lt;a href=&quot;../ref/templates/api#django.template.loaders.cached.Loader&quot;&gt; &lt;code&gt;cached template loader&lt;/code&gt; &lt;/a&gt;有効にすると、レンダリングが必要になるたびに各テンプレートをコンパイルする必要がなくなるため、多くの場合、パフォーマンスが大幅に向上します。</target>
        </trans-unit>
        <trans-unit id="e85527a7c01ac6109965c64231b072b0688e9926" translate="yes" xml:space="preserve">
          <source>Enabling the cached template loader often improves performance drastically, as it avoids compiling each template every time it needs to be rendered. See the &lt;a href=&quot;../../ref/templates/api#template-loaders&quot;&gt;template loaders docs&lt;/a&gt; for more information.</source>
          <target state="translated">キャッシュされたテンプレートローダーを有効にすると、レンダリングが必要になるたびに各テンプレートをコンパイルする必要がなくなるため、多くの場合、パフォーマンスが大幅に向上します。詳細については、&lt;a href=&quot;../../ref/templates/api#template-loaders&quot;&gt;テンプレートローダーのドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="799115455303da7f3d39067dfa0f486ce1f0713a" translate="yes" xml:space="preserve">
          <source>Enabling the sites framework</source>
          <target state="translated">サイトのフレームワークを有効にする</target>
        </trans-unit>
        <trans-unit id="7a308792271b11195677870b19719b9711eafb15" translate="yes" xml:space="preserve">
          <source>Enclosures</source>
          <target state="translated">Enclosures</target>
        </trans-unit>
        <trans-unit id="b2654296c78ff5612050a6b55e48157650da3a15" translate="yes" xml:space="preserve">
          <source>Encodes a bytestring to a base64 string for use in URLs, stripping any trailing equal signs.</source>
          <target state="translated">URL で使用するためにバイト列を base64 文字列にエンコードします。</target>
        </trans-unit>
        <trans-unit id="5821fec7ee87050117e2081a31b307f34868a8ad" translate="yes" xml:space="preserve">
          <source>Encoding</source>
          <target state="translated">Encoding</target>
        </trans-unit>
        <trans-unit id="1cae75f67b9a5d3653fc5bf98e9ce1ed2fc1ad66" translate="yes" xml:space="preserve">
          <source>Encoding is performed by the session store class tied to a model class.</source>
          <target state="translated">エンコードはモデルクラスに紐付けられたセッションストアクラスによって行われます。</target>
        </trans-unit>
        <trans-unit id="b7de20e88c7be00748af86ec4625129cb62f7543" translate="yes" xml:space="preserve">
          <source>Enforce running test classes sequentially</source>
          <target state="translated">テストクラスを順次実行することを強制する</target>
        </trans-unit>
        <trans-unit id="c1f65ddb75ed7d97e701168af35171410be8f9e7" translate="yes" xml:space="preserve">
          <source>Engine</source>
          <target state="translated">Engine</target>
        </trans-unit>
        <trans-unit id="12f9801d010eb18e980abf817ce7d35a66c7a8da" translate="yes" xml:space="preserve">
          <source>English ordinal suffix for day of the month, 2 characters.</source>
          <target state="translated">月の曜日を表す英語の接尾辞、2文字。</target>
        </trans-unit>
        <trans-unit id="9b4cacfea65f0df81bbb70bb79d368cdf7430114" translate="yes" xml:space="preserve">
          <source>Enjoy the free API</source>
          <target state="translated">無料のAPIを楽しむ</target>
        </trans-unit>
        <trans-unit id="ac6dcbd1edf399d18ef1b83f882fa42a8c50157d" translate="yes" xml:space="preserve">
          <source>Ensure that the &lt;code&gt;django.contrib.sites&lt;/code&gt; framework &lt;a href=&quot;sites#enabling-the-sites-framework&quot;&gt;is installed&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;django.contrib.sites&lt;/code&gt; フレームワーク&lt;a href=&quot;sites#enabling-the-sites-framework&quot;&gt;がインストールされ&lt;/a&gt;ていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="a9d0d26333dfab249cb912e803a58cf912711deb" translate="yes" xml:space="preserve">
          <source>Ensure that you don&amp;rsquo;t have non-prefixed URL patterns that might collide with an automatically-added language prefix.</source>
          <target state="translated">自動的に追加された言語プレフィックスと衝突する可能性があるプレフィックスのないURLパターンがないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="f5fe186aacd25033e987d7d2a2b2d8b3ba48a8dc" translate="yes" xml:space="preserve">
          <source>Ensure that your 404 template works</source>
          <target state="translated">404テンプレートが機能することを確認する</target>
        </trans-unit>
        <trans-unit id="e003ef03051149f4675d37c9f9c6ea748cf9b4b2" translate="yes" xml:space="preserve">
          <source>Ensuring data stored in hidden form fields has not been tampered with.</source>
          <target state="translated">非表示のフォームフィールドに保存されたデータが改ざんされていないことを確認します。</target>
        </trans-unit>
        <trans-unit id="bf229c276c6f0527217bafda1bcd533d80e8835b" translate="yes" xml:space="preserve">
          <source>Enter the admin site</source>
          <target state="translated">管理サイトに入る</target>
        </trans-unit>
        <trans-unit id="29de63a391bb614dc4854aefcd579dcff322b235" translate="yes" xml:space="preserve">
          <source>Enter your desired username and press enter.</source>
          <target state="translated">希望するユーザー名を入力してエンターキーを押します。</target>
        </trans-unit>
        <trans-unit id="1a7e9db17fab5ba33617fdefd7d19a4dba92b592" translate="yes" xml:space="preserve">
          <source>Entry &amp;ldquo;detail&amp;rdquo; page &amp;ndash; permalink page for a single entry.</source>
          <target state="translated">エントリの「詳細」ページ&amp;ndash;単一のエントリのパーマリンクページ。</target>
        </trans-unit>
        <trans-unit id="ecfb1fec2b4374598ab0844cc33d5f900bf57b03" translate="yes" xml:space="preserve">
          <source>Entry point to add parser arguments to handle command line arguments passed to the command. Custom commands should override this method to add both positional and optional arguments accepted by the command. Calling &lt;code&gt;super()&lt;/code&gt; is not needed when directly subclassing &lt;code&gt;BaseCommand&lt;/code&gt;.</source>
          <target state="translated">コマンドに渡されたコマンドライン引数を処理するパーサー引数を追加するエントリポイント。カスタムコマンドは、このメソッドをオーバーライドして、コマンドで受け入れられる位置引数とオプション引数の両方を追加する必要があります。 &lt;code&gt;BaseCommand&lt;/code&gt; を直接サブクラス化する場合、 &lt;code&gt;super()&lt;/code&gt; を呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="8b896542742a065357c73e3cda28f2c5161db4fc" translate="yes" xml:space="preserve">
          <source>Enum member values are a tuple of arguments to use when constructing the concrete data type. Django supports adding an extra string value to the end of this tuple to be used as the human-readable name, or &lt;code&gt;label&lt;/code&gt;. The &lt;code&gt;label&lt;/code&gt; can be a lazy translatable string. Thus, in most cases, the member value will be a &lt;code&gt;(value, label)&lt;/code&gt; two-tuple. See below for &lt;a href=&quot;#field-choices-enum-subclassing&quot;&gt;an example of subclassing choices&lt;/a&gt; using a more complex data type. If a tuple is not provided, or the last item is not a (lazy) string, the &lt;code&gt;label&lt;/code&gt; is &lt;a href=&quot;#field-choices-enum-auto-label&quot;&gt;automatically generated&lt;/a&gt; from the member name.</source>
          <target state="translated">列挙型メンバー値は、具象データ型を構築するときに使用する引数のタプルです。Djangoは、このタプルの末尾に追加の文字列値を追加して、人間が読める名前または &lt;code&gt;label&lt;/code&gt; として使用できるようにします。 &lt;code&gt;label&lt;/code&gt; 怠惰な翻訳可能な文字列を指定できます。したがって、ほとんどの場合、メンバー値は &lt;code&gt;(value, label)&lt;/code&gt; 2タプルになります。より複雑なデータ型を使用して&lt;a href=&quot;#field-choices-enum-subclassing&quot;&gt;選択肢&lt;/a&gt;をサブクラス化する例については、以下を参照してください。タプルが提供されていない場合、または最後のアイテムが（遅延）文字列でない場合、 &lt;code&gt;label&lt;/code&gt; はメンバー名から&lt;a href=&quot;#field-choices-enum-auto-label&quot;&gt;自動的に生成さ&lt;/a&gt;れます。</target>
        </trans-unit>
        <trans-unit id="3e2bf03a268096db9df6b0465b51da16d0d1910a" translate="yes" xml:space="preserve">
          <source>Enumeration types</source>
          <target state="translated">列挙タイプ</target>
        </trans-unit>
        <trans-unit id="d0d2d65b25c8a65fe873c8d4778ec8d7466d7c4d" translate="yes" xml:space="preserve">
          <source>Enumeration types (e.g. &lt;code&gt;TextChoices&lt;/code&gt; or &lt;code&gt;IntegerChoices&lt;/code&gt;) instances.</source>
          <target state="translated">列挙型（ &lt;code&gt;TextChoices&lt;/code&gt; や &lt;code&gt;IntegerChoices&lt;/code&gt; など）のインスタンス。</target>
        </trans-unit>
        <trans-unit id="05722a0a94d0ab771b3054a95a14401717ebd671" translate="yes" xml:space="preserve">
          <source>Enumeration types do not support &lt;a href=&quot;#field-choices-named-groups&quot;&gt;named groups&lt;/a&gt;.</source>
          <target state="translated">列挙型は&lt;a href=&quot;#field-choices-named-groups&quot;&gt;名前付きグループを&lt;/a&gt;サポートしていません。</target>
        </trans-unit>
        <trans-unit id="899820d6bb7dd8f201ce3114a20b9edd5eadca86" translate="yes" xml:space="preserve">
          <source>Environment-specific settings</source>
          <target state="translated">環境に合わせた設定</target>
        </trans-unit>
        <trans-unit id="d2180d5f1d2667ed48d18bce20de1c4557efdc3f" translate="yes" xml:space="preserve">
          <source>Equality operator doesn&amp;rsquo;t check spatial equality</source>
          <target state="translated">等価演算子は空間的等価性をチェックしません</target>
        </trans-unit>
        <trans-unit id="1d596485761d5add25928047878c2cf87248f6ff" translate="yes" xml:space="preserve">
          <source>Equality. Example:</source>
          <target state="translated">平等であること。例を挙げて。</target>
        </trans-unit>
        <trans-unit id="bfd6961ac8cd0324fee27aae000bed2e4593ea3d" translate="yes" xml:space="preserve">
          <source>Equally we could use our mixin with one of the generic views. We can make our own version of &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; by mixing &lt;code&gt;JSONResponseMixin&lt;/code&gt; with the &lt;code&gt;django.views.generic.detail.BaseDetailView&lt;/code&gt; &amp;ndash; (the &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; before template rendering behavior has been mixed in):</source>
          <target state="translated">同様に、汎用ビューの1つでミックスインを使用することもできます。当社は、当社の独自のバージョンにすることができ&lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; を&lt;/a&gt;混合することにより、 &lt;code&gt;JSONResponseMixin&lt;/code&gt; をして &lt;code&gt;django.views.generic.detail.BaseDetailView&lt;/code&gt; - （&lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt;テンプレートの前にレンダリング動作が中に混入されています）：</target>
        </trans-unit>
        <trans-unit id="054f9b7adbd87826f0e569062c8223fc7d4fd73d" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;#django.db.models.functions.Rank&quot;&gt;&lt;code&gt;Rank&lt;/code&gt;&lt;/a&gt; but does not have gaps.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.functions.Rank&quot;&gt; &lt;code&gt;Rank&lt;/code&gt; &lt;/a&gt;同等ですが、ギャップはありません。</target>
        </trans-unit>
        <trans-unit id="73631d7f0356fdbdeaa36f8e5dbad89c6aa15dc4" translate="yes" xml:space="preserve">
          <source>Error handling</source>
          <target state="translated">エラー処理</target>
        </trans-unit>
        <trans-unit id="e7c9e508fdad3eb918b64d9cdee86194dc2bf6b7" translate="yes" xml:space="preserve">
          <source>Error message keys include &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;blank&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;invalid_choice&lt;/code&gt;, &lt;code&gt;unique&lt;/code&gt;, and &lt;code&gt;unique_for_date&lt;/code&gt;. Additional error message keys are specified for each field in the &lt;a href=&quot;#field-types&quot;&gt;Field types&lt;/a&gt; section below.</source>
          <target state="translated">エラーメッセージキーには、 &lt;code&gt;null&lt;/code&gt; 、 &lt;code&gt;blank&lt;/code&gt; 、 &lt;code&gt;invalid&lt;/code&gt; 、 &lt;code&gt;invalid_choice&lt;/code&gt; 、 &lt;code&gt;unique&lt;/code&gt; 、および &lt;code&gt;unique_for_date&lt;/code&gt; があります。追加のエラーメッセージキーは、以下の[ &lt;a href=&quot;#field-types&quot;&gt;フィールドタイプ]&lt;/a&gt;セクションの各フィールドに指定されています。</target>
        </trans-unit>
        <trans-unit id="644e9c593a9ecca24a4a97f3e6f7c7d76b1c31ff" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;</source>
          <target state="translated">エラーメッセージキー： &lt;code&gt;required&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a79adbe1d1427d81e105f8c7179c73ff061a0bb5" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;</source>
          <target state="translated">エラーメッセージキー： &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;invalid&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1d5038afff8413f2bff0c221ff6adac550860d58" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;incomplete&lt;/code&gt;</source>
          <target state="translated">エラーメッセージキー： &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;invalid&lt;/code&gt; 、 &lt;code&gt;incomplete&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e70007c93c1cfef205c43d89968dd0d47da150ad" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;invalid_date&lt;/code&gt;, &lt;code&gt;invalid_time&lt;/code&gt;</source>
          <target state="translated">エラーメッセージキー： &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;invalid&lt;/code&gt; 、 &lt;code&gt;invalid_date&lt;/code&gt; 、 &lt;code&gt;invalid_time&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="33bafb140501080fe19092f94f16941ba6af5c7c" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;max_value&lt;/code&gt;, &lt;code&gt;min_value&lt;/code&gt;</source>
          <target state="translated">エラーメッセージキー： &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;invalid&lt;/code&gt; 、 &lt;code&gt;max_value&lt;/code&gt; 、 &lt;code&gt;min_value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e89c2ad7213fda599cbab4454bde5268d62b08f4" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;max_value&lt;/code&gt;, &lt;code&gt;min_value&lt;/code&gt;, &lt;code&gt;max_digits&lt;/code&gt;, &lt;code&gt;max_decimal_places&lt;/code&gt;, &lt;code&gt;max_whole_digits&lt;/code&gt;</source>
          <target state="translated">エラーメッセージキー： &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;invalid&lt;/code&gt; 、 &lt;code&gt;max_value&lt;/code&gt; 、 &lt;code&gt;min_value&lt;/code&gt; 、 &lt;code&gt;max_digits&lt;/code&gt; 、 &lt;code&gt;max_decimal_places&lt;/code&gt; 、 &lt;code&gt;max_whole_digits&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="25421ddec12a744730d96d703e242516406cf2f7" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;missing&lt;/code&gt;, &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;invalid_image&lt;/code&gt;</source>
          <target state="translated">エラーメッセージキー： &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;invalid&lt;/code&gt; 、 &lt;code&gt;missing&lt;/code&gt; 、 &lt;code&gt;empty&lt;/code&gt; 、 &lt;code&gt;invalid_image&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="034a2ab0cf71e7e73bcf4a72c75f29c823563e38" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;missing&lt;/code&gt;, &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;max_length&lt;/code&gt;</source>
          <target state="translated">エラーメッセージキー： &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;invalid&lt;/code&gt; 、 &lt;code&gt;missing&lt;/code&gt; 、 &lt;code&gt;empty&lt;/code&gt; 、 &lt;code&gt;max_length&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1055f9a35a1305672ed5041e9a8ad077f65a71e" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;overflow&lt;/code&gt;.</source>
          <target state="translated">エラーメッセージキー： &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;invalid&lt;/code&gt; 、 &lt;code&gt;overflow&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="815f2e18308655c9e84818e293b91dad53e00d11" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid_choice&lt;/code&gt;</source>
          <target state="translated">エラーメッセージキー： &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;invalid_choice&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2c1a7f18421dd40169c4b79efcd7d78b4e84f388" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid_choice&lt;/code&gt;, &lt;code&gt;invalid_list&lt;/code&gt;</source>
          <target state="translated">エラーメッセージキー： &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;invalid_choice&lt;/code&gt; 、 &lt;code&gt;invalid_list&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="745eb8c05a4fbb57418746c24983d0cb42a36bf9" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid_list&lt;/code&gt;, &lt;code&gt;invalid_choice&lt;/code&gt;, &lt;code&gt;invalid_pk_value&lt;/code&gt;</source>
          <target state="translated">エラーメッセージキー： &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;invalid_list&lt;/code&gt; 、 &lt;code&gt;invalid_choice&lt;/code&gt; 、 &lt;code&gt;invalid_pk_value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="21f173fe77916ce6e2e59f50f2240b50cefe55ca" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;invalid_choice&lt;/code&gt;, &lt;code&gt;invalid_pk_value&lt;/code&gt;</source>
          <target state="translated">エラーメッセージキー： &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;list&lt;/code&gt; 、 &lt;code&gt;invalid_choice&lt;/code&gt; 、 &lt;code&gt;invalid_pk_value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2e52b5fe8383214c45bcaeef65be3fe9c82e064e" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;max_length&lt;/code&gt;, &lt;code&gt;min_length&lt;/code&gt;</source>
          <target state="translated">エラーメッセージキー： &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;max_length&lt;/code&gt; 、 &lt;code&gt;min_length&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ed2c55d7d1d4d4b54462e06cab6ef3e63f41b795" translate="yes" xml:space="preserve">
          <source>Error messages defined at the &lt;a href=&quot;../../ref/forms/fields#django.forms.Field.error_messages&quot;&gt;&lt;code&gt;form field&lt;/code&gt;&lt;/a&gt; level or at the &lt;a href=&quot;#modelforms-overriding-default-fields&quot;&gt;form Meta&lt;/a&gt; level always take precedence over the error messages defined at the &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.error_messages&quot;&gt;&lt;code&gt;model field&lt;/code&gt;&lt;/a&gt; level.</source>
          <target state="translated">で定義されたエラーメッセージ&lt;a href=&quot;../../ref/forms/fields#django.forms.Field.error_messages&quot;&gt; &lt;code&gt;form field&lt;/code&gt; &lt;/a&gt;レベルまたはで&lt;a href=&quot;#modelforms-overriding-default-fields&quot;&gt;フォームメタ&lt;/a&gt;レベルは、常にでは定義されたエラーメッセージよりも優先&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.error_messages&quot;&gt; &lt;code&gt;model field&lt;/code&gt; &lt;/a&gt;レベル。</target>
        </trans-unit>
        <trans-unit id="c25f6d4974538593d74fc8a9b515e9aacca2854a" translate="yes" xml:space="preserve">
          <source>Error messages defined on &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.error_messages&quot;&gt;&lt;code&gt;model fields&lt;/code&gt;&lt;/a&gt; are only used when the &lt;code&gt;ValidationError&lt;/code&gt; is raised during the &lt;a href=&quot;../../ref/models/instances#validating-objects&quot;&gt;model validation&lt;/a&gt; step and no corresponding error messages are defined at the form level.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.error_messages&quot;&gt; &lt;code&gt;model fields&lt;/code&gt; &lt;/a&gt;定義されたエラーメッセージは、&lt;a href=&quot;../../ref/models/instances#validating-objects&quot;&gt;モデルの検証&lt;/a&gt;ステップ中に &lt;code&gt;ValidationError&lt;/code&gt; が発生し、フォームレベルで対応するエラーメッセージが定義されていない場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="cc46903da8f77602e39b5106b4c3c0830121b2ce" translate="yes" xml:space="preserve">
          <source>Error messages: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;</source>
          <target state="translated">エラーメッセージ： &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;invalid&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c933b897af92835c337f8c15d042afda6a862cd4" translate="yes" xml:space="preserve">
          <source>Error reporting</source>
          <target state="translated">エラー報告</target>
        </trans-unit>
        <trans-unit id="091bcdc3a075191969217351978c7120e66c3bb9" translate="yes" xml:space="preserve">
          <source>Error reporting by email doesn&amp;rsquo;t scale very well</source>
          <target state="translated">電子メールによるエラー報告がうまく拡張しない</target>
        </trans-unit>
        <trans-unit id="5930f76d487b628cabe814b6bf08fb2cef5cf6fa" translate="yes" xml:space="preserve">
          <source>Error reports are really helpful for debugging errors, so it is generally useful to record as much relevant information about those errors as possible. For example, by default Django records the &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_trace&quot;&gt;full traceback&lt;/a&gt; for the exception raised, each &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_frame&quot;&gt;traceback frame&lt;/a&gt;&amp;rsquo;s local variables, and the &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;../ref/request-response#httprequest-attributes&quot;&gt;attributes&lt;/a&gt;.</source>
          <target state="translated">エラーレポートはエラーのデバッグに非常に役立ちます。そのため、一般に、それらのエラーに関するできるだけ多くの関連情報を記録しておくと役立ちます。たとえば、デフォルトでは、Django は発生した例外の&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_trace&quot;&gt;完全なトレースバック&lt;/a&gt;、各&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_frame&quot;&gt;トレースバックフレーム&lt;/a&gt;のローカル変数、および&lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../ref/request-response#httprequest-attributes&quot;&gt;属性を&lt;/a&gt;記録します。</target>
        </trans-unit>
        <trans-unit id="f05266842a08aa86bb6c0c2ba9682c438aca4a39" translate="yes" xml:space="preserve">
          <source>Error views</source>
          <target state="translated">エラー表示</target>
        </trans-unit>
        <trans-unit id="072bd41bf754ef5147e3351ad808e9b39d15ee67" translate="yes" xml:space="preserve">
          <source>Escapes a string&amp;rsquo;s HTML. Specifically, it makes these replacements:</source>
          <target state="translated">文字列のHTMLをエスケープします。具体的には、次の置換を行います。</target>
        </trans-unit>
        <trans-unit id="99795a321d97625012d4cc2793a4db9c8993a8f4" translate="yes" xml:space="preserve">
          <source>Escapes a value for use in a URL.</source>
          <target state="translated">URLで使用するための値をエスケープします。</target>
        </trans-unit>
        <trans-unit id="081bacb05feac121b0a11f486fde42d84ddcd2e4" translate="yes" xml:space="preserve">
          <source>Escapes characters for use in JavaScript strings. This does &lt;em&gt;not&lt;/em&gt; make the string safe for use in HTML or JavaScript template literals, but does protect you from syntax errors when using templates to generate JavaScript/JSON.</source>
          <target state="translated">JavaScript文字列で使用する文字をエスケープします。これにより、文字列はHTMLまたはJavaScriptテンプレートリテラルで安全に使用&lt;em&gt;できなくなり&lt;/em&gt;ますが、テンプレートを使用してJavaScript / JSONを生成するときの構文エラーから保護されます。</target>
        </trans-unit>
        <trans-unit id="2799518eaabe0894626afc825e79ca8ce72f1623" translate="yes" xml:space="preserve">
          <source>Escapes the unsafe characters from the path portion of a Uniform Resource Identifier (URI).</source>
          <target state="translated">統一リソース識別子(URI)のパス部分から安全でない文字をエスケープします。</target>
        </trans-unit>
        <trans-unit id="e3f5661168cd287de832a0a23973ac35fdf2f4d2" translate="yes" xml:space="preserve">
          <source>Escaping percent signs and underscores in &lt;code&gt;LIKE&lt;/code&gt; statements</source>
          <target state="translated">&lt;code&gt;LIKE&lt;/code&gt; ステートメントでのパーセント記号とアンダースコアのエスケープ</target>
        </trans-unit>
        <trans-unit id="0b7957a226b11ed2d0338bfb81d7c21199344e65" translate="yes" xml:space="preserve">
          <source>Essentially, Django does two things:</source>
          <target state="translated">本質的に、Django は二つのことをします。</target>
        </trans-unit>
        <trans-unit id="e09cd8f1120244b4cc85dbc74429b80692595661" translate="yes" xml:space="preserve">
          <source>Essentially, the &lt;code&gt;Vary&lt;/code&gt; HTTP header defines which headers a cache should take into account when building its cache key. Requests with the same path but different header content for headers named in &lt;code&gt;Vary&lt;/code&gt; need to get different cache keys to prevent delivery of wrong content.</source>
          <target state="translated">基本的に、 &lt;code&gt;Vary&lt;/code&gt; HTTPヘッダーは、キャッシュキーを構築するときにキャッシュが考慮するヘッダーを定義します。パスが同じで、 &lt;code&gt;Vary&lt;/code&gt; で指定されたヘッダーのヘッダーコンテンツが異なるリクエストは、間違ったコンテンツの配信を防ぐために異なるキャッシュキーを取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="287879ba8471d4b806339a94d25d38412ac21d3b" translate="yes" xml:space="preserve">
          <source>Establishing and closing an SMTP connection (or any other network connection, for that matter) is an expensive process. If you have a lot of emails to send, it makes sense to reuse an SMTP connection, rather than creating and destroying a connection every time you want to send an email.</source>
          <target state="translated">SMTP接続(または他のネットワーク接続)を確立して閉じるには、費用がかかります。送信する電子メールの数が多い場合は、電子メールを送信するたびに接続を作成して破棄するのではなく、SMTP接続を再利用するのが理にかなっています。</target>
        </trans-unit>
        <trans-unit id="b83e4e341012948cf2fb9b604a33b40907efac1c" translate="yes" xml:space="preserve">
          <source>Evaluates a variable, and if that variable is &amp;ldquo;true&amp;rdquo; the contents of the block are displayed:</source>
          <target state="translated">変数を評価し、その変数が「true」の場合、ブロックの内容が表示されます。</target>
        </trans-unit>
        <trans-unit id="fb95acc4512c80f8216948471f026d38a16023ae" translate="yes" xml:space="preserve">
          <source>Evaluates the &lt;code&gt;QuerySet&lt;/code&gt; (by performing the query) and returns an iterator (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0234&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 234&lt;/strong&gt;&lt;/a&gt;) over the results. A &lt;code&gt;QuerySet&lt;/code&gt; typically caches its results internally so that repeated evaluations do not result in additional queries. In contrast, &lt;code&gt;iterator()&lt;/code&gt; will read results directly, without doing any caching at the &lt;code&gt;QuerySet&lt;/code&gt; level (internally, the default iterator calls &lt;code&gt;iterator()&lt;/code&gt; and caches the return value). For a &lt;code&gt;QuerySet&lt;/code&gt; which returns a large number of objects that you only need to access once, this can result in better performance and a significant reduction in memory.</source>
          <target state="translated">（クエリを実行して） &lt;code&gt;QuerySet&lt;/code&gt; を評価し、結果に対してイテレータ（&lt;a href=&quot;https://www.python.org/dev/peps/pep-0234&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 234を&lt;/strong&gt;&lt;/a&gt;参照）を返します。 A &lt;code&gt;QuerySet&lt;/code&gt; 通常、繰り返し評価が追加クエリにはなりませんので、内部的にその結果をキャッシュします。対照的に、 &lt;code&gt;iterator()&lt;/code&gt; は &lt;code&gt;QuerySet&lt;/code&gt; レベルでキャッシュを行わずに結果を直接読み取ります（内部では、デフォルトの反復子が &lt;code&gt;iterator()&lt;/code&gt; を呼び出して戻り値をキャッシュします）。 &lt;code&gt;QuerySet&lt;/code&gt; あなたは一度だけアクセスする必要があることを多数のオブジェクトを返し、これは、より良いパフォーマンスとメモリの大幅な削減につながることができます。</target>
        </trans-unit>
        <trans-unit id="2adda768975d7029f15f1b9f17f8447fdb930b3f" translate="yes" xml:space="preserve">
          <source>Evaluating a queryset with &lt;code&gt;select_for_update()&lt;/code&gt; in autocommit mode on backends which support &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; is a &lt;a href=&quot;../exceptions#django.db.transaction.TransactionManagementError&quot;&gt;&lt;code&gt;TransactionManagementError&lt;/code&gt;&lt;/a&gt; error because the rows are not locked in that case. If allowed, this would facilitate data corruption and could easily be caused by calling code that expects to be run in a transaction outside of one.</source>
          <target state="translated">クエリセットの評価 &lt;code&gt;select_for_update()&lt;/code&gt; のサポートバックエンドでの自動コミット・モードで &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; ある&lt;a href=&quot;../exceptions#django.db.transaction.TransactionManagementError&quot;&gt; &lt;code&gt;TransactionManagementError&lt;/code&gt; の&lt;/a&gt;行が、その場合にはロックされていないので、エラー。許可されている場合、これはデータの破損を促進し、トランザクションの外部で実行されることを期待する呼び出しコードによって簡単に引き起こされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f88758a6f67c0caf62d19bdc3d8155dae92773ed" translate="yes" xml:space="preserve">
          <source>Evaluating a single-attribute lookup of &lt;code&gt;{{ perms }}&lt;/code&gt; as a boolean is a proxy to &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_module_perms&quot;&gt;&lt;code&gt;User.has_module_perms()&lt;/code&gt;&lt;/a&gt;. For example, to check if the logged-in user has any permissions in the &lt;code&gt;foo&lt;/code&gt; app:</source>
          <target state="translated">&lt;code&gt;{{ perms }}&lt;/code&gt; 単一属性ルックアップをブール値として評価することは、&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_module_perms&quot;&gt; &lt;code&gt;User.has_module_perms()&lt;/code&gt; の&lt;/a&gt;プロキシです。たとえば、ログインしたユーザーが &lt;code&gt;foo&lt;/code&gt; アプリで権限を持っているかどうかを確認するには：</target>
        </trans-unit>
        <trans-unit id="9ec5a5f80f99023380475fda2bf800bc6c468279" translate="yes" xml:space="preserve">
          <source>Evaluating a two-level-attribute lookup as a boolean is a proxy to &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt;&lt;code&gt;User.has_perm()&lt;/code&gt;&lt;/a&gt;. For example, to check if the logged-in user has the permission &lt;code&gt;foo.add_vote&lt;/code&gt;:</source>
          <target state="translated">2レベル属性ルックアップをブール値として評価することは、&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt; &lt;code&gt;User.has_perm()&lt;/code&gt; の&lt;/a&gt;プロキシです。たとえば、ログインしたユーザーが &lt;code&gt;foo.add_vote&lt;/code&gt; 権限を持っているかどうかを確認するには：</target>
        </trans-unit>
        <trans-unit id="d1133bf78b0580da1f366db575a5d6fbe79195ea" translate="yes" xml:space="preserve">
          <source>Evaluating a two-level-attribute lookup as a boolean is a proxy to &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt;&lt;code&gt;User.has_perm()&lt;/code&gt;&lt;/a&gt;. For example, to check if the logged-in user has the permission &lt;code&gt;foo.can_vote&lt;/code&gt;:</source>
          <target state="translated">2レベルの属性ルックアップをブール値として評価することは、&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt; &lt;code&gt;User.has_perm()&lt;/code&gt; の&lt;/a&gt;プロキシです。たとえば、ログインしているユーザーに &lt;code&gt;foo.can_vote&lt;/code&gt; の権限があるかどうかを確認するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="9c2b1a4c6880e872ef577b0c34b8759f737014cd" translate="yes" xml:space="preserve">
          <source>Even if you know there is only one message, you should still iterate over the &lt;code&gt;messages&lt;/code&gt; sequence, because otherwise the message storage will not be cleared for the next request.</source>
          <target state="translated">メッセージが1つしかないことがわかっている場合でも、 &lt;code&gt;messages&lt;/code&gt; シーケンスを繰り返し処理する必要があります。そうしないと、次の要求のためにメッセージストレージがクリアされないためです。</target>
        </trans-unit>
        <trans-unit id="e1e489f8009c7015eedaf4af9c0443016c384820" translate="yes" xml:space="preserve">
          <source>Even if you think you are in the advanced use-case situation, &lt;strong&gt;only use defer() when you cannot, at queryset load time, determine if you will need the extra fields or not&lt;/strong&gt;. If you are frequently loading and using a particular subset of your data, the best choice you can make is to normalize your models and put the non-loaded data into a separate model (and database table). If the columns &lt;em&gt;must&lt;/em&gt; stay in the one table for some reason, create a model with &lt;code&gt;Meta.managed = False&lt;/code&gt; (see the &lt;a href=&quot;options#django.db.models.Options.managed&quot;&gt;&lt;code&gt;managed attribute&lt;/code&gt;&lt;/a&gt; documentation) containing just the fields you normally need to load and use that where you might otherwise call &lt;code&gt;defer()&lt;/code&gt;. This makes your code more explicit to the reader, is slightly faster and consumes a little less memory in the Python process.</source>
          <target state="translated">高度なユースケースの状況にあると思われる場合でも&lt;strong&gt;、クエリセットのロード時に、追加のフィールドが必要かどうかを判断できない場合のみ、defer（）を使用してください&lt;/strong&gt;。データの特定のサブセットを頻繁に読み込んで使用している場合は、モデルを正規化し、読み込まれていないデータを別のモデル（およびデータベーステーブル）に配置することをお勧めします。何らかの理由で列が1つのテーブルにとどまる&lt;em&gt;必要がある&lt;/em&gt;場合は、通常ロードする必要があるフィールドのみを含む &lt;code&gt;Meta.managed = False&lt;/code&gt; （&lt;a href=&quot;options#django.db.models.Options.managed&quot;&gt; &lt;code&gt;managed attribute&lt;/code&gt; &lt;/a&gt;ドキュメントを参照）でモデルを作成し、それ以外の場合は &lt;code&gt;defer()&lt;/code&gt; を呼び出す可能性がある場所を使用します。。これにより、コードがリーダーに対してより明確になり、Pythonプロセスで消費されるメモリが少し速くなり、消費されるメモリが少し少なくなります。</target>
        </trans-unit>
        <trans-unit id="6c5a8bd558d017c0183f278904625b9f201223ac" translate="yes" xml:space="preserve">
          <source>Even if your website is available in only one time zone, it&amp;rsquo;s still good practice to store data in UTC in your database. The main reason is Daylight Saving Time (DST). Many countries have a system of DST, where clocks are moved forward in spring and backward in autumn. If you&amp;rsquo;re working in local time, you&amp;rsquo;re likely to encounter errors twice a year, when the transitions happen. (The &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt; documentation discusses &lt;a href=&quot;http://pytz.sourceforge.net/#problems-with-localtime&quot;&gt;these issues&lt;/a&gt; in greater detail.) This probably doesn&amp;rsquo;t matter for your blog, but it&amp;rsquo;s a problem if you over-bill or under-bill your customers by one hour, twice a year, every year. The solution to this problem is to use UTC in the code and use local time only when interacting with end users.</source>
          <target state="translated">Webサイトが1つのタイムゾーンでしか利用できない場合でも、データベースのUTCにデータを保存することをお勧めします。主な理由は夏時間（DST）です。多くの国では、DSTのシステムがあり、時計は春に前進し、秋に後退します。現地時間で作業している場合、移行が行われるときに年に2回エラーが発生する可能性があります。 （&lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytzの&lt;/a&gt;ドキュメントでは、&lt;a href=&quot;http://pytz.sourceforge.net/#problems-with-localtime&quot;&gt;これらの問題&lt;/a&gt;について詳細に説明しています。）これはおそらくブログでは問題ではありませんが、年に1回、年に2回、顧客に過剰請求または過少請求する場合は問題です。この問題の解決策は、コードでUTCを使用し、エンドユーザーと対話するときにのみローカル時間を使用することです。</target>
        </trans-unit>
        <trans-unit id="212225fac176022a07c0ae2acb00063a1ec1c7be" translate="yes" xml:space="preserve">
          <source>Even the parsing itself is quite fast. Most of the parsing happens via a single call to a single, short, regular expression.</source>
          <target state="translated">解析自体も非常に高速です。ほとんどの解析は、単一の短い正規表現の呼び出しで行われます。</target>
        </trans-unit>
        <trans-unit id="0e3d8f7c1e310b2e909ef932159834ac5ca6ae3a" translate="yes" xml:space="preserve">
          <source>Even though users may use strong passwords, attackers might be able to eavesdrop on their connections. Use &lt;a href=&quot;../security#security-recommendation-ssl&quot;&gt;HTTPS&lt;/a&gt; to avoid sending passwords (or any other sensitive data) over plain HTTP connections because they will be vulnerable to password sniffing.</source>
          <target state="translated">ユーザーが強力なパスワードを使用している場合でも、攻撃者は接続を盗聴できる可能性があります。&lt;a href=&quot;../security#security-recommendation-ssl&quot;&gt;HTTPS&lt;/a&gt;を使用して、パスワード（またはその他の機密データ）をプレーンHTTP接続経由で送信しないようにします。これは、パスワードの盗聴に対して脆弱であるためです。</target>
        </trans-unit>
        <trans-unit id="fbe337a7f388b3f15d78a8d0c1c5bcb514d31b24" translate="yes" xml:space="preserve">
          <source>Every &lt;code&gt;Field&lt;/code&gt; instance contains several attributes that allow introspecting its behavior. Use these attributes instead of &lt;code&gt;isinstance&lt;/code&gt; checks when you need to write code that depends on a field&amp;rsquo;s functionality. These attributes can be used together with the &lt;a href=&quot;meta#model-meta-field-api&quot;&gt;Model._meta API&lt;/a&gt; to narrow down a search for specific field types. Custom model fields should implement these flags.</source>
          <target state="translated">すべての &lt;code&gt;Field&lt;/code&gt; インスタンスには、その動作をイントロスペクトできるいくつかの属性が含まれています。フィールドの機能に依存するコードを記述する必要がある場合は、 &lt;code&gt;isinstance&lt;/code&gt; チェックの代わりにこれらの属性を使用します。これらの属性を&lt;a href=&quot;meta#model-meta-field-api&quot;&gt;Model._meta API&lt;/a&gt;と一緒に使用して、特定のフィールドタイプの検索を絞り込むことができます。カスタムモデルフィールドはこれらのフラグを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="8cab4213d5333e4700a03738c0ef52d1d3d03aff" translate="yes" xml:space="preserve">
          <source>Every &lt;code&gt;ModelForm&lt;/code&gt; also has a &lt;code&gt;save()&lt;/code&gt; method. This method creates and saves a database object from the data bound to the form. A subclass of &lt;code&gt;ModelForm&lt;/code&gt; can accept an existing model instance as the keyword argument &lt;code&gt;instance&lt;/code&gt;; if this is supplied, &lt;code&gt;save()&lt;/code&gt; will update that instance. If it&amp;rsquo;s not supplied, &lt;code&gt;save()&lt;/code&gt; will create a new instance of the specified model:</source>
          <target state="translated">すべての &lt;code&gt;ModelForm&lt;/code&gt; には、 &lt;code&gt;save()&lt;/code&gt; メソッドもあります。このメソッドは、フォームにバインドされたデータからデータベースオブジェクトを作成して保存します。 &lt;code&gt;ModelForm&lt;/code&gt; のサブクラスは、既存のモデルインスタンスをキーワード引数 &lt;code&gt;instance&lt;/code&gt; として受け入れることができます。これが指定されている場合、 &lt;code&gt;save()&lt;/code&gt; はそのインスタンスを更新します。指定されていない場合、 &lt;code&gt;save()&lt;/code&gt; は指定されたモデルの新しいインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="6e14299cc96f60aa1c07ca94a21853cb29fed03f" translate="yes" xml:space="preserve">
          <source>Every built in view which needs context data, such as for rendering a template (including &lt;code&gt;TemplateResponseMixin&lt;/code&gt; above), should call &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.ContextMixin.get_context_data&quot;&gt;&lt;code&gt;get_context_data()&lt;/code&gt;&lt;/a&gt; passing any data they want to ensure is in there as keyword arguments. &lt;code&gt;get_context_data()&lt;/code&gt; returns a dictionary; in &lt;code&gt;ContextMixin&lt;/code&gt; it returns its keyword arguments, but it is common to override this to add more members to the dictionary. You can also use the &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.ContextMixin.extra_context&quot;&gt;&lt;code&gt;extra_context&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">テンプレート（上記の &lt;code&gt;TemplateResponseMixin&lt;/code&gt; を含む）のレンダリングなど、コンテキストデータを必要とするすべての組み込みビューは、&lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.ContextMixin.get_context_data&quot;&gt; &lt;code&gt;get_context_data()&lt;/code&gt; &lt;/a&gt;を呼び出して、キーワード引数としてそこにあることを確認したいデータを渡します。 &lt;code&gt;get_context_data()&lt;/code&gt; は辞書を返します。で &lt;code&gt;ContextMixin&lt;/code&gt; それは、そのキーワード引数を返しますが、辞書に複数のメンバーを追加するには、このメソッドをオーバーライドするのが一般的です。&lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.ContextMixin.extra_context&quot;&gt; &lt;code&gt;extra_context&lt;/code&gt; &lt;/a&gt;属性を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="5abebf72cfdd05f18339a23f0931f3ed011cb582" translate="yes" xml:space="preserve">
          <source>Every built in view which returns a &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; will call the &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt;&lt;code&gt;render_to_response()&lt;/code&gt;&lt;/a&gt; method that &lt;code&gt;TemplateResponseMixin&lt;/code&gt; provides. Most of the time this will be called for you (for instance, it is called by the &lt;code&gt;get()&lt;/code&gt; method implemented by both &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt;); similarly, it&amp;rsquo;s unlikely that you&amp;rsquo;ll need to override it, although if you want your response to return something not rendered via a Django template then you&amp;rsquo;ll want to do it. For an example of this, see the &lt;a href=&quot;#jsonresponsemixin-example&quot;&gt;JSONResponseMixin example&lt;/a&gt;.</source>
          <target state="translated">すべては返すビューに建て&lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; を&lt;/a&gt;呼び出します&lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt; &lt;code&gt;render_to_response()&lt;/code&gt; &lt;/a&gt;というメソッド &lt;code&gt;TemplateResponseMixin&lt;/code&gt; を提供します。ほとんどの場合、これは呼び出されます（たとえば、&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; の&lt;/a&gt;両方で実装されている &lt;code&gt;get()&lt;/code&gt; メソッドによって呼び出されます）。同様に、オーバーライドが必要になることはほとんどありませんが、Djangoテンプレートを介してレンダリングされていないものを応答で返したい場合は、それを実行する必要があります。この例については、&lt;a href=&quot;#jsonresponsemixin-example&quot;&gt;JSONResponseMixinの例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="838377ef62b2a13f1fbf0182fad7718968983771" translate="yes" xml:space="preserve">
          <source>Every context contains &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;None&lt;/code&gt;. As you would expect, these variables resolve to the corresponding Python objects.</source>
          <target state="translated">すべてのコンテキストには、 &lt;code&gt;True&lt;/code&gt; 、 &lt;code&gt;False&lt;/code&gt; 、および &lt;code&gt;None&lt;/code&gt; が含まれています。ご想像のとおり、これらの変数は対応するPythonオブジェクトに解決されます。</target>
        </trans-unit>
        <trans-unit id="cc165a96655702c427116e9a4000f936b0928cff" translate="yes" xml:space="preserve">
          <source>Every field may not have the same relevance in a query, so you can set weights of various vectors before you combine them:</source>
          <target state="translated">すべてのフィールドがクエリの中で同じ関連性を持っているとは限らないので、結合する前に様々なベクトルの重みを設定することができます。</target>
        </trans-unit>
        <trans-unit id="814f57a7e3d59960cd808a38ef7f0be36d102202" translate="yes" xml:space="preserve">
          <source>Every form that uses this field will have these methods run before anything else can be done with the field&amp;rsquo;s data. This is cleaning that is specific to this type of field, regardless of how it is subsequently used.</source>
          <target state="translated">このフィールドを使用するすべてのフォームでは、フィールドのデータを使用して他の処理を実行する前に、これらのメソッドが実行されます。これは、その後の使用方法に関係なく、このタイプのフィールドに固有のクリーニングです。</target>
        </trans-unit>
        <trans-unit id="febded2a5a77188a733c6e2df64beb637d1d5f06" translate="yes" xml:space="preserve">
          <source>Every point of the other geometry is a point of this geometry.</source>
          <target state="translated">他の幾何学の点はすべてこの幾何学の点です。</target>
        </trans-unit>
        <trans-unit id="d4fd9230a184529361a8aa2b1f74ae7d996efd91" translate="yes" xml:space="preserve">
          <source>Every test case in a &lt;code&gt;django.test.*TestCase&lt;/code&gt; instance has access to an instance of a Django test client. This client can be accessed as &lt;code&gt;self.client&lt;/code&gt;. This client is recreated for each test, so you don&amp;rsquo;t have to worry about state (such as cookies) carrying over from one test to another.</source>
          <target state="translated">&lt;code&gt;django.test.*TestCase&lt;/code&gt; インスタンスのすべてのテストケースは、Djangoテストクライアントのインスタンスにアクセスできます。このクライアントには、 &lt;code&gt;self.client&lt;/code&gt; としてアクセスできます。このクライアントはテストごとに再作成されるため、テスト間での状態（Cookieなど）の引き継ぎについて心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="84522da20960008d9269f89064583fa5016e208a" translate="yes" xml:space="preserve">
          <source>Everything should pass. If it doesn&amp;rsquo;t, make sure you correctly added the function to the correct file.</source>
          <target state="translated">すべてが合格するはずです。表示されない場合は、関数を正しいファイルに正しく追加したことを確認してください。</target>
        </trans-unit>
        <trans-unit id="8ded99c8d5128f39a1c73fd90b9c2d8406aebbdc" translate="yes" xml:space="preserve">
          <source>Everything you need to know about Django.</source>
          <target state="translated">Django について知っておくべきことをすべて紹介しています。</target>
        </trans-unit>
        <trans-unit id="9295771949fc387c8fcf92dd81a4a7538ac618f8" translate="yes" xml:space="preserve">
          <source>Exact match is implied here:</source>
          <target state="translated">ここでは完全に一致していることが暗示されています。</target>
        </trans-unit>
        <trans-unit id="37e84456a4b965872015a2d820a64fe49edfcfc5" translate="yes" xml:space="preserve">
          <source>Exact match. If the value provided for comparison is &lt;code&gt;None&lt;/code&gt;, it will be interpreted as an SQL &lt;code&gt;NULL&lt;/code&gt; (see &lt;a href=&quot;#std:fieldlookup-isnull&quot;&gt;&lt;code&gt;isnull&lt;/code&gt;&lt;/a&gt; for more details).</source>
          <target state="translated">完全に一致。比較のために提供された値が &lt;code&gt;None&lt;/code&gt; の場合、SQL &lt;code&gt;NULL&lt;/code&gt; として解釈されます（詳細については、&lt;a href=&quot;#std:fieldlookup-isnull&quot;&gt; &lt;code&gt;isnull&lt;/code&gt; &lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="ee3bc6da95e46e47e40c64bd6f76e0cb531a9597" translate="yes" xml:space="preserve">
          <source>Example (Unix Bash shell):</source>
          <target state="translated">例(UnixのBashシェル)。</target>
        </trans-unit>
        <trans-unit id="830e9bb39dc11d651c286095d97e45f79c2b0e49" translate="yes" xml:space="preserve">
          <source>Example (Windows shell):</source>
          <target state="translated">例(Windowsシェル)。</target>
        </trans-unit>
        <trans-unit id="718077cd1b2df7e94503d45c26299c5d0631a6ab" translate="yes" xml:space="preserve">
          <source>Example URL patterns:</source>
          <target state="translated">URLパターンの例。</target>
        </trans-unit>
        <trans-unit id="4ddfbe0d0e205cc34c63998eb2f3530c73357994" translate="yes" xml:space="preserve">
          <source>Example ini configuration file usage:</source>
          <target state="translated">ini 設定ファイルの使用例。</target>
        </trans-unit>
        <trans-unit id="e55c1df3f1be39c6d4a0ad98f09af1bb75f240e4" translate="yes" xml:space="preserve">
          <source>Example ini configuration file:</source>
          <target state="translated">ini 設定ファイルの例。</target>
        </trans-unit>
        <trans-unit id="68446ab28449935e5edad544cffc5513c9ecfec5" translate="yes" xml:space="preserve">
          <source>Example of a full DSN string:</source>
          <target state="translated">完全なDSN文字列の例。</target>
        </trans-unit>
        <trans-unit id="544998f7dc15d439cd9df97040aa14b1d77d294a" translate="yes" xml:space="preserve">
          <source>Example of an Easy Connect string:</source>
          <target state="translated">イージーコネクトの文字列の例。</target>
        </trans-unit>
        <trans-unit id="9286acafb078f79b84d482451216c995453f2280" translate="yes" xml:space="preserve">
          <source>Example output</source>
          <target state="translated">出力例</target>
        </trans-unit>
        <trans-unit id="44bccea698ca2be671739b7a3fcd4d079ab17ab8" translate="yes" xml:space="preserve">
          <source>Example purposes only!</source>
          <target state="translated">例示目的のみ!</target>
        </trans-unit>
        <trans-unit id="cfab20a31ea6ebe2113f2ab4004ec8c0183bc431" translate="yes" xml:space="preserve">
          <source>Example requests:</source>
          <target state="translated">リクエスト例。</target>
        </trans-unit>
        <trans-unit id="27bc36e0446b72c6d8b0d1c7963a0c60bb412de6" translate="yes" xml:space="preserve">
          <source>Example to retrieve entries in the second quarter (April 1 to June 30):</source>
          <target state="translated">第2四半期(4月1日~6月30日)のエントリーを取得する例</target>
        </trans-unit>
        <trans-unit id="1ae307cf1c7af477bc7be93199f6087908b13cc0" translate="yes" xml:space="preserve">
          <source>Example tuple for &lt;code&gt;en_IN&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;en_IN&lt;/code&gt; のタプルの例：</target>
        </trans-unit>
        <trans-unit id="861245b8779c3c0a240081e66f72046983ca7d16" translate="yes" xml:space="preserve">
          <source>Example usage</source>
          <target state="translated">使用例</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">使用例。</target>
        </trans-unit>
        <trans-unit id="bd6bf677fc2c19ecd5c9a4987ff244376dcf1f86" translate="yes" xml:space="preserve">
          <source>Example values for &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.priority&quot;&gt;&lt;code&gt;priority&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;0.4&lt;/code&gt;, &lt;code&gt;1.0&lt;/code&gt;. The default priority of a page is &lt;code&gt;0.5&lt;/code&gt;. See the &lt;a href=&quot;https://www.sitemaps.org/protocol.html#prioritydef&quot;&gt;sitemaps.org documentation&lt;/a&gt; for more.</source>
          <target state="translated">例は、の値は&lt;a href=&quot;#django.contrib.sitemaps.Sitemap.priority&quot;&gt; &lt;code&gt;priority&lt;/code&gt; &lt;/a&gt;： &lt;code&gt;0.4&lt;/code&gt; 、 &lt;code&gt;1.0&lt;/code&gt; 。ページのデフォルトの優先度は &lt;code&gt;0.5&lt;/code&gt; です。詳細については、&lt;a href=&quot;https://www.sitemaps.org/protocol.html#prioritydef&quot;&gt;sitemaps.orgのドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="4abec658fdfd9e9a464f07db749b7dcf5b090fff" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;/minfo/music/bands/the_beatles/?print=true&quot;&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;&quot;/minfo/music/bands/the_beatles/?print=true&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e0e421429dc643e0f735f688ff2d3ed31efc05c5" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;/music/bands/the_beatles/&quot;&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;&quot;/music/bands/the_beatles/&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3048949b449ad0bad266e1c13cd317d901b918eb" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;/music/bands/the_beatles/?print=true&quot;&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;&quot;/music/bands/the_beatles/?print=true&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1448bb2dcf37d023890aa1c988027f69aa5be549" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;/static/&quot;&lt;/code&gt; or &lt;code&gt;&quot;http://static.example.com/&quot;&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;&quot;/static/&quot;&lt;/code&gt; または &lt;code&gt;&quot;http://static.example.com/&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7a158e625f2490c15b070e880c2742cac84d61ba" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;/var/www/example.com/media/&quot;&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;&quot;/var/www/example.com/media/&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="674ecfac8279532bba06cb9b28401fcad49da205" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;/var/www/example.com/static/&quot;&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;&quot;/var/www/example.com/static/&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="901b1775848a8c936123642ddfbc15cb328f22d8" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;127.0.0.1:8000&quot;&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;&quot;127.0.0.1:8000&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6637efee609c9b823f9e22e77caa9c24efbce712" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;http://media.example.com/&quot;&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;&quot;http://media.example.com/&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="66fd61cbedb1c0ed762d4fa6da3ef9a09345b041" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;'fav_color' in request.session&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;'fav_color' in request.session&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2232e75e309ae667ab6470ec0fd2380b7137dd39" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;['foo.html', 'path/to/bar.html']&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;['foo.html', 'path/to/bar.html']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="26a5d71ed4ad77f4763a621ca8e293ce771f5765" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;del request.session['fav_color']&lt;/code&gt;. This raises &lt;code&gt;KeyError&lt;/code&gt; if the given &lt;code&gt;key&lt;/code&gt; isn&amp;rsquo;t already in the session.</source>
          <target state="translated">例： &lt;code&gt;del request.session['fav_color']&lt;/code&gt; 。指定された &lt;code&gt;key&lt;/code&gt; がまだセッションにない場合は、 &lt;code&gt;KeyError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="1afe81d1569194467a9e77bc63ab878055b15243" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;fav_color = request.session.get('fav_color', 'red')&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;fav_color = request.session.get('fav_color', 'red')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c6b75cd9eec29e2fa11559ca64410670d455e31f" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;fav_color = request.session.pop('fav_color', 'blue')&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;fav_color = request.session.pop('fav_color', 'blue')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ad520d77a5091665d30d5ad78a18889b6fa202da" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;fav_color = request.session['fav_color']&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;fav_color = request.session['fav_color']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a743ca139173ed672e946091b7fdc945370a9ef8" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;request.session['fav_color'] = 'blue'&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;request.session['fav_color'] = 'blue'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="59f981e918510438b42c8cc8b1ee243eefe83ad2" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;{'foo': 123}&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;{'foo': 123}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="769914c627afb45406c3bf3ee2b71d5c808b0276" translate="yes" xml:space="preserve">
          <source>Examples (those after the first will only work on PostgreSQL):</source>
          <target state="translated">例(最初以降のものはPostgreSQLでのみ動作します)。</target>
        </trans-unit>
        <trans-unit id="80f00b6a8f7e561eaf3206a451011d467b1bef0b" translate="yes" xml:space="preserve">
          <source>Examples (when &amp;lsquo;now&amp;rsquo; is 17 Feb 2007 16:30:00):</source>
          <target state="translated">例（ 'now'が2007年2月17日16:30:00の場合）：</target>
        </trans-unit>
        <trans-unit id="63d3c77fab43af705105a71ea0d3c62c1a4fec72" translate="yes" xml:space="preserve">
          <source>Examples (when &amp;lsquo;today&amp;rsquo; is 17 Feb 2007):</source>
          <target state="translated">例（「今日」が2007年2月17日の場合）：</target>
        </trans-unit>
        <trans-unit id="2676bb86273e80946e94a560787333f069255095" translate="yes" xml:space="preserve">
          <source>Examples are the same as for &lt;a href=&quot;#django.contrib.postgres.aggregates.ArrayAgg.ordering&quot;&gt;&lt;code&gt;ArrayAgg.ordering&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">例は&lt;a href=&quot;#django.contrib.postgres.aggregates.ArrayAgg.ordering&quot;&gt; &lt;code&gt;ArrayAgg.ordering&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="5d679a1bfd09bffa49249ebfc0da6c5751df2b5d" translate="yes" xml:space="preserve">
          <source>Examples of each of these methods are provided below.</source>
          <target state="translated">以下に、それぞれの方法の例を示す。</target>
        </trans-unit>
        <trans-unit id="e552f4ff74f5c9b402c0ac5a84814156fb03c7f3" translate="yes" xml:space="preserve">
          <source>Examples of how these are combined into editing views can be found at the documentation on &lt;a href=&quot;generic-editing&quot;&gt;Generic editing views&lt;/a&gt;.</source>
          <target state="translated">これらを編集ビューに組み合わせる方法の例は、&lt;a href=&quot;generic-editing&quot;&gt;一般的な編集ビューの&lt;/a&gt;ドキュメントにあります。</target>
        </trans-unit>
        <trans-unit id="af9f7f41e63f57592e364cfc474ca225a505321a" translate="yes" xml:space="preserve">
          <source>Examples of model relationship API usage</source>
          <target state="translated">モデルリレーションシップAPIの使用例</target>
        </trans-unit>
        <trans-unit id="77e71bb9ca949ae82bf5265846d018ec415f78b3" translate="yes" xml:space="preserve">
          <source>Examples of using different ports and addresses</source>
          <target state="translated">ポートとアドレスを使い分ける例</target>
        </trans-unit>
        <trans-unit id="573199b07f4a7e07cec7a264bef08ffde99fe40a" translate="yes" xml:space="preserve">
          <source>Examples of using the different keys when creating rasters can be found in the documentation of the corresponding attributes and methods of the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt;&lt;code&gt;GDALRaster&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand&quot;&gt;&lt;code&gt;GDALBand&lt;/code&gt;&lt;/a&gt; classes.</source>
          <target state="translated">ラスタを作成するときに異なる鍵を使用する例は、対応する属性および方法のマニュアルに見出すことができる&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt; &lt;code&gt;GDALRaster&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#django.contrib.gis.gdal.GDALBand&quot;&gt; &lt;code&gt;GDALBand&lt;/code&gt; &lt;/a&gt;クラス。</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="130647020df08e0c6d075ab91d12bbeaf0d9c689" translate="yes" xml:space="preserve">
          <source>Exception class indicating a problem while executing a management command.</source>
          <target state="translated">管理コマンド実行中の問題を示す例外クラス。</target>
        </trans-unit>
        <trans-unit id="b4b0dfe7027c1d349ba13a7e79558e44ec341bd8" translate="yes" xml:space="preserve">
          <source>Exception handling</source>
          <target state="translated">例外処理</target>
        </trans-unit>
        <trans-unit id="cd3dfbe79fda3a9d92de67b1bd4f1dc9f60ab723" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">Exceptions</target>
        </trans-unit>
        <trans-unit id="979977b0dc6898f6b99545124ffdccce5f51ee4c" translate="yes" xml:space="preserve">
          <source>Exceptions provided by the &lt;code&gt;django.test&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;django.test&lt;/code&gt; パッケージが提供する例外。</target>
        </trans-unit>
        <trans-unit id="637c2d4ceffcb049dfd98479442ba6e5e51bc245" translate="yes" xml:space="preserve">
          <source>Excludes loading the fixtures from the given applications and/or models (in the form of &lt;code&gt;app_label&lt;/code&gt; or &lt;code&gt;app_label.ModelName&lt;/code&gt;). Use the option multiple times to exclude more than one app or model.</source>
          <target state="translated">特定のアプリケーションまたはモデル（あるいはその &lt;code&gt;app_label.ModelName&lt;/code&gt; ）からのフィクスチャのロードを &lt;code&gt;app_label&lt;/code&gt; ます（app_labelまたはapp_label.ModelNameの形式）。このオプションを複数回使用して、複数のアプリまたはモデルを除外します。</target>
        </trans-unit>
        <trans-unit id="e224f3054a528b9a8ad37aa70ee3bafba104e86e" translate="yes" xml:space="preserve">
          <source>Excludes tests &lt;a href=&quot;../topics/testing/tools#topics-tagging-tests&quot;&gt;marked with the specified tags&lt;/a&gt;. May be specified multiple times and combined with &lt;a href=&quot;#cmdoption-test-tag&quot;&gt;&lt;code&gt;test --tag&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../topics/testing/tools#topics-tagging-tests&quot;&gt;指定されたタグでマークされた&lt;/a&gt;テストを除外します。複数回指定し、&lt;a href=&quot;#cmdoption-test-tag&quot;&gt; &lt;code&gt;test --tag&lt;/code&gt; &lt;/a&gt;と組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="0a7127cf360079d11d23a48c161b510f1596728e" translate="yes" xml:space="preserve">
          <source>Excluding a related item works as you would expect, too (although the SQL involved is a little complex):</source>
          <target state="translated">関連する項目を除外しても、期待通りに動作します(関連するSQLは少し複雑ですが)。</target>
        </trans-unit>
        <trans-unit id="f9e9d0c5641e5220429dd5b410450d6a9a678599" translate="yes" xml:space="preserve">
          <source>Executes the SQL statement passed in, with parameters if supplied. This is a wrapper around the normal database cursors that allows capture of the SQL to a &lt;code&gt;.sql&lt;/code&gt; file if the user wishes.</source>
          <target state="translated">渡されたSQLステートメントを、パラメーターが指定されている場合はそれを使用して実行します。これは通常のデータベースカーソルのラッパーであり、ユーザーが希望する場合、SQLを &lt;code&gt;.sql&lt;/code&gt; ファイルにキャプチャできます。</target>
        </trans-unit>
        <trans-unit id="89a2df8a7a14bd458b9ce8bd658118c5a982cc19" translate="yes" xml:space="preserve">
          <source>Executing custom SQL</source>
          <target state="translated">カスタムSQLの実行</target>
        </trans-unit>
        <trans-unit id="00ee02034434ef9dd4163fe8af361d4c52e32055" translate="yes" xml:space="preserve">
          <source>Executing custom SQL directly</source>
          <target state="translated">カスタムSQLを直接実行する</target>
        </trans-unit>
        <trans-unit id="6052e7f00cb0087825a4bffdb83956e8eb1e628c" translate="yes" xml:space="preserve">
          <source>Executing database queries with the ORM at import time in models modules will also trigger this exception. The ORM cannot function properly until all models are available.</source>
          <target state="translated">モデルモジュールのインポート時にORMでデータベースクエリを実行すると、この例外も発生します。すべてのモデルが利用可能になるまで、ORMは正常に機能しません。</target>
        </trans-unit>
        <trans-unit id="b2beefb2d0c22d3314ba644a1b0d378cbe4fa9b0" translate="yes" xml:space="preserve">
          <source>Execution of the model mapping will cease upon the first error encountered. The default value (&lt;code&gt;False&lt;/code&gt;) behavior is to attempt to continue.</source>
          <target state="translated">モデルマッピングの実行は、最初に発生したエラーで停止します。デフォルト値（ &lt;code&gt;False&lt;/code&gt; ）の動作は続行を試みることです。</target>
        </trans-unit>
        <trans-unit id="945e7b04d14c6db74d71e5bc18f1c281db5f3f58" translate="yes" xml:space="preserve">
          <source>Expanding the accepted referers beyond the current host or cookie domain can be done with the &lt;a href=&quot;settings#std:setting-CSRF_TRUSTED_ORIGINS&quot;&gt;&lt;code&gt;CSRF_TRUSTED_ORIGINS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">受け入れたリファラーを現在のホストまたはCookieドメインを超えて拡張するには、&lt;a href=&quot;settings#std:setting-CSRF_TRUSTED_ORIGINS&quot;&gt; &lt;code&gt;CSRF_TRUSTED_ORIGINS&lt;/code&gt; &lt;/a&gt;設定を使用できます。</target>
        </trans-unit>
        <trans-unit id="d630fe6c0dbe56806d5eee2d891d3f4097da07d4" translate="yes" xml:space="preserve">
          <source>Expects data in the format &lt;code&gt;&quot;DD HH:MM:SS.uuuuuu&quot;&lt;/code&gt; or as specified by ISO 8601 (e.g. &lt;code&gt;P4DT1H15M20S&lt;/code&gt; which is equivalent to &lt;code&gt;4 1:15:20&lt;/code&gt;) or PostgreSQL&amp;rsquo;s day-time interval format (e.g. &lt;code&gt;3 days 04:05:06&lt;/code&gt;).</source>
          <target state="translated">フォーマットで見込んデータは &lt;code&gt;&quot;DD HH:MM:SS.uuuuuu&quot;&lt;/code&gt; またはISO 8601で指定された（例えば &lt;code&gt;P4DT1H15M20S&lt;/code&gt; に相当する &lt;code&gt;4 1:15:20&lt;/code&gt; ）またはPostgreSQLの日、時間間隔のフォーマット（例えば &lt;code&gt;3 days 04:05:06&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="af8bbd2db5efc88122a3bccee780eb110ecf6f4f" translate="yes" xml:space="preserve">
          <source>Expects data in the format &lt;code&gt;&quot;DD HH:MM:SS.uuuuuu&quot;&lt;/code&gt;, &lt;code&gt;&quot;DD HH:MM:SS,uuuuuu&quot;&lt;/code&gt;, or as specified by ISO 8601 (e.g. &lt;code&gt;P4DT1H15M20S&lt;/code&gt; which is equivalent to &lt;code&gt;4 1:15:20&lt;/code&gt;) or PostgreSQL&amp;rsquo;s day-time interval format (e.g. &lt;code&gt;3 days 04:05:06&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&quot;DD HH:MM:SS.uuuuuu&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;DD HH:MM:SS,uuuuuu&quot;&lt;/code&gt; の形式、またはISO 8601（ &lt;code&gt;4 1:15:20&lt;/code&gt; に相当するP4DT1H15M20Sなど）またはPostgreSQLの日で指定された &lt;code&gt;P4DT1H15M20S&lt;/code&gt; が必要です。-時間間隔形式（例： &lt;code&gt;3 days 04:05:06&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="02badd5c782845228bccae7b87567640893eea55" translate="yes" xml:space="preserve">
          <source>Expiration of messages</source>
          <target state="translated">メッセージの有効期限</target>
        </trans-unit>
        <trans-unit id="825e83f1ae786ec7612f738560afd76d510d34f2" translate="yes" xml:space="preserve">
          <source>Expiration policies for these cookies are not followed. If you want a cookie to expire, either delete it manually or create a new &lt;code&gt;Client&lt;/code&gt; instance (which will effectively delete all cookies).</source>
          <target state="translated">これらのCookieの有効期限ポリシーは守られていません。Cookieを期限切れにする場合は、手動で削除するか、新しい &lt;code&gt;Client&lt;/code&gt; インスタンスを作成します（これにより、すべてのCookieが効果的に削除されます）。</target>
        </trans-unit>
        <trans-unit id="96c25ea7982a1802b1f2648ff749f6154cf0fd3e" translate="yes" xml:space="preserve">
          <source>Expired sessions are not available to a user, however, they may still be stored in the database until the &lt;a href=&quot;../../ref/django-admin#django-admin-clearsessions&quot;&gt;&lt;code&gt;clearsessions&lt;/code&gt;&lt;/a&gt; management command is run.</source>
          <target state="translated">期限切れのセッションはユーザーが使用できませんが、&lt;a href=&quot;../../ref/django-admin#django-admin-clearsessions&quot;&gt; &lt;code&gt;clearsessions&lt;/code&gt; &lt;/a&gt;管理コマンドが実行されるまで、データベースに保存されている可能性があります。</target>
        </trans-unit>
        <trans-unit id="8b0e56471ca8bdbedccf8f159a012f178e4bafee" translate="yes" xml:space="preserve">
          <source>Explains how to structure and write database migrations for different scenarios you might encounter.</source>
          <target state="translated">遭遇する可能性のあるさまざまなシナリオに対応したデータベース移行の構造と書き方を説明します。</target>
        </trans-unit>
        <trans-unit id="d94592778e731505956708d49b7db2ad5a88dd27" translate="yes" xml:space="preserve">
          <source>Explicitly importing each model rather than using &lt;code&gt;from .models import *&lt;/code&gt; has the advantages of not cluttering the namespace, making code more readable, and keeping code analysis tools useful.</source>
          <target state="translated">&lt;code&gt;from .models import *&lt;/code&gt; を使用するのではなく、各モデルを明示的にインポートすると、名前空間が乱雑にならず、コードが読みやすくなり、コード分析ツールが便利になります。</target>
        </trans-unit>
        <trans-unit id="6fb817f9ee738b2a8b27e7516ee544fd6f8dba04" translate="yes" xml:space="preserve">
          <source>Explicitly mark a string as safe for (HTML) output purposes. The returned object can be used everywhere a string is appropriate.</source>
          <target state="translated">文字列を (HTML)出力目的で安全なものとして明示的にマークします。返されたオブジェクトは、文字列が適切な場所であればどこでも使うことができます。</target>
        </trans-unit>
        <trans-unit id="874f563ca10bc56af8814bb8cfc17a69095a4254" translate="yes" xml:space="preserve">
          <source>Explicitly passing the timezone to the &lt;code&gt;Extract&lt;/code&gt; function behaves in the same way, and takes priority over an active timezone:</source>
          <target state="translated">明示的にタイムゾーンを &lt;code&gt;Extract&lt;/code&gt; 関数に渡すと、同じように動作し、アクティブなタイムゾーンよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="9accba3377caa879d2411f253c32d40f50c05c64" translate="yes" xml:space="preserve">
          <source>Explicitly setting the active language</source>
          <target state="translated">アクティブな言語を明示的に設定する</target>
        </trans-unit>
        <trans-unit id="f4f5831bca5be105fc675670edb3ed008d4f5aa6" translate="yes" xml:space="preserve">
          <source>Explicitly specifying auto-primary-key values</source>
          <target state="translated">自動プライマリキーの値を明示的に指定する</target>
        </trans-unit>
        <trans-unit id="2a388f76aa5ea04c1d289a276ec7b4fa562a89ee" translate="yes" xml:space="preserve">
          <source>Explicitly specifying auto-primary-key values is mostly useful for bulk-saving objects, when you&amp;rsquo;re confident you won&amp;rsquo;t have primary-key collision.</source>
          <target state="translated">自動主キーの値を明示的に指定することは、主キーの衝突がないと確信している場合に、オブジェクトを一括保存する場合に最も役立ちます。</target>
        </trans-unit>
        <trans-unit id="0581a134daecddc957761672c1987cd91186f2a4" translate="yes" xml:space="preserve">
          <source>Explore the ORM before using raw SQL!</source>
          <target state="translated">生のSQLを使う前にORMを探る!</target>
        </trans-unit>
        <trans-unit id="816a1c591197b5d90919fa323137ee77dfdedebb" translate="yes" xml:space="preserve">
          <source>Explore the free admin functionality</source>
          <target state="translated">無料の管理機能を探る</target>
        </trans-unit>
        <trans-unit id="de31fd22a0f8e99b352dbde9fc9b3c0a8b00ac76" translate="yes" xml:space="preserve">
          <source>Exposing multiple databases in Django&amp;rsquo;s admin interface</source>
          <target state="translated">Djangoの管理インターフェースで複数のデータベースを公開する</target>
        </trans-unit>
        <trans-unit id="dc348b7addd2c3af4465f15822bcf88a0780f26c" translate="yes" xml:space="preserve">
          <source>Expression API</source>
          <target state="translated">表現API</target>
        </trans-unit>
        <trans-unit id="3a741732bbc54a44141f91d238840f2ab0bb786b" translate="yes" xml:space="preserve">
          <source>Extending Django&amp;rsquo;s default &lt;code&gt;User&lt;/code&gt;</source>
          <target state="translated">Djangoのデフォルト &lt;code&gt;User&lt;/code&gt; 拡張</target>
        </trans-unit>
        <trans-unit id="18756ebcfdb41771f848615cb96b42c475f62264" translate="yes" xml:space="preserve">
          <source>Extending an overridden template</source>
          <target state="translated">オーバーライドされたテンプレートを拡張する</target>
        </trans-unit>
        <trans-unit id="8cd7b3f9fec9e30658f341d79e32760ffc714990" translate="yes" xml:space="preserve">
          <source>Extending database-backed session engines</source>
          <target state="translated">データベースをバックにしたセッションエンジンの拡張</target>
        </trans-unit>
        <trans-unit id="ededa0d12d32cb3f876751175473cd30889d24bb" translate="yes" xml:space="preserve">
          <source>Extending generic views</source>
          <target state="translated">ジェネリックビューの拡張</target>
        </trans-unit>
        <trans-unit id="b816961d84a34706e850fb49a6d02a03b3e40ac9" translate="yes" xml:space="preserve">
          <source>Extending the existing &lt;code&gt;User&lt;/code&gt; model</source>
          <target state="translated">既存の &lt;code&gt;User&lt;/code&gt; モデルの拡張</target>
        </trans-unit>
        <trans-unit id="9327a207b1aa9ff41fc53fada2bdafbfd0dabaf1" translate="yes" xml:space="preserve">
          <source>Extensions to Django&amp;rsquo;s ORM for querying and manipulating spatial data.</source>
          <target state="translated">空間データのクエリと操作のためのDjangoのORMの拡張。</target>
        </trans-unit>
        <trans-unit id="dae651c4da4bb405bf79d80b0eb4ab583a7ba230" translate="yes" xml:space="preserve">
          <source>Extent (boundary values) of the raster source, as a 4-tuple &lt;code&gt;(xmin, ymin, xmax, ymax)&lt;/code&gt; in the spatial reference system of the source.</source>
          <target state="translated">ソースの空間参照系の4タプル &lt;code&gt;(xmin, ymin, xmax, ymax)&lt;/code&gt; としてのラスターソースの範囲（境界値）。</target>
        </trans-unit>
        <trans-unit id="ad951d5067b4277d0ccfa1b48de4e084d9986632" translate="yes" xml:space="preserve">
          <source>External packages</source>
          <target state="translated">外部パッケージ</target>
        </trans-unit>
        <trans-unit id="1afc103e2a5f0f4caa7ca899f5745dcd5f729da1" translate="yes" xml:space="preserve">
          <source>Extra &amp;ldquo;help&amp;rdquo; text to be displayed with the form widget. It&amp;rsquo;s useful for documentation even if your field isn&amp;rsquo;t used on a form.</source>
          <target state="translated">フォームウィジェットで表示される追加の「ヘルプ」テキスト。フィールドがフォームで使用されていない場合でも、ドキュメントに役立ちます。</target>
        </trans-unit>
        <trans-unit id="413d7f50b095c5f333be42cec2f2b2facaf1d4fd" translate="yes" xml:space="preserve">
          <source>Extra fields on many-to-many relationships</source>
          <target state="translated">多対多のリレーションシップの追加フィールド</target>
        </trans-unit>
        <trans-unit id="c94217b7743f4d934ed32a5947bdaa5ccfdc2f38" translate="yes" xml:space="preserve">
          <source>Extra instance methods</source>
          <target state="translated">追加のインスタンスメソッド</target>
        </trans-unit>
        <trans-unit id="2bc192fff945387981281bee55249580a3cb8ac8" translate="yes" xml:space="preserve">
          <source>Extra keyword arguments will be stored for &lt;a href=&quot;#custom-feed-generators&quot;&gt;custom feed generators&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#custom-feed-generators&quot;&gt;カスタムフィードジェネレーター&lt;/a&gt;用に追加のキーワード引数が保存されます。</target>
        </trans-unit>
        <trans-unit id="1de60cebc8b1c2a913565910ef4c0681de5f5f09" translate="yes" xml:space="preserve">
          <source>Extra niceties</source>
          <target state="translated">余計なお世話</target>
        </trans-unit>
        <trans-unit id="18e0a564566ba2e992d00abe4bc3f66763d44ffd" translate="yes" xml:space="preserve">
          <source>Extra parameters to pass to the cache backend. Available parameters vary depending on your cache backend.</source>
          <target state="translated">キャッシュバックエンドに渡す追加のパラメータ。利用可能なパラメータはキャッシュバックエンドによって異なります。</target>
        </trans-unit>
        <trans-unit id="7c3df0ba9527c8c878a3bebf0f957c9aa10bdd2e" translate="yes" xml:space="preserve">
          <source>Extra parameters to pass to the template backend. Available parameters vary depending on the template backend. See &lt;a href=&quot;../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../topics/templates#django.template.backends.jinja2.Jinja2&quot;&gt;&lt;code&gt;Jinja2&lt;/code&gt;&lt;/a&gt; for the options of the built-in backends.</source>
          <target state="translated">テンプレートバックエンドに渡す追加のパラメーター。使用可能なパラメーターは、テンプレートバックエンドによって異なります。参照&lt;a href=&quot;../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../topics/templates#django.template.backends.jinja2.Jinja2&quot;&gt; &lt;code&gt;Jinja2&lt;/code&gt; の&lt;/a&gt;組み込みのバックエンドのオプションのために。</target>
        </trans-unit>
        <trans-unit id="bfa77cda43c1228e4bba903dc9f4d09a520cdc91" translate="yes" xml:space="preserve">
          <source>Extra parameters to use when connecting to the database. Available parameters vary depending on your database backend.</source>
          <target state="translated">データベースに接続する際に使用する追加のパラメータ。利用可能なパラメータはデータベースのバックエンドによって異なります。</target>
        </trans-unit>
        <trans-unit id="06f7ef32cde32c6af7e519db64658b977f7290ac" translate="yes" xml:space="preserve">
          <source>Extra permissions to enter into the permissions table when creating this object. Add, change, delete, and view permissions are automatically created for each model. This example specifies an extra permission, &lt;code&gt;can_deliver_pizzas&lt;/code&gt;:</source>
          <target state="translated">このオブジェクトの作成時に権限テーブルに入力する追加の権限。追加、変更、削除、および表示の権限は、モデルごとに自動的に作成されます。この例では、追加の権限 &lt;code&gt;can_deliver_pizzas&lt;/code&gt; を指定しています。</target>
        </trans-unit>
        <trans-unit id="2b6d70cb8317da99e429494a2ef7ef0755767b37" translate="yes" xml:space="preserve">
          <source>Extra tags are added before the default tag for that level and are space separated.</source>
          <target state="translated">追加のタグは、そのレベルの既定のタグの前に追加され、スペースで区切られます。</target>
        </trans-unit>
        <trans-unit id="7602339dd97389b55ed253c20219c34578dbdfde" translate="yes" xml:space="preserve">
          <source>Extracts a component of a date as a number.</source>
          <target state="translated">日付の構成要素を数値として抽出します。</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="b45dfb8afe0c5e5bb27f803732560474bc45d849" translate="yes" xml:space="preserve">
          <source>Failing silently when the message framework is disabled</source>
          <target state="translated">メッセージフレームワークが無効になっているときに無言で失敗する</target>
        </trans-unit>
        <trans-unit id="47c2e227ef9914d7b093af5d1a2cd029c8ab17ac" translate="yes" xml:space="preserve">
          <source>Failing that, it looks at the &lt;code&gt;Accept-Language&lt;/code&gt; HTTP header. This header is sent by your browser and tells the server which language(s) you prefer, in order by priority. Django tries each language in the header until it finds one with available translations.</source>
          <target state="translated">それが失敗すると、 &lt;code&gt;Accept-Language&lt;/code&gt; HTTPヘッダーを調べます。このヘッダーはブラウザから送信され、優先順位の高い順に、使用する言語をサーバーに通知します。Djangoは、利用可能な翻訳がある言語が見つかるまで、ヘッダー内の各言語を試します。</target>
        </trans-unit>
        <trans-unit id="b7709fb038886d0057fcdcfbfa7447b5510c88d1" translate="yes" xml:space="preserve">
          <source>Failing that, it looks for a cookie.</source>
          <target state="translated">失敗したら、クッキーを探す。</target>
        </trans-unit>
        <trans-unit id="bd1403582a93eae6afc78ba671eb7bfd29e1a41c" translate="yes" xml:space="preserve">
          <source>Failing that, it tries to call a method with no arguments.</source>
          <target state="translated">それを怠ると、引数を持たないメソッドを呼ぼうとします。</target>
        </trans-unit>
        <trans-unit id="78f2e4cd01251a37129c61231869ef7cd447bba6" translate="yes" xml:space="preserve">
          <source>Failing that, it uses the class attribute.</source>
          <target state="translated">そうでない場合は、class属性を使用します。</target>
        </trans-unit>
        <trans-unit id="daba93200f9881fcb90a858f1083e7b233503da4" translate="yes" xml:space="preserve">
          <source>Failing that, it uses the global &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt;&lt;code&gt;LANGUAGE_CODE&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">これに失敗すると、グローバルな&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt; &lt;code&gt;LANGUAGE_CODE&lt;/code&gt; &lt;/a&gt;設定が使用されます。</target>
        </trans-unit>
        <trans-unit id="9376bd2640685d30a49f2800924a129239f3145d" translate="yes" xml:space="preserve">
          <source>Failure to do this may result in crashes and other odd behavior.</source>
          <target state="translated">これを行わないと、クラッシュやその他の奇妙な動作を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="867930b7270d0a26287c69169778dcde1c78652a" translate="yes" xml:space="preserve">
          <source>Falling back to raw SQL</source>
          <target state="translated">生のSQLにフォールバック</target>
        </trans-unit>
        <trans-unit id="3c507d35c8f807782c5814cb5c74433546913b36" translate="yes" xml:space="preserve">
          <source>Fathom</source>
          <target state="translated">Fathom</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="18e57197e43d3fe68f8e721d2e84d9ac95a73d3a" translate="yes" xml:space="preserve">
          <source>Feed classes subclass &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;django.contrib.syndication.views.Feed&lt;/code&gt;&lt;/a&gt;. They can live anywhere in your codebase.</source>
          <target state="translated">フィードクラスサブクラス&lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;django.contrib.syndication.views.Feed&lt;/code&gt; &lt;/a&gt;。コードベースのどこにでも置くことができます。</target>
        </trans-unit>
        <trans-unit id="ae2a87fa257d65ef465975910173b2832c69bc9b" translate="yes" xml:space="preserve">
          <source>Feeds created by the syndication framework automatically include the appropriate &lt;code&gt;&amp;lt;language&amp;gt;&lt;/code&gt; tag (RSS 2.0) or &lt;code&gt;xml:lang&lt;/code&gt; attribute (Atom). By default, this is &lt;a href=&quot;../utils#django.utils.translation.get_language&quot;&gt;&lt;code&gt;django.utils.translation.get_language()&lt;/code&gt;&lt;/a&gt;. You can change it by setting the &lt;code&gt;language&lt;/code&gt; class attribute.</source>
          <target state="translated">シンジケーションフレームワークによって作成されたフィードには、適切な &lt;code&gt;&amp;lt;language&amp;gt;&lt;/code&gt; タグ（RSS 2.0）または &lt;code&gt;xml:lang&lt;/code&gt; 属性（Atom）が自動的に含まれます。デフォルトでは、これは&lt;a href=&quot;../utils#django.utils.translation.get_language&quot;&gt; &lt;code&gt;django.utils.translation.get_language()&lt;/code&gt; &lt;/a&gt;です。 &lt;code&gt;language&lt;/code&gt; クラス属性を設定することで変更できます。</target>
        </trans-unit>
        <trans-unit id="6a089a3455a9132618b650edc1b4b63342d919da" translate="yes" xml:space="preserve">
          <source>Fetches the translation object for a given language and activates it as the current translation object for the current thread.</source>
          <target state="translated">指定した言語の翻訳オブジェクトを取得し、現在のスレッドの現在の翻訳オブジェクトとして起動します。</target>
        </trans-unit>
        <trans-unit id="45a974c13aedb33cff91f2d14787eef2943d0e13" translate="yes" xml:space="preserve">
          <source>Field API reference</source>
          <target state="translated">フィールドAPIリファレンス</target>
        </trans-unit>
        <trans-unit id="a76e02cbf32999a29e1b2b1585645a9926ddc707" translate="yes" xml:space="preserve">
          <source>Field access API</source>
          <target state="translated">フィールドアクセスAPI</target>
        </trans-unit>
        <trans-unit id="282aaa04aad4c1c7bd5570bd49d88ec663e21324" translate="yes" xml:space="preserve">
          <source>Field arguments</source>
          <target state="translated">フィールド引数</target>
        </trans-unit>
        <trans-unit id="e71fe26990b7a34495c8ffcbd682b9c85ef4c500" translate="yes" xml:space="preserve">
          <source>Field attribute reference</source>
          <target state="translated">フィールド属性参照</target>
        </trans-unit>
        <trans-unit id="1e5d6ae38bba9092fbe0789f613d8ff5f70af916" translate="yes" xml:space="preserve">
          <source>Field data</source>
          <target state="translated">フィールドデータ</target>
        </trans-unit>
        <trans-unit id="c0d3f0c4a7826daabb87e544c07e16ae9a1aae25" translate="yes" xml:space="preserve">
          <source>Field deconstruction</source>
          <target state="translated">フィールドデコンストラクション</target>
        </trans-unit>
        <trans-unit id="e9a1f3162e984c22776c04000f60154f1ea2d6b7" translate="yes" xml:space="preserve">
          <source>Field lookups</source>
          <target state="translated">フィールド検索</target>
        </trans-unit>
        <trans-unit id="8ba1e33ebf2d161e319e0f55bd5ed96a5be22912" translate="yes" xml:space="preserve">
          <source>Field lookups are how you specify the meat of an SQL &lt;code&gt;WHERE&lt;/code&gt; clause. They&amp;rsquo;re specified as keyword arguments to the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; methods &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code&gt;exclude()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">フィールド検索は、SQL &lt;code&gt;WHERE&lt;/code&gt; 句の要点を指定する方法です。これらは、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;メソッド&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt; &lt;code&gt;exclude()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; の&lt;/a&gt;キーワード引数として指定されます。</target>
        </trans-unit>
        <trans-unit id="de02473788e53e5314ba20e745a81a059534078a" translate="yes" xml:space="preserve">
          <source>Field lookups are how you specify the meat of an SQL &lt;code&gt;WHERE&lt;/code&gt; clause. They&amp;rsquo;re specified as keyword arguments to the &lt;code&gt;QuerySet&lt;/code&gt; methods &lt;a href=&quot;#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code&gt;exclude()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">フィールド検索は、SQL &lt;code&gt;WHERE&lt;/code&gt; 句の要点を指定する方法です。これらは、 &lt;code&gt;QuerySet&lt;/code&gt; メソッド&lt;a href=&quot;#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#django.db.models.query.QuerySet.exclude&quot;&gt; &lt;code&gt;exclude()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; の&lt;/a&gt;キーワード引数として指定されます。</target>
        </trans-unit>
        <trans-unit id="edd206db8bde7bd496ee0a188e1b235db841d06e" translate="yes" xml:space="preserve">
          <source>Field name &amp;ldquo;hiding&amp;rdquo; is not permitted</source>
          <target state="translated">フィールド名「非表示」は許可されていません</target>
        </trans-unit>
        <trans-unit id="9f84cd5b8686ba36d2da6cdcdf6560cb8c808bc7" translate="yes" xml:space="preserve">
          <source>Field name restrictions</source>
          <target state="translated">フィールド名の制限</target>
        </trans-unit>
        <trans-unit id="6c79fbefec29de2b101946780ef45e1143ad0b98" translate="yes" xml:space="preserve">
          <source>Field names in &lt;code&gt;list_filter&lt;/code&gt; can also span relations using the &lt;code&gt;__&lt;/code&gt; lookup, for example:</source>
          <target state="translated">&lt;code&gt;list_filter&lt;/code&gt; のフィールド名は、 &lt;code&gt;__&lt;/code&gt; ルックアップを使用してリレーションにまたがることができます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="be3f93fdeca716d06ed041ec33499ba88ce49e88" translate="yes" xml:space="preserve">
          <source>Field options</source>
          <target state="translated">フィールドオプション</target>
        </trans-unit>
        <trans-unit id="3d706d3e63f5c876c490f7bad6178a61d0e1fe44" translate="yes" xml:space="preserve">
          <source>Field types</source>
          <target state="translated">フィールドの種類</target>
        </trans-unit>
        <trans-unit id="c746afbe662ca1098fcbb794dd1cc489ba49c934" translate="yes" xml:space="preserve">
          <source>Field, model, manager, and database checks</source>
          <target state="translated">フィールド、モデル、マネージャー、データベースのチェック</target>
        </trans-unit>
        <trans-unit id="e8b685271238adf161cffed3c91f54d97023262b" translate="yes" xml:space="preserve">
          <source>Fields</source>
          <target state="translated">Fields</target>
        </trans-unit>
        <trans-unit id="d687c0519153fa97398989418fffd131cb65322d" translate="yes" xml:space="preserve">
          <source>Fields can also define their own &lt;a href=&quot;fields#django.forms.Field.label_suffix&quot;&gt;&lt;code&gt;label_suffix&lt;/code&gt;&lt;/a&gt;. This will take precedence over &lt;a href=&quot;#django.forms.Form.label_suffix&quot;&gt;&lt;code&gt;Form.label_suffix&lt;/code&gt;&lt;/a&gt;. The suffix can also be overridden at runtime using the &lt;code&gt;label_suffix&lt;/code&gt; parameter to &lt;a href=&quot;#django.forms.BoundField.label_tag&quot;&gt;&lt;code&gt;label_tag()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">フィールドは、独自の&lt;a href=&quot;fields#django.forms.Field.label_suffix&quot;&gt; &lt;code&gt;label_suffix&lt;/code&gt; を&lt;/a&gt;定義することもできます。これは&lt;a href=&quot;#django.forms.Form.label_suffix&quot;&gt; &lt;code&gt;Form.label_suffix&lt;/code&gt; &lt;/a&gt;よりも優先されます。&lt;a href=&quot;#django.forms.BoundField.label_tag&quot;&gt; &lt;code&gt;label_tag()&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;label_suffix&lt;/code&gt; パラメータを使用して、実行時にサフィックスをオーバーライドすることもできます。</target>
        </trans-unit>
        <trans-unit id="8c31c1b8a22e80178c8f35c1a32489ad6b27fe89" translate="yes" xml:space="preserve">
          <source>Fields defined declaratively are left as-is, therefore any customizations made to &lt;code&gt;Meta&lt;/code&gt; attributes such as &lt;code&gt;widgets&lt;/code&gt;, &lt;code&gt;labels&lt;/code&gt;, &lt;code&gt;help_texts&lt;/code&gt;, or &lt;code&gt;error_messages&lt;/code&gt; are ignored; these only apply to fields that are generated automatically.</source>
          <target state="translated">宣言的に定義されたフィールドはそのまま残されるため、 &lt;code&gt;widgets&lt;/code&gt; 、 &lt;code&gt;labels&lt;/code&gt; 、 &lt;code&gt;help_texts&lt;/code&gt; 、 &lt;code&gt;error_messages&lt;/code&gt; などの &lt;code&gt;Meta&lt;/code&gt; 属性に対して行われたカスタマイズは無視されます。これらは、自動的に生成されるフィールドにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="2e4b54398209b421c31d866803a092dc90d5f00e" translate="yes" xml:space="preserve">
          <source>Fields in a model must somehow be converted to fit into an existing database column type. Different databases provide different sets of valid column types, but the rule is still the same: those are the only types you have to work with. Anything you want to store in the database must fit into one of those types.</source>
          <target state="translated">モデル内のフィールドは、何らかの方法で既存のデータベースのカラムタイプに適合するように変換しなければなりません。データベースによって有効なカラムタイプは異なりますが、ルールは同じです。データベースに保存したいものはすべて、これらの型のいずれかに適合しなければなりません。</target>
        </trans-unit>
        <trans-unit id="a1ce3604b2bea58b4cfbd39c366a9f2a49f3af6f" translate="yes" xml:space="preserve">
          <source>Fields inherited from abstract base classes can be overridden with another field or value, or be removed with &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">抽象基本クラスから継承されたフィールドは、別のフィールドまたは値でオーバーライドしたり、 &lt;code&gt;None&lt;/code&gt; で削除したりできます。</target>
        </trans-unit>
        <trans-unit id="ab3bfc05c4cd1e813b9d0f7e2113e49dbffe2ad8" translate="yes" xml:space="preserve">
          <source>Fields may also be left out:</source>
          <target state="translated">また、フィールドが抜けている場合もあります。</target>
        </trans-unit>
        <trans-unit id="735f77b3cf32e7c5bd2499b099e098b496222116" translate="yes" xml:space="preserve">
          <source>Fields often receive their values as a different type, either from serialization or from forms.</source>
          <target state="translated">フィールドはしばしば、シリアライズやフォームから別の型として値を受け取ることがあります。</target>
        </trans-unit>
        <trans-unit id="649dca6dab9c7c229f6569d38d4d5b19292672ac" translate="yes" xml:space="preserve">
          <source>Fields part (e.g. &lt;code&gt;Book.objects.filter(author__best_friends__first_name...&lt;/code&gt;);</source>
          <target state="translated">フィールド部分（例： &lt;code&gt;Book.objects.filter(author__best_friends__first_name...&lt;/code&gt; ）;</target>
        </trans-unit>
        <trans-unit id="6b0b0df8fdb846cd8048a567025b5eaea5d1a48e" translate="yes" xml:space="preserve">
          <source>Fields that are mentioned in the &lt;code&gt;order_by()&lt;/code&gt; part of a queryset (or which are used in the default ordering on a model) are used when selecting the output data, even if they are not otherwise specified in the &lt;code&gt;values()&lt;/code&gt; call. These extra fields are used to group &amp;ldquo;like&amp;rdquo; results together and they can make otherwise identical result rows appear to be separate. This shows up, particularly, when counting things.</source>
          <target state="translated">&lt;code&gt;order_by()&lt;/code&gt; 部分で言及されているフィールド（またはモデルのデフォルトの順序で使用されているフィールド）は、 &lt;code&gt;values()&lt;/code&gt; 呼び出しで指定されていない場合でも、出力データを選択するときに使用されます。これらの追加フィールドは、「類似」結果をグループ化するために使用され、その他の点では同一の結果行を分離して表示することができます。これは、特に物事を数えるときに現れます。</target>
        </trans-unit>
        <trans-unit id="411569bb97e7d67430cbe51d6736a6ce69285486" translate="yes" xml:space="preserve">
          <source>Fields which handle relationships</source>
          <target state="translated">リレーションシップを扱うフィールド</target>
        </trans-unit>
        <trans-unit id="c86a640297208576f75bdb7a600c45029133d4ec" translate="yes" xml:space="preserve">
          <source>Fields, models, model managers, and database backends all implement a &lt;code&gt;check()&lt;/code&gt; method that is already registered with the check framework. If you want to add extra checks, you can extend the implementation on the base class, perform any extra checks you need, and append any messages to those generated by the base class. It&amp;rsquo;s recommended that you delegate each check to separate methods.</source>
          <target state="translated">フィールド、モデル、モデルマネージャ、およびデータベースバックエンドはすべて、チェックフレームワークにすでに登録されている &lt;code&gt;check()&lt;/code&gt; メソッドを実装します。追加のチェックを追加する場合は、基本クラスの実装を拡張し、必要な追加のチェックを実行し、基本クラスによって生成されたメッセージにメッセージを追加できます。各チェックを個別のメソッドに委任することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c09ab9ea91985578fea6798c7cff8723d2b9441b" translate="yes" xml:space="preserve">
          <source>File Uploads</source>
          <target state="translated">ファイルのアップロード</target>
        </trans-unit>
        <trans-unit id="1d9e62a1fedfedfcb20115ceea1d374d7dda8495" translate="yes" xml:space="preserve">
          <source>File a ticket on the &lt;a href=&quot;https://code.djangoproject.com/newticket&quot;&gt;Django trac&lt;/a&gt; if you think there&amp;rsquo;s a bug. Make sure to provide a complete description of the problem, versions used, and specify the component as &amp;ldquo;GIS&amp;rdquo;.</source>
          <target state="translated">バグがあると思われる場合は、&lt;a href=&quot;https://code.djangoproject.com/newticket&quot;&gt;Django tracで&lt;/a&gt;チケットを提出してください。問題の完全な説明、使用されているバージョンを提供し、コンポーネントを「GIS」として指定してください。</target>
        </trans-unit>
        <trans-unit id="1a7ab172756297721d64b7156ecbe6a065edd437" translate="yes" xml:space="preserve">
          <source>File backend</source>
          <target state="translated">ファイルバックエンド</target>
        </trans-unit>
        <trans-unit id="b4af38cf5f37ffcfc2b4fe1a33a1925a531bb6b9" translate="yes" xml:space="preserve">
          <source>File fields</source>
          <target state="translated">ファイルフィールド</target>
        </trans-unit>
        <trans-unit id="f315ee9e3108a80c179abb06fe33569d756f7ff5" translate="yes" xml:space="preserve">
          <source>File handling</source>
          <target state="translated">ファイルの取り扱い</target>
        </trans-unit>
        <trans-unit id="1ac64f740855657dfcf61583d119bf59cfc9325e" translate="yes" xml:space="preserve">
          <source>File sizes and SI units</source>
          <target state="translated">ファイルサイズとSI単位</target>
        </trans-unit>
        <trans-unit id="4fbddfd9eb12271294f00a76c9a60f72b6ebe149" translate="yes" xml:space="preserve">
          <source>File storage</source>
          <target state="translated">ファイルストレージ</target>
        </trans-unit>
        <trans-unit id="71025f778a7a21d0f22a6af0bc522d944a87f0ea" translate="yes" xml:space="preserve">
          <source>File storage API</source>
          <target state="translated">ファイルストレージ API</target>
        </trans-unit>
        <trans-unit id="f9c9e67f41f3c2b222b70fa3cecb8fce951b7d30" translate="yes" xml:space="preserve">
          <source>File upload handler to stream uploads into memory (used for small files).</source>
          <target state="translated">メモリへのアップロードをストリーム配信するファイルアップロードハンドラ (小さなファイルに使用)。</target>
        </trans-unit>
        <trans-unit id="ba4a0b1594c6d040cfba60824c3d79e33345a5ba" translate="yes" xml:space="preserve">
          <source>File upload widgets</source>
          <target state="translated">ファイルアップロードウィジェット</target>
        </trans-unit>
        <trans-unit id="1034ff014ad9c6d1a9f554317aa69386237c2716" translate="yes" xml:space="preserve">
          <source>File uploads</source>
          <target state="translated">ファイルのアップロード</target>
        </trans-unit>
        <trans-unit id="6ce6c512ea433a7fc5c8841628e7696cd0ff7f2b" translate="yes" xml:space="preserve">
          <source>Files</source>
          <target state="translated">Files</target>
        </trans-unit>
        <trans-unit id="5a808ab38206da493d5c1218c6fc2ffc7b0a7b8d" translate="yes" xml:space="preserve">
          <source>Files are not placed directly in this directory, but in a directory named as the locale, and must be named &lt;code&gt;formats.py&lt;/code&gt;. Be careful not to put sensitive information in these files as values inside can be exposed if you pass the string to &lt;code&gt;django.utils.formats.get_format()&lt;/code&gt; (used by the &lt;a href=&quot;../../ref/templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; template filter).</source>
          <target state="translated">ファイルはこのディレクトリに直接置かれるのではなく、ロケールとして名前が付けられたディレクトリに置かれ、 &lt;code&gt;formats.py&lt;/code&gt; という名前にする必要があります。文字列を &lt;code&gt;django.utils.formats.get_format()&lt;/code&gt; （&lt;a href=&quot;../../ref/templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;テンプレートフィルターで使用）に渡した場合、内部の値が公開される可能性があるため、これらのファイルに機密情報を含めないように注意してください。</target>
        </trans-unit>
        <trans-unit id="b332b7daf9a3a02657d8c693e3a869fe55fa2105" translate="yes" xml:space="preserve">
          <source>Files are searched by using the &lt;a href=&quot;../settings#std:setting-STATICFILES_FINDERS&quot;&gt;&lt;code&gt;enabled finders&lt;/code&gt;&lt;/a&gt;. The default is to look in all locations defined in &lt;a href=&quot;../settings#std:setting-STATICFILES_DIRS&quot;&gt;&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;&lt;/a&gt; and in the &lt;code&gt;'static'&lt;/code&gt; directory of apps specified by the &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">ファイルは、&lt;a href=&quot;../settings#std:setting-STATICFILES_FINDERS&quot;&gt; &lt;code&gt;enabled finders&lt;/code&gt; &lt;/a&gt;を使用して検索されます。デフォルトでは、&lt;a href=&quot;../settings#std:setting-STATICFILES_DIRS&quot;&gt; &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; &lt;/a&gt;で定義されたすべての場所と、&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;設定で指定されたアプリの &lt;code&gt;'static'&lt;/code&gt; ディレクトリを検索します。</target>
        </trans-unit>
        <trans-unit id="2c4cb9ddfc80d249fbc6e428155e2ef6130c9fde" translate="yes" xml:space="preserve">
          <source>Filesystem caching</source>
          <target state="translated">ファイルシステムのキャッシング</target>
        </trans-unit>
        <trans-unit id="bd3f98a9ded8f39a59250120171f66eaa1a37658" translate="yes" xml:space="preserve">
          <source>Filesystem path to the application directory, e.g. &lt;code&gt;'/usr/lib/pythonX.Y/dist-packages/django/contrib/admin'&lt;/code&gt;.</source>
          <target state="translated">アプリケーションディレクトリへのファイルシステムパス。たとえば、 &lt;code&gt;'/usr/lib/pythonX.Y/dist-packages/django/contrib/admin'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dec2af05161a7d1f37defc8ce43fa042e1b1e142" translate="yes" xml:space="preserve">
          <source>Filesystem support for UTF-8 file names varies and might depend on the environment. Check your current configuration in an interactive Python shell by running:</source>
          <target state="translated">UTF-8 ファイル名のファイルシステムのサポートは環境によって異なります。Python シェルを実行して、現在の設定を確認してください。</target>
        </trans-unit>
        <trans-unit id="064a6ecd0c2f43e9d807415fbc454164583413f8" translate="yes" xml:space="preserve">
          <source>Filter arguments that contain spaces must be quoted; for example, to join a list with commas and spaces you&amp;rsquo;d use &lt;code&gt;{{ list|join:&quot;, &quot; }}&lt;/code&gt;.</source>
          <target state="translated">スペースを含むフィルター引数は引用符で囲む必要があります。たとえば、カンマとスペースでリストを結合するには、 &lt;code&gt;{{ list|join:&quot;, &quot; }}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="baa5a4aff7498791cba3132ca42f419049e06250" translate="yes" xml:space="preserve">
          <source>Filtered &lt;code&gt;QuerySet&lt;/code&gt;s are unique</source>
          <target state="translated">フィルターされた &lt;code&gt;QuerySet&lt;/code&gt; は一意です</target>
        </trans-unit>
        <trans-unit id="b894cdef7d89584d0c37e80b41e691627b9792b3" translate="yes" xml:space="preserve">
          <source>Filtering a &lt;code&gt;DateTimeField&lt;/code&gt; with dates won&amp;rsquo;t include items on the last day, because the bounds are interpreted as &amp;ldquo;0am on the given date&amp;rdquo;. If &lt;code&gt;pub_date&lt;/code&gt; was a &lt;code&gt;DateTimeField&lt;/code&gt;, the above expression would be turned into this SQL:</source>
          <target state="translated">境界は「指定された日付の午前0時」と解釈されるため、 &lt;code&gt;DateTimeField&lt;/code&gt; を日付でフィルタリングすると、最終日のアイテムは含まれません。場合 &lt;code&gt;pub_date&lt;/code&gt; いた &lt;code&gt;DateTimeField&lt;/code&gt; 型、上記の式は、このSQLに変換することになります。</target>
        </trans-unit>
        <trans-unit id="21c21863ced6fea985f370603935cf40144ee066" translate="yes" xml:space="preserve">
          <source>Filtering based on related fields is still possible, though:</source>
          <target state="translated">関連するフィールドに基づいたフィルタリングはまだ可能ですが。</target>
        </trans-unit>
        <trans-unit id="c125011ee5e71a5527fd017471a1ab6ae4a0a8f3" translate="yes" xml:space="preserve">
          <source>Filtering error reports</source>
          <target state="translated">エラーレポートのフィルタリング</target>
        </trans-unit>
        <trans-unit id="ec57d8e8dc39b85d41897169a222ce9aca885b3d" translate="yes" xml:space="preserve">
          <source>Filtering on a &lt;code&gt;Subquery()&lt;/code&gt; or &lt;code&gt;Exists()&lt;/code&gt; expressions</source>
          <target state="translated">&lt;code&gt;Subquery()&lt;/code&gt; または &lt;code&gt;Exists()&lt;/code&gt; 式でのフィルタリング</target>
        </trans-unit>
        <trans-unit id="bbeb1a129ed00a4be852142a445f31b431d9e37f" translate="yes" xml:space="preserve">
          <source>Filtering on annotations</source>
          <target state="translated">アノテーションのフィルタリング</target>
        </trans-unit>
        <trans-unit id="d4d2a915bbe6eae704a47051c5580987e9df5f97" translate="yes" xml:space="preserve">
          <source>Filtering sensitive data is a hard problem, and it&amp;rsquo;s nearly impossible to guarantee that sensitive data won&amp;rsquo;t leak into an error report. Therefore, error reports should only be available to trusted team members and you should avoid transmitting error reports unencrypted over the Internet (such as through email).</source>
          <target state="translated">機密データのフィルタリングは困難な問題であり、機密データがエラーレポートに漏洩しないことを保証することはほぼ不可能です。したがって、エラーレポートは信頼できるチームメンバーのみが使用できるようにし、暗号化されていないエラーレポートをインターネット経由（電子メールなど）で送信しないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="b300bf2848881dd005ab05cfb5d3067621063178" translate="yes" xml:space="preserve">
          <source>Filtering sensitive information</source>
          <target state="translated">機密情報のフィルタリング</target>
        </trans-unit>
        <trans-unit id="96e578211aa295317cf257310712fa28ccd8f6c6" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="translated">Filters</target>
        </trans-unit>
        <trans-unit id="37d1a04fb6ac0e4121a6fbe09fb442246515bc5f" translate="yes" xml:space="preserve">
          <source>Filters and auto-escaping</source>
          <target state="translated">フィルタと自動エスケープ</target>
        </trans-unit>
        <trans-unit id="c2ec981eb8d58b3ef43b299478b6a29120b322e3" translate="yes" xml:space="preserve">
          <source>Filters and time zones</source>
          <target state="translated">フィルターと時間帯</target>
        </trans-unit>
        <trans-unit id="df17e555b6c3a6eea091cba497e7a85d2fbb7246" translate="yes" xml:space="preserve">
          <source>Filters can also be used to modify the logging record prior to being emitted. For example, you could write a filter that downgrades &lt;code&gt;ERROR&lt;/code&gt; log records to &lt;code&gt;WARNING&lt;/code&gt; records if a particular set of criteria are met.</source>
          <target state="translated">フィルターは、出力される前にロギングレコードを変更するためにも使用できます。たとえば、特定の条件セットが満たされた場合に、 &lt;code&gt;ERROR&lt;/code&gt; ログレコードを &lt;code&gt;WARNING&lt;/code&gt; レコードにダウングレードするフィルターを作成できます。</target>
        </trans-unit>
        <trans-unit id="a8964d1e419845ad4c18fd2f8649fc00791c6f00" translate="yes" xml:space="preserve">
          <source>Filters can be &amp;ldquo;chained.&amp;rdquo; The output of one filter is applied to the next. &lt;code&gt;{{ text|escape|linebreaks }}&lt;/code&gt; is a common idiom for escaping text contents, then converting line breaks to &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">フィルターは「連鎖」させることができます。1つのフィルターの出力が次のフィルターに適用されます。 &lt;code&gt;{{ text|escape|linebreaks }}&lt;/code&gt; は、テキストの内容をエスケープし、改行を &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; タグに変換するための一般的な慣用法です。</target>
        </trans-unit>
        <trans-unit id="e738b480fb11b865a70faf1e8e3799fdf968de6e" translate="yes" xml:space="preserve">
          <source>Filters can be installed on loggers or on handlers; multiple filters can be used in a chain to perform multiple filtering actions.</source>
          <target state="translated">複数のフィルタをチェーンで使用して、複数のフィルタリング アクションを実行できます。</target>
        </trans-unit>
        <trans-unit id="02d84f01927ff49807c91015e758e0823bc84dd0" translate="yes" xml:space="preserve">
          <source>Filters can reference fields on the model</source>
          <target state="translated">フィルタはモデル上のフィールドを参照することができます。</target>
        </trans-unit>
        <trans-unit id="36ecc47b08bb577fdfadae1bfa24d7ce8abdc25f" translate="yes" xml:space="preserve">
          <source>Filters look like this: &lt;code&gt;{{ name|lower }}&lt;/code&gt;. This displays the value of the &lt;code&gt;{{ name }}&lt;/code&gt; variable after being filtered through the &lt;a href=&quot;builtins#std:templatefilter-lower&quot;&gt;&lt;code&gt;lower&lt;/code&gt;&lt;/a&gt; filter, which converts text to lowercase. Use a pipe (&lt;code&gt;|&lt;/code&gt;) to apply a filter.</source>
          <target state="translated">フィルターは次のようになります： &lt;code&gt;{{ name|lower }}&lt;/code&gt; 。これは、テキストを小文字に変換する&lt;a href=&quot;builtins#std:templatefilter-lower&quot;&gt; &lt;code&gt;lower&lt;/code&gt; &lt;/a&gt;フィルターでフィルター処理された後の &lt;code&gt;{{ name }}&lt;/code&gt; 変数の値を表示します。パイプ（ &lt;code&gt;|&lt;/code&gt; ）を使用してフィルターを適用します。</target>
        </trans-unit>
        <trans-unit id="0e1b2c782245e2ea1e80ac7aa3a8a9f94d0ac56d" translate="yes" xml:space="preserve">
          <source>Filters on &amp;lsquo;normal&amp;rsquo; fields (e.g. &lt;a href=&quot;../../models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;) may be chained with those on geographic fields. Geographic lookups accept geometry and raster input on both sides and input types can be mixed freely.</source>
          <target state="translated">「通常の」フィールド（例：&lt;a href=&quot;../../models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;）のフィルターは、地理的フィールドのフィルターと連鎖させることができます。地理的ルックアップは、両側でジオメトリとラスター入力を受け入れ、入力タイプは自由に混合できます。</target>
        </trans-unit>
        <trans-unit id="a4cada1706385afc3adccbac6d998fce15b35325" translate="yes" xml:space="preserve">
          <source>Filters that are applied to an invalid variable will only be applied if &lt;code&gt;string_if_invalid&lt;/code&gt; is set to &lt;code&gt;''&lt;/code&gt; (the empty string). If &lt;code&gt;string_if_invalid&lt;/code&gt; is set to any other value, variable filters will be ignored.</source>
          <target state="translated">無効な変数に適用される &lt;code&gt;string_if_invalid&lt;/code&gt; は、string_if_invalidが &lt;code&gt;''&lt;/code&gt; （空の文字列）に設定されている場合にのみ適用されます。場合 &lt;code&gt;string_if_invalid&lt;/code&gt; が他の値に設定されている、可変フィルタは無視されます。</target>
        </trans-unit>
        <trans-unit id="afc3b1fa886539f440b0ef0b2454da8bac2d0877" translate="yes" xml:space="preserve">
          <source>Filters the contents of the block through one or more filters. Multiple filters can be specified with pipes and filters can have arguments, just as in variable syntax.</source>
          <target state="translated">ブロックの内容を 1 つ以上のフィルタを通してフィルタリングします。複数のフィルタはパイプで指定でき、フィルタは変数構文と同様に引数を持つことができます。</target>
        </trans-unit>
        <trans-unit id="74f6dad66e444f0ae376477bab0028a633de518a" translate="yes" xml:space="preserve">
          <source>Filters transform the values of variables and tag arguments.</source>
          <target state="translated">フィルタは、変数やタグの引数の値を変換します。</target>
        </trans-unit>
        <trans-unit id="e479ba056762d32f930830c86c57db13e38da04f" translate="yes" xml:space="preserve">
          <source>Finally Django runs the &lt;a href=&quot;#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt; method of each application configuration.</source>
          <target state="translated">最後に、Django は各アプリケーション構成の&lt;a href=&quot;#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt;メソッドを実行します。</target>
        </trans-unit>
        <trans-unit id="7484b10d5859089fb94b711d3a65b9931217660f" translate="yes" xml:space="preserve">
          <source>Finally for this example, suppose you want to add extra managers to the child class, but still use the default from &lt;code&gt;AbstractBase&lt;/code&gt;. You can&amp;rsquo;t add the new manager directly in the child class, as that would override the default and you would have to also explicitly include all the managers from the abstract base class. The solution is to put the extra managers in another base class and introduce it into the inheritance hierarchy &lt;em&gt;after&lt;/em&gt; the defaults:</source>
          <target state="translated">最後に、この例では、子クラスにマネージャーを追加し、 &lt;code&gt;AbstractBase&lt;/code&gt; のデフォルトを引き続き使用するとします。新しいマネージャーを子クラスに直接追加することはできません。これは、デフォルトをオーバーライドし、抽象基本クラスからすべてのマネージャーを明示的に含める必要があるためです。解決策は、追加のマネージャーを別の基本クラス&lt;em&gt;に配置し&lt;/em&gt;、デフォルトの&lt;em&gt;後に&lt;/em&gt;それを継承階層&lt;em&gt;に&lt;/em&gt;導入することです。</target>
        </trans-unit>
        <trans-unit id="f252f3912ee8270c9c6e056b75c1aae80ee0ac41" translate="yes" xml:space="preserve">
          <source>Finally hook that view into your urls:</source>
          <target state="translated">最後に、そのビューをあなたのウルにフックします。</target>
        </trans-unit>
        <trans-unit id="b745f09072b34c554b7e55654dd490d47a16da00" translate="yes" xml:space="preserve">
          <source>Finally we bring this together in a new &lt;code&gt;AuthorDetail&lt;/code&gt; view. We already know that calling &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; on a class-based view gives us something that behaves exactly like a function based view, so we can do that at the point we choose between the two subviews.</source>
          <target state="translated">最後に、これを新しい &lt;code&gt;AuthorDetail&lt;/code&gt; ビューにまとめます。クラスベースのビューで&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt; &lt;code&gt;as_view()&lt;/code&gt; &lt;/a&gt;を呼び出すと、関数ベースのビューとまったく同じように動作することがわかっているため、2つのサブビューから選択した時点でそれを行うことができます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
